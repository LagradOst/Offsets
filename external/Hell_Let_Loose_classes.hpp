namespace off {
	constexpr auto GNames = 0x3e33c00;
	constexpr auto GObjects = 0x3e4c5f0;
	constexpr auto GWorld = 0x3f8ddb0;

	namespace n_UHLLGunnerUI_Howitzer {
		constexpr auto NumRangeEntries = 0x270; // int32_t
		constexpr auto ItemClass = 0x278; // UHLLGunnerUI_HowitzerRangeItem*
		constexpr auto ItemList = 0x280; // TArray<UHLLGunnerUI_HowitzerRangeItem*>
		constexpr auto RangeVBox = 0x290; // UVerticalBox*
		constexpr auto ArtilleryWeaponInfo = 0x298; // UHLLArmourWeaponUI*
		constexpr auto TraverseValue = 0x2a0; // UTextBlock*
		constexpr auto ElevationValue = 0x2a8; // UTextBlock*
	}

	namespace n_UParticleModuleVectorFieldScale {
		constexpr auto VectorFieldScale = 0x30; // UDistributionFloat*
		constexpr auto VectorFieldScaleRaw = 0x38; // FRawDistributionFloat
	}

	namespace n_AVolumetricLightmapDensityVolume {
		constexpr auto AllowedMipLevelRange = 0x258; // FInt32Interval
	}

	namespace n_UHLLVehicleForceFeedbackData {
		constexpr auto Events = 0x38; // TArray<FHLLVehicleForceFeedbackEvent>
	}

	namespace n_ULevelSequence {
		constexpr auto MovieScene = 0x348; // UMovieScene*
		constexpr auto ObjectReferences = 0x350; // FLevelSequenceObjectReferenceMap
		constexpr auto BindingReferences = 0x3a0; // FLevelSequenceBindingReferences
		constexpr auto PossessedObjects = 0x440; // TMap<FString, FLevelSequenceObject>
		constexpr auto DirectorClass = 0x490; // UObject*
	}

	namespace n_UHTP_Widget_Topic_Generic_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto HB_Header = 0x238; // UHorizontalBox*
		constexpr auto HTP_Widget_Role_Loadout_Commander = 0x240; // UHTP_Widget_Role_Loadout_Commander_C*
		constexpr auto Image_2 = 0x248; // UImage*
		constexpr auto Image_3 = 0x250; // UImage*
		constexpr auto img_headerIcon = 0x258; // UImage*
		constexpr auto img_Image = 0x260; // UImage*
		constexpr auto rtxt_Description = 0x268; // URichTextBlock*
		constexpr auto SB_HeaderIcon = 0x270; // USizeBox*
		constexpr auto SB_Image = 0x278; // USizeBox*
		constexpr auto SB_SubWidget = 0x280; // USizeBox*
		constexpr auto txt_Name = 0x288; // UTextBlock*
		constexpr auto txt_subTitle = 0x290; // UTextBlock*
		constexpr auto txt_Tagline = 0x298; // UTextBlock*
		constexpr auto WidgetSwitcher_Visuals = 0x2a0; // UWidgetSwitcher*
		constexpr auto MapName = 0x2a8; // FText
		constexpr auto MapImage = 0x2c0; // UTexture2D*
		constexpr auto MapDescription = 0x2c8; // FText
		constexpr auto TableRow = 0x2e0; // FName
		constexpr auto rColumnMargins = 0x2e8; // FMargin
		constexpr auto lColumnMargins = 0x2f8; // FMargin
		constexpr auto hasImage = 0x308; // bool
		constexpr auto ColumnMargins_null = 0x30c; // FMargin
		constexpr auto isUltrawide = 0x31c; // bool
		constexpr auto isNotWidescreen = 0x31d; // bool
		constexpr auto imageDimensions = 0x320; // FVector2D
		constexpr auto wrapLength = 0x328; // float
		constexpr auto hasWidget = 0x32c; // bool
		constexpr auto HintInfo = 0x330; // FST_HTP
	}

	namespace n_UGarbageCollectionSettings {
		constexpr auto TimeBetweenPurgingPendingKillObjects = 0x38; // float
		constexpr auto FlushStreamingOnGC = 0x3c; // char : 1
		constexpr auto AllowParallelGC = 0x3c; // char : 1
		constexpr auto IncrementalBeginDestroyEnabled = 0x3c; // char : 1
		constexpr auto MultithreadedDestructionEnabled = 0x3c; // char : 1
		constexpr auto CreateGCClusters = 0x3c; // char : 1
		constexpr auto AssetClusteringEnabled = 0x3c; // char : 1
		constexpr auto ActorClusteringEnabled = 0x3c; // char : 1
		constexpr auto BlueprintClusteringEnabled = 0x3c; // char : 1
		constexpr auto UseDisregardForGCOnDedicatedServers = 0x3d; // char : 1
		constexpr auto MinGCClusterSize = 0x40; // int32_t
		constexpr auto NumRetriesBeforeForcingGC = 0x44; // int32_t
		constexpr auto MaxObjectsNotConsideredByGC = 0x48; // int32_t
		constexpr auto SizeOfPermanentObjectPool = 0x4c; // int32_t
		constexpr auto MaxObjectsInGame = 0x50; // int32_t
		constexpr auto MaxObjectsInEditor = 0x54; // int32_t
	}

	namespace n_UNetConnection {
		constexpr auto Children = 0x48; // TArray<UChildConnection*>
		constexpr auto Driver = 0x58; // UNetDriver*
		constexpr auto PackageMapClass = 0x60; // UPackageMap*
		constexpr auto PackageMap = 0x68; // UPackageMap*
		constexpr auto OpenChannels = 0x70; // TArray<UChannel*>
		constexpr auto SentTemporaries = 0x80; // TArray<AActor*>
		constexpr auto ViewTarget = 0x90; // AActor*
		constexpr auto OwningActor = 0x98; // AActor*
		constexpr auto MaxPacket = 0xa0; // int32_t
		constexpr auto InternalAck = 0xa4; // char : 1
		constexpr auto PlayerId = 0x160; // FUniqueNetIdRepl
		constexpr auto LastReceiveTime = 0x1d0; // double
		constexpr auto ChannelsToTick = 0x1510; // TArray<UChannel*>
	}

	namespace n_UBrushBuilder {
		constexpr auto BitmapFilename = 0x28; // FString
		constexpr auto Tooltip = 0x38; // FString
		constexpr auto NotifyBadParams = 0x48; // char : 1
		constexpr auto Vertices = 0x50; // TArray<FVector>
		constexpr auto Polys = 0x60; // TArray<FBuilderPoly>
		constexpr auto Layer = 0x70; // FName
		constexpr auto MergeCoplanars = 0x78; // char : 1
	}

	namespace n_AHLLAbilityDrop_BombingRun {
		constexpr auto Drops = 0x230; // TArray<FBombingRunDrop>
		constexpr auto ShellClass = 0x240; // AHLLHowitzerShell*
		constexpr auto MyTeam = 0x248; // ETeam
		constexpr auto DummyRoot = 0x250; // USceneComponent*
		constexpr auto DroppedBy = 0x258; // TWeakObjectPtr<AShooterPlayerState>
	}

	namespace n_UAsyncActionChangePrimaryAssetBundles {
		constexpr auto Completed = 0x78; // FMulticastInlineDelegate
	}

	namespace n_UMovieSceneCameraShakeSection {
		constexpr auto ShakeData = 0xe0; // FMovieSceneCameraShakeSectionData
		constexpr auto ShakeClass = 0x100; // UCameraShake*
		constexpr auto PlayScale = 0x108; // float
		constexpr auto PlaySpace = 0x10c; // ECameraAnimPlaySpace
		constexpr auto UserDefinedPlaySpace = 0x110; // FRotator
	}

	namespace n_UButtonPromptInfo {
		constexpr auto ButtonPrompts = 0x230; // UHorizontalBox*
		constexpr auto ViewportClient = 0x238; // UShooterGameViewportClient*
		constexpr auto PlayerController = 0x250; // APlayerController*
		constexpr auto ButtonPromptInputComponent = 0x258; // UInputComponent*
	}

	namespace n_UMediaTexture {
		constexpr auto AddressX = 0xb8; // TextureAddress
		constexpr auto AddressY = 0xb9; // TextureAddress
		constexpr auto AutoClear = 0xba; // bool
		constexpr auto ClearColor = 0xbc; // FLinearColor
		constexpr auto EnableGenMips = 0xcc; // bool
		constexpr auto NumMips = 0xcd; // char
		constexpr auto MediaPlayer = 0xd0; // UMediaPlayer*
	}

	namespace n_UMaterialExpressionDesaturation {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto Fraction = 0x54; // FExpressionInput
		constexpr auto LuminanceFactors = 0x68; // FLinearColor
	}

	namespace n_AShooterWeapon_Projectile {
		constexpr auto ProjectileClass = 0x8b8; // AShooterProjectile*
	}

	namespace n_UMaterialExpressionBumpOffset {
		constexpr auto Coordinate = 0x40; // FExpressionInput
		constexpr auto Height = 0x54; // FExpressionInput
		constexpr auto HeightRatioInput = 0x68; // FExpressionInput
		constexpr auto HeightRatio = 0x7c; // float
		constexpr auto ReferencePlane = 0x80; // float
		constexpr auto ConstCoordinate = 0x84; // uint32_t
	}

	namespace n_ANavMeshBoundsVolume {
		constexpr auto SupportedAgents = 0x258; // FNavAgentSelector
	}

	namespace n_UMovieScenePrimitiveMaterialSection {
		constexpr auto MaterialChannel = 0xe0; // FMovieSceneObjectPathChannel
	}

	namespace n_UParticleModuleOrbitBase {
		constexpr auto bUseEmitterTime = 0x30; // char : 1
	}

	namespace n_UDistributionVectorParameterBase {
		constexpr auto ParameterName = 0x50; // FName
		constexpr auto MinInput = 0x58; // FVector
		constexpr auto MaxInput = 0x64; // FVector
		constexpr auto MinOutput = 0x70; // FVector
		constexpr auto MaxOutput = 0x7c; // FVector
		constexpr auto ParamModes = 0x88; // DistributionParamMode [0x3]
	}

	namespace n_UMaterialExpressionTemporalSobol {
		constexpr auto Index = 0x40; // FExpressionInput
		constexpr auto Seed = 0x54; // FExpressionInput
		constexpr auto ConstIndex = 0x68; // uint32_t
		constexpr auto ConstSeed = 0x6c; // FVector2D
	}

	namespace n_UInterpTrackLinearColorBase {
		constexpr auto LinearColorTrack = 0x70; // FInterpCurveLinearColor
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_UAnimNotifyState_Trail {
		constexpr auto PSTemplate = 0x30; // UParticleSystem*
		constexpr auto FirstSocketName = 0x38; // FName
		constexpr auto SecondSocketName = 0x40; // FName
		constexpr auto WidthScaleMode = 0x48; // ETrailWidthMode
		constexpr auto WidthScaleCurve = 0x4c; // FName
		constexpr auto bRecycleSpawnedSystems = 0x54; // char : 1
	}

	namespace n_USafeZoneSlot {
		constexpr auto bIsTitleSafe = 0x38; // bool
		constexpr auto SafeAreaScale = 0x3c; // FMargin
		constexpr auto HAlign = 0x4c; // EHorizontalAlignment
		constexpr auto VAlign = 0x4d; // EVerticalAlignment
		constexpr auto Padding = 0x50; // FMargin
	}

	namespace n_USoundfieldEffectBase {
		constexpr auto Settings = 0x28; // USoundfieldEffectSettingsBase*
	}

	namespace n_USimpleConstructionScript {
		constexpr auto RootNodes = 0x28; // TArray<USCS_Node*>
		constexpr auto AllNodes = 0x38; // TArray<USCS_Node*>
		constexpr auto DefaultSceneRootNode = 0x48; // USCS_Node*
	}

	namespace n_UMovieSceneEventSection {
		constexpr auto Events = 0xe0; // FNameCurve
		constexpr auto EventData = 0x158; // FMovieSceneEventSectionData
	}

	namespace n_ULevel {
		constexpr auto OwningWorld = 0xb8; // UWorld*
		constexpr auto Model = 0xc0; // UModel*
		constexpr auto ModelComponents = 0xc8; // TArray<UModelComponent*>
		constexpr auto ActorCluster = 0xd8; // ULevelActorContainer*
		constexpr auto NumTextureStreamingUnbuiltComponents = 0xe0; // int32_t
		constexpr auto NumTextureStreamingDirtyResources = 0xe4; // int32_t
		constexpr auto LevelScriptActor = 0xe8; // ALevelScriptActor*
		constexpr auto NavListStart = 0xf0; // ANavigationObjectBase*
		constexpr auto NavListEnd = 0xf8; // ANavigationObjectBase*
		constexpr auto NavDataChunks = 0x100; // TArray<UNavigationDataChunk*>
		constexpr auto LightmapTotalSize = 0x110; // float
		constexpr auto ShadowmapTotalSize = 0x114; // float
		constexpr auto StaticNavigableGeometry = 0x118; // TArray<FVector>
		constexpr auto StreamingTextureGuids = 0x128; // TArray<FGuid>
		constexpr auto LevelBuildDataId = 0x1d0; // FGuid
		constexpr auto MapBuildData = 0x1e0; // UMapBuildDataRegistry*
		constexpr auto LightBuildLevelOffset = 0x1e8; // FIntVector
		constexpr auto bIsLightingScenario = 0x1f4; // char : 1
		constexpr auto bTextureStreamingRotationChanged = 0x1f4; // char : 1
		constexpr auto bStaticComponentsRegisteredInStreamingManager = 0x1f4; // char : 1
		constexpr auto bIsVisible = 0x1f4; // char : 1
		constexpr auto WorldSettings = 0x240; // AWorldSettings*
		constexpr auto AssetUserData = 0x250; // TArray<UAssetUserData*>
		constexpr auto DestroyedReplicatedStaticActors = 0x270; // TArray<FReplicatedStaticActorDestructionInfo>
	}

	namespace n_UPrimitiveComponent {
		constexpr auto MinDrawDistance = 0x1f8; // float
		constexpr auto LDMaxDrawDistance = 0x1fc; // float
		constexpr auto CachedMaxDrawDistance = 0x200; // float
		constexpr auto DepthPriorityGroup = 0x204; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x205; // ESceneDepthPriorityGroup
		constexpr auto IndirectLightingCacheQuality = 0x206; // EIndirectLightingCacheQuality
		constexpr auto LightmapType = 0x207; // ELightmapType
		constexpr auto bUseMaxLODAsImposter = 0x208; // char : 1
		constexpr auto bBatchImpostersAsInstances = 0x208; // char : 1
		constexpr auto bNeverDistanceCull = 0x208; // char : 1
		constexpr auto bAlwaysCreatePhysicsState = 0x208; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x209; // char : 1
		constexpr auto bMultiBodyOverlap = 0x209; // char : 1
		constexpr auto bTraceComplexOnMove = 0x209; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x209; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x209; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x209; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x209; // char : 1
		constexpr auto bVisibleInReflectionCaptures = 0x209; // char : 1
		constexpr auto bVisibleInRayTracing = 0x20a; // char : 1
		constexpr auto bRenderInMainPass = 0x20a; // char : 1
		constexpr auto bRenderInDepthPass = 0x20a; // char : 1
		constexpr auto bReceivesDecals = 0x20a; // char : 1
		constexpr auto bOwnerNoSee = 0x20a; // char : 1
		constexpr auto bOnlyOwnerSee = 0x20a; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x20a; // char : 1
		constexpr auto bUseAsOccluder = 0x20a; // char : 1
		constexpr auto bSelectable = 0x20b; // char : 1
		constexpr auto bForceMipStreaming = 0x20b; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x20b; // char : 1
		constexpr auto CastShadow = 0x20b; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x20b; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x20b; // char : 1
		constexpr auto bCastDynamicShadow = 0x20b; // char : 1
		constexpr auto bCastStaticShadow = 0x20b; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x20c; // char : 1
		constexpr auto bSelfShadowOnly = 0x20c; // char : 1
		constexpr auto bCastFarShadow = 0x20c; // char : 1
		constexpr auto bCastInsetShadow = 0x20c; // char : 1
		constexpr auto bCastCinematicShadow = 0x20c; // char : 1
		constexpr auto bCastHiddenShadow = 0x20c; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x20c; // char : 1
		constexpr auto PerObjectShadowRadiusThresholdScale = 0x210; // float
		constexpr auto bLightAsIfStatic = 0x214; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x214; // char : 1
		constexpr auto bExcludeFromLightAttachmentGroup = 0x214; // char : 1
		constexpr auto bReceiveMobileCSMShadows = 0x214; // char : 1
		constexpr auto bSingleSampleShadowFromStationaryLights = 0x214; // char : 1
		constexpr auto bIgnoreRadialImpulse = 0x214; // char : 1
		constexpr auto bIgnoreRadialForce = 0x214; // char : 1
		constexpr auto bApplyImpulseOnDamage = 0x214; // char : 1
		constexpr auto bReplicatePhysicsToAutonomousProxy = 0x215; // char : 1
		constexpr auto bFillCollisionUnderneathForNavmesh = 0x215; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x215; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x215; // char : 1
		constexpr auto bUseEditorCompositing = 0x215; // char : 1
		constexpr auto bRenderCustomDepth = 0x215; // char : 1
		constexpr auto bHasCustomNavigableGeometry = 0x216; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x218; // ECanBeCharacterBase
		constexpr auto LightingChannels = 0x219; // FLightingChannels
		constexpr auto CustomDepthStencilWriteMask = 0x21a; // ERendererStencilMask
		constexpr auto CustomDepthStencilValue = 0x21c; // int32_t
		constexpr auto CustomPrimitiveData = 0x220; // FCustomPrimitiveData
		constexpr auto CustomPrimitiveDataInternal = 0x230; // FCustomPrimitiveData
		constexpr auto TranslucencySortPriority = 0x240; // int32_t
		constexpr auto VisibilityId = 0x244; // int32_t
		constexpr auto RuntimeVirtualTextures = 0x248; // TArray<URuntimeVirtualTexture*>
		constexpr auto VirtualTextureLodBias = 0x258; // int8_t
		constexpr auto VirtualTextureCullMips = 0x259; // int8_t
		constexpr auto VirtualTextureMinCoverage = 0x25a; // int8_t
		constexpr auto VirtualTextureRenderPassType = 0x25b; // ERuntimeVirtualTextureMainPassType
		constexpr auto LpvBiasMultiplier = 0x260; // float
		constexpr auto BoundsScale = 0x26c; // float
		constexpr auto MoveIgnoreActors = 0x280; // TArray<AActor*>
		constexpr auto MoveIgnoreComponents = 0x290; // TArray<UPrimitiveComponent*>
		constexpr auto BodyInstance = 0x2b0; // FBodyInstance
		constexpr auto OnComponentHit = 0x3e0; // FMulticastSparseDelegate
		constexpr auto OnComponentBeginOverlap = 0x3e1; // FMulticastSparseDelegate
		constexpr auto OnComponentEndOverlap = 0x3e2; // FMulticastSparseDelegate
		constexpr auto OnComponentWake = 0x3e3; // FMulticastSparseDelegate
		constexpr auto OnComponentSleep = 0x3e4; // FMulticastSparseDelegate
		constexpr auto OnBeginCursorOver = 0x3e6; // FMulticastSparseDelegate
		constexpr auto OnEndCursorOver = 0x3e7; // FMulticastSparseDelegate
		constexpr auto OnClicked = 0x3e8; // FMulticastSparseDelegate
		constexpr auto OnReleased = 0x3e9; // FMulticastSparseDelegate
		constexpr auto OnInputTouchBegin = 0x3ea; // FMulticastSparseDelegate
		constexpr auto OnInputTouchEnd = 0x3eb; // FMulticastSparseDelegate
		constexpr auto OnInputTouchEnter = 0x3ec; // FMulticastSparseDelegate
		constexpr auto OnInputTouchLeave = 0x3ed; // FMulticastSparseDelegate
		constexpr auto LODParentPrimitive = 0x408; // UPrimitiveComponent*
	}

	namespace n_USoundNodeEnveloper {
		constexpr auto LoopStart = 0x48; // float
		constexpr auto LoopEnd = 0x4c; // float
		constexpr auto DurationAfterLoop = 0x50; // float
		constexpr auto LoopCount = 0x54; // int32_t
		constexpr auto bLoopIndefinitely = 0x58; // char : 1
		constexpr auto bLoop = 0x58; // char : 1
		constexpr auto VolumeInterpCurve = 0x60; // UDistributionFloatConstantCurve*
		constexpr auto PitchInterpCurve = 0x68; // UDistributionFloatConstantCurve*
		constexpr auto VolumeCurve = 0x70; // FRuntimeFloatCurve
		constexpr auto PitchCurve = 0xf8; // FRuntimeFloatCurve
		constexpr auto PitchMin = 0x180; // float
		constexpr auto PitchMax = 0x184; // float
		constexpr auto VolumeMin = 0x188; // float
		constexpr auto VolumeMax = 0x18c; // float
	}

	namespace n_AHLLCosmeticCharacter {
		constexpr auto YawLimit = 0x220; // float
		constexpr auto YawInterpSpeed = 0x224; // float
		constexpr auto bAllowRotation = 0x228; // bool
		constexpr auto DummyRoot = 0x238; // USceneComponent*
		constexpr auto UniformMesh = 0x240; // USkeletalMeshComponent*
		constexpr auto HeadMesh = 0x248; // USkeletalMeshComponent*
		constexpr auto HelmetMesh = 0x250; // UStaticMeshComponent*
		constexpr auto WeaponMesh = 0x258; // USkeletalMeshComponent*
	}

	namespace n_UPlatoonInvitationDialog {
		constexpr auto PlayerList = 0x230; // UPanelWidget*
		constexpr auto Invite = 0x238; // UButton*
		constexpr auto Cancel = 0x240; // UButton*
		constexpr auto PlayerListItemWidgetClass = 0x248; // UPlatoonInvitationDialogPlayer*
	}

	namespace n_ALightmassPortal {
		constexpr auto PortalComponent = 0x220; // ULightmassPortalComponent*
	}

	namespace n_USoundMix {
		constexpr auto bApplyEQ = 0x28; // char : 1
		constexpr auto EQPriority = 0x2c; // float
		constexpr auto EQSettings = 0x30; // FAudioEQEffect
		constexpr auto SoundClassEffects = 0x70; // TArray<FSoundClassAdjuster>
		constexpr auto InitialDelay = 0x80; // float
		constexpr auto FadeInTime = 0x84; // float
		constexpr auto Duration = 0x88; // float
		constexpr auto FadeOutTime = 0x8c; // float
	}

	namespace n_UHLLMaterialManager {
		constexpr auto FoliageParamCollections = 0x28; // TArray<UMaterialParameterCollection*>
		constexpr auto ParamNameFootLocation = 0x38; // FName
	}

	namespace n_AHLLAbility_Encouraged {
		constexpr auto Multiplier = 0x360; // int32_t
	}

	namespace n_UMediaPlaylist {
		constexpr auto Items = 0x28; // TArray<UMediaSource*>
	}

	namespace n_ABaseTruck {
		constexpr auto FrontPassengerSeatClass = 0x4e8; // AHLLSeat*
		constexpr auto NumBackPassengerSeats = 0x4f0; // int32_t
		constexpr auto BackPassengerSeatClass = 0x4f8; // AHLLSeat*
		constexpr auto FrontPassengerSeat = 0x500; // AHLLSeat*
		constexpr auto BackPassengerSeats = 0x508; // TArray<AHLLSeat*>
		constexpr auto ArmourCollision_Body = 0x518; // UHLLArmourCollisionMesh*
	}

	namespace n_UParticleModuleLocationDirect {
		constexpr auto Location = 0x30; // FRawDistributionVector
		constexpr auto LocationOffset = 0x78; // FRawDistributionVector
		constexpr auto ScaleFactor = 0xc0; // FRawDistributionVector
		constexpr auto Direction = 0x108; // FRawDistributionVector
	}

	namespace n_UBTDecorator_HasLoSTo {
		constexpr auto EnemyKey = 0x68; // FBlackboardKeySelector
	}

	namespace n_UHLLSeatIndicatorItem {
		constexpr auto SeatIcon = 0x230; // UImage*
		constexpr auto SeatOccupantBorder = 0x238; // UBorder*
		constexpr auto SeatOccupantRole = 0x240; // UTextBlock*
		constexpr auto SeatOccupantText = 0x248; // UTextBlock*
	}

	namespace n_UMovieSceneAudioSection {
		constexpr auto Sound = 0xe0; // USoundBase*
		constexpr auto StartFrameOffset = 0xe8; // FFrameNumber
		constexpr auto StartOffset = 0xec; // float
		constexpr auto AudioStartTime = 0xf0; // float
		constexpr auto AudioDilationFactor = 0xf4; // float
		constexpr auto AudioVolume = 0xf8; // float
		constexpr auto SoundVolume = 0x100; // FMovieSceneFloatChannel
		constexpr auto PitchMultiplier = 0x1a0; // FMovieSceneFloatChannel
		constexpr auto AttachActorData = 0x240; // FMovieSceneActorReferenceData
		constexpr auto bSuppressSubtitles = 0x2f0; // bool
		constexpr auto bOverrideAttenuation = 0x2f1; // bool
		constexpr auto AttenuationSettings = 0x2f8; // USoundAttenuation*
		constexpr auto OnQueueSubtitles = 0x300; // FDelegate
		constexpr auto OnAudioFinished = 0x310; // FMulticastInlineDelegate
		constexpr auto OnAudioPlaybackPercent = 0x320; // FMulticastInlineDelegate
	}

	namespace n_ABaseHalftrack {
		constexpr auto MobileSpawnClass = 0x520; // AMobileSpawn*
		constexpr auto MaxTimeUnderwater = 0x528; // float
		constexpr auto MobileSpawn = 0x530; // AMobileSpawn*
		constexpr auto TracksAudio = 0x538; // UAudioComponent*
		constexpr auto ArmourCollision_Tracks = 0x548; // UHLLArmourCollisionMesh*
	}

	namespace n_UW_MapKey_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto HB_11 = 0x238; // UHorizontalBox*
		constexpr auto HB_01 = 0x240; // UHorizontalBox*
		constexpr auto HB_02 = 0x248; // UHorizontalBox*
		constexpr auto HB_03 = 0x250; // UHorizontalBox*
		constexpr auto HB_04 = 0x258; // UHorizontalBox*
		constexpr auto HB_06 = 0x260; // UHorizontalBox*
		constexpr auto HB_07 = 0x268; // UHorizontalBox*
		constexpr auto HB_08 = 0x270; // UHorizontalBox*
		constexpr auto HB_09 = 0x278; // UHorizontalBox*
		constexpr auto HB_Airhead = 0x280; // UHorizontalBox*
		constexpr auto HB_FuelNode = 0x288; // UHorizontalBox*
		constexpr auto HB_Halftrack = 0x290; // UHorizontalBox*
		constexpr auto HB_HeavyTank = 0x298; // UHorizontalBox*
		constexpr auto HB_LightTank = 0x2a0; // UHorizontalBox*
		constexpr auto HB_Logi = 0x2a8; // UHorizontalBox*
		constexpr auto HB_ManpowerNode = 0x2b0; // UHorizontalBox*
		constexpr auto HB_MediumTank = 0x2b8; // UHorizontalBox*
		constexpr auto HB_MunitionsNode = 0x2c0; // UHorizontalBox*
		constexpr auto HB_Officer = 0x2c8; // UHorizontalBox*
		constexpr auto HB_ReconVehicle = 0x2d0; // UHorizontalBox*
		constexpr auto HB_TransportTruck = 0x2d8; // UHorizontalBox*
		constexpr auto HorizontalBox_1 = 0x2e0; // UHorizontalBox*
		constexpr auto HorizontalBox_2 = 0x2e8; // UHorizontalBox*
		constexpr auto HorizontalBox_3 = 0x2f0; // UHorizontalBox*
		constexpr auto HorizontalBox_4 = 0x2f8; // UHorizontalBox*
		constexpr auto HorizontalBox_5 = 0x300; // UHorizontalBox*
		constexpr auto HorizontalBox_6 = 0x308; // UHorizontalBox*
		constexpr auto HorizontalBox_7 = 0x310; // UHorizontalBox*
		constexpr auto HorizontalBox_8 = 0x318; // UHorizontalBox*
		constexpr auto HorizontalBox_9 = 0x320; // UHorizontalBox*
		constexpr auto HorizontalBox_13 = 0x328; // UHorizontalBox*
		constexpr auto HorizontalBox_14 = 0x330; // UHorizontalBox*
		constexpr auto Image_127 = 0x338; // UImage*
		constexpr auto Image_160 = 0x340; // UImage*
		constexpr auto Panel = 0x348; // UUniformGridPanel*
		constexpr auto ScrollBox_3 = 0x350; // UScrollBox*
		constexpr auto VB_Title = 0x358; // UVerticalBox*
		constexpr auto Key_Title = 0x360; // bool
		constexpr auto Widget_ExplainedTooltip = 0x368; // UW_HoverToolTip_Explained_C*
		constexpr auto Key_Columns = 0x370; // int32_t
		constexpr auto ReInitialize Event Dispatcher = 0x378; // FMulticastInlineDelegate
		constexpr auto KeyData = 0x388; // TMap<MapKeys, FMapKey>
		constexpr auto MapKeyTable = 0x3d8; // UDataTable*
		constexpr auto ParentOverviewMap = 0x3e0; // UWGT_OverviewMap_V2_C*
	}

	namespace n_UCameraShake {
		constexpr auto bSingleInstance = 0x28; // char : 1
		constexpr auto OscillationDuration = 0x2c; // float
		constexpr auto OscillationBlendInTime = 0x30; // float
		constexpr auto OscillationBlendOutTime = 0x34; // float
		constexpr auto RotOscillation = 0x38; // FROscillator
		constexpr auto LocOscillation = 0x5c; // FVOscillator
		constexpr auto FOVOscillation = 0x80; // FFOscillator
		constexpr auto AnimPlayRate = 0x8c; // float
		constexpr auto AnimScale = 0x90; // float
		constexpr auto AnimBlendInTime = 0x94; // float
		constexpr auto AnimBlendOutTime = 0x98; // float
		constexpr auto RandomAnimSegmentDuration = 0x9c; // float
		constexpr auto Anim = 0xa0; // UCameraAnim*
		constexpr auto bRandomAnimSegment = 0xa8; // char : 1
		constexpr auto CameraOwner = 0xc0; // APlayerCameraManager*
		constexpr auto ShakeScale = 0x148; // float
		constexpr auto OscillatorTimeRemaining = 0x14c; // float
		constexpr auto AnimInst = 0x150; // UCameraAnimInst*
	}

	namespace n_UVectorFieldAnimated {
		constexpr auto Texture = 0x48; // UTexture2D*
		constexpr auto ConstructionOp = 0x50; // EVectorFieldConstructionOp
		constexpr auto VolumeSizeX = 0x54; // int32_t
		constexpr auto VolumeSizeY = 0x58; // int32_t
		constexpr auto VolumeSizeZ = 0x5c; // int32_t
		constexpr auto SubImagesX = 0x60; // int32_t
		constexpr auto SubImagesY = 0x64; // int32_t
		constexpr auto FrameCount = 0x68; // int32_t
		constexpr auto FramesPerSecond = 0x6c; // float
		constexpr auto bLoop = 0x70; // char : 1
		constexpr auto NoiseField = 0x78; // UVectorFieldStatic*
		constexpr auto NoiseScale = 0x80; // float
		constexpr auto NoiseMax = 0x84; // float
	}

	namespace n_UHLLVoiceData {
		constexpr auto PainVoices = 0x30; // TMap<EHLLDamageType, TSoftObjectPtr<USoundBase>>
		constexpr auto PainThreshold = 0x80; // float
		constexpr auto CriticalVoices = 0x88; // TMap<EHLLDamageType, TSoftObjectPtr<USoundBase>>
		constexpr auto DeathVoices = 0xd8; // TMap<EHLLDamageType, TSoftObjectPtr<USoundBase>>
		constexpr auto DismemberedDeathVoice = 0x128; // TSoftObjectPtr<USoundBase>
		constexpr auto WoundedLoop = 0x150; // TSoftObjectPtr<USoundBase>
		constexpr auto CriticalLoop = 0x178; // TSoftObjectPtr<USoundBase>
		constexpr auto WeaponSteadyBreath = 0x1a0; // TSoftObjectPtr<USoundBase>
		constexpr auto WeaponUnsteadyBreath = 0x1c8; // TSoftObjectPtr<USoundBase>
		constexpr auto JumpSound = 0x1f0; // TSoftObjectPtr<USoundBase>
	}

	namespace n_UProceduralFoliageComponent {
		constexpr auto FoliageSpawner = 0xb0; // UProceduralFoliageSpawner*
		constexpr auto TileOverlap = 0xb8; // float
		constexpr auto SpawningVolume = 0xc0; // AVolume*
		constexpr auto ProceduralGuid = 0xc8; // FGuid
	}

	namespace n_ULightmappedSurfaceCollection {
		constexpr auto SourceModel = 0x28; // UModel*
		constexpr auto Surfaces = 0x30; // TArray<int32_t>
	}

	namespace n_AShooterPlayerCameraManager {
		constexpr auto ViewPitchMinWhenProne = 0x2738; // float
		constexpr auto ViewPitchMaxWhenProne = 0x273c; // float
		constexpr auto MapStartCamera = 0x2740; // ACameraActor*
		constexpr auto WeaponFOVParameters = 0x2748; // UMaterialParameterCollection*
	}

	namespace n_UWGT_MapIcon_Sector_C {
		constexpr auto UberGraphFrame = 0x3b8; // FPointerToUberGraphFrame
		constexpr auto FadeIn = 0x3c0; // UWidgetAnimation*
		constexpr auto img_banner = 0x3c8; // UImage*
		constexpr auto pb_capProgress = 0x3d0; // UProgressBar*
		constexpr auto progressFade = 0x3d8; // UProgressBar*
		constexpr auto Sector_IconMaterial = 0x3e0; // UMaterialInstanceDynamic*
		constexpr auto Sector_Idle = 0x3e8; // bool
		constexpr auto Sector_Locked = 0x3e9; // bool
		constexpr auto Sector_Cooldown = 0x3ea; // bool
		constexpr auto Sector_Friendly = 0x3eb; // bool
		constexpr auto CapProgressFriendly = 0x3f0; // FProgressBarStyle
		constexpr auto CapProgressEnemy = 0x590; // FProgressBarStyle
		constexpr auto CapProgressNeutral = 0x730; // FProgressBarStyle
		constexpr auto CapProgressDisabled = 0x8d0; // FProgressBarStyle
		constexpr auto ColFreindly = 0xa70; // FLinearColor
		constexpr auto ColEnemy = 0xa80; // FLinearColor
		constexpr auto ColNull = 0xa90; // FLinearColor
		constexpr auto EnemyHasProgress = 0xaa0; // bool
		constexpr auto OwnerColor = 0xaa8; // FSlateColor
		constexpr auto AttackerColor = 0xad0; // FLinearColor
		constexpr auto OwningTeam = 0xae0; // ETeam
		constexpr auto AttackingTeam = 0xae1; // ETeam
		constexpr auto PlayerTeam = 0xae2; // ETeam
		constexpr auto UIStyle = 0xae8; // FHLLUIStyle
	}

	namespace n_UParticleModuleRotationOverLifetime {
		constexpr auto RotationOverLife = 0x30; // FRawDistributionFloat
		constexpr auto Scale = 0x60; // char : 1
	}

	namespace n_UParticleModuleLocationPrimitiveSphere_Seeded {
		constexpr auto RandomSeedInfo = 0xe0; // FParticleRandomSeedInfo
	}

	namespace n_USoundConcurrency {
		constexpr auto Concurrency = 0x28; // FSoundConcurrencySettings
	}

	namespace n_UProceduralFoliageSpawner {
		constexpr auto RandomSeed = 0x28; // int32_t
		constexpr auto TileSize = 0x2c; // float
		constexpr auto NumUniqueTiles = 0x30; // int32_t
		constexpr auto MinimumQuadTreeSize = 0x34; // float
		constexpr auto FoliageTypes = 0x40; // TArray<FFoliageTypeObject>
	}

	namespace n_UTruckDriverSeatUI {
		constexpr auto DropsPanel = 0x2d0; // UPanelWidget*
		constexpr auto DropCount = 0x2d8; // UTextBlock*
		constexpr auto DropActionPanel = 0x2e0; // UPanelWidget*
		constexpr auto DropProgressWheel = 0x2e8; // UImage*
		constexpr auto DropsStatusSwitcher = 0x2f0; // UWidgetSwitcher*
		constexpr auto DropBlockedPanel = 0x2f8; // UPanelWidget*
		constexpr auto DropInProgressPanel = 0x300; // UPanelWidget*
		constexpr auto SuppliesKeyHint = 0x308; // URichTextBlock*
	}

	namespace n_UGameplayTask_TimeLimitedExecution {
		constexpr auto OnFinished = 0x68; // FMulticastInlineDelegate
		constexpr auto OnTimeExpired = 0x78; // FMulticastInlineDelegate
	}

	namespace n_UGameplayTagsDeveloperSettings {
		constexpr auto DeveloperConfigName = 0x28; // FString
	}

	namespace n_UWGT_BrowserSortButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto RootButton = 0x238; // UButton*
		constexpr auto RootSBox = 0x240; // USizeBox*
		constexpr auto SortArrow = 0x248; // UImage*
		constexpr auto SortLabel = 0x250; // UTextBlock*
		constexpr auto SortType = 0x258; // EHLLUI_ServerSortMode
		constexpr auto OnSort = 0x260; // FMulticastInlineDelegate
		constexpr auto Width = 0x270; // float
	}

	namespace n_ULocalizedOverlays {
		constexpr auto DefaultOverlays = 0x28; // UBasicOverlays*
		constexpr auto LocaleToOverlaysMap = 0x30; // TMap<FString, UBasicOverlays*>
	}

	namespace n_UParticleModuleSize {
		constexpr auto StartSize = 0x30; // FRawDistributionVector
	}

	namespace n_UBlackboardKeyType_Class {
		constexpr auto BaseClass = 0x30; // UObject*
	}

	namespace n_UBTDecorator_SetTagCooldown {
		constexpr auto CooldownTag = 0x68; // FGameplayTag
		constexpr auto CooldownDuration = 0x70; // float
		constexpr auto bAddToExistingDuration = 0x74; // bool
	}

	namespace n_AHLLArmourWeapon {
		constexpr auto OwningInventory = 0x230; // UHLLArmourInventory*
		constexpr auto bLastOwnerWasLocalPlayer = 0x238; // bool
		constexpr auto AmmoInfo = 0x240; // FAmmoSourceContainer
		constexpr auto SelectedAmmoID = 0x270; // char
		constexpr auto OutOfAmmoHint = 0x271; // EHint
		constexpr auto bDisableLoadingWhenWeaponDamaged = 0x272; // char : 1
		constexpr auto bAutoReload = 0x272; // char : 1
		constexpr auto bAutoReloadWhenEmpty = 0x272; // char : 1
		constexpr auto bCancelReloadOnOccupancyChange = 0x272; // char : 1
		constexpr auto DisableLoadingHealthRatio = 0x274; // float
		constexpr auto MinLoadTime = 0x278; // float
		constexpr auto LoadSound = 0x280; // USoundBase*
		constexpr auto CancelLoadSound = 0x288; // USoundBase*
		constexpr auto ReloadMontage = 0x290; // UAnimMontage*
		constexpr auto ReloadBlendSpace = 0x298; // UBlendSpace*
		constexpr auto LoadAC = 0x2a8; // TWeakObjectPtr<UAudioComponent>
		constexpr auto BurstCounter = 0x2b8; // FHLLWeaponBurstInfo
		constexpr auto WeaponIcon = 0x2c0; // FSlateBrush
		constexpr auto WeaponName = 0x348; // FText
		constexpr auto WeaponHeader = 0x360; // FText
		constexpr auto bDisableFiringWhenWeaponDamaged = 0x378; // char : 1
		constexpr auto bAutomatic = 0x378; // char : 1
		constexpr auto bAutoSimulationLoop = 0x378; // char : 1
		constexpr auto DisableFiringHealthRatio = 0x37c; // float
		constexpr auto ShotDelay = 0x380; // float
		constexpr auto ShotVariance = 0x384; // float
		constexpr auto RecoilImpulseMagnitude = 0x388; // float
		constexpr auto MuzzleSocketName = 0x38c; // FName
		constexpr auto MuzzleSocketFlashName = 0x394; // FName
		constexpr auto OnShotFired = 0x3b0; // FMulticastInlineDelegate
		constexpr auto MuzzleFlash = 0x3d0; // UParticleSystem*
		constexpr auto FireGroundSmoke = 0x3d8; // UParticleSystem*
		constexpr auto FireSoundMode = 0x3e0; // EWeaponSoundMode
		constexpr auto MaxTails = 0x3e1; // char
		constexpr auto MaxSingleFireSounds = 0x3e2; // char
		constexpr auto FireSound = 0x3e8; // USoundBase*
		constexpr auto FireTailSound = 0x3f0; // USoundBase*
		constexpr auto FireStopSound = 0x3f8; // USoundBase*
		constexpr auto FireCameraShake = 0x400; // UCameraShake*
		constexpr auto CameraShakeRadius = 0x408; // float
		constexpr auto bLoopedGroundSmoke = 0x40c; // char : 1
		constexpr auto bLoopedMuzzleFlash = 0x40c; // char : 1
		constexpr auto FireMontage = 0x410; // UAnimMontage*
		constexpr auto MuzzlePSC = 0x418; // TWeakObjectPtr<UParticleSystemComponent>
		constexpr auto GroundPSC = 0x420; // TWeakObjectPtr<UParticleSystemComponent>
		constexpr auto MuzzleAudio = 0x428; // TArray<UAudioComponent*>
		constexpr auto MuzzleAudioTails = 0x438; // TArray<UAudioComponent*>
		constexpr auto WeaponVibrationData = 0x450; // UHLLWeaponVibrationData*
		constexpr auto FireVibrationEventController = 0x458; // UVibrationEventController*
		constexpr auto LoadVibrationComponent = 0x460; // UVibrationEventController*
		constexpr auto FireIncrementStat = 0x468; // EHLLPlayerStat
	}

	namespace n_USkeletalMeshSocket {
		constexpr auto SocketName = 0x28; // FName
		constexpr auto BoneName = 0x30; // FName
		constexpr auto RelativeLocation = 0x38; // FVector
		constexpr auto RelativeRotation = 0x44; // FRotator
		constexpr auto RelativeScale = 0x50; // FVector
		constexpr auto bForceAlwaysAnimated = 0x5c; // bool
	}

	namespace n_UBTDecorator_Blackboard {
		constexpr auto IntValue = 0x90; // int32_t
		constexpr auto FloatValue = 0x94; // float
		constexpr auto StringValue = 0x98; // FString
		constexpr auto CachedDescription = 0xa8; // FString
		constexpr auto OperationType = 0xb8; // char
		constexpr auto NotifyObserver = 0xb9; // EBTBlackboardRestart
	}

	namespace n_UEnvQueryTest_Dot {
		constexpr auto LineA = 0x1f8; // FEnvDirection
		constexpr auto LineB = 0x218; // FEnvDirection
		constexpr auto TestMode = 0x238; // EEnvTestDot
		constexpr auto bAbsoluteValue = 0x239; // bool
	}

	namespace n_UMaterialExpressionMaterialAttributeLayers {
		constexpr auto ParameterName = 0x40; // FName
		constexpr auto ExpressionGUID = 0x48; // FGuid
		constexpr auto Input = 0x58; // FMaterialAttributesInput
		constexpr auto DefaultLayers = 0x70; // FMaterialLayersFunctions
		constexpr auto LayerCallers = 0xb0; // TArray<UMaterialExpressionMaterialFunctionCall*>
		constexpr auto NumActiveLayerCallers = 0xc0; // int32_t
		constexpr auto BlendCallers = 0xc8; // TArray<UMaterialExpressionMaterialFunctionCall*>
		constexpr auto NumActiveBlendCallers = 0xd8; // int32_t
		constexpr auto bIsLayerGraphBuilt = 0xdc; // bool
	}

	namespace n_UPhysicsConstraintComponent {
		constexpr auto ConstraintActor1 = 0x1f0; // AActor*
		constexpr auto ComponentName1 = 0x1f8; // FConstrainComponentPropName
		constexpr auto ConstraintActor2 = 0x200; // AActor*
		constexpr auto ComponentName2 = 0x208; // FConstrainComponentPropName
		constexpr auto ConstraintSetup = 0x220; // UPhysicsConstraintTemplate*
		constexpr auto OnConstraintBroken = 0x228; // FMulticastInlineDelegate
		constexpr auto ConstraintInstance = 0x238; // FConstraintInstance
	}

	namespace n_AMapData_SectorBooster_C {
		constexpr auto DefaultSceneRoot = 0x238; // USceneComponent*
	}

	namespace n_UInterpTrackInstSound {
		constexpr auto LastUpdatePosition = 0x28; // float
		constexpr auto PlayAudioComp = 0x30; // UAudioComponent*
	}

	namespace n_UMotionControllerComponent {
		constexpr auto PlayerIndex = 0x410; // int32_t
		constexpr auto Hand = 0x414; // EControllerHand
		constexpr auto MotionSource = 0x418; // FName
		constexpr auto bDisableLowLatencyUpdate = 0x420; // char : 1
		constexpr auto CurrentTrackingStatus = 0x424; // ETrackingStatus
		constexpr auto bDisplayDeviceModel = 0x425; // bool
		constexpr auto DisplayModelSource = 0x428; // FName
		constexpr auto CustomDisplayMesh = 0x430; // UStaticMesh*
		constexpr auto DisplayMeshMaterialOverrides = 0x438; // TArray<UMaterialInterface*>
		constexpr auto DisplayComponent = 0x4b0; // UPrimitiveComponent*
	}

	namespace n_UW_GH_GameProgress_Offensive_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto NewAnimation_2 = 0x238; // UWidgetAnimation*
		constexpr auto Objective1 = 0x240; // UW_GH_GameProgress_Offensive_Objective_C*
		constexpr auto Objective2 = 0x248; // UW_GH_GameProgress_Offensive_Objective_C*
		constexpr auto Sector1 = 0x250; // UW_GH_GameProgress_Offensive_Sector_C*
		constexpr auto Sector2 = 0x258; // UW_GH_GameProgress_Offensive_Sector_C*
		constexpr auto Sector3 = 0x260; // UW_GH_GameProgress_Offensive_Sector_C*
		constexpr auto Sector4 = 0x268; // UW_GH_GameProgress_Offensive_Sector_C*
		constexpr auto Sector5 = 0x270; // UW_GH_GameProgress_Offensive_Sector_C*
		constexpr auto Widget_MainRef = 0x278; // UMain_C*
	}

	namespace n_UEnvQueryInstanceBlueprintWrapper {
		constexpr auto QueryID = 0x30; // int32_t
		constexpr auto ItemType = 0x58; // UEnvQueryItemType*
		constexpr auto OptionIndex = 0x60; // int32_t
		constexpr auto OnQueryFinishedEvent = 0x68; // FMulticastInlineDelegate
	}

	namespace n_UInterpTrackInstVisibility {
		constexpr auto Action = 0x28; // EVisibilityTrackAction
		constexpr auto LastUpdatePosition = 0x2c; // float
	}

	namespace n_UFoliageType {
		constexpr auto UpdateGuid = 0x28; // FGuid
		constexpr auto Density = 0x38; // float
		constexpr auto DensityAdjustmentFactor = 0x3c; // float
		constexpr auto Radius = 0x40; // float
		constexpr auto bSingleInstanceModeOverrideRadius = 0x44; // bool
		constexpr auto SingleInstanceModeRadius = 0x48; // float
		constexpr auto Scaling = 0x4c; // EFoliageScaling
		constexpr auto ScaleX = 0x50; // FFloatInterval
		constexpr auto ScaleY = 0x58; // FFloatInterval
		constexpr auto ScaleZ = 0x60; // FFloatInterval
		constexpr auto VertexColorMaskByChannel = 0x68; // FFoliageVertexColorChannelMask [0x4]
		constexpr auto VertexColorMask = 0x98; // FoliageVertexColorMask
		constexpr auto VertexColorMaskThreshold = 0x9c; // float
		constexpr auto VertexColorMaskInvert = 0xa0; // char : 1
		constexpr auto ZOffset = 0xa4; // FFloatInterval
		constexpr auto AlignToNormal = 0xac; // char : 1
		constexpr auto AlignMaxAngle = 0xb0; // float
		constexpr auto RandomYaw = 0xb4; // char : 1
		constexpr auto RandomPitchAngle = 0xb8; // float
		constexpr auto GroundSlopeAngle = 0xbc; // FFloatInterval
		constexpr auto Height = 0xc4; // FFloatInterval
		constexpr auto LandscapeLayers = 0xd0; // TArray<FName>
		constexpr auto MinimumLayerWeight = 0xe0; // float
		constexpr auto ExclusionLandscapeLayers = 0xe8; // TArray<FName>
		constexpr auto MinimumExclusionLayerWeight = 0xf8; // float
		constexpr auto LandscapeLayer = 0xfc; // FName
		constexpr auto CollisionWithWorld = 0x104; // char : 1
		constexpr auto CollisionScale = 0x108; // FVector
		constexpr auto MeshBounds = 0x114; // FBoxSphereBounds
		constexpr auto LowBoundOriginRadius = 0x130; // FVector
		constexpr auto Mobility = 0x13c; // EComponentMobility
		constexpr auto CullDistance = 0x140; // FInt32Interval
		constexpr auto bEnableStaticLighting = 0x148; // char : 1
		constexpr auto CastShadow = 0x148; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x148; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x148; // char : 1
		constexpr auto bCastDynamicShadow = 0x148; // char : 1
		constexpr auto bCastStaticShadow = 0x148; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x148; // char : 1
		constexpr auto bReceivesDecals = 0x148; // char : 1
		constexpr auto bOverrideLightMapRes = 0x149; // char : 1
		constexpr auto OverriddenLightMapRes = 0x14c; // int32_t
		constexpr auto LightmapType = 0x150; // ELightmapType
		constexpr auto bUseAsOccluder = 0x154; // char : 1
		constexpr auto BodyInstance = 0x158; // FBodyInstance
		constexpr auto CustomNavigableGeometry = 0x288; // EHasCustomNavigableGeometry
		constexpr auto LightingChannels = 0x289; // FLightingChannels
		constexpr auto bRenderCustomDepth = 0x28c; // char : 1
		constexpr auto CustomDepthStencilValue = 0x290; // int32_t
		constexpr auto TranslucencySortPriority = 0x294; // int32_t
		constexpr auto CollisionRadius = 0x298; // float
		constexpr auto ShadeRadius = 0x29c; // float
		constexpr auto NumSteps = 0x2a0; // int32_t
		constexpr auto InitialSeedDensity = 0x2a4; // float
		constexpr auto AverageSpreadDistance = 0x2a8; // float
		constexpr auto SpreadVariance = 0x2ac; // float
		constexpr auto SeedsPerStep = 0x2b0; // int32_t
		constexpr auto DistributionSeed = 0x2b4; // int32_t
		constexpr auto MaxInitialSeedOffset = 0x2b8; // float
		constexpr auto bCanGrowInShade = 0x2bc; // bool
		constexpr auto bSpawnsInShade = 0x2bd; // bool
		constexpr auto MaxInitialAge = 0x2c0; // float
		constexpr auto MaxAge = 0x2c4; // float
		constexpr auto OverlapPriority = 0x2c8; // float
		constexpr auto ProceduralScale = 0x2cc; // FFloatInterval
		constexpr auto ScaleCurve = 0x2d8; // FRuntimeFloatCurve
		constexpr auto ChangeCount = 0x360; // int32_t
		constexpr auto ReapplyDensity = 0x364; // char : 1
		constexpr auto ReapplyRadius = 0x364; // char : 1
		constexpr auto ReapplyAlignToNormal = 0x364; // char : 1
		constexpr auto ReapplyRandomYaw = 0x364; // char : 1
		constexpr auto ReapplyScaling = 0x364; // char : 1
		constexpr auto ReapplyScaleX = 0x364; // char : 1
		constexpr auto ReapplyScaleY = 0x364; // char : 1
		constexpr auto ReapplyScaleZ = 0x364; // char : 1
		constexpr auto ReapplyRandomPitchAngle = 0x365; // char : 1
		constexpr auto ReapplyGroundSlope = 0x365; // char : 1
		constexpr auto ReapplyHeight = 0x365; // char : 1
		constexpr auto ReapplyLandscapeLayers = 0x365; // char : 1
		constexpr auto ReapplyZOffset = 0x365; // char : 1
		constexpr auto ReapplyCollisionWithWorld = 0x365; // char : 1
		constexpr auto ReapplyVertexColorMask = 0x365; // char : 1
		constexpr auto bEnableDensityScaling = 0x365; // char : 1
		constexpr auto RuntimeVirtualTextures = 0x368; // TArray<URuntimeVirtualTexture*>
		constexpr auto VirtualTextureCullMips = 0x378; // int32_t
		constexpr auto VirtualTextureRenderPassType = 0x37c; // ERuntimeVirtualTextureMainPassType
	}

	namespace n_AHLLSupplyDrop_Crate {
		constexpr auto SupplyComponent = 0x2e0; // UHLLSupplyComponent*
	}

	namespace n_AHLLRecoilTester {
		constexpr auto NumBurstsToFire = 0x220; // char
		constexpr auto LineDrawTime = 0x224; // float
		constexpr auto HitDrawTime = 0x228; // float
		constexpr auto ShotsPerBurst = 0x22c; // char
		constexpr auto ShotOffsets = 0x230; // TArray<FShotOffset>
		constexpr auto RecoilState = 0x240; // FRecoilAndSpreadState
		constexpr auto RecoilConfig = 0x248; // FRecoilAndSpread
		constexpr auto BaseArrow = 0x278; // UArrowComponent*
		constexpr auto AimArrow = 0x280; // UArrowComponent*
	}

	namespace n_USoundNodeParameterDelay {
		constexpr auto ParamName = 0x48; // FName
		constexpr auto DefaultDelay = 0x50; // float
		constexpr auto MaxDelay = 0x54; // float
	}

	namespace n_UWGT_UseContext_UseHealWeapon_C {
		constexpr auto UberGraphFrame = 0x250; // FPointerToUberGraphFrame
	}

	namespace n_UPaperSpriteComponent {
		constexpr auto SourceSprite = 0x438; // UPaperSprite*
		constexpr auto MaterialOverride = 0x440; // UMaterialInterface*
		constexpr auto SpriteColor = 0x448; // FLinearColor
	}

	namespace n_UMaterialExpressionLandscapeLayerSwitch {
		constexpr auto LayerUsed = 0x40; // FExpressionInput
		constexpr auto LayerNotUsed = 0x54; // FExpressionInput
		constexpr auto ParameterName = 0x68; // FName
		constexpr auto PreviewUsed = 0x70; // char : 1
		constexpr auto ExpressionGUID = 0x74; // FGuid
	}

	namespace n_UAutoDestroySubsystem {
		constexpr auto ActorsToPoll = 0x38; // TArray<AActor*>
	}

	namespace n_UWGT_RoundSummaryDetails_V2_C {
		constexpr auto UberGraphFrame = 0x2f0; // FPointerToUberGraphFrame
		constexpr auto KeySwap = 0x2f8; // UWidgetAnimation*
		constexpr auto StatSwap = 0x300; // UWidgetAnimation*
		constexpr auto btnStatSwitch = 0x308; // UbtnSimple_V2_C*
		constexpr auto ButtonPromptsInfo = 0x310; // UButtonPromptsInfo_V2_C*
		constexpr auto icn_buttonArrow_l = 0x318; // UImage*
		constexpr auto icn_buttonArrow_r = 0x320; // UImage*
		constexpr auto Image_1 = 0x328; // UImage*
		constexpr auto Image_2 = 0x330; // UImage*
		constexpr auto Image_3 = 0x338; // UImage*
		constexpr auto Image_5 = 0x340; // UImage*
		constexpr auto Image_6 = 0x348; // UImage*
		constexpr auto Image_7 = 0x350; // UImage*
		constexpr auto Image_8 = 0x358; // UImage*
		constexpr auto Image_9 = 0x360; // UImage*
		constexpr auto Image_10 = 0x368; // UImage*
		constexpr auto Image_16 = 0x370; // UImage*
		constexpr auto Image_19 = 0x378; // UImage*
		constexpr auto Image_20 = 0x380; // UImage*
		constexpr auto Image_21 = 0x388; // UImage*
		constexpr auto OrientationHBox = 0x390; // UHorizontalBox*
		constexpr auto OrientationVBox = 0x398; // UVerticalBox*
		constexpr auto StatSwitch = 0x3a0; // UBorder*
		constexpr auto VB_Personal = 0x3a8; // UVerticalBox*
		constexpr auto ViewPersonal = 0x3b0; // UOptionsTabButton_V2_C*
		constexpr auto WBP_RoundSummaryKeyDetails_ArmyCommander = 0x3b8; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_ArtilleryUnit = 0x3c0; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_Combat = 0x3c8; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_CrossplayPlayer = 0x3d0; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_Defensive = 0x3d8; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_DefensiveUnit = 0x3e0; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_Fuel = 0x3e8; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_LogisticsUnit = 0x3f0; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_Manpower = 0x3f8; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_Munitions = 0x400; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_Offensive = 0x408; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_OffensiveUnit = 0x410; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_PlayerSpeaking = 0x418; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto WBP_RoundSummaryKeyDetails_Support = 0x420; // UWBP_RoundSummaryKeyDetails_C*
		constexpr auto SelectedPlayer = 0x428; // UWGT_RoundSummaryPlayer_C*
		constexpr auto bCanAccolade = 0x430; // bool
		constexpr auto bExpandPlatoonPressed = 0x431; // bool
		constexpr auto bPlatoonSelected = 0x432; // bool
		constexpr auto bPlayerSelected = 0x433; // bool
		constexpr auto bSelectedPlayerIsLocal = 0x434; // bool
		constexpr auto activeManagementPopup = 0x438; // UPlayerManagementActionsBP_C*
		constexpr auto bDebugIsConsole = 0x440; // bool
	}

	namespace n_UPhysicalMaterialMask {
		constexpr auto UVChannelIndex = 0x28; // int32_t
		constexpr auto AddressX = 0x2c; // TextureAddress
		constexpr auto AddressY = 0x2d; // TextureAddress
	}

	namespace n_UInterpTrackVectorProp {
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_UBTDecorator_DoesPathExist {
		constexpr auto BlackboardKeyA = 0x68; // FBlackboardKeySelector
		constexpr auto BlackboardKeyB = 0x90; // FBlackboardKeySelector
		constexpr auto bUseSelf = 0xb8; // char : 1
		constexpr auto PathQueryType = 0xbc; // EPathExistanceQueryType
		constexpr auto FilterClass = 0xc0; // UNavigationQueryFilter*
	}

	namespace n_UBlendSpace {
		constexpr auto AxisToScaleAnimation = 0x148; // EBlendSpaceAxis
	}

	namespace n_UInterpTrackVectorMaterialParam {
		constexpr auto TargetMaterials = 0x90; // TArray<UMaterialInterface*>
		constexpr auto ParamName = 0xa0; // FName
	}

	namespace n_UMaterialExpressionNoise {
		constexpr auto Position = 0x40; // FExpressionInput
		constexpr auto FilterWidth = 0x54; // FExpressionInput
		constexpr auto Scale = 0x68; // float
		constexpr auto Quality = 0x6c; // int32_t
		constexpr auto NoiseFunction = 0x70; // ENoiseFunction
		constexpr auto bTurbulence = 0x74; // char : 1
		constexpr auto Levels = 0x78; // int32_t
		constexpr auto OutputMin = 0x7c; // float
		constexpr auto OutputMax = 0x80; // float
		constexpr auto LevelScale = 0x84; // float
		constexpr auto bTiling = 0x88; // char : 1
		constexpr auto RepeatSize = 0x8c; // uint32_t
	}

	namespace n_UMaterialParameterCollection {
		constexpr auto StateId = 0x28; // FGuid
		constexpr auto ScalarParameters = 0x38; // TArray<FCollectionScalarParameter>
		constexpr auto VectorParameters = 0x48; // TArray<FCollectionVectorParameter>
	}

	namespace n_UNavModifierComponent {
		constexpr auto AreaClass = 0xe0; // UNavArea*
		constexpr auto FailsafeExtent = 0xe8; // FVector
		constexpr auto bIncludeAgentHeight = 0xf4; // char : 1
	}

	namespace n_UFindSessionsCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionIf {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto AGreaterThanB = 0x68; // FExpressionInput
		constexpr auto AEqualsB = 0x7c; // FExpressionInput
		constexpr auto ALessThanB = 0x90; // FExpressionInput
		constexpr auto EqualsThreshold = 0xa4; // float
		constexpr auto ConstB = 0xa8; // float
		constexpr auto ConstAEqualsB = 0xac; // float
	}

	namespace n_UHLLUI_CreditsOrganisation {
		constexpr auto OrganisationName = 0x230; // UTextBlock*
		constexpr auto OrganisationLogo = 0x238; // UImage*
	}

	namespace n_UWGT_CosmeticItem_Small_V2_C {
		constexpr auto UberGraphFrame = 0x278; // FPointerToUberGraphFrame
		constexpr auto Hover = 0x280; // UWidgetAnimation*
		constexpr auto EquipedIndicator = 0x288; // UImage*
		constexpr auto SelectBorder = 0x290; // UBorder*
		constexpr auto bFocus = 0x298; // bool
		constexpr auto OnCreateCosmeticButtons = 0x2a0; // FMulticastInlineDelegate
	}

	namespace n_UHLLResourceGenerator {
		constexpr auto ResourceType = 0xb0; // ESectorResourceType
		constexpr auto GenerationAmount = 0xb4; // int32_t
		constexpr auto GenerationActionScore = 0xb8; // FName
		constexpr auto CachedSectorDistance = 0xc0; // int32_t
	}

	namespace n_AHLLDispenserItem_Garrison {
		constexpr auto bAutoDestroyGarrisonsPlacedByOtherOfficers = 0x4c8; // char : 1
	}

	namespace n_UHLLMapIcon_ResourceNode {
		constexpr auto RadiusSBox = 0x368; // USizeBox*
	}

	namespace n_UMaterialShaderQualitySettings {
		constexpr auto ForwardSettingMap = 0x28; // TMap<FName, UShaderPlatformQualitySettings*>
	}

	namespace n_UHLLArmourHealthComponent {
		constexpr auto ArmourInfo = 0xc8; // FHLLArmourDeltaInfo
		constexpr auto ExplodeDelay = 0x1f8; // float
		constexpr auto MinTimeBetweenRepairSounds = 0x1fc; // float
		constexpr auto RepairSound = 0x200; // USoundBase*
		constexpr auto RepairCompleteSound = 0x208; // USoundBase*
		constexpr auto KilledInstigator = 0x220; // AController*
		constexpr auto DamageEffectData = 0x228; // UHLLVehicleDamageFX*
		constexpr auto WreckActor = 0x230; // AHLLVehicleWreck*
		constexpr auto DeathExplosionDamage = 0x238; // float
		constexpr auto DeathExplosionRadius = 0x23c; // float
		constexpr auto DeathExplosionSuppression = 0x240; // float
		constexpr auto DeathExplosionSuppressionRadius = 0x244; // float
		constexpr auto ExplosionDamageType = 0x248; // UDamageType*
		constexpr auto ExplosionEffect = 0x250; // AShooterImpactEffect*
		constexpr auto ActiveDamageFX = 0x258; // TMap<FName, FHLLActiveDamageFX>
		constexpr auto OverrideReferenceComponent = 0x2a8; // UPrimitiveComponent*
		constexpr auto DefaultArmourRating = 0x2b0; // EHLLArmourRating
		constexpr auto DefaultResistance = 0x2b4; // float [0x4]
		constexpr auto ArmouredBodies = 0x2c8; // TArray<FArmouredBody>
		constexpr auto Compartments = 0x2d8; // TArray<FArmourBox>
	}

	namespace n_UMaterialExpression {
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto bIsParameterExpression = 0x38; // char : 1
	}

	namespace n_UHTP_Widget_Role_Loadout_Spotter_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_3 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_5 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_8 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_9 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_10 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x270; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x278; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x280; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_5 = 0x288; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x290; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_12 = 0x298; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x2a0; // UImage*
		constexpr auto Image_10 = 0x2a8; // UImage*
		constexpr auto Image_17 = 0x2b0; // UImage*
	}

	namespace n_UMaterialExpressionFontSample {
		constexpr auto Font = 0x40; // UFont*
		constexpr auto FontTexturePage = 0x48; // int32_t
	}

	namespace n_UUniformGridSlot {
		constexpr auto HorizontalAlignment = 0x38; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x39; // EVerticalAlignment
		constexpr auto Row = 0x3c; // int32_t
		constexpr auto Column = 0x40; // int32_t
	}

	namespace n_UWGT_MarkerMenu_C {
		constexpr auto UberGraphFrame = 0x280; // FPointerToUberGraphFrame
		constexpr auto Open = 0x288; // UWidgetAnimation*
		constexpr auto Breaker = 0x290; // UImage*
		constexpr auto OveriewMapParent = 0x298; // UWGT_OverviewMap_V2_C*
	}

	namespace n_UARTrackedQRCode {
		constexpr auto QRCode = 0xf8; // FString
		constexpr auto Version = 0x108; // int32_t
	}

	namespace n_UAnimNotify_PlaySound {
		constexpr auto Sound = 0x38; // USoundBase*
		constexpr auto VolumeMultiplier = 0x40; // float
		constexpr auto PitchMultiplier = 0x44; // float
		constexpr auto bFollow = 0x48; // char : 1
		constexpr auto AttachName = 0x4c; // FName
	}

	namespace n_UTireConfig {
		constexpr auto FrictionScale = 0x30; // float
		constexpr auto TireFrictionScales = 0x38; // TArray<FTireConfigMaterialFriction>
	}

	namespace n_UNavLinkComponent {
		constexpr auto Links = 0x418; // TArray<FNavigationLink>
	}

	namespace n_UCheckBox {
		constexpr auto CheckedState = 0x120; // ECheckBoxState
		constexpr auto CheckedStateDelegate = 0x124; // FDelegate
		constexpr auto WidgetStyle = 0x138; // FCheckBoxStyle
		constexpr auto Style = 0x6b8; // USlateWidgetStyleAsset*
		constexpr auto UncheckedImage = 0x6c0; // USlateBrushAsset*
		constexpr auto UncheckedHoveredImage = 0x6c8; // USlateBrushAsset*
		constexpr auto UncheckedPressedImage = 0x6d0; // USlateBrushAsset*
		constexpr auto CheckedImage = 0x6d8; // USlateBrushAsset*
		constexpr auto CheckedHoveredImage = 0x6e0; // USlateBrushAsset*
		constexpr auto CheckedPressedImage = 0x6e8; // USlateBrushAsset*
		constexpr auto UndeterminedImage = 0x6f0; // USlateBrushAsset*
		constexpr auto UndeterminedHoveredImage = 0x6f8; // USlateBrushAsset*
		constexpr auto UndeterminedPressedImage = 0x700; // USlateBrushAsset*
		constexpr auto HorizontalAlignment = 0x708; // EHorizontalAlignment
		constexpr auto Padding = 0x70c; // FMargin
		constexpr auto BorderBackgroundColor = 0x720; // FSlateColor
		constexpr auto IsFocusable = 0x748; // bool
		constexpr auto OnCheckStateChanged = 0x750; // FMulticastInlineDelegate
	}

	namespace n_UWidget {
		constexpr auto Slot = 0x28; // UPanelSlot*
		constexpr auto bIsEnabledDelegate = 0x30; // FDelegate
		constexpr auto ToolTipText = 0x40; // FText
		constexpr auto ToolTipTextDelegate = 0x58; // FDelegate
		constexpr auto ToolTipWidget = 0x68; // UWidget*
		constexpr auto ToolTipWidgetDelegate = 0x70; // FDelegate
		constexpr auto VisibilityDelegate = 0x80; // FDelegate
		constexpr auto RenderTransform = 0x90; // FWidgetTransform
		constexpr auto RenderTransformPivot = 0xac; // FVector2D
		constexpr auto bIsVariable = 0xb4; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xb4; // char : 1
		constexpr auto bIsEnabled = 0xb4; // char : 1
		constexpr auto bOverride_Cursor = 0xb4; // char : 1
		constexpr auto AccessibleWidgetData = 0xb8; // USlateAccessibleWidgetData*
		constexpr auto bIsVolatile = 0xc0; // char : 1
		constexpr auto cursor = 0xc1; // EMouseCursor
		constexpr auto Clipping = 0xc2; // EWidgetClipping
		constexpr auto Visibility = 0xc3; // ESlateVisibility
		constexpr auto RenderOpacity = 0xc4; // float
		constexpr auto Navigation = 0xc8; // UWidgetNavigation*
		constexpr auto FlowDirectionPreference = 0xd0; // EFlowDirectionPreference
		constexpr auto NativeBindings = 0xf8; // TArray<UPropertyBinding*>
	}

	namespace n_UHLLPhysicalMaterial {
		constexpr auto bSupportBulletPenetration = 0x80; // char : 1
		constexpr auto bOverlapGeneratesProjectileFX = 0x80; // char : 1
		constexpr auto bEnableEntryFX = 0x80; // char : 1
		constexpr auto bEnableExitFX = 0x80; // char : 1
		constexpr auto bIgnoreDamageOnPenetration = 0x80; // char : 1
		constexpr auto RequiredPower = 0x84; // int32_t
		constexpr auto DamageReduction = 0x88; // float
		constexpr auto VelocityReduction = 0x8c; // float
		constexpr auto DebugColour = 0x90; // FLinearColor
	}

	namespace n_UHLLUI_CreditsCategory_RoleAndMembers {
		constexpr auto TitleText = 0x230; // UTextBlock*
		constexpr auto MemberText = 0x238; // UTextBlock*
	}

	namespace n_UScrollBoxWidgetStyle {
		constexpr auto ScrollBoxStyle = 0x30; // FScrollBoxStyle
	}

	namespace n_AOnlineBeaconHost {
		constexpr auto ListenPort = 0x250; // int32_t
		constexpr auto ClientActors = 0x258; // TArray<AOnlineBeaconClient*>
	}

	namespace n_UOptionsTabButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto OptionButton = 0x238; // UButton*
		constexpr auto OptionTextBlock = 0x240; // UTextBlock*
		constexpr auto InitialButtonStyle = 0x248; // FButtonStyle
		constexpr auto Text = 0x4c0; // FText
		constexpr auto NormalTextColor = 0x4d8; // FSlateColor
		constexpr auto HoveredTextColor = 0x500; // FSlateColor
		constexpr auto OnClicked = 0x528; // FMulticastInlineDelegate
		constexpr auto Active = 0x538; // bool
		constexpr auto Hovered = 0x539; // bool
		constexpr auto NormalButtonStyle = 0x540; // FButtonStyle
		constexpr auto ActiveButtonStyle = 0x7b8; // FButtonStyle
		constexpr auto FocusedButtonStyle = 0xa30; // FButtonStyle
		constexpr auto SelectedButtonStyle = 0xca8; // FButtonStyle
	}

	namespace n_UMaterialExpressionLinearInterpolate {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto Alpha = 0x68; // FExpressionInput
		constexpr auto ConstA = 0x7c; // float
		constexpr auto ConstB = 0x80; // float
		constexpr auto ConstAlpha = 0x84; // float
	}

	namespace n_UInputKeyDelegateBinding {
		constexpr auto InputKeyDelegateBindings = 0x28; // TArray<FBlueprintInputKeyDelegateBinding>
	}

	namespace n_UJoinSessionCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UEnvQueryTest_Distance {
		constexpr auto TestMode = 0x1f8; // EEnvTestDistance
		constexpr auto DistanceTo = 0x200; // UEnvQueryContext*
	}

	namespace n_UParticleModuleLocationBoneSocket {
		constexpr auto SourceType = 0x30; // ELocationBoneSocketSource
		constexpr auto UniversalOffset = 0x34; // FVector
		constexpr auto SourceLocations = 0x40; // TArray<FLocationBoneSocketInfo>
		constexpr auto SelectionMethod = 0x50; // ELocationBoneSocketSelectionMethod
		constexpr auto bUpdatePositionEachFrame = 0x54; // char : 1
		constexpr auto bOrientMeshEmitters = 0x54; // char : 1
		constexpr auto bInheritBoneVelocity = 0x54; // char : 1
		constexpr auto InheritVelocityScale = 0x58; // float
		constexpr auto SkelMeshActorParamName = 0x5c; // FName
		constexpr auto NumPreSelectedIndices = 0x64; // int32_t
	}

	namespace n_UTimeSynchronizationSource {
		constexpr auto bUseForSynchronization = 0x28; // bool
		constexpr auto FrameOffset = 0x2c; // int32_t
	}

	namespace n_UMaterialExpressionDeriveNormalZ {
		constexpr auto InXY = 0x40; // FExpressionInput
	}

	namespace n_UParticleModuleColorOverLife {
		constexpr auto ColorOverLife = 0x30; // FRawDistributionVector
		constexpr auto AlphaOverLife = 0x78; // FRawDistributionFloat
		constexpr auto bClampAlpha = 0xa8; // char : 1
	}

	namespace n_URotatingMovementComponent {
		constexpr auto RotationRate = 0xf0; // FRotator
		constexpr auto PivotTranslation = 0xfc; // FVector
		constexpr auto bRotationInLocalSpace = 0x108; // char : 1
	}

	namespace n_ATrench_ef01_Mound_C {
		constexpr auto StaticMeshComponent7 = 0x220; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent4 = 0x228; // UStaticMeshComponent*
		constexpr auto SM_WoodRubble_011 = 0x230; // UStaticMeshComponent*
		constexpr auto SM_TrenchPile03 = 0x238; // UStaticMeshComponent*
		constexpr auto SM_Crate05 = 0x240; // UStaticMeshComponent*
		constexpr auto SM_Crate04 = 0x248; // UStaticMeshComponent*
		constexpr auto SM_Crate03 = 0x250; // UStaticMeshComponent*
		constexpr auto SM_Crate02 = 0x258; // UStaticMeshComponent*
		constexpr auto SM_Crate01 = 0x260; // UStaticMeshComponent*
		constexpr auto SM_WoodRubble_03 = 0x268; // UStaticMeshComponent*
		constexpr auto SM_WoodRubble_06 = 0x270; // UStaticMeshComponent*
		constexpr auto SM_TrenchPile02 = 0x278; // UStaticMeshComponent*
		constexpr auto SM_TrenchPile01 = 0x280; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent17 = 0x288; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent15 = 0x290; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent14 = 0x298; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent9 = 0x2a0; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent8 = 0x2a8; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent6 = 0x2b0; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent5 = 0x2b8; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent3 = 0x2c0; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent2 = 0x2c8; // UStaticMeshComponent*
		constexpr auto StaticMeshComponent0 = 0x2d0; // UStaticMeshComponent*
		constexpr auto SharedRoot = 0x2d8; // USceneComponent*
	}

	namespace n_UComponentDelegateBinding {
		constexpr auto ComponentDelegateBindings = 0x28; // TArray<FBlueprintComponentDelegateBinding>
	}

	namespace n_UBoatSpawnComponent {
		constexpr auto InfantryCarrierBoatClass = 0xb0; // AInfantryCarrierBoat*
		constexpr auto SpawnInterval = 0xb8; // float
		constexpr auto FirstWaveDelay = 0xbc; // float
		constexpr auto DockedDuration = 0xc0; // float
		constexpr auto DeployedPlayerTravelDuration = 0xc4; // float
		constexpr auto BoatTravelSpeedKnots = 0xc8; // float
		constexpr auto MaxPlayersPerBoat = 0xcc; // int32_t
		constexpr auto PreferredPlayersPerBoat = 0xd0; // int32_t
		constexpr auto SpawnGroup = 0xd4; // int32_t
		constexpr auto Paths = 0xd8; // TArray<ABoatSpawnPath*>
		constexpr auto NextWaveTime = 0xe8; // float
		constexpr auto NotAllocatedPaths = 0x100; // TArray<ABoatSpawnPath*>
		constexpr auto AllocatedPaths = 0x110; // TMap<AActor*, ABoatSpawnPath*>
	}

	namespace n_UGameplayTaskResource {
		constexpr auto ManualResourceID = 0x28; // int32_t
		constexpr auto AutoResourceID = 0x2c; // int8_t
		constexpr auto bManuallySetID = 0x30; // char : 1
	}

	namespace n_UBookMark2D {
		constexpr auto Zoom2D = 0x28; // float
		constexpr auto Location = 0x2c; // FIntPoint
	}

	namespace n_ATriggerBase {
		constexpr auto CollisionComponent = 0x220; // UShapeComponent*
	}

	namespace n_UGameplayTagsManager {
		constexpr auto TagSources = 0xc0; // TArray<FGameplayTagSource>
		constexpr auto GameplayTagTables = 0x1b0; // TArray<UDataTable*>
	}

	namespace n_UMovieSceneStringSection {
		constexpr auto StringCurve = 0xe0; // FMovieSceneStringChannel
	}

	namespace n_UHLLRoundSummaryStat {
		constexpr auto HostileTeamColour = 0x230; // FSlateColor
		constexpr auto FriendlyTeamColour = 0x258; // FSlateColor
		constexpr auto TitleText = 0x280; // UTextBlock*
		constexpr auto StatText = 0x288; // UTextBlock*
	}

	namespace n_UWGT_BrowserFilterButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto RootCheck = 0x238; // UCheckBox*
		constexpr auto RootText = 0x240; // UTextBlock*
		constexpr auto FilterType = 0x248; // EHLLUI_ServerShowFilter
		constexpr auto OnToggle = 0x250; // FMulticastInlineDelegate
		constexpr auto FocusedStyle = 0x260; // FCheckBoxStyle
		constexpr auto InitialStyle = 0x7e0; // FCheckBoxStyle
		constexpr auto ServerBrowser = 0xd60; // UWGT_ServerBrowser_V2_C*
	}

	namespace n_ABloodDecal {
		constexpr auto DecalMaterials = 0x228; // TArray<UMaterialInterface*>
	}

	namespace n_UParticleModuleLocationEmitter {
		constexpr auto EmitterName = 0x30; // FName
		constexpr auto SelectionMethod = 0x38; // ELocationEmitterSelectionMethod
		constexpr auto InheritSourceVelocity = 0x3c; // char : 1
		constexpr auto InheritSourceVelocityScale = 0x40; // float
		constexpr auto bInheritSourceRotation = 0x44; // char : 1
		constexpr auto InheritSourceRotationScale = 0x48; // float
	}

	namespace n_UAISense_Prediction {
		constexpr auto RegisteredEvents = 0x80; // TArray<FAIPredictionEvent>
	}

	namespace n_AHLLMapData_Ability {
		constexpr auto AssignedAbility = 0x248; // AHLLCommanderAbility_Placeable*
	}

	namespace n_UMaterialExpressionStaticBoolParameter {
		constexpr auto DefaultValue = 0x58; // char : 1
	}

	namespace n_UMovieSceneActorReferenceSection {
		constexpr auto ActorReferenceData = 0xe0; // FMovieSceneActorReferenceData
		constexpr auto ActorGuidIndexCurve = 0x190; // FIntegralCurve
		constexpr auto ActorGuidStrings = 0x210; // TArray<FString>
	}

	namespace n_UCommandlet {
		constexpr auto HelpDescription = 0x28; // FString
		constexpr auto HelpUsage = 0x38; // FString
		constexpr auto HelpWebLink = 0x48; // FString
		constexpr auto HelpParamNames = 0x58; // TArray<FString>
		constexpr auto HelpParamDescriptions = 0x68; // TArray<FString>
		constexpr auto IsServer = 0x78; // char : 1
		constexpr auto IsClient = 0x78; // char : 1
		constexpr auto IsEditor = 0x78; // char : 1
		constexpr auto LogToConsole = 0x78; // char : 1
		constexpr auto ShowErrorCount = 0x78; // char : 1
		constexpr auto ShowProgress = 0x78; // char : 1
	}

	namespace n_UWGT_MapIcon_Garrison_C {
		constexpr auto UberGraphFrame = 0x4a8; // FPointerToUberGraphFrame
		constexpr auto Icon = 0x4b0; // UBorder*
		constexpr auto Overlay = 0x4b8; // UOverlay*
		constexpr auto Scaler = 0x4c0; // UScaleBox*
		constexpr auto Sizer = 0x4c8; // USizeBox*
		constexpr auto Widget_TooltipRef = 0x4d0; // UW_HoverToolTip_Explained_C*
	}

	namespace n_UParticleModuleLocationPrimitiveCylinder {
		constexpr auto RadialVelocity = 0xb0; // char : 1
		constexpr auto StartRadius = 0xb8; // FRawDistributionFloat
		constexpr auto StartHeight = 0xe8; // FRawDistributionFloat
		constexpr auto HeightAxis = 0x118; // CylinderHeightAxis
	}

	namespace n_UMaterialExpressionTransform {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto TransformSourceType = 0x54; // EMaterialVectorCoordTransformSource
		constexpr auto TransformType = 0x55; // EMaterialVectorCoordTransform
	}

	namespace n_UReverbEffect {
		constexpr auto Density = 0x28; // float
		constexpr auto Diffusion = 0x2c; // float
		constexpr auto Gain = 0x30; // float
		constexpr auto GainHF = 0x34; // float
		constexpr auto DecayTime = 0x38; // float
		constexpr auto DecayHFRatio = 0x3c; // float
		constexpr auto ReflectionsGain = 0x40; // float
		constexpr auto ReflectionsDelay = 0x44; // float
		constexpr auto LateGain = 0x48; // float
		constexpr auto LateDelay = 0x4c; // float
		constexpr auto AirAbsorptionGainHF = 0x50; // float
		constexpr auto RoomRolloffFactor = 0x54; // float
	}

	namespace n_UHLLRoundSummaryDetails {
		constexpr auto CurrentViewMode = 0x230; // EViewMode
		constexpr auto ViewportClient = 0x238; // UShooterGameViewportClient*
		constexpr auto StatWidgets = 0x240; // TArray<UHLLRoundSummaryStat*>
		constexpr auto bMatchEnded = 0x250; // char : 1
		constexpr auto ViewingPersonal = 0x251; // bool
		constexpr auto MaxRows = 0x254; // int32_t
		constexpr auto StatUpdateFrequency = 0x258; // float
		constexpr auto TeamContainerClass = 0x268; // UHLLTeamContainer*
		constexpr auto StatWidgetClass = 0x270; // UHLLRoundSummaryStat*
		constexpr auto AxisTeamData = 0x278; // UHLLTeamContainer*
		constexpr auto AlliedTeamData = 0x280; // UHLLTeamContainer*
		constexpr auto LHSSlot = 0x288; // UNamedSlot*
		constexpr auto RHSSlot = 0x290; // UNamedSlot*
		constexpr auto WinScoreText = 0x298; // UTextBlock*
		constexpr auto LHSTeamName = 0x2a0; // UTextBlock*
		constexpr auto RHSTeamName = 0x2a8; // UTextBlock*
		constexpr auto LHSPlayerCount = 0x2b0; // UTextBlock*
		constexpr auto RHSPlayerCount = 0x2b8; // UTextBlock*
		constexpr auto LHSTeamIcon = 0x2c0; // UImage*
		constexpr auto RHSTeamIcon = 0x2c8; // UImage*
		constexpr auto CommendationHint = 0x2d0; // UWidget*
		constexpr auto StatGridPanel = 0x2d8; // UUniformGridPanel*
		constexpr auto ContentSwitcher = 0x2e0; // UWidgetSwitcher*
		constexpr auto ServerPopulationText = 0x2e8; // UTextBlock*
	}

	namespace n_UABP_Rifleman_TPP_V2_C {
		constexpr auto UberGraphFrame = 0x2d0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_ModifyBone_7 = 0x2d8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace_10 = 0x3e0; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose_33 = 0x400; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_84 = 0x4b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_101 = 0x530; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_100 = 0x558; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_32 = 0x580; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_99 = 0x638; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_23 = 0x660; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_22 = 0x6a8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_98 = 0x6f0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_97 = 0x718; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_83 = 0x740; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_82 = 0x7b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_81 = 0x830; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SaveCachedPose_31 = 0x8a8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_96 = 0x960; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_29 = 0x988; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_LayeredBoneBlend_27 = 0xa50; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_SaveCachedPose_30 = 0xb10; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_BlendListByEnum_41 = 0xbc8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_LocalToComponentSpace_10 = 0xc78; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ModifyBone_6 = 0xc98; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace_9 = 0xda0; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose_29 = 0xdc0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_95 = 0xe78; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_22 = 0xea0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_LocalToComponentSpace_9 = 0xf40; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_LocalToComponentSpace_8 = 0xf60; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace_8 = 0xf80; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose_28 = 0xfa0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_94 = 0x1058; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_21 = 0x1080; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendBoneByChannel_8 = 0x1120; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_SequencePlayer_80 = 0x1188; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendBoneByChannel_7 = 0x1200; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_SequencePlayer_79 = 0x1268; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_40 = 0x12e0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByBool_20 = 0x1390; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_93 = 0x1430; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_78 = 0x1458; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_28 = 0x14d0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_6 = 0x1598; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_5 = 0x1720; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_SequencePlayer_77 = 0x18a8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_27 = 0x1920; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_76 = 0x19e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByBool_19 = 0x1a60; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_LayeredBoneBlend_26 = 0x1b00; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_92 = 0x1bc0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_91 = 0x1be8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_35 = 0x1c10; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_7 = 0x1c40; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_UseCachedPose_90 = 0x1cf0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_89 = 0x1d18; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_26 = 0x1d40; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_LayeredBoneBlend_25 = 0x1e08; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_LegIK = 0x1ec8; // FAnimNode_LegIK
		constexpr auto AnimGraphNode_ModifyBone_5 = 0x1fc0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ModifyBone_4 = 0x20c8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_UseCachedPose_88 = 0x21d0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_27 = 0x21f8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_26 = 0x22b0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_25 = 0x2368; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_Slot_21 = 0x2420; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_87 = 0x2468; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_20 = 0x2490; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_86 = 0x24d8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_25 = 0x2500; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_TwoWayBlend_24 = 0x25c8; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_75 = 0x2690; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_74 = 0x2708; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_73 = 0x2780; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_85 = 0x27f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_84 = 0x2820; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_18 = 0x2848; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_83 = 0x28e8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_24 = 0x2910; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_23 = 0x29c8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_Slot_19 = 0x2a80; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_82 = 0x2ac8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_22 = 0x2af0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TwoBoneIK_2 = 0x2bb0; // FAnimNode_TwoBoneIK
		constexpr auto AnimGraphNode_ModifyBone_3 = 0x2d90; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_BlendBoneByChannel_6 = 0x2e98; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_81 = 0x2f00; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_80 = 0x2f28; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_79 = 0x2f50; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_24 = 0x2f78; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_78 = 0x3038; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_77 = 0x3060; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_72 = 0x3088; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_71 = 0x3100; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_70 = 0x3178; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_7 = 0x31f0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_69 = 0x32b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_68 = 0x3330; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_67 = 0x33a8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_66 = 0x3420; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_65 = 0x3498; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_64 = 0x3510; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_63 = 0x3588; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_6 = 0x3600; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_Slot_18 = 0x36c8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_17 = 0x3710; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_16 = 0x3758; // FAnimNode_Slot
		constexpr auto AnimGraphNode_BlendListByEnum_39 = 0x37a0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_38 = 0x3850; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_37 = 0x3900; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_36 = 0x39b0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_35 = 0x3a60; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_34 = 0x3b10; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_33 = 0x3bc0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_TwoWayBlend_23 = 0x3c70; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_ApplyAdditive_5 = 0x3d38; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_UseCachedPose_76 = 0x3e00; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ComponentToLocalSpace_7 = 0x3e28; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose_21 = 0x3e48; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LocalToComponentSpace_7 = 0x3f00; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_TwoWayBlend_22 = 0x3f20; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_75 = 0x3fe8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TransitionResult_84 = 0x4010; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_83 = 0x4038; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_82 = 0x4060; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_81 = 0x4088; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_80 = 0x40b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_79 = 0x40d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_78 = 0x4100; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_77 = 0x4128; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_76 = 0x4150; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_75 = 0x4178; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_74 = 0x41a0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_73 = 0x41c8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_62 = 0x41f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_LayeredBoneBlend_23 = 0x4268; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_ApplyAdditive_4 = 0x4328; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_61 = 0x43f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_74 = 0x4468; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel_5 = 0x4490; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_73 = 0x44f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_22 = 0x4520; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_ComponentToLocalSpace_6 = 0x45e0; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_HandIKRetargeting_3 = 0x4600; // FAnimNode_HandIKRetargeting
		constexpr auto AnimGraphNode_LocalToComponentSpace_6 = 0x4720; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_SequencePlayer_60 = 0x4740; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_34 = 0x47b8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_59 = 0x47e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_21 = 0x4860; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_58 = 0x4928; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_57 = 0x49a0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_20 = 0x4a18; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_56 = 0x4ae0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_LayeredBoneBlend_21 = 0x4b58; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_ApplyAdditive_3 = 0x4c18; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_55 = 0x4ce0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_72 = 0x4d58; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel_4 = 0x4d80; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_71 = 0x4de8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_20 = 0x4e10; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_ComponentToLocalSpace_5 = 0x4ed0; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_HandIKRetargeting_2 = 0x4ef0; // FAnimNode_HandIKRetargeting
		constexpr auto AnimGraphNode_LocalToComponentSpace_5 = 0x5010; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_StateResult_33 = 0x5030; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_70 = 0x5060; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_32 = 0x5088; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_54 = 0x50b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_31 = 0x5130; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TwoWayBlend_19 = 0x5160; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_53 = 0x5228; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_52 = 0x52a0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_30 = 0x5318; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_6 = 0x5348; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_TwoWayBlend_18 = 0x53f8; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_69 = 0x54c0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ModifyBone_2 = 0x54e8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_BlendBoneByChannel_3 = 0x55f0; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_TransitionResult_72 = 0x5658; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_71 = 0x5680; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_70 = 0x56a8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_69 = 0x56d0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_68 = 0x56f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_67 = 0x5720; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_66 = 0x5748; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_65 = 0x5770; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_64 = 0x5798; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_63 = 0x57c0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_62 = 0x57e8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_61 = 0x5810; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_60 = 0x5838; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_59 = 0x5860; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_58 = 0x5888; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_57 = 0x58b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_56 = 0x58d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_55 = 0x5900; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_54 = 0x5928; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_53 = 0x5950; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_52 = 0x5978; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_51 = 0x59a0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_50 = 0x59c8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TwoWayBlend_17 = 0x59f0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_TransitionPoseEvaluator_6 = 0x5ab8; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_TransitionPoseEvaluator_5 = 0x5b10; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_CustomTransitionResult_3 = 0x5b68; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_49 = 0x5b98; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_48 = 0x5bc0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_47 = 0x5be8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_46 = 0x5c10; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TwoWayBlend_16 = 0x5c38; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_TransitionPoseEvaluator_4 = 0x5d00; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_TransitionPoseEvaluator_3 = 0x5d58; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_CustomTransitionResult_2 = 0x5db0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_45 = 0x5de0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_44 = 0x5e08; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_43 = 0x5e30; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_42 = 0x5e58; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_41 = 0x5e80; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_40 = 0x5ea8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_39 = 0x5ed0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TwoWayBlend_15 = 0x5ef8; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_TransitionPoseEvaluator_2 = 0x5fc0; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_TransitionPoseEvaluator = 0x6018; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_CustomTransitionResult = 0x6070; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_38 = 0x60a0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_37 = 0x60c8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_36 = 0x60f0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_35 = 0x6118; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_34 = 0x6140; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_33 = 0x6168; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_32 = 0x6190; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_31 = 0x61b8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_51 = 0x61e0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_32 = 0x6258; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_UseCachedPose_68 = 0x6308; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_19 = 0x6330; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_SequencePlayer_50 = 0x63f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_29 = 0x6468; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_31 = 0x6498; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_49 = 0x6548; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_48 = 0x65c0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_47 = 0x6638; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_46 = 0x66b0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_45 = 0x6728; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_44 = 0x67a0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_43 = 0x6818; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_28 = 0x6890; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_30 = 0x68c0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_42 = 0x68e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_27 = 0x6960; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_41 = 0x6990; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_26 = 0x6a08; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_40 = 0x6a38; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_25 = 0x6ab0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByBool_17 = 0x6ae0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendSpacePlayer_37 = 0x6b80; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_36 = 0x6c60; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_StateResult_24 = 0x6d40; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_29 = 0x6d70; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendListByEnum_30 = 0x6d98; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_29 = 0x6e48; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_28 = 0x6ef8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_35 = 0x6fa8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_34 = 0x7088; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_33 = 0x7168; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_32 = 0x7248; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_StateResult_23 = 0x7328; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TwoWayBlend_14 = 0x7358; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_TwoWayBlend_13 = 0x7420; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_39 = 0x74e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_38 = 0x7560; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_27 = 0x75d8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_37 = 0x7688; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_36 = 0x7700; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_22 = 0x7778; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_26 = 0x77a8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_25 = 0x7858; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_31 = 0x7908; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_30 = 0x79e8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_29 = 0x7ac8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_12 = 0x7ba8; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_BlendSpacePlayer_28 = 0x7c70; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_27 = 0x7d50; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_26 = 0x7e30; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_StateResult_21 = 0x7f10; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_24 = 0x7f40; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_23 = 0x7ff0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_35 = 0x80a0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_34 = 0x8118; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_33 = 0x8190; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_32 = 0x8208; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_11 = 0x8280; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_BlendListByEnum_22 = 0x8348; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByBool_16 = 0x83f8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendSpacePlayer_25 = 0x8498; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_24 = 0x8578; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_23 = 0x8658; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_SequencePlayer_31 = 0x8738; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_20 = 0x87b0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_67 = 0x87e0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_19 = 0x8808; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_28 = 0x8838; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_27 = 0x8860; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_26 = 0x8888; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_25 = 0x88b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_24 = 0x88d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_23 = 0x8900; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_22 = 0x8928; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_21 = 0x8950; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_20 = 0x8978; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_StateResult_18 = 0x89a0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_19 = 0x89d0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendListByEnum_21 = 0x89f8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_20 = 0x8aa8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_LayeredBoneBlend_18 = 0x8b58; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendSpacePlayer_22 = 0x8c18; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_21 = 0x8cf8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_20 = 0x8dd8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_SequencePlayer_30 = 0x8eb8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_29 = 0x8f30; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_28 = 0x8fa8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_17 = 0x9020; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_19 = 0x9050; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_19 = 0x9100; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_18 = 0x91e0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_17 = 0x92c0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_StateResult_16 = 0x93a0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_18 = 0x93d0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_17 = 0x9480; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_16 = 0x9530; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_15 = 0x9610; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_14 = 0x96f0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_13 = 0x97d0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_12 = 0x98b0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_11 = 0x9990; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_10 = 0x9a70; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_StateResult_15 = 0x9b38; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_16 = 0x9b68; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_15 = 0x9c18; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_LayeredBoneBlend_17 = 0x9cc8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendSpacePlayer_10 = 0x9d88; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_9 = 0x9e68; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_8 = 0x9f48; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_SequencePlayer_27 = 0xa028; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_26 = 0xa0a0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_25 = 0xa118; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_14 = 0xa190; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_5 = 0xa1c0; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_13 = 0xa270; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_4 = 0xa2a0; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_TwoWayBlend_9 = 0xa350; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_Slot_15 = 0xa418; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_14 = 0xa460; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_20 = 0xa4a8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_BlendSpacePlayer_7 = 0xa560; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_SaveCachedPose_19 = 0xa640; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_66 = 0xa6f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_65 = 0xa720; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_16 = 0xa748; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_Slot_13 = 0xa808; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_12 = 0xa850; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_11 = 0xa898; // FAnimNode_Slot
		constexpr auto AnimGraphNode_BlendListByEnum_14 = 0xa8e0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_ApplyAdditive_2 = 0xa990; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_24 = 0xaa58; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_23 = 0xaad0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_22 = 0xab48; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_13 = 0xabc0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_UseCachedPose_64 = 0xac70; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_63 = 0xac98; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LocalToComponentSpace_4 = 0xacc0; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_HandIKRetargeting = 0xace0; // FAnimNode_HandIKRetargeting
		constexpr auto AnimGraphNode_ComponentToLocalSpace_4 = 0xae00; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_BlendListByBool_15 = 0xae20; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_62 = 0xaec0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_15 = 0xaee8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_61 = 0xafa8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_18 = 0xafd0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_17 = 0xb088; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_60 = 0xb140; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_59 = 0xb168; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_58 = 0xb190; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_57 = 0xb1b8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive_3 = 0xb1e0; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive_2 = 0xb2b0; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive = 0xb380; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_BlendListByEnum_12 = 0xb450; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SaveCachedPose_16 = 0xb500; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_56 = 0xb5b8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_55 = 0xb5e0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_14 = 0xb608; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_54 = 0xb6a8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_13 = 0xb6d0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendSpacePlayer_6 = 0xb770; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_Slot_10 = 0xb850; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_9 = 0xb898; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_8 = 0xb8e0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_BlendListByEnum_11 = 0xb928; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_UseCachedPose_53 = 0xb9d8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_52 = 0xba00; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_51 = 0xba28; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TransitionResult_18 = 0xba50; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_17 = 0xba78; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_16 = 0xbaa0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_15 = 0xbac8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_14 = 0xbaf0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_13 = 0xbb18; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_21 = 0xbb40; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_12 = 0xbbb8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_20 = 0xbbe8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_11 = 0xbc60; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_19 = 0xbc90; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_10 = 0xbd08; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_18 = 0xbd38; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_9 = 0xbdb0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_50 = 0xbde0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_8 = 0xbe08; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_3 = 0xbe38; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_SaveCachedPose_15 = 0xbee8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_PoseSnapshot = 0xbfa0; // FAnimNode_PoseSnapshot
		constexpr auto AnimGraphNode_BlendListByBool_12 = 0xc030; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_ModifyBone = 0xc0d0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_LocalToComponentSpace_3 = 0xc1d8; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace_3 = 0xc1f8; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_UseCachedPose_49 = 0xc218; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_14 = 0xc240; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_ComponentToLocalSpace_2 = 0xc2f8; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_TwoBoneIK = 0xc320; // FAnimNode_TwoBoneIK
		constexpr auto AnimGraphNode_LocalToComponentSpace_2 = 0xc500; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_SaveCachedPose_13 = 0xc520; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_8 = 0xc5d8; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_4 = 0xc6a0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_UseCachedPose_48 = 0xc828; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendSpacePlayer_5 = 0xc850; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_UseCachedPose_47 = 0xc930; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_46 = 0xc958; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_45 = 0xc980; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_12 = 0xc9a8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_44 = 0xca60; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_11 = 0xca88; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_BlendListByEnum_10 = 0xcb40; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_9 = 0xcbf0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_TwoWayBlend_7 = 0xcca0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_BlendBoneByChannel_2 = 0xcd68; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_43 = 0xcdd0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_6 = 0xcdf8; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SaveCachedPose_10 = 0xcec0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_42 = 0xcf78; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_41 = 0xcfa0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_40 = 0xcfc8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_9 = 0xcff0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_39 = 0xd0a8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_38 = 0xd0d0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_37 = 0xd0f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_14 = 0xd120; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_36 = 0xd1e0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_13 = 0xd208; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_35 = 0xd2c8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_12 = 0xd2f0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_34 = 0xd3b0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_33 = 0xd3d8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_11 = 0xd400; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendListByEnum_8 = 0xd4c0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_4 = 0xd570; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_SaveCachedPose_8 = 0xd650; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_32 = 0xd708; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_31 = 0xd730; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_10 = 0xd758; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_Slot_7 = 0xd818; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_7 = 0xd860; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_Slot_6 = 0xd918; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Root = 0xd960; // FAnimNode_Root
		constexpr auto AnimGraphNode_TwoWayBlend_5 = 0xd990; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_30 = 0xda58; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_29 = 0xda80; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_6 = 0xdaa8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_28 = 0xdb60; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_27 = 0xdb88; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_26 = 0xdbb0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_9 = 0xdbd8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_25 = 0xdc98; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_5 = 0xdcc0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_TwoWayBlend_4 = 0xdd08; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SaveCachedPose_5 = 0xddd0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_24 = 0xde88; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_3 = 0xdeb0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_23 = 0xdf78; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_2 = 0xdfa0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_22 = 0xe068; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel = 0xe090; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_21 = 0xe0f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TransitionResult_12 = 0xe120; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_11 = 0xe148; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_10 = 0xe170; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_9 = 0xe198; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_8 = 0xe1c0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0xe1e8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0xe210; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0xe238; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0xe260; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_StateResult_7 = 0xe288; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0xe2b8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendListByEnum_7 = 0xe2e0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_17 = 0xe390; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_16 = 0xe408; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_15 = 0xe480; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_6 = 0xe4f8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_6 = 0xe528; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_14 = 0xe5d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_13 = 0xe650; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_12 = 0xe6c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_5 = 0xe740; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_11 = 0xe770; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_10 = 0xe7e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_5 = 0xe860; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_TwoWayBlend = 0xe910; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_LayeredBoneBlend_8 = 0xe9d8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendListByEnum_4 = 0xea98; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByEnum_3 = 0xeb48; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_9 = 0xebf8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_8 = 0xec70; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_7 = 0xece8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0xed60; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0xedd8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByEnum_2 = 0xee08; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0xeeb8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0xef30; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0xefa8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_3 = 0xf020; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_2 = 0xf050; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_Slot_4 = 0xf100; // FAnimNode_Slot
		constexpr auto AnimGraphNode_ApplyAdditive = 0xf148; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_TransitionResult_2 = 0xf210; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0xf238; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_StateResult_2 = 0xf260; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByBool_11 = 0xf290; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendSpacePlayer_3 = 0xf330; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_2 = 0xf410; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_StateResult = 0xf4f0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0xf520; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_LayeredBoneBlend_7 = 0xf5d0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendListByBool_10 = 0xf690; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_20 = 0xf730; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByEnum = 0xf758; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0xf808; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_LayeredBoneBlend_6 = 0xf880; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_19 = 0xf940; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_18 = 0xf968; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_5 = 0xf990; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendListByBool_9 = 0xfa50; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_17 = 0xfaf0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_16 = 0xfb18; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_15 = 0xfb40; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_8 = 0xfb68; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SaveCachedPose_4 = 0xfc08; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_14 = 0xfcc0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_4 = 0xfce8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_13 = 0xfda8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_12 = 0xfdd0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_7 = 0xfdf8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0xfe98; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_CopyBone = 0xfeb8; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0xffa8; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose_3 = 0xffc8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_11 = 0x10080; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_10 = 0x100a8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_6 = 0x100d0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer = 0x10170; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByBool_5 = 0x101e8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendSpacePlayer = 0x10288; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_3 = 0x10368; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_2 = 0x104f0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_BlendListByBool_4 = 0x10678; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace = 0x10718; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x108a0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_9 = 0x10958; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_3 = 0x10980; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SaveCachedPose = 0x10a20; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_8 = 0x10ad8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0x10b00; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_3 = 0x10b28; // FAnimNode_Slot
		constexpr auto AnimGraphNode_LayeredBoneBlend_3 = 0x10b70; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0x10c30; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_2 = 0x10c58; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_Slot_2 = 0x10cf8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_LayeredBoneBlend_2 = 0x10d40; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0x10e00; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x10e28; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x10e50; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool = 0x10e78; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_Slot = 0x10f18; // FAnimNode_Slot
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0x10f60; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x11020; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose = 0x11048; // FAnimNode_UseCachedPose
		constexpr auto IsLocallyControlled = 0x11070; // bool
		constexpr auto IsDead = 0x11071; // bool
		constexpr auto IsDeployed = 0x11072; // bool
		constexpr auto IsBraced = 0x11073; // bool
		constexpr auto IsADS = 0x11074; // bool
		constexpr auto EnableFullBody = 0x11075; // bool
		constexpr auto WeaponUsesADS = 0x11076; // bool
		constexpr auto Speed = 0x11078; // float
		constexpr auto WantsToMove = 0x1107c; // bool
		constexpr auto IsSprinting = 0x1107d; // bool
		constexpr auto IsTurning = 0x1107e; // bool
		constexpr auto DirectionPivot = 0x1107f; // bool
		constexpr auto LockMovingDirection = 0x11080; // bool
		constexpr auto LockPivotingDirection = 0x11081; // bool
		constexpr auto MovementThreshold = 0x11084; // float
		constexpr auto SprintWeight = 0x11088; // float
		constexpr auto SprintWeightInv = 0x1108c; // float
		constexpr auto LegsTurnRef = 0x11090; // float
		constexpr auto LegsTurnRate = 0x11094; // float
		constexpr auto Debug = 0x11098; // bool
		constexpr auto CharacterRotation = 0x1109c; // FRotator
		constexpr auto DeltaTimeX = 0x110a8; // float
		constexpr auto LastVelocityRotation = 0x110ac; // FRotator
		constexpr auto PreviousVelocityRotation = 0x110b8; // FRotator
		constexpr auto FPP_Component = 0x110c8; // UABP_Rifleman_FPP_V2_C*
		constexpr auto Weapon = 0x110d0; // AShooterWeapon*
		constexpr auto CapsuleComponent = 0x110d8; // UCapsuleComponent*
		constexpr auto RequestedWeapon = 0x110e0; // AShooterWeapon*
		constexpr auto AnimSet = 0x110e8; // UWeaponTPPAnimationSet*
		constexpr auto DefaultAnimSet = 0x110f0; // UWeaponTPPAnimationSet*
		constexpr auto PlayerPawn = 0x110f8; // AShooterCharacter*
		constexpr auto TPP_Component = 0x11100; // USkeletalMeshComponent*
		constexpr auto FallSpeed = 0x11108; // float
		constexpr auto InAirTime = 0x1110c; // float
		constexpr auto JumpVelocity = 0x11110; // float
		constexpr auto LeanInAir = 0x11114; // float
		constexpr auto AccelerationDifference = 0x11118; // float
		constexpr auto PreviousSpeed = 0x1111c; // float
		constexpr auto LeanRotation = 0x11120; // float
		constexpr auto LeanAcceleration = 0x11124; // float
		constexpr auto FootPositionPhase = 0x11128; // float
		constexpr auto FootPositionDirection = 0x1112c; // float
		constexpr auto RandomIndex_Idle = 0x11130; // int32_t
		constexpr auto pose_inheritance_stand = 0x11138; // UAnimSequenceBase*
		constexpr auto pose_inheritance_crouch = 0x11140; // UAnimSequenceBase*
		constexpr auto pose_inheritance_prone = 0x11148; // UAnimSequenceBase*
		constexpr auto idle_stand = 0x11150; // UAnimSequenceBase*
		constexpr auto idle_crouch = 0x11158; // UAnimSequenceBase*
		constexpr auto idle_prone = 0x11160; // UAnimSequenceBase*
		constexpr auto idle_stand_break_01 = 0x11168; // UAnimSequenceBase*
		constexpr auto idle_stand_break_02 = 0x11170; // UAnimSequenceBase*
		constexpr auto idle_crouch_break_01 = 0x11178; // UAnimSequenceBase*
		constexpr auto idle_crouch_break_02 = 0x11180; // UAnimSequenceBase*
		constexpr auto bs_locomotion_stand = 0x11188; // UBlendSpaceBase*
		constexpr auto bs_locomotion_crouch = 0x11190; // UBlendSpaceBase*
		constexpr auto bs_locomotion_prone = 0x11198; // UBlendSpaceBase*
		constexpr auto bs_stop_walk_stand = 0x111a0; // UBlendSpaceBase*
		constexpr auto bs_stop_walk_crouch = 0x111a8; // UBlendSpaceBase*
		constexpr auto bs_stop_jog_stand = 0x111b0; // UBlendSpaceBase*
		constexpr auto bs_stop_jog_crouch = 0x111b8; // UBlendSpaceBase*
		constexpr auto bs_stop_sprint_stand = 0x111c0; // UBlendSpaceBase*
		constexpr auto bs_stop_sprint_crouch = 0x111c8; // UBlendSpaceBase*
		constexpr auto bs_stop_jog_stand_to_prone = 0x111d0; // UBlendSpaceBase*
		constexpr auto bs_stop_jog_crouch_to_prone = 0x111d8; // UBlendSpaceBase*
		constexpr auto bs_stop_sprint_stand_to_prone = 0x111e0; // UBlendSpaceBase*
		constexpr auto bs_stop_sprint_crouch_to_prone = 0x111e8; // UBlendSpaceBase*
		constexpr auto rotate_stand_r = 0x111f0; // UAnimSequenceBase*
		constexpr auto rotate_stand_l = 0x111f8; // UAnimSequenceBase*
		constexpr auto rotate_crouch_r = 0x11200; // UAnimSequenceBase*
		constexpr auto rotate_crouch_l = 0x11208; // UAnimSequenceBase*
		constexpr auto rotate_prone_r = 0x11210; // UAnimSequenceBase*
		constexpr auto rotate_prone_l = 0x11218; // UAnimSequenceBase*
		constexpr auto stand_vault = 0x11220; // UBlendSpaceBase*
		constexpr auto stand_climb = 0x11228; // UBlendSpaceBase*
		constexpr auto t_stand_to_crouch = 0x11230; // UAnimSequenceBase*
		constexpr auto t_stand_to_prone = 0x11238; // UAnimSequenceBase*
		constexpr auto t_crouch_to_prone = 0x11240; // UAnimSequenceBase*
		constexpr auto t_crouch_to_stand = 0x11248; // UAnimSequenceBase*
		constexpr auto t_prone_to_stand = 0x11250; // UAnimSequenceBase*
		constexpr auto t_prone_to_crouch = 0x11258; // UAnimSequenceBase*
		constexpr auto bipod_deploy_stand = 0x11260; // UAnimSequenceBase*
		constexpr auto Bipod_Moving = 0x11268; // bool
		constexpr auto Bipod_Moving_Direction = 0x11269; // bool
		constexpr auto Stance = 0x1126a; // ECharacterStance
		constexpr auto StanceStored = 0x1126b; // ECharacterStance
		constexpr auto StancePrevious = 0x1126c; // ECharacterStance
		constexpr auto StanceDeath = 0x1126d; // ECharacterStance
		constexpr auto ChangedStance = 0x1126e; // bool
		constexpr auto WeaponTypeCurrent = 0x1126f; // EWeaponType
		constexpr auto IsVaulting = 0x11270; // bool
		constexpr auto IsClimbing = 0x11271; // bool
		constexpr auto LeanAdditive = 0x11274; // FVector2D
		constexpr auto SprintRotation = 0x1127c; // FRotator
		constexpr auto DebugWidget = 0x11288; // UWidget_DebugPlayerStates_C*
		constexpr auto WeaponTypeLast = 0x11290; // EWeaponType
		constexpr auto ADS_Weight = 0x11294; // float
		constexpr auto WeaponGroup = 0x11298; // EWeaponGroups_V2
		constexpr auto Speed_Max_ADS = 0x1129c; // float
		constexpr auto Speed_Max_Sprint_Standing = 0x112a0; // float
		constexpr auto Speed_Max_Sprint_Crouched = 0x112a4; // float
		constexpr auto TransitionState = 0x112a8; // ETransitionState_V2
		constexpr auto TransitionStateLast = 0x112a9; // ETransitionState_V2
		constexpr auto Initialized = 0x112aa; // bool
		constexpr auto RelativeVelocity = 0x112ac; // FVector2D
		constexpr auto RelativeVelocitySlow = 0x112b4; // FVector2D
		constexpr auto RelativeVelocityStored = 0x112bc; // FVector2D
		constexpr auto RelativeVelocityDifference = 0x112c4; // float
		constexpr auto LegsForwardDirRef = 0x112c8; // FVector
		constexpr auto DebugAlignRadius = 0x112d4; // float
		constexpr auto StanceTransitionSpeed = 0x112d8; // float
		constexpr auto SpeedTimerTime = 0x112dc; // float
		constexpr auto Speed_Max_Jog_Standing = 0x112e0; // float
		constexpr auto Speed_Max_Jog_Crouched = 0x112e4; // float
		constexpr auto Speed_Max_Proned = 0x112e8; // float
		constexpr auto Bipod_IntepPose = 0x112ec; // float
		constexpr auto Bipod_IntepPose_Stored = 0x112f0; // float
		constexpr auto Bipod_AimVerticalBlend = 0x112f4; // float
		constexpr auto PlayerBipod_T = 0x112f8; // FVector
		constexpr auto PlayerBipod_R = 0x11304; // FRotator
		constexpr auto Bipod_Anchor = 0x11310; // FTransform
		constexpr auto IK_Left = 0x11340; // float
		constexpr auto IK_Right = 0x11344; // float
		constexpr auto IK_Left_Enabled = 0x11348; // bool
		constexpr auto IK_Right_Enabled = 0x11349; // bool
		constexpr auto stand_jump_enter = 0x11350; // UAnimSequenceBase*
		constexpr auto stand_jump_loop = 0x11358; // UAnimSequenceBase*
		constexpr auto stand_jump_exit = 0x11360; // UAnimSequenceBase*
		constexpr auto sprint_stand = 0x11368; // UAnimSequenceBase*
		constexpr auto sprint_crouch = 0x11370; // UAnimSequenceBase*
		constexpr auto pose_inheritance_deploy = 0x11378; // UAnimSequenceBase*
		constexpr auto pose_ads_stand = 0x11380; // UAnimSequenceBase*
		constexpr auto pose_ads_crouch = 0x11388; // UAnimSequenceBase*
		constexpr auto pose_ads_prone = 0x11390; // UAnimSequenceBase*
		constexpr auto bipod_deploy_crouch = 0x11398; // UAnimSequenceBase*
		constexpr auto bipod_deploy_prone = 0x113a0; // UAnimSequenceBase*
		constexpr auto bipod_idle_stand = 0x113a8; // UAnimSequenceBase*
		constexpr auto bipod_idle_crouch = 0x113b0; // UAnimSequenceBase*
		constexpr auto bipod_idle_prone = 0x113b8; // UAnimSequenceBase*
		constexpr auto bipod_undeploy_stand = 0x113c0; // UAnimSequenceBase*
		constexpr auto bipod_undeploy_crouch = 0x113c8; // UAnimSequenceBase*
		constexpr auto bipod_undeploy_prone = 0x113d0; // UAnimSequenceBase*
		constexpr auto bs_start_walk_stand = 0x113d8; // UBlendSpaceBase*
		constexpr auto bs_start_walk_crouch = 0x113e0; // UBlendSpaceBase*
		constexpr auto bs_start_jog_stand = 0x113e8; // UBlendSpaceBase*
		constexpr auto bs_start_jog_crouch = 0x113f0; // UBlendSpaceBase*
		constexpr auto bs_start_prone_to_jog = 0x113f8; // UBlendSpaceBase*
		constexpr auto bs_start_prone_to_sprint = 0x11400; // UBlendSpaceBase*
		constexpr auto Timer_Turn = 0x11408; // float
		constexpr auto Time_Stop = 0x1140c; // float
		constexpr auto CaptureStopTimer = 0x11410; // bool
		constexpr auto VelocityStage = 0x11411; // EVelocityStage_V2
		constexpr auto VelocityDifference = 0x11414; // float
		constexpr auto CharacterVelocityStored = 0x11418; // FVector
		constexpr auto ac_LegsTurnCurve = 0x11424; // float
		constexpr auto AO_Stand = 0x11428; // UBlendSpaceBase*
		constexpr auto AO_Stand_ADS = 0x11430; // UBlendSpaceBase*
		constexpr auto AO_Crouch = 0x11438; // UBlendSpaceBase*
		constexpr auto AO_Crouch_ADS = 0x11440; // UBlendSpaceBase*
		constexpr auto AO_Prone = 0x11448; // UBlendSpaceBase*
		constexpr auto AO_Prone_ADS = 0x11450; // UBlendSpaceBase*
		constexpr auto ac_IK_Right_Default = 0x11458; // float
		constexpr auto ac_IK_Left_Default = 0x1145c; // float
		constexpr auto pose_idle_stand = 0x11460; // UAnimSequenceBase*
		constexpr auto pose_idle_crouch = 0x11468; // UAnimSequenceBase*
		constexpr auto pose_idle_prone = 0x11470; // UAnimSequenceBase*
		constexpr auto LegsForwardDir = 0x11478; // FRotator
		constexpr auto CharDirection = 0x11484; // float
		constexpr auto CharDirectionSign = 0x11488; // float
		constexpr auto AO_Crouch_Moving = 0x11490; // UAimOffsetBlendSpace*
		constexpr auto Speed_Normalized_Relevant = 0x11498; // float
		constexpr auto Speed_Normalized_Relevant_Max = 0x1149c; // float
		constexpr auto Speed_Normalized_Stand = 0x114a0; // float
		constexpr auto Speed_Normalized_Crouch = 0x114a4; // float
		constexpr auto Speed_Normalized_Prone = 0x114a8; // float
		constexpr auto Speed_Normalized_Stand_Sprint = 0x114ac; // float
		constexpr auto Speed_Normalized_Crouch_Sprint = 0x114b0; // float
		constexpr auto Speed_Normalized_ADS = 0x114b4; // float
		constexpr auto Speed_Sticky = 0x114b8; // float
		constexpr auto RandomIndex_Death = 0x114bc; // int32_t
		constexpr auto RandomIndex_Death_Prone = 0x114c0; // int32_t
		constexpr auto FullBodyBlend = 0x114c4; // float
		constexpr auto CharDirection_Moving = 0x114c8; // float
		constexpr auto AimOffsetWeight = 0x114cc; // float
		constexpr auto CharDirection_Moving_Slow = 0x114d0; // float
		constexpr auto CharDirection_Pivoting = 0x114d4; // float
		constexpr auto idle_stand_ads = 0x114d8; // UAnimSequenceBase*
		constexpr auto idle_crouch_ads = 0x114e0; // UAnimSequenceBase*
		constexpr auto idle_prone_ads = 0x114e8; // UAnimSequenceBase*
		constexpr auto Bipod_HeightDiff = 0x114f0; // float
		constexpr auto ac_InheritanceWeight = 0x114f4; // float
		constexpr auto ac_OverrideHandIK = 0x114f8; // float
		constexpr auto EquippedGroup = 0x114fc; // EWeaponGroups_V2
		constexpr auto Prone_FrontSlopeAngle = 0x11500; // float
		constexpr auto Prone_BackSlopeAngle = 0x11504; // float
		constexpr auto Prone_FrontSlopeAngle_Stored = 0x11508; // float
		constexpr auto Prone_BackSlopeAngle_Stored = 0x1150c; // float
		constexpr auto ac_Weight_UpperBody = 0x11510; // float
		constexpr auto PlayerPawnAnim = 0x11518; // APlayerPawn_Anim_V2_C*
		constexpr auto IK_Foot_Offset = 0x11520; // float
		constexpr auto Bipod_AimRotation = 0x11524; // float
		constexpr auto Bipod_AimRotation_Stored = 0x11528; // float
		constexpr auto ac_IK_Action_Override_Left = 0x1152c; // float
		constexpr auto ac_IK_Action_Override_Right = 0x11530; // float
		constexpr auto brace_stand_idle = 0x11538; // UAnimSequenceBase*
		constexpr auto brace_crouch_idle = 0x11540; // UAnimSequenceBase*
		constexpr auto brace_prone_idle = 0x11548; // UAnimSequenceBase*
		constexpr auto ac_Action = 0x11550; // float
		constexpr auto BotTestPawn = 0x11558; // AStressTestBot_C*
		constexpr auto Prone_FrontSlopeRotation = 0x11560; // FRotator
		constexpr auto Prone_BackSlopeRotation = 0x1156c; // FRotator
		constexpr auto IK_Foot_Target_Left_Location = 0x11578; // FVector
		constexpr auto IK_Foot_Target_Left_Rotation = 0x11584; // FRotator
		constexpr auto IK_Foot_Target_Right_Location = 0x11590; // FVector
		constexpr auto IK_Foot_Target_Right_Rotation = 0x1159c; // FRotator
		constexpr auto LeanWeight = 0x115a8; // float
		constexpr auto bs_locomotion_stand_ads = 0x115b0; // UBlendSpace*
		constexpr auto bs_locomotion_crouch_ads = 0x115b8; // UBlendSpace*
		constexpr auto Brace_Stand_Enter = 0x115c0; // UAnimSequenceBase*
		constexpr auto brace_crouch_enter = 0x115c8; // UAnimSequenceBase*
		constexpr auto brace_prone_enter = 0x115d0; // UAnimSequenceBase*
		constexpr auto brace_stand_exit = 0x115d8; // UAnimSequenceBase*
		constexpr auto brace_crouch_exit = 0x115e0; // UAnimSequenceBase*
		constexpr auto brace_prone_exit = 0x115e8; // UAnimSequenceBase*
		constexpr auto ac_RightHandAction = 0x115f0; // float
		constexpr auto CharacterVelocityLastDetermined = 0x115f4; // FVector
		constexpr auto CharacterVelocityTimeCheck = 0x11600; // float
		constexpr auto LegsForwardDirInv = 0x11604; // FRotator
		constexpr auto AimPitch = 0x11610; // float
		constexpr auto AimYaw = 0x11614; // float
		constexpr auto crv_vault = 0x11618; // UCurveVector*
		constexpr auto crv_climb = 0x11620; // UCurveVector*
		constexpr auto vault_enter_low = 0x11628; // UAnimSequenceBase*
		constexpr auto vault_enter_high = 0x11630; // UAnimSequenceBase*
		constexpr auto Vault_Type = 0x11638; // EVaultingMoveType
		constexpr auto Vault_Low = 0x11639; // bool
		constexpr auto Vault_WaitForGround = 0x1163a; // bool
		constexpr auto Vault_Enter_Start = 0x1163c; // float
		constexpr auto Vault_Exit_Start = 0x11640; // float
		constexpr auto Vault_Enter_Alpha = 0x11644; // float
		constexpr auto Vault_Over_Alpha = 0x11648; // float
		constexpr auto Vault_Exit_Alpha = 0x1164c; // float
		constexpr auto Vault_Over_Time = 0x11650; // float
		constexpr auto Vault_Obstacle = 0x11654; // FVector
		constexpr auto Vault_Obstacle_World = 0x11660; // FVector
		constexpr auto Vault_MeshStart = 0x1166c; // FVector
		constexpr auto Vault_RootOffset = 0x11678; // FVector
		constexpr auto Vault_Enter_Speed = 0x11684; // float
		constexpr auto Vault_Over_Speed = 0x11688; // float
		constexpr auto Vault_Exit_Speed = 0x1168c; // float
		constexpr auto Vault_Enter_Speed_Mod = 0x11690; // float
		constexpr auto Vault_Over_Speed_Mod = 0x11694; // float
		constexpr auto Vault_Exit_Speed_Mod = 0x11698; // float
		constexpr auto Vault_Enter_Vec = 0x1169c; // FVector
		constexpr auto Vault_Over_Vec = 0x116a8; // FVector
		constexpr auto Vault_Exit_Vec = 0x116b4; // FVector
		constexpr auto Vault_Velocity = 0x116c0; // FVector
		constexpr auto AimYaw_Stored = 0x116cc; // float
		constexpr auto Vault_Enter_Low_AnimRate = 0x116d0; // float
		constexpr auto Vault_Enter_High_AnimRate = 0x116d4; // float
		constexpr auto Vault_Over_Low_AnimRate = 0x116d8; // float
		constexpr auto Vault_Over_High_AnimRate = 0x116dc; // float
		constexpr auto Vault_Exit_Low_AnimRate = 0x116e0; // float
		constexpr auto Vault_Exit_High_AnimRate = 0x116e4; // float
		constexpr auto Vault_OverTransition = 0x116e8; // bool
		constexpr auto Vault_ExitTransition = 0x116e9; // bool
		constexpr auto IK_ForceOn = 0x116ec; // float
		constexpr auto rotate_stand_r_brc = 0x116f0; // UAnimSequenceBase*
		constexpr auto rotate_stand_l_brc = 0x116f8; // UAnimSequenceBase*
		constexpr auto rotate_crouch_r_brc = 0x11700; // UAnimSequenceBase*
		constexpr auto rotate_crouch_l_brc = 0x11708; // UAnimSequenceBase*
		constexpr auto rotate_prone_r_brc = 0x11710; // UAnimSequenceBase*
		constexpr auto rotate_prone_l_brc = 0x11718; // UAnimSequenceBase*
		constexpr auto CharDirection_HighSpeed = 0x11720; // float
		constexpr auto Climb_Enter_Vec = 0x11724; // FVector
		constexpr auto HorizontalTurnThreshold = 0x11730; // float
		constexpr auto WeaponGroup_Last = 0x11734; // EWeaponGroups_V2
		constexpr auto ProneRootOffset = 0x11738; // FVector
		constexpr auto ProneRootOffset_Length = 0x11744; // float
		constexpr auto IsMoving = 0x11748; // bool
		constexpr auto IsStopping = 0x11749; // bool
		constexpr auto IsGrounded = 0x1174a; // bool
		constexpr auto IsPivoting = 0x1174b; // bool
		constexpr auto t_Update_100ms = 0x1174c; // float
		constexpr auto t_Update_300ms = 0x11750; // float
		constexpr auto Climb_Enter_Alpha = 0x11754; // float
		constexpr auto Climb_GoalOffset = 0x11758; // FVector
		constexpr auto t_Update_1000ms = 0x11764; // float
		constexpr auto PlayerCenterOffset = 0x11768; // FVector
		constexpr auto StanceTransitionMontages = 0x11778; // TArray<UAnimMontage*>
		constexpr auto PivotSequence = 0x11788; // UAnimSequence*
		constexpr auto EquipMontage = 0x11790; // UAnimMontage*
		constexpr auto ResetTimerResetters = 0x11798; // bool
		constexpr auto Climb_Enter_Start = 0x1179c; // float
		constexpr auto Climb_Speed = 0x117a0; // float
		constexpr auto Climb_Speed_Mod = 0x117a4; // float
		constexpr auto EnableVaultAndClimb = 0x117a8; // bool
		constexpr auto a_lean_ads = 0x117b0; // UBlendSpaceBase*
		constexpr auto a_lean = 0x117b8; // UBlendSpaceBase*
		constexpr auto DisableAdvancedLayering = 0x117c0; // bool
		constexpr auto PrevCapsuleRot = 0x117c4; // FRotator
		constexpr auto T_Melee_Bayonet = 0x117d0; // bool
		constexpr auto T_Melee_Bayonet_Hit = 0x117d1; // bool
		constexpr auto a_vault_enter_high = 0x117d8; // UAnimSequenceBase*
		constexpr auto a_vault_enter_low = 0x117e0; // UAnimSequenceBase*
		constexpr auto a_vault_exit_high = 0x117e8; // UAnimSequenceBase*
		constexpr auto a_vault_exit_low = 0x117f0; // UAnimSequenceBase*
		constexpr auto a_vault_exit_land_high = 0x117f8; // UAnimSequenceBase*
		constexpr auto a_vault_exit_land_low = 0x11800; // UAnimSequenceBase*
		constexpr auto a_climb = 0x11808; // UAnimSequenceBase*
		constexpr auto VaultForceExitTrigger = 0x11810; // bool
		constexpr auto EquipPose = 0x11811; // bool
		constexpr auto EquipSnapshot = 0x11818; // FPoseSnapshot
		constexpr auto a_lean_Unarmed = 0x11850; // UBlendSpaceBase*
		constexpr auto CurrentDeployState = 0x11858; // EWeaponDeployState
		constexpr auto LegIKAlpha = 0x1185c; // float
		constexpr auto PerformingQuickAttack = 0x11860; // bool
		constexpr auto FullyIdleBlended = 0x11861; // bool
		constexpr auto ShotDirection = 0x11864; // FVector
		constexpr auto ValidBraceStandExit = 0x11870; // bool
		constexpr auto bHitReaction = 0x11871; // bool
		constexpr auto FinishedVaultClimb = 0x11872; // bool
		constexpr auto Reloading = 0x11873; // bool
	}

	namespace n_ACharacter {
		constexpr auto Mesh = 0x280; // USkeletalMeshComponent*
		constexpr auto CharacterMovement = 0x288; // UCharacterMovementComponent*
		constexpr auto CapsuleComponent = 0x290; // UCapsuleComponent*
		constexpr auto BasedMovement = 0x298; // FBasedMovementInfo
		constexpr auto ReplicatedBasedMovement = 0x2c8; // FBasedMovementInfo
		constexpr auto AnimRootMotionTranslationScale = 0x2f8; // float
		constexpr auto BaseTranslationOffset = 0x2fc; // FVector
		constexpr auto BaseRotationOffset = 0x310; // FQuat
		constexpr auto ReplicatedServerLastTransformUpdateTimeStamp = 0x320; // float
		constexpr auto ReplayLastTransformUpdateTimeStamp = 0x324; // float
		constexpr auto ReplicatedMovementMode = 0x328; // char
		constexpr auto bInBaseReplication = 0x329; // bool
		constexpr auto CrouchedEyeHeight = 0x32c; // float
		constexpr auto bIsCrouched = 0x330; // char : 1
		constexpr auto bProxyIsJumpForceApplied = 0x330; // char : 1
		constexpr auto bPressedJump = 0x330; // char : 1
		constexpr auto bClientUpdating = 0x330; // char : 1
		constexpr auto bClientWasFalling = 0x330; // char : 1
		constexpr auto bClientResimulateRootMotion = 0x330; // char : 1
		constexpr auto bClientResimulateRootMotionSources = 0x330; // char : 1
		constexpr auto bSimGravityDisabled = 0x330; // char : 1
		constexpr auto bClientCheckEncroachmentOnNetUpdate = 0x331; // char : 1
		constexpr auto bServerMoveIgnoreRootMotion = 0x331; // char : 1
		constexpr auto bWasJumping = 0x331; // char : 1
		constexpr auto JumpKeyHoldTime = 0x334; // float
		constexpr auto JumpForceTimeRemaining = 0x338; // float
		constexpr auto ProxyJumpForceStartedTime = 0x33c; // float
		constexpr auto JumpMaxHoldTime = 0x340; // float
		constexpr auto JumpMaxCount = 0x344; // int32_t
		constexpr auto JumpCurrentCount = 0x348; // int32_t
		constexpr auto OnReachedJumpApex = 0x350; // FMulticastInlineDelegate
		constexpr auto MovementModeChangedDelegate = 0x370; // FMulticastInlineDelegate
		constexpr auto OnCharacterMovementUpdated = 0x380; // FMulticastInlineDelegate
		constexpr auto SavedRootMotion = 0x390; // FRootMotionSourceGroup
		constexpr auto ClientRootMotionParams = 0x3d0; // FRootMotionMovementParams
		constexpr auto RootMotionRepMoves = 0x410; // TArray<FSimulatedRootMotionReplicatedMove>
		constexpr auto RepRootMotion = 0x420; // FRepRootMotionMontage
	}

	namespace n_ULandscapeComponent {
		constexpr auto SectionBaseX = 0x410; // int32_t
		constexpr auto SectionBaseY = 0x414; // int32_t
		constexpr auto ComponentSizeQuads = 0x418; // int32_t
		constexpr auto SubsectionSizeQuads = 0x41c; // int32_t
		constexpr auto NumSubsections = 0x420; // int32_t
		constexpr auto OverrideMaterial = 0x428; // UMaterialInterface*
		constexpr auto OverrideHoleMaterial = 0x430; // UMaterialInterface*
		constexpr auto OverrideMaterials = 0x438; // TArray<FLandscapeComponentMaterialOverride>
		constexpr auto MaterialInstances = 0x448; // TArray<UMaterialInstanceConstant*>
		constexpr auto MaterialInstancesDynamic = 0x458; // TArray<UMaterialInstanceDynamic*>
		constexpr auto LODIndexToMaterialIndex = 0x468; // TArray<int8_t>
		constexpr auto MaterialIndexToDisabledTessellationMaterial = 0x478; // TArray<int8_t>
		constexpr auto XYOffsetmapTexture = 0x488; // UTexture2D*
		constexpr auto WeightmapScaleBias = 0x490; // FVector4
		constexpr auto WeightmapSubsectionOffset = 0x4a0; // float
		constexpr auto HeightmapScaleBias = 0x4b0; // FVector4
		constexpr auto CachedLocalBox = 0x4c0; // FBox
		constexpr auto CollisionComponent = 0x4dc; // LazyObjectProperty
		constexpr auto HeightmapTexture = 0x4f8; // UTexture2D*
		constexpr auto WeightmapLayerAllocations = 0x500; // TArray<FWeightmapLayerAllocationInfo>
		constexpr auto WeightmapTextures = 0x510; // TArray<UTexture2D*>
		constexpr auto MapBuildDataId = 0x520; // FGuid
		constexpr auto IrrelevantLights = 0x530; // TArray<FGuid>
		constexpr auto CollisionMipLevel = 0x540; // int32_t
		constexpr auto SimpleCollisionMipLevel = 0x544; // int32_t
		constexpr auto NegativeZBoundsExtension = 0x548; // float
		constexpr auto PositiveZBoundsExtension = 0x54c; // float
		constexpr auto StaticLightingResolution = 0x550; // float
		constexpr auto ForcedLOD = 0x554; // int32_t
		constexpr auto LODBias = 0x558; // int32_t
		constexpr auto StateId = 0x55c; // FGuid
		constexpr auto BakedTextureMaterialGuid = 0x56c; // FGuid
		constexpr auto GIBakedBaseColorTexture = 0x580; // UTexture2D*
		constexpr auto MobileBlendableLayerMask = 0x588; // char
		constexpr auto MobileMaterialInterface = 0x590; // UMaterialInterface*
		constexpr auto MobileMaterialInterfaces = 0x598; // TArray<UMaterialInterface*>
		constexpr auto MobileWeightmapTextures = 0x5a8; // TArray<UTexture2D*>
	}

	namespace n_UEditableGameplayTagQueryExpression_NoExprMatch {
		constexpr auto Expressions = 0x28; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UTexture2DDynamic {
		constexpr auto Format = 0xc0; // EPixelFormat
	}

	namespace n_UOnlineSessionClient {
		constexpr auto bIsFromInvite = 0x188; // bool
		constexpr auto bHandlingDisconnect = 0x189; // bool
	}

	namespace n_UHLLDispenserListItem_Satchel {
		constexpr auto TimeText = 0x250; // UTextBlock*
	}

	namespace n_UBTTask_WaitBlackboardTime {
		constexpr auto BlackboardKey = 0x78; // FBlackboardKeySelector
	}

	namespace n_UWGT_UseContext_Resupply_C {
		constexpr auto UberGraphFrame = 0x360; // FPointerToUberGraphFrame
	}

	namespace n_USoundNodeDoppler {
		constexpr auto DopplerIntensity = 0x48; // float
		constexpr auto bUseSmoothing = 0x4c; // bool
		constexpr auto SmoothingInterpSpeed = 0x50; // float
	}

	namespace n_UMaterialExpressionSpeedTree {
		constexpr auto GeometryInput = 0x40; // FExpressionInput
		constexpr auto WindInput = 0x54; // FExpressionInput
		constexpr auto LODInput = 0x68; // FExpressionInput
		constexpr auto ExtraBendWS = 0x7c; // FExpressionInput
		constexpr auto GeometryType = 0x90; // ESpeedTreeGeometryType
		constexpr auto WindType = 0x91; // ESpeedTreeWindType
		constexpr auto LODType = 0x92; // ESpeedTreeLODType
		constexpr auto BillboardThreshold = 0x94; // float
		constexpr auto bAccurateWindVelocities = 0x98; // bool
	}

	namespace n_UMaterialExpressionShadingPathSwitch {
		constexpr auto Default = 0x40; // FExpressionInput
		constexpr auto Inputs = 0x54; // FExpressionInput [0x3]
	}

	namespace n_AHLLGrenadeSmokeEffect {
		constexpr auto GrenadeMesh = 0x848; // UStaticMeshComponent*
		constexpr auto ExplodedTime = 0x850; // float
	}

	namespace n_UOnlineEngineInterfaceImpl {
		constexpr auto VoiceSubsystemNameOverride = 0x28; // FName
	}

	namespace n_UAudioComponent {
		constexpr auto Sound = 0x1f0; // USoundBase*
		constexpr auto InstanceParameters = 0x1f8; // TArray<FAudioComponentParam>
		constexpr auto SoundClassOverride = 0x208; // USoundClass*
		constexpr auto bAutoDestroy = 0x210; // char : 1
		constexpr auto bStopWhenOwnerDestroyed = 0x210; // char : 1
		constexpr auto bShouldRemainActiveIfDropped = 0x210; // char : 1
		constexpr auto bAllowSpatialization = 0x210; // char : 1
		constexpr auto bOverrideAttenuation = 0x210; // char : 1
		constexpr auto bOverrideSubtitlePriority = 0x210; // char : 1
		constexpr auto bIsUISound = 0x210; // char : 1
		constexpr auto bEnableLowPassFilter = 0x210; // char : 1
		constexpr auto bOverridePriority = 0x211; // char : 1
		constexpr auto bSuppressSubtitles = 0x211; // char : 1
		constexpr auto bAutoManageAttachment = 0x212; // char : 1
		constexpr auto AudioComponentUserID = 0x218; // FName
		constexpr auto PitchModulationMin = 0x220; // float
		constexpr auto PitchModulationMax = 0x224; // float
		constexpr auto VolumeModulationMin = 0x228; // float
		constexpr auto VolumeModulationMax = 0x22c; // float
		constexpr auto VolumeMultiplier = 0x230; // float
		constexpr auto EnvelopeFollowerAttackTime = 0x234; // int32_t
		constexpr auto EnvelopeFollowerReleaseTime = 0x238; // int32_t
		constexpr auto Priority = 0x23c; // float
		constexpr auto SubtitlePriority = 0x240; // float
		constexpr auto SourceEffectChain = 0x248; // USoundEffectSourcePresetChain*
		constexpr auto PitchMultiplier = 0x250; // float
		constexpr auto LowPassFilterFrequency = 0x254; // float
		constexpr auto AttenuationSettings = 0x260; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x268; // FSoundAttenuationSettings
		constexpr auto ConcurrencySettings = 0x608; // USoundConcurrency*
		constexpr auto ConcurrencySet = 0x610; // TSet<USoundConcurrency*>
		constexpr auto AutoAttachLocationRule = 0x66c; // EAttachmentRule
		constexpr auto AutoAttachRotationRule = 0x66d; // EAttachmentRule
		constexpr auto AutoAttachScaleRule = 0x66e; // EAttachmentRule
		constexpr auto OnAudioFinished = 0x670; // FMulticastInlineDelegate
		constexpr auto OnAudioPlaybackPercent = 0x698; // FMulticastInlineDelegate
		constexpr auto OnAudioSingleEnvelopeValue = 0x6c0; // FMulticastInlineDelegate
		constexpr auto OnAudioMultiEnvelopeValue = 0x6e8; // FMulticastInlineDelegate
		constexpr auto Modulation = 0x710; // FSoundModulation
		constexpr auto OnQueueSubtitles = 0x720; // FDelegate
		constexpr auto AutoAttachParent = 0x730; // TWeakObjectPtr<USceneComponent>
		constexpr auto AutoAttachSocketName = 0x738; // FName
	}

	namespace n_UMaterialExpressionLandscapeLayerBlend {
		constexpr auto Layers = 0x40; // TArray<FLayerBlendInput>
		constexpr auto ExpressionGUID = 0x50; // FGuid
	}

	namespace n_UCineCameraComponent {
		constexpr auto FilmbackSettings = 0x7b0; // FCameraFilmbackSettings
		constexpr auto Filmback = 0x7bc; // FCameraFilmbackSettings
		constexpr auto LensSettings = 0x7c8; // FCameraLensSettings
		constexpr auto FocusSettings = 0x7e0; // FCameraFocusSettings
		constexpr auto CurrentFocalLength = 0x838; // float
		constexpr auto CurrentAperture = 0x83c; // float
		constexpr auto CurrentFocusDistance = 0x840; // float
		constexpr auto FilmbackPresets = 0x850; // TArray<FNamedFilmbackPreset>
		constexpr auto LensPresets = 0x860; // TArray<FNamedLensPreset>
		constexpr auto DefaultFilmbackPresetName = 0x870; // FString
		constexpr auto DefaultFilmbackPreset = 0x880; // FString
		constexpr auto DefaultLensPresetName = 0x890; // FString
		constexpr auto DefaultLensFocalLength = 0x8a0; // float
		constexpr auto DefaultLensFStop = 0x8a4; // float
	}

	namespace n_UEnvQuery {
		constexpr auto QueryName = 0x30; // FName
		constexpr auto Options = 0x38; // TArray<UEnvQueryOption*>
	}

	namespace n_UDirectionalLightComponent {
		constexpr auto ShadowCascadeBiasDistribution = 0x320; // float
		constexpr auto bEnableLightShaftOcclusion = 0x324; // char : 1
		constexpr auto OcclusionMaskDarkness = 0x328; // float
		constexpr auto OcclusionDepthRange = 0x32c; // float
		constexpr auto LightShaftOverrideDirection = 0x330; // FVector
		constexpr auto WholeSceneDynamicShadowRadius = 0x33c; // float
		constexpr auto DynamicShadowDistanceMovableLight = 0x340; // float
		constexpr auto DynamicShadowDistanceStationaryLight = 0x344; // float
		constexpr auto DynamicShadowCascades = 0x348; // int32_t
		constexpr auto CascadeDistributionExponent = 0x34c; // float
		constexpr auto CascadeTransitionFraction = 0x350; // float
		constexpr auto ShadowDistanceFadeoutFraction = 0x354; // float
		constexpr auto bUseInsetShadowsForMovableObjects = 0x358; // char : 1
		constexpr auto FarShadowCascadeCount = 0x35c; // int32_t
		constexpr auto FarShadowDistance = 0x360; // float
		constexpr auto DistanceFieldShadowDistance = 0x364; // float
		constexpr auto LightSourceAngle = 0x368; // float
		constexpr auto LightSourceSoftAngle = 0x36c; // float
		constexpr auto TraceDistance = 0x370; // float
		constexpr auto LightmassSettings = 0x374; // FLightmassDirectionalLightSettings
		constexpr auto bCastModulatedShadows = 0x384; // char : 1
		constexpr auto ModulatedShadowColor = 0x388; // FColor
		constexpr auto ShadowAmount = 0x38c; // float
		constexpr auto bUsedAsAtmosphereSunLight = 0x390; // char : 1
		constexpr auto AtmosphereSunLightIndex = 0x394; // int32_t
	}

	namespace n_UM3SuspensionComponent {
		constexpr auto bEnabled = 0xb0; // char : 1
		constexpr auto LeftSideSetup = 0xb4; // FM3SuspensionSideSetup
		constexpr auto RightSideSetup = 0x114; // FM3SuspensionSideSetup
		constexpr auto BogieArmLength = 0x174; // float
		constexpr auto BogieWheelRadius = 0x178; // float
		constexpr auto BogieFrameHalfLength = 0x17c; // float
	}

	namespace n_UTextBlockWidgetStyle {
		constexpr auto TextBlockStyle = 0x30; // FTextBlockStyle
	}

	namespace n_UClientBotInputComponent {
		constexpr auto m_processors = 0x138; // TArray<UClientBotProcessor*>
	}

	namespace n_UHLLCommanderUISubCategory {
		constexpr auto SubCategoryTitle = 0x230; // FText
		constexpr auto ItemVBox = 0x248; // UVerticalBox*
		constexpr auto CategoryHeading = 0x250; // UTextBlock*
	}

	namespace n_UBTTask_RunBehavior {
		constexpr auto BehaviorAsset = 0x70; // UBehaviorTree*
	}

	namespace n_UBTTask_PlaySound {
		constexpr auto SoundToPlay = 0x70; // USoundCue*
	}

	namespace n_UGridSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
		constexpr auto Row = 0x4c; // int32_t
		constexpr auto RowSpan = 0x50; // int32_t
		constexpr auto Column = 0x54; // int32_t
		constexpr auto ColumnSpan = 0x58; // int32_t
		constexpr auto Layer = 0x5c; // int32_t
		constexpr auto Nudge = 0x60; // FVector2D
	}

	namespace n_UWBP_ResolutionComboBox_C {
		constexpr auto UberGraphFrame = 0x240; // FPointerToUberGraphFrame
		constexpr auto ScreenResolutionComboBox = 0x248; // UComboBoxString*
		constexpr auto OnSelectionChanged = 0x250; // FMulticastInlineDelegate
	}

	namespace n_UButton {
		constexpr auto Style = 0x120; // USlateWidgetStyleAsset*
		constexpr auto WidgetStyle = 0x128; // FButtonStyle
		constexpr auto ColorAndOpacity = 0x3a0; // FLinearColor
		constexpr auto BackgroundColor = 0x3b0; // FLinearColor
		constexpr auto ClickMethod = 0x3c0; // EButtonClickMethod
		constexpr auto TouchMethod = 0x3c1; // EButtonTouchMethod
		constexpr auto PressMethod = 0x3c2; // EButtonPressMethod
		constexpr auto IsFocusable = 0x3c3; // bool
		constexpr auto OnClicked = 0x3c8; // FMulticastInlineDelegate
		constexpr auto OnPressed = 0x3d8; // FMulticastInlineDelegate
		constexpr auto OnReleased = 0x3e8; // FMulticastInlineDelegate
		constexpr auto OnHovered = 0x3f8; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x408; // FMulticastInlineDelegate
		constexpr auto OnDoubleClicked = 0x418; // FMulticastInlineDelegate
	}

	namespace n_UConsoleSettings {
		constexpr auto MaxScrollbackSize = 0x28; // int32_t
		constexpr auto ManualAutoCompleteList = 0x30; // TArray<FAutoCompleteCommand>
		constexpr auto AutoCompleteMapPaths = 0x40; // TArray<FString>
		constexpr auto BackgroundOpacityPercentage = 0x50; // float
		constexpr auto bOrderTopToBottom = 0x54; // bool
		constexpr auto bDisplayHelpInAutoComplete = 0x55; // bool
		constexpr auto InputColor = 0x58; // FColor
		constexpr auto HistoryColor = 0x5c; // FColor
		constexpr auto AutoCompleteCommandColor = 0x60; // FColor
		constexpr auto AutoCompleteCVarColor = 0x64; // FColor
		constexpr auto AutoCompleteFadedColor = 0x68; // FColor
	}

	namespace n_USoundNodeModulatorContinuous {
		constexpr auto PitchModulationParams = 0x48; // FModulatorContinuousParams
		constexpr auto VolumeModulationParams = 0x68; // FModulatorContinuousParams
	}

	namespace n_UHLLSeatHealthStatusItem {
		constexpr auto Category = 0x230; // EHLLArmourCategory
		constexpr auto Icon = 0x238; // UImage*
		constexpr auto RadialProgress = 0x240; // UImage*
		constexpr auto LinearProgress = 0x248; // UProgressBar*
		constexpr auto Colour_Min = 0x250; // FLinearColor
		constexpr auto Colour_Max = 0x260; // FLinearColor
	}

	namespace n_UArmy {
		constexpr auto CommanderRole = 0x230; // UArmyCommanderRole*
		constexpr auto Infantry = 0x238; // UPlatoonList*
		constexpr auto Armor = 0x240; // UPlatoonList*
		constexpr auto Recon = 0x248; // UPlatoonList*
		constexpr auto bReadOnly = 0x250; // char : 1
	}

	namespace n_UFoliageInstancedStaticMeshComponent {
		constexpr auto OnInstanceTakePointDamage = 0x638; // FMulticastInlineDelegate
		constexpr auto OnInstanceTakeRadialDamage = 0x648; // FMulticastInlineDelegate
		constexpr auto GenerationGuid = 0x658; // FGuid
	}

	namespace n_UClothConfigNv {
		constexpr auto ClothingWindMethod = 0x28; // EClothingWindMethodNv
		constexpr auto VerticalConstraint = 0x2c; // FClothConstraintSetupNv
		constexpr auto HorizontalConstraint = 0x3c; // FClothConstraintSetupNv
		constexpr auto BendConstraint = 0x4c; // FClothConstraintSetupNv
		constexpr auto ShearConstraint = 0x5c; // FClothConstraintSetupNv
		constexpr auto SelfCollisionRadius = 0x6c; // float
		constexpr auto SelfCollisionStiffness = 0x70; // float
		constexpr auto SelfCollisionCullScale = 0x74; // float
		constexpr auto Damping = 0x78; // FVector
		constexpr auto Friction = 0x84; // float
		constexpr auto WindDragCoefficient = 0x88; // float
		constexpr auto WindLiftCoefficient = 0x8c; // float
		constexpr auto LinearDrag = 0x90; // FVector
		constexpr auto AngularDrag = 0x9c; // FVector
		constexpr auto LinearInertiaScale = 0xa8; // FVector
		constexpr auto AngularInertiaScale = 0xb4; // FVector
		constexpr auto CentrifugalInertiaScale = 0xc0; // FVector
		constexpr auto SolverFrequency = 0xcc; // float
		constexpr auto StiffnessFrequency = 0xd0; // float
		constexpr auto GravityScale = 0xd4; // float
		constexpr auto GravityOverride = 0xd8; // FVector
		constexpr auto bUseGravityOverride = 0xe4; // bool
		constexpr auto TetherStiffness = 0xe8; // float
		constexpr auto TetherLimit = 0xec; // float
		constexpr auto CollisionThickness = 0xf0; // float
		constexpr auto AnimDriveSpringStiffness = 0xf4; // float
		constexpr auto AnimDriveDamperStiffness = 0xf8; // float
		constexpr auto WindMethod = 0xfc; // EClothingWindMethod_Legacy
		constexpr auto VerticalConstraintConfig = 0x100; // FClothConstraintSetup_Legacy
		constexpr auto HorizontalConstraintConfig = 0x110; // FClothConstraintSetup_Legacy
		constexpr auto BendConstraintConfig = 0x120; // FClothConstraintSetup_Legacy
		constexpr auto ShearConstraintConfig = 0x130; // FClothConstraintSetup_Legacy
	}

	namespace n_UHLLGunnerUI_HowitzerRangeItem {
		constexpr auto RangeText = 0x230; // UTextBlock*
		constexpr auto ElevationText = 0x238; // UTextBlock*
	}

	namespace n_UParticleModuleVectorFieldLocal {
		constexpr auto VectorField = 0x30; // UVectorField*
		constexpr auto RelativeTranslation = 0x38; // FVector
		constexpr auto RelativeRotation = 0x44; // FRotator
		constexpr auto RelativeScale3D = 0x50; // FVector
		constexpr auto Intensity = 0x5c; // float
		constexpr auto Tightness = 0x60; // float
		constexpr auto bIgnoreComponentTransform = 0x64; // char : 1
		constexpr auto bTileX = 0x64; // char : 1
		constexpr auto bTileY = 0x64; // char : 1
		constexpr auto bTileZ = 0x64; // char : 1
		constexpr auto bUseFixDT = 0x64; // char : 1
	}

	namespace n_ULandscapeSettings {
		constexpr auto MaxNumberOfLayers = 0x38; // int32_t
	}

	namespace n_UHLLBallisticsComponent {
		constexpr auto ProjectileClass = 0xb0; // UHLLProjectile*
		constexpr auto ProjectileParticleInterval = 0xb8; // char
		constexpr auto bPendingNulls = 0xc0; // bool
		constexpr auto bPendingHits = 0xc1; // bool
		constexpr auto PendingBatchedNulls = 0xc8; // FBallisticBatchedNulls
		constexpr auto PendingBatchedHits = 0xd8; // FBallisticBatchedHits
	}

	namespace n_UPendingPlayerDeployment {
		constexpr auto Spawn = 0x30; // TScriptInterface<IDynamicSpawnInterface>
		constexpr auto Player = 0x40; // AShooterPlayerController*
	}

	namespace n_UWGT_RadialInventory_Segment_C {
		constexpr auto UberGraphFrame = 0x2d0; // FPointerToUberGraphFrame
		constexpr auto IconSizer = 0x2d8; // USizeBox*
		constexpr auto SegmentBG = 0x2e0; // UImage*
		constexpr auto SegmentOffColour = 0x2e8; // FLinearColor
		constexpr auto SegmentColour = 0x2f8; // FLinearColor
		constexpr auto DynMatSegmentBG = 0x308; // UMaterialInstanceDynamic*
	}

	namespace n_UBPW_PlatoonInvitationDialogPlayer_V2_C {
		constexpr auto UberGraphFrame = 0x248; // FPointerToUberGraphFrame
		constexpr auto ParentPlatoonInvitationDialog = 0x250; // UBPW_PlatoonInvitationDialog_V2_C*
		constexpr auto StyleFocused = 0x258; // FCheckBoxStyle
		constexpr auto StyleNotFocused = 0x7d8; // FCheckBoxStyle
	}

	namespace n_ULandscapeSplineSegment {
		constexpr auto Connections = 0x28; // FLandscapeSplineSegmentConnection [0x2]
		constexpr auto SplineInfo = 0x58; // FInterpCurveVector
		constexpr auto Points = 0x70; // TArray<FLandscapeSplineInterpPoint>
		constexpr auto Bounds = 0x80; // FBox
		constexpr auto LocalMeshComponents = 0xa0; // TArray<USplineMeshComponent*>
	}

	namespace n_UStaticMesh {
		constexpr auto MinLOD = 0x60; // FPerPlatformInt
		constexpr auto LpvBiasMultiplier = 0x64; // float
		constexpr auto StaticMaterials = 0x68; // TArray<FStaticMaterial>
		constexpr auto LightmapUVDensity = 0x78; // float
		constexpr auto LightMapResolution = 0x7c; // int32_t
		constexpr auto LightMapCoordinateIndex = 0x80; // int32_t
		constexpr auto DistanceFieldSelfShadowBias = 0x84; // float
		constexpr auto BodySetup = 0x88; // UBodySetup*
		constexpr auto LODForCollision = 0x90; // int32_t
		constexpr auto bGenerateMeshDistanceField = 0x94; // char : 1
		constexpr auto bStripComplexCollisionForConsole = 0x94; // char : 1
		constexpr auto bHasNavigationData = 0x94; // char : 1
		constexpr auto bSupportUniformlyDistributedSampling = 0x94; // char : 1
		constexpr auto bSupportPhysicalMaterialMasks = 0x94; // char : 1
		constexpr auto bIsBuiltAtRuntime = 0x94; // char : 1
		constexpr auto bAllowCPUAccess = 0x94; // char : 1
		constexpr auto bSupportGpuUniformlyDistributedSampling = 0x95; // char : 1
		constexpr auto Sockets = 0xb8; // TArray<UStaticMeshSocket*>
		constexpr auto PositiveBoundsExtension = 0xd8; // FVector
		constexpr auto NegativeBoundsExtension = 0xe4; // FVector
		constexpr auto ExtendedBounds = 0xf0; // FBoxSphereBounds
		constexpr auto ElementToIgnoreForTexFactor = 0x10c; // int32_t
		constexpr auto AssetUserData = 0x110; // TArray<UAssetUserData*>
		constexpr auto EditableMesh = 0x128; // UObject*
		constexpr auto NavCollision = 0x130; // UNavCollisionBase*
	}

	namespace n_UHLLMapIconBase {
		constexpr auto MapIconScaleBox = 0x230; // UScaleBox*
		constexpr auto AssignedData = 0x238; // AHLLMapDataBase*
		constexpr auto IconAlignment = 0x240; // FVector2D
		constexpr auto IconPriority = 0x248; // int32_t
		constexpr auto ZoomIconScale = 0x250; // FRuntimeFloatCurve
		constexpr auto FilterType = 0x2d8; // EMapIconFilter
		constexpr auto bHighlightOnHover = 0x2d9; // char : 1
		constexpr auto bAllowHighlightLock = 0x2d9; // char : 1
		constexpr auto bAllowMapInteraction = 0x31c; // char : 1
		constexpr auto TooltipClass = 0x320; // UHLLTooltipBase*
		constexpr auto TooltipZOrder = 0x328; // int32_t
		constexpr auto ActiveTooltip = 0x330; // UHLLTooltipBase*
		constexpr auto HoverButton = 0x338; // UMapIconButton*
		constexpr auto IconImage = 0x340; // UImage*
		constexpr auto OwningMapWidget = 0x358; // UHLLOverviewMap*
	}

	namespace n_UParticleModuleLifetime_Seeded {
		constexpr auto RandomSeedInfo = 0x60; // FParticleRandomSeedInfo
	}

	namespace n_UAnimBoneCompressionCodec {
		constexpr auto Description = 0x28; // FString
	}

	namespace n_UParticleModulePivotOffset {
		constexpr auto PivotOffset = 0x30; // FVector2D
	}

	namespace n_UAnimationSharingManager {
		constexpr auto Skeletons = 0x28; // TArray<USkeleton*>
		constexpr auto PerSkeletonData = 0x38; // TArray<UAnimSharingInstance*>
	}

	namespace n_UMaterialExpressionAbs {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UButtonSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UClothingAssetBase {
		constexpr auto ImportedFilePath = 0x28; // FString
		constexpr auto AssetGuid = 0x38; // FGuid
	}

	namespace n_UMaterialFunctionInstance {
		constexpr auto Parent = 0x40; // UMaterialFunctionInterface*
		constexpr auto Base = 0x48; // UMaterialFunctionInterface*
		constexpr auto ScalarParameterValues = 0x50; // TArray<FScalarParameterValue>
		constexpr auto VectorParameterValues = 0x60; // TArray<FVectorParameterValue>
		constexpr auto TextureParameterValues = 0x70; // TArray<FTextureParameterValue>
		constexpr auto FontParameterValues = 0x80; // TArray<FFontParameterValue>
		constexpr auto StaticSwitchParameterValues = 0x90; // TArray<FStaticSwitchParameter>
		constexpr auto StaticComponentMaskParameterValues = 0xa0; // TArray<FStaticComponentMaskParameter>
		constexpr auto RuntimeVirtualTextureParameterValues = 0xb0; // TArray<FRuntimeVirtualTextureParameterValue>
	}

	namespace n_UMaterial {
		constexpr auto PhysMaterial = 0x88; // UPhysicalMaterial*
		constexpr auto PhysMaterialMask = 0x90; // UPhysicalMaterialMask*
		constexpr auto PhysicalMaterialMap = 0x98; // UPhysicalMaterial* [0x8]
		constexpr auto Metallic = 0xd8; // FScalarMaterialInput
		constexpr auto Specular = 0xec; // FScalarMaterialInput
		constexpr auto Anisotropy = 0x100; // FScalarMaterialInput
		constexpr auto Normal = 0x114; // FVectorMaterialInput
		constexpr auto Tangent = 0x128; // FVectorMaterialInput
		constexpr auto EmissiveColor = 0x13c; // FColorMaterialInput
		constexpr auto MaterialDomain = 0x150; // EMaterialDomain
		constexpr auto BlendMode = 0x151; // EBlendMode
		constexpr auto DecalBlendMode = 0x152; // EDecalBlendMode
		constexpr auto MaterialDecalResponse = 0x153; // EMaterialDecalResponse
		constexpr auto ShadingModel = 0x154; // EMaterialShadingModel
		constexpr auto bCastDynamicShadowAsMasked = 0x155; // char : 1
		constexpr auto ShadingModels = 0x156; // FMaterialShadingModelField
		constexpr auto OpacityMaskClipValue = 0x158; // float
		constexpr auto WorldPositionOffset = 0x15c; // FVectorMaterialInput
		constexpr auto Refraction = 0x170; // FScalarMaterialInput
		constexpr auto MaterialAttributes = 0x184; // FMaterialAttributesInput
		constexpr auto PixelDepthOffset = 0x19c; // FScalarMaterialInput
		constexpr auto ShadingModelFromMaterialExpression = 0x1b0; // FShadingModelMaterialInput
		constexpr auto bEnableSeparateTranslucency = 0x1c4; // char : 1
		constexpr auto bEnableResponsiveAA = 0x1c4; // char : 1
		constexpr auto bScreenSpaceReflections = 0x1c4; // char : 1
		constexpr auto bContactShadows = 0x1c4; // char : 1
		constexpr auto TwoSided = 0x1c4; // char : 1
		constexpr auto DitheredLODTransition = 0x1c4; // char : 1
		constexpr auto DitherOpacityMask = 0x1c4; // char : 1
		constexpr auto bAllowNegativeEmissiveColor = 0x1c4; // char : 1
		constexpr auto TranslucencyLightingMode = 0x1c5; // ETranslucencyLightingMode
		constexpr auto bEnableMobileSeparateTranslucency = 0x1c6; // char : 1
		constexpr auto NumCustomizedUVs = 0x1c8; // int32_t
		constexpr auto TranslucencyDirectionalLightingIntensity = 0x1cc; // float
		constexpr auto TranslucentShadowDensityScale = 0x1d0; // float
		constexpr auto TranslucentSelfShadowDensityScale = 0x1d4; // float
		constexpr auto TranslucentSelfShadowSecondDensityScale = 0x1d8; // float
		constexpr auto TranslucentSelfShadowSecondOpacity = 0x1dc; // float
		constexpr auto TranslucentBackscatteringExponent = 0x1e0; // float
		constexpr auto TranslucentMultipleScatteringExtinction = 0x1e4; // FLinearColor
		constexpr auto TranslucentShadowStartOffset = 0x1f4; // float
		constexpr auto bDisableDepthTest = 0x1f8; // char : 1
		constexpr auto bWriteOnlyAlpha = 0x1f8; // char : 1
		constexpr auto bGenerateSphericalParticleNormals = 0x1f8; // char : 1
		constexpr auto bTangentSpaceNormal = 0x1f8; // char : 1
		constexpr auto bUseEmissiveForDynamicAreaLighting = 0x1f8; // char : 1
		constexpr auto bBlockGI = 0x1f8; // char : 1
		constexpr auto bUsedAsSpecialEngineMaterial = 0x1f8; // char : 1
		constexpr auto bUsedWithSkeletalMesh = 0x1f8; // char : 1
		constexpr auto bUsedWithEditorCompositing = 0x1f9; // char : 1
		constexpr auto bUsedWithParticleSprites = 0x1f9; // char : 1
		constexpr auto bUsedWithBeamTrails = 0x1f9; // char : 1
		constexpr auto bUsedWithMeshParticles = 0x1f9; // char : 1
		constexpr auto bUsedWithNiagaraSprites = 0x1f9; // char : 1
		constexpr auto bUsedWithNiagaraRibbons = 0x1f9; // char : 1
		constexpr auto bUsedWithNiagaraMeshParticles = 0x1f9; // char : 1
		constexpr auto bUsedWithGeometryCache = 0x1f9; // char : 1
		constexpr auto bUsedWithStaticLighting = 0x1fa; // char : 1
		constexpr auto bUsedWithMorphTargets = 0x1fa; // char : 1
		constexpr auto bUsedWithSplineMeshes = 0x1fa; // char : 1
		constexpr auto bUsedWithInstancedStaticMeshes = 0x1fa; // char : 1
		constexpr auto bUsedWithGeometryCollections = 0x1fa; // char : 1
		constexpr auto bUsesDistortion = 0x1fa; // char : 1
		constexpr auto bUsedWithClothing = 0x1fa; // char : 1
		constexpr auto bUsedWithWater = 0x1fc; // char : 1
		constexpr auto bUsedWithHairStrands = 0x1fc; // char : 1
		constexpr auto bUsedWithLidarPointCloud = 0x1fc; // char : 1
		constexpr auto bUsedWithUI = 0x200; // char : 1
		constexpr auto bAutomaticallySetUsageInEditor = 0x200; // char : 1
		constexpr auto bFullyRough = 0x200; // char : 1
		constexpr auto bUseFullPrecision = 0x200; // char : 1
		constexpr auto bUseLightmapDirectionality = 0x200; // char : 1
		constexpr auto bForwardRenderUsePreintegratedGFForSimpleIBL = 0x204; // char : 1
		constexpr auto bUseHQForwardReflections = 0x208; // char : 1
		constexpr auto bUsePlanarForwardReflections = 0x208; // char : 1
		constexpr auto bNormalCurvatureToRoughness = 0x208; // char : 1
		constexpr auto D3D11TessellationMode = 0x209; // EMaterialTessellationMode
		constexpr auto bEnableCrackFreeDisplacement = 0x20a; // char : 1
		constexpr auto bEnableAdaptiveTessellation = 0x20a; // char : 1
		constexpr auto AllowTranslucentCustomDepthWrites = 0x20a; // char : 1
		constexpr auto Wireframe = 0x20a; // char : 1
		constexpr auto bCanMaskedBeAssumedOpaque = 0x20a; // char : 1
		constexpr auto bIsMasked = 0x20a; // char : 1
		constexpr auto bIsPreviewMaterial = 0x20a; // char : 1
		constexpr auto bIsFunctionPreviewMaterial = 0x20a; // char : 1
		constexpr auto bUseMaterialAttributes = 0x20b; // char : 1
		constexpr auto bCastRayTracedShadows = 0x20b; // char : 1
		constexpr auto bUseTranslucencyVertexFog = 0x20b; // char : 1
		constexpr auto bIsSky = 0x20b; // char : 1
		constexpr auto bComputeFogPerPixel = 0x20b; // char : 1
		constexpr auto bOutputTranslucentVelocity = 0x20b; // char : 1
		constexpr auto bAllowDevelopmentShaderCompile = 0x20b; // char : 1
		constexpr auto bIsMaterialEditorStatsMaterial = 0x20b; // char : 1
		constexpr auto BlendableLocation = 0x20c; // EBlendableLocation
		constexpr auto BlendableOutputAlpha = 0x20d; // char : 1
		constexpr auto bEnableStencilTest = 0x20d; // char : 1
		constexpr auto StencilCompare = 0x20e; // EMaterialStencilCompare
		constexpr auto StencilRefValue = 0x20f; // char
		constexpr auto RefractionMode = 0x210; // ERefractionMode
		constexpr auto BlendablePriority = 0x214; // int32_t
		constexpr auto bIsBlendable = 0x218; // char : 1
		constexpr auto UsageFlagWarnings = 0x21c; // uint32_t
		constexpr auto RefractionDepthBias = 0x220; // float
		constexpr auto StateId = 0x224; // FGuid
		constexpr auto MaxDisplacement = 0x234; // float
		constexpr auto CachedExpressionData = 0x2c0; // FMaterialCachedExpressionData
	}

	namespace n_UMaterialExpressionBlackBody {
		constexpr auto Temp = 0x40; // FExpressionInput
	}

	namespace n_USoundNodeDistanceDelay {
		constexpr auto SpeedOfSound = 0x48; // float
		constexpr auto BypassDistance = 0x4c; // float
		constexpr auto MaxDelay = 0x50; // float
	}

	namespace n_UGameplayMessages_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto MessageList = 0x238; // UVerticalBox*
	}

	namespace n_UHLLAnimNotify_Footstep {
		constexpr auto Foot = 0x38; // EFoot
		constexpr auto bIsFirstPerson = 0x39; // char : 1
	}

	namespace n_UMaterialInterface {
		constexpr auto SubsurfaceProfile = 0x38; // USubsurfaceProfile*
		constexpr auto LightmassSettings = 0x50; // FLightmassMaterialInterfaceSettings
		constexpr auto TextureStreamingData = 0x60; // TArray<FMaterialTextureInfo>
		constexpr auto AssetUserData = 0x70; // TArray<UAssetUserData*>
	}

	namespace n_UARGetCandidateObjectAsyncTaskBlueprintProxy {
		constexpr auto OnSuccess = 0x50; // FMulticastInlineDelegate
		constexpr auto OnFailed = 0x60; // FMulticastInlineDelegate
	}

	namespace n_ADynamicSpawn {
		constexpr auto SpawnGatherParams = 0x288; // FDynamicSpawnGatherParams
		constexpr auto WaveIntervalSeconds = 0x29c; // float
		constexpr auto m_owningPlatoon = 0x2a0; // AHLLPlatoon*
		constexpr auto m_OwningTeam = 0x2a8; // ETeam
		constexpr auto m_nextWaveTime = 0x2ac; // float
		constexpr auto DismantleTime = 0x2b0; // float
		constexpr auto DynamicSpawnType = 0x2b4; // EDynamicSpawnType
		constexpr auto DamageFilterType = 0x2b5; // EHLLDamageFilterType
		constexpr auto UnitSpawnOnScoreAction = 0x2b8; // FName
		constexpr auto TeamSpawnOnScoreAction = 0x2c0; // FName
		constexpr auto DisplayName = 0x2c8; // FText
		constexpr auto DestroyedByEnemyManpowerPenalty = 0x2e0; // int32_t
		constexpr auto MinEnemyPlayersToOverrun = 0x2e4; // int32_t
		constexpr auto EnemyDestroyedSound = 0x2e8; // USoundBase*
		constexpr auto EnemyDestroyedMessage = 0x2f0; // FText
		constexpr auto OverrunSphereRadius = 0x308; // float
		constexpr auto OverrunQuery = 0x30c; // FCollisionProfileName
		constexpr auto SpawnedByPlayer = 0x340; // AShooterPlayerState*
		constexpr auto DummyRoot = 0x348; // USceneComponent*
		constexpr auto MeshComponent = 0x350; // UStaticMeshComponent*
		constexpr auto LoopingAC = 0x358; // UAudioComponent*
		constexpr auto MapComponent = 0x360; // UHLLMapComponent*
		constexpr auto IndicatorComponent = 0x368; // UHLLIndicatorComponent*
		constexpr auto GhostBlockerComponent = 0x370; // UBoxComponent*
		constexpr auto HealthComponent = 0x378; // UHLLSimpleHealthComponent*
		constexpr auto GhostBarrierInfo = 0x380; // FRepGhostBarrier
		constexpr auto NearbySpawnEnemyDetection = 0x390; // UNearbySpawnEnemyDetection*
		constexpr auto bDetectNearbyEnemies = 0x3b0; // char : 1
		constexpr auto EnemyDetectionDistance = 0x3b4; // float
		constexpr auto EnemyBlockingDistance = 0x3b8; // float
		constexpr auto NonFriendlySectorBlockingDistance = 0x3bc; // float
		constexpr auto SpawnBlockingCooldown = 0x3c0; // float
		constexpr auto bCanBeRemovedByCommander = 0x3c4; // char : 1
		constexpr auto OwnerMessageWhenRemoved = 0x3c8; // FText
		constexpr auto AbilityRemovedSound = 0x3e0; // USoundBase*
		constexpr auto HintWhenSpawnedOn = 0x3e8; // EHint
	}

	namespace n_UDataAsset {
		constexpr auto NativeClass = 0x28; // UDataAsset*
	}

	namespace n_UHLLMarkers_MapMenu {
		constexpr auto ItemClass = 0x248; // UHLLMarkers_MapMenuItem*
		constexpr auto Items = 0x250; // TArray<UHLLMarkers_MapMenuItem*>
		constexpr auto Options = 0x260; // UVerticalBox*
	}

	namespace n_ASdKfz251Halftrack {
		constexpr auto Suspension = 0x550; // USuspensionsComponent*
		constexpr auto HalftrackWheels = 0x558; // UHalftrackWheelsComponent*
		constexpr auto Tracks = 0x560; // UTracksComponent*
	}

	namespace n_USearchButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto btn = 0x238; // UButton*
		constexpr auto SB_ROOT = 0x240; // USizeBox*
		constexpr auto txt_btn_Label = 0x248; // UTextBlock*
		constexpr auto ButtonLabel = 0x250; // FText
		constexpr auto Clicked = 0x268; // FMulticastInlineDelegate
		constexpr auto CustomSize = 0x278; // bool
		constexpr auto Height = 0x27c; // float
		constexpr auto Width = 0x280; // float
		constexpr auto Uppercase = 0x284; // bool
		constexpr auto Font = 0x288; // FSlateFontInfo
		constexpr auto FontColor = 0x2d8; // FSlateColor
		constexpr auto ButtonStyle = 0x300; // FButtonStyle
		constexpr auto FontColorHover = 0x578; // FSlateColor
		constexpr auto Hovered = 0x5a0; // FMulticastInlineDelegate
		constexpr auto Unhovered = 0x5b0; // FMulticastInlineDelegate
		constexpr auto FocusedButtonStyle = 0x5c0; // FButtonStyle
	}

	namespace n_UBillboardComponent {
		constexpr auto Sprite = 0x410; // UTexture2D*
		constexpr auto bIsScreenSizeScaled = 0x418; // char : 1
		constexpr auto ScreenSize = 0x41c; // float
		constexpr auto U = 0x420; // float
		constexpr auto UL = 0x424; // float
		constexpr auto V = 0x428; // float
		constexpr auto VL = 0x42c; // float
	}

	namespace n_UHLLRoundSummaryPlayer {
		constexpr auto bIsLocalPlayer = 0x230; // bool
		constexpr auto bHasFocus = 0x232; // bool
		constexpr auto RootBorder = 0x248; // UBorder*
		constexpr auto PlayerName = 0x250; // UTextBlock*
		constexpr auto PlayerClan = 0x258; // UTextBlock*
		constexpr auto PlayerIcon = 0x260; // UImage*
		constexpr auto RankIcon = 0x268; // UImage*
		constexpr auto RankIconContainer = 0x270; // UPanelWidget*
		constexpr auto PlayerLevel = 0x278; // UTextBlock*
		constexpr auto PingValue = 0x280; // UTextBlock*
		constexpr auto CombatValue = 0x288; // UTextBlock*
		constexpr auto OffenseValue = 0x290; // UTextBlock*
		constexpr auto DefenseValue = 0x298; // UTextBlock*
		constexpr auto SupportValue = 0x2a0; // UTextBlock*
		constexpr auto CommendCount = 0x2a8; // UTextBlock*
		constexpr auto CommendButton = 0x2b0; // UButton*
		constexpr auto CommendIcon = 0x2b8; // UImage*
		constexpr auto MenuAnchor = 0x2c0; // UMenuAnchor*
		constexpr auto CommendationType = 0x2ca; // ECommendationTooltipType
		constexpr auto VoipIcon = 0x2d0; // UImage*
		constexpr auto AssignedPlayer = 0x2d8; // TWeakObjectPtr<AShooterPlayerState>
		constexpr auto KickIcon = 0x2e0; // UImage*
		constexpr auto VotingText = 0x2e8; // UTextBlock*
		constexpr auto KickTooltipText = 0x2f0; // FText
		constexpr auto MuteTooltipText = 0x308; // FText
		constexpr auto FriendWidget = 0x320; // UWidget*
	}

	namespace n_ATankSeatBase {
		constexpr auto bOnlyAllowArmourUnitsIn = 0x978; // char : 1
	}

	namespace n_USmoothNetworkedMovement {
		constexpr auto bInterpMovement = 0xb0; // char : 1
		constexpr auto bInterpRotation = 0xb0; // char : 1
		constexpr auto InterpLocationTime = 0xb4; // float
		constexpr auto InterpRotationTime = 0xb8; // float
		constexpr auto InterpLocationMaxLagDistance = 0xbc; // float
		constexpr auto InterpLocationSnapToTargetDistance = 0xc0; // float
		constexpr auto FinalLocationInterpSpeed = 0xc4; // float
		constexpr auto UpdatedComponent = 0xc8; // USceneComponent*
	}

	namespace n_UParticleSystem {
		constexpr auto UpdateTime_FPS = 0x30; // float
		constexpr auto UpdateTime_Delta = 0x34; // float
		constexpr auto WarmupTime = 0x38; // float
		constexpr auto WarmupTickRate = 0x3c; // float
		constexpr auto Emitters = 0x40; // TArray<UParticleEmitter*>
		constexpr auto PreviewComponent = 0x50; // UParticleSystemComponent*
		constexpr auto CurveEdSetup = 0x58; // UInterpCurveEdSetup*
		constexpr auto LODDistanceCheckTime = 0x60; // float
		constexpr auto MacroUVRadius = 0x64; // float
		constexpr auto LODDistances = 0x68; // TArray<float>
		constexpr auto LODSettings = 0x78; // TArray<FParticleSystemLOD>
		constexpr auto FixedRelativeBoundingBox = 0x88; // FBox
		constexpr auto SecondsBeforeInactive = 0xa4; // float
		constexpr auto Delay = 0xa8; // float
		constexpr auto DelayLow = 0xac; // float
		constexpr auto bOrientZAxisTowardCamera = 0xb0; // char : 1
		constexpr auto bUseFixedRelativeBoundingBox = 0xb0; // char : 1
		constexpr auto bShouldResetPeakCounts = 0xb0; // char : 1
		constexpr auto bHasPhysics = 0xb0; // char : 1
		constexpr auto bUseRealtimeThumbnail = 0xb0; // char : 1
		constexpr auto ThumbnailImageOutOfDate = 0xb0; // char : 1
		constexpr auto bUseDelayRange = 0xb1; // char : 1
		constexpr auto bAllowManagedTicking = 0xb1; // char : 1
		constexpr auto bAutoDeactivate = 0xb1; // char : 1
		constexpr auto bRegenerateLODDuplicate = 0xb1; // char : 1
		constexpr auto SystemUpdateMode = 0xb2; // EParticleSystemUpdateMode
		constexpr auto LODMethod = 0xb3; // ParticleSystemLODMethod
		constexpr auto InsignificantReaction = 0xb4; // EParticleSystemInsignificanceReaction
		constexpr auto OcclusionBoundsMethod = 0xb5; // EParticleSystemOcclusionBoundsMethod
		constexpr auto MaxSignificanceLevel = 0xb7; // EParticleSignificanceLevel
		constexpr auto MinTimeBetweenTicks = 0xb8; // uint32_t
		constexpr auto InsignificanceDelay = 0xbc; // float
		constexpr auto MacroUVPosition = 0xc0; // FVector
		constexpr auto CustomOcclusionBounds = 0xcc; // FBox
		constexpr auto SoloTracking = 0xe8; // TArray<FLODSoloTrack>
		constexpr auto NamedMaterialSlots = 0xf8; // TArray<FNamedEmitterMaterial>
	}

	namespace n_UHLLRoundSummaryProgression {
		constexpr auto XPItemClass = 0x230; // UHLLXPItem*
		constexpr auto XPItems = 0x238; // TArray<UHLLXPItem*>
		constexpr auto RoleProgressionClass = 0x248; // UHLLRoleProgressionItem*
		constexpr auto RoleProgressionItems = 0x250; // TArray<UHLLRoleProgressionItem*>
		constexpr auto MaxRoleItemCols = 0x260; // int32_t
		constexpr auto PromotedSound = 0x268; // FSlateSound
		constexpr auto PrestigeSound = 0x280; // FSlateSound
		constexpr auto ItemCountSound = 0x298; // FSlateSound
		constexpr auto ItemFinishedSound = 0x2b0; // FSlateSound
		constexpr auto FinishedCountingSound = 0x2c8; // FSlateSound
		constexpr auto Anim_Initial = 0x2e0; // UWidgetAnimation*
		constexpr auto Anim_Promoted = 0x2e8; // UWidgetAnimation*
		constexpr auto Anim_Prestige = 0x2f0; // UWidgetAnimation*
		constexpr auto Anim_XPComplete = 0x2f8; // UWidgetAnimation*
		constexpr auto CachedMatchEndInfo = 0x300; // FHLLMatchProgressionInfo
		constexpr auto TimePerItem = 0x340; // float
		constexpr auto ItemInterpSpeed = 0x344; // float
		constexpr auto DelayBetweenXPItems = 0x348; // float
		constexpr auto DelayBetweenRoleItems = 0x34c; // float
		constexpr auto DelayAfterCompletion = 0x350; // float
		constexpr auto RadialInitial = 0x358; // UImage*
		constexpr auto RadialNew = 0x360; // UImage*
		constexpr auto RankIcon = 0x368; // UImage*
		constexpr auto XPItemContainer = 0x370; // UVerticalBox*
		constexpr auto LevelText = 0x378; // UTextBlock*
		constexpr auto XPValue_Total = 0x380; // UTextBlock*
		constexpr auto RoleXPContainer = 0x388; // UUniformGridPanel*
		constexpr auto CounterLoopingAC = 0x390; // TWeakObjectPtr<UAudioComponent>
	}

	namespace n_UMaterialExpressionTime {
		constexpr auto bIgnorePause = 0x40; // char : 1
		constexpr auto bOverride_Period = 0x40; // char : 1
		constexpr auto Period = 0x44; // float
	}

	namespace n_UOptionButton_V2_C {
		constexpr auto UberGraphFrame = 0x240; // FPointerToUberGraphFrame
		constexpr auto FocusEffect = 0x248; // UImage*
		constexpr auto LeftArrow = 0x250; // UImage*
		constexpr auto LeftButton = 0x258; // UButton*
		constexpr auto LeftFocusedArrow = 0x260; // UImage*
		constexpr auto LeftOverlay = 0x268; // UOverlay*
		constexpr auto LeftShoulder = 0x270; // UImage*
		constexpr auto OptionButton = 0x278; // UButton*
		constexpr auto OptionSlider = 0x280; // USlider*
		constexpr auto OptionTextBlock = 0x288; // UTextBlock*
		constexpr auto RightArrow = 0x290; // UImage*
		constexpr auto RightButton = 0x298; // UButton*
		constexpr auto RightFocusedArrow = 0x2a0; // UImage*
		constexpr auto RightOverlay = 0x2a8; // UOverlay*
		constexpr auto RightShoulder = 0x2b0; // UImage*
		constexpr auto Text = 0x2b8; // FText
		constexpr auto Type = 0x2d0; // EOptionMenuItemType
		constexpr auto Value = 0x2d4; // int32_t
		constexpr auto NormalTextColor = 0x2d8; // FSlateColor
		constexpr auto HoveredTextColor = 0x300; // FSlateColor
		constexpr auto OnClicked = 0x328; // FMulticastInlineDelegate
		constexpr auto InitialButtonStyle = 0x338; // FButtonStyle
		constexpr auto CustomOptions = 0x5b0; // TArray<FText>
		constexpr auto CustomMaxValue = 0x5c0; // int32_t
		constexpr auto FocusedButtonStyle = 0x5c8; // FButtonStyle
		constexpr auto MinValue = 0x840; // int32_t
		constexpr auto bHasArrows = 0x844; // bool
		constexpr auto SliderValue = 0x848; // float
		constexpr auto bIncreaseButtonSize = 0x84c; // bool
		constexpr auto bHasShoulderButtons = 0x84d; // bool
		constexpr auto OnCreateSelectButton = 0x850; // FMulticastInlineDelegate
	}

	namespace n_UBPW_PlatoonList_V2_C {
		constexpr auto UberGraphFrame = 0x2a8; // FPointerToUberGraphFrame
		constexpr auto HorizontalBox_1 = 0x2b0; // UHorizontalBox*
		constexpr auto VerticalBox_1 = 0x2b8; // UVerticalBox*
		constexpr auto CreateUnit = 0x2c0; // FMulticastInlineDelegate
		constexpr auto wTooltip = 0x2d0; // UW_HoverToolTip_C*
		constexpr auto Tooltip = 0x2d8; // FText
		constexpr auto DeploymentScreen = 0x2f0; // UDeploymentScreen_V2_C*
		constexpr auto PlatoonContainer = 0x2f8; // UVerticalBox*
		constexpr auto CreateUnitButton = 0x300; // UbtnSimple_V2_C*
		constexpr auto NumberOfPlatoons = 0x308; // int32_t
		constexpr auto NumberOfPlatoonMembers = 0x30c; // int32_t
		constexpr auto CurrentNumberOfPlayers = 0x310; // int32_t
		constexpr auto PrevFocusedPlatoon = 0x314; // int32_t
	}

	namespace n_UMaterialExpressionTransformPosition {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto TransformSourceType = 0x54; // EMaterialPositionTransformSource
		constexpr auto TransformType = 0x55; // EMaterialPositionTransformSource
	}

	namespace n_UTextureRenderTargetCube {
		constexpr auto SizeX = 0xc0; // int32_t
		constexpr auto ClearColor = 0xc4; // FLinearColor
		constexpr auto OverrideFormat = 0xd4; // EPixelFormat
		constexpr auto bHDR = 0xd5; // char : 1
		constexpr auto bForceLinearGamma = 0xd5; // char : 1
	}

	namespace n_UARTrackedObject {
		constexpr auto DetectedObject = 0xe8; // UARCandidateObject*
	}

	namespace n_UMain_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Sector_AlertNew = 0x238; // UWidgetAnimation*
		constexpr auto Sector_FadeIn = 0x240; // UWidgetAnimation*
		constexpr auto B_StrongPoint = 0x248; // UBorder*
		constexpr auto Detail = 0x250; // UOverlay*
		constexpr auto GameProgressHostPanel = 0x258; // UScaleBox*
		constexpr auto GameProgressOffensiveHostPanel = 0x260; // UScaleBox*
		constexpr auto HB_SectorAction = 0x268; // UHorizontalBox*
		constexpr auto HB_SectorName = 0x270; // UHorizontalBox*
		constexpr auto HB_StrongPoint = 0x278; // UHorizontalBox*
		constexpr auto Image_1 = 0x280; // UImage*
		constexpr auto Image_2 = 0x288; // UImage*
		constexpr auto Image_8 = 0x290; // UImage*
		constexpr auto Image_9 = 0x298; // UImage*
		constexpr auto LockTimerBackground = 0x2a0; // UBackgroundBlur*
		constexpr auto PopIndicator_Enemy = 0x2a8; // UW_GH_GameProgress_PopIndicator_C*
		constexpr auto PopIndicator_Friendly = 0x2b0; // UW_GH_GameProgress_PopIndicator_C*
		constexpr auto SA_Txt_SectorInfo = 0x2b8; // UTextBlock*
		constexpr auto SA_Txt_SectorInstruction = 0x2c0; // UTextBlock*
		constexpr auto Txt_SectorName = 0x2c8; // UTextBlock*
		constexpr auto Txt_State = 0x2d0; // UTextBlock*
		constexpr auto Txt_UnlockText = 0x2d8; // UTextBlock*
		constexpr auto vb_CaptureLock = 0x2e0; // UVerticalBox*
		constexpr auto Alert_AudioCue = 0x2e8; // USoundBase*
		constexpr auto Population_IndicatorCount = 0x2f0; // TArray<int32_t>
		constexpr auto Sector_Previous = 0x300; // int32_t
		constexpr auto GameProgress_Warfare = 0x308; // UW_GH_GameProgress_C*
		constexpr auto GameProgress_Offensive = 0x310; // UW_GH_GameProgress_Offensive_C*
		constexpr auto LockedState_Previous = 0x318; // bool
	}

	namespace n_UDragDropOperation {
		constexpr auto Tag = 0x28; // FString
		constexpr auto Payload = 0x38; // UObject*
		constexpr auto DefaultDragVisual = 0x40; // UWidget*
		constexpr auto Pivot = 0x48; // EDragPivot
		constexpr auto Offset = 0x4c; // FVector2D
		constexpr auto OnDrop = 0x58; // FMulticastInlineDelegate
		constexpr auto OnDragCancelled = 0x68; // FMulticastInlineDelegate
		constexpr auto OnDragged = 0x78; // FMulticastInlineDelegate
	}

	namespace n_UHintsAndTips {
		constexpr auto HintDataTable = 0x28; // TSoftObjectPtr<UDataTable>
		constexpr auto MinDisplayTimeToComplete = 0x50; // float
		constexpr auto CurrentHint = 0x54; // EHint
		constexpr auto CurrentHintPriority = 0x58; // int32_t
		constexpr auto HintTable = 0x70; // UDataTable*
	}

	namespace n_UAnimationSharingSetup {
		constexpr auto SkeletonSetups = 0x28; // TArray<FPerSkeletonAnimationSharingSetup>
		constexpr auto ScalabilitySettings = 0x38; // FAnimationSharingScalability
	}

	namespace n_UArtyBarrelControllerComponent {
		constexpr auto GunnerSeat = 0x488; // AHLLSeat_ArtilleryGunner*
		constexpr auto LoaderSeat = 0x490; // AHLLSeat_ArtilleryLoader*
		constexpr auto CharacterTurretGuard = 0x498; // UCapsuleComponent*
		constexpr auto YawAudio = 0x4a0; // UAudioComponent*
		constexpr auto PitchAudio = 0x4a8; // UAudioComponent*
		constexpr auto YawVibrationController = 0x4b0; // UVibrationEventController*
		constexpr auto PitchVibrationController = 0x4b8; // UVibrationEventController*
	}

	namespace n_AStaticMeshActor {
		constexpr auto StaticMeshComponent = 0x220; // UStaticMeshComponent*
		constexpr auto bStaticMeshReplicateMovement = 0x228; // bool
		constexpr auto NavigationGeometryGatheringMode = 0x229; // ENavDataGatheringMode
	}

	namespace n_AHLLMapData_Player {
		constexpr auto PlayerYaw = 0x238; // char
		constexpr auto bIsSeated = 0x239; // char : 1
		constexpr auto PlayerState = 0x240; // APlayerState*
	}

	namespace n_UHLLUseContext_Repair {
		constexpr auto RadialProg = 0x238; // UImage*
		constexpr auto RepairText = 0x240; // URichTextBlock*
		constexpr auto HealthStatusPanel = 0x248; // UHLLSeatHealthStatus*
	}

	namespace n_UWGT_PlatoonRole_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto icn_defaultRole = 0x238; // UImage*
		constexpr auto txt_label = 0x240; // Uhll_text_C*
		constexpr auto RoleType = 0x248; // EPlayerRole
	}

	namespace n_UHLLDispenserListItem {
		constexpr auto RootBorder = 0x230; // UBorder*
		constexpr auto ItemIcon = 0x238; // UImage*
		constexpr auto ItemName = 0x240; // UTextBlock*
		constexpr auto ItemLimits = 0x248; // UTextBlock*
	}

	namespace n_UMovieSceneByteTrack {
		constexpr auto Enum = 0x88; // UEnum*
	}

	namespace n_ATankCommanderSeat {
		constexpr auto InteriorMesh = 0x980; // UStaticMeshComponent*
		constexpr auto CameraController = 0x988; // USeatCameraController*
		constexpr auto PitchMin = 0x990; // float
		constexpr auto PitchMax = 0x994; // float
		constexpr auto PitchRate = 0x998; // float
		constexpr auto YawRate = 0x99c; // float
	}

	namespace n_UAISystemBase {
		constexpr auto AISystemClassName = 0x28; // FSoftClassPath
		constexpr auto AISystemModuleName = 0x40; // FName
		constexpr auto bInstantiateAISystemOnClient = 0x50; // bool
	}

	namespace n_UCanvas {
		constexpr auto OrgX = 0x28; // float
		constexpr auto OrgY = 0x2c; // float
		constexpr auto ClipX = 0x30; // float
		constexpr auto ClipY = 0x34; // float
		constexpr auto DrawColor = 0x38; // FColor
		constexpr auto bCenterX = 0x3c; // char : 1
		constexpr auto bCenterY = 0x3c; // char : 1
		constexpr auto bNoSmooth = 0x3c; // char : 1
		constexpr auto SizeX = 0x40; // int32_t
		constexpr auto SizeY = 0x44; // int32_t
		constexpr auto ColorModulate = 0x50; // FPlane
		constexpr auto DefaultTexture = 0x60; // UTexture2D*
		constexpr auto GradientTexture0 = 0x68; // UTexture2D*
		constexpr auto ReporterGraph = 0x70; // UReporterGraph*
	}

	namespace n_UBTService_RunEQS {
		constexpr auto EQSRequest = 0x98; // FEQSParametrizedQueryExecutionRequest
	}

	namespace n_UHLLCosmeticCharacterAnimInstance {
		constexpr auto AnimationType = 0x270; // ELoadoutAnimType
		constexpr auto InheritancePose = 0x278; // UAnimSequence*
	}

	namespace n_UProgressBar {
		constexpr auto WidgetStyle = 0x108; // FProgressBarStyle
		constexpr auto Style = 0x2a8; // USlateWidgetStyleAsset*
		constexpr auto BackgroundImage = 0x2b0; // USlateBrushAsset*
		constexpr auto FillImage = 0x2b8; // USlateBrushAsset*
		constexpr auto MarqueeImage = 0x2c0; // USlateBrushAsset*
		constexpr auto Percent = 0x2c8; // float
		constexpr auto BarFillType = 0x2cc; // EProgressBarFillType
		constexpr auto bIsMarquee = 0x2cd; // bool
		constexpr auto BorderPadding = 0x2d0; // FVector2D
		constexpr auto PercentDelegate = 0x2d8; // FDelegate
		constexpr auto FillColorAndOpacity = 0x2e8; // FLinearColor
		constexpr auto FillColorAndOpacityDelegate = 0x2f8; // FDelegate
	}

	namespace n_UHLLIndicatorComponent_Sector {
		constexpr auto SectorIndex = 0xc0; // int32_t
	}

	namespace n_UParticleModuleLocation {
		constexpr auto StartLocation = 0x30; // FRawDistributionVector
		constexpr auto DistributeOverNPoints = 0x78; // float
		constexpr auto DistributeThreshold = 0x7c; // float
	}

	namespace n_UMaterialExpressionAppendVector {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
	}

	namespace n_USteamNetConnection {
		constexpr auto bIsPassthrough = 0x1ad0; // bool
	}

	namespace n_UParticleModuleVectorFieldGlobal {
		constexpr auto bOverrideGlobalVectorFieldTightness = 0x30; // char : 1
		constexpr auto GlobalVectorFieldScale = 0x34; // float
		constexpr auto GlobalVectorFieldTightness = 0x38; // float
	}

	namespace n_UAnimBoneCompressionSettings {
		constexpr auto Codecs = 0x28; // TArray<UAnimBoneCompressionCodec*>
	}

	namespace n_UMaterialExpressionSceneDepth {
		constexpr auto InputMode = 0x40; // EMaterialSceneAttributeInputMode
		constexpr auto Input = 0x44; // FExpressionInput
		constexpr auto Coordinates = 0x58; // FExpressionInput
		constexpr auto ConstInput = 0x6c; // FVector2D
	}

	namespace n_USpectatorPawnMovement {
		constexpr auto bIgnoreTimeDilation = 0x150; // char : 1
	}

	namespace n_UHLLMapTooltip_Player {
		constexpr auto PlayerName = 0x260; // UTextBlock*
		constexpr auto PlayerIcon = 0x268; // UTextBlock*
		constexpr auto PlayerDistance = 0x270; // UTextBlock*
	}

	namespace n_USubmixEffectReverbPreset {
		constexpr auto Settings = 0x9c; // FSubmixEffectReverbSettings
	}

	namespace n_UPlatoonMemberBase {
		constexpr auto RoleGlyph = 0x230; // UTextBlock*
		constexpr auto PlayerName = 0x238; // UTextBlock*
		constexpr auto POIIcon = 0x240; // UImage*
		constexpr auto Anim_PingMarker = 0x248; // UWidgetAnimation*
		constexpr auto AssignedPlayer = 0x250; // AShooterPlayerState*
		constexpr auto POIFadeTime = 0x258; // float
		constexpr auto POIPulseSpeed = 0x25c; // float
		constexpr auto POIPulseColour = 0x260; // FLinearColor
	}

	namespace n_UInterpTrackInstColorProp {
		constexpr auto ResetColor = 0x58; // FColor
	}

	namespace n_UWidgetNavigation {
		constexpr auto Up = 0x28; // FWidgetNavigationData
		constexpr auto Down = 0x4c; // FWidgetNavigationData
		constexpr auto Left = 0x70; // FWidgetNavigationData
		constexpr auto Right = 0x94; // FWidgetNavigationData
		constexpr auto Next = 0xb8; // FWidgetNavigationData
		constexpr auto Previous = 0xdc; // FWidgetNavigationData
	}

	namespace n_UUniformGridPanel {
		constexpr auto SlotPadding = 0x120; // FMargin
		constexpr auto MinDesiredSlotWidth = 0x130; // float
		constexpr auto MinDesiredSlotHeight = 0x134; // float
	}

	namespace n_UHLLWeaponListItem {
		constexpr auto RootBorder = 0x230; // UBorder*
		constexpr auto WeaponKeyName = 0x238; // UHLLKeyText*
		constexpr auto WeaponName = 0x240; // UTextBlock*
		constexpr auto WeaponIcon = 0x248; // UProgressBar*
	}

	namespace n_UHLLMapTooltip_SeatBaseItem {
		constexpr auto PlayerName = 0x230; // UTextBlock*
		constexpr auto PlayerRole = 0x238; // UTextBlock*
	}

	namespace n_USoundNodeWavePlayer {
		constexpr auto SoundWaveAssetPtr = 0x48; // TSoftObjectPtr<USoundWave>
		constexpr auto SoundWave = 0x70; // USoundWave*
		constexpr auto bLooping = 0x78; // char : 1
	}

	namespace n_USphereComponent {
		constexpr auto SphereRadius = 0x428; // float
	}

	namespace n_UParticleModuleEventReceiverKillParticles {
		constexpr auto bStopSpawning = 0x40; // char : 1
	}

	namespace n_UMovieSceneSignedObject {
		constexpr auto Signature = 0x28; // FGuid
	}

	namespace n_ULandscapeWeightmapUsage {
		constexpr auto ChannelUsage = 0x28; // ULandscapeComponent* [0x4]
		constexpr auto LayerGuid = 0x48; // FGuid
	}

	namespace n_UEnvQueryTest_Project {
		constexpr auto ProjectionData = 0x1f8; // FEnvTraceData
	}

	namespace n_UDamageType {
		constexpr auto bCausedByWorld = 0x28; // char : 1
		constexpr auto bScaleMomentumByMass = 0x28; // char : 1
		constexpr auto bRadialDamageVelChange = 0x28; // char : 1
		constexpr auto DamageImpulse = 0x2c; // float
		constexpr auto DestructibleImpulse = 0x30; // float
		constexpr auto DestructibleDamageSpreadScale = 0x34; // float
		constexpr auto DamageFalloff = 0x38; // float
	}

	namespace n_UMaterialExpressionFrac {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_AEF_RubblePile_01_C {
		constexpr auto SM_MERGED_EF_RubblePile_01_3 = 0x220; // UStaticMeshComponent*
		constexpr auto SharedRoot = 0x228; // USceneComponent*
	}

	namespace n_UComboBoxOptionButton_V2_C {
		constexpr auto UberGraphFrame = 0x240; // FPointerToUberGraphFrame
		constexpr auto FocusEffect_2 = 0x248; // UImage*
		constexpr auto OptionButton = 0x250; // UButton*
		constexpr auto OptionTextBlock = 0x258; // UTextBlock*
		constexpr auto FocusedButtonStyle = 0x260; // FButtonStyle
		constexpr auto HoveredTextColor = 0x4d8; // FSlateColor
		constexpr auto InitialButtonStyle = 0x500; // FButtonStyle
		constexpr auto NormalTextColor = 0x778; // FSlateColor
		constexpr auto ParentComboBox = 0x7a0; // UComboBoxString*
	}

	namespace n_UCollisionProfile {
		constexpr auto Profiles = 0x38; // TArray<FCollisionResponseTemplate>
		constexpr auto DefaultChannelResponses = 0x48; // TArray<FCustomChannelSetup>
		constexpr auto EditProfiles = 0x58; // TArray<FCustomProfile>
		constexpr auto ProfileRedirects = 0x68; // TArray<FRedirector>
		constexpr auto CollisionChannelRedirects = 0x78; // TArray<FRedirector>
	}

	namespace n_UPhysicalAnimationComponent {
		constexpr auto StrengthMultiplyer = 0xb0; // float
		constexpr auto SkeletalMeshComponent = 0xb8; // USkeletalMeshComponent*
	}

	namespace n_UMaterialExpressionLogarithm2 {
		constexpr auto X = 0x40; // FExpressionInput
	}

	namespace n_UParticleModuleKillBox {
		constexpr auto LowerLeftCorner = 0x30; // FRawDistributionVector
		constexpr auto UpperRightCorner = 0x78; // FRawDistributionVector
		constexpr auto bAbsolute = 0xc0; // char : 1
		constexpr auto bKillInside = 0xc0; // char : 1
		constexpr auto bAxisAlignedAndFixedSize = 0xc0; // char : 1
	}

	namespace n_UEditableGameplayTagQueryExpression_AnyExprMatch {
		constexpr auto Expressions = 0x28; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UBrushComponent {
		constexpr auto Brush = 0x410; // UModel*
		constexpr auto BrushBodySetup = 0x418; // UBodySetup*
	}

	namespace n_UParticleModuleParameterDynamic {
		constexpr auto DynamicParams = 0x30; // TArray<FEmitterDynamicParameter>
		constexpr auto UpdateFlags = 0x40; // int32_t
		constexpr auto bUsesVelocity = 0x44; // char : 1
	}

	namespace n_UInterpTrackInstFloatParticleParam {
		constexpr auto ResetFloat = 0x28; // float
	}

	namespace n_UParticleModuleCameraOffset {
		constexpr auto CameraOffset = 0x30; // FRawDistributionFloat
		constexpr auto bSpawnTimeOnly = 0x60; // char : 1
		constexpr auto UpdateMethod = 0x64; // EParticleCameraOffsetUpdateMethod
	}

	namespace n_UMaterialExpressionPanner {
		constexpr auto Coordinate = 0x40; // FExpressionInput
		constexpr auto Time = 0x54; // FExpressionInput
		constexpr auto Speed = 0x68; // FExpressionInput
		constexpr auto SpeedX = 0x7c; // float
		constexpr auto SpeedY = 0x80; // float
		constexpr auto ConstCoordinate = 0x84; // uint32_t
		constexpr auto bFractionalPart = 0x88; // bool
	}

	namespace n_UMenuHeader_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto NavButtonsContainer = 0x238; // UNamedSlot*
		constexpr auto PageDescription = 0x240; // UTextBlock*
		constexpr auto PageTitle = 0x248; // UTextBlock*
		constexpr auto SecondaryDescription = 0x250; // UTextBlock*
		constexpr auto TitleText = 0x258; // FText
	}

	namespace n_UReconCommanderSeatUI {
		constexpr auto ReconWeaponInfo = 0x290; // UHLLArmourWeaponUI*
		constexpr auto FireKeyText = 0x298; // URichTextBlock*
		constexpr auto AimKeyText = 0x2a0; // URichTextBlock*
	}

	namespace n_UMaterialExpressionThinTranslucentMaterialOutput {
		constexpr auto TransmittanceColor = 0x40; // FExpressionInput
	}

	namespace n_AShooterPickup_Health {
		constexpr auto Health = 0x260; // int32_t
	}

	namespace n_UShaderPlatformQualitySettings {
		constexpr auto QualityOverrides = 0x28; // FMaterialQualityOverrides [0x3]
	}

	namespace n_UParticleSystemComponent {
		constexpr auto Template = 0x410; // UParticleSystem*
		constexpr auto EmitterMaterials = 0x418; // TArray<UMaterialInterface*>
		constexpr auto SkelMeshComponents = 0x428; // TArray<USkeletalMeshComponent*>
		constexpr auto bResetOnDetach = 0x439; // char : 1
		constexpr auto bUpdateOnDedicatedServer = 0x439; // char : 1
		constexpr auto bAllowRecycling = 0x439; // char : 1
		constexpr auto bAutoManageAttachment = 0x439; // char : 1
		constexpr auto bAutoAttachWeldSimulatedBodies = 0x439; // char : 1
		constexpr auto bWarmingUp = 0x43a; // char : 1
		constexpr auto bOverrideLODMethod = 0x43a; // char : 1
		constexpr auto bSkipUpdateDynamicDataDuringTick = 0x43a; // char : 1
		constexpr auto LODMethod = 0x445; // ParticleSystemLODMethod
		constexpr auto RequiredSignificance = 0x446; // EParticleSignificanceLevel
		constexpr auto InstanceParameters = 0x448; // TArray<FParticleSysParam>
		constexpr auto OnParticleSpawn = 0x458; // FMulticastInlineDelegate
		constexpr auto OnParticleBurst = 0x468; // FMulticastInlineDelegate
		constexpr auto OnParticleDeath = 0x478; // FMulticastInlineDelegate
		constexpr auto OnParticleCollide = 0x488; // FMulticastInlineDelegate
		constexpr auto bOldPositionValid = 0x498; // bool
		constexpr auto OldPosition = 0x49c; // FVector
		constexpr auto PartSysVelocity = 0x4a8; // FVector
		constexpr auto WarmupTime = 0x4b4; // float
		constexpr auto WarmupTickRate = 0x4b8; // float
		constexpr auto SecondsBeforeInactive = 0x4c0; // float
		constexpr auto MaxTimeBeforeForceUpdateTransform = 0x4c8; // float
		constexpr auto ReplayClips = 0x4e8; // TArray<UParticleSystemReplay*>
		constexpr auto CustomTimeDilation = 0x500; // float
		constexpr auto AutoAttachParent = 0x558; // TWeakObjectPtr<USceneComponent>
		constexpr auto AutoAttachSocketName = 0x560; // FName
		constexpr auto AutoAttachLocationRule = 0x568; // EAttachmentRule
		constexpr auto AutoAttachRotationRule = 0x569; // EAttachmentRule
		constexpr auto AutoAttachScaleRule = 0x56a; // EAttachmentRule
		constexpr auto OnSystemFinished = 0x598; // FMulticastInlineDelegate
	}

	namespace n_ANavigationData {
		constexpr auto RenderingComp = 0x228; // UPrimitiveComponent*
		constexpr auto NavDataConfig = 0x230; // FNavDataConfig
		constexpr auto bEnableDrawing = 0x2a8; // char : 1
		constexpr auto bForceRebuildOnLoad = 0x2a8; // char : 1
		constexpr auto bAutoDestroyWhenNoNavigation = 0x2a8; // char : 1
		constexpr auto bCanBeMainNavData = 0x2a8; // char : 1
		constexpr auto bCanSpawnOnRebuild = 0x2a8; // char : 1
		constexpr auto bRebuildAtRuntime = 0x2a8; // char : 1
		constexpr auto RuntimeGeneration = 0x2ac; // ERuntimeGenerationType
		constexpr auto ObservedPathsTickInterval = 0x2b0; // float
		constexpr auto DataVersion = 0x2b4; // uint32_t
		constexpr auto SupportedAreas = 0x398; // TArray<FSupportedAreaData>
	}

	namespace n_UMaterialExpressionSkyAtmosphereAerialPerspective {
		constexpr auto WorldPosition = 0x40; // FExpressionInput
	}

	namespace n_UMovieSceneCameraAnimTrack {
		constexpr auto CameraAnimSections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_AM3Halftrack {
		constexpr auto Suspension = 0x550; // UM3SuspensionComponent*
		constexpr auto HalftrackWheels = 0x558; // UHalftrackWheelsComponent*
		constexpr auto Tracks = 0x560; // UTracksComponent*
	}

	namespace n_UAREnvironmentCaptureProbeTexture {
		constexpr auto TextureType = 0x110; // EARTextureType
		constexpr auto Timestamp = 0x114; // float
		constexpr auto ExternalTextureGuid = 0x118; // FGuid
		constexpr auto Size = 0x128; // FVector2D
	}

	namespace n_UWheeledVehicleMovementComponent4W {
		constexpr auto EngineSetup = 0x2f0; // FVehicleEngineData
		constexpr auto DifferentialSetup = 0x390; // FVehicleDifferential4WData
		constexpr auto AckermannAccuracy = 0x3ac; // float
		constexpr auto TransmissionSetup = 0x3b0; // FVehicleTransmissionData
		constexpr auto SteeringCurve = 0x3e0; // FRuntimeFloatCurve
	}

	namespace n_UCableComponent {
		constexpr auto bAttachStart = 0x438; // bool
		constexpr auto bAttachEnd = 0x439; // bool
		constexpr auto AttachEndTo = 0x440; // FComponentReference
		constexpr auto AttachEndToSocketName = 0x468; // FName
		constexpr auto EndLocation = 0x470; // FVector
		constexpr auto CableLength = 0x47c; // float
		constexpr auto NumSegments = 0x480; // int32_t
		constexpr auto SubstepTime = 0x484; // float
		constexpr auto SolverIterations = 0x488; // int32_t
		constexpr auto bEnableStiffness = 0x48c; // bool
		constexpr auto bEnableCollision = 0x48d; // bool
		constexpr auto CollisionFriction = 0x490; // float
		constexpr auto CableForce = 0x494; // FVector
		constexpr auto CableGravityScale = 0x4a0; // float
		constexpr auto CableWidth = 0x4a4; // float
		constexpr auto NumSides = 0x4a8; // int32_t
		constexpr auto TileMaterial = 0x4ac; // float
	}

	namespace n_AShooterPickup_Ammo {
		constexpr auto AmmoClips = 0x260; // int32_t
		constexpr auto WeaponType = 0x268; // AShooterWeapon*
	}

	namespace n_UBTTask_RotateToFaceBBEntry {
		constexpr auto Precision = 0x98; // float
	}

	namespace n_UMainMenuNavigationScreen_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto btnNav_Barracks = 0x238; // UbtnNav_V2_C*
		constexpr auto btnNav_Credits = 0x240; // UbtnNav_V2_C*
		constexpr auto btnNav_Enlist = 0x248; // UbtnNav_V2_C*
		constexpr auto btnNav_Guide = 0x250; // UbtnNav_V2_C*
		constexpr auto btnNav_Quit = 0x258; // UbtnNav_V2_C*
		constexpr auto btnNav_Settings = 0x260; // UbtnNav_V2_C*
		constexpr auto ButtonPromptsInfo = 0x268; // UButtonPromptsInfo_V2_C*
		constexpr auto Home = 0x270; // UOverlay*
		constexpr auto SlashBarracks = 0x278; // UTextBlock*
		constexpr auto SlashCredits = 0x280; // UTextBlock*
		constexpr auto SlashEnlist = 0x288; // UTextBlock*
		constexpr auto SlashGuide = 0x290; // UTextBlock*
		constexpr auto SlashQuit = 0x298; // UTextBlock*
		constexpr auto SlashSettings = 0x2a0; // UTextBlock*
		constexpr auto VB_Nav = 0x2a8; // UVerticalBox*
		constexpr auto MainMenu = 0x2b0; // UMainMenuWidget_V2_C*
		constexpr auto LastMenuIndex = 0x2b8; // int32_t
	}

	namespace n_UParticleModuleAttractorPointGravity {
		constexpr auto Position = 0x30; // FVector
		constexpr auto Radius = 0x3c; // float
		constexpr auto Strength = 0x40; // UDistributionFloat*
		constexpr auto StrengthRaw = 0x48; // FRawDistributionFloat
	}

	namespace n_UChildConnection {
		constexpr auto Parent = 0x1a30; // UNetConnection*
	}

	namespace n_UMovieSceneBindingOverrides {
		constexpr auto BindingData = 0x28; // TArray<FMovieSceneBindingOverrideData>
	}

	namespace n_AHLLAudioVolume {
		constexpr auto bAutoRegisterVolume = 0x2a8; // char : 1
		constexpr auto VolumeType = 0x2a9; // EAudioVolumeType
	}

	namespace n_UAISenseConfig_Blueprint {
		constexpr auto Implementation = 0x48; // UAISense_Blueprint*
	}

	namespace n_AHLLDispenserItem_StructureAdv {
		constexpr auto RequiredNearbyPlatoonMembers = 0x488; // int32_t
		constexpr auto DistanceCheckClasses = 0x490; // TArray<AActor*>
		constexpr auto MinDistanceToOther = 0x4a0; // float
		constexpr auto MinAllowedEnemyDistance = 0x4a4; // float
		constexpr auto MaxPlatoonMemberDistance = 0x4a8; // float
	}

	namespace n_UWheeledVehicleMovementComponent {
		constexpr auto bDeprecatedSpringOffsetMode = 0x148; // char : 1
		constexpr auto bReverseAsBrake = 0x148; // char : 1
		constexpr auto bUseRVOAvoidance = 0x148; // char : 1
		constexpr auto bRawHandbrakeInput = 0x148; // char : 1
		constexpr auto bRawGearUpInput = 0x148; // char : 1
		constexpr auto bRawGearDownInput = 0x148; // char : 1
		constexpr auto bWasAvoidanceUpdated = 0x14c; // char : 1
		constexpr auto bAutoDriveOnPlay = 0x150; // char : 1
		constexpr auto Mass = 0x168; // float
		constexpr auto WheelSetups = 0x170; // TArray<FWheelSetup>
		constexpr auto DragCoefficient = 0x180; // float
		constexpr auto MaxWaterVolumeUpdateDistance = 0x184; // float
		constexpr auto ChassisWidth = 0x188; // float
		constexpr auto ChassisHeight = 0x18c; // float
		constexpr auto bHasParkingGear = 0x190; // char : 1
		constexpr auto DragArea = 0x194; // float
		constexpr auto EstimatedMaxEngineSpeed = 0x198; // float
		constexpr auto MaxEngineRPM = 0x19c; // float
		constexpr auto DebugDragMagnitude = 0x1a0; // float
		constexpr auto CenterOfMassOffset = 0x1a4; // FVector
		constexpr auto InertiaTensorScale = 0x1b0; // FVector
		constexpr auto MinNormalizedTireLoad = 0x1bc; // float
		constexpr auto MinNormalizedTireLoadFiltered = 0x1c0; // float
		constexpr auto MaxNormalizedTireLoad = 0x1c4; // float
		constexpr auto MaxNormalizedTireLoadFiltered = 0x1c8; // float
		constexpr auto ThresholdLongitudinalSpeed = 0x1cc; // float
		constexpr auto LowForwardSpeedSubStepCount = 0x1d0; // int32_t
		constexpr auto HighForwardSpeedSubStepCount = 0x1d4; // int32_t
		constexpr auto Wheels = 0x1d8; // TArray<UVehicleWheel*>
		constexpr auto RVOAvoidanceRadius = 0x200; // float
		constexpr auto RVOAvoidanceHeight = 0x204; // float
		constexpr auto AvoidanceConsiderationRadius = 0x208; // float
		constexpr auto RVOSteeringStep = 0x20c; // float
		constexpr auto RVOThrottleStep = 0x210; // float
		constexpr auto AvoidanceUID = 0x214; // int32_t
		constexpr auto AvoidanceGroup = 0x218; // FNavAvoidanceMask
		constexpr auto GroupsToAvoid = 0x21c; // FNavAvoidanceMask
		constexpr auto GroupsToIgnore = 0x220; // FNavAvoidanceMask
		constexpr auto AvoidanceWeight = 0x224; // float
		constexpr auto PendingLaunchVelocity = 0x228; // FVector
		constexpr auto ReplicatedState = 0x250; // FReplicatedVehicleState
		constexpr auto RawSteeringInput = 0x26c; // float
		constexpr auto RawThrottleInput = 0x270; // float
		constexpr auto RawBrakeInput = 0x274; // float
		constexpr auto SteeringInput = 0x278; // float
		constexpr auto ThrottleInput = 0x27c; // float
		constexpr auto BrakeInput = 0x280; // float
		constexpr auto HandbrakeInput = 0x284; // float
		constexpr auto IdleBrakeInput = 0x288; // float
		constexpr auto StopThreshold = 0x28c; // float
		constexpr auto WrongDirectionThreshold = 0x290; // float
		constexpr auto ThrottleInputRate = 0x294; // FVehicleInputRate
		constexpr auto BrakeInputRate = 0x29c; // FVehicleInputRate
		constexpr auto HandbrakeInputRate = 0x2a4; // FVehicleInputRate
		constexpr auto SteeringInputRate = 0x2ac; // FVehicleInputRate
		constexpr auto OverrideController = 0x2d8; // AController*
	}

	namespace n_AWarfareGameMode {
		constexpr auto NumBaseLineCapsToWin = 0x528; // int32_t
	}

	namespace n_UHudSettings {
		constexpr auto bShowHUD = 0x28; // char : 1
		constexpr auto DebugDisplay = 0x30; // TArray<FName>
	}

	namespace n_AFlamethrowerBurningCharacter {
		constexpr auto BurningCharacter = 0x220; // ACharacter*
	}

	namespace n_UHLLTeamLoadouts {
		constexpr auto Rifleman = 0x30; // TArray<FLoadout>
		constexpr auto Assault = 0x40; // TArray<FLoadout>
		constexpr auto AutomaticRifleman = 0x50; // TArray<FLoadout>
		constexpr auto Medic = 0x60; // TArray<FLoadout>
		constexpr auto Spotter = 0x70; // TArray<FLoadout>
		constexpr auto Support = 0x80; // TArray<FLoadout>
		constexpr auto MachineGunner = 0x90; // TArray<FLoadout>
		constexpr auto AntiTank = 0xa0; // TArray<FLoadout>
		constexpr auto Engineer = 0xb0; // TArray<FLoadout>
		constexpr auto Officer = 0xc0; // TArray<FLoadout>
		constexpr auto Sniper = 0xd0; // TArray<FLoadout>
		constexpr auto Crewman = 0xe0; // TArray<FLoadout>
		constexpr auto TankCommander = 0xf0; // TArray<FLoadout>
		constexpr auto ArmyCommander = 0x100; // TArray<FLoadout>
	}

	namespace n_UMaterialExpressionTruncate {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_ULeaderboardFlushCallbackProxy {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_UHLLRadialMenu_WeaponSegment {
		constexpr auto WeaponType = 0x2c4; // EWeaponType
		constexpr auto WeaponIcon = 0x2c8; // UImage*
	}

	namespace n_UPlatoonMemberWidget {
		constexpr auto PlatformIcon = 0x230; // UImage*
		constexpr auto PlatformIconContainer = 0x238; // UWidget*
		constexpr auto Colouriser = 0x240; // UBorder*
		constexpr auto RoleGlyph = 0x248; // UTextBlock*
		constexpr auto PlayerName = 0x250; // UTextBlock*
		constexpr auto PlayerClan = 0x258; // UTextBlock*
		constexpr auto Kick = 0x260; // UButton*
		constexpr auto PlatoonMemberPlayerState = 0x268; // AShooterPlayerState*
	}

	namespace n_UEngineMessage {
		constexpr auto FailedPlaceMessage = 0x28; // FString
		constexpr auto MaxedOutMessage = 0x38; // FString
		constexpr auto EnteredMessage = 0x48; // FString
		constexpr auto LeftMessage = 0x58; // FString
		constexpr auto GlobalNameChange = 0x68; // FString
		constexpr auto SpecEnteredMessage = 0x78; // FString
		constexpr auto NewPlayerMessage = 0x88; // FString
		constexpr auto NewSpecMessage = 0x98; // FString
	}

	namespace n_UInAppPurchaseCallbackProxy2 {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_UReplicationGraphNode_AlwaysRelevant {
		constexpr auto ChildNode = 0x50; // UReplicationGraphNode*
	}

	namespace n_APaperCharacter {
		constexpr auto Sprite = 0x4b8; // UPaperFlipbookComponent*
	}

	namespace n_UHLLDispenserListItem_Outpost {
		constexpr auto PlatoonLimitText = 0x258; // UTextBlock*
	}

	namespace n_UAssetManager {
		constexpr auto ObjectReferenceList = 0x2c0; // TArray<UObject*>
		constexpr auto bIsGlobalAsyncScanEnvironment = 0x2d0; // bool
		constexpr auto bShouldGuessTypeAndName = 0x2d1; // bool
		constexpr auto bShouldUseSynchronousLoad = 0x2d2; // bool
		constexpr auto bIsLoadingFromPakFiles = 0x2d3; // bool
		constexpr auto bShouldAcquireMissingChunksOnLoad = 0x2d4; // bool
		constexpr auto bOnlyCookProductionAssets = 0x2d5; // bool
		constexpr auto bIsBulkScanning = 0x2d6; // bool
		constexpr auto bIsPrimaryAssetDirectoryCurrent = 0x2d7; // bool
		constexpr auto bIsManagementDatabaseCurrent = 0x2d8; // bool
		constexpr auto bUpdateManagementDatabaseAfterScan = 0x2d9; // bool
		constexpr auto bIncludeOnlyOnDiskAssets = 0x2da; // bool
		constexpr auto NumberOfSpawnedNotifications = 0x2dc; // int32_t
	}

	namespace n_UHLLVoteWidget {
		constexpr auto Vote = 0x230; // FVoteHandle
		constexpr auto BodyText = 0x238; // URichTextBlock*
		constexpr auto TitleText = 0x240; // UTextBlock*
		constexpr auto Countdown = 0x248; // UTextBlock*
		constexpr auto ViewportClient = 0x250; // UShooterGameViewportClient*
		constexpr auto PlayerController = 0x258; // AShooterPlayerController*
	}

	namespace n_ABotPawn_C {
		constexpr auto DefaultSceneRoot = 0x280; // USceneComponent*
	}

	namespace n_AMainMenu_C {
		constexpr auto UberGraphFrame = 0x228; // FPointerToUberGraphFrame
	}

	namespace n_UABP_Rifleman_FPP_V2_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Slot_21 = 0x278; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_22 = 0x2c0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_21 = 0x378; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TransitionResult_25 = 0x430; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_24 = 0x458; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_17 = 0x480; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_10 = 0x4f8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_70 = 0x528; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_9 = 0x550; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_3 = 0x580; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_Slot_20 = 0x630; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_19 = 0x678; // FAnimNode_Slot
		constexpr auto AnimGraphNode_LayeredBoneBlend_9 = 0x6c0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_SaveCachedPose_20 = 0x780; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_69 = 0x838; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TransitionResult_23 = 0x860; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_22 = 0x888; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_21 = 0x8b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_20 = 0x8d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_19 = 0x900; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_18 = 0x928; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_17 = 0x950; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_16 = 0x978; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_15 = 0x9a0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_14 = 0x9c8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_16 = 0x9f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_8 = 0xa68; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_15 = 0xa98; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_7 = 0xb10; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_14 = 0xb40; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_6 = 0xbb8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_68 = 0xbe8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_5 = 0xc10; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_2 = 0xc40; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_Slot_18 = 0xcf0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_19 = 0xd38; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_13 = 0xdf0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SaveCachedPose_18 = 0xe68; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_67 = 0xf20; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_7 = 0xf48; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendListByBool_6 = 0xfe8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_66 = 0x1088; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_17 = 0x10b0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_16 = 0x10f8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_65 = 0x1140; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_15 = 0x1168; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_14 = 0x11b0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_BlendBoneByChannel_12 = 0x11f8; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_64 = 0x1260; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ModifyBone_12 = 0x1288; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_Slot_13 = 0x1390; // FAnimNode_Slot
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive_5 = 0x13d8; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_SaveCachedPose_17 = 0x14a8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_16 = 0x1560; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_ModifyBone_11 = 0x1618; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_LocalToComponentSpace_11 = 0x1720; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace_11 = 0x1740; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_TransitionResult_13 = 0x1760; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_12 = 0x1788; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_11 = 0x17b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_10 = 0x17d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_9 = 0x1800; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_8 = 0x1828; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0x1850; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0x1878; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TwoWayBlend_13 = 0x18a0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_TransitionPoseEvaluator_2 = 0x1968; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_TransitionPoseEvaluator = 0x19c0; // FAnimNode_TransitionPoseEvaluator
		constexpr auto AnimGraphNode_CustomTransitionResult = 0x1a18; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x1a48; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x1a70; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x1a98; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x1ac0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_UseCachedPose_63 = 0x1ae8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_4 = 0x1b10; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult = 0x1b40; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_UseCachedPose_62 = 0x1b68; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_3 = 0x1b90; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_61 = 0x1bc0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_2 = 0x1be8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendBoneByChannel_11 = 0x1c18; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_60 = 0x1c80; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_59 = 0x1ca8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ComponentToLocalSpace_10 = 0x1cd0; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_ModifyBone_10 = 0x1cf0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_UseCachedPose_58 = 0x1df8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LocalToComponentSpace_10 = 0x1e20; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ModifyBone_9 = 0x1e40; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_HandIKRetargeting_2 = 0x1f48; // FAnimNode_HandIKRetargeting
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive_4 = 0x2068; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_UseCachedPose_57 = 0x2138; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_56 = 0x2160; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel_10 = 0x2188; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_SequencePlayer_12 = 0x21f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_12 = 0x2268; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_11 = 0x2330; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_10 = 0x23a8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_11 = 0x2420; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_9 = 0x24e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_8 = 0x2560; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_10 = 0x25d8; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_ModifyBone_8 = 0x26a0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace_9 = 0x27a8; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_LocalToComponentSpace_9 = 0x27c8; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_UseCachedPose_55 = 0x27e8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_54 = 0x2810; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_MakeDynamicAdditive_6 = 0x2838; // FAnimNode_MakeDynamicAdditive
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive_3 = 0x2870; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_BlendListByEnum_5 = 0x2940; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_TwoWayBlend_9 = 0x29f0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_BlendBoneByChannel_9 = 0x2ab8; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_53 = 0x2b20; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_52 = 0x2b48; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_MakeDynamicAdditive_5 = 0x2b70; // FAnimNode_MakeDynamicAdditive
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive_2 = 0x2ba8; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_UseCachedPose_51 = 0x2c78; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LocalToComponentSpace_8 = 0x2ca0; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace_8 = 0x2cc0; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_ModifyBone_7 = 0x2ce0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_UseCachedPose_50 = 0x2de8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel_8 = 0x2e10; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_49 = 0x2e78; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel_7 = 0x2ea0; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_48 = 0x2f08; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_47 = 0x2f30; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel_6 = 0x2f58; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_46 = 0x2fc0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_8 = 0x2fe8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_HandIKRetargeting = 0x30a8; // FAnimNode_HandIKRetargeting
		constexpr auto AnimGraphNode_ModifyBone_6 = 0x31c8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ApplyAdditive_3 = 0x32d0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_TwoWayBlend_8 = 0x3398; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_ComponentToLocalSpace_7 = 0x3460; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_LocalToComponentSpace_7 = 0x3480; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_UseCachedPose_45 = 0x34a0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_44 = 0x34c8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_MakeDynamicAdditive_4 = 0x34f0; // FAnimNode_MakeDynamicAdditive
		constexpr auto AnimGraphNode_SequencePlayer_7 = 0x3528; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult = 0x35a0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x35d0; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_ModifyBone_5 = 0x3680; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace_6 = 0x3788; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_LocalToComponentSpace_6 = 0x37a8; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_SaveCachedPose_15 = 0x37c8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_43 = 0x3880; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_14 = 0x38a8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_7 = 0x3960; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_42 = 0x3a28; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_MakeDynamicAdditive_3 = 0x3a50; // FAnimNode_MakeDynamicAdditive
		constexpr auto AnimGraphNode_UseCachedPose_41 = 0x3a88; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_40 = 0x3ab0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_12 = 0x3ad8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_ApplyMeshSpaceAdditive = 0x3b20; // FAnimNode_ApplyMeshSpaceAdditive
		constexpr auto AnimGraphNode_BlendSpacePlayer_2 = 0x3bf0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_Slot_11 = 0x3cd0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_BlendListByEnum_4 = 0x3d18; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_UseCachedPose_39 = 0x3dc8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_7 = 0x3df0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendBoneByChannel_5 = 0x3eb0; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_38 = 0x3f18; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_MakeDynamicAdditive_2 = 0x3f40; // FAnimNode_MakeDynamicAdditive
		constexpr auto AnimGraphNode_UseCachedPose_37 = 0x3f78; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_36 = 0x3fa0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_2 = 0x3fc8; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SaveCachedPose_13 = 0x4090; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel_4 = 0x4148; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_LayeredBoneBlend_6 = 0x41b0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_SaveCachedPose_12 = 0x4270; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_35 = 0x4328; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_34 = 0x4350; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_33 = 0x4378; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_5 = 0x43a0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_32 = 0x4460; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_31 = 0x4488; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ModifyBone_4 = 0x44b0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_LocalToComponentSpace_5 = 0x45b8; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace_5 = 0x45d8; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_BlendBoneByChannel_3 = 0x45f8; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_30 = 0x4660; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByEnum_3 = 0x4688; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SaveCachedPose_11 = 0x4738; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_29 = 0x47f0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_28 = 0x4818; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequenceEvaluator_2 = 0x4840; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_UseCachedPose_27 = 0x4888; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_26 = 0x48b0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_MakeDynamicAdditive = 0x48d8; // FAnimNode_MakeDynamicAdditive
		constexpr auto AnimGraphNode_Slot_10 = 0x4910; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_10 = 0x4958; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_5 = 0x4a10; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_LayeredBoneBlend_4 = 0x4ab0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_25 = 0x4b70; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x4b98; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SaveCachedPose_9 = 0x4c10; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_BlendListByEnum_2 = 0x4cc8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_UseCachedPose_24 = 0x4d78; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_23 = 0x4da0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_22 = 0x4dc8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_9 = 0x4df0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_21 = 0x4e38; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_20 = 0x4e60; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive = 0x4e88; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequenceEvaluator = 0x4f50; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x4f98; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum = 0x5010; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendBoneByChannel_2 = 0x50c0; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_UseCachedPose_19 = 0x5128; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ModifyBone_3 = 0x5150; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_LocalToComponentSpace_4 = 0x5258; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace_4 = 0x5278; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose_8 = 0x5298; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TwoBoneIK_2 = 0x5350; // FAnimNode_TwoBoneIK
		constexpr auto AnimGraphNode_TwoBoneIK = 0x5530; // FAnimNode_TwoBoneIK
		constexpr auto AnimGraphNode_SaveCachedPose_7 = 0x5710; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_18 = 0x57c8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendSpacePlayer = 0x57f0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_LayeredBoneBlend_3 = 0x58d0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_TwoWayBlend_6 = 0x5990; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SaveCachedPose_6 = 0x5a58; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_17 = 0x5b10; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend_5 = 0x5b38; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_16 = 0x5c00; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_5 = 0x5c28; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_ComponentToLocalSpace_3 = 0x5ce0; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_LocalToComponentSpace_3 = 0x5d00; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ModifyBone_2 = 0x5d20; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_Root = 0x5e28; // FAnimNode_Root
		constexpr auto AnimGraphNode_BlendListByBool_4 = 0x5e58; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x5ef8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByBool_3 = 0x5f70; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SaveCachedPose_4 = 0x6010; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_15 = 0x60c8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LocalToComponentSpace_2 = 0x60f0; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_CopyBone_2 = 0x6110; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace_2 = 0x6200; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_UseCachedPose_14 = 0x6220; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_2 = 0x6248; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x62e8; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_CopyBone = 0x6308; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0x63f8; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x6418; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_13 = 0x6490; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x64b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_4 = 0x6530; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer = 0x65f8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_Slot_8 = 0x6670; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_12 = 0x66b8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ModifyBone = 0x66e0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_LayeredBoneBlend_2 = 0x67e8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_11 = 0x68a8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_10 = 0x68d0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_9 = 0x68f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendBoneByChannel = 0x6920; // FAnimNode_BlendBoneByChannel
		constexpr auto AnimGraphNode_TwoWayBlend_3 = 0x6988; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_8 = 0x6a50; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_7 = 0x6a78; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_6 = 0x6ac0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_5 = 0x6b08; // FAnimNode_Slot
		constexpr auto AnimGraphNode_Slot_4 = 0x6b50; // FAnimNode_Slot
		constexpr auto AnimGraphNode_TwoWayBlend_2 = 0x6b98; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SaveCachedPose_3 = 0x6c60; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0x6d18; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0x6d40; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_3 = 0x6d68; // FAnimNode_Slot
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace = 0x6db0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_Slot_2 = 0x6f38; // FAnimNode_Slot
		constexpr auto AnimGraphNode_TwoWayBlend = 0x6f80; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x7048; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0x7100; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x7128; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0x7150; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x7210; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose = 0x7238; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x72f0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose = 0x7318; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool = 0x7340; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_Slot = 0x73e0; // FAnimNode_Slot
		constexpr auto PlayerPawn = 0x7428; // AShooterCharacter*
		constexpr auto PlayerController = 0x7430; // AHLL_PlayerController_C*
		constexpr auto InertiaMax = 0x7438; // float
		constexpr auto InertiaSensitivity = 0x743c; // float
		constexpr auto InertiaVelocity = 0x7440; // FVector
		constexpr auto InertiaVelocityR = 0x744c; // FVector
		constexpr auto InertiaSpring = 0x7458; // TArray<FFloatSpringState>
		constexpr auto WeaponWeight = 0x7468; // float
		constexpr auto InertiaPivot = 0x746c; // float
		constexpr auto InertiaWeightT = 0x7470; // FVector
		constexpr auto InertiaWeightR = 0x747c; // FVector
		constexpr auto ProceduralResult_T = 0x7488; // FVector
		constexpr auto ProceduralResult_R = 0x7494; // FRotator
		constexpr auto PlayerVelocity = 0x74a0; // FVector
		constexpr auto PlayerVelocity_Walk = 0x74ac; // FVector
		constexpr auto PlayerVelocity_Prone = 0x74b8; // FVector
		constexpr auto IsSprinting = 0x74c4; // bool
		constexpr auto IsMoving = 0x74c5; // bool
		constexpr auto IsAiming = 0x74c6; // bool
		constexpr auto IsAiming_Stored = 0x74c7; // bool
		constexpr auto IsGrounded = 0x74c8; // bool
		constexpr auto IsAnimValid_Check = 0x74c9; // bool
		constexpr auto Stance = 0x74ca; // ECharacterStance
		constexpr auto Mesh_FPP = 0x74d0; // USkeletalMeshComponent*
		constexpr auto Mesh_TPP = 0x74d8; // USkeletalMeshComponent*
		constexpr auto Mesh_WPN = 0x74e0; // USkeletalMeshComponent*
		constexpr auto ABP_TPP = 0x74e8; // UABP_Rifleman_TPP_V2_C*
		constexpr auto WeaponInst = 0x74f0; // AShooterWeapon*
		constexpr auto IK_Left = 0x74f8; // float
		constexpr auto IK_Right = 0x74fc; // float
		constexpr auto IK_Left_Enabled = 0x7500; // bool
		constexpr auto IK_Right_Enabled = 0x7501; // bool
		constexpr auto AnimSet = 0x7508; // UWeaponFPPAnimationSet*
		constexpr auto WeaponParams = 0x7510; // FWeaponFPPAnimationParams
		constexpr auto WeaponType = 0x75b0; // EWeaponType
		constexpr auto a_inheritance_pose = 0x75b8; // UAnimSequenceBase*
		constexpr auto a_idle = 0x75c0; // UAnimSequenceBase*
		constexpr auto a_ads = 0x75c8; // UAnimSequenceBase*
		constexpr auto a_sprint = 0x75d0; // UAnimSequenceBase*
		constexpr auto crv_ads_enter_t = 0x75d8; // UCurveVector*
		constexpr auto crv_ads_exit_t = 0x75e0; // UCurveVector*
		constexpr auto crv_ads_enter_r = 0x75e8; // UCurveVector*
		constexpr auto crv_ads_exit_r = 0x75f0; // UCurveVector*
		constexpr auto ADS_Weight = 0x75f8; // float
		constexpr auto ADS_Weight_Inv = 0x75fc; // float
		constexpr auto ADS_Anim_T = 0x7600; // FVector
		constexpr auto ADS_Anim_R = 0x760c; // FRotator
		constexpr auto ADS_Offset_T = 0x7618; // FVector
		constexpr auto ADS_Offset_R = 0x7624; // FRotator
		constexpr auto Stance_Weight = 0x7630; // float
		constexpr auto Idle_Offset_T = 0x7634; // FVector
		constexpr auto Idle_Offset_R = 0x7640; // FRotator
		constexpr auto crv_crouch_enter_t = 0x7650; // UCurveVector*
		constexpr auto crv_crouch_exit_t = 0x7658; // UCurveVector*
		constexpr auto crv_crouch_enter_r = 0x7660; // UCurveVector*
		constexpr auto crv_crouch_exit_r = 0x7668; // UCurveVector*
		constexpr auto Crouch_Anim_T = 0x7670; // FVector
		constexpr auto Crouch_Anim_R = 0x767c; // FRotator
		constexpr auto StoredInertiaIndex = 0x7688; // int32_t
		constexpr auto StoredInertiaSample = 0x768c; // int32_t
		constexpr auto Recoil_Phase = 0x7690; // float
		constexpr auto Recoil_Power = 0x7694; // float
		constexpr auto Crouch_Offset_T = 0x7698; // FVector
		constexpr auto Crouch_Offset_R = 0x76a4; // FRotator
		constexpr auto crv_idle_noise = 0x76b0; // UCurveVector*
		constexpr auto Recoil_Reset = 0x76b8; // float
		constexpr auto C_LeftPrio = 0x76bc; // float
		constexpr auto Walk_Phase = 0x76c0; // float
		constexpr auto Recoil_Impulse_Phase = 0x76c4; // float
		constexpr auto Recoil_Impulse_Speed = 0x76c8; // float
		constexpr auto crv_recoil_settle = 0x76d0; // UCurveFloat*
		constexpr auto Walk_Weight = 0x76d8; // float
		constexpr auto crv_walk_t = 0x76e0; // UCurveVector*
		constexpr auto crv_walk_r = 0x76e8; // UCurveVector*
		constexpr auto Walk_Anim_T = 0x76f0; // FVector
		constexpr auto Walk_Anim_R = 0x76fc; // FRotator
		constexpr auto GroundAngle_Spine_R = 0x7708; // FRotator
		constexpr auto GroundAngle_Weapon_T = 0x7714; // FVector
		constexpr auto GroundAngle_Weapon_R = 0x7720; // FRotator
		constexpr auto Idle_Noise_R = 0x772c; // FRotator
		constexpr auto crv_recoil_t = 0x7738; // UCurveVector*
		constexpr auto crv_recoil_r = 0x7740; // UCurveVector*
		constexpr auto crv_recoil_range_r = 0x7748; // UCurveVector*
		constexpr auto RecoilKeys = 0x7750; // FVector
		constexpr auto Weapon_Recoil_T = 0x775c; // FVector
		constexpr auto Weapon_Recoil_R = 0x7768; // FRotator
		constexpr auto WeaponTypeLast = 0x7774; // EWeaponType
		constexpr auto WeaponGroup = 0x7775; // EWeaponGroups_V2
		constexpr auto Obstacle_TraceDistance = 0x7778; // float
		constexpr auto Obstacle_TraceRadius = 0x777c; // float
		constexpr auto Obstacle_HitDistance = 0x7780; // FVector
		constexpr auto Obstacle_HitScale = 0x778c; // float
		constexpr auto IsProne = 0x7790; // bool
		constexpr auto IsReloading = 0x7791; // bool
		constexpr auto IsReloading_F = 0x7794; // float
		constexpr auto IsBraced = 0x7798; // bool
		constexpr auto IsDeployed = 0x7799; // bool
		constexpr auto RegularSprint = 0x779a; // bool
		constexpr auto DeployedWeight = 0x779c; // float
		constexpr auto DeployedWeightInv = 0x77a0; // float
		constexpr auto InterpolatedTargetingWeight = 0x77a4; // float
		constexpr auto WeaponGroup_Last = 0x77a8; // EWeaponGroups_V2
		constexpr auto EquippedGroup = 0x77a9; // EWeaponGroups_V2
		constexpr auto DebugCameraRef = 0x77b0; // APlayerPawn_Anim_V2_C*
		constexpr auto ADS_Speed = 0x77b8; // float
		constexpr auto Bipod_Offset = 0x77bc; // FVector
		constexpr auto Bipod_Rotation = 0x77c8; // FRotator
		constexpr auto DeltaTimeUnclamped = 0x77d4; // float
		constexpr auto DeltaTimeClamped = 0x77d8; // float
		constexpr auto WantsToMove = 0x77dc; // bool
		constexpr auto WantsToMoveDirection = 0x77e0; // FVector
		constexpr auto ADS_TimeStored_Enter = 0x77ec; // float
		constexpr auto ADS_TimeStored_Exit = 0x77f0; // float
		constexpr auto a_idle_deployed = 0x77f8; // UAnimSequenceBase*
		constexpr auto a_brace_enter = 0x7800; // UAnimSequenceBase*
		constexpr auto a_brace_idle = 0x7808; // UAnimSequenceBase*
		constexpr auto a_brace_exit = 0x7810; // UAnimSequenceBase*
		constexpr auto bs_crawl = 0x7818; // UBlendSpace*
		constexpr auto LeanSign = 0x7820; // float
		constexpr auto LeanAngleDiff = 0x7824; // float
		constexpr auto ResetStateMachines = 0x7828; // bool
		constexpr auto ManualADSVectorOffset = 0x782c; // FVector
		constexpr auto SprintOffset = 0x7838; // FVector
		constexpr auto FiredWeapon = 0x7844; // bool
		constexpr auto RootOffset_T = 0x7848; // FVector
		constexpr auto RootOffset_R = 0x7854; // FRotator
		constexpr auto ADS_WeightC = 0x7860; // float
		constexpr auto ADS_Speed_MP = 0x7864; // float
		constexpr auto SimpleSprint_Weight = 0x7868; // float
		constexpr auto Inertia_Weight = 0x786c; // float
		constexpr auto IdleTimer = 0x7870; // float
		constexpr auto MontageFidgets_Rifle = 0x7878; // TArray<UAnimMontage*>
		constexpr auto MontageFidgets_RifleAltPivot = 0x7888; // TArray<UAnimMontage*>
		constexpr auto MontageFidgets_Pistol = 0x7898; // TArray<UAnimMontage*>
		constexpr auto FidgetTypes_Rifle = 0x78a8; // TArray<EWeaponType>
		constexpr auto FidgetTypes_RifleAltPivot = 0x78b8; // TArray<EWeaponType>
		constexpr auto FidgetTypes_Pistol = 0x78c8; // TArray<EWeaponType>
		constexpr auto C_LockIKHands = 0x78d8; // float
		constexpr auto RecoilTime = 0x78dc; // float
		constexpr auto ContinuedRecoilWeight = 0x78e0; // float
		constexpr auto crv_ADS = 0x78e8; // UCurveFloat*
		constexpr auto FiredWeapon_Time = 0x78f0; // float
		constexpr auto Head_R = 0x78f4; // FRotator
		constexpr auto AddInertiaToLeftHand = 0x7900; // bool
		constexpr auto t_ToSprint = 0x7901; // bool
		constexpr auto t_FromSprint = 0x7902; // bool
		constexpr auto t_FromSprint_ToProne = 0x7903; // bool
		constexpr auto t_MovingAndGrounded = 0x7904; // bool
		constexpr auto t_StopMoving = 0x7905; // bool
		constexpr auto InvInertiaPivot = 0x7906; // bool
		constexpr auto PlayerVelocity_Power = 0x7908; // float
		constexpr auto PlayerVelocity_Late = 0x790c; // FVector
		constexpr auto PlayerVelocity_LateDiff = 0x7918; // float
		constexpr auto Movement_Spring = 0x7920; // TArray<FFloatSpringState>
		constexpr auto Inertia_Velocity_Movement = 0x7930; // FVector
		constexpr auto LateInertia_View = 0x7940; // FInertiaPack
		constexpr auto LateInertia_Movement = 0x7968; // FInertiaPack
		constexpr auto DebugCameraView = 0x7990; // bool
		constexpr auto DebugCameraView_T = 0x7994; // FVector
		constexpr auto DebugCameraView_R = 0x79a0; // FRotator
		constexpr auto Time_ObstacleTrace = 0x79ac; // float
		constexpr auto Inertia_Ironsight_Offset = 0x79b0; // float
		constexpr auto IsVaulting = 0x79b4; // bool
		constexpr auto Initialized = 0x79b5; // bool
		constexpr auto CrawlType = 0x79b6; // EWeaponCrawlType_V2
		constexpr auto SprintType = 0x79b7; // ESprintType_V2
		constexpr auto ADSThumb_Weight = 0x79b8; // float
		constexpr auto QueueAnimationSetUpdate = 0x79bc; // bool
		constexpr auto CorrectPanzerPelvis = 0x79bd; // bool
		constexpr auto ProceduralResult_R_Inv = 0x79c0; // FRotator
		constexpr auto OwnerRef = 0x79d0; // AShooterCharacter*
		constexpr auto TempDisableAnim = 0x79d8; // bool
		constexpr auto JointTargetOffset_Left = 0x79dc; // FVector
		constexpr auto JointTargetOffset_Right = 0x79e8; // FVector
		constexpr auto JointTargetOffset_Left_weight = 0x79f4; // float
		constexpr auto JointTargetOffset_Right_weight = 0x79f8; // float
		constexpr auto JointTargetOffset_Globalweight = 0x79fc; // float
		constexpr auto PlayerSpeedNormalized = 0x7a00; // float
		constexpr auto SprintPlayRate = 0x7a04; // float
		constexpr auto BipodRange_Vertical = 0x7a08; // TArray<FWeaponType_GetVec>
		constexpr auto BipodRange_Horizontal = 0x7a18; // TArray<FWeaponType_GetVec>
		constexpr auto BipodRange_BaseOffset = 0x7a28; // TArray<FWeaponType_GetVec>
		constexpr auto CameraInertiaCurrent = 0x7a38; // FVector
		constexpr auto CameraInertiaLast = 0x7a44; // FVector
		constexpr auto C_ThrowInertia = 0x7a50; // float
		constexpr auto ADS_AnimWeight_Base = 0x7a54; // float
		constexpr auto ADS_AnimWeight_Clamped = 0x7a58; // float
		constexpr auto ADS_AnimWeight_Unclamped = 0x7a5c; // float
		constexpr auto PlayerSpeedNormalizedUnclamped = 0x7a60; // float
		constexpr auto A_Jump = 0x7a68; // UAnimMontage*
	}

	namespace n_AMapData_Sector_C {
		constexpr auto DefaultSceneRoot = 0x240; // USceneComponent*
	}

	namespace n_UHTP_Widget_Role_Loadout_AntiTank_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_2 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_3 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_5 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_6 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x270; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x278; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x280; // UImage*
		constexpr auto Image_10 = 0x288; // UImage*
		constexpr auto Image_17 = 0x290; // UImage*
	}

	namespace n_UBTDecorator_Cooldown {
		constexpr auto CooldownTime = 0x68; // float
	}

	namespace n_USpeakingPlayersList {
		constexpr auto VOIPIndicator = 0x230; // UImage*
		constexpr auto PlayersList = 0x238; // UVerticalBox*
	}

	namespace n_UDistributionVectorUniform {
		constexpr auto Max = 0x38; // FVector
		constexpr auto Min = 0x44; // FVector
		constexpr auto bLockAxes = 0x50; // char : 1
		constexpr auto LockedAxes = 0x54; // EDistributionVectorLockFlags
		constexpr auto MirrorFlags = 0x55; // EDistributionVectorMirrorFlags [0x3]
		constexpr auto bUseExtremes = 0x58; // char : 1
	}

	namespace n_UFakeMouseCursor_C {
		constexpr auto Image_1 = 0x230; // UImage*
	}

	namespace n_UCloudStorageBase {
		constexpr auto LocalCloudFiles = 0x38; // TArray<FString>
		constexpr auto bSuppressDelegateCalls = 0x48; // char : 1
	}

	namespace n_UEngine {
		constexpr auto TinyFont = 0x30; // UFont*
		constexpr auto TinyFontName = 0x38; // FSoftObjectPath
		constexpr auto SmallFont = 0x50; // UFont*
		constexpr auto SmallFontName = 0x58; // FSoftObjectPath
		constexpr auto MediumFont = 0x70; // UFont*
		constexpr auto MediumFontName = 0x78; // FSoftObjectPath
		constexpr auto LargeFont = 0x90; // UFont*
		constexpr auto LargeFontName = 0x98; // FSoftObjectPath
		constexpr auto SubtitleFont = 0xb0; // UFont*
		constexpr auto SubtitleFontName = 0xb8; // FSoftObjectPath
		constexpr auto AdditionalFonts = 0xd0; // TArray<UFont*>
		constexpr auto AdditionalFontNames = 0xe8; // TArray<FString>
		constexpr auto ConsoleClass = 0xf8; // UConsole*
		constexpr auto ConsoleClassName = 0x100; // FSoftClassPath
		constexpr auto GameViewportClientClass = 0x118; // UGameViewportClient*
		constexpr auto GameViewportClientClassName = 0x120; // FSoftClassPath
		constexpr auto LocalPlayerClass = 0x138; // ULocalPlayer*
		constexpr auto LocalPlayerClassName = 0x140; // FSoftClassPath
		constexpr auto WorldSettingsClass = 0x158; // AWorldSettings*
		constexpr auto WorldSettingsClassName = 0x160; // FSoftClassPath
		constexpr auto NavigationSystemClassName = 0x178; // FSoftClassPath
		constexpr auto NavigationSystemClass = 0x190; // UNavigationSystemBase*
		constexpr auto NavigationSystemConfigClassName = 0x198; // FSoftClassPath
		constexpr auto NavigationSystemConfigClass = 0x1b0; // UNavigationSystemConfig*
		constexpr auto AvoidanceManagerClassName = 0x1b8; // FSoftClassPath
		constexpr auto AvoidanceManagerClass = 0x1d0; // UAvoidanceManager*
		constexpr auto PhysicsCollisionHandlerClass = 0x1d8; // UPhysicsCollisionHandler*
		constexpr auto PhysicsCollisionHandlerClassName = 0x1e0; // FSoftClassPath
		constexpr auto GameUserSettingsClassName = 0x1f8; // FSoftClassPath
		constexpr auto GameUserSettingsClass = 0x210; // UGameUserSettings*
		constexpr auto AIControllerClassName = 0x218; // FSoftClassPath
		constexpr auto GameUserSettings = 0x230; // UGameUserSettings*
		constexpr auto LevelScriptActorClass = 0x238; // ALevelScriptActor*
		constexpr auto LevelScriptActorClassName = 0x240; // FSoftClassPath
		constexpr auto DefaultBlueprintBaseClassName = 0x258; // FSoftClassPath
		constexpr auto GameSingletonClassName = 0x270; // FSoftClassPath
		constexpr auto GameSingleton = 0x288; // UObject*
		constexpr auto AssetManagerClassName = 0x290; // FSoftClassPath
		constexpr auto AssetManager = 0x2a8; // UAssetManager*
		constexpr auto DefaultTexture = 0x2b0; // UTexture2D*
		constexpr auto DefaultTextureName = 0x2b8; // FSoftObjectPath
		constexpr auto DefaultDiffuseTexture = 0x2d0; // UTexture*
		constexpr auto DefaultDiffuseTextureName = 0x2d8; // FSoftObjectPath
		constexpr auto DefaultBSPVertexTexture = 0x2f0; // UTexture2D*
		constexpr auto DefaultBSPVertexTextureName = 0x2f8; // FSoftObjectPath
		constexpr auto HighFrequencyNoiseTexture = 0x310; // UTexture2D*
		constexpr auto HighFrequencyNoiseTextureName = 0x318; // FSoftObjectPath
		constexpr auto DefaultBokehTexture = 0x330; // UTexture2D*
		constexpr auto DefaultBokehTextureName = 0x338; // FSoftObjectPath
		constexpr auto DefaultBloomKernelTexture = 0x350; // UTexture2D*
		constexpr auto DefaultBloomKernelTextureName = 0x358; // FSoftObjectPath
		constexpr auto WireframeMaterial = 0x370; // UMaterial*
		constexpr auto WireframeMaterialName = 0x378; // FString
		constexpr auto DebugMeshMaterial = 0x388; // UMaterial*
		constexpr auto DebugMeshMaterialName = 0x390; // FSoftObjectPath
		constexpr auto EmissiveMeshMaterial = 0x3a8; // UMaterial*
		constexpr auto EmissiveMeshMaterialName = 0x3b0; // FSoftObjectPath
		constexpr auto LevelColorationLitMaterial = 0x3c8; // UMaterial*
		constexpr auto LevelColorationLitMaterialName = 0x3d0; // FString
		constexpr auto LevelColorationUnlitMaterial = 0x3e0; // UMaterial*
		constexpr auto LevelColorationUnlitMaterialName = 0x3e8; // FString
		constexpr auto LightingTexelDensityMaterial = 0x3f8; // UMaterial*
		constexpr auto LightingTexelDensityName = 0x400; // FString
		constexpr auto ShadedLevelColorationLitMaterial = 0x410; // UMaterial*
		constexpr auto ShadedLevelColorationLitMaterialName = 0x418; // FString
		constexpr auto ShadedLevelColorationUnlitMaterial = 0x428; // UMaterial*
		constexpr auto ShadedLevelColorationUnlitMaterialName = 0x430; // FString
		constexpr auto RemoveSurfaceMaterial = 0x440; // UMaterial*
		constexpr auto RemoveSurfaceMaterialName = 0x448; // FSoftObjectPath
		constexpr auto VertexColorMaterial = 0x460; // UMaterial*
		constexpr auto VertexColorMaterialName = 0x468; // FString
		constexpr auto VertexColorViewModeMaterial_ColorOnly = 0x478; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_ColorOnly = 0x480; // FString
		constexpr auto VertexColorViewModeMaterial_AlphaAsColor = 0x490; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_AlphaAsColor = 0x498; // FString
		constexpr auto VertexColorViewModeMaterial_RedOnly = 0x4a8; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_RedOnly = 0x4b0; // FString
		constexpr auto VertexColorViewModeMaterial_GreenOnly = 0x4c0; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_GreenOnly = 0x4c8; // FString
		constexpr auto VertexColorViewModeMaterial_BlueOnly = 0x4d8; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_BlueOnly = 0x4e0; // FString
		constexpr auto DebugEditorMaterialName = 0x4f0; // FSoftObjectPath
		constexpr auto ConstraintLimitMaterial = 0x508; // UMaterial*
		constexpr auto ConstraintLimitMaterialX = 0x510; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialXAxis = 0x518; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialY = 0x520; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialYAxis = 0x528; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialZ = 0x530; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialZAxis = 0x538; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialPrismatic = 0x540; // UMaterialInstanceDynamic*
		constexpr auto InvalidLightmapSettingsMaterial = 0x548; // UMaterial*
		constexpr auto InvalidLightmapSettingsMaterialName = 0x550; // FSoftObjectPath
		constexpr auto PreviewShadowsIndicatorMaterial = 0x568; // UMaterial*
		constexpr auto PreviewShadowsIndicatorMaterialName = 0x570; // FSoftObjectPath
		constexpr auto ArrowMaterial = 0x588; // UMaterial*
		constexpr auto ArrowMaterialYellow = 0x590; // UMaterialInstanceDynamic*
		constexpr auto ArrowMaterialName = 0x598; // FSoftObjectPath
		constexpr auto LightingOnlyBrightness = 0x5b0; // FLinearColor
		constexpr auto ShaderComplexityColors = 0x5c0; // TArray<FLinearColor>
		constexpr auto QuadComplexityColors = 0x5d0; // TArray<FLinearColor>
		constexpr auto LightComplexityColors = 0x5e0; // TArray<FLinearColor>
		constexpr auto StationaryLightOverlapColors = 0x5f0; // TArray<FLinearColor>
		constexpr auto LODColorationColors = 0x600; // TArray<FLinearColor>
		constexpr auto HLODColorationColors = 0x610; // TArray<FLinearColor>
		constexpr auto StreamingAccuracyColors = 0x620; // TArray<FLinearColor>
		constexpr auto MaxPixelShaderAdditiveComplexityCount = 0x630; // float
		constexpr auto MaxES3PixelShaderAdditiveComplexityCount = 0x634; // float
		constexpr auto MinLightMapDensity = 0x638; // float
		constexpr auto IdealLightMapDensity = 0x63c; // float
		constexpr auto MaxLightMapDensity = 0x640; // float
		constexpr auto bRenderLightMapDensityGrayscale = 0x644; // char : 1
		constexpr auto RenderLightMapDensityGrayscaleScale = 0x648; // float
		constexpr auto RenderLightMapDensityColorScale = 0x64c; // float
		constexpr auto LightMapDensityVertexMappedColor = 0x650; // FLinearColor
		constexpr auto LightMapDensitySelectedColor = 0x660; // FLinearColor
		constexpr auto StatColorMappings = 0x670; // TArray<FStatColorMapping>
		constexpr auto DefaultPhysMaterial = 0x680; // UPhysicalMaterial*
		constexpr auto DefaultPhysMaterialName = 0x688; // FSoftObjectPath
		constexpr auto ActiveGameNameRedirects = 0x6a0; // TArray<FGameNameRedirect>
		constexpr auto ActiveClassRedirects = 0x6b0; // TArray<FClassRedirect>
		constexpr auto ActivePluginRedirects = 0x6c0; // TArray<FPluginRedirect>
		constexpr auto ActiveStructRedirects = 0x6d0; // TArray<FStructRedirect>
		constexpr auto PreIntegratedSkinBRDFTexture = 0x6e0; // UTexture2D*
		constexpr auto PreIntegratedSkinBRDFTextureName = 0x6e8; // FSoftObjectPath
		constexpr auto BlueNoiseTexture = 0x700; // UTexture2D*
		constexpr auto BlueNoiseTextureName = 0x708; // FSoftObjectPath
		constexpr auto MiniFontTexture = 0x720; // UTexture2D*
		constexpr auto MiniFontTextureName = 0x728; // FSoftObjectPath
		constexpr auto WeightMapPlaceholderTexture = 0x740; // UTexture*
		constexpr auto WeightMapPlaceholderTextureName = 0x748; // FSoftObjectPath
		constexpr auto LightMapDensityTexture = 0x760; // UTexture2D*
		constexpr auto LightMapDensityTextureName = 0x768; // FSoftObjectPath
		constexpr auto GameViewport = 0x788; // UGameViewportClient*
		constexpr auto DeferredCommands = 0x790; // TArray<FString>
		constexpr auto TickCycles = 0x7a0; // int32_t
		constexpr auto GameCycles = 0x7a4; // int32_t
		constexpr auto ClientCycles = 0x7a8; // int32_t
		constexpr auto NearClipPlane = 0x7ac; // float
		constexpr auto bHardwareSurveyEnabled = 0x7b0; // char : 1
		constexpr auto bSubtitlesEnabled = 0x7b0; // char : 1
		constexpr auto bSubtitlesForcedOff = 0x7b0; // char : 1
		constexpr auto MaximumLoopIterationCount = 0x7b4; // int32_t
		constexpr auto bCanBlueprintsTickByDefault = 0x7b8; // char : 1
		constexpr auto bOptimizeAnimBlueprintMemberVariableAccess = 0x7b8; // char : 1
		constexpr auto bAllowMultiThreadedAnimationUpdate = 0x7b8; // char : 1
		constexpr auto bEnableEditorPSysRealtimeLOD = 0x7b8; // char : 1
		constexpr auto bSmoothFrameRate = 0x7b8; // char : 1
		constexpr auto bUseFixedFrameRate = 0x7b8; // char : 1
		constexpr auto FixedFrameRate = 0x7bc; // float
		constexpr auto SmoothedFrameRateRange = 0x7c0; // FFloatRange
		constexpr auto CustomTimeStep = 0x7d0; // UEngineCustomTimeStep*
		constexpr auto CustomTimeStepClassName = 0x7f8; // FSoftClassPath
		constexpr auto TimecodeProvider = 0x810; // UTimecodeProvider*
		constexpr auto TimecodeProviderClassName = 0x838; // FSoftClassPath
		constexpr auto bGenerateDefaultTimecode = 0x850; // bool
		constexpr auto GenerateDefaultTimecodeFrameRate = 0x854; // FFrameRate
		constexpr auto GenerateDefaultTimecodeFrameDelay = 0x85c; // float
		constexpr auto bCheckForMultiplePawnsSpawnedInAFrame = 0x860; // char : 1
		constexpr auto NumPawnsAllowedToBeSpawnedInAFrame = 0x864; // int32_t
		constexpr auto bShouldGenerateLowQualityLightmaps = 0x868; // char : 1
		constexpr auto C_WorldBox = 0x86c; // FColor
		constexpr auto C_BrushWire = 0x870; // FColor
		constexpr auto C_AddWire = 0x874; // FColor
		constexpr auto C_SubtractWire = 0x878; // FColor
		constexpr auto C_SemiSolidWire = 0x87c; // FColor
		constexpr auto C_NonSolidWire = 0x880; // FColor
		constexpr auto C_WireBackground = 0x884; // FColor
		constexpr auto C_ScaleBoxHi = 0x888; // FColor
		constexpr auto C_VolumeCollision = 0x88c; // FColor
		constexpr auto C_BSPCollision = 0x890; // FColor
		constexpr auto C_OrthoBackground = 0x894; // FColor
		constexpr auto C_Volume = 0x898; // FColor
		constexpr auto C_BrushShape = 0x89c; // FColor
		constexpr auto StreamingDistanceFactor = 0x8a0; // float
		constexpr auto GameScreenshotSaveDirectory = 0x8a8; // FDirectoryPath
		constexpr auto TransitionType = 0x8b8; // ETransitionType
		constexpr auto TransitionDescription = 0x8c0; // FString
		constexpr auto TransitionGameMode = 0x8d0; // FString
		constexpr auto MeshLODRange = 0x8e0; // float
		constexpr auto bAllowMatureLanguage = 0x8e4; // char : 1
		constexpr auto CameraRotationThreshold = 0x8e8; // float
		constexpr auto CameraTranslationThreshold = 0x8ec; // float
		constexpr auto PrimitiveProbablyVisibleTime = 0x8f0; // float
		constexpr auto MaxOcclusionPixelsFraction = 0x8f4; // float
		constexpr auto bPauseOnLossOfFocus = 0x8f8; // char : 1
		constexpr auto MaxParticleResize = 0x8fc; // int32_t
		constexpr auto MaxParticleResizeWarn = 0x900; // int32_t
		constexpr auto PendingDroppedNotes = 0x908; // TArray<FDropNoteInfo>
		constexpr auto NetClientTicksPerSecond = 0x918; // float
		constexpr auto DisplayGamma = 0x91c; // float
		constexpr auto MinDesiredFrameRate = 0x920; // float
		constexpr auto DefaultSelectedMaterialColor = 0x924; // FLinearColor
		constexpr auto SelectedMaterialColor = 0x934; // FLinearColor
		constexpr auto SelectionOutlineColor = 0x944; // FLinearColor
		constexpr auto SubduedSelectionOutlineColor = 0x954; // FLinearColor
		constexpr auto SelectedMaterialColorOverride = 0x964; // FLinearColor
		constexpr auto bIsOverridingSelectedColor = 0x974; // bool
		constexpr auto bEnableOnScreenDebugMessages = 0x978; // char : 1
		constexpr auto bEnableOnScreenDebugMessagesDisplay = 0x978; // char : 1
		constexpr auto bSuppressMapWarnings = 0x978; // char : 1
		constexpr auto bDisableAILogging = 0x978; // char : 1
		constexpr auto bEnableVisualLogRecordingOnStart = 0x97c; // uint32_t
		constexpr auto ScreenSaverInhibitorSemaphore = 0x984; // int32_t
		constexpr auto bLockReadOnlyLevels = 0x988; // char : 1
		constexpr auto ParticleEventManagerClassPath = 0x990; // FString
		constexpr auto SelectionHighlightIntensity = 0x9a0; // float
		constexpr auto BSPSelectionHighlightIntensity = 0x9a4; // float
		constexpr auto SelectionHighlightIntensityBillboards = 0x9a8; // float
		constexpr auto NetDriverDefinitions = 0xbf8; // TArray<FNetDriverDefinition>
		constexpr auto ServerActors = 0xc08; // TArray<FString>
		constexpr auto RuntimeServerActors = 0xc18; // TArray<FString>
		constexpr auto NetErrorLogInterval = 0xc28; // float
		constexpr auto bStartedLoadMapMovie = 0xc2c; // char : 1
		constexpr auto NextWorldContextHandle = 0xc48; // int32_t
	}

	namespace n_AHLLCommanderAbility_Selection {
		constexpr auto SelectionContext = 0x350; // TWeakObjectPtr<UObject>
		constexpr auto bIsSelectionValid = 0x358; // char : 1
	}

	namespace n_UHLLMapContextWidget {
		constexpr auto OwningMap = 0x230; // TWeakObjectPtr<UHLLOverviewMapWrapper>
		constexpr auto MapPosition = 0x238; // FVector2D
		constexpr auto bClosed = 0x240; // char : 1
	}

	namespace n_AWindDirectionalSource {
		constexpr auto Component = 0x220; // UWindDirectionalSourceComponent*
	}

	namespace n_URendererOverrideSettings {
		constexpr auto bSupportAllShaderPermutations = 0x38; // char : 1
		constexpr auto bForceRecomputeTangents = 0x38; // char : 1
	}

	namespace n_ALandscapeProxy {
		constexpr auto SplineComponent = 0x220; // ULandscapeSplinesComponent*
		constexpr auto LandscapeGuid = 0x228; // FGuid
		constexpr auto LandscapeSectionOffset = 0x238; // FIntPoint
		constexpr auto MaxLODLevel = 0x240; // int32_t
		constexpr auto LODDistanceFactor = 0x244; // float
		constexpr auto LODFalloff = 0x248; // ELandscapeLODFalloff
		constexpr auto ComponentScreenSizeToUseSubSections = 0x24c; // float
		constexpr auto LOD0ScreenSize = 0x250; // float
		constexpr auto LOD0DistributionSetting = 0x254; // float
		constexpr auto LODDistributionSetting = 0x258; // float
		constexpr auto TessellationComponentScreenSize = 0x25c; // float
		constexpr auto UseTessellationComponentScreenSizeFalloff = 0x260; // bool
		constexpr auto TessellationComponentScreenSizeFalloff = 0x264; // float
		constexpr auto OccluderGeometryLOD = 0x268; // int32_t
		constexpr auto StaticLightingLOD = 0x26c; // int32_t
		constexpr auto DefaultPhysMaterial = 0x270; // UPhysicalMaterial*
		constexpr auto StreamingDistanceMultiplier = 0x278; // float
		constexpr auto LandscapeMaterial = 0x280; // UMaterialInterface*
		constexpr auto LandscapeHoleMaterial = 0x2a8; // UMaterialInterface*
		constexpr auto LandscapeMaterialsOverride = 0x2b0; // TArray<FLandscapeProxyMaterialOverride>
		constexpr auto bMeshHoles = 0x2c0; // bool
		constexpr auto MeshHolesMaxLod = 0x2c1; // char
		constexpr auto RuntimeVirtualTextures = 0x2c8; // TArray<URuntimeVirtualTexture*>
		constexpr auto VirtualTextureNumLods = 0x2d8; // int32_t
		constexpr auto VirtualTextureLodBias = 0x2dc; // int32_t
		constexpr auto VirtualTextureRenderPassType = 0x2e0; // ERuntimeVirtualTextureMainPassType
		constexpr auto NegativeZBoundsExtension = 0x2e4; // float
		constexpr auto PositiveZBoundsExtension = 0x2e8; // float
		constexpr auto LandscapeComponents = 0x2f0; // TArray<ULandscapeComponent*>
		constexpr auto CollisionComponents = 0x300; // TArray<ULandscapeHeightfieldCollisionComponent*>
		constexpr auto FoliageComponents = 0x310; // TArray<UHierarchicalInstancedStaticMeshComponent*>
		constexpr auto bHasLandscapeGrass = 0x384; // bool
		constexpr auto StaticLightingResolution = 0x388; // float
		constexpr auto bCastStaticShadow = 0x38c; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x38c; // char : 1
		constexpr auto bCastFarShadow = 0x38c; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x390; // char : 1
		constexpr auto LightingChannels = 0x391; // FLightingChannels
		constexpr auto bUseMaterialPositionOffsetInStaticLighting = 0x394; // char : 1
		constexpr auto bRenderCustomDepth = 0x394; // char : 1
		constexpr auto CustomDepthStencilValue = 0x398; // int32_t
		constexpr auto LDMaxDrawDistance = 0x39c; // float
		constexpr auto LightmassSettings = 0x3a0; // FLightmassPrimitiveSettings
		constexpr auto CollisionMipLevel = 0x3b8; // int32_t
		constexpr auto SimpleCollisionMipLevel = 0x3bc; // int32_t
		constexpr auto CollisionThickness = 0x3c0; // float
		constexpr auto BodyInstance = 0x3c8; // FBodyInstance
		constexpr auto bGenerateOverlapEvents = 0x4f8; // char : 1
		constexpr auto bBakeMaterialPositionOffsetIntoCollision = 0x4f8; // char : 1
		constexpr auto ComponentSizeQuads = 0x4fc; // int32_t
		constexpr auto SubsectionSizeQuads = 0x500; // int32_t
		constexpr auto NumSubsections = 0x504; // int32_t
		constexpr auto bUsedForNavigation = 0x508; // char : 1
		constexpr auto bFillCollisionUnderLandscapeForNavmesh = 0x508; // char : 1
		constexpr auto bUseDynamicMaterialInstance = 0x50c; // bool
		constexpr auto NavigationGeometryGatheringMode = 0x50d; // ENavDataGatheringMode
		constexpr auto bUseLandscapeForCullingInvisibleHLODVertices = 0x50e; // bool
		constexpr auto bHasLayersContent = 0x50f; // bool
		constexpr auto WeightmapUsageMap = 0x510; // TMap<UTexture2D*, ULandscapeWeightmapUsage*>
	}

	namespace n_UParticleModuleRequired {
		constexpr auto Material = 0x30; // UMaterialInterface*
		constexpr auto MinFacingCameraBlendDistance = 0x38; // float
		constexpr auto MaxFacingCameraBlendDistance = 0x3c; // float
		constexpr auto EmitterOrigin = 0x40; // FVector
		constexpr auto EmitterRotation = 0x4c; // FRotator
		constexpr auto ScreenAlignment = 0x58; // EParticleScreenAlignment
		constexpr auto bUseLocalSpace = 0x59; // char : 1
		constexpr auto bKillOnDeactivate = 0x59; // char : 1
		constexpr auto bKillOnCompleted = 0x59; // char : 1
		constexpr auto SortMode = 0x5a; // EParticleSortMode
		constexpr auto bUseLegacyEmitterTime = 0x5b; // char : 1
		constexpr auto bRemoveHMDRoll = 0x5b; // char : 1
		constexpr auto bEmitterDurationUseRange = 0x5b; // char : 1
		constexpr auto EmitterDuration = 0x5c; // float
		constexpr auto SpawnRate = 0x60; // FRawDistributionFloat
		constexpr auto BurstList = 0x90; // TArray<FParticleBurst>
		constexpr auto EmitterDelay = 0xa0; // float
		constexpr auto EmitterDelayLow = 0xa4; // float
		constexpr auto bDelayFirstLoopOnly = 0xa8; // char : 1
		constexpr auto InterpolationMethod = 0xa9; // EParticleSubUVInterpMethod
		constexpr auto bScaleUV = 0xaa; // char : 1
		constexpr auto bEmitterDelayUseRange = 0xaa; // char : 1
		constexpr auto ParticleBurstMethod = 0xab; // EParticleBurstMethod
		constexpr auto bOverrideSystemMacroUV = 0xac; // char : 1
		constexpr auto bUseMaxDrawCount = 0xac; // char : 1
		constexpr auto OpacitySourceMode = 0xad; // EOpacitySourceMode
		constexpr auto EmitterNormalsMode = 0xae; // EEmitterNormalsMode
		constexpr auto bOrbitModuleAffectsVelocityAlignment = 0xaf; // char : 1
		constexpr auto SubImages_Horizontal = 0xb0; // int32_t
		constexpr auto SubImages_Vertical = 0xb4; // int32_t
		constexpr auto RandomImageTime = 0xb8; // float
		constexpr auto RandomImageChanges = 0xbc; // int32_t
		constexpr auto MacroUVPosition = 0xc0; // FVector
		constexpr auto MacroUVRadius = 0xcc; // float
		constexpr auto UVFlippingMode = 0xd0; // EParticleUVFlipMode
		constexpr auto BoundingMode = 0xd1; // ESubUVBoundingVertexCount
		constexpr auto bDurationRecalcEachLoop = 0xd2; // char : 1
		constexpr auto NormalsSphereCenter = 0xd4; // FVector
		constexpr auto AlphaThreshold = 0xe0; // float
		constexpr auto EmitterLoops = 0xe4; // int32_t
		constexpr auto CutoutTexture = 0xe8; // UTexture2D*
		constexpr auto MaxDrawCount = 0xf0; // int32_t
		constexpr auto EmitterDurationLow = 0xf4; // float
		constexpr auto NormalsCylinderDirection = 0xf8; // FVector
		constexpr auto NamedMaterialOverrides = 0x108; // TArray<FName>
	}

	namespace n_UAnimSequenceBase {
		constexpr auto Notifies = 0x80; // TArray<FAnimNotifyEvent>
		constexpr auto SequenceLength = 0x90; // float
		constexpr auto RateScale = 0x94; // float
		constexpr auto RawCurveData = 0x98; // FRawCurveTracks
	}

	namespace n_UAnimNotifyState_TimedParticleEffect {
		constexpr auto PSTemplate = 0x30; // UParticleSystem*
		constexpr auto SocketName = 0x38; // FName
		constexpr auto LocationOffset = 0x40; // FVector
		constexpr auto RotationOffset = 0x4c; // FRotator
		constexpr auto bDestroyAtEnd = 0x58; // bool
	}

	namespace n_UMaterialExpressionCrossProduct {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
	}

	namespace n_UMovieSceneParticleTrack {
		constexpr auto ParticleSections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_AWarfareStart {
		constexpr auto Team = 0x258; // ETeam
		constexpr auto Group = 0x25c; // int32_t
	}

	namespace n_UBTDecorator_BlackboardBase {
		constexpr auto BlackboardKey = 0x68; // FBlackboardKeySelector
	}

	namespace n_UWidgetBlueprintGeneratedClass {
		constexpr auto WidgetTree = 0x328; // UWidgetTree*
		constexpr auto bAllowTemplate = 0x330; // char : 1
		constexpr auto bAllowDynamicCreation = 0x330; // char : 1
		constexpr auto bValidTemplate = 0x330; // char : 1
		constexpr auto bTemplateInitialized = 0x330; // char : 1
		constexpr auto bCookedTemplate = 0x330; // char : 1
		constexpr auto bClassRequiresNativeTick = 0x330; // char : 1
		constexpr auto Bindings = 0x338; // TArray<FDelegateRuntimeBinding>
		constexpr auto Animations = 0x348; // TArray<UWidgetAnimation*>
		constexpr auto NamedSlots = 0x358; // TArray<FName>
		constexpr auto TemplateAsset = 0x368; // TSoftObjectPtr<UUserWidget>
		constexpr auto Template = 0x390; // UUserWidget*
	}

	namespace n_UPathFollowingComponent {
		constexpr auto MovementComp = 0xe8; // UNavMovementComponent*
		constexpr auto MyNavData = 0xf8; // ANavigationData*
	}

	namespace n_UVehicleAntiFlipComponent {
		constexpr auto CorrectiveForceCurve = 0xb0; // UCurveFloat*
		constexpr auto MaxCorrectiveVelocity = 0xb8; // float
		constexpr auto CorrectionProbeInterval = 0xbc; // float
		constexpr auto CorrectionBurstDuration = 0xc0; // float
	}

	namespace n_USplineMeshComponent {
		constexpr auto SplineParams = 0x4a8; // FSplineMeshParams
		constexpr auto SplineUpDir = 0x500; // FVector
		constexpr auto SplineBoundaryMin = 0x50c; // float
		constexpr auto CachedMeshBodySetupGuid = 0x510; // FGuid
		constexpr auto BodySetup = 0x520; // UBodySetup*
		constexpr auto SplineBoundaryMax = 0x528; // float
		constexpr auto bAllowSplineEditingPerInstance = 0x52c; // char : 1
		constexpr auto bSmoothInterpRollScale = 0x52c; // char : 1
		constexpr auto bMeshDirty = 0x52c; // char : 1
		constexpr auto ForwardAxis = 0x52d; // ESplineMeshAxis
		constexpr auto VirtualTextureMainPassMaxDrawDistance = 0x530; // float
	}

	namespace n_AMobileSpawn {
		constexpr auto WaveIntervalSeconds = 0x230; // float
		constexpr auto SpawnGatherParams = 0x234; // FDynamicSpawnGatherParams
		constexpr auto NearbySpawnEnemyDetection = 0x260; // UNearbySpawnEnemyDetection*
		constexpr auto SpawnMapComponent = 0x268; // UHLLMapComponent*
		constexpr auto SpawnAudio = 0x270; // UAudioComponent*
		constexpr auto NextSpawnWaveTime = 0x278; // float
		constexpr auto bAllowedToDeploy = 0x27c; // char : 1
		constexpr auto bIsDrowning = 0x27c; // char : 1
		constexpr auto MovementSpeedKph = 0x280; // float
		constexpr auto NumAvailableSpawnLocations = 0x284; // char
		constexpr auto Team = 0x285; // ETeam
	}

	namespace n_UDynamicEntryBoxBase {
		constexpr auto EntryBoxType = 0x108; // EDynamicBoxType
		constexpr auto EntrySpacing = 0x10c; // FVector2D
		constexpr auto SpacingPattern = 0x118; // TArray<FVector2D>
		constexpr auto EntrySizeRule = 0x128; // FSlateChildSize
		constexpr auto EntryHorizontalAlignment = 0x130; // EHorizontalAlignment
		constexpr auto EntryVerticalAlignment = 0x131; // EVerticalAlignment
		constexpr auto MaxElementSize = 0x134; // int32_t
		constexpr auto EntryWidgetPool = 0x148; // FUserWidgetPool
	}

	namespace n_UBlackboardData {
		constexpr auto Parent = 0x30; // UBlackboardData*
		constexpr auto Keys = 0x38; // TArray<FBlackboardEntry>
		constexpr auto bHasSynchronizedKeys = 0x48; // char : 1
	}

	namespace n_URuntimeVirtualTextureComponent {
		constexpr auto VirtualTexture = 0x1f0; // URuntimeVirtualTexture*
		constexpr auto bUseStreamingLowMipsInEditor = 0x1f8; // bool
		constexpr auto BoundsSourceActor = 0x200; // AActor*
	}

	namespace n_UCurveLinearColorAtlas {
		constexpr auto TextureSize = 0xe8; // uint32_t
		constexpr auto GradientCurves = 0xf0; // TArray<UCurveLinearColor*>
	}

	namespace n_UPlatformEventsComponent {
		constexpr auto PlatformChangedToLaptopModeDelegate = 0xb0; // FMulticastInlineDelegate
		constexpr auto PlatformChangedToTabletModeDelegate = 0xc0; // FMulticastInlineDelegate
	}

	namespace n_UHLLMapIcon_SectorBooster {
		constexpr auto ProfileSwitcher = 0x368; // UWidgetSwitcher*
		constexpr auto RootSBox = 0x370; // USizeBox*
	}

	namespace n_UMaterialExpressionArccosine {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_AHLLDispenserItem_Base {
		constexpr auto DummyRoot = 0x220; // USceneComponent*
		constexpr auto GhostMesh = 0x228; // UStaticMeshComponent*
		constexpr auto PlacementGuard = 0x230; // UBoxComponent*
		constexpr auto GhostMaterial = 0x238; // UMaterialInterface*
		constexpr auto GhostMeshDMI = 0x240; // UMaterialInstanceDynamic*
		constexpr auto GhostOwnerObject = 0x248; // UObject*
		constexpr auto ItemToDispense = 0x250; // AActor*
		constexpr auto bDestroyItemsWhenKilled = 0x258; // char : 1
		constexpr auto bCanEditAutoDestroy = 0x258; // char : 1
		constexpr auto bAutoDestroyItems = 0x258; // char : 1
		constexpr auto MaxTotalDispensedItems = 0x259; // char
		constexpr auto bMaxBuildDepthOverride = 0x25a; // char : 1
		constexpr auto MaxBuildDepthOverride = 0x25c; // float
		constexpr auto ScoreTypeWhenPlaced = 0x260; // FName
		constexpr auto ScoreModifier = 0x268; // float
		constexpr auto StatIncrementType = 0x26c; // EHLLPlayerStat
		constexpr auto bBlockInEnemySectors = 0x26d; // char : 1
		constexpr auto bBlockInNeutralSectors = 0x26d; // char : 1
		constexpr auto bBlockInFriendlyBaseSectors = 0x26d; // char : 1
		constexpr auto LockedEnemySectorRule = 0x26e; // EHLLDispenseSectorRule
		constexpr auto UnlockedEnemySectorRule = 0x26f; // EHLLDispenseSectorRule
		constexpr auto SurfaceRule = 0x270; // EHLLDispenseSurfaceRule
		constexpr auto TraceDistance = 0x274; // float
		constexpr auto TraceHeight = 0x278; // float
		constexpr auto DropTime = 0x27c; // float
		constexpr auto MaxSurfaceAngle = 0x280; // float
		constexpr auto FloorChannel = 0x284; // ECollisionChannel
		constexpr auto SurfaceChannel = 0x285; // ECollisionChannel
		constexpr auto SurfaceResponses = 0x286; // FCollisionResponseContainer
		constexpr auto AttachWhitelist = 0x2a8; // TArray<AActor*>
		constexpr auto AttachBlacklist = 0x2b8; // TArray<AActor*>
		constexpr auto ItemName = 0x2c8; // FText
		constexpr auto ItemBrush = 0x2e0; // FSlateBrush
		constexpr auto ListItemWidgetClass = 0x368; // UHLLDispenserListItem*
		constexpr auto DispenseParticle = 0x370; // UParticleSystem*
		constexpr auto DispenseSound = 0x378; // USoundBase*
		constexpr auto InvalidPlacement_Generic = 0x380; // FText
		constexpr auto InvalidPlacement_PlayerLocation = 0x398; // FText
		constexpr auto InvalidPlacement_EnemySector = 0x3b0; // FText
		constexpr auto InvalidPlacement_NeutralSector = 0x3c8; // FText
		constexpr auto InvalidPlacement_LockedSector = 0x3e0; // FText
		constexpr auto InvalidPlacement_LockedBase = 0x3f8; // FText
		constexpr auto InvalidPlacement_ReconOnly = 0x410; // FText
		constexpr auto InvalidPlacement_FriendlyBaseSector = 0x428; // FText
		constexpr auto bIncrementAchievement = 0x440; // char : 1
		constexpr auto AchievementStat = 0x441; // EHLLAchievementStat
		constexpr auto IncrementAmount = 0x444; // uint32_t
		constexpr auto HintWhenSelected = 0x448; // EHint
		constexpr auto MaxPerTeam = 0x449; // char
		constexpr auto PerItemNetworkDataStruct = 0x468; // UScriptStruct*
	}

	namespace n_AHLLSeat_ArtilleryGunner {
		constexpr auto bCanPrecisionAim = 0x981; // bool
		constexpr auto SlowPitchMultiplier = 0x984; // float
		constexpr auto SlowYawMultiplier = 0x988; // float
	}

	namespace n_UPostProcessComponent {
		constexpr auto Settings = 0x200; // FPostProcessSettings
		constexpr auto Priority = 0x740; // float
		constexpr auto BlendRadius = 0x744; // float
		constexpr auto BlendWeight = 0x748; // float
		constexpr auto bEnabled = 0x74c; // char : 1
		constexpr auto bUnbound = 0x74c; // char : 1
	}

	namespace n_UTankCommanderSeatUI {
		constexpr auto ZoomKeyText = 0x280; // URichTextBlock*
		constexpr auto PingKeyText = 0x288; // URichTextBlock*
	}

	namespace n_UPrimaryAssetLabel {
		constexpr auto Rules = 0x30; // FPrimaryAssetRules
		constexpr auto bLabelAssetsInMyDirectory = 0x3c; // char : 1
		constexpr auto bIsRuntimeLabel = 0x3c; // char : 1
		constexpr auto ExplicitAssets = 0x40; // TArray<TSoftObjectPtr<UObject>>
		constexpr auto ExplicitBlueprints = 0x50; // TArray<TSoftClassPtr<UObject>>
		constexpr auto AssetCollection = 0x60; // FCollectionReference
	}

	namespace n_USoundNodeDistanceCrossFade {
		constexpr auto CrossFadeInput = 0x48; // TArray<FDistanceDatum>
	}

	namespace n_UInterpGroup {
		constexpr auto InterpTracks = 0x30; // TArray<UInterpTrack*>
		constexpr auto GroupName = 0x40; // FName
		constexpr auto GroupColor = 0x48; // FColor
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bVisible = 0x4c; // char : 1
		constexpr auto bIsFolder = 0x4c; // char : 1
		constexpr auto bIsParented = 0x4c; // char : 1
		constexpr auto bIsSelected = 0x4c; // char : 1
	}

	namespace n_APainCausingVolume {
		constexpr auto bPainCausing = 0x268; // char : 1
		constexpr auto DamagePerSec = 0x26c; // float
		constexpr auto DamageType = 0x270; // UDamageType*
		constexpr auto PainInterval = 0x278; // float
		constexpr auto bEntryPain = 0x27c; // char : 1
		constexpr auto BACKUP_bPainCausing = 0x27c; // char : 1
		constexpr auto DamageInstigator = 0x280; // AController*
	}

	namespace n_UParticleModuleVelocityOverLifetime {
		constexpr auto VelOverLife = 0x38; // FRawDistributionVector
		constexpr auto Absolute = 0x80; // char : 1
	}

	namespace n_UHLLMapComponent {
		constexpr auto DataClass = 0xb0; // AHLLMapDataBase*
		constexpr auto bAutoRegister = 0xb8; // char : 1
		constexpr auto bAllowClientSideCreation = 0xb8; // char : 1
		constexpr auto DataInstance = 0xc0; // AHLLMapDataBase*
	}

	namespace n_UAsyncActionLoadPrimaryAssetClassList {
		constexpr auto Completed = 0x78; // FMulticastInlineDelegate
	}

	namespace n_AHLLSupplyDrop_Player {
		constexpr auto ResuppliedPlayers = 0x2e0; // TArray<TWeakObjectPtr<AShooterCharacter>>
		constexpr auto ResupplySound = 0x2f0; // USoundBase*
		constexpr auto SupplyType = 0x2f8; // EHLLAmmoType
		constexpr auto MaxResupplies = 0x2fc; // int32_t
		constexpr auto ResupplyTime = 0x300; // float
	}

	namespace n_UAutomationTestSettings {
		constexpr auto EngineTestModules = 0x28; // TArray<FString>
		constexpr auto EditorTestModules = 0x38; // TArray<FString>
		constexpr auto AutomationTestmap = 0x48; // FSoftObjectPath
		constexpr auto EditorPerformanceTestMaps = 0x60; // TArray<FEditorMapPerformanceTestDefinition>
		constexpr auto AssetsToOpen = 0x70; // TArray<FSoftObjectPath>
		constexpr auto BuildPromotionTest = 0x80; // FBuildPromotionTestSettings
		constexpr auto MaterialEditorPromotionTest = 0x270; // FMaterialEditorPromotionSettings
		constexpr auto ParticleEditorPromotionTest = 0x2a0; // FParticleEditorPromotionSettings
		constexpr auto BlueprintEditorPromotionTest = 0x2b0; // FBlueprintEditorPromotionSettings
		constexpr auto TestLevelFolders = 0x2e0; // TArray<FString>
		constexpr auto ExternalTools = 0x2f0; // TArray<FExternalToolDefinition>
		constexpr auto ImportExportTestDefinitions = 0x300; // TArray<FEditorImportExportTestDefinition>
		constexpr auto LaunchOnSettings = 0x310; // TArray<FLaunchOnTestSettings>
		constexpr auto DefaultScreenshotResolution = 0x320; // FIntPoint
	}

	namespace n_UTestMovieSceneSequence {
		constexpr auto MovieScene = 0x348; // UMovieScene*
	}

	namespace n_UParticleModuleLifetime {
		constexpr auto LifeTime = 0x30; // FRawDistributionFloat
	}

	namespace n_ULoadingScreensData {
		constexpr auto BackgroundBrushColor = 0x30; // FSlateColor
		constexpr auto ImagePannerMaterial = 0x58; // UMaterialInterface*
		constexpr auto ImageDarkeningBrushColor = 0x60; // FSlateColor
		constexpr auto VignetteMaterial = 0x88; // UMaterialInterface*
		constexpr auto VignetteImageColor = 0x90; // FSlateColor
		constexpr auto TextGritMaterial = 0xb8; // UMaterialInterface*
		constexpr auto TextGritColor = 0xc0; // FSlateColor
		constexpr auto ScratchesMaterial = 0xe8; // UMaterialInterface*
		constexpr auto ScratchesColor = 0xf0; // FSlateColor
		constexpr auto GameModeColor = 0x118; // FSlateColor
		constexpr auto GameModeFont = 0x140; // FSlateFontInfo
		constexpr auto MapNameColor = 0x190; // FSlateColor
		constexpr auto MapNameFont = 0x1b8; // FSlateFontInfo
		constexpr auto DateColor = 0x208; // FSlateColor
		constexpr auto DateFont = 0x230; // FSlateFontInfo
		constexpr auto LocationColor = 0x280; // FSlateColor
		constexpr auto LocationFont = 0x2a8; // FSlateFontInfo
		constexpr auto DateLocationSeparatorLineColor = 0x2f8; // FSlateColor
		constexpr auto ThrobberImage = 0x320; // UTexture2D*
		constexpr auto MapDataTable = 0x328; // UDataTable*
		constexpr auto NonMapDataTable = 0x330; // UDataTable*
	}

	namespace n_UShooterDamageType {
		constexpr auto HitForceFeedback = 0x40; // UForceFeedbackEffect*
		constexpr auto KilledForceFeedback = 0x48; // UForceFeedbackEffect*
		constexpr auto HitCameraShake = 0x50; // UCameraShake*
		constexpr auto HitCameraShakeScale = 0x58; // float
		constexpr auto HeadshotDamageMultiplier = 0x5c; // float
		constexpr auto LimbDamageMultiplier = 0x60; // float
		constexpr auto bInstantCritHeadshot = 0x64; // bool
		constexpr auto bHeadshotsBypassCritical = 0x65; // bool
		constexpr auto bAllowCriticalState = 0x66; // bool
		constexpr auto CriticalBypassDamageThreshold = 0x68; // float
		constexpr auto CriticalBypassDamageDistance = 0x6c; // float
		constexpr auto bApplyImpulse = 0x70; // char : 1
		constexpr auto RagdollImpulse = 0x74; // float
		constexpr auto RagdollUpKickImpulse = 0x78; // float
		constexpr auto ImpulseFalloff = 0x7c; // float
		constexpr auto PointDamageRadius = 0x80; // float
		constexpr auto bEnableDismemberment = 0x84; // char : 1
		constexpr auto MaxDistFromHitToDismember = 0x88; // float
		constexpr auto MaxBreaksPerHit = 0x8c; // int32_t
		constexpr auto bApplyVehicleImpulseOnPointDamage = 0x90; // char : 1
		constexpr auto ArmourPenetration = 0x91; // EHLLArmourPenetration
		constexpr auto RadialArmourPenetration = 0x92; // EHLLArmourPenetration
		constexpr auto ArmourDamageType = 0x93; // EHLLArmourDamageType
		constexpr auto RadialArmourDamageType = 0x94; // EHLLArmourDamageType
		constexpr auto ArmourPassthroughTraceLength = 0x98; // float
		constexpr auto InternalModulePenetrationDepth = 0x9c; // float
		constexpr auto bBypassArmourDeflection_Impact = 0xa0; // char : 1
		constexpr auto bBypassArmourDeflection_Radial = 0xa0; // char : 1
		constexpr auto bForceCarryOverArmourDamage = 0xa0; // char : 1
		constexpr auto SelfDamageScale = 0xa4; // float
		constexpr auto FriendlyDamageScale = 0xa8; // float
		constexpr auto BypassFriendlyDamageScale = 0xb0; // int64_t
		constexpr auto bSuppressHelmetEject = 0xb8; // char : 1
		constexpr auto bNotifyAnimationsPointDamage = 0xb8; // char : 1
		constexpr auto bNotifyAnimationsRadialDamage = 0xb8; // char : 1
		constexpr auto bBypassDamageFilters = 0xb8; // char : 1
		constexpr auto FriendlyDamageFilter = 0xc0; // int64_t
		constexpr auto EnemyDamageFilter = 0xc8; // int64_t
		constexpr auto DamageType = 0xd0; // EHLLDamageType
		constexpr auto DamageOrigin = 0xd1; // EHLLDamageOrigin
		constexpr auto MinExecutionDamage = 0xd4; // float
		constexpr auto PunishForTeamKill = 0xd8; // float
		constexpr auto PunishForSelfKill = 0xdc; // float
		constexpr auto bClearPendingPunishments = 0xe0; // char : 1
		constexpr auto bRewardAllSeatsOccupants = 0xe0; // char : 1
		constexpr auto bBypassSeatProtection = 0xe0; // char : 1
		constexpr auto bHasSelfKillAchievement = 0xe0; // char : 1
		constexpr auto SelfKillAchievement = 0xe1; // EHLLAchievement
		constexpr auto EnemyKillStats = 0xe8; // TSet<EHLLAchievementStat>
		constexpr auto bHasEnemyVehicleKillAchievement = 0x138; // char : 1
		constexpr auto VehicleKillAchievement = 0x139; // EHLLAchievement
		constexpr auto CustomAchievementImplementations = 0x140; // TSet<EHLLAchievement>
	}

	namespace n_UBTService_DefaultFocus {
		constexpr auto FocusPriority = 0x98; // char
	}

	namespace n_UW_GH_GameProgress_Offensive_Objective_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto ObjectiveNameCenter = 0x238; // UBorder*
		constexpr auto ObjectiveNameLeft = 0x240; // UBorder*
		constexpr auto ObjectiveNameRight = 0x248; // UBorder*
		constexpr auto ObjectiveProgress = 0x250; // UOverlay*
		constexpr auto PB_Progress = 0x258; // UProgressBar*
		constexpr auto PB_ProgressLine = 0x260; // UProgressBar*
		constexpr auto SectorIcon = 0x268; // UImage*
		constexpr auto txt_name_center = 0x270; // UTextBlock*
		constexpr auto txt_name_left = 0x278; // UTextBlock*
		constexpr auto txt_name_right = 0x280; // UTextBlock*
		constexpr auto IsRightSide = 0x288; // bool
		constexpr auto ObjName = 0x290; // FText
		constexpr auto CapProgress = 0x2a8; // float
		constexpr auto CapProgressDefenderBG = 0x2b0; // FSlateBrush
		constexpr auto CapProgressAttackerBG = 0x338; // FSlateBrush
		constexpr auto CapProgressDefender = 0x3c0; // FSlateBrush
		constexpr auto CapProgressAttacker = 0x448; // FSlateBrush
		constexpr auto IsFriendly = 0x4d0; // bool
		constexpr auto IsCenter = 0x4d1; // bool
		constexpr auto IsContested = 0x4d2; // bool
	}

	namespace n_UBPW_PlatoonInvitationDialog_V2_C {
		constexpr auto UberGraphFrame = 0x258; // FPointerToUberGraphFrame
		constexpr auto ButtonPromptsInfo_V2 = 0x260; // UButtonPromptsInfo_V2_C*
		constexpr auto CancelButton = 0x268; // UbtnSimple_V2_C*
		constexpr auto Image_1 = 0x270; // UImage*
		constexpr auto InviteButton = 0x278; // UbtnSimple_V2_C*
		constexpr auto RetainerBox_2 = 0x280; // URetainerBox*
		constexpr auto PlayersSelected = 0x288; // int32_t
		constexpr auto bClosing = 0x28c; // bool
	}

	namespace n_AHLLMineBase {
		constexpr auto MineMesh = 0x3b0; // UStaticMeshComponent*
		constexpr auto FilterObjectTypes = 0x3b8; // TSet<EObjectTypeQuery>
		constexpr auto bQueryOverlapsOnDeath = 0x408; // char : 1
		constexpr auto bQueryHitsForDetonation = 0x408; // char : 1
		constexpr auto HitQueryChannel = 0x409; // ECollisionChannel
		constexpr auto MinOverlapVelocity = 0x40c; // float
		constexpr auto CapsuleHalfHeight = 0x410; // float
		constexpr auto CapsuleRadius = 0x414; // float
		constexpr auto CapsuleOffset = 0x418; // float
		constexpr auto QueryProfile = 0x41c; // FCollisionProfileName
	}

	namespace n_UScrollBar {
		constexpr auto WidgetStyle = 0x108; // FScrollBarStyle
		constexpr auto Style = 0x5d8; // USlateWidgetStyleAsset*
		constexpr auto bAlwaysShowScrollbar = 0x5e0; // bool
		constexpr auto bAlwaysShowScrollbarTrack = 0x5e1; // bool
		constexpr auto Orientation = 0x5e2; // EOrientation
		constexpr auto Thickness = 0x5e4; // FVector2D
		constexpr auto Padding = 0x5ec; // FMargin
	}

	namespace n_UCurveFloat {
		constexpr auto FloatCurve = 0x30; // FRichCurve
		constexpr auto bIsEventCurve = 0xb0; // bool
	}

	namespace n_UParticleModuleSizeScaleBySpeed {
		constexpr auto SpeedScale = 0x30; // FVector2D
		constexpr auto MaxScale = 0x38; // FVector2D
	}

	namespace n_ABP_MenuCharacter_C {
		constexpr auto UberGraphFrame = 0x260; // FPointerToUberGraphFrame
	}

	namespace n_AControlPointMeshActor {
		constexpr auto ControlPointMeshComponent = 0x220; // UControlPointMeshComponent*
	}

	namespace n_UPlatoonPanel_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto CommanderMember = 0x238; // UCommanderMember_C*
		constexpr auto HB_Platoon = 0x240; // UHorizontalBox*
		constexpr auto img_line = 0x248; // UImage*
		constexpr auto img_line_vert = 0x250; // UImage*
		constexpr auto PlatoonMember = 0x258; // UPlatoonMember_C*
		constexpr auto PlatoonMember_C_1 = 0x260; // UPlatoonMember_C*
		constexpr auto PlatoonMember_C_2 = 0x268; // UPlatoonMember_C*
		constexpr auto PlatoonMember_C_3 = 0x270; // UPlatoonMember_C*
		constexpr auto PlatoonMember_C_4 = 0x278; // UPlatoonMember_C*
		constexpr auto PlatoonMember_C_5 = 0x280; // UPlatoonMember_C*
		constexpr auto PlatoonMembers = 0x288; // UVerticalBox*
		constexpr auto PlatoonName = 0x290; // UTextBlock*
	}

	namespace n_UMaterialExpressionClamp {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto Min = 0x54; // FExpressionInput
		constexpr auto Max = 0x68; // FExpressionInput
		constexpr auto ClampMode = 0x7c; // EClampMode
		constexpr auto MinDefault = 0x80; // float
		constexpr auto MaxDefault = 0x84; // float
	}

	namespace n_USoundNodeModulator {
		constexpr auto PitchMin = 0x48; // float
		constexpr auto PitchMax = 0x4c; // float
		constexpr auto VolumeMin = 0x50; // float
		constexpr auto VolumeMax = 0x54; // float
	}

	namespace n_UBorderSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UParticleModuleMeshRotationRate {
		constexpr auto StartRotationRate = 0x30; // FRawDistributionVector
	}

	namespace n_UEditableGameplayTagQueryExpression_NoTagsMatch {
		constexpr auto Tags = 0x28; // FGameplayTagContainer
	}

	namespace n_UWGT_ReplenishAmmoNotification_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Pulse = 0x238; // UWidgetAnimation*
		constexpr auto FadeInOut = 0x240; // UWidgetAnimation*
		constexpr auto BG = 0x248; // UImage*
		constexpr auto Icon = 0x250; // UImage*
		constexpr auto Overlay = 0x258; // UOverlay*
		constexpr auto Image = 0x260; // FSlateBrush
		constexpr auto bForSupplies = 0x2e8; // bool
	}

	namespace n_UAIPerceptionComponent {
		constexpr auto SensesConfig = 0xb0; // TArray<UAISenseConfig*>
		constexpr auto DominantSense = 0xc0; // UAISense*
		constexpr auto AIOwner = 0xd8; // AAIController*
		constexpr auto OnPerceptionUpdated = 0x160; // FMulticastInlineDelegate
		constexpr auto OnTargetPerceptionUpdated = 0x170; // FMulticastInlineDelegate
	}

	namespace n_UActorChannel {
		constexpr auto Actor = 0x70; // AActor*
		constexpr auto CreateSubObjects = 0x160; // TArray<UObject*>
	}

	namespace n_UAnimNotify_PlayParticleEffect {
		constexpr auto PSTemplate = 0x38; // UParticleSystem*
		constexpr auto LocationOffset = 0x40; // FVector
		constexpr auto RotationOffset = 0x4c; // FRotator
		constexpr auto Scale = 0x58; // FVector
		constexpr auto Attached = 0x80; // char : 1
		constexpr auto SocketName = 0x84; // FName
	}

	namespace n_UInputSettings {
		constexpr auto AxisConfig = 0x28; // TArray<FInputAxisConfigEntry>
		constexpr auto bAltEnterTogglesFullscreen = 0x38; // char : 1
		constexpr auto bF11TogglesFullscreen = 0x38; // char : 1
		constexpr auto bUseMouseForTouch = 0x38; // char : 1
		constexpr auto bEnableMouseSmoothing = 0x38; // char : 1
		constexpr auto bEnableFOVScaling = 0x38; // char : 1
		constexpr auto bCaptureMouseOnLaunch = 0x38; // char : 1
		constexpr auto bDefaultViewportMouseLock = 0x38; // char : 1
		constexpr auto bAlwaysShowTouchInterface = 0x38; // char : 1
		constexpr auto bShowConsoleOnFourFingerTap = 0x39; // char : 1
		constexpr auto bEnableGestureRecognizer = 0x39; // char : 1
		constexpr auto bUseAutocorrect = 0x3a; // bool
		constexpr auto ExcludedAutocorrectOS = 0x40; // TArray<FString>
		constexpr auto ExcludedAutocorrectCultures = 0x50; // TArray<FString>
		constexpr auto ExcludedAutocorrectDeviceModels = 0x60; // TArray<FString>
		constexpr auto DefaultViewportMouseCaptureMode = 0x70; // EMouseCaptureMode
		constexpr auto DefaultViewportMouseLockMode = 0x71; // EMouseLockMode
		constexpr auto FOVScale = 0x74; // float
		constexpr auto DoubleClickTime = 0x78; // float
		constexpr auto ActionMappings = 0x80; // TArray<FInputActionKeyMapping>
		constexpr auto AxisMappings = 0x90; // TArray<FInputAxisKeyMapping>
		constexpr auto SpeechMappings = 0xa0; // TArray<FInputActionSpeechMapping>
		constexpr auto DefaultTouchInterface = 0xb0; // FSoftObjectPath
		constexpr auto ConsoleKey = 0xc8; // FKey
		constexpr auto ConsoleKeys = 0xe0; // TArray<FKey>
	}

	namespace n_UParticleModuleAccelerationDrag {
		constexpr auto DragCoefficient = 0x38; // UDistributionFloat*
		constexpr auto DragCoefficientRaw = 0x40; // FRawDistributionFloat
	}

	namespace n_UEditableText {
		constexpr auto Text = 0x108; // FText
		constexpr auto TextDelegate = 0x120; // FDelegate
		constexpr auto HintText = 0x130; // FText
		constexpr auto HintTextDelegate = 0x148; // FDelegate
		constexpr auto WidgetStyle = 0x158; // FEditableTextStyle
		constexpr auto Style = 0x370; // USlateWidgetStyleAsset*
		constexpr auto BackgroundImageSelected = 0x378; // USlateBrushAsset*
		constexpr auto BackgroundImageComposing = 0x380; // USlateBrushAsset*
		constexpr auto CaretImage = 0x388; // USlateBrushAsset*
		constexpr auto Font = 0x390; // FSlateFontInfo
		constexpr auto ColorAndOpacity = 0x3e0; // FSlateColor
		constexpr auto IsReadOnly = 0x408; // bool
		constexpr auto IsPassword = 0x409; // bool
		constexpr auto MinimumDesiredWidth = 0x40c; // float
		constexpr auto IsCaretMovedWhenGainFocus = 0x410; // bool
		constexpr auto SelectAllTextWhenFocused = 0x411; // bool
		constexpr auto RevertTextOnEscape = 0x412; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0x413; // bool
		constexpr auto SelectAllTextOnCommit = 0x414; // bool
		constexpr auto AllowContextMenu = 0x415; // bool
		constexpr auto KeyboardType = 0x416; // EVirtualKeyboardType
		constexpr auto VirtualKeyboardOptions = 0x417; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardTrigger = 0x418; // EVirtualKeyboardTrigger
		constexpr auto VirtualKeyboardDismissAction = 0x419; // EVirtualKeyboardDismissAction
		constexpr auto Justification = 0x41a; // ETextJustify
		constexpr auto ShapedTextOptions = 0x41b; // FShapedTextOptions
		constexpr auto OnTextChanged = 0x420; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0x430; // FMulticastInlineDelegate
	}

	namespace n_UDeploymentScreen_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto A_DeployCancelled = 0x238; // UWidgetAnimation*
		constexpr auto BGBlur = 0x240; // UBackgroundBlur*
		constexpr auto BPW_DeployButton = 0x248; // UBPW_DeployButton_V2_C*
		constexpr auto Btn_Deploy = 0x250; // UButton*
		constexpr auto ButtonPromptsInfo = 0x258; // UButtonPromptsInfo_V2_C*
		constexpr auto CancelDeployment = 0x260; // UButton*
		constexpr auto Deploy_VBox = 0x268; // UVerticalBox*
		constexpr auto Deployment = 0x270; // UDeployment_V2_C*
		constexpr auto DeployStepBar = 0x278; // USizeBox*
		constexpr auto Image_1 = 0x280; // UImage*
		constexpr auto Image_2 = 0x288; // UImage*
		constexpr auto Image_4 = 0x290; // UImage*
		constexpr auto Lgnd_Txt_Entercombat = 0x298; // UTextBlock*
		constexpr auto Lgnd_Txt_JoinUnit = 0x2a0; // UTextBlock*
		constexpr auto Lgnd_Txt_SelectForce = 0x2a8; // UTextBlock*
		constexpr auto Lgnd_Txt_SelectRole = 0x2b0; // UTextBlock*
		constexpr auto MenuHeader = 0x2b8; // UMenuHeader_C*
		constexpr auto NextWaveTimer = 0x2c0; // UNextWaveTimer_C*
		constexpr auto RetainerBox_1 = 0x2c8; // URetainerBox*
		constexpr auto RootBorder = 0x2d0; // UBorder*
		constexpr auto Switcher = 0x2d8; // UWidgetSwitcher*
		constexpr auto TeamSelection = 0x2e0; // UTeamSelection_V2_C*
		constexpr auto WaitingForDeployIndicator = 0x2e8; // UThrobber*
		constexpr auto WaitingToDeployIndicatorPanel = 0x2f0; // UVerticalBox*
		constexpr auto ServerDeploymentTimer = 0x2f8; // FTimerHandle
		constexpr auto ServerDeploymentWarmupSeconds = 0x300; // float
		constexpr auto SpawnToDeployAt = 0x308; // TScriptInterface<IDynamicSpawnInterface>
		constexpr auto HideDeploymentScreenRequested = 0x318; // bool
		constexpr auto bCanDeploy = 0x319; // bool
		constexpr auto bIsCommander = 0x31a; // bool
		constexpr auto bIsFocusReceived = 0x31b; // bool
		constexpr auto bHasRespawned = 0x31c; // bool
		constexpr auto bPlatoonListItemClicked = 0x31d; // bool
		constexpr auto bIsClaimingCommander = 0x31e; // bool
		constexpr auto bCanExpandPlatoon = 0x31f; // bool
		constexpr auto FocusedPlatoon = 0x320; // UBPW_PlatoonListItem_V2_C*
		constexpr auto bCanCreateUnit = 0x328; // bool
		constexpr auto bCanJoinUnit = 0x329; // bool
		constexpr auto bCanBecomeCommander = 0x32a; // bool
		constexpr auto bFocusedOnCreateButton = 0x32b; // bool
		constexpr auto bPopupVisible = 0x32c; // bool
		constexpr auto bLeaveUnitPopupVisible = 0x32d; // bool
		constexpr auto bPlatoonFocused = 0x32e; // bool
	}

	namespace n_UBPW_SpeakingPlayersListItem_C {
		constexpr auto UberGraphFrame = 0x248; // FPointerToUberGraphFrame
		constexpr auto Image_1 = 0x250; // UImage*
		constexpr auto PlatformIcon = 0x258; // UImage*
	}

	namespace n_USkeletalMeshSimplificationSettings {
		constexpr auto SkeletalMeshReductionModuleName = 0x38; // FName
	}

	namespace n_UHLLBallisticsManager {
		constexpr auto BallisticComponents = 0x48; // TArray<UHLLBallisticsComponent*>
		constexpr auto ProjectileClasses = 0x58; // TArray<UHLLProjectile*>
		constexpr auto Debugger = 0x68; // AHLLBallisticsDebugger*
		constexpr auto BallisticsTickFunction = 0x70; // FBallisticsTickFunction
	}

	namespace n_UCircularThrobber {
		constexpr auto NumberOfPieces = 0x108; // int32_t
		constexpr auto Period = 0x10c; // float
		constexpr auto Radius = 0x110; // float
		constexpr auto PieceImage = 0x118; // USlateBrushAsset*
		constexpr auto Image = 0x120; // FSlateBrush
		constexpr auto bEnableRadius = 0x1a8; // bool
	}

	namespace n_UMaterialExpressionClearCoatNormalCustomOutput {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UHLLHUDBase {
		constexpr auto WorldWidgetPanel = 0x230; // UCanvasPanel*
		constexpr auto WorldWidgetPanel_Toggleable = 0x238; // UCanvasPanel*
		constexpr auto ActiveIndicatorWidgets = 0x320; // TArray<UHLLIndicatorBase*>
		constexpr auto SectorDisplayPriorities = 0x330; // TArray<int32_t>
		constexpr auto SectorWarningMessage = 0x340; // UTextBlock*
		constexpr auto HealVBox = 0x348; // UVerticalBox*
		constexpr auto HealMessage = 0x350; // UTextBlock*
		constexpr auto HealProgress = 0x358; // UImage*
		constexpr auto TeamKillMessage = 0x360; // UTextBlock*
		constexpr auto WeaponListItem = 0x370; // UHLLWeaponListItem*
		constexpr auto WeaponListShowTime = 0x378; // float
		constexpr auto ActiveWeaponListItems = 0x380; // TArray<UHLLWeaponListItem*>
		constexpr auto WeaponListVBox = 0x390; // UVerticalBox*
		constexpr auto SecondaryOutput = 0x3a0; // UWidget*
		constexpr auto WarmupWidget = 0x3a8; // UWidget*
	}

	namespace n_URendererSettings {
		constexpr auto bMobileDisableVertexFog = 0x38; // char : 1
		constexpr auto MaxMobileCascades = 0x3c; // int32_t
		constexpr auto MobileMSAASampleCount = 0x40; // EMobileMSAASampleCount
		constexpr auto bMobileUseLegacyShadingModel = 0x44; // char : 1
		constexpr auto bMobileAllowDitheredLODTransition = 0x44; // char : 1
		constexpr auto bMobileAllowSoftwareOcclusionCulling = 0x44; // char : 1
		constexpr auto bMobileVirtualTextures = 0x44; // char : 1
		constexpr auto bDiscardUnusedQualityLevels = 0x44; // char : 1
		constexpr auto bOcclusionCulling = 0x44; // char : 1
		constexpr auto MinScreenRadiusForLights = 0x48; // float
		constexpr auto MinScreenRadiusForEarlyZPass = 0x4c; // float
		constexpr auto MinScreenRadiusForCSMdepth = 0x50; // float
		constexpr auto bPrecomputedVisibilityWarning = 0x54; // char : 1
		constexpr auto bTextureStreaming = 0x54; // char : 1
		constexpr auto bUseDXT5NormalMaps = 0x54; // char : 1
		constexpr auto bVirtualTextures = 0x54; // char : 1
		constexpr auto bVirtualTexturedLightmaps = 0x54; // char : 1
		constexpr auto VirtualTextureTileSize = 0x58; // uint32_t
		constexpr auto VirtualTextureTileBorderSize = 0x5c; // uint32_t
		constexpr auto VirtualTextureFeedbackFactor = 0x60; // uint32_t
		constexpr auto bVirtualTextureEnableCompressZlib = 0x64; // char : 1
		constexpr auto bVirtualTextureEnableCompressCrunch = 0x64; // char : 1
		constexpr auto bClearCoatEnableSecondNormal = 0x64; // char : 1
		constexpr auto bAnisotropicBRDF = 0x64; // char : 1
		constexpr auto ReflectionCaptureResolution = 0x68; // int32_t
		constexpr auto ReflectionEnvironmentLightmapMixBasedOnRoughness = 0x6c; // char : 1
		constexpr auto bForwardShading = 0x6c; // char : 1
		constexpr auto bVertexFoggingForOpaque = 0x6c; // char : 1
		constexpr auto bAllowStaticLighting = 0x6c; // char : 1
		constexpr auto bUseNormalMapsForStaticLighting = 0x6c; // char : 1
		constexpr auto bGenerateMeshDistanceFields = 0x6c; // char : 1
		constexpr auto bEightBitMeshDistanceFields = 0x6c; // char : 1
		constexpr auto bGenerateLandscapeGIData = 0x6c; // char : 1
		constexpr auto bCompressMeshDistanceFields = 0x6d; // char : 1
		constexpr auto TessellationAdaptivePixelsPerTriangle = 0x70; // float
		constexpr auto bSeparateTranslucency = 0x74; // char : 1
		constexpr auto TranslucentSortPolicy = 0x78; // ETranslucentSortPolicy
		constexpr auto TranslucentSortAxis = 0x7c; // FVector
		constexpr auto CustomDepthStencil = 0x88; // ECustomDepthStencil
		constexpr auto bCustomDepthTaaJitter = 0x8c; // char : 1
		constexpr auto bEnableAlphaChannelInPostProcessing = 0x90; // EAlphaChannelMode
		constexpr auto bDefaultFeatureBloom = 0x94; // char : 1
		constexpr auto bDefaultFeatureAmbientOcclusion = 0x94; // char : 1
		constexpr auto bDefaultFeatureAmbientOcclusionStaticFraction = 0x94; // char : 1
		constexpr auto bDefaultFeatureAutoExposure = 0x94; // char : 1
		constexpr auto DefaultFeatureAutoExposure = 0x98; // EAutoExposureMethodUI
		constexpr auto DefaultFeatureAutoExposureBias = 0x9c; // float
		constexpr auto bExtendDefaultLuminanceRangeInAutoExposureSettings = 0xa0; // char : 1
		constexpr auto bUsePreExposure = 0xa0; // char : 1
		constexpr auto bEnablePreExposureOnlyInTheEditor = 0xa0; // char : 1
		constexpr auto bDefaultFeatureMotionBlur = 0xa0; // char : 1
		constexpr auto bDefaultFeatureLensFlare = 0xa0; // char : 1
		constexpr auto bTemporalUpsampling = 0xa0; // char : 1
		constexpr auto bSSGI = 0xa0; // char : 1
		constexpr auto DefaultFeatureAntiAliasing = 0xa4; // EAntiAliasingMethod
		constexpr auto DefaultLightUnits = 0xa5; // ELightUnits
		constexpr auto DefaultBackBufferPixelFormat = 0xa6; // EDefaultBackBufferPixelFormat
		constexpr auto bRenderUnbuiltPreviewShadowsInGame = 0xa8; // char : 1
		constexpr auto bStencilForLODDither = 0xa8; // char : 1
		constexpr auto EarlyZPass = 0xac; // EEarlyZPass
		constexpr auto bEarlyZPassOnlyMaterialMasking = 0xb0; // char : 1
		constexpr auto bDBuffer = 0xb0; // char : 1
		constexpr auto ClearSceneMethod = 0xb4; // EClearSceneOptions
		constexpr auto bBasePassOutputsVelocity = 0xb8; // char : 1
		constexpr auto bVertexDeformationOutputsVelocity = 0xb8; // char : 1
		constexpr auto bSelectiveBasePassOutputs = 0xb8; // char : 1
		constexpr auto bDefaultParticleCutouts = 0xb8; // char : 1
		constexpr auto GPUSimulationTextureSizeX = 0xbc; // int32_t
		constexpr auto GPUSimulationTextureSizeY = 0xc0; // int32_t
		constexpr auto bGlobalClipPlane = 0xc4; // char : 1
		constexpr auto GBufferFormat = 0xc8; // EGBufferFormat
		constexpr auto bUseGPUMorphTargets = 0xcc; // char : 1
		constexpr auto bNvidiaAftermathEnabled = 0xcc; // char : 1
		constexpr auto bMultiView = 0xcc; // char : 1
		constexpr auto bMobilePostProcessing = 0xcc; // char : 1
		constexpr auto bMobileMultiView = 0xcc; // char : 1
		constexpr auto bMobileUseHWsRGBEncoding = 0xcc; // char : 1
		constexpr auto bRoundRobinOcclusion = 0xcc; // char : 1
		constexpr auto bODSCapture = 0xcc; // char : 1
		constexpr auto bMeshStreaming = 0xcd; // char : 1
		constexpr auto WireframeCullThreshold = 0xd0; // float
		constexpr auto bEnableRayTracing = 0xd4; // char : 1
		constexpr auto bEnableRayTracingTextureLOD = 0xd4; // char : 1
		constexpr auto bSupportStationarySkylight = 0xd4; // char : 1
		constexpr auto bSupportLowQualityLightmaps = 0xd4; // char : 1
		constexpr auto bSupportPointLightWholeSceneShadows = 0xd4; // char : 1
		constexpr auto bSupportAtmosphericFog = 0xd4; // char : 1
		constexpr auto bSupportSkyAtmosphere = 0xd4; // char : 1
		constexpr auto bSupportSkyAtmosphereAffectsHeightFog = 0xd4; // char : 1
		constexpr auto bSupportSkinCacheShaders = 0xd5; // char : 1
		constexpr auto DefaultSkinCacheBehavior = 0xd8; // ESkinCacheDefaultBehavior
		constexpr auto SkinCacheSceneMemoryLimitInMB = 0xdc; // float
		constexpr auto bMobileEnableStaticAndCSMShadowReceivers = 0xe0; // char : 1
		constexpr auto bMobileEnableMovableLightCSMShaderCulling = 0xe0; // char : 1
		constexpr auto bMobileAllowDistanceFieldShadows = 0xe0; // char : 1
		constexpr auto bMobileAllowMovableDirectionalLights = 0xe0; // char : 1
		constexpr auto MobileNumDynamicPointLights = 0xe4; // uint32_t
		constexpr auto bMobileDynamicPointLightsUseStaticBranch = 0xe8; // char : 1
		constexpr auto bMobileAllowMovableSpotlights = 0xe8; // char : 1
		constexpr auto bSupport16BitBoneIndex = 0xe8; // char : 1
		constexpr auto bGPUSkinLimit2BoneInfluences = 0xe8; // char : 1
		constexpr auto bSupportDepthOnlyIndexBuffers = 0xe8; // char : 1
		constexpr auto bSupportReversedIndexBuffers = 0xe8; // char : 1
		constexpr auto bSupportMaterialLayers = 0xe8; // char : 1
		constexpr auto bLPV = 0xe8; // char : 1
	}

	namespace n_UMaterialExpressionReflectionVectorWS {
		constexpr auto CustomWorldNormal = 0x40; // FExpressionInput
		constexpr auto bNormalizeCustomWorldNormal = 0x54; // char : 1
	}

	namespace n_USCS_Node {
		constexpr auto ComponentClass = 0x28; // UObject*
		constexpr auto ComponentTemplate = 0x30; // UActorComponent*
		constexpr auto CookedComponentInstancingData = 0x38; // FBlueprintCookedComponentInstancingData
		constexpr auto AttachToName = 0x80; // FName
		constexpr auto ParentComponentOrVariableName = 0x88; // FName
		constexpr auto ParentComponentOwnerClassName = 0x90; // FName
		constexpr auto bIsParentComponentNative = 0x98; // bool
		constexpr auto ChildNodes = 0xa0; // TArray<USCS_Node*>
		constexpr auto MetaDataArray = 0xb0; // TArray<FBPVariableMetaDataEntry>
		constexpr auto VariableGuid = 0xc0; // FGuid
		constexpr auto InternalVariableName = 0xd0; // FName
	}

	namespace n_UMaterialExpressionConstant {
		constexpr auto R = 0x40; // float
	}

	namespace n_UHLLSupplyComponent {
		constexpr auto bAutoRegisterSupplies = 0xb0; // char : 1
		constexpr auto OnSuppliesChanged = 0xb8; // FMulticastInlineDelegate
		constexpr auto NumSupplies = 0xc8; // int32_t
		constexpr auto SupplyRange = 0xcc; // float
		constexpr auto NumSuppliesRemaining = 0xd0; // uint16_t
		constexpr auto bRegisteredSupplies = 0xd2; // char : 1
		constexpr auto SupplyUseScore = 0xd4; // FName
		constexpr auto bScaleScoreByAmount = 0xdc; // char : 1
	}

	namespace n_ASectorCaptureBooster {
		constexpr auto AdditionalManpower = 0x220; // float
		constexpr auto MapComponent = 0x228; // UHLLMapComponent*
	}

	namespace n_UPlatoonTypeListItem_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Hover = 0x238; // UWidgetAnimation*
		constexpr auto Select = 0x240; // UWidgetAnimation*
		constexpr auto BackgroundButton = 0x248; // UButton*
		constexpr auto btnCreateClosed = 0x250; // UbtnSimple_V2_C*
		constexpr auto btnCreateOpen = 0x258; // UbtnSimple_V2_C*
		constexpr auto Counts = 0x260; // UTextBlock*
		constexpr auto CountsSwitcher = 0x268; // UWidgetSwitcher*
		constexpr auto GP_Roles = 0x270; // UUniformGridPanel*
		constexpr auto Image_1 = 0x278; // UImage*
		constexpr auto Image_2 = 0x280; // UImage*
		constexpr auto Image_3 = 0x288; // UImage*
		constexpr auto Image_4 = 0x290; // UImage*
		constexpr auto img_bg = 0x298; // UImage*
		constexpr auto Infinity = 0x2a0; // UTextBlock*
		constexpr auto Leader = 0x2a8; // UBorder*
		constexpr auto RoleLeader = 0x2b0; // UWGT_PlatoonRole_C*
		constexpr auto SB_ROOT = 0x2b8; // USizeBox*
		constexpr auto txt_info = 0x2c0; // Uhll_text_C*
		constexpr auto txt_UnitBrief = 0x2c8; // Uhll_text_C*
		constexpr auto txt_UnitType = 0x2d0; // Uhll_text_C*
		constexpr auto TypeIcon = 0x2d8; // UImage*
		constexpr auto VB_InfantryRoleList = 0x2e0; // UVerticalBox*
		constexpr auto VB_Roles = 0x2e8; // UVerticalBox*
		constexpr auto VB_SelectInfo = 0x2f0; // UVerticalBox*
		constexpr auto WGT_PlatoonRole_1 = 0x2f8; // UWGT_PlatoonRole_C*
		constexpr auto WGT_PlatoonRole_2 = 0x300; // UWGT_PlatoonRole_C*
		constexpr auto WGT_PlatoonRole_3 = 0x308; // UWGT_PlatoonRole_C*
		constexpr auto WGT_PlatoonRole_4 = 0x310; // UWGT_PlatoonRole_C*
		constexpr auto WGT_PlatoonRole_5 = 0x318; // UWGT_PlatoonRole_C*
		constexpr auto WGT_PlatoonRole_6 = 0x320; // UWGT_PlatoonRole_C*
		constexpr auto WGT_PlatoonRole_7 = 0x328; // UWGT_PlatoonRole_C*
		constexpr auto WGT_PlatoonRole_8 = 0x330; // UWGT_PlatoonRole_C*
		constexpr auto NormalTextColor = 0x338; // FSlateColor
		constexpr auto HoveredTextColor = 0x360; // FSlateColor
		constexpr auto DisabledTextColor = 0x388; // FSlateColor
		constexpr auto SelectedButtonStyle = 0x3b0; // FButtonStyle
		constexpr auto NormalButtonStyle = 0x628; // FButtonStyle
		constexpr auto Selected = 0x8a0; // bool
		constexpr auto Hovered = 0x8a1; // bool
		constexpr auto SelectedTextColor = 0x8a8; // FSlateColor
		constexpr auto OnClicked = 0x8d0; // FMulticastInlineDelegate
		constexpr auto TypeName = 0x8e0; // FText
		constexpr auto CurrentCount = 0x8f8; // int32_t
		constexpr auto MaxCount = 0x8fc; // int32_t
		constexpr auto InfiniteCount = 0x900; // bool
		constexpr auto Type = 0x901; // EPlatoonType
		constexpr auto Enabled = 0x908; // FMulticastInlineDelegate
		constexpr auto Deselected = 0x918; // FMulticastInlineDelegate
		constexpr auto InfantryRoles = 0x928; // FST_PlatoonRoles
		constexpr auto ArmorRoles = 0x940; // FST_PlatoonRoles
		constexpr auto ReconRoles = 0x958; // FST_PlatoonRoles
		constexpr auto RoleColumn = 0x970; // int32_t
		constexpr auto RoleRow = 0x974; // int32_t
		constexpr auto SelectedIconColor = 0x978; // FSlateColor
		constexpr auto NewVar_1 = 0x9a0; // int32_t
		constexpr auto Create = 0x9a8; // FMulticastInlineDelegate
		constexpr auto OnHovered = 0x9b8; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x9c8; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleBeamSource {
		constexpr auto SourceMethod = 0x30; // Beam2SourceTargetMethod
		constexpr auto SourceName = 0x34; // FName
		constexpr auto bSourceAbsolute = 0x3c; // char : 1
		constexpr auto Source = 0x40; // FRawDistributionVector
		constexpr auto bLockSource = 0x88; // char : 1
		constexpr auto SourceTangentMethod = 0x8c; // Beam2SourceTargetTangentMethod
		constexpr auto SourceTangent = 0x90; // FRawDistributionVector
		constexpr auto bLockSourceTangent = 0xd8; // char : 1
		constexpr auto SourceStrength = 0xe0; // FRawDistributionFloat
		constexpr auto bLockSourceStength = 0x110; // char : 1
	}

	namespace n_UMaterialExpressionArctangent2Fast {
		constexpr auto Y = 0x40; // FExpressionInput
		constexpr auto X = 0x54; // FExpressionInput
	}

	namespace n_UAISense_Team {
		constexpr auto RegisteredEvents = 0x80; // TArray<FAITeamStimulusEvent>
	}

	namespace n_UGraphNodeContextMenuContext {
		constexpr auto Blueprint = 0x28; // UBlueprint*
		constexpr auto Graph = 0x30; // UEdGraph*
		constexpr auto Node = 0x38; // UEdGraphNode*
		constexpr auto bIsDebugging = 0x48; // bool
	}

	namespace n_UMovieSceneCameraShakeTrack {
		constexpr auto CameraShakeSections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_UMaterialExpressionBentNormalCustomOutput {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UHLLUI_ServerBrowser {
		constexpr auto bRefreshQueued = 0x230; // char : 1
		constexpr auto SearchResultWidget = 0x240; // UHLLUI_ServerBrowserItem*
		constexpr auto SearchResultWidgets = 0x248; // TArray<UHLLUI_ServerBrowserItem*>
		constexpr auto SelectedServerIndex = 0x258; // int32_t
		constexpr auto CurrentQueryType = 0x25c; // EHLLSearchQueryType
		constexpr auto CurrentSortMode = 0x25d; // EHLLUI_ServerSortMode
		constexpr auto bSortAscendingMode = 0x25e; // char : 1
		constexpr auto SortedResults = 0x260; // TArray<FHLLUI_ServerResult>
		constexpr auto bShowingPasswordEntry = 0x270; // char : 1
		constexpr auto SelectedServerRefreshInterval = 0x274; // float
		constexpr auto MapBrowserInfo = 0x288; // UDataTable*
		constexpr auto ServerListSwitcher = 0x290; // UWidgetSwitcher*
		constexpr auto ServerDetailsSwitcher = 0x298; // UWidgetSwitcher*
		constexpr auto ServerInfoImage = 0x2a0; // UImage*
		constexpr auto ServerScrollBox = 0x2a8; // UScrollBox*
		constexpr auto MessageText = 0x2b0; // UTextBlock*
		constexpr auto ActivityText = 0x2b8; // UTextBlock*
		constexpr auto JoinServerText = 0x2c0; // UTextBlock*
		constexpr auto ServerDetails_MapName = 0x2c8; // UTextBlock*
		constexpr auto ServerDetails_PlayerCount = 0x2d0; // UTextBlock*
		constexpr auto ServerDetails_GameMode = 0x2d8; // UTextBlock*
		constexpr auto ServerDetails_OffensiveModeAttackingFaction = 0x2e0; // UTextBlock*
		constexpr auto ServerDetails_Ping = 0x2e8; // UTextBlock*
		constexpr auto ServerDetails_ServerQueueData = 0x2f0; // UTextBlock*
		constexpr auto ServerNameFilter = 0x2f8; // UEditableTextBox*
		constexpr auto ServerFoundText = 0x300; // UTextBlock*
		constexpr auto PasswordEntryBox = 0x308; // UEditableTextBox*
		constexpr auto PasswordEntryPanel = 0x310; // UPanelWidget*
		constexpr auto PasswordJoin = 0x318; // UButton*
		constexpr auto PasswordCancel = 0x320; // UButton*
	}

	namespace n_USlateAccessibleWidgetData {
		constexpr auto bCanChildrenBeAccessible = 0x28; // bool
		constexpr auto AccessibleBehavior = 0x29; // ESlateAccessibleBehavior
		constexpr auto AccessibleSummaryBehavior = 0x2a; // ESlateAccessibleBehavior
		constexpr auto AccessibleText = 0x30; // FText
		constexpr auto AccessibleTextDelegate = 0x48; // FDelegate
		constexpr auto AccessibleSummaryText = 0x58; // FText
		constexpr auto AccessibleSummaryTextDelegate = 0x70; // FDelegate
	}

	namespace n_UBehaviorTreeManager {
		constexpr auto MaxDebuggerSteps = 0x28; // int32_t
		constexpr auto LoadedTemplates = 0x30; // TArray<FBehaviorTreeTemplateInfo>
		constexpr auto ActiveComponents = 0x40; // TArray<UBehaviorTreeComponent*>
	}

	namespace n_UPlayerRoleSelection {
		constexpr auto OnPlayerRoleSelected = 0x230; // FMulticastInlineDelegate
		constexpr auto AvailableRoleWidgetClass = 0x240; // UAvailableRole*
		constexpr auto AvailableRolesList = 0x248; // UVerticalBox*
		constexpr auto SelectButton = 0x250; // UButton*
		constexpr auto CancelButton = 0x258; // UButton*
		constexpr auto m_availableRoles = 0x260; // TArray<UAvailableRole*>
		constexpr auto m_availableRoles2 = 0x270; // TArray<UAvailableRole*>
	}

	namespace n_UObjectReferencer {
		constexpr auto ReferencedObjects = 0x28; // TArray<UObject*>
	}

	namespace n_UMaterialExpressionArccosineFast {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_AGameStateBase {
		constexpr auto GameModeClass = 0x220; // AGameModeBase*
		constexpr auto AuthorityGameMode = 0x228; // AGameModeBase*
		constexpr auto SpectatorClass = 0x230; // ASpectatorPawn*
		constexpr auto PlayerArray = 0x238; // TArray<APlayerState*>
		constexpr auto bReplicatedHasBegunPlay = 0x248; // bool
		constexpr auto ReplicatedWorldTimeSeconds = 0x24c; // float
		constexpr auto ServerWorldTimeSecondsDelta = 0x250; // float
		constexpr auto ServerWorldTimeSecondsUpdateFrequency = 0x254; // float
	}

	namespace n_UParticleModuleVectorFieldRotation {
		constexpr auto MinInitialRotation = 0x30; // FVector
		constexpr auto MaxInitialRotation = 0x3c; // FVector
	}

	namespace n_UInterpTrackLinearColorProp {
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_AHLLAmmoDepot {
		constexpr auto ReplenishRate = 0x370; // int32_t
		constexpr auto ReplenishRadius = 0x374; // float
		constexpr auto ReplenishingSound = 0x378; // USoundBase*
		constexpr auto bIsReplenishing = 0x388; // char : 1
		constexpr auto ReplenishParticle = 0x390; // UParticleSystemComponent*
		constexpr auto ReplenishAC = 0x398; // TWeakObjectPtr<UAudioComponent>
		constexpr auto MapComponent = 0x3a0; // UHLLMapComponent*
		constexpr auto IndicatorComponent = 0x3a8; // UHLLIndicatorComponent*
	}

	namespace n_AHLLDispenserItem_ResourceNode {
		constexpr auto InvalidPlacement_BaseSector = 0x4b0; // FText
		constexpr auto InvalidPlacement_NoFrontline = 0x4c8; // FText
	}

	namespace n_AHLLHowitzerShell {
		constexpr auto IncomingDelay = 0x228; // float
		constexpr auto ExplodeDelay = 0x238; // float
		constexpr auto PostExplodeLifespan = 0x248; // float
		constexpr auto IncomingSound = 0x250; // USoundBase*
		constexpr auto IncomingSoundOffset = 0x258; // FVector
		constexpr auto ExplosionTemplate = 0x268; // AShooterImpactEffect*
		constexpr auto Damage = 0x270; // float
		constexpr auto DamageRadius = 0x274; // float
		constexpr auto DamageFalloff = 0x278; // float
		constexpr auto DamageType = 0x280; // UShooterDamageType*
		constexpr auto bIgnoreDamageOcclusion = 0x288; // char : 1
		constexpr auto Suppression = 0x28c; // float
		constexpr auto SuppressionRadius = 0x290; // float
		constexpr auto ShellTeam = 0x294; // ETeam
		constexpr auto bExploded = 0x295; // char : 1
		constexpr auto bIncoming = 0x295; // char : 1
		constexpr auto ShotOrigin = 0x298; // FVector_NetQuantize
		constexpr auto FireSound = 0x2a8; // USoundBase*
	}

	namespace n_UBTDecorator_CompareBBEntries {
		constexpr auto Operator = 0x68; // EBlackBoardEntryComparison
		constexpr auto BlackboardKeyA = 0x70; // FBlackboardKeySelector
		constexpr auto BlackboardKeyB = 0x98; // FBlackboardKeySelector
	}

	namespace n_UBTTask_BlackboardBase {
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UBPW_ArmyCommanderRole_V2_C {
		constexpr auto UberGraphFrame = 0x260; // FPointerToUberGraphFrame
		constexpr auto HorizontalBox_1 = 0x268; // UHorizontalBox*
		constexpr auto RoleCount = 0x270; // UTextBlock*
		constexpr auto VerticalBox_1 = 0x278; // UVerticalBox*
		constexpr auto Widget Tooltip Ref Release = 0x280; // UW_HoverToolTip_C*
		constexpr auto DeploymentScreen = 0x288; // UDeploymentScreen_V2_C*
		constexpr auto bSelected = 0x290; // bool
	}

	namespace n_UHLLMapIcon_SpawnBase {
		constexpr auto DotColour_Selected = 0x368; // FLinearColor
		constexpr auto DotColour_Unselected = 0x378; // FLinearColor
		constexpr auto DotColour_EnemyNear = 0x388; // FLinearColor
		constexpr auto GradientColour_Default = 0x398; // FLinearColor
		constexpr auto GradientColour_Selected = 0x3a8; // FLinearColor
		constexpr auto GradientColour_Pulsing = 0x3b8; // FLinearColor
		constexpr auto GradientColour_EnemyNear = 0x3c8; // FLinearColor
		constexpr auto SelectionRingColour_Default = 0x3d8; // FLinearColor
		constexpr auto SelectionRingColour_EnemyNear = 0x3e8; // FLinearColor
		constexpr auto IconColour_Default = 0x3f8; // FLinearColor
		constexpr auto IconColour_Platoon = 0x408; // FLinearColor
		constexpr auto IconColour_Enemy = 0x418; // FLinearColor
		constexpr auto bColouriseIconWhenSelected = 0x428; // char : 1
		constexpr auto IconColour_Selected = 0x42c; // FLinearColor
		constexpr auto PulseColour_Platoon = 0x43c; // FLinearColor
		constexpr auto PulseColour_Ally = 0x44c; // FLinearColor
		constexpr auto IconDot = 0x460; // UImage*
		constexpr auto Gradient = 0x468; // UImage*
		constexpr auto PulseRing = 0x470; // UImage*
		constexpr auto SelectionRing = 0x478; // UImage*
		constexpr auto PlatoonIDText = 0x480; // UTextBlock*
		constexpr auto NearbyEnemyIndicator = 0x488; // UImage*
		constexpr auto Anim_PulseLoop = 0x490; // UWidgetAnimation*
		constexpr auto Anim_SelectedLoop = 0x498; // UWidgetAnimation*
		constexpr auto Anim_Selected = 0x4a0; // UWidgetAnimation*
	}

	namespace n_USpectatorBeaconState {
		constexpr auto SessionName = 0x28; // FName
		constexpr auto NumConsumedReservations = 0x30; // int32_t
		constexpr auto MaxReservations = 0x34; // int32_t
		constexpr auto bRestrictCrossConsole = 0x38; // bool
		constexpr auto Reservations = 0x40; // TArray<FSpectatorReservation>
	}

	namespace n_UMaterialExpressionDistanceToNearestSurface {
		constexpr auto Position = 0x40; // FExpressionInput
	}

	namespace n_UMovieSceneParticleSection {
		constexpr auto ParticleKeys = 0xe0; // FMovieSceneParticleChannel
	}

	namespace n_ULandscapeHeightfieldCollisionComponent {
		constexpr auto ComponentLayerInfos = 0x410; // TArray<ULandscapeLayerInfoObject*>
		constexpr auto SectionBaseX = 0x420; // int32_t
		constexpr auto SectionBaseY = 0x424; // int32_t
		constexpr auto CollisionSizeQuads = 0x428; // int32_t
		constexpr auto CollisionScale = 0x42c; // float
		constexpr auto SimpleCollisionSizeQuads = 0x430; // int32_t
		constexpr auto CollisionQuadFlags = 0x438; // TArray<char>
		constexpr auto HeightfieldGuid = 0x448; // FGuid
		constexpr auto CachedLocalBox = 0x458; // FBox
		constexpr auto RenderComponent = 0x474; // LazyObjectProperty
		constexpr auto CookedPhysicalMaterials = 0x4a0; // TArray<UPhysicalMaterial*>
	}

	namespace n_UHLLRadialMenu_Segment {
		constexpr auto HoveredSound = 0x238; // FSlateSound
		constexpr auto UnhoveredSound = 0x250; // FSlateSound
		constexpr auto bIsSelected = 0x268; // char : 1
		constexpr auto SegmentProgress = 0x270; // UImage*
	}

	namespace n_ABP_Powerline_Master_C {
		constexpr auto Cable2 = 0x220; // UStaticMeshComponent*
		constexpr auto Cable1 = 0x228; // UStaticMeshComponent*
		constexpr auto Connector2 = 0x230; // UStaticMeshComponent*
		constexpr auto Connector1 = 0x238; // UStaticMeshComponent*
		constexpr auto SM_PowerPole = 0x240; // UStaticMeshComponent*
		constexpr auto Root = 0x248; // USceneComponent*
		constexpr auto Powerlines = 0x250; // TArray<ABP_Powerline_Master_C*>
		constexpr auto Temp Powerlines = 0x260; // TArray<ABP_Powerline_Master_C*>
		constexpr auto Closest Powerline = 0x270; // ABP_Powerline_Master_C*
		constexpr auto Closest Distance = 0x278; // float
		constexpr auto Powerline Target = 0x27c; // int32_t
		constexpr auto Number Of Powerlines = 0x280; // int32_t
		constexpr auto Has Lamp = 0x284; // bool
		constexpr auto Has Transformer = 0x285; // bool
		constexpr auto Has Frames = 0x286; // bool
		constexpr auto Has Pegs = 0x287; // bool
		constexpr auto Light On = 0x288; // bool
		constexpr auto DMI_Main = 0x290; // UMaterialInstanceDynamic*
		constexpr auto Rust Opacity = 0x298; // float
		constexpr auto Rust Tweaker = 0x29c; // float
		constexpr auto Rust Flipper = 0x2a0; // float
		constexpr auto Color = 0x2a4; // FLinearColor
		constexpr auto Sorted Powerlines = 0x2b8; // TArray<ABP_Powerline_Master_C*>
		constexpr auto Cable 1 Style = 0x2c8; // UStaticMesh*
		constexpr auto Cable 2 Style = 0x2d0; // UStaticMesh*
		constexpr auto Light Intensity = 0x2d8; // float
		constexpr auto Powerline = 0x2e0; // TSoftObjectPtr<ABP_Powerline_Master_C>
		constexpr auto NewVar_1 = 0x308; // bool
	}

	namespace n_ULayer {
		constexpr auto LayerName = 0x28; // FName
		constexpr auto bIsVisible = 0x30; // char : 1
		constexpr auto ActorStats = 0x38; // TArray<FLayerActorStats>
	}

	namespace n_UTankGunnerSeatUI {
		constexpr auto PrimaryWeaponInfo = 0x280; // UHLLArmourWeaponUI*
		constexpr auto SecondaryWeaponInfo = 0x288; // UHLLArmourWeaponUI*
		constexpr auto ZoomKeyText = 0x290; // URichTextBlock*
		constexpr auto PrecisionKeyText = 0x298; // URichTextBlock*
		constexpr auto MuzzleOcclusion = 0x2a0; // UBorder*
	}

	namespace n_APaperFlipbookActor {
		constexpr auto RenderComponent = 0x220; // UPaperFlipbookComponent*
	}

	namespace n_UChildActorComponent {
		constexpr auto ChildActorClass = 0x1f0; // AActor*
		constexpr auto ChildActor = 0x1f8; // AActor*
		constexpr auto ChildActorTemplate = 0x200; // AActor*
	}

	namespace n_AShooterPlayerController {
		constexpr auto DebugRole = 0x598; // EPlayerRole
		constexpr auto DebugTeam = 0x599; // ETeam
		constexpr auto bInfiniteAmmo = 0x59a; // char : 1
		constexpr auto bInfiniteClip = 0x59a; // char : 1
		constexpr auto bInvincible = 0x59a; // char : 1
		constexpr auto DeploymentLogicClass = 0x5a0; // UActorComponent*
		constexpr auto DeploymentLogicComponent = 0x5a8; // UDeploymentLogic*
		constexpr auto FatalStatePostProcess = 0x5f0; // UPostProcessComponent*
		constexpr auto CriticalStatePostProcess = 0x5f8; // UPostProcessComponent*
		constexpr auto ViewportClient = 0x630; // UShooterGameViewportClient*
		constexpr auto m_WeaponInput = 0x638; // UInputComponent*
		constexpr auto m_WeaponScopeInput = 0x640; // UInputComponent*
		constexpr auto ScopedGamepadSensitivity = 0x648; // float
		constexpr auto m_keyBindingInputComponent = 0x650; // UInputComponent*
		constexpr auto m_laserTaggedActor = 0x680; // TWeakObjectPtr<AActor>
		constexpr auto m_roundSummaryInput = 0x688; // UInputComponent*
		constexpr auto m_gameMenuInput = 0x690; // UInputComponent*
		constexpr auto m_votingMenuInput = 0x698; // UInputComponent*
		constexpr auto m_voiceInput = 0x6a0; // UInputComponent*
		constexpr auto m_chatRadialInput = 0x6a8; // UInputComponent*
		constexpr auto m_inventoryRadialInput = 0x6b0; // UInputComponent*
		constexpr auto m_markerRadialInput = 0x6b8; // UInputComponent*
		constexpr auto CurrentSeatInput = 0x6c8; // UInputComponent*
		constexpr auto PostProcessParameterCollection = 0x6d0; // UMaterialParameterCollection*
		constexpr auto MasterSharpeningMaterial = 0x6d8; // UMaterialInterface*
		constexpr auto MinutesToShowGarrisonOutpostPlacementHint = 0x740; // float
		constexpr auto HeadshotNotifySound = 0x758; // USoundBase*
		constexpr auto HeadshotSound = 0x760; // USoundBase*
		constexpr auto BodyNotifySound = 0x768; // USoundBase*
		constexpr auto BodyNotifyMaxDist = 0x770; // float
		constexpr auto m_AnalyticsClient = 0x778; // UHLL_AnalyticsClient*
		constexpr auto SFXVolumeFadeOutSpeed = 0x780; // float
		constexpr auto CommendedPlayer = 0x788; // TWeakObjectPtr<AShooterPlayerState>
		constexpr auto PlayersWhoCommendedMe = 0x790; // TArray<AShooterPlayerState*>
		constexpr auto DeathCameraClass = 0x7a8; // ADeathCamera*
		constexpr auto PlayerReconID = 0x7f0; // FReconID
		constexpr auto PlayerVoteData = 0x7f8; // FPlayerVoteContainer
		constexpr auto CurrentAdminCamera = 0x910; // AHLLAdminCamera*
		constexpr auto MatchCountdownSound = 0x928; // TSoftObjectPtr<USoundBase>
		constexpr auto MatchCountdownTimeSeconds = 0x950; // int32_t
		constexpr auto MatchCountdownAC = 0x958; // UAudioComponent*
		constexpr auto HeadshotNotifyVibrationController = 0x960; // UVibrationEventController*
		constexpr auto HeadshotSelfVibrationController = 0x968; // UVibrationEventController*
	}

	namespace n_UExpandableArea {
		constexpr auto Style = 0x110; // FExpandableAreaStyle
		constexpr auto BorderBrush = 0x230; // FSlateBrush
		constexpr auto BorderColor = 0x2b8; // FSlateColor
		constexpr auto bIsExpanded = 0x2e0; // bool
		constexpr auto MaxHeight = 0x2e4; // float
		constexpr auto HeaderPadding = 0x2e8; // FMargin
		constexpr auto AreaPadding = 0x2f8; // FMargin
		constexpr auto OnExpansionChanged = 0x308; // FMulticastInlineDelegate
		constexpr auto HeaderContent = 0x318; // UWidget*
		constexpr auto BodyContent = 0x320; // UWidget*
	}

	namespace n_UProgressWidgetStyle {
		constexpr auto ProgressBarStyle = 0x30; // FProgressBarStyle
	}

	namespace n_USkyAtmosphereComponent {
		constexpr auto TransformMode = 0x1f0; // ESkyAtmosphereTransformMode
		constexpr auto BottomRadius = 0x1f4; // float
		constexpr auto GroundAlbedo = 0x1f8; // FColor
		constexpr auto AtmosphereHeight = 0x1fc; // float
		constexpr auto MultiScatteringFactor = 0x200; // float
		constexpr auto RayleighScatteringScale = 0x204; // float
		constexpr auto RayleighScattering = 0x208; // FLinearColor
		constexpr auto RayleighExponentialDistribution = 0x218; // float
		constexpr auto MieScatteringScale = 0x21c; // float
		constexpr auto MieScattering = 0x220; // FLinearColor
		constexpr auto MieAbsorptionScale = 0x230; // float
		constexpr auto MieAbsorption = 0x234; // FLinearColor
		constexpr auto MieAnisotropy = 0x244; // float
		constexpr auto MieExponentialDistribution = 0x248; // float
		constexpr auto OtherAbsorptionScale = 0x24c; // float
		constexpr auto OtherAbsorption = 0x250; // FLinearColor
		constexpr auto OtherTentDistribution = 0x260; // FTentDistribution
		constexpr auto SkyLuminanceFactor = 0x26c; // FLinearColor
		constexpr auto AerialPespectiveViewDistanceScale = 0x27c; // float
		constexpr auto HeightFogContribution = 0x280; // float
		constexpr auto TransmittanceMinLightElevationAngle = 0x284; // float
		constexpr auto bStaticLightingBuiltGUID = 0x2ac; // FGuid
	}

	namespace n_UClothPhysicalMeshDataBase_Legacy {
		constexpr auto Vertices = 0x28; // TArray<FVector>
		constexpr auto Normals = 0x38; // TArray<FVector>
		constexpr auto Indices = 0x48; // TArray<uint32_t>
		constexpr auto InverseMasses = 0x58; // TArray<float>
		constexpr auto BoneData = 0x68; // TArray<FClothVertBoneData>
		constexpr auto NumFixedVerts = 0x78; // int32_t
		constexpr auto MaxBoneWeights = 0x7c; // int32_t
		constexpr auto SelfCollisionIndices = 0x80; // TArray<uint32_t>
	}

	namespace n_AExponentialHeightFog {
		constexpr auto Component = 0x220; // UExponentialHeightFogComponent*
		constexpr auto bEnabled = 0x228; // char : 1
	}

	namespace n_UMicroTransactionBase {
		constexpr auto AvailableProducts = 0x38; // TArray<FPurchaseInfo>
		constexpr auto LastError = 0x48; // FString
		constexpr auto LastErrorSolution = 0x58; // FString
	}

	namespace n_UMaterialExpressionArctangent2 {
		constexpr auto Y = 0x40; // FExpressionInput
		constexpr auto X = 0x54; // FExpressionInput
	}

	namespace n_UInterpTrackParticleReplay {
		constexpr auto TrackKeys = 0x70; // TArray<FParticleReplayTrackKey>
	}

	namespace n_UMaterialExpressionTextureSampleParameterSubUV {
		constexpr auto bBlend = 0xf0; // char : 1
	}

	namespace n_UParticleModuleOrientationAxisLock {
		constexpr auto LockAxisFlags = 0x30; // EParticleAxisLock
	}

	namespace n_UHLLVehicleVibrationData {
		constexpr auto EngineHapticMinScale = 0x30; // float
		constexpr auto EngineHapticMaxScale = 0x34; // float
	}

	namespace n_UInputAxisKeyDelegateBinding {
		constexpr auto InputAxisKeyDelegateBindings = 0x28; // TArray<FBlueprintInputAxisKeyDelegateBinding>
	}

	namespace n_UInheritableComponentHandler {
		constexpr auto Records = 0x28; // TArray<FComponentOverrideRecord>
		constexpr auto UnnecessaryComponents = 0x38; // TArray<UActorComponent*>
	}

	namespace n_UPawnNoiseEmitterComponent {
		constexpr auto bAIPerceptionSystemCompatibilityMode = 0xb0; // char : 1
		constexpr auto LastRemoteNoisePosition = 0xb4; // FVector
		constexpr auto NoiseLifetime = 0xc0; // float
		constexpr auto LastRemoteNoiseVolume = 0xc4; // float
		constexpr auto LastRemoteNoiseTime = 0xc8; // float
		constexpr auto LastLocalNoiseVolume = 0xcc; // float
		constexpr auto LastLocalNoiseTime = 0xd0; // float
	}

	namespace n_UMaterialExpressionDDX {
		constexpr auto Value = 0x40; // FExpressionInput
	}

	namespace n_UTestMovieSceneSubTrack {
		constexpr auto SectionArray = 0x68; // TArray<UMovieSceneSection*>
	}

	namespace n_UWGT_RconConsoleWindow_C {
		constexpr auto UberGraphFrame = 0x248; // FPointerToUberGraphFrame
		constexpr auto Output_Multi = 0x250; // UMultiLineEditableTextBox*
		constexpr auto TextScrollBox = 0x258; // UScrollBox*
		constexpr auto UserCommandTextBox = 0x260; // UEditableText*
	}

	namespace n_ULevelSequenceDirector {
		constexpr auto Player = 0x28; // ULevelSequencePlayer*
	}

	namespace n_UNavigationGraphNodeComponent {
		constexpr auto Node = 0x1f0; // FNavGraphNode
		constexpr auto NextNodeComponent = 0x208; // UNavigationGraphNodeComponent*
		constexpr auto PrevNodeComponent = 0x210; // UNavigationGraphNodeComponent*
	}

	namespace n_UHLLMedicIndicator {
		constexpr auto DistanceText = 0x2a8; // UTextBlock*
		constexpr auto PlayerName = 0x2b0; // UTextBlock*
	}

	namespace n_UHLLVehicleInactivityComponent {
		constexpr auto OutOfBoundsTimeout = 0xb0; // int32_t
		constexpr auto UnoccupiedTimeout = 0xb4; // int32_t
		constexpr auto DamageToApply = 0xb8; // float
		constexpr auto bWorldBoundsCheck = 0xbc; // char : 1
		constexpr auto bOccupancyCheck = 0xbc; // char : 1
	}

	namespace n_UHLLMapTooltip_SeatBase {
		constexpr auto SeatVBox = 0x260; // UVerticalBox*
	}

	namespace n_UIngameCompass {
		constexpr auto SectorIndicatorClass = 0x238; // USectorCompassIndicator*
		constexpr auto ActiveIndicators = 0x240; // TArray<UBaseCompassIndicator*>
		constexpr auto IconPanel = 0x250; // UCanvasPanel*
		constexpr auto CompassImage = 0x258; // UImage*
		constexpr auto DialValue = 0x260; // UTextBlock*
	}

	namespace n_UHLLPlayerIndicator {
		constexpr auto RootBorder = 0x2b8; // UBorder*
		constexpr auto IconBorder = 0x2c0; // UBorder*
		constexpr auto PlayerNameText = 0x2c8; // UTextBlock*
		constexpr auto IconSwitcher = 0x2d0; // UWidgetSwitcher*
		constexpr auto PlayerRoleGlyph = 0x2d8; // UTextBlock*
	}

	namespace n_UEdGraphNode_Documentation {
		constexpr auto Link = 0x98; // FString
		constexpr auto Excerpt = 0xa8; // FString
	}

	namespace n_UParticleModuleEventGenerator {
		constexpr auto Events = 0x30; // TArray<FParticleEvent_GenerateInfo>
	}

	namespace n_UMovieSceneWidgetMaterialTrack {
		constexpr auto BrushPropertyNamePath = 0x68; // TArray<FName>
		constexpr auto TrackName = 0x78; // FName
	}

	namespace n_UShooterCheatManager {
		constexpr auto bGodMode = 0x78; // char : 1
	}

	namespace n_AShooterWeapon_Ballistic {
		constexpr auto BallisticsComponent = 0x8b8; // UHLLBallisticsComponent_Character*
		constexpr auto ZeroAngles = 0x8c0; // TArray<FZeroAngle>
		constexpr auto ZeroAngleIndex = 0x8d0; // char
		constexpr auto bIsMultiShotWeapon = 0x8d1; // bool
		constexpr auto MultiShotCount = 0x8d2; // char
		constexpr auto MultiShotOffsets = 0x8d8; // TArray<FShotOffset>
		constexpr auto WeaponSeed = 0x8e8; // FBallisticShotID
		constexpr auto RepShot = 0x8ec; // FRepShot
	}

	namespace n_UCameraAnimInst {
		constexpr auto CamAnim = 0x28; // UCameraAnim*
		constexpr auto InterpGroupInst = 0x30; // UInterpGroupInst*
		constexpr auto PlayRate = 0x50; // float
		constexpr auto MoveTrack = 0x68; // UInterpTrackMove*
		constexpr auto MoveInst = 0x70; // UInterpTrackInstMove*
		constexpr auto PlaySpace = 0x78; // ECameraAnimPlaySpace
	}

	namespace n_UDecalComponent {
		constexpr auto DecalMaterial = 0x1f0; // UMaterialInterface*
		constexpr auto SortOrder = 0x1f8; // int32_t
		constexpr auto FadeScreenSize = 0x1fc; // float
		constexpr auto FadeStartDelay = 0x200; // float
		constexpr auto FadeDuration = 0x204; // float
		constexpr auto FadeInDuration = 0x208; // float
		constexpr auto FadeInStartDelay = 0x20c; // float
		constexpr auto bDestroyOwnerAfterFade = 0x210; // char : 1
		constexpr auto DecalSize = 0x214; // FVector
	}

	namespace n_UHLLUseContext_DismantleItem {
		constexpr auto RadialProg = 0x238; // UImage*
		constexpr auto DismantleText = 0x240; // URichTextBlock*
	}

	namespace n_UBTDecorator_TimeLimit {
		constexpr auto TimeLimit = 0x68; // float
	}

	namespace n_UWGT_CosmeticCategory_C {
		constexpr auto UberGraphFrame = 0x2a8; // FPointerToUberGraphFrame
		constexpr auto LastSelected = 0x2b0; // UObject*
	}

	namespace n_ATrackedVehicle {
		constexpr auto Tracks = 0x290; // UTracksComponent*
		constexpr auto Suspensions = 0x298; // USuspensionsComponent*
	}

	namespace n_AHLLAdminCamera {
		constexpr auto CollisionSphere = 0x280; // USphereComponent*
		constexpr auto AdminCameraMovement = 0x288; // UHLLAdminCameraMovement*
		constexpr auto CameraArm = 0x290; // UHLLAdminCameraSpringArm*
		constexpr auto Camera = 0x298; // UCameraComponent*
		constexpr auto MapComponent = 0x2a0; // UHLLMapComponent*
		constexpr auto TargetScanDistance = 0x2a8; // float
		constexpr auto TargetScanRadius = 0x2ac; // float
		constexpr auto ZoomSpeed = 0x2b0; // float
		constexpr auto PostProcessMaterial = 0x2b8; // UMaterialInterface*
		constexpr auto FOVZoomMin = 0x2c0; // float
		constexpr auto VehicleSettings = 0x2c4; // FFollowCamSettings
		constexpr auto CharacterSettings = 0x2e4; // FFollowCamSettings
		constexpr auto PostProcessMID = 0x308; // UMaterialInstanceDynamic*
		constexpr auto TargetArmRatio = 0x310; // float
		constexpr auto CurrentArmRatio = 0x314; // float
		constexpr auto MinArmLength = 0x318; // float
		constexpr auto MaxArmLength = 0x31c; // float
		constexpr auto TargetZoomRatio = 0x320; // float
		constexpr auto CurrentZoomRatio = 0x324; // float
		constexpr auto ReticleTarget = 0x328; // FAdminCamTarget
		constexpr auto LockedTarget = 0x338; // FAdminCamTarget
		constexpr auto CurrentMode = 0x2e78; // EAdminCamMode
		constexpr auto HighlightMode = 0x2e79; // EAdminHighlightMode
		constexpr auto UIMode = 0x2e7a; // EAdminUIMode
		constexpr auto PermissionsMask = 0x2e7b; // char
	}

	namespace n_UAnimSet {
		constexpr auto bAnimRotationOnly = 0x28; // char : 1
		constexpr auto TrackBoneNames = 0x30; // TArray<FName>
		constexpr auto LinkupCache = 0x40; // TArray<FAnimSetMeshLinkup>
		constexpr auto BoneUseAnimTranslation = 0x50; // TArray<char>
		constexpr auto ForceUseMeshTranslation = 0x60; // TArray<char>
		constexpr auto UseTranslationBoneNames = 0x70; // TArray<FName>
		constexpr auto ForceMeshTranslationBoneNames = 0x80; // TArray<FName>
		constexpr auto PreviewSkelMeshName = 0x90; // FName
		constexpr auto BestRatioSkelMeshName = 0x98; // FName
	}

	namespace n_UHLLArmourWeaponUI_AmmoItem {
		constexpr auto OwningPanel = 0x230; // UHLLArmourWeaponUI*
		constexpr auto AmmoIndex = 0x238; // char
		constexpr auto SelectKeyText = 0x240; // UHLLKeyText*
		constexpr auto SelectionBorder = 0x248; // UBorder*
		constexpr auto AmmoName = 0x250; // UTextBlock*
		constexpr auto AmmoIcon = 0x258; // UImage*
		constexpr auto AmmoClip = 0x260; // UTextBlock*
		constexpr auto AmmoClips = 0x268; // UTextBlock*
		constexpr auto MunitionsCost = 0x270; // UTextBlock*
		constexpr auto MunitionsSwitcher = 0x278; // UWidgetSwitcher*
	}

	namespace n_UHLLDamageVolumeComponent {
		constexpr auto DamageTracker = 0x438; // TArray<FDamageVolumeTracker>
		constexpr auto DamageType = 0x448; // UShooterDamageType*
		constexpr auto Damage = 0x450; // float
		constexpr auto DamageInterval = 0x454; // float
		constexpr auto InitialDamageDelay = 0x458; // float
		constexpr auto bConsiderAsSelfInflicted = 0x45c; // char : 1
		constexpr auto bUsePawnEyeLocation = 0x45c; // char : 1
		constexpr auto EyeVerticalOffset = 0x460; // float
	}

	namespace n_UARTexture {
		constexpr auto TextureType = 0xb8; // EARTextureType
		constexpr auto Timestamp = 0xbc; // float
		constexpr auto ExternalTextureGuid = 0xc0; // FGuid
		constexpr auto Size = 0xd0; // FVector2D
	}

	namespace n_UGameFiltersScreen_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto ExitSlide = 0x238; // UWidgetAnimation*
		constexpr auto EnterSlide = 0x240; // UWidgetAnimation*
		constexpr auto Image_37 = 0x248; // UImage*
		constexpr auto PreferredGameModeButton = 0x250; // UbtnSimple_V2_C*
		constexpr auto PreferredMapButton = 0x258; // UbtnSimple_V2_C*
		constexpr auto PreferredRegionButton = 0x260; // UbtnSimple_V2_C*
		constexpr auto PrivateLobbyButton = 0x268; // UbtnSimple_V2_C*
		constexpr auto MatchmakingScreen = 0x270; // UMatchmakingScreen_V2_C*
		constexpr auto GameModes = 0x278; // TArray<FText>
		constexpr auto Maps = 0x288; // TArray<FText>
		constexpr auto Regions = 0x298; // TArray<FText>
		constexpr auto Lobbies = 0x2a8; // TArray<FText>
		constexpr auto ButtonIndex = 0x2b8; // TArray<int32_t>
	}

	namespace n_UHTP_Widget_Role_Loadout_Crewman_C {
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_6 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_13 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x260; // UImage*
		constexpr auto Image_10 = 0x268; // UImage*
		constexpr auto Image_17 = 0x270; // UImage*
	}

	namespace n_AInfantryCarrierBoat {
		constexpr auto DriverAttachmentSocket = 0x238; // FName
		constexpr auto DriverHelmetAttachmentSocket = 0x240; // FName
		constexpr auto DoorOpeningAnimation = 0x248; // UAnimMontage*
		constexpr auto DoorClosingAnimation = 0x250; // UAnimMontage*
		constexpr auto SceneRoot = 0x258; // USceneComponent*
		constexpr auto Mesh = 0x260; // USkeletalMeshComponent*
		constexpr auto DriverMesh = 0x268; // USkeletalMeshComponent*
		constexpr auto DriverHelmetMesh = 0x270; // UStaticMeshComponent*
		constexpr auto SmoothNetworkedMovement = 0x278; // USmoothNetworkedMovement*
		constexpr auto WaterEffectFrontLeft = 0x280; // UParticleSystemComponent*
		constexpr auto WaterEffectFrontRight = 0x288; // UParticleSystemComponent*
		constexpr auto WaterEffectMidLeft = 0x290; // UParticleSystemComponent*
		constexpr auto WaterEffectMidRight = 0x298; // UParticleSystemComponent*
		constexpr auto WaterEffectBackLeft = 0x2a0; // UParticleSystemComponent*
		constexpr auto WaterEffectBackRight = 0x2a8; // UParticleSystemComponent*
		constexpr auto EngineSound = 0x2b0; // UAudioComponent*
		constexpr auto VehicleBlockerAndCharacterKiller = 0x2b8; // UBoxComponent*
		constexpr auto Path = 0x2c0; // USplineComponent*
		constexpr auto BoatTravelSpeed = 0x2e8; // float
		constexpr auto CurrentState = 0x2ec; // FName
		constexpr auto CarriedCharacters = 0x2f8; // TArray<ACharacter*>
	}

	namespace n_AShooterWeapon_HealBase {
		constexpr auto HealWeaponConfig = 0x8b8; // FHealWeaponData
		constexpr auto CurrentHealTarget = 0x988; // TWeakObjectPtr<AShooterCharacter>
	}

	namespace n_ABrush {
		constexpr auto BrushType = 0x220; // EBrushType
		constexpr auto BrushColor = 0x224; // FColor
		constexpr auto PolyFlags = 0x228; // int32_t
		constexpr auto bColored = 0x22c; // char : 1
		constexpr auto bSolidWhenSelected = 0x22c; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x22c; // char : 1
		constexpr auto bNotForClientOrServer = 0x22c; // char : 1
		constexpr auto Brush = 0x230; // UModel*
		constexpr auto BrushComponent = 0x238; // UBrushComponent*
		constexpr auto bInManipulation = 0x240; // char : 1
		constexpr auto SavedSelections = 0x248; // TArray<FGeomSelection>
	}

	namespace n_UCameraModifier {
		constexpr auto bDebug = 0x28; // char : 1
		constexpr auto bExclusive = 0x28; // char : 1
		constexpr auto Priority = 0x2c; // char
		constexpr auto CameraOwner = 0x30; // APlayerCameraManager*
		constexpr auto AlphaInTime = 0x38; // float
		constexpr auto AlphaOutTime = 0x3c; // float
		constexpr auto Alpha = 0x40; // float
	}

	namespace n_UParticleModuleSpawn {
		constexpr auto Rate = 0x38; // FRawDistributionFloat
		constexpr auto RateScale = 0x68; // FRawDistributionFloat
		constexpr auto ParticleBurstMethod = 0x98; // EParticleBurstMethod
		constexpr auto BurstList = 0xa0; // TArray<FParticleBurst>
		constexpr auto BurstScale = 0xb0; // FRawDistributionFloat
		constexpr auto bApplyGlobalSpawnRateScale = 0xe0; // char : 1
	}

	namespace n_AHLLVehicleSpawnerBase {
		constexpr auto DummyRoot = 0x220; // USceneComponent*
		constexpr auto SafeZone = 0x228; // UBoxComponent*
		constexpr auto RetrySpawnDelay = 0x230; // float
		constexpr auto SpawnBounds = 0x234; // FVector_NetQuantize
		constexpr auto SafeZoneInflation = 0x240; // int32_t
		constexpr auto TH_RetrySpawn = 0x248; // FTimerHandle
		constexpr auto RetrySpawnClass = 0x250; // AActor*
	}

	namespace n_UbtnSimple_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto btn = 0x238; // UButton*
		constexpr auto SB_ROOT = 0x240; // USizeBox*
		constexpr auto txt_btn_Label = 0x248; // UTextBlock*
		constexpr auto ButtonLabel = 0x250; // FText
		constexpr auto Clicked = 0x268; // FMulticastInlineDelegate
		constexpr auto CustomSize = 0x278; // bool
		constexpr auto Height = 0x27c; // float
		constexpr auto Width = 0x280; // float
		constexpr auto Uppercase = 0x284; // bool
		constexpr auto Font = 0x288; // FSlateFontInfo
		constexpr auto FontColor = 0x2d8; // FSlateColor
		constexpr auto ButtonStyle = 0x300; // FButtonStyle
		constexpr auto FontColorHover = 0x578; // FSlateColor
		constexpr auto Hovered = 0x5a0; // FMulticastInlineDelegate
		constexpr auto Unhovered = 0x5b0; // FMulticastInlineDelegate
		constexpr auto FocusedButtonStyle = 0x5c0; // FButtonStyle
		constexpr auto bPressed = 0x838; // bool
		constexpr auto bIsCreateUnitButton = 0x839; // bool
	}

	namespace n_AHLL_MenuGameMode_C {
		constexpr auto UberGraphFrame = 0x2c8; // FPointerToUberGraphFrame
		constexpr auto DefaultSceneRoot = 0x2d0; // USceneComponent*
	}

	namespace n_UMaterialExpressionArcsine {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UInputTouchDelegateBinding {
		constexpr auto InputTouchDelegateBindings = 0x28; // TArray<FBlueprintInputTouchDelegateBinding>
	}

	namespace n_UInterpTrackInstLinearColorProp {
		constexpr auto ResetColor = 0x58; // FLinearColor
	}

	namespace n_USoundNodeParamCrossFade {
		constexpr auto ParamName = 0x58; // FName
	}

	namespace n_UMovieSceneSkeletalAnimationTrack {
		constexpr auto AnimationSections = 0x58; // TArray<UMovieSceneSection*>
		constexpr auto bUseLegacySectionIndexBlend = 0x68; // bool
	}

	namespace n_USynthComponent {
		constexpr auto bAutoDestroy = 0x1f0; // char : 1
		constexpr auto bStopWhenOwnerDestroyed = 0x1f0; // char : 1
		constexpr auto bAllowSpatialization = 0x1f0; // char : 1
		constexpr auto bOverrideAttenuation = 0x1f0; // char : 1
		constexpr auto bOutputToBusOnly = 0x1f4; // char : 1
		constexpr auto AttenuationSettings = 0x1f8; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x200; // FSoundAttenuationSettings
		constexpr auto ConcurrencySettings = 0x5a0; // USoundConcurrency*
		constexpr auto ConcurrencySet = 0x5a8; // TSet<USoundConcurrency*>
		constexpr auto SoundClass = 0x5f8; // USoundClass*
		constexpr auto SourceEffectChain = 0x600; // USoundEffectSourcePresetChain*
		constexpr auto SoundSubmix = 0x608; // USoundSubmixBase*
		constexpr auto SoundSubmixSends = 0x610; // TArray<FSoundSubmixSendInfo>
		constexpr auto BusSends = 0x620; // TArray<FSoundSourceBusSendInfo>
		constexpr auto Modulation = 0x630; // FSoundModulation
		constexpr auto PreEffectBusSends = 0x640; // TArray<FSoundSourceBusSendInfo>
		constexpr auto bIsUISound = 0x650; // char : 1
		constexpr auto bIsPreviewSound = 0x650; // char : 1
		constexpr auto EnvelopeFollowerAttackTime = 0x654; // int32_t
		constexpr auto EnvelopeFollowerReleaseTime = 0x658; // int32_t
		constexpr auto OnAudioEnvelopeValue = 0x660; // FMulticastInlineDelegate
		constexpr auto Synth = 0x690; // USynthSound*
		constexpr auto AudioComponent = 0x698; // UAudioComponent*
	}

	namespace n_UAnimBlueprint {
		constexpr auto TargetSkeleton = 0xa8; // USkeleton*
		constexpr auto Groups = 0xb0; // TArray<FAnimGroupInfo>
		constexpr auto bUseMultiThreadedAnimationUpdate = 0xc0; // bool
		constexpr auto bWarnAboutBlueprintUsage = 0xc1; // bool
	}

	namespace n_UEnvQueryManager {
		constexpr auto InstanceCache = 0xa8; // TArray<FEnvQueryInstanceCache>
		constexpr auto LocalContexts = 0xb8; // TArray<UEnvQueryContext*>
		constexpr auto GCShieldedWrappers = 0xc8; // TArray<UEnvQueryInstanceBlueprintWrapper*>
		constexpr auto MaxAllowedTestingTime = 0x12c; // float
		constexpr auto bTestQueriesUsingBreadth = 0x130; // bool
		constexpr auto QueryCountWarningThreshold = 0x134; // int32_t
		constexpr auto QueryCountWarningInterval = 0x138; // double
	}

	namespace n_UABP_MG42_FPP_V2_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x278; // FAnimNode_Root
		constexpr auto AnimGraphNode_ModifyBone_3 = 0x2a8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_Slot_2 = 0x3b0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SequenceEvaluator_2 = 0x3f8; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_TwoWayBlend = 0x440; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_ModifyBone_2 = 0x508; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x610; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x638; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x660; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x688; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0x6b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x6d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0x750; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x780; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_3 = 0x7f8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer = 0x828; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_2 = 0x8a0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequenceEvaluator = 0x8d0; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_StateResult = 0x918; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x948; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x9f8; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0xa18; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose = 0xa38; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0xaf0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0xbb0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose = 0xbd8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot = 0xc00; // FAnimNode_Slot
		constexpr auto AnimGraphNode_ModifyBone = 0xc48; // FAnimNode_ModifyBone
		constexpr auto BulletScale = 0xd50; // float
		constexpr auto IsDeployed = 0xd54; // bool
		constexpr auto IsUnfolded = 0xd55; // bool
		constexpr auto IsBraced = 0xd56; // bool
		constexpr auto BipodRotation = 0xd58; // FRotator
		constexpr auto BipodResult = 0xd64; // float
		constexpr auto FPPInstance = 0xd68; // UABP_Rifleman_FPP_V2_C*
		constexpr auto TPPInstance = 0xd70; // UABP_Rifleman_TPP_V2_C*
		constexpr auto ShooterCharacter = 0xd78; // AShooterCharacter*
		constexpr auto ShooterWeapon = 0xd80; // AShooterWeapon*
		constexpr auto TransitionSpeed = 0xd88; // float
		constexpr auto Stance = 0xd8c; // ECharacterStance
		constexpr auto IsEmpty = 0xd8d; // bool
	}

	namespace n_UArmyLogo {
		constexpr auto ArmyIcon = 0x230; // UImage*
		constexpr auto ArmyName = 0x238; // UTextBlock*
	}

	namespace n_AServerQueueBeaconClient {
		constexpr auto LocalPlayer = 0x370; // ULocalPlayer*
	}

	namespace n_UExporter {
		constexpr auto SupportedClass = 0x28; // UObject*
		constexpr auto ExportRootScope = 0x30; // UObject*
		constexpr auto FormatExtension = 0x38; // TArray<FString>
		constexpr auto FormatDescription = 0x48; // TArray<FString>
		constexpr auto PreferredFormatIndex = 0x58; // int32_t
		constexpr auto TextIndent = 0x5c; // int32_t
		constexpr auto bText = 0x60; // char : 1
		constexpr auto bSelectedOnly = 0x60; // char : 1
		constexpr auto bForceFileOperations = 0x60; // char : 1
		constexpr auto ExportTask = 0x68; // UAssetExportTask*
	}

	namespace n_UBlackboardKeyType_String {
		constexpr auto StringValue = 0x30; // FString
	}

	namespace n_URuntimeVirtualTextureStreamingProxy {
		constexpr auto Settings = 0xe8; // FVirtualTextureBuildSettings
		constexpr auto bSinglePhysicalSpace = 0xf4; // bool
		constexpr auto BuildHash = 0xf8; // uint32_t
	}

	namespace n_AMapData_Recon_C {
		constexpr auto DefaultSceneRoot = 0x268; // USceneComponent*
	}

	namespace n_USectorCompassIndicator {
		constexpr auto SectorIndex = 0x250; // int32_t
	}

	namespace n_UBPW_PlatoonManagementStack_Invite_V2_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto Pulse = 0x278; // UWidgetAnimation*
		constexpr auto ButtonPanel = 0x280; // UUniformGridPanel*
		constexpr auto No = 0x288; // UWGT_PlayerVoteButton_C*
		constexpr auto txt_VoteSubmit = 0x290; // UTextBlock*
		constexpr auto WidgetSwitcher_1 = 0x298; // UWidgetSwitcher*
		constexpr auto Yes = 0x2a0; // UWGT_PlayerVoteButton_C*
	}

	namespace n_UParticleModuleRotationRate {
		constexpr auto StartRotationRate = 0x30; // FRawDistributionFloat
	}

	namespace n_AHLLRconState {
		constexpr auto SayMessageUpdatedEvent = 0x220; // FMulticastInlineDelegate
		constexpr auto m_CurrentRconSay = 0x230; // FString
	}

	namespace n_AGameSession {
		constexpr auto MaxSpectators = 0x220; // int32_t
		constexpr auto MaxPlayers = 0x224; // int32_t
		constexpr auto MaxPartySize = 0x228; // int32_t
		constexpr auto MaxSplitscreensPerConnection = 0x22c; // char
		constexpr auto bRequiresPushToTalk = 0x22d; // bool
		constexpr auto SessionName = 0x230; // FName
	}

	namespace n_UStreamableRenderAsset {
		constexpr auto ForceMipLevelsToBeResidentTimestamp = 0x28; // double
		constexpr auto NumCinematicMipLevels = 0x30; // int32_t
		constexpr auto StreamingIndex = 0x34; // int32_t
		constexpr auto CachedCombinedLODBias = 0x38; // int32_t
		constexpr auto CachedNumResidentLODs = 0x3c; // char
		constexpr auto bCachedReadyForStreaming = 0x3d; // char : 1
		constexpr auto NeverStream = 0x3d; // char : 1
		constexpr auto bGlobalForceMipLevelsToBeResident = 0x3d; // char : 1
		constexpr auto bIsStreamable = 0x3d; // char : 1
		constexpr auto bHasStreamingUpdatePending = 0x3d; // char : 1
		constexpr auto bForceMiplevelsToBeResident = 0x3d; // char : 1
		constexpr auto bIgnoreStreamingMipBias = 0x3d; // char : 1
		constexpr auto bUseCinematicMipLevels = 0x3d; // char : 1
	}

	namespace n_UAnimMontage {
		constexpr auto BlendIn = 0xa8; // FAlphaBlend
		constexpr auto BlendInTime = 0xd8; // float
		constexpr auto BlendOut = 0xe0; // FAlphaBlend
		constexpr auto BlendOutTime = 0x110; // float
		constexpr auto BlendOutTriggerTime = 0x114; // float
		constexpr auto SyncGroup = 0x118; // FName
		constexpr auto SyncSlotIndex = 0x120; // int32_t
		constexpr auto MarkerData = 0x128; // FMarkerSyncData
		constexpr auto CompositeSections = 0x148; // TArray<FCompositeSection>
		constexpr auto SlotAnimTracks = 0x158; // TArray<FSlotAnimationTrack>
		constexpr auto BranchingPoints = 0x168; // TArray<FBranchingPoint>
		constexpr auto bEnableRootMotionTranslation = 0x178; // bool
		constexpr auto bEnableRootMotionRotation = 0x179; // bool
		constexpr auto bEnableAutoBlendOut = 0x17a; // bool
		constexpr auto RootMotionRootLock = 0x17b; // ERootMotionRootLock
		constexpr auto BranchingPointMarkers = 0x180; // TArray<FBranchingPointMarker>
		constexpr auto BranchingPointStateNotifyIndices = 0x190; // TArray<int32_t>
		constexpr auto TimeStretchCurve = 0x1a0; // FTimeStretchCurve
		constexpr auto TimeStretchCurveName = 0x1c8; // FName
	}

	namespace n_UAnimStreamable {
		constexpr auto NumFrames = 0xa8; // int32_t
		constexpr auto Interpolation = 0xac; // EAnimInterpolationType
		constexpr auto RetargetSource = 0xb0; // FName
		constexpr auto BoneCompressionSettings = 0xc8; // UAnimBoneCompressionSettings*
		constexpr auto CurveCompressionSettings = 0xd0; // UAnimCurveCompressionSettings*
		constexpr auto bEnableRootMotion = 0xd8; // bool
		constexpr auto RootMotionRootLock = 0xd9; // ERootMotionRootLock
		constexpr auto bForceRootLock = 0xda; // bool
		constexpr auto bUseNormalizedRootMotionScale = 0xdb; // bool
	}

	namespace n_ULightMapVirtualTexture2D {
		constexpr auto TypeToLayer = 0xe8; // TArray<int8_t>
	}

	namespace n_AGameNetworkManager {
		constexpr auto BadPacketLossThreshold = 0x220; // float
		constexpr auto SeverePacketLossThreshold = 0x224; // float
		constexpr auto BadPingThreshold = 0x228; // int32_t
		constexpr auto SeverePingThreshold = 0x22c; // int32_t
		constexpr auto AdjustedNetSpeed = 0x230; // int32_t
		constexpr auto LastNetSpeedUpdateTime = 0x234; // float
		constexpr auto TotalNetBandwidth = 0x238; // int32_t
		constexpr auto MinDynamicBandwidth = 0x23c; // int32_t
		constexpr auto MaxDynamicBandwidth = 0x240; // int32_t
		constexpr auto bIsStandbyCheckingEnabled = 0x244; // char : 1
		constexpr auto bHasStandbyCheatTriggered = 0x244; // char : 1
		constexpr auto StandbyRxCheatTime = 0x248; // float
		constexpr auto StandbyTxCheatTime = 0x24c; // float
		constexpr auto PercentMissingForRxStandby = 0x250; // float
		constexpr auto PercentMissingForTxStandby = 0x254; // float
		constexpr auto PercentForBadPing = 0x258; // float
		constexpr auto JoinInProgressStandbyWaitTime = 0x25c; // float
		constexpr auto MoveRepSize = 0x260; // float
		constexpr auto MAXPOSITIONERRORSQUARED = 0x264; // float
		constexpr auto MAXNEARZEROVELOCITYSQUARED = 0x268; // float
		constexpr auto CLIENTADJUSTUPDATECOST = 0x26c; // float
		constexpr auto MAXCLIENTUPDATEINTERVAL = 0x270; // float
		constexpr auto MaxClientForcedUpdateDuration = 0x274; // float
		constexpr auto ServerForcedUpdateHitchThreshold = 0x278; // float
		constexpr auto ServerForcedUpdateHitchCooldown = 0x27c; // float
		constexpr auto MaxMoveDeltaTime = 0x280; // float
		constexpr auto MaxClientSmoothingDeltaTime = 0x284; // float
		constexpr auto ClientNetSendMoveDeltaTime = 0x288; // float
		constexpr auto ClientNetSendMoveDeltaTimeThrottled = 0x28c; // float
		constexpr auto ClientNetSendMoveDeltaTimeStationary = 0x290; // float
		constexpr auto ClientNetSendMoveThrottleAtNetSpeed = 0x294; // int32_t
		constexpr auto ClientNetSendMoveThrottleOverPlayerCount = 0x298; // int32_t
		constexpr auto ClientAuthorativePosition = 0x29c; // bool
		constexpr auto ClientErrorUpdateRateLimit = 0x2a0; // float
		constexpr auto ClientNetCamUpdateDeltaTime = 0x2a4; // float
		constexpr auto ClientNetCamUpdatePositionLimit = 0x2a8; // float
		constexpr auto bMovementTimeDiscrepancyDetection = 0x2ac; // bool
		constexpr auto bMovementTimeDiscrepancyResolution = 0x2ad; // bool
		constexpr auto MovementTimeDiscrepancyMaxTimeMargin = 0x2b0; // float
		constexpr auto MovementTimeDiscrepancyMinTimeMargin = 0x2b4; // float
		constexpr auto MovementTimeDiscrepancyResolutionRate = 0x2b8; // float
		constexpr auto MovementTimeDiscrepancyDriftAllowance = 0x2bc; // float
		constexpr auto bMovementTimeDiscrepancyForceCorrectionsDuringResolution = 0x2c0; // bool
		constexpr auto bUseDistanceBasedRelevancy = 0x2c1; // bool
	}

	namespace n_AProceduralFoliageBlockingVolume {
		constexpr auto ProceduralFoliageVolume = 0x258; // AProceduralFoliageVolume*
	}

	namespace n_UNearbySpawnEnemyDetection {
		constexpr auto bDetectNearbyEnemies = 0xc8; // char : 1
		constexpr auto EnemyDetectionDistance = 0xcc; // float
		constexpr auto EnemyBlockingDistance = 0xd0; // float
		constexpr auto NonFriendlySectorBlockingDistance = 0xd4; // float
		constexpr auto SpawnBlockingCooldown = 0xd8; // float
		constexpr auto SpawnEnemyInfo = 0xdc; // FSpawnEnemyInfo
	}

	namespace n_AShooterWeapon_Dispenser {
		constexpr auto DefaultIcon = 0x8c0; // FSlateBrush
		constexpr auto DispenserData = 0x950; // FDispenserData
		constexpr auto RotationRate = 0xae0; // float
		constexpr auto bCanDismantleItems = 0xae4; // char : 1
		constexpr auto bCanPauseConstruction = 0xae4; // char : 1
		constexpr auto DispenserMode = 0xae5; // EDispenserMode
		constexpr auto bAllowDispensingWhileOnMovable = 0xae6; // char : 1
		constexpr auto GhostInstances = 0xae8; // TArray<AHLLDispenserItem_Base*>
		constexpr auto DispenseIndex = 0xaf8; // int32_t
		constexpr auto CurrentRotateDirection = 0xafc; // EGhostRotateDirection
		constexpr auto AdditionalYaw = 0xb00; // float
	}

	namespace n_UWGT_GameMenu_V2_C {
		constexpr auto UberGraphFrame = 0x260; // FPointerToUberGraphFrame
		constexpr auto btn_FieldManual_2 = 0x268; // UbtnNav_V2_C*
		constexpr auto btn_LeaveServer = 0x270; // UbtnNav_V2_C*
		constexpr auto btn_Options_2 = 0x278; // UbtnNav_V2_C*
		constexpr auto btn_Quit = 0x280; // UbtnNav_V2_C*
		constexpr auto btn_Redeploy = 0x288; // UbtnNav_V2_C*
		constexpr auto ButtonPromptsInfo = 0x290; // UButtonPromptsInfo_V2_C*
		constexpr auto DevSpace = 0x298; // UOverlay*
		constexpr auto MapChangeMenu = 0x2a0; // UMapChangeMenu_V2_C*
		constexpr auto MenuHeader = 0x2a8; // UMenuHeader_C*
		constexpr auto PartyManagementList = 0x2b0; // UPartyManagementList_C*
		constexpr auto PartySwitcher = 0x2b8; // UWidgetSwitcher*
		constexpr auto QuitContainer = 0x2c0; // UHorizontalBox*
		constexpr auto RedeployContainer = 0x2c8; // UHorizontalBox*
		constexpr auto ReportPlayerDialog = 0x2d0; // UReportPlayerDialog_C*
		constexpr auto SlashFieldManual = 0x2d8; // UTextBlock*
		constexpr auto SlashLeaveServer = 0x2e0; // UTextBlock*
		constexpr auto SlashOptions = 0x2e8; // UTextBlock*
		constexpr auto SlashQuit = 0x2f0; // UTextBlock*
		constexpr auto SlashRedeploy = 0x2f8; // UTextBlock*
		constexpr auto VB_Nav = 0x300; // UVerticalBox*
		constexpr auto W_Menu_HTP = 0x308; // UW_Menu_HTP_V2_C*
		constexpr auto BackDelegate = 0x310; // FMulticastInlineDelegate
		constexpr auto PopupIndex = 0x320; // int32_t
		constexpr auto bFocusReceived = 0x324; // bool
		constexpr auto bPopupVisible = 0x325; // bool
		constexpr auto MenuButtons = 0x328; // TArray<UbtnNav_V2_C*>
		constexpr auto ReportDialogOpen = 0x338; // bool
	}

	namespace n_UMaterialExpressionVectorParameter {
		constexpr auto DefaultValue = 0x58; // FLinearColor
		constexpr auto bUseCustomPrimitiveData = 0x68; // bool
		constexpr auto PrimitiveDataIndex = 0x69; // char
	}

	namespace n_UWGT_UseContext_Dismantle_C {
		constexpr auto UberGraphFrame = 0x248; // FPointerToUberGraphFrame
	}

	namespace n_UMaterialExpressionShadowReplace {
		constexpr auto Default = 0x40; // FExpressionInput
		constexpr auto Shadow = 0x54; // FExpressionInput
	}

	namespace n_UWGT_UnitDesignationButton_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto RootButton = 0x238; // UButton*
		constexpr auto Pressed = 0x240; // FMulticastInlineDelegate
		constexpr auto Designation = 0x250; // EPlatoonMetaType
		constexpr auto DesginationBrushes = 0x258; // TArray<UTexture2D*>
	}

	namespace n_UParticleModuleMeshRotationRateMultiplyLife {
		constexpr auto LifeMultiplier = 0x30; // FRawDistributionVector
	}

	namespace n_ANavigationTestingActor {
		constexpr auto CapsuleComponent = 0x230; // UCapsuleComponent*
		constexpr auto InvokerComponent = 0x238; // UNavigationInvokerComponent*
		constexpr auto bActAsNavigationInvoker = 0x240; // char : 1
		constexpr auto NavAgentProps = 0x248; // FNavAgentProperties
		constexpr auto QueryingExtent = 0x278; // FVector
		constexpr auto MyNavData = 0x288; // ANavigationData*
		constexpr auto ProjectedLocation = 0x290; // FVector
		constexpr auto bProjectedLocationValid = 0x29c; // char : 1
		constexpr auto bSearchStart = 0x29c; // char : 1
		constexpr auto CostLimitFactor = 0x2a0; // float
		constexpr auto MinimumCostLimit = 0x2a4; // float
		constexpr auto bBacktracking = 0x2a8; // char : 1
		constexpr auto bUseHierarchicalPathfinding = 0x2a8; // char : 1
		constexpr auto bGatherDetailedInfo = 0x2a8; // char : 1
		constexpr auto bDrawDistanceToWall = 0x2a8; // char : 1
		constexpr auto bShowNodePool = 0x2a8; // char : 1
		constexpr auto bShowBestPath = 0x2a8; // char : 1
		constexpr auto bShowDiffWithPreviousStep = 0x2a8; // char : 1
		constexpr auto bShouldBeVisibleInGame = 0x2a8; // char : 1
		constexpr auto CostDisplayMode = 0x2ac; // ENavCostDisplay
		constexpr auto TextCanvasOffset = 0x2b0; // FVector2D
		constexpr auto bPathExist = 0x2b8; // char : 1
		constexpr auto bPathIsPartial = 0x2b8; // char : 1
		constexpr auto bPathSearchOutOfNodes = 0x2b8; // char : 1
		constexpr auto PathfindingTime = 0x2bc; // float
		constexpr auto PathCost = 0x2c0; // float
		constexpr auto PathfindingSteps = 0x2c4; // int32_t
		constexpr auto OtherActor = 0x2c8; // ANavigationTestingActor*
		constexpr auto FilterClass = 0x2d0; // UNavigationQueryFilter*
		constexpr auto ShowStepIndex = 0x2d8; // int32_t
		constexpr auto OffsetFromCornersDistance = 0x2dc; // float
	}

	namespace n_UNavLinkCustomComponent {
		constexpr auto NavLinkUserId = 0xe8; // uint32_t
		constexpr auto EnabledAreaClass = 0xf0; // UNavArea*
		constexpr auto DisabledAreaClass = 0xf8; // UNavArea*
		constexpr auto SupportedAgents = 0x100; // FNavAgentSelector
		constexpr auto LinkRelativeStart = 0x104; // FVector
		constexpr auto LinkRelativeEnd = 0x110; // FVector
		constexpr auto LinkDirection = 0x11c; // ENavLinkDirection
		constexpr auto bLinkEnabled = 0x120; // char : 1
		constexpr auto bNotifyWhenEnabled = 0x120; // char : 1
		constexpr auto bNotifyWhenDisabled = 0x120; // char : 1
		constexpr auto bCreateBoxObstacle = 0x120; // char : 1
		constexpr auto ObstacleOffset = 0x124; // FVector
		constexpr auto ObstacleExtent = 0x130; // FVector
		constexpr auto ObstacleAreaClass = 0x140; // UNavArea*
		constexpr auto BroadcastRadius = 0x148; // float
		constexpr auto BroadcastInterval = 0x14c; // float
		constexpr auto BroadcastChannel = 0x150; // ECollisionChannel
	}

	namespace n_UParticleModuleCollisionGPU {
		constexpr auto Resilience = 0x30; // FRawDistributionFloat
		constexpr auto ResilienceScaleOverLife = 0x60; // FRawDistributionFloat
		constexpr auto Friction = 0x90; // float
		constexpr auto RandomSpread = 0x94; // float
		constexpr auto RandomDistribution = 0x98; // float
		constexpr auto RadiusScale = 0x9c; // float
		constexpr auto RadiusBias = 0xa0; // float
		constexpr auto Response = 0xa4; // EParticleCollisionResponse
		constexpr auto CollisionMode = 0xa5; // EParticleCollisionMode
	}

	namespace n_UMovieSceneEnumTrack {
		constexpr auto Enum = 0x88; // UEnum*
	}

	namespace n_UPawnActionsComponent {
		constexpr auto ControlledPawn = 0xb0; // APawn*
		constexpr auto ActionStacks = 0xb8; // TArray<FPawnActionStack>
		constexpr auto ActionEvents = 0xc8; // TArray<FPawnActionEvent>
		constexpr auto CurrentAction = 0xd8; // UPawnAction*
	}

	namespace n_UW_GH_GameProgress_Offensive_Sector_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Sector = 0x238; // UBorder*
		constexpr auto SizeBox_1 = 0x240; // USizeBox*
		constexpr auto txt_sector = 0x248; // UTextBlock*
		constexpr auto SectorLabel = 0x250; // FText
		constexpr auto ColFriend = 0x268; // FLinearColor
		constexpr auto ColNeutral = 0x278; // FLinearColor
		constexpr auto ColEnemy = 0x288; // FLinearColor
		constexpr auto IsActive = 0x298; // bool
		constexpr auto Friendly = 0x299; // bool
		constexpr auto SectorLocked = 0x29a; // bool
		constexpr auto Contested = 0x29b; // bool
	}

	namespace n_UARTrackableNotifyComponent {
		constexpr auto OnAddTrackedGeometry = 0xb0; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedGeometry = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedGeometry = 0xd0; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedPlane = 0xe0; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedPlane = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedPlane = 0x100; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedPoint = 0x110; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedPoint = 0x120; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedPoint = 0x130; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedImage = 0x140; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedImage = 0x150; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedImage = 0x160; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedFace = 0x170; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedFace = 0x180; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedFace = 0x190; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedEnvProbe = 0x1a0; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedEnvProbe = 0x1b0; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedEnvProbe = 0x1c0; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedObject = 0x1d0; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedObject = 0x1e0; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedObject = 0x1f0; // FMulticastInlineDelegate
	}

	namespace n_UAnimSharingAdditiveInstance {
		constexpr auto BaseComponent = 0x270; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto AdditiveAnimation = 0x278; // TWeakObjectPtr<UAnimSequence>
		constexpr auto Alpha = 0x280; // float
		constexpr auto bStateBool = 0x284; // bool
	}

	namespace n_AHLLPhysicsVolume {
		constexpr auto CharacterMovementFlags = 0x268; // char
	}

	namespace n_UHLLXPItem {
		constexpr auto NameText = 0x230; // UTextBlock*
		constexpr auto ValueText = 0x238; // UTextBlock*
		constexpr auto Anim_Show = 0x240; // UWidgetAnimation*
		constexpr auto Value = 0x248; // float
		constexpr auto bIsMultiplier = 0x24c; // char : 1
	}

	namespace n_UGameplayTasksComponent {
		constexpr auto bIsNetDirty = 0xbc; // char : 1
		constexpr auto SimulatedTasks = 0xc0; // TArray<UGameplayTask*>
		constexpr auto TaskPriorityQueue = 0xd0; // TArray<UGameplayTask*>
		constexpr auto TickingTasks = 0xf0; // TArray<UGameplayTask*>
		constexpr auto KnownTasks = 0x100; // TArray<UGameplayTask*>
		constexpr auto OnClaimedResourcesChange = 0x110; // FMulticastInlineDelegate
	}

	namespace n_UWGT_ServerQueueProgress_C {
		constexpr auto UberGraphFrame = 0x268; // FPointerToUberGraphFrame
		constexpr auto ButtonText = 0x270; // UTextBlock*
		constexpr auto Image_2 = 0x278; // UImage*
		constexpr auto Image_3 = 0x280; // UImage*
		constexpr auto Image_118 = 0x288; // UImage*
		constexpr auto LeftButtonPanel = 0x290; // USizeBox*
		constexpr auto RetainerBox_1 = 0x298; // URetainerBox*
		constexpr auto Throbber_1 = 0x2a0; // UThrobber*
	}

	namespace n_UARCandidateImage {
		constexpr auto CandidateTexture = 0x30; // UTexture2D*
		constexpr auto FriendlyName = 0x38; // FString
		constexpr auto Width = 0x48; // float
		constexpr auto Height = 0x4c; // float
		constexpr auto Orientation = 0x50; // EARCandidateImageOrientation
	}

	namespace n_UBTCompositeNode {
		constexpr auto Children = 0x58; // TArray<FBTCompositeChild>
		constexpr auto Services = 0x68; // TArray<UBTService*>
		constexpr auto bApplyDecoratorScope = 0x88; // char : 1
	}

	namespace n_UBTTask_RunEQSQuery {
		constexpr auto QueryTemplate = 0x98; // UEnvQuery*
		constexpr auto QueryParams = 0xa0; // TArray<FEnvNamedValue>
		constexpr auto QueryConfig = 0xb0; // TArray<FAIDynamicParam>
		constexpr auto RunMode = 0xc0; // EEnvQueryRunMode
		constexpr auto EQSQueryBlackboardKey = 0xc8; // FBlackboardKeySelector
		constexpr auto bUseBBKey = 0xf0; // bool
		constexpr auto EQSRequest = 0xf8; // FEQSParametrizedQueryExecutionRequest
	}

	namespace n_UPlatoonListItem {
		constexpr auto OnPlatoonMemberCountChange = 0x248; // FMulticastInlineDelegate
		constexpr auto PlatoonName = 0x258; // UTextBlock*
		constexpr auto MemberCount = 0x260; // UTextBlock*
		constexpr auto WrapperButton = 0x268; // UButton*
		constexpr auto PlatoonMembers = 0x270; // UPanelWidget*
		constexpr auto MainBorder = 0x278; // UBorder*
		constexpr auto ButtonPanel = 0x280; // UBorder*
		constexpr auto SpectatorIcon = 0x288; // UWidget*
		constexpr auto bReadOnly = 0x290; // char : 1
		constexpr auto bExpanded = 0x290; // char : 1
		constexpr auto Platoon = 0x298; // AHLLPlatoon*
		constexpr auto PlatoonMemberWidgetClass = 0x2a0; // UPlatoonMemberWidget*
	}

	namespace n_UAnimCurveCompressionSettings {
		constexpr auto Codec = 0x28; // UAnimCurveCompressionCodec*
	}

	namespace n_AHLLRepairStation {
		constexpr auto RepairPerSecond = 0x370; // int32_t
		constexpr auto RepairRadius = 0x374; // float
		constexpr auto RepairSound = 0x378; // USoundBase*
		constexpr auto RepairActionScore = 0x380; // FName
		constexpr auto bIsRepairing = 0x390; // char : 1
		constexpr auto RepairParticle = 0x398; // UParticleSystemComponent*
		constexpr auto RepairAC = 0x3a0; // TWeakObjectPtr<UAudioComponent>
		constexpr auto MapComponent = 0x3a8; // UHLLMapComponent*
		constexpr auto IndicatorComponent = 0x3b0; // UHLLIndicatorComponent*
	}

	namespace n_UHLLAimAssistManager {
		constexpr auto AimAssistSettingsAsset = 0x30; // UHLLAimAssistSettingsDataAsset*
	}

	namespace n_UCameraComponent {
		constexpr auto FieldOfView = 0x1f0; // float
		constexpr auto OrthoWidth = 0x1f4; // float
		constexpr auto OrthoNearClipPlane = 0x1f8; // float
		constexpr auto OrthoFarClipPlane = 0x1fc; // float
		constexpr auto AspectRatio = 0x200; // float
		constexpr auto bConstrainAspectRatio = 0x204; // char : 1
		constexpr auto bUseFieldOfViewForLOD = 0x204; // char : 1
		constexpr auto bLockToHmd = 0x204; // char : 1
		constexpr auto bUsePawnControlRotation = 0x204; // char : 1
		constexpr auto ProjectionMode = 0x205; // ECameraProjectionMode
		constexpr auto PostProcessBlendWeight = 0x240; // float
		constexpr auto PostProcessSettings = 0x270; // FPostProcessSettings
	}

	namespace n_UPaperTileMapComponent {
		constexpr auto MapWidth = 0x438; // int32_t
		constexpr auto MapHeight = 0x43c; // int32_t
		constexpr auto TileWidth = 0x440; // int32_t
		constexpr auto TileHeight = 0x444; // int32_t
		constexpr auto DefaultLayerTileSet = 0x448; // UPaperTileSet*
		constexpr auto Material = 0x450; // UMaterialInterface*
		constexpr auto TileLayers = 0x458; // TArray<UPaperTileLayer*>
		constexpr auto TileMapColor = 0x468; // FLinearColor
		constexpr auto UseSingleLayerIndex = 0x478; // int32_t
		constexpr auto bUseSingleLayer = 0x47c; // bool
		constexpr auto TileMap = 0x480; // UPaperTileMap*
	}

	namespace n_AHLL_GameHUD_C {
		constexpr auto DefaultSceneRoot = 0x788; // USceneComponent*
	}

	namespace n_APlayerPawn_Anim_V2_C {
		constexpr auto UberGraphFrame = 0x1040; // FPointerToUberGraphFrame
		constexpr auto DiveTimeline_DiveDelta_9586E2BB49623B7A2A5585A9243F3A2C = 0x1048; // float
		constexpr auto DiveTimeline__Direction_9586E2BB49623B7A2A5585A9243F3A2C = 0x104c; // ETimelineDirection
		constexpr auto DiveTimeline = 0x1050; // UTimelineComponent*
		constexpr auto SavedPos = 0x1058; // FVector
	}

	namespace n_UParticleModuleVelocity {
		constexpr auto StartVelocity = 0x38; // FRawDistributionVector
		constexpr auto StartVelocityRadial = 0x80; // FRawDistributionFloat
	}

	namespace n_USpringArmComponent {
		constexpr auto TargetArmLength = 0x1f0; // float
		constexpr auto SocketOffset = 0x1f4; // FVector
		constexpr auto TargetOffset = 0x200; // FVector
		constexpr auto ProbeSize = 0x20c; // float
		constexpr auto ProbeChannel = 0x210; // ECollisionChannel
		constexpr auto bDoCollisionTest = 0x214; // char : 1
		constexpr auto bUsePawnControlRotation = 0x214; // char : 1
		constexpr auto bInheritPitch = 0x214; // char : 1
		constexpr auto bInheritYaw = 0x214; // char : 1
		constexpr auto bInheritRoll = 0x214; // char : 1
		constexpr auto bEnableCameraLag = 0x214; // char : 1
		constexpr auto bEnableCameraRotationLag = 0x214; // char : 1
		constexpr auto bUseCameraLagSubstepping = 0x214; // char : 1
		constexpr auto bDrawDebugLagMarkers = 0x215; // char : 1
		constexpr auto CameraLagSpeed = 0x218; // float
		constexpr auto CameraRotationLagSpeed = 0x21c; // float
		constexpr auto CameraLagMaxTimeStep = 0x220; // float
		constexpr auto CameraLagMaxDistance = 0x224; // float
	}

	namespace n_UUserDefinedStruct {
		constexpr auto Status = 0xc0; // EUserDefinedStructureStatus
		constexpr auto Guid = 0xc4; // FGuid
	}

	namespace n_UAISense_Sight {
		constexpr auto MaxTracesPerTick = 0x148; // int32_t
		constexpr auto MinQueriesPerTimeSliceCheck = 0x14c; // int32_t
		constexpr auto MaxTimeSlicePerTick = 0x150; // double
		constexpr auto HighImportanceQueryDistanceThreshold = 0x158; // float
		constexpr auto MaxQueryImportance = 0x160; // float
		constexpr auto SightLimitQueryImportance = 0x164; // float
	}

	namespace n_AHLLCommanderAbility_Placeable {
		constexpr auto PlacementData = 0x350; // FRepAbilityPlacement
		constexpr auto bChatMessageNameSector = 0x35c; // char : 1
		constexpr auto bAllowPlacementOutOfBounds = 0x35c; // char : 1
		constexpr auto bSupportRotation = 0x35c; // char : 1
		constexpr auto bTickPlacementChecks = 0x35c; // char : 1
		constexpr auto PlacementChannelName = 0x35d; // ECollisionChannel
		constexpr auto bFixedBaseRotation = 0x35e; // char : 1
		constexpr auto MapComponent = 0x360; // UHLLMapComponent*
		constexpr auto bTransformValid = 0x368; // char : 1
		constexpr auto bIsPlacementValid = 0x368; // char : 1
		constexpr auto bHideIconForThisActivation = 0x368; // char : 1
	}

	namespace n_UModelComponent {
		constexpr auto ModelBodySetup = 0x428; // UBodySetup*
	}

	namespace n_UMouseCursor_C {
		constexpr auto UberGraphFrame = 0x238; // FPointerToUberGraphFrame
		constexpr auto Image_1 = 0x240; // UImage*
	}

	namespace n_URangeSliderWithText_V2_C {
		constexpr auto UberGraphFrame = 0x240; // FPointerToUberGraphFrame
		constexpr auto FocusEffect = 0x248; // UImage*
		constexpr auto Percentage = 0x250; // UTextBlock*
		constexpr auto Slider = 0x258; // USlider*
		constexpr auto SliderSizeBox = 0x260; // USizeBox*
		constexpr auto OnValueChanged = 0x268; // FMulticastInlineDelegate
		constexpr auto Format = 0x278; // FText
		constexpr auto RangeMin = 0x290; // float
		constexpr auto RangeMax = 0x294; // float
		constexpr auto MaxDecimalDigits = 0x298; // int32_t
		constexpr auto SliderWidthOverride = 0x29c; // float
		constexpr auto DisplayedRangeMin = 0x2a0; // float
		constexpr auto DisplayedRangeMax = 0x2a4; // float
		constexpr auto LastValue = 0x2a8; // float
		constexpr auto SliderStepSize = 0x2ac; // float
		constexpr auto bUseDiscreteValue = 0x2b0; // bool
		constexpr auto DiscreteValue = 0x2b4; // float
		constexpr auto InitialSliderStyle = 0x2b8; // FSliderStyle
		constexpr auto FocusedSliderStyle = 0x5f8; // FSliderStyle
		constexpr auto FocusedTextStyle = 0x938; // FSlateColor
		constexpr auto InitialTextStyle = 0x960; // FSlateColor
		constexpr auto StepType = 0x988; // SliderStepType
		constexpr auto CalculatedStepSize = 0x98c; // float
		constexpr auto 0-1Value = 0x990; // bool
	}

	namespace n_USkeleton {
		constexpr auto BoneTree = 0x38; // TArray<FBoneNode>
		constexpr auto RefLocalPoses = 0x48; // TArray<FTransform>
		constexpr auto VirtualBoneGuid = 0x170; // FGuid
		constexpr auto VirtualBones = 0x180; // TArray<FVirtualBone>
		constexpr auto Sockets = 0x190; // TArray<USkeletalMeshSocket*>
		constexpr auto SmartNames = 0x1f0; // FSmartNameContainer
		constexpr auto BlendProfiles = 0x270; // TArray<UBlendProfile*>
		constexpr auto SlotGroups = 0x280; // TArray<FAnimSlotGroup>
		constexpr auto AssetUserData = 0x358; // TArray<UAssetUserData*>
	}

	namespace n_UHalftrackDriverSeatUI {
		constexpr auto DeploymentAvailability = 0x310; // UTextBlock*
		constexpr auto DeploymentAvailabilityPanel = 0x318; // UPanelWidget*
	}

	namespace n_UHLLMapIcon_Ability {
		constexpr auto PlacingPriority = 0x368; // int32_t
		constexpr auto DirectionIndicator = 0x370; // UImage*
		constexpr auto ProgressIndicator = 0x378; // UImage*
		constexpr auto CoverageIndicator = 0x380; // USizeBox*
		constexpr auto CoverageBorder = 0x388; // UBorder*
	}

	namespace n_UScrollBox {
		constexpr auto WidgetStyle = 0x120; // FScrollBoxStyle
		constexpr auto WidgetBarStyle = 0x348; // FScrollBarStyle
		constexpr auto Style = 0x818; // USlateWidgetStyleAsset*
		constexpr auto BarStyle = 0x820; // USlateWidgetStyleAsset*
		constexpr auto Orientation = 0x828; // EOrientation
		constexpr auto ScrollBarVisibility = 0x829; // ESlateVisibility
		constexpr auto ConsumeMouseWheel = 0x82a; // EConsumeMouseWheel
		constexpr auto ScrollbarThickness = 0x82c; // FVector2D
		constexpr auto ScrollbarPadding = 0x834; // FMargin
		constexpr auto AlwaysShowScrollbar = 0x844; // bool
		constexpr auto AlwaysShowScrollbarTrack = 0x845; // bool
		constexpr auto AllowOverscroll = 0x846; // bool
		constexpr auto bAnimateWheelScrolling = 0x847; // bool
		constexpr auto NavigationDestination = 0x848; // EDescendantScrollDestination
		constexpr auto NavigationScrollPadding = 0x84c; // float
		constexpr auto ScrollWhenFocusChanges = 0x850; // EScrollWhenFocusChanges
		constexpr auto bAllowRightClickDragScrolling = 0x851; // bool
		constexpr auto WheelScrollMultiplier = 0x854; // float
		constexpr auto OnUserScrolled = 0x858; // FMulticastInlineDelegate
	}

	namespace n_UHLLMapIcon_AdminCam {
		constexpr auto RotationContainer = 0x368; // UWidget*
	}

	namespace n_UHLLArmourCollisionMesh {
		constexpr auto ArmourAttachSocket = 0x4a0; // FName
		constexpr auto DebugMPC = 0x4a8; // TSoftObjectPtr<UMaterialParameterCollection>
	}

	namespace n_UMaterialExpressionSkyAtmosphereLightIlluminance {
		constexpr auto LightIndex = 0x40; // int32_t
		constexpr auto WorldPosition = 0x44; // FExpressionInput
	}

	namespace n_UInterpTrackInstMove {
		constexpr auto ResetLocation = 0x28; // FVector
		constexpr auto ResetRotation = 0x34; // FRotator
	}

	namespace n_AActor {
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto bNetTemporary = 0x58; // char : 1
		constexpr auto bNetStartup = 0x58; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x58; // char : 1
		constexpr auto bAlwaysRelevant = 0x58; // char : 1
		constexpr auto bReplicateMovement = 0x58; // char : 1
		constexpr auto bHidden = 0x58; // char : 1
		constexpr auto bTearOff = 0x58; // char : 1
		constexpr auto bExchangedRoles = 0x58; // char : 1
		constexpr auto bNetLoadOnClient = 0x59; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x59; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x59; // char : 1
		constexpr auto bRelevantForLevelBounds = 0x59; // char : 1
		constexpr auto bReplayRewindable = 0x59; // char : 1
		constexpr auto bAllowTickBeforeBeginPlay = 0x59; // char : 1
		constexpr auto bAutoDestroyWhenFinished = 0x59; // char : 1
		constexpr auto bCanBeDamaged = 0x59; // char : 1
		constexpr auto bBlockInput = 0x5a; // char : 1
		constexpr auto bCollideWhenPlacing = 0x5a; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x5a; // char : 1
		constexpr auto bGenerateOverlapEventsDuringLevelStreaming = 0x5a; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x5a; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x5a; // char : 1
		constexpr auto bIsEditorOnlyActor = 0x5a; // char : 1
		constexpr auto bActorSeamlessTraveled = 0x5a; // char : 1
		constexpr auto bReplicates = 0x5b; // char : 1
		constexpr auto bCanBeInCluster = 0x5b; // char : 1
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x5b; // char : 1
		constexpr auto bActorEnableCollision = 0x5c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x5c; // char : 1
		constexpr auto UpdateOverlapsMethodDuringLevelStreaming = 0x5d; // EActorUpdateOverlapsMethod
		constexpr auto DefaultUpdateOverlapsMethodDuringLevelStreaming = 0x5e; // EActorUpdateOverlapsMethod
		constexpr auto RemoteRole = 0x5f; // ENetRole
		constexpr auto ReplicatedMovement = 0x60; // FRepMovement
		constexpr auto InitialLifeSpan = 0x94; // float
		constexpr auto CustomTimeDilation = 0x98; // float
		constexpr auto AttachmentReplication = 0xa0; // FRepAttachment
		constexpr auto Owner = 0xe0; // AActor*
		constexpr auto NetDriverName = 0xe8; // FName
		constexpr auto Role = 0xf0; // ENetRole
		constexpr auto NetDormancy = 0xf1; // ENetDormancy
		constexpr auto SpawnCollisionHandlingMethod = 0xf2; // ESpawnActorCollisionHandlingMethod
		constexpr auto AutoReceiveInput = 0xf3; // EAutoReceiveInput
		constexpr auto InputPriority = 0xf4; // int32_t
		constexpr auto InputComponent = 0xf8; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x100; // float
		constexpr auto NetTag = 0x104; // int32_t
		constexpr auto NetUpdateFrequency = 0x108; // float
		constexpr auto MinNetUpdateFrequency = 0x10c; // float
		constexpr auto NetPriority = 0x110; // float
		constexpr auto Instigator = 0x118; // APawn*
		constexpr auto Children = 0x120; // TArray<AActor*>
		constexpr auto RootComponent = 0x130; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x138; // TArray<AMatineeActor*>
		constexpr auto Layers = 0x150; // TArray<FName>
		constexpr auto ParentComponent = 0x160; // TWeakObjectPtr<UChildActorComponent>
		constexpr auto Tags = 0x170; // TArray<FName>
		constexpr auto OnTakeAnyDamage = 0x180; // FMulticastSparseDelegate
		constexpr auto OnTakePointDamage = 0x181; // FMulticastSparseDelegate
		constexpr auto OnTakeRadialDamage = 0x182; // FMulticastSparseDelegate
		constexpr auto OnActorBeginOverlap = 0x183; // FMulticastSparseDelegate
		constexpr auto OnActorEndOverlap = 0x184; // FMulticastSparseDelegate
		constexpr auto OnBeginCursorOver = 0x185; // FMulticastSparseDelegate
		constexpr auto OnEndCursorOver = 0x186; // FMulticastSparseDelegate
		constexpr auto OnClicked = 0x187; // FMulticastSparseDelegate
		constexpr auto OnReleased = 0x188; // FMulticastSparseDelegate
		constexpr auto OnInputTouchBegin = 0x189; // FMulticastSparseDelegate
		constexpr auto OnInputTouchEnd = 0x18a; // FMulticastSparseDelegate
		constexpr auto OnInputTouchEnter = 0x18b; // FMulticastSparseDelegate
		constexpr auto OnInputTouchLeave = 0x18c; // FMulticastSparseDelegate
		constexpr auto OnActorHit = 0x18d; // FMulticastSparseDelegate
		constexpr auto OnDestroyed = 0x18e; // FMulticastSparseDelegate
		constexpr auto OnEndPlay = 0x18f; // FMulticastSparseDelegate
		constexpr auto InstanceComponents = 0x1f0; // TArray<UActorComponent*>
		constexpr auto BlueprintCreatedComponents = 0x200; // TArray<UActorComponent*>
	}

	namespace n_UMaterialExpressionSign {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UHLLKeyText {
		constexpr auto DefaultText = 0x2a0; // FText
		constexpr auto KeybindName = 0x2b8; // FName
		constexpr auto bIsAxis = 0x2c0; // char : 1
		constexpr auto bShowSquareBrackets = 0x2c0; // char : 1
		constexpr auto AxisScale = 0x2c4; // float
	}

	namespace n_UHLLRadialMenu_ChatSegment {
		constexpr auto ChatType = 0x278; // EHLLChat
		constexpr auto ChatIcon = 0x280; // UImage*
	}

	namespace n_UHTP_Widget_Role_Loadout_Engineer_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_3 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_7 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_8 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x270; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_5 = 0x278; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x280; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_12 = 0x288; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x290; // UImage*
		constexpr auto Image_10 = 0x298; // UImage*
		constexpr auto Image_17 = 0x2a0; // UImage*
	}

	namespace n_UGridPathFollowingComponent {
		constexpr auto GridManager = 0x258; // UNavLocalGridManager*
	}

	namespace n_AWheeledVehicle {
		constexpr auto Mesh = 0x280; // USkeletalMeshComponent*
		constexpr auto VehicleMovement = 0x288; // UWheeledVehicleMovementComponent*
	}

	namespace n_UMaterialExpressionSphericalParticleOpacity {
		constexpr auto Density = 0x40; // FExpressionInput
		constexpr auto ConstantDensity = 0x54; // float
	}

	namespace n_UMovieSceneObjectPropertySection {
		constexpr auto ObjectChannel = 0xe0; // FMovieSceneObjectPathChannel
	}

	namespace n_UAvailablePlatoonTypes_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Armor = 0x238; // UPlatoonTypeListItem_V2_C*
		constexpr auto Infantry = 0x240; // UPlatoonTypeListItem_V2_C*
		constexpr auto Recon = 0x248; // UPlatoonTypeListItem_V2_C*
		constexpr auto RetainerBox_1 = 0x250; // URetainerBox*
		constexpr auto Widget_Parent = 0x258; // UCreatePlatoon_V2_C*
		constexpr auto Current = 0x260; // UPlatoonTypeListItem_V2_C*
		constexpr auto Create = 0x268; // FMulticastInlineDelegate
		constexpr auto OnHovered = 0x278; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x288; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleRotation_Seeded {
		constexpr auto RandomSeedInfo = 0x60; // FParticleRandomSeedInfo
	}

	namespace n_UWGT_PlayerVoteButton_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Button = 0x238; // UButton*
		constexpr auto ButtonPrompt = 0x240; // UImage*
		constexpr auto ButtonText = 0x248; // UTextBlock*
		constexpr auto KeyText = 0x250; // UHLLKeyText*
		constexpr auto Type = 0x258; // EPlayerVote
		constexpr auto Clicked = 0x260; // FMulticastInlineDelegate
		constexpr auto GamepadButtonIcons = 0x270; // TArray<FSlateBrush>
	}

	namespace n_UHLLUseContext_MountWeapon {
		constexpr auto UseText = 0x238; // URichTextBlock*
	}

	namespace n_UMovieScene3DAttachSection {
		constexpr auto AttachSocketName = 0x108; // FName
		constexpr auto AttachComponentName = 0x110; // FName
		constexpr auto AttachmentLocationRule = 0x118; // EAttachmentRule
		constexpr auto AttachmentRotationRule = 0x119; // EAttachmentRule
		constexpr auto AttachmentScaleRule = 0x11a; // EAttachmentRule
		constexpr auto DetachmentLocationRule = 0x11b; // EDetachmentRule
		constexpr auto DetachmentRotationRule = 0x11c; // EDetachmentRule
		constexpr auto DetachmentScaleRule = 0x11d; // EDetachmentRule
	}

	namespace n_AServerStatReplicator {
		constexpr auto bUpdateStatNet = 0x220; // bool
		constexpr auto bOverwriteClientStats = 0x221; // bool
		constexpr auto Channels = 0x224; // uint32_t
		constexpr auto InRate = 0x228; // uint32_t
		constexpr auto OutRate = 0x22c; // uint32_t
		constexpr auto MaxPacketOverhead = 0x234; // uint32_t
		constexpr auto InRateClientMax = 0x238; // uint32_t
		constexpr auto InRateClientMin = 0x23c; // uint32_t
		constexpr auto InRateClientAvg = 0x240; // uint32_t
		constexpr auto InPacketsClientMax = 0x244; // uint32_t
		constexpr auto InPacketsClientMin = 0x248; // uint32_t
		constexpr auto InPacketsClientAvg = 0x24c; // uint32_t
		constexpr auto OutRateClientMax = 0x250; // uint32_t
		constexpr auto OutRateClientMin = 0x254; // uint32_t
		constexpr auto OutRateClientAvg = 0x258; // uint32_t
		constexpr auto OutPacketsClientMax = 0x25c; // uint32_t
		constexpr auto OutPacketsClientMin = 0x260; // uint32_t
		constexpr auto OutPacketsClientAvg = 0x264; // uint32_t
		constexpr auto NetNumClients = 0x268; // uint32_t
		constexpr auto InPackets = 0x26c; // uint32_t
		constexpr auto OutPackets = 0x270; // uint32_t
		constexpr auto InBunches = 0x274; // uint32_t
		constexpr auto OutBunches = 0x278; // uint32_t
		constexpr auto OutLoss = 0x27c; // uint32_t
		constexpr auto InLoss = 0x280; // uint32_t
		constexpr auto VoiceBytesSent = 0x284; // uint32_t
		constexpr auto VoiceBytesRecv = 0x288; // uint32_t
		constexpr auto VoicePacketsSent = 0x28c; // uint32_t
		constexpr auto VoicePacketsRecv = 0x290; // uint32_t
		constexpr auto PercentInVoice = 0x294; // uint32_t
		constexpr auto PercentOutVoice = 0x298; // uint32_t
		constexpr auto NumActorChannels = 0x29c; // uint32_t
		constexpr auto NumConsideredActors = 0x2a0; // uint32_t
		constexpr auto PrioritizedActors = 0x2a4; // uint32_t
		constexpr auto NumRelevantActors = 0x2a8; // uint32_t
		constexpr auto NumRelevantDeletedActors = 0x2ac; // uint32_t
		constexpr auto NumReplicatedActorAttempts = 0x2b0; // uint32_t
		constexpr auto NumReplicatedActors = 0x2b4; // uint32_t
		constexpr auto NumActors = 0x2b8; // uint32_t
		constexpr auto NumNetActors = 0x2bc; // uint32_t
		constexpr auto NumDormantActors = 0x2c0; // uint32_t
		constexpr auto NumInitiallyDormantActors = 0x2c4; // uint32_t
		constexpr auto NumNetGUIDsAckd = 0x2c8; // uint32_t
		constexpr auto NumNetGUIDsPending = 0x2cc; // uint32_t
		constexpr auto NumNetGUIDsUnAckd = 0x2d0; // uint32_t
		constexpr auto ObjPathBytes = 0x2d4; // uint32_t
		constexpr auto NetGUIDOutRate = 0x2d8; // uint32_t
		constexpr auto NetGUIDInRate = 0x2dc; // uint32_t
		constexpr auto NetSaturated = 0x2e0; // uint32_t
	}

	namespace n_APlayerState {
		constexpr auto Score = 0x220; // float
		constexpr auto PlayerId = 0x224; // int32_t
		constexpr auto Ping = 0x228; // char
		constexpr auto bShouldUpdateReplicatedPing = 0x22a; // char : 1
		constexpr auto bIsSpectator = 0x22a; // char : 1
		constexpr auto bOnlySpectator = 0x22a; // char : 1
		constexpr auto bIsABot = 0x22a; // char : 1
		constexpr auto bIsInactive = 0x22a; // char : 1
		constexpr auto bFromPreviousLevel = 0x22a; // char : 1
		constexpr auto StartTime = 0x22c; // int32_t
		constexpr auto EngineMessageClass = 0x230; // ULocalMessage*
		constexpr auto SavedNetworkAddress = 0x240; // FString
		constexpr auto UniqueId = 0x250; // FUniqueNetIdRepl
		constexpr auto PawnPrivate = 0x280; // APawn*
		constexpr auto PlayerNamePrivate = 0x300; // FString
	}

	namespace n_UBoxComponent {
		constexpr auto BoxExtent = 0x428; // FVector
		constexpr auto LineThickness = 0x434; // float
	}

	namespace n_UParticleModuleAccelerationBase {
		constexpr auto bAlwaysInWorldSpace = 0x30; // char : 1
	}

	namespace n_UMovieSceneObjectPropertyTrack {
		constexpr auto PropertyClass = 0x88; // UObject*
	}

	namespace n_AShooterHUD {
		constexpr auto RoleSelectionEnabledOnDeploymentScreen = 0x32a; // bool
		constexpr auto HUDWidgetClass = 0x330; // UHLLHUDBase*
		constexpr auto HUDWidgetZOrder = 0x338; // int32_t
		constexpr auto HintWidgetClass = 0x340; // UHLLHintWidget*
		constexpr auto HintWidgetZOrder = 0x348; // int32_t
		constexpr auto DeploymentWidgetZOrder = 0x34c; // int32_t
		constexpr auto ChatOverlayWidgetClass = 0x350; // UChatOverlay*
		constexpr auto ChatOverlayWidgetZOrder = 0x358; // int32_t
		constexpr auto ChatOverlayVisibilityTimeout = 0x35c; // float
		constexpr auto m_hudWidget = 0x360; // UHLLHUDBase*
		constexpr auto m_HintWidget = 0x368; // UHLLHintWidget*
		constexpr auto m_chatOverlay = 0x370; // UChatOverlay*
		constexpr auto m_deploymentScreen = 0x388; // UHLLDeploymentScreen*
		constexpr auto MaxTeammateNameVisibilityDistance = 0x3ec; // float
		constexpr auto MaxPlatoonMemberNameVisibilityDistance = 0x3f0; // float
		constexpr auto OnShowDeploymentScreenRequested = 0x3f8; // FMulticastInlineDelegate
		constexpr auto OnHideDeploymentScreenRequested = 0x408; // FMulticastInlineDelegate
		constexpr auto OnRoundSummaryVisibilityChanged = 0x418; // FMulticastInlineDelegate
		constexpr auto OverviewMapZOrder = 0x428; // int32_t
		constexpr auto m_OverviewMap = 0x430; // UHLLOverviewMapWrapper*
		constexpr auto RconConsoleZOrder = 0x438; // int32_t
		constexpr auto RconConsoleClass = 0x440; // UHLLRconCommandWindow*
		constexpr auto m_RconConsole = 0x448; // UHLLRconCommandWindow*
		constexpr auto UseContextWidgetClass = 0x450; // UHLLUseContextContainer*
		constexpr auto UseContextAnchors = 0x458; // FAnchors
		constexpr auto UseContextZOrder = 0x468; // int32_t
		constexpr auto UseContextAlignment = 0x46c; // FVector2D
		constexpr auto m_UseContextWidget = 0x478; // UHLLUseContextContainer*
		constexpr auto ScopeWidgetZOrder = 0x480; // int32_t
		constexpr auto ActiveScopeWidget = 0x488; // UHLLScopeWidget*
		constexpr auto ActiveGameMenu = 0x498; // UHLLInGameMenu*
		constexpr auto GameMenuZOrder = 0x4a0; // int32_t
		constexpr auto ActiveRoundSummary = 0x4a8; // UHLLRoundSummary*
		constexpr auto RoundSummaryZOrder = 0x4b4; // int32_t
		constexpr auto RoundSummaryClass = 0x4b8; // UHLLRoundSummary*
		constexpr auto DeathScreenZOrder = 0x4c0; // int32_t
		constexpr auto ActiveDeathScreen = 0x4c8; // UHLLDeathScreen*
		constexpr auto YourSectorProgressColors = 0x528; // FSectorCaptureProgressWheelColor
		constexpr auto EnemySectorProgressColors = 0x548; // FSectorCaptureProgressWheelColor
		constexpr auto ContestedSectorProgressColors = 0x568; // FSectorCaptureProgressWheelColor
		constexpr auto SeatWidgetZOrder = 0x588; // int32_t
		constexpr auto m_ActiveSeatUI = 0x590; // UHLLSeatWidgetBase*
		constexpr auto m_RconSayDuration = 0x598; // float
		constexpr auto DamageIndicator = 0x5b0; // UHLLDamageIndicator*
		constexpr auto DamageIndicatorClass = 0x5b8; // UHLLDamageIndicator*
		constexpr auto DamageIndicatorZOrder = 0x5c0; // int32_t
		constexpr auto SpeakingPlayers = 0x5c8; // USpeakingPlayersList*
		constexpr auto SpeakingPlayersClass = 0x5d0; // USpeakingPlayersList*
		constexpr auto SpeakingPlayersZOrder = 0x5d8; // int32_t
		constexpr auto SpeakingPlayersAnchors = 0x5dc; // FAnchors
		constexpr auto SpeakingPlayersAlignment = 0x5ec; // FVector2D
		constexpr auto SpeakingPlayersOffsets = 0x5f4; // FMargin
		constexpr auto StatsTestWidget = 0x608; // UUserWidget*
		constexpr auto StatsTestWidgetClass = 0x610; // UUserWidget*
		constexpr auto PlatoonInvitationDialogZOrder = 0x618; // int32_t
		constexpr auto PlatoonManagementStackWidget = 0x628; // UPlatoonManagementStack*
		constexpr auto PlatoonManagementStackZOrder = 0x630; // int32_t
		constexpr auto ActiveMarkerMenu = 0x650; // UHLLRadialMenu_MarkersBase*
		constexpr auto MarkerMenuZOrder = 0x658; // int32_t
		constexpr auto MarkerMenuClass = 0x660; // UHLLRadialMenu_MarkersBase*
		constexpr auto MarkerMenuAnchors = 0x668; // FAnchors
		constexpr auto MarkerMenuAlignment = 0x678; // FVector2D
		constexpr auto MarkerMenuOffsets = 0x680; // FMargin
		constexpr auto ActiveChatMenu = 0x698; // UHLLRadialMenu_ChatBase*
		constexpr auto ChatMenuZOrder = 0x6a0; // int32_t
		constexpr auto ChatMenuClass = 0x6a8; // UHLLRadialMenu_ChatBase*
		constexpr auto ChatMenuAnchors = 0x6b0; // FAnchors
		constexpr auto ChatMenuAlignment = 0x6c0; // FVector2D
		constexpr auto ChatMenuOffsets = 0x6c8; // FMargin
		constexpr auto WeaponRadialMenu = 0x6d8; // UHLLRadialMenu_WeaponBase*
		constexpr auto EquipmentRadialMenuClass = 0x6e0; // UHLLRadialMenu_WeaponBase*
		constexpr auto DefaultFadeSpeed = 0x6ec; // float
		constexpr auto FastFadeSpeed = 0x6f0; // float
		constexpr auto SecondaryDisplayState = 0x6f4; // FHUDDisplayState
		constexpr auto VoteWidget = 0x708; // UHLLVoteWidget*
		constexpr auto VoteWidgetClass = 0x710; // UHLLVoteWidget*
		constexpr auto VoteWidgetZOrder = 0x718; // int32_t
		constexpr auto VoteWidgetAnchors = 0x71c; // FAnchors
		constexpr auto VoteWidgetAlignment = 0x72c; // FVector2D
		constexpr auto VoteWidgetOffsets = 0x734; // FMargin
		constexpr auto AdminCamWidget = 0x748; // UHLLAdminCamUI*
		constexpr auto AdminCamWidgetClass = 0x750; // UHLLAdminCamUI*
		constexpr auto AdminCamWidgetZOrder = 0x758; // int32_t
		constexpr auto AdminCamWidgetAnchors = 0x75c; // FAnchors
		constexpr auto AdminCamWidgetAlignment = 0x76c; // FVector2D
		constexpr auto AdminCamWidgetOffsets = 0x774; // FMargin
	}

	namespace n_UMaterialExpressionSaturate {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UBTDecorator_IsAtLocation {
		constexpr auto AcceptableRadius = 0x90; // float
		constexpr auto ParametrizedAcceptableRadius = 0x98; // FAIDataProviderFloatValue
		constexpr auto GeometricDistanceType = 0xd0; // FAIDistanceType
		constexpr auto bUseParametrizedRadius = 0xd4; // char : 1
		constexpr auto bUseNavAgentGoalLocation = 0xd4; // char : 1
		constexpr auto bPathFindingBasedTest = 0xd4; // char : 1
	}

	namespace n_UParticleModuleTypeDataMesh {
		constexpr auto Mesh = 0x30; // UStaticMesh*
		constexpr auto LODSizeScale = 0x40; // float
		constexpr auto bUseStaticMeshLODs = 0x44; // char : 1
		constexpr auto CastShadows = 0x44; // char : 1
		constexpr auto DoCollisions = 0x44; // char : 1
		constexpr auto MeshAlignment = 0x45; // EMeshScreenAlignment
		constexpr auto bOverrideMaterial = 0x46; // char : 1
		constexpr auto bOverrideDefaultMotionBlurSettings = 0x46; // char : 1
		constexpr auto bEnableMotionBlur = 0x46; // char : 1
		constexpr auto RollPitchYawRange = 0x48; // FRawDistributionVector
		constexpr auto AxisLockOption = 0x90; // EParticleAxisLock
		constexpr auto bCameraFacing = 0x91; // char : 1
		constexpr auto CameraFacingUpAxisOption = 0x92; // EMeshCameraFacingUpAxis
		constexpr auto CameraFacingOption = 0x93; // EMeshCameraFacingOptions
		constexpr auto bApplyParticleRotationAsSpin = 0x94; // char : 1
		constexpr auto bFaceCameraDirectionRatherThanPosition = 0x94; // char : 1
		constexpr auto bCollisionsConsiderPartilceSize = 0x94; // char : 1
	}

	namespace n_UGamepadLayoutsScreen_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Artillery = 0x238; // UOptionsTabButton_V2_C*
		constexpr auto Common = 0x240; // UOptionsTabButton_V2_C*
		constexpr auto Infantry = 0x248; // UOptionsTabButton_V2_C*
		constexpr auto LayoutButton = 0x250; // UOptionButton_V2_C*
		constexpr auto LeftTabButton = 0x258; // UImage*
		constexpr auto PlaystationButtonPanel = 0x260; // UCanvasPanel*
		constexpr auto PlaystationButtonPanel_SonyOfficial = 0x268; // UCanvasPanel*
		constexpr auto PlaystationLeftAnalogYAxis = 0x270; // UGamepadLayoutKey_C*
		constexpr auto PlaystationLeftAnalogYAxis_SonyOfficial = 0x278; // UGamepadLayoutKey_C*
		constexpr auto PlaystationLinePanel = 0x280; // UCanvasPanel*
		constexpr auto PlaystationLinePanel_SonyOfficial = 0x288; // UCanvasPanel*
		constexpr auto PlaystationRightAnalogYAxis = 0x290; // UGamepadLayoutKey_C*
		constexpr auto PlaystationRightAnalogYAxis_SonyOfficial = 0x298; // UGamepadLayoutKey_C*
		constexpr auto RightTabButton = 0x2a0; // UImage*
		constexpr auto SwitchSticksToggle = 0x2a8; // UOptionButton_V2_C*
		constexpr auto TabsContainer = 0x2b0; // UHorizontalBox*
		constexpr auto Vehicle = 0x2b8; // UOptionsTabButton_V2_C*
		constexpr auto VehicleGUNNER = 0x2c0; // UOptionsTabButton_V2_C*
		constexpr auto XboxButtonPanel = 0x2c8; // UCanvasPanel*
		constexpr auto XboxLeftAnalogYAxis = 0x2d0; // UGamepadLayoutKey_C*
		constexpr auto XboxLinePanel = 0x2d8; // UCanvasPanel*
		constexpr auto XboxRightAnalogYAxis = 0x2e0; // UGamepadLayoutKey_C*
		constexpr auto OptionsScreen = 0x2e8; // UOptionsScreen_V2_C*
		constexpr auto GamepadActions = 0x2f0; // TArray<UGamepadLayoutKey_C*>
		constexpr auto Tabs = 0x300; // TArray<UOptionsTabButton_V2_C*>
		constexpr auto LeftTriggerPlaystationImage = 0x310; // FSlateBrush
		constexpr auto RightTriggerPlaystationImage = 0x398; // FSlateBrush
		constexpr auto LeftTriggerXboxImage = 0x420; // FSlateBrush
		constexpr auto RightTriggerXboxImage = 0x4a8; // FSlateBrush
		constexpr auto XboxButtonIcons = 0x530; // TMap<FKey, TSoftObjectPtr<UTexture2D>>
		constexpr auto PlaystationButtonIcons = 0x580; // TMap<FKey, TSoftObjectPtr<UTexture2D>>
		constexpr auto SelectedPlatformIcons = 0x5d0; // TMap<FKey, TSoftObjectPtr<UTexture2D>>
		constexpr auto VisibleLinesPanel = 0x620; // UCanvasPanel*
		constexpr auto SelectedPlatformPanel = 0x628; // UCanvasPanel*
		constexpr auto SelectedRightStick = 0x630; // UGamepadLayoutKey_C*
		constexpr auto SelectedLeftStick = 0x638; // UGamepadLayoutKey_C*
		constexpr auto DataTableArray = 0x640; // TArray<FName>
	}

	namespace n_UInAppPurchaseRestoreCallbackProxy {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_UHLLSimpleHealthComponent {
		constexpr auto DamageThreshold = 0xb0; // float
		constexpr auto DeathBehaviour = 0xb4; // ESimpleDeathBehaviour
		constexpr auto PostDeathLifespan = 0xb8; // float
		constexpr auto EnemyScoreForKill = 0xbc; // FName
		constexpr auto EnemyStatForKill = 0xc4; // EHLLPlayerStat
		constexpr auto EnemyHintForKill = 0xc5; // EHint
		constexpr auto bDismantleBehaviourOverride = 0xc6; // char : 1
		constexpr auto DismantleBehaviour = 0xc7; // ESimpleDeathBehaviour
		constexpr auto KillerInstigators = 0xc8; // TArray<AController*>
		constexpr auto DeathEffect = 0xd8; // AShooterImpactEffect*
		constexpr auto EffectRelativeTransform = 0xe0; // FTransform
		constexpr auto WreckActor = 0x110; // AHLLVehicleWreck*
		constexpr auto bHandledDeath = 0x118; // char : 1
		constexpr auto ExplosionDamageType = 0x120; // UDamageType*
		constexpr auto ExplosionDamage = 0x128; // float
		constexpr auto ExplosionRadius = 0x12c; // float
		constexpr auto ExplosionSuppression = 0x130; // float
		constexpr auto ExplosionSuppressionRadius = 0x134; // float
		constexpr auto OnKilled = 0x138; // FMulticastInlineDelegate
		constexpr auto HealthInfo = 0x148; // FRepHealthInfo
		constexpr auto DeathNotifyBehaviour = 0x150; // ESimpleDeathNotify
		constexpr auto bDismantleNotifyOverride = 0x151; // char : 1
		constexpr auto DismantleNotifyBehaviour = 0x152; // ESimpleDeathNotify
	}

	namespace n_UMovieSceneCameraAnimSection {
		constexpr auto AnimData = 0xe0; // FMovieSceneCameraAnimSectionData
		constexpr auto CameraAnim = 0x100; // UCameraAnim*
		constexpr auto PlayRate = 0x108; // float
		constexpr auto PlayScale = 0x10c; // float
		constexpr auto BlendInTime = 0x110; // float
		constexpr auto BlendOutTime = 0x114; // float
		constexpr auto bLooping = 0x118; // bool
	}

	namespace n_UHLLUseContext_Dispenser {
		constexpr auto CantDropTint = 0x23c; // FLinearColor
		constexpr auto ItemList = 0x250; // UVerticalBox*
		constexpr auto ItemWidgets = 0x258; // TArray<UHLLDispenserListItem*>
		constexpr auto CurrentListWeapon = 0x268; // TWeakObjectPtr<AShooterWeapon_Dispenser>
		constexpr auto RootVBox = 0x270; // UVerticalBox*
		constexpr auto RadialProg = 0x278; // UImage*
		constexpr auto IconImage = 0x280; // UImage*
		constexpr auto DisplayText = 0x288; // URichTextBlock*
		constexpr auto SelectText = 0x290; // URichTextBlock*
		constexpr auto RotateHBox = 0x298; // UHorizontalBox*
		constexpr auto RotateLText = 0x2a0; // URichTextBlock*
		constexpr auto RotateRText = 0x2a8; // URichTextBlock*
	}

	namespace n_UParticleModuleBeamNoise {
		constexpr auto bLowFreq_Enabled = 0x30; // char : 1
		constexpr auto Frequency = 0x34; // int32_t
		constexpr auto Frequency_LowRange = 0x38; // int32_t
		constexpr auto NoiseRange = 0x40; // FRawDistributionVector
		constexpr auto NoiseRangeScale = 0x88; // FRawDistributionFloat
		constexpr auto bNRScaleEmitterTime = 0xb8; // char : 1
		constexpr auto NoiseSpeed = 0xc0; // FRawDistributionVector
		constexpr auto bSmooth = 0x108; // char : 1
		constexpr auto NoiseLockRadius = 0x10c; // float
		constexpr auto bNoiseLock = 0x110; // char : 1
		constexpr auto bOscillate = 0x110; // char : 1
		constexpr auto NoiseLockTime = 0x114; // float
		constexpr auto NoiseTension = 0x118; // float
		constexpr auto bUseNoiseTangents = 0x11c; // char : 1
		constexpr auto NoiseTangentStrength = 0x120; // FRawDistributionFloat
		constexpr auto NoiseTessellation = 0x150; // int32_t
		constexpr auto bTargetNoise = 0x154; // char : 1
		constexpr auto FrequencyDistance = 0x158; // float
		constexpr auto bApplyNoiseScale = 0x15c; // char : 1
		constexpr auto NoiseScale = 0x160; // FRawDistributionFloat
	}

	namespace n_UPlayMontageCallbackProxy {
		constexpr auto OnCompleted = 0x28; // FMulticastInlineDelegate
		constexpr auto OnBlendOut = 0x38; // FMulticastInlineDelegate
		constexpr auto OnInterrupted = 0x48; // FMulticastInlineDelegate
		constexpr auto OnNotifyBegin = 0x58; // FMulticastInlineDelegate
		constexpr auto OnNotifyEnd = 0x68; // FMulticastInlineDelegate
	}

	namespace n_AStressTestBotAI_C {
		constexpr auto StressTestPlayerController = 0x328; // UStressTestPlayerControllerComponent*
	}

	namespace n_UDistributionFloatParameterBase {
		constexpr auto ParameterName = 0x40; // FName
		constexpr auto MinInput = 0x48; // float
		constexpr auto MaxInput = 0x4c; // float
		constexpr auto MinOutput = 0x50; // float
		constexpr auto MaxOutput = 0x54; // float
		constexpr auto ParamMode = 0x58; // DistributionParamMode
	}

	namespace n_UAnimInstance {
		constexpr auto CurrentSkeleton = 0x28; // USkeleton*
		constexpr auto RootMotionMode = 0x30; // ERootMotionMode
		constexpr auto bUseMultiThreadedAnimationUpdate = 0x31; // char : 1
		constexpr auto bUsingCopyPoseFromMesh = 0x31; // char : 1
		constexpr auto bReceiveNotifiesFromLinkedInstances = 0x31; // char : 1
		constexpr auto bPropagateNotifiesToLinkedInstances = 0x31; // char : 1
		constexpr auto bQueueMontageEvents = 0x31; // char : 1
		constexpr auto OnMontageBlendingOut = 0x38; // FMulticastInlineDelegate
		constexpr auto OnMontageStarted = 0x48; // FMulticastInlineDelegate
		constexpr auto OnMontageEnded = 0x58; // FMulticastInlineDelegate
		constexpr auto OnAllMontageInstancesEnded = 0x68; // FMulticastInlineDelegate
		constexpr auto NotifyQueue = 0x100; // FAnimNotifyQueue
		constexpr auto ActiveAnimNotifyState = 0x170; // TArray<FAnimNotifyEvent>
		constexpr auto bAnimNotifiesEnabled = 0x268; // char : 1
	}

	namespace n_UWeaponFPPAnimationSet {
		constexpr auto PoseInheritance = 0x28; // UAnimSequence*
		constexpr auto PoseIdle = 0x30; // UAnimSequence*
		constexpr auto PoseADS = 0x38; // UAnimSequence*
		constexpr auto Equip = 0x40; // FWeaponAnim
		constexpr auto Fire = 0x68; // FWeaponAnim
		constexpr auto Bolt = 0x90; // FWeaponAnim
		constexpr auto Reload = 0xb8; // FWeaponAnim
		constexpr auto ReloadEmpty = 0xe0; // FWeaponAnim
		constexpr auto ChangeBarrel = 0x108; // FWeaponAnim
		constexpr auto ReloadEnter = 0x130; // FWeaponAnim
		constexpr auto ReloadEnterWet = 0x158; // FWeaponAnim
		constexpr auto ReloadLoop = 0x180; // FWeaponAnim
		constexpr auto ReloadLoopWet = 0x1a8; // FWeaponAnim
		constexpr auto ReloadExit = 0x1d0; // FWeaponAnim
		constexpr auto ReloadExitEmpty = 0x1f8; // FWeaponAnim
		constexpr auto Deploy = 0x220; // FWeaponAnim
		constexpr auto Undeploy = 0x248; // FWeaponAnim
		constexpr auto ReloadDeployed = 0x270; // FWeaponAnim
		constexpr auto ReloadDeployedEmpty = 0x298; // FWeaponAnim
		constexpr auto ChangeBarrelDeployed = 0x2c0; // FWeaponAnim
		constexpr auto Jump = 0x2e8; // UAnimMontage*
		constexpr auto Vault = 0x2f0; // UAnimMontage*
		constexpr auto Climb = 0x2f8; // UAnimMontage*
		constexpr auto StandToProne = 0x300; // UAnimMontage*
		constexpr auto ProneToStand = 0x308; // UAnimMontage*
		constexpr auto Sprint = 0x310; // UAnimSequence*
		constexpr auto Crawl = 0x318; // UBlendSpace*
	}

	namespace n_UNetAnalyticsAggregatorConfig {
		constexpr auto NetAnalyticsData = 0x28; // TArray<FNetAnalyticsDataConfig>
	}

	namespace n_ADefaultPawn {
		constexpr auto BaseTurnRate = 0x280; // float
		constexpr auto BaseLookUpRate = 0x284; // float
		constexpr auto MovementComponent = 0x288; // UPawnMovementComponent*
		constexpr auto CollisionComponent = 0x290; // USphereComponent*
		constexpr auto MeshComponent = 0x298; // UStaticMeshComponent*
		constexpr auto bAddDefaultMovementBindings = 0x2a0; // char : 1
	}

	namespace n_UInterpTrackFloatParticleParam {
		constexpr auto ParamName = 0x90; // FName
	}

	namespace n_UInterpTrackSound {
		constexpr auto Sounds = 0x90; // TArray<FSoundTrackKey>
		constexpr auto bPlayOnReverse = 0xa0; // char : 1
		constexpr auto bContinueSoundOnMatineeEnd = 0xa0; // char : 1
		constexpr auto bSuppressSubtitles = 0xa0; // char : 1
		constexpr auto bTreatAsDialogue = 0xa0; // char : 1
		constexpr auto bAttach = 0xa0; // char : 1
	}

	namespace n_UMaterialExpressionAdd {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto ConstA = 0x68; // float
		constexpr auto ConstB = 0x6c; // float
	}

	namespace n_UTrackedVehicleMovementComponent {
		constexpr auto NumPhysicsWheelsPerSide = 0x2f0; // uint32_t
		constexpr auto DefaultAnimatedWheelRadius = 0x2f4; // float
		constexpr auto AnimatedWheelSetups = 0x2f8; // TArray<FAnimatedTrackedVehicleWheelSetup>
		constexpr auto EngineSetup = 0x308; // FVehicleEngineData
		constexpr auto TransmissionSetup = 0x3a8; // FVehicleTransmissionData
		constexpr auto LowestGearEngineDampingRate = 0x3d8; // float
		constexpr auto DefaultSteeringInducedBrakeInput = 0x3dc; // float
		constexpr auto PerGearSteeringInducedBrakeInput = 0x3e0; // TMap<int32_t, float>
		constexpr auto DefaultSteeringInducedThrustInput = 0x430; // float
		constexpr auto PerGearSteeringInducedThrustInput = 0x438; // TMap<int32_t, float>
		constexpr auto LeftReferenceRotationPhysicsWheel = 0x498; // UVehicleWheel*
		constexpr auto RightReferenceRotationPhysicsWheel = 0x4a0; // UVehicleWheel*
	}

	namespace n_UHLLMapIcon_Sector {
		constexpr auto SectorName = 0x368; // UTextBlock*
		constexpr auto SectorStateInfo = 0x370; // FDisplayedSectorState
	}

	namespace n_UHLLMarkers_MapMenuItem {
		constexpr auto AssignedMarker = 0x230; // EHLLMarker
		constexpr auto OwningMenu = 0x234; // TWeakObjectPtr<UHLLMarkers_MapMenu>
		constexpr auto IconType = 0x240; // UImage*
		constexpr auto MarkerName = 0x248; // UTextBlock*
		constexpr auto MarkerCount = 0x250; // UTextBlock*
	}

	namespace n_ATankGunnerSeat {
		constexpr auto bCanPrecisionAim = 0x989; // bool
		constexpr auto SlowPitchMultiplier = 0x98c; // float
		constexpr auto SlowYawMultiplier = 0x990; // float
	}

	namespace n_ALevelStreamingVolume {
		constexpr auto StreamingLevelNames = 0x258; // TArray<FName>
		constexpr auto bEditorPreVisOnly = 0x268; // char : 1
		constexpr auto bDisabled = 0x268; // char : 1
		constexpr auto StreamingUsage = 0x26c; // EStreamingVolumeUsage
	}

	namespace n_UParticleModuleBeamModifier {
		constexpr auto ModifierType = 0x30; // BeamModifierType
		constexpr auto PositionOptions = 0x34; // FBeamModifierOptions
		constexpr auto Position = 0x38; // FRawDistributionVector
		constexpr auto TangentOptions = 0x80; // FBeamModifierOptions
		constexpr auto Tangent = 0x88; // FRawDistributionVector
		constexpr auto bAbsoluteTangent = 0xd0; // char : 1
		constexpr auto StrengthOptions = 0xd4; // FBeamModifierOptions
		constexpr auto Strength = 0xd8; // FRawDistributionFloat
	}

	namespace n_UWGT_HealthCircular_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto Brush = 0x278; // FSlateBrush
	}

	namespace n_UHTP_Widget_Role_Loadout_Sniper_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_2 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x270; // UImage*
		constexpr auto Image_10 = 0x278; // UImage*
		constexpr auto Image_17 = 0x280; // UImage*
	}

	namespace n_UEnvQueryTest_PathfindingBatch {
		constexpr auto ScanRangeMultiplier = 0x280; // FAIDataProviderFloatValue
	}

	namespace n_UHTP_Widget_Role_Loadout_AutomaticRifleman_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_2 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x270; // UImage*
		constexpr auto Image_10 = 0x278; // UImage*
		constexpr auto Image_17 = 0x280; // UImage*
	}

	namespace n_UBackgroundBlurSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_USoundNodeLooping {
		constexpr auto LoopCount = 0x48; // int32_t
		constexpr auto bLoopIndefinitely = 0x4c; // char : 1
	}

	namespace n_UARSaveWorldAsyncTaskBlueprintProxy {
		constexpr auto OnSuccess = 0x50; // FMulticastInlineDelegate
		constexpr auto OnFailed = 0x60; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionArcsineFast {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_USoundNodeConcatenator {
		constexpr auto InputVolume = 0x48; // TArray<float>
	}

	namespace n_UComboBoxWidgetStyle {
		constexpr auto ComboBoxStyle = 0x30; // FComboBoxStyle
	}

	namespace n_UPhysicsSpringComponent {
		constexpr auto SpringStiffness = 0x1f0; // float
		constexpr auto SpringDamping = 0x1f4; // float
		constexpr auto SpringLengthAtRest = 0x1f8; // float
		constexpr auto SpringRadius = 0x1fc; // float
		constexpr auto SpringChannel = 0x200; // ECollisionChannel
		constexpr auto bIgnoreSelf = 0x201; // bool
		constexpr auto SpringCompression = 0x204; // float
	}

	namespace n_UDeploymentLogic_C {
		constexpr auto UberGraphFrame = 0x110; // FPointerToUberGraphFrame
		constexpr auto SelectedPlatoon = 0x118; // AHLLPlatoon*
		constexpr auto OnPlatoonSelectionChanged = 0x120; // FMulticastInlineDelegate
		constexpr auto OnJoinPlatoonFailed = 0x130; // FMulticastInlineDelegate
		constexpr auto OnPlayerTeamChanged = 0x140; // FMulticastInlineDelegate
		constexpr auto DefaultPlayerRole = 0x150; // EPlayerRole
		constexpr auto OnClaimCommanderRoleFailed = 0x158; // FMulticastInlineDelegate
		constexpr auto OnClaimCommanderRoleSucceeded = 0x168; // FMulticastInlineDelegate
		constexpr auto OnPlayerRoleChanged = 0x178; // FMulticastInlineDelegate
		constexpr auto OnCommanderRoleReleased = 0x188; // FMulticastInlineDelegate
		constexpr auto OnPlayerRoleChangeFailed = 0x198; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionSkyAtmosphereLightDiskLuminance {
		constexpr auto LightIndex = 0x40; // int32_t
	}

	namespace n_UTrackedVehicleAnimInstance {
		constexpr auto TrackedVehicleMovementComponent = 0x978; // UTrackedVehicleMovementComponent*
	}

	namespace n_USubmixEffectReverbFastPreset {
		constexpr auto Settings = 0xa0; // FSubmixEffectReverbFastSettings
	}

	namespace n_ULeaderboardQueryCallbackProxy {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_UHLLAimAssistSettings {
		constexpr auto AimAssistSettingsDataAsset = 0x38; // TSoftObjectPtr<UHLLAimAssistSettingsDataAsset>
	}

	namespace n_ATiger {
		constexpr auto Tracks2 = 0x5d8; // UTracksComponent*
	}

	namespace n_UHLLDialCommon {
		constexpr auto MinMaxInput = 0x230; // FVector2D
		constexpr auto MinMaxAngle = 0x238; // FVector2D
		constexpr auto TargetDialValue = 0x240; // float
		constexpr auto CurrentDialValue = 0x244; // float
		constexpr auto DialInterpSpeed = 0x248; // float
		constexpr auto Needle = 0x250; // UImage*
	}

	namespace n_UAnimNotify_PlayMontageNotifyWindow {
		constexpr auto NotifyName = 0x30; // FName
	}

	namespace n_UAnimNotify_PlayMontageNotify {
		constexpr auto NotifyName = 0x38; // FName
	}

	namespace n_UFlamethrowerComponent {
		constexpr auto GroundBurningFX = 0x1f0; // AFlamethrowerBurningSpot*
		constexpr auto CharacterBurningFX = 0x1f8; // AFlamethrowerBurningCharacter*
	}

	namespace n_UMaterialExpressionFeatureLevelSwitch {
		constexpr auto Default = 0x40; // FExpressionInput
		constexpr auto Inputs = 0x54; // FExpressionInput [0x4]
	}

	namespace n_ULandscapeSplineControlPoint {
		constexpr auto Location = 0x28; // FVector
		constexpr auto Rotation = 0x34; // FRotator
		constexpr auto Width = 0x40; // float
		constexpr auto LayerWidthRatio = 0x44; // float
		constexpr auto SideFalloff = 0x48; // float
		constexpr auto LeftSideFalloffFactor = 0x4c; // float
		constexpr auto RightSideFalloffFactor = 0x50; // float
		constexpr auto LeftSideLayerFalloffFactor = 0x54; // float
		constexpr auto RightSideLayerFalloffFactor = 0x58; // float
		constexpr auto EndFalloff = 0x5c; // float
		constexpr auto ConnectedSegments = 0x60; // TArray<FLandscapeSplineConnection>
		constexpr auto Points = 0x70; // TArray<FLandscapeSplineInterpPoint>
		constexpr auto Bounds = 0x80; // FBox
		constexpr auto LocalMeshComponent = 0xa0; // UControlPointMeshComponent*
	}

	namespace n_UHLLDial_Tachometer {
		constexpr auto GearText = 0x258; // UTextBlock*
	}

	namespace n_UWGT_AdminCamPlayerEntry_C {
		constexpr auto UberGraphFrame = 0x268; // FPointerToUberGraphFrame
		constexpr auto CopyID = 0x270; // UButton*
		constexpr auto CopyName = 0x278; // UButton*
		constexpr auto RootBorder = 0x280; // UBorder*
		constexpr auto RootButton = 0x288; // UButton*
	}

	namespace n_AHLL_GameMode_C {
		constexpr auto DefaultSceneRoot = 0x528; // USceneComponent*
	}

	namespace n_UFXSystemAsset {
		constexpr auto MaxPoolSize = 0x28; // uint32_t
	}

	namespace n_UABP_CosmeticCharacter_C {
		constexpr auto UberGraphFrame = 0x280; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x288; // FAnimNode_Root
		constexpr auto AnimGraphNode_SequencePlayer_8 = 0x2b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum = 0x330; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_7 = 0x3e0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x458; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x4d0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x548; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x5c0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive = 0x638; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x700; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x778; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x830; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_2 = 0x858; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer = 0x8f8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x970; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_Fabrik = 0x990; // FAnimNode_Fabrik
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0xb20; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose = 0xb40; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0xbf8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool = 0xc20; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose = 0xcc0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot = 0xce8; // FAnimNode_Slot
		constexpr auto MenuCharacterRef = 0xd30; // ABP_MenuCharacter_C*
		constexpr auto RandomInt = 0xd38; // int32_t
		constexpr auto IdleBrakerTimer = 0xd3c; // float
		constexpr auto InheritancePoseAlpha = 0xd40; // float
		constexpr auto WeaponGripSocketTransform = 0xd50; // FTransform
		constexpr auto NewVar_1 = 0xd80; // FTransform
		constexpr auto USBazooka = 0xdb0; // bool
		constexpr auto FG42 = 0xdb1; // bool
		constexpr auto WeaponMeshRef = 0xdb8; // USkeletalMeshComponent*
		constexpr auto UsingHandLIK = 0xdc0; // bool
		constexpr auto GameCharacterRef = 0xdc8; // ABP_GameCharacter_C*
	}

	namespace n_USoundCue {
		constexpr auto bPrimeOnLoad = 0x160; // char : 1
		constexpr auto FirstNode = 0x168; // USoundNode*
		constexpr auto VolumeMultiplier = 0x170; // float
		constexpr auto PitchMultiplier = 0x174; // float
		constexpr auto AttenuationOverrides = 0x178; // FSoundAttenuationSettings
		constexpr auto SubtitlePriority = 0x518; // float
		constexpr auto bOverrideAttenuation = 0x520; // char : 1
		constexpr auto bExcludeFromRandomNodeBranchCulling = 0x520; // char : 1
		constexpr auto CookedQualityIndex = 0x524; // int32_t
		constexpr auto bHasPlayWhenSilent = 0x528; // char : 1
	}

	namespace n_UInterpTrackInstFloatMaterialParam {
		constexpr auto MaterialInstances = 0x28; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ResetFloats = 0x38; // TArray<float>
		constexpr auto PrimitiveMaterialRefs = 0x48; // TArray<FPrimitiveMaterialRef>
		constexpr auto InstancedTrack = 0x58; // UInterpTrackFloatMaterialParam*
	}

	namespace n_UMovieSceneBuiltInEasingFunction {
		constexpr auto Type = 0x30; // EMovieSceneBuiltInEasing
	}

	namespace n_UCompositionGraphCaptureProtocol {
		constexpr auto IncludeRenderPasses = 0x58; // FCompositionGraphCapturePasses
		constexpr auto bCaptureFramesInHDR = 0x68; // bool
		constexpr auto HDRCompressionQuality = 0x6c; // int32_t
		constexpr auto CaptureGamut = 0x70; // EHDRCaptureGamut
		constexpr auto PostProcessingMaterial = 0x78; // FSoftObjectPath
		constexpr auto bDisableScreenPercentage = 0x90; // bool
		constexpr auto PostProcessingMaterialPtr = 0x98; // UMaterialInterface*
	}

	namespace n_UEdGraphPin_Deprecated {
		constexpr auto PinName = 0x28; // FString
		constexpr auto PinToolTip = 0x38; // FString
		constexpr auto Direction = 0x48; // EEdGraphPinDirection
		constexpr auto PinType = 0x50; // FEdGraphPinType
		constexpr auto DefaultValue = 0xa8; // FString
		constexpr auto AutogeneratedDefaultValue = 0xb8; // FString
		constexpr auto DefaultObject = 0xc8; // UObject*
		constexpr auto DefaultTextValue = 0xd0; // FText
		constexpr auto LinkedTo = 0xe8; // TArray<UEdGraphPin_Deprecated*>
		constexpr auto SubPins = 0xf8; // TArray<UEdGraphPin_Deprecated*>
		constexpr auto ParentPin = 0x108; // UEdGraphPin_Deprecated*
		constexpr auto ReferencePassThroughConnection = 0x110; // UEdGraphPin_Deprecated*
	}

	namespace n_UMaterialExpressionDepthFade {
		constexpr auto InOpacity = 0x40; // FExpressionInput
		constexpr auto FadeDistance = 0x54; // FExpressionInput
		constexpr auto OpacityDefault = 0x68; // float
		constexpr auto FadeDistanceDefault = 0x6c; // float
	}

	namespace n_UBoxReflectionCaptureComponent {
		constexpr auto BoxTransitionDistance = 0x268; // float
		constexpr auto PreviewInfluenceBox = 0x270; // UBoxComponent*
		constexpr auto PreviewCaptureBox = 0x278; // UBoxComponent*
	}

	namespace n_UCanvasRenderTarget2D {
		constexpr auto OnCanvasRenderTargetUpdate = 0xe8; // FMulticastInlineDelegate
		constexpr auto World = 0xf8; // TWeakObjectPtr<UWorld>
		constexpr auto bShouldClearRenderTargetOnReceiveUpdate = 0x100; // bool
	}

	namespace n_UARFaceGeometry {
		constexpr auto LookAtTarget = 0xe8; // FVector
		constexpr auto bIsTracked = 0xf4; // bool
		constexpr auto BlendShapes = 0xf8; // TMap<EARFaceBlendShape, float>
	}

	namespace n_UTorsionBarSuspensionsComponent {
		constexpr auto DefaultSuspensionArmLength = 0xb8; // float
		constexpr auto RotationSpeed = 0xbc; // float
		constexpr auto SuspensionDescriptors = 0xc0; // TArray<FTrackedVehicleTorsionBarSuspensionDescriptor>
		constexpr auto LeftSprocket = 0xd0; // FTrackedVehicleTorsionBarSuspensionFixedWheel
		constexpr auto RightSprocket = 0xe8; // FTrackedVehicleTorsionBarSuspensionFixedWheel
		constexpr auto LeftRoller = 0x100; // FTrackedVehicleTorsionBarSuspensionFixedWheel
		constexpr auto RightRoller = 0x118; // FTrackedVehicleTorsionBarSuspensionFixedWheel
		constexpr auto Tracks = 0x130; // UTracksComponent*
		constexpr auto Mesh = 0x138; // USkeletalMeshComponent*
	}

	namespace n_AHLLAbilityDrop_ParachuteBase {
		constexpr auto bParachuteIsOpen = 0x220; // char : 1
		constexpr auto ParachuteDamping = 0x224; // float
		constexpr auto FreefallDamping = 0x228; // float
		constexpr auto ParachuteClose = 0x230; // UAnimMontage*
		constexpr auto LandedCollisionProfile = 0x238; // FCollisionProfileName
		constexpr auto RandImpulseOnHit = 0x240; // float
		constexpr auto ObjectMesh = 0x248; // UStaticMeshComponent*
		constexpr auto ParachuteMesh = 0x250; // USkeletalMeshComponent*
	}

	namespace n_UNavRelevantComponent {
		constexpr auto bAttachToOwnersRoot = 0xd4; // char : 1
		constexpr auto CachedNavParent = 0xd8; // UObject*
	}

	namespace n_UGamepadRTBImageDecorator {
		constexpr auto PlaystationButtonTable = 0x30; // UDataTable*
		constexpr auto XboxButtonTable = 0x38; // UDataTable*
	}

	namespace n_UBTDecorator_TagCooldown {
		constexpr auto CooldownTag = 0x68; // FGameplayTag
		constexpr auto CooldownDuration = 0x70; // float
		constexpr auto bAddToExistingDuration = 0x74; // bool
		constexpr auto bActivatesCooldown = 0x75; // bool
	}

	namespace n_UFileMediaSource {
		constexpr auto FilePath = 0x88; // FString
		constexpr auto PrecacheFile = 0x98; // bool
	}

	namespace n_ANavModifierVolume {
		constexpr auto AreaClass = 0x260; // UNavArea*
	}

	namespace n_UHLLRichPresence {
		constexpr auto TimeBetweenPresenceUpdates = 0x30; // float
		constexpr auto TH_Update = 0x38; // FTimerHandle
	}

	namespace n_UPlatoonInvitationDialogPlayer {
		constexpr auto PlayerName = 0x230; // UTextBlock*
		constexpr auto Invited = 0x238; // UCheckBox*
	}

	namespace n_UArmyCommanderRole {
		constexpr auto bReadOnly = 0x230; // char : 1
		constexpr auto RoleIcon = 0x238; // UImage*
		constexpr auto PlayerName = 0x240; // UTextBlock*
		constexpr auto ButtonSwitcher = 0x248; // UWidgetSwitcher*
		constexpr auto ClaimRole = 0x250; // UUserWidget*
		constexpr auto ReleaseRole = 0x258; // UUserWidget*
	}

	namespace n_UAISense_Damage {
		constexpr auto RegisteredEvents = 0x80; // TArray<FAIDamageEvent>
	}

	namespace n_UAssetManagerSettings {
		constexpr auto PrimaryAssetTypesToScan = 0x38; // TArray<FPrimaryAssetTypeInfo>
		constexpr auto DirectoriesToExclude = 0x48; // TArray<FDirectoryPath>
		constexpr auto PrimaryAssetRules = 0x58; // TArray<FPrimaryAssetRulesOverride>
		constexpr auto CustomPrimaryAssetRules = 0x68; // TArray<FPrimaryAssetRulesCustomOverride>
		constexpr auto bOnlyCookProductionAssets = 0x78; // bool
		constexpr auto bShouldManagerDetermineTypeAndName = 0x79; // bool
		constexpr auto bShouldGuessTypeAndNameInEditor = 0x7a; // bool
		constexpr auto bShouldAcquireMissingChunksOnLoad = 0x7b; // bool
		constexpr auto PrimaryAssetIdRedirects = 0x80; // TArray<FAssetManagerRedirect>
		constexpr auto PrimaryAssetTypeRedirects = 0x90; // TArray<FAssetManagerRedirect>
		constexpr auto AssetPathRedirects = 0xa0; // TArray<FAssetManagerRedirect>
		constexpr auto MetaDataTagsForAssetRegistry = 0xb0; // TSet<FName>
	}

	namespace n_UEnvQueryTest_GameplayTags {
		constexpr auto TagQueryToMatch = 0x1f8; // FGameplayTagQuery
		constexpr auto bUpdatedToUseQuery = 0x240; // bool
		constexpr auto TagsToMatch = 0x241; // EGameplayContainerMatchType
		constexpr auto GameplayTags = 0x248; // FGameplayTagContainer
	}

	namespace n_UGlobalGrenadeThrowSettings {
		constexpr auto StartingVelocityOverhand = 0x30; // float
		constexpr auto StartingVelocityUnderhand = 0x34; // float
		constexpr auto VerticalTrajectoryFactorOverhand = 0x38; // float
		constexpr auto VerticalTrajectoryFactorUnderhand = 0x3c; // float
		constexpr auto MovingThrowPowerFactor = 0x40; // float
	}

	namespace n_UWidgetAnimationPlayCallbackProxy {
		constexpr auto Finished = 0x28; // FMulticastInlineDelegate
	}

	namespace n_UPoseAsset {
		constexpr auto PoseContainer = 0x80; // FPoseDataContainer
		constexpr auto bAdditivePose = 0x110; // bool
		constexpr auto BasePoseIndex = 0x114; // int32_t
		constexpr auto RetargetSource = 0x118; // FName
	}

	namespace n_AFlamethrowerBurningSpot {
		constexpr auto Power = 0x220; // float
	}

	namespace n_UCrowdFollowingComponent {
		constexpr auto CharacterMovement = 0x260; // UCharacterMovementComponent*
		constexpr auto CrowdAgentMoveDirection = 0x268; // FVector
	}

	namespace n_UBPW_PlatoonMember_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto Border_1 = 0x278; // UBorder*
		constexpr auto icn_x = 0x280; // UImage*
		constexpr auto Image_1 = 0x288; // UImage*
		constexpr auto WidgetTooltip = 0x290; // UW_HoverToolTip_Explained_C*
		constexpr auto DeploymentScreen = 0x298; // UDeploymentScreen_V2_C*
	}

	namespace n_UPropertyBinding {
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x58; // FName
	}

	namespace n_UComboBoxString {
		constexpr auto DefaultOptions = 0x108; // TArray<FString>
		constexpr auto SelectedOption = 0x118; // FString
		constexpr auto WidgetStyle = 0x128; // FComboBoxStyle
		constexpr auto ItemStyle = 0x518; // FTableRowStyle
		constexpr auto ContentPadding = 0xce0; // FMargin
		constexpr auto MaxListHeight = 0xcf0; // float
		constexpr auto HasDownArrow = 0xcf4; // bool
		constexpr auto EnableGamepadNavigationMode = 0xcf5; // bool
		constexpr auto Font = 0xcf8; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xd48; // FSlateColor
		constexpr auto bIsFocusable = 0xd70; // bool
		constexpr auto OnGenerateWidgetEvent = 0xd74; // FDelegate
		constexpr auto OnSelectionChanged = 0xd88; // FMulticastInlineDelegate
		constexpr auto OnOpening = 0xd98; // FMulticastInlineDelegate
	}

	namespace n_USoundBase {
		constexpr auto SoundClassObject = 0x28; // USoundClass*
		constexpr auto bDebug = 0x30; // char : 1
		constexpr auto bOverrideConcurrency = 0x30; // char : 1
		constexpr auto bOutputToBusOnly = 0x30; // char : 1
		constexpr auto bHasDelayNode = 0x30; // char : 1
		constexpr auto bHasConcatenatorNode = 0x30; // char : 1
		constexpr auto bBypassVolumeScaleForPriority = 0x30; // char : 1
		constexpr auto VirtualizationMode = 0x31; // EVirtualizationMode
		constexpr auto ConcurrencySet = 0x88; // TSet<USoundConcurrency*>
		constexpr auto ConcurrencyOverrides = 0xd8; // FSoundConcurrencySettings
		constexpr auto Duration = 0xf8; // float
		constexpr auto MaxDistance = 0xfc; // float
		constexpr auto TotalSamples = 0x100; // float
		constexpr auto Priority = 0x104; // float
		constexpr auto AttenuationSettings = 0x108; // USoundAttenuation*
		constexpr auto Modulation = 0x110; // FSoundModulation
		constexpr auto SoundSubmixObject = 0x120; // USoundSubmixBase*
		constexpr auto SoundSubmixSends = 0x128; // TArray<FSoundSubmixSendInfo>
		constexpr auto SourceEffectChain = 0x138; // USoundEffectSourcePresetChain*
		constexpr auto BusSends = 0x140; // TArray<FSoundSourceBusSendInfo>
		constexpr auto PreEffectBusSends = 0x150; // TArray<FSoundSourceBusSendInfo>
	}

	namespace n_UParticleModuleSubUV {
		constexpr auto Animation = 0x30; // USubUVAnimation*
		constexpr auto SubImageIndex = 0x38; // FRawDistributionFloat
		constexpr auto bUseRealTime = 0x68; // char : 1
	}

	namespace n_UKeyBinding_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto DisplayName = 0x238; // UTextBlock*
		constexpr auto Image_53 = 0x240; // UImage*
		constexpr auto PrimaryKeyBinding = 0x248; // UKeyBindingButton_V2_C*
		constexpr auto SecondaryBindingButton = 0x250; // UKeyBindingButton_V2_C*
		constexpr auto Binding = 0x258; // FHLLKeyBinding
		constexpr auto NormalTextColor = 0x310; // FSlateColor
		constexpr auto HoveredTextColor = 0x338; // FSlateColor
		constexpr auto Host = 0x360; // TScriptInterface<IIKeyBindingHost_C>
	}

	namespace n_UDestroySessionCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_URecoilCurve {
		constexpr auto Vertical = 0x30; // FRichCurve
		constexpr auto Horizontal = 0xb0; // FRichCurve
	}

	namespace n_UBlueprintGeneratedClass {
		constexpr auto NumReplicatedProperties = 0x230; // int32_t
		constexpr auto bHasNativizedParent = 0x234; // char : 1
		constexpr auto bHasCookedComponentInstancingData = 0x234; // char : 1
		constexpr auto DynamicBindingObjects = 0x238; // TArray<UDynamicBlueprintBinding*>
		constexpr auto ComponentTemplates = 0x248; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x258; // TArray<UTimelineTemplate*>
		constexpr auto ComponentClassOverrides = 0x268; // TArray<FBPComponentClassOverride>
		constexpr auto SimpleConstructionScript = 0x278; // USimpleConstructionScript*
		constexpr auto InheritableComponentHandler = 0x280; // UInheritableComponentHandler*
		constexpr auto UberGraphFramePointerProperty = 0x288; // UStructProperty*
		constexpr auto UberGraphFunction = 0x298; // UFunction*
		constexpr auto CookedComponentInstancingData = 0x2a0; // TMap<FName, FBlueprintCookedComponentInstancingData>
	}

	namespace n_UMaterialExpressionSkyAtmosphereLightDirection {
		constexpr auto LightIndex = 0x40; // int32_t
	}

	namespace n_USoundGroups {
		constexpr auto SoundGroupProfiles = 0x28; // TArray<FSoundGroup>
	}

	namespace n_UEnvQueryGenerator_CurrentLocation {
		constexpr auto QueryContext = 0x50; // UEnvQueryContext*
	}

	namespace n_UHLLOnlineStatsManager {
		constexpr auto GlobalStatsUpdateDelegate = 0x30; // FMulticastInlineDelegate
		constexpr auto PlayerStatObjects = 0x40; // TArray<UHLLOnlinePlayerStats*>
		constexpr auto TH_WriteMatchStats = 0x50; // FTimerHandle
	}

	namespace n_UInterpTrackFloatMaterialParam {
		constexpr auto TargetMaterials = 0x90; // TArray<UMaterialInterface*>
		constexpr auto ParamName = 0xa0; // FName
	}

	namespace n_UGameTimerWidget {
		constexpr auto Text = 0x230; // UTextBlock*
		constexpr auto ManpowerIconPanel = 0x238; // UContentWidget*
		constexpr auto ResetToNormalState = 0x240; // UWidgetAnimation*
		constexpr auto OverTime = 0x248; // UWidgetAnimation*
	}

	namespace n_UMaterialExpressionSetMaterialAttributes {
		constexpr auto Inputs = 0x40; // TArray<FExpressionInput>
		constexpr auto AttributeSetTypes = 0x50; // TArray<FGuid>
	}

	namespace n_UPlatoonMemberCommander {
		constexpr auto Colouriser = 0x278; // UBorder*
		constexpr auto Anim_NoCommander = 0x280; // UWidgetAnimation*
		constexpr auto WarningColour = 0x288; // FLinearColor
	}

	namespace n_UListViewBase {
		constexpr auto EntryWidgetClass = 0x108; // UUserWidget*
		constexpr auto WheelScrollMultiplier = 0x110; // float
		constexpr auto bEnableScrollAnimation = 0x114; // bool
		constexpr auto bEnableFixedLineOffset = 0x115; // bool
		constexpr auto FixedLineScrollOffset = 0x118; // float
		constexpr auto BP_OnEntryGenerated = 0x120; // FMulticastInlineDelegate
		constexpr auto BP_OnEntryReleased = 0x130; // FMulticastInlineDelegate
		constexpr auto EntryWidgetPool = 0x140; // FUserWidgetPool
	}

	namespace n_UVehicleWheel {
		constexpr auto CollisionMesh = 0x28; // UStaticMesh*
		constexpr auto bDontCreateShape = 0x30; // bool
		constexpr auto bAutoAdjustCollisionSize = 0x31; // bool
		constexpr auto Offset = 0x34; // FVector
		constexpr auto ShapeRadius = 0x40; // float
		constexpr auto ShapeWidth = 0x44; // float
		constexpr auto Mass = 0x48; // float
		constexpr auto DampingRate = 0x4c; // float
		constexpr auto SteerAngle = 0x50; // float
		constexpr auto bAffectedByHandbrake = 0x54; // bool
		constexpr auto TireType = 0x58; // UTireType*
		constexpr auto TireConfig = 0x60; // UTireConfig*
		constexpr auto LatStiffMaxLoad = 0x68; // float
		constexpr auto LatStiffValue = 0x6c; // float
		constexpr auto LongStiffValue = 0x70; // float
		constexpr auto SuspensionForceOffset = 0x74; // float
		constexpr auto SuspensionMaxRaise = 0x78; // float
		constexpr auto SuspensionMaxDrop = 0x7c; // float
		constexpr auto SuspensionNaturalFrequency = 0x80; // float
		constexpr auto SuspensionDampingRatio = 0x84; // float
		constexpr auto SweepType = 0x88; // EWheelSweepType
		constexpr auto MaxBrakeTorque = 0x8c; // float
		constexpr auto MaxHandBrakeTorque = 0x90; // float
		constexpr auto VehicleSim = 0x98; // UWheeledVehicleMovementComponent*
		constexpr auto WheelIndex = 0xa0; // int32_t
		constexpr auto DebugLongSlip = 0xa4; // float
		constexpr auto DebugLatSlip = 0xa8; // float
		constexpr auto DebugNormalizedTireLoad = 0xac; // float
		constexpr auto DebugWheelTorque = 0xb4; // float
		constexpr auto DebugLongForce = 0xb8; // float
		constexpr auto DebugLatForce = 0xbc; // float
		constexpr auto Location = 0xc0; // FVector
		constexpr auto OldLocation = 0xcc; // FVector
		constexpr auto Velocity = 0xd8; // FVector
	}

	namespace n_UButtonPrompt {
		constexpr auto Timeout = 0x250; // UTextBlock*
		constexpr auto GamepadIcon = 0x258; // TSoftObjectPtr<UTexture2D>
		constexpr auto SecondaryGamepadIcon = 0x280; // TSoftObjectPtr<UTexture2D>
	}

	namespace n_UHLLRconCommandWindow {
		constexpr auto CloseButton = 0x230; // UButton*
	}

	namespace n_UParticleModuleVelocityBase {
		constexpr auto bInWorldSpace = 0x30; // char : 1
		constexpr auto bApplyOwnerScale = 0x30; // char : 1
	}

	namespace n_UParticleModuleLight {
		constexpr auto bUseInverseSquaredFalloff = 0x30; // bool
		constexpr auto bAffectsTranslucency = 0x31; // bool
		constexpr auto bPreviewLightRadius = 0x32; // bool
		constexpr auto SpawnFraction = 0x34; // float
		constexpr auto ColorScaleOverLife = 0x38; // FRawDistributionVector
		constexpr auto BrightnessOverLife = 0x80; // FRawDistributionFloat
		constexpr auto RadiusScale = 0xb0; // FRawDistributionFloat
		constexpr auto LightExponent = 0xe0; // FRawDistributionFloat
		constexpr auto LightingChannels = 0x110; // FLightingChannels
		constexpr auto VolumetricScatteringIntensity = 0x114; // float
		constexpr auto bHighQualityLights = 0x118; // bool
		constexpr auto bShadowCastingLights = 0x119; // bool
	}

	namespace n_UMaterialExpressionMakeMaterialAttributes {
		constexpr auto BaseColor = 0x40; // FExpressionInput
		constexpr auto Metallic = 0x54; // FExpressionInput
		constexpr auto Specular = 0x68; // FExpressionInput
		constexpr auto Roughness = 0x7c; // FExpressionInput
		constexpr auto Anisotropy = 0x90; // FExpressionInput
		constexpr auto EmissiveColor = 0xa4; // FExpressionInput
		constexpr auto Opacity = 0xb8; // FExpressionInput
		constexpr auto OpacityMask = 0xcc; // FExpressionInput
		constexpr auto Normal = 0xe0; // FExpressionInput
		constexpr auto Tangent = 0xf4; // FExpressionInput
		constexpr auto WorldPositionOffset = 0x108; // FExpressionInput
		constexpr auto WorldDisplacement = 0x11c; // FExpressionInput
		constexpr auto TessellationMultiplier = 0x130; // FExpressionInput
		constexpr auto SubsurfaceColor = 0x144; // FExpressionInput
		constexpr auto ClearCoat = 0x158; // FExpressionInput
		constexpr auto ClearCoatRoughness = 0x16c; // FExpressionInput
		constexpr auto AmbientOcclusion = 0x180; // FExpressionInput
		constexpr auto Refraction = 0x194; // FExpressionInput
		constexpr auto CustomizedUVs = 0x1a8; // FExpressionInput [0x8]
		constexpr auto PixelDepthOffset = 0x248; // FExpressionInput
		constexpr auto ShadingModel = 0x25c; // FExpressionInput
	}

	namespace n_UMaterialExpressionCeil {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UParticleModuleSizeScale {
		constexpr auto SizeScale = 0x30; // FRawDistributionVector
		constexpr auto EnableX = 0x78; // char : 1
		constexpr auto EnableY = 0x78; // char : 1
		constexpr auto EnableZ = 0x78; // char : 1
	}

	namespace n_UBookMark {
		constexpr auto Location = 0x28; // FVector
		constexpr auto Rotation = 0x34; // FRotator
		constexpr auto HiddenLevels = 0x40; // TArray<FString>
	}

	namespace n_UStereoLayerComponent {
		constexpr auto bLiveTexture = 0x1f0; // char : 1
		constexpr auto bSupportsDepth = 0x1f0; // char : 1
		constexpr auto bNoAlphaChannel = 0x1f0; // char : 1
		constexpr auto Texture = 0x1f8; // UTexture*
		constexpr auto LeftTexture = 0x200; // UTexture*
		constexpr auto bQuadPreserveTextureRatio = 0x208; // char : 1
		constexpr auto QuadSize = 0x20c; // FVector2D
		constexpr auto UVRect = 0x214; // FBox2D
		constexpr auto CylinderRadius = 0x228; // float
		constexpr auto CylinderOverlayArc = 0x22c; // float
		constexpr auto CylinderHeight = 0x230; // int32_t
		constexpr auto EquirectProps = 0x234; // FEquirectProps
		constexpr auto StereoLayerType = 0x27c; // EStereoLayerType
		constexpr auto StereoLayerShape = 0x27d; // EStereoLayerShape
		constexpr auto Shape = 0x280; // UStereoLayerShape*
		constexpr auto Priority = 0x288; // int32_t
	}

	namespace n_UMainMenuVerticalNavigationScreen_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto btnNav_Barracks = 0x238; // UbtnNav_V2_C*
		constexpr auto btnNav_Credits = 0x240; // UbtnNav_V2_C*
		constexpr auto btnNav_GameFilters = 0x248; // UbtnNav_V2_C*
		constexpr auto btnNav_Guide = 0x250; // UbtnNav_V2_C*
		constexpr auto btnNav_Quit = 0x258; // UbtnNav_V2_C*
		constexpr auto btnNav_Settings = 0x260; // UbtnNav_V2_C*
		constexpr auto EnlistBox = 0x268; // UHorizontalBox*
		constexpr auto GameFiltersScreen = 0x270; // UGameFiltersScreen_C*
		constexpr auto Home = 0x278; // UOverlay*
		constexpr auto Main = 0x280; // UWidgetSwitcher*
		constexpr auto MatchmakingScreen_V2 = 0x288; // UMatchmakingScreen_V2_C*
		constexpr auto NavigationMenu = 0x290; // UVerticalBox*
		constexpr auto QuitBox = 0x298; // UHorizontalBox*
		constexpr auto TextBlock_3 = 0x2a0; // UTextBlock*
		constexpr auto MainMenu = 0x2a8; // UMainMenuWidget_V2_C*
		constexpr auto LastMenuIndex = 0x2b0; // int32_t
	}

	namespace n_UWGT_RoundSummaryPlatoon_C {
		constexpr auto UberGraphFrame = 0x290; // FPointerToUberGraphFrame
		constexpr auto Border_2 = 0x298; // UBorder*
		constexpr auto ExpandButton = 0x2a0; // UButton*
		constexpr auto underline = 0x2a8; // UImage*
		constexpr auto bAnyFocused = 0x2b0; // bool
		constexpr auto Scoreboard = 0x2b8; // UWGT_RoundSummaryDetails_V2_C*
		constexpr auto bIsInFocusPath = 0x2c0; // bool
		constexpr auto HilightColour = 0x2c4; // FLinearColor
	}

	namespace n_UParticleModuleLocationPrimitiveTriangle {
		constexpr auto StartOffset = 0x30; // FRawDistributionVector
		constexpr auto Height = 0x78; // FRawDistributionFloat
		constexpr auto Angle = 0xa8; // FRawDistributionFloat
		constexpr auto Thickness = 0xd8; // FRawDistributionFloat
	}

	namespace n_UReplicationGraphNode_AlwaysRelevant_ForConnection {
		constexpr auto PastRelevantActors = 0x110; // TArray<FAlwaysRelevantActorInfo>
		constexpr auto LastViewer = 0x120; // AActor*
		constexpr auto LastViewTarget = 0x128; // AActor*
	}

	namespace n_USpeakingPlayersListItem {
		constexpr auto PlayerName = 0x230; // UTextBlock*
		constexpr auto PlayerClan = 0x238; // UTextBlock*
		constexpr auto PlatoonText = 0x240; // UTextBlock*
	}

	namespace n_UBlendSpace1D {
		constexpr auto bScaleAnimation = 0x148; // bool
	}

	namespace n_UMeshSimplificationSettings {
		constexpr auto MeshReductionModuleName = 0x38; // FName
	}

	namespace n_UNavLinkDefinition {
		constexpr auto Links = 0x28; // TArray<FNavigationLink>
		constexpr auto SegmentLinks = 0x38; // TArray<FNavigationSegmentLink>
	}

	namespace n_UCanvasPanelSlot {
		constexpr auto LayoutData = 0x38; // FAnchorData
		constexpr auto bAutoSize = 0x60; // bool
		constexpr auto ZOrder = 0x64; // int32_t
	}

	namespace n_UParticleModuleVelocity_Seeded {
		constexpr auto RandomSeedInfo = 0xb0; // FParticleRandomSeedInfo
	}

	namespace n_UHLLMapIcon_Outpost {
		constexpr auto UnitOutpostIcon = 0x4a8; // FSlateBrush
		constexpr auto TeamOutpostIcon = 0x530; // FSlateBrush
		constexpr auto ReconOutpostIcon = 0x5b8; // FSlateBrush
	}

	namespace n_UBPW_DeploymentMap_V2_C {
		constexpr auto ShowFailure = 0x488; // UWidgetAnimation*
		constexpr auto FailedMessage = 0x490; // UTextBlock*
		constexpr auto MapSBox = 0x498; // USizeBox*
	}

	namespace n_UMovieSceneSpawnTrack {
		constexpr auto Sections = 0x58; // TArray<UMovieSceneSection*>
		constexpr auto ObjectGuid = 0x68; // FGuid
	}

	namespace n_UNavCollisionBase {
		constexpr auto bIsDynamicObstacle = 0x28; // char : 1
	}

	namespace n_UInterpTrackEvent {
		constexpr auto EventTrack = 0x70; // TArray<FEventTrackKey>
		constexpr auto bFireEventsWhenForwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x80; // char : 1
		constexpr auto bUseCustomEventName = 0x80; // char : 1
	}

	namespace n_UHLLCosmeticManager {
		constexpr auto CheckCosmeticsDelegate = 0x128; // FMulticastInlineDelegate
	}

	namespace n_UPointLightComponent {
		constexpr auto bUseInverseSquaredFalloff = 0x338; // char : 1
		constexpr auto LightFalloffExponent = 0x33c; // float
		constexpr auto SourceRadius = 0x340; // float
		constexpr auto SoftSourceRadius = 0x344; // float
		constexpr auto SourceLength = 0x348; // float
	}

	namespace n_UHLLMarkerIndicator {
		constexpr auto FadeTime = 0x2a8; // float
		constexpr auto ProjectionEdgePadding = 0x2ac; // float
		constexpr auto MovedOrPlacedAnim = 0x2b0; // UWidgetAnimation*
		constexpr auto MarkerIcon = 0x2b8; // UImage*
		constexpr auto MarkerText = 0x2c0; // UTextBlock*
		constexpr auto OwnerText = 0x2c8; // UTextBlock*
		constexpr auto DistanceText = 0x2d0; // UTextBlock*
	}

	namespace n_ACullDistanceVolume {
		constexpr auto CullDistances = 0x258; // TArray<FCullDistanceSizePair>
		constexpr auto bEnabled = 0x268; // char : 1
	}

	namespace n_AVaultingTestCharacter {
		constexpr auto bShouldRun = 0x1038; // char : 1
		constexpr auto bShouldWalk = 0x1038; // char : 1
		constexpr auto bShowCapsule = 0x1038; // char : 1
	}

	namespace n_URectLightComponent {
		constexpr auto SourceWidth = 0x338; // float
		constexpr auto SourceHeight = 0x33c; // float
		constexpr auto BarnDoorAngle = 0x340; // float
		constexpr auto BarnDoorLength = 0x344; // float
		constexpr auto SourceTexture = 0x348; // UTexture*
	}

	namespace n_UInterpGroupInst {
		constexpr auto Group = 0x28; // UInterpGroup*
		constexpr auto GroupActor = 0x30; // AActor*
		constexpr auto TrackInst = 0x38; // TArray<UInterpTrackInst*>
	}

	namespace n_UBPW_DeployButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto WaitingAnim = 0x238; // UWidgetAnimation*
		constexpr auto PressedAnim = 0x240; // UWidgetAnimation*
		constexpr auto Btn_Deploy = 0x248; // UButton*
		constexpr auto img_chevrons = 0x250; // UImage*
		constexpr auto img_deploybg = 0x258; // UImage*
		constexpr auto txt_label = 0x260; // UTextBlock*
		constexpr auto ChevronColorDisabled = 0x268; // FLinearColor
		constexpr auto ChevronColor = 0x278; // FLinearColor
		constexpr auto ChevronColorHover = 0x288; // FLinearColor
		constexpr auto IsHovered_2 = 0x298; // bool
		constexpr auto IsPressed = 0x299; // bool
		constexpr auto IsDeploying = 0x29a; // bool
		constexpr auto IsDisabled = 0x29b; // bool
		constexpr auto TextColorDisabled = 0x2a0; // FSlateColor
		constexpr auto TextColor = 0x2c8; // FSlateColor
		constexpr auto TextColorHover = 0x2f0; // FSlateColor
		constexpr auto BGColorDisabled = 0x318; // FLinearColor
		constexpr auto BGColor = 0x328; // FLinearColor
		constexpr auto BGColorHover = 0x338; // FLinearColor
		constexpr auto BGColorDeploying = 0x348; // FLinearColor
		constexpr auto Hovered = 0x358; // FMulticastInlineDelegate
		constexpr auto Pressed = 0x368; // FMulticastInlineDelegate
		constexpr auto Clicked = 0x378; // FMulticastInlineDelegate
		constexpr auto Unhovered = 0x388; // FMulticastInlineDelegate
		constexpr auto Disabled = 0x398; // FMulticastInlineDelegate
		constexpr auto ClickedUndeploy = 0x3a8; // FMulticastInlineDelegate
		constexpr auto CurrentTextColor = 0x3b8; // FSlateColor
		constexpr auto ColorChange = 0x3e0; // FMulticastInlineDelegate
	}

	namespace n_UMovieScene3DPathSection {
		constexpr auto TimingCurve = 0x108; // FMovieSceneFloatChannel
		constexpr auto FrontAxisEnum = 0x1a8; // MovieScene3DPathSection_Axis
		constexpr auto UpAxisEnum = 0x1a9; // MovieScene3DPathSection_Axis
		constexpr auto bFollow = 0x1ac; // char : 1
		constexpr auto bReverse = 0x1ac; // char : 1
		constexpr auto bForceUpright = 0x1ac; // char : 1
	}

	namespace n_UMaterialExpressionCurveAtlasRowParameter {
		constexpr auto Curve = 0x60; // UCurveLinearColor*
		constexpr auto Atlas = 0x68; // UCurveLinearColorAtlas*
		constexpr auto InputTime = 0x70; // FExpressionInput
	}

	namespace n_UMaterialExpressionQualitySwitch {
		constexpr auto Default = 0x40; // FExpressionInput
		constexpr auto Inputs = 0x54; // FExpressionInput [0x3]
	}

	namespace n_UEditableTextBox {
		constexpr auto Text = 0x108; // FText
		constexpr auto TextDelegate = 0x120; // FDelegate
		constexpr auto WidgetStyle = 0x130; // FEditableTextBoxStyle
		constexpr auto Style = 0x920; // USlateWidgetStyleAsset*
		constexpr auto HintText = 0x928; // FText
		constexpr auto HintTextDelegate = 0x940; // FDelegate
		constexpr auto Font = 0x950; // FSlateFontInfo
		constexpr auto ForegroundColor = 0x9a0; // FLinearColor
		constexpr auto BackgroundColor = 0x9b0; // FLinearColor
		constexpr auto ReadOnlyForegroundColor = 0x9c0; // FLinearColor
		constexpr auto IsReadOnly = 0x9d0; // bool
		constexpr auto IsPassword = 0x9d1; // bool
		constexpr auto MinimumDesiredWidth = 0x9d4; // float
		constexpr auto Padding = 0x9d8; // FMargin
		constexpr auto IsCaretMovedWhenGainFocus = 0x9e8; // bool
		constexpr auto SelectAllTextWhenFocused = 0x9e9; // bool
		constexpr auto RevertTextOnEscape = 0x9ea; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0x9eb; // bool
		constexpr auto SelectAllTextOnCommit = 0x9ec; // bool
		constexpr auto AllowContextMenu = 0x9ed; // bool
		constexpr auto KeyboardType = 0x9ee; // EVirtualKeyboardType
		constexpr auto VirtualKeyboardOptions = 0x9ef; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardTrigger = 0x9f0; // EVirtualKeyboardTrigger
		constexpr auto VirtualKeyboardDismissAction = 0x9f1; // EVirtualKeyboardDismissAction
		constexpr auto Justification = 0x9f2; // ETextJustify
		constexpr auto ShapedTextOptions = 0x9f3; // FShapedTextOptions
		constexpr auto OnTextChanged = 0x9f8; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0xa08; // FMulticastInlineDelegate
	}

	namespace n_ALevelBounds {
		constexpr auto BoxComponent = 0x220; // UBoxComponent*
		constexpr auto bAutoUpdateBounds = 0x228; // bool
	}

	namespace n_AARSkyLight {
		constexpr auto CaptureProbe = 0x230; // UAREnvironmentCaptureProbe*
	}

	namespace n_UVehiclePassengerAnimInstance {
		constexpr auto CharacterBaseAimRotation = 0x270; // FRotator
		constexpr auto ShooterCharacter = 0x280; // AShooterCharacter*
	}

	namespace n_UParticleModuleTypeDataRibbon {
		constexpr auto MaxTessellationBetweenParticles = 0x30; // int32_t
		constexpr auto SheetsPerTrail = 0x34; // int32_t
		constexpr auto MaxTrailCount = 0x38; // int32_t
		constexpr auto MaxParticleInTrailCount = 0x3c; // int32_t
		constexpr auto bDeadTrailsOnDeactivate = 0x40; // char : 1
		constexpr auto bDeadTrailsOnSourceLoss = 0x40; // char : 1
		constexpr auto bClipSourceSegement = 0x40; // char : 1
		constexpr auto bEnablePreviousTangentRecalculation = 0x40; // char : 1
		constexpr auto bTangentRecalculationEveryFrame = 0x40; // char : 1
		constexpr auto bSpawnInitialParticle = 0x40; // char : 1
		constexpr auto RenderAxis = 0x44; // ETrailsRenderAxisOption
		constexpr auto TangentSpawningScalar = 0x48; // float
		constexpr auto bRenderGeometry = 0x4c; // char : 1
		constexpr auto bRenderSpawnPoints = 0x4c; // char : 1
		constexpr auto bRenderTangents = 0x4c; // char : 1
		constexpr auto bRenderTessellation = 0x4c; // char : 1
		constexpr auto TilingDistance = 0x50; // float
		constexpr auto DistanceTessellationStepSize = 0x54; // float
		constexpr auto bEnableTangentDiffInterpScale = 0x58; // char : 1
		constexpr auto TangentTessellationScalar = 0x5c; // float
	}

	namespace n_ARuntimeVirtualTextureVolume {
		constexpr auto VirtualTextureComponent = 0x220; // URuntimeVirtualTextureComponent*
	}

	namespace n_UPaperTileLayer {
		constexpr auto LayerName = 0x28; // FText
		constexpr auto LayerWidth = 0x40; // int32_t
		constexpr auto LayerHeight = 0x44; // int32_t
		constexpr auto bHiddenInGame = 0x48; // char : 1
		constexpr auto bLayerCollides = 0x48; // char : 1
		constexpr auto bOverrideCollisionThickness = 0x48; // char : 1
		constexpr auto bOverrideCollisionOffset = 0x48; // char : 1
		constexpr auto CollisionThicknessOverride = 0x4c; // float
		constexpr auto CollisionOffsetOverride = 0x50; // float
		constexpr auto LayerColor = 0x54; // FLinearColor
		constexpr auto AllocatedWidth = 0x64; // int32_t
		constexpr auto AllocatedHeight = 0x68; // int32_t
		constexpr auto AllocatedCells = 0x70; // TArray<FPaperTileInfo>
		constexpr auto TileSet = 0x80; // UPaperTileSet*
		constexpr auto AllocatedGrid = 0x88; // TArray<int32_t>
	}

	namespace n_UDistributionVectorConstant {
		constexpr auto Constant = 0x38; // FVector
		constexpr auto bLockAxes = 0x44; // char : 1
		constexpr auto LockedAxes = 0x48; // EDistributionVectorLockFlags
	}

	namespace n_UReplicationGraphNode_GridCell {
		constexpr auto DynamicNode = 0x140; // UReplicationGraphNode*
		constexpr auto DormancyNode = 0x148; // UReplicationGraphNode_DormancyNode*
	}

	namespace n_UMaterialExpressionSine {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto Period = 0x54; // float
	}

	namespace n_UMorphTarget {
		constexpr auto BaseSkelMesh = 0x28; // USkeletalMesh*
	}

	namespace n_UGameplayTagsSettings {
		constexpr auto ImportTagsFromConfig = 0x48; // bool
		constexpr auto WarnOnInvalidTags = 0x49; // bool
		constexpr auto FastReplication = 0x4a; // bool
		constexpr auto InvalidTagCharacters = 0x50; // FString
		constexpr auto CategoryRemapping = 0x60; // TArray<FGameplayTagCategoryRemap>
		constexpr auto GameplayTagTableList = 0x70; // TArray<FSoftObjectPath>
		constexpr auto GameplayTagRedirects = 0x80; // TArray<FGameplayTagRedirect>
		constexpr auto CommonlyReplicatedTags = 0x90; // TArray<FName>
		constexpr auto NumBitsForContainerSize = 0xa0; // int32_t
		constexpr auto NetIndexFirstBitSegment = 0xa4; // int32_t
		constexpr auto RestrictedConfigFiles = 0xa8; // TArray<FRestrictedConfigInfo>
	}

	namespace n_UEnvQueryTest_Pathfinding {
		constexpr auto TestMode = 0x1f8; // EEnvTestPathfinding
		constexpr auto Context = 0x200; // UEnvQueryContext*
		constexpr auto PathFromContext = 0x208; // FAIDataProviderBoolValue
		constexpr auto SkipUnreachable = 0x240; // FAIDataProviderBoolValue
		constexpr auto FilterClass = 0x278; // UNavigationQueryFilter*
	}

	namespace n_UBPW_SpeakingPlayersList_C {
		constexpr auto BPW_SpeakingPlayersListItem = 0x240; // UBPW_SpeakingPlayersListItem_C*
		constexpr auto BPW_SpeakingPlayersListItem_C_1 = 0x248; // UBPW_SpeakingPlayersListItem_C*
		constexpr auto BPW_SpeakingPlayersListItem_C_2 = 0x250; // UBPW_SpeakingPlayersListItem_C*
		constexpr auto BPW_SpeakingPlayersListItem_C_3 = 0x258; // UBPW_SpeakingPlayersListItem_C*
		constexpr auto BPW_SpeakingPlayersListItem_C_4 = 0x260; // UBPW_SpeakingPlayersListItem_C*
		constexpr auto BPW_SpeakingPlayersListItem_C_5 = 0x268; // UBPW_SpeakingPlayersListItem_C*
		constexpr auto BPW_SpeakingPlayersListItem_C_6 = 0x270; // UBPW_SpeakingPlayersListItem_C*
		constexpr auto BPW_SpeakingPlayersListItem_C_7 = 0x278; // UBPW_SpeakingPlayersListItem_C*
	}

	namespace n_UCompositeCurveTable {
		constexpr auto ParentTables = 0xa0; // TArray<UCurveTable*>
		constexpr auto OldParentTables = 0xb0; // TArray<UCurveTable*>
	}

	namespace n_UQuitMatchCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UHLLUI_CosmeticItemTooltip {
		constexpr auto ItemName = 0x230; // UTextBlock*
		constexpr auto RequirementText = 0x238; // UTextBlock*
		constexpr auto ItemAdditionalText = 0x240; // UTextBlock*
		constexpr auto ViewportClient = 0x248; // UShooterGameViewportClient*
	}

	namespace n_UEdGraphNode {
		constexpr auto DeprecatedPins = 0x38; // TArray<UEdGraphPin_Deprecated*>
		constexpr auto NodePosX = 0x48; // int32_t
		constexpr auto NodePosY = 0x4c; // int32_t
		constexpr auto NodeWidth = 0x50; // int32_t
		constexpr auto NodeHeight = 0x54; // int32_t
		constexpr auto AdvancedPinDisplay = 0x58; // ENodeAdvancedPins
		constexpr auto EnabledState = 0x59; // ENodeEnabledState
		constexpr auto bDisplayAsDisabled = 0x5b; // char : 1
		constexpr auto bUserSetEnabledState = 0x5b; // char : 1
		constexpr auto bIsNodeEnabled = 0x5b; // char : 1
		constexpr auto bHasCompilerMessage = 0x5b; // char : 1
		constexpr auto NodeComment = 0x60; // FString
		constexpr auto ErrorType = 0x70; // int32_t
		constexpr auto ErrorMsg = 0x78; // FString
		constexpr auto NodeGuid = 0x88; // FGuid
	}

	namespace n_UInterpTrackInstFloatProp {
		constexpr auto ResetFloat = 0x58; // float
	}

	namespace n_UABP_MG34_FPP_V2_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x278; // FAnimNode_Root
		constexpr auto AnimGraphNode_ModifyBone_3 = 0x2a8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_Slot_3 = 0x3b0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SequenceEvaluator_4 = 0x3f8; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_TwoWayBlend = 0x440; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_ModifyBone_2 = 0x508; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x610; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x638; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x660; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x688; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0x6b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x6d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0x750; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequenceEvaluator_3 = 0x780; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_StateResult_3 = 0x7c8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer = 0x7f8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_2 = 0x870; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequenceEvaluator_2 = 0x8a0; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_StateResult = 0x8e8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x918; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x9c8; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0x9e8; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose = 0xa08; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_2 = 0xac0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0xb80; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose = 0xba8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_2 = 0xbd0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0xc18; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_SequenceEvaluator = 0xcd8; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_Slot = 0xd20; // FAnimNode_Slot
		constexpr auto AnimGraphNode_ModifyBone = 0xd68; // FAnimNode_ModifyBone
		constexpr auto BulletScale = 0xe70; // float
		constexpr auto IsDeployed = 0xe74; // bool
		constexpr auto IsUnfolded = 0xe75; // bool
		constexpr auto IsBraced = 0xe76; // bool
		constexpr auto IsEmpty = 0xe77; // bool
		constexpr auto BipodRotation = 0xe78; // FRotator
		constexpr auto BipodResult = 0xe84; // float
		constexpr auto FPPInstance = 0xe88; // UABP_Rifleman_FPP_V2_C*
		constexpr auto TPPInstance = 0xe90; // UABP_Rifleman_TPP_V2_C*
		constexpr auto ShooterCharacter = 0xe98; // AShooterCharacter*
		constexpr auto ShooterWeapon = 0xea0; // AShooterWeapon*
		constexpr auto TransitionSpeed = 0xea8; // float
		constexpr auto Stance = 0xeac; // ECharacterStance
	}

	namespace n_UParticleModuleTypeDataGpu {
		constexpr auto EmitterInfo = 0x30; // FGPUSpriteEmitterInfo
		constexpr auto ResourceData = 0x2b0; // FGPUSpriteResourceData
		constexpr auto CameraMotionBlurAmount = 0x410; // float
		constexpr auto bClearExistingParticlesOnInit = 0x414; // char : 1
	}

	namespace n_UStereoLayerShapeCylinder {
		constexpr auto Radius = 0x28; // float
		constexpr auto OverlayArc = 0x2c; // float
		constexpr auto Height = 0x30; // int32_t
	}

	namespace n_UAISenseConfig_Hearing {
		constexpr auto Implementation = 0x48; // UAISense_Hearing*
		constexpr auto HearingRange = 0x50; // float
		constexpr auto LoSHearingRange = 0x54; // float
		constexpr auto bUseLoSHearing = 0x58; // char : 1
		constexpr auto DetectionByAffiliation = 0x5c; // FAISenseAffiliationFilter
	}

	namespace n_UBTTask_PushPawnAction {
		constexpr auto Action = 0x70; // UPawnAction*
	}

	namespace n_UInterpTrackInstParticleReplay {
		constexpr auto LastUpdatePosition = 0x28; // float
	}

	namespace n_UTouchInterface {
		constexpr auto Controls = 0x28; // TArray<FTouchInputControl>
		constexpr auto ActiveOpacity = 0x38; // float
		constexpr auto InactiveOpacity = 0x3c; // float
		constexpr auto TimeUntilDeactive = 0x40; // float
		constexpr auto TimeUntilReset = 0x44; // float
		constexpr auto ActivationDelay = 0x48; // float
		constexpr auto bPreventRecenter = 0x4c; // bool
		constexpr auto StartupDelay = 0x50; // float
	}

	namespace n_AHLL_GameState_C {
		constexpr auto UberGraphFrame = 0x700; // FPointerToUberGraphFrame
		constexpr auto DefaultSceneRoot = 0x708; // USceneComponent*
		constexpr auto OnPlayerCountsChanged = 0x710; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionSquareRoot {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UAISense_Touch {
		constexpr auto RegisteredEvents = 0x80; // TArray<FAITouchEvent>
	}

	namespace n_UParticleModuleLight_Seeded {
		constexpr auto RandomSeedInfo = 0x120; // FParticleRandomSeedInfo
	}

	namespace n_UW_GH_GameProgress_Sector_new_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto A_Sector_Enter = 0x238; // UWidgetAnimation*
		constexpr auto A_SectorAlert = 0x240; // UWidgetAnimation*
		constexpr auto AttackCap = 0x248; // UProgressBar*
		constexpr auto BG = 0x250; // UImage*
		constexpr auto BGColor = 0x258; // UImage*
		constexpr auto Cap = 0x260; // UProgressBar*
		constexpr auto Meter = 0x268; // UOverlay*
		constexpr auto Ownership = 0x270; // UImage*
		constexpr auto ResourceIcon = 0x278; // UImage*
		constexpr auto Sector_State = 0x280; // ESectorCapturingState
		constexpr auto Sector_Idle = 0x281; // bool
		constexpr auto Sector_Locked = 0x282; // bool
		constexpr auto Sector_Friendly = 0x283; // bool
		constexpr auto Sector_Cooldown = 0x284; // bool
		constexpr auto Sector_OwningTeam = 0x285; // ETeam
		constexpr auto Sector_FriendlyFlipped = 0x286; // bool
		constexpr auto Sector_Entered = 0x287; // bool
		constexpr auto Sector_Index = 0x288; // int32_t
	}

	namespace n_UWGT_CosmeticItem_Large_V2_C {
		constexpr auto UberGraphFrame = 0x278; // FPointerToUberGraphFrame
		constexpr auto Hover = 0x280; // UWidgetAnimation*
		constexpr auto EquipedIndicator = 0x288; // UImage*
		constexpr auto SelectBorder = 0x290; // UBorder*
		constexpr auto bFocus = 0x298; // bool
		constexpr auto OnCreateCosmeticButtons = 0x2a0; // FMulticastInlineDelegate
	}

	namespace n_UNavCollision {
		constexpr auto CylinderCollision = 0x80; // TArray<FNavCollisionCylinder>
		constexpr auto BoxCollision = 0x90; // TArray<FNavCollisionBox>
		constexpr auto AreaClass = 0xa0; // UNavArea*
		constexpr auto bGatherConvexGeometry = 0xa8; // char : 1
		constexpr auto bCreateOnClient = 0xa8; // char : 1
	}

	namespace n_UMovieSceneBoolSection {
		constexpr auto DefaultValue = 0xe0; // bool
		constexpr auto BoolCurve = 0xe8; // FMovieSceneBoolChannel
	}

	namespace n_UAIDataProvider_Random {
		constexpr auto Min = 0x40; // float
		constexpr auto Max = 0x44; // float
		constexpr auto bInteger = 0x48; // char : 1
	}

	namespace n_UVirtualTexturePoolConfig {
		constexpr auto DefaultSizeInMegabyte = 0x28; // int32_t
		constexpr auto Pools = 0x30; // TArray<FVirtualTextureSpacePoolConfig>
	}

	namespace n_UObjectLibrary {
		constexpr auto ObjectBaseClass = 0x28; // UObject*
		constexpr auto bHasBlueprintClasses = 0x30; // bool
		constexpr auto Objects = 0x38; // TArray<UObject*>
		constexpr auto WeakObjects = 0x48; // TArray<TWeakObjectPtr<UObject>>
		constexpr auto bUseWeakReferences = 0x58; // bool
		constexpr auto bIsFullyLoaded = 0x59; // bool
	}

	namespace n_AShooterAIController {
		constexpr auto BlackboardComp = 0x328; // UBlackboardComponent*
		constexpr auto BehaviorComp = 0x330; // UBehaviorTreeComponent*
	}

	namespace n_UAnimSharingStateInstance {
		constexpr auto AnimationToPlay = 0x270; // UAnimSequence*
		constexpr auto PermutationTimeOffset = 0x278; // float
		constexpr auto PlayRate = 0x27c; // float
		constexpr auto bStateBool = 0x280; // bool
		constexpr auto Instance = 0x288; // UAnimSharingInstance*
	}

	namespace n_UAnimComposite {
		constexpr auto AnimationTrack = 0xa8; // FAnimTrack
	}

	namespace n_AShooterTeamStart {
		constexpr auto SpawnTeam = 0x250; // int32_t
		constexpr auto bNotForPlayers = 0x254; // char : 1
		constexpr auto bNotForBots = 0x254; // char : 1
	}

	namespace n_ALevelSequenceMediaController {
		constexpr auto Sequence = 0x228; // ALevelSequenceActor*
		constexpr auto MediaComponent = 0x230; // UMediaComponent*
		constexpr auto ServerStartTimeSeconds = 0x238; // float
	}

	namespace n_UMaterialExpressionScalarParameter {
		constexpr auto DefaultValue = 0x58; // float
		constexpr auto bUseCustomPrimitiveData = 0x5c; // bool
		constexpr auto PrimitiveDataIndex = 0x5d; // char
	}

	namespace n_AHLLSeat {
		constexpr auto bUsePostProcess = 0x220; // char : 1
		constexpr auto PostSettings = 0x230; // FPostProcessSettings
		constexpr auto ZoomFOVList = 0x778; // TArray<FHLLSeatZoomLevel>
		constexpr auto ZoomInSound = 0x788; // USoundBase*
		constexpr auto ZoomOutSound = 0x790; // USoundBase*
		constexpr auto CurrentOccupant = 0x798; // AShooterCharacter*
		constexpr auto OccupancyUpdate = 0x7a0; // FHLLSeatOccupancyUpdate
		constexpr auto PendingOccupancyUpdateRep = 0x7b0; // FHLLSeatOccupancyUpdate
		constexpr auto bHasPendingOccupancyUpdate = 0x7c0; // bool
		constexpr auto bHideFirstPerson = 0x7c1; // char : 1
		constexpr auto bHideThirdPerson = 0x7c1; // char : 1
		constexpr auto bFirstPersonIsThirdPerson = 0x7c1; // char : 1
		constexpr auto bHideThirdPersonHeadInFirstPerson = 0x7c1; // char : 1
		constexpr auto bAllowSameTeamOnly = 0x7c1; // char : 1
		constexpr auto bAllowEntryDuringMatchWarmup = 0x7c1; // char : 1
		constexpr auto bAttachOccupant = 0x7c1; // char : 1
		constexpr auto AttachmentMode = 0x7c2; // ESeatAttachmentMode
		constexpr auto bProtectOccupant = 0x7c3; // char : 1
		constexpr auto bUnequipWeaponOnSeating = 0x7c3; // char : 1
		constexpr auto bUseSeatViewpoint = 0x7c3; // char : 1
		constexpr auto bEnableLaserTagging = 0x7c3; // char : 1
		constexpr auto bDisablePingMarkers = 0x7c4; // char : 1
		constexpr auto AttachSocketName = 0x7c8; // FName
		constexpr auto EyepointSocketName = 0x7d0; // FName
		constexpr auto OccupantAnim_1P = 0x7d8; // UAnimInstance*
		constexpr auto OccupantAnim_3P = 0x7e0; // UAnimInstance*
		constexpr auto SeatUI = 0x7e8; // UHLLSeatWidgetBase*
		constexpr auto SeatIcon = 0x7f0; // FSlateBrush
		constexpr auto SeatDisplayName = 0x878; // FText
		constexpr auto HintsToDisplay = 0x890; // TSet<EHint>
		constexpr auto bClearEnterOrExitHintOnEnter = 0x8e0; // char : 1
		constexpr auto CanEnterHint = 0x8e1; // EHint
		constexpr auto CantEnterHint = 0x8e2; // EHint
		constexpr auto bSendSeatCapsuleOffsets = 0x8e3; // char : 1
		constexpr auto OccupantDeathAction = 0x8e4; // ESeatOccupantDeathAction
		constexpr auto SoundMix = 0x8e8; // USoundMix*
		constexpr auto bIsExterior = 0x8f0; // char : 1
		constexpr auto ExitSound = 0x8f8; // USoundBase*
		constexpr auto EnterSound = 0x900; // USoundBase*
		constexpr auto bHasPushedSoundMix = 0x908; // char : 1
		constexpr auto SeatInput = 0x910; // UInputComponent*
		constexpr auto SeatOwner = 0x918; // AActor*
		constexpr auto SeatIndex = 0x920; // int32_t
		constexpr auto EntryTime = 0x930; // float
		constexpr auto SwitchTime = 0x934; // float
		constexpr auto ExitTime = 0x938; // float
		constexpr auto bHidesPlayerNameHUDIndicator = 0x93c; // char : 1
		constexpr auto OwnedWeapons = 0x960; // TArray<AHLLArmourWeapon*>
	}

	namespace n_UClothLODDataCommon_Legacy {
		constexpr auto PhysicalMeshData = 0x28; // UClothPhysicalMeshDataBase_Legacy*
		constexpr auto ClothPhysicalMeshData = 0x30; // FClothPhysicalMeshData
		constexpr auto CollisionData = 0x128; // FClothCollisionData
	}

	namespace n_AShooterPickup {
		constexpr auto PickupPSC = 0x220; // UParticleSystemComponent*
		constexpr auto ActiveFX = 0x228; // UParticleSystem*
		constexpr auto RespawningFX = 0x230; // UParticleSystem*
		constexpr auto PickupSound = 0x238; // USoundCue*
		constexpr auto RespawnSound = 0x240; // USoundCue*
		constexpr auto RespawnTime = 0x248; // float
		constexpr auto bIsActive = 0x24c; // char : 1
		constexpr auto PickedUpBy = 0x250; // AShooterCharacter*
	}

	namespace n_UPawnAction_Repeat {
		constexpr auto ActionToRepeat = 0x98; // UPawnAction*
		constexpr auto RecentActionCopy = 0xa0; // UPawnAction*
		constexpr auto ChildFailureHandlingMode = 0xa8; // EPawnActionFailHandling
	}

	namespace n_UGameplayTask {
		constexpr auto InstanceName = 0x30; // FName
		constexpr auto ResourceOverlapPolicy = 0x3a; // ETaskResourceOverlapPolicy
		constexpr auto ChildTask = 0x60; // UGameplayTask*
	}

	namespace n_AReflectionCapture {
		constexpr auto CaptureComponent = 0x220; // UReflectionCaptureComponent*
	}

	namespace n_UWGT_MarkerTooltip_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Desc = 0x238; // UTextBlock*
		constexpr auto Vis = 0x240; // UTextBlock*
	}

	namespace n_USynthSound {
		constexpr auto OwningSynthComponent = 0x360; // USynthComponent*
	}

	namespace n_AMatineeActor {
		constexpr auto MatineeData = 0x220; // UInterpData*
		constexpr auto MatineeControllerName = 0x228; // FName
		constexpr auto PlayRate = 0x230; // float
		constexpr auto bPlayOnLevelLoad = 0x234; // char : 1
		constexpr auto bForceStartPos = 0x234; // char : 1
		constexpr auto ForceStartPosition = 0x238; // float
		constexpr auto bLooping = 0x23c; // char : 1
		constexpr auto bRewindOnPlay = 0x23c; // char : 1
		constexpr auto bNoResetOnRewind = 0x23c; // char : 1
		constexpr auto bRewindIfAlreadyPlaying = 0x23c; // char : 1
		constexpr auto bDisableRadioFilter = 0x23c; // char : 1
		constexpr auto bClientSideOnly = 0x23c; // char : 1
		constexpr auto bSkipUpdateIfNotVisible = 0x23c; // char : 1
		constexpr auto bIsSkippable = 0x23c; // char : 1
		constexpr auto PreferredSplitScreenNum = 0x240; // int32_t
		constexpr auto bDisableMovementInput = 0x244; // char : 1
		constexpr auto bDisableLookAtInput = 0x244; // char : 1
		constexpr auto bHidePlayer = 0x244; // char : 1
		constexpr auto bHideHud = 0x244; // char : 1
		constexpr auto GroupActorInfos = 0x248; // TArray<FInterpGroupActorInfo>
		constexpr auto bShouldShowGore = 0x258; // char : 1
		constexpr auto GroupInst = 0x260; // TArray<UInterpGroupInst*>
		constexpr auto CameraCuts = 0x270; // TArray<FCameraCutInfo>
		constexpr auto bIsPlaying = 0x280; // char : 1
		constexpr auto bReversePlayback = 0x280; // char : 1
		constexpr auto bPaused = 0x280; // char : 1
		constexpr auto bPendingStop = 0x280; // char : 1
		constexpr auto InterpPosition = 0x284; // float
		constexpr auto ReplicationForceIsPlaying = 0x28c; // char
		constexpr auto OnPlay = 0x290; // FMulticastInlineDelegate
		constexpr auto OnStop = 0x2a0; // FMulticastInlineDelegate
		constexpr auto OnPause = 0x2b0; // FMulticastInlineDelegate
	}

	namespace n_UFoliageType_InstancedStaticMesh {
		constexpr auto Mesh = 0x380; // UStaticMesh*
		constexpr auto OverrideMaterials = 0x388; // TArray<UMaterialInterface*>
		constexpr auto ComponentClass = 0x398; // UFoliageInstancedStaticMeshComponent*
	}

	namespace n_UConsole {
		constexpr auto ConsoleTargetPlayer = 0x38; // ULocalPlayer*
		constexpr auto DefaultTexture_Black = 0x40; // UTexture2D*
		constexpr auto DefaultTexture_White = 0x48; // UTexture2D*
		constexpr auto HistoryBuffer = 0x68; // TArray<FString>
	}

	namespace n_UWorldComposition {
		constexpr auto TilesStreaming = 0x48; // TArray<ULevelStreaming*>
		constexpr auto TilesStreamingTimeThreshold = 0x58; // double
		constexpr auto bLoadAllTilesDuringCinematic = 0x60; // bool
		constexpr auto bRebaseOriginIn3DSpace = 0x61; // bool
		constexpr auto RebaseOriginDistance = 0x64; // float
	}

	namespace n_UParticleModuleVelocityCone {
		constexpr auto Angle = 0x38; // FRawDistributionFloat
		constexpr auto Velocity = 0x68; // FRawDistributionFloat
		constexpr auto Direction = 0x98; // FVector
	}

	namespace n_UWidgetTree {
		constexpr auto RootWidget = 0x28; // UWidget*
	}

	namespace n_UMaterialExpressionVectorNoise {
		constexpr auto Position = 0x40; // FExpressionInput
		constexpr auto NoiseFunction = 0x54; // EVectorNoiseFunction
		constexpr auto Quality = 0x58; // int32_t
		constexpr auto bTiling = 0x5c; // char : 1
		constexpr auto TileSize = 0x60; // uint32_t
	}

	namespace n_UMaterialExpressionMapARPassthroughCameraUV {
		constexpr auto Coordinates = 0x40; // FExpressionInput
	}

	namespace n_UEnvQueryGenerator_BlueprintBase {
		constexpr auto GeneratorsActionDescription = 0x50; // FText
		constexpr auto Context = 0x68; // UEnvQueryContext*
		constexpr auto GeneratedItemType = 0x70; // UEnvQueryItemType*
	}

	namespace n_UHLLServerConfig {
		constexpr auto bTeamAutoBalanceEnabled = 0x48; // bool
		constexpr auto TeamAutoBalanceThreshold = 0x49; // char
		constexpr auto TeamSwitchingCooldownMinutes = 0x4a; // char
		constexpr auto IdleKickTimeoutMinutes = 0x4c; // int32_t
		constexpr auto HighPlayerPingThresholdMs = 0x50; // int32_t
		constexpr auto bVoteKickEnabled = 0x54; // bool
		constexpr auto CustomVoteKickThresholds = 0x58; // TArray<FVoteThreshold>
	}

	namespace n_UWindowTitleBarAreaSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UHLLNameplateIndicatorBase {
		constexpr auto bLimitViewDistanceWhenLaserTagged = 0x2a8; // char : 1
		constexpr auto bOnlyShowWhenLaserTagged = 0x2a8; // char : 1
	}

	namespace n_UHapticFeedbackEffect_Buffer {
		constexpr auto Amplitudes = 0x28; // TArray<char>
		constexpr auto SampleRate = 0x38; // int32_t
	}

	namespace n_URestrictedGameplayTagsList {
		constexpr auto ConfigFileName = 0x28; // FString
		constexpr auto RestrictedGameplayTagList = 0x38; // TArray<FRestrictedGameplayTagTableRow>
	}

	namespace n_UHLLMapTooltip_ResourceNode {
		constexpr auto ResourceTypeImage = 0x260; // UImage*
		constexpr auto ResourceTypeText = 0x268; // UTextBlock*
		constexpr auto ResourceGenValue = 0x270; // UTextBlock*
	}

	namespace n_UNamedInterfaces {
		constexpr auto NamedInterfaces = 0x28; // TArray<FNamedInterface>
		constexpr auto NamedInterfaceDefs = 0x38; // TArray<FNamedInterfaceDef>
	}

	namespace n_AHLLAbility_ResourceConversion {
		constexpr auto GeneratedResource = 0x350; // EGameResource
		constexpr auto GeneratedAmount = 0x354; // int32_t
	}

	namespace n_UHLLDialogBox {
		constexpr auto OptionSelected = 0x230; // FMulticastInlineDelegate
		constexpr auto CurrentPriority = 0x258; // int32_t
		constexpr auto TitleText = 0x260; // UTextBlock*
		constexpr auto BodyText = 0x268; // UTextBlock*
		constexpr auto CustomContent = 0x270; // UVerticalBox*
		constexpr auto ButtonsPerRow = 0x278; // int32_t
		constexpr auto Buttons = 0x280; // TArray<UHLLDialogButton*>
		constexpr auto ButtonPanel = 0x290; // UUniformGridPanel*
		constexpr auto PopupInput = 0x2b0; // UInputComponent*
		constexpr auto ViewportClient = 0x2b8; // UShooterGameViewportClient*
	}

	namespace n_UViewport {
		constexpr auto BackgroundColor = 0x120; // FLinearColor
	}

	namespace n_UInterpGroupCamera {
		constexpr auto CameraAnimInst = 0x50; // UCameraAnim*
		constexpr auto CompressTolerance = 0x58; // float
	}

	namespace n_UNavigationPath {
		constexpr auto PathUpdatedNotifier = 0x28; // FMulticastInlineDelegate
		constexpr auto PathPoints = 0x38; // TArray<FVector>
		constexpr auto RecalculateOnInvalidation = 0x48; // ENavigationOptionFlag
	}

	namespace n_UHLLSettings {
		constexpr auto PlayerLevelStart = 0x38; // int32_t
		constexpr auto PlayerLevelMod = 0x3c; // int32_t
		constexpr auto MaxPlayerLevels = 0x40; // int32_t
		constexpr auto RoleLevelStart = 0x44; // int32_t
		constexpr auto RoleLevelMod = 0x48; // int32_t
		constexpr auto MaxRoleLevels = 0x4c; // int32_t
		constexpr auto MaxRank = 0x50; // int32_t
		constexpr auto PlayerLevelTable = 0x58; // TArray<int32_t>
		constexpr auto RoleLevelTable = 0x68; // TArray<int32_t>
		constexpr auto CosmeticData = 0x78; // TArray<TSoftObjectPtr<UDataTable>>
		constexpr auto GamepadLayouts = 0x88; // TSoftObjectPtr<UDataTable>
		constexpr auto Loadouts = 0xb0; // TArray<TSoftObjectPtr<UHLLTeamLoadouts>>
		constexpr auto MatchWinMusic = 0xc0; // TArray<TSoftObjectPtr<USoundBase>>
		constexpr auto DLCData = 0xd0; // TSoftObjectPtr<UDataTable>
	}

	namespace n_UBehaviorTree {
		constexpr auto RootNode = 0x30; // UBTCompositeNode*
		constexpr auto BlackboardAsset = 0x38; // UBlackboardData*
		constexpr auto RootDecorators = 0x40; // TArray<UBTDecorator*>
		constexpr auto RootDecoratorOps = 0x50; // TArray<FBTDecoratorLogic>
	}

	namespace n_USlateVectorArtData {
		constexpr auto VertexData = 0x28; // TArray<FSlateMeshVertex>
		constexpr auto IndexData = 0x38; // TArray<uint32_t>
		constexpr auto Material = 0x48; // UMaterialInterface*
		constexpr auto ExtentMin = 0x50; // FVector2D
		constexpr auto ExtentMax = 0x58; // FVector2D
	}

	namespace n_UControlPointMeshComponent {
		constexpr auto VirtualTextureMainPassMaxDrawDistance = 0x4a0; // float
	}

	namespace n_UGameNetworkManagerSettings {
		constexpr auto MinDynamicBandwidth = 0x28; // int32_t
		constexpr auto MaxDynamicBandwidth = 0x2c; // int32_t
		constexpr auto TotalNetBandwidth = 0x30; // int32_t
		constexpr auto BadPingThreshold = 0x34; // int32_t
		constexpr auto bIsStandbyCheckingEnabled = 0x38; // char : 1
		constexpr auto StandbyRxCheatTime = 0x3c; // float
		constexpr auto StandbyTxCheatTime = 0x40; // float
		constexpr auto PercentMissingForRxStandby = 0x44; // float
		constexpr auto PercentMissingForTxStandby = 0x48; // float
		constexpr auto PercentForBadPing = 0x4c; // float
		constexpr auto JoinInProgressStandbyWaitTime = 0x50; // float
	}

	namespace n_AAmbientSound {
		constexpr auto AudioComponent = 0x220; // UAudioComponent*
	}

	namespace n_AVehicleDriverSeat {
		constexpr auto bOnlyAllowArmourUnitsIn = 0x978; // char : 1
		constexpr auto InteriorMesh = 0x990; // UStaticMeshComponent*
		constexpr auto CameraController = 0x998; // USeatCameraController*
	}

	namespace n_UInAppPurchaseCallbackProxy {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_UMovieSceneMaterialTrack {
		constexpr auto Sections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_UMovieSceneFolder {
		constexpr auto FolderName = 0x28; // FName
		constexpr auto ChildFolders = 0x30; // TArray<UMovieSceneFolder*>
		constexpr auto ChildMasterTracks = 0x40; // TArray<UMovieSceneTrack*>
		constexpr auto ChildObjectBindingStrings = 0x50; // TArray<FString>
	}

	namespace n_UMaterialExpressionVirtualTextureFeatureSwitch {
		constexpr auto No = 0x40; // FExpressionInput
		constexpr auto Yes = 0x54; // FExpressionInput
	}

	namespace n_UBlackboardKeyType_Object {
		constexpr auto BaseClass = 0x30; // UObject*
	}

	namespace n_UInAppPurchaseQueryCallbackProxy {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_APaperGroupedSpriteActor {
		constexpr auto RenderComponent = 0x220; // UPaperGroupedSpriteComponent*
	}

	namespace n_UParticleModuleMeshRotation {
		constexpr auto StartRotation = 0x30; // FRawDistributionVector
		constexpr auto bInheritParent = 0x78; // char : 1
	}

	namespace n_ACableActor {
		constexpr auto CableComponent = 0x220; // UCableComponent*
	}

	namespace n_UPawnMovementComponent {
		constexpr auto PawnOwner = 0x130; // APawn*
	}

	namespace n_UInterpTrackInstAnimControl {
		constexpr auto LastUpdatePosition = 0x28; // float
	}

	namespace n_ULandscapeLayerInfoObject {
		constexpr auto LayerName = 0x28; // FName
		constexpr auto PhysMaterial = 0x30; // UPhysicalMaterial*
		constexpr auto Hardness = 0x38; // float
		constexpr auto LayerUsageDebugColor = 0x3c; // FLinearColor
	}

	namespace n_UHLLAnimNotify_CasingEject {
		constexpr auto NumToPlay = 0x38; // char
	}

	namespace n_UWGT_Disclaimer_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto FadeInOut = 0x238; // UWidgetAnimation*
		constexpr auto btn_Continue = 0x240; // UbtnSimple_V2_C*
		constexpr auto div01 = 0x248; // UImage*
		constexpr auto div02 = 0x250; // UImage*
		constexpr auto HB_Tips = 0x258; // UHorizontalBox*
		constexpr auto Image = 0x260; // UImage*
		constexpr auto Image_86 = 0x268; // UImage*
		constexpr auto RB_FLICKER = 0x270; // URetainerBox*
		constexpr auto ScrollBox_1 = 0x278; // UScrollBox*
		constexpr auto Tip_Communicate = 0x280; // UWGT_Disclaimer_tipColumn_C*
		constexpr auto Tip_Socialize = 0x288; // UWGT_Disclaimer_tipColumn_C*
		constexpr auto Tip_StartSimple = 0x290; // UWGT_Disclaimer_tipColumn_C*
		constexpr auto OwningMenu = 0x298; // UMainMenuWidget_V2_C*
		constexpr auto Tips = 0x2a0; // TArray<UWGT_Disclaimer_tipColumn_C*>
		constexpr auto StyleGuide = 0x2b0; // FHLLUIStyle
	}

	namespace n_UPartyManagementList_C {
		constexpr auto LoadingParty = 0x230; // UImage*
		constexpr auto PartyAmount = 0x238; // UTextBlock*
		constexpr auto PartyScrollingList = 0x240; // UScrollBox*
		constexpr auto SpacerText = 0x248; // UTextBlock*
		constexpr auto PauseMenu = 0x250; // UWGT_GameMenu_V2_C*
	}

	namespace n_UAsyncActionLoadPrimaryAssetList {
		constexpr auto Completed = 0x78; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleVectorFieldRotationRate {
		constexpr auto RotationRate = 0x30; // FVector
	}

	namespace n_UMaterialExpressionDynamicParameter {
		constexpr auto ParamNames = 0x40; // TArray<FString>
		constexpr auto DefaultValue = 0x50; // FLinearColor
		constexpr auto ParameterIndex = 0x60; // uint32_t
	}

	namespace n_UWGT_RadialInventory_Base_V2_C {
		constexpr auto UberGraphFrame = 0x328; // FPointerToUberGraphFrame
		constexpr auto BackgroundBlur_63 = 0x330; // UBackgroundBlur*
	}

	namespace n_UPhysicsCollisionHandler {
		constexpr auto ImpactThreshold = 0x28; // float
		constexpr auto ImpactReFireDelay = 0x2c; // float
		constexpr auto DefaultImpactSound = 0x30; // USoundBase*
		constexpr auto LastImpactSoundTime = 0x38; // float
	}

	namespace n_UVerticalBoxSlot {
		constexpr auto Size = 0x38; // FSlateChildSize
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x58; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x59; // EVerticalAlignment
	}

	namespace n_AHLLDispenseStructure {
		constexpr auto DummyRoot = 0x288; // USceneComponent*
		constexpr auto Mesh = 0x290; // UStaticMeshComponent*
		constexpr auto HealthComponent = 0x298; // UHLLSimpleHealthComponent*
		constexpr auto bCanBeDismantled = 0x2a0; // char : 1
		constexpr auto bCanDismantleWhenPlacedInWorld = 0x2a0; // char : 1
		constexpr auto DismantleTime = 0x2a4; // float
		constexpr auto DisplayName = 0x2a8; // FText
		constexpr auto ScoreOnEnemyDismantled = 0x2c0; // FName
		constexpr auto Team = 0x2c8; // ETeam
		constexpr auto DamageFilterType = 0x2c9; // EHLLDamageFilterType
		constexpr auto UpgradeData = 0x2d0; // FHLLUpgradeInfo
		constexpr auto UpgradeGhostComponent = 0x358; // UHLLUpgradeGhostComponent*
		constexpr auto bRegisterWithTeamActors = 0x360; // char : 1
		constexpr auto TeamActorCountClass = 0x361; // EActorCountClass
		constexpr auto SpawnedByPlayer = 0x368; // AShooterPlayerState*
	}

	namespace n_UBTTask_PlayAnimation {
		constexpr auto AnimationToPlay = 0x70; // UAnimationAsset*
		constexpr auto bLooping = 0x78; // char : 1
		constexpr auto bNonBlocking = 0x78; // char : 1
		constexpr auto MyOwnerComp = 0x80; // UBehaviorTreeComponent*
		constexpr auto CachedSkelMesh = 0x88; // USkeletalMeshComponent*
	}

	namespace n_UWGT_DeployRoleSelection_V2_C {
		constexpr auto UberGraphFrame = 0x3d0; // FPointerToUberGraphFrame
		constexpr auto FadeInLeftColumn = 0x3d8; // UWidgetAnimation*
		constexpr auto FadeInRightColumn = 0x3e0; // UWidgetAnimation*
		constexpr auto TitleChange = 0x3e8; // UWidgetAnimation*
		constexpr auto RightPanelChange = 0x3f0; // UWidgetAnimation*
		constexpr auto CharacterSpinSlider = 0x3f8; // USlider*
		constexpr auto CosmeticDetailsVBox = 0x400; // UVerticalBox*
		constexpr auto LeftSBox = 0x408; // USizeBox*
		constexpr auto RightSBox = 0x410; // USizeBox*
		constexpr auto TabbedButtonContainer_V2 = 0x418; // UTabbedButtonContainer_V2_C*
		constexpr auto DeployWidgetParent = 0x420; // UDeployment_V2_C*
		constexpr auto bHasFocused = 0x428; // bool
		constexpr auto SelectedRole = 0x430; // UWGT_DeployRoleItem_V2_C*
		constexpr auto bFocusedOnRoles = 0x438; // bool
	}

	namespace n_UHLLComboBox {
		constexpr auto WidgetStyle = 0x120; // FComboBoxStyle
		constexpr auto ItemStyle = 0x510; // FTableRowStyle
		constexpr auto ContentPadding = 0xcd8; // FMargin
		constexpr auto MaxListHeight = 0xce8; // float
		constexpr auto Font = 0xcf0; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xd40; // FSlateColor
		constexpr auto bIsFocusable = 0xd68; // bool
	}

	namespace n_UMaterialExpressionCollectionParameter {
		constexpr auto Collection = 0x40; // UMaterialParameterCollection*
		constexpr auto ParameterName = 0x48; // FName
		constexpr auto ParameterId = 0x50; // FGuid
	}

	namespace n_UPreviewMeshCollection {
		constexpr auto Skeleton = 0x38; // USkeleton*
		constexpr auto SkeletalMeshes = 0x40; // TArray<FPreviewMeshCollectionEntry>
	}

	namespace n_UHLLUseContext_Upgrade {
		constexpr auto RootWidget = 0x238; // UWidget*
		constexpr auto IconImage = 0x240; // UImage*
		constexpr auto RadialProg = 0x248; // UImage*
		constexpr auto DisplayText = 0x250; // URichTextBlock*
	}

	namespace n_APlayerCameraManager {
		constexpr auto PCOwner = 0x220; // APlayerController*
		constexpr auto TransformComponent = 0x228; // USceneComponent*
		constexpr auto DefaultFOV = 0x238; // float
		constexpr auto DefaultOrthoWidth = 0x240; // float
		constexpr auto DefaultAspectRatio = 0x248; // float
		constexpr auto CameraCache = 0x290; // FCameraCacheEntry
		constexpr auto LastFrameCameraCache = 0x870; // FCameraCacheEntry
		constexpr auto ViewTarget = 0xe50; // FTViewTarget
		constexpr auto PendingViewTarget = 0x1440; // FTViewTarget
		constexpr auto CameraCachePrivate = 0x1a60; // FCameraCacheEntry
		constexpr auto LastFrameCameraCachePrivate = 0x2040; // FCameraCacheEntry
		constexpr auto ModifierList = 0x2620; // TArray<UCameraModifier*>
		constexpr auto DefaultModifiers = 0x2630; // TArray<UCameraModifier*>
		constexpr auto FreeCamDistance = 0x2640; // float
		constexpr auto FreeCamOffset = 0x2644; // FVector
		constexpr auto ViewTargetOffset = 0x2650; // FVector
		constexpr auto CameraLensEffects = 0x2670; // TArray<AEmitterCameraLensEffectBase*>
		constexpr auto CachedCameraShakeMod = 0x2680; // UCameraModifier_CameraShake*
		constexpr auto AnimInstPool = 0x2688; // UCameraAnimInst* [0x8]
		constexpr auto PostProcessBlendCache = 0x26c8; // TArray<FPostProcessSettings>
		constexpr auto ActiveAnims = 0x26e8; // TArray<UCameraAnimInst*>
		constexpr auto FreeAnims = 0x26f8; // TArray<UCameraAnimInst*>
		constexpr auto AnimCameraActor = 0x2708; // ACameraActor*
		constexpr auto bIsOrthographic = 0x2710; // char : 1
		constexpr auto bDefaultConstrainAspectRatio = 0x2710; // char : 1
		constexpr auto bClientSimulatingViewTarget = 0x2710; // char : 1
		constexpr auto bUseClientSideCameraUpdates = 0x2710; // char : 1
		constexpr auto bGameCameraCutThisFrame = 0x2711; // char : 1
		constexpr auto ViewPitchMin = 0x2714; // float
		constexpr auto ViewPitchMax = 0x2718; // float
		constexpr auto ViewYawMin = 0x271c; // float
		constexpr auto ViewYawMax = 0x2720; // float
		constexpr auto ViewRollMin = 0x2724; // float
		constexpr auto ViewRollMax = 0x2728; // float
		constexpr auto ServerUpdateCameraTimeout = 0x2730; // float
	}

	namespace n_UParticleModuleKillHeight {
		constexpr auto Height = 0x30; // FRawDistributionFloat
		constexpr auto bAbsolute = 0x60; // char : 1
		constexpr auto bFloor = 0x60; // char : 1
		constexpr auto bApplyPSysScale = 0x60; // char : 1
	}

	namespace n_UAchievementWriteCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionLandscapeLayerCoords {
		constexpr auto MappingType = 0x40; // ETerrainCoordMappingType
		constexpr auto CustomUVType = 0x41; // ELandscapeCustomizedCoordType
		constexpr auto MappingScale = 0x44; // float
		constexpr auto MappingRotation = 0x48; // float
		constexpr auto MappingPanU = 0x4c; // float
		constexpr auto MappingPanV = 0x50; // float
	}

	namespace n_UCreatePlatoon_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto AvailablePlatoonTypes = 0x238; // UAvailablePlatoonTypes_V2_C*
		constexpr auto CircularThrobber_1 = 0x240; // UCircularThrobber*
		constexpr auto MainPanel = 0x248; // UVerticalBox*
		constexpr auto PanelSwitcher = 0x250; // UWidgetSwitcher*
		constexpr auto ProgressPanel = 0x258; // UBorder*
		constexpr auto txt_title = 0x260; // Uhll_text_C*
		constexpr auto OnClosed = 0x268; // FMulticastInlineDelegate
		constexpr auto OnHovered = 0x278; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x288; // FMulticastInlineDelegate
		constexpr auto CurrentIndex = 0x298; // int32_t
	}

	namespace n_UHLLInGameMenu {
		constexpr auto OpenAnim = 0x238; // UWidgetAnimation*
		constexpr auto CloseAnim = 0x240; // UWidgetAnimation*
		constexpr auto OptionSwitcher = 0x248; // UWidgetSwitcher*
		constexpr auto OptionsScreen = 0x250; // UHLLOptionScreenBase*
		constexpr auto ViewportClient = 0x258; // UShooterGameViewportClient*
	}

	namespace n_USuspensionsComponent {
		constexpr auto bEnabled = 0xb0; // char : 1
	}

	namespace n_UHapticFeedbackEffect_Curve {
		constexpr auto HapticDetails = 0x28; // FHapticFeedbackDetails_Curve
	}

	namespace n_UUserDefinedCaptureProtocol {
		constexpr auto World = 0x58; // UWorld*
	}

	namespace n_UHLLVehicleDamageFX {
		constexpr auto DamageEffects = 0x30; // TMap<FName, FHLLArmourDamageFX>
		constexpr auto DepletedSounds = 0x80; // FArmourDepletedSound [0x4]
	}

	namespace n_UServerQueueProgressWidget {
		constexpr auto BodyText = 0x248; // UTextBlock*
		constexpr auto CancelButton = 0x250; // UButton*
		constexpr auto MatchOverIndicator = 0x258; // UWidget*
		constexpr auto BeaconClient = 0x260; // AServerQueueBeaconClient*
	}

	namespace n_UConnectionCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UKeyBindingButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto EditingMode = 0x238; // UBorder*
		constexpr auto PrimaryKey = 0x240; // UTextBlock*
		constexpr auto PrimaryKeyButton = 0x248; // UButton*
		constexpr auto Switcher = 0x250; // UWidgetSwitcher*
		constexpr auto NormalTextColor = 0x258; // FSlateColor
		constexpr auto HoveredTextColor = 0x280; // FSlateColor
		constexpr auto Hovered = 0x2a8; // bool
		constexpr auto Editing = 0x2a9; // bool
		constexpr auto HighlightedButtonStyle = 0x2b0; // FButtonStyle
		constexpr auto NotHighlightedButtonStyle = 0x528; // FButtonStyle
		constexpr auto Key = 0x7a0; // FKey
		constexpr auto Owner = 0x7b8; // UKeyBinding_V2_C*
	}

	namespace n_USpawnPointListItem_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto SelectButton = 0x238; // UButton*
		constexpr auto SpawnIcon = 0x240; // UImage*
		constexpr auto SpawnText = 0x248; // UTextBlock*
		constexpr auto TextBorder = 0x250; // UBorder*
		constexpr auto OnClick = 0x258; // FMulticastInlineDelegate
		constexpr auto bFocus = 0x268; // bool
		constexpr auto HQ_SpawnIcon = 0x270; // FSlateBrush
		constexpr auto Garrison_SpawnIcon = 0x2f8; // FSlateBrush
		constexpr auto Outpost_SpawnIcon = 0x380; // FSlateBrush
		constexpr auto bSelected = 0x408; // bool
		constexpr auto OnUnhovered = 0x410; // FMulticastInlineDelegate
		constexpr auto bAvailable = 0x420; // bool
		constexpr auto OnNavigateLeft = 0x428; // FMulticastInlineDelegate
	}

	namespace n_UPawnAction_Move {
		constexpr auto GoalActor = 0x98; // AActor*
		constexpr auto GoalLocation = 0xa0; // FVector
		constexpr auto AcceptableRadius = 0xac; // float
		constexpr auto FilterClass = 0xb0; // UNavigationQueryFilter*
		constexpr auto bAllowStrafe = 0xb8; // char : 1
		constexpr auto bFinishOnOverlap = 0xb8; // char : 1
		constexpr auto bUsePathfinding = 0xb8; // char : 1
		constexpr auto bAllowPartialPath = 0xb8; // char : 1
		constexpr auto bProjectGoalToNavigation = 0xb8; // char : 1
		constexpr auto bUpdatePathToGoal = 0xb8; // char : 1
		constexpr auto bAbortChildActionOnPathChange = 0xb8; // char : 1
	}

	namespace n_UHLLSeatWidgetBase {
		constexpr auto Seat = 0x230; // TWeakObjectPtr<AHLLSeat>
		constexpr auto IconWidgetClass = 0x238; // UHLLSeatIcon*
		constexpr auto ActiveSeatIcons = 0x240; // TArray<UHLLSeatIcon*>
		constexpr auto SeatIconVBox = 0x250; // UPanelWidget*
		constexpr auto ZoomOverlay = 0x258; // UPanelWidget*
		constexpr auto HealthStatusPanel = 0x260; // UHLLSeatHealthStatus*
	}

	namespace n_UParticleModule {
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2a; // char
	}

	namespace n_AHLLCommanderAbility_StrafingRun {
		constexpr auto FollowSpline_2 = 0x370; // USplineComponent*
		constexpr auto PlaneMesh_2 = 0x378; // UStaticMeshComponent*
		constexpr auto PlaneAmbientSound = 0x380; // UAudioComponent*
		constexpr auto PlaneDiveSound = 0x388; // UAudioComponent*
		constexpr auto PlaneRoot = 0x390; // USceneComponent*
		constexpr auto PlaneSpeed = 0x398; // float
		constexpr auto ActivationTime = 0x39c; // float
		constexpr auto DiveActivationTime = 0x3a0; // float
		constexpr auto ImpactEffect = 0x3a8; // AShooterImpactEffect*
		constexpr auto PlaneGunSpacing = 0x3b0; // float
		constexpr auto ShotRandomOffset = 0x3b4; // float
		constexpr auto ShotRadius = 0x3b8; // float
		constexpr auto ShotAngle = 0x3bc; // float
		constexpr auto Damage = 0x3c0; // float
		constexpr auto Suppression = 0x3c4; // float
		constexpr auto SuppressionRadius = 0x3c8; // float
		constexpr auto FireTime = 0x3cc; // float
		constexpr auto CoverageLength = 0x3d0; // float
		constexpr auto NumShots = 0x3d4; // int32_t
		constexpr auto DamageType = 0x3d8; // UShooterDamageType*
		constexpr auto MuzzleFlash = 0x3e0; // UParticleSystem*
		constexpr auto MuzzleSound = 0x3e8; // USoundBase*
		constexpr auto MuzzleFlashPSC = 0x3f0; // TArray<TWeakObjectPtr<UParticleSystemComponent>>
		constexpr auto MuzzleAC = 0x400; // TArray<TWeakObjectPtr<UAudioComponent>>
	}

	namespace n_AEF_BrickBuilding_01_D_C {
		constexpr auto SM_MERGED_FBLD_EF_BrickBuilding_01_D18_3 = 0x220; // UStaticMeshComponent*
		constexpr auto DefaultSceneRoot = 0x228; // USceneComponent*
	}

	namespace n_UWGT_UseContext_Upgrade_C {
		constexpr auto UberGraphFrame = 0x258; // FPointerToUberGraphFrame
	}

	namespace n_UBuildPatchManifest {
		constexpr auto ManifestFileVersion = 0x28; // char
		constexpr auto bIsFileData = 0x29; // bool
		constexpr auto AppID = 0x2c; // uint32_t
		constexpr auto AppName = 0x30; // FString
		constexpr auto BuildVersion = 0x40; // FString
		constexpr auto LaunchExe = 0x50; // FString
		constexpr auto LaunchCommand = 0x60; // FString
		constexpr auto PrereqIds = 0x70; // TSet<FString>
		constexpr auto PrereqName = 0xc0; // FString
		constexpr auto PrereqPath = 0xd0; // FString
		constexpr auto PrereqArgs = 0xe0; // FString
		constexpr auto FileManifestList = 0xf0; // TArray<FFileManifestData>
		constexpr auto ChunkList = 0x100; // TArray<FChunkInfoData>
		constexpr auto CustomFields = 0x110; // TArray<FCustomFieldData>
	}

	namespace n_UHLLRepairIndicator {
		constexpr auto RepairBorder = 0x2a8; // UBorder*
	}

	namespace n_UGameplayMessage_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Message = 0x238; // UTextBlock*
		constexpr auto Text = 0x240; // FText
		constexpr auto LifeSpan = 0x258; // float
	}

	namespace n_UTimelineComponent {
		constexpr auto TheTimeline = 0xb0; // FTimeline
		constexpr auto bIgnoreTimeDilation = 0x148; // char : 1
	}

	namespace n_UMovieSceneVectorSection {
		constexpr auto Curves = 0xe0; // FMovieSceneFloatChannel [0x4]
		constexpr auto ChannelsUsed = 0x360; // int32_t
	}

	namespace n_UMaterialExpressionDistance {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
	}

	namespace n_UHLLArmourWeaponUI {
		constexpr auto AssignedWeapon = 0x230; // AHLLArmourWeapon*
		constexpr auto AmmoItemWidget = 0x238; // UHLLArmourWeaponUI_AmmoItem*
		constexpr auto ActiveAmmoItems = 0x240; // TArray<UHLLArmourWeaponUI_AmmoItem*>
		constexpr auto WeaponIcon = 0x250; // UImage*
		constexpr auto WeaponNameText = 0x258; // UTextBlock*
		constexpr auto WeaponHeaderText = 0x260; // UTextBlock*
		constexpr auto LoadProgress = 0x268; // UProgressBar*
		constexpr auto SingleAmmoContainer = 0x270; // UWidget*
		constexpr auto AmmoClip = 0x278; // UTextBlock*
		constexpr auto AmmoClips = 0x280; // UTextBlock*
		constexpr auto AmmoState = 0x288; // UTextBlock*
		constexpr auto MunitionsCost = 0x290; // UTextBlock*
		constexpr auto MunitionsSwitcher = 0x298; // UWidgetSwitcher*
		constexpr auto MultiAmmoContainer = 0x2a0; // UVerticalBox*
	}

	namespace n_UMovieSceneSubTrack {
		constexpr auto Sections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_UMaterialBillboardComponent {
		constexpr auto Elements = 0x410; // TArray<FMaterialSpriteElement>
	}

	namespace n_UMaterialExpressionStaticSwitchParameter {
		constexpr auto A = 0x60; // FExpressionInput
		constexpr auto B = 0x74; // FExpressionInput
	}

	namespace n_UMovieSceneEasingExternalCurve {
		constexpr auto Curve = 0x30; // UCurveFloat*
	}

	namespace n_UScaleBoxSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UBTDecorator_ConeCheck {
		constexpr auto ConeHalfAngle = 0x68; // float
		constexpr auto ConeOrigin = 0x70; // FBlackboardKeySelector
		constexpr auto ConeDirection = 0x98; // FBlackboardKeySelector
		constexpr auto Observed = 0xc0; // FBlackboardKeySelector
	}

	namespace n_AShooterWeapon_Grenade {
		constexpr auto GrenadeConfig = 0x8b8; // FGrenadeWeaponData
		constexpr auto AimOverhandAnimation = 0x8e8; // FWeaponAnim
		constexpr auto AimUnderhandAnimation = 0x910; // FWeaponAnim
		constexpr auto ThrowOverhandAnimation = 0x938; // FWeaponAnim
		constexpr auto ThrowUnderhandAnimation = 0x960; // FWeaponAnim
		constexpr auto m_throwOverhandCounter = 0x988; // char
		constexpr auto m_throwUnderhandCounter = 0x989; // char
		constexpr auto m_aimOverhandCounter = 0x98a; // char
		constexpr auto m_aimUnderhandCounter = 0x98b; // char
		constexpr auto m_projectile = 0x9b0; // AGrenadeProjectile*
		constexpr auto m_globalThrowSettings = 0x9b8; // UGlobalGrenadeThrowSettings*
	}

	namespace n_UMaterialExpressionSobol {
		constexpr auto Cell = 0x40; // FExpressionInput
		constexpr auto Index = 0x54; // FExpressionInput
		constexpr auto Seed = 0x68; // FExpressionInput
		constexpr auto ConstIndex = 0x7c; // uint32_t
		constexpr auto ConstSeed = 0x80; // FVector2D
	}

	namespace n_AEQSTestingPawn {
		constexpr auto QueryTemplate = 0x4c0; // UEnvQuery*
		constexpr auto QueryParams = 0x4c8; // TArray<FEnvNamedValue>
		constexpr auto QueryConfig = 0x4d8; // TArray<FAIDynamicParam>
		constexpr auto TimeLimitPerStep = 0x4e8; // float
		constexpr auto StepToDebugDraw = 0x4ec; // int32_t
		constexpr auto HighlightMode = 0x4f0; // EEnvQueryHightlightMode
		constexpr auto bDrawLabels = 0x4f4; // char : 1
		constexpr auto bDrawFailedItems = 0x4f4; // char : 1
		constexpr auto bReRunQueryOnlyOnFinishedMove = 0x4f4; // char : 1
		constexpr auto bShouldBeVisibleInGame = 0x4f4; // char : 1
		constexpr auto bTickDuringGame = 0x4f4; // char : 1
		constexpr auto QueryingMode = 0x4f8; // EEnvQueryRunMode
		constexpr auto NavAgentProperties = 0x500; // FNavAgentProperties
	}

	namespace n_UWidget_DebugPlayerStates_C {
		constexpr auto Background = 0x230; // UButton*
		constexpr auto Image_1 = 0x238; // UImage*
		constexpr auto Image_2 = 0x240; // UImage*
		constexpr auto Image_3 = 0x248; // UImage*
		constexpr auto TextBox = 0x250; // UTextBlock*
	}

	namespace n_UHLLScrollZoom {
		constexpr auto ColorAndOpacityDelegate = 0x108; // FDelegate
		constexpr auto BrushDelegate = 0x118; // FDelegate
		constexpr auto Brush = 0x128; // FSlateBrush
		constexpr auto ColorAndOpacity = 0x1b0; // FLinearColor
		constexpr auto DrawSectorInfo = 0x1c0; // FDrawSectorInfo
		constexpr auto bDrawGridLines = 0x1d8; // bool
		constexpr auto bDrawSubGrid = 0x1d9; // bool
		constexpr auto bDrawGridShadow = 0x1da; // bool
		constexpr auto bAntiAliasGrid = 0x1db; // bool
		constexpr auto bDrawText = 0x1dc; // bool
		constexpr auto bDrawSectors = 0x1dd; // bool
		constexpr auto MaxZoom = 0x1e0; // float
		constexpr auto GridFont = 0x1e8; // FSlateFontInfo
		constexpr auto TopTextOffset = 0x238; // FVector2D
		constexpr auto LeftTextOffset = 0x240; // FVector2D
		constexpr auto MajorNumSegments = 0x248; // int32_t
		constexpr auto MajorLineThickness = 0x24c; // float
		constexpr auto MajorShadowThickness = 0x250; // float
		constexpr auto MajorLineColour = 0x254; // FLinearColor
		constexpr auto MajorShadowColour = 0x264; // FLinearColor
		constexpr auto MajorShadowOffset = 0x274; // FVector2D
		constexpr auto MinorNumSegments = 0x27c; // int32_t
		constexpr auto MinorLineThickness = 0x280; // float
		constexpr auto MinorLineColour = 0x284; // FLinearColor
		constexpr auto MinorMinZoom = 0x294; // float
	}

	namespace n_UBTNode {
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_ANavLinkProxy {
		constexpr auto PointLinks = 0x230; // TArray<FNavigationLink>
		constexpr auto SegmentLinks = 0x240; // TArray<FNavigationSegmentLink>
		constexpr auto SmartLinkComp = 0x250; // UNavLinkCustomComponent*
		constexpr auto bSmartLinkIsRelevant = 0x258; // bool
		constexpr auto OnSmartLinkReached = 0x260; // FMulticastInlineDelegate
	}

	namespace n_UWGT_BarracksPanel_V2_C {
		constexpr auto UberGraphFrame = 0x358; // FPointerToUberGraphFrame
		constexpr auto FadeInRightColumn = 0x360; // UWidgetAnimation*
		constexpr auto FadeInLeftColumn = 0x368; // UWidgetAnimation*
		constexpr auto Fade = 0x370; // UWidgetAnimation*
		constexpr auto TitleChange = 0x378; // UWidgetAnimation*
		constexpr auto RightPanelChange = 0x380; // UWidgetAnimation*
		constexpr auto ButtonPromptsInfo = 0x388; // UButtonPromptsInfo_V2_C*
		constexpr auto CharacterSpinSlider = 0x390; // USlider*
		constexpr auto CosmeticDetailsVBox = 0x398; // UVerticalBox*
		constexpr auto FactionSwitcher = 0x3a0; // UOptionButton_V2_C*
		constexpr auto HBox_Switcher = 0x3a8; // UHorizontalBox*
		constexpr auto LeftSBox = 0x3b0; // USizeBox*
		constexpr auto LoadoutTabbedButtonContainer = 0x3b8; // UTabbedButtonContainer_V2_C*
		constexpr auto RightSBox = 0x3c0; // USizeBox*
		constexpr auto RoleDetailsVBox = 0x3c8; // UVerticalBox*
		constexpr auto RoleTabbedButtonContainer = 0x3d0; // UTabbedButtonContainer_V2_C*
		constexpr auto SB_Roles = 0x3d8; // UScrollBox*
		constexpr auto TeamCategory = 0x3e0; // UTextBlock*
		constexpr auto MainMenu = 0x3e8; // UMainMenuWidget_V2_C*
		constexpr auto ButtonIndex = 0x3f0; // int32_t
		constexpr auto SelectedRole = 0x3f8; // UWGT_RoleSelectItem_V2_C*
		constexpr auto bFocusedOnRoles = 0x400; // bool
		constexpr auto MatchmakingScreen = 0x408; // UMatchmakingScreen_V2_C*
		constexpr auto bWasFocused = 0x410; // bool
		constexpr auto FactionIndex = 0x414; // int32_t
	}

	namespace n_UHTP_Widget_Role_Loadout_Assault_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_2 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x270; // UImage*
		constexpr auto Image_10 = 0x278; // UImage*
		constexpr auto Image_17 = 0x280; // UImage*
	}

	namespace n_UVoipMicCheckWidget {
		constexpr auto MicVolumeSlider = 0x230; // USlider*
		constexpr auto VoiceVolumeSlider = 0x238; // USlider*
		constexpr auto InputDevice = 0x240; // UComboBoxString*
		constexpr auto OutputDevice = 0x248; // UComboBoxString*
	}

	namespace n_USoundNodeMixer {
		constexpr auto InputVolume = 0x48; // TArray<float>
	}

	namespace n_ADecalActor {
		constexpr auto Decal = 0x220; // UDecalComponent*
	}

	namespace n_ULevelStreaming {
		constexpr auto WorldAsset = 0x28; // TSoftObjectPtr<UWorld>
		constexpr auto PackageNameToLoad = 0x50; // FName
		constexpr auto LODPackageNames = 0x58; // TArray<FName>
		constexpr auto LevelTransform = 0x80; // FTransform
		constexpr auto LevelLODIndex = 0xb0; // int32_t
		constexpr auto StreamingPriority = 0xb4; // int32_t
		constexpr auto bShouldBeVisible = 0xba; // char : 1
		constexpr auto bShouldBeLoaded = 0xba; // char : 1
		constexpr auto Blocked = 0xba; // char : 1
		constexpr auto bIsStatic = 0xba; // char : 1
		constexpr auto bShouldBlockOnLoad = 0xba; // char : 1
		constexpr auto bShouldBlockOnUnload = 0xbb; // char : 1
		constexpr auto bDisableDistanceStreaming = 0xbb; // char : 1
		constexpr auto bDrawOnLevelStatusMap = 0xbb; // char : 1
		constexpr auto LevelColor = 0xbc; // FLinearColor
		constexpr auto EditorStreamingVolumes = 0xd0; // TArray<ALevelStreamingVolume*>
		constexpr auto MinTimeBetweenVolumeUnloadRequests = 0xe0; // float
		constexpr auto OnLevelLoaded = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnLevelUnloaded = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnLevelShown = 0x108; // FMulticastInlineDelegate
		constexpr auto OnLevelHidden = 0x118; // FMulticastInlineDelegate
		constexpr auto LoadedLevel = 0x128; // ULevel*
		constexpr auto PendingUnloadLevel = 0x130; // ULevel*
	}

	namespace n_UMovieSceneAudioTrack {
		constexpr auto AudioSections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_UDistributionVectorUniformCurve {
		constexpr auto ConstantCurve = 0x38; // FInterpCurveTwoVectors
		constexpr auto bLockAxes1 = 0x50; // char : 1
		constexpr auto bLockAxes2 = 0x50; // char : 1
		constexpr auto LockedAxes = 0x54; // EDistributionVectorLockFlags [0x2]
		constexpr auto MirrorFlags = 0x56; // EDistributionVectorMirrorFlags [0x3]
		constexpr auto bUseExtremes = 0x5c; // char : 1
	}

	namespace n_UHLLUI_RoleItem {
		constexpr auto ParentPanel = 0x230; // TWeakObjectPtr<UHLLUI_CharacterSelection>
		constexpr auto Role = 0x238; // EPlayerRole
		constexpr auto FavouriteChecker = 0x240; // UCheckBox*
		constexpr auto RoleIcon = 0x248; // UImage*
		constexpr auto RoleName = 0x250; // UTextBlock*
		constexpr auto RoleLevel = 0x258; // UTextBlock*
		constexpr auto RoleLevelProgress = 0x260; // UProgressBar*
	}

	namespace n_UWBP_RoundSummaryKeyDetails_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto KeyDescription = 0x238; // UTextBlock*
		constexpr auto KeyImage = 0x240; // UImage*
		constexpr auto KeyTitle = 0x248; // UTextBlock*
		constexpr auto Image = 0x250; // UTexture2D*
		constexpr auto Title = 0x258; // FText
		constexpr auto Description = 0x270; // FText
	}

	namespace n_UGridPanel {
		constexpr auto ColumnFill = 0x120; // TArray<float>
		constexpr auto RowFill = 0x130; // TArray<float>
	}

	namespace n_UChat_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto FadeIn = 0x238; // UWidgetAnimation*
		constexpr auto Chat_Body = 0x240; // UOverlay*
		constexpr auto ChatLines = 0x248; // UScrollBox*
		constexpr auto CommandMessage = 0x250; // UChatMessage_C*
		constexpr auto MessageEntry = 0x258; // UChatLine_C*
		constexpr auto MaxChatLinesVisible = 0x260; // int32_t
		constexpr auto MaxCharactersPerLine = 0x264; // int32_t
		constexpr auto Chat_Hidden = 0x268; // bool
		constexpr auto CommanderMessageTimer = 0x270; // FTimerHandle
		constexpr auto CommanderMessageTime = 0x278; // float
	}

	namespace n_ACinematicTigerStub {
		constexpr auto TankMesh = 0x220; // USkeletalMeshComponent*
		constexpr auto AllLeftTrackTiles = 0x228; // TArray<UStaticMeshComponent*>
		constexpr auto AllRightTrackTiles = 0x238; // TArray<UStaticMeshComponent*>
		constexpr auto RightTrackTile_000 = 0x248; // UStaticMeshComponent*
		constexpr auto RightTrackTile_001 = 0x250; // UStaticMeshComponent*
		constexpr auto RightTrackTile_002 = 0x258; // UStaticMeshComponent*
		constexpr auto RightTrackTile_003 = 0x260; // UStaticMeshComponent*
		constexpr auto RightTrackTile_004 = 0x268; // UStaticMeshComponent*
		constexpr auto RightTrackTile_005 = 0x270; // UStaticMeshComponent*
		constexpr auto RightTrackTile_006 = 0x278; // UStaticMeshComponent*
		constexpr auto RightTrackTile_007 = 0x280; // UStaticMeshComponent*
		constexpr auto RightTrackTile_008 = 0x288; // UStaticMeshComponent*
		constexpr auto RightTrackTile_009 = 0x290; // UStaticMeshComponent*
		constexpr auto RightTrackTile_010 = 0x298; // UStaticMeshComponent*
		constexpr auto RightTrackTile_011 = 0x2a0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_012 = 0x2a8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_013 = 0x2b0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_014 = 0x2b8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_015 = 0x2c0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_016 = 0x2c8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_017 = 0x2d0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_018 = 0x2d8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_019 = 0x2e0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_020 = 0x2e8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_021 = 0x2f0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_022 = 0x2f8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_023 = 0x300; // UStaticMeshComponent*
		constexpr auto RightTrackTile_024 = 0x308; // UStaticMeshComponent*
		constexpr auto RightTrackTile_025 = 0x310; // UStaticMeshComponent*
		constexpr auto RightTrackTile_026 = 0x318; // UStaticMeshComponent*
		constexpr auto RightTrackTile_027 = 0x320; // UStaticMeshComponent*
		constexpr auto RightTrackTile_028 = 0x328; // UStaticMeshComponent*
		constexpr auto RightTrackTile_029 = 0x330; // UStaticMeshComponent*
		constexpr auto RightTrackTile_030 = 0x338; // UStaticMeshComponent*
		constexpr auto RightTrackTile_031 = 0x340; // UStaticMeshComponent*
		constexpr auto RightTrackTile_032 = 0x348; // UStaticMeshComponent*
		constexpr auto RightTrackTile_033 = 0x350; // UStaticMeshComponent*
		constexpr auto RightTrackTile_034 = 0x358; // UStaticMeshComponent*
		constexpr auto RightTrackTile_035 = 0x360; // UStaticMeshComponent*
		constexpr auto RightTrackTile_036 = 0x368; // UStaticMeshComponent*
		constexpr auto RightTrackTile_037 = 0x370; // UStaticMeshComponent*
		constexpr auto RightTrackTile_038 = 0x378; // UStaticMeshComponent*
		constexpr auto RightTrackTile_039 = 0x380; // UStaticMeshComponent*
		constexpr auto RightTrackTile_040 = 0x388; // UStaticMeshComponent*
		constexpr auto RightTrackTile_041 = 0x390; // UStaticMeshComponent*
		constexpr auto RightTrackTile_042 = 0x398; // UStaticMeshComponent*
		constexpr auto RightTrackTile_043 = 0x3a0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_044 = 0x3a8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_045 = 0x3b0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_046 = 0x3b8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_047 = 0x3c0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_048 = 0x3c8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_049 = 0x3d0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_050 = 0x3d8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_051 = 0x3e0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_052 = 0x3e8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_053 = 0x3f0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_054 = 0x3f8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_055 = 0x400; // UStaticMeshComponent*
		constexpr auto RightTrackTile_056 = 0x408; // UStaticMeshComponent*
		constexpr auto RightTrackTile_057 = 0x410; // UStaticMeshComponent*
		constexpr auto RightTrackTile_058 = 0x418; // UStaticMeshComponent*
		constexpr auto RightTrackTile_059 = 0x420; // UStaticMeshComponent*
		constexpr auto RightTrackTile_060 = 0x428; // UStaticMeshComponent*
		constexpr auto RightTrackTile_061 = 0x430; // UStaticMeshComponent*
		constexpr auto RightTrackTile_062 = 0x438; // UStaticMeshComponent*
		constexpr auto RightTrackTile_063 = 0x440; // UStaticMeshComponent*
		constexpr auto RightTrackTile_064 = 0x448; // UStaticMeshComponent*
		constexpr auto RightTrackTile_065 = 0x450; // UStaticMeshComponent*
		constexpr auto RightTrackTile_066 = 0x458; // UStaticMeshComponent*
		constexpr auto RightTrackTile_067 = 0x460; // UStaticMeshComponent*
		constexpr auto RightTrackTile_068 = 0x468; // UStaticMeshComponent*
		constexpr auto RightTrackTile_069 = 0x470; // UStaticMeshComponent*
		constexpr auto RightTrackTile_070 = 0x478; // UStaticMeshComponent*
		constexpr auto RightTrackTile_071 = 0x480; // UStaticMeshComponent*
		constexpr auto RightTrackTile_072 = 0x488; // UStaticMeshComponent*
		constexpr auto RightTrackTile_073 = 0x490; // UStaticMeshComponent*
		constexpr auto RightTrackTile_074 = 0x498; // UStaticMeshComponent*
		constexpr auto RightTrackTile_075 = 0x4a0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_076 = 0x4a8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_077 = 0x4b0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_078 = 0x4b8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_079 = 0x4c0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_080 = 0x4c8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_081 = 0x4d0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_082 = 0x4d8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_083 = 0x4e0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_084 = 0x4e8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_085 = 0x4f0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_086 = 0x4f8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_087 = 0x500; // UStaticMeshComponent*
		constexpr auto RightTrackTile_088 = 0x508; // UStaticMeshComponent*
		constexpr auto RightTrackTile_089 = 0x510; // UStaticMeshComponent*
		constexpr auto RightTrackTile_090 = 0x518; // UStaticMeshComponent*
		constexpr auto RightTrackTile_091 = 0x520; // UStaticMeshComponent*
		constexpr auto RightTrackTile_092 = 0x528; // UStaticMeshComponent*
		constexpr auto RightTrackTile_093 = 0x530; // UStaticMeshComponent*
		constexpr auto RightTrackTile_094 = 0x538; // UStaticMeshComponent*
		constexpr auto RightTrackTile_095 = 0x540; // UStaticMeshComponent*
		constexpr auto RightTrackTile_096 = 0x548; // UStaticMeshComponent*
		constexpr auto RightTrackTile_097 = 0x550; // UStaticMeshComponent*
		constexpr auto RightTrackTile_098 = 0x558; // UStaticMeshComponent*
		constexpr auto RightTrackTile_099 = 0x560; // UStaticMeshComponent*
		constexpr auto RightTrackTile_101 = 0x568; // UStaticMeshComponent*
		constexpr auto RightTrackTile_102 = 0x570; // UStaticMeshComponent*
		constexpr auto RightTrackTile_103 = 0x578; // UStaticMeshComponent*
		constexpr auto RightTrackTile_104 = 0x580; // UStaticMeshComponent*
		constexpr auto RightTrackTile_105 = 0x588; // UStaticMeshComponent*
		constexpr auto RightTrackTile_106 = 0x590; // UStaticMeshComponent*
		constexpr auto RightTrackTile_107 = 0x598; // UStaticMeshComponent*
		constexpr auto RightTrackTile_108 = 0x5a0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_109 = 0x5a8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_110 = 0x5b0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_111 = 0x5b8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_112 = 0x5c0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_113 = 0x5c8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_114 = 0x5d0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_115 = 0x5d8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_000 = 0x5e0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_001 = 0x5e8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_002 = 0x5f0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_003 = 0x5f8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_004 = 0x600; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_005 = 0x608; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_006 = 0x610; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_007 = 0x618; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_008 = 0x620; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_009 = 0x628; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_010 = 0x630; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_011 = 0x638; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_012 = 0x640; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_013 = 0x648; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_014 = 0x650; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_015 = 0x658; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_016 = 0x660; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_017 = 0x668; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_018 = 0x670; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_019 = 0x678; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_020 = 0x680; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_021 = 0x688; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_022 = 0x690; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_023 = 0x698; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_024 = 0x6a0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_025 = 0x6a8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_026 = 0x6b0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_027 = 0x6b8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_028 = 0x6c0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_029 = 0x6c8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_030 = 0x6d0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_031 = 0x6d8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_032 = 0x6e0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_033 = 0x6e8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_034 = 0x6f0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_035 = 0x6f8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_036 = 0x700; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_037 = 0x708; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_038 = 0x710; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_039 = 0x718; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_040 = 0x720; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_041 = 0x728; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_042 = 0x730; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_043 = 0x738; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_044 = 0x740; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_045 = 0x748; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_046 = 0x750; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_047 = 0x758; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_048 = 0x760; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_049 = 0x768; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_050 = 0x770; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_051 = 0x778; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_052 = 0x780; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_053 = 0x788; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_054 = 0x790; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_055 = 0x798; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_056 = 0x7a0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_057 = 0x7a8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_058 = 0x7b0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_059 = 0x7b8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_060 = 0x7c0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_061 = 0x7c8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_062 = 0x7d0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_063 = 0x7d8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_064 = 0x7e0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_065 = 0x7e8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_066 = 0x7f0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_067 = 0x7f8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_068 = 0x800; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_069 = 0x808; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_070 = 0x810; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_071 = 0x818; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_072 = 0x820; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_073 = 0x828; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_074 = 0x830; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_075 = 0x838; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_076 = 0x840; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_077 = 0x848; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_078 = 0x850; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_079 = 0x858; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_080 = 0x860; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_081 = 0x868; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_082 = 0x870; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_083 = 0x878; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_084 = 0x880; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_085 = 0x888; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_086 = 0x890; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_087 = 0x898; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_088 = 0x8a0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_089 = 0x8a8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_090 = 0x8b0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_091 = 0x8b8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_092 = 0x8c0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_093 = 0x8c8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_094 = 0x8d0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_095 = 0x8d8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_096 = 0x8e0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_097 = 0x8e8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_098 = 0x8f0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_099 = 0x8f8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_101 = 0x900; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_102 = 0x908; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_103 = 0x910; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_104 = 0x918; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_105 = 0x920; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_106 = 0x928; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_107 = 0x930; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_108 = 0x938; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_109 = 0x940; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_110 = 0x948; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_111 = 0x950; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_112 = 0x958; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_113 = 0x960; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_114 = 0x968; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_115 = 0x970; // UStaticMeshComponent*
	}

	namespace n_UWGT_UseContext_MountMG_C {
		constexpr auto UberGraphFrame = 0x240; // FPointerToUberGraphFrame
	}

	namespace n_UMaterialExpressionStaticComponentMaskParameter {
		constexpr auto Input = 0x58; // FExpressionInput
		constexpr auto DefaultR = 0x6c; // char : 1
		constexpr auto DefaultG = 0x6c; // char : 1
		constexpr auto DefaultB = 0x6c; // char : 1
		constexpr auto DefaultA = 0x6c; // char : 1
	}

	namespace n_UHLLWeaponCasingSettings {
		constexpr auto CasingEjectSounds = 0x30; // FSurfaceSounds
		constexpr auto CasingEjectSoundOffset = 0x188; // FVector
		constexpr auto CasingEjectDelay_Prone = 0x194; // float
		constexpr auto CasingEjectDelay_Crouched = 0x198; // float
		constexpr auto CasingEjectDelay_Standing = 0x19c; // float
		constexpr auto MinTimeBetweenCasingEjectSound = 0x1a0; // float
		constexpr auto CasingEjectCullDistance = 0x1a4; // float
		constexpr auto MaxSimultaneousCasings = 0x1a8; // char
		constexpr auto SimultaneousCasingMaxRandomDelay = 0x1ac; // float
		constexpr auto SimultaneousCasingMaxRandomOffset = 0x1b0; // float
	}

	namespace n_UHLLScopeImage {
		constexpr auto VisibilityWhenUnloaded = 0x210; // ESlateVisibility
	}

	namespace n_UMultiLineEditableTextBox {
		constexpr auto Text = 0x128; // FText
		constexpr auto HintText = 0x140; // FText
		constexpr auto HintTextDelegate = 0x158; // FDelegate
		constexpr auto WidgetStyle = 0x168; // FEditableTextBoxStyle
		constexpr auto TextStyle = 0x958; // FTextBlockStyle
		constexpr auto bIsReadOnly = 0xbc0; // bool
		constexpr auto AllowContextMenu = 0xbc1; // bool
		constexpr auto VirtualKeyboardOptions = 0xbc2; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardDismissAction = 0xbc3; // EVirtualKeyboardDismissAction
		constexpr auto Style = 0xbc8; // USlateWidgetStyleAsset*
		constexpr auto Font = 0xbd0; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xc20; // FLinearColor
		constexpr auto BackgroundColor = 0xc30; // FLinearColor
		constexpr auto ReadOnlyForegroundColor = 0xc40; // FLinearColor
		constexpr auto OnTextChanged = 0xc50; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0xc60; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleTypeDataBeam2 {
		constexpr auto BeamMethod = 0x30; // EBeam2Method
		constexpr auto TextureTile = 0x34; // int32_t
		constexpr auto TextureTileDistance = 0x38; // float
		constexpr auto Sheets = 0x3c; // int32_t
		constexpr auto MaxBeamCount = 0x40; // int32_t
		constexpr auto Speed = 0x44; // float
		constexpr auto InterpolationPoints = 0x48; // int32_t
		constexpr auto bAlwaysOn = 0x4c; // char : 1
		constexpr auto UpVectorStepSize = 0x50; // int32_t
		constexpr auto BranchParentName = 0x54; // FName
		constexpr auto Distance = 0x60; // FRawDistributionFloat
		constexpr auto TaperMethod = 0x90; // EBeamTaperMethod
		constexpr auto TaperFactor = 0x98; // FRawDistributionFloat
		constexpr auto TaperScale = 0xc8; // FRawDistributionFloat
		constexpr auto RenderGeometry = 0xf8; // char : 1
		constexpr auto RenderDirectLine = 0xf8; // char : 1
		constexpr auto RenderLines = 0xf8; // char : 1
		constexpr auto RenderTessellation = 0xf8; // char : 1
	}

	namespace n_APointLight {
		constexpr auto PointLightComponent = 0x230; // UPointLightComponent*
	}

	namespace n_UEndpointSubmix {
		constexpr auto EndpointType = 0x38; // FName
		constexpr auto EndpointSettingsClass = 0x40; // UAudioEndpointSettingsBase*
		constexpr auto EndpointSettings = 0x48; // UAudioEndpointSettingsBase*
	}

	namespace n_UWrapBox {
		constexpr auto InnerSlotPadding = 0x120; // FVector2D
		constexpr auto WrapWidth = 0x128; // float
		constexpr auto bExplicitWrapWidth = 0x12c; // bool
	}

	namespace n_UHierarchicalInstancedStaticMeshComponent {
		constexpr auto SortedInstances = 0x558; // TArray<int32_t>
		constexpr auto NumBuiltInstances = 0x568; // int32_t
		constexpr auto BuiltInstanceBounds = 0x570; // FBox
		constexpr auto UnbuiltInstanceBounds = 0x58c; // FBox
		constexpr auto UnbuiltInstanceBoundsList = 0x5a8; // TArray<FBox>
		constexpr auto bEnableDensityScaling = 0x5b8; // char : 1
		constexpr auto OcclusionLayerNumNodes = 0x5c0; // int32_t
		constexpr auto CacheMeshExtendedBounds = 0x5c4; // FBoxSphereBounds
		constexpr auto bDisableCollision = 0x5e0; // bool
		constexpr auto InstanceCountToRender = 0x5e4; // int32_t
	}

	namespace n_UFont {
		constexpr auto FontCacheType = 0x30; // EFontCacheType
		constexpr auto Characters = 0x38; // TArray<FFontCharacter>
		constexpr auto Textures = 0x48; // TArray<UTexture2D*>
		constexpr auto IsRemapped = 0x58; // int32_t
		constexpr auto EmScale = 0x5c; // float
		constexpr auto Ascent = 0x60; // float
		constexpr auto Descent = 0x64; // float
		constexpr auto Leading = 0x68; // float
		constexpr auto Kerning = 0x6c; // int32_t
		constexpr auto ImportOptions = 0x70; // FFontImportOptionsData
		constexpr auto NumCharacters = 0x120; // int32_t
		constexpr auto MaxCharHeight = 0x128; // TArray<int32_t>
		constexpr auto ScalingFactor = 0x138; // float
		constexpr auto LegacyFontSize = 0x13c; // int32_t
		constexpr auto LegacyFontName = 0x140; // FName
		constexpr auto CompositeFont = 0x148; // FCompositeFont
	}

	namespace n_USoundNodeVehicleEngine {
		constexpr auto bEqualPowerCrossfade = 0x48; // char : 1
		constexpr auto EngineSamples = 0x50; // TArray<FVehicleEngineDatum>
		constexpr auto CurrentRPM = 0x64; // float
	}

	namespace n_UUIClassSelector {
		constexpr auto DefaultClasses = 0x30; // FUIClassCollection
	}

	namespace n_UMeshComponent {
		constexpr auto OverrideMaterials = 0x410; // TArray<UMaterialInterface*>
		constexpr auto bEnableMaterialParameterCaching = 0x430; // char : 1
	}

	namespace n_UHorizontalBoxSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto Size = 0x50; // FSlateChildSize
		constexpr auto HorizontalAlignment = 0x58; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x59; // EVerticalAlignment
	}

	namespace n_UInterpFilter {
		constexpr auto Caption = 0x28; // FString
	}

	namespace n_UWGT_RoundSummary_C {
		constexpr auto GroupPhotoSlot = 0x2e8; // UNamedSlot*
		constexpr auto Image_1 = 0x2f0; // UImage*
		constexpr auto Image_2 = 0x2f8; // UImage*
		constexpr auto Image_3 = 0x300; // UImage*
		constexpr auto Image_4 = 0x308; // UImage*
		constexpr auto WGT_GroupPhoto = 0x310; // UWGT_GroupPhoto_C*
	}

	namespace n_UInterpTrackToggle {
		constexpr auto ToggleTrack = 0x70; // TArray<FToggleTrackKey>
		constexpr auto bActivateSystemEachUpdate = 0x80; // char : 1
		constexpr auto bActivateWithJustAttachedFlag = 0x80; // char : 1
		constexpr auto bFireEventsWhenForwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x80; // char : 1
	}

	namespace n_ABoatSpawnPath {
		constexpr auto SpawnGroup = 0x220; // int32_t
		constexpr auto PathSpline = 0x228; // USplineComponent*
	}

	namespace n_UVehicleDriverSeatUI {
		constexpr auto RPMSmoothingAlpha = 0x270; // float
		constexpr auto IdleRPM = 0x274; // float
		constexpr auto SpeedSmoothingAlpha = 0x280; // float
		constexpr auto Speedometer = 0x288; // UHLLDial_Speedometer*
		constexpr auto Tachometer = 0x290; // UHLLDial_Tachometer*
		constexpr auto EngineProgressPanel = 0x298; // UPanelWidget*
		constexpr auto EngineProgressTextSwitcher = 0x2a0; // UWidgetSwitcher*
		constexpr auto Starting = 0x2a8; // UTextBlock*
		constexpr auto Stopping = 0x2b0; // UTextBlock*
		constexpr auto EngineProgressWheel = 0x2b8; // UImage*
		constexpr auto EngineKeyText = 0x2c0; // URichTextBlock*
		constexpr auto GearKeyText = 0x2c8; // URichTextBlock*
	}

	namespace n_UAssetExportTask {
		constexpr auto Object = 0x28; // UObject*
		constexpr auto Exporter = 0x30; // UExporter*
		constexpr auto Filename = 0x38; // FString
		constexpr auto bSelected = 0x48; // bool
		constexpr auto bReplaceIdentical = 0x49; // bool
		constexpr auto bPrompt = 0x4a; // bool
		constexpr auto bAutomated = 0x4b; // bool
		constexpr auto bUseFileArchive = 0x4c; // bool
		constexpr auto bWriteEmptyFiles = 0x4d; // bool
		constexpr auto IgnoreObjectList = 0x50; // TArray<UObject*>
		constexpr auto Options = 0x60; // UObject*
		constexpr auto Errors = 0x68; // TArray<FString>
	}

	namespace n_UInterpData {
		constexpr auto InterpLength = 0x28; // float
		constexpr auto PathBuildTime = 0x2c; // float
		constexpr auto InterpGroups = 0x30; // TArray<UInterpGroup*>
		constexpr auto CurveEdSetup = 0x40; // UInterpCurveEdSetup*
		constexpr auto EdSectionStart = 0x48; // float
		constexpr auto EdSectionEnd = 0x4c; // float
		constexpr auto bShouldBakeAndPrune = 0x50; // char : 1
		constexpr auto CachedDirectorGroup = 0x58; // UInterpGroupDirector*
		constexpr auto AllEventNames = 0x60; // TArray<FName>
	}

	namespace n_UReconDriverSeatUI {
		constexpr auto TankTurretImage = 0x2d0; // UImage*
	}

	namespace n_ULandscapeMaterialInstanceConstant {
		constexpr auto TextureStreamingInfo = 0x410; // TArray<FLandscapeMaterialTextureStreamingInfo>
		constexpr auto bIsLayerThumbnail = 0x420; // char : 1
		constexpr auto bDisableTessellation = 0x420; // char : 1
		constexpr auto bMobile = 0x420; // char : 1
		constexpr auto bEditorToolUsage = 0x420; // char : 1
	}

	namespace n_UHLLRadialMenu_Base {
		constexpr auto SeparatorClass = 0x230; // UHLLRadialMenu_Separator*
		constexpr auto SelectionDeadzone = 0x238; // float
		constexpr auto bLimitRadialSelection = 0x23c; // char : 1
		constexpr auto bShowMouseWhenOpen = 0x23c; // char : 1
		constexpr auto SelectionMaxRadiusInflation = 0x240; // float
		constexpr auto OpenedSound = 0x248; // FSlateSound
		constexpr auto ClosedSound = 0x260; // FSlateSound
		constexpr auto ClosedAndExecuteSuccessSound = 0x278; // FSlateSound
		constexpr auto ClosedAndExecuteFailedSound = 0x290; // FSlateSound
		constexpr auto Segments = 0x2c0; // TArray<UHLLRadialMenu_Segment*>
		constexpr auto Separators = 0x2d0; // TArray<UHLLRadialMenu_Separator*>
		constexpr auto bIsShown = 0x2e0; // char : 1
		constexpr auto SegmentContainer = 0x2e8; // UOverlay*
		constexpr auto SeparatorContainer = 0x2f0; // UOverlay*
		constexpr auto Arrow = 0x2f8; // UImage*
		constexpr auto ToggleAnimation = 0x300; // UWidgetAnimation*
	}

	namespace n_UEditableGameplayTagQueryExpression_AllTagsMatch {
		constexpr auto Tags = 0x28; // FGameplayTagContainer
	}

	namespace n_UInterpTrackDirector {
		constexpr auto CutTrack = 0x70; // TArray<FDirectorTrackCut>
		constexpr auto bSimulateCameraCutsOnClients = 0x80; // char : 1
	}

	namespace n_UMasterAudioSubmixCaptureProtocol {
		constexpr auto Filename = 0x58; // FString
	}

	namespace n_UDistributionFloat {
		constexpr auto bCanBeBaked = 0x30; // char : 1
		constexpr auto bBakedDataSuccesfully = 0x30; // char : 1
	}

	namespace n_UMapBuildDataRegistry {
		constexpr auto LevelLightingQuality = 0x28; // ELightingBuildQuality
	}

	namespace n_UParticleModuleAttractorPoint {
		constexpr auto Position = 0x30; // FRawDistributionVector
		constexpr auto Range = 0x78; // FRawDistributionFloat
		constexpr auto Strength = 0xa8; // FRawDistributionFloat
		constexpr auto StrengthByDistance = 0xd8; // char : 1
		constexpr auto bAffectBaseVelocity = 0xd8; // char : 1
		constexpr auto bOverrideVelocity = 0xd8; // char : 1
		constexpr auto bUseWorldSpacePosition = 0xd8; // char : 1
		constexpr auto Positive_X = 0xd8; // char : 1
		constexpr auto Positive_Y = 0xd8; // char : 1
		constexpr auto Positive_Z = 0xd8; // char : 1
		constexpr auto Negative_X = 0xd8; // char : 1
		constexpr auto Negative_Y = 0xd9; // char : 1
		constexpr auto Negative_Z = 0xd9; // char : 1
	}

	namespace n_UWGT_UseContext_LetGo_C {
		constexpr auto UberGraphFrame = 0x250; // FPointerToUberGraphFrame
		constexpr auto Pulse = 0x258; // UWidgetAnimation*
		constexpr auto Image_1 = 0x260; // UImage*
	}

	namespace n_UHLLUI_CreditsCategory_Department {
		constexpr auto TitleText = 0x230; // UTextBlock*
	}

	namespace n_UMaterialExpressionDotProduct {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
	}

	namespace n_UListView {
		constexpr auto Orientation = 0x2d8; // EOrientation
		constexpr auto SelectionMode = 0x2d9; // ESelectionMode
		constexpr auto ConsumeMouseWheel = 0x2da; // EConsumeMouseWheel
		constexpr auto bClearSelectionOnClick = 0x2db; // bool
		constexpr auto bIsFocusable = 0x2dc; // bool
		constexpr auto EntrySpacing = 0x2e0; // float
		constexpr auto bReturnFocusToSelection = 0x2e4; // bool
		constexpr auto ListItems = 0x2e8; // TArray<UObject*>
		constexpr auto BP_OnEntryInitialized = 0x308; // FMulticastInlineDelegate
		constexpr auto BP_OnItemClicked = 0x318; // FMulticastInlineDelegate
		constexpr auto BP_OnItemDoubleClicked = 0x328; // FMulticastInlineDelegate
		constexpr auto BP_OnItemIsHoveredChanged = 0x338; // FMulticastInlineDelegate
		constexpr auto BP_OnItemSelectionChanged = 0x348; // FMulticastInlineDelegate
		constexpr auto BP_OnItemScrolledIntoView = 0x358; // FMulticastInlineDelegate
	}

	namespace n_UProceduralFoliageTile {
		constexpr auto FoliageSpawner = 0x28; // UProceduralFoliageSpawner*
		constexpr auto InstancesArray = 0xd0; // TArray<FProceduralFoliageInstance>
	}

	namespace n_UParticleModuleMeshMaterial {
		constexpr auto MeshMaterials = 0x30; // TArray<UMaterialInterface*>
	}

	namespace n_AInteractiveFoliageActor {
		constexpr auto CapsuleComponent = 0x230; // UCapsuleComponent*
		constexpr auto TouchingActorEntryPosition = 0x238; // FVector
		constexpr auto FoliageVelocity = 0x244; // FVector
		constexpr auto FoliageForce = 0x250; // FVector
		constexpr auto FoliagePosition = 0x25c; // FVector
		constexpr auto FoliageDamageImpulseScale = 0x268; // float
		constexpr auto FoliageTouchImpulseScale = 0x26c; // float
		constexpr auto FoliageStiffness = 0x270; // float
		constexpr auto FoliageStiffnessQuadratic = 0x274; // float
		constexpr auto FoliageDamping = 0x278; // float
		constexpr auto MaxDamageImpulse = 0x27c; // float
		constexpr auto MaxTouchImpulse = 0x280; // float
		constexpr auto MaxForce = 0x284; // float
		constexpr auto Mass = 0x288; // float
	}

	namespace n_UMovieScene {
		constexpr auto Spawnables = 0x50; // TArray<FMovieSceneSpawnable>
		constexpr auto Possessables = 0x60; // TArray<FMovieScenePossessable>
		constexpr auto ObjectBindings = 0x70; // TArray<FMovieSceneBinding>
		constexpr auto BindingGroups = 0x80; // TMap<FName, FMovieSceneObjectBindingIDs>
		constexpr auto MasterTracks = 0xd0; // TArray<UMovieSceneTrack*>
		constexpr auto CameraCutTrack = 0xe0; // UMovieSceneTrack*
		constexpr auto SelectionRange = 0xe8; // FMovieSceneFrameRange
		constexpr auto PlaybackRange = 0xf8; // FMovieSceneFrameRange
		constexpr auto TickResolution = 0x108; // FFrameRate
		constexpr auto DisplayRate = 0x110; // FFrameRate
		constexpr auto EvaluationType = 0x118; // EMovieSceneEvaluationType
		constexpr auto ClockSource = 0x119; // EUpdateClockSource
		constexpr auto CustomClockSourcePath = 0x120; // FSoftObjectPath
		constexpr auto MarkedFrames = 0x138; // TArray<FMovieSceneMarkedFrame>
	}

	namespace n_AController {
		constexpr auto PlayerState = 0x228; // APlayerState*
		constexpr auto OnInstigatedAnyDamage = 0x238; // FMulticastInlineDelegate
		constexpr auto StateName = 0x248; // FName
		constexpr auto Pawn = 0x250; // APawn*
		constexpr auto Character = 0x260; // ACharacter*
		constexpr auto TransformComponent = 0x268; // USceneComponent*
		constexpr auto ControlRotation = 0x288; // FRotator
		constexpr auto bAttachToPawn = 0x294; // char : 1
	}

	namespace n_UMaterialExpressionTextureProperty {
		constexpr auto TextureObject = 0x40; // FExpressionInput
		constexpr auto Property = 0x54; // EMaterialExposedTextureProperty
	}

	namespace n_UMediaPlayer {
		constexpr auto OnEndReached = 0x28; // FMulticastInlineDelegate
		constexpr auto OnMediaClosed = 0x38; // FMulticastInlineDelegate
		constexpr auto OnMediaOpened = 0x48; // FMulticastInlineDelegate
		constexpr auto OnMediaOpenFailed = 0x58; // FMulticastInlineDelegate
		constexpr auto OnPlaybackResumed = 0x68; // FMulticastInlineDelegate
		constexpr auto OnPlaybackSuspended = 0x78; // FMulticastInlineDelegate
		constexpr auto OnSeekCompleted = 0x88; // FMulticastInlineDelegate
		constexpr auto OnTracksChanged = 0x98; // FMulticastInlineDelegate
		constexpr auto CacheAhead = 0xa8; // FTimespan
		constexpr auto CacheBehind = 0xb0; // FTimespan
		constexpr auto CacheBehindGame = 0xb8; // FTimespan
		constexpr auto NativeAudioOut = 0xc0; // bool
		constexpr auto PlayOnOpen = 0xc1; // bool
		constexpr auto Shuffle = 0xc4; // char : 1
		constexpr auto Loop = 0xc4; // char : 1
		constexpr auto Playlist = 0xc8; // UMediaPlaylist*
		constexpr auto PlaylistIndex = 0xd0; // int32_t
		constexpr auto TimeDelay = 0xd8; // FTimespan
		constexpr auto HorizontalFieldOfView = 0xe0; // float
		constexpr auto VerticalFieldOfView = 0xe4; // float
		constexpr auto ViewRotation = 0xe8; // FRotator
		constexpr auto PlayerGuid = 0x120; // FGuid
	}

	namespace n_UMovieSceneEventTrack {
		constexpr auto bFireEventsWhenForwards = 0x58; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x58; // char : 1
		constexpr auto EventPosition = 0x5c; // EFireEventsAtPosition
		constexpr auto EventReceivers = 0x60; // TArray<FMovieSceneObjectBindingID>
		constexpr auto Sections = 0x70; // TArray<UMovieSceneSection*>
	}

	namespace n_AHLLPlanes {
		constexpr auto FollowSpline = 0x220; // USplineComponent*
		constexpr auto PlaneMesh = 0x228; // UStaticMeshComponent*
		constexpr auto PlaneAudio = 0x230; // UAudioComponent*
		constexpr auto PlaneTransform = 0x238; // USceneComponent*
		constexpr auto MovementSpeed = 0x240; // float
		constexpr auto MovementTime = 0x244; // float
	}

	namespace n_UMaterialExpressionDDY {
		constexpr auto Value = 0x40; // FExpressionInput
	}

	namespace n_UHLLUI_LoadoutTooltip {
		constexpr auto ItemName = 0x230; // UTextBlock*
		constexpr auto RequirementText = 0x238; // UTextBlock*
		constexpr auto ViewportClient = 0x240; // UShooterGameViewportClient*
	}

	namespace n_UAIPerceptionSystem {
		constexpr auto Senses = 0x88; // TArray<UAISense*>
		constexpr auto PerceptionAgingRate = 0x98; // float
	}

	namespace n_AShermanJumbo {
		constexpr auto Tracks2 = 0x5d8; // UTracksComponent*
	}

	namespace n_UInterpTrackInstVectorProp {
		constexpr auto ResetVector = 0x58; // FVector
	}

	namespace n_UMovieSceneFloatSection {
		constexpr auto FloatCurve = 0xe0; // FMovieSceneFloatChannel
	}

	namespace n_UMaterialExpressionPerInstanceCustomData {
		constexpr auto DefaultValue = 0x40; // FExpressionInput
		constexpr auto ConstDefaultValue = 0x54; // float
		constexpr auto DataIndex = 0x58; // uint32_t
	}

	namespace n_UMaterialExpressionTangent {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto Period = 0x54; // float
	}

	namespace n_UPlanarReflectionComponent {
		constexpr auto PreviewBox = 0x288; // UBoxComponent*
		constexpr auto NormalDistortionStrength = 0x290; // float
		constexpr auto PrefilterRoughness = 0x294; // float
		constexpr auto PrefilterRoughnessDistance = 0x298; // float
		constexpr auto ScreenPercentage = 0x29c; // int32_t
		constexpr auto ExtraFOV = 0x2a0; // float
		constexpr auto DistanceFromPlaneFadeStart = 0x2a4; // float
		constexpr auto DistanceFromPlaneFadeEnd = 0x2a8; // float
		constexpr auto DistanceFromPlaneFadeoutStart = 0x2ac; // float
		constexpr auto DistanceFromPlaneFadeoutEnd = 0x2b0; // float
		constexpr auto AngleFromPlaneFadeStart = 0x2b4; // float
		constexpr auto AngleFromPlaneFadeEnd = 0x2b8; // float
		constexpr auto bShowPreviewPlane = 0x2bc; // bool
		constexpr auto bRenderSceneTwoSided = 0x2bd; // bool
	}

	namespace n_UARTrackedGeometry {
		constexpr auto UniqueId = 0x28; // FGuid
		constexpr auto LocalToTrackingTransform = 0x40; // FTransform
		constexpr auto LocalToAlignedTrackingTransform = 0x70; // FTransform
		constexpr auto TrackingState = 0xa0; // EARTrackingState
		constexpr auto UnderlyingMesh = 0xb0; // UMRMeshComponent*
		constexpr auto ObjectClassification = 0xb8; // EARObjectClassification
		constexpr auto LastUpdateFrameNumber = 0xd0; // int32_t
		constexpr auto DebugName = 0xe0; // FName
	}

	namespace n_UMaterialExpressionAntialiasedTextureMask {
		constexpr auto Threshold = 0xf0; // float
		constexpr auto Channel = 0xf4; // ETextureColorChannel
	}

	namespace n_UCurveLinearColor {
		constexpr auto FloatCurves = 0x30; // FRichCurve [0x4]
		constexpr auto AdjustHue = 0x230; // float
		constexpr auto AdjustSaturation = 0x234; // float
		constexpr auto AdjustBrightness = 0x238; // float
		constexpr auto AdjustBrightnessCurve = 0x23c; // float
		constexpr auto AdjustVibrance = 0x240; // float
		constexpr auto AdjustMinAlpha = 0x244; // float
		constexpr auto AdjustMaxAlpha = 0x248; // float
	}

	namespace n_UPhysicsHandleComponent {
		constexpr auto GrabbedComponent = 0xb0; // UPrimitiveComponent*
		constexpr auto bSoftAngularConstraint = 0xc0; // char : 1
		constexpr auto bSoftLinearConstraint = 0xc0; // char : 1
		constexpr auto bInterpolateTarget = 0xc0; // char : 1
		constexpr auto LinearDamping = 0xc4; // float
		constexpr auto LinearStiffness = 0xc8; // float
		constexpr auto AngularDamping = 0xcc; // float
		constexpr auto AngularStiffness = 0xd0; // float
		constexpr auto InterpolationSpeed = 0x140; // float
	}

	namespace n_UWGT_LoadoutEntry_Large_C {
		constexpr auto RootSizer = 0x268; // USizeBox*
	}

	namespace n_AMainMenuLogic_C {
		constexpr auto UberGraphFrame = 0x220; // FPointerToUberGraphFrame
		constexpr auto DefaultSceneRoot = 0x228; // USceneComponent*
		constexpr auto InputListeners = 0x230; // TArray<TScriptInterface<IKeyBindingInputProviderListener>>
	}

	namespace n_UWGT_UseContext_BandageSelf_C {
		constexpr auto UberGraphFrame = 0x360; // FPointerToUberGraphFrame
	}

	namespace n_UEnvQueryTest_Trace {
		constexpr auto TraceData = 0x1f8; // FEnvTraceData
		constexpr auto TraceFromContext = 0x228; // FAIDataProviderBoolValue
		constexpr auto ItemHeightOffset = 0x260; // FAIDataProviderFloatValue
		constexpr auto ContextHeightOffset = 0x298; // FAIDataProviderFloatValue
		constexpr auto Context = 0x2d0; // UEnvQueryContext*
	}

	namespace n_URichTextBlock {
		constexpr auto Text = 0x128; // FText
		constexpr auto TextStyleSet = 0x140; // UDataTable*
		constexpr auto DecoratorClasses = 0x148; // TArray<URichTextBlockDecorator*>
		constexpr auto bOverrideDefaultStyle = 0x158; // bool
		constexpr auto DefaultTextStyleOverride = 0x160; // FTextBlockStyle
		constexpr auto MinDesiredWidth = 0x3c8; // float
		constexpr auto InstanceDecorators = 0x638; // TArray<URichTextBlockDecorator*>
	}

	namespace n_UMaterialExpressionSphereMask {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto Radius = 0x68; // FExpressionInput
		constexpr auto Hardness = 0x7c; // FExpressionInput
		constexpr auto AttenuationRadius = 0x90; // float
		constexpr auto HardnessPercent = 0x94; // float
	}

	namespace n_UCameraAnim {
		constexpr auto CameraInterpGroup = 0x28; // UInterpGroup*
		constexpr auto AnimLength = 0x30; // float
		constexpr auto BoundingBox = 0x34; // FBox
		constexpr auto bRelativeToInitialTransform = 0x50; // char : 1
		constexpr auto bRelativeToInitialFOV = 0x50; // char : 1
		constexpr auto BaseFOV = 0x54; // float
		constexpr auto BasePostProcessSettings = 0x60; // FPostProcessSettings
		constexpr auto BasePostProcessBlendWeight = 0x5a0; // float
	}

	namespace n_UHLLUseContextBase {
		constexpr auto bOverrideOffset = 0x230; // char : 1
		constexpr auto OverrideOffset = 0x234; // float
	}

	namespace n_UMovieSceneColorTrack {
		constexpr auto bIsSlateColor = 0x88; // bool
	}

	namespace n_UButtonStyleAsset {
		constexpr auto ButtonStyle = 0x28; // FButtonStyle
	}

	namespace n_AMapData_Marker_C {
		constexpr auto DefaultSceneRoot = 0x270; // USceneComponent*
	}

	namespace n_UParticleModuleSourceMovement {
		constexpr auto SourceMovementScale = 0x30; // FRawDistributionVector
	}

	namespace n_UMovieSceneVectorTrack {
		constexpr auto NumChannelsUsed = 0x88; // int32_t
	}

	namespace n_UGameplayTagsList {
		constexpr auto ConfigFileName = 0x28; // FString
		constexpr auto GameplayTagList = 0x38; // TArray<FGameplayTagTableRow>
	}

	namespace n_UMaterialExpressionBreakMaterialAttributes {
		constexpr auto MaterialAttributes = 0x40; // FMaterialAttributesInput
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureSample {
		constexpr auto Coordinates = 0x40; // FExpressionInput
		constexpr auto WorldPosition = 0x54; // FExpressionInput
		constexpr auto MipValue = 0x68; // FExpressionInput
		constexpr auto VirtualTexture = 0x80; // URuntimeVirtualTexture*
		constexpr auto MaterialType = 0x88; // ERuntimeVirtualTextureMaterialType
		constexpr auto bSinglePhysicalSpace = 0x89; // bool
		constexpr auto MipValueMode = 0x8a; // ERuntimeVirtualTextureMipValueMode
	}

	namespace n_ALandscapeStreamingProxy {
		constexpr auto LandscapeActor = 0x568; // LazyObjectProperty
	}

	namespace n_AHLLCommanderAbility_DropperPlane {
		constexpr auto SpawnClass = 0x3b8; // AActor*
		constexpr auto SpawnAltitude = 0x3c0; // float
		constexpr auto bDidDrop = 0x3c4; // char : 1
		constexpr auto DropDelayTime = 0x3c8; // float
	}

	namespace n_UHLLAnimInstance_ArtilleryBase {
		constexpr auto ArtilleryPiece = 0x270; // AHLLArtilleryBase*
		constexpr auto ArtilleryWeapon = 0x278; // AHLLArmourWeapon*
		constexpr auto TurretYaw = 0x280; // float
		constexpr auto TurretPitch = 0x284; // float
		constexpr auto LoadingProgress = 0x288; // float
		constexpr auto bIsLoading = 0x28c; // bool
	}

	namespace n_UHLLParachuteMeshComponent {
		constexpr auto bParachuteState = 0xad8; // char : 1
		constexpr auto CloseMontage = 0xae0; // UAnimMontage*
		constexpr auto OnParachuteFinishedClosing = 0xae8; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionPreviousFrameSwitch {
		constexpr auto CurrentFrame = 0x40; // FExpressionInput
		constexpr auto PreviousFrame = 0x54; // FExpressionInput
	}

	namespace n_UGeneralProjectSettings {
		constexpr auto CompanyName = 0x28; // FString
		constexpr auto CompanyDistinguishedName = 0x38; // FString
		constexpr auto CopyrightNotice = 0x48; // FString
		constexpr auto Description = 0x58; // FString
		constexpr auto Homepage = 0x68; // FString
		constexpr auto LicensingTerms = 0x78; // FString
		constexpr auto PrivacyPolicy = 0x88; // FString
		constexpr auto ProjectID = 0x98; // FGuid
		constexpr auto ProjectName = 0xa8; // FString
		constexpr auto ProjectVersion = 0xb8; // FString
		constexpr auto SupportContact = 0xc8; // FString
		constexpr auto ProjectDisplayedTitle = 0xd8; // FText
		constexpr auto ProjectDebugTitleInfo = 0xf0; // FText
		constexpr auto bShouldWindowPreserveAspectRatio = 0x108; // bool
		constexpr auto bUseBorderlessWindow = 0x109; // bool
		constexpr auto bStartInVR = 0x10a; // bool
		constexpr auto bStartInAR = 0x10b; // bool
		constexpr auto bSupportAR = 0x10c; // bool
		constexpr auto bAllowWindowResize = 0x10d; // bool
		constexpr auto bAllowClose = 0x10e; // bool
		constexpr auto bAllowMaximize = 0x10f; // bool
		constexpr auto bAllowMinimize = 0x110; // bool
	}

	namespace n_UTcpMessagingSettings {
		constexpr auto EnableTransport = 0x28; // bool
		constexpr auto ListenEndpoint = 0x30; // FString
		constexpr auto ConnectToEndpoints = 0x40; // TArray<FString>
		constexpr auto ConnectionRetryDelay = 0x50; // int32_t
		constexpr auto bStopServiceWhenAppDeactivates = 0x54; // bool
	}

	namespace n_UParticleModuleLocationEmitterDirect {
		constexpr auto EmitterName = 0x30; // FName
	}

	namespace n_UShapeComponent {
		constexpr auto ShapeBodySetup = 0x410; // UBodySetup*
		constexpr auto AreaClass = 0x418; // UNavAreaBase*
		constexpr auto ShapeColor = 0x420; // FColor
		constexpr auto bDrawOnlyIfSelected = 0x424; // char : 1
		constexpr auto bShouldCollideWhenPlacing = 0x424; // char : 1
		constexpr auto bDynamicObstacle = 0x424; // char : 1
	}

	namespace n_UWGT_CommanderListItem_V2_C {
		constexpr auto UberGraphFrame = 0x2a0; // FPointerToUberGraphFrame
		constexpr auto Image_1 = 0x2a8; // UImage*
		constexpr auto Image_2 = 0x2b0; // UImage*
		constexpr auto W_Tooltip = 0x2b8; // UW_HoverToolTip_Explained_C*
		constexpr auto Txt_TooltipAbility = 0x2c0; // FText
		constexpr auto Tooltip_Ability = 0x2d8; // bool
		constexpr auto HoverColor = 0x2dc; // FLinearColor
		constexpr auto NormalColor = 0x2ec; // FLinearColor
		constexpr auto Hovered = 0x2fc; // bool
		constexpr auto CooldownTime = 0x300; // int32_t
		constexpr auto bCoolDownUpdated = 0x304; // bool
		constexpr auto LastGamepadHovered = 0x305; // bool
	}

	namespace n_UAnimCompress_RemoveLinearKeys {
		constexpr auto MaxPosDiff = 0x40; // float
		constexpr auto MaxAngleDiff = 0x44; // float
		constexpr auto MaxScaleDiff = 0x48; // float
		constexpr auto MaxEffectorDiff = 0x4c; // float
		constexpr auto MinEffectorDiff = 0x50; // float
		constexpr auto EffectorDiffSocket = 0x54; // float
		constexpr auto ParentKeyScale = 0x58; // float
		constexpr auto bRetarget = 0x5c; // char : 1
		constexpr auto bActuallyFilterLinearKeys = 0x5c; // char : 1
	}

	namespace n_UWGT_UseContext_UseDispenserWeapon_C {
		constexpr auto UberGraphFrame = 0x2b0; // FPointerToUberGraphFrame
	}

	namespace n_URetainerBox {
		constexpr auto RenderOnInvalidation = 0x120; // bool
		constexpr auto RenderOnPhase = 0x121; // bool
		constexpr auto Phase = 0x124; // int32_t
		constexpr auto PhaseCount = 0x128; // int32_t
		constexpr auto EffectMaterial = 0x130; // UMaterialInterface*
		constexpr auto TextureParameter = 0x138; // FName
	}

	namespace n_UTeamSelectionOption_V2_C {
		constexpr auto UberGraphFrame = 0x268; // FPointerToUberGraphFrame
		constexpr auto TextColour_Hovered = 0x270; // FSlateColor
		constexpr auto TextColour_Default = 0x298; // FSlateColor
		constexpr auto IconColour_Hovered = 0x2c0; // FLinearColor
		constexpr auto IconColour_Default = 0x2d0; // FLinearColor
		constexpr auto ButtonPrompts = 0x2e0; // UButtonPromptsInfo_V2_C*
		constexpr auto bFocus = 0x2e8; // bool
	}

	namespace n_ULocalLightComponent {
		constexpr auto IntensityUnits = 0x320; // ELightUnits
		constexpr auto Radius = 0x324; // float
		constexpr auto AttenuationRadius = 0x328; // float
		constexpr auto LightmassSettings = 0x32c; // FLightmassPointLightSettings
	}

	namespace n_UHTP_Widget_Role_Loadout_Medic_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_2 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_3 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_5 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_6 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_5 = 0x270; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_12 = 0x278; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x280; // UImage*
		constexpr auto Image_10 = 0x288; // UImage*
		constexpr auto Image_17 = 0x290; // UImage*
	}

	namespace n_UWGT_OverviewMapWidget_C {
		constexpr auto MapSBox = 0x460; // USizeBox*
	}

	namespace n_UParticleModuleLocationPrimitiveCylinder_Seeded {
		constexpr auto RandomSeedInfo = 0x120; // FParticleRandomSeedInfo
	}

	namespace n_UWGT_GameMenuItem_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto RTxt_MenuText = 0x278; // URichTextBlock*
	}

	namespace n_UPlatoonManagementStackNotification {
		constexpr auto Title = 0x248; // UTextBlock*
		constexpr auto Message = 0x250; // UTextBlock*
		constexpr auto DisplayTime = 0x258; // float
	}

	namespace n_UWGT_MarkerMenuItem_C {
		constexpr auto UberGraphFrame = 0x260; // FPointerToUberGraphFrame
		constexpr auto RootButton = 0x268; // UButton*
		constexpr auto GamepadHovered = 0x270; // bool
	}

	namespace n_UWGT_VehicleStatus_UseContext_C {
		constexpr auto UberGraphFrame = 0x250; // FPointerToUberGraphFrame
		constexpr auto Engine = 0x258; // UWGT_HealthCircular_C*
		constexpr auto TankHull = 0x260; // UWGT_HealthCircular_C*
		constexpr auto Tracks = 0x268; // UWGT_HealthCircular_C*
		constexpr auto TruckHull = 0x270; // UWGT_HealthCircular_C*
		constexpr auto Turret = 0x278; // UWGT_HealthCircular_C*
	}

	namespace n_UDistributionFloatConstantCurve {
		constexpr auto ConstantCurve = 0x38; // FInterpCurveFloat
	}

	namespace n_UAnimSequence {
		constexpr auto NumFrames = 0xa8; // int32_t
		constexpr auto TrackToSkeletonMapTable = 0xb0; // TArray<FTrackToSkeletonMap>
		constexpr auto BoneCompressionSettings = 0xd0; // UAnimBoneCompressionSettings*
		constexpr auto CurveCompressionSettings = 0xd8; // UAnimCurveCompressionSettings*
		constexpr auto AdditiveAnimType = 0x150; // EAdditiveAnimationType
		constexpr auto RefPoseType = 0x151; // EAdditiveBasePoseType
		constexpr auto RefPoseSeq = 0x158; // UAnimSequence*
		constexpr auto RefFrameIndex = 0x160; // int32_t
		constexpr auto RetargetSource = 0x164; // FName
		constexpr auto Interpolation = 0x16c; // EAnimInterpolationType
		constexpr auto bEnableRootMotion = 0x16d; // bool
		constexpr auto RootMotionRootLock = 0x16e; // ERootMotionRootLock
		constexpr auto bForceRootLock = 0x16f; // bool
		constexpr auto bUseNormalizedRootMotionScale = 0x170; // bool
		constexpr auto bRootMotionSettingsCopiedFromMontage = 0x171; // bool
		constexpr auto AuthoredSyncMarkers = 0x178; // TArray<FAnimSyncMarker>
	}

	namespace n_USkinnedMeshComponent {
		constexpr auto SkeletalMesh = 0x438; // USkeletalMesh*
		constexpr auto MasterPoseComponent = 0x440; // TWeakObjectPtr<USkinnedMeshComponent>
		constexpr auto SkinCacheUsage = 0x448; // TArray<ESkinCacheUsage>
		constexpr auto PhysicsAssetOverride = 0x550; // UPhysicsAsset*
		constexpr auto ForcedLodModel = 0x558; // int32_t
		constexpr auto MinLodModel = 0x55c; // int32_t
		constexpr auto StreamingDistanceMultiplier = 0x568; // float
		constexpr auto LODInfo = 0x578; // TArray<FSkelMeshComponentLODInfo>
		constexpr auto VisibilityBasedAnimTickOption = 0x5ac; // EVisibilityBasedAnimTickOption
		constexpr auto bOverrideMinLod = 0x5ae; // char : 1
		constexpr auto bUseBoundsFromMasterPoseComponent = 0x5ae; // char : 1
		constexpr auto bForceWireframe = 0x5ae; // char : 1
		constexpr auto bDisplayBones = 0x5ae; // char : 1
		constexpr auto bDisableMorphTarget = 0x5ae; // char : 1
		constexpr auto bHideSkin = 0x5ae; // char : 1
		constexpr auto bPerBoneMotionBlur = 0x5af; // char : 1
		constexpr auto bComponentUseFixedSkelBounds = 0x5af; // char : 1
		constexpr auto bConsiderAllBodiesForBounds = 0x5af; // char : 1
		constexpr auto bSyncAttachParentLOD = 0x5af; // char : 1
		constexpr auto bCanHighlightSelectedSections = 0x5af; // char : 1
		constexpr auto bRecentlyRendered = 0x5af; // char : 1
		constexpr auto bCastCapsuleDirectShadow = 0x5af; // char : 1
		constexpr auto bCastCapsuleIndirectShadow = 0x5af; // char : 1
		constexpr auto bCPUSkinning = 0x5b0; // char : 1
		constexpr auto bEnableUpdateRateOptimizations = 0x5b0; // char : 1
		constexpr auto bDisplayDebugUpdateRateOptimizations = 0x5b0; // char : 1
		constexpr auto bRenderStatic = 0x5b0; // char : 1
		constexpr auto bIgnoreMasterPoseComponentLOD = 0x5b0; // char : 1
		constexpr auto bCachedLocalBoundsUpToDate = 0x5b0; // char : 1
		constexpr auto bForceMeshObjectUpdate = 0x5b1; // char : 1
		constexpr auto CapsuleIndirectShadowMinVisibility = 0x5b4; // float
		constexpr auto CachedWorldSpaceBounds = 0x5c8; // FBoxSphereBounds
		constexpr auto CachedWorldToLocalTransform = 0x5f0; // FMatrix
	}

	namespace n_UHLLUI_AvailableRoleItem {
		constexpr auto IsAvailable = 0x268; // bool
		constexpr auto IconColour_Current = 0x26c; // FLinearColor
		constexpr auto IconColour_Available = 0x27c; // FLinearColor
		constexpr auto IconColour_NotAvailable = 0x28c; // FLinearColor
		constexpr auto RoleLimits = 0x2a0; // UTextBlock*
	}

	namespace n_UVaultingComponent {
		constexpr auto MinObstacleHeight = 0xb0; // float
		constexpr auto MaxObstacleHeight = 0xb4; // float
		constexpr auto MaxObstacleThicknessToVaultOver = 0xb8; // float
		constexpr auto MaxDistanceToObstacle = 0xbc; // float
		constexpr auto MaxAllowedAngleFromFacingObstacleStraight = 0xc0; // float
		constexpr auto MinOpeningWidthForVaulting = 0xc4; // float
		constexpr auto MinOpeningHeightForVaulting = 0xc8; // float
		constexpr auto MaxClimbableObstacleHeightStillClassifiedAsVault = 0xcc; // float
	}

	namespace n_UDataTable {
		constexpr auto RowStruct = 0x28; // UScriptStruct*
		constexpr auto bStripFromClientBuilds = 0x80; // char : 1
		constexpr auto bIgnoreExtraFields = 0x80; // char : 1
		constexpr auto bIgnoreMissingFields = 0x80; // char : 1
		constexpr auto ImportKeyField = 0x88; // FString
	}

	namespace n_UImageSequenceProtocol_EXR {
		constexpr auto bCompressed = 0xd8; // bool
		constexpr auto CaptureGamut = 0xd9; // EHDRCaptureGamut
	}

	namespace n_AShooterWeapon_Hammer {
		constexpr auto UpgradeRange = 0x8b8; // float
		constexpr auto Timer = 0x8bc; // float
		constexpr auto UpgradePerTimer = 0x8c0; // int32_t
		constexpr auto CurrentUpgradeTarget = 0x8c4; // TWeakObjectPtr<AActor>
		constexpr auto TierWhenStarted = 0x8cc; // char
	}

	namespace n_UParticleModuleCollision {
		constexpr auto DampingFactor = 0x30; // FRawDistributionVector
		constexpr auto DampingFactorRotation = 0x78; // FRawDistributionVector
		constexpr auto MaxCollisions = 0xc0; // FRawDistributionFloat
		constexpr auto CollisionCompletionOption = 0xf0; // EParticleCollisionComplete
		constexpr auto CollisionTypes = 0xf8; // TArray<EObjectTypeQuery>
		constexpr auto bApplyPhysics = 0x110; // char : 1
		constexpr auto bIgnoreTriggerVolumes = 0x110; // char : 1
		constexpr auto ParticleMass = 0x118; // FRawDistributionFloat
		constexpr auto DirScalar = 0x148; // float
		constexpr auto bPawnsDoNotDecrementCount = 0x14c; // char : 1
		constexpr auto bOnlyVerticalNormalsDecrementCount = 0x14c; // char : 1
		constexpr auto VerticalFudgeFactor = 0x150; // float
		constexpr auto DelayAmount = 0x158; // FRawDistributionFloat
		constexpr auto bDropDetail = 0x188; // char : 1
		constexpr auto bCollideOnlyIfVisible = 0x188; // char : 1
		constexpr auto bIgnoreSourceActor = 0x188; // char : 1
		constexpr auto MaxCollisionDistance = 0x18c; // float
	}

	namespace n_UWGT_AdminCameraUI_C {
		constexpr auto UberGraphFrame = 0x290; // FPointerToUberGraphFrame
		constexpr auto ClearSelectedPlayer = 0x298; // UbtnSimple_V2_C*
		constexpr auto ClipMode = 0x2a0; // UHorizontalBox*
		constexpr auto ClipModeText = 0x2a8; // UTextBlock*
		constexpr auto HighlightModeText = 0x2b0; // UTextBlock*
		constexpr auto Kick = 0x2b8; // UbtnSimple_V2_C*
		constexpr auto KickBanClose = 0x2c0; // UbtnSimple_V2_C*
		constexpr auto KickBanPrompt = 0x2c8; // UbtnSimple_V2_C*
		constexpr auto KickName = 0x2d0; // UTextBlock*
		constexpr auto LockText = 0x2d8; // UTextBlock*
		constexpr auto ModeText = 0x2e0; // UTextBlock*
		constexpr auto ModeText_2 = 0x2e8; // UTextBlock*
		constexpr auto PermBan = 0x2f0; // UbtnSimple_V2_C*
		constexpr auto SearchClose = 0x2f8; // UbtnSimple_V2_C*
		constexpr auto SpectateSelected = 0x300; // UbtnSimple_V2_C*
		constexpr auto Speed = 0x308; // UHorizontalBox*
		constexpr auto SpeedText = 0x310; // UTextBlock*
		constexpr auto TargetInfo = 0x318; // UTextBlock*
		constexpr auto TargetName = 0x320; // UTextBlock*
		constexpr auto TempBan = 0x328; // UbtnSimple_V2_C*
		constexpr auto ToggleHighlight = 0x330; // UHorizontalBox*
		constexpr auto ToggleMode = 0x338; // UHorizontalBox*
		constexpr auto ToggleUI = 0x340; // UHorizontalBox*
		constexpr auto Zoom = 0x348; // UHorizontalBox*
	}

	namespace n_UWGT_ServerBrowser_V2_C {
		constexpr auto UberGraphFrame = 0x328; // FPointerToUberGraphFrame
		constexpr auto Anim_Select = 0x330; // UWidgetAnimation*
		constexpr auto Browser = 0x338; // UOverlay*
		constexpr auto ButtonPromptsInfo = 0x340; // UButtonPromptsInfo_V2_C*
		constexpr auto Filter_Community = 0x348; // UWGT_BrowserFilterButton_V2_C*
		constexpr auto Filter_Empty = 0x350; // UWGT_BrowserFilterButton_V2_C*
		constexpr auto Filter_Full = 0x358; // UWGT_BrowserFilterButton_V2_C*
		constexpr auto Filter_Official = 0x360; // UWGT_BrowserFilterButton_V2_C*
		constexpr auto Filter_Password = 0x368; // UWGT_BrowserFilterButton_V2_C*
		constexpr auto Image_3 = 0x370; // UImage*
		constexpr auto Image_4 = 0x378; // UImage*
		constexpr auto JoinButton = 0x380; // UbtnSimple_V2_C*
		constexpr auto JoinServerOverlay = 0x388; // UOverlay*
		constexpr auto MessageHelp = 0x390; // UButton*
		constexpr auto SearchButton = 0x398; // USearchButton_V2_C*
		constexpr auto SearchSwitcher = 0x3a0; // UWidgetSwitcher*
		constexpr auto SortColumn_Map = 0x3a8; // UWGT_BrowserSortButton_V2_C*
		constexpr auto SortColumn_Mode = 0x3b0; // UWGT_BrowserSortButton_V2_C*
		constexpr auto SortColumn_Ping = 0x3b8; // UWGT_BrowserSortButton_V2_C*
		constexpr auto SortColumn_Players = 0x3c0; // UWGT_BrowserSortButton_V2_C*
		constexpr auto SortColumn_Server = 0x3c8; // UWGT_BrowserSortButton_V2_C*
		constexpr auto TabbedButtonContainer = 0x3d0; // UTabbedButtonContainer_V2_C*
		constexpr auto WidthScaling = 0x3d8; // float
		constexpr auto bCurrentEnabledState = 0x3dc; // bool
		constexpr auto MainMenu = 0x3e0; // UMainMenuWidget_V2_C*
		constexpr auto SelectedServer = 0x3e8; // UWGT_ServerListItem_V2_C*
		constexpr auto bSelectedServer = 0x3f0; // bool
		constexpr auto bHasFocused = 0x3f1; // bool
	}

	namespace n_UServerQueue {
		constexpr auto MaxPlayersInQueue = 0xc8; // int32_t
		constexpr auto NumSlotsReservedForVIPPlayers = 0xcc; // int32_t
		constexpr auto VIPPlayerNetworkIDs = 0xd0; // TArray<FString>
		constexpr auto VIPPlayerRecords = 0xe0; // TArray<FVIPPlayerRecord>
	}

	namespace n_UMaterialExpressionRound {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UWGT_MapIcon_AdminCam_C {
		constexpr auto UberGraphFrame = 0x370; // FPointerToUberGraphFrame
		constexpr auto PulseLoop = 0x378; // UWidgetAnimation*
	}

	namespace n_UCameraModifier_CameraShake {
		constexpr auto ActiveShakes = 0x48; // TArray<FActiveCameraShakeInfo>
		constexpr auto ExpiredPooledShakesMap = 0x58; // TMap<UCameraShake*, FPooledCameraShakes>
		constexpr auto SplitScreenShakeScale = 0xa8; // float
	}

	namespace n_APrecomputedVisibilityOverrideVolume {
		constexpr auto OverrideVisibleActors = 0x258; // TArray<AActor*>
		constexpr auto OverrideInvisibleActors = 0x268; // TArray<AActor*>
		constexpr auto OverrideInvisibleLevels = 0x278; // TArray<FName>
	}

	namespace n_UHLLRoundSummaryTeam {
		constexpr auto TeamFlag = 0x238; // UImage*
		constexpr auto MunitionsText = 0x240; // UTextBlock*
		constexpr auto ManpowerText = 0x248; // UTextBlock*
		constexpr auto FuelText = 0x250; // UTextBlock*
		constexpr auto ScoreValue = 0x258; // UTextBlock*
	}

	namespace n_UHTP_Widget_Role_Loadout_Item_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto bottomline = 0x238; // UImage*
		constexpr auto BPW_EquipmentItem = 0x240; // UBPW_EquipmentItem_C*
		constexpr auto label_slotType = 0x248; // UTextBlock*
		constexpr auto txt_primaryName = 0x250; // UTextBlock*
		constexpr auto Weapon = 0x258; // EWeaponType
		constexpr auto SlotType = 0x259; // E_SlotTypes
		constexpr auto SlotSize = 0x25a; // E_SlotSizes
	}

	namespace n_ULevelSequenceBurnIn {
		constexpr auto FrameInformation = 0x230; // FLevelSequencePlayerSnapshot
		constexpr auto LevelSequenceActor = 0x2e8; // ALevelSequenceActor*
	}

	namespace n_UPlayerManagementActionsBP_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto AddFriendBtn = 0x238; // UPlayerManagementButtonBP_C*
		constexpr auto BlockBtn = 0x240; // UPlayerManagementButtonBP_C*
		constexpr auto BR_FriendManagement = 0x248; // UBorder*
		constexpr auto DividerLine = 0x250; // UVerticalBox*
		constexpr auto Image = 0x258; // UImage*
		constexpr auto Image_3 = 0x260; // UImage*
		constexpr auto Image_4 = 0x268; // UImage*
		constexpr auto Image_6 = 0x270; // UImage*
		constexpr auto MuteBtn = 0x278; // UPlayerManagementButtonBP_C*
		constexpr auto PlatformIcon_2 = 0x280; // UImage*
		constexpr auto PlayerClan_2 = 0x288; // UTextBlock*
		constexpr auto PlayerIcon_2 = 0x290; // UImage*
		constexpr auto PlayerName_2 = 0x298; // UTextBlock*
		constexpr auto ReportBtn = 0x2a0; // UPlayerManagementButtonBP_C*
		constexpr auto UnMuteBtn = 0x2a8; // UPlayerManagementButtonBP_C*
		constexpr auto VoteKickBtn = 0x2b0; // UPlayerManagementButtonBP_C*
		constexpr auto FriendItem = 0x2b8; // UObject*
		constexpr auto PlayerName = 0x2c0; // FString
		constexpr auto FriendMenu = 0x2d0; // UObject*
		constexpr auto UniqueId = 0x2d8; // FString
		constexpr auto PlatformPlayerID = 0x2e8; // FString
		constexpr auto FriendBlockConfirmation = 0x2f8; // bool
		constexpr auto SamePlatform = 0x2f9; // bool
		constexpr auto ButtonPressed = 0x300; // FMulticastInlineDelegate
		constexpr auto OnSubMenuClosed = 0x310; // FMulticastInlineDelegate
		constexpr auto Action = 0x320; // char
		constexpr auto SelectedPlayer = 0x328; // UWGT_RoundSummaryPlayer_C*
		constexpr auto allButtons = 0x330; // bool
		constexpr auto MenuAnchor = 0x338; // UMenuAnchor*
		constexpr auto scoreScreen = 0x340; // UWGT_RoundSummaryDetails_V2_C*
	}

	namespace n_UHLLSeatNameplateContainer {
		constexpr auto ItemClass = 0x2b8; // UHLLSeatIndicatorItem*
		constexpr auto bShowOnlyDriver = 0x2c0; // char : 1
		constexpr auto bShowPassengerCount = 0x2c0; // char : 1
		constexpr auto ItemWidgets = 0x2c8; // TArray<UHLLSeatIndicatorItem*>
		constexpr auto OccupantVBox = 0x2d8; // UVerticalBox*
		constexpr auto AdditionalOccupants = 0x2e0; // UWidget*
		constexpr auto AdditionalOccupantText = 0x2e8; // UTextBlock*
	}

	namespace n_UInterpTrackVisibility {
		constexpr auto VisibilityTrack = 0x70; // TArray<FVisibilityTrackKey>
		constexpr auto bFireEventsWhenForwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x80; // char : 1
	}

	namespace n_UTextureRenderTarget {
		constexpr auto TargetGamma = 0xb8; // float
	}

	namespace n_UMaterialExpressionComponentMask {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto R = 0x54; // char : 1
		constexpr auto G = 0x54; // char : 1
		constexpr auto B = 0x54; // char : 1
		constexpr auto A = 0x54; // char : 1
	}

	namespace n_UW_HoverToolTip_C {
		constexpr auto TextBlock_1 = 0x230; // UTextBlock*
		constexpr auto Text_Tooltip = 0x238; // FText
	}

	namespace n_UNavigationInvokerComponent {
		constexpr auto TileGenerationRadius = 0xb0; // float
		constexpr auto TileRemovalRadius = 0xb4; // float
	}

	namespace n_UMaterialExpressionFontSampleParameter {
		constexpr auto ParameterName = 0x50; // FName
		constexpr auto ExpressionGUID = 0x58; // FGuid
		constexpr auto Group = 0x68; // FName
	}

	namespace n_UMaterialExpressionLogarithm10 {
		constexpr auto X = 0x40; // FExpressionInput
	}

	namespace n_USystemTimeTimecodeProvider {
		constexpr auto FrameRate = 0x30; // FFrameRate
		constexpr auto bGenerateFullFrame = 0x38; // bool
		constexpr auto bUseHighPerformanceClock = 0x39; // bool
	}

	namespace n_AHLLCommanderAbility_GhostPlane {
		constexpr auto DispenserData = 0x3d8; // FDispenserData
		constexpr auto SafezoneClass = 0x568; // AHLLGhostAbilitySafezone*
		constexpr auto GhostInstance = 0x570; // AHLLDispenserItem_Base*
		constexpr auto SafezoneInstance = 0x578; // AHLLGhostAbilitySafezone*
	}

	namespace n_UHLLCriticalPlayerIndicator {
		constexpr auto BandageBrush = 0x2a8; // FSlateBrush
		constexpr auto CriticalBrush = 0x330; // FSlateBrush
		constexpr auto bShowBandageWhenOffscreen = 0x3b8; // char : 1
		constexpr auto bShowCriticalWhenOffscreen = 0x3b8; // char : 1
		constexpr auto BandagePulseCurve = 0x3c0; // UCurveFloat*
		constexpr auto CriticalPulseCurve = 0x3c8; // UCurveFloat*
		constexpr auto PulseSizeCurve = 0x3d0; // UCurveFloat*
		constexpr auto DistanceText = 0x3e0; // UTextBlock*
		constexpr auto Line = 0x3e8; // UImage*
	}

	namespace n_UHLLRadialMenu_WeaponBase {
		constexpr auto SegmentClass = 0x318; // UHLLRadialMenu_WeaponSegment*
		constexpr auto WeaponName = 0x320; // UTextBlock*
	}

	namespace n_UWrapBoxSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto bFillEmptySpace = 0x48; // bool
		constexpr auto FillSpanWhenLessThan = 0x4c; // float
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UHLLMapTooltip_Supplies {
		constexpr auto TypeText = 0x260; // UTextBlock*
		constexpr auto RemainingText = 0x268; // UTextBlock*
	}

	namespace n_ULevelCapture {
		constexpr auto bAutoStartCapture = 0x220; // bool
		constexpr auto PrerequisiteActorId = 0x22c; // FGuid
	}

	namespace n_UWeaponTPPAnimationSet {
		constexpr auto StandIdle = 0x28; // UAnimSequence*
		constexpr auto StandIdleBreak01 = 0x30; // UAnimSequence*
		constexpr auto StandIdleBreak02 = 0x38; // UAnimSequence*
		constexpr auto CrouchIdle = 0x40; // UAnimSequence*
		constexpr auto CrouchIdleBreak01 = 0x48; // UAnimSequence*
		constexpr auto CrouchIdleBreak02 = 0x50; // UAnimSequence*
		constexpr auto ProneIdle = 0x58; // UAnimSequence*
		constexpr auto StandRotateRight = 0x60; // UAnimSequence*
		constexpr auto StandRotateLeft = 0x68; // UAnimSequence*
		constexpr auto CrouchRotateRight = 0x70; // UAnimSequence*
		constexpr auto CrouchRotateLeft = 0x78; // UAnimSequence*
		constexpr auto ProneRotateRight = 0x80; // UAnimSequence*
		constexpr auto ProneRotateLeft = 0x88; // UAnimSequence*
		constexpr auto JumpEnter = 0x90; // UAnimSequence*
		constexpr auto JumpLoop = 0x98; // UAnimSequence*
		constexpr auto JumpExit = 0xa0; // UAnimSequence*
		constexpr auto StandSprint = 0xa8; // UAnimSequence*
		constexpr auto CrouchSprint = 0xb0; // UAnimSequence*
		constexpr auto PoseInheritanceStand = 0xb8; // UAnimSequence*
		constexpr auto PoseInheritanceCrouch = 0xc0; // UAnimSequence*
		constexpr auto PoseInheritanceProne = 0xc8; // UAnimSequence*
		constexpr auto PoseIdleStand = 0xd0; // UAnimSequence*
		constexpr auto PoseIdleCrouch = 0xd8; // UAnimSequence*
		constexpr auto PoseIdleProne = 0xe0; // UAnimSequence*
		constexpr auto PoseAdsStand = 0xe8; // UAnimSequence*
		constexpr auto PoseAdsCrouch = 0xf0; // UAnimSequence*
		constexpr auto PoseAdsProne = 0xf8; // UAnimSequence*
		constexpr auto StandToCrouch = 0x100; // UAnimSequence*
		constexpr auto StandToProne = 0x108; // UAnimSequence*
		constexpr auto CrouchToStand = 0x110; // UAnimSequence*
		constexpr auto CrouchToProne = 0x118; // UAnimSequence*
		constexpr auto ProneToStand = 0x120; // UAnimSequence*
		constexpr auto ProneToCrouch = 0x128; // UAnimSequence*
		constexpr auto DeployInheritPose = 0x130; // UAnimSequence*
		constexpr auto StandDeployPivot = 0x138; // UAnimSequence*
		constexpr auto StandBipodDeploy = 0x140; // UAnimSequence*
		constexpr auto StandBipodUndeploy = 0x148; // UAnimMontage*
		constexpr auto CrouchBipodDeploy = 0x150; // UAnimSequence*
		constexpr auto CrouchBipodUndeploy = 0x158; // UAnimMontage*
		constexpr auto ProneBipodDeploy = 0x160; // UAnimSequence*
		constexpr auto ProneBipodUndeploy = 0x168; // UAnimMontage*
		constexpr auto StandBipodIdle = 0x170; // UAnimSequence*
		constexpr auto CrouchBipodIdle = 0x178; // UAnimSequence*
		constexpr auto ProneBipodIdle = 0x180; // UAnimSequence*
		constexpr auto BraceStandEnter = 0x188; // UAnimSequence*
		constexpr auto BraceStandIdle = 0x190; // UAnimSequence*
		constexpr auto BraceStandExit = 0x198; // UAnimSequence*
		constexpr auto BraceCrouchEnter = 0x1a0; // UAnimSequence*
		constexpr auto BraceCrouchIdle = 0x1a8; // UAnimSequence*
		constexpr auto BraceCrouchExit = 0x1b0; // UAnimSequence*
		constexpr auto BraceProneEnter = 0x1b8; // UAnimSequence*
		constexpr auto BraceProneIdle = 0x1c0; // UAnimSequence*
		constexpr auto BraceProneExit = 0x1c8; // UAnimSequence*
		constexpr auto BracePivotStand_R = 0x1d0; // UAnimSequence*
		constexpr auto BracePivotStand_L = 0x1d8; // UAnimSequence*
		constexpr auto BracePivotCrouch_R = 0x1e0; // UAnimSequence*
		constexpr auto BracePivotCrouch_L = 0x1e8; // UAnimSequence*
		constexpr auto BracePivotProne_R = 0x1f0; // UAnimSequence*
		constexpr auto BracePivotProne_L = 0x1f8; // UAnimSequence*
		constexpr auto StandLocomotion = 0x200; // UBlendSpace*
		constexpr auto StandLocomotionADS = 0x208; // UBlendSpace*
		constexpr auto CrouchLocomotion = 0x210; // UBlendSpace*
		constexpr auto CrouchLocomotionADS = 0x218; // UBlendSpace*
		constexpr auto ProneLocomotion = 0x220; // UBlendSpace*
		constexpr auto StandWalkStart = 0x228; // UBlendSpace*
		constexpr auto StandWalkStop = 0x230; // UBlendSpace*
		constexpr auto StandJogStart = 0x238; // UBlendSpace*
		constexpr auto StandJogStop = 0x240; // UBlendSpace*
		constexpr auto StandSprintStop = 0x248; // UBlendSpace*
		constexpr auto CrouchWalkStart = 0x250; // UBlendSpace*
		constexpr auto CrouchWalkStop = 0x258; // UBlendSpace*
		constexpr auto CrouchJogStart = 0x260; // UBlendSpace*
		constexpr auto CrouchJogStop = 0x268; // UBlendSpace*
		constexpr auto CrouchSprintStop = 0x270; // UBlendSpace*
		constexpr auto ProneToJog = 0x278; // UBlendSpace*
		constexpr auto ProneToSprint = 0x280; // UBlendSpace*
		constexpr auto StandSprintStopToProne = 0x288; // UBlendSpace*
		constexpr auto StandJogStopToProne = 0x290; // UBlendSpace*
		constexpr auto CrouchSprintStopToProne = 0x298; // UBlendSpace*
		constexpr auto CrouchJogStopToProne = 0x2a0; // UBlendSpace*
		constexpr auto StandVault = 0x2a8; // UBlendSpace*
		constexpr auto StandClimb = 0x2b0; // UBlendSpace*
		constexpr auto StandLeft = 0x2b8; // UAnimMontage*
		constexpr auto StandRight = 0x2c0; // UAnimMontage*
		constexpr auto CrouchLeft = 0x2c8; // UAnimMontage*
		constexpr auto CrouchRight = 0x2d0; // UAnimMontage*
		constexpr auto ProneLeft = 0x2d8; // UAnimMontage*
		constexpr auto ProneRight = 0x2e0; // UAnimMontage*
		constexpr auto AO_Stand = 0x2e8; // UAimOffsetBlendSpace*
		constexpr auto AO_Crouch = 0x2f0; // UAimOffsetBlendSpace*
		constexpr auto AO_Crouch_Moving = 0x2f8; // UAimOffsetBlendSpace*
		constexpr auto AO_Prone = 0x300; // UAimOffsetBlendSpace*
		constexpr auto AO_Stand_ADS = 0x308; // UAimOffsetBlendSpace*
		constexpr auto AO_Crouch_ADS = 0x310; // UAimOffsetBlendSpace*
		constexpr auto AO_Prone_ADS = 0x318; // UAimOffsetBlendSpace*
	}

	namespace n_UDynamicEntryBox {
		constexpr auto EntryWidgetClass = 0x1c8; // UUserWidget*
	}

	namespace n_UEnvQueryTest {
		constexpr auto TestOrder = 0x30; // int32_t
		constexpr auto TestPurpose = 0x34; // EEnvTestPurpose
		constexpr auto TestComment = 0x38; // FString
		constexpr auto MultipleContextFilterOp = 0x48; // EEnvTestFilterOperator
		constexpr auto MultipleContextScoreOp = 0x49; // EEnvTestScoreOperator
		constexpr auto FilterType = 0x4a; // EEnvTestFilterType
		constexpr auto BoolValue = 0x50; // FAIDataProviderBoolValue
		constexpr auto FloatValueMin = 0x88; // FAIDataProviderFloatValue
		constexpr auto FloatValueMax = 0xc0; // FAIDataProviderFloatValue
		constexpr auto ScoringEquation = 0xf9; // EEnvTestScoreEquation
		constexpr auto ClampMinType = 0xfa; // EEnvQueryTestClamping
		constexpr auto ClampMaxType = 0xfb; // EEnvQueryTestClamping
		constexpr auto NormalizationType = 0xfc; // EEQSNormalizationType
		constexpr auto ScoreClampMin = 0x100; // FAIDataProviderFloatValue
		constexpr auto ScoreClampMax = 0x138; // FAIDataProviderFloatValue
		constexpr auto ScoringFactor = 0x170; // FAIDataProviderFloatValue
		constexpr auto ReferenceValue = 0x1a8; // FAIDataProviderFloatValue
		constexpr auto bDefineReferenceValue = 0x1e0; // bool
		constexpr auto bWorkOnFloatValues = 0x1f0; // char : 1
	}

	namespace n_UNavMovementComponent {
		constexpr auto NavAgentProps = 0xf0; // FNavAgentProperties
		constexpr auto FixedPathBrakingDistance = 0x120; // float
		constexpr auto bUpdateNavAgentWithOwnersCollision = 0x124; // char : 1
		constexpr auto bUseAccelerationForPaths = 0x124; // char : 1
		constexpr auto bUseFixedBrakingDistanceForPaths = 0x124; // char : 1
		constexpr auto MovementState = 0x125; // FMovementProperties
		constexpr auto PathFollowingComp = 0x128; // UObject*
	}

	namespace n_AGrenadeProjectile {
		constexpr auto Mesh = 0x230; // UStaticMeshComponent*
		constexpr auto Audio = 0x238; // UAudioComponent*
		constexpr auto ExplosionEffectClass = 0x240; // AShooterImpactEffect*
		constexpr auto BounceEffectClass = 0x248; // AShooterImpactEffect*
		constexpr auto ImpactMinVeloc = 0x250; // float
		constexpr auto MinTimeBetweenImpactFX = 0x254; // float
		constexpr auto ExplosionDelay = 0x258; // float
		constexpr auto ExplosionDamage = 0x25c; // int32_t
		constexpr auto ExplosionFalloff = 0x260; // float
		constexpr auto ExplosionRadius = 0x264; // float
		constexpr auto ExplosionSuppression = 0x268; // float
		constexpr auto ExplosionSuppressionRadius = 0x26c; // float
		constexpr auto ExplosionSuppressionFalloff = 0x270; // float
		constexpr auto DamageType = 0x278; // UDamageType*
		constexpr auto bExploded = 0x28c; // char : 1
		constexpr auto ReleaseLocation = 0x290; // FVector
		constexpr auto m_type = 0x29c; // EWeaponType
		constexpr auto OwningTeam = 0x29e; // ETeam
	}

	namespace n_UHLLGunnerUI_AntiTank {
		constexpr auto ArtilleryWeaponInfo = 0x270; // UHLLArmourWeaponUI*
		constexpr auto TraverseValue = 0x278; // UTextBlock*
		constexpr auto ElevationValue = 0x280; // UTextBlock*
		constexpr auto ZoomKeyText = 0x288; // URichTextBlock*
		constexpr auto PrecisionKeyText = 0x290; // URichTextBlock*
		constexpr auto MuzzleOcclusion = 0x298; // UBorder*
	}

	namespace n_AOnlineBeaconHostObject {
		constexpr auto BeaconTypeName = 0x220; // FString
		constexpr auto ClientBeaconActorClass = 0x230; // AOnlineBeaconClient*
		constexpr auto ClientActors = 0x238; // TArray<AOnlineBeaconClient*>
	}

	namespace n_UBlueprint {
		constexpr auto ParentClass = 0x50; // UObject*
		constexpr auto BlueprintType = 0x58; // EBlueprintType
		constexpr auto bRecompileOnLoad = 0x59; // char : 1
		constexpr auto bHasBeenRegenerated = 0x59; // char : 1
		constexpr auto bIsRegeneratingOnLoad = 0x59; // char : 1
		constexpr auto BlueprintSystemVersion = 0x5c; // int32_t
		constexpr auto SimpleConstructionScript = 0x60; // USimpleConstructionScript*
		constexpr auto ComponentTemplates = 0x68; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x78; // TArray<UTimelineTemplate*>
		constexpr auto ComponentClassOverrides = 0x88; // TArray<FBPComponentClassOverride>
		constexpr auto InheritableComponentHandler = 0x98; // UInheritableComponentHandler*
	}

	namespace n_UARPlaneGeometry {
		constexpr auto Orientation = 0xe8; // EARPlaneOrientation
		constexpr auto Center = 0xec; // FVector
		constexpr auto Extent = 0xf8; // FVector
		constexpr auto SubsumedBy = 0x118; // UARPlaneGeometry*
	}

	namespace n_UInputKeySelector {
		constexpr auto WidgetStyle = 0x108; // FButtonStyle
		constexpr auto TextStyle = 0x380; // FTextBlockStyle
		constexpr auto SelectedKey = 0x5e8; // FInputChord
		constexpr auto Font = 0x608; // FSlateFontInfo
		constexpr auto Margin = 0x658; // FMargin
		constexpr auto ColorAndOpacity = 0x668; // FLinearColor
		constexpr auto KeySelectionText = 0x678; // FText
		constexpr auto NoKeySpecifiedText = 0x690; // FText
		constexpr auto bAllowModifierKeys = 0x6a8; // bool
		constexpr auto bAllowGamepadKeys = 0x6a9; // bool
		constexpr auto EscapeKeys = 0x6b0; // TArray<FKey>
		constexpr auto OnKeySelected = 0x6c0; // FMulticastInlineDelegate
		constexpr auto OnIsSelectingKeyChanged = 0x6d0; // FMulticastInlineDelegate
	}

	namespace n_AReconVehiclePassengerSeat {
		constexpr auto InteriorMeshAttachmentRoot = 0x978; // USceneComponent*
		constexpr auto InteriorMesh = 0x980; // UStaticMeshComponent*
		constexpr auto CameraController = 0x988; // USeatCameraController*
	}

	namespace n_UMapLoadingScreenData {
		constexpr auto MapName = 0x30; // FText
		constexpr auto Date = 0x48; // FText
		constexpr auto Location = 0x60; // FText
		constexpr auto GameMode = 0x78; // EGameModeType
		constexpr auto BackgroundImage = 0x80; // UTexture2D*
	}

	namespace n_UParticleModuleTrailSource {
		constexpr auto SourceMethod = 0x30; // ETrail2SourceMethod
		constexpr auto SourceName = 0x34; // FName
		constexpr auto SourceStrength = 0x40; // FRawDistributionFloat
		constexpr auto bLockSourceStength = 0x70; // char : 1
		constexpr auto SourceOffsetCount = 0x74; // int32_t
		constexpr auto SourceOffsetDefaults = 0x78; // TArray<FVector>
		constexpr auto SelectionMethod = 0x88; // EParticleSourceSelectionMethod
		constexpr auto bInheritRotation = 0x8c; // char : 1
	}

	namespace n_UMovieSceneMarginSection {
		constexpr auto TopCurve = 0xe0; // FMovieSceneFloatChannel
		constexpr auto LeftCurve = 0x180; // FMovieSceneFloatChannel
		constexpr auto RightCurve = 0x220; // FMovieSceneFloatChannel
		constexpr auto BottomCurve = 0x2c0; // FMovieSceneFloatChannel
	}

	namespace n_UMaterialExpressionTangentOutput {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UWGT_DialogBoxButton_V2_C {
		constexpr auto UberGraphFrame = 0x258; // FPointerToUberGraphFrame
		constexpr auto ButtonOverlay = 0x260; // UOverlay*
		constexpr auto ButtonPrompt = 0x268; // UImage*
		constexpr auto ColTextHovered = 0x270; // FSlateColor
		constexpr auto ColText = 0x298; // FSlateColor
		constexpr auto InitialisedButtonStyle = 0x2c0; // FButtonStyle
		constexpr auto FocusedButtonStyle = 0x538; // FButtonStyle
		constexpr auto Button = 0x7b0; // UButton*
		constexpr auto ConfirmPromptStyle = 0x7b8; // FSlateBrush
		constexpr auto CancelPromptStyle = 0x840; // FSlateBrush
		constexpr auto PlaystationConfirmButton = 0x8c8; // FSlateBrush
		constexpr auto PlaystationCancelButton = 0x950; // FSlateBrush
		constexpr auto XboxConfirmButton = 0x9d8; // FSlateBrush
		constexpr auto XboxCancelButton = 0xa60; // FSlateBrush
		constexpr auto CurrentButtonIndex = 0xae8; // int32_t
		constexpr auto PlaystationIgnoreButton = 0xaf0; // FSlateBrush
		constexpr auto XboxIgnoreButton = 0xb78; // FSlateBrush
		constexpr auto IgnorePromptStyle = 0xc00; // FSlateBrush
	}

	namespace n_APhysicsThruster {
		constexpr auto ThrusterComponent = 0x220; // UPhysicsThrusterComponent*
	}

	namespace n_UParticleModuleEventReceiverSpawn {
		constexpr auto SpawnCount = 0x40; // FRawDistributionFloat
		constexpr auto bUseParticleTime = 0x70; // char : 1
		constexpr auto bUsePSysLocation = 0x70; // char : 1
		constexpr auto bInheritVelocity = 0x70; // char : 1
		constexpr auto InheritVelocityScale = 0x78; // FRawDistributionVector
		constexpr auto PhysicalMaterials = 0xc0; // TArray<UPhysicalMaterial*>
		constexpr auto bBanPhysicalMaterials = 0xd0; // char : 1
	}

	namespace n_UCrowdManager {
		constexpr auto MyNavData = 0x28; // ANavigationData*
		constexpr auto AvoidanceConfig = 0x30; // TArray<FCrowdAvoidanceConfig>
		constexpr auto SamplingPatterns = 0x40; // TArray<FCrowdAvoidanceSamplingPattern>
		constexpr auto MaxAgents = 0x50; // int32_t
		constexpr auto MaxAgentRadius = 0x54; // float
		constexpr auto MaxAvoidedAgents = 0x58; // int32_t
		constexpr auto MaxAvoidedWalls = 0x5c; // int32_t
		constexpr auto NavmeshCheckInterval = 0x60; // float
		constexpr auto PathOptimizationInterval = 0x64; // float
		constexpr auto SeparationDirClamp = 0x68; // float
		constexpr auto PathOffsetRadiusMultiplier = 0x6c; // float
		constexpr auto bResolveCollisions = 0x70; // char : 1
	}

	namespace n_UStreamMediaSource {
		constexpr auto StreamUrl = 0x88; // FString
	}

	namespace n_UWGT_ServerListItem_V2_C {
		constexpr auto UberGraphFrame = 0x2b0; // FPointerToUberGraphFrame
		constexpr auto RootBorder = 0x2b8; // UBorder*
		constexpr auto RootButton = 0x2c0; // UButton*
		constexpr auto ServerBrowserWidget = 0x2c8; // UWGT_ServerBrowser_V2_C*
	}

	namespace n_AOnlineBeaconClient {
		constexpr auto BeaconOwner = 0x250; // AOnlineBeaconHostObject*
		constexpr auto BeaconConnection = 0x258; // UNetConnection*
		constexpr auto ConnectionState = 0x260; // EBeaconConnectionState
	}

	namespace n_UTextBlock {
		constexpr auto Text = 0x128; // FText
		constexpr auto TextDelegate = 0x140; // FDelegate
		constexpr auto ColorAndOpacity = 0x150; // FSlateColor
		constexpr auto ColorAndOpacityDelegate = 0x178; // FDelegate
		constexpr auto Font = 0x188; // FSlateFontInfo
		constexpr auto StrikeBrush = 0x1d8; // FSlateBrush
		constexpr auto ShadowOffset = 0x260; // FVector2D
		constexpr auto ShadowColorAndOpacity = 0x268; // FLinearColor
		constexpr auto ShadowColorAndOpacityDelegate = 0x278; // FDelegate
		constexpr auto MinDesiredWidth = 0x288; // float
		constexpr auto bWrapWithInvalidationPanel = 0x28c; // bool
		constexpr auto bAutoWrapText = 0x28d; // bool
		constexpr auto bSimpleTextMode = 0x28e; // bool
	}

	namespace n_UHLLParticleModule_KillSphere {
		constexpr auto SphereRadius = 0x30; // FRawDistributionFloat
	}

	namespace n_AHLLSupplyDropBase {
		constexpr auto SceneRoot = 0x288; // USceneComponent*
		constexpr auto Mesh = 0x290; // UStaticMeshComponent*
		constexpr auto MapComponent = 0x298; // UHLLMapComponent*
		constexpr auto IndicatorComponent = 0x2a0; // UHLLIndicatorComponent*
		constexpr auto HealthComponent = 0x2a8; // UHLLSimpleHealthComponent*
		constexpr auto DismantleTime = 0x2b0; // float
		constexpr auto DisplayName = 0x2b8; // FText
		constexpr auto OwningTeam = 0x2d0; // ETeam
		constexpr auto DamageFilterType = 0x2d1; // EHLLDamageFilterType
		constexpr auto SpawnedByPlayer = 0x2d8; // AShooterPlayerState*
	}

	namespace n_UBlueprintCore {
		constexpr auto SkeletonGeneratedClass = 0x28; // UObject*
		constexpr auto GeneratedClass = 0x30; // UObject*
		constexpr auto bLegacyNeedToPurgeSkelRefs = 0x38; // bool
		constexpr auto BlueprintGuid = 0x3c; // FGuid
	}

	namespace n_UParticleModuleAccelerationOverLifetime {
		constexpr auto AccelOverLife = 0x38; // FRawDistributionVector
	}

	namespace n_UInputComponent {
		constexpr auto CachedKeyToActionInfo = 0x120; // TArray<FCachedKeyToActionInfo>
	}

	namespace n_UEnvQueryNode {
		constexpr auto VerNum = 0x28; // int32_t
	}

	namespace n_UBTTask_RunBehaviorDynamic {
		constexpr auto InjectionTag = 0x70; // FGameplayTag
		constexpr auto DefaultBehaviorAsset = 0x78; // UBehaviorTree*
		constexpr auto BehaviorAsset = 0x80; // UBehaviorTree*
	}

	namespace n_AHLLArmourWeapon_Ballistic {
		constexpr auto ZeroAngles = 0x470; // TArray<FZeroAngle>
		constexpr auto ZeroAngleIndex = 0x480; // char
		constexpr auto WeaponSeed = 0x481; // FBallisticShotID
		constexpr auto RepShot = 0x484; // FRepShot
		constexpr auto ShotSpread = 0x4a0; // float
		constexpr auto BallisticHandler = 0x4a8; // UHLLBallisticsComponent_Vehicle*
	}

	namespace n_AHLLCommanderAbility_PlaneBase {
		constexpr auto CoverageInfo = 0x370; // FVector
		constexpr auto PlaneMesh = 0x380; // UStaticMeshComponent*
		constexpr auto PlaneAudio = 0x388; // UAudioComponent*
		constexpr auto PlaneFlybyAudio = 0x390; // UAudioComponent*
		constexpr auto PlaneParticles = 0x398; // UParticleSystemComponent*
		constexpr auto FlightTime = 0x3a0; // float
		constexpr auto PlaneSpeed = 0x3a4; // float
		constexpr auto PlaneAltitude = 0x3a8; // float
		constexpr auto SpawnOffset = 0x3ac; // float
		constexpr auto DespawnOffset = 0x3b0; // float
	}

	namespace n_UHLLMainMenuBase {
		constexpr auto bCanZoom = 0x230; // char : 1
	}

	namespace n_UHLLRoleProgressionItem {
		constexpr auto CountTime = 0x230; // float
		constexpr auto PromotedSound = 0x238; // FSlateSound
		constexpr auto LoopCountSound = 0x250; // FSlateSound
		constexpr auto StopCountSound = 0x268; // FSlateSound
		constexpr auto Role = 0x280; // EPlayerRole
		constexpr auto Anim_FinishCount = 0x288; // UWidgetAnimation*
		constexpr auto Anim_Promoted = 0x290; // UWidgetAnimation*
		constexpr auto Anim_Show = 0x298; // UWidgetAnimation*
		constexpr auto RoleText = 0x2a0; // UTextBlock*
		constexpr auto RoleLevelText = 0x2a8; // UTextBlock*
		constexpr auto RoleIcon = 0x2b0; // UImage*
		constexpr auto InitialBar = 0x2b8; // UProgressBar*
		constexpr auto UpdateBar = 0x2c0; // UProgressBar*
		constexpr auto ExpText = 0x2c8; // UTextBlock*
		constexpr auto CounterLoopingAC = 0x2d0; // TWeakObjectPtr<UAudioComponent>
	}

	namespace n_AMaterialInstanceActor {
		constexpr auto TargetActors = 0x220; // TArray<AActor*>
	}

	namespace n_UDebugCameraControllerSettings {
		constexpr auto CycleViewModes = 0x38; // TArray<FDebugCameraControllerSettingsViewModeIndex>
	}

	namespace n_UHLLUseContext_HealWeapon {
		constexpr auto HealText = 0x238; // URichTextBlock*
		constexpr auto RadialProg = 0x240; // UImage*
		constexpr auto IconImage = 0x248; // UImage*
	}

	namespace n_APhysicsVolume {
		constexpr auto TerminalVelocity = 0x258; // float
		constexpr auto Priority = 0x25c; // int32_t
		constexpr auto FluidFriction = 0x260; // float
		constexpr auto bWaterVolume = 0x264; // char : 1
		constexpr auto bPhysicsOnContact = 0x264; // char : 1
	}

	namespace n_UWGT_CommendTooltip_List_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto 1 = 0x238; // UTextBlock*
		constexpr auto 2 = 0x240; // UTextBlock*
		constexpr auto 3 = 0x248; // UTextBlock*
		constexpr auto 4 = 0x250; // UTextBlock*
		constexpr auto 5 = 0x258; // UTextBlock*
		constexpr auto OwningWidget = 0x260; // UHLLRoundSummaryPlayer*
		constexpr auto NameWidgets = 0x268; // TArray<UTextBlock*>
		constexpr auto MaxCommendations = 0x278; // int32_t
	}

	namespace n_UNetDriver {
		constexpr auto NetConnectionClassName = 0x30; // FString
		constexpr auto ReplicationDriverClassName = 0x40; // FString
		constexpr auto MaxDownloadSize = 0x50; // int32_t
		constexpr auto bClampListenServerTickRate = 0x54; // char : 1
		constexpr auto NetServerMaxTickRate = 0x58; // int32_t
		constexpr auto MaxNetTickRate = 0x5c; // int32_t
		constexpr auto MaxInternetClientRate = 0x60; // int32_t
		constexpr auto MaxClientRate = 0x64; // int32_t
		constexpr auto ServerTravelPause = 0x68; // float
		constexpr auto SpawnPrioritySeconds = 0x6c; // float
		constexpr auto RelevantTimeout = 0x70; // float
		constexpr auto KeepAliveTime = 0x74; // float
		constexpr auto InitialConnectTimeout = 0x78; // float
		constexpr auto ConnectionTimeout = 0x7c; // float
		constexpr auto TimeoutMultiplierForUnoptimizedBuilds = 0x80; // float
		constexpr auto bNoTimeouts = 0x84; // bool
		constexpr auto bNeverApplyNetworkEmulationSettings = 0x85; // bool
		constexpr auto ServerConnection = 0x88; // UNetConnection*
		constexpr auto ClientConnections = 0x90; // TArray<UNetConnection*>
		constexpr auto RecentlyDisconnectedTrackingTime = 0x100; // int32_t
		constexpr auto World = 0x140; // UWorld*
		constexpr auto WorldPackage = 0x148; // UPackage*
		constexpr auto NetConnectionClass = 0x170; // UObject*
		constexpr auto ReplicationDriverClass = 0x178; // UObject*
		constexpr auto NetDriverName = 0x190; // FName
		constexpr auto ChannelDefinitions = 0x198; // TArray<FChannelDefinition>
		constexpr auto ChannelDefinitionMap = 0x1a8; // TMap<FName, FChannelDefinition>
		constexpr auto ActorChannelPool = 0x1f8; // TArray<UChannel*>
		constexpr auto Time = 0x210; // float
		constexpr auto ReplicationDriver = 0x6e8; // UReplicationDriver*
	}

	namespace n_USoundSourceBus {
		constexpr auto SourceBusChannels = 0x308; // ESourceBusChannels
		constexpr auto SourceBusDuration = 0x30c; // float
		constexpr auto bAutoDeactivateWhenSilent = 0x310; // char : 1
	}

	namespace n_UInterpTrackInstBoolProp {
		constexpr auto ResetBool = 0x60; // bool
	}

	namespace n_UFoliageType_Actor {
		constexpr auto ActorClass = 0x380; // AActor*
		constexpr auto bShouldAttachToBaseComponent = 0x388; // bool
	}

	namespace n_ACineCameraActor {
		constexpr auto LookatTrackingSettings = 0x790; // FCameraLookatTrackingSettings
	}

	namespace n_UMaterialExpressionChannelMaskParameter {
		constexpr auto MaskChannel = 0x70; // EChannelMaskParameterColor
		constexpr auto Input = 0x74; // FExpressionInput
	}

	namespace n_UMaterialExpressionArctangent {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UTextPropertyTestObject {
		constexpr auto DefaultedText = 0x28; // FText
		constexpr auto UndefaultedText = 0x40; // FText
		constexpr auto TransientText = 0x58; // FText
	}

	namespace n_UEnvQueryGenerator_Composite {
		constexpr auto Generators = 0x50; // TArray<UEnvQueryGenerator*>
		constexpr auto bAllowDifferentItemTypes = 0x60; // char : 1
		constexpr auto bHasMatchingItemType = 0x60; // char : 1
		constexpr auto ForcedItemType = 0x68; // UEnvQueryItemType*
	}

	namespace n_UUnitLeaderSettings_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto GridPanel_84 = 0x238; // UGridPanel*
		constexpr auto InvitePlayersButton = 0x240; // UOptionButton_V2_C*
		constexpr auto RootBorder = 0x248; // UBorder*
		constexpr auto UnitDesignationToggle = 0x250; // UOptionButton_V2_C*
		constexpr auto UnitPrivacyToggle = 0x258; // UOptionButton_V2_C*
		constexpr auto VOIPToggle = 0x260; // UOptionButton_V2_C*
		constexpr auto DeploymentScreen = 0x268; // UDeploymentScreen_V2_C*
	}

	namespace n_UMaterialExpressionParticleSubUV {
		constexpr auto bBlend = 0xd0; // char : 1
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureReplace {
		constexpr auto Default = 0x40; // FExpressionInput
		constexpr auto VirtualTextureOutput = 0x54; // FExpressionInput
	}

	namespace n_UGameMapsSettings {
		constexpr auto LocalMapOptions = 0x28; // FString
		constexpr auto TransitionMap = 0x38; // FSoftObjectPath
		constexpr auto bUseSplitscreen = 0x50; // bool
		constexpr auto TwoPlayerSplitscreenLayout = 0x51; // ETwoPlayerSplitScreenType
		constexpr auto ThreePlayerSplitscreenLayout = 0x52; // EThreePlayerSplitScreenType
		constexpr auto FourPlayerSplitscreenLayout = 0x53; // EFourPlayerSplitScreenType
		constexpr auto bOffsetPlayerGamepadIds = 0x54; // bool
		constexpr auto GameInstanceClass = 0x58; // FSoftClassPath
		constexpr auto GameDefaultMap = 0x70; // FSoftObjectPath
		constexpr auto ServerDefaultMap = 0x88; // FSoftObjectPath
		constexpr auto GlobalDefaultGameMode = 0xa0; // FSoftClassPath
		constexpr auto GlobalDefaultServerGameMode = 0xb8; // FSoftClassPath
		constexpr auto GameModeMapPrefixes = 0xd0; // TArray<FGameModeName>
		constexpr auto GameModeClassAliases = 0xe0; // TArray<FGameModeName>
	}

	namespace n_ACinematicPantherStub {
		constexpr auto TankMesh = 0x220; // USkeletalMeshComponent*
		constexpr auto AllTrackTiles = 0x228; // TArray<UStaticMeshComponent*>
		constexpr auto TrackTile_000 = 0x238; // UStaticMeshComponent*
		constexpr auto TrackTile_001 = 0x240; // UStaticMeshComponent*
		constexpr auto TrackTile_002 = 0x248; // UStaticMeshComponent*
		constexpr auto TrackTile_003 = 0x250; // UStaticMeshComponent*
		constexpr auto TrackTile_004 = 0x258; // UStaticMeshComponent*
		constexpr auto TrackTile_005 = 0x260; // UStaticMeshComponent*
		constexpr auto TrackTile_006 = 0x268; // UStaticMeshComponent*
		constexpr auto TrackTile_007 = 0x270; // UStaticMeshComponent*
		constexpr auto TrackTile_008 = 0x278; // UStaticMeshComponent*
		constexpr auto TrackTile_009 = 0x280; // UStaticMeshComponent*
		constexpr auto TrackTile_010 = 0x288; // UStaticMeshComponent*
		constexpr auto TrackTile_011 = 0x290; // UStaticMeshComponent*
		constexpr auto TrackTile_012 = 0x298; // UStaticMeshComponent*
		constexpr auto TrackTile_013 = 0x2a0; // UStaticMeshComponent*
		constexpr auto TrackTile_014 = 0x2a8; // UStaticMeshComponent*
		constexpr auto TrackTile_015 = 0x2b0; // UStaticMeshComponent*
		constexpr auto TrackTile_016 = 0x2b8; // UStaticMeshComponent*
		constexpr auto TrackTile_017 = 0x2c0; // UStaticMeshComponent*
		constexpr auto TrackTile_018 = 0x2c8; // UStaticMeshComponent*
		constexpr auto TrackTile_019 = 0x2d0; // UStaticMeshComponent*
		constexpr auto TrackTile_020 = 0x2d8; // UStaticMeshComponent*
		constexpr auto TrackTile_021 = 0x2e0; // UStaticMeshComponent*
		constexpr auto TrackTile_022 = 0x2e8; // UStaticMeshComponent*
		constexpr auto TrackTile_023 = 0x2f0; // UStaticMeshComponent*
		constexpr auto TrackTile_024 = 0x2f8; // UStaticMeshComponent*
		constexpr auto TrackTile_025 = 0x300; // UStaticMeshComponent*
		constexpr auto TrackTile_026 = 0x308; // UStaticMeshComponent*
		constexpr auto TrackTile_027 = 0x310; // UStaticMeshComponent*
		constexpr auto TrackTile_028 = 0x318; // UStaticMeshComponent*
		constexpr auto TrackTile_029 = 0x320; // UStaticMeshComponent*
		constexpr auto TrackTile_030 = 0x328; // UStaticMeshComponent*
		constexpr auto TrackTile_031 = 0x330; // UStaticMeshComponent*
		constexpr auto TrackTile_032 = 0x338; // UStaticMeshComponent*
		constexpr auto TrackTile_033 = 0x340; // UStaticMeshComponent*
		constexpr auto TrackTile_034 = 0x348; // UStaticMeshComponent*
		constexpr auto TrackTile_035 = 0x350; // UStaticMeshComponent*
		constexpr auto TrackTile_036 = 0x358; // UStaticMeshComponent*
		constexpr auto TrackTile_037 = 0x360; // UStaticMeshComponent*
		constexpr auto TrackTile_038 = 0x368; // UStaticMeshComponent*
		constexpr auto TrackTile_039 = 0x370; // UStaticMeshComponent*
		constexpr auto TrackTile_040 = 0x378; // UStaticMeshComponent*
		constexpr auto TrackTile_041 = 0x380; // UStaticMeshComponent*
		constexpr auto TrackTile_042 = 0x388; // UStaticMeshComponent*
		constexpr auto TrackTile_043 = 0x390; // UStaticMeshComponent*
		constexpr auto TrackTile_044 = 0x398; // UStaticMeshComponent*
		constexpr auto TrackTile_045 = 0x3a0; // UStaticMeshComponent*
		constexpr auto TrackTile_046 = 0x3a8; // UStaticMeshComponent*
		constexpr auto TrackTile_047 = 0x3b0; // UStaticMeshComponent*
		constexpr auto TrackTile_048 = 0x3b8; // UStaticMeshComponent*
		constexpr auto TrackTile_049 = 0x3c0; // UStaticMeshComponent*
		constexpr auto TrackTile_050 = 0x3c8; // UStaticMeshComponent*
		constexpr auto TrackTile_051 = 0x3d0; // UStaticMeshComponent*
		constexpr auto TrackTile_052 = 0x3d8; // UStaticMeshComponent*
		constexpr auto TrackTile_053 = 0x3e0; // UStaticMeshComponent*
		constexpr auto TrackTile_054 = 0x3e8; // UStaticMeshComponent*
		constexpr auto TrackTile_055 = 0x3f0; // UStaticMeshComponent*
		constexpr auto TrackTile_056 = 0x3f8; // UStaticMeshComponent*
		constexpr auto TrackTile_057 = 0x400; // UStaticMeshComponent*
		constexpr auto TrackTile_058 = 0x408; // UStaticMeshComponent*
		constexpr auto TrackTile_059 = 0x410; // UStaticMeshComponent*
		constexpr auto TrackTile_060 = 0x418; // UStaticMeshComponent*
		constexpr auto TrackTile_061 = 0x420; // UStaticMeshComponent*
		constexpr auto TrackTile_062 = 0x428; // UStaticMeshComponent*
		constexpr auto TrackTile_063 = 0x430; // UStaticMeshComponent*
		constexpr auto TrackTile_064 = 0x438; // UStaticMeshComponent*
		constexpr auto TrackTile_065 = 0x440; // UStaticMeshComponent*
		constexpr auto TrackTile_066 = 0x448; // UStaticMeshComponent*
		constexpr auto TrackTile_067 = 0x450; // UStaticMeshComponent*
		constexpr auto TrackTile_068 = 0x458; // UStaticMeshComponent*
		constexpr auto TrackTile_069 = 0x460; // UStaticMeshComponent*
		constexpr auto TrackTile_070 = 0x468; // UStaticMeshComponent*
		constexpr auto TrackTile_071 = 0x470; // UStaticMeshComponent*
		constexpr auto TrackTile_072 = 0x478; // UStaticMeshComponent*
		constexpr auto TrackTile_073 = 0x480; // UStaticMeshComponent*
		constexpr auto TrackTile_074 = 0x488; // UStaticMeshComponent*
		constexpr auto TrackTile_075 = 0x490; // UStaticMeshComponent*
		constexpr auto TrackTile_076 = 0x498; // UStaticMeshComponent*
		constexpr auto TrackTile_077 = 0x4a0; // UStaticMeshComponent*
		constexpr auto TrackTile_078 = 0x4a8; // UStaticMeshComponent*
		constexpr auto TrackTile_079 = 0x4b0; // UStaticMeshComponent*
		constexpr auto TrackTile_080 = 0x4b8; // UStaticMeshComponent*
		constexpr auto TrackTile_081 = 0x4c0; // UStaticMeshComponent*
		constexpr auto TrackTile_082 = 0x4c8; // UStaticMeshComponent*
		constexpr auto TrackTile_083 = 0x4d0; // UStaticMeshComponent*
		constexpr auto TrackTile_084 = 0x4d8; // UStaticMeshComponent*
		constexpr auto TrackTile_085 = 0x4e0; // UStaticMeshComponent*
		constexpr auto TrackTile_086 = 0x4e8; // UStaticMeshComponent*
		constexpr auto TrackTile_087 = 0x4f0; // UStaticMeshComponent*
		constexpr auto TrackTile_088 = 0x4f8; // UStaticMeshComponent*
		constexpr auto TrackTile_089 = 0x500; // UStaticMeshComponent*
		constexpr auto TrackTile_090 = 0x508; // UStaticMeshComponent*
		constexpr auto TrackTile_091 = 0x510; // UStaticMeshComponent*
		constexpr auto TrackTile_092 = 0x518; // UStaticMeshComponent*
		constexpr auto TrackTile_093 = 0x520; // UStaticMeshComponent*
		constexpr auto TrackTile_094 = 0x528; // UStaticMeshComponent*
		constexpr auto TrackTile_095 = 0x530; // UStaticMeshComponent*
		constexpr auto TrackTile_096 = 0x538; // UStaticMeshComponent*
		constexpr auto TrackTile_097 = 0x540; // UStaticMeshComponent*
		constexpr auto TrackTile_098 = 0x548; // UStaticMeshComponent*
		constexpr auto TrackTile_099 = 0x550; // UStaticMeshComponent*
		constexpr auto TrackTile_101 = 0x558; // UStaticMeshComponent*
		constexpr auto TrackTile_102 = 0x560; // UStaticMeshComponent*
		constexpr auto TrackTile_103 = 0x568; // UStaticMeshComponent*
		constexpr auto TrackTile_104 = 0x570; // UStaticMeshComponent*
		constexpr auto TrackTile_105 = 0x578; // UStaticMeshComponent*
		constexpr auto TrackTile_106 = 0x580; // UStaticMeshComponent*
		constexpr auto TrackTile_107 = 0x588; // UStaticMeshComponent*
		constexpr auto TrackTile_108 = 0x590; // UStaticMeshComponent*
		constexpr auto TrackTile_109 = 0x598; // UStaticMeshComponent*
		constexpr auto TrackTile_110 = 0x5a0; // UStaticMeshComponent*
		constexpr auto TrackTile_111 = 0x5a8; // UStaticMeshComponent*
		constexpr auto TrackTile_112 = 0x5b0; // UStaticMeshComponent*
		constexpr auto TrackTile_113 = 0x5b8; // UStaticMeshComponent*
		constexpr auto TrackTile_114 = 0x5c0; // UStaticMeshComponent*
		constexpr auto TrackTile_115 = 0x5c8; // UStaticMeshComponent*
		constexpr auto TrackTile_116 = 0x5d0; // UStaticMeshComponent*
		constexpr auto TrackTile_117 = 0x5d8; // UStaticMeshComponent*
		constexpr auto TrackTile_118 = 0x5e0; // UStaticMeshComponent*
		constexpr auto TrackTile_119 = 0x5e8; // UStaticMeshComponent*
		constexpr auto TrackTile_120 = 0x5f0; // UStaticMeshComponent*
		constexpr auto TrackTile_121 = 0x5f8; // UStaticMeshComponent*
		constexpr auto TrackTile_122 = 0x600; // UStaticMeshComponent*
		constexpr auto TrackTile_123 = 0x608; // UStaticMeshComponent*
		constexpr auto TrackTile_124 = 0x610; // UStaticMeshComponent*
		constexpr auto TrackTile_125 = 0x618; // UStaticMeshComponent*
		constexpr auto TrackTile_126 = 0x620; // UStaticMeshComponent*
		constexpr auto TrackTile_127 = 0x628; // UStaticMeshComponent*
		constexpr auto TrackTile_128 = 0x630; // UStaticMeshComponent*
		constexpr auto TrackTile_129 = 0x638; // UStaticMeshComponent*
		constexpr auto TrackTile_130 = 0x640; // UStaticMeshComponent*
		constexpr auto TrackTile_131 = 0x648; // UStaticMeshComponent*
		constexpr auto TrackTile_132 = 0x650; // UStaticMeshComponent*
		constexpr auto TrackTile_133 = 0x658; // UStaticMeshComponent*
		constexpr auto TrackTile_134 = 0x660; // UStaticMeshComponent*
		constexpr auto TrackTile_135 = 0x668; // UStaticMeshComponent*
		constexpr auto TrackTile_136 = 0x670; // UStaticMeshComponent*
		constexpr auto TrackTile_137 = 0x678; // UStaticMeshComponent*
		constexpr auto TrackTile_138 = 0x680; // UStaticMeshComponent*
		constexpr auto TrackTile_139 = 0x688; // UStaticMeshComponent*
		constexpr auto TrackTile_140 = 0x690; // UStaticMeshComponent*
		constexpr auto TrackTile_141 = 0x698; // UStaticMeshComponent*
		constexpr auto TrackTile_142 = 0x6a0; // UStaticMeshComponent*
		constexpr auto TrackTile_143 = 0x6a8; // UStaticMeshComponent*
		constexpr auto TrackTile_144 = 0x6b0; // UStaticMeshComponent*
		constexpr auto TrackTile_145 = 0x6b8; // UStaticMeshComponent*
		constexpr auto TrackTile_146 = 0x6c0; // UStaticMeshComponent*
		constexpr auto TrackTile_147 = 0x6c8; // UStaticMeshComponent*
		constexpr auto TrackTile_148 = 0x6d0; // UStaticMeshComponent*
		constexpr auto TrackTile_149 = 0x6d8; // UStaticMeshComponent*
		constexpr auto TrackTile_150 = 0x6e0; // UStaticMeshComponent*
		constexpr auto TrackTile_151 = 0x6e8; // UStaticMeshComponent*
		constexpr auto TrackTile_152 = 0x6f0; // UStaticMeshComponent*
		constexpr auto TrackTile_153 = 0x6f8; // UStaticMeshComponent*
		constexpr auto TrackTile_154 = 0x700; // UStaticMeshComponent*
		constexpr auto TrackTile_155 = 0x708; // UStaticMeshComponent*
		constexpr auto TrackTile_156 = 0x710; // UStaticMeshComponent*
		constexpr auto TrackTile_157 = 0x718; // UStaticMeshComponent*
		constexpr auto TrackTile_158 = 0x720; // UStaticMeshComponent*
		constexpr auto TrackTile_159 = 0x728; // UStaticMeshComponent*
		constexpr auto TrackTile_160 = 0x730; // UStaticMeshComponent*
		constexpr auto TrackTile_161 = 0x738; // UStaticMeshComponent*
		constexpr auto TrackTile_162 = 0x740; // UStaticMeshComponent*
		constexpr auto TrackTile_163 = 0x748; // UStaticMeshComponent*
		constexpr auto TrackTile_164 = 0x750; // UStaticMeshComponent*
		constexpr auto TrackTile_165 = 0x758; // UStaticMeshComponent*
		constexpr auto TrackTile_166 = 0x760; // UStaticMeshComponent*
		constexpr auto TrackTile_167 = 0x768; // UStaticMeshComponent*
		constexpr auto TrackTile_168 = 0x770; // UStaticMeshComponent*
		constexpr auto TrackTile_169 = 0x778; // UStaticMeshComponent*
		constexpr auto TrackTile_170 = 0x780; // UStaticMeshComponent*
		constexpr auto TrackTile_171 = 0x788; // UStaticMeshComponent*
		constexpr auto TrackTile_172 = 0x790; // UStaticMeshComponent*
		constexpr auto TrackTile_173 = 0x798; // UStaticMeshComponent*
		constexpr auto TrackTile_174 = 0x7a0; // UStaticMeshComponent*
		constexpr auto TrackTile_175 = 0x7a8; // UStaticMeshComponent*
		constexpr auto TrackTile_176 = 0x7b0; // UStaticMeshComponent*
		constexpr auto TrackTile_177 = 0x7b8; // UStaticMeshComponent*
		constexpr auto TrackTile_178 = 0x7c0; // UStaticMeshComponent*
		constexpr auto TrackTile_179 = 0x7c8; // UStaticMeshComponent*
		constexpr auto TrackTile_180 = 0x7d0; // UStaticMeshComponent*
		constexpr auto TrackTile_181 = 0x7d8; // UStaticMeshComponent*
		constexpr auto TrackTile_182 = 0x7e0; // UStaticMeshComponent*
		constexpr auto TrackTile_183 = 0x7e8; // UStaticMeshComponent*
		constexpr auto TrackTile_184 = 0x7f0; // UStaticMeshComponent*
		constexpr auto TrackTile_185 = 0x7f8; // UStaticMeshComponent*
		constexpr auto TrackTile_186 = 0x800; // UStaticMeshComponent*
		constexpr auto TrackTile_187 = 0x808; // UStaticMeshComponent*
		constexpr auto TrackTile_188 = 0x810; // UStaticMeshComponent*
		constexpr auto TrackTile_189 = 0x818; // UStaticMeshComponent*
		constexpr auto TrackTile_190 = 0x820; // UStaticMeshComponent*
		constexpr auto TrackTile_191 = 0x828; // UStaticMeshComponent*
		constexpr auto TrackTile_192 = 0x830; // UStaticMeshComponent*
	}

	namespace n_UEditableTextBoxWidgetStyle {
		constexpr auto EditableTextBoxStyle = 0x30; // FEditableTextBoxStyle
	}

	namespace n_APlayerStart {
		constexpr auto PlayerStartTag = 0x248; // FName
	}

	namespace n_UWGT_ReplenishAmmoCooldownNotification_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Pulse = 0x238; // UWidgetAnimation*
		constexpr auto Rotate = 0x240; // UWidgetAnimation*
		constexpr auto FadeInOut = 0x248; // UWidgetAnimation*
		constexpr auto BG = 0x250; // UImage*
		constexpr auto Icon = 0x258; // UImage*
		constexpr auto Overlay = 0x260; // UOverlay*
		constexpr auto Rotator = 0x268; // UImage*
		constexpr auto Image = 0x270; // FSlateBrush
		constexpr auto bForSupplies = 0x2f8; // bool
	}

	namespace n_AHLLMapData_Basic {
		constexpr auto ObjectTeam = 0x240; // ETeam
	}

	namespace n_UArrowComponent {
		constexpr auto ArrowColor = 0x410; // FColor
		constexpr auto ArrowSize = 0x414; // float
		constexpr auto ScreenSize = 0x418; // float
		constexpr auto bIsScreenSizeScaled = 0x41c; // char : 1
		constexpr auto bTreatAsASprite = 0x41c; // char : 1
	}

	namespace n_UWmfMediaSettings {
		constexpr auto AllowNonStandardCodecs = 0x28; // bool
		constexpr auto LowLatency = 0x29; // bool
		constexpr auto NativeAudioOut = 0x2a; // bool
		constexpr auto HardwareAcceleratedVideoDecoding = 0x2b; // bool
	}

	namespace n_AHLLMapData_HalfTrack {
		constexpr auto LinkedSpawn = 0x260; // AMobileSpawn*
	}

	namespace n_UHLLUseContext_LetGo {
		constexpr auto PulseAnimation = 0x238; // UWidgetAnimation*
		constexpr auto HealText = 0x240; // URichTextBlock*
		constexpr auto RadialProg = 0x248; // UImage*
	}

	namespace n_UHLLVoteDataComponent {
		constexpr auto VoteLifetime = 0xb8; // float
		constexpr auto VoteCompletionTime = 0xbc; // float
		constexpr auto DefaultThresholds = 0xc0; // TArray<FVoteThreshold>
		constexpr auto VoteTargetCooldown = 0xd0; // float
		constexpr auto VoteInstigatorCooldown = 0xd4; // float
		constexpr auto bVoteKickEnabled = 0xd8; // char : 1
		constexpr auto StaticData = 0xe0; // FVoteDataContainer_Static
		constexpr auto DynamicData = 0x1f8; // FVoteDataContainer_Dynamic
	}

	namespace n_UAnimBlueprintGeneratedClass {
		constexpr auto BakedStateMachines = 0x330; // TArray<FBakedAnimationStateMachine>
		constexpr auto TargetSkeleton = 0x340; // USkeleton*
		constexpr auto AnimNotifies = 0x348; // TArray<FAnimNotifyEvent>
		constexpr auto OrderedSavedPoseIndicesMap = 0x358; // TMap<FName, FCachedPoseIndices>
		constexpr auto SyncGroupNames = 0x428; // TArray<FName>
		constexpr auto EvaluateGraphExposedInputs = 0x438; // TArray<FExposedValueHandler>
		constexpr auto GraphAssetPlayerInformation = 0x448; // TMap<FName, FGraphAssetPlayerInformation>
		constexpr auto GraphBlendOptions = 0x498; // TMap<FName, FAnimGraphBlendOptions>
	}

	namespace n_UArtyTurnControllerComponent {
		constexpr auto GunnerSeat = 0x488; // AHLLSeat_ArtilleryGunner*
		constexpr auto LoaderSeat = 0x490; // AHLLSeat_ArtilleryLoader*
		constexpr auto CharacterTurretGuard = 0x498; // UCapsuleComponent*
		constexpr auto TurnAudio = 0x4a0; // UAudioComponent*
		constexpr auto TurnVibrationController = 0x4a8; // UVibrationEventController*
	}

	namespace n_UHLLCommanderUI {
		constexpr auto SubCategoryWidgetClass = 0x240; // UHLLCommanderUISubCategory*
		constexpr auto DefaultTooltip = 0x248; // FText
		constexpr auto ItemTooltip = 0x260; // FText
		constexpr auto ListItems = 0x278; // TArray<UHLLCommanderUIItem*>
		constexpr auto OrderedListItems = 0x288; // TArray<FScrollerItems>
		constexpr auto SelectedItem = 0x298; // UHLLCommanderUIItem*
		constexpr auto HoveredItem = 0x2a0; // UHLLCommanderUIItem*
		constexpr auto SubCategoryWidgets = 0x2a8; // TArray<UHLLCommanderUISubCategory*>
		constexpr auto AbilityTooltip = 0x2c0; // UTextBlock*
		constexpr auto MunitionsScroller = 0x2c8; // UScrollBox*
		constexpr auto ManpowerScroller = 0x2d0; // UScrollBox*
		constexpr auto FuelScroller = 0x2d8; // UScrollBox*
	}

	namespace n_UDialogueWave {
		constexpr auto bMature = 0x28; // char : 1
		constexpr auto bOverride_SubtitleOverride = 0x28; // char : 1
		constexpr auto SpokenText = 0x30; // FString
		constexpr auto SubtitleOverride = 0x40; // FString
		constexpr auto ContextMappings = 0x50; // TArray<FDialogueContextMapping>
		constexpr auto LocalizationGUID = 0x60; // FGuid
	}

	namespace n_AHLLAbility_PassiveBase {
		constexpr auto AbilityTime = 0x350; // float
	}

	namespace n_UMaterialExpressionSpriteTextureSampler {
		constexpr auto bSampleAdditionalTextures = 0xf0; // bool
		constexpr auto AdditionalSlotIndex = 0xf4; // int32_t
		constexpr auto SlotDisplayName = 0xf8; // FText
	}

	namespace n_ABaseLineSectorSpawn {
		constexpr auto Group = 0x3f0; // int32_t
	}

	namespace n_AHLLArmourDebugger {
		constexpr auto RootBillboard = 0x220; // UBillboardComponent*
		constexpr auto ArrowComponent = 0x228; // UArrowComponent*
		constexpr auto DebugTarget = 0x230; // AActor*
		constexpr auto Expansion = 0x238; // float
		constexpr auto NumX = 0x23c; // char
		constexpr auto NumY = 0x23d; // char
		constexpr auto NumZ = 0x23e; // char
		constexpr auto WallSizeY = 0x240; // float
		constexpr auto WallSizeZ = 0x244; // float
		constexpr auto WallTraceLength = 0x248; // float
		constexpr auto WallRandomiseRot = 0x24c; // float
		constexpr auto TestProfile = 0x250; // FCollisionProfileName
		constexpr auto bVisualizeTraceVectors = 0x258; // char : 1
		constexpr auto bVisualizeHits = 0x258; // char : 1
		constexpr auto bHitsByArmourBox = 0x258; // char : 1
		constexpr auto bHitsAngleRejection = 0x258; // char : 1
		constexpr auto bTraceComplex = 0x258; // char : 1
	}

	namespace n_UHTP_Widget_Role_Loadout_MachineGunner_C {
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_6 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_13 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x260; // UImage*
		constexpr auto Image_10 = 0x268; // UImage*
		constexpr auto Image_17 = 0x270; // UImage*
	}

	namespace n_UWGT_RoundSummaryStatus_C {
		constexpr auto HB_Fuel = 0x280; // UHorizontalBox*
		constexpr auto HB_Manpower = 0x288; // UHorizontalBox*
		constexpr auto HB_Munitions = 0x290; // UHorizontalBox*
	}

	namespace n_UHLLAdminCamUI {
		constexpr auto PlayerSearchPanel = 0x230; // UWidget*
		constexpr auto KickBanPanel = 0x238; // UWidget*
		constexpr auto HotkeyPanel = 0x240; // UWidget*
		constexpr auto PlayerSearchEntryBox = 0x248; // UScrollBox*
		constexpr auto PlayerNameFilter = 0x250; // UEditableTextBox*
		constexpr auto KickBanReasonEntry = 0x258; // UEditableTextBox*
		constexpr auto SpeedBar = 0x260; // UProgressBar*
		constexpr auto NumPlayersText = 0x268; // UTextBlock*
		constexpr auto PlayerEntryWidget = 0x270; // UHLLAdminCamPlayerEntry*
		constexpr auto PlayerWidgets = 0x278; // TArray<UHLLAdminCamPlayerEntry*>
		constexpr auto SelectedPlayer = 0x288; // AShooterPlayerState*
	}

	namespace n_USoundNodeGroupControl {
		constexpr auto GroupSizes = 0x48; // TArray<int32_t>
	}

	namespace n_UMaterialExpressionRotateAboutAxis {
		constexpr auto NormalizedRotationAxis = 0x40; // FExpressionInput
		constexpr auto RotationAngle = 0x54; // FExpressionInput
		constexpr auto PivotPoint = 0x68; // FExpressionInput
		constexpr auto Position = 0x7c; // FExpressionInput
		constexpr auto Period = 0x90; // float
	}

	namespace n_UActorComponent {
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x60; // TArray<FName>
		constexpr auto AssetUserData = 0x70; // TArray<UAssetUserData*>
		constexpr auto UCSSerializationIndex = 0x84; // int32_t
		constexpr auto bNetAddressable = 0x88; // char : 1
		constexpr auto bReplicates = 0x88; // char : 1
		constexpr auto bAutoActivate = 0x89; // char : 1
		constexpr auto bIsActive = 0x8a; // char : 1
		constexpr auto bEditableWhenInherited = 0x8a; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x8a; // char : 1
		constexpr auto bIsEditorOnly = 0x8a; // char : 1
		constexpr auto CreationMethod = 0x8c; // EComponentCreationMethod
		constexpr auto OnComponentActivated = 0x8d; // FMulticastSparseDelegate
		constexpr auto OnComponentDeactivated = 0x8e; // FMulticastSparseDelegate
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
	}

	namespace n_UParticleModuleAcceleration {
		constexpr auto Acceleration = 0x38; // FRawDistributionVector
		constexpr auto bApplyOwnerScale = 0x80; // char : 1
	}

	namespace n_UEndTurnCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UBasicOverlays {
		constexpr auto Overlays = 0x28; // TArray<FOverlayItem>
	}

	namespace n_UbtnNav_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto btn_Nav = 0x238; // UButton*
		constexpr auto txt_btn_Label = 0x240; // UTextBlock*
		constexpr auto Label = 0x248; // FText
		constexpr auto Font = 0x260; // FSlateFontInfo
		constexpr auto bUseEnabledColouring = 0x2b0; // bool
		constexpr auto OnClick = 0x2b8; // FMulticastInlineDelegate
		constexpr auto bSelected = 0x2c8; // bool
		constexpr auto bAllCaps = 0x2c9; // bool
		constexpr auto bFocus = 0x2ca; // bool
		constexpr auto InitialButtonStyle = 0x2d0; // FButtonStyle
		constexpr auto FocusedButtonStyle = 0x548; // FButtonStyle
		constexpr auto ButtonDescriptionTextWidget = 0x7c0; // UTextBlock*
		constexpr auto ButtonDescriptionText = 0x7c8; // FText
		constexpr auto UpdateDescriptionText = 0x7e0; // FMulticastInlineDelegate
		constexpr auto OnHover = 0x7f0; // FMulticastInlineDelegate
		constexpr auto OnUnhover = 0x800; // FMulticastInlineDelegate
		constexpr auto bIsMainMenuButton = 0x810; // bool
		constexpr auto MainMenuStyle = 0x818; // FButtonStyle
	}

	namespace n_UParticleModuleLocation_Seeded {
		constexpr auto RandomSeedInfo = 0x80; // FParticleRandomSeedInfo
	}

	namespace n_UInterpTrackInstToggle {
		constexpr auto Action = 0x28; // ETrackToggleAction
		constexpr auto LastUpdatePosition = 0x2c; // float
		constexpr auto bSavedActiveState = 0x30; // char : 1
	}

	namespace n_UMovieScenePrimitiveMaterialTrack {
		constexpr auto MaterialIndex = 0x88; // int32_t
	}

	namespace n_UWGT_UseContext_EnterSeat_C {
		constexpr auto UberGraphFrame = 0x250; // FPointerToUberGraphFrame
	}

	namespace n_UVectorField {
		constexpr auto Bounds = 0x28; // FBox
		constexpr auto Intensity = 0x44; // float
	}

	namespace n_UDistributionVector {
		constexpr auto bCanBeBaked = 0x30; // char : 1
		constexpr auto bIsDirty = 0x30; // char : 1
		constexpr auto bBakedDataSuccesfully = 0x30; // char : 1
	}

	namespace n_UMovieSceneMaterialParameterCollectionTrack {
		constexpr auto MPC = 0x68; // UMaterialParameterCollection*
	}

	namespace n_USoundPlayedOnlyWhileAnimationRuns {
		constexpr auto Sound = 0x30; // USoundBase*
		constexpr auto VolumeMultiplier = 0x38; // float
		constexpr auto PitchMultiplier = 0x3c; // float
		constexpr auto bFollow = 0x40; // char : 1
		constexpr auto AttachName = 0x44; // FName
		constexpr auto PlayingSound = 0x50; // UAudioComponent*
	}

	namespace n_ACameraRig_Rail {
		constexpr auto CurrentPositionOnRail = 0x220; // float
		constexpr auto bLockOrientationToRail = 0x224; // bool
		constexpr auto TransformComponent = 0x228; // USceneComponent*
		constexpr auto RailSplineComponent = 0x230; // USplineComponent*
		constexpr auto RailCameraMount = 0x238; // USceneComponent*
	}

	namespace n_UTextRenderComponent {
		constexpr auto Text = 0x410; // FText
		constexpr auto TextMaterial = 0x428; // UMaterialInterface*
		constexpr auto Font = 0x430; // UFont*
		constexpr auto HorizontalAlignment = 0x438; // EHorizTextAligment
		constexpr auto VerticalAlignment = 0x439; // EVerticalTextAligment
		constexpr auto TextRenderColor = 0x43c; // FColor
		constexpr auto XScale = 0x440; // float
		constexpr auto YScale = 0x444; // float
		constexpr auto WorldSize = 0x448; // float
		constexpr auto InvDefaultSize = 0x44c; // float
		constexpr auto HorizSpacingAdjust = 0x450; // float
		constexpr auto VertSpacingAdjust = 0x454; // float
		constexpr auto bAlwaysRenderAsText = 0x458; // char : 1
	}

	namespace n_ASceneCaptureCube {
		constexpr auto CaptureComponentCube = 0x230; // USceneCaptureComponentCube*
	}

	namespace n_UHLLDeployment_TeamSelect {
		constexpr auto OnTeamSelected = 0x230; // FMulticastInlineDelegate
		constexpr auto Team_Allies = 0x240; // UHLLDeployment_TeamSelectItem*
		constexpr auto Team_Axis = 0x248; // UHLLDeployment_TeamSelectItem*
	}

	namespace n_UMaterialExpressionStaticBool {
		constexpr auto Value = 0x40; // char : 1
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureSampleParameter {
		constexpr auto ParameterName = 0x90; // FName
		constexpr auto ExpressionGUID = 0x98; // FGuid
		constexpr auto Group = 0xa8; // FName
	}

	namespace n_ULandscapeMeshCollisionComponent {
		constexpr auto MeshGuid = 0x4f0; // FGuid
	}

	namespace n_UNetReplicationGraphConnection {
		constexpr auto NetConnection = 0x28; // UNetConnection*
		constexpr auto DebugActor = 0x170; // AReplicationGraphDebugActor*
		constexpr auto LastGatherLocations = 0x190; // TArray<FLastLocationGatherInfo>
		constexpr auto ConnectionGraphNodes = 0x1a8; // TArray<UReplicationGraphNode*>
		constexpr auto TearOffNode = 0x1b8; // UReplicationGraphNode_TearOff_ForConnection*
	}

	namespace n_UHLLScopeWidget {
		constexpr auto AssignedWeapon = 0x230; // AShooterWeapon*
		constexpr auto bRotateWithLean = 0x238; // char : 1
		constexpr auto bScopeParallax = 0x238; // char : 1
		constexpr auto ScopeImage = 0x240; // UHLLScopeImage*
		constexpr auto ZoomText = 0x248; // UTextBlock*
	}

	namespace n_USlateSettings {
		constexpr auto bExplicitCanvasChildZOrder = 0x28; // bool
	}

	namespace n_UIpConnection {
		constexpr auto SocketErrorDisconnectDelay = 0x1a80; // float
	}

	namespace n_UMovieScene3DConstraintSection {
		constexpr auto ConstraintId = 0xe0; // FGuid
		constexpr auto ConstraintBindingID = 0xf0; // FMovieSceneObjectBindingID
	}

	namespace n_UHLLUI_CosmeticItem {
		constexpr auto ParentCategory = 0x230; // TWeakObjectPtr<UHLLUI_CosmeticCategory>
		constexpr auto ItemIcon = 0x238; // UImage*
		constexpr auto RootButton = 0x240; // UButton*
		constexpr auto ItemName = 0x248; // UTextBlock*
		constexpr auto TooltipClass = 0x250; // UHLLUI_CosmeticItemTooltip*
		constexpr auto bIsSelected = 0x258; // char : 1
		constexpr auto bIsUnlocked = 0x258; // char : 1
		constexpr auto bIsPreviewing = 0x258; // char : 1
		constexpr auto CosmeticItemHandle = 0x260; // FDataTableRowHandle
		constexpr auto CosmeticTooltip = 0x270; // UHLLUI_CosmeticItemTooltip*
	}

	namespace n_UBTDecorator {
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UEnvQueryGenerator {
		constexpr auto OptionName = 0x30; // FString
		constexpr auto ItemType = 0x40; // UEnvQueryItemType*
		constexpr auto bAutoSortTests = 0x48; // char : 1
	}

	namespace n_UMovieSceneCapture {
		constexpr auto ImageCaptureProtocolType = 0x38; // FSoftClassPath
		constexpr auto AudioCaptureProtocolType = 0x50; // FSoftClassPath
		constexpr auto ImageCaptureProtocol = 0x68; // UMovieSceneImageCaptureProtocolBase*
		constexpr auto AudioCaptureProtocol = 0x70; // UMovieSceneAudioCaptureProtocolBase*
		constexpr auto Settings = 0x78; // FMovieSceneCaptureSettings
		constexpr auto bUseSeparateProcess = 0xe8; // bool
		constexpr auto bCloseEditorWhenCaptureStarts = 0xe9; // bool
		constexpr auto AdditionalCommandLineArguments = 0xf0; // FString
		constexpr auto InheritedCommandLineArguments = 0x100; // FString
	}

	namespace n_UHLLIndicatorBase {
		constexpr auto ViewDistance = 0x230; // float
		constexpr auto EnemyViewDistance = 0x234; // float
		constexpr auto VerticalOffset = 0x238; // float
		constexpr auto EnemyTint = 0x23c; // FLinearColor
		constexpr auto IconAlignment = 0x24c; // FVector2D
		constexpr auto bFadeWithHUD = 0x254; // char : 1
		constexpr auto bScaleOverDistance = 0x254; // char : 1
		constexpr auto bCustomColourise = 0x254; // char : 1
		constexpr auto bShowEnemy = 0x254; // char : 1
		constexpr auto bShowEnemyInAdminCamera = 0x254; // char : 1
		constexpr auto bHideWhenAimedAt = 0x254; // char : 1
		constexpr auto bOnlyHideInADS = 0x254; // char : 1
		constexpr auto ZPriority = 0x258; // int32_t
		constexpr auto AngleTolerance = 0x25c; // float
		constexpr auto bEnableOcclusionTest = 0x260; // char : 1
		constexpr auto OcclusionTraceChannel = 0x261; // ECollisionChannel
		constexpr auto AssignedComponent = 0x264; // TWeakObjectPtr<UHLLIndicatorComponent>
		constexpr auto Icon = 0x270; // UImage*
	}

	namespace n_UParticleModuleParameterDynamic_Seeded {
		constexpr auto RandomSeedInfo = 0x48; // FParticleRandomSeedInfo
	}

	namespace n_UGameplayTask_SpawnActor {
		constexpr auto Success = 0x68; // FMulticastInlineDelegate
		constexpr auto DidNotSpawn = 0x78; // FMulticastInlineDelegate
		constexpr auto ClassToSpawn = 0xa0; // AActor*
	}

	namespace n_AOnlineBeacon {
		constexpr auto BeaconConnectionInitialTimeout = 0x228; // float
		constexpr auto BeaconConnectionTimeout = 0x22c; // float
		constexpr auto NetDriver = 0x230; // UNetDriver*
	}

	namespace n_UWGT_RoleProgressionItem_C {
		constexpr auto Breaker = 0x310; // UImage*
	}

	namespace n_AAIController {
		constexpr auto bStartAILogicOnPossess = 0x2d0; // char : 1
		constexpr auto bStopAILogicOnUnposses = 0x2d0; // char : 1
		constexpr auto bLOSflag = 0x2d0; // char : 1
		constexpr auto bSkipExtraLOSChecks = 0x2d0; // char : 1
		constexpr auto bAllowStrafe = 0x2d0; // char : 1
		constexpr auto bWantsPlayerState = 0x2d0; // char : 1
		constexpr auto bSetControlRotationFromPawnOrientation = 0x2d0; // char : 1
		constexpr auto PathFollowingComponent = 0x2d8; // UPathFollowingComponent*
		constexpr auto BrainComponent = 0x2e0; // UBrainComponent*
		constexpr auto PerceptionComponent = 0x2e8; // UAIPerceptionComponent*
		constexpr auto ActionsComp = 0x2f0; // UPawnActionsComponent*
		constexpr auto Blackboard = 0x2f8; // UBlackboardComponent*
		constexpr auto CachedGameplayTasksComponent = 0x300; // UGameplayTasksComponent*
		constexpr auto DefaultNavigationFilterClass = 0x308; // UNavigationQueryFilter*
		constexpr auto ReceiveMoveCompleted = 0x310; // FMulticastInlineDelegate
	}

	namespace n_UTextureLightProfile {
		constexpr auto Brightness = 0xe8; // float
		constexpr auto TextureMultiplier = 0xec; // float
	}

	namespace n_USkeletalMeshComponent {
		constexpr auto AnimBlueprintGeneratedClass = 0x650; // UObject*
		constexpr auto AnimClass = 0x658; // UAnimInstance*
		constexpr auto AnimScriptInstance = 0x660; // UAnimInstance*
		constexpr auto PostProcessAnimInstance = 0x668; // UAnimInstance*
		constexpr auto AnimationData = 0x670; // FSingleAnimationPlayData
		constexpr auto RootBoneTranslation = 0x698; // FVector
		constexpr auto LineCheckBoundsScale = 0x6a4; // FVector
		constexpr auto LinkedInstances = 0x6d0; // TArray<UAnimInstance*>
		constexpr auto CachedBoneSpaceTransforms = 0x6e0; // TArray<FTransform>
		constexpr auto CachedComponentSpaceTransforms = 0x6f0; // TArray<FTransform>
		constexpr auto GlobalAnimRateScale = 0x720; // float
		constexpr auto KinematicBonesUpdateType = 0x724; // EKinematicBonesUpdateToPhysics
		constexpr auto PhysicsTransformUpdateMode = 0x725; // EPhysicsTransformUpdateMode
		constexpr auto AnimationMode = 0x727; // EAnimationMode
		constexpr auto bDisablePostProcessBlueprint = 0x729; // char : 1
		constexpr auto bUpdateOverlapsOnAnimationFinalize = 0x729; // char : 1
		constexpr auto bHasValidBodies = 0x729; // char : 1
		constexpr auto bBlendPhysics = 0x729; // char : 1
		constexpr auto bEnablePhysicsOnDedicatedServer = 0x729; // char : 1
		constexpr auto bUpdateJointsFromAnimation = 0x72a; // char : 1
		constexpr auto bDisableClothSimulation = 0x72a; // char : 1
		constexpr auto bDisableRigidBodyAnimNode = 0x72a; // char : 1
		constexpr auto bAllowAnimCurveEvaluation = 0x72a; // char : 1
		constexpr auto bDisableAnimCurves = 0x72a; // char : 1
		constexpr auto bCollideWithEnvironment = 0x72b; // char : 1
		constexpr auto bCollideWithAttachedChildren = 0x72b; // char : 1
		constexpr auto bLocalSpaceSimulation = 0x72b; // char : 1
		constexpr auto bResetAfterTeleport = 0x72b; // char : 1
		constexpr auto bDeferKinematicBoneUpdate = 0x72b; // char : 1
		constexpr auto bNoSkeletonUpdate = 0x72b; // char : 1
		constexpr auto bPauseAnims = 0x72b; // char : 1
		constexpr auto bUseRefPoseOnInitAnim = 0x72c; // char : 1
		constexpr auto bEnablePerPolyCollision = 0x72c; // char : 1
		constexpr auto bForceRefpose = 0x72c; // char : 1
		constexpr auto bOnlyAllowAutonomousTickPose = 0x72c; // char : 1
		constexpr auto bIsAutonomousTickPose = 0x72c; // char : 1
		constexpr auto bOldForceRefPose = 0x72c; // char : 1
		constexpr auto bShowPrePhysBones = 0x72c; // char : 1
		constexpr auto bRequiredBonesUpToDate = 0x72c; // char : 1
		constexpr auto bAnimTreeInitialised = 0x72d; // char : 1
		constexpr auto bIncludeComponentLocationIntoBounds = 0x72d; // char : 1
		constexpr auto bEnableLineCheckWithBounds = 0x72d; // char : 1
		constexpr auto bUseBendingElements = 0x72d; // char : 1
		constexpr auto bUseTetrahedralConstraints = 0x72d; // char : 1
		constexpr auto bUseThinShellVolumeConstraints = 0x72d; // char : 1
		constexpr auto bUseSelfCollisions = 0x72d; // char : 1
		constexpr auto bUseContinuousCollisionDetection = 0x72d; // char : 1
		constexpr auto bPropagateCurvesToSlaves = 0x72e; // char : 1
		constexpr auto bSkipKinematicUpdateWhenInterpolating = 0x72e; // char : 1
		constexpr auto bSkipBoundsUpdateWhenInterpolating = 0x72e; // char : 1
		constexpr auto bNeedsQueuedAnimEventsDispatched = 0x72e; // char : 1
		constexpr auto CachedAnimCurveUidVersion = 0x730; // uint16_t
		constexpr auto MassMode = 0x732; // EClothMassMode
		constexpr auto UniformMass = 0x734; // float
		constexpr auto TotalMass = 0x738; // float
		constexpr auto Density = 0x73c; // float
		constexpr auto MinPerParticleMass = 0x740; // float
		constexpr auto ClothBlendWeight = 0x744; // float
		constexpr auto EdgeStiffness = 0x748; // float
		constexpr auto BendingStiffness = 0x74c; // float
		constexpr auto AreaStiffness = 0x750; // float
		constexpr auto VolumeStiffness = 0x754; // float
		constexpr auto StrainLimitingStiffness = 0x758; // float
		constexpr auto ShapeTargetStiffness = 0x75c; // float
		constexpr auto DisallowedAnimCurves = 0x760; // TArray<FName>
		constexpr auto BodySetup = 0x770; // UBodySetup*
		constexpr auto OnConstraintBroken = 0x780; // FMulticastInlineDelegate
		constexpr auto ClothingSimulationFactory = 0x790; // UClothingSimulationFactory*
		constexpr auto TeleportDistanceThreshold = 0x868; // float
		constexpr auto TeleportRotationThreshold = 0x86c; // float
		constexpr auto LastPoseTickFrame = 0x878; // uint32_t
		constexpr auto ClothingInteractor = 0x8d0; // UClothingSimulationInteractor*
		constexpr auto OnAnimInitialized = 0x9a0; // FMulticastInlineDelegate
	}

	namespace n_UVehicleDropsComponent {
		constexpr auto OnSuppliesAdded = 0xb0; // FMulticastInlineDelegate
		constexpr auto TimeToDrop = 0xc0; // float
		constexpr auto InitialDropCount = 0xc4; // int32_t
		constexpr auto DropActorClass = 0xc8; // AVehicleDrop_Supplies*
		constexpr auto StartDroppingSound = 0xd0; // USoundBase*
		constexpr auto StoppedDroppingSound = 0xd8; // USoundBase*
		constexpr auto InputComponent = 0xe0; // UInputComponent*
		constexpr auto DroppingASC = 0xe8; // TWeakObjectPtr<UAudioComponent>
		constexpr auto NumRemainingDrops = 0xf0; // int32_t
	}

	namespace n_UShooterCharacterMovement {
		constexpr auto MaxWalkSpeedADS = 0x610; // float
		constexpr auto MaxWalkSpeedProne = 0x614; // float
		constexpr auto MaxSprintSpeed = 0x618; // float
		constexpr auto MaxSprintSpeedCrouched = 0x61c; // float
		constexpr auto VaultingSpeed = 0x620; // float
		constexpr auto ClimbingSpeed = 0x624; // float
		constexpr auto BarbedWireMaxSpeed = 0x628; // float
		constexpr auto m_owningCharacter = 0x630; // AShooterCharacter*
	}

	namespace n_UFixedFrameRateCustomTimeStep {
		constexpr auto FixedFrameRate = 0x28; // FFrameRate
	}

	namespace n_UMaterialExpressionTextureSample {
		constexpr auto Coordinates = 0x50; // FExpressionInput
		constexpr auto TextureObject = 0x64; // FExpressionInput
		constexpr auto MipValue = 0x78; // FExpressionInput
		constexpr auto CoordinatesDX = 0x8c; // FExpressionInput
		constexpr auto CoordinatesDY = 0xa0; // FExpressionInput
		constexpr auto AutomaticViewMipBiasValue = 0xb4; // FExpressionInput
		constexpr auto MipValueMode = 0xc8; // ETextureMipValueMode
		constexpr auto SamplerSource = 0xc9; // ESamplerSourceMode
		constexpr auto AutomaticViewMipBias = 0xca; // char : 1
		constexpr auto ConstCoordinate = 0xcb; // char
		constexpr auto ConstMipValue = 0xcc; // int32_t
	}

	namespace n_UHLLSeatHealthStatus {
		constexpr auto HealthComponent = 0x230; // UHLLArmourHealthComponent*
		constexpr auto Items = 0x238; // TArray<UHLLSeatHealthStatusItem*>
		constexpr auto RepairInProgressWidget = 0x248; // UWidget*
	}

	namespace n_UWGT_WeaponListItem_C {
		constexpr auto UberGraphFrame = 0x2a0; // FPointerToUberGraphFrame
		constexpr auto KeySBox = 0x2a8; // USizeBox*
	}

	namespace n_UMaterialParameterCollectionInstance {
		constexpr auto Collection = 0x30; // UMaterialParameterCollection*
	}

	namespace n_UBTService {
		constexpr auto Interval = 0x60; // float
		constexpr auto RandomDeviation = 0x64; // float
		constexpr auto bCallTickOnSearchStart = 0x68; // char : 1
		constexpr auto bRestartTimerOnEachActivation = 0x68; // char : 1
	}

	namespace n_URuntimeVirtualTexture {
		constexpr auto MaterialType = 0x28; // ERuntimeVirtualTextureMaterialType
		constexpr auto bCompressTextures = 0x29; // bool
		constexpr auto bEnable = 0x2a; // bool
		constexpr auto bClearTextures = 0x2b; // bool
		constexpr auto bSinglePhysicalSpace = 0x2c; // bool
		constexpr auto bPrivateSpace = 0x2d; // bool
		constexpr auto bEnableScalability = 0x2e; // bool
		constexpr auto Size = 0x30; // int32_t
		constexpr auto TileCount = 0x34; // int32_t
		constexpr auto TileSize = 0x38; // int32_t
		constexpr auto TileBorderSize = 0x3c; // int32_t
		constexpr auto StreamLowMips = 0x40; // int32_t
		constexpr auto StreamingTexture = 0x48; // URuntimeVirtualTextureStreamingProxy*
		constexpr auto bEnableCompressCrunch = 0x50; // bool
		constexpr auto RemoveLowMips = 0x54; // int32_t
	}

	namespace n_ULandscapeSplinesComponent {
		constexpr auto ControlPoints = 0x410; // TArray<ULandscapeSplineControlPoint*>
		constexpr auto Segments = 0x420; // TArray<ULandscapeSplineSegment*>
		constexpr auto CookedForeignMeshComponents = 0x430; // TArray<UMeshComponent*>
	}

	namespace n_UMovieSceneLevelVisibilitySection {
		constexpr auto Visibility = 0xe0; // ELevelVisibility
		constexpr auto LevelNames = 0xe8; // TArray<FName>
	}

	namespace n_UParticleModuleAttractorParticle {
		constexpr auto EmitterName = 0x30; // FName
		constexpr auto Range = 0x38; // FRawDistributionFloat
		constexpr auto bStrengthByDistance = 0x68; // char : 1
		constexpr auto Strength = 0x70; // FRawDistributionFloat
		constexpr auto bAffectBaseVelocity = 0xa0; // char : 1
		constexpr auto SelectionMethod = 0xa4; // EAttractorParticleSelectionMethod
		constexpr auto bRenewSource = 0xa8; // char : 1
		constexpr auto bInheritSourceVel = 0xa8; // char : 1
		constexpr auto LastSelIndex = 0xac; // int32_t
	}

	namespace n_UVectorFieldComponent {
		constexpr auto VectorField = 0x410; // UVectorField*
		constexpr auto Intensity = 0x418; // float
		constexpr auto Tightness = 0x41c; // float
		constexpr auto bPreviewVectorField = 0x420; // char : 1
	}

	namespace n_UScaleBox {
		constexpr auto Stretch = 0x120; // EStretch
		constexpr auto StretchDirection = 0x121; // EStretchDirection
		constexpr auto UserSpecifiedScale = 0x124; // float
		constexpr auto IgnoreInheritedScale = 0x128; // bool
	}

	namespace n_AMatineeActorCameraAnim {
		constexpr auto CameraAnim = 0x2c8; // UCameraAnim*
	}

	namespace n_UPlaneReflectionCaptureComponent {
		constexpr auto InfluenceRadiusScale = 0x268; // float
		constexpr auto PreviewInfluenceRadius = 0x270; // UDrawSphereComponent*
		constexpr auto PreviewCaptureBox = 0x278; // UBoxComponent*
	}

	namespace n_UHLLResourceNodeIndicator {
		constexpr auto GenerationText = 0x2a8; // UTextBlock*
	}

	namespace n_UPlatoonManagementStackKickRequest {
		constexpr auto NotWithOfficer = 0x270; // UButton*
		constexpr auto NotCommunicating = 0x278; // UButton*
		constexpr auto MakingRoomForFriend = 0x280; // UButton*
		constexpr auto Cancel = 0x288; // UButton*
	}

	namespace n_UCompressedImageSequenceProtocol {
		constexpr auto CompressionQuality = 0xd8; // int32_t
	}

	namespace n_UForceFeedbackAttenuation {
		constexpr auto Attenuation = 0x28; // FForceFeedbackAttenuationSettings
	}

	namespace n_UPartyBeaconState {
		constexpr auto SessionName = 0x28; // FName
		constexpr auto NumConsumedReservations = 0x30; // int32_t
		constexpr auto MaxReservations = 0x34; // int32_t
		constexpr auto NumTeams = 0x38; // int32_t
		constexpr auto NumPlayersPerTeam = 0x3c; // int32_t
		constexpr auto TeamAssignmentMethod = 0x40; // FName
		constexpr auto ReservedHostTeamNum = 0x48; // int32_t
		constexpr auto ForceTeamNum = 0x4c; // int32_t
		constexpr auto bRestrictCrossConsole = 0x50; // bool
		constexpr auto bEnableRemovalRequests = 0x51; // bool
		constexpr auto Reservations = 0x58; // TArray<FPartyReservation>
	}

	namespace n_UWindowTitleBarArea {
		constexpr auto bWindowButtonsEnabled = 0x120; // bool
		constexpr auto bDoubleClickTogglesFullscreen = 0x121; // bool
	}

	namespace n_USoundNodeDialoguePlayer {
		constexpr auto DialogueWaveParameter = 0x48; // FDialogueWaveParameter
		constexpr auto bLooping = 0x68; // char : 1
	}

	namespace n_UAsyncTaskDownloadImage {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFail = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UAIDataProvider_QueryParams {
		constexpr auto ParamName = 0x28; // FName
		constexpr auto FloatValue = 0x30; // float
		constexpr auto IntValue = 0x34; // int32_t
		constexpr auto BoolValue = 0x38; // bool
	}

	namespace n_UEnvQueryGenerator_PathingGrid {
		constexpr auto PathToItem = 0xf8; // FAIDataProviderBoolValue
		constexpr auto NavigationFilter = 0x130; // UNavigationQueryFilter*
		constexpr auto ScanRangeMultiplier = 0x138; // FAIDataProviderFloatValue
	}

	namespace n_UHLLUseContextContainer {
		constexpr auto ContextWidgetClasses = 0x230; // TMap<EHLLUseContextType, UHLLUseContextBase*>
		constexpr auto BaseViewportYOffset = 0x280; // float
		constexpr auto ActiveContextWidgets = 0x288; // TArray<UHLLUseContextBase*>
		constexpr auto CurrentActiveContext = 0x298; // EHLLUseContextType
		constexpr auto RootBorder = 0x2a0; // UBorder*
	}

	namespace n_UWGT_DeployRoleItem_V2_C {
		constexpr auto UberGraphFrame = 0x2a8; // FPointerToUberGraphFrame
		constexpr auto LevelBorder = 0x2b0; // UBorder*
		constexpr auto SelectButton = 0x2b8; // UButton*
		constexpr auto TextBorder = 0x2c0; // UBorder*
		constexpr auto OwningWidget = 0x2c8; // UWGT_DeployRoleSelection_V2_C*
		constexpr auto bSelectedRole = 0x2d0; // bool
		constexpr auto bHasSectionFocus = 0x2d1; // bool
		constexpr auto bIsRBM = 0x2d2; // bool
	}

	namespace n_UHLLDial_Speedometer {
		constexpr auto DigitL = 0x258; // UTextBlock*
		constexpr auto DigitR = 0x260; // UTextBlock*
	}

	namespace n_UParticleModuleVelocityInheritParent {
		constexpr auto Scale = 0x38; // FRawDistributionVector
	}

	namespace n_AProneMechanicsTestLogic {
		constexpr auto StandToCrouchChar = 0x220; // AShooterCharacterT1*
		constexpr auto ProneToStandChar = 0x228; // AShooterCharacterT1*
		constexpr auto ProneToCrouchChar = 0x230; // AShooterCharacterT1*
		constexpr auto CantLeaveProneChar = 0x238; // AShooterCharacterT1*
		constexpr auto CanLeaveProneToCrouchChar = 0x240; // AShooterCharacterT1*
		constexpr auto ProneToSlopeChar = 0x248; // AShooterCharacterT1*
		constexpr auto CrawlSlopeChar = 0x250; // AShooterCharacterT1*
	}

	namespace n_UHLLProjectile_Bullet {
		constexpr auto InstantTravelTime = 0x138; // float
		constexpr auto MuzzleVelocity = 0x13c; // float
		constexpr auto GravityScale = 0x140; // float
		constexpr auto MassG = 0x144; // float
		constexpr auto DiameterMM = 0x148; // float
		constexpr auto AirResistance = 0x14c; // float
		constexpr auto FormFactor = 0x150; // float
		constexpr auto MaxPenetrations = 0x154; // char
		constexpr auto PenetrationPower = 0x158; // int32_t
		constexpr auto ExitTemplate = 0x160; // AShooterImpactEffect*
	}

	namespace n_AShooterProjectile {
		constexpr auto MovementComp = 0x230; // UHLLProjectileMovement*
		constexpr auto CollisionComp = 0x238; // USphereComponent*
		constexpr auto ParticleComp = 0x240; // UParticleSystemComponent*
		constexpr auto ProjectileMesh = 0x248; // UStaticMeshComponent*
		constexpr auto ExplosionTemplate = 0x250; // AShooterImpactEffect*
		constexpr auto PenetrationTemplate = 0x258; // AShooterImpactEffect*
		constexpr auto RicochetTemplate = 0x260; // AShooterImpactEffect*
		constexpr auto MyPlayerState = 0x268; // APlayerState*
		constexpr auto Team = 0x270; // ETeam
		constexpr auto ProjectileLife = 0x274; // float
		constexpr auto ExplosionDamage = 0x278; // int32_t
		constexpr auto ExplosionRadius = 0x27c; // float
		constexpr auto ExplosionFalloff = 0x280; // float
		constexpr auto DamageType = 0x288; // UShooterDamageType*
		constexpr auto PostExplodeLifespan = 0x290; // float
		constexpr auto bExplodeAtEndOfLife = 0x294; // char : 1
		constexpr auto bExploded = 0x294; // char : 1
		constexpr auto bPenetrated = 0x294; // char : 1
		constexpr auto bDidRicochet = 0x294; // char : 1
		constexpr auto HitData = 0x298; // FProjectileHitData
		constexpr auto RicochetLocationWS = 0x3d8; // FVector
		constexpr auto SuppressionRadius = 0x3e4; // float
		constexpr auto SuppressionAmount_Flyby = 0x3e8; // float
		constexpr auto bApplyFlybySuppressionToAllTeams = 0x3ec; // char : 1
		constexpr auto FlybySuppressionType = 0x3ed; // ESuppressionType
		constexpr auto SuppressionConeAngle = 0x3f0; // float
		constexpr auto SuppressionQuery = 0x3f4; // FCollisionProfileName
		constexpr auto SuppressionAmount_Explode = 0x3fc; // float
		constexpr auto SuppressionFalloff_Explode = 0x400; // float
		constexpr auto SuppressionRadius_Explode = 0x404; // float
		constexpr auto bApplyExplodeSuppressionToAllTeams = 0x408; // char : 1
		constexpr auto ExplosionSuppressionType = 0x409; // ESuppressionType
		constexpr auto bUseBulletCrackSound = 0x461; // char : 1
		constexpr auto BulletCrackRadius = 0x464; // float
		constexpr auto BulletCrackSound = 0x468; // USoundBase*
		constexpr auto SpawnLocation = 0x470; // FVector_NetQuantize
	}

	namespace n_URichTextBlockImageDecorator {
		constexpr auto ImageSet = 0x28; // UDataTable*
	}

	namespace n_USceneComponent {
		constexpr auto PhysicsVolume = 0xb8; // TWeakObjectPtr<APhysicsVolume>
		constexpr auto AttachParent = 0xc0; // USceneComponent*
		constexpr auto AttachSocketName = 0xc8; // FName
		constexpr auto AttachChildren = 0xd0; // TArray<USceneComponent*>
		constexpr auto ClientAttachedChildren = 0xe0; // TArray<USceneComponent*>
		constexpr auto RelativeLocation = 0x11c; // FVector
		constexpr auto RelativeRotation = 0x128; // FRotator
		constexpr auto RelativeScale3D = 0x134; // FVector
		constexpr auto ComponentVelocity = 0x140; // FVector
		constexpr auto bComponentToWorldUpdated = 0x14c; // char : 1
		constexpr auto bAbsoluteLocation = 0x14c; // char : 1
		constexpr auto bAbsoluteRotation = 0x14c; // char : 1
		constexpr auto bAbsoluteScale = 0x14c; // char : 1
		constexpr auto bVisible = 0x14c; // char : 1
		constexpr auto bShouldBeAttached = 0x14c; // char : 1
		constexpr auto bShouldSnapLocationWhenAttached = 0x14c; // char : 1
		constexpr auto bShouldSnapRotationWhenAttached = 0x14d; // char : 1
		constexpr auto bShouldUpdatePhysicsVolume = 0x14d; // char : 1
		constexpr auto bHiddenInGame = 0x14d; // char : 1
		constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0x14d; // char : 1
		constexpr auto bUseAttachParentBound = 0x14d; // char : 1
		constexpr auto Mobility = 0x14f; // EComponentMobility
		constexpr auto DetailMode = 0x150; // EDetailMode
		constexpr auto PhysicsVolumeChangedDelegate = 0x151; // FMulticastSparseDelegate
	}

	namespace n_AMapData_AdminCam_C {
		constexpr auto DefaultSceneRoot = 0x240; // USceneComponent*
	}

	namespace n_APostProcessVolume {
		constexpr auto Settings = 0x260; // FPostProcessSettings
		constexpr auto Priority = 0x7a0; // float
		constexpr auto BlendRadius = 0x7a4; // float
		constexpr auto BlendWeight = 0x7a8; // float
		constexpr auto bEnabled = 0x7ac; // char : 1
		constexpr auto bUnbound = 0x7ac; // char : 1
	}

	namespace n_UAISenseEvent_Hearing {
		constexpr auto Event = 0x28; // FAINoiseEvent
	}

	namespace n_UW_Menu_HTP_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto A_NewInfoContent = 0x238; // UWidgetAnimation*
		constexpr auto ButtonPromptsInfo = 0x240; // UButtonPromptsInfo_V2_C*
		constexpr auto ETB_SearchBar = 0x248; // UEditableTextBox*
		constexpr auto HLLScrollBox_2 = 0x250; // UHLLScrollBox*
		constexpr auto HorizontalBox_2 = 0x258; // UHorizontalBox*
		constexpr auto HTP_Widget_Role_Commander = 0x260; // UHTP_Widget_Role_Commander_C*
		constexpr auto Image_2 = 0x268; // UImage*
		constexpr auto Image_3 = 0x270; // UImage*
		constexpr auto Img_Item = 0x278; // UImage*
		constexpr auto MenuHeader = 0x280; // UMenuHeader_C*
		constexpr auto OV_WidgetHolder = 0x288; // UOverlay*
		constexpr auto RetainerBox_1 = 0x290; // URetainerBox*
		constexpr auto SizeBox_7 = 0x298; // USizeBox*
		constexpr auto TabbedButtonContainer = 0x2a0; // UTabbedButtonContainer_V2_C*
		constexpr auto Txt_HintBody = 0x2a8; // UTextBlock*
		constexpr auto Txt_RichHintBody = 0x2b0; // URichTextBlock*
		constexpr auto VB_OptionsBtnList = 0x2b8; // UVerticalBox*
		constexpr auto VB_OptionsList = 0x2c0; // UVerticalBox*
		constexpr auto OnClosed = 0x2c8; // FMulticastInlineDelegate
		constexpr auto Widget_Tab = 0x2d8; // Enum_HowToPlay
		constexpr auto Widget_Topic = 0x2dc; // int32_t
		constexpr auto Btn_TopicList = 0x2e0; // TArray<UW_Btn_HTPTopic_V2_C*>
		constexpr auto Widget_PreviousButton = 0x2f0; // UW_Btn_HTPTopic_V2_C*
		constexpr auto Search_TopicList = 0x2f8; // TArray<FST_HTP>
		constexpr auto TopicRowName = 0x308; // FName
		constexpr auto MainMenu = 0x310; // UMainMenuWidget_V2_C*
		constexpr auto ButtonIndex = 0x318; // int32_t
		constexpr auto bOriginalScrollBarVisibility = 0x31c; // bool
		constexpr auto ReusableGeneric = 0x320; // UHTP_Widget_Topic_Generic_C*
		constexpr auto ReusableWidgetMap = 0x328; // TMap<FName, UUserWidget*>
		constexpr auto GenericOverlayslot = 0x378; // UOverlaySlot*
	}

	namespace n_UWGT_SocialLink_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Button = 0x238; // UButton*
		constexpr auto Type = 0x240; // ESocialMedia
	}

	namespace n_UHLLSatchelIndicator {
		constexpr auto CountdownProg = 0x2a8; // UImage*
	}

	namespace n_UHTP_Widget_Role_Loadout_Officer_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_3 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_5 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_8 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_9 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_10 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x270; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x278; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x280; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_5 = 0x288; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x290; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_12 = 0x298; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x2a0; // UImage*
		constexpr auto Image_10 = 0x2a8; // UImage*
		constexpr auto Image_17 = 0x2b0; // UImage*
	}

	namespace n_UPitchYawControllerComponent {
		constexpr auto YawRate = 0xb0; // float
		constexpr auto bLimitYawRange = 0xb4; // char : 1
		constexpr auto MaxAllowedYaw = 0xb8; // float
		constexpr auto PitchRate = 0xbc; // float
		constexpr auto PitchAngleMin = 0xc0; // float
		constexpr auto PitchAngleMax = 0xc4; // float
		constexpr auto ServerUpdateRate = 0xc8; // float
		constexpr auto PitchSound = 0xd0; // USoundBase*
		constexpr auto PitchStopSound = 0xd8; // USoundBase*
		constexpr auto YawSound = 0xe0; // USoundBase*
		constexpr auto YawStopSound = 0xe8; // USoundBase*
		constexpr auto RemotePackedTargetPitchAndYaw = 0x10c; // uint32_t
		constexpr auto EffectiveSpeedRep = 0x110; // FPitchYawControllerEffectiveSpeedRep
		constexpr auto PitchEffect = 0x128; // UObject*
		constexpr auto PitchStopEffect = 0x130; // UObject*
		constexpr auto YawEffect = 0x138; // UObject*
		constexpr auto YawStopEffect = 0x140; // UObject*
	}

	namespace n_USkeletalBodySetup {
		constexpr auto bSkipScaleFromAnimation = 0x270; // bool
		constexpr auto PhysicalAnimationData = 0x278; // TArray<FPhysicalAnimationProfile>
	}

	namespace n_UEnvQueryGenerator_Donut {
		constexpr auto InnerRadius = 0x80; // FAIDataProviderFloatValue
		constexpr auto OuterRadius = 0xb8; // FAIDataProviderFloatValue
		constexpr auto NumberOfRings = 0xf0; // FAIDataProviderIntValue
		constexpr auto PointsPerRing = 0x128; // FAIDataProviderIntValue
		constexpr auto ArcDirection = 0x160; // FEnvDirection
		constexpr auto ArcAngle = 0x180; // FAIDataProviderFloatValue
		constexpr auto bUseSpiralPattern = 0x1b8; // bool
		constexpr auto Center = 0x1c0; // UEnvQueryContext*
		constexpr auto bDefineArc = 0x1c8; // char : 1
	}

	namespace n_UHLLArmourInventory {
		constexpr auto DefaultInventory = 0xb0; // TArray<FArmourWeaponSpec>
		constexpr auto Inventory = 0xc0; // TArray<AHLLArmourWeapon*>
	}

	namespace n_UBlendProfile {
		constexpr auto OwningSkeleton = 0x30; // USkeleton*
		constexpr auto ProfileEntries = 0x38; // TArray<FBlendProfileBoneEntry>
	}

	namespace n_UHLLProjectile {
		constexpr auto SweepChannel = 0x30; // ECollisionChannel
		constexpr auto MaxFlightTime = 0x34; // float
		constexpr auto ExpireVelocity = 0x38; // float
		constexpr auto DamageType = 0x40; // UShooterDamageType*
		constexpr auto DamageCurve = 0x48; // FRuntimeFloatCurve
		constexpr auto DamageScale = 0xd0; // float
		constexpr auto SuppressRadius = 0xd4; // float
		constexpr auto SuppressScale = 0xd8; // float
		constexpr auto SuppressFalloff = 0xdc; // float
		constexpr auto bSuppressAllTeams = 0xe0; // char : 1
		constexpr auto SuppressionSegmentLength = 0xe4; // float
		constexpr auto SuppressionMinDist = 0xe8; // float
		constexpr auto bFPPOnly = 0xec; // char : 1
		constexpr auto bCanBeDisabledForFPP = 0xec; // char : 1
		constexpr auto ParticleTemplate = 0xf0; // UParticleSystem*
		constexpr auto ImpactEffectCullDistance = 0xf8; // float
		constexpr auto ImpactTemplate = 0x100; // AShooterImpactEffect*
		constexpr auto FlybySound = 0x108; // USoundBase*
		constexpr auto bSeparateFlybySounds = 0x110; // char : 1
		constexpr auto FriendlyFlybySound = 0x118; // USoundBase*
		constexpr auto FlybyOffsetDistance = 0x120; // float
		constexpr auto AttenuationRadiusOffset = 0x124; // float
		constexpr auto MinInitialDist = 0x128; // float
		constexpr auto FlybySkipAngle = 0x12c; // float
		constexpr auto AttenuationCheckDistance = 0x130; // float
	}

	namespace n_UMovieSceneFadeSection {
		constexpr auto FadeColor = 0x180; // FLinearColor
		constexpr auto bFadeAudio = 0x190; // char : 1
	}

	namespace n_UWGT_StatsTest_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto AchAdd = 0x238; // UButton*
		constexpr auto AchCombo = 0x240; // UComboBoxString*
		constexpr auto AchCombo_Oneshots = 0x248; // UComboBoxString*
		constexpr auto AchUnlock = 0x250; // UButton*
		constexpr auto AchValue = 0x258; // UEditableTextBox*
		constexpr auto InGameContent = 0x260; // UVerticalBox*
		constexpr auto ResetClientAchs = 0x268; // UButton*
		constexpr auto ResetXP = 0x270; // UButton*
		constexpr auto WriteNow = 0x278; // UButton*
		constexpr auto XPAdd = 0x280; // UButton*
		constexpr auto XPCombo = 0x288; // UComboBoxString*
		constexpr auto XPValue = 0x290; // UEditableTextBox*
		constexpr auto AchievementLUT = 0x298; // TArray<EHLLAchievement>
	}

	namespace n_UParticleModuleVectorFieldScaleOverLife {
		constexpr auto VectorFieldScaleOverLife = 0x30; // UDistributionFloat*
		constexpr auto VectorFieldScaleOverLifeRaw = 0x38; // FRawDistributionFloat
	}

	namespace n_UChatOverlay {
		constexpr auto Chat = 0x230; // UChat*
		constexpr auto PromptText = 0x238; // UTextBlock*
		constexpr auto AdminMessageText = 0x240; // UTextBlock*
		constexpr auto AdminMessageScroller = 0x248; // UScrollBox*
		constexpr auto ToggleAdminMessage = 0x250; // UWidgetAnimation*
		constexpr auto ScrollSpeed = 0x258; // float
		constexpr auto AdminMessage_InitialDelay = 0x25c; // float
		constexpr auto AdminMessage_CompletionTime = 0x260; // float
		constexpr auto ConsumeClickButton = 0x268; // UButton*
	}

	namespace n_UWGT_MapSelectButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Hover = 0x238; // UWidgetAnimation*
		constexpr auto Fade = 0x240; // UWidgetAnimation*
		constexpr auto HB_Mode = 0x248; // UHorizontalBox*
		constexpr auto Image = 0x250; // UImage*
		constexpr auto Image_111 = 0x258; // UImage*
		constexpr auto MapModeField = 0x260; // UTextBlock*
		constexpr auto MapNameField = 0x268; // UTextBlock*
		constexpr auto MapPreviewImage = 0x270; // UImage*
		constexpr auto SelectMapButton = 0x278; // UButton*
		constexpr auto map_DebugName = 0x280; // FString
		constexpr auto parentMenu = 0x290; // UMapChangeMenu_V2_C*
		constexpr auto DeselectedColor = 0x298; // FColor
		constexpr auto HighlightedColor = 0x29c; // FColor
		constexpr auto DelayTimer = 0x2a0; // float
	}

	namespace n_UBTService_BlueprintBase {
		constexpr auto AIOwner = 0x70; // AAIController*
		constexpr auto ActorOwner = 0x78; // AActor*
		constexpr auto bShowPropertyDetails = 0x90; // char : 1
		constexpr auto bShowEventDetails = 0x90; // char : 1
	}

	namespace n_USubsurfaceProfile {
		constexpr auto Settings = 0x28; // FSubsurfaceProfileStruct
	}

	namespace n_UOptionsScreen_V2_C {
		constexpr auto UberGraphFrame = 0x380; // FPointerToUberGraphFrame
		constexpr auto OpenMenu = 0x388; // UWidgetAnimation*
		constexpr auto ApplyPulseIndication = 0x390; // UWidgetAnimation*
		constexpr auto AAMethodOption = 0x398; // UOptionButton_V2_C*
		constexpr auto AAQualityOption = 0x3a0; // UOptionButton_V2_C*
		constexpr auto AdminKeys = 0x3a8; // UOptionsTabButton_V2_C*
		constexpr auto AdminKeysList = 0x3b0; // UScrollBox*
		constexpr auto ADSMouseSensSlider = 0x3b8; // URangeSliderWithText_V2_C*
		constexpr auto ADSToggleOption = 0x3c0; // UOptionButton_V2_C*
		constexpr auto AudioPanel = 0x3c8; // UCanvasPanel*
		constexpr auto AudioQualityOption = 0x3d0; // UOptionButton_V2_C*
		constexpr auto AudioScrollBox = 0x3d8; // UHLLScrollBox*
		constexpr auto Btn_GameAnalytics = 0x3e0; // UOptionButton_V2_C*
		constexpr auto ButtonPromptsInfo = 0x3e8; // UButtonPromptsInfo_V2_C*
		constexpr auto ClanTagEditBox = 0x3f0; // UEditableText*
		constexpr auto CommandMessagesOption = 0x3f8; // UOptionButton_V2_C*
		constexpr auto CommonKeys = 0x400; // UOptionsTabButton_V2_C*
		constexpr auto CommonKeysList = 0x408; // UScrollBox*
		constexpr auto ControlsPanel = 0x410; // UCanvasPanel*
		constexpr auto ControlsScrollBox = 0x418; // UHLLScrollBox*
		constexpr auto ControlsSizeBox = 0x420; // USizeBox*
		constexpr auto CrouchToggleOption = 0x428; // UOptionButton_V2_C*
		constexpr auto DeadBodiesLifetime = 0x430; // URangeSliderWithText_V2_C*
		constexpr auto DriverKeys = 0x438; // UOptionsTabButton_V2_C*
		constexpr auto FoliageQualityOption = 0x440; // UOptionButton_V2_C*
		constexpr auto FOVAspectMethod = 0x448; // UOptionButton_V2_C*
		constexpr auto FOVSlider = 0x450; // URangeSliderWithText_V2_C*
		constexpr auto FullScreenModeOption = 0x458; // UOptionButton_V2_C*
		constexpr auto FXQualityOption = 0x460; // UOptionButton_V2_C*
		constexpr auto GamepadAccelerationSliderX = 0x468; // URangeSliderWithText_V2_C*
		constexpr auto GamepadAccelerationSliderY = 0x470; // URangeSliderWithText_V2_C*
		constexpr auto GamepadAimAssistOption = 0x478; // UOptionButton_V2_C*
		constexpr auto GamepadCursorSensitivity = 0x480; // URangeSliderWithText_V2_C*
		constexpr auto GamepadHeader = 0x488; // UOptionsHeader_C*
		constexpr auto GamepadLayoutsScreen = 0x490; // UGamepadLayoutsScreen_C*
		constexpr auto GamepadLookDeadZone = 0x498; // URangeSliderWithText_V2_C*
		constexpr auto GamepadMovementDeadZone = 0x4a0; // URangeSliderWithText_V2_C*
		constexpr auto GamepadScopedSensitivitySlider = 0x4a8; // URangeSliderWithText_V2_C*
		constexpr auto GamepadSensitivityXSlider = 0x4b0; // URangeSliderWithText_V2_C*
		constexpr auto GamepadSensitivityXWhenADSSlider = 0x4b8; // URangeSliderWithText_V2_C*
		constexpr auto GamepadSensitivityYSlider = 0x4c0; // URangeSliderWithText_V2_C*
		constexpr auto GamepadSensitivityYWhenADSSlider = 0x4c8; // URangeSliderWithText_V2_C*
		constexpr auto GameplayPanel = 0x4d0; // UCanvasPanel*
		constexpr auto GameplayScrollBox = 0x4d8; // UHLLScrollBox*
		constexpr auto GameplaySizebox = 0x4e0; // USizeBox*
		constexpr auto GammaSlider = 0x4e8; // URangeSliderWithText_V2_C*
		constexpr auto HeaderContainer = 0x4f0; // UVerticalBox*
		constexpr auto HideFPPBullets = 0x4f8; // UOptionButton_V2_C*
		constexpr auto HideKickVoteRequests = 0x500; // UOptionButton_V2_C*
		constexpr auto HideOthersOption = 0x508; // UOptionButton_V2_C*
		constexpr auto HideSelfOption = 0x510; // UOptionButton_V2_C*
		constexpr auto HideServerInfoOption = 0x518; // UOptionButton_V2_C*
		constexpr auto HUDDisplaySliders = 0x520; // URangeSliderWithText_V2_C*
		constexpr auto HUDHeader = 0x528; // UOptionsHeader_C*
		constexpr auto HUDModeButton = 0x530; // UOptionButton_V2_C*
		constexpr auto Image_1 = 0x538; // UImage*
		constexpr auto InfantryKeys = 0x540; // UOptionsTabButton_V2_C*
		constexpr auto InfantryKeysList = 0x548; // UScrollBox*
		constexpr auto InvertGamepadVehicleXAxisOption = 0x550; // UOptionButton_V2_C*
		constexpr auto InvertGamepadVehicleYAxisOption = 0x558; // UOptionButton_V2_C*
		constexpr auto InvertGamepadXAxisOption = 0x560; // UOptionButton_V2_C*
		constexpr auto InvertGamepadYAxisOption = 0x568; // UOptionButton_V2_C*
		constexpr auto InvertMouseOption = 0x570; // UOptionButton_V2_C*
		constexpr auto InvertVehicleMouse = 0x578; // UOptionButton_V2_C*
		constexpr auto KeyBindingsPanel = 0x580; // UCanvasPanel*
		constexpr auto KeyBindingsTabSwitcher = 0x588; // UWidgetSwitcher*
		constexpr auto LeanToggleOption = 0x590; // UOptionButton_V2_C*
		constexpr auto LeftTriggerPrompt = 0x598; // UImage*
		constexpr auto ManualBolting = 0x5a0; // UOptionButton_V2_C*
		constexpr auto MapIconRepeatAnim = 0x5a8; // UOptionButton_V2_C*
		constexpr auto MapIconScaleSlider = 0x5b0; // URangeSliderWithText_V2_C*
		constexpr auto MarkerDisplayTimeSlider = 0x5b8; // URangeSliderWithText_V2_C*
		constexpr auto MarkerLink = 0x5c0; // UOptionButton_V2_C*
		constexpr auto MarkersHeader = 0x5c8; // UOptionsHeader_C*
		constexpr auto MasterQualityOption = 0x5d0; // UOptionButton_V2_C*
		constexpr auto MasterVolSlider = 0x5d8; // URangeSliderWithText_V2_C*
		constexpr auto MenuHeader = 0x5e0; // UMenuHeader_C*
		constexpr auto MicCheckButton = 0x5e8; // UOptionButton_V2_C*
		constexpr auto MicVolSlider = 0x5f0; // URangeSliderWithText_V2_C*
		constexpr auto MotionBlurOption = 0x5f8; // UOptionButton_V2_C*
		constexpr auto MouseHeader = 0x600; // UOptionsHeader_C*
		constexpr auto MouseInputBlocker = 0x608; // UBorder*
		constexpr auto MouseSensSlider = 0x610; // URangeSliderWithText_V2_C*
		constexpr auto MusicVolSlider = 0x618; // URangeSliderWithText_V2_C*
		constexpr auto NameplateIconsOnlySlider = 0x620; // URangeSliderWithText_V2_C*
		constexpr auto NameplateOpacitySliders = 0x628; // URangeSliderWithText_V2_C*
		constexpr auto NameplatesHeader = 0x630; // UOptionsHeader_C*
		constexpr auto OptionsPanel = 0x638; // UCanvasPanel*
		constexpr auto OptionTextBlock = 0x640; // UTextBlock*
		constexpr auto Panel_Audio = 0x648; // UGridPanel*
		constexpr auto Panel_Controls = 0x650; // UGridPanel*
		constexpr auto Panel_Gameplay = 0x658; // UGridPanel*
		constexpr auto Panel_Video = 0x660; // UGridPanel*
		constexpr auto PanelSizeBox = 0x668; // USizeBox*
		constexpr auto POIDisplayTimeSlider = 0x670; // URangeSliderWithText_V2_C*
		constexpr auto PostProcessOption = 0x678; // UOptionButton_V2_C*
		constexpr auto ProfanityFilter = 0x680; // UOptionButton_V2_C*
		constexpr auto ResetHintsButton = 0x688; // UOptionButton_V2_C*
		constexpr auto ResScaleSlider = 0x690; // URangeSliderWithText_V2_C*
		constexpr auto RightTriggerPrompt = 0x698; // UImage*
		constexpr auto RootBorder = 0x6a0; // UBorder*
		constexpr auto SFXVolSlider = 0x6a8; // URangeSliderWithText_V2_C*
		constexpr auto ShadowQualityOption = 0x6b0; // UOptionButton_V2_C*
		constexpr auto ShowChatForNewMessages = 0x6b8; // UOptionButton_V2_C*
		constexpr auto ShowHints = 0x6c0; // UOptionButton_V2_C*
		constexpr auto SmoothMouseOption = 0x6c8; // UOptionButton_V2_C*
		constexpr auto SprintToggleOption = 0x6d0; // UOptionButton_V2_C*
		constexpr auto SSAOOption = 0x6d8; // UOptionButton_V2_C*
		constexpr auto SteadyAimToggleOption = 0x6e0; // UOptionButton_V2_C*
		constexpr auto StreamingHeader = 0x6e8; // UOptionsHeader_C*
		constexpr auto StreamModeOption = 0x6f0; // UOptionButton_V2_C*
		constexpr auto Switcher = 0x6f8; // UWidgetSwitcher*
		constexpr auto TabbedButtonContainer = 0x700; // UTabbedButtonContainer_V2_C*
		constexpr auto TeamNameplateSliders = 0x708; // URangeSliderWithText_V2_C*
		constexpr auto Text_Controls_InvertFirstPersonMouse = 0x710; // UTextBlock*
		constexpr auto Text_Controls_InvertVehicleMouse = 0x718; // UTextBlock*
		constexpr auto Text_Controls_MouseSensitivity = 0x720; // UTextBlock*
		constexpr auto Text_Controls_MouseSensitivityAds = 0x728; // UTextBlock*
		constexpr auto Text_Controls_SmoothMouse = 0x730; // UTextBlock*
		constexpr auto Text_FOVAspectMethod = 0x738; // UTextBlock*
		constexpr auto Text_Video_AAMethod = 0x740; // UTextBlock*
		constexpr auto Text_Video_AAQuality = 0x748; // UTextBlock*
		constexpr auto Text_Video_FoliageQuality = 0x750; // UTextBlock*
		constexpr auto Text_Video_FullscreenMode = 0x758; // UTextBlock*
		constexpr auto Text_Video_FXQuality = 0x760; // UTextBlock*
		constexpr auto Text_Video_MasterQuality = 0x768; // UTextBlock*
		constexpr auto Text_Video_PostProcessQuality = 0x770; // UTextBlock*
		constexpr auto Text_Video_Resolution = 0x778; // UTextBlock*
		constexpr auto Text_Video_ResolutionScale = 0x780; // UTextBlock*
		constexpr auto Text_Video_ShadowQuality = 0x788; // UTextBlock*
		constexpr auto Text_Video_SSAO = 0x790; // UTextBlock*
		constexpr auto Text_Video_TextureQuality = 0x798; // UTextBlock*
		constexpr auto Text_Video_ViewDistance = 0x7a0; // UTextBlock*
		constexpr auto Text_Video_VSync = 0x7a8; // UTextBlock*
		constexpr auto TextBlock_45 = 0x7b0; // UTextBlock*
		constexpr auto TextureQualityOption = 0x7b8; // UOptionButton_V2_C*
		constexpr auto TriggerEffectToggleOption = 0x7c0; // UOptionButton_V2_C*
		constexpr auto UIVolSlider_2D = 0x7c8; // URangeSliderWithText_V2_C*
		constexpr auto UIVolSlider_3D = 0x7d0; // URangeSliderWithText_V2_C*
		constexpr auto UnitNameplateSliders = 0x7d8; // URangeSliderWithText_V2_C*
		constexpr auto UseNameplateOcclusion = 0x7e0; // UOptionButton_V2_C*
		constexpr auto VehicleKeysList = 0x7e8; // UScrollBox*
		constexpr auto VehicleNameplateSliders = 0x7f0; // URangeSliderWithText_V2_C*
		constexpr auto VerticalSyncOption = 0x7f8; // UOptionButton_V2_C*
		constexpr auto VibrationToggleOption = 0x800; // UOptionButton_V2_C*
		constexpr auto VideoPanel = 0x808; // UCanvasPanel*
		constexpr auto VideoSettingsList = 0x810; // UHLLScrollBox*
		constexpr auto VideoSizeBox = 0x818; // USizeBox*
		constexpr auto ViewDistanceOption = 0x820; // UOptionButton_V2_C*
		constexpr auto VoiceVolSlider = 0x828; // URangeSliderWithText_V2_C*
		constexpr auto WBP_ResolutionComboBox = 0x830; // UWBP_ResolutionComboBox_C*
		constexpr auto OnClosed = 0x838; // FMulticastInlineDelegate
		constexpr auto EditingKeyBinding = 0x848; // bool
		constexpr auto MainMenu = 0x850; // UMainMenuWidget_V2_C*
		constexpr auto SelectedButton = 0x858; // UWidget*
		constexpr auto PauseMenu = 0x860; // UWGT_GameMenu_V2_C*
		constexpr auto GameplayButtonPromptText = 0x868; // TArray<FText>
		constexpr auto ControlsButtonPromptText = 0x878; // TArray<FText>
		constexpr auto VideoButtonPromptText = 0x888; // TArray<FText>
		constexpr auto KeyBindingsButtonPromptText = 0x898; // TArray<FText>
		constexpr auto GamepadButtonPromptText = 0x8a8; // TArray<FText>
		constexpr auto AudioButtonPromptText = 0x8b8; // TArray<FText>
		constexpr auto RightTriggerXboxImage = 0x8c8; // FSlateBrush
		constexpr auto LeftTriggerXboxImage = 0x950; // FSlateBrush
		constexpr auto RightTriggerPlaystationImage = 0x9d8; // FSlateBrush
		constexpr auto LeftTriggerPlaystationImage = 0xa60; // FSlateBrush
		constexpr auto bHasChangedKeyBinding = 0xae8; // bool
		constexpr auto MatchmakingScreen = 0xaf0; // UMatchmakingScreen_V2_C*
		constexpr auto Resolutions = 0xaf8; // TArray<FResolutionPair>
		constexpr auto ResetHintsDialog = 0xb08; // UHLLDialogBox*
		constexpr auto ResetPageDialog = 0xb10; // UHLLDialogBox*
		constexpr auto bOriginalScrollBarVisibility = 0xb18; // bool
		constexpr auto bCanScroll = 0xb19; // bool
	}

	namespace n_UBPW_EquipmentItem_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Image_1 = 0x238; // UImage*
		constexpr auto SizeBox_1 = 0x240; // USizeBox*
		constexpr auto Equipment_Type = 0x248; // EWeaponType
		constexpr auto Widget_TooltipRef = 0x250; // UW_HoverToolTip_Explained_C*
		constexpr auto Equipment_Info = 0x258; // FST_EquipmentItem_Info
		constexpr auto SlotSize = 0x2a8; // E_SlotSizes
		constexpr auto SlotDimensions = 0x2ac; // FVector2D
	}

	namespace n_ULogoutCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UBTTask_BlueprintBase {
		constexpr auto AIOwner = 0x70; // AAIController*
		constexpr auto ActorOwner = 0x78; // AActor*
		constexpr auto TickInterval = 0x80; // FIntervalCountdown
		constexpr auto bShowPropertyDetails = 0xa0; // char : 1
	}

	namespace n_USoundfieldSubmix {
		constexpr auto SoundfieldEncodingFormat = 0x40; // FName
		constexpr auto EncodingSettings = 0x48; // USoundfieldEncodingSettingsBase*
		constexpr auto SoundfieldEffectChain = 0x50; // TArray<USoundfieldEffectBase*>
		constexpr auto EncodingSettingsClass = 0x60; // USoundfieldEncodingSettingsBase*
	}

	namespace n_APhysicsConstraintActor {
		constexpr auto ConstraintComp = 0x220; // UPhysicsConstraintComponent*
		constexpr auto ConstraintActor1 = 0x228; // AActor*
		constexpr auto ConstraintActor2 = 0x230; // AActor*
		constexpr auto bDisableCollision = 0x238; // char : 1
	}

	namespace n_UInterpTrackInstSlomo {
		constexpr auto OldTimeDilation = 0x28; // float
	}

	namespace n_UReflectionCaptureComponent {
		constexpr auto CaptureOffsetComponent = 0x1f0; // UBillboardComponent*
		constexpr auto ReflectionSourceType = 0x1f8; // EReflectionSourceType
		constexpr auto Cubemap = 0x200; // UTextureCube*
		constexpr auto SourceCubemapAngle = 0x208; // float
		constexpr auto Brightness = 0x20c; // float
		constexpr auto CaptureOffset = 0x210; // FVector
		constexpr auto MapBuildDataId = 0x21c; // FGuid
	}

	namespace n_ULocalPlayer {
		constexpr auto ViewportClient = 0x70; // UGameViewportClient*
		constexpr auto AspectRatioAxisConstraint = 0x94; // EAspectRatioAxisConstraint
		constexpr auto PendingLevelPlayerControllerClass = 0x98; // APlayerController*
		constexpr auto bSentSplitJoin = 0xa0; // char : 1
		constexpr auto ControllerId = 0xb8; // int32_t
	}

	namespace n_UWGT_Credits_V2_C {
		constexpr auto UberGraphFrame = 0x378; // FPointerToUberGraphFrame
		constexpr auto OpenAnim = 0x380; // UWidgetAnimation*
		constexpr auto ButtonPromptsInfo = 0x388; // UButtonPromptsInfo_V2_C*
		constexpr auto MainMenu = 0x390; // UMainMenuWidget_V2_C*
	}

	namespace n_APaperTileMapActor {
		constexpr auto RenderComponent = 0x220; // UPaperTileMapComponent*
	}

	namespace n_UMaterialExpressionConstantBiasScale {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto Bias = 0x54; // float
		constexpr auto Scale = 0x58; // float
	}

	namespace n_AHLLAbility_ProjectileStrike {
		constexpr auto ProjectileClass = 0x370; // AShooterProjectile*
		constexpr auto NumProjectiles = 0x378; // char
		constexpr auto StrikeZoneRadius = 0x37c; // float
		constexpr auto DelayBetweenProjectiles = 0x380; // float
		constexpr auto InitialLaunchDelay = 0x384; // float
		constexpr auto ProjectileStartDistance = 0x388; // float
		constexpr auto ProjectileLaunchZOffset = 0x38c; // float
		constexpr auto ProjectileArcFactor = 0x390; // float
		constexpr auto LaunchSound = 0x398; // USoundBase*
		constexpr auto bProjectilesStartedFiring = 0x3a0; // bool
	}

	namespace n_UStereoLayerShapeEquirect {
		constexpr auto LeftUVRect = 0x28; // FBox2D
		constexpr auto RightUVRect = 0x3c; // FBox2D
		constexpr auto LeftScale = 0x50; // FVector2D
		constexpr auto RightScale = 0x58; // FVector2D
		constexpr auto LeftBias = 0x60; // FVector2D
		constexpr auto RightBias = 0x68; // FVector2D
	}

	namespace n_AHLLAntiTankGun {
		constexpr auto DismantleTime = 0x378; // float
		constexpr auto DismantleScore = 0x37c; // FName
		constexpr auto DismantleEffect = 0x388; // AShooterImpactEffect*
		constexpr auto DismantleEffectTransform = 0x390; // FTransform
		constexpr auto UpgradeData = 0x3c0; // FHLLUpgradeInfo
		constexpr auto UpgradeGhostComponent = 0x448; // UHLLUpgradeGhostComponent*
		constexpr auto PlayerBlockerL = 0x450; // UCapsuleComponent*
		constexpr auto PlayerBlockerR = 0x458; // UCapsuleComponent*
	}

	namespace n_USoundNodeWaveParam {
		constexpr auto WaveParameterName = 0x48; // FName
	}

	namespace n_UPhysicalMaterial {
		constexpr auto Friction = 0x28; // float
		constexpr auto FrictionCombineMode = 0x2c; // EFrictionCombineMode
		constexpr auto bOverrideFrictionCombineMode = 0x2d; // bool
		constexpr auto Restitution = 0x30; // float
		constexpr auto RestitutionCombineMode = 0x34; // EFrictionCombineMode
		constexpr auto bOverrideRestitutionCombineMode = 0x35; // bool
		constexpr auto Density = 0x38; // float
		constexpr auto RaiseMassToPower = 0x3c; // float
		constexpr auto DestructibleDamageThresholdScale = 0x40; // float
		constexpr auto PhysicalMaterialProperty = 0x48; // UPhysicalMaterialPropertyBase*
		constexpr auto SurfaceType = 0x50; // EPhysicalSurface
		constexpr auto TireFrictionScale = 0x54; // float
		constexpr auto TireFrictionScales = 0x58; // TArray<FTireFrictionScalePair>
	}

	namespace n_UDemoNetDriver {
		constexpr auto RollbackNetStartupActors = 0x840; // TMap<FString, FRollbackNetStartupActorInfo>
		constexpr auto CheckpointSaveMaxMSPerFrame = 0xc54; // float
		constexpr auto MulticastRecordOptions = 0xc88; // TArray<FMulticastRecordOptions>
		constexpr auto bIsLocalReplay = 0xce8; // bool
		constexpr auto SpectatorControllers = 0xcf0; // TArray<APlayerController*>
	}

	namespace n_UMaterialExpressionDepthOfFieldFunction {
		constexpr auto FunctionValue = 0x40; // EDepthOfFieldFunctionValue
		constexpr auto Depth = 0x44; // FExpressionInput
	}

	namespace n_UNavigationSystemConfig {
		constexpr auto NavigationSystemClass = 0x28; // FSoftClassPath
		constexpr auto SupportedAgentsMask = 0x40; // FNavAgentSelector
		constexpr auto DefaultAgentName = 0x44; // FName
		constexpr auto bIsOverriden = 0x4c; // char : 1
	}

	namespace n_UParticleModuleSpawnPerUnit {
		constexpr auto UnitScalar = 0x38; // float
		constexpr auto MovementTolerance = 0x3c; // float
		constexpr auto SpawnPerUnit = 0x40; // FRawDistributionFloat
		constexpr auto MaxFrameDistance = 0x70; // float
		constexpr auto bIgnoreSpawnRateWhenMoving = 0x74; // char : 1
		constexpr auto bIgnoreMovementAlongX = 0x74; // char : 1
		constexpr auto bIgnoreMovementAlongY = 0x74; // char : 1
		constexpr auto bIgnoreMovementAlongZ = 0x74; // char : 1
	}

	namespace n_UNavigationSystemModuleConfig {
		constexpr auto bStrictlyStatic = 0x50; // char : 1
		constexpr auto bCreateOnClient = 0x50; // char : 1
		constexpr auto bAutoSpawnMissingNavData = 0x50; // char : 1
		constexpr auto bSpawnNavDataInNavBoundsLevel = 0x50; // char : 1
	}

	namespace n_AProceduralFoliageVolume {
		constexpr auto ProceduralComponent = 0x258; // UProceduralFoliageComponent*
	}

	namespace n_AServerQueueFrontend {
		constexpr auto ProgressWidgetClass = 0x220; // UServerQueueProgressWidget*
		constexpr auto ProgressWidgetZOrder = 0x228; // int32_t
		constexpr auto BeaconClient = 0x230; // AServerQueueBeaconClient*
		constexpr auto ProgressWidget = 0x238; // UServerQueueProgressWidget*
	}

	namespace n_UMovieSceneCaptureProtocolBase {
		constexpr auto State = 0x50; // EMovieSceneCaptureProtocolState
	}

	namespace n_AAtmosphericFog {
		constexpr auto AtmosphericFogComponent = 0x220; // UAtmosphericFogComponent*
	}

	namespace n_UBoneMaskFilter {
		constexpr auto BlendPoses = 0x28; // TArray<FInputBlendPose>
	}

	namespace n_UHLLReplicationGraph {
		constexpr auto SpatializedClasses = 0x498; // TArray<UObject*>
		constexpr auto NonSpatializedChildClasses = 0x4a8; // TArray<UObject*>
		constexpr auto AlwaysRelevantClasses = 0x4b8; // TArray<UObject*>
		constexpr auto GridNode = 0x4c8; // UReplicationGraphNode_GridSpatialization2D*
		constexpr auto AlwaysRelevantNode = 0x4d0; // UReplicationGraphNode_ActorList*
		constexpr auto TeamNode = 0x4d8; // UHLLReplicationGraphNode_Team*
		constexpr auto CommanderAbilitiesNode = 0x4e0; // UHLLReplicationGraphNode_CommanderAbilities*
		constexpr auto PlayerPawnClass = 0x5d0; // APawn*
	}

	namespace n_UTankAudioComponent {
		constexpr auto EngineDuckingCurve = 0xb0; // UCurveFloat*
	}

	namespace n_ATankDriverSeat {
		constexpr auto InteriorMesh = 0x990; // UStaticMeshComponent*
		constexpr auto CameraController = 0x998; // USeatCameraController*
	}

	namespace n_USceneCaptureComponent {
		constexpr auto PrimitiveRenderMode = 0x1f0; // ESceneCapturePrimitiveRenderMode
		constexpr auto CaptureSource = 0x1f1; // ESceneCaptureSource
		constexpr auto bCaptureEveryFrame = 0x1f2; // char : 1
		constexpr auto bCaptureOnMovement = 0x1f2; // char : 1
		constexpr auto bAlwaysPersistRenderingState = 0x1f3; // bool
		constexpr auto HiddenComponents = 0x1f8; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
		constexpr auto HiddenActors = 0x208; // TArray<AActor*>
		constexpr auto ShowOnlyComponents = 0x218; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
		constexpr auto ShowOnlyActors = 0x228; // TArray<AActor*>
		constexpr auto LODDistanceFactor = 0x238; // float
		constexpr auto MaxViewDistanceOverride = 0x23c; // float
		constexpr auto CaptureSortPriority = 0x240; // int32_t
		constexpr auto bUseRayTracingIfEnabled = 0x244; // bool
		constexpr auto ShowFlagSettings = 0x248; // TArray<FEngineShowFlagsSetting>
		constexpr auto ProfilingEventName = 0x268; // FString
	}

	namespace n_AHLLPlatoon {
		constexpr auto ID = 0x228; // int32_t
		constexpr auto Type = 0x22c; // EPlatoonType
		constexpr auto Team = 0x22d; // ETeam
		constexpr auto Officer = 0x230; // AShooterPlayerState*
		constexpr auto PlatoonMeta = 0x238; // FPlatoonMeta
		constexpr auto Members = 0x240; // TArray<AShooterPlayerState*>
		constexpr auto SuppressionModifierCurve = 0x250; // UCurveVector*
	}

	namespace n_UHLLAdminCameraMovement {
		constexpr auto MinSpeed = 0x150; // float
	}

	namespace n_UPaperTileMap {
		constexpr auto MapWidth = 0x28; // int32_t
		constexpr auto MapHeight = 0x2c; // int32_t
		constexpr auto TileWidth = 0x30; // int32_t
		constexpr auto TileHeight = 0x34; // int32_t
		constexpr auto PixelsPerUnrealUnit = 0x38; // float
		constexpr auto SeparationPerTileX = 0x3c; // float
		constexpr auto SeparationPerTileY = 0x40; // float
		constexpr auto SeparationPerLayer = 0x44; // float
		constexpr auto SelectedTileSet = 0x48; // TSoftObjectPtr<UPaperTileSet>
		constexpr auto Material = 0x70; // UMaterialInterface*
		constexpr auto TileLayers = 0x78; // TArray<UPaperTileLayer*>
		constexpr auto CollisionThickness = 0x88; // float
		constexpr auto SpriteCollisionDomain = 0x8c; // ESpriteCollisionMode
		constexpr auto ProjectionMode = 0x8d; // ETileMapProjectionMode
		constexpr auto HexSideLength = 0x90; // int32_t
		constexpr auto BodySetup = 0x98; // UBodySetup*
		constexpr auto LayerNameIndex = 0xa0; // int32_t
	}

	namespace n_UMaterialExpressionMaterialFunctionCall {
		constexpr auto MaterialFunction = 0x40; // UMaterialFunctionInterface*
		constexpr auto FunctionParameterInfo = 0x48; // FMaterialParameterInfo
	}

	namespace n_UAnimCompress_RemoveTrivialKeys {
		constexpr auto MaxPosDiff = 0x40; // float
		constexpr auto MaxAngleDiff = 0x44; // float
		constexpr auto MaxScaleDiff = 0x48; // float
	}

	namespace n_UPhysicsConstraintTemplate {
		constexpr auto DefaultInstance = 0x28; // FConstraintInstance
		constexpr auto ProfileHandles = 0x1e0; // TArray<FPhysicsConstraintProfileHandle>
		constexpr auto DefaultProfile = 0x1f0; // FConstraintProfileProperties
	}

	namespace n_AHLLCommanderAbility {
		constexpr auto ResourceCategory = 0x228; // EGameResource
		constexpr auto ResourceCost = 0x22c; // int32_t
		constexpr auto CooldownTime = 0x230; // float
		constexpr auto AbilityName = 0x238; // FText
		constexpr auto AbilityTooltip = 0x250; // FText
		constexpr auto AbilityIcon = 0x268; // FSlateBrush
		constexpr auto bTickWhileActive = 0x2f0; // char : 1
		constexpr auto UserInterfacePriority = 0x2f4; // int32_t
		constexpr auto ActionScoreOnExecute = 0x2f8; // FName
		constexpr auto UISubCategory = 0x300; // FText
		constexpr auto bEnableFilters = 0x318; // char : 1
		constexpr auto Filters = 0x31c; // int32_t
		constexpr auto bShowChatMessageWhenUsed = 0x320; // char : 1
		constexpr auto ActivationState = 0x324; // FRepAbilityState
		constexpr auto AbilityTeam = 0x330; // ETeam
		constexpr auto StartedBy = 0x338; // AShooterPlayerState*
		constexpr auto DummyRoot = 0x340; // USceneComponent*
	}

	namespace n_UBTTask_FinishWithResult {
		constexpr auto Result = 0x70; // EBTNodeResult
	}

	namespace n_UTabbedButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto LabelRadio = 0x238; // UImage*
		constexpr auto LabelText = 0x240; // UTextBlock*
		constexpr auto RootButton = 0x248; // UButton*
		constexpr auto SpacerText = 0x250; // UTextBlock*
		constexpr auto ParentWidget = 0x258; // UWidget*
		constexpr auto bSelected = 0x260; // bool
		constexpr auto bHovered = 0x261; // bool
		constexpr auto ButtonText = 0x268; // FText
		constexpr auto bHasSectionFocus = 0x280; // bool
		constexpr auto OnClicked = 0x288; // FMulticastInlineDelegate
		constexpr auto TextSize = 0x298; // int32_t
	}

	namespace n_AHLLMapData_Marker {
		constexpr auto MarkerType = 0x238; // EHLLMarker
		constexpr auto MarkerSubIndex = 0x239; // char
		constexpr auto OwningPlayer = 0x23c; // TWeakObjectPtr<AShooterPlayerState>
		constexpr auto OnMovedOrPlacedDelegate = 0x248; // FMulticastInlineDelegate
		constexpr auto bWantsDisplayed = 0x258; // bool
		constexpr auto DisplayToggleOnTime = 0x25c; // float
		constexpr auto DisplayToggleOffTime = 0x260; // float
		constexpr auto IndicatorComponent = 0x268; // UHLLIndicatorComponent_Marker*
	}

	namespace n_Uhll_text_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto txt_Text = 0x238; // UTextBlock*
		constexpr auto Text = 0x240; // FText
		constexpr auto isAllCaps = 0x258; // bool
		constexpr auto FontColor = 0x260; // FSlateColor
		constexpr auto Font = 0x288; // FSlateFontInfo
		constexpr auto AutoWrap = 0x2d8; // bool
		constexpr auto ShadowColor = 0x2dc; // FLinearColor
		constexpr auto ShadowOffset = 0x2ec; // FVector2D
		constexpr auto Justification = 0x2f4; // ETextJustify
	}

	namespace n_UBrainComponent {
		constexpr auto BlackboardComp = 0xb8; // UBlackboardComponent*
		constexpr auto AIOwner = 0xc0; // AAIController*
	}

	namespace n_ULevelSequencePlayer {
		constexpr auto OnCameraCut = 0x888; // FMulticastInlineDelegate
	}

	namespace n_UUserWidget {
		constexpr auto ColorAndOpacity = 0x110; // FLinearColor
		constexpr auto ColorAndOpacityDelegate = 0x120; // FDelegate
		constexpr auto ForegroundColor = 0x130; // FSlateColor
		constexpr auto ForegroundColorDelegate = 0x158; // FDelegate
		constexpr auto Padding = 0x168; // FMargin
		constexpr auto ActiveSequencePlayers = 0x178; // TArray<UUMGSequencePlayer*>
		constexpr auto StoppedSequencePlayers = 0x188; // TArray<UUMGSequencePlayer*>
		constexpr auto NamedSlotBindings = 0x198; // TArray<FNamedSlotBinding>
		constexpr auto WidgetTree = 0x1a8; // UWidgetTree*
		constexpr auto Priority = 0x1b0; // int32_t
		constexpr auto bSupportsKeyboardFocus = 0x1b4; // char : 1
		constexpr auto bIsFocusable = 0x1b4; // char : 1
		constexpr auto bStopAction = 0x1b4; // char : 1
		constexpr auto bHasScriptImplementedTick = 0x1b4; // char : 1
		constexpr auto bHasScriptImplementedPaint = 0x1b4; // char : 1
		constexpr auto bCookedWidgetTree = 0x1b4; // char : 1
		constexpr auto TickFrequency = 0x1c0; // EWidgetTickFrequency
		constexpr auto InputComponent = 0x1c8; // UInputComponent*
		constexpr auto AnimationCallbacks = 0x1d0; // TArray<FAnimationEventBinding>
	}

	namespace n_UTireType {
		constexpr auto FrictionScale = 0x30; // float
	}

	namespace n_UMaterialExpressionFmod {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
	}

	namespace n_UMaterialExpressionLandscapeVisibilityMask {
		constexpr auto ExpressionGUID = 0x40; // FGuid
	}

	namespace n_UAIPerceptionStimuliSourceComponent {
		constexpr auto bAutoRegisterAsSource = 0xb0; // char : 1
		constexpr auto RegisterAsSourceForSenses = 0xb8; // TArray<UAISense*>
	}

	namespace n_UEnvQueryGenerator_SimpleGrid {
		constexpr auto GridSize = 0x80; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0xb8; // FAIDataProviderFloatValue
		constexpr auto GenerateAround = 0xf0; // UEnvQueryContext*
	}

	namespace n_AHLLCosmeticCharacterRenderer {
		constexpr auto ViewCamera = 0x260; // UCineCameraComponent*
		constexpr auto BackgroundMesh = 0x268; // UStaticMeshComponent*
	}

	namespace n_UShooterGameInstance {
		constexpr auto RconStatePostInitialisedEvent = 0x198; // FMulticastInlineDelegate
		constexpr auto WelcomeScreenMap = 0x1b0; // FString
		constexpr auto MainMenuMap = 0x1c0; // FString
		constexpr auto LoadingScreensData = 0x408; // ULoadingScreensData*
		constexpr auto m_pendingRconActor = 0x468; // AActor*
		constexpr auto StatManager = 0x488; // UHLLOnlineStatsManager*
		constexpr auto CosmeticManager = 0x490; // UHLLCosmeticManager*
		constexpr auto ServerQueue = 0x498; // UServerQueue*
		constexpr auto HintsAndTips = 0x4a0; // UHintsAndTips*
		constexpr auto MaterialManagerClass = 0x4b8; // TSoftClassPtr<UObject>
		constexpr auto MaterialManager = 0x4e0; // UHLLMaterialManager*
	}

	namespace n_UMaterialExpressionLandscapeLayerSample {
		constexpr auto ParameterName = 0x40; // FName
		constexpr auto PreviewWeight = 0x48; // float
		constexpr auto ExpressionGUID = 0x4c; // FGuid
	}

	namespace n_UGamepadLayoutKey_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto ActionText = 0x238; // URichTextBlock*
		constexpr auto ButtonIcon = 0x240; // UImage*
		constexpr auto HoldActionText = 0x248; // URichTextBlock*
		constexpr auto IconScaleBox = 0x250; // UScaleBox*
		constexpr auto LayoutContainer = 0x258; // UHorizontalBox*
		constexpr auto Spacer_88 = 0x260; // USpacer*
		constexpr auto TextContainer = 0x268; // UVerticalBox*
		constexpr auto AssociatedGamepadKey = 0x270; // FKey
		constexpr auto bIsTextOnLeftSide = 0x288; // bool
		constexpr auto RichTextFormat = 0x290; // FText
	}

	namespace n_UDistributionFloatConstant {
		constexpr auto Constant = 0x38; // float
	}

	namespace n_AHLLGhostAbilitySafezone {
		constexpr auto DummyRoot = 0x220; // USceneComponent*
		constexpr auto Mesh = 0x228; // UStaticMeshComponent*
	}

	namespace n_UHLLUI_CosmeticCategory {
		constexpr auto ParentPanel = 0x230; // TWeakObjectPtr<UHLLUI_CharacterSelection>
		constexpr auto CosmeticType = 0x238; // EHLLCosmeticType
		constexpr auto ItemWidget = 0x240; // UHLLUI_CosmeticItem*
		constexpr auto ItemTooltipWidget = 0x248; // UHLLUI_CosmeticItemTooltip*
		constexpr auto MaxColumns = 0x250; // int32_t
		constexpr auto ActiveItems = 0x258; // TArray<UHLLUI_CosmeticItem*>
		constexpr auto TooltipItem = 0x268; // UHLLUI_CosmeticItemTooltip*
		constexpr auto bShowingVariations = 0x270; // char : 1
		constexpr auto ItemScroller = 0x278; // UScrollBox*
		constexpr auto ItemPanel = 0x280; // UUniformGridPanel*
		constexpr auto CategoryText = 0x288; // UTextBlock*
		constexpr auto UnlockedText = 0x290; // UTextBlock*
	}

	namespace n_UBehaviorTreeComponent {
		constexpr auto NodeInstances = 0x130; // TArray<UBTNode*>
		constexpr auto DefaultBehaviorTreeAsset = 0x268; // UBehaviorTree*
	}

	namespace n_UParticleModuleSpawnBase {
		constexpr auto bProcessSpawnRate = 0x30; // char : 1
		constexpr auto bProcessBurstList = 0x30; // char : 1
	}

	namespace n_UInterpTrackMove {
		constexpr auto PosTrack = 0x70; // FInterpCurveVector
		constexpr auto EulerTrack = 0x88; // FInterpCurveVector
		constexpr auto LookupTrack = 0xa0; // FInterpLookupTrack
		constexpr auto LookAtGroupName = 0xb0; // FName
		constexpr auto LinCurveTension = 0xb8; // float
		constexpr auto AngCurveTension = 0xbc; // float
		constexpr auto bUseQuatInterpolation = 0xc0; // char : 1
		constexpr auto bShowArrowAtKeys = 0xc0; // char : 1
		constexpr auto bDisableMovement = 0xc0; // char : 1
		constexpr auto bShowTranslationOnCurveEd = 0xc0; // char : 1
		constexpr auto bShowRotationOnCurveEd = 0xc0; // char : 1
		constexpr auto bHide3DTrack = 0xc0; // char : 1
		constexpr auto RotMode = 0xc4; // EInterpTrackMoveRotMode
	}

	namespace n_UPlatoonManagementStackInvite {
		constexpr auto Title = 0x230; // UTextBlock*
		constexpr auto Message = 0x238; // UTextBlock*
		constexpr auto ViewportClient = 0x240; // UShooterGameViewportClient*
	}

	namespace n_UDialogueVoice {
		constexpr auto Gender = 0x28; // EGrammaticalGender
		constexpr auto Plurality = 0x29; // EGrammaticalNumber
		constexpr auto LocalizationGUID = 0x2c; // FGuid
	}

	namespace n_UHLLUI_Loadout {
		constexpr auto ParentSelector = 0x230; // TWeakObjectPtr<UHLLUI_LoadoutSelector>
		constexpr auto ItemIcon = 0x238; // UImage*
		constexpr auto ItemName = 0x240; // UTextBlock*
		constexpr auto bIsSelected = 0x248; // char : 1
		constexpr auto bIsUnlocked = 0x248; // char : 1
		constexpr auto LoadoutID = 0x249; // char
		constexpr auto DefaultIcon = 0x250; // FSlateBrush
	}

	namespace n_UBlackboardKeyType_Enum {
		constexpr auto EnumType = 0x30; // UEnum*
		constexpr auto EnumName = 0x38; // FString
		constexpr auto bIsEnumNameValid = 0x48; // char : 1
	}

	namespace n_ULightComponent {
		constexpr auto Temperature = 0x220; // float
		constexpr auto MaxDrawDistance = 0x224; // float
		constexpr auto MaxDistanceFadeRange = 0x228; // float
		constexpr auto bUseTemperature = 0x22c; // char : 1
		constexpr auto ShadowMapChannel = 0x230; // int32_t
		constexpr auto MinRoughness = 0x238; // float
		constexpr auto SpecularScale = 0x23c; // float
		constexpr auto ShadowResolutionScale = 0x240; // float
		constexpr auto ShadowBias = 0x244; // float
		constexpr auto ShadowSlopeBias = 0x248; // float
		constexpr auto ShadowSharpen = 0x24c; // float
		constexpr auto ContactShadowLength = 0x250; // float
		constexpr auto ContactShadowLengthInWS = 0x254; // char : 1
		constexpr auto InverseSquaredFalloff = 0x254; // char : 1
		constexpr auto CastTranslucentShadows = 0x254; // char : 1
		constexpr auto bCastShadowsFromCinematicObjectsOnly = 0x254; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x254; // char : 1
		constexpr auto bForceCachedShadowsForMovablePrimitives = 0x254; // char : 1
		constexpr auto LightingChannels = 0x258; // FLightingChannels
		constexpr auto LightFunctionMaterial = 0x260; // UMaterialInterface*
		constexpr auto LightFunctionScale = 0x268; // FVector
		constexpr auto IESTexture = 0x278; // UTextureLightProfile*
		constexpr auto bUseIESBrightness = 0x280; // char : 1
		constexpr auto IESBrightnessScale = 0x284; // float
		constexpr auto LightFunctionFadeDistance = 0x288; // float
		constexpr auto DisabledBrightness = 0x28c; // float
		constexpr auto bEnableLightShaftBloom = 0x290; // char : 1
		constexpr auto BloomScale = 0x294; // float
		constexpr auto BloomThreshold = 0x298; // float
		constexpr auto BloomMaxBrightness = 0x29c; // float
		constexpr auto BloomTint = 0x2a0; // FColor
		constexpr auto bUseRayTracedDistanceFieldShadows = 0x2a4; // bool
		constexpr auto RayStartOffsetDepthScale = 0x2a8; // float
	}

	namespace n_UWGT_PlayerVote_C {
		constexpr auto UberGraphFrame = 0x260; // FPointerToUberGraphFrame
		constexpr auto PulseAnim = 0x268; // UWidgetAnimation*
		constexpr auto ButtonPrompt = 0x270; // UImage*
		constexpr auto ContainerSwitch = 0x278; // UWidgetSwitcher*
		constexpr auto DismissButton = 0x280; // UButton*
		constexpr auto DismissKey = 0x288; // UHLLKeyText*
		constexpr auto Ignore = 0x290; // UWGT_PlayerVoteButton_C*
		constexpr auto No = 0x298; // UWGT_PlayerVoteButton_C*
		constexpr auto PlayerVote = 0x2a0; // UTextBlock*
		constexpr auto RatioText = 0x2a8; // UTextBlock*
		constexpr auto Yes = 0x2b0; // UWGT_PlayerVoteButton_C*
		constexpr auto TitleColour = 0x2b8; // FSlateColor
		constexpr auto TitleColour_Expired = 0x2e0; // FSlateColor
		constexpr auto TitleColour_Failed = 0x308; // FSlateColor
		constexpr auto TitleColour_Passed = 0x330; // FSlateColor
		constexpr auto GamepadButtonIcons = 0x358; // TArray<FSlateBrush>
	}

	namespace n_UVehicleAnimInstance {
		constexpr auto WheeledVehicleMovementComponent = 0x970; // UWheeledVehicleMovementComponent*
	}

	namespace n_ULeaningComponent {
		constexpr auto AngleDegrees = 0xb0; // float
		constexpr auto LeanTime = 0xb4; // float
		constexpr auto DistanceToPivot = 0xb8; // float
		constexpr auto CurrentLeanDirection = 0xbc; // ELeanDirection
	}

	namespace n_UStaticMeshComponent {
		constexpr auto ForcedLodModel = 0x438; // int32_t
		constexpr auto PreviousLODLevel = 0x43c; // int32_t
		constexpr auto MinLOD = 0x440; // int32_t
		constexpr auto SubDivisionStepSize = 0x444; // int32_t
		constexpr auto StaticMesh = 0x448; // UStaticMesh*
		constexpr auto WireframeColorOverride = 0x450; // FColor
		constexpr auto bEvaluateWorldPositionOffset = 0x454; // char : 1
		constexpr auto bOverrideWireframeColor = 0x454; // char : 1
		constexpr auto bOverrideMinLod = 0x454; // char : 1
		constexpr auto bOverrideNavigationExport = 0x454; // char : 1
		constexpr auto bForceNavigationObstacle = 0x454; // char : 1
		constexpr auto bDisallowMeshPaintPerInstance = 0x454; // char : 1
		constexpr auto bIgnoreInstanceForTextureStreaming = 0x454; // char : 1
		constexpr auto bOverrideLightMapRes = 0x454; // char : 1
		constexpr auto bCastDistanceFieldIndirectShadow = 0x455; // char : 1
		constexpr auto bOverrideDistanceFieldSelfShadowBias = 0x455; // char : 1
		constexpr auto bUseSubDivisions = 0x455; // char : 1
		constexpr auto bUseDefaultCollision = 0x455; // char : 1
		constexpr auto bReverseCulling = 0x455; // char : 1
		constexpr auto OverriddenLightMapRes = 0x458; // int32_t
		constexpr auto DistanceFieldIndirectShadowMinVisibility = 0x45c; // float
		constexpr auto DistanceFieldSelfShadowBias = 0x460; // float
		constexpr auto StreamingDistanceMultiplier = 0x464; // float
		constexpr auto LODData = 0x468; // TArray<FStaticMeshComponentLODInfo>
		constexpr auto StreamingTextureData = 0x478; // TArray<FStreamingTextureBuildInfo>
		constexpr auto LightmassSettings = 0x488; // FLightmassPrimitiveSettings
	}

	namespace n_ALight {
		constexpr auto LightComponent = 0x220; // ULightComponent*
		constexpr auto bEnabled = 0x228; // char : 1
	}

	namespace n_ABP_GameCharacter_C {
		constexpr auto SM_RenderFloor08 = 0x270; // UStaticMeshComponent*
		constexpr auto SM_RenderFloor06 = 0x278; // UStaticMeshComponent*
		constexpr auto SpotLight4 = 0x280; // USpotLightComponent*
		constexpr auto SpotLight3 = 0x288; // USpotLightComponent*
		constexpr auto SM_RenderFloor04 = 0x290; // UStaticMeshComponent*
		constexpr auto SpotLight2 = 0x298; // USpotLightComponent*
		constexpr auto SpotLight1 = 0x2a0; // USpotLightComponent*
		constexpr auto SM_RenderFloor01 = 0x2a8; // UStaticMeshComponent*
		constexpr auto PS_LargeEmbers = 0x2b0; // UParticleSystemComponent*
		constexpr auto SpotLight = 0x2b8; // USpotLightComponent*
	}

	namespace n_UHLLRadialMenu_ChildBase {
		constexpr auto OwningRadialMenu = 0x230; // TWeakObjectPtr<UHLLRadialMenu_Base>
	}

	namespace n_UMovieScene3DTransformSection {
		constexpr auto TransformMask = 0xe0; // FMovieSceneTransformMask
		constexpr auto Translation = 0xe8; // FMovieSceneFloatChannel [0x3]
		constexpr auto Rotation = 0x2c8; // FMovieSceneFloatChannel [0x3]
		constexpr auto Scale = 0x4a8; // FMovieSceneFloatChannel [0x3]
		constexpr auto ManualWeight = 0x688; // FMovieSceneFloatChannel
		constexpr auto bUseQuaternionInterpolation = 0x72c; // bool
	}

	namespace n_ABP_Powerline_Child2_EF_C {
		constexpr auto Box = 0x310; // UBoxComponent*
		constexpr auto SM_PowerPole1 = 0x318; // UStaticMeshComponent*
	}

	namespace n_UEnvQueryGenerator_Cone {
		constexpr auto AlignedPointsDistance = 0x80; // FAIDataProviderFloatValue
		constexpr auto ConeDegrees = 0xb8; // FAIDataProviderFloatValue
		constexpr auto AngleStep = 0xf0; // FAIDataProviderFloatValue
		constexpr auto Range = 0x128; // FAIDataProviderFloatValue
		constexpr auto CenterActor = 0x160; // UEnvQueryContext*
		constexpr auto bIncludeContextLocation = 0x168; // char : 1
	}

	namespace n_UTimeSynchronizableMediaSource {
		constexpr auto bUseTimeSynchronization = 0x88; // bool
		constexpr auto FrameDelay = 0x8c; // int32_t
		constexpr auto TimeDelay = 0x90; // double
	}

	namespace n_ACinematicShermanJumboStub {
		constexpr auto TankMesh = 0x220; // USkeletalMeshComponent*
		constexpr auto AllLeftTrackTiles = 0x228; // TArray<UStaticMeshComponent*>
		constexpr auto AllRightTrackTiles = 0x238; // TArray<UStaticMeshComponent*>
		constexpr auto RightTrackTile_000 = 0x248; // UStaticMeshComponent*
		constexpr auto RightTrackTile_001 = 0x250; // UStaticMeshComponent*
		constexpr auto RightTrackTile_002 = 0x258; // UStaticMeshComponent*
		constexpr auto RightTrackTile_003 = 0x260; // UStaticMeshComponent*
		constexpr auto RightTrackTile_004 = 0x268; // UStaticMeshComponent*
		constexpr auto RightTrackTile_005 = 0x270; // UStaticMeshComponent*
		constexpr auto RightTrackTile_006 = 0x278; // UStaticMeshComponent*
		constexpr auto RightTrackTile_007 = 0x280; // UStaticMeshComponent*
		constexpr auto RightTrackTile_008 = 0x288; // UStaticMeshComponent*
		constexpr auto RightTrackTile_009 = 0x290; // UStaticMeshComponent*
		constexpr auto RightTrackTile_010 = 0x298; // UStaticMeshComponent*
		constexpr auto RightTrackTile_011 = 0x2a0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_012 = 0x2a8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_013 = 0x2b0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_014 = 0x2b8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_015 = 0x2c0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_016 = 0x2c8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_017 = 0x2d0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_018 = 0x2d8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_019 = 0x2e0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_020 = 0x2e8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_021 = 0x2f0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_022 = 0x2f8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_023 = 0x300; // UStaticMeshComponent*
		constexpr auto RightTrackTile_024 = 0x308; // UStaticMeshComponent*
		constexpr auto RightTrackTile_025 = 0x310; // UStaticMeshComponent*
		constexpr auto RightTrackTile_026 = 0x318; // UStaticMeshComponent*
		constexpr auto RightTrackTile_027 = 0x320; // UStaticMeshComponent*
		constexpr auto RightTrackTile_028 = 0x328; // UStaticMeshComponent*
		constexpr auto RightTrackTile_029 = 0x330; // UStaticMeshComponent*
		constexpr auto RightTrackTile_030 = 0x338; // UStaticMeshComponent*
		constexpr auto RightTrackTile_031 = 0x340; // UStaticMeshComponent*
		constexpr auto RightTrackTile_032 = 0x348; // UStaticMeshComponent*
		constexpr auto RightTrackTile_033 = 0x350; // UStaticMeshComponent*
		constexpr auto RightTrackTile_034 = 0x358; // UStaticMeshComponent*
		constexpr auto RightTrackTile_035 = 0x360; // UStaticMeshComponent*
		constexpr auto RightTrackTile_036 = 0x368; // UStaticMeshComponent*
		constexpr auto RightTrackTile_037 = 0x370; // UStaticMeshComponent*
		constexpr auto RightTrackTile_038 = 0x378; // UStaticMeshComponent*
		constexpr auto RightTrackTile_039 = 0x380; // UStaticMeshComponent*
		constexpr auto RightTrackTile_040 = 0x388; // UStaticMeshComponent*
		constexpr auto RightTrackTile_041 = 0x390; // UStaticMeshComponent*
		constexpr auto RightTrackTile_042 = 0x398; // UStaticMeshComponent*
		constexpr auto RightTrackTile_043 = 0x3a0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_044 = 0x3a8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_045 = 0x3b0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_046 = 0x3b8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_047 = 0x3c0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_048 = 0x3c8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_049 = 0x3d0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_050 = 0x3d8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_051 = 0x3e0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_052 = 0x3e8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_053 = 0x3f0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_054 = 0x3f8; // UStaticMeshComponent*
		constexpr auto RightTrackTile_055 = 0x400; // UStaticMeshComponent*
		constexpr auto RightTrackTile_056 = 0x408; // UStaticMeshComponent*
		constexpr auto RightTrackTile_057 = 0x410; // UStaticMeshComponent*
		constexpr auto RightTrackTile_058 = 0x418; // UStaticMeshComponent*
		constexpr auto RightTrackTile_059 = 0x420; // UStaticMeshComponent*
		constexpr auto RightTrackTile_060 = 0x428; // UStaticMeshComponent*
		constexpr auto RightTrackTile_061 = 0x430; // UStaticMeshComponent*
		constexpr auto RightTrackTile_062 = 0x438; // UStaticMeshComponent*
		constexpr auto RightTrackTile_063 = 0x440; // UStaticMeshComponent*
		constexpr auto RightTrackTile_064 = 0x448; // UStaticMeshComponent*
		constexpr auto RightTrackTile_065 = 0x450; // UStaticMeshComponent*
		constexpr auto RightTrackTile_066 = 0x458; // UStaticMeshComponent*
		constexpr auto RightTrackTile_067 = 0x460; // UStaticMeshComponent*
		constexpr auto RightTrackTile_068 = 0x468; // UStaticMeshComponent*
		constexpr auto RightTrackTile_069 = 0x470; // UStaticMeshComponent*
		constexpr auto RightTrackTile_070 = 0x478; // UStaticMeshComponent*
		constexpr auto RightTrackTile_071 = 0x480; // UStaticMeshComponent*
		constexpr auto RightTrackTile_072 = 0x488; // UStaticMeshComponent*
		constexpr auto RightTrackTile_073 = 0x490; // UStaticMeshComponent*
		constexpr auto RightTrackTile_074 = 0x498; // UStaticMeshComponent*
		constexpr auto RightTrackTile_075 = 0x4a0; // UStaticMeshComponent*
		constexpr auto RightTrackTile_076 = 0x4a8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_000 = 0x4b0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_001 = 0x4b8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_002 = 0x4c0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_003 = 0x4c8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_004 = 0x4d0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_005 = 0x4d8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_006 = 0x4e0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_007 = 0x4e8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_008 = 0x4f0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_009 = 0x4f8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_010 = 0x500; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_011 = 0x508; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_012 = 0x510; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_013 = 0x518; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_014 = 0x520; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_015 = 0x528; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_016 = 0x530; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_017 = 0x538; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_018 = 0x540; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_019 = 0x548; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_020 = 0x550; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_021 = 0x558; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_022 = 0x560; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_023 = 0x568; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_024 = 0x570; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_025 = 0x578; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_026 = 0x580; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_027 = 0x588; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_028 = 0x590; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_029 = 0x598; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_030 = 0x5a0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_031 = 0x5a8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_032 = 0x5b0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_033 = 0x5b8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_034 = 0x5c0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_035 = 0x5c8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_036 = 0x5d0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_037 = 0x5d8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_038 = 0x5e0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_039 = 0x5e8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_040 = 0x5f0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_041 = 0x5f8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_042 = 0x600; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_043 = 0x608; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_044 = 0x610; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_045 = 0x618; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_046 = 0x620; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_047 = 0x628; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_048 = 0x630; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_049 = 0x638; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_050 = 0x640; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_051 = 0x648; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_052 = 0x650; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_053 = 0x658; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_054 = 0x660; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_055 = 0x668; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_056 = 0x670; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_057 = 0x678; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_058 = 0x680; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_059 = 0x688; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_060 = 0x690; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_061 = 0x698; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_062 = 0x6a0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_063 = 0x6a8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_064 = 0x6b0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_065 = 0x6b8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_066 = 0x6c0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_067 = 0x6c8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_068 = 0x6d0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_069 = 0x6d8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_070 = 0x6e0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_071 = 0x6e8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_072 = 0x6f0; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_073 = 0x6f8; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_074 = 0x700; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_075 = 0x708; // UStaticMeshComponent*
		constexpr auto LeftTrackTile_076 = 0x710; // UStaticMeshComponent*
	}

	namespace n_UHLLUI_OptionSelection {
		constexpr auto PlatformVisibility = 0x230; // int32_t
		constexpr auto ViewportClient = 0x238; // UShooterGameViewportClient*
	}

	namespace n_UMaterialExpressionFresnel {
		constexpr auto ExponentIn = 0x40; // FExpressionInput
		constexpr auto Exponent = 0x54; // float
		constexpr auto BaseReflectFractionIn = 0x58; // FExpressionInput
		constexpr auto BaseReflectFraction = 0x6c; // float
		constexpr auto Normal = 0x70; // FExpressionInput
	}

	namespace n_UAtmosphericFogComponent {
		constexpr auto SunMultiplier = 0x1f0; // float
		constexpr auto FogMultiplier = 0x1f4; // float
		constexpr auto DensityMultiplier = 0x1f8; // float
		constexpr auto DensityOffset = 0x1fc; // float
		constexpr auto DistanceScale = 0x200; // float
		constexpr auto AltitudeScale = 0x204; // float
		constexpr auto DistanceOffset = 0x208; // float
		constexpr auto GroundOffset = 0x20c; // float
		constexpr auto StartDistance = 0x210; // float
		constexpr auto SunDiscScale = 0x214; // float
		constexpr auto DefaultBrightness = 0x218; // float
		constexpr auto DefaultLightColor = 0x21c; // FColor
		constexpr auto bDisableSunDisk = 0x220; // char : 1
		constexpr auto bAtmosphereAffectsSunIlluminance = 0x220; // char : 1
		constexpr auto bDisableGroundScattering = 0x220; // char : 1
		constexpr auto PrecomputeParams = 0x224; // FAtmospherePrecomputeParameters
		constexpr auto TransmittanceTexture = 0x250; // UTexture2D*
		constexpr auto IrradianceTexture = 0x258; // UTexture2D*
	}

	namespace n_UParticleModuleOrbit {
		constexpr auto ChainMode = 0x38; // EOrbitChainMode
		constexpr auto OffsetAmount = 0x40; // FRawDistributionVector
		constexpr auto OffsetOptions = 0x88; // FOrbitOptions
		constexpr auto RotationAmount = 0x90; // FRawDistributionVector
		constexpr auto RotationOptions = 0xd8; // FOrbitOptions
		constexpr auto RotationRateAmount = 0xe0; // FRawDistributionVector
		constexpr auto RotationRateOptions = 0x128; // FOrbitOptions
	}

	namespace n_UBTDecorator_Loop {
		constexpr auto NumLoops = 0x68; // int32_t
		constexpr auto bInfiniteLoop = 0x6c; // bool
		constexpr auto InfiniteLoopTimeoutTime = 0x70; // float
	}

	namespace n_UPaperTerrainMaterial {
		constexpr auto Rules = 0x30; // TArray<FPaperTerrainMaterialRule>
		constexpr auto InteriorFill = 0x40; // UPaperSprite*
	}

	namespace n_AHLLMapData_SeatBase {
		constexpr auto Occupants = 0x248; // TArray<AShooterPlayerState*>
		constexpr auto RepYaw = 0x258; // char
		constexpr auto bReplicateYaw = 0x259; // char : 1
	}

	namespace n_UClothingAssetCommon {
		constexpr auto PhysicsAsset = 0x48; // UPhysicsAsset*
		constexpr auto ClothConfigs = 0x50; // TMap<FName, UClothConfigBase*>
		constexpr auto ClothSharedSimConfig = 0xa0; // UClothConfigBase*
		constexpr auto ClothSimConfig = 0xa8; // UClothConfigBase*
		constexpr auto ChaosClothSimConfig = 0xb0; // UClothConfigBase*
		constexpr auto ClothLODData = 0xb8; // TArray<UClothLODDataCommon_Legacy*>
		constexpr auto LODData = 0xc8; // TArray<FClothLODDataCommon>
		constexpr auto LodMap = 0xd8; // TArray<int32_t>
		constexpr auto UsedBoneNames = 0xe8; // TArray<FName>
		constexpr auto UsedBoneIndices = 0xf8; // TArray<int32_t>
		constexpr auto ReferenceBoneIndex = 0x108; // int32_t
		constexpr auto CustomData = 0x110; // UClothingAssetCustomData*
		constexpr auto ClothConfig = 0x118; // FClothConfig_Legacy
	}

	namespace n_ARecastNavMesh {
		constexpr auto bDrawTriangleEdges = 0x400; // char : 1
		constexpr auto bDrawPolyEdges = 0x400; // char : 1
		constexpr auto bDrawFilledPolys = 0x400; // char : 1
		constexpr auto bDrawNavMeshEdges = 0x400; // char : 1
		constexpr auto bDrawTileBounds = 0x400; // char : 1
		constexpr auto bDrawPathCollidingGeometry = 0x400; // char : 1
		constexpr auto bDrawTileLabels = 0x400; // char : 1
		constexpr auto bDrawPolygonLabels = 0x400; // char : 1
		constexpr auto bDrawDefaultPolygonCost = 0x401; // char : 1
		constexpr auto bDrawLabelsOnPathNodes = 0x401; // char : 1
		constexpr auto bDrawNavLinks = 0x401; // char : 1
		constexpr auto bDrawFailedNavLinks = 0x401; // char : 1
		constexpr auto bDrawClusters = 0x401; // char : 1
		constexpr auto bDrawOctree = 0x401; // char : 1
		constexpr auto bDrawOctreeDetails = 0x401; // char : 1
		constexpr auto bDrawMarkedForbiddenPolys = 0x401; // char : 1
		constexpr auto bDistinctlyDrawTilesBeingBuilt = 0x402; // char : 1
		constexpr auto bDrawNavMesh = 0x402; // char : 1
		constexpr auto DrawOffset = 0x404; // float
		constexpr auto bFixedTilePoolSize = 0x408; // char : 1
		constexpr auto TilePoolSize = 0x40c; // int32_t
		constexpr auto TileSizeUU = 0x410; // float
		constexpr auto CellSize = 0x414; // float
		constexpr auto CellHeight = 0x418; // float
		constexpr auto AgentRadius = 0x41c; // float
		constexpr auto AgentHeight = 0x420; // float
		constexpr auto AgentMaxHeight = 0x424; // float
		constexpr auto AgentMaxSlope = 0x428; // float
		constexpr auto AgentMaxStepHeight = 0x42c; // float
		constexpr auto MinRegionArea = 0x430; // float
		constexpr auto MergeRegionSize = 0x434; // float
		constexpr auto MaxSimplificationError = 0x438; // float
		constexpr auto MaxSimultaneousTileGenerationJobsCount = 0x43c; // int32_t
		constexpr auto TileNumberHardLimit = 0x440; // int32_t
		constexpr auto PolyRefTileBits = 0x444; // int32_t
		constexpr auto PolyRefNavPolyBits = 0x448; // int32_t
		constexpr auto PolyRefSaltBits = 0x44c; // int32_t
		constexpr auto NavMeshOriginOffset = 0x450; // FVector
		constexpr auto DefaultDrawDistance = 0x45c; // float
		constexpr auto DefaultMaxSearchNodes = 0x460; // float
		constexpr auto DefaultMaxHierarchicalSearchNodes = 0x464; // float
		constexpr auto RegionPartitioning = 0x468; // ERecastPartitioning
		constexpr auto LayerPartitioning = 0x469; // ERecastPartitioning
		constexpr auto RegionChunkSplits = 0x46c; // int32_t
		constexpr auto LayerChunkSplits = 0x470; // int32_t
		constexpr auto bSortNavigationAreasByCost = 0x474; // char : 1
		constexpr auto bPerformVoxelFiltering = 0x474; // char : 1
		constexpr auto bMarkLowHeightAreas = 0x474; // char : 1
		constexpr auto bFilterLowSpanSequences = 0x474; // char : 1
		constexpr auto bFilterLowSpanFromTileCache = 0x474; // char : 1
		constexpr auto bDoFullyAsyncNavDataGathering = 0x474; // char : 1
		constexpr auto bUseBetterOffsetsFromCorners = 0x474; // char : 1
		constexpr auto bStoreEmptyTileLayers = 0x474; // char : 1
		constexpr auto bUseVirtualFilters = 0x475; // char : 1
		constexpr auto bAllowNavLinkAsPathEnd = 0x475; // char : 1
		constexpr auto bUseVoxelCache = 0x475; // char : 1
		constexpr auto TileSetUpdateInterval = 0x478; // float
		constexpr auto HeuristicScale = 0x47c; // float
		constexpr auto VerticalDeviationFromGroundCompensation = 0x480; // float
	}

	namespace n_AEmitter {
		constexpr auto ParticleSystemComponent = 0x220; // UParticleSystemComponent*
		constexpr auto bDestroyOnSystemFinish = 0x228; // char : 1
		constexpr auto bPostUpdateTickGroup = 0x228; // char : 1
		constexpr auto bCurrentlyActive = 0x228; // char : 1
		constexpr auto OnParticleSpawn = 0x230; // FMulticastInlineDelegate
		constexpr auto OnParticleBurst = 0x240; // FMulticastInlineDelegate
		constexpr auto OnParticleDeath = 0x250; // FMulticastInlineDelegate
		constexpr auto OnParticleCollide = 0x260; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionMax {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto ConstA = 0x68; // float
		constexpr auto ConstB = 0x6c; // float
	}

	namespace n_ADeathCamera {
		constexpr auto Camera = 0x238; // UCameraComponent*
		constexpr auto Collision = 0x240; // USphereComponent*
		constexpr auto Movement = 0x248; // UProjectileMovementComponent*
		constexpr auto RotationAxisConeHalfAngle = 0x250; // float
		constexpr auto RotationSpeed = 0x254; // float
		constexpr auto RotationDecelerationSpeed = 0x258; // float
		constexpr auto FadeToBlackTime = 0x25c; // float
		constexpr auto FadeToSkyViewTime = 0x260; // float
		constexpr auto BlownUpDeathScreenDelay = 0x264; // float
	}

	namespace n_APartyBeaconClient {
		constexpr auto DestSessionId = 0x2e0; // FString
		constexpr auto PendingReservation = 0x2f0; // FPartyReservation
		constexpr auto RequestType = 0x340; // EClientRequestType
		constexpr auto bPendingReservationSent = 0x341; // bool
		constexpr auto bCancelReservation = 0x342; // bool
	}

	namespace n_UHLLMapIcon_SeatBase {
		constexpr auto bColouriseButton = 0x368; // char : 1
		constexpr auto bColouriseIcon = 0x368; // char : 1
	}

	namespace n_UGameUserSettings {
		constexpr auto bUseVSync = 0x28; // bool
		constexpr auto bUseDynamicResolution = 0x29; // bool
		constexpr auto ResolutionSizeX = 0x80; // uint32_t
		constexpr auto ResolutionSizeY = 0x84; // uint32_t
		constexpr auto LastUserConfirmedResolutionSizeX = 0x88; // uint32_t
		constexpr auto LastUserConfirmedResolutionSizeY = 0x8c; // uint32_t
		constexpr auto WindowPosX = 0x90; // int32_t
		constexpr auto WindowPosY = 0x94; // int32_t
		constexpr auto FullscreenMode = 0x98; // int32_t
		constexpr auto LastConfirmedFullscreenMode = 0x9c; // int32_t
		constexpr auto PreferredFullscreenMode = 0xa0; // int32_t
		constexpr auto Version = 0xa4; // uint32_t
		constexpr auto AudioQualityLevel = 0xa8; // int32_t
		constexpr auto LastConfirmedAudioQualityLevel = 0xac; // int32_t
		constexpr auto FrameRateLimit = 0xb0; // float
		constexpr auto DesiredScreenWidth = 0xb8; // int32_t
		constexpr auto bUseDesiredScreenHeight = 0xbc; // bool
		constexpr auto DesiredScreenHeight = 0xc0; // int32_t
		constexpr auto LastUserConfirmedDesiredScreenWidth = 0xc4; // int32_t
		constexpr auto LastUserConfirmedDesiredScreenHeight = 0xc8; // int32_t
		constexpr auto LastRecommendedScreenWidth = 0xcc; // float
		constexpr auto LastRecommendedScreenHeight = 0xd0; // float
		constexpr auto LastCPUBenchmarkResult = 0xd4; // float
		constexpr auto LastGPUBenchmarkResult = 0xd8; // float
		constexpr auto LastCPUBenchmarkSteps = 0xe0; // TArray<float>
		constexpr auto LastGPUBenchmarkSteps = 0xf0; // TArray<float>
		constexpr auto LastGPUBenchmarkMultiplier = 0x100; // float
		constexpr auto bUseHDRDisplayOutput = 0x104; // bool
		constexpr auto HDRDisplayOutputNits = 0x108; // int32_t
		constexpr auto OnGameUserSettingsUINeedsUpdate = 0x110; // FMulticastInlineDelegate
	}

	namespace n_UTimelineTemplate {
		constexpr auto TimelineLength = 0x28; // float
		constexpr auto LengthMode = 0x2c; // ETimelineLengthMode
		constexpr auto bAutoPlay = 0x2d; // char : 1
		constexpr auto bLoop = 0x2d; // char : 1
		constexpr auto bReplicated = 0x2d; // char : 1
		constexpr auto bIgnoreTimeDilation = 0x2d; // char : 1
		constexpr auto EventTracks = 0x30; // TArray<FTTEventTrack>
		constexpr auto FloatTracks = 0x40; // TArray<FTTFloatTrack>
		constexpr auto VectorTracks = 0x50; // TArray<FTTVectorTrack>
		constexpr auto LinearColorTracks = 0x60; // TArray<FTTLinearColorTrack>
		constexpr auto MetaDataArray = 0x70; // TArray<FBPVariableMetaDataEntry>
		constexpr auto TimelineGuid = 0x80; // FGuid
		constexpr auto VariableName = 0x90; // FName
		constexpr auto DirectionPropertyName = 0x98; // FName
		constexpr auto UpdateFunctionName = 0xa0; // FName
		constexpr auto FinishedFunctionName = 0xa8; // FName
	}

	namespace n_UParticleModuleColor_Seeded {
		constexpr auto RandomSeedInfo = 0xb0; // FParticleRandomSeedInfo
	}

	namespace n_UChaosPhysicalMaterial {
		constexpr auto Friction = 0x28; // float
		constexpr auto StaticFriction = 0x2c; // float
		constexpr auto Restitution = 0x30; // float
		constexpr auto LinearEtherDrag = 0x34; // float
		constexpr auto AngularEtherDrag = 0x38; // float
		constexpr auto SleepingLinearVelocityThreshold = 0x3c; // float
		constexpr auto SleepingAngularVelocityThreshold = 0x40; // float
	}

	namespace n_ACinematicShermanStub {
		constexpr auto TankMesh = 0x220; // USkeletalMeshComponent*
		constexpr auto AllTrackTiles = 0x228; // TArray<UStaticMeshComponent*>
		constexpr auto TrackTile_000 = 0x238; // UStaticMeshComponent*
		constexpr auto TrackTile_001 = 0x240; // UStaticMeshComponent*
		constexpr auto TrackTile_002 = 0x248; // UStaticMeshComponent*
		constexpr auto TrackTile_003 = 0x250; // UStaticMeshComponent*
		constexpr auto TrackTile_004 = 0x258; // UStaticMeshComponent*
		constexpr auto TrackTile_005 = 0x260; // UStaticMeshComponent*
		constexpr auto TrackTile_006 = 0x268; // UStaticMeshComponent*
		constexpr auto TrackTile_007 = 0x270; // UStaticMeshComponent*
		constexpr auto TrackTile_008 = 0x278; // UStaticMeshComponent*
		constexpr auto TrackTile_009 = 0x280; // UStaticMeshComponent*
		constexpr auto TrackTile_010 = 0x288; // UStaticMeshComponent*
		constexpr auto TrackTile_011 = 0x290; // UStaticMeshComponent*
		constexpr auto TrackTile_012 = 0x298; // UStaticMeshComponent*
		constexpr auto TrackTile_013 = 0x2a0; // UStaticMeshComponent*
		constexpr auto TrackTile_014 = 0x2a8; // UStaticMeshComponent*
		constexpr auto TrackTile_015 = 0x2b0; // UStaticMeshComponent*
		constexpr auto TrackTile_016 = 0x2b8; // UStaticMeshComponent*
		constexpr auto TrackTile_017 = 0x2c0; // UStaticMeshComponent*
		constexpr auto TrackTile_018 = 0x2c8; // UStaticMeshComponent*
		constexpr auto TrackTile_019 = 0x2d0; // UStaticMeshComponent*
		constexpr auto TrackTile_020 = 0x2d8; // UStaticMeshComponent*
		constexpr auto TrackTile_021 = 0x2e0; // UStaticMeshComponent*
		constexpr auto TrackTile_022 = 0x2e8; // UStaticMeshComponent*
		constexpr auto TrackTile_023 = 0x2f0; // UStaticMeshComponent*
		constexpr auto TrackTile_024 = 0x2f8; // UStaticMeshComponent*
		constexpr auto TrackTile_025 = 0x300; // UStaticMeshComponent*
		constexpr auto TrackTile_026 = 0x308; // UStaticMeshComponent*
		constexpr auto TrackTile_027 = 0x310; // UStaticMeshComponent*
		constexpr auto TrackTile_028 = 0x318; // UStaticMeshComponent*
		constexpr auto TrackTile_029 = 0x320; // UStaticMeshComponent*
		constexpr auto TrackTile_030 = 0x328; // UStaticMeshComponent*
		constexpr auto TrackTile_031 = 0x330; // UStaticMeshComponent*
		constexpr auto TrackTile_032 = 0x338; // UStaticMeshComponent*
		constexpr auto TrackTile_033 = 0x340; // UStaticMeshComponent*
		constexpr auto TrackTile_034 = 0x348; // UStaticMeshComponent*
		constexpr auto TrackTile_035 = 0x350; // UStaticMeshComponent*
		constexpr auto TrackTile_036 = 0x358; // UStaticMeshComponent*
		constexpr auto TrackTile_037 = 0x360; // UStaticMeshComponent*
		constexpr auto TrackTile_038 = 0x368; // UStaticMeshComponent*
		constexpr auto TrackTile_039 = 0x370; // UStaticMeshComponent*
		constexpr auto TrackTile_040 = 0x378; // UStaticMeshComponent*
		constexpr auto TrackTile_041 = 0x380; // UStaticMeshComponent*
		constexpr auto TrackTile_042 = 0x388; // UStaticMeshComponent*
		constexpr auto TrackTile_043 = 0x390; // UStaticMeshComponent*
		constexpr auto TrackTile_044 = 0x398; // UStaticMeshComponent*
		constexpr auto TrackTile_045 = 0x3a0; // UStaticMeshComponent*
		constexpr auto TrackTile_046 = 0x3a8; // UStaticMeshComponent*
		constexpr auto TrackTile_047 = 0x3b0; // UStaticMeshComponent*
		constexpr auto TrackTile_048 = 0x3b8; // UStaticMeshComponent*
		constexpr auto TrackTile_049 = 0x3c0; // UStaticMeshComponent*
		constexpr auto TrackTile_050 = 0x3c8; // UStaticMeshComponent*
		constexpr auto TrackTile_051 = 0x3d0; // UStaticMeshComponent*
		constexpr auto TrackTile_052 = 0x3d8; // UStaticMeshComponent*
		constexpr auto TrackTile_053 = 0x3e0; // UStaticMeshComponent*
		constexpr auto TrackTile_054 = 0x3e8; // UStaticMeshComponent*
		constexpr auto TrackTile_055 = 0x3f0; // UStaticMeshComponent*
		constexpr auto TrackTile_056 = 0x3f8; // UStaticMeshComponent*
		constexpr auto TrackTile_057 = 0x400; // UStaticMeshComponent*
		constexpr auto TrackTile_058 = 0x408; // UStaticMeshComponent*
		constexpr auto TrackTile_059 = 0x410; // UStaticMeshComponent*
		constexpr auto TrackTile_060 = 0x418; // UStaticMeshComponent*
		constexpr auto TrackTile_061 = 0x420; // UStaticMeshComponent*
		constexpr auto TrackTile_062 = 0x428; // UStaticMeshComponent*
		constexpr auto TrackTile_063 = 0x430; // UStaticMeshComponent*
		constexpr auto TrackTile_064 = 0x438; // UStaticMeshComponent*
		constexpr auto TrackTile_065 = 0x440; // UStaticMeshComponent*
		constexpr auto TrackTile_066 = 0x448; // UStaticMeshComponent*
		constexpr auto TrackTile_067 = 0x450; // UStaticMeshComponent*
		constexpr auto TrackTile_068 = 0x458; // UStaticMeshComponent*
		constexpr auto TrackTile_069 = 0x460; // UStaticMeshComponent*
		constexpr auto TrackTile_070 = 0x468; // UStaticMeshComponent*
		constexpr auto TrackTile_071 = 0x470; // UStaticMeshComponent*
		constexpr auto TrackTile_072 = 0x478; // UStaticMeshComponent*
		constexpr auto TrackTile_073 = 0x480; // UStaticMeshComponent*
		constexpr auto TrackTile_074 = 0x488; // UStaticMeshComponent*
		constexpr auto TrackTile_075 = 0x490; // UStaticMeshComponent*
		constexpr auto TrackTile_076 = 0x498; // UStaticMeshComponent*
		constexpr auto TrackTile_077 = 0x4a0; // UStaticMeshComponent*
		constexpr auto TrackTile_078 = 0x4a8; // UStaticMeshComponent*
		constexpr auto TrackTile_079 = 0x4b0; // UStaticMeshComponent*
		constexpr auto TrackTile_080 = 0x4b8; // UStaticMeshComponent*
		constexpr auto TrackTile_081 = 0x4c0; // UStaticMeshComponent*
		constexpr auto TrackTile_082 = 0x4c8; // UStaticMeshComponent*
		constexpr auto TrackTile_083 = 0x4d0; // UStaticMeshComponent*
		constexpr auto TrackTile_084 = 0x4d8; // UStaticMeshComponent*
		constexpr auto TrackTile_085 = 0x4e0; // UStaticMeshComponent*
		constexpr auto TrackTile_086 = 0x4e8; // UStaticMeshComponent*
		constexpr auto TrackTile_087 = 0x4f0; // UStaticMeshComponent*
		constexpr auto TrackTile_088 = 0x4f8; // UStaticMeshComponent*
		constexpr auto TrackTile_089 = 0x500; // UStaticMeshComponent*
		constexpr auto TrackTile_090 = 0x508; // UStaticMeshComponent*
		constexpr auto TrackTile_091 = 0x510; // UStaticMeshComponent*
		constexpr auto TrackTile_092 = 0x518; // UStaticMeshComponent*
		constexpr auto TrackTile_093 = 0x520; // UStaticMeshComponent*
		constexpr auto TrackTile_094 = 0x528; // UStaticMeshComponent*
		constexpr auto TrackTile_095 = 0x530; // UStaticMeshComponent*
		constexpr auto TrackTile_096 = 0x538; // UStaticMeshComponent*
		constexpr auto TrackTile_097 = 0x540; // UStaticMeshComponent*
		constexpr auto TrackTile_098 = 0x548; // UStaticMeshComponent*
		constexpr auto TrackTile_099 = 0x550; // UStaticMeshComponent*
		constexpr auto TrackTile_101 = 0x558; // UStaticMeshComponent*
		constexpr auto TrackTile_102 = 0x560; // UStaticMeshComponent*
		constexpr auto TrackTile_103 = 0x568; // UStaticMeshComponent*
		constexpr auto TrackTile_104 = 0x570; // UStaticMeshComponent*
		constexpr auto TrackTile_105 = 0x578; // UStaticMeshComponent*
		constexpr auto TrackTile_106 = 0x580; // UStaticMeshComponent*
		constexpr auto TrackTile_107 = 0x588; // UStaticMeshComponent*
		constexpr auto TrackTile_108 = 0x590; // UStaticMeshComponent*
		constexpr auto TrackTile_109 = 0x598; // UStaticMeshComponent*
		constexpr auto TrackTile_110 = 0x5a0; // UStaticMeshComponent*
		constexpr auto TrackTile_111 = 0x5a8; // UStaticMeshComponent*
		constexpr auto TrackTile_112 = 0x5b0; // UStaticMeshComponent*
		constexpr auto TrackTile_113 = 0x5b8; // UStaticMeshComponent*
		constexpr auto TrackTile_114 = 0x5c0; // UStaticMeshComponent*
		constexpr auto TrackTile_115 = 0x5c8; // UStaticMeshComponent*
		constexpr auto TrackTile_116 = 0x5d0; // UStaticMeshComponent*
		constexpr auto TrackTile_117 = 0x5d8; // UStaticMeshComponent*
		constexpr auto TrackTile_118 = 0x5e0; // UStaticMeshComponent*
		constexpr auto TrackTile_119 = 0x5e8; // UStaticMeshComponent*
		constexpr auto TrackTile_120 = 0x5f0; // UStaticMeshComponent*
		constexpr auto TrackTile_121 = 0x5f8; // UStaticMeshComponent*
		constexpr auto TrackTile_122 = 0x600; // UStaticMeshComponent*
		constexpr auto TrackTile_123 = 0x608; // UStaticMeshComponent*
		constexpr auto TrackTile_124 = 0x610; // UStaticMeshComponent*
		constexpr auto TrackTile_125 = 0x618; // UStaticMeshComponent*
		constexpr auto TrackTile_126 = 0x620; // UStaticMeshComponent*
		constexpr auto TrackTile_127 = 0x628; // UStaticMeshComponent*
		constexpr auto TrackTile_128 = 0x630; // UStaticMeshComponent*
		constexpr auto TrackTile_129 = 0x638; // UStaticMeshComponent*
		constexpr auto TrackTile_130 = 0x640; // UStaticMeshComponent*
		constexpr auto TrackTile_131 = 0x648; // UStaticMeshComponent*
		constexpr auto TrackTile_132 = 0x650; // UStaticMeshComponent*
		constexpr auto TrackTile_133 = 0x658; // UStaticMeshComponent*
		constexpr auto TrackTile_134 = 0x660; // UStaticMeshComponent*
		constexpr auto TrackTile_135 = 0x668; // UStaticMeshComponent*
		constexpr auto TrackTile_136 = 0x670; // UStaticMeshComponent*
		constexpr auto TrackTile_137 = 0x678; // UStaticMeshComponent*
		constexpr auto TrackTile_138 = 0x680; // UStaticMeshComponent*
		constexpr auto TrackTile_139 = 0x688; // UStaticMeshComponent*
		constexpr auto TrackTile_140 = 0x690; // UStaticMeshComponent*
		constexpr auto TrackTile_141 = 0x698; // UStaticMeshComponent*
		constexpr auto TrackTile_142 = 0x6a0; // UStaticMeshComponent*
		constexpr auto TrackTile_143 = 0x6a8; // UStaticMeshComponent*
		constexpr auto TrackTile_144 = 0x6b0; // UStaticMeshComponent*
		constexpr auto TrackTile_145 = 0x6b8; // UStaticMeshComponent*
		constexpr auto TrackTile_146 = 0x6c0; // UStaticMeshComponent*
		constexpr auto TrackTile_147 = 0x6c8; // UStaticMeshComponent*
		constexpr auto TrackTile_148 = 0x6d0; // UStaticMeshComponent*
		constexpr auto TrackTile_149 = 0x6d8; // UStaticMeshComponent*
		constexpr auto TrackTile_150 = 0x6e0; // UStaticMeshComponent*
		constexpr auto TrackTile_151 = 0x6e8; // UStaticMeshComponent*
		constexpr auto TrackTile_152 = 0x6f0; // UStaticMeshComponent*
		constexpr auto TrackTile_153 = 0x6f8; // UStaticMeshComponent*
		constexpr auto TrackTile_154 = 0x700; // UStaticMeshComponent*
		constexpr auto TrackTile_155 = 0x708; // UStaticMeshComponent*
		constexpr auto TrackTile_156 = 0x710; // UStaticMeshComponent*
		constexpr auto TrackTile_157 = 0x718; // UStaticMeshComponent*
		constexpr auto TrackTile_158 = 0x720; // UStaticMeshComponent*
	}

	namespace n_UHTP_Widget_Role_Loadout_Commander_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_2 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_3 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_6 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_7 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_8 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x270; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x278; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_5 = 0x280; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_12 = 0x288; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x290; // UImage*
		constexpr auto Image_10 = 0x298; // UImage*
		constexpr auto Image_17 = 0x2a0; // UImage*
	}

	namespace n_UInputAxisDelegateBinding {
		constexpr auto InputAxisDelegateBindings = 0x28; // TArray<FBlueprintInputAxisDelegateBinding>
	}

	namespace n_AVectorFieldVolume {
		constexpr auto VectorFieldComponent = 0x220; // UVectorFieldComponent*
	}

	namespace n_UPlayerInfo_C {
		constexpr auto PlayerName = 0x230; // UTextBlock*
		constexpr auto ReadyText = 0x238; // UTextBlock*
		constexpr auto XPText = 0x240; // UTextBlock*
	}

	namespace n_UShooterGameViewportClient {
		constexpr auto bIsGamepad = 0x3d0; // bool
	}

	namespace n_ASMtoHISM {
		constexpr auto Scene = 0x220; // USceneComponent*
	}

	namespace n_UMoviePlayerSettings {
		constexpr auto bWaitForMoviesToComplete = 0x28; // bool
		constexpr auto bMoviesAreSkippable = 0x29; // bool
		constexpr auto StartupMovies = 0x30; // TArray<FString>
	}

	namespace n_UAssetMappingTable {
		constexpr auto MappedAssets = 0x28; // TArray<FAssetMapping>
	}

	namespace n_UReplicationGraphNode_TearOff_ForConnection {
		constexpr auto TearOffActors = 0x50; // TArray<FTearOffActorInfo>
	}

	namespace n_UBTTask_Wait {
		constexpr auto WaitTime = 0x70; // float
		constexpr auto RandomDeviation = 0x74; // float
	}

	namespace n_UMapChangeMenu_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto FadeIn = 0x238; // UWidgetAnimation*
		constexpr auto FadeOut = 0x240; // UWidgetAnimation*
		constexpr auto BackFromMapSelect = 0x248; // UWGT_GameMenuItem_C*
		constexpr auto Image_70 = 0x250; // UImage*
		constexpr auto mapButtonContainer = 0x258; // UUniformGridPanel*
		constexpr auto StartVoteButton = 0x260; // UButton*
		constexpr auto voteStartOverlay = 0x268; // UOverlay*
		constexpr auto WidgetSwitcher_1 = 0x270; // UWidgetSwitcher*
		constexpr auto buttonDisplayIndex = 0x278; // int32_t
		constexpr auto mapSelectWidgets = 0x280; // TArray<UWGT_MapSelectButton_V2_C*>
		constexpr auto TargetMap = 0x290; // FString
		constexpr auto OnClosed = 0x2a0; // FMulticastInlineDelegate
		constexpr auto OnVoteStarted = 0x2b0; // FMulticastInlineDelegate
		constexpr auto RowNumber = 0x2c0; // int32_t
		constexpr auto ColNumber = 0x2c4; // int32_t
		constexpr auto MaxRows = 0x2c8; // int32_t
		constexpr auto DelayTimer = 0x2cc; // float
		constexpr auto PopulateList = 0x2d0; // FMulticastInlineDelegate
	}

	namespace n_UMovieScenePropertyTrack {
		constexpr auto SectionToKey = 0x58; // UMovieSceneSection*
		constexpr auto PropertyName = 0x60; // FName
		constexpr auto PropertyPath = 0x68; // FString
		constexpr auto Sections = 0x78; // TArray<UMovieSceneSection*>
	}

	namespace n_APlanarReflection {
		constexpr auto PlanarReflectionComponent = 0x230; // UPlanarReflectionComponent*
		constexpr auto bShowPreviewPlane = 0x238; // bool
	}

	namespace n_UAnimSharingTransitionInstance {
		constexpr auto FromComponent = 0x270; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto ToComponent = 0x278; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto BlendTime = 0x280; // float
		constexpr auto bBlendBool = 0x284; // bool
	}

	namespace n_UPlatoonList {
		constexpr auto TitleText = 0x248; // UTextBlock*
		constexpr auto PlatoonCount = 0x250; // UTextBlock*
		constexpr auto PlatoonListPanel = 0x258; // UPanelWidget*
		constexpr auto btn_CreateNew = 0x260; // UUserWidget*
		constexpr auto bReadOnly = 0x268; // char : 1
		constexpr auto bInfiniteUnitCount = 0x268; // char : 1
		constexpr auto Title = 0x270; // FText
		constexpr auto PlatoonType = 0x288; // EPlatoonType
		constexpr auto PlatoonListItemWidgetClass = 0x290; // UPlatoonListItem*
		constexpr auto LastKnownPlayerPlatoon = 0x298; // AHLLPlatoon*
		constexpr auto LastPlayerTeam = 0x2a0; // ETeam
	}

	namespace n_UHLLRadialMenu_ChatBase {
		constexpr auto SegmentClass = 0x318; // UHLLRadialMenu_ChatSegment*
		constexpr auto ChatName = 0x320; // UTextBlock*
		constexpr auto ChatDesc = 0x328; // UTextBlock*
		constexpr auto ChatVisibility = 0x330; // UTextBlock*
	}

	namespace n_UHalftrackWheelsComponent {
		constexpr auto DefaultAnimatedWheelRadius = 0xb0; // float
		constexpr auto AnimatedWheelSetups = 0xb8; // TArray<FAnimatedTrackedVehicleWheelSetup>
		constexpr auto bUpdateWheelLocations = 0xc8; // char : 1
		constexpr auto LeftReferenceRotationPhysicsWheel = 0xe0; // UVehicleWheel*
		constexpr auto RightReferenceRotationPhysicsWheel = 0xe8; // UVehicleWheel*
	}

	namespace n_UWGT_RoundSummaryStat_C {
		constexpr auto Image_1 = 0x290; // UImage*
	}

	namespace n_UReplicationGraphNode {
		constexpr auto AllChildNodes = 0x28; // TArray<UReplicationGraphNode*>
	}

	namespace n_UGameSessionSettings {
		constexpr auto MaxSpectators = 0x28; // int32_t
		constexpr auto MaxPlayers = 0x2c; // int32_t
		constexpr auto bRequiresPushToTalk = 0x30; // char : 1
	}

	namespace n_UHLLRadialMenu_MarkersBase {
		constexpr auto SegmentClass = 0x318; // UHLLRadialMenu_MarkersSegment*
		constexpr auto MarkerName = 0x320; // UTextBlock*
		constexpr auto MarkerDesc = 0x328; // UTextBlock*
		constexpr auto MarkerCount = 0x330; // UTextBlock*
		constexpr auto MarkerVisibility = 0x338; // UTextBlock*
	}

	namespace n_UAnimSingleNodeInstance {
		constexpr auto CurrentAsset = 0x270; // UAnimationAsset*
		constexpr auto PostEvaluateAnimEvent = 0x278; // FDelegate
	}

	namespace n_AHLLMapData_Supplies {
		constexpr auto SupplyType = 0x248; // ESupplyType
		constexpr auto SuppliesRemaining = 0x24a; // uint16_t
	}

	namespace n_USoundNodeSwitch {
		constexpr auto IntParameterName = 0x48; // FName
	}

	namespace n_UW_OnScreenTip_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto A_TipFadeOut = 0x238; // UWidgetAnimation*
		constexpr auto DismissVBox = 0x240; // UVerticalBox*
		constexpr auto HintRichText = 0x248; // URichTextBlock*
		constexpr auto OST_Completed = 0x250; // FMulticastInlineDelegate
		constexpr auto Hint_Current = 0x260; // FHint
		constexpr auto Hint_Removing = 0x2b8; // bool
		constexpr auto Hint_Next = 0x2c0; // FHint
		constexpr auto Hint_InQueue = 0x318; // bool
	}

	namespace n_UInterpCurveEdSetup {
		constexpr auto Tabs = 0x28; // TArray<FCurveEdTab>
		constexpr auto ActiveTab = 0x38; // int32_t
	}

	namespace n_APlayerController {
		constexpr auto Player = 0x298; // UPlayer*
		constexpr auto AcknowledgedPawn = 0x2a0; // APawn*
		constexpr auto ControllingDirTrackInst = 0x2a8; // UInterpTrackInstDirector*
		constexpr auto MyHUD = 0x2b0; // AHUD*
		constexpr auto PlayerCameraManager = 0x2b8; // APlayerCameraManager*
		constexpr auto PlayerCameraManagerClass = 0x2c0; // APlayerCameraManager*
		constexpr auto bAutoManageActiveCameraTarget = 0x2c8; // bool
		constexpr auto TargetViewRotation = 0x2cc; // FRotator
		constexpr auto SmoothTargetViewRotationSpeed = 0x2e4; // float
		constexpr auto HiddenActors = 0x2f0; // TArray<AActor*>
		constexpr auto HiddenPrimitiveComponents = 0x300; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
		constexpr auto LastSpectatorStateSynchTime = 0x314; // float
		constexpr auto LastSpectatorSyncLocation = 0x318; // FVector
		constexpr auto LastSpectatorSyncRotation = 0x324; // FRotator
		constexpr auto ClientCap = 0x330; // int32_t
		constexpr auto CheatManager = 0x338; // UCheatManager*
		constexpr auto CheatClass = 0x340; // UCheatManager*
		constexpr auto PlayerInput = 0x348; // UPlayerInput*
		constexpr auto ActiveForceFeedbackEffects = 0x350; // TArray<FActiveForceFeedbackEffect>
		constexpr auto bPlayerIsWaiting = 0x3d0; // char : 1
		constexpr auto NetPlayerIndex = 0x3d4; // char
		constexpr auto PendingSwapConnection = 0x410; // UNetConnection*
		constexpr auto NetConnection = 0x418; // UNetConnection*
		constexpr auto InputYawScale = 0x42c; // float
		constexpr auto InputPitchScale = 0x430; // float
		constexpr auto InputRollScale = 0x434; // float
		constexpr auto bShowMouseCursor = 0x438; // char : 1
		constexpr auto bEnableClickEvents = 0x438; // char : 1
		constexpr auto bEnableTouchEvents = 0x438; // char : 1
		constexpr auto bEnableMouseOverEvents = 0x438; // char : 1
		constexpr auto bEnableTouchOverEvents = 0x438; // char : 1
		constexpr auto bForceFeedbackEnabled = 0x438; // char : 1
		constexpr auto ForceFeedbackScale = 0x43c; // float
		constexpr auto ClickEventKeys = 0x440; // TArray<FKey>
		constexpr auto DefaultMouseCursor = 0x450; // EMouseCursor
		constexpr auto CurrentMouseCursor = 0x451; // EMouseCursor
		constexpr auto DefaultClickTraceChannel = 0x452; // ECollisionChannel
		constexpr auto CurrentClickTraceChannel = 0x453; // ECollisionChannel
		constexpr auto HitResultTraceDistance = 0x454; // float
		constexpr auto SeamlessTravelCount = 0x458; // uint16_t
		constexpr auto LastCompletedSeamlessTravelCount = 0x45a; // uint16_t
		constexpr auto InactiveStateInputComponent = 0x4d0; // UInputComponent*
		constexpr auto bShouldPerformFullTickWhenPaused = 0x4d8; // char : 1
		constexpr auto CurrentTouchInterface = 0x4f0; // UTouchInterface*
		constexpr auto SpectatorPawn = 0x548; // ASpectatorPawn*
		constexpr auto bIsLocalPlayerController = 0x554; // bool
		constexpr auto SpawnLocation = 0x558; // FVector
	}

	namespace n_ARectLight {
		constexpr auto RectLightComponent = 0x230; // URectLightComponent*
	}

	namespace n_UMaterialExpressionCustom {
		constexpr auto Code = 0x40; // FString
		constexpr auto OutputType = 0x50; // ECustomMaterialOutputType
		constexpr auto Description = 0x58; // FString
		constexpr auto Inputs = 0x68; // TArray<FCustomInput>
		constexpr auto AdditionalDefines = 0x78; // TArray<FCustomDefine>
		constexpr auto IncludeFilePaths = 0x88; // TArray<FString>
	}

	namespace n_UWidgetSwitcherSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UPaperRuntimeSettings {
		constexpr auto bEnableSpriteAtlasGroups = 0x28; // bool
		constexpr auto bEnableTerrainSplineEditing = 0x29; // bool
		constexpr auto bResizeSpriteDataToMatchTextures = 0x2a; // bool
	}

	namespace n_UMaterialExpressionArctangentFast {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_USubUVAnimation {
		constexpr auto SubUVTexture = 0x28; // UTexture2D*
		constexpr auto SubImages_Horizontal = 0x30; // int32_t
		constexpr auto SubImages_Vertical = 0x34; // int32_t
		constexpr auto BoundingMode = 0x38; // ESubUVBoundingVertexCount
		constexpr auto OpacitySourceMode = 0x39; // EOpacitySourceMode
		constexpr auto AlphaThreshold = 0x3c; // float
	}

	namespace n_AHLL_PlayerState_C {
		constexpr auto UberGraphFrame = 0x7d8; // FPointerToUberGraphFrame
		constexpr auto DefaultSceneRoot = 0x7e0; // USceneComponent*
	}

	namespace n_UInterpTrackAnimControl {
		constexpr auto SlotName = 0x90; // FName
		constexpr auto AnimSeqs = 0x98; // TArray<FAnimControlTrackKey>
		constexpr auto bSkipAnimNotifiers = 0xa8; // char : 1
	}

	namespace n_APaperSpriteActor {
		constexpr auto RenderComponent = 0x220; // UPaperSpriteComponent*
	}

	namespace n_AHLLWaterVolume {
		constexpr auto WaterVolume = 0x270; // UBoxComponent*
		constexpr auto WaterPostProcess = 0x278; // UPostProcessComponent*
		constexpr auto SurfacePlane = 0x280; // UStaticMeshComponent*
		constexpr auto UndersidePlane = 0x288; // UStaticMeshComponent*
		constexpr auto UnderwaterSoundComponent = 0x290; // UAudioComponent*
		constexpr auto SurfacePhysMaterial = 0x298; // UPhysicalMaterial*
		constexpr auto UndersidePhysMaterial = 0x2a0; // UPhysicalMaterial*
		constexpr auto SurfaceMaterial = 0x2a8; // UMaterialInterface*
		constexpr auto UndersideMaterial = 0x2b0; // UMaterialInterface*
		constexpr auto PPMaterial = 0x2b8; // UMaterialInterface*
		constexpr auto PostProcessDMI = 0x2c0; // UMaterialInstanceDynamic*
		constexpr auto BlockWeaponDeploymentDepth = 0x2c8; // float
		constexpr auto BuildDepthOffset = 0x2cc; // float
		constexpr auto SpeedModifierCurve = 0x2d0; // UCurveFloat*
		constexpr auto WaterType = 0x2d8; // EWaterType
		constexpr auto bShowUndersidePlane = 0x2d9; // char : 1
		constexpr auto bEnableVehicleWading = 0x2d9; // char : 1
		constexpr auto bEnablePlayerWading = 0x2d9; // char : 1
		constexpr auto bEnableSplashes = 0x2d9; // char : 1
		constexpr auto bDoCrouchCheck = 0x2d9; // char : 1
		constexpr auto bDoProneCheck = 0x2d9; // char : 1
		constexpr auto bShouldDrown = 0x2d9; // char : 1
		constexpr auto PlayerWadeDepth = 0x2dc; // float
		constexpr auto UnderwaterSound = 0x2e0; // USoundBase*
		constexpr auto ActiveWaterEffects = 0x2e8; // TArray<FHLLWaterVolumeOverlap>
	}

	namespace n_USkeletalMesh {
		constexpr auto Skeleton = 0x60; // USkeleton*
		constexpr auto ImportedBounds = 0x68; // FBoxSphereBounds
		constexpr auto ExtendedBounds = 0x84; // FBoxSphereBounds
		constexpr auto PositiveBoundsExtension = 0xa0; // FVector
		constexpr auto NegativeBoundsExtension = 0xac; // FVector
		constexpr auto Materials = 0xb8; // TArray<FSkeletalMaterial>
		constexpr auto SkelMirrorTable = 0xc8; // TArray<FBoneMirrorInfo>
		constexpr auto LODInfo = 0xd8; // TArray<FSkeletalMeshLODInfo>
		constexpr auto MinLOD = 0x138; // FPerPlatformInt
		constexpr auto DisableBelowMinLodStripping = 0x13c; // FPerPlatformBool
		constexpr auto SkelMirrorAxis = 0x13d; // EAxis
		constexpr auto SkelMirrorFlipAxis = 0x13e; // EAxis
		constexpr auto bUseFullPrecisionUVs = 0x13f; // char : 1
		constexpr auto bUseHighPrecisionTangentBasis = 0x13f; // char : 1
		constexpr auto bHasBeenSimplified = 0x13f; // char : 1
		constexpr auto bHasVertexColors = 0x13f; // char : 1
		constexpr auto bEnablePerPolyCollision = 0x13f; // char : 1
		constexpr auto BodySetup = 0x140; // UBodySetup*
		constexpr auto PhysicsAsset = 0x148; // UPhysicsAsset*
		constexpr auto ShadowPhysicsAsset = 0x150; // UPhysicsAsset*
		constexpr auto NodeMappingData = 0x158; // TArray<UNodeMappingContainer*>
		constexpr auto MorphTargets = 0x168; // TArray<UMorphTarget*>
		constexpr auto PostProcessAnimBlueprint = 0x2f0; // UAnimInstance*
		constexpr auto MeshClothingAssets = 0x2f8; // TArray<UClothingAssetBase*>
		constexpr auto SamplingInfo = 0x308; // FSkeletalMeshSamplingInfo
		constexpr auto AssetUserData = 0x338; // TArray<UAssetUserData*>
		constexpr auto Sockets = 0x350; // TArray<USkeletalMeshSocket*>
		constexpr auto SkinWeightProfiles = 0x370; // TArray<FSkinWeightProfileInfo>
	}

	namespace n_UMovieSceneLevelVisibilityTrack {
		constexpr auto Sections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_UHLLOverviewMapWrapper {
		constexpr auto bAllowMarkerPlacement = 0x230; // char : 1
		constexpr auto CurrentMarkerMenu = 0x238; // UHLLMarkers_MapMenu*
		constexpr auto MarkerContextMenu = 0x240; // UHLLMarkers_MapMenu*
		constexpr auto OpenCloseAnimation = 0x250; // UWidgetAnimation*
		constexpr auto RootBorder = 0x258; // UBorder*
		constexpr auto MapName = 0x260; // UTextBlock*
		constexpr auto PlayerCounts = 0x268; // UTextBlock*
		constexpr auto CommanderPanel = 0x270; // UHLLCommanderUI*
		constexpr auto Map = 0x278; // UHLLOverviewMap*
		constexpr auto MapPlacementOverlay = 0x280; // UBorder*
		constexpr auto MapPlacementText = 0x288; // URichTextBlock*
		constexpr auto ResourceStatus = 0x290; // UHLLResourceStatus*
		constexpr auto MapKeyScaleBox = 0x298; // UScaleBox*
		constexpr auto FakeCursorClass = 0x2a0; // UHLLFakeCursor*
		constexpr auto MarkerInfo = 0x2c8; // UScaleBox*
		constexpr auto MapNaviationComponent = 0x2d0; // UInputComponent*
		constexpr auto MapInputComponent = 0x2d8; // UInputComponent*
		constexpr auto SelectCommanderAbilityComponent = 0x2e0; // UInputComponent*
		constexpr auto PlacementCommanderAbilityComponent = 0x2e8; // UInputComponent*
		constexpr auto SelectionCommanderAbilityComponent = 0x2f0; // UInputComponent*
		constexpr auto MarkerMenuInputComponent = 0x2f8; // UInputComponent*
		constexpr auto AxisInputComponent = 0x300; // UInputComponent*
		constexpr auto CurrentInputComponents = 0x308; // TArray<UInputComponent*>
		constexpr auto HoveredItem = 0x330; // UHLLCommanderUIItem*
		constexpr auto FakeCursor = 0x340; // UHLLFakeCursor*
	}

	namespace n_UBackgroundBlur {
		constexpr auto Padding = 0x120; // FMargin
		constexpr auto HorizontalAlignment = 0x130; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x131; // EVerticalAlignment
		constexpr auto bApplyAlphaToBlur = 0x132; // bool
		constexpr auto BlurStrength = 0x134; // float
		constexpr auto bOverrideAutoRadiusCalculation = 0x138; // bool
		constexpr auto BlurRadius = 0x13c; // int32_t
		constexpr auto LowQualityFallbackBrush = 0x140; // FSlateBrush
	}

	namespace n_UPendingNetGame {
		constexpr auto NetDriver = 0x30; // UNetDriver*
		constexpr auto DemoNetDriver = 0x38; // UDemoNetDriver*
	}

	namespace n_UHLODProxy {
		constexpr auto ProxyMeshes = 0x28; // TArray<FHLODProxyMesh>
	}

	namespace n_USoundSubmix {
		constexpr auto bMuteWhenBackgrounded = 0x40; // char : 1
		constexpr auto SubmixEffectChain = 0x48; // TArray<USoundEffectSubmixPreset*>
		constexpr auto AmbisonicsPluginSettings = 0x58; // USoundfieldEncodingSettingsBase*
		constexpr auto EnvelopeFollowerAttackTime = 0x60; // int32_t
		constexpr auto EnvelopeFollowerReleaseTime = 0x64; // int32_t
		constexpr auto OutputVolume = 0x68; // float
		constexpr auto OnSubmixRecordedFileDone = 0x70; // FMulticastInlineDelegate
	}

	namespace n_USoundNodeVolumeType {
		constexpr auto bUseListenerVolume = 0x48; // char : 1
		constexpr auto bFallbackToDefault = 0x48; // char : 1
		constexpr auto bContinuousUpdate = 0x48; // char : 1
		constexpr auto bRestartOnSwap = 0x48; // char : 1
	}

	namespace n_UBTTask_GameplayTaskBase {
		constexpr auto bWaitForGameplayTask = 0x70; // char : 1
	}

	namespace n_UParticleModuleRotationRate_Seeded {
		constexpr auto RandomSeedInfo = 0x60; // FParticleRandomSeedInfo
	}

	namespace n_UBPW_HoverTintedImageButton_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Button_1 = 0x238; // UButton*
		constexpr auto IconImage = 0x240; // UImage*
		constexpr auto ImageSizeBox = 0x248; // USizeBox*
		constexpr auto HoveredContentTint = 0x250; // FLinearColor
		constexpr auto NormalContentTint = 0x260; // FLinearColor
		constexpr auto OnClicked = 0x270; // FMulticastInlineDelegate
		constexpr auto PressedContentTint = 0x280; // FLinearColor
		constexpr auto IconBrush = 0x290; // FSlateBrush
		constexpr auto ContentPadding = 0x318; // FMargin
		constexpr auto ImageSize = 0x328; // FVector2D
		constexpr auto bFocus = 0x330; // bool
		constexpr auto OnHovered = 0x338; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x348; // FMulticastInlineDelegate
		constexpr auto OnPressed = 0x358; // FMulticastInlineDelegate
		constexpr auto bPressed = 0x368; // bool
		constexpr auto InitialButtonStyle = 0x370; // FButtonStyle
		constexpr auto FocusedButtonStyle = 0x5e8; // FButtonStyle
		constexpr auto FocusedContentTint = 0x860; // FLinearColor
	}

	namespace n_UMovieScene3DConstraintTrack {
		constexpr auto ConstraintSections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_UARTrackedImage {
		constexpr auto DetectedImage = 0xe8; // UARCandidateImage*
		constexpr auto EstimatedSize = 0xf0; // FVector2D
	}

	namespace n_UHLLMapStateComponent {
		constexpr auto MapDataObjects = 0xb0; // TArray<AHLLMapDataBase*>
		constexpr auto PlayerMarkers = 0xc0; // TArray<FPlayerMarkers>
		constexpr auto TeamReconData = 0xd0; // TArray<FTeamRecon>
		constexpr auto OnMapDataRegistered_Delegate = 0xe0; // FMulticastInlineDelegate
		constexpr auto OnMapDataUnRegistered_Delegate = 0xf0; // FMulticastInlineDelegate
		constexpr auto DataClass_Sector = 0x100; // AHLLMapData_Sector*
		constexpr auto DataClass_MapMarker = 0x108; // AHLLMapData_Marker*
		constexpr auto DataClass_ReconItem = 0x110; // AHLLMapData_ReconItem*
	}

	namespace n_UW_HotkeyBoundKey_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto AutoTextBinding = 0x238; // UHLLKeyText*
		constexpr auto img_icon = 0x240; // UImage*
		constexpr auto img_key = 0x248; // UImage*
		constexpr auto KeyBind = 0x250; // FName
		constexpr auto IconBrush = 0x258; // FSlateBrush
		constexpr auto isKey = 0x2e0; // bool
	}

	namespace n_UWGT_MapIcon_Airhead_C {
		constexpr auto UberGraphFrame = 0x4a8; // FPointerToUberGraphFrame
		constexpr auto Icon = 0x4b0; // UBorder*
		constexpr auto Scaler = 0x4b8; // UScaleBox*
		constexpr auto Widget_TooltipRef = 0x4c0; // UW_HoverToolTip_Explained_C*
	}

	namespace n_UChannel {
		constexpr auto Connection = 0x28; // UNetConnection*
	}

	namespace n_UHTP_Widget_Role_Loadout_Support_C {
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_6 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_13 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x260; // UImage*
		constexpr auto Image_10 = 0x268; // UImage*
		constexpr auto Image_17 = 0x270; // UImage*
	}

	namespace n_AShooterCharacter {
		constexpr auto Mesh1PTransform = 0x4e0; // USceneComponent*
		constexpr auto Mesh1P = 0x4e8; // USkeletalMeshComponent*
		constexpr auto HeadMesh = 0x4f0; // USkelMeshWithLinkedBoundsComponent*
		constexpr auto Helmet = 0x4f8; // UStaticMeshComponent*
		constexpr auto HelmetAttachSocketName = 0x500; // FName
		constexpr auto ADS_DOF_PostProcess = 0x508; // UPostProcessComponent*
		constexpr auto m_clientBotPlayerInputComponent = 0x510; // UClientBotPlayerInputComponent*
		constexpr auto DebugInventory = 0x518; // TArray<TSoftClassPtr<UObject>>
		constexpr auto LocalDebugInventory = 0x528; // TArray<FString>
		constexpr auto CurrentWeapon = 0x538; // AShooterWeapon*
		constexpr auto bWantsToRun = 0x54c; // char : 1
		constexpr auto RunLoopSound = 0x568; // USoundCue*
		constexpr auto RunStopSound = 0x570; // USoundCue*
		constexpr auto MinTimeBeforeRunStopSound = 0x578; // float
		constexpr auto ProneEyeHeight = 0x57c; // float
		constexpr auto EyeHeightTransitionSpeed = 0x580; // float
		constexpr auto WalkingHeadBob = 0x584; // FHeadBobSettings
		constexpr auto SprintingHeadBob = 0x598; // FHeadBobSettings
		constexpr auto ProneHeadBob = 0x5ac; // FHeadBobSettings
		constexpr auto SprintingStrafeMultipliler = 0x5c0; // float
		constexpr auto Inventory = 0x670; // TArray<AShooterWeapon*>
		constexpr auto LastEquippedSlot = 0x680; // EHLLInventorySlot
		constexpr auto LastEquippedWeaponSlot = 0x681; // EHLLInventorySlot
		constexpr auto MapComponent = 0x688; // UHLLMapComponent*
		constexpr auto bIsViewingMap = 0x690; // char : 1
		constexpr auto MapModeBlockedInput = 0x698; // UInputComponent*
		constexpr auto SuppressionRecoveryRate = 0x6b0; // float
		constexpr auto SuppressionLockTimer = 0x6b4; // float
		constexpr auto MaxSuppression = 0x6b8; // float
		constexpr auto SuppressionBlendable = 0x6c0; // UMaterialInterface*
		constexpr auto SuppressionLocalSound = 0x6c8; // USoundBase*
		constexpr auto Suppression_SoundCurve = 0x6d0; // UCurveFloat*
		constexpr auto Suppression_ShakeCurve_Explosion = 0x6d8; // UCurveFloat*
		constexpr auto Suppression_ShakeCurve_Firearm = 0x6e0; // UCurveFloat*
		constexpr auto Suppression_CamShake_Explosion = 0x6e8; // UCameraShake*
		constexpr auto Suppression_CamShake_Firearms = 0x6f0; // UCameraShake*
		constexpr auto ReplicatedSuppressionInfo = 0x6f8; // FFrameSuppressionInfo
		constexpr auto m_PostProcessDMI = 0x710; // UMaterialInstanceDynamic*
		constexpr auto PlayerPostProcess = 0x718; // UPostProcessComponent*
		constexpr auto Suppress_Heartbeat = 0x720; // UAudioComponent*
		constexpr auto UseContext = 0x728; // FHLLUseContext
		constexpr auto bUseContextLocked = 0x734; // char : 1
		constexpr auto bUseContextActive = 0x734; // char : 1
		constexpr auto OnWeaponChangedDelegate = 0x748; // FMulticastInlineDelegate
		constexpr auto OnStateChangedDelegate = 0x758; // FMulticastInlineDelegate
		constexpr auto CriticalTime = 0x768; // float
		constexpr auto HoldToLetGoTime = 0x76c; // float
		constexpr auto MaxCriticalChances = 0x770; // int32_t
		constexpr auto HealthFXInterp_Speed = 0x778; // float
		constexpr auto HealthPulseSpeedLow = 0x780; // float
		constexpr auto HealthPulseSpeedHigh = 0x784; // float
		constexpr auto SplatterLockTime = 0x788; // float
		constexpr auto SplatterFadeSpeed = 0x78c; // float
		constexpr auto Health = 0x79c; // float
		constexpr auto WoundedBleedTime = 0x7a0; // float
		constexpr auto WoundedBleedAmount = 0x7a4; // float
		constexpr auto HealthState = 0x7a8; // EHLLHealthState
		constexpr auto LastHealthDeltaInfo = 0x7b0; // FHLLHealthDeltaInfo
		constexpr auto ReplicatedHealInfo = 0x9e4; // FRepHealData
		constexpr auto HealingCollisionShape = 0x9f0; // UShapeComponent*
		constexpr auto HealingCollisionAttachmentSocket = 0x9f8; // FName
		constexpr auto VoiceAudioComponent = 0xa00; // UAudioComponent*
		constexpr auto BreathAudioComponent = 0xa08; // UAudioComponent*
		constexpr auto VoiceData = 0xa10; // UHLLVoiceData*
		constexpr auto MinTimeBetweenBreaths = 0xa18; // float
		constexpr auto MinTimeBetweenVocalisations = 0xa1c; // float
		constexpr auto DamageSounds = 0xa20; // TMap<EHLLDamageType, TSoftObjectPtr<USoundBase>>
		constexpr auto MinTimeBetweenImpactSounds = 0xa70; // float
		constexpr auto WoundedLoopMinVolume = 0xa84; // float
		constexpr auto LandSounds = 0xa88; // FSurfaceSounds
		constexpr auto HealthLoopAC = 0xbe0; // UAudioComponent*
		constexpr auto WeaponSway_ProneModifier = 0xbe8; // float
		constexpr auto WeaponSway_CrouchedModifier = 0xbec; // float
		constexpr auto WeaponSway_StandingModifier = 0xbf0; // float
		constexpr auto WeaponSway_FallingModifier = 0xbf4; // float
		constexpr auto MinTimeBetweenJumps = 0xc34; // float
		constexpr auto KillTimerInfo = 0xc48; // FKillTimerInfo
		constexpr auto SectorKillTime = 0xc50; // char
		constexpr auto SectorVehicleKillTime = 0xc51; // char
		constexpr auto DrownKillTime = 0xc52; // char
		constexpr auto KillTimer_FXInterpSpeed = 0xc54; // float
		constexpr auto TotemPollingRepulsionPower = 0xc5c; // float
		constexpr auto FallDamageCurve = 0xc68; // UCurveFloat*
		constexpr auto FallCameraShake = 0xc70; // UCameraShake*
		constexpr auto ProneCameraShake = 0xc78; // UCameraShake*
		constexpr auto ProneLandedCameraShake = 0xc80; // UCameraShake*
		constexpr auto CrouchCameraShake = 0xc88; // UCameraShake*
		constexpr auto StandCameraShake = 0xc90; // UCameraShake*
		constexpr auto JumpCameraShake = 0xc98; // UCameraShake*
		constexpr auto ThrowCameraShake = 0xca0; // UCameraShake*
		constexpr auto StartSprintingCameraShake = 0xca8; // UCameraShake*
		constexpr auto StopSprintingCameraShake = 0xcb0; // UCameraShake*
		constexpr auto MinStanceTransitionTime = 0xcc0; // float
		constexpr auto LastStanceTransitionTime = 0xcc4; // float
		constexpr auto CurrentSeat = 0xcc8; // AHLLSeat*
		constexpr auto RepSeatTransition = 0xcd0; // FRepSeatPendingTransition
		constexpr auto OnCharacterSeatChange = 0xcd8; // FMulticastInlineDelegate
		constexpr auto Close_DOF_PostProcess = 0xd00; // UPostProcessComponent*
		constexpr auto AC_TurnInPlace = 0xd10; // UAudioComponent*
		constexpr auto TurnInPlaceSound = 0xd18; // USoundBase*
		constexpr auto TurnInPlaceStopSound = 0xd20; // USoundBase*
		constexpr auto GoreComponent = 0xd28; // UHLLGoreComponent*
		constexpr auto DeployCameraOffset = 0xd30; // FVector
		constexpr auto DeployCameraRotationLimits = 0xd40; // FVector4
		constexpr auto DeployedCamBlendAlpha = 0xd50; // float
		constexpr auto DeployCameraBlendSpeed = 0xd54; // float
		constexpr auto SpeedScaleFactor_Default = 0xd58; // float
		constexpr auto SpeedScaleFactor_Crouched = 0xd5c; // float
		constexpr auto SpeedScaleFactor_Prone = 0xd60; // float
		constexpr auto FootstepData = 0xd68; // UHLLFootstepData*
		constexpr auto HeadTiltAngle = 0xd90; // float
		constexpr auto TiltBlendSpeed = 0xd94; // float
		constexpr auto RigPivotSettings = 0xdb0; // FRigPivotSettings
		constexpr auto ObstacleDistance = 0xe18; // float
		constexpr auto ObstacleHeight = 0xe1c; // float
		constexpr auto VaultingMoveType = 0xe20; // EVaultingMoveType
		constexpr auto Vaulting = 0xe28; // UVaultingComponent*
		constexpr auto UseContextAC = 0xe50; // TWeakObjectPtr<UAudioComponent>
		constexpr auto bUseContextACStarted = 0xe58; // char : 1
		constexpr auto m_grenadeInput = 0xe60; // UInputComponent*
		constexpr auto bWantsToADS = 0xe6a; // char : 1
		constexpr auto bIsTargeting = 0xe6a; // char : 1
		constexpr auto m_BackupTeam = 0xe6b; // ETeam
		constexpr auto PlayerIndicator = 0xe78; // UHLLIndicatorComponent*
		constexpr auto MedicIndicator = 0xe80; // UHLLIndicatorComponent*
		constexpr auto CriticalIndicator = 0xe88; // UHLLIndicatorComponent*
		constexpr auto RelativeHeadLocation = 0xe9c; // FVector_NetQuantize
		constexpr auto RelativeMeshLocation = 0xea8; // FVector_NetQuantize
		constexpr auto CameraVerticalMovementSpeed = 0xecc; // float
		constexpr auto LastDamageCauser = 0xee8; // AActor*
		constexpr auto RagdollBlendAnimPercent = 0xef0; // float
		constexpr auto StandingDeathAnimations = 0xef8; // UAnimMontage*
		constexpr auto CrouchedDeathAnimations = 0xf00; // UAnimMontage*
		constexpr auto ProneDeathAnimations = 0xf08; // UAnimMontage*
		constexpr auto BackerHelmetMesh = 0xf18; // UStaticMesh*
		constexpr auto PreOrderHelmetMesh = 0xf20; // UStaticMesh*
		constexpr auto EnterWaterSound = 0xf28; // USoundBase*
		constexpr auto ExitWaterSound = 0xf30; // USoundBase*
		constexpr auto MinSplashZVeloc = 0xf38; // float
		constexpr auto MinTimeBetweenSplashFX = 0xf3c; // float
		constexpr auto Leaning = 0xf50; // ULeaningComponent*
		constexpr auto bShowTPPMeshInFPP = 0xf58; // char : 1
		constexpr auto PronePoseMesh = 0xf68; // USkeletalMesh*
		constexpr auto CrouchPoseMesh = 0xf70; // USkeletalMesh*
		constexpr auto StandingPoseMesh = 0xf78; // USkeletalMesh*
		constexpr auto MaxAutoRunDoubleTapInterval = 0xfd8; // float
		constexpr auto CharacterStance = 0xfe4; // ECharacterStance
		constexpr auto FPPCameraBone = 0xfe8; // FName
		constexpr auto bIsSpectatorMode = 0xff0; // char : 1
		constexpr auto HandMaterials = 0xff8; // TArray<UMaterialInstanceDynamic*>
		constexpr auto CrawlVibrationController = 0x1010; // UVibrationEventController*
		constexpr auto JumpVibrationController = 0x1018; // UVibrationEventController*
		constexpr auto DamageVibrationController = 0x1020; // UVibrationEventController*
		constexpr auto CriticalVibrationController = 0x1028; // UVibrationEventController*
		constexpr auto WoundedVibrationController = 0x1030; // UVibrationEventController*
	}

	namespace n_ANavigationObjectBase {
		constexpr auto CapsuleComponent = 0x228; // UCapsuleComponent*
		constexpr auto GoodSprite = 0x230; // UBillboardComponent*
		constexpr auto BadSprite = 0x238; // UBillboardComponent*
		constexpr auto bIsPIEPlayerStart = 0x240; // char : 1
	}

	namespace n_UHLLTeamContainer {
		constexpr auto PlatoonWidgetClass = 0x238; // UHLLRoundSummaryPlatoon*
		constexpr auto PlayerWidgetClass = 0x240; // UHLLRoundSummaryPlayer*
		constexpr auto PlayerWidgets = 0x248; // TArray<FScoreboardPlayerWidget>
		constexpr auto FirstPlayer = 0x2a8; // UHLLRoundSummaryPlayer*
		constexpr auto CommanderPlayer = 0x2b0; // UHLLRoundSummaryPlayer*
		constexpr auto EmptyPlatoon = 0x2b8; // UHLLRoundSummaryPlatoon*
		constexpr auto AssignedTeam = 0x2c0; // ETeam
		constexpr auto TeamScroller = 0x2c8; // UScrollBox*
		constexpr auto PlatoonVBox = 0x2d0; // UVerticalBox*
		constexpr auto ResourceStatus = 0x2d8; // UHLLResourceStatus*
	}

	namespace n_UAISenseConfig {
		constexpr auto DebugColor = 0x28; // FColor
		constexpr auto MaxAge = 0x2c; // float
		constexpr auto bStartsEnabled = 0x30; // char : 1
	}

	namespace n_ATextRenderActor {
		constexpr auto TextRender = 0x220; // UTextRenderComponent*
	}

	namespace n_USoundNodeBranch {
		constexpr auto BoolParameterName = 0x48; // FName
	}

	namespace n_USoundNodeRandom {
		constexpr auto Weights = 0x48; // TArray<float>
		constexpr auto HasBeenUsed = 0x58; // TArray<bool>
		constexpr auto NumRandomUsed = 0x68; // int32_t
		constexpr auto PreselectAtLevelLoad = 0x6c; // int32_t
		constexpr auto bShouldExcludeFromBranchCulling = 0x70; // char : 1
		constexpr auto bSoundCueExcludedFromBranchCulling = 0x70; // char : 1
		constexpr auto bRandomizeWithoutReplacement = 0x70; // char : 1
	}

	namespace n_ASkeletalMeshActor {
		constexpr auto bShouldDoAnimNotifies = 0x228; // char : 1
		constexpr auto bWakeOnLevelStart = 0x228; // char : 1
		constexpr auto SkeletalMeshComponent = 0x230; // USkeletalMeshComponent*
		constexpr auto ReplicatedMesh = 0x238; // USkeletalMesh*
		constexpr auto ReplicatedPhysAsset = 0x240; // UPhysicsAsset*
		constexpr auto ReplicatedMaterial0 = 0x248; // UMaterialInterface*
		constexpr auto ReplicatedMaterial1 = 0x250; // UMaterialInterface*
	}

	namespace n_UMaterialExpressionConstant2Vector {
		constexpr auto R = 0x40; // float
		constexpr auto G = 0x44; // float
	}

	namespace n_UHLLUseContext_Supplies {
		constexpr auto CanUseIcon = 0x238; // FSlateBrush
		constexpr auto CantUseIcon = 0x2c0; // FSlateBrush
		constexpr auto RadialProg = 0x348; // UImage*
		constexpr auto IconImage = 0x350; // UImage*
		constexpr auto DisplayText = 0x358; // URichTextBlock*
	}

	namespace n_UThrobber {
		constexpr auto NumberOfPieces = 0x108; // int32_t
		constexpr auto bAnimateHorizontally = 0x10c; // bool
		constexpr auto bAnimateVertically = 0x10d; // bool
		constexpr auto bAnimateOpacity = 0x10e; // bool
		constexpr auto PieceImage = 0x110; // USlateBrushAsset*
		constexpr auto Image = 0x118; // FSlateBrush
	}

	namespace n_UHLLUI_LoadoutSelector {
		constexpr auto ParentPanel = 0x238; // TWeakObjectPtr<UHLLUI_CharacterSelection>
		constexpr auto MaxLoadoutColumns = 0x240; // int32_t
		constexpr auto LargeItemWidget = 0x248; // UHLLUI_LoadoutEntry*
		constexpr auto SmallItemWidget = 0x250; // UHLLUI_LoadoutEntry*
		constexpr auto ActiveItems = 0x258; // TArray<UHLLUI_LoadoutEntry*>
		constexpr auto ActiveLoadouts = 0x268; // TArray<UHLLUI_Loadout*>
		constexpr auto TooltipItem = 0x278; // UHLLUI_LoadoutTooltip*
		constexpr auto LoadoutPanel = 0x280; // UUniformGridPanel*
		constexpr auto EntryPanel = 0x288; // UWrapBox*
		constexpr auto UnlockedText = 0x290; // UTextBlock*
		constexpr auto LoadoutName = 0x298; // UTextBlock*
	}

	namespace n_UMatchmakingScreen_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Anim_Select = 0x238; // UWidgetAnimation*
		constexpr auto ActivityText = 0x240; // UTextBlock*
		constexpr auto ButtonPromptsInfo = 0x248; // UButtonPromptsInfo_V2_C*
		constexpr auto ButtonSwitcher = 0x250; // UWidgetSwitcher*
		constexpr auto CommunityServersButton = 0x258; // UbtnSimple_V2_C*
		constexpr auto FilterSwitcher = 0x260; // UWidgetSwitcher*
		constexpr auto FindMatchButton = 0x268; // UbtnSimple_V2_C*
		constexpr auto GameFiltersScreen = 0x270; // UGameFiltersScreen_C*
		constexpr auto HorizontalBox_1 = 0x278; // UHorizontalBox*
		constexpr auto Image_3 = 0x280; // UImage*
		constexpr auto Image_4 = 0x288; // UImage*
		constexpr auto Loading = 0x290; // UImage*
		constexpr auto MatchmakingSwitcher = 0x298; // UWidgetSwitcher*
		constexpr auto MessageHelp = 0x2a0; // UButton*
		constexpr auto OptionsScreen = 0x2a8; // UOptionsScreen_V2_C*
		constexpr auto OptionsSwitcher = 0x2b0; // UWidgetSwitcher*
		constexpr auto PartyScrollingList = 0x2b8; // UScrollBox*
		constexpr auto ServerListSwitcher = 0x2c0; // UWidgetSwitcher*
		constexpr auto StartMatchButton = 0x2c8; // UbtnSimple_V2_C*
		constexpr auto TimeAsText = 0x2d0; // UTextBlock*
		constexpr auto WidthScaling = 0x2d8; // float
		constexpr auto bCurrentEnabledState = 0x2dc; // bool
		constexpr auto MainMenu = 0x2e0; // UMainMenuWidget_V2_C*
	}

	namespace n_UBTTask_MoveDirectlyToward {
		constexpr auto bDisablePathUpdateOnGoalLocationChange = 0xb0; // char : 1
		constexpr auto bProjectVectorGoalToNavigation = 0xb0; // char : 1
		constexpr auto bUpdatedDeprecatedProperties = 0xb0; // char : 1
	}

	namespace n_USoundNode {
		constexpr auto ChildNodes = 0x28; // TArray<USoundNode*>
	}

	namespace n_UHTP_Widget_Role_Loadout_Rifleman_C {
		constexpr auto HTP_Widget_Role_Loadout_Item_C_2 = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Item_C_4 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_4 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_11 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x270; // UImage*
		constexpr auto Image_10 = 0x278; // UImage*
		constexpr auto Image_17 = 0x280; // UImage*
	}

	namespace n_UAISubsystem {
		constexpr auto AISystem = 0x30; // UAISystem*
	}

	namespace n_UPlatformMediaSource {
		constexpr auto MediaSource = 0x80; // UMediaSource*
	}

	namespace n_AHLLAbilityDrop_Supplies {
		constexpr auto DismantleTime = 0x280; // float
		constexpr auto DisplayName = 0x288; // FText
		constexpr auto SupplyComponent = 0x2a0; // UHLLSupplyComponent*
		constexpr auto IndicatorComponent = 0x2a8; // UHLLIndicatorComponent*
		constexpr auto MapComponent = 0x2b0; // UHLLMapComponent*
		constexpr auto HealthComponent = 0x2b8; // UHLLSimpleHealthComponent*
		constexpr auto Team = 0x2c0; // ETeam
		constexpr auto DamageFilterType = 0x2c1; // EHLLDamageFilterType
		constexpr auto DroppedBy = 0x2c4; // TWeakObjectPtr<AShooterPlayerState>
		constexpr auto ImpactEffectClass = 0x2d0; // AShooterImpactEffect*
		constexpr auto ImpactMinVeloc = 0x2d8; // float
		constexpr auto MinTimeBetweenImpactFX = 0x2dc; // float
	}

	namespace n_UHLLUseContext_SwitchOrExitSeat {
		constexpr auto SwitchProgress = 0x238; // UImage*
		constexpr auto SwitchText = 0x240; // URichTextBlock*
	}

	namespace n_UUseableWeaponFPPAnimationSet {
		constexpr auto bUseLoopSections = 0x320; // char : 1
		constexpr auto bDontWaitForLoopedSectionToEnd = 0x320; // char : 1
		constexpr auto Use = 0x328; // FWeaponAnim
		constexpr auto UseExit = 0x350; // FWeaponAnim
		constexpr auto UseOther = 0x378; // FWeaponAnim
		constexpr auto UseOtherExit = 0x3a0; // FWeaponAnim
	}

	namespace n_UBTDecorator_BlueprintBase {
		constexpr auto AIOwner = 0x68; // AAIController*
		constexpr auto ActorOwner = 0x70; // AActor*
		constexpr auto ObservedKeyNames = 0x78; // TArray<FName>
		constexpr auto bShowPropertyDetails = 0x98; // char : 1
		constexpr auto bCheckConditionOnlyBlackBoardChanges = 0x98; // char : 1
		constexpr auto bIsObservingBB = 0x98; // char : 1
	}

	namespace n_UScrollBoxSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UWGT_RadialMarkers_Segment_C {
		constexpr auto UberGraphFrame = 0x288; // FPointerToUberGraphFrame
		constexpr auto IconSizer = 0x290; // USizeBox*
		constexpr auto SegmentBG = 0x298; // UImage*
		constexpr auto DefaultBGColor = 0x2a0; // FLinearColor
		constexpr auto DefaultColor = 0x2b0; // FLinearColor
		constexpr auto DynMatSegmentBG = 0x2c0; // UMaterialInstanceDynamic*
	}

	namespace n_UMovieSceneTrack {
		constexpr auto EvalOptions = 0x50; // FMovieSceneTrackEvalOptions
		constexpr auto bIsEvalDisabled = 0x55; // bool
	}

	namespace n_USplineComponent {
		constexpr auto SplineCurves = 0x410; // FSplineCurves
		constexpr auto SplineInfo = 0x478; // FInterpCurveVector
		constexpr auto SplineRotInfo = 0x490; // FInterpCurveQuat
		constexpr auto SplineScaleInfo = 0x4a8; // FInterpCurveVector
		constexpr auto SplineReparamTable = 0x4c0; // FInterpCurveFloat
		constexpr auto bAllowSplineEditingPerInstance = 0x4d8; // bool
		constexpr auto ReparamStepsPerSegment = 0x4dc; // int32_t
		constexpr auto Duration = 0x4e0; // float
		constexpr auto bStationaryEndpoints = 0x4e4; // bool
		constexpr auto bSplineHasBeenEdited = 0x4e5; // bool
		constexpr auto bModifiedByConstructionScript = 0x4e6; // bool
		constexpr auto bInputSplinePointsToConstructionScript = 0x4e7; // bool
		constexpr auto bDrawDebug = 0x4e8; // bool
		constexpr auto bClosedLoop = 0x4e9; // bool
		constexpr auto bLoopPositionOverride = 0x4ea; // bool
		constexpr auto LoopPosition = 0x4ec; // float
		constexpr auto DefaultUpVector = 0x4f0; // FVector
	}

	namespace n_UARBasicLightEstimate {
		constexpr auto AmbientIntensityLumens = 0x28; // float
		constexpr auto AmbientColorTemperatureKelvin = 0x2c; // float
		constexpr auto AmbientColor = 0x30; // FLinearColor
	}

	namespace n_UHLLDialogButton {
		constexpr auto RootButton = 0x230; // UButton*
		constexpr auto ButtonText = 0x238; // UTextBlock*
		constexpr auto Index = 0x240; // int32_t
		constexpr auto OnPressed = 0x248; // FMulticastInlineDelegate
	}

	namespace n_UExponentialHeightFogComponent {
		constexpr auto FogDensity = 0x1f0; // float
		constexpr auto FogHeightFalloff = 0x1f4; // float
		constexpr auto SecondFogData = 0x1f8; // FExponentialHeightFogData
		constexpr auto FogInscatteringColor = 0x204; // FLinearColor
		constexpr auto InscatteringColorCubemap = 0x218; // UTextureCube*
		constexpr auto InscatteringColorCubemapAngle = 0x220; // float
		constexpr auto InscatteringTextureTint = 0x224; // FLinearColor
		constexpr auto FullyDirectionalInscatteringColorDistance = 0x234; // float
		constexpr auto NonDirectionalInscatteringColorDistance = 0x238; // float
		constexpr auto DirectionalInscatteringExponent = 0x23c; // float
		constexpr auto DirectionalInscatteringStartDistance = 0x240; // float
		constexpr auto DirectionalInscatteringColor = 0x244; // FLinearColor
		constexpr auto FogMaxOpacity = 0x254; // float
		constexpr auto StartDistance = 0x258; // float
		constexpr auto FogCutoffDistance = 0x25c; // float
		constexpr auto bEnableVolumetricFog = 0x260; // bool
		constexpr auto VolumetricFogScatteringDistribution = 0x264; // float
		constexpr auto VolumetricFogAlbedo = 0x268; // FColor
		constexpr auto VolumetricFogEmissive = 0x26c; // FLinearColor
		constexpr auto VolumetricFogExtinctionScale = 0x27c; // float
		constexpr auto VolumetricFogDistance = 0x280; // float
		constexpr auto VolumetricFogStaticLightingScatteringIntensity = 0x284; // float
		constexpr auto bOverrideLightColorsWithFogInscatteringColors = 0x288; // bool
	}

	namespace n_UPlayerInput {
		constexpr auto DebugExecBindings = 0x120; // TArray<FKeyBind>
		constexpr auto InvertedAxis = 0x160; // TArray<FName>
	}

	namespace n_UPacketHandlerProfileConfig {
		constexpr auto Components = 0x28; // TArray<FString>
	}

	namespace n_UAnimationDataSourceRegistry {
		constexpr auto DataSources = 0x28; // TMap<FName, TWeakObjectPtr<UObject>>
	}

	namespace n_UParticleLODLevel {
		constexpr auto Level = 0x28; // int32_t
		constexpr auto bEnabled = 0x2c; // char : 1
		constexpr auto RequiredModule = 0x30; // UParticleModuleRequired*
		constexpr auto Modules = 0x38; // TArray<UParticleModule*>
		constexpr auto TypeDataModule = 0x48; // UParticleModuleTypeDataBase*
		constexpr auto SpawnModule = 0x50; // UParticleModuleSpawn*
		constexpr auto EventGenerator = 0x58; // UParticleModuleEventGenerator*
		constexpr auto SpawningModules = 0x60; // TArray<UParticleModuleSpawnBase*>
		constexpr auto SpawnModules = 0x70; // TArray<UParticleModule*>
		constexpr auto UpdateModules = 0x80; // TArray<UParticleModule*>
		constexpr auto OrbitModules = 0x90; // TArray<UParticleModuleOrbit*>
		constexpr auto EventReceiverModules = 0xa0; // TArray<UParticleModuleEventReceiverBase*>
		constexpr auto ConvertedModules = 0xb0; // char : 1
		constexpr auto PeakActiveParticles = 0xb4; // int32_t
	}

	namespace n_UStaticMeshSocket {
		constexpr auto SocketName = 0x28; // FName
		constexpr auto RelativeLocation = 0x30; // FVector
		constexpr auto RelativeRotation = 0x3c; // FRotator
		constexpr auto RelativeScale = 0x48; // FVector
		constexpr auto Tag = 0x58; // FString
	}

	namespace n_UForceFeedbackEventController {
		constexpr auto feedbackComponent = 0x28; // UForceFeedbackComponent*
	}

	namespace n_UNavigationSystemV1 {
		constexpr auto MainNavData = 0x28; // ANavigationData*
		constexpr auto AbstractNavData = 0x30; // ANavigationData*
		constexpr auto DefaultAgentName = 0x38; // FName
		constexpr auto CrowdManagerClass = 0x40; // TSoftClassPtr<UObject>
		constexpr auto bAutoCreateNavigationData = 0x68; // char : 1
		constexpr auto bSpawnNavDataInNavBoundsLevel = 0x68; // char : 1
		constexpr auto bAllowClientSideNavigation = 0x68; // char : 1
		constexpr auto bShouldDiscardSubLevelNavData = 0x68; // char : 1
		constexpr auto bTickWhilePaused = 0x68; // char : 1
		constexpr auto bSupportRebuilding = 0x68; // char : 1
		constexpr auto bInitialBuildingLocked = 0x68; // char : 1
		constexpr auto bSkipAgentHeightCheckWhenPickingNavData = 0x69; // char : 1
		constexpr auto DataGatheringMode = 0x6c; // ENavDataGatheringModeConfig
		constexpr auto bGenerateNavigationOnlyAroundNavigationInvokers = 0x70; // char : 1
		constexpr auto ActiveTilesUpdateInterval = 0x74; // float
		constexpr auto SupportedAgents = 0x78; // TArray<FNavDataConfig>
		constexpr auto SupportedAgentsMask = 0x88; // FNavAgentSelector
		constexpr auto NavDataSet = 0x90; // TArray<ANavigationData*>
		constexpr auto NavDataRegistrationQueue = 0xa0; // TArray<ANavigationData*>
		constexpr auto OnNavDataRegisteredEvent = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnNavigationGenerationFinishedDelegate = 0xd0; // FMulticastInlineDelegate
		constexpr auto OperationMode = 0x1bc; // FNavigationSystemRunMode
		constexpr auto DirtyAreasUpdateFreq = 0x514; // float
	}

	namespace n_UInterpTrackInstEvent {
		constexpr auto LastUpdatePosition = 0x28; // float
	}

	namespace n_UMovieSceneParameterSection {
		constexpr auto BoolParameterNamesAndCurves = 0xe0; // TArray<FBoolParameterNameAndCurve>
		constexpr auto ScalarParameterNamesAndCurves = 0xf0; // TArray<FScalarParameterNameAndCurve>
		constexpr auto Vector2DParameterNamesAndCurves = 0x100; // TArray<FVector2DParameterNameAndCurves>
		constexpr auto VectorParameterNamesAndCurves = 0x110; // TArray<FVectorParameterNameAndCurves>
		constexpr auto ColorParameterNamesAndCurves = 0x120; // TArray<FColorParameterNameAndCurves>
		constexpr auto TransformParameterNamesAndCurves = 0x130; // TArray<FTransformParameterNameAndCurves>
	}

	namespace n_UPlatoonManagementStack {
		constexpr auto RequestsContainer = 0x230; // UBorder*
		constexpr auto NotificationsContainer = 0x248; // UBorder*
		constexpr auto NotificationWidget = 0x250; // UPlatoonManagementStackNotification*
		constexpr auto PendingNotifications = 0x258; // TArray<FPlatoonManagementNotification>
	}

	namespace n_UMovieSceneColorSection {
		constexpr auto RedCurve = 0xe0; // FMovieSceneFloatChannel
		constexpr auto GreenCurve = 0x180; // FMovieSceneFloatChannel
		constexpr auto BlueCurve = 0x220; // FMovieSceneFloatChannel
		constexpr auto AlphaCurve = 0x2c0; // FMovieSceneFloatChannel
	}

	namespace n_ASceneCapture2D {
		constexpr auto CaptureComponent2D = 0x230; // USceneCaptureComponent2D*
	}

	namespace n_AHLLDispenserItem_StructureBase {
		constexpr auto SuppliesCost = 0x470; // int32_t
		constexpr auto bDifferentCostInNonFriendlySector = 0x474; // bool
		constexpr auto NonFriendlySectorSuppliesCost = 0x478; // int32_t
	}

	namespace n_UHLLReplicationGraphNode_AlwaysRelevant_ForConnection {
		constexpr auto LastPawn = 0x278; // AActor*
		constexpr auto PastRelevantActors = 0x280; // TArray<FAlwaysRelevantActorInfo>
	}

	namespace n_UPanelWidget {
		constexpr auto Slots = 0x108; // TArray<UPanelSlot*>
	}

	namespace n_UMaterialExpressionParameter {
		constexpr auto ParameterName = 0x40; // FName
		constexpr auto ExpressionGUID = 0x48; // FGuid
	}

	namespace n_UMaterialExpressionConstant4Vector {
		constexpr auto Constant = 0x40; // FLinearColor
	}

	namespace n_UHLLUISettings {
		constexpr auto UIStyleSet = 0x38; // TSoftObjectPtr<USlateWidgetStyleAsset>
	}

	namespace n_UHLLUI_RoleSelection_InGame {
		constexpr auto CharacterRenderer = 0x358; // AHLLCosmeticCharacterRenderer*
		constexpr auto OnRoleChangeConfirmed = 0x360; // FMulticastInlineDelegate
		constexpr auto ConfirmButton = 0x398; // UButton*
		constexpr auto ConfirmText = 0x3a0; // UTextBlock*
		constexpr auto CancelButton = 0x3a8; // UButton*
		constexpr auto CancelText = 0x3b0; // UTextBlock*
		constexpr auto WaitDialog = 0x3b8; // UWidget*
		constexpr auto bIsForcedRoleChange = 0x3c0; // char : 1
		constexpr auto LastViewTarget = 0x3c4; // TWeakObjectPtr<AActor>
		constexpr auto bCreatedViewTarget = 0x3cc; // char : 1
	}

	namespace n_UMovieSceneSection {
		constexpr auto EvalOptions = 0x50; // FMovieSceneSectionEvalOptions
		constexpr auto Easing = 0x58; // FMovieSceneEasingSettings
		constexpr auto SectionRange = 0x90; // FMovieSceneFrameRange
		constexpr auto PreRollFrames = 0xa0; // FFrameNumber
		constexpr auto PostRollFrames = 0xa4; // FFrameNumber
		constexpr auto RowIndex = 0xa8; // int32_t
		constexpr auto OverlapPriority = 0xac; // int32_t
		constexpr auto bIsActive = 0xb0; // char : 1
		constexpr auto bIsLocked = 0xb0; // char : 1
		constexpr auto StartTime = 0xb4; // float
		constexpr auto EndTime = 0xb8; // float
		constexpr auto PrerollTime = 0xbc; // float
		constexpr auto PostrollTime = 0xc0; // float
		constexpr auto bIsInfinite = 0xc4; // char : 1
		constexpr auto bSupportsInfiniteRange = 0xc8; // bool
		constexpr auto BlendType = 0xc9; // FOptionalMovieSceneBlendType
	}

	namespace n_UHLLAnimNotify_VibrationEvent {
		constexpr auto Sound = 0x48; // USoundBase*
		constexpr auto VolumeMultiplier = 0x50; // float
		constexpr auto PitchMultiplier = 0x54; // float
		constexpr auto bFollow = 0x58; // char : 1
	}

	namespace n_UHLLGlobalVibrationConfig {
		constexpr auto LowVibrationIntensity = 0x30; // float
		constexpr auto MediumVibrationIntensity = 0x34; // float
		constexpr auto HighVibrationIntensity = 0x38; // float
	}

	namespace n_UEnvQueryTest_Overlap {
		constexpr auto OverlapData = 0x1f8; // FEnvOverlapData
	}

	namespace n_UUserDefinedImageCaptureProtocol {
		constexpr auto Format = 0xd8; // EDesiredImageFormat
		constexpr auto bEnableCompression = 0xd9; // bool
		constexpr auto CompressionQuality = 0xdc; // int32_t
	}

	namespace n_UTabbedButtonContainer_V2_C {
		constexpr auto UberGraphFrame = 0x240; // FPointerToUberGraphFrame
		constexpr auto ButtonContainer = 0x248; // UHorizontalBox*
		constexpr auto LeftShoulder_UI = 0x250; // UImage*
		constexpr auto RightShoulder_UI = 0x258; // UImage*
		constexpr auto LeftShoulderStyle = 0x260; // FSlateBrush
		constexpr auto RightShoulderStyle = 0x2e8; // FSlateBrush
		constexpr auto NumberOfTabs = 0x370; // int32_t
		constexpr auto ActiveTabIndex = 0x374; // int32_t
		constexpr auto TabbedButtonsText = 0x378; // TArray<FText>
		constexpr auto bPCOnly = 0x388; // TArray<bool>
		constexpr auto TextSize = 0x398; // int32_t
		constexpr auto bSectionFocus = 0x39c; // bool
		constexpr auto OnTabClicked = 0x3a0; // FMulticastInlineDelegate
		constexpr auto ChosenButtonIndex = 0x3b0; // int32_t
		constexpr auto bOriginalSectionFocus = 0x3b4; // bool
		constexpr auto LeftPlaystationShoulderStyle = 0x3b8; // FSlateBrush
		constexpr auto LeftXboxShoulderStyle = 0x440; // FSlateBrush
		constexpr auto RightPlaystationShoulderStyle = 0x4c8; // FSlateBrush
		constexpr auto RightXboxShoulderStyle = 0x550; // FSlateBrush
	}

	namespace n_UWGT_CommanderPanel_C {
		constexpr auto UberGraphFrame = 0x2e0; // FPointerToUberGraphFrame
		constexpr auto GreyOut = 0x2e8; // UImage*
		constexpr auto GreyOut_2 = 0x2f0; // UImage*
		constexpr auto GreyOut_3 = 0x2f8; // UImage*
		constexpr auto Image_1 = 0x300; // UImage*
		constexpr auto Image_6 = 0x308; // UImage*
		constexpr auto Image_7 = 0x310; // UImage*
		constexpr auto Image_8 = 0x318; // UImage*
		constexpr auto Image_10 = 0x320; // UImage*
		constexpr auto Image_11 = 0x328; // UImage*
		constexpr auto Image_13 = 0x330; // UImage*
		constexpr auto Tooltip = 0x338; // UCanvasPanel*
		constexpr auto ToolTipContainer = 0x340; // USizeBox*
		constexpr auto OverviewMapParent = 0x348; // UWGT_OverviewMap_V2_C*
	}

	namespace n_UMaterialExpressionStaticSwitch {
		constexpr auto DefaultValue = 0x40; // char : 1
		constexpr auto A = 0x44; // FExpressionInput
		constexpr auto B = 0x58; // FExpressionInput
		constexpr auto Value = 0x6c; // FExpressionInput
	}

	namespace n_UHLLUpgradeGhostComponent {
		constexpr auto bHideGhostFromEnemies = 0xb0; // char : 1
		constexpr auto bCreateGhostBlocker = 0xb0; // char : 1
		constexpr auto BoxTransform = 0xc0; // FTransform
		constexpr auto BoxExtent = 0xf0; // FVector
		constexpr auto GhostBoxProfile = 0xfc; // FCollisionProfileName
		constexpr auto LeaveGhostTier = 0x104; // char
		constexpr auto GhostProfile = 0x108; // FCollisionProfileName
		constexpr auto GhostMaterial = 0x110; // UMaterialInterface*
		constexpr auto IdleLifespan = 0x118; // float
		constexpr auto ModifiedComponents = 0x120; // TMap<UPrimitiveComponent*, FGhostComponentDefaults>
		constexpr auto GhostBlockerBox = 0x170; // TWeakObjectPtr<UBoxComponent>
		constexpr auto GhostComponents = 0x178; // TArray<FGhostComponent>
		constexpr auto GhostDMI = 0x188; // UMaterialInstanceDynamic*
		constexpr auto GhostState = 0x190; // EGhostState
	}

	namespace n_UHLLRadialMenu_MarkersSegment {
		constexpr auto MarkerType = 0x278; // EHLLMarker
		constexpr auto MarkerIcon = 0x280; // UImage*
	}

	namespace n_AShooterWeapon_Instant {
		constexpr auto InstantConfig = 0x8b8; // FInstantWeaponData
		constexpr auto ImpactTemplate = 0x8f0; // AShooterImpactEffect*
		constexpr auto TracerProperties = 0x8f8; // FHLLTracerProperties
		constexpr auto HitNotify = 0x910; // FInstantHitInfo
		constexpr auto SuppressionBulletRadius = 0x928; // float
		constexpr auto SuppressionBulletAmount = 0x92c; // float
		constexpr auto SuppressionBulletFalloff = 0x930; // float
		constexpr auto SuppressionScoreModifier = 0x934; // float
		constexpr auto NumSuppressionShotsForScore = 0x938; // int32_t
		constexpr auto Cached_MaxRange = 0x940; // float
		constexpr auto Cached_MaxTravelTime = 0x944; // float
		constexpr auto TracerCounter = 0x948; // char
	}

	namespace n_UParticleModuleRotation {
		constexpr auto StartRotation = 0x30; // FRawDistributionFloat
	}

	namespace n_ADebugCameraController {
		constexpr auto bShowSelectedInfo = 0x580; // char : 1
		constexpr auto bIsFrozenRendering = 0x580; // char : 1
		constexpr auto bIsOrbitingSelectedActor = 0x580; // char : 1
		constexpr auto bOrbitPivotUseCenter = 0x580; // char : 1
		constexpr auto bEnableBufferVisualization = 0x580; // char : 1
		constexpr auto bEnableBufferVisualizationFullMode = 0x580; // char : 1
		constexpr auto bIsBufferVisualizationInputSetup = 0x580; // char : 1
		constexpr auto bLastDisplayEnabled = 0x580; // char : 1
		constexpr auto DrawFrustum = 0x588; // UDrawFrustumComponent*
		constexpr auto SelectedActor = 0x590; // AActor*
		constexpr auto SelectedComponent = 0x598; // UPrimitiveComponent*
		constexpr auto SelectedHitPoint = 0x5a0; // FHitResult
		constexpr auto OriginalControllerRef = 0x628; // APlayerController*
		constexpr auto OriginalPlayer = 0x630; // UPlayer*
		constexpr auto SpeedScale = 0x638; // float
		constexpr auto InitialMaxSpeed = 0x63c; // float
		constexpr auto InitialAccel = 0x640; // float
		constexpr auto InitialDecel = 0x644; // float
	}

	namespace n_UButtonPrompt_V2_C {
		constexpr auto UberGraphFrame = 0x388; // FPointerToUberGraphFrame
		constexpr auto ClickableButton = 0x390; // UButton*
		constexpr auto Container = 0x398; // UHorizontalBox*
		constexpr auto Overlay_60 = 0x3a0; // UOverlay*
		constexpr auto PrimaryButtonIcon = 0x3a8; // UImage*
		constexpr auto PromptText = 0x3b0; // UTextBlock*
		constexpr auto SecondaryButtonIcon = 0x3b8; // UImage*
		constexpr auto TextContainer = 0x3c0; // UHorizontalBox*
		constexpr auto TextSize = 0x3c8; // int32_t
		constexpr auto OnClicked = 0x3d0; // FMulticastInlineDelegate
		constexpr auto EnabledColour = 0x3e0; // FSlateColor
		constexpr auto DisabledColour = 0x408; // FSlateColor
		constexpr auto TimeoutDuration = 0x430; // FTimespan
		constexpr auto IconVisible = 0x438; // bool
	}

	namespace n_UAISense {
		constexpr auto DefaultExpirationAge = 0x28; // float
		constexpr auto NotifyType = 0x2c; // EAISenseNotifyType
		constexpr auto bWantsNewPawnNotification = 0x30; // char : 1
		constexpr auto bAutoRegisterAllPawnsAsSources = 0x30; // char : 1
		constexpr auto PerceptionSystemInstance = 0x38; // UAIPerceptionSystem*
	}

	namespace n_UMaterialExpressionViewProperty {
		constexpr auto Property = 0x40; // EMaterialExposedViewProperty
	}

	namespace n_UNodeMappingContainer {
		constexpr auto SourceItems = 0x28; // TMap<FName, FNodeItem>
		constexpr auto TargetItems = 0x78; // TMap<FName, FNodeItem>
		constexpr auto SourceToTarget = 0xc8; // TMap<FName, FName>
		constexpr auto SourceAsset = 0x118; // TSoftObjectPtr<UObject>
		constexpr auto TargetAsset = 0x140; // TSoftObjectPtr<UObject>
	}

	namespace n_UComboBox {
		constexpr auto Items = 0x108; // TArray<UObject*>
		constexpr auto OnGenerateWidgetEvent = 0x118; // FDelegate
		constexpr auto bIsFocusable = 0x128; // bool
	}

	namespace n_UInstancedStaticMeshComponent {
		constexpr auto PerInstanceSMData = 0x4a0; // TArray<FInstancedStaticMeshInstanceData>
		constexpr auto NumCustomDataFloats = 0x4b0; // int32_t
		constexpr auto PerInstanceSMCustomData = 0x4b8; // TArray<float>
		constexpr auto InstancingRandomSeed = 0x4c8; // int32_t
		constexpr auto InstanceStartCullDistance = 0x4cc; // int32_t
		constexpr auto InstanceEndCullDistance = 0x4d0; // int32_t
		constexpr auto InstanceReorderTable = 0x4d8; // TArray<int32_t>
		constexpr auto NumPendingLightmaps = 0x530; // int32_t
		constexpr auto CachedMappings = 0x538; // TArray<FInstancedStaticMeshMappingInfo>
	}

	namespace n_APreplacedGarrisonSpawn {
		constexpr auto GarrisonToSpawn = 0x220; // APreplacedGarrison*
	}

	namespace n_UParticleModuleAccelerationConstant {
		constexpr auto Acceleration = 0x38; // FVector
	}

	namespace n_ABaseReconVehicle {
		constexpr auto TurretController2 = 0x4e8; // UTurretControllerComponent2*
		constexpr auto PitchAudio = 0x4f0; // UAudioComponent*
		constexpr auto YawAudio = 0x4f8; // UAudioComponent*
		constexpr auto TurretAudioAttachSocket = 0x500; // FName
		constexpr auto CharacterMovementBarrierTurret = 0x508; // UStaticMeshComponent*
		constexpr auto CharacterMovementBarrierBarrel = 0x510; // UStaticMeshComponent*
		constexpr auto ArmourCollision_Body = 0x518; // UHLLArmourCollisionMesh*
		constexpr auto ArmourCollision_Turret = 0x520; // UHLLArmourCollisionMesh*
		constexpr auto ArmourCollision_Barrel = 0x528; // UHLLArmourCollisionMesh*
		constexpr auto GunnerSeatClass = 0x530; // ATankGunnerSeat*
		constexpr auto CommanderSeatClass = 0x538; // ATankCommanderSeat*
		constexpr auto FirstPassengerSeatClass = 0x540; // AHLLSeat*
		constexpr auto SecondPassengerSeatClass = 0x548; // AHLLSeat*
		constexpr auto GunnerSeat = 0x550; // ATankGunnerSeat*
		constexpr auto CommanderSeat = 0x558; // ATankCommanderSeat*
		constexpr auto FirstPassengerSeat = 0x560; // AHLLSeat*
		constexpr auto SecondPassengerSeat = 0x568; // AHLLSeat*
		constexpr auto PitchVibrationController = 0x570; // UVibrationEventController*
		constexpr auto YawVibrationController = 0x578; // UVibrationEventController*
	}

	namespace n_UBreakpoint {
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto Node = 0x30; // UEdGraphNode*
		constexpr auto bStepOnce = 0x38; // char : 1
		constexpr auto bStepOnce_WasPreviouslyDisabled = 0x38; // char : 1
		constexpr auto bStepOnce_RemoveAfterHit = 0x38; // char : 1
	}

	namespace n_AHLLArtillerySpawner {
		constexpr auto DummyRoot = 0x220; // USceneComponent*
		constexpr auto ArtilleryClass = 0x228; // AHLLArtilleryBase*
	}

	namespace n_AHLLExplosive {
		constexpr auto MapComponent = 0x288; // UHLLMapComponent*
		constexpr auto IndicatorComponent = 0x290; // UHLLIndicatorComponent*
		constexpr auto HealthComponent = 0x298; // UHLLSimpleHealthComponent*
		constexpr auto OwningTeam = 0x2a0; // ETeam
		constexpr auto RepExplosionInfo = 0x2a4; // FRepExplosion
		constexpr auto m_weaponType = 0x33c; // EWeaponType
		constexpr auto DamageFilterType = 0x33d; // EHLLDamageFilterType
		constexpr auto ExplosionEffectClass = 0x340; // AShooterImpactEffect*
		constexpr auto PostExplodeLifespan = 0x348; // float
		constexpr auto Damage = 0x34c; // float
		constexpr auto DamageRadius = 0x350; // float
		constexpr auto DamageFalloff = 0x354; // float
		constexpr auto DamageType = 0x358; // UDamageType*
		constexpr auto bIgnoreDamageOcclusion = 0x360; // char : 1
		constexpr auto bSuppressAllTeams = 0x360; // char : 1
		constexpr auto bIgnoreSuppressionOcclusion = 0x360; // char : 1
		constexpr auto Suppression = 0x364; // float
		constexpr auto SuppressionRadius = 0x368; // float
		constexpr auto SuppressionFalloff = 0x36c; // float
		constexpr auto SpawnedByPlayer = 0x370; // AShooterPlayerState*
		constexpr auto ExplosionInstigator = 0x378; // AController*
		constexpr auto bCanBeDismantled = 0x380; // char : 1
		constexpr auto bRecoverAmmoOnDismantle = 0x380; // char : 1
		constexpr auto DismantleItemName = 0x388; // FText
		constexpr auto DismantleTime = 0x3a0; // float
		constexpr auto EnemyDismantleScore = 0x3a4; // FName
	}

	namespace n_UButtonPromptsInfo_V2_C {
		constexpr auto UberGraphFrame = 0x260; // FPointerToUberGraphFrame
		constexpr auto Advanced_DescriptionText = 0x268; // UTextBlock*
		constexpr auto AdvancePrompt = 0x270; // USizeBox*
		constexpr auto Alert = 0x278; // UBorder*
		constexpr auto BackgroundBlur_1 = 0x280; // UBackgroundBlur*
		constexpr auto Cooldown = 0x288; // UBorder*
		constexpr auto DescriptionSwitcher = 0x290; // UWidgetSwitcher*
		constexpr auto DescriptionText = 0x298; // UTextBlock*
		constexpr auto DividerLine = 0x2a0; // UVerticalBox*
		constexpr auto Image = 0x2a8; // UImage*
		constexpr auto Image_4 = 0x2b0; // UImage*
		constexpr auto img_icon = 0x2b8; // UImage*
		constexpr auto InfoBox = 0x2c0; // UVerticalBox*
		constexpr auto Rtxt_Title = 0x2c8; // URichTextBlock*
		constexpr auto SB_Icon = 0x2d0; // USizeBox*
		constexpr auto SizeBox_3 = 0x2d8; // USizeBox*
		constexpr auto txt_alert = 0x2e0; // UTextBlock*
		constexpr auto txt_cooldown = 0x2e8; // UTextBlock*
		constexpr auto TextSize = 0x2f0; // int32_t
		constexpr auto OnInputChanged = 0x2f8; // FMulticastInlineDelegate
		constexpr auto LeftPadding = 0x308; // float
		constexpr auto RightPadding = 0x30c; // float
		constexpr auto BottomPadding = 0x310; // float
		constexpr auto bShowDivider = 0x314; // bool
		constexpr auto bShowDescriptionText = 0x315; // bool
		constexpr auto bAlignRight = 0x316; // bool
		constexpr auto isAlert = 0x317; // bool
		constexpr auto Text_Tooltip_Alert = 0x318; // FText
		constexpr auto Tooltip_Title = 0x330; // bool
		constexpr auto IconBrush = 0x338; // FSlateBrush
		constexpr auto Text_Tooltip_Cooldown = 0x3c0; // FText
		constexpr auto Text_Tooltip_Body = 0x3d8; // FText
		constexpr auto Text_Tooltip_Title = 0x3f0; // FText
		constexpr auto SelectedButtonPromptImages = 0x408; // TArray<TSoftObjectPtr<UTexture2D>>
		constexpr auto XboxGamepadIcons = 0x418; // TArray<TSoftObjectPtr<UTexture2D>>
		constexpr auto PlaystationGamepadIcons = 0x428; // TArray<TSoftObjectPtr<UTexture2D>>
		constexpr auto GamepadButtons_New = 0x438; // TArray<EHLLGamepadButtons>
		constexpr auto bHidesBottomForKBM = 0x448; // bool
		constexpr auto DefaultSwitcherIndex = 0x44c; // int32_t
	}

	namespace n_UWGT_OverviewMap_V2_C {
		constexpr auto UberGraphFrame = 0x348; // FPointerToUberGraphFrame
		constexpr auto A_OpenMapKey = 0x350; // UWidgetAnimation*
		constexpr auto Anim_OpenClose = 0x358; // UWidgetAnimation*
		constexpr auto ButtonPromptsInfo_V2 = 0x360; // UButtonPromptsInfo_V2_C*
		constexpr auto HorizontalBox_2 = 0x368; // UHorizontalBox*
		constexpr auto hotkey_Marker = 0x370; // UW_HotkeyPanelElement_C*
		constexpr auto hotkey_StrategicMap = 0x378; // UW_HotkeyPanelElement_C*
		constexpr auto Image_1 = 0x380; // UImage*
		constexpr auto Image_3 = 0x388; // UImage*
		constexpr auto Image_6 = 0x390; // UImage*
		constexpr auto Image_81 = 0x398; // UImage*
		constexpr auto KeyboardButtons = 0x3a0; // UHorizontalBox*
		constexpr auto SB_Map = 0x3a8; // USizeBox*
		constexpr auto SizeBox_5 = 0x3b0; // USizeBox*
		constexpr auto txt_KeyExpand = 0x3b8; // URichTextBlock*
		constexpr auto W_MapKey = 0x3c0; // UW_MapKey_C*
		constexpr auto Map_KeyOpen = 0x3c8; // bool
		constexpr auto CurrentInputState = 0x3c9; // EMapInputState
		constexpr auto NewVar_1 = 0x3d0; // UHLLMapIconBase*
		constexpr auto HasHighlightedIcon = 0x3d8; // bool
		constexpr auto HasAbilityIconSelected = 0x3d9; // bool
		constexpr auto CanPlaceAbility = 0x3da; // bool
		constexpr auto CanSelectAbility = 0x3db; // bool
		constexpr auto CanActivate = 0x3dc; // bool
		constexpr auto CanBeRotated = 0x3dd; // bool
	}

	namespace n_ULevelActorContainer {
		constexpr auto Actors = 0x28; // TArray<AActor*>
	}

	namespace n_UWGT_MapIcon_BaseLineSectorSpawn_V2_C {
		constexpr auto UberGraphFrame = 0x4a8; // FPointerToUberGraphFrame
		constexpr auto Icon = 0x4b0; // UBorder*
		constexpr auto Scaler = 0x4b8; // UScaleBox*
		constexpr auto Widget_TooltipRef = 0x4c0; // UW_HoverToolTip_Explained_C*
	}

	namespace n_UParticleModuleBeamTarget {
		constexpr auto TargetMethod = 0x30; // Beam2SourceTargetMethod
		constexpr auto TargetName = 0x34; // FName
		constexpr auto Target = 0x40; // FRawDistributionVector
		constexpr auto bTargetAbsolute = 0x88; // char : 1
		constexpr auto bLockTarget = 0x88; // char : 1
		constexpr auto TargetTangentMethod = 0x8c; // Beam2SourceTargetTangentMethod
		constexpr auto TargetTangent = 0x90; // FRawDistributionVector
		constexpr auto bLockTargetTangent = 0xd8; // char : 1
		constexpr auto TargetStrength = 0xe0; // FRawDistributionFloat
		constexpr auto bLockTargetStength = 0x110; // char : 1
		constexpr auto LockRadius = 0x114; // float
	}

	namespace n_UWGT_RadialChat_Segment_C {
		constexpr auto UberGraphFrame = 0x288; // FPointerToUberGraphFrame
		constexpr auto IconSizer = 0x290; // USizeBox*
		constexpr auto SegmentBG = 0x298; // UImage*
		constexpr auto SegmentOffColour = 0x2a0; // FLinearColor
		constexpr auto SegmentColour = 0x2b0; // FLinearColor
		constexpr auto DynMatSegmentBG = 0x2c0; // UMaterialInstanceDynamic*
	}

	namespace n_UMaterialExpressionShaderStageSwitch {
		constexpr auto PixelShader = 0x40; // FExpressionInput
		constexpr auto VertexShader = 0x54; // FExpressionInput
	}

	namespace n_AHLLArmourWeapon_Howitzer {
		constexpr auto Shells = 0x470; // TArray<AHLLHowitzerShell*>
		constexpr auto MinMaxRange = 0x480; // FVector2D
		constexpr auto MinMaxDispersion = 0x488; // FVector2D
	}

	namespace n_UBTTask_MoveTo {
		constexpr auto AcceptableRadius = 0x98; // float
		constexpr auto FilterClass = 0xa0; // UNavigationQueryFilter*
		constexpr auto ObservedBlackboardValueTolerance = 0xa8; // float
		constexpr auto bObserveBlackboardValue = 0xac; // char : 1
		constexpr auto bAllowStrafe = 0xac; // char : 1
		constexpr auto bAllowPartialPath = 0xac; // char : 1
		constexpr auto bTrackMovingGoal = 0xac; // char : 1
		constexpr auto bProjectGoalLocation = 0xac; // char : 1
		constexpr auto bReachTestIncludesAgentRadius = 0xac; // char : 1
		constexpr auto bReachTestIncludesGoalRadius = 0xac; // char : 1
		constexpr auto bStopOnOverlap = 0xac; // char : 1
		constexpr auto bStopOnOverlapNeedsUpdate = 0xad; // char : 1
	}

	namespace n_UNavAreaMeta_SwitchByAgent {
		constexpr auto Agent0Area = 0x48; // UNavArea*
		constexpr auto Agent1Area = 0x50; // UNavArea*
		constexpr auto Agent2Area = 0x58; // UNavArea*
		constexpr auto Agent3Area = 0x60; // UNavArea*
		constexpr auto Agent4Area = 0x68; // UNavArea*
		constexpr auto Agent5Area = 0x70; // UNavArea*
		constexpr auto Agent6Area = 0x78; // UNavArea*
		constexpr auto Agent7Area = 0x80; // UNavArea*
		constexpr auto Agent8Area = 0x88; // UNavArea*
		constexpr auto Agent9Area = 0x90; // UNavArea*
		constexpr auto Agent10Area = 0x98; // UNavArea*
		constexpr auto Agent11Area = 0xa0; // UNavArea*
		constexpr auto Agent12Area = 0xa8; // UNavArea*
		constexpr auto Agent13Area = 0xb0; // UNavArea*
		constexpr auto Agent14Area = 0xb8; // UNavArea*
		constexpr auto Agent15Area = 0xc0; // UNavArea*
	}

	namespace n_UHapticFeedbackEffect_SoundWave {
		constexpr auto SoundWave = 0x28; // USoundWave*
	}

	namespace n_AHLLArmourWeapon_Projectile {
		constexpr auto TurretBoneName = 0x470; // FName
		constexpr auto Projectiles = 0x478; // TArray<AShooterProjectile*>
	}

	namespace n_AGarrison {
		constexpr auto bStrongInLockedSectors = 0x3f0; // bool
		constexpr auto StrongDismantleTime = 0x3f4; // float
	}

	namespace n_UMaterialExpressionDivide {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto ConstA = 0x68; // float
		constexpr auto ConstB = 0x6c; // float
	}

	namespace n_UHLLAdminCameraSpringArm {
		constexpr auto TraceIgnoreActor = 0x280; // AActor*
	}

	namespace n_ASphereSectorCaptureBooster {
		constexpr auto TriggerShape = 0x280; // USphereComponent*
	}

	namespace n_USoundNodeAttenuation {
		constexpr auto AttenuationSettings = 0x48; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x50; // FSoundAttenuationSettings
		constexpr auto bOverrideAttenuation = 0x3f0; // char : 1
	}

	namespace n_UAvoidanceManager {
		constexpr auto DefaultTimeToLive = 0x30; // float
		constexpr auto LockTimeAfterAvoid = 0x34; // float
		constexpr auto LockTimeAfterClean = 0x38; // float
		constexpr auto DeltaTimeToPredict = 0x3c; // float
		constexpr auto ArtificialRadiusExpansion = 0x40; // float
		constexpr auto TestHeightDifference = 0x44; // float
		constexpr auto HeightCheckMargin = 0x48; // float
	}

	namespace n_UParticleModuleMeshRotationRate_Seeded {
		constexpr auto RandomSeedInfo = 0x78; // FParticleRandomSeedInfo
	}

	namespace n_AHLLAbility_Reinforce {
		constexpr auto AbilityTime = 0x370; // float
		constexpr auto ManpowerMultiplier = 0x374; // float
	}

	namespace n_UTexture {
		constexpr auto LightingGuid = 0x48; // FGuid
		constexpr auto LODBias = 0x58; // int32_t
		constexpr auto CompressionSettings = 0x5c; // TextureCompressionSettings
		constexpr auto Filter = 0x5d; // TextureFilter
		constexpr auto MipLoadOptions = 0x5e; // ETextureMipLoadOptions
		constexpr auto LODGroup = 0x5f; // TextureGroup
		constexpr auto SRGB = 0x60; // char : 1
		constexpr auto bNoTiling = 0x60; // char : 1
		constexpr auto VirtualTextureStreaming = 0x60; // char : 1
		constexpr auto CompressionYCoCg = 0x60; // char : 1
		constexpr auto bAsyncResourceReleaseHasBeenStarted = 0x60; // char : 1
		constexpr auto AssetUserData = 0x68; // TArray<UAssetUserData*>
	}

	namespace n_UWidgetSwitcher {
		constexpr auto ActiveWidgetIndex = 0x120; // int32_t
	}

	namespace n_UBTDecorator_IsBBEntryOfClass {
		constexpr auto TestClass = 0x90; // UObject*
	}

	namespace n_UPhysicsThrusterComponent {
		constexpr auto ThrustStrength = 0x1f0; // float
	}

	namespace n_USoundNodeHLLDistanceCrossFade {
		constexpr auto CrossFadeInput = 0x48; // TArray<FDistanceDatum>
	}

	namespace n_UABP_Wrench_FPP_V2_C {
		constexpr auto UberGraphFrame = 0x270; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x278; // FAnimNode_Root
		constexpr auto AnimGraphNode_Slot = 0x2a8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SequenceEvaluator = 0x2f0; // FAnimNode_SequenceEvaluator
		constexpr auto AnimGraphNode_ModifyBone = 0x338; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x440; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0x460; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto FPPInstance = 0x480; // UABP_Rifleman_FPP_V2_C*
		constexpr auto TPPInstance = 0x488; // UABP_Rifleman_TPP_V2_C*
		constexpr auto ShooterWeapon = 0x490; // AShooterWeapon*
		constexpr auto ShooterCharacter = 0x498; // AShooterCharacter*
		constexpr auto TransitionSpeed = 0x4a0; // float
		constexpr auto Stance = 0x4a4; // ECharacterStance
	}

	namespace n_UInterpTrackBoolProp {
		constexpr auto BoolTrack = 0x70; // TArray<FBoolTrackKey>
		constexpr auto PropertyName = 0x80; // FName
	}

	namespace n_UHLLMapIcon_Marker {
		constexpr auto PlatoonIDText = 0x368; // UTextBlock*
		constexpr auto MovedOrPlacedAnim = 0x370; // UWidgetAnimation*
	}

	namespace n_ABandwidthTestActor {
		constexpr auto BandwidthGenerator = 0x220; // FBandwidthTestGenerator
	}

	namespace n_UDeployment_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto ArmySidebar = 0x238; // UBPW_Army_V2_C*
		constexpr auto CreatePlatoon_2 = 0x240; // UCreatePlatoon_V2_C*
		constexpr auto DeployMap = 0x248; // UHorizontalBox*
		constexpr auto DeploymentMap = 0x250; // UBPW_DeploymentMap_V2_C*
		constexpr auto DeployRoleSelection = 0x258; // UWGT_DeployRoleSelection_V2_C*
		constexpr auto Image_67 = 0x260; // UImage*
		constexpr auto InputBlocker = 0x268; // UBorder*
		constexpr auto ServerMessage = 0x270; // UTextBlock*
		constexpr auto ServerMessageMapKeySwitcher = 0x278; // UWidgetSwitcher*
		constexpr auto ServerMessageMapKeyTabs = 0x280; // UTabbedButtonContainer_V2_C*
		constexpr auto SpawnPointContainer = 0x288; // UScrollBox*
		constexpr auto UnitLeaderSettings = 0x290; // UUnitLeaderSettings_C*
		constexpr auto VerticalBox_3 = 0x298; // UVerticalBox*
		constexpr auto W_MapKey = 0x2a0; // UW_MapKey_C*
		constexpr auto WS_DeploymentContent = 0x2a8; // UWidgetSwitcher*
		constexpr auto OnDeploy = 0x2b0; // FMulticastInlineDelegate
		constexpr auto PlayerTeam = 0x2c0; // ETeam
		constexpr auto OnDeployAtOutpost = 0x2c8; // FMulticastInlineDelegate
		constexpr auto ForceCreatePlatoonDisabled = 0x2d8; // bool
		constexpr auto LatchedSpawnWaveTime = 0x2dc; // float
		constexpr auto LastObservedSpawnWaveTime = 0x2e0; // float
		constexpr auto Deployment_WidgetParent = 0x2e8; // UDeploymentScreen_V2_C*
		constexpr auto Deployment_PlatoonJoined = 0x2f0; // bool
		constexpr auto Widget_Tooltip_SpawnPoint = 0x2f8; // UW_HoverToolTip_Explained_C*
		constexpr auto SwitchTeamUpdateTimer = 0x300; // FTimerHandle
		constexpr auto Player_Deploying = 0x308; // bool
		constexpr auto AvailableSpawnPoints = 0x310; // TArray<UHLLMapIconBase*>
		constexpr auto UnitIndex = 0x320; // int32_t
		constexpr auto bHasFocused = 0x324; // bool
		constexpr auto CurrentType = 0x325; // EDynamicSpawnType
		constexpr auto CurrentHQIndex = 0x328; // int32_t
		constexpr auto SpawnTextAsString = 0x330; // FString
		constexpr auto SpawnText = 0x340; // FText
		constexpr auto CurrentGarrisonIndex = 0x358; // int32_t
		constexpr auto CurrentOutpostIndex = 0x35c; // int32_t
		constexpr auto TotalSpawnPoints = 0x360; // int32_t
		constexpr auto bIsSpawnAvailable = 0x364; // bool
		constexpr auto UnavailableSpawnPoint = 0x368; // USpawnPointListItem_C*
		constexpr auto CurrentAirheadIndex = 0x370; // int32_t
		constexpr auto ChosenSpawnPoint = 0x378; // USpawnPointListItem_C*
		constexpr auto IsBelowDeployCancellationTime = 0x380; // bool
		constexpr auto bShouldHideSpawnItem = 0x381; // bool
		constexpr auto bGamepadPlayerKickNavigation = 0x382; // bool
		constexpr auto WasFocusedOnPlayer = 0x383; // bool
		constexpr auto LastRCONMessage = 0x388; // FText
		constexpr auto CurrentMobileSpawnIndex = 0x3a0; // int32_t
		constexpr auto TimePressedShoulderButton = 0x3a4; // float
		constexpr auto GamepadPlayerKickLastSelected = 0x3a8; // AShooterPlayerState*
		constexpr auto ShooterHUD = 0x3b0; // AShooterHUD*
	}

	namespace n_ULandscapeMeshProxyComponent {
		constexpr auto LandscapeGuid = 0x4a0; // FGuid
		constexpr auto ProxyComponentBases = 0x4b0; // TArray<FIntPoint>
		constexpr auto ProxyLOD = 0x4c0; // int8_t
	}

	namespace n_UDistributionVectorConstantCurve {
		constexpr auto ConstantCurve = 0x38; // FInterpCurveVector
		constexpr auto bLockAxes = 0x50; // char : 1
		constexpr auto LockedAxes = 0x54; // EDistributionVectorLockFlags
	}

	namespace n_UCheckBoxStyleAsset {
		constexpr auto CheckBoxStyle = 0x28; // FCheckBoxStyle
	}

	namespace n_UParticleModuleColorScaleOverLife {
		constexpr auto ColorScaleOverLife = 0x30; // FRawDistributionVector
		constexpr auto AlphaScaleOverLife = 0x78; // FRawDistributionFloat
		constexpr auto bEmitterTime = 0xa8; // char : 1
	}

	namespace n_UInputActionDelegateBinding {
		constexpr auto InputActionDelegateBindings = 0x28; // TArray<FBlueprintInputActionDelegateBinding>
	}

	namespace n_UMaterialExpressionComment {
		constexpr auto SizeX = 0x40; // int32_t
		constexpr auto SizeY = 0x44; // int32_t
		constexpr auto Text = 0x48; // FString
		constexpr auto CommentColor = 0x58; // FLinearColor
		constexpr auto FontSize = 0x68; // int32_t
	}

	namespace n_UImage {
		constexpr auto Brush = 0x108; // FSlateBrush
		constexpr auto BrushDelegate = 0x190; // FDelegate
		constexpr auto ColorAndOpacity = 0x1a0; // FLinearColor
		constexpr auto ColorAndOpacityDelegate = 0x1b0; // FDelegate
		constexpr auto bFlipForRightToLeftFlowDirection = 0x1c0; // bool
		constexpr auto OnMouseButtonDownEvent = 0x1c4; // FDelegate
	}

	namespace n_UEnvQueryOption {
		constexpr auto Generator = 0x28; // UEnvQueryGenerator*
		constexpr auto Tests = 0x30; // TArray<UEnvQueryTest*>
	}

	namespace n_ACameraActor {
		constexpr auto AutoActivateForPlayer = 0x220; // EAutoReceiveInput
		constexpr auto CameraComponent = 0x228; // UCameraComponent*
		constexpr auto SceneComponent = 0x230; // USceneComponent*
		constexpr auto bConstrainAspectRatio = 0x240; // char : 1
		constexpr auto AspectRatio = 0x244; // float
		constexpr auto FOVAngle = 0x248; // float
		constexpr auto PostProcessBlendWeight = 0x24c; // float
		constexpr auto PostProcessSettings = 0x250; // FPostProcessSettings
	}

	namespace n_USpinBox {
		constexpr auto Value = 0x108; // float
		constexpr auto ValueDelegate = 0x10c; // FDelegate
		constexpr auto WidgetStyle = 0x120; // FSpinBoxStyle
		constexpr auto Style = 0x408; // USlateWidgetStyleAsset*
		constexpr auto MinFractionalDigits = 0x410; // int32_t
		constexpr auto MaxFractionalDigits = 0x414; // int32_t
		constexpr auto bAlwaysUsesDeltaSnap = 0x418; // bool
		constexpr auto Delta = 0x41c; // float
		constexpr auto SliderExponent = 0x420; // float
		constexpr auto Font = 0x428; // FSlateFontInfo
		constexpr auto Justification = 0x478; // ETextJustify
		constexpr auto MinDesiredWidth = 0x47c; // float
		constexpr auto ClearKeyboardFocusOnCommit = 0x480; // bool
		constexpr auto SelectAllTextOnCommit = 0x481; // bool
		constexpr auto ForegroundColor = 0x488; // FSlateColor
		constexpr auto OnValueChanged = 0x4b0; // FMulticastInlineDelegate
		constexpr auto OnValueCommitted = 0x4c0; // FMulticastInlineDelegate
		constexpr auto OnBeginSliderMovement = 0x4d0; // FMulticastInlineDelegate
		constexpr auto OnEndSliderMovement = 0x4e0; // FMulticastInlineDelegate
		constexpr auto bOverride_MinValue = 0x4f0; // char : 1
		constexpr auto bOverride_MaxValue = 0x4f0; // char : 1
		constexpr auto bOverride_MinSliderValue = 0x4f0; // char : 1
		constexpr auto bOverride_MaxSliderValue = 0x4f0; // char : 1
		constexpr auto MinValue = 0x4f4; // float
		constexpr auto MaxValue = 0x4f8; // float
		constexpr auto MinSliderValue = 0x4fc; // float
		constexpr auto MaxSliderValue = 0x500; // float
	}

	namespace n_UMaterialExpressionTextureCoordinate {
		constexpr auto CoordinateIndex = 0x40; // int32_t
		constexpr auto UTiling = 0x44; // float
		constexpr auto VTiling = 0x48; // float
		constexpr auto UnMirrorU = 0x4c; // char : 1
		constexpr auto UnMirrorV = 0x4c; // char : 1
	}

	namespace n_ASkyAtmosphere {
		constexpr auto SkyAtmosphereComponent = 0x220; // USkyAtmosphereComponent*
	}

	namespace n_UHLLSupplyIndicator {
		constexpr auto SupplyText = 0x2a8; // UTextBlock*
	}

	namespace n_UForceFeedbackComponent {
		constexpr auto ForceFeedbackEffect = 0x1f0; // UForceFeedbackEffect*
		constexpr auto bAutoDestroy = 0x1f8; // char : 1
		constexpr auto bStopWhenOwnerDestroyed = 0x1f8; // char : 1
		constexpr auto bLooping = 0x1f8; // char : 1
		constexpr auto bIgnoreTimeDilation = 0x1f8; // char : 1
		constexpr auto bOverrideAttenuation = 0x1f8; // char : 1
		constexpr auto IntensityMultiplier = 0x1fc; // float
		constexpr auto AttenuationSettings = 0x200; // UForceFeedbackAttenuation*
		constexpr auto AttenuationOverrides = 0x208; // FForceFeedbackAttenuationSettings
		constexpr auto OnForceFeedbackFinished = 0x2b8; // FMulticastInlineDelegate
	}

	namespace n_USlider {
		constexpr auto Value = 0x108; // float
		constexpr auto ValueDelegate = 0x10c; // FDelegate
		constexpr auto MinValue = 0x11c; // float
		constexpr auto MaxValue = 0x120; // float
		constexpr auto WidgetStyle = 0x128; // FSliderStyle
		constexpr auto Orientation = 0x468; // EOrientation
		constexpr auto SliderBarColor = 0x46c; // FLinearColor
		constexpr auto SliderHandleColor = 0x47c; // FLinearColor
		constexpr auto IndentHandle = 0x48c; // bool
		constexpr auto Locked = 0x48d; // bool
		constexpr auto MouseUsesStep = 0x48e; // bool
		constexpr auto RequiresControllerLock = 0x48f; // bool
		constexpr auto StepSize = 0x490; // float
		constexpr auto IsFocusable = 0x494; // bool
		constexpr auto OnMouseCaptureBegin = 0x498; // FMulticastInlineDelegate
		constexpr auto OnMouseCaptureEnd = 0x4a8; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureBegin = 0x4b8; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureEnd = 0x4c8; // FMulticastInlineDelegate
		constexpr auto OnValueChanged = 0x4d8; // FMulticastInlineDelegate
	}

	namespace n_UAnimationAsset {
		constexpr auto Skeleton = 0x38; // USkeleton*
		constexpr auto MetaData = 0x60; // TArray<UAnimMetaData*>
		constexpr auto AssetUserData = 0x70; // TArray<UAssetUserData*>
	}

	namespace n_UAnimCompress_PerTrackCompression {
		constexpr auto MaxZeroingThreshold = 0x60; // float
		constexpr auto MaxPosDiffBitwise = 0x64; // float
		constexpr auto MaxAngleDiffBitwise = 0x68; // float
		constexpr auto MaxScaleDiffBitwise = 0x6c; // float
		constexpr auto AllowedRotationFormats = 0x70; // TArray<AnimationCompressionFormat>
		constexpr auto AllowedTranslationFormats = 0x80; // TArray<AnimationCompressionFormat>
		constexpr auto AllowedScaleFormats = 0x90; // TArray<AnimationCompressionFormat>
		constexpr auto bResampleAnimation = 0xa0; // char : 1
		constexpr auto ResampledFramerate = 0xa4; // float
		constexpr auto MinKeysForResampling = 0xa8; // int32_t
		constexpr auto bUseAdaptiveError = 0xac; // char : 1
		constexpr auto bUseOverrideForEndEffectors = 0xac; // char : 1
		constexpr auto TrackHeightBias = 0xb0; // int32_t
		constexpr auto ParentingDivisor = 0xb4; // float
		constexpr auto ParentingDivisorExponent = 0xb8; // float
		constexpr auto bUseAdaptiveError2 = 0xbc; // char : 1
		constexpr auto RotationErrorSourceRatio = 0xc0; // float
		constexpr auto TranslationErrorSourceRatio = 0xc4; // float
		constexpr auto ScaleErrorSourceRatio = 0xc8; // float
		constexpr auto MaxErrorPerTrackRatio = 0xcc; // float
		constexpr auto PerturbationProbeSize = 0xd0; // float
	}

	namespace n_UHLLUI_Credits {
		constexpr auto CreditsScroller = 0x230; // UScrollBox*
		constexpr auto AutoScrollSpeed = 0x238; // float
		constexpr auto LeadEmptySpaceHeight = 0x240; // float
		constexpr auto RolesStringTable = 0x248; // UStringTable*
		constexpr auto DepartmentsStringTable = 0x250; // UStringTable*
		constexpr auto CreditsInfo = 0x258; // UDataTable*
		constexpr auto OrganisationInfo = 0x260; // UDataTable*
		constexpr auto OrganisationWidget = 0x268; // UHLLUI_CreditsOrganisation*
		constexpr auto DepartmentWidget = 0x270; // UHLLUI_CreditsCategory_Department*
		constexpr auto RolesAndMembersWidget = 0x278; // UHLLUI_CreditsCategory_RoleAndMembers*
		constexpr auto OrganisationOverrides = 0x280; // TMap<FName, UHLLUI_CreditsOrganisation*>
		constexpr auto DepartmentOverrides = 0x2d0; // TMap<FName, UHLLUI_CreditsCategory_Department*>
		constexpr auto RolesAndMembersOverrides = 0x320; // TMap<FName, UHLLUI_CreditsCategory_RoleAndMembers*>
	}

	namespace n_UMaterialExpressionGetMaterialAttributes {
		constexpr auto MaterialAttributes = 0x40; // FMaterialAttributesInput
		constexpr auto AttributeGetTypes = 0x58; // TArray<FGuid>
	}

	namespace n_UInterpTrackFloatProp {
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_UPaperFlipbookComponent {
		constexpr auto SourceFlipbook = 0x438; // UPaperFlipbook*
		constexpr auto Material = 0x440; // UMaterialInterface*
		constexpr auto PlayRate = 0x448; // float
		constexpr auto bLooping = 0x44c; // char : 1
		constexpr auto bReversePlayback = 0x44c; // char : 1
		constexpr auto bPlaying = 0x44c; // char : 1
		constexpr auto AccumulatedTime = 0x450; // float
		constexpr auto CachedFrameIndex = 0x454; // int32_t
		constexpr auto SpriteColor = 0x458; // FLinearColor
		constexpr auto CachedBodySetup = 0x468; // UBodySetup*
		constexpr auto OnFinishedPlaying = 0x470; // FMulticastInlineDelegate
	}

	namespace n_UHLLAudioVolumeComponent {
		constexpr auto Priority = 0x438; // float
		constexpr auto ReverbSettings = 0x440; // FReverbSettings
		constexpr auto InteriorSettings = 0x460; // FInteriorSettings
		constexpr auto VolumeType = 0x484; // EAudioVolumeType
	}

	namespace n_UAudioSettings {
		constexpr auto DefaultSoundClassName = 0x38; // FSoftObjectPath
		constexpr auto DefaultMediaSoundClassName = 0x50; // FSoftObjectPath
		constexpr auto DefaultSoundConcurrencyName = 0x68; // FSoftObjectPath
		constexpr auto DefaultBaseSoundMix = 0x80; // FSoftObjectPath
		constexpr auto VoiPSoundClass = 0x98; // FSoftObjectPath
		constexpr auto MasterSubmix = 0xb0; // FSoftObjectPath
		constexpr auto ReverbSubmix = 0xc8; // FSoftObjectPath
		constexpr auto EQSubmix = 0xe0; // FSoftObjectPath
		constexpr auto VoiPSampleRate = 0xf8; // EVoiceSampleRate
		constexpr auto DefaultReverbSendLevel = 0xfc; // float
		constexpr auto MaximumConcurrentStreams = 0x100; // int32_t
		constexpr auto GlobalMinPitchScale = 0x104; // float
		constexpr auto GlobalMaxPitchScale = 0x108; // float
		constexpr auto QualityLevels = 0x110; // TArray<FAudioQualitySettings>
		constexpr auto bAllowPlayWhenSilent = 0x120; // char : 1
		constexpr auto bDisableMasterEQ = 0x120; // char : 1
		constexpr auto bAllowCenterChannel3DPanning = 0x120; // char : 1
		constexpr auto NumStoppingSources = 0x124; // uint32_t
		constexpr auto PanningMethod = 0x128; // EPanningMethod
		constexpr auto MonoChannelUpmixMethod = 0x129; // EMonoChannelUpmixMethod
		constexpr auto DialogueFilenameFormat = 0x130; // FString
	}

	namespace n_UW_GH_GameProgress_C {
		constexpr auto Able = 0x230; // UW_GH_GameProgress_Sector_new_C*
		constexpr auto Baker = 0x238; // UW_GH_GameProgress_Sector_new_C*
		constexpr auto Charlie = 0x240; // UW_GH_GameProgress_Sector_new_C*
		constexpr auto Dog = 0x248; // UW_GH_GameProgress_Sector_new_C*
		constexpr auto Easy = 0x250; // UW_GH_GameProgress_Sector_new_C*
		constexpr auto Warning_FinalSectorProgress_Win = 0x258; // bool
		constexpr auto Widget_MainRef = 0x260; // UMain_C*
		constexpr auto Warning_FinalSectorProgress_Lose = 0x268; // bool
	}

	namespace n_USpinBoxWidgetStyle {
		constexpr auto SpinBoxStyle = 0x30; // FSpinBoxStyle
	}

	namespace n_ARadialForceActor {
		constexpr auto ForceComponent = 0x220; // URadialForceComponent*
	}

	namespace n_UHLLUpgradeData {
		constexpr auto UpgradeTime = 0x30; // int32_t
		constexpr auto SuppliesCost = 0x34; // int32_t
		constexpr auto UpgradeText = 0x38; // FText
		constexpr auto UpgradeIcon = 0x50; // FSlateBrush
		constexpr auto ActionScore = 0xd8; // FName
		constexpr auto OwnerActionScore = 0xe0; // FName
		constexpr auto ScoreModifier = 0xe8; // float
		constexpr auto OwnerScoreModifier = 0xec; // float
		constexpr auto MinContributionForScore = 0xf0; // int32_t
		constexpr auto ContributorStatWhenApplied = 0xf4; // EHLLPlayerStat
		constexpr auto OwnerStatWhenApplied = 0xf5; // EHLLPlayerStat
		constexpr auto bApplyToContributors = 0xf6; // char : 1
		constexpr auto bApplyToStructureOwner = 0xf6; // char : 1
		constexpr auto OwnerScoringMethod = 0xf7; // EUpgradeScoringMethod
		constexpr auto AchievementStat = 0xf8; // EHLLAchievementStat
		constexpr auto IncrementAmount = 0xfc; // uint32_t
		constexpr auto MinContributionForAchievement = 0x100; // int32_t
		constexpr auto UpgradeEffectRelativeTransform = 0x110; // FTransform
		constexpr auto UpgradeSound = 0x140; // USoundBase*
		constexpr auto UpgradeParticle = 0x148; // UParticleSystem*
	}

	namespace n_UAITask_MoveTo {
		constexpr auto OnRequestFailed = 0x70; // FMulticastInlineDelegate
		constexpr auto OnMoveFinished = 0x80; // FMulticastInlineDelegate
		constexpr auto MoveRequest = 0x90; // FAIMoveRequest
	}

	namespace n_UPawnAction {
		constexpr auto ChildAction = 0x28; // UPawnAction*
		constexpr auto ParentAction = 0x30; // UPawnAction*
		constexpr auto OwnerComponent = 0x38; // UPawnActionsComponent*
		constexpr auto Instigator = 0x40; // UObject*
		constexpr auto BrainComp = 0x48; // UBrainComponent*
		constexpr auto bAllowNewSameClassInstance = 0x80; // char : 1
		constexpr auto bReplaceActiveSameClassInstance = 0x80; // char : 1
		constexpr auto bShouldPauseMovement = 0x80; // char : 1
		constexpr auto bAlwaysNotifyOnFinished = 0x80; // char : 1
	}

	namespace n_AHLLVehicleWreck {
		constexpr auto DummyRoot = 0x238; // USceneComponent*
		constexpr auto Mesh = 0x240; // UStaticMeshComponent*
		constexpr auto HealthComponent = 0x248; // UHLLSimpleHealthComponent*
		constexpr auto ServerSpawnedTime = 0x250; // float
		constexpr auto ReplacedVehicleActor = 0x258; // AActor*
		constexpr auto Team = 0x260; // ETeam
		constexpr auto ExplosionEffect = 0x268; // AShooterImpactEffect*
		constexpr auto BaseLifespan = 0x270; // float
		constexpr auto WreckReplacementDelay = 0x274; // float
	}

	namespace n_UMaterialExpressionTextureSampleParameter {
		constexpr auto ParameterName = 0xd0; // FName
		constexpr auto ExpressionGUID = 0xd8; // FGuid
		constexpr auto Group = 0xe8; // FName
	}

	namespace n_UVehicleHitComponent {
		constexpr auto DamageType = 0xb0; // UDamageType*
		constexpr auto DirectionThreshold = 0xb8; // float
		constexpr auto MinDamagingSpeedKPH = 0xbc; // float
		constexpr auto Colliders = 0xc0; // TArray<UPrimitiveComponent*>
		constexpr auto PostRemoveIgnoreTime = 0xd0; // float
		constexpr auto CollisionIgnoreList = 0xd8; // TMap<uint32_t, FTimerHandle>
	}

	namespace n_UTileView {
		constexpr auto EntryHeight = 0x368; // float
		constexpr auto EntryWidth = 0x36c; // float
		constexpr auto TileAlignment = 0x370; // EListItemAlignment
		constexpr auto bWrapHorizontalNavigation = 0x371; // bool
	}

	namespace n_ACameraRig_Crane {
		constexpr auto CranePitch = 0x220; // float
		constexpr auto CraneYaw = 0x224; // float
		constexpr auto CraneArmLength = 0x228; // float
		constexpr auto bLockMountPitch = 0x22c; // bool
		constexpr auto bLockMountYaw = 0x22d; // bool
		constexpr auto TransformComponent = 0x230; // USceneComponent*
		constexpr auto CraneYawControl = 0x238; // USceneComponent*
		constexpr auto CranePitchControl = 0x240; // USceneComponent*
		constexpr auto CraneCameraMount = 0x248; // USceneComponent*
	}

	namespace n_ULightmassPrimitiveSettingsObject {
		constexpr auto LightmassSettings = 0x28; // FLightmassPrimitiveSettings
	}

	namespace n_USoundAttenuation {
		constexpr auto Attenuation = 0x28; // FSoundAttenuationSettings
	}

	namespace n_UAISense_Hearing {
		constexpr auto NoiseEvents = 0x80; // TArray<FAINoiseEvent>
		constexpr auto SpeedOfSoundSq = 0x90; // float
	}

	namespace n_UMaterialExpressionMaterialProxyReplace {
		constexpr auto Realtime = 0x40; // FExpressionInput
		constexpr auto MaterialProxy = 0x54; // FExpressionInput
	}

	namespace n_UPoseWatch {
		constexpr auto Node = 0x28; // UEdGraphNode*
		constexpr auto PoseWatchColour = 0x30; // FColor
	}

	namespace n_UTankDriverSeatUI {
		constexpr auto RPMSmoothingAlpha = 0x280; // float
		constexpr auto IdleRPM = 0x284; // float
		constexpr auto SpeedSmoothingAlpha = 0x290; // float
		constexpr auto DriverWeaponInfo = 0x298; // UHLLArmourWeaponUI*
		constexpr auto Speedometer = 0x2a0; // UHLLDial_Speedometer*
		constexpr auto Tachometer = 0x2a8; // UHLLDial_Tachometer*
		constexpr auto EngineProgressPanel = 0x2b0; // UPanelWidget*
		constexpr auto EngineProgressTextSwitcher = 0x2b8; // UWidgetSwitcher*
		constexpr auto Starting = 0x2c0; // UTextBlock*
		constexpr auto Stopping = 0x2c8; // UTextBlock*
		constexpr auto EngineProgressWheel = 0x2d0; // UImage*
		constexpr auto EngineKeyText = 0x2d8; // URichTextBlock*
		constexpr auto GearKeyText = 0x2e0; // URichTextBlock*
		constexpr auto HullMGBorder = 0x2e8; // UBorder*
		constexpr auto HullMGReticle = 0x2f0; // UImage*
	}

	namespace n_AGameState {
		constexpr auto MatchState = 0x270; // FName
		constexpr auto PreviousMatchState = 0x278; // FName
		constexpr auto ElapsedTime = 0x280; // int32_t
	}

	namespace n_USubmixEffectSubmixEQPreset {
		constexpr auto Settings = 0x78; // FSubmixEffectSubmixEQSettings
	}

	namespace n_UNavigationQueryFilter {
		constexpr auto Areas = 0x28; // TArray<FNavigationFilterArea>
		constexpr auto IncludeFlags = 0x38; // FNavigationFilterFlags
		constexpr auto ExcludeFlags = 0x3c; // FNavigationFilterFlags
	}

	namespace n_ANavSystemConfigOverride {
		constexpr auto NavigationSystemConfig = 0x220; // UNavigationSystemConfig*
		constexpr auto OverridePolicy = 0x228; // ENavSystemOverridePolicy
		constexpr auto bLoadOnClient = 0x229; // char : 1
	}

	namespace n_UEndMatchCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UOverlaySlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_USoundEffectSourcePresetChain {
		constexpr auto Chain = 0x28; // TArray<FSourceEffectChainEntry>
		constexpr auto bPlayEffectChainTails = 0x38; // char : 1
	}

	namespace n_UTurretControllerComponent2 {
		constexpr auto TurretBoneName = 0x488; // FName
		constexpr auto BarrelBoneName = 0x490; // FName
		constexpr auto MinTurretRotationScale = 0x498; // float
		constexpr auto GunnerSeat = 0x4a8; // ATankGunnerSeat*
		constexpr auto YawAudio = 0x4b0; // UAudioComponent*
		constexpr auto PitchAudio = 0x4b8; // UAudioComponent*
		constexpr auto CharacterMovementBarrierTurret = 0x4c0; // UStaticMeshComponent*
		constexpr auto CharacterMovementBarrierBarrel = 0x4c8; // UStaticMeshComponent*
		constexpr auto YawVibrationController = 0x4d0; // UVibrationEventController*
		constexpr auto PitchVibrationController = 0x4d8; // UVibrationEventController*
	}

	namespace n_UShadowMapTexture2D {
		constexpr auto ShadowmapFlags = 0xe8; // EShadowMapFlags
	}

	namespace n_UMovieSceneEnumSection {
		constexpr auto EnumCurve = 0xe0; // FMovieSceneByteChannel
	}

	namespace n_AAudioVolume {
		constexpr auto Priority = 0x258; // float
		constexpr auto bEnabled = 0x25c; // char : 1
		constexpr auto Settings = 0x260; // FReverbSettings
		constexpr auto AmbientZoneSettings = 0x280; // FInteriorSettings
	}

	namespace n_UDeploymentLogic {
		constexpr auto OnPlayerPlatoonChanged = 0xb0; // FMulticastInlineDelegate
		constexpr auto OnPlatoonMembersChanged = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnCreatePlatoonSucceeded = 0xd0; // FMulticastInlineDelegate
		constexpr auto OnCreatePlatoonFailed = 0xe0; // FMulticastInlineDelegate
		constexpr auto OnPlayerPlatoonJoined = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnPlayerInitiatedLeavingPlatoon = 0x100; // FMulticastInlineDelegate
	}

	namespace n_UHLLRoundSummary {
		constexpr auto FinaleState = 0x230; // EMatchFinaleState
		constexpr auto CachedMatchInfo = 0x234; // FHLLMatchEndInfo
		constexpr auto Anim_InitialMatchEnd = 0x248; // UWidgetAnimation*
		constexpr auto Anim_SwitchPage = 0x250; // UWidgetAnimation*
		constexpr auto Anim_MatchTimerOvertimeLoop = 0x258; // UWidgetAnimation*
		constexpr auto WinTeamText = 0x268; // UTextBlock*
		constexpr auto WinStateText = 0x270; // UTextBlock*
		constexpr auto MatchTimeText = 0x278; // UTextBlock*
		constexpr auto WinTeamBackground = 0x280; // UImage*
		constexpr auto LeftTeam = 0x288; // UHLLRoundSummaryTeam*
		constexpr auto RightTeam = 0x290; // UHLLRoundSummaryTeam*
		constexpr auto ContentSwitcher = 0x298; // UWidgetSwitcher*
		constexpr auto ScoreboardSlot = 0x2a0; // UNamedSlot*
		constexpr auto Scoreboard = 0x2a8; // UHLLRoundSummaryDetails*
		constexpr auto ProgressionClass = 0x2b0; // UHLLRoundSummaryProgression*
		constexpr auto ProgressionSlot = 0x2b8; // UNamedSlot*
		constexpr auto Progression = 0x2c0; // UHLLRoundSummaryProgression*
		constexpr auto MusicDuckMix = 0x2c8; // USoundMix*
		constexpr auto ServerNameText = 0x2d0; // UTextBlock*
		constexpr auto ModeAndMapText = 0x2d8; // UTextBlock*
		constexpr auto MatchEndAC = 0x2e0; // TWeakObjectPtr<UAudioComponent>
	}

	namespace n_UGameViewportClient {
		constexpr auto ViewportConsole = 0x40; // UConsole*
		constexpr auto DebugProperties = 0x48; // TArray<FDebugDisplayProperty>
		constexpr auto MaxSplitscreenPlayers = 0x68; // int32_t
		constexpr auto World = 0x78; // UWorld*
		constexpr auto GameInstance = 0x80; // UGameInstance*
	}

	namespace n_UInAppPurchaseQueryCallbackProxy2 {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_USlateWidgetStyleAsset {
		constexpr auto CustomStyle = 0x28; // USlateWidgetStyleContainerBase*
	}

	namespace n_UMainMenuWidget_V2_C {
		constexpr auto UberGraphFrame = 0x238; // FPointerToUberGraphFrame
		constexpr auto Title_Fade = 0x240; // UWidgetAnimation*
		constexpr auto Intro_Fade = 0x248; // UWidgetAnimation*
		constexpr auto Barracks = 0x250; // UWGT_BarracksPanel_V2_C*
		constexpr auto Browser = 0x258; // UWGT_ServerBrowser_V2_C*
		constexpr auto CopyrightNotice = 0x260; // UTextBlock*
		constexpr auto Credits = 0x268; // UWGT_Credits_V2_C*
		constexpr auto EnlistSwitcher = 0x270; // UWidgetSwitcher*
		constexpr auto HowToPlayScreen = 0x278; // UW_Menu_HTP_V2_C*
		constexpr auto Image = 0x280; // UImage*
		constexpr auto Image_2 = 0x288; // UImage*
		constexpr auto Image_3 = 0x290; // UImage*
		constexpr auto Image_4 = 0x298; // UImage*
		constexpr auto Image_5 = 0x2a0; // UImage*
		constexpr auto Image_6 = 0x2a8; // UImage*
		constexpr auto Image_7 = 0x2b0; // UImage*
		constexpr auto Image_8 = 0x2b8; // UImage*
		constexpr auto Main = 0x2c0; // UWidgetSwitcher*
		constexpr auto MainMenuNavigationScreen = 0x2c8; // UMainMenuNavigationScreen_V2_C*
		constexpr auto MainMenuVerticalNavigationScreen = 0x2d0; // UMainMenuVerticalNavigationScreen_C*
		constexpr auto MatchmakingScreen = 0x2d8; // UMatchmakingScreen_V2_C*
		constexpr auto MenuBG = 0x2e0; // UOverlay*
		constexpr auto MenuBGBlur = 0x2e8; // UBackgroundBlur*
		constexpr auto MenuBGDarken = 0x2f0; // UImage*
		constexpr auto NavHeader = 0x2f8; // UVerticalBox*
		constexpr auto NavHeaderStart = 0x300; // UVerticalBox*
		constexpr auto OptionsScreen = 0x308; // UOptionsScreen_V2_C*
		constexpr auto PageDescription = 0x310; // UTextBlock*
		constexpr auto PageDescription_2 = 0x318; // UTextBlock*
		constexpr auto PageTitleText = 0x320; // UTextBlock*
		constexpr auto PageTitleText_2 = 0x328; // UTextBlock*
		constexpr auto PanelSwitcher = 0x330; // UWidgetSwitcher*
		constexpr auto RootBorder = 0x338; // UBorder*
		constexpr auto SocialGrid = 0x340; // UUniformGridPanel*
		constexpr auto StartScreen = 0x348; // UStartScreen_V2_C*
		constexpr auto StartScreenBG = 0x350; // UImage*
		constexpr auto TitleSwitcher = 0x358; // UWidgetSwitcher*
		constexpr auto TitleSwitcher_2 = 0x360; // UWidgetSwitcher*
		constexpr auto VivoxLogoImage = 0x368; // UImage*
		constexpr auto ManageClutter = 0x370; // FMulticastInlineDelegate
		constexpr auto ServerListRows = 0x380; // TArray<UObject*>
		constexpr auto OriginalPingColumnSize = 0x390; // float
		constexpr auto SelectedServerListRow = 0x398; // UObject*
		constexpr auto NumAxisPlayers = 0x3a0; // int32_t
		constexpr auto NumAlliesPlayers = 0x3a4; // int32_t
		constexpr auto LastRefreshTime = 0x3a8; // FDateTime
		constexpr auto MinDelayBetweenRefreshesSeconds = 0x3b0; // FTimespan
		constexpr auto CurrentPage = 0x3b8; // MenuPage
		constexpr auto SelectedDescription = 0x3c0; // TArray<FText>
		constexpr auto NavButtons = 0x3d0; // TArray<UbtnNav_V2_C*>
		constexpr auto BackDelegate = 0x3e0; // FMulticastInlineDelegate
		constexpr auto PreviousPage = 0x3f0; // MenuPage
		constexpr auto StartScreenAnimationClass = 0x3f8; // TSoftClassPtr<UObject>
	}

	namespace n_UPhysicsAsset {
		constexpr auto BoundsBodies = 0x30; // TArray<int32_t>
		constexpr auto SkeletalBodySetups = 0x40; // TArray<USkeletalBodySetup*>
		constexpr auto ConstraintSetup = 0x50; // TArray<UPhysicsConstraintTemplate*>
		constexpr auto SolverIterations = 0x60; // FSolverIterations
		constexpr auto bNotForDedicatedServer = 0x78; // char : 1
		constexpr auto ThumbnailInfo = 0x120; // UThumbnailInfo*
		constexpr auto BodySetup = 0x128; // TArray<UBodySetup*>
	}

	namespace n_ASkyLight {
		constexpr auto LightComponent = 0x220; // USkyLightComponent*
		constexpr auto bEnabled = 0x228; // char : 1
	}

	namespace n_UClothPhysicalMeshDataNv_Legacy {
		constexpr auto MaxDistances = 0xe0; // TArray<float>
		constexpr auto BackstopDistances = 0xf0; // TArray<float>
		constexpr auto BackstopRadiuses = 0x100; // TArray<float>
		constexpr auto AnimDriveMultipliers = 0x110; // TArray<float>
	}

	namespace n_AGameModeBase {
		constexpr auto OptionsString = 0x220; // FString
		constexpr auto GameSessionClass = 0x230; // AGameSession*
		constexpr auto GameStateClass = 0x238; // AGameStateBase*
		constexpr auto PlayerControllerClass = 0x240; // APlayerController*
		constexpr auto PlayerStateClass = 0x248; // APlayerState*
		constexpr auto HUDClass = 0x250; // AHUD*
		constexpr auto DefaultPawnClass = 0x258; // APawn*
		constexpr auto SpectatorClass = 0x260; // ASpectatorPawn*
		constexpr auto ReplaySpectatorPlayerControllerClass = 0x268; // APlayerController*
		constexpr auto ServerStatReplicatorClass = 0x270; // AServerStatReplicator*
		constexpr auto GameSession = 0x278; // AGameSession*
		constexpr auto GameState = 0x280; // AGameStateBase*
		constexpr auto ServerStatReplicator = 0x288; // AServerStatReplicator*
		constexpr auto DefaultPlayerName = 0x290; // FText
		constexpr auto bUseSeamlessTravel = 0x2a8; // char : 1
		constexpr auto bStartPlayersAsSpectators = 0x2a8; // char : 1
		constexpr auto bPauseable = 0x2a8; // char : 1
	}

	namespace n_UMaterialExpressionAtmosphericFogColor {
		constexpr auto WorldPosition = 0x40; // FExpressionInput
	}

	namespace n_UMovieSceneSkeletalAnimationSection {
		constexpr auto Params = 0xe0; // FMovieSceneSkeletalAnimationParams
		constexpr auto AnimSequence = 0x1b8; // UAnimSequence*
		constexpr auto Animation = 0x1c0; // UAnimSequenceBase*
		constexpr auto StartOffset = 0x1c8; // float
		constexpr auto EndOffset = 0x1cc; // float
		constexpr auto PlayRate = 0x1d0; // float
		constexpr auto bReverse = 0x1d4; // char : 1
		constexpr auto SlotName = 0x1d8; // FName
	}

	namespace n_UHLLDeploymentMap {
		constexpr auto OnSpawnPointSelectionChanged = 0x460; // FMulticastInlineDelegate
		constexpr auto SpawnPoints = 0x470; // TArray<UHLLMapIconBase*>
	}

	namespace n_UMaterialExpressionSingleLayerWaterMaterialOutput {
		constexpr auto ScatteringCoefficients = 0x40; // FExpressionInput
		constexpr auto AbsorptionCoefficients = 0x54; // FExpressionInput
		constexpr auto PhaseG = 0x68; // FExpressionInput
	}

	namespace n_UCreateSessionCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_AShooterWeapon_Repair {
		constexpr auto TimeBetweenRepairs = 0x8b8; // float
		constexpr auto RepairPerSecond = 0x8bc; // int32_t
		constexpr auto RepairRange = 0x8c0; // float
		constexpr auto RepairActionScoreInterval = 0x8c4; // char
		constexpr auto RepairActionScore = 0x8c8; // FName
		constexpr auto SurfaceParticle = 0x8d0; // UParticleSystem*
		constexpr auto SurfaceSound = 0x8d8; // USoundBase*
		constexpr auto RepairPSC = 0x8e0; // UParticleSystemComponent*
		constexpr auto RepairASC = 0x8e8; // UAudioComponent*
		constexpr auto CurrentRepairTarget = 0x8f0; // TWeakObjectPtr<UHLLArmourHealthComponent>
		constexpr auto LastRepairTime = 0x8f8; // float
		constexpr auto RepairCounter = 0x8fc; // int32_t
		constexpr auto WeldVibrationEventController = 0x900; // UVibrationEventController*
	}

	namespace n_UHLLDamageIndicator {
		constexpr auto DirectionalDamageBrush = 0x230; // FSlateBrush
		constexpr auto FlashDamageBrush = 0x2b8; // FSlateBrush
		constexpr auto OffsetFromCenter = 0x340; // float
		constexpr auto bStickyIndicators = 0x344; // char : 1
		constexpr auto DirectionalIndicatorFadeCurve = 0x348; // UCurveFloat*
		constexpr auto FlashIndicatorFadeCurve = 0x350; // UCurveFloat*
		constexpr auto RootPanel = 0x358; // UCanvasPanel*
	}

	namespace n_UMovieScene2DTransformSection {
		constexpr auto TransformMask = 0xe0; // FMovieScene2DTransformMask
		constexpr auto Translation = 0xe8; // FMovieSceneFloatChannel [0x2]
		constexpr auto Rotation = 0x228; // FMovieSceneFloatChannel
		constexpr auto Scale = 0x2c8; // FMovieSceneFloatChannel [0x2]
		constexpr auto Shear = 0x408; // FMovieSceneFloatChannel [0x2]
	}

	namespace n_AHLLArmourWeapon_ReconGun {
		constexpr auto ScannedAreaInterpSpeed = 0x470; // float
		constexpr auto ScannedAreaRadius = 0x474; // float
		constexpr auto ScanObjectTypes = 0x478; // TArray<EObjectTypeQuery>
		constexpr auto FadeOutDuration = 0x488; // float
		constexpr auto ReconAreaMesh = 0x490; // UStaticMesh*
		constexpr auto ReconAreaMaterial = 0x498; // UMaterial*
		constexpr auto ReconAreaSphereMID = 0x4a0; // UMaterialInstanceDynamic*
		constexpr auto ReconAreaVisualsComponent = 0x4a8; // UStaticMeshComponent*
		constexpr auto ShotLocation = 0x4b0; // FVector
	}

	namespace n_UMovieSceneCinematicShotSection {
		constexpr auto ShotDisplayName = 0x158; // FString
		constexpr auto DisplayName = 0x168; // FText
	}

	namespace n_UCompositeDataTable {
		constexpr auto ParentTables = 0xc8; // TArray<UDataTable*>
		constexpr auto OldParentTables = 0xd8; // TArray<UDataTable*>
	}

	namespace n_UGameEngine {
		constexpr auto MaxDeltaTime = 0xde0; // float
		constexpr auto ServerFlushLogInterval = 0xde4; // float
		constexpr auto GameInstance = 0xde8; // UGameInstance*
	}

	namespace n_AHUD {
		constexpr auto PlayerOwner = 0x220; // APlayerController*
		constexpr auto bLostFocusPaused = 0x228; // char : 1
		constexpr auto bShowHUD = 0x228; // char : 1
		constexpr auto bShowDebugInfo = 0x228; // char : 1
		constexpr auto CurrentTargetIndex = 0x22c; // int32_t
		constexpr auto bShowHitBoxDebugInfo = 0x230; // char : 1
		constexpr auto bShowOverlays = 0x230; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x230; // char : 1
		constexpr auto PostRenderedActors = 0x238; // TArray<AActor*>
		constexpr auto DebugDisplay = 0x250; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x260; // TArray<FName>
		constexpr auto Canvas = 0x270; // UCanvas*
		constexpr auto DebugCanvas = 0x278; // UCanvas*
		constexpr auto DebugTextList = 0x280; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x290; // AActor*
		constexpr auto ShowDebugTargetActor = 0x298; // AActor*
	}

	namespace n_UHLLMapTooltip_Marker {
		constexpr auto MapIconScaleBox = 0x260; // UScaleBox*
		constexpr auto TooltipName = 0x268; // UTextBlock*
		constexpr auto PlacedInfo = 0x270; // UTextBlock*
		constexpr auto Description = 0x278; // UTextBlock*
		constexpr auto VisibilityInfo = 0x280; // UTextBlock*
		constexpr auto TooltipDistance = 0x288; // UTextBlock*
		constexpr auto Countdown = 0x290; // UTextBlock*
		constexpr auto ClickToRemove = 0x298; // UTextBlock*
		constexpr auto TooltipIcon = 0x2a0; // UImage*
	}

	namespace n_AShooterGameMode {
		constexpr auto BotPawnClass = 0x308; // APawn*
		constexpr auto AxisPlayerPawnClass = 0x310; // APawn*
		constexpr auto AlliesPlayerPawnClass = 0x318; // APawn*
		constexpr auto AdminCameraClass = 0x320; // AHLLAdminCamera*
		constexpr auto WarmupTime = 0x334; // int32_t
		constexpr auto RoundTime = 0x338; // int32_t
		constexpr auto SectorCaptureTime = 0x33c; // int32_t
		constexpr auto SectorCaptureProtectionTime = 0x340; // int32_t
		constexpr auto DeathScore = 0x34c; // int32_t
		constexpr auto MaxBots = 0x350; // int32_t
		constexpr auto BotControllers = 0x358; // TArray<AShooterAIController*>
		constexpr auto m_deployedPlayerControllers = 0x3a8; // TSet<AController*>
		constexpr auto m_pendingDeployments = 0x3f8; // TArray<UPendingPlayerDeployment*>
		constexpr auto LevelPickups = 0x408; // TArray<AShooterPickup*>
		constexpr auto m_AnalyticsServer = 0x428; // UHLL_AnalyticsServer*
		constexpr auto XP_ScoreModifiers = 0x44c; // FScoreXPModifiers
		constexpr auto MatchWinMultiplier = 0x45c; // float
		constexpr auto MatchLossMultiplier = 0x460; // float
		constexpr auto XPPerMatchMinute = 0x464; // int32_t
		constexpr auto BonusMultiplierPerCommendation = 0x468; // float
		constexpr auto MinMatchTimeForXP = 0x46c; // int32_t
		constexpr auto ActionScoreTable = 0x470; // UDataTable*
		constexpr auto GlobalScoreModifier = 0x478; // float
		constexpr auto RoleModifiers = 0x47c; // FHLLRoleModifiers [0xe]
		constexpr auto FinaleTimer = 0x4ec; // int32_t
		constexpr auto FinaleState = 0x4f0; // EMatchFinaleState
		constexpr auto TimeFinished = 0x4f8; // FDateTime
		constexpr auto FinaleTime_EndScreen = 0x500; // int32_t
		constexpr auto FinaleTime_Commendations = 0x504; // int32_t
		constexpr auto FinaleTime_ProgressionAndGroupPhoto = 0x508; // int32_t
		constexpr auto MaximumPunishTime = 0x50c; // float
		constexpr auto TurnBackAreas = 0x510; // TArray<AHLLTurnBackVolume*>
	}

	namespace n_UMaterialExpressionWorldPosition {
		constexpr auto WorldPositionShaderOffset = 0x40; // EWorldPositionIncludedOffsets
	}

	namespace n_UParticleModuleAccelerationDragScaleOverLife {
		constexpr auto DragScale = 0x38; // UDistributionFloat*
		constexpr auto DragScaleRaw = 0x40; // FRawDistributionFloat
	}

	namespace n_UWGT_RoleCategory_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto ItemsSlot = 0x238; // UNamedSlot*
		constexpr auto Title = 0x240; // UTextBlock*
		constexpr auto PlatoonType = 0x248; // EPlatoonType
	}

	namespace n_UAsyncActionHandleSaveGame {
		constexpr auto Completed = 0x30; // FMulticastInlineDelegate
		constexpr auto SaveGameObject = 0x60; // USaveGame*
	}

	namespace n_UUserInterfaceSettings {
		constexpr auto RenderFocusRule = 0x38; // ERenderFocusRule
		constexpr auto HardwareCursors = 0x40; // TMap<EMouseCursor, FHardwareCursorReference>
		constexpr auto SoftwareCursors = 0x90; // TMap<EMouseCursor, FSoftClassPath>
		constexpr auto DefaultCursor = 0xe0; // FSoftClassPath
		constexpr auto TextEditBeamCursor = 0xf8; // FSoftClassPath
		constexpr auto CrosshairsCursor = 0x110; // FSoftClassPath
		constexpr auto HandCursor = 0x128; // FSoftClassPath
		constexpr auto GrabHandCursor = 0x140; // FSoftClassPath
		constexpr auto GrabHandClosedCursor = 0x158; // FSoftClassPath
		constexpr auto SlashedCircleCursor = 0x170; // FSoftClassPath
		constexpr auto ApplicationScale = 0x188; // float
		constexpr auto UIScaleRule = 0x18c; // EUIScalingRule
		constexpr auto CustomScalingRuleClass = 0x190; // FSoftClassPath
		constexpr auto UIScaleCurve = 0x1a8; // FRuntimeFloatCurve
		constexpr auto bAllowHighDPIInGameMode = 0x230; // bool
		constexpr auto bLoadWidgetsOnDedicatedServer = 0x231; // bool
		constexpr auto CursorClasses = 0x238; // TArray<UObject*>
		constexpr auto CustomScalingRuleClassInstance = 0x248; // UObject*
		constexpr auto CustomScalingRule = 0x250; // UDPICustomScalingRule*
	}

	namespace n_AHLLAbility_SpawnVehicle {
		constexpr auto VehicleClass = 0x370; // AActor*
		constexpr auto bLimitTotalCountPerTeam = 0x378; // char : 1
		constexpr auto MaxTotalCountPerTeam = 0x379; // char
	}

	namespace n_UShowLoginUICallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UWeapon_C {
		constexpr auto A_NameFlash = 0x230; // UWidgetAnimation*
		constexpr auto ammo = 0x238; // UTextBlock*
		constexpr auto AmmoHBox = 0x240; // UHorizontalBox*
		constexpr auto Image_2 = 0x248; // UImage*
		constexpr auto WeaponName = 0x250; // UTextBlock*
	}

	namespace n_UEnvQueryGenerator_OnCircle {
		constexpr auto CircleRadius = 0x80; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0xb8; // FAIDataProviderFloatValue
		constexpr auto NumberOfPoints = 0xf0; // FAIDataProviderIntValue
		constexpr auto PointOnCircleSpacingMethod = 0x128; // EPointOnCircleSpacingMethod
		constexpr auto ArcDirection = 0x130; // FEnvDirection
		constexpr auto ArcAngle = 0x150; // FAIDataProviderFloatValue
		constexpr auto AngleRadians = 0x188; // float
		constexpr auto CircleCenter = 0x190; // UEnvQueryContext*
		constexpr auto bIgnoreAnyContextActorsWhenGeneratingCircle = 0x198; // bool
		constexpr auto CircleCenterZOffset = 0x1a0; // FAIDataProviderFloatValue
		constexpr auto TraceData = 0x1d8; // FEnvTraceData
		constexpr auto bDefineArc = 0x208; // char : 1
	}

	namespace n_AShooterPlayerController_Menu {
		constexpr auto bIsZoomedIn = 0x580; // char : 1
		constexpr auto ZoomOutTime = 0x584; // float
		constexpr auto ZoomInTime = 0x588; // float
		constexpr auto BlendMode = 0x58c; // EViewTargetBlendFunction
		constexpr auto BlendPower = 0x590; // float
		constexpr auto MainMenuWidget = 0x598; // UHLLMainMenuBase*
		constexpr auto MainViewCamera = 0x5a0; // ACameraActor*
		constexpr auto ZoomedViewCamera = 0x5a8; // ACameraActor*
		constexpr auto ViewportClient = 0x5b0; // UShooterGameViewportClient*
	}

	namespace n_UMovieSceneEventTriggerSection {
		constexpr auto EventChannel = 0xe0; // FMovieSceneEventChannel
	}

	namespace n_UWindDirectionalSourceComponent {
		constexpr auto Strength = 0x1f0; // float
		constexpr auto Speed = 0x1f4; // float
		constexpr auto MinGustAmount = 0x1f8; // float
		constexpr auto MaxGustAmount = 0x1fc; // float
		constexpr auto Radius = 0x200; // float
		constexpr auto bPointWind = 0x204; // char : 1
	}

	namespace n_UMaterialExpressionFunctionOutput {
		constexpr auto OutputName = 0x40; // FName
		constexpr auto Description = 0x48; // FString
		constexpr auto SortPriority = 0x58; // int32_t
		constexpr auto A = 0x5c; // FExpressionInput
		constexpr auto bLastPreviewed = 0x70; // char : 1
		constexpr auto ID = 0x74; // FGuid
	}

	namespace n_USeatCameraController {
		constexpr auto PitchMin = 0xc0; // float
		constexpr auto PitchMax = 0xc4; // float
		constexpr auto PitchRate = 0xc8; // float
		constexpr auto bLimitYaw = 0xcc; // char : 1
		constexpr auto YawMin = 0xd0; // float
		constexpr auto YawMax = 0xd4; // float
		constexpr auto YawRate = 0xd8; // float
	}

	namespace n_UVOIPTalker {
		constexpr auto Settings = 0xb0; // FVoiceSettings
	}

	namespace n_UDeviceProfile {
		constexpr auto DeviceType = 0x38; // FString
		constexpr auto BaseProfileName = 0x48; // FString
		constexpr auto Parent = 0x58; // UObject*
		constexpr auto CVars = 0x78; // TArray<FString>
	}

	namespace n_UHLLAimAssistSettingsDataAsset {
		constexpr auto AimAssistActiveFOVAngle = 0x30; // float
		constexpr auto AimAssistActiveFOVAngleRadians = 0x34; // float
		constexpr auto AimAssistActiveFOVAngleCosValue = 0x38; // float
		constexpr auto bActivateForUnprotectedVehicleOccupants = 0x3c; // bool
		constexpr auto LastRenderTimeThreshhold = 0x40; // float
		constexpr auto LineOfSightChannel = 0x44; // ECollisionChannel
		constexpr auto AimAssistDistanceSettings = 0x48; // TArray<FHLLAimAssistDistanceSettings>
	}

	namespace n_UMaterialExpressionLandscapeGrassOutput {
		constexpr auto GrassTypes = 0x40; // TArray<FGrassInput>
	}

	namespace n_AHLLSatchelCharge {
		constexpr auto SatchelMesh = 0x3b0; // UStaticMeshComponent*
		constexpr auto DetonationTimeSeconds = 0x3b8; // char
		constexpr auto ServerTimeAtDetonation = 0x3bc; // float
		constexpr auto HitQueryProfile = 0x3c0; // FCollisionProfileName
		constexpr auto TH_SatchelDetonate = 0x3c8; // FTimerHandle
	}

	namespace n_UReplicationGraph {
		constexpr auto ReplicationConnectionManagerClass = 0x28; // UNetReplicationGraphConnection*
		constexpr auto NetDriver = 0x30; // UNetDriver*
		constexpr auto Connections = 0x38; // TArray<UNetReplicationGraphConnection*>
		constexpr auto PendingConnections = 0x48; // TArray<UNetReplicationGraphConnection*>
		constexpr auto GlobalGraphNodes = 0x98; // TArray<UReplicationGraphNode*>
		constexpr auto PrepareForReplicationNodes = 0xa8; // TArray<UReplicationGraphNode*>
	}

	namespace n_UHLLUI_LoadoutEntry {
		constexpr auto CachedEntry = 0x230; // FLoadoutEntry
		constexpr auto ItemName = 0x248; // UTextBlock*
		constexpr auto ItemAmmoCount = 0x250; // UTextBlock*
		constexpr auto ItemAmmoIcon = 0x258; // UImage*
		constexpr auto ItemIcon = 0x260; // UImage*
	}

	namespace n_UHLLArmourMaterial {
		constexpr auto ArmourProperties = 0x80; // FHLLArmourSpec
	}

	namespace n_UInvalidationBox {
		constexpr auto bCanCache = 0x120; // bool
		constexpr auto CacheRelativeTransforms = 0x121; // bool
	}

	namespace n_UHLLMapAbilityData {
		constexpr auto Abilities = 0x30; // TArray<FAbilityDefinition>
	}

	namespace n_UDeviceProfileManager {
		constexpr auto Profiles = 0x28; // TArray<UObject*>
	}

	namespace n_UHLLVehicleFXComponent {
		constexpr auto ActiveDustTrails = 0xb0; // TMap<FName, FActiveDustTrail>
		constexpr auto VehicleMesh = 0x100; // USkeletalMeshComponent*
		constexpr auto DustTrailData = 0x178; // UDataTable*
		constexpr auto DustTrails = 0x180; // TMap<FName, FName>
		constexpr auto TrailSearchDistance = 0x1d0; // float
		constexpr auto TrailCullDistance = 0x1d4; // float
		constexpr auto TrailMinSpeed = 0x1d8; // float
		constexpr auto TrailProjectionDepth = 0x1dc; // float
		constexpr auto ExhaustSockets = 0x1e0; // TSet<FName>
		constexpr auto ExhaustTemplate = 0x230; // UParticleSystem*
		constexpr auto BackfireTemplate = 0x238; // UParticleSystem*
		constexpr auto BackfireSound = 0x240; // USoundBase*
		constexpr auto ActiveExhaustFX = 0x248; // TSet<UParticleSystemComponent*>
		constexpr auto RPMDropForBackfire = 0x298; // float
		constexpr auto BackfireChance = 0x29c; // float
		constexpr auto MinTimeBetweenBackfires = 0x2a0; // float
		constexpr auto SpawnMaxRPM = 0x2a4; // float
		constexpr auto SpawnMaxRate = 0x2a8; // float
		constexpr auto CollisionEffect = 0x2b0; // AShooterImpactEffect*
		constexpr auto MinTimeBetweenImpacts = 0x2b8; // float
		constexpr auto MinImpactEffectStrength = 0x2bc; // float
		constexpr auto MinVelocForImpactEffect = 0x2c0; // float
	}

	namespace n_UBTDecorator_KeepInCone {
		constexpr auto ConeHalfAngle = 0x68; // float
		constexpr auto ConeOrigin = 0x70; // FBlackboardKeySelector
		constexpr auto Observed = 0x98; // FBlackboardKeySelector
		constexpr auto bUseSelfAsOrigin = 0xc0; // char : 1
		constexpr auto bUseSelfAsObserved = 0xc0; // char : 1
	}

	namespace n_UMaterialExpressionDecalMipmapLevel {
		constexpr auto TextureSize = 0x40; // FExpressionInput
		constexpr auto ConstWidth = 0x54; // float
		constexpr auto ConstHeight = 0x58; // float
	}

	namespace n_UMaterialExpressionNormalize {
		constexpr auto VectorInput = 0x40; // FExpressionInput
	}

	namespace n_UHLLDeathScreen {
		constexpr auto SpawnTime = 0x238; // float
		constexpr auto RespawnDelay = 0x23c; // float
		constexpr auto DeathInfo = 0x240; // FDeathInfo
		constexpr auto FadeInAnimation = 0x260; // UWidgetAnimation*
		constexpr auto TeamKillBox = 0x268; // UHorizontalBox*
		constexpr auto TeamKillMessage = 0x270; // UTextBlock*
		constexpr auto PunishMessage = 0x278; // UTextBlock*
		constexpr auto RespawnInfo = 0x280; // FText
		constexpr auto RedeployButton = 0x298; // UButton*
		constexpr auto ButtonText = 0x2a0; // FText
	}

	namespace n_AGameMode {
		constexpr auto MatchState = 0x2c0; // FName
		constexpr auto bDelayedStart = 0x2c8; // char : 1
		constexpr auto NumSpectators = 0x2cc; // int32_t
		constexpr auto NumPlayers = 0x2d0; // int32_t
		constexpr auto NumBots = 0x2d4; // int32_t
		constexpr auto MinRespawnDelay = 0x2d8; // float
		constexpr auto NumTravellingPlayers = 0x2dc; // int32_t
		constexpr auto EngineMessageClass = 0x2e0; // ULocalMessage*
		constexpr auto InactivePlayerArray = 0x2e8; // TArray<APlayerState*>
		constexpr auto InactivePlayerStateLifeSpan = 0x2f8; // float
		constexpr auto MaxInactivePlayers = 0x2fc; // int32_t
		constexpr auto bHandleDedicatedServerReplays = 0x300; // bool
	}

	namespace n_UInterpTrackColorProp {
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_UFindTurnBasedMatchCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UPaperTerrainComponent {
		constexpr auto TerrainMaterial = 0x410; // UPaperTerrainMaterial*
		constexpr auto bClosedSpline = 0x418; // bool
		constexpr auto bFilledSpline = 0x419; // bool
		constexpr auto AssociatedSpline = 0x420; // UPaperTerrainSplineComponent*
		constexpr auto RandomSeed = 0x428; // int32_t
		constexpr auto SegmentOverlapAmount = 0x42c; // float
		constexpr auto TerrainColor = 0x430; // FLinearColor
		constexpr auto ReparamStepsPerSegment = 0x440; // int32_t
		constexpr auto SpriteCollisionDomain = 0x444; // ESpriteCollisionMode
		constexpr auto CollisionThickness = 0x448; // float
		constexpr auto CachedBodySetup = 0x450; // UBodySetup*
	}

	namespace n_ACameraShakeSourceActor {
		constexpr auto CameraShakeSourceComponent = 0x220; // UCameraShakeSourceComponent*
	}

	namespace n_ASplineMeshActor {
		constexpr auto SplineMeshComponent = 0x220; // USplineMeshComponent*
	}

	namespace n_UMaterialExpressionSceneTexture {
		constexpr auto Coordinates = 0x40; // FExpressionInput
		constexpr auto SceneTextureId = 0x54; // ESceneTextureId
		constexpr auto bFiltered = 0x55; // bool
	}

	namespace n_USphereReflectionCaptureComponent {
		constexpr auto InfluenceRadius = 0x268; // float
		constexpr auto CaptureDistanceScale = 0x26c; // float
		constexpr auto PreviewInfluenceRadius = 0x270; // UDrawSphereComponent*
	}

	namespace n_UBlackboardKeyType_NativeEnum {
		constexpr auto EnumName = 0x30; // FString
		constexpr auto EnumType = 0x40; // UEnum*
	}

	namespace n_UHLLResourceStatus {
		constexpr auto StatusMode = 0x230; // EHLLResourceStatusMode
		constexpr auto NodeMode = 0x231; // EHLLResourceStatusMode
		constexpr auto StatusTeam = 0x232; // ETeam
		constexpr auto UnknownText = 0x238; // FText
		constexpr auto Manpower = 0x250; // UTextBlock*
		constexpr auto Fuel = 0x258; // UTextBlock*
		constexpr auto Munitions = 0x260; // UTextBlock*
		constexpr auto ManpowerNodes = 0x268; // UTextBlock*
		constexpr auto FuelNodes = 0x270; // UTextBlock*
		constexpr auto MunitionsNodes = 0x278; // UTextBlock*
	}

	namespace n_AReplicationGraphDebugActor {
		constexpr auto ReplicationGraph = 0x220; // UReplicationGraph*
		constexpr auto ConnectionManager = 0x228; // UNetReplicationGraphConnection*
	}

	namespace n_UPaperTileSet {
		constexpr auto TileSize = 0x28; // FIntPoint
		constexpr auto TileSheet = 0x30; // UTexture2D*
		constexpr auto AdditionalSourceTextures = 0x38; // TArray<UTexture*>
		constexpr auto BorderMargin = 0x48; // FIntMargin
		constexpr auto PerTileSpacing = 0x58; // FIntPoint
		constexpr auto DrawingOffset = 0x60; // FIntPoint
		constexpr auto WidthInTiles = 0x68; // int32_t
		constexpr auto HeightInTiles = 0x6c; // int32_t
		constexpr auto AllocatedWidth = 0x70; // int32_t
		constexpr auto AllocatedHeight = 0x74; // int32_t
		constexpr auto PerTileData = 0x78; // TArray<FPaperTileMetadata>
		constexpr auto Terrains = 0x88; // TArray<FPaperTileSetTerrain>
		constexpr auto TileWidth = 0x98; // int32_t
		constexpr auto TileHeight = 0x9c; // int32_t
		constexpr auto Margin = 0xa0; // int32_t
		constexpr auto Spacing = 0xa4; // int32_t
	}

	namespace n_UInterpToMovementComponent {
		constexpr auto Duration = 0xf0; // float
		constexpr auto bPauseOnImpact = 0xf4; // char : 1
		constexpr auto bSweep = 0xf8; // bool
		constexpr auto TeleportType = 0xf9; // ETeleportType
		constexpr auto BehaviourType = 0xfa; // EInterpToBehaviourType
		constexpr auto bCheckIfStillInWorld = 0xfb; // bool
		constexpr auto bForceSubStepping = 0xfc; // char : 1
		constexpr auto OnInterpToReverse = 0x100; // FMulticastInlineDelegate
		constexpr auto OnInterpToStop = 0x110; // FMulticastInlineDelegate
		constexpr auto OnWaitBeginDelegate = 0x120; // FMulticastInlineDelegate
		constexpr auto OnWaitEndDelegate = 0x130; // FMulticastInlineDelegate
		constexpr auto OnResetDelegate = 0x140; // FMulticastInlineDelegate
		constexpr auto MaxSimulationTimeStep = 0x150; // float
		constexpr auto MaxSimulationIterations = 0x154; // int32_t
		constexpr auto ControlPoints = 0x158; // TArray<FInterpControlPoint>
	}

	namespace n_UAnimCompress {
		constexpr auto bNeedsSkeleton = 0x38; // char : 1
		constexpr auto TranslationCompressionFormat = 0x3c; // AnimationCompressionFormat
		constexpr auto RotationCompressionFormat = 0x3d; // AnimationCompressionFormat
		constexpr auto ScaleCompressionFormat = 0x3e; // AnimationCompressionFormat
	}

	namespace n_UMaterialExpressionTextureBase {
		constexpr auto Texture = 0x40; // UTexture*
		constexpr auto SamplerType = 0x48; // EMaterialSamplerType
		constexpr auto IsDefaultMeshpaintTexture = 0x49; // char : 1
	}

	namespace n_UEnvQueryGenerator_ActorsOfClass {
		constexpr auto SearchedActorClass = 0x50; // AActor*
		constexpr auto GenerateOnlyActorsInRadius = 0x58; // FAIDataProviderBoolValue
		constexpr auto SearchRadius = 0x90; // FAIDataProviderFloatValue
		constexpr auto SearchCenter = 0xc8; // UEnvQueryContext*
	}

	namespace n_UMaterialExpressionSceneColor {
		constexpr auto InputMode = 0x40; // EMaterialSceneAttributeInputMode
		constexpr auto Input = 0x44; // FExpressionInput
		constexpr auto OffsetFraction = 0x58; // FExpressionInput
		constexpr auto ConstInput = 0x6c; // FVector2D
	}

	namespace n_UHLLReconDataComponent {
		constexpr auto DataExpireTime = 0xb0; // float
		constexpr auto AxisReconData = 0xb8; // FReconDataContainer
		constexpr auto AlliedReconData = 0x1d0; // FReconDataContainer
	}

	namespace n_UIntSerialization {
		constexpr auto UnsignedInt16Variable = 0x28; // uint16_t
		constexpr auto UnsignedInt32Variable = 0x2c; // uint32_t
		constexpr auto UnsignedInt64Variable = 0x30; // uint64_t
		constexpr auto SignedInt8Variable = 0x38; // int8_t
		constexpr auto SignedInt16Variable = 0x3a; // int16_t
		constexpr auto SignedInt64Variable = 0x40; // int64_t
		constexpr auto UnsignedInt8Variable = 0x48; // char
		constexpr auto SignedInt32Variable = 0x4c; // int32_t
	}

	namespace n_UHLLUseContext_EnterSeat {
		constexpr auto IconImage = 0x238; // UImage*
		constexpr auto RadialProg = 0x240; // UImage*
		constexpr auto DisplayText = 0x248; // URichTextBlock*
	}

	namespace n_UHLLUpgradeData_Structure {
		constexpr auto UpgradeMesh = 0x150; // UStaticMesh*
	}

	namespace n_AVehicleSeatBase {
		constexpr auto bOnlyAllowSameUnitMembers = 0x970; // char : 1
	}

	namespace n_AShooterPlayerState {
		constexpr auto OnRoleChanged = 0x340; // FMulticastInlineDelegate
		constexpr auto OnTeamChanged = 0x350; // FMulticastInlineDelegate
		constexpr auto OnPlatoonChanged = 0x360; // FMulticastInlineDelegate
		constexpr auto OutpostBuildTimer = 0x374; // float
		constexpr auto NumKills = 0x378; // int32_t
		constexpr auto NumDeaths = 0x37c; // int32_t
		constexpr auto bQuitter = 0x380; // char : 1
		constexpr auto m_lastOutpostBuildTime = 0x384; // float
		constexpr auto m_lastSpawnObject = 0x388; // UObject*
		constexpr auto bPendingPlatoonKickOnDeath = 0x390; // char : 1
		constexpr auto ScoreData = 0x394; // FHLLPlayerScoreData
		constexpr auto LastPawnRestartTime = 0x400; // float
		constexpr auto MatchStatsTracker = 0x408; // UHLLPlayerStats*
		constexpr auto LastTeamSwitchTime = 0x45c; // float
		constexpr auto PlayerLevel = 0x464; // uint16_t
		constexpr auto RepPlayerInfo = 0x468; // FHLLPlayerInfo
		constexpr auto RequestedCosmetics_Character = 0x498; // FCharacterCosmeticProfile
		constexpr auto RequestedLoadout_Character = 0x4b0; // char
		constexpr auto NumCommendationsReceived = 0x4b1; // char
		constexpr auto OnMarkerAddedOrUpdated = 0x4b8; // FMulticastInlineDelegate
		constexpr auto OnMarkerRemoved = 0x4c8; // FMulticastInlineDelegate
		constexpr auto RepMarkerInfo = 0x4e8; // FRepMarkerInfo
		constexpr auto PlayingState = 0x738; // EPlayingState
		constexpr auto NumPunishments = 0x739; // char
		constexpr auto AccruedPunishTime = 0x73c; // float
		constexpr auto OnSharedAmmoRegenStarted = 0x740; // FMulticastInlineDelegate
		constexpr auto OnSharedAmmoRegenComplete = 0x750; // FMulticastInlineDelegate
		constexpr auto AmmoRegenStartSound = 0x760; // USoundBase*
		constexpr auto AmmoRegenSound = 0x768; // USoundBase*
		constexpr auto DefaultAmmoRegenTime = 0x770; // float
		constexpr auto SharedAmmo = 0x774; // FHLLSharedAmmoData
		constexpr auto ClanTag = 0x7b8; // FString
		constexpr auto NextAvailableVoteTime_Instigator = 0x7c8; // float
		constexpr auto NextAvailableVoteTime_Target = 0x7cc; // float
		constexpr auto bVoteKickImmune = 0x7d0; // char : 1
	}

	namespace n_AAnimationTests {
		constexpr auto CharacterBP = 0x220; // AShooterCharacterT1*
		constexpr auto ADS = 0x228; // bool
		constexpr auto Crouch = 0x229; // bool
		constexpr auto GoProne = 0x22a; // bool
		constexpr auto ForwardPauseBackwardSpawn = 0x230; // ATargetPoint*
		constexpr auto ForwardBackwardSpawn = 0x238; // ATargetPoint*
		constexpr auto SprintForwardBackwardPauseSpawn = 0x240; // ATargetPoint*
		constexpr auto SprintForwardBackwardNoPauseSpawn = 0x248; // ATargetPoint*
		constexpr auto WalkingLeftRightNoPauseSpawn = 0x250; // ATargetPoint*
		constexpr auto WalkingLeftRightPauseSpawn = 0x258; // ATargetPoint*
		constexpr auto TurningSpawn = 0x260; // ATargetPoint*
		constexpr auto StandCrouchSpawn = 0x268; // ATargetPoint*
		constexpr auto CrouchProneSpawn = 0x270; // ATargetPoint*
		constexpr auto StandProneSpawn = 0x278; // ATargetPoint*
		constexpr auto StandADSSpawn = 0x280; // ATargetPoint*
		constexpr auto CrouchADSSpawn = 0x288; // ATargetPoint*
		constexpr auto ProneADSSpawn = 0x290; // ATargetPoint*
		constexpr auto BoltCycleStandSpawn = 0x298; // ATargetPoint*
		constexpr auto BoltCycleCrouchSpawn = 0x2a0; // ATargetPoint*
		constexpr auto BoltCycleProneSpawn = 0x2a8; // ATargetPoint*
		constexpr auto ForwardPauseBackwardChar = 0x2b0; // AShooterCharacterT1*
		constexpr auto ForwardBackwardChar = 0x2b8; // AShooterCharacterT1*
		constexpr auto SprintForwardBackwardPauseChar = 0x2c0; // AShooterCharacterT1*
		constexpr auto SprintForwardBackwardNoPauseChar = 0x2c8; // AShooterCharacterT1*
		constexpr auto WalkingLeftRightNoPauseChar = 0x2d0; // AShooterCharacterT1*
		constexpr auto WalkingLeftRightPauseChar = 0x2d8; // AShooterCharacterT1*
		constexpr auto TurningChar = 0x2e0; // AShooterCharacterT1*
		constexpr auto StandCrouchChar = 0x2e8; // AShooterCharacterT1*
		constexpr auto CrouchProneChar = 0x2f0; // AShooterCharacterT1*
		constexpr auto StandProneChar = 0x2f8; // AShooterCharacterT1*
		constexpr auto StandADSChar = 0x300; // AShooterCharacterT1*
		constexpr auto CrouchADSChar = 0x308; // AShooterCharacterT1*
		constexpr auto ProneADSChar = 0x310; // AShooterCharacterT1*
		constexpr auto BoltCycleStandChar = 0x318; // AShooterCharacterT1*
		constexpr auto BoltCycleCrouchChar = 0x320; // AShooterCharacterT1*
		constexpr auto BoltCycleProneChar = 0x328; // AShooterCharacterT1*
	}

	namespace n_AHLLCommanderAbility_ReconPlane {
		constexpr auto bLOSCheck = 0x3b8; // char : 1
		constexpr auto ScanObjectTypes = 0x3c0; // TArray<EObjectTypeQuery>
		constexpr auto LOSChannel = 0x3d0; // ECollisionChannel
		constexpr auto DistanceBetweenScans = 0x3d4; // float
		constexpr auto ScanRadius = 0x3d8; // float
	}

	namespace n_UAIAsyncTaskBlueprintProxy {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFail = 0x38; // FMulticastInlineDelegate
	}

	namespace n_UTextLayoutWidget {
		constexpr auto ShapedTextOptions = 0x108; // FShapedTextOptions
		constexpr auto Justification = 0x10b; // ETextJustify
		constexpr auto WrappingPolicy = 0x10c; // ETextWrappingPolicy
		constexpr auto AutoWrapText = 0x10d; // char : 1
		constexpr auto WrapTextAt = 0x110; // float
		constexpr auto Margin = 0x114; // FMargin
		constexpr auto LineHeightPercentage = 0x124; // float
	}

	namespace n_UMovieSceneSequence {
		constexpr auto PrecompiledEvaluationTemplate = 0x50; // FMovieSceneEvaluationTemplate
		constexpr auto DefaultCompletionMode = 0x340; // EMovieSceneCompletionMode
		constexpr auto bParentContextsAreSignificant = 0x341; // bool
		constexpr auto bPlayableDirectly = 0x342; // bool
	}

	namespace n_UBPW_PlatoonManagementStack_KickRequest_V2_C {
		constexpr auto UberGraphFrame = 0x290; // FPointerToUberGraphFrame
		constexpr auto Button_Cancel = 0x298; // UbtnSimple_V2_C*
		constexpr auto Button_MakingRoomForFriend = 0x2a0; // UbtnSimple_V2_C*
		constexpr auto Button_NotCommunicating = 0x2a8; // UbtnSimple_V2_C*
		constexpr auto Button_NotWithOfficer = 0x2b0; // UbtnSimple_V2_C*
	}

	namespace n_APaperTerrainActor {
		constexpr auto DummyRoot = 0x220; // USceneComponent*
		constexpr auto SplineComponent = 0x228; // UPaperTerrainSplineComponent*
		constexpr auto RenderComponent = 0x230; // UPaperTerrainComponent*
	}

	namespace n_UWGT_RadialChat_Base_V2_C {
		constexpr auto UberGraphFrame = 0x338; // FPointerToUberGraphFrame
		constexpr auto BackgroundBlur_63 = 0x340; // UBackgroundBlur*
	}

	namespace n_UBPW_PlatoonListItem_V2_C {
		constexpr auto UberGraphFrame = 0x2a8; // FPointerToUberGraphFrame
		constexpr auto Expand = 0x2b0; // UWidgetAnimation*
		constexpr auto Artillery = 0x2b8; // UButton*
		constexpr auto ButtonSwitcher = 0x2c0; // UWidgetSwitcher*
		constexpr auto Clear = 0x2c8; // UButton*
		constexpr auto Defensive = 0x2d0; // UButton*
		constexpr auto HBox_UnitDesignationSelection = 0x2d8; // UHorizontalBox*
		constexpr auto Invite = 0x2e0; // UButton*
		constexpr auto JoinButton = 0x2e8; // UBPW_HoverTintedImageButton_V2_C*
		constexpr auto LeaveButton = 0x2f0; // UBPW_HoverTintedImageButton_V2_C*
		constexpr auto LockChecker = 0x2f8; // UCheckBox*
		constexpr auto Logistics = 0x300; // UButton*
		constexpr auto MicChecker = 0x308; // UCheckBox*
		constexpr auto Offensive = 0x310; // UButton*
		constexpr auto UnitDesignationContainer = 0x318; // UHorizontalBox*
		constexpr auto UnitDesignationExpander = 0x320; // UWGT_UnitDesignationButton_C*
		constexpr auto TooltipWidgetRef = 0x328; // UW_HoverToolTip_C*
		constexpr auto bUnitDesExpanded = 0x330; // bool
		constexpr auto CheckerStyle = 0x338; // FCheckBoxStyle
		constexpr auto InvertedCheckerStyle = 0x8b8; // FCheckBoxStyle
		constexpr auto DeploymentScreen = 0xe38; // UDeploymentScreen_V2_C*
		constexpr auto ParentPlatoonList = 0xe40; // UBPW_PlatoonList_V2_C*
	}

	namespace n_UComboButtonWidgetStyle {
		constexpr auto ComboButtonStyle = 0x30; // FComboButtonStyle
	}

	namespace n_UHLLDispenserListItem_StructureBase {
		constexpr auto ItemCost = 0x250; // UTextBlock*
	}

	namespace n_AARSharedWorldGameState {
		constexpr auto PreviewImageData = 0x290; // TArray<char>
		constexpr auto ARWorldData = 0x2a0; // TArray<char>
		constexpr auto PreviewImageBytesTotal = 0x2b0; // int32_t
		constexpr auto ARWorldBytesTotal = 0x2b4; // int32_t
		constexpr auto PreviewImageBytesDelivered = 0x2b8; // int32_t
		constexpr auto ARWorldBytesDelivered = 0x2bc; // int32_t
	}

	namespace n_ULandscapeInfo {
		constexpr auto LandscapeActor = 0x28; // LazyObjectProperty
		constexpr auto LandscapeGuid = 0x44; // FGuid
		constexpr auto ComponentSizeQuads = 0x54; // int32_t
		constexpr auto SubsectionSizeQuads = 0x58; // int32_t
		constexpr auto ComponentNumSubsections = 0x5c; // int32_t
		constexpr auto DrawScale = 0x60; // FVector
		constexpr auto Proxies = 0x110; // TArray<ALandscapeStreamingProxy*>
	}

	namespace n_AShooterImpactEffect {
		constexpr auto bHitSurfaceSet = 0x220; // char : 1
		constexpr auto HitSurface = 0x224; // FHitResult
		constexpr auto DecalProjectionDepth = 0x2ac; // float
		constexpr auto SurfaceSearchDepth = 0x2b0; // float
		constexpr auto bFindComplexSurface = 0x2b4; // char : 1
		constexpr auto bOrientToSurface = 0x2b4; // char : 1
		constexpr auto bSearchInWorldSpace = 0x2b4; // char : 1
		constexpr auto SurfaceSearchAxis = 0x2b5; // EAxis
		constexpr auto bAttachDecals = 0x2b6; // char : 1
		constexpr auto bDecalsUseRelevancy = 0x2b6; // char : 1
		constexpr auto DecalRelevancyDistance = 0x2b8; // float
		constexpr auto DecalFadeScreenSize = 0x2bc; // float
		constexpr auto SurfaceEffects = 0x2c0; // FSurfaceVFX
		constexpr auto SurfaceSounds = 0x418; // FSurfaceSounds
		constexpr auto SurfaceDecals = 0x570; // FSurfaceDecals
		constexpr auto SpawnedPC = 0x830; // UParticleSystemComponent*
		constexpr auto SpawnedAC = 0x838; // UAudioComponent*
		constexpr auto SpawnedDC = 0x840; // UDecalComponent*
	}

	namespace n_UWidgetInteractionComponent {
		constexpr auto OnHoveredWidgetChanged = 0x1f0; // FMulticastInlineDelegate
		constexpr auto VirtualUserIndex = 0x210; // int32_t
		constexpr auto PointerIndex = 0x214; // float
		constexpr auto TraceChannel = 0x218; // ECollisionChannel
		constexpr auto InteractionDistance = 0x21c; // float
		constexpr auto InteractionSource = 0x220; // EWidgetInteractionSource
		constexpr auto bEnableHitTesting = 0x221; // bool
		constexpr auto bShowDebug = 0x222; // bool
		constexpr auto DebugColor = 0x224; // FLinearColor
		constexpr auto CustomHitResult = 0x2b0; // FHitResult
		constexpr auto LocalHitLocation = 0x338; // FVector2D
		constexpr auto LastLocalHitLocation = 0x340; // FVector2D
		constexpr auto HoveredWidgetComponent = 0x348; // UWidgetComponent*
		constexpr auto LastHitResult = 0x350; // FHitResult
		constexpr auto bIsHoveredWidgetInteractable = 0x3d8; // bool
		constexpr auto bIsHoveredWidgetFocusable = 0x3d9; // bool
		constexpr auto bIsHoveredWidgetHitTestVisible = 0x3da; // bool
	}

	namespace n_ALevelSequenceActor {
		constexpr auto PlaybackSettings = 0x230; // FMovieSceneSequencePlaybackSettings
		constexpr auto SequencePlayer = 0x248; // ULevelSequencePlayer*
		constexpr auto LevelSequence = 0x250; // FSoftObjectPath
		constexpr auto AdditionalEventReceivers = 0x268; // TArray<AActor*>
		constexpr auto CameraSettings = 0x278; // FLevelSequenceCameraSettings
		constexpr auto BurnInOptions = 0x280; // ULevelSequenceBurnInOptions*
		constexpr auto BindingOverrides = 0x288; // UMovieSceneBindingOverrides*
		constexpr auto bAutoPlay = 0x290; // char : 1
		constexpr auto bOverrideInstanceData = 0x290; // char : 1
		constexpr auto bReplicatePlayback = 0x290; // char : 1
		constexpr auto DefaultInstanceData = 0x298; // UObject*
		constexpr auto BurnInInstance = 0x2a0; // ULevelSequenceBurnIn*
		constexpr auto bShowBurnin = 0x2a8; // bool
	}

	namespace n_ULevelStreamingDynamic {
		constexpr auto bInitiallyLoaded = 0x148; // char : 1
		constexpr auto bInitiallyVisible = 0x148; // char : 1
	}

	namespace n_UFontFace {
		constexpr auto SourceFilename = 0x30; // FString
		constexpr auto Hinting = 0x40; // EFontHinting
		constexpr auto LoadingPolicy = 0x41; // EFontLoadingPolicy
		constexpr auto LayoutMethod = 0x42; // EFontLayoutMethod
	}

	namespace n_UPawnAction_Wait {
		constexpr auto TimeToWait = 0x98; // float
	}

	namespace n_UHLLUI_ServerBrowserItem {
		constexpr auto ServerBrowser = 0x230; // TWeakObjectPtr<UHLLUI_ServerBrowser>
		constexpr auto ItemIndex = 0x238; // int32_t
		constexpr auto LongServerNameScrollSpeed = 0x23c; // float
		constexpr auto FavouriteToggle = 0x240; // UCheckBox*
		constexpr auto ServerThumbnail = 0x248; // UImage*
		constexpr auto ServerName = 0x250; // UTextBlock*
		constexpr auto PlayerCount = 0x258; // UTextBlock*
		constexpr auto MaxPlayerCount = 0x260; // UTextBlock*
		constexpr auto Ping = 0x268; // UTextBlock*
		constexpr auto MapName = 0x270; // UTextBlock*
		constexpr auto ModeName = 0x278; // UTextBlock*
		constexpr auto OffensiveModeAttackingFaction = 0x280; // UTextBlock*
		constexpr auto PasswordWidget = 0x288; // UWidget*
		constexpr auto LongNameScroller = 0x290; // UScrollBox*
		constexpr auto LastTimePlayedText = 0x298; // UTextBlock*
		constexpr auto HistoryClearButton = 0x2a0; // UButton*
	}

	namespace n_UHLLOverviewMap {
		constexpr auto MapIcons = 0x248; // TArray<UHLLMapIconBase*>
		constexpr auto IconFilters = 0x284; // int32_t
		constexpr auto bHighlightLocked = 0x288; // char : 1
		constexpr auto HighlightedIcon = 0x290; // UHLLMapIconBase*
		constexpr auto RootPanel = 0x298; // UCanvasPanel*
		constexpr auto MapImage = 0x2a0; // UHLLScrollZoom*
		constexpr auto IconPanel = 0x2a8; // UCanvasPanel*
		constexpr auto ZoomText = 0x2b0; // UTextBlock*
		constexpr auto FriendlySectorBrush = 0x2b8; // FSlateBrush
		constexpr auto EnemySectorBrush = 0x340; // FSlateBrush
		constexpr auto NeutralSectorBrush = 0x3c8; // FSlateBrush
		constexpr auto SelectedIcon = 0x450; // TWeakObjectPtr<UHLLMapIconBase>
	}

	namespace n_UPawnSensingComponent {
		constexpr auto HearingThreshold = 0xb0; // float
		constexpr auto LOSHearingThreshold = 0xb4; // float
		constexpr auto SightRadius = 0xb8; // float
		constexpr auto SensingInterval = 0xbc; // float
		constexpr auto HearingMaxSoundAge = 0xc0; // float
		constexpr auto bEnableSensingUpdates = 0xc4; // char : 1
		constexpr auto bOnlySensePlayers = 0xc4; // char : 1
		constexpr auto bSeePawns = 0xc4; // char : 1
		constexpr auto bHearNoises = 0xc4; // char : 1
		constexpr auto OnSeePawn = 0xd0; // FMulticastInlineDelegate
		constexpr auto OnHearNoise = 0xe0; // FMulticastInlineDelegate
		constexpr auto PeripheralVisionAngle = 0xf0; // float
		constexpr auto PeripheralVisionCosine = 0xf4; // float
	}

	namespace n_UPaperSprite {
		constexpr auto AdditionalSourceTextures = 0x38; // TArray<UTexture*>
		constexpr auto BakedSourceUV = 0x48; // FVector2D
		constexpr auto BakedSourceDimension = 0x50; // FVector2D
		constexpr auto BakedSourceTexture = 0x58; // UTexture2D*
		constexpr auto DefaultMaterial = 0x60; // UMaterialInterface*
		constexpr auto AlternateMaterial = 0x68; // UMaterialInterface*
		constexpr auto Sockets = 0x70; // TArray<FPaperSpriteSocket>
		constexpr auto SpriteCollisionDomain = 0x80; // ESpriteCollisionMode
		constexpr auto PixelsPerUnrealUnit = 0x84; // float
		constexpr auto BodySetup = 0x88; // UBodySetup*
		constexpr auto AlternateMaterialSplitIndex = 0x90; // int32_t
		constexpr auto BakedRenderData = 0x98; // TArray<FVector4>
	}

	namespace n_AARSharedWorldGameMode {
		constexpr auto BufferSizePerChunk = 0x308; // int32_t
	}

	namespace n_UMRMeshComponent {
		constexpr auto Material = 0x418; // UMaterialInterface*
		constexpr auto bCreateMeshProxySections = 0x420; // bool
		constexpr auto bUpdateNavMeshOnMeshUpdate = 0x421; // bool
		constexpr auto bNeverCreateCollisionMesh = 0x422; // bool
		constexpr auto CachedBodySetup = 0x428; // UBodySetup*
		constexpr auto BodySetups = 0x430; // TArray<UBodySetup*>
		constexpr auto WireframeMaterial = 0x440; // UMaterialInterface*
	}

	namespace n_UWGT_LoadoutOption_V2_C {
		constexpr auto UberGraphFrame = 0x2d8; // FPointerToUberGraphFrame
		constexpr auto Hover = 0x2e0; // UWidgetAnimation*
		constexpr auto LockIcon = 0x2e8; // UImage*
		constexpr auto RootButton = 0x2f0; // UButton*
		constexpr auto SelectBorder = 0x2f8; // UBorder*
		constexpr auto bFocus = 0x300; // bool
		constexpr auto OnCreateConfirmButton = 0x308; // FMulticastInlineDelegate
		constexpr auto LockIcon = 0x318; // UImage*
	}

	namespace n_UApplicationLifecycleComponent {
		constexpr auto ApplicationWillDeactivateDelegate = 0xb0; // FMulticastInlineDelegate
		constexpr auto ApplicationHasReactivatedDelegate = 0xc0; // FMulticastInlineDelegate
		constexpr auto ApplicationWillEnterBackgroundDelegate = 0xd0; // FMulticastInlineDelegate
		constexpr auto ApplicationHasEnteredForegroundDelegate = 0xe0; // FMulticastInlineDelegate
		constexpr auto ApplicationWillTerminateDelegate = 0xf0; // FMulticastInlineDelegate
		constexpr auto ApplicationShouldUnloadResourcesDelegate = 0x100; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedStartupArgumentsDelegate = 0x110; // FMulticastInlineDelegate
		constexpr auto OnTemperatureChangeDelegate = 0x120; // FMulticastInlineDelegate
		constexpr auto OnLowPowerModeDelegate = 0x130; // FMulticastInlineDelegate
	}

	namespace n_UTextureLODSettings {
		constexpr auto TextureLODGroups = 0x28; // TArray<FTextureLODGroup>
	}

	namespace n_UBaseCompassIndicator {
		constexpr auto bShouldShowOffscreen = 0x230; // bool
		constexpr auto OpaqueDistance = 0x234; // float
		constexpr auto TransparentDistance = 0x238; // float
		constexpr auto Alignment = 0x23c; // FVector2D
		constexpr auto bOnScreen = 0x244; // char : 1
		constexpr auto NormalisedPosition = 0x248; // float
	}

	namespace n_UHLLAmmoDepotIndicator {
		constexpr auto ReplenishBorder = 0x2a8; // UBorder*
	}

	namespace n_UPlayerManagementButtonBP_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto btn = 0x238; // UButton*
		constexpr auto SB_ROOT = 0x240; // USizeBox*
		constexpr auto txt_btn_Label = 0x248; // UTextBlock*
		constexpr auto ButtonLabel = 0x250; // FText
		constexpr auto Clicked = 0x268; // FMulticastInlineDelegate
		constexpr auto CustomSize = 0x278; // bool
		constexpr auto Height = 0x27c; // float
		constexpr auto Width = 0x280; // float
		constexpr auto Uppercase = 0x284; // bool
		constexpr auto Font = 0x288; // FSlateFontInfo
		constexpr auto FontColor = 0x2d8; // FSlateColor
		constexpr auto ButtonStyle = 0x300; // FButtonStyle
		constexpr auto FontColorHover = 0x578; // FSlateColor
		constexpr auto Hovered = 0x5a0; // FMulticastInlineDelegate
		constexpr auto Unhovered = 0x5b0; // FMulticastInlineDelegate
		constexpr auto FocusedButtonStyle = 0x5c0; // FButtonStyle
		constexpr auto bPressed = 0x838; // bool
		constexpr auto bIsCreateUnitButton = 0x839; // bool
	}

	namespace n_UIndicator_Medic_C {
		constexpr auto Image_1 = 0x2b8; // UImage*
	}

	namespace n_ASpectatorBeaconClient {
		constexpr auto DestSessionId = 0x2e0; // FString
		constexpr auto PendingReservation = 0x2f0; // FSpectatorReservation
		constexpr auto RequestType = 0x368; // ESpectatorClientRequestType
		constexpr auto bPendingReservationSent = 0x369; // bool
		constexpr auto bCancelReservation = 0x36a; // bool
	}

	namespace n_UPlayer {
		constexpr auto PlayerController = 0x30; // APlayerController*
		constexpr auto CurrentNetSpeed = 0x38; // int32_t
		constexpr auto ConfiguredInternetSpeed = 0x3c; // int32_t
		constexpr auto ConfiguredLanSpeed = 0x40; // int32_t
	}

	namespace n_UMovieSceneComponentMaterialTrack {
		constexpr auto MaterialIndex = 0x68; // int32_t
	}

	namespace n_UGameInstance {
		constexpr auto LocalPlayers = 0x38; // TArray<ULocalPlayer*>
		constexpr auto OnlineSession = 0x48; // UOnlineSession*
		constexpr auto ReferencedObjects = 0x50; // TArray<UObject*>
	}

	namespace n_UMovieSceneIntegerSection {
		constexpr auto IntegerCurve = 0xe0; // FMovieSceneIntegerChannel
	}

	namespace n_UMenuAnchor {
		constexpr auto MenuClass = 0x120; // UUserWidget*
		constexpr auto OnGetMenuContentEvent = 0x128; // FDelegate
		constexpr auto Placement = 0x138; // EMenuPlacement
		constexpr auto bFitInWindow = 0x139; // bool
		constexpr auto ShouldDeferPaintingAfterWindowContent = 0x13a; // bool
		constexpr auto UseApplicationMenuStack = 0x13b; // bool
		constexpr auto OnMenuOpenChanged = 0x140; // FMulticastInlineDelegate
	}

	namespace n_UWGT_Disclaimer_tipColumn_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto FadeIn = 0x238; // UWidgetAnimation*
		constexpr auto img_icon = 0x240; // UImage*
		constexpr auto rtxt_Description = 0x248; // URichTextBlock*
		constexpr auto txt_label = 0x250; // UTextBlock*
		constexpr auto IconImage = 0x258; // FSlateBrush
		constexpr auto LabelText = 0x2e0; // FText
		constexpr auto DescriptionText = 0x2f8; // FText
	}

	namespace n_APartyBeaconHost {
		constexpr auto State = 0x248; // UPartyBeaconState*
		constexpr auto bLogoutOnSessionTimeout = 0x2b0; // bool
		constexpr auto SessionTimeoutSecs = 0x2b4; // float
		constexpr auto TravelSessionTimeoutSecs = 0x2b8; // float
	}

	namespace n_UInAppPurchaseRestoreCallbackProxy2 {
		constexpr auto OnSuccess = 0x28; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x38; // FMulticastInlineDelegate
	}

	namespace n_UBTService_BlackboardBase {
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_AHLLVehicleSpawner_PrePlaced {
		constexpr auto SpawnData = 0x258; // TMap<ETeam, FDataTableRowHandle>
		constexpr auto bIgnoreSectorControl = 0x2a8; // char : 1
		constexpr auto MostRecentlySpawnedVehicle = 0x2ac; // TWeakObjectPtr<AActor>
	}

	namespace n_UWidgetAnimation {
		constexpr auto MovieScene = 0x348; // UMovieScene*
		constexpr auto AnimationBindings = 0x350; // TArray<FWidgetAnimationBinding>
		constexpr auto bLegacyFinishOnStop = 0x360; // bool
		constexpr auto DisplayLabel = 0x368; // FString
	}

	namespace n_UTexture2D {
		constexpr auto LevelIndex = 0xb8; // int32_t
		constexpr auto FirstResourceMemMip = 0xbc; // int32_t
		constexpr auto bTemporarilyDisableStreaming = 0xc0; // char : 1
		constexpr auto AddressX = 0xc1; // TextureAddress
		constexpr auto AddressY = 0xc2; // TextureAddress
		constexpr auto ImportedSize = 0xc4; // FIntPoint
	}

	namespace n_UAnimSharingInstance {
		constexpr auto RegisteredActors = 0x28; // TArray<AActor*>
		constexpr auto StateProcessor = 0xa8; // UAnimationSharingStateProcessor*
		constexpr auto UsedAnimationSequences = 0xe8; // TArray<UAnimSequence*>
		constexpr auto StateEnum = 0x108; // UEnum*
		constexpr auto SharingActor = 0x110; // AActor*
	}

	namespace n_UIpNetDriver {
		constexpr auto LogPortUnreach = 0x748; // char : 1
		constexpr auto AllowPlayerPortUnreach = 0x748; // char : 1
		constexpr auto MaxPortCountToTry = 0x74c; // uint32_t
		constexpr auto ServerDesiredSocketReceiveBufferBytes = 0x75c; // uint32_t
		constexpr auto ServerDesiredSocketSendBufferBytes = 0x760; // uint32_t
		constexpr auto ClientDesiredSocketReceiveBufferBytes = 0x764; // uint32_t
		constexpr auto ClientDesiredSocketSendBufferBytes = 0x768; // uint32_t
		constexpr auto MaxSecondsInReceive = 0x770; // double
		constexpr auto NbPacketsBetweenReceiveTimeTest = 0x778; // int32_t
		constexpr auto ResolutionConnectionTimeout = 0x77c; // float
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureOutput {
		constexpr auto BaseColor = 0x40; // FExpressionInput
		constexpr auto Specular = 0x54; // FExpressionInput
		constexpr auto Roughness = 0x68; // FExpressionInput
		constexpr auto Normal = 0x7c; // FExpressionInput
		constexpr auto WorldHeight = 0x90; // FExpressionInput
		constexpr auto Opacity = 0xa4; // FExpressionInput
		constexpr auto Mask = 0xb8; // FExpressionInput
	}

	namespace n_UBaseMediaSource {
		constexpr auto PlayerName = 0x80; // FName
	}

	namespace n_UHLLBinoWidget {
		constexpr auto RangeAnim = 0x250; // UWidgetAnimation*
	}

	namespace n_USceneCaptureComponent2D {
		constexpr auto ProjectionType = 0x288; // ECameraProjectionMode
		constexpr auto FOVAngle = 0x28c; // float
		constexpr auto OrthoWidth = 0x290; // float
		constexpr auto TextureTarget = 0x298; // UTextureRenderTarget2D*
		constexpr auto CompositeMode = 0x2a0; // ESceneCaptureCompositeMode
		constexpr auto PostProcessSettings = 0x2b0; // FPostProcessSettings
		constexpr auto PostProcessBlendWeight = 0x7f0; // float
		constexpr auto bOverride_CustomNearClippingPlane = 0x7f4; // char : 1
		constexpr auto CustomNearClippingPlane = 0x7f8; // float
		constexpr auto bUseCustomProjectionMatrix = 0x7fc; // bool
		constexpr auto CustomProjectionMatrix = 0x800; // FMatrix
		constexpr auto bEnableClipPlane = 0x840; // bool
		constexpr auto ClipPlaneBase = 0x844; // FVector
		constexpr auto ClipPlaneNormal = 0x850; // FVector
		constexpr auto bCameraCutThisFrame = 0x85c; // char : 1
		constexpr auto bConsiderUnrenderedOpaquePixelAsFullyTranslucent = 0x85c; // char : 1
		constexpr auto bDisableFlipCopyGLES = 0x860; // bool
	}

	namespace n_UBPW_Army_V2_C {
		constexpr auto UberGraphFrame = 0x258; // FPointerToUberGraphFrame
		constexpr auto A_NewUnit = 0x260; // UWidgetAnimation*
		constexpr auto Border_1 = 0x268; // UBorder*
		constexpr auto btn_NewUnit = 0x270; // UButton*
		constexpr auto CommanderPanel = 0x278; // UVerticalBox*
		constexpr auto HLLScrollBox_358 = 0x280; // UHLLScrollBox*
		constexpr auto Image_161 = 0x288; // UImage*
		constexpr auto Timer_CheckForUnits = 0x290; // FTimerHandle
		constexpr auto Btn_NewUnitPressed = 0x298; // FMulticastInlineDelegate
		constexpr auto Player_Team = 0x2a8; // ETeam
		constexpr auto CreateInfantry = 0x2b0; // FMulticastInlineDelegate
		constexpr auto CreateArmor = 0x2c0; // FMulticastInlineDelegate
		constexpr auto CreateRecon = 0x2d0; // FMulticastInlineDelegate
		constexpr auto CommanderWidget = 0x2e0; // UArmyCommanderRole*
		constexpr auto OnNavigateRight = 0x2e8; // FMulticastInlineDelegate
		constexpr auto ButtonPromptsInfo = 0x2f8; // UButtonPromptsInfo_V2_C*
		constexpr auto LastSelectedWidget = 0x300; // UWidget*
	}

	namespace n_UMaterialExpressionReroute {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_AHLLMapData_AdminCamera {
		constexpr auto AdminCam = 0x238; // AHLLAdminCamera*
	}

	namespace n_UWidgetAnimationDelegateBinding {
		constexpr auto WidgetAnimationDelegateBindings = 0x28; // TArray<FBlueprintWidgetAnimationDelegateBinding>
	}

	namespace n_UHLLAdminCamPlayerEntry {
		constexpr auto AssignedPlayer = 0x230; // AShooterPlayerState*
		constexpr auto bIsSelected = 0x238; // char : 1
		constexpr auto bHiddenByFilter = 0x238; // char : 1
		constexpr auto PlayerRole = 0x240; // UTextBlock*
		constexpr auto PlayerLevel = 0x248; // UTextBlock*
		constexpr auto PlayerName = 0x250; // UTextBlock*
		constexpr auto PlayerId = 0x258; // UTextBlock*
		constexpr auto OwningUI = 0x260; // UHLLAdminCamUI*
	}

	namespace n_UMaterialExpressionFunctionInput {
		constexpr auto Preview = 0x40; // FExpressionInput
		constexpr auto InputName = 0x54; // FName
		constexpr auto Description = 0x60; // FString
		constexpr auto ID = 0x70; // FGuid
		constexpr auto InputType = 0x80; // EFunctionInputType
		constexpr auto PreviewValue = 0x90; // FVector4
		constexpr auto bUsePreviewValueAsDefault = 0xa0; // char : 1
		constexpr auto SortPriority = 0xa4; // int32_t
		constexpr auto bCompilingFunctionPreview = 0xa8; // char : 1
	}

	namespace n_USoundSubmixWithParentBase {
		constexpr auto ParentSubmix = 0x38; // USoundSubmixBase*
	}

	namespace n_UInterpTrackInstFloatAnimBPParam {
		constexpr auto AnimScriptInstance = 0x28; // UAnimInstance*
		constexpr auto ResetFloat = 0x30; // float
	}

	namespace n_UMaterialExpressionRayTracingQualitySwitch {
		constexpr auto Normal = 0x40; // FExpressionInput
		constexpr auto RayTraced = 0x54; // FExpressionInput
	}

	namespace n_UBPW_ArmyLogo_C {
		constexpr auto USArmyForce = 0x248; // UOverlay*
	}

	namespace n_UWGT_DialogBox_V2_C {
		constexpr auto UberGraphFrame = 0x2f0; // FPointerToUberGraphFrame
	}

	namespace n_ULightmassPortalComponent {
		constexpr auto PreviewBox = 0x1f0; // UBoxComponent*
	}

	namespace n_UBasicReplicationGraph {
		constexpr auto GridNode = 0x498; // UReplicationGraphNode_GridSpatialization2D*
		constexpr auto AlwaysRelevantNode = 0x4a0; // UReplicationGraphNode_ActorList*
		constexpr auto AlwaysRelevantForConnectionList = 0x4a8; // TArray<FConnectionAlwaysRelevantNodePair>
		constexpr auto ActorsWithoutNetConnection = 0x4b8; // TArray<AActor*>
	}

	namespace n_AHLLDispenserItem_Outpost {
		constexpr auto bAutoDestroyOutpostsPlacedByOtherOfficers = 0x4c8; // char : 1
	}

	namespace n_UHLLMapMetaTemplate {
		constexpr auto OffensiveModeAttackingTeam = 0x28; // ETeam
		constexpr auto SectorWidth = 0x2c; // float
		constexpr auto SectorHeight = 0x30; // float
		constexpr auto MapWidth = 0x34; // int32_t
		constexpr auto MapHeight = 0x38; // int32_t
		constexpr auto Sectors = 0x40; // TArray<FHLLSectorDefinition>
		constexpr auto MapFriendlyName = 0x50; // FText
		constexpr auto MapID = 0x68; // FString
		constexpr auto MapShortName = 0x78; // FText
		constexpr auto Orientation = 0x90; // EMapOrientation
		constexpr auto OverviewImage = 0xa0; // TSoftObjectPtr<UTexture2D>
		constexpr auto CompassOffset = 0xc8; // float
		constexpr auto AxisFaction = 0xcc; // EFaction
		constexpr auto AlliesFaction = 0xcd; // EFaction
		constexpr auto AxisAbilityData = 0xd0; // UHLLMapAbilityData*
		constexpr auto AlliesAbilityData = 0xd8; // UHLLMapAbilityData*
	}

	namespace n_UEnvQueryGenerator_ProjectedPoints {
		constexpr auto ProjectionData = 0x50; // FEnvTraceData
	}

	namespace n_UW_GH_GameProgress_PopIndicator_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto B_Master = 0x238; // UBorder*
		constexpr auto B_StrongPoint = 0x240; // UBorder*
		constexpr auto GP_Holder = 0x248; // UGridPanel*
		constexpr auto HB_PopHolder = 0x250; // UHorizontalBox*
		constexpr auto Img_PopI_01 = 0x258; // UImage*
		constexpr auto Img_PopI_02 = 0x260; // UImage*
		constexpr auto Img_PopI_03 = 0x268; // UImage*
		constexpr auto Population_Enemy = 0x270; // bool
		constexpr auto test = 0x271; // bool
	}

	namespace n_UARSessionConfig {
		constexpr auto bGenerateMeshDataFromTrackedGeometry = 0x30; // bool
		constexpr auto bGenerateCollisionForMeshData = 0x31; // bool
		constexpr auto bGenerateNavMeshForMeshData = 0x32; // bool
		constexpr auto bUseMeshDataForOcclusion = 0x33; // bool
		constexpr auto bRenderMeshDataInWireframe = 0x34; // bool
		constexpr auto bTrackSceneObjects = 0x35; // bool
		constexpr auto bUsePersonSegmentationForOcclusion = 0x36; // bool
		constexpr auto WorldAlignment = 0x37; // EARWorldAlignment
		constexpr auto SessionType = 0x38; // EARSessionType
		constexpr auto PlaneDetectionMode = 0x39; // EARPlaneDetectionMode
		constexpr auto bHorizontalPlaneDetection = 0x3a; // bool
		constexpr auto bVerticalPlaneDetection = 0x3b; // bool
		constexpr auto bEnableAutoFocus = 0x3c; // bool
		constexpr auto LightEstimationMode = 0x3d; // EARLightEstimationMode
		constexpr auto FrameSyncMode = 0x3e; // EARFrameSyncMode
		constexpr auto bEnableAutomaticCameraOverlay = 0x3f; // bool
		constexpr auto bEnableAutomaticCameraTracking = 0x40; // bool
		constexpr auto bResetCameraTracking = 0x41; // bool
		constexpr auto bResetTrackedObjects = 0x42; // bool
		constexpr auto CandidateImages = 0x48; // TArray<UARCandidateImage*>
		constexpr auto MaxNumSimultaneousImagesTracked = 0x58; // int32_t
		constexpr auto EnvironmentCaptureProbeType = 0x5c; // EAREnvironmentCaptureProbeType
		constexpr auto WorldMapData = 0x60; // TArray<char>
		constexpr auto CandidateObjects = 0x70; // TArray<UARCandidateObject*>
		constexpr auto DesiredVideoFormat = 0x80; // FARVideoFormat
		constexpr auto FaceTrackingDirection = 0x8c; // EARFaceTrackingDirection
		constexpr auto FaceTrackingUpdate = 0x8d; // EARFaceTrackingUpdate
		constexpr auto SerializedARCandidateImageDatabase = 0x90; // TArray<char>
		constexpr auto EnabledSessionTrackingFeature = 0xa0; // EARSessionTrackingFeature
	}

	namespace n_UCharacterMovementComponent {
		constexpr auto CharacterOwner = 0x148; // ACharacter*
		constexpr auto GravityScale = 0x150; // float
		constexpr auto MaxStepHeight = 0x154; // float
		constexpr auto JumpZVelocity = 0x158; // float
		constexpr auto JumpOffJumpZFactor = 0x15c; // float
		constexpr auto WalkableFloorAngle = 0x160; // float
		constexpr auto WalkableFloorZ = 0x164; // float
		constexpr auto MovementMode = 0x168; // EMovementMode
		constexpr auto CustomMovementMode = 0x169; // char
		constexpr auto NetworkSmoothingMode = 0x16a; // ENetworkSmoothingMode
		constexpr auto GroundFriction = 0x16c; // float
		constexpr auto MaxWalkSpeed = 0x18c; // float
		constexpr auto MaxWalkSpeedCrouched = 0x190; // float
		constexpr auto MaxSwimSpeed = 0x194; // float
		constexpr auto MaxFlySpeed = 0x198; // float
		constexpr auto MaxCustomMovementSpeed = 0x19c; // float
		constexpr auto MaxAcceleration = 0x1a0; // float
		constexpr auto MinAnalogWalkSpeed = 0x1a4; // float
		constexpr auto BrakingFrictionFactor = 0x1a8; // float
		constexpr auto BrakingFriction = 0x1ac; // float
		constexpr auto BrakingSubStepTime = 0x1b0; // float
		constexpr auto BrakingDecelerationWalking = 0x1b4; // float
		constexpr auto BrakingDecelerationFalling = 0x1b8; // float
		constexpr auto BrakingDecelerationSwimming = 0x1bc; // float
		constexpr auto BrakingDecelerationFlying = 0x1c0; // float
		constexpr auto AirControl = 0x1c4; // float
		constexpr auto AirControlBoostMultiplier = 0x1c8; // float
		constexpr auto AirControlBoostVelocityThreshold = 0x1cc; // float
		constexpr auto FallingLateralFriction = 0x1d0; // float
		constexpr auto CrouchedHalfHeight = 0x1d4; // float
		constexpr auto Buoyancy = 0x1d8; // float
		constexpr auto PerchRadiusThreshold = 0x1dc; // float
		constexpr auto PerchAdditionalHeight = 0x1e0; // float
		constexpr auto RotationRate = 0x1e4; // FRotator
		constexpr auto bUseSeparateBrakingFriction = 0x1f0; // char : 1
		constexpr auto bApplyGravityWhileJumping = 0x1f0; // char : 1
		constexpr auto bUseControllerDesiredRotation = 0x1f0; // char : 1
		constexpr auto bOrientRotationToMovement = 0x1f0; // char : 1
		constexpr auto bSweepWhileNavWalking = 0x1f0; // char : 1
		constexpr auto bMovementInProgress = 0x1f0; // char : 1
		constexpr auto bEnableScopedMovementUpdates = 0x1f0; // char : 1
		constexpr auto bEnableServerDualMoveScopedMovementUpdates = 0x1f1; // char : 1
		constexpr auto bForceMaxAccel = 0x1f1; // char : 1
		constexpr auto bRunPhysicsWithNoController = 0x1f1; // char : 1
		constexpr auto bForceNextFloorCheck = 0x1f1; // char : 1
		constexpr auto bShrinkProxyCapsule = 0x1f1; // char : 1
		constexpr auto bCanWalkOffLedges = 0x1f1; // char : 1
		constexpr auto bCanWalkOffLedgesWhenCrouching = 0x1f1; // char : 1
		constexpr auto bNetworkSkipProxyPredictionOnNetUpdate = 0x1f2; // char : 1
		constexpr auto bNetworkAlwaysReplicateTransformUpdateTimestamp = 0x1f2; // char : 1
		constexpr auto bDeferUpdateMoveComponent = 0x1f2; // char : 1
		constexpr auto bEnablePhysicsInteraction = 0x1f2; // char : 1
		constexpr auto bTouchForceScaledToMass = 0x1f2; // char : 1
		constexpr auto bPushForceScaledToMass = 0x1f2; // char : 1
		constexpr auto bPushForceUsingZOffset = 0x1f2; // char : 1
		constexpr auto bScalePushForceToVelocity = 0x1f3; // char : 1
		constexpr auto DeferredUpdatedMoveComponent = 0x1f8; // USceneComponent*
		constexpr auto MaxOutOfWaterStepHeight = 0x200; // float
		constexpr auto OutofWaterZ = 0x204; // float
		constexpr auto Mass = 0x208; // float
		constexpr auto StandingDownwardForceScale = 0x20c; // float
		constexpr auto InitialPushForceFactor = 0x210; // float
		constexpr auto PushForceFactor = 0x214; // float
		constexpr auto PushForcePointZOffsetFactor = 0x218; // float
		constexpr auto TouchForceFactor = 0x21c; // float
		constexpr auto MinTouchForce = 0x220; // float
		constexpr auto MaxTouchForce = 0x224; // float
		constexpr auto RepulsionForce = 0x228; // float
		constexpr auto Acceleration = 0x22c; // FVector
		constexpr auto LastUpdateRotation = 0x240; // FQuat
		constexpr auto LastUpdateLocation = 0x250; // FVector
		constexpr auto LastUpdateVelocity = 0x25c; // FVector
		constexpr auto ServerLastTransformUpdateTimeStamp = 0x268; // float
		constexpr auto ServerLastClientGoodMoveAckTime = 0x26c; // float
		constexpr auto ServerLastClientAdjustmentTime = 0x270; // float
		constexpr auto PendingImpulseToApply = 0x274; // FVector
		constexpr auto PendingForceToApply = 0x280; // FVector
		constexpr auto AnalogInputModifier = 0x28c; // float
		constexpr auto MaxSimulationTimeStep = 0x29c; // float
		constexpr auto MaxSimulationIterations = 0x2a0; // int32_t
		constexpr auto MaxJumpApexAttemptsPerSimulation = 0x2a4; // int32_t
		constexpr auto MaxDepenetrationWithGeometry = 0x2a8; // float
		constexpr auto MaxDepenetrationWithGeometryAsProxy = 0x2ac; // float
		constexpr auto MaxDepenetrationWithPawn = 0x2b0; // float
		constexpr auto MaxDepenetrationWithPawnAsProxy = 0x2b4; // float
		constexpr auto NetworkSimulatedSmoothLocationTime = 0x2b8; // float
		constexpr auto NetworkSimulatedSmoothRotationTime = 0x2bc; // float
		constexpr auto ListenServerNetworkSimulatedSmoothLocationTime = 0x2c0; // float
		constexpr auto ListenServerNetworkSimulatedSmoothRotationTime = 0x2c4; // float
		constexpr auto NetProxyShrinkRadius = 0x2c8; // float
		constexpr auto NetProxyShrinkHalfHeight = 0x2cc; // float
		constexpr auto NetworkMaxSmoothUpdateDistance = 0x2d0; // float
		constexpr auto NetworkNoSmoothUpdateDistance = 0x2d4; // float
		constexpr auto NetworkMinTimeBetweenClientAckGoodMoves = 0x2d8; // float
		constexpr auto NetworkMinTimeBetweenClientAdjustments = 0x2dc; // float
		constexpr auto NetworkMinTimeBetweenClientAdjustmentsLargeCorrection = 0x2e0; // float
		constexpr auto NetworkLargeClientCorrectionDistance = 0x2e4; // float
		constexpr auto LedgeCheckThreshold = 0x2e8; // float
		constexpr auto JumpOutOfWaterPitch = 0x2ec; // float
		constexpr auto CurrentFloor = 0x2f0; // FFindFloorResult
		constexpr auto DefaultLandMovementMode = 0x384; // EMovementMode
		constexpr auto DefaultWaterMovementMode = 0x385; // EMovementMode
		constexpr auto GroundMovementMode = 0x386; // EMovementMode
		constexpr auto bMaintainHorizontalGroundVelocity = 0x387; // char : 1
		constexpr auto bImpartBaseVelocityX = 0x387; // char : 1
		constexpr auto bImpartBaseVelocityY = 0x387; // char : 1
		constexpr auto bImpartBaseVelocityZ = 0x387; // char : 1
		constexpr auto bImpartBaseAngularVelocity = 0x387; // char : 1
		constexpr auto bJustTeleported = 0x387; // char : 1
		constexpr auto bNetworkUpdateReceived = 0x387; // char : 1
		constexpr auto bNetworkMovementModeChanged = 0x387; // char : 1
		constexpr auto bIgnoreClientMovementErrorChecksAndCorrection = 0x388; // char : 1
		constexpr auto bServerAcceptClientAuthoritativePosition = 0x388; // char : 1
		constexpr auto bNotifyApex = 0x388; // char : 1
		constexpr auto bCheatFlying = 0x388; // char : 1
		constexpr auto bWantsToCrouch = 0x388; // char : 1
		constexpr auto bCrouchMaintainsBaseLocation = 0x388; // char : 1
		constexpr auto bIgnoreBaseRotation = 0x388; // char : 1
		constexpr auto bFastAttachedMove = 0x388; // char : 1
		constexpr auto bAlwaysCheckFloor = 0x389; // char : 1
		constexpr auto bUseFlatBaseForFloorChecks = 0x389; // char : 1
		constexpr auto bPerformingJumpOff = 0x389; // char : 1
		constexpr auto bWantsToLeaveNavWalking = 0x389; // char : 1
		constexpr auto bUseRVOAvoidance = 0x389; // char : 1
		constexpr auto bRequestedMoveUseAcceleration = 0x389; // char : 1
		constexpr auto bWasSimulatingRootMotion = 0x389; // char : 1
		constexpr auto bAllowPhysicsRotationDuringAnimRootMotion = 0x38a; // char : 1
		constexpr auto bHasRequestedVelocity = 0x38a; // char : 1
		constexpr auto bRequestedMoveWithMaxSpeed = 0x38a; // char : 1
		constexpr auto bWasAvoidanceUpdated = 0x38a; // char : 1
		constexpr auto bProjectNavMeshWalking = 0x38a; // char : 1
		constexpr auto bProjectNavMeshOnBothWorldChannels = 0x38a; // char : 1
		constexpr auto AvoidanceConsiderationRadius = 0x39c; // float
		constexpr auto RequestedVelocity = 0x3a0; // FVector
		constexpr auto AvoidanceUID = 0x3ac; // int32_t
		constexpr auto AvoidanceGroup = 0x3b0; // FNavAvoidanceMask
		constexpr auto GroupsToAvoid = 0x3b4; // FNavAvoidanceMask
		constexpr auto GroupsToIgnore = 0x3b8; // FNavAvoidanceMask
		constexpr auto AvoidanceWeight = 0x3bc; // float
		constexpr auto PendingLaunchVelocity = 0x3c0; // FVector
		constexpr auto NavMeshProjectionInterval = 0x470; // float
		constexpr auto NavMeshProjectionTimer = 0x474; // float
		constexpr auto NavMeshProjectionInterpSpeed = 0x478; // float
		constexpr auto NavMeshProjectionHeightScaleUp = 0x47c; // float
		constexpr auto NavMeshProjectionHeightScaleDown = 0x480; // float
		constexpr auto NavWalkingFloorDistTolerance = 0x484; // float
		constexpr auto PostPhysicsTickFunction = 0x488; // FCharacterMovementComponentPostPhysicsTickFunction
		constexpr auto MinTimeBetweenTimeStampResets = 0x4d0; // float
		constexpr auto CurrentRootMotion = 0x4d8; // FRootMotionSourceGroup
		constexpr auto RootMotionParams = 0x5a0; // FRootMotionMovementParams
		constexpr auto AnimRootMotionVelocity = 0x5e0; // FVector
	}

	namespace n_UNavigationDataChunk {
		constexpr auto NavigationDataName = 0x28; // FName
	}

	namespace n_AHLLWorldSettings {
		constexpr auto MapMetaData = 0x3a0; // UHLLMapMetaTemplate*
		constexpr auto DefaultBarbedWireVolume = 0x3a8; // AHLLBarbedWireVolume*
		constexpr auto LoadedAxisWeapons = 0x3b0; // TArray<AShooterWeapon*>
		constexpr auto LoadedAlliedWeapons = 0x3c0; // TArray<AShooterWeapon*>
	}

	namespace n_ABoxSectorCaptureBooster {
		constexpr auto TriggerShape = 0x280; // UBoxComponent*
	}

	namespace n_UWorld {
		constexpr auto PersistentLevel = 0x30; // ULevel*
		constexpr auto NetDriver = 0x38; // UNetDriver*
		constexpr auto LineBatcher = 0x40; // ULineBatchComponent*
		constexpr auto PersistentLineBatcher = 0x48; // ULineBatchComponent*
		constexpr auto ForegroundLineBatcher = 0x50; // ULineBatchComponent*
		constexpr auto NetworkManager = 0x58; // AGameNetworkManager*
		constexpr auto PhysicsCollisionHandler = 0x60; // UPhysicsCollisionHandler*
		constexpr auto ExtraReferencedObjects = 0x68; // TArray<UObject*>
		constexpr auto PerModuleDataObjects = 0x78; // TArray<UObject*>
		constexpr auto LevelSequenceActors = 0x88; // TArray<AActor*>
		constexpr auto StreamingLevels = 0x98; // TArray<ULevelStreaming*>
		constexpr auto StreamingLevelsToConsider = 0xa8; // FStreamingLevelsToConsider
		constexpr auto StreamingLevelsPrefix = 0xd0; // FString
		constexpr auto CurrentLevelPendingVisibility = 0xe0; // ULevel*
		constexpr auto CurrentLevelPendingInvisibility = 0xe8; // ULevel*
		constexpr auto DemoNetDriver = 0xf0; // UDemoNetDriver*
		constexpr auto MyParticleEventManager = 0xf8; // AParticleEventManager*
		constexpr auto DefaultPhysicsVolume = 0x100; // APhysicsVolume*
		constexpr auto bAreConstraintsDirty = 0x11e; // char : 1
		constexpr auto NavigationSystem = 0x120; // UNavigationSystemBase*
		constexpr auto AuthorityGameMode = 0x128; // AGameModeBase*
		constexpr auto GameState = 0x130; // AGameStateBase*
		constexpr auto AISystem = 0x138; // UAISystemBase*
		constexpr auto AvoidanceManager = 0x140; // UAvoidanceManager*
		constexpr auto Levels = 0x148; // TArray<ULevel*>
		constexpr auto LevelCollections = 0x158; // TArray<FLevelCollection>
		constexpr auto OwningGameInstance = 0x188; // UGameInstance*
		constexpr auto ParameterCollectionInstances = 0x190; // TArray<UMaterialParameterCollectionInstance*>
		constexpr auto CanvasForRenderingToTarget = 0x1a0; // UCanvas*
		constexpr auto CanvasForDrawMaterialToRenderTarget = 0x1a8; // UCanvas*
		constexpr auto ComponentsThatNeedEndOfFrameUpdate = 0x200; // TArray<UActorComponent*>
		constexpr auto ComponentsThatNeedEndOfFrameUpdate_OnGameThread = 0x210; // TArray<UActorComponent*>
		constexpr auto WorldComposition = 0x560; // UWorldComposition*
		constexpr auto PSCPool = 0x5f0; // FWorldPSCPool
	}

	namespace n_UHLLMenuButton {
		constexpr auto OnPress = 0x230; // FMulticastInlineDelegate
		constexpr auto Text = 0x240; // FText
		constexpr auto HoverIcon = 0x258; // UImage*
		constexpr auto RootButton = 0x260; // UButton*
		constexpr auto ButtonText = 0x268; // UTextBlock*
	}

	namespace n_UBlackboardComponent {
		constexpr auto BrainComp = 0xb0; // UBrainComponent*
		constexpr auto DefaultBlackboardAsset = 0xb8; // UBlackboardData*
		constexpr auto BlackboardAsset = 0xc0; // UBlackboardData*
		constexpr auto KeyInstances = 0xe8; // TArray<UBlackboardKeyType*>
	}

	namespace n_UPaperGroupedSpriteComponent {
		constexpr auto InstanceMaterials = 0x438; // TArray<UMaterialInterface*>
		constexpr auto PerInstanceSpriteData = 0x448; // TArray<FSpriteInstanceData>
	}

	namespace n_UMovieSceneByteSection {
		constexpr auto ByteCurve = 0xe0; // FMovieSceneByteChannel
	}

	namespace n_USoundfieldEndpointSubmix {
		constexpr auto SoundfieldEndpointType = 0x38; // FName
		constexpr auto EndpointSettingsClass = 0x40; // UAudioEndpointSettingsBase*
		constexpr auto EndpointSettings = 0x48; // USoundfieldEndpointSettingsBase*
		constexpr auto EncodingSettingsClass = 0x50; // USoundfieldEncodingSettingsBase*
		constexpr auto EncodingSettings = 0x58; // USoundfieldEncodingSettingsBase*
		constexpr auto SoundfieldEffectChain = 0x60; // TArray<USoundfieldEffectBase*>
	}

	namespace n_UMaterialExpressionLightmassReplace {
		constexpr auto Realtime = 0x40; // FExpressionInput
		constexpr auto Lightmass = 0x54; // FExpressionInput
	}

	namespace n_UOnlinePIESettings {
		constexpr auto bOnlinePIEEnabled = 0x38; // bool
		constexpr auto Logins = 0x40; // TArray<FPIELoginSettingsInternal>
	}

	namespace n_AHLLResourceNode {
		constexpr auto DummyRoot = 0x290; // USceneComponent*
		constexpr auto Mesh = 0x298; // UStaticMeshComponent*
		constexpr auto MapComponent = 0x2a0; // UHLLMapComponent*
		constexpr auto IndicatorComponent = 0x2a8; // UHLLIndicatorComponent*
		constexpr auto ResourceComponent = 0x2b0; // UHLLResourceGenerator*
		constexpr auto HealthComponent = 0x2b8; // UHLLSimpleHealthComponent*
		constexpr auto DismantleTime = 0x2c0; // float
		constexpr auto OwningTeam = 0x2c4; // ETeam
		constexpr auto RegenerationTypes = 0x2c5; // char
		constexpr auto AmmoRegenRadius = 0x2c8; // float
		constexpr auto AmmoRegenQuery = 0x2cc; // FCollisionProfileName
		constexpr auto AmmoRegenLength = 0x2d4; // float
		constexpr auto RegenerationScoreName = 0x2d8; // FName
		constexpr auto UpgradeData = 0x2e0; // FHLLUpgradeInfo
		constexpr auto UpgradeGhostComponent = 0x368; // UHLLUpgradeGhostComponent*
		constexpr auto DamageFilterType = 0x370; // EHLLDamageFilterType
		constexpr auto SpawnedByPlayer = 0x378; // AShooterPlayerState*
		constexpr auto NodeID = 0x388; // int32_t
	}

	namespace n_UHLLSectorIndicator {
		constexpr auto SectorNameText = 0x2a8; // UTextBlock*
		constexpr auto CaptureProgress_Friendly = 0x2b0; // UProgressBar*
		constexpr auto CaptureProgress_Enemy = 0x2b8; // UProgressBar*
		constexpr auto CurrentCap = 0x2c0; // UImage*
		constexpr auto DistanceText = 0x2c8; // UTextBlock*
		constexpr auto ResourceBrush = 0x2d0; // UImage*
		constexpr auto FlagBrush = 0x2d8; // UImage*
		constexpr auto AnimExpandCollapse = 0x2e0; // UWidgetAnimation*
		constexpr auto bExpandedState = 0x2e8; // bool
		constexpr auto ExpandedAngle = 0x2ec; // float
		constexpr auto Colour_Neutral = 0x2f0; // FLinearColor
		constexpr auto Colour_Friendly = 0x300; // FLinearColor
		constexpr auto Colour_Enemy = 0x310; // FLinearColor
	}

	namespace n_UWGT_LoadoutEntry_Small_C {
		constexpr auto RootSizer = 0x268; // USizeBox*
	}

	namespace n_URig {
		constexpr auto TransformBases = 0x30; // TArray<FTransformBase>
		constexpr auto Nodes = 0x40; // TArray<FNode>
	}

	namespace n_UBaseVehicleMovementComponent {
		constexpr auto EngineSetup = 0x2f0; // FVehicleEngineData
		constexpr auto TransmissionSetup = 0x390; // FVehicleTransmissionData
		constexpr auto SteeringCurve = 0x3c0; // FRuntimeFloatCurve
	}

	namespace n_UAISense_Blueprint {
		constexpr auto ListenerDataType = 0x80; // UUserDefinedStruct*
		constexpr auto ListenerContainer = 0x88; // TArray<UAIPerceptionComponent*>
		constexpr auto UnprocessedEvents = 0x98; // TArray<UAISenseEvent*>
	}

	namespace n_UAsyncTask_LoadXRDeviceVisComponent {
		constexpr auto OnModelLoaded = 0x30; // FMulticastInlineDelegate
		constexpr auto OnLoadFailure = 0x40; // FMulticastInlineDelegate
		constexpr auto SpawnedComponent = 0x58; // UPrimitiveComponent*
	}

	namespace n_UHierarchicalLODSetup {
		constexpr auto HierarchicalLODSetup = 0x28; // TArray<FHierarchicalSimplification>
		constexpr auto OverrideBaseMaterial = 0x38; // TSoftObjectPtr<UMaterialInterface>
	}

	namespace n_USoundNodeSoundClass {
		constexpr auto SoundClassOverride = 0x48; // USoundClass*
	}

	namespace n_USkyLightComponent {
		constexpr auto SourceType = 0x220; // ESkyLightSourceType
		constexpr auto Cubemap = 0x228; // UTextureCube*
		constexpr auto SourceCubemapAngle = 0x230; // float
		constexpr auto CubemapResolution = 0x234; // int32_t
		constexpr auto SkyDistanceThreshold = 0x238; // float
		constexpr auto bCaptureEmissiveOnly = 0x23c; // bool
		constexpr auto bLowerHemisphereIsBlack = 0x23d; // bool
		constexpr auto LowerHemisphereColor = 0x240; // FLinearColor
		constexpr auto OcclusionMaxDistance = 0x250; // float
		constexpr auto Contrast = 0x254; // float
		constexpr auto OcclusionExponent = 0x258; // float
		constexpr auto MinOcclusion = 0x25c; // float
		constexpr auto OcclusionTint = 0x260; // FColor
		constexpr auto OcclusionCombineMode = 0x264; // EOcclusionCombineMode
		constexpr auto BlendDestinationCubemap = 0x318; // UTextureCube*
	}

	namespace n_UParticleModuleSizeMultiplyLife {
		constexpr auto LifeMultiplier = 0x30; // FRawDistributionVector
		constexpr auto MultiplyX = 0x78; // char : 1
		constexpr auto MultiplyY = 0x78; // char : 1
		constexpr auto MultiplyZ = 0x78; // char : 1
	}

	namespace n_UWGT_CommanderSubCategory_C {
		constexpr auto UberGraphFrame = 0x258; // FPointerToUberGraphFrame
		constexpr auto img_icon = 0x260; // UImage*
		constexpr auto TitleBox = 0x268; // UHorizontalBox*
	}

	namespace n_UMaterialExpressionPower {
		constexpr auto Base = 0x40; // FExpressionInput
		constexpr auto Exponent = 0x54; // FExpressionInput
		constexpr auto ConstExponent = 0x68; // float
	}

	namespace n_UAISenseConfig_Sight {
		constexpr auto Implementation = 0x48; // UAISense_Sight*
		constexpr auto SightRadius = 0x50; // float
		constexpr auto LoseSightRadius = 0x54; // float
		constexpr auto PeripheralVisionAngleDegrees = 0x58; // float
		constexpr auto DetectionByAffiliation = 0x5c; // FAISenseAffiliationFilter
		constexpr auto AutoSuccessRangeFromLastSeenLocation = 0x60; // float
	}

	namespace n_UMediaComponent {
		constexpr auto MediaTexture = 0xb0; // UMediaTexture*
		constexpr auto MediaPlayer = 0xb8; // UMediaPlayer*
	}

	namespace n_UW_HoverToolTip_Explained_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Alert = 0x238; // UBorder*
		constexpr auto Cooldown = 0x240; // UBorder*
		constexpr auto div_line = 0x248; // UImage*
		constexpr auto img_icon = 0x250; // UImage*
		constexpr auto Rtxt_Body = 0x258; // URichTextBlock*
		constexpr auto Rtxt_Title = 0x260; // URichTextBlock*
		constexpr auto SB_Icon = 0x268; // USizeBox*
		constexpr auto txt_alert = 0x270; // UTextBlock*
		constexpr auto txt_cooldown = 0x278; // UTextBlock*
		constexpr auto Text_Tooltip_Title = 0x280; // FText
		constexpr auto Text_Tooltip_Body = 0x298; // FText
		constexpr auto Tooltip_Title = 0x2b0; // bool
		constexpr auto Text_Tooltip_Cooldown = 0x2b8; // FText
		constexpr auto TooltipIconBrush = 0x2d0; // FSlateBrush
		constexpr auto TooltipHasIcon = 0x358; // bool
		constexpr auto TooltipIsAlert = 0x359; // bool
		constexpr auto Text_Tooltip_Alert = 0x360; // FText
		constexpr auto IsDisplayingToolTipOnButtonPrompt = 0x378; // bool
		constexpr auto TooltipIsCooldown = 0x379; // bool
		constexpr auto UsingGamepad = 0x37a; // bool
	}

	namespace n_UDeathScreen_V2_C {
		constexpr auto UberGraphFrame = 0x2b8; // FPointerToUberGraphFrame
		constexpr auto MarkerRight = 0x2c0; // UImage*
		constexpr auto RetainerBox_1 = 0x2c8; // URetainerBox*
		constexpr auto RTxt_DeployText = 0x2d0; // URichTextBlock*
		constexpr auto bUseGamepadText = 0x2d8; // bool
	}

	namespace n_UMovieSceneCameraCutTrack {
		constexpr auto bCanBlend = 0x58; // bool
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UTabbedButtonContainer {
		constexpr auto ViewportClient = 0x230; // UShooterGameViewportClient*
	}

	namespace n_ABP_StartScreenAnimation_C {
		constexpr auto UberGraphFrame = 0x220; // FPointerToUberGraphFrame
		constexpr auto Camera = 0x228; // UCameraComponent*
		constexpr auto ShootingInwards = 0x230; // UParticleSystemComponent*
		constexpr auto BackgroundShooting = 0x238; // UParticleSystemComponent*
		constexpr auto TankSmokeMat = 0x240; // UStaticMeshComponent*
		constexpr auto MuzzleFlashSingle = 0x248; // UParticleSystemComponent*
		constexpr auto BulletsL = 0x250; // UParticleSystemComponent*
		constexpr auto BulletsR = 0x258; // UParticleSystemComponent*
		constexpr auto 3_PeopleRig = 0x260; // USkeletalMeshComponent*
		constexpr auto BulletsRare = 0x268; // UParticleSystemComponent*
		constexpr auto ExplosionSmoke = 0x270; // UParticleSystemComponent*
		constexpr auto TankSmoke = 0x278; // UParticleSystemComponent*
		constexpr auto Propeller2 = 0x280; // UStaticMeshComponent*
		constexpr auto Propeller1 = 0x288; // UStaticMeshComponent*
		constexpr auto Propeller = 0x290; // UStaticMeshComponent*
		constexpr auto PlaneSmoke = 0x298; // UParticleSystemComponent*
		constexpr auto 1_Main_Mat = 0x2a0; // USkeletalMeshComponent*
		constexpr auto MuzzleFlashesL = 0x2a8; // UParticleSystemComponent*
		constexpr auto MuzzleFlashesR = 0x2b0; // UParticleSystemComponent*
		constexpr auto 3_Mid_Mat1 = 0x2b8; // UStaticMeshComponent*
		constexpr auto Dust = 0x2c0; // UStaticMeshComponent*
		constexpr auto BackgroundBlack = 0x2c8; // UStaticMeshComponent*
		constexpr auto Scene = 0x2d0; // USceneComponent*
		constexpr auto 1_Main_Fire_Mat = 0x2d8; // UStaticMeshComponent*
		constexpr auto 1_Particles_Mat = 0x2e0; // UStaticMeshComponent*
		constexpr auto 2_BC_Plane1_Mat_Inst = 0x2e8; // UStaticMeshComponent*
		constexpr auto 2_BC_Plane2_Mat_Inst = 0x2f0; // UStaticMeshComponent*
		constexpr auto 2_BC_Plane3_Mat_Inst = 0x2f8; // UStaticMeshComponent*
		constexpr auto 4_Back_Mat = 0x300; // UStaticMeshComponent*
		constexpr auto 2_Explosion_Mat_Inst = 0x308; // UStaticMeshComponent*
		constexpr auto 2_FG_Smoke_Mat = 0x310; // UStaticMeshComponent*
		constexpr auto 3_Mid_Mat = 0x318; // UStaticMeshComponent*
		constexpr auto 2_Tank1_Mat_Inst = 0x320; // UStaticMeshComponent*
		constexpr auto 2_Tank2_Mat_Inst = 0x328; // UStaticMeshComponent*
		constexpr auto 2_Bombers_Mat_Inst = 0x330; // UStaticMeshComponent*
		constexpr auto Initial_Load_4_8_A14C542D403442EF0256779B43192828 = 0x338; // float
		constexpr auto Initial_Load_0___5_Seconds_A14C542D403442EF0256779B43192828 = 0x33c; // float
		constexpr auto Initial_Load__Direction_A14C542D403442EF0256779B43192828 = 0x340; // ETimelineDirection
		constexpr auto Initial Load = 0x348; // UTimelineComponent*
		constexpr auto Animation_Side_Movement_Shift_87EF145149461A3DE79791BEC5D0B1DB = 0x350; // float
		constexpr auto Animation__Direction_87EF145149461A3DE79791BEC5D0B1DB = 0x354; // ETimelineDirection
		constexpr auto Animation = 0x358; // UTimelineComponent*
		constexpr auto TankSmokeDynamicMaterial = 0x360; // UMaterialInstanceDynamic*
		constexpr auto ExplosionDynamicMaterial = 0x368; // UMaterialInstanceDynamic*
		constexpr auto StartScreenV2 = 0x370; // UStartScreen_V2_C*
		constexpr auto PreviousViewTarget = 0x378; // AActor*
	}

	namespace n_UAnimCompress_RemoveEverySecondKey {
		constexpr auto MinKeys = 0x40; // int32_t
		constexpr auto bStartAtSecondKey = 0x44; // char : 1
	}

	namespace n_AWorldSettings {
		constexpr auto VisibilityCellSize = 0x228; // int32_t
		constexpr auto VisibilityAggressiveness = 0x22c; // EVisibilityAggressiveness
		constexpr auto bPrecomputeVisibility = 0x22d; // char : 1
		constexpr auto bPlaceCellsOnlyAlongCameraTracks = 0x22d; // char : 1
		constexpr auto bEnableWorldBoundsChecks = 0x22d; // char : 1
		constexpr auto bEnableNavigationSystem = 0x22d; // char : 1
		constexpr auto bEnableAISystem = 0x22d; // char : 1
		constexpr auto bEnableWorldComposition = 0x22d; // char : 1
		constexpr auto bUseClientSideLevelStreamingVolumes = 0x22d; // char : 1
		constexpr auto bEnableWorldOriginRebasing = 0x22d; // char : 1
		constexpr auto bWorldGravitySet = 0x22e; // char : 1
		constexpr auto bGlobalGravitySet = 0x22e; // char : 1
		constexpr auto bMinimizeBSPSections = 0x22e; // char : 1
		constexpr auto bForceNoPrecomputedLighting = 0x22e; // char : 1
		constexpr auto bHighPriorityLoading = 0x22e; // char : 1
		constexpr auto bHighPriorityLoadingLocal = 0x22e; // char : 1
		constexpr auto bOverrideDefaultBroadphaseSettings = 0x22e; // char : 1
		constexpr auto NavigationSystemConfig = 0x230; // UNavigationSystemConfig*
		constexpr auto NavigationSystemConfigOverride = 0x238; // UNavigationSystemConfig*
		constexpr auto WorldToMeters = 0x240; // float
		constexpr auto KillZ = 0x244; // float
		constexpr auto KillZDamageType = 0x248; // UDamageType*
		constexpr auto WorldGravityZ = 0x250; // float
		constexpr auto GlobalGravityZ = 0x254; // float
		constexpr auto DefaultPhysicsVolumeClass = 0x258; // ADefaultPhysicsVolume*
		constexpr auto PhysicsCollisionHandlerClass = 0x260; // UPhysicsCollisionHandler*
		constexpr auto DefaultGameMode = 0x268; // AGameModeBase*
		constexpr auto GameNetworkManagerClass = 0x270; // AGameNetworkManager*
		constexpr auto PackedLightAndShadowMapTextureSize = 0x278; // int32_t
		constexpr auto DefaultColorScale = 0x27c; // FVector
		constexpr auto DefaultMaxDistanceFieldOcclusionDistance = 0x288; // float
		constexpr auto GlobalDistanceFieldViewDistance = 0x28c; // float
		constexpr auto DynamicIndirectShadowsSelfShadowingIntensity = 0x290; // float
		constexpr auto DefaultReverbSettings = 0x298; // FReverbSettings
		constexpr auto DefaultAmbientZoneSettings = 0x2b8; // FInteriorSettings
		constexpr auto MonoCullingDistance = 0x2dc; // float
		constexpr auto DefaultBaseSoundMix = 0x2e0; // USoundMix*
		constexpr auto TimeDilation = 0x2e8; // float
		constexpr auto MatineeTimeDilation = 0x2ec; // float
		constexpr auto DemoPlayTimeDilation = 0x2f0; // float
		constexpr auto MinGlobalTimeDilation = 0x2f4; // float
		constexpr auto MaxGlobalTimeDilation = 0x2f8; // float
		constexpr auto MinUndilatedFrameTime = 0x2fc; // float
		constexpr auto MaxUndilatedFrameTime = 0x300; // float
		constexpr auto BroadphaseSettings = 0x304; // FBroadphaseSettings
		constexpr auto Pauser = 0x348; // APlayerState*
		constexpr auto ReplicationViewers = 0x350; // TArray<FNetViewer>
		constexpr auto AssetUserData = 0x360; // TArray<UAssetUserData*>
		constexpr auto PauserPlayerState = 0x370; // APlayerState*
		constexpr auto MaxNumberOfBookmarks = 0x378; // int32_t
		constexpr auto DefaultBookmarkClass = 0x380; // UBookmarkBase*
		constexpr auto BookmarkArray = 0x388; // TArray<UBookmarkBase*>
		constexpr auto LastBookmarkClass = 0x398; // UBookmarkBase*
	}

	namespace n_ALODActor {
		constexpr auto StaticMeshComponent = 0x220; // UStaticMeshComponent*
		constexpr auto ImpostersStaticMeshComponents = 0x228; // TMap<UMaterialInterface*, UInstancedStaticMeshComponent*>
		constexpr auto Proxy = 0x278; // UHLODProxy*
		constexpr auto Key = 0x280; // FName
		constexpr auto LODDrawDistance = 0x288; // float
		constexpr auto LODLevel = 0x28c; // int32_t
		constexpr auto SubActors = 0x290; // TArray<AActor*>
		constexpr auto CachedNumHLODLevels = 0x2a0; // char
	}

	namespace n_UPlatformInterfaceWebResponse {
		constexpr auto OriginalURL = 0x28; // FString
		constexpr auto ResponseCode = 0x38; // int32_t
		constexpr auto Tag = 0x3c; // int32_t
		constexpr auto StringResponse = 0x40; // FString
		constexpr auto BinaryResponse = 0x50; // TArray<char>
	}

	namespace n_ASphereReflectionCapture {
		constexpr auto DrawCaptureRadius = 0x228; // UDrawSphereComponent*
	}

	namespace n_UBPW_PlatoonManagementStack_Notification_C {
		constexpr auto UberGraphFrame = 0x260; // FPointerToUberGraphFrame
	}

	namespace n_UButtonWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto ButtonStyle = 0x30; // FButtonStyle
	}

	namespace n_UEdGraph {
		constexpr auto Schema = 0x28; // UEdGraphSchema*
		constexpr auto Nodes = 0x30; // TArray<UEdGraphNode*>
		constexpr auto bEditable = 0x40; // char : 1
		constexpr auto bAllowDeletion = 0x40; // char : 1
		constexpr auto bAllowRenaming = 0x40; // char : 1
	}

	namespace n_UMaterialInstance {
		constexpr auto PhysMaterial = 0x88; // UPhysicalMaterial*
		constexpr auto PhysicalMaterialMap = 0x90; // UPhysicalMaterial* [0x8]
		constexpr auto Parent = 0xd0; // UMaterialInterface*
		constexpr auto bHasStaticPermutationResource = 0xd8; // char : 1
		constexpr auto bOverrideSubsurfaceProfile = 0xd8; // char : 1
		constexpr auto ScalarParameterValues = 0xe0; // TArray<FScalarParameterValue>
		constexpr auto VectorParameterValues = 0xf0; // TArray<FVectorParameterValue>
		constexpr auto TextureParameterValues = 0x100; // TArray<FTextureParameterValue>
		constexpr auto RuntimeVirtualTextureParameterValues = 0x110; // TArray<FRuntimeVirtualTextureParameterValue>
		constexpr auto FontParameterValues = 0x120; // TArray<FFontParameterValue>
		constexpr auto BasePropertyOverrides = 0x130; // FMaterialInstanceBasePropertyOverrides
		constexpr auto StaticParameters = 0x148; // FStaticParameterSet
		constexpr auto CachedLayerParameters = 0x188; // FMaterialCachedParameters
		constexpr auto CachedReferencedTextures = 0x328; // TArray<UObject*>
	}

	namespace n_AShooterWeapon {
		constexpr auto FPPAnimationParams = 0x238; // FWeaponFPPAnimationParams
		constexpr auto WeaponMetaData = 0x2d8; // FDataTableRowHandle
		constexpr auto Type = 0x2e8; // EWeaponType
		constexpr auto AttachSocketFPP = 0x2ec; // FName
		constexpr auto AttachSocketTPP = 0x2f4; // FName
		constexpr auto AdsCameraLagSettings = 0x2fc; // FCameraLagSettings
		constexpr auto HipCameraLagSettings = 0x318; // FCameraLagSettings
		constexpr auto RecoilAndSpread = 0x338; // FRecoilAndSpread
		constexpr auto RecoilAndSpread_ADS = 0x368; // FRecoilAndSpread
		constexpr auto RecoilAndSpreadState = 0x398; // FRecoilAndSpreadState
		constexpr auto MyPawn = 0x3a0; // AShooterCharacter*
		constexpr auto WeaponConfig = 0x3a8; // FWeaponData
		constexpr auto Mesh1P = 0x3c8; // USkeletalMeshComponent*
		constexpr auto Mesh3P = 0x3d0; // USkeletalMeshComponent*
		constexpr auto MuzzleAudio = 0x3d8; // TArray<UAudioComponent*>
		constexpr auto MuzzleAudioTails = 0x3e8; // TArray<UAudioComponent*>
		constexpr auto MuzzleAttachPoint = 0x3fc; // FName
		constexpr auto CasingEjectPoint = 0x404; // FName
		constexpr auto MuzzleFX = 0x410; // UParticleSystem*
		constexpr auto MuzzleFX_3P = 0x418; // UParticleSystem*
		constexpr auto bLoopedMuzzleFX = 0x420; // char : 1
		constexpr auto CasingFX = 0x428; // UParticleSystem*
		constexpr auto CasingScale1P = 0x430; // float
		constexpr auto MuzzlePSC = 0x438; // UParticleSystemComponent*
		constexpr auto FireCameraShake = 0x440; // UCameraShake*
		constexpr auto FireForceFeedback = 0x448; // UForceFeedbackEffect*
		constexpr auto FireSoundMode = 0x450; // EWeaponSoundMode
		constexpr auto MaxTPPTails = 0x451; // char
		constexpr auto MaxFPPTails = 0x452; // char
		constexpr auto MaxSingleFireSounds = 0x453; // char
		constexpr auto bForceStopFireSound = 0x454; // char : 1
		constexpr auto FireSound = 0x458; // USoundCue*
		constexpr auto LastLoadedBulletFireSound = 0x460; // USoundCue*
		constexpr auto FireTailSound = 0x468; // USoundCue*
		constexpr auto LastLoadedBulletFireTailSound = 0x470; // USoundCue*
		constexpr auto StopFireSound = 0x478; // USoundCue*
		constexpr auto OutOfAmmoSound = 0x480; // USoundCue*
		constexpr auto JammedSound = 0x488; // USoundCue*
		constexpr auto EquipSound = 0x490; // USoundCue*
		constexpr auto EquipAC = 0x498; // TWeakObjectPtr<UAudioComponent>
		constexpr auto TPPAnimationSetClass = 0x4a0; // UWeaponTPPAnimationSet*
		constexpr auto FPPAnimationSetClass = 0x4a8; // UWeaponFPPAnimationSet*
		constexpr auto ArtificialEquipDelay = 0x4b0; // float
		constexpr auto bLoopedFireAnim = 0x4b4; // char : 1
		constexpr auto EjectedClipActorClass = 0x4b8; // AShooterWeaponEject*
		constexpr auto ClipEjectionSocket = 0x4c0; // FName
		constexpr auto ClipEjectionSpeed1P = 0x4c8; // float
		constexpr auto ClipEjectionSpeed3P = 0x4cc; // float
		constexpr auto bEjectEmptyClip = 0x4d0; // char : 1
		constexpr auto bPendingReload = 0x4ec; // char : 1
		constexpr auto CurrentState = 0x4fc; // EWeaponState
		constexpr auto MaxClips = 0x50c; // char
		constexpr auto CurrentAmmo = 0x50e; // uint16_t
		constexpr auto CurrentClipInfo = 0x510; // FWeaponClipInfo
		constexpr auto BurstCounter = 0x513; // FHLLWeaponBurstInfo
		constexpr auto ADSInfo = 0x570; // FWeaponADSInfo
		constexpr auto CurrentZoomIndex = 0x608; // int32_t
		constexpr auto bPendingBoltCycle = 0x60c; // char : 1
		constexpr auto HipSettings = 0x628; // FHLLWeaponDOFSettings
		constexpr auto ADSSettings = 0x648; // FHLLWeaponDOFSettings
		constexpr auto OverheatRatio = 0x668; // float
		constexpr auto bOverheatLocked = 0x66c; // char : 1
		constexpr auto OverheatConfig = 0x678; // FWeaponOverheatData
		constexpr auto PackedOverheatData = 0x6a0; // FRepOverheatData
		constexpr auto OverheatPSC = 0x6a8; // UParticleSystemComponent*
		constexpr auto DeployData = 0x6b0; // FRepMountableData
		constexpr auto RemoteBipodYaw = 0x700; // char
		constexpr auto MountableConfig = 0x708; // FMountableWeaponConfig
		constexpr auto bForceNotifyClientOnShotFailure = 0x7f0; // char : 1
		constexpr auto WeaponCasingMode = 0x800; // EWeaponCasingMode
		constexpr auto BulletCasingSettings = 0x808; // UHLLWeaponCasingSettings*
		constexpr auto bAnimationReloadLock = 0x814; // char : 1
		constexpr auto bAnimationBoltLock = 0x814; // char : 1
		constexpr auto bSupportBloodMaterial = 0x814; // char : 1
		constexpr auto BloodAmount = 0x818; // float
		constexpr auto DynamicMats_1P = 0x820; // TArray<UMaterialInstanceDynamic*>
		constexpr auto DynamicMats_3P = 0x830; // TArray<UMaterialInstanceDynamic*>
		constexpr auto HintsToDisplay = 0x840; // TSet<EHint>
		constexpr auto bHideHintsOnUnequip = 0x890; // char : 1
		constexpr auto WeaponVibrationData = 0x898; // UHLLWeaponVibrationData*
		constexpr auto SpecialVibrationData = 0x8a0; // UHLLWeaponVibrationData*
		constexpr auto FireVibrationEventController = 0x8a8; // UVibrationEventController*
		constexpr auto FireIncrementStat = 0x8b0; // EHLLPlayerStat
	}

	namespace n_UMaterialExpressionShadingModel {
		constexpr auto ShadingModel = 0x40; // EMaterialShadingModel
	}

	namespace n_UMaterialFunctionInterface {
		constexpr auto StateId = 0x28; // FGuid
		constexpr auto MaterialFunctionUsage = 0x38; // EMaterialFunctionUsage
	}

	namespace n_UReportPlayerDialog_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto TargetGlobalPlayerId = 0x238; // FString
		constexpr auto OnOpenCloseChanged = 0x248; // FMulticastInlineDelegate
	}

	namespace n_UAnimationSharingStateProcessor {
		constexpr auto AnimationStateEnum = 0x28; // TSoftObjectPtr<UEnum>
	}

	namespace n_AShooterBot {
		constexpr auto BotBehavior = 0x1038; // UBehaviorTree*
	}

	namespace n_UAISenseEvent_Damage {
		constexpr auto Event = 0x28; // FAIDamageEvent
	}

	namespace n_UPanelSlot {
		constexpr auto Parent = 0x28; // UPanelWidget*
		constexpr auto Content = 0x30; // UWidget*
	}

	namespace n_AVehicleDrop_Supplies {
		constexpr auto DismantleTime = 0x288; // float
		constexpr auto DisplayName = 0x290; // FText
		constexpr auto ImpactFX = 0x2a8; // AShooterImpactEffect*
		constexpr auto ObjectMesh = 0x2b0; // UStaticMeshComponent*
		constexpr auto SupplyComponent = 0x2b8; // UHLLSupplyComponent*
		constexpr auto IndicatorComponent = 0x2c0; // UHLLIndicatorComponent*
		constexpr auto MapComponent = 0x2c8; // UHLLMapComponent*
		constexpr auto HealthComponent = 0x2d0; // UHLLSimpleHealthComponent*
		constexpr auto Team = 0x2d8; // ETeam
		constexpr auto DamageFilterType = 0x2d9; // EHLLDamageFilterType
		constexpr auto SpawnedByPlayer = 0x2e0; // AShooterPlayerState*
	}

	namespace n_UMaterialFunction {
		constexpr auto Description = 0x40; // FString
		constexpr auto bExposeToLibrary = 0x50; // char : 1
		constexpr auto bPrefixParameterNames = 0x50; // char : 1
		constexpr auto bReentrantFlag = 0x50; // char : 1
	}

	namespace n_UHLLMapIcon_Player {
		constexpr auto bIsHighlighted = 0x368; // char : 1
		constexpr auto PlayerPingAnimation = 0x378; // UWidgetAnimation*
		constexpr auto HighlightAnimation = 0x380; // UWidgetAnimation*
		constexpr auto PlatoonID = 0x388; // UTextBlock*
		constexpr auto Icon_Star = 0x390; // UImage*
		constexpr auto LocalPlayerFOV = 0x398; // UImage*
		constexpr auto RotationContainer = 0x3a0; // UWidget*
	}

	namespace n_AShooterWeapon_TravelTime {
		constexpr auto ProjectileClass = 0x8b8; // ARifleProjectile*
		constexpr auto TravelingProjectiles = 0x8c0; // TMap<uint32_t, ARifleProjectile*>
	}

	namespace n_USoundNodeDelay {
		constexpr auto DelayMin = 0x48; // float
		constexpr auto DelayMax = 0x4c; // float
	}

	namespace n_UMovieSceneSubSection {
		constexpr auto Parameters = 0xe0; // FMovieSceneSectionParameters
		constexpr auto StartOffset = 0x104; // float
		constexpr auto TimeScale = 0x108; // float
		constexpr auto PrerollTime = 0x10c; // float
		constexpr auto SubSequence = 0x110; // UMovieSceneSequence*
		constexpr auto ActorToRecord = 0x118; // LazyObjectProperty
		constexpr auto TargetSequenceName = 0x138; // FString
		constexpr auto TargetPathToRecordTo = 0x148; // FDirectoryPath
	}

	namespace n_UParticleEmitter {
		constexpr auto EmitterName = 0x28; // FName
		constexpr auto SubUVDataOffset = 0x30; // int32_t
		constexpr auto EmitterRenderMode = 0x34; // EEmitterRenderMode
		constexpr auto SignificanceLevel = 0x35; // EParticleSignificanceLevel
		constexpr auto bUseLegacySpawningBehavior = 0x37; // char : 1
		constexpr auto ConvertedModules = 0x37; // char : 1
		constexpr auto bIsSoloing = 0x37; // char : 1
		constexpr auto bCookedOut = 0x37; // char : 1
		constexpr auto bDisabledLODsKeepEmitterAlive = 0x37; // char : 1
		constexpr auto bDisableWhenInsignficant = 0x38; // char : 1
		constexpr auto LODLevels = 0x40; // TArray<UParticleLODLevel*>
		constexpr auto PeakActiveParticles = 0x50; // int32_t
		constexpr auto InitialAllocationCount = 0x54; // int32_t
		constexpr auto QualityLevelSpawnRateScale = 0x58; // float
		constexpr auto DetailModeBitmask = 0x5c; // uint32_t
	}

	namespace n_UARPin {
		constexpr auto TrackedGeometry = 0x28; // UARTrackedGeometry*
		constexpr auto PinnedComponent = 0x30; // USceneComponent*
		constexpr auto LocalToTrackingTransform = 0x40; // FTransform
		constexpr auto LocalToAlignedTrackingTransform = 0x70; // FTransform
		constexpr auto TrackingState = 0xa0; // EARTrackingState
		constexpr auto OnARTrackingStateChanged = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnARTransformUpdated = 0xd0; // FMulticastInlineDelegate
	}

	namespace n_UEditableGameplayTagQuery {
		constexpr auto UserDescription = 0x28; // FString
		constexpr auto RootExpression = 0x48; // UEditableGameplayTagQueryExpression*
		constexpr auto TagQueryExportText_Helper = 0x50; // FGameplayTagQuery
	}

	namespace n_UMovieSceneSequencePlayer {
		constexpr auto OnPlay = 0x408; // FMulticastInlineDelegate
		constexpr auto OnPlayReverse = 0x418; // FMulticastInlineDelegate
		constexpr auto OnStop = 0x428; // FMulticastInlineDelegate
		constexpr auto OnPause = 0x438; // FMulticastInlineDelegate
		constexpr auto OnFinished = 0x448; // FMulticastInlineDelegate
		constexpr auto Status = 0x458; // EMovieScenePlayerStatus
		constexpr auto bReversePlayback = 0x45c; // char : 1
		constexpr auto Sequence = 0x460; // UMovieSceneSequence*
		constexpr auto StartTime = 0x468; // FFrameNumber
		constexpr auto DurationFrames = 0x46c; // int32_t
		constexpr auto CurrentNumLoops = 0x470; // int32_t
		constexpr auto PlaybackSettings = 0x488; // FMovieSceneSequencePlaybackSettings
		constexpr auto RootTemplateInstance = 0x4a0; // FMovieSceneRootEvaluationTemplateInstance
		constexpr auto NetSyncProps = 0x828; // FMovieSceneSequenceReplProperties
		constexpr auto PlaybackClient = 0x838; // TScriptInterface<IMovieScenePlaybackClient>
	}

	namespace n_USceneCaptureComponentCube {
		constexpr auto TextureTarget = 0x288; // UTextureRenderTargetCube*
		constexpr auto bCaptureRotation = 0x290; // bool
		constexpr auto TextureTargetLeft = 0x298; // UTextureRenderTargetCube*
		constexpr auto TextureTargetRight = 0x2a0; // UTextureRenderTargetCube*
		constexpr auto TextureTargetODS = 0x2a8; // UTextureRenderTarget2D*
		constexpr auto IPD = 0x2b0; // float
	}

	namespace n_UGameplayTask_WaitDelay {
		constexpr auto OnFinish = 0x68; // FMulticastInlineDelegate
	}

	namespace n_UUMGSequencePlayer {
		constexpr auto Animation = 0x408; // UWidgetAnimation*
	}

	namespace n_AShooterGameSession {
		constexpr auto BeaconHost = 0x4f0; // AOnlineBeaconHost*
		constexpr auto ServerQueueBeaconHostObject = 0x4f8; // AServerQueueBeaconHostObject*
	}

	namespace n_AEmitterCameraLensEffectBase {
		constexpr auto PS_CameraEffect = 0x270; // UParticleSystem*
		constexpr auto PS_CameraEffectNonExtremeContent = 0x278; // UParticleSystem*
		constexpr auto BaseCamera = 0x280; // APlayerCameraManager*
		constexpr auto RelativeTransform = 0x290; // FTransform
		constexpr auto BaseFOV = 0x2c0; // float
		constexpr auto bAllowMultipleInstances = 0x2c4; // char : 1
		constexpr auto bResetWhenRetriggered = 0x2c4; // char : 1
		constexpr auto EmittersToTreatAsSame = 0x2c8; // TArray<AEmitterCameraLensEffectBase*>
		constexpr auto DistFromCamera = 0x2d8; // float
	}

	namespace n_UMaterialInstanceConstant {
		constexpr auto PhysMaterialMask = 0x408; // UPhysicalMaterialMask*
	}

	namespace n_UMaterialExpressionGIReplace {
		constexpr auto Default = 0x40; // FExpressionInput
		constexpr auto StaticIndirect = 0x54; // FExpressionInput
		constexpr auto DynamicIndirect = 0x68; // FExpressionInput
	}

	namespace n_APawn {
		constexpr auto bUseControllerRotationPitch = 0x228; // char : 1
		constexpr auto bUseControllerRotationYaw = 0x228; // char : 1
		constexpr auto bUseControllerRotationRoll = 0x228; // char : 1
		constexpr auto bCanAffectNavigationGeneration = 0x228; // char : 1
		constexpr auto BaseEyeHeight = 0x22c; // float
		constexpr auto AutoPossessPlayer = 0x230; // EAutoReceiveInput
		constexpr auto AutoPossessAI = 0x231; // EAutoPossessAI
		constexpr auto RemoteViewPitch = 0x232; // char
		constexpr auto AIControllerClass = 0x238; // AController*
		constexpr auto PlayerState = 0x240; // APlayerState*
		constexpr auto LastHitBy = 0x250; // AController*
		constexpr auto Controller = 0x258; // AController*
		constexpr auto ControlInputVector = 0x264; // FVector
		constexpr auto LastControlInputVector = 0x270; // FVector
	}

	namespace n_UHLLCommanderUIItem {
		constexpr auto AssignedAbility = 0x234; // TWeakObjectPtr<AHLLCommanderAbility>
		constexpr auto OwningUI = 0x23c; // TWeakObjectPtr<UHLLCommanderUI>
		constexpr auto RootButton = 0x248; // UButton*
		constexpr auto RootBorder = 0x250; // UBorder*
		constexpr auto IconBorder = 0x258; // UBorder*
		constexpr auto DisplayIcon = 0x260; // UImage*
		constexpr auto DisplayIconProgress = 0x268; // UImage*
		constexpr auto DisplayName = 0x270; // UTextBlock*
		constexpr auto CooldownBar = 0x278; // UProgressBar*
		constexpr auto Cost = 0x280; // UTextBlock*
		constexpr auto ExecuteButton = 0x288; // UButton*
		constexpr auto PulseAnim = 0x290; // UWidgetAnimation*
	}

	namespace n_AHLLMapData_ReconItem {
		constexpr auto ReconData = 0x248; // FReconDataItem
	}

	namespace n_UParticleSystemReplay {
		constexpr auto ClipIDNumber = 0x28; // int32_t
	}

	namespace n_UHLLUI_PlayerLevel {
		constexpr auto bUseGrouping = 0x230; // char : 1
		constexpr auto PlayerName = 0x238; // UTextBlock*
		constexpr auto PlayerLevel = 0x240; // UTextBlock*
		constexpr auto CurrentXP = 0x248; // UTextBlock*
		constexpr auto NextLevelXP = 0x250; // UTextBlock*
		constexpr auto LevelProgress = 0x258; // UProgressBar*
		constexpr auto RankContainer = 0x260; // UWidget*
		constexpr auto RankIcon = 0x268; // UImage*
	}

	namespace n_USizeBoxSlot {
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x58; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x59; // EVerticalAlignment
	}

	namespace n_UHTP_Widget_DeploymentScreen_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Image_1 = 0x238; // UImage*
		constexpr auto Image_2 = 0x240; // UImage*
		constexpr auto Image_3 = 0x248; // UImage*
		constexpr auto Image_22 = 0x250; // UImage*
		constexpr auto Image_23 = 0x258; // UImage*
		constexpr auto RichTextBlock_1 = 0x260; // URichTextBlock*
		constexpr auto txt_Name = 0x268; // UTextBlock*
		constexpr auto txt_Tagline = 0x270; // UTextBlock*
	}

	namespace n_UCapsuleComponent {
		constexpr auto CapsuleHalfHeight = 0x428; // float
		constexpr auto CapsuleRadius = 0x42c; // float
	}

	namespace n_USlateBrushAsset {
		constexpr auto Brush = 0x28; // FSlateBrush
	}

	namespace n_UStressTestPlayerControllerComponent {
		constexpr auto StressTestPawnClass = 0xb8; // AShooterCharacter*
		constexpr auto PathFollowing = 0xc0; // UPathFollowingComponent*
		constexpr auto bSimulationStopped = 0xc8; // char : 1
	}

	namespace n_UWGT_RoundSummaryPlayer_C {
		constexpr auto UberGraphFrame = 0x328; // FPointerToUberGraphFrame
		constexpr auto Button_179 = 0x330; // UButton*
		constexpr auto FriendButton = 0x338; // UButton*
		constexpr auto Image = 0x340; // UImage*
		constexpr auto Image_9 = 0x348; // UImage*
		constexpr auto Image_10 = 0x350; // UImage*
		constexpr auto PlatformIcon = 0x358; // UImage*
		constexpr auto Tooltip_Widget_Kick = 0x360; // UW_HoverToolTip_C*
		constexpr auto Tooltip_Widget_Mute = 0x368; // UW_HoverToolTip_C*
		constexpr auto Tooltip_Widget_Friend = 0x370; // UW_HoverToolTip_C*
		constexpr auto Scoreboard = 0x378; // UWGT_RoundSummaryDetails_V2_C*
		constexpr auto DefaultBGAlpha = 0x380; // float
		constexpr auto OnCustomNavigation = 0x388; // FMulticastInlineDelegate
		constexpr auto PlatoonButtonIndex = 0x398; // int32_t
		constexpr auto CustomNavigationTarget = 0x3a0; // UWidget*
		constexpr auto OnFocus = 0x3a8; // FMulticastInlineDelegate
		constexpr auto OnFocusLoss = 0x3b8; // FMulticastInlineDelegate
		constexpr auto bIsFocused = 0x3c8; // bool
		constexpr auto MenuAnchorContent = 0x3d0; // UWidget*
		constexpr auto HilightColour = 0x3d8; // FLinearColor
	}

	namespace n_UAnimationSettings {
		constexpr auto CompressCommandletVersion = 0x38; // int32_t
		constexpr auto KeyEndEffectorsMatchNameArray = 0x40; // TArray<FString>
		constexpr auto ForceRecompression = 0x50; // bool
		constexpr auto bOnlyCheckForMissingSkeletalMeshes = 0x51; // bool
		constexpr auto bForceBelowThreshold = 0x52; // bool
		constexpr auto bFirstRecompressUsingCurrentOrDefault = 0x53; // bool
		constexpr auto bRaiseMaxErrorToExisting = 0x54; // bool
		constexpr auto bEnablePerformanceLog = 0x55; // bool
		constexpr auto bStripAnimationDataOnDedicatedServer = 0x56; // bool
		constexpr auto bTickAnimationOnSkeletalMeshInit = 0x57; // bool
	}

	namespace n_UParticleModuleSize_Seeded {
		constexpr auto RandomSeedInfo = 0x78; // FParticleRandomSeedInfo
	}

	namespace n_AHLLMapData_Player_Replicator {
		constexpr auto DataClass = 0x228; // AHLLMapData_Player*
		constexpr auto Data = 0x230; // FMapDataPlayerArray
		constexpr auto MapDataPlayerArray = 0x350; // TArray<AHLLMapData_Player*>
	}

	namespace n_UShooterGameUserSettings {
		constexpr auto HLL_GlobalQualityLevel = 0x120; // int32_t
		constexpr auto HLL_SSAOQualityLevel = 0x124; // int32_t
		constexpr auto TeamNameplateDistIndex = 0x128; // int32_t
		constexpr auto UnitNameplateDistIndex = 0x12c; // int32_t
		constexpr auto SeatNameplateDistIndex = 0x130; // int32_t
		constexpr auto NameplateSwitchRatio = 0x134; // float
		constexpr auto PlayerNameplateOpacity = 0x138; // float
		constexpr auto bUseNameplateOcclusion = 0x13c; // bool
		constexpr auto SelectedGamepadLayout = 0x140; // FName
		constexpr auto HLL_ResolutionScale = 0x148; // float
		constexpr auto bAnalyticsEnabled = 0x14c; // bool
		constexpr auto HLLSettingsVersion = 0x14e; // char
		constexpr auto bIsLanMatch = 0x150; // bool
		constexpr auto Brightness = 0x154; // float
		constexpr auto MotionBlur = 0x158; // bool
		constexpr auto MouseSensitivity = 0x15c; // float
		constexpr auto ADSMouseSensitivity = 0x160; // float
		constexpr auto InvertMouseVehicle = 0x164; // bool
		constexpr auto InvertMouseFirstPerson = 0x165; // bool
		constexpr auto GamepadSensitivity = 0x168; // float
		constexpr auto GamepadSensitivityY = 0x16c; // float
		constexpr auto ADSGamepadSensitivity = 0x170; // float
		constexpr auto ADSGamepadSensitivityY = 0x174; // float
		constexpr auto ScopedGamepadSensitivity = 0x178; // float
		constexpr auto GamepadCursorSensitivity = 0x17c; // float
		constexpr auto GamepadMovementDeadZone = 0x180; // float
		constexpr auto GamepadLookDeadZone = 0x184; // float
		constexpr auto GamepadAimAssist = 0x188; // EHLLAimAssistLevel
		constexpr auto InvertAnalogVehicleYAxis = 0x189; // bool
		constexpr auto InvertAnalogVehicleXAxis = 0x18a; // bool
		constexpr auto InvertAnalogFirstPersonYAxis = 0x18b; // bool
		constexpr auto InvertAnalogFirstPersonXAxis = 0x18c; // bool
		constexpr auto ToggleSteadyAim = 0x18d; // bool
		constexpr auto ToggleCrouch = 0x18e; // bool
		constexpr auto ToggleADS = 0x18f; // bool
		constexpr auto ToggleSprint = 0x190; // bool
		constexpr auto ToggleLean = 0x191; // bool
		constexpr auto HideKickVoteRequests = 0x192; // bool
		constexpr auto MasterVolume = 0x194; // float
		constexpr auto MusicVolume = 0x198; // float
		constexpr auto SfxVolume = 0x19c; // float
		constexpr auto VoiceVolume = 0x1a0; // float
		constexpr auto MicVolume = 0x1a4; // float
		constexpr auto UIVolume_3D = 0x1a8; // float
		constexpr auto UIVolume_2D = 0x1ac; // float
		constexpr auto bManualBolting = 0x1b0; // bool
		constexpr auto FOV = 0x1b4; // float
		constexpr auto bIsDedicatedServer = 0x1b8; // bool
		constexpr auto MasterAudioClass = 0x1c0; // USoundClass*
		constexpr auto SFXAudioClass = 0x1c8; // USoundClass*
		constexpr auto MusicAudioClass = 0x1d0; // USoundClass*
		constexpr auto UIAudioClass_3D = 0x1d8; // USoundClass*
		constexpr auto UIAudioClass_2D = 0x1e0; // USoundClass*
		constexpr auto ScalabilityLevelsSnapshot = 0x1e8; // FScalabilityLevelsSnapshot
		constexpr auto bHideEmptyServers = 0x218; // bool
		constexpr auto bHideFullServers = 0x219; // bool
		constexpr auto bHideOfficialServers = 0x21a; // bool
		constexpr auto bHideCommunityServers = 0x21b; // bool
		constexpr auto bHidePasswordedServers = 0x21c; // bool
		constexpr auto DeadBodyDespawnDelay = 0x220; // float
		constexpr auto bProfanityFilterEnabled = 0x224; // bool
		constexpr auto bShowChatOnNewMessage = 0x225; // bool
		constexpr auto SavedCosmetics = 0x228; // TArray<FHLLSavedCharacterCosmetics>
		constexpr auto HLLCosmeticsVersion = 0x238; // char
		constexpr auto FavDisplayFaction = 0x239; // EFaction
		constexpr auto FavDisplayRole = 0x23a; // EPlayerRole
		constexpr auto SavedLoadouts = 0x240; // TArray<FHLLSavedCharacterLoadout>
		constexpr auto AntiAliasingMethod = 0x250; // EHLLAntiAliasingMethod
		constexpr auto CompletedHints = 0x258; // TArray<bool>
		constexpr auto HintsVersion = 0x268; // int32_t
		constexpr auto bHintsEnabled = 0x26c; // bool
		constexpr auto Hints = 0x270; // FString
		constexpr auto bLinkMarkersToHUD = 0x280; // bool
		constexpr auto MarkerFadeScale = 0x284; // float
		constexpr auto POIFadeScale = 0x288; // float
		constexpr auto bHasShownDisclaimer = 0x28c; // bool
		constexpr auto HUDFadeTimeScale = 0x290; // float
		constexpr auto HUDMode = 0x294; // EHUDMode
		constexpr auto bDisableFPPBullets = 0x295; // char : 1
		constexpr auto OnResolutionChangeReverted = 0x298; // FMulticastInlineDelegate
		constexpr auto ClanTag = 0x2d0; // FString
		constexpr auto AspectRatioAxisConstraint = 0x2e0; // EAspectRatioAxisConstraint
		constexpr auto StreamModeSettings = 0x2e1; // FStreamerModeSettings
		constexpr auto bShowCommandMessages = 0x2e5; // bool
		constexpr auto VibrationEnabled = 0x2e6; // bool
		constexpr auto VibrationLevel = 0x2e7; // EHLLVibrationIntensityLevel
		constexpr auto AdaptiveTriggersEnabled = 0x2e8; // bool
		constexpr auto AdaptiveTriggersLevel = 0x2e9; // EHLLAdaptiveTriggerIntensityLevel
		constexpr auto ControllerAccelerationXValue = 0x2ec; // float
		constexpr auto ControllerAccelerationYValue = 0x2f0; // float
		constexpr auto MapIconScale = 0x310; // float
		constexpr auto bMapPingRepeating = 0x330; // bool
	}

	namespace n_UMultiLineEditableText {
		constexpr auto Text = 0x128; // FText
		constexpr auto HintText = 0x140; // FText
		constexpr auto HintTextDelegate = 0x158; // FDelegate
		constexpr auto WidgetStyle = 0x168; // FTextBlockStyle
		constexpr auto bIsReadOnly = 0x3d0; // bool
		constexpr auto Font = 0x3d8; // FSlateFontInfo
		constexpr auto SelectAllTextWhenFocused = 0x428; // bool
		constexpr auto ClearTextSelectionOnFocusLoss = 0x429; // bool
		constexpr auto RevertTextOnEscape = 0x42a; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0x42b; // bool
		constexpr auto AllowContextMenu = 0x42c; // bool
		constexpr auto VirtualKeyboardOptions = 0x42d; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardDismissAction = 0x42e; // EVirtualKeyboardDismissAction
		constexpr auto OnTextChanged = 0x430; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0x440; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleSubUVMovie {
		constexpr auto bUseEmitterTime = 0x70; // char : 1
		constexpr auto FrameRate = 0x78; // FRawDistributionFloat
		constexpr auto StartingFrame = 0xa8; // int32_t
	}

	namespace n_UHLLUI_LoadoutEntryTooltip {
		constexpr auto ItemName = 0x230; // UTextBlock*
		constexpr auto ItemDescription = 0x238; // UTextBlock*
		constexpr auto ItemAmmoCount = 0x240; // UTextBlock*
		constexpr auto ItemAmmoIcon = 0x248; // UImage*
	}

	namespace n_UHLLGoreComponent {
		constexpr auto DismembermentData = 0xb0; // UHLLDismemberData*
		constexpr auto DecalSets = 0xc8; // UDataTable*
		constexpr auto DecalRelevancyDistance = 0x120; // float
		constexpr auto SplatterRadius = 0x124; // float
		constexpr auto bAllBodiesGenerateGibs = 0x128; // char : 1
		constexpr auto LargeGibMassThreshold = 0x12c; // float
		constexpr auto GibImpact_SmallThreshold = 0x130; // float
		constexpr auto GibImpact_LargeThreshold = 0x134; // float
		constexpr auto BodyTrailCheckRate = 0x138; // float
		constexpr auto BodyTrailSpawnDist2D = 0x13c; // float
		constexpr auto BodyTrailTraceDistance = 0x140; // float
		constexpr auto BleedEmitter = 0x148; // UParticleSystem*
		constexpr auto PSC_BleedEmitter = 0x150; // TWeakObjectPtr<UParticleSystemComponent>
		constexpr auto MinMaxBleedDecalSpawnRate = 0x158; // FVector2D
		constexpr auto BleedDecalRandomOffset = 0x160; // float
		constexpr auto SplatterTraceDistanceModifier = 0x164; // float
		constexpr auto ImpactTraceDistance = 0x168; // float
		constexpr auto BloodPoolMaxScale = 0x16c; // float
		constexpr auto BloodPoolScaleSpeed = 0x170; // float
		constexpr auto MinTimeBetweenDamageResponse = 0x174; // float
		constexpr auto CurrentTrailMode = 0x178; // EHLLGoreTrailType
	}

	namespace n_UCheatManager {
		constexpr auto DebugCameraControllerRef = 0x28; // ADebugCameraController*
		constexpr auto DebugCameraControllerClass = 0x30; // ADebugCameraController*
	}

	namespace n_UDrawFrustumComponent {
		constexpr auto FrustumColor = 0x410; // FColor
		constexpr auto FrustumAngle = 0x414; // float
		constexpr auto FrustumAspectRatio = 0x418; // float
		constexpr auto FrustumStartDist = 0x41c; // float
		constexpr auto FrustumEndDist = 0x420; // float
		constexpr auto Texture = 0x428; // UTexture*
	}

	namespace n_UPlatformInterfaceBase {
		constexpr auto AllDelegates = 0x28; // TArray<FDelegateArray>
	}

	namespace n_UUdpMessagingSettings {
		constexpr auto EnableTransport = 0x28; // bool
		constexpr auto bAutoRepair = 0x29; // bool
		constexpr auto bStopServiceWhenAppDeactivates = 0x2a; // bool
		constexpr auto UnicastEndpoint = 0x30; // FString
		constexpr auto MulticastEndpoint = 0x40; // FString
		constexpr auto MessageFormat = 0x50; // EUdpMessageFormat
		constexpr auto MulticastTimeToLive = 0x51; // char
		constexpr auto StaticEndpoints = 0x58; // TArray<FString>
		constexpr auto EnableTunnel = 0x68; // bool
		constexpr auto TunnelUnicastEndpoint = 0x70; // FString
		constexpr auto TunnelMulticastEndpoint = 0x80; // FString
		constexpr auto RemoteTunnelEndpoints = 0x90; // TArray<FString>
	}

	namespace n_UMaterialExpressionConstant3Vector {
		constexpr auto Constant = 0x40; // FLinearColor
	}

	namespace n_UHLLTooltipBase {
		constexpr auto ViewportEdgePadding = 0x230; // float
		constexpr auto bAnchorAtBottom = 0x234; // char : 1
		constexpr auto ShowAnimation = 0x238; // UWidgetAnimation*
		constexpr auto Animation_ShowRate = 0x240; // float
		constexpr auto Animation_HideRate = 0x244; // float
		constexpr auto bIsDisplayed = 0x248; // char : 1
		constexpr auto CurrentContextItem = 0x24c; // TWeakObjectPtr<UWidget>
		constexpr auto GeometryRestriction = 0x258; // UWidget*
	}

	namespace n_AHLLTurnBackVolume {
		constexpr auto AffectedTeams = 0x258; // int32_t
	}

	namespace n_UW_HotkeyPanelElement_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto SB_Icon = 0x238; // UScaleBox*
		constexpr auto txt_hintText = 0x240; // UTextBlock*
		constexpr auto HintText = 0x248; // FText
		constexpr auto KeybindName = 0x260; // FName
		constexpr auto isKey = 0x268; // bool
		constexpr auto IconBrush = 0x270; // FSlateBrush
		constexpr auto KeyBind = 0x2f8; // FText
	}

	namespace n_UHLLDispenserListItem_Garrison {
		constexpr auto TeamLimitText = 0x258; // UTextBlock*
	}

	namespace n_AShooterWeapon_Melee {
		constexpr auto MaxReachDistance = 0x8b8; // float
		constexpr auto SweepSphereRadius = 0x8bc; // float
		constexpr auto CameraTargetBone = 0x8c0; // FName
		constexpr auto CameraTrackingSpeed = 0x8c8; // float
		constexpr auto MeleeAttackDamage = 0x8cc; // float
		constexpr auto WeaponBloodPerHit = 0x8d0; // float
		constexpr auto HandsBloodPerHit = 0x8d4; // float
		constexpr auto ScreenSplatterPerHit = 0x8d8; // float
		constexpr auto MeleeDamageType = 0x8e0; // UHLLMeleeAttackDamage*
		constexpr auto ImpactTemplate = 0x8e8; // AShooterImpactEffect*
		constexpr auto CurrentTarget = 0x8f0; // AShooterCharacter*
		constexpr auto ReplicatedHit = 0x8f8; // FHitResult
		constexpr auto ReplicatedMeleeAttackState = 0x980; // EReplicatedMeleeAttackState
	}

	namespace n_UIndicator_Marker_C {
		constexpr auto UberGraphFrame = 0x2d8; // FPointerToUberGraphFrame
		constexpr auto CommanderIcon = 0x2e0; // UImage*
		constexpr auto CommanderSwitch = 0x2e8; // UWidgetSwitcher*
		constexpr auto IconBG = 0x2f0; // UBorder*
	}

	namespace n_UInterpTrackFloatAnimBPParam {
		constexpr auto AnimBlueprintClass = 0x90; // UObject*
		constexpr auto AnimClass = 0x98; // UAnimInstance*
		constexpr auto ParamName = 0xa0; // FName
	}

	namespace n_UAISenseConfig_Damage {
		constexpr auto Implementation = 0x48; // UAISense_Damage*
	}

	namespace n_USpacer {
		constexpr auto Size = 0x108; // FVector2D
	}

	namespace n_UWGT_RoleSelectItem_V2_C {
		constexpr auto UberGraphFrame = 0x268; // FPointerToUberGraphFrame
		constexpr auto LevelBorder = 0x270; // UBorder*
		constexpr auto SelectButton = 0x278; // UButton*
		constexpr auto TextBorder = 0x280; // UBorder*
		constexpr auto bFavourite = 0x288; // bool
		constexpr auto OnClick = 0x290; // FMulticastInlineDelegate
		constexpr auto bHasSectionFocus = 0x2a0; // bool
		constexpr auto ChangeFaction = 0x2a8; // FMulticastInlineDelegate
	}

	namespace n_UHLLUIStyleContainer {
		constexpr auto MapStyle = 0x30; // FHLLUIStyle
	}

	namespace n_UFloatingPawnMovement {
		constexpr auto MaxSpeed = 0x138; // float
		constexpr auto Acceleration = 0x13c; // float
		constexpr auto Deceleration = 0x140; // float
		constexpr auto TurningBoost = 0x144; // float
		constexpr auto bPositionCorrected = 0x148; // char : 1
	}

	namespace n_UHLLOptionScreenBase {
		constexpr auto ViewportClient = 0x348; // UShooterGameViewportClient*
		constexpr auto VoipMicCheckWidgetClass = 0x350; // UVoipMicCheckWidget*
		constexpr auto VoipConnectionButton = 0x358; // UHLLUI_OptionSelection*
		constexpr auto VoipConnectionStatusText = 0x360; // UTextBlock*
		constexpr auto VoipConnectionLabel = 0x368; // UTextBlock*
		constexpr auto VoipConnectionStatusChangeTimeout = 0x370; // float
	}

	namespace n_UMaterialExpressionVertexInterpolator {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UARTextureCameraDepth {
		constexpr auto DepthQuality = 0xd8; // EARDepthQuality
		constexpr auto DepthAccuracy = 0xd9; // EARDepthAccuracy
		constexpr auto bIsTemporallySmoothed = 0xda; // bool
	}

	namespace n_UMockDataMeshTrackerComponent {
		constexpr auto OnMeshTrackerUpdated = 0x1f0; // FMulticastInlineDelegate
		constexpr auto ScanWorld = 0x200; // bool
		constexpr auto RequestNormals = 0x201; // bool
		constexpr auto RequestVertexConfidence = 0x202; // bool
		constexpr auto VertexColorMode = 0x203; // EMeshTrackerVertexColorMode
		constexpr auto BlockVertexColors = 0x208; // TArray<FColor>
		constexpr auto VertexColorFromConfidenceZero = 0x218; // FLinearColor
		constexpr auto VertexColorFromConfidenceOne = 0x228; // FLinearColor
		constexpr auto UpdateInterval = 0x238; // float
		constexpr auto MRMesh = 0x240; // UMRMeshComponent*
	}

	namespace n_UTracksComponent {
		constexpr auto bEnabled = 0x548; // char : 1
		constexpr auto bRenderLeftTrack = 0x548; // char : 1
		constexpr auto bRenderRightTrack = 0x548; // char : 1
		constexpr auto bSkipLastAnimatedWheelWhenBuildingCurves = 0x548; // char : 1
		constexpr auto ExtendedWheelCurvesLength = 0x54c; // float
		constexpr auto ExtraTilesToCloseGapsInExtremeCases = 0x550; // float
		constexpr auto TrackTileLength = 0x554; // float
		constexpr auto TrackTileThickness = 0x558; // float
		constexpr auto TrackTileAlignment = 0x55c; // float
		constexpr auto bHasRollerBones = 0x560; // char : 1
		constexpr auto MaxVerticalSag = 0x564; // float
		constexpr auto RollerWheelRadius = 0x568; // float
		constexpr auto RollerWheelBones = 0x570; // TArray<FName>
		constexpr auto FrontWheelTrackInclination = 0x580; // FVector2D
		constexpr auto BackWheelTrackInclination = 0x588; // FVector2D
		constexpr auto MaxSeenExtendedWheelCurvesLength = 0x590; // float
	}

	namespace n_UMaterialExpressionLandscapeLayerWeight {
		constexpr auto Base = 0x40; // FExpressionInput
		constexpr auto Layer = 0x54; // FExpressionInput
		constexpr auto ParameterName = 0x68; // FName
		constexpr auto PreviewWeight = 0x70; // float
		constexpr auto ConstBase = 0x74; // FVector
		constexpr auto ExpressionGUID = 0x80; // FGuid
	}

	namespace n_UBorder {
		constexpr auto HorizontalAlignment = 0x120; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x121; // EVerticalAlignment
		constexpr auto bShowEffectWhenDisabled = 0x122; // char : 1
		constexpr auto ContentColorAndOpacity = 0x124; // FLinearColor
		constexpr auto ContentColorAndOpacityDelegate = 0x134; // FDelegate
		constexpr auto Padding = 0x144; // FMargin
		constexpr auto Background = 0x158; // FSlateBrush
		constexpr auto BackgroundDelegate = 0x1e0; // FDelegate
		constexpr auto BrushColor = 0x1f0; // FLinearColor
		constexpr auto BrushColorDelegate = 0x200; // FDelegate
		constexpr auto DesiredSizeScale = 0x210; // FVector2D
		constexpr auto bFlipForRightToLeftFlowDirection = 0x218; // bool
		constexpr auto OnMouseButtonDownEvent = 0x21c; // FDelegate
		constexpr auto OnMouseButtonUpEvent = 0x22c; // FDelegate
		constexpr auto OnMouseMoveEvent = 0x23c; // FDelegate
		constexpr auto OnMouseDoubleClickEvent = 0x24c; // FDelegate
	}

	namespace n_UW_Btn_HTPTopic_V2_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Btn_Topic = 0x238; // UButton*
		constexpr auto Img_TopicSelected = 0x240; // UImage*
		constexpr auto Txt_TopicTitle = 0x248; // UTextBlock*
		constexpr auto Clicked = 0x250; // FMulticastInlineDelegate
		constexpr auto Active = 0x260; // bool
		constexpr auto NormalTextColor = 0x268; // FSlateColor
		constexpr auto HoveredTextColor = 0x290; // FSlateColor
		constexpr auto ActiveButtonStyle = 0x2b8; // FButtonStyle
		constexpr auto NormalButtonStyle = 0x530; // FButtonStyle
		constexpr auto Hovered = 0x7a8; // bool
		constexpr auto Topic_Text = 0x7b0; // FText
		constexpr auto Topic_Int = 0x7c8; // int32_t
	}

	namespace n_USoundNodeOscillator {
		constexpr auto bModulateVolume = 0x48; // char : 1
		constexpr auto bModulatePitch = 0x48; // char : 1
		constexpr auto AmplitudeMin = 0x4c; // float
		constexpr auto AmplitudeMax = 0x50; // float
		constexpr auto FrequencyMin = 0x54; // float
		constexpr auto FrequencyMax = 0x58; // float
		constexpr auto OffsetMin = 0x5c; // float
		constexpr auto OffsetMax = 0x60; // float
		constexpr auto CenterMin = 0x64; // float
		constexpr auto CenterMax = 0x68; // float
	}

	namespace n_UPaperFlipbook {
		constexpr auto FramesPerSecond = 0x28; // float
		constexpr auto KeyFrames = 0x30; // TArray<FPaperFlipbookKeyFrame>
		constexpr auto DefaultMaterial = 0x40; // UMaterialInterface*
		constexpr auto CollisionSource = 0x48; // EFlipbookCollisionMode
	}

	namespace n_UAvailableRole {
		constexpr auto StyleSet = 0x248; // USlateWidgetStyleAsset*
		constexpr auto NormalTextColor = 0x250; // FLinearColor
		constexpr auto HoveredTextColor = 0x260; // FLinearColor
		constexpr auto SelectedTextColor = 0x270; // FLinearColor
		constexpr auto DisabledTextColor = 0x280; // FLinearColor
		constexpr auto NormalBgColor = 0x290; // FLinearColor
		constexpr auto HoveredBgColor = 0x2a0; // FLinearColor
		constexpr auto SelectedBgColor = 0x2b0; // FLinearColor
		constexpr auto DisabledBgColor = 0x2c0; // FLinearColor
		constexpr auto RootBorder = 0x2d0; // UBorder*
		constexpr auto IconImage = 0x2d8; // UImage*
		constexpr auto NameSwitcher = 0x2e0; // UWidgetSwitcher*
		constexpr auto Limits = 0x2e8; // UTextBlock*
		constexpr auto Rifleman = 0x2f0; // UTextBlock*
		constexpr auto Assault = 0x2f8; // UTextBlock*
		constexpr auto AutomaticRifleman = 0x300; // UTextBlock*
		constexpr auto Medic = 0x308; // UTextBlock*
		constexpr auto Spotter = 0x310; // UTextBlock*
		constexpr auto Support = 0x318; // UTextBlock*
		constexpr auto HeavyMachineGunner = 0x320; // UTextBlock*
		constexpr auto AntiTank = 0x328; // UTextBlock*
		constexpr auto Engineer = 0x330; // UTextBlock*
		constexpr auto Sniper = 0x338; // UTextBlock*
		constexpr auto Officer = 0x340; // UTextBlock*
		constexpr auto Crewman = 0x348; // UTextBlock*
		constexpr auto TankCommander = 0x350; // UTextBlock*
		constexpr auto m_nameWidget = 0x360; // UTextBlock*
		constexpr auto m_iconWidget = 0x368; // UImage*
		constexpr auto m_playerRole = 0x370; // EPlayerRole
	}

	namespace n_UHLLDeployment_TeamSelectItem {
		constexpr auto OwningTeamPanel = 0x230; // UHLLDeployment_TeamSelect*
		constexpr auto AssignedTeam = 0x238; // ETeam
		constexpr auto AssignedFaction = 0x239; // EFaction
		constexpr auto bIsAvailable = 0x23a; // char : 1
		constexpr auto EnabledStateWidget = 0x240; // UWidget*
		constexpr auto PlayerCount = 0x248; // UTextBlock*
		constexpr auto FactionName = 0x250; // UTextBlock*
		constexpr auto FactionIcon = 0x258; // UImage*
		constexpr auto SelectButton = 0x260; // UButton*
	}

	namespace n_UHLLSeatIcon {
		constexpr auto EmptyOccupantText = 0x230; // FText
		constexpr auto SeatBorder = 0x248; // UBorder*
		constexpr auto OccupantName = 0x250; // UTextBlock*
		constexpr auto SeatIcon = 0x258; // UImage*
		constexpr auto SwitchToKeyName = 0x260; // UTextBlock*
	}

	namespace n_ULevelSequenceBurnInOptions {
		constexpr auto bUseBurnIn = 0x28; // bool
		constexpr auto BurnInClass = 0x30; // FSoftClassPath
		constexpr auto Settings = 0x48; // ULevelSequenceBurnInInitSettings*
	}

	namespace n_UNetworkSettings {
		constexpr auto bVerifyPeer = 0x38; // char : 1
		constexpr auto bEnableMultiplayerWorldOriginRebasing = 0x38; // char : 1
		constexpr auto MaxRepArraySize = 0x3c; // int32_t
		constexpr auto MaxRepArrayMemory = 0x40; // int32_t
		constexpr auto NetworkEmulationProfiles = 0x48; // TArray<FNetworkEmulationProfileDescription>
	}

	namespace n_UDistributionFloatUniformCurve {
		constexpr auto ConstantCurve = 0x38; // FInterpCurveVector2D
	}

	namespace n_UBlendSpaceBase {
		constexpr auto bRotationBlendInMeshSpace = 0x88; // bool
		constexpr auto AnimLength = 0x8c; // float
		constexpr auto InterpolationParam = 0x90; // FInterpolationParameter [0x3]
		constexpr auto TargetWeightInterpolationSpeedPerSec = 0xa8; // float
		constexpr auto NotifyTriggerMode = 0xac; // ENotifyTriggerMode
		constexpr auto PerBoneBlend = 0xb0; // TArray<FPerBoneInterpolation>
		constexpr auto SampleIndexWithMarkers = 0xc0; // int32_t
		constexpr auto SampleData = 0xc8; // TArray<FBlendSample>
		constexpr auto GridSamples = 0xd8; // TArray<FEditorElement>
		constexpr auto BlendParameters = 0xe8; // FBlendParameter [0x3]
	}

	namespace n_UProjectileMovementComponent {
		constexpr auto InitialSpeed = 0xf0; // float
		constexpr auto MaxSpeed = 0xf4; // float
		constexpr auto bRotationFollowsVelocity = 0xf8; // char : 1
		constexpr auto bRotationRemainsVertical = 0xf8; // char : 1
		constexpr auto bShouldBounce = 0xf8; // char : 1
		constexpr auto bInitialVelocityInLocalSpace = 0xf8; // char : 1
		constexpr auto bForceSubStepping = 0xf8; // char : 1
		constexpr auto bSimulationEnabled = 0xf8; // char : 1
		constexpr auto bSweepCollision = 0xf8; // char : 1
		constexpr auto bIsHomingProjectile = 0xf8; // char : 1
		constexpr auto bBounceAngleAffectsFriction = 0xf9; // char : 1
		constexpr auto bIsSliding = 0xf9; // char : 1
		constexpr auto bInterpMovement = 0xf9; // char : 1
		constexpr auto bInterpRotation = 0xf9; // char : 1
		constexpr auto PreviousHitTime = 0xfc; // float
		constexpr auto PreviousHitNormal = 0x100; // FVector
		constexpr auto ProjectileGravityScale = 0x10c; // float
		constexpr auto Buoyancy = 0x110; // float
		constexpr auto Bounciness = 0x114; // float
		constexpr auto Friction = 0x118; // float
		constexpr auto BounceVelocityStopSimulatingThreshold = 0x11c; // float
		constexpr auto MinFrictionFraction = 0x120; // float
		constexpr auto OnProjectileBounce = 0x128; // FMulticastInlineDelegate
		constexpr auto OnProjectileStop = 0x138; // FMulticastInlineDelegate
		constexpr auto HomingAccelerationMagnitude = 0x148; // float
		constexpr auto HomingTargetComponent = 0x14c; // TWeakObjectPtr<USceneComponent>
		constexpr auto MaxSimulationTimeStep = 0x154; // float
		constexpr auto MaxSimulationIterations = 0x158; // int32_t
		constexpr auto BounceAdditionalIterations = 0x15c; // int32_t
		constexpr auto InterpLocationTime = 0x160; // float
		constexpr auto InterpRotationTime = 0x164; // float
		constexpr auto InterpLocationMaxLagDistance = 0x168; // float
		constexpr auto InterpLocationSnapToTargetDistance = 0x16c; // float
	}

	namespace n_UInGameAdManager {
		constexpr auto bShouldPauseWhileAdOpen = 0x38; // char : 1
		constexpr auto ClickedBannerDelegates = 0x40; // TArray<FDelegate>
		constexpr auto ClosedAdDelegates = 0x50; // TArray<FDelegate>
	}

	namespace n_UCurveVector {
		constexpr auto FloatCurves = 0x30; // FRichCurve [0x3]
	}

	namespace n_UVRNotificationsComponent {
		constexpr auto HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate = 0xb0; // FMulticastInlineDelegate
		constexpr auto HMDTrackingInitializedDelegate = 0xc0; // FMulticastInlineDelegate
		constexpr auto HMDRecenteredDelegate = 0xd0; // FMulticastInlineDelegate
		constexpr auto HMDLostDelegate = 0xe0; // FMulticastInlineDelegate
		constexpr auto HMDReconnectedDelegate = 0xf0; // FMulticastInlineDelegate
		constexpr auto HMDConnectCanceledDelegate = 0x100; // FMulticastInlineDelegate
		constexpr auto HMDPutOnHeadDelegate = 0x110; // FMulticastInlineDelegate
		constexpr auto HMDRemovedFromHeadDelegate = 0x120; // FMulticastInlineDelegate
		constexpr auto VRControllerRecenteredDelegate = 0x130; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleLocationPrimitiveSphere {
		constexpr auto StartRadius = 0xb0; // FRawDistributionFloat
	}

	namespace n_UHLLLoaderUI {
		constexpr auto ArtilleryWeaponInfo = 0x270; // UHLLArmourWeaponUI*
		constexpr auto ReloadKeyText = 0x278; // URichTextBlock*
		constexpr auto RotateKeyText = 0x280; // URichTextBlock*
	}

	namespace n_UAREnvironmentCaptureProbe {
		constexpr auto EnvironmentCaptureTexture = 0xf8; // UAREnvironmentCaptureProbeTexture*
	}

	namespace n_UHLLIndicatorComponent {
		constexpr auto IndicatorClass = 0xb0; // UHLLIndicatorBase*
		constexpr auto bAutoCreate = 0xb8; // char : 1
		constexpr auto bWantsIndicator = 0xb8; // char : 1
	}

	namespace n_UOptionsHeader_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto HeaderText = 0x238; // UTextBlock*
		constexpr auto HeaderValue = 0x240; // FText
	}

	namespace n_UDistributionFloatUniform {
		constexpr auto Min = 0x38; // float
		constexpr auto Max = 0x3c; // float
	}

	namespace n_UMovementComponent {
		constexpr auto UpdatedComponent = 0xb0; // USceneComponent*
		constexpr auto UpdatedPrimitive = 0xb8; // UPrimitiveComponent*
		constexpr auto Velocity = 0xc4; // FVector
		constexpr auto PlaneConstraintNormal = 0xd0; // FVector
		constexpr auto PlaneConstraintOrigin = 0xdc; // FVector
		constexpr auto bUpdateOnlyIfRendered = 0xe8; // char : 1
		constexpr auto bAutoUpdateTickRegistration = 0xe8; // char : 1
		constexpr auto bTickBeforeOwner = 0xe8; // char : 1
		constexpr auto bAutoRegisterUpdatedComponent = 0xe8; // char : 1
		constexpr auto bConstrainToPlane = 0xe8; // char : 1
		constexpr auto bSnapToPlaneAtStart = 0xe8; // char : 1
		constexpr auto bAutoRegisterPhysicsVolumeUpdates = 0xe8; // char : 1
		constexpr auto bComponentShouldUpdatePhysicsVolume = 0xe8; // char : 1
		constexpr auto PlaneConstraintAxisSetting = 0xeb; // EPlaneConstraintAxisSetting
	}

	namespace n_UAnimClassData {
		constexpr auto BakedStateMachines = 0x30; // TArray<FBakedAnimationStateMachine>
		constexpr auto TargetSkeleton = 0x40; // USkeleton*
		constexpr auto AnimNotifies = 0x48; // TArray<FAnimNotifyEvent>
		constexpr auto OrderedSavedPoseIndicesMap = 0x58; // TMap<FName, FCachedPoseIndices>
		constexpr auto AnimBlueprintFunctions = 0xa8; // TArray<FAnimBlueprintFunction>
		constexpr auto AnimBlueprintFunctionData = 0xb8; // TArray<FAnimBlueprintFunctionData>
		constexpr auto AnimNodeProperties = 0xc8; // TArray<TFieldPath<FStructProperty>>
		constexpr auto LinkedAnimGraphNodeProperties = 0xe8; // TArray<TFieldPath<FStructProperty>>
		constexpr auto LinkedAnimLayerNodeProperties = 0x108; // TArray<TFieldPath<FStructProperty>>
		constexpr auto PreUpdateNodeProperties = 0x128; // TArray<TFieldPath<FStructProperty>>
		constexpr auto DynamicResetNodeProperties = 0x148; // TArray<TFieldPath<FStructProperty>>
		constexpr auto StateMachineNodeProperties = 0x168; // TArray<TFieldPath<FStructProperty>>
		constexpr auto InitializationNodeProperties = 0x188; // TArray<TFieldPath<FStructProperty>>
		constexpr auto GraphNameAssetPlayers = 0x1a8; // TMap<FName, FGraphAssetPlayerInformation>
		constexpr auto SyncGroupNames = 0x1f8; // TArray<FName>
		constexpr auto EvaluateGraphExposedInputs = 0x208; // TArray<FExposedValueHandler>
		constexpr auto GraphBlendOptions = 0x218; // TMap<FName, FAnimGraphBlendOptions>
	}

	namespace n_UForceFeedbackEffect {
		constexpr auto ChannelDetails = 0x28; // TArray<FForceFeedbackChannelDetails>
		constexpr auto Duration = 0x38; // float
	}

	namespace n_UMaterialExpressionSubtract {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto ConstA = 0x68; // float
		constexpr auto ConstB = 0x6c; // float
	}

	namespace n_UParticleModuleRotationRateMultiplyLife {
		constexpr auto LifeMultiplier = 0x30; // FRawDistributionFloat
	}

	namespace n_UEditableGameplayTagQueryExpression_AnyTagsMatch {
		constexpr auto Tags = 0x28; // FGameplayTagContainer
	}

	namespace n_AMapStartCameraManager {
		constexpr auto MapStartCamera = 0x2738; // ACameraActor*
	}

	namespace n_UOffensiveWarfareGameStateComponent {
		constexpr auto AttackingTeam = 0xb0; // ETeam
		constexpr auto bInOffensiveOvertime = 0xb1; // char : 1
	}

	namespace n_UAchievementQueryCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UBTDecorator_CheckGameplayTagsOnActor {
		constexpr auto ActorToCheck = 0x68; // FBlackboardKeySelector
		constexpr auto TagsToMatch = 0x90; // EGameplayContainerMatchType
		constexpr auto GameplayTags = 0x98; // FGameplayTagContainer
		constexpr auto CachedDescription = 0xb8; // FString
	}

	namespace n_UMovieSceneCameraCutSection {
		constexpr auto CameraGuid = 0xe0; // FGuid
		constexpr auto CameraBindingID = 0xf0; // FMovieSceneObjectBindingID
	}

	namespace n_UHTP_Widget_Role_Commander_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto GridPanel_2 = 0x238; // UGridPanel*
		constexpr auto HTP_Widget_Role_Loadout_Commander = 0x240; // UHTP_Widget_Role_Loadout_Commander_C*
		constexpr auto Image_1 = 0x248; // UImage*
		constexpr auto Image_2 = 0x250; // UImage*
		constexpr auto Image_3 = 0x258; // UImage*
		constexpr auto RichTextBlock_1 = 0x260; // URichTextBlock*
		constexpr auto isNotWidescreen = 0x268; // bool
		constexpr auto isUltrawide = 0x269; // bool
		constexpr auto imageDimensions = 0x26c; // FVector2D
		constexpr auto wrapLength = 0x274; // float
	}

	namespace n_UAsyncActionLoadPrimaryAssetClass {
		constexpr auto Completed = 0x78; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionOneMinus {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_AMapData_Player_C {
		constexpr auto DefaultSceneRoot = 0x258; // USceneComponent*
	}

	namespace n_USoundClass {
		constexpr auto Properties = 0x28; // FSoundClassProperties
		constexpr auto ChildClasses = 0x80; // TArray<USoundClass*>
		constexpr auto PassiveSoundMixModifiers = 0x90; // TArray<FPassiveSoundMixModifier>
		constexpr auto Modulation = 0xa0; // FSoundModulation
		constexpr auto ParentClass = 0xb0; // USoundClass*
	}

	namespace n_ABaseVehicle {
		constexpr auto Team = 0x2d8; // ETeam
		constexpr auto DriverSeat = 0x2e0; // AVehicleDriverSeat*
		constexpr auto EngineWarmupDuration = 0x2e8; // float
		constexpr auto EngineShutdownDuration = 0x2ec; // float
		constexpr auto bCrippleMovementWhenDepleted = 0x2f0; // char : 1
		constexpr auto bEngineStarted = 0x2f4; // char : 1
		constexpr auto LowSpeedPhysMatOverride = 0x308; // UPhysicalMaterial*
		constexpr auto LowSpeedThresholdKph = 0x310; // float
		constexpr auto DriverSeatClass = 0x318; // AVehicleDriverSeat*
		constexpr auto EngineSoundFadeInTime = 0x320; // float
		constexpr auto EngineSound = 0x328; // FVehicleSoundSetup
		constexpr auto EngineStartSound = 0x348; // FVehicleSoundSetup
		constexpr auto EngineStartAbortedSound = 0x368; // FVehicleSoundSetup
		constexpr auto EngineStopSound = 0x388; // FVehicleSoundSetup
		constexpr auto EngineStartFailedSound = 0x3a8; // FVehicleSoundSetup
		constexpr auto EngineAudio = 0x3c8; // UAudioComponent*
		constexpr auto InteriorAudio = 0x3d0; // UAudioComponent*
		constexpr auto ExhaustAudio = 0x3d8; // UAudioComponent*
		constexpr auto EngineStartAudio = 0x3e0; // UAudioComponent*
		constexpr auto InteriorStartAudio = 0x3e8; // UAudioComponent*
		constexpr auto ExhaustStartAudio = 0x3f0; // UAudioComponent*
		constexpr auto ClutchAudio = 0x3f8; // UAudioComponent*
		constexpr auto InteriorHitAudio = 0x400; // UAudioComponent*
		constexpr auto HornAudio = 0x408; // UAudioComponent*
		constexpr auto bHornSoundEnabled = 0x410; // char : 1
		constexpr auto ArmourHealth = 0x420; // UHLLArmourHealthComponent*
		constexpr auto ArmourInventory = 0x428; // UHLLArmourInventory*
		constexpr auto ArmourMetaData = 0x430; // FHLLArmourMetaData
		constexpr auto VehicleInactivityMonitor = 0x450; // UHLLVehicleInactivityComponent*
		constexpr auto MapComponent = 0x458; // UHLLMapComponent*
		constexpr auto NameplateIndicatorComponent = 0x460; // UHLLIndicatorComponent*
		constexpr auto WorldShifting = 0x468; // UVehicleWorldShiftingComponent*
		constexpr auto VehicleReconID = 0x470; // FReconID
		constexpr auto ReconType = 0x472; // EReconItemType
		constexpr auto Hitter = 0x478; // UVehicleHitComponent*
		constexpr auto CharacterMovementBarrierBody = 0x480; // UStaticMeshComponent*
		constexpr auto RootBoneName = 0x488; // FName
		constexpr auto WheelCollisionBodies = 0x490; // TArray<FName>
		constexpr auto WaterEffects = 0x4a0; // UDataTable*
		constexpr auto VehicleEffects = 0x4a8; // UHLLVehicleFXComponent*
		constexpr auto AntiFlipComponent = 0x4b0; // UVehicleAntiFlipComponent*
		constexpr auto DamageFilterType = 0x4b8; // EHLLDamageFilterType
		constexpr auto VehicleVibrationData = 0x4c0; // UHLLVehicleVibrationData*
		constexpr auto EngineVibrationController_Internal = 0x4c8; // UVibrationEventController*
		constexpr auto EngineVibrationController_External = 0x4d0; // UVibrationEventController*
		constexpr auto InternalHitVibrationController = 0x4d8; // UVibrationEventController*
	}

	namespace n_UHLLWeaponForceFeedbackData {
		constexpr auto Events = 0x30; // TArray<FHLLWeaponForceFeedbackEvent>
	}

	namespace n_UParticleModuleMeshRotationRateOverLife {
		constexpr auto RotRate = 0x30; // FRawDistributionVector
		constexpr auto bScaleRotRate = 0x78; // char : 1
	}

	namespace n_AHLLMapDataBase {
		constexpr auto IconClass = 0x220; // UHLLMapIconBase*
		constexpr auto MapPosition = 0x228; // FRepMapPosition
		constexpr auto bOwnerIsMovable = 0x230; // char : 1
	}

	namespace n_UInterpTrackInstVectorMaterialParam {
		constexpr auto MaterialInstances = 0x28; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ResetVectors = 0x38; // TArray<FVector>
		constexpr auto PrimitiveMaterialRefs = 0x48; // TArray<FPrimitiveMaterialRef>
		constexpr auto InstancedTrack = 0x58; // UInterpTrackVectorMaterialParam*
	}

	namespace n_UInterpTrack {
		constexpr auto SubTracks = 0x38; // TArray<UInterpTrack*>
		constexpr auto TrackInstClass = 0x48; // UInterpTrackInst*
		constexpr auto ActiveCondition = 0x50; // ETrackActiveCondition
		constexpr auto TrackTitle = 0x58; // FString
		constexpr auto bOnePerGroup = 0x68; // char : 1
		constexpr auto bDirGroupOnly = 0x68; // char : 1
		constexpr auto bDisableTrack = 0x68; // char : 1
		constexpr auto bIsSelected = 0x68; // char : 1
		constexpr auto bIsAnimControlTrack = 0x68; // char : 1
		constexpr auto bSubTrackOnly = 0x68; // char : 1
		constexpr auto bVisible = 0x68; // char : 1
		constexpr auto bIsRecording = 0x68; // char : 1
	}

	namespace n_UParticleModuleLocationPrimitiveBase {
		constexpr auto Positive_X = 0x30; // char : 1
		constexpr auto Positive_Y = 0x30; // char : 1
		constexpr auto Positive_Z = 0x30; // char : 1
		constexpr auto Negative_X = 0x30; // char : 1
		constexpr auto Negative_Y = 0x30; // char : 1
		constexpr auto Negative_Z = 0x30; // char : 1
		constexpr auto SurfaceOnly = 0x30; // char : 1
		constexpr auto Velocity = 0x30; // char : 1
		constexpr auto VelocityScale = 0x38; // FRawDistributionFloat
		constexpr auto StartLocation = 0x68; // FRawDistributionVector
	}

	namespace n_ASceneCapture {
		constexpr auto MeshComp = 0x220; // UStaticMeshComponent*
		constexpr auto SceneComponent = 0x228; // USceneComponent*
	}

	namespace n_UARCandidateObject {
		constexpr auto CandidateObjectData = 0x30; // TArray<char>
		constexpr auto FriendlyName = 0x40; // FString
		constexpr auto BoundingBox = 0x50; // FBox
	}

	namespace n_UEnvQueryTest_Volume {
		constexpr auto VolumeContext = 0x1f8; // UEnvQueryContext*
		constexpr auto VolumeClass = 0x200; // AVolume*
		constexpr auto bDoComplexVolumeTest = 0x208; // char : 1
	}

	namespace n_UVehicleExitLocationComponent {
		constexpr auto Priority = 0x430; // int32_t
	}

	namespace n_UAISystem {
		constexpr auto PerceptionSystemClassName = 0x58; // FSoftClassPath
		constexpr auto HotSpotManagerClassName = 0x70; // FSoftClassPath
		constexpr auto AcceptanceRadius = 0x88; // float
		constexpr auto PathfollowingRegularPathPointAcceptanceRadius = 0x8c; // float
		constexpr auto PathfollowingNavLinkAcceptanceRadius = 0x90; // float
		constexpr auto bFinishMoveOnGoalOverlap = 0x94; // bool
		constexpr auto bAcceptPartialPaths = 0x95; // bool
		constexpr auto bAllowStrafing = 0x96; // bool
		constexpr auto bEnableBTAITasks = 0x97; // bool
		constexpr auto bAllowControllersAsEQSQuerier = 0x98; // bool
		constexpr auto bEnableDebuggerPlugin = 0x99; // bool
		constexpr auto bForgetStaleActors = 0x9a; // bool
		constexpr auto DefaultSightCollisionChannel = 0x9b; // ECollisionChannel
		constexpr auto BehaviorTreeManager = 0xa0; // UBehaviorTreeManager*
		constexpr auto EnvironmentQueryManager = 0xa8; // UEnvQueryManager*
		constexpr auto PerceptionSystem = 0xb0; // UAIPerceptionSystem*
		constexpr auto AllProxyObjects = 0xb8; // TArray<UAIAsyncTaskBlueprintProxy*>
		constexpr auto HotSpotManager = 0xc8; // UAIHotSpotManager*
		constexpr auto NavLocalGrids = 0xd0; // UNavLocalGridManager*
	}

	namespace n_UMaterialExpressionBlendMaterialAttributes {
		constexpr auto A = 0x40; // FMaterialAttributesInput
		constexpr auto B = 0x58; // FMaterialAttributesInput
		constexpr auto Alpha = 0x70; // FExpressionInput
		constexpr auto PixelAttributeBlendType = 0x84; // EMaterialAttributeBlend
		constexpr auto VertexAttributeBlendType = 0x85; // EMaterialAttributeBlend
	}

	namespace n_USkeletalMeshLODSettings {
		constexpr auto MinLOD = 0x30; // FPerPlatformInt
		constexpr auto DisableBelowMinLodStripping = 0x34; // FPerPlatformBool
		constexpr auto bSupportLODStreaming = 0x35; // FPerPlatformBool
		constexpr auto MaxNumStreamedLODs = 0x38; // FPerPlatformInt
		constexpr auto MaxNumOptionalLODs = 0x3c; // FPerPlatformInt
		constexpr auto LODGroups = 0x40; // TArray<FSkeletalMeshLODGroupSettings>
	}

	namespace n_AHLLSeat_ArtilleryBase {
		constexpr auto HitSound = 0x970; // USoundBase*
	}

	namespace n_UStartScreen_V2_C {
		constexpr auto UberGraphFrame = 0x238; // FPointerToUberGraphFrame
		constexpr auto TextGlow = 0x240; // UWidgetAnimation*
		constexpr auto TextFade = 0x248; // UWidgetAnimation*
		constexpr auto MouseButton = 0x250; // UButton*
		constexpr auto Retainer = 0x258; // URetainerBox*
		constexpr auto StartText = 0x260; // UTextBlock*
		constexpr auto UserNameText = 0x268; // UTextBlock*
		constexpr auto MainMenu = 0x270; // UMainMenuWidget_V2_C*
	}

	namespace n_UMaterialExpressionFloor {
		constexpr auto Input = 0x40; // FExpressionInput
	}

	namespace n_UWGT_UseContext_Repair_C {
		constexpr auto UberGraphFrame = 0x250; // FPointerToUberGraphFrame
	}

	namespace n_UParticleModuleLocationSkelVertSurface {
		constexpr auto SourceType = 0x30; // ELocationSkelVertSurfaceSource
		constexpr auto UniversalOffset = 0x34; // FVector
		constexpr auto bUpdatePositionEachFrame = 0x40; // char : 1
		constexpr auto bOrientMeshEmitters = 0x40; // char : 1
		constexpr auto bInheritBoneVelocity = 0x40; // char : 1
		constexpr auto InheritVelocityScale = 0x44; // float
		constexpr auto SkelMeshActorParamName = 0x48; // FName
		constexpr auto ValidAssociatedBones = 0x50; // TArray<FName>
		constexpr auto bEnforceNormalCheck = 0x60; // char : 1
		constexpr auto NormalToCompare = 0x64; // FVector
		constexpr auto NormalCheckToleranceDegrees = 0x70; // float
		constexpr auto NormalCheckTolerance = 0x74; // float
		constexpr auto ValidMaterialIndices = 0x78; // TArray<int32_t>
		constexpr auto bInheritVertexColor = 0x88; // char : 1
		constexpr auto bInheritUV = 0x88; // char : 1
		constexpr auto InheritUVChannel = 0x8c; // uint32_t
	}

	namespace n_UDefaultLevelSequenceInstanceData {
		constexpr auto TransformOriginActor = 0x30; // AActor*
		constexpr auto TransformOrigin = 0x40; // FTransform
	}

	namespace n_UFontImportOptions {
		constexpr auto Data = 0x28; // FFontImportOptionsData
	}

	namespace n_ALandscapeMeshProxyActor {
		constexpr auto LandscapeMeshProxyComponent = 0x220; // ULandscapeMeshProxyComponent*
	}

	namespace n_AHLLAbilityDrop_Spawn {
		constexpr auto Parachute = 0x3f8; // UHLLParachuteMeshComponent*
		constexpr auto DescentSpeed = 0x400; // float
		constexpr auto MaxWaves = 0x404; // char
		constexpr auto ReplicatedDropInfo = 0x408; // FDropSpawnInfo
		constexpr auto NumExecutedWaves = 0x414; // char
	}

	namespace n_UHLLFootstepData {
		constexpr auto bCullFootstepSFX = 0x30; // char : 1
		constexpr auto bCullFootstepFX = 0x30; // char : 1
		constexpr auto bCullFootstepDecals = 0x30; // char : 1
		constexpr auto bCullWaterSFX = 0x30; // char : 1
		constexpr auto bCullWaterFX = 0x30; // char : 1
		constexpr auto CullDistanceSound = 0x34; // float
		constexpr auto CullDistanceEffects = 0x38; // float
		constexpr auto CullDistanceDecals = 0x3c; // float
		constexpr auto WaterCullDistanceSound = 0x40; // float
		constexpr auto WaterCullDistanceEffects = 0x44; // float
		constexpr auto HeelToeDelay = 0x48; // FRuntimeFloatCurve [0x3]
		constexpr auto FootstepsFPP = 0x1e0; // FFootstepFX [0x3]
		constexpr auto FootstepsTPP = 0x1218; // FFootstepFX [0x3]
		constexpr auto FootstepDecalProjectionDistance = 0x2250; // float
		constexpr auto WadeFPP = 0x2258; // FWadeFX [0x3]
		constexpr auto WadeTPP = 0x22a0; // FWadeFX [0x3]
		constexpr auto Splashes = 0x22e8; // FSplashFX [0x3]
		constexpr auto JumpOuts = 0x2318; // FSplashFX [0x3]
	}

	namespace n_UInterpTrackFade {
		constexpr auto bPersistFade = 0x90; // char : 1
		constexpr auto bFadeAudio = 0x90; // char : 1
		constexpr auto FadeColor = 0x94; // FLinearColor
	}

	namespace n_ALevelScriptActor {
		constexpr auto bInputEnabled = 0x220; // char : 1
	}

	namespace n_UStreamingSettings {
		constexpr auto AsyncLoadingThreadEnabled = 0x38; // char : 1
		constexpr auto WarnIfTimeLimitExceeded = 0x38; // char : 1
		constexpr auto TimeLimitExceededMultiplier = 0x3c; // float
		constexpr auto TimeLimitExceededMinTime = 0x40; // float
		constexpr auto MinBulkDataSizeForAsyncLoading = 0x44; // int32_t
		constexpr auto UseBackgroundLevelStreaming = 0x48; // char : 1
		constexpr auto AsyncLoadingUseFullTimeLimit = 0x48; // char : 1
		constexpr auto AsyncLoadingTimeLimit = 0x4c; // float
		constexpr auto PriorityAsyncLoadingExtraTime = 0x50; // float
		constexpr auto LevelStreamingActorsUpdateTimeLimit = 0x54; // float
		constexpr auto PriorityLevelStreamingActorsUpdateExtraTime = 0x58; // float
		constexpr auto LevelStreamingComponentsRegistrationGranularity = 0x5c; // int32_t
		constexpr auto LevelStreamingUnregisterComponentsTimeLimit = 0x60; // float
		constexpr auto LevelStreamingComponentsUnregistrationGranularity = 0x64; // int32_t
		constexpr auto FlushStreamingOnExit = 0x68; // char : 1
		constexpr auto EventDrivenLoaderEnabled = 0x68; // char : 1
	}

	namespace n_ABaseTank {
		constexpr auto Hitter = 0x2e8; // UVehicleHitComponent*
		constexpr auto CharacterMovementBarrierBody = 0x2f0; // UStaticMeshComponent*
		constexpr auto CharacterMovementBarrierTurret = 0x2f8; // UStaticMeshComponent*
		constexpr auto CharacterMovementBarrierBarrel = 0x300; // UStaticMeshComponent*
		constexpr auto ArmourCollision_Body = 0x308; // UHLLArmourCollisionMesh*
		constexpr auto ArmourCollision_Tracks = 0x310; // UHLLArmourCollisionMesh*
		constexpr auto ArmourCollision_Turret = 0x318; // UHLLArmourCollisionMesh*
		constexpr auto ArmourCollision_Barrel = 0x320; // UHLLArmourCollisionMesh*
		constexpr auto EngineWarmupDuration = 0x328; // float
		constexpr auto EngineShutdownDuration = 0x32c; // float
		constexpr auto EngineSoundFadeInTime = 0x330; // float
		constexpr auto EngineSound = 0x338; // FVehicleSoundSetup
		constexpr auto EngineStartSound = 0x358; // FVehicleSoundSetup
		constexpr auto EngineStartAbortedSound = 0x378; // FVehicleSoundSetup
		constexpr auto EngineStopSound = 0x398; // FVehicleSoundSetup
		constexpr auto EngineStartFailedSound = 0x3b8; // FVehicleSoundSetup
		constexpr auto EngineAudio = 0x3d8; // UAudioComponent*
		constexpr auto InteriorAudio = 0x3e0; // UAudioComponent*
		constexpr auto ExhaustAudio = 0x3e8; // UAudioComponent*
		constexpr auto TracksAudio = 0x3f0; // UAudioComponent*
		constexpr auto EngineStartAudio = 0x3f8; // UAudioComponent*
		constexpr auto InteriorStartAudio = 0x400; // UAudioComponent*
		constexpr auto ExhaustStartAudio = 0x408; // UAudioComponent*
		constexpr auto bEngineStarted = 0x410; // char : 1
		constexpr auto ClutchAudio = 0x428; // UAudioComponent*
		constexpr auto DriverSeatClass = 0x430; // ATankDriverSeat*
		constexpr auto GunnerSeatClass = 0x438; // ATankGunnerSeat*
		constexpr auto CommanderSeatClass = 0x440; // ATankCommanderSeat*
		constexpr auto DriverSeat = 0x448; // ATankDriverSeat*
		constexpr auto GunnerSeat = 0x450; // ATankGunnerSeat*
		constexpr auto CommanderSeat = 0x458; // ATankCommanderSeat*
		constexpr auto TurretController2 = 0x460; // UTurretControllerComponent2*
		constexpr auto PitchAudio = 0x468; // UAudioComponent*
		constexpr auto YawAudio = 0x470; // UAudioComponent*
		constexpr auto TurretAudioAttachSocket = 0x478; // FName
		constexpr auto TurretPitchSound = 0x480; // USoundBase*
		constexpr auto TurretPitchStopSound = 0x488; // USoundBase*
		constexpr auto TurretYawSound = 0x490; // USoundBase*
		constexpr auto TurretYawStopSound = 0x498; // USoundBase*
		constexpr auto YawRate = 0x4a0; // float
		constexpr auto MinTurretRotationScale = 0x4a4; // float
		constexpr auto PitchRate = 0x4a8; // float
		constexpr auto PitchAngleMin = 0x4ac; // float
		constexpr auto PitchAngleMax = 0x4b0; // float
		constexpr auto Turret_ServerUpdateRate = 0x4b4; // float
		constexpr auto InteriorHitAudio = 0x4b8; // UAudioComponent*
		constexpr auto ArmourHealth = 0x4c0; // UHLLArmourHealthComponent*
		constexpr auto ArmourInventory = 0x4c8; // UHLLArmourInventory*
		constexpr auto ArmourMetaData = 0x4d0; // FHLLArmourMetaData
		constexpr auto DamageImpulseMagnitude = 0x4f0; // float
		constexpr auto LowSpeedPhysMatOverride = 0x4f8; // UPhysicalMaterial*
		constexpr auto LowSpeedThresholdKph = 0x500; // float
		constexpr auto Team = 0x508; // ETeam
		constexpr auto VehicleEffects = 0x510; // UHLLVehicleFXComponent*
		constexpr auto MG_ServerUpdateRate = 0x518; // float
		constexpr auto MG_YawRate = 0x51c; // float
		constexpr auto MG_YawAngleMax = 0x520; // float
		constexpr auto MG_PitchRate = 0x524; // float
		constexpr auto MG_PitchAngleMin = 0x528; // float
		constexpr auto MG_PitchAngleMax = 0x52c; // float
		constexpr auto RemotePackedPitchAndYaw_HullMG = 0x53c; // uint16_t
		constexpr auto MapComponent = 0x540; // UHLLMapComponent*
		constexpr auto InactivityMonitor = 0x548; // UHLLVehicleInactivityComponent*
		constexpr auto NameplateIndicatorComponent = 0x550; // UHLLIndicatorComponent*
		constexpr auto WorldShifting = 0x558; // UVehicleWorldShiftingComponent*
		constexpr auto AntiFlipComponent = 0x560; // UVehicleAntiFlipComponent*
		constexpr auto RootBoneName = 0x568; // FName
		constexpr auto RollerBones = 0x570; // TArray<FName>
		constexpr auto TurretBoneName = 0x580; // FName
		constexpr auto BarrelBoneName = 0x588; // FName
		constexpr auto WaterEffects = 0x590; // UDataTable*
		constexpr auto VehicleReconID = 0x598; // FReconID
		constexpr auto ReconType = 0x59a; // EReconItemType
		constexpr auto DamageFilterType = 0x59b; // EHLLDamageFilterType
		constexpr auto VehicleVibrationData = 0x5a0; // UHLLVehicleVibrationData*
		constexpr auto EngineVibrationController_Internal = 0x5b0; // UVibrationEventController*
		constexpr auto EngineVibrationController_External = 0x5b8; // UVibrationEventController*
		constexpr auto PitchVibrationController = 0x5c0; // UVibrationEventController*
		constexpr auto YawVibrationController = 0x5c8; // UVibrationEventController*
		constexpr auto InternalHitVibrationController = 0x5d0; // UVibrationEventController*
	}

	namespace n_UMaterialExpressionCosine {
		constexpr auto Input = 0x40; // FExpressionInput
		constexpr auto Period = 0x54; // float
	}

	namespace n_UScrollBarWidgetStyle {
		constexpr auto ScrollBarStyle = 0x30; // FScrollBarStyle
	}

	namespace n_AHLLBarbedWireVolume {
		constexpr auto MaxCharacterMovementSpeed = 0x270; // float
		constexpr auto OverlapParticleDelay = 0x274; // float
		constexpr auto OverlapSoundDelay = 0x278; // float
		constexpr auto OverlapPainDelay = 0x27c; // float
		constexpr auto RemoveTimeTolerance = 0x280; // float
		constexpr auto VelocityTolerance = 0x284; // float
		constexpr auto OverlapParticle = 0x288; // TSoftObjectPtr<UParticleSystem>
		constexpr auto OverlapSound = 0x2b0; // TSoftObjectPtr<USoundBase>
		constexpr auto bSkipParticlesForLocalPlayer = 0x2d8; // bool
		constexpr auto LoadedParticle = 0x2e0; // UParticleSystem*
		constexpr auto LoadedSound = 0x2e8; // USoundBase*
	}

	namespace n_USoundSubmixBase {
		constexpr auto ChildSubmixes = 0x28; // TArray<USoundSubmixBase*>
	}

	namespace n_UChatMessage_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto BGColor = 0x238; // UBorder*
		constexpr auto ChannelNick = 0x240; // UTextBlock*
		constexpr auto TeamColor = 0x248; // UImage*
		constexpr auto Style = 0x250; // FChatStyle
		constexpr auto ChatChannel = 0x390; // EChatChannel
		constexpr auto Warning = 0x391; // bool
		constexpr auto PlayerRole = 0x392; // EPlayerRole
	}

	namespace n_UInterpTrackInstDirector {
		constexpr auto OldViewTarget = 0x28; // AActor*
	}

	namespace n_UHLLCharacterAnimInstance {
		constexpr auto CharacterMovementComponent = 0x280; // UCharacterMovementComponent*
		constexpr auto CharacterVelocity = 0x288; // FVector
		constexpr auto CharacterActorRotation = 0x294; // FRotator
		constexpr auto CharacterBaseAimRotation = 0x2a0; // FRotator
		constexpr auto IsCharacterMoving = 0x2ac; // bool
		constexpr auto IsCharacterMoving2D = 0x2ad; // bool
		constexpr auto IsCharacterRunning = 0x2ae; // bool
		constexpr auto IsCharacterProne = 0x2af; // bool
		constexpr auto IsCharacterCrouching = 0x2b0; // bool
		constexpr auto IsCharacterTargeting = 0x2b1; // bool
		constexpr auto IsCharacterInAir = 0x2b2; // bool
		constexpr auto CharacterAimYaw = 0x2b4; // float
		constexpr auto CharacterAimPitch = 0x2b8; // float
		constexpr auto CharacterDirection = 0x2bc; // float
		constexpr auto CharacterSpeed = 0x2c0; // float
		constexpr auto CharacterLeanAngleDegrees = 0x2c4; // float
		constexpr auto CharacterMovementMode = 0x2c8; // EMovementMode
		constexpr auto CharacterCustomMovementMode = 0x2c9; // char
		constexpr auto IsReloadDry = 0x2ca; // bool
		constexpr auto WeaponType = 0x2cb; // EWeaponType
		constexpr auto WeaponDeployState = 0x2cc; // EWeaponDeployState
		constexpr auto IsWeaponDeployed = 0x2cd; // bool
		constexpr auto IsCharacterAnimationPaused = 0x2ce; // bool
		constexpr auto CharacterHealthState = 0x2cf; // EHLLHealthState
	}

	namespace n_UParticleModuleLocationWorldOffset_Seeded {
		constexpr auto RandomSeedInfo = 0x80; // FParticleRandomSeedInfo
	}

	namespace n_UHLLOnlinePlayerStats {
		constexpr auto ActiveAccumulator = 0x48; // FHLLStatDeltaAccumulator
		constexpr auto PendingWriteAccumulator = 0x58; // FHLLStatDeltaAccumulator
		constexpr auto bPendingStartWrite = 0x78; // char : 1
		constexpr auto bWaitingForRefresh = 0x78; // char : 1
		constexpr auto bWaitingForWrite = 0x78; // char : 1
		constexpr auto bWaitingForFlush = 0x78; // char : 1
		constexpr auto bKillOnComplete = 0x78; // char : 1
		constexpr auto bInitialStatsPopulated = 0x78; // char : 1
		constexpr auto InitialStatValues = 0x80; // FPackedOnlineStats
		constexpr auto bOnlineStatsPopulated = 0xa0; // char : 1
		constexpr auto CachedOnlineStatValues = 0xa8; // FPackedOnlineStats
		constexpr auto StartTime = 0xc8; // FDateTime
	}

	namespace n_UAsyncActionLoadPrimaryAsset {
		constexpr auto Completed = 0x78; // FMulticastInlineDelegate
	}

	namespace n_UWGT_RoundTeamContainer_C {
		constexpr auto UberGraphFrame = 0x2e0; // FPointerToUberGraphFrame
		constexpr auto HeaderSplitter = 0x2e8; // UImage*
		constexpr auto icn_attack = 0x2f0; // UImage*
		constexpr auto icn_combat = 0x2f8; // UImage*
		constexpr auto icn_defense = 0x300; // UImage*
		constexpr auto icn_support = 0x308; // UImage*
		constexpr auto Tooltip = 0x310; // UWidget*
		constexpr auto Scoreboard = 0x318; // UWGT_RoundSummaryDetails_V2_C*
	}

	namespace n_UWidgetComponent {
		constexpr auto Space = 0x438; // EWidgetSpace
		constexpr auto TimingPolicy = 0x439; // EWidgetTimingPolicy
		constexpr auto WidgetClass = 0x440; // UUserWidget*
		constexpr auto DrawSize = 0x448; // FIntPoint
		constexpr auto bManuallyRedraw = 0x450; // bool
		constexpr auto bRedrawRequested = 0x451; // bool
		constexpr auto RedrawTime = 0x454; // float
		constexpr auto CurrentDrawSize = 0x460; // FIntPoint
		constexpr auto bDrawAtDesiredSize = 0x468; // bool
		constexpr auto Pivot = 0x46c; // FVector2D
		constexpr auto bReceiveHardwareInput = 0x474; // bool
		constexpr auto bWindowFocusable = 0x475; // bool
		constexpr auto WindowVisibility = 0x476; // EWindowVisibility
		constexpr auto bApplyGammaCorrection = 0x477; // bool
		constexpr auto OwnerPlayer = 0x478; // ULocalPlayer*
		constexpr auto BackgroundColor = 0x480; // FLinearColor
		constexpr auto TintColorAndOpacity = 0x490; // FLinearColor
		constexpr auto OpacityFromTexture = 0x4a0; // float
		constexpr auto BlendMode = 0x4a4; // EWidgetBlendMode
		constexpr auto bIsTwoSided = 0x4a5; // bool
		constexpr auto TickWhenOffscreen = 0x4a6; // bool
		constexpr auto Widget = 0x4a8; // UUserWidget*
		constexpr auto BodySetup = 0x4d0; // UBodySetup*
		constexpr auto TranslucentMaterial = 0x4d8; // UMaterialInterface*
		constexpr auto TranslucentMaterial_OneSided = 0x4e0; // UMaterialInterface*
		constexpr auto OpaqueMaterial = 0x4e8; // UMaterialInterface*
		constexpr auto OpaqueMaterial_OneSided = 0x4f0; // UMaterialInterface*
		constexpr auto MaskedMaterial = 0x4f8; // UMaterialInterface*
		constexpr auto MaskedMaterial_OneSided = 0x500; // UMaterialInterface*
		constexpr auto RenderTarget = 0x508; // UTextureRenderTarget2D*
		constexpr auto MaterialInstance = 0x510; // UMaterialInstanceDynamic*
		constexpr auto bAddedToScreen = 0x518; // bool
		constexpr auto bEditTimeUsable = 0x519; // bool
		constexpr auto SharedLayerName = 0x51c; // FName
		constexpr auto LayerZOrder = 0x524; // int32_t
		constexpr auto GeometryMode = 0x528; // EWidgetGeometryMode
		constexpr auto CylinderArcAngle = 0x52c; // float
	}

	namespace n_UMaterialExpressionMin {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto ConstA = 0x68; // float
		constexpr auto ConstB = 0x6c; // float
	}

	namespace n_USignificanceManager {
		constexpr auto SignificanceManagerClassName = 0x108; // FSoftClassPath
	}

	namespace n_UTestMovieSceneTrack {
		constexpr auto bHighPassFilter = 0x58; // bool
		constexpr auto SectionArray = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UChatLine_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Channel = 0x238; // UTextBlock*
		constexpr auto CooldownIndicator = 0x240; // UThrobber*
		constexpr auto HB_Cooldown = 0x248; // UHorizontalBox*
		constexpr auto Message = 0x250; // UEditableTextBox*
		constexpr auto ChatChannel = 0x258; // EChatChannel
		constexpr auto Style = 0x260; // FChatStyle
		constexpr auto MinDelayBetweenMessages = 0x3a0; // float
		constexpr auto Timer_MessageAvailable = 0x3a8; // FTimerHandle
		constexpr auto MaxCharacterInput = 0x3b0; // int32_t
		constexpr auto Widget_Chat = 0x3b8; // UChat_C*
	}

	namespace n_UPlatformGameInstance {
		constexpr auto ApplicationWillDeactivateDelegate = 0x198; // FMulticastInlineDelegate
		constexpr auto ApplicationHasReactivatedDelegate = 0x1a8; // FMulticastInlineDelegate
		constexpr auto ApplicationWillEnterBackgroundDelegate = 0x1b8; // FMulticastInlineDelegate
		constexpr auto ApplicationHasEnteredForegroundDelegate = 0x1c8; // FMulticastInlineDelegate
		constexpr auto ApplicationWillTerminateDelegate = 0x1d8; // FMulticastInlineDelegate
		constexpr auto ApplicationShouldUnloadResourcesDelegate = 0x1e8; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedStartupArgumentsDelegate = 0x1f8; // FMulticastInlineDelegate
		constexpr auto ApplicationRegisteredForRemoteNotificationsDelegate = 0x208; // FMulticastInlineDelegate
		constexpr auto ApplicationRegisteredForUserNotificationsDelegate = 0x218; // FMulticastInlineDelegate
		constexpr auto ApplicationFailedToRegisterForRemoteNotificationsDelegate = 0x228; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedRemoteNotificationDelegate = 0x238; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedLocalNotificationDelegate = 0x248; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedScreenOrientationChangedNotificationDelegate = 0x258; // FMulticastInlineDelegate
	}

	namespace n_UProxyLODMeshSimplificationSettings {
		constexpr auto ProxyLODMeshReductionModuleName = 0x38; // FName
	}

	namespace n_UTreeView {
		constexpr auto BP_OnGetItemChildren = 0x378; // FDelegate
		constexpr auto BP_OnItemExpansionChanged = 0x388; // FMulticastInlineDelegate
	}

	namespace n_UInterpTrackMoveAxis {
		constexpr auto MoveAxis = 0x90; // EInterpMoveAxis
		constexpr auto LookupTrack = 0x98; // FInterpLookupTrack
	}

	namespace n_ASpotLight {
		constexpr auto SpotLightComponent = 0x230; // USpotLightComponent*
	}

	namespace n_UParticleModuleTypeDataAnimTrail {
		constexpr auto bDeadTrailsOnDeactivate = 0x30; // char : 1
		constexpr auto bEnablePreviousTangentRecalculation = 0x30; // char : 1
		constexpr auto bTangentRecalculationEveryFrame = 0x30; // char : 1
		constexpr auto TilingDistance = 0x34; // float
		constexpr auto DistanceTessellationStepSize = 0x38; // float
		constexpr auto TangentTessellationStepSize = 0x3c; // float
		constexpr auto WidthTessellationStepSize = 0x40; // float
	}

	namespace n_URadialForceComponent {
		constexpr auto Radius = 0x1f0; // float
		constexpr auto Falloff = 0x1f4; // ERadialImpulseFalloff
		constexpr auto ImpulseStrength = 0x1f8; // float
		constexpr auto bImpulseVelChange = 0x1fc; // char : 1
		constexpr auto bIgnoreOwningActor = 0x1fc; // char : 1
		constexpr auto ForceStrength = 0x200; // float
		constexpr auto DestructibleDamage = 0x204; // float
		constexpr auto ObjectTypesToAffect = 0x208; // TArray<EObjectTypeQuery>
	}

	namespace n_UParticleModuleEventReceiverBase {
		constexpr auto EventGeneratorType = 0x30; // EParticleEventType
		constexpr auto EventName = 0x34; // FName
	}

	namespace n_UVectorFieldStatic {
		constexpr auto SizeX = 0x48; // int32_t
		constexpr auto SizeY = 0x4c; // int32_t
		constexpr auto SizeZ = 0x50; // int32_t
		constexpr auto bAllowCPUAccess = 0x54; // bool
		constexpr auto CPUData = 0x80; // TArray<FVector4>
	}

	namespace n_UMaterialExpressionDistanceFieldGradient {
		constexpr auto Position = 0x40; // FExpressionInput
	}

	namespace n_UEditableGameplayTagQueryExpression_AllExprMatch {
		constexpr auto Expressions = 0x28; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UParticleModuleMeshRotation_Seeded {
		constexpr auto RandomSeedInfo = 0x80; // FParticleRandomSeedInfo
	}

	namespace n_ASpectatorBeaconHost {
		constexpr auto State = 0x248; // USpectatorBeaconState*
		constexpr auto bLogoutOnSessionTimeout = 0x2b0; // bool
		constexpr auto SessionTimeoutSecs = 0x2b4; // float
		constexpr auto TravelSessionTimeoutSecs = 0x2b8; // float
	}

	namespace n_UHLLTankSeatUI_Base {
		constexpr auto TankBodyImage = 0x270; // UImage*
		constexpr auto TankTurretImage = 0x278; // UImage*
	}

	namespace n_UCameraShakeSourceComponent {
		constexpr auto Attenuation = 0x1f0; // ECameraShakeAttenuation
		constexpr auto InnerAttenuationRadius = 0x1f4; // float
		constexpr auto OuterAttenuationRadius = 0x1f8; // float
		constexpr auto CameraShake = 0x200; // UCameraShake*
		constexpr auto bAutoPlay = 0x208; // bool
	}

	namespace n_AShooterGameState {
		constexpr auto NumTeams = 0x2d8; // int32_t
		constexpr auto RemainingTime = 0x2dc; // int32_t
		constexpr auto bTimerPaused = 0x2e0; // bool
		constexpr auto NumAxisPlayers = 0x2e1; // char
		constexpr auto NumAlliedPlayers = 0x2e2; // char
		constexpr auto BaseWaveIntervalSeconds = 0x2e4; // float
		constexpr auto AxisPlatoons = 0x2e8; // TArray<AHLLPlatoon*>
		constexpr auto AlliesPlatoons = 0x2f8; // TArray<AHLLPlatoon*>
		constexpr auto OnPlatoonsUpdated = 0x308; // FMulticastInlineDelegate
		constexpr auto m_mapMetaTemplate = 0x318; // UHLLMapMetaTemplate*
		constexpr auto m_sectors = 0x320; // TArray<FSectorState>
		constexpr auto m_axisTeam = 0x330; // FTeamState
		constexpr auto m_alliesTeam = 0x336; // FTeamState
		constexpr auto MapStateComponent = 0x350; // UHLLMapStateComponent*
		constexpr auto OffensiveGameStateComponent = 0x358; // UOffensiveWarfareGameStateComponent*
		constexpr auto RegisteredSupplyComponents = 0x380; // TArray<UHLLSupplyComponent*>
		constexpr auto RegisteredSpawns = 0x390; // TArray<ADynamicSpawn*>
		constexpr auto RegisteredNodes = 0x3a0; // TArray<AHLLResourceNode*>
		constexpr auto AxisActorCounter = 0x3b0; // FActorCounter
		constexpr auto AlliesActorCounter = 0x4c8; // FActorCounter
		constexpr auto OnAbilitiesChanged = 0x5e0; // FMulticastInlineDelegate
		constexpr auto AxisCommanderAbilities = 0x5f0; // TArray<AHLLCommanderAbility*>
		constexpr auto AlliedCommanderAbilities = 0x600; // TArray<AHLLCommanderAbility*>
		constexpr auto AbilityVehicleSlots = 0x610; // FRepSpawnVehicleSlots
		constexpr auto RepCommanders = 0x658; // TArray<AShooterPlayerState*>
		constexpr auto m_nextBaseSpawnWaveTime = 0x668; // float
		constexpr auto AxisHQSectorIndex = 0x66c; // char
		constexpr auto AlliedHQSectorIndex = 0x66d; // char
		constexpr auto bHasHQSectors = 0x670; // uint32_t
		constexpr auto PlayerReplicatorClass = 0x678; // AHLLMapData_Player_Replicator*
		constexpr auto MapDataPlayerReplicatorArray = 0x680; // TArray<AHLLMapData_Player_Replicator*>
		constexpr auto bTeamAutoBalanceEnabled = 0x690; // char : 1
		constexpr auto TeamAutoBalanceThreshold = 0x691; // char
		constexpr auto TeamSwitchingCooldownMinutes = 0x692; // char
		constexpr auto SectorIndicators = 0x6b0; // TArray<UHLLIndicatorComponent_Sector*>
		constexpr auto ReconDataComponent = 0x6c0; // UHLLReconDataComponent*
		constexpr auto VoteDataComponent = 0x6c8; // UHLLVoteDataComponent*
		constexpr auto GameWarmupVolumeClass = 0x6d0; // AHLLGameWarmupVolume*
		constexpr auto WarmupVolumeLifetime = 0x6d8; // int32_t
		constexpr auto GameWarmupVolume = 0x6e8; // AHLLGameWarmupVolume*
		constexpr auto OnPlayerArrayUpdated = 0x6f0; // FMulticastInlineDelegate
	}

	namespace n_USubmixEffectDynamicsProcessorPreset {
		constexpr auto Settings = 0xb8; // FSubmixEffectDynamicsProcessorSettings
	}

	namespace n_UMaterialExpressionMultiply {
		constexpr auto A = 0x40; // FExpressionInput
		constexpr auto B = 0x54; // FExpressionInput
		constexpr auto ConstA = 0x68; // float
		constexpr auto ConstB = 0x6c; // float
	}

	namespace n_USoundWave {
		constexpr auto CompressionQuality = 0x160; // int32_t
		constexpr auto StreamingPriority = 0x164; // int32_t
		constexpr auto SampleRateQuality = 0x168; // ESoundwaveSampleRateSettings
		constexpr auto SoundGroup = 0x16a; // ESoundGroup
		constexpr auto bLooping = 0x16b; // char : 1
		constexpr auto bStreaming = 0x16b; // char : 1
		constexpr auto bSeekableStreaming = 0x16b; // char : 1
		constexpr auto LoadingBehavior = 0x16c; // ESoundWaveLoadingBehavior
		constexpr auto bMature = 0x16d; // char : 1
		constexpr auto bManualWordWrap = 0x16d; // char : 1
		constexpr auto bSingleLine = 0x16d; // char : 1
		constexpr auto bIsAmbisonics = 0x16e; // char : 1
		constexpr auto FrequenciesToAnalyze = 0x170; // TArray<float>
		constexpr auto CookedSpectralTimeData = 0x180; // TArray<FSoundWaveSpectralTimeData>
		constexpr auto CookedEnvelopeTimeData = 0x190; // TArray<FSoundWaveEnvelopeTimeData>
		constexpr auto InitialChunkSize = 0x1a0; // int32_t
		constexpr auto SpokenText = 0x1e8; // FString
		constexpr auto SubtitlePriority = 0x1f8; // float
		constexpr auto Volume = 0x1fc; // float
		constexpr auto Pitch = 0x200; // float
		constexpr auto NumChannels = 0x204; // int32_t
		constexpr auto SampleRate = 0x208; // int32_t
		constexpr auto Subtitles = 0x218; // TArray<FSubtitleCue>
		constexpr auto Curves = 0x228; // UCurveTable*
		constexpr auto InternalCurves = 0x230; // UCurveTable*
	}

	namespace n_UNextWaveTimer_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto TextBlock_1 = 0x238; // UTextBlock*
		constexpr auto Timer = 0x240; // UBorder*
		constexpr auto TimerText = 0x248; // UTextBlock*
		constexpr auto txt_label = 0x250; // UTextBlock*
	}

	namespace n_UMaterialExpressionRotator {
		constexpr auto Coordinate = 0x40; // FExpressionInput
		constexpr auto Time = 0x54; // FExpressionInput
		constexpr auto CenterX = 0x68; // float
		constexpr auto CenterY = 0x6c; // float
		constexpr auto Speed = 0x70; // float
		constexpr auto ConstCoordinate = 0x74; // uint32_t
	}

	namespace n_UBodySetup {
		constexpr auto AggGeom = 0x28; // FKAggregateGeom
		constexpr auto BoneName = 0x80; // FName
		constexpr auto PhysicsType = 0x88; // EPhysicsType
		constexpr auto bAlwaysFullAnimWeight = 0x89; // char : 1
		constexpr auto bConsiderForBounds = 0x89; // char : 1
		constexpr auto bMeshCollideAll = 0x89; // char : 1
		constexpr auto bDoubleSidedGeometry = 0x89; // char : 1
		constexpr auto bGenerateNonMirroredCollision = 0x89; // char : 1
		constexpr auto bSharedCookedData = 0x89; // char : 1
		constexpr auto bGenerateMirroredCollision = 0x89; // char : 1
		constexpr auto bSupportUVsAndFaceRemap = 0x89; // char : 1
		constexpr auto CollisionReponse = 0x8b; // EBodyCollisionResponse
		constexpr auto CollisionTraceFlag = 0x8c; // ECollisionTraceFlag
		constexpr auto PhysMaterial = 0x90; // UPhysicalMaterial*
		constexpr auto WalkableSlopeOverride = 0x98; // FWalkableSlopeOverride
		constexpr auto DefaultInstance = 0x120; // FBodyInstance
		constexpr auto BuildScale3D = 0x258; // FVector
	}

	namespace n_UHLLAnimNotify_CameraAnim {
		constexpr auto AnimToPlay = 0x38; // UCameraAnim*
		constexpr auto Scale = 0x40; // float
		constexpr auto PlaySpeed = 0x44; // float
		constexpr auto BlendInTime = 0x48; // float
		constexpr auto BlendOutTime = 0x4c; // float
	}

	namespace n_AHLLGameWarmupVolume {
		constexpr auto ExpireTime = 0x220; // float
		constexpr auto VolumeCollision = 0x228; // UBoxComponent*
		constexpr auto WallMesh = 0x230; // UStaticMeshComponent*
		constexpr auto MeshDMI = 0x238; // UMaterialInstanceDynamic*
		constexpr auto CountdownAC = 0x240; // UAudioComponent*
		constexpr auto FadeOutTime = 0x24c; // float
		constexpr auto CountdownSoundTime = 0x250; // float
		constexpr auto CountdownSound = 0x258; // USoundBase*
		constexpr auto StingerSound = 0x260; // USoundBase*
	}

	namespace n_UWGT_MapIcon_Outpost_C {
		constexpr auto UberGraphFrame = 0x640; // FPointerToUberGraphFrame
		constexpr auto Icon = 0x648; // UBorder*
		constexpr auto Scaler = 0x650; // UScaleBox*
		constexpr auto Widget_TooltipRef = 0x658; // UW_HoverToolTip_Explained_C*
	}

	namespace n_USafeZone {
		constexpr auto PadLeft = 0x120; // bool
		constexpr auto PadRight = 0x121; // bool
		constexpr auto PadTop = 0x122; // bool
		constexpr auto PadBottom = 0x123; // bool
	}

	namespace n_ULandscapeGrassType {
		constexpr auto GrassVarieties = 0x28; // TArray<FGrassVariety>
		constexpr auto bEnableDensityScaling = 0x38; // char : 1
		constexpr auto GrassMesh = 0x40; // UStaticMesh*
		constexpr auto GrassDensity = 0x48; // float
		constexpr auto PlacementJitter = 0x4c; // float
		constexpr auto StartCullDistance = 0x50; // int32_t
		constexpr auto EndCullDistance = 0x54; // int32_t
		constexpr auto RandomRotation = 0x58; // bool
		constexpr auto AlignToSurface = 0x59; // bool
	}

	namespace n_USizeBox {
		constexpr auto WidthOverride = 0x130; // float
		constexpr auto HeightOverride = 0x134; // float
		constexpr auto MinDesiredWidth = 0x138; // float
		constexpr auto MinDesiredHeight = 0x13c; // float
		constexpr auto MaxDesiredWidth = 0x140; // float
		constexpr auto MaxDesiredHeight = 0x144; // float
		constexpr auto MinAspectRatio = 0x148; // float
		constexpr auto MaxAspectRatio = 0x14c; // float
		constexpr auto bOverride_WidthOverride = 0x150; // char : 1
		constexpr auto bOverride_HeightOverride = 0x150; // char : 1
		constexpr auto bOverride_MinDesiredWidth = 0x150; // char : 1
		constexpr auto bOverride_MinDesiredHeight = 0x150; // char : 1
		constexpr auto bOverride_MaxDesiredWidth = 0x150; // char : 1
		constexpr auto bOverride_MaxDesiredHeight = 0x150; // char : 1
		constexpr auto bOverride_MinAspectRatio = 0x150; // char : 1
		constexpr auto bOverride_MaxAspectRatio = 0x150; // char : 1
	}

	namespace n_UMovieSceneParticleParameterTrack {
		constexpr auto Sections = 0x58; // TArray<UMovieSceneSection*>
	}

	namespace n_UParticleModuleColor {
		constexpr auto StartColor = 0x30; // FRawDistributionVector
		constexpr auto StartAlpha = 0x78; // FRawDistributionFloat
		constexpr auto bClampAlpha = 0xa8; // char : 1
	}

	namespace n_UPhysicsSettings {
		constexpr auto DefaultGravityZ = 0x38; // float
		constexpr auto DefaultTerminalVelocity = 0x3c; // float
		constexpr auto DefaultFluidFriction = 0x40; // float
		constexpr auto SimulateScratchMemorySize = 0x44; // int32_t
		constexpr auto RagdollAggregateThreshold = 0x48; // int32_t
		constexpr auto TriangleMeshTriangleMinAreaThreshold = 0x4c; // float
		constexpr auto bEnableShapeSharing = 0x50; // bool
		constexpr auto bEnablePCM = 0x51; // bool
		constexpr auto bEnableStabilization = 0x52; // bool
		constexpr auto bWarnMissingLocks = 0x53; // bool
		constexpr auto bEnable2DPhysics = 0x54; // bool
		constexpr auto PhysicErrorCorrection = 0x58; // FRigidBodyErrorCorrection
		constexpr auto LockedAxis = 0xbc; // ESettingsLockedAxis
		constexpr auto DefaultDegreesOfFreedom = 0xbd; // ESettingsDOF
		constexpr auto BounceThresholdVelocity = 0xc0; // float
		constexpr auto FrictionCombineMode = 0xc4; // EFrictionCombineMode
		constexpr auto RestitutionCombineMode = 0xc5; // EFrictionCombineMode
		constexpr auto MaxAngularVelocity = 0xc8; // float
		constexpr auto MaxDepenetrationVelocity = 0xcc; // float
		constexpr auto ContactOffsetMultiplier = 0xd0; // float
		constexpr auto MinContactOffset = 0xd4; // float
		constexpr auto MaxContactOffset = 0xd8; // float
		constexpr auto bSimulateSkeletalMeshOnDedicatedServer = 0xdc; // bool
		constexpr auto DefaultShapeComplexity = 0xdd; // ECollisionTraceFlag
		constexpr auto bDefaultHasComplexCollision = 0xde; // bool
		constexpr auto bSuppressFaceRemapTable = 0xdf; // bool
		constexpr auto bSupportUVFromHitResults = 0xe0; // bool
		constexpr auto bDisableActiveActors = 0xe1; // bool
		constexpr auto bDisableKinematicStaticPairs = 0xe2; // bool
		constexpr auto bDisableKinematicKinematicPairs = 0xe3; // bool
		constexpr auto bDisableCCD = 0xe4; // bool
		constexpr auto bEnableEnhancedDeterminism = 0xe5; // bool
		constexpr auto AnimPhysicsMinDeltaTime = 0xe8; // float
		constexpr auto bSimulateAnimPhysicsAfterReset = 0xec; // bool
		constexpr auto MaxPhysicsDeltaTime = 0xf0; // float
		constexpr auto bSubstepping = 0xf4; // bool
		constexpr auto bSubsteppingAsync = 0xf5; // bool
		constexpr auto MaxSubstepDeltaTime = 0xf8; // float
		constexpr auto MaxSubsteps = 0xfc; // int32_t
		constexpr auto SyncSceneSmoothingFactor = 0x100; // float
		constexpr auto InitialAverageFrameRate = 0x104; // float
		constexpr auto PhysXTreeRebuildRate = 0x108; // int32_t
		constexpr auto PhysicalSurfaces = 0x110; // TArray<FPhysicalSurfaceName>
		constexpr auto DefaultBroadphaseSettings = 0x120; // FBroadphaseSettings
		constexpr auto ChaosSettings = 0x160; // FChaosPhysicsSettings
	}

	namespace n_UParticleModuleAttractorLine {
		constexpr auto EndPoint0 = 0x30; // FVector
		constexpr auto EndPoint1 = 0x3c; // FVector
		constexpr auto Range = 0x48; // FRawDistributionFloat
		constexpr auto Strength = 0x78; // FRawDistributionFloat
	}

	namespace n_UMediaSoundComponent {
		constexpr auto Channels = 0x6d0; // EMediaSoundChannels
		constexpr auto DynamicRateAdjustment = 0x6d4; // bool
		constexpr auto RateAdjustmentFactor = 0x6d8; // float
		constexpr auto RateAdjustmentRange = 0x6dc; // FFloatRange
		constexpr auto MediaPlayer = 0x6f0; // UMediaPlayer*
	}

	namespace n_UVideoCaptureProtocol {
		constexpr auto bUseCompression = 0x68; // bool
		constexpr auto CompressionQuality = 0x6c; // float
	}

	namespace n_UInterpTrackVectorBase {
		constexpr auto VectorTrack = 0x70; // FInterpCurveVector
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_UBTTaskNode {
		constexpr auto Services = 0x58; // TArray<UBTService*>
		constexpr auto bIgnoreRestartSelf = 0x68; // char : 1
	}

	namespace n_UBTTask_MakeNoise {
		constexpr auto Loudnes = 0x70; // float
	}

	namespace n_ULightComponentBase {
		constexpr auto LightGuid = 0x1f0; // FGuid
		constexpr auto Brightness = 0x200; // float
		constexpr auto Intensity = 0x204; // float
		constexpr auto LightColor = 0x208; // FColor
		constexpr auto bAffectsWorld = 0x20c; // char : 1
		constexpr auto CastShadows = 0x20c; // char : 1
		constexpr auto CastStaticShadows = 0x20c; // char : 1
		constexpr auto CastDynamicShadows = 0x20c; // char : 1
		constexpr auto bAffectTranslucentLighting = 0x20c; // char : 1
		constexpr auto bTransmission = 0x20c; // char : 1
		constexpr auto bCastVolumetricShadow = 0x20c; // char : 1
		constexpr auto bCastDeepShadow = 0x20c; // char : 1
		constexpr auto bCastRaytracedShadow = 0x20d; // char : 1
		constexpr auto bAffectReflection = 0x20d; // char : 1
		constexpr auto bAffectGlobalIllumination = 0x20d; // char : 1
		constexpr auto IndirectLightingIntensity = 0x210; // float
		constexpr auto VolumetricScatteringIntensity = 0x214; // float
		constexpr auto SamplesPerPixel = 0x218; // int32_t
	}

	namespace n_UCheckBoxWidgetStyle {
		constexpr auto CheckBoxStyle = 0x30; // FCheckBoxStyle
	}

	namespace n_UTextureRenderTarget2D {
		constexpr auto SizeX = 0xc0; // int32_t
		constexpr auto SizeY = 0xc4; // int32_t
		constexpr auto ClearColor = 0xc8; // FLinearColor
		constexpr auto AddressX = 0xd8; // TextureAddress
		constexpr auto AddressY = 0xd9; // TextureAddress
		constexpr auto bForceLinearGamma = 0xda; // char : 1
		constexpr auto bHDR = 0xda; // char : 1
		constexpr auto bGPUSharedFlag = 0xda; // char : 1
		constexpr auto RenderTargetFormat = 0xdb; // ETextureRenderTargetFormat
		constexpr auto bAutoGenerateMips = 0xdc; // char : 1
		constexpr auto MipsSamplerFilter = 0xdd; // TextureFilter
		constexpr auto MipsAddressU = 0xde; // TextureAddress
		constexpr auto MipsAddressV = 0xdf; // TextureAddress
		constexpr auto OverrideFormat = 0xe0; // EPixelFormat
	}

	namespace n_UInterpTrackFloatBase {
		constexpr auto FloatTrack = 0x70; // FInterpCurveFloat
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_UEditableTextWidgetStyle {
		constexpr auto EditableTextStyle = 0x30; // FEditableTextStyle
	}

	namespace n_UTimecodeProvider {
		constexpr auto FrameDelay = 0x28; // float
	}

	namespace n_UInterpTrackInstProperty {
		constexpr auto InterpProperty = 0x28; // TFieldPath<FProperty>
		constexpr auto PropertyOuterObjectInst = 0x48; // UObject*
	}

	namespace n_UAITask {
		constexpr auto OwnerController = 0x68; // AAIController*
	}

	namespace n_UNavArea {
		constexpr auto DefaultCost = 0x30; // float
		constexpr auto FixedAreaEnteringCost = 0x34; // float
		constexpr auto DrawColor = 0x38; // FColor
		constexpr auto SupportedAgents = 0x3c; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x40; // char : 1
		constexpr auto bSupportsAgent1 = 0x40; // char : 1
		constexpr auto bSupportsAgent2 = 0x40; // char : 1
		constexpr auto bSupportsAgent3 = 0x40; // char : 1
		constexpr auto bSupportsAgent4 = 0x40; // char : 1
		constexpr auto bSupportsAgent5 = 0x40; // char : 1
		constexpr auto bSupportsAgent6 = 0x40; // char : 1
		constexpr auto bSupportsAgent7 = 0x40; // char : 1
		constexpr auto bSupportsAgent8 = 0x41; // char : 1
		constexpr auto bSupportsAgent9 = 0x41; // char : 1
		constexpr auto bSupportsAgent10 = 0x41; // char : 1
		constexpr auto bSupportsAgent11 = 0x41; // char : 1
		constexpr auto bSupportsAgent12 = 0x41; // char : 1
		constexpr auto bSupportsAgent13 = 0x41; // char : 1
		constexpr auto bSupportsAgent14 = 0x41; // char : 1
		constexpr auto bSupportsAgent15 = 0x41; // char : 1
	}

	namespace n_UHLLUI_CharacterSelection {
		constexpr auto CurrentViewMode = 0x230; // ERoleSelectionMode
		constexpr auto bAllowFavourites = 0x231; // char : 1
		constexpr auto CurrentFaction = 0x232; // EFaction
		constexpr auto CurrentRole = 0x233; // EPlayerRole
		constexpr auto CosmeticPreviewActor = 0x234; // TWeakObjectPtr<AHLLCosmeticCharacter>
		constexpr auto CosmeticPanelSwitcher = 0x250; // UWidgetSwitcher*
		constexpr auto LoadingOverlay = 0x258; // UPanelWidget*
		constexpr auto PlatoonSelection = 0x260; // UTextBlock*
		constexpr auto RoleSelection = 0x268; // UTextBlock*
		constexpr auto RoleSelectionLevel = 0x270; // UTextBlock*
		constexpr auto LoadoutSelector = 0x278; // UHLLUI_LoadoutSelector*
		constexpr auto RoleSelectionDescription = 0x280; // URichTextBlock*
		constexpr auto DescriptionScroller = 0x288; // UScrollBox*
		constexpr auto CommandVBox = 0x290; // UVerticalBox*
		constexpr auto InfantryVBox = 0x298; // UVerticalBox*
		constexpr auto ArmourVBox = 0x2a0; // UVerticalBox*
		constexpr auto ReconVBox = 0x2a8; // UVerticalBox*
		constexpr auto RoleItemClass = 0x2b0; // UHLLUI_RoleItem*
		constexpr auto AllRoleItems = 0x2b8; // TArray<UHLLUI_RoleItem*>
		constexpr auto HelmetCategory = 0x2c8; // UHLLUI_CosmeticCategory*
		constexpr auto HeadCategory = 0x2d0; // UHLLUI_CosmeticCategory*
		constexpr auto UniformCategory = 0x2d8; // UHLLUI_CosmeticCategory*
		constexpr auto ViewportClient = 0x2e0; // UShooterGameViewportClient*
	}

	namespace n_USpotLightComponent {
		constexpr auto InnerConeAngle = 0x350; // float
		constexpr auto OuterConeAngle = 0x354; // float
		constexpr auto LightShaftConeAngle = 0x358; // float
	}

	namespace n_UUserDefinedEnum {
		constexpr auto DisplayNameMap = 0x60; // TMap<FName, FText>
	}

	namespace n_UHLLUseContext_Bandage {
		constexpr auto CanBandageIcon = 0x238; // FSlateBrush
		constexpr auto CantBandageIcon = 0x2c0; // FSlateBrush
		constexpr auto RadialProg = 0x348; // UImage*
		constexpr auto IconImage = 0x350; // UImage*
		constexpr auto DisplayText = 0x358; // URichTextBlock*
	}

	namespace n_UHLLDismemberData {
		constexpr auto GoreMesh = 0x30; // USkeletalMesh*
		constexpr auto GoreMeshPhysicsAsset = 0x38; // UPhysicsAsset*
		constexpr auto COMBoneName = 0x40; // FName
		constexpr auto COMImpulseScale = 0x48; // float
		constexpr auto TearSound = 0x50; // USoundCue*
		constexpr auto BreakableJoints = 0x58; // TArray<FHLLBreakableJointData>
	}

	namespace n_UBTComposite_SimpleParallel {
		constexpr auto FinishMode = 0x90; // EBTParallelMode
	}

	namespace n_UMovieSceneEventRepeaterSection {
		constexpr auto Event = 0xe0; // FMovieSceneEvent
	}

	namespace n_UBTTask_SetTagCooldown {
		constexpr auto CooldownTag = 0x70; // FGameplayTag
		constexpr auto bAddToExistingDuration = 0x78; // bool
		constexpr auto CooldownDuration = 0x7c; // float
	}

	namespace n_UPawnAction_Sequence {
		constexpr auto ActionSequence = 0x98; // TArray<UPawnAction*>
		constexpr auto ChildFailureHandlingMode = 0xa8; // EPawnActionFailHandling
		constexpr auto RecentActionCopy = 0xb0; // UPawnAction*
	}

	namespace n_AHLLArtilleryBase {
		constexpr auto YawRate = 0x288; // float
		constexpr auto MaxYawAngle = 0x28c; // float
		constexpr auto PitchRate = 0x290; // float
		constexpr auto MinPitchAngle = 0x294; // float
		constexpr auto MaxPitchAngle = 0x298; // float
		constexpr auto ServerUpdateTurretRate = 0x29c; // float
		constexpr auto BarrelController = 0x2a0; // UArtyBarrelControllerComponent*
		constexpr auto TurnController = 0x2a8; // UArtyTurnControllerComponent*
		constexpr auto PitchAudio = 0x2b0; // UAudioComponent*
		constexpr auto YawAudio = 0x2b8; // UAudioComponent*
		constexpr auto TurnAudio = 0x2c0; // UAudioComponent*
		constexpr auto MapComponent = 0x2c8; // UHLLMapComponent*
		constexpr auto TurnSpeed = 0x2d0; // float
		constexpr auto Team = 0x2d4; // ETeam
		constexpr auto ArmourMetaData = 0x2d8; // FHLLArmourMetaData
		constexpr auto DamageFilterType = 0x2f8; // EHLLDamageFilterType
		constexpr auto ArtilleryMesh = 0x300; // USkeletalMeshComponent*
		constexpr auto ArmourHealth = 0x308; // UHLLArmourHealthComponent*
		constexpr auto ArmourInventory = 0x310; // UHLLArmourInventory*
		constexpr auto IndicatorComponent = 0x318; // UHLLIndicatorComponent*
		constexpr auto CharacterTurretGuard = 0x320; // UCapsuleComponent*
		constexpr auto GunnerSeatClass = 0x328; // AHLLSeat_ArtilleryGunner*
		constexpr auto LoaderSeatClass = 0x330; // AHLLSeat_ArtilleryLoader*
		constexpr auto GunnerSeat = 0x338; // AHLLSeat_ArtilleryGunner*
		constexpr auto LoaderSeat = 0x340; // AHLLSeat_ArtilleryLoader*
		constexpr auto SpawnedByPlayer = 0x348; // AShooterPlayerState*
		constexpr auto PitchVibrationController = 0x350; // UVibrationEventController*
		constexpr auto YawVibrationController = 0x358; // UVibrationEventController*
		constexpr auto TurnVibrationController = 0x360; // UVibrationEventController*
	}

	namespace n_UHTP_Widget_Role_Loadout_TankCommander_C {
		constexpr auto HTP_Widget_Role_Loadout_Primary = 0x230; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_3 = 0x238; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_16 = 0x240; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_17 = 0x248; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_6 = 0x250; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_8 = 0x258; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_13 = 0x260; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto HTP_Widget_Role_Loadout_Primary_C_15 = 0x268; // UHTP_Widget_Role_Loadout_Item_C*
		constexpr auto icn_faction = 0x270; // UImage*
		constexpr auto Image_10 = 0x278; // UImage*
		constexpr auto Image_17 = 0x280; // UImage*
	}

	namespace n_AHLLDispenserItem_TimedSatchel {
		constexpr auto TimeValues = 0x470; // TArray<char>
	}

	namespace n_UWGT_GameWarmup_C {
		constexpr auto UberGraphFrame = 0x230; // FPointerToUberGraphFrame
		constexpr auto Timer = 0x238; // UTextBlock*
	}

	namespace n_UHLLRoundSummaryPlatoon {
		constexpr auto PlayerVBox = 0x238; // UVerticalBox*
		constexpr auto PlatoonName = 0x240; // UTextBlock*
		constexpr auto ExpandIcon = 0x248; // UImage*
		constexpr auto DesignationIcon = 0x250; // UImage*
		constexpr auto TeamCombatValue = 0x258; // UTextBlock*
		constexpr auto TeamOffenseValue = 0x260; // UTextBlock*
		constexpr auto TeamDefenseValue = 0x268; // UTextBlock*
		constexpr auto TeamSupportValue = 0x270; // UTextBlock*
	}

	namespace n_UGameHUD_C {
		constexpr auto UberGraphFrame = 0x3b0; // FPointerToUberGraphFrame
		constexpr auto NoFireAnim = 0x3b8; // UWidgetAnimation*
		constexpr auto A_NewGameplayMessage = 0x3c0; // UWidgetAnimation*
		constexpr auto Compass = 0x3c8; // UCompass_C*
		constexpr auto CooldownStartedAmmo = 0x3d0; // UWGT_ReplenishAmmoCooldownNotification_C*
		constexpr auto CooldownStartedSupplies = 0x3d8; // UWGT_ReplenishAmmoCooldownNotification_C*
		constexpr auto GameplayMessages = 0x3e0; // UGameplayMessages_C*
		constexpr auto Image_1 = 0x3e8; // UImage*
		constexpr auto Image_3 = 0x3f0; // UImage*
		constexpr auto Image_12 = 0x3f8; // UImage*
		constexpr auto Image_13 = 0x400; // UImage*
		constexpr auto Main = 0x408; // UMain_C*
		constexpr auto MainWrapper = 0x410; // UOverlay*
		constexpr auto NoFireImage = 0x418; // UImage*
		constexpr auto PlatoonPanel = 0x420; // UPlatoonPanel_C*
		constexpr auto RCON_Overlay = 0x428; // UOverlay*
		constexpr auto RCON_Say_Message = 0x430; // UTextBlock*
		constexpr auto ReplenishAmmo = 0x438; // UWGT_ReplenishAmmoNotification_C*
		constexpr auto ReplenishSupplies = 0x440; // UWGT_ReplenishAmmoNotification_C*
		constexpr auto ScaleBox_Compass = 0x448; // UScaleBox*
		constexpr auto Timer = 0x450; // UGameTimer_C*
		constexpr auto Weapon = 0x458; // UWeapon_C*
		constexpr auto WeaponInfoPrimary = 0x460; // UVerticalBox*
		constexpr auto WeaponSBox = 0x468; // USizeBox*
		constexpr auto Sector_TugOfWar = 0x470; // TArray<FDisplayedSectorState>
		constexpr auto bAdminCamMode = 0x480; // bool
	}

}