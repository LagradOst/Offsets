// Created by BlueFire1337
// Updated 2022-01-20
// Generated 2022-02-02

namespace off {
	constexpr auto GNames = 0x76598a8;
	constexpr auto GObjects = 0x765df50;
	constexpr auto GWorld = 0x771e470;

	namespace n_UFeatureEnabledRadialContext { // : URadialContextBase
		constexpr auto FeatureName = 0x28; // FName
	}

	namespace n_UFeedingComponent { // : UActorComponent
		constexpr auto ValidFeedableTypes = 0xd0; // TArray<EFeedableType>
		constexpr auto FeedTime = 0xe0; // float
		constexpr auto FeedStruct = 0xe8; // FFeedStruct
		constexpr auto LastActorToBeFedBy = 0xf8; // AActor*
		constexpr auto AlwaysDescribe = 0x100; // bool
	}

	namespace n_UEnvQueryGenerator_WaterArc { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto Origin = 0x90; // UEnvQueryContext*
		constexpr auto NumberOfArcsToGenerate = 0x98; // FAIDataProviderIntValue
		constexpr auto MinArcRadius = 0xc8; // FAIDataProviderFloatValue
		constexpr auto MaxArcRadius = 0xf8; // FAIDataProviderFloatValue
		constexpr auto MinArcTiltDegrees = 0x128; // FAIDataProviderFloatValue
		constexpr auto MaxArcTiltDegrees = 0x158; // FAIDataProviderFloatValue
		constexpr auto MinArcPercentage = 0x188; // FAIDataProviderFloatValue
		constexpr auto MaxArcPercentage = 0x1b8; // FAIDataProviderFloatValue
		constexpr auto IncludeDirectArcToTarget = 0x1e8; // bool
		constexpr auto DirectArcTarget = 0x1f0; // UEnvQueryContext*
	}

	namespace n_UMaterialExpressionTransform { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto TransformSourceType = 0xa8; // EMaterialVectorCoordTransformSource
		constexpr auto TransformType = 0xa9; // EMaterialVectorCoordTransform
	}

	namespace n_UParticleModuleCollisionGPU { // : UParticleModuleCollisionBase
		constexpr auto Resilience = 0x50; // FRawDistributionFloat
		constexpr auto ResilienceScaleOverLife = 0x88; // FRawDistributionFloat
		constexpr auto DampingFactorRotation = 0xc0; // float
		constexpr auto Friction = 0xc4; // float
		constexpr auto RadiusScale = 0xc8; // float
		constexpr auto RadiusBias = 0xcc; // float
		constexpr auto Response = 0xd0; // EParticleCollisionResponse
		constexpr auto CollisionMode = 0xd1; // EParticleCollisionMode
	}

	namespace n_UNotInActionStateRadialContext { // : URadialContextBase
		constexpr auto TargetActionStates = 0x28; // TArray<UActionStateId*>
	}

	namespace n_UBurrowHealVFXComponent { // : UActorComponent
		constexpr auto VFXAsset = 0xc8; // UParticleSystem*
		constexpr auto VfxSocketName = 0xd0; // FName
		constexpr auto VFXDuration = 0xd8; // float
		constexpr auto SpawnedVFXSystem = 0xe0; // UParticleSystemComponent*
		constexpr auto IsVFXActive = 0xe8; // bool
	}

	namespace n_APartyBeaconHost { // : AOnlineBeaconHostObject
		constexpr auto State = 0x3f8; // UPartyBeaconState*
		constexpr auto SessionTimeoutSecs = 0x428; // float
		constexpr auto TravelSessionTimeoutSecs = 0x42c; // float
	}

	namespace n_AMusicZoneService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_ULimpingComponent { // : UActorComponent
		constexpr auto LimpStickDeflectionCurve = 0xc8; // UCurveFloat*
		constexpr auto LimpCameraCurve = 0xd0; // UCurveFloat*
		constexpr auto NumAntiCheatSamplesOnServer = 0xd8; // int32_t
		constexpr auto MaxAveragePlayerSpeedServerTolerance = 0xdc; // float
		constexpr auto MinLimpStrengthToCrossToPlayRumbleAndSfx = 0xe0; // float
		constexpr auto PredictionValidityTime = 0xe4; // float
		constexpr auto MinStickDeflectionToLimp = 0xe8; // float
		constexpr auto LimpCrunchRumble = 0xf0; // UForceFeedbackEffect*
		constexpr auto CameraSpringAccel = 0xf8; // float
		constexpr auto CamPitchScalar = 0xfc; // float
		constexpr auto CamRollScalar = 0x100; // float
		constexpr auto LocalBrokenLegAudioStateEvent = 0x108; // UWwiseEvent*
		constexpr auto DelayUntilStartCheatDetection = 0x110; // float
		constexpr auto CheatTimeThresholdToApplyServerPenalty = 0x114; // float
		constexpr auto MoveSpeedScalarIfCheating = 0x118; // float
		constexpr auto CheatTimerDecaySpeed = 0x11c; // float
		constexpr auto CheatPenaltyTime = 0x120; // float
		constexpr auto CheatPunishmentIncreasePerViolation = 0x124; // int32_t
		constexpr auto Player = 0x148; // AAthenaPlayerCharacter*
		constexpr auto bIsLimping = 0x17e; // bool
	}

	namespace n_UCanvasWorldMapComponent { // : UActorComponent
		constexpr auto CanvasWidth = 0xc8; // int32_t
		constexpr auto CanvasHeight = 0xcc; // int32_t
		constexpr auto MapClass = 0xd0; // UObject*
		constexpr auto NumGridSquares = 0xd8; // int32_t
		constexpr auto MaxUpdateDist = 0xdc; // int32_t
		constexpr auto SquareShipUpdateDist = 0xe0; // float
		constexpr auto ShipUpdateRot = 0xe4; // float
		constexpr auto ShipIcons = 0xe8; // TArray<FCanvasWorldMapShipIcons>
		constexpr auto OffscreenArrowTexture = 0xf8; // UTexture*
		constexpr auto CompassTexture = 0x100; // UTexture*
		constexpr auto CompassPosition = 0x108; // FVector2D
		constexpr auto Font = 0x110; // UFont*
		constexpr auto GridLabelScreenMin = 0x118; // FVector2D
		constexpr auto GridLabelEdgeOffset = 0x120; // FVector2D
		constexpr auto GridLabelSize = 0x128; // float
		constexpr auto IslandLabelSize = 0x12c; // float
		constexpr auto IslandLabelFadeoutZoom = 0x130; // float
		constexpr auto IslandLabelFadeData = 0x134; // FCanvasLerpData
		constexpr auto OffscreenIndicatorFadeData = 0x144; // FCanvasLerpData
		constexpr auto OffscreenIndicatorSafe = 0x154; // FBox2D
		constexpr auto OffscreenIndicatorBounds = 0x168; // FBox2D
		constexpr auto OffscreenArrowOffset = 0x17c; // float
		constexpr auto BackgroundColour = 0x180; // FLinearColor
		constexpr auto ReapersMarkBootyItemIcons = 0x190; // TArray<FCanvasWorldMapReaperTrackedBootItemIcon>
		constexpr auto ReapersMarkBootyItemOffset = 0x1a0; // FVector2D
		constexpr auto CrosshairTexture = 0x1a8; // UTexture*
		constexpr auto CrosshairEmptyTexture = 0x1b0; // UTexture*
		constexpr auto PinTexture = 0x1b8; // UTexture*
		constexpr auto PinTextureHighlight = 0x1c0; // UTexture*
		constexpr auto PathDropTexture = 0x1c8; // UTexture*
		constexpr auto LineTextureWidth = 0x1d0; // float
		constexpr auto LineTextureLength = 0x1d4; // float
		constexpr auto TrackedShipIcons = 0x1d8; // TArray<FCanvasWorldMapShipIcons>
		constexpr auto AllianceFlagIcon = 0x1e8; // UTexture*
		constexpr auto ReapersMarkFlagIcons = 0x1f0; // TArray<UTexture*>
		constexpr auto ReapersBonesIcons = 0x200; // TArray<UTexture*>
		constexpr auto ReapersMarkShipIcon = 0x210; // UTexture*
		constexpr auto ShipFlagOverlayOffset = 0x218; // FVector2D
		constexpr auto SecondaryShipFlagOverlayOffset = 0x220; // FVector2D
		constexpr auto ShipFlagOverlayScale = 0x228; // float
		constexpr auto MarkerFlagOverlayOffset = 0x22c; // FVector2D
		constexpr auto MarkerFlagOverlayScale = 0x234; // float
		constexpr auto IslandEventHUDData = 0x238; // UIslandEventHUDData*
		constexpr auto TrackedShips = 0x240; // TArray<FCanvasWorldMapShipLocation>
		constexpr auto TrackedBootyItemInfos = 0x250; // TArray<FReapersMarkTrackedBootyItemInfo>
		constexpr auto RenderTarget = 0x260; // UIterativeCanvasRenderTarget2D*
		constexpr auto CanvasDataAsset = 0x300; // UMapTableCanvasDataAsset*
	}

	namespace n_AStoryService { // : AActor
		constexpr auto Stories = 0x3f8; // TArray<FStoryInfo>
		constexpr auto ActiveStories = 0x408; // TArray<FStoryInfo>
	}

	namespace n_USummonAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto NumToSpawnMultiplier = 0x40; // float
	}

	namespace n_UAddOpenContainerActionRuleComponent { // : UActorComponent
		constexpr auto NotificationInputId = 0xc8; // UNotificationInputId*
		constexpr auto DisplayPriority = 0xd0; // EActionDisplayPriority
	}

	namespace n_UTaleProgressStatueInteractableComponent { // : UInteractableComponent
		constexpr auto HoldTime = 0x120; // float
		constexpr auto ReturnToShipInteractionInputID = 0x128; // UNotificationInputId*
		constexpr auto ReturnToShipInteractionReleasedInputID = 0x130; // UNotificationInputId*
		constexpr auto ResumeFromTaleProgressInteractionInputID = 0x138; // UNotificationInputId*
		constexpr auto ResumeFromTaleProgressInteractionReleasedInputID = 0x140; // UNotificationInputId*
		constexpr auto ResumeFromTaleProgressActionRuleDescription = 0x148; // FText
		constexpr auto ResumeFromTaleProgressWithLargeItemActionRuleDescription = 0x180; // FText
		constexpr auto OwningStatue = 0x1c8; // ATaleProgressStatue*
		constexpr auto StatueInteractionState = 0x1d0; // EInteractableState
	}

	namespace n_UMerchantQuestRandomRequiredItemsDataAsset { // : UDataAsset
		constexpr auto CategoryGroups = 0x28; // TArray<FMerchantQuestCategoryGroup>
	}

	namespace n_UShantyUnlockDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UAISense_Sight { // : UAISense
		constexpr auto MaxTracesPerTick = 0x138; // int32_t
		constexpr auto HighImportanceQueryDistanceThreshold = 0x13c; // float
		constexpr auto MaxQueryImportance = 0x144; // float
		constexpr auto SightLimitQueryImportance = 0x148; // float
	}

	namespace n_UParticleModuleRotationRateBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UGoldReward { // : UReward
		constexpr auto MinGold = 0x28; // uint32_t
		constexpr auto MaxGold = 0x2c; // uint32_t
	}

	namespace n_UCutsceneResponseSheet { // : UObject
		constexpr auto OnRelevantActorAdded = 0x28; // FScriptMulticastDelegate
		constexpr auto RelevantActorClasses = 0x38; // TArray<UClass*>
		constexpr auto CutsceneResponsePlayer = 0x48; // TScriptInterface<Class>
		constexpr auto CutsceneInstigator = 0x58; // UObject*
		constexpr auto IsActive = 0x60; // bool
	}

	namespace n_AShipwreck { // : AActor
		constexpr auto MeshParentComponent = 0x3e8; // USceneComponent*
		constexpr auto RevealTriggerVolume = 0x3f0; // UPrimitiveComponent*
		constexpr auto CalmZone = 0x3f8; // UCalmWaterComponent*
		constexpr auto LocalisedName = 0x400; // FText
		constexpr auto DistanceThresholdToConsiderPlayerAsBeingNearShipwreckForTelemetry = 0x438; // float
		constexpr auto ServerMigrationPointOfInterestDistance = 0x43c; // float
		constexpr auto ProxyClass = 0x440; // ANetProxy*
		constexpr auto ShouldDisableMigrationForSpawnItemsUntilPickedUp = 0x448; // bool
		constexpr auto SightingEncounterParams = 0x468; // FEncounterParams
		constexpr auto CloseEncounterParams = 0x474; // FEncounterParams
	}

	namespace n_UFireGridVFXParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FFireGridVFXParams
	}

	namespace n_UPlayfabPartyVoiceChannel { // : UVoiceChannel
		constexpr auto BandwidthPerSecondReservationInBytes = 0x80; // int32_t
		constexpr auto SaturationCooloffPeriodInSeconds = 0x88; // float
	}

	namespace n_UTaleQuestAssignVaultWithFallbackKeysStepDesc { // : UTaleQuestAssignVaultStepDesc
		constexpr auto FallbackKeys = 0xf0; // TArray<UItemDesc*>
	}

	namespace n_UVFXSpawnerComponent { // : UActorComponent
		constexpr auto CachedParticleSystem = 0xc8; // UParticleSystemComponent*
		constexpr auto AttachedSceneComponent = 0xd0; // USceneComponent*
		constexpr auto VFXParameters = 0xd8; // FVFXHandlerComponentParams
		constexpr auto State = 0x118; // bool
	}

	namespace n_UIsWearingClothingNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto Clothes = 0x30; // TArray<UClothingDesc*>
		constexpr auto MinimumRequiredItems = 0x40; // int32_t
	}

	namespace n_AAIShipObstacleService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UAshenLordDesc { // : UDataAsset
		constexpr auto LocalisedName = 0x28; // FText
		constexpr auto ClassId = 0x60; // UAIClassId*
		constexpr auto DialogueData = 0x68; // USceneDialogueData*
		constexpr auto LordDefeatedStat = 0x70; // FPlayerStat
	}

	namespace n_ULandmarkReactionEventPlayAudio { // : ULandmarkReactionEvent
		constexpr auto AudioCue = 0x38; // UWwiseEvent*
	}

	namespace n_UTaleQuestChooseLandOrSeaStep { // : UTaleQuestStep
		constexpr auto SeaClueSiteTypes = 0xa8; // USeaClueSiteTypesDataAsset*
	}

	namespace n_UDistributionVectorParameterBase { // : UDistributionVectorConstant
		constexpr auto ParameterName = 0x50; // FName
		constexpr auto MinInput = 0x58; // FVector
		constexpr auto MaxInput = 0x64; // FVector
		constexpr auto MinOutput = 0x70; // FVector
		constexpr auto MaxOutput = 0x7c; // FVector
		constexpr auto ParamModes = 0x88; // DistributionParamMode [0x3]
	}

	namespace n_UOnboardCharacterTrackerComponent { // : UActorComponent
		constexpr auto OnboardCharacters = 0x160; // TArray<TWeakObjectPtr<AActor>>
	}

	namespace n_APocketWatch { // : ASkeletalMeshWieldableItem
		constexpr auto InventoryItem = 0x798; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7a0; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x7a8; // UUsableWieldableComponent*
		constexpr auto AudioEmitter = 0x7b0; // UWwiseEmitterComponent*
		constexpr auto MinuteHandParams = 0x7b8; // FPocketWatchHandParams
		constexpr auto HourHandParams = 0x820; // FPocketWatchHandParams
		constexpr auto DateDisplay = 0x888; // FPocketWatchDateDisplay
		constexpr auto FirstPersonMeshDynamicMaterialInstance = 0x8c0; // UMaterialInstanceDynamic*
		constexpr auto ThirdPersonMeshDynamicMaterialInstance = 0x8c8; // UMaterialInstanceDynamic*
		constexpr auto DateSwitchSFX = 0x8d0; // UWwiseEvent*
		constexpr auto MinuteHandTickSFX = 0x8d8; // UWwiseEvent*
		constexpr auto FirstPersonMeshAnimator = 0x8f0; // UPocketWatchAnimationInstance*
		constexpr auto ThirdPersonMeshAnimator = 0x8f8; // UPocketWatchAnimationInstance*
		constexpr auto CurrentMeshAnimator = 0x900; // UPocketWatchAnimationInstance*
	}

	namespace n_UStatProgressStepDesc { // : UTaleQuestStepDesc
		constexpr auto Stat = 0x80; // FPlayerStat
	}

	namespace n_USirenTridentShotComponentAudioParams { // : ULaunchableShotComponentAudioParams
		constexpr auto ChangeProjectileTierEvent = 0x70; // UWwiseEvent*
		constexpr auto DamageLevelAudioSwitchName = 0x78; // FName
	}

	namespace n_ACustomShipwreck { // : AShipwreck
		constexpr auto WreckIndicatorActorClass = 0x4b8; // AActor*
		constexpr auto WreckIndicatorOffset = 0x4c0; // FVector
		constexpr auto SpawnedWreckIndicatorActor = 0x4d0; // AActor*
	}

	namespace n_USirenSongAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto NamedControllerParams = 0x28; // TArray<FAthenaAIControllerParamValue>
		constexpr auto DamageIntervalCountingMode = 0x38; // EAIAbilityDamageIntervalCounterMode
		constexpr auto UseTimeBetweenAbility = 0x39; // bool
		constexpr auto ActivationTimerCooldown = 0x40; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto TimeBetweenAbility = 0x50; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto UseDamageBetweenAbility = 0x60; // bool
		constexpr auto DamageBetweenAbility = 0x68; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto AbilityRadius = 0x78; // float
		constexpr auto UseMinMaxAttackRange = 0x7c; // bool
		constexpr auto MinMaxAttackRange = 0x80; // FMinMaxAbilityRange
		constexpr auto FollowUpAbilities = 0x88; // TArray<FAIAbilityFollowUp>
		constexpr auto Weight = 0x98; // float
		constexpr auto ContinuousCooldownAbilityParameters = 0xa0; // FAIAbilityContinuousCooldownParameterData
		constexpr auto AIAbilityTypeClass = 0xc0; // UAthenaAIAbilityType*
	}

	namespace n_UParticleModuleLocationPrimitiveCylinder { // : UParticleModuleLocationPrimitiveBase
		constexpr auto RadialVelocity = 0xc8; // char : 1
		constexpr auto StartRadius = 0xd0; // FRawDistributionFloat
		constexpr auto AdditionalStartRadiuses = 0x108; // FRawDistributionFloat [0x4]
		constexpr auto StartRadiusUseGroupAForAll = 0x1e8; // char : 1
		constexpr auto RadiusScale = 0x1ec; // FVector2D
		constexpr auto StartHeight = 0x1f8; // FRawDistributionFloat
		constexpr auto StartHeightUseGroupAForAll = 0x230; // char : 1
		constexpr auto AdditionalStartHeights = 0x238; // FRawDistributionFloat [0x4]
		constexpr auto AngleRange = 0x318; // FVector2D
		constexpr auto AdditionalAngleRanges = 0x320; // FVector2D [0x4]
		constexpr auto AngleRangeUseGroupAForAll = 0x340; // char : 1
		constexpr auto HeightAxis = 0x344; // CylinderHeightAxis
	}

	namespace n_UInterpFilter_Classes { // : UInterpFilter
		constexpr auto Caption = 0x28; // FString
	}

	namespace n_UFireBreathAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto FireBreathDuration = 0xc8; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto FireBreathObject = 0xd8; // AStatusEffectOverlapZone*
		constexpr auto FireBreathVFXParams = 0xe0; // FVFXHandlerComponentParams
		constexpr auto FireCollisionVolumeSize = 0x120; // FVector
		constexpr auto FireBreathZoneStartOffset = 0x12c; // float
		constexpr auto FireStartDelay = 0x130; // float
		constexpr auto FireEndPreWarn = 0x134; // float
		constexpr auto VfxSpawner = 0x138; // UVFXSpawnerComponent*
	}

	namespace n_UTaleAggressiveGhostShipEncounterService { // : UTaleQuestService
		constexpr auto ServiceDesc = 0x68; // UTaleAggressiveGhostShipEncounterServiceDesc*
		constexpr auto ActiveGhostShipEncounter = 0x70; // AAggressiveGhostShipsEncounter*
	}

	namespace n_UTaleQuestBranchStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestBranchStepDesc*
		constexpr auto Step = 0x98; // UTaleQuestStep*
	}

	namespace n_UAIFaunaSpawner { // : UAISpawner
		constexpr auto FaunaWave = 0x428; // FAIFaunaSpawnerWave
		constexpr auto FaunaLeader = 0x548; // AActor*
		constexpr auto PlayersInSpawnArea = 0x560; // TArray<AActor*>
	}

	namespace n_UAbilitySystemTestAttributeSet { // : UAttributeSet
		constexpr auto MaxHealth = 0x30; // float
		constexpr auto Health = 0x34; // float
		constexpr auto Mana = 0x38; // float
		constexpr auto MaxMana = 0x3c; // float
		constexpr auto Damage = 0x40; // float
		constexpr auto SpellDamage = 0x44; // float
		constexpr auto PhysicalDamage = 0x48; // float
		constexpr auto CritChance = 0x4c; // float
		constexpr auto CritMultiplier = 0x50; // float
		constexpr auto ArmorDamageReduction = 0x54; // float
		constexpr auto DodgeChance = 0x58; // float
		constexpr auto LifeSteal = 0x5c; // float
		constexpr auto Strength = 0x60; // float
		constexpr auto StackingAttribute1 = 0x64; // float
		constexpr auto StackingAttribute2 = 0x68; // float
		constexpr auto NoStackAttribute = 0x6c; // float
	}

	namespace n_UShipLiveryDescAsset { // : UShipPartDescAsset
		constexpr auto ShipLivery = 0x28; // FShipLivery
	}

	namespace n_UTornMapSettings { // : UDeveloperSettings
		constexpr auto TornMapItemDescClass = 0x38; // UTreasureMapItemDesc*
		constexpr auto DefaultParams = 0x40; // FStringAssetReference
		constexpr auto DefaultMapBlendMode = 0x50; // EBlendMode
		constexpr auto DefaultMarkScale = 0x54; // float
		constexpr auto DefaultMarkBlendMode = 0x58; // EBlendMode
	}

	namespace n_UTaleQuestSpawnWashedUpSkeletonClueStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UCameraPitchModifier { // : UCameraModifier
		constexpr auto bDebug = 0x28; // char : 1
		constexpr auto bExclusive = 0x28; // char : 1
		constexpr auto Priority = 0x2c; // char
		constexpr auto CameraOwner = 0x30; // APlayerCameraManager*
		constexpr auto AlphaInTime = 0x38; // float
		constexpr auto AlphaOutTime = 0x3c; // float
		constexpr auto Alpha = 0x40; // float
	}

	namespace n_AVolcanicRock { // : ACannonProjectile
		constexpr auto ExplosionComponent = 0x610; // UExplosionComponent*
		constexpr auto ApplyKnockbackOnDirectHit = 0x618; // bool
		constexpr auto AllowFriendlyFireOnDirectHit = 0x619; // bool
		constexpr auto DirectHitHealthChangeReason = 0x61a; // EHealthChangedReason
		constexpr auto ImpactDamagerType = 0x620; // UDamagerType*
		constexpr auto StatTriggerForCannonballsHittingShips = 0x638; // UConditionalStatsTriggerType*
		constexpr auto StatTriggerForCannonballsHittingPlayers = 0x640; // UConditionalStatsTriggerType*
		constexpr auto StatTriggerForCannonballsHittingReactingActors = 0x648; // UConditionalStatsTriggerType*
	}

	namespace n_UStormParams { // : UDataAsset
		constexpr auto PositionCurve = 0x28; // FFixedStepInterpCurveVector2D
		constexpr auto StormType = 0x40; // TArray<char>
		constexpr auto StormClass = 0x50; // AActor*
		constexpr auto StormTypeSettings = 0x58; // TArray<FStormStrengthType>
		constexpr auto StormTypeStepTime = 0x68; // float
		constexpr auto StormTypeBlendTime = 0x6c; // float
		constexpr auto CycleTime = 0x70; // float
	}

	namespace n_UMovieSceneCameraCutTrack { // : UMovieSceneNameableTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UStorySpawnedActorsDataAsset { // : UDataAsset
		constexpr auto StorySpawnedActorsList = 0x28; // TArray<FStorySpawnedActorsList>
	}

	namespace n_UAshCloudAIAbility { // : UAthenaAIAbility
		constexpr auto Owner = 0x78; // APawn*
		constexpr auto SetupAbilityParams = 0x80; // UAshCloudAIAbilityParams*
		constexpr auto AshCloudInstance = 0x88; // AAshenLordAshCloud*
	}

	namespace n_UTextPropertyTestObject { // : UObject
		constexpr auto DefaultedText = 0x28; // FText
		constexpr auto UndefaultedText = 0x60; // FText
		constexpr auto TransientText = 0x98; // FText
	}

	namespace n_UFlashbangEffectComponent { // : UActorComponent
		constexpr auto FlashTimer = 0xd0; // float
		constexpr auto FadeOutTimer = 0xd4; // float
		constexpr auto FlashbangCooldown = 0xd8; // float
		constexpr auto StartSfxEvent = 0xe0; // UWwiseEvent*
		constexpr auto StopSfxEvent = 0xe8; // UWwiseEvent*
	}

	namespace n_ASpectacleCapstan { // : ACapstan
		constexpr auto DisengagedRotationSpeed = 0x7d0; // float
		constexpr auto DisengagedDropSpeed = 0x7d4; // float
		constexpr auto IsEngaged = 0x7d8; // bool
	}

	namespace n_UWindZoneComponent { // : USceneComponent
		constexpr auto TurbulenceParams = 0x2b8; // FWindTurbulenceParameters
		constexpr auto WindZoneParams = 0x328; // FWindZoneParams
	}

	namespace n_UStopEmissaryVoyageInlineVoteConsumer { // : UEmissaryVoyageInlineVoteConsumerBase
		constexpr auto EmissaryVotingCastVote = 0x128; // FText
		constexpr auto EmissaryVotingCantVote = 0x160; // FText
		constexpr auto EmissaryVotingCantVoteReasonCrewShipOutsideRange = 0x198; // FText
		constexpr auto EmissaryVotingCantVoteReasonActiveForDifferentCompany = 0x1d0; // FText
		constexpr auto EmissaryVotingRemoveVote = 0x208; // FText
		constexpr auto EmissaryVotingCantRemoveVote = 0x240; // FText
	}

	namespace n_UNestedWorldComposition { // : UWorldComposition
		constexpr auto TilesStreaming = 0x98; // TArray<ULevelStreaming*>
		constexpr auto TilesStreamingTimeThreshold = 0xa8; // double
		constexpr auto bLoadAllTilesDuringCinematic = 0xb0; // bool
		constexpr auto bRebaseOriginIn3DSpace = 0xb1; // bool
		constexpr auto RebaseOriginDistance = 0xb4; // float
	}

	namespace n_UMaterialExpressionStaticBoolParameter { // : UMaterialExpressionParameter
		constexpr auto DefaultValue = 0x90; // char : 1
	}

	namespace n_UMeshAnimatorComponent { // : UActorComponent
		constexpr auto SyncWithServer = 0xc8; // bool
		constexpr auto Animations = 0xd0; // TArray<FMeshAnimatorAnimationEntry>
		constexpr auto ServerSyncData = 0xe0; // FMeshAnimatorSyncData
		constexpr auto OnAnimationFinishedDelegate = 0x108; // FScriptMulticastDelegate
		constexpr auto AnimationInstance = 0x120; // FMeshAnimatorInstance
	}

	namespace n_UTaleResourceBrokerService { // : UTaleQuestService
		constexpr auto ContendedResourceService = 0x60; // TScriptInterface<Class>
		constexpr auto ResourceRegistry = 0x70; // TScriptInterface<Class>
		constexpr auto MigrationActions = 0x80; // TArray<FMigrationActionPair>
	}

	namespace n_UMigrationUIContentsDataAsset { // : UDataAsset
		constexpr auto Font = 0x28; // UFont*
		constexpr auto ShowBanner = 0x30; // bool
		constexpr auto BannerText = 0x38; // FText
		constexpr auto BannerTextFontScale = 0x70; // float
		constexpr auto BannerTextPostSpacing = 0x74; // int32_t
		constexpr auto PoemTextFontScale = 0x78; // float
		constexpr auto PoemTextSpacing = 0x7c; // int32_t
		constexpr auto MaskBorderSize = 0x80; // FVector2D
		constexpr auto Poems = 0x88; // TArray<FMigrationUIContentsDataAssetEntry>
		constexpr auto RevealDuration = 0x98; // float
		constexpr auto FadeOutDuration = 0x9c; // float
		constexpr auto MigrationUIMaterialFileLocation = 0xa0; // FStringAssetReference
	}

	namespace n_ARevealableService { // : AActor
		constexpr auto FullCheckInterval = 0x3d8; // float
		constexpr auto TargetGameStateObject = 0x3e0; // UObject*
	}

	namespace n_UDistributionFloat { // : UDistribution
		constexpr auto bCanBeBaked = 0x30; // char : 1
	}

	namespace n_AInfo { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_URiddleQuestValidLocationGeneratorData { // : UDataAsset
		constexpr auto PacesToCentimetres = 0x28; // float
		constexpr auto MinNumPaces = 0x2c; // uint32_t
		constexpr auto MaxNumPaces = 0x30; // uint32_t
		constexpr auto MinNumPacesForNonVagueNonUniqueLandmark = 0x34; // uint32_t
		constexpr auto MaxNumPacesForNonVagueNonUniqueLandmark = 0x38; // uint32_t
		constexpr auto IsBlockedTestHeight = 0x3c; // float
		constexpr auto CastDownOffset = 0x40; // float
		constexpr auto CastDownLength = 0x44; // float
		constexpr auto MaxAngleChangeBetweenPaces = 0x48; // float
		constexpr auto CollisionTestCapsuleHalfHeight = 0x4c; // float
		constexpr auto CollisionTestCapsuleRadius = 0x50; // float
		constexpr auto CollisionTestYOffset = 0x54; // float
		constexpr auto HitTestTraceChannel = 0x58; // ECollisionChannel
		constexpr auto CardinalDirectionTolerance = 0x5c; // float
	}

	namespace n_AMockControllerWithSubjectInterface { // : AController
		constexpr auto Pawn = 0x3d8; // APawn*
		constexpr auto Character = 0x3e8; // ACharacter*
		constexpr auto PlayerState = 0x3f0; // APlayerState*
		constexpr auto TransformComponent = 0x3f8; // USceneComponent*
		constexpr auto ControlRotation = 0x400; // FRotator
		constexpr auto bAttachToPawn = 0x40c; // char : 1
		constexpr auto StateName = 0x418; // FName
		constexpr auto OnInstigatedAnyDamage = 0x420; // FScriptMulticastDelegate
	}

	namespace n_UStatusResponseReportNoiseEvent { // : UStatusResponse
		constexpr auto NoiseInstigator = 0x30; // AActor*
		constexpr auto NoiseTag = 0x38; // FName
		constexpr auto NoiseRange = 0x40; // float
		constexpr auto NoiseLoudness = 0x44; // float
		constexpr auto NoiseMultipleTicks = 0x48; // bool
		constexpr auto NoiseTimerTick = 0x4c; // float
	}

	namespace n_USlider { // : UWidget
		constexpr auto Value = 0x138; // float
		constexpr auto ValueDelegate = 0x13c; // DelegateProperty
		constexpr auto WidgetStyle = 0x150; // FSliderStyle
		constexpr auto Orientation = 0x398; // EOrientation
		constexpr auto SliderBarColor = 0x39c; // FLinearColor
		constexpr auto SliderHandleColor = 0x3ac; // FLinearColor
		constexpr auto IndentHandle = 0x3bc; // bool
		constexpr auto Locked = 0x3bd; // bool
		constexpr auto OnMouseCaptureBegin = 0x3c0; // FScriptMulticastDelegate
		constexpr auto OnMouseCaptureEnd = 0x3d0; // FScriptMulticastDelegate
		constexpr auto OnValueChanged = 0x3e0; // FScriptMulticastDelegate
	}

	namespace n_UGetPromptsLocalService { // : UBlueprintAsyncActionBase
		constexpr auto Loaded = 0x28; // FScriptMulticastDelegate
		constexpr auto WorldContextObject = 0x38; // UObject*
	}

	namespace n_AStaticSimpleBootyWieldableItem { // : ANonDisplaceableLargeStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UAnimSingleNodeInstance { // : UAnimInstance
		constexpr auto CurrentAsset = 0x440; // UAnimationAsset*
		constexpr auto CurrentVertexAnim = 0x448; // UVertexAnimation*
		constexpr auto BlendSpaceInput = 0x450; // FVector
		constexpr auto BlendSampleData = 0x460; // TArray<FBlendSampleData>
		constexpr auto BlendFilter = 0x470; // FBlendFilter
		constexpr auto CurrentTime = 0x500; // float
		constexpr auto PlayRate = 0x504; // float
		constexpr auto PostEvaluateAnimEvent = 0x508; // DelegateProperty
		constexpr auto bLooping = 0x518; // char : 1
		constexpr auto bPlaying = 0x518; // char : 1
		constexpr auto bReverse = 0x518; // char : 1
	}

	namespace n_UBarrelsOfPlentyClueSiteData { // : UClueSiteData
		constexpr auto SpawnLocation = 0x38; // FVector
	}

	namespace n_USyncGroupAnimMetaData { // : UAnimMetaData
		constexpr auto SyncGroup = 0x28; // FName
	}

	namespace n_USceneComponent { // : UActorComponent
		constexpr auto AttachParent = 0xc8; // USceneComponent*
		constexpr auto AttachChildren = 0xd0; // TArray<USceneComponent*>
		constexpr auto AttachSocketName = 0xe0; // FName
		constexpr auto bRequiresCustomLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteTranslation = 0xe8; // char : 1
		constexpr auto bAbsoluteRotation = 0xe8; // char : 1
		constexpr auto bAbsoluteScale = 0xe8; // char : 1
		constexpr auto bVisible = 0xe8; // char : 1
		constexpr auto bHiddenInGame = 0xe8; // char : 1
		constexpr auto bShouldUpdatePhysicsVolume = 0xe8; // char : 1
		constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0xe9; // char : 1
		constexpr auto bUseAttachParentBound = 0xe9; // char : 1
		constexpr auto bComponentIsUnionOfChildren = 0xe9; // char : 1
		constexpr auto bJitterReduction = 0xe9; // char : 1
		constexpr auto CacheRootVelocity = 0xe9; // char : 1
		constexpr auto bWorldToComponentUpdated = 0xe9; // char : 1
		constexpr auto PhysicsVolume = 0xf8; // TWeakObjectPtr<APhysicsVolume>
		constexpr auto RelativeScale3D = 0x11c; // FVector
		constexpr auto RelativeLocation = 0x128; // FVector
		constexpr auto RelativeRotation = 0x134; // FRotator
		constexpr auto Mobility = 0x220; // EComponentMobility
		constexpr auto DetailMode = 0x221; // EDetailMode
		constexpr auto ComponentVelocity = 0x22c; // FVector
		constexpr auto PhysicsVolumeChangedDelegate = 0x238; // FScriptMulticastDelegate
		constexpr auto SocketVelocitiesToCache = 0x258; // TArray<FName>
	}

	namespace n_UWieldableItemAnimationInstance { // : UAnimInstance
		constexpr auto MessagingDispatcher = 0x450; // FObjectMessagingDispatcher
		constexpr auto OneShotAnimationSequence = 0x4f0; // TArray<FInputSequencePair>
		constexpr auto OneShotAnimationAlternateSequence = 0x500; // TArray<FInputSequencePair>
		constexpr auto ContinuousUseAnimationSequence = 0x510; // TArray<FInputMontagePair>
		constexpr auto ContinuousUseAnimationAlternateSequence = 0x520; // TArray<FInputMontagePair>
		constexpr auto EquipItemAnimationSequence = 0x530; // UAnimSequenceBase*
		constexpr auto UnequipItemAnimationSequence = 0x538; // UAnimSequenceBase*
		constexpr auto OneShotIsAlternate = 0x540; // bool
		constexpr auto ContinuousIsAlternate = 0x541; // bool
		constexpr auto DisableBlending = 0x542; // bool
		constexpr auto CurrentMontage = 0x620; // UAnimMontage*
	}

	namespace n_UStartSuppressingCutsceneResponsesStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_AAshenLordAshCloud { // : AActor
		constexpr auto CloudMesh = 0x3d0; // UStaticMeshComponent*
		constexpr auto SetupData = 0x3d8; // UAshenLordAshCloudSetupDataAsset*
		constexpr auto InnerRangeStartOffset = 0x3e0; // float
		constexpr auto OuterRangeStart = 0x3e4; // float
		constexpr auto NormalisedEngulfedRTPC = 0x3e8; // FName
		constexpr auto RTPCSecondsBetweenUpdates = 0x3f0; // float
		constexpr auto LifeTime = 0x3f8; // float
		constexpr auto StartTime = 0x3fc; // float
		constexpr auto TimeOffset = 0x400; // float
		constexpr auto CloudState = 0x404; // EAshCloudState
		constexpr auto MaxRadiusMultiplier = 0x43c; // float
	}

	namespace n_UExplosionComponent { // : UActorComponent
		constexpr auto ExplosionParams = 0xd0; // FExplosionInfo
		constexpr auto UseLaunchLocation = 0x210; // bool
		constexpr auto RelativeLaunchLocation = 0x214; // FVector
		constexpr auto LaunchHeight = 0x220; // float
	}

	namespace n_UPlayerBuriedItemServiceMapStorePopulatorDataAsset { // : UDataAsset
		constexpr auto MinNumberMapsPerSeaRegion = 0x28; // int32_t
		constexpr auto MinSeparationBetweenXs = 0x2c; // float
		constexpr auto SeaRegions = 0x30; // TArray<FPlayerBuriedItemServiceDataAssetMapStorePopulationSeaRegion>
	}

	namespace n_UTextBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UEnvQueryInstanceBlueprintWrapper { // : UObject
		constexpr auto QueryID = 0x30; // int32_t
		constexpr auto ItemType = 0x50; // UEnvQueryItemType*
		constexpr auto OptionIndex = 0x58; // int32_t
		constexpr auto OnQueryFinishedEvent = 0x60; // FScriptMulticastDelegate
	}

	namespace n_UInterpTrackFloatBase { // : UInterpTrack
		constexpr auto FloatTrack = 0x70; // FInterpCurveFloat
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_UInventoryItemCategoryToSlotRemappingAsset { // : UDataAsset
		constexpr auto Slots = 0x28; // TArray<FCategorySpec>
	}

	namespace n_APetActionStateCreatorDefinition { // : AActionStateCreatorDefinition
		constexpr auto SpawnParams = 0x3d0; // FPetSpawnActionStateParams
		constexpr auto DespawnParams = 0x410; // FPetDespawnActionStateParams
		constexpr auto HideInObjectParams = 0x450; // FHideInObjectActionStateParams
		constexpr auto FiredFromActorParams = 0x478; // FFiredFromActorActionStateParams
	}

	namespace n_ASpawnProgressTriggerVolume { // : APhysicsVolume
		constexpr auto ClearProgress = 0x420; // bool
		constexpr auto StartDisabled = 0x470; // bool
		constexpr auto LinkedSpawnLocation = 0x478; // TArray<AProgressSpawnLocation*>
		constexpr auto ProgressLevel = 0x488; // int32_t
	}

	namespace n_UMaterialExpressionTextureSample { // : UMaterialExpressionTextureBase
		constexpr auto Coordinates = 0x80; // FExpressionInput
		constexpr auto TextureObject = 0xb8; // FExpressionInput
		constexpr auto MipValue = 0xf0; // FExpressionInput
		constexpr auto CoordinatesDX = 0x128; // FExpressionInput
		constexpr auto CoordinatesDY = 0x160; // FExpressionInput
		constexpr auto MipValueMode = 0x198; // ETextureMipValueMode
		constexpr auto SamplerSource = 0x199; // ESamplerSourceMode
		constexpr auto ConstCoordinate = 0x19c; // uint32_t
		constexpr auto ConstMipValue = 0x1a0; // int32_t
	}

	namespace n_UEditableGameplayTagQueryExpression_NoExprMatch { // : UEditableGameplayTagQueryExpression
		constexpr auto Expressions = 0x28; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_AStorageSeat { // : ASeat
		constexpr auto StorageInteractionInput = 0x678; // UNotificationInputId*
		constexpr auto StorageContainerComponent = 0x680; // UStorageContainerComponent*
	}

	namespace n_UStorageContainerComponent { // : UActorComponent
		constexpr auto ContainerDisplayName = 0xe0; // FText
		constexpr auto InstanceTransform = 0x120; // FTransform
		constexpr auto ContainerNodes = 0x150; // FStorageContainerBackingStore
		constexpr auto QuickGivers = 0x190; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto QuickTakers = 0x1a0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto AddItemSFX = 0x1b0; // UWwiseEvent*
		constexpr auto TakeItemSFX = 0x1b8; // UWwiseEvent*
		constexpr auto OpenContainerSFX = 0x1c0; // UWwiseEvent*
		constexpr auto BeginQuickGiveSFX = 0x1c8; // UWwiseEvent*
		constexpr auto EndQuickGiveSFX = 0x1d0; // UWwiseEvent*
		constexpr auto BeginQuickTakeSFX = 0x1d8; // UWwiseEvent*
		constexpr auto EndQuickTakeSFX = 0x1e0; // UWwiseEvent*
		constexpr auto StorageContainerSelector = 0x1e8; // UStorageContainerContentTypeSelector*
		constexpr auto SfxPool = 0x220; // UWwiseObjectPoolWrapper*
		constexpr auto ShowCapacityInDescription = 0x268; // bool
		constexpr auto Aggregator = 0x308; // UObject*
	}

	namespace n_USoakableComponent { // : UActorComponent
		constexpr auto LingeringSoakedDuration = 0xd0; // float
		constexpr auto SoakedStatus = 0xd8; // FStatus
	}

	namespace n_UAddItemsFromDataToCollectorsChestStepDesc { // : UAddItemsFromDataToCollectorsChestStepBaseDesc
		constexpr auto ItemData = 0xd0; // FQuestVariableDataAsset
	}

	namespace n_USeagullManagerComponentDataAsset { // : UDataAsset
		constexpr auto TurnBlendInOutPercentage = 0x28; // float
		constexpr auto NumPseudoRandomValues = 0x2c; // int32_t
		constexpr auto FixedSeed = 0x30; // int32_t
		constexpr auto SeagullEmitterOffset = 0x34; // FVector
		constexpr auto StartSeagullSounds = 0x40; // UWwiseEvent*
		constexpr auto StopSeagullSounds = 0x48; // UWwiseEvent*
		constexpr auto AudioPool = 0x50; // UWwiseObjectPoolWrapper*
		constexpr auto MaxNumShipsToDisplaySeagullsOn = 0x58; // int32_t
		constexpr auto SeagullScale = 0x60; // FWeightedProbabilityRangeOfRanges
		constexpr auto SeagullSpawnFrequency = 0x90; // FWeightedProbabilityRangeOfRanges
		constexpr auto SeagullSpeed = 0xc0; // FWeightedProbabilityRangeOfRanges
		constexpr auto Locations = 0xf0; // TArray<FName>
		constexpr auto NumInFormation = 0x100; // FWeightedProbabilityRange
		constexpr auto Formations = 0x120; // TArray<FSeagullManagerFormation>
		constexpr auto MotionModifierDataAsset = 0x130; // UShipCreatureManagerCreatureInstanceMotionModifierDataAsset*
		constexpr auto Modulo = 0x138; // double
		constexpr auto Intervals = 0x140; // TArray<FSeagullManagerPseudoRandomEntry>
	}

	namespace n_AServerMigrationSerialisationDetailsTestsActorWithDynamicComponent { // : AActor
		constexpr auto SubObject = 0x3d0; // UServerMigrationSerialisationDetailsTestsMigratableComponent*
		constexpr auto ActorComponent = 0x3d8; // UServerMigrationSerialisationDetailsTestsMigratableComponent*
		constexpr auto Subobject2 = 0x3e0; // UServerMigrationSerialisationDetailsTestsMigratableComponent*
	}

	namespace n_UParticleModuleEventGeneratorGPU { // : UParticleModuleEventBase
		constexpr auto Events = 0x50; // TArray<FParticleEventGPU_GenerateInfo>
	}

	namespace n_UWaterHeightProviderServerOnlyComponent { // : UWaterHeightProviderComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USlateLoadingScreenParams { // : UDataAsset
		constexpr auto DrawBackground = 0x28; // bool
		constexpr auto DrawBackgroundImage = 0x29; // bool
		constexpr auto DrawTips = 0x2a; // bool
		constexpr auto DrawSpinner = 0x2b; // bool
		constexpr auto ViewportWidth = 0x2c; // float
		constexpr auto ViewportHeight = 0x30; // float
		constexpr auto FooterHeight = 0x34; // float
		constexpr auto DrawSpinnerText = 0x38; // bool
		constexpr auto PlaceholderSpinnerTexture = 0x40; // FStringAssetReference
		constexpr auto BackgroundColour = 0x50; // FLinearColor
		constexpr auto PrimaryImage = 0x60; // FSlateLoadingScreenImageParams
		constexpr auto CyclingImages = 0x80; // TArray<FSlateLoadingScreenImageParams>
		constexpr auto MaxNumImagesPerLoad = 0x90; // int32_t
		constexpr auto SpinnerText = 0x98; // FText
		constexpr auto SpinnerTextColour = 0xd0; // FSlateColor
		constexpr auto SpinnerTextFont = 0x100; // FSlateFontInfo
		constexpr auto SpinnerSize = 0x140; // float
		constexpr auto SpinnerMargin = 0x144; // FMargin
		constexpr auto SpinnerPadding = 0x154; // float
		constexpr auto SpinnerIcon = 0x158; // FStringAssetReference
		constexpr auto TipsMargin = 0x168; // FMargin
		constexpr auto TipWrapLength = 0x178; // float
		constexpr auto TipDisplayDuration = 0x17c; // float
		constexpr auto TipDurationBetweenTips = 0x180; // float
		constexpr auto NumTipsPerImage = 0x184; // int32_t
		constexpr auto LoadingTipFont = 0x188; // FSlateFontInfo
		constexpr auto LoadingTipFontLineHeightPercentage = 0x1c8; // float
		constexpr auto LoadingScreenTips = 0x1d0; // TArray<FText>
		constexpr auto LoadingScreenTipColour = 0x1e0; // FSlateColor
		constexpr auto AllowSyncronousAssetLoad = 0x210; // bool
	}

	namespace n_AAnimatedMechanismAction { // : AActor
		constexpr auto MechanismActionComponent = 0x3e0; // UMechanismActionComponent*
		constexpr auto Delay = 0x3e8; // float
		constexpr auto NetDelay = 0x3ec; // float
		constexpr auto AnimateOnServer = 0x3f0; // bool
		constexpr auto OnlyAnimateOnServerWhenActorsOverlapInteractionZone = 0x3f1; // bool
		constexpr auto MaterialGroup = 0x3f8; // UMechanismMaterialGroup*
		constexpr auto MechanismInteractionInterface = 0x400; // TScriptInterface<Class>
		constexpr auto State = 0x428; // FAnimatedMechanismActionState
		constexpr auto Emitter = 0x440; // FWwiseEmitter
	}

	namespace n_UTreasureMapCollectionComponent { // : UActorComponent
		constexpr auto XMarksTheSpotMapType = 0x148; // UTreasureMapItemDesc*
		constexpr auto RiddleMapType = 0x150; // UTreasureMapItemDesc*
		constexpr auto BountyMapType = 0x158; // UTreasureMapItemDesc*
		constexpr auto MerchantMapType = 0x160; // UTreasureMapItemDesc*
		constexpr auto CargoRunMapType = 0x168; // UTreasureMapItemDesc*
		constexpr auto ContestMapType = 0x170; // UTreasureMapItemDesc*
		constexpr auto TornMapType = 0x178; // UTreasureMapItemDesc*
		constexpr auto LocationMapType = 0x180; // UTreasureMapItemDesc*
		constexpr auto TreasureMaps = 0x188; // TArray<ATreasureMap*>
		constexpr auto TreasureMapDestinationIslands = 0x198; // TArray<FName>
	}

	namespace n_ULevelSequenceBurnInOptions { // : UObject
		constexpr auto bUseBurnIn = 0x28; // bool
		constexpr auto BurnInClass = 0x30; // FStringClassReference
		constexpr auto Settings = 0x40; // ULevelSequenceBurnInInitSettings*
	}

	namespace n_ATestInventoryAthenaGameMode { // : AAthenaGameMode
		constexpr auto GhostShipPawnClass = 0x4e0; // APawn*
		constexpr auto ServerNetworkedEventsWhitelistDefinition = 0x4e8; // UNetworkedEventsWhitelistDefinition*
		constexpr auto GhostShipCoordinator = 0x688; // FGhostShipCoordinator
		constexpr auto StorageContainerRefresher = 0x8b8; // FStorageContainerRefresher
		constexpr auto RiddleQuestDescGeneratorData = 0x990; // URiddleQuestDescGeneratorData*
		constexpr auto RespawnTimer = 0x998; // float
		constexpr auto ContestRespawnTimer = 0x99c; // float
		constexpr auto StorageContainerRefreshInterval = 0x9a0; // float
		constexpr auto ContainerRefreshBatchSize = 0x9a4; // int32_t
	}

	namespace n_ULandmarkReactionEventStartCameraShake { // : ULandmarkReactionEvent
		constexpr auto CameraShake = 0x38; // UCameraShake*
		constexpr auto ShakeInnerRadius = 0x40; // float
		constexpr auto ShakeOuterRadius = 0x44; // float
		constexpr auto AudioCue = 0x48; // UWwiseEvent*
	}

	namespace n_URandomPirateLegendSectStepDesc { // : UTaleQuestStepDesc
		constexpr auto SectionBundle = 0x80; // FQuestVarPLSectionBundle
		constexpr auto OutSection = 0x90; // FQuestVarPLSection
		constexpr auto Filters = 0xa0; // TArray<UPirateLegendSectionFilter*>
	}

	namespace n_UWaitForNPCDialogOptionEventStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UWaitForNPCDialogOptionEventStepDesc*
		constexpr auto ActorVar = 0x98; // AActor*
	}

	namespace n_UTaleQuestGenerateCluePointingToSiteStepDesc { // : UTaleQuestStepDesc
		constexpr auto Difficulty = 0x80; // FQuestVariableInt
		constexpr auto SourceLocation = 0x90; // FQuestVariableVector
		constexpr auto TargetClueSite = 0xa0; // FQuestVariableClueSite
		constexpr auto GeneratedClue = 0xb0; // FQuestVariableClueDescriptor
		constexpr auto AllowedClueTypes = 0xc0; // TArray<UClueDescriptor*>
		constexpr auto ConnectionConfiguration = 0xd0; // UClueConnectionConfig*
	}

	namespace n_UBTTask_SetBlackboardFloatValueFromMinMax { // : UBTTask_BlackboardBase
		constexpr auto MinValue = 0x88; // FAIDataProviderFloatValue
		constexpr auto MaxValue = 0xb8; // FAIDataProviderFloatValue
	}

	namespace n_UCameraAnim { // : UObject
		constexpr auto CameraInterpGroup = 0x28; // UInterpGroup*
		constexpr auto AnimLength = 0x30; // float
		constexpr auto BoundingBox = 0x34; // FBox
		constexpr auto bRelativeToInitialTransform = 0x50; // char : 1
		constexpr auto BaseFOV = 0x54; // float
		constexpr auto BasePostProcessSettings = 0x60; // FPostProcessSettings
		constexpr auto BasePostProcessBlendWeight = 0x5a0; // float
	}

	namespace n_ABootyProxy { // : AFloatingItemProxy
		constexpr auto RetractableComponent = 0x7a8; // URetractableComponent*
		constexpr auto ItemProxyShipTrackerComponent = 0x7b0; // UItemProxyShipTrackerComponent*
	}

	namespace n_UUdpMessagingSettings { // : UObject
		constexpr auto EnableTransport = 0x28; // bool
		constexpr auto UnicastEndpoint = 0x30; // FString
		constexpr auto MulticastEndpoint = 0x40; // FString
		constexpr auto MulticastTimeToLive = 0x50; // char
		constexpr auto StaticEndpoints = 0x58; // TArray<FString>
		constexpr auto EnableTunnel = 0x68; // bool
		constexpr auto TunnelUnicastEndpoint = 0x70; // FString
		constexpr auto TunnelMulticastEndpoint = 0x80; // FString
		constexpr auto RemoteTunnelEndpoints = 0x90; // TArray<FString>
	}

	namespace n_UBTDecorator_BlackboardBase { // : UBTDecorator
		constexpr auto BlackboardKey = 0x68; // FBlackboardKeySelector
	}

	namespace n_AStaticMeshActor { // : AActor
		constexpr auto StaticMeshComponent = 0x3d0; // UStaticMeshComponent*
		constexpr auto bStaticMeshReplicateMovement = 0x3d8; // bool
		constexpr auto NavigationGeometryGatheringMode = 0x3d9; // ENavDataGatheringMode
	}

	namespace n_UAbilityTask_WaitMovementModeChange { // : UAbilityTask
		constexpr auto OnChange = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UEnvQueryTest_InSunkenIslandSurfaceZone { // : UEnvQueryTest
		constexpr auto ExclusionType = 0x170; // UGameEventType*
	}

	namespace n_UStatusResponseSetAICharacterMoveSpeedModifier { // : UStatusResponse
		constexpr auto Reason = 0x30; // EAICharacterMaxSpeedModificationReason
		constexpr auto Multiplier = 0x34; // float
	}

	namespace n_UNPCDialogOptionFireNPCDialogInteraction { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto CloseOnExecuted = 0xb8; // bool
	}

	namespace n_AFortOfTheDamnedBrazierMechanismTrigger { // : ABrazierMechanismTrigger
		constexpr auto MechanismTrigger = 0x7c8; // UMechanismTriggerComponent*
		constexpr auto FlameTypeToActivate = 0x7d0; // EFlameOfFateType
		constexpr auto LanternNotLitToolTipText = 0x7d8; // FText
		constexpr auto CannotSetBeaconToolTipText = 0x810; // FText
		constexpr auto TakeFlameOfFateNotificationID = 0x848; // UNotificationInputId*
		constexpr auto SetFlameOfFateNotificationID = 0x850; // UNotificationInputId*
		constexpr auto LanternSwingAmmount = 0x858; // float
		constexpr auto LanternEmissiveAmmount = 0x85c; // float
		constexpr auto LanternMegaEmmisiveAmount = 0x860; // float
		constexpr auto DynamicMaterials = 0x868; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_AGenericMarkerService { // : AActor
		constexpr auto GenericMarkers = 0x3f8; // TArray<FCanvasWorldMapGeneric>
	}

	namespace n_ULockOnCameraModifierSettings { // : UDataAsset
		constexpr auto BlockLowerPriorityCameraModifiers = 0x28; // bool
		constexpr auto DisablePlayerInputDuringLockOn = 0x29; // bool
		constexpr auto TargetSocketName = 0x2c; // FName
		constexpr auto YawSnapStrength = 0x34; // float
		constexpr auto PitchSnapStrength = 0x38; // float
		constexpr auto MinYawLerpSpeed = 0x3c; // float
		constexpr auto LockOnScaledByInput = 0x40; // bool
		constexpr auto InputYawToScaleTo = 0x44; // float
		constexpr auto InputTowardsTarget_LockOnScale = 0x48; // float
		constexpr auto ZeroInput_LockOnScale = 0x4c; // float
		constexpr auto InputAwayFromTarget_LockOnScale = 0x50; // float
		constexpr auto AutoLockAllowed = 0x54; // bool
		constexpr auto LimitLockOnByInput = 0x55; // bool
		constexpr auto InputAwayFromTarget_LockOnClampMultiplier = 0x58; // float
		constexpr auto FadeOutEnabled = 0x5c; // bool
		constexpr auto FullLockDuration = 0x60; // float
		constexpr auto FadeOutDuration = 0x64; // float
	}

	namespace n_UHitReactingActorWithCannonConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UOceanCrawlerAnimationInstance { // : UAnimInstance
		constexpr auto LoadedAnimations = 0x458; // FOceanCrawlerAnimationDataStructure
		constexpr auto MovementData = 0x4e8; // FActorVelocityData
		constexpr auto CurrentDirection = 0x500; // float
		constexpr auto AttackAnims = 0x508; // FAthenaAnimationWeapon
		constexpr auto UseDefaultAnimations = 0x5c0; // bool
		constexpr auto AnimationsLoaded = 0x5c1; // bool
		constexpr auto SporeBreathActive = 0x5c2; // bool
		constexpr auto PropAttachmentSocket = 0x5c4; // FName
		constexpr auto MontagePlayer = 0x5d0; // FCustomAnimationMontageStateMachine
		constexpr auto HitReacts = 0x6a8; // FHitReactionAnimationState
	}

	namespace n_UFuseComponent { // : UActorComponent
		constexpr auto EnableInputNotification = 0xd8; // UNotificationInputId*
		constexpr auto DisableInputNotification = 0xe0; // UNotificationInputId*
		constexpr auto DefaultFuseTime = 0xe8; // float
		constexpr auto FuseSoundWisePool = 0xf0; // UWwiseObjectPoolWrapper*
		constexpr auto FuseActivateSoundPlayEvent = 0xf8; // UWwiseEvent*
		constexpr auto FuseSoundPlayEvent = 0x100; // UWwiseEvent*
		constexpr auto FuseSoundStopEvent = 0x108; // UWwiseEvent*
		constexpr auto FuseParticleSystem = 0x110; // UObject*
		constexpr auto FuseParticleSystemSocketName = 0x118; // FName
		constexpr auto FuseNoiseEventName = 0x120; // FName
		constexpr auto FuseNoiseRadius = 0x128; // float
		constexpr auto FuseNoiseEventRate = 0x12c; // float
		constexpr auto FuseInstigator = 0x130; // AActor*
		constexpr auto FuseEnabled = 0x138; // bool
		constexpr auto FuseParticleSystemComponent = 0x1b0; // UParticleSystemComponent*
	}

	namespace n_UBuriedTreasureDataAsset { // : UGeneratedLocationsDataAsset
		constexpr auto Locations = 0x28; // TArray<FVector>
	}

	namespace n_UNavigationSystem { // : UBlueprintFunctionLibrary
		constexpr auto MainNavData = 0x28; // ANavigationData*
		constexpr auto AbstractNavData = 0x30; // ANavigationData*
		constexpr auto bAutoCreateNavigationData = 0x38; // char : 1
		constexpr auto bAllowClientSideNavigation = 0x38; // char : 1
		constexpr auto bSupportRebuilding = 0x38; // char : 1
		constexpr auto bInitialBuildingLocked = 0x38; // char : 1
		constexpr auto bSkipAgentHeightCheckWhenPickingNavData = 0x38; // char : 1
		constexpr auto DataGatheringMode = 0x3c; // ENavDataGatheringModeConfig
		constexpr auto bGenerateNavigationOnlyAroundNavigationInvokers = 0x40; // char : 1
		constexpr auto ActiveTilesUpdateInterval = 0x44; // float
		constexpr auto SupportedAgents = 0x48; // TArray<FNavDataConfig>
		constexpr auto DirtyAreasUpdateFreq = 0x58; // float
		constexpr auto NavDataSet = 0x60; // TArray<ANavigationData*>
		constexpr auto NavDataRegistrationQueue = 0x70; // TArray<ANavigationData*>
		constexpr auto OnNavDataRegisteredEvent = 0xe0; // FScriptMulticastDelegate
		constexpr auto OnNavigationGenerationFinishedDelegate = 0xf0; // FScriptMulticastDelegate
		constexpr auto OperationMode = 0x1cc; // FNavigationSystemRunMode
		constexpr auto InstancedNavMeshesDataAsset = 0x3c0; // FStringAssetReference
		constexpr auto InstancedNavMeshesData = 0x3d0; // UInstancedNavMeshesDataAsset*
	}

	namespace n_URowboatAudioComponentParams { // : UDataAsset
		constexpr auto RowboatObjectPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto RowboatWakeStart = 0x30; // UWwiseEvent*
		constexpr auto RowboatWakeStop = 0x38; // UWwiseEvent*
		constexpr auto RowboatSpeedRtpcName = 0x40; // FName
		constexpr auto RowboatMaxSpeedRtpc = 0x48; // float
		constexpr auto RowboatLaunch = 0x50; // UWwiseEvent*
		constexpr auto RowboatImpactAndScrapeStart = 0x58; // UWwiseEvent*
		constexpr auto RowboatImpactAndScrapeStop = 0x60; // UWwiseEvent*
		constexpr auto RowboatStrainStart = 0x68; // UWwiseEvent*
		constexpr auto RowboatStrainStop = 0x70; // UWwiseEvent*
		constexpr auto RowboatStrainRtpcName = 0x78; // FName
		constexpr auto RowboatMaxStrainRtpc = 0x80; // float
		constexpr auto RowboatTakenDamage = 0x88; // UWwiseEvent*
		constexpr auto DamageAmountRequiredForNoiseToPlay = 0x90; // float
		constexpr auto RowboatAttach = 0x98; // UWwiseEvent*
		constexpr auto RowboatDetach = 0xa0; // UWwiseEvent*
		constexpr auto WwiseOarEmitterPool = 0xa8; // UWwiseObjectPoolWrapper*
		constexpr auto PlayOarInOarLayer = 0xb0; // UWwiseEvent*
		constexpr auto PlayOarInWaterLayer = 0xb8; // UWwiseEvent*
		constexpr auto PlayOarOutOarLayer = 0xc0; // UWwiseEvent*
		constexpr auto PlayOarOutWaterLayer = 0xc8; // UWwiseEvent*
		constexpr auto PlayOarBrakingLoop = 0xd0; // UWwiseEvent*
		constexpr auto StopOarBrakingLoop = 0xd8; // UWwiseEvent*
		constexpr auto PlayOarPullFinished = 0xe0; // UWwiseEvent*
	}

	namespace n_UFireworkDataAsset { // : UDataAsset
		constexpr auto PercentageTimeUntilTrailDisappears = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeUntilExplosion = 0x58; // FWeightedProbabilityRangeOfRanges
		constexpr auto IsFlare = 0x88; // bool
		constexpr auto ShouldCastAmbientLight = 0x89; // bool
		constexpr auto FireworkAmbientLightData = 0x8c; // FFireworkAmbientLightData
		constexpr auto Explosions = 0xa0; // TArray<FWeightedFireworkVFXData>
		constexpr auto NumExplosions = 0xb0; // FWeightedProbabilityRange
		constexpr auto TimeBetweenExplosions = 0xd0; // FWeightedProbabilityRangeOfRanges
		constexpr auto ExplosionLocationOffset = 0x100; // FWeightedProbabilityRangeOfRanges
		constexpr auto FlashbangRadius = 0x130; // float
		constexpr auto ExplosionSfxPool = 0x138; // UWwiseObjectPoolWrapper*
		constexpr auto LaunchSfx = 0x140; // UWwiseEvent*
		constexpr auto FireworkFeedbackData = 0x148; // UFireworkFeedbackDataAsset*
	}

	namespace n_UMapTableInputComponent { // : UAthenaCharacterBaseInputComponentWithInterference
		constexpr auto MapTable = 0x280; // AMapTable*
	}

	namespace n_USoundNodeBranch { // : USoundNode
		constexpr auto BoolParameterName = 0x38; // FName
	}

	namespace n_AAtmosphericFog { // : AInfo
		constexpr auto AtmosphericFogComponent = 0x3d0; // UAtmosphericFogComponent*
	}

	namespace n_UWidgetComponent { // : UPrimitiveComponent
		constexpr auto Space = 0x588; // EWidgetSpace
		constexpr auto WidgetClass = 0x590; // UUserWidget*
		constexpr auto DrawSize = 0x598; // FIntPoint
		constexpr auto Pivot = 0x5a0; // FVector2D
		constexpr auto MaxInteractionDistance = 0x5a8; // float
		constexpr auto OwnerPlayer = 0x5b0; // ULocalPlayer*
		constexpr auto BackgroundColor = 0x5b8; // FLinearColor
		constexpr auto BlendMode = 0x5c8; // EWidgetBlendMode
		constexpr auto bIsOpaque = 0x5c9; // bool
		constexpr auto bIsTwoSided = 0x5ca; // bool
		constexpr auto ParabolaDistortion = 0x5cc; // float
		constexpr auto TickWhenOffscreen = 0x5d0; // bool
		constexpr auto Widget = 0x5d8; // UUserWidget*
		constexpr auto BodySetup = 0x5e0; // UBodySetup*
		constexpr auto TranslucentMaterial = 0x5e8; // UMaterialInterface*
		constexpr auto TranslucentMaterial_OneSided = 0x5f0; // UMaterialInterface*
		constexpr auto OpaqueMaterial = 0x5f8; // UMaterialInterface*
		constexpr auto OpaqueMaterial_OneSided = 0x600; // UMaterialInterface*
		constexpr auto MaskedMaterial = 0x608; // UMaterialInterface*
		constexpr auto MaskedMaterial_OneSided = 0x610; // UMaterialInterface*
		constexpr auto RenderTarget = 0x618; // UTextureRenderTarget2D*
		constexpr auto MaterialInstance = 0x620; // UMaterialInstanceDynamic*
		constexpr auto bUseLegacyRotation = 0x628; // bool
		constexpr auto bAddedToScreen = 0x629; // bool
	}

	namespace n_UCompanyLevelDataList { // : UDataAsset
		constexpr auto CompanyLevelData = 0x28; // TArray<UCompanyLevelData*>
	}

	namespace n_UTradeRouteMapSettings { // : UDeveloperSettings
		constexpr auto TradeRouteLandscapeMapItemDescClass = 0x38; // FStringAssetReference
		constexpr auto TradeRoutePortraitMapItemDescClass = 0x48; // FStringAssetReference
		constexpr auto DefaultIslandBlendMode = 0x58; // EBlendMode
		constexpr auto DefaultPathTexture = 0x60; // FStringAssetReference
		constexpr auto DefaultPathBlendMode = 0x70; // EBlendMode
		constexpr auto DefaultClueMarkId = 0x78; // UMapMarkId*
		constexpr auto DefaultClueBlendMode = 0x80; // EBlendMode
		constexpr auto DefaultClueScale = 0x84; // float
	}

	namespace n_AMerchantCrateFilledItemProxy { // : AStaticMerchantCrateItemProxy
		constexpr auto StorageContainerComponent = 0x7d8; // UStorageContainerComponent*
		constexpr auto FillCrateToCapacity = 0x7e0; // bool
	}

	namespace n_UProjectileAnimationComponent { // : UActorComponent
		constexpr auto ProjectileAnimationCurves = 0xc8; // TArray<FWeightedProjectileMeshAnimationData>
		constexpr auto MeshComponent = 0xd8; // UStaticMeshComponent*
		constexpr auto AnimationOffsetCurve = 0xe0; // FRuntimeVectorCurve
	}

	namespace n_UProjectileCooldownServiceSettings { // : UDeveloperSettings
		constexpr auto ProjectileCooldownTime = 0x38; // float
		constexpr auto ClassesRequiringValidation = 0x40; // TArray<UObject*>
	}

	namespace n_UMaterialExpressionBreakMaterialAttributes { // : UMaterialExpression
		constexpr auto Struct = 0x70; // FExpressionInput
		constexpr auto MaterialAttributes = 0xa8; // FMaterialAttributesInput
	}

	namespace n_UParticleModuleSizeScale { // : UParticleModuleSizeBase
		constexpr auto SizeScale = 0x50; // FRawDistributionVector
		constexpr auto EnableX = 0x88; // char : 1
		constexpr auto EnableY = 0x88; // char : 1
		constexpr auto EnableZ = 0x88; // char : 1
	}

	namespace n_ARomeBeacon { // : AActor
		constexpr auto BeaconRoot = 0x3d8; // USceneComponent*
		constexpr auto RibbonComponent = 0x3e0; // UStaticMeshComponent*
		constexpr auto UpperHalfRibbonComponent = 0x3e8; // UStaticMeshComponent*
		constexpr auto LowerHalfRibbonComponent = 0x3f0; // UStaticMeshComponent*
		constexpr auto TendrilComponent = 0x3f8; // UStaticMeshComponent*
		constexpr auto BeamComponent = 0x400; // UStaticMeshComponent*
		constexpr auto EnableBend = 0x410; // bool
		constexpr auto MinDistFromPlayerToScale = 0x414; // float
		constexpr auto MaxDistFromPlayerToScale = 0x418; // float
		constexpr auto MinBeamScale = 0x41c; // float
		constexpr auto MaxBeamScale = 0x420; // float
		constexpr auto MarkerPositionBlendSpeed = 0x424; // float
		constexpr auto DynamicMaterials = 0x428; // TArray<UMaterialInstanceDynamic*>
		constexpr auto VelocityMap = 0x438; // TArray<FRomeBeaconVelocityMap>
		constexpr auto FallbackVelocity = 0x448; // float
		constexpr auto MaxOffset = 0x44c; // float
		constexpr auto MinRibbonScale = 0x450; // float
		constexpr auto MaxRibbonScale = 0x454; // float
		constexpr auto RibbonBlendTime = 0x458; // float
		constexpr auto BeamBlendTime = 0x45c; // float
		constexpr auto StartBlendVal = 0x460; // float
		constexpr auto EndBlendVal = 0x464; // float
		constexpr auto MarkerDataObject = 0x4a0; // UArenaWorldMarker*
	}

	namespace n_UCharacterMeshBakeSpecification { // : UObject
		constexpr auto StripTopLOD = 0x28; // bool
		constexpr auto CharacterMesh = 0x30; // USkeletalMesh*
		constexpr auto BaseMeshReferenceSkeleton = 0x38; // USkeletalMesh*
		constexpr auto SourceSkeletons = 0x40; // USkeletonsDataAsset*
		constexpr auto SourceSkeletonNames = 0x48; // TArray<FName>
		constexpr auto SourceSkeletonWeights = 0x58; // TArray<float>
		constexpr auto BlendedSubMeshes = 0x68; // TArray<FBlendedSubMeshSpecification>
		constexpr auto UnblendedSubMeshes = 0x78; // TArray<USkeletalMesh*>
		constexpr auto BlendShapes = 0x88; // TArray<FIPGBlendShape>
	}

	namespace n_USizeBoxSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_APirateGeneratorService { // : AActor
		constexpr auto MaxConcurrent = 0x3d8; // int32_t
		constexpr auto RandomOutfitDataAssetPath = 0x3e0; // FStringAssetReference
		constexpr auto MaxCachedMeshes = 0x3f0; // int32_t
		constexpr auto RandomOutfitDataAsset = 0xa38; // UWardrobeOutfitDataAsset*
	}

	namespace n_UStreamingLocationComponent { // : UActorComponent
		constexpr auto StreamingLocationOverride = 0xd0; // FVector
		constexpr auto StreamingLocationActive = 0xdc; // bool
	}

	namespace n_UBountyQuestData { // : UDataAsset
		constexpr auto DefaultTargetKilledAudioCue = 0x28; // UWwiseEvent*
		constexpr auto BountyLandmarkSpawnZoneRadiusInMetres = 0x30; // float
		constexpr auto BountyLandmarkSpawnZoneHalfHeightInMetres = 0x34; // float
		constexpr auto BountyQuestTargetKilledPopUpDescAsset = 0x38; // UQuestBootyItemPopUpAsset*
		constexpr auto FindSpawnPosQuery = 0x40; // UEnvQuery*
	}

	namespace n_UGlitterBeardTreeVisualFeedbackComponent { // : UActorComponent
		constexpr auto FeedbackActions = 0xc8; // TArray<FVisualFeedbackList>
		constexpr auto CurrentStates = 0xe8; // TArray<EGlitterbeardVFXState>
	}

	namespace n_UAnimNotify_PlayAnimationForCosmetic { // : UAnimNotify
		constexpr auto CosmeticLocation = 0x38; // EWieldAnimationLocation
		constexpr auto CosmeticItemAnimation = 0x40; // UAnimSequenceBase*
		constexpr auto Looping = 0x48; // bool
	}

	namespace n_UParticleModuleAccelerationEmitterPoint { // : UParticleModuleAccelerationBase
		constexpr auto AccelerationScale = 0x58; // FRawDistributionFloat
		constexpr auto bApplyOwnerScale = 0x90; // char : 1
	}

	namespace n_UMemoryConstrainedMeshInitializer { // : UObject
		constexpr auto Mesh = 0x30; // UObject*
		constexpr auto OverrideMaterials = 0x38; // TArray<UMaterialInterface*>
		constexpr auto FallbackOverrideMaterials = 0x48; // TArray<FStringAssetReference>
		constexpr auto MeshReference = 0x58; // FStringAssetReference
		constexpr auto MemoryAccountedFor = 0x68; // bool
		constexpr auto NeedMeshLoadOnServer = 0x69; // bool
		constexpr auto CachedMeshResourceSize = 0x70; // int64_t
		constexpr auto MeshFallbackCategory = 0x78; // UMeshMemoryConstraintCategory*
		constexpr auto BudgetToCountMemoryAgainstIfNoFallback = 0x80; // UMeshMemoryConstraintBudget*
	}

	namespace n_UPetsService { // : UObject
		constexpr auto PetOwnerRelationships = 0x38; // TMap<AActor*, FPetRelationship>
		constexpr auto Spawner = 0x88; // UAIPetsOnDemandSpawner*
		constexpr auto PetsServiceParams = 0xa8; // FPetsServiceParams
		constexpr auto OwnersToRemove = 0xe0; // TArray<AActor*>
		constexpr auto OwnersToRequestDespawn = 0xf0; // TArray<AActor*>
		constexpr auto MovingPetsOnIslands = 0x100; // TArray<APawn*>
		constexpr auto MovingPetsOnShips = 0x110; // TArray<APawn*>
		constexpr auto ScratchArray = 0x120; // TArray<AActor*>
		constexpr auto PetHangoutDataAsset = 0x2d8; // UPetHangoutSpotsDataAsset*
	}

	namespace n_AMerchantCrate { // : ALargeSkeletalMeshWieldableItem
		constexpr auto FullCrateSfx = 0x790; // FMerchantCrateSfx
		constexpr auto MountpointInterface = 0x7b0; // TScriptInterface<Class>
	}

	namespace n_ACoherentUIGTInputActor { // : AActor
		constexpr auto OnCoherentUIGTInputActorMouseButtonDown = 0x3d0; // FScriptMulticastDelegate
		constexpr auto OnCoherentUIGTInputActorMouseButtonUp = 0x3e0; // FScriptMulticastDelegate
		constexpr auto OnCoherentUIGTInputActorKeyDown = 0x3f0; // FScriptMulticastDelegate
		constexpr auto OnCoherentUIGTInputActorKeyUp = 0x400; // FScriptMulticastDelegate
	}

	namespace n_APainCausingVolume { // : APhysicsVolume
		constexpr auto bPainCausing = 0x418; // char : 1
		constexpr auto DamagePerSec = 0x41c; // float
		constexpr auto DamageType = 0x420; // UDamageType*
		constexpr auto PainInterval = 0x428; // float
		constexpr auto bEntryPain = 0x42c; // char : 1
		constexpr auto BACKUP_bPainCausing = 0x42c; // char : 1
		constexpr auto DamageInstigator = 0x430; // AController*
	}

	namespace n_ABlockingVolume { // : AVolume
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UDistributionVectorParticleParameter { // : UDistributionVectorParameterBase
		constexpr auto ParameterName = 0x50; // FName
		constexpr auto MinInput = 0x58; // FVector
		constexpr auto MaxInput = 0x64; // FVector
		constexpr auto MinOutput = 0x70; // FVector
		constexpr auto MaxOutput = 0x7c; // FVector
		constexpr auto ParamModes = 0x88; // DistributionParamMode [0x3]
	}

	namespace n_UNetDriver { // : UObject
		constexpr auto NetConnectionClassName = 0x38; // FString
		constexpr auto MaxDownloadSize = 0x48; // int32_t
		constexpr auto bClampListenServerTickRate = 0x4c; // char : 1
		constexpr auto NetServerMaxTickRate = 0x50; // int32_t
		constexpr auto MaxInternetClientRate = 0x54; // int32_t
		constexpr auto MaxClientRate = 0x58; // int32_t
		constexpr auto ServerTravelPause = 0x5c; // float
		constexpr auto SpawnPrioritySeconds = 0x60; // float
		constexpr auto RelevantTimeout = 0x64; // float
		constexpr auto KeepAliveTime = 0x68; // float
		constexpr auto InitialConnectTimeout = 0x6c; // float
		constexpr auto ConnectionTimeout = 0x70; // float
		constexpr auto ServerConnection = 0x78; // UNetConnection*
		constexpr auto ClientConnections = 0x80; // TArray<UNetConnection*>
		constexpr auto World = 0x90; // UWorld*
		constexpr auto NetConnectionClass = 0xc8; // UObject*
		constexpr auto RoleProperty = 0xd0; // UProperty*
		constexpr auto RemoteRoleProperty = 0xd8; // UProperty*
		constexpr auto NetDriverName = 0xe0; // FName
	}

	namespace n_AShovel { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x7a0; // UInventoryItemComponent*
		constexpr auto ExhumeAnimParams = 0x7a8; // TArray<FDigAnimParams>
		constexpr auto BuryAnimParams = 0x7b8; // TArray<FDigAnimParams>
		constexpr auto ShovelHoleParams = 0x7c8; // UShovelSurfaceHoleDataAsset*
		constexpr auto ShovelHoleFx = 0x7d0; // UShovelSurfaceFxDataAsset*
		constexpr auto ShovelEnterSurfaceSfx = 0x7d8; // UWwiseEvent*
		constexpr auto ShovelBuryingSfx = 0x7e0; // UWwiseEvent*
		constexpr auto ShovelExitSurfaceSfx = 0x7e8; // UWwiseEvent*
		constexpr auto HitBuriedChestSfx = 0x7f0; // UWwiseEvent*
		constexpr auto ShovelDigCooldownType = 0x7f8; // UWieldableItemCooldownBaseType*
		constexpr auto DigRequestToleranceTimeOnServer = 0x800; // float
		constexpr auto CameraPitchAfterSuccessfulDigIfStartedHigh = 0x804; // float
		constexpr auto CameraPitchAfterSuccessfulDigIfStartedLow = 0x808; // float
		constexpr auto CameraPitchAfterDeflectedDigIfStartedHigh = 0x80c; // float
		constexpr auto CameraPitchAfterDeflectedDigIfStartedLow = 0x810; // float
		constexpr auto ShovelHeadSocketName = 0x814; // FName
		constexpr auto NamedNotificationInputComponent = 0x820; // UNamedNotificationInputComponent*
		constexpr auto PendingRevealSFX = 0x838; // UWwiseEvent*
	}

	namespace n_UPhysicsCollisionHandler { // : UObject
		constexpr auto ImpactThreshold = 0x28; // float
		constexpr auto ImpactReFireDelay = 0x2c; // float
		constexpr auto DefaultImpactSound = 0x30; // USoundBase*
		constexpr auto LastImpactSoundTime = 0x38; // float
	}

	namespace n_ULandscapeMaterialInstanceConstant { // : UMaterialInstanceConstant
		constexpr auto bIsLayerThumbnail = 0x1b8; // char : 1
		constexpr auto DataWeightmapIndex = 0x1bc; // int32_t
		constexpr auto DataWeightmapSize = 0x1c0; // int32_t
	}

	namespace n_UCharacterInputBinder { // : UInputBinder
		constexpr auto InputComponent = 0x28; // UInputComponent*
	}

	namespace n_UCharacterInteractionComponent { // : UBoxComponent
		constexpr auto CurrentOptimalInteractable = 0x5c0; // UInteractableArea*
	}

	namespace n_UAggressiveGhostShipDataAsset { // : UDataAsset
		constexpr auto NumSpawnLocationAngleAttempts = 0x28; // int32_t
		constexpr auto HeightOffset = 0x2c; // float
		constexpr auto MaxSplineRadiusInMetres = 0x30; // float
		constexpr auto DelayBeforeShootingAfterAppearing = 0x34; // float
		constexpr auto TimeToFadeOutBeforeDestroyingWhenKilled = 0x38; // float
		constexpr auto TimeToFadeOutBeforeDestroyingWhenKilledWithSinkingAnimation = 0x3c; // float
		constexpr auto OnDeathPushBackExplosionDelay = 0x40; // float
		constexpr auto PitchSpeed = 0x44; // float
		constexpr auto MaxPitch = 0x48; // float
		constexpr auto RollSpeed = 0x4c; // float
		constexpr auto MaxRoll = 0x50; // float
		constexpr auto ForwardOffsetInMetresToAngleOffset = 0x54; // float
		constexpr auto LowAccuracyTargetDistanceInMetres = 0x58; // float
		constexpr auto HighAccuracyTargetDistanceInMetres = 0x5c; // float
		constexpr auto MinFormationSpawnDistanceFromPointsToAvoidInMetres = 0x60; // float
		constexpr auto MinFormationSpawnDistanceFromPlayersInMetres = 0x64; // float
		constexpr auto SpawnOnTopOfPlayerDistanceAwayInMetres = 0x68; // float
		constexpr auto MaxTargetAngle = 0x6c; // float
		constexpr auto CannonTargetConeSideOffsetInMetres = 0x70; // float
		constexpr auto ExtraDeadZoneInMetres = 0x74; // float
		constexpr auto ProjectileSpeed = 0x78; // float
		constexpr auto ProjectileGravityScale = 0x7c; // float
		constexpr auto DistanceForShipToTravelToGetThroughPortalInMetres = 0x80; // float
		constexpr auto CannonFireSfx = 0x88; // UWwiseEvent*
		constexpr auto SpawnSFX = 0x90; // UWwiseEvent*
		constexpr auto DespawnSFX = 0x98; // UWwiseEvent*
		constexpr auto DeathSfx = 0xa0; // UWwiseEvent*
		constexpr auto StartAmbientSfx = 0xa8; // UWwiseEvent*
		constexpr auto StopAmbientSfx = 0xb0; // UWwiseEvent*
		constexpr auto BeginOverlapOneShotSfx = 0xb8; // UWwiseEvent*
		constexpr auto EndOverlapOneShotSfx = 0xc0; // UWwiseEvent*
		constexpr auto OnMinesSpawnedSfx = 0xc8; // UWwiseEvent*
		constexpr auto OnBreakingSurfaceSfx = 0xd0; // UWwiseEvent*
		constexpr auto OnDisappearingBelowSurfaceSfx = 0xd8; // UWwiseEvent*
		constexpr auto OnSinkingSfx = 0xe0; // UWwiseEvent*
		constexpr auto CapstanDropLoopStart = 0xe8; // UWwiseEvent*
		constexpr auto CapstanDropLoopStop = 0xf0; // UWwiseEvent*
		constexpr auto CapstanHitWater = 0xf8; // UWwiseEvent*
		constexpr auto AmbientSfxPool = 0x100; // UWwiseObjectPoolWrapper*
		constexpr auto CannonSfxPool = 0x108; // UWwiseObjectPoolWrapper*
		constexpr auto CapstanSfxPool = 0x110; // UWwiseObjectPoolWrapper*
		constexpr auto CannonFireEffect = 0x118; // UObject*
		constexpr auto HealthIndicatorEffect = 0x120; // UObject*
		constexpr auto DeathEffect = 0x128; // UObject*
		constexpr auto DeathEffectOffset = 0x130; // FVector
		constexpr auto DeathEffectRotation = 0x13c; // FRotator
		constexpr auto DeathEffectFadeDelay = 0x148; // float
		constexpr auto NearMissPlayerOffsetInMetres = 0x150; // FWeightedProbabilityRangeOfRanges
		constexpr auto NearMissShipOffsetInMetres = 0x180; // FWeightedProbabilityRangeOfRanges
		constexpr auto NearMissCannonRowboatOffsetInMetres = 0x1b0; // FWeightedProbabilityRangeOfRanges
		constexpr auto NearMissMermaidStatueOffsetInMetres = 0x1e0; // FWeightedProbabilityRangeOfRanges
		constexpr auto RandomShipPositionScale = 0x210; // float
		constexpr auto TimeBetweenShipDamage = 0x218; // FWeightedProbabilityRangeOfRanges
		constexpr auto FormationForwardOffsetVarianceSpeed = 0x248; // FWeightedProbabilityRangeOfRanges
		constexpr auto FormationSidewaysOffsetVarianceSpeed = 0x278; // FWeightedProbabilityRangeOfRanges
		constexpr auto WraithballProjectileType = 0x2a8; // ALaunchableProjectile*
	}

	namespace n_UAddItemToCollectorsChestStep { // : UMutateCollectorsChestStep
		constexpr auto Desc = 0x90; // UAddItemToCollectorsChestStepDesc*
	}

	namespace n_UBTCompositeNode { // : UBTNode
		constexpr auto Children = 0x58; // TArray<FBTCompositeChild>
		constexpr auto Services = 0x68; // TArray<UBTService*>
	}

	namespace n_AGameSession { // : AInfo
		constexpr auto MaxSpectators = 0x3d0; // int32_t
		constexpr auto MaxPlayers = 0x3d4; // int32_t
		constexpr auto MaxSplitscreensPerConnection = 0x3d8; // char
		constexpr auto bRequiresPushToTalk = 0x3d9; // bool
		constexpr auto SessionName = 0x3dc; // FName
	}

	namespace n_UGameplayEffectExtension_ShieldTest { // : UGameplayEffectExtension
		constexpr auto ShieldRemoveGameplayEffect = 0x48; // UGameplayEffect*
	}

	namespace n_UParticleModuleAttractorPointGravity { // : UParticleModuleAttractorBase
		constexpr auto Position = 0x50; // FVector
		constexpr auto Radius = 0x5c; // float
		constexpr auto Strength = 0x60; // UDistributionFloat*
	}

	namespace n_UNPCDialogPredicateIntEquals { // : UNPCDialogPredicate
		constexpr auto ParameterName = 0x38; // FName
		constexpr auto Value = 0x40; // int32_t
	}

	namespace n_UTaleQuestLocationMapChestFoundStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMovieSceneAkAudioRTPCSection { // : UMovieSceneSection
		constexpr auto Name = 0xa0; // FString
		constexpr auto FloatCurve = 0xb0; // FRichCurve
	}

	namespace n_APosablePirate { // : AActor
		constexpr auto PirateMeshComponent = 0x3d0; // USkeletalMeshComponent*
		constexpr auto Gender = 0x3d8; // EIPGGender
		constexpr auto UseIPG = 0x3d9; // bool
		constexpr auto GeneratorServiceActor = 0x3e0; // APirateGeneratorService*
		constexpr auto Outfit = 0x470; // TArray<UClothingDesc*>
	}

	namespace n_UIsPlayerInIslandBoundsStatCondition { // : UStatCondition
		constexpr auto IslandName = 0x28; // FName
	}

	namespace n_UAnimationDataOverriderComponent { // : UActorComponent
		constexpr auto AnimationDataStoreAssetReference = 0xd0; // FStringAssetReference
		constexpr auto AnimationDataStoreAsset = 0xe0; // UAnimationDataStoreAsset*
	}

	namespace n_UAISenseConfig_Damage { // : UAISenseConfig
		constexpr auto Implementation = 0x30; // UAISense_Damage*
	}

	namespace n_UStatusResponseShipCurseFX { // : UStatusResponse
		constexpr auto CurseFXData = 0x30; // FShipCurseFXData
		constexpr auto Duration = 0x60; // float
	}

	namespace n_UAtmosphericPressureService { // : UObject
		constexpr auto RegisteredAtmosphericPressureZones = 0x30; // TArray<TScriptInterface<Class>>
	}

	namespace n_UAnimNotify { // : UObject
		constexpr auto PlayedWithSequencer = 0x28; // bool
	}

	namespace n_UParticleModuleVectorFieldScaleOverLife { // : UParticleModuleVectorFieldBase
		constexpr auto VectorFieldScaleOverLife = 0x50; // UDistributionFloat*
	}

	namespace n_AIntentBasedContinuousAnimatedMechanismAction { // : ABaseContinuousAnimatedMechanismAction
		constexpr auto IntentBasedMechanismActionComponent = 0xa20; // UIntentBasedMechanismActionComponent*
	}

	namespace n_UParticleModuleEventGenerator { // : UParticleModuleEventBase
		constexpr auto Events = 0x50; // TArray<FParticleEvent_GenerateInfo>
	}

	namespace n_APlayerPermissionsTestActor { // : AActor
		constexpr auto PlayerPermissionsComponent = 0x3d0; // UPlayerPermissionsComponent*
	}

	namespace n_UCosmeticItemAnimationDataAsset { // : UDataAsset
		constexpr auto WieldSockets = 0x28; // FName [0x7]
	}

	namespace n_UStoreBootyHandInComponent { // : UInteractableComponent
		constexpr auto NotificationStartInputID = 0x118; // UNotificationInputId*
		constexpr auto NotificationReleaseInputID = 0x120; // UNotificationInputId*
		constexpr auto DisplayPriority = 0x128; // EActionDisplayPriority
		constexpr auto TorchVFXOffIfStorageEmpty = 0x129; // bool
		constexpr auto EyesVFXOffIfStorageEmpty = 0x12a; // bool
		constexpr auto ScalarVectorNameToOverride = 0x12c; // FName
		constexpr auto CanStoreGlowValue = 0x134; // float
		constexpr auto HasSomethingStoredGlowValue = 0x138; // float
		constexpr auto CannotStoreGlowValue = 0x13c; // float
		constexpr auto PulseGlowValue = 0x140; // float
		constexpr auto ChangeDuration = 0x144; // float
		constexpr auto VFXEmptyGlow = 0x148; // float
		constexpr auto VFXPartialGlow = 0x14c; // float
		constexpr auto VFXFullGlow = 0x150; // float
		constexpr auto LocalIslandHash = 0x154; // int16_t
		constexpr auto DynamicMaterialMap = 0x170; // TArray<UMaterialInstanceDynamic*>
		constexpr auto LocalController = 0x180; // AController*
		constexpr auto BootyStorageSettings = 0x188; // UBootyStorageSettings*
		constexpr auto OwnerActionRulesComponent = 0x230; // UActionRulesComponent*
		constexpr auto OnStoredSFX = 0x238; // UWwiseEvent*
		constexpr auto TorchVfx = 0x240; // UParticleSystemComponent*
		constexpr auto EyesVFX = 0x248; // UParticleSystemComponent*
		constexpr auto ChestVFX = 0x250; // UParticleSystemComponent*
	}

	namespace n_UGameEngine { // : UEngine
		constexpr auto MaxDeltaTime = 0x978; // float
		constexpr auto ServerFlushLogInterval = 0x97c; // float
	}

	namespace n_UBTDecorator_CompareBlackboardIntValue { // : UBTDecorator
		constexpr auto BlackboardKey = 0x68; // FBlackboardKeySelector
		constexpr auto Value = 0x90; // int32_t
		constexpr auto ComparisonType = 0x94; // EBlackboardIntValueComparisonType
	}

	namespace n_UAnimCompress_RemoveEverySecondKey { // : UAnimCompress
		constexpr auto MinKeys = 0x40; // int32_t
		constexpr auto bStartAtSecondKey = 0x44; // char : 1
	}

	namespace n_UTestablePlayerControllerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UAggressiveGhostShipBannerDataAsset { // : UDataAsset
		constexpr auto Header = 0x28; // UAggressiveGhostShipNamesDataAsset*
		constexpr auto Footer = 0x30; // UAggressiveGhostShipNamesDataAsset*
		constexpr auto Tag = 0x38; // FName
		constexpr auto DisableMusic = 0x40; // bool
	}

	namespace n_UHIKCharacterization { // : UObject
		constexpr auto Reference = 0x28; // FName
		constexpr auto Hips = 0x30; // FName
		constexpr auto LeftUpLeg = 0x38; // FName
		constexpr auto LeftLeg = 0x40; // FName
		constexpr auto LeftFoot = 0x48; // FName
		constexpr auto RightUpLeg = 0x50; // FName
		constexpr auto RightLeg = 0x58; // FName
		constexpr auto RightFoot = 0x60; // FName
		constexpr auto Spine = 0x68; // FName
		constexpr auto LeftArm = 0x70; // FName
		constexpr auto LeftForeArm = 0x78; // FName
		constexpr auto LeftHand = 0x80; // FName
		constexpr auto RightArm = 0x88; // FName
		constexpr auto RightForeArm = 0x90; // FName
		constexpr auto RightHand = 0x98; // FName
		constexpr auto Head = 0xa0; // FName
		constexpr auto BoneTransforms = 0xa8; // TArray<FHIKBoneTransform>
		constexpr auto Locked = 0xb8; // bool
		constexpr auto UnrealToHumanIKBoneMapping = 0xc0; // TArray<int32_t>
		constexpr auto AdditionalBones = 0xd0; // TArray<FHIKBoneMapping>
		constexpr auto LeftElbowInverted = 0xe0; // bool
		constexpr auto RightElbowInverted = 0xe1; // bool
		constexpr auto LeftKneeInverted = 0xe2; // bool
		constexpr auto RightKneeInverted = 0xe3; // bool
		constexpr auto AdjustLeftShoulder = 0xe4; // bool
		constexpr auto AdjustLeftShoulder_Axis = 0xe8; // FVector
		constexpr auto AdjustLeftShoulder_Angle = 0xf4; // float
		constexpr auto AdjustRightShoulder = 0xf8; // bool
		constexpr auto AdjustRightShoulder_Axis = 0xfc; // FVector
		constexpr auto AdjustRightShoulder_Angle = 0x108; // float
		constexpr auto SpineSquashNStretch = 0x10c; // bool
		constexpr auto NeckSquashNStretch = 0x10d; // bool
		constexpr auto SpineJointsMinSquashNStretchFactor = 0x110; // float
		constexpr auto SpineJointsMaxSquashNStretchFactor = 0x114; // float
		constexpr auto NeckJointsMinSquashNStretchFactor = 0x118; // float
		constexpr auto NeckJointsMaxSquashNStretchFactor = 0x11c; // float
		constexpr auto bInitFromSkeleton = 0x120; // bool
		constexpr auto InitFromSkeletonCount = 0x124; // int32_t
		constexpr auto ImportRotator = 0x128; // FRotator
	}

	namespace n_UAddFogBankAvoidanceAreaStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_URegisterTransientActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto Actor = 0x80; // FQuestVariableActor
		constexpr auto DestructionRadius = 0x90; // float
		constexpr auto IsPendingDestruction = 0x94; // bool
	}

	namespace n_UBTDecorator_ReachedMoveGoal { // : UBTDecorator
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UTaleQuestCompassService { // : UTaleQuestToolService
		constexpr auto CurrentTarget = 0x120; // FEnchantedCompassTarget
	}

	namespace n_ABuriedDecalServerService { // : AActor
		constexpr auto Settings = 0x3d8; // UDiggingSettings*
	}

	namespace n_AAIEncounterService { // : AActor
		constexpr auto DefaultPartsCategories = 0x3d8; // TArray<FAIPartsCategoryMapping>
		constexpr auto FormPartsCategories = 0x3e8; // TArray<FAIPartsCategoryFormMapping>
		constexpr auto Ammo = 0x3f8; // UAIAmmoTypeList*
		constexpr auto AmmoProgressions = 0x400; // UAIAmmoProgressionTypeList*
		constexpr auto Forms = 0x408; // UAIFormTypeList*
		constexpr auto FormProgressions = 0x410; // UAIFormProgressionTypeList*
		constexpr auto Loadouts = 0x418; // UAILoadoutTypeList*
		constexpr auto LoadoutProgressions = 0x420; // UAILoadoutProgressionTypeList*
		constexpr auto Skillsets = 0x428; // UAISkillsetTypeList*
		constexpr auto SkillsetProgressions = 0x430; // UAISkillsetProgressionTypeList*
		constexpr auto ClassIds = 0x438; // UAIClassIdTypeList*
		constexpr auto PartsCategories = 0x440; // UAIPartsCategoryTypeList*
		constexpr auto TeamColors = 0x448; // UAIColorVariantPool*
		constexpr auto AIItemDropSpawners = 0x450; // UAIItemDropComponentList*
		constexpr auto AIItemDropSpawnerProgressions = 0x458; // UAIItemDropComponentRankProgressionList*
		constexpr auto DebugSpawnableEncounterSettings = 0x460; // TArray<UAIEncounterSettings*>
	}

	namespace n_AFrontendGameMode { // : AGameMode
		constexpr auto bDisableAsyncOcclusionChecking = 0x3d8; // char : 1
		constexpr auto bUseSeamlessTravel = 0x3d8; // char : 1
		constexpr auto bPauseable = 0x3d8; // char : 1
		constexpr auto bStartPlayersAsSpectators = 0x3d8; // char : 1
		constexpr auto bDelayedStart = 0x3d8; // char : 1
		constexpr auto OptionsString = 0x3e0; // FString
		constexpr auto DefaultPawnClass = 0x3f0; // APawn*
		constexpr auto HUDClass = 0x3f8; // AHUD*
		constexpr auto NumSpectators = 0x400; // int32_t
		constexpr auto NumPlayers = 0x404; // int32_t
		constexpr auto NumBots = 0x408; // int32_t
		constexpr auto MinRespawnDelay = 0x40c; // float
		constexpr auto GameSession = 0x410; // AGameSession*
		constexpr auto NumTravellingPlayers = 0x418; // int32_t
		constexpr auto DefaultPlayerName = 0x420; // FText
		constexpr auto EngineMessageClass = 0x458; // ULocalMessage*
		constexpr auto PlayerControllerClass = 0x460; // APlayerController*
		constexpr auto SpectatorClass = 0x468; // ASpectatorPawn*
		constexpr auto ReplaySpectatorPlayerControllerClass = 0x470; // APlayerController*
		constexpr auto PlayerStateClass = 0x478; // APlayerState*
		constexpr auto GameStateClass = 0x480; // AGameState*
		constexpr auto GameState = 0x488; // AGameState*
		constexpr auto InactivePlayerArray = 0x490; // TArray<APlayerState*>
		constexpr auto GameModeClassAliases = 0x4b0; // TArray<FGameClassShortName>
		constexpr auto InactivePlayerStateLifeSpan = 0x4c0; // float
		constexpr auto bHandleDedicatedServerReplays = 0x4c4; // bool
	}

	namespace n_USporeBreathAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto BreathMaxDuration = 0xc8; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto BreathContinueThresholdDistance = 0xd8; // float
		constexpr auto BreathActor = 0xe0; // AStatusEffectOverlapZone*
		constexpr auto BreathVFXParams = 0xe8; // FVFXHandlerComponentParams
		constexpr auto BreathCollisionVolumeSize = 0x128; // FVector
		constexpr auto BreathCollisionForwardOffset = 0x134; // float
		constexpr auto BreathStartDelay = 0x138; // float
		constexpr auto VfxSpawner = 0x140; // UVFXSpawnerComponent*
	}

	namespace n_ALightmassImportanceVolume { // : AVolume
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_URandomPirateLegendSectionStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTutorialComponent { // : UActorComponent
		constexpr auto HasBegun = 0xd8; // bool
	}

	namespace n_UWorldEndAIAbility { // : UAthenaAIAbility
		constexpr auto Owner = 0x78; // APawn*
		constexpr auto SetupAbilityParams = 0x80; // UWorldEndAIAbilityParams*
		constexpr auto VolcanicEmitter = 0x88; // AAshenLordVolcano*
		constexpr auto GeyserManager = 0x90; // AGeyserManager*
		constexpr auto FireShroud = 0x98; // FAshenLordFireShroud
		constexpr auto OwnedSuperHeatedWater = 0xb8; // ASuperheatedWater*
		constexpr auto LoadedCloudAsset = 0xc0; // UObject*
	}

	namespace n_UBuoyancyComponent { // : UActorComponent
		constexpr auto BuoyancyParams = 0xd0; // FWaterBuoyancy
		constexpr auto SinkingParams = 0x200; // FBuoyancyComponentSinkingParams
		constexpr auto LockToSurfaceParams = 0x234; // FBuoyancyComponentLockToSurfaceParams
		constexpr auto ExclusionParams = 0x250; // FBuoyancyComponentExclusionParams
		constexpr auto DoClientSideSim = 0x258; // bool
		constexpr auto VisibleMesh = 0x260; // UPrimitiveComponent*
		constexpr auto ChoppinessScalar = 0x274; // float
		constexpr auto State = 0x278; // EBuoyantObjectState
	}

	namespace n_AAIEncounterGenerationService { // : AActor
		constexpr auto GenerationRecipes = 0x3d8; // UAIEncounterGenerationRecipeTypeList*
		constexpr auto EncounterService = 0x3e0; // TScriptInterface<Class>
	}

	namespace n_UMovieScene3DConstraintSection { // : UMovieSceneSection
		constexpr auto ConstraintId = 0x98; // FGuid
	}

	namespace n_UMaterialExpressionParticleColor { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UMovieSceneIntegerSection { // : UMovieSceneSection
		constexpr auto IntegerCurve = 0xa0; // FIntegralCurve
	}

	namespace n_USpireStreamedLevelDataAsset { // : UDataAsset
		constexpr auto StreamedLevel = 0x28; // UAthenaStreamedLevelDataAsset*
		constexpr auto Entries = 0x30; // TArray<FSpireEntry>
		constexpr auto FeatureToggle = 0x40; // FName
	}

	namespace n_UTaleRegisterSpireStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTaleRegisterSpireStepDesc*
	}

	namespace n_UIteratorFrame { // : UObject
		constexpr auto Desc = 0x40; // UTaleQuestParallelForeachStepDesc*
		constexpr auto StructForCollector = 0x48; // UScriptStruct*
	}

	namespace n_UProjectileWeaponValidationFunctionLibrary { // : UBlueprintFunctionLibrary
		constexpr auto AimPositionValidationTolerance = 0x28; // float
	}

	namespace n_UDeliverableRedirectionCompositeContext { // : UDeliverableRedirectionContextBase
		constexpr auto Contexts = 0x28; // TArray<UDeliverableRedirectionContextBase*>
	}

	namespace n_ULandscapeSplineSegment { // : UObject
		constexpr auto Connections = 0x28; // FLandscapeSplineSegmentConnection [0x2]
		constexpr auto SplineInfo = 0x58; // FInterpCurveVector
		constexpr auto Points = 0x70; // TArray<FLandscapeSplineInterpPoint>
		constexpr auto Bounds = 0x80; // FBox
		constexpr auto LocalMeshComponents = 0xa0; // TArray<USplineMeshComponent*>
	}

	namespace n_UWidgetNavigation { // : UObject
		constexpr auto Up = 0x28; // FWidgetNavigationData
		constexpr auto Down = 0x3c; // FWidgetNavigationData
		constexpr auto Left = 0x50; // FWidgetNavigationData
		constexpr auto Right = 0x64; // FWidgetNavigationData
		constexpr auto Next = 0x78; // FWidgetNavigationData
		constexpr auto Previous = 0x8c; // FWidgetNavigationData
	}

	namespace n_AAICreatureCharacter { // : ACharacter
		constexpr auto DelayBeforeDestroying = 0x628; // float
		constexpr auto TimeBeforeFadingOut = 0x62c; // float
		constexpr auto PickupTime = 0x630; // float
		constexpr auto TooltipDisplayOffset = 0x634; // FVector
		constexpr auto ActionStateMachineComponent = 0x640; // UActionStateMachineComponent*
		constexpr auto ActionStatePriorityTableData = 0x648; // UActionStatePriorityTableData*
		constexpr auto ActionStateCreatorDefinition = 0x650; // AActionStateCreatorDefinition*
		constexpr auto AIControllerParams = 0x658; // UAthenaAIControllerParamsDataAsset*
		constexpr auto InteractableComponent = 0x660; // UInteractableComponent*
		constexpr auto WaterHeightProviderComponent = 0x668; // UWaterHeightProviderComponent*
		constexpr auto AnimNotifyWwiseEmitterComponent = 0x670; // UAnimNotifyWwiseEmitterComponent*
		constexpr auto RewindComponent = 0x678; // URewindComponent*
		constexpr auto ActionRulesComponent = 0x680; // UActionRulesComponent*
		constexpr auto AICreatureCharacterMovementComponent = 0x788; // UAICreatureCharacterMovementComponent*
		constexpr auto CurrentAIStrategy = 0x790; // UAIStrategyId*
	}

	namespace n_UMaterialInstanceDynamic { // : UMaterialInstance
		constexpr auto PhysMaterial = 0x58; // UPhysicalMaterial*
		constexpr auto Parent = 0x60; // UMaterialInterface*
		constexpr auto bHasStaticPermutationResource = 0x68; // char : 1
		constexpr auto bOverrideSubsurfaceProfile = 0x68; // char : 1
		constexpr auto ParentLightingGuid = 0x70; // FGuid
		constexpr auto FontParameterValues = 0x80; // TArray<FFontParameterValue>
		constexpr auto ScalarParameterValues = 0x90; // TArray<FScalarParameterValue>
		constexpr auto TextureParameterValues = 0xa0; // TArray<FTextureParameterValue>
		constexpr auto VectorParameterValues = 0xb0; // TArray<FVectorParameterValue>
		constexpr auto BasePropertyOverrides = 0xc0; // FMaterialInstanceBasePropertyOverrides
	}

	namespace n_AGameplayDebuggingHUDComponent { // : AActor
		constexpr auto MenuStartX = 0x3d0; // float
		constexpr auto MenuStartY = 0x3d4; // float
		constexpr auto DebugInfoStartX = 0x3d8; // float
		constexpr auto DebugInfoStartY = 0x3dc; // float
		constexpr auto Canvas = 0x3e0; // UCanvas*
		constexpr auto PlayerOwner = 0x3e8; // APlayerController*
	}

	namespace n_UInterpolatingMountpointComponent { // : UMountpointComponent
		constexpr auto InterpolateSpeed = 0x320; // float
		constexpr auto MaximumDistance = 0x324; // float
		constexpr auto RelativeSnapLocation = 0x328; // FVector
		constexpr auto RelativeYawToUseExtraTransform = 0x334; // float
		constexpr auto RelativeYawRangeToUseExtraTransform = 0x338; // float
		constexpr auto ExtraTranslation = 0x33c; // FVector
		constexpr auto ExtraRotation = 0x348; // FRotator
		constexpr auto UseExtraTransform = 0x354; // bool
	}

	namespace n_UTaleQuestClearTaleProposalsStepDesc { // : UTaleQuestStepDesc
		constexpr auto CampaignId = 0x80; // FName
	}

	namespace n_URunUnitTestsCommandlet { // : UCommandlet
		constexpr auto HelpDescription = 0x28; // FString
		constexpr auto HelpUsage = 0x38; // FString
		constexpr auto HelpWebLink = 0x48; // FString
		constexpr auto HelpParamNames = 0x58; // TArray<FString>
		constexpr auto HelpParamDescriptions = 0x68; // TArray<FString>
		constexpr auto IsServer = 0x78; // char : 1
		constexpr auto IsClient = 0x78; // char : 1
		constexpr auto IsEditor = 0x78; // char : 1
		constexpr auto LogToConsole = 0x78; // char : 1
		constexpr auto ShowErrorCount = 0x78; // char : 1
	}

	namespace n_UAthenaSpringArmComponentParams { // : UDataAsset
		constexpr auto CameraDistanceFromPlayer = 0x28; // float
		constexpr auto CameraVerticalOffset = 0x2c; // float
		constexpr auto CameraCollisionProbeSize = 0x30; // float
		constexpr auto CameraCollisionProbeCollisionChannel = 0x34; // ECollisionChannel
		constexpr auto PlayModeSettings = 0x38; // TArray<FCameraSpringArmPlayModeParameters>
		constexpr auto CameraMinPitch = 0x48; // float
		constexpr auto CameraMaxPitch = 0x4c; // float
		constexpr auto CameraDefaultPitch = 0x50; // float
		constexpr auto CameraDefaultYaw = 0x54; // float
		constexpr auto CameraPitchSpeed = 0x58; // float
		constexpr auto CameraYawSpeed = 0x5c; // float
		constexpr auto CameraConstantYawSpeed = 0x60; // float
		constexpr auto EnableRotationLag = 0x64; // bool
		constexpr auto RotationLagSpeed = 0x68; // float
		constexpr auto ZoomEnabled = 0x6c; // bool
		constexpr auto ZoomSpeedGamepad = 0x70; // float
		constexpr auto ZoomSpeedMouse = 0x74; // float
		constexpr auto ZoomTimeout = 0x78; // float
		constexpr auto ZoomMinArmLengthFactor = 0x7c; // float
		constexpr auto ZoomBlend = 0x80; // float
		constexpr auto AllowSmoothZoomedInOffsetBlend = 0x84; // bool
		constexpr auto SmoothZoomedInInterpolaionValue = 0x88; // float
	}

	namespace n_UWieldablePetHungerDataAsset { // : UDataAsset
		constexpr auto TimeToStartEating = 0x28; // float
		constexpr auto EdibleCheckRadius = 0x2c; // float
		constexpr auto EatingAnimData = 0x30; // FWieldablePetHungerAnimationData
		constexpr auto FedAnimData = 0x38; // FWieldablePetHungerAnimationData
		constexpr auto SickAnimData = 0x40; // FWieldablePetHungerAnimationData
		constexpr auto RefuseAnimData = 0x48; // FWieldablePetHungerAnimationData
		constexpr auto CollisionChannel = 0x50; // ECollisionChannel
	}

	namespace n_UItemSettings { // : UDeveloperSettings
		constexpr auto DropItemParams = 0x38; // FDropItemParams
		constexpr auto AIPriorityDropItemParams = 0x80; // FDropItemParams
		constexpr auto AutoAimCollisionChannel = 0xc8; // ECollisionChannel
		constexpr auto ItemClassesToBeNamedByCategory = 0xd0; // TArray<UItemCategory*>
	}

	namespace n_UMaterialExpressionScreenPosition { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_AHUD { // : AActor
		constexpr auto WhiteColor = 0x3d0; // FColor
		constexpr auto GreenColor = 0x3d4; // FColor
		constexpr auto RedColor = 0x3d8; // FColor
		constexpr auto PlayerOwner = 0x3e0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x3e8; // char : 1
		constexpr auto bShowHUD = 0x3e8; // char : 1
		constexpr auto bShowDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowHitBoxDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowOverlays = 0x3e8; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x3e8; // char : 1
		constexpr auto PostRenderedActors = 0x3f0; // TArray<AActor*>
		constexpr auto LastHUDRenderTime = 0x400; // float
		constexpr auto RenderDelta = 0x404; // float
		constexpr auto DebugDisplay = 0x408; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x418; // TArray<FName>
		constexpr auto Canvas = 0x428; // UCanvas*
		constexpr auto DebugCanvas = 0x430; // UCanvas*
		constexpr auto DebugTextList = 0x438; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x448; // AActor*
		constexpr auto ShowDebugTargetActor = 0x450; // AActor*
	}

	namespace n_USoundNodeDelay { // : USoundNode
		constexpr auto DelayMin = 0x38; // float
		constexpr auto DelayMax = 0x3c; // float
	}

	namespace n_APlayerManagerService { // : AActor
		constexpr auto AllPlayerControllers = 0x3e8; // TArray<FWeakActorHandle>
	}

	namespace n_USpawnRewardStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTDecorator_CompareBlackboardFloatValue { // : UBTDecorator_CompareFloatValueBase
		constexpr auto BlackboardKey = 0xb8; // FBlackboardKeySelector
	}

	namespace n_UBeckonSettings { // : UDeveloperSettings
		constexpr auto BeckonDataAsset = 0x38; // FStringAssetReference
	}

	namespace n_ATinyShark { // : ASharkPawn
		constexpr auto AITargetVisibilityPoints = 0x980; // TArray<FVector>
		constexpr auto TargetBoxHeightMultiplier = 0x990; // float
		constexpr auto TargetBoxZOffsetMultiplier = 0x994; // float
		constexpr auto AnimNotifyWwiseEmitterComponent = 0x998; // UAnimNotifyWwiseEmitterComponent*
	}

	namespace n_UObjectProximityResetComponent { // : UActorComponent
		constexpr auto ResetTargets = 0xc8; // TArray<AActor*>
		constexpr auto AllObjectsResetDelegate = 0xd8; // FScriptMulticastDelegate
		constexpr auto ObjectResetTimeout = 0xf8; // float
	}

	namespace n_UNavigationInvokerComponent { // : UActorComponent
		constexpr auto TileGenerationRadius = 0xc8; // float
		constexpr auto TileRemovalRadius = 0xcc; // float
	}

	namespace n_UCutsceneMechanismActionComponent { // : UMechanismActionComponent
		constexpr auto CutsceneName = 0x158; // FName
		constexpr auto CutSceneActor = 0x160; // AActor*
	}

	namespace n_UWieldedItemNonVerbalRadialContentRule { // : UNonVerbalRadialContentRule
		constexpr auto CurrentPhrases = 0xa8; // UPhrasesRadialDataAsset*
	}

	namespace n_UMaterialExpressionRotateAboutAxis { // : UMaterialExpression
		constexpr auto NormalizedRotationAxis = 0x70; // FExpressionInput
		constexpr auto RotationAngle = 0xa8; // FExpressionInput
		constexpr auto PivotPoint = 0xe0; // FExpressionInput
		constexpr auto Position = 0x118; // FExpressionInput
		constexpr auto Period = 0x150; // float
	}

	namespace n_UBlackboardData { // : UDataAsset
		constexpr auto Parent = 0x28; // UBlackboardData*
		constexpr auto Keys = 0x30; // TArray<FBlackboardEntry>
		constexpr auto bHasSynchronizedKeys = 0x40; // char : 1
	}

	namespace n_UBTTask_SetDebugPetStateDescriptor { // : UBTTaskNode
		constexpr auto NewDescriptor = 0x60; // EDebugPetStateDescriptor
	}

	namespace n_UParticleModuleKillBox { // : UParticleModuleKillBase
		constexpr auto LowerLeftCorner = 0x50; // FRawDistributionVector
		constexpr auto UpperRightCorner = 0x88; // FRawDistributionVector
		constexpr auto bAbsolute = 0xc0; // char : 1
		constexpr auto bKillInside = 0xc0; // char : 1
		constexpr auto bAxisAlignedAndFixedSize = 0xc0; // char : 1
	}

	namespace n_USlateBrushAsset { // : UObject
		constexpr auto Brush = 0x28; // FSlateBrush
	}

	namespace n_UAthenaEditorRuntimeSettings { // : UDeveloperSettings
		constexpr auto PIECrewSize = 0x38; // int32_t
		constexpr auto PIEWithBootflow = 0x3c; // bool
		constexpr auto PIEShipSize = 0x40; // UShipSize*
		constexpr auto PIEIsInitialTutorial = 0x48; // bool
		constexpr auto PIEIsArenaGame = 0x49; // bool
		constexpr auto PIEIsCustomServer = 0x4a; // bool
		constexpr auto AnimationOverrideEntries = 0x50; // TArray<FAthenaAnimationOverrideEntry>
	}

	namespace n_AKrakenService { // : AActor
		constexpr auto KrakenServiceParams = 0x3d8; // FKrakenServiceParams
		constexpr auto Kraken = 0x518; // AKraken*
	}

	namespace n_ALandscapeGizmoActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UBTDecorator_IsLocationInWater { // : UBTDecorator_BlackboardBase
		constexpr auto WaterVolumeActor = 0x90; // FBlackboardKeySelector
		constexpr auto TargetLocation = 0xb8; // FBlackboardKeySelector
		constexpr auto OnlyConsidersSwimmableWater = 0xe0; // bool
	}

	namespace n_UInstrumentKeyComponent { // : UStaticMeshComponent
		constexpr auto KeyID = 0x5f8; // int32_t
		constexpr auto NavigationOptions = 0x5fc; // FNavigationOptions
		constexpr auto BeingHeld = 0x60c; // bool
		constexpr auto DynamicMaterialInstance = 0x610; // UMaterialInstanceDynamic*
		constexpr auto IsHighlighted = 0x618; // bool
		constexpr auto HighlightValue = 0x61c; // float
		constexpr auto PressedValue = 0x620; // float
		constexpr auto DepressionParamName = 0x624; // FName
		constexpr auto KeyPressSFX = 0x630; // UWwiseEvent*
		constexpr auto KeyReleaseSFX = 0x638; // UWwiseEvent*
	}

	namespace n_UMaterialStatusSusceptibilityComponent { // : UActorComponent
		constexpr auto CurrentSurfaceMaterial = 0xd0; // UPhysicalMaterial*
		constexpr auto CurrentMaterialStatusZone = 0xd8; // TScriptInterface<Class>
	}

	namespace n_AAnchor { // : AActor
		constexpr auto PositionForAnchorDynamicsRelativeToAnchorActor = 0x3d8; // FVector
		constexpr auto AnchorDynamicsDesc = 0x3e8; // UBaseAnchorDynamicsDesc*
	}

	namespace n_UTaleMakeSpireVisibleStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UAthenaCharacterMovementComponent { // : UCharacterMovementComponent
		constexpr auto SwimParams = 0x560; // FAthenaCharacterSwimParams
		constexpr auto SprintSpdAmp = 0x5fc; // float
		constexpr auto SprintAccelAmp = 0x600; // float
		constexpr auto LookAtYawRate = 0x604; // float
		constexpr auto LookAtPitchRate = 0x608; // float
		constexpr auto MaxSpeedRatioWhenWalkingInNonSwimWater = 0x610; // float
		constexpr auto MaxAccelerationRatioWhenWalkingInNonSwimWater = 0x614; // float
		constexpr auto bCharacterCollisionSweepsEnabled = 0x618; // char : 1
		constexpr auto CharacterCollisionRadius = 0x61c; // float
		constexpr auto CharacterCollisionProfile = 0x620; // FCollisionProfileName
		constexpr auto CollisionPanicFallbackProfileName = 0x628; // FCollisionProfileName
		constexpr auto CharacterCollisionWalkingFriction = 0x630; // float
		constexpr auto CharacterCollisionSwimmingFriction = 0x634; // float
		constexpr auto CharacterCollisionUnderwaterOffset = 0x638; // float
		constexpr auto UnderwaterMovement = 0x640; // UAthenaCharacterMovementUnderwater*
		constexpr auto bCreateDisturbance = 0x648; // bool
		constexpr auto DisturbanceSize = 0x64c; // float
		constexpr auto DisturbanceVelocityScale = 0x650; // float
		constexpr auto UseAsRVOObstacleOnly = 0x654; // bool
		constexpr auto FanPushOutAngle = 0x6b8; // float
		constexpr auto FanPushOutNumSteps = 0x6bc; // int32_t
		constexpr auto MaxFanPushOutScalar = 0x6c0; // float
		constexpr auto UnderwaterVelocityToAnglePitchProjectileHitVolume = 0x6c8; // UCurveFloat*
		constexpr auto UnderwaterVelocityToAngleRollProjectileHitVolume = 0x6d0; // UCurveFloat*
		constexpr auto UnderwaterVelocityToZOffsetProjectileHitVolume = 0x6d8; // UCurveFloat*
		constexpr auto OnLandVelocityToAnglePitchProjectileHitVolume = 0x6e0; // UCurveFloat*
		constexpr auto OnLandVelocityToXOffsetProjectileHitVolume = 0x6e8; // UCurveFloat*
		constexpr auto OnLandVelocityToYOffsetProjectileHitVolume = 0x6f0; // UCurveFloat*
		constexpr auto OnLandVelocityToZOffsetProjectileHitVolume = 0x6f8; // UCurveFloat*
		constexpr auto FallingVelocityToAnglePitchProjectileHitVolume = 0x700; // UCurveFloat*
		constexpr auto FallingVelocityToXOffsetProjectileHitVolume = 0x708; // UCurveFloat*
		constexpr auto FallingVelocityToZOffsetProjectileHitVolume = 0x710; // UCurveFloat*
		constexpr auto NonUnderwaterCollisionProfileName = 0x7d0; // FName
		constexpr auto UnderwaterCollisionProfileName = 0x7d8; // FName
	}

	namespace n_UMeshMemoryConstraintScoringMemoryUsed { // : UMeshMemoryConstraintScoringObject
		constexpr auto ScoringName = 0x28; // FName
		constexpr auto ScoringFactor = 0x30; // float
	}

	namespace n_UParticleModuleSourceMovement { // : UParticleModuleLocationBase
		constexpr auto SourceMovementScale = 0x50; // FRawDistributionVector
	}

	namespace n_UParticleModuleVelocityBase { // : UParticleModule
		constexpr auto bInWorldSpace = 0x50; // char : 1
		constexpr auto bApplyOwnerScale = 0x50; // char : 1
	}

	namespace n_UWorldRegionComponent { // : USceneComponent
		constexpr auto WorldRegionName = 0x2b0; // FName
		constexpr auto RegionShanty = 0x2b8; // UObject*
		constexpr auto WorldRegionRadius = 0x2c0; // float
	}

	namespace n_UBTDecorator_CompareFloatValueBase { // : UBTDecorator_CompareBlackboardValues
		constexpr auto Comparison = 0x80; // EFloatValueComparisonType
		constexpr auto Value = 0x88; // FAIDataProviderFloatValue
	}

	namespace n_UTaleReleaseSpireStepDesc { // : UTaleQuestStepDesc
		constexpr auto SpireHandle = 0x80; // FQuestVariableTaleResourceHandle
	}

	namespace n_UMaterialExpressionPixelDepth { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UMaterialExpressionTransformPosition { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto TransformSourceType = 0xa8; // EMaterialPositionTransformSource
		constexpr auto TransformType = 0xa9; // EMaterialPositionTransformSource
	}

	namespace n_AAmmoPouchItemProxy { // : ADroppedPouchItemProxy
		constexpr auto OnPouchOpenedSfx = 0x798; // UWwiseEvent*
		constexpr auto OpenPouchEmitter = 0x7a0; // FWwiseEmitter
		constexpr auto TrackedActorType = 0x7c0; // ETrackedActorType
		constexpr auto DitherComponent = 0x7c8; // UDitherComponent*
		constexpr auto FadeDuration = 0x7d0; // float
	}

	namespace n_UEnvQueryTest_TraceByProfile { // : UEnvQueryTest
		constexpr auto CollisionProfileName = 0x170; // FName
		constexpr auto Radius = 0x178; // FAIDataProviderFloatValue
		constexpr auto Context = 0x1a8; // UEnvQueryContext*
		constexpr auto ContextZOffset = 0x1b0; // float
		constexpr auto OnlyUseContextZ = 0x1b4; // bool
		constexpr auto OffsetContextInwardsByRadius = 0x1b5; // bool
	}

	namespace n_UMaterialExpressionLandscapeLayerWeight { // : UMaterialExpression
		constexpr auto Base = 0x70; // FExpressionInput
		constexpr auto Layer = 0xa8; // FExpressionInput
		constexpr auto ParameterName = 0xe0; // FName
		constexpr auto PreviewWeight = 0xe8; // float
		constexpr auto ConstBase = 0xec; // FVector
		constexpr auto ExpressionGUID = 0xf8; // FGuid
	}

	namespace n_UCoherentContentEngagementMessage { // : UFeatureToggledStringAssetReference
		constexpr auto Entries = 0x28; // TArray<FFeatureToggledStringAssetReferenceEntry>
		constexpr auto ClassType = 0x38; // UObject*
	}

	namespace n_UDebugTeleportCrewStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UDebugTeleportCrewStepDesc*
	}

	namespace n_UServerMigrationSerialisationDetailsTestsPropertyMarkup { // : UObject
		constexpr auto Int32NoMarkup = 0x28; // int32_t
		constexpr auto BoolWithMigrationMarkup = 0x2c; // bool
		constexpr auto StringWithSaveGameMarkup = 0x30; // FString
		constexpr auto FloatWithMigrationAndReplicationMarkup = 0x40; // float
	}

	namespace n_UInterpGroupInstCamera { // : UInterpGroupInst
		constexpr auto Group = 0x28; // UInterpGroup*
		constexpr auto GroupActor = 0x30; // AActor*
		constexpr auto TrackInst = 0x38; // TArray<UInterpTrackInst*>
	}

	namespace n_ADebugCrewService { // : ACrewService
		constexpr auto Crews = 0x4a8; // TArray<FCrew>
	}

	namespace n_UBTTask_FlushQueuedAIAbility { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_UBTTask_SelectWanderFlyStrategy { // : UBTTask_BlackboardBase
		constexpr auto WanderRange = 0x88; // FAIDataProviderFloatValue
		constexpr auto LowFlyRange = 0xb8; // FAIDataProviderFloatValue
		constexpr auto WanderStrategy = 0xe8; // UAIStrategyId*
		constexpr auto LowFlyStrategy = 0xf0; // UAIStrategyId*
		constexpr auto HighFlyStrategy = 0xf8; // UAIStrategyId*
	}

	namespace n_UQuickAccessNonVerbalRadialContentRule { // : UNonVerbalRadialContentRule
		constexpr auto CurrentPhrases = 0xa8; // UNonVerbalRadialDataAsset*
	}

	namespace n_UEmissaryRepresentationMeshComponent { // : UStaticMeshComponent
		constexpr auto ForcedLodModel = 0x598; // int32_t
		constexpr auto bOverrideMinLOD = 0x59c; // bool
		constexpr auto bOverrideNavigationToDefaultObstacle = 0x59d; // bool
		constexpr auto MinLOD = 0x5a0; // int32_t
		constexpr auto StaticMesh = 0x5a8; // UStaticMesh*
		constexpr auto bOverrideWireframeColor = 0x5b0; // bool
		constexpr auto WireframeColorOverride = 0x5b4; // FColor
		constexpr auto bIgnoreInstanceForTextureStreaming = 0x5b8; // char : 1
		constexpr auto bOverrideLightMapRes = 0x5b8; // char : 1
		constexpr auto OverriddenLightMapRes = 0x5bc; // int32_t
		constexpr auto StreamingDistanceMultiplier = 0x5c0; // float
		constexpr auto IrrelevantLights = 0x5c8; // TArray<FGuid>
		constexpr auto LODData = 0x5d8; // TArray<FStaticMeshComponentLODInfo>
		constexpr auto CustomDepthMaterial = 0x5e8; // UMaterialInterface*
	}

	namespace n_UDioramaDebugMenuEntries { // : UDataAsset
		constexpr auto Dioramas = 0x28; // TArray<FDioramaDebugMenuEntry>
	}

	namespace n_AEnchantedSpyglassItemInfo { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UMediaTexture { // : UTexture
		constexpr auto AddressX = 0x138; // TextureAddress
		constexpr auto AddressY = 0x139; // TextureAddress
		constexpr auto ClearColor = 0x13c; // FLinearColor
		constexpr auto VideoTrackIndex = 0x14c; // int32_t
		constexpr auto MediaPlayer = 0x150; // UMediaPlayer*
		constexpr auto CurrentMediaPlayer = 0x160; // TWeakObjectPtr<UMediaPlayer>
	}

	namespace n_ARadialForceActor { // : ARigidBodyBase
		constexpr auto ForceComponent = 0x3d0; // URadialForceComponent*
	}

	namespace n_UDemoNetConnection { // : UNetConnection
		constexpr auto Children = 0x50; // TArray<UChildConnection*>
		constexpr auto Driver = 0x60; // UNetDriver*
		constexpr auto PackageMap = 0x68; // UPackageMap*
		constexpr auto OpenChannels = 0x70; // TArray<UChannel*>
		constexpr auto SentTemporaries = 0x80; // TArray<AActor*>
		constexpr auto ViewTarget = 0x90; // AActor*
		constexpr auto OwningActor = 0x98; // AActor*
		constexpr auto MaxPacket = 0xa0; // int32_t
		constexpr auto InternalAck = 0xa4; // char : 1
		constexpr auto LastReceiveTime = 0x3a0; // double
		constexpr auto MaxDormantActorsCheckedFromRelevancy = 0x34468; // int32_t
		constexpr auto DeferredCloseChannels = 0x344c0; // TArray<UChannel*>
	}

	namespace n_UDebugFlyingInputComponent { // : UAthenaCharacterBaseLocomotionInputComponent
		constexpr auto ThrowablesItemCategory = 0x2d8; // UItemCategory*
	}

	namespace n_UIsWieldingItemNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto TargetItems = 0x30; // TArray<UItemDesc*>
	}

	namespace n_UMechanismAnimationEvent_SwingAudio { // : UMechanismAnimationEvent_Audio
		constexpr auto Midpoint = 0x60; // float
		constexpr auto SwingMechanismInterface = 0x68; // TScriptInterface<Class>
	}

	namespace n_AAthenaCharacter { // : ACharacter
		constexpr auto LookAtOffsetComponent = 0x700; // ULookAtOffsetComponent*
		constexpr auto AnimationDataStoreAsset = 0x708; // UAnimationDataStoreAsset*
		constexpr auto SittingAnimationDataAssets = 0x710; // UAthenaAnimationSittingDataAsset*
		constexpr auto AthenaCharacterMovementComponent = 0x718; // UAthenaCharacterMovementComponent*
		constexpr auto Docker = 0x720; // FDocker
		constexpr auto ActionStateMachineComponent = 0x770; // UActionStateMachineComponent*
		constexpr auto ActionStatePriorityTableData = 0x778; // UActionStatePriorityTableData*
		constexpr auto ActionStateCreatorDefinition = 0x780; // AActionStateCreatorDefinition*
		constexpr auto ObjectMessageDispatcher = 0x788; // FObjectMessagingDispatcher
		constexpr auto WieldableItemSetComponent = 0x828; // UWieldableItemSetComponent*
		constexpr auto WieldedItemComponent = 0x830; // UWieldedItemComponent*
		constexpr auto MeshAdjustmentComponent = 0x838; // USceneComponent*
		constexpr auto InventoryManipulatorComponent = 0x840; // UInventoryManipulatorComponent*
		constexpr auto LoadoutComponent = 0x848; // ULoadoutComponent*
		constexpr auto ItemLoadoutComponent = 0x850; // UItemLoadoutComponent*
		constexpr auto HealthComponent = 0x858; // UHealthComponent*
		constexpr auto StateManagerComponent = 0x860; // UAthenaCharacterStateManagerComponent*
		constexpr auto RewindComponent = 0x868; // URewindComponent*
		constexpr auto ActorDamageableComponent = 0x870; // UActorDamageableComponent*
		constexpr auto CharacterHitReactionComponent = 0x878; // UCharacterHitReactionComponent*
		constexpr auto AnimNotifyWwiseEmitterComponent = 0x880; // UAnimNotifyWwiseEmitterComponent*
		constexpr auto MeleeAttackProcessor = 0x888; // UMeleeAttackProcessorComponent*
		constexpr auto HitDetectionComponent = 0x890; // UHitDetectionComponent*
		constexpr auto KnockBackComponent = 0x898; // UAthenaCharacterKnockbackComponent*
		constexpr auto DodgeComponent = 0x8a0; // UAthenaCharacterDodgeComponent*
		constexpr auto CharacterAINoiseEventComponent = 0x8a8; // UCharacterAINoiseEventComponent*
		constexpr auto PrivateActionRulesComponent = 0x8b0; // UActionRulesComponent*
		constexpr auto ShipTrackerComponent = 0x8b8; // UShipTrackerComponent*
		constexpr auto WatercraftTrackerComponent = 0x8c0; // UWatercraftTrackerComponent*
		constexpr auto ItemLoaderComponent = 0x8c8; // UItemLoaderComponent*
		constexpr auto RetractableCharacterComponent = 0x8d0; // URetractableCharacterComponent*
		constexpr auto ResourceProviderComponent = 0x8d8; // UResourceProviderComponent*
		constexpr auto CharacterFlammableComponent = 0x8e0; // UCharacterFlammableComponent*
		constexpr auto SoakableComponent = 0x8e8; // USoakableComponent*
		constexpr auto WaterExposureComponent = 0x8f0; // UWaterExposureComponent*
		constexpr auto ShelteredComponent = 0x8f8; // UShelteredComponent*
		constexpr auto BoxedRpcDispatcherComponent = 0x900; // UBoxedRpcDispatcherComponent*
		constexpr auto CosmeticItemAnimationComponent = 0x908; // UCosmeticItemAnimationComponent*
		constexpr auto OnJumpedDelegate = 0x910; // FScriptMulticastDelegate
		constexpr auto InputDelegator = 0x930; // FCompositeInputDelegator
		constexpr auto InputBinder = 0x990; // UCharacterInputBinder*
		constexpr auto InterferenceComponent = 0x998; // UMovementInterferenceComponent*
		constexpr auto WaterInteractionComponent = 0x9a0; // UWaterInteractionComponent*
		constexpr auto ThirdPersonAnimSetDataId = 0x9a8; // UAnimationDataStoreId*
		constexpr auto OverrideEncroachesBlockingGeometry = 0x9b0; // bool
		constexpr auto OverrideEncroachesBlockingGeometryChannel = 0x9b1; // ECollisionChannel
		constexpr auto OverrideFloorSweepCollisionProfileName = 0x9b4; // FName
		constexpr auto MovementThresholdToRecordRewindTransform = 0x9dc; // float
		constexpr auto AnimationDataStore = 0xa58; // UAnimationDataStore*
		constexpr auto OldPlayerState = 0xaa0; // APlayerState*
		constexpr auto RelativeTargetYawOnMovingBase = 0xae0; // float
		constexpr auto SmoothYawOnMovingBaseTime = 0xb18; // float
		constexpr auto RandomAnimationSeed = 0xb1c; // int32_t
		constexpr auto RandomBool = 0xb20; // bool
		constexpr auto CameraSocket = 0xb38; // USkeletalMeshSocket*
		constexpr auto RegisteredInputComponents = 0xb88; // TArray<UInputComponent*>
	}

	namespace n_UBuriedItemStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UBuriedItemStepDesc*
	}

	namespace n_UTaleQuestImportStepDesc { // : UTaleQuestStepDesc
		constexpr auto Asset = 0x80; // UTaleQuestDescAsset*
		constexpr auto QuestInput = 0x88; // FQuestVarTaleQuest
		constexpr auto DefinitionPropertyDataLinks = 0x98; // TMap<FName, FName>
	}

	namespace n_URammableDamageDataAsset { // : UDataAsset
		constexpr auto DamageSpeedParams = 0x28; // TArray<FRammableDamageSpeedEntry>
	}

	namespace n_UCollisionProfile { // : UDeveloperSettings
		constexpr auto Profiles = 0x38; // TArray<FCollisionResponseTemplate>
		constexpr auto DefaultChannelResponses = 0x48; // TArray<FCustomChannelSetup>
		constexpr auto EditProfiles = 0x58; // TArray<FCustomProfile>
		constexpr auto ProfileRedirects = 0x68; // TArray<FRedirector>
		constexpr auto CollisionChannelRedirects = 0x78; // TArray<FRedirector>
	}

	namespace n_UTritonService { // : UObject
		constexpr auto RegisteredTritonComponents = 0x38; // TArray<UTritonComponent*>
		constexpr auto CachedListenerInfo = 0xf0; // UTritonComponent*
	}

	namespace n_URewardService { // : UObject
		constexpr auto RewardDefinitionAssets = 0x30; // TArray<URewardDefinitionAsset*>
	}

	namespace n_UFillCollectorsChestWithItemsDataAsset { // : UDataAsset
		constexpr auto NumberOfItemsToSpawn = 0x28; // FWeightedProbabilityRange
		constexpr auto ItemsToSpawnInsideCollectorsChest = 0x48; // FWeightedItemDescSpawnDataAssetsWithWeights
		constexpr auto GoldToSpawnInsideCollectorsChest = 0x58; // UWeightedGoldRewardsDataAsset*
	}

	namespace n_UIsOnActiveVoyageNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto VoyageType = 0x30; // EVoyageDifficultyScope
	}

	namespace n_UChecklistMapLayout { // : UDataAsset
		constexpr auto Title = 0x28; // FTreasureMapWidgetText
		constexpr auto Description = 0x48; // FTreasureMapWidgetText
		constexpr auto Items = 0x68; // TArray<FChecklistMapLayoutItem>
		constexpr auto Afternote = 0x78; // FTreasureMapWidgetText
	}

	namespace n_UPetPartCustomisationComponent { // : UActorComponent
		constexpr auto AnimationDataStoreId = 0xd8; // UAnimationDataStoreId*
		constexpr auto SizeMappingsAsset = 0xe0; // UPetPartSizeMappingsDataAsset*
		constexpr auto CurrentlyLoadedMaterials = 0xe8; // TArray<FPetLoadedMaterial>
		constexpr auto DefaultMeshRef = 0xf8; // FStringAssetReference
		constexpr auto HighResMeshRef = 0x108; // FStringAssetReference
		constexpr auto CurrentlyLoadedMesh = 0x118; // USkeletalMesh*
		constexpr auto CurrentPetSize = 0x120; // EPetSize
		constexpr auto CurrentlyLoadedOverrideAsset = 0x128; // UPetCustomisationOverrideDataAsset*
	}

	namespace n_UMaterialExpressionParticleRadius { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UCoherentUIGTTooltipComponent { // : UCoherentUIGTAtlasComponent
		constexpr auto TooltipSpacing = 0x3c8; // int32_t
		constexpr auto NormalisedScreenSpaceTooltipPositionY = 0x3cc; // float
	}

	namespace n_UIsPirateLegendNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto ConditionalExpected = 0x28; // bool
	}

	namespace n_USeaRockDataAsset { // : UDataAsset
		constexpr auto SeaRocks = 0x28; // TArray<FSeaRock>
		constexpr auto UnderseaRocks = 0x38; // TArray<FSeaRock>
	}

	namespace n_UWieldableItemPersistentCooldownComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UKrakenHeadHitReactAnimationsDataAsset { // : UDataAsset
		constexpr auto HitReactionAnimations = 0x28; // TArray<FKrakenHeadHitReactAnimations>
	}

	namespace n_AGameplayAbilityTargetActor_SingleLineTrace { // : AGameplayAbilityTargetActor_Trace
		constexpr auto MaxRange = 0x4e8; // float
		constexpr auto TraceProfile = 0x4ec; // FCollisionProfileName
		constexpr auto bTraceAffectsAimPitch = 0x4f4; // bool
	}

	namespace n_UMigrationInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UStatusResponsePlayAudioLoopOnLocalClient { // : UStatusResponse
		constexpr auto StartLoopEvent = 0x30; // UWwiseEvent*
		constexpr auto StopLoopEvent = 0x38; // UWwiseEvent*
	}

	namespace n_UTreasuryWaveDataAsset { // : UDataAsset
		constexpr auto Waves1Player = 0x28; // TArray<UAIProgressiveWavesSpawner*>
		constexpr auto Waves2Player = 0x38; // TArray<UAIProgressiveWavesSpawner*>
		constexpr auto Waves3Player = 0x48; // TArray<UAIProgressiveWavesSpawner*>
		constexpr auto Waves4Player = 0x58; // TArray<UAIProgressiveWavesSpawner*>
	}

	namespace n_UContestScoreSystem { // : UObject
		constexpr auto ScoreDataAsset = 0x28; // UScoreRewardDataAsset*
		constexpr auto CloudScoreRewardData = 0x30; // FScoreRewardData
		constexpr auto WinningConditionScore = 0x110; // int32_t
		constexpr auto CrewScoreArray = 0x118; // TArray<FCrewScore>
		constexpr auto ScoreId = 0x128; // EContestScoreId
	}

	namespace n_AHideout { // : AActor
		constexpr auto AssociatedSpawnLocations = 0x3d0; // TArray<ASpawnLocation*>
		constexpr auto RevealTriggerVolume = 0x3e0; // UPrimitiveComponent*
		constexpr auto HideoutName = 0x3e8; // FText
		constexpr auto Players = 0x420; // TArray<FPlayerHideoutInfo>
	}

	namespace n_UMaterialExpressionLocalDisturbanceTexture { // : UMaterialExpression
		constexpr auto Coordinates = 0x70; // FExpressionInput
	}

	namespace n_UMaterialExpressionCausticTexture { // : UMaterialExpression
		constexpr auto Coordinates = 0x70; // FExpressionInput
	}

	namespace n_AAshenLordVolcano { // : AActor
		constexpr auto VolcanoSetupData = 0x3d0; // UAshenLordVolcanoSetupDataAsset*
	}

	namespace n_ALocationMap { // : ARenderToTextureMapBase
		constexpr auto CachedRenderData = 0x840; // TArray<FMapTextureRenderData>
		constexpr auto MarkIds = 0x850; // TArray<UMapMarkId*>
	}

	namespace n_UAthenaCheatManager { // : UCheatManager
		constexpr auto CinematicCameraController = 0x78; // ACinematicCameraController*
		constexpr auto CinematicCameraControllerClass = 0x80; // ACinematicCameraController*
		constexpr auto CreatedWorldMarkers = 0xb0; // TArray<FWorldMarkerDesc>
		constexpr auto DebugSchedulerSettings = 0xc0; // UGameEventSchedulerSettingsAsset*
		constexpr auto ServerPerformanceReplicator = 0xc8; // AServerPerformanceReplicator*
		constexpr auto TeleportToDigsiteHeightOffset = 0xd0; // float
		constexpr auto ShipCustomizationModel = 0xf0; // FShipCustomizationPersistenceModel
		constexpr auto WheelPersistenceModel = 0x100; // FShipPartDamagePersistenceModel
		constexpr auto CapstanPersistenceModel = 0x120; // FShipPartDamagePersistenceModel
		constexpr auto MastPersistenceModels = 0x140; // TArray<FShipPartDamagePersistenceModel>
		constexpr auto HullDamageModel = 0x150; // FHullDamagePersistenceModel
		constexpr auto HullCharringModel = 0x160; // FHullCharringPersistenceModel
		constexpr auto MapTablePersistenceModel = 0x170; // FMapTablePersistenceModel
	}

	namespace n_ATreasureChestItemProxySkeletal { // : ATreasureChestItemProxy
		constexpr auto ShovelEnterSurfaceSfx = 0x7c8; // UWwiseEvent*
		constexpr auto ExhumeStepSfx = 0x7d0; // UWwiseEvent*
		constexpr auto FullyDugUpSfx = 0x7d8; // UWwiseEvent*
		constexpr auto ChestAmbiencePool = 0x7e0; // UWwiseObjectPoolWrapper*
		constexpr auto ChestAmbiencePlay = 0x7e8; // UWwiseEvent*
		constexpr auto ChestAmbienceStop = 0x7f0; // UWwiseEvent*
		constexpr auto DitherComponent = 0x7f8; // UDitherComponent*
		constexpr auto CloseProximityEncounterParams = 0x800; // FEncounterParams
		constexpr auto CachedAudioConfig = 0x810; // UItemDiggingAudioConfig*
	}

	namespace n_UNetworkClusteringSettings { // : UDeveloperSettings
		constexpr auto DynamicActorGridHalfSizeKm = 0x38; // float
		constexpr auto DynamicActorGridCellSizeKm = 0x3c; // float
	}

	namespace n_UParticleModuleLocationPrimitiveBase { // : UParticleModuleLocationBase
		constexpr auto Positive_X = 0x50; // char : 1
		constexpr auto Positive_Y = 0x50; // char : 1
		constexpr auto Positive_Z = 0x50; // char : 1
		constexpr auto Negative_X = 0x50; // char : 1
		constexpr auto Negative_Y = 0x50; // char : 1
		constexpr auto Negative_Z = 0x50; // char : 1
		constexpr auto SurfaceOnly = 0x50; // char : 1
		constexpr auto Velocity = 0x50; // char : 1
		constexpr auto VelocityScale = 0x58; // FRawDistributionFloat
		constexpr auto StartLocation = 0x90; // FRawDistributionVector
	}

	namespace n_UStaticAISpawnCondition { // : UAISpawnOverrideCondition
		constexpr auto ShouldApplyOverride = 0x30; // bool
	}

	namespace n_UIntSerialization { // : UObject
		constexpr auto UnsignedInt16Variable = 0x28; // uint16_t
		constexpr auto UnsignedInt32Variable = 0x2c; // uint32_t
		constexpr auto UnsignedInt64Variable = 0x30; // uint64_t
		constexpr auto SignedInt8Variable = 0x38; // uint8_t
		constexpr auto SignedInt16Variable = 0x3a; // int16_t
		constexpr auto SignedInt64Variable = 0x40; // int64_t
		constexpr auto UnsignedInt8Variable = 0x48; // char
		constexpr auto SignedInt32Variable = 0x4c; // int32_t
	}

	namespace n_UClusterDescription { // : UItemWithoutIconsDesc
		constexpr auto ClusterAssets = 0x130; // TArray<ACluster*>
	}

	namespace n_UInputActionDelegateBinding { // : UInputDelegateBinding
		constexpr auto InputActionDelegateBindings = 0x28; // TArray<FBlueprintInputActionDelegateBinding>
	}

	namespace n_AWaveBasedMechanismVisualController { // : AActor
		constexpr auto MechanismActionComponent = 0x3d0; // UMechanismActionComponent*
		constexpr auto WaveVisualActors = 0x3d8; // TArray<AActor*>
		constexpr auto StaticMeshDynamicMaterialTag = 0x3e8; // FName
		constexpr auto ScalarParameterCurve = 0x3f0; // UCurveFloat*
		constexpr auto MaterialScalarParameterName = 0x3f8; // FName
		constexpr auto NewWaveDelay = 0x400; // float
		constexpr auto WaveIndex = 0x404; // int32_t
		constexpr auto DynamicMaterials = 0x418; // TArray<UMaterialInstanceDynamic*>
		constexpr auto MaterialsToTransition = 0x438; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UAshenLordEncounterServiceParams { // : UGameEventServiceParams
		constexpr auto EncounterParams = 0x28; // UAshenLordEncounterParams*
		constexpr auto MinPlayerDistanceToIsland = 0x30; // float
		constexpr auto AshenLordEncounterClass = 0x38; // AAshenLordEncounter*
		constexpr auto EncounterExclusionRadiusInMetres = 0x40; // float
	}

	namespace n_APhysicsConstraintActor { // : ARigidBodyBase
		constexpr auto ConstraintComp = 0x3d0; // UPhysicsConstraintComponent*
		constexpr auto ConstraintActor1 = 0x3d8; // AActor*
		constexpr auto ConstraintActor2 = 0x3e0; // AActor*
		constexpr auto bDisableCollision = 0x3e8; // char : 1
	}

	namespace n_AShroudBreakerWieldable { // : ALargeStaticMeshWieldableItem
		constexpr auto ShroudBreakerComponent = 0x790; // UShroudBreakerComponent*
	}

	namespace n_UBTService_BlueprintBase { // : UBTService
		constexpr auto AIOwner = 0x70; // AAIController*
		constexpr auto ActorOwner = 0x78; // AActor*
		constexpr auto bShowPropertyDetails = 0x90; // char : 1
		constexpr auto bShowEventDetails = 0x90; // char : 1
	}

	namespace n_AProjectileService { // : AActor
		constexpr auto DeadProjectiles = 0x3f0; // TArray<FWeaponProjectile>
		constexpr auto ProjectileAttackGroups = 0x448; // TArray<FProjectileAttackGroup>
		constexpr auto ProjectileThrottledTickData = 0x4d8; // UAthenaProjectilesThrottledTickCollectionAsset*
	}

	namespace n_UCookerComponent { // : UActorComponent
		constexpr auto StatusToApplyToContents = 0xd0; // TArray<FStatus>
		constexpr auto VFXFeedback = 0xe0; // TArray<FCookerSmokeFeedbackEntry>
		constexpr auto CookableStaticMeshComponent = 0xf0; // UStaticMeshMemoryConstraintComponent*
		constexpr auto CookableSkeletalMeshComponent = 0xf8; // USkeletalMeshMemoryConstraintComponent*
		constexpr auto CookedMaterialParameterName = 0x100; // FName
		constexpr auto BurnDownDirectionParameterName = 0x108; // FName
		constexpr auto PlacementVarianceAngleBound = 0x110; // float
		constexpr auto OnByDefault = 0x114; // bool
		constexpr auto AudioParams = 0x118; // UCookingComponentAudioParams*
		constexpr auto VfxLocation = 0x120; // EVfxRegion
		constexpr auto CurrentlyCookingItem = 0x128; // AItemInfo*
		constexpr auto CookingState = 0x130; // FCookingClientRepresentation
		constexpr auto SmokeParticleComponent = 0x198; // UParticleSystemComponent*
		constexpr auto VisibleCookableMaterial = 0x1a0; // UMaterialInstanceDynamic*
		constexpr auto TurnedOn = 0x1a8; // bool
		constexpr auto OnIsland = 0x1a9; // bool
	}

	namespace n_UHarbourComponent { // : USceneComponent
		constexpr auto HarbourRadiusInCentimetres = 0x2b8; // float
	}

	namespace n_UTaleQuestAddTornMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ABurpTestActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UWieldedItemNamedContextualOpenRadialAction { // : UOpenRadialAction
		constexpr auto RadialContexts = 0x30; // TArray<FContextAction>
		constexpr auto CanExecuteRadial = 0x40; // URadialCreationRuleAsset*
	}

	namespace n_UBTComposite_SimpleParallel { // : UBTCompositeNode
		constexpr auto FinishMode = 0x88; // EBTParallelMode
	}

	namespace n_AAthenaPlayerState { // : APlayerState
		constexpr auto VoiceChatComponent = 0x4a0; // UVoiceChatComponent*
		constexpr auto Sandbox = 0x4e8; // FString
		constexpr auto ClientPlatform = 0x4f8; // FString
		constexpr auto DeviceID = 0x508; // FString
		constexpr auto PirateIdentity = 0x518; // FPirateIdentity
		constexpr auto PlayerGameId = 0x648; // FGuid
		constexpr auto PirateDesc = 0x658; // FPirateDescription
		constexpr auto PlayerIndexOnServer = 0x6d8; // int32_t
		constexpr auto PlayerActivity = 0x718; // EPlayerActivityType
	}

	namespace n_UMaterialExpressionMaterialFunctionCall { // : UMaterialExpression
		constexpr auto MaterialFunction = 0x70; // UMaterialFunction*
		constexpr auto FunctionInputs = 0x78; // TArray<FFunctionExpressionInput>
		constexpr auto FunctionOutputs = 0x88; // TArray<FFunctionExpressionOutput>
	}

	namespace n_UBTTask_ChangeHangoutAnimation { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_ABP_FogBank_C { // : AFogBank
		constexpr auto AthenaPlayerZonePenetrationTracker = 0x538; // UAthenaPlayerZonePenetrationTrackerComponent*
	}

	namespace n_UUnlockableEntitlementsDataAsset { // : UDataAsset
		constexpr auto Categories = 0x28; // TArray<FUnlockableEntitlementCategory>
	}

	namespace n_UPopUpAudioDesc { // : UDataAsset
		constexpr auto SfxEventName = 0x28; // FString
		constexpr auto EventName = 0x38; // FString
		constexpr auto SwitchName = 0x48; // FString
		constexpr auto SwitchValue = 0x58; // FString
	}

	namespace n_UBTTask_StorePawnLocationInBlackboard { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_ULevelAssetCachingService { // : UObject
		constexpr auto CurrentRegion = 0x40; // UObject*
		constexpr auto AssetCache = 0x48; // TScriptInterface<Class>
		constexpr auto RegionLookup = 0x58; // TScriptInterface<Class>
		constexpr auto CachedPawn = 0x68; // TWeakObjectPtr<APawn>
	}

	namespace n_UAIAmmoTypeList { // : UDataAsset
		constexpr auto AllAmmo = 0x28; // TArray<UAthenaAIAmmoDataAsset*>
		constexpr auto DefaultAmmo = 0x38; // UAthenaAIAmmoDataAsset*
	}

	namespace n_AHole { // : AActor
		constexpr auto BoundsScaleFactor = 0x3d0; // float
		constexpr auto LifeTimeSpan = 0x3d4; // float
		constexpr auto DestroyTimeSpan = 0x3d8; // float
		constexpr auto ChanceOfSpawningAnItem = 0x3dc; // float
		constexpr auto ItemsToSpawn = 0x3e0; // TArray<FHoleItemToSpawn>
		constexpr auto State = 0x3f8; // EHoleState
	}

	namespace n_UMechanismAnimationCurve_Transform { // : UMechanismAnimation
		constexpr auto Curve = 0x60; // FTransformBlendCurve
	}

	namespace n_AProgressSpawnLocation { // : ASpawnLocation
		constexpr auto ProgressId = 0x410; // UProgressLocationId*
	}

	namespace n_UWaitForItemPickupStepDesc { // : UTaleQuestStepDesc
		constexpr auto Item = 0x80; // FQuestVariableActor
		constexpr auto PickerUpper = 0x90; // FQuestVariableActor
	}

	namespace n_ALaunchableProjectile { // : AActor
		constexpr auto WaterSplashComponent = 0x3f0; // UWaterSplashComponent*
		constexpr auto ProjectileComponent = 0x3f8; // UProjectileMovementComponent*
		constexpr auto LaunchLerpTime = 0x400; // float
		constexpr auto ImpactProjectileId = 0x408; // UImpactProjectileId*
		constexpr auto TrailEffectAboveWater = 0x410; // UObject*
		constexpr auto TrailEffectBelowWater = 0x418; // UObject*
		constexpr auto TrailVfxRegion = 0x420; // EVfxRegion
		constexpr auto TrailVFXScale = 0x424; // FVector
		constexpr auto TrailSocketName = 0x430; // FName
		constexpr auto TrailEmitterName = 0x438; // FName
		constexpr auto TrailSfxPlay = 0x440; // UWwiseEvent*
		constexpr auto TrailSfxStop = 0x448; // UWwiseEvent*
		constexpr auto TrailSfxPool = 0x450; // UWwiseObjectPoolWrapper*
		constexpr auto DisableStandardCannonFireSfx = 0x458; // bool
		constexpr auto CannonFireSfx = 0x460; // UWwiseEvent*
		constexpr auto CannonFireSfxPool = 0x468; // UWwiseObjectPoolWrapper*
		constexpr auto DestroyWhenEnteringWater = 0x470; // bool
		constexpr auto AutoTriggerTrailEffects = 0x471; // bool
		constexpr auto StaticMeshComponent = 0x4b0; // UStaticMeshComponent*
		constexpr auto TrailEffect = 0x4b8; // UParticleSystemComponent*
		constexpr auto LaunchSpeed = 0x4e8; // float
		constexpr auto GravityScale = 0x4ec; // float
	}

	namespace n_UEnvQueryGenerator_ProjectedPoints { // : UEnvQueryGenerator
		constexpr auto ProjectionData = 0x50; // FEnvTraceData
	}

	namespace n_URespawnAndTaleProgressComponent { // : UActorComponent
		constexpr auto LinkedSpawnLocations = 0x100; // TArray<AProgressSpawnLocation*>
		constexpr auto ProgressLevel = 0x110; // int32_t
		constexpr auto ClearProgress = 0x114; // bool
		constexpr auto SetRespawnProgress = 0x115; // bool
		constexpr auto SetRespawnProgressForWholeCrew = 0x116; // bool
		constexpr auto SetTaleProgress = 0x117; // bool
		constexpr auto SetTaleProgressForWholeCrew = 0x118; // bool
	}

	namespace n_AFireworkExplosion { // : AActor
		constexpr auto GeneratedFireworkData = 0x3d8; // FGeneratedFireworkData
		constexpr auto RootSceneComponent = 0x430; // USceneComponent*
		constexpr auto FireworkAmbientLightComponent = 0x438; // UFireworkAmbientLightComponent*
		constexpr auto SpawnedExplosionParticles = 0x440; // UParticleSystemComponent*
		constexpr auto AudioEmitter = 0x448; // FWwiseEmitter
	}

	namespace n_UPanelSlot { // : UVisual
		constexpr auto Parent = 0x28; // UPanelWidget*
		constexpr auto Content = 0x30; // UWidget*
	}

	namespace n_UInGameAdManager { // : UPlatformInterfaceBase
		constexpr auto bShouldPauseWhileAdOpen = 0x38; // char : 1
		constexpr auto ClickedBannerDelegates = 0x40; // TArray<DelegateProperty>
		constexpr auto ClosedAdDelegates = 0x50; // TArray<DelegateProperty>
	}

	namespace n_UBTTask_DoesEQSQuerySucceed { // : UBTTask_AthenaRunEQSQuery
		constexpr auto KeyToSetToTrueIfNoValidLocationFound = 0xa8; // FBlackboardKeySelector
		constexpr auto ReasonStringKeyIfNoValidLocationFound = 0xd0; // FBlackboardKeySelector
		constexpr auto ThrottleQueryTimePerFrame = 0xf8; // bool
		constexpr auto MaxSecondsToSpendOnQueryPerFrame = 0xfc; // float
	}

	namespace n_UShipStuckDetectionComponent { // : UActorComponent
		constexpr auto MaxShipSpeedToConsiderStationary = 0xc8; // float
		constexpr auto StuckTimeUntilDeletion = 0xcc; // float
		constexpr auto MaxHullSubmersionToConsiderStuckable = 0xd0; // float
		constexpr auto StuckTimeDecaySpeed = 0xd4; // float
		constexpr auto PrintDebug = 0xd8; // bool
		constexpr auto Ship = 0xe0; // AShip*
	}

	namespace n_UItemDiggingBaseConfig { // : UObject
		constexpr auto RelativeTransform = 0x30; // FTransform
		constexpr auto MaxSmallCrewSizeForNumDigsSelection = 0x60; // int32_t
		constexpr auto NumDigsRequiredForSmallCrewSize = 0x68; // FWeightedProbabilityRange
		constexpr auto NumDigsRequiredForBiggerCrewSize = 0x88; // FWeightedProbabilityRange
		constexpr auto DefaultNumDigsIfNotInCrew = 0xa8; // int32_t
		constexpr auto MaxDigRadiusToFurtherExhume = 0xac; // float
		constexpr auto RemoveSandDecal = 0xb0; // bool
		constexpr auto OnDigTrigger = 0xb8; // UOnDigStrategy*
		constexpr auto OnBuryTrigger = 0xc0; // UOnBuryStrategy*
	}

	namespace n_UFogBankTaleService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UFogBankTaleServiceDesc*
		constexpr auto FogBankAvoidanceAreas = 0x68; // TArray<FFogBankManagerFogAvoidanceArea>
	}

	namespace n_UContestShipCatalogueDataAsset { // : UDataAsset
		constexpr auto ArenaShipTeamSets = 0x28; // TArray<FShipLiveryTeamSet>
		constexpr auto UniqueLiverySets = 0x38; // TArray<FShipLiveryTeamSet>
		constexpr auto ChanceOfUniqueShipSwap = 0x48; // float
	}

	namespace n_UBTTask_ApplyStatusComposite { // : UBTTaskNode
		constexpr auto bOneShot = 0x60; // bool
		constexpr auto ContinuousStatusDuration = 0x68; // FAIDataProviderFloatValue
		constexpr auto StatusToApply = 0x98; // FStatus
	}

	namespace n_UAICreatureCharacterPathFollowingComponent { // : UAthenaAICharacterPathFollowingComponent
		constexpr auto LandingAngle = 0x2f0; // float
		constexpr auto HopDistanceScale = 0x2f4; // float
		constexpr auto MaximumLandTime = 0x2f8; // float
		constexpr auto MinStairAngle = 0x2fc; // float
		constexpr auto MinStairVelocityDampen = 0x300; // float
		constexpr auto SubscribedStairClimbStrategies = 0x308; // TArray<UAIStrategyId*>
	}

	namespace n_UAIEncounterSettings { // : UDataAsset
		constexpr auto PawnClass = 0x28; // UClass*
		constexpr auto AIClass = 0x48; // UAIClassId*
		constexpr auto TeamColor = 0x50; // FStringAssetReference
	}

	namespace n_UDeliverableRedirectionComponent { // : UActorComponent
		constexpr auto Context = 0xd0; // UDeliverableRedirectionContextBase*
	}

	namespace n_ATestablePlayerController { // : APlayerController
		constexpr auto Player = 0x430; // UPlayer*
		constexpr auto AcknowledgedPawn = 0x440; // APawn*
		constexpr auto ControllingDirTrackInst = 0x448; // UInterpTrackInstDirector*
		constexpr auto MyHUD = 0x458; // AHUD*
		constexpr auto PlayerCameraManager = 0x460; // APlayerCameraManager*
		constexpr auto PlayerCameraManagerClass = 0x468; // APlayerCameraManager*
		constexpr auto bAutoManageActiveCameraTarget = 0x470; // bool
		constexpr auto TargetViewRotation = 0x474; // FRotator
		constexpr auto HiddenActors = 0x490; // TArray<AActor*>
		constexpr auto LastSpectatorStateSynchTime = 0x4a0; // float
		constexpr auto LastSpectatorSyncLocation = 0x4a4; // FVector
		constexpr auto LastSpectatorSyncRotation = 0x4b0; // FRotator
		constexpr auto ClientCap = 0x4bc; // int32_t
		constexpr auto CheatManager = 0x4c0; // UCheatManager*
		constexpr auto CheatClass = 0x4c8; // UCheatManager*
		constexpr auto PlayerInput = 0x4d0; // UPlayerInput*
		constexpr auto ActiveForceFeedbackEffects = 0x4d8; // TArray<FActiveForceFeedbackEffect>
		constexpr auto bPlayerIsWaiting = 0x578; // char : 1
		constexpr auto NetPlayerIndex = 0x57c; // char
		constexpr auto bHasVoiceHandshakeCompleted = 0x57d; // bool
		constexpr auto PendingSwapConnection = 0x580; // UNetConnection*
		constexpr auto NetConnection = 0x588; // UNetConnection*
		constexpr auto InputYawScale = 0x59c; // float
		constexpr auto InputPitchScale = 0x5a0; // float
		constexpr auto InputRollScale = 0x5a4; // float
		constexpr auto bShowMouseCursor = 0x5a8; // char : 1
		constexpr auto bEnableClickEvents = 0x5a8; // char : 1
		constexpr auto bEnableTouchEvents = 0x5a8; // char : 1
		constexpr auto bEnableMouseOverEvents = 0x5a8; // char : 1
		constexpr auto bEnableTouchOverEvents = 0x5a8; // char : 1
		constexpr auto bForceFeedbackEnabled = 0x5a8; // char : 1
		constexpr auto DefaultMouseCursor = 0x5ac; // EMouseCursor
		constexpr auto CurrentMouseCursor = 0x5ad; // EMouseCursor
		constexpr auto DefaultClickTraceChannel = 0x5ae; // ECollisionChannel
		constexpr auto CurrentClickTraceChannel = 0x5af; // ECollisionChannel
		constexpr auto HitResultTraceDistance = 0x5b0; // float
		constexpr auto ForceFeedbackIntensity = 0x5b4; // float
		constexpr auto InactiveStateInputComponent = 0x640; // UInputComponent*
		constexpr auto CurrentTouchInterface = 0x668; // UTouchInterface*
		constexpr auto SpectatorPawn = 0x6a0; // ASpectatorPawn*
		constexpr auto SpawnLocation = 0x6a8; // FVector
		constexpr auto LevelInputComponents = 0x6b8; // TMap<ULevel*, UInputComponent*>
		constexpr auto bIsLocalPlayerController = 0x71c; // bool
		constexpr auto SeamlessTravelCount = 0x71e; // uint16_t
		constexpr auto LastCompletedSeamlessTravelCount = 0x720; // uint16_t
		constexpr auto bInCinematicMode = 0x722; // bool
	}

	namespace n_UKrakenPlayerGrabbingBehaviourParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FKrakenPlayerGrabbingBehaviourParams
	}

	namespace n_UDevilsRoar_C { // : USeaId
		constexpr auto SeaName = 0x28; // FName
	}

	namespace n_UStandardRudderDynamicsDesc { // : UBaseRudderDynamicsDesc
		constexpr auto Parameters = 0x28; // FStandardRudderDynamicsParameters
		constexpr auto ShipSpeedToSteeringBoostCurve = 0x30; // UCurveFloat*
	}

	namespace n_AEnchantedSpyglass { // : ASpyglass
		constexpr auto EnchantedInventoryItem = 0x888; // UInventoryItemComponent*
		constexpr auto ConstellationVisibilityEventActor = 0x890; // AActor*
	}

	namespace n_UWashedUpMessageInABottleClueSiteData { // : UClueSiteData
		constexpr auto BottleItemType = 0x38; // UItemDesc*
		constexpr auto IslandNameToSpawnOn = 0x40; // FName
		constexpr auto IslandSpawnLocationReservationId = 0x48; // FGuid
		constexpr auto SpawnTransform = 0x60; // FTransform
		constexpr auto SinkIntoSandItems = 0x90; // TArray<UItemDesc*>
	}

	namespace n_UAthenaGameViewportClient { // : UGameViewportClient
		constexpr auto ViewportConsole = 0x38; // UConsole*
		constexpr auto DebugProperties = 0x40; // TArray<FDebugDisplayProperty>
		constexpr auto World = 0x80; // UWorld*
		constexpr auto GameInstance = 0x88; // UGameInstance*
	}

	namespace n_URecastFilter_UseDefaultArea { // : UNavigationQueryFilter
		constexpr auto Areas = 0x28; // TArray<FNavigationFilterArea>
		constexpr auto IncludeFlags = 0x38; // FNavigationFilterFlags
		constexpr auto ExcludeFlags = 0x3c; // FNavigationFilterFlags
	}

	namespace n_UWaitForCrewToCollectCollectorsChestPagesStepDesc { // : UMutateCollectorsChestStepDesc
		constexpr auto CollectingPlayer = 0x90; // FQuestVariablePlayerActor
	}

	namespace n_UVoiceChatComponent { // : USceneComponent
		constexpr auto Emitter = 0x2b8; // FWwiseEmitter
		constexpr auto MouthSocketNameOnCharacterMesh = 0x2d8; // FName
	}

	namespace n_UItemLifetimeManagerService { // : UObject
		constexpr auto CappedItemGroupsByIsland = 0x30; // TMap<FName, FCappedItemsByGroup>
		constexpr auto LifetimeDataAsset = 0x80; // UItemLifetimeManagerServiceDataAsset*
	}

	namespace n_ATestDelayedMeshCharacter { // : ACharacter
		constexpr auto Mesh = 0x448; // USkeletalMeshComponent*
		constexpr auto CharacterMovement = 0x450; // UCharacterMovementComponent*
		constexpr auto CapsuleComponent = 0x458; // UCapsuleComponent*
		constexpr auto BasedMovement = 0x460; // FBasedMovementInfo
		constexpr auto ReplicatedBasedMovement = 0x498; // FBasedMovementInfo
		constexpr auto BaseTranslationOffset = 0x4d0; // FVector
		constexpr auto BaseRotationOffset = 0x4e0; // FQuat
		constexpr auto ReplicatedMovementMode = 0x4f0; // char
		constexpr auto bInBaseReplication = 0x4f1; // bool
		constexpr auto CrouchedEyeHeight = 0x4f4; // float
		constexpr auto bIsCrouched = 0x4f8; // char : 1
		constexpr auto bPressedJump = 0x4f8; // char : 1
		constexpr auto bClientUpdating = 0x4f8; // char : 1
		constexpr auto bClientWasFalling = 0x4f8; // char : 1
		constexpr auto bClientResimulateRootMotion = 0x4f8; // char : 1
		constexpr auto bSimGravityDisabled = 0x4f8; // char : 1
		constexpr auto bServerMoveIgnoreRootMotion = 0x4f8; // char : 1
		constexpr auto JumpKeyHoldTime = 0x4fc; // float
		constexpr auto JumpMaxHoldTime = 0x500; // float
		constexpr auto OnReachedJumpApex = 0x508; // FScriptMulticastDelegate
		constexpr auto OnCharacterMovementUpdated = 0x528; // FScriptMulticastDelegate
		constexpr auto ClientRootMotionParams = 0x540; // FRootMotionMovementParams
		constexpr auto RootMotionRepMoves = 0x580; // TArray<FSimulatedRootMotionReplicatedMove>
		constexpr auto RepRootMotion = 0x590; // FRepRootMotionMontage
	}

	namespace n_AContinuousAnimatedMechanismAction { // : ABaseContinuousAnimatedMechanismAction
		constexpr auto MechanismActionComponent = 0xa20; // UMechanismActionComponent*
	}

	namespace n_UAnimNotify_SpawnCosmeticItem { // : UAnimNotify
		constexpr auto ItemSpawnClass = 0x38; // AActor*
		constexpr auto SpawnLocation = 0x40; // EWieldAnimationLocation
		constexpr auto CosmeticItemAnimationDataSet = 0x48; // UCosmeticItemAnimationSetDataAsset*
		constexpr auto SpawnHidden = 0x50; // bool
		constexpr auto SpawnForRole = 0x51; // bool
		constexpr auto SpawnRole = 0x52; // ENetRole
	}

	namespace n_UWwiseAudioSettings { // : UObject
		constexpr auto ReverbPresetSettings = 0xe8; // FWwiseAudioReverbPresets
		constexpr auto BinkSettings = 0x150; // FWwiseBinkSettings
		constexpr auto PersistentSoundBanks = 0x188; // TArray<FStringAssetReference>
		constexpr auto InitBank = 0x198; // FStringAssetReference
		constexpr auto WwiseSoundbanksRoot = 0x1a8; // FDirectoryPath
		constexpr auto WwiseIDsDatabase = 0x1b8; // FStringAssetReference
		constexpr auto WwiseStreamedFilesDirectory = 0x1c8; // FDirectoryPath
		constexpr auto AsyncIOPriorityMappings = 0x1d8; // TArray<FWwiseIOPriorityMappingConfig>
		constexpr auto TritonAcousticMapsDirectory = 0x1e8; // FDirectoryPath
		constexpr auto DefaultLanguage = 0x1f8; // FString
		constexpr auto SinkSharesetName = 0x208; // FString
		constexpr auto PauseEventStart = 0x218; // FStringAssetReference
		constexpr auto PauseEventRelease = 0x228; // FStringAssetReference
		constexpr auto StopAllEvent = 0x238; // FStringAssetReference
		constexpr auto NetworkRelationship = 0x248; // FWwiseNetworkRelationship
		constexpr auto AudioStateSettings = 0x260; // FWwiseAudioGameStateSettings
		constexpr auto WaapiInterpreterPort = 0x300; // uint32_t
		constexpr auto PauseEventStartInstance = 0x308; // UWwiseEvent*
		constexpr auto PauseEventReleaseInstance = 0x310; // UWwiseEvent*
		constexpr auto StopAllEventInstance = 0x318; // UWwiseEvent*
		constexpr auto AnimNotifyPoolInstance = 0x320; // UWwiseObjectPoolWrapper*
		constexpr auto EventsToPlayOnFrontendStartInstance = 0x368; // TArray<UWwiseEvent*>
		constexpr auto EventsToPlayOnFrontendEndInstance = 0x378; // TArray<UWwiseEvent*>
		constexpr auto EventsToPlayOnStartEngagementInstance = 0x388; // TArray<UWwiseEvent*>
		constexpr auto EventsToPlayOnEndEngagementInstance = 0x398; // TArray<UWwiseEvent*>
		constexpr auto EventsToPlayOnLoadingStartInstance = 0x3a8; // TArray<UWwiseEvent*>
		constexpr auto EventsToPlayOnLoadingEndInstance = 0x3b8; // TArray<UWwiseEvent*>
		constexpr auto EventsToPlayOnFrontEndOrLoadingStartInstance = 0x3c8; // TArray<UWwiseEvent*>
		constexpr auto EventsToPlayOnFrontEndOrLoadingEndInstance = 0x3d8; // TArray<UWwiseEvent*>
	}

	namespace n_ASpireShippingDrawDebugActorSphereCollection { // : AShippingDebugActorSphereCollection
		constexpr auto SpireList = 0x3e0; // TArray<TWeakObjectPtr<ASpireResource>>
	}

	namespace n_UBTTask_WaitBlackboardTime { // : UBTTask_Wait
		constexpr auto BlackboardKey = 0x68; // FBlackboardKeySelector
	}

	namespace n_UEndTurnCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_USirenStatuesSelectorConfiguration { // : UDataAsset
		constexpr auto Selector = 0x28; // USirenStatuesSelector*
	}

	namespace n_ALandmarkCapsule { // : ALandmark
		constexpr auto DefaultShape = 0x658; // UShapeComponent*
	}

	namespace n_UChainLightningDeveloperSettings { // : UDeveloperSettings
		constexpr auto ChainLightningVisualActorSettingsAsset = 0x38; // FStringAssetReference
	}

	namespace n_ASceneCapture2D { // : ASceneCapture
		constexpr auto CaptureComponent2D = 0x3d8; // USceneCaptureComponent2D*
		constexpr auto DrawFrustum = 0x3e0; // UDrawFrustumComponent*
	}

	namespace n_UButton { // : UContentWidget
		constexpr auto Style = 0x150; // USlateWidgetStyleAsset*
		constexpr auto WidgetStyle = 0x158; // FButtonStyle
		constexpr auto ColorAndOpacity = 0x400; // FLinearColor
		constexpr auto BackgroundColor = 0x410; // FLinearColor
		constexpr auto ClickMethod = 0x420; // EButtonClickMethod
		constexpr auto TouchMethod = 0x421; // EButtonTouchMethod
		constexpr auto IsFocusable = 0x422; // bool
		constexpr auto OnClicked = 0x428; // FScriptMulticastDelegate
		constexpr auto OnPressed = 0x438; // FScriptMulticastDelegate
		constexpr auto OnReleased = 0x448; // FScriptMulticastDelegate
	}

	namespace n_URenderToTextureSceneDetails { // : UObject
		constexpr auto ClassToSpawn = 0x28; // UObject*
		constexpr auto Resolution = 0x30; // FIntPoint
		constexpr auto World = 0x38; // UWorld*
		constexpr auto ParentWorld = 0x40; // TWeakObjectPtr<UWorld>
		constexpr auto SpawnedActor = 0x48; // TWeakObjectPtr<AActor>
		constexpr auto RenderTarget = 0x50; // UTextureRenderTarget2D*
	}

	namespace n_UCheckIsActorCriticalStepDesc { // : UTaleQuestStepDesc
		constexpr auto ActorToCheck = 0x80; // FQuestVariableActor
		constexpr auto IsCritical = 0x90; // FQuestVariableBool
	}

	namespace n_UMaterialExpressionMin { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto ConstA = 0xe0; // float
		constexpr auto ConstB = 0xe4; // float
	}

	namespace n_USoundNodeOscillator { // : USoundNode
		constexpr auto bModulateVolume = 0x38; // char : 1
		constexpr auto bModulatePitch = 0x38; // char : 1
		constexpr auto AmplitudeMin = 0x3c; // float
		constexpr auto AmplitudeMax = 0x40; // float
		constexpr auto FrequencyMin = 0x44; // float
		constexpr auto FrequencyMax = 0x48; // float
		constexpr auto OffsetMin = 0x4c; // float
		constexpr auto OffsetMax = 0x50; // float
		constexpr auto CenterMin = 0x54; // float
		constexpr auto CenterMax = 0x58; // float
	}

	namespace n_UEnvQueryNode { // : UObject
		constexpr auto VerNum = 0x28; // int32_t
	}

	namespace n_ADroppedPouchItemProxy { // : AFloatingItemProxy
		constexpr auto OnPouchOpenedSfx = 0x798; // UWwiseEvent*
		constexpr auto OpenPouchEmitter = 0x7a0; // FWwiseEmitter
		constexpr auto TrackedActorType = 0x7c0; // ETrackedActorType
		constexpr auto DitherComponent = 0x7c8; // UDitherComponent*
		constexpr auto FadeDuration = 0x7d0; // float
	}

	namespace n_URiddleTextPhraseDataAsset { // : UDataAsset
		constexpr auto Variants = 0x28; // TArray<FText>
	}

	namespace n_AFogBankManager { // : AActor
		constexpr auto FogBankManagerDataAsset = 0x3d0; // UFogBankManagerDataAsset*
	}

	namespace n_UCoralShieldAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto ShieldEffectRadius = 0xc8; // float
		constexpr auto DamageNeededToBreakShield = 0xcc; // float
		constexpr auto ShieldLifeTime = 0xd0; // float
		constexpr auto CoralShieldStatusEffect = 0xd8; // FStatus
		constexpr auto VulnerabilityToApplyToSelf = 0xf0; // UDamageableVulnerabilityLayer*
		constexpr auto DelayBeforeSFXPlays = 0xf8; // float
	}

	namespace n_UBTTask_SetFollowUpAbility { // : UBTTaskNode
		constexpr auto AIAbilityType = 0x60; // UAthenaAIAbilityType*
	}

	namespace n_UAddFogBankAvoidanceAreaStepDesc { // : UTaleQuestStepDesc
		constexpr auto Location = 0x80; // FQuestVariableVector
		constexpr auto Radius = 0x90; // FQuestVariableFloat
	}

	namespace n_UBTTask_SailShipBesideTarget { // : UBTTask_BlackboardBase
		constexpr auto TrackingNoiseGenerator = 0xa8; // FTrackingNoiseGenerator
	}

	namespace n_UParticleModuleMaterialBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UPhysicsConstraintTemplate { // : UObject
		constexpr auto JointName = 0x28; // FName
		constexpr auto ConstraintBone1 = 0x30; // FName
		constexpr auto ConstraintBone2 = 0x38; // FName
		constexpr auto Pos1 = 0x40; // FVector
		constexpr auto PriAxis1 = 0x4c; // FVector
		constexpr auto SecAxis1 = 0x58; // FVector
		constexpr auto Pos2 = 0x64; // FVector
		constexpr auto PriAxis2 = 0x70; // FVector
		constexpr auto SecAxis2 = 0x7c; // FVector
		constexpr auto bEnableProjection = 0x88; // char : 1
		constexpr auto ProjectionLinearTolerance = 0x8c; // float
		constexpr auto ProjectionAngularTolerance = 0x90; // float
		constexpr auto LinearXMotion = 0x94; // ELinearConstraintMotion
		constexpr auto LinearYMotion = 0x95; // ELinearConstraintMotion
		constexpr auto LinearZMotion = 0x96; // ELinearConstraintMotion
		constexpr auto LinearLimitSize = 0x98; // float
		constexpr auto bLinearLimitSoft = 0x9c; // char : 1
		constexpr auto LinearLimitStiffness = 0xa0; // float
		constexpr auto LinearLimitDamping = 0xa4; // float
		constexpr auto bLinearBreakable = 0xa8; // char : 1
		constexpr auto LinearBreakThreshold = 0xac; // float
		constexpr auto AngularSwing1Motion = 0xb0; // EAngularConstraintMotion
		constexpr auto AngularSwing2Motion = 0xb1; // EAngularConstraintMotion
		constexpr auto AngularTwistMotion = 0xb2; // EAngularConstraintMotion
		constexpr auto bSwingLimitSoft = 0xb4; // char : 1
		constexpr auto bTwistLimitSoft = 0xb4; // char : 1
		constexpr auto Swing1LimitAngle = 0xb8; // float
		constexpr auto Swing2LimitAngle = 0xbc; // float
		constexpr auto TwistLimitAngle = 0xc0; // float
		constexpr auto SwingLimitStiffness = 0xc4; // float
		constexpr auto SwingLimitDamping = 0xc8; // float
		constexpr auto TwistLimitStiffness = 0xcc; // float
		constexpr auto TwistLimitDamping = 0xd0; // float
		constexpr auto bAngularBreakable = 0xd4; // char : 1
		constexpr auto AngularBreakThreshold = 0xd8; // float
		constexpr auto DefaultInstance = 0xe0; // FConstraintInstance
	}

	namespace n_UControlWheelInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto IntentComponent = 0x280; // UIntentComponent*
		constexpr auto Wheel = 0x288; // AWheel*
	}

	namespace n_UPetEntitlementDesc { // : UPetEntitlementBaseDesc
		constexpr auto PetPartId = 0xd8; // FAIPartId
		constexpr auto RelatedPetDesc = 0xe0; // UPetDesc*
	}

	namespace n_UGameplayTagsManager { // : UObject
		constexpr auto GameplayTagTables = 0x140; // TArray<UDataTable*>
	}

	namespace n_UTaleQuestStartingBannerStepDesc { // : UTaleQuestStepDesc
		constexpr auto Header = 0x80; // FText
		constexpr auto Tag = 0xb8; // FName
	}

	namespace n_UWeightedGoldRewardsDataAsset { // : UDataAsset
		constexpr auto GoldRewards = 0x28; // TArray<FWeightedGoldReward>
	}

	namespace n_UKrakenAnimatedTentacleAnimationMappingDataAsset { // : UDataAsset
		constexpr auto Animations = 0x28; // TArray<FKrakenAnimatedTentacleMappedAnimation>
	}

	namespace n_ASpawnContextProviderZone { // : AActor
		constexpr auto SpawnContextIDs = 0x3d0; // TArray<FName>
		constexpr auto BoundingBox = 0x3e0; // UBoxComponent*
	}

	namespace n_UVoyageRecipesDebugMenuEntryGenerator { // : UDebugMenuEntryGenerator
		constexpr auto Regenerate = 0x28; // bool
		constexpr auto Recipes = 0x30; // TArray<FStringAssetReference>
		constexpr auto Proposals = 0x40; // TArray<FStringClassReference>
		constexpr auto DescAssets = 0x50; // TArray<FStringAssetReference>
		constexpr auto AssetNames = 0x60; // TArray<FString>
	}

	namespace n_UCrewVoyageParticipant { // : UObject
		constexpr auto PlayerState = 0xe8; // APlayerState*
	}

	namespace n_ASpawnAIWaveMechanismAction { // : AActor
		constexpr auto MechanismActionComponent = 0x3d0; // UMechanismActionComponent*
		constexpr auto ProgressiveWavesSpawnerTemplate = 0x3d8; // UAIProgressiveWavesSpawner*
		constexpr auto OnePlayerCrewSpawnerTemplateOverride = 0x3e0; // UAIProgressiveWavesSpawner*
		constexpr auto TwoPlayerCrewSpawnerTemplateOverride = 0x3e8; // UAIProgressiveWavesSpawner*
		constexpr auto ThreePlayerCrewSpawnerTemplateOverride = 0x3f0; // UAIProgressiveWavesSpawner*
		constexpr auto FourOrMorePlayerCrewSpawnerTemplateOverride = 0x3f8; // UAIProgressiveWavesSpawner*
		constexpr auto PerCrewAISpawnCooldownTimeInSeconds = 0x400; // int32_t
		constexpr auto GlobalCooldownInSeconds = 0x404; // int32_t
		constexpr auto SpawnRollChance = 0x408; // float
		constexpr auto ActorWithTargetAIRegion = 0x410; // AActor*
		constexpr auto ResetSpawnerDelay = 0x418; // float
		constexpr auto ProximityPlayerTracker = 0x4f8; // UAIProximityPlayerTracker*
		constexpr auto MusicZoneComponent = 0x500; // UAISpawnerMusicZoneComponent*
	}

	namespace n_UParticleModuleAcceleration { // : UParticleModuleAccelerationBase
		constexpr auto Acceleration = 0x58; // FRawDistributionVector
		constexpr auto AdditionalAcceleration = 0x90; // FRawDistributionVector [0x5]
		constexpr auto bUseGroupAAccelerationForAllGroups = 0x1a8; // char : 1
		constexpr auto bApplyOwnerScale = 0x1a8; // char : 1
	}

	namespace n_UCommandlet { // : UObject
		constexpr auto HelpDescription = 0x28; // FString
		constexpr auto HelpUsage = 0x38; // FString
		constexpr auto HelpWebLink = 0x48; // FString
		constexpr auto HelpParamNames = 0x58; // TArray<FString>
		constexpr auto HelpParamDescriptions = 0x68; // TArray<FString>
		constexpr auto IsServer = 0x78; // char : 1
		constexpr auto IsClient = 0x78; // char : 1
		constexpr auto IsEditor = 0x78; // char : 1
		constexpr auto LogToConsole = 0x78; // char : 1
		constexpr auto ShowErrorCount = 0x78; // char : 1
	}

	namespace n_UShantyItemDescToSlotRemappingDataAsset { // : UDataAsset
		constexpr auto Slots = 0x28; // TArray<UShantyItemDesc*>
	}

	namespace n_AOnlineBeaconHost { // : AOnlineBeacon
		constexpr auto ListenPort = 0x3f8; // int32_t
		constexpr auto ClientActors = 0x400; // TArray<AOnlineBeaconClient*>
	}

	namespace n_UInteractableToggleMechanismActionComponent { // : UMechanismActionComponent
		constexpr auto InactiveState = 0x158; // EInteractableState
		constexpr auto ActiveState = 0x159; // EInteractableState
		constexpr auto InteractableInterface = 0x160; // TScriptInterface<Class>
	}

	namespace n_ULeaderboardFlushCallbackProxy { // : UObject
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UCommodityDemandFrameworkSettings { // : UDeveloperSettings
		constexpr auto DemandRefreshFrequencyInSeconds = 0x38; // float
		constexpr auto DemandCollectionId = 0x3c; // FName
		constexpr auto CommodityPurchaseLockoutInGameDays = 0x44; // int32_t
		constexpr auto InGameHourWhenCommoditiesRestock = 0x48; // int32_t
		constexpr auto CommodityRedemptionTimeOutPeriodInDays = 0x50; // FGameTime
		constexpr auto NPCListAsset = 0x58; // FStringAssetReference
	}

	namespace n_UMechanismActionComponent { // : UActorComponent
		constexpr auto ActionType = 0xd8; // EMechanismActionType
		constexpr auto ActivationMode = 0xd9; // EMechanismActionActivationMode
		constexpr auto TriggerActors = 0xe0; // TArray<AActor*>
		constexpr auto OnMechanismTriggerRegisteredWithActionDelegate = 0xf0; // FScriptMulticastDelegate
		constexpr auto OnMechanismTriggerUnregisteredWithActionDelegate = 0x100; // FScriptMulticastDelegate
		constexpr auto OnMechanismActionCompletedDelegate = 0x110; // FScriptMulticastDelegate
		constexpr auto OnMechanismActionStateChangedDelegate = 0x120; // FScriptMulticastDelegate
		constexpr auto OnMechanismActionResetDelegate = 0x130; // FScriptMulticastDelegate
		constexpr auto ActionState = 0x150; // EMechanismActionState
	}

	namespace n_ASkeletalMeshFloatingItemProxy { // : AFloatingItemProxy
		constexpr auto PhysicsErrorCorrection = 0x630; // FRigidBodyErrorCorrection
		constexpr auto BaseComponent = 0x650; // UBoxComponent*
		constexpr auto MovementTimeStamp = 0x688; // FNetTimeStampCalculator
		constexpr auto TutorialOwner = 0x6f8; // AActor*
		constexpr auto IsTutorialProxy = 0x700; // bool
		constexpr auto ReplicatedPhysicsState = 0x708; // FReplicatedPhysicsState
		constexpr auto ForceKeepTickActive = 0x758; // bool
		constexpr auto CachedAutoAimCollisionChannel = 0x788; // ECollisionChannel
		constexpr auto CachedVehicleCollisionResponse = 0x789; // ECollisionResponse
	}

	namespace n_UItemSpawnTransformWithRandomQuantityDataAssset { // : UDataAsset
		constexpr auto ItemSpawnData = 0x28; // TArray<FItemSpawnTransformWithRandomQuantity>
	}

	namespace n_UAIInteractableComponent { // : UActorComponent
		constexpr auto Type = 0xd0; // UAIInteractableType*
		constexpr auto DetachOffsetFromOwner = 0xd8; // FVector
		constexpr auto CanHaveTarget = 0xe4; // bool
	}

	namespace n_UMaterialExpressionPower { // : UMaterialExpression
		constexpr auto Base = 0x70; // FExpressionInput
		constexpr auto Exponent = 0xa8; // FExpressionInput
		constexpr auto ConstExponent = 0xe0; // float
	}

	namespace n_UActorCoherentViewComponent { // : UCoherentUIGTComponent
		constexpr auto TargetPrimitiveName = 0x3e8; // FName
	}

	namespace n_UNamedPointsCollectionDataAsset { // : UDataAsset
		constexpr auto Groups = 0x28; // TArray<FNamedPointsCollectionGroup>
		constexpr auto AssetTags = 0x38; // TArray<ENamedPointCollectionSearchTag>
	}

	namespace n_AMockActorWithCharacterInteractionComponent { // : ACharacter
		constexpr auto CharacterInteractionComponent = 0x5e8; // UCharacterInteractionComponent*
	}

	namespace n_URiddleTextPhrasebookDataAsset { // : UDataAsset
		constexpr auto Phrases = 0x28; // TArray<FRiddleTextPhrasebookEntry>
	}

	namespace n_UFixedIntentComponent { // : UControllableIntentComponent
		constexpr auto Intent = 0x1a0; // float
	}

	namespace n_UFlamethrowerComponent { // : UCapsuleComponent
		constexpr auto DefaultStatusesToApplyOnOverlap = 0x5b0; // TArray<FStatus>
		constexpr auto OverrideStatusesToApplyOnOverlap = 0x5c0; // TArray<FFlamethrowerStatusOverride>
		constexpr auto DamageToApplyToWieldedItemsOnOverlap = 0x5d0; // float
		constexpr auto Animation = 0x5d8; // UMechanismAnimationCurve_Flamethrower*
		constexpr auto ParticleSystem = 0x5e0; // UParticleSystem*
		constexpr auto ParticleSystemRelativeRotation = 0x5e8; // FRotator
		constexpr auto AnimationEvents = 0x5f8; // FMechanismAnimationEventContainer
		constexpr auto CachedParticleSystem = 0x648; // UParticleSystemComponent*
		constexpr auto SimpleCollisionShape = 0x650; // UPrimitiveComponent*
		constexpr auto AnimatedMechanismInterface = 0x658; // TScriptInterface<Class>
		constexpr auto VirtualSceneComponentTransformInterface = 0x668; // TScriptInterface<Class>
	}

	namespace n_UClearSpawnProgressStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_AAthenaGameMode { // : AGameMode
		constexpr auto GhostShipPawnClass = 0x4e0; // APawn*
		constexpr auto ServerNetworkedEventsWhitelistDefinition = 0x4e8; // UNetworkedEventsWhitelistDefinition*
		constexpr auto GhostShipCoordinator = 0x688; // FGhostShipCoordinator
		constexpr auto StorageContainerRefresher = 0x8b8; // FStorageContainerRefresher
		constexpr auto RiddleQuestDescGeneratorData = 0x990; // URiddleQuestDescGeneratorData*
		constexpr auto RespawnTimer = 0x998; // float
		constexpr auto ContestRespawnTimer = 0x99c; // float
		constexpr auto StorageContainerRefreshInterval = 0x9a0; // float
		constexpr auto ContainerRefreshBatchSize = 0x9a4; // int32_t
	}

	namespace n_UMerchantQuestRequiredItemsDataAsset { // : UDataAsset
		constexpr auto RankEntries = 0x28; // TArray<FMerchantQuestRequiredItemsRankEntry>
	}

	namespace n_UParticleModuleTypeDataRibbon { // : UParticleModuleTypeDataBase
		constexpr auto MaxTessellationBetweenParticles = 0x50; // int32_t
		constexpr auto SheetsPerTrail = 0x54; // int32_t
		constexpr auto MaxTrailCount = 0x58; // int32_t
		constexpr auto MaxParticleInTrailCount = 0x5c; // int32_t
		constexpr auto bDeadTrailsOnDeactivate = 0x60; // char : 1
		constexpr auto bDeadTrailsOnSourceLoss = 0x60; // char : 1
		constexpr auto bClipSourceSegement = 0x60; // char : 1
		constexpr auto bEnablePreviousTangentRecalculation = 0x60; // char : 1
		constexpr auto bTangentRecalculationEveryFrame = 0x60; // char : 1
		constexpr auto bSpawnInitialParticle = 0x60; // char : 1
		constexpr auto RenderAxis = 0x64; // ETrailsRenderAxisOption
		constexpr auto TangentSpawningScalar = 0x68; // float
		constexpr auto bRenderGeometry = 0x6c; // char : 1
		constexpr auto bRenderSpawnPoints = 0x6c; // char : 1
		constexpr auto bRenderTangents = 0x6c; // char : 1
		constexpr auto bRenderTessellation = 0x6c; // char : 1
		constexpr auto TilingDistance = 0x70; // float
		constexpr auto DistanceTessellationStepSize = 0x74; // float
		constexpr auto bEnableTangentDiffInterpScale = 0x78; // char : 1
		constexpr auto TangentTessellationScalar = 0x7c; // float
	}

	namespace n_UColorTexture { // : UTexture
		constexpr auto Color = 0x138; // FLinearColor
	}

	namespace n_UTaleQuestUpdateCheckpointStepDesc { // : UTaleQuestStepDesc
		constexpr auto RewardIdToAward = 0x80; // FRewardId
		constexpr auto CampaignIdToRemove = 0x88; // FName
		constexpr auto Feature = 0x90; // FName
	}

	namespace n_USplashProbeDataAsset { // : UDataAsset
		constexpr auto Probes = 0x28; // TArray<FSplashProbe>
	}

	namespace n_UCompanyDataList { // : UDataAsset
		constexpr auto ClientCompanyData = 0x28; // TArray<UCompanyData*>
	}

	namespace n_UInterpTrackSound { // : UInterpTrackVectorBase
		constexpr auto Sounds = 0x90; // TArray<FSoundTrackKey>
		constexpr auto bPlayOnReverse = 0xa0; // char : 1
		constexpr auto bContinueSoundOnMatineeEnd = 0xa0; // char : 1
		constexpr auto bSuppressSubtitles = 0xa0; // char : 1
		constexpr auto bTreatAsDialogue = 0xa0; // char : 1
		constexpr auto bAttach = 0xa0; // char : 1
	}

	namespace n_UBoolBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UTaleQuestMakeStructStepDesc { // : UTaleQuestStructStepDescBase
		constexpr auto Struct = 0x80; // UScriptStruct*
		constexpr auto PropertyMappings = 0x88; // TMap<FName, FName>
	}

	namespace n_UParticleModuleAttractorPoint { // : UParticleModuleAttractorBase
		constexpr auto Position = 0x50; // FRawDistributionVector
		constexpr auto Range = 0x88; // FRawDistributionFloat
		constexpr auto Strength = 0xc0; // FRawDistributionFloat
		constexpr auto StrengthByDistance = 0xf8; // char : 1
		constexpr auto bAffectBaseVelocity = 0xf8; // char : 1
		constexpr auto bOverrideVelocity = 0xf8; // char : 1
		constexpr auto bUseWorldSpacePosition = 0xf8; // char : 1
		constexpr auto Positive_X = 0xf8; // char : 1
		constexpr auto Positive_Y = 0xf8; // char : 1
		constexpr auto Positive_Z = 0xf8; // char : 1
		constexpr auto Negative_X = 0xf8; // char : 1
		constexpr auto Negative_Y = 0xf9; // char : 1
		constexpr auto Negative_Z = 0xf9; // char : 1
	}

	namespace n_UDiscardTransientActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto Actor = 0x80; // FQuestVariableActor
		constexpr auto DiscardType = 0x90; // ETransientActorDiscardType
	}

	namespace n_ACollectableQuestObject { // : AInteractableObject
		constexpr auto InteractionPointRadius = 0x488; // float
		constexpr auto InteractionPointSocketName = 0x48c; // FName
		constexpr auto InteractableObjectPickupName = 0x498; // FText
		constexpr auto ThirdPersonMesh = 0x4d0; // USceneComponent*
	}

	namespace n_UFirstPersonAnimationInstance { // : UAthenaAnimationInstance
		constexpr auto SpineRotationTime = 0x29e8; // float
		constexpr auto RangedWeaponTargetingOffset = 0x29ec; // FVector
		constexpr auto RangedWeaponAlpha = 0x29f8; // float
		constexpr auto CameraParams = 0x29fc; // FAthenaAnimationCamera
		constexpr auto FirstPersonAnimatic = 0x2a18; // FAthenaAnimationFirstPersonAnimatic
		constexpr auto CameraAdditiveBlendPoseType = 0x2a98; // ECameraLookatAnimationType
		constexpr auto RowboatCameraAlpha = 0x2a9c; // float
		constexpr auto UseAdditiveHandOverlay = 0x2aa0; // char : 1
		constexpr auto CameraAttachmentTypeNotDefault = 0x2aa0; // char : 1
		constexpr auto BlendUpperBodyAndArmOverlay = 0x2aa0; // char : 1
		constexpr auto UseArmOverlayJumpContinuous = 0x2aa0; // char : 1
		constexpr auto IsSwimming = 0x2aa0; // char : 1
		constexpr auto IsControllableObjectActive = 0x2aa0; // char : 1
		constexpr auto UseSwimmingEquip = 0x2aa0; // char : 1
		constexpr auto EquipAnimationPlayRate = 0x2aa4; // float
		constexpr auto ActivateIK = 0x2aa8; // char : 1
		constexpr auto UseOneShotIntoAnimInContinuousUse = 0x2aa8; // char : 1
	}

	namespace n_UMaterialExpressionReflectionVectorWS { // : UMaterialExpression
		constexpr auto CustomWorldNormal = 0x70; // FExpressionInput
		constexpr auto bNormalizeCustomWorldNormal = 0xa8; // char : 1
	}

	namespace n_UAudioComponent { // : USceneComponent
		constexpr auto Sound = 0x2b0; // USoundBase*
		constexpr auto InstanceParameters = 0x2b8; // TArray<FAudioComponentParam>
		constexpr auto SoundClassOverride = 0x2c8; // USoundClass*
		constexpr auto bAutoDestroy = 0x2d0; // char : 1
		constexpr auto bStopWhenOwnerDestroyed = 0x2d0; // char : 1
		constexpr auto bShouldRemainActiveIfDropped = 0x2d0; // char : 1
		constexpr auto bAllowSpatialization = 0x2d0; // char : 1
		constexpr auto bOverrideAttenuation = 0x2d0; // char : 1
		constexpr auto bIsUISound = 0x2d0; // char : 1
		constexpr auto PitchModulationMin = 0x2d4; // float
		constexpr auto PitchModulationMax = 0x2d8; // float
		constexpr auto VolumeModulationMin = 0x2dc; // float
		constexpr auto VolumeModulationMax = 0x2e0; // float
		constexpr auto VolumeMultiplier = 0x2e4; // float
		constexpr auto PitchMultiplier = 0x2e8; // float
		constexpr auto HighFrequencyGainMultiplier = 0x2ec; // float
		constexpr auto AttenuationSettings = 0x2f0; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x2f8; // FAttenuationSettings
		constexpr auto OnAudioFinished = 0x3c0; // FScriptMulticastDelegate
		constexpr auto OnQueueSubtitles = 0x3e8; // DelegateProperty
	}

	namespace n_UHealthCustomizationService { // : UObject
		constexpr auto World = 0x30; // UWorld*
	}

	namespace n_AAINoiseFireInstigator { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UBTDecorator_ActorWieldedItemClass { // : UBTDecorator_BlackboardBase
		constexpr auto Interval = 0x90; // float
		constexpr auto ItemClassToTest = 0x98; // UClass*
	}

	namespace n_UKnockdownElevatorAction { // : UElevatorActionBase
		constexpr auto HardPhaseHeight = 0x28; // float
		constexpr auto SoftPhaseHeight = 0x2c; // float
		constexpr auto DropDistance = 0x30; // float
		constexpr auto StartKnockdownEvent = 0x38; // UWwiseEvent*
		constexpr auto EndKnockdownEvent = 0x40; // UWwiseEvent*
	}

	namespace n_AAmbientWaterSpawnerManager { // : AActor
		constexpr auto Root = 0x3e0; // USceneComponent*
		constexpr auto AthenaAISettings = 0x3e8; // UAthenaAISettings*
		constexpr auto AISpawnBlockingContextNames = 0x3f0; // TArray<FName>
		constexpr auto SharkPerPlayerSpawnerTemplate = 0x400; // UAIPerPlayerSpawner*
		constexpr auto SirenPerPlayerSpawnerTemplate = 0x408; // UAIPerPlayerSpawner*
		constexpr auto SirenEncounterRegionRadius = 0x410; // float
		constexpr auto SirenEncounterShutdownTime = 0x414; // float
		constexpr auto InitialSirenSpawningWeightedTimeRange = 0x418; // FWeightedProbabilityRangeOfRanges
		constexpr auto UnsuccessfulSirenSpawningWeightedTimeRange = 0x448; // FWeightedProbabilityRangeOfRanges
		constexpr auto SuccessfulSirenSpawningWeightedTimeRange = 0x478; // FWeightedProbabilityRangeOfRanges
		constexpr auto SharkEncounterSpawnBlockingData = 0x4a8; // FChanceForSharksToBlockSirenEncounterData
		constexpr auto PerDepthSpawnChances = 0x4b8; // TArray<FPerDepthSpawnChance>
		constexpr auto SharkPerPlayerSpawner = 0x4c8; // UAIPerPlayerSpawner*
		constexpr auto PlayersInWater = 0x600; // TArray<FPlayerInWaterData>
		constexpr auto SirenEncounters = 0x610; // TArray<FSirenEncounterData>
	}

	namespace n_UStatusResponseHealthChangeOverTime { // : UStatusResponse
		constexpr auto HealthChangePerSecond = 0x30; // float
		constexpr auto HealthChangedReason = 0x34; // EHealthChangedReason
	}

	namespace n_UDebugCreateAndPlayNpcAnimationStepDesc { // : UTaleQuestStepDesc
		constexpr auto NpcToSpawn = 0x80; // AActor*
		constexpr auto SpawnLocation = 0x88; // FStringAssetReference
		constexpr auto PlaceableReaction = 0x98; // FStringAssetReference
		constexpr auto AnimationParameters = 0xa8; // UPlayNpcAnimationResource*
	}

	namespace n_UTaleQuestLanternServiceDesc { // : UTaleQuestToolServiceDesc
		constexpr auto LanternDesc = 0x30; // UItemDesc*
	}

	namespace n_AAggressiveGhostShipAnchorDrop { // : AActor
		constexpr auto StartShockwaveEvent = 0x3d8; // FScriptMulticastDelegate
	}

	namespace n_UPreviewCharacterAnimationInstance { // : UCharacterAnimationInstance
		constexpr auto ActiveMontage = 0x660; // UAnimMontage*
	}

	namespace n_APickupActorMock { // : ACharacter
		constexpr auto MockWieldableItem = 0x630; // TScriptInterface<Class>
	}

	namespace n_UTritonComponent { // : USceneComponent
		constexpr auto TritonMapAsset = 0x2b0; // UTritonAcousticMap*
		constexpr auto TritonEffectRadius = 0x2b8; // float
	}

	namespace n_USeatStat_IslandVolcanoActive { // : USeatStat
		constexpr auto VolcanoIslandName = 0x48; // FName
	}

	namespace n_ULightmassPrimitiveSettingsObject { // : UObject
		constexpr auto LightmassSettings = 0x28; // FLightmassPrimitiveSettings
	}

	namespace n_UPetHangoutSpotsDataAsset { // : UDataAsset
		constexpr auto HangoutSpotParams = 0x28; // TArray<FHangoutSpotParams>
	}

	namespace n_UTaleRegisterSpireStepDesc { // : UTaleQuestStepDesc
		constexpr auto SelectionOriginPoint = 0x80; // FQuestVariableVector
		constexpr auto PlayerExclusionSelectionRadius = 0x90; // FQuestVariableFloat
		constexpr auto AllocatedSpireHandle = 0xa0; // FQuestVariableTaleResourceHandle
		constexpr auto AllocatedSpireLocation = 0xb0; // FQuestVariableVector
	}

	namespace n_UGrantPagesStepFromBundleDesc { // : UGrantPagesStepDesc
		constexpr auto Bundle = 0x80; // FQuestVariablePageBundle
	}

	namespace n_UMovieScene3DPathSection { // : UMovieScene3DConstraintSection
		constexpr auto TimingCurve = 0xa8; // FRichCurve
		constexpr auto FrontAxisEnum = 0x120; // MovieScene3DPathSection_Axis
		constexpr auto UpAxisEnum = 0x121; // MovieScene3DPathSection_Axis
		constexpr auto bFollow = 0x124; // char : 1
		constexpr auto bReverse = 0x124; // char : 1
		constexpr auto bForceUpright = 0x124; // char : 1
	}

	namespace n_UAggressiveGhostShipRewardsDataAsset { // : UDataAsset
		constexpr auto CaptainRewards = 0x28; // FAggressiveGhostShipRewardData
		constexpr auto FormationLeaderRewards = 0x40; // FAggressiveGhostShipRewardData
		constexpr auto GruntRewards = 0x58; // FAggressiveGhostShipRewardData
		constexpr auto RewardMarker = 0x70; // AShortRangeMarker*
	}

	namespace n_UNamedInterfaces { // : UObject
		constexpr auto NamedInterfaces = 0x28; // TArray<FNamedInterface>
		constexpr auto NamedInterfaceDefs = 0x38; // TArray<FNamedInterfaceDef>
	}

	namespace n_USeaId { // : UObject
		constexpr auto SeaName = 0x28; // FName
	}

	namespace n_UCrateFillerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AAthenaWaterEmissionVolume { // : AWaterEmissionVolume
		constexpr auto WaterEmissionVolumeComponent = 0x3d0; // UWaterEmissionVolumeComponent*
	}

	namespace n_UShipSinkingParametersDataAsset { // : UDataAsset
		constexpr auto SinkingParameters = 0x28; // FSinkingShipParams
		constexpr auto SinkingBuoyancySettings = 0x60; // FBuoyancySampleMovement
	}

	namespace n_UNPCOnSurfaceCannonManagerDataAsset { // : UDataAsset
		constexpr auto CannonLocationsGroupName = 0x28; // FName
		constexpr auto GoStraightToCannonIfPossible = 0x30; // bool
		constexpr auto StayOnCannonEvenWhenThereAreNoTargets = 0x31; // bool
		constexpr auto MinTimeInFallbackLocation = 0x38; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeOnCannonBeforeStartAiming = 0x68; // float
		constexpr auto TimeBetweenCannonChangeLocationCheck = 0x6c; // float
		constexpr auto MinTimeOnCannon = 0x70; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeBetweenCannonBeingUsedChecks = 0xa0; // float
		constexpr auto TimeBetweenTargetUpdates = 0xa4; // float
		constexpr auto TimeBetweenCannonMoveUpdates = 0xa8; // float
		constexpr auto TimeToWaitForCannonToAimBeforeTryingToFireAgain = 0xac; // float
		constexpr auto CannonPitchYawAimTolerenceHalfAngle = 0xb0; // float
		constexpr auto NearMissDistanceInMetres = 0xb8; // FWeightedProbabilityRangeOfRanges
		constexpr auto DefaultCannonballItemDesc = 0xe8; // UItemDesc*
		constexpr auto AnimationData = 0xf0; // UClass*
		constexpr auto NearbyEncountersDistanceInMetres = 0x110; // float
		constexpr auto FireCannonMontageId = 0x114; // FCustomAnimationMontageId
	}

	namespace n_UGarbageCollectionSettings { // : UDeveloperSettings
		constexpr auto TimeBetweenPurgingPendingKillObjects = 0x38; // float
		constexpr auto FlushStreamingOnGC = 0x3c; // char : 1
		constexpr auto AllowParallelGC = 0x3c; // char : 1
		constexpr auto CreateGCClusters = 0x3c; // char : 1
		constexpr auto MergeGCClusters = 0x3c; // char : 1
		constexpr auto NumRetriesBeforeForcingGC = 0x40; // int32_t
		constexpr auto MaxObjectsNotConsideredByGC = 0x44; // int32_t
		constexpr auto SizeOfPermanentObjectPool = 0x48; // int32_t
		constexpr auto MaxObjectsInGame = 0x4c; // int32_t
		constexpr auto MaxObjectsInEditor = 0x50; // int32_t
	}

	namespace n_UMicroTransactionBase { // : UPlatformInterfaceBase
		constexpr auto AvailableProducts = 0x38; // TArray<FPurchaseInfo>
		constexpr auto LastError = 0x48; // FString
		constexpr auto LastErrorSolution = 0x58; // FString
	}

	namespace n_UAIWaveSpawner { // : UAISpawner
		constexpr auto SpawnedWave = 0x430; // FAISpawnerWave
		constexpr auto MinRespawnTime = 0x530; // float
		constexpr auto MaxRespawnTime = 0x534; // float
	}

	namespace n_ADeferredNameplateAttitudeTestActor { // : APawn
		constexpr auto bUseControllerRotationPitch = 0x3d8; // char : 1
		constexpr auto bUseControllerRotationYaw = 0x3d8; // char : 1
		constexpr auto bUseControllerRotationRoll = 0x3d8; // char : 1
		constexpr auto bCanAffectNavigationGeneration = 0x3d8; // char : 1
		constexpr auto BaseEyeHeight = 0x3dc; // float
		constexpr auto AutoPossessPlayer = 0x3e0; // EAutoReceiveInput
		constexpr auto AutoPossessAI = 0x3e1; // EAutoPossessAI
		constexpr auto AIControllerClass = 0x3e8; // AController*
		constexpr auto PlayerState = 0x3f0; // APlayerState*
		constexpr auto RemoteViewPitch = 0x3f8; // char
		constexpr auto LastHitBy = 0x400; // AController*
		constexpr auto Controller = 0x408; // AController*
		constexpr auto ControlInputVector = 0x428; // FVector
		constexpr auto LastControlInputVector = 0x434; // FVector
	}

	namespace n_UNPCDialogOptionShop { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto ShopDesc = 0xb8; // UShopDesc*
		constexpr auto Interactor = 0xc0; // AController*
	}

	namespace n_UTallTaleIslandEventType { // : UIslandEventType
		constexpr auto IslandIcons = 0x28; // FIslandEventIcons
		constexpr auto HeaderIcons = 0x38; // FIslandEventIcons
	}

	namespace n_UMaterialExpressionGIReplace { // : UMaterialExpression
		constexpr auto Default = 0x70; // FExpressionInput
		constexpr auto StaticIndirect = 0xa8; // FExpressionInput
		constexpr auto DynamicIndirect = 0xe0; // FExpressionInput
	}

	namespace n_UCoralShieldVFXComponent { // : UActorComponent
		constexpr auto VFXAsset = 0xc8; // UParticleSystem*
		constexpr auto VfxSocketName = 0xd0; // FName
		constexpr auto SpawnedVFXSystem = 0xd8; // UParticleSystemComponent*
		constexpr auto CurrentCoralShieldRole = 0xe0; // ECoralShieldVFXRole
		constexpr auto OffToOnCurve = 0xe8; // UCurveFloat*
		constexpr auto OffToOnDuration = 0xf0; // float
		constexpr auto OnToOffCurve = 0xf8; // UCurveFloat*
		constexpr auto OnToOffDuration = 0x100; // float
		constexpr auto OffToOnParamOverrideName = 0x104; // FName
		constexpr auto OnToOffParamOverrideName = 0x10c; // FName
		constexpr auto ReceiverMeshComponentName = 0x114; // FName
		constexpr auto CasterMeshComponentName = 0x11c; // FName
		constexpr auto OverriddenMaterialsForReceive = 0x128; // TArray<UMaterialInstanceDynamic*>
		constexpr auto OverriddenMaterialsForCast = 0x138; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UCoherentToWwiseEventComponent { // : UActorComponent
		constexpr auto UIAudioCuesTableLocation = 0xc8; // FStringAssetReference
		constexpr auto UIAudioCuesAsset = 0xd8; // UCoherentToWwiseEventDataAsset*
		constexpr auto AudioGameStateGroup = 0xe0; // FName
		constexpr auto AudioGameStateIngame = 0xe8; // FName
		constexpr auto AudioGameStateInMenu = 0xf0; // FName
		constexpr auto AudioGameStateLoading = 0xf8; // FName
		constexpr auto AudioGameStateInFrontEnd = 0x100; // FName
	}

	namespace n_UGenerateDigLocationInRadiusStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAsyncLoadoutRepairComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMysteriousNoteSettings { // : UObject
		constexpr auto LookAheadInMinutes = 0x28; // int32_t
		constexpr auto RequestTimeout = 0x2c; // float
		constexpr auto MysteriousNotesCompletionStringsAsset = 0x30; // FStringAssetReference
		constexpr auto WieldableNoteDataAsset = 0x40; // FStringAssetReference
		constexpr auto Image = 0x50; // FStringAssetReference
		constexpr auto NotificationBackground = 0x60; // FStringAssetReference
	}

	namespace n_UBTTask_SpawnAmmoItemForAI { // : UBTTask_SpawnAndWieldItem
		constexpr auto ItemDesc = 0x68; // UItemDesc*
	}

	namespace n_UBTTask_SetBlackboardFloatValue { // : UBTTask_BlackboardBase
		constexpr auto FloatValue = 0x88; // FAIDataProviderFloatValue
	}

	namespace n_UCustomClientValidityCheckCallback { // : UObject
		constexpr auto ShouldPassClientValidation = 0x28; // bool
	}

	namespace n_UBTService_RunLoopingCustomAnimation { // : UBTService
		constexpr auto UseFixedLoopingCustomAnimationName = 0x70; // bool
		constexpr auto FixedLoopingCustomAnimationName = 0x74; // FName
		constexpr auto LoopingCustomAnimationNameKey = 0x80; // FBlackboardKeySelector
		constexpr auto GetAnimationDurations = 0xa8; // bool
		constexpr auto IntoAnimationEffectTime = 0xb0; // FBlackboardKeySelector
		constexpr auto IntoAnimationDuration = 0xd8; // FBlackboardKeySelector
		constexpr auto OutOfUndockTime = 0x100; // FBlackboardKeySelector
		constexpr auto OutOfAnimationDuration = 0x128; // FBlackboardKeySelector
		constexpr auto AlternateOutOfAnimationIndex = 0x150; // FBlackboardKeySelector
	}

	namespace n_UTaleQuestCargoRunContract { // : UObject
		constexpr auto OnCompleted = 0x38; // FScriptMulticastDelegate
		constexpr auto OnDelivered = 0x48; // FScriptMulticastDelegate
		constexpr auto OnCollected = 0x58; // FScriptMulticastDelegate
		constexpr auto ItemsToCollect = 0x68; // TArray<FTaleQuestCargoRunContractItem>
		constexpr auto DeliverToNPC = 0x88; // AActor*
		constexpr auto CollectFromNPC = 0x90; // AActor*
	}

	namespace n_USoundWaveProcedural { // : USoundWave
		constexpr auto CompressionQuality = 0x50; // int32_t
		constexpr auto bLooping = 0x54; // char : 1
		constexpr auto bStreaming = 0x54; // char : 1
		constexpr auto StreamingPriority = 0x58; // int32_t
		constexpr auto bMature = 0x5c; // char : 1
		constexpr auto bManualWordWrap = 0x5c; // char : 1
		constexpr auto bSingleLine = 0x5c; // char : 1
		constexpr auto SoundGroup = 0x60; // ESoundGroup
		constexpr auto SpokenText = 0x68; // FString
		constexpr auto Volume = 0x78; // float
		constexpr auto Pitch = 0x7c; // float
		constexpr auto NumChannels = 0x80; // int32_t
		constexpr auto SampleRate = 0x84; // int32_t
		constexpr auto RawPCMDataSize = 0x88; // int32_t
		constexpr auto Subtitles = 0x90; // TArray<FSubtitleCue>
		constexpr auto LocalizedSubtitles = 0xa0; // TArray<FLocalizedSubtitle>
	}

	namespace n_UBTDecorator_BaseConditional { // : UBTDecorator
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UBlueprintMechanismStepBase { // : UBlueprintStepBase
		constexpr auto BeginMode = 0x28; // ETaleQuestStepBeginMode
		constexpr auto Desc = 0x30; // UTaleQuestBlueprintStepDesc*
	}

	namespace n_UTaleQuestSelectTradeRouteStepDesc { // : UTaleQuestStepDesc
		constexpr auto NumSelectFromClosestIslands = 0x80; // int32_t
		constexpr auto SelectionOriginPointVar = 0x88; // FQuestVariableVector
		constexpr auto TradeRouteDifficulty = 0x98; // FQuestVariableInt
		constexpr auto TradeRoute = 0xa8; // FQuestVariableTradeRouteData
		constexpr auto AllocatedTradeRouteHandleVar = 0xb8; // FQuestVariableTaleResourceHandle
	}

	namespace n_UTextureSwitch { // : UTextureProxy
		constexpr auto bDuplicated = 0x1c0; // bool
		constexpr auto DefaultParameters = 0x1c8; // FTextureSwitchParameters
	}

	namespace n_UConditionalNPCDialogServiceSettingsAsset { // : UDataAsset
		constexpr auto NPCDialogOverrides = 0x28; // TArray<FNPCDialogOverrideTypeWithConditionalsUnit>
	}

	namespace n_UGameplayEffect { // : UObject
		constexpr auto DurationPolicy = 0x30; // EGameplayEffectDurationType
		constexpr auto DurationMagnitude = 0x38; // FGameplayEffectModifierMagnitude
		constexpr auto Period = 0x1a8; // FScalableFloat
		constexpr auto bExecutePeriodicEffectOnApplication = 0x1c8; // bool
		constexpr auto Modifiers = 0x1d0; // TArray<FGameplayModifierInfo>
		constexpr auto Executions = 0x1e0; // TArray<FGameplayEffectExecutionDefinition>
		constexpr auto ChanceToApplyToTarget = 0x1f0; // FScalableFloat
		constexpr auto TargetEffectClasses = 0x210; // TArray<UGameplayEffect*>
		constexpr auto TargetEffects = 0x220; // TArray<UGameplayEffect*>
		constexpr auto OverflowEffects = 0x230; // TArray<UGameplayEffect*>
		constexpr auto bDenyOverflowApplication = 0x240; // bool
		constexpr auto bClearStackOnOverflow = 0x241; // bool
		constexpr auto PrematureExpirationEffectClasses = 0x248; // TArray<UGameplayEffect*>
		constexpr auto RoutineExpirationEffectClasses = 0x258; // TArray<UGameplayEffect*>
		constexpr auto bRequireModifierSuccessToTriggerCues = 0x268; // bool
		constexpr auto GameplayCues = 0x270; // TArray<FGameplayEffectCue>
		constexpr auto UIData = 0x280; // UGameplayEffectUIData*
		constexpr auto InheritableGameplayEffectTags = 0x288; // FInheritedTagContainer
		constexpr auto GameplayEffectTags = 0x300; // FGameplayTagContainer
		constexpr auto InheritableOwnedTagsContainer = 0x328; // FInheritedTagContainer
		constexpr auto OwnedTagsContainer = 0x3a0; // FGameplayTagContainer
		constexpr auto OngoingTagRequirements = 0x3c8; // FGameplayTagRequirements
		constexpr auto ApplicationTagRequirements = 0x418; // FGameplayTagRequirements
		constexpr auto RemoveGameplayEffectsWithTags = 0x468; // FInheritedTagContainer
		constexpr auto ClearTagsContainer = 0x4e0; // FGameplayTagContainer
		constexpr auto GrantedApplicationImmunityTags = 0x508; // FGameplayTagRequirements
		constexpr auto StackingType = 0x558; // EGameplayEffectStackingType
		constexpr auto StackLimitCount = 0x55c; // int32_t
		constexpr auto StackDurationRefreshPolicy = 0x560; // EGameplayEffectStackingDurationPolicy
		constexpr auto StackPeriodResetPolicy = 0x561; // EGameplayEffectStackingPeriodPolicy
		constexpr auto GrantedAbilities = 0x568; // TArray<FGameplayAbilitySpecDef>
	}

	namespace n_ADoor { // : AInteractableBase
		constexpr auto AmountDoorOpens = 0x400; // float
		constexpr auto DoorOpeningSpeed = 0x404; // float
		constexpr auto DoorClosingSpeed = 0x408; // float
		constexpr auto Root = 0x410; // USceneComponent*
		constexpr auto DoorMesh = 0x418; // UStaticMeshComponent*
		constexpr auto LandmarkReactionsWhenDoorOpens = 0x420; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto LandmarkReactionsWhenDoorCloses = 0x430; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto LandmarkReactionPlayer = 0x440; // ALandmarkReactionPlayer*
		constexpr auto InteractionRegion = 0x448; // UInteractableComponent*
	}

	namespace n_ACoordinatedCutsceneTrigger { // : AActor
		constexpr auto Root = 0x3d8; // USceneComponent*
		constexpr auto CutsceneName = 0x3e0; // FName
		constexpr auto ActivationInitiallyEnabled = 0x3e8; // bool
		constexpr auto AllowInfiniteNumberOfReactivations = 0x3e9; // bool
		constexpr auto SpecificNumberOfReactivationsAllowed = 0x3ec; // int32_t
		constexpr auto ReattemptActivationAfterConflictingCutsceneFinishes = 0x3f0; // bool
		constexpr auto CutsceneStartDelayWhenReattemptingActivation = 0x3f4; // FFloatInterval
		constexpr auto StateChangeCoordination = 0x400; // TArray<FStateChangeCoordination>
		constexpr auto OnCutsceneTriggerStateChangedCallback = 0x410; // FScriptMulticastDelegate
		constexpr auto OnCutsceneTriggerActivationFailedCallback = 0x420; // FScriptMulticastDelegate
		constexpr auto EditorOnlyIcon = 0x4f0; // UBillboardComponent*
		constexpr auto EditorOnlyCutsceneNameDisplay = 0x4f8; // UTextRenderComponent*
		constexpr auto AllEditingPreferences = 0x500; // FCutsceneTriggerEditorOnlyData
	}

	namespace n_UBTDecorator_IsForcingHangout { // : UBTDecorator_BaseConditional
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UProvokeHitReactionDesc { // : UTaleQuestStepDesc
		constexpr auto ActorToProvoke = 0x80; // FQuestVariableActor
		constexpr auto DamageType = 0x90; // UDamagerType*
		constexpr auto DamageAmount = 0x98; // float
		constexpr auto DamageReason = 0x9c; // EHealthChangedReason
	}

	namespace n_ASailManipulator { // : AControllablePulley
		constexpr auto RopeVisuals = 0x518; // FRopeVisualParams
		constexpr auto RopeLength = 0x524; // float
		constexpr auto BaseMeshComponent = 0x528; // UStaticMeshComponent*
		constexpr auto TopMeshComponent = 0x530; // UStaticMeshComponent*
		constexpr auto CurseIntentComponent = 0x538; // UFixedIntentComponent*
		constexpr auto ManipulatorAudioPool = 0x540; // UWwiseObjectPoolWrapper*
		constexpr auto MastSocketId = 0x548; // FSocketId
		constexpr auto AudioParams = 0x568; // USailManipulatorAudioParams*
		constexpr auto MastSocketSceneComponent = 0x570; // USceneComponent*
		constexpr auto AudioEmitter = 0x578; // FWwiseEmitter
		constexpr auto BoundMast = 0x798; // AMast*
		constexpr auto PendingBoundMast = 0x7a0; // AMast*
		constexpr auto Locked = 0x7a8; // bool
		constexpr auto TopMeshInstanceComponent = 0x7b0; // UMobileInstancedStaticMeshComponent*
	}

	namespace n_UShipFireDamageParamsDataAsset { // : UDataAsset
		constexpr auto FireDamageParams = 0x28; // FShipFireDamageParams
	}

	namespace n_ANonStorableRewardableItemInfo { // : ARewardableItemInfo
		constexpr auto RewardId = 0x500; // FRewardId
		constexpr auto Type = 0x508; // EBootyTypes
		constexpr auto Rarity = 0x50c; // FName
		constexpr auto HandInStats = 0x518; // TArray<FPlayerStat>
		constexpr auto LegendHandInStats = 0x528; // TArray<FPlayerStat>
		constexpr auto PopUpMessageDesc = 0x538; // UPopUpMessageDesc*
		constexpr auto PopUpAudioOverrides = 0x540; // UPopUpAudioDesc*
		constexpr auto Id = 0x548; // FGuid
	}

	namespace n_UCapstanDescAsset { // : UShipPartDescAsset
		constexpr auto CapstanDesc = 0x28; // FCapstanDesc
	}

	namespace n_UWorldMarkerManagerComponent { // : UActorComponent
		constexpr auto MarkerVariants = 0xd0; // TArray<FMarkerVariantDesc>
		constexpr auto MarkerDataObjects = 0xe0; // TArray<UBaseWorldMarker*>
		constexpr auto ClientMarkerRepresentations = 0xf0; // TArray<FClientMarkerRepresentation>
	}

	namespace n_APressurePlateMechanismProgressTriggerProxy { // : AMechanismElementProxy
		constexpr auto ProgressionAmount = 0x3f0; // float
		constexpr auto AllowedInteractableTypes = 0x3f8; // TArray<FAllowedInteractableTypes>
	}

	namespace n_UWaitForItemPickupStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UPlaneReflectionCaptureComponent { // : UReflectionCaptureComponent
		constexpr auto InfluenceRadiusScale = 0x340; // float
		constexpr auto PreviewInfluenceRadius = 0x348; // UDrawSphereComponent*
		constexpr auto PreviewCaptureBox = 0x350; // UBoxComponent*
	}

	namespace n_UMaterialExpressionDDY { // : UMaterialExpression
		constexpr auto Value = 0x70; // FExpressionInput
	}

	namespace n_UIsWearingClothingStatConditional { // : UStatCondition
		constexpr auto Clothes = 0x28; // TArray<UClothingDesc*>
		constexpr auto MinimumRequiredItems = 0x38; // int32_t
	}

	namespace n_UTaleQuestFireEventStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UExistingToPhasedNPCIndexAssetMap { // : UDataAsset
		constexpr auto NPCIndexMappings = 0x28; // TArray<FExistingNPCToPhasedNPC>
	}

	namespace n_UTaleQuestAddLocationMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ATether { // : AActor
		constexpr auto TetherPositionAnchorComponent = 0x4c8; // USceneComponent*
		constexpr auto SourcePhysicsHandle = 0x4d0; // USphereComponent*
		constexpr auto TargetPhysicsHandle = 0x4d8; // USphereComponent*
		constexpr auto JointComponent = 0x4e0; // UDistanceJointComponent*
		constexpr auto SourceActor = 0x4e8; // AActor*
		constexpr auto TargetActor = 0x4f0; // AActor*
		constexpr auto SlackCm = 0x4f8; // float
		constexpr auto MaxLengthWhenGrowing = 0x4fc; // float
		constexpr auto HasAttached = 0x508; // bool
		constexpr auto HasSourceActor = 0x509; // bool
		constexpr auto HasTargetActor = 0x50a; // bool
		constexpr auto IsSlackEnabled = 0x50b; // bool
		constexpr auto CurrentTetherMode = 0x50c; // ETetherConstrainMode
	}

	namespace n_ATestStaticWieldableInventoryItem { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x790; // UInventoryItemComponent*
	}

	namespace n_UDistributionFloatConstantCurve { // : UDistributionFloat
		constexpr auto ConstantCurve = 0x38; // FInterpCurveFloat
	}

	namespace n_UMaterialExpressionConstant2Vector { // : UMaterialExpression
		constexpr auto R = 0x70; // float
		constexpr auto G = 0x74; // float
	}

	namespace n_ASwingMechanismAction { // : APivotAnimatedMechanismAction
		constexpr auto MechanismInteractionComponent = 0x610; // UMechanismInteractionComponent*
		constexpr auto MaxAngle = 0x618; // float
		constexpr auto MinAngle = 0x61c; // float
		constexpr auto Axis = 0x620; // EAxis
		constexpr auto Damage = 0x624; // float
		constexpr auto DamageReason = 0x628; // EHealthChangedReason
		constexpr auto CordChildren = 0x630; // TArray<USwingMechanismCordRenderComponent*>
		constexpr auto MaterialAnimations = 0x640; // TArray<FSwingMechanismMaterialAnimationContext>
	}

	namespace n_UMovieSceneAkAudioRTPCTrack { // : UMovieSceneAkTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
		constexpr auto bIsAMasterTrack = 0x98; // char : 1
	}

	namespace n_URetractorComponent { // : UActorComponent
		constexpr auto AttachedRetractable = 0xd0; // TScriptInterface<Class>
		constexpr auto RetractDestinationComponent = 0x110; // USceneComponent*
		constexpr auto RetractingComponent = 0x118; // USceneComponent*
	}

	namespace n_ACrewShipManifest { // : AActor
		constexpr auto CommodityPurchases = 0x3e8; // TArray<FCommodityTrackingModel>
		constexpr auto CommodityRedemptions = 0x3f8; // TArray<FCommodityRedemptionTrackingModel>
		constexpr auto NPCIdList = 0x410; // UNPCIdAsset*
		constexpr auto VoyageSelectionVoteData = 0x498; // FVoteSessionData
		constexpr auto VoyageCancelVoteData = 0x500; // FVoteSessionData
		constexpr auto TaleSelectionVoteData = 0x568; // FVoteSessionData
		constexpr auto TaleCancelVoteData = 0x5d0; // FVoteSessionData
		constexpr auto AssociatedShipSize = 0x6f8; // UShipSize*
		constexpr auto AssociatedCrew = 0x700; // FGuid
		constexpr auto ProposedVoyages = 0x710; // TArray<FProposedVoyageEntry>
		constexpr auto CurrentActiveVoyage = 0x730; // UVoyageProposalDesc*
		constexpr auto CrewBeckonTags = 0x738; // TArray<FString>
		constexpr auto VoyageVoteUpdaters = 0x748; // TArray<TScriptInterface<Class>>
		constexpr auto VoyageCancellers = 0x758; // TArray<TScriptInterface<Class>>
		constexpr auto ProposedTales = 0x768; // TArray<FProposedTaleEntry>
		constexpr auto CurrentActiveTale = 0x788; // UVoyageDescDataAsset*
		constexpr auto ReapersVoyageCount = 0x790; // int32_t
		constexpr auto TaleVoteUpdaters = 0x798; // TArray<TScriptInterface<Class>>
		constexpr auto TaleCancellers = 0x7a8; // TArray<TScriptInterface<Class>>
		constexpr auto ShipCustomizationLoadoutComponent = 0x7b8; // UShipCustomizationLoadoutComponent*
		constexpr auto CurrentActiveEmissaryCompany = 0x868; // UCompany*
		constexpr auto CurrentActiveEmissarySessionId = 0x870; // FGuid
		constexpr auto CurrentEmissaryTotal = 0x880; // int32_t
		constexpr auto EmissaryMaxRankQuestBeenRedeemed = 0x884; // bool
	}

	namespace n_UBuriedItemDecal { // : UDecalComponent
		constexpr auto FadeTimeParameterName = 0x2e0; // FName
		constexpr auto FadeDistanceStartParameterName = 0x2e8; // FName
		constexpr auto FadeDistanceStart = 0x2f0; // float
		constexpr auto FadeDistanceEndParameterName = 0x2f4; // FName
		constexpr auto FadeDistanceEnd = 0x2fc; // float
		constexpr auto Material = 0x300; // UMaterialInstanceDynamic*
	}

	namespace n_UTaleQuestSpawnDebrisAtClueSiteStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAIItemDropComponentRankProgressionList { // : UDataAsset
		constexpr auto AllProgressions = 0x28; // TArray<UAIItemSpawnRankProgression*>
	}

	namespace n_UBeachNPCSpawnFlowStarter { // : UTutorialStarter
		constexpr auto AthenaPlayerController = 0x28; // AAthenaPlayerController*
		constexpr auto ShouldPlayIntroAnimatic = 0x30; // bool
		constexpr auto ShouldDisableAllIntroBehaviour = 0x31; // bool
		constexpr auto IntroAnimationSettings = 0x34; // FFirstPersonAnimaticSettings
	}

	namespace n_UComboBoxString { // : UWidget
		constexpr auto DefaultOptions = 0x138; // TArray<FString>
		constexpr auto SelectedOption = 0x148; // FString
		constexpr auto WidgetStyle = 0x158; // FComboBoxStyle
		constexpr auto ContentPadding = 0x580; // FMargin
		constexpr auto MaxListHeight = 0x590; // float
		constexpr auto HasDownArrow = 0x594; // bool
		constexpr auto OnGenerateWidgetEvent = 0x598; // DelegateProperty
		constexpr auto OnSelectionChanged = 0x5a8; // FScriptMulticastDelegate
		constexpr auto OnOpening = 0x5b8; // FScriptMulticastDelegate
	}

	namespace n_UResolveActorStringReferenceStepDesc { // : UTaleQuestStepDesc
		constexpr auto ActorVariable = 0x80; // FQuestVariableActor
		constexpr auto ActorReference = 0x90; // FStringAssetReference
	}

	namespace n_UNamedNotificationInputComponent { // : UActorComponent
		constexpr auto NotificationInputDisplayNames = 0xd0; // TArray<FNotificationInputDisplayName>
	}

	namespace n_UFireChargedAttackAIAbility { // : UAthenaAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_UCharacterHitReactionComponent { // : UHitReactionComponent
		constexpr auto DamagerTypeToAnimTypeLayer = 0x100; // UCharacterHitReactionDamagerTypeToAnimTypeLayer*
	}

	namespace n_UBTTask_StopMovementImmediately { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_ASwitchMechanismTrigger { // : AInteractableBase
		constexpr auto Root = 0x410; // USceneComponent*
		constexpr auto Pivot = 0x418; // USceneComponent*
		constexpr auto MechanismTriggerComponent = 0x420; // UMechanismTriggerComponent*
		constexpr auto ShowSwitchInteractionPrompt = 0x428; // bool
		constexpr auto SwitchInteractionPromptText = 0x430; // FText
		constexpr auto SwitchNameText = 0x468; // FText
		constexpr auto SyncToConnectedActionStateOnChange = 0x4a0; // bool
		constexpr auto DisableWhenActivated = 0x4a1; // bool
		constexpr auto AutoDeactivateAfterActivation = 0x4a2; // bool
		constexpr auto TimeAfterActivationBeforeAutoDeactivating = 0x4a4; // float
		constexpr auto SelectRandomStartPositionOnSpawn = 0x4a8; // bool
		constexpr auto RandomStartPositionSelectionMode = 0x4a9; // ESwitchMechanismTriggerRandomSelectionMode
		constexpr auto FixedStartPositionIndex = 0x4ac; // int32_t
		constexpr auto PositionTransitionCurve = 0x4b0; // UCurveFloat*
		constexpr auto Positions = 0x4b8; // TArray<FSwitchMechanismTriggerPosition>
		constexpr auto AudioEmitterPool = 0x4c8; // UWwiseObjectPoolWrapper*
		constexpr auto MaterialGroup = 0x4d0; // UMechanismMaterialGroup*
		constexpr auto CurrentPositionIndex = 0x4d8; // int32_t
	}

	namespace n_UMaterialExpressionLandscapeLayerSample { // : UMaterialExpression
		constexpr auto ParameterName = 0x70; // FName
		constexpr auto PreviewWeight = 0x78; // float
		constexpr auto ExpressionGUID = 0x7c; // FGuid
	}

	namespace n_UItemProxyWatercraftTrackerComponent { // : UActorComponent
		constexpr auto WatercraftTrackingData = 0xd0; // UItemProxyWatercraftTrackerComponentDataAsset*
		constexpr auto CurrentWatercraft = 0xd8; // AActor*
	}

	namespace n_UBootyCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UPlayerActivitySettings { // : UDeveloperSettings
		constexpr auto PlayerActivityLifetimeRulesCatalogue = 0x38; // FStringAssetReference
		constexpr auto PlayerActivityIconCatalogue = 0x48; // FStringAssetReference
		constexpr auto NameplateMaxVisibilityDistance = 0x58; // float
	}

	namespace n_UBTTask_BurrowAbilityTriggerEruptAreaFromBlackboard { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_ASeasonProgressionUIService { // : AActor
		constexpr auto SeasonPopupListAsset = 0x400; // USeasonPopupListAsset*
	}

	namespace n_AParticleEventManager { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTaleQuestEmissaryCompanyActionRewardBoostStepDesc { // : UTaleQuestStepDesc
		constexpr auto CompanyActionType = 0x80; // EEmisaryCompanyActionType
	}

	namespace n_ASail { // : AActor
		constexpr auto Mesh = 0x3d8; // USkeletalMeshComponent*
		constexpr auto DynamicMaterials = 0x3e0; // TArray<UMaterialInstanceDynamic*>
		constexpr auto PositionForSailDynamicsRelativeToSailActor = 0x3f0; // FVector
		constexpr auto SailDynamicsDesc = 0x400; // UBaseSailDynamicsDesc*
		constexpr auto MinRelativeWindSpdForFullVisibleInflation = 0x408; // float
		constexpr auto BaseWindStrength = 0x40c; // float
		constexpr auto WindToSailAngleEfficiencyCurve = 0x410; // UCurveFloat*
		constexpr auto NormalBillowLimit = 0x418; // float
		constexpr auto PerfectBillowValue = 0x41c; // float
		constexpr auto PerfectBillowThreshold = 0x420; // float
		constexpr auto SailLoweredPerfectWindThreshold = 0x424; // float
		constexpr auto BlendSpeed = 0x428; // float
		constexpr auto FurlMaterialParameterName = 0x42c; // FName
		constexpr auto AnimationSailHeightScalar = 0x434; // float
		constexpr auto DamageScalar = 0x53c; // float
	}

	namespace n_URareGameEngine { // : UGameEngine
		constexpr auto MaxDeltaTime = 0x978; // float
		constexpr auto ServerFlushLogInterval = 0x97c; // float
	}

	namespace n_UMouseCursorBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UEventCatchStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UEventCatchStepDesc*
	}

	namespace n_UProjectileLauncherSpecificSettings { // : UDeveloperSettings
		constexpr auto GlobalSettings = 0x38; // TArray<FGlobalProjectileSettings>
	}

	namespace n_UParticleModuleVelocity { // : UParticleModuleVelocityBase
		constexpr auto bUseGroupAForAll = 0x58; // char : 1
		constexpr auto StartVelocity = 0x60; // FRawDistributionVector
		constexpr auto AdditionalStartVelocities = 0x98; // FRawDistributionVector [0x5]
		constexpr auto StartVelocityRadial = 0x1b0; // FRawDistributionFloat
	}

	namespace n_UCutscenePoolTypeResettable { // : UCutscenePoolType
		constexpr auto DialogueSelectedRandomly = 0x28; // bool
		constexpr auto AvailableIndices = 0x30; // TArray<int32_t>
		constexpr auto OriginalIndices = 0x48; // TArray<int32_t>
	}

	namespace n_UDistributionVector { // : UDistribution
		constexpr auto bCanBeBaked = 0x30; // char : 1
		constexpr auto bIsDirty = 0x30; // char : 1
	}

	namespace n_ASequencerCutSceneActor { // : ALevelSequenceActor
		constexpr auto CutScenePlayData = 0x448; // FCutScenePlayData
		constexpr auto CutSceneDataSet = 0x480; // TArray<FCutSceneLoadData>
		constexpr auto CutsceneSubtitleComponent = 0x490; // UCutSceneSubtitlesComponent*
		constexpr auto InteractingPlayerPawn = 0x498; // APawn*
		constexpr auto IsLooping = 0x4a0; // bool
		constexpr auto LevelSequenceToPlay = 0x4a8; // ULevelSequence*
		constexpr auto LevelSequencesToPlay = 0x4b0; // TArray<ULevelSequence*>
	}

	namespace n_UPartyBeaconState { // : UObject
		constexpr auto SessionName = 0x28; // FName
		constexpr auto NumConsumedReservations = 0x30; // int32_t
		constexpr auto MaxReservations = 0x34; // int32_t
		constexpr auto NumTeams = 0x38; // int32_t
		constexpr auto NumPlayersPerTeam = 0x3c; // int32_t
		constexpr auto ReservedHostTeamNum = 0x40; // int32_t
		constexpr auto ForceTeamNum = 0x44; // int32_t
		constexpr auto Reservations = 0x48; // TArray<FPartyReservation>
	}

	namespace n_UIsExcludedFromSeasonProgressionStatCondition { // : UTargetedStatCondition
		constexpr auto TargetSelector = 0x28; // UStatConditionTargetSelector*
	}

	namespace n_UMechanismAnimationEvent_OneShotVFX { // : UMechanismAnimationEvent_VFX
		constexpr auto StartTime = 0x78; // float
		constexpr auto VFXParams = 0x80; // FMechanismAnimationEvent_VFXParams
	}

	namespace n_UMovieScene2DTransformSection { // : UMovieSceneSection
		constexpr auto Translation = 0xa0; // FRichCurve [0x2]
		constexpr auto Rotation = 0x190; // FRichCurve
		constexpr auto Scale = 0x208; // FRichCurve [0x2]
		constexpr auto Shear = 0x2f8; // FRichCurve [0x2]
	}

	namespace n_UEatItemConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UAISystemBase { // : UObject
		constexpr auto AISystemClassName = 0x28; // FStringClassReference
		constexpr auto AISystemModuleName = 0x38; // FName
	}

	namespace n_UPlayNpcAnimationResourceStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UPlayNpcAnimationResourceStepDesc*
		constexpr auto NPCDialogComponent = 0xa8; // UNPCDialogComponent*
		constexpr auto CutSceneActor = 0xb0; // ACutSceneActor*
	}

	namespace n_AMerchantMap { // : ATreasureMap
		constexpr auto CanvasWidth = 0x7d8; // int32_t
		constexpr auto CanvasHeight = 0x7dc; // int32_t
		constexpr auto Font = 0x7e0; // UFont*
		constexpr auto FontScale = 0x7e8; // float
		constexpr auto FontLineSpacingScale = 0x7ec; // float
		constexpr auto MerchantMapLayout = 0x7f8; // UMerchantMapLayout*
		constexpr auto Contents = 0x800; // FMerchantMapContents
	}

	namespace n_UTaleQuestToolServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto GiveToolsOnStart = 0x28; // bool
	}

	namespace n_UMaterialAccessibilityService { // : UObject
		constexpr auto MaterialAccessibilityParamCollection = 0x80; // UMaterialParameterCollection*
		constexpr auto MaterialAccessibilityAssetRef = 0x88; // FStringAssetReference
	}

	namespace n_AStaticCargoRunCrateItemProxy { // : AStaticMerchantCrateItemProxy
		constexpr auto CargoRunCrateComponent = 0x7d8; // UCargoRunCrateComponent*
		constexpr auto NPCDialogComponent = 0x7e0; // UNPCDialogComponent*
	}

	namespace n_ASeagulls { // : AShortRangeMarker
		constexpr auto DynamicMaterials = 0x3e0; // TArray<UMaterialInstanceDynamic*>
		constexpr auto LifetimerTimer = 0x3f0; // float
		constexpr auto FadeTimer = 0x3f4; // float
		constexpr auto TriggerFadeIn = 0x3f8; // FScriptMulticastDelegate
		constexpr auto TriggerFadeOut = 0x408; // FScriptMulticastDelegate
		constexpr auto CachedActors = 0x418; // TArray<TWeakObjectPtr<AActor>>
	}

	namespace n_AShipInternalWater { // : AActor
		constexpr auto InternalWaterParams = 0x3e0; // FShipInternalWaterParams
		constexpr auto CurrentVisualWaterLevel = 0x418; // float
		constexpr auto WaterAmount = 0x41c; // float
		constexpr auto SuperheatedWaterScaleSpeed = 0x420; // float
		constexpr auto OcclusionCylinderPosition = 0x424; // FVector
		constexpr auto OcclusionCylinderHeight = 0x430; // float
		constexpr auto ServerWaterAmount = 0x4d8; // float
		constexpr auto IsInSuperheatedWater = 0x4dc; // bool
		constexpr auto IsInSuperheatedWaterViaHeating = 0x4dd; // bool
		constexpr auto SceneRootComponent = 0x4e0; // USceneComponent*
		constexpr auto WaterPlaneActivationVolume = 0x4e8; // UStaticMeshComponent*
		constexpr auto WaterOcclusionVolume = 0x4f0; // UStaticMeshComponent*
		constexpr auto WaterMeshComponent = 0x4f8; // UFlatWaterMeshComponent*
		constexpr auto WaterPlaneComponent = 0x500; // UFlatWaterPlaneComponent*
		constexpr auto WaterOcclusionVolumeShrinkMaterialId = 0x508; // int32_t
		constexpr auto WaterOcclusionVolumeShrinkPropertyName = 0x50c; // FName
		constexpr auto WaterOcclusionZoneReductionCurve = 0x518; // UCurveFloat*
		constexpr auto RippleSizeMin = 0x520; // float
		constexpr auto RippleSizeMax = 0x524; // float
		constexpr auto RippleHeight = 0x528; // float
		constexpr auto SuperheatedWaterCoolingRatePerSecond = 0x52c; // float
		constexpr auto TimeToIgnoreCoolingDueToSuperheating = 0x530; // float
		constexpr auto SuperheatedWaterStatusToApply = 0x538; // FStatus
		constexpr auto OverlappingActors = 0x578; // TArray<AActor*>
	}

	namespace n_UIntentBasedMechanismActionComponent { // : UMechanismActionComponent
		constexpr auto InitialActionProgress = 0x158; // float
		constexpr auto MaxPositiveMovementSpeedDueToPlayer = 0x15c; // float
		constexpr auto MaxNegativeMovementSpeedDueToPlayer = 0x160; // float
		constexpr auto PositiveAccelerationDueToPlayerIntent = 0x164; // float
		constexpr auto NegativeAccelerationDueToPlayerIntent = 0x168; // float
		constexpr auto InvertControlls = 0x16c; // bool
		constexpr auto EnableCircularActionProgress = 0x16d; // bool
		constexpr auto GravityEnabled = 0x16e; // bool
		constexpr auto MaxNegativeMovementSpeedDueToGravity = 0x170; // float
		constexpr auto NegativeAccelerationDueToGravity = 0x174; // float
		constexpr auto ProgressLockingEnabled = 0x178; // bool
		constexpr auto LockProgressWhenPlayerIntentBecomesZero = 0x179; // bool
		constexpr auto ProgressLockValue = 0x17c; // float
		constexpr auto UpperPlayerIntentUnlockThreshold = 0x180; // float
		constexpr auto LowerPlayerIntentUnlockThreshold = 0x184; // float
		constexpr auto UseAutoUnlockTimer = 0x188; // bool
		constexpr auto TimeUntilAutoUnlock = 0x18c; // float
		constexpr auto ClientPrediction = 0x190; // FIntentPredictor
		constexpr auto ResetToInitial = 0x1ac; // bool
		constexpr auto ServerActionProgressIsLocked = 0x1ad; // bool
		constexpr auto ServerActionProgress = 0x1b0; // float
	}

	namespace n_UBTService_UpdateFocusOnBBChange { // : UBTService_DefaultFocus
		constexpr auto DisableUpdateMoveFocusForCurrentPathOnExit = 0xa0; // bool
		constexpr auto Conditional = 0xa8; // FConditionalBasedOnBlackboardKey
	}

	namespace n_USoundWave { // : USoundBase
		constexpr auto CompressionQuality = 0x50; // int32_t
		constexpr auto bLooping = 0x54; // char : 1
		constexpr auto bStreaming = 0x54; // char : 1
		constexpr auto StreamingPriority = 0x58; // int32_t
		constexpr auto bMature = 0x5c; // char : 1
		constexpr auto bManualWordWrap = 0x5c; // char : 1
		constexpr auto bSingleLine = 0x5c; // char : 1
		constexpr auto SoundGroup = 0x60; // ESoundGroup
		constexpr auto SpokenText = 0x68; // FString
		constexpr auto Volume = 0x78; // float
		constexpr auto Pitch = 0x7c; // float
		constexpr auto NumChannels = 0x80; // int32_t
		constexpr auto SampleRate = 0x84; // int32_t
		constexpr auto RawPCMDataSize = 0x88; // int32_t
		constexpr auto Subtitles = 0x90; // TArray<FSubtitleCue>
		constexpr auto LocalizedSubtitles = 0xa0; // TArray<FLocalizedSubtitle>
	}

	namespace n_USpawnPhasedActorFromInputPinStepDesc { // : USpawnPhasedActorStepDesc
		constexpr auto PhasedActorType = 0xd0; // FQuestVariableActorAssetType
	}

	namespace n_UParticleSystemComponent { // : UPrimitiveComponent
		constexpr auto Template = 0x588; // UParticleSystem*
		constexpr auto EmitterMaterials = 0x590; // TArray<UMaterialInterface*>
		constexpr auto SkelMeshComponents = 0x5a0; // TArray<USkeletalMeshComponent*>
		constexpr auto bResetOnDetach = 0x5b0; // char : 1
		constexpr auto bUpdateOnDedicatedServer = 0x5b0; // char : 1
		constexpr auto InstanceParameters = 0x5b8; // TArray<FParticleSysParam>
		constexpr auto EmitterPointParameter = 0x5c8; // FParticleSysParam
		constexpr auto OnParticleSpawn = 0x618; // FScriptMulticastDelegate
		constexpr auto OnParticleBurst = 0x628; // FScriptMulticastDelegate
		constexpr auto OnParticleDeath = 0x638; // FScriptMulticastDelegate
		constexpr auto OnParticleCollide = 0x648; // FScriptMulticastDelegate
		constexpr auto OldPosition = 0x658; // FVector
		constexpr auto PartSysVelocity = 0x664; // FVector
		constexpr auto CustomInheritedVelocity = 0x688; // FVector
		constexpr auto CustomParameterDrivingCurves = 0x6a0; // float
		constexpr auto ColourTint = 0x6a4; // FLinearColor
		constexpr auto WarmUpTime = 0x6b4; // float
		constexpr auto WarmupTickRate = 0x6b8; // float
		constexpr auto bWarmingUp = 0x6bc; // char : 1
		constexpr auto SecondsBeforeInactive = 0x6d8; // float
		constexpr auto MaxTimeBeforeForceUpdateTransform = 0x6e4; // float
		constexpr auto bOverrideLODMethod = 0x6ec; // char : 1
		constexpr auto LODMethod = 0x6f0; // ParticleSystemLODMethod
		constexpr auto bSkipUpdateDynamicDataDuringTick = 0x6f4; // char : 1
		constexpr auto CachedViewRelevanceFlags = 0x6f8; // TArray<FMaterialRelevance>
		constexpr auto ReplayClips = 0x710; // TArray<UParticleSystemReplay*>
		constexpr auto CustomTimeDilation = 0x780; // float
		constexpr auto OnSystemFinished = 0x788; // FScriptMulticastDelegate
		constexpr auto bUnbound = 0x798; // char : 1
	}

	namespace n_UAnimNotifyState_Trail { // : UAnimNotifyState
		constexpr auto PSTemplate = 0x28; // UParticleSystem*
		constexpr auto FirstSocketName = 0x30; // FName
		constexpr auto SecondSocketName = 0x38; // FName
		constexpr auto WidthScaleMode = 0x40; // ETrailWidthMode
		constexpr auto WidthScaleCurve = 0x44; // FName
	}

	namespace n_UCustomAnimationMontageComponent { // : UActorComponent
		constexpr auto ReplicatedData = 0xd0; // FCustomAnimationMontageComponentReplicatedData
	}

	namespace n_ACapstanMock { // : AInteractableBase
		constexpr auto State = 0x410; // float
		constexpr auto RatioVelocity = 0x414; // float
		constexpr auto MaxRatioVelocity = 0x418; // float
		constexpr auto MaxVelocityPerPlayer = 0x41c; // float
		constexpr auto NumCurrentUsers = 0x420; // int32_t
		constexpr auto Locked = 0x424; // bool
	}

	namespace n_UObjectMessagingDispatcherComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_URichTextBlockDecorator { // : UObject
		constexpr auto bReveal = 0x28; // bool
		constexpr auto RevealedIndex = 0x2c; // int32_t
	}

	namespace n_UAthenaAIFormComponent { // : UActorComponent
		constexpr auto VfxCustomisations = 0xd0; // TArray<FAthenaAIFormComponentVfxCustomisation>
		constexpr auto FormData = 0xe0; // UAthenaAIFormDataAsset*
		constexpr auto HitReactionsLayer = 0xe8; // UCharacterHitReactionDamagerTypeToAnimTypeLayer*
	}

	namespace n_UCloudDomeService { // : UObject
		constexpr auto RegisteredCloudDomes = 0x30; // TArray<UObject*>
	}

	namespace n_UMaterialExpressionMultiply { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto ConstA = 0xe0; // float
		constexpr auto ConstB = 0xe4; // float
	}

	namespace n_UContestCeremoniesComponent { // : UActorComponent
		constexpr auto CurrentContestStage = 0xc8; // EContestEventStages
		constexpr auto ContestCeremonyTimedActions = 0x100; // TArray<FTimedContestEventAction>
		constexpr auto PlayedAudio = 0x110; // TArray<UWwiseEvent*>
		constexpr auto ContestEventsDataAsset = 0x120; // UContestCeremonyEventsDataAsset*
	}

	namespace n_AMermaidService { // : AActor
		constexpr auto MermaidBP = 0x3d8; // AActor*
		constexpr auto MermaidPartsCategory = 0x3e0; // UAIPartsCategory*
	}

	namespace n_UVoteOnVoyageVotableComponent { // : UVotableVoyageProposalComponent
		constexpr auto HoldToWithdrawVoyageTime = 0x340; // float
		constexpr auto WithdrawActionInputId = 0x348; // UNotificationInputId*
		constexpr auto WithdrawActionReleasedInputId = 0x350; // UNotificationInputId*
	}

	namespace n_UUnarmedCombatItemCategory { // : UWeaponItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UIsAIOfSkillsetStatCondition { // : UTargetedStatCondition
		constexpr auto AISkillsets = 0x30; // TArray<UAthenaAIControllerParamsDataAsset*>
	}

	namespace n_UBeckonDataAsset { // : UDataAsset
		constexpr auto NPCBeckonGroups = 0x28; // TArray<FNPCBeckonGroupEntry>
		constexpr auto BeckonAudioPool = 0x38; // UWwiseObjectPoolWrapper*
		constexpr auto BeckonIntervalInSeconds = 0x40; // float
	}

	namespace n_UPluginCommandlet { // : UCommandlet
		constexpr auto HelpDescription = 0x28; // FString
		constexpr auto HelpUsage = 0x38; // FString
		constexpr auto HelpWebLink = 0x48; // FString
		constexpr auto HelpParamNames = 0x58; // TArray<FString>
		constexpr auto HelpParamDescriptions = 0x68; // TArray<FString>
		constexpr auto IsServer = 0x78; // char : 1
		constexpr auto IsClient = 0x78; // char : 1
		constexpr auto IsEditor = 0x78; // char : 1
		constexpr auto LogToConsole = 0x78; // char : 1
		constexpr auto ShowErrorCount = 0x78; // char : 1
	}

	namespace n_AOverlapTriggerActor { // : AActor
		constexpr auto SceneComponent = 0x3d0; // UCapsuleComponent*
		constexpr auto OverlapComponent = 0x3d8; // UOverlapTriggerComponent*
	}

	namespace n_UStatusResponseForceFeedback { // : UStatusResponse
		constexpr auto ForceFeedbackEffect = 0x30; // UForceFeedbackEffect*
	}

	namespace n_UMaterialExpressionTextureObjectParameter { // : UMaterialExpressionTextureSampleParameter
		constexpr auto ParameterName = 0x1a8; // FName
		constexpr auto ExpressionGUID = 0x1b0; // FGuid
		constexpr auto Group = 0x1c0; // FName
	}

	namespace n_UBuryItemStatTriggerType { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UStorageContainerSettings { // : UDeveloperSettings
		constexpr auto StorageContainerComponentDataAssetLocation = 0x38; // FStringAssetReference
		constexpr auto QuickTransferDefaultRate = 0x48; // float
		constexpr auto QuickTransferMyCrewShipRate = 0x4c; // float
		constexpr auto QuickTransferOtherCrewShipRate = 0x50; // float
	}

	namespace n_ANPCOnSurface { // : AActor
		constexpr auto CanDamagePlayers = 0x3e0; // bool
		constexpr auto VODataAsset = 0x3e8; // UNPCOnSurfaceVODataAsset*
		constexpr auto NPCName = 0x3f0; // FText
		constexpr auto Pool = 0x428; // UWwiseObjectPoolWrapper*
		constexpr auto Mesh = 0x430; // USkeletalMeshComponent*
		constexpr auto Emitter = 0x438; // UWwiseEmitterComponent*
		constexpr auto CutSceneSubtitlesComponent = 0x440; // UCutSceneSubtitlesComponent*
		constexpr auto CustomAnimationMontageComponent = 0x448; // UCustomAnimationMontageComponent*
		constexpr auto CurrentAnimInstance = 0x450; // FStringAssetReference
		constexpr auto IsPlayerCurrentlyNearNPC = 0x460; // bool
	}

	namespace n_ATestAthenaPlayerState { // : AAthenaPlayerState
		constexpr auto VoiceChatComponent = 0x4a0; // UVoiceChatComponent*
		constexpr auto Sandbox = 0x4e8; // FString
		constexpr auto ClientPlatform = 0x4f8; // FString
		constexpr auto DeviceID = 0x508; // FString
		constexpr auto PirateIdentity = 0x518; // FPirateIdentity
		constexpr auto PlayerGameId = 0x648; // FGuid
		constexpr auto PirateDesc = 0x658; // FPirateDescription
		constexpr auto PlayerIndexOnServer = 0x6d8; // int32_t
		constexpr auto PlayerActivity = 0x718; // EPlayerActivityType
	}

	namespace n_UMaterialExpression { // : UObject
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UStopAggressiveGhostShipEncounterStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UStopAggressiveGhostShipEncounterStepDesc*
	}

	namespace n_UMovieSceneParticleSection { // : UMovieSceneSection
		constexpr auto ParticleKeys = 0x98; // FIntegralCurve
	}

	namespace n_UContestPlacedFinishStatCondition { // : UStatCondition
		constexpr auto ContestPlacesRange = 0x28; // FInt32Range
	}

	namespace n_UReceiverPuzzleStatueAudioParamsDataAsset { // : UDataAsset
		constexpr auto ReceiverChangingPosition = 0x28; // UWwiseEvent*
		constexpr auto GrindingStart = 0x30; // UWwiseEvent*
		constexpr auto GrindingStop = 0x38; // UWwiseEvent*
	}

	namespace n_UAshenLordSummonAIAbility { // : USummonAIAbility
		constexpr auto OwnerPawn = 0x100; // APawn*
		constexpr auto FireShroudVFX = 0x108; // UVFXSpawnerComponent*
		constexpr auto SetupAbilityParams = 0x110; // UAshenLordSummonAIAbilityParams*
		constexpr auto FireShroud = 0x118; // FAshenLordFireShroud
	}

	namespace n_UMerchantQuestItemData { // : UDataAsset
		constexpr auto DisplayNameLookup = 0x28; // UMerchantQuestItemPluralisationData*
		constexpr auto HandInOnTimeRewardId = 0x30; // FRewardId
		constexpr auto CrateDesc = 0x38; // UItemDesc*
		constexpr auto AcceptableAlternativeCrateItemData = 0x40; // TArray<FMerchantQuestItemDescAndReward>
		constexpr auto IconImage = 0x50; // UTexture*
		constexpr auto FaunaSpecies = 0x58; // UFaunaSpecies*
		constexpr auto FaunaBreed = 0x60; // UFaunaBreed*
		constexpr auto CrateFilledPopupDesc = 0x68; // UPopUpMessageDesc*
		constexpr auto IsOnlyFoundInWorld = 0x70; // bool
	}

	namespace n_AShipHullAudio { // : AShipAudio
		constexpr auto WwiseEvent_ShipSinking = 0x460; // UWwiseEvent*
		constexpr auto WwiseEvent_ShipSinkingExceededRollThreshold = 0x468; // UWwiseEvent*
		constexpr auto WwiseEvent_FloodDamage_Play = 0x470; // UWwiseEvent*
		constexpr auto WwiseEvent_FloodDamage_Stop = 0x478; // UWwiseEvent*
		constexpr auto WwiseEvent_SuperheatedWater_Play = 0x480; // UWwiseEvent*
		constexpr auto WwiseEvent_SuperheatedWater_Stop = 0x488; // UWwiseEvent*
		constexpr auto WwiseEvent_ShipSinking_Music = 0x490; // UWwiseEvent*
		constexpr auto WwiseEvent_ShroudBreakerShield = 0x498; // UWwiseEvent*
		constexpr auto WwiseEvent_ShipSinking_Music_Pool = 0x4a0; // UWwiseObjectPoolWrapper*
		constexpr auto Emitter_MidShip_Pool = 0x4a8; // UWwiseObjectPoolWrapper*
		constexpr auto RTPC_ShipRoll = 0x4b0; // FName
		constexpr auto RTPC_ShipPitch = 0x4b8; // FName
		constexpr auto RTPC_FloodDamage = 0x4c0; // FName
		constexpr auto RTPC_ShipVelocity = 0x4c8; // FName
		constexpr auto RTPC_ShipStrain = 0x4d0; // FName
		constexpr auto RTPC_SuperheatedWaterIntensity = 0x4d8; // FName
		constexpr auto PositionTolerance = 0x4e0; // float
		constexpr auto MaxVelocity = 0x4e4; // float
		constexpr auto SinkingShipRollThreshold = 0x4e8; // float
		constexpr auto ShipAudioRootComponent = 0x4f0; // USceneComponent*
		constexpr auto ShipHullAudioDataArray = 0x4f8; // TArray<FShipHullAudioData>
		constexpr auto InternalWater = 0x518; // AShipInternalWater*
		constexpr auto Emitter_MidShip = 0x520; // FWwiseEmitter
		constexpr auto ShipSinkingMusicEmitter = 0x540; // FWwiseEmitter
	}

	namespace n_ULandmarkReactionEventStopParticleSystem { // : ULandmarkReactionEvent
		constexpr auto ComponentName = 0x38; // FName
		constexpr auto ComponentIndex = 0x40; // int32_t
		constexpr auto AudioCue = 0x48; // UWwiseEvent*
	}

	namespace n_UBootyItemShipOwnershipComponent { // : UActorComponent
		constexpr auto FirstTimeDroppedConditionalStatTriggerSent = 0xc8; // bool
		constexpr auto ItemProxy = 0xcc; // TWeakObjectPtr<AActor>
	}

	namespace n_APortalSignalCutSceneAnchor { // : AActor
		constexpr auto Root = 0x3d0; // USceneComponent*
	}

	namespace n_UMaterialExpressionViewSize { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UPointOfInterestTrackerComponent { // : UActorComponent
		constexpr auto SecondsBetweenRevelations = 0xd0; // float
		constexpr auto SecondsAfterInertStateWhereNotificationsAreIgnored = 0xd4; // float
	}

	namespace n_AAshenWindsSkullItemInfo { // : ABootyItemInfo
		constexpr auto FlamethrowerChargeComponent = 0x708; // UFlamethrowerChargeComponent*
		constexpr auto Rewards = 0x710; // TArray<FAshenWindsSkullRewardLevel>
	}

	namespace n_UTaleQuestPermanentPromptStepDesc { // : UTaleQuestStepDesc
		constexpr auto Prompt = 0x80; // FQuestVariablePrioritisedPrompt
		constexpr auto StartOrStop = 0x90; // EPromptStartStop
	}

	namespace n_UAthenaAIAbilityParams { // : UObject
		constexpr auto NamedControllerParams = 0x28; // TArray<FAthenaAIControllerParamValue>
		constexpr auto DamageIntervalCountingMode = 0x38; // EAIAbilityDamageIntervalCounterMode
		constexpr auto UseTimeBetweenAbility = 0x39; // bool
		constexpr auto ActivationTimerCooldown = 0x40; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto TimeBetweenAbility = 0x50; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto UseDamageBetweenAbility = 0x60; // bool
		constexpr auto DamageBetweenAbility = 0x68; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto AbilityRadius = 0x78; // float
		constexpr auto UseMinMaxAttackRange = 0x7c; // bool
		constexpr auto MinMaxAttackRange = 0x80; // FMinMaxAbilityRange
		constexpr auto FollowUpAbilities = 0x88; // TArray<FAIAbilityFollowUp>
		constexpr auto Weight = 0x98; // float
		constexpr auto ContinuousCooldownAbilityParameters = 0xa0; // FAIAbilityContinuousCooldownParameterData
		constexpr auto AIAbilityTypeClass = 0xc0; // UAthenaAIAbilityType*
	}

	namespace n_UBlackboardComponent { // : UActorComponent
		constexpr auto BrainComp = 0xc8; // UBrainComponent*
		constexpr auto BlackboardAsset = 0xd0; // UBlackboardData*
		constexpr auto KeyInstances = 0xf8; // TArray<UBlackboardKeyType*>
	}

	namespace n_UBTDecorator_CheckGameplayTagsOnActor { // : UBTDecorator
		constexpr auto ActorToCheck = 0x68; // FBlackboardKeySelector
		constexpr auto TagsToMatch = 0x90; // EGameplayContainerMatchType
		constexpr auto GameplayTags = 0x98; // FGameplayTagContainer
		constexpr auto CachedDescription = 0xc0; // FString
	}

	namespace n_UMaterialExpressionCameraPositionWS { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UWaterSensitiveComponentDataAsset { // : UDataAsset
		constexpr auto HealthChangeInRainPerSecond = 0x28; // FWaterSensitiveHealthChange
		constexpr auto HealthChangeSubmergedPerSecond = 0x30; // FWaterSensitiveHealthChange
		constexpr auto HealthChangeWhenDryPerSecond = 0x38; // FWaterSensitiveHealthChange
		constexpr auto HealthChangeOnLiquidProjectileImpact = 0x40; // FWaterSensitiveHealthChange
	}

	namespace n_UUserDefinedEnum { // : UEnum
		constexpr auto DisplayNames = 0x58; // TArray<FText>
	}

	namespace n_UStatusResponseCancelStatus { // : UStatusResponse
		constexpr auto Status = 0x30; // TArray<UStatusBase*>
	}

	namespace n_AShipInteractableLight { // : AInteractableLight
		constexpr auto DormantShipRegions = 0x5d8; // TArray<EShipRegion>
		constexpr auto IsBrigLight = 0x5e8; // bool
		constexpr auto ExposeToNetProxy = 0x5e9; // bool
		constexpr auto NetProxyBitIndex = 0x5ec; // int32_t
		constexpr auto SiblingLights = 0x608; // TArray<AShipInteractableLight*>
	}

	namespace n_UDeliverableRedirectionBootyContextHandler { // : UDeliverableRedirectionContextHandlerBase
		constexpr auto TargetBootyTypes = 0x30; // TArray<EBootyTypes>
	}

	namespace n_UTaleQuestGetNPCActorFromClueSiteStepDesc { // : UTaleQuestStepDesc
		constexpr auto ClueSite = 0x80; // FQuestVariableClueSite
		constexpr auto NPCFromClueSite = 0x90; // FQuestVariableActor
	}

	namespace n_UJwtAuthenticationTokenSettings { // : UObject
		constexpr auto TokenSecretKey = 0x28; // FString
	}

	namespace n_AStorageCrateWieldable { // : ALargeSkeletalMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UTutorial2019ContextualDelegatingComponent { // : UTutorial2019Component
		constexpr auto ContextualTutorialComponent = 0xd0; // UContextualTutorialComponent*
	}

	namespace n_ACustomizableShipService { // : AShipService
		constexpr auto ShipList = 0x3e0; // TArray<FWeakActorHandle>
		constexpr auto CrewedShips = 0x410; // TArray<FCrewShipEntry>
		constexpr auto PersistentCrewShipData = 0x420; // FCrewShipPersistentDataManager
	}

	namespace n_UNPCDialogOptionDialogSelect { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto LinkedDialog = 0xb8; // int32_t
	}

	namespace n_UAthenaInputSettings { // : UObject
		constexpr auto AllowedInvertedYAxis = 0x28; // TArray<FName>
		constexpr auto AllowedInvertedXAxis = 0x38; // TArray<FName>
		constexpr auto AllowedInvertedCombinedAxis = 0x48; // TArray<FName>
		constexpr auto RadialSelectionTimeout = 0x58; // float
		constexpr auto RadialSelectionMagnitudeThreshold = 0x5c; // float
		constexpr auto TimeToBlockInputsAfterRadialDeactivation = 0x60; // float
		constexpr auto MinDeflectionToBlockInputsAfterRadialDeactivation = 0x64; // float
		constexpr auto MinRadialSectorUnselectableFraction = 0x68; // float
		constexpr auto MaxRadialSectorUnselectableFraction = 0x6c; // float
		constexpr auto RadialActivationThreshold = 0x70; // float
		constexpr auto RadialFastItemSwitchGracePeriod = 0x74; // float
		constexpr auto ActionMappingKeyLookupFallbacks = 0x78; // TArray<FActionMappingKeyLookupFallback>
		constexpr auto VirtualActionBindingDefinitions = 0x88; // TArray<FVirtualActionBindingDefinition>
		constexpr auto VirtualAxisBindingDefinitions = 0x98; // TArray<FVirtualAxisBindingDefinition>
		constexpr auto MouseSensitivityMin = 0xa8; // float
		constexpr auto MouseSensitivityMax = 0xac; // float
		constexpr auto ControllerSensitivityMin = 0xb0; // float
		constexpr auto ControllerSensitivityMax = 0xb4; // float
		constexpr auto ControllerDeadzoneMin = 0xb8; // float
		constexpr auto ControllerDeadzoneMax = 0xbc; // float
		constexpr auto ControllerNonLinearityMin = 0xc0; // float
		constexpr auto ControllerNonLinearityMax = 0xc4; // float
		constexpr auto SingleStickOffMappings = 0xc8; // FSingleStickMapping
		constexpr auto SingleStickOffSettings = 0x118; // FSingleStickSettings
		constexpr auto SingleStickLeftLookMappings = 0x138; // FSingleStickMapping
		constexpr auto SingleStickRightLookMappings = 0x188; // FSingleStickMapping
		constexpr auto SingleStickLeftMoveMappings = 0x1d8; // FSingleStickMapping
		constexpr auto SingleStickRightMoveMappings = 0x228; // FSingleStickMapping
		constexpr auto SingleStickLeftHybridMappings = 0x278; // FSingleStickMapping
		constexpr auto SingleStickRightHybridMappings = 0x2c8; // FSingleStickMapping
		constexpr auto SingleStickOnSettings = 0x318; // FSingleStickSettings
	}

	namespace n_UScrapeableDamageDataAsset { // : UDataAsset
		constexpr auto DamageSpeedParams = 0x28; // TArray<FScrapeableDamageSpeedEntry>
	}

	namespace n_ABP_FogBankManager_C { // : AFogBankManager
		constexpr auto DefaultSceneRoot = 0x3d8; // USceneComponent*
	}

	namespace n_ATextRenderActor { // : AActor
		constexpr auto TextRender = 0x3d0; // UTextRenderComponent*
	}

	namespace n_UGetNextQuestInChainStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UGetNextQuestInChainStepDesc*
	}

	namespace n_UGameSessionSettings { // : UObject
		constexpr auto MaxSpectators = 0x28; // int32_t
		constexpr auto MaxPlayers = 0x2c; // int32_t
		constexpr auto bRequiresPushToTalk = 0x30; // char : 1
	}

	namespace n_UAIShipEncounterDesc { // : UDataAsset
		constexpr auto Location = 0x28; // FVector2D
		constexpr auto Radius = 0x30; // float
		constexpr auto Moveable = 0x34; // bool
		constexpr auto ShowRevealBanner = 0x35; // bool
		constexpr auto ShowCompleteBanner = 0x36; // bool
		constexpr auto ShouldSpawnShipCloud = 0x37; // bool
		constexpr auto RequirePlayerShipInZoneToSpawnShips = 0x38; // bool
		constexpr auto EnableSecondsUntilEncounterEndsAfterLastCrewLeft = 0x39; // bool
		constexpr auto SecondsUntilEncounterEndsAfterLastCrewLeft = 0x3c; // int32_t
		constexpr auto EnableMaximumEncounterDuration = 0x40; // bool
		constexpr auto MaximumEncounterDuration = 0x44; // int32_t
		constexpr auto EncounterType = 0x48; // EAIShipEncounterType
		constexpr auto Waves = 0x50; // TArray<FAIShipEncounterWave>
	}

	namespace n_UInputAxisKeyDelegateBinding { // : UInputDelegateBinding
		constexpr auto InputAxisKeyDelegateBindings = 0x28; // TArray<FBlueprintInputAxisKeyDelegateBinding>
	}

	namespace n_URiggingSystemComponent { // : USceneComponent
		constexpr auto RopeStyle = 0x2b0; // FRopeStyleParams
		constexpr auto LineGroups = 0x2d0; // TArray<FRiggingSystemLineGroup>
		constexpr auto Impl = 0x2e0; // ARiggingSystem*
	}

	namespace n_UNullEntitlementDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UTextureAuditorSettings { // : UTestSettings
		constexpr auto SpecificTexturesToNotAudit = 0x38; // TArray<FStringAssetReference>
		constexpr auto TextureDirectoriesToNotAudit = 0x48; // TArray<FDirectoryPath>
		constexpr auto DefaultTextureProperties = 0x58; // FTextureAuditorProperties
		constexpr auto PerTextureGroupPropertiesOverrides = 0x78; // TArray<FTextureAuditorGroupProperties>
	}

	namespace n_UEmissaryFlotsamItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto SpawnOnStart = 0x2b0; // bool
		constexpr auto SpawnParams = 0x2b8; // FItemSpawnParams
		constexpr auto ReferencedSpawnDistributionAsset = 0x2e0; // UWeightedItemDescSpawnDataAsset*
		constexpr auto ReferencedSpawnDistribution = 0x2e8; // UItemSpawnDistributionAsset*
		constexpr auto SpawnTransforms = 0x2f0; // TArray<FItemSpawnTransform>
		constexpr auto SpawnTransformsWithRandomQuantities = 0x300; // TArray<FItemSpawnTransformWithRandomQuantity>
		constexpr auto FeatureToggle = 0x310; // FName
		constexpr auto SpawnSource = 0x318; // ESpawnedItemSource
		constexpr auto SpawnRate = 0x31c; // float
		constexpr auto DestroyProxiesOnEndPlay = 0x320; // bool
		constexpr auto SpawnWithPhysicsEnabled = 0x321; // bool
		constexpr auto DoNotAttachToOwnerWhenSpawned = 0x322; // bool
		constexpr auto DropItemsOnSpawn = 0x323; // bool
		constexpr auto DropItemsUsingPriorityAIDropParams = 0x324; // bool
		constexpr auto SpawnList = 0x328; // TArray<FSpawnInstance>
		constexpr auto SingleItemInstances = 0x338; // TArray<FSpawnInstance>
		constexpr auto SpawnedItems = 0x348; // TArray<FSpawnedItem>
	}

	namespace n_UCutsceneResponseComponent { // : UActorComponent
		constexpr auto Sheets = 0xc8; // TArray<UCutsceneResponseSheet*>
	}

	namespace n_UTaleQuestSpawnAIStep { // : UTaleQuestBlueprintStep
		constexpr auto Spawner = 0xa0; // UAISpawner*
		constexpr auto Region = 0xa8; // USimpleAIRegion*
		constexpr auto ProximityPlayerTracker = 0xd8; // UAIProximityPlayerTracker*
		constexpr auto VoyageParticipantOnlyActivateFilter = 0xe0; // UFilterFirstPlayerEnterPlayerTrackerDecorator*
	}

	namespace n_UWashedUpMessageInABottleClueDestinationGenerator { // : UClueDestinationGenerator
		constexpr auto RequiredClueSiteDataType = 0x28; // UClueSiteData*
		constexpr auto WeightedSupportedDescriptorTypes = 0x30; // TArray<FWeightedClueDestinationDescriptor>
	}

	namespace n_UShipCustomizationLoadoutComponent { // : UActorComponent
		constexpr auto Loadout = 0xe0; // FShipCustomizationLoadout
		constexpr auto Ship = 0x108; // AShip*
		constexpr auto ShipSize = 0x110; // UShipSize*
		constexpr auto ActivePartCustomizations = 0x148; // FShipCustomizationLoadoutPartCustomizations
	}

	namespace n_AInteractableLight { // : AInteractableObject
		constexpr auto InteractableLightParameters = 0x470; // UInteractableLightParameters*
		constexpr auto SfxSwitchOn = 0x478; // UWwiseEvent*
		constexpr auto SfxSwitchOff = 0x480; // UWwiseEvent*
		constexpr auto SfxBurningPlay = 0x488; // UWwiseEvent*
		constexpr auto SfxBurningStop = 0x490; // UWwiseEvent*
		constexpr auto SfxSetFlame = 0x498; // UWwiseEvent*
		constexpr auto SfxPool = 0x4a0; // UWwiseObjectPoolWrapper*
		constexpr auto SfxEmitterName = 0x4a8; // FName
		constexpr auto InteractionRadius = 0x4b0; // float
		constexpr auto LightData = 0x4b4; // FLightData
		constexpr auto ObjectMessageDispatcher = 0x4b8; // FObjectMessagingDispatcher
	}

	namespace n_UVectorField { // : UObject
		constexpr auto Bounds = 0x28; // FBox
		constexpr auto Intensity = 0x44; // float
	}

	namespace n_UAddMarkToTornMapAtActorLocationStepDesc { // : UAddMarkToTornMapStepDescBase
		constexpr auto MarkLocation = 0xa0; // FQuestVariableActor
	}

	namespace n_UMaterialExpressionComment { // : UMaterialExpression
		constexpr auto SizeX = 0x70; // int32_t
		constexpr auto SizeY = 0x74; // int32_t
		constexpr auto Text = 0x78; // FString
		constexpr auto CommentColor = 0x88; // FLinearColor
	}

	namespace n_UFaunaAnimationInstance { // : UAnimInstance
		constexpr auto Fauna = 0x450; // AActor*
		constexpr auto FaunaCharacter = 0x458; // AFauna*
		constexpr auto Animations = 0x460; // FFaunaAnimationStructure
		constexpr auto CurrentOrientation = 0xb20; // FRotator
		constexpr auto CurrentState = 0xb2c; // EFaunaAnimationState
		constexpr auto IsCaged = 0xb2d; // bool
		constexpr auto LoopSpecial = 0xb2e; // bool
		constexpr auto SpecialIndex = 0xb30; // int32_t
		constexpr auto LocomotionSpeed = 0xb34; // float
		constexpr auto ImpactStrength = 0xb38; // float
		constexpr auto Location = 0xb3c; // EFaunaAnimationLocation
		constexpr auto BaseAnimSet = 0xb40; // FFaunaAnimationLocationStructure
		constexpr auto TurnRate = 0xea0; // float
		constexpr auto CurrentYaw = 0xea4; // float
		constexpr auto CurrentDirection = 0xea8; // float
		constexpr auto TurningActive = 0xeac; // bool
		constexpr auto TurningLeft = 0xead; // bool
		constexpr auto TurnRateToDisableTurns = 0xeb0; // float
		constexpr auto AnimationTurnRateMultiplier = 0xeb4; // float
		constexpr auto StartledLevel = 0xeb8; // EFaunaAnimationStartledLevel
		constexpr auto PigIsStarving = 0xeb9; // bool
		constexpr auto StartEating = 0xeba; // bool
		constexpr auto SnakeInAttackStance = 0xec0; // bool
		constexpr auto SnakeInCharmStance = 0xec1; // bool
		constexpr auto StartSnakeStrike = 0xec2; // bool
		constexpr auto SnakeAttackDirection = 0xec3; // EFaunaAnimationSnakeAttackDirection
		constexpr auto BaseSnakeAttackAnims = 0xec8; // FFaunaAnimationSnakeBiteStructure
		constexpr auto CurrentPlayingAnimations = 0xee8; // FFaunaAnimationCurrentPlayingAnimations
	}

	namespace n_ATestActorWithUObjectProperty { // : AActor
		constexpr auto ObjectProperty = 0x3d0; // UObject*
	}

	namespace n_ULineBatchComponent { // : UPrimitiveComponent
		constexpr auto MinDrawDistance = 0x2b8; // float
		constexpr auto LDMaxDrawDistance = 0x2c0; // float
		constexpr auto CachedMaxDrawDistance = 0x2c4; // float
		constexpr auto DepthPriorityGroup = 0x2c8; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x2c9; // ESceneDepthPriorityGroup
		constexpr auto bAlwaysCreatePhysicsState = 0x2cc; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x2cc; // char : 1
		constexpr auto bMultiBodyOverlap = 0x2cc; // char : 1
		constexpr auto bCheckAsyncSceneOnMove = 0x2cc; // char : 1
		constexpr auto bTraceComplexOnMove = 0x2cc; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x2cc; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x2cc; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x2cc; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x2cd; // char : 1
		constexpr auto bRenderInMainPass = 0x2cd; // char : 1
		constexpr auto bRenderInCustomPrePass = 0x2cd; // char : 1
		constexpr auto bReflected = 0x2cd; // char : 1
		constexpr auto bReflectedOnLowQuality = 0x2cd; // char : 1
		constexpr auto bFFTWaterMask = 0x2cd; // char : 1
		constexpr auto bVolumeFogMask = 0x2cd; // char : 1
		constexpr auto bAffectsFlatWater = 0x2ce; // char : 1
		constexpr auto bGPUParticlesKillPlane = 0x2ce; // char : 1
		constexpr auto bDontCull = 0x2ce; // char : 1
		constexpr auto bDontSizeOnScreenCull = 0x2ce; // char : 1
		constexpr auto OverriddenShadowMinTexelSize = 0x2d0; // float
		constexpr auto bOverrideShadowMinSizeCulling = 0x2d4; // bool
		constexpr auto bOverrideShadowCascadesExclusion = 0x2d5; // bool
		constexpr auto ExcludedShadowCascades = 0x2d6; // EExcludeFromCascades
		constexpr auto bReceivesDecals = 0x2d8; // char : 1
		constexpr auto bOwnerNoSee = 0x2d8; // char : 1
		constexpr auto bOnlyOwnerSee = 0x2d8; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x2d8; // char : 1
		constexpr auto bIsACloud = 0x2d8; // char : 1
		constexpr auto bUseAsOccluder = 0x2d8; // char : 1
		constexpr auto bSelectable = 0x2d8; // char : 1
		constexpr auto bForceMipStreaming = 0x2d8; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x2d9; // char : 1
		constexpr auto CastShadow = 0x2d9; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2d9; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x2d9; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x2d9; // char : 1
		constexpr auto bCastDynamicShadow = 0x2d9; // char : 1
		constexpr auto bCastStaticShadow = 0x2d9; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x2d9; // char : 1
		constexpr auto bSelfShadowOnly = 0x2da; // char : 1
		constexpr auto bCastFarShadow = 0x2da; // char : 1
		constexpr auto bCastInsetShadow = 0x2da; // char : 1
		constexpr auto bCastCinematicShadow = 0x2da; // char : 1
		constexpr auto bCastHiddenShadow = 0x2da; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x2da; // char : 1
		constexpr auto bCastShadowOnLowQuality = 0x2da; // char : 1
		constexpr auto bLightAsIfStatic = 0x2da; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x2db; // char : 1
		constexpr auto IndirectLightingCacheQuality = 0x2dc; // EIndirectLightingCacheQuality
		constexpr auto bHasCachedStaticLighting = 0x2dd; // bool
		constexpr auto bStaticLightingBuildEnqueued = 0x2de; // bool
		constexpr auto bIgnoreRadialImpulse = 0x2e0; // char : 1
		constexpr auto bIgnoreRadialForce = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x2e0; // char : 1
		constexpr auto bUseEditorCompositing = 0x2e0; // char : 1
		constexpr auto bRenderCustomDepth = 0x2e0; // char : 1
		constexpr auto bAllowVelocityInMaterial = 0x2e0; // char : 1
		constexpr auto CustomDepthStencilValue = 0x2e4; // int32_t
		constexpr auto TranslucencySortPriority = 0x2e8; // int32_t
		constexpr auto VisibilityId = 0x2ec; // int32_t
		constexpr auto LpvBiasMultiplier = 0x2f4; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x2f8; // float
		constexpr auto LpvIntensityMultiplier = 0x2fc; // float
		constexpr auto CustomPrimitiveData = 0x300; // FCustomPrimitiveData
		constexpr auto BodyInstance = 0x310; // FBodyInstance
		constexpr auto bAffectRain = 0x490; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x490; // char : 1
		constexpr auto bSkipRenderingInOuterLPVCascades = 0x490; // char : 1
		constexpr auto bEnableMergeCollisionComponents = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerUnderwater = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerUnderwater = 0x491; // char : 1
		constexpr auto bCanRenderAboveAndBelowWaterAtSameTime = 0x491; // char : 1
		constexpr auto BoundsScale = 0x498; // float
		constexpr auto OcclusionBoundsScale = 0x49c; // float
		constexpr auto LastRenderTime = 0x4a0; // float
		constexpr auto bGPUVisibility = 0x4a4; // bool
		constexpr auto bHasCustomNavigableGeometry = 0x4a5; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x4a6; // ECanBeCharacterBase
		constexpr auto OnComponentHit = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnComponentBeginOverlap = 0x4f1; // FScriptMulticastDelegate
		constexpr auto OnComponentEndOverlap = 0x4f2; // FScriptMulticastDelegate
		constexpr auto OnComponentWake = 0x4f3; // FScriptMulticastDelegate
		constexpr auto OnComponentSleep = 0x4f4; // FScriptMulticastDelegate
		constexpr auto LODParentPrimitive = 0x528; // UPrimitiveComponent*
		constexpr auto PostPhysicsComponentTick = 0x530; // FPrimitiveComponentPostPhysicsTickFunction
		constexpr auto MergedCollisionComponentParent = 0x580; // UPrimitiveComponent*
	}

	namespace n_UBTTask_RunEQSQuery { // : UBTTask_BlackboardBase
		constexpr auto QueryTemplate = 0x88; // UEnvQuery*
		constexpr auto QueryParams = 0x90; // TArray<FEnvNamedValue>
		constexpr auto RunMode = 0xa0; // EEnvQueryRunMode
	}

	namespace n_AStaticMeshItemProxy { // : AItemProxy
		constexpr auto InteractionPointRadius = 0x558; // float
		constexpr auto GroundImpactSfx = 0x560; // UWwiseEvent*
		constexpr auto VFXParams = 0x568; // TArray<FItemProxyImpactVfxParams>
		constexpr auto ZOffsetWhenPlacingWorldProxy = 0x578; // float
		constexpr auto RotationWhenPlacingWorldProxy = 0x57c; // FRotator
		constexpr auto DropOnSurfaceClientTraceChannel = 0x588; // ECollisionChannel
		constexpr auto ThirdPersonMesh = 0x590; // UPrimitiveComponent*
		constexpr auto TTL = 0x598; // float
		constexpr auto WaterInteractionComponent = 0x5a0; // UWaterInteractionComponent*
		constexpr auto BuoyancyComponent = 0x5a8; // UBuoyancyComponent*
		constexpr auto CachedProxySurfaceType = 0x5b1; // EPhysicalSurface
		constexpr auto CachedOnTopOfExistingBuriable = 0x5b2; // bool
		constexpr auto ItemInfo = 0x5b8; // AItemInfo*
		constexpr auto TTLPlayerProximityCutoff = 0x61c; // float
		constexpr auto TTLRecheckPeriod = 0x620; // float
	}

	namespace n_UReviveDebugComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UWaterModifierZoneComponent { // : USceneComponent
		constexpr auto WaterModifierZoneParameters = 0x2b8; // FWaterModifierZoneParameters
		constexpr auto RegisterOnBegin = 0x330; // bool
	}

	namespace n_UBasisComponent { // : USceneComponent
		constexpr auto AttachParent = 0xc8; // USceneComponent*
		constexpr auto AttachChildren = 0xd0; // TArray<USceneComponent*>
		constexpr auto AttachSocketName = 0xe0; // FName
		constexpr auto bRequiresCustomLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteTranslation = 0xe8; // char : 1
		constexpr auto bAbsoluteRotation = 0xe8; // char : 1
		constexpr auto bAbsoluteScale = 0xe8; // char : 1
		constexpr auto bVisible = 0xe8; // char : 1
		constexpr auto bHiddenInGame = 0xe8; // char : 1
		constexpr auto bShouldUpdatePhysicsVolume = 0xe8; // char : 1
		constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0xe9; // char : 1
		constexpr auto bUseAttachParentBound = 0xe9; // char : 1
		constexpr auto bComponentIsUnionOfChildren = 0xe9; // char : 1
		constexpr auto bJitterReduction = 0xe9; // char : 1
		constexpr auto CacheRootVelocity = 0xe9; // char : 1
		constexpr auto bWorldToComponentUpdated = 0xe9; // char : 1
		constexpr auto PhysicsVolume = 0xf8; // TWeakObjectPtr<APhysicsVolume>
		constexpr auto RelativeScale3D = 0x11c; // FVector
		constexpr auto RelativeLocation = 0x128; // FVector
		constexpr auto RelativeRotation = 0x134; // FRotator
		constexpr auto Mobility = 0x220; // EComponentMobility
		constexpr auto DetailMode = 0x221; // EDetailMode
		constexpr auto ComponentVelocity = 0x22c; // FVector
		constexpr auto PhysicsVolumeChangedDelegate = 0x238; // FScriptMulticastDelegate
		constexpr auto SocketVelocitiesToCache = 0x258; // TArray<FName>
	}

	namespace n_UGeyserItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto SpawnOnStart = 0x2b0; // bool
		constexpr auto SpawnParams = 0x2b8; // FItemSpawnParams
		constexpr auto ReferencedSpawnDistributionAsset = 0x2e0; // UWeightedItemDescSpawnDataAsset*
		constexpr auto ReferencedSpawnDistribution = 0x2e8; // UItemSpawnDistributionAsset*
		constexpr auto SpawnTransforms = 0x2f0; // TArray<FItemSpawnTransform>
		constexpr auto SpawnTransformsWithRandomQuantities = 0x300; // TArray<FItemSpawnTransformWithRandomQuantity>
		constexpr auto FeatureToggle = 0x310; // FName
		constexpr auto SpawnSource = 0x318; // ESpawnedItemSource
		constexpr auto SpawnRate = 0x31c; // float
		constexpr auto DestroyProxiesOnEndPlay = 0x320; // bool
		constexpr auto SpawnWithPhysicsEnabled = 0x321; // bool
		constexpr auto DoNotAttachToOwnerWhenSpawned = 0x322; // bool
		constexpr auto DropItemsOnSpawn = 0x323; // bool
		constexpr auto DropItemsUsingPriorityAIDropParams = 0x324; // bool
		constexpr auto SpawnList = 0x328; // TArray<FSpawnInstance>
		constexpr auto SingleItemInstances = 0x338; // TArray<FSpawnInstance>
		constexpr auto SpawnedItems = 0x348; // TArray<FSpawnedItem>
	}

	namespace n_UNavTestRenderingComponent { // : UPrimitiveComponent
		constexpr auto MinDrawDistance = 0x2b8; // float
		constexpr auto LDMaxDrawDistance = 0x2c0; // float
		constexpr auto CachedMaxDrawDistance = 0x2c4; // float
		constexpr auto DepthPriorityGroup = 0x2c8; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x2c9; // ESceneDepthPriorityGroup
		constexpr auto bAlwaysCreatePhysicsState = 0x2cc; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x2cc; // char : 1
		constexpr auto bMultiBodyOverlap = 0x2cc; // char : 1
		constexpr auto bCheckAsyncSceneOnMove = 0x2cc; // char : 1
		constexpr auto bTraceComplexOnMove = 0x2cc; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x2cc; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x2cc; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x2cc; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x2cd; // char : 1
		constexpr auto bRenderInMainPass = 0x2cd; // char : 1
		constexpr auto bRenderInCustomPrePass = 0x2cd; // char : 1
		constexpr auto bReflected = 0x2cd; // char : 1
		constexpr auto bReflectedOnLowQuality = 0x2cd; // char : 1
		constexpr auto bFFTWaterMask = 0x2cd; // char : 1
		constexpr auto bVolumeFogMask = 0x2cd; // char : 1
		constexpr auto bAffectsFlatWater = 0x2ce; // char : 1
		constexpr auto bGPUParticlesKillPlane = 0x2ce; // char : 1
		constexpr auto bDontCull = 0x2ce; // char : 1
		constexpr auto bDontSizeOnScreenCull = 0x2ce; // char : 1
		constexpr auto OverriddenShadowMinTexelSize = 0x2d0; // float
		constexpr auto bOverrideShadowMinSizeCulling = 0x2d4; // bool
		constexpr auto bOverrideShadowCascadesExclusion = 0x2d5; // bool
		constexpr auto ExcludedShadowCascades = 0x2d6; // EExcludeFromCascades
		constexpr auto bReceivesDecals = 0x2d8; // char : 1
		constexpr auto bOwnerNoSee = 0x2d8; // char : 1
		constexpr auto bOnlyOwnerSee = 0x2d8; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x2d8; // char : 1
		constexpr auto bIsACloud = 0x2d8; // char : 1
		constexpr auto bUseAsOccluder = 0x2d8; // char : 1
		constexpr auto bSelectable = 0x2d8; // char : 1
		constexpr auto bForceMipStreaming = 0x2d8; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x2d9; // char : 1
		constexpr auto CastShadow = 0x2d9; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2d9; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x2d9; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x2d9; // char : 1
		constexpr auto bCastDynamicShadow = 0x2d9; // char : 1
		constexpr auto bCastStaticShadow = 0x2d9; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x2d9; // char : 1
		constexpr auto bSelfShadowOnly = 0x2da; // char : 1
		constexpr auto bCastFarShadow = 0x2da; // char : 1
		constexpr auto bCastInsetShadow = 0x2da; // char : 1
		constexpr auto bCastCinematicShadow = 0x2da; // char : 1
		constexpr auto bCastHiddenShadow = 0x2da; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x2da; // char : 1
		constexpr auto bCastShadowOnLowQuality = 0x2da; // char : 1
		constexpr auto bLightAsIfStatic = 0x2da; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x2db; // char : 1
		constexpr auto IndirectLightingCacheQuality = 0x2dc; // EIndirectLightingCacheQuality
		constexpr auto bHasCachedStaticLighting = 0x2dd; // bool
		constexpr auto bStaticLightingBuildEnqueued = 0x2de; // bool
		constexpr auto bIgnoreRadialImpulse = 0x2e0; // char : 1
		constexpr auto bIgnoreRadialForce = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x2e0; // char : 1
		constexpr auto bUseEditorCompositing = 0x2e0; // char : 1
		constexpr auto bRenderCustomDepth = 0x2e0; // char : 1
		constexpr auto bAllowVelocityInMaterial = 0x2e0; // char : 1
		constexpr auto CustomDepthStencilValue = 0x2e4; // int32_t
		constexpr auto TranslucencySortPriority = 0x2e8; // int32_t
		constexpr auto VisibilityId = 0x2ec; // int32_t
		constexpr auto LpvBiasMultiplier = 0x2f4; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x2f8; // float
		constexpr auto LpvIntensityMultiplier = 0x2fc; // float
		constexpr auto CustomPrimitiveData = 0x300; // FCustomPrimitiveData
		constexpr auto BodyInstance = 0x310; // FBodyInstance
		constexpr auto bAffectRain = 0x490; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x490; // char : 1
		constexpr auto bSkipRenderingInOuterLPVCascades = 0x490; // char : 1
		constexpr auto bEnableMergeCollisionComponents = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerUnderwater = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerUnderwater = 0x491; // char : 1
		constexpr auto bCanRenderAboveAndBelowWaterAtSameTime = 0x491; // char : 1
		constexpr auto BoundsScale = 0x498; // float
		constexpr auto OcclusionBoundsScale = 0x49c; // float
		constexpr auto LastRenderTime = 0x4a0; // float
		constexpr auto bGPUVisibility = 0x4a4; // bool
		constexpr auto bHasCustomNavigableGeometry = 0x4a5; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x4a6; // ECanBeCharacterBase
		constexpr auto OnComponentHit = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnComponentBeginOverlap = 0x4f1; // FScriptMulticastDelegate
		constexpr auto OnComponentEndOverlap = 0x4f2; // FScriptMulticastDelegate
		constexpr auto OnComponentWake = 0x4f3; // FScriptMulticastDelegate
		constexpr auto OnComponentSleep = 0x4f4; // FScriptMulticastDelegate
		constexpr auto LODParentPrimitive = 0x528; // UPrimitiveComponent*
		constexpr auto PostPhysicsComponentTick = 0x530; // FPrimitiveComponentPostPhysicsTickFunction
		constexpr auto MergedCollisionComponentParent = 0x580; // UPrimitiveComponent*
	}

	namespace n_AAmbientSound { // : AActor
		constexpr auto AudioComponent = 0x3d0; // UAudioComponent*
	}

	namespace n_UPersistenceIdentifierSettingsAsset { // : UDataAsset
		constexpr auto PersistenceMapData = 0x28; // TArray<UPersistenceIdentifierMap*>
	}

	namespace n_UStorageContainerDescSpawnData { // : UItemDescSpawnData
		constexpr auto ItemDesc = 0x58; // UClass*
	}

	namespace n_UAnimNotify_DestroyCosmeticItem { // : UAnimNotify
		constexpr auto DestroyLocation = 0x38; // EWieldAnimationLocation
	}

	namespace n_UEmissaryShipAffiliationTrackerComponent { // : USceneComponent
		constexpr auto EmissaryCount = 0x2b0; // int32_t
		constexpr auto TrackedCompany = 0x2b8; // UCompany*
		constexpr auto EmissaryRepresentationMesh = 0x2c0; // UClass*
		constexpr auto EmissaryRepresentationTransforms = 0x2e0; // TArray<FTransform>
		constexpr auto EmissaryRepresentationMeshes = 0x2f0; // TArray<UStaticMeshComponent*>
		constexpr auto LoadedEmissaryRepresentationMesh = 0x300; // UEmissaryRepresentationMeshComponent*
	}

	namespace n_UCutsceneAnimationDataAsset { // : UDataAsset
		constexpr auto CutsceneElements = 0x30; // TArray<FCutsceneAnimationElement>
	}

	namespace n_UNPCDialogOptionGiveItem { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto ItemClassToBeGiven = 0xb8; // UItemDesc*
		constexpr auto LinkedDialog = 0xc0; // int32_t
	}

	namespace n_UNPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset { // : UDataAsset
		constexpr auto CrewSizeSettings = 0x28; // TArray<FNPCOnSurfaceCannonManagerCrewSizeSettings>
	}

	namespace n_UItemDiggingEffectsConfig { // : UObject
		constexpr auto FullyDugUpVfxParams = 0x28; // TArray<FItemProxyImpactVfxParams>
	}

	namespace n_UBTTask_SetAIStrategyFromWeightedArray { // : UBTTaskNode
		constexpr auto WeightedStrategies = 0x60; // TArray<FWeightedAIStrategyChance>
	}

	namespace n_UMeshMemoryConstraintsAIPartsDesc { // : UAIPartsDesc
		constexpr auto Mesh = 0x38; // FStringAssetReference
		constexpr auto CachedMeshResourceSize = 0x48; // int64_t
		constexpr auto MeshFallbackCategory = 0x50; // UMeshMemoryConstraintCategory*
		constexpr auto BudgetToCountMemoryAgainstIfNoFallback = 0x58; // UMeshMemoryConstraintBudget*
		constexpr auto OverrideMaterials = 0x60; // TArray<UMaterialInterface*>
		constexpr auto FallbackOverrideMaterials = 0x70; // TArray<FStringAssetReference>
	}

	namespace n_UAsyncTaskDownloadImage { // : UBlueprintAsyncActionBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFail = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UCargoRunParticipantComponent { // : UActorComponent
		constexpr auto ConditionalStatForBootyHandIn = 0xd0; // UConditionalStatsTriggerType*
		constexpr auto CrewsWithPickUpData = 0x1b8; // TArray<FGuid>
	}

	namespace n_AGlitterbeardSlidingDoor { // : ASlidingDoor
		constexpr auto DecalBlendComponent = 0x538; // UEffectBlendControllerComponent*
	}

	namespace n_AWieldableMysteriousNote { // : ASkeletalMeshWieldableItem
		constexpr auto RenderTarget = 0x7a0; // UMaybeCompressedCanvasRenderTarget2D*
		constexpr auto NoteLayout = 0x7a8; // UWieldableMysteriousNoteLayout*
		constexpr auto CanvasWidth = 0x7b0; // int32_t
		constexpr auto CanvasHeight = 0x7b4; // int32_t
		constexpr auto FontScale = 0x7b8; // float
		constexpr auto NamedNotificationInputComponent = 0x810; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x818; // UUsableWieldableComponent*
		constexpr auto InventoryItemComponent = 0x820; // UInventoryItemComponent*
	}

	namespace n_UClientSkeletalMeshComponent { // : USkeletalMeshComponent
		constexpr auto AnimationMode = 0x6d0; // EAnimationMode
		constexpr auto AnimBlueprintGeneratedClass = 0x6d8; // UObject*
		constexpr auto AnimScriptInstance = 0x6e0; // UAnimInstance*
		constexpr auto AnimationData = 0x6e8; // FSingleAnimationPlayData
		constexpr auto CachedLocalAtoms = 0x718; // TArray<FTransform>
		constexpr auto CachedSpaceBases = 0x728; // TArray<FTransform>
		constexpr auto GlobalAnimRateScale = 0x760; // float
		constexpr auto bHasValidBodies = 0x764; // char : 1
		constexpr auto KinematicBonesUpdateType = 0x768; // EKinematicBonesUpdateToPhysics
		constexpr auto bBlendPhysics = 0x76c; // char : 1
		constexpr auto bEnablePhysicsOnDedicatedServer = 0x76c; // char : 1
		constexpr auto bUpdateJointsFromAnimation = 0x76c; // char : 1
		constexpr auto bDisableClothSimulation = 0x76c; // char : 1
		constexpr auto bCollideWithEnvironment = 0x76c; // char : 1
		constexpr auto bCollideWithAttachedChildren = 0x76c; // char : 1
		constexpr auto bLocalSpaceSimulation = 0x76c; // char : 1
		constexpr auto bClothMorphTarget = 0x76c; // char : 1
		constexpr auto bResetAfterTeleport = 0x76d; // char : 1
		constexpr auto TeleportDistanceThreshold = 0x770; // float
		constexpr auto TeleportRotationThreshold = 0x774; // float
		constexpr auto ClothBlendWeight = 0x778; // float
		constexpr auto RootBoneTranslation = 0x780; // FVector
		constexpr auto bNoSkeletonUpdate = 0x78c; // char : 1
		constexpr auto bPauseAnims = 0x78c; // char : 1
		constexpr auto bEnablePerPolyCollision = 0x78c; // char : 1
		constexpr auto BodySetup = 0x790; // UBodySetup*
		constexpr auto bAutonomousTickPose = 0x798; // char : 1
		constexpr auto bForceRefpose = 0x798; // char : 1
		constexpr auto bOldForceRefPose = 0x798; // char : 1
		constexpr auto bShowPrePhysBones = 0x798; // char : 1
		constexpr auto bRequiredBonesUpToDate = 0x798; // char : 1
		constexpr auto bAnimTreeInitialised = 0x798; // char : 1
		constexpr auto bEnableLineCheckWithBounds = 0x798; // char : 1
		constexpr auto LineCheckBoundsScale = 0x79c; // FVector
		constexpr auto RagdollAggregateThreshold = 0x7a8; // int32_t
		constexpr auto OnConstraintBroken = 0x7b0; // FScriptMulticastDelegate
		constexpr auto UseRefPoseToInitialise = 0x7c0; // bool
		constexpr auto LastPoseTickTime = 0x988; // float
	}

	namespace n_AInteractableMockActor { // : AActor
		constexpr auto ActorThatInteracted = 0x3e8; // AActor*
		constexpr auto CanInteractNotifications = 0x3f8; // TArray<UNotificationInputId*>
		constexpr auto PrimitiveComponent = 0x408; // UCapsuleComponent*
		constexpr auto InteractableComponent = 0x410; // UInteractableComponent*
		constexpr auto ActionRulesComponent = 0x418; // UActionRulesComponent*
		constexpr auto CurrentInteractionState = 0x420; // EInteractableState
		constexpr auto CanSetInteractionState = 0x421; // bool
	}

	namespace n_USkeletonAICharacterAudioComponent { // : UAICharacterAudioComponent
		constexpr auto AICharacterAudioParams = 0x2e8; // USkeletonAICharacterAudioComponentParams*
		constexpr auto ShouldResetEmitterOnDeath = 0x2f0; // bool
		constexpr auto FootfallParams = 0x2f8; // USkeletonAudioFootfallControllerParams*
		constexpr auto CachedStrategyID = 0x300; // UAIStrategyId*
		constexpr auto CachedWieldedItemCategory = 0x308; // UItemCategory*
	}

	namespace n_UComponentDelegateBinding { // : UDynamicBlueprintBinding
		constexpr auto ComponentDelegateBindings = 0x28; // TArray<FBlueprintComponentDelegateBinding>
	}

	namespace n_UTaleQuestBranchStepDesc { // : UTaleQuestStepDesc
		constexpr auto Condition = 0x80; // FQuestVariableBool
		constexpr auto IfCondition = 0x90; // UTaleQuestStepDesc*
		constexpr auto ElseCondition = 0x98; // UTaleQuestStepDesc*
	}

	namespace n_ABoxReflectionCapture { // : AReflectionCapture
		constexpr auto CaptureComponent = 0x3d0; // UReflectionCaptureComponent*
	}

	namespace n_UPlayerActivityComponent { // : UActorComponent
		constexpr auto HealthChangeReasonsToTriggerLoseHealthActivity = 0xd0; // TArray<EHealthChangedReason>
		constexpr auto InstigatorsToTriggerLoseHealthActivity = 0xe0; // TArray<UClass*>
	}

	namespace n_UInterpTrackInstProperty { // : UInterpTrackInst
		constexpr auto InterpProperty = 0x28; // UProperty*
		constexpr auto PropertyOuterObjectInst = 0x30; // UObject*
	}

	namespace n_UAnimMontage { // : UAnimCompositeBase
		constexpr auto BlendInTime = 0x78; // float
		constexpr auto BlendOutTime = 0x7c; // float
		constexpr auto BlendOutTriggerTime = 0x80; // float
		constexpr auto CompositeSections = 0x88; // TArray<FCompositeSection>
		constexpr auto SlotAnimTracks = 0x98; // TArray<FSlotAnimationTrack>
		constexpr auto BranchingPoints = 0xa8; // TArray<FBranchingPoint>
		constexpr auto bEnableRootMotionTranslation = 0xb8; // bool
		constexpr auto bEnableRootMotionRotation = 0xb9; // bool
		constexpr auto RootMotionRootLock = 0xba; // ERootMotionRootLock
		constexpr auto BranchingPointMarkers = 0xc0; // TArray<FBranchingPointMarker>
		constexpr auto bAnimBranchingPointNeedsSort = 0xd0; // bool
		constexpr auto BranchingPointStateNotifyIndices = 0xd8; // TArray<int32_t>
	}

	namespace n_UPocketWatchAnimationInstance { // : UWieldableItemAnimationInstance
		constexpr auto MinuteHandRotation = 0x630; // FRotator
		constexpr auto HourHandRotation = 0x63c; // FRotator
	}

	namespace n_UMeleeAttackLockOnComponentSettings { // : UDataAsset
		constexpr auto CameraModifierSettings = 0x28; // ULockOnCameraModifierSettings*
		constexpr auto BreakDistance = 0x30; // float
		constexpr auto DelayTargetEvaluationUntilEndOfStrike = 0x34; // bool
		constexpr auto AllowTargetSwitching = 0x35; // bool
		constexpr auto MaxLockOnAngle = 0x38; // float
		constexpr auto MaxLockOnDistance = 0x3c; // float
	}

	namespace n_UAnimNotifyAdditionalEventsWwiseEmitterComponent { // : UAnimNotifyWwiseEmitterComponent
		constexpr auto AnimNotifyObservers = 0x2e0; // TArray<FAnimNotifyWwiseObserver>
	}

	namespace n_UTargetedStatCondition { // : UStatCondition
		constexpr auto TargetSelector = 0x28; // UStatConditionTargetSelector*
	}

	namespace n_UCharacterAnimationInstance { // : UAnimInstance
		constexpr auto IKLeftHandUpdateParams = 0x450; // FCharacterAnimationIKUpdateParams
		constexpr auto IKRightHandUpdateParams = 0x490; // FCharacterAnimationIKUpdateParams
		constexpr auto RightHandIKSocketName = 0x4d0; // FName
		constexpr auto LeftHandIKSocketName = 0x4d8; // FName
		constexpr auto RightHandIK = 0x4e0; // FLimbIK
		constexpr auto LeftHandIK = 0x540; // FLimbIK
		constexpr auto RightFootIK = 0x5a0; // FLimbIK
		constexpr auto LeftFootIK = 0x600; // FLimbIK
	}

	namespace n_ADebugDioramaCreator { // : ADebugAISpawnerCreator
		constexpr auto AIDioramaDesc = 0x428; // UAIDioramaDesc*
		constexpr auto Location = 0x430; // UAIDioramaLocationSourceComponent*
		constexpr auto AIDioramaController = 0x438; // UAIDioramaController*
	}

	namespace n_USoundNodeEnveloper { // : USoundNode
		constexpr auto LoopStart = 0x38; // float
		constexpr auto LoopEnd = 0x3c; // float
		constexpr auto DurationAfterLoop = 0x40; // float
		constexpr auto LoopCount = 0x44; // int32_t
		constexpr auto bLoopIndefinitely = 0x48; // char : 1
		constexpr auto bLoop = 0x48; // char : 1
		constexpr auto VolumeInterpCurve = 0x50; // UDistributionFloatConstantCurve*
		constexpr auto PitchInterpCurve = 0x58; // UDistributionFloatConstantCurve*
		constexpr auto VolumeCurve = 0x60; // FRuntimeFloatCurve
		constexpr auto PitchCurve = 0xe0; // FRuntimeFloatCurve
		constexpr auto PitchMin = 0x160; // float
		constexpr auto PitchMax = 0x164; // float
		constexpr auto VolumeMin = 0x168; // float
		constexpr auto VolumeMax = 0x16c; // float
	}

	namespace n_ACapstanArm { // : AControllableObject
		constexpr auto MeshComponent = 0x510; // UStaticMeshComponent*
		constexpr auto IntentComponent = 0x518; // UControllableIntentComponent*
		constexpr auto RepairableComponent = 0x520; // URepairableComponent*
		constexpr auto IntactHandleMesh = 0x528; // UStaticMesh*
		constexpr auto BrokenHandleMesh = 0x530; // UStaticMesh*
		constexpr auto RepairedHandleMesh = 0x538; // UStaticMesh*
	}

	namespace n_USurfaceWaterComponent { // : UPrimitiveComponent
		constexpr auto BoxExtent = 0x588; // FVector
		constexpr auto UpdateCullDistance = 0x594; // float
		constexpr auto AddWaterMaskTexture = 0x598; // UTexture2D*
		constexpr auto BaseHeightTexture = 0x5a0; // UTexture2D*
		constexpr auto TextureSizeX = 0x5a8; // int32_t
		constexpr auto TextureSizeY = 0x5ac; // int32_t
		constexpr auto WetnessPerStrength = 0x5b0; // float
		constexpr auto WetnessDecayRate = 0x5b4; // float
		constexpr auto SplatData = 0x5d0; // FVector4
		constexpr auto WaterHeightTexture = 0x5e0; // UTextureRenderTarget2D*
		constexpr auto WaterHeightTexturePingPong = 0x5e8; // UTextureRenderTarget2D*
		constexpr auto NormalTexture = 0x5f0; // UTextureRenderTarget2D*
		constexpr auto OutflowTexture = 0x5f8; // UTextureRenderTarget2D*
		constexpr auto OutflowTexturePingPong = 0x600; // UTextureRenderTarget2D*
	}

	namespace n_UWeightedAwardableComponent { // : UActorComponent
		constexpr auto RewardDistribution = 0xd0; // FWeightedRewardDistribution
		constexpr auto RewardDestination = 0xe8; // ERewardDestinationType
	}

	namespace n_UTaleQuestAddRiddleMapStepDesc { // : UTaleQuestAddRiddleMapBaseStepDesc
		constexpr auto Text = 0x98; // TArray<FText>
	}

	namespace n_UStatusResponseSetScalarParamOnCharacter { // : UStatusResponse
		constexpr auto ParamsToChange = 0x30; // TArray<FScalarParamInfo>
	}

	namespace n_UInteractableGrammaticalGenderComponent { // : UActorComponent
		constexpr auto GrammaticalGender = 0xd0; // EInteractableGrammaticalGender
	}

	namespace n_UChildActorComponent { // : USceneComponent
		constexpr auto ChildActorClass = 0x2b0; // AActor*
		constexpr auto ChildActor = 0x2b8; // AActor*
	}

	namespace n_UPetDitherComponent { // : UDitherComponent
		constexpr auto FindMeshOnOwner = 0xd0; // bool
		constexpr auto FadeTime = 0xd4; // float
		constexpr auto DynamicMaterialsPerMeshComponent = 0xe8; // TMap<UMeshComponent*, FDynamicMaterialsList>
		constexpr auto PurgeOverrideMatsOnDynamicMatMeshLoaded = 0x1bc; // bool
		constexpr auto FadeInOnStart = 0x1bd; // bool
	}

	namespace n_UBullRushAIAbility { // : UMeleeChargeAIAbility
		constexpr auto CachedWorld = 0x98; // UWorld*
	}

	namespace n_AMaterialInstanceActor { // : AActor
		constexpr auto TargetActors = 0x3d0; // TArray<AActor*>
	}

	namespace n_UMovieSceneSlomoTrack { // : UMovieSceneFloatTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UInt32Binding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UMerchantCrateProviderComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ASirenActionStateCreatorDefinition { // : AActionStateCreatorDefinition
		constexpr auto AISpawnParams = 0x3d0; // FAISpawnActionStateParams
		constexpr auto AIDeadParams = 0x3e0; // FAISwimmingCreatureDeadActionStateParams
		constexpr auto UseItemParams = 0x400; // FUseItemActionStateParams
		constexpr auto HiddenStateParams = 0x401; // FHiddenActionStateParams
	}

	namespace n_AEventRoom { // : AActor
		constexpr auto ClearSpawnProgressOnRoomActivate = 0x3d8; // bool
		constexpr auto EntranceMechanisms = 0x3e0; // TArray<AActor*>
		constexpr auto ExitMechanisms = 0x3f0; // TArray<AActor*>
		constexpr auto PlayerLeftRoomDelegate = 0x400; // FScriptMulticastDelegate
		constexpr auto PlayerEnteredRoomDelegate = 0x410; // FScriptMulticastDelegate
		constexpr auto RoomAreaComponent = 0x420; // UBoxComponent*
		constexpr auto StartedDelegate = 0x428; // FScriptMulticastDelegate
		constexpr auto FailDelegate = 0x438; // FScriptMulticastDelegate
		constexpr auto CompletedDelegate = 0x448; // FScriptMulticastDelegate
		constexpr auto AftermathStartedDelegate = 0x458; // FScriptMulticastDelegate
	}

	namespace n_UMechanismOneShotEvent { // : UMechanismEvent
		constexpr auto Owner = 0x28; // AActor*
	}

	namespace n_URelinquishIslandSalvageSpawnLocationOnDestructionComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AAthenaAIController { // : AAthenaAIControllerBase
		constexpr auto CurrentTargetPerceivedNotVisibleAge = 0x63c; // float
		constexpr auto SightConfig = 0x680; // UAISenseConfig_Sight*
		constexpr auto HearingConfig = 0x688; // UAISenseConfig_Hearing*
		constexpr auto DamageSenseConfig = 0x690; // UAISenseConfig_Damage*
		constexpr auto AIStrategySenseSettingOverrides = 0x6e0; // TArray<FAthenaAIControllerSenseSettingOverride>
		constexpr auto CurrentNotSeenPerceivedActor = 0x8c8; // AActor*
		constexpr auto PendingSpawnTriggerActor = 0x8d0; // AActor*
	}

	namespace n_UNavigationGraphNodeComponent { // : USceneComponent
		constexpr auto Node = 0x2b0; // FNavGraphNode
		constexpr auto NextNodeComponent = 0x2c8; // UNavigationGraphNodeComponent*
		constexpr auto PrevNodeComponent = 0x2d0; // UNavigationGraphNodeComponent*
	}

	namespace n_UTaleQuestCheckpointServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto Notification = 0x28; // UPopUpMessageDesc*
	}

	namespace n_UBlackboardKeyType_NativeEnum { // : UBlackboardKeyType
		constexpr auto EnumName = 0x30; // FString
		constexpr auto EnumType = 0x40; // UEnum*
	}

	namespace n_UMastFlammableComponent { // : UActorFlammableComponent
		constexpr auto FireGridLocation = 0x118; // FVector
	}

	namespace n_UObtainClueOnWieldComponent { // : UOnItemWieldedComponent
		constexpr auto ClueToObtain = 0x140; // UClueDescriptor*
		constexpr auto ClueSiteType = 0x148; // UClueSiteType*
	}

	namespace n_UAIInteractableSpawner { // : UAISpawner
		constexpr auto AIInteractableType = 0x428; // UAIInteractableType*
		constexpr auto InhabitedChance = 0x430; // float
		constexpr auto DelayAfterSuccessfulInhabitedCheck = 0x438; // FWeightedProbabilityRangeOfRanges
		constexpr auto DelayAfterFailedInhabitedCheck = 0x468; // FWeightedProbabilityRangeOfRanges
		constexpr auto SpawnForInteractableChance = 0x498; // float
		constexpr auto DelayAfterSuccessfulSpawnOnInteractableCheck = 0x4a0; // FWeightedProbabilityRangeOfRanges
		constexpr auto DelayAfterFailedSpawnOnInteractableCheck = 0x4d0; // FWeightedProbabilityRangeOfRanges
		constexpr auto RunInhabitedSimulation = 0x500; // bool
		constexpr auto RunSpawnForInteractableSimulation = 0x501; // bool
		constexpr auto NumIterations = 0x504; // int32_t
		constexpr auto CachedPlaymode = 0x520; // EPlayMode
	}

	namespace n_UShipDescAsset { // : UObject
		constexpr auto Desc = 0x28; // FShipDesc
	}

	namespace n_UAthenaAnimationDeathDataAsset { // : UDataAsset
		constexpr auto SwimmingSurfaceDeath = 0x28; // UAnimSequence*
		constexpr auto LocomotionDeath = 0x30; // UAnimSequence*
		constexpr auto DrowningDeath = 0x38; // UAnimSequence*
		constexpr auto WakeUp = 0x40; // FStringAssetReference
		constexpr auto WakeUpSwimming = 0x50; // FStringAssetReference
		constexpr auto DrowningDeathBS = 0x60; // UBlendSpace1D*
		constexpr auto BeckonInto = 0x68; // FStringAssetReference
		constexpr auto BeckonLoop = 0x78; // FStringAssetReference
		constexpr auto RevivingStateId = 0x88; // UAnimationStateId*
		constexpr auto DeadStateId = 0x90; // UAnimationStateId*
	}

	namespace n_UStaticMeshAudioEmittersComponent { // : USceneComponent
		constexpr auto InstanceAssociations = 0x2b0; // TArray<FStaticMeshComponentAudioAssociation>
	}

	namespace n_ULoadoutService { // : UObject
		constexpr auto LoadoutEntries = 0x1188; // TArray<FLoadoutEntry>
	}

	namespace n_AInteractableObject { // : AInteractableBase
		constexpr auto FilterDesc = 0x410; // UOneShotInteractableFilterDesc*
		constexpr auto Verb = 0x418; // FText
	}

	namespace n_UMovieSceneCapture { // : UObject
		constexpr auto CaptureType = 0x38; // FCaptureProtocolID
		constexpr auto ProtocolSettings = 0x40; // UMovieSceneCaptureProtocolSettings*
		constexpr auto Settings = 0x48; // FMovieSceneCaptureSettings
		constexpr auto bUseSeparateProcess = 0x98; // bool
		constexpr auto bCloseEditorWhenCaptureStarts = 0x99; // bool
		constexpr auto AdditionalCommandLineArguments = 0xa0; // FString
		constexpr auto InheritedCommandLineArguments = 0xb0; // FString
	}

	namespace n_APhysicsVolume { // : AVolume
		constexpr auto TerminalVelocity = 0x408; // float
		constexpr auto Priority = 0x40c; // int32_t
		constexpr auto FluidFriction = 0x410; // float
		constexpr auto bWaterVolume = 0x414; // char : 1
		constexpr auto bPhysicsOnContact = 0x414; // char : 1
	}

	namespace n_UHideInObjectInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USkyLightComponent { // : ULightComponentBase
		constexpr auto SourceType = 0x2e0; // ESkyLightSourceType
		constexpr auto Cubemap = 0x2e8; // UTextureCube*
		constexpr auto SkyDistanceThreshold = 0x2f0; // float
		constexpr auto bLowerHemisphereIsBlack = 0x2f4; // bool
		constexpr auto OcclusionMaxDistance = 0x2f8; // float
		constexpr auto Contrast = 0x2fc; // float
		constexpr auto MinOcclusion = 0x300; // float
		constexpr auto OcclusionTint = 0x304; // FColor
		constexpr auto ScaleForInteriors = 0x308; // float
		constexpr auto BlendDestinationCubemap = 0x3b8; // UTextureCube*
	}

	namespace n_UMultipleContextsRadialContext { // : URadialContextBase
		constexpr auto RadialContexts = 0x28; // TArray<URadialContextBase*>
	}

	namespace n_UBTDecorator_KeepInCone { // : UBTDecorator
		constexpr auto ConeHalfAngle = 0x68; // float
		constexpr auto ConeOrigin = 0x70; // FBlackboardKeySelector
		constexpr auto Observed = 0x98; // FBlackboardKeySelector
		constexpr auto bUseSelfAsOrigin = 0xc0; // char : 1
		constexpr auto bUseSelfAsObserved = 0xc0; // char : 1
	}

	namespace n_AAIManagerService { // : AActor
		constexpr auto LoadedAIPawnClasses = 0x4d8; // TArray<UObject*>
		constexpr auto LoadedAIItemDropComponentClasses = 0x4e8; // TArray<UObject*>
		constexpr auto AmbientWaterSpawnerManager = 0x500; // AAmbientWaterSpawnerManager*
		constexpr auto PlayerTrackers = 0x838; // TArray<UAIPlayerTracker*>
		constexpr auto CustomPlayersTrackerDatas = 0x848; // TArray<FCustomPlayersAITrackerData>
		constexpr auto SpawnersPendingShutdown = 0x958; // TArray<UAISpawner*>
		constexpr auto AITypeList = 0xa10; // UAthenaAITypeListDataAsset*
		constexpr auto AISpawnContextList = 0xa18; // UAISpawnContextList*
	}

	namespace n_UBTTask_BurrowIntoGround { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_UWaitForMechanismActionCompletionStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UWaitForMechanismActionCompletionStepDesc*
	}

	namespace n_UTutorialStarter { // : UObject
		constexpr auto AthenaPlayerController = 0x28; // AAthenaPlayerController*
		constexpr auto ShouldPlayIntroAnimatic = 0x30; // bool
		constexpr auto ShouldDisableAllIntroBehaviour = 0x31; // bool
		constexpr auto IntroAnimationSettings = 0x34; // FFirstPersonAnimaticSettings
	}

	namespace n_UMaterialExpressionFunctionInput { // : UMaterialExpression
		constexpr auto Preview = 0x70; // FExpressionInput
		constexpr auto InputName = 0xa8; // FString
		constexpr auto Description = 0xb8; // FString
		constexpr auto Id = 0xc8; // FGuid
		constexpr auto InputType = 0xd8; // EFunctionInputType
		constexpr auto PreviewValue = 0xe0; // FVector4
		constexpr auto bUsePreviewValueAsDefault = 0xf0; // char : 1
		constexpr auto SortPriority = 0xf4; // int32_t
		constexpr auto bCompilingFunctionPreview = 0xf8; // char : 1
	}

	namespace n_UCargoRunQuestRandomRequiredItemsDataAsset { // : UDataAsset
		constexpr auto CategoryGroups = 0x28; // TArray<FCargoRunQuestCategoryGroup>
	}

	namespace n_UBTService_IncrementFloatValueWithTimeSpentInBranch { // : UBTService_BlackboardBase
		constexpr auto TimeMultiplier = 0x98; // float
	}

	namespace n_UMechanismAnimationEvent { // : UMechanismEvent
		constexpr auto Type = 0x38; // EMechanismAnimationEventType
	}

	namespace n_UWieldedItemSizeOneShotInteractableFilterDesc { // : UOneShotInteractableFilterDesc
		constexpr auto WieldableItemSizesToDisableInteraction = 0x28; // TArray<EWieldableItemSize>
	}

	namespace n_UMapRadialContentRule { // : URadialContentRule
		constexpr auto RadialIconScale = 0x78; // float
		constexpr auto RadialIconOffset = 0x7c; // FVector2D
		constexpr auto MappedSlots = 0xd8; // TArray<AActor*>
	}

	namespace n_UMaterialInterface { // : UObject
		constexpr auto SubsurfaceProfile = 0x30; // USubsurfaceProfile*
		constexpr auto LightmassSettings = 0x3c; // FLightmassMaterialInterfaceSettings
	}

	namespace n_UNPCHintDialogueClueSiteData { // : UClueSiteData
		constexpr auto NPCData = 0x38; // FNPCData
	}

	namespace n_UPhrasesRadialDataAsset { // : UDataAsset
		constexpr auto Phrases = 0x28; // TArray<FPhraseData>
	}

	namespace n_UBTDecorator_CompareBlackboardClassValue { // : UBTDecorator_BlackboardBase
		constexpr auto Class = 0x90; // UObject*
		constexpr auto Invert = 0x98; // bool
		constexpr auto CachedDescription = 0xa0; // FString
		constexpr auto NotifyObserver = 0xb0; // EBTBlackboardRestart
	}

	namespace n_AControllablePulley { // : AControllableObject
		constexpr auto IntentComponent = 0x510; // UControllableIntentComponent*
	}

	namespace n_UTaleQuestCommonToolServiceDesc { // : UTaleQuestToolServiceDesc
		constexpr auto ToolDescs = 0x30; // TArray<UItemDesc*>
	}

	namespace n_UAbandonedNoteClueDescriptorGenerator { // : UClueDescriptorGenerator
		constexpr auto DescriptorType = 0x28; // UClueDescriptor*
		constexpr auto SupportedDestinationTypes = 0x30; // TArray<UClueDestinationDescriptor*>
	}

	namespace n_ADestroyableMechanismTrigger { // : AActor
		constexpr auto HealthComponent = 0x3d0; // UHealthComponent*
		constexpr auto DamageableComponent = 0x3d8; // UOptInDamageableComponent*
		constexpr auto MechanismTriggerComponent = 0x3e0; // UMechanismTriggerComponent*
		constexpr auto TriggerMechanismAtOrBelowHealthValue = 0x3e8; // float
	}

	namespace n_UStopSuppressingCutsceneResponsesStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UCircularThrobber { // : UWidget
		constexpr auto NumberOfPieces = 0x138; // int32_t
		constexpr auto Period = 0x13c; // float
		constexpr auto Radius = 0x140; // float
		constexpr auto PieceImage = 0x148; // USlateBrushAsset*
		constexpr auto Image = 0x150; // FSlateBrush
	}

	namespace n_UQuestBookPageBundle { // : UDataAsset
		constexpr auto Pages = 0x28; // TArray<FStringAssetReference>
	}

	namespace n_USeaIdValidationDataAsset { // : UDataAsset
		constexpr auto AllSeaIds = 0x28; // TArray<USeaId*>
	}

	namespace n_AGameplayAbilityWorldReticle_ActorVisualization { // : AGameplayAbilityWorldReticle
		constexpr auto CollisionComponent = 0x3f0; // UCapsuleComponent*
		constexpr auto VisualizationComponents = 0x3f8; // TArray<UActorComponent*>
	}

	namespace n_AFishingRod { // : ASkeletalMeshWieldableItem
		constexpr auto AuxiliaryRadialCategoryFilter = 0x7b0; // UItemCategory*
		constexpr auto AuxiliaryRadialAllowedItems = 0x7b8; // TArray<UItemDesc*>
		constexpr auto NamedNotificationInputComponent = 0x7c8; // UNamedNotificationInputComponent*
		constexpr auto InventoryItem = 0x7d0; // UInventoryItemComponent*
		constexpr auto FishSelector = 0x7d8; // FFishingFishSelector
		constexpr auto FishingRodSetupDataAsset = 0x8b0; // UFishingRodSetupDataAsset*
		constexpr auto FishingSetupDataAssetInToSea = 0x8b8; // UFishingSetupDataAsset*
		constexpr auto FishingSetupDataAssetInToPond = 0x8c0; // UFishingSetupDataAsset*
		constexpr auto FishingMiniGameSetupDataAssetInToSea = 0x8c8; // UFishingMiniGameSetupDataAsset*
		constexpr auto FishingMiniGameSetupDataAssetInToPond = 0x8d0; // UFishingMiniGameSetupDataAsset*
		constexpr auto FishingFreeLookConstrainsDataAsset = 0x8d8; // UFishingFreeLookConstrainsDataAsset*
		constexpr auto MaterialManipulationComponent = 0x8e0; // UMaterialManipulationComponent*
		constexpr auto Rope = 0x8e8; // UFishingLineRenderComponent*
		constexpr auto InteractionPointOffset = 0x8f0; // FVector
		constexpr auto StatTriggerForCatchingAFish = 0x900; // UConditionalStatsTriggerType*
		constexpr auto ServerState = 0x908; // EFishingRodServerState
		constexpr auto IsReeling = 0x909; // bool
		constexpr auto ReplicatedFishState = 0x910; // FFishingRodReplicatedFishState
		constexpr auto FishInteractionProxy = 0x920; // AActor*
		constexpr auto FishingMiniGamePlayerInput = 0x928; // FFishingMiniGamePlayerInput
		constexpr auto PlayerIsBattlingFish = 0x92b; // bool
		constexpr auto BaitOnFloat = 0x930; // AItemProxy*
		constexpr auto FishingFloatRelativeCentreLocation = 0x938; // FVector
		constexpr auto FishingFloatOffset = 0x944; // FVector
		constexpr auto CastIsInToAPond = 0x950; // bool
		constexpr auto CaughtFishClass = 0x958; // AFishingFish*
		constexpr auto BaitOnRodType = 0x960; // EBaitType
		constexpr auto BattlingState = 0x961; // EFishingRodBattlingState
		constexpr auto ComedyItemOnFloat = 0x968; // AItemProxy*
		constexpr auto CaughtComedyItemDesc = 0x970; // UItemDesc*
		constexpr auto TimeReelingWhenBattlingBeforeSnapping = 0x978; // float
		constexpr auto FishingMiniGamePercentageInToEscaping = 0x97c; // float
		constexpr auto MinimumDistanceFromPlayer = 0x980; // float
		constexpr auto FishingFloatActor = 0x988; // AActor*
		constexpr auto LocalOnlyBaitOnFloat = 0x990; // AItemProxy*
		constexpr auto FishingMiniGame = 0x998; // FFishingMiniGame
		constexpr auto NonReplicatedLocalFishingFishOnRod = 0x9e8; // AFishingFish*
		constexpr auto LocalOnlyComedyItemOnFloat = 0x9f0; // AItemProxy*
		constexpr auto IsInFishingActionState = 0x9f8; // bool
	}

	namespace n_UStatusEffectVolumeComponent { // : USceneComponent
		constexpr auto UseOverlapEventsFromParentComponent = 0x2b0; // bool
		constexpr auto StatusEffectsToMaintain = 0x2b8; // TArray<FStatus>
	}

	namespace n_UNPCDialogHeaderByRank { // : UNPCDialogHeader
		constexpr auto Text = 0x28; // TArray<FNPCDialogRankGatedText>
		constexpr auto DefaultText = 0x38; // FText
	}

	namespace n_UBTDecorator_TargetInRange { // : UBTDecorator_CompareBlackboardValues
		constexpr auto EnterRange = 0x80; // FAIDataProviderFloatValue
		constexpr auto ExitRange = 0xb0; // FAIDataProviderFloatValue
		constexpr auto TargetKey = 0xe0; // FBlackboardKeySelector
	}

	namespace n_UCaptainsClubhouseSettingsDataAsset { // : UDataAsset
		constexpr auto CaptainsClubhousePawn = 0x28; // APawn*
	}

	namespace n_UWindDirectionalSourceComponent { // : USceneComponent
		constexpr auto Strength = 0x2b0; // float
		constexpr auto Speed = 0x2b4; // float
		constexpr auto MinGustAmount = 0x2b8; // float
		constexpr auto MaxGustAmount = 0x2bc; // float
	}

	namespace n_UTaleQuestSpawnDebrisAtClueSiteStepDesc { // : UTaleQuestStepDesc
		constexpr auto ClueSiteVar = 0x80; // FQuestVariableClueSite
		constexpr auto DebrisTypeVar = 0x90; // FQuestVariableActorAssetType
		constexpr auto OutDebrisActorVar = 0xa0; // FQuestVariableActor
	}

	namespace n_AEmitter { // : AActor
		constexpr auto ParticleSystemComponent = 0x3d0; // UParticleSystemComponent*
		constexpr auto bDestroyOnSystemFinish = 0x3d8; // char : 1
		constexpr auto bPostUpdateTickGroup = 0x3d8; // char : 1
		constexpr auto bCurrentlyActive = 0x3d8; // char : 1
		constexpr auto OnParticleSpawn = 0x3e0; // FScriptMulticastDelegate
		constexpr auto OnParticleBurst = 0x3f0; // FScriptMulticastDelegate
		constexpr auto OnParticleDeath = 0x400; // FScriptMulticastDelegate
		constexpr auto OnParticleCollide = 0x410; // FScriptMulticastDelegate
	}

	namespace n_ALevelBounds { // : AActor
		constexpr auto bAutoUpdateBounds = 0x3d0; // bool
	}

	namespace n_UFootstepIDAsset { // : UDataAsset
		constexpr auto FootstepName = 0x28; // FName
	}

	namespace n_UQuestBookPageList { // : UDataAsset
		constexpr auto Pages = 0x28; // TArray<FPageReference>
		constexpr auto InitialPages = 0x38; // TArray<FStringAssetReference>
	}

	namespace n_UMatchesAllConditionsStatCondition { // : UStatCondition
		constexpr auto Conditions = 0x28; // TArray<UStatCondition*>
	}

	namespace n_UTaleQuestAddBountyMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UStorySpawnedActorsCollectionDataAsset { // : UDataAsset
		constexpr auto StorySpawnedActorsAssetList = 0x28; // TArray<UStorySpawnedActorsDataAsset*>
	}

	namespace n_UFrontendCameraComponent { // : UActorComponent
		constexpr auto EnteredEngageState = 0xc8; // FScriptMulticastDelegate
		constexpr auto EnteredShipSelectState = 0xd8; // FScriptMulticastDelegate
		constexpr auto StartMapTableAnimation = 0xe8; // FScriptMulticastDelegate
		constexpr auto SkipMapTableAnimation = 0xf8; // FScriptMulticastDelegate
		constexpr auto SetMapTableAnimationPlaybackRate = 0x108; // FScriptMulticastDelegate
		constexpr auto GoToPirateSelectCamera = 0x118; // FScriptMulticastDelegate
		constexpr auto OnArenaTutorialAnimationStart = 0x128; // FScriptMulticastDelegate
		constexpr auto OnArenaTutorialAnimationEnd = 0x138; // FScriptMulticastDelegate
		constexpr auto SkipArenaTutorialAnimation = 0x148; // FScriptMulticastDelegate
	}

	namespace n_UGameplayTask { // : UObject
		constexpr auto InstanceName = 0x28; // FName
	}

	namespace n_UGameplayEffectExtension_LifestealTest { // : UGameplayEffectExtension
		constexpr auto HealthRestoreGameplayEffect = 0x48; // UGameplayEffect*
	}

	namespace n_AChaliceStatue { // : AActor
		constexpr auto Mesh = 0x3d0; // UStaticMeshComponent*
		constexpr auto PhaseParticleSystems = 0x3d8; // TArray<UParticleSystemComponent*>
		constexpr auto EventDispatcher = 0x430; // FObjectMessagingDispatcher
	}

	namespace n_UTaleQuestGenerateDebrisTypeForVoyageRankStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UShopDialogue { // : UDataAsset
		constexpr auto ConfirmPurchaseMessage = 0x28; // FText
		constexpr auto PurchaseFailedMessage = 0x60; // FText
		constexpr auto PurchasePendingMessage = 0x98; // FText
		constexpr auto PurchaseSuccessMessage = 0xd0; // FText
		constexpr auto GetShopOffersFailedMessage = 0x108; // FText
	}

	namespace n_UMaterialExpressionPerInstanceFadeAmount { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_AVomitProjectile { // : ALiquidProjectile
		constexpr auto CallParentFunctionalityOnImpactEffects = 0x728; // bool
	}

	namespace n_ULightWeightStatusEffectManagerComponent { // : UActorComponent
		constexpr auto RecipientResponseList = 0xe8; // UStatusRecipientResponseList*
		constexpr auto ActiveEffects = 0xf0; // TArray<FActiveStatusEffect>
	}

	namespace n_UMaterialExpressionCeil { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
	}

	namespace n_UVectorFieldStatic { // : UVectorField
		constexpr auto SizeX = 0x48; // int32_t
		constexpr auto SizeY = 0x4c; // int32_t
		constexpr auto SizeZ = 0x50; // int32_t
	}

	namespace n_UMechanismEvent { // : UObject
		constexpr auto Owner = 0x28; // AActor*
	}

	namespace n_UAreaOfEffectHealAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto ChanceToGoOnCooldownInsteadOfExecuting = 0xc8; // float
		constexpr auto HealthPercentageThresholdToHeal = 0xcc; // float
		constexpr auto StatusEffectZone = 0xd0; // AActor*
		constexpr auto MinimumTimeSpentHealing = 0xd8; // float
		constexpr auto MaximumTimeSpentHealing = 0xdc; // float
	}

	namespace n_ABrush { // : AActor
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UMaterialExpressionAtmosphericFogColor { // : UMaterialExpression
		constexpr auto WorldPosition = 0x70; // FExpressionInput
	}

	namespace n_UBTTask_MoveToFailOnDistanceToSeenActors { // : UBTTask_MoveToFailOnDistanceChange
		constexpr auto FailOnDistanceBeingLess = 0xb8; // bool
		constexpr auto FailDistance = 0xbc; // float
	}

	namespace n_ULiquidContainerTestMaterial { // : UMaterial
		constexpr auto PhysMaterial = 0x58; // UPhysicalMaterial*
		constexpr auto DiffuseColor = 0x60; // FColorMaterialInput
		constexpr auto SpecularColor = 0xa0; // FColorMaterialInput
		constexpr auto BaseColor = 0xe0; // FColorMaterialInput
		constexpr auto Metallic = 0x120; // FScalarMaterialInput
		constexpr auto Specular = 0x160; // FScalarMaterialInput
		constexpr auto Roughness = 0x1a0; // FScalarMaterialInput
		constexpr auto Normal = 0x1e0; // FVectorMaterialInput
		constexpr auto EmissiveColor = 0x228; // FColorMaterialInput
		constexpr auto Opacity = 0x268; // FScalarMaterialInput
		constexpr auto OpacityMask = 0x2a8; // FScalarMaterialInput
		constexpr auto MaterialDomain = 0x2e8; // EMaterialDomain
		constexpr auto BlendMode = 0x2e9; // EBlendMode
		constexpr auto DecalBlendMode = 0x2ea; // EDecalBlendMode
		constexpr auto bDecalNoEmissiveOrRoughness = 0x2eb; // bool
		constexpr auto bDecalEnableStencil = 0x2ec; // bool
		constexpr auto MaterialDecalResponse = 0x2ed; // EMaterialDecalResponse
		constexpr auto ShadingModel = 0x2ee; // EMaterialShadingModel
		constexpr auto OpacityMaskClipValue = 0x2f0; // float
		constexpr auto DepthWeightScale = 0x2f4; // float
		constexpr auto DepthWeightExponent = 0x2f8; // float
		constexpr auto DepthWeightBase = 0x2fc; // float
		constexpr auto bBlendedOITAfterTranslucency = 0x300; // char : 1
		constexpr auto bForceResolution = 0x300; // char : 1
		constexpr auto ForcedResolution = 0x304; // ELowResTranslucencyCascade
		constexpr auto FirstSplitDistance = 0x308; // float
		constexpr auto SecondSplitDistance = 0x30c; // float
		constexpr auto FullResInFrontMaxDistance = 0x310; // float
		constexpr auto FullResInFront = 0x314; // char : 1
		constexpr auto PopPerParticle = 0x314; // char : 1
		constexpr auto WorldPositionOffset = 0x318; // FVectorMaterialInput
		constexpr auto WorldDisplacement = 0x360; // FVectorMaterialInput
		constexpr auto TessellationMultiplier = 0x3a8; // FScalarMaterialInput
		constexpr auto SubsurfaceColor = 0x3e8; // FColorMaterialInput
		constexpr auto ClearCoat = 0x428; // FScalarMaterialInput
		constexpr auto ClearCoatRoughness = 0x468; // FScalarMaterialInput
		constexpr auto AmbientOcclusion = 0x4a8; // FScalarMaterialInput
		constexpr auto Refraction = 0x4e8; // FScalarMaterialInput
		constexpr auto BillboardColor = 0x528; // FColorMaterialInput
		constexpr auto BillboardParams = 0x568; // FVectorMaterialInput
		constexpr auto CustomizedUVs = 0x5b0; // FVector2MaterialInput [0x8]
		constexpr auto MaterialAttributes = 0x7f0; // FMaterialAttributesInput
		constexpr auto PixelDepthOffset = 0x838; // FScalarMaterialInput
		constexpr auto bTranslucentBeforeTranslucency = 0x878; // char : 1
		constexpr auto bTranslucentBeforeVolumeFog = 0x878; // char : 1
		constexpr auto bTranslucentWithDepthWrite = 0x878; // char : 1
		constexpr auto bEnableSeparateTranslucency = 0x878; // char : 1
		constexpr auto bEnableResponsiveAA = 0x878; // char : 1
		constexpr auto bScreenSpaceReflections = 0x878; // char : 1
		constexpr auto TwoSided = 0x878; // char : 1
		constexpr auto DitheredLODTransition = 0x878; // char : 1
		constexpr auto ConstantMaterial = 0x87c; // EConstantMaterial
		constexpr auto SkyLightWhenOccluded = 0x880; // float
		constexpr auto CloudShadowsInfluence = 0x884; // float
		constexpr auto NumCustomizedUVs = 0x888; // int32_t
		constexpr auto TranslucencyLightingMode = 0x88c; // ETranslucencyLightingMode
		constexpr auto TranslucencyDirectionalLightingIntensity = 0x890; // float
		constexpr auto LightColorInfluence = 0x894; // float
		constexpr auto AmbientLightColorInfluence = 0x898; // float
		constexpr auto LightIntensityInfluence = 0x89c; // float
		constexpr auto AmbientLightIntensityInfluence = 0x8a0; // float
		constexpr auto AlternativeAmbientLightColorInfluence = 0x8a4; // float
		constexpr auto AlternativeAmbientLightIntensityInfluence = 0x8a8; // float
		constexpr auto bEvaluateLightningAtParticleCenter = 0x8ac; // char : 1
		constexpr auto TranslucencyScaleForReflection = 0x8b0; // float
		constexpr auto bObjectFadeEnabled = 0x8b4; // char : 1
		constexpr auto ObjectFadeRate = 0x8b8; // float
		constexpr auto ObjectFadeDistanceThreshold = 0x8bc; // float
		constexpr auto TranslucentShadowDensityScale = 0x8c0; // float
		constexpr auto TranslucentSelfShadowDensityScale = 0x8c4; // float
		constexpr auto TranslucentSelfShadowSecondDensityScale = 0x8c8; // float
		constexpr auto TranslucentSelfShadowSecondOpacity = 0x8cc; // float
		constexpr auto TranslucentBackscatteringExponent = 0x8d0; // float
		constexpr auto TranslucentMultipleScatteringExtinction = 0x8d4; // FLinearColor
		constexpr auto TranslucentShadowStartOffset = 0x8e4; // float
		constexpr auto VolumeFogScale = 0x8e8; // float
		constexpr auto DistanceFog = 0x8ec; // char : 1
		constexpr auto bDisableDepthTest = 0x8ec; // char : 1
		constexpr auto bGenerateSphericalParticleNormals = 0x8ec; // char : 1
		constexpr auto bDontRenderWhenPlayerInsideShip = 0x8ec; // char : 1
		constexpr auto bTangentSpaceNormal = 0x8ec; // char : 1
		constexpr auto bUseEmissiveForDynamicAreaLighting = 0x8ec; // char : 1
		constexpr auto bBlockGI = 0x8ec; // char : 1
		constexpr auto bUsedAsSpecialEngineMaterial = 0x8ec; // char : 1
		constexpr auto bUsedWithSkeletalMesh = 0x8ed; // char : 1
		constexpr auto bUsedWithEditorCompositing = 0x8ed; // char : 1
		constexpr auto bUsedWithLandscape = 0x8ed; // char : 1
		constexpr auto bUsedWithParticleSprites = 0x8ed; // char : 1
		constexpr auto bUsedWithCPUParticleSprites = 0x8ed; // char : 1
		constexpr auto bUsedWithStaticMesh = 0x8ed; // char : 1
		constexpr auto bUsedWithCoverage = 0x8ed; // char : 1
		constexpr auto bUsedWithGPUInstanceCulling = 0x8ed; // char : 1
		constexpr auto bUsedWithBeamTrails = 0x8ee; // char : 1
		constexpr auto bUsedWithMeshParticles = 0x8ee; // char : 1
		constexpr auto bUsedWithStaticLighting = 0x8ee; // char : 1
		constexpr auto bUsedWithFluidSurfaces = 0x8ee; // char : 1
		constexpr auto bUsedWithMorphTargets = 0x8ee; // char : 1
		constexpr auto bUsedWithSplineMeshes = 0x8ee; // char : 1
		constexpr auto bUsedWithInstancedStaticMeshes = 0x8ee; // char : 1
		constexpr auto bUsesDistortion = 0x8ee; // char : 1
		constexpr auto bUsedWithClothing = 0x8ef; // char : 1
		constexpr auto bUsedWithDeformables = 0x8ef; // char : 1
		constexpr auto bUsedWithFFTWaterMask = 0x8ef; // char : 1
		constexpr auto bUsedWithVolumeFogMask = 0x8ef; // char : 1
		constexpr auto bUsedWithDynamicObjectFading = 0x8ef; // char : 1
		constexpr auto bUsedWithWaterBoundary = 0x8ef; // char : 1
		constexpr auto bUsedWithClouds = 0x8ef; // char : 1
		constexpr auto bUsedWithInstancedRopes = 0x8ef; // char : 1
		constexpr auto bUsedWithPlanarReflection = 0x8f0; // char : 1
		constexpr auto bUsedWithPointLightShadows = 0x8f0; // char : 1
		constexpr auto bUsedWithMaskPass = 0x8f0; // char : 1
		constexpr auto bUsedWithUI = 0x8f0; // char : 1
		constexpr auto bAutomaticallySetUsageInEditor = 0x8f0; // char : 1
		constexpr auto bAllowEmissiveOnLandscape = 0x8f0; // char : 1
		constexpr auto bApplyWaterMask = 0x8f0; // char : 1
		constexpr auto bUseReZ = 0x8f0; // char : 1
		constexpr auto bFullyRough = 0x8f1; // char : 1
		constexpr auto bUseLightmapDirectionality = 0x8f1; // char : 1
		constexpr auto GeometryMode = 0x8f4; // EMaterialGeometryMode
		constexpr auto D3D11TessellationMode = 0x8f5; // EMaterialTessellationMode
		constexpr auto bEnableCrackFreeDisplacement = 0x8f8; // char : 1
		constexpr auto bEnableAdaptiveTessellation = 0x8f8; // char : 1
		constexpr auto MaxDisplacement = 0x8fc; // float
		constexpr auto Wireframe = 0x900; // char : 1
		constexpr auto bOutputVelocityOnBasePass = 0x900; // char : 1
		constexpr auto NormalOffsetShadowBiasScale = 0x904; // float
		constexpr auto EditorX = 0x908; // int32_t
		constexpr auto EditorY = 0x90c; // int32_t
		constexpr auto EditorPitch = 0x910; // int32_t
		constexpr auto EditorYaw = 0x914; // int32_t
		constexpr auto Expressions = 0x918; // TArray<UMaterialExpression*>
		constexpr auto MaterialFunctionInfos = 0x928; // TArray<FMaterialFunctionInfo>
		constexpr auto MaterialParameterCollectionInfos = 0x938; // TArray<FMaterialParameterCollectionInfo>
		constexpr auto bCanMaskedBeAssumedOpaque = 0x948; // char : 1
		constexpr auto bIsMasked = 0x948; // char : 1
		constexpr auto bIsPreviewMaterial = 0x948; // char : 1
		constexpr auto bUseMaterialAttributes = 0x948; // char : 1
		constexpr auto bUseTranslucencyVertexFog = 0x948; // char : 1
		constexpr auto bUseDensityMapOnTranslucencyVertexFog = 0x948; // char : 1
		constexpr auto bAllowDevelopmentShaderCompile = 0x948; // char : 1
		constexpr auto bIsMaterialEditorStatsMaterial = 0x948; // char : 1
		constexpr auto UsageFlagWarnings = 0x94c; // uint32_t
		constexpr auto BlendableLocation = 0x950; // EBlendableLocation
		constexpr auto BlendablePriority = 0x954; // int32_t
		constexpr auto bIsAlphaBlended = 0x958; // char : 1
		constexpr auto RefractionDepthBias = 0x95c; // float
		constexpr auto StateId = 0x960; // FGuid
		constexpr auto UnwrappedUVSet = 0x970; // int32_t
		constexpr auto ExpressionTextureReferences = 0xa00; // TArray<UTexture*>
	}

	namespace n_UDestructibleFractureSettings { // : UObject
		constexpr auto CellSiteCount = 0x28; // int32_t
		constexpr auto FractureMaterialDesc = 0x2c; // FFractureMaterial
		constexpr auto RandomSeed = 0x50; // int32_t
		constexpr auto VoronoiSites = 0x58; // TArray<FVector>
		constexpr auto OriginalSubmeshCount = 0x68; // int32_t
		constexpr auto Materials = 0x70; // TArray<UMaterialInterface*>
		constexpr auto ChunkParameters = 0x80; // TArray<FDestructibleChunkParameters>
		constexpr auto MaterialNames = 0x90; // TArray<FString>
	}

	namespace n_UCircleMapClueDescriptorGenerator { // : UClueDescriptorGenerator
		constexpr auto DescriptorType = 0x28; // UClueDescriptor*
		constexpr auto SupportedDestinationTypes = 0x30; // TArray<UClueDestinationDescriptor*>
	}

	namespace n_UTaleQuestClueInventoryService { // : UTaleQuestService
		constexpr auto ObtainedClues = 0x78; // TArray<UClueDescriptor*>
		constexpr auto DiscovererMap = 0xd8; // TMap<UClueDescriptor*, AActor*>
		constexpr auto TitleText = 0x248; // FText
		constexpr auto ClueTextChoiceSource = 0x280; // UAbandonedNoteClueTextChoiceSource*
	}

	namespace n_UFlatWaterMeshComponent { // : UStaticMeshComponent
		constexpr auto RandomDropRate = 0x5f0; // int32_t
		constexpr auto RandomDropSize = 0x5f4; // float
		constexpr auto RandomDropHeight = 0x5f8; // float
		constexpr auto RestorationScale = 0x5fc; // float
		constexpr auto ForceScale = 0x600; // float
		constexpr auto DampHeight = 0x604; // float
		constexpr auto NormalMapScale = 0x608; // float
		constexpr auto TextureWidth = 0x60c; // int32_t
		constexpr auto TextureHeight = 0x610; // int32_t
		constexpr auto ClippingHull = 0x618; // UStaticMesh*
		constexpr auto MaxSimulationDistance = 0x620; // float
		constexpr auto InitialRandomHeight = 0x624; // float
		constexpr auto InitialRandomVelocity = 0x628; // float
		constexpr auto Texture = 0x630; // UTexture*
		constexpr auto NormalTexture = 0x638; // UTexture*
		constexpr auto WaterMaskTexture = 0x640; // UTextureRenderTarget2D*
		constexpr auto OriginalMaterials = 0x660; // TArray<UMaterialInterface*>
		constexpr auto TextureOverrides = 0x670; // TArray<FFlatWaterMeshTextureOverride>
	}

	namespace n_UMetalAIFormComponent { // : UAthenaAIFormComponent
		constexpr auto RustyParticlesTemplate = 0x160; // UParticleSystem*
		constexpr auto DefaultFootfallParams = 0x168; // USkeletonAudioFootfallControllerParams*
		constexpr auto RustyFootfallParams = 0x170; // USkeletonAudioFootfallControllerParams*
		constexpr auto MetalBaseMaterial = 0x178; // UMaterial*
		constexpr auto RustShaderParamName = 0x198; // FName
		constexpr auto NotRustyShaderParamValue = 0x1a0; // float
		constexpr auto RustyShaderParamValue = 0x1a4; // float
		constexpr auto ShaderParamBlendSpeed = 0x1a8; // float
		constexpr auto SeedShaderParamName = 0x1ac; // FName
		constexpr auto MaxSeedShaderValue = 0x1b4; // int32_t
		constexpr auto IsWet = 0x1b8; // bool
		constexpr auto RustyParticleSystemComponent = 0x1c0; // UParticleSystemComponent*
		constexpr auto DefaultVulnerabilityLayer = 0x1d0; // UDamageableVulnerabilityLayer*
		constexpr auto RustyVulnerabilityLayer = 0x1d8; // UDamageableVulnerabilityLayer*
		constexpr auto RustyHitReactionsLayer = 0x1e0; // UCharacterHitReactionDamagerTypeToAnimTypeLayer*
		constexpr auto MetalDynamicMaterialInstance = 0x1e8; // UMaterialInstanceDynamic*
	}

	namespace n_AFlyingCreature { // : AActor
		constexpr auto CreatureSoundPool = 0x3d0; // UWwiseObjectPoolWrapper*
		constexpr auto CreatureSoundToPlay = 0x3d8; // UWwiseEvent*
		constexpr auto CreatureSoundToStop = 0x3e0; // UWwiseEvent*
		constexpr auto CreatureSwitchGroup = 0x3e8; // FName
		constexpr auto CreatureSwitch = 0x3f0; // FName
		constexpr auto FlyingCreatureFactorRtpc = 0x3f8; // FName
		constexpr auto FlyingCreatureFactorRtpcValue = 0x400; // float
		constexpr auto CreatureEmitter = 0x408; // FWwiseEmitter
	}

	namespace n_ULaunchableProjectileService { // : UObject
		constexpr auto World = 0x30; // UWorld*
		constexpr auto ActiveProjectiles = 0x38; // TArray<FLaunchableActiveProjectileData>
	}

	namespace n_UReviveGhostAnimationDataAsset { // : UDataAsset
		constexpr auto Animations = 0x28; // FReviveGhostAnimations
	}

	namespace n_UMaterialExpressionCustomOutput { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UMeshMemoryConstraintScoringNumberOfMeshes { // : UMeshMemoryConstraintScoringObject
		constexpr auto ScoringName = 0x28; // FName
		constexpr auto ScoringFactor = 0x30; // float
	}

	namespace n_USirenTeleportAIAbilityParams { // : UTeleportAIAbilityParams
		constexpr auto QueryTemplate = 0xc8; // UEnvQuery*
		constexpr auto MinDistance = 0xd0; // float
		constexpr auto MaxDistance = 0xd4; // float
		constexpr auto MaintainRotation = 0xd8; // bool
		constexpr auto UseResurfaceDelay = 0xd9; // bool
		constexpr auto ResurfaceDelay = 0xe0; // FAthenaAIAbilityPlayerBasedRanges
	}

	namespace n_UItemHealthComponent { // : UHealthComponent
		constexpr auto MinTimeSinceLastPredictedHealthChangeToFireChangedEventAgain = 0xd8; // float
		constexpr auto PreventDamageFromAllSourcesExceptWhitelistedSources = 0xdc; // bool
		constexpr auto MaxHealth = 0xe0; // float
		constexpr auto CurrentHealthInfo = 0xe4; // FCurrentHealthInfo
		constexpr auto ContinuousHealthChangeSources = 0x100; // TArray<FContinuousHealthChange>
		constexpr auto IsHealthAdjustLocked = 0x110; // bool
	}

	namespace n_UCustomAnimationMontageIdListingDataAsset { // : UDataAsset
		constexpr auto MontageIds = 0x28; // TArray<FName>
	}

	namespace n_UNetworkSettings { // : UDeveloperSettings
		constexpr auto bVerifyPeer = 0x38; // char : 1
	}

	namespace n_UReplicatedShipPartCustomizationComponent { // : UShipPartCustomizationComponent
		constexpr auto PartDesc = 0xc8; // FPartDesc
	}

	namespace n_UFishingRodItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UAnimCompress_LeastDestructive { // : UAnimCompress
		constexpr auto Description = 0x28; // FString
		constexpr auto bNeedsSkeleton = 0x38; // char : 1
		constexpr auto TranslationCompressionFormat = 0x3c; // AnimationCompressionFormat
		constexpr auto RotationCompressionFormat = 0x3d; // AnimationCompressionFormat
		constexpr auto ScaleCompressionFormat = 0x3e; // AnimationCompressionFormat
	}

	namespace n_UMovieSceneCameraAnimSection { // : UMovieSceneSection
		constexpr auto AnimData = 0x98; // FMovieSceneCameraAnimSectionData
		constexpr auto CameraAnim = 0xb8; // UCameraAnim*
		constexpr auto PlayRate = 0xc0; // float
		constexpr auto PlayScale = 0xc4; // float
		constexpr auto BlendInTime = 0xc8; // float
		constexpr auto BlendOutTime = 0xcc; // float
		constexpr auto bLooping = 0xd0; // bool
	}

	namespace n_UAthenaAIPerceptionComponent { // : UAIPerceptionComponent
		constexpr auto HearingRange = 0xc8; // float
		constexpr auto LoSHearingRange = 0xcc; // float
		constexpr auto SightRadius = 0xd0; // float
		constexpr auto LoseSightRadius = 0xd4; // float
		constexpr auto PeripheralVisionAngle = 0xd8; // float
		constexpr auto SensesConfig = 0xe0; // TArray<UAISenseConfig*>
		constexpr auto DominantSense = 0xf0; // UAISense*
		constexpr auto AIOwner = 0x108; // AAIController*
		constexpr auto OnPerceptionUpdated = 0x190; // FScriptMulticastDelegate
		constexpr auto OnTargetPerceptionUpdated = 0x1a0; // FScriptMulticastDelegate
	}

	namespace n_APartyBeaconClient { // : AOnlineBeaconClient
		constexpr auto DestSessionId = 0x430; // FString
		constexpr auto PendingReservation = 0x440; // FPartyReservation
		constexpr auto RequestType = 0x470; // EClientRequestType
		constexpr auto bPendingReservationSent = 0x471; // bool
		constexpr auto bCancelReservation = 0x472; // bool
	}

	namespace n_APlinthMechanismAction { // : AToggleAnimatedMechanismAction
		constexpr auto MechanismTrigger = 0x570; // UMechanismTriggerComponent*
		constexpr auto LockComponent = 0x578; // ULockComponent*
		constexpr auto ActionRulesComponent = 0x580; // UActionRulesComponent*
		constexpr auto InteractableComponent = 0x588; // UPlinthInteractableComponent*
		constexpr auto CanLockComponentAcceptKey = 0x590; // bool
	}

	namespace n_UWaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc { // : UTaleQuestStepDesc
		constexpr auto ExpectedSourcePlayMode = 0x80; // EPlayMode
		constexpr auto ExpectedSourceSubMode = 0x88; // FString
		constexpr auto ExpectedDestinationPlayMode = 0x98; // EPlayMode
		constexpr auto ExpectedDestinationSubMode = 0xa0; // FString
	}

	namespace n_UBTTask_SailShipCircleTarget { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_UParticleModuleParameterDynamic_Seeded { // : UParticleModuleParameterDynamic
		constexpr auto RandomSeedInfo = 0x68; // FParticleRandomSeedInfo
	}

	namespace n_UMaterialExpressionViewProperty { // : UMaterialExpression
		constexpr auto Property = 0x70; // EMaterialExposedViewProperty
	}

	namespace n_AVideprinter { // : AActor
		constexpr auto OutputRingBuffer = 0x3d0; // TArray<FString>
		constexpr auto AddAt = 0x3e0; // int32_t
		constexpr auto Id = 0x3e4; // FName
	}

	namespace n_UDitherComponent { // : UActorComponent
		constexpr auto FindMeshOnOwner = 0xd0; // bool
		constexpr auto FadeTime = 0xd4; // float
		constexpr auto DynamicMaterialsPerMeshComponent = 0xe8; // TMap<UMeshComponent*, FDynamicMaterialsList>
		constexpr auto PurgeOverrideMatsOnDynamicMatMeshLoaded = 0x1bc; // bool
		constexpr auto FadeInOnStart = 0x1bd; // bool
	}

	namespace n_UParticleModuleLocationVelocityComputeShaderOutput { // : UParticleModuleLocationPrimitiveBase
		constexpr auto PositionData = 0xc8; // UParticleComputeShaderData*
		constexpr auto ComputedVelocityScale = 0xd0; // FRawDistributionVector
		constexpr auto SpeedCap = 0x108; // float
		constexpr auto BaseVelocity = 0x110; // FRawDistributionVector
		constexpr auto LocationOffset = 0x148; // FRawDistributionVector
		constexpr auto LocationOffsetScaledDirection = 0x180; // FRawDistributionVector
	}

	namespace n_UStatConditionObjectTargetSelector { // : UStatConditionTargetSelector
		constexpr auto Target = 0x28; // EStatConditionTarget
	}

	namespace n_UPlaySequencerAnimationStepDesc { // : UTaleQuestStepDesc
		constexpr auto LevelSequenceToPlay = 0x80; // ULevelSequence*
		constexpr auto TargetActorToSpawn = 0x88; // FQuestVariableActor
		constexpr auto LevelSequenceActorSpawnLocation = 0x98; // FQuestVariableActor
		constexpr auto DockableBaseActor = 0xa8; // FQuestVariableActor
		constexpr auto InteractingActor = 0xb8; // FQuestVariableActor
		constexpr auto PlayGlobally = 0xc8; // bool
		constexpr auto IsLevelSequenceActorAlawaysRelevant = 0xc9; // bool
		constexpr auto DialogueData = 0xd0; // USceneDialogueData*
		constexpr auto LocalisableNames = 0xd8; // TArray<FText>
		constexpr auto IsLooping = 0xe8; // bool
		constexpr auto SubtitleSphereRadiusInCm = 0xec; // float
		constexpr auto FemaleLevelSequenceToPlay = 0xf0; // ULevelSequence*
	}

	namespace n_USailManipulatorAudioParams { // : UDataAsset
		constexpr auto PlaySailManipulator = 0x28; // UWwiseEvent*
		constexpr auto StopSailManipulator = 0x30; // UWwiseEvent*
		constexpr auto PlaySailManipulatorEndExtremity = 0x38; // UWwiseEvent*
	}

	namespace n_UTradeRoutesDataAsset { // : UDataAsset
		constexpr auto TradeRouteMappings = 0x28; // TArray<FTradeRouteMapping>
	}

	namespace n_USetMechanismActionCutsceneNameStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // USetMechanismActionCutsceneNameStepDesc*
	}

	namespace n_UNavCollision { // : UObject
		constexpr auto CylinderCollision = 0x78; // TArray<FNavCollisionCylinder>
		constexpr auto BoxCollision = 0x88; // TArray<FNavCollisionBox>
		constexpr auto AreaClass = 0x98; // UNavArea*
		constexpr auto bIsDynamicObstacle = 0xa0; // char : 1
		constexpr auto bGatherConvexGeometry = 0xa0; // char : 1
	}

	namespace n_UTaleQuestGetPhasedVersionOfActorFromAssetMapStep { // : UTaleQuestStep
		constexpr auto NPCIndexAssetMap = 0x90; // UExistingToPhasedNPCIndexAssetMap*
	}

	namespace n_UEffectBlendControllerComponent { // : UActorComponent
		constexpr auto Effects = 0xc8; // FVisualFeedbackList
	}

	namespace n_ABroadcasterPuzzleStatue { // : APuzzleStatueBase
		constexpr auto ArmStaticMesh = 0x458; // UStaticMeshComponent*
		constexpr auto ReceiverStatues = 0x460; // TArray<AActor*>
		constexpr auto ValidConfigurationCombos = 0x470; // TArray<FConfigurationComboAndTrigger>
		constexpr auto ReactionSequenceState = 0x480; // FReactionSequenceStateInfo
		constexpr auto IslandVisitorCallbackComponent = 0x4d8; // UIslandVisitorCallbackComponent*
		constexpr auto DelayBeforeReactionSequenceCheck = 0x4e0; // float
		constexpr auto DelayPerStatueDuringReactionSequenceCheck = 0x4e4; // float
		constexpr auto DelayAfterReactionSequenceCheck = 0x4e8; // float
		constexpr auto DelayBeforeActivatingTriggerDuringReactionSequenceSuccess = 0x4ec; // float
		constexpr auto ShockwaveParticleSystem = 0x4f8; // UParticleSystemComponent*
		constexpr auto HornDustParticleSystem = 0x500; // UParticleSystemComponent*
		constexpr auto BroadcasterAudioParams = 0x508; // UBroadcasterPuzzleStatueAudioParamsDataAsset*
		constexpr auto ShockwaveEffectDelay = 0x5b4; // float
		constexpr auto ShouldResetWhenIslandIsEmpty = 0x5b8; // bool
		constexpr auto TimeBeforeIslandResetWhenEmpty = 0x5bc; // float
		constexpr auto StatueResetCooldownInSeconds = 0x5c0; // float
	}

	namespace n_UTaleUnloadSpireStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UTaleQuestFlameOfFateServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto LanternItemCategory = 0x28; // UItemCategory*
		constexpr auto FlameOfFateTypeToSet = 0x30; // EFlameOfFateType
		constexpr auto SetFlameOnStart = 0x31; // bool
	}

	namespace n_UBTNode { // : UObject
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_URiddleQuestData { // : UDataAsset
		constexpr auto DefaultGateCompletedAudioCue = 0x28; // UWwiseEvent*
		constexpr auto DefaultGateCompletedMusicCue = 0x30; // UWwiseEvent*
		constexpr auto AllTreasureChests = 0x38; // TArray<UItemDesc*>
	}

	namespace n_UScratchAIAbility { // : UMeleeAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_UVaultMaterialSetDataAsset { // : UDataAsset
		constexpr auto BlockConfigurations = 0x28; // TArray<FBlockDecalMaterials>
	}

	namespace n_ALogVisualizerHUD { // : ADebugCameraHUD
		constexpr auto WhiteColor = 0x3d0; // FColor
		constexpr auto GreenColor = 0x3d4; // FColor
		constexpr auto RedColor = 0x3d8; // FColor
		constexpr auto PlayerOwner = 0x3e0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x3e8; // char : 1
		constexpr auto bShowHUD = 0x3e8; // char : 1
		constexpr auto bShowDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowHitBoxDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowOverlays = 0x3e8; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x3e8; // char : 1
		constexpr auto PostRenderedActors = 0x3f0; // TArray<AActor*>
		constexpr auto LastHUDRenderTime = 0x400; // float
		constexpr auto RenderDelta = 0x404; // float
		constexpr auto DebugDisplay = 0x408; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x418; // TArray<FName>
		constexpr auto Canvas = 0x428; // UCanvas*
		constexpr auto DebugCanvas = 0x430; // UCanvas*
		constexpr auto DebugTextList = 0x438; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x448; // AActor*
		constexpr auto ShowDebugTargetActor = 0x450; // AActor*
	}

	namespace n_UPawnAction_Sequence { // : UPawnAction
		constexpr auto ActionSequence = 0x90; // TArray<UPawnAction*>
		constexpr auto ChildFailureHandlingMode = 0xa0; // EPawnActionFailHandling
		constexpr auto RecentActionCopy = 0xa8; // UPawnAction*
	}

	namespace n_UDeliverableRedirectionLiteralDestinationDescriptor { // : UDeliverableRedirectionDestinationDescriptorBase
		constexpr auto Destination = 0x28; // FText
	}

	namespace n_UBTService_SetBoolBlackboardValueTrueWhileRelevant { // : UBTService
		constexpr auto BoolValueKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UHealthRegenerationPoolComponent { // : UActorComponent
		constexpr auto MaxCapacity = 0xd0; // float
		constexpr auto HealingRate = 0xd4; // float
		constexpr auto HealingDelayWhenDamaged = 0xd8; // float
		constexpr auto UIUpdateThrottleMs = 0xe0; // double
		constexpr auto RegenerationState = 0xe8; // FHealthRegenState
	}

	namespace n_UWashedUpItemDataAsset { // : UIslandItemDataAsset
		constexpr auto SpawnLocations = 0x38; // TArray<FIslandItemSpawnLocationData>
	}

	namespace n_UButtonWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto ButtonStyle = 0x30; // FButtonStyle
	}

	namespace n_USceneDialogueContext { // : UObject
		constexpr auto Section = 0x38; // USceneDialogueSection*
	}

	namespace n_UAnimationDataStoreAsset { // : UDataAsset
		constexpr auto AssetRefs = 0x28; // TArray<FAnimationDataStoreAssetEntry>
	}

	namespace n_UPlaySequencerAnimationOnCutsceneActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto LevelSequence = 0x80; // ULevelSequence*
		constexpr auto Delay = 0x88; // float
		constexpr auto DockableBaseActor = 0x90; // FQuestVariableActor
		constexpr auto SequencerCutSceneActor = 0xa0; // FQuestVariableActor
		constexpr auto ActorToPossess = 0xb0; // FQuestVariableActor
		constexpr auto AdditionalPossessables = 0xc0; // FQuestVariableArray
		constexpr auto InteractingActor = 0xd0; // FQuestVariableActor
		constexpr auto PossessableName = 0xe0; // FString
		constexpr auto DialogueData = 0xf0; // USceneDialogueData*
		constexpr auto LocalisableNames = 0xf8; // TArray<FText>
		constexpr auto IsLevelSequenceActorAlwaysRelevant = 0x108; // bool
		constexpr auto IsLooping = 0x109; // bool
		constexpr auto SubtitleSphereRadiusInCm = 0x10c; // float
		constexpr auto FemaleLevelSequence = 0x110; // ULevelSequence*
	}

	namespace n_UMovieSceneEventTrack { // : UMovieSceneNameableTrack
		constexpr auto bFireEventsWhenForwards = 0x88; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x88; // char : 1
		constexpr auto Sections = 0x90; // TArray<UMovieSceneSection*>
	}

	namespace n_UIsCampaignActiveNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto RequiredCampaigns = 0x30; // TArray<FName>
	}

	namespace n_UHurdyGurdyItemCategory { // : UInstrumentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UReviveComponent { // : UInteractableComponent
		constexpr auto OwningCharacter = 0x128; // ACharacter*
		constexpr auto ReviveableRepresentationActor = 0x130; // AActor*
		constexpr auto ReviveState = 0x138; // EReviveState
		constexpr auto InteractionState = 0x139; // EInteractableState
		constexpr auto ReviveableRepresentationClass = 0x140; // AActor*
		constexpr auto ReviveWindowIsOpen = 0x154; // bool
		constexpr auto RevivableStatus = 0x228; // FStatus
	}

	namespace n_UDebugWieldablesData { // : UDataAsset
		constexpr auto AllDebugWieldables = 0x28; // TArray<UItemDesc*>
	}

	namespace n_UDistributionFloatUniform { // : UDistributionFloat
		constexpr auto Max = 0x38; // float
		constexpr auto Min = 0x3c; // float
	}

	namespace n_UNavMovementComponent { // : UMovementComponent
		constexpr auto NavAgentProps = 0x110; // FNavAgentProperties
		constexpr auto bUpdateNavAgentWithOwnersCollision = 0x140; // char : 1
		constexpr auto MovementState = 0x144; // FMovementProperties
		constexpr auto UseDefaultNavWalkingSearchRadiusScale = 0x150; // bool
		constexpr auto UseDefaultNavWalkingSearchHeightScale = 0x151; // bool
	}

	namespace n_UAthenaGameContext { // : UObject
		constexpr auto VoiceChatRenderer = 0x98; // UVoiceChatRenderer*
		constexpr auto PlayModeLevels = 0xa0; // UAthenaPlayModeLevelsDataAsset*
		constexpr auto FeatureToggledLevels = 0xa8; // UFeatureToggledLevelsDataAsset*
		constexpr auto PrimaryGameInstance = 0x220; // UGameInstance*
		constexpr auto AthenaServerIdentityManager = 0x228; // UAthenaServerIdentityManager*
		constexpr auto ServiceCoordinator = 0x230; // FGameServiceCoordinator
		constexpr auto AthenaLocalPlayerManager = 0x460; // UAthenaLocalPlayerManager*
		constexpr auto AthenaLocalPlayerReengage = 0x468; // UAthenaLocalPlayerReengage*
		constexpr auto GameNarrationCoordinator = 0x470; // UGameNarrationCoordinator*
		constexpr auto ApplicationSettings = 0x478; // UApplicationSettings*
	}

	namespace n_UMaterialExpressionCrossProduct { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
	}

	namespace n_ULookAtEmoteCameraComponent { // : UActorComponent
		constexpr auto TargetCamera = 0xc8; // UAthenaCameraComponent*
		constexpr auto BlendInTime = 0xd0; // float
		constexpr auto AttachedTargetLerpFactor = 0xd4; // float
	}

	namespace n_UFindSessionsCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_AReapersMarkService { // : AActor
		constexpr auto Settings = 0x3d8; // UReapersMarkSettingsAsset*
		constexpr auto TrackedBootyItems = 0x4e0; // TMap<FName, FReapersMarkTrackedBootyItem>
	}

	namespace n_UStatusEffectsSettings { // : UDeveloperSettings
		constexpr auto DebugMenuStatusDefinitionsDataAsset = 0x38; // FStringAssetReference
	}

	namespace n_UAssetListDataAsset { // : UDataAsset
		constexpr auto AssetList = 0x28; // TArray<FStringAssetReference>
	}

	namespace n_ABrazierMechanismTrigger { // : ABeacon
		constexpr auto MechanismTrigger = 0x7c8; // UMechanismTriggerComponent*
		constexpr auto FlameTypeToActivate = 0x7d0; // EFlameOfFateType
		constexpr auto LanternNotLitToolTipText = 0x7d8; // FText
		constexpr auto CannotSetBeaconToolTipText = 0x810; // FText
		constexpr auto TakeFlameOfFateNotificationID = 0x848; // UNotificationInputId*
		constexpr auto SetFlameOfFateNotificationID = 0x850; // UNotificationInputId*
		constexpr auto LanternSwingAmmount = 0x858; // float
		constexpr auto LanternEmissiveAmmount = 0x85c; // float
		constexpr auto LanternMegaEmmisiveAmount = 0x860; // float
		constexpr auto DynamicMaterials = 0x868; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_APiratePreviewActor { // : AActor
		constexpr auto CosmeticItemAnimationComponent = 0x3e8; // UCosmeticItemAnimationComponent*
		constexpr auto CosmeticVfxComponent = 0x3f0; // UCosmeticVfxComponent*
		constexpr auto DelayedGenerationView = 0x620; // FPiratePreviewView
		constexpr auto CameraLocations = 0x6c8; // TArray<USceneComponent*>
		constexpr auto PendingAnim = 0x6d8; // UAnimationAsset*
		constexpr auto EmotePropData = 0x6e0; // UDataAsset*
		constexpr auto DefaultAnimation = 0x700; // UAnimationAsset*
		constexpr auto Pirate = 0x708; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto MainCamera = 0x710; // TWeakObjectPtr<UCameraComponent>
		constexpr auto PreviewReadyEventHandle = 0x718; // FObjectMessagingHandle
		constexpr auto PreviewBusyEventHandle = 0x760; // FObjectMessagingHandle
		constexpr auto SpinPirateRate = 0x7a8; // float
		constexpr auto LookAtSocket = 0x7b0; // USkeletalMeshSocket*
	}

	namespace n_UCatalogDataAsset { // : UDataAsset
		constexpr auto CatalogId = 0x28; // FGuid
		constexpr auto DisplayName = 0x38; // FText
		constexpr auto ExportAsRewardIds = 0x70; // bool
		constexpr auto Offers = 0x78; // TArray<UCatalogOfferDataAsset*>
	}

	namespace n_UFlintlockItemCategory { // : UWeaponItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_ASpikeMechanismAction { // : APivotAnimatedMechanismAction
		constexpr auto MechanismInteractionComponent = 0x608; // UMechanismInteractionComponent*
		constexpr auto Extent = 0x610; // float
		constexpr auto Damage = 0x614; // float
		constexpr auto DamageReason = 0x618; // EHealthChangedReason
		constexpr auto MaterialAnimations = 0x620; // TArray<FSpikeMechanismMaterialAnimationContext>
	}

	namespace n_UActionRulesInteractableComponent { // : UInteractableComponent
		constexpr auto ActionRulesComponent = 0x118; // UActionRulesComponent*
	}

	namespace n_UTaleQuestStructStepBase { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAnimNotifyQuestBookForcePageRedraw { // : UAnimNotify
		constexpr auto PlayedWithSequencer = 0x28; // bool
	}

	namespace n_AShip { // : AActor
		constexpr auto PartConnections = 0x488; // FShipPartConnections
		constexpr auto BoatCollision = 0x520; // UStaticMeshComponent*
		constexpr auto BoatBasis = 0x528; // UBasisComponent*
		constexpr auto OverlapHit = 0x530; // UStaticMeshComponent*
		constexpr auto BelowDeckVolume = 0x538; // UStaticMeshComponent*
		constexpr auto CabinVolume = 0x540; // UStaticMeshComponent*
		constexpr auto ObjectMessageDispatcher = 0x548; // FObjectMessagingDispatcher
		constexpr auto TeleportLocationRetrievalComponent = 0x5e8; // UTeleportLocationRetrievalComponent*
		constexpr auto ShipInternalWaterComponent = 0x5f0; // UChildActorComponent*
		constexpr auto SinkingComponent = 0x5f8; // USinkingComponent*
		constexpr auto HullCollisionComponent = 0x600; // UShipHullCollisionComponent*
		constexpr auto TetherCustomisationComponent = 0x608; // UTetherCustomisationComponent*
		constexpr auto StuckDetectionComponent = 0x610; // UShipStuckDetectionComponent*
		constexpr auto StatusEffectManagerComponent = 0x618; // UStatusEffectManagerComponent*
		constexpr auto StatusEffectPersistenceComponent = 0x620; // UStatusEffectPersistenceComponent*
		constexpr auto ShipCurseComponent = 0x628; // UShipCurseComponent*
		constexpr auto InstancedNavMeshComponent = 0x630; // UInstancedNavMeshComponent*
		constexpr auto Buoyancy = 0x640; // FWaterBuoyancy
		constexpr auto CrewOwnershipComponent = 0x770; // UCrewOwnershipComponent*
		constexpr auto OnboardCharacterTrackerComponent = 0x778; // UOnboardCharacterTrackerComponent*
		constexpr auto RewindComponent = 0x780; // URewindComponent*
		constexpr auto LiveryComponent = 0x788; // UShipLiveryComponent*
		constexpr auto HullLiveryCustomizationComponent = 0x790; // UReplicatedShipPartCustomizationComponent*
		constexpr auto SailsLiveryCustomizationComponent = 0x798; // UReplicatedShipPartCustomizationComponent*
		constexpr auto CannonEnchantmentCustomizationComponent = 0x7a0; // UReplicatedShipPartCustomizationComponent*
		constexpr auto RammerType = 0x7a8; // URammerType*
		constexpr auto GroupedInteractableAreaComponent = 0x7b0; // UGroupedInteractableAreaComponent*
		constexpr auto ShipConfigurationSettings = 0x7b8; // FShipConfigurationSettings
		constexpr auto RainFillRate = 0x7d0; // float
		constexpr auto RainTimePerDrop = 0x7d4; // float
		constexpr auto RainDropScale = 0x7d8; // float
		constexpr auto RainDropRadius = 0x7dc; // float
		constexpr auto RainStrengthMinimumToFillShip = 0x7e0; // float
		constexpr auto AITargetVisibilityPoints = 0x7e8; // TArray<FVector>
		constexpr auto AchievementSinkOtherCrewsShip = 0x7f8; // FAchievementSinkAnotherCrewsShip
		constexpr auto AchievementSailThroughStormAtNightWithLightsOff = 0x810; // FAchievementSailThroughStormAtNightWithLightsOff
		constexpr auto AchievementSailCloseToShipWithoutFiring = 0x890; // FAchievementSailCloseToShipWithoutFiring
		constexpr auto AchievementSailFullyIntoTheWind = 0x8a8; // FAchievementSailFullyWithTheWind
		constexpr auto AchievementSailWithFlameOfFateColoursAboard = 0x8b0; // FAchievementSailWithFlameOfFateColoursAboard
		constexpr auto ImpulseThrottlerComponent = 0x9a8; // UImpulseThrottlerComponent*
		constexpr auto ReturnToShipVolume = 0x9b0; // USphereComponent*
		constexpr auto ReturnToShipVolumeRadius = 0x9b8; // float
		constexpr auto BowSplashReturnType = 0x9bc; // EBowSplashTickReturnType
		constexpr auto ShipDynamics = 0x9c0; // FShipDynamics
		constexpr auto PhysicsErrorCorrection = 0xa60; // FRigidBodyErrorCorrection
		constexpr auto AdventureSinkingData = 0xa80; // UShipSinkingParametersDataAsset*
		constexpr auto ArenaSinkingData = 0xa88; // UShipSinkingParametersDataAsset*
		constexpr auto BuoyancySampleMovement = 0xa90; // FBuoyancySampleMovement
		constexpr auto SurfacingBuoyancySampleMovement = 0xaf8; // FBuoyancySampleMovement
		constexpr auto DivingBuoyancySampleMovement = 0xb60; // FBuoyancySampleMovement
		constexpr auto NosediveBrake = 0xbc8; // UShipNosediveBrake*
		constexpr auto RolloverCorrector = 0xbd0; // UShipRolloverCorrector*
		constexpr auto BowSplashContainer = 0xbd8; // UBowSplashContainer*
		constexpr auto SurfacingBowSplashContainer = 0xbe0; // UBowSplashContainer*
		constexpr auto DivingBowSplashContainer = 0xbe8; // UBowSplashContainer*
		constexpr auto DisableSailingBowSplashesWhenDiving = 0xbf0; // bool
		constexpr auto ShipLocators = 0xbf8; // ULocatorContainer*
		constexpr auto LocalSailForceApplicationOffset = 0xc00; // FVector
		constexpr auto ShipSpeedToChoppinessScalarCurve = 0xc10; // UCurveFloat*
		constexpr auto HullSubmergedValueRemapping = 0xc18; // UCurveFloat*
		constexpr auto FakeBuoyancyZOffsetScalarSpringAccel = 0xc20; // float
		constexpr auto PositionSamplerTimeWindow = 0xc24; // float
		constexpr auto ClientConvexHullCollisionProfile = 0xc28; // FName
		constexpr auto EmpiricalMaxSpeedInMPS = 0xc30; // float
		constexpr auto BrigSpawnLocation = 0xc40; // FTransform
		constexpr auto WaterStrengthThresholdForStormDamage = 0xc70; // float
		constexpr auto FirePropagationBlueprint = 0xc78; // AActor*
		constexpr auto FirePropagationComponent = 0xc80; // UShipFirePropagationComponent*
		constexpr auto SightingEncounterParams = 0xcf0; // FEncounterParams
		constexpr auto CloseProximityEncounterParams = 0xcfc; // FEncounterParams
		constexpr auto ShipCategoryObject = 0xd18; // UShipCategory*
		constexpr auto ShipSizeObject = 0xd20; // UShipSize*
		constexpr auto ShipTypeObject = 0xd28; // UShipType*
		constexpr auto DamageableChildActors = 0xd30; // TArray<AActor*>
		constexpr auto CrewShipManifest = 0xd40; // ACrewShipManifest*
		constexpr auto HullDamage = 0xda8; // UObject*
		constexpr auto DeckWater = 0xdb0; // USurfaceWaterComponent*
		constexpr auto WaterExposureComponent = 0xdb8; // UWaterExposureComponent*
		constexpr auto ShroudBreakerTrackerComponent = 0xdc0; // UShroudBreakerTrackerComponent*
		constexpr auto MovementTimeStamp = 0xdc8; // FNetTimeStampCalculator
		constexpr auto StormStrainWeight = 0xf2c; // float
		constexpr auto WorldEdgeWeight = 0xf30; // float
		constexpr auto TetherMassInertiaScaleWhenAnchored = 0xf34; // float
		constexpr auto StormStrainDamage = 0xf38; // FStrainDamage
		constexpr auto WorldEdgeDamage = 0xf60; // FStrainDamage
		constexpr auto ScuttleDamage = 0xf88; // FStrainDamage
		constexpr auto WorldEdgeDamageRange = 0xfb0; // FVector2D
		constexpr auto ScuttleForceSinkTime = 0xfb8; // float
		constexpr auto ProxyClass = 0xfc0; // ANetProxy*
		constexpr auto HasEverStartedSailing = 0xfc9; // bool
		constexpr auto EmissaryFlagActive = 0xfca; // bool
		constexpr auto SurfacingState = 0xfcb; // EShipSurfacingState
		constexpr auto InstancedMeshes = 0xfd0; // TArray<UMobileInstancedStaticMeshComponent*>
		constexpr auto ScuttleTime = 0x1460; // float
	}

	namespace n_UMaterialAnimatorComponent { // : UActorComponent
		constexpr auto AnimationGroups = 0xc8; // TArray<FMaterialAnimatorGroup>
		constexpr auto AnimationGroupInstances = 0xd8; // TArray<FMaterialAnimatorGroupInstance>
	}

	namespace n_UFindNamedPointAsTransformStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBootyStorageSettings { // : UDeveloperSettings
		constexpr auto StoreHoldTime = 0x38; // float
		constexpr auto RetrieveHoldTime = 0x3c; // float
		constexpr auto PickupPointSpawnDepth = 0x40; // float
		constexpr auto PickupDismissDuration = 0x44; // float
		constexpr auto PickupDismissDistanceCheck = 0x48; // float
		constexpr auto MaxStoragePerLocation = 0x4c; // char
		constexpr auto BootyStorageSettingsAsset = 0x50; // FStringAssetReference
		constexpr auto BlacklistedCategories = 0x60; // TArray<UItemCategory*>
	}

	namespace n_UAISense { // : UObject
		constexpr auto DebugDrawColor = 0x28; // FColor
		constexpr auto DebugName = 0x30; // FString
		constexpr auto DefaultExpirationAge = 0x40; // float
		constexpr auto NotifyType = 0x44; // EAISenseNotifyType
		constexpr auto bWantsNewPawnNotification = 0x48; // char : 1
		constexpr auto bAutoRegisterAllPawnsAsSources = 0x48; // char : 1
		constexpr auto PerceptionSystemInstance = 0x50; // UAIPerceptionSystem*
	}

	namespace n_UTestServerNetworkedEventsWhitelistDefinition { // : UNetworkedEventsWhitelistDefinition
		constexpr auto ValidEvents = 0x28; // TArray<UScriptStruct*>
	}

	namespace n_UTaleQuestMultiTargetCompassRemoveTrackedLocationStepDesc { // : UTaleQuestStepDesc
		constexpr auto TargetID = 0x80; // FQuestVariableGuid
	}

	namespace n_UPlayerTelemetryComponent { // : UActorComponent
		constexpr auto HeartbeatInterval = 0x128; // float
		constexpr auto SpawnTimestamp = 0x270; // FDateTime
	}

	namespace n_UCutsceneService { // : UObject
		constexpr auto RegisteredCutsceneActors = 0x30; // TArray<AActor*>
	}

	namespace n_UUIResponceComponent { // : UActorComponent
		constexpr auto OwningPlayerController = 0xc8; // AAthenaPlayerController*
	}

	namespace n_UIslandAnnouncementComponent { // : UActorComponent
		constexpr auto AnnouncesOnUI = 0xc8; // bool
		constexpr auto MutedPlayers = 0xd0; // TArray<AController*>
	}

	namespace n_APanicTeleportVolume { // : AActor
		constexpr auto AreaComponent = 0x3d0; // UBoxComponent*
		constexpr auto AssociatedSpawnLocations = 0x3d8; // TArray<ASpawnLocation*>
		constexpr auto PlayersInVolume = 0x3e8; // TArray<TWeakObjectPtr<AAthenaPlayerCharacter>>
	}

	namespace n_USoundNodeSwitch { // : USoundNode
		constexpr auto IntParameterName = 0x38; // FName
	}

	namespace n_UMapIslandRenderResource { // : UMapRenderResource
		constexpr auto IslandName = 0x28; // FName
	}

	namespace n_UPetWieldableReactMappingsDataAsset { // : UDataAsset
		constexpr auto WieldableReactMappings = 0x28; // TArray<FPetWieldableReactMapping>
	}

	namespace n_ULevelSequenceBurnIn { // : UUserWidget
		constexpr auto FrameInformation = 0x230; // FLevelSequencePlayerSnapshot
		constexpr auto LevelSequenceActor = 0x2c0; // ALevelSequenceActor*
	}

	namespace n_UGameplayEffectExtension { // : UObject
		constexpr auto RelevantSourceAttributes = 0x28; // TArray<FGameplayAttribute>
		constexpr auto RelevantTargetAttributes = 0x38; // TArray<FGameplayAttribute>
	}

	namespace n_UAddNPCOnShipStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAthenaAIItemParamsDataAsset { // : UDataAsset
		constexpr auto ItemEngageEnemyMethods = 0x28; // TArray<FAthenaAIItemEngageEnemyMethods>
	}

	namespace n_UCapstanEventDispatcherMock { // : UObject
		constexpr auto EventDispatcher = 0x30; // FObjectMessagingDispatcher
	}

	namespace n_UExponentialHeightFogComponent { // : USceneComponent
		constexpr auto FogDensity = 0x2b0; // float
		constexpr auto FogInscatteringColor = 0x2b4; // FLinearColor
		constexpr auto FarFogInscatteringColor = 0x2c4; // FLinearColor
		constexpr auto DirectionalInscatteringExponent = 0x2d4; // float
		constexpr auto DirectionalInscatteringStartDistance = 0x2d8; // float
		constexpr auto StartScaleDirectionalInscattering = 0x2dc; // float
		constexpr auto FarScaleDirectionalInscattering = 0x2e0; // float
		constexpr auto DirectionalInscatteringColor = 0x2e4; // FLinearColor
		constexpr auto FogHeightFalloff = 0x2f4; // float
		constexpr auto FogMaxOpacity = 0x2f8; // float
		constexpr auto StartDistance = 0x2fc; // float
		constexpr auto FarDistance = 0x300; // float
		constexpr auto StartScale = 0x304; // float
		constexpr auto FarScale = 0x308; // float
		constexpr auto bIsUnderwater = 0x30c; // bool
	}

	namespace n_UAthenaAnimationItemListingMappingsAsset { // : UDataAsset
		constexpr auto MaleListings = 0x28; // FAthenaAnimationItemListingMappingType
		constexpr auto FemaleListings = 0x48; // FAthenaAnimationItemListingMappingType
	}

	namespace n_ATestBeaconClient { // : AOnlineBeaconClient
		constexpr auto BeaconOwner = 0x3f8; // AOnlineBeaconHostObject*
		constexpr auto BeaconConnection = 0x400; // UNetConnection*
		constexpr auto ConnectionState = 0x408; // EBeaconConnectionState
	}

	namespace n_ASlidingDoor { // : ADoor
		constexpr auto MovementDirection = 0x4f0; // ESlidingDoorDirection
		constexpr auto SlidingDoorAudioParams = 0x4f8; // USlidingDoorAudioParams*
		constexpr auto ServerDoorState = 0x520; // ESlidingDoorState
		constexpr auto InitialDoorMeshLocation = 0x52c; // FVector
	}

	namespace n_UWaitForUnlockStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UIslandNameForNPCContextDestinationDescriptor { // : UClueDestinationDescriptor
		constexpr auto IslandIdentifier = 0x40; // FName
	}

	namespace n_UAbilityTask_NetworkSyncPoint { // : UAbilityTask
		constexpr auto OnSync = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UBTTask_DetermineFollowUpAIAbility { // : UBTTaskNode
		constexpr auto AIAbilityTypeToFollowUp = 0x60; // UAthenaAIAbilityType*
	}

	namespace n_UScaleBoxSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UIpNetDriver { // : UNetDriver
		constexpr auto LogPortUnreach = 0x478; // char : 1
		constexpr auto AllowPlayerPortUnreach = 0x478; // char : 1
		constexpr auto MaxPortCountToTry = 0x47c; // uint32_t
	}

	namespace n_UMaterialExpressionLandscapeLayerCoords { // : UMaterialExpression
		constexpr auto MappingType = 0x70; // ETerrainCoordMappingType
		constexpr auto CustomUVType = 0x71; // ELandscapeCustomizedCoordType
		constexpr auto MappingScale = 0x74; // float
		constexpr auto MappingRotation = 0x78; // float
		constexpr auto MappingPanU = 0x7c; // float
		constexpr auto MappingPanV = 0x80; // float
	}

	namespace n_UAimSensitivityComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UTaleQuestAddXMarksMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTaleQuestParallelForeachStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestParallelForeachStepDesc*
		constexpr auto Count = 0x98; // int32_t
		constexpr auto Steps = 0xa0; // TArray<UTaleQuestStep*>
		constexpr auto Frames = 0xb0; // TArray<UIteratorFrame*>
	}

	namespace n_UAIProgressiveWavesSpawner { // : UAISpawner
		constexpr auto ApplyLocalisableNamesToNameplates = 0x428; // bool
		constexpr auto Waves = 0x430; // TArray<FAIPersistentSpawnerWave>
		constexpr auto TriggerActor = 0x458; // AActor*
	}

	namespace n_UQuestBookItemDesc { // : UItemDesc
		constexpr auto PageList = 0x130; // UQuestBookPageList*
	}

	namespace n_UWeightedRewardTableAsset { // : UDataAsset
		constexpr auto RewardTable = 0x28; // FWeightedRewardTable
	}

	namespace n_UWashedUpSkeletonLandClueCreator { // : ULandClueCreator
		constexpr auto SkeletonPoses = 0x30; // TArray<UClass*>
		constexpr auto ClueItemDesc = 0x40; // UClass*
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMin = 0x60; // int32_t
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMax = 0x64; // int32_t
		constexpr auto LootItemSpawnZOffset = 0x68; // int32_t
	}

	namespace n_UParticleModuleSpawnPerUnit { // : UParticleModuleSpawnBase
		constexpr auto bAffectsGroupA = 0x58; // char : 1
		constexpr auto bAffectsGroupB = 0x58; // char : 1
		constexpr auto bAffectsGroupC = 0x58; // char : 1
		constexpr auto bAffectsGroupD = 0x58; // char : 1
		constexpr auto bAffectsGroupE = 0x58; // char : 1
		constexpr auto bAffectsReplacementGroup = 0x58; // char : 1
		constexpr auto UnitScalar = 0x5c; // float
		constexpr auto SpawnPerUnit = 0x60; // FRawDistributionFloat
		constexpr auto bIgnoreSpawnRateWhenMoving = 0x98; // char : 1
		constexpr auto MovementTolerance = 0x9c; // float
		constexpr auto MaxFrameDistance = 0xa0; // float
		constexpr auto bIgnoreMovementAlongX = 0xa4; // char : 1
		constexpr auto bIgnoreMovementAlongY = 0xa4; // char : 1
		constexpr auto bIgnoreMovementAlongZ = 0xa4; // char : 1
	}

	namespace n_UBTDecorator_TargetOnShip { // : UBTDecorator_BaseConditional
		constexpr auto Invert = 0x68; // bool
		constexpr auto ShipOwnership = 0x69; // EBT_ShipOwnership
	}

	namespace n_UStringArrayDataAsset { // : UDataAsset
		constexpr auto Array = 0x28; // TArray<FString>
	}

	namespace n_UWardrobeOutfitDataAsset { // : UDataAsset
		constexpr auto FemaleWardrobeItems = 0x28; // TArray<FName>
		constexpr auto MaleWardrobeItems = 0x38; // TArray<FName>
		constexpr auto BiasPerCategory = 0x48; // TArray<FWardrobeOutfitCategoryBias>
	}

	namespace n_UPawnAction_Wait { // : UPawnAction
		constexpr auto TimeToWait = 0x90; // float
	}

	namespace n_AGameEventService { // : AActor
		constexpr auto GameEvents = 0x418; // TArray<AGameEvent*>
	}

	namespace n_UMovieSceneAkAudioEventTrack { // : UMovieSceneAkTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
		constexpr auto bIsAMasterTrack = 0x98; // char : 1
	}

	namespace n_ACarvedWoodenPlank { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x790; // UInventoryItemComponent*
		constexpr auto UsableWieldableComponent = 0x798; // UUsableWieldableComponent*
		constexpr auto FOVBlendSpeed = 0x7a0; // float
		constexpr auto TargetFOV = 0x7a4; // float
		constexpr auto AimSpeedParams = 0x7a8; // FItemUseSpeedParams
	}

	namespace n_UIslandVisitorCallbackComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UShipFireLightParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FShipFireLightParams
	}

	namespace n_UEelThrowAIAbility { // : UAthenaAIAbility
		constexpr auto CachedBlackboardComponent = 0x78; // UBlackboardComponent*
	}

	namespace n_AMurk { // : AActor
		constexpr auto WaterModifierZone = 0x3d0; // UMurkWaterModifierZoneComponent*
		constexpr auto SceneRootComponent = 0x3d8; // USceneComponent*
		constexpr auto InnerSheet = 0x3e0; // UStaticMeshComponent*
		constexpr auto OuterSheet = 0x3e8; // UStaticMeshComponent*
		constexpr auto UnderwaterSheetHeightScale = 0x3f0; // float
		constexpr auto InnerSheetMaterialInstance = 0x3f8; // UMaterialInstanceDynamic*
		constexpr auto OuterSheetMaterialInstance = 0x400; // UMaterialInstanceDynamic*
	}

	namespace n_ADamageableCargoRunCrateItemProxy { // : ACargoRunCrateItemProxy
		constexpr auto GatedHealthComponent = 0x7e8; // UGatedHealthComponent*
		constexpr auto VisualHealthResponseComponent = 0x7f0; // UVisualHealthResponseComponent*
		constexpr auto LightweightStatusEffectComponent = 0x7f8; // ULightWeightStatusEffectManagerComponent*
	}

	namespace n_UVoyageRewardDataAsset { // : UDataAsset
		constexpr auto RankEntries = 0x28; // TArray<FPerChapterRankRewardEntry>
	}

	namespace n_UPhysicsSettings { // : UDeveloperSettings
		constexpr auto DefaultGravityZ = 0x38; // float
		constexpr auto DefaultTerminalVelocity = 0x3c; // float
		constexpr auto DefaultFluidFriction = 0x40; // float
		constexpr auto SimulateScratchMemorySize = 0x44; // int32_t
		constexpr auto RagdollAggregateThreshold = 0x48; // int32_t
		constexpr auto TriangleMeshTriangleMinAreaThreshold = 0x4c; // float
		constexpr auto bEnableAsyncScene = 0x50; // bool
		constexpr auto bEnableShapeSharing = 0x51; // bool
		constexpr auto bEnablePCM = 0x52; // bool
		constexpr auto bWarnMissingLocks = 0x53; // bool
		constexpr auto bEnable2DPhysics = 0x54; // bool
		constexpr auto LockedAxis = 0x55; // ESettingsLockedAxis
		constexpr auto DefaultDegreesOfFreedom = 0x56; // ESettingsDOF
		constexpr auto BounceThresholdVelocity = 0x58; // float
		constexpr auto FrictionCombineMode = 0x5c; // EFrictionCombineMode
		constexpr auto RestitutionCombineMode = 0x5d; // EFrictionCombineMode
		constexpr auto MaxAngularVelocity = 0x60; // float
		constexpr auto MaxDepenetrationVelocity = 0x64; // float
		constexpr auto bSimulateSkeletalMeshOnDedicatedServer = 0x68; // bool
		constexpr auto bDefaultHasComplexCollision = 0x69; // bool
		constexpr auto MaxPhysicsDeltaTime = 0x6c; // float
		constexpr auto bSubstepping = 0x70; // bool
		constexpr auto bSubsteppingAsync = 0x71; // bool
		constexpr auto MaxSubstepDeltaTime = 0x74; // float
		constexpr auto MaxSubsteps = 0x78; // int32_t
		constexpr auto SyncSceneSmoothingFactor = 0x7c; // float
		constexpr auto AsyncSceneSmoothingFactor = 0x80; // float
		constexpr auto InitialAverageFrameRate = 0x84; // float
		constexpr auto PhysicalSurfaces = 0x88; // TArray<FPhysicalSurfaceName>
		constexpr auto DominanceGroups = 0x98; // TArray<FDominanceGroupPair>
		constexpr auto DominanceGroupNames = 0xa8; // TArray<FDominanceGroupName>
		constexpr auto DefaultStaticDominanceGroup = 0xb8; // EDominanceGroup
		constexpr auto DefaultMovableDominanceGroup = 0xb9; // EDominanceGroup
		constexpr auto bEnableMBP = 0xba; // bool
		constexpr auto MBPSubdivisions = 0xbc; // int32_t
		constexpr auto MBPWorldHalfExtentInCM = 0xc0; // float
	}

	namespace n_UWaitForMechanismActionCompletionStepDesc { // : UTaleQuestStepDesc
		constexpr auto Action = 0x80; // FQuestVariableActor
		constexpr auto BlockCrewMigrationWhileWaiting = 0x90; // bool
	}

	namespace n_ARowboat { // : AWatercraft
		constexpr auto LeftSideClamberSpot = 0x758; // UChildActorComponent*
		constexpr auto RightSideClamberSpot = 0x760; // UChildActorComponent*
		constexpr auto ForceSpot = 0x768; // UChildActorComponent*
		constexpr auto Lantern = 0x770; // UChildActorComponent*
		constexpr auto RowingSeat = 0x778; // UChildActorComponent*
		constexpr auto StorageSeat = 0x780; // UChildActorComponent*
		constexpr auto LiveryComponent = 0x788; // UShipLiveryComponent*
		constexpr auto CustomizationComponent = 0x790; // UReplicatedShipPartCustomizationComponent*
		constexpr auto WaterExclusionOffset = 0x798; // FVector
		constexpr auto TetherCustomisationComponent = 0x7a8; // UTetherCustomisationComponent*
		constexpr auto HealthComponent = 0x7b0; // UHealthComponent*
		constexpr auto ActorDamageableComponent = 0x7b8; // UActorDamageableComponent*
		constexpr auto RammableComponent = 0x7c0; // URammableComponent*
		constexpr auto ScrapeableComponent = 0x7c8; // UScrapeableComponent*
		constexpr auto RowboatAudio = 0x7d0; // URowboatAudioComponent*
		constexpr auto HullDragDynamicsDesc = 0x7d8; // UBaseHullDragDynamicsDesc*
		constexpr auto OarSplashContainer = 0x7e0; // UBowSplashContainer*
		constexpr auto MountableComponent = 0x7e8; // UMountableComponent*
		constexpr auto LinearDampingOverTimeWhileBeachedScalarCurve = 0x7f0; // UCurveFloat*
		constexpr auto AngularDampingOverTimeWhileBeachedScalarCurve = 0x7f8; // UCurveFloat*
		constexpr auto DamageEffectData = 0x800; // FRowboatDamageEffectData
		constexpr auto StrainDamageData = 0x818; // FRowboatStrainDamageData
		constexpr auto AlwaysEnabledInteractables = 0x838; // TArray<UChildActorComponent*>
		constexpr auto ShroudBreakerTrackerComponent = 0x848; // UShroudBreakerTrackerComponent*
		constexpr auto IsBeingLaunched = 0x850; // bool
		constexpr auto IsSinking = 0x851; // bool
		constexpr auto MaxPushingAngle = 0x854; // float
		constexpr auto CurrentStrainAmount = 0x858; // float
		constexpr auto IsDocked = 0x85c; // bool
		constexpr auto CoverCollisionChannel = 0x85e; // ECollisionChannel
		constexpr auto UnderCoverCheckInterval = 0x860; // float
		constexpr auto UnderCoverHeight = 0x864; // float
		constexpr auto RelativeUnderCoverProbeRoots = 0x868; // TArray<FVector>
		constexpr auto TrackedActorType = 0x878; // ETrackedActorType
	}

	namespace n_UTutorial2019Component { // : UActorComponent
		constexpr auto IsEnabledByServer = 0xc8; // bool
		constexpr auto IsInTutorialTale = 0xc9; // bool
	}

	namespace n_UCannonAnimInstance { // : UAnimInstance
		constexpr auto CannonIsFiring = 0x448; // bool
		constexpr auto CannonFiringAnimBlend = 0x44c; // float
		constexpr auto Pitch = 0x450; // float
		constexpr auto YawRangeMapped = 0x454; // float
	}

	namespace n_UHasEmblemNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto RequiredEmblemNames = 0x30; // TArray<FName>
	}

	namespace n_UCompassSpinComponent { // : UActorComponent
		constexpr auto EnableAcceleration = 0xd0; // bool
		constexpr auto MagnetForce = 0xd4; // float
		constexpr auto DefaultDampingFactor = 0xd8; // float
		constexpr auto BoneToRotate = 0xdc; // FName
		constexpr auto EnableOneShotSpinning = 0xe4; // bool
		constexpr auto OneShotSpinDuration = 0xe8; // float
		constexpr auto OneShotSpinDampingFactor = 0xec; // float
		constexpr auto OneShotSpinSpeed = 0xf0; // float
		constexpr auto OneShotSpinSeekSpeed = 0xf4; // float
		constexpr auto OneShotSpinAcceleration = 0xf8; // float
		constexpr auto OneShotSpinDecelerationPeriod = 0xfc; // float
		constexpr auto OneShotSpinSeekSnapPeriod = 0x100; // float
		constexpr auto OneShotSpinSeekSnapDegrees = 0x104; // float
		constexpr auto EnableSpinningInStorms = 0x108; // bool
		constexpr auto StormSpinDampingFactor = 0x10c; // float
		constexpr auto StormSpinSpeeds = 0x110; // FWeightedProbabilityRangeOfRanges
		constexpr auto StormSpinAccelerations = 0x140; // FWeightedProbabilityRangeOfRanges
		constexpr auto StormSpinChancesOfPointingNorth = 0x170; // TArray<float>
		constexpr auto StormSpinPointingNorthDurations = 0x180; // FWeightedProbabilityRangeOfRanges
		constexpr auto StormSpinDirectionChangeInterval = 0x1b0; // FFloatRange
	}

	namespace n_UEndUserSettings { // : UObject
		constexpr auto bSendAnonymousUsageDataToEpic = 0x30; // bool
	}

	namespace n_UMinimumCrewCountSpawnRequirement { // : USpawnRequirement
		constexpr auto MinimumCrewCount = 0x50; // int32_t
	}

	namespace n_UZoomMapTaleStepDesc { // : UTaleQuestStepDesc
		constexpr auto IslandName = 0x80; // FQuestVariableName
		constexpr auto TreasureMapDataAsset = 0x90; // UTreasureMapDataAsset*
		constexpr auto Params = 0x98; // UZoomMapParamsDataAsset*
		constexpr auto PageLayout = 0xa0; // FQuestVariablePageLayout
		constexpr auto DigSpot = 0xb0; // FQuestVariableVector
	}

	namespace n_UEmoteCategory { // : UClothingCategory
		constexpr auto PiratePreviewRemovals = 0x78; // TArray<UClothingCategory*>
		constexpr auto PiratePreviewAnim = 0x88; // UAnimationAsset*
		constexpr auto PiratePreviewCamera = 0x90; // FName
		constexpr auto PiratePreviewSpin = 0x98; // bool
	}

	namespace n_URemoveNPCOnSurfaceStepDesc { // : UTaleQuestStepDesc
		constexpr auto NPCOnSurfaceManager = 0x80; // FQuestVariableGuid
	}

	namespace n_UFishingSetupDataAsset { // : UDataAsset
		constexpr auto CastDistanceMin = 0x28; // float
		constexpr auto CastDistanceMax = 0x2c; // float
		constexpr auto PreCastTimeForMaxCastDistance = 0x30; // float
		constexpr auto DistanceRequiredToReelInToCatchTheFish = 0x34; // float
		constexpr auto MinFloatDistanceFromPlayer = 0x38; // float
		constexpr auto MaxFishSpawnDepth = 0x3c; // float
		constexpr auto CastingThrowDurationAtMinDistance = 0x40; // float
		constexpr auto CastingThrowDurationAtMaxDistance = 0x44; // float
		constexpr auto FishSpawnHitDetectionHalfExtentXY = 0x48; // float
		constexpr auto FishSpawnHitDetectionHalfExtentZ = 0x4c; // float
		constexpr auto TimeBeforeAppearing = 0x50; // FWeightedProbabilityRangeOfRanges
		constexpr auto DelayBeforeTrackingFloat = 0x80; // float
		constexpr auto MaxDistanceFromFloatBeforeFishGivesUp = 0x84; // float
		constexpr auto TimeSpentBiting = 0x88; // FWeightedProbabilityRangeOfRanges
		constexpr auto FloatReelingMoveSpeedWhenNoFishOnLine = 0xb8; // float
		constexpr auto ReelingAnimationMaxSpeedWhenNoFishOnLine = 0xbc; // float
		constexpr auto ReelingAnimationSpeedChangePerSec = 0xc0; // float
		constexpr auto ReelingAnimationStoppingSpeedChangePerSec = 0xc4; // float
		constexpr auto MaxReelingWhenFailedTime = 0xc8; // float
		constexpr auto FishingMiniGameLeftRightInputAngle = 0xcc; // float
		constexpr auto FishingMiniGameBattlingAngle = 0xd0; // float
		constexpr auto FishingMiniGameInputThreshold = 0xd4; // float
		constexpr auto TimeBeforeTurningOnFishHits = 0xd8; // float
		constexpr auto FOVChangeWhenBattling = 0xdc; // float
		constexpr auto FOVBlendSpeedWhenBattling = 0xe0; // float
		constexpr auto TimeBeforeDestroyingFishAndAwardingPlayer = 0xe4; // float
		constexpr auto CameraYawFishMaxOffset = 0xe8; // float
		constexpr auto CameraMaxYaw = 0xec; // float
		constexpr auto CameraYawSpringAcc = 0xf0; // float
		constexpr auto CameraYawSpringAccWhenResetting = 0xf4; // float
		constexpr auto CameraExtraPitchWhenPullingBack = 0xf8; // float
		constexpr auto CameraExtraPitchSpringAcc = 0xfc; // float
		constexpr auto CameraExtraPitchSpringAccWhenResetting = 0x100; // float
		constexpr auto BlendBackFromDisabledCameraDuration = 0x104; // float
		constexpr auto RodDirectionBendMaxAngleOfFishFromFromRod = 0x108; // float
		constexpr auto RodDirectionMaxBendLeft = 0x10c; // float
		constexpr auto RodDirectionMaxBendRight = 0x110; // float
		constexpr auto ReturnFromFreeLookSpringAcc = 0x114; // float
	}

	namespace n_UUserInterfaceSettings { // : UDeveloperSettings
		constexpr auto RenderFocusRule = 0x38; // ERenderFocusRule
		constexpr auto DefaultCursor = 0x40; // FStringClassReference
		constexpr auto TextEditBeamCursor = 0x50; // FStringClassReference
		constexpr auto CrosshairsCursor = 0x60; // FStringClassReference
		constexpr auto GrabHandCursor = 0x70; // FStringClassReference
		constexpr auto GrabHandClosedCursor = 0x80; // FStringClassReference
		constexpr auto SlashedCircleCursor = 0x90; // FStringClassReference
		constexpr auto ApplicationScale = 0xa0; // float
		constexpr auto UIScaleRule = 0xa4; // EUIScalingRule
		constexpr auto CustomScalingRuleClass = 0xa8; // FStringClassReference
		constexpr auto UIScaleCurve = 0xb8; // FRuntimeFloatCurve
		constexpr auto CursorClasses = 0x138; // TArray<UObject*>
		constexpr auto CustomScalingRuleClassInstance = 0x148; // UObject*
		constexpr auto CustomScalingRule = 0x150; // UDPICustomScalingRule*
	}

	namespace n_UMaterialExpressionOneMinus { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
	}

	namespace n_ULinkEQSContextWithVariableStepDesc { // : UTaleQuestStepDesc
		constexpr auto Context = 0x80; // UEnvQueryContext_TaleContextBase*
		constexpr auto Variable = 0x88; // FQuestVariableSetEQSTaleContextValue
	}

	namespace n_ADebugCameraHUD { // : AHUD
		constexpr auto WhiteColor = 0x3d0; // FColor
		constexpr auto GreenColor = 0x3d4; // FColor
		constexpr auto RedColor = 0x3d8; // FColor
		constexpr auto PlayerOwner = 0x3e0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x3e8; // char : 1
		constexpr auto bShowHUD = 0x3e8; // char : 1
		constexpr auto bShowDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowHitBoxDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowOverlays = 0x3e8; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x3e8; // char : 1
		constexpr auto PostRenderedActors = 0x3f0; // TArray<AActor*>
		constexpr auto LastHUDRenderTime = 0x400; // float
		constexpr auto RenderDelta = 0x404; // float
		constexpr auto DebugDisplay = 0x408; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x418; // TArray<FName>
		constexpr auto Canvas = 0x428; // UCanvas*
		constexpr auto DebugCanvas = 0x430; // UCanvas*
		constexpr auto DebugTextList = 0x438; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x448; // AActor*
		constexpr auto ShowDebugTargetActor = 0x450; // AActor*
	}

	namespace n_UEmotePropDiceData { // : UEmotePropData
		constexpr auto DiceType = 0x28; // EDiceType
	}

	namespace n_UAIOnDemandSpawner { // : UAISpawner
		constexpr auto HasSpawnerLevelEncounters = 0x38; // bool
		constexpr auto SpawnTypeParamsCollection = 0x40; // FAISpawnTypeParamsCollection
		constexpr auto DefaultEncounterSettings = 0x88; // UAIEncounterSettings*
		constexpr auto DefaultSpawnWaveProgression = 0x90; // UAISpawnWaveSequenceRankProgression*
		constexpr auto SpawnContextSpecificEncounterSettings = 0x98; // TArray<FAISpawnContextIdEncounterSettingsPair>
		constexpr auto ShouldSpawnFacingRegionCentre = 0xa8; // bool
		constexpr auto DefaultSpawnType = 0xa9; // EAthenaAISpawnType
		constexpr auto FindSpawnPosQuery = 0xb0; // UEnvQuery*
		constexpr auto FindSpawnPosQueryRunMode = 0xb8; // EEnvQueryRunMode
		constexpr auto SpawnLocationType = 0xbc; // FName
		constexpr auto MaxNumOfSpawnedPawns = 0xc4; // int32_t
		constexpr auto PriorityForSpawnedPawns = 0xc8; // int32_t
		constexpr auto SpawnOverrides = 0xd0; // TArray<FConditionalAISpawnOverride>
		constexpr auto AdditionalBehaviours = 0xe0; // TArray<FAdditionalSpawnerBehaviour>
		constexpr auto AthenaAISettings = 0x360; // UAthenaAISettings*
	}

	namespace n_UCannonDescAsset { // : UShipPartDescAsset
		constexpr auto CannonDesc = 0x28; // FCannonDesc
	}

	namespace n_AControllableObject { // : AInteractableBase
		constexpr auto ControlObjectActionRuleParams = 0x428; // FControlObjectActionRuleParams
		constexpr auto Phrases = 0x438; // UPhrasesRadialDataAsset*
		constexpr auto AllowDisconnectWhenIdle = 0x440; // bool
		constexpr auto IdleDisconnectSecondsThreshold = 0x444; // uint32_t
		constexpr auto ControllingActor = 0x4e8; // TWeakObjectPtr<AActor>
	}

	namespace n_UEnvQueryTest_Random { // : UEnvQueryTest
		constexpr auto TestOrder = 0x30; // int32_t
		constexpr auto TestPurpose = 0x34; // EEnvTestPurpose
		constexpr auto MultipleContextFilterOp = 0x35; // EEnvTestFilterOperator
		constexpr auto MultipleContextScoreOp = 0x36; // EEnvTestScoreOperator
		constexpr auto FilterType = 0x37; // EEnvTestFilterType
		constexpr auto BoolValue = 0x38; // FAIDataProviderBoolValue
		constexpr auto FloatValueMin = 0x68; // FAIDataProviderFloatValue
		constexpr auto FloatValueMax = 0x98; // FAIDataProviderFloatValue
		constexpr auto ScoringEquation = 0xc9; // EEnvTestScoreEquation
		constexpr auto ClampMinType = 0xca; // EEnvQueryTestClamping
		constexpr auto ClampMaxType = 0xcb; // EEnvQueryTestClamping
		constexpr auto ScoreClampMin = 0xd0; // FAIDataProviderFloatValue
		constexpr auto ScoreClampMax = 0x100; // FAIDataProviderFloatValue
		constexpr auto ScoringFactor = 0x130; // FAIDataProviderFloatValue
		constexpr auto bWorkOnFloatValues = 0x168; // char : 1
	}

	namespace n_UNavArea_Obstacle { // : UNavArea
		constexpr auto DefaultCost = 0x28; // float
		constexpr auto FixedAreaEnteringCost = 0x2c; // float
		constexpr auto DrawColor = 0x30; // FColor
		constexpr auto SupportedAgents = 0x34; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x38; // char : 1
		constexpr auto bSupportsAgent1 = 0x38; // char : 1
		constexpr auto bSupportsAgent2 = 0x38; // char : 1
		constexpr auto bSupportsAgent3 = 0x38; // char : 1
		constexpr auto bSupportsAgent4 = 0x38; // char : 1
		constexpr auto bSupportsAgent5 = 0x38; // char : 1
		constexpr auto bSupportsAgent6 = 0x38; // char : 1
		constexpr auto bSupportsAgent7 = 0x38; // char : 1
		constexpr auto bSupportsAgent8 = 0x39; // char : 1
		constexpr auto bSupportsAgent9 = 0x39; // char : 1
		constexpr auto bSupportsAgent10 = 0x39; // char : 1
		constexpr auto bSupportsAgent11 = 0x39; // char : 1
		constexpr auto bSupportsAgent12 = 0x39; // char : 1
		constexpr auto bSupportsAgent13 = 0x39; // char : 1
		constexpr auto bSupportsAgent14 = 0x39; // char : 1
		constexpr auto bSupportsAgent15 = 0x39; // char : 1
	}

	namespace n_ULaunchableShotActionComponent { // : UItemActionComponent
		constexpr auto InterruptActionOnProjectileDestroyed = 0x2d0; // bool
		constexpr auto CurrentProjectile = 0x2d8; // ALaunchableProjectile*
		constexpr auto LaunchableProjectileState = 0x2e0; // FLaunchableProjectileState
		constexpr auto OverrideProjectileCollisionBeforeFiring = 0x324; // bool
		constexpr auto ProjectileCollisionProfileOverride = 0x328; // FCollisionProfileName
		constexpr auto ProjectileCollisionProfile = 0x330; // FCollisionProfileName
		constexpr auto ProjectileType = 0x338; // ALaunchableProjectile*
		constexpr auto AmmoCost = 0x340; // int32_t
		constexpr auto ShouldProjectileAttachToWeaponOnSpawn = 0x344; // bool
		constexpr auto ShouldConsumeAmmoWhenUsedByAI = 0x345; // bool
		constexpr auto ShouldConsumeAmmoWhenUsedByPlayers = 0x346; // bool
		constexpr auto ProjectileRelativeAimOffset = 0x348; // FVector
		constexpr auto MaxAcceptableAttackTimeStampDelta = 0x354; // float
		constexpr auto LaunchableAudioParams = 0x380; // ULaunchableShotComponentAudioParams*
		constexpr auto FireProjectileSfxParams = 0x388; // FWwiseEmitterCreationParams
		constexpr auto MuzzleFireVFXSocketName = 0x3b0; // FName
		constexpr auto MuzzleFireVfxFirst = 0x3b8; // UObject*
		constexpr auto MuzzleFireVfxThird = 0x3c0; // UObject*
		constexpr auto MuzzleFireVfxLocal = 0x3c8; // UObject*
		constexpr auto ActionFireForceFeedback = 0x3d0; // UForceFeedbackEffect*
		constexpr auto ActionFireForceFeedbackTag = 0x3d8; // FName
	}

	namespace n_UAthenaAICharacterControllerSharedParamValuesDataAsset { // : UAthenaAIControllerSharedParamValuesDataAsset
		constexpr auto OverrideUseRVOAvoidance = 0x88; // bool
		constexpr auto UseRVOAvoidance = 0x89; // bool
		constexpr auto OverridePrioritiseInteractablesBeforeEnemies = 0x8a; // bool
		constexpr auto PrioritiseInteractablesBeforeEnemies = 0x8b; // bool
		constexpr auto DistanceInMToCannonShotHitChanceCurve = 0x90; // UCurveFloat*
		constexpr auto AIStrategyMovementProperties = 0x98; // TArray<FAIStrategyMovementProperties>
		constexpr auto ItemCategoryAIStrategyMovementPropertiesOverrides = 0xa8; // TArray<FItemCategoryAIStrategyMovementPropertiesOverride>
		constexpr auto CannonTargetingParams = 0xb8; // FAthenaAICharacterCannonTargetingParams
		constexpr auto WieldedItemProjectileEffectivenessProperties = 0xc8; // TArray<FAthenaAICharacterControllerItemCategoryProjectileEffectivenessProperties>
		constexpr auto WieldedItemOverrideNamedControllerParams = 0xd8; // TArray<FAthenaAICharacterControllerItemCategoryNamedParams>
		constexpr auto NamedItemParams = 0xe8; // TArray<FAthenaAIItemParamValue>
		constexpr auto SpawnItemDescForItemCategories = 0xf8; // TArray<FAthenaAICharacterControllerSpawnItemDescForItemCategory>
		constexpr auto AIAbilityParams = 0x108; // TArray<UAthenaAIAbilityParams*>
		constexpr auto NonItemEngageOptions = 0x118; // TArray<FAthenaAIEngageEnemyData>
		constexpr auto AnimationDataOverrideAsset = 0x128; // FStringAssetReference
		constexpr auto CustomAnimationAsset = 0x138; // FStringAssetReference
		constexpr auto OverrideNoInitialItem = 0x148; // bool
		constexpr auto NoInitialItem = 0x149; // bool
		constexpr auto OverrideBeginFleeing = 0x14a; // bool
		constexpr auto BeginFleeing = 0x14b; // bool
		constexpr auto FleeingEQS = 0x150; // UEnvQuery*
	}

	namespace n_UEquippedWithClothingStatCondition { // : UStatCondition
		constexpr auto RequiredClothingData = 0x28; // FRequiredClothingData
	}

	namespace n_AShortRangeMarker { // : AActor
		constexpr auto DynamicMaterials = 0x3e0; // TArray<UMaterialInstanceDynamic*>
		constexpr auto LifetimerTimer = 0x3f0; // float
		constexpr auto FadeTimer = 0x3f4; // float
		constexpr auto TriggerFadeIn = 0x3f8; // FScriptMulticastDelegate
		constexpr auto TriggerFadeOut = 0x408; // FScriptMulticastDelegate
		constexpr auto CachedActors = 0x418; // TArray<TWeakObjectPtr<AActor>>
	}

	namespace n_UMaterialExpressionCustomVelocity { // : UMaterialExpressionCustomOutput
		constexpr auto Velocity2D = 0x70; // FExpressionInput
	}

	namespace n_UFlamesOfFateQuestInteractableComponent { // : UFlamesOfFateInteractableComponent
		constexpr auto DisplayName = 0x130; // FText
		constexpr auto TakeFlameTooltipText = 0x168; // FText
		constexpr auto LanternNotRaisedToolTipText = 0x1a0; // FText
		constexpr auto NotWieldingFlameTooltipText = 0x1d8; // FText
		constexpr auto CannotSetFlameTooltipText = 0x210; // FText
		constexpr auto FlameColour = 0x248; // EFlameOfFateType
	}

	namespace n_AHideoutExit { // : AActor
		constexpr auto TriggerZoneComponent = 0x3d0; // UBoxComponent*
	}

	namespace n_URotateMeshToActorComponent { // : UActorComponent
		constexpr auto MeshToRotate = 0xc8; // UMeshComponent*
		constexpr auto ActorToRotateTo = 0xd0; // AActor*
		constexpr auto CloseProximityRadius = 0xd8; // float
		constexpr auto Use2DDistanceForCloseProximityRadius = 0xdc; // bool
		constexpr auto WhenInCloseProximityKeepLastYaw = 0xdd; // bool
		constexpr auto RotationSpeed = 0xe0; // float
		constexpr auto PreventPitchModification = 0xe4; // bool
		constexpr auto MaxPitch = 0xe8; // float
		constexpr auto CloseProximityYawRotation = 0xec; // float
	}

	namespace n_UWeepingComponent { // : UActorComponent
		constexpr auto FillRate = 0xc8; // float
		constexpr auto MinWeepDuration = 0xcc; // float
		constexpr auto MaxWeepDuration = 0xd0; // float
		constexpr auto MinCalmDuration = 0xd4; // float
		constexpr auto MaxCalmDuration = 0xd8; // float
		constexpr auto MaterialBlendInTime = 0xdc; // float
		constexpr auto MaterialBlendOutTime = 0xe0; // float
		constexpr auto DecalBlendInTime = 0xe4; // float
		constexpr auto DecalBlendOutTime = 0xe8; // float
		constexpr auto SFXEmitterHeightOffset = 0xec; // float
		constexpr auto StartWeepingSFX = 0xf0; // UWwiseEvent*
		constexpr auto StopWeepingSFX = 0xf8; // UWwiseEvent*
		constexpr auto WeepingSFXPool = 0x138; // UWwiseObjectPoolWrapper*
		constexpr auto DynamicMaterials = 0x140; // TArray<UMaterialInstanceDynamic*>
		constexpr auto DecalMaterial = 0x150; // UMaterialInstanceDynamic*
		constexpr auto State = 0x158; // EWeepingState
		constexpr auto SupressableEmitterTag = 0x190; // FName
		constexpr auto ParticleEmitters = 0x198; // TArray<UParticleSystemComponent*>
	}

	namespace n_UAthenaPlayModeLevelsDataAsset { // : UDataAsset
		constexpr auto PlayModeSpecificLevels = 0x28; // FPlayModeLevelArray [0x4]
		constexpr auto CommonLevels = 0xa8; // TArray<FStringAssetReference>
	}

	namespace n_UFireGridAudioManager { // : UObject
		constexpr auto FireAudioParams = 0x28; // FFireCellAudioParams
		constexpr auto OwningActor = 0x68; // AActor*
		constexpr auto FirePropagator = 0x70; // UFirePropagator*
	}

	namespace n_UMeleeWeaponDataAsset { // : UDataAsset
		constexpr auto PlayerAttackSelectionTime = 0x28; // float
		constexpr auto MovementSpeedConfig = 0x30; // UMeleeWeaponMovementSpeedConfig*
		constexpr auto ComboAttacks = 0x38; // TArray<UMeleeAttackDataAsset*>
		constexpr auto HeavyAttack = 0x48; // UMeleeAttackDataAsset*
		constexpr auto HeavyAttackChargeDuration = 0x50; // float
		constexpr auto SpecialAttacks = 0x58; // TArray<FMeleeWeaponSpecialAttackData>
		constexpr auto BlockingParameters = 0x68; // FItemBlockingParameters
		constexpr auto BlockingPhysicalMaterial = 0x70; // UPhysicalMaterial*
		constexpr auto BlockingMovementSpeed = 0x78; // EMeleeWeaponMovementSpeed
		constexpr auto HitBlockingMovementDisableTime = 0x7c; // float
		constexpr auto TrailParticleSystem_FP = 0x80; // UParticleSystem*
		constexpr auto TrailParticleSystem_TP = 0x88; // UParticleSystem*
		constexpr auto TrailStartSocketName = 0x90; // FName
		constexpr auto TrailEndSocketName = 0x98; // FName
		constexpr auto TrailWidthMode = 0xa0; // ETrailWidthMode
		constexpr auto TrailWidth = 0xa4; // float
		constexpr auto PerceptionHearingRange = 0xa8; // float
	}

	namespace n_UMovieSceneEventSection { // : UMovieSceneSection
		constexpr auto Events = 0x98; // FNameCurve
		constexpr auto EventData = 0x100; // FMovieSceneEventSectionData
	}

	namespace n_UWieldableMysteriousNoteLayout { // : UDataAsset
		constexpr auto DefaultTitle = 0x28; // FText
		constexpr auto DefaultBody = 0x60; // FText
		constexpr auto DefaultNoteLayoutItem = 0x98; // FWieldableMysteriousNoteLayoutItem
		constexpr auto NoteLayoutItems = 0x138; // TArray<FWieldableMysteriousNoteLayoutItem>
	}

	namespace n_UInvalidPetEntitlementBaseCategory { // : UPetEntitlementBaseCategory
		constexpr auto PetPreviewCamera = 0x80; // FName
	}

	namespace n_UWashedUpMessageInABottleClueCreator { // : ULandClueCreator
		constexpr auto MessageInABottleItem = 0x30; // UClass*
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMin = 0x50; // int32_t
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMax = 0x54; // int32_t
		constexpr auto LootItemSpawnZOffset = 0x58; // int32_t
		constexpr auto LootItemSinkIntoSandZDistanceMin = 0x5c; // float
		constexpr auto LootItemSinkIntoSandZDistanceMax = 0x60; // float
		constexpr auto LootItemSinkIntoSandRotationMin = 0x64; // float
		constexpr auto LootItemSinkIntoSandRotationMax = 0x68; // float
		constexpr auto SinkIntoSandItems = 0x70; // TArray<UClass*>
	}

	namespace n_UWwisePersistentContentStore { // : UObject
		constexpr auto PersistentlyLoadedBanks = 0x28; // TArray<UWwiseBank*>
	}

	namespace n_UScreenSpaceVfxComponent { // : UActorComponent
		constexpr auto Params = 0xc8; // UScreenSpaceVFXComponentParams*
		constexpr auto ScreenSpaceParticleSystems = 0xd8; // TArray<UParticleSystemComponent*>
	}

	namespace n_UIsPlayingOnCustomServerNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto ConditionalExpected = 0x28; // bool
	}

	namespace n_ALogVisualizerCameraController { // : ADebugCameraController
		constexpr auto PickedActor = 0x778; // AActor*
	}

	namespace n_AOceanCrawlerAICharacter { // : AAthenaAICharacter
		constexpr auto HealthGemComponent = 0x12c0; // UHealthGemComponent*
		constexpr auto BuffReceiver = 0x12c8; // UBuffReceiverComponent*
		constexpr auto OceanCrawlerType = 0x12d0; // EOceanCrawlerAIType
		constexpr auto MontageComponent = 0x12d8; // UCustomAnimationMontageComponent*
		constexpr auto OceanCrawlerAnimationServerData = 0x12e0; // UAnimationServerData*
		constexpr auto StaticCollisionRampAngleLimit = 0x12e8; // float
		constexpr auto ShouldPlayersInterruptBullRush = 0x12ec; // bool
		constexpr auto SporeBreathActive = 0x12ed; // bool
	}

	namespace n_URegionMapDataAsset { // : UDataAsset
		constexpr auto RegionData = 0x28; // FRegionMapData
	}

	namespace n_UTaleQuestGetTinySharkExperienceParticipatingCrews { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMerchantCrateMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UActorComponent { // : UObject
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USpawnActorStepDesc { // : USpawnActorStepDescBase
		constexpr auto SocketName = 0x100; // FName
		constexpr auto bAttachToSocket = 0x108; // bool
		constexpr auto LocatorVar = 0x110; // FQuestVariableActor
	}

	namespace n_UCoherentUIGTHUD { // : UCoherentUIGTBaseComponent
		constexpr auto HUDMaterialName = 0x310; // FStringAssetReference
		constexpr auto HUDMaterial = 0x320; // UMaterial*
		constexpr auto HUDMaterialInstance = 0x328; // UMaterialInstanceDynamic*
	}

	namespace n_UStatusEffectManagerComponent { // : UActorComponent
		constexpr auto RecipientResponseList = 0xf0; // UStatusRecipientResponseList*
		constexpr auto ActiveEffects = 0xf8; // TArray<FActiveStatusEffect>
	}

	namespace n_AContestTavernBanners { // : AActor
		constexpr auto SceneRootComponent = 0x3d8; // USceneComponent*
		constexpr auto BannerMeshComponent = 0x3e0; // UStaticMeshComponent*
		constexpr auto BannerPosition = 0x3e8; // int32_t
		constexpr auto Meshes = 0x3f0; // TArray<UStaticMesh*>
		constexpr auto BannerBaseMaterialIndex = 0x400; // int32_t
		constexpr auto UnfoldTime = 0x404; // float
		constexpr auto UnfoldDelay = 0x408; // float
		constexpr auto MaxWindAmount = 0x40c; // float
		constexpr auto WindBlendSpeed = 0x410; // float
		constexpr auto AssociatedRope = 0x418; // AActor*
		constexpr auto MatInst = 0x440; // UMaterialInstanceDynamic*
		constexpr auto BannerTexture = 0x448; // UTexture2D*
		constexpr auto UnfoldBanners = 0x450; // bool
		constexpr auto ShouldBeHidden = 0x451; // bool
	}

	namespace n_UTankardItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_URotatingAudioSourceComponent { // : UMeshRotatorComponent
		constexpr auto RotatingObjectPool = 0x110; // UWwiseObjectPoolWrapper*
		constexpr auto PlayWwiseEvent = 0x118; // UWwiseEvent*
		constexpr auto StopWwiseEvent = 0x120; // UWwiseEvent*
		constexpr auto PitchRtpcName = 0x128; // FName
		constexpr auto RollRtpcName = 0x130; // FName
		constexpr auto YawRtpcName = 0x138; // FName
		constexpr auto RtpcMax = 0x140; // float
	}

	namespace n_UFlamethrowerChargeComponent { // : UHealthComponent
		constexpr auto MaxCharge = 0x240; // float
		constexpr auto ChargeDrainPerSecond = 0x244; // float
	}

	namespace n_UMutateCollectorsChestStepDesc { // : UTaleQuestStepDesc
		constexpr auto CollectorsChest = 0x80; // FQuestVariableActor
	}

	namespace n_UInterpTrackMove { // : UInterpTrack
		constexpr auto PosTrack = 0x70; // FInterpCurveVector
		constexpr auto EulerTrack = 0x88; // FInterpCurveVector
		constexpr auto LookupTrack = 0xa0; // FInterpLookupTrack
		constexpr auto LookAtGroupName = 0xb0; // FName
		constexpr auto LinCurveTension = 0xb8; // float
		constexpr auto AngCurveTension = 0xbc; // float
		constexpr auto bUseQuatInterpolation = 0xc0; // char : 1
		constexpr auto bShowArrowAtKeys = 0xc0; // char : 1
		constexpr auto bDisableMovement = 0xc0; // char : 1
		constexpr auto bShowTranslationOnCurveEd = 0xc0; // char : 1
		constexpr auto bShowRotationOnCurveEd = 0xc0; // char : 1
		constexpr auto bHide3DTrack = 0xc0; // char : 1
		constexpr auto RotMode = 0xc4; // EInterpTrackMoveRotMode
	}

	namespace n_UBowSplashContainer { // : UDataAsset
		constexpr auto EnableProbes = 0x28; // bool
		constexpr auto VisibleCullDistance = 0x2c; // float
		constexpr auto HiddenCullDistance = 0x30; // float
		constexpr auto SpeedThreshold = 0x34; // float
		constexpr auto BowSplashFieldOfViewAngleAddition = 0x38; // float
		constexpr auto Probes = 0x40; // TArray<FBowSplashProbe>
	}

	namespace n_AShipService { // : AActor
		constexpr auto ShipList = 0x3e0; // TArray<FWeakActorHandle>
		constexpr auto CrewedShips = 0x410; // TArray<FCrewShipEntry>
		constexpr auto PersistentCrewShipData = 0x420; // FCrewShipPersistentDataManager
	}

	namespace n_UCompleteVoyageConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UAmmoTransferComponent { // : UActorComponent
		constexpr auto AmmoCount = 0xc8; // int32_t
		constexpr auto ActorOwner = 0xd0; // AActor*
	}

	namespace n_UPetCustomizationCategory { // : UPetEntitlementBaseCategory
		constexpr auto PetPreviewCamera = 0x80; // FName
	}

	namespace n_UDamageTrackerComponent { // : UActorComponent
		constexpr auto SecondsToWaitBeforeClearingDamageDone = 0xc8; // float
		constexpr auto DamageableComponent = 0xd0; // UDamageableComponent*
	}

	namespace n_UDebugTaleAddInstancedLevelStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x98; // UDebugTaleAddInstancedLevelStepDesc*
		constexpr auto InstancedLevelPath = 0xa0; // FString
	}

	namespace n_UHideoutService { // : UObject
		constexpr auto Hideouts = 0x30; // TArray<AHideout*>
	}

	namespace n_UTaleQuestSetNPCDialogKeyStepDesc { // : UTaleQuestStepDesc
		constexpr auto NPC = 0x80; // FQuestVariableActor
		constexpr auto Key = 0x90; // FName
		constexpr auto Value = 0x98; // FString
		constexpr auto KeyPin = 0xa8; // FQuestVariableName
		constexpr auto ValuePin = 0xb8; // FQuestVariableText
	}

	namespace n_UPremiumCatalogLandingPageItemDataAsset { // : UDataAsset
		constexpr auto Id = 0x28; // FGuid
		constexpr auto Images = 0x38; // TArray<FStringAssetReference>
		constexpr auto Title = 0x48; // FText
		constexpr auto Description = 0x80; // FText
		constexpr auto TimeLimited = 0xb8; // bool
		constexpr auto TimeLimitedPrice = 0xb9; // bool
		constexpr auto Size = 0xbc; // uint32_t
		constexpr auto FeatureToggle = 0xc0; // FName
		constexpr auto AccentImage = 0xc8; // FStringAssetReference
		constexpr auto TopBannerImage = 0xd8; // FStringAssetReference
		constexpr auto BottomBannerImage = 0xe8; // FStringAssetReference
		constexpr auto IncludeForPromotion = 0xf8; // FName
		constexpr auto ExcludeFromPromotion = 0x100; // FName
	}

	namespace n_USpawnBarrelsOfPlentyStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_URemoveFogBankAvoidanceAreaStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // URemoveFogBankAvoidanceAreaStepDesc*
	}

	namespace n_UShortRangeMarkerDataAsset { // : UDataAsset
		constexpr auto RewardMarker = 0x28; // UActorSpawnData*
		constexpr auto RewardMarkerHeight = 0x30; // float
	}

	namespace n_UBlockGeysersTaleQuestServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto ActorNearIsland = 0x28; // FQuestVariableActor
	}

	namespace n_ACursedCaptainsSkullProxy { // : ASimpleBootyItemProxy
		constexpr auto RetractableComponent = 0x7a8; // URetractableComponent*
		constexpr auto ItemProxyShipTrackerComponent = 0x7b0; // UItemProxyShipTrackerComponent*
	}

	namespace n_UFishingRodSetupDataAsset { // : UDataAsset
		constexpr auto FishActorInteractionDesc = 0x28; // UItemDesc*
		constexpr auto DelayBeforeAllowingACast = 0x30; // float
		constexpr auto DelayBeforeCreatingFishingFloat = 0x34; // float
		constexpr auto DelayBeforeDestroyingFishingFloat = 0x38; // float
		constexpr auto FishingFloatType = 0x40; // AFishingFloat*
		constexpr auto HitTestTraceChannel = 0x48; // ECollisionChannel
		constexpr auto PreCastingPlayerSpeedModifier = 0x4c; // float
		constexpr auto CastingTimeBeforeTurningOnHits = 0x50; // float
		constexpr auto TimeBetweenIsFloatLocationValidChecks = 0x54; // float
		constexpr auto SingleFishAnimationLoopDuration = 0x58; // float
		constexpr auto DriftOffsetToStopFishJumping = 0x5c; // float
		constexpr auto FishBreeds = 0x60; // TArray<FDebugFishSelectionBreed>
		constexpr auto FishBreedsInAPond = 0x70; // TArray<FDebugFishSelectionBreed>
		constexpr auto ForceFeedbackLevels = 0x80; // TArray<FFishingRodForceFeedbackLevel>
		constexpr auto ComedyItems = 0x90; // TArray<FFishingComedyItemInfo>
		constexpr auto ChanceOfComedyItems = 0xa0; // float
		constexpr auto DistanceFromPlayerToCatchComedyItem = 0xa4; // float
		constexpr auto FishBait = 0xa8; // TArray<FFishBaitInfo>
		constexpr auto RopeThickness = 0xb8; // float
		constexpr auto RopeSlackAtMaxDistance = 0xbc; // float
		constexpr auto RopeSlackAtMinDistance = 0xc0; // float
		constexpr auto RopeOnRodSlack = 0xc4; // float
		constexpr auto RopeOnRodMaxSway = 0xc8; // float
		constexpr auto TimeToBlendAwaySway = 0xcc; // float
		constexpr auto MaxTimeToWaitForAnimationStateToFinish = 0xd0; // float
		constexpr auto ServerEstimateRodEndPosition = 0xd4; // FVector
		constexpr auto ServerEstimateRodBasePosition = 0xe0; // FVector
		constexpr auto RodBaseHitDetectionExtraOffset = 0xec; // FVector
		constexpr auto MinimumShakeValue = 0xf8; // float
		constexpr auto ReelingCooldownMultiplier = 0xfc; // float
		constexpr auto RodCastAudioDrawBack = 0x100; // UWwiseEvent*
		constexpr auto RodCastAudioCast = 0x108; // UWwiseEvent*
		constexpr auto RodBendStart = 0x110; // UWwiseEvent*
		constexpr auto RodBendStop = 0x118; // UWwiseEvent*
		constexpr auto RodBendFactorAmountToTriggerSound = 0x120; // float
		constexpr auto AmountOfWrongDirectionStrainToTriggerSound = 0x124; // float
		constexpr auto RodBendCooldown = 0x128; // float
		constexpr auto RodBendFactorRtpc = 0x12c; // FName
		constexpr auto RodCastReelLoopStart = 0x138; // UWwiseEvent*
		constexpr auto RodCastReelLoopStop = 0x140; // UWwiseEvent*
		constexpr auto RodCastReelSpeedRtpc = 0x148; // FName
		constexpr auto RtpcSpeedFactorCasting = 0x150; // float
		constexpr auto RtpcSpeedFactorFishing = 0x154; // float
		constexpr auto RtpcSpeedFactorReeling = 0x158; // float
		constexpr auto FishingBendWrongDirectionStart = 0x160; // UWwiseEvent*
		constexpr auto FishingBendWrongDirectionStop = 0x168; // UWwiseEvent*
		constexpr auto FishingLineSnap = 0x170; // UWwiseEvent*
		constexpr auto RodCastFishOutOfWaterWriggling = 0x178; // UWwiseEvent*
		constexpr auto FishingRodPool = 0x180; // UWwiseObjectPoolWrapper*
		constexpr auto RodStrainMagnitudeRtpc = 0x188; // FName
		constexpr auto FishTakenFromRod = 0x190; // UWwiseEvent*
		constexpr auto BaitAddedToHook = 0x198; // UWwiseEvent*
	}

	namespace n_UBTDecorator_PetRoamingAnimationStateActive { // : UBTDecorator_BaseConditional
		constexpr auto MatchingStates = 0x68; // TArray<EAthenaAnimationPetRoamingState>
	}

	namespace n_UNavLinkRenderingComponent { // : UPrimitiveComponent
		constexpr auto MinDrawDistance = 0x2b8; // float
		constexpr auto LDMaxDrawDistance = 0x2c0; // float
		constexpr auto CachedMaxDrawDistance = 0x2c4; // float
		constexpr auto DepthPriorityGroup = 0x2c8; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x2c9; // ESceneDepthPriorityGroup
		constexpr auto bAlwaysCreatePhysicsState = 0x2cc; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x2cc; // char : 1
		constexpr auto bMultiBodyOverlap = 0x2cc; // char : 1
		constexpr auto bCheckAsyncSceneOnMove = 0x2cc; // char : 1
		constexpr auto bTraceComplexOnMove = 0x2cc; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x2cc; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x2cc; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x2cc; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x2cd; // char : 1
		constexpr auto bRenderInMainPass = 0x2cd; // char : 1
		constexpr auto bRenderInCustomPrePass = 0x2cd; // char : 1
		constexpr auto bReflected = 0x2cd; // char : 1
		constexpr auto bReflectedOnLowQuality = 0x2cd; // char : 1
		constexpr auto bFFTWaterMask = 0x2cd; // char : 1
		constexpr auto bVolumeFogMask = 0x2cd; // char : 1
		constexpr auto bAffectsFlatWater = 0x2ce; // char : 1
		constexpr auto bGPUParticlesKillPlane = 0x2ce; // char : 1
		constexpr auto bDontCull = 0x2ce; // char : 1
		constexpr auto bDontSizeOnScreenCull = 0x2ce; // char : 1
		constexpr auto OverriddenShadowMinTexelSize = 0x2d0; // float
		constexpr auto bOverrideShadowMinSizeCulling = 0x2d4; // bool
		constexpr auto bOverrideShadowCascadesExclusion = 0x2d5; // bool
		constexpr auto ExcludedShadowCascades = 0x2d6; // EExcludeFromCascades
		constexpr auto bReceivesDecals = 0x2d8; // char : 1
		constexpr auto bOwnerNoSee = 0x2d8; // char : 1
		constexpr auto bOnlyOwnerSee = 0x2d8; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x2d8; // char : 1
		constexpr auto bIsACloud = 0x2d8; // char : 1
		constexpr auto bUseAsOccluder = 0x2d8; // char : 1
		constexpr auto bSelectable = 0x2d8; // char : 1
		constexpr auto bForceMipStreaming = 0x2d8; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x2d9; // char : 1
		constexpr auto CastShadow = 0x2d9; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2d9; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x2d9; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x2d9; // char : 1
		constexpr auto bCastDynamicShadow = 0x2d9; // char : 1
		constexpr auto bCastStaticShadow = 0x2d9; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x2d9; // char : 1
		constexpr auto bSelfShadowOnly = 0x2da; // char : 1
		constexpr auto bCastFarShadow = 0x2da; // char : 1
		constexpr auto bCastInsetShadow = 0x2da; // char : 1
		constexpr auto bCastCinematicShadow = 0x2da; // char : 1
		constexpr auto bCastHiddenShadow = 0x2da; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x2da; // char : 1
		constexpr auto bCastShadowOnLowQuality = 0x2da; // char : 1
		constexpr auto bLightAsIfStatic = 0x2da; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x2db; // char : 1
		constexpr auto IndirectLightingCacheQuality = 0x2dc; // EIndirectLightingCacheQuality
		constexpr auto bHasCachedStaticLighting = 0x2dd; // bool
		constexpr auto bStaticLightingBuildEnqueued = 0x2de; // bool
		constexpr auto bIgnoreRadialImpulse = 0x2e0; // char : 1
		constexpr auto bIgnoreRadialForce = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x2e0; // char : 1
		constexpr auto bUseEditorCompositing = 0x2e0; // char : 1
		constexpr auto bRenderCustomDepth = 0x2e0; // char : 1
		constexpr auto bAllowVelocityInMaterial = 0x2e0; // char : 1
		constexpr auto CustomDepthStencilValue = 0x2e4; // int32_t
		constexpr auto TranslucencySortPriority = 0x2e8; // int32_t
		constexpr auto VisibilityId = 0x2ec; // int32_t
		constexpr auto LpvBiasMultiplier = 0x2f4; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x2f8; // float
		constexpr auto LpvIntensityMultiplier = 0x2fc; // float
		constexpr auto CustomPrimitiveData = 0x300; // FCustomPrimitiveData
		constexpr auto BodyInstance = 0x310; // FBodyInstance
		constexpr auto bAffectRain = 0x490; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x490; // char : 1
		constexpr auto bSkipRenderingInOuterLPVCascades = 0x490; // char : 1
		constexpr auto bEnableMergeCollisionComponents = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerUnderwater = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerUnderwater = 0x491; // char : 1
		constexpr auto bCanRenderAboveAndBelowWaterAtSameTime = 0x491; // char : 1
		constexpr auto BoundsScale = 0x498; // float
		constexpr auto OcclusionBoundsScale = 0x49c; // float
		constexpr auto LastRenderTime = 0x4a0; // float
		constexpr auto bGPUVisibility = 0x4a4; // bool
		constexpr auto bHasCustomNavigableGeometry = 0x4a5; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x4a6; // ECanBeCharacterBase
		constexpr auto OnComponentHit = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnComponentBeginOverlap = 0x4f1; // FScriptMulticastDelegate
		constexpr auto OnComponentEndOverlap = 0x4f2; // FScriptMulticastDelegate
		constexpr auto OnComponentWake = 0x4f3; // FScriptMulticastDelegate
		constexpr auto OnComponentSleep = 0x4f4; // FScriptMulticastDelegate
		constexpr auto LODParentPrimitive = 0x528; // UPrimitiveComponent*
		constexpr auto PostPhysicsComponentTick = 0x530; // FPrimitiveComponentPostPhysicsTickFunction
		constexpr auto MergedCollisionComponentParent = 0x580; // UPrimitiveComponent*
	}

	namespace n_UUniformGridSlot { // : UPanelSlot
		constexpr auto HorizontalAlignment = 0x38; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x39; // EVerticalAlignment
		constexpr auto Row = 0x3c; // int32_t
		constexpr auto Column = 0x40; // int32_t
	}

	namespace n_UMaterialExpressionCollectionParameter { // : UMaterialExpression
		constexpr auto Collection = 0x70; // UMaterialParameterCollection*
		constexpr auto ParameterName = 0x78; // FName
		constexpr auto ParameterId = 0x80; // FGuid
	}

	namespace n_UUnderwaterEffectsDataAsset { // : UDataAsset
		constexpr auto StartUnderwaterSfx = 0x28; // UWwiseEvent*
		constexpr auto StopUnderwaterSfx = 0x30; // UWwiseEvent*
		constexpr auto UnderwaterVfx = 0x38; // UObject*
		constexpr auto UnderwaterVfxSocketName = 0x40; // FName
	}

	namespace n_UCapsuleComponent { // : UShapeComponent
		constexpr auto CapsuleHalfHeight = 0x5a8; // float
		constexpr auto CapsuleRadius = 0x5ac; // float
	}

	namespace n_UGetVoyageDifficultyFromRankStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UCheckBoxStyleAsset { // : UObject
		constexpr auto CheckBoxStyle = 0x28; // FCheckBoxStyle
	}

	namespace n_UBTAuxiliaryNode { // : UBTNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_UBTService_UpdateViewPitchForWieldedProjectileToHitTarget { // : UBTService_BlackboardBase
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UCreateActorInstanceOnExplodeComponent { // : UActorComponent
		constexpr auto ActorToInstance = 0xc8; // AActor*
	}

	namespace n_UAIShipTelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UOpenableItemComponent { // : UActorComponent
		constexpr auto OnOpen = 0xd0; // FScriptMulticastDelegate
		constexpr auto OnClose = 0xe0; // FScriptMulticastDelegate
		constexpr auto OpenState = 0xf0; // EOpenableItemState
		constexpr auto HasEverClosed = 0xf1; // bool
	}

	namespace n_UMaterialExpressionFloor { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
	}

	namespace n_UAthenaAIRangeBasedAmmoDataAsset { // : UAthenaAIAmmoDataAsset
		constexpr auto AmmoTypeRanges = 0xd0; // TArray<FWeightedAmmoTypeRange>
	}

	namespace n_UBaitRadialContentRule { // : URadialContentRule
		constexpr auto RadialIconScale = 0xd0; // float
		constexpr auto RadialIconOffset = 0xd4; // FVector2D
		constexpr auto RemappingAsset = 0xe0; // UInventoryItemDescToSlotRemappingPolicyAsset*
		constexpr auto MappedSlots = 0xe8; // TArray<AItemInfo*>
		constexpr auto BaitItemCategory = 0xf8; // UItemCategory*
	}

	namespace n_UMastHinge { // : UObject
		constexpr auto OnHingeTransformChanged = 0x28; // FScriptMulticastDelegate
	}

	namespace n_UWorldMarkerOnDigPositionComponent { // : UActorComponent
		constexpr auto MarkerVariant = 0xc8; // UWorldMarkerVariant*
	}

	namespace n_UInterpTrackVectorProp { // : UInterpTrackVectorBase
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_UTaleQuestSelectEntryFromArrayStepDesc { // : UTaleQuestStepDesc
		constexpr auto SelectionStrategy = 0x80; // UTaleQuestArrayEntrySelectionStrategy*
		constexpr auto InputArray = 0x88; // FQuestVariableArray
		constexpr auto OutputEntry = 0x98; // FQuestVariableAny
	}

	namespace n_ADockableKeyedInstrument { // : AControllableObject
		constexpr auto PipeVFXObject = 0x510; // UParticleSystem*
		constexpr auto CurrentKeyID = 0x558; // int32_t
		constexpr auto DisplayName = 0x560; // FText
		constexpr auto MoveKeyThreshold = 0x598; // float
		constexpr auto MovementCooldown = 0x59c; // float
		constexpr auto XAxisDeadzone = 0x5a0; // float
		constexpr auto StartingKeyID = 0x5a4; // int32_t
		constexpr auto BaseMeshComponent = 0x5a8; // UStaticMeshComponent*
		constexpr auto InteractableComponent = 0x5b0; // UInteractableComponent*
		constexpr auto PlayerPositionComponent = 0x5b8; // USceneComponent*
		constexpr auto SfxPool = 0x5c0; // UWwiseObjectPoolWrapper*
		constexpr auto VFXPositions = 0x5c8; // TArray<UParticleSystemComponent*>
		constexpr auto CurrentVFXSpawner = 0x5d8; // UParticleSystemComponent*
	}

	namespace n_UEntityEnumerationService { // : UObject
		constexpr auto World = 0x48; // UWorld*
	}

	namespace n_USafeZoneComponent { // : UCapsuleComponent
		constexpr auto OnSafeZoneIsEmptyDelegate = 0x5b0; // FScriptMulticastDelegate
		constexpr auto ExclusionRadius = 0x5c0; // float
		constexpr auto ExclusionHeight = 0x5c8; // float
		constexpr auto SafeZoneEmptyCollisionProfile = 0x5cc; // FName
		constexpr auto AutoActivateSafeZone = 0x5d4; // bool
		constexpr auto DeactivateSafeZoneAfterExclusionRadiusIsEmpty = 0x5d5; // bool
		constexpr auto UsePlayerTeleport = 0x5d6; // bool
		constexpr auto PlayerTeleportRadius = 0x5d8; // float
		constexpr auto UseRepelForce = 0x5e0; // bool
		constexpr auto RepelForceRadius = 0x5e4; // float
		constexpr auto RepelForceExtents = 0x5ec; // float
		constexpr auto RepelForceMin = 0x5f0; // float
		constexpr auto RepelForceMax = 0x5f4; // float
		constexpr auto ApplyRepelForceAtCentreOfMass = 0x5f8; // bool
		constexpr auto RepelForceGradientCurve = 0x600; // FRuntimeFloatCurve
		constexpr auto UseAngularImpulse = 0x680; // bool
		constexpr auto AngularImpulseRadius = 0x684; // float
		constexpr auto AngularImpulseForce = 0x68c; // float
		constexpr auto TargetDeflectionAngle = 0x690; // float
		constexpr auto IsSafeZoneEmpty = 0x694; // bool
		constexpr auto StopAISpawning = 0x695; // bool
		constexpr auto CurrentCollisionProfile = 0x698; // FName
		constexpr auto SafeZoneState = 0x6a0; // ESafeZoneState
	}

	namespace n_AAbstractNavData { // : ANavigationData
		constexpr auto RenderingComp = 0x3d0; // UPrimitiveComponent*
		constexpr auto NavDataConfig = 0x3d8; // FNavDataConfig
		constexpr auto bEnableDrawing = 0x430; // char : 1
		constexpr auto bRebuildAtRuntime = 0x430; // char : 1
		constexpr auto RuntimeGeneration = 0x434; // ERuntimeGenerationType
		constexpr auto bForceRebuildOnLoad = 0x438; // char : 1
		constexpr auto ObservedPathsTickInterval = 0x43c; // float
		constexpr auto SupportedAreas = 0x528; // TArray<FSupportedAreaData>
	}

	namespace n_UMeleeAttackProcessorComponentMock { // : UMeleeAttackProcessorComponent
		constexpr auto MaxPlayerHitResponsesBroadcastPerAttack = 0xd0; // int32_t
		constexpr auto MaxNonPlayerPawnHitResponsesBroadcastPerAttack = 0xd4; // int32_t
		constexpr auto MaxOtherHitResponsesBroadcastPerAttack = 0xd8; // int32_t
		constexpr auto RewindInstigatorEstimationMaxSearchTime = 0xdc; // float
		constexpr auto RewindInstigatorEstimationStepSize = 0xe0; // float
		constexpr auto PredictiveHitResponses = 0x114; // FMeleeAttackHitResponses
		constexpr auto ValidatedHitResponses = 0x115; // FMeleeAttackHitResponses
		constexpr auto AuthoritativeHitResponses = 0x116; // FMeleeAttackHitResponses
		constexpr auto ServerHitResponses = 0x117; // FMeleeAttackHitResponses
	}

	namespace n_APivotAnimatedMechanismAction { // : ASimpleAnimatedMechanismAction
		constexpr auto Pivot = 0x550; // USceneComponent*
		constexpr auto TransformPivotOnClient = 0x558; // bool
		constexpr auto UseVirtualPivotTransformOnServer = 0x559; // bool
		constexpr auto Animation = 0x560; // FMechanismFloatAnimationCurve
		constexpr auto AnimationEvents = 0x578; // FMechanismAnimationEventContainer
	}

	namespace n_ARowingSeat { // : ASeat
		constexpr auto OarParams = 0x680; // FOarParams
		constexpr auto StrokeSynchronisationWindow = 0x6b8; // float
		constexpr auto ForceFeedbackForLeftStrokeEnd = 0x6c0; // UForceFeedbackEffect*
		constexpr auto ForceFeedbackForRightStrokeEnd = 0x6c8; // UForceFeedbackEffect*
		constexpr auto PaddleSocketName = 0x6d0; // FName
		constexpr auto LeftOarMesh = 0x6d8; // UStaticMeshComponent*
		constexpr auto RightOarMesh = 0x6e0; // UStaticMeshComponent*
		constexpr auto OarInputStates = 0x6e8; // TArray<EOarInputState>
		constexpr auto LeftOar = 0x6f8; // FOar
		constexpr auto RightOar = 0x758; // FOar
	}

	namespace n_UDefaultItemCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UPawnAction_Repeat { // : UPawnAction
		constexpr auto ActionToRepeat = 0x90; // UPawnAction*
		constexpr auto RecentActionCopy = 0x98; // UPawnAction*
		constexpr auto ChildFailureHandlingMode = 0xa0; // EPawnActionFailHandling
	}

	namespace n_URepairTypeId { // : UObject
		constexpr auto DisplayName = 0x28; // FText
	}

	namespace n_UBoxCollisionExtentAdjustOverTimeComponent { // : UPrimitiveCollisionExtentAdjustOverTimeComponent
		constexpr auto ShouldAdjustBoxExtentX = 0x108; // bool
		constexpr auto PostAdjustmentBoxExtentX = 0x10c; // float
		constexpr auto ShouldAdjustBoxExtentY = 0x110; // bool
		constexpr auto PostAdjustmentBoxExtentY = 0x114; // float
		constexpr auto ShouldAdjustBoxExtentZ = 0x118; // bool
		constexpr auto PostAdjustmentBoxExtentZ = 0x11c; // float
		constexpr auto ServerSizeScale = 0x120; // FVector
		constexpr auto BoxCollisionToAdjust = 0x130; // UBoxComponent*
	}

	namespace n_UCustomWeatherService { // : UObject
		constexpr auto World = 0x30; // UWorld*
	}

	namespace n_UNavAreaMeta { // : UNavArea
		constexpr auto DefaultCost = 0x28; // float
		constexpr auto FixedAreaEnteringCost = 0x2c; // float
		constexpr auto DrawColor = 0x30; // FColor
		constexpr auto SupportedAgents = 0x34; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x38; // char : 1
		constexpr auto bSupportsAgent1 = 0x38; // char : 1
		constexpr auto bSupportsAgent2 = 0x38; // char : 1
		constexpr auto bSupportsAgent3 = 0x38; // char : 1
		constexpr auto bSupportsAgent4 = 0x38; // char : 1
		constexpr auto bSupportsAgent5 = 0x38; // char : 1
		constexpr auto bSupportsAgent6 = 0x38; // char : 1
		constexpr auto bSupportsAgent7 = 0x38; // char : 1
		constexpr auto bSupportsAgent8 = 0x39; // char : 1
		constexpr auto bSupportsAgent9 = 0x39; // char : 1
		constexpr auto bSupportsAgent10 = 0x39; // char : 1
		constexpr auto bSupportsAgent11 = 0x39; // char : 1
		constexpr auto bSupportsAgent12 = 0x39; // char : 1
		constexpr auto bSupportsAgent13 = 0x39; // char : 1
		constexpr auto bSupportsAgent14 = 0x39; // char : 1
		constexpr auto bSupportsAgent15 = 0x39; // char : 1
	}

	namespace n_ABuoyantActor { // : AActor
		constexpr auto Mesh = 0x490; // UStaticMeshComponent*
		constexpr auto BaseComponent = 0x498; // UShapeComponent*
		constexpr auto PhysicsErrorCorrection = 0x4a0; // FRigidBodyErrorCorrection
		constexpr auto BuoyancyComponent = 0x4c0; // UBuoyancyComponent*
		constexpr auto DitherComponent = 0x4c8; // UDitherComponent*
		constexpr auto MovementTimeStamp = 0x4d0; // FNetTimeStampCalculator
		constexpr auto ReplicatedPhysicsState = 0x540; // FReplicatedPhysicsState
		constexpr auto WaterInteractionComponent = 0x598; // UWaterInteractionComponent*
	}

	namespace n_USetHiddenOnKeyTakenStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // USetHiddenOnKeyTakenStepDesc*
	}

	namespace n_UAIPartIdListingAsset { // : UDataAsset
		constexpr auto AIPartIdsVariantInfo = 0x28; // TArray<FAIPartIdNumVariantInfo>
	}

	namespace n_UMovieSceneAkAudioEventSection { // : UMovieSceneSection
		constexpr auto Event = 0x98; // UWwiseEvent*
	}

	namespace n_UTritonAcousticMap { // : UObject
		constexpr auto TritonMapFilename = 0x28; // FString
	}

	namespace n_UWoodPlankItemCategory_C { // : UWoodPlankItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UObtainClueFromContainerOnWieldComponent { // : UObtainClueOnWieldComponent
		constexpr auto ClueToObtain = 0x140; // UClueDescriptor*
		constexpr auto ClueSiteType = 0x148; // UClueSiteType*
	}

	namespace n_UEmoteRadialContentRule { // : URadialContentRule
		constexpr auto EmoteSettings = 0xd0; // UEmoteSettings*
	}

	namespace n_UItemActionComponent { // : UActorComponent
		constexpr auto Wielder = 0xc8; // APawn*
		constexpr auto ItemOwner = 0xd0; // AWieldableItem*
		constexpr auto ActionType = 0xd8; // EItemActionType
		constexpr auto ShouldFireEventOnActionStart = 0xd9; // bool
		constexpr auto ShouldFireEventOnActionStop = 0xda; // bool
		constexpr auto ShouldApplyAimAndMovementSlowdown = 0xdb; // bool
		constexpr auto ActionState = 0xdc; // EItemActionState
		constexpr auto ActionCooldown = 0xe0; // float
		constexpr auto ActionStartSfxParams = 0x130; // FWwiseEmitterCreationParams
		constexpr auto ActionStopSfxParams = 0x158; // FWwiseEmitterCreationParams
		constexpr auto StartInputId = 0x208; // UNotificationInputId*
		constexpr auto StopInputId = 0x210; // UNotificationInputId*
		constexpr auto ActionEffects = 0x230; // TArray<UItemActionEffect*>
		constexpr auto ItemActionAudio = 0x290; // UItemActionComponentAudioParams*
		constexpr auto ActionForceFeedback = 0x298; // UForceFeedbackEffect*
		constexpr auto ActionForceFeedbackTag = 0x2a0; // FName
	}

	namespace n_USpawnActorAtPointStep { // : USpawnActorBaseStep
		constexpr auto Desc = 0x98; // USpawnActorAtPointStepDesc*
	}

	namespace n_UFishItemConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UCargoRunCrateCustomData { // : UDataAsset
		constexpr auto CrateNames = 0x28; // TArray<FText>
		constexpr auto DefaultRewards = 0x38; // FCargoRunReward
		constexpr auto CompanyRewards = 0x58; // TArray<FCompanySpecificCargoRunReward>
		constexpr auto StatsSubString = 0x68; // FName
		constexpr auto DefaultStatsToFireUponPerfectOnTimeHandIn = 0x70; // TArray<FPlayerStat>
		constexpr auto CompanyOverrideStatsToFireUponPerfectOnTimeHandIn = 0x80; // TArray<FCompanySpecificCargoRunStats>
	}

	namespace n_UStatusResponseSetBlackboardClassKey { // : UStatusResponse
		constexpr auto BlackboardClassKeyName = 0x30; // FName
		constexpr auto ValueWhenActive = 0x38; // UObject*
		constexpr auto SetValueOnDeactivate = 0x40; // bool
		constexpr auto ValueWhenDeactivated = 0x48; // UObject*
	}

	namespace n_UNavLinkTrivial { // : UNavLinkDefinition
		constexpr auto Links = 0x28; // TArray<FNavigationLink>
		constexpr auto SegmentLinks = 0x38; // TArray<FNavigationSegmentLink>
	}

	namespace n_UInterpTrackInstFloatMaterialParam { // : UInterpTrackInst
		constexpr auto MaterialInstances = 0x28; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ResetFloats = 0x38; // TArray<float>
		constexpr auto PrimitiveMaterialRefs = 0x48; // TArray<FPrimitiveMaterialRef>
		constexpr auto InstancedTrack = 0x58; // UInterpTrackFloatMaterialParam*
	}

	namespace n_UWaywardTokensReward { // : UReward
		constexpr auto MinWaywardTokens = 0x28; // uint32_t
		constexpr auto MaxWaywardTokens = 0x2c; // uint32_t
	}

	namespace n_UVectorFieldComponent { // : UPrimitiveComponent
		constexpr auto VectorField = 0x588; // UVectorField*
		constexpr auto Intensity = 0x590; // float
		constexpr auto Tightness = 0x594; // float
		constexpr auto bPreviewVectorField = 0x598; // char : 1
	}

	namespace n_UResolveActorStringReferenceStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UResolveActorStringReferenceStepDesc*
	}

	namespace n_UScrollBox { // : UPanelWidget
		constexpr auto WidgetStyle = 0x150; // FScrollBoxStyle
		constexpr auto WidgetBarStyle = 0x398; // FScrollBarStyle
		constexpr auto Style = 0x8b0; // USlateWidgetStyleAsset*
		constexpr auto BarStyle = 0x8b8; // USlateWidgetStyleAsset*
		constexpr auto Orientation = 0x8c0; // EOrientation
		constexpr auto ScrollBarVisibility = 0x8c1; // ESlateVisibility
		constexpr auto ConsumeMouseWheel = 0x8c2; // EConsumeMouseWheel
		constexpr auto ScrollbarThickness = 0x8c4; // FVector2D
		constexpr auto AlwaysShowScrollbar = 0x8cc; // bool
	}

	namespace n_ATutorialFootsteps { // : ATutorialEventControlledObject
		constexpr auto ParamName = 0x558; // FName
		constexpr auto LeftFootprint = 0x560; // UMaterialInstance*
		constexpr auto RightFootprint = 0x568; // UMaterialInstance*
		constexpr auto RaycastLocationsToGround = 0x570; // bool
		constexpr auto FootstepDataID = 0x578; // UFootstepIDAsset*
		constexpr auto StartActivated = 0x580; // bool
		constexpr auto NumberStepPairsVisible = 0x584; // int32_t
		constexpr auto UpdateInterval = 0x588; // float
		constexpr auto AnimationInterval = 0x58c; // float
		constexpr auto AnimationSteps = 0x590; // int32_t
		constexpr auto FadeUpTime = 0x594; // float
		constexpr auto FadeDownTime = 0x598; // float
		constexpr auto AutoAnimateDistanceSquared = 0x59c; // float
		constexpr auto SplineComponent = 0x5a0; // USplineComponent*
		constexpr auto DecalComponentLeft = 0x5a8; // UDecalComponent*
		constexpr auto DecalComponentRight = 0x5b0; // UDecalComponent*
		constexpr auto LeftDecalEntries = 0x5b8; // TArray<FDecalEntry>
		constexpr auto RightDecalEntries = 0x5c8; // TArray<FDecalEntry>
		constexpr auto Locations = 0x5d8; // TArray<FFootstepLocation>
	}

	namespace n_UFireworksDebugSpawnItemsDataAsset { // : UDataAsset
		constexpr auto ClassicFireworks = 0x28; // FClassicFireworkDebugList
		constexpr auto ThemedFireworks = 0x98; // FFireworkDebugListByFireworkType
		constexpr auto Flares = 0xb8; // TArray<UItemDescSpawnData*>
		constexpr auto AllFireworks = 0xc8; // TArray<UItemDescSpawnData*>
	}

	namespace n_UWoodPlankItemCategory { // : UConsumableItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UEditableGameplayTagQueryExpression_NoTagsMatch { // : UEditableGameplayTagQueryExpression
		constexpr auto Tags = 0x28; // FGameplayTagContainer
	}

	namespace n_USpawnShipwreckTaleStepDesc { // : UTaleQuestStepDesc
		constexpr auto SpawnedShipwreck = 0x80; // FQuestVariableShipwreck
		constexpr auto CustomWreckType = 0x90; // FQuestVariableClass
		constexpr auto CustomWreckLocation = 0xa0; // FQuestVariableVector
		constexpr auto CustomWreckRotation = 0xb0; // FQuestVariableRotator
		constexpr auto CustomWreckVesselName = 0xc0; // FQuestVariableText
	}

	namespace n_UCarouselPirateGeneratorParamsAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FCarouselPirateGeneratorParams
	}

	namespace n_UDeliverableRequirementsDataAsset { // : UDataAsset
		constexpr auto Requirements = 0x28; // TArray<UDeliverableRequirementBase*>
	}

	namespace n_AArenaVendorShip { // : AActor
		constexpr auto ArenaVendorShipRootComponent = 0x3d0; // USceneComponent*
		constexpr auto ContestMerchantSpawnerComponent = 0x3d8; // UContestMerchantSpawnerComponent*
		constexpr auto VendorShipWorldMarkerComponent = 0x3e0; // UGenericWorldMapMarker*
		constexpr auto VendorDeadZoneComponent = 0x3e8; // USphereComponent*
		constexpr auto VendorShipDeadZoneRadius = 0x3f0; // float
	}

	namespace n_UInterpGroupCamera { // : UInterpGroup
		constexpr auto CameraAnimInst = 0x50; // UCameraAnim*
		constexpr auto CompressTolerance = 0x58; // float
	}

	namespace n_UAggressiveGhostShipEncounterFormationsDataAsset { // : UDataAsset
		constexpr auto FormationDescGroups = 0x28; // TArray<FAggressiveGhostShipEncounterFormationDescGroup>
	}

	namespace n_UMemoryUsageVisualiserSettings { // : UObject
		constexpr auto VisualiserCategories = 0x28; // TArray<FMemoryVisualiserCategory>
	}

	namespace n_UBTDecorator_CanRepair { // : UBTDecorator_BaseConditional
		constexpr auto RepairActor = 0x68; // FBlackboardKeySelector
	}

	namespace n_URemoveGameEventExclusionZoneStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // URemoveGameEventExclusionZoneStepDesc*
	}

	namespace n_UDoesNameContainsStatCondition { // : UTargetedStatCondition
		constexpr auto TargetNameSubString = 0x30; // FName
	}

	namespace n_UAICharacterAudioComponent { // : UWwiseEmitterComponent
		constexpr auto Emitter = 0x2b8; // FWwiseEmitter
		constexpr auto WwiseObjectPoolWrapper = 0x2d8; // UWwiseObjectPoolWrapper*
	}

	namespace n_UOverlapTriggerComponent { // : UCapsuleComponent
		constexpr auto CapsuleHalfHeight = 0x5a8; // float
		constexpr auto CapsuleRadius = 0x5ac; // float
	}

	namespace n_UUITelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UAnimComposite { // : UAnimCompositeBase
		constexpr auto AnimationTrack = 0x78; // FAnimTrack
	}

	namespace n_UBlueprintSpawnAIStepBase { // : UBlueprintStepBase
		constexpr auto BeginMode = 0x28; // ETaleQuestStepBeginMode
		constexpr auto Desc = 0x30; // UTaleQuestBlueprintStepDesc*
	}

	namespace n_USirenPartsDesc { // : UMeshMemoryConstraintsAIPartsDesc
		constexpr auto AnimationID = 0x80; // UAnimationDataStoreId*
	}

	namespace n_UWheelMechanismTriggerComponent { // : UIntentBasedMechanismTriggerComponent
		constexpr auto ParentWheel = 0x168; // AWheel*
	}

	namespace n_UWetnessComponent { // : UActorComponent
		constexpr auto MaxWaterLevel = 0xc8; // FVector
		constexpr auto MinWaterLevel = 0xd4; // FVector
		constexpr auto DryingTime = 0xe0; // float
		constexpr auto LastWaterLevel = 0xe4; // float
		constexpr auto LastWetTime = 0xe8; // float
		constexpr auto WaterLevel = 0xec; // float
		constexpr auto Rep_WetData = 0xf0; // FVector
		constexpr auto DynamicMaterials = 0x100; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UEntitlementReward { // : UReward
		constexpr auto EntitlementDesc = 0x28; // UEntitlementDesc*
	}

	namespace n_UTaleQuestSpawnAIDioramaStep { // : UTaleQuestSpawnAIStep
		constexpr auto DioramaController = 0xf0; // UAIDioramaController*
		constexpr auto WaveSpawnLocationActor = 0xf8; // AActor*
	}

	namespace n_UPerformActionStatCondition { // : UStatCondition
		constexpr auto RequiredTrackId = 0x28; // EActionStateMachineTrackId
		constexpr auto RequiredAction = 0x30; // UActionStateId*
	}

	namespace n_ASwitchMechanismTriggerProxy { // : AMechanismElementProxy
		constexpr auto SyncToConnectedActionStateOnChange = 0x3f0; // bool
		constexpr auto DisableWhenActivated = 0x3f1; // bool
		constexpr auto AutoDeactivateAfterActivation = 0x3f2; // bool
		constexpr auto TimeAfterActivationBeforeAutoDeactivating = 0x3f4; // float
		constexpr auto SelectRandomStartPositionOnSpawn = 0x3f8; // bool
		constexpr auto RandomStartPositionSelectionMode = 0x3f9; // ESwitchMechanismTriggerRandomSelectionMode
		constexpr auto FixedStartPositionIndex = 0x3fc; // int32_t
		constexpr auto PositionTransitionCurve = 0x400; // UCurveFloat*
		constexpr auto Positions = 0x408; // TArray<FSwitchMechanismTriggerPosition>
		constexpr auto MaterialGroup = 0x418; // UMechanismMaterialGroup*
	}

	namespace n_UEventCatchStepDesc { // : UTaleQuestStepDesc
		constexpr auto AllowOutOfOrder = 0x80; // bool
		constexpr auto EventName = 0x84; // FName
	}

	namespace n_UControllableObjectNonVerbalContentRule { // : UNonVerbalRadialContentRule
		constexpr auto CurrentPhrases = 0xa8; // UPhrasesRadialDataAsset*
		constexpr auto ControlledObject = 0xc0; // UObject*
	}

	namespace n_AAggressiveGhostShipMine { // : ABuoyantActor
		constexpr auto PhysicsRootComponent = 0x608; // UPrimitiveComponent*
		constexpr auto FuseComponent = 0x610; // UFuseComponent*
		constexpr auto ExplosiveComponent = 0x618; // UExplosiveComponent*
		constexpr auto HealthComponent = 0x620; // UHealthComponent*
	}

	namespace n_ULightPropagationVolumeBlendable { // : UObject
		constexpr auto Settings = 0x30; // FLightPropagationVolumeSettings
		constexpr auto BlendWeight = 0xa0; // float
	}

	namespace n_UInteractiveFoliageComponent { // : UStaticMeshComponent
		constexpr auto ForcedLodModel = 0x598; // int32_t
		constexpr auto bOverrideMinLOD = 0x59c; // bool
		constexpr auto bOverrideNavigationToDefaultObstacle = 0x59d; // bool
		constexpr auto MinLOD = 0x5a0; // int32_t
		constexpr auto StaticMesh = 0x5a8; // UStaticMesh*
		constexpr auto bOverrideWireframeColor = 0x5b0; // bool
		constexpr auto WireframeColorOverride = 0x5b4; // FColor
		constexpr auto bIgnoreInstanceForTextureStreaming = 0x5b8; // char : 1
		constexpr auto bOverrideLightMapRes = 0x5b8; // char : 1
		constexpr auto OverriddenLightMapRes = 0x5bc; // int32_t
		constexpr auto StreamingDistanceMultiplier = 0x5c0; // float
		constexpr auto IrrelevantLights = 0x5c8; // TArray<FGuid>
		constexpr auto LODData = 0x5d8; // TArray<FStaticMeshComponentLODInfo>
		constexpr auto CustomDepthMaterial = 0x5e8; // UMaterialInterface*
	}

	namespace n_ASpireService { // : AActor
		constexpr auto Params = 0x3d8; // USpireServiceParams*
		constexpr auto ServerOnlySpireInfo = 0x3e0; // TArray<FServerSpireInfo>
		constexpr auto SpireLevels = 0x3f0; // TArray<FSpireInfo>
	}

	namespace n_AAthenaPlayerCharacterWithTestInputHandler { // : AAthenaPlayerCharacter
		constexpr auto TestInputBinder = 0x1ac0; // UAthenaPlayerCharacterTestInputBinder*
	}

	namespace n_UStatusResponseScreenSpaceVFX { // : UStatusResponse
		constexpr auto MaterialParamName = 0x30; // FName
		constexpr auto TintParamName = 0x38; // FName
		constexpr auto TintColor = 0x40; // FLinearColor
		constexpr auto EffectStrength = 0x50; // float
		constexpr auto FadeInAcceleration = 0x54; // float
		constexpr auto FadeOutAcceleration = 0x58; // float
	}

	namespace n_UQuestBookPagesInContainerComponent { // : ULayerInContainerComponent
		constexpr auto ActionTooltipDisplaySentence = 0x638; // FText
	}

	namespace n_UWeightedAnimSequenceLoadOnDemand { // : UObject
		constexpr auto FallBackAnimation = 0x28; // UAnimSequence*
		constexpr auto WeightedAnimationList = 0x30; // TArray<FWeightedAnimationData>
	}

	namespace n_UStatusResponseActivateElectricShield { // : UStatusResponse
		constexpr auto Duration = 0x30; // float
	}

	namespace n_UBTTask_SetBlackboardFloatValueFromWeightedArray { // : UBTTask_BlackboardBase
		constexpr auto WeightedArrayFromParams = 0x88; // FAIDataProviderStructValue
	}

	namespace n_UAISpawnOverrideCondition { // : UObject
		constexpr auto InvertResult = 0x28; // bool
	}

	namespace n_UMaterialExpressionStaticSwitchParameter { // : UMaterialExpressionStaticBoolParameter
		constexpr auto A = 0x98; // FExpressionInput
		constexpr auto B = 0xd0; // FExpressionInput
	}

	namespace n_UAIPerceptionComponent { // : UActorComponent
		constexpr auto HearingRange = 0xc8; // float
		constexpr auto LoSHearingRange = 0xcc; // float
		constexpr auto SightRadius = 0xd0; // float
		constexpr auto LoseSightRadius = 0xd4; // float
		constexpr auto PeripheralVisionAngle = 0xd8; // float
		constexpr auto SensesConfig = 0xe0; // TArray<UAISenseConfig*>
		constexpr auto DominantSense = 0xf0; // UAISense*
		constexpr auto AIOwner = 0x108; // AAIController*
		constexpr auto OnPerceptionUpdated = 0x190; // FScriptMulticastDelegate
		constexpr auto OnTargetPerceptionUpdated = 0x1a0; // FScriptMulticastDelegate
	}

	namespace n_UFixedArrayEntrySelectionStrategy { // : UTaleQuestArrayEntrySelectionStrategy
		constexpr auto IndexToSelect = 0x28; // int32_t
	}

	namespace n_UIslandEventTrackerComponent { // : UActorComponent
		constexpr auto EventData = 0xc8; // TArray<FIslandEventData>
	}

	namespace n_UCutsceneResponsesTaleService { // : UTaleQuestService
		constexpr auto TrackedResponseCoordinators = 0x60; // TArray<UCutsceneResponseCoordinator*>
		constexpr auto TrackedResponseComponents = 0x70; // TArray<UCutsceneResponseComponent*>
		constexpr auto ResponseRelevantActors = 0x80; // TArray<AActor*>
	}

	namespace n_UMaterialManipulationComponent { // : UActorComponent
		constexpr auto ScalarParameterValues = 0xc8; // TArray<FScalarParameterValue>
		constexpr auto TextureParameterValues = 0xd8; // TArray<FTextureParameterValue>
		constexpr auto VectorParameterValues = 0xe8; // TArray<FVectorParameterValue>
		constexpr auto DynamicMaterials = 0xf8; // TArray<FDynamicMaterialListContainer>
	}

	namespace n_UBTTask_SwimTurnOnTheSpot { // : UBTTask_BlackboardBase
		constexpr auto MaxTurnSpringAccel = 0x88; // float
		constexpr auto TimeUntilMaxTurnSpringAccel = 0x8c; // float
		constexpr auto AngleDeltaToAcceptFinalRotation = 0x90; // float
		constexpr auto Timeout = 0x94; // float
	}

	namespace n_UCrewNotificationSettings { // : UDataAsset
		constexpr auto PlayerJoiningPopup = 0x28; // UPopUpMessageDesc*
		constexpr auto PlayerLeavingPopup = 0x30; // UPopUpMessageDesc*
		constexpr auto HoldDurationOverride = 0x38; // float
		constexpr auto TinSessionEndedPopup = 0x40; // UPopUpMessageDesc*
	}

	namespace n_UMechanismAnimationEvent_Audio { // : UMechanismAnimationEvent
		constexpr auto Event = 0x40; // UWwiseEvent*
		constexpr auto AudioEmitterInterface = 0x48; // TScriptInterface<Class>
	}

	namespace n_UWardrobeExcludeDataAsset { // : UDataAsset
		constexpr auto ExcludeItems = 0x28; // TArray<FName>
	}

	namespace n_UDonateMapStatTriggerType { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UBTDecorator_TestAIInteractableType { // : UBTDecorator_BlackboardBase
		constexpr auto Type = 0x90; // UAIInteractableType*
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigrationActorWithRootComponentSimulatePhysicsEnabledByDefault { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_ASwingMechanismActionProxy { // : APivotAnimatedMechanismActionProxy
		constexpr auto MaxAngle = 0x418; // float
		constexpr auto MinAngle = 0x41c; // float
		constexpr auto Damage = 0x420; // float
		constexpr auto DamageReason = 0x424; // EHealthChangedReason
		constexpr auto AllowedInteractableTypes = 0x428; // TArray<FAllowedInteractableTypes>
	}

	namespace n_UTaleQuestStructGenServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto Params = 0x28; // FTQStructGenParams
	}

	namespace n_AAudioVolume { // : AVolume
		constexpr auto Priority = 0x408; // float
		constexpr auto bEnabled = 0x40c; // char : 1
		constexpr auto Settings = 0x410; // FReverbSettings
		constexpr auto AmbientZoneSettings = 0x428; // FInteriorSettings
		constexpr auto NextLowerPriorityVolume = 0x450; // AAudioVolume*
	}

	namespace n_UTaleQuestAddCircleMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UFoliageType { // : UObject
		constexpr auto UpdateGuid = 0x28; // FGuid
		constexpr auto Density = 0x38; // float
		constexpr auto DensityAdjustmentFactor = 0x3c; // float
		constexpr auto Radius = 0x40; // float
		constexpr auto Scaling = 0x44; // EFoliageScaling
		constexpr auto ScaleX = 0x48; // FFloatInterval
		constexpr auto ScaleY = 0x50; // FFloatInterval
		constexpr auto ScaleZ = 0x58; // FFloatInterval
		constexpr auto VertexColorMask = 0x60; // FoliageVertexColorMask
		constexpr auto VertexColorMaskThreshold = 0x64; // float
		constexpr auto VertexColorMaskInvert = 0x68; // char : 1
		constexpr auto ZOffset = 0x6c; // FFloatInterval
		constexpr auto AlignToNormal = 0x74; // char : 1
		constexpr auto AlignMaxAngle = 0x78; // float
		constexpr auto RandomYaw = 0x7c; // char : 1
		constexpr auto RandomPitchAngle = 0x80; // float
		constexpr auto GroundSlopeAngle = 0x84; // FFloatInterval
		constexpr auto Height = 0x8c; // FFloatInterval
		constexpr auto LandscapeLayers = 0x98; // TArray<FName>
		constexpr auto LandscapeLayer = 0xa8; // FName
		constexpr auto CollisionWithWorld = 0xb0; // char : 1
		constexpr auto CollisionScale = 0xb4; // FVector
		constexpr auto MinimumLayerWeight = 0xc0; // float
		constexpr auto MeshBounds = 0xc4; // FBoxSphereBounds
		constexpr auto LowBoundOriginRadius = 0xe0; // FVector
		constexpr auto Mobility = 0xec; // EComponentMobility
		constexpr auto CullDistance = 0xf0; // FInt32Interval
		constexpr auto bEnableStaticLighting = 0xf8; // char : 1
		constexpr auto CastShadow = 0xf8; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0xf8; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0xf8; // char : 1
		constexpr auto bCastDynamicShadow = 0xf8; // char : 1
		constexpr auto bCastStaticShadow = 0xf8; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0xf8; // char : 1
		constexpr auto bReceivesDecals = 0xf8; // char : 1
		constexpr auto bOverrideLightMapRes = 0xf9; // char : 1
		constexpr auto OverriddenLightMapRes = 0xfc; // int32_t
		constexpr auto bUseAsOccluder = 0x100; // char : 1
		constexpr auto BodyInstance = 0x108; // FBodyInstance
		constexpr auto CustomNavigableGeometry = 0x288; // EHasCustomNavigableGeometry
		constexpr auto HiddenEditorViews = 0x290; // uint64_t
		constexpr auto IsSelected = 0x298; // char : 1
		constexpr auto CollisionRadius = 0x29c; // float
		constexpr auto ShadeRadius = 0x2a0; // float
		constexpr auto NumSteps = 0x2a4; // int32_t
		constexpr auto InitialSeedDensity = 0x2a8; // float
		constexpr auto AverageSpreadDistance = 0x2ac; // float
		constexpr auto SpreadVariance = 0x2b0; // float
		constexpr auto SeedsPerStep = 0x2b4; // int32_t
		constexpr auto DistributionSeed = 0x2b8; // int32_t
		constexpr auto MaxInitialSeedOffset = 0x2bc; // float
		constexpr auto bCanGrowInShade = 0x2c0; // bool
		constexpr auto bSpawnsInShade = 0x2c1; // bool
		constexpr auto MaxInitialAge = 0x2c4; // float
		constexpr auto MaxAge = 0x2c8; // float
		constexpr auto OverlapPriority = 0x2cc; // float
		constexpr auto ProceduralScale = 0x2d0; // FFloatInterval
		constexpr auto ScaleCurve = 0x2d8; // FRuntimeFloatCurve
		constexpr auto ChangeCount = 0x358; // int32_t
		constexpr auto ReapplyDensity = 0x35c; // char : 1
		constexpr auto ReapplyRadius = 0x35c; // char : 1
		constexpr auto ReapplyAlignToNormal = 0x35c; // char : 1
		constexpr auto ReapplyRandomYaw = 0x35c; // char : 1
		constexpr auto ReapplyScaling = 0x35c; // char : 1
		constexpr auto ReapplyScaleX = 0x35c; // char : 1
		constexpr auto ReapplyScaleY = 0x35c; // char : 1
		constexpr auto ReapplyScaleZ = 0x35c; // char : 1
		constexpr auto ReapplyRandomPitchAngle = 0x35d; // char : 1
		constexpr auto ReapplyGroundSlope = 0x35d; // char : 1
		constexpr auto ReapplyHeight = 0x35d; // char : 1
		constexpr auto ReapplyLandscapeLayers = 0x35d; // char : 1
		constexpr auto ReapplyZOffset = 0x35d; // char : 1
		constexpr auto ReapplyCollisionWithWorld = 0x35d; // char : 1
		constexpr auto ReapplyVertexColorMask = 0x35d; // char : 1
	}

	namespace n_URegionIslandFilteredSelectionStrategy { // : URegionIslandSelectionStrategyBase
		constexpr auto IslandTypes = 0x28; // TArray<EIslandType>
		constexpr auto UseMaxDistance = 0x38; // bool
		constexpr auto MaxDistanceFromStartingIsland = 0x3c; // float
	}

	namespace n_UTaleQuestPermanentPromptStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UCoherentUIGTSettings { // : UObject
		constexpr auto EnableLiveReload = 0x28; // bool
		constexpr auto InspectorPort = 0x2c; // int32_t
		constexpr auto WebdriverPort = 0x30; // int32_t
		constexpr auto EnableWebSecurity = 0x34; // bool
		constexpr auto EnableLocalization = 0x35; // bool
		constexpr auto RunAsynchronous = 0x36; // bool
		constexpr auto bRecursivelyBindUStructs = 0x37; // bool
		constexpr auto LoadSystemFonts = 0x38; // bool
		constexpr auto AllowPerformanceWarningsInEditor = 0x39; // bool
		constexpr auto ShowWarningsOnScreen = 0x3a; // bool
		constexpr auto LogSeverity = 0x3b; // ECoherentUIGTSettingsSeverity
		constexpr auto bPaintToBackBuffer = 0x3c; // bool
		constexpr auto bRespectTitleSafeZone = 0x3d; // bool
		constexpr auto bRespectLetterboxing = 0x3e; // bool
		constexpr auto HUDMaterialName = 0x40; // FString
		constexpr auto CoUIResourcesRoot = 0x50; // FString
		constexpr auto TickWhileGameIsPaused = 0x60; // bool
		constexpr auto MSAA = 0x61; // ECoherentUIGTMSAA
	}

	namespace n_AContestZoneService { // : AActor
		constexpr auto ContestZoneNames = 0x408; // TArray<FName>
		constexpr auto HasLoadedContestZones = 0x428; // bool
	}

	namespace n_UMysteriousNoteCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UDebugMenuComponentMock { // : UDebugMenuComponent
		constexpr auto DebugMenuInstance = 0xf0; // ADebugMenu*
	}

	namespace n_UPlayerSeasonProgressionComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UWorldLocationVisitorComponent { // : UActorComponent
		constexpr auto RevisitCooldown = 0xd0; // float
	}

	namespace n_UAutomationTestUserSettings { // : UObject
		constexpr auto FilterTests = 0x28; // bool
		constexpr auto IncludedTestsPrefix = 0x30; // TArray<FString>
		constexpr auto ExcludedTestsPrefix = 0x40; // TArray<FString>
		constexpr auto IncludeEpicTests = 0x50; // bool
	}

	namespace n_AShipwreckSiteGeneratorSimulator { // : AActor
		constexpr auto SiteGenerator = 0x3d0; // UShipwreckSiteGeneratorRandomEditorComponent*
	}

	namespace n_UActionRulesComponent { // : UActorComponent
		constexpr auto InteractionTimeThreshold = 0xd0; // double
	}

	namespace n_UFishingFreeLookConstrainsDataAsset { // : UDataAsset
		constexpr auto YawDegrees = 0x28; // float
		constexpr auto PitchMinDegrees = 0x2c; // float
		constexpr auto PitchMaxDegrees = 0x30; // float
		constexpr auto LookAroundRightStickInputToAngleModifier = 0x34; // float
		constexpr auto LookAroundMouseInputToAngleModifier = 0x38; // float
		constexpr auto LookAroundMouseInputAsMovementInputModifier = 0x3c; // float
	}

	namespace n_USetMechanismActivationModeStepDesc { // : UTaleQuestStepDesc
		constexpr auto Action = 0x80; // FQuestVariableActor
		constexpr auto ActivationMode = 0x90; // EMechanismActionActivationMode
	}

	namespace n_AGameplayAbilityTargetActor_Trace { // : AGameplayAbilityTargetActor
		constexpr auto MaxRange = 0x4e8; // float
		constexpr auto TraceProfile = 0x4ec; // FCollisionProfileName
		constexpr auto bTraceAffectsAimPitch = 0x4f4; // bool
	}

	namespace n_ULandscapeMeshProxyComponent { // : UStaticMeshComponent
		constexpr auto LandscapeGuid = 0x5f0; // FGuid
		constexpr auto ProxyComponentBases = 0x600; // TArray<FIntPoint>
		constexpr auto ProxyLOD = 0x610; // uint8_t
	}

	namespace n_URevealableComponent { // : UActorComponent
		constexpr auto ActorHiddenDistance = 0xd0; // float
		constexpr auto MaterialVisibleDistance = 0xd4; // float
		constexpr auto CloseRevealDistance = 0xd8; // float
		constexpr auto OnCloseRevealDelegate = 0xe0; // FScriptMulticastDelegate
		constexpr auto OnFarRevealDelegate = 0xf0; // FScriptMulticastDelegate
		constexpr auto OnHideDelegate = 0x100; // FScriptMulticastDelegate
		constexpr auto TargetGameStateObject = 0x110; // UObject*
		constexpr auto DynamicMaterials = 0x118; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UStoolItemComponent { // : USeatComponent
		constexpr auto InteractionTextOutsideMaxAngle = 0x338; // FText
		constexpr auto MaxSittingAngle = 0x370; // float
	}

	namespace n_ASkeletalMeshActor { // : AActor
		constexpr auto bShouldDoAnimNotifies = 0x3d8; // char : 1
		constexpr auto bWakeOnLevelStart = 0x3d8; // char : 1
		constexpr auto SkeletalMeshComponent = 0x3e0; // USkeletalMeshComponent*
		constexpr auto ReplicatedMesh = 0x3e8; // USkeletalMesh*
		constexpr auto ReplicatedPhysAsset = 0x3f0; // UPhysicsAsset*
		constexpr auto ReplicatedMaterial0 = 0x3f8; // UMaterialInterface*
		constexpr auto ReplicatedMaterial1 = 0x400; // UMaterialInterface*
	}

	namespace n_UBTTask_SpawnItemForCategory { // : UBTTask_SpawnAndWieldItem
		constexpr auto EnableOverrideItemCategory = 0x88; // bool
		constexpr auto OverrideItemCategory = 0x90; // UItemCategory*
		constexpr auto BlackboardKey = 0x98; // FBlackboardKeySelector
	}

	namespace n_UPlatformEventsComponent { // : UActorComponent
		constexpr auto PlatformChangedToLaptopModeDelegate = 0xc8; // FScriptMulticastDelegate
		constexpr auto PlatformChangedToTabletModeDelegate = 0xd8; // FScriptMulticastDelegate
	}

	namespace n_UTestWindZoneComponent { // : UWindZoneComponent
		constexpr auto TurbulenceParams = 0x2b8; // FWindTurbulenceParameters
		constexpr auto WindZoneParams = 0x328; // FWindZoneParams
	}

	namespace n_UNPCDialogHeaderStorageContainer { // : UNPCDialogHeader
		constexpr auto Text = 0x28; // FText
	}

	namespace n_UNPCDialogOptionRefillTankard { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto LinkedDialog = 0xb8; // int32_t
	}

	namespace n_UPuzzleStatueVFXComponent { // : UActorComponent
		constexpr auto LockPositionParticleSystem = 0x118; // UParticleSystemComponent*
		constexpr auto OneShotLockPositionParticleSystem = 0x120; // UParticleSystemComponent*
		constexpr auto BroadcasterShockwaveParticleSystem = 0x128; // UParticleSystemComponent*
		constexpr auto BroadcasterHornDustParticleSystem = 0x130; // UParticleSystemComponent*
		constexpr auto HornVFXTemplate = 0x138; // UObject*
		constexpr auto BroadcasterArmStaticMesh = 0x140; // UStaticMeshComponent*
		constexpr auto PulseGlowCurve = 0x148; // UCurveFloat*
		constexpr auto StatueInactiveIntensityThreshold = 0x150; // float
		constexpr auto StatueActivatedIntensityThreshold = 0x154; // float
		constexpr auto ReactionSequenceIntensityThreshold = 0x158; // float
		constexpr auto SingingIntensityThreshold = 0x15c; // float
		constexpr auto IntensityInterpolationSpeed = 0x160; // float
		constexpr auto ScalarParameterNamesToOverride = 0x168; // TArray<FName>
	}

	namespace n_ALimpingTestActor { // : AActor
		constexpr auto Limping = 0x3d0; // ULimpingComponent*
	}

	namespace n_UMovieSceneVectorSection { // : UMovieSceneSection
		constexpr auto Curves = 0xa0; // FRichCurve [0x4]
		constexpr auto ChannelsUsed = 0x280; // int32_t
	}

	namespace n_UMaterialFunction { // : UObject
		constexpr auto StateId = 0x28; // FGuid
		constexpr auto Description = 0x38; // FString
		constexpr auto bExposeToLibrary = 0x48; // char : 1
		constexpr auto LibraryCategoriesText = 0x50; // TArray<FText>
		constexpr auto FunctionExpressions = 0x60; // TArray<UMaterialExpression*>
		constexpr auto bReentrantFlag = 0x70; // char : 1
	}

	namespace n_ANavModifierVolume { // : AVolume
		constexpr auto AreaClass = 0x410; // UNavArea*
	}

	namespace n_UParticleModuleLocationSkelVertSurface { // : UParticleModuleLocationBase
		constexpr auto SourceType = 0x50; // ELocationSkelVertSurfaceSource
		constexpr auto UniversalOffset = 0x54; // FVector
		constexpr auto bUpdatePositionEachFrame = 0x60; // char : 1
		constexpr auto bOrientMeshEmitters = 0x60; // char : 1
		constexpr auto bInheritBoneVelocity = 0x60; // char : 1
		constexpr auto SkelMeshActorParamName = 0x64; // FName
		constexpr auto ValidAssociatedBones = 0x70; // TArray<FName>
		constexpr auto bEnforceNormalCheck = 0x80; // char : 1
		constexpr auto NormalToCompare = 0x84; // FVector
		constexpr auto NormalCheckToleranceDegrees = 0x90; // float
		constexpr auto NormalCheckTolerance = 0x94; // float
		constexpr auto ValidMaterialIndices = 0x98; // TArray<int32_t>
		constexpr auto bInheritVertexColor = 0xa8; // char : 1
	}

	namespace n_UTaleQuestGenerateLootDescForVoyageRankStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UProceduralFoliageSpawner { // : UObject
		constexpr auto RandomSeed = 0x28; // int32_t
		constexpr auto TileSize = 0x2c; // float
		constexpr auto NumUniqueTiles = 0x30; // int32_t
		constexpr auto FoliageTypes = 0x38; // TArray<FFoliageTypeObject>
		constexpr auto bNeedsSimulation = 0x48; // bool
	}

	namespace n_UMovieSceneTrack { // : UMovieSceneSignedObject
		constexpr auto EvalOptions = 0x80; // FMovieSceneTrackEvalOptions
	}

	namespace n_UBTDecorator_DockedToInteractable { // : UBTDecorator_BlackboardBase
		constexpr auto BlackboardKey = 0x68; // FBlackboardKeySelector
	}

	namespace n_UZoomMapParamsDataAsset { // : UDataAsset
		constexpr auto Offset = 0x28; // float
		constexpr auto ZoomLevel = 0x2c; // float
		constexpr auto XMarkSizeModifier = 0x30; // float
		constexpr auto MaxDistanceFromCentreToDigspot = 0x34; // float
	}

	namespace n_UGameplayEffectTemplate { // : UGameplayEffect
		constexpr auto DurationPolicy = 0x30; // EGameplayEffectDurationType
		constexpr auto DurationMagnitude = 0x38; // FGameplayEffectModifierMagnitude
		constexpr auto Period = 0x1a8; // FScalableFloat
		constexpr auto bExecutePeriodicEffectOnApplication = 0x1c8; // bool
		constexpr auto Modifiers = 0x1d0; // TArray<FGameplayModifierInfo>
		constexpr auto Executions = 0x1e0; // TArray<FGameplayEffectExecutionDefinition>
		constexpr auto ChanceToApplyToTarget = 0x1f0; // FScalableFloat
		constexpr auto TargetEffectClasses = 0x210; // TArray<UGameplayEffect*>
		constexpr auto TargetEffects = 0x220; // TArray<UGameplayEffect*>
		constexpr auto OverflowEffects = 0x230; // TArray<UGameplayEffect*>
		constexpr auto bDenyOverflowApplication = 0x240; // bool
		constexpr auto bClearStackOnOverflow = 0x241; // bool
		constexpr auto PrematureExpirationEffectClasses = 0x248; // TArray<UGameplayEffect*>
		constexpr auto RoutineExpirationEffectClasses = 0x258; // TArray<UGameplayEffect*>
		constexpr auto bRequireModifierSuccessToTriggerCues = 0x268; // bool
		constexpr auto GameplayCues = 0x270; // TArray<FGameplayEffectCue>
		constexpr auto UIData = 0x280; // UGameplayEffectUIData*
		constexpr auto InheritableGameplayEffectTags = 0x288; // FInheritedTagContainer
		constexpr auto GameplayEffectTags = 0x300; // FGameplayTagContainer
		constexpr auto InheritableOwnedTagsContainer = 0x328; // FInheritedTagContainer
		constexpr auto OwnedTagsContainer = 0x3a0; // FGameplayTagContainer
		constexpr auto OngoingTagRequirements = 0x3c8; // FGameplayTagRequirements
		constexpr auto ApplicationTagRequirements = 0x418; // FGameplayTagRequirements
		constexpr auto RemoveGameplayEffectsWithTags = 0x468; // FInheritedTagContainer
		constexpr auto ClearTagsContainer = 0x4e0; // FGameplayTagContainer
		constexpr auto GrantedApplicationImmunityTags = 0x508; // FGameplayTagRequirements
		constexpr auto StackingType = 0x558; // EGameplayEffectStackingType
		constexpr auto StackLimitCount = 0x55c; // int32_t
		constexpr auto StackDurationRefreshPolicy = 0x560; // EGameplayEffectStackingDurationPolicy
		constexpr auto StackPeriodResetPolicy = 0x561; // EGameplayEffectStackingPeriodPolicy
		constexpr auto GrantedAbilities = 0x568; // TArray<FGameplayAbilitySpecDef>
	}

	namespace n_AMockInputHandlerCharacter { // : ACharacter
		constexpr auto Mesh = 0x448; // USkeletalMeshComponent*
		constexpr auto CharacterMovement = 0x450; // UCharacterMovementComponent*
		constexpr auto CapsuleComponent = 0x458; // UCapsuleComponent*
		constexpr auto BasedMovement = 0x460; // FBasedMovementInfo
		constexpr auto ReplicatedBasedMovement = 0x498; // FBasedMovementInfo
		constexpr auto BaseTranslationOffset = 0x4d0; // FVector
		constexpr auto BaseRotationOffset = 0x4e0; // FQuat
		constexpr auto ReplicatedMovementMode = 0x4f0; // char
		constexpr auto bInBaseReplication = 0x4f1; // bool
		constexpr auto CrouchedEyeHeight = 0x4f4; // float
		constexpr auto bIsCrouched = 0x4f8; // char : 1
		constexpr auto bPressedJump = 0x4f8; // char : 1
		constexpr auto bClientUpdating = 0x4f8; // char : 1
		constexpr auto bClientWasFalling = 0x4f8; // char : 1
		constexpr auto bClientResimulateRootMotion = 0x4f8; // char : 1
		constexpr auto bSimGravityDisabled = 0x4f8; // char : 1
		constexpr auto bServerMoveIgnoreRootMotion = 0x4f8; // char : 1
		constexpr auto JumpKeyHoldTime = 0x4fc; // float
		constexpr auto JumpMaxHoldTime = 0x500; // float
		constexpr auto OnReachedJumpApex = 0x508; // FScriptMulticastDelegate
		constexpr auto OnCharacterMovementUpdated = 0x528; // FScriptMulticastDelegate
		constexpr auto ClientRootMotionParams = 0x540; // FRootMotionMovementParams
		constexpr auto RootMotionRepMoves = 0x580; // TArray<FSimulatedRootMotionReplicatedMove>
		constexpr auto RepRootMotion = 0x590; // FRepRootMotionMontage
	}

	namespace n_USovereignNPCComponent { // : UCompanyNPCComponent
		constexpr auto AssociatedCompanies = 0x220; // TArray<UCompany*>
		constexpr auto NotInTinSessionTooltip = 0x230; // FText
	}

	namespace n_UStatSettings { // : UDeveloperSettings
		constexpr auto ConditionalStatsServiceSettingsLocation = 0x38; // FStringAssetReference
	}

	namespace n_AAthenaGhostPlayerCharacter { // : AAthenaPlayerCharacter
		constexpr auto StreamingLocationComponent = 0x1ac0; // UStreamingLocationComponent*
		constexpr auto GhostShipTickManager = 0x1b58; // AGhostShipTickManager*
	}

	namespace n_UScaleBox { // : UContentWidget
		constexpr auto StretchDirection = 0x150; // EStretchDirection
		constexpr auto Stretch = 0x151; // EStretch
		constexpr auto UserSpecifiedScale = 0x154; // float
	}

	namespace n_USwingMechanismCordRenderComponent { // : UCordRenderComponent
		constexpr auto Length = 0x628; // float
		constexpr auto StartOffset = 0x62c; // FVector
		constexpr auto EndOffset = 0x638; // FVector
	}

	namespace n_UTaleQuestFramedStep { // : UTaleQuestStep
		constexpr auto Services = 0x98; // TArray<UTaleQuestService*>
		constexpr auto FrameDesc = 0xa8; // UTaleQuestFramedStepDesc*
		constexpr auto StructForCollector = 0xc0; // UScriptStruct*
		constexpr auto LocalStructForCollector = 0xc8; // UScriptStruct*
	}

	namespace n_UClothingDesc { // : UEntitlementDesc
		constexpr auto WardrobeKey = 0xd8; // FName
	}

	namespace n_UBTDecorator_Loop { // : UBTDecorator
		constexpr auto NumLoops = 0x68; // int32_t
		constexpr auto bInfiniteLoop = 0x6c; // bool
	}

	namespace n_UAnimSet { // : UObject
		constexpr auto bAnimRotationOnly = 0x28; // char : 1
		constexpr auto TrackBoneNames = 0x30; // TArray<FName>
		constexpr auto LinkupCache = 0x40; // TArray<FAnimSetMeshLinkup>
		constexpr auto BoneUseAnimTranslation = 0x50; // TArray<char>
		constexpr auto ForceUseMeshTranslation = 0x60; // TArray<char>
		constexpr auto UseTranslationBoneNames = 0x70; // TArray<FName>
		constexpr auto ForceMeshTranslationBoneNames = 0x80; // TArray<FName>
		constexpr auto PreviewSkelMeshName = 0x90; // FName
		constexpr auto BestRatioSkelMeshName = 0x98; // FName
	}

	namespace n_UAutomaticInstancingSettings { // : UDeveloperSettings
		constexpr auto IsEnabled = 0x38; // bool
	}

	namespace n_UCustomAnimationHandlerComponent { // : UActorComponent
		constexpr auto CurrentCustomAnimationDataAssetReferences = 0xd8; // TArray<FStringAssetReference>
		constexpr auto RequestedLoopingAnim = 0xe8; // FRequestedLoopAnims
		constexpr auto MergedCustomAnimationData = 0xf8; // UAthenaAnimationCustomSkeletonAnimationData*
	}

	namespace n_UBeckonComponent { // : UActorComponent
		constexpr auto NPCGroup = 0xc8; // FString
		constexpr auto OngoingBeckonGestureAnimMontage = 0x130; // UAnimMontage*
		constexpr auto OngoingBeckonGestureAudio = 0x138; // UWwiseEvent*
	}

	namespace n_UInvokeDamageStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UWaterProperties { // : UObject
		constexpr auto WaterInfo = 0x28; // TArray<FWaterInformation>
	}

	namespace n_UTaleQuestAddLocationMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto NumberOfChests = 0x88; // FQuestVariableInt
		constexpr auto RegionMapData = 0x98; // FQuestVariableDataAsset
		constexpr auto VaultData = 0xa8; // FQuestVariableDataAsset
		constexpr auto MapParams = 0xb8; // FQuestVariableDataAsset
	}

	namespace n_UCompanyOnboardingStarter { // : UTutorialStarter
		constexpr auto AthenaPlayerController = 0x28; // AAthenaPlayerController*
		constexpr auto ShouldPlayIntroAnimatic = 0x30; // bool
		constexpr auto ShouldDisableAllIntroBehaviour = 0x31; // bool
		constexpr auto IntroAnimationSettings = 0x34; // FFirstPersonAnimaticSettings
	}

	namespace n_UBTService_DefaultFocus { // : UBTService_BlackboardBase
		constexpr auto FocusPriority = 0x98; // char
	}

	namespace n_UAddItemsToCollectorsChestStep { // : UMutateCollectorsChestStep
		constexpr auto Desc = 0x90; // UMutateCollectorsChestStepDesc*
		constexpr auto ItemData = 0x98; // UFillCollectorsChestWithItemsDataAsset*
	}

	namespace n_UStopSuppressingCutsceneResponsesStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_USkeletonAICharacterAudioComponentParams { // : UDataAsset
		constexpr auto StrategyAudioEvents = 0x28; // TArray<FSkeletonAICharacterStrategyAudioEvents>
	}

	namespace n_UCutsceneComponent { // : UActorComponent
		constexpr auto LocalisedNames = 0xd8; // TArray<FText>
		constexpr auto CutsceneAsset = 0xe8; // UCutsceneDataAsset*
		constexpr auto CutSceneActor = 0xf0; // AActor*
		constexpr auto CutsceneActorType = 0xf8; // AActor*
		constexpr auto CutsceneActorInterface = 0x100; // TScriptInterface<Class>
		constexpr auto MaxPlayRange = 0x110; // float
		constexpr auto DelayBeforeDequeueAttempt = 0x114; // float
	}

	namespace n_UGeneralProjectSettings { // : UObject
		constexpr auto CompanyName = 0x28; // FString
		constexpr auto CompanyDistinguishedName = 0x38; // FString
		constexpr auto CopyrightNotice = 0x48; // FString
		constexpr auto Description = 0x58; // FString
		constexpr auto Homepage = 0x68; // FString
		constexpr auto LicensingTerms = 0x78; // FString
		constexpr auto PrivacyPolicy = 0x88; // FString
		constexpr auto ProjectID = 0x98; // FGuid
		constexpr auto ProjectName = 0xa8; // FString
		constexpr auto ProjectVersion = 0xb8; // FString
		constexpr auto SupportContact = 0xc8; // FString
		constexpr auto ProjectDisplayedTitle = 0xd8; // FText
	}

	namespace n_UAnimNotify_ResetDynamics { // : UAnimNotify
		constexpr auto PlayedWithSequencer = 0x28; // bool
	}

	namespace n_UWaitForClueCollectedStepDesc { // : UTaleQuestStepDesc
		constexpr auto Clue = 0x80; // FQuestVariableClueDescriptor
		constexpr auto ClueActor = 0x90; // FQuestVariableActor
		constexpr auto Discoverer = 0xa0; // FQuestVariableActor
	}

	namespace n_AArmoryChestInteraction { // : APossessionsChestInteraction
		constexpr auto Categories = 0x438; // TArray<UWeaponItemCategory*>
		constexpr auto AllTab = 0x448; // bool
	}

	namespace n_AStaticStorageCrateWieldable { // : ANonDisplaceableLargeStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_APossessionsChestInteraction { // : AModalInteraction
		constexpr auto PossessionsChestType = 0x3e0; // EPossessionsChestType
	}

	namespace n_UArrowComponent { // : UPrimitiveComponent
		constexpr auto ArrowColor = 0x588; // FColor
		constexpr auto ArrowSize = 0x58c; // float
		constexpr auto bIsScreenSizeScaled = 0x590; // bool
		constexpr auto ScreenSize = 0x594; // float
		constexpr auto bTreatAsASprite = 0x598; // char : 1
	}

	namespace n_UTaleQuestSetCompassTargetBaseStepDesc { // : UTaleQuestStepDesc
		constexpr auto TargetUpdateReason = 0x80; // ETargetUpdateReason
	}

	namespace n_AShipNetProxy { // : ANetProxy
		constexpr auto EmissaryFlagActive = 0x400; // bool
		constexpr auto EmmissaryFlagTextureReference = 0x408; // FStringAssetReference
		constexpr auto EmmissaryFlagMaterial = 0x418; // UMaterialInstanceDynamic*
		constexpr auto ShipLanterns = 0x428; // TArray<AShipInteractableLight*>
		constexpr auto LanternBits = 0x448; // int32_t
	}

	namespace n_AAshenLordEncounter { // : AGameEvent
		constexpr auto AshenLordSpawner = 0x458; // UAISpawner*
		constexpr auto AIDioramaController = 0x460; // UAIDioramaController*
		constexpr auto RewardGeyserManager = 0x468; // AGeyserManager*
		constexpr auto Params = 0x470; // UAshenLordEncounterParams*
		constexpr auto SpecificAshenLordDefeatedStat = 0x61c; // FPlayerStat
		constexpr auto ObservingContextProvider = 0x670; // UPlayerProximityObservedSpawnContextProvider*
		constexpr auto ProximityPlayerTracker = 0x678; // UAIProximityPlayerTracker*
		constexpr auto AshenLordMusicZone = 0x680; // AActor*
	}

	namespace n_ATelemetryDescriptorMockActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UAISense_Blueprint { // : UAISense
		constexpr auto ListenerDataType = 0x88; // UUserDefinedStruct*
		constexpr auto ListenerContainer = 0x90; // TArray<UAIPerceptionComponent*>
		constexpr auto UnprocessedEvents = 0xa0; // TArray<UAISenseEvent*>
	}

	namespace n_UShipCreatureManagerCreatureInstanceMotionModifierDataAsset { // : UDataAsset
		constexpr auto SpeedModifierCurves = 0x28; // TArray<UCurveFloat*>
		constexpr auto RollCurves = 0x38; // TArray<UCurveFloat*>
		constexpr auto OffsetCurves = 0x48; // TArray<UCurveVector*>
	}

	namespace n_UBlendedAtmosphericPressureZoneComponent { // : UAtmosphericPressureZoneComponent
		constexpr auto WeightFadeCurveNormalised = 0x2d0; // UCurveFloat*
		constexpr auto RadiusFadeCurveNormalised = 0x2d8; // UCurveFloat*
	}

	namespace n_UMaterialExpressionActorPositionWS { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UMovieSceneSequence { // : UMovieSceneSignedObject
		constexpr auto EvaluationTemplate = 0x80; // FCachedMovieSceneEvaluationTemplate
		constexpr auto TemplateParameters = 0x2a0; // FMovieSceneTrackCompilationParams
		constexpr auto bParentContextsAreSignificant = 0x2a1; // bool
	}

	namespace n_UFaunaAnimationData { // : UDataAsset
		constexpr auto FaunaAnimations = 0x28; // FFaunaAnimationStructure
	}

	namespace n_UShipLiveryCatalogueDataAsset { // : UDataAsset
		constexpr auto Catalogue = 0x28; // FShipLiveryCatalogue
	}

	namespace n_UCompressedCanvasRenderTarget2D { // : UTexture2D
		constexpr auto World = 0x190; // TWeakObjectPtr<UWorld>
		constexpr auto RenderTarget = 0x198; // UCanvasRenderTarget2D*
	}

	namespace n_UAthenaAssetSettings { // : UObject
		constexpr auto DelayLoadedAssets = 0x28; // TArray<FAssetDelayLoadEntry>
		constexpr auto SteamOnlyDelayLoadedAssets = 0x38; // TArray<FAssetDelayLoadEntry>
		constexpr auto PhysicsAuditBlueprintExceptions = 0x48; // TArray<FString>
		constexpr auto PhysicsAuditExemptedCollisionProfiles = 0x58; // TArray<FName>
	}

	namespace n_AModalInteraction { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UAreaOfEffectHealAIAbility { // : UAthenaAIAbility
		constexpr auto HealAreaOfEffectActor = 0x88; // AActor*
	}

	namespace n_UHarpoonLauncherAudioParamsDataAsset { // : UDataAsset
		constexpr auto AudioEmitterOffset = 0x28; // FVector
		constexpr auto MoveYawRateRTPCName = 0x34; // FName
		constexpr auto MovePitchRateRTPCName = 0x3c; // FName
		constexpr auto SpoolingSpeedRTPCName = 0x44; // FName
		constexpr auto StartMovePitchAudioLoopEvent = 0x50; // UWwiseEvent*
		constexpr auto StopMovePitchAudioLoopEvent = 0x58; // UWwiseEvent*
		constexpr auto StartMoveYawAudioLoopEvent = 0x60; // UWwiseEvent*
		constexpr auto StopMoveYawAudioLoopEvent = 0x68; // UWwiseEvent*
		constexpr auto StoppedAimAtEdgeOfRangeAudioEvent = 0x70; // UWwiseEvent*
		constexpr auto FireAudioEvent = 0x78; // UWwiseEvent*
		constexpr auto RetractTriggeredAudioEvent = 0x80; // UWwiseEvent*
		constexpr auto RetractFinishedAudioEvent = 0x88; // UWwiseEvent*
		constexpr auto ReleaseRetractableAudioEvent = 0x90; // UWwiseEvent*
		constexpr auto StartSpoolingAudioEvent = 0x98; // UWwiseEvent*
		constexpr auto StopSpoolingAudioEvent = 0xa0; // UWwiseEvent*
		constexpr auto TetherExtentReachedAudioEvent = 0xa8; // UWwiseEvent*
		constexpr auto ReelLockInputPressedAudioEvent = 0xb0; // UWwiseEvent*
		constexpr auto ReelLockInputReleasedAudioEvent = 0xb8; // UWwiseEvent*
		constexpr auto AudioEmitterPool = 0xc0; // UWwiseObjectPoolWrapper*
		constexpr auto SpoolingSpeedClampValue = 0xc8; // float
		constexpr auto AttachedSpoolingSpeedClampValue = 0xcc; // float
	}

	namespace n_USunkenCurseArtefactItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto SpawnOnStart = 0x2b0; // bool
		constexpr auto SpawnParams = 0x2b8; // FItemSpawnParams
		constexpr auto ReferencedSpawnDistributionAsset = 0x2e0; // UWeightedItemDescSpawnDataAsset*
		constexpr auto ReferencedSpawnDistribution = 0x2e8; // UItemSpawnDistributionAsset*
		constexpr auto SpawnTransforms = 0x2f0; // TArray<FItemSpawnTransform>
		constexpr auto SpawnTransformsWithRandomQuantities = 0x300; // TArray<FItemSpawnTransformWithRandomQuantity>
		constexpr auto FeatureToggle = 0x310; // FName
		constexpr auto SpawnSource = 0x318; // ESpawnedItemSource
		constexpr auto SpawnRate = 0x31c; // float
		constexpr auto DestroyProxiesOnEndPlay = 0x320; // bool
		constexpr auto SpawnWithPhysicsEnabled = 0x321; // bool
		constexpr auto DoNotAttachToOwnerWhenSpawned = 0x322; // bool
		constexpr auto DropItemsOnSpawn = 0x323; // bool
		constexpr auto DropItemsUsingPriorityAIDropParams = 0x324; // bool
		constexpr auto SpawnList = 0x328; // TArray<FSpawnInstance>
		constexpr auto SingleItemInstances = 0x338; // TArray<FSpawnInstance>
		constexpr auto SpawnedItems = 0x348; // TArray<FSpawnedItem>
	}

	namespace n_ATargetPoint { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UAirBubbleComponent { // : USceneComponent
		constexpr auto Radius = 0x2b0; // float
	}

	namespace n_AMysteriousNotesService { // : AActor
		constexpr auto CachedNoteSettings = 0x3f8; // UMysteriousNoteSettings*
		constexpr auto WieldableNoteDataAsset = 0x400; // UWieldableMysteriousNoteDataAsset*
		constexpr auto CompletionEventsModelData = 0x408; // UMysteriousNotesCompletionEventsModelDataAsset*
	}

	namespace n_UPetHangoutSpotComponent { // : USceneComponent
		constexpr auto HangoutSpots = 0x2b0; // TArray<FHangoutSpotPosition>
		constexpr auto HasLowerDeckFloodThreshold = 0x2c0; // bool
		constexpr auto LowerDeckFloodThreshold = 0x2c4; // float
		constexpr auto HasMiddleDeckFloodThreshold = 0x2c8; // bool
		constexpr auto MiddleDeckFloodThreshold = 0x2cc; // float
		constexpr auto PerchInteractableHeightOffset = 0x2d0; // float
		constexpr auto IsWorldHangout = 0x2d4; // bool
		constexpr auto PetPerchComponents = 0x2f8; // TArray<UPetPerchComponent*>
		constexpr auto IsTopDeckBlocked = 0x318; // bool
		constexpr auto IsOwnerSinking = 0x319; // bool
		constexpr auto PetHangoutSpotsDataAsset = 0x338; // UPetHangoutSpotsDataAsset*
	}

	namespace n_ULandmarkTreasureLocationsDataAsset { // : UDataAsset
		constexpr auto Landmarks = 0x28; // TArray<FLandmarkTreasureLocationEntry>
	}

	namespace n_ULinkerComponent { // : UActorComponent
		constexpr auto EndPlayHandlers = 0x190; // TArray<UEndPlayHandler*>
	}

	namespace n_UComboBox { // : UWidget
		constexpr auto Items = 0x138; // TArray<UObject*>
		constexpr auto OnGenerateWidgetEvent = 0x148; // DelegateProperty
	}

	namespace n_USynchedMusicZoneComponent { // : UMusicZoneComponent
		constexpr auto StartDelayTime = 0x370; // float
		constexpr auto PlayFromStartTimeMS = 0x374; // int32_t
	}

	namespace n_UPuzzleStatueBaseAudioParamsDataAsset { // : UDataAsset
		constexpr auto StatueActivated = 0x28; // UWwiseEvent*
		constexpr auto PuzzleStatueAudioPool = 0x30; // UWwiseObjectPoolWrapper*
	}

	namespace n_UCostumeEmoteRadialContentRule { // : UEmoteRadialContentRule
		constexpr auto EmoteSettings = 0xd0; // UEmoteSettings*
	}

	namespace n_UEnvQueryGenerator_WaterMultiDeckerRing { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto Radius = 0x90; // FAIDataProviderFloatValue
		constexpr auto ZOffsetOfRingsFromContext = 0xc0; // TArray<FAIDataProviderFloatValue>
		constexpr auto PointsPerRing = 0xd0; // FAIDataProviderIntValue
		constexpr auto Center = 0x100; // UEnvQueryContext*
	}

	namespace n_UEnvQuery { // : UObject
		constexpr auto Options = 0x28; // TArray<UEnvQueryOption*>
	}

	namespace n_UIslandEventHUDData { // : UDataAsset
		constexpr auto EventTypes = 0x28; // TArray<UIslandEventType*>
		constexpr auto IslandIconSize = 0x38; // FVector2D
		constexpr auto HeaderIconSize = 0x40; // FVector2D
		constexpr auto HeaderYOffset = 0x48; // float
		constexpr auto TriggerLerpAtZoomLevel = 0x4c; // float
		constexpr auto LerpData = 0x50; // FCanvasLerpData
		constexpr auto HighlightLerpData = 0x60; // FCanvasLerpData
		constexpr auto FadeInOutData = 0x70; // FCanvasLerpData
		constexpr auto MarkerHighlightRadiusAdjuster = 0x80; // float
		constexpr auto MarkerHighlightCentreOffset = 0x84; // FVector2D
		constexpr auto MarkerHighlightScale = 0x8c; // float
	}

	namespace n_UNPCDialogComponent { // : UActorComponent
		constexpr auto WelcomeMessage = 0xd0; // FText
		constexpr auto Data = 0x108; // UNPCDialogTreeData*
		constexpr auto DialogBlackboardSchema = 0x110; // UScriptStruct*
		constexpr auto InputID = 0x118; // UNotificationInputId*
		constexpr auto ActionDisplayPriority = 0x120; // EActionDisplayPriority
		constexpr auto NpcDialoguePool = 0x128; // UWwiseObjectPoolWrapper*
		constexpr auto NpcDialogueWelcome = 0x130; // UWwiseEvent*
		constexpr auto NpcDialogueBridge = 0x138; // UWwiseEvent*
		constexpr auto NpcDialogueGoodbye = 0x140; // UWwiseEvent*
		constexpr auto CreateInteractionRules = 0x148; // bool
		constexpr auto DialogueInputFocusTimeout = 0x14c; // float
		constexpr auto TelemetryKey = 0x150; // FString
		constexpr auto NoteCompletionIdents = 0x160; // TArray<FMysteriousNotesCompletionEventsModelEntry>
		constexpr auto StatsToFireOnDialogStart = 0x170; // TArray<FPlayerStat>
		constexpr auto ConditionalStatsToFireOnDialogStart = 0x180; // TArray<UConditionalStatsTriggerType*>
		constexpr auto InteractingController = 0x298; // AController*
		constexpr auto DialogOptionUsageCounter = 0x2a0; // TArray<uint32_t>
		constexpr auto DialogBlackboard = 0x2b0; // TArray<char>
		constexpr auto Disabled = 0x2f4; // bool
		constexpr auto CurrentInteractionSessionId = 0x2f8; // FGuid
	}

	namespace n_UMaterialExpressionIfShadowPass { // : UMaterialExpression
		constexpr auto Shadow = 0x70; // FExpressionInput
		constexpr auto NotShadow = 0xa8; // FExpressionInput
	}

	namespace n_UIsAIOfFormStatCondition { // : UTargetedStatCondition
		constexpr auto AllowedAIForms = 0x30; // TArray<UClass*>
	}

	namespace n_AAthenaPlayerCharacterMockWithAnimSeq { // : AAthenaPlayerCharacterMock
		constexpr auto PetMovementParamsDataAsset = 0x1ac0; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto AllowedToSwim = 0x1ac8; // bool
	}

	namespace n_UParticleModuleAttractorParticle { // : UParticleModuleAttractorBase
		constexpr auto EmitterName = 0x50; // FName
		constexpr auto Range = 0x58; // FRawDistributionFloat
		constexpr auto bStrengthByDistance = 0x90; // char : 1
		constexpr auto Strength = 0x98; // FRawDistributionFloat
		constexpr auto bAffectBaseVelocity = 0xd0; // char : 1
		constexpr auto SelectionMethod = 0xd4; // EAttractorParticleSelectionMethod
		constexpr auto bRenewSource = 0xd8; // char : 1
		constexpr auto bInheritSourceVel = 0xd8; // char : 1
		constexpr auto LastSelIndex = 0xdc; // int32_t
	}

	namespace n_UNamedContextualOpenRadialAction { // : UOpenRadialAction
		constexpr auto RadialContexts = 0x30; // TArray<FContextAction>
		constexpr auto CanExecuteRadial = 0x40; // URadialCreationRuleAsset*
	}

	namespace n_UWieldablePetAnimationInstance { // : UWieldableItemAnimationInstance
		constexpr auto PetAnimationParams = 0x648; // FAthenaAnimationPets
		constexpr auto LocomotionSpeed = 0x728; // float
		constexpr auto TurningActive = 0x72c; // bool
		constexpr auto TurnLeft = 0x72d; // bool
		constexpr auto TurnRate = 0x730; // float
		constexpr auto PositiveMoodBlendTime = 0x734; // float
		constexpr auto LookAtLocation = 0x738; // FVector
		constexpr auto SurfaceOrientation = 0x744; // FRotator
		constexpr auto TransitionFromTurningMovementSpeed = 0x750; // float
		constexpr auto LookAtAlpha = 0x754; // float
		constexpr auto LookAtClamp = 0x758; // float
		constexpr auto LookAtActive = 0x75c; // bool
		constexpr auto LookAtAnimationOverride = 0x75d; // bool
		constexpr auto LookAtAnimationDisabled = 0x75e; // bool
		constexpr auto IsStrokeAllowed = 0x75f; // bool
		constexpr auto PositiveMoodModifierAllowed = 0x760; // bool
		constexpr auto PositiveMoodAlpha = 0x764; // float
		constexpr auto PositiveMoodAnimationActiveValue = 0x768; // float
		constexpr auto CloseRadiusPositiveMoodModifierAllowed = 0x76c; // bool
		constexpr auto IsSmoothingClientPosition = 0x76d; // bool
		constexpr auto CloseRadiusPositiveMoodModifierActiveValue = 0x770; // float
		constexpr auto AlternateHeldPoseBlendStrength = 0x774; // float
		constexpr auto AnimationsLoaded = 0x778; // bool
		constexpr auto IdleOverrideExceptions = 0x780; // TArray<EAthenaAnimationPetRoamingState>
		constexpr auto WeightedAnimSequenceLoadOnDemandRoaming = 0x790; // UWeightedAnimSequenceLoadOnDemand*
		constexpr auto WeightedAnimSequenceLoadOnDemandHeld = 0x798; // UWeightedAnimSequenceLoadOnDemand*
		constexpr auto WeightedAnimSequenceLoadOnDemandShow = 0x7a0; // UWeightedAnimSequenceLoadOnDemand*
		constexpr auto PetCurrentPlayingAnimMontage = 0x7a8; // UAnimMontage*
		constexpr auto RoamingAnimationStates = 0x7c8; // TMap<EAthenaAnimationPetRoamingState, FPetRoamingAnimationStateDefinitionWrapper>
		constexpr auto LoadedState = 0x818; // FPetRoamingAnimationState
		constexpr auto PriorLoadedState = 0x850; // FPetRoamingAnimationState
		constexpr auto CurrentlyPlayingAnimationInterruptData = 0x888; // FAnimationInterruptData
		constexpr auto Pet = 0x8a0; // APet*
		constexpr auto CharacterMovementComponent = 0x8a8; // UCharacterMovementComponent*
	}

	namespace n_UStatusResponseApplyOneShotStatus { // : UStatusResponse
		constexpr auto StatusToApply = 0x30; // FStatus
	}

	namespace n_UParticleModuleOrbitBase { // : UParticleModule
		constexpr auto bUseEmitterTime = 0x50; // char : 1
	}

	namespace n_ADynamicOnlySwitchMechanismTrigger { // : ASwitchMechanismTrigger
		constexpr auto Root = 0x410; // USceneComponent*
		constexpr auto Pivot = 0x418; // USceneComponent*
		constexpr auto MechanismTriggerComponent = 0x420; // UMechanismTriggerComponent*
		constexpr auto ShowSwitchInteractionPrompt = 0x428; // bool
		constexpr auto SwitchInteractionPromptText = 0x430; // FText
		constexpr auto SwitchNameText = 0x468; // FText
		constexpr auto SyncToConnectedActionStateOnChange = 0x4a0; // bool
		constexpr auto DisableWhenActivated = 0x4a1; // bool
		constexpr auto AutoDeactivateAfterActivation = 0x4a2; // bool
		constexpr auto TimeAfterActivationBeforeAutoDeactivating = 0x4a4; // float
		constexpr auto SelectRandomStartPositionOnSpawn = 0x4a8; // bool
		constexpr auto RandomStartPositionSelectionMode = 0x4a9; // ESwitchMechanismTriggerRandomSelectionMode
		constexpr auto FixedStartPositionIndex = 0x4ac; // int32_t
		constexpr auto PositionTransitionCurve = 0x4b0; // UCurveFloat*
		constexpr auto Positions = 0x4b8; // TArray<FSwitchMechanismTriggerPosition>
		constexpr auto AudioEmitterPool = 0x4c8; // UWwiseObjectPoolWrapper*
		constexpr auto MaterialGroup = 0x4d0; // UMechanismMaterialGroup*
		constexpr auto CurrentPositionIndex = 0x4d8; // int32_t
	}

	namespace n_AWaterSlide { // : AActor
		constexpr auto SlideSpline = 0x3d8; // USplineComponent*
		constexpr auto Root = 0x3e0; // USceneComponent*
		constexpr auto WaterSlideParamsDataAsset = 0x3e8; // UWaterSlideParamsDataAsset*
		constexpr auto EntranceCollisionComponent = 0x3f0; // UPrimitiveComponent*
		constexpr auto ContinuedWaterSlideRoute = 0x3f8; // AWaterSlide*
		constexpr auto LeftWaterSlideRoute = 0x400; // AWaterSlide*
		constexpr auto RightWaterSlideRoute = 0x408; // AWaterSlide*
		constexpr auto IsEndOfSlide = 0x410; // bool
		constexpr auto EndOfSlideLaunchForce = 0x414; // FVector
		constexpr auto WaterSlideAudioParams = 0x420; // UWaterSlideAudioParams*
	}

	namespace n_AAllianceService { // : AActor
		constexpr auto Settings = 0x3d8; // UAllianceSettingsAsset*
		constexpr auto Alliances = 0x3e0; // TArray<FAlliance>
		constexpr auto TelemetryComponent = 0x3f0; // UAllianceServiceTelemetryComponent*
		constexpr auto CrewAllianceJoinStatuses = 0x3f8; // TArray<FCrewAllianceJoinStatus>
		constexpr auto OnCrewJoinedAlliance = 0x430; // FScriptMulticastDelegate
	}

	namespace n_UBaitItemCategory_C { // : UConsumableItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_APet { // : AAICreatureCharacter
		constexpr auto WieldableReactMappingsAsset = 0x898; // UPetWieldableReactMappingsDataAsset*
		constexpr auto MaxVelocityForLocomotionAnimation = 0x8a0; // float
		constexpr auto CanFly = 0x8a4; // bool
		constexpr auto FlyingStrategyProperties = 0x8a8; // TArray<FPetFlyingStrategyProperties>
		constexpr auto FlyingLandTime = 0x8b8; // float
		constexpr auto FlyingLandCurve = 0x8c0; // UCurveFloat*
		constexpr auto FlyingTakeOffTime = 0x8c8; // float
		constexpr auto FlyingTakeOffCurve = 0x8d0; // UCurveFloat*
		constexpr auto MidFlightAdjustmentTimerRange = 0x8d8; // FFloatRange
		constexpr auto MidFlightAdjustmentCurve = 0x8e8; // UCurveFloat*
		constexpr auto MidFlightTimeToDistanceAdjustmentCurve = 0x8f0; // UCurveFloat*
		constexpr auto FiredFromActorCollision = 0x8f8; // FName
		constexpr auto FiredFromActorSFX = 0x900; // UWwiseEvent*
		constexpr auto DitherComponent = 0x908; // UPetDitherComponent*
		constexpr auto MinimumDamageForHealthReact = 0x910; // float
		constexpr auto MaxDistForWaterBucketToClean = 0x914; // float
		constexpr auto MinimumDurationUntilPetCanDespawnConcealed = 0x918; // float
		constexpr auto DefaultNamePlateHeight = 0x91c; // float
		constexpr auto AlternateNamePlateHeight = 0x920; // float
		constexpr auto StatesToUseAlternateNamePlatePos = 0x928; // TArray<EAthenaAnimationPetRoamingState>
		constexpr auto PetTimeSpentSad = 0x938; // FFloatRange
		constexpr auto DebugStateDescriptor = 0x948; // EDebugPetStateDescriptor
		constexpr auto AINameplateComponent = 0x950; // UAINameplateComponent*
		constexpr auto FeedingComponent = 0x958; // UFeedingComponent*
		constexpr auto StarvingComponent = 0x960; // UStarvingComponent*
		constexpr auto CleanlinessComponent = 0x968; // UCleanlinessComponent*
		constexpr auto CannonSquashComponent = 0x970; // UCannonSquashComponent*
		constexpr auto ReplicatedMovementRequest = 0x978; // FPetMovementRequest
		constexpr auto TargetMeshRoll = 0x984; // float
		constexpr auto DefaultShipTurnRateModifier = 0x998; // float
		constexpr auto TurnRateModifierList = 0x9a0; // TArray<FPetTurnRateModifier>
		constexpr auto LocomotingMovementStates = 0x9b0; // TArray<EAthenaAnimationPetRoamingState>
		constexpr auto RequestIdleOrMovementValidMovementStates = 0x9c0; // TArray<EAthenaAnimationPetRoamingState>
		constexpr auto MaxRollAngle = 0x9d0; // float
		constexpr auto DelayForDisablingMovementOnIdle = 0x9d4; // float
		constexpr auto IslandDustRatePerSecond = 0x9d8; // float
		constexpr auto CrewId = 0x9dc; // FGuid
		constexpr auto InHangout = 0x9ec; // bool
		constexpr auto PerchedInHangout = 0x9ed; // bool
		constexpr auto ResetRollAndZOffset = 0x9ee; // bool
		constexpr auto ShouldIgnoreTooltipDisplayOffset = 0x9ef; // bool
		constexpr auto PetTurnToFaceData = 0x9f0; // FPetTurnToFaceData
		constexpr auto AIPartsRetrievalComponent = 0xa28; // UAIPartsRetrievalComponent*
		constexpr auto PetPartCustomisationComponent = 0xa30; // UPetPartCustomisationComponent*
		constexpr auto LightWeightStatusEffectManagerComponent = 0xa38; // ULightWeightStatusEffectManagerComponent*
		constexpr auto TelemetryComponent = 0xa40; // UPetTelemetryComponent*
		constexpr auto SicknessComponent = 0xa48; // UPetSicknessComponent*
		constexpr auto WaterExposureComponent = 0xa50; // UWaterExposureComponent*
		constexpr auto AnimationDataStoreComponent = 0xa58; // UAnimationDataStoreComponent*
		constexpr auto SpawnedForShip = 0xa60; // AActor*
		constexpr auto PetOwner = 0xa68; // AActor*
		constexpr auto PetInfo = 0xa70; // AItemInfo*
		constexpr auto Docker = 0xa80; // FDocker
		constexpr auto StartPickupObjectActionRuleParams = 0xad0; // FStartPickupObjectActionRuleParams
		constexpr auto CurrentlyPlayingParticleSystem = 0xaf0; // UParticleSystemComponent*
		constexpr auto LandingStrategy = 0xaf8; // UAIStrategyId*
		constexpr auto PursuitStrategy = 0xb00; // UAIStrategyId*
		constexpr auto DefaultRollLerpTime = 0xb08; // float
		constexpr auto LandingRollLerpTime = 0xb0c; // float
		constexpr auto IsBeingDismissed = 0xb10; // bool
		constexpr auto IsInDisabledPetPerchHangout = 0xbfc; // bool
		constexpr auto PetIsSad = 0xbfd; // bool
	}

	namespace n_UPlayNpcAnimationResource { // : UDataAsset
		constexpr auto AnimationNameToPlay = 0x28; // FName
		constexpr auto DialogueData = 0x30; // USceneDialogueData*
		constexpr auto LocalMusicZone = 0x38; // UMusicZoneComponent*
		constexpr auto SpeakingActorLocalisableNames = 0x40; // TArray<FText>
	}

	namespace n_UDistributionFloatParameterBase { // : UDistributionFloatConstant
		constexpr auto ParameterName = 0x40; // FName
		constexpr auto MinInput = 0x48; // float
		constexpr auto MaxInput = 0x4c; // float
		constexpr auto MinOutput = 0x50; // float
		constexpr auto MaxOutput = 0x54; // float
		constexpr auto ParamMode = 0x58; // DistributionParamMode
	}

	namespace n_UAILocomotionCompositeInputHandler { // : UCompositeInputHandler
		constexpr auto Owner = 0x128; // AActor*
	}

	namespace n_UMovieScene3DPathTrack { // : UMovieScene3DConstraintTrack
		constexpr auto ConstraintSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UInstancedCoverageMeshComponent { // : UStaticMeshComponent
		constexpr auto CoveredMeshComponent = 0x5f0; // TWeakObjectPtr<UStaticMeshComponent>
		constexpr auto InstanceCount = 0x5f8; // int32_t
		constexpr auto InstancingRandomSeed = 0x5fc; // int32_t
		constexpr auto InstancePositionExtrusion = 0x600; // float
		constexpr auto InstanceScale = 0x604; // float
		constexpr auto InstanceScaleVariance = 0x608; // float
		constexpr auto InstanceRotation = 0x60c; // FRotator
		constexpr auto InstanceRotationVariance = 0x618; // FRotator
		constexpr auto InstanceAttractionDirection = 0x624; // FVector
		constexpr auto InstanceAttractionIntensity = 0x630; // float
		constexpr auto InstanceBaseMeshPlacementLOD = 0x634; // int32_t
		constexpr auto LODs = 0x638; // TArray<FInstancedCoverageMeshLOD>
		constexpr auto CompleteCullingDistance = 0x648; // float
		constexpr auto InstanceLODPreserveSilhouette = 0x64c; // bool
		constexpr auto BackFaceCullingAngle = 0x650; // float
		constexpr auto ShadowBackFaceCullingAngle = 0x654; // float
		constexpr auto MaxPlacementAttempts = 0x658; // int32_t
		constexpr auto bEvenlySpaced = 0x65c; // bool
		constexpr auto bVertexColourDensity = 0x65d; // bool
		constexpr auto bUpdatePlacement = 0x65e; // bool
		constexpr auto RandomNumbers = 0x660; // TArray<float>
		constexpr auto BaseMeshSurfaceArea = 0x670; // float
		constexpr auto CoveredMesh = 0x678; // UStaticMesh*
	}

	namespace n_UMetalAIFormDataAsset { // : UAthenaAIFormDataAsset
		constexpr auto WetCooldown = 0x90; // float
		constexpr auto WetMovementSpeedMultiplier = 0x94; // float
		constexpr auto RelativeWaterLevelToGetWet = 0x98; // float
		constexpr auto RainStrengthToGetWet = 0x9c; // float
		constexpr auto RustyDamageResponses = 0xa0; // TArray<FMetalAIFormRustyDamageResponse>
	}

	namespace n_URemoveNPCOnShipStepDesc { // : UTaleQuestStepDesc
		constexpr auto NPCOnShipManager = 0x80; // FQuestVariableGuid
	}

	namespace n_UNPCDialogPredicateAIState { // : UNPCDialogPredicate
		constexpr auto ActorIdx = 0x38; // int32_t
		constexpr auto TargetState = 0x3c; // EAIDialogueState
	}

	namespace n_ASeat { // : AControllableObject
		constexpr auto InteractionInput = 0x508; // UNotificationInputId*
		constexpr auto SittingStateParams = 0x510; // FSittingActionStateParams
		constexpr auto InteractableComponent = 0x5b0; // UInteractableComponent*
		constexpr auto SocketName = 0x5b8; // FName
		constexpr auto InteractionVerb = 0x5c0; // FText
		constexpr auto InteractionDisplayName = 0x5f8; // FText
		constexpr auto HoldToInteract = 0x630; // bool
		constexpr auto HoldInteractionInput = 0x638; // UNotificationInputId*
		constexpr auto HoldDuration = 0x640; // float
		constexpr auto CosCameraAngleToTurnOffFirstPersonMesh = 0x644; // float
	}

	namespace n_UPortalTaleService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UPortalTaleServiceDesc*
	}

	namespace n_UMaterialExpressionParticleMotionBlurFade { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UParticleModuleBeamBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UInterpFilter { // : UObject
		constexpr auto Caption = 0x28; // FString
	}

	namespace n_UAICreatureMovementModifierParamsDataAsset { // : UDataAsset
		constexpr auto TurnRateMultiplier = 0x28; // float
		constexpr auto FlyingTurnRateMultiplier = 0x2c; // float
		constexpr auto UseTighterTurningCircle = 0x30; // bool
		constexpr auto UseHighResNavMesh = 0x31; // bool
	}

	namespace n_UPetNameplateComponent { // : UAINameplateComponent
		constexpr auto DefaultPetName = 0x448; // FString
	}

	namespace n_UEndMatchCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UGameMapsSettings { // : UObject
		constexpr auto EditorStartupMap = 0x28; // FString
		constexpr auto LocalMapOptions = 0x38; // FString
		constexpr auto TransitionMap = 0x48; // FString
		constexpr auto bUseSplitscreen = 0x58; // bool
		constexpr auto TwoPlayerSplitscreenLayout = 0x59; // ETwoPlayerSplitScreenType
		constexpr auto ThreePlayerSplitscreenLayout = 0x5a; // EThreePlayerSplitScreenType
		constexpr auto GameInstanceClass = 0x60; // FStringClassReference
		constexpr auto GameDefaultMap = 0x70; // FString
		constexpr auto ServerDefaultMap = 0x80; // FString
		constexpr auto GlobalDefaultGameMode = 0x90; // FStringClassReference
		constexpr auto GlobalDefaultServerGameMode = 0xa0; // FStringClassReference
	}

	namespace n_UMaterialExpressionSphereMask { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto Radius = 0xe0; // FExpressionInput
		constexpr auto Hardness = 0x118; // FExpressionInput
		constexpr auto AttenuationRadius = 0x150; // float
		constexpr auto HardnessPercent = 0x154; // float
	}

	namespace n_UMovieSceneSubTrack { // : UMovieSceneNameableTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UMaterialExpressionDistanceCullFade { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UKrakenShipWrappingBehaviourParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x30; // FKrakenShipWrappingBehaviourParams
	}

	namespace n_UBTTask_CopyBlackboardActor { // : UBTTaskNode
		constexpr auto SrcBlackboardKey = 0x60; // FBlackboardKeySelector
		constexpr auto TargetBlackboardKey = 0x88; // FBlackboardKeySelector
	}

	namespace n_UTaleQuestIsClueOfTypeStepDesc { // : UTaleQuestStepDesc
		constexpr auto ClueSiteTypeToMatch = 0x80; // UClueSiteType*
		constexpr auto ClueSite = 0x88; // FQuestVariableClueSite
		constexpr auto IsMatchingType = 0x98; // FQuestVariableBool
	}

	namespace n_USirenAnimationData { // : UAnimationData
		constexpr auto SirenAnimationData = 0x28; // FSirenAnimationDataStructure
	}

	namespace n_USoundNode { // : UObject
		constexpr auto ChildNodes = 0x28; // TArray<USoundNode*>
	}

	namespace n_UServerMigrationSettings { // : UObject
		constexpr auto MaxSimultaneousMigrations = 0x28; // int32_t
		constexpr auto TransportImplementation = 0x30; // FString
		constexpr auto ServerDefaultListenPort = 0x40; // int32_t
		constexpr auto ServerListenPortRangeSize = 0x44; // int32_t
		constexpr auto AutomationServerDefaultListenPort = 0x48; // int32_t
		constexpr auto InstanceImplementation = 0x50; // FString
		constexpr auto MigrationConnectionTimeoutSeconds = 0x60; // float
		constexpr auto WaitForClientActorRemappingTimeoutLength = 0x64; // float
		constexpr auto WaitForTransferOwnershipAcknowledgementTimeoutLength = 0x68; // float
		constexpr auto DeserialisationTimeSliceLength = 0x6c; // float
	}

	namespace n_URopeCatenaryRenderComponent { // : UCordRenderComponent
		constexpr auto CordMaterials = 0x5f8; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ThicknessCm = 0x608; // float
	}

	namespace n_UContestMapLayout { // : UDataAsset
		constexpr auto CompanyName = 0x28; // FTreasureMapWidgetText
		constexpr auto VoyageName = 0x48; // FTreasureMapWidgetText
		constexpr auto ScoreboardTitle = 0x68; // FTreasureMapWidgetText
		constexpr auto ScoreId = 0x88; // FTreasureMapWidgetText
		constexpr auto Crews = 0xa8; // TArray<FContestMapLayoutCrew>
		constexpr auto ScoreInfo = 0xb8; // TArray<FContestMapLayoutScoreInfo>
		constexpr auto AutogenerateScoreboard = 0xc8; // bool
		constexpr auto ScoreboardTopOffset = 0xcc; // float
		constexpr auto IconLeftOffset = 0xd0; // float
		constexpr auto IconWidth = 0xd4; // float
		constexpr auto NameLeftOffset = 0xd8; // float
		constexpr auto NameScale = 0xdc; // float
		constexpr auto ScoreLeftOffset = 0xe0; // float
		constexpr auto ScoreScale = 0xe4; // float
		constexpr auto ScoreboardSpacing = 0xe8; // float
		constexpr auto UnderlineVerticalOffset = 0xec; // float
		constexpr auto UnderlineScale = 0xf0; // float
		constexpr auto ScoreReasonScale = 0xf4; // float
		constexpr auto ScoreReasonTopOffset = 0xf8; // float
		constexpr auto ScoreReasonLineStart = 0xfc; // float
		constexpr auto ScoreReasonLineEnd = 0x100; // float
		constexpr auto ScoreReasonTextRelativeTopOffset = 0x104; // float
		constexpr auto ScoreReasonTextScale = 0x108; // float
	}

	namespace n_AEmissaryLevelService { // : AActor
		constexpr auto Settings = 0x470; // UEmissaryLevelSettingsAsset*
		constexpr auto RewardSettings = 0x478; // UEmissaryRewardSettingsAsset*
	}

	namespace n_AMechanismGroup { // : AActor
		constexpr auto Mechanisms = 0x3e0; // TArray<AMechanism*>
		constexpr auto MechanismsToSelect = 0x3f0; // FWeightedProbabilityRangeOfRanges
		constexpr auto OnMechanismGroupResetDelegate = 0x420; // FScriptMulticastDelegate
		constexpr auto SelectedMechanisms = 0x430; // TArray<AMechanism*>
	}

	namespace n_UQuestBookDoublePageLayout { // : UQuestBookPageLayout
		constexpr auto Images = 0x28; // TArray<FTreasureMapWidgetTexture>
		constexpr auto GeneralText = 0x38; // TArray<FTreasureMapWidgetLocalisedTextWithFontOverride>
	}

	namespace n_USwordItemCategory { // : UWeaponItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UTaleQuestTinySharkService { // : UTaleQuestService
		constexpr auto ActiveExperiences = 0x60; // TArray<ATinySharkExperience*>
	}

	namespace n_UAthenaGameSettings { // : UObject
		constexpr auto NumberOfDaysInEachMonth = 0x28; // int32_t
		constexpr auto EntryMap = 0x30; // FString
		constexpr auto FrontendMap = 0x40; // FString
		constexpr auto InGameMap = 0x50; // FString
		constexpr auto TutorialMap = 0x60; // FString
		constexpr auto PlayModeLevels = 0x70; // FStringAssetReference
		constexpr auto FeatureToggledLevels = 0x80; // FStringAssetReference
		constexpr auto OverrideServerURL = 0x90; // FString
		constexpr auto LoadLevelTimeoutTime = 0xa0; // float
		constexpr auto ServiceBridgeConnectTimeout = 0xa4; // float
		constexpr auto VoiceChatRendererClass = 0xa8; // UClass*
		constexpr auto GameNarrationCoordinatorClass = 0xc8; // UClass*
		constexpr auto ApplicationSettingsClass = 0xe8; // UClass*
		constexpr auto CinematicCameraControllerClass = 0x108; // FStringAssetReference
		constexpr auto CinematicCameraSpectatorPawnClass = 0x118; // FStringAssetReference
		constexpr auto MaterialTranslationTableFileLocation = 0x128; // FStringAssetReference
		constexpr auto MaterialAudioTableFileLocation = 0x138; // FStringAssetReference
		constexpr auto MaterialVFXTableFileLocation = 0x148; // FStringAssetReference
		constexpr auto ShipAssetClassDatabaseFileLocation = 0x158; // FStringAssetReference
		constexpr auto AIPersistentPartsServiceAssetClassFileLocation = 0x168; // FStringAssetReference
		constexpr auto AIPartsServiceAssetClassFileLocation = 0x178; // FStringAssetReference
		constexpr auto DebugMenuFileLocation = 0x188; // FStringAssetReference
		constexpr auto SpawnLocationKeywordPriorityListLocation = 0x198; // FStringAssetReference
		constexpr auto CrewSpawnLocationVariablesListAsset = 0x1a8; // FStringAssetReference
		constexpr auto SkellyFortDataFileLocation = 0x1b8; // FStringAssetReference
		constexpr auto SkellyFortListDataFileLocation = 0x1c8; // FStringAssetReference
		constexpr auto AIShipServiceDataAssetFileLocation = 0x1d8; // FStringAssetReference
		constexpr auto AIShipServiceDataAssetFileLocationOverride = 0x1e8; // FToggleableAIShipServiceDataAssetFileLocation
		constexpr auto ProjectileServiceDataFileLocation = 0x200; // FStringAssetReference
		constexpr auto ThrottledProjectileTickDataAssetLocation = 0x210; // FStringAssetReference
		constexpr auto HoleDataFileLocation = 0x220; // FStringAssetReference
		constexpr auto PlayerBuriedItemServiceDataFileLocation = 0x230; // FStringAssetReference
		constexpr auto ItemLifetimeIslandCapsDataFileLocation = 0x240; // FStringAssetReference
		constexpr auto CursedCannonballDataAsset = 0x250; // FStringAssetReference
		constexpr auto Throwables = 0x260; // FStringAssetReference
		constexpr auto ThrowablesItemCategory = 0x270; // UItemCategory*
		constexpr auto SpawnableItemsDataAssetLocation = 0x278; // FStringAssetReference
		constexpr auto FireworksDebugSpawnItemsDataAsset = 0x288; // FStringAssetReference
		constexpr auto UnlockableEntitlementsDataAssetLocation = 0x298; // FStringAssetReference
		constexpr auto DebugWieldablesDataAsset = 0x2a8; // FStringAssetReference
		constexpr auto StrongholdKeyDataAsset = 0x2b8; // FStringAssetReference
		constexpr auto MigrationUIContentsFileLocation = 0x2c8; // FStringAssetReference
		constexpr auto ArenaMigrationUIContentsFileLocation = 0x2d8; // FStringAssetReference
		constexpr auto InventoryRemappingAssetLocation = 0x2e8; // FStringAssetReference
		constexpr auto AllianceSettingsAssetLocation = 0x2f8; // FStringAssetReference
		constexpr auto ReapersMarkSettingsAssetLocation = 0x308; // FStringAssetReference
		constexpr auto EmissaryLevelSettingsAssetLocation = 0x318; // FStringAssetReference
		constexpr auto EmissaryRewardSettingsAssetLocation = 0x328; // FStringAssetReference
		constexpr auto FlamesOfFateSettingsAssetLocation = 0x338; // FStringAssetReference
		constexpr auto DiggingConfigResolverAssetLocation = 0x348; // FStringAssetReference
		constexpr auto ContestSettingsDataAsset = 0x358; // FStringAssetReference
		constexpr auto ContestEventsDataAsset = 0x368; // FStringAssetReference
		constexpr auto CrewNotificationToastSettings = 0x378; // FStringAssetReference
		constexpr auto FireSettingsDataAsset = 0x388; // FStringAssetReference
		constexpr auto InventoryDefaultItemURL = 0x398; // FString
		constexpr auto CheatFlyingSpeedSlow = 0x3a8; // float
		constexpr auto CheatFlyingSpeedDefault = 0x3ac; // float
		constexpr auto CheatFlyingSpeedFast = 0x3b0; // float
		constexpr auto CheatFlyingAcceleration = 0x3b4; // float
		constexpr auto EncounterServiceParams = 0x3b8; // FEncounterServiceParams
		constexpr auto WindParams = 0x3d8; // FWindServiceParams
		constexpr auto CrewServiceParams = 0x400; // FCrewServiceParams
		constexpr auto SharedShovelParams = 0x460; // FSharedShovelParams
		constexpr auto MermaidServiceParams = 0x4c0; // FMermaidServiceParams
		constexpr auto ContestSpecificMermaidServiceParamsToggleLocked = 0x548; // FMermaidServiceParams
		constexpr auto MakeFriendsEmoteParams = 0x5d0; // FMakeFriendsEmoteParams
		constexpr auto MermaidRespawnConfiguration = 0x5e8; // FMermaidRespawnConfig
		constexpr auto CharacterSocketCollisionServiceParams = 0x610; // FCharacterSocketCollisionServiceParams
		constexpr auto AAthenaAICharacterParams = 0x618; // FAthenaAICharacterParams
		constexpr auto AssumedMaxFPSOnServer = 0x62c; // int32_t
		constexpr auto WwiseObjectUnderwaterStateSwitchGroup = 0x630; // FName
		constexpr auto WwiseObjectUnderwaterSwitchDefaultState = 0x638; // FName
		constexpr auto WwiseObjectUnderwaterSwitchUnderwaterState = 0x640; // FName
		constexpr auto StormQuantisePrecision = 0x648; // float
		constexpr auto ShipLiveryCatalogueDataAssetLocation = 0x650; // FStringAssetReference
		constexpr auto ShipPartsCatalogueDataAssetLocation = 0x660; // FStringAssetReference
		constexpr auto RowboatSpawnParamsDataAssetLocation = 0x670; // FStringAssetReference
		constexpr auto KrakenTentacleClassLocation = 0x680; // FStringAssetReference
		constexpr auto KrakenShipTentacleClassLocation = 0x690; // FStringAssetReference
		constexpr auto KrakenServiceParamsDataAssetLocation = 0x6a0; // FStringAssetReference
		constexpr auto AmbientTinySharkServiceParamsDataAssetLocation = 0x6b0; // FStringAssetReference
		constexpr auto SunkenIslandSettings = 0x6c0; // FStringAssetReference
		constexpr auto CompanyDataListAssetLocation = 0x6d0; // FStringAssetReference
		constexpr auto CoherentUIGTAssetRootLocation = 0x6e0; // FStringAssetReference
		constexpr auto CoherentUIGTPersistentDataAssetLocation = 0x6f0; // FStringAssetReference
		constexpr auto CoherentContentEngagementMessageLocation = 0x700; // FStringAssetReference
		constexpr auto NestedWorldRootDataAssetLocation = 0x710; // FStringAssetReference
		constexpr auto AshenLordEncounterServiceParams = 0x720; // FStringAssetReference
		constexpr auto PortalServiceParams = 0x730; // FStringAssetReference
		constexpr auto AggressiveGhostShipsEncounterServiceParams = 0x740; // FStringAssetReference
		constexpr auto RequiredLoadoutCategories = 0x750; // TArray<UClass*>
		constexpr auto CarouselGenerationParams = 0x760; // FStringAssetReference
		constexpr auto SinkingShipDestructionDistanceThreshold = 0x770; // float
		constexpr auto DefaultItemsToBeDisplayedOnInventoryPanel = 0x778; // FStringAssetReference
		constexpr auto DefaultFogBank = 0x788; // AFogBank*
		constexpr auto DefaultFogBankManager = 0x790; // AFogBankManager*
		constexpr auto TunnelsOfTheDamnedServiceParamsDataAssetLocation = 0x798; // FStringAssetReference
		constexpr auto PlayerModerationParams = 0x7a8; // FPlayerModerationParams
		constexpr auto SpireServiceParamsDataAssetLocation = 0x7b8; // FStringAssetReference
	}

	namespace n_USetMechanismActionCutsceneActorStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // USetMechanismActionCutsceneActorStepDesc*
	}

	namespace n_ATreasureChest { // : ALargeSkeletalMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UIndividualReplicationChannelComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USpawnItemStepDesc { // : UTaleQuestStepDesc
		constexpr auto Item = 0x80; // UItemDesc*
		constexpr auto TrackItem = 0x88; // bool
		constexpr auto MarkItemAsCritical = 0x89; // bool
		constexpr auto CriticalActorLostMessage = 0x90; // FText
		constexpr auto SocketName = 0xc8; // FName
		constexpr auto LocatorVar = 0xd0; // FQuestVariableActor
		constexpr auto ActorVar = 0xe0; // FQuestVariableActor
	}

	namespace n_UMaterialExpressionLightmassReplace { // : UMaterialExpression
		constexpr auto Realtime = 0x70; // FExpressionInput
		constexpr auto Lightmass = 0xa8; // FExpressionInput
	}

	namespace n_UCanvasPanelSlot { // : UPanelSlot
		constexpr auto LayoutData = 0x38; // FAnchorData
		constexpr auto bAutoSize = 0x60; // bool
		constexpr auto ZOrder = 0x64; // int32_t
	}

	namespace n_USpawnableItemsDataAsset { // : UDataAsset
		constexpr auto Categories = 0x28; // TArray<FSpawnableItemCategory>
	}

	namespace n_APressurePlateMechanismProgressTrigger { // : APressurePlateMechanismTriggerBase
		constexpr auto ProgressionAmount = 0x440; // float
	}

	namespace n_UDeliverableRedirectionCompanyContextHandler { // : UDeliverableRedirectionContextHandlerBase
		constexpr auto ContextCanContainMoreCompanies = 0x30; // bool
		constexpr auto TargetCompanies = 0x38; // TArray<UCompany*>
	}

	namespace n_ARigidBodyBase { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UBrushBuilder { // : UObject
		constexpr auto BitmapFilename = 0x28; // FString
		constexpr auto ToolTip = 0x38; // FString
		constexpr auto NotifyBadParams = 0x48; // char : 1
		constexpr auto Vertices = 0x50; // TArray<FVector>
		constexpr auto Polys = 0x60; // TArray<FBuilderPoly>
		constexpr auto Layer = 0x70; // FName
		constexpr auto MergeCoplanars = 0x78; // char : 1
	}

	namespace n_ABountyMap { // : ATreasureMap
		constexpr auto CanvasWidth = 0x7d8; // int32_t
		constexpr auto CanvasHeight = 0x7dc; // int32_t
		constexpr auto Font = 0x7e0; // UFont*
		constexpr auto FontScale = 0x7e8; // float
		constexpr auto FontLineSpacingScale = 0x7ec; // float
		constexpr auto BountyMapLayout = 0x7f8; // UBountyMapLayout*
		constexpr auto Contents = 0x800; // FBountyMapContents
		constexpr auto MapInventoryTexturePath = 0x868; // FStringAssetReference
		constexpr auto Rotation = 0x878; // float
	}

	namespace n_UBTDecorator_IsActorInExpectedActionState { // : UBTDecorator_BaseConditional
		constexpr auto ExpectedActionState = 0x68; // UActionStateId*
		constexpr auto ExpectedTrackId = 0x70; // EActionStateMachineTrackId
	}

	namespace n_UBTTask_SailShipForward { // : UBTTask_BlackboardBase
		constexpr auto ShouldSailForwardKey = 0x88; // FBlackboardKeySelector
		constexpr auto TimeToSailForwardKey = 0xb0; // FBlackboardKeySelector
		constexpr auto IsCaptainPresentKey = 0xd8; // FBlackboardKeySelector
	}

	namespace n_UMovieSceneSequencePlayer { // : UObject
		constexpr auto OnPlay = 0x390; // FScriptMulticastDelegate
		constexpr auto OnStop = 0x3a0; // FScriptMulticastDelegate
		constexpr auto OnPause = 0x3b0; // FScriptMulticastDelegate
		constexpr auto bIsPlaying = 0x3c0; // char : 1
		constexpr auto bReversePlayback = 0x3c0; // char : 1
		constexpr auto bPendingFirstUpdate = 0x3c0; // char : 1
		constexpr auto Sequence = 0x3c8; // UMovieSceneSequence*
		constexpr auto TimeCursorPosition = 0x3d0; // float
		constexpr auto StartTime = 0x3d4; // float
		constexpr auto EndTime = 0x3d8; // float
		constexpr auto CurrentNumLoops = 0x3dc; // int32_t
		constexpr auto PlaybackSettings = 0x3f0; // FMovieSceneSequencePlaybackSettings
	}

	namespace n_UTestPlayerPermissionsComponent { // : UPlayerPermissionsComponent
		constexpr auto AllowDebugMenuAccess = 0xc8; // bool
		constexpr auto AllowDebugMenuButtonShortcutsAccess = 0xc9; // bool
		constexpr auto AllowExecuteOnServer = 0xca; // bool
		constexpr auto DisableWatermark = 0xcb; // bool
	}

	namespace n_UBuoyantObjectSpawnParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FBuoyantObjectSpawnParams
	}

	namespace n_UInterpData { // : UObject
		constexpr auto InterpLength = 0x28; // float
		constexpr auto PathBuildTime = 0x2c; // float
		constexpr auto InterpGroups = 0x30; // TArray<UInterpGroup*>
		constexpr auto CurveEdSetup = 0x40; // UInterpCurveEdSetup*
		constexpr auto EdSectionStart = 0x48; // float
		constexpr auto EdSectionEnd = 0x4c; // float
		constexpr auto bShouldBakeAndPrune = 0x50; // char : 1
		constexpr auto CachedDirectorGroup = 0x58; // UInterpGroupDirector*
		constexpr auto AllEventNames = 0x60; // TArray<FName>
	}

	namespace n_UEnvQueryGenerator_Sphere { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto Radiuses = 0x90; // TArray<FAIDataProviderFloatValue>
		constexpr auto NumberOfVerticalCircles = 0xa0; // FAIDataProviderIntValue
		constexpr auto NumberOfHorizontalCircles = 0xd0; // FAIDataProviderIntValue
		constexpr auto DefineFirstPointDirection = 0x100; // char : 1
		constexpr auto FirstPointDirection = 0x108; // FEnvDirection
		constexpr auto Centre = 0x128; // UEnvQueryContext*
		constexpr auto ZOffsetFromCentre = 0x130; // FAIDataProviderFloatValue
	}

	namespace n_UBTTask_EatFood { // : UBTTaskNode
		constexpr auto FeedingDataAsset = 0x60; // UPetFeedingDataAsset*
	}

	namespace n_ACollectorsChestWieldableItem { // : ALargeSkeletalMeshWieldableItem
		constexpr auto OpenableItemComponent = 0x7a0; // UOpenableItemComponent*
		constexpr auto Slots = 0x7a8; // TArray<UCollectorsChestItemSlotInteractable*>
	}

	namespace n_UAIProjectileWeaponFiringIntentionComponent { // : UActorComponent
		constexpr auto PawnOwner = 0xd0; // APawn*
		constexpr auto AIController = 0xd8; // AAthenaAIControllerBase*
		constexpr auto DefaultHitChance = 0xfc; // float
	}

	namespace n_ARudder { // : AActor
		constexpr auto AngleBlend = 0x3d8; // float
		constexpr auto MaxAngle = 0x3dc; // float
		constexpr auto PositionForRudderDynamicsRelativeToRudderActor = 0x3e0; // FVector
		constexpr auto RelativeRightShipDir = 0x3ec; // FVector
		constexpr auto RudderDynamicsDesc = 0x3f8; // UBaseRudderDynamicsDesc*
		constexpr auto ServerAngleRatio = 0x418; // float
	}

	namespace n_UKnockbackColliderComponent { // : UBoxComponent
		constexpr auto SolidCollisionProfile = 0x5b8; // FCollisionProfileName
		constexpr auto KnockbackTraceProfile = 0x5c0; // FCollisionProfileName
		constexpr auto KnockbackType = 0x5c8; // EKnockbackType
		constexpr auto KnockbackParams = 0x5cc; // FKnockBackInfo
		constexpr auto ActorToTarget = 0x61c; // TWeakObjectPtr<AActor>
		constexpr auto KnockbackDamageType = 0x628; // UDamagerType*
		constexpr auto KnockbackInterval = 0x630; // float
		constexpr auto SolidState = 0x638; // ESolidState
	}

	namespace n_UVoyageModuleSettings { // : UDeveloperSettings
		constexpr auto QuestsConfigAsset = 0x38; // FStringAssetReference
		constexpr auto EmergentVoyageIconInfos = 0x48; // TArray<FEmergentVoyageSourceIconInfo>
		constexpr auto NumVoyagesInAntiRepetitionHistory = 0x58; // int32_t
	}

	namespace n_AAshenLordEncounterService { // : AGameEventService
		constexpr auto Desc = 0x4c0; // FAshenLordEncounterServiceDesc
		constexpr auto Params = 0x4d0; // UAshenLordEncounterServiceParams*
	}

	namespace n_UContestVoyagesSelectorDataAsset { // : UDataAsset
		constexpr auto DefaultContestVoyages = 0x28; // UContestVoyagesDataAsset*
		constexpr auto FeatureToggledContestVoyages = 0x30; // TArray<FContestVoyagesSelectorUnit>
	}

	namespace n_AContestZone { // : AActor
		constexpr auto VendorShipsToSpawnInContest = 0x3e0; // TArray<FContestZoneVendorShipData>
		constexpr auto ContestZoneBoundaryComponent = 0x3f0; // USphereComponent*
		constexpr auto ContestZoneName = 0x3f8; // FName
		constexpr auto ContestZoneRadius = 0x400; // float
		constexpr auto RespawnSafeZoneRadius = 0x404; // float
		constexpr auto RespawnDistanceThreshold = 0x408; // float
		constexpr auto IsFullyActivated = 0x40c; // bool
		constexpr auto ContestZoneObjectMessagingDispatcher = 0x410; // FObjectMessagingDispatcher
		constexpr auto InitialSpawnLocations = 0x4b0; // TArray<FInitialShipSpawnLocations>
		constexpr auto IslandsWithinContestZone = 0x4c0; // TArray<AIslandData*>
		constexpr auto RespawnPointAsset = 0x4d0; // FStringAssetReference
		constexpr auto ContestSafeRegion = 0x4e0; // AContestSafeRegion*
		constexpr auto ContestZoneRadiusSquared = 0x4e8; // float
		constexpr auto ContestZoneDiameter = 0x4ec; // float
		constexpr auto ContestZoneArea = 0x4f0; // float
		constexpr auto VendorShips = 0x4f8; // TArray<AArenaVendorShip*>
		constexpr auto RespawnLocations = 0x508; // TArray<FTransform>
		constexpr auto PooledRespawnLocation = 0x518; // AShipSpawnLocation*
		constexpr auto ShipSpawnLocationsForContest = 0x520; // TArray<AShipSpawnLocation*>
		constexpr auto NumberOfSpawnPointsToGenerate = 0x5b8; // int32_t
		constexpr auto MinimumDistanceFromBounds = 0x5bc; // float
		constexpr auto ContestZoneRespawnLocationOrientation = 0x5c0; // ERespawnPointOrientation
		constexpr auto RadiusForStaticObjectCheck = 0x5c4; // float
		constexpr auto CalmWaters = 0x5e0; // TArray<UCalmWaterComponent*>
	}

	namespace n_AInterruptibleProjectileActionItem { // : ADoubleActionItem
		constexpr auto OnInterruptionStatus = 0x950; // FStatus
		constexpr auto IsOneShotStatus = 0x968; // bool
		constexpr auto StatusDuration = 0x96c; // float
	}

	namespace n_UClothingChestViewModelComponent { // : UPossessionsChestViewModel
		constexpr auto RandomFilters = 0x170; // TArray<FClothingChestRandomFilter>
		constexpr auto RandomiseIcon = 0x180; // FStringAssetReference
		constexpr auto ClearIcon = 0x190; // FStringAssetReference
		constexpr auto WithRandomiseButtons = 0x1a0; // bool
		constexpr auto WithClearButtons = 0x1a1; // bool
		constexpr auto CategoriesWithClearButtonDisabled = 0x1a8; // TArray<UClothingCategory*>
		constexpr auto CategoriesWithRandomiseButtonDisabled = 0x1b8; // TArray<UClothingCategory*>
		constexpr auto Categories = 0x1d8; // TArray<UClothingCategory*>
		constexpr auto IncludeAllCategory = 0x1e8; // bool
	}

	namespace n_URewardDistributionModelDataAsset { // : UDataAsset
		constexpr auto RewardDistributionModelData = 0x28; // FRewardDistributionModelData
	}

	namespace n_ULookAtOffsetComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UBTDecorator_TimeLimit { // : UBTDecorator
		constexpr auto TimeLimit = 0x68; // float
	}

	namespace n_AContestMap { // : ATreasureMap
		constexpr auto CanvasWidth = 0x7d8; // int32_t
		constexpr auto CanvasHeight = 0x7dc; // int32_t
		constexpr auto Font = 0x7e0; // UFont*
		constexpr auto FontScale = 0x7e8; // float
		constexpr auto FontLineSpacingScale = 0x7ec; // float
		constexpr auto UnderlineIcon = 0x7f0; // UTexture*
		constexpr auto ContestMapLayout = 0x800; // UContestMapLayout*
		constexpr auto ScoreRewardDataAsset = 0x808; // UScoreRewardDataAsset*
		constexpr auto Contents = 0x810; // FContestMapContents
		constexpr auto PreviousContents = 0x850; // FContestMapContents
		constexpr auto CachedLeaderboard = 0x950; // TArray<FCrewScore>
		constexpr auto OwnerCrewId = 0x998; // FGuid
		constexpr auto ScoreSystem = 0x9b8; // UContestScoreSystem*
	}

	namespace n_ALockedCollectorsChestItemInfo { // : ACollectorsChestItemInfo
		constexpr auto EmptyContainerRewardId = 0x7b0; // FRewardId
	}

	namespace n_ASovereign { // : ACompanyShopkeeper
		constexpr auto CompanyNPCComponent = 0x608; // UCompanyNPCComponent*
	}

	namespace n_UFireworkFeedbackDataAsset { // : UDataAsset
		constexpr auto MaxExplosionRadius = 0x28; // float
		constexpr auto CameraShake = 0x30; // UCameraShake*
		constexpr auto CameraShakeInnerRadiusMultiplier = 0x38; // float
		constexpr auto ExplosionRumble = 0x40; // UForceFeedbackEffect*
	}

	namespace n_UCannonEnchantmentDescAsset { // : UShipPartDescAsset
		constexpr auto CannonEnchantmentDesc = 0x28; // FCannonEnchantmentDesc
	}

	namespace n_UKnockbackAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto ExplosionInfo = 0xc8; // FExplosionInfo
	}

	namespace n_UTaleQuestGenericBannerStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ADeepSeaRegionService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_AServerPerformanceReplicator { // : AActor
		constexpr auto ServerAverageFPS = 0x3d0; // float
		constexpr auto ServerAverageMS = 0x3d4; // float
	}

	namespace n_AWaterBarrel { // : AControllableObject
		constexpr auto WaterBarrelSfxPool = 0x538; // UWwiseObjectPoolWrapper*
		constexpr auto WaterBarrelStartLeakingSfx = 0x540; // UWwiseEvent*
		constexpr auto WaterBarrelStopLeakingSfx = 0x548; // UWwiseEvent*
		constexpr auto WaterBarrelStartPumpingSfx = 0x550; // UWwiseEvent*
		constexpr auto WaterBarrelStopPumpingSfx = 0x558; // UWwiseEvent*
		constexpr auto WaterBarrelLetStartPumpingSfx = 0x560; // UWwiseEvent*
		constexpr auto WaterBarrelLetStopPumpingSfx = 0x568; // UWwiseEvent*
		constexpr auto MinWaterHeight = 0x570; // FVector
		constexpr auto MaxWaterHeight = 0x57c; // FVector
		constexpr auto BarrelMesh = 0x5a0; // UStaticMeshComponent*
		constexpr auto HandleMesh = 0x5a8; // UStaticMeshComponent*
		constexpr auto InteractableComponent = 0x5b0; // UInteractableComponent*
		constexpr auto LiquidContainerComponent = 0x5b8; // ULiquidContainerComponent*
		constexpr auto MaxCapacity = 0x5c0; // float
		constexpr auto CurrentCapacity = 0x5c4; // float
		constexpr auto MaxLiquidCollectionAmount = 0x5c8; // float
		constexpr auto PumpResetTime = 0x5cc; // float
		constexpr auto WaterIncreasePerPump = 0x5d0; // float
		constexpr auto HandleRotationCurve = 0x5d8; // UCurveFloat*
		constexpr auto WaterFlowCurve = 0x5e0; // UCurveFloat*
		constexpr auto WaterIntensityIncreaseSpeed = 0x5e8; // float
		constexpr auto WaterIntensityDecreaseSpeed = 0x5ec; // float
		constexpr auto TargetWaterIntensity = 0x5f0; // float
		constexpr auto MinPumpRotation = 0x5f8; // float
		constexpr auto MaxPumpRotation = 0x5fc; // float
		constexpr auto IsPumpingWater = 0x600; // bool
		constexpr auto DockingSocketName = 0x618; // FName
		constexpr auto LookAtPosLocalSpace = 0x620; // FVector
		constexpr auto WaterSurfaceVFXTemplate = 0x630; // UObject*
		constexpr auto WaterPumpVFXTemplate = 0x638; // UObject*
		constexpr auto WaterPumpParticleComponent = 0x640; // UParticleSystemComponent*
		constexpr auto WaterSurfaceParticleComponent = 0x648; // UParticleSystemComponent*
		constexpr auto HandleFeedbackLevels = 0x650; // TArray<FWaterBarrelFeedbackLevel>
	}

	namespace n_URadialManagerComponent { // : UActorComponent
		constexpr auto RadialMappings = 0x220; // TArray<FRadialRuleInstanceMapping>
		constexpr auto RadialSettings = 0x230; // URadialSettingsAsset*
		constexpr auto InputHandler = 0x238; // URadialManagerCompositeInputHandler*
		constexpr auto CurrentClosingId = 0x240; // UNotificationInputId*
		constexpr auto DockedObject = 0x248; // UObject*
		constexpr auto ManagerInputBinder = 0x250; // URadialManagerInputBinder*
		constexpr auto CachedInputSettings = 0x258; // UAthenaInputSettings*
		constexpr auto LastInputId = 0x2c8; // UNotificationInputId*
	}

	namespace n_ATestDockableObject { // : AActor
		constexpr auto SceneComponent = 0x3f8; // USceneComponent*
		constexpr auto CurrentInteractionState = 0x4b9; // EInteractableState
		constexpr auto CanSetInteractionState = 0x4ba; // bool
	}

	namespace n_UPlaySequencerAnimationOnCutsceneActorStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UPlaySequencerAnimationOnCutsceneActorStepDesc*
		constexpr auto SequencerCutSceneActor = 0x98; // ASequencerCutSceneActor*
		constexpr auto PossessableSequences = 0xa0; // TArray<FPossessableSequence>
	}

	namespace n_USpawnActorAtPointStepDesc { // : USpawnActorStepDescBase
		constexpr auto PointVar = 0x100; // FQuestVariableTransform
	}

	namespace n_UPlayNpcAnimationResourceStepDesc { // : UTaleQuestStepDesc
		constexpr auto TargetNpc = 0x80; // FQuestVariableActor
		constexpr auto PlaceableReaction = 0x90; // FQuestVariableActor
		constexpr auto PlayNpcAnimationResource = 0xa0; // UPlayNpcAnimationResource*
	}

	namespace n_UBlockInteractEffect { // : UAmmoBaseEffect
		constexpr auto OwningActor = 0x28; // AActor*
		constexpr auto TargetInteractableState = 0x30; // EInteractableState
	}

	namespace n_UWaterSlideParamsDataAsset { // : UDataAsset
		constexpr auto WaterSlideParams = 0x28; // FWaterSlideParams
	}

	namespace n_UMergedStaticMeshComponent { // : UStaticMeshComponent
		constexpr auto bDisplayMergedInEditor = 0x5f0; // bool
		constexpr auto LODScreenSizes = 0x5f8; // TArray<float>
		constexpr auto LODForCollision = 0x608; // int32_t
		constexpr auto bMergeVertexColours = 0x60c; // bool
	}

	namespace n_AConstellation { // : AActor
		constexpr auto ShaderFadeIn = 0x3dc; // float
		constexpr auto ShaderFadeOut = 0x3e0; // float
		constexpr auto ConstellationEffectSpeed = 0x3e4; // float
		constexpr auto InitialRevealAudioThreshold = 0x3e8; // float
		constexpr auto FullyRevealedAudioThreshold = 0x3ec; // float
		constexpr auto ConstellationMesh = 0x3f0; // UStaticMeshComponent*
		constexpr auto StartBespokeSFX = 0x3f8; // UWwiseEvent*
		constexpr auto StopBespokeSFX = 0x400; // UWwiseEvent*
		constexpr auto StartInitialRevealSFX = 0x410; // UWwiseEvent*
		constexpr auto StopInitialRevealSFX = 0x418; // UWwiseEvent*
		constexpr auto StartFullyRevealedSFX = 0x428; // UWwiseEvent*
		constexpr auto StopFullyRevealedSFX = 0x430; // UWwiseEvent*
		constexpr auto StartInitialRevealMusic = 0x440; // UWwiseEvent*
		constexpr auto StopInitialRevealMusic = 0x448; // UWwiseEvent*
		constexpr auto DynamicMaterials = 0x458; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UStopEmissaryVoyageInlineVoteValidator { // : UEmissaryVoyageVoteValidatorBase
		constexpr auto TargetCompany = 0x30; // UCompany*
		constexpr auto RequiredEntitlement = 0x38; // UEntitlementDesc*
		constexpr auto Consumer = 0xa0; // UEmissaryVoyageInlineVoteConsumerBase*
	}

	namespace n_ANonStorableItemInfo { // : AItemInfo
		constexpr auto CanBeStoredInInventory = 0x3f0; // bool
		constexpr auto OnItemPickedUpDelegate = 0x3f8; // FScriptMulticastDelegate
		constexpr auto OnItemDroppedDeletage = 0x408; // FScriptMulticastDelegate
		constexpr auto WieldableType = 0x418; // AWieldableItem*
		constexpr auto ProxyType = 0x420; // AActor*
		constexpr auto WieldableItemPersistenceCooldownComponent = 0x428; // UWieldableItemPersistentCooldownComponent*
		constexpr auto Desc = 0x430; // UItemDesc*
		constexpr auto CurrentRepresentation = 0x438; // EItemRepresentation
		constexpr auto CurrentRepresentationInstance = 0x440; // AActor*
		constexpr auto CurrentOwner = 0x448; // AActor*
		constexpr auto TutorialOwner = 0x450; // AActor*
		constexpr auto DoNotConsiderForMigrationGather = 0x4f9; // bool
	}

	namespace n_UAbilityTask_WaitCancel { // : UAbilityTask
		constexpr auto OnCancel = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UParticleModuleAccelerationOverLifetime { // : UParticleModuleAccelerationBase
		constexpr auto AccelOverLife = 0x58; // FRawDistributionVector
	}

	namespace n_ARareHUD { // : AHUD
		constexpr auto WhiteColor = 0x3d0; // FColor
		constexpr auto GreenColor = 0x3d4; // FColor
		constexpr auto RedColor = 0x3d8; // FColor
		constexpr auto PlayerOwner = 0x3e0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x3e8; // char : 1
		constexpr auto bShowHUD = 0x3e8; // char : 1
		constexpr auto bShowDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowHitBoxDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowOverlays = 0x3e8; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x3e8; // char : 1
		constexpr auto PostRenderedActors = 0x3f0; // TArray<AActor*>
		constexpr auto LastHUDRenderTime = 0x400; // float
		constexpr auto RenderDelta = 0x404; // float
		constexpr auto DebugDisplay = 0x408; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x418; // TArray<FName>
		constexpr auto Canvas = 0x428; // UCanvas*
		constexpr auto DebugCanvas = 0x430; // UCanvas*
		constexpr auto DebugTextList = 0x438; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x448; // AActor*
		constexpr auto ShowDebugTargetActor = 0x450; // AActor*
	}

	namespace n_UEnvQueryTest_InShipwreckZone { // : UEnvQueryTest
		constexpr auto Radius = 0x170; // float
	}

	namespace n_UBTTask_SpawnActorAndStore { // : UBTTaskNode
		constexpr auto BlackBoardKeyNameToStoreActor = 0x60; // FBlackboardKeySelector
		constexpr auto ActorToSpawn = 0x88; // AActor*
		constexpr auto SpawnOffset = 0x90; // FVector
	}

	namespace n_UBTDecorator_MultipleRandomDiceRolls { // : UBTDecorator
		constexpr auto ChanceKeyPairs = 0x68; // TArray<FChanceAndBlackboardKeyPair>
	}

	namespace n_UComboBoxWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto ComboBoxStyle = 0x30; // FComboBoxStyle
	}

	namespace n_AAthenaTavernPlayerCharacter { // : AAthenaPlayerCharacter
		constexpr auto StreamingLocationComponent = 0x1ac0; // UStreamingLocationComponent*
		constexpr auto ArenaTavernPetMovementData = 0x1ac8; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto PlayerController = 0x1b00; // AAthenaPlayerController*
		constexpr auto VoteForRivalsHasPassed = 0x1b28; // bool
	}

	namespace n_ADebugTreasureLocation { // : AActor
		constexpr auto DigRadius = 0x3d0; // float
		constexpr auto Pos = 0x3d4; // FVector
	}

	namespace n_UNavMeshRenderingComponent { // : UPrimitiveComponent
		constexpr auto MinDrawDistance = 0x2b8; // float
		constexpr auto LDMaxDrawDistance = 0x2c0; // float
		constexpr auto CachedMaxDrawDistance = 0x2c4; // float
		constexpr auto DepthPriorityGroup = 0x2c8; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x2c9; // ESceneDepthPriorityGroup
		constexpr auto bAlwaysCreatePhysicsState = 0x2cc; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x2cc; // char : 1
		constexpr auto bMultiBodyOverlap = 0x2cc; // char : 1
		constexpr auto bCheckAsyncSceneOnMove = 0x2cc; // char : 1
		constexpr auto bTraceComplexOnMove = 0x2cc; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x2cc; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x2cc; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x2cc; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x2cd; // char : 1
		constexpr auto bRenderInMainPass = 0x2cd; // char : 1
		constexpr auto bRenderInCustomPrePass = 0x2cd; // char : 1
		constexpr auto bReflected = 0x2cd; // char : 1
		constexpr auto bReflectedOnLowQuality = 0x2cd; // char : 1
		constexpr auto bFFTWaterMask = 0x2cd; // char : 1
		constexpr auto bVolumeFogMask = 0x2cd; // char : 1
		constexpr auto bAffectsFlatWater = 0x2ce; // char : 1
		constexpr auto bGPUParticlesKillPlane = 0x2ce; // char : 1
		constexpr auto bDontCull = 0x2ce; // char : 1
		constexpr auto bDontSizeOnScreenCull = 0x2ce; // char : 1
		constexpr auto OverriddenShadowMinTexelSize = 0x2d0; // float
		constexpr auto bOverrideShadowMinSizeCulling = 0x2d4; // bool
		constexpr auto bOverrideShadowCascadesExclusion = 0x2d5; // bool
		constexpr auto ExcludedShadowCascades = 0x2d6; // EExcludeFromCascades
		constexpr auto bReceivesDecals = 0x2d8; // char : 1
		constexpr auto bOwnerNoSee = 0x2d8; // char : 1
		constexpr auto bOnlyOwnerSee = 0x2d8; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x2d8; // char : 1
		constexpr auto bIsACloud = 0x2d8; // char : 1
		constexpr auto bUseAsOccluder = 0x2d8; // char : 1
		constexpr auto bSelectable = 0x2d8; // char : 1
		constexpr auto bForceMipStreaming = 0x2d8; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x2d9; // char : 1
		constexpr auto CastShadow = 0x2d9; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2d9; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x2d9; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x2d9; // char : 1
		constexpr auto bCastDynamicShadow = 0x2d9; // char : 1
		constexpr auto bCastStaticShadow = 0x2d9; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x2d9; // char : 1
		constexpr auto bSelfShadowOnly = 0x2da; // char : 1
		constexpr auto bCastFarShadow = 0x2da; // char : 1
		constexpr auto bCastInsetShadow = 0x2da; // char : 1
		constexpr auto bCastCinematicShadow = 0x2da; // char : 1
		constexpr auto bCastHiddenShadow = 0x2da; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x2da; // char : 1
		constexpr auto bCastShadowOnLowQuality = 0x2da; // char : 1
		constexpr auto bLightAsIfStatic = 0x2da; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x2db; // char : 1
		constexpr auto IndirectLightingCacheQuality = 0x2dc; // EIndirectLightingCacheQuality
		constexpr auto bHasCachedStaticLighting = 0x2dd; // bool
		constexpr auto bStaticLightingBuildEnqueued = 0x2de; // bool
		constexpr auto bIgnoreRadialImpulse = 0x2e0; // char : 1
		constexpr auto bIgnoreRadialForce = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x2e0; // char : 1
		constexpr auto bUseEditorCompositing = 0x2e0; // char : 1
		constexpr auto bRenderCustomDepth = 0x2e0; // char : 1
		constexpr auto bAllowVelocityInMaterial = 0x2e0; // char : 1
		constexpr auto CustomDepthStencilValue = 0x2e4; // int32_t
		constexpr auto TranslucencySortPriority = 0x2e8; // int32_t
		constexpr auto VisibilityId = 0x2ec; // int32_t
		constexpr auto LpvBiasMultiplier = 0x2f4; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x2f8; // float
		constexpr auto LpvIntensityMultiplier = 0x2fc; // float
		constexpr auto CustomPrimitiveData = 0x300; // FCustomPrimitiveData
		constexpr auto BodyInstance = 0x310; // FBodyInstance
		constexpr auto bAffectRain = 0x490; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x490; // char : 1
		constexpr auto bSkipRenderingInOuterLPVCascades = 0x490; // char : 1
		constexpr auto bEnableMergeCollisionComponents = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerUnderwater = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerUnderwater = 0x491; // char : 1
		constexpr auto bCanRenderAboveAndBelowWaterAtSameTime = 0x491; // char : 1
		constexpr auto BoundsScale = 0x498; // float
		constexpr auto OcclusionBoundsScale = 0x49c; // float
		constexpr auto LastRenderTime = 0x4a0; // float
		constexpr auto bGPUVisibility = 0x4a4; // bool
		constexpr auto bHasCustomNavigableGeometry = 0x4a5; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x4a6; // ECanBeCharacterBase
		constexpr auto OnComponentHit = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnComponentBeginOverlap = 0x4f1; // FScriptMulticastDelegate
		constexpr auto OnComponentEndOverlap = 0x4f2; // FScriptMulticastDelegate
		constexpr auto OnComponentWake = 0x4f3; // FScriptMulticastDelegate
		constexpr auto OnComponentSleep = 0x4f4; // FScriptMulticastDelegate
		constexpr auto LODParentPrimitive = 0x528; // UPrimitiveComponent*
		constexpr auto PostPhysicsComponentTick = 0x530; // FPrimitiveComponentPostPhysicsTickFunction
		constexpr auto MergedCollisionComponentParent = 0x580; // UPrimitiveComponent*
	}

	namespace n_UNPCDialogOptionStorageContainerStore { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto FullText = 0xb8; // FText
		constexpr auto NoItemInInventoryText = 0xf0; // FText
	}

	namespace n_APuzzleStatueBase { // : AActor
		constexpr auto StaticMeshComponent = 0x3e0; // UStaticMeshComponent*
		constexpr auto InteractableComponent = 0x3e8; // UPuzzleStatueInteractableComponent*
		constexpr auto LockComponent = 0x3f0; // ULockComponent*
		constexpr auto IsStatueDisabled = 0x3f8; // bool
		constexpr auto IsStatueActive = 0x3f9; // bool
		constexpr auto MinDamageToTriggerStatue = 0x3fc; // float
		constexpr auto PuzzleStatueBaseAudioParams = 0x408; // UPuzzleStatueBaseAudioParamsDataAsset*
		constexpr auto PuzzleStatueVFXComponent = 0x410; // UPuzzleStatueVFXComponent*
		constexpr auto LockPositionParticleSystem = 0x418; // UParticleSystemComponent*
		constexpr auto OneShotLockPositionParticleSystem = 0x420; // UParticleSystemComponent*
	}

	namespace n_AServerIslandPerfTestGameState { // : AServiceProviderGameState
		constexpr auto ServiceCoordinator = 0x590; // FGameServiceCoordinator
		constexpr auto IslandService = 0x5b0; // APerfTestIslandService*
		constexpr auto WaterService = 0x5b8; // AFFTWaterService*
	}

	namespace n_UAlliancePennantAsset { // : UDataAsset
		constexpr auto AlliancePennants = 0x28; // TArray<FAlliancePennantData>
		constexpr auto ShipAlliancePennantPartNames = 0x38; // TArray<FShipSizePartCustomizationNameData>
		constexpr auto EmptyPennantDesc = 0x48; // FStringAssetReference
	}

	namespace n_UMaterialParameterCollectionInstance { // : UObject
		constexpr auto Collection = 0x30; // UMaterialParameterCollection*
		constexpr auto World = 0x38; // UWorld*
	}

	namespace n_APlaceableReaction { // : AActor
		constexpr auto ReactionEvents = 0x3d0; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto TriggerRadiusInMetres = 0x3e0; // float
		constexpr auto SceneComponent = 0x3e8; // USceneComponent*
		constexpr auto ReactionEventPlayer = 0x3f0; // ALandmarkReactionPlayer*
	}

	namespace n_UTaleQuestCargoRunContractsService { // : UTaleQuestService
		constexpr auto Contracts = 0x60; // TArray<UTaleQuestCargoRunContract*>
	}

	namespace n_UBlendSpaceBase { // : UAnimationAsset
		constexpr auto BlendParameters = 0x50; // FBlendParameter [0x3]
		constexpr auto InterpolationParam = 0xb0; // FInterpolationParameter [0x3]
		constexpr auto TargetWeightInterpolationSpeedPerSec = 0xc8; // float
		constexpr auto NotifyTriggerMode = 0xcc; // ENotifyTriggerMode
		constexpr auto bRotationBlendInMeshSpace = 0xcd; // bool
		constexpr auto NumOfDimension = 0xd0; // int32_t
		constexpr auto AnimLength = 0xd4; // float
		constexpr auto PerBoneBlend = 0xd8; // TArray<FPerBoneInterpolation>
		constexpr auto SampleData = 0xe8; // TArray<FBlendSample>
		constexpr auto GridSamples = 0xf8; // TArray<FEditorElement>
	}

	namespace n_UAbandonedNoteClueDestinationContainerComponent { // : UActorComponent
		constexpr auto CurrentClueDestination = 0xe8; // FClueDestinationChoice
		constexpr auto ClueTextIndexAssetMap = 0xf8; // UAbandonedNoteClueTextIndexAssetMap*
		constexpr auto CompositeFormatString = 0x100; // FString
		constexpr auto CurrentTitleText = 0x110; // FText
		constexpr auto ClueTextChoiceSource = 0x148; // UAbandonedNoteClueTextChoiceSource*
	}

	namespace n_UWatercraftSpawnData { // : UItemSpawnData
		constexpr auto WatercraftClass = 0x58; // UClass*
		constexpr auto MinDistanceToNearestWatercraftInMetres = 0x78; // float
	}

	namespace n_UParticleModuleAccelerationConstant { // : UParticleModuleAccelerationBase
		constexpr auto Acceleration = 0x58; // FVector
	}

	namespace n_AHullDamage2 { // : AActor
		constexpr auto ExternalScarDecalMinSize = 0x3e8; // float
		constexpr auto ExternalScarDecalMaxSize = 0x3ec; // float
		constexpr auto ExternalScarDecals = 0x3f0; // TArray<UTexture2D*>
		constexpr auto ExternalHoleDecalMinSize = 0x400; // float
		constexpr auto ExternalHoleDecalMaxSize = 0x404; // float
		constexpr auto ExternalHoleDecals = 0x408; // TArray<UMaterialInstance*>
		constexpr auto InternalHoleDecal = 0x418; // UMaterialInstance*
		constexpr auto DamageZoneDeckDistribution = 0x420; // FWeightedProbabilityRange
		constexpr auto InternalHitVfx = 0x440; // UParticleSystem*
		constexpr auto Strain_DamageSfx = 0x448; // UWwiseEvent*
		constexpr auto StrainDamagePool = 0x450; // UWwiseObjectPoolWrapper*
		constexpr auto InternalParamDefaults = 0x460; // FHullDamageParamSet
		constexpr auto InternalParamNamedSets = 0x4c0; // TArray<FHullDamageNamedParamSet>
		constexpr auto ImpactDecalComponent = 0x4d0; // UBakedDecalComponent*
		constexpr auto ShipDamageComponent = 0x4d8; // UShipDamageableComponent*
		constexpr auto TetherCustomisationComponent = 0x4e0; // UTetherCustomisationComponent*
		constexpr auto ShipLeakerComponent = 0x4e8; // UShipLeakerComponent*
		constexpr auto InstancedPlanksComponent = 0x4f0; // UMobileInstancedStaticMeshComponent*
		constexpr auto HiddenPlankLocation = 0x500; // FTransform
		constexpr auto Points = 0x530; // TArray<UHullDamagePointProxy*>
		constexpr auto HitsCircularBuffer = 0x5b8; // TArray<FHullDamageHit>
		constexpr auto RepairComponents = 0x5c8; // TArray<URepairableComponent*>
		constexpr auto ExternalHoleDecalComponents = 0x5d8; // TArray<UDecalComponent*>
		constexpr auto InternalHoleDecalComponents = 0x5e8; // TArray<UDecalComponent*>
		constexpr auto ServerHitCount = 0x660; // int32_t
	}

	namespace n_UGameplayTask_SpawnActor { // : UGameplayTask
		constexpr auto Success = 0x58; // FScriptMulticastDelegate
		constexpr auto DidNotSpawn = 0x68; // FScriptMulticastDelegate
		constexpr auto ClassToSpawn = 0x90; // AActor*
	}

	namespace n_APuzzleKeyedInstrument { // : ADockableKeyedInstrument
		constexpr auto DockedPlayerIsOnTale = 0x5e8; // bool
		constexpr auto SequenceComponent = 0x5f0; // USequenceComponent*
		constexpr auto SheetMusicMeshComponent = 0x5f8; // UStaticMeshComponent*
		constexpr auto ShouldShowSheetMusic = 0x600; // bool
		constexpr auto TaleNames = 0x608; // TArray<FText>
	}

	namespace n_AShipwright { // : ANPC
		constexpr auto InteractionSocket = 0x608; // FName
	}

	namespace n_USetEQSNamedContextStepDesc { // : UTaleQuestStepDesc
		constexpr auto Name = 0x80; // FName
		constexpr auto Value = 0x88; // FQuestVariableLinkEQSContext
	}

	namespace n_UPetCustomisationOverrideDataAsset { // : UDataAsset
		constexpr auto AnimationOverrideId = 0x28; // UAnimationDataStoreId*
		constexpr auto DebugMenuName = 0x30; // FString
	}

	namespace n_UAthenaStreamedLevelDataAsset { // : UDataAsset
		constexpr auto LevelsToLoad = 0x28; // TArray<FStringAssetReference>
		constexpr auto PackagePath = 0x38; // FString
		constexpr auto StreamingLevelFeature = 0x48; // FName
		constexpr auto RequiredPlayModes = 0x50; // TArray<EPlayMode>
	}

	namespace n_UPhrasesRadialComponent { // : UActorComponent
		constexpr auto DefaultPhrasesByPlayMode = 0xd0; // TArray<FPlayModePhrases>
		constexpr auto DefaultPhrasesRadialDataAsset = 0xe0; // UPhrasesRadialDataAsset*
		constexpr auto DockablePhrasesRadialDataAsset = 0xe8; // UPhrasesRadialDataAsset*
		constexpr auto WieldedItemPhrasesRadialDataAsset = 0xf0; // UPhrasesRadialDataAsset*
	}

	namespace n_UNamedSlot { // : UContentWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_UMaximumTrackedActorTypePopulationSpawnRequirement { // : USpawnRequirement
		constexpr auto TrackedActorType = 0x50; // ETrackedOwnerType
		constexpr auto MaximumPopulation = 0x54; // int32_t
	}

	namespace n_UBlackboardAIDataProvider { // : UAIDataProvider
		constexpr auto ParamName = 0x28; // FName
		constexpr auto FloatValue = 0x30; // float
		constexpr auto IntValue = 0x34; // int32_t
		constexpr auto BoolValue = 0x38; // bool
	}

	namespace n_UControllableIntentComponent { // : UIntentComponent
		constexpr auto AckToken = 0xd8; // char
		constexpr auto RequiresHandshake = 0xd9; // bool
		constexpr auto ServerIntent = 0xdc; // float
		constexpr auto LocalIntent = 0xe0; // float
	}

	namespace n_AClientOnlyTestActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_ULootForVoyageRankDescAsset { // : UDataAsset
		constexpr auto RankBasedLootDistribution = 0x28; // TArray<FLootToRangeDist>
	}

	namespace n_UMaterialExpressionSquareRoot { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
	}

	namespace n_AFlamesOfFateSettingsService { // : AActor
		constexpr auto Settings = 0x3d8; // UFlamesOfFateSettingsAsset*
	}

	namespace n_USpawnActorComponent { // : USceneComponent
		constexpr auto ChildActorClass = 0x2b0; // AActor*
		constexpr auto ChildActor = 0x2b8; // AActor*
	}

	namespace n_UFeedableComponent { // : UActorComponent
		constexpr auto FeedableType = 0xd0; // EFeedableType
		constexpr auto Feedable = 0xd1; // bool
	}

	namespace n_UCrewOnlyWwwiseAudioComponent { // : UActorComponent
		constexpr auto SfxPool = 0xc8; // UWwiseObjectPoolWrapper*
	}

	namespace n_UBTTask_PetWaitForAnimationRoamingState { // : UBTTaskNode
		constexpr auto SuccessRoamingStates = 0x60; // TArray<EAthenaAnimationPetRoamingState>
		constexpr auto FailRoamingStates = 0x70; // TArray<EAthenaAnimationPetRoamingState>
	}

	namespace n_UInterpTrackInstVisibility { // : UInterpTrackInst
		constexpr auto Action = 0x28; // EVisibilityTrackAction
		constexpr auto LastUpdatePosition = 0x2c; // float
	}

	namespace n_UPlayerInput { // : UObject
		constexpr auto DebugExecBindings = 0x120; // TArray<FKeyBind>
		constexpr auto GamepadInvertedAxes = 0x170; // TArray<FName>
		constexpr auto MouseInvertedAxes = 0x180; // TArray<FName>
		constexpr auto InvertedCombinedAxisY = 0x190; // TArray<FName>
		constexpr auto InvertedCombinedAxisX = 0x1a0; // TArray<FName>
	}

	namespace n_AGarbageGenerator { // : AActor
		constexpr auto GarbageGenerationRatePerFrame = 0x3d0; // int32_t
		constexpr auto SizeOfPersistentSet = 0x3d4; // int32_t
		constexpr auto StronglyReferencedObjects = 0x3d8; // TArray<UObject*>
	}

	namespace n_AXMarksTheSpotMap { // : ATreasureMap
		constexpr auto CanvasWidth = 0x7e0; // int32_t
		constexpr auto CanvasHeight = 0x7e4; // int32_t
		constexpr auto MarkTexture = 0x7e8; // UTexture*
		constexpr auto AltMarkTexture = 0x7f0; // UTexture*
		constexpr auto UndergroundMarkTexture = 0x7f8; // UTexture*
		constexpr auto AltUndergroundMarkTexture = 0x800; // UTexture*
		constexpr auto MarkWidthRatio = 0x808; // float
		constexpr auto MarkHeightRatio = 0x80c; // float
		constexpr auto MarkBlendMode = 0x810; // EBlendMode
		constexpr auto MapTexturePath = 0x818; // FString
		constexpr auto MapInventoryTexturePath = 0x828; // FStringAssetReference
		constexpr auto Marks = 0x8a8; // TArray<FXMarksTheSpotMapMark>
		constexpr auto Rotation = 0x8d0; // float
	}

	namespace n_UBTTask_ReactToOwner { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_UPLQuestLocationDataBundle { // : UDataAsset
		constexpr auto ActiveLocations = 0x28; // TArray<UPLQuestLocationDataAsset*>
	}

	namespace n_UAthenaClampedFreelookInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMovieSceneByteSection { // : UMovieSceneSection
		constexpr auto ByteCurve = 0xa0; // FIntegralCurve
	}

	namespace n_UMaterialExpressionIfCondition { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto IfTrue = 0xe0; // FExpressionInput
		constexpr auto IfFalse = 0x118; // FExpressionInput
		constexpr auto Condition = 0x150; // EIfExpressionCondition
		constexpr auto Attribute = 0x151; // EIfExpressionAttribute
		constexpr auto ConstB = 0x154; // float
		constexpr auto ConstIfTrue = 0x158; // float
		constexpr auto ConstIfFalse = 0x15c; // float
	}

	namespace n_UGameplayModMagnitudeCalculation { // : UGameplayEffectCalculation
		constexpr auto RelevantAttributesToCapture = 0x28; // TArray<FGameplayEffectAttributeCaptureDefinition>
	}

	namespace n_ASimpleAnimatedMechanismActionProxy { // : AAnimatedMechanismActionProxy
		constexpr auto Mode = 0x400; // ESimpleAnimatedMechanismActionMode
		constexpr auto AlwaysActive = 0x401; // bool
		constexpr auto OnlyAnimateWhenActive = 0x402; // bool
		constexpr auto OverrideAudioEmitterPool = 0x403; // bool
		constexpr auto AudioEmitterPool = 0x408; // UWwiseObjectPoolWrapper*
	}

	namespace n_UFindNamedPointAsVectorStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UUIInputForwardComponent { // : UActorComponent
		constexpr auto TargetView = 0xc8; // UCoherentUIGTBaseComponent*
	}

	namespace n_UBlendedPostProcessingZoneComponentBase { // : UPostProcessComponent
		constexpr auto FadeCurveNormalised = 0x820; // UCurveFloat*
		constexpr auto BlendDistance = 0x828; // float
	}

	namespace n_UPirateGeneratorMaterials { // : UObject
		constexpr auto Materials = 0x28; // TArray<UMaterialInterface*>
	}

	namespace n_AEmoteCoin { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_ULevelActorContainer { // : UObject
		constexpr auto Actors = 0x28; // TArray<AActor*>
	}

	namespace n_UGrantPagesStepFromLayoutsDesc { // : UGrantPagesStepDesc
		constexpr auto Pages = 0x80; // TArray<FStringAssetReference>
	}

	namespace n_UCollectorsChestMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UBTTask_UnwieldCurrentWeapon { // : UBTTaskNode
		constexpr auto WaitForSuccessfulUnwield = 0x60; // bool
		constexpr auto ShouldUnwieldFast = 0x61; // bool
	}

	namespace n_UMaterialExpressionParticleDirection { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_ATreasureRoom { // : AActor
		constexpr auto StartedDelegate = 0x3d0; // FScriptMulticastDelegate
		constexpr auto FailDelegate = 0x3e0; // FScriptMulticastDelegate
		constexpr auto EndedDelegate = 0x3f0; // FScriptMulticastDelegate
		constexpr auto RoomAreaComponent = 0x400; // UBoxComponent*
		constexpr auto GoldHoarderSpawner = 0x408; // UAISpawner*
		constexpr auto SourceLocationActor = 0x410; // AActor*
		constexpr auto AIDioramaDesc = 0x418; // UAIDioramaDesc*
		constexpr auto TriggerRadius = 0x420; // float
		constexpr auto MusicZoneComponent = 0x428; // UAISpawnerMusicZoneComponent*
		constexpr auto ProximityPlayerTracker = 0x430; // UAIProximityPlayerTracker*
		constexpr auto ActiveSpawner = 0x438; // UAISpawner*
		constexpr auto AIDioramaController = 0x440; // UAIDioramaController*
		constexpr auto OverlappingActors = 0x4d8; // TArray<AActor*>
	}

	namespace n_AGameplayAbilityTargetActor_Radius { // : AGameplayAbilityTargetActor
		constexpr auto Radius = 0x4e8; // float
	}

	namespace n_USoundNodeDialoguePlayer { // : USoundNode
		constexpr auto DialogueWaveParameter = 0x38; // FDialogueWaveParameter
		constexpr auto bLooping = 0x58; // char : 1
	}

	namespace n_UIsDrunkStatCondition { // : UTargetedStatCondition
		constexpr auto MinimumDrunkennessRequired = 0x30; // float
	}

	namespace n_ABell { // : AInteractableObject
		constexpr auto CustomisationComponent = 0x460; // UReplicatedShipPartCustomizationComponent*
		constexpr auto PlayerStats = 0x468; // FBellPlayerStats
		constexpr auto InteractableComponent = 0x478; // UInteractableComponent*
		constexpr auto BellMeshComponent = 0x480; // UStaticMeshComponent*
		constexpr auto BellRingSFX = 0x488; // UWwiseEvent*
		constexpr auto BellRingSfxStorm = 0x490; // UWwiseEvent*
		constexpr auto BellName = 0x498; // FText
		constexpr auto TimeBetweenTurbulenceChecks = 0x4d0; // float
		constexpr auto MinIntervalBetweenRingsLowerBound = 0x4d4; // float
		constexpr auto MinIntervalBetweenRingsUpperBound = 0x4d8; // float
		constexpr auto MaxIntervalBetweenRingsLowerBound = 0x4dc; // float
		constexpr auto MaxIntervalBetweenRingsUpperBound = 0x4e0; // float
		constexpr auto BellPool = 0x4e8; // UWwiseObjectPoolWrapper*
		constexpr auto EmitterOffset = 0x4f0; // FVector
		constexpr auto BellDynamicMaterial = 0x500; // UMaterialInstanceDynamic*
		constexpr auto BellMaterialIndex = 0x508; // int32_t
	}

	namespace n_USkeletalMeshSocket { // : UObject
		constexpr auto SocketName = 0x28; // FName
		constexpr auto BoneName = 0x30; // FName
		constexpr auto RelativeLocation = 0x38; // FVector
		constexpr auto RelativeRotation = 0x44; // FRotator
		constexpr auto RelativeScale = 0x50; // FVector
		constexpr auto bForceAlwaysAnimated = 0x5c; // bool
	}

	namespace n_UWaitForNPCDialogOptionEventStepDesc { // : UTaleQuestStepDesc
		constexpr auto EventName = 0x80; // FName
		constexpr auto ActorVar = 0x88; // FQuestVariableActor
	}

	namespace n_UNPCDialogPredicateIsWearingAll { // : UNPCDialogPredicateIsWearingAny
		constexpr auto ClothingItems = 0x38; // TArray<UClothingDesc*>
	}

	namespace n_UShantySettings { // : UDeveloperSettings
		constexpr auto MaxJoinInDistance = 0x38; // float
		constexpr auto MaxAudibleShantyInstruments = 0x3c; // int32_t
		constexpr auto MaxCachedShantyEvents = 0x40; // int32_t
		constexpr auto InstrumentStopFadeOutDuration = 0x44; // float
	}

	namespace n_UAggressiveGhostShipEncounterDataAsset { // : UDataAsset
		constexpr auto TimeBetweenSpawns = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeBetweenFormationMemberSpawns = 0x58; // FWeightedProbabilityRangeOfRanges
		constexpr auto WaveDescs = 0x88; // TArray<FAggressiveGhostShipEncounterWaveDesc>
		constexpr auto BarrelsOfPlentySpawnProfileOverride = 0x98; // UBuoyantObjectSpawnProfileDataAsset*
		constexpr auto Ship = 0xa0; // AAggressiveGhostShip*
		constexpr auto MineActorClass = 0xa8; // AAggressiveGhostShipMine*
		constexpr auto AnchorDropActorClass = 0xb0; // AAggressiveGhostShipAnchorDrop*
		constexpr auto Allegiance = 0xb8; // EAggressiveGhostShipAllegiance
		constexpr auto CanAttackEnemyGhostShips = 0xb9; // bool
	}

	namespace n_UBlendSpace1D { // : UBlendSpaceBase
		constexpr auto bScaleAnimation = 0x108; // bool
	}

	namespace n_AInteractiveFoliageActor { // : AStaticMeshActor
		constexpr auto CapsuleComponent = 0x3e0; // UCapsuleComponent*
		constexpr auto TouchingActorEntryPosition = 0x3e8; // FVector
		constexpr auto FoliageVelocity = 0x3f4; // FVector
		constexpr auto FoliageForce = 0x400; // FVector
		constexpr auto FoliagePosition = 0x40c; // FVector
		constexpr auto FoliageDamageImpulseScale = 0x418; // float
		constexpr auto FoliageTouchImpulseScale = 0x41c; // float
		constexpr auto FoliageStiffness = 0x420; // float
		constexpr auto FoliageStiffnessQuadratic = 0x424; // float
		constexpr auto FoliageDamping = 0x428; // float
		constexpr auto MaxDamageImpulse = 0x42c; // float
		constexpr auto MaxTouchImpulse = 0x430; // float
		constexpr auto MaxForce = 0x434; // float
		constexpr auto Mass = 0x438; // float
	}

	namespace n_UMeleeItemActionComponent { // : UItemActionComponent
		constexpr auto TrailParticleSystem_FP = 0x2d0; // UParticleSystemComponent*
		constexpr auto TrailParticleSystem_TP = 0x2d8; // UParticleSystemComponent*
		constexpr auto PreventCombosOnHealthChange = 0x2e0; // bool
		constexpr auto WeaponData = 0x300; // UMeleeWeaponDataAsset*
		constexpr auto WieldersAttackProcessor = 0x308; // UMeleeAttackProcessorComponent*
		constexpr auto WieldersInventoryManipulator = 0x310; // UInventoryManipulatorComponent*
		constexpr auto MaxAcceptableAttackTimeStampDelta = 0x318; // float
		constexpr auto MaxAcceptableAttackLocationDelta = 0x31c; // float
		constexpr auto MaxAcceptableAttackLocationOnShipDelta = 0x320; // float
		constexpr auto MaxAcceptableAttackShipSpeedForLocation = 0x324; // float
	}

	namespace n_UTaleQuestChooseLandOrSeaStepDesc { // : UTaleQuestStepDesc
		constexpr auto SeaClueSiteTypes = 0x80; // USeaClueSiteTypesDataAsset*
		constexpr auto ProjectionAngleInDegrees = 0x88; // float
		constexpr auto MinProjectionProportion = 0x8c; // float
		constexpr auto MaxProjectionProportion = 0x90; // float
		constexpr auto LandClueChanceWhenPreviousClueWasSea = 0x94; // float
		constexpr auto LandClueChanceWhenPreviousClueWasLand = 0x98; // float
		constexpr auto ProjectionPoint = 0xa0; // FQuestVariableVector
		constexpr auto TradeRouteData = 0xb0; // FQuestVariableTradeRouteData
		constexpr auto IsSeaLocation = 0xc0; // FQuestVariableBool
		constexpr auto ValidIslandNames = 0xd0; // FQuestVariableNameArray
	}

	namespace n_UParticleModuleLocation_Seeded { // : UParticleModuleLocation
		constexpr auto RandomSeedInfo = 0x178; // FParticleRandomSeedInfo
	}

	namespace n_UEdGraphNode_Documentation { // : UEdGraphNode
		constexpr auto Link = 0x90; // FString
		constexpr auto Excerpt = 0xa0; // FString
	}

	namespace n_AWaterbasedAISupplier { // : AActor
		constexpr auto Spawners = 0x3d0; // UAISpawnerList*
	}

	namespace n_UItemWithoutIconsDesc { // : UItemDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_UChainLightningSettingsAsset { // : UDataAsset
		constexpr auto ChainLightningParameters = 0x28; // FChainLightningParameters
	}

	namespace n_ULocatorContainer { // : UDataAsset
		constexpr auto Locators = 0x28; // TArray<FLocator>
	}

	namespace n_UAnimNotify_DockableCutscene { // : UAnimNotify
		constexpr auto PlayedWithSequencer = 0x28; // bool
	}

	namespace n_UFogTrackerComponent { // : UActorComponent
		constexpr auto FogDensityThreshold = 0xd0; // float
	}

	namespace n_UHasRanksNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto RequiredRanks = 0x30; // TArray<URankDesc*>
	}

	namespace n_UAvailableFishForSpawning { // : UDataAsset
		constexpr auto AvailableFishToSelectForSpawning = 0x28; // TArray<UFishSpawnParamsDataAsset*>
	}

	namespace n_UBTComposite_Selector { // : UBTCompositeNode
		constexpr auto Children = 0x58; // TArray<FBTCompositeChild>
		constexpr auto Services = 0x68; // TArray<UBTService*>
	}

	namespace n_ULevelCapture { // : UMovieSceneCapture
		constexpr auto bAutoStartCapture = 0x1e0; // bool
		constexpr auto PrerequisiteActorId = 0x1ec; // FGuid
	}

	namespace n_AFlamesOfFateLantern { // : AActor
		constexpr auto FlameOfFateType = 0x3d0; // EFlameOfFateType
	}

	namespace n_UContestMigration { // : UObject
		constexpr auto World = 0x38; // UWorld*
	}

	namespace n_ATriggerVolume { // : AVolume
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UGetVoyageDifficultyFromRankStepDesc { // : UTaleQuestStepDesc
		constexpr auto VoyageType = 0x80; // EVoyageDifficultyScope
		constexpr auto Difficulty = 0x88; // FQuestVariableInt
	}

	namespace n_UNPCDialogPredicateIsTrue { // : UNPCDialogPredicate
		constexpr auto ParameterName = 0x38; // FName
	}

	namespace n_UParticleModuleLifetime_Seeded { // : UParticleModuleLifetime
		constexpr auto RandomSeedInfo = 0x1c0; // FParticleRandomSeedInfo
	}

	namespace n_UEnvQueryTest_Trace { // : UEnvQueryTest
		constexpr auto TraceData = 0x170; // FEnvTraceData
		constexpr auto TraceFromContext = 0x1b0; // FAIDataProviderBoolValue
		constexpr auto ItemHeightOffset = 0x1e0; // FAIDataProviderFloatValue
		constexpr auto ContextHeightOffset = 0x210; // FAIDataProviderFloatValue
		constexpr auto Context = 0x240; // UEnvQueryContext*
	}

	namespace n_UMovieScene3DTransformSection { // : UMovieSceneSection
		constexpr auto Translation = 0xa0; // FRichCurve [0x3]
		constexpr auto Rotation = 0x208; // FRichCurve [0x3]
		constexpr auto Scale = 0x370; // FRichCurve [0x3]
	}

	namespace n_UNativeWidgetHost { // : UWidget
		constexpr auto bIsVariable = 0x28; // bool
		constexpr auto bCreatedByConstructionScript = 0x29; // bool
		constexpr auto Slot = 0x30; // UPanelSlot*
		constexpr auto bIsEnabled = 0x38; // bool
		constexpr auto bIsEnabledDelegate = 0x3c; // DelegateProperty
		constexpr auto ToolTipText = 0x50; // FText
		constexpr auto ToolTipTextDelegate = 0x88; // DelegateProperty
		constexpr auto ToolTipWidget = 0x98; // UWidget*
		constexpr auto ToolTipWidgetDelegate = 0xa0; // DelegateProperty
		constexpr auto Visiblity = 0xb0; // ESlateVisibility
		constexpr auto Visibility = 0xb1; // ESlateVisibility
		constexpr auto VisibilityDelegate = 0xb4; // DelegateProperty
		constexpr auto bOverride_Cursor = 0xc4; // char : 1
		constexpr auto Cursor = 0xc8; // EMouseCursor
		constexpr auto bIsVolatile = 0xc9; // bool
		constexpr auto RenderTransform = 0xcc; // FWidgetTransform
		constexpr auto RenderTransformPivot = 0xe8; // FVector2D
		constexpr auto Navigation = 0xf0; // UWidgetNavigation*
		constexpr auto NativeBindings = 0x128; // TArray<UPropertyBinding*>
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigrationCustomSerialiseReplicatingActor { // : AServerMigrationSerialisationDetailsTestsMigrationCustomSerialiseActor
		constexpr auto TestStruct = 0x3d0; // FServerMigrationCustomMigrationSerialisationStruct
	}

	namespace n_AAthenaPlayerCharacterUnitTestMock { // : AAthenaPlayerCharacterMock
		constexpr auto ExpectedActionStateId = 0x1c30; // UActionStateId*
	}

	namespace n_UDescribableComponent { // : UInteractableComponent
		constexpr auto TooltipActiveOnBeginPlay = 0x120; // bool
		constexpr auto DescribableTooltipText = 0x128; // FText
		constexpr auto TooltipActive = 0x160; // bool
	}

	namespace n_USeasonProgressionUISettings { // : UObject
		constexpr auto SeasonPopupListAsset = 0x28; // FStringAssetReference
	}

	namespace n_UItemFirstDroppedOnShipConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UMaterialExpressionDesaturation { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto Fraction = 0xa8; // FExpressionInput
		constexpr auto LuminanceFactors = 0xe0; // FLinearColor
	}

	namespace n_UMeshMemoryConstraintScoringPlayerDistance { // : UMeshMemoryConstraintScoringObject
		constexpr auto MaxDistanceSqr = 0x40; // float
	}

	namespace n_UMenuInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ULandmarkFrameworkSettings { // : UDeveloperSettings
		constexpr auto LandmarkAudioZoneRadius = 0x38; // float
		constexpr auto LandmarkAudioZoneHeight = 0x3c; // float
	}

	namespace n_UNamedAIDataAsset { // : UDataAsset
		constexpr auto MaleCaptainNames = 0x28; // TArray<FText>
		constexpr auto FemaleCaptainNames = 0x38; // TArray<FText>
		constexpr auto MaleCrewNames = 0x48; // TArray<FText>
		constexpr auto FemaleCrewNames = 0x58; // TArray<FText>
		constexpr auto CustomNameTitles = 0x68; // TArray<FAICustomNameTitleMapping>
		constexpr auto CustomNameOverrides = 0x78; // TArray<FAICustomClassIdNameOverrides>
		constexpr auto DefaultClassId = 0x88; // UAIClassId*
		constexpr auto FemaleCaptainClassId = 0x90; // UAIClassId*
		constexpr auto MaleCaptainClassId = 0x98; // UAIClassId*
		constexpr auto FemaleCrewClassId = 0xa0; // UAIClassId*
		constexpr auto MaleCrewClassId = 0xa8; // UAIClassId*
	}

	namespace n_UBattleElevatorEventRoomMechanismCompletedPolicy { // : UBattleElevatorEventRoomBasePolicy
		constexpr auto ActorWithMechanismsComponentsToWaitFor = 0x28; // TArray<AActor*>
	}

	namespace n_USeatComponentBase { // : UInteractableComponent
		constexpr auto InteractionVerb = 0x158; // FText
		constexpr auto InteractionDisplayName = 0x190; // FText
		constexpr auto InteractionInput = 0x1c8; // UNotificationInputId*
		constexpr auto HoldToInteract = 0x1d0; // bool
		constexpr auto HoldInteractionInput = 0x1d8; // UNotificationInputId*
		constexpr auto HoldDuration = 0x1e0; // float
		constexpr auto IdleDisconnectThreshold = 0x1e4; // float
		constexpr auto RadialPhrases = 0x1e8; // UPhrasesRadialDataAsset*
		constexpr auto CustomInteractionPoint = 0x1f0; // bool
		constexpr auto CustomInteractionPointLocation = 0x1f4; // FVector
		constexpr auto ConditionalSeatStats = 0x200; // TArray<USeatStat*>
		constexpr auto CanBeUnderwater = 0x210; // bool
		constexpr auto ControllingActor = 0x234; // TWeakObjectPtr<AActor>
	}

	namespace n_UFixedClueChoiceSelectionStrategy { // : UClueChoiceSelectionStrategy
		constexpr auto IndexToSelect = 0x28; // int32_t
	}

	namespace n_UMovieSceneComponentMaterialTrack { // : UMovieSceneMaterialTrack
		constexpr auto MaterialIndex = 0x98; // int32_t
	}

	namespace n_UNPCDialogOptionGiveClue { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto LinkedDialog = 0xb8; // int32_t
	}

	namespace n_ATeleportTriggerObject { // : ATriggerObject
		constexpr auto TargetTeleportActor = 0x3d0; // AActor*
		constexpr auto TeleportOffset = 0x3e0; // FTransform
		constexpr auto RelevancyTimeout = 0x410; // float
	}

	namespace n_UGameNarrationCoordinator { // : UObject
		constexpr auto NarrationSpeakEvent = 0x28; // UWwiseEvent*
		constexpr auto Emitter = 0x30; // FWwiseEmitter
		constexpr auto CachedPreferredVoice = 0x178; // FString
		constexpr auto CachedLanguage = 0x188; // FString
		constexpr auto CachedGender = 0x198; // int32_t
		constexpr auto IsNarrationSettingEnabled = 0x19c; // bool
		constexpr auto NarrationOverride = 0x1a0; // int32_t
	}

	namespace n_UMaterialVectorParameterBlend { // : UMaterialParameterBlendBase
		constexpr auto Inactive = 0x60; // FLinearColor
		constexpr auto Active = 0x70; // FLinearColor
	}

	namespace n_AMusicalInstrumentStaticMesh { // : AMusicalInstrument
		constexpr auto InstrumentType = 0x7a0; // EMusicalInstrumentType
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto PlayingCoolDownTime = 0x7b0; // float
		constexpr auto InstrumentDrunkennessRtpc = 0x7b4; // FName
		constexpr auto InstrumentUnderwaterRtpc = 0x7bc; // FName
		constexpr auto MaxUnderwaterRtpcFactor = 0x7c4; // float
		constexpr auto MinUnderwaterRtpcFactor = 0x7c8; // float
		constexpr auto PlayingAINoiseRange = 0x7cc; // float
		constexpr auto AINoiseEventInterval = 0x7d0; // float
		constexpr auto TriggerEffectActor = 0x7d8; // UObject*
		constexpr auto NamedNotificationInputComponent = 0x7e0; // UNamedNotificationInputComponent*
		constexpr auto AthenaPlayerCharacter = 0x7f0; // AAthenaPlayerCharacter*
	}

	namespace n_UAthenaAIAbilityHandlerComponent { // : UActorComponent
		constexpr auto AbilityStages = 0x178; // TArray<FAthenaAIAbilityDamageStage>
		constexpr auto AIAbilities = 0x188; // TArray<UAthenaAIAbility*>
		constexpr auto ReadyAbilitiesPool = 0x198; // TArray<UAthenaAIAbilityType*>
		constexpr auto DebugAlwaysOnAbility = 0x1c8; // UAthenaAIAbilityType*
		constexpr auto RequiresActivation = 0x1d0; // UAthenaAIAbilityType*
	}

	namespace n_UAttachHarpoonTetherConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_APlayerStart { // : ANavigationObjectBase
		constexpr auto PlayerStartTag = 0x3f8; // FName
	}

	namespace n_UFogBankDataAsset { // : UDataAsset
		constexpr auto FogBankType = 0x28; // EFogBankType
		constexpr auto Density = 0x30; // FWeightedProbabilityRangeOfRanges
		constexpr auto RadiusXInKm = 0x60; // FWeightedProbabilityRangeOfRanges
		constexpr auto RadiusYInKm = 0x90; // FWeightedProbabilityRangeOfRanges
		constexpr auto HeightInKm = 0xc0; // FWeightedProbabilityRangeOfRanges
		constexpr auto DefaultColour = 0xf0; // FLinearColor
		constexpr auto FogColourForSea = 0x100; // TArray<FFogColourForSea>
		constexpr auto FadeInDuration = 0x110; // FWeightedProbabilityRangeOfRanges
		constexpr auto ActiveDuration = 0x140; // FWeightedProbabilityRangeOfRanges
		constexpr auto FadeOutDuration = 0x170; // FWeightedProbabilityRangeOfRanges
		constexpr auto EmergencyFadeOutDuration = 0x1a0; // FWeightedProbabilityRangeOfRanges
		constexpr auto Persistent = 0x1d0; // bool
		constexpr auto TimeBetweenLocalPlayerDensityModifierUpdate = 0x1d4; // float
		constexpr auto NotCulledDistanceFromPlayerInKm = 0x1d8; // float
		constexpr auto FullyCulledDistanceFromPlayerInKm = 0x1dc; // float
	}

	namespace n_ABeckonService { // : AActor
		constexpr auto BeckonDataAsset = 0x3d8; // UBeckonDataAsset*
	}

	namespace n_UAthenaAnimationPulleyDataAsset { // : UDataAsset
		constexpr auto Entry = 0x28; // UAnimSequence*
		constexpr auto Left = 0x30; // FAthenaAnimationPulleyDataAssetEntry
		constexpr auto Right = 0x50; // FAthenaAnimationPulleyDataAssetEntry
	}

	namespace n_UFlammableComponent { // : UActorComponent
		constexpr auto OnFire = 0xd8; // bool
	}

	namespace n_UInteractionInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto InteractionComponentTickFunction = 0x278; // FInteractionInputComponentTickFunction
	}

	namespace n_UEventRoomParamsDataAsset { // : UDataAsset
		constexpr auto AftermathTimer = 0x28; // float
		constexpr auto SpawnPlayerOnShipInsteadOfExitLocation = 0x2c; // bool
		constexpr auto FailTimer = 0x30; // float
	}

	namespace n_AContestManagerDebugRepActor { // : AActor
		constexpr auto ContestState = 0x3d0; // EContestState
		constexpr auto CurrentTimerTime = 0x3d4; // float
		constexpr auto ContestVoyageString = 0x3d8; // FString
		constexpr auto CrewContestInfoList = 0x3e8; // TArray<FDebugCrewContestInfo>
		constexpr auto ContestManagerService = 0x408; // AContestManagerService*
	}

	namespace n_UConsole { // : UObject
		constexpr auto ConsoleTargetPlayer = 0x38; // ULocalPlayer*
		constexpr auto DefaultTexture_Black = 0x40; // UTexture2D*
		constexpr auto DefaultTexture_White = 0x48; // UTexture2D*
		constexpr auto HistoryBuffer = 0x68; // TArray<FString>
	}

	namespace n_AVeilOfTheAncients { // : AInteractableBase
		constexpr auto NumberOfGems = 0x3f8; // float
		constexpr auto LockComponent = 0x400; // ULockComponent*
		constexpr auto StaticMeshComponent = 0x408; // UStaticMeshComponent*
	}

	namespace n_ABarrelsOfPlentySpawnProxy { // : AActor
		constexpr auto Ship = 0x3d0; // AShip*
		constexpr auto SceneComponent = 0x3f0; // USceneComponent*
	}

	namespace n_UAshenLordVolcanoSetupDataAsset { // : UDataAsset
		constexpr auto ProjectileTriggerFrequency = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto NumProjectilesToTrigger = 0x58; // FWeightedProbabilityRange
		constexpr auto SpawnHeightInMetres = 0x78; // FWeightedProbabilityRangeOfRanges
		constexpr auto TargetDistanceFromCenterInMetres = 0xa8; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeBetweenSpawns = 0xd8; // FWeightedProbabilityRangeOfRanges
		constexpr auto StartPositionOffsetInMetres = 0x108; // FWeightedProbabilityRangeOfRanges
		constexpr auto Projectiles = 0x138; // TArray<FWeightedAshenLordVolcanoProjectile>
		constexpr auto PoolableProjectilesConfig = 0x148; // FPoolableCollectionMapConfiguration
		constexpr auto Embers = 0x160; // FVolcanoSetupDataEmbersEntry
		constexpr auto EmberSpawnHeightInMeters = 0x170; // float
		constexpr auto TimeBetweenEmbers = 0x174; // float
	}

	namespace n_UVoyageDescDataAsset { // : UDataAsset
		constexpr auto Chapters = 0x28; // TArray<FChapterQuests>
		constexpr auto FeatureToggledChapters = 0x38; // TArray<FFeatureToggledChapters>
		constexpr auto Title = 0x48; // FText
		constexpr auto Description = 0x80; // FText
		constexpr auto LockedDescription = 0xb8; // FText
		constexpr auto KeyArtUrl = 0xf0; // FStringAssetReference
		constexpr auto IconUrl = 0x100; // FStringAssetReference
		constexpr auto Company = 0x110; // UCompany*
		constexpr auto IsEmergent = 0x118; // bool
		constexpr auto IsTale = 0x119; // bool
		constexpr auto IsStarlightTale = 0x11a; // bool
		constexpr auto IsCrossWorld = 0x11b; // bool
		constexpr auto ViewVoyageBanners = 0x11c; // FViewVoyageBanners
		constexpr auto DoNotNotifyParticipantsOnVoyageComplete = 0x11e; // bool
		constexpr auto Rank = 0x120; // int32_t
		constexpr auto VoyageCompletionStats = 0x128; // TArray<FPlayerStat>
		constexpr auto ReapersMarkCompletionStats = 0x138; // TArray<FPlayerStat>
		constexpr auto CampaignId = 0x148; // FName
		constexpr auto TaleCancelVoteMesh = 0x150; // FStringAssetReference
		constexpr auto EmergentSource = 0x160; // EEmergentVoyageSource
	}

	namespace n_ACollectorsChestItemProxy { // : ATreasureChestItemProxySkeletal
		constexpr auto OpenableItemComponent = 0x848; // UOpenableItemComponent*
	}

	namespace n_UBTDecorator_CompareBBEntries { // : UBTDecorator
		constexpr auto Operator = 0x68; // EBlackBoardEntryComparison
		constexpr auto BlackboardKeyA = 0x70; // FBlackboardKeySelector
		constexpr auto BlackboardKeyB = 0x98; // FBlackboardKeySelector
	}

	namespace n_UWieldableItemSetComponent { // : UActorComponent
		constexpr auto WieldableItems = 0xd0; // TArray<FWieldedItemData>
		constexpr auto LockedCategories = 0xe0; // TArray<UItemCategory*>
	}

	namespace n_UNPCLoadedOnClientService { // : UObject
		constexpr auto AllNPCData = 0x30; // TArray<FNPCData>
	}

	namespace n_UPlayer { // : UObject
		constexpr auto PlayerController = 0x30; // APlayerController*
		constexpr auto CurrentNetSpeed = 0x38; // int32_t
		constexpr auto ConfiguredInternetSpeed = 0x3c; // int32_t
		constexpr auto ConfiguredLanSpeed = 0x40; // int32_t
	}

	namespace n_ADebugRegisterDynamicsShip { // : AShip
		constexpr auto PartConnections = 0x488; // FShipPartConnections
		constexpr auto BoatCollision = 0x520; // UStaticMeshComponent*
		constexpr auto BoatBasis = 0x528; // UBasisComponent*
		constexpr auto OverlapHit = 0x530; // UStaticMeshComponent*
		constexpr auto BelowDeckVolume = 0x538; // UStaticMeshComponent*
		constexpr auto CabinVolume = 0x540; // UStaticMeshComponent*
		constexpr auto ObjectMessageDispatcher = 0x548; // FObjectMessagingDispatcher
		constexpr auto TeleportLocationRetrievalComponent = 0x5e8; // UTeleportLocationRetrievalComponent*
		constexpr auto ShipInternalWaterComponent = 0x5f0; // UChildActorComponent*
		constexpr auto SinkingComponent = 0x5f8; // USinkingComponent*
		constexpr auto HullCollisionComponent = 0x600; // UShipHullCollisionComponent*
		constexpr auto TetherCustomisationComponent = 0x608; // UTetherCustomisationComponent*
		constexpr auto StuckDetectionComponent = 0x610; // UShipStuckDetectionComponent*
		constexpr auto StatusEffectManagerComponent = 0x618; // UStatusEffectManagerComponent*
		constexpr auto StatusEffectPersistenceComponent = 0x620; // UStatusEffectPersistenceComponent*
		constexpr auto ShipCurseComponent = 0x628; // UShipCurseComponent*
		constexpr auto InstancedNavMeshComponent = 0x630; // UInstancedNavMeshComponent*
		constexpr auto Buoyancy = 0x640; // FWaterBuoyancy
		constexpr auto CrewOwnershipComponent = 0x770; // UCrewOwnershipComponent*
		constexpr auto OnboardCharacterTrackerComponent = 0x778; // UOnboardCharacterTrackerComponent*
		constexpr auto RewindComponent = 0x780; // URewindComponent*
		constexpr auto LiveryComponent = 0x788; // UShipLiveryComponent*
		constexpr auto HullLiveryCustomizationComponent = 0x790; // UReplicatedShipPartCustomizationComponent*
		constexpr auto SailsLiveryCustomizationComponent = 0x798; // UReplicatedShipPartCustomizationComponent*
		constexpr auto CannonEnchantmentCustomizationComponent = 0x7a0; // UReplicatedShipPartCustomizationComponent*
		constexpr auto RammerType = 0x7a8; // URammerType*
		constexpr auto GroupedInteractableAreaComponent = 0x7b0; // UGroupedInteractableAreaComponent*
		constexpr auto ShipConfigurationSettings = 0x7b8; // FShipConfigurationSettings
		constexpr auto RainFillRate = 0x7d0; // float
		constexpr auto RainTimePerDrop = 0x7d4; // float
		constexpr auto RainDropScale = 0x7d8; // float
		constexpr auto RainDropRadius = 0x7dc; // float
		constexpr auto RainStrengthMinimumToFillShip = 0x7e0; // float
		constexpr auto AITargetVisibilityPoints = 0x7e8; // TArray<FVector>
		constexpr auto AchievementSinkOtherCrewsShip = 0x7f8; // FAchievementSinkAnotherCrewsShip
		constexpr auto AchievementSailThroughStormAtNightWithLightsOff = 0x810; // FAchievementSailThroughStormAtNightWithLightsOff
		constexpr auto AchievementSailCloseToShipWithoutFiring = 0x890; // FAchievementSailCloseToShipWithoutFiring
		constexpr auto AchievementSailFullyIntoTheWind = 0x8a8; // FAchievementSailFullyWithTheWind
		constexpr auto AchievementSailWithFlameOfFateColoursAboard = 0x8b0; // FAchievementSailWithFlameOfFateColoursAboard
		constexpr auto ImpulseThrottlerComponent = 0x9a8; // UImpulseThrottlerComponent*
		constexpr auto ReturnToShipVolume = 0x9b0; // USphereComponent*
		constexpr auto ReturnToShipVolumeRadius = 0x9b8; // float
		constexpr auto BowSplashReturnType = 0x9bc; // EBowSplashTickReturnType
		constexpr auto ShipDynamics = 0x9c0; // FShipDynamics
		constexpr auto PhysicsErrorCorrection = 0xa60; // FRigidBodyErrorCorrection
		constexpr auto AdventureSinkingData = 0xa80; // UShipSinkingParametersDataAsset*
		constexpr auto ArenaSinkingData = 0xa88; // UShipSinkingParametersDataAsset*
		constexpr auto BuoyancySampleMovement = 0xa90; // FBuoyancySampleMovement
		constexpr auto SurfacingBuoyancySampleMovement = 0xaf8; // FBuoyancySampleMovement
		constexpr auto DivingBuoyancySampleMovement = 0xb60; // FBuoyancySampleMovement
		constexpr auto NosediveBrake = 0xbc8; // UShipNosediveBrake*
		constexpr auto RolloverCorrector = 0xbd0; // UShipRolloverCorrector*
		constexpr auto BowSplashContainer = 0xbd8; // UBowSplashContainer*
		constexpr auto SurfacingBowSplashContainer = 0xbe0; // UBowSplashContainer*
		constexpr auto DivingBowSplashContainer = 0xbe8; // UBowSplashContainer*
		constexpr auto DisableSailingBowSplashesWhenDiving = 0xbf0; // bool
		constexpr auto ShipLocators = 0xbf8; // ULocatorContainer*
		constexpr auto LocalSailForceApplicationOffset = 0xc00; // FVector
		constexpr auto ShipSpeedToChoppinessScalarCurve = 0xc10; // UCurveFloat*
		constexpr auto HullSubmergedValueRemapping = 0xc18; // UCurveFloat*
		constexpr auto FakeBuoyancyZOffsetScalarSpringAccel = 0xc20; // float
		constexpr auto PositionSamplerTimeWindow = 0xc24; // float
		constexpr auto ClientConvexHullCollisionProfile = 0xc28; // FName
		constexpr auto EmpiricalMaxSpeedInMPS = 0xc30; // float
		constexpr auto BrigSpawnLocation = 0xc40; // FTransform
		constexpr auto WaterStrengthThresholdForStormDamage = 0xc70; // float
		constexpr auto FirePropagationBlueprint = 0xc78; // AActor*
		constexpr auto FirePropagationComponent = 0xc80; // UShipFirePropagationComponent*
		constexpr auto SightingEncounterParams = 0xcf0; // FEncounterParams
		constexpr auto CloseProximityEncounterParams = 0xcfc; // FEncounterParams
		constexpr auto ShipCategoryObject = 0xd18; // UShipCategory*
		constexpr auto ShipSizeObject = 0xd20; // UShipSize*
		constexpr auto ShipTypeObject = 0xd28; // UShipType*
		constexpr auto DamageableChildActors = 0xd30; // TArray<AActor*>
		constexpr auto CrewShipManifest = 0xd40; // ACrewShipManifest*
		constexpr auto HullDamage = 0xda8; // UObject*
		constexpr auto DeckWater = 0xdb0; // USurfaceWaterComponent*
		constexpr auto WaterExposureComponent = 0xdb8; // UWaterExposureComponent*
		constexpr auto ShroudBreakerTrackerComponent = 0xdc0; // UShroudBreakerTrackerComponent*
		constexpr auto MovementTimeStamp = 0xdc8; // FNetTimeStampCalculator
		constexpr auto StormStrainWeight = 0xf2c; // float
		constexpr auto WorldEdgeWeight = 0xf30; // float
		constexpr auto TetherMassInertiaScaleWhenAnchored = 0xf34; // float
		constexpr auto StormStrainDamage = 0xf38; // FStrainDamage
		constexpr auto WorldEdgeDamage = 0xf60; // FStrainDamage
		constexpr auto ScuttleDamage = 0xf88; // FStrainDamage
		constexpr auto WorldEdgeDamageRange = 0xfb0; // FVector2D
		constexpr auto ScuttleForceSinkTime = 0xfb8; // float
		constexpr auto ProxyClass = 0xfc0; // ANetProxy*
		constexpr auto HasEverStartedSailing = 0xfc9; // bool
		constexpr auto EmissaryFlagActive = 0xfca; // bool
		constexpr auto SurfacingState = 0xfcb; // EShipSurfacingState
		constexpr auto InstancedMeshes = 0xfd0; // TArray<UMobileInstancedStaticMeshComponent*>
		constexpr auto ScuttleTime = 0x1460; // float
	}

	namespace n_USittingInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto ThirdPersonCameraParams = 0x280; // UAthenaSpringArmComponentParams*
		constexpr auto SeatAnimationId = 0x288; // USeatAnimationId*
	}

	namespace n_UClueConnectionConfig { // : UDataAsset
		constexpr auto CluesThatCanDescribeSites = 0x28; // TArray<FClueSiteTypeSupportedDescribedByEntry>
		constexpr auto ClueGenerators = 0x38; // TArray<UClueDescriptorGenerator*>
		constexpr auto DestinationGenerators = 0x48; // TArray<UClueDestinationGenerator*>
	}

	namespace n_URewardGenTaleQuestServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto SpawnData = 0x28; // UTaleQuestWeightedItemDescSpawnDataAsset*
	}

	namespace n_UMeleeChargeAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto MinAngleToTargetToActivate = 0xc8; // float
		constexpr auto MaxAngleToTargetToActivate = 0xcc; // float
		constexpr auto MinTimeBetweenCheck = 0xd0; // float
		constexpr auto MaxTimeBetweenCheck = 0xd4; // float
		constexpr auto ChanceOfActivation = 0xd8; // float
		constexpr auto ChargeTime = 0xdc; // float
	}

	namespace n_UMovieScene2DTransformTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UWidgetTree { // : UObject
		constexpr auto RootWidget = 0x28; // UWidget*
		constexpr auto AllWidgets = 0x30; // TArray<UWidget*>
	}

	namespace n_UScoreRewardDataAsset { // : UDataAsset
		constexpr auto ScoreRewardData = 0x28; // FScoreRewardData
		constexpr auto ScoreReasonIcons = 0x108; // TArray<FScoreReasonIcons>
	}

	namespace n_UAISpawnCampaignCondition { // : UAISpawnOverrideCondition
		constexpr auto CampaignName = 0x30; // FName
	}

	namespace n_UTaleQuestAddRiddleMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UEditableGameplayTagQueryExpression_AnyTagsMatch { // : UEditableGameplayTagQueryExpression
		constexpr auto Tags = 0x28; // FGameplayTagContainer
	}

	namespace n_ATavernStrangersBarrel { // : AActor
		constexpr auto BarrelMeshComponent = 0x3d0; // UStaticMeshComponent*
	}

	namespace n_UNavigationQueryFilter { // : UObject
		constexpr auto Areas = 0x28; // TArray<FNavigationFilterArea>
		constexpr auto IncludeFlags = 0x38; // FNavigationFilterFlags
		constexpr auto ExcludeFlags = 0x3c; // FNavigationFilterFlags
	}

	namespace n_UPetsPartsDesc { // : UAIPartsDesc
		constexpr auto Mesh = 0x30; // FStringAssetReference
		constexpr auto HighResMesh = 0x40; // FStringAssetReference
		constexpr auto PetMaterials = 0x50; // TArray<FPetMaterialEntry>
		constexpr auto PetSize = 0x60; // EPetSize
		constexpr auto PetOverrideAsset = 0x68; // UPetCustomisationOverrideDataAsset*
	}

	namespace n_UStatusResponseSetBlackboardBoolKey { // : UStatusResponse
		constexpr auto BlackboardBoolKeyName = 0x30; // FName
		constexpr auto bValueWhenActive = 0x38; // bool
		constexpr auto ShouldClearKeyOnEnd = 0x39; // bool
	}

	namespace n_UInvalidClothingCategory { // : UClothingCategory
		constexpr auto PiratePreviewRemovals = 0x78; // TArray<UClothingCategory*>
		constexpr auto PiratePreviewAnim = 0x88; // UAnimationAsset*
		constexpr auto PiratePreviewCamera = 0x90; // FName
		constexpr auto PiratePreviewSpin = 0x98; // bool
	}

	namespace n_USceneCaptureComponentCube { // : USceneCaptureComponent
		constexpr auto TextureTarget = 0x318; // UTextureRenderTargetCube*
	}

	namespace n_UMaterialExpressionObjectPositionWS { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UEventBroadcastStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ATreasureChestStatic { // : ANonDisplaceableLargeStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UInvalidItemCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UWeightedItemDescSpawnDataAsset { // : UDataAsset
		constexpr auto WeightedItemSpawnDatas = 0x28; // TArray<FWeightedItemDescSpawnData>
	}

	namespace n_UConcertinaItemCategory { // : UInstrumentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UCollectorsChestShipOwnershipPropagationComponent { // : UActorComponent
		constexpr auto ItemProxy = 0xc8; // TWeakObjectPtr<AActor>
	}

	namespace n_UInvokeDamageDesc { // : UTaleQuestStepDesc
		constexpr auto ActorToDamage = 0x80; // FQuestVariableActor
		constexpr auto DamageType = 0x90; // UDamagerType*
		constexpr auto DamageAmount = 0x98; // float
		constexpr auto DamageReason = 0x9c; // EHealthChangedReason
	}

	namespace n_UAISpawnComplexCondition { // : UAISpawnOverrideCondition
		constexpr auto Conditions = 0x30; // TArray<UAISpawnOverrideCondition*>
	}

	namespace n_UTaleQuestAddTemporaryEntitlementStepDesc { // : UTaleQuestStepDesc
		constexpr auto Entitlements = 0x80; // TArray<UClass*>
	}

	namespace n_AGameplayEventSignal { // : AActor
		constexpr auto ProxyClass = 0x3d8; // ANetProxy*
		constexpr auto NexProxyFeatureToggle = 0x3e0; // FName
		constexpr auto TimeForSignalToActivateInSeconds = 0x3e8; // float
		constexpr auto TimeForSignalToDeactivateInSeconds = 0x3ec; // float
		constexpr auto TimeForAtmosphericPressureZoneToActivateInSeconds = 0x3f0; // float
		constexpr auto AtmosphericPressureZoneComponent = 0x3f8; // UAtmosphericPressureZoneComponent*
		constexpr auto LightingZoneComponent = 0x400; // ULightingZoneComponent*
		constexpr auto RotateMeshToActorComponent = 0x408; // URotateMeshToActorComponent*
		constexpr auto SignalMesh = 0x410; // UMeshComponent*
		constexpr auto Root = 0x418; // USceneComponent*
		constexpr auto SignalMaterial = 0x420; // UMaterialInstanceDynamic*
		constexpr auto EventType = 0x428; // EGameplayEventSignalType
		constexpr auto OwningNetworkRegion = 0x490; // ENetworkRegion
	}

	namespace n_UContestSelectIslandForItemStepDesc { // : UTaleQuestStepDesc
		constexpr auto IslandArchetype = 0x80; // FQuestVariableContestIslandArchetype
		constexpr auto NumberOfChests = 0x90; // FQuestVariableInt
		constexpr auto PreviousIslands = 0xa0; // FQuestVariableNameArray
		constexpr auto SelectedIslands = 0xb0; // FQuestVariableNameArray
	}

	namespace n_UEditableGameplayTagQuery { // : UObject
		constexpr auto UserDescription = 0x28; // FString
		constexpr auto RootExpression = 0x48; // UEditableGameplayTagQueryExpression*
		constexpr auto TagQueryExportText_Helper = 0x50; // FGameplayTagQuery
	}

	namespace n_UBTTask_InteractWith { // : UBTTask_BlackboardBase
		constexpr auto NotificationId = 0x88; // UNotificationInputId*
	}

	namespace n_UStorageContainerSpawnerWeightedListOfWeightedItemList { // : UStorageContainerSpawnerItemListBase
		constexpr auto Entries = 0x28; // TArray<FStorageContainerWeightedItemListEntryList>
	}

	namespace n_ACampfire { // : AActor
		constexpr auto UnbuiltMesh = 0x3f0; // UStaticMeshComponent*
		constexpr auto BuiltMesh = 0x3f8; // UStaticMeshComponent*
		constexpr auto FireParticleSystem = 0x400; // UParticleSystemComponent*
		constexpr auto PointLight = 0x408; // UPointLightComponent*
		constexpr auto OverlapTrigger = 0x410; // UOverlapTriggerComponent*
		constexpr auto BoxCollider = 0x418; // UBoxComponent*
		constexpr auto StatusEffectManagerComponent = 0x420; // ULightWeightStatusEffectManagerComponent*
		constexpr auto DitherComponent = 0x428; // UDitherComponent*
		constexpr auto InteractableComponent = 0x430; // UActionRulesInteractableComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto ShelteredComponent = 0x440; // UShelteredComponent*
		constexpr auto WaterExposureComponent = 0x448; // UWaterExposureComponent*
		constexpr auto FlammableComponent = 0x450; // UFlammableComponent*
		constexpr auto SoakableComponent = 0x458; // USoakableComponent*
		constexpr auto CookerChildActorComponent = 0x460; // UChildActorComponent*
		constexpr auto ExtinguishedVFX = 0x468; // UObject*
		constexpr auto HasSmoke = 0x470; // bool
		constexpr auto SmokeOffset = 0x474; // FVector
		constexpr auto BurnDownTimeSeconds = 0x480; // float
		constexpr auto BurnOutTimeSoakedSeconds = 0x484; // float
		constexpr auto AddWoodHoldTime = 0x488; // float
		constexpr auto WwiseEmitterName = 0x48c; // FName
		constexpr auto IgnitedWwiseEvent = 0x498; // UWwiseEvent*
		constexpr auto ExtinguishedWwiseEvent = 0x4a0; // UWwiseEvent*
		constexpr auto BurnDownWwiseEvent = 0x4a8; // UWwiseEvent*
		constexpr auto WoodAddedWwiseEvent = 0x4b0; // UWwiseEvent*
		constexpr auto StokedWwiseEvent = 0x4b8; // UWwiseEvent*
		constexpr auto BurningLoopStart = 0x4c0; // UWwiseEvent*
		constexpr auto BurningLoopEnd = 0x4c8; // UWwiseEvent*
		constexpr auto CampfireWwisePool = 0x4d0; // UWwiseObjectPoolWrapper*
		constexpr auto WoodCharOverTime = 0x4d8; // UCurveFloat*
		constexpr auto ImpactLightChances = 0x4e0; // TArray<FCampfireDamageLightingChance>
		constexpr auto WieldableItemCannotLightCampfire = 0x4f0; // FText
		constexpr auto WieldableItemNotReadyToLightCampfire = 0x528; // FText
		constexpr auto LightCampfire = 0x560; // FText
		constexpr auto NeedWoodToBuildCampfire = 0x598; // FText
		constexpr auto BuildCampfire = 0x5d0; // FText
		constexpr auto StokeCampfire = 0x608; // FText
		constexpr auto Built = 0x640; // bool
		constexpr auto BurnedProportion = 0x644; // float
		constexpr auto OnFire = 0x648; // bool
		constexpr auto IgnitedStatus = 0x650; // FStatus
		constexpr auto WoodCategory = 0x668; // UItemCategory*
		constexpr auto Cooker = 0x670; // TScriptInterface<Class>
		constexpr auto BuiltMeshCharrableMaterial = 0x680; // UMaterialInstanceDynamic*
		constexpr auto OverlappingActors = 0x688; // TArray<AActor*>
	}

	namespace n_UStaticMeshAudioDataAsset { // : UDataAsset
		constexpr auto MeshToAudioAssociations = 0x28; // TArray<FStaticMeshAudioAssociation>
	}

	namespace n_UBTTask_BlackboardBase { // : UBTTaskNode
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_UAbilityTask_WaitGameplayEffectRemoved { // : UAbilityTask
		constexpr auto OnRemoved = 0x68; // FScriptMulticastDelegate
		constexpr auto InvalidHandle = 0x78; // FScriptMulticastDelegate
	}

	namespace n_ARewardPouchItemProxy { // : ADroppedPouchItemProxy
		constexpr auto Company = 0x7e8; // UCompany*
	}

	namespace n_UAthenaLocalPlayer { // : ULocalPlayer
		constexpr auto ViewportClient = 0x60; // UGameViewportClient*
		constexpr auto AspectRatioAxisConstraint = 0xa8; // EAspectRatioAxisConstraint
		constexpr auto PendingLevelPlayerControllerClass = 0xb0; // APlayerController*
		constexpr auto bSentSplitJoin = 0xb8; // char : 1
		constexpr auto MinimumAspectRatio = 0xbc; // float
	}

	namespace n_UAthenaStreamedLevelService { // : UObject
		constexpr auto ManagedLevels = 0x30; // TArray<FAthenaStreamedLevelData>
	}

	namespace n_UMovieSceneSpawnSection { // : UMovieSceneBoolSection
		constexpr auto DefaultValue = 0xa0; // bool
		constexpr auto BoolCurve = 0xa8; // FIntegralCurve
	}

	namespace n_UBTDecorator_IsBBEntryOfClass { // : UBTDecorator_BlackboardBase
		constexpr auto TestClass = 0x90; // UObject*
	}

	namespace n_UAIResource_Logic { // : UGameplayTaskResource
		constexpr auto ManualResourceID = 0x28; // int32_t
		constexpr auto bManuallySetID = 0x30; // char : 1
	}

	namespace n_USoundNodeDistanceCrossFade { // : USoundNode
		constexpr auto CrossFadeInput = 0x38; // TArray<FDistanceDatum>
	}

	namespace n_UBlockMigrationForCrewTaskStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UBlockMigrationForCrewTaskStepDesc*
		constexpr auto TaskStep = 0x98; // UTaleQuestStep*
	}

	namespace n_UExitOnAllCrewsDestroyedStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UFaceTargetComponent { // : UActorComponent
		constexpr auto BlendRotationInterpSpeed = 0xc8; // float
		constexpr auto BlendRotationUseConstantInterp = 0xcc; // bool
		constexpr auto TargetActorToFace = 0xe8; // AActor*
		constexpr auto ClampYawRange = 0x138; // float
		constexpr auto ClampYawCentre = 0x13c; // float
		constexpr auto ClampYawRate = 0x140; // float
	}

	namespace n_UNoiseMakerComponent { // : UWwiseEmitterComponent
		constexpr auto NoiseMakerComponentParams = 0x2e0; // UNoiseMakerComponentParams*
	}

	namespace n_UCustomVaultService { // : UObject
		constexpr auto World = 0x30; // UWorld*
		constexpr auto CustomVaultServiceId = 0x38; // FGuid
	}

	namespace n_AMastEmissaryFlag { // : AEmissaryFlag
		constexpr auto CustomizationComponent = 0x3d8; // UReplicatedShipPartCustomizationComponent*
		constexpr auto StartAmbientFlagSfx = 0x3e0; // UWwiseEvent*
		constexpr auto StopAmbientFlagSfx = 0x3e8; // UWwiseEvent*
		constexpr auto AttachFlagSfx = 0x3f0; // UWwiseEvent*
		constexpr auto DetachFlagSfx = 0x3f8; // UWwiseEvent*
		constexpr auto SfxPool = 0x400; // UWwiseObjectPoolWrapper*
		constexpr auto RootSceneComponent = 0x408; // USceneComponent*
		constexpr auto EmissaryFlagStaticMeshComponent = 0x410; // UStaticMeshComponent*
		constexpr auto CurrentEmissaryFlagMesh = 0x440; // FStringAssetReference
	}

	namespace n_UBTDecorator_CurrentAIStrategy { // : UBTDecorator_BaseConditional
		constexpr auto Strategies = 0x68; // TArray<UAIStrategyId*>
	}

	namespace n_UNPCLootSpawnComponent { // : UActorComponent
		constexpr auto LootItemSpawnRelativeLocations = 0xd0; // TArray<FVector>
	}

	namespace n_UPlanarReflectionPlaneComponent { // : USceneComponent
		constexpr auto AttachParent = 0xc8; // USceneComponent*
		constexpr auto AttachChildren = 0xd0; // TArray<USceneComponent*>
		constexpr auto AttachSocketName = 0xe0; // FName
		constexpr auto bRequiresCustomLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteTranslation = 0xe8; // char : 1
		constexpr auto bAbsoluteRotation = 0xe8; // char : 1
		constexpr auto bAbsoluteScale = 0xe8; // char : 1
		constexpr auto bVisible = 0xe8; // char : 1
		constexpr auto bHiddenInGame = 0xe8; // char : 1
		constexpr auto bShouldUpdatePhysicsVolume = 0xe8; // char : 1
		constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0xe9; // char : 1
		constexpr auto bUseAttachParentBound = 0xe9; // char : 1
		constexpr auto bComponentIsUnionOfChildren = 0xe9; // char : 1
		constexpr auto bJitterReduction = 0xe9; // char : 1
		constexpr auto CacheRootVelocity = 0xe9; // char : 1
		constexpr auto bWorldToComponentUpdated = 0xe9; // char : 1
		constexpr auto PhysicsVolume = 0xf8; // TWeakObjectPtr<APhysicsVolume>
		constexpr auto RelativeScale3D = 0x11c; // FVector
		constexpr auto RelativeLocation = 0x128; // FVector
		constexpr auto RelativeRotation = 0x134; // FRotator
		constexpr auto Mobility = 0x220; // EComponentMobility
		constexpr auto DetailMode = 0x221; // EDetailMode
		constexpr auto ComponentVelocity = 0x22c; // FVector
		constexpr auto PhysicsVolumeChangedDelegate = 0x238; // FScriptMulticastDelegate
		constexpr auto SocketVelocitiesToCache = 0x258; // TArray<FName>
	}

	namespace n_UTaleQuestGenericBannerStepDesc { // : UTaleQuestStepDesc
		constexpr auto Message = 0x80; // FText
		constexpr auto Header = 0xb8; // FText
		constexpr auto Tag = 0xf0; // FName
		constexpr auto DisableMusic = 0xf8; // bool
	}

	namespace n_UBoxComponent { // : UShapeComponent
		constexpr auto BoxExtent = 0x5a8; // FVector
	}

	namespace n_UBTTask_StopOccupyingHangoutSpot { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_UAthenaDebugMenuComponent { // : UDebugMenuComponent
		constexpr auto DebugMenuInstance = 0xf0; // ADebugMenu*
	}

	namespace n_UBuriedDecalVisibilityReplicationChannel { // : UIndividualReplicationChannelComponent
		constexpr auto ReplicatedDecals = 0xc8; // TArray<FBuryDecal>
	}

	namespace n_UAbilityTask_WaitDelay { // : UAbilityTask
		constexpr auto OnFinish = 0x68; // FScriptMulticastDelegate
	}

	namespace n_USoundGroups { // : UObject
		constexpr auto SoundGroupProfiles = 0x28; // TArray<FSoundGroup>
	}

	namespace n_UBTService_SetAIStrategy { // : UBTService
		constexpr auto NewStrategy = 0x70; // UAIStrategyId*
	}

	namespace n_UTaleQuestUnionStep { // : UTaleQuestParallelStep
		constexpr auto Steps = 0x98; // TArray<UTaleQuestStep*>
		constexpr auto Desc = 0xa8; // UTaleQuestParallelStepDesc*
	}

	namespace n_UKrakenTentacleAIAudioComponentParams { // : UDataAsset
		constexpr auto TentacleEmitterPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto MouthEmitterPool = 0x30; // UWwiseObjectPoolWrapper*
		constexpr auto PlayKrakenTentacleEmerge = 0x38; // UWwiseEvent*
		constexpr auto PlayKrakenTentacleSubmerge = 0x40; // UWwiseEvent*
		constexpr auto PlayKrakenTentacleSuckTell = 0x48; // UWwiseEvent*
		constexpr auto StopKrakenTentacleSuckTell = 0x50; // UWwiseEvent*
		constexpr auto PlayKrakenTentacleSuck = 0x58; // UWwiseEvent*
		constexpr auto StopKrakenTentacleSuck = 0x60; // UWwiseEvent*
		constexpr auto PlayKrakenTentacleMouthAmbience = 0x68; // UWwiseEvent*
		constexpr auto StopKrakenTentacleMouthAmbience = 0x70; // UWwiseEvent*
		constexpr auto PlayPlayerInAirWind = 0x78; // UWwiseEvent*
		constexpr auto StopPlayerInAirWind = 0x80; // UWwiseEvent*
		constexpr auto PlayKrakenCatchPlayer = 0x88; // UWwiseEvent*
		constexpr auto PlayKrakenSpitPlayer = 0x90; // UWwiseEvent*
		constexpr auto KrakenSuckFactorRtpc = 0x98; // FName
		constexpr auto PlayKrakenTentacleWrapTell = 0xa0; // UWwiseEvent*
		constexpr auto StopKrakenTentacleWrapTell = 0xa8; // UWwiseEvent*
	}

	namespace n_UMaterialShaderQualitySettings { // : UObject
		constexpr auto ForwardSettingMap = 0x28; // TMap<FName, UShaderPlatformQualitySettings*>
	}

	namespace n_UShroudBreakerTrackerComponent { // : UActorComponent
		constexpr auto ShroudBreakerActive = 0xd0; // bool
	}

	namespace n_UNPCDialogConditionalTextHeader { // : UNPCDialogHeader
		constexpr auto Text = 0x28; // TArray<UNPCDialogConditionalText*>
		constexpr auto DefaultText = 0x38; // FText
	}

	namespace n_UFoodItemCategory_C { // : UBaseFoodItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UFireworksSettings { // : UDeveloperSettings
		constexpr auto FlashbangRadius = 0x38; // float
		constexpr auto FlashbangFlashTimer = 0x3c; // float
		constexpr auto FlashbangFadeOutTimer = 0x40; // float
		constexpr auto FlashbangCooldown = 0x44; // float
		constexpr auto LoadedFuseTimer = 0x48; // float
	}

	namespace n_UFrontendPremiumShopViewModelComponent { // : UPremiumShopViewModelComponentBase
		constexpr auto ShopDesc = 0x2e8; // UShopDesc*
		constexpr auto StoreDesc = 0x308; // UShopDesc*
	}

	namespace n_UTaleUnloadSpireStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_URemoveFlameOfFateTypeStepDesc { // : UTaleQuestStepDesc
		constexpr auto FlameOfFateTypeToRemove = 0x80; // EFlameOfFateType
		constexpr auto LanternItemCategory = 0x88; // UItemCategory*
	}

	namespace n_UEditableTextBox { // : UWidget
		constexpr auto Text = 0x138; // FText
		constexpr auto TextDelegate = 0x170; // DelegateProperty
		constexpr auto WidgetStyle = 0x180; // FEditableTextBoxStyle
		constexpr auto Style = 0x9e0; // USlateWidgetStyleAsset*
		constexpr auto HintText = 0x9e8; // FText
		constexpr auto HintTextDelegate = 0xa20; // DelegateProperty
		constexpr auto Font = 0xa30; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xa70; // FLinearColor
		constexpr auto BackgroundColor = 0xa80; // FLinearColor
		constexpr auto ReadOnlyForegroundColor = 0xa90; // FLinearColor
		constexpr auto IsReadOnly = 0xaa0; // bool
		constexpr auto IsPassword = 0xaa1; // bool
		constexpr auto MinimumDesiredWidth = 0xaa4; // float
		constexpr auto Padding = 0xaa8; // FMargin
		constexpr auto IsCaretMovedWhenGainFocus = 0xab8; // bool
		constexpr auto SelectAllTextWhenFocused = 0xab9; // bool
		constexpr auto RevertTextOnEscape = 0xaba; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0xabb; // bool
		constexpr auto SelectAllTextOnCommit = 0xabc; // bool
		constexpr auto OnTextChanged = 0xac0; // FScriptMulticastDelegate
		constexpr auto OnTextCommitted = 0xad0; // FScriptMulticastDelegate
	}

	namespace n_AHoleService { // : AActor
		constexpr auto Holes = 0x3d8; // TArray<TWeakObjectPtr<AHole>>
		constexpr auto HoleContainers = 0x3e8; // TArray<FHoleContainer>
		constexpr auto HoleDataAsset = 0x3f8; // UHoleDataAsset*
	}

	namespace n_AShipBumperZone { // : AActor
		constexpr auto UseInverseRightVector = 0x3d0; // bool
		constexpr auto BumperZoneComponent = 0x400; // UBoxComponent*
		constexpr auto DistanceRadiusComponent = 0x408; // USphereComponent*
		constexpr auto ApplyAngularImpulse = 0x410; // bool
		constexpr auto AngularImpulse = 0x414; // float
		constexpr auto OverrideWheelControl = 0x418; // bool
		constexpr auto ApplyWheelTurbulence = 0x419; // bool
		constexpr auto MinWheelTurbulence = 0x41c; // float
		constexpr auto MaxWheelTurbulence = 0x420; // float
	}

	namespace n_UEdGraphNode { // : UObject
		constexpr auto Pins = 0x28; // TArray<UEdGraphPin*>
		constexpr auto NodePosX = 0x38; // int32_t
		constexpr auto NodePosY = 0x3c; // int32_t
		constexpr auto NodeWidth = 0x40; // int32_t
		constexpr auto NodeHeight = 0x44; // int32_t
		constexpr auto bHasCompilerMessage = 0x48; // char : 1
		constexpr auto NodeComment = 0x50; // FString
		constexpr auto bCommentBubblePinned = 0x60; // bool
		constexpr auto bCommentBubbleVisible = 0x61; // bool
		constexpr auto ErrorType = 0x64; // int32_t
		constexpr auto ErrorMsg = 0x68; // FString
		constexpr auto NodeGuid = 0x78; // FGuid
		constexpr auto AdvancedPinDisplay = 0x88; // ENodeAdvancedPins
		constexpr auto bIsNodeEnabled = 0x89; // bool
		constexpr auto bIsDebugFunction = 0x8a; // bool
	}

	namespace n_AContestManagerService { // : AActor
		constexpr auto ContestServiceTelemetryComponent = 0x3e0; // UContestServiceTelemetryComponent*
		constexpr auto CrewSpawnLocationsComponent = 0x3e8; // UContestSpawnLocationsComponent*
		constexpr auto ContestRewardComponent = 0x3f0; // UContestRewardComponent*
		constexpr auto ContestCeremoniesComponent = 0x3f8; // UContestCeremoniesComponent*
		constexpr auto ContestUIComponent = 0x400; // UContestUIComponent*
		constexpr auto ContestTeamAssignmentComponent = 0x410; // UContestTeamAssignmentComponent*
		constexpr auto CurrentContestState = 0x418; // EContestState
		constexpr auto StateEndTime = 0x420; // int64_t
		constexpr auto TrackedCrewsInContest = 0x580; // TArray<FTrackedCrewInContest>
		constexpr auto BackfilledPlayers = 0x5d0; // TArray<AAthenaPlayerState*>
		constexpr auto ContestsPlayedCountBlacklist = 0x5e0; // TArray<FGuid>
		constexpr auto CurrentContestVoyageDataAsset = 0x660; // UEmergentContestVoyageRecipeDataAsset*
		constexpr auto CurrentTallTaleContestDataAsset = 0x668; // UTallTaleContestRecipeDataAsset*
		constexpr auto ArenaName = 0x6a8; // FText
		constexpr auto ContestVoyages = 0x800; // UContestVoyagesDataAsset*
		constexpr auto CompleteContestAchievementRewarder = 0x888; // FAchievementCompleteContest
		constexpr auto ScoreSystem = 0x8b0; // UContestScoreSystem*
		constexpr auto ContestShipAppearences = 0x8b8; // UContestShipCatalogueDataAsset*
		constexpr auto ContestUIDescriptions = 0x8c0; // FContestUIDescriptions
		constexpr auto ContestStagingTavern = 0x940; // AAthenaContestTavern*
		constexpr auto TavernPawnType = 0x948; // APawn*
		constexpr auto ArenaCompany = 0x950; // UCompany*
		constexpr auto StatTriggerForCompletingAContest = 0x958; // UConditionalStatsTriggerType*
		constexpr auto StatTriggerForShipsCompletingContest = 0x960; // UConditionalStatsTriggerType*
		constexpr auto ContestUniqueId = 0x98c; // FGuid
		constexpr auto DebugRepActor = 0x9a0; // AContestManagerDebugRepActor*
		constexpr auto PlayersNeedingTeleport = 0x9b8; // TArray<AController*>
		constexpr auto PlayersAwaitingContestRespawn = 0x9c8; // TArray<AController*>
		constexpr auto ItemsToReset = 0x9d8; // TArray<UItemCategory*>
		constexpr auto CachedLeaderboard = 0xa08; // TArray<FCrewScore>
		constexpr auto InitialStagingRequirements = 0xa20; // FContestCrewRequirementData
		constexpr auto FallbackStagingRequirements = 0xa48; // FContestCrewRequirementData
		constexpr auto ContestRequirements = 0xa70; // FContestCrewRequirementData
		constexpr auto ScoreScrollDesc = 0xa98; // UItemDesc*
		constexpr auto ScoreScrollItem = 0xaa0; // AItemInfo*
		constexpr auto CurrentPeriod = 0xad4; // int32_t
		constexpr auto CrewsRequestingMigration = 0xad8; // TArray<FGuid>
	}

	namespace n_UPetCustomisationOverrideMappingsDataAsset { // : UDataAsset
		constexpr auto MappingEntries = 0x28; // TArray<FPetCustomiationOverrideMappingEntry>
	}

	namespace n_UWrapBoxSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto bFillEmptySpace = 0x48; // bool
		constexpr auto FillSpanWhenLessThan = 0x4c; // float
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UBTTask_RunOneShotCustomAnimation { // : UBTTaskNode
		constexpr auto UseFixedOneShotCustomAnimationName = 0x60; // bool
		constexpr auto FixedOneShotCustomAnimationName = 0x64; // FName
		constexpr auto OneShotCustomAnimationNameKey = 0x70; // FBlackboardKeySelector
		constexpr auto GetDurationAndEffectTime = 0x98; // bool
		constexpr auto AnimationDuration = 0xa0; // FBlackboardKeySelector
		constexpr auto AnimationEffectTime = 0xc8; // FBlackboardKeySelector
		constexpr auto StopCurrentLoopingAnimation = 0xf0; // bool
	}

	namespace n_ASpeakingTrumpet { // : AStaticMeshWieldableItem
		constexpr auto LoudVoiceAttenuationScaler = 0x798; // float
		constexpr auto QuietVoiceAttenuationScaler = 0x79c; // float
		constexpr auto NonVerbalBroadcastRadiusScaler = 0x7a0; // float
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7b0; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x7b8; // UUsableWieldableComponent*
	}

	namespace n_URegionalAssetListDataAsset { // : UDataAsset
		constexpr auto RegionAssets = 0x28; // TArray<FStringAssetReference>
	}

	namespace n_UAudioEventToComponentMapComponent { // : UActorComponent
		constexpr auto LocalComponentMappings = 0xc8; // TArray<FEventToComponentMapping>
	}

	namespace n_USpawnCollectableQuestObjectStepFromActorDesc { // : USpawnCollectableQuestObjectStepDesc
		constexpr auto PlaceableActor = 0x98; // FQuestVariableActor
		constexpr auto SocketName = 0xa8; // FName
		constexpr auto AttachToSocket = 0xb0; // bool
	}

	namespace n_ABarrelsOfPlentyDebugSpawnLocation { // : AActor
		constexpr auto Objects = 0x3d0; // TArray<FBarrelsOfPlentyDebugLocationEntry>
		constexpr auto SpawnCentre = 0x3e0; // FVector
		constexpr auto Radius = 0x3ec; // float
	}

	namespace n_ADebugTeleportationDestinationService { // : AActor
		constexpr auto DebugTeleportationRegistry = 0x3e8; // TArray<FDebugTeleportDestinationEntry>
	}

	namespace n_UCameraRollModifier { // : UCameraModifier
		constexpr auto bDebug = 0x28; // char : 1
		constexpr auto bExclusive = 0x28; // char : 1
		constexpr auto Priority = 0x2c; // char
		constexpr auto CameraOwner = 0x30; // APlayerCameraManager*
		constexpr auto AlphaInTime = 0x38; // float
		constexpr auto AlphaOutTime = 0x3c; // float
		constexpr auto Alpha = 0x40; // float
	}

	namespace n_UPetDangerComponent { // : UActorComponent
		constexpr auto DangerDataAsset = 0xc8; // UPetDangerDataAsset*
	}

	namespace n_UContestWaitForItemHandInStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_AProgressShipSpawnLocation { // : AShipSpawnLocation
		constexpr auto LinkedShipSpawnLocations = 0x3d0; // TArray<AShipSpawnLocation*>
		constexpr auto AssociatedSpawnLocations = 0x3e0; // TArray<ASpawnLocation*>
		constexpr auto ShipSize = 0x3f0; // UShipSize*
		constexpr auto Description = 0x3f8; // FString
		constexpr auto BoxComponent = 0x408; // UBoxComponent*
	}

	namespace n_UWieldedItemComponent { // : USceneComponent
		constexpr auto WieldableItemSetComponent = 0x2b0; // UWieldableItemSetComponent*
		constexpr auto ReplicatedCurrentlyWieldedItem = 0x2b8; // AActor*
		constexpr auto CurrentlyWieldedItem = 0x2c0; // AActor*
		constexpr auto EpochId = 0x3a8; // int32_t
		constexpr auto PendingServerWieldSet = 0x3b8; // FServerWieldSet
	}

	namespace n_UAnimNotify_WwiseSoundMeshSwitch { // : UAnimNotify_WwiseSound
		constexpr auto SkeletalMeshSwitchGroup = 0x70; // FName
		constexpr auto MeshOverrides = 0x78; // TArray<FAnimNotify_SoundSwitch>
	}

	namespace n_UAlwaysRelevantPlayerNameplateComponent { // : UPlayerNameplateComponent
		constexpr auto PlayerStatePtr = 0x370; // AAthenaPlayerState*
	}

	namespace n_UParticleModuleMeshRotation_Seeded { // : UParticleModuleMeshRotation
		constexpr auto RandomSeedInfo = 0x90; // FParticleRandomSeedInfo
	}

	namespace n_UVoyageCheckpointProposalDesc { // : UVoyageProposalDesc
		constexpr auto TaleIndex = 0x138; // int32_t
	}

	namespace n_USpawnPhasedActorWithTransformStepBaseDesc { // : UTaleQuestStepDesc
		constexpr auto Actor = 0x80; // UClass*
		constexpr auto MarkAsCritical = 0xa0; // bool
		constexpr auto CriticalActorLostMessage = 0xa8; // FText
		constexpr auto ActorVar = 0xe0; // FQuestVariableActor
	}

	namespace n_UPersistenceIdentifierMap { // : UDataAsset
		constexpr auto AssetReference = 0x28; // AActor*
		constexpr auto IdentifierMap = 0x30; // TArray<FPersistenceIdentifier>
	}

	namespace n_UNetworkSyncedAnimationComponent { // : UActorComponent
		constexpr auto PlayRateAdjustMaxTimeDelta = 0xc8; // float
		constexpr auto PlayRateAdjustMaxPercentageToSpeedUpPlayRate = 0xcc; // float
		constexpr auto PlayRateAdjustMaxPercentageToSlowDownPlayRate = 0xd0; // float
		constexpr auto ReplicatedAnimationProgression = 0xd4; // float
		constexpr auto ReplicatedPlayingAnimationIndex = 0xd8; // int32_t
		constexpr auto ReplicatedPlayRate = 0xdc; // float
		constexpr auto AnimInstance = 0xe8; // UAnimInstance*
	}

	namespace n_UNPCOnSurfaceManager { // : UObject
		constexpr auto NPCOnSurfaceDataAsset = 0x28; // UNPCOnSurfaceDataAsset*
		constexpr auto NPC = 0x30; // ANPCOnSurface*
		constexpr auto ParentActor = 0x50; // AActor*
		constexpr auto CannonActors = 0x58; // TArray<ACannon*>
		constexpr auto VOManager = 0x68; // UNPCOnSurfaceVOManager*
		constexpr auto CannonManager = 0x70; // UNPCOnSurfaceCannonManager*
	}

	namespace n_UMovieSceneSignedObject { // : UObject
		constexpr auto Signature = 0x28; // FGuid
	}

	namespace n_UPlantAIFormComponent { // : UAthenaAIFormComponent
		constexpr auto HealingParticlesTemplate = 0x160; // UParticleSystem*
		constexpr auto StartHealingAudioLoopEvent = 0x168; // UWwiseEvent*
		constexpr auto StopHealingAudioLoopEvent = 0x170; // UWwiseEvent*
		constexpr auto WeakParticlesTemplate = 0x178; // UParticleSystem*
		constexpr auto PlantBaseMaterial = 0x180; // UMaterial*
		constexpr auto HealingShaderParamName = 0x1a0; // FName
		constexpr auto IsNotHealingShaderParamValue = 0x1a8; // float
		constexpr auto IsHealingShaderParamValue = 0x1ac; // float
		constexpr auto ShaderParamBlendSpeed = 0x1b0; // float
		constexpr auto IsWet = 0x1b5; // bool
		constexpr auto IsWeak = 0x1b6; // bool
		constexpr auto HealingParticleSystemComponent = 0x1b8; // UParticleSystemComponent*
		constexpr auto WeakParticleSystemComponent = 0x1c0; // UParticleSystemComponent*
		constexpr auto PlantDynamicMaterialInstance = 0x1c8; // UMaterialInstanceDynamic*
	}

	namespace n_ULandscapeMeshCollisionComponent { // : ULandscapeHeightfieldCollisionComponent
		constexpr auto MeshGuid = 0x660; // FGuid
	}

	namespace n_UServerMigrationSerialisationDetailsTestsActorRef { // : UObject
		constexpr auto ActorReferenceWithMigrationMarkup = 0x28; // AActor*
	}

	namespace n_UAshenLordAshCloudSetupDataAsset { // : UDataAsset
		constexpr auto AshCloudRadiusInMetres = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto AshCloudHeightCoefficient = 0x58; // float
		constexpr auto AshCloudLifetime = 0x60; // FWeightedProbabilityRangeOfRanges
		constexpr auto ScaleUpSpeedCurve = 0x90; // UCurveFloat*
		constexpr auto DissipationCurve = 0x98; // UCurveFloat*
	}

	namespace n_ADebugLandmarkLocation { // : AActor
		constexpr auto Radius = 0x3d0; // float
		constexpr auto Height = 0x3d4; // float
		constexpr auto Pos = 0x3d8; // FVector
	}

	namespace n_UFireStatStepDesc { // : UTaleQuestStepDesc
		constexpr auto Stat = 0x80; // FQuestVariablePlayerStat
	}

	namespace n_ATestObscuringItemActor { // : AStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_USeatStat_SleepOnOtherCrewsBed { // : USeatStat
		constexpr auto Stat = 0x28; // FPlayerStat
	}

	namespace n_UWeightedItemDescSpawnDataAssetWithRandomQuantity { // : UDataAsset
		constexpr auto WeightedItemSpawnDatas = 0x28; // TArray<FWeightedItemDescSpawnDataWithRandomQuantity>
	}

	namespace n_UGetCurrentQuestInfoStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UGetCurrentQuestInfoStepDesc*
	}

	namespace n_UDoEQSQueryStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UDoEQSQueryStepDesc*
		constexpr auto CachedTaleEQSService = 0x98; // UTaleQuestEQSService*
	}

	namespace n_AFFTWater { // : AVolume
		constexpr auto FFTWaterComponent = 0x408; // UFFTWaterComponent*
		constexpr auto ExtendedPlaneComponent = 0x410; // UFFTWaterExtendedPlaneComponent*
	}

	namespace n_UPawnActionsComponent { // : UActorComponent
		constexpr auto ControlledPawn = 0xc8; // APawn*
		constexpr auto ActionStacks = 0xd0; // TArray<FPawnActionStack>
		constexpr auto ActionEvents = 0xe0; // TArray<FPawnActionEvent>
		constexpr auto CurrentAction = 0xf0; // UPawnAction*
	}

	namespace n_UCustomAnimationMontageDefinitionDataAsset { // : UDataAsset
		constexpr auto MontageId = 0x28; // FName
		constexpr auto MontageType = 0x30; // ECustomAnimationMontageType
		constexpr auto MontageData = 0x38; // UAnimMontage*
		constexpr auto LoopingData = 0x40; // FCustomAnimationMontageStagedLoopingData
		constexpr auto Interrupts = 0x68; // bool
	}

	namespace n_ULoadoutAsset { // : UDataAsset
		constexpr auto ItemLoadout = 0x28; // FItemLoadout
		constexpr auto FeatureName = 0x48; // FName
	}

	namespace n_UParticleLODLevel { // : UObject
		constexpr auto Level = 0x28; // int32_t
		constexpr auto bEnabled = 0x2c; // char : 1
		constexpr auto RequiredModule = 0x30; // UParticleModuleRequired*
		constexpr auto Modules = 0x38; // TArray<UParticleModule*>
		constexpr auto TypeDataModule = 0x48; // UParticleModule*
		constexpr auto SpawnModule = 0x50; // UParticleModuleSpawn*
		constexpr auto EventGenerator = 0x58; // UParticleModuleEventGenerator*
		constexpr auto SpawningModules = 0x60; // TArray<UParticleModuleSpawnBase*>
		constexpr auto SpawnModules = 0x70; // TArray<UParticleModule*>
		constexpr auto UpdateModules = 0x80; // TArray<UParticleModule*>
		constexpr auto OrbitModules = 0x90; // TArray<UParticleModuleOrbit*>
		constexpr auto EventReceiverModules = 0xa0; // TArray<UParticleModuleEventReceiverBase*>
		constexpr auto ConvertedModules = 0xb0; // char : 1
		constexpr auto PeakActiveParticles = 0xb4; // int32_t
	}

	namespace n_UCoherentUIGTPersistentDataAsset { // : UDataAsset
		constexpr auto AlwaysLoadedTextures = 0x28; // TArray<UTexture2D*>
	}

	namespace n_ASunkenCurseArtefact { // : AStatueThreatBase
		constexpr auto OffsetFromOrigin = 0x568; // FVector
		constexpr auto DefeatedStat = 0x574; // FPlayerStat
		constexpr auto ArtefactColour = 0x578; // FColor
		constexpr auto StaticMeshComponent = 0x580; // UStaticMeshComponent*
	}

	namespace n_URainZoneComponent { // : USceneComponent
		constexpr auto RainZoneParameters = 0x2b8; // FRainZoneParameters
	}

	namespace n_UGameplayTasksComponent { // : UActorComponent
		constexpr auto SimulatedTasks = 0xd0; // TArray<UGameplayTask*>
		constexpr auto TaskPriorityQueue = 0xe0; // TArray<UGameplayTask*>
		constexpr auto OnClaimedResourcesChange = 0x118; // FScriptMulticastDelegate
	}

	namespace n_UTeleportAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto QueryTemplate = 0xc8; // UEnvQuery*
		constexpr auto MinDistance = 0xd0; // float
		constexpr auto MaxDistance = 0xd4; // float
		constexpr auto MaintainRotation = 0xd8; // bool
		constexpr auto UseResurfaceDelay = 0xd9; // bool
		constexpr auto ResurfaceDelay = 0xe0; // FAthenaAIAbilityPlayerBasedRanges
	}

	namespace n_UBarrelsOfPlentyClueDestinationGenerator { // : UClueDestinationGenerator
		constexpr auto RequiredClueSiteDataType = 0x28; // UClueSiteData*
		constexpr auto WeightedSupportedDescriptorTypes = 0x30; // TArray<FWeightedClueDestinationDescriptor>
	}

	namespace n_AChecklistMap { // : ATreasureMap
		constexpr auto CanvasWidth = 0x7d8; // int32_t
		constexpr auto CanvasHeight = 0x7dc; // int32_t
		constexpr auto Font = 0x7e0; // UFont*
		constexpr auto FontScale = 0x7e8; // float
		constexpr auto FontLineSpacingScale = 0x7ec; // float
		constexpr auto ChecklistMapLayout = 0x7f8; // UChecklistMapLayout*
		constexpr auto Contents = 0x800; // FChecklistMapContents
	}

	namespace n_UTaleQuestGenerateClueSiteAtSeaLocationStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTaleLoadSpireStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UShipLiveryCatalogueService { // : UObject
		constexpr auto CatalogEntries = 0x30; // TArray<FShipLiveryCatalogueEntry>
	}

	namespace n_UAISenseBlueprintListener { // : UUserDefinedStruct
		constexpr auto Guid = 0x98; // FGuid
	}

	namespace n_UProvokeHitReactionStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTDecorator_NearSurfaceOfWater { // : UBTDecorator
		constexpr auto DistanceFromSurface = 0x68; // float
		constexpr auto ReverseLogic = 0x6c; // bool
	}

	namespace n_ASignalMechanism { // : AActor
		constexpr auto Root = 0x3d0; // USceneComponent*
		constexpr auto Arrow = 0x3d8; // UArrowComponent*
		constexpr auto SignalSpreadDegrees = 0x3e0; // float
		constexpr auto FocusDurationBeforeSignalling = 0x3e4; // float
		constexpr auto RequiresOcclusionValidation = 0x3e8; // bool
		constexpr auto Targets = 0x3f0; // TArray<AActor*>
	}

	namespace n_UWaitForAnimationStateExitProxy { // : UObject
		constexpr auto OnStateExit = 0x28; // FScriptMulticastDelegate
	}

	namespace n_UColorBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UVoyageLocationOnlyNamedIslandListDataAsset { // : UDataAsset
		constexpr auto OnlyNamedIslandsList = 0x28; // TArray<FName>
		constexpr auto FeatureToggledOnlyNamedIslandsListAsset = 0x38; // UVoyageLocationFeatureToggledOnlyNamedIslandListDataAsset*
	}

	namespace n_UCheatManager { // : UObject
		constexpr auto DebugCameraControllerRef = 0x28; // ADebugCameraController*
		constexpr auto DebugCameraControllerClass = 0x30; // ADebugCameraController*
	}

	namespace n_UBTDecorator_TestRangeOfSeenActors { // : UBTDecorator_TestRange
		constexpr auto EnterRange = 0x80; // FAIDataProviderFloatValue
		constexpr auto ExitRange = 0xb0; // FAIDataProviderFloatValue
		constexpr auto TestForOutsideRange = 0xe0; // bool
	}

	namespace n_UPetTelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMovieSceneByteTrack { // : UMovieScenePropertyTrack
		constexpr auto Enum = 0xb0; // UEnum*
	}

	namespace n_USoundMix { // : UObject
		constexpr auto bApplyEQ = 0x28; // char : 1
		constexpr auto EQPriority = 0x2c; // float
		constexpr auto EQSettings = 0x30; // FAudioEQEffect
		constexpr auto SoundClassEffects = 0x58; // TArray<FSoundClassAdjuster>
		constexpr auto InitialDelay = 0x68; // float
		constexpr auto FadeInTime = 0x6c; // float
		constexpr auto Duration = 0x70; // float
		constexpr auto FadeOutTime = 0x74; // float
	}

	namespace n_AFFTWaterService { // : AActor
		constexpr auto FFTWaterActor = 0x3e0; // TWeakObjectPtr<AAthenaFFTWater>
		constexpr auto FFTWaterComponent = 0x3e8; // TWeakObjectPtr<UFFTWaterComponent>
		constexpr auto ExtendedPlaneComponent = 0x3f0; // TWeakObjectPtr<UFFTWaterExtendedPlaneComponent>
		constexpr auto ReplicatedServerCreationTime = 0x448; // double
	}

	namespace n_UMovieSceneAkTrack { // : UMovieSceneTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
		constexpr auto bIsAMasterTrack = 0x98; // char : 1
	}

	namespace n_UCustomizableTriggerService { // : UObject
		constexpr auto RegisteredTriggers = 0x30; // TMap<int32_t, FCustomTriggerData>
		constexpr auto World = 0x80; // UWorld*
	}

	namespace n_ACullDistanceVolume { // : AVolume
		constexpr auto CullDistances = 0x408; // TArray<FCullDistanceSizePair>
		constexpr auto bEnabled = 0x418; // char : 1
	}

	namespace n_UPetShopDataAsset { // : UDataAsset
		constexpr auto Species = 0x28; // TArray<FPetShopPetSpecies>
	}

	namespace n_UParticleModuleMeshRotationRate { // : UParticleModuleRotationRateBase
		constexpr auto StartRotationRate = 0x50; // FRawDistributionVector
	}

	namespace n_UWwiseObjectPoolWrapper { // : UObject
		constexpr auto PoolName = 0x28; // FName
		constexpr auto MaxResources = 0x30; // int32_t
		constexpr auto DisableOcclusion = 0x34; // bool
		constexpr auto DisableReverb = 0x35; // bool
		constexpr auto PoolDensityParams = 0x38; // FWwiseNativeEmitterPoolDensityParams
	}

	namespace n_UCommodityDemandFrameworkEditorSettings { // : UDeveloperSettings
		constexpr auto CommodityDataFileLocation = 0x38; // FStringAssetReference
	}

	namespace n_UAISense_Prediction { // : UAISense
		constexpr auto RegisteredEvents = 0x88; // TArray<FAIPredictionEvent>
	}

	namespace n_ALevelSequenceActor { // : AActor
		constexpr auto bAutoPlay = 0x3d8; // bool
		constexpr auto PlaybackSettings = 0x3e0; // FMovieSceneSequencePlaybackSettings
		constexpr auto SequencePlayer = 0x408; // ULevelSequencePlayer*
		constexpr auto LevelSequence = 0x410; // FStringAssetReference
		constexpr auto BurnInOptions = 0x420; // ULevelSequenceBurnInOptions*
		constexpr auto BindingOverrides = 0x428; // UMovieSceneBindingOverrides*
		constexpr auto SpawnablesParent = 0x430; // AActor*
		constexpr auto BurnInInstance = 0x438; // ULevelSequenceBurnIn*
	}

	namespace n_UAISense_Damage { // : UAISense
		constexpr auto RegisteredEvents = 0x88; // TArray<FAIDamageEvent>
	}

	namespace n_UControllableIntentCombinerComponent { // : UIntentCombinerComponent
		constexpr auto CooperationMultiplier = 0xc8; // float
		constexpr auto StartMovingThreshold = 0xcc; // float
		constexpr auto StopMovingThreshold = 0xd0; // float
		constexpr auto ConflictedStartMovingThreshold = 0xd4; // float
		constexpr auto ConflictedStopMovingThreshold = 0xd8; // float
		constexpr auto IntentProviders = 0xe0; // TArray<UObject*>
	}

	namespace n_UButtonStyleAsset { // : UObject
		constexpr auto ButtonStyle = 0x28; // FButtonStyle
	}

	namespace n_UBTService_RunEQSQuery { // : UBTService_BlackboardBase
		constexpr auto OverrideQueryTemplateWithBlackboardValue = 0x98; // bool
		constexpr auto OverrideEQSKey = 0xa0; // FBlackboardKeySelector
		constexpr auto QueryTemplate = 0xc8; // UEnvQuery*
		constexpr auto QueryParams = 0xd0; // TArray<FEnvNamedValue>
		constexpr auto RunMode = 0xe0; // EEnvQueryRunMode
		constexpr auto ThrottleQueryTimePerFrame = 0xe1; // bool
		constexpr auto MaxSecondsToSpendOnQueryPerFrame = 0xe4; // float
	}

	namespace n_UIsOnFerryRadialContext { // : URadialContextBase
		constexpr auto InvertContext = 0x28; // bool
	}

	namespace n_UEmoteInputComponent { // : UAthenaCharacterBaseInputComponentWithInterference
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ULookingAtQuestBookInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto TargetQuestBook = 0x278; // AQuestBook*
	}

	namespace n_UMerchantCaptainSpawnComponent { // : UItemSpawnComponent
		constexpr auto SpawnOnStart = 0x2b0; // bool
		constexpr auto SpawnParams = 0x2b8; // FItemSpawnParams
		constexpr auto ReferencedSpawnDistributionAsset = 0x2e0; // UWeightedItemDescSpawnDataAsset*
		constexpr auto ReferencedSpawnDistribution = 0x2e8; // UItemSpawnDistributionAsset*
		constexpr auto SpawnTransforms = 0x2f0; // TArray<FItemSpawnTransform>
		constexpr auto SpawnTransformsWithRandomQuantities = 0x300; // TArray<FItemSpawnTransformWithRandomQuantity>
		constexpr auto FeatureToggle = 0x310; // FName
		constexpr auto SpawnSource = 0x318; // ESpawnedItemSource
		constexpr auto SpawnRate = 0x31c; // float
		constexpr auto DestroyProxiesOnEndPlay = 0x320; // bool
		constexpr auto SpawnWithPhysicsEnabled = 0x321; // bool
		constexpr auto DoNotAttachToOwnerWhenSpawned = 0x322; // bool
		constexpr auto DropItemsOnSpawn = 0x323; // bool
		constexpr auto DropItemsUsingPriorityAIDropParams = 0x324; // bool
		constexpr auto SpawnList = 0x328; // TArray<FSpawnInstance>
		constexpr auto SingleItemInstances = 0x338; // TArray<FSpawnInstance>
		constexpr auto SpawnedItems = 0x348; // TArray<FSpawnedItem>
	}

	namespace n_UWeightedDebrisDataAsset { // : UDataAsset
		constexpr auto Debris = 0x28; // TArray<FWeightedDebris>
	}

	namespace n_UGetVeilOfTheAncientsStepDesc { // : UTaleQuestStepDesc
		constexpr auto QuestVeil = 0x80; // FQuestVariableActor
	}

	namespace n_UBTTask_SwimTo { // : UBTTask_BlackboardBase
		constexpr auto WantsToReportPathFailure = 0x88; // bool
		constexpr auto PathFailureCounter = 0x90; // FBlackboardKeySelector
		constexpr auto AcceptableRadius = 0xb8; // float
		constexpr auto GoalCheckMode = 0xbc; // ESwimmingGoalCheckMode
		constexpr auto ArcMode = 0xbd; // ESwimmingArcMode
		constexpr auto ArcToTargetDirection = 0xbe; // EArcToTargetDirection
		constexpr auto Swim3DCrestingReaction = 0xbf; // ETaskReaction
		constexpr auto OffsetFromTargetActor = 0xc0; // FSpatialOffset
		constexpr auto SwimSyncMode = 0xc8; // ESwimmingSyncMode
		constexpr auto TrackTargetActor = 0xc9; // bool
		constexpr auto TrackedTargetActorKey = 0xd0; // FBlackboardKeySelector
		constexpr auto TimeToSlowDownAndStop = 0xf8; // float
		constexpr auto LineOfSightTestMode = 0xfc; // ESwimmingLineOfSightTest
	}

	namespace n_AShopkeeperInteractionProxy { // : AModalInteraction
		constexpr auto ShopDesc = 0x3e0; // UShopDesc*
	}

	namespace n_ASkellyFortService { // : AActor
		constexpr auto SkellyForts = 0x3e0; // TArray<ASkellyFort*>
		constexpr auto SkellyFortListDataAsset = 0x520; // USkellyFortListDataAsset*
		constexpr auto AllFortsData = 0x528; // TArray<USkellyFortDataAsset*>
		constexpr auto FortAIToggler = 0x538; // USkeletonFortAIToggler*
		constexpr auto EventDispatcher = 0x5d0; // FObjectMessagingDispatcher
	}

	namespace n_AWieldableNonStowableMockItem { // : AStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UInteractableService { // : UObject
		constexpr auto InteractableAreas = 0x38; // TArray<UInteractableArea*>
	}

	namespace n_AAggressiveGhostShipsEncounterService { // : AGameEventService
		constexpr auto Desc = 0x510; // FAggressiveGhostShipsEncounterServiceDesc
		constexpr auto Params = 0x520; // UAggressiveGhostShipsEncounterServiceParams*
		constexpr auto Encounters = 0x528; // TArray<AAggressiveGhostShipsEncounter*>
	}

	namespace n_UAIShipContextParamsDataAsset { // : UDataAsset
		constexpr auto TopDeckPlayerTrackerRadius = 0x28; // float
		constexpr auto TimeSpentEmotingOnInitialSpawn = 0x2c; // float
		constexpr auto ForceAIToAlwaysSpawn = 0x30; // bool
		constexpr auto IntervalBetweenRepairDamageAssignments = 0x34; // float
		constexpr auto IntervalBetweenUseCannonAssignments = 0x38; // float
		constexpr auto DistForMinXYAIInteractableUtility = 0x3c; // float
		constexpr auto DistForMaxXYAIInteractableUtility = 0x40; // float
		constexpr auto MinXYAIInteractableUtility = 0x44; // float
		constexpr auto MaxXYAIInteractableUtility = 0x48; // float
		constexpr auto DistForMinZAIInteractableUtility = 0x4c; // float
		constexpr auto DistForMaxZAIInteractableUtility = 0x50; // float
		constexpr auto MinZAIInteractableUtility = 0x54; // float
		constexpr auto MaxZAIInteractableUtility = 0x58; // float
		constexpr auto MinInactiveRepairSpawnDelay = 0x5c; // float
		constexpr auto MaxInactiveRepairSpawnDelay = 0x60; // float
		constexpr auto SpawnSfxDistance = 0x64; // float
		constexpr auto SinkSfxDistance = 0x68; // float
		constexpr auto MinCannonAttackersWhenBoarded = 0x6c; // int32_t
		constexpr auto StuckCheckInterval = 0x70; // float
		constexpr auto StuckCheckDistance = 0x74; // float
		constexpr auto MaxDistanceFromEncounter = 0x78; // float
		constexpr auto ShipFlippedAngle = 0x7c; // float
		constexpr auto SecondsUntilKillAIAfterShipDefeated = 0x80; // float
		constexpr auto SecondsDelayForAIShipDefeatedNotification = 0x84; // float
		constexpr auto EnableShipSurfacingMusic = 0x88; // bool
	}

	namespace n_UCannonSquashComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ANote { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTelemetrySubjectComponent { // : UActorComponent
		constexpr auto SubjectName = 0xd0; // FString
		constexpr auto SubjectID = 0xe0; // FString
	}

	namespace n_UInteractableMock { // : UObject
		constexpr auto ActorThatInteracted = 0x38; // AActor*
	}

	namespace n_UAnimBlueprint { // : UBlueprint
		constexpr auto TargetSkeleton = 0xd8; // USkeleton*
		constexpr auto Groups = 0xe0; // TArray<FAnimGroupInfo>
		constexpr auto SkeletonSlotNames = 0xf0; // TArray<FName>
	}

	namespace n_ABuriedDecalClientService { // : AActor
		constexpr auto Settings = 0x3d8; // UDiggingSettings*
	}

	namespace n_AHumanoidActionStateCreatorDefinition { // : AActionStateCreatorDefinition
		constexpr auto DebugSuperSailorParams = 0x3d0; // FDebugSuperSailorActionStateParams
		constexpr auto ControlWheelParams = 0x3e0; // FControlWheelActionStateParams
		constexpr auto ControlCapstanArmParams = 0x414; // FControlCapstanArmActionStateParams
		constexpr auto ControlPulleyParams = 0x448; // FControlPulleyActionStateParams
		constexpr auto UseLadderParams = 0x47c; // FUseLadderActionStateParams
		constexpr auto ClamberParams = 0x4c8; // FClamberActionStateParams
		constexpr auto UseCannonParams = 0x4f8; // FUseCannonActionStateParams
		constexpr auto UseHarpoonLauncherParams = 0x558; // FUseMountedWeaponActionStateParams
		constexpr auto UseMapTableParams = 0x5b0; // FUseMapTableActionStateParams
		constexpr auto OffBottomTransitionLadderParams = 0x5cc; // FLinearTransitionLadderActionStateParams
		constexpr auto OnBottomTransitionLadderParams = 0x5e0; // FLinearTransitionLadderActionStateParams
		constexpr auto OffTopTransitionLadderParams = 0x5f4; // FSplineTransitionLadderActionStateParams
		constexpr auto OnTopTransitionLadderParams = 0x604; // FSplineTransitionLadderActionStateParams
		constexpr auto TeleportParams = 0x614; // FTeleportActionStateParams
		constexpr auto WaitingToSpawnParams = 0x640; // FWaitingToSpawnActionStateParams
		constexpr auto RepairObjectParams = 0x654; // FRepairObjectActionStateParams
		constexpr auto UndoRepairParams = 0x658; // FUndoRepairActionStateParams
		constexpr auto UseItemParams = 0x65c; // FUseItemActionStateParams
		constexpr auto DeadParams = 0x660; // FDeadActionStateParams
		constexpr auto PostReviveParameters = 0x6b8; // FRevivedActionStateParams
		constexpr auto HideInObjectParams = 0x6c8; // FHideInObjectActionStateParams
		constexpr auto LeaveGhostShipParams = 0x6f0; // FLeaveGhostShipActionStateParams
		constexpr auto ShovelDigParams = 0x718; // FShovelDigActionStateParams
		constexpr auto MigrationParams = 0x728; // FMigrationActionStateParams
		constexpr auto FiredFromCannonParams = 0x72c; // FFiredFromActorActionStateParams
		constexpr auto LaunchedFromKrakenParams = 0x754; // FFiredFromActorActionStateParams
		constexpr auto LaunchedFromGeyserParams = 0x77c; // FFiredFromActorActionStateParams
		constexpr auto WaitForDemoResetParams = 0x7a4; // FWaitForDemoResetActionStateParams
		constexpr auto WaterBarrelParams = 0x7a8; // FWaterBarrelActionStateParams
		constexpr auto DockableCutsceneParams = 0x7dc; // FDockableCutsceneActionStateParams
		constexpr auto DockableBaseParams = 0x810; // FDockableBaseActionStateParams
		constexpr auto DockableMusicalInstrumentParams = 0x844; // FPlayDockableKeyedInstrumentActionStateParams
		constexpr auto TavernPianoParams = 0x860; // FControlObjectActionStateParams
		constexpr auto CapturedByKrakenParams = 0x878; // FCapturedByKrakenActionStateParams
		constexpr auto IngestedByKrakenParams = 0x8b8; // FIngestedByKrakenActionStateParams
		constexpr auto SwallowedByKrakenParams = 0x8bc; // FSwallowedByKrakenActionStateParams
		constexpr auto LinearTransitionParams = 0x8c4; // FLinearTransitionActionStateParams
		constexpr auto WaterSlideParams = 0x8d8; // FWaterSlideActionStateParams
		constexpr auto EnterTunnelOfTheDamnedParams = 0x8fc; // FEnterTunnelOfTheDamnedActionStateParams
		constexpr auto EjectFromTunnelOfTheDamnedParams = 0x91c; // FEjectFromTunnelOfTheDamnedActionStateParams
		constexpr auto ExitTunnelOfTheDamnedParams = 0x93c; // FExitTunnelOfTheDamnedActionStateParams
	}

	namespace n_UPirateLegendTypeFilter { // : UPirateLegendSectionFilter
		constexpr auto AllowedType = 0x28; // EPLSectionType
	}

	namespace n_UFishingFloatSetupDataAsset { // : UDataAsset
		constexpr auto FishingFloatPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto RodCastFloatLandInWater = 0x30; // UWwiseEvent*
		constexpr auto DelayBeforeDetachingFloat = 0x38; // float
		constexpr auto FloatBobDepthWhenMovedAndNotHooked = 0x3c; // float
		constexpr auto RetractingDuration = 0x40; // float
		constexpr auto ViolentlyRetractingDuration = 0x44; // float
		constexpr auto CastingFloatMovementXY = 0x48; // UCurveFloat*
		constexpr auto CastingFloatMovementZAtMinDistance = 0x50; // UCurveFloat*
		constexpr auto CastingFloatMovementZAtMaxDistance = 0x58; // UCurveFloat*
		constexpr auto ReelingInFloatMovementXY = 0x60; // UCurveFloat*
		constexpr auto ReelingInFloatMovementZ = 0x68; // UCurveFloat*
		constexpr auto SplashVFXWhenFloatLandsOnWater = 0x70; // UObject*
		constexpr auto MaxAboveDistance = 0x78; // float
		constexpr auto MaxBelowDistance = 0x7c; // float
		constexpr auto ExtraOffsetWhenFishNotAttached = 0x80; // float
		constexpr auto MaxDriftCompensationOffset = 0x84; // float
		constexpr auto FloatBobDepthOnComedyItemBeingHooked = 0x88; // float
		constexpr auto BringingInCatchDuration = 0x8c; // float
		constexpr auto FloatZOffset = 0x90; // float
		constexpr auto WobbleSpeed = 0x94; // float
		constexpr auto MinWobbleAngle = 0x98; // float
		constexpr auto MaxWobbleAngle = 0x9c; // float
		constexpr auto TimeToBlendAwaySway = 0xa0; // float
		constexpr auto WobbleYawAngleOffset = 0xa4; // float
		constexpr auto FlavourYawMinTimeToNextChange = 0xa8; // float
		constexpr auto FlavourYawMaxTimeToNextChange = 0xac; // float
		constexpr auto FlavourYawMinSpeed = 0xb0; // float
		constexpr auto FlavourYawMaxSpeed = 0xb4; // float
		constexpr auto FlavourYawAcceleration = 0xb8; // float
	}

	namespace n_UPetAnimationDataStore { // : UAnimationData
		constexpr auto PetAnimationData = 0x28; // UPetsAnimationData*
	}

	namespace n_UStatusResponseSuspendStatus { // : UStatusResponse
		constexpr auto Status = 0x30; // TArray<UStatusBase*>
	}

	namespace n_UParticleModuleVelocityConeEmitterPoint { // : UParticleModuleVelocityBase
		constexpr auto Angle = 0x58; // FRawDistributionFloat
		constexpr auto VelocityScale = 0x90; // FRawDistributionFloat
		constexpr auto VelocityDistributeOverNPoints = 0xc8; // uint32_t
		constexpr auto VelocityNPointsRandomness = 0xcc; // float
		constexpr auto AdditiveVelocity = 0xd0; // FVector
	}

	namespace n_UTaleQuestActorService { // : UTaleQuestService
		constexpr auto TrackedActors = 0x60; // TArray<FTrackedActorData>
		constexpr auto CriticalActors = 0x70; // TArray<FCriticalActorDelegateData>
		constexpr auto SnapshottedActors = 0x80; // TArray<FSnapshottedActorData>
		constexpr auto Desc = 0x90; // UTaleQuestActorServiceDesc*
		constexpr auto PhasedClusterRoot = 0x98; // APhasedClusterRoot*
		constexpr auto PhasedActors = 0xa0; // TArray<FPhasedActor>
		constexpr auto PhasedItems = 0xb0; // TArray<FPhasedItem>
		constexpr auto CriticalActorHandedInByAnotherCrewFailureMessage = 0xc0; // FText
	}

	namespace n_UMovieSceneSection { // : UMovieSceneSignedObject
		constexpr auto EvalOptions = 0x80; // FMovieSceneSectionEvalOptions
		constexpr auto StartTime = 0x84; // float
		constexpr auto EndTime = 0x88; // float
		constexpr auto RowIndex = 0x8c; // int32_t
		constexpr auto OverlapPriority = 0x90; // int32_t
		constexpr auto bIsActive = 0x94; // char : 1
		constexpr auto bIsLocked = 0x94; // char : 1
		constexpr auto bIsInfinite = 0x94; // char : 1
	}

	namespace n_UEmissaryRewardSettingsAsset { // : UDataAsset
		constexpr auto EmissaryRewardData = 0x28; // TArray<FEmissaryRewardEntry>
		constexpr auto PlayerKilledExpiryTime = 0x38; // float
		constexpr auto CampaignSettings = 0x40; // UEmissaryRewardCampaignSettingsAsset*
	}

	namespace n_UConsoleSettings { // : UObject
		constexpr auto MaxScrollbackSize = 0x28; // int32_t
		constexpr auto ManualAutoCompleteList = 0x30; // TArray<FAutoCompleteCommand>
		constexpr auto AutoCompleteMapPaths = 0x40; // TArray<FString>
	}

	namespace n_AGeyserManager { // : AActor
		constexpr auto GeyserManagerSetupData = 0x3d0; // UGeyserManagerSetupDataAsset*
		constexpr auto Root = 0x3d8; // USceneComponent*
		constexpr auto State = 0x3e0; // EGeyserManagerState
	}

	namespace n_UParticleModuleLocationComputeShaderOutput { // : UParticleModuleLocationPrimitiveBase
		constexpr auto PositionData = 0xc8; // UParticleComputeShaderData*
	}

	namespace n_UMockPostPhysicsTickerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USeaLocationByGridSquareClueDestinationDescriptor { // : UClueDestinationDescriptor
		constexpr auto SeaLocationIdentifier = 0x40; // FVector
	}

	namespace n_UReplenishableComponent { // : UActorComponent
		constexpr auto ContentTypeSelector = 0xd8; // UStorageContainerContentTypeSelector*
		constexpr auto ContentTypeSelectors = 0xe0; // TArray<FContentTypeSelectorPair>
		constexpr auto ShouldRefresh = 0xf0; // bool
		constexpr auto DefaultStockLevels = 0xf8; // TArray<FStorageContainerNode>
		constexpr auto Aggregator = 0x110; // UObject*
	}

	namespace n_UBTTask_CopyBlackboardVector { // : UBTTaskNode
		constexpr auto SrcBlackboardKey = 0x60; // FBlackboardKeySelector
		constexpr auto TargetBlackboardKey = 0x88; // FBlackboardKeySelector
	}

	namespace n_UStatusResponseToggleWheelLock { // : UStatusResponse
		constexpr auto CurseTag = 0x30; // ECurseTag
		constexpr auto AngleThreshold = 0x34; // float
		constexpr auto Duration = 0x38; // float
	}

	namespace n_UShipHullDamageDataAsset { // : UDataAsset
		constexpr auto DamageParams = 0x28; // FShipHullDamageParams
	}

	namespace n_UTeleportAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto MinTeleportDistanceMultiplier = 0x40; // float
		constexpr auto MaxTeleportDistanceMultiplier = 0x44; // float
		constexpr auto ResurfaceDelayMultiplier = 0x48; // float
	}

	namespace n_AMockInventoryItem { // : AActor
		constexpr auto InventoryItem = 0x3d0; // UInventoryItemComponent*
	}

	namespace n_UObjectWithSettableWorld { // : UObject
		constexpr auto World = 0x28; // UWorld*
	}

	namespace n_UActorBuriedByPlayerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UEnvQueryOption { // : UObject
		constexpr auto Generator = 0x28; // UEnvQueryGenerator*
		constexpr auto Tests = 0x30; // TArray<UEnvQueryTest*>
	}

	namespace n_UTaleQuestSelectorService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UTaleQuestSelectorServiceDesc*
	}

	namespace n_USirenAnimationInstance { // : UAnimInstance
		constexpr auto PawnOwner = 0x450; // TWeakObjectPtr<APawn>
		constexpr auto PropAttachmentSocket = 0x458; // FName
		constexpr auto SirenAnimationData = 0x460; // FSirenAnimationDataStructure
		constexpr auto AttackAnimations = 0x4c0; // FAthenaAnimationWeapon
		constexpr auto ForwardSpeed = 0x578; // float
		constexpr auto TiltDirectionAngleDegrees = 0x588; // float
		constexpr auto TiltAngleAlpha = 0x58c; // float
		constexpr auto SpinAngleDegrees = 0x590; // float
		constexpr auto MaxTiltAngleRepresentedByAdditiveBendAnimations = 0x594; // float
		constexpr auto UpperBodyOverlayActive = 0x598; // bool
		constexpr auto SwimmingLongways = 0x599; // bool
		constexpr auto UseAggressiveAnimations = 0x59a; // bool
		constexpr auto UseAlternativeAggressiveAnimation = 0x59b; // bool
		constexpr auto StrategiesForAggressiveAnimations = 0x5a0; // TArray<UAIStrategyId*>
		constexpr auto TimeBeforeAlternativeAggressiveAnimationToggleFlips = 0x5b0; // FFloatRange
		constexpr auto AnimationsLoaded = 0x5c8; // bool
		constexpr auto AimUpAlpha = 0x5cc; // float
		constexpr auto AimDownAlpha = 0x5d0; // float
		constexpr auto FullBodyStateMachine = 0x5d8; // FCustomAnimationMontageStateMachine
		constexpr auto HitReacts = 0x6b0; // FHitReactionAnimationState
	}

	namespace n_UPlaySequencerAnimationStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UPlaySequencerAnimationStepDesc*
		constexpr auto SequencerCutSceneActor = 0x98; // ASequencerCutSceneActor*
	}

	namespace n_UWaitForCrewToCollectCollectorsChestPagesStep { // : UMutateCollectorsChestStep
		constexpr auto StepDesc = 0x90; // UWaitForCrewToCollectCollectorsChestPagesStepDesc*
	}

	namespace n_UNPCDialogBinaryExpression { // : UNPCDialogExpression
		constexpr auto Left = 0x28; // UNPCDialogExpression*
		constexpr auto Right = 0x30; // UNPCDialogExpression*
	}

	namespace n_AServerMigrationSerialisationDetailsTestsActorWithReplicatedChild { // : AActor
		constexpr auto ChildActorComponent = 0x3d0; // UChildActorComponent*
	}

	namespace n_UContestServiceTelemetryComponent { // : UActorComponent
		constexpr auto ContestManagerParent = 0xc8; // AContestManagerService*
		constexpr auto ServerId = 0x128; // FString
	}

	namespace n_UBTService_DisableCollisions { // : UBTService
		constexpr auto ChannelsToLeaveUnaffected = 0x70; // TArray<ECollisionChannel>
	}

	namespace n_UIsShipCustomizedWithStatCondition { // : UStatCondition
		constexpr auto RequiredShipCustomizationData = 0x28; // FRequiredShipCustomizationData
	}

	namespace n_UOutOfAmmoDestroyEffect { // : UAmmoBaseEffect
		constexpr auto DestructionEffects = 0x28; // FOutOfAmmoDestructionEffects
		constexpr auto OwningActor = 0xa8; // AActor*
	}

	namespace n_UAnimNotify_WieldableAnimationInterruptPoint { // : UAnimNotify
		constexpr auto PlayedWithSequencer = 0x28; // bool
	}

	namespace n_UDynamicColourPointLightComponent { // : UPointLightComponent
		constexpr auto ActivationCurve = 0x478; // FRuntimeFloatCurve
		constexpr auto DeactivationCurve = 0x4f8; // FRuntimeFloatCurve
	}

	namespace n_UAthenaGameUserSettings { // : UGameUserSettings
		constexpr auto MaxVerticalResolution = 0x78; // int32_t
		constexpr auto MaxFPS = 0x7c; // int32_t
		constexpr auto VSync = 0x80; // int32_t
		constexpr auto LightingDetail = 0x84; // int32_t
		constexpr auto ModelDetail = 0x88; // int32_t
		constexpr auto ShadowDetail = 0x8c; // int32_t
		constexpr auto TextureDetail = 0x90; // int32_t
		constexpr auto WaterDetail = 0x94; // int32_t
		constexpr auto AnimationQuality = 0x98; // int32_t
		constexpr auto MMCThresholdScale = 0x9c; // int32_t
		constexpr auto ResolutionScaling = 0xa0; // float
		constexpr auto ParticleEmitterQuality = 0xa4; // int32_t
		constexpr auto ParticleResolutionQuality = 0xa8; // int32_t
		constexpr auto BackBufferCount = 0xac; // int32_t
		constexpr auto ShowPerformanceCounters = 0xb0; // int32_t
		constexpr auto SmoothFPS = 0xb4; // bool
		constexpr auto HDR = 0xb5; // bool
		constexpr auto AudioOutputSpatialAudio = 0xb6; // bool
		constexpr auto Fullscreen = 0xb7; // bool
	}

	namespace n_UAthenaAICharacterPathFollowingComponent { // : UPathFollowingComponent
		constexpr auto ProportionOfTurnToMove = 0x2b8; // float
		constexpr auto MinAngleToTurnOnSpot = 0x2bc; // float
		constexpr auto ReachedGoalMaxSpeedToSlowDistanceFactor = 0x2c0; // float
		constexpr auto AbortMoveMaxSpeedToSlowDistanceFactor = 0x2c4; // float
		constexpr auto MinSlowDownSpeed = 0x2cc; // float
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigrationActorCallsOrderingTestActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTaleQuestGetTinySharkPawnDesc { // : UTaleQuestStepDesc
		constexpr auto TinySharkExperience = 0x80; // ATinySharkExperience*
		constexpr auto TinySharkPawn = 0x88; // FQuestVariableSharkPawn
	}

	namespace n_UTaleQuestAnyStepDesc { // : UTaleQuestParallelStepDesc
		constexpr auto Descs = 0x80; // TArray<UTaleQuestStepDesc*>
	}

	namespace n_USporeBreathAIAbility { // : UAthenaAIAbility
		constexpr auto BreathActor = 0x78; // AStatusEffectOverlapZone*
		constexpr auto BreathVFX = 0x80; // UVFXSpawnerComponent*
	}

	namespace n_UAISkillsetItemSpawnRequirement { // : USpawnRequirement
		constexpr auto DisallowedSkillsets = 0x50; // TArray<UAthenaAIControllerParamsDataAsset*>
	}

	namespace n_USailAnimInstance { // : UAnimInstance
		constexpr auto Turning = 0x448; // float
		constexpr auto Billow = 0x44c; // float
		constexpr auto WindStrength = 0x450; // float
		constexpr auto Height = 0x454; // float
		constexpr auto Falling = 0x458; // float
		constexpr auto BillowedWindStrength = 0x45c; // float
		constexpr auto BillowedSailHalfwayPoint = 0x460; // float
		constexpr auto HeightTimesThree = 0x464; // float
		constexpr auto MinOneMinusHeightAndOne = 0x468; // float
		constexpr auto MaximumMainSailDrop = 0x46c; // float
		constexpr auto LaxAnimationFoldUpwardsExplicitTime = 0x470; // float
		constexpr auto LaxAnimationFoldUpwardsAlpha = 0x474; // float
		constexpr auto LaxAnimationWithWindAlpha = 0x478; // float
		constexpr auto LaxAnimationWithWindAlphaUnfurledA = 0x47c; // float
		constexpr auto LaxAnimationWithWindAlphaUnfurledB = 0x480; // float
		constexpr auto BillowedFoldAnimationWithWindModulationBillowedAlphaUnfurled = 0x484; // float
		constexpr auto BillowedFoldAnimationWithWindModulationLaxAlphaUnfurled = 0x488; // float
		constexpr auto BetweenZeroAndHalfBillowedFoldAnimationWithFullWindBlendAlpha = 0x48c; // float
		constexpr auto BetweenZeroAndHalfBillowedFoldAnimationWithFullWindAdditiveAlpha = 0x490; // float
		constexpr auto BetweenHalfAndOneBillowedFoldAnimationBlendAlpha = 0x494; // float
		constexpr auto TurningMapRangeUnclamped = 0x498; // float
		constexpr auto PlayRateMultiplier = 0x49c; // float
	}

	namespace n_USceneDialogueTextPoint { // : USceneDialoguePoint
		constexpr auto IsDelay = 0x28; // bool
		constexpr auto ActorNumber = 0x29; // char
		constexpr auto Text = 0x30; // FText
		constexpr auto DelayAfter = 0x68; // float
		constexpr auto Animation = 0x70; // UAnimationAsset*
		constexpr auto Speech = 0x78; // UWwiseEvent*
	}

	namespace n_UTaleQuestUpdateMerchantMapStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestUpdateMerchantMapStepDesc*
	}

	namespace n_UBTService_DetermineEngageTarget { // : UBTService
		constexpr auto BlockChangeEngageOptionKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UMermaidPartsDesc { // : UMeshMemoryConstraintsAIPartsDesc
		constexpr auto PlaySongEvent = 0x80; // FStringAssetReference
		constexpr auto StopSongEvent = 0x90; // FStringAssetReference
	}

	namespace n_UAISenseConfig_Prediction { // : UAISenseConfig
		constexpr auto MaxAge = 0x28; // float
		constexpr auto bStartsEnabled = 0x2c; // char : 1
	}

	namespace n_UNPCIdAsset { // : UDataAsset
		constexpr auto NPCIds = 0x28; // TArray<FName>
	}

	namespace n_UChainLightningSourceComponent { // : UActorComponent
		constexpr auto StatusToApply = 0xd0; // FStatus
		constexpr auto ChainLightningSettingsAsset = 0xe8; // FStringAssetReference
		constexpr auto AuthorityChains = 0x118; // TArray<FChainData>
		constexpr auto ClientChains = 0x128; // TArray<FChainData>
		constexpr auto FramesSinceLastRep = 0x138; // int32_t
		constexpr auto MaxFramesBeforeRep = 0x13c; // int32_t
		constexpr auto ChainsSinceLastRep = 0x140; // int32_t
		constexpr auto CachedChainLightningSettingsAsset = 0x148; // UChainLightningSettingsAsset*
	}

	namespace n_UDoesCompanyNPCNameContainStatCondition { // : UTargetedStatCondition
		constexpr auto CompanyNPCNameSubString = 0x30; // FName
	}

	namespace n_AWieldableMegalodonEffigy { // : AStaticMeshWieldableItem
		constexpr auto MegalodonSoulType = 0x790; // ETinySharkTypes
	}

	namespace n_UParticleModuleRotateRotationAxis { // : UParticleModuleRotationBase
		constexpr auto FacingAxis = 0x50; // FRotationAboutAxisParameters
		constexpr auto bUseGroupAFacingAxisForAllGroups = 0x60; // char : 1
		constexpr auto AdditionalFacingAxes = 0x64; // FRotationAboutAxisParameters [0x5]
	}

	namespace n_UAnimNotify_SwitchCosmeticItemAttachment { // : UAnimNotify
		constexpr auto PreviousLocation = 0x38; // EWieldAnimationLocation
		constexpr auto NewLocation = 0x39; // EWieldAnimationLocation
	}

	namespace n_UItemDescList { // : UDataAsset
		constexpr auto Items = 0x28; // TArray<UItemDesc*>
	}

	namespace n_USetMechanismActionCutsceneActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto CutSceneActor = 0x80; // FQuestVariableActor
		constexpr auto MechanismActor = 0x90; // FQuestVariableActor
	}

	namespace n_UParticleModuleLocationPrimitiveSphereSlice { // : UParticleModuleLocationBase
		constexpr auto StartRadius = 0x50; // FRawDistributionFloat
		constexpr auto AdditionalStartRadiuses = 0x88; // FRawDistributionFloat [0x4]
		constexpr auto StartRadiusUseGroupAForAll = 0x168; // char : 1
		constexpr auto AngleRanges = 0x16c; // FPrimitiveSphereEmitterAngleRanges [0x2]
		constexpr auto FirstSliceDistributionWeight = 0x18c; // float
		constexpr auto SurfaceOnly = 0x190; // char : 1
		constexpr auto Velocity = 0x190; // char : 1
		constexpr auto VelocityScale = 0x198; // FRawDistributionFloat
		constexpr auto StartLocation = 0x1d0; // FRawDistributionVector
	}

	namespace n_UPlayerCompanyComponent { // : UActorComponent
		constexpr auto CompanyProgressCache = 0x2b8; // FPlayerCompanyProgressCache
	}

	namespace n_UKrakenTentacleAIAudioComponent { // : UAICharacterAudioComponent
		constexpr auto MouthHeightOffset = 0x2e0; // float
		constexpr auto KrakenTentacleAudioParams = 0x2e8; // UKrakenTentacleAIAudioComponentParams*
		constexpr auto KrakenTentacleMouthEmitter = 0x2f0; // FWwiseEmitter
	}

	namespace n_UServerNetworkedEventsWhitelistDefinition { // : UNetworkedEventsWhitelistDefinition
		constexpr auto ValidEvents = 0x28; // TArray<UScriptStruct*>
	}

	namespace n_AIslandSalvageSpawnerManager { // : AActor
		constexpr auto ObjectMessagingDispatcher = 0x3e0; // FObjectMessagingDispatcher
		constexpr auto SalvageSpawnComponentsAwaitingRequests = 0x480; // TArray<USalvageItemSpawnComponent*>
		constexpr auto TypeMappedSalvageSpawnComponentRequests = 0x490; // TMap<UIslandItemDataAsset*, FSpawnRequests>
		constexpr auto IslandData = 0x4e0; // AIslandData*
		constexpr auto IslandSalvageItemSpawnComponents = 0x4f8; // TArray<USalvageItemSpawnComponent*>
		constexpr auto IslandSalvageLocationData = 0x508; // TArray<FTypedIslandItemSpawnLocationData>
	}

	namespace n_UDebrisForVoyageRankDescAsset { // : UDataAsset
		constexpr auto RankBasedDebrisDistribution = 0x28; // TArray<FDebrisToRangeDist>
	}

	namespace n_UNetConnection { // : UPlayer
		constexpr auto Children = 0x50; // TArray<UChildConnection*>
		constexpr auto Driver = 0x60; // UNetDriver*
		constexpr auto PackageMap = 0x68; // UPackageMap*
		constexpr auto OpenChannels = 0x70; // TArray<UChannel*>
		constexpr auto SentTemporaries = 0x80; // TArray<AActor*>
		constexpr auto ViewTarget = 0x90; // AActor*
		constexpr auto OwningActor = 0x98; // AActor*
		constexpr auto MaxPacket = 0xa0; // int32_t
		constexpr auto InternalAck = 0xa4; // char : 1
		constexpr auto LastReceiveTime = 0x3a0; // double
		constexpr auto MaxDormantActorsCheckedFromRelevancy = 0x34468; // int32_t
		constexpr auto DeferredCloseChannels = 0x344c0; // TArray<UChannel*>
	}

	namespace n_UNPCDialogOptionNoUIPurchase { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto Catalog = 0xb8; // UCatalogDataAsset*
		constexpr auto CatalogOffer = 0xc0; // UCatalogOfferDataAsset*
		constexpr auto OfferTriggeredPopupDesc = 0xc8; // UPopUpMessageDesc*
		constexpr auto Interactor = 0xd0; // AController*
	}

	namespace n_UAthenaAITypeListDataAsset { // : UDataAsset
		constexpr auto AITypes = 0x28; // TArray<FAITypeData>
		constexpr auto AdditionalAIActors = 0x38; // TArray<FStringClassReference>
	}

	namespace n_UInputVectorAxisDelegateBinding { // : UInputAxisKeyDelegateBinding
		constexpr auto InputAxisKeyDelegateBindings = 0x28; // TArray<FBlueprintInputAxisKeyDelegateBinding>
	}

	namespace n_UInterpGroup { // : UObject
		constexpr auto InterpTracks = 0x30; // TArray<UInterpTrack*>
		constexpr auto GroupName = 0x40; // FName
		constexpr auto GroupColor = 0x48; // FColor
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bVisible = 0x4c; // char : 1
		constexpr auto bIsFolder = 0x4c; // char : 1
		constexpr auto bIsParented = 0x4c; // char : 1
		constexpr auto bIsSelected = 0x4c; // char : 1
	}

	namespace n_AAthenaHUD { // : ACoherentBaseHUD
		constexpr auto PhotoModeEnabled = 0x4f0; // bool
		constexpr auto InputActionsToPropagate = 0x4f8; // TArray<FName>
		constexpr auto PlayerTalkingSettings = 0x508; // FPlayerTalkingSettings
		constexpr auto VirtualKeyboardEnabled = 0x538; // bool
		constexpr auto CoherentTooltipsComponent = 0x540; // UCoherentUIGTTooltipComponent*
		constexpr auto CoherentTooltipsDetailedComponent = 0x548; // UCoherentUIGTTooltipDetailedComponent*
		constexpr auto CoherentNameplatesComponent = 0x550; // UCoherentUIGTNameplateComponent*
		constexpr auto CoherentHUDComponent = 0x558; // UCoherentUIGTHUDComponent*
		constexpr auto CoherentInGameMenusComponent = 0x560; // UCoherentUIGTInGameMenusComponent*
		constexpr auto IslandEventTooltipComponent = 0x568; // UIslandEventTooltipComponent*
		constexpr auto CoherentToWwiseEventComponent = 0x570; // UCoherentToWwiseEventComponent*
		constexpr auto InputForwardComponent = 0x578; // UUIInputForwardComponent*
		constexpr auto TelemetryComponent = 0x580; // UUITelemetryComponent*
		constexpr auto CanvasWorldMapComponent = 0x588; // UCanvasWorldMapComponent*
		constexpr auto WatermarkComponent = 0x590; // UWatermarkComponent*
		constexpr auto ShopViewModelComponent = 0x598; // UShopViewModelComponent*
		constexpr auto PremiumShopViewModelComponent = 0x5a0; // UInGamePremiumShopViewModelComponent*
		constexpr auto MigrationUIComponent = 0x5a8; // UMigrationUIComponent*
		constexpr auto BlurParameters = 0x5b0; // FHUDBlurParams
		constexpr auto EquipmentChestViewModelComponent = 0x5c8; // UEquipmentChestViewModelComponent*
		constexpr auto ClothingChestViewModelComponent = 0x5d0; // UClothingChestViewModelComponent*
		constexpr auto ArmoryChestViewModelComponent = 0x5d8; // UArmoryChestViewModelComponent*
		constexpr auto ShipCustomizationChestViewModelComponent = 0x5e0; // UShipCustomizationChestViewModelComponent*
		constexpr auto VoyageInventoryViewModelComponent = 0x5e8; // UVoyageInventoryViewModelComponent*
		constexpr auto PiratePreviewComponent = 0x5f0; // UPiratePreviewComponent*
		constexpr auto PetChestViewModelComponent = 0x5f8; // UPetChestViewModelComponent*
		constexpr auto ItemPreviewComponent = 0x600; // UItemPreviewComponent*
		constexpr auto EntitlementInformationComponent = 0x608; // UEntitlementInformationComponent*
		constexpr auto HttpClientComponent = 0x610; // UHttpClientComponent*
		constexpr auto PerfCounterFont = 0x618; // UFont*
		constexpr auto PirateProfileRTTComponent = 0x620; // UPiratePreviewComponentPirateProfileRTT*
		constexpr auto Blur = 0x648; // FHUDBlur
		constexpr auto AthenaDebugMenuComponent = 0x660; // UAthenaDebugMenuComponent*
		constexpr auto CoherentComponents = 0x728; // TArray<UCoherentUIGTInstancedComponent*>
	}

	namespace n_UStarvingComponent { // : UActorComponent
		constexpr auto WeightedTimeToStarveInSeconds = 0xd0; // FWeightedProbabilityRangeOfRanges
		constexpr auto StarvingNotificationInterval = 0x100; // float
		constexpr auto StartStarvingImmediately = 0x104; // bool
		constexpr auto RecalculateTimeToStarveOnReset = 0x105; // bool
		constexpr auto TimeSpentStarving = 0x154; // float
		constexpr auto HasStartedStarving = 0x158; // bool
		constexpr auto TimeToStarveInSeconds = 0x15c; // float
	}

	namespace n_UMorphTarget { // : UVertexAnimBase
		constexpr auto BaseSkelMesh = 0x28; // USkeletalMesh*
	}

	namespace n_UHorizontalBox { // : UPanelWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_UTaleRemoveStormAvoidanceAreaStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_AHotTub { // : AActor
		constexpr auto InteractableComponent = 0x3d8; // UInteractableComponent*
		constexpr auto LiquidCollectionAmount = 0x3e0; // float
		constexpr auto Root = 0x3e8; // USceneComponent*
		constexpr auto CollisionComponent = 0x3f0; // UShapeComponent*
		constexpr auto PlayersInHotTub = 0x428; // TArray<AAthenaPlayerState*>
	}

	namespace n_ATallTaleService { // : AActor
		constexpr auto RankRequirementsAsset = 0x3f8; // UTaleRankRequirements*
		constexpr auto InTaleCrews = 0x400; // TArray<FGuid>
		constexpr auto ActiveLocalPlayerQuestBooks = 0x410; // TArray<AQuestBook*>
		constexpr auto ActiveRemotePlayerQuestBooks = 0x420; // TArray<AQuestBook*>
	}

	namespace n_UBTService_RunEQSQueryOnActorMovement { // : UBTService_RunEQSQuery
		constexpr auto MovingActorKey = 0xe8; // FBlackboardKeySelector
		constexpr auto MinimumActorMovementToRunEQS = 0x110; // float
		constexpr auto MinimumActorVelocityChangeToRunEQS = 0x114; // float
		constexpr auto RunEQSForYawChanges = 0x118; // bool
		constexpr auto MinimumActorYawChangeToRunEQS = 0x11c; // float
	}

	namespace n_URadialInputBinder { // : UInputBinder
		constexpr auto InputComponent = 0x28; // UInputComponent*
	}

	namespace n_UTextureRenderTargetCube { // : UTextureRenderTarget
		constexpr auto SizeX = 0x140; // int32_t
		constexpr auto ClearColor = 0x144; // FLinearColor
		constexpr auto OverrideFormat = 0x154; // EPixelFormat
		constexpr auto bHDR = 0x158; // char : 1
		constexpr auto bForceLinearGamma = 0x158; // char : 1
	}

	namespace n_UTetherInWorldSpaceComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UGhostCharacterAudioComponentParams { // : UDataAsset
		constexpr auto PlayerStateName = 0x28; // FName
		constexpr auto PlayerStateGhostShip = 0x30; // FName
		constexpr auto PlayerStateDefault = 0x38; // FName
	}

	namespace n_UChestOfRageComponent { // : UActorComponent
		constexpr auto ChestOfRageDataAsset = 0xd0; // UChestOfRageDataAsset*
		constexpr auto ReplicatedData = 0xd8; // FChestOfRageReplicatedData
		constexpr auto RageBuildingVfxEmitter = 0x160; // UParticleSystemComponent*
		constexpr auto SteamingVfxEmitter = 0x168; // UParticleSystemComponent*
		constexpr auto OnFireVfxEmitter = 0x170; // UParticleSystemComponent*
		constexpr auto DynamicMaterials = 0x178; // TArray<UMaterialInstanceDynamic*>
		constexpr auto RageContributors = 0x188; // TArray<AActor*>
	}

	namespace n_ABaseMerchantCrateItemProxy { // : ABootyProxy
		constexpr auto RewindComponent = 0x7b8; // URewindComponent*
		constexpr auto MountpointInterface = 0x7c0; // TScriptInterface<Class>
		constexpr auto FullGroundImpactSfx = 0x7d0; // UWwiseEvent*
	}

	namespace n_UFishingConditionStatTriggerType { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UBTDecorator_CompareBlackboardValues { // : UBTDecorator
		constexpr auto FloatConditions = 0x68; // TArray<FBlackboardValueCondition>
		constexpr auto FloatConditionComposite = 0x78; // EBlackboardValueCompositeType
	}

	namespace n_UStatusResponseAINamedControllerParamHealthChange { // : UStatusResponse
		constexpr auto HealthChangedReason = 0x30; // EHealthChangedReason
		constexpr auto AINamedControllerParam = 0x34; // FName
	}

	namespace n_UPrebakedIslandAsset { // : UDataAsset
		constexpr auto IslandEntries = 0x28; // TArray<FIsland>
		constexpr auto WorldMapMin = 0x38; // FVector2D
		constexpr auto WorldMapMax = 0x40; // FVector2D
	}

	namespace n_UBTDecorator_ShouldCheatPauseBehavior { // : UBTDecorator_BaseConditional
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_AToggleAnimatedMechanismAction { // : ABaseToggleAnimatedMechanismAction
		constexpr auto InactiveToActiveAnimation = 0x560; // FMechanismTransformAnimationCurve
		constexpr auto ActiveToInactiveAnimation = 0x568; // FMechanismTransformAnimationCurve
	}

	namespace n_UCosmeticVfxComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UCrewOwnershipComponent { // : UActorComponent
		constexpr auto State = 0xd0; // ECrewOwnershipState
		constexpr auto CachedCrewId = 0xd4; // FGuid
		constexpr auto LastKnownCrewId = 0xe4; // FGuid
	}

	namespace n_UParticleModuleLocationWorldOffset_Seeded { // : UParticleModuleLocationWorldOffset
		constexpr auto RandomSeedInfo = 0x178; // FParticleRandomSeedInfo
	}

	namespace n_AProceduralFoliageVolume { // : AVolume
		constexpr auto ProceduralComponent = 0x408; // UProceduralFoliageComponent*
	}

	namespace n_UExplosiveComponent { // : UActorComponent
		constexpr auto ExplosionDelayPerMetre = 0xe0; // float
		constexpr auto ExplosionParticleSystem = 0xe8; // UObject*
		constexpr auto ExplosionOnSandParticleSystem = 0xf0; // UObject*
		constexpr auto ExplosionOnWaterSurfaceParticleSystem = 0xf8; // UObject*
		constexpr auto ExplosionUnderWaterParticleSystem = 0x100; // UObject*
		constexpr auto SplashParticles = 0x108; // UObject*
		constexpr auto NearToSurfaceDistance = 0x110; // float
		constexpr auto ExplosionSoundCue = 0x118; // UWwiseEvent*
		constexpr auto ExplosionSoundCueSwitchName = 0x120; // FName
		constexpr auto ExplosionSoundCueSwitchValueForOnLand = 0x128; // FName
		constexpr auto ExplosionSoundCueSwitchValueForOnSand = 0x130; // FName
		constexpr auto ExplosionSoundCueSwitchValueForOnWaterSurface = 0x138; // FName
		constexpr auto ExplosionSoundCueIsObjectUnderWaterSwitchName = 0x140; // FName
		constexpr auto ExplosionSoundCueIsObjectUnderWaterSwitchValueForAboveWater = 0x148; // FName
		constexpr auto ExplosionSoundCueIsObjectUnderWaterSwitchValueForBelowWater = 0x150; // FName
		constexpr auto ExplosionSfxPool = 0x158; // UWwiseObjectPoolWrapper*
		constexpr auto HitReactParticleSystem = 0x160; // UParticleSystem*
		constexpr auto HitReactSoundCue = 0x168; // UWwiseEvent*
		constexpr auto MaxDepthForSplash = 0x170; // float
		constexpr auto HitTestTraceChannel = 0x174; // ECollisionChannel
		constexpr auto SandSurfaceType = 0x175; // EPhysicalSurface
		constexpr auto MakeOwnerInvisibleOnExplosion = 0x176; // bool
		constexpr auto RootExplosionInstigator = 0x178; // AActor*
		constexpr auto HealthComponent = 0x180; // UHealthComponent*
		constexpr auto IsExploding = 0x1a0; // bool
	}

	namespace n_UApplyStatusToConsumerComponent { // : UActorComponent
		constexpr auto ConsumptionStatuses = 0xc8; // TArray<FItemConsumptionStatusChanceEntry>
	}

	namespace n_APerformancePetSpawnerActor { // : AActor
		constexpr auto PerformancePetSpawnDefinitionsDataAsset = 0x3d0; // UPerformancePetSpawnDefinitionsDataAsset*
		constexpr auto ShipActor = 0x3d8; // AActor*
		constexpr auto SpawnedPets = 0x3e0; // TArray<FSpawnedPetData>
		constexpr auto Spawner = 0x3f0; // UAIPetsOnDemandSpawner*
		constexpr auto OverridePetOwner = 0x3f8; // AActor*
	}

	namespace n_ANavigationGraph { // : ANavigationData
		constexpr auto RenderingComp = 0x3d0; // UPrimitiveComponent*
		constexpr auto NavDataConfig = 0x3d8; // FNavDataConfig
		constexpr auto bEnableDrawing = 0x430; // char : 1
		constexpr auto bRebuildAtRuntime = 0x430; // char : 1
		constexpr auto RuntimeGeneration = 0x434; // ERuntimeGenerationType
		constexpr auto bForceRebuildOnLoad = 0x438; // char : 1
		constexpr auto ObservedPathsTickInterval = 0x43c; // float
		constexpr auto SupportedAreas = 0x528; // TArray<FSupportedAreaData>
	}

	namespace n_USphereComponent { // : UShapeComponent
		constexpr auto SphereRadius = 0x5a8; // float
	}

	namespace n_UEvolvingCostumeDesc { // : UCostumeDesc
		constexpr auto PreviousCostumeLevel = 0xe8; // FStringAssetReference
		constexpr auto NextCostumeLevel = 0xf8; // FStringAssetReference
	}

	namespace n_UNPCOnSurfaceDataAsset { // : UDataAsset
		constexpr auto LocationDataAsset = 0x28; // UNPCOnSurfaceLocationDataAsset*
		constexpr auto StatesDataAsset = 0x30; // UNPCOnSurfaceStatesDataAsset*
		constexpr auto CannonManagerDataAsset = 0x38; // UNPCOnSurfaceCannonManagerDataAsset*
		constexpr auto CannonManagerCrewSizeSettingsDataAsset = 0x40; // UNPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset*
		constexpr auto NpcToSpawn = 0x48; // UClass*
		constexpr auto PhaseNPCToCrew = 0x68; // bool
		constexpr auto TimeBetweenSpawnChecks = 0x6c; // float
		constexpr auto HighFrequencyTimeBetweenSpawnChecks = 0x70; // float
		constexpr auto TimeBetweenDespawnChecks = 0x74; // float
		constexpr auto DespawnCooldown = 0x78; // FWeightedProbabilityRangeOfRanges
		constexpr auto DelayBeforeDestroyingNPC = 0xa8; // float
		constexpr auto NPCInteractionDistanceXY = 0xac; // float
		constexpr auto NPCInteractionDistanceZ = 0xb0; // float
		constexpr auto TimeBetweenIsPlayerNearNPCChecks = 0xb4; // float
	}

	namespace n_UCompleteVoyageChapterConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UParticipantRadiusTrackerStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UParticipantRadiusTrackerStepDesc*
	}

	namespace n_AAshenWindsSkull { // : AStaticSimpleBootyWieldableItem
		constexpr auto NamedNotificationInputComponent = 0x7a0; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x7a8; // UUsableWieldableComponent*
		constexpr auto FlamethrowerParticleSystemComponent = 0x7b0; // UParticleSystemComponent*
		constexpr auto FlamethrowerChargeParticleSystemComponent = 0x7b8; // UParticleSystemComponent*
		constexpr auto MaterialAnimatorComponent = 0x7c0; // UMaterialAnimatorComponent*
		constexpr auto FlamethrowerController = 0x7c8; // UAshenWindsFlamethrowerController*
		constexpr auto ItemUseSpeedModifiers = 0x7d0; // FItemUseSpeedParams
		constexpr auto ItemUseFOVBlendSpeed = 0x7d8; // float
		constexpr auto ItemUseTargetFOV = 0x7dc; // float
		constexpr auto HipfireEffectsDelayAmount = 0x7e0; // float
		constexpr auto AimingDownSightsEffectsDelayAmount = 0x7e4; // float
		constexpr auto StartFlamethrowerOnServerDelayLatencyCompensation = 0x7e8; // float
		constexpr auto FlamethrowerParticleSystemMaxLength = 0x7ec; // float
		constexpr auto FlamethrowerParticleSystemCustomLocalSpaceMode = 0x7f0; // EVfxCustomLocalSpaceMode
		constexpr auto OpenJawMaterialAnimationName = 0x7f4; // FName
		constexpr auto CloseJawMaterialAnimationName = 0x7fc; // FName
		constexpr auto FlamethrowerParticleSystemThirdPersonAttachPoint = 0x804; // FVector
		constexpr auto FlamethrowerParticleSystemThirdPersonRotation = 0x810; // FRotator
		constexpr auto FlamethrowerParticleSystemFirstPersonAttachPoint = 0x81c; // FVector
		constexpr auto FlamethrowerParticleSystemFirstPersonRotation = 0x828; // FRotator
		constexpr auto EnableCustomParticleSystemBelowWater = 0x834; // bool
		constexpr auto AboveWaterParticleSystem = 0x838; // UParticleSystem*
		constexpr auto BelowWaterParticleSystem = 0x840; // UParticleSystem*
		constexpr auto EnableVisualFlamethrowerMissfiring = 0x848; // bool
		constexpr auto FlamethrowerMissfireParams = 0x850; // TArray<FAshenWindsSkullMissfireParams>
		constexpr auto FlamethrowerLoopStartEvent = 0x860; // UWwiseEvent*
		constexpr auto FlamethrowerLoopStopEvent = 0x868; // UWwiseEvent*
		constexpr auto FlamethrowerLoopChargeLevelRTPC = 0x870; // FName
		constexpr auto FlamethrowerLoopChargeLevelRTPCRange = 0x878; // FFloatRange
		constexpr auto FlamethrowerActivatedEvent = 0x888; // UWwiseEvent*
		constexpr auto FlamethrowerDeactivatedEvent = 0x890; // UWwiseEvent*
		constexpr auto UsingFlamethrowerForceFeedback = 0x898; // UForceFeedbackEffect*
		constexpr auto Wielder = 0x8a0; // APawn*
		constexpr auto FlamethrowerChargeInterface = 0x8a8; // TScriptInterface<Class>
		constexpr auto FlamethrowerChargeVisuals = 0x8b8; // UFlamethrowerChargeVisuals*
	}

	namespace n_ACloudSystem { // : AActor
		constexpr auto CloudDome = 0x3d0; // FCloudDomeParameters
		constexpr auto CloudVisuals = 0x3f8; // FCloudVisualParameters
		constexpr auto CloudTileGeneration = 0x468; // FCloudTileParameters
		constexpr auto CloudWeather = 0x488; // FCloudWeatherParameters
		constexpr auto NormalizedCloudWeights = 0x4b0; // TArray<FCloudTypeNormalizedWeight>
		constexpr auto CurrentWindAngleAndSpeed = 0x4c0; // FVector2D
		constexpr auto CloudSystemMaxActiveHeight = 0x4c8; // float
		constexpr auto CloudSystemMinActiveHeight = 0x4cc; // float
		constexpr auto CloudTileGeneratedNumber = 0x4d0; // int32_t
		constexpr auto CloudSystemIsActive = 0x4d4; // bool
		constexpr auto CloudTile = 0x4e0; // TArray<FTiledCloudProperties>
		constexpr auto GlobalCloudTileDisplacement = 0x4f0; // FVector2D
		constexpr auto TileOffsets = 0x4f8; // FVector2D [0x4]
		constexpr auto CloudTileScale = 0x518; // float
		constexpr auto AreCloudsPossible = 0x51c; // bool
	}

	namespace n_UHarpoonLauncherVFXDataAsset { // : UDataAsset
		constexpr auto MuzzleFlashVfxFirstPerson = 0x28; // UObject*
		constexpr auto MuzzleFlashVfxThirdPerson = 0x30; // UObject*
	}

	namespace n_UInterpTrackInstFloatAnimBPParam { // : UInterpTrackInst
		constexpr auto AnimScriptInstance = 0x28; // UAnimInstance*
		constexpr auto ResetFloat = 0x30; // float
	}

	namespace n_UCookableComponent { // : UActorComponent
		constexpr auto NextCookState = 0xe8; // UItemDesc*
		constexpr auto TimeToNextCookState = 0xf0; // float
		constexpr auto SmokeFeedbackLevels = 0xf8; // TArray<FCookableComponentSmokeFeedbackTimingEntry>
		constexpr auto VisibleCookedExtentOverTime = 0x108; // UCurveFloat*
		constexpr auto DefaultVisibleCookedExtent = 0x110; // float
		constexpr auto CookableTypeName = 0x114; // FName
		constexpr auto CookingState = 0x11c; // ECookingState
	}

	namespace n_UShipCreatureManagerComponent { // : UActorComponent
		constexpr auto CreatureMeshComponents = 0xc8; // TArray<FActorComponentSelector>
		constexpr auto CreatureInstances = 0xd8; // TArray<FShipCreatureManagerCreatureInstance>
		constexpr auto CreatureMeshAttachParent = 0xe8; // USceneComponent*
	}

	namespace n_UStatusResponseStun { // : UStatusResponse
		constexpr auto AnimType = 0x30; // EStunAnimationType
		constexpr auto IsItemWieldingAllowed = 0x31; // EStunnedActionStateItemWielding
		constexpr auto Duration = 0x34; // float
		constexpr auto PlayScreenVfx = 0x38; // bool
	}

	namespace n_UTrackedOwnerComponent { // : UActorComponent
		constexpr auto TrackedOwnerType = 0xd0; // ETrackedOwnerType
	}

	namespace n_UBTTask_SetInHiddenActionState { // : UBTTaskNode
		constexpr auto EnableHiddenActionState = 0x60; // bool
	}

	namespace n_AHitRegSnapshotService { // : AActor
		constexpr auto SnapshotsEnabled = 0x3e0; // bool
		constexpr auto ActiveSnapshotComponents = 0x3e8; // TArray<UHitRegSnapshotComponent*>
		constexpr auto PlayerHitScanEnabled = 0x3f8; // bool
	}

	namespace n_UTaleQuestGetProjectionPointOnTradeRouteStepDesc { // : UTaleQuestStepDesc
		constexpr auto ProjectionProportion = 0x80; // float
		constexpr auto SourcePoint = 0x88; // FQuestVariableVector
		constexpr auto TradeRouteData = 0x98; // FQuestVariableTradeRouteData
		constexpr auto ProjectedPoint = 0xa8; // FQuestVariableVector
	}

	namespace n_APrecomputedVisibilityOverrideVolume { // : AVolume
		constexpr auto OverrideVisibleActors = 0x408; // TArray<AActor*>
		constexpr auto OverrideInvisibleActors = 0x418; // TArray<AActor*>
		constexpr auto OverrideInvisibleLevels = 0x428; // TArray<FName>
	}

	namespace n_UTaleQuestAssignVaultStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTaleQuestAssignVaultStepDesc*
		constexpr auto VaultAssigned = 0x98; // bool
	}

	namespace n_UParticleSystemPickerAsset { // : UDataAsset
		constexpr auto ParticleSystems = 0x28; // FParticleSystemPicker
	}

	namespace n_USoundNodeLooping { // : USoundNode
		constexpr auto LoopCount = 0x38; // int32_t
		constexpr auto bLoopIndefinitely = 0x3c; // char : 1
	}

	namespace n_AShipErrorOnNonAuthorityPhysicsChange { // : AShip
		constexpr auto HullDragDynamicsDesc = 0x14d0; // UBaseHullDragDynamicsDesc*
	}

	namespace n_UStaticMeshComponent { // : UMeshComponent
		constexpr auto ForcedLodModel = 0x598; // int32_t
		constexpr auto bOverrideMinLOD = 0x59c; // bool
		constexpr auto bOverrideNavigationToDefaultObstacle = 0x59d; // bool
		constexpr auto MinLOD = 0x5a0; // int32_t
		constexpr auto StaticMesh = 0x5a8; // UStaticMesh*
		constexpr auto bOverrideWireframeColor = 0x5b0; // bool
		constexpr auto WireframeColorOverride = 0x5b4; // FColor
		constexpr auto bIgnoreInstanceForTextureStreaming = 0x5b8; // char : 1
		constexpr auto bOverrideLightMapRes = 0x5b8; // char : 1
		constexpr auto OverriddenLightMapRes = 0x5bc; // int32_t
		constexpr auto StreamingDistanceMultiplier = 0x5c0; // float
		constexpr auto IrrelevantLights = 0x5c8; // TArray<FGuid>
		constexpr auto LODData = 0x5d8; // TArray<FStaticMeshComponentLODInfo>
		constexpr auto CustomDepthMaterial = 0x5e8; // UMaterialInterface*
	}

	namespace n_UMovieSceneParticleParameterTrack { // : UMovieSceneNameableTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UBTTask_SetBlackboardEQSValue { // : UBTTask_BlackboardBase
		constexpr auto EQS = 0x88; // UEnvQuery*
	}

	namespace n_URareNetworkProfilerExporter { // : UExporter
		constexpr auto SupportedClass = 0x28; // UObject*
		constexpr auto ExportRootScope = 0x30; // UObject*
		constexpr auto FormatExtension = 0x38; // TArray<FString>
		constexpr auto FormatDescription = 0x48; // TArray<FString>
		constexpr auto PreferredFormatIndex = 0x58; // int32_t
		constexpr auto TextIndent = 0x5c; // int32_t
		constexpr auto bText = 0x60; // char : 1
		constexpr auto bSelectedOnly = 0x60; // char : 1
		constexpr auto bForceFileOperations = 0x60; // char : 1
	}

	namespace n_UWidgetSwitcherSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UContestWaitForItemHandInStepDesc { // : UTaleQuestStepDesc
		constexpr auto Item = 0x80; // FQuestVariableActor
	}

	namespace n_UShockwaveDamagerComponent { // : UActorComponent
		constexpr auto ExpansionDuration = 0xd0; // float
		constexpr auto EndRadiusInMetres = 0xd4; // float
		constexpr auto ApplyImpulseToShips = 0xd8; // bool
		constexpr auto ForceToApplyToShip = 0xe0; // FWeightedProbabilityRangeOfRanges
		constexpr auto ApplyDamageToShips = 0x110; // bool
		constexpr auto ShipDamageLevels = 0x118; // TArray<FShockwaveDamagerShipDamage>
		constexpr auto DamagerType = 0x128; // UDamagerType*
		constexpr auto ApplyImpulseToGhostShips = 0x130; // bool
		constexpr auto GhostShipImpulseDuration = 0x134; // float
		constexpr auto GhostShipImpulseMaxDeflectionAngle = 0x138; // float
		constexpr auto DestroyHostileGhostShips = 0x13c; // bool
		constexpr auto NearbyEncounterDistanceInMetres = 0x140; // float
		constexpr auto OnShockwaveStarted = 0x148; // FScriptMulticastDelegate
		constexpr auto OnShockwaveEnded = 0x158; // FScriptMulticastDelegate
		constexpr auto ProcessedShips = 0x168; // TArray<TWeakObjectPtr<AShip>>
		constexpr auto ProcessedGhostShips = 0x178; // TArray<TWeakObjectPtr<AAggressiveGhostShip>>
	}

	namespace n_ATreasureMapItemInfo { // : AItemInfo
		constexpr auto CanBeStoredInInventory = 0x3f0; // bool
		constexpr auto OnItemPickedUpDelegate = 0x3f8; // FScriptMulticastDelegate
		constexpr auto OnItemDroppedDeletage = 0x408; // FScriptMulticastDelegate
		constexpr auto WieldableType = 0x418; // AWieldableItem*
		constexpr auto ProxyType = 0x420; // AActor*
		constexpr auto WieldableItemPersistenceCooldownComponent = 0x428; // UWieldableItemPersistentCooldownComponent*
		constexpr auto Desc = 0x430; // UItemDesc*
		constexpr auto CurrentRepresentation = 0x438; // EItemRepresentation
		constexpr auto CurrentRepresentationInstance = 0x440; // AActor*
		constexpr auto CurrentOwner = 0x448; // AActor*
		constexpr auto TutorialOwner = 0x450; // AActor*
		constexpr auto DoNotConsiderForMigrationGather = 0x4f9; // bool
	}

	namespace n_UNPCOnSurfaceCannonManager { // : UObject
		constexpr auto Cannons = 0x28; // TArray<FNPCOnSurfaceCannonManagerCannon>
		constexpr auto CannonManagerDataAsset = 0x38; // UNPCOnSurfaceCannonManagerDataAsset*
		constexpr auto CannonManagerCrewSizeSettingsDataAsset = 0x40; // UNPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset*
	}

	namespace n_UDynamicOnlyMechanismTriggerComponent { // : UMechanismTriggerComponent
		constexpr auto MechanismActors = 0x150; // TArray<AActor*>
	}

	namespace n_ULoadableComponent { // : UActorComponent
		constexpr auto LoadTime = 0xd0; // float
		constexpr auto UnloadTime = 0xd4; // float
		constexpr auto DefaultObjectToLoad = 0xd8; // UItemDesc*
		constexpr auto UnloadingPoint = 0x130; // FTransform
		constexpr auto LoadableComponentState = 0x178; // FLoadableComponentState
		constexpr auto AlwaysLoaded = 0x188; // bool
	}

	namespace n_UMovieSceneBoolSection { // : UMovieSceneSection
		constexpr auto DefaultValue = 0xa0; // bool
		constexpr auto BoolCurve = 0xa8; // FIntegralCurve
	}

	namespace n_UMaterialExpressionLightVector { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UCurveLinearColor { // : UCurveBase
		constexpr auto FloatCurves = 0x30; // FRichCurve [0x4]
	}

	namespace n_AMermaid { // : AInteractableObject
		constexpr auto AIPartsRetrievalComponent = 0x480; // UAIPartsRetrievalComponent*
		constexpr auto Buoyancy = 0x490; // FWaterBuoyancy
		constexpr auto BuoyancyScalarWhenDisappearing = 0x5c0; // UCurveFloat*
		constexpr auto InteractionSocket = 0x5c8; // FName
		constexpr auto ClientWorldHitsCollisionProfile = 0x5d0; // FName
		constexpr auto TorchVfxSocketName = 0x5d8; // FName
		constexpr auto PhysicsErrorCorrection = 0x5e0; // FRigidBodyErrorCorrection
		constexpr auto SfxPool = 0x600; // UWwiseObjectPoolWrapper*
		constexpr auto BeaconVfx = 0x608; // UObject*
		constexpr auto BeaconVfxUnderwater = 0x610; // UObject*
		constexpr auto SurfacingSplash = 0x618; // UObject*
		constexpr auto DiveSplash = 0x620; // UObject*
		constexpr auto TorchVfx = 0x628; // UObject*
		constexpr auto PlaySongEvent = 0x630; // UWwiseEvent*
		constexpr auto StopSongEvent = 0x638; // UWwiseEvent*
		constexpr auto PlayTorchCrackleFx = 0x640; // UWwiseEvent*
		constexpr auto StopTorchCrackleFx = 0x648; // UWwiseEvent*
		constexpr auto SurfacingAudioEvent = 0x650; // UWwiseEvent*
		constexpr auto DiveAudioEvent = 0x658; // UWwiseEvent*
		constexpr auto TeleportSfxEvent = 0x660; // UWwiseEvent*
		constexpr auto AnimMap = 0x668; // TArray<FMermaidAnimMapping>
		constexpr auto ChoppinessScalar = 0x678; // float
		constexpr auto MinProximityToWaterSurfaceToConsiderSurfaced = 0x67c; // float
		constexpr auto MinDistanceFromEdgeOfWorld = 0x680; // float
		constexpr auto LowestZToDestroySelf = 0x684; // float
		constexpr auto MaxDisappearTime = 0x688; // float
		constexpr auto TimeIntoDiveToPlayFx = 0x68c; // float
		constexpr auto FacePlayerSpringAccel = 0x690; // float
		constexpr auto GlueToWaterSurfaceSpringAccel = 0x694; // float
		constexpr auto BlendToWaterSurfaceTimeWhenSurfacing = 0x698; // float
		constexpr auto BlendAwayFromWaterSurfaceTimeWhenDiving = 0x69c; // float
		constexpr auto PreferredWaterSubmersionOfModel = 0x6a0; // float
		constexpr auto CollisionRetainTime = 0x6a4; // float
		constexpr auto MaxTimeCollidingWithLandUntilDestroy = 0x6a8; // float
		constexpr auto MaxTimeCollidingWithShipUntilDestroy = 0x6ac; // float
		constexpr auto MaxZOutOfWaterToCountAsOutOfWaterWhenHittingShip = 0x6b0; // float
		constexpr auto Mesh = 0x6b8; // USkeletalMeshMemoryConstraintComponent*
		constexpr auto bGlueToSurface = 0x6c0; // bool
		constexpr auto PrimitiveRootComponent = 0x6e0; // UPrimitiveComponent*
		constexpr auto BeaconParticleSystem = 0x738; // UParticleSystemComponent*
		constexpr auto UnderwaterBeaconParticleSystem = 0x740; // UParticleSystemComponent*
		constexpr auto TorchParticleSystem = 0x748; // UParticleSystemComponent*
		constexpr auto MovementTimeStamp = 0x750; // FNetTimeStampCalculator
		constexpr auto State = 0x7c0; // EMermaidState
	}

	namespace n_UNavigationPath { // : UObject
		constexpr auto PathUpdatedNotifier = 0x28; // FScriptMulticastDelegate
		constexpr auto PathPoints = 0x38; // TArray<FVector>
		constexpr auto RecalculateOnInvalidation = 0x48; // ENavigationOptionFlag
	}

	namespace n_USetMechanismActionCutsceneNameStepDesc { // : UTaleQuestStepDesc
		constexpr auto CutsceneName = 0x80; // FName
		constexpr auto MechanismActor = 0x88; // FQuestVariableActor
	}

	namespace n_UMaterialExpressionHash { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
	}

	namespace n_UMeleeAttackProcessorComponent { // : UActorComponent
		constexpr auto MaxPlayerHitResponsesBroadcastPerAttack = 0xd0; // int32_t
		constexpr auto MaxNonPlayerPawnHitResponsesBroadcastPerAttack = 0xd4; // int32_t
		constexpr auto MaxOtherHitResponsesBroadcastPerAttack = 0xd8; // int32_t
		constexpr auto RewindInstigatorEstimationMaxSearchTime = 0xdc; // float
		constexpr auto RewindInstigatorEstimationStepSize = 0xe0; // float
		constexpr auto PredictiveHitResponses = 0x114; // FMeleeAttackHitResponses
		constexpr auto ValidatedHitResponses = 0x115; // FMeleeAttackHitResponses
		constexpr auto AuthoritativeHitResponses = 0x116; // FMeleeAttackHitResponses
		constexpr auto ServerHitResponses = 0x117; // FMeleeAttackHitResponses
	}

	namespace n_UCameraComponent { // : USceneComponent
		constexpr auto FieldOfView = 0x2b0; // float
		constexpr auto OrthoWidth = 0x2b4; // float
		constexpr auto OrthoNearClipPlane = 0x2b8; // float
		constexpr auto OrthoFarClipPlane = 0x2bc; // float
		constexpr auto AspectRatio = 0x2c0; // float
		constexpr auto bConstrainAspectRatio = 0x2c4; // char : 1
		constexpr auto bUseFieldOfViewForLOD = 0x2c4; // char : 1
		constexpr auto bUsePawnControlRotation = 0x2c4; // char : 1
		constexpr auto ProjectionMode = 0x2c8; // ECameraProjectionMode
		constexpr auto PostProcessBlendWeight = 0x2cc; // float
		constexpr auto PostProcessSettings = 0x2d0; // FPostProcessSettings
		constexpr auto bUseControllerViewRotation = 0x810; // char : 1
	}

	namespace n_UStatProgressStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UCollectorsChestSharedParamsDataAsset { // : UDataAsset
		constexpr auto SlotDefinitions = 0x28; // TArray<UCollectorsChestItemSlotDefinitionDataAsset*>
	}

	namespace n_UBTTask_AIShipSurface { // : UBTTask_BlackboardBase
		constexpr auto MaxSpeed = 0x88; // float
		constexpr auto PreSurfaceDelay = 0x8c; // float
	}

	namespace n_UContestSettings { // : UDeveloperSettings
		constexpr auto ContestModuleSettingsDataAsset = 0x38; // FStringAssetReference
	}

	namespace n_USoundNodeQualityLevel { // : USoundNode
		constexpr auto ChildNodes = 0x28; // TArray<USoundNode*>
	}

	namespace n_ALargeSkeletalMeshWieldableItem { // : ASkeletalMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_AShimmerActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UKrakenAnimatedTentacleAnimationDataAsset { // : UDataAsset
		constexpr auto AnimationSpec = 0x28; // UKrakenAnimatedTentacleAnimationSpecDataAsset*
		constexpr auto FrameTimeDelta = 0x30; // float
		constexpr auto AnimationLength = 0x34; // float
		constexpr auto NumFrames = 0x38; // int32_t
		constexpr auto AllowLookAround = 0x3c; // bool
		constexpr auto RequiresWaterHeightQuery = 0x3d; // bool
		constexpr auto AnimationPlayRateScale = 0x40; // float
		constexpr auto Bones = 0x48; // TArray<FKrakenAnimatedTentacleAnimationBoneTrack>
	}

	namespace n_UWaitForVaultCompletionStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UWaitForVaultCompletionStepDesc*
	}

	namespace n_UFaunaMovementComponent { // : UAICreatureCharacterMovementComponent
		constexpr auto AIStrategyMovementProperties = 0x558; // TArray<FAIStrategyMovementProperties>
		constexpr auto BlendSpeed = 0x568; // float
		constexpr auto bCreateDisturbance = 0x56c; // bool
		constexpr auto DisturbanceSize = 0x570; // float
		constexpr auto DisturbanceVelocityScale = 0x574; // float
		constexpr auto OrientationBlendSpeed = 0x578; // float
		constexpr auto OrientationMaxPitch = 0x57c; // float
		constexpr auto UpdateOrientationFrequency = 0x580; // float
		constexpr auto MinStairAngle = 0x584; // float
		constexpr auto MinStairVelocityDampen = 0x588; // float
		constexpr auto SubscribedStairClimbStrategies = 0x590; // TArray<UAIStrategyId*>
	}

	namespace n_UTaleQuestLanternService { // : UTaleQuestToolService
		constexpr auto ServiceDesc = 0x60; // UTaleQuestToolServiceDesc*
		constexpr auto WieldableDescs = 0x68; // TArray<UItemDesc*>
	}

	namespace n_UFoliageInstancedStaticMeshComponent { // : UHierarchicalInstancedStaticMeshComponent
		constexpr auto OnInstanceTakePointDamage = 0x768; // FScriptMulticastDelegate
		constexpr auto OnInstanceTakeRadialDamage = 0x778; // FScriptMulticastDelegate
	}

	namespace n_UAthenaAIWeightedRangesDataProvider { // : UAIDataProvider
		constexpr auto ParamName = 0x28; // FName
		constexpr auto WeightedRangesValue = 0x30; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_UNPCOnShipManager { // : UNPCOnSurfaceManager
		constexpr auto CurrentCachedCannonsShip = 0x80; // AShip*
		constexpr auto NPCOnShipDataAsset = 0x88; // UNPCOnShipDataAsset*
	}

	namespace n_UTransientActorTaleService { // : UTaleQuestService
		constexpr auto TrackedActors = 0x80; // TArray<AActor*>
		constexpr auto MigrationEntries = 0x90; // TArray<FTransientActorEntry>
	}

	namespace n_UMovieSceneStringTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UCollectorsChestPickUpFromSlotRewardComponent { // : UActorComponent
		constexpr auto Company = 0xc8; // UCompany*
	}

	namespace n_UMechanismAnimationEvent_ContinuousAudio { // : UMechanismAnimationEvent
		constexpr auto StartEvent = 0x40; // UWwiseEvent*
		constexpr auto StopEvent = 0x48; // UWwiseEvent*
		constexpr auto StartTime = 0x50; // float
		constexpr auto StopTime = 0x54; // float
		constexpr auto AudioEmitterInterface = 0x58; // TScriptInterface<Class>
	}

	namespace n_UMovieSceneFadeSection { // : UMovieSceneFloatSection
		constexpr auto FadeColor = 0x118; // FLinearColor
		constexpr auto bFadeAudio = 0x128; // char : 1
	}

	namespace n_ATankard { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto StartDrinkingSfx = 0x7b0; // UWwiseEvent*
		constexpr auto StopDrinkingSfx = 0x7b8; // UWwiseEvent*
		constexpr auto SfxRefill = 0x7c0; // UWwiseEvent*
		constexpr auto SfxTankardOnRaised = 0x7c8; // UWwiseEvent*
		constexpr auto SfxTankardOnEquipWhenFullOverride = 0x7d0; // UWwiseEvent*
		constexpr auto SfxTankardOnUnequipWhenFullOverride = 0x7d8; // UWwiseEvent*
		constexpr auto SfxTankardSloshOnLandingAfterJump = 0x7e0; // UWwiseEvent*
		constexpr auto SfxTankardSloshOnFootstep = 0x7e8; // UWwiseEvent*
		constexpr auto RaisingTankardSoundCueSwitchName = 0x7f0; // FName
		constexpr auto RaisingTankardSoundCueSwitchFullValue = 0x7f8; // FName
		constexpr auto RaisingTankardSoundCueSwitchEmptyValue = 0x800; // FName
		constexpr auto SfxRtpcEmptiness = 0x808; // FName
		constexpr auto TotalGasContained = 0x810; // float
		constexpr auto AlcoholPercentage = 0x814; // float
		constexpr auto DrinkSpeed = 0x818; // float
		constexpr auto TotalVolume = 0x81c; // float
		constexpr auto NamedNotificationInputComponent = 0x820; // UNamedNotificationInputComponent*
		constexpr auto LiquidContainer = 0x828; // ULiquidContainerComponent*
		constexpr auto RemainingVolume = 0x830; // float
	}

	namespace n_UParticleModuleVectorFieldBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_AMapTableControlPoint { // : AControllableObject
		constexpr auto SceneRootComponent = 0x508; // USceneComponent*
		constexpr auto MyInteractable = 0x510; // UInteractableComponent*
		constexpr auto CameraSocketName = 0x518; // FName
		constexpr auto InvertControls = 0x520; // bool
	}

	namespace n_UGameplayDebuggingComponent { // : UPrimitiveComponent
		constexpr auto DebugComponentClassName = 0x590; // FString
		constexpr auto ShowExtendedInformatiomCounter = 0x5a0; // int32_t
		constexpr auto ReplicateViewDataCounters = 0x5a8; // TArray<int32_t>
		constexpr auto ControllerName = 0x5b8; // FString
		constexpr auto PawnName = 0x5c8; // FString
		constexpr auto PawnClass = 0x5d8; // FString
		constexpr auto DebugIcon = 0x5e8; // FString
		constexpr auto MovementBaseInfo = 0x5f8; // FString
		constexpr auto MovementModeInfo = 0x608; // FString
		constexpr auto PathFollowingInfo = 0x618; // FString
		constexpr auto CurrentAITask = 0x628; // FString
		constexpr auto CurrentAIState = 0x638; // FString
		constexpr auto CurrentAIAssets = 0x648; // FString
		constexpr auto GameplayTasksState = 0x658; // FString
		constexpr auto NavDataInfo = 0x668; // FString
		constexpr auto AbilityInfo = 0x678; // FString
		constexpr auto MontageInfo = 0x688; // FString
		constexpr auto BrainComponentName = 0x698; // FString
		constexpr auto BrainComponentString = 0x6a8; // FString
		constexpr auto BlackboardRepData = 0x6b8; // TArray<char>
		constexpr auto PathPoints = 0x6d8; // TArray<FVector>
		constexpr auto PathCorridorData = 0x6e8; // TArray<char>
		constexpr auto NavmeshRepData = 0x708; // TArray<char>
		constexpr auto EQSRepData = 0x718; // TArray<char>
		constexpr auto SensingComponentLocation = 0x728; // FVector
		constexpr auto NextPathPointIndex = 0x734; // int32_t
		constexpr auto bIsUsingPathFollowing = 0x738; // char : 1
		constexpr auto bIsUsingCharacter = 0x738; // char : 1
		constexpr auto bIsUsingBehaviorTree = 0x738; // char : 1
		constexpr auto bIsUsingAbilities = 0x738; // char : 1
		constexpr auto TargetActor = 0x740; // AActor*
	}

	namespace n_ARespawnStatue { // : AInteractableObject
		constexpr auto StaticMeshComponent = 0x460; // UStaticMeshComponent*
		constexpr auto InteractionSocketName = 0x468; // FName
		constexpr auto HoldTime = 0x470; // float
		constexpr auto TooltipDisplayPriority = 0x474; // EActionDisplayPriority
	}

	namespace n_UBehaviorTree { // : UObject
		constexpr auto RootNode = 0x28; // UBTCompositeNode*
		constexpr auto BlackboardAsset = 0x30; // UBlackboardData*
		constexpr auto RootDecorators = 0x38; // TArray<UBTDecorator*>
		constexpr auto RootDecoratorOps = 0x48; // TArray<FBTDecoratorLogic>
	}

	namespace n_URadialCreationRuleAsset { // : UDataAsset
		constexpr auto Ruleset = 0x28; // FRadialInstance
	}

	namespace n_UCompanyLevelData { // : UDataAsset
		constexpr auto Company = 0x28; // UCompany*
		constexpr auto DataTable = 0x30; // FDataTableRowHandle
	}

	namespace n_UGameEventSchedulerSettingsAsset { // : UDataAsset
		constexpr auto EventSettings = 0x28; // TArray<FGameEventSettings>
		constexpr auto Configs = 0x38; // TArray<FGameEventSchedulerConfiguration>
		constexpr auto InitialStartupTime = 0x48; // float
	}

	namespace n_UPossessionsChestViewModel { // : UViewModelComponentBase
		constexpr auto AllTabLabel = 0x128; // FText
		constexpr auto AllTabIcon = 0x160; // FStringAssetReference
	}

	namespace n_UPickupablePlayerBuriedItemMapComponent { // : UPickupableComponent
		constexpr auto PickupTime = 0xd0; // float
		constexpr auto PickupActionDisplayString = 0xd8; // FText
		constexpr auto PickupActionDisplayStringWhenFull = 0x110; // FText
		constexpr auto StartPickupInputId = 0x148; // UNotificationInputId*
	}

	namespace n_UCharacterFootImpactComponent { // : UActorComponent
		constexpr auto SocketCollisionDesc = 0xd0; // TArray<FCharacterSocketCollisionDesc>
		constexpr auto SocketOffsetTolerance = 0xe0; // float
		constexpr auto CapsuleOffsetTolerance = 0xe4; // float
	}

	namespace n_UPoseableMeshComponent { // : USkinnedMeshComponent
		constexpr auto SkeletalMesh = 0x598; // USkeletalMesh*
		constexpr auto MasterPoseComponent = 0x5a0; // TWeakObjectPtr<USkinnedMeshComponent>
		constexpr auto CustomDepthMaterial = 0x5e8; // UMaterialInterface*
		constexpr auto bUseBoundsFromMasterPoseComponent = 0x600; // char : 1
		constexpr auto ActiveVertexAnims = 0x608; // TArray<FActiveVertexAnim>
		constexpr auto PhysicsAssetOverride = 0x618; // UPhysicsAsset*
		constexpr auto ForcedLodModel = 0x620; // int32_t
		constexpr auto MinLodModel = 0x624; // int32_t
		constexpr auto PredictedLODLevel = 0x628; // int32_t
		constexpr auto OldPredictedLODLevel = 0x62c; // int32_t
		constexpr auto MaxDistanceFactor = 0x630; // float
		constexpr auto LODInfo = 0x638; // TArray<FSkelMeshComponentLODInfo>
		constexpr auto StreamingDistanceMultiplier = 0x648; // float
		constexpr auto WireframeColor = 0x64c; // FColor
		constexpr auto bForceWireframe = 0x650; // char : 1
		constexpr auto bDisplayBones = 0x650; // char : 1
		constexpr auto bDisplayBoneCollisions = 0x650; // char : 1
		constexpr auto bDisableMorphTarget = 0x650; // char : 1
		constexpr auto bHideSkin = 0x650; // char : 1
		constexpr auto bPerBoneMotionBlur = 0x668; // char : 1
		constexpr auto bComponentUseFixedSkelBounds = 0x668; // char : 1
		constexpr auto bConsiderAllBodiesForBounds = 0x668; // char : 1
		constexpr auto MeshComponentUpdateFlag = 0x66c; // EMeshComponentUpdateFlag
		constexpr auto bForceMeshObjectUpdate = 0x670; // char : 1
		constexpr auto bChartDistanceFactor = 0x670; // char : 1
		constexpr auto bCanHighlightSelectedSections = 0x670; // char : 1
		constexpr auto bRecentlyRendered = 0x670; // char : 1
		constexpr auto ProgressiveDrawingFraction = 0x674; // float
		constexpr auto CustomSortAlternateIndexMode = 0x678; // char
		constexpr auto CachedLocalBounds = 0x68c; // FBoxSphereBounds
		constexpr auto bCachedLocalBoundsUpToDate = 0x6a8; // bool
		constexpr auto bEnableUpdateRateOptimizations = 0x6a9; // bool
		constexpr auto bDisplayDebugUpdateRateOptimizations = 0x6aa; // bool
	}

	namespace n_USunkenItemDataAsset { // : UIslandItemDataAsset
		constexpr auto SpawnLocations = 0x38; // TArray<FIslandItemSpawnLocationData>
	}

	namespace n_UAISenseConfig_Sight { // : UAISenseConfig
		constexpr auto Implementation = 0x30; // UAISense_Sight*
		constexpr auto SightRadius = 0x38; // float
		constexpr auto LoseSightRadius = 0x3c; // float
		constexpr auto PeripheralVisionAngleDegrees = 0x40; // float
		constexpr auto DetectionByAffiliation = 0x44; // FAISenseAffiliationFilter
		constexpr auto AutoSuccessRangeFromLastSeenLocation = 0x48; // float
	}

	namespace n_UBlunderbussItemCategory { // : UWeaponItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UPetRoamingAnimationStateDefinitionsDataAsset { // : UDataAsset
		constexpr auto DefinitionWrappers = 0x28; // TArray<FPetRoamingAnimationStateDefinitionWrapper>
	}

	namespace n_ACompanyShopkeeper { // : ANPC
		constexpr auto CompanyNPCComponent = 0x608; // UCompanyNPCComponent*
	}

	namespace n_UMechanismsSettings { // : UObject
		constexpr auto MaterialMap = 0x28; // UMechanismMaterialMap*
		constexpr auto GlobalFlamethrowerStatusOverrides = 0x30; // TArray<FFlamethrowerStatusOverride>
	}

	namespace n_UAILoadoutRankProgression { // : UDataAsset
		constexpr auto RankMappings = 0x28; // TArray<FAILoadoutRankMapping>
		constexpr auto NumberOfRanks = 0x38; // int32_t
	}

	namespace n_AReviveGhost { // : AActor
		constexpr auto CorpseMaterials = 0x3e0; // TArray<UMaterialInstanceDynamic*>
		constexpr auto Root = 0x3f0; // USceneComponent*
		constexpr auto MeshComponent = 0x3f8; // USkeletalMeshComponent*
		constexpr auto AstralCordContainer = 0x400; // USceneComponent*
		constexpr auto AnimationDataStoreComponent = 0x408; // UAnimationDataStoreComponent*
		constexpr auto PostProcessComponent = 0x410; // UPostProcessComponent*
		constexpr auto DitherComponent = 0x418; // UDitherComponent*
		constexpr auto AudioComponent = 0x420; // UReviveAudioComponent*
		constexpr auto RevivableOwnerNetRole = 0x438; // ENetRole
		constexpr auto ReviveGhostDataAsset = 0x440; // UGhostDataAsset*
		constexpr auto ReviveEffectsDataAsset = 0x448; // UReviveEffectsDataAsset*
		constexpr auto ReviveEffectsValues = 0x450; // FReviveEffectsValues
		constexpr auto ReviveSettings = 0x470; // FModeSpecificReviveSettings
		constexpr auto ContinuousOnTheBodyLoopingVFX = 0x5dc; // TWeakObjectPtr<UParticleSystemComponent>
		constexpr auto ReviveInProgressLoopingVFX = 0x5e4; // TWeakObjectPtr<UParticleSystemComponent>
		constexpr auto AstralCordDynamicMaterials = 0x608; // TArray<UMaterialInstanceDynamic*>
		constexpr auto GhostPlayModeSpecificParameters = 0x618; // FGhostPlayModeParameters
	}

	namespace n_UMovieScene3DConstraintTrack { // : UMovieSceneTrack
		constexpr auto ConstraintSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UCommodityPurchaseTrackingComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UBrainComponent { // : UActorComponent
		constexpr auto BlackboardComp = 0xd0; // UBlackboardComponent*
		constexpr auto AIOwner = 0xd8; // AAIController*
	}

	namespace n_UAbilityTask_PlayMontageAndWait { // : UAbilityTask
		constexpr auto OnComplete = 0x68; // FScriptMulticastDelegate
		constexpr auto OnInterrupted = 0x78; // FScriptMulticastDelegate
		constexpr auto OnCancelled = 0x88; // FScriptMulticastDelegate
	}

	namespace n_UEnvQueryGenerator_SimpleGrid { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto GridSize = 0x90; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0xc0; // FAIDataProviderFloatValue
		constexpr auto GenerateAround = 0xf0; // UEnvQueryContext*
	}

	namespace n_UTinySharkTelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ADebugWindService { // : AWindService
		constexpr auto GlobalWindSource = 0x3e0; // AWindDirectionalSource*
		constexpr auto CurrentWindAngle = 0x3f8; // float
		constexpr auto CurrentWindMagnitude = 0x3fc; // float
		constexpr auto WindZones = 0x4e8; // TArray<TScriptInterface<Class>>
	}

	namespace n_UWaitForClueCollectedStep { // : UTaleQuestStep
		constexpr auto ClueDesc = 0x90; // UClueDescriptor*
		constexpr auto ClueActor = 0x98; // AActor*
	}

	namespace n_ABountyReward { // : ANonDisplaceableLargeStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_AAthenaWorldSettings { // : AWorldSettings
		constexpr auto WorldMax = 0x5c0; // FVector2D
		constexpr auto WorldMapMin = 0x5c8; // FVector2D
		constexpr auto WorldMapMax = 0x5d0; // FVector2D
		constexpr auto AdventureDistanceFromWorldSafeRegionEdgeToKillZone = 0x5dc; // float
		constexpr auto ArenaDistanceFromWorldSafeRegionEdgeToKillZone = 0x5e0; // float
		constexpr auto EndOfWorldWarningOffset = 0x5e4; // float
		constexpr auto AdventureDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting = 0x5ec; // float
		constexpr auto ArenaDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting = 0x5f0; // float
		constexpr auto EndOfWorldWarningLightingIndex = 0x5f4; // int32_t
		constexpr auto BuoyantObjectSpawnParams = 0x5f8; // UBuoyantObjectSpawnParamsDataAsset*
		constexpr auto SeaFortsData = 0x600; // USeaFortsWorldDataAsset*
		constexpr auto SeaRockLocations = 0x608; // USeaRockDataAsset*
		constexpr auto TradeRoutes = 0x610; // FStringAssetReference
		constexpr auto ManuallyStreamedLevels = 0x620; // TArray<FAthenaStreamedLevelItem>
		constexpr auto SpireLevels = 0x630; // USpireStreamedLevelDataAsset*
		constexpr auto KrakenParams = 0x638; // FKrakenWorldSettingsParams
		constexpr auto TinySharkParams = 0x639; // FTinySharkWorldSettingsParams
		constexpr auto AIShipParams = 0x640; // FAIShipWorldSettings
		constexpr auto IslandDataAsset = 0x658; // UIslandDataAsset*
		constexpr auto PrebakedIslandData = 0x660; // UPrebakedIslandAsset*
		constexpr auto MapTableCanvasData = 0x668; // UMapTableCanvasDataAsset*
		constexpr auto TutorialTale = 0x670; // UVoyageDescDataAsset*
		constexpr auto DevilsShroudPlayerDamageMaxDamage = 0x678; // float
		constexpr auto AllowCompanyOnboardingTutorial = 0x67c; // bool
		constexpr auto AllowContextualTutorial = 0x67d; // bool
		constexpr auto ShowMapTable = 0x67e; // bool
		constexpr auto UseDevDefinition = 0x67f; // bool
		constexpr auto NPCOnBeachVoyageCheckpoints = 0x680; // TArray<UVoyageCheckpointProposalDesc*>
		constexpr auto DefaultGameEventSchedulerSettings = 0x690; // UGameEventSchedulerSettingsAsset*
		constexpr auto GameEventSchedulerSettingsConfigurations = 0x698; // TArray<FAthenaWorldSettingsGameEventSchedulerSettingsConfiguration>
		constexpr auto StormServiceSettings = 0x6a8; // UStormServiceAsset*
		constexpr auto SafeZonesIncludingRequiresShroudBreaker = 0x6b0; // TArray<FWorldSafeZone>
		constexpr auto SafeZonesExcludingRequiresShroudBreaker = 0x6c0; // TArray<FWorldSafeZone>
		constexpr auto MainWorldSafeZones = 0x6d0; // TArray<FWorldSafeZone>
		constexpr auto OverridingSafeZones = 0x6e0; // TArray<FWorldSafeZone>
	}

	namespace n_UStaggerComponent { // : UActorComponent
		constexpr auto XStickInputOverloaderAmplitude = 0xc8; // UCurveFloat*
		constexpr auto YStickInputOverloaderAmplitude = 0xd0; // UCurveFloat*
		constexpr auto MinInputOverloaderSpd = 0xd8; // float
		constexpr auto MaxInputOverloaderSpd = 0xdc; // float
		constexpr auto ChanceToChangeDirectionOnSpeedChange = 0xe0; // float
		constexpr auto InputOverloaderSpdChangePerSec = 0xe4; // float
		constexpr auto MinOverloaderSpdChangeTime = 0xe8; // float
		constexpr auto MaxOverloaderSpdChangeTime = 0xec; // float
		constexpr auto StickInputForMaxInterferenceScalar = 0xf0; // float
		constexpr auto InterferenceScalarAtMinStickInput = 0xf4; // float
		constexpr auto InterferenceScalarOnLadderStationary = 0xf8; // float
		constexpr auto InterferenceScalarOnLadderMoving = 0xfc; // float
		constexpr auto MaxStickDeflectionOnLadderToConsiderStationary = 0x100; // float
		constexpr auto StickDeflectionForMaxScalingOnLadder = 0x104; // float
		constexpr auto StaggerModifierEntries = 0x108; // TArray<FStaggerModifiersEntry>
	}

	namespace n_UBTTask_PawnActionBase { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_UEnvQueryGenerator_Composite { // : UEnvQueryGenerator
		constexpr auto Generators = 0x50; // TArray<UEnvQueryGenerator*>
		constexpr auto bHasMatchingItemType = 0x60; // bool
	}

	namespace n_UWaterPlaneExclusionComponent { // : UActorComponent
		constexpr auto UseSpecificComponentForOverlaps = 0xc8; // FActorComponentSelector
	}

	namespace n_USeatStat_TimeOfDay { // : USeatStat
		constexpr auto TimeOfDay = 0x48; // ESeatStatTimeOfDay
		constexpr auto TimeOfDayRanges = 0x50; // UTimeOfDayDataAsset*
	}

	namespace n_UExplosiveTriggerRammableComponent { // : UActorComponent
		constexpr auto ExplosiveSettings = 0xd0; // URammableExplosiveDataAsset*
		constexpr auto OwnerExplosive = 0xd8; // TScriptInterface<Class>
	}

	namespace n_UInstancedNavMeshComponent { // : USceneComponent
		constexpr auto NavMeshName = 0x2b8; // FName
		constexpr auto UseAttachedParentAsPrimitiveBase = 0x2c0; // bool
	}

	namespace n_UIslandItemSpawnComponentMock { // : UIslandItemSpawnComponent
		constexpr auto RespawnTime = 0x428; // float
		constexpr auto IslandData = 0x430; // AIslandData*
	}

	namespace n_UTaleQuestLoopStepDesc { // : UTaleQuestStepDesc
		constexpr auto LoopDesc = 0x80; // UTaleQuestStepDesc*
		constexpr auto Condition = 0x88; // FQuestVariableBool
	}

	namespace n_UTaleQuestSelectTradeRouteStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestSelectTradeRouteStepDesc*
	}

	namespace n_AAdjustableWaterLevelPuzzle { // : AActor
		constexpr auto RootComp = 0x3d8; // USceneComponent*
		constexpr auto WaterVolumeComponent = 0x3e0; // UChildActorComponent*
		constexpr auto WaterVolumeActor = 0x3e8; // AVariableFillRateWaterVolume*
		constexpr auto WaterLevels = 0x3f0; // TArray<FWaterPuzzleWaterLevel>
		constexpr auto DefaultWaterLevelIndex = 0x400; // int32_t
		constexpr auto FillCurve = 0x408; // UCurveFloat*
		constexpr auto DrainCurve = 0x410; // UCurveFloat*
		constexpr auto ResetCurve = 0x418; // UCurveFloat*
		constexpr auto PuzzleResetTimeout = 0x420; // float
		constexpr auto ReppedData = 0x424; // FWaterPuzzleRepData
	}

	namespace n_UParticleModuleLocationBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UMockPlayerTelemetryComponent { // : UPlayerTelemetryComponent
		constexpr auto HeartbeatInterval = 0x128; // float
		constexpr auto SpawnTimestamp = 0x270; // FDateTime
	}

	namespace n_UWaitOnCollectableQuestObjectStepDesc { // : UTaleQuestStepDesc
		constexpr auto CollectableActor = 0x80; // FQuestVariableActor
		constexpr auto CollectingPlayerActor = 0x90; // FQuestVariablePlayerActor
	}

	namespace n_UMediaSoundWave { // : USoundWave
		constexpr auto AudioTrackIndex = 0x218; // int32_t
		constexpr auto MediaPlayer = 0x220; // UMediaPlayer*
		constexpr auto CurrentMediaPlayer = 0x258; // TWeakObjectPtr<UMediaPlayer>
	}

	namespace n_UGameplayCueNotify_HitImpact { // : UGameplayCueNotify_Static
		constexpr auto Sound = 0x40; // USoundBase*
		constexpr auto ParticleSystem = 0x48; // UParticleSystem*
	}

	namespace n_AFakeShip { // : AActor
		constexpr auto AttachedItems = 0x3d8; // TArray<AItemProxy*>
	}

	namespace n_UCoherentUIGTHUDComponent { // : UCoherentBaseHUDComponent
		constexpr auto ShipNames = 0x5d0; // UShipNamesDataAsset*
		constexpr auto HealthUI = 0x618; // FHealthUI
	}

	namespace n_UWieldableItemVfxComponent { // : UActorComponent
		constexpr auto ActiveVfx = 0xc8; // UParticleSystemComponent*
		constexpr auto WieldedVfxTemplate = 0xd0; // UObject*
	}

	namespace n_UTaleQuestGrantRewardStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UParticleModuleColor_Seeded { // : UParticleModuleColor
		constexpr auto RandomSeedInfo = 0x308; // FParticleRandomSeedInfo
	}

	namespace n_UParticleModuleParametersOverVelocity { // : UParticleModuleParametersOverX
		constexpr auto MinSpeed = 0x68; // float
		constexpr auto MaxSpeed = 0x6c; // float
		constexpr auto VelocityComponentsWeights = 0x70; // FVector
		constexpr auto SpawnRateOverSpeedScale = 0x80; // FRawDistributionFloat
		constexpr auto LifetimeOverSpeedScale = 0xb8; // FRawDistributionFloat
		constexpr auto SizeOverSpeedScale = 0xf0; // FRawDistributionFloat
		constexpr auto InitialVelocityOverSpeedScale = 0x128; // FRawDistributionFloat
		constexpr auto OpacityOverSpeedScale = 0x160; // FRawDistributionFloat
	}

	namespace n_UBTService_TriggerNotifications { // : UBTService
		constexpr auto EnterBranchNotificationId = 0x70; // UNotificationInputId*
		constexpr auto LeaveBranchNotificationId = 0x78; // UNotificationInputId*
	}

	namespace n_UBTTask_SetBlackboardVectorValue { // : UBTTask_BlackboardBase
		constexpr auto UseVectorFromBlackboard = 0x88; // bool
		constexpr auto StaticValue = 0x8c; // FVector
		constexpr auto BlackboardKeyToUseForVector = 0x98; // FBlackboardKeySelector
	}

	namespace n_USetMechanismActionStateStepDesc { // : UTaleQuestStepDesc
		constexpr auto MechanismAction = 0x80; // FQuestVariableActor
		constexpr auto NewState = 0x90; // EMechanismActionState
	}

	namespace n_UWieldablePetComponent { // : UActorComponent
		constexpr auto WieldablePetComponentData = 0xc8; // UWieldablePetComponentDataAsset*
	}

	namespace n_UBTDecorator_RollAgainstPatrolChance { // : UBTDecorator
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_URowingInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto TargetOars = 0x280; // ARowingSeat*
	}

	namespace n_UAddReloadAmmoActionRuleComponent { // : UActorComponent
		constexpr auto NotificationInputId = 0xc8; // UNotificationInputId*
		constexpr auto DisplayPriority = 0xd0; // EActionDisplayPriority
	}

	namespace n_UQuestItemCategory_C { // : UQuestItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UDeliverableRedirectionNPCContext { // : UDeliverableRedirectionContextBase
		constexpr auto NPCData = 0x28; // FNPCData
	}

	namespace n_UTaleQuestLocationMapChestFoundStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
	}

	namespace n_UInterpTrackInstDirector { // : UInterpTrackInst
		constexpr auto OldViewTarget = 0x28; // AActor*
	}

	namespace n_UWaitForUnlockStepDesc { // : UTaleQuestStepDesc
		constexpr auto LockedActor = 0x80; // FQuestVariableActor
	}

	namespace n_URepairShipPartStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UFishSizeWeightsDataAsset { // : UDataAsset
		constexpr auto Data = 0x28; // TArray<FFishSizeAndWeight>
	}

	namespace n_UMovieSceneEnumTrack { // : UMovieScenePropertyTrack
		constexpr auto Enum = 0xb0; // UEnum*
	}

	namespace n_AShipEmbedToken { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UStatusResponseExplodeAfterTime { // : UStatusResponse
		constexpr auto MinTimeUntilExplosion = 0x30; // float
		constexpr auto MaxTimeUntilExplosion = 0x34; // float
		constexpr auto CachedWorld = 0x40; // UWorld*
	}

	namespace n_UPirateGeneratorSettings { // : UObject
		constexpr auto ConfigJson = 0x28; // FString
		constexpr auto PiratesFolder = 0x38; // FString
		constexpr auto WardrobeFolder = 0x48; // FString
		constexpr auto WardrobeDataAsset = 0x58; // FStringAssetReference
		constexpr auto DefaultWardrobeItems = 0x68; // TArray<FName>
		constexpr auto MaterialReferencesDataAsset = 0x78; // FStringAssetReference
		constexpr auto SkeletonsDataAsset = 0x88; // FStringAssetReference
		constexpr auto BaseSkeletonMeshes = 0x98; // TArray<FStringAssetReference>
		constexpr auto Characterization = 0xa8; // TArray<FStringAssetReference>
		constexpr auto SkeletonMeshFormats = 0xb8; // TArray<FString>
		constexpr auto FirstPersonAnimations = 0xc8; // FStringAssetReference
		constexpr auto ThirdPersonAnimations = 0xd8; // FStringAssetReference
		constexpr auto LODScreenSizes = 0xe8; // TArray<float>
		constexpr auto LODHysteresis = 0xf8; // TArray<float>
		constexpr auto DefaultPirateGenerationSeed = 0x108; // int32_t
	}

	namespace n_UDeliverableRedirectionBootyContext { // : UDeliverableRedirectionContextBase
		constexpr auto BootyType = 0x28; // EBootyTypes
	}

	namespace n_UBedComponent { // : USeatComponentBase
		constexpr auto DisengageVerb = 0x250; // FText
		constexpr auto InteractionTextTakingDamage = 0x288; // FText
		constexpr auto InteractionTextBedUnderwater = 0x2c0; // FText
		constexpr auto SleepingStateParams = 0x2f8; // FSleepingActionStateParams
	}

	namespace n_AWoodPlank { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x798; // UInventoryItemComponent*
		constexpr auto ConsumableWieldable = 0x7a0; // UConsumableWieldableComponent*
	}

	namespace n_UParticleModuleEventBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UHitDetectionComponent { // : UActorComponent
		constexpr auto MaxTimedSweepWaitTime = 0xd0; // float
	}

	namespace n_UScrollBoxWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto ScrollBoxStyle = 0x30; // FScrollBoxStyle
	}

	namespace n_AEmissaryFlag { // : AActor
		constexpr auto CustomizationComponent = 0x3d8; // UReplicatedShipPartCustomizationComponent*
		constexpr auto StartAmbientFlagSfx = 0x3e0; // UWwiseEvent*
		constexpr auto StopAmbientFlagSfx = 0x3e8; // UWwiseEvent*
		constexpr auto AttachFlagSfx = 0x3f0; // UWwiseEvent*
		constexpr auto DetachFlagSfx = 0x3f8; // UWwiseEvent*
		constexpr auto SfxPool = 0x400; // UWwiseObjectPoolWrapper*
		constexpr auto RootSceneComponent = 0x408; // USceneComponent*
		constexpr auto EmissaryFlagStaticMeshComponent = 0x410; // UStaticMeshComponent*
		constexpr auto CurrentEmissaryFlagMesh = 0x440; // FStringAssetReference
	}

	namespace n_UFortItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto AllowedGameEventTypes = 0x428; // TArray<USkellyFortGameEventType*>
	}

	namespace n_UAbilityTask_WaitAbilityActivate { // : UAbilityTask
		constexpr auto OnActivate = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UDockableCutsceneInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UFirePropagator { // : UObject
		constexpr auto CellStateTimingParams = 0xb8; // UFireCellStateTimingParamsDataAsset*
		constexpr auto WaterHeightOffsetToFloodCells = 0xc4; // float
	}

	namespace n_UVoiceChannel { // : UChannel
		constexpr auto BandwidthPerSecondReservationInBytes = 0x80; // int32_t
		constexpr auto SaturationCooloffPeriodInSeconds = 0x88; // float
	}

	namespace n_UBTDecorator_RandomLoop { // : UBTDecorator
		constexpr auto MinNumLoops = 0x68; // int32_t
		constexpr auto MaxNumLoops = 0x6c; // int32_t
		constexpr auto RandomNumLoopCurve = 0x70; // UCurveFloat*
	}

	namespace n_UAILoadoutWithNonStoreableAsset { // : ULoadoutAsset
		constexpr auto NonStoreableItem = 0x58; // UItemDesc*
	}

	namespace n_UCannonInputComponent { // : UMountedWeaponAimAndFireInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_APlayerLoadingInteractionPoint { // : AControllableObject
		constexpr auto InteractionBounds = 0x510; // FVector
		constexpr auto ThirdPersonMeshSocketAttachName = 0x51c; // FName
		constexpr auto LoadPlayerDisabledToolTipText = 0x528; // FText
		constexpr auto LoadingDisabledToolTipText = 0x560; // FText
		constexpr auto LoadingPointComponent = 0x598; // ULoadingPointComponent*
		constexpr auto InteractionRegion = 0x5a0; // UInteractableComponent*
		constexpr auto SceneComponent = 0x5a8; // USceneComponent*
		constexpr auto PlayerNameplateLocationOverrideComponent = 0x5b0; // UPlayerNameplateLocationOverrideComponent*
	}

	namespace n_UTestPlayerTelemetryComponentNoEvents { // : UPlayerTelemetryComponent
		constexpr auto HeartbeatInterval = 0x128; // float
		constexpr auto SpawnTimestamp = 0x270; // FDateTime
	}

	namespace n_APulleyMechanism { // : AControllablePulley
		constexpr auto PulleyMesh = 0x518; // UStaticMeshComponent*
		constexpr auto PulleyMechanismTriggerComponent = 0x520; // UIntentBasedMechanismTriggerComponent*
		constexpr auto InteractableComponent = 0x528; // UInteractableComponent*
		constexpr auto CameraTracksMechanismsBeingPulled = 0x530; // bool
		constexpr auto UnconnectedActorToTrack = 0x538; // AActor*
		constexpr auto DefaultLookAtLocation = 0x540; // FVector
		constexpr auto CameraLookAtParams = 0x54c; // FLookAtOffsetParams
		constexpr auto AnalogControls = 0x568; // UAnalogInputId*
		constexpr auto PulleyInteractionPrompt = 0x570; // FText
		constexpr auto PulleyInteractionDisabledPrompt = 0x5a8; // FText
	}

	namespace n_UOpenableItemMaterialAnimationReactionComponent { // : UOpenableItemReactionComponent
		constexpr auto AnimNameSets = 0xd8; // TArray<FOpenableItemMaterialAnimationReactionComponentAnimationNameAndSfxCueSet>
		constexpr auto MaterialAnimatorComponent = 0xe8; // UMaterialAnimatorComponent*
	}

	namespace n_UAggressiveGhostShipsEncounterServiceParams { // : UGameEventServiceParams
		constexpr auto EncounterParams = 0x28; // UAggressiveGhostShipsEncounterParams*
		constexpr auto IslandsToSpawnOn = 0x30; // TArray<FName>
		constexpr auto MinPlayerDistanceToIsland = 0x40; // float
		constexpr auto MaxTotalNumFiringCannons = 0x44; // int32_t
		constexpr auto MaxNumFiringCannonsPerEncounter = 0x48; // int32_t
		constexpr auto MaxTimeToBeAllowedToFire = 0x4c; // float
		constexpr auto MinTimeBeforeBeingAllowedToFireAgain = 0x50; // float
	}

	namespace n_UTaleQuestFramedStepDesc { // : UTaleQuestStepDesc
		constexpr auto Services = 0x80; // TArray<UTaleQuestServiceDesc*>
		constexpr auto Variables = 0x90; // UScriptStruct*
		constexpr auto GeneratedVariables = 0x98; // FInlineUserDefinedStructDetails
	}

	namespace n_UFindNamedPointStepDescBase { // : UTaleQuestStepDesc
		constexpr auto ActorToSearch = 0xa0; // FQuestVariableActor
		constexpr auto GroupNamePin = 0xb0; // FQuestVariableName
		constexpr auto PointGroupName = 0xc0; // FName
		constexpr auto SearchMethod = 0xc8; // EPointSelectionMethod
		constexpr auto ReturnInSpace = 0xc9; // ESpaceType
	}

	namespace n_UShantyRadialActivationInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMeshMemoryConstraintSettings { // : UDeveloperSettings
		constexpr auto MeshMemoryConstraintFallbackSettings = 0x38; // FStringAssetReference
	}

	namespace n_UMaterialExpressionDistance { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
	}

	namespace n_UParticleModuleLocationPrimitiveCylinder_Seeded { // : UParticleModuleLocationPrimitiveCylinder
		constexpr auto RandomSeedInfo = 0x348; // FParticleRandomSeedInfo
	}

	namespace n_ULightningManagerDataAsset { // : UDataAsset
		constexpr auto LightningTargetHeightThreshold = 0x28; // float
		constexpr auto ShipNearMissMaxX = 0x2c; // float
		constexpr auto ShipNearMissMaxY = 0x30; // float
		constexpr auto NearPlayerMinRadius = 0x34; // float
		constexpr auto NearPlayerMaxRadius = 0x38; // float
		constexpr auto InactiveTimePerTest = 0x3c; // float
		constexpr auto NearbyGhostShipEncounterRadiusInMetres = 0x40; // float
		constexpr auto LightningStrikeFrequency = 0x48; // TArray<FLightningStrikeFrequency>
		constexpr auto TargetSelector = 0x58; // FLightningTargetSelector
	}

	namespace n_UAIItemSpawnDataSourceComponent { // : USceneComponent
		constexpr auto ItemSpawnDataAsset = 0x2b8; // UItemSpawnTransformWithRandomQuantityDataAssset*
	}

	namespace n_UPremiumCatalogItemSetDataAsset { // : UPremiumCatalogLandingPageItemDataAsset
		constexpr auto PageTitle = 0x108; // FText
		constexpr auto PageIcon = 0x140; // FStringAssetReference
		constexpr auto ItemSets = 0x150; // TArray<FPremiumCatalogItemSet>
	}

	namespace n_UBasePromptCoordinator { // : UObject
		constexpr auto PlayerController = 0x28; // AAthenaPlayerController*
		constexpr auto PrioritisedPromptsManager = 0x40; // UPrioritisedPromptsManager*
		constexpr auto CharacterWithRegisteredEvents = 0x48; // ACharacter*
	}

	namespace n_USpireServiceParams { // : UDataAsset
		constexpr auto OnCancelFakeSpire = 0x28; // UActorSpawnData*
	}

	namespace n_ULandmarkReactionEvent { // : UObject
		constexpr auto Target = 0x28; // AActor*
		constexpr auto UseDefaultTarget = 0x30; // bool
	}

	namespace n_UStatusResponsePostProcess { // : UStatusResponse
		constexpr auto BeginMaterialWeight = 0x30; // float
		constexpr auto EndMaterialWeight = 0x34; // float
		constexpr auto MaterialInstance = 0x38; // UMaterialInterface*
		constexpr auto PostProcessComponentClass = 0x40; // UPostProcessComponent*
		constexpr auto PostProcessComponent = 0x48; // UPostProcessComponent*
	}

	namespace n_UGoldInContainerDataAsset { // : UDataAsset
		constexpr auto GoldData = 0x28; // TArray<FGoldInContainerData>
	}

	namespace n_UNPCDialogPredicateAtDamageTaken { // : UNPCDialogPredicate
		constexpr auto ActorIdx = 0x38; // int32_t
		constexpr auto DamageThreshold = 0x3c; // float
	}

	namespace n_UBTTask_AthenaWait { // : UBTTaskNode
		constexpr auto UseMinMax = 0x60; // bool
		constexpr auto Min = 0x68; // FAIDataProviderFloatValue
		constexpr auto Max = 0x98; // FAIDataProviderFloatValue
		constexpr auto FixedWaitTime = 0xc8; // FAIDataProviderFloatValue
	}

	namespace n_ASailHoist { // : ASailManipulator
		constexpr auto RopeUVSpeed = 0x7c8; // float
		constexpr auto Rigging = 0x7d0; // URiggingSystemComponent*
		constexpr auto RiggingRopeIndex = 0x7d8; // int32_t
		constexpr auto PlayAudio = 0x7dc; // bool
	}

	namespace n_UBuriedItemStepFromLocationDesc { // : UBuriedItemStepDesc
		constexpr auto ItemLocation = 0x128; // FQuestVariableVector
	}

	namespace n_AOnlineBeacon { // : AActor
		constexpr auto BeaconConnectionInitialTimeout = 0x3d8; // float
		constexpr auto BeaconConnectionTimeout = 0x3dc; // float
		constexpr auto NetDriver = 0x3e0; // UNetDriver*
	}

	namespace n_UControlPointMeshComponent { // : UStaticMeshComponent
		constexpr auto ForcedLodModel = 0x598; // int32_t
		constexpr auto bOverrideMinLOD = 0x59c; // bool
		constexpr auto bOverrideNavigationToDefaultObstacle = 0x59d; // bool
		constexpr auto MinLOD = 0x5a0; // int32_t
		constexpr auto StaticMesh = 0x5a8; // UStaticMesh*
		constexpr auto bOverrideWireframeColor = 0x5b0; // bool
		constexpr auto WireframeColorOverride = 0x5b4; // FColor
		constexpr auto bIgnoreInstanceForTextureStreaming = 0x5b8; // char : 1
		constexpr auto bOverrideLightMapRes = 0x5b8; // char : 1
		constexpr auto OverriddenLightMapRes = 0x5bc; // int32_t
		constexpr auto StreamingDistanceMultiplier = 0x5c0; // float
		constexpr auto IrrelevantLights = 0x5c8; // TArray<FGuid>
		constexpr auto LODData = 0x5d8; // TArray<FStaticMeshComponentLODInfo>
		constexpr auto CustomDepthMaterial = 0x5e8; // UMaterialInterface*
	}

	namespace n_UOnlineSessionClient { // : UOnlineSession
		constexpr auto bIsFromInvite = 0x160; // bool
		constexpr auto bHandlingDisconnect = 0x161; // bool
	}

	namespace n_UBTTask_PushPawnAction { // : UBTTask_PawnActionBase
		constexpr auto Action = 0x60; // UPawnAction*
	}

	namespace n_UInterpTrackInstParticleReplay { // : UInterpTrackInst
		constexpr auto LastUpdatePosition = 0x28; // float
	}

	namespace n_UBTDecorator_ActorInWater { // : UBTDecorator_BlackboardBase
		constexpr auto ReverseLogic = 0x90; // bool
	}

	namespace n_UInterpTrackInstToggle { // : UInterpTrackInst
		constexpr auto Action = 0x28; // ETrackToggleAction
		constexpr auto LastUpdatePosition = 0x2c; // float
		constexpr auto bSavedActiveState = 0x30; // char : 1
	}

	namespace n_ADrawDebugService { // : AActor
		constexpr auto MessagesReplicated = 0x3d8; // TArray<FDrawDebugItemMessage>
		constexpr auto SpheresReplicated = 0x3e8; // TArray<FDrawDebugItemSphere>
		constexpr auto BoxesReplicated = 0x3f8; // TArray<FDrawDebugItemBox>
		constexpr auto CapsulesReplicated = 0x408; // TArray<FDrawDebugItemCapsule>
		constexpr auto LinesReplicated = 0x418; // TArray<FDrawDebugItemLine>
		constexpr auto SectorsReplicated = 0x428; // TArray<FDrawDebugItemSector>
		constexpr auto StringsReplicated = 0x438; // TArray<FDrawDebugItemString>
		constexpr auto IsDrawDebugActive = 0x448; // bool
	}

	namespace n_UNetworkRegionService { // : UObject
		constexpr auto PlayersThatNeedToBeTicked = 0xb8; // TArray<APlayerController*>
	}

	namespace n_UBTTask_ReactToThreat { // : UBTTaskNode
		constexpr auto ReactAnimState = 0x60; // EAthenaAnimationPetRoamingState
		constexpr auto ChangeAnimationAfterWaitTime = 0x61; // bool
		constexpr auto ReactAnimTime = 0x64; // float
		constexpr auto AfterReactAnimState = 0x68; // EAthenaAnimationPetRoamingState
	}

	namespace n_UProtoTavernPianoInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UGameAudioService { // : UObject
		constexpr auto ClientRegisteredShips = 0x30; // TArray<AShip*>
	}

	namespace n_UPetSicknessComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UDebugSuperSailorInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ACutSceneActor { // : AActor
		constexpr auto DefaultSceneRoot = 0x3d8; // USceneComponent*
		constexpr auto CutSceneSubtitlesComponent = 0x3e0; // UCutSceneSubtitlesComponent*
		constexpr auto StartTimeInSeconds = 0x3e8; // double
		constexpr auto CutsceneActivated = 0x3f0; // bool
		constexpr auto TargetActors = 0x3f8; // TArray<AActor*>
		constexpr auto AnimationNameToPlay = 0x408; // FName
		constexpr auto LocalMusicZone = 0x410; // UMusicZoneComponent*
		constexpr auto PlaceableReaction = 0x418; // APlaceableReaction*
		constexpr auto DialogueData = 0x420; // USceneDialogueData*
		constexpr auto LocalisableNames = 0x428; // TArray<FText>
	}

	namespace n_UAIEncounterGenerationRecipeTypeList { // : UDataAsset
		constexpr auto AllRecipes = 0x28; // TArray<UAIEncounterGenerationRecipe*>
	}

	namespace n_UTaleQuestMultiTargetCompassAddTrackedLocationStepDesc { // : UTaleQuestStepDesc
		constexpr auto Location = 0x80; // FQuestVariableVector
		constexpr auto TargetID = 0x90; // FQuestVariableGuid
	}

	namespace n_AWorldSafeRegion { // : ABlockingVolume
		constexpr auto RequiresShroudBreaker = 0x409; // bool
		constexpr auto IsMainWorldSafeZone = 0x40a; // bool
	}

	namespace n_AShipCustomizationChestInteraction { // : APossessionsChestInteraction
		constexpr auto Categories = 0x438; // TArray<FFeaturedShipCustomisationCategory>
		constexpr auto AllTab = 0x448; // bool
	}

	namespace n_UAthenaTutorialComponent { // : UTutorialComponent
		constexpr auto MainTutorial = 0xe0; // FMainTutorialSequence
		constexpr auto HasPlayedWakeupAnim = 0xc80; // bool
	}

	namespace n_ACannonProjectile { // : ALaunchableProjectile
		constexpr auto ExplosionComponent = 0x610; // UExplosionComponent*
		constexpr auto ApplyKnockbackOnDirectHit = 0x618; // bool
		constexpr auto AllowFriendlyFireOnDirectHit = 0x619; // bool
		constexpr auto DirectHitHealthChangeReason = 0x61a; // EHealthChangedReason
		constexpr auto ImpactDamagerType = 0x620; // UDamagerType*
		constexpr auto StatTriggerForCannonballsHittingShips = 0x638; // UConditionalStatsTriggerType*
		constexpr auto StatTriggerForCannonballsHittingPlayers = 0x640; // UConditionalStatsTriggerType*
		constexpr auto StatTriggerForCannonballsHittingReactingActors = 0x648; // UConditionalStatsTriggerType*
	}

	namespace n_AStaticCargoRunCrate { // : AStaticMerchantCrate
		constexpr auto CargoRunCrateComponent = 0x7e0; // UCargoRunCrateComponent*
	}

	namespace n_ATestableEnchantedSpyglass { // : AEnchantedSpyglass
		constexpr auto EnchantedInventoryItem = 0x888; // UInventoryItemComponent*
		constexpr auto ConstellationVisibilityEventActor = 0x890; // AActor*
	}

	namespace n_UAssetReferencer { // : UDataAsset
		constexpr auto AssetsToReference = 0x28; // TArray<UObject*>
	}

	namespace n_ASceneCapture { // : AActor
		constexpr auto MeshComp = 0x3d0; // UStaticMeshComponent*
	}

	namespace n_UShipwreckClueDestinationGenerator { // : UClueDestinationGenerator
		constexpr auto RequiredClueSiteDataType = 0x28; // UClueSiteData*
		constexpr auto WeightedSupportedDescriptorTypes = 0x30; // TArray<FWeightedClueDestinationDescriptor>
	}

	namespace n_UTaleQuestRetrieveSpawnedMerchantCaptainFromShipwreckStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMaterialExpressionFeatureLevelSwitch { // : UMaterialExpression
		constexpr auto Default = 0x70; // FExpressionInput
		constexpr auto Inputs = 0xa8; // FExpressionInput [0x4]
	}

	namespace n_USpringArmComponent { // : USceneComponent
		constexpr auto TargetArmLength = 0x2b0; // float
		constexpr auto SocketOffset = 0x2b4; // FVector
		constexpr auto TargetOffset = 0x2c0; // FVector
		constexpr auto ProbeSize = 0x2cc; // float
		constexpr auto ProbeChannel = 0x2d0; // ECollisionChannel
		constexpr auto bDoCollisionTest = 0x2d4; // char : 1
		constexpr auto bUsePawnControlRotation = 0x2d4; // char : 1
		constexpr auto bInheritPitch = 0x2d4; // char : 1
		constexpr auto bInheritYaw = 0x2d4; // char : 1
		constexpr auto bInheritRoll = 0x2d4; // char : 1
		constexpr auto bEnableCameraLag = 0x2d4; // char : 1
		constexpr auto bEnableCameraRotationLag = 0x2d4; // char : 1
		constexpr auto bUseCameraLagSubstepping = 0x2d4; // char : 1
		constexpr auto bDrawDebugLagMarkers = 0x2d5; // char : 1
		constexpr auto CameraLagSpeed = 0x2d8; // float
		constexpr auto CameraRotationLagSpeed = 0x2dc; // float
		constexpr auto CameraLagMaxTimeStep = 0x2e0; // float
		constexpr auto CameraLagMaxDistance = 0x2e4; // float
	}

	namespace n_UMaybeCompressedCanvasRenderTarget2D { // : UObject
		constexpr auto OnCanvasUpdate = 0x28; // FScriptMulticastDelegate
		constexpr auto UncompressedRenderTarget = 0x38; // UCanvasRenderTarget2D*
		constexpr auto CompressedRenderTarget = 0x40; // UCompressedCanvasRenderTarget2D*
	}

	namespace n_UReapersMarkSettingsAsset { // : UDataAsset
		constexpr auto PollIntervalSeconds = 0x28; // float
		constexpr auto ReapersMarkFlag = 0x30; // UShipCustomizationDesc*
		constexpr auto ShipStatusStats = 0x38; // TArray<FReapersMarkStatusStatInfo>
		constexpr auto SkeletonCurseStats = 0x48; // TArray<FReapersMarkCurseStatInfo>
		constexpr auto ReapersMarkLevelData = 0x58; // TArray<FReapersMarkLevelEntry>
		constexpr auto StatToFireOnReapersMarkLevelIncrease = 0x68; // FPlayerStat
	}

	namespace n_UTaleQuestNotificationStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestNotificationStepDesc*
	}

	namespace n_UNPCDialogOptionDialogSelectDynamic { // : UNPCDialogOptionDialogSelect
		constexpr auto Text = 0x80; // FText
		constexpr auto LinkedDialog = 0xb8; // int32_t
	}

	namespace n_AFloatingItemProxy { // : AItemProxy
		constexpr auto PhysicsErrorCorrection = 0x630; // FRigidBodyErrorCorrection
		constexpr auto BaseComponent = 0x650; // UBoxComponent*
		constexpr auto MovementTimeStamp = 0x688; // FNetTimeStampCalculator
		constexpr auto TutorialOwner = 0x6f8; // AActor*
		constexpr auto IsTutorialProxy = 0x700; // bool
		constexpr auto ReplicatedPhysicsState = 0x708; // FReplicatedPhysicsState
		constexpr auto ForceKeepTickActive = 0x758; // bool
		constexpr auto CachedAutoAimCollisionChannel = 0x788; // ECollisionChannel
		constexpr auto CachedVehicleCollisionResponse = 0x789; // ECollisionResponse
	}

	namespace n_UTrackResponseCoordinatorStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTrackResponseCoordinatorStepDesc*
	}

	namespace n_UGeneratedLocationsDataAsset { // : UDataAsset
		constexpr auto Locations = 0x28; // TArray<FVector>
	}

	namespace n_UPetLoadoutComponent { // : UActorComponent
		constexpr auto LoadoutContainer = 0xd8; // FPetLoadoutContainer
		constexpr auto OwningPlayer = 0xf8; // AActor*
	}

	namespace n_UWorldComposition { // : UObject
		constexpr auto TilesStreaming = 0x98; // TArray<ULevelStreaming*>
		constexpr auto TilesStreamingTimeThreshold = 0xa8; // double
		constexpr auto bLoadAllTilesDuringCinematic = 0xb0; // bool
		constexpr auto bRebaseOriginIn3DSpace = 0xb1; // bool
		constexpr auto RebaseOriginDistance = 0xb4; // float
	}

	namespace n_UAmmoEffectsComponent { // : UMaterialManipulationComponent
		constexpr auto AmmoEffects = 0x108; // TArray<UAmmoBaseEffect*>
		constexpr auto ScalarNameMaterialMap = 0x118; // TMap<FName, FDynamicMaterialListContainer>
		constexpr auto AmmoEffectState = 0x168; // FAmmoEffectState
	}

	namespace n_UDockableKeyedInstrumentInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UBTTask_MoveDirectlyToward { // : UBTTask_BlackboardBase
		constexpr auto AcceptableRadius = 0x88; // float
		constexpr auto bDisablePathUpdateOnGoalLocationChange = 0x8c; // char : 1
		constexpr auto bProjectVectorGoalToNavigation = 0x8c; // char : 1
		constexpr auto bAllowStrafe = 0x8c; // char : 1
		constexpr auto bStopOnOverlap = 0x8c; // char : 1
	}

	namespace n_UAbandonedNoteClueTextChoiceSource { // : UObject
		constexpr auto ExistingDestinations = 0x40; // TMap<UClueDestinationDescriptor*, int16_t>
	}

	namespace n_UDebugStatusEffectOverlapZoneVisualizerComponent { // : UActorComponent
		constexpr auto BoxCollisionDimensions = 0xd0; // FVector
		constexpr auto DebugColour = 0xdc; // FColor
		constexpr auto VisibleState = 0xe0; // bool
	}

	namespace n_UNPCDialogOptionFireEvent { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto EventName = 0xb8; // FName
		constexpr auto CloseOnExecuted = 0xc0; // bool
		constexpr auto LinkedDialog = 0xc4; // int32_t
		constexpr auto RelevantOnServer = 0xc8; // bool
	}

	namespace n_AMerchantCrateItemInfo { // : ABootyItemInfo
		constexpr auto FaunaBreedRarity = 0x710; // TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry>
		constexpr auto CurrentShip = 0x778; // AActor*
	}

	namespace n_UKrakenShipWrappingKnockbackRegionComponent { // : USceneComponent
		constexpr auto KnockbackRegion = 0x2b0; // UBoxComponent*
		constexpr auto KnockbackDirection = 0x2b8; // FVector
		constexpr auto KnockbackTime = 0x2c4; // float
		constexpr auto KnockbackParams = 0x2c8; // FKnockBackInfo
	}

	namespace n_UMaterialExpressionLandscapeLayerSwitch { // : UMaterialExpression
		constexpr auto LayerUsed = 0x70; // FExpressionInput
		constexpr auto LayerNotUsed = 0xa8; // FExpressionInput
		constexpr auto ParameterName = 0xe0; // FName
		constexpr auto PreviewUsed = 0xe8; // char : 1
		constexpr auto ExpressionGUID = 0xec; // FGuid
	}

	namespace n_UAbilitySystemComponent { // : UGameplayTasksComponent
		constexpr auto DefaultStartingData = 0x130; // TArray<FAttributeDefaults>
		constexpr auto SpawnedAttributes = 0x140; // TArray<UAttributeSet*>
		constexpr auto ReplicatedPredictionKey = 0x150; // FPredictionKey
		constexpr auto OutgoingDuration = 0x1e0; // float
		constexpr auto IncomingDuration = 0x1e4; // float
		constexpr auto ActivatableAbilities = 0x1e8; // FGameplayAbilitySpecContainer
		constexpr auto AllReplicatedInstancedAbilities = 0x2f8; // TArray<UGameplayAbility*>
		constexpr auto SpawnedTargetActors = 0x4b8; // TArray<AGameplayAbilityTargetActor*>
		constexpr auto RepAnimMontageInfo = 0x4c8; // FGameplayAbilityRepAnimMontage
		constexpr auto LocalAnimMontageInfo = 0x4f8; // FGameplayAbilityLocalAnimMontage
		constexpr auto OwnerActor = 0x5c8; // AActor*
		constexpr auto AvatarActor = 0x5d0; // AActor*
		constexpr auto ActiveGameplayEffects = 0x5f0; // FActiveGameplayEffectsContainer
		constexpr auto ActiveGameplayCues = 0x958; // FActiveGameplayCueContainer
		constexpr auto BlockedAbilityBindings = 0xb48; // TArray<char>
	}

	namespace n_ATestBeaconHost { // : AOnlineBeaconHostObject
		constexpr auto BeaconTypeName = 0x3d0; // FString
		constexpr auto ClientBeaconActorClass = 0x3e0; // AOnlineBeaconClient*
		constexpr auto ClientActors = 0x3e8; // TArray<AOnlineBeaconClient*>
	}

	namespace n_UInterpTrackInstFloatParticleParam { // : UInterpTrackInst
		constexpr auto ResetFloat = 0x28; // float
	}

	namespace n_UCommodityHasDemandNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto CompanyNPCName = 0x30; // FName
		constexpr auto CommodityType = 0x38; // FCommoditySelectionType
		constexpr auto RequiredCommodityDemand = 0x40; // ECommodityDemand
	}

	namespace n_UAbandonedNoteClueTextIndexAssetMap { // : UDataAsset
		constexpr auto TextIndexMappings = 0x28; // TArray<FClueDestinationToTextIndex>
	}

	namespace n_UMaterialExpressionRopeParameter { // : UMaterialExpression
		constexpr auto RopeParameterType = 0x70; // EInstancedRopeParameterType
	}

	namespace n_ACargoRunCrate { // : AMerchantCrate
		constexpr auto CargoRunCrateComponent = 0x7c0; // UCargoRunCrateComponent*
	}

	namespace n_APuzzleMechanism { // : AInteractableObject
		constexpr auto InteractableComponent = 0x468; // UInteractableComponent*
	}

	namespace n_UCoherentUIGTInstancedComponent { // : UCoherentUIGTBaseComponent
		constexpr auto URL = 0x310; // FString
		constexpr auto HUDMaterialInstance = 0x328; // UMaterialInstanceDynamic*
		constexpr auto PlayerController = 0x330; // APlayerController*
	}

	namespace n_UWorldSequenceService { // : UObject
		constexpr auto Sequences = 0x30; // TMap<FString, ASequencerCutSceneActor*>
	}

	namespace n_ACollectableQuestObjectProvider { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTextureSwitchByGender { // : UTextureSwitch
		constexpr auto Entries = 0x220; // TArray<FTextureSwitchGenderEntry>
	}

	namespace n_UBTTask_SetVelocity { // : UBTTask_BlackboardBase
		constexpr auto UseBlackboardKey = 0x88; // bool
		constexpr auto NewVelocity = 0x8c; // FVector
	}

	namespace n_UEnvQueryGenerator_WaterDonut { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto InnerRadius = 0x90; // FAIDataProviderFloatValue
		constexpr auto OuterRadius = 0xc0; // FAIDataProviderFloatValue
		constexpr auto NumberOfRings = 0xf0; // FAIDataProviderIntValue
		constexpr auto PointsPerRing = 0x120; // FAIDataProviderIntValue
		constexpr auto ArcDirection = 0x150; // FEnvDirection
		constexpr auto ArcAngle = 0x170; // FAIDataProviderFloatValue
		constexpr auto ZOffsetFromCentre = 0x1a0; // FAIDataProviderFloatValue
		constexpr auto Center = 0x1d0; // UEnvQueryContext*
		constexpr auto bDefineArc = 0x1d8; // char : 1
		constexpr auto ProjectPointsToWaterSurface = 0x1d8; // char : 1
		constexpr auto WaterPlaneSourceContext = 0x1e0; // UEnvQueryContext*
		constexpr auto ApplyZOffsetToProjectPoints = 0x1e8; // char : 1
	}

	namespace n_UPostProcessComponent { // : USceneComponent
		constexpr auto Settings = 0x2c0; // FPostProcessSettings
		constexpr auto Priority = 0x800; // float
		constexpr auto BlendRadius = 0x804; // float
		constexpr auto BlendWeight = 0x808; // float
		constexpr auto bEnabled = 0x80c; // char : 1
		constexpr auto bUnbound = 0x80c; // char : 1
	}

	namespace n_AFauna { // : AAICreatureCharacter
		constexpr auto DisplayName = 0x808; // FText
		constexpr auto FaunaSpecies = 0x840; // UFaunaSpecies*
		constexpr auto FaunaBreed = 0x848; // UFaunaBreed*
		constexpr auto HeadOffset = 0x850; // FVector
		constexpr auto MountedScale = 0x85c; // FVector
		constexpr auto NearToSurfaceDistance = 0x868; // float
		constexpr auto StartDrowningTimePercentage = 0x86c; // float
		constexpr auto DrowningDeathTimeMin = 0x870; // float
		constexpr auto DrowningDeathTimeMax = 0x874; // float
		constexpr auto PercentageStarvedToChangeAnimation = 0x878; // float
		constexpr auto FadeOutTime = 0x87c; // float
		constexpr auto HitImpactParticleSystem = 0x880; // UObject*
		constexpr auto DeathParticleSystem = 0x888; // UObject*
		constexpr auto PutInCrateParticleSystem = 0x890; // UObject*
		constexpr auto PutInCrateSoundCue = 0x898; // UWwiseEvent*
		constexpr auto TookDamageSoundCue = 0x8a0; // UWwiseEvent*
		constexpr auto AgitationStartedSoundCue = 0x8a8; // UWwiseEvent*
		constexpr auto AgitationStoppedSoundCue = 0x8b0; // UWwiseEvent*
		constexpr auto CalmStartedSoundCue = 0x8b8; // UWwiseEvent*
		constexpr auto CalmStoppedSoundCue = 0x8c0; // UWwiseEvent*
		constexpr auto BreathBubblesParticleSystem = 0x8c8; // UObject*
		constexpr auto BreathBubblesSocketName = 0x8d0; // FName
		constexpr auto UnderwaterRTPCName = 0x8d8; // FName
		constexpr auto OnFeedingForceFeedbackEffect = 0x8e0; // UForceFeedbackEffect*
		constexpr auto MountableComponent = 0x8e8; // UMountableComponent*
		constexpr auto HealthComponent = 0x8f0; // UHealthComponent*
		constexpr auto DamageableComponent = 0x8f8; // UDamageableComponent*
		constexpr auto AttackHitVolume = 0x900; // UPrimitiveComponent*
		constexpr auto Animations = 0x908; // UFaunaAnimationData*
		constexpr auto DitherComponent = 0x910; // UDitherComponent*
		constexpr auto StatusEffectManagerComponent = 0x918; // ULightWeightStatusEffectManagerComponent*
		constexpr auto AIControllerParamsWhenInCrate = 0x920; // UAthenaAIControllerParamsDataAsset*
		constexpr auto PeriodicAINoiseEventComponent = 0x928; // UPeriodicAINoiseEventComponent*
		constexpr auto FaunaAgitationResponseDelegate = 0x930; // FScriptMulticastDelegate
		constexpr auto FaunaDirectedAgitationResponseDelegate = 0x940; // FScriptMulticastDelegate
		constexpr auto AgitationResponseChance = 0x950; // int32_t
		constexpr auto AgitationResponseTestFrequencyMin = 0x954; // int32_t
		constexpr auto AgitationResponseTestFrequencyMax = 0x958; // int32_t
		constexpr auto MaxNumFailedAgitationResponseTests = 0x95c; // int32_t
		constexpr auto AgitationResponseVFXDelay = 0x960; // float
		constexpr auto AgitationResponseRange = 0x964; // float
		constexpr auto AgitationResponseParticleSystem = 0x968; // UObject*
		constexpr auto AgitationResponseRangeParticleSystemAngle = 0x970; // float
		constexpr auto AgitationCollisionChannel = 0x974; // ECollisionChannel
		constexpr auto StopMovementWhenAgitated = 0x975; // bool
		constexpr auto ApproximateSpitTravelTime = 0x978; // float
		constexpr auto StopMovementWhenCalm = 0x97c; // bool
		constexpr auto TurningSpringAcceleration = 0x980; // float
		constexpr auto TurningSpringMaxVelocity = 0x984; // float
		constexpr auto TurnResetDelay = 0x988; // float
		constexpr auto PivotPointOffset = 0x98c; // FVector
		constexpr auto ShouldTurn = 0x998; // bool
		constexpr auto FeedingComponent = 0x9a0; // UFeedingComponent*
		constexpr auto FaunaMovementComponent = 0x9a8; // UFaunaMovementComponent*
		constexpr auto TimeUntilDrowned = 0x9b0; // float
		constexpr auto RandomAnimationSeed = 0x9b4; // int32_t
		constexpr auto Drowned = 0x9c4; // bool
		constexpr auto CratedState = 0x9c7; // EFaunaCratedState
		constexpr auto InWaterState = 0x9c8; // EFaunaInWaterState
		constexpr auto Crate = 0x9d0; // AActor*
		constexpr auto BreathBubblesParticleSystemComponent = 0x9d8; // UParticleSystemComponent*
		constexpr auto DrowningDeathTime = 0x9e0; // float
		constexpr auto IsPlayingStarvingAnim = 0x9e4; // bool
		constexpr auto IsAgitated = 0x9e5; // bool
		constexpr auto IsCalm = 0x9e6; // bool
		constexpr auto TargetTurnAngle = 0x9e8; // float
		constexpr auto VenomComponent = 0xb18; // UVenomComponent*
		constexpr auto CurrentShip = 0xb20; // AActor*
	}

	namespace n_ABrushShape { // : ABrush
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UNameplateComponent { // : USceneComponent
		constexpr auto FadeTime = 0x2b0; // float
		constexpr auto NameplateSocket = 0x2b8; // USkeletalMeshSocket*
	}

	namespace n_ASpyglass { // : ASkeletalMeshWieldableItem
		constexpr auto InventoryItem = 0x7a0; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7a8; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x7b0; // UUsableWieldableComponent*
		constexpr auto AimSensitivityComponent = 0x7b8; // UAimSensitivityComponent*
		constexpr auto NameplateVisibilityRangeExtensionFactorWhileZoomed = 0x7d0; // float
		constexpr auto SecondsUntilZoomStarts = 0x7d4; // float
		constexpr auto SecondsUntilPostStarts = 0x7d8; // float
		constexpr auto InAimFOV = 0x7dc; // float
		constexpr auto BlendSpeed = 0x7e0; // float
		constexpr auto AimSpeedScaleParameters = 0x7e4; // FItemUseSpeedParams
		constexpr auto PostProcessComponent = 0x7f0; // UPostProcessComponent*
		constexpr auto BlurCurve = 0x7f8; // UCurveFloat*
		constexpr auto DynamicMaterial = 0x838; // UMaterialInstanceDynamic*
		constexpr auto TurningOn = 0x840; // bool
		constexpr auto BlurTime = 0x844; // float
		constexpr auto BlurInDuration = 0x848; // float
		constexpr auto BlurOutDuration = 0x84c; // float
		constexpr auto Glint = 0x850; // UStaticMeshComponent*
		constexpr auto MaterialParent = 0x858; // UMaterial*
		constexpr auto LensNormal = 0x860; // UTexture2D*
		constexpr auto LensMask = 0x868; // UTexture2D*
		constexpr auto LensTint = 0x870; // FLinearColor
	}

	namespace n_AWieldableOtherMockActor { // : AStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_ALandmarkSphere { // : ALandmark
		constexpr auto DefaultShape = 0x658; // UShapeComponent*
	}

	namespace n_UPortalServiceParams { // : UDataAsset
		constexpr auto MinimumSpawnRangeInMeters = 0x28; // float
		constexpr auto MaximumSpawnRangeInMeters = 0x2c; // float
		constexpr auto PortalBoundsThreshold = 0x30; // float
	}

	namespace n_UTaleQuestGetCollectionItemCountStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UGetCurrentQuestInfoStepDesc { // : UTaleQuestStepDesc
		constexpr auto CurrentQuestIndex = 0x80; // FQuestVariableInt
		constexpr auto CurrentModuleIndex = 0x90; // FQuestVariableInt
		constexpr auto LastCompletedModuleIndex = 0xa0; // FQuestVariableInt
		constexpr auto CurrentPageAuthorName = 0xb0; // FQuestVariableName
	}

	namespace n_UPlayerAtmosphericsAudioComponent { // : USceneComponent
		constexpr auto AtmosphericParams = 0x2b0; // UPlayerAtmosphericsAudioComponentParams*
		constexpr auto NoiseMakerController = 0x2b8; // FNoiseMakerController
		constexpr auto AthenaPlayerCharacter = 0x308; // AAthenaPlayerCharacter*
	}

	namespace n_UMaterialExpressionLightmapUVs { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UAISpawnPointSeedComponent { // : USceneComponent
		constexpr auto AttachParent = 0xc8; // USceneComponent*
		constexpr auto AttachChildren = 0xd0; // TArray<USceneComponent*>
		constexpr auto AttachSocketName = 0xe0; // FName
		constexpr auto bRequiresCustomLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteTranslation = 0xe8; // char : 1
		constexpr auto bAbsoluteRotation = 0xe8; // char : 1
		constexpr auto bAbsoluteScale = 0xe8; // char : 1
		constexpr auto bVisible = 0xe8; // char : 1
		constexpr auto bHiddenInGame = 0xe8; // char : 1
		constexpr auto bShouldUpdatePhysicsVolume = 0xe8; // char : 1
		constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0xe9; // char : 1
		constexpr auto bUseAttachParentBound = 0xe9; // char : 1
		constexpr auto bComponentIsUnionOfChildren = 0xe9; // char : 1
		constexpr auto bJitterReduction = 0xe9; // char : 1
		constexpr auto CacheRootVelocity = 0xe9; // char : 1
		constexpr auto bWorldToComponentUpdated = 0xe9; // char : 1
		constexpr auto PhysicsVolume = 0xf8; // TWeakObjectPtr<APhysicsVolume>
		constexpr auto RelativeScale3D = 0x11c; // FVector
		constexpr auto RelativeLocation = 0x128; // FVector
		constexpr auto RelativeRotation = 0x134; // FRotator
		constexpr auto Mobility = 0x220; // EComponentMobility
		constexpr auto DetailMode = 0x221; // EDetailMode
		constexpr auto ComponentVelocity = 0x22c; // FVector
		constexpr auto PhysicsVolumeChangedDelegate = 0x238; // FScriptMulticastDelegate
		constexpr auto SocketVelocitiesToCache = 0x258; // TArray<FName>
	}

	namespace n_UAncientAIFormComponent { // : UAthenaAIFormComponent
		constexpr auto VfxCustomisations = 0xd0; // TArray<FAthenaAIFormComponentVfxCustomisation>
		constexpr auto FormData = 0xe0; // UAthenaAIFormDataAsset*
		constexpr auto HitReactionsLayer = 0xe8; // UCharacterHitReactionDamagerTypeToAnimTypeLayer*
	}

	namespace n_UBodySetup { // : UObject
		constexpr auto AggGeom = 0x28; // FKAggregateGeom
		constexpr auto BoneName = 0x70; // FName
		constexpr auto PhysicsType = 0x78; // EPhysicsType
		constexpr auto bCookComplexGeometryOnServer = 0x7c; // char : 1
		constexpr auto bConsiderForBounds = 0x7c; // char : 1
		constexpr auto bMeshCollideAll = 0x7c; // char : 1
		constexpr auto bDoubleSidedGeometry = 0x7c; // char : 1
		constexpr auto bGenerateNonMirroredCollision = 0x7c; // char : 1
		constexpr auto bSharedCookedData = 0x7c; // char : 1
		constexpr auto bGenerateMirroredCollision = 0x7c; // char : 1
		constexpr auto PhysMaterial = 0x80; // UPhysicalMaterial*
		constexpr auto CollisionReponse = 0x88; // EBodyCollisionResponse
		constexpr auto CollisionTraceFlag = 0x89; // ECollisionTraceFlag
		constexpr auto DefaultInstance = 0x90; // FBodyInstance
		constexpr auto WalkableSlopeOverride = 0x210; // FWalkableSlopeOverride
		constexpr auto BuildScale3D = 0x218; // FVector
	}

	namespace n_UAthenaGameInstance { // : UGameInstance
		constexpr auto AdditionalPlayModeLevels = 0x88; // UAthenaPlayModeLevelsDataAsset*
		constexpr auto NumLevels = 0x90; // uint64_t
		constexpr auto GameContext = 0x98; // UAthenaGameContext*
	}

	namespace n_UReapersMarkTrackedItemComponent { // : UActorComponent
		constexpr auto ItemType = 0xd8; // EReapersMarkTrackedBootyItemType
	}

	namespace n_UTaleQuestStartingBannerStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UGiveItemUponConsumptionComponent { // : UConsumableWieldableComponent
		constexpr auto ItemToGive = 0xd0; // UItemDesc*
	}

	namespace n_UTextureSwitchByBodyShape { // : UTextureSwitch
		constexpr auto Entries = 0x220; // TArray<FTextureSwitchBodyShapeEntry>
	}

	namespace n_UParticleModuleEventReceiverSpawn { // : UParticleModuleEventReceiverBase
		constexpr auto SpawnCount = 0x60; // FRawDistributionFloat
		constexpr auto AdditionalSpawnCounts = 0x98; // FRawDistributionFloat [0x5]
		constexpr auto bUseGroupAForAll = 0x1b0; // char : 1
		constexpr auto bUseParticleTime = 0x1b0; // char : 1
		constexpr auto bUsePSysLocation = 0x1b0; // char : 1
		constexpr auto bInheritVelocity = 0x1b0; // char : 1
		constexpr auto InheritVelocityScale = 0x1b8; // FRawDistributionVector
	}

	namespace n_UStrategyNonVerbalRadialContentRule { // : UNonVerbalRadialContentRule
		constexpr auto CurrentPhrases = 0xa8; // UNonVerbalRadialDataAsset*
	}

	namespace n_UTeleportLungeAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto AbilityCooldownSpeedMultiplier = 0x28; // float
		constexpr auto DamageRequiredForNextIntervalMultiplier = 0x2c; // float
		constexpr auto OverrideParams = 0x30; // bool
		constexpr auto AutoActivateOnStageTransition = 0x31; // bool
		constexpr auto TypeClass = 0x38; // UAthenaAIAbilityType*
	}

	namespace n_UCapstanMechanismTriggerComponent { // : UMechanismTriggerComponent
		constexpr auto TriggerType = 0xd8; // EMechanismTriggerType
		constexpr auto OnMechanismActionRegisteredWithTriggerDelegate = 0xe0; // FScriptMulticastDelegate
		constexpr auto OnMechanismActionUnregisteredWithTriggerDelegate = 0xf0; // FScriptMulticastDelegate
		constexpr auto OnMechanismTriggerChangedMechanismActionStatesDelegate = 0x100; // FScriptMulticastDelegate
		constexpr auto OnMechanismTriggerStateChangedDelegate = 0x110; // FScriptMulticastDelegate
		constexpr auto OnMechanismTriggerResetDelegate = 0x120; // FScriptMulticastDelegate
		constexpr auto TriggerState = 0x140; // EMechanismTriggerState
	}

	namespace n_UInterpTrack { // : UObject
		constexpr auto SubTracks = 0x38; // TArray<UInterpTrack*>
		constexpr auto TrackInstClass = 0x48; // UInterpTrackInst*
		constexpr auto ActiveCondition = 0x50; // ETrackActiveCondition
		constexpr auto TrackTitle = 0x58; // FString
		constexpr auto bOnePerGroup = 0x68; // char : 1
		constexpr auto bDirGroupOnly = 0x68; // char : 1
		constexpr auto bDisableTrack = 0x68; // char : 1
		constexpr auto bIsSelected = 0x68; // char : 1
		constexpr auto bIsAnimControlTrack = 0x68; // char : 1
		constexpr auto bSubTrackOnly = 0x68; // char : 1
		constexpr auto bVisible = 0x68; // char : 1
		constexpr auto bIsRecording = 0x68; // char : 1
	}

	namespace n_UDynamicFlowComponent { // : UStaticMeshComponent
		constexpr auto FlowTexture = 0x5f0; // UTexture2D*
		constexpr auto TextureSizeX = 0x5f8; // int32_t
		constexpr auto TextureSizeY = 0x5fc; // int32_t
		constexpr auto UpdateCullDistance = 0x600; // float
		constexpr auto FlowUVScrollSpeed = 0x604; // FVector2D
		constexpr auto WaterDepthDistances = 0x610; // FVector4
		constexpr auto NearFadeStart = 0x620; // float
		constexpr auto NearFadeRange = 0x624; // float
		constexpr auto FlowScale = 0x628; // FVector2D
		constexpr auto FlowBias = 0x630; // FVector2D
		constexpr auto BlurCentreWeights = 0x640; // FVector4
		constexpr auto BlurEdgeWeights = 0x650; // FVector4
		constexpr auto FadeWeights = 0x660; // FVector4
		constexpr auto RenderTargetTexture = 0x670; // UTextureRenderTarget2D*
		constexpr auto RenderTargetTexturePingPong = 0x678; // UTextureRenderTarget2D*
	}

	namespace n_UContestAwardScoreForItemDugUpStepDesc { // : UTaleQuestStepDesc
		constexpr auto DiscoveringCharacter = 0x80; // FQuestVariablePlayerActor
		constexpr auto ItemDugUp = 0x90; // FQuestVariableActor
	}

	namespace n_AStaticSimpleBootyItemProxy { // : ABaseSimpleBootyItemProxy
		constexpr auto RetractableComponent = 0x7a8; // URetractableComponent*
		constexpr auto ItemProxyShipTrackerComponent = 0x7b0; // UItemProxyShipTrackerComponent*
	}

	namespace n_URiddleQuestDescGeneratorData { // : UDataAsset
		constexpr auto TemporaryLandmarkRadius = 0x28; // float
		constexpr auto TemporaryLandmarkHeight = 0x2c; // float
		constexpr auto ValidRiddleOptions = 0x30; // TArray<FValidRiddleOptions>
		constexpr auto RiddleActionInfo = 0x40; // TArray<FRiddleActionInfo>
		constexpr auto CompassDirections = 0x50; // TArray<FText>
		constexpr auto NumPacesPhraseId = 0x60; // FName
	}

	namespace n_UContendedResourceComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMovieSceneEnumSection { // : UMovieSceneSection
		constexpr auto EnumCurve = 0xa0; // FIntegralCurve
	}

	namespace n_UMaterialExpressionFresnel { // : UMaterialExpression
		constexpr auto ExponentIn = 0x70; // FExpressionInput
		constexpr auto Exponent = 0xa8; // float
		constexpr auto BaseReflectFractionIn = 0xb0; // FExpressionInput
		constexpr auto BaseReflectFraction = 0xe8; // float
		constexpr auto Normal = 0xf0; // FExpressionInput
	}

	namespace n_UProgressBar { // : UWidget
		constexpr auto WidgetStyle = 0x138; // FProgressBarStyle
		constexpr auto Style = 0x2f0; // USlateWidgetStyleAsset*
		constexpr auto BackgroundImage = 0x2f8; // USlateBrushAsset*
		constexpr auto FillImage = 0x300; // USlateBrushAsset*
		constexpr auto MarqueeImage = 0x308; // USlateBrushAsset*
		constexpr auto Percent = 0x310; // float
		constexpr auto BarFillType = 0x314; // EProgressBarFillType
		constexpr auto bIsMarquee = 0x315; // bool
		constexpr auto PercentDelegate = 0x318; // DelegateProperty
		constexpr auto FillColorAndOpacity = 0x328; // FLinearColor
		constexpr auto FillColorAndOpacityDelegate = 0x338; // DelegateProperty
	}

	namespace n_URadialDamagerComponent { // : UActorComponent
		constexpr auto DamageIntervalSeconds = 0xc8; // float
		constexpr auto DamagePerSecondAtCentre = 0xcc; // float
		constexpr auto DamagePerSecondAtMaxRadius = 0xd0; // float
		constexpr auto DamageRadius = 0xd4; // float
		constexpr auto DamagerType = 0xe0; // UDamagerType*
		constexpr auto HealthChangedReason = 0xe8; // EHealthChangedReason
		constexpr auto LocalOffset = 0xec; // FVector
	}

	namespace n_UEmissaryActiveTableVisualiserComponent { // : UActorComponent
		constexpr auto TargetCompany = 0xc8; // UCompany*
		constexpr auto MaterialChanges = 0xd0; // TArray<FMaterialVisualisation>
		constexpr auto LightChanges = 0xf0; // TArray<FLightVisualisation>
		constexpr auto ParticleChanges = 0x110; // TArray<FParticleVisualisation>
	}

	namespace n_UParticleModuleCameraOffset { // : UParticleModuleCameraBase
		constexpr auto CameraOffset = 0x50; // FRawDistributionFloat
		constexpr auto bSpawnTimeOnly = 0x88; // char : 1
		constexpr auto UpdateMethod = 0x8c; // EParticleCameraOffsetUpdateMethod
	}

	namespace n_UAchievementDefinitionDataAsset { // : UDataAsset
		constexpr auto AchievementDefintions = 0x28; // TArray<FAchievementDefinition>
	}

	namespace n_UInterpTrackToggle { // : UInterpTrack
		constexpr auto ToggleTrack = 0x70; // TArray<FToggleTrackKey>
		constexpr auto bActivateSystemEachUpdate = 0x80; // char : 1
		constexpr auto bActivateWithJustAttachedFlag = 0x80; // char : 1
		constexpr auto bFireEventsWhenForwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x80; // char : 1
	}

	namespace n_USirenStatuesSelector_BasedOnShipSize { // : USirenStatuesSelector
		constexpr auto Entries = 0x28; // TArray<FSirenStatuesSelector_BasedOnShipSize_Entry>
	}

	namespace n_UBootyItemBuryHistoryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UGameNetworkManagerSettings { // : UObject
		constexpr auto MinDynamicBandwidth = 0x28; // int32_t
		constexpr auto MaxDynamicBandwidth = 0x2c; // int32_t
		constexpr auto TotalNetBandwidth = 0x30; // int32_t
		constexpr auto BadPingThreshold = 0x34; // int32_t
		constexpr auto bIsStandbyCheckingEnabled = 0x38; // char : 1
		constexpr auto StandbyRxCheatTime = 0x3c; // float
		constexpr auto StandbyTxCheatTime = 0x40; // float
		constexpr auto PercentMissingForRxStandby = 0x44; // float
		constexpr auto PercentMissingForTxStandby = 0x48; // float
		constexpr auto PercentForBadPing = 0x4c; // float
		constexpr auto JoinInProgressStandbyWaitTime = 0x50; // float
	}

	namespace n_ULightningComponent { // : UActorComponent
		constexpr auto LightningDataAsset = 0xc8; // ULightningDataAsset*
		constexpr auto CachedExplosionComponent = 0xd0; // UExplosionComponent*
		constexpr auto BaseCloudMeshComponent = 0xd8; // UStaticMeshComponent*
		constexpr auto ActiveLightning = 0xe0; // FActiveLightning [0x2]
		constexpr auto LightningMeshComponents = 0x270; // TArray<UStaticMeshComponent*>
	}

	namespace n_USplineWithEmitterComponent { // : USplineComponent
		constexpr auto SplineAudioPool = 0x608; // UWwiseObjectPoolWrapper*
		constexpr auto LoopingSoundPlayEvent = 0x610; // UWwiseEvent*
		constexpr auto LoopingSoundStopEvent = 0x618; // UWwiseEvent*
		constexpr auto WwiseEmitterComponent = 0x620; // UWwiseEmitterComponent*
	}

	namespace n_UObjectLibrary { // : UObject
		constexpr auto ObjectBaseClass = 0x28; // UObject*
		constexpr auto bHasBlueprintClasses = 0x30; // bool
		constexpr auto Objects = 0x38; // TArray<UObject*>
		constexpr auto WeakObjects = 0x48; // TArray<TWeakObjectPtr<UObject>>
		constexpr auto bUseWeakReferences = 0x58; // bool
		constexpr auto bIsFullyLoaded = 0x59; // bool
	}

	namespace n_AKrakenTentacle { // : AActor
		constexpr auto HealthComponent = 0x3f0; // UHealthComponent*
		constexpr auto DamageableComponent = 0x3f8; // UActorDamageableComponent*
		constexpr auto VenomComponent = 0x400; // UVenomComponent*
		constexpr auto VenomChance = 0x408; // float
	}

	namespace n_UTaleQuestCheckpointService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UTaleQuestCheckpointServiceDesc*
	}

	namespace n_UIsPlayModeStatCondition { // : UStatCondition
		constexpr auto Playmode = 0x28; // EPlayMode
	}

	namespace n_UCharacterMovementComponent { // : UPawnMovementComponent
		constexpr auto CharacterOwner = 0x178; // ACharacter*
		constexpr auto GravityScale = 0x180; // float
		constexpr auto MaxStepHeight = 0x184; // float
		constexpr auto JumpZVelocity = 0x188; // float
		constexpr auto JumpOffJumpZFactor = 0x18c; // float
		constexpr auto WalkableFloorAngle = 0x190; // float
		constexpr auto WalkableFloorZ = 0x194; // float
		constexpr auto MovementMode = 0x198; // EMovementMode
		constexpr auto CustomMovementMode = 0x199; // char
		constexpr auto GroundFriction = 0x1c0; // float
		constexpr auto MaxWalkSpeed = 0x1c4; // float
		constexpr auto MaxWalkSpeedBackwards = 0x1c8; // float
		constexpr auto WalkBackwardsMinAngle = 0x1cc; // float
		constexpr auto WalkBackwardsMaxAngle = 0x1d0; // float
		constexpr auto MaxWalkSpeedCrouched = 0x1d4; // float
		constexpr auto MaxSwimSpeed = 0x1d8; // float
		constexpr auto MaxFlySpeed = 0x1dc; // float
		constexpr auto MaxCustomMovementSpeed = 0x1e0; // float
		constexpr auto MaxAcceleration = 0x1e4; // float
		constexpr auto MaxChargeAcceleration = 0x1e8; // float
		constexpr auto BrakingFrictionFactor = 0x1ec; // float
		constexpr auto BrakingFriction = 0x1f0; // float
		constexpr auto bUseSeparateBrakingFriction = 0x1f4; // char : 1
		constexpr auto BrakingDecelerationWalking = 0x1f8; // float
		constexpr auto BrakingDecelerationFalling = 0x1fc; // float
		constexpr auto BrakingDecelerationSwimming = 0x200; // float
		constexpr auto BrakingDecelerationFlying = 0x204; // float
		constexpr auto AirControl = 0x208; // float
		constexpr auto AirControlBoostMultiplier = 0x20c; // float
		constexpr auto AirControlBoostVelocityThreshold = 0x210; // float
		constexpr auto FallingLateralFriction = 0x214; // float
		constexpr auto CrouchedHalfHeight = 0x218; // float
		constexpr auto Buoyancy = 0x21c; // float
		constexpr auto PerchRadiusThreshold = 0x220; // float
		constexpr auto PerchAdditionalHeight = 0x224; // float
		constexpr auto RotationRate = 0x228; // FRotator
		constexpr auto bUseControllerDesiredRotation = 0x234; // char : 1
		constexpr auto bOrientRotationToMovement = 0x234; // char : 1
		constexpr auto bMovementInProgress = 0x234; // char : 1
		constexpr auto bEnableScopedMovementUpdates = 0x234; // char : 1
		constexpr auto bForceMaxAccel = 0x234; // char : 1
		constexpr auto bRunPhysicsWithNoController = 0x234; // char : 1
		constexpr auto bForceNextFloorCheck = 0x234; // char : 1
		constexpr auto bShrinkProxyCapsule = 0x234; // char : 1
		constexpr auto bCanWalkOffLedges = 0x235; // char : 1
		constexpr auto bCanWalkOffLedgesWhenCrouching = 0x235; // char : 1
		constexpr auto bDeferUpdateMoveComponent = 0x235; // char : 1
		constexpr auto DeferredUpdatedMoveComponent = 0x238; // USceneComponent*
		constexpr auto MaxOutOfWaterStepHeight = 0x240; // float
		constexpr auto OutofWaterZ = 0x244; // float
		constexpr auto Mass = 0x248; // float
		constexpr auto bEnablePhysicsInteraction = 0x24c; // bool
		constexpr auto bTouchForceScaledToMass = 0x24d; // bool
		constexpr auto bPushForceScaledToMass = 0x24e; // bool
		constexpr auto bScalePushForceToVelocity = 0x24f; // bool
		constexpr auto StandingDownwardForceScale = 0x250; // float
		constexpr auto InitialPushForceFactor = 0x254; // float
		constexpr auto PushForceFactor = 0x258; // float
		constexpr auto PushForcePointZOffsetFactor = 0x25c; // float
		constexpr auto TouchForceFactor = 0x260; // float
		constexpr auto MinTouchForce = 0x264; // float
		constexpr auto MaxTouchForce = 0x268; // float
		constexpr auto RepulsionForce = 0x26c; // float
		constexpr auto NetMoveDelta = 0x270; // float
		constexpr auto bForceBraking = 0x274; // char : 1
		constexpr auto CrouchedSpeedMultiplier = 0x278; // float
		constexpr auto UpperImpactNormalScale = 0x27c; // float
		constexpr auto Acceleration = 0x280; // FVector
		constexpr auto LastUpdateLocation = 0x28c; // FVector
		constexpr auto PendingImpulseToApply = 0x298; // FVector
		constexpr auto PendingForceToApply = 0x2a4; // FVector
		constexpr auto AnalogInputModifier = 0x2b0; // float
		constexpr auto MaxSimulationTimeStep = 0x2c4; // float
		constexpr auto MaxSimulationIterations = 0x2c8; // int32_t
		constexpr auto MaxSmoothNetUpdateDist = 0x2cc; // float
		constexpr auto NoSmoothNetUpdateDist = 0x2d0; // float
		constexpr auto NetworkSimulatedSmoothLocationTime = 0x2d4; // float
		constexpr auto NetworkSimulatedSmoothRotationTime = 0x2d8; // float
		constexpr auto LedgeCheckThreshold = 0x2dc; // float
		constexpr auto JumpOutOfWaterPitch = 0x2e0; // float
		constexpr auto CurrentFloor = 0x2e4; // FFindFloorResult
		constexpr auto DefaultLandMovementMode = 0x370; // EMovementMode
		constexpr auto DefaultWaterMovementMode = 0x371; // EMovementMode
		constexpr auto GroundMovementMode = 0x372; // EMovementMode
		constexpr auto bMaintainHorizontalGroundVelocity = 0x374; // char : 1
		constexpr auto bImpartBaseVelocityX = 0x374; // char : 1
		constexpr auto bImpartBaseVelocityY = 0x374; // char : 1
		constexpr auto bImpartBaseVelocityZ = 0x374; // char : 1
		constexpr auto bImpartBaseAngularVelocity = 0x374; // char : 1
		constexpr auto bJustTeleported = 0x374; // char : 1
		constexpr auto bNetworkUpdateReceived = 0x374; // char : 1
		constexpr auto bBasedMovementUpdateReceived = 0x374; // char : 1
		constexpr auto bMovementUpdateReceived = 0x375; // char : 1
		constexpr auto bNetworkMovementModeChanged = 0x375; // char : 1
		constexpr auto bNotifyApex = 0x375; // char : 1
		constexpr auto bCheatFlying = 0x375; // char : 1
		constexpr auto bWantsToCrouch = 0x375; // char : 1
		constexpr auto bCrouchMaintainsBaseLocation = 0x375; // char : 1
		constexpr auto bIgnoreBaseRotation = 0x375; // char : 1
		constexpr auto bFastAttachedMove = 0x375; // char : 1
		constexpr auto bAlwaysCheckFloor = 0x376; // char : 1
		constexpr auto bUseFlatBaseForFloorChecks = 0x376; // char : 1
		constexpr auto bPerformingJumpOff = 0x376; // char : 1
		constexpr auto bWantsToLeaveNavWalking = 0x376; // char : 1
		constexpr auto bUseRVOAvoidance = 0x376; // char : 1
		constexpr auto bRequestedMoveUseAcceleration = 0x376; // char : 1
		constexpr auto bPreventSimulatedFloorChecks = 0x376; // char : 1
		constexpr auto bPreventNavMeshFalling = 0x376; // char : 1
		constexpr auto bHasRequestedVelocity = 0x377; // char : 1
		constexpr auto bRequestedMoveWithMaxSpeed = 0x377; // char : 1
		constexpr auto bWasAvoidanceUpdated = 0x377; // char : 1
		constexpr auto bProjectNavMeshWalking = 0x377; // char : 1
		constexpr auto SmoothingClientPositionTolerance = 0x38c; // float
		constexpr auto AvoidanceConsiderationRadius = 0x390; // float
		constexpr auto RequestedVelocity = 0x394; // FVector
		constexpr auto AvoidanceUID = 0x3a0; // int32_t
		constexpr auto AvoidanceGroup = 0x3a4; // FNavAvoidanceMask
		constexpr auto GroupsToAvoid = 0x3a8; // FNavAvoidanceMask
		constexpr auto GroupsToIgnore = 0x3ac; // FNavAvoidanceMask
		constexpr auto AvoidanceWeight = 0x3b0; // float
		constexpr auto PendingLaunchVelocity = 0x3b4; // FVector
		constexpr auto NavMeshProjectionInterval = 0x458; // float
		constexpr auto NavMeshProjectionTimer = 0x45c; // float
		constexpr auto bUseNavMeshProjectionTimeModifier = 0x460; // bool
		constexpr auto MaxNavMeshProjectionInterval = 0x464; // float
		constexpr auto NavMeshProjectionInterpSpeed = 0x46c; // float
		constexpr auto bUsePlaneBasedNavMeshProjectionInterpSystem = 0x470; // bool
		constexpr auto MaxAllowedZOffsetFromCurrentPlane = 0x474; // float
		constexpr auto MaxZDiffFromPrevPlane = 0x478; // float
		constexpr auto NavMeshProjectionHeightScaleUp = 0x498; // float
		constexpr auto NavMeshProjectionHeightScaleDown = 0x49c; // float
		constexpr auto UseControllerRotationInNavWalkingMoveComponent = 0x4a0; // bool
		constexpr auto PreClothComponentTick = 0x4a8; // FCharacterMovementComponentPreClothTickFunction
		constexpr auto MinTimeBetweenTimeStampResets = 0x50c; // float
		constexpr auto RootMotionParams = 0x510; // FRootMotionMovementParams
		constexpr auto bWasSimulatingRootMotion = 0x550; // bool
	}

	namespace n_UShipAudioEmitterComponent { // : UWwiseEmitterComponent
		constexpr auto WwiseEvent = 0x2e0; // UWwiseEvent*
		constexpr auto ShipSinkingExceededRollThreshold = 0x2e8; // bool
		constexpr auto SetRTPC_Pitch = 0x2e9; // bool
		constexpr auto SetRTPC_Roll = 0x2ea; // bool
		constexpr auto SetRTPC_Velocity = 0x2eb; // bool
		constexpr auto SetRTPC_Strain = 0x2ec; // bool
	}

	namespace n_UEmptyEmoteDesc { // : UEmoteDesc
		constexpr auto EmoteInfo = 0xe0; // FStringAssetReference
		constexpr auto BackgroundPath = 0xf0; // FStringAssetReference
		constexpr auto LookAtSocketName = 0x100; // FName
		constexpr auto OverridePreviewCameraName = 0x108; // FName
	}

	namespace n_USittingThirdPersonCameraInputComponent { // : UAthenaCharacterBaseInputComponentWithInterference
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UCoherentUIGTNameplateComponent { // : UCoherentUIGTAtlasComponent
		constexpr auto MaxElements = 0x3c8; // int32_t
		constexpr auto NormalizedScreenSpaceVisibilityMargin = 0x3cc; // float
		constexpr auto DistanceScalingCurve = 0x3d0; // UCurveFloat*
		constexpr auto TitleFadeDistance = 0x3d8; // float
		constexpr auto VisibilityFactors = 0x3dc; // FNameplateVisibilityFactors
	}

	namespace n_ASpikeMechanismActionProxy { // : APivotAnimatedMechanismActionProxy
		constexpr auto Extent = 0x418; // float
		constexpr auto Damage = 0x41c; // float
		constexpr auto DamageReason = 0x420; // EHealthChangedReason
		constexpr auto AllowedInteractableTypes = 0x428; // TArray<FAllowedInteractableTypes>
	}

	namespace n_UNPCOnSurfaceResponseMetadata { // : UCutsceneResponseMetaData
		constexpr auto Delay = 0x28; // float
		constexpr auto Cooldown = 0x2c; // float
	}

	namespace n_UBTTask_SetTagCooldown { // : UBTTaskNode
		constexpr auto CooldownTag = 0x60; // FGameplayTag
		constexpr auto bAddToExistingDuration = 0x68; // bool
		constexpr auto CoolDownDuration = 0x6c; // float
	}

	namespace n_UTaleQuestAssignContendedResourceStepDesc { // : UTaleQuestStepDesc
		constexpr auto RelevantResources = 0x80; // FQuestVariableAssetArray
		constexpr auto SelectionOriginPointVar = 0x90; // FQuestVariableVector
		constexpr auto AllocatedResourceHandle = 0xa0; // FQuestVariableTaleResourceHandle
		constexpr auto AllocatedResource = 0xb0; // FQuestVariableAsset
		constexpr auto AllocatedResourceIndex = 0xc0; // FQuestVariableInt
		constexpr auto ResourceSelectionPolicy = 0xd0; // ESelectionPolicy
	}

	namespace n_UAddMarkToTornMapAtLocationStepDesc { // : UAddMarkToTornMapStepDescBase
		constexpr auto MarkLocation = 0xa0; // FQuestVariableVector
	}

	namespace n_UParticleModuleLocationDirect { // : UParticleModuleLocationBase
		constexpr auto Location = 0x50; // FRawDistributionVector
		constexpr auto LocationOffset = 0x88; // FRawDistributionVector
		constexpr auto ScaleFactor = 0xc0; // FRawDistributionVector
		constexpr auto Direction = 0xf8; // FRawDistributionVector
	}

	namespace n_UWidgetBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_USoundAttenuation { // : UObject
		constexpr auto Attenuation = 0x28; // FAttenuationSettings
	}

	namespace n_UMaterialParameterCollection { // : UObject
		constexpr auto StateId = 0x28; // FGuid
		constexpr auto ScalarParameters = 0x38; // TArray<FCollectionScalarParameter>
		constexpr auto VectorParameters = 0x48; // TArray<FCollectionVectorParameter>
	}

	namespace n_UStatConditionProxyItemInfoTargetSelector { // : UStatConditionTargetSelector
		constexpr auto Target = 0x28; // EStatConditionTarget
	}

	namespace n_UTaleQuestStoreClueOnActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto ClueDescriptor = 0x80; // FQuestVariableClueDescriptor
		constexpr auto Actor = 0x90; // FQuestVariableActor
		constexpr auto ClueActor = 0xa0; // FQuestVariableActor
	}

	namespace n_UStringToAssetClassMap { // : UDataAsset
		constexpr auto StringAssetClassPairs = 0x28; // TArray<FStringAssetClassPair>
	}

	namespace n_UFiniteUseNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto LinkedDialog = 0x30; // int32_t
		constexpr auto LinkedDialogOption = 0x34; // int32_t
		constexpr auto NumberOfUses = 0x38; // int32_t
	}

	namespace n_UShroudBreakerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AWellOfFates { // : AInteractableObject
		constexpr auto SkeletalMesh = 0x470; // USkeletalMeshComponent*
		constexpr auto StaticMesh = 0x478; // UStaticMeshComponent*
		constexpr auto LanternParticleSystem = 0x480; // UParticleSystemComponent*
		constexpr auto WellOfFatesParticleSystem = 0x488; // UParticleSystemComponent*
		constexpr auto PointLight = 0x490; // UPointLightComponent*
		constexpr auto InteractableComponent = 0x498; // UInteractableComponent*
		constexpr auto InteractionRadius = 0x4a0; // float
		constexpr auto EventDispatcher = 0x4a8; // FObjectMessagingDispatcher
	}

	namespace n_UAISpawnContextTaleQuestServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto AISpawnContextName = 0x28; // FName
		constexpr auto SpecificToIsland = 0x30; // bool
		constexpr auto ActorLocatedOnIsland = 0x38; // FQuestVariableAsset
	}

	namespace n_AEmoteDice { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UUserSettingsMapMarkProviderComponent { // : UActorComponent
		constexpr auto MarkMappings = 0xd0; // TArray<FUserSettingsMapMarkDefinition>
	}

	namespace n_ANavLinkProxy { // : AActor
		constexpr auto PointLinks = 0x3e0; // TArray<FNavigationLink>
		constexpr auto SegmentLinks = 0x3f0; // TArray<FNavigationSegmentLink>
		constexpr auto SmartLinkComp = 0x400; // UNavLinkCustomComponent*
		constexpr auto bSmartLinkIsRelevant = 0x408; // bool
		constexpr auto OnSmartLinkReached = 0x410; // FScriptMulticastDelegate
	}

	namespace n_AServerOnlyTestActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UInterpTrackVectorMaterialParam { // : UInterpTrackVectorBase
		constexpr auto TargetMaterials = 0x90; // TArray<UMaterialInterface*>
		constexpr auto ParamName = 0xa0; // FName
	}

	namespace n_UAIWieldableUseInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ATestAthenaGameMode { // : AAthenaGameMode
		constexpr auto GhostShipPawnClass = 0x4e0; // APawn*
		constexpr auto ServerNetworkedEventsWhitelistDefinition = 0x4e8; // UNetworkedEventsWhitelistDefinition*
		constexpr auto GhostShipCoordinator = 0x688; // FGhostShipCoordinator
		constexpr auto StorageContainerRefresher = 0x8b8; // FStorageContainerRefresher
		constexpr auto RiddleQuestDescGeneratorData = 0x990; // URiddleQuestDescGeneratorData*
		constexpr auto RespawnTimer = 0x998; // float
		constexpr auto ContestRespawnTimer = 0x99c; // float
		constexpr auto StorageContainerRefreshInterval = 0x9a0; // float
		constexpr auto ContainerRefreshBatchSize = 0x9a4; // int32_t
	}

	namespace n_UParticleModuleSpawn { // : UParticleModuleSpawnBase
		constexpr auto Rate = 0x58; // FRawDistributionFloat
		constexpr auto AdditionalRates = 0x90; // FRawDistributionFloat [0x5]
		constexpr auto StartScaleDistance = 0x1a8; // float
		constexpr auto EndScaleDistance = 0x1ac; // float
		constexpr auto RateScaleOverDistance = 0x1b0; // FRawDistributionFloat
		constexpr auto RateScale = 0x1e8; // FRawDistributionFloat
		constexpr auto ParticleBurstMethod = 0x220; // EParticleBurstMethod
		constexpr auto BurstList = 0x228; // TArray<FParticleBurst>
		constexpr auto BurstScale = 0x238; // FRawDistributionFloat
		constexpr auto bApplyGlobalSpawnRateScale = 0x270; // char : 1
		constexpr auto bBurstTreatedAsLoopingForLODs = 0x270; // char : 1
	}

	namespace n_AControllableJIPTestFixture { // : ATestLevelScriptActor
		constexpr auto ObjectToSpawn = 0x498; // AControllableObject*
		constexpr auto ExpectedActionState = 0x4a0; // UActionStateId*
		constexpr auto ControlledActor = 0x4a8; // AActor*
	}

	namespace n_UBTDecorator_ConeCheck3D { // : UBTDecorator
		constexpr auto ConeHalfAngle = 0x68; // float
		constexpr auto ConeOrigin = 0x70; // FBlackboardKeySelector
		constexpr auto Observed = 0x98; // FBlackboardKeySelector
	}

	namespace n_UPlatformInterfaceWebResponse { // : UObject
		constexpr auto OriginalURL = 0x28; // FString
		constexpr auto ResponseCode = 0x38; // int32_t
		constexpr auto Tag = 0x3c; // int32_t
		constexpr auto StringResponse = 0x40; // FString
		constexpr auto BinaryResponse = 0x50; // TArray<char>
	}

	namespace n_UKnockbackAIAbility { // : UAthenaAIAbility
		constexpr auto ExplosionTriggerPtr = 0x78; // TWeakObjectPtr<UKnockbackAIAbilityTriggerComponent>
		constexpr auto ForceFeedbackInfo = 0x80; // FExplosionForceFeedbackInfo
		constexpr auto PawnExplosion = 0xa8; // UExplosionComponent*
	}

	namespace n_UAddItemToCollectorsChestStepDesc { // : UMutateCollectorsChestStepDesc
		constexpr auto ItemToStore = 0x90; // FQuestVariableClass
		constexpr auto TrackItem = 0xa0; // bool
		constexpr auto MarkItemAsCritical = 0xa1; // bool
		constexpr auto CriticalActorLostMessage = 0xa8; // FText
	}

	namespace n_UItemActionComponentAudioParams { // : UDataAsset
		constexpr auto ItemActionAudioPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto ActionStartEvent = 0x30; // UWwiseEvent*
		constexpr auto ActionStopEvent = 0x38; // UWwiseEvent*
		constexpr auto ActionStartEventIsLoop = 0x40; // bool
		constexpr auto ActionStartEventFadeTime = 0x44; // float
	}

	namespace n_UTemporaryEntitlementsTaleQuestService { // : UTaleQuestService
		constexpr auto ServiceDesc = 0x60; // UTemporaryEntitlementsTaleQuestServiceDesc*
		constexpr auto CachedLoadouts = 0x70; // TArray<FLoadoutCacheEntry>
	}

	namespace n_UCargoRunMapData { // : UDataAsset
		constexpr auto Companies = 0x28; // TArray<UCompany*>
		constexpr auto Layout = 0x38; // UCargoRunMapLayout*
	}

	namespace n_USetTaleProgressStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // USetTaleProgressStepDesc*
	}

	namespace n_UShipwreckNameGeneratorDefault { // : UShipwreckNameGeneratorAbstract
		constexpr auto ShipwreckNames = 0x40; // TArray<FText>
	}

	namespace n_UShipLiveryComponent { // : UActorComponent
		constexpr auto DefaultLivery = 0xc8; // UShipLiveryDescAsset*
		constexpr auto LiveryDescs = 0xd0; // TArray<FShipLivery>
	}

	namespace n_UEnvQueryGenerator_PathingGrid { // : UEnvQueryGenerator_SimpleGrid
		constexpr auto PathToItem = 0xf8; // FAIDataProviderBoolValue
		constexpr auto NavigationFilter = 0x128; // UNavigationQueryFilter*
		constexpr auto ScanRangeMultiplier = 0x130; // FAIDataProviderFloatValue
	}

	namespace n_ULandmarkReactionEventCallInterfaceStopReaction { // : ULandmarkReactionEvent
		constexpr auto RunLocation = 0x38; // EEventRunLocation
	}

	namespace n_UBurrowHealAIAbility { // : UBurrowAIAbility
		constexpr auto LocationsToSpawnCrack = 0x78; // TArray<FVector>
		constexpr auto TimerHandleStartNextSpawnWave = 0x88; // FTimerHandle
		constexpr auto CachedTarget = 0x90; // AActor*
		constexpr auto bExecuting = 0x124; // bool
		constexpr auto bProcessingSpawnLocations = 0x125; // bool
	}

	namespace n_AKrakenShipWrappingTentacle { // : AKrakenTentacle
		constexpr auto SceneRoot = 0x508; // USceneComponent*
		constexpr auto TentacleCollisions = 0x510; // UStaticMeshComponent*
		constexpr auto TentacleMesh = 0x518; // UStaticMeshComponent*
		constexpr auto DamageZone = 0x520; // UBoxComponent*
		constexpr auto InteractableBlockingRegions = 0x528; // USceneComponent*
		constexpr auto KnockbackRegions = 0x530; // USceneComponent*
		constexpr auto TentacleHeadCollisions = 0x538; // UBoxComponent*
		constexpr auto TentacleHeadKnockbackRegions = 0x540; // USceneComponent*
		constexpr auto AudioComponent = 0x548; // UKrakenShipWrappingTentacleAIAudioComponent*
		constexpr auto LowDetailTentacleMesh = 0x550; // UStaticMesh*
		constexpr auto HighDetailTentacleMeshAsset = 0x558; // FStringAssetReference
		constexpr auto Params = 0x568; // FKrakenShipWrappingTentacleParams
		constexpr auto TentacleDynamicMaterialInstance = 0x658; // UMaterialInstanceDynamic*
		constexpr auto HighDetailTentacleMesh = 0x660; // UStaticMesh*
		constexpr auto CurrentServerAnimationState = 0x668; // FKrakenShipWrappingTentacleAnimationState
		constexpr auto PendingServerAnimationState = 0x678; // FKrakenShipWrappingTentacleAnimationState
	}

	namespace n_UDmgTypeBP_Environmental_C { // : UDamageType
		constexpr auto bCausedByWorld = 0x28; // char : 1
		constexpr auto bScaleMomentumByMass = 0x28; // char : 1
		constexpr auto DamageImpulse = 0x2c; // float
		constexpr auto bRadialDamageVelChange = 0x30; // char : 1
		constexpr auto DestructibleImpulse = 0x34; // float
		constexpr auto DestructibleDamageSpreadScale = 0x38; // float
		constexpr auto DamageFalloff = 0x3c; // float
	}

	namespace n_URadialManagerInputComponent { // : UInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UEnvQueryGenerator_OnCircle { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto CircleRadius = 0x90; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0xc0; // FAIDataProviderFloatValue
		constexpr auto ArcDirection = 0xf0; // FEnvDirection
		constexpr auto ArcAngle = 0x110; // FAIDataProviderFloatValue
		constexpr auto AngleRadians = 0x140; // float
		constexpr auto CircleCenter = 0x148; // UEnvQueryContext*
		constexpr auto TraceData = 0x150; // FEnvTraceData
		constexpr auto bDefineArc = 0x190; // char : 1
	}

	namespace n_UCheckBoxWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto CheckBoxStyle = 0x30; // FCheckBoxStyle
	}

	namespace n_UResourceCache { // : UObject
		constexpr auto Cache = 0x28; // TArray<FResourceCacheEntry>
	}

	namespace n_ASuperheatedWater { // : AMurk
		constexpr auto SetupData = 0x480; // USuperheatedWaterSetupDataAsset*
		constexpr auto HitDetectionVolume = 0x488; // UCapsuleComponent*
		constexpr auto FakeUnderwaterLocationsMinDistanceInMetres = 0x490; // float
		constexpr auto FakeUnderwaterLocationsDistanceBetweenPointsInMetres = 0x494; // float
		constexpr auto PlayersInZone = 0x498; // TArray<TWeakObjectPtr<AAthenaPlayerCharacter>>
	}

	namespace n_UParticleModuleAccelerationBase { // : UParticleModule
		constexpr auto bAlwaysInWorldSpace = 0x50; // char : 1
	}

	namespace n_UBTDecorator_Cooldown { // : UBTDecorator
		constexpr auto CoolDownTime = 0x68; // float
	}

	namespace n_USceneDialoguePointWithConditional { // : UObject
		constexpr auto Point = 0x28; // USceneDialoguePoint*
		constexpr auto Conditional = 0x30; // UNPCDialogConditional*
	}

	namespace n_UDamageableMechanismTrigger { // : UMechanismTriggerComponent
		constexpr auto TriggerThreshold = 0x150; // float
		constexpr auto TriggerResetTime = 0x154; // float
		constexpr auto AutomaticResetTime = 0x158; // float
		constexpr auto OwningDamageSource = 0x160; // UDamageableComponent*
		constexpr auto CachedWorld = 0x168; // UWorld*
	}

	namespace n_UGetNextQuestInChainStepDesc { // : UTaleQuestStepDesc
		constexpr auto OutQuest = 0x80; // FQuestVarTaleQuest
		constexpr auto QuestChainFinished = 0x90; // FQuestVariableBool
	}

	namespace n_UGenerateDigLocationStepDesc { // : UTaleQuestStepDesc
		constexpr auto IslandName = 0x80; // FQuestVariableName
		constexpr auto DigLocation = 0x90; // FQuestVariableVector
	}

	namespace n_UParticleModuleCollision { // : UParticleModuleCollisionBase
		constexpr auto DampingFactor = 0x50; // FRawDistributionVector
		constexpr auto DampingFactorRotation = 0x88; // FRawDistributionVector
		constexpr auto MaxCollisions = 0xc0; // FRawDistributionFloat
		constexpr auto CollisionCompletionOption = 0xf8; // EParticleCollisionComplete
		constexpr auto CollisionTypes = 0x100; // TArray<EObjectTypeQuery>
		constexpr auto bApplyPhysics = 0x114; // char : 1
		constexpr auto ParticleMass = 0x118; // FRawDistributionFloat
		constexpr auto DirScalar = 0x150; // float
		constexpr auto bPawnsDoNotDecrementCount = 0x154; // char : 1
		constexpr auto bOnlyVerticalNormalsDecrementCount = 0x154; // char : 1
		constexpr auto VerticalFudgeFactor = 0x158; // float
		constexpr auto DelayAmount = 0x160; // FRawDistributionFloat
		constexpr auto bDropDetail = 0x198; // char : 1
		constexpr auto bCollideOnlyIfVisible = 0x198; // char : 1
		constexpr auto bIgnoreSourceActor = 0x198; // char : 1
		constexpr auto bIgnoreCollisionsWithHiddenObjects = 0x198; // char : 1
		constexpr auto MaxCollisionDistance = 0x19c; // float
	}

	namespace n_UTaleQuestSelectClueSiteForLootStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTaleQuestSelectClueSiteForLootStepDesc*
	}

	namespace n_UAbandonedNoteClueTextAsset { // : UDataAsset
		constexpr auto Descriptions = 0x28; // TArray<FText>
		constexpr auto DestinationType = 0x38; // UClueDestinationDescriptor*
	}

	namespace n_USoundBase { // : UObject
		constexpr auto SoundClassObject = 0x28; // USoundClass*
		constexpr auto bDebug = 0x30; // char : 1
		constexpr auto MaxConcurrentResolutionRule = 0x34; // EMaxConcurrentResolutionRule
		constexpr auto MaxConcurrentPlayCount = 0x38; // int32_t
		constexpr auto Duration = 0x3c; // float
		constexpr auto AttenuationSettings = 0x40; // USoundAttenuation*
	}

	namespace n_UBTDecorator_LineOfSightToTarget { // : UBTDecorator_BaseConditional
		constexpr auto Interval = 0x68; // float
		constexpr auto TargetActorKey = 0x70; // FBlackboardKeySelector
		constexpr auto UseTargetPosition = 0x98; // bool
		constexpr auto TargetPositionKey = 0xa0; // FBlackboardKeySelector
		constexpr auto OffsetToApplyToTargetPosition = 0xc8; // FVector
	}

	namespace n_ATreasureChestItemProxy { // : ABootyProxy
		constexpr auto ShovelEnterSurfaceSfx = 0x7c8; // UWwiseEvent*
		constexpr auto ExhumeStepSfx = 0x7d0; // UWwiseEvent*
		constexpr auto FullyDugUpSfx = 0x7d8; // UWwiseEvent*
		constexpr auto ChestAmbiencePool = 0x7e0; // UWwiseObjectPoolWrapper*
		constexpr auto ChestAmbiencePlay = 0x7e8; // UWwiseEvent*
		constexpr auto ChestAmbienceStop = 0x7f0; // UWwiseEvent*
		constexpr auto DitherComponent = 0x7f8; // UDitherComponent*
		constexpr auto CloseProximityEncounterParams = 0x800; // FEncounterParams
		constexpr auto CachedAudioConfig = 0x810; // UItemDiggingAudioConfig*
	}

	namespace n_UStartSuppressingCutsceneResponsesStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UCoherentUIGTJSPayload { // : UObject
		constexpr auto EventName = 0x28; // FString
	}

	namespace n_UParticleModuleRotationRateMultiplyLife { // : UParticleModuleRotationRateBase
		constexpr auto LifeMultiplier = 0x50; // FRawDistributionFloat
	}

	namespace n_UFloatingMessageInABottleSeaClueCreator { // : USeaClueCreator
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMin = 0x30; // int32_t
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMax = 0x34; // int32_t
	}

	namespace n_UQueryLiveStreamsCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnQueriedLiveStreams = 0x28; // FScriptMulticastDelegate
	}

	namespace n_UKrakenAnimatedTentacleStateAnimationsDataAsset { // : UDataAsset
		constexpr auto MappingAssetReference = 0x28; // UKrakenAnimatedTentacleAnimationMappingDataAsset*
		constexpr auto States = 0x48; // TArray<FKrakenAnimatedTentacleStateAnimationMapping>
	}

	namespace n_UAthenaCharacterMovementSettings { // : UObject
		constexpr auto StandardError = 0x28; // FNetPositionErrorTolerance
		constexpr auto SwimmingError = 0x30; // FNetPositionErrorTolerance
		constexpr auto SwimmingClientTrustThreshold = 0x38; // float
		constexpr auto MaxSwimmingTimeStep = 0x3c; // float
		constexpr auto MaxSwimmingIterations = 0x40; // int32_t
		constexpr auto RebaseToServerErrorSqrDist = 0x44; // float
		constexpr auto OnlyInterpolationAfterSqrDist = 0x48; // float
		constexpr auto NoVisualUpdateAfterSqrDist = 0x4c; // float
		constexpr auto TimeBetweenPlayerDistanceChecks = 0x50; // float
		constexpr auto TimeToSimulateNewCharacters = 0x54; // float
	}

	namespace n_ALevelScriptActor { // : AActor
		constexpr auto bInputEnabled = 0x3d0; // char : 1
	}

	namespace n_UBurrowAIAbility { // : UAthenaAIAbility
		constexpr auto LocationsToSpawnCrack = 0x78; // TArray<FVector>
		constexpr auto TimerHandleStartNextSpawnWave = 0x88; // FTimerHandle
		constexpr auto CachedTarget = 0x90; // AActor*
		constexpr auto bExecuting = 0x124; // bool
		constexpr auto bProcessingSpawnLocations = 0x125; // bool
	}

	namespace n_ATradeRoute { // : AActor
		constexpr auto TradeRouteAssetReference = 0x3d0; // FStringAssetReference
	}

	namespace n_UStatusRecipientResponseList { // : UDataAsset
		constexpr auto ResponseAssets = 0x28; // TArray<UStatusResponseAsset*>
		constexpr auto FeatureToggledResponseLists = 0x38; // TArray<FFeatureToggledStatusResponseList>
		constexpr auto FinalResponseAssets = 0x48; // TArray<UStatusResponseAsset*>
	}

	namespace n_UGameplayAbility { // : UObject
		constexpr auto AbilityTags = 0x68; // FGameplayTagContainer
		constexpr auto bReplicateInputDirectly = 0xa8; // bool
		constexpr auto ReplicationPolicy = 0xd0; // EGameplayAbilityReplicationPolicy
		constexpr auto InstancingPolicy = 0xd1; // EGameplayAbilityInstancingPolicy
		constexpr auto bServerRespectsRemoteAbilityCancellation = 0xd2; // bool
		constexpr auto bRetriggerInstancedAbility = 0xd3; // bool
		constexpr auto CurrentActivationInfo = 0xd8; // FGameplayAbilityActivationInfo
		constexpr auto CurrentEventData = 0xf8; // FGameplayEventData
		constexpr auto NetExecutionPolicy = 0x198; // EGameplayAbilityNetExecutionPolicy
		constexpr auto CostGameplayEffectClass = 0x1a0; // UGameplayEffect*
		constexpr auto CostGameplayEffect = 0x1a8; // UGameplayEffect*
		constexpr auto AbilityTriggers = 0x1b0; // TArray<FAbilityTriggerData>
		constexpr auto CooldownGameplayEffectClass = 0x1c0; // UGameplayEffect*
		constexpr auto CooldownGameplayEffect = 0x1c8; // UGameplayEffect*
		constexpr auto CancelAbilitiesMatchingTagQuery = 0x1d0; // FGameplayTagQuery
		constexpr auto ConstTagQuery = 0x218; // FGameplayTagQuery
		constexpr auto CancelAbilitiesWithTag = 0x260; // FGameplayTagContainer
		constexpr auto BlockAbilitiesWithTag = 0x288; // FGameplayTagContainer
		constexpr auto ActivationOwnedTags = 0x2b0; // FGameplayTagContainer
		constexpr auto ActivationRequiredTags = 0x2d8; // FGameplayTagContainer
		constexpr auto ActivationBlockedTags = 0x300; // FGameplayTagContainer
		constexpr auto SourceRequiredTags = 0x328; // FGameplayTagContainer
		constexpr auto SourceBlockedTags = 0x350; // FGameplayTagContainer
		constexpr auto TargetRequiredTags = 0x378; // FGameplayTagContainer
		constexpr auto TargetBlockedTags = 0x3a0; // FGameplayTagContainer
		constexpr auto CurrentMontage = 0x438; // UAnimMontage*
		constexpr auto bIsActive = 0x440; // bool
		constexpr auto bIsCancelable = 0x441; // bool
		constexpr auto bIsBlockingOtherAbilities = 0x442; // bool
	}

	namespace n_UParticleModuleLocationWorldOffset { // : UParticleModuleLocation
		constexpr auto StartLocation = 0x50; // FRawDistributionVector
		constexpr auto AdditionalStartLocations = 0x88; // FRawDistributionVector [0x4]
		constexpr auto StartLocationUseGroupAForAll = 0x168; // char : 1
		constexpr auto DistributeOverNPoints = 0x16c; // float
		constexpr auto DistributeThreshold = 0x170; // float
	}

	namespace n_UParticleModuleSizeMultiplyLife { // : UParticleModuleSizeBase
		constexpr auto LifeMultiplier = 0x50; // FRawDistributionVector
		constexpr auto MultiplyX = 0x88; // char : 1
		constexpr auto MultiplyY = 0x88; // char : 1
		constexpr auto MultiplyZ = 0x88; // char : 1
	}

	namespace n_UEmissaryMaxRankQuestProvider { // : UActorComponent
		constexpr auto MaxRankQuestNotificationID = 0xc8; // UNotificationInputId*
		constexpr auto MaxRankQuestToolTipPriority = 0xd0; // EActionDisplayPriority
		constexpr auto StartMaxRankQuestToolTipText = 0xd8; // FText
		constexpr auto CannotStartMaxRankQuestToolTipText = 0x110; // FText
		constexpr auto QuestDesc = 0x148; // FStringAssetReference
		constexpr auto Company = 0x158; // UCompany*
	}

	namespace n_USelectRewardStepDesc { // : UTaleQuestStepDesc
		constexpr auto ItemSpawnDatas = 0x80; // FQuestVariableItemSpawnDataTypeArray
		constexpr auto QuestItemSpawnData = 0x90; // FQuestVariableItemSpawnDataType
		constexpr auto NumberOfItemsToSpawn = 0xa0; // int32_t
		constexpr auto SelectChestsOnly = 0xa4; // bool
	}

	namespace n_AAshenWindsSkullItemProxy { // : ABountyRewardItemProxy
		constexpr auto FlamethrowerChargeParticleSystemComponent = 0x7f8; // UParticleSystemComponent*
		constexpr auto FlamethrowerChargeVisuals = 0x800; // UFlamethrowerChargeVisuals*
	}

	namespace n_UTaleQuestSetCompassTargetToPointStepDesc { // : UTaleQuestSetCompassTargetBaseStepDesc
		constexpr auto TargetPoint = 0x88; // FQuestVariableOrientedPoint
	}

	namespace n_UParticleModuleMeshRotationRateOverLife { // : UParticleModuleRotationRateBase
		constexpr auto RotRate = 0x50; // FRawDistributionVector
		constexpr auto bScaleRotRate = 0x88; // char : 1
	}

	namespace n_USpawnPhasedActorWithTransformStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UInterpTrackInstLinearColorProp { // : UInterpTrackInstProperty
		constexpr auto ResetColor = 0x40; // FLinearColor
	}

	namespace n_UInterpTrackInstColorProp { // : UInterpTrackInstProperty
		constexpr auto ResetColor = 0x40; // FColor
	}

	namespace n_UParticleModuleLocationBoneSocket { // : UParticleModuleLocationBase
		constexpr auto SourceType = 0x50; // ELocationBoneSocketSource
		constexpr auto UniversalOffset = 0x54; // FVector
		constexpr auto SourceLocations = 0x60; // TArray<FLocationBoneSocketInfo>
		constexpr auto SelectionMethod = 0x70; // ELocationBoneSocketSelectionMethod
		constexpr auto bUpdatePositionEachFrame = 0x74; // char : 1
		constexpr auto bOrientMeshEmitters = 0x74; // char : 1
		constexpr auto bInheritBoneVelocity = 0x74; // char : 1
		constexpr auto InheritVelocityScale = 0x78; // FVector
		constexpr auto InheritedSpeedCap = 0x84; // float
		constexpr auto SkelMeshActorParamName = 0x88; // FName
	}

	namespace n_UParticleModuleVelocity_Seeded { // : UParticleModuleVelocity
		constexpr auto RandomSeedInfo = 0x1e8; // FParticleRandomSeedInfo
	}

	namespace n_UAICombatDialogue { // : UObject
		constexpr auto DialogueCoordinator = 0x28; // ASceneDialogueCoordinator*
		constexpr auto DialogueData = 0x30; // USceneDialogueData*
		constexpr auto NumAISlots = 0x38; // int32_t
		constexpr auto ChatMaxDistance = 0x3c; // float
		constexpr auto RemoveAIDelay = 0x40; // float
		constexpr auto EndDelay = 0x44; // float
		constexpr auto StateProvider = 0x48; // USimpleDialogueStateProvider*
	}

	namespace n_UTwitterIntegrationBase { // : UPlatformInterfaceBase
		constexpr auto AllDelegates = 0x28; // TArray<FDelegateArray>
	}

	namespace n_UCrowdManager { // : UObject
		constexpr auto MyNavData = 0x28; // ANavigationData*
		constexpr auto AvoidanceConfig = 0x30; // TArray<FCrowdAvoidanceConfig>
		constexpr auto SamplingPatterns = 0x40; // TArray<FCrowdAvoidanceSamplingPattern>
		constexpr auto MaxAgents = 0x50; // int32_t
		constexpr auto MaxAgentRadius = 0x54; // float
		constexpr auto MaxAvoidedAgents = 0x58; // int32_t
		constexpr auto MaxAvoidedWalls = 0x5c; // int32_t
		constexpr auto NavmeshCheckInterval = 0x60; // float
		constexpr auto PathOptimizationInterval = 0x64; // float
		constexpr auto bResolveCollisions = 0x68; // char : 1
	}

	namespace n_UBTDecorator_CompareBlackboardActorSpeed { // : UBTDecorator_CompareFloatValueBase
		constexpr auto BlackboardKey = 0xb8; // FBlackboardKeySelector
	}

	namespace n_UBTService_UpdateTargetForInteractable { // : UBTService
		constexpr auto Interactable = 0x70; // FBlackboardKeySelector
		constexpr auto TargetForInteractable = 0x98; // FBlackboardKeySelector
	}

	namespace n_ABucket { // : ASkeletalMeshWieldableItem
		constexpr auto InventoryItem = 0x798; // UInventoryItemComponent*
		constexpr auto BucketContentsInfos = 0x7a0; // TArray<FBucketContentsInfo>
		constexpr auto ScoopSfx = 0x7b0; // UWwiseEvent*
		constexpr auto ThrowSocketName = 0x7b8; // FName
		constexpr auto DrenchWielderSocketName = 0x7c0; // FName
		constexpr auto ScoopActionTime = 0x7c8; // float
		constexpr auto ScoopCompleteTime = 0x7cc; // float
		constexpr auto ThrowActionTime = 0x7d0; // float
		constexpr auto ThrowCompleteTime = 0x7d4; // float
		constexpr auto DrenchWielderActionTime = 0x7d8; // float
		constexpr auto DrenchWielderCompleteTime = 0x7dc; // float
		constexpr auto RequestToleranceTimeOnServer = 0x7e0; // float
		constexpr auto ProjectileSpeed = 0x7e4; // float
		constexpr auto ProjectileAdditionalLiftAngle = 0x7e8; // float
		constexpr auto WaterFillFromShip = 0x7ec; // float
		constexpr auto WaterFillFromSea = 0x7f0; // float
		constexpr auto WaterTransferFillAmountModifier = 0x7f4; // float
		constexpr auto ScoopBufferDistance = 0x7f8; // float
		constexpr auto ScoopHitTestTraceChannel = 0x7fc; // ECollisionChannel
		constexpr auto BucketScoopCooldownType = 0x800; // UWieldableItemCooldownBaseType*
		constexpr auto BucketThrowCooldownType = 0x808; // UWieldableItemCooldownBaseType*
		constexpr auto BucketDouseCooldownType = 0x810; // UWieldableItemCooldownBaseType*
		constexpr auto ThrowLiquidAINoiseRange = 0x818; // float
		constexpr auto NamedNotificationInputComponent = 0x820; // UNamedNotificationInputComponent*
		constexpr auto LiquidContainer = 0x828; // ULiquidContainerComponent*
		constexpr auto Contents = 0x830; // FLiquidContents
		constexpr auto FillState = 0x871; // EThrowableLiquidType
		constexpr auto BucketContentsEffect = 0x8e8; // UParticleSystemComponent*
	}

	namespace n_AAthenaPlayerCameraManager { // : APlayerCameraManager
		constexpr auto PCOwner = 0x3d0; // APlayerController*
		constexpr auto TransformComponent = 0x3d8; // USceneComponent*
		constexpr auto DefaultFOV = 0x3e8; // float
		constexpr auto DefaultOrthoWidth = 0x3f0; // float
		constexpr auto DefaultAspectRatio = 0x3f8; // float
		constexpr auto CameraCache = 0x440; // FCameraCacheEntry
		constexpr auto LastFrameCameraCache = 0x9f0; // FCameraCacheEntry
		constexpr auto ViewTarget = 0xfa0; // FTViewTarget
		constexpr auto PendingViewTarget = 0x1560; // FTViewTarget
		constexpr auto ModifierList = 0x1b38; // TArray<UCameraModifier*>
		constexpr auto DefaultModifiers = 0x1b48; // TArray<UCameraModifier*>
		constexpr auto FreeCamDistance = 0x1b58; // float
		constexpr auto FreeCamOffset = 0x1b5c; // FVector
		constexpr auto ViewTargetOffset = 0x1b68; // FVector
		constexpr auto CameraLensEffects = 0x1b88; // TArray<AEmitterCameraLensEffectBase*>
		constexpr auto CachedCameraShakeMod = 0x1b98; // UCameraModifier_CameraShake*
		constexpr auto AnimInstPool = 0x1ba0; // UCameraAnimInst* [0x8]
		constexpr auto PostProcessBlendCache = 0x1be0; // TArray<FPostProcessSettings>
		constexpr auto ActiveAnims = 0x1c00; // TArray<UCameraAnimInst*>
		constexpr auto FreeAnims = 0x1c10; // TArray<UCameraAnimInst*>
		constexpr auto AnimCameraActor = 0x1c20; // ACameraActor*
		constexpr auto bIsOrthographic = 0x1c28; // char : 1
		constexpr auto bUseClientSideCameraUpdates = 0x1c28; // char : 1
		constexpr auto bFollowHmdOrientation = 0x1c29; // char : 1
		constexpr auto ViewPitchMin = 0x1c2c; // float
		constexpr auto ViewPitchMax = 0x1c30; // float
		constexpr auto ViewYawMin = 0x1c34; // float
		constexpr auto ViewYawMax = 0x1c38; // float
		constexpr auto ViewRollMin = 0x1c3c; // float
		constexpr auto ViewRollMax = 0x1c40; // float
	}

	namespace n_UTouchInterface { // : UObject
		constexpr auto Controls = 0x28; // TArray<FTouchInputControl>
		constexpr auto ActiveOpacity = 0x38; // float
		constexpr auto InactiveOpacity = 0x3c; // float
		constexpr auto TimeUntilDeactive = 0x40; // float
		constexpr auto TimeUntilReset = 0x44; // float
		constexpr auto ActivationDelay = 0x48; // float
		constexpr auto bPreventRecenter = 0x4c; // bool
		constexpr auto StartupDelay = 0x50; // float
	}

	namespace n_USeatComponent { // : USeatComponentBase
		constexpr auto SittingStateParams = 0x250; // FSittingActionStateParams
		constexpr auto OnSitStats = 0x2f0; // TArray<FPlayerStat>
		constexpr auto CosCameraAngleToTurnOffFirstPersonMesh = 0x300; // float
	}

	namespace n_UShipNosediveBrake { // : UDataAsset
		constexpr auto SubmersionVsBrakeFactorCurve = 0x28; // UCurveFloat*
		constexpr auto BrakeForceScalar = 0x30; // float
		constexpr auto LocalProbePos = 0x34; // FVector
		constexpr auto ProbeHeight = 0x40; // float
	}

	namespace n_UFogBankManagerDataAsset { // : UDataAsset
		constexpr auto FogBankTemplates = 0x28; // TArray<FFogBankManagerFogBankTemplate>
		constexpr auto TimeBetweenFogBanks = 0x38; // FWeightedProbabilityRangeOfRanges
		constexpr auto CheckForNearbyStormsInterval = 0x68; // float
		constexpr auto FailureRetryTime = 0x6c; // float
		constexpr auto MinIslandDistanceFromStormToSpawnInKm = 0x70; // float
		constexpr auto DistanceFromStormToEmergencyFadeOutInKm = 0x74; // float
		constexpr auto InvalidIslandTypes = 0x78; // TArray<EIslandType>
		constexpr auto InvalidIslandNames = 0x88; // TArray<FName>
		constexpr auto IslandTypesToKeepAwayFrom = 0x98; // TArray<FFogBankManagerIslandTypesToKeepAwayFrom>
		constexpr auto IslandNamesToKeepAwayFrom = 0xa8; // TArray<FFogBankManagerIslandNamesToKeepAwayFrom>
		constexpr auto IslandTypesThatCannotSupportStormsAndFog = 0xb8; // TArray<EIslandType>
	}

	namespace n_UActorSequence { // : UMovieSceneSequence
		constexpr auto MovieScene = 0x2a8; // UMovieScene*
		constexpr auto ObjectReferences = 0x2b0; // FActorSequenceObjectReferenceMap
	}

	namespace n_ABaseContinuousAnimatedMechanismAction { // : AActor
		constexpr auto Root = 0x3e0; // USceneComponent*
		constexpr auto Pivot = 0x3e8; // USceneComponent*
		constexpr auto Animation = 0x3f0; // FTransformBlendCurve
		constexpr auto EnableCameraLookAt = 0x8f0; // bool
		constexpr auto MechanismLookAtLocationRelativeToActor = 0x8f4; // FVector
		constexpr auto EmitterPool = 0x900; // UWwiseObjectPoolWrapper*
		constexpr auto MechanismMovementProgressRateOfChangeRTPCName = 0x908; // FName
		constexpr auto MechanismStartedMovingAudioEvent = 0x910; // UWwiseEvent*
		constexpr auto MechanismStoppedMovingAudioEvent = 0x918; // UWwiseEvent*
		constexpr auto MechanismStoppedInProgressAudioEvent = 0x920; // UWwiseEvent*
		constexpr auto MechanismReachedMinimumAudioEvent = 0x928; // UWwiseEvent*
		constexpr auto MechanismReachedMaximumAudioEvent = 0x930; // UWwiseEvent*
		constexpr auto TransformAudioEmitterWithPivot = 0x938; // bool
		constexpr auto ParticleSystemsInheritActorScale = 0x939; // bool
		constexpr auto MechanismMovingParticleSystem = 0x940; // UParticleSystem*
		constexpr auto MechanismMovingParticleSystemLocation = 0x948; // FVector
		constexpr auto MechanismMovingParticleSystemRotation = 0x954; // FRotator
		constexpr auto MechanismReachedMinimumParticleSystem = 0x960; // UParticleSystem*
		constexpr auto MechanismReachedMinimumParticleSystemLocation = 0x968; // FVector
		constexpr auto MechanismReachedMinimumParticleSystemRotation = 0x974; // FRotator
		constexpr auto MechanismReachedMaximumParticleSystem = 0x980; // UParticleSystem*
		constexpr auto MechanismReachedMaximumParticleSystemLocation = 0x988; // FVector
		constexpr auto MechanismReachedMaximumParticleSystemRotation = 0x994; // FRotator
		constexpr auto CompletionThreshold = 0x9a0; // float
		constexpr auto CachedMechanismMovingParticleSystem = 0x9a8; // UParticleSystemComponent*
	}

	namespace n_AAthenaContestTavern { // : AActor
		constexpr auto TavernSpawnPoints = 0x3d0; // TArray<ASpawnLocation*>
		constexpr auto TavernLevelActorsToPrepare = 0x3e0; // TArray<AActor*>
	}

	namespace n_URewardGenTaleQuestService { // : UTaleQuestService
		constexpr auto SpawnData = 0x60; // UTaleQuestWeightedItemDescSpawnDataAsset*
		constexpr auto ValidSpawnData = 0x68; // TArray<int32_t>
		constexpr auto ItemsToSpawn = 0x78; // TArray<UItemSpawnData*>
	}

	namespace n_UOpenableItemMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UMysteriousNotesRadialContentRule { // : URadialContentRule
		constexpr auto RadialIconScale = 0x78; // float
		constexpr auto RadialIconOffset = 0x7c; // FVector2D
		constexpr auto MappedNoteIDs = 0xd8; // TArray<FGuid>
	}

	namespace n_ULinkEQSContextWithVariableStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // ULinkEQSContextWithVariableStepDesc*
	}

	namespace n_UItemBuriedHistoryMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UGameplayAbility_Montage { // : UGameplayAbility
		constexpr auto MontageToPlay = 0x448; // UAnimMontage*
		constexpr auto PlayRate = 0x450; // float
		constexpr auto SectionName = 0x454; // FName
		constexpr auto GameplayEffectClassesWhileAnimating = 0x460; // TArray<UGameplayEffect*>
		constexpr auto GameplayEffectsWhileAnimating = 0x470; // TArray<UGameplayEffect*>
	}

	namespace n_AGenericPartWithVFX { // : AGenericPart
		constexpr auto CustomizationComponent = 0x3d0; // UReplicatedShipPartCustomizationComponent*
	}

	namespace n_USirenTridentShotActionComponent { // : ULaunchableShotActionComponent
		constexpr auto MaxAcceptableChargeTimeStampDelta = 0x43c; // float
		constexpr auto ProjectileParameters = 0x440; // TArray<USirenTridentProjectileParams*>
		constexpr auto CurrentProjectileParameters = 0x450; // USirenTridentProjectileParams*
		constexpr auto ActionSizeChangeForceFeedbackTag = 0x458; // FName
		constexpr auto CurrentShotState = 0x460; // ESirenTridentProjectileState
		constexpr auto TridentProjectile = 0x468; // ASirenTridentProjectile*
		constexpr auto SirenShotActionAudio = 0x470; // USirenTridentShotComponentAudioParams*
	}

	namespace n_UCampaignPopUpNotificationDataAsset { // : UDataAsset
		constexpr auto FeatureToggle = 0x28; // FName
		constexpr auto CampaignPopUpNotifications = 0x30; // TArray<FCampaignPopUpNotificationInfo>
	}

	namespace n_UKrakenHeadHealthParamsDataAsset { // : UDataAsset
		constexpr auto KrakenHeadHealthPairs = 0x28; // TArray<FKrakenHeadHealthPair>
	}

	namespace n_AMatineeActorCameraAnim { // : AMatineeActor
		constexpr auto CameraAnim = 0x448; // UCameraAnim*
	}

	namespace n_ACutsceneTriggerVolume { // : AVolume
		constexpr auto CutsceneName = 0x408; // FName
		constexpr auto SingleUse = 0x410; // bool
	}

	namespace n_URewindDataVisualisationComponent { // : UActorComponent
		constexpr auto RewindEntry = 0xd0; // FRewindPhysicsServiceEntry
	}

	namespace n_UAthenaAudioConfig { // : UDataAsset
		constexpr auto ItemProxyPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto AnimNotifyPool = 0x30; // UWwiseObjectPoolWrapper*
	}

	namespace n_UCompanyData { // : UDataAsset
		constexpr auto Company = 0x28; // UCompany*
		constexpr auto ShouldHaveLevels = 0x30; // bool
		constexpr auto ShouldHaveEmblems = 0x31; // bool
		constexpr auto ShouldHaveVoyages = 0x32; // bool
		constexpr auto ShouldBeOnCompanySummaryScreen = 0x33; // bool
		constexpr auto ShouldBeHiddenWhenNothingUnlocked = 0x34; // bool
		constexpr auto ShouldBeHiddenWhenNothingUnlockedWhenToggleEnabled = 0x38; // FName
		constexpr auto Skin = 0x40; // FCompanySkin
		constexpr auto ShopSkin = 0xf8; // FCompanyShopSkin
		constexpr auto ShopInfo = 0x118; // FCompanyShopInfo
		constexpr auto ProgressIcons = 0x178; // FCompanyProgressIcons
		constexpr auto RankData = 0x190; // FCompanyRankData
		constexpr auto Motto = 0x1a0; // FText
		constexpr auto CompanyFlavourText1 = 0x1d8; // FText
		constexpr auto CompanyFlavourText2 = 0x210; // FText
		constexpr auto TotalNumberOfTitles = 0x248; // uint32_t
		constexpr auto TotalNumberOfItems = 0x24c; // uint32_t
		constexpr auto MaxVoyagesOffered = 0x250; // uint32_t
		constexpr auto MapsDiscoveredBackgroundImage = 0x258; // FStringAssetReference
		constexpr auto MapsDiscoveredImages = 0x268; // TArray<FStringAssetReference>
		constexpr auto VoyageAudioSwitchName = 0x278; // FString
		constexpr auto VoyageAudioSwitchValue = 0x288; // FString
		constexpr auto BootyBought = 0x298; // TArray<EBootyTypes>
	}

	namespace n_UFeatureToggledStringAssetReference { // : UDataAsset
		constexpr auto Entries = 0x28; // TArray<FFeatureToggledStringAssetReferenceEntry>
		constexpr auto ClassType = 0x38; // UObject*
	}

	namespace n_UBuryHoardOfItemsStatTriggerType { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_APlayerBuriedItemsMapBundleItemInfo { // : ANonStorableItemInfo
		constexpr auto CanBeStoredInInventory = 0x3f0; // bool
		constexpr auto OnItemPickedUpDelegate = 0x3f8; // FScriptMulticastDelegate
		constexpr auto OnItemDroppedDeletage = 0x408; // FScriptMulticastDelegate
		constexpr auto WieldableType = 0x418; // AWieldableItem*
		constexpr auto ProxyType = 0x420; // AActor*
		constexpr auto WieldableItemPersistenceCooldownComponent = 0x428; // UWieldableItemPersistentCooldownComponent*
		constexpr auto Desc = 0x430; // UItemDesc*
		constexpr auto CurrentRepresentation = 0x438; // EItemRepresentation
		constexpr auto CurrentRepresentationInstance = 0x440; // AActor*
		constexpr auto CurrentOwner = 0x448; // AActor*
		constexpr auto TutorialOwner = 0x450; // AActor*
		constexpr auto DoNotConsiderForMigrationGather = 0x4f9; // bool
	}

	namespace n_UShipRolloverCorrector { // : UDataAsset
		constexpr auto TimeRolledOverVSCorrectiveTorque = 0x28; // UCurveFloat*
		constexpr auto RollThresholdToConsiderRolledOver = 0x30; // float
		constexpr auto HullSubmersedThreshold = 0x34; // float
	}

	namespace n_UDiggingAnimationDataAsset { // : UDataAsset
		constexpr auto AnimationOverrides = 0x28; // TArray<FItemDiggingAnimationOverride>
		constexpr auto Default = 0x38; // UItemDiggingAnimationConfig*
	}

	namespace n_UMapTextureRenderResource { // : UMapRenderResource
		constexpr auto Texture = 0x28; // FStringAssetReference
	}

	namespace n_AAITargetService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_AWieldablePet { // : ASkeletalMeshWieldableItem
		constexpr auto ThirdPersonScalingModifier = 0x7c0; // float
		constexpr auto WieldablePetComponent = 0x7c8; // UWieldablePetComponent*
		constexpr auto AIPartsRetrievalComponent = 0x7d0; // UAIPartsRetrievalComponent*
		constexpr auto PetPartCustomisationComponent = 0x7d8; // UPetPartCustomisationComponent*
		constexpr auto AnimNotifyWwiseEmitterComponent = 0x7e0; // UAnimNotifyWwiseEmitterComponent*
		constexpr auto WaterExposureComponent = 0x7e8; // UWaterExposureComponent*
		constexpr auto UsableWieldableComponent = 0x7f0; // UUsableWieldableComponent*
		constexpr auto PickupableComponent = 0x7f8; // UPickupableComponent*
		constexpr auto WieldableInteractableComponent = 0x800; // UWieldableInteractableComponent*
		constexpr auto CleanlinessComponent = 0x808; // UCleanlinessComponent*
		constexpr auto LightWeightStatusEffectManagerComponent = 0x810; // ULightWeightStatusEffectManagerComponent*
		constexpr auto PetDitherComponent = 0x818; // UPetDitherComponent*
		constexpr auto PetOwner = 0x820; // AActor*
		constexpr auto FeedingComponent = 0x828; // UFeedingComponent*
		constexpr auto SicknessComponent = 0x830; // UPetSicknessComponent*
		constexpr auto HungerComponent = 0x838; // UWieldablePetHungerComponent*
		constexpr auto StarvingComponent = 0x840; // UStarvingComponent*
		constexpr auto TelemetryComponent = 0x848; // UPetTelemetryComponent*
		constexpr auto AnimationDataStoreComponent = 0x850; // UAnimationDataStoreComponent*
		constexpr auto SubmergedStrokingEnabled = 0x858; // bool
		constexpr auto HungerReactAnimationState = 0x8c8; // EAthenaAnimationPetHeldReactionState
		constexpr auto DropRequest = 0x8c9; // EWieldablePetDropRequestReason
	}

	namespace n_UEnvQueryTest_Pathfinding { // : UEnvQueryTest
		constexpr auto TestMode = 0x170; // EEnvTestPathfinding
		constexpr auto Context = 0x178; // UEnvQueryContext*
		constexpr auto PathFromContext = 0x180; // FAIDataProviderBoolValue
		constexpr auto SkipUnreachable = 0x1b0; // FAIDataProviderBoolValue
		constexpr auto MaxNumPathSegments = 0x1e0; // FAIDataProviderIntValue
		constexpr auto PassThroughUnreachable = 0x210; // FAIDataProviderBoolValue
		constexpr auto FilterClass = 0x240; // UNavigationQueryFilter*
	}

	namespace n_AInterpolatingItem { // : AActor
		constexpr auto FirstPersonMesh = 0x3d0; // UStaticMeshMemoryConstraintComponent*
		constexpr auto ThirdPersonMesh = 0x3d8; // UStaticMeshMemoryConstraintComponent*
		constexpr auto FromParent1P = 0x3e0; // USceneComponent*
		constexpr auto FromParent3P = 0x3f0; // USceneComponent*
		constexpr auto ToParent = 0x460; // USceneComponent*
	}

	namespace n_AAsymmetricClientObject { // : AActor
		constexpr auto BaseComponent = 0x3e8; // UBoxComponent*
		constexpr auto ThirdPersonMesh = 0x3f0; // UStaticMeshMemoryConstraintComponent*
		constexpr auto WaterInteractionComponent = 0x3f8; // UWaterInteractionComponent*
		constexpr auto BuoyancyComponent = 0x400; // UBuoyancyComponent*
		constexpr auto SpawnDependentTrackedOwnerComponent = 0x408; // USpawnDependentTrackedOwnerComponent*
		constexpr auto RotationWhenPlacingWorldProxy = 0x410; // FRotator
		constexpr auto ZOffsetWhenPlacingWorldProxy = 0x41c; // float
	}

	namespace n_UNPCOnSurfaceStatesDataAsset { // : UDataAsset
		constexpr auto StartState = 0x28; // FName
		constexpr auto HidingState = 0x30; // FName
		constexpr auto States = 0x38; // TArray<FNPCOnSurfaceStateInfo>
	}

	namespace n_UTransientActorService { // : UObject
		constexpr auto World = 0x30; // UWorld*
		constexpr auto TransientActorDestroyedCallbacks = 0x50; // TArray<DelegateProperty>
		constexpr auto Entries = 0x78; // TArray<FTransientActorEntry>
	}

	namespace n_UServerMigrationSerialisationDetailsTestsUStructProperty { // : UObject
		constexpr auto SubStructWithMigrationMarkup = 0x28; // FServerMigrationSerialisationDetailsTestsUStruct
	}

	namespace n_UAISense_Team { // : UAISense
		constexpr auto RegisteredEvents = 0x88; // TArray<FAITeamStimulusEvent>
	}

	namespace n_AWieldableMockActor { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x7b0; // UInventoryItemComponent*
	}

	namespace n_UWidgetBlueprintGeneratedClass { // : UBlueprintGeneratedClass
		constexpr auto WidgetTree = 0x228; // UWidgetTree*
		constexpr auto Bindings = 0x230; // TArray<FDelegateRuntimeBinding>
		constexpr auto Animations = 0x240; // TArray<UWidgetAnimation*>
		constexpr auto NamedSlots = 0x250; // TArray<FName>
	}

	namespace n_UParticleModuleSubUVBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UParticleModuleOrientationAxisLock { // : UParticleModuleOrientationBase
		constexpr auto LockAxisFlags = 0x50; // EParticleAxisLock
	}

	namespace n_UGenericWorldMapMarker { // : UActorComponent
		constexpr auto Marker = 0xd0; // FCanvasWorldMapGeneric
		constexpr auto RegisterOnSpawn = 0xf0; // bool
	}

	namespace n_USunkenCurseArtefactAudioComponent { // : UActorComponent
		constexpr auto UseParentEmitter = 0xc8; // bool
		constexpr auto AudioPool = 0xd0; // UWwiseObjectPoolWrapper*
		constexpr auto PlaySongEvent = 0xd8; // UWwiseEvent*
		constexpr auto StopSongEvent = 0xe0; // UWwiseEvent*
		constexpr auto PlayDamagedEvent = 0xe8; // UWwiseEvent*
		constexpr auto PlayDefeatedEvent = 0xf0; // UWwiseEvent*
	}

	namespace n_UCoherentUIGTRenderToTextureLiveView { // : UCoherentUIGTLiveView
		constexpr auto LinkName = 0xc8; // FString
		constexpr auto Texture = 0xd8; // UTextureRenderTarget2D*
	}

	namespace n_UGlobalVoyageDirectorService { // : UObject
		constexpr auto World = 0x30; // UWorld*
		constexpr auto Participants = 0x38; // TArray<UCrewVoyageParticipant*>
		constexpr auto Settings = 0x48; // UGlobalVoyageDirectorServiceSettings*
		constexpr auto WorldSettings = 0x50; // AAthenaWorldSettings*
	}

	namespace n_UCallObjectFunctionStepDesc { // : UTaleQuestStepDesc
		constexpr auto Target = 0x80; // UObject*
		constexpr auto Function = 0x88; // FClassFunctionSelectionType
		constexpr auto ParameterMappings = 0x98; // TMap<FName, FName>
	}

	namespace n_UFindNamedPointAsVectorStepDesc { // : UFindNamedPointStepDescBase
		constexpr auto OutputVectorLocation = 0xd0; // FQuestVariableVector
	}

	namespace n_UBP_BuriedItemDecal_C { // : UBuriedItemDecal
		constexpr auto FadeTimeParameterName = 0x2e0; // FName
		constexpr auto FadeDistanceStartParameterName = 0x2e8; // FName
		constexpr auto FadeDistanceStart = 0x2f0; // float
		constexpr auto FadeDistanceEndParameterName = 0x2f4; // FName
		constexpr auto FadeDistanceEnd = 0x2fc; // float
		constexpr auto Material = 0x300; // UMaterialInstanceDynamic*
	}

	namespace n_AStaticMerchantCrateItemProxy { // : ABaseMerchantCrateItemProxy
		constexpr auto RewindComponent = 0x7b8; // URewindComponent*
		constexpr auto MountpointInterface = 0x7c0; // TScriptInterface<Class>
		constexpr auto FullGroundImpactSfx = 0x7d0; // UWwiseEvent*
	}

	namespace n_UNotificationMessagesDataAsset { // : UDataAsset
		constexpr auto NotificationMessages = 0x28; // TArray<FText>
	}

	namespace n_UVotableWithSessionComponent { // : UVotableBaseComponent
		constexpr auto VoteTooltipText = 0xc8; // FText
		constexpr auto CantVoteTooltipText = 0x100; // FText
		constexpr auto CancelExistingPrimaryTooltipText = 0x138; // FText
		constexpr auto CancelExistingPrimaryVoyages = 0x170; // bool
		constexpr auto VoteActionInputId = 0x178; // UNotificationInputId*
		constexpr auto VoteActionReleaseInputId = 0x180; // UNotificationInputId*
	}

	namespace n_UEelSlapAIAbilityParams { // : UMeleeAIAbilityParams
		constexpr auto MeleeAttacks = 0xc8; // TArray<FMeleeAttackIdWeights>
	}

	namespace n_UIntentCombinerComponent { // : UActorComponent
		constexpr auto CooperationMultiplier = 0xc8; // float
		constexpr auto StartMovingThreshold = 0xcc; // float
		constexpr auto StopMovingThreshold = 0xd0; // float
		constexpr auto ConflictedStartMovingThreshold = 0xd4; // float
		constexpr auto ConflictedStopMovingThreshold = 0xd8; // float
		constexpr auto IntentProviders = 0xe0; // TArray<UObject*>
	}

	namespace n_USplineFootprintPathComponent { // : USplineComponent
		constexpr auto DistanceBetweenDecals = 0x608; // float
		constexpr auto DecalMaterial = 0x610; // UMaterialInterface*
		constexpr auto PathTool = 0x618; // FSplineFootprintPathTool
		constexpr auto DecalYaw = 0x61c; // float
		constexpr auto DecalUniformScale = 0x620; // FVector
	}

	namespace n_UAnimNotify_SetLookAtEnabled { // : UAnimNotify
		constexpr auto Enabled = 0x38; // bool
	}

	namespace n_AWindDirectionalSource { // : AInfo
		constexpr auto Component = 0x3d0; // UWindDirectionalSourceComponent*
	}

	namespace n_UAITask { // : UGameplayTask
		constexpr auto OwnerController = 0x58; // AAIController*
	}

	namespace n_UCompanyService { // : UObject
		constexpr auto CompanyData = 0x30; // TArray<UCompanyData*>
	}

	namespace n_AAIDockableWheel { // : AAIDockableObject
		constexpr auto InteractableType = 0x510; // UAIInteractableType*
		constexpr auto InteractableOffset = 0x518; // float
	}

	namespace n_UAutomatedLevelSequenceCapture { // : UMovieSceneCapture
		constexpr auto CaptureType = 0x38; // FCaptureProtocolID
		constexpr auto ProtocolSettings = 0x40; // UMovieSceneCaptureProtocolSettings*
		constexpr auto Settings = 0x48; // FMovieSceneCaptureSettings
		constexpr auto bUseSeparateProcess = 0x98; // bool
		constexpr auto bCloseEditorWhenCaptureStarts = 0x99; // bool
		constexpr auto AdditionalCommandLineArguments = 0xa0; // FString
		constexpr auto InheritedCommandLineArguments = 0xb0; // FString
	}

	namespace n_UTaleQuestSetCompassTargetToTargetStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBlackboardKeyType_Class { // : UBlackboardKeyType
		constexpr auto BaseClass = 0x30; // UObject*
	}

	namespace n_UDamageableShipPartAudioParams { // : UDataAsset
		constexpr auto DamageLevelEvent = 0x28; // UWwiseEvent*
		constexpr auto DamageLevelAudioPool = 0x30; // UWwiseObjectPoolWrapper*
		constexpr auto DamageLevelAudioSwitchName = 0x38; // FName
		constexpr auto DamageLevelAudioSwitchValues = 0x40; // TArray<FName>
	}

	namespace n_UMaterialExpressionFrac { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
	}

	namespace n_AItemProxy { // : APickupableObject
		constexpr auto InteractionPointRadius = 0x558; // float
		constexpr auto GroundImpactSfx = 0x560; // UWwiseEvent*
		constexpr auto VFXParams = 0x568; // TArray<FItemProxyImpactVfxParams>
		constexpr auto ZOffsetWhenPlacingWorldProxy = 0x578; // float
		constexpr auto RotationWhenPlacingWorldProxy = 0x57c; // FRotator
		constexpr auto DropOnSurfaceClientTraceChannel = 0x588; // ECollisionChannel
		constexpr auto ThirdPersonMesh = 0x590; // UPrimitiveComponent*
		constexpr auto TTL = 0x598; // float
		constexpr auto WaterInteractionComponent = 0x5a0; // UWaterInteractionComponent*
		constexpr auto BuoyancyComponent = 0x5a8; // UBuoyancyComponent*
		constexpr auto CachedProxySurfaceType = 0x5b1; // EPhysicalSurface
		constexpr auto CachedOnTopOfExistingBuriable = 0x5b2; // bool
		constexpr auto ItemInfo = 0x5b8; // AItemInfo*
		constexpr auto TTLPlayerProximityCutoff = 0x61c; // float
		constexpr auto TTLRecheckPeriod = 0x620; // float
	}

	namespace n_ULogicalNotStatCondition { // : UStatCondition
		constexpr auto StatCondition = 0x28; // UStatCondition*
	}

	namespace n_UAINameplateComponent { // : UNameplateComponent
		constexpr auto VisibleFromWorldDistance = 0x2e8; // float
		constexpr auto VisibleUntilWorldDistance = 0x2ec; // float
		constexpr auto VisibleAfterDeathDuration = 0x2f0; // float
		constexpr auto Title = 0x2f8; // FText
		constexpr auto DisplayName = 0x330; // FText
		constexpr auto DisplayNameAsString = 0x368; // FString
		constexpr auto DebugDisplayText = 0x378; // FString
		constexpr auto VisibilityDisabled = 0x388; // bool
	}

	namespace n_UVotingInteractionComponentBase { // : UActionRulesInteractableComponent
		constexpr auto HoldInputId = 0x120; // UNotificationInputId*
		constexpr auto ReleaseInputId = 0x128; // UNotificationInputId*
	}

	namespace n_UTaleQuestChooseIslandFromWeightsStep { // : UTaleQuestStep
		constexpr auto IslandTypeWeights = 0xc0; // UIslandTypeWeightsDataAsset*
	}

	namespace n_UStatusResponseAsset { // : UDataAsset
		constexpr auto HighFrequencyTriggerStatusHelper = 0x28; // FText
		constexpr auto TriggerStatus = 0x60; // TArray<UStatusBase*>
		constexpr auto Responses = 0x70; // TArray<UStatusResponse*>
	}

	namespace n_UCleanlinessComponent { // : UActorComponent
		constexpr auto DirtinessStrengthToMaterialStrength = 0xd8; // UCurveFloat*
		constexpr auto CleanlinessInfo = 0xe0; // FCleanlinessInfo
		constexpr auto DirtinessDecayRatePerSecond = 0xec; // float
		constexpr auto QuickCleanDirtynessDecayRatePerSecond = 0xf0; // float
	}

	namespace n_UAthenaAICharacterControllerParamsDataAsset { // : UAthenaAIControllerParamsDataAsset
		constexpr auto IndividualOverrideUseRVOAvoidance = 0x100; // bool
		constexpr auto IndividualUseRVOAvoidance = 0x101; // bool
		constexpr auto IndividualOverridePrioritiseInteractablesBeforeEnemies = 0x102; // bool
		constexpr auto IndividualPrioritiseInteractablesBeforeEnemies = 0x103; // bool
		constexpr auto IndividualDistanceInMToCannonShotHitChanceCurve = 0x108; // UCurveFloat*
		constexpr auto IndividualAIStrategyMovementProperties = 0x110; // TArray<FAIStrategyMovementProperties>
		constexpr auto IndividualItemCategoryAIStrategyMovementPropertiesOverrides = 0x120; // TArray<FItemCategoryAIStrategyMovementPropertiesOverride>
		constexpr auto IndividualCannonTargetingParams = 0x130; // FAthenaAICharacterCannonTargetingParams
		constexpr auto IndividualWieldedItemProjectileEffectivenessProperties = 0x140; // TArray<FAthenaAICharacterControllerItemCategoryProjectileEffectivenessProperties>
		constexpr auto IndividualWieldedItemOverrideNamedControllerParams = 0x150; // TArray<FAthenaAICharacterControllerItemCategoryNamedParams>
		constexpr auto IndividualNamedItemParams = 0x160; // TArray<FAthenaAIItemParamValue>
		constexpr auto IndividualSpawnItemDescForItemCategories = 0x170; // TArray<FAthenaAICharacterControllerSpawnItemDescForItemCategory>
		constexpr auto UseDamageBasedAbilityStages = 0x180; // bool
		constexpr auto HealthStages = 0x188; // TArray<float>
		constexpr auto IndividualDamageBasedAIAbilityStages = 0x198; // TArray<FAthenaAIAbilityDamageStage>
		constexpr auto IndividualAIAbilityParams = 0x1a8; // TArray<UAthenaAIAbilityParams*>
		constexpr auto IndividualNonItemEngageOptions = 0x1b8; // TArray<FAthenaAIEngageEnemyData>
		constexpr auto IndividualAnimationDataOverrideAsset = 0x1c8; // FStringAssetReference
		constexpr auto IndividualCustomAnimationAsset = 0x1d8; // FStringAssetReference
		constexpr auto IndividualOverrideNoInitialItem = 0x1e8; // bool
		constexpr auto IndividualNoInitialItem = 0x1e9; // bool
		constexpr auto IndividualOverrideBeginFleeing = 0x1ea; // bool
		constexpr auto IndividualBeginFleeing = 0x1eb; // bool
		constexpr auto IndividualFleeingEQS = 0x1f0; // UEnvQuery*
	}

	namespace n_UMaterialExpressionAntialiasedTextureMask { // : UMaterialExpressionTextureSampleParameter2D
		constexpr auto Threshold = 0x1c8; // float
		constexpr auto Channel = 0x1cc; // ETextureColorChannel
	}

	namespace n_AShroudBreakerOnShip { // : AActor
		constexpr auto AthenaWorldSettings = 0x3d0; // AAthenaWorldSettings*
		constexpr auto DistanceToSafeZoneInRange = 0x3d8; // float
		constexpr auto ShroudBreakerActivationState = 0x3dc; // EShroudBreakerActivationStateEnum
		constexpr auto IsShroudBreakerDeactivating = 0x3dd; // bool
		constexpr auto TargetSafeZone = 0x3de; // EAthenaSafeZoneEnum
	}

	namespace n_UParticleModuleBeamModifier { // : UParticleModuleBeamBase
		constexpr auto ModifierType = 0x50; // BeamModifierType
		constexpr auto PositionOptions = 0x54; // FBeamModifierOptions
		constexpr auto Position = 0x58; // FRawDistributionVector
		constexpr auto TangentOptions = 0x90; // FBeamModifierOptions
		constexpr auto Tangent = 0x98; // FRawDistributionVector
		constexpr auto bAbsoluteTangent = 0xd0; // char : 1
		constexpr auto StrengthOptions = 0xd4; // FBeamModifierOptions
		constexpr auto Strength = 0xd8; // FRawDistributionFloat
	}

	namespace n_UInterpTrackLinearColorBase { // : UInterpTrack
		constexpr auto LinearColorTrack = 0x70; // FInterpCurveLinearColor
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_AHull { // : AActor
		constexpr auto HullDragDynamicsDesc = 0x3d8; // UBaseHullDragDynamicsDesc*
	}

	namespace n_ADoubleActionItem { // : AStaticMeshWieldableItem
		constexpr auto PrimaryAction = 0x7a8; // UItemActionComponent*
		constexpr auto SecondaryAction = 0x7b0; // UItemActionComponent*
		constexpr auto ActionPriority = 0x7b8; // EDoubleActionItemPriority
		constexpr auto IsDisplaceable = 0x7b9; // bool
		constexpr auto ShouldBlockPickup = 0x7ba; // bool
		constexpr auto ActionMoveSpeedScalar = 0x7bc; // float
		constexpr auto ActionSensitivitySettingCategory = 0x7c0; // EAimSensitivitySettingCategory
	}

	namespace n_UAISpawnContextId { // : UObject
		constexpr auto Weighting = 0x28; // int32_t
	}

	namespace n_ULaunchableAttachPointComponent { // : USceneComponent
		constexpr auto AttachParent = 0xc8; // USceneComponent*
		constexpr auto AttachChildren = 0xd0; // TArray<USceneComponent*>
		constexpr auto AttachSocketName = 0xe0; // FName
		constexpr auto bRequiresCustomLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteLocation = 0xe8; // char : 1
		constexpr auto bAbsoluteTranslation = 0xe8; // char : 1
		constexpr auto bAbsoluteRotation = 0xe8; // char : 1
		constexpr auto bAbsoluteScale = 0xe8; // char : 1
		constexpr auto bVisible = 0xe8; // char : 1
		constexpr auto bHiddenInGame = 0xe8; // char : 1
		constexpr auto bShouldUpdatePhysicsVolume = 0xe8; // char : 1
		constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0xe9; // char : 1
		constexpr auto bUseAttachParentBound = 0xe9; // char : 1
		constexpr auto bComponentIsUnionOfChildren = 0xe9; // char : 1
		constexpr auto bJitterReduction = 0xe9; // char : 1
		constexpr auto CacheRootVelocity = 0xe9; // char : 1
		constexpr auto bWorldToComponentUpdated = 0xe9; // char : 1
		constexpr auto PhysicsVolume = 0xf8; // TWeakObjectPtr<APhysicsVolume>
		constexpr auto RelativeScale3D = 0x11c; // FVector
		constexpr auto RelativeLocation = 0x128; // FVector
		constexpr auto RelativeRotation = 0x134; // FRotator
		constexpr auto Mobility = 0x220; // EComponentMobility
		constexpr auto DetailMode = 0x221; // EDetailMode
		constexpr auto ComponentVelocity = 0x22c; // FVector
		constexpr auto PhysicsVolumeChangedDelegate = 0x238; // FScriptMulticastDelegate
		constexpr auto SocketVelocitiesToCache = 0x258; // TArray<FName>
	}

	namespace n_UFindTurnBasedMatchCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_AAbandonedNoteWieldable { // : ASkeletalMeshWieldableItem
		constexpr auto WieldableItemCanvasRenderingComponent = 0x7a0; // UWieldableItemCanvasRenderingComponent*
		constexpr auto AbandonedNoteRenderingComponent = 0x7a8; // UAbandonedNoteWieldableRenderingComponent*
		constexpr auto InventoryItemComponent = 0x7b0; // UInventoryItemComponent*
		constexpr auto UsableWieldableComponent = 0x7b8; // UUsableWieldableComponent*
		constexpr auto QuestMapIcon = 0x7c0; // EQuestMapIcon
	}

	namespace n_UAggressiveGhostShipsEncounterParams { // : UGameEventParams
		constexpr auto Encounter = 0x38; // UAggressiveGhostShipEncounterDataAsset*
		constexpr auto Formations = 0x40; // UAggressiveGhostShipEncounterFormationsDataAsset*
		constexpr auto EventSignalClass = 0x48; // UClass*
		constexpr auto ToggledEventSignalClass = 0x68; // UClass*
		constexpr auto EventSignalClassToggle = 0x88; // FName
		constexpr auto EventSignalHeightOffset = 0x90; // float
		constexpr auto EventSignalHeightPerIslandOffset = 0x98; // TArray<FAggressiveGhostShipsEncounterHeightPerIslandOffsets>
		constexpr auto ProjectilePoolMapConfiguration = 0xa8; // FPoolableCollectionMapConfiguration
		constexpr auto GhostShipsPoolMapConfiguration = 0xc0; // FPoolableCollectionMapConfiguration
		constexpr auto MinePoolSize = 0xd8; // int32_t
		constexpr auto AnchorDropPoolSize = 0xdc; // int32_t
		constexpr auto PoolingResourceClass = 0xe0; // AAggressiveGhostShipPoolResource*
		constexpr auto EncounterRewards = 0xe8; // UAggressiveGhostShipRewardsDataAsset*
		constexpr auto CustomIslandName = 0xf0; // FName
		constexpr auto UseParticipantList = 0xf8; // bool
		constexpr auto EncounterEnteredBannerDistance = 0xfc; // float
		constexpr auto EncounterEnteredBanner = 0x100; // UAggressiveGhostShipBannerDataAsset*
		constexpr auto EncounterCompleteBanner = 0x108; // UAggressiveGhostShipBannerDataAsset*
		constexpr auto MinimumIslandRangeInMeters = 0x110; // float
		constexpr auto MaximumIslandRangeInMeters = 0x114; // float
		constexpr auto FireEmissaryStatsOnFinished = 0x118; // bool
		constexpr auto DelayBeforeEndingEncounter = 0x11c; // float
		constexpr auto EncounterExclusionRadiusInMetres = 0x120; // float
		constexpr auto EncounterSightingType = 0x124; // EEncounterType
		constexpr auto EncounterCloseType = 0x125; // EEncounterType
	}

	namespace n_UVoiceChatRenderer { // : UObject
		constexpr auto AttenuatedVoiceEvent = 0x38; // UWwiseEvent*
		constexpr auto AttenuatedAndSpatialisedVoiceEvent = 0x40; // UWwiseEvent*
		constexpr auto UnattenuatedVoiceEvent = 0x48; // UWwiseEvent*
		constexpr auto PreBufferInMilliseconds = 0x50; // int32_t
		constexpr auto ChatRoutingListenerIndex = 0x54; // int32_t
		constexpr auto EmitterHoldInSeconds = 0x58; // float
	}

	namespace n_UDrunkennessComponent { // : UActorComponent
		constexpr auto PublicData = 0xd0; // UDrunkennessComponentPublicData*
		constexpr auto TargetDrunkenness = 0x218; // float [0x2]
		constexpr auto CurrentDrunkenness = 0x220; // float [0x2]
		constexpr auto RemainingAmountToSoberUpDueToWaterSplash = 0x228; // float
		constexpr auto AlcoholDrunkennessStatus = 0x238; // FStatus
		constexpr auto VomitVFXType = 0x250; // FName
	}

	namespace n_UFireGridCellSelectionParamsDataAsset { // : UDataAsset
		constexpr auto FireGridCellSelectionParams = 0x28; // TArray<FFireGridCellSelectionParams>
	}

	namespace n_UIslandDataAssetEntry { // : UDataAsset
		constexpr auto IslandName = 0x28; // FName
		constexpr auto TreasureMaps = 0x30; // TArray<FTreasureMapData>
		constexpr auto WorldMapData = 0x40; // UWorldMapIslandDataAsset*
		constexpr auto UndergroundTreasureLocationsSource = 0x48; // UGeneratedLocationsDataAsset*
		constexpr auto UndergroundTreasureLocations = 0x50; // TArray<FVector>
		constexpr auto LandmarkTreasureLocationsSource = 0x60; // ULandmarkTreasureLocationsDataAsset*
		constexpr auto AISpawnLocationsSource = 0x68; // UGeneratedLocationsDataAsset*
		constexpr auto AISpawnLocations = 0x70; // TArray<FVector>
		constexpr auto IslandItemLocationDataSources = 0x80; // TArray<UIslandItemDataAsset*>
		constexpr auto IslandSalvageSpawnerCollections = 0x90; // TArray<UIslandSalvageSpawnerCollection*>
		constexpr auto SalvageItemsLocationData = 0xa0; // TArray<FTypedIslandItemSpawnLocationData>
		constexpr auto LocalisedName = 0xb0; // FText
		constexpr auto AISpawner = 0xe8; // UAISpawner*
		constexpr auto CannonsAISpawner = 0xf0; // UAISpawner*
		constexpr auto EmergentCaptainSpawner = 0xf8; // UAISpawner*
		constexpr auto IslandMaterialStatusZone = 0x100; // UIslandMaterialStatusZone*
		constexpr auto StatToFireWhenPlayerSetsFootOnIsland = 0x108; // FPlayerStat
		constexpr auto ShouldBeHiddenOnWorldMap = 0x10c; // bool
		constexpr auto UseAdvancedSearchForMermaidSpawn = 0x10d; // bool
		constexpr auto IslandActiveEventType = 0x10e; // EIslandActiveEventType
	}

	namespace n_UBuriedItemStepDesc { // : UTaleQuestStepDesc
		constexpr auto ItemType = 0x80; // FQuestVariableClass
		constexpr auto ItemSpawnData = 0x90; // FQuestVariableItemSpawnDataType
		constexpr auto ItemId = 0xa0; // FQuestVariableGuid
		constexpr auto DigRadius = 0xb0; // float
		constexpr auto SpawnedItemInfo = 0xb8; // FQuestVariableActor
		constexpr auto DiscoveringCharacter = 0xc8; // FQuestVariablePlayerActor
		constexpr auto TrackBuriedItem = 0xd8; // bool
		constexpr auto MarkBuriedItemAsCritical = 0xd9; // bool
		constexpr auto MarkActorAsPhased = 0xda; // bool
		constexpr auto CriticalActorLostMessage = 0xe0; // FText
		constexpr auto MarkerClass = 0x118; // FQuestVariableClass
	}

	namespace n_USafeZoneSlot { // : UPanelSlot
		constexpr auto bIsTitleSafe = 0x38; // bool
		constexpr auto HAlign = 0x39; // EHorizontalAlignment
		constexpr auto VAlign = 0x3a; // EVerticalAlignment
		constexpr auto Padding = 0x3c; // FMargin
	}

	namespace n_UCoherentUIGTRootDataAsset { // : UDataAsset
		constexpr auto SharedContainers = 0x28; // TArray<UCoherentUIGTAssetContainer*>
		constexpr auto HUDContainers = 0x38; // TArray<UCoherentUIGTAssetContainer*>
		constexpr auto MenuContainers = 0x48; // TArray<UCoherentUIGTAssetContainer*>
		constexpr auto ShopContainers = 0x58; // TArray<UCoherentUIGTAssetContainer*>
		constexpr auto CompanyContainers = 0x68; // TArray<UCoherentUIGTAssetContainer*>
		constexpr auto FrontendContainers = 0x78; // TArray<UCoherentUIGTAssetContainer*>
		constexpr auto InGameContainers = 0x88; // TArray<UCoherentUIGTAssetContainer*>
	}

	namespace n_UWorldMapIslandDataAsset { // : UDataAsset
		constexpr auto Texture = 0x28; // UTexture*
		constexpr auto CaptureParams = 0x30; // FWorldMapIslandDataCaptureParams
		constexpr auto LabelOffset = 0x70; // float
	}

	namespace n_UVoyageParticipantComponent { // : UActorComponent
		constexpr auto OwningPlayer = 0x170; // AActor*
		constexpr auto ViewContainer = 0x178; // FVoyageParticipantViewContainer
		constexpr auto PreviousViewContainer = 0x240; // FVoyageParticipantViewContainer
	}

	namespace n_UPawnAction { // : UObject
		constexpr auto ChildAction = 0x28; // UPawnAction*
		constexpr auto ParentAction = 0x30; // UPawnAction*
		constexpr auto OwnerComponent = 0x38; // UPawnActionsComponent*
		constexpr auto Instigator = 0x40; // UObject*
		constexpr auto BrainComp = 0x48; // UBrainComponent*
		constexpr auto bAllowNewSameClassInstance = 0x78; // char : 1
		constexpr auto bReplaceActiveSameClassInstance = 0x78; // char : 1
		constexpr auto bShouldPauseMovement = 0x78; // char : 1
	}

	namespace n_UAthenaAnimationItemListingAsset { // : UDataAsset
		constexpr auto FishingRodItemGrouping = 0x28; // UAthenaAnimationFishingAnimationsGroupingAsset*
	}

	namespace n_UScrollBarWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto ScrollBarStyle = 0x30; // FScrollBarStyle
	}

	namespace n_AGoldMoundItemProxy { // : AItemProxy
		constexpr auto OnMoundInteractStartLoopingSfx = 0x628; // UWwiseEvent*
		constexpr auto OnMoundInteractStopLoopingSfx = 0x630; // UWwiseEvent*
		constexpr auto OnMoundCancelPickupSfx = 0x638; // UWwiseEvent*
		constexpr auto OnMoundPickupCompleteSfx = 0x640; // UWwiseEvent*
		constexpr auto GoldMoundSfxPool = 0x648; // UWwiseObjectPoolWrapper*
		constexpr auto AmbientVfx = 0x650; // UObject*
		constexpr auto PickupVfx = 0x658; // UObject*
		constexpr auto AmbientParticleSystem = 0x680; // UParticleSystemComponent*
		constexpr auto PickupParticleSystem = 0x688; // UParticleSystemComponent*
		constexpr auto DynamicMaterials = 0x6a8; // TArray<UMaterialInstanceDynamic*>
		constexpr auto FadeOutDuration = 0x6bc; // float
		constexpr auto DelayedDestroyStarted = 0x6c0; // bool
	}

	namespace n_AShipDynamicsProviderActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTaleQuestSelectShipwreckLocationFromValidCandidatesStepDesc { // : UTaleQuestStepDesc
		constexpr auto SelectionStrategy = 0x80; // UTaleQuestArrayEntrySelectionStrategy*
		constexpr auto InputArray = 0x88; // FQuestVariableVectorArray
		constexpr auto OutputEntry = 0x98; // FQuestVariableVector
		constexpr auto ShuffleLists = 0xa8; // FQuestVariableBool
	}

	namespace n_UGrenadeSetupDataAsset { // : UDataAsset
		constexpr auto ServerThrowOffset = 0x28; // FVector
		constexpr auto FirstPersonThrowOffset = 0x34; // FVector
		constexpr auto PitchToProjectileSpeedCurve = 0x40; // UCurveFloat*
		constexpr auto ProjectileSpeedToAngleVarianceCurve = 0x48; // UCurveFloat*
		constexpr auto ProjectileGravityScale = 0x50; // float
		constexpr auto ExtraPitchCurve = 0x58; // UCurveFloat*
		constexpr auto MinPitch = 0x60; // float
		constexpr auto MaxPitch = 0x64; // float
		constexpr auto PlayerSpeedModifier = 0x68; // float
		constexpr auto FirstPersonScaleModifier = 0x6c; // float
		constexpr auto TimeToPreventThrowingAfterLeavingConcealment = 0x70; // float
		constexpr auto TimeToEquip = 0x74; // float
		constexpr auto MinTimeBetweenOfferingAndThrowing = 0x78; // float
		constexpr auto TimeToConsumePostThrow = 0x7c; // float
		constexpr auto UseVisualThrowOffset = 0x80; // bool
		constexpr auto AIThrowDelayTime = 0x84; // float
		constexpr auto AIThrowProjectileSpeed = 0x88; // float
		constexpr auto AIThrowPreferHigherAngles = 0x8c; // bool
	}

	namespace n_UAnimCompress_RemoveLinearKeys { // : UAnimCompress
		constexpr auto MaxPosDiff = 0x40; // float
		constexpr auto MaxAngleDiff = 0x44; // float
		constexpr auto MaxScaleDiff = 0x48; // float
		constexpr auto MaxEffectorDiff = 0x4c; // float
		constexpr auto MinEffectorDiff = 0x50; // float
		constexpr auto EffectorDiffSocket = 0x54; // float
		constexpr auto ParentKeyScale = 0x58; // float
		constexpr auto bRetarget = 0x5c; // char : 1
		constexpr auto bActuallyFilterLinearKeys = 0x5c; // char : 1
	}

	namespace n_UPirateLegendSection { // : UDataAsset
		constexpr auto SectionType = 0x28; // EPLSectionType
		constexpr auto QuestDescription = 0x30; // UTaleQuestDescAsset*
	}

	namespace n_UTaleQuestIsClueOfTypeStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_USoundNodeSoundClass { // : USoundNode
		constexpr auto SoundClassOverride = 0x38; // USoundClass*
	}

	namespace n_UCoherentUIGTAssetContainer { // : UDataAsset
		constexpr auto TextureAssets = 0x28; // TArray<UTexture2D*>
	}

	namespace n_UContentEngagementMessageParams { // : UDataAsset
		constexpr auto Title = 0x28; // FText
		constexpr auto Body = 0x60; // FText
		constexpr auto KeyArt = 0x98; // FStringAssetReference
	}

	namespace n_USoundNodeRandom { // : USoundNode
		constexpr auto Weights = 0x38; // TArray<float>
		constexpr auto PreselectAtLevelLoad = 0x48; // int32_t
		constexpr auto bRandomizeWithoutReplacement = 0x4c; // char : 1
		constexpr auto HasBeenUsed = 0x50; // TArray<bool>
		constexpr auto NumRandomUsed = 0x60; // int32_t
	}

	namespace n_UBTService_SetNameBlackboardValueWhileRelevant { // : UBTService
		constexpr auto NameValueKey = 0x70; // FBlackboardKeySelector
		constexpr auto Value = 0x98; // FName
	}

	namespace n_UNPCDialogPredicateHasFeature { // : UNPCDialogPredicate
		constexpr auto FeatureName = 0x38; // FName
	}

	namespace n_UPlantAIFormDataAsset { // : UAthenaAIFormDataAsset
		constexpr auto WetCooldown = 0x90; // float
		constexpr auto WetHealPerSecond = 0x94; // float
		constexpr auto RelativeWaterLevelToGetWet = 0x98; // float
		constexpr auto RainStrengthToGetWet = 0x9c; // float
		constexpr auto WeakMovementSpeedMultiplier = 0xa0; // float
	}

	namespace n_UShipwreckSiteGeneratorRandom { // : UDataAsset
		constexpr auto MinSpawnDistanceFromEndOfWorldZone = 0x28; // float
		constexpr auto ShipwreckDepthDistribution = 0x30; // UCurveFloat*
		constexpr auto ClearanceRadius = 0x38; // float
		constexpr auto MinDistanceFromClosestShipwreck = 0x3c; // float
		constexpr auto MinDistanceFromClosestCrewShip = 0x40; // float
		constexpr auto MinDistanceFromClosestIsland = 0x44; // float
		constexpr auto MinDistanceFromClosestPlayer = 0x48; // float
		constexpr auto MinDistanceFromClosestRock = 0x4c; // float
		constexpr auto SiteGenerationThrottle = 0x50; // float
		constexpr auto RequestBatchSize = 0x54; // int32_t
		constexpr auto Rotations = 0x58; // TArray<FShipwreckSiteRotation>
	}

	namespace n_ASharedObjectReplicationService { // : AActor
		constexpr auto ReplicatedObjects = 0x3d8; // TMap<UObject*, int32_t>
		constexpr auto RepArray = 0x428; // TArray<UObject*>
	}

	namespace n_UAILoadoutTypeList { // : UDataAsset
		constexpr auto AllLoadouts = 0x28; // TArray<ULoadoutAsset*>
	}

	namespace n_UMovieSceneActorReferenceSection { // : UMovieSceneSection
		constexpr auto ActorGuidIndexCurve = 0xa0; // FIntegralCurve
		constexpr auto ActorGuidStrings = 0x120; // TArray<FString>
	}

	namespace n_UOverrideProgressSpawnStepDesc { // : UTaleQuestStepDesc
		constexpr auto ProgressId = 0x80; // UProgressLocationId*
	}

	namespace n_UMovieSceneVectorTrack { // : UMovieScenePropertyTrack
		constexpr auto NumChannelsUsed = 0xb0; // int32_t
	}

	namespace n_UBorder { // : UContentWidget
		constexpr auto ContentColorAndOpacity = 0x150; // FLinearColor
		constexpr auto ContentColorAndOpacityDelegate = 0x160; // DelegateProperty
		constexpr auto Padding = 0x170; // FMargin
		constexpr auto HorizontalAlignment = 0x180; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x181; // EVerticalAlignment
		constexpr auto Background = 0x188; // FSlateBrush
		constexpr auto BackgroundDelegate = 0x218; // DelegateProperty
		constexpr auto BrushColor = 0x228; // FLinearColor
		constexpr auto BrushColorDelegate = 0x238; // DelegateProperty
		constexpr auto bShowEffectWhenDisabled = 0x248; // bool
		constexpr auto OnMouseButtonDownEvent = 0x24c; // DelegateProperty
		constexpr auto OnMouseButtonUpEvent = 0x25c; // DelegateProperty
		constexpr auto OnMouseMoveEvent = 0x26c; // DelegateProperty
		constexpr auto OnMouseDoubleClickEvent = 0x27c; // DelegateProperty
		constexpr auto Brush = 0x2a8; // USlateBrushAsset*
	}

	namespace n_UDistanceJointComponent { // : UActorComponent
		constexpr auto MinDistance = 0x138; // float
		constexpr auto MaxDistance = 0x13c; // float
		constexpr auto SpringStiffness = 0x140; // float
		constexpr auto SpringDamping = 0x144; // float
		constexpr auto ApplyAsSpring = 0x148; // bool
		constexpr auto EnforceMinDistance = 0x149; // bool
		constexpr auto EnforceMaxDistance = 0x14a; // bool
	}

	namespace n_UAthenaPlayerCharacterTestInputBinder { // : UCharacterInputBinder
		constexpr auto LastAnalogInputId = 0x88; // UAnalogInputId*
		constexpr auto LastAnalogInputValue = 0x90; // float
		constexpr auto LastNotificationInputId = 0x98; // UNotificationInputId*
	}

	namespace n_UInstancedActorDelegateBinding { // : UDynamicBlueprintBinding
		constexpr auto ActorDelegateBindings = 0x28; // TArray<FBlueprintInstancedActorDelegateBinding>
	}

	namespace n_UMovieSceneFloatTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UFloatingMessageInABottleClueSiteData { // : UClueSiteData
		constexpr auto SpawnLocation = 0x38; // FVector
	}

	namespace n_UAllianceServiceTelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UBTTask_DetachFromHangout { // : UBTTask_BlackboardBase
		constexpr auto TaskDuration = 0x88; // float
	}

	namespace n_UMaterialExpressionComponentMask { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto R = 0xa8; // char : 1
		constexpr auto G = 0xa8; // char : 1
		constexpr auto B = 0xa8; // char : 1
		constexpr auto A = 0xa8; // char : 1
	}

	namespace n_UInterpToMovementComponent { // : UMovementComponent
		constexpr auto Duration = 0x110; // float
		constexpr auto bPauseOnImpact = 0x114; // char : 1
		constexpr auto BehaviourType = 0x118; // EInterpToBehaviourType
		constexpr auto bForceSubStepping = 0x11c; // char : 1
		constexpr auto OnInterpToReverse = 0x120; // FScriptMulticastDelegate
		constexpr auto OnInterpToStop = 0x130; // FScriptMulticastDelegate
		constexpr auto OnWaitBeginDelegate = 0x140; // FScriptMulticastDelegate
		constexpr auto OnWaitEndDelegate = 0x150; // FScriptMulticastDelegate
		constexpr auto OnResetDelegate = 0x160; // FScriptMulticastDelegate
		constexpr auto MaxSimulationTimeStep = 0x170; // float
		constexpr auto MaxSimulationIterations = 0x174; // int32_t
		constexpr auto ControlPoints = 0x178; // TArray<FInterpControlPoint>
	}

	namespace n_UInterpTrackVisibility { // : UInterpTrack
		constexpr auto VisibilityTrack = 0x70; // TArray<FVisibilityTrackKey>
		constexpr auto bFireEventsWhenForwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x80; // char : 1
	}

	namespace n_ACookingPot { // : AInteractableBase
		constexpr auto MeshComponent = 0x400; // UStaticMeshComponent*
		constexpr auto InteractableComponent = 0x408; // UActionRulesInteractableComponent*
		constexpr auto CookerComponent = 0x410; // UCookerComponent*
		constexpr auto HoldToInteractTime = 0x418; // float
		constexpr auto NotWieldingCookableItemTooltip = 0x420; // FText
		constexpr auto WieldingCookableItemTooltip = 0x458; // FText
		constexpr auto TakeItemTooltip = 0x490; // FText
		constexpr auto CannotTakeItemTooltip = 0x4c8; // FText
		constexpr auto MixInItemTooltip = 0x500; // FText
	}

	namespace n_UAthenaAIAbility { // : UObject
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_UAbilityTask_SpawnActor { // : UAbilityTask
		constexpr auto Success = 0x68; // FScriptMulticastDelegate
		constexpr auto DidNotSpawn = 0x78; // FScriptMulticastDelegate
	}

	namespace n_UCargoRunCrateData { // : UDataAsset
		constexpr auto DeliveryNoteDescriptions = 0x28; // TArray<FText>
		constexpr auto DeliveryNoteDescriptionsNoDeadline = 0x38; // TArray<FText>
		constexpr auto DeliveryNoteDescriptionsLate = 0x48; // TArray<FText>
		constexpr auto DeliveryNoteClose = 0x58; // TArray<FText>
		constexpr auto DeliveryNoteWelcome = 0x68; // TArray<FText>
		constexpr auto DeliveryNoteWelcomeLate = 0x78; // TArray<FText>
		constexpr auto WashedUpMinDistanceToNPC = 0x88; // float
		constexpr auto WashedUpMaxDistanceToNPC = 0x8c; // float
	}

	namespace n_UBTTask_AthenaWaitWithFloor { // : UBTTask_AthenaWait
		constexpr auto Floor = 0xf8; // FAIDataProviderFloatValue
	}

	namespace n_USwimmingPathFollowingComponent { // : UActorComponent
		constexpr auto DirectSwimmingDotToTarget = 0xc8; // float
		constexpr auto ArcToTargetDotToTarget = 0xcc; // float
		constexpr auto MaxTargetPitchFactor = 0xd0; // float
		constexpr auto MinPosDeltaSqToRepathToMovingTarget = 0xd4; // float
		constexpr auto MinPosDeltaSqToInvalidateFixedLocation = 0xd8; // float
		constexpr auto PitchBezierControlPointsLengthFactor = 0xdc; // float
		constexpr auto TimeMovingAwayFromTargetPosToFlagFailure = 0xe0; // float
		constexpr auto LineOfSightCollisionProfile = 0xe4; // FName
		constexpr auto LineOfSightSphereCastRadius = 0xec; // float
		constexpr auto LineOfSightCheckInterval = 0xf0; // float
		constexpr auto FirstLoSTriggerTimeInNewPath = 0xf4; // float
		constexpr auto FirstLoSTriggerTimeInRePath = 0xf8; // float
		constexpr auto DrawDebugOnServer = 0xfc; // bool
		constexpr auto CollisionTypesToDoPathUpdate = 0x100; // TArray<ECollisionChannel>
		constexpr auto MovementComponent = 0x110; // USwimmingCreatureMovementComponent*
		constexpr auto SwimmingAIController = 0x118; // AAthenaSwimmingAIController*
		constexpr auto ArcFollowingMode = 0x120; // EArcFollowingMode
		constexpr auto TargetActor = 0x178; // AActor*
	}

	namespace n_ASirenTridentProjectile { // : ADamageableCannonProjectile
		constexpr auto ProjectileParameters = 0x680; // TArray<USirenTridentProjectileParams*>
		constexpr auto CurrentMaterialScale = 0x690; // float
		constexpr auto MaterialScaleParameterName = 0x694; // FName
		constexpr auto DynamicMaterialInstance = 0x6a0; // UMaterialInstanceDynamic*
		constexpr auto CurrentProjectileParameters = 0x6a8; // USirenTridentProjectileParams*
		constexpr auto CollisionSphere = 0x6b8; // USphereComponent*
		constexpr auto RewindComponent = 0x6c0; // URewindComponent*
	}

	namespace n_UUsableWieldableComponent { // : UActorComponent
		constexpr auto OneShotInputNotifications = 0xd8; // TArray<UNotificationInputId*>
		constexpr auto ContinuousUseNotification = 0xe8; // TArray<FHoldToUseInput>
		constexpr auto PreventOverlappingContinuousUses = 0xf8; // bool
		constexpr auto NotificationIdsToIgnore = 0x100; // TArray<UNotificationInputId*>
		constexpr auto CurrentlyActiveNotifications = 0x110; // TArray<UNotificationInputId*>
	}

	namespace n_AEquipmentChestInteraction { // : APossessionsChestInteraction
		constexpr auto Categories = 0x438; // TArray<UItemCategory*>
		constexpr auto AllTab = 0x448; // bool
	}

	namespace n_UBTTask_SpawnAndWieldItem { // : UBTTask_WaitForWieldBase
		constexpr auto ItemDesc = 0x68; // UItemDesc*
	}

	namespace n_UPlayNpcAnimationStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UBasePlayNpcAnimationStepDesc*
		constexpr auto NPCDialogComponent = 0xa8; // UNPCDialogComponent*
		constexpr auto CutSceneActor = 0xb0; // ACutSceneActor*
	}

	namespace n_UTaleQuestGetCrewShipManifestStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UQuitMatchCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_USpawnItemStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // USpawnItemStepDesc*
	}

	namespace n_UIterativeCanvasRenderTarget2D { // : UTextureRenderTarget2D
		constexpr auto OnCanvasRenderTargetUpdate = 0x168; // FScriptMulticastDelegate
		constexpr auto World = 0x178; // TWeakObjectPtr<UWorld>
	}

	namespace n_USkeletalMeshMemoryConstraintComponent { // : USkeletalMeshComponent
		constexpr auto Handler = 0x9a8; // UMeshMemoryConstraintHandler*
		constexpr auto FallbackOverrideMaterials = 0x9b0; // TArray<FStringAssetReference>
		constexpr auto MeshFallbackCategory = 0x9c0; // UMeshMemoryConstraintCategory*
		constexpr auto MeshReference = 0x9c8; // FStringAssetReference
		constexpr auto CachedMeshResourceSize = 0x9d8; // int64_t
		constexpr auto MemoryAccountedFor = 0x9e0; // bool
		constexpr auto NeedMeshLoadOnServer = 0x9e1; // bool
		constexpr auto BudgetToCountMemoryAgainstIfNoFallback = 0x9e8; // UMeshMemoryConstraintBudget*
	}

	namespace n_UTaleQuestShipwreckService { // : UTaleQuestService
		constexpr auto ActiveWreck = 0x60; // ACustomShipwreck*
		constexpr auto Desc = 0x68; // UTaleQuestShipwreckServiceDesc*
	}

	namespace n_ADebugStatusTicketHolder { // : AActor
		constexpr auto StatusRecipient = 0x3d0; // AActor*
	}

	namespace n_UGetNumberOfCollectedTornMapPiecesStepDesc { // : UTaleQuestStepDesc
		constexpr auto MapId = 0x80; // FQuestVariableGuid
		constexpr auto NumPieces = 0x90; // FQuestVariableInt
	}

	namespace n_UTestWindInterface { // : UObject
		constexpr auto WindZones = 0x58; // TArray<TScriptInterface<Class>>
	}

	namespace n_UParticleModuleSizeOverVelocity { // : UParticleModuleSizeBase
		constexpr auto SizeMultiplier = 0x50; // FRawDistributionFloat
	}

	namespace n_UTaleQuestAddXMarksMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto IslandName = 0x88; // FQuestVariableName
		constexpr auto Location = 0x98; // FQuestVariableVector
	}

	namespace n_UMaterialExpressionDeriveNormalZ { // : UMaterialExpression
		constexpr auto InXY = 0x70; // FExpressionInput
	}

	namespace n_UAIShipBattlesDataAsset { // : UDataAsset
		constexpr auto Battles = 0x28; // TArray<FAIShipBattleParams>
		constexpr auto SkellyCrewNames = 0x38; // TArray<FText>
		constexpr auto EncounterCompleteText = 0x48; // FText
	}

	namespace n_UTaleQuestAddRiddleMapUsingVariableStepDesc { // : UTaleQuestAddRiddleMapBaseStepDesc
		constexpr auto TextVariable = 0x98; // FQuestVariableTextArray
	}

	namespace n_UVisibilityBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UTestControllableIntentComponent { // : UControllableIntentComponent
		constexpr auto AckToken = 0xd8; // char
		constexpr auto RequiresHandshake = 0xd9; // bool
		constexpr auto ServerIntent = 0xdc; // float
		constexpr auto LocalIntent = 0xe0; // float
	}

	namespace n_AServiceProviderGameState { // : AGameState
		constexpr auto GameModeClass = 0x3d0; // AGameMode*
		constexpr auto AuthorityGameMode = 0x3d8; // AGameMode*
		constexpr auto SpectatorClass = 0x3e0; // ASpectatorPawn*
		constexpr auto MatchState = 0x3e8; // FName
		constexpr auto PreviousMatchState = 0x3f0; // FName
		constexpr auto ElapsedTime = 0x3f8; // int32_t
		constexpr auto PlayerArray = 0x400; // TArray<APlayerState*>
		constexpr auto ReplicatedWorldTimeSeconds = 0x410; // float
		constexpr auto ServerWorldTimeSecondsDelta = 0x414; // float
		constexpr auto ServerWorldTimeSecondsUpdateFrequency = 0x418; // float
	}

	namespace n_UParticleModuleColorOverLife { // : UParticleModuleColorBase
		constexpr auto ColorOverLife = 0x50; // FRawDistributionVector
		constexpr auto AlphaOverLife = 0x88; // FRawDistributionFloat
		constexpr auto bClampAlpha = 0xc0; // char : 1
	}

	namespace n_URadialManagerInputBinder { // : UInputBinder
		constexpr auto InputComponent = 0x28; // UInputComponent*
	}

	namespace n_APressurePlateMechanismTriggerProxy { // : AMechanismElementProxy
		constexpr auto DisableAfterActivation = 0x3f0; // bool
		constexpr auto AutoEnableAfterDisable = 0x3f1; // bool
		constexpr auto TimeAfterDisableBeforeAutoEnable = 0x3f4; // float
		constexpr auto DelayBeforeActivation = 0x3f8; // float
		constexpr auto AllowedInteractableTypes = 0x400; // TArray<FAllowedInteractableTypes>
	}

	namespace n_UShantyItemDesc { // : UEntitlementDesc
		constexpr auto ShantyData = 0xd8; // FShantyData
		constexpr auto BackgroundPath = 0x108; // FStringAssetReference
	}

	namespace n_USirenTeleportAIAbility { // : UTeleportAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_USceneDialogueSectionRedirect { // : USceneDialoguePoint
		constexpr auto SectionNameToGoTo = 0x28; // FString
	}

	namespace n_UAdjustableWaterLevelPuzzleAudioParams { // : UDataAsset
		constexpr auto WaterLevelPuzzlePool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto PuzzleWaterRiseStartEvent = 0x30; // UWwiseEvent*
		constexpr auto PuzzleWaterRiseEndEvent = 0x38; // UWwiseEvent*
		constexpr auto PuzzleWaterFallStartEvent = 0x40; // UWwiseEvent*
		constexpr auto PuzzleWaterFallEndEvent = 0x48; // UWwiseEvent*
	}

	namespace n_UTaleQuestReactionStepDesc { // : UTaleQuestStepDesc
		constexpr auto PlaceableReaction = 0x80; // FQuestVariableActor
	}

	namespace n_UTaleQuestUpdateBuoyancyAutoSinkSettingForItemStepDesc { // : UTaleQuestStepDesc
		constexpr auto Item = 0x80; // FQuestVariableItemInfo
		constexpr auto EnableAutoSink = 0x90; // bool
	}

	namespace n_AWatercraftService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_AHullDamage { // : AActor
		constexpr auto Root = 0x3e8; // USceneComponent*
		constexpr auto RepairPlanksMesh = 0x3f0; // UMobileInstancedStaticMeshComponent*
		constexpr auto ShipDamageComponent = 0x3f8; // UShipDamageableComponent*
		constexpr auto DamageZoneTickInterval = 0x400; // int32_t
		constexpr auto InternalWater = 0x408; // AShipInternalWater*
		constexpr auto DamageZones = 0x410; // TArray<ADamageZone*>
		constexpr auto ActiveHullDamageZones = 0x420; // TArray<ADamageZone*>
		constexpr auto BottomDeckDamageZones = 0x430; // TArray<ADamageZone*>
		constexpr auto MiddleDeckDamageZones = 0x440; // TArray<ADamageZone*>
		constexpr auto DamageZoneDeckDistribution = 0x450; // FWeightedProbabilityRange
		constexpr auto PersistenceIdentifierSettingsAsset = 0x470; // UPersistenceIdentifierSettingsAsset*
		constexpr auto RepairablePoints = 0x548; // TArray<URepairableComponent*>
	}

	namespace n_UOpenableItemAnimationInstance { // : UAnimInstance
		constexpr auto ClosedTransitionAnim = 0x440; // UAnimSequence*
		constexpr auto ClosedLoopAnim = 0x448; // UAnimSequence*
		constexpr auto OpenTransitionAnim = 0x450; // UAnimSequence*
		constexpr auto FirstOpenTransitionAnim = 0x458; // UAnimSequence*
		constexpr auto OpenLoopAnim = 0x460; // UAnimSequence*
		constexpr auto BlendInTime = 0x468; // float
		constexpr auto BlendOutTime = 0x46c; // float
		constexpr auto CurrentMontage = 0x470; // UAnimMontage*
		constexpr auto NextAnim = 0x478; // UAnimSequence*
		constexpr auto CurrentAnimOpenState = 0x480; // EOpenableItemState
	}

	namespace n_UDistributionVectorConstantCurve { // : UDistributionVector
		constexpr auto ConstantCurve = 0x38; // FInterpCurveVector
		constexpr auto bLockAxes = 0x50; // char : 1
		constexpr auto LockedAxes = 0x54; // EDistributionVectorLockFlags
	}

	namespace n_UParticleModuleKillHeight { // : UParticleModuleKillBase
		constexpr auto Height = 0x50; // FRawDistributionFloat
		constexpr auto bAbsolute = 0x88; // char : 1
		constexpr auto bFloor = 0x88; // char : 1
		constexpr auto bApplyPSysScale = 0x88; // char : 1
	}

	namespace n_ATradeRouteMap { // : ARenderToTextureMapBase
		constexpr auto Font = 0x840; // UFont*
		constexpr auto FontColour = 0x848; // FLinearColor
		constexpr auto FontLineSpacing = 0x858; // float
		constexpr auto FontScale = 0x85c; // float
		constexpr auto TextData = 0x860; // FTradeRouteMapTextLayout
		constexpr auto ImageBlendMode = 0x870; // EBlendMode
		constexpr auto ImageData = 0x878; // TArray<FTreasureMapWidgetTexture>
		constexpr auto IslandMaterialReference = 0x888; // FStringAssetReference
		constexpr auto VesselText = 0x898; // FText
		constexpr auto OriginText = 0x8d0; // FText
		constexpr auto DestinationText = 0x908; // FText
	}

	namespace n_UTaleQuestSpawnWashedUpMessageInABottleClueStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMovieSceneSpawnTrack { // : UMovieSceneTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
		constexpr auto ObjectGuid = 0x98; // FGuid
	}

	namespace n_UComponentWithTestInterface { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UCharacterAINoiseEventComponent { // : UActorComponent
		constexpr auto Params = 0xc8; // UCharacterMovementAINoiseEventComponentParams*
		constexpr auto AthenaCharacter = 0xd0; // AAthenaCharacter*
		constexpr auto CharacterMovementComponent = 0xd8; // UAthenaCharacterMovementComponent*
	}

	namespace n_UClearTaleProgressStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMockTelemetryDescriptorComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UPetCustomizationDesc { // : UPetEntitlementBaseDesc
		constexpr auto PetPartMapping = 0xd8; // TArray<FPetCustomizationPartMapping>
		constexpr auto RelatedPetEntitlementCategory = 0xe8; // UPetEntitlementCategory*
		constexpr auto CustomizationPetClass = 0xf0; // UClass*
	}

	namespace n_USceneDialogueSection { // : UObject
		constexpr auto Name = 0x28; // FString
		constexpr auto IsPool = 0x38; // bool
		constexpr auto PoolPlayLimit = 0x3c; // uint32_t
		constexpr auto TimeDelayBetweenText = 0x40; // float
		constexpr auto Points = 0x48; // TArray<USceneDialoguePointWithConditional*>
	}

	namespace n_UAthenaAnimationData { // : UAnimationData
		constexpr auto DeathDataAsset = 0x28; // UAthenaAnimationDeathDataAsset*
		constexpr auto UndoRepairAsset = 0x30; // UAthenaAnimationUndoRepairDataAsset*
		constexpr auto SittingAsset = 0x38; // UAthenaAnimationSittingDataAsset*
		constexpr auto FallBackSittingData = 0x40; // TArray<FFallbackSittingDataAsset>
		constexpr auto UseCorrectionSittingDataAsset = 0x50; // bool
		constexpr auto WaterSlideDataAsset = 0x58; // UAthenaAnimationWaterSlideDataAsset*
		constexpr auto ItemListingAsset = 0x60; // UAthenaAnimationItemListingAsset*
	}

	namespace n_UAnimNotifyState_HideMeshByBoneForDuration { // : UAnimNotifyState
		constexpr auto BoneName = 0x28; // FName
	}

	namespace n_URevealerComponent { // : UActorComponent
		constexpr auto IsMultiplierActive = 0xd0; // bool
		constexpr auto VisibilityDistanceAddition = 0xd4; // float
		constexpr auto AnimationDistanceAddition = 0xd8; // float
		constexpr auto VisibilityAdditionChangeSpeed = 0xdc; // float
		constexpr auto RevealStartTime = 0xe0; // float
		constexpr auto TargetGameStateObject = 0xe8; // UObject*
	}

	namespace n_UCoordinatedKrakenPhaseActionsDataAsset { // : UDataAsset
		constexpr auto TentaclesUsed = 0x28; // TArray<int32_t>
		constexpr auto KrakenHeadUsed = 0x38; // bool
		constexpr auto Actions = 0x40; // TArray<FCoordinatedKrakenAction>
	}

	namespace n_UOpenRadialAction { // : URadialAction
		constexpr auto RadialContexts = 0x30; // TArray<FContextAction>
		constexpr auto CanExecuteRadial = 0x40; // URadialCreationRuleAsset*
	}

	namespace n_UCameraAnimInst { // : UObject
		constexpr auto CamAnim = 0x28; // UCameraAnim*
		constexpr auto InterpGroupInst = 0x30; // UInterpGroupInst*
		constexpr auto PlayRate = 0x54; // float
		constexpr auto MoveTrack = 0x68; // UInterpTrackMove*
		constexpr auto MoveInst = 0x70; // UInterpTrackInstMove*
		constexpr auto BlendInCurve = 0x78; // UCurveFloat*
		constexpr auto PlaySpace = 0x80; // ECameraAnimPlaySpace
	}

	namespace n_UPetPartSizeMappingsDataAsset { // : UDataAsset
		constexpr auto Mappings = 0x28; // TArray<FPetPartSizeMapping>
		constexpr auto ConcealedScaleBounds = 0x38; // FFloatRange
	}

	namespace n_UBTTask_NetworkTriggerAnim { // : UBTTaskNode
		constexpr auto Anim = 0x60; // UAnimSequence*
		constexpr auto AnimLength = 0x68; // float
		constexpr auto AnimPlayRate = 0x6c; // float
	}

	namespace n_UMaterialExpressionClamp { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto Min = 0xa8; // FExpressionInput
		constexpr auto Max = 0xe0; // FExpressionInput
		constexpr auto ClampMode = 0x118; // EClampMode
		constexpr auto MinDefault = 0x11c; // float
		constexpr auto MaxDefault = 0x120; // float
	}

	namespace n_ACosmeticItemActor { // : AActor
		constexpr auto MeshComponent = 0x3d8; // USkeletalMeshComponent*
	}

	namespace n_AShipFlagCustomizationChest { // : AShipCustomizationChest
		constexpr auto ParentActor = 0x578; // AActor*
	}

	namespace n_UParticleModuleParametersOverCustom { // : UParticleModuleParametersOverX
		constexpr auto DynamicParamScaleOverCustomScale = 0x68; // FRawDistributionFloat
		constexpr auto SpawnRateOverCustomScale = 0xa0; // FRawDistributionFloat
		constexpr auto LifetimeOverCustomScale = 0xd8; // FRawDistributionFloat
		constexpr auto SizeOverCustomScale = 0x110; // FRawDistributionFloat
		constexpr auto InitialVelocityOverCustomScale = 0x148; // FRawDistributionFloat
		constexpr auto OpacityOverCustomScale = 0x180; // FRawDistributionFloat
		constexpr auto CylinderRadiusOverCustomScale = 0x1b8; // FRawDistributionFloat
	}

	namespace n_UCheckIsActorCriticalStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UCheckIsActorCriticalStepDesc*
	}

	namespace n_UHitReactionComponent { // : UActorComponent
		constexpr auto OnServerProcessHitReaction = 0xd8; // FScriptMulticastDelegate
		constexpr auto OnClientProcessHitReaction = 0xe8; // FScriptMulticastDelegate
		constexpr auto ServerAuthoritiveReactions = 0xf8; // bool
	}

	namespace n_UPrimitiveComponent { // : USceneComponent
		constexpr auto MinDrawDistance = 0x2b8; // float
		constexpr auto LDMaxDrawDistance = 0x2c0; // float
		constexpr auto CachedMaxDrawDistance = 0x2c4; // float
		constexpr auto DepthPriorityGroup = 0x2c8; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x2c9; // ESceneDepthPriorityGroup
		constexpr auto bAlwaysCreatePhysicsState = 0x2cc; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x2cc; // char : 1
		constexpr auto bMultiBodyOverlap = 0x2cc; // char : 1
		constexpr auto bCheckAsyncSceneOnMove = 0x2cc; // char : 1
		constexpr auto bTraceComplexOnMove = 0x2cc; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x2cc; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x2cc; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x2cc; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x2cd; // char : 1
		constexpr auto bRenderInMainPass = 0x2cd; // char : 1
		constexpr auto bRenderInCustomPrePass = 0x2cd; // char : 1
		constexpr auto bReflected = 0x2cd; // char : 1
		constexpr auto bReflectedOnLowQuality = 0x2cd; // char : 1
		constexpr auto bFFTWaterMask = 0x2cd; // char : 1
		constexpr auto bVolumeFogMask = 0x2cd; // char : 1
		constexpr auto bAffectsFlatWater = 0x2ce; // char : 1
		constexpr auto bGPUParticlesKillPlane = 0x2ce; // char : 1
		constexpr auto bDontCull = 0x2ce; // char : 1
		constexpr auto bDontSizeOnScreenCull = 0x2ce; // char : 1
		constexpr auto OverriddenShadowMinTexelSize = 0x2d0; // float
		constexpr auto bOverrideShadowMinSizeCulling = 0x2d4; // bool
		constexpr auto bOverrideShadowCascadesExclusion = 0x2d5; // bool
		constexpr auto ExcludedShadowCascades = 0x2d6; // EExcludeFromCascades
		constexpr auto bReceivesDecals = 0x2d8; // char : 1
		constexpr auto bOwnerNoSee = 0x2d8; // char : 1
		constexpr auto bOnlyOwnerSee = 0x2d8; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x2d8; // char : 1
		constexpr auto bIsACloud = 0x2d8; // char : 1
		constexpr auto bUseAsOccluder = 0x2d8; // char : 1
		constexpr auto bSelectable = 0x2d8; // char : 1
		constexpr auto bForceMipStreaming = 0x2d8; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x2d9; // char : 1
		constexpr auto CastShadow = 0x2d9; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2d9; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x2d9; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x2d9; // char : 1
		constexpr auto bCastDynamicShadow = 0x2d9; // char : 1
		constexpr auto bCastStaticShadow = 0x2d9; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x2d9; // char : 1
		constexpr auto bSelfShadowOnly = 0x2da; // char : 1
		constexpr auto bCastFarShadow = 0x2da; // char : 1
		constexpr auto bCastInsetShadow = 0x2da; // char : 1
		constexpr auto bCastCinematicShadow = 0x2da; // char : 1
		constexpr auto bCastHiddenShadow = 0x2da; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x2da; // char : 1
		constexpr auto bCastShadowOnLowQuality = 0x2da; // char : 1
		constexpr auto bLightAsIfStatic = 0x2da; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x2db; // char : 1
		constexpr auto IndirectLightingCacheQuality = 0x2dc; // EIndirectLightingCacheQuality
		constexpr auto bHasCachedStaticLighting = 0x2dd; // bool
		constexpr auto bStaticLightingBuildEnqueued = 0x2de; // bool
		constexpr auto bIgnoreRadialImpulse = 0x2e0; // char : 1
		constexpr auto bIgnoreRadialForce = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x2e0; // char : 1
		constexpr auto bUseEditorCompositing = 0x2e0; // char : 1
		constexpr auto bRenderCustomDepth = 0x2e0; // char : 1
		constexpr auto bAllowVelocityInMaterial = 0x2e0; // char : 1
		constexpr auto CustomDepthStencilValue = 0x2e4; // int32_t
		constexpr auto TranslucencySortPriority = 0x2e8; // int32_t
		constexpr auto VisibilityId = 0x2ec; // int32_t
		constexpr auto LpvBiasMultiplier = 0x2f4; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x2f8; // float
		constexpr auto LpvIntensityMultiplier = 0x2fc; // float
		constexpr auto CustomPrimitiveData = 0x300; // FCustomPrimitiveData
		constexpr auto BodyInstance = 0x310; // FBodyInstance
		constexpr auto bAffectRain = 0x490; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x490; // char : 1
		constexpr auto bSkipRenderingInOuterLPVCascades = 0x490; // char : 1
		constexpr auto bEnableMergeCollisionComponents = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerUnderwater = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerUnderwater = 0x491; // char : 1
		constexpr auto bCanRenderAboveAndBelowWaterAtSameTime = 0x491; // char : 1
		constexpr auto BoundsScale = 0x498; // float
		constexpr auto OcclusionBoundsScale = 0x49c; // float
		constexpr auto LastRenderTime = 0x4a0; // float
		constexpr auto bGPUVisibility = 0x4a4; // bool
		constexpr auto bHasCustomNavigableGeometry = 0x4a5; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x4a6; // ECanBeCharacterBase
		constexpr auto OnComponentHit = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnComponentBeginOverlap = 0x4f1; // FScriptMulticastDelegate
		constexpr auto OnComponentEndOverlap = 0x4f2; // FScriptMulticastDelegate
		constexpr auto OnComponentWake = 0x4f3; // FScriptMulticastDelegate
		constexpr auto OnComponentSleep = 0x4f4; // FScriptMulticastDelegate
		constexpr auto LODParentPrimitive = 0x528; // UPrimitiveComponent*
		constexpr auto PostPhysicsComponentTick = 0x530; // FPrimitiveComponentPostPhysicsTickFunction
		constexpr auto MergedCollisionComponentParent = 0x580; // UPrimitiveComponent*
	}

	namespace n_UCharacterMovementAINoiseEventComponentParams { // : UDataAsset
		constexpr auto MovementTag = 0x28; // FName
		constexpr auto WalkingSpeedToNoiseRange = 0x30; // UCurveFloat*
		constexpr auto CrouchedWalkingNoiseRange = 0x38; // float
		constexpr auto MovingInWaterNoiseRange = 0x3c; // float
		constexpr auto JumpNoiseRange = 0x40; // float
		constexpr auto LandNoiseRange = 0x44; // float
		constexpr auto MinSpeedToTriggerLandedEvent = 0x48; // float
	}

	namespace n_UXPReward { // : UReward
		constexpr auto Xp = 0x28; // uint32_t
	}

	namespace n_UDelayStepDesc { // : UTaleQuestStepDesc
		constexpr auto Delay = 0x80; // float
	}

	namespace n_ADecalActor { // : AActor
		constexpr auto Decal = 0x3d0; // UDecalComponent*
	}

	namespace n_UIslandFrameworkSettings { // : UDeveloperSettings
		constexpr auto IslandTypeStateGroup = 0x38; // FName
		constexpr auto IslandDataFileLocation = 0x40; // FStringAssetReference
		constexpr auto SurfaceUpperBound = 0x50; // float
		constexpr auto SurfaceLowerBound = 0x54; // float
		constexpr auto TreasuryAwarenessProximity = 0x58; // float
	}

	namespace n_UAnimationSwitchDataAsset { // : UDataAsset
		constexpr auto Threshold = 0x28; // float
		constexpr auto Entries = 0x30; // TArray<FAnimationSwitchEntry>
	}

	namespace n_UShovelSurfaceHoleDataAsset { // : UDataAsset
		constexpr auto SurfaceDigHoleClass = 0x28; // TArray<FSurfaceDigHole>
	}

	namespace n_UGameplayCueManager { // : UDataAsset
		constexpr auto GlobalCueSet = 0x28; // UGameplayCueSet*
		constexpr auto GameplayCueNotifyActorObjectLibrary = 0x30; // UObjectLibrary*
		constexpr auto GameplayCueNotifyStaticObjectLibrary = 0x38; // UObjectLibrary*
		constexpr auto StreamableManager = 0x40; // FStreamableManager
		constexpr auto PendingExecuteCues = 0x160; // TArray<FGameplayCuePendingExecute>
		constexpr auto GameplayCueSendContextCount = 0x170; // int32_t
	}

	namespace n_UAnimNotify_ToggleIK { // : UAnimNotify
		constexpr auto IKLimbsToAdjust = 0x38; // TArray<ECharacterIKLimb>
		constexpr auto Enabled = 0x48; // bool
	}

	namespace n_UMaterialExpressionMax { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto ConstA = 0xe0; // float
		constexpr auto ConstB = 0xe4; // float
	}

	namespace n_UGlobalVoyageDirectorServiceSettings { // : UDeveloperSettings
		constexpr auto DefaultGlobalVoyages = 0x38; // TArray<FDirectorSettingEntry>
	}

	namespace n_UShipwreckAudioEmitterComponent { // : UWwiseEmitterComponent
		constexpr auto WwiseEvent = 0x2e0; // UWwiseEvent*
	}

	namespace n_AGameMode { // : AInfo
		constexpr auto bDisableAsyncOcclusionChecking = 0x3d8; // char : 1
		constexpr auto bUseSeamlessTravel = 0x3d8; // char : 1
		constexpr auto bPauseable = 0x3d8; // char : 1
		constexpr auto bStartPlayersAsSpectators = 0x3d8; // char : 1
		constexpr auto bDelayedStart = 0x3d8; // char : 1
		constexpr auto OptionsString = 0x3e0; // FString
		constexpr auto DefaultPawnClass = 0x3f0; // APawn*
		constexpr auto HUDClass = 0x3f8; // AHUD*
		constexpr auto NumSpectators = 0x400; // int32_t
		constexpr auto NumPlayers = 0x404; // int32_t
		constexpr auto NumBots = 0x408; // int32_t
		constexpr auto MinRespawnDelay = 0x40c; // float
		constexpr auto GameSession = 0x410; // AGameSession*
		constexpr auto NumTravellingPlayers = 0x418; // int32_t
		constexpr auto DefaultPlayerName = 0x420; // FText
		constexpr auto EngineMessageClass = 0x458; // ULocalMessage*
		constexpr auto PlayerControllerClass = 0x460; // APlayerController*
		constexpr auto SpectatorClass = 0x468; // ASpectatorPawn*
		constexpr auto ReplaySpectatorPlayerControllerClass = 0x470; // APlayerController*
		constexpr auto PlayerStateClass = 0x478; // APlayerState*
		constexpr auto GameStateClass = 0x480; // AGameState*
		constexpr auto GameState = 0x488; // AGameState*
		constexpr auto InactivePlayerArray = 0x490; // TArray<APlayerState*>
		constexpr auto GameModeClassAliases = 0x4b0; // TArray<FGameClassShortName>
		constexpr auto InactivePlayerStateLifeSpan = 0x4c0; // float
		constexpr auto bHandleDedicatedServerReplays = 0x4c4; // bool
	}

	namespace n_USpawnBarrelsOfPlentyStepDesc { // : UTaleQuestStepDesc
		constexpr auto LocatorVar = 0x80; // FQuestVariableVector
	}

	namespace n_UWwiseDDSEvent { // : UWwiseEvent
		constexpr auto DDSArgumentsGroupsIDs = 0x50; // TArray<uint32_t>
	}

	namespace n_UVomitBoutData { // : UDataAsset
		constexpr auto MinTimeBetweenSpews = 0x28; // float
		constexpr auto MaxTimeBetweenSpews = 0x2c; // float
		constexpr auto MinSpewDuration = 0x30; // float
		constexpr auto MaxSpewDuration = 0x34; // float
	}

	namespace n_UAthenaAIControllerParamsDataAsset { // : UDataAsset
		constexpr auto DefaultSenseSettings = 0x28; // FAthenaAIControllerSenseSettings
		constexpr auto AutoSuccessRangeFromLastSeenLocation = 0x3c; // float
		constexpr auto DefaultPerceivedNotVisibleAge = 0x40; // float
		constexpr auto OverrideTeamID = 0x44; // bool
		constexpr auto TeamID = 0x45; // EAthenaAITeam
		constexpr auto TargetSwitchScoreTolerance = 0x48; // float
		constexpr auto TargetLoadWeightingBias = 0x50; // TArray<float>
		constexpr auto DistanceToStartTargetPickingDecrease = 0x60; // float
		constexpr auto TargetPickingDistScoreAtMaxSightRange = 0x64; // float
		constexpr auto VisionAngleToStartTargetPickingDecrease = 0x68; // float
		constexpr auto TargetPickingFacingScoreAtMaxPeripheralVisionAngle = 0x6c; // float
		constexpr auto UseDamageAsFactorInTargetScore = 0x70; // bool
		constexpr auto DamageTargetScores = 0x74; // FAthenaAIControllerDamageTargetScoreFromPerceivedTarget
		constexpr auto SharedParamValues = 0x88; // TArray<UAthenaAIControllerSharedParamValuesDataAsset*>
		constexpr auto IndividualOverrideMeshScale = 0x98; // bool
		constexpr auto IndividualMeshScale = 0x9c; // float
		constexpr auto IndividualHealthCustomisationValues = 0xa0; // FAthenaAIControllerHealthCustomisation
		constexpr auto IndividualInitialBlackboardValues = 0xb0; // TArray<FAthenaAIControllerParamValue>
		constexpr auto IndividualNamedControllerParams = 0xc0; // TArray<FAthenaAIControllerParamValue>
		constexpr auto IndividualNamedWeightedRangesControllerParams = 0xd0; // TArray<FAthenaAIControllerWeightedRangesParamValue>
		constexpr auto IndividualAIStrategySenseSettingOverrides = 0xe0; // TArray<FAthenaAIControllerSenseSettingOverride>
		constexpr auto IndividualOverrideCurrentTargetPerceivedNotVisibleAge = 0xf0; // bool
		constexpr auto IndividualCurrentTargetPerceivedNotVisibleAge = 0xf4; // float
		constexpr auto FeatureName = 0xf8; // FName
	}

	namespace n_UDeliverableRedirectionNPCDestinationDescriptor { // : UDeliverableRedirectionDestinationDescriptorBase
		constexpr auto DisplayNameType = 0x28; // ENPCDisplayNameType
		constexpr auto FemaleNPCDestination = 0x30; // FText
		constexpr auto MaleNPCDestination = 0x68; // FText
	}

	namespace n_UInterpTrackFloatAnimBPParam { // : UInterpTrackFloatBase
		constexpr auto AnimBlueprintClass = 0x90; // UObject*
		constexpr auto ParamName = 0x98; // FName
	}

	namespace n_UGetCurrentLocationDataStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UGetCurrentLocationDataStepDesc*
	}

	namespace n_AGlobalEmitterService { // : AActor
		constexpr auto ImpactListDataAsset = 0x3e8; // UImpactListDataAsset*
	}

	namespace n_ULastHealthChangeReasonStatCondition { // : UStatCondition
		constexpr auto LastHealthChangeReason = 0x28; // EHealthChangedReason
	}

	namespace n_UTableViewBase { // : UWidget
		constexpr auto bIsVariable = 0x28; // bool
		constexpr auto bCreatedByConstructionScript = 0x29; // bool
		constexpr auto Slot = 0x30; // UPanelSlot*
		constexpr auto bIsEnabled = 0x38; // bool
		constexpr auto bIsEnabledDelegate = 0x3c; // DelegateProperty
		constexpr auto ToolTipText = 0x50; // FText
		constexpr auto ToolTipTextDelegate = 0x88; // DelegateProperty
		constexpr auto ToolTipWidget = 0x98; // UWidget*
		constexpr auto ToolTipWidgetDelegate = 0xa0; // DelegateProperty
		constexpr auto Visiblity = 0xb0; // ESlateVisibility
		constexpr auto Visibility = 0xb1; // ESlateVisibility
		constexpr auto VisibilityDelegate = 0xb4; // DelegateProperty
		constexpr auto bOverride_Cursor = 0xc4; // char : 1
		constexpr auto Cursor = 0xc8; // EMouseCursor
		constexpr auto bIsVolatile = 0xc9; // bool
		constexpr auto RenderTransform = 0xcc; // FWidgetTransform
		constexpr auto RenderTransformPivot = 0xe8; // FVector2D
		constexpr auto Navigation = 0xf0; // UWidgetNavigation*
		constexpr auto NativeBindings = 0x128; // TArray<UPropertyBinding*>
	}

	namespace n_UNavLinkCustomComponent { // : UNavRelevantComponent
		constexpr auto NavLinkUserId = 0x100; // uint32_t
		constexpr auto EnabledAreaClass = 0x108; // UNavArea*
		constexpr auto DisabledAreaClass = 0x110; // UNavArea*
		constexpr auto LinkRelativeStart = 0x118; // FVector
		constexpr auto LinkRelativeEnd = 0x124; // FVector
		constexpr auto LinkDirection = 0x130; // ENavLinkDirection
		constexpr auto bLinkEnabled = 0x134; // char : 1
		constexpr auto bNotifyWhenEnabled = 0x134; // char : 1
		constexpr auto bNotifyWhenDisabled = 0x134; // char : 1
		constexpr auto bCreateBoxObstacle = 0x134; // char : 1
		constexpr auto ObstacleOffset = 0x138; // FVector
		constexpr auto ObstacleExtent = 0x144; // FVector
		constexpr auto ObstacleAreaClass = 0x150; // UNavArea*
		constexpr auto BroadcastRadius = 0x158; // float
		constexpr auto BroadcastInterval = 0x15c; // float
		constexpr auto BroadcastChannel = 0x160; // ECollisionChannel
	}

	namespace n_APetCageSwitchMechanismTrigger { // : ASwitchMechanismTrigger
		constexpr auto LinkedPerchHangoutId = 0x558; // FHangoutSpotId
	}

	namespace n_UEnvQueryTest_SeaClueSpawnLocation { // : UEnvQueryTest
		constexpr auto MinProjectionDistance = 0x170; // float
		constexpr auto MaxProjectionDistance = 0x174; // float
		constexpr auto ProjectionAngleInDegrees = 0x178; // float
		constexpr auto IslandProximitySafeThreshold = 0x17c; // float
		constexpr auto ContextSourcePoint = 0x180; // UEnvQueryContext*
		constexpr auto ContextProjectionPoint = 0x188; // UEnvQueryContext*
	}

	namespace n_ARiggingSystem { // : AActor
		constexpr auto Root = 0x3d8; // USceneComponent*
		constexpr auto InstancedRopes = 0x3e0; // UInstancedRopeComponent*
		constexpr auto Lines = 0x3e8; // TArray<FRiggingSystemLine>
		constexpr auto Ropes = 0x3f8; // TArray<FInstancedRopeParams>
		constexpr auto PulleyInstances = 0x408; // TArray<UMobileInstancedStaticMeshComponent*>
		constexpr auto Pulleys = 0x418; // FRiggingSystemPulleyData
		constexpr auto Sockets = 0x478; // TArray<FSocketId>
		constexpr auto InitialMainRopeLengths = 0x488; // TArray<float>
	}

	namespace n_UDataTable { // : UObject
		constexpr auto RowStruct = 0x28; // UScriptStruct*
	}

	namespace n_UParticleModuleAccelerationDragScaleOverLife { // : UParticleModuleAccelerationBase
		constexpr auto DragScale = 0x58; // UDistributionFloat*
		constexpr auto DragLocalVelocityScale = 0x60; // UDistributionFloat*
	}

	namespace n_UTradeRouteDifficultyBand { // : UObject
		constexpr auto MinimumRank = 0x28; // int32_t
	}

	namespace n_UContestMerchantSpawnerComponent { // : UActorComponent
		constexpr auto SpawnedMerchantsArray = 0xf8; // TArray<ACompanyShopkeeper*>
		constexpr auto MerchantSpawnDataArray = 0x108; // TArray<FMerchantSpawnData>
	}

	namespace n_UTaleQuestNotificationUsingVariableStepDesc { // : UTaleQuestStepDesc
		constexpr auto NotificationDesc = 0x80; // FQuestVariableNotificationDesc
		constexpr auto PreventNotificationForPlayer = 0x90; // FQuestVariablePlayerActor
		constexpr auto Player = 0xa0; // FQuestVariablePlayerActor
	}

	namespace n_UStorageContainerSpawnerWeightedItemList { // : UStorageContainerSpawnerItemListBase
		constexpr auto Entries = 0x28; // TArray<FStorageContainerWeightedItemListEntry>
	}

	namespace n_UHapticFeedbackEffect { // : UObject
		constexpr auto HapticDetails = 0x28; // FHapticFeedbackDetails
	}

	namespace n_UBTService_SetBoolBlackboardValueToTrueOnCeaseRelevant { // : UBTService
		constexpr auto BoolValueKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UAthenaPlayerCharacterMovementComponent { // : UAthenaCharacterMovementComponent
		constexpr auto LandingSpeedToFallDamageCurve = 0x800; // UCurveFloat*
		constexpr auto MinFallSpeedToPossiblyCauseDamage = 0x808; // float
		constexpr auto MinTimeBetweenDamagingImpactsOnUnwalkableSurface = 0x80c; // float
		constexpr auto MinFallDamageToBreakLeg = 0x810; // float
		constexpr auto FiredFromActorFallDamageScalar = 0x814; // float
		constexpr auto TimeUntilRecoverFallDamageAudioState = 0x818; // float
		constexpr auto FallDamageLimpingStatus = 0x820; // FStatus
		constexpr auto SwimmingStateFilterTime = 0x838; // float
		constexpr auto MaxSpeedToleranceForPreventingJumping = 0x83c; // float
	}

	namespace n_UTeleportAIAbility { // : UAthenaAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_AHarpoonProjectile { // : ALaunchableProjectile
		constexpr auto ReplicatedTransformState = 0x610; // FReplicatedTransformState
		constexpr auto NetMovementTimeStamp = 0x640; // FNetTimeStampCalculator
		constexpr auto CollisionComponent = 0x6d0; // UShapeComponent*
		constexpr auto MeshComponent = 0x6d8; // UStaticMeshComponent*
		constexpr auto HarpoonRenderComponent = 0x6e0; // UHarpoonRenderComponent*
		constexpr auto MovementBase = 0x6e8; // USceneComponent*
		constexpr auto TetherAttachSocketName = 0x708; // FName
		constexpr auto DamageAmount = 0x718; // float
		constexpr auto ProjectileState = 0x71c; // EHarpoonProjectileState
	}

	namespace n_ANavigationTestingActor { // : AActor
		constexpr auto CapsuleComponent = 0x3e0; // UCapsuleComponent*
		constexpr auto InvokerComponent = 0x3e8; // UNavigationInvokerComponent*
		constexpr auto bActAsNavigationInvoker = 0x3f0; // char : 1
		constexpr auto NavAgentProps = 0x3f4; // FNavAgentProperties
		constexpr auto QueryingExtent = 0x424; // FVector
		constexpr auto MyNavData = 0x430; // ANavigationData*
		constexpr auto ProjectedLocation = 0x438; // FVector
		constexpr auto bProjectedLocationValid = 0x444; // char : 1
		constexpr auto bSearchStart = 0x444; // char : 1
		constexpr auto bUseHierarchicalPathfinding = 0x444; // char : 1
		constexpr auto bGatherDetailedInfo = 0x444; // char : 1
		constexpr auto bShowNodePool = 0x444; // char : 1
		constexpr auto bShowBestPath = 0x444; // char : 1
		constexpr auto bShowDiffWithPreviousStep = 0x444; // char : 1
		constexpr auto bShouldBeVisibleInGame = 0x444; // char : 1
		constexpr auto CostDisplayMode = 0x448; // ENavCostDisplay
		constexpr auto TextCanvasOffset = 0x44c; // FVector2D
		constexpr auto bPathExist = 0x454; // char : 1
		constexpr auto bPathIsPartial = 0x454; // char : 1
		constexpr auto bPathSearchOutOfNodes = 0x454; // char : 1
		constexpr auto PathfindingTime = 0x458; // float
		constexpr auto PathCost = 0x45c; // float
		constexpr auto PathfindingSteps = 0x460; // int32_t
		constexpr auto OtherActor = 0x468; // ANavigationTestingActor*
		constexpr auto FilterClass = 0x470; // UNavigationQueryFilter*
		constexpr auto ShowStepIndex = 0x478; // int32_t
		constexpr auto OffsetFromCornersDistance = 0x47c; // float
	}

	namespace n_UWaitForVaultCompletionStepDesc { // : UTaleQuestStepDesc
		constexpr auto Vault = 0x80; // FQuestVariableActor
		constexpr auto VaultFailureMessage = 0x90; // FText
	}

	namespace n_UFragileComponent { // : UActorComponent
		constexpr auto FragileComponentDataAsset = 0xc8; // UFragileComponentDataAsset*
	}

	namespace n_UBattleElevatorEventRoomHeightReachedPolicy { // : UBattleElevatorEventRoomBasePolicy
		constexpr auto TargetHeightPercentage = 0x28; // float
	}

	namespace n_UCommodityItemDesc { // : UBootyItemDesc
		constexpr auto CommodityType = 0x130; // FCommoditySelectionType
		constexpr auto CommodityDemand = 0x138; // ECommodityDemand
	}

	namespace n_UStartEmissaryVoyageInlineVoteConsumer { // : UEmissaryVoyageInlineVoteConsumerBase
		constexpr auto EmissaryVotingCastVote = 0x128; // FText
		constexpr auto EmissaryVotingCantVote = 0x160; // FText
		constexpr auto EmissaryVotingCantVoteReasonCrewShipOutsideRange = 0x198; // FText
		constexpr auto EmissaryVotingCantVoteReasonNoEmissaryEntitlement = 0x1d0; // FText
		constexpr auto EmissaryVotingCantVoteReasonHasActiveVoteForDifferentCompany = 0x208; // FText
		constexpr auto EmissaryVotingRemoveVote = 0x240; // FText
		constexpr auto EmissaryVotingCantRemoveVote = 0x278; // FText
	}

	namespace n_UGlitterBeardIsHideoutOpenConditional { // : UNPCDialogConditional
		constexpr auto ConditionalExpected = 0x28; // bool
	}

	namespace n_UQuestBookSinglePageLayout { // : UQuestBookPageLayout
		constexpr auto Images = 0x28; // TArray<FTreasureMapWidgetTexture>
		constexpr auto GeneralText = 0x38; // TArray<FTreasureMapWidgetLocalisedTextWithFontOverride>
	}

	namespace n_UTaleQuestSpawnAIDioramaStepDesc { // : UTaleQuestSpawnAIStepDesc
		constexpr auto AIDioramaDescAsset = 0x180; // FQuestVariableAIDioramaDesc
	}

	namespace n_UInterpTrackLinearColorProp { // : UInterpTrackLinearColorBase
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_UTunnelsOfTheDamnedServiceParams { // : UDataAsset
		constexpr auto TunnelClasses = 0x28; // TArray<FTunnelOfTheDamnedClass>
	}

	namespace n_UAIWeightedProbabilityRangeOfRangesAsset { // : UDataAsset
		constexpr auto RespawnChance = 0x28; // float
		constexpr auto RespawnTimerRanges = 0x30; // FWeightedProbabilityRangeOfRanges
		constexpr auto FeatureName = 0x60; // FName
	}

	namespace n_URetractableComponent { // : UActorComponent
		constexpr auto FeatureToggle = 0xf0; // FName
		constexpr auto OrientationAdjustmentOnRetractFlags = 0xf8; // FRetractorOrientationAdjustmentFlags
		constexpr auto RetractorBoxAxis = 0xfb; // EAxis
		constexpr auto ShouldAutoReleaseOnSuccessfulRetract = 0xfc; // bool
		constexpr auto MigrateAttachedWithRetractor = 0xfd; // bool
		constexpr auto WasSimulatingPhysicsBeforeRetract = 0xfe; // bool
	}

	namespace n_UArenaWorldMarker { // : UBaseWorldMarker
		constexpr auto MarkerVelocity = 0x40; // FVector_NetQuantize
		constexpr auto AttachType = 0x4c; // ERomeBeaconAttachType
		constexpr auto TrackedLocationOwner = 0x50; // AActor*
		constexpr auto TrackedVelocityOwner = 0x58; // AActor*
	}

	namespace n_UTreasureMapItemDesc { // : UItemWithoutIconsDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_UMovieSceneCameraShakeSection { // : UMovieSceneSection
		constexpr auto ShakeData = 0x98; // FMovieSceneCameraShakeSectionData
		constexpr auto ShakeClass = 0xb8; // UCameraShake*
		constexpr auto PlayScale = 0xc0; // float
		constexpr auto PlaySpace = 0xc4; // ECameraAnimPlaySpace
		constexpr auto UserDefinedPlaySpace = 0xc8; // FRotator
	}

	namespace n_UInterpTrackInstEvent { // : UInterpTrackInst
		constexpr auto LastUpdatePosition = 0x28; // float
	}

	namespace n_ATreasureVaultTable { // : AInteractableBase
		constexpr auto VaultKeyMapping = 0x3f8; // UVaultKeyMappingDataAsset*
	}

	namespace n_USlateWidgetStyleAsset { // : UObject
		constexpr auto CustomStyle = 0x28; // USlateWidgetStyleContainerBase*
	}

	namespace n_UConnectionCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_ULandscapeComponent { // : UPrimitiveComponent
		constexpr auto SectionBaseX = 0x588; // int32_t
		constexpr auto SectionBaseY = 0x58c; // int32_t
		constexpr auto ComponentSizeQuads = 0x590; // int32_t
		constexpr auto SubsectionSizeQuads = 0x594; // int32_t
		constexpr auto NumSubsections = 0x598; // int32_t
		constexpr auto OverrideMaterial = 0x5a0; // UMaterialInterface*
		constexpr auto OverrideHoleMaterial = 0x5a8; // UMaterialInterface*
		constexpr auto MaterialInstance = 0x5b0; // UMaterialInstanceConstant*
		constexpr auto WeightmapLayerAllocations = 0x5b8; // TArray<FWeightmapLayerAllocationInfo>
		constexpr auto WeightmapTextures = 0x5c8; // TArray<UTexture2D*>
		constexpr auto XYOffsetmapTexture = 0x5d8; // UTexture2D*
		constexpr auto WeightmapScaleBias = 0x5e0; // FVector4
		constexpr auto WeightmapSubsectionOffset = 0x5f0; // float
		constexpr auto HeightmapScaleBias = 0x600; // FVector4
		constexpr auto HeightmapTexture = 0x610; // UTexture2D*
		constexpr auto CachedLocalBox = 0x618; // FBox
		constexpr auto CollisionComponent = 0x634; // ULandscapeHeightfieldCollisionComponent*
		constexpr auto IrrelevantLights = 0x650; // TArray<FGuid>
		constexpr auto CollisionMipLevel = 0x670; // int32_t
		constexpr auto StaticLightingResolution = 0x674; // float
		constexpr auto ForcedLOD = 0x678; // int32_t
		constexpr auto LODBias = 0x67c; // int32_t
		constexpr auto StateId = 0x680; // FGuid
		constexpr auto BakedTextureMaterialGuid = 0x690; // FGuid
		constexpr auto GIBakedBaseColorTexture = 0x6a0; // UTexture2D*
		constexpr auto MobileBlendableLayerMask = 0x6a8; // char
		constexpr auto MobileMaterialInterface = 0x6b0; // UMaterialInterface*
		constexpr auto MobileWeightNormalmapTexture = 0x6b8; // UTexture2D*
	}

	namespace n_USoundNodeMixer { // : USoundNode
		constexpr auto InputVolume = 0x38; // TArray<float>
	}

	namespace n_UNavAreaMeta_SwitchByAgent { // : UNavAreaMeta
		constexpr auto Agent0Area = 0x40; // UNavArea*
		constexpr auto Agent1Area = 0x48; // UNavArea*
		constexpr auto Agent2Area = 0x50; // UNavArea*
		constexpr auto Agent3Area = 0x58; // UNavArea*
		constexpr auto Agent4Area = 0x60; // UNavArea*
		constexpr auto Agent5Area = 0x68; // UNavArea*
		constexpr auto Agent6Area = 0x70; // UNavArea*
		constexpr auto Agent7Area = 0x78; // UNavArea*
		constexpr auto Agent8Area = 0x80; // UNavArea*
		constexpr auto Agent9Area = 0x88; // UNavArea*
		constexpr auto Agent10Area = 0x90; // UNavArea*
		constexpr auto Agent11Area = 0x98; // UNavArea*
		constexpr auto Agent12Area = 0xa0; // UNavArea*
		constexpr auto Agent13Area = 0xa8; // UNavArea*
		constexpr auto Agent14Area = 0xb0; // UNavArea*
		constexpr auto Agent15Area = 0xb8; // UNavArea*
	}

	namespace n_UNPCDialogHeaderByCondition { // : UNPCDialogHeader
		constexpr auto Text = 0x28; // TArray<FNPCDialogHeaderByConditionText>
		constexpr auto DefaultText = 0x38; // FText
	}

	namespace n_UCallObjectFunctionStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UDestroySpawnedActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto ActorVar = 0x80; // FQuestVariableActor
	}

	namespace n_UCharacterPossessedEventTestComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USetEQSNamedContextStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // USetEQSNamedContextStepDesc*
	}

	namespace n_UParticleModuleTrailBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UTaleQuestFlameOfFateService { // : UTaleQuestService
		constexpr auto ServiceDesc = 0x60; // UTaleQuestFlameOfFateServiceDesc*
	}

	namespace n_ADefaultPawn { // : APawn
		constexpr auto BaseTurnRate = 0x448; // float
		constexpr auto BaseLookUpRate = 0x44c; // float
		constexpr auto MovementComponent = 0x450; // UPawnMovementComponent*
		constexpr auto CollisionComponent = 0x458; // USphereComponent*
		constexpr auto MeshComponent = 0x460; // UStaticMeshComponent*
		constexpr auto bAddDefaultMovementBindings = 0x468; // char : 1
	}

	namespace n_AFrontendHUD { // : ACoherentBaseHUD
		constexpr auto ObjectMessagingDispatcher = 0x4e8; // FObjectMessagingDispatcher
		constexpr auto FrontendHudComponent = 0x588; // UFrontendHudComponent*
		constexpr auto FrontendTelemetryComponent = 0x590; // UUITelemetryComponent*
		constexpr auto InputForwardComponent = 0x598; // UUIInputForwardComponent*
		constexpr auto FrontendCameraComponent = 0x5a0; // UFrontendCameraComponent*
		constexpr auto PirateSelectorComponent = 0x5a8; // UPirateSelector*
		constexpr auto PremiumShopViewModelComponent = 0x5b0; // UFrontendPremiumShopViewModelComponent*
		constexpr auto PiratePreviewComponent = 0x5b8; // UPiratePreviewComponentFrontend*
		constexpr auto ItemPreviewComponent = 0x5c0; // UItemPreviewComponent*
		constexpr auto HttpClientComponent = 0x5c8; // UHttpClientComponent*
		constexpr auto CoherentToWwiseEventComponent = 0x5d0; // UCoherentToWwiseEventComponent*
		constexpr auto PressAnyButtonSFX = 0x5d8; // UWwiseEvent*
	}

	namespace n_UShantyRadialContentRule { // : URadialContentRule
		constexpr auto CachedShanties = 0xa0; // TArray<UShantyItemDesc*>
		constexpr auto ShuffleTitle = 0xb0; // FText
		constexpr auto ShuffleIcon = 0xe8; // FStringAssetReference
		constexpr auto ShuffleBackground = 0xf8; // FStringAssetReference
		constexpr auto RemappingDataAsset = 0x108; // UShantyItemDescToSlotRemappingDataAsset*
	}

	namespace n_UAISpawnWaveSequence { // : UDataAsset
		constexpr auto Waves = 0x28; // TArray<FAISpawnerWave>
		constexpr auto FeatureName = 0x38; // FName
	}

	namespace n_UNetworkTriggeredVFXComponent { // : UActorComponent
		constexpr auto NetworkTriggerableVFX = 0xc8; // TArray<UObject*>
		constexpr auto CurrentlyPlayingParticleSystem = 0xd8; // UParticleSystemComponent*
	}

	namespace n_UStandardAnchorDynamicsDesc { // : UBaseAnchorDynamicsDesc
		constexpr auto Parameters = 0x28; // FStandardAnchorDynamicsParameters
	}

	namespace n_UNPCDialogNotExpression { // : UNPCDialogUnaryExpression
		constexpr auto Child = 0x28; // UNPCDialogExpression*
	}

	namespace n_ADocumentationActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_URatManagerComponentDataAsset { // : UDataAsset
		constexpr auto TurnBlendInOutPercentage = 0x28; // float
		constexpr auto NumPseudoRandomValues = 0x2c; // int32_t
		constexpr auto FixedSeed = 0x30; // int32_t
		constexpr auto RatEmitterOffset = 0x34; // FVector
		constexpr auto StartRatSounds = 0x40; // UWwiseEvent*
		constexpr auto StopRatSounds = 0x48; // UWwiseEvent*
		constexpr auto AudioPool = 0x50; // UWwiseObjectPoolWrapper*
		constexpr auto MaxNumShipsToDisplayRatsOn = 0x58; // int32_t
		constexpr auto RatScale = 0x60; // FWeightedProbabilityRangeOfRanges
		constexpr auto RatInfestationLevels = 0x90; // TArray<FRatManagerRatInfestationLevel>
	}

	namespace n_UTaleQuestAddMerchantMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTaleQuestNPCBeckonCrewStepDesc { // : UTaleQuestStepDesc
		constexpr auto BeckonTag = 0x80; // FString
	}

	namespace n_USpyglassItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UContestModuleSettingsDataAsset { // : UDataAsset
		constexpr auto ArenaRowboatClass = 0x28; // AActor*
	}

	namespace n_AStaticMerchantCrate { // : ALargeStaticMeshWieldableItem
		constexpr auto RewindComponent = 0x790; // URewindComponent*
		constexpr auto FullCrateSfx = 0x798; // FMerchantCrateSfx
		constexpr auto MountpointInterface = 0x7b8; // TScriptInterface<Class>
		constexpr auto RequiresRewindComponent = 0x7d8; // bool
	}

	namespace n_AMerchantCrateItemInfoMock { // : AMerchantCrateItemInfo
		constexpr auto FaunaBreedRarity = 0x710; // TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry>
		constexpr auto CurrentShip = 0x778; // AActor*
	}

	namespace n_UAutomationTestSettings { // : UObject
		constexpr auto AutomationTestmap = 0x28; // FFilePath
		constexpr auto EditorPerformanceTestMaps = 0x38; // TArray<FEditorMapPerformanceTestDefinition>
		constexpr auto BuildPromotionTest = 0x48; // FBuildPromotionTestSettings
		constexpr auto MaterialEditorPromotionTest = 0x258; // FMaterialEditorPromotionSettings
		constexpr auto ParticleEditorPromotionTest = 0x288; // FParticleEditorPromotionSettings
		constexpr auto EngineTestModules = 0x298; // TArray<FString>
		constexpr auto EditorTestModules = 0x2a8; // TArray<FString>
		constexpr auto TestLevelFolders = 0x2b8; // TArray<FString>
		constexpr auto TestAssetsToOpen = 0x2c8; // TArray<FOpenTestAsset>
		constexpr auto ExternalTools = 0x2d8; // TArray<FExternalToolDefinition>
		constexpr auto ImportExportTestDefinitions = 0x2e8; // TArray<FEditorImportExportTestDefinition>
		constexpr auto LaunchOnSettings = 0x2f8; // TArray<FLaunchOnTestSettings>
	}

	namespace n_UTaleQuestSpawnLootItemInClueSiteStepDesc { // : UTaleQuestStepDesc
		constexpr auto LootItem = 0x80; // FQuestVariableClass
		constexpr auto ClueSite = 0x90; // FQuestVariableClueSite
		constexpr auto SpawnedLootItem = 0xa0; // FQuestVariableItemInfo
		constexpr auto Tracked = 0xb0; // bool
	}

	namespace n_AActorThatLogsErrorWhenTicked { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_ADamageableCargoRunCrate { // : ACargoRunCrate
		constexpr auto GatedHealthComponent = 0x7c8; // UGatedHealthComponent*
		constexpr auto VisualHealthResponseComponent = 0x7d0; // UVisualHealthResponseComponent*
	}

	namespace n_UBTTask_RotateToFaceBBEntryWithTime { // : UBTTask_RotateToFaceBBEntry
		constexpr auto Delay = 0x90; // float
		constexpr auto RotationTime = 0x94; // float
	}

	namespace n_UMovieSceneCinematicShotTrack { // : UMovieSceneSubTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_URotatingMovementComponent { // : UMovementComponent
		constexpr auto RotationRate = 0x110; // FRotator
		constexpr auto PivotTranslation = 0x11c; // FVector
		constexpr auto bRotationInLocalSpace = 0x128; // char : 1
	}

	namespace n_UPrioritisedPromptsManager { // : UObject
		constexpr auto AllPrompts = 0x28; // TArray<FPrioritisedPromptWithHandle>
		constexpr auto PlayerController = 0x38; // APlayerController*
	}

	namespace n_UBTDecorator_IsAbilityAvailable { // : UBTDecorator
		constexpr auto AIAbilityType = 0x68; // UAthenaAIAbilityType*
	}

	namespace n_UParticleModuleLocationEmitterDirect { // : UParticleModuleLocationBase
		constexpr auto EmitterName = 0x50; // FName
	}

	namespace n_AFishingFish { // : ACharacter
		constexpr auto FishDataAsset = 0x5f0; // UFishDataAsset*
		constexpr auto FishingMiniGameFishDataAsset = 0x5f8; // UFishingMiniGameFishDataAsset*
		constexpr auto OnFishCaughtStat = 0x600; // FPlayerStat
		constexpr auto BattlingVFX = 0x608; // UParticleSystemComponent*
		constexpr auto BeingTiredVFX = 0x610; // UParticleSystemComponent*
		constexpr auto WaterInteractionComponent = 0x618; // UWaterInteractionComponent*
		constexpr auto CaughtFishItemDesc = 0x620; // UItemDesc*
		constexpr auto DitherComponent = 0x8c0; // UDitherComponent*
		constexpr auto MouthAttachLocation = 0x8c8; // FVector
		constexpr auto AutoKillTime = 0x8d4; // float
		constexpr auto RandomAnimationLoopVal = 0x8e0; // int32_t
	}

	namespace n_UFlammableWieldableComponent { // : UFlammableComponent
		constexpr auto IgnitedStatus = 0xe0; // FStatus
	}

	namespace n_UContestSpawnLocationsComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMovieSceneSkeletalAnimationTrack { // : UMovieSceneNameableTrack
		constexpr auto AnimationSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UBTTask_MoveToTarget { // : UBTTask_MoveTo
		constexpr auto MaxDistFromDestinationPosToTargetPos = 0xa0; // float
		constexpr auto OverrideMaxSpeedToSlowDistanceFactor = 0xa4; // float
		constexpr auto TargetBlackboardKey = 0xa8; // FBlackboardKeySelector
	}

	namespace n_AFireworkService { // : AActor
		constexpr auto NumberOfCachedFlares = 0x448; // int32_t
	}

	namespace n_UKrakenTentacleItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto RewardMarkerParams = 0x428; // UShortRangeMarkerDataAsset*
	}

	namespace n_UDeviceProfileManager { // : UObject
		constexpr auto Profiles = 0x28; // TArray<UObject*>
	}

	namespace n_UIsTargetAllianceMemberStatCondition { // : UTargetedStatCondition
		constexpr auto TargetSelector = 0x28; // UStatConditionTargetSelector*
	}

	namespace n_UWieldablePetComponentDataAsset { // : UDataAsset
		constexpr auto FriendlyTimeUntilEscape = 0x28; // FFloatRange
		constexpr auto NormalTimeUntilEscape = 0x38; // FFloatRange
		constexpr auto SubmergedTimeUntilEscape = 0x48; // FFloatRange
		constexpr auto DamageToOwnerDropThreshold = 0x58; // float
		constexpr auto DropTimeouts = 0x60; // TArray<FWieldablePetDropTimeout>
	}

	namespace n_UBTTask_SetRoamingPetAnimationState { // : UBTTask_BlackboardBase
		constexpr auto WeightedAnimationSelection = 0x88; // FWeightedPetAnimationSelector
	}

	namespace n_UReapersChestItemCategory_C { // : UBootyCategory_C
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UMovieSceneLevelVisibilitySection { // : UMovieSceneSection
		constexpr auto Visibility = 0x98; // ELevelVisibility
		constexpr auto LevelNames = 0xa0; // TArray<FName>
	}

	namespace n_ATunnelOfTheDamnedPortal { // : AActor
		constexpr auto Root = 0x3e0; // USceneComponent*
		constexpr auto TriggerVolume = 0x3e8; // UBoxComponent*
		constexpr auto ProximityTriggerVolume = 0x3f0; // USphereComponent*
		constexpr auto EnableAllowedTriggerActorTypeFiltering = 0x3f8; // bool
		constexpr auto AllowedTriggerActorTypes = 0x400; // TArray<AActor*>
		constexpr auto ActivateSignalOnSpawn = 0x410; // bool
		constexpr auto MigrationBlockingRadius = 0x414; // float
		constexpr auto AudioPool = 0x418; // UWwiseObjectPoolWrapper*
		constexpr auto StartPortalAmbianceEvent = 0x420; // UWwiseEvent*
		constexpr auto StopPortalAmbianceEvent = 0x428; // UWwiseEvent*
		constexpr auto PortalEntryEvent = 0x430; // UWwiseEvent*
		constexpr auto Desc = 0x438; // UPortalDesc*
		constexpr auto PortalSignalCutSceneActor = 0x440; // APortalSignalCutSceneActor*
		constexpr auto PortalSignalCutSceneAnchorActor = 0x448; // AActor*
	}

	namespace n_UBodyLightControllerComponent { // : UActorComponent
		constexpr auto HourOfDayToIntensityMultiplierCurve = 0xc8; // UCurveFloat*
		constexpr auto BaseLightIntensity = 0xd0; // float
		constexpr auto IntensitySpringAccel = 0xd4; // float
	}

	namespace n_UFlamesOfFateInteractableComponent { // : UInteractableComponent
		constexpr auto DisplayName = 0x130; // FText
		constexpr auto TakeFlameTooltipText = 0x168; // FText
		constexpr auto LanternNotRaisedToolTipText = 0x1a0; // FText
		constexpr auto NotWieldingFlameTooltipText = 0x1d8; // FText
		constexpr auto CannotSetFlameTooltipText = 0x210; // FText
		constexpr auto FlameColour = 0x248; // EFlameOfFateType
	}

	namespace n_UTimelineComponent { // : UActorComponent
		constexpr auto TheTimeline = 0xc8; // FTimeline
	}

	namespace n_UGenericPartWithVFXDescAsset { // : UGenericPartDescAsset
		constexpr auto VFX = 0x30; // UParticleSystem*
	}

	namespace n_UContainerAllowedItemsDataAsset { // : UDataAsset
		constexpr auto Items = 0x28; // TArray<UItemDesc*>
		constexpr auto Categories = 0x38; // TArray<UItemCategory*>
	}

	namespace n_UQuestBookAnimationInstance { // : UWieldableItemAnimationInstance
		constexpr auto MessagingDispatcher = 0x450; // FObjectMessagingDispatcher
		constexpr auto OneShotAnimationSequence = 0x4f0; // TArray<FInputSequencePair>
		constexpr auto OneShotAnimationAlternateSequence = 0x500; // TArray<FInputSequencePair>
		constexpr auto ContinuousUseAnimationSequence = 0x510; // TArray<FInputMontagePair>
		constexpr auto ContinuousUseAnimationAlternateSequence = 0x520; // TArray<FInputMontagePair>
		constexpr auto EquipItemAnimationSequence = 0x530; // UAnimSequenceBase*
		constexpr auto UnequipItemAnimationSequence = 0x538; // UAnimSequenceBase*
		constexpr auto OneShotIsAlternate = 0x540; // bool
		constexpr auto ContinuousIsAlternate = 0x541; // bool
		constexpr auto DisableBlending = 0x542; // bool
		constexpr auto CurrentMontage = 0x620; // UAnimMontage*
	}

	namespace n_APlayerBuriedItemService { // : AActor
		constexpr auto RegisteredTavernBoards = 0x3e0; // TArray<ATavernBoard*>
		constexpr auto NumMapsTakenFromStoreThisDayPerCrew = 0x3f0; // TArray<FPlayerBuriedItemServiceNumMapsTakenFromStoreThisDayPerCrew>
		constexpr auto DataAsset = 0x400; // UPlayerBuriedItemServiceDataAsset*
		constexpr auto MapStorePopulator = 0x408; // UPlayerBuriedItemServiceMapStorePopulator*
	}

	namespace n_UAIFormWithVFXComponent { // : UAthenaAIFormComponent
		constexpr auto ParticlesTemplate = 0x138; // UParticleSystem*
		constexpr auto ParticleSystemComponent = 0x140; // UParticleSystemComponent*
		constexpr auto ParticleActivationDelay = 0x148; // float
		constexpr auto ActivationTimerHandle = 0x14c; // FTimerHandle
	}

	namespace n_UMechanismMaterialMap { // : UObject
		constexpr auto MaterialClusters = 0x28; // TArray<FMechanismMaterialMapEntry>
	}

	namespace n_ATutorialTavernStrangerNPC { // : ATavernStrangerNPC
		constexpr auto AnimationData = 0x6d8; // FStringAssetReference
		constexpr auto SummonSFXPool = 0x6e8; // UWwiseObjectPoolWrapper*
		constexpr auto SummonSFX = 0x6f0; // UWwiseEvent*
		constexpr auto SummonEmitter = 0x6f8; // FWwiseEmitter
		constexpr auto PlaySummonSFXEventHandle = 0x718; // FObjectMessagingHandle
	}

	namespace n_UBTService_UpdateLocationWithActorLocation { // : UBTService
		constexpr auto LocationKey = 0x70; // FBlackboardKeySelector
		constexpr auto ActorKey = 0x98; // FBlackboardKeySelector
	}

	namespace n_UAISense_Touch { // : UAISense
		constexpr auto RegisteredEvents = 0x88; // TArray<FAITouchEvent>
	}

	namespace n_UAthenaAnimationKeyedInstrumentDataAsset { // : UDataAsset
		constexpr auto Into = 0x28; // UAnimSequence*
		constexpr auto Action = 0x30; // UAnimSequence*
		constexpr auto Outof = 0x38; // UAnimSequence*
	}

	namespace n_UEmblemService { // : UObject
		constexpr auto GarbageCollectorVisiblePopups = 0x30; // TArray<UPopUpMessageDesc*>
		constexpr auto GarbageCollectorPopupAudioOverrides = 0x40; // TArray<UPopUpAudioDesc*>
	}

	namespace n_UMovieSceneMaterialTrack { // : UMovieSceneNameableTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UCanvasLODService { // : UObject
		constexpr auto ResourceManagedCanvases = 0x38; // TArray<AActor*>
	}

	namespace n_UGetNumberOfCollectedTornMapPiecesStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTestUObjectWithObjectProperty { // : UObject
		constexpr auto ObjectProperty = 0x28; // UObject*
	}

	namespace n_UFishAnimationInstance { // : UAnimInstance
		constexpr auto FishSkeletalMesh = 0x440; // USkeletalMesh*
		constexpr auto FishingFishCharacter = 0x448; // AFishingFish*
		constexpr auto FishingFishAnimationParams = 0x450; // FFishAnimationParams
		constexpr auto FishAnimationSequences = 0x458; // FFishAnimationSequences
		constexpr auto IsJumpActive = 0x4e0; // bool
		constexpr auto IsOnSurface = 0x4e1; // bool
		constexpr auto FishIsCaught = 0x4e2; // bool
		constexpr auto CurrentPlayingMontage = 0x4e8; // UAnimMontage*
	}

	namespace n_AConstellationsService { // : AActor
		constexpr auto ViewBoundaryDegrees = 0x3d8; // float
		constexpr auto ConstellationsBespokeAudioEventsAssetRef = 0x428; // FStringAssetReference
		constexpr auto AtmosphericMaterialParamsInstance = 0x438; // UMaterialParameterCollectionInstance*
		constexpr auto ConstellationBespokeAudioEventsListInstance = 0x440; // UConstellationAudioEventsDataAsset*
		constexpr auto AtmosphericMaterialParamsAssetRef = 0x448; // FStringAssetReference
	}

	namespace n_UParticleModuleVectorFieldRotation { // : UParticleModuleVectorFieldBase
		constexpr auto MinInitialRotation = 0x50; // FVector
		constexpr auto MaxInitialRotation = 0x5c; // FVector
	}

	namespace n_UDebugMenuComponent { // : UActorComponent
		constexpr auto DebugMenuInstance = 0xf0; // ADebugMenu*
	}

	namespace n_AVoyageGeneratorSim { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UGameViewportClient { // : UScriptViewportClient
		constexpr auto ViewportConsole = 0x38; // UConsole*
		constexpr auto DebugProperties = 0x40; // TArray<FDebugDisplayProperty>
		constexpr auto World = 0x80; // UWorld*
		constexpr auto GameInstance = 0x88; // UGameInstance*
	}

	namespace n_UMeshMemoryConstraintFallbackDataAsset { // : UDataAsset
		constexpr auto FallbackName = 0x28; // FName
		constexpr auto ConstraintBudget = 0x30; // UMeshMemoryConstraintBudget*
		constexpr auto MeshFallbacks = 0x38; // TArray<UMeshMemoryConstraintFallbackCategoryDataAsset*>
		constexpr auto ThresholdsMB = 0x48; // TArray<float>
		constexpr auto ScoringIntervalInSeconds = 0x58; // float
		constexpr auto ScoringData = 0x60; // TArray<UMeshMemoryConstraintScoringObject*>
	}

	namespace n_ALandmark { // : AActor
		constexpr auto Name = 0x3d0; // FText
		constexpr auto NameV2 = 0x408; // FText
		constexpr auto NameV3 = 0x440; // FText
		constexpr auto NameV4 = 0x478; // FText
		constexpr auto LandmarkVagueness = 0x4b0; // ELandmarkVagueness
		constexpr auto LandmarkUniqueness = 0x4b1; // ELandmarkUniqueness
		constexpr auto IsUnderground = 0x4b2; // bool
		constexpr auto IsUnsuitableFor = 0x4b8; // TArray<EQuestType>
		constexpr auto PacingStartRadius = 0x5e4; // float
		constexpr auto Reactions = 0x5e8; // TArray<FLandmarkReaction>
		constexpr auto AudioZoneComponent = 0x618; // UOverlapTriggerComponent*
		constexpr auto StartLocation = 0x64c; // FVector
	}

	namespace n_UAthenaLoadingScreenParams { // : UDeveloperSettings
		constexpr auto BootLoadingScreen = 0x38; // FStringAssetReference
		constexpr auto TeleportLoadingScreen = 0x48; // FStringAssetReference
		constexpr auto AdventureLoadingScreens = 0x58; // FStringAssetReference
		constexpr auto ArenaLoadingScreens = 0x68; // FStringAssetReference
	}

	namespace n_URowboatDescDataAsset { // : UDataAsset
		constexpr auto PartDesc = 0x28; // FPartDesc
	}

	namespace n_UCommodityTypeDataAsset { // : UDataAsset
		constexpr auto CommodityEntries = 0x28; // TArray<FCommodityTypeDataEntry>
	}

	namespace n_UIslandEventType { // : UObject
		constexpr auto IslandIcons = 0x28; // FIslandEventIcons
		constexpr auto HeaderIcons = 0x38; // FIslandEventIcons
	}

	namespace n_UMockWaterServiceWithValidWaterPlane { // : UMockWaterInterface
		constexpr auto DefaultWaterComponent = 0x38; // UFFTWaterComponent*
	}

	namespace n_ULevelStreamingPersistent { // : ULevelStreaming
		constexpr auto WorldAsset = 0x28; // UWorld*
		constexpr auto PackageNameToLoad = 0x50; // FName
		constexpr auto LODPackageNames = 0x58; // TArray<FName>
		constexpr auto LevelTransform = 0x80; // FTransform
		constexpr auto bShouldBeVisibleInEditor = 0xbc; // char : 1
		constexpr auto Blocked = 0xbc; // char : 1
		constexpr auto bShouldBeLoaded = 0xbc; // char : 1
		constexpr auto bShouldBeVisible = 0xbc; // char : 1
		constexpr auto bShouldBlockOnLoad = 0xbc; // char : 1
		constexpr auto LevelLODIndex = 0xc0; // int32_t
		constexpr auto bDisableDistanceStreaming = 0xc4; // char : 1
		constexpr auto bDrawOnLevelStatusMap = 0xc4; // char : 1
		constexpr auto LevelColor = 0xc8; // FLinearColor
		constexpr auto EditorStreamingVolumes = 0xd8; // TArray<ALevelStreamingVolume*>
		constexpr auto MinTimeBetweenVolumeUnloadRequests = 0xe8; // float
		constexpr auto Keywords = 0xf0; // TArray<FString>
		constexpr auto OnLevelLoaded = 0x100; // FScriptMulticastDelegate
		constexpr auto OnLevelUnloaded = 0x110; // FScriptMulticastDelegate
		constexpr auto OnLevelShown = 0x120; // FScriptMulticastDelegate
		constexpr auto OnLevelHidden = 0x130; // FScriptMulticastDelegate
		constexpr auto LoadedLevel = 0x200; // ULevel*
		constexpr auto PendingUnloadLevel = 0x208; // ULevel*
	}

	namespace n_AProjectileItemInfo { // : AItemInfo
		constexpr auto LoadableProjectileComponent = 0x500; // ULoadableProjectileComponent*
	}

	namespace n_UIslandEventComponent { // : UActorComponent
		constexpr auto EventType = 0xc8; // UIslandEventType*
		constexpr auto Id = 0xd0; // FGuid
	}

	namespace n_UZoomMapTaleStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UZoomMapTaleStepDesc*
		constexpr auto IslandName = 0x98; // FName
		constexpr auto BookService = 0xa0; // UBookTaleQuestService*
		constexpr auto ZoomCenterPoint = 0xa8; // FVector
		constexpr auto DigSpot = 0xb4; // FVector
		constexpr auto CanvasDimensions = 0xc0; // FVector
		constexpr auto Params = 0xd0; // UZoomMapParamsDataAsset*
		constexpr auto IslandMapTexture = 0xd8; // UTexture*
	}

	namespace n_UDrumItemCategory { // : UInstrumentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_ASpawnLocation { // : APlayerStart
		constexpr auto Description = 0x400; // FString
	}

	namespace n_UMechanismOneShotEvent_Audio { // : UMechanismOneShotEvent
		constexpr auto Event = 0x38; // UWwiseEvent*
		constexpr auto Emitter = 0x40; // FWwiseEmitter
		constexpr auto AudioEmitterInterface = 0x60; // TScriptInterface<Class>
	}

	namespace n_UShelteredComponent { // : UActorComponent
		constexpr auto FeatureFlag = 0xd0; // FName
		constexpr auto ShelterUpdateOption = 0xd8; // EShelterUpdateOption
		constexpr auto RaycastSpreadInCentimetres = 0xdc; // float
		constexpr auto RaycastHeightOffsetHeightInCentimetres = 0xe0; // float
		constexpr auto RaycastHitTestTraceChannel = 0xe4; // ECollisionChannel
	}

	namespace n_UBTTask_Wait { // : UBTTaskNode
		constexpr auto WaitTime = 0x60; // float
		constexpr auto RandomDeviation = 0x64; // float
	}

	namespace n_AContestSafeRegion { // : AWorldSafeRegion
		constexpr auto ParentContestZone = 0x410; // AContestZone*
		constexpr auto ContestSafeZone = 0x418; // FWorldSafeZone
	}

	namespace n_UFishingLineRenderComponent { // : URopeCatenaryRenderComponent
		constexpr auto LineColour = 0x630; // FLinearColor
	}

	namespace n_UBuffReceiverComponent { // : UActorComponent
		constexpr auto CanReceiveBuff = 0xd0; // bool
	}

	namespace n_URegionMapSetAsset { // : UDataAsset
		constexpr auto MapRegions = 0x28; // TArray<URegionMapDataAsset*>
	}

	namespace n_UMaterialExpressionNormalize { // : UMaterialExpression
		constexpr auto VectorInput = 0x70; // FExpressionInput
	}

	namespace n_UChooseIslandStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_AKrakenShipWrappingTellAnimatedTentacle { // : AKrakenAnimatedTentacle
		constexpr auto RootSceneComponent = 0x520; // USceneComponent*
		constexpr auto BaseShipCollision = 0x528; // UCapsuleComponent*
		constexpr auto MeshOffsetComponent = 0x530; // USceneComponent*
		constexpr auto TentacleMeshComponent = 0x538; // USkeletalMeshComponent*
		constexpr auto KrakenTentacleAudioComponent = 0x540; // UKrakenTentacleAIAudioComponent*
		constexpr auto AttachSocketNameFirstPerson = 0x548; // FName
		constexpr auto AttachSocketNameThirdPerson = 0x550; // FName
		constexpr auto TentacleCollisionProfile = 0x558; // FCollisionProfileName
		constexpr auto CollisionSegments = 0x560; // TArray<FKrakenAnimatedTentacleCollisionSegment>
		constexpr auto EnabledShipCollision = 0x570; // bool
		constexpr auto DisableHeadCollisionsDuringHoldingState = 0x571; // bool
		constexpr auto CollisionBoneToUseForShipCollision = 0x574; // int32_t
		constexpr auto SegmentsCollisionEnableType = 0x578; // ECollisionEnabled
		constexpr auto BaseShipCollisionEnableType = 0x579; // ECollisionEnabled
		constexpr auto AnimationSpec = 0x580; // UKrakenAnimatedTentacleAnimationSpecDataAsset*
		constexpr auto AnimationMapping = 0x588; // UKrakenAnimatedTentacleAnimationMappingDataAsset*
		constexpr auto StateAnimationMapping = 0x590; // UKrakenAnimatedTentacleStateAnimationsDataAsset*
		constexpr auto AnimationPlayRate = 0x598; // float
		constexpr auto RequestedAnimationPlayRateBlendTime = 0x59c; // float
		constexpr auto PlayRateAdjustMaxTimeDelta = 0x5a0; // float
		constexpr auto PlayRateAdjustMaxPercentageToSpeedUpPlayRate = 0x5a4; // float
		constexpr auto PlayRateAdjustMaxPercentageToSlowDownPlayRate = 0x5a8; // float
		constexpr auto ServerAnimationTimeOffsetLatencyMultiplierForSynchronisation = 0x5ac; // float
		constexpr auto DebugDrawBoneLocationRadius = 0x5b0; // float
		constexpr auto DebugDrawTargetRadius = 0x5b4; // float
		constexpr auto DebugDrawBoneRotationEndPointRadius = 0x5b8; // float
		constexpr auto DebugDrawBoneRotationLength = 0x5bc; // float
		constexpr auto DebugDrawSuckingTargetRadius = 0x5c0; // float
		constexpr auto MinAnimationPlayedTimeToSetPendingStateChange = 0x5c4; // float
		constexpr auto MinAnimationLeftTimeToSetPendingStateChange = 0x5c8; // float
		constexpr auto AnimationOffsetTimeLeftForOptimalPendingStateChange = 0x5cc; // float
		constexpr auto SmoothNetUpdateLocationTime = 0x5d0; // float
		constexpr auto SmoothNetUpdateRotationTime = 0x5d4; // float
		constexpr auto MinDotToTargetToTryAndRotate = 0x5d8; // float
		constexpr auto MaxDotToTargetToTryAndRotate = 0x5dc; // float
		constexpr auto MinYawTurnRate = 0x5e0; // float
		constexpr auto MaxYawTurnRate = 0x5e4; // float
		constexpr auto MinInvisibleTime = 0x5e8; // float
		constexpr auto MinSuckingTellTime = 0x5ec; // float
		constexpr auto MaxSuckingTellTime = 0x5f0; // float
		constexpr auto MaxSuckingPlayerDistance = 0x5f4; // float
		constexpr auto MinHealthLossRequiredToAvoidAbortSuck = 0x5f8; // float
		constexpr auto TentacleSuckingTellVFX = 0x600; // UObject*
		constexpr auto TargetVFXAttachSocketName = 0x608; // FName
		constexpr auto TargetFirstPersonSuckingTellVFX = 0x610; // UObject*
		constexpr auto TargetThirdPersonSuckingTellVFX = 0x618; // UObject*
		constexpr auto MaxHealthLossRequiredToAvoidAbortSuck = 0x620; // float
		constexpr auto SuckingVelocity = 0x624; // float
		constexpr auto SuckingPlayerAttachDistance = 0x628; // float
		constexpr auto MinHealthLossRequiredToDropPlayer = 0x62c; // float
		constexpr auto MaxHealthLossRequiredToDropPlayer = 0x630; // float
		constexpr auto MinDamageDealtByCurrentTargetRequiredToDropPlayer = 0x634; // float
		constexpr auto MaxDamageDealtByCurrentTargetRequiredToDropPlayer = 0x638; // float
		constexpr auto MinHoldingTime = 0x63c; // float
		constexpr auto MaxHoldingTime = 0x640; // float
		constexpr auto MinWaterDunkTime = 0x644; // float
		constexpr auto MaxWaterDunkTime = 0x648; // float
		constexpr auto PowerSlamDamageTime = 0x64c; // float
		constexpr auto PowerSlamDamage = 0x650; // float
		constexpr auto IngestTargetSocketName = 0x654; // FName
		constexpr auto IngestTargetBoneIndexOffset = 0x65c; // int32_t
		constexpr auto MinIngestingTime = 0x660; // float
		constexpr auto MaxIngestingTime = 0x664; // float
		constexpr auto IngestingDamageAmountPerSecond = 0x668; // float
		constexpr auto RegurgitatingSpeed = 0x66c; // float
		constexpr auto RegurgitatingLaunchTime = 0x670; // float
		constexpr auto ThrowTargetLaunchTime = 0x674; // float
		constexpr auto ThrowTargetVisibleTime = 0x678; // float
		constexpr auto ThrowingSpeed = 0x67c; // float
		constexpr auto TentacleFirstPersonThrowingVFX = 0x680; // UObject*
		constexpr auto TentacleThirdPersonThrowingVFX = 0x688; // UObject*
		constexpr auto MinTargetVomitingDelay = 0x690; // float
		constexpr auto MaxTargetVomitingDelay = 0x694; // float
		constexpr auto MinTargetVomitingDuration = 0x698; // float
		constexpr auto MaxTargetVomitingDuration = 0x69c; // float
		constexpr auto TargetVomitingChances = 0x6a0; // TArray<FKrakenAnimatedTentacleHeldTargetVomittingChance>
		constexpr auto VomitVFXType = 0x6b0; // FName
		constexpr auto WaterTriggerableFX = 0x6b8; // TArray<FKrakenAnimatedTentacleWaterTriggerableFX>
		constexpr auto WaterQueryBoneIndex = 0x6c8; // int32_t
		constexpr auto TentaclePhysicalMaterial = 0x6d0; // UPhysicalMaterial*
		constexpr auto VisualLoggerUpdateTime = 0x6d8; // float
		constexpr auto ServerTimeToStartPlayingIdle = 0x6dc; // float
		constexpr auto AITargetVisibilityPoints = 0x6e0; // TArray<FVector>
		constexpr auto TargetBoxOffset = 0x6f0; // FVector
		constexpr auto TargetBoxScale = 0x6fc; // FVector
		constexpr auto ReplicatedAnimationProgression = 0x71c; // float
		constexpr auto IsHitReactionsEnabled = 0x720; // bool
		constexpr auto PendingState = 0x748; // UKrakenAnimatedTentacleState*
		constexpr auto ReplicatedCurrentState = 0x758; // UKrakenAnimatedTentacleState*
		constexpr auto PreviousState = 0x768; // UKrakenAnimatedTentacleState*
		constexpr auto IngestingProgress = 0x7a0; // float
		constexpr auto AuthoritativeAnimation = 0x7a8; // UKrakenAnimatedTentacleAnimationDataAsset*
		constexpr auto TentacleYaw = 0x7b0; // float
		constexpr auto TentacleWorldLocation = 0x7b4; // FVector
		constexpr auto CurrentTarget = 0x7c0; // AAthenaCharacter*
		constexpr auto HasPlayedIntroAnim = 0x7c8; // bool
		constexpr auto DockedToSceneComponent = 0x920; // USceneComponent*
		constexpr auto DockedLocalSpaceOffset = 0x928; // FVector
		constexpr auto DockedLocalSpaceRotation = 0x940; // FQuat
		constexpr auto TentacleSuckingTellParticleSystem = 0x998; // UParticleSystemComponent*
		constexpr auto TargetFirstPersonSuckingTellParticleSystem = 0x9a0; // UParticleSystemComponent*
		constexpr auto TargetThirdPersonSuckingTellParticleSystem = 0x9a8; // UParticleSystemComponent*
	}

	namespace n_UInterpTrackParticleReplay { // : UInterpTrack
		constexpr auto TrackKeys = 0x70; // TArray<FParticleReplayTrackKey>
	}

	namespace n_UEquipConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UInterpTrackBoolProp { // : UInterpTrack
		constexpr auto BoolTrack = 0x70; // TArray<FBoolTrackKey>
		constexpr auto PropertyName = 0x80; // FName
	}

	namespace n_USeatAnimationId { // : UObject
		constexpr auto CharacterOffset = 0x28; // FVector
		constexpr auto ThirdPersonCameraVerticalOffsetFactorWhenZoomed = 0x34; // float
		constexpr auto CharacterProjectileTraceHitVolumeOffset = 0x40; // FTransform
	}

	namespace n_UPersistentSalvageItemSpawnComponentMock { // : UPersistentSalvageItemSpawnComponent
		constexpr auto RefreshItemsRate = 0x548; // float
	}

	namespace n_UDistantIdleAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto NamedControllerParams = 0x28; // TArray<FAthenaAIControllerParamValue>
		constexpr auto DamageIntervalCountingMode = 0x38; // EAIAbilityDamageIntervalCounterMode
		constexpr auto UseTimeBetweenAbility = 0x39; // bool
		constexpr auto ActivationTimerCooldown = 0x40; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto TimeBetweenAbility = 0x50; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto UseDamageBetweenAbility = 0x60; // bool
		constexpr auto DamageBetweenAbility = 0x68; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto AbilityRadius = 0x78; // float
		constexpr auto UseMinMaxAttackRange = 0x7c; // bool
		constexpr auto MinMaxAttackRange = 0x80; // FMinMaxAbilityRange
		constexpr auto FollowUpAbilities = 0x88; // TArray<FAIAbilityFollowUp>
		constexpr auto Weight = 0x98; // float
		constexpr auto ContinuousCooldownAbilityParameters = 0xa0; // FAIAbilityContinuousCooldownParameterData
		constexpr auto AIAbilityTypeClass = 0xc0; // UAthenaAIAbilityType*
	}

	namespace n_AStrongholdKeyItemInfo { // : ANonStorableItemInfo
		constexpr auto CanBeStoredInInventory = 0x3f0; // bool
		constexpr auto OnItemPickedUpDelegate = 0x3f8; // FScriptMulticastDelegate
		constexpr auto OnItemDroppedDeletage = 0x408; // FScriptMulticastDelegate
		constexpr auto WieldableType = 0x418; // AWieldableItem*
		constexpr auto ProxyType = 0x420; // AActor*
		constexpr auto WieldableItemPersistenceCooldownComponent = 0x428; // UWieldableItemPersistentCooldownComponent*
		constexpr auto Desc = 0x430; // UItemDesc*
		constexpr auto CurrentRepresentation = 0x438; // EItemRepresentation
		constexpr auto CurrentRepresentationInstance = 0x440; // AActor*
		constexpr auto CurrentOwner = 0x448; // AActor*
		constexpr auto TutorialOwner = 0x450; // AActor*
		constexpr auto DoNotConsiderForMigrationGather = 0x4f9; // bool
	}

	namespace n_UReverbEffect { // : UObject
		constexpr auto Density = 0x28; // float
		constexpr auto Diffusion = 0x2c; // float
		constexpr auto Gain = 0x30; // float
		constexpr auto GainHF = 0x34; // float
		constexpr auto DecayTime = 0x38; // float
		constexpr auto DecayHFRatio = 0x3c; // float
		constexpr auto ReflectionsGain = 0x40; // float
		constexpr auto ReflectionsDelay = 0x44; // float
		constexpr auto LateGain = 0x48; // float
		constexpr auto LateDelay = 0x4c; // float
		constexpr auto AirAbsorptionGainHF = 0x50; // float
		constexpr auto RoomRolloffFactor = 0x54; // float
	}

	namespace n_ADamageableCannonProjectile { // : ACannonProjectile
		constexpr auto ImpactExplosionDelayOverride = 0x658; // float
	}

	namespace n_UIsRunningReapersFlagStatCondition { // : UTargetedStatCondition
		constexpr auto ShouldFlagBeRaised = 0x30; // bool
	}

	namespace n_UGameplayEffectUIData_TextOnly { // : UGameplayEffectUIData
		constexpr auto Description = 0x28; // FText
	}

	namespace n_UBTTask_MoveTo { // : UBTTask_BlackboardBase
		constexpr auto AcceptableRadius = 0x88; // float
		constexpr auto FilterClass = 0x90; // UNavigationQueryFilter*
		constexpr auto bAllowStrafe = 0x98; // char : 1
		constexpr auto bAllowPartialPath = 0x98; // char : 1
		constexpr auto bStopOnOverlap = 0x98; // char : 1
	}

	namespace n_UFireChargedAttackAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto ProjectileParams = 0xc8; // TArray<FChargedAttackProjectileWeights>
	}

	namespace n_UWieldableItemCanvasRenderingComponent { // : UActorComponent
		constexpr auto CanvasWidth = 0xd8; // int32_t
		constexpr auto CanvasHeight = 0xdc; // int32_t
		constexpr auto PrimaryMaterialTextureParameterName = 0xe0; // FName
		constexpr auto OwningWieldable = 0xe8; // TScriptInterface<Class>
		constexpr auto PrimaryRenderTarget = 0xf8; // UMaybeCompressedCanvasRenderTarget2D*
		constexpr auto AdditionalRenderTargets = 0x100; // TArray<UMaybeCompressedCanvasRenderTarget2D*>
	}

	namespace n_UAIFormWithVFXDataAsset { // : UAthenaAIFormDataAsset
		constexpr auto ParticlesTemplate = 0x90; // UParticleSystem*
		constexpr auto ParticleActivationDelay = 0x98; // float
	}

	namespace n_ARespawnAndTaleProgressTriggerVolume { // : APhysicsVolume
		constexpr auto Progress = 0x418; // URespawnAndTaleProgressComponent*
		constexpr auto ClearProgress = 0x420; // bool
		constexpr auto ProgressLevel = 0x424; // int32_t
		constexpr auto LinkedSpawnLocation = 0x428; // TArray<AProgressSpawnLocation*>
		constexpr auto SetRespawnProgress = 0x438; // bool
		constexpr auto SetRespawnProgressForWholeCrew = 0x439; // bool
		constexpr auto SetTaleProgress = 0x43a; // bool
		constexpr auto SetTaleProgressForWholeCrew = 0x43b; // bool
	}

	namespace n_UCrowdFollowingComponent { // : UPathFollowingComponent
		constexpr auto CrowdAgentMoveDirection = 0x2c0; // FVector
		constexpr auto CharacterMovement = 0x2d0; // UCharacterMovementComponent*
		constexpr auto AvoidanceGroup = 0x2d8; // FNavAvoidanceMask
		constexpr auto GroupsToAvoid = 0x2dc; // FNavAvoidanceMask
		constexpr auto GroupsToIgnore = 0x2e0; // FNavAvoidanceMask
	}

	namespace n_UHealthStageHandlerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UWashedUpSkeletonClueSiteData { // : UClueSiteData
		constexpr auto SkeletonPoseType = 0x38; // AActor*
		constexpr auto ClueItemType = 0x40; // UItemDesc*
		constexpr auto IslandNameToSpawnOn = 0x48; // FName
		constexpr auto IslandSpawnLocationReservationId = 0x50; // FGuid
		constexpr auto SpawnTransform = 0x60; // FTransform
	}

	namespace n_AThreadedActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UScrollBar { // : UWidget
		constexpr auto WidgetStyle = 0x138; // FScrollBarStyle
		constexpr auto Style = 0x650; // USlateWidgetStyleAsset*
		constexpr auto bAlwaysShowScrollbar = 0x658; // bool
		constexpr auto Orientation = 0x659; // EOrientation
		constexpr auto Thickness = 0x65c; // FVector2D
	}

	namespace n_UCordRenderComponent { // : UStaticMeshComponent
		constexpr auto CordMaterials = 0x5f8; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ThicknessCm = 0x608; // float
	}

	namespace n_AShipProxyPawn { // : APawn
		constexpr auto Ship = 0x448; // AShip*
		constexpr auto SpawnTargetShip = 0x450; // AShip*
	}

	namespace n_UTextBlock { // : UWidget
		constexpr auto Style = 0x138; // USlateWidgetStyleAsset*
		constexpr auto Text = 0x140; // FText
		constexpr auto TextDelegate = 0x178; // DelegateProperty
		constexpr auto ColorAndOpacity = 0x188; // FSlateColor
		constexpr auto ColorAndOpacityDelegate = 0x1b8; // DelegateProperty
		constexpr auto Font = 0x1c8; // FSlateFontInfo
		constexpr auto ShadowOffset = 0x208; // FVector2D
		constexpr auto ShadowColorAndOpacity = 0x210; // FLinearColor
		constexpr auto ShadowColorAndOpacityDelegate = 0x220; // DelegateProperty
		constexpr auto Justification = 0x230; // ETextJustify
		constexpr auto AutoWrapText = 0x231; // bool
		constexpr auto WrapTextAt = 0x234; // float
		constexpr auto MinDesiredWidth = 0x238; // float
		constexpr auto Margin = 0x23c; // FMargin
		constexpr auto LineHeightPercentage = 0x24c; // float
	}

	namespace n_UAbilityTask_WaitGameplayEffectApplied { // : UAbilityTask
		constexpr auto InstanceName = 0x28; // FName
	}

	namespace n_USelectIslandsFromRegionStep { // : UTaleQuestStep
		constexpr auto RegionData = 0x90; // URegionMapDataAsset*
		constexpr auto SelectionStrategy = 0x98; // URegionIslandSelectionStrategyBase*
	}

	namespace n_UStopAggressiveGhostShipEncounterStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_URewardPopUpNotificationDataAsset { // : UDataAsset
		constexpr auto FeatureToggle = 0x28; // FName
		constexpr auto RewardPopUpNotifications = 0x30; // TArray<FRewardPopUpNotificationInfo>
	}

	namespace n_USphereCollisionExtentAdjustOverTimeComponent { // : UPrimitiveCollisionExtentAdjustOverTimeComponent
		constexpr auto ShouldAdjustSphereRadius = 0x108; // bool
		constexpr auto PostAdjustmentSphereRadius = 0x10c; // float
		constexpr auto ServerSizeScale = 0x110; // float
		constexpr auto SphereCollisionToAdjust = 0x118; // USphereComponent*
	}

	namespace n_UBlockMigrationForCrewTaskStepDesc { // : UTaleQuestStepDesc
		constexpr auto TaskDesc = 0x80; // UTaleQuestStepDesc*
		constexpr auto RemoteConfigKeyBlockServerMigration = 0x88; // FName
		constexpr auto Reason = 0x90; // FString
	}

	namespace n_UMastAudioParams { // : UDataAsset
		constexpr auto PlaySailLength = 0x28; // UWwiseEvent*
		constexpr auto StopSailLength = 0x30; // UWwiseEvent*
		constexpr auto PlaySailLengthStopTop = 0x38; // UWwiseEvent*
		constexpr auto PlaySailLengthStopBottom = 0x40; // UWwiseEvent*
		constexpr auto RtpcSailCompletion = 0x48; // FName
		constexpr auto MinCompletionValue = 0x50; // float
		constexpr auto MaxCompletionValue = 0x54; // float
		constexpr auto PlaySailAngle = 0x58; // UWwiseEvent*
		constexpr auto StopSailAngle = 0x60; // UWwiseEvent*
		constexpr auto PlaySailAngleStopLimit = 0x68; // UWwiseEvent*
		constexpr auto RtpcSailAngle = 0x70; // FName
		constexpr auto MinAngleValue = 0x78; // float
		constexpr auto MaxAngleValue = 0x7c; // float
	}

	namespace n_AStorageContainer { // : AInteractableObject
		constexpr auto Mesh = 0x468; // UStaticMeshComponent*
		constexpr auto InteractionRegion = 0x470; // UInteractableComponent*
		constexpr auto TrackedActorType = 0x48c; // ETrackedActorType
	}

	namespace n_UEnvQueryGenerator_Line { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto FromContext = 0x90; // UEnvQueryContext*
		constexpr auto ToContext = 0x98; // UEnvQueryContext*
		constexpr auto PointSpacing = 0xa0; // FAIDataProviderFloatValue
		constexpr auto NumExtraPairsOfParallelLines = 0xd0; // FAIDataProviderIntValue
		constexpr auto ParallelLineSpacing = 0x100; // FAIDataProviderFloatValue
		constexpr auto MaxValidLineLength = 0x130; // float
		constexpr auto ForceIncludeEndPoint = 0x134; // bool
		constexpr auto ProjectPointsToWaterSurface = 0x135; // bool
	}

	namespace n_AMerchantCrateItemProxy { // : ABaseMerchantCrateItemProxy
		constexpr auto RewindComponent = 0x7b8; // URewindComponent*
		constexpr auto MountpointInterface = 0x7c0; // TScriptInterface<Class>
		constexpr auto FullGroundImpactSfx = 0x7d0; // UWwiseEvent*
	}

	namespace n_UParticleModuleLifetimeBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UDelayStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UDelayStepDesc*
	}

	namespace n_AFishingFloat { // : AActor
		constexpr auto WaterInteractionComponent = 0x3e8; // UWaterInteractionComponent*
		constexpr auto CollisionComponent = 0x3f0; // UBoxComponent*
		constexpr auto FishingFloatSetupDataAsset = 0x3f8; // UFishingFloatSetupDataAsset*
		constexpr auto FishingFloatMesh = 0x400; // UStaticMeshComponent*
		constexpr auto FloatMaterials = 0x408; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UCollectorsChestItemDescSpawnData { // : UItemSpawnData
		constexpr auto CollectorsChestClass = 0x58; // UClass*
		constexpr auto NumberOfItemsToSpawn = 0x78; // FWeightedProbabilityRange
		constexpr auto ItemsToSpawnInsideCollectorsChest = 0x98; // FWeightedItemDescSpawnDataAssetsWithWeights
		constexpr auto GoldToSpawnInsideCollectorsChest = 0xa8; // UWeightedGoldRewardsDataAsset*
	}

	namespace n_UMapSettings { // : UDeveloperSettings
		constexpr auto PrebakedIslandData = 0x38; // FStringAssetReference
	}

	namespace n_ALightingController { // : AThreadedActor
		constexpr auto PostProcessParams = 0x3d0; // FLightingControllerPostProcessParams
		constexpr auto RainParams = 0x570; // FLightingControllerRainParams
		constexpr auto LightningParams = 0x588; // FLightingControllerLightningParams
		constexpr auto LightingParams = 0x5c8; // FLightingControllerLightingParams
		constexpr auto MoonParams = 0x610; // FLightingControllerMoonParams
		constexpr auto TransformParams = 0x650; // FLightingControllerTransformParams
		constexpr auto TimeParams = 0x6e0; // FLightingControllerTimeParams
		constexpr auto DangerLevelParams = 0x700; // FLightingControllerIslandDangerParams
		constexpr auto LightingSettings = 0x708; // TArray<ULightingControllerSettings*>
		constexpr auto OverworldFarQuad = 0x718; // AStaticMeshActor*
		constexpr auto UnderworldFarQuad = 0x720; // AStaticMeshActor*
		constexpr auto FixedTimeOfDay = 0x728; // float
		constexpr auto FixedDay = 0x72c; // int32_t
		constexpr auto IsFixedTimeOfDay = 0x730; // bool
		constexpr auto RootSceneComponent = 0x738; // USceneComponent*
		constexpr auto AssetParams = 0x740; // FLightingControllerAssetParams
		constexpr auto DirectionalLight = 0x790; // UDirectionalLightComponent*
		constexpr auto SkyDome = 0x798; // UStaticMeshComponent*
		constexpr auto NorthStar = 0x7a0; // UStaticMeshComponent*
		constexpr auto Fog = 0x7a8; // UExponentialHeightFogComponent*
		constexpr auto UnderwaterFog = 0x7b0; // UExponentialHeightFogComponent*
		constexpr auto GlobalPostProcess = 0x7b8; // UPostProcessComponent*
		constexpr auto RainLight = 0x7c0; // UDirectionalLightComponent*
		constexpr auto Moon = 0x7c8; // UStaticMeshComponent*
		constexpr auto SkyLight = 0x7d0; // USkyLightComponent*
		constexpr auto DebugTimeOfDay = 0x7d8; // float
		constexpr auto DebugRain = 0x7dc; // float
		constexpr auto DebugMurk = 0x7e0; // float
		constexpr auto DebugDay = 0x7e4; // int32_t
		constexpr auto IsDebugFixedTimeOfDay = 0x7e8; // char : 1
		constexpr auto ShowDebugSunHeightInfo = 0x7e8; // char : 1
		constexpr auto ShowDebugLightingZoneInfo = 0x7e8; // char : 1
		constexpr auto ShowDebugUnderwater = 0x7e8; // char : 1
		constexpr auto LightingVars = 0x810; // FLightingControllerLightingVars
		constexpr auto MaterialInstances = 0xc70; // FLightingControllerMaterialInstances
		constexpr auto ReflectionProbes = 0xc90; // TArray<AActor*>
		constexpr auto MurkZones = 0xcc0; // TArray<FWaterModifierZoneParametersAndLocation>
		constexpr auto EndOfWorldLightingZoneWeightCurve = 0xd78; // UCurveFloat*
	}

	namespace n_ULandscapeInfo { // : UObject
		constexpr auto LandscapeActor = 0x28; // ALandscape*
		constexpr auto LandscapeGuid = 0x44; // FGuid
		constexpr auto ComponentSizeQuads = 0x54; // int32_t
		constexpr auto SubsectionSizeQuads = 0x58; // int32_t
		constexpr auto ComponentNumSubsections = 0x5c; // int32_t
		constexpr auto DrawScale = 0x60; // FVector
	}

	namespace n_AAthenaPlayerCharacterMock { // : AAthenaPlayerCharacter
		constexpr auto PetMovementParamsDataAsset = 0x1ac0; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto AllowedToSwim = 0x1ac8; // bool
	}

	namespace n_AAutomaticInstancingActor { // : AActor
		constexpr auto DummyRoot = 0x3d0; // USceneComponent*
		constexpr auto CookedInstancedStaticMeshes = 0x3d8; // TMap<FName, FAutomaticInstancingMeshComponentArray>
	}

	namespace n_UKrakenServiceParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FKrakenServiceParams
	}

	namespace n_UGeyserManagerSetupDataAsset { // : UDataAsset
		constexpr auto DormantDuration = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto ActiveDuration = 0x58; // FWeightedProbabilityRangeOfRanges
		constexpr auto DelayBetweenGeyserGroupsDuringGeyserEvent = 0x88; // FWeightedProbabilityRangeOfRanges
		constexpr auto StartInactive = 0xb8; // bool
		constexpr auto NoRestartAfterGeyserSpurtComplete = 0xb9; // bool
		constexpr auto UseUniqueLocationsForEachGeyser = 0xba; // bool
		constexpr auto MinDistanceFromPlayerInMetres = 0xbc; // float
		constexpr auto MinGeyserSequenceSpacing = 0xc0; // float
		constexpr auto GeyserToSpawn = 0xc8; // AGeyser*
		constexpr auto NumGeyserGroupsToSpawn = 0xd0; // FWeightedProbabilityRange
		constexpr auto NumGeysersToSpawnPerGroup = 0xf0; // FWeightedProbabilityRange
		constexpr auto SpawnDistanceFromPlayerInMetres = 0x110; // FWeightedProbabilityRangeOfRanges
		constexpr auto SpawnRadiusInMetres = 0x140; // FWeightedProbabilityRangeOfRanges
		constexpr auto SpawnAngleRelativeToPlayerDirection = 0x170; // TArray<FGeyserSpawnAngleOption>
		constexpr auto DelayBetweenEachGeyserSpawningInAGroup = 0x180; // FWeightedProbabilityRangeOfRanges
		constexpr auto MaximumDensityRadiusInMetres = 0x1b0; // float
		constexpr auto MaximumDensityMaxNumGeysersWithinRadius = 0x1b4; // int32_t
	}

	namespace n_UMeleeBlockingInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMechanismAnimation { // : UDataAsset
		constexpr auto AnimationStartedEvents = 0x28; // TArray<UMechanismOneShotEvent*>
		constexpr auto Events = 0x38; // TArray<UMechanismAnimationEvent*>
		constexpr auto AnimationStoppedEvents = 0x48; // TArray<UMechanismOneShotEvent*>
	}

	namespace n_UThirdPersonAnimationInstance { // : UAthenaAnimationInstance
		constexpr auto ItemAnimPausedTimeRemaining = 0x29e0; // float
		constexpr auto IsItemAnimPaused = 0x29e4; // char : 1
		constexpr auto UseContinualLoopInOneShotState = 0x29e4; // char : 1
		constexpr auto IKLimbStretchParams = 0x29e8; // FAthenaAnimationIKLimbStretch
		constexpr auto LadderAnimationParams = 0x29f8; // FAthenaAnimationLadder
		constexpr auto Talking = 0x2ca8; // FAthenaAnimationTalking
		constexpr auto PitchTargetingControlStates = 0x2ce8; // FAthenaAnimationPitchControlStates
		constexpr auto PitchTargetingParameters = 0x2e50; // FAthenaAnimationObjectTargetingOptions
		constexpr auto WantedPitchTargetingParameters = 0x2e8c; // FAthenaAnimationObjectTargetingOptions
		constexpr auto PitchTargetingAlpha = 0x2ec8; // FAthenaAnimationPitchAlpha
		constexpr auto PitchShoulderParams = 0x2edc; // FAthenaAnimationPitchShoulders
		constexpr auto MountedWeaponAnimationParams = 0x2ef8; // FAthenaAnimationMountedWeapon
		constexpr auto FootPlanting = 0x2ff0; // FAthenaAnimationFootPlanting
		constexpr auto StairAnimationState = 0x3048; // EStairAnimations
		constexpr auto PulleyControl = 0x3050; // FAthenaAnimationPulleyControl
		constexpr auto PulleyControlAnimData = 0x3090; // FAthenaAnimationPulleyControlAnimData
		constexpr auto KeyedInstrumentAnimData = 0x30d8; // FAthenaAnimationKeyedInstrumentAnimData
		constexpr auto AIAnimationParams = 0x30f0; // FAthenaAnimationAI
		constexpr auto LocomotionDrunk = 0x33d8; // FAthenaAnimationLocomotionAlternateAnimData
		constexpr auto LocomotionLimp = 0x3428; // FAthenaAnimationLocomotionAlternateAnimData
		constexpr auto LocomotionPegLeg = 0x3478; // FAthenaAnimationLocomotionAlternateAnimData
		constexpr auto LocomotionHotCoals = 0x34c8; // FAthenaAnimationLocomotionAlternateAnimData
		constexpr auto AISpawnStruct = 0x3518; // TArray<FAthenaAnimationSpawnBase>
		constexpr auto AIFleeLoadingStruct = 0x3528; // TArray<FAthenaAnimationSkeletonFlee>
		constexpr auto AIFleePlayingStruct = 0x3538; // FAthenaAnimationSkeletonFleeInGraph
		constexpr auto SkeletonScream = 0x3570; // FAthenaAnimationSkeletonScream
		constexpr auto PitchAnimationToPlay = 0x3578; // UBlendSpace1D*
		constexpr auto ShopInteractionParams = 0x3580; // FAthenaAnimationShopInteractionParams
		constexpr auto EmoteParams = 0x35b0; // FAthenaAnimationEmoteAnimgraphStructure
		constexpr auto SkeletonCurseAnims = 0x36d8; // FAthenaAnimationSkeletonCurseAnimations
		constexpr auto HarpoonLauncherAnims = 0x3700; // FAthenaAnimationHarpoonLauncherAnimData
		constexpr auto AIKnockbackStruct = 0x3728; // FAthenaAnimationAIKnockback
		constexpr auto HitReactionsAnimationData = 0x3758; // FAthenaAnimationHitReactsAnimData
		constexpr auto HitReactionsSelectedAnimationData = 0x3798; // FAthenaAnimationHitReactsSelectedAnimations
		constexpr auto HitReactionsAnimationParams = 0x37e0; // FAthenaAnimationHitReactParams
		constexpr auto HitReactAdditiveBlendAmount = 0x380c; // float
		constexpr auto WieldedItemPoseBlendTime = 0x3810; // float
		constexpr auto UpperBodyPoseBlendTime = 0x3814; // float
		constexpr auto AimingAndPitchOverride = 0x3818; // float
		constexpr auto FacialOverlayBlendWeight = 0x381c; // float
		constexpr auto PitchShoulderRotation = 0x3820; // FRotator
		constexpr auto PitchClavicleRotation = 0x382c; // FRotator
		constexpr auto RightArmPitchAlpha = 0x3838; // float
		constexpr auto LeftArmPitchAlpha = 0x383c; // float
		constexpr auto SpineRotation = 0x3840; // float
		constexpr auto StunData = 0x3844; // FAthenaAnimationStunData
		constexpr auto HitReactItem = 0x3850; // UBlendSpace1D*
		constexpr auto WorldDelta = 0x3858; // float
		constexpr auto CapstanAngularVelocityWanted = 0x385c; // float
		constexpr auto PlayingFacialAnimations = 0x3860; // FAthenaAnimationPlayingFacialAnimations
		constexpr auto PlayingEquipAnimations = 0x38a0; // FAthenaAnimationPlayingEquipAnimations
		constexpr auto CharacterPitch = 0x38b8; // float
		constexpr auto TargetingPitch = 0x38bc; // float
		constexpr auto ItemAlternateLocomotionAnims = 0x38c0; // FAthenaAnimationObjectLocomotionAnimations
		constexpr auto ItemAlternateIdleAnims = 0x3900; // FAthenaAnimationObjectIdleAnimations
		constexpr auto ItemPrimaryContinousUseAnimsPitchOverride = 0x3918; // FAthenaAnimationObjectActionContinuousStructPitchOverride
		constexpr auto ItemSecondaryContinousUseAnimsPitchOverride = 0x3990; // FAthenaAnimationObjectActionContinuousStructPitchOverride
		constexpr auto ItemPrimaryContinousUseAlternateAnimsPitchOverride = 0x3a08; // FAthenaAnimationObjectActionContinuousStructPitchOverride
		constexpr auto ItemSecondaryContinousUseAlternateAnimsPitchOverride = 0x3a80; // FAthenaAnimationObjectActionContinuousStructPitchOverride
		constexpr auto ItemPrimaryContinousUseSwimmingAnimsPitchOverride = 0x3af8; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemSecondaryContinousUseSwimmingAnimsPitchOverride = 0x3b18; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemPrimaryContinousUseSwimmingAlternateAnimsPitchOverride = 0x3b38; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemSecondaryContinousUseSwimmingAlternateAnimsPitchOverride = 0x3b58; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemPrimaryContinousUseJumpingAnimsPitchOverride = 0x3b78; // FAthenaAnimationObjectJumpingAnimationsPitchOverride
		constexpr auto ItemSecondaryContinousUseJumpingAnimsPitchOverride = 0x3b98; // FAthenaAnimationObjectJumpingAnimationsPitchOverride
		constexpr auto ItemPrimaryContinousUseJumpingAlternateAnimsPitchOverride = 0x3bb8; // FAthenaAnimationObjectJumpingAnimationsPitchOverride
		constexpr auto ItemSecondaryContinousUseJumpingAlternateAnimsPitchOverride = 0x3bd8; // FAthenaAnimationObjectJumpingAnimationsPitchOverride
		constexpr auto ItemPrimaryOneShotAnimsPitchOverride = 0x3bf8; // FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride
		constexpr auto ItemSecondaryOneShotAnimsPitchOverride = 0x3c20; // FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride
		constexpr auto ItemPrimaryOneShotAlternateAnimsPitchOverride = 0x3c48; // FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride
		constexpr auto ItemSecondaryOneShotAlternateAnimsPitchOverride = 0x3c70; // FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride
		constexpr auto ZeroLocomotionForced = 0x3c98; // char : 1
		constexpr auto ConcealedInLoadable = 0x3c98; // char : 1
		constexpr auto AIUseAlternateLocomotion = 0x3c98; // char : 1
		constexpr auto EmoteIKIsOff = 0x3c98; // char : 1
		constexpr auto InBlockingInto = 0x3c98; // char : 1
		constexpr auto IsAI = 0x3c98; // char : 1
		constexpr auto IsLocallyControlled = 0x3c98; // char : 1
		constexpr auto IsHit = 0x3c98; // char : 1
		constexpr auto InRecover = 0x3c99; // char : 1
		constexpr auto InWarmUp = 0x3c99; // char : 1
		constexpr auto PlayingFullBodyAnimation = 0x3c99; // char : 1
		constexpr auto PlayingUpperBodyAnimation = 0x3c99; // char : 1
		constexpr auto PlayingRightArmOverlayAnimation = 0x3c99; // char : 1
		constexpr auto PlayingSpineOverlayAnimation = 0x3c99; // char : 1
		constexpr auto PlayingLeftArmOverlayAnimation = 0x3c99; // char : 1
		constexpr auto IsUsingFullBodyOverlayPose = 0x3c99; // char : 1
		constexpr auto IsUsingLocalIKPose = 0x3c9a; // char : 1
		constexpr auto IsRightShoulderActive = 0x3c9a; // char : 1
		constexpr auto IsLeftShoulderActive = 0x3c9a; // char : 1
		constexpr auto ControllableObjectTypeHasValidTarget = 0x3c9a; // char : 1
		constexpr auto UseHandsAndFootplantingIK = 0x3c9a; // char : 1
		constexpr auto IKLODActive = 0x3c9a; // char : 1
		constexpr auto LODSolverActive = 0x3c9a; // char : 1
		constexpr auto ObjectPitchTargetingActive = 0x3c9a; // char : 1
		constexpr auto ObjectOrIKEmoteActive = 0x3c9b; // char : 1
		constexpr auto ObjectOrWheelCapstanAndNotDocking = 0x3c9b; // char : 1
		constexpr auto HitReact1Active = 0x3c9b; // char : 1
		constexpr auto HitReact2Active = 0x3c9b; // char : 1
		constexpr auto AthenaCharacterIsValid = 0x3c9b; // char : 1
		constexpr auto UsePrimaryActionPitchOverride = 0x3c9b; // char : 1
		constexpr auto UseSecondaryActionPitchOverride = 0x3c9b; // char : 1
	}

	namespace n_ALargeStaticMeshWieldableItem { // : AStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UGameplayLODSettings { // : UObject
		constexpr auto AnimationLODSettings = 0x28; // FAnimationLODParameters
	}

	namespace n_UMaterialExpressionVertexColor { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UMaterialExpressionPrecomputedAOMask { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_USalvageItemSpawnComponent { // : UIslandItemSpawnComponent
		constexpr auto IslandSalvageLocationData = 0x4e0; // TArray<FIslandItemSpawnLocationData>
		constexpr auto GlobalIslandChanceToSpawn = 0x4f0; // float
		constexpr auto MinimumZOffSet = 0x4f4; // float
		constexpr auto MaximumZOffset = 0x4f8; // float
		constexpr auto MinimumRoll = 0x4fc; // float
		constexpr auto MaximumRoll = 0x500; // float
		constexpr auto MinimumPitch = 0x504; // float
		constexpr auto MaximumPitch = 0x508; // float
		constexpr auto SunkenItem = 0x50c; // bool
		constexpr auto SpawnLocationType = 0x510; // UIslandItemDataAsset*
		constexpr auto SpawnedContainerContents = 0x518; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_UBTService_BlackboardBase { // : UBTService
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UTaleQuestGetPhasedVersionOfActorFromAssetMapStepDesc { // : UTaleQuestStepDesc
		constexpr auto ExistingNPCActor = 0x80; // FQuestVariableActor
		constexpr auto ObtainedPhasedNPCActorType = 0x90; // FQuestVariableActorAssetType
		constexpr auto PhasingSourceActor = 0xa0; // FQuestVariableActor
		constexpr auto IndexAssetMap = 0xb0; // UExistingToPhasedNPCIndexAssetMap*
	}

	namespace n_ABurrowCrack { // : AActor
		constexpr auto DefaultSceneComponent = 0x3d0; // USceneComponent*
		constexpr auto DecalComponent = 0x3d8; // UDecalComponent*
		constexpr auto FadeOutTimeSeconds = 0x3e0; // float
		constexpr auto HasFadeStarted = 0x3e4; // bool
	}

	namespace n_USpinBoxWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto SpinBoxStyle = 0x30; // FSpinBoxStyle
	}

	namespace n_UAthenaCharacterBaseInputComponent { // : UInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UEmissaryParticipantComponent { // : UActorComponent
		constexpr auto EmissaryLevel = 0xd0; // int32_t
		constexpr auto EmissaryLevelProgress = 0xd4; // float
		constexpr auto AffiliatedCompany = 0xd8; // FName
		constexpr auto IsAtMaxRank = 0xe0; // bool
		constexpr auto IsEmissaryMaxRankQuestBeenActivatedThisSession = 0xe1; // bool
		constexpr auto NoteCompletionIdents = 0xe8; // TArray<FMysteriousNotesCompletionEventsModelEntry>
		constexpr auto VotedCompany = 0x108; // FName
	}

	namespace n_UBTService_EnableFaceFocusActor { // : UBTService_BlackboardBase
		constexpr auto DisableUpdateMoveFocusForCurrentPathOnExit = 0x98; // bool
		constexpr auto Conditional = 0xa0; // FConditionalBasedOnBlackboardKey
	}

	namespace n_UNPCDialogOptionClose { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
	}

	namespace n_UCutscenePoolTypeSingleUseRandom { // : UCutscenePoolType
		constexpr auto DialogueSelectedRandomly = 0x28; // bool
		constexpr auto AvailableIndices = 0x30; // TArray<int32_t>
		constexpr auto OriginalIndices = 0x48; // TArray<int32_t>
	}

	namespace n_UNPCDialogOptionGiveReward { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto RewardId = 0xb8; // FRewardId
		constexpr auto Company = 0xc0; // UCompany*
		constexpr auto LinkedDialog = 0xc8; // int32_t
	}

	namespace n_UBTService_DoesEQSQuerySucceed { // : UBTService_RunEQSQuery
		constexpr auto OverrideQueryTemplateWithBlackboardValue = 0x98; // bool
		constexpr auto OverrideEQSKey = 0xa0; // FBlackboardKeySelector
		constexpr auto QueryTemplate = 0xc8; // UEnvQuery*
		constexpr auto QueryParams = 0xd0; // TArray<FEnvNamedValue>
		constexpr auto RunMode = 0xe0; // EEnvQueryRunMode
		constexpr auto ThrottleQueryTimePerFrame = 0xe1; // bool
		constexpr auto MaxSecondsToSpendOnQueryPerFrame = 0xe4; // float
	}

	namespace n_ACharacterSocketCollisionService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTexture2DDynamic { // : UTexture
		constexpr auto Format = 0x140; // EPixelFormat
	}

	namespace n_USpecificItemsCrateFillerComponent { // : UActorComponent
		constexpr auto ItemsToFillCrateWith = 0xd0; // TArray<FStorageContainerNode>
	}

	namespace n_AShipCompass { // : AActor
		constexpr auto CompassMesh = 0x3d0; // UPoseableMeshComponent*
		constexpr auto DialBoneName = 0x3d8; // FName
		constexpr auto SpinComponent = 0x3e0; // UCompassSpinComponent*
	}

	namespace n_UCoherentUIGTJSEvent { // : UObject
		constexpr auto StructTypes = 0xa8; // TArray<UStruct*>
	}

	namespace n_UScreenSpaceVFXComponentParams { // : UDataAsset
		constexpr auto EffectStrengthSpringAcceleration = 0x28; // float
		constexpr auto EffectStrengthOverTimeCurve = 0x30; // UCurveFloat*
		constexpr auto ContinuousDamageStrengthSpringAcceleration = 0x38; // float
		constexpr auto ContinuousDamageTimeCurve = 0x40; // UCurveFloat*
		constexpr auto ContinuousDamageMaxDamageValue = 0x48; // float
		constexpr auto ContinuousDamageMaxDamageStrength = 0x4c; // float
		constexpr auto ContinuousDamageCycleTime = 0x50; // float
		constexpr auto VFXNameDamage = 0x54; // FName
		constexpr auto DirectionalDamageIndicatorParameterName = 0x60; // FString
		constexpr auto DirectionalDamageIndicatorLifetime = 0x70; // float
		constexpr auto DrowningEffectStrengthOverTimeCurve = 0x78; // UCurveFloat*
		constexpr auto VFXNameDrowning = 0x80; // FName
		constexpr auto VFXNameStunned = 0x88; // FName
		constexpr auto VFXNameBoundsDarkness = 0x90; // FName
	}

	namespace n_UPortalDesc { // : UDataAsset
		constexpr auto TunnelDesc = 0x28; // UTunnelDesc*
		constexpr auto RequestedPortalInstance = 0x30; // FStringAssetReference
		constexpr auto SignalActivateLoopSequence = 0x40; // ULevelSequence*
	}

	namespace n_UDeliverableRedirectionSettings { // : UDeveloperSettings
		constexpr auto DeliverableRedirectionActionDataAssetLocation = 0x38; // FStringAssetReference
	}

	namespace n_AServerMigrationSerialisationDetailsTestsActorWithNetActorPtr { // : AActor
		constexpr auto ActorPtr = 0x3d0; // FNetActorPtr
	}

	namespace n_UParticleModuleRotationRate { // : UParticleModuleRotationRateBase
		constexpr auto bUseGroupARotationRateForAllGroups = 0x50; // char : 1
		constexpr auto StartRotationRate = 0x58; // FRawDistributionFloat
		constexpr auto AdditionalStartRotationRate = 0x90; // FRawDistributionFloat [0x5]
	}

	namespace n_UNPCDialogHeaderSimple { // : UNPCDialogHeader
		constexpr auto Text = 0x28; // FText
	}

	namespace n_UWaterPuzzleAlterationMechanismAudioParams { // : UDataAsset
		constexpr auto AlterationMechanismPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto AlterationMechanismActivateEvent = 0x30; // UWwiseEvent*
		constexpr auto AlterationMechanismDeactivateEvents = 0x38; // TArray<UWwiseEvent*>
		constexpr auto MechanismSubmergedSwitchGroup = 0x48; // FName
		constexpr auto MechanismSubmergedSwitchSubmerged = 0x50; // FName
		constexpr auto MechanismSubmergedSwitchNotSubmerged = 0x58; // FName
		constexpr auto WaterLevelPuzzlePool = 0x60; // UWwiseObjectPoolWrapper*
		constexpr auto PuzzleWaterRiseStartEvent = 0x68; // UWwiseEvent*
		constexpr auto PuzzleWaterRiseEndEvent = 0x70; // UWwiseEvent*
		constexpr auto PuzzleWaterFallStartEvent = 0x78; // UWwiseEvent*
		constexpr auto PuzzleWaterFallEndEvent = 0x80; // UWwiseEvent*
	}

	namespace n_USizeBox { // : UContentWidget
		constexpr auto bOverride_WidthOverride = 0x150; // char : 1
		constexpr auto bOverride_HeightOverride = 0x150; // char : 1
		constexpr auto bOverride_MinDesiredWidth = 0x150; // char : 1
		constexpr auto bOverride_MinDesiredHeight = 0x150; // char : 1
		constexpr auto bOverride_MaxDesiredWidth = 0x150; // char : 1
		constexpr auto bOverride_MaxDesiredHeight = 0x150; // char : 1
		constexpr auto WidthOverride = 0x154; // float
		constexpr auto HeightOverride = 0x158; // float
		constexpr auto MinDesiredWidth = 0x15c; // float
		constexpr auto MinDesiredHeight = 0x160; // float
		constexpr auto MaxDesiredWidth = 0x164; // float
		constexpr auto MaxDesiredHeight = 0x168; // float
	}

	namespace n_UMaterialExpressionTwoSidedSign { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UTaleQuestMerchantContractsService { // : UTaleQuestService
		constexpr auto Contracts = 0x60; // TArray<UTaleQuestMerchantContract*>
	}

	namespace n_AActorWithComponentWithDerivedTestInterface { // : AActor
		constexpr auto ComponentWithDerivedTestInterface = 0x3d0; // UComponentWithDerivedTestInterface*
	}

	namespace n_UGoldInContainerComponent { // : ULayerInContainerComponent
		constexpr auto GoldRewardId = 0x620; // FRewardId
	}

	namespace n_UAncientAIFormDataAsset { // : UAthenaAIFormDataAsset
		constexpr auto AwardableComponentType = 0x90; // UActorComponent*
		constexpr auto TimeBeforeDespawn = 0x98; // float
	}

	namespace n_UEllipsoidComponent { // : USphereComponent
		constexpr auto SphereRadius = 0x5a8; // float
	}

	namespace n_UNPCDialogFormattedHeaderByCondition { // : UNPCDialogHeader
		constexpr auto Substitutes = 0x28; // TArray<FNPCDialogFormattedHeaderByConditionText>
		constexpr auto ExpectedParameters = 0x38; // TArray<FString>
		constexpr auto FormattedText = 0x48; // FText
		constexpr auto DefaultText = 0x80; // FText
	}

	namespace n_UEnvQueryGenerator_PointsAtContext { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto Context = 0x90; // UEnvQueryContext*
	}

	namespace n_UAthenaCharacterMovementCheatDetectionSettings { // : UObject
		constexpr auto MinLifetime = 0x28; // float
		constexpr auto MinRatioLifetimeToLifetimeRawTimeDiscrepancy = 0x2c; // float
	}

	namespace n_UMatchmakingVoyageRecipeDesc { // : UVoyageRecipeDataAsset
		constexpr auto MatchmakingRecipe = 0x170; // FMatchmakingVoyageRecipe
	}

	namespace n_UStorageContainerMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UStatusApplicationDesc { // : UObject
		constexpr auto ApplicationEvent = 0x28; // FEventAppliedStatusToTargets
	}

	namespace n_UPiratePreviewComponentFrontend { // : UPiratePreviewComponent
		constexpr auto AnimationDataStore = 0x2a0; // UAnimationDataStore*
		constexpr auto AnimationDataStoreAsset = 0x2a8; // UAnimationDataStoreAsset*
		constexpr auto EmoteAnimData = 0x2c8; // TArray<FEmoteDataEntryFrontend>
		constexpr auto CurrentPirateDescription = 0x2d8; // FPirateDescription
		constexpr auto CurrentPirateOutfit = 0x358; // TArray<UClothingDesc*>
		constexpr auto ThirdPersonAnimSetDataId = 0x368; // UAnimationDataStoreId*
		constexpr auto PirateSelectorComponent = 0x370; // UPirateSelector*
	}

	namespace n_UBackRadialAction { // : URadialAction
		constexpr auto BackActionName = 0x30; // FText
	}

	namespace n_UWeaponItemCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_USoundNodeParamCrossFade { // : USoundNodeDistanceCrossFade
		constexpr auto ParamName = 0x48; // FName
	}

	namespace n_USeasonProgressionUIComponent { // : UActorComponent
		constexpr auto DetailsNavigationDesc = 0xe8; // TArray<FEnableMoreButtonEvent>
		constexpr auto NextReceivedEventsTelemetryData = 0xf8; // FSeasonProgressionUITelemetryFragment
	}

	namespace n_UPetPreviewDataObject { // : UItemPreviewDataObject
		constexpr auto RootItemDesc = 0x1b8; // TWeakObjectPtr<UPetEntitlementBaseDesc>
		constexpr auto CurrentPetDesc = 0x1c0; // UPetEntitlementDesc*
	}

	namespace n_ASpectatorPawn { // : ADefaultPawn
		constexpr auto BaseTurnRate = 0x448; // float
		constexpr auto BaseLookUpRate = 0x44c; // float
		constexpr auto MovementComponent = 0x450; // UPawnMovementComponent*
		constexpr auto CollisionComponent = 0x458; // USphereComponent*
		constexpr auto MeshComponent = 0x460; // UStaticMeshComponent*
		constexpr auto bAddDefaultMovementBindings = 0x468; // char : 1
	}

	namespace n_ACargoRunCrateItemProxy { // : AMerchantCrateItemProxy
		constexpr auto CargoRunCrateComponent = 0x7d8; // UCargoRunCrateComponent*
		constexpr auto NPCDialogComponent = 0x7e0; // UNPCDialogComponent*
	}

	namespace n_AAudioEventToComponentMap { // : AActor
		constexpr auto AudioEventToComponentMapComponent = 0x3d0; // UAudioEventToComponentMapComponent*
	}

	namespace n_UNPCDialogOptionStartVoyageFromDesc { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto CloseOnExecuted = 0xb8; // bool
		constexpr auto LinkedDialog = 0xbc; // int32_t
		constexpr auto VoyageDesc = 0xc0; // UVoyageDescDataAsset*
		constexpr auto TrySetTaleAsCurrentlyActive = 0xc8; // bool
	}

	namespace n_UAnimNotify_AthenaPlayParticleEffectWithOwnerCustomisation { // : UAnimNotify_AthenaPlayParticleEffect
		constexpr auto VfxCustomisationType = 0x88; // UVfxCustomisationType*
	}

	namespace n_UAIFormProgressionTypeList { // : UDataAsset
		constexpr auto AllProgressions = 0x28; // TArray<UAIFormRankProgression*>
	}

	namespace n_UPremiumCurrencyReward { // : UReward
		constexpr auto MinPremiumCurrency = 0x28; // uint32_t
		constexpr auto MaxPremiumCurrency = 0x2c; // uint32_t
	}

	namespace n_ASimpleAnimatedMechanismAction { // : AAnimatedMechanismAction
		constexpr auto Root = 0x520; // USceneComponent*
		constexpr auto Mode = 0x528; // ESimpleAnimatedMechanismActionMode
		constexpr auto AlwaysActive = 0x529; // bool
		constexpr auto OnlyAnimateWhenActive = 0x52a; // bool
		constexpr auto AudioEmitterPool = 0x530; // UWwiseObjectPoolWrapper*
	}

	namespace n_UConsumableWieldableComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UDoubleIntentComponent { // : UActorComponent
		constexpr auto ServerFirstIntent = 0xd0; // float
		constexpr auto ServerSecondIntent = 0xd8; // float
	}

	namespace n_UPlinthInteractableComponent { // : UInteractableComponent
		constexpr auto ActionRulesComponent = 0x118; // UActionRulesComponent*
	}

	namespace n_UParticleModuleVelocityOverLifetime { // : UParticleModuleVelocityBase
		constexpr auto VelOverLife = 0x58; // FRawDistributionVector
		constexpr auto Absolute = 0x90; // char : 1
	}

	namespace n_UOceanCrawlerAnimationData { // : UAnimationData
		constexpr auto OceanCrawlerAnimationDataStructure = 0x28; // FOceanCrawlerAnimationDataStructure
	}

	namespace n_UCutscenePoolType { // : UDataAsset
		constexpr auto DialogueSelectedRandomly = 0x28; // bool
		constexpr auto AvailableIndices = 0x30; // TArray<int32_t>
		constexpr auto OriginalIndices = 0x48; // TArray<int32_t>
	}

	namespace n_UJoinSessionCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UParticleModuleLifetime { // : UParticleModuleLifetimeBase
		constexpr auto bUseGroupAValuesForAllGroups = 0x50; // char : 1
		constexpr auto LifeTime = 0x58; // FRawDistributionFloat
		constexpr auto AdditionalLifetimes = 0x90; // FRawDistributionFloat [0x5]
	}

	namespace n_UMaterialExpressionDynamicParameter { // : UMaterialExpression
		constexpr auto ParamNames = 0x70; // TArray<FString>
		constexpr auto DefaultValue = 0x80; // FLinearColor
	}

	namespace n_ACinematicCameraController { // : ADebugCameraController
		constexpr auto AthenaPlayerController = 0x778; // AAthenaPlayerController*
		constexpr auto BindingsToRemove = 0x780; // TArray<FName>
	}

	namespace n_UPoseableMeshMemoryConstraintComponent { // : UPoseableMeshComponent
		constexpr auto Handler = 0x7a0; // UMeshMemoryConstraintHandler*
		constexpr auto FallbackOverrideMaterials = 0x7a8; // TArray<FStringAssetReference>
		constexpr auto MeshFallbackCategory = 0x7b8; // UMeshMemoryConstraintCategory*
		constexpr auto MeshReference = 0x7c0; // FStringAssetReference
		constexpr auto CachedMeshResourceSize = 0x7d0; // int64_t
		constexpr auto MemoryAccountedFor = 0x7d8; // bool
		constexpr auto NeedMeshLoadOnServer = 0x7d9; // bool
		constexpr auto BudgetToCountMemoryAgainstIfNoFallback = 0x7e0; // UMeshMemoryConstraintBudget*
	}

	namespace n_UNPCDialogTreeData { // : UDataAsset
		constexpr auto Dialogs = 0x28; // TArray<FNPCDialogData>
		constexpr auto SourceText = 0x38; // FString
	}

	namespace n_UAnimCompress { // : UObject
		constexpr auto Description = 0x28; // FString
		constexpr auto bNeedsSkeleton = 0x38; // char : 1
		constexpr auto TranslationCompressionFormat = 0x3c; // AnimationCompressionFormat
		constexpr auto RotationCompressionFormat = 0x3d; // AnimationCompressionFormat
		constexpr auto ScaleCompressionFormat = 0x3e; // AnimationCompressionFormat
	}

	namespace n_USwimmingCreatureMovementComponent { // : UFloatingPawnMovement
		constexpr auto MinPlayRate = 0x188; // float
		constexpr auto MaxPlayRate = 0x18c; // float
		constexpr auto NetworkSimulatedSmoothLocationTime = 0x190; // float
		constexpr auto NetworkSimulatedSmoothRotationTime = 0x194; // float
		constexpr auto WaterSurfaceCheckHeightOffset = 0x198; // float
		constexpr auto DistanceFromWaterSurfaceForMaxAdjustmentVelocity = 0x19c; // float
		constexpr auto MaxWaterSurfaceAdjustmentVelocity = 0x1a0; // float
		constexpr auto VelocitySmoothingFactor = 0x1a4; // float
		constexpr auto SharkFinHeightCheckOffset = 0x1a8; // float
		constexpr auto SinkingAccelerationOverTime = 0x1b0; // UCurveFloat*
		constexpr auto PushOutHemisphereSteps = 0x1b8; // int32_t
		constexpr auto PushOutStepsOnNarrowestHemisphereBand = 0x1bc; // int32_t
		constexpr auto PushOutStepsOnWidestHemisphereBand = 0x1c0; // int32_t
		constexpr auto MaxExtraPushOut = 0x1c4; // float
		constexpr auto NumStepsToRampUpToMaxPushOut = 0x1c8; // int32_t
		constexpr auto PenetrationPanicCollisionProfile = 0x1cc; // FCollisionProfileName
		constexpr auto ShouldDestroyOnUnresolvedCollision = 0x1d4; // bool
		constexpr auto SmoothNetUpdateLocationTime = 0x1d8; // float
		constexpr auto SmoothNetUpdateRotationTime = 0x1dc; // float
		constexpr auto MaxMovementTimeAllowedForSmoothNetUpdate = 0x1e0; // float
		constexpr auto DebugDrawHeight = 0x1e4; // float
		constexpr auto DebugDrawRadius = 0x1e8; // float
		constexpr auto ReplicatedSwimmingMode = 0x1ec; // ESwimmingMode
		constexpr auto AIStrategyMovementProperties = 0x210; // TArray<FSwimmingCreatureAIStrategyMovementProperties>
		constexpr auto ReplicatedMovementData = 0x220; // FSwimmingCreatureMovementReplicatedData
	}

	namespace n_UTaleQuestMultiTargetCompassRemoveTrackedLocationStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMovieSceneMarginSection { // : UMovieSceneSection
		constexpr auto TopCurve = 0xa0; // FRichCurve
		constexpr auto LeftCurve = 0x118; // FRichCurve
		constexpr auto RightCurve = 0x190; // FRichCurve
		constexpr auto BottomCurve = 0x208; // FRichCurve
	}

	namespace n_UDemoNetDriver { // : UNetDriver
		constexpr auto NetConnectionClassName = 0x38; // FString
		constexpr auto MaxDownloadSize = 0x48; // int32_t
		constexpr auto bClampListenServerTickRate = 0x4c; // char : 1
		constexpr auto NetServerMaxTickRate = 0x50; // int32_t
		constexpr auto MaxInternetClientRate = 0x54; // int32_t
		constexpr auto MaxClientRate = 0x58; // int32_t
		constexpr auto ServerTravelPause = 0x5c; // float
		constexpr auto SpawnPrioritySeconds = 0x60; // float
		constexpr auto RelevantTimeout = 0x64; // float
		constexpr auto KeepAliveTime = 0x68; // float
		constexpr auto InitialConnectTimeout = 0x6c; // float
		constexpr auto ConnectionTimeout = 0x70; // float
		constexpr auto ServerConnection = 0x78; // UNetConnection*
		constexpr auto ClientConnections = 0x80; // TArray<UNetConnection*>
		constexpr auto World = 0x90; // UWorld*
		constexpr auto NetConnectionClass = 0xc8; // UObject*
		constexpr auto RoleProperty = 0xd0; // UProperty*
		constexpr auto RemoteRoleProperty = 0xd8; // UProperty*
		constexpr auto NetDriverName = 0xe0; // FName
	}

	namespace n_UMovieScene3DAttachSection { // : UMovieScene3DConstraintSection
		constexpr auto AttachSocketName = 0xa8; // FName
		constexpr auto AttachComponentName = 0xb0; // FName
		constexpr auto bConstrainTx = 0xb8; // char : 1
		constexpr auto bConstrainTy = 0xb8; // char : 1
		constexpr auto bConstrainTz = 0xb8; // char : 1
		constexpr auto bConstrainRx = 0xb8; // char : 1
		constexpr auto bConstrainRy = 0xb8; // char : 1
		constexpr auto bConstrainRz = 0xb8; // char : 1
	}

	namespace n_UAssignItemStepDesc { // : UTaleQuestStepDesc
		constexpr auto TypeVar = 0x80; // FQuestVariableClass
		constexpr auto TypeValue = 0x90; // UItemDesc*
	}

	namespace n_AEmitterCameraLensEffectBase { // : AEmitter
		constexpr auto PS_CameraEffect = 0x420; // UParticleSystem*
		constexpr auto PS_CameraEffectNonExtremeContent = 0x428; // UParticleSystem*
		constexpr auto BaseFOV = 0x430; // float
		constexpr auto DistFromCamera = 0x434; // float
		constexpr auto bAllowMultipleInstances = 0x438; // char : 1
		constexpr auto EmittersToTreatAsSame = 0x440; // TArray<AEmitterCameraLensEffectBase*>
		constexpr auto BaseCamera = 0x450; // APlayerCameraManager*
	}

	namespace n_UAnimNotifyState_PropagateCurveValuesToMaterials { // : UAnimNotifyState
		constexpr auto CurveValues = 0x28; // TArray<FCurveUpdateValues>
		constexpr auto DoNotPropagteCurveValues = 0x38; // bool
	}

	namespace n_UMovieSceneAudioTrack { // : UMovieSceneNameableTrack
		constexpr auto AudioSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UGameplayTaskResource { // : UObject
		constexpr auto ManualResourceID = 0x28; // int32_t
		constexpr auto bManuallySetID = 0x30; // char : 1
	}

	namespace n_AGameplayDebuggingReplicator { // : AActor
		constexpr auto DebugComponentClassName = 0x3d0; // FString
		constexpr auto DebugComponentHUDClassName = 0x3e0; // FString
		constexpr auto DebugComponentControllerClassName = 0x3f0; // FString
		constexpr auto MaxEQSQueries = 0x400; // int32_t
		constexpr auto DebugComponent = 0x408; // UGameplayDebuggingComponent*
		constexpr auto LocalPlayerOwner = 0x410; // APlayerController*
		constexpr auto LastSelectedActorToDebug = 0x418; // AActor*
		constexpr auto bIsGlobalInWorld = 0x420; // bool
		constexpr auto bAutoActivate = 0x421; // bool
		constexpr auto OverHead = 0x422; // bool
		constexpr auto Basic = 0x423; // bool
		constexpr auto BehaviorTree = 0x424; // bool
		constexpr auto EQS = 0x425; // bool
		constexpr auto EnableEQSOnHUD = 0x426; // bool
		constexpr auto ActiveEQSIndex = 0x428; // int32_t
		constexpr auto Perception = 0x42c; // bool
		constexpr auto GameView1 = 0x42d; // bool
		constexpr auto GameView2 = 0x42e; // bool
		constexpr auto GameView3 = 0x42f; // bool
		constexpr auto GameView4 = 0x430; // bool
		constexpr auto GameView5 = 0x431; // bool
	}

	namespace n_UCharacterFlammableComponent { // : UActorFlammableComponent
		constexpr auto FireFalloffDuration = 0x140; // float
		constexpr auto FireRateOfFalloffInRain = 0x144; // float
		constexpr auto FireFalloffMultiplier = 0x148; // float
		constexpr auto VfxSocketName = 0x14c; // FName
		constexpr auto SocketRelativeOffset = 0x160; // FTransform
		constexpr auto CachedWorld = 0x218; // UWorld*
		constexpr auto FireSettingsAsset = 0x228; // UFireSettingsDataAsset*
	}

	namespace n_AMockHitReactionActor { // : AActor
		constexpr auto MockHitReactionComponent = 0x3e0; // UMockHitReactionComponent*
	}

	namespace n_UBTDecorator_LeftOfAIPawn { // : UBTDecorator_BaseConditional
		constexpr auto TargetKey = 0x68; // FBlackboardKeySelector
		constexpr auto ReverseLogic = 0x90; // bool
	}

	namespace n_UCommodityRedemptionComponent { // : UActorComponent
		constexpr auto RedeemTooltipText = 0xd0; // FText
		constexpr auto PendingRedemptions = 0x180; // TArray<AActor*>
	}

	namespace n_USubsurfaceProfile { // : UObject
		constexpr auto Settings = 0x28; // FSubsurfaceProfileStruct
	}

	namespace n_AFogBank { // : AFogVolume
		constexpr auto FogBankDataAsset = 0x3f8; // UFogBankDataAsset*
		constexpr auto Settings = 0x400; // FFogBankSettings
	}

	namespace n_UGameplayTask_WaitDelay { // : UGameplayTask
		constexpr auto OnFinish = 0x58; // FScriptMulticastDelegate
	}

	namespace n_USpawnPhasedItemStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UVisualHealthResponseDataAsset { // : UDataAsset
		constexpr auto GatedByHealthVfxAscendingOrder = 0x28; // TArray<UObject*>
		constexpr auto GatedByHealthVfxSocketName = 0x38; // FName
		constexpr auto GatedByHealthVfxValidUnderwater = 0x40; // bool
		constexpr auto HealthPropertyName = 0x44; // FName
		constexpr auto SignificantHealthChangeNormalised = 0x4c; // float
	}

	namespace n_UMovieSceneSlomoSection { // : UMovieSceneFloatSection
		constexpr auto FloatCurve = 0xa0; // FRichCurve
	}

	namespace n_UWidgetAnimation { // : UMovieSceneSequence
		constexpr auto OnAnimationStarted = 0x2a8; // FScriptMulticastDelegate
		constexpr auto OnAnimationFinished = 0x2b8; // FScriptMulticastDelegate
		constexpr auto MovieScene = 0x2c8; // UMovieScene*
		constexpr auto AnimationBindings = 0x2d0; // TArray<FWidgetAnimationBinding>
	}

	namespace n_ULightmappedSurfaceCollection { // : UObject
		constexpr auto SourceModel = 0x28; // UModel*
		constexpr auto Surfaces = 0x30; // TArray<int32_t>
	}

	namespace n_UBTTask_WieldItemByCategory { // : UBTTask_WaitForWieldBase
		constexpr auto EnableOverrideItemCategory = 0x68; // bool
		constexpr auto OverrideItemCategory = 0x70; // UItemCategory*
		constexpr auto BlackboardKey = 0x78; // FBlackboardKeySelector
		constexpr auto AllowWieldNoneWhenNoItemOfCategory = 0xa0; // bool
	}

	namespace n_UTaleQuestStructGenService { // : UTaleQuestService
		constexpr auto Params = 0x60; // FTQStructGenParams
		constexpr auto QuestChain = 0x160; // TArray<FTQStructGenSelection>
		constexpr auto ResourceBroker = 0x170; // UTaleResourceBrokerService*
		constexpr auto GameEventExclusionZoneService = 0x178; // UGameEventExclusionZoneTaleService*
	}

	namespace n_UKnockbackAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto ExplosionInfo = 0x40; // FExplosionInfo
	}

	namespace n_ACannon { // : AControllableObject
		constexpr auto BaseMeshComponent = 0x528; // USkeletalMeshComponent*
		constexpr auto BarrelMeshComponent = 0x530; // UStaticMeshComponent*
		constexpr auto FuseMeshComponent = 0x538; // UStaticMeshComponent*
		constexpr auto CustomizationComponent = 0x540; // UReplicatedShipPartCustomizationComponent*
		constexpr auto LoadableComponent = 0x548; // ULoadableComponent*
		constexpr auto LoadingPointComponent = 0x550; // ULoadingPointComponent*
		constexpr auto CannonBarrelInteractionComponent = 0x558; // UChildActorComponent*
		constexpr auto FuseComponent = 0x560; // UFuseComponent*
		constexpr auto CameraSocket = 0x568; // FName
		constexpr auto CameraInsideCannonSocket = 0x570; // FName
		constexpr auto LaunchSocket = 0x578; // FName
		constexpr auto TooltipSocket = 0x580; // FName
		constexpr auto AudioAimRTPCName = 0x588; // FName
		constexpr auto InsideCannonRTPCName = 0x590; // FName
		constexpr auto ProjectileClass = 0x598; // AActor*
		constexpr auto TimePerFire = 0x5a0; // float
		constexpr auto ProjectileSpeed = 0x5a4; // float
		constexpr auto ProjectileGravityScale = 0x5a8; // float
		constexpr auto PitchRange = 0x5ac; // FFloatRange
		constexpr auto YawRange = 0x5bc; // FFloatRange
		constexpr auto PitchSpeed = 0x5cc; // float
		constexpr auto YawSpeed = 0x5d0; // float
		constexpr auto CameraShake = 0x5d8; // UCameraShake*
		constexpr auto ShakeInnerRadius = 0x5e0; // float
		constexpr auto ShakeOuterRadius = 0x5e4; // float
		constexpr auto CannonFiredAINoiseRange = 0x5e8; // float
		constexpr auto AINoiseTag = 0x5ec; // FName
		constexpr auto CannonDisabledToolTipText = 0x5f8; // FText
		constexpr auto LoadingDisabledToolTipText = 0x630; // FText
		constexpr auto DefaultFOV = 0x668; // float
		constexpr auto AimFOV = 0x66c; // float
		constexpr auto IntoAimBlendSpeed = 0x670; // float
		constexpr auto OutOfAimBlendSpeed = 0x674; // float
		constexpr auto FireSfx = 0x678; // UWwiseEvent*
		constexpr auto DryFireSfx = 0x680; // UWwiseEvent*
		constexpr auto LoadingSfx_Play = 0x688; // UWwiseEvent*
		constexpr auto LoadingSfx_Stop = 0x690; // UWwiseEvent*
		constexpr auto UnloadingSfx_Play = 0x698; // UWwiseEvent*
		constexpr auto UnloadingSfx_Stop = 0x6a0; // UWwiseEvent*
		constexpr auto LoadedPlayerSfx = 0x6a8; // UWwiseEvent*
		constexpr auto UnloadedPlayerSfx = 0x6b0; // UWwiseEvent*
		constexpr auto FiredPlayerSfx = 0x6b8; // UWwiseEvent*
		constexpr auto SfxPool = 0x6c0; // UWwiseObjectPoolWrapper*
		constexpr auto StartPitchMovement = 0x6c8; // UWwiseEvent*
		constexpr auto StopPitchMovement = 0x6d0; // UWwiseEvent*
		constexpr auto StartYawMovement = 0x6d8; // UWwiseEvent*
		constexpr auto StopYawMovement = 0x6e0; // UWwiseEvent*
		constexpr auto StopMovementAtEnd = 0x6e8; // UWwiseEvent*
		constexpr auto SfxMovementPool = 0x6f0; // UWwiseObjectPoolWrapper*
		constexpr auto FuseVfxFirstPerson = 0x6f8; // UObject*
		constexpr auto FuseVfxThirdPerson = 0x700; // UObject*
		constexpr auto MuzzleFlashVfxFirstPerson = 0x708; // UObject*
		constexpr auto MuzzleFlashVfxThirdPerson = 0x710; // UObject*
		constexpr auto FuseSocketName = 0x718; // FName
		constexpr auto BarrelSocketName = 0x720; // FName
		constexpr auto RadialCategoryFilter = 0x728; // UItemCategory*
		constexpr auto DefaultLoadedItemDesc = 0x730; // UItemDesc*
		constexpr auto ClientRotationBlendTime = 0x738; // float
		constexpr auto LoadedItemInfo = 0x740; // AItemInfo*
		constexpr auto ServerPitch = 0x754; // float
		constexpr auto ServerYaw = 0x758; // float
		constexpr auto LoadedItemVFXComp = 0x760; // UParticleSystemComponent*
		constexpr auto DefaultFuseMesh = 0x768; // UStaticMesh*
		constexpr auto InteractionState = 0xc00; // ECannonInteractionState
	}

	namespace n_UComponentAggregatorComponent { // : UActorComponent
		constexpr auto Aggregatables = 0xd0; // TArray<UObject*>
	}

	namespace n_UEnvQueryTest_Dot { // : UEnvQueryTest
		constexpr auto LineA = 0x170; // FEnvDirection
		constexpr auto LineB = 0x190; // FEnvDirection
		constexpr auto TestMode = 0x1b0; // EEnvTestDot
		constexpr auto bAbsoluteValue = 0x1b1; // bool
	}

	namespace n_UShipHullCollisionComponent { // : UActorComponent
		constexpr auto SolidCollisionRetainTime = 0xc8; // float
		constexpr auto LandCollisionRetainTime = 0xcc; // float
		constexpr auto ImpactStrengthToDamageLevelMapping = 0xd0; // UCurveFloat*
		constexpr auto MinIntervalBetweenHitDamage = 0xd8; // float
		constexpr auto MinIntervalBetweenLandscapeHitDamage = 0xdc; // float
		constexpr auto MinIntervalBetweenShipHitDamage = 0xe0; // float
		constexpr auto HullDamageDataAsset = 0xe8; // UShipHullDamageDataAsset*
		constexpr auto ShipFwdSpeedToFeedbackAmplitude = 0xf0; // UCurveFloat*
		constexpr auto HitLandForceFeedbackEffects = 0xf8; // TArray<UForceFeedbackEffect*>
		constexpr auto FeedbackStrengthToRumbleIndexMapping = 0x108; // UCurveFloat*
		constexpr auto CameraShake = 0x110; // UCameraShake*
		constexpr auto MinIntervalBetweenHitFeedback = 0x118; // float
		constexpr auto StartScrapingEvent = 0x120; // UWwiseEvent*
		constexpr auto StopScrapingEvent = 0x128; // UWwiseEvent*
		constexpr auto BarrelBumpEvent = 0x130; // UWwiseEvent*
		constexpr auto ShipDamagePool = 0x138; // UWwiseObjectPoolWrapper*
		constexpr auto ShipDamageImpactRtpc = 0x140; // FName
		constexpr auto MaxIntervalToDetermineAudioScrape = 0x148; // float
		constexpr auto MinSampledSpeedMagnitudeForMaxScrapeAudio = 0x14c; // float
		constexpr auto Ship = 0x160; // AShip*
	}

	namespace n_UCheckedStateBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UEventTaleQuestService { // : UTaleQuestService
		constexpr auto BoundDelegates = 0x60; // TMap<FName, FEventTaleQuestServiceEntry>
	}

	namespace n_USoundNodeModulator { // : USoundNode
		constexpr auto PitchMin = 0x38; // float
		constexpr auto PitchMax = 0x3c; // float
		constexpr auto VolumeMin = 0x40; // float
		constexpr auto VolumeMax = 0x44; // float
	}

	namespace n_UOpenableItemReactionComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_APortalService { // : AActor
		constexpr auto Params = 0x3d8; // UPortalServiceParams*
		constexpr auto ActivePortals = 0x3e0; // TArray<FActivePortal>
		constexpr auto PortalSpawnInfos = 0x3f0; // TArray<FPortalSpawningInfo>
	}

	namespace n_ASkeletonFortDoor { // : AInteractableObject
		constexpr auto DoorDelayTime = 0x460; // float
		constexpr auto AmountDoorOpens = 0x464; // float
		constexpr auto DoorOpeningSpeed = 0x468; // float
		constexpr auto ItemToWieldToUnlockDoor = 0x470; // UItemDesc*
		constexpr auto PlayerStatToFireOnOpen = 0x478; // FPlayerStat
		constexpr auto PlayerAllianceStatToFireOnOpen = 0x47c; // FPlayerStat
		constexpr auto FireStatToAllNearbyCrews = 0x480; // bool
		constexpr auto DoorMesh = 0x498; // UStaticMeshComponent*
		constexpr auto LandmarkReactionsWhenDoorOpens = 0x4a0; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto LandmarkReactionPlayer = 0x4b0; // ALandmarkReactionPlayer*
		constexpr auto InteractionRegion = 0x4b8; // UInteractableComponent*
		constexpr auto DoorUnlockSound = 0x4c0; // UWwiseEvent*
		constexpr auto DoorUnlockPool = 0x4c8; // UWwiseObjectPoolWrapper*
		constexpr auto KeyMountLocation = 0x4d0; // FName
		constexpr auto KeyMountTime = 0x4d8; // float
		constexpr auto KeyDestroyTime = 0x4dc; // float
		constexpr auto ServerDoorState = 0x4e0; // EDoorState
		constexpr auto OverrideItemToWieldToUnlockDoor = 0x4e8; // UItemDesc*
		constexpr auto OverridePlayerStatToFireOnOpen = 0x4f0; // FPlayerStat
	}

	namespace n_ATestAbstractActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UBTDecorator_IsPerchedInHangout { // : UBTDecorator_BaseConditional
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UMovieSceneBoolTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UElectricShieldAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto ChargeUpTime = 0xc8; // float
		constexpr auto BuffInterruptedStatusEffect = 0xd0; // FStatus
		constexpr auto ElectricShieldStatusEffect = 0xe8; // FStatus
	}

	namespace n_UAnimNotify_SetCosmeticItemVisibility { // : UAnimNotify
		constexpr auto ItemLocation = 0x38; // EWieldAnimationLocation
		constexpr auto Visible = 0x39; // bool
		constexpr auto RenderShadow = 0x3a; // bool
		constexpr auto RenderShadowWhenHidden = 0x3b; // bool
		constexpr auto UpdateForRole = 0x3c; // bool
		constexpr auto UpdateRole = 0x3d; // ENetRole
	}

	namespace n_UAIShipItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto SpawnAlways = 0x428; // bool
		constexpr auto SpawnForBattleFinalShip = 0x429; // bool
		constexpr auto SpawnForPassiveShip = 0x42a; // bool
		constexpr auto SpawnForAggressiveShip = 0x42b; // bool
	}

	namespace n_AAthenaAIControllerBase { // : AAIController
		constexpr auto bLOSflag = 0x458; // char : 1
		constexpr auto bSkipExtraLOSChecks = 0x458; // char : 1
		constexpr auto bAllowStrafe = 0x458; // char : 1
		constexpr auto bWantsPlayerState = 0x458; // char : 1
		constexpr auto bDisableControlRotation = 0x458; // char : 1
		constexpr auto PathFollowingComponent = 0x460; // UPathFollowingComponent*
		constexpr auto BrainComponent = 0x468; // UBrainComponent*
		constexpr auto PerceptionComponent = 0x470; // UAIPerceptionComponent*
		constexpr auto ActionsComp = 0x478; // UPawnActionsComponent*
		constexpr auto Blackboard = 0x480; // UBlackboardComponent*
		constexpr auto CachedGameplayTasksComponent = 0x488; // UGameplayTasksComponent*
		constexpr auto ReceiveMoveCompleted = 0x4a0; // FScriptMulticastDelegate
	}

	namespace n_ABeacon { // : AInteractableObject
		constexpr auto Mesh = 0x470; // UStaticMeshComponent*
		constexpr auto BeaconActiveParticleSystem = 0x478; // UParticleSystemComponent*
		constexpr auto PointLight = 0x480; // UPointLightComponent*
		constexpr auto EnableParticleSystemTint = 0x488; // bool
		constexpr auto InteractableComponent = 0x490; // UInteractableComponent*
		constexpr auto ExtinguishedVFX = 0x498; // UObject*
		constexpr auto WwiseEmitterName = 0x4a0; // FName
		constexpr auto StartLoopFlameSfx = 0x4a8; // UWwiseEvent*
		constexpr auto StopLoopFlameSfx = 0x4b0; // UWwiseEvent*
		constexpr auto FlameTransferSfx = 0x4b8; // UWwiseEvent*
		constexpr auto ExtinguishedSfx = 0x4c0; // UWwiseEvent*
		constexpr auto BeaconWwisePool = 0x4c8; // UWwiseObjectPoolWrapper*
		constexpr auto InteractionRadius = 0x4d0; // float
		constexpr auto TakeFlameTooltipText = 0x4d8; // FText
		constexpr auto CannotTakeFlameTooltipText = 0x510; // FText
		constexpr auto LanternNotRaisedToolTipText = 0x548; // FText
		constexpr auto NotWieldingFlameTooltipText = 0x580; // FText
		constexpr auto SetFlameTooltipText = 0x5b8; // FText
		constexpr auto CanTakeFlameFromBeacon = 0x5f0; // bool
		constexpr auto CanSetFlameOnBeacon = 0x5f1; // bool
		constexpr auto StartLit = 0x5f2; // bool
		constexpr auto StartingType = 0x5f3; // EFlameOfFateType
		constexpr auto StatToFire = 0x5f4; // FPlayerStat
		constexpr auto StatMap = 0x5f8; // TArray<FBeaconLitWithFlameOfFateStatsToFire>
		constexpr auto ColourChangeCurveFX = 0x608; // UCurveLinearColor*
		constexpr auto ColourChangeCurveLight = 0x610; // UCurveLinearColor*
		constexpr auto ExtinguishFadeTime = 0x618; // float
		constexpr auto BeaconData = 0x61c; // FBeaconData
		constexpr auto ExtinguishFXComponent = 0x620; // UParticleSystemComponent*
		constexpr auto EventDispatcher = 0x628; // FObjectMessagingDispatcher
	}

	namespace n_UUserDefinedStruct { // : UScriptStruct
		constexpr auto Guid = 0x98; // FGuid
	}

	namespace n_UBTService { // : UBTAuxiliaryNode
		constexpr auto Interval = 0x60; // float
		constexpr auto RandomDeviation = 0x64; // float
		constexpr auto bCallTickOnSearchStart = 0x68; // char : 1
		constexpr auto bRestartTimerOnEachActivation = 0x68; // char : 1
	}

	namespace n_UCursor_C { // : UUserWidget
		constexpr auto Image_158 = 0x230; // UImage*
	}

	namespace n_APhysicsThruster { // : ARigidBodyBase
		constexpr auto ThrusterComponent = 0x3d0; // UPhysicsThrusterComponent*
	}

	namespace n_UUnderwaterEffectsComponent { // : UWwiseEmitterComponent
		constexpr auto UnderwaterEffectsData = 0x2e0; // UUnderwaterEffectsDataAsset*
		constexpr auto SpawnedVfx = 0x2e8; // UParticleSystemComponent*
	}

	namespace n_UActionStatePriorityTableData { // : UDataAsset
		constexpr auto StateDefaultValue = 0x28; // TArray<FActionStatePriorityRelationship>
		constexpr auto PriorityTableEntry = 0x38; // TArray<FActionStatePriorityList>
	}

	namespace n_UEarthquakeSetupDataAsset { // : UDataAsset
		constexpr auto WarmUpDuration = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto EarthquakeDuration = 0x58; // FWeightedProbabilityRangeOfRanges
		constexpr auto CoolDownDuration = 0x88; // FWeightedProbabilityRangeOfRanges
		constexpr auto DormantDuration = 0xb8; // FWeightedProbabilityRangeOfRanges
		constexpr auto ChanceOfTriggeringAVolcano = 0xe8; // float
		constexpr auto PercentageThroughEarthquakeToStartVolcano = 0xec; // FFloatRange
		constexpr auto WarmupPlayerFeedback = 0x100; // FPlayerFeedback
		constexpr auto ActivePlayerFeedback = 0x180; // FPlayerFeedback
		constexpr auto StaggerStrengthDuration = 0x200; // FWeightedProbabilityRangeOfRanges
		constexpr auto StaggerStrengthModifierWhenOnAShip = 0x230; // float
		constexpr auto PercentageThroughCameraShakeToStartNextOne = 0x234; // FFloatRange
		constexpr auto TimeToShipPush = 0x244; // FFloatRange
		constexpr auto ForceToApplyToShip = 0x258; // FWeightedProbabilityRangeOfRanges
		constexpr auto MaximumShipSpeedToBePushed = 0x288; // float
		constexpr auto ChanceEarthquakeTriggersGeysers = 0x28c; // float
		constexpr auto TimeBetweenLocalEffects = 0x290; // FWeightedProbabilityRangeOfRanges
		constexpr auto NumberOfLocalEffectsToTrigger = 0x2c0; // FWeightedProbabilityRange
		constexpr auto EffectConeAngle = 0x2e0; // float
		constexpr auto EffectRaycastDistanceInMetres = 0x2e4; // float
		constexpr auto EarthquakeEffects = 0x2e8; // FDistanceThrottledRandomParticleSystemPicker
		constexpr auto WarmupWindTurbulence = 0x2f8; // float
		constexpr auto WarmupGustPower = 0x2fc; // FFloatRange
		constexpr auto ActiveWindTurbulence = 0x30c; // float
		constexpr auto ActiveGustPower = 0x310; // FFloatRange
	}

	namespace n_ATaleProgressStatue { // : AActor
		constexpr auto StaticMeshComponent = 0x3d0; // UStaticMeshComponent*
		constexpr auto InteractionSocketName = 0x3d8; // FName
		constexpr auto InteractableComponent = 0x3e0; // UTaleProgressStatueInteractableComponent*
		constexpr auto StatueProgressLevel = 0x3e8; // int32_t
		constexpr auto HasReturnToShipInteraction = 0x3ec; // bool
		constexpr auto ValidTaleCampaignIds = 0x3f0; // TArray<FName>
		constexpr auto DynamicGlowMaterialInstance = 0x400; // UMaterialInstanceDynamic*
		constexpr auto ResumeFromTaleProgressParticleSystem = 0x408; // UParticleSystemComponent*
		constexpr auto GlowParamName = 0x410; // FName
		constexpr auto GlowOffEmissiveScalarValue = 0x418; // int32_t
		constexpr auto GlowOnEmissiveScalarValue = 0x41c; // int32_t
	}

	namespace n_UChainLightningReceiverComponent { // : UActorComponent
		constexpr auto ShockDuration = 0xd0; // float
	}

	namespace n_UParticleModuleLight_Seeded { // : UParticleModuleLight
		constexpr auto RandomSeedInfo = 0x138; // FParticleRandomSeedInfo
	}

	namespace n_UBTTask_SetBlackboardIntValue { // : UBTTask_BlackboardBase
		constexpr auto IntValue = 0x88; // FAIDataProviderIntValue
	}

	namespace n_UPetOwnerComponent { // : UActorComponent
		constexpr auto PetInfo = 0xe0; // AItemInfo*
	}

	namespace n_USpotLightComponent { // : UPointLightComponent
		constexpr auto InnerConeAngle = 0x478; // float
		constexpr auto OuterConeAngle = 0x47c; // float
		constexpr auto LightShaftConeAngle = 0x480; // float
		constexpr auto KickBackRatio = 0x484; // float
	}

	namespace n_ACharacter { // : APawn
		constexpr auto Mesh = 0x448; // USkeletalMeshComponent*
		constexpr auto CharacterMovement = 0x450; // UCharacterMovementComponent*
		constexpr auto CapsuleComponent = 0x458; // UCapsuleComponent*
		constexpr auto BasedMovement = 0x460; // FBasedMovementInfo
		constexpr auto ReplicatedBasedMovement = 0x498; // FBasedMovementInfo
		constexpr auto BaseTranslationOffset = 0x4d0; // FVector
		constexpr auto BaseRotationOffset = 0x4e0; // FQuat
		constexpr auto ReplicatedMovementMode = 0x4f0; // char
		constexpr auto bInBaseReplication = 0x4f1; // bool
		constexpr auto CrouchedEyeHeight = 0x4f4; // float
		constexpr auto bIsCrouched = 0x4f8; // char : 1
		constexpr auto bPressedJump = 0x4f8; // char : 1
		constexpr auto bClientUpdating = 0x4f8; // char : 1
		constexpr auto bClientWasFalling = 0x4f8; // char : 1
		constexpr auto bClientResimulateRootMotion = 0x4f8; // char : 1
		constexpr auto bSimGravityDisabled = 0x4f8; // char : 1
		constexpr auto bServerMoveIgnoreRootMotion = 0x4f8; // char : 1
		constexpr auto JumpKeyHoldTime = 0x4fc; // float
		constexpr auto JumpMaxHoldTime = 0x500; // float
		constexpr auto OnReachedJumpApex = 0x508; // FScriptMulticastDelegate
		constexpr auto OnCharacterMovementUpdated = 0x528; // FScriptMulticastDelegate
		constexpr auto ClientRootMotionParams = 0x540; // FRootMotionMovementParams
		constexpr auto RootMotionRepMoves = 0x580; // TArray<FSimulatedRootMotionReplicatedMove>
		constexpr auto RepRootMotion = 0x590; // FRepRootMotionMontage
	}

	namespace n_AAthenaGameplayDebuggingHUDComponent { // : AGameplayDebuggingHUDComponent
		constexpr auto MenuStartX = 0x3d0; // float
		constexpr auto MenuStartY = 0x3d4; // float
		constexpr auto DebugInfoStartX = 0x3d8; // float
		constexpr auto DebugInfoStartY = 0x3dc; // float
		constexpr auto Canvas = 0x3e0; // UCanvas*
		constexpr auto PlayerOwner = 0x3e8; // APlayerController*
	}

	namespace n_UPendingNetGame { // : UObject
		constexpr auto NetDriver = 0x30; // UNetDriver*
		constexpr auto PreLoadedMapPackage = 0xe8; // UPackage*
		constexpr auto PreLoadedWorld = 0xf0; // UWorld*
	}

	namespace n_UShipwreckSiteGeneratorNoneComponent { // : UShipwreckSiteGeneratorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UHeightTriggerableEffectsComponent { // : UActorComponent
		constexpr auto AudioParams = 0xc8; // UHeightTriggerableAudioComponentParams*
		constexpr auto EmitterOwner = 0xd0; // FActorComponentSelector
		constexpr auto EmitterOffset = 0xe0; // FVector
		constexpr auto UseParentEmitter = 0xec; // bool
		constexpr auto RisingAudioTriggerValue = 0xf0; // float
		constexpr auto CameraShake = 0xf8; // UCameraShake*
		constexpr auto ShakeInnerRadius = 0x100; // float
		constexpr auto ShakeOuterRadius = 0x104; // float
	}

	namespace n_UAppliedStatusToMultipleAIWithFormsStatCondition { // : UStatCondition
		constexpr auto Status = 0x28; // TArray<UStatusBase*>
		constexpr auto AICountMinimum = 0x38; // int32_t
		constexpr auto AllowAllForms = 0x3c; // bool
		constexpr auto AllowedAIForms = 0x40; // TArray<UClass*>
		constexpr auto AIClassesToIgnore = 0x50; // TArray<UAIClassId*>
		constexpr auto AllowedSources = 0x60; // TArray<UClass*>
	}

	namespace n_ADirectionalLight { // : ALight
		constexpr auto LightComponent = 0x3d0; // ULightComponent*
		constexpr auto bEnabled = 0x3d8; // char : 1
	}

	namespace n_UAnimatedStepsComponent { // : UActorComponent
		constexpr auto Mesh = 0xc8; // UPoseableSkeletalMeshComponent*
		constexpr auto Boxes = 0xd0; // TArray<UBoxComponent*>
		constexpr auto BoxOrigins = 0xe0; // TArray<FVector>
	}

	namespace n_AStorageCrateItemProxy { // : AFloatingItemProxy
		constexpr auto RetractableComponent = 0x790; // URetractableComponent*
	}

	namespace n_AStrongholdKeyProxy { // : AFloatingItemProxy
		constexpr auto PhysicsErrorCorrection = 0x630; // FRigidBodyErrorCorrection
		constexpr auto BaseComponent = 0x650; // UBoxComponent*
		constexpr auto MovementTimeStamp = 0x688; // FNetTimeStampCalculator
		constexpr auto TutorialOwner = 0x6f8; // AActor*
		constexpr auto IsTutorialProxy = 0x700; // bool
		constexpr auto ReplicatedPhysicsState = 0x708; // FReplicatedPhysicsState
		constexpr auto ForceKeepTickActive = 0x758; // bool
		constexpr auto CachedAutoAimCollisionChannel = 0x788; // ECollisionChannel
		constexpr auto CachedVehicleCollisionResponse = 0x789; // ECollisionResponse
	}

	namespace n_APerfTestIslandService { // : AIslandService
		constexpr auto IslandFrameworkSettings = 0x458; // UIslandFrameworkSettings*
		constexpr auto IslandDataAsset = 0x460; // UIslandDataAsset*
		constexpr auto SunkenIslandSettingsDataAsset = 0x468; // USunkenIslandSettingsDataAsset*
		constexpr auto IslandArray = 0x488; // TArray<FIsland>
		constexpr auto CannonAISpawnerZoneDebugArray = 0x5b8; // TArray<FCannonAISpawnerZone>
		constexpr auto CannonAILocationDebugArray = 0x5c8; // TArray<FCannonAILocation>
		constexpr auto PlayerTrackers = 0x5d8; // TArray<UAIProximityPlayerTracker*>
	}

	namespace n_USetSpawnProgressStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // USetSpawnProgressStepDesc*
	}

	namespace n_UBTTask_WaitForWieldBase { // : UBTTaskNode
		constexpr auto WaitForUnstashed = 0x60; // bool
	}

	namespace n_UPlayerNameplateComponent { // : UNameplateComponent
		constexpr auto VisibleFromWorldDistance = 0x2e0; // float
		constexpr auto VisibleUntilWorldDistanceCrew = 0x2e4; // float
		constexpr auto VisibleUntilWorldDistanceNonCrew = 0x2e8; // float
		constexpr auto EmoteForcedRevealTime = 0x2ec; // float
		constexpr auto PlayerCharacter = 0x2f8; // AAthenaPlayerCharacter*
	}

	namespace n_UParticleModuleMeshRotationRate_Seeded { // : UParticleModuleMeshRotationRate
		constexpr auto RandomSeedInfo = 0x88; // FParticleRandomSeedInfo
	}

	namespace n_UChooseIslandStepDesc { // : UTaleQuestStepDesc
		constexpr auto SourceLocation = 0x80; // FQuestVariableVector
		constexpr auto IslandsToIgnore = 0x90; // FQuestVariableNameArray
		constexpr auto LocationParams = 0xa0; // FVoyageLocationParams
		constexpr auto IslandName = 0xf8; // FQuestVariableName
	}

	namespace n_UElectricShieldAbility { // : UAthenaAIAbility
		constexpr auto SelectedTargets = 0x80; // TArray<TScriptInterface<Class>>
		constexpr auto CachedAIManager = 0x90; // TScriptInterface<Class>
		constexpr auto OwnerChainLightningSourceInterface = 0xa0; // TScriptInterface<Class>
	}

	namespace n_UCameraModifier_CameraShake { // : UCameraModifier
		constexpr auto ActiveShakes = 0x48; // TArray<UCameraShake*>
		constexpr auto SplitScreenShakeScale = 0x58; // float
	}

	namespace n_UCookerIgnitionComponent { // : UActorComponent
		constexpr auto CookerIgnitionParams = 0xc8; // FCookerIgnitionParams
	}

	namespace n_UGameInstance { // : UObject
		constexpr auto LocalPlayers = 0x38; // TArray<ULocalPlayer*>
		constexpr auto OnlineSession = 0x50; // UOnlineSession*
	}

	namespace n_ULightComponent { // : ULightComponentBase
		constexpr auto Temperature = 0x2e0; // float
		constexpr auto bUseTemperature = 0x2e4; // char : 1
		constexpr auto ShadowMapChannel = 0x2e8; // int32_t
		constexpr auto SourceRadius = 0x2f0; // float
		constexpr auto MinRoughness = 0x2f4; // float
		constexpr auto ShadowBias = 0x2f8; // float
		constexpr auto ShadowSharpen = 0x2fc; // float
		constexpr auto ShadowResMaxDynamicDegradation = 0x300; // float
		constexpr auto InverseSquaredFalloff = 0x304; // char : 1
		constexpr auto CastTranslucentShadows = 0x304; // char : 1
		constexpr auto bCastShadowsFromCinematicObjectsOnly = 0x304; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x304; // char : 1
		constexpr auto LightFunctionMaterial = 0x308; // UMaterialInterface*
		constexpr auto LightFunctionScale = 0x310; // FVector
		constexpr auto IESTexture = 0x320; // UTextureLightProfile*
		constexpr auto bUseIESBrightness = 0x328; // char : 1
		constexpr auto IESBrightnessScale = 0x32c; // float
		constexpr auto LightFunctionFadeDistance = 0x330; // float
		constexpr auto DisabledBrightness = 0x334; // float
		constexpr auto bEnableLightShaftBloom = 0x338; // char : 1
		constexpr auto BloomScale = 0x33c; // float
		constexpr auto BloomThreshold = 0x340; // float
		constexpr auto BloomTint = 0x344; // FColor
		constexpr auto bUseRayTracedDistanceFieldShadows = 0x348; // bool
		constexpr auto RayStartOffsetDepthScale = 0x34c; // float
	}

	namespace n_UParticleModuleEventReceiverBase { // : UParticleModuleEventBase
		constexpr auto EventGeneratorType = 0x50; // EParticleEventType
		constexpr auto EventName = 0x54; // FName
	}

	namespace n_UBTTask_SelectFoodSource { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_UMysteriousNoteDesc { // : UItemDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_UMaterialExpressionSceneDepth { // : UMaterialExpression
		constexpr auto InputMode = 0x70; // EMaterialSceneAttributeInputMode
		constexpr auto Input = 0x78; // FExpressionInput
		constexpr auto Coordinates = 0xb0; // FExpressionInput
		constexpr auto ConstInput = 0xe8; // FVector2D
	}

	namespace n_UQuestItemCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_APortalSignalCutSceneActor { // : ASequencerCutSceneActor
		constexpr auto CutScenePlayData = 0x448; // FCutScenePlayData
		constexpr auto CutSceneDataSet = 0x480; // TArray<FCutSceneLoadData>
		constexpr auto CutsceneSubtitleComponent = 0x490; // UCutSceneSubtitlesComponent*
		constexpr auto InteractingPlayerPawn = 0x498; // APawn*
		constexpr auto IsLooping = 0x4a0; // bool
		constexpr auto LevelSequenceToPlay = 0x4a8; // ULevelSequence*
		constexpr auto LevelSequencesToPlay = 0x4b0; // TArray<ULevelSequence*>
	}

	namespace n_UHoleDataAsset { // : UDataAsset
		constexpr auto MaxHolePerIslandData = 0x28; // TArray<FMaxHolePerIslandDataAsset>
		constexpr auto DefaultMaxHoles = 0x38; // int32_t
		constexpr auto MaxNumOverlappingHolesAllowed = 0x3c; // int32_t
		constexpr auto AllowHoleOverlapping = 0x40; // bool
	}

	namespace n_UPlayerActivityIconCatalogueDataAsset { // : UDataAsset
		constexpr auto PlayerActivityIcons = 0x28; // TArray<FPlayerActivityIconInfo>
	}

	namespace n_ULandscapeGizmoRenderComponent { // : UPrimitiveComponent
		constexpr auto MinDrawDistance = 0x2b8; // float
		constexpr auto LDMaxDrawDistance = 0x2c0; // float
		constexpr auto CachedMaxDrawDistance = 0x2c4; // float
		constexpr auto DepthPriorityGroup = 0x2c8; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x2c9; // ESceneDepthPriorityGroup
		constexpr auto bAlwaysCreatePhysicsState = 0x2cc; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x2cc; // char : 1
		constexpr auto bMultiBodyOverlap = 0x2cc; // char : 1
		constexpr auto bCheckAsyncSceneOnMove = 0x2cc; // char : 1
		constexpr auto bTraceComplexOnMove = 0x2cc; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x2cc; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x2cc; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x2cc; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x2cd; // char : 1
		constexpr auto bRenderInMainPass = 0x2cd; // char : 1
		constexpr auto bRenderInCustomPrePass = 0x2cd; // char : 1
		constexpr auto bReflected = 0x2cd; // char : 1
		constexpr auto bReflectedOnLowQuality = 0x2cd; // char : 1
		constexpr auto bFFTWaterMask = 0x2cd; // char : 1
		constexpr auto bVolumeFogMask = 0x2cd; // char : 1
		constexpr auto bAffectsFlatWater = 0x2ce; // char : 1
		constexpr auto bGPUParticlesKillPlane = 0x2ce; // char : 1
		constexpr auto bDontCull = 0x2ce; // char : 1
		constexpr auto bDontSizeOnScreenCull = 0x2ce; // char : 1
		constexpr auto OverriddenShadowMinTexelSize = 0x2d0; // float
		constexpr auto bOverrideShadowMinSizeCulling = 0x2d4; // bool
		constexpr auto bOverrideShadowCascadesExclusion = 0x2d5; // bool
		constexpr auto ExcludedShadowCascades = 0x2d6; // EExcludeFromCascades
		constexpr auto bReceivesDecals = 0x2d8; // char : 1
		constexpr auto bOwnerNoSee = 0x2d8; // char : 1
		constexpr auto bOnlyOwnerSee = 0x2d8; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x2d8; // char : 1
		constexpr auto bIsACloud = 0x2d8; // char : 1
		constexpr auto bUseAsOccluder = 0x2d8; // char : 1
		constexpr auto bSelectable = 0x2d8; // char : 1
		constexpr auto bForceMipStreaming = 0x2d8; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x2d9; // char : 1
		constexpr auto CastShadow = 0x2d9; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2d9; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x2d9; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x2d9; // char : 1
		constexpr auto bCastDynamicShadow = 0x2d9; // char : 1
		constexpr auto bCastStaticShadow = 0x2d9; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x2d9; // char : 1
		constexpr auto bSelfShadowOnly = 0x2da; // char : 1
		constexpr auto bCastFarShadow = 0x2da; // char : 1
		constexpr auto bCastInsetShadow = 0x2da; // char : 1
		constexpr auto bCastCinematicShadow = 0x2da; // char : 1
		constexpr auto bCastHiddenShadow = 0x2da; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x2da; // char : 1
		constexpr auto bCastShadowOnLowQuality = 0x2da; // char : 1
		constexpr auto bLightAsIfStatic = 0x2da; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x2db; // char : 1
		constexpr auto IndirectLightingCacheQuality = 0x2dc; // EIndirectLightingCacheQuality
		constexpr auto bHasCachedStaticLighting = 0x2dd; // bool
		constexpr auto bStaticLightingBuildEnqueued = 0x2de; // bool
		constexpr auto bIgnoreRadialImpulse = 0x2e0; // char : 1
		constexpr auto bIgnoreRadialForce = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x2e0; // char : 1
		constexpr auto bUseEditorCompositing = 0x2e0; // char : 1
		constexpr auto bRenderCustomDepth = 0x2e0; // char : 1
		constexpr auto bAllowVelocityInMaterial = 0x2e0; // char : 1
		constexpr auto CustomDepthStencilValue = 0x2e4; // int32_t
		constexpr auto TranslucencySortPriority = 0x2e8; // int32_t
		constexpr auto VisibilityId = 0x2ec; // int32_t
		constexpr auto LpvBiasMultiplier = 0x2f4; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x2f8; // float
		constexpr auto LpvIntensityMultiplier = 0x2fc; // float
		constexpr auto CustomPrimitiveData = 0x300; // FCustomPrimitiveData
		constexpr auto BodyInstance = 0x310; // FBodyInstance
		constexpr auto bAffectRain = 0x490; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x490; // char : 1
		constexpr auto bSkipRenderingInOuterLPVCascades = 0x490; // char : 1
		constexpr auto bEnableMergeCollisionComponents = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerUnderwater = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerUnderwater = 0x491; // char : 1
		constexpr auto bCanRenderAboveAndBelowWaterAtSameTime = 0x491; // char : 1
		constexpr auto BoundsScale = 0x498; // float
		constexpr auto OcclusionBoundsScale = 0x49c; // float
		constexpr auto LastRenderTime = 0x4a0; // float
		constexpr auto bGPUVisibility = 0x4a4; // bool
		constexpr auto bHasCustomNavigableGeometry = 0x4a5; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x4a6; // ECanBeCharacterBase
		constexpr auto OnComponentHit = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnComponentBeginOverlap = 0x4f1; // FScriptMulticastDelegate
		constexpr auto OnComponentEndOverlap = 0x4f2; // FScriptMulticastDelegate
		constexpr auto OnComponentWake = 0x4f3; // FScriptMulticastDelegate
		constexpr auto OnComponentSleep = 0x4f4; // FScriptMulticastDelegate
		constexpr auto LODParentPrimitive = 0x528; // UPrimitiveComponent*
		constexpr auto PostPhysicsComponentTick = 0x530; // FPrimitiveComponentPostPhysicsTickFunction
		constexpr auto MergedCollisionComponentParent = 0x580; // UPrimitiveComponent*
	}

	namespace n_UTaleQuestWaitForHandInStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestWaitForHandInStepDesc*
	}

	namespace n_UMaterialExpressionSine { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto Period = 0xa8; // float
	}

	namespace n_UCoralShieldAbility { // : UAthenaAIAbility
		constexpr auto PotentialTargets = 0x78; // TArray<TWeakObjectPtr<APawn>>
		constexpr auto CachedAIManager = 0x88; // TScriptInterface<Class>
		constexpr auto CachedBuffReceiver = 0x98; // TScriptInterface<Class>
		constexpr auto BuffedTargets = 0xa8; // TArray<FBuffedTargetData>
	}

	namespace n_UMaterialExpressionConstant { // : UMaterialExpression
		constexpr auto R = 0x70; // float
	}

	namespace n_UFireSettingsDataAsset { // : UDataAsset
		constexpr auto CharacterOnFireEffectRadius = 0x28; // float
		constexpr auto TraceChannel = 0x2c; // ECollisionChannel
		constexpr auto CharacterToCharacterPropagationInterval = 0x30; // float
		constexpr auto MaxInitialPropagationOffset = 0x34; // float
		constexpr auto BurnStatus = 0x38; // FStatus
		constexpr auto FirePropagationStatus = 0x50; // FStatus
		constexpr auto MaxComponentsToTickPerFrame = 0x68; // uint32_t
	}

	namespace n_UBTTask_WaitWeighted { // : UBTTaskNode
		constexpr auto WeightedRangesFromParams = 0x60; // FAIDataProviderStructValue
		constexpr auto WeightedRanges = 0x90; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_AWieldableItem { // : AActor
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_AInteractorTestProxyObject { // : AActor
		constexpr auto InteractableAttachParentCompName = 0x3d0; // FString
		constexpr auto InteractablesServiceComponentName = 0x3e0; // FString
		constexpr auto PreTestConsoleCommands = 0x3f0; // TArray<FString>
		constexpr auto WieldableItemForTest = 0x400; // AWieldableItem*
	}

	namespace n_UWheelDescAsset { // : UShipPartDescAsset
		constexpr auto WheelDesc = 0x28; // FWheelDesc
	}

	namespace n_ULaunchableShotComponentAudioParams { // : UItemActionComponentAudioParams
		constexpr auto FireProjectileEvent = 0x68; // UWwiseEvent*
	}

	namespace n_UAthenaAnimationUndoRepairDataAsset { // : UDataAsset
		constexpr auto UndoRepairInto = 0x28; // FStringAssetReference
		constexpr auto UndoRepairLoop = 0x38; // FStringAssetReference
		constexpr auto UndoRepairStateId = 0x48; // UAnimationStateId*
	}

	namespace n_UTaleQuestChooseIslandFromWeightsStepDesc { // : UTaleQuestStepDesc
		constexpr auto IslandsToChooseFrom = 0x80; // FQuestVariableNameArray
		constexpr auto DifficultyRank = 0x90; // FQuestVariableInt
		constexpr auto ChosenIsland = 0xa0; // FQuestVariableName
		constexpr auto IslandTypeWeights = 0xb0; // UIslandTypeWeightsDataAsset*
	}

	namespace n_UAthenaAnimationEmoteGroupingAsset { // : UDataAsset
		constexpr auto EmoteAnimationData = 0x28; // TArray<FAthenaAnimationEmoteAnimations>
	}

	namespace n_UKrakenTelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UInheritableComponentHandler { // : UObject
		constexpr auto Records = 0x28; // TArray<FComponentOverrideRecord>
	}

	namespace n_ATestAthenaGameModeWithLoopBackServiceEndpoint { // : AGameMode
		constexpr auto bDisableAsyncOcclusionChecking = 0x3d8; // char : 1
		constexpr auto bUseSeamlessTravel = 0x3d8; // char : 1
		constexpr auto bPauseable = 0x3d8; // char : 1
		constexpr auto bStartPlayersAsSpectators = 0x3d8; // char : 1
		constexpr auto bDelayedStart = 0x3d8; // char : 1
		constexpr auto OptionsString = 0x3e0; // FString
		constexpr auto DefaultPawnClass = 0x3f0; // APawn*
		constexpr auto HUDClass = 0x3f8; // AHUD*
		constexpr auto NumSpectators = 0x400; // int32_t
		constexpr auto NumPlayers = 0x404; // int32_t
		constexpr auto NumBots = 0x408; // int32_t
		constexpr auto MinRespawnDelay = 0x40c; // float
		constexpr auto GameSession = 0x410; // AGameSession*
		constexpr auto NumTravellingPlayers = 0x418; // int32_t
		constexpr auto DefaultPlayerName = 0x420; // FText
		constexpr auto EngineMessageClass = 0x458; // ULocalMessage*
		constexpr auto PlayerControllerClass = 0x460; // APlayerController*
		constexpr auto SpectatorClass = 0x468; // ASpectatorPawn*
		constexpr auto ReplaySpectatorPlayerControllerClass = 0x470; // APlayerController*
		constexpr auto PlayerStateClass = 0x478; // APlayerState*
		constexpr auto GameStateClass = 0x480; // AGameState*
		constexpr auto GameState = 0x488; // AGameState*
		constexpr auto InactivePlayerArray = 0x490; // TArray<APlayerState*>
		constexpr auto GameModeClassAliases = 0x4b0; // TArray<FGameClassShortName>
		constexpr auto InactivePlayerStateLifeSpan = 0x4c0; // float
		constexpr auto bHandleDedicatedServerReplays = 0x4c4; // bool
	}

	namespace n_AMessageInABottleItemProxy { // : AFloatingItemProxy
		constexpr auto VoyageRecipeList = 0x798; // TArray<FMessageInABottleVoyageEntry>
		constexpr auto UsePremadeVoyages = 0x7a8; // bool
		constexpr auto PremadeVoyages = 0x7b0; // TArray<UVoyageDescDataAsset*>
		constexpr auto EmergentSource = 0x7c0; // EEmergentVoyageSource
		constexpr auto OnBottleOpenedSfx = 0x7c8; // UWwiseEvent*
	}

	namespace n_AWeepingChestItemInfo { // : ATreasureChestItemInfo
		constexpr auto BootyType = 0x528; // EBootyTypes
		constexpr auto Id = 0x52c; // FGuid
		constexpr auto PlayedFirstTimeEquipSfx = 0x53c; // bool
		constexpr auto HandInPlayerStats = 0x540; // TArray<FPlayerStat>
		constexpr auto HandInStolenPlayerStats = 0x550; // TArray<FPlayerStat>
		constexpr auto HandInStolenFromPlayerStats = 0x560; // TArray<FPlayerStat>
		constexpr auto HandInGiftPlayerStats = 0x570; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendPlayerStats = 0x580; // TArray<FPlayerStat>
		constexpr auto HandInOnSchedulePlayerStats = 0x590; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendOnSchedulePlayerStats = 0x5a0; // TArray<FPlayerStat>
		constexpr auto HandInAsEmissaryPlayerStats = 0x5b0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInAsMaxLevelEmissaryPlayerStats = 0x5c0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsEmissaryPlayerStats = 0x5d0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsMaxLevelEmissaryPlayerStats = 0x5e0; // TArray<FEmissaryBootyItemStats>
		constexpr auto UsePlayerStats = 0x5f0; // TArray<FPlayerStat>
		constexpr auto UseStolenPlayerStats = 0x600; // TArray<FPlayerStat>
		constexpr auto CompanySpecificStats = 0x610; // FCompanyBootyStatList
		constexpr auto ConditionalHandInStat = 0x620; // FConditionalHandInStat
		constexpr auto DiscoveredPopupDesc = 0x640; // UPopUpMessageDesc*
		constexpr auto SellPrerequisites = 0x648; // FBootyItemSellPrerequisites
		constexpr auto TrackedOwnerComponent = 0x658; // UTrackedOwnerComponent*
		constexpr auto ItemQualityComponent = 0x660; // UItemQualityComponent*
		constexpr auto ItemQualityLevel = 0x668; // EEmissaryQualityLevel
		constexpr auto CompanySpecificItemQualityLevel = 0x670; // TArray<FPerComanyItemQualityEntry>
		constexpr auto HandInRewardId = 0x680; // FRewardId
		constexpr auto HandInRewardIdCompanySpecific = 0x688; // TArray<FCompanySpecificBootyReward>
		constexpr auto RewardToOwnCrewOnly = 0x698; // bool
		constexpr auto Rarity = 0x69c; // FName
		constexpr auto DeliverableComponent = 0x6c0; // UDeliverableComponent*
		constexpr auto CrewOwnershipTrackingComponent = 0x6c8; // UCrewOwnershipTrackingComponent*
		constexpr auto BootyItemShipOwnershipComponent = 0x6d0; // UBootyItemShipOwnershipComponent*
		constexpr auto SpawnSource = 0x6d8; // ESpawnedItemSource
	}

	namespace n_URetractableCharacterComponent { // : URetractableComponent
		constexpr auto FeatureToggle = 0xf0; // FName
		constexpr auto OrientationAdjustmentOnRetractFlags = 0xf8; // FRetractorOrientationAdjustmentFlags
		constexpr auto RetractorBoxAxis = 0xfb; // EAxis
		constexpr auto ShouldAutoReleaseOnSuccessfulRetract = 0xfc; // bool
		constexpr auto MigrateAttachedWithRetractor = 0xfd; // bool
		constexpr auto WasSimulatingPhysicsBeforeRetract = 0xfe; // bool
	}

	namespace n_UItemLifetimeManagerServiceDataAsset { // : UDataAsset
		constexpr auto ItemCaps = 0x28; // TArray<UItemCapForAssets*>
	}

	namespace n_USimpleOverlapComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_URemoveMechanismTriggerStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // URemoveMechanismTriggerStepDesc*
	}

	namespace n_AOpinionatedNameplateAttitudeTestActor { // : AActor
		constexpr auto DesiredAttitude = 0x3d0; // EAttitudeTowardActor
	}

	namespace n_ULocationMapSettings { // : UDeveloperSettings
		constexpr auto LocationMapItemDescClass = 0x38; // UTreasureMapItemDesc*
		constexpr auto DefaultParams = 0x40; // FStringAssetReference
		constexpr auto DefaultMapBlendMode = 0x50; // EBlendMode
		constexpr auto DefaultBannerBlendMode = 0x51; // EBlendMode
		constexpr auto DefaultVaultSymbolBlendMode = 0x52; // EBlendMode
		constexpr auto DefaultChest = 0x58; // FStringAssetReference
		constexpr auto DefaultChestBlendMode = 0x68; // EBlendMode
	}

	namespace n_UAtmosphericPressureZoneComponent { // : USceneComponent
		constexpr auto PressureZoneParameters = 0x2b8; // FAtmosphericPressureZoneParameters
	}

	namespace n_URemoveFlameOfFateTypeStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // URemoveFlameOfFateTypeStepDesc*
	}

	namespace n_USkellyFortListDataAsset { // : UDataAsset
		constexpr auto FortsList = 0x28; // TArray<USkellyFortDataAsset*>
	}

	namespace n_UAIPartsCategoryTypeList { // : UDataAsset
		constexpr auto AllPartsCategories = 0x28; // TArray<UAIPartsCategory*>
	}

	namespace n_UShopDesc { // : UDataAsset
		constexpr auto ShopName = 0x28; // FText
		constexpr auto Catalog = 0x60; // UCatalogDataAsset*
		constexpr auto Catalogs = 0x68; // TArray<FCatalogDescTab>
		constexpr auto PremiumCatalog = 0x78; // UPremiumCatalogDataAsset*
		constexpr auto FeatureToggledPremiumCatalogs = 0x80; // TArray<FFeatureToggledPremiumCatalog>
		constexpr auto Storefront = 0x90; // FString
		constexpr auto OpenAudioCue = 0xa0; // FString
		constexpr auto EnablePiratePreview = 0xb0; // bool
		constexpr auto IsPremiumShop = 0xb1; // bool
		constexpr auto Dialogue = 0xb8; // UShopDialogue*
		constexpr auto Company = 0xc0; // UCompany*
		constexpr auto Categories = 0xc8; // TArray<UCategoryBase*>
		constexpr auto AllTabIcon = 0xd8; // FStringAssetReference
	}

	namespace n_URig { // : UObject
		constexpr auto TransformBases = 0x28; // TArray<FTransformBase>
		constexpr auto Nodes = 0x38; // TArray<FNode>
	}

	namespace n_UInterpTrackAnimControl { // : UInterpTrackFloatBase
		constexpr auto SlotName = 0x90; // FName
		constexpr auto AnimSeqs = 0x98; // TArray<FAnimControlTrackKey>
		constexpr auto bSkipAnimNotifiers = 0xa8; // char : 1
	}

	namespace n_UConditionalStatsServiceSettings { // : UDataAsset
		constexpr auto ConditionalStats = 0x28; // TArray<FConditionalStatsTriggerUnit>
		constexpr auto SeasonConditionalStats = 0x38; // TArray<FConditionalStatsTriggerUnit>
	}

	namespace n_UArenaWorldMarkerOnWieldComponent { // : UActorComponent
		constexpr auto MarkerVariant = 0xc8; // UWorldMarkerVariant*
	}

	namespace n_ALandscapeMeshProxyActor { // : AActor
		constexpr auto LandscapeMeshProxyComponent = 0x3d0; // ULandscapeMeshProxyComponent*
	}

	namespace n_UReviveAudioComponent { // : UWwiseEmitterComponent
		constexpr auto ReviveEffectsDataAsset = 0x2e0; // UReviveEffectsDataAsset*
	}

	namespace n_UTaleQuestLockCaptainCabinDoorStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UInteractableStorageContainer { // : UInteractableComponent
		constexpr auto Aggregator = 0x158; // UObject*
		constexpr auto InteractInput = 0x160; // UNotificationInputId*
	}

	namespace n_UTaleQuestActorServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto ItemLostFailureRunnable = 0x28; // URunnable*
	}

	namespace n_UBlueprintCore { // : UObject
		constexpr auto SkeletonGeneratedClass = 0x28; // UObject*
		constexpr auto GeneratedClass = 0x30; // UObject*
		constexpr auto bLegacyNeedToPurgeSkelRefs = 0x38; // bool
		constexpr auto bLegacyGeneratedClassIsAuthoritative = 0x39; // bool
		constexpr auto BlueprintGuid = 0x3c; // FGuid
	}

	namespace n_URemoveCriticalActorStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // URemoveCriticalActorStepDesc*
	}

	namespace n_APlaceableReactionMechanismAction { // : APlaceableReaction
		constexpr auto MechanismActionComponent = 0x3f8; // UMechanismActionComponent*
		constexpr auto Delay = 0x400; // float
		constexpr auto LoopReactionsWhileActive = 0x404; // bool
		constexpr auto DelayBetweenLoops = 0x408; // FFloatRange
	}

	namespace n_UFindNamedPointStepDesc { // : UFindNamedPointStepDescBase
		constexpr auto OutputOrientedPoint = 0xd0; // FQuestVariableOrientedPoint
	}

	namespace n_UDigItemStatTriggerType { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_ACargoRunService { // : AActor
		constexpr auto ClientCrewData = 0x3e0; // TArray<FClientCargoRunCrewDataUnit>
	}

	namespace n_AIslandData { // : AActor
		constexpr auto IslandAnnouncementComponent = 0x3d8; // UIslandAnnouncementComponent*
		constexpr auto IslandBoundsComponent = 0x3e0; // UIslandBoundsComponent*
		constexpr auto IslandTriggerComponent = 0x3e8; // USphereComponent*
		constexpr auto IslandSafeZoneComponent = 0x3f0; // USphereComponent*
		constexpr auto IslandName = 0x3f8; // FName
		constexpr auto IslandType = 0x400; // EIslandType
		constexpr auto AssociatedSpawnLocations = 0x408; // TArray<ASpawnLocation*>
		constexpr auto AssociatedShipSpawnLocations = 0x418; // TArray<AShipSpawnLocation*>
		constexpr auto ObjectMessageDispatcher = 0x428; // FObjectMessagingDispatcher
		constexpr auto CompassDirectionIslandCentre = 0x4c8; // FVector
		constexpr auto PetMovementParamsData = 0x4d8; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto IslandSalvageSpawnerManager = 0x508; // AIslandSalvageSpawnerManager*
	}

	namespace n_APetItemInfo { // : ANonStorableItemInfo
		constexpr auto PetCustomisation = 0x518; // FPetCustomisation
		constexpr auto PetOwner = 0x530; // AActor*
		constexpr auto SpawnedForShip = 0x538; // AActor*
		constexpr auto DropTraceDistance = 0x540; // float
		constexpr auto PointSearchRadius = 0x544; // float
		constexpr auto DropChannel = 0x548; // ECollisionChannel
	}

	namespace n_UIsEmissaryStatCondition { // : UStatCondition
		constexpr auto RequiredEmissaryCompany = 0x28; // UCompany*
		constexpr auto RequiresMaxEmissaryLevel = 0x30; // bool
	}

	namespace n_UClawPummelAIAbility { // : UKnockbackAIAbility
		constexpr auto ExplosionTriggerPtr = 0x78; // TWeakObjectPtr<UKnockbackAIAbilityTriggerComponent>
		constexpr auto ForceFeedbackInfo = 0x80; // FExplosionForceFeedbackInfo
		constexpr auto PawnExplosion = 0xa8; // UExplosionComponent*
	}

	namespace n_AStrongholdKey { // : ANonDisplaceableLargeStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UMovieSceneFolder { // : UObject
		constexpr auto FolderName = 0x28; // FName
		constexpr auto ChildFolders = 0x30; // TArray<UMovieSceneFolder*>
		constexpr auto ChildMasterTracks = 0x40; // TArray<UMovieSceneTrack*>
		constexpr auto ChildObjectBindingStrings = 0x50; // TArray<FString>
	}

	namespace n_UMaterialExpressionTextureSampleParameter { // : UMaterialExpressionTextureSample
		constexpr auto ParameterName = 0x1a8; // FName
		constexpr auto ExpressionGUID = 0x1b0; // FGuid
		constexpr auto Group = 0x1c0; // FName
	}

	namespace n_UAnimNotify_CutSceneSubtitle { // : UAnimNotify
		constexpr auto PlayedWithSequencer = 0x28; // bool
	}

	namespace n_UShipCustomizationDesc { // : UEntitlementDesc
		constexpr auto CustomizationInfo = 0xd8; // FStringAssetReference
		constexpr auto PreviousItem = 0xe8; // FString
		constexpr auto NextItem = 0xf8; // FString
	}

	namespace n_UInAppPurchaseCallbackProxy { // : UObject
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UDoEQSQueryStepDesc { // : UTaleQuestStepDesc
		constexpr auto EQSQuery = 0x80; // UEnvQuery*
		constexpr auto OutPoints = 0x88; // FQuestVariableArray
	}

	namespace n_UTaleQuestGetTinySharkPawn { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMigrationService { // : UObject
		constexpr auto BeaconRange = 0x58; // float
		constexpr auto MigrationSetupRequestTimeoutInSeconds = 0x5c; // float
		constexpr auto BeaconActorClasses = 0x60; // TArray<AActor*>
		constexpr auto CollectedActorClasses = 0x70; // TArray<AActor*>
	}

	namespace n_UParticleModuleVectorFieldLocal { // : UParticleModuleVectorFieldBase
		constexpr auto VectorField = 0x50; // UVectorField*
		constexpr auto RelativeTranslation = 0x58; // FVector
		constexpr auto RelativeRotation = 0x64; // FRotator
		constexpr auto RelativeScale3D = 0x70; // FVector
		constexpr auto Intensity = 0x7c; // float
		constexpr auto Tightness = 0x80; // float
		constexpr auto bIgnoreComponentTransform = 0x84; // char : 1
		constexpr auto bTileX = 0x84; // char : 1
		constexpr auto bTileY = 0x84; // char : 1
		constexpr auto bTileZ = 0x84; // char : 1
	}

	namespace n_UTaleRankDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UHasEntitlementsNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto RequiredEntitlements = 0x30; // TArray<UEntitlementDesc*>
	}

	namespace n_AStorySpawnedActorsService { // : AActor
		constexpr auto SpawnedActors = 0x3d8; // TMap<FName, FSpawnedActorsList>
		constexpr auto Asset = 0x428; // UStorySpawnedActorsCollectionDataAsset*
	}

	namespace n_UMaterialExpressionTextureObject { // : UMaterialExpressionTextureBase
		constexpr auto Texture = 0x70; // UTexture*
		constexpr auto SamplerType = 0x78; // EMaterialSamplerType
		constexpr auto IsDefaultMeshpaintTexture = 0x7c; // char : 1
	}

	namespace n_UAbilityTask_WaitOverlap { // : UAbilityTask
		constexpr auto OnOverlap = 0x68; // FScriptMulticastDelegate
	}

	namespace n_AAbilitySystemTestPawn { // : ADefaultPawn
		constexpr auto AbilitySystemComponent = 0x488; // UAbilitySystemComponent*
	}

	namespace n_UIsAIOfClassStatCondition { // : UTargetedStatCondition
		constexpr auto AIClasses = 0x30; // TArray<UAIClassId*>
	}

	namespace n_UWwiseBank { // : UObject
		constexpr auto path = 0x28; // FString
		constexpr auto WwiseId = 0x38; // uint32_t
	}

	namespace n_UMaterialExpressionTextureSampleParameterCube { // : UMaterialExpressionTextureSampleParameter
		constexpr auto ParameterName = 0x1a8; // FName
		constexpr auto ExpressionGUID = 0x1b0; // FGuid
		constexpr auto Group = 0x1c0; // FName
	}

	namespace n_UDiggingComponent { // : UActorComponent
		constexpr auto OnFinishedDigging = 0xd0; // FScriptMulticastDelegate
		constexpr auto OnFinishedBurying = 0xe0; // FScriptMulticastDelegate
		constexpr auto Discoverer = 0xf0; // AActor*
		constexpr auto BuriedFactor = 0xf8; // FBuriedFactor
		constexpr auto State = 0x10c; // EDiggingState
		constexpr auto StartingLocation = 0x110; // FVector
		constexpr auto StartingRotation = 0x11c; // FRotator
		constexpr auto ItemDynamicMaterial = 0x128; // UMaterialInstanceDynamic*
		constexpr auto DiggingConfig = 0x130; // FItemDiggingMergedConfig
		constexpr auto DiggingSettings = 0x158; // UDiggingSettings*
		constexpr auto CachedSfxPool = 0x160; // UWwiseObjectPoolWrapper*
	}

	namespace n_UStatusResponseActivateAudioState { // : UStatusResponse
		constexpr auto StateName = 0x30; // FName
	}

	namespace n_UAISenseEvent_Damage { // : UAISenseEvent
		constexpr auto Event = 0x28; // FAIDamageEvent
	}

	namespace n_AAudioIslandStaticMeshAssociatorBase { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_USelectRewardStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTService_AimAIInteractable { // : UBTService
		constexpr auto Interactable = 0x70; // FBlackboardKeySelector
		constexpr auto TargetForInteractable = 0x98; // FBlackboardKeySelector
		constexpr auto TargetRelativeAimVector = 0xc0; // FBlackboardKeySelector
	}

	namespace n_UCursedCannonballData { // : UDataAsset
		constexpr auto AllCursedCannonballs = 0x28; // TArray<UItemDesc*>
	}

	namespace n_UEmoteDesc { // : UClothingDesc
		constexpr auto EmoteInfo = 0xe0; // FStringAssetReference
		constexpr auto BackgroundPath = 0xf0; // FStringAssetReference
		constexpr auto LookAtSocketName = 0x100; // FName
		constexpr auto OverridePreviewCameraName = 0x108; // FName
	}

	namespace n_ARetrieveBootyActor { // : AActor
		constexpr auto Root = 0x3e0; // USceneComponent*
		constexpr auto RetrievalComponent = 0x3e8; // URetrieveBootyHandInComponent*
		constexpr auto Mesh = 0x3f0; // USkeletalMeshComponent*
		constexpr auto ActorActivationComponent = 0x3f8; // UActorActivationComponent*
		constexpr auto DitherComponent = 0x400; // UDitherComponent*
		constexpr auto BeaconComponent = 0x408; // UParticleSystemComponent*
		constexpr auto AIPartsRetrievalComponent = 0x410; // UAIPartsRetrievalComponent*
		constexpr auto AIParts = 0x418; // UAIPartsCategory*
		constexpr auto AnimMap = 0x420; // TArray<FMermaidAnimMapping>
		constexpr auto SurfaceTolerance = 0x430; // float
		constexpr auto LocationBlendSpeed = 0x434; // float
		constexpr auto SurfaceStickSpeed = 0x438; // float
		constexpr auto SfxPool = 0x440; // UWwiseObjectPoolWrapper*
		constexpr auto PlaySongEvent = 0x448; // UWwiseEvent*
		constexpr auto StopSongEvent = 0x450; // UWwiseEvent*
		constexpr auto BootyStorageSettings = 0x458; // UBootyStorageSettings*
		constexpr auto LocalIsland = 0x600; // FName
		constexpr auto ActionRulesComponent = 0x710; // UActionRulesComponent*
	}

	namespace n_UAthenaCameraComponent { // : UCameraComponent
		constexpr auto OffsetBlendSpeed = 0x820; // float
		constexpr auto AboveWaterOffset = 0x824; // float
		constexpr auto UnderWaterOffset = 0x828; // float
		constexpr auto SubmersionDistanceBeforeSurfacing = 0x82c; // float
		constexpr auto SubmersionDistanceBeforeUnderwater = 0x830; // float
		constexpr auto SubmersionDistanceBeforeUnderwaterOnShip = 0x834; // float
		constexpr auto ScreenEffectsParameters = 0x838; // UMaterialParameterCollection*
		constexpr auto IsInsideShipHull = 0x858; // bool
		constexpr auto CurrentCameraOffset = 0x85c; // float
	}

	namespace n_URemoveGameEventExclusionZoneStepDesc { // : UTaleQuestStepDesc
		constexpr auto Radius = 0x80; // float
		constexpr auto Location = 0x88; // FQuestVariableVector
	}

	namespace n_UCosmeticItemAnimationComponent { // : UActorComponent
		constexpr auto CosmeticItems = 0xd0; // TMap<USkeletalMeshComponent*, FCosmeticItems>
		constexpr auto DataAsset = 0x120; // UCosmeticItemAnimationDataAsset*
	}

	namespace n_UBoxedRpcDispatcherComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigrationGetLinkedActor { // : AActor
		constexpr auto DependentActor = 0x3d0; // AActor*
	}

	namespace n_UParticleModuleMurkyColor { // : UParticleModuleColorBase
		constexpr auto ColorScale = 0x50; // FLinearColor
	}

	namespace n_UPlayerOceanAudioComponent { // : USceneComponent
		constexpr auto WaterAudioEvent = 0x2b0; // UWwiseEvent*
		constexpr auto WaterAudioStopEvent = 0x2b8; // UWwiseEvent*
		constexpr auto WaterEmergeAudioEvent = 0x2c0; // UWwiseEvent*
		constexpr auto WaterSubmergeAudioEvent = 0x2c8; // UWwiseEvent*
		constexpr auto DeepSeaRegionAmbienceAudio = 0x2d0; // FDeepSeaRegionAmbienceAudio
		constexpr auto ShorelineRtpc = 0x2e8; // FName
		constexpr auto StateUnderwater = 0x2f0; // FName
		constexpr auto ChoppinessRtpc = 0x2f8; // FName
		constexpr auto CoastlineStormynessRtpc = 0x300; // FName
		constexpr auto MaxValidDistanceBetweenCoastAndInnerSpline = 0x308; // float
		constexpr auto MaxCoastAttenuation = 0x30c; // float
		constexpr auto MaxDistanceForAccurateSplineCheck = 0x310; // float
		constexpr auto SuperheatedWaterStateGroup = 0x314; // FName
		constexpr auto SwitchSuperheatedWaterOff = 0x31c; // FName
		constexpr auto SwitchSuperheatedWaterOn = 0x324; // FName
		constexpr auto MinStormDistCms = 0x32c; // float
		constexpr auto MaxStormDistCms = 0x330; // float
		constexpr auto PlayerCharacter = 0x358; // AAthenaPlayerCharacter*
	}

	namespace n_UHttpClientComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UConditionalStatsTriggerType { // : UObject
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UMeleeAttackDataAsset { // : UDataAsset
		constexpr auto AttackName = 0x28; // FName
		constexpr auto WarmUpDuration = 0x30; // float
		constexpr auto StrikeDuration = 0x34; // float
		constexpr auto RecoverMissDuration = 0x38; // float
		constexpr auto RecoverHitDuration = 0x3c; // float
		constexpr auto LungeMoveStartTime = 0x40; // float
		constexpr auto LungeMoveDuration = 0x44; // float
		constexpr auto LungeMoveMaxSpeed = 0x48; // float
		constexpr auto AttackMoveSpeed = 0x4c; // EMeleeWeaponMovementSpeed
		constexpr auto AttackMoveSpeedDeactivationAllowedWindow = 0x50; // float
		constexpr auto ComboTime = 0x54; // float
		constexpr auto DefenderKnockbackEnabled = 0x58; // bool
		constexpr auto DefenderKnockback = 0x5c; // FKnockBackInfo
		constexpr auto DefenderKnockbackWhenBlockingEnabled = 0xac; // bool
		constexpr auto DefenderKnockbackWhenBlocking = 0xb0; // FKnockBackInfo
		constexpr auto AttackerKnockbackEnabled = 0x100; // bool
		constexpr auto AttackerKnockback = 0x104; // FKnockBackInfo
		constexpr auto AttackerKnockbackWhenBlockingEnabled = 0x154; // bool
		constexpr auto AttackerKnockbackWhenBlocking = 0x158; // FKnockBackInfo
		constexpr auto LockOnEnabled = 0x1a8; // bool
		constexpr auto UninterruptableWindow = 0x1ac; // FAttackTimingWindow
		constexpr auto HitStartRange = 0x1b4; // float
		constexpr auto HitEndRange = 0x1b8; // float
		constexpr auto HitStartAngle = 0x1bc; // float
		constexpr auto HitAngleDelta = 0x1c0; // float
		constexpr auto HitSphereRadius = 0x1c4; // float
		constexpr auto HitTimeOffset = 0x1c8; // float
		constexpr auto HitDuration = 0x1cc; // float
		constexpr auto AttackDamage = 0x1d0; // float
		constexpr auto DamagerType = 0x1d8; // UDamagerType*
		constexpr auto HealthChangeReason = 0x1e0; // EHealthChangedReason
		constexpr auto IsUnblockable = 0x1e1; // bool
		constexpr auto StunOnMiss = 0x1e2; // bool
		constexpr auto StunAttackerOnHitSurfaces = 0x1e8; // TArray<FStunAttackerOnHitSurfacePair>
		constexpr auto StunOnHit = 0x1f8; // bool
		constexpr auto StunOnHitDurationPlayer = 0x1fc; // float
		constexpr auto StunOnHitDurationCharacter = 0x200; // float
		constexpr auto AnimationLookupType = 0x204; // EWieldableItemComplexOneShotLookUpType
		constexpr auto AnimationLookupIndex = 0x208; // uint32_t
		constexpr auto AnimationType = 0x20c; // EWieldableItemComplexOneShotAnimType
		constexpr auto ImpactId = 0x210; // UImpactProjectileId*
		constexpr auto AttackerHitLandedCameraShake = 0x218; // UCameraShake*
		constexpr auto AttackerHitLandedForceFeedbackEffect = 0x220; // UForceFeedbackEffect*
		constexpr auto DefenderHitReceivedCameraShake = 0x228; // UCameraShake*
		constexpr auto DefenderHitReceivedForceFeedbackEffect = 0x230; // UForceFeedbackEffect*
		constexpr auto ClampYawRange = 0x238; // float
		constexpr auto ClampYawRate = 0x23c; // float
	}

	namespace n_UBTTask_GetTotalHangoutTime { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_UStartTallTaleConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_AAggressiveGhostShipPortal { // : AActor
		constexpr auto OpenDuration = 0x408; // float
		constexpr auto ClosingDuration = 0x40c; // float
	}

	namespace n_UAISpawnOrCondition { // : UAISpawnComplexCondition
		constexpr auto Conditions = 0x30; // TArray<UAISpawnOverrideCondition*>
	}

	namespace n_UEnvQueryTest_InsideTinySharkExperience { // : UEnvQueryTest
		constexpr auto BufferRadius = 0x170; // float
	}

	namespace n_APuzzleVault { // : AInteractableObject
		constexpr auto OnVaultActivated = 0x478; // FScriptMulticastDelegate
		constexpr auto OnVaultCompleted = 0x488; // FScriptMulticastDelegate
		constexpr auto OnVaultFailed = 0x498; // FScriptMulticastDelegate
		constexpr auto PuzzleMechanism1ActorComponent = 0x4a8; // USpawnActorComponent*
		constexpr auto PuzzleMechanism2ActorComponent = 0x4b0; // USpawnActorComponent*
		constexpr auto PuzzleMechanism3ActorComponent = 0x4b8; // USpawnActorComponent*
		constexpr auto PuzzleMechanism4ActorComponent = 0x4c0; // USpawnActorComponent*
		constexpr auto Brazier1ActorComponent = 0x4c8; // USpawnActorComponent*
		constexpr auto Brazier2ActorComponent = 0x4d0; // USpawnActorComponent*
		constexpr auto Brazier3ActorComponent = 0x4d8; // USpawnActorComponent*
		constexpr auto Brazier4ActorComponent = 0x4e0; // USpawnActorComponent*
		constexpr auto WaterActorComponent = 0x4e8; // USpawnActorComponent*
		constexpr auto MainDoorActorComponent = 0x4f0; // USpawnActorComponent*
		constexpr auto TimedMainDoorActorComponent = 0x4f8; // USpawnActorComponent*
		constexpr auto RewardDoorActorComponent = 0x500; // USpawnActorComponent*
		constexpr auto PlinthItemSpawnMesh = 0x508; // UStaticMeshComponent*
		constexpr auto ButtonMesh = 0x510; // UStaticMeshComponent*
		constexpr auto DefaultSceneRoot = 0x518; // USceneComponent*
		constexpr auto VaultPassageOverlapVolume = 0x520; // UShapeComponent*
		constexpr auto VaultRoomOverlapVolume = 0x528; // UShapeComponent*
		constexpr auto VaultButtonData = 0x530; // FVaultButtonData
		constexpr auto SpoutParticleSystem = 0xfc0; // UObject*
		constexpr auto VaultName = 0xfc8; // FText
		constexpr auto OuterDoor = 0x1000; // ASlidingDoor*
		constexpr auto DefaultPuzzleData = 0x1008; // UVaultPuzzleDataAsset*
		constexpr auto TreasureVaultPuzzleData = 0x1010; // UVaultPuzzleDataAsset*
		constexpr auto AllocationStrategy = 0x1018; // EAllocationStrategy
		constexpr auto WeightOfBeingChosenByGHVoyage = 0x101c; // float
		constexpr auto DefaultVaultAudioParams = 0x1020; // UPuzzleVaultAudioParams*
		constexpr auto NoWaterVaultAudioParams = 0x1028; // UPuzzleVaultAudioParams*
		constexpr auto NoMusicVaultAudioParams = 0x1030; // UPuzzleVaultAudioParams*
		constexpr auto TreasureVaultAudioParams = 0x1038; // UPuzzleVaultAudioParams*
		constexpr auto TreasureVaultAudioCurve = 0x1040; // FRuntimeFloatCurve
		constexpr auto FillRatePerWaterSpout = 0x10c0; // float
		constexpr auto MaxNumWaterSpouts = 0x10c4; // int32_t
		constexpr auto BrazierExtinguishWaterLevel = 0x10c8; // float
		constexpr auto SpoutsSubmergedWaterLevel = 0x10cc; // float
		constexpr auto WaterFillFactorChangeToUpdateAudio = 0x10d0; // float
		constexpr auto FailureCheckInterval = 0x10d4; // float
		constexpr auto ResetCheckInterval = 0x10d8; // float
		constexpr auto VaultDoorHidingPosition = 0x10dc; // FVector
		constexpr auto VaultDoorActivePosition = 0x10e8; // FVector
		constexpr auto WaterSpoutVFXComponent = 0x10f8; // UWaterSpoutVFXComponent*
		constexpr auto TreasureVaultKeyTypes = 0x1100; // UVaultKeyMappingDataAsset*
		constexpr auto VaultTableAsset = 0x1108; // UClass*
		constexpr auto WaterModifierZoneComponent = 0x1128; // UWaterModifierZoneComponent*
		constexpr auto ReservationTotemAsset = 0x1130; // UClass*
		constexpr auto TotemLocationTag = 0x1150; // FName
		constexpr auto TotemOffset = 0x1158; // FVector
		constexpr auto TallTaleVaultReservation = 0x1164; // FVaultReserved
		constexpr auto SubjectName = 0x1190; // FString
		constexpr auto VaultUniqueId = 0x11a0; // FGuid
		constexpr auto ReservationTotem = 0x11b0; // AActor*
		constexpr auto VaultDoor = 0x11b8; // ASlidingDoor*
		constexpr auto TimedVaultDoor = 0x11c0; // ATimedDoorMechanismAction*
		constexpr auto VaultRewardDoor = 0x11c8; // ASlidingDoor*
		constexpr auto WaterVolume = 0x11d0; // AWaterVolume*
		constexpr auto PuzzleMechanisms = 0x11d8; // TArray<ARotatingBlockPuzzle*>
		constexpr auto Braziers = 0x11e8; // TArray<ABeacon*>
		constexpr auto VaultTable = 0x11f8; // ATreasureVaultTable*
		constexpr auto VaultDataAsset = 0x1200; // UVaultPuzzleDataAsset*
		constexpr auto VaultAudioSetting = 0x1208; // EVaultAudioSettings
		constexpr auto VaultAudioParams = 0x1210; // UPuzzleVaultAudioParams*
		constexpr auto ScaffoldingSpawner = 0x1218; // UTreasureVaultItemSpawnComponent*
		constexpr auto RewardSpawners = 0x1220; // TArray<UTreasureVaultItemSpawnComponent*>
		constexpr auto PressurePlateSpawners = 0x1230; // TArray<UTreasureVaultItemSpawnComponent*>
		constexpr auto Solutions = 0x1240; // TArray<FVaultPuzzleSolutionPositions>
		constexpr auto PlayersInVaultPassage = 0x1250; // TArray<AAthenaPlayerCharacter*>
		constexpr auto MaterialSetReferences = 0x1260; // TArray<FStringAssetReference>
		constexpr auto InteractableComponent = 0x1270; // UInteractableComponent*
		constexpr auto CurrentSolution = 0x1278; // int32_t
		constexpr auto IsActive = 0x127c; // bool
		constexpr auto IsCompleted = 0x127d; // bool
		constexpr auto MaterialSets = 0x1280; // TArray<UVaultMaterialSetDataAsset*>
		constexpr auto NumActiveWaterSpouts = 0x1290; // int32_t
		constexpr auto TimedDoorAnimationProgress = 0x1294; // float
		constexpr auto ActiveActionRule = 0x12d8; // int32_t
		constexpr auto ServerMigrationExclusionRadius = 0x1410; // float
	}

	namespace n_UPopUpMessageDesc { // : UDataAsset
		constexpr auto ToastBackgroundImage = 0x28; // FStringAssetReference
		constexpr auto BackgroundImage = 0x38; // FStringAssetReference
		constexpr auto ForegroundImage = 0x48; // FStringAssetReference
		constexpr auto Text = 0x58; // FText
		constexpr auto BodyText = 0x90; // FText
		constexpr auto AudioSfxEventName = 0xc8; // FString
		constexpr auto AudioEventName = 0xd8; // FString
		constexpr auto AudioSwitchName = 0xe8; // FString
		constexpr auto AudioSwitchValue = 0xf8; // FString
		constexpr auto StyleModifier = 0x108; // FString
		constexpr auto StyleModifiers = 0x118; // TArray<EStyleModifiers>
		constexpr auto AllianceIcon = 0x128; // FStringAssetReference
		constexpr auto HoldDuration = 0x138; // float
	}

	namespace n_USetMechanismActionStateStep { // : UTaleQuestStep
		constexpr auto Desc = 0xd8; // USetMechanismActionStateStepDesc*
		constexpr auto TriggerState = 0xe0; // EMechanismTriggerState
		constexpr auto TriggerType = 0xe1; // EMechanismTriggerType
	}

	namespace n_ACustomMysteriousNotesService { // : AActor
		constexpr auto CustomMysteriousNotes = 0x3d8; // TMap<int32_t, FCustomPlayerNoteList>
	}

	namespace n_UFindNamedPointStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTTask_MoveToFailOnDistanceToTargetChanged { // : UBTTask_MoveToFailOnDistanceChange
		constexpr auto TargetBlackboardKey = 0xc0; // FBlackboardKeySelector
	}

	namespace n_UAIAmmoProgressionTypeList { // : UDataAsset
		constexpr auto AllProgressions = 0x28; // TArray<UAIAmmoRankProgression*>
	}

	namespace n_ULandmarkReactionEventCallInterfaceStartReaction { // : ULandmarkReactionEvent
		constexpr auto RunLocation = 0x38; // EEventRunLocation
	}

	namespace n_UBTTask_SetIsHeadingOffNavMeshCheck { // : UBTTaskNode
		constexpr auto DisableIsHeadingOffNavMeshCheck = 0x60; // bool
	}

	namespace n_UMaterialExpressionTime { // : UMaterialExpression
		constexpr auto bIgnorePause = 0x70; // char : 1
		constexpr auto bOverride_Period = 0x70; // char : 1
		constexpr auto Period = 0x74; // float
	}

	namespace n_UCurveFloat { // : UCurveBase
		constexpr auto FloatCurve = 0x30; // FRichCurve
		constexpr auto bIsEventCurve = 0xa8; // bool
	}

	namespace n_UMovieSceneColorSection { // : UMovieSceneSection
		constexpr auto RedCurve = 0xa0; // FRichCurve
		constexpr auto GreenCurve = 0x118; // FRichCurve
		constexpr auto BlueCurve = 0x190; // FRichCurve
		constexpr auto AlphaCurve = 0x208; // FRichCurve
	}

	namespace n_UWidget { // : UVisual
		constexpr auto bIsVariable = 0x28; // bool
		constexpr auto bCreatedByConstructionScript = 0x29; // bool
		constexpr auto Slot = 0x30; // UPanelSlot*
		constexpr auto bIsEnabled = 0x38; // bool
		constexpr auto bIsEnabledDelegate = 0x3c; // DelegateProperty
		constexpr auto ToolTipText = 0x50; // FText
		constexpr auto ToolTipTextDelegate = 0x88; // DelegateProperty
		constexpr auto ToolTipWidget = 0x98; // UWidget*
		constexpr auto ToolTipWidgetDelegate = 0xa0; // DelegateProperty
		constexpr auto Visiblity = 0xb0; // ESlateVisibility
		constexpr auto Visibility = 0xb1; // ESlateVisibility
		constexpr auto VisibilityDelegate = 0xb4; // DelegateProperty
		constexpr auto bOverride_Cursor = 0xc4; // char : 1
		constexpr auto Cursor = 0xc8; // EMouseCursor
		constexpr auto bIsVolatile = 0xc9; // bool
		constexpr auto RenderTransform = 0xcc; // FWidgetTransform
		constexpr auto RenderTransformPivot = 0xe8; // FVector2D
		constexpr auto Navigation = 0xf0; // UWidgetNavigation*
		constexpr auto NativeBindings = 0x128; // TArray<UPropertyBinding*>
	}

	namespace n_UBlackboardKeyType_Object { // : UBlackboardKeyType
		constexpr auto BaseClass = 0x30; // UObject*
	}

	namespace n_UCustomStatusesService { // : UObject
		constexpr auto World = 0x30; // UWorld*
	}

	namespace n_UTrackedActorService { // : UObject
		constexpr auto ActorsAwaitingRegistration = 0x30; // TArray<AActor*>
	}

	namespace n_UOnDigTriggerFuse { // : UOnDigStrategy
		constexpr auto OnlyIfBuriedByPlayer = 0x28; // bool
	}

	namespace n_UParticleSystemAggregateTickSettings { // : UObject
		constexpr auto FramesTickScaledOver = 0x28; // int32_t
		constexpr auto MaxTicksPerFrame = 0x2c; // int32_t
		constexpr auto PriorityInflationPower = 0x30; // float
	}

	namespace n_UParticleModuleSubUVMovie { // : UParticleModuleSubUV
		constexpr auto bUseEmitterTime = 0x90; // char : 1
		constexpr auto FrameRate = 0x98; // FRawDistributionFloat
		constexpr auto StartingFrame = 0xd0; // int32_t
	}

	namespace n_UActorSequenceComponent { // : UActorComponent
		constexpr auto PlaybackSettings = 0xc8; // FMovieSceneSequencePlaybackSettings
		constexpr auto Sequence = 0xf0; // UActorSequence*
		constexpr auto SequencePlayer = 0xf8; // UActorSequencePlayer*
		constexpr auto bAutoPlay = 0x100; // bool
	}

	namespace n_AInteractableBase { // : AActor
		constexpr auto RequiresFacingFront = 0x3e0; // bool
		constexpr auto RequiresNotBeingAirborne = 0x3e1; // bool
		constexpr auto RequiresNotSwimming = 0x3e2; // bool
		constexpr auto InteractionsCanBeDisabled = 0x3e3; // bool
		constexpr auto CanSetInteractionState = 0x3e4; // bool
		constexpr auto ActionRulesComponent = 0x3e8; // UActionRulesComponent*
		constexpr auto InteractableIdentifier = 0x3f0; // EInteractableIdentifier
		constexpr auto CurrentInteractionState = 0x3f2; // EInteractableState
	}

	namespace n_UOceanCrawlerAnimationServerData { // : UAnimationServerData
		constexpr auto AnimInstanceType = 0x30; // UAnimInstance*
		constexpr auto MaxSpawnAnimDuration = 0x38; // float
		constexpr auto MaxSpawnOnShipAnimDuration = 0x3c; // float
		constexpr auto MaxSpawnBoardingAnimDuration = 0x40; // float
	}

	namespace n_UClearSpawnProgressStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UClueFactoryConfig { // : UDataAsset
		constexpr auto LandClueCreators = 0x28; // TArray<ULandClueCreator*>
		constexpr auto SeaClueCreators = 0x38; // TArray<USeaClueCreator*>
		constexpr auto ChoiceStrategy = 0x48; // UClueChoiceSelectionStrategy*
		constexpr auto RestrictedClueTypes = 0x50; // TArray<FRestrictedClueType>
	}

	namespace n_UCargoRunCrateMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_USkeletonAnimationInstance { // : UThirdPersonAnimationInstance
		constexpr auto SkeletonAIFastPathData = 0x3cf0; // FAthenaAnimationSkeletonAIFastPathData
		constexpr auto HeldObjectList = 0x3cf8; // UNPCHeldObjectData*
		constexpr auto LeftHandObject = 0x3d00; // AActor*
		constexpr auto RightHandObject = 0x3d08; // AActor*
		constexpr auto ObjectOverlayBlendOutTime = 0x3d10; // float
		constexpr auto CustomAnimationData = 0x3d18; // UAthenaAnimationCustomSkeletonAnimationData*
		constexpr auto CustomAnimationBlueprintData = 0x3d20; // FAthenaAnimationCustomSkeletonAnimationBlueprintData
		constexpr auto PreviousCustomAnimationState = 0x3d78; // ENPCCustomAnimationState
		constexpr auto CustomAnimationCurrentMontage = 0x3d80; // UAnimMontage*
	}

	namespace n_ULookAtOffsetInputComponent { // : UAthenaCharacterBaseInputComponentWithInterference
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AVolume { // : ABrush
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UMigrationControlChannel { // : UChannel
		constexpr auto Connection = 0x28; // UNetConnection*
	}

	namespace n_UCustomMeshComponent { // : UMeshComponent
		constexpr auto OverrideMaterials = 0x588; // TArray<UMaterialInterface*>
	}

	namespace n_UParticleModuleBeamNoise { // : UParticleModuleBeamBase
		constexpr auto bLowFreq_Enabled = 0x50; // char : 1
		constexpr auto Frequency = 0x54; // int32_t
		constexpr auto Frequency_LowRange = 0x58; // int32_t
		constexpr auto NoiseRange = 0x60; // FRawDistributionVector
		constexpr auto NoiseRangeScale = 0x98; // FRawDistributionFloat
		constexpr auto bNRScaleEmitterTime = 0xd0; // char : 1
		constexpr auto NoiseSpeed = 0xd8; // FRawDistributionVector
		constexpr auto bSmooth = 0x110; // char : 1
		constexpr auto NoiseLockRadius = 0x114; // float
		constexpr auto bNoiseLock = 0x118; // char : 1
		constexpr auto bOscillate = 0x118; // char : 1
		constexpr auto NoiseLockTime = 0x11c; // float
		constexpr auto NoiseTension = 0x120; // float
		constexpr auto bUseNoiseTangents = 0x124; // char : 1
		constexpr auto NoiseTangentStrength = 0x128; // FRawDistributionFloat
		constexpr auto NoiseTessellation = 0x160; // int32_t
		constexpr auto bTargetNoise = 0x164; // char : 1
		constexpr auto FrequencyDistance = 0x168; // float
		constexpr auto bApplyNoiseScale = 0x16c; // char : 1
		constexpr auto NoiseScale = 0x170; // FRawDistributionFloat
	}

	namespace n_UWorldMarkerRoutingComponent { // : UActorComponent
		constexpr auto DefaultListenerType = 0xd0; // AActor*
		constexpr auto MarkerListener = 0xd8; // TScriptInterface<Class>
	}

	namespace n_UMapBundleCategory_C { // : UBootyCategory_C
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UParticleModuleAttractorBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UAISpawner { // : UDataAsset
		constexpr auto HasSpawnerLevelEncounters = 0x38; // bool
		constexpr auto SpawnTypeParamsCollection = 0x40; // FAISpawnTypeParamsCollection
		constexpr auto DefaultEncounterSettings = 0x88; // UAIEncounterSettings*
		constexpr auto DefaultSpawnWaveProgression = 0x90; // UAISpawnWaveSequenceRankProgression*
		constexpr auto SpawnContextSpecificEncounterSettings = 0x98; // TArray<FAISpawnContextIdEncounterSettingsPair>
		constexpr auto ShouldSpawnFacingRegionCentre = 0xa8; // bool
		constexpr auto DefaultSpawnType = 0xa9; // EAthenaAISpawnType
		constexpr auto FindSpawnPosQuery = 0xb0; // UEnvQuery*
		constexpr auto FindSpawnPosQueryRunMode = 0xb8; // EEnvQueryRunMode
		constexpr auto SpawnLocationType = 0xbc; // FName
		constexpr auto MaxNumOfSpawnedPawns = 0xc4; // int32_t
		constexpr auto PriorityForSpawnedPawns = 0xc8; // int32_t
		constexpr auto SpawnOverrides = 0xd0; // TArray<FConditionalAISpawnOverride>
		constexpr auto AdditionalBehaviours = 0xe0; // TArray<FAdditionalSpawnerBehaviour>
		constexpr auto AthenaAISettings = 0x360; // UAthenaAISettings*
	}

	namespace n_UAnotherComponentWithTestInterface { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UIslandBoundsComponent { // : USphereComponent
		constexpr auto SphereRadius = 0x5a8; // float
	}

	namespace n_UAIIncrementalWaveSpawner { // : UAISpawner
		constexpr auto SpawnedWave = 0x428; // FAISpawnerWave
	}

	namespace n_UDynamicCordRenderComponent { // : UCordRenderComponent
		constexpr auto BoundsPadding = 0x628; // float
		constexpr auto EndPointA = 0x630; // USceneComponent*
		constexpr auto EndPointB = 0x638; // USceneComponent*
	}

	namespace n_UAbilityTask_WaitVelocityChange { // : UAbilityTask
		constexpr auto OnVelocityChage = 0x68; // FScriptMulticastDelegate
		constexpr auto CachedMovementComponent = 0x78; // UMovementComponent*
	}

	namespace n_UBookMark2D { // : UObject
		constexpr auto Zoom2D = 0x28; // float
		constexpr auto Location = 0x2c; // FIntPoint
	}

	namespace n_URepairableComponent { // : UInteractableComponent
		constexpr auto OnRepairableStateChanged = 0x130; // FScriptMulticastDelegate
		constexpr auto OnDamageLevelChanged = 0x140; // FScriptMulticastDelegate
		constexpr auto OnRepairMounted = 0x150; // FScriptMulticastDelegate
		constexpr auto InteractionPointDepthOffset = 0x160; // float
		constexpr auto MaximumRepairAngleToRepairer = 0x164; // float
		constexpr auto MaximumRepairDistance = 0x168; // float
		constexpr auto RepairTime = 0x16c; // float
		constexpr auto RepairType = 0x170; // URepairTypeId*
		constexpr auto RepairMountParent = 0x178; // USceneComponent*
		constexpr auto RepairMountOffset = 0x180; // FTransform
		constexpr auto RepairMountSocket = 0x1b0; // FName
		constexpr auto MaxDamageLevel = 0x1b8; // int32_t
		constexpr auto AIInteractionType = 0x1c0; // UAIInteractableType*
		constexpr auto AIInteractionOffset = 0x1c8; // FVector
		constexpr auto AuthorityRepairableState = 0x1d8; // FRepairableAuthoritiveRepairState
		constexpr auto RepairableState = 0x1f0; // ERepairableState
		constexpr auto DamageLevel = 0x1f4; // int32_t
		constexpr auto InteractionState = 0x1f8; // EInteractableState
	}

	namespace n_UUserWidget { // : UWidget
		constexpr auto ColorAndOpacity = 0x140; // FLinearColor
		constexpr auto ColorAndOpacityDelegate = 0x150; // DelegateProperty
		constexpr auto ForegroundColor = 0x160; // FSlateColor
		constexpr auto ForegroundColorDelegate = 0x190; // DelegateProperty
		constexpr auto bSupportsKeyboardFocus = 0x1a0; // bool
		constexpr auto WidgetTree = 0x1a8; // UWidgetTree*
		constexpr auto ActiveSequencePlayers = 0x1b0; // TArray<UUMGSequencePlayer*>
		constexpr auto StoppedSequencePlayers = 0x1c0; // TArray<UUMGSequencePlayer*>
		constexpr auto NamedSlotBindings = 0x1d0; // TArray<FNamedSlotBinding>
	}

	namespace n_UAthenaAnimationInstance { // : UCharacterAnimationInstance
		constexpr auto ControllableObjectType = 0x698; // EControllableObjectType
		constexpr auto AllLoadedItemData = 0x6a0; // TArray<FAthenaAnimationLoadObjectsWrapper>
		constexpr auto HandHeldItemParams = 0x6b0; // FAthenaAnimationHandHeldItemParams
		constexpr auto IdleVariantParams = 0x6d0; // FAthenaAnimationIdleVariantChange
		constexpr auto WheelAnimationParams = 0x6e0; // FAthenaAnimationWheel
		constexpr auto CapstanAnimationParams = 0x8b0; // FAthenaAnimationCapstan
		constexpr auto FacialParams = 0xa08; // FAthenaAnimationFacialAnimData
		constexpr auto Fire = 0xa98; // FAthenaAnimationFire
		constexpr auto MeleeSpecialState = 0xab8; // EMeleeSpecialState
		constexpr auto DodgeDirection = 0xabc; // float
		constexpr auto RowboatParams = 0xac0; // FAthenaAnimationRowboatParams
		constexpr auto Rowing = 0xb88; // FAthenaAnimationRowing
		constexpr auto WaterPumpAnimations = 0xc48; // FAthenaAnimationWaterPumpAnimData
		constexpr auto WaterPumpAnimationParams = 0xc70; // FAthenaAnimationWaterPumpParams
		constexpr auto FishingParams = 0xc7c; // FAthenaAnimationFishingParams
		constexpr auto Fishing = 0xcb0; // FAthenaAnimationFishing
		constexpr auto WaterSlideControlAnimData = 0xff0; // FAthenaAnimationWaterSlideControlAnimData
		constexpr auto AthenaCharacter = 0x1010; // AAthenaCharacter*
		constexpr auto JumpingAnimationParams = 0x1018; // FAthenaAnimationJumping
		constexpr auto SpineBlendAlpha = 0x10e8; // float
		constexpr auto DockingTransitionAlpha = 0x10ec; // float
		constexpr auto AthenaAnimationWaterPump = 0x10f0; // FAthenaAnimationWaterPump
		constexpr auto AnimationLODSettings = 0x1120; // FAthenaAnimationLODSettings
		constexpr auto Locomotion = 0x1128; // FAthenaAnimationLocomotion
		constexpr auto WieldedItemStateMachine = 0x1190; // FAthenaAnimationWieldedItemStateMachine
		constexpr auto ItemLoading = 0x16a0; // FAthenaAnimationLoadObjectByID
		constexpr auto CurrentWieldedItemALK = 0x2060; // UWieldableItemAnimationStoreId*
		constexpr auto ItemLocomotionAnims = 0x2068; // FAthenaAnimationObjectLocomotionAnimations
		constexpr auto ItemJumpingAnims = 0x20a8; // FAthenaAnimationObjectJumpingAnimations
		constexpr auto ItemEquippingAnims = 0x20c8; // FAthenaAnimationObjectEquipAnimations
		constexpr auto ItemFishingAnims = 0x2108; // FAthenaAnimationFishingAnimations
		constexpr auto ItemIdleAnims = 0x2198; // FAthenaAnimationObjectIdleAnimations
		constexpr auto ItemPrimaryContinousUseAnims = 0x21b0; // FAthenaAnimationObjectActionContinuousStruct
		constexpr auto ItemSecondaryContinousUseAnims = 0x2258; // FAthenaAnimationObjectActionContinuousStruct
		constexpr auto ItemPrimaryContinousUseAlternateAnims = 0x2300; // FAthenaAnimationObjectActionContinuousStruct
		constexpr auto ItemSecondaryContinousUseAlternateAnims = 0x23a8; // FAthenaAnimationObjectActionContinuousStruct
		constexpr auto ItemPrimaryContinousUseSwimmingAnims = 0x2450; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemSecondaryContinousUseSwimmingAnims = 0x2470; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemPrimaryContinousUseSwimmingAlternateAnims = 0x2490; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemSecondaryContinousUseSwimmingAlternateAnims = 0x24b0; // FAthenaAnimationObjectActionContinuousSwimming
		constexpr auto ItemPrimaryContinousUseJumpingAnims = 0x24d0; // FAthenaAnimationObjectJumpingAnimations
		constexpr auto ItemSecondaryContinousUseJumpingAnims = 0x24f0; // FAthenaAnimationObjectJumpingAnimations
		constexpr auto ItemPrimaryContinousUseJumpingAlternateAnims = 0x2510; // FAthenaAnimationObjectJumpingAnimations
		constexpr auto ItemSecondaryContinousUseJumpingAlternateAnims = 0x2530; // FAthenaAnimationObjectJumpingAnimations
		constexpr auto ActiveOneShotAnimations = 0x2550; // FAthenaAnimationActiveOneShotAnimationStruct
		constexpr auto DuplicateActiveOneShotAnimations = 0x2570; // FAthenaAnimationActiveOneShotAnimationStruct
		constexpr auto ItemPrimaryOneShotAnims = 0x2590; // FAthenaAnimationObjectActionOneShotPlayingStruct
		constexpr auto ItemSecondaryOneShotAnims = 0x25b8; // FAthenaAnimationObjectActionOneShotPlayingStruct
		constexpr auto ItemPrimaryOneShotAlternateAnims = 0x25e0; // FAthenaAnimationObjectActionOneShotPlayingStruct
		constexpr auto ItemSecondaryOneShotAlternateAnims = 0x2608; // FAthenaAnimationObjectActionOneShotPlayingStruct
		constexpr auto CurrentComplexOneShotData = 0x2630; // FAthenaAnimationActiveItemComplexAnimData
		constexpr auto CurrentMeleeAttackSequencePlaySpeeds = 0x2668; // FAthenaAnimationObjectComplexOneShotPlaySpeeds
		constexpr auto ItemCombatBlockingAnims = 0x2680; // FAthenaAnimationObjectMeleeBlocking
		constexpr auto FishingRodAnimStoreID = 0x26e0; // UWieldableItemAnimationStoreId*
		constexpr auto QuestBookAnimStoreID = 0x26e8; // UWieldableItemAnimationStoreId*
		constexpr auto WoodenPlankAnimStoreID = 0x26f0; // UWieldableItemAnimationStoreId*
		constexpr auto UnequipPlayRate = 0x26f8; // float
		constexpr auto ControllableSocketGroup = 0x26fc; // EAthenaAnimationSocketGroup
		constexpr auto ControllableSocketGroupCharacterSize = 0x26fd; // EAthenaAnimationSocketGroupCharacterSize
		constexpr auto LocomotionState = 0x26fe; // ELocomotionType
		constexpr auto DebugTrackingParams = 0x26ff; // FAthenaAnimationDebugTrackingParams
		constexpr auto Death = 0x2708; // FAthenaAnimationDeath
		constexpr auto UndoRepair = 0x2800; // FAthenaAnimationUndoRepair
		constexpr auto Sitting = 0x2870; // FAthenaAnimationSitting
		constexpr auto PropWieldLocation = 0x28e0; // EWieldAnimationLocation
		constexpr auto PropOffsetLocation = 0x28e4; // FVector
		constexpr auto PropOffsetRotation = 0x28f0; // FRotator
		constexpr auto PropOffsetScale = 0x28fc; // FVector
		constexpr auto FaunaAddedToCrate = 0x2908; // char : 1
		constexpr auto InDockingTransition = 0x2908; // char : 1
		constexpr auto WieldedItemIsMeleeWeapon = 0x2908; // char : 1
		constexpr auto InMeleeCombat = 0x2908; // char : 1
		constexpr auto IsBlockingLeft = 0x2908; // char : 1
		constexpr auto IsFishingWithWieldedRod = 0x2908; // char : 1
		constexpr auto UsePropOffset = 0x2908; // char : 1
		constexpr auto IsOnLadder = 0x2908; // char : 1
		constexpr auto IsUsingAdditiveHandOverlayPose = 0x2909; // char : 1
		constexpr auto IgnoreIdleBlendTransition = 0x2909; // char : 1
		constexpr auto UseDuplicateOneShotState = 0x2909; // char : 1
	}

	namespace n_ACommodityDemandService { // : AActor
		constexpr auto ActiveCommodityDemands = 0x3f0; // FActiveNPCDemands
	}

	namespace n_ASkellyFortOfTheDamned { // : ASkellyFort
		constexpr auto PreBossMusicZone = 0x800; // UMusicZoneComponent*
		constexpr auto BossMusicZone = 0x808; // UMusicZoneComponent*
		constexpr auto FortBellPool = 0x810; // UWwiseObjectPoolWrapper*
		constexpr auto FortBellOneshot = 0x818; // UWwiseEvent*
		constexpr auto EmitterOffset = 0x820; // FVector
		constexpr auto DoorClosesWhenPlayersLeaveVicinity = 0x82c; // bool
		constexpr auto CurrentAudioState = 0x82d; // EDamnedFortAudioState
	}

	namespace n_UStrongholdKeyData { // : UDataAsset
		constexpr auto StrongholdKeys = 0x28; // TArray<FStrongholdKeyInfo>
	}

	namespace n_UItemDesc { // : UEntitlementDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_UCannonRecoilComponent { // : UActorComponent
		constexpr auto RecoilForce = 0xc8; // float
		constexpr auto YawToRecoilForceModifierCurve = 0xd0; // UCurveFloat*
		constexpr auto IgnoreRecoilIfAttachedToParent = 0xd8; // bool
	}

	namespace n_UVaultKeyMappingDataAsset { // : UDataAsset
		constexpr auto KeyMappings = 0x28; // TArray<FVaultKeyMapping>
	}

	namespace n_ADoorMechanism { // : AToggleAnimatedMechanismAction
		constexpr auto DoorMeshComponent = 0x570; // UStaticMeshComponent*
		constexpr auto RewindComponent = 0x578; // URewindComponent*
	}

	namespace n_UClueSiteLootRestrictionsDataAsset { // : UDataAsset
		constexpr auto ClueSiteLootRestrictions = 0x28; // TArray<FClueSiteLootRestriction>
	}

	namespace n_AGlitterBeardTree { // : AActor
		constexpr auto ActionRulesComponent = 0x3f8; // UActionRulesComponent*
		constexpr auto InteractableComponent = 0x400; // UActionRulesInteractableComponent*
		constexpr auto LanternLightDelay = 0x408; // float
		constexpr auto UnlockVFXCoordinatorComponent = 0x410; // UGlitterBeardUnlockVFXCoordinatorComponent*
		constexpr auto TelemetryComponent = 0x418; // UGlitterBeardTelemetryComponent*
		constexpr auto VocalShanty = 0x420; // UShantyItemDesc*
		constexpr auto VocalsFadeEvent = 0x428; // UWwiseEvent*
		constexpr auto VocalsFadeDelay = 0x430; // float
		constexpr auto UnlockDelay = 0x434; // float
		constexpr auto FinaleCoordinator = 0x438; // UGlitterBeardFinaleCoordinatorComponent*
		constexpr auto LandmarkReactionTrigger = 0x440; // ULandmarkReactionTriggerComponent*
		constexpr auto DistanceFromTreeToPauseAISpawn = 0x448; // float
		constexpr auto HideoutDoor = 0x678; // ASlidingDoor*
		constexpr auto SoundEmitter = 0x680; // FWwiseEmitter
	}

	namespace n_UCrewSpecificCutsceneComponent { // : UCutsceneComponent
		constexpr auto LocalisedNames = 0xd8; // TArray<FText>
		constexpr auto CutsceneAsset = 0xe8; // UCutsceneDataAsset*
		constexpr auto CutSceneActor = 0xf0; // AActor*
		constexpr auto CutsceneActorType = 0xf8; // AActor*
		constexpr auto CutsceneActorInterface = 0x100; // TScriptInterface<Class>
		constexpr auto MaxPlayRange = 0x110; // float
		constexpr auto DelayBeforeDequeueAttempt = 0x114; // float
	}

	namespace n_USoundNodeModulatorContinuous { // : USoundNode
		constexpr auto PitchModulationParams = 0x38; // FModulatorContinuousParams
		constexpr auto VolumeModulationParams = 0x58; // FModulatorContinuousParams
	}

	namespace n_UAbilityTask_WaitGameplayEffectApplied_Self { // : UAbilityTask_WaitGameplayEffectApplied
		constexpr auto OnApplied = 0x130; // FScriptMulticastDelegate
	}

	namespace n_USpectatorPawnMovement { // : UFloatingPawnMovement
		constexpr auto bIgnoreTimeDilation = 0x178; // char : 1
	}

	namespace n_UBTTask_SwimAttackTargetActor { // : UBTTask_BlackboardBase
		constexpr auto DamageToApply = 0x88; // float
		constexpr auto MaxAngleToTargetToSuccessfullyAttack = 0x8c; // float
		constexpr auto AttackAnimMapping = 0x90; // TArray<FAttackableTypeToAnimMapping>
		constexpr auto LoSTraceProfileName = 0xa0; // FName
		constexpr auto LosTraceRadius = 0xa8; // FAIDataProviderFloatValue
		constexpr auto MaxDistanceToTargetToApplyDamage = 0xd8; // float
	}

	namespace n_AMusicBox { // : AInteractableObject
		constexpr auto InteractableComponent = 0x460; // UInteractableComponent*
		constexpr auto RootSceneComponent = 0x468; // USceneComponent*
		constexpr auto MeshComponent = 0x470; // USkeletalMeshComponent*
		constexpr auto SfxMusic = 0x478; // UWwiseEvent*
		constexpr auto SfxPool = 0x480; // UWwiseObjectPoolWrapper*
		constexpr auto SfxEmitterName = 0x488; // FName
		constexpr auto IsPlaying = 0x490; // bool
	}

	namespace n_ULocationMapParams { // : UDataAsset
		constexpr auto BannerParams = 0x28; // TArray<FLocationMapBannerParams>
		constexpr auto ChestMarkId = 0x38; // UMapMarkId*
		constexpr auto ChestScale = 0x40; // float
		constexpr auto CrossTextures = 0x48; // TArray<UMapMarkId*>
		constexpr auto CrossScale = 0x58; // float
		constexpr auto VaultSymbolCanvasOffset = 0x5c; // FVector2D
		constexpr auto VaultSymbolScale = 0x64; // float
	}

	namespace n_UAbilityTask_WaitGameplayTagAdded { // : UAbilityTask_WaitGameplayTag
		constexpr auto Added = 0x88; // FScriptMulticastDelegate
	}

	namespace n_UTaleQuestBreakStructStep { // : UTaleQuestStructStepBase
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UCreateSessionCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UDistributionVectorConstant { // : UDistributionVector
		constexpr auto Constant = 0x38; // FVector
		constexpr auto bLockAxes = 0x44; // char : 1
		constexpr auto LockedAxes = 0x48; // EDistributionVectorLockFlags
	}

	namespace n_ATestInteractableObject { // : AInteractableObject
		constexpr auto FilterDesc = 0x410; // UOneShotInteractableFilterDesc*
		constexpr auto Verb = 0x418; // FText
	}

	namespace n_URammableExplosiveDataAsset { // : UDataAsset
		constexpr auto ExplosiveSpeedParams = 0x28; // TArray<FRammableExplosiveEntry>
	}

	namespace n_UMovieSceneCameraShakeTrack { // : UMovieSceneNameableTrack
		constexpr auto CameraShakeSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_AHitRegSnapshotActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UInitialisePuzzleVaultStepDesc { // : UTaleQuestStepDesc
		constexpr auto Vault = 0x80; // FQuestVariableActor
		constexpr auto SolutionAsset = 0x90; // FQuestVariableDataAsset
	}

	namespace n_UAnimationAsset { // : UObject
		constexpr auto Skeleton = 0x28; // USkeleton*
		constexpr auto MetaData = 0x40; // TArray<UAnimMetaData*>
	}

	namespace n_UPlayerMusicControllerParams { // : UDataAsset
		constexpr auto WorldRegionStateGroup = 0x28; // FName
		constexpr auto WorldRegionStateNames = 0x30; // TArray<FName>
		constexpr auto PlayerOnIslandStart = 0x40; // UWwiseEvent*
		constexpr auto PlayerOnIslandStop = 0x48; // UWwiseEvent*
		constexpr auto PlayerAtSeaStart = 0x50; // UWwiseEvent*
		constexpr auto PlayerAtSeaStop = 0x58; // UWwiseEvent*
		constexpr auto PlayerInCaveStart = 0x60; // UWwiseEvent*
		constexpr auto PlayerInCaveStop = 0x68; // UWwiseEvent*
		constexpr auto PlayerUnderwaterStart = 0x70; // UWwiseEvent*
		constexpr auto PlayerUnderwaterStop = 0x78; // UWwiseEvent*
		constexpr auto FactorForSwitchingAtSeaMoodMusicOn = 0x80; // float
		constexpr auto PlayerHeightRtpc = 0x84; // FName
		constexpr auto PlayerSittingStart = 0x90; // UWwiseEvent*
		constexpr auto PlayerSittingStop = 0x98; // UWwiseEvent*
		constexpr auto BoatSpeedRtpc = 0xa0; // FName
		constexpr auto BoatSpeedRtpcMin = 0xa8; // float
		constexpr auto BoatSpeedRtpcMax = 0xac; // float
		constexpr auto AtSeaAtSpeedStingCooldownMax = 0xb0; // float
		constexpr auto AtSeaAtSpeedStingCooldownMin = 0xb4; // float
		constexpr auto AtSeaAtSpeedPlay = 0xb8; // UWwiseEvent*
		constexpr auto SailBillowStingCooldown = 0xc0; // float
		constexpr auto SailBillowOneshotPlay = 0xc8; // UWwiseEvent*
		constexpr auto SailBillowOneshotPlayMediumShip = 0xd0; // UWwiseEvent*
		constexpr auto AtSeaWildHarpaPlay = 0xd8; // UWwiseEvent*
		constexpr auto AtSeaWildHarpaStop = 0xe0; // UWwiseEvent*
		constexpr auto IslandRevealStateGroup = 0xe8; // FName
		constexpr auto IslandRevealStateInitial = 0xf0; // FName
		constexpr auto SmallestCaveEnclosedRatio = 0xf8; // float
		constexpr auto SmallestCaveSize = 0xfc; // float
		constexpr auto PredominantCaveSurface = 0x100; // EPhysicalSurface
		constexpr auto SkellyProximityDistance = 0x104; // float
		constexpr auto MinSkellies = 0x108; // int32_t
		constexpr auto MaxSkellies = 0x10c; // int32_t
		constexpr auto SkeletonProximityMusicStart = 0x110; // UWwiseEvent*
		constexpr auto SkeletonProximityMusicStop = 0x118; // UWwiseEvent*
		constexpr auto SkeletonPursuitMusicStart = 0x120; // UWwiseEvent*
		constexpr auto SkeletonPursuitMusicStop = 0x128; // UWwiseEvent*
		constexpr auto OceanCrawlersPursuitMusicStart = 0x130; // UWwiseEvent*
		constexpr auto OceanCrawlersPursuitMusicStop = 0x138; // UWwiseEvent*
		constexpr auto PhantomsPursuitMusicStart = 0x140; // UWwiseEvent*
		constexpr auto PhantomsPursuitMusicStop = 0x148; // UWwiseEvent*
		constexpr auto ThreatAmountRtpc = 0x150; // FName
		constexpr auto AncientSkellyMusicPlay = 0x158; // UWwiseEvent*
		constexpr auto AncientSkellyMusicStop = 0x160; // UWwiseEvent*
		constexpr auto AncientSkellyDespawned = 0x168; // UWwiseEvent*
		constexpr auto AncientSkellyKilled = 0x170; // UWwiseEvent*
		constexpr auto BountyQuestProgressFactor = 0x178; // FName
		constexpr auto BountyQuestAnticipationStart = 0x180; // UWwiseEvent*
		constexpr auto BountyQuestAnticipationStop = 0x188; // UWwiseEvent*
		constexpr auto BountyQuestActionStart = 0x190; // UWwiseEvent*
		constexpr auto BountyQuestActionStop = 0x198; // UWwiseEvent*
		constexpr auto MinDistanceMaxVolumeCms = 0x1a0; // float
		constexpr auto MaxDistanceMinVolumeCms = 0x1a4; // float
		constexpr auto BountyQuestDistanceRtpc = 0x1a8; // FName
		constexpr auto FactorForChangingBountyToActionState = 0x1b0; // float
		constexpr auto CooldownForAnticipationMusicRetrigger = 0x1b4; // float
		constexpr auto BountyFortAnticipationStart = 0x1b8; // UWwiseEvent*
		constexpr auto BountyFortAnticipationStop = 0x1c0; // UWwiseEvent*
		constexpr auto BountyFortAnticipationStopHighString = 0x1c8; // UWwiseEvent*
		constexpr auto BountyFortActionStart = 0x1d0; // UWwiseEvent*
		constexpr auto BountyFortActionStop = 0x1d8; // UWwiseEvent*
		constexpr auto FactorForChangingFortToActionState = 0x1e0; // float
		constexpr auto BountyFortSkellyProximityRtpc = 0x1e4; // FName
		constexpr auto BountyFortSkellyProximityMax = 0x1ec; // float
		constexpr auto BountyFortSkellyProximityClose = 0x1f0; // UWwiseEvent*
		constexpr auto GlobalMusicRtpc = 0x1f8; // FName
		constexpr auto GlobalMusicRtpcMax = 0x200; // float
		constexpr auto GlobalMusicRtpcMin = 0x204; // float
		constexpr auto ShipwreckProximityDistance = 0x208; // float
		constexpr auto PlayerNearShipwreckStart = 0x210; // UWwiseEvent*
		constexpr auto PlayerNearShipwreckStop = 0x218; // UWwiseEvent*
		constexpr auto SharkPoolForCollection = 0x220; // UWwiseObjectPoolWrapper*
		constexpr auto SharkProximity = 0x228; // float
		constexpr auto PlaySharkProximity = 0x230; // UWwiseEvent*
		constexpr auto StopSharkProximity = 0x238; // UWwiseEvent*
		constexpr auto PlaySharkAttackOneShot = 0x240; // UWwiseEvent*
		constexpr auto SharkAttackStateGroupName = 0x248; // FName
		constexpr auto SharkAttackStatePreAttack = 0x250; // FName
		constexpr auto SharkAttackStatePostAttack = 0x258; // FName
		constexpr auto MaxSharkHeightDelta = 0x260; // float
		constexpr auto ServerMigrationStart = 0x268; // UWwiseEvent*
		constexpr auto ServerMigrationStop = 0x270; // UWwiseEvent*
		constexpr auto PotentialThreatFactorRtpc = 0x278; // FName
		constexpr auto PotentialThreatMinDistance = 0x280; // float
		constexpr auto PotentialThreatMaxDistance = 0x284; // float
		constexpr auto PlayEdgeOfTheWorldMusic = 0x288; // UWwiseEvent*
		constexpr auto StopEdgeOfTheWorldMusic = 0x290; // UWwiseEvent*
		constexpr auto EdgeOfTheWorldProximityFactorRtpc = 0x298; // FName
		constexpr auto MaxDistanceToPlayEdgeOfTheWorldMusic = 0x2a0; // float
		constexpr auto MinDistanceToPlayEdgeOfTheWorldMusic = 0x2a4; // float
		constexpr auto CompanyRegionStateGroup = 0x2a8; // FName
		constexpr auto CompanyRegionNames = 0x2b0; // TArray<FName>
		constexpr auto CompanyMoodStart = 0x2c0; // UWwiseEvent*
		constexpr auto CompanyMoodStop = 0x2c8; // UWwiseEvent*
		constexpr auto KrakenMusicEvents = 0x2d0; // TArray<FKrakenMusicEvent>
		constexpr auto KrakenTentacleTakeHitEvents = 0x2e0; // TArray<UWwiseEvent*>
		constexpr auto KrakenTentacleKilledEvents = 0x2f0; // TArray<UWwiseEvent*>
		constexpr auto KrakenHeadHitEvent = 0x300; // UWwiseEvent*
		constexpr auto TinySharkExperienceMusic = 0x308; // FTinySharkMusicEvent
		constexpr auto TinySharkPursuitStrategies = 0x318; // TArray<UAIStrategyId*>
		constexpr auto TinySharkAttackStateGroup = 0x328; // FName
		constexpr auto TinySharkAttackState = 0x330; // FName
		constexpr auto TinySharkCircleState = 0x338; // FName
		constexpr auto TinySharkEmergeHeight = 0x340; // float
		constexpr auto TinySharkSubmergedRtpc = 0x344; // FName
		constexpr auto SubmergeRtpcMin = 0x34c; // float
		constexpr auto SubmergeRtpcMax = 0x350; // float
		constexpr auto TinySharkHealthChangeAmoutForSting = 0x354; // float
		constexpr auto TinySharkHitSting = 0x358; // UWwiseEvent*
		constexpr auto TinySharkDeathSting = 0x360; // UWwiseEvent*
		constexpr auto TinySharkSummonSting = 0x368; // UWwiseEvent*
		constexpr auto TinySharkMusicStartDelay = 0x370; // float
		constexpr auto TinySharkMusicProximity = 0x374; // float
		constexpr auto TinySharkAttackStingStart = 0x378; // UWwiseEvent*
		constexpr auto TinySharkAttackStingStop = 0x380; // UWwiseEvent*
		constexpr auto SkellyShipEncounterStarted = 0x388; // UWwiseEvent*
		constexpr auto SkellyShipEmergentEncounterStarted = 0x390; // UWwiseEvent*
		constexpr auto SkellyShipEncounterFinished = 0x398; // UWwiseEvent*
		constexpr auto SkellyShipEmergentEncounterFinished = 0x3a0; // UWwiseEvent*
		constexpr auto SkellyShipEncounterFinishedAfterFinalWave = 0x3a8; // UWwiseEvent*
		constexpr auto SkellyShipFinalWaveSunk = 0x3b0; // UWwiseEvent*
		constexpr auto SkellyShipProgressFactorRtpc = 0x3b8; // FName
		constexpr auto SkellyShipSpawned = 0x3c0; // UWwiseEvent*
		constexpr auto FinalSkellyShipSpawned = 0x3c8; // UWwiseEvent*
		constexpr auto SkellyShipSunk = 0x3d0; // UWwiseEvent*
		constexpr auto SkellyShipMinProximity = 0x3d8; // float
		constexpr auto SkellyShipMaxProximity = 0x3dc; // float
		constexpr auto SkellyProximityRtpc = 0x3e0; // FName
		constexpr auto PlayerInPuzzleVaultPlay = 0x3e8; // UWwiseEvent*
		constexpr auto PlayerInPuzzleVaultStop = 0x3f0; // UWwiseEvent*
		constexpr auto PuzzleVaultCompleteMusic = 0x3f8; // UWwiseEvent*
		constexpr auto PuzzleVaultIncorrectMusic = 0x400; // UWwiseEvent*
		constexpr auto PuzzleVaultWaterFillRtpc = 0x408; // FName
		constexpr auto FishingMoodMusicPlay = 0x410; // UWwiseEvent*
		constexpr auto FishingMoodMusicStop = 0x418; // UWwiseEvent*
		constexpr auto FishingMoodMusicCaughtFish = 0x420; // UWwiseEvent*
		constexpr auto FishOnLineStateGroup = 0x428; // FName
		constexpr auto FishNotOnLine = 0x430; // FName
		constexpr auto FishOnLine = 0x438; // FName
		constexpr auto MaxDistanceOfSpyglassShipSting = 0x440; // float
		constexpr auto MinDistanceOfSpyglassShipSting = 0x444; // float
		constexpr auto SpottedStingCooldownTime = 0x448; // int32_t
		constexpr auto SpyglassAIShipSting = 0x450; // UWwiseEvent*
		constexpr auto SpyglassEmissaryShipSting = 0x458; // UWwiseEvent*
		constexpr auto SpyglassShipAngleTolerance = 0x460; // float
		constexpr auto SpyglassInitialAnimationTime = 0x464; // float
		constexpr auto ExtraDistanceToAddToShipRay = 0x468; // float
		constexpr auto TraceChannel = 0x46c; // ECollisionChannel
		constexpr auto SirenMusicUnderwaterStateGroup = 0x470; // FName
		constexpr auto SirenMusicUnderwaterStateValue = 0x478; // FName
		constexpr auto SirenMusicAboveWaterStateValue = 0x480; // FName
	}

	namespace n_UAbilityTask_WaitInputRelease { // : UAbilityTask
		constexpr auto OnRelease = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UStartAggressiveGhostShipEncounterStepDesc { // : UTaleQuestStepDesc
		constexpr auto AggressiveGhostShipEncounterParams = 0x80; // UAggressiveGhostShipsEncounterParams*
		constexpr auto BountyMapName = 0x88; // FName
		constexpr auto IslandToSpawnEncounter = 0x90; // FName
		constexpr auto EncounterIslandOverlapRadius = 0x98; // float
		constexpr auto ShipFleetNamesAsset = 0xa0; // UAggressiveGhostShipNamesDataAsset*
		constexpr auto IslandNamesAsset = 0xa8; // UAggressiveGhostShipNamesDataAsset*
		constexpr auto CustomEncounterRadiusInMetres = 0xb0; // float
		constexpr auto CustomEncounterLocation = 0xb8; // FQuestVariableVector
		constexpr auto EncounterIslandName = 0xc8; // FQuestVariableName
		constexpr auto LocalisedEncounterIslandName = 0xd8; // FQuestVariableText
		constexpr auto ShipFleetNames = 0xe8; // FQuestVariableBountyTargetArray
		constexpr auto AggressiveGhostShipsEncounterActor = 0xf8; // FQuestVariableActor
	}

	namespace n_UAnimNotifyTriggerPlaceableReaction { // : UAnimNotify
		constexpr auto PlaceableReactionToTrigger = 0x38; // FStringAssetReference
	}

	namespace n_AGameEvent { // : AActor
		constexpr auto Root = 0x3d8; // USceneComponent*
	}

	namespace n_UTaleQuestFireEventStepDesc { // : UTaleQuestEventStepDescBase
		constexpr auto Dispatcher = 0x80; // UObject*
		constexpr auto EventType = 0x88; // FNativeAndUserDefinedStructSelector
		constexpr auto ArgumentMappings = 0x90; // TMap<FName, FName>
	}

	namespace n_UCoherentUIGTAtlasComponent { // : UCoherentUIGTInstancedComponent
		constexpr auto CurrentCanvas = 0x388; // UCanvas*
	}

	namespace n_UAnimCompress_PerTrackCompression { // : UAnimCompress_RemoveLinearKeys
		constexpr auto MaxZeroingThreshold = 0x60; // float
		constexpr auto MaxPosDiffBitwise = 0x64; // float
		constexpr auto MaxAngleDiffBitwise = 0x68; // float
		constexpr auto MaxScaleDiffBitwise = 0x6c; // float
		constexpr auto AllowedRotationFormats = 0x70; // TArray<AnimationCompressionFormat>
		constexpr auto AllowedTranslationFormats = 0x80; // TArray<AnimationCompressionFormat>
		constexpr auto AllowedScaleFormats = 0x90; // TArray<AnimationCompressionFormat>
		constexpr auto bResampleAnimation = 0xa0; // char : 1
		constexpr auto ResampledFramerate = 0xa4; // float
		constexpr auto MinKeysForResampling = 0xa8; // int32_t
		constexpr auto bUseAdaptiveError = 0xac; // char : 1
		constexpr auto bUseOverrideForEndEffectors = 0xac; // char : 1
		constexpr auto TrackHeightBias = 0xb0; // int32_t
		constexpr auto ParentingDivisor = 0xb4; // float
		constexpr auto ParentingDivisorExponent = 0xb8; // float
		constexpr auto bUseAdaptiveError2 = 0xbc; // char : 1
		constexpr auto RotationErrorSourceRatio = 0xc0; // float
		constexpr auto TranslationErrorSourceRatio = 0xc4; // float
		constexpr auto ScaleErrorSourceRatio = 0xc8; // float
		constexpr auto MaxErrorPerTrackRatio = 0xcc; // float
		constexpr auto PerturbationProbeSize = 0xd0; // float
	}

	namespace n_UTaleQuestUpdateBuoyancyAutoSinkSettingForItemStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UGrantPagesStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UQuestBookPagesInContainerDataAsset { // : UDataAsset
		constexpr auto Transform = 0x30; // FTransform
		constexpr auto PagesMesh = 0x60; // UStaticMesh*
		constexpr auto ActionTooltipDisplayString = 0x68; // FText
		constexpr auto ActionTooltipDisplayStringSentence = 0xa0; // FText
	}

	namespace n_UEffectBlendObjectBase { // : UObject
		constexpr auto SubItemBlendRangeMin = 0x28; // float
		constexpr auto SubItemBlendRangeMax = 0x2c; // float
	}

	namespace n_UCalmWaterComponent { // : USceneComponent
		constexpr auto Radius = 0x2b0; // float
		constexpr auto RadiusPercentageToStartLerp = 0x2b4; // float
		constexpr auto DampeningFactor = 0x2b8; // float
	}

	namespace n_UCollectorsChestItemSlotInteractable { // : UInteractableComponent
		constexpr auto SlotId = 0x128; // int32_t
		constexpr auto ItemMeshComponent = 0x140; // UStaticMeshMemoryConstraintComponent*
		constexpr auto StoredItemInfo = 0x148; // FCollectorsChestStoredItemInfo
		constexpr auto PlaceItemSound = 0x1b0; // UWwiseEvent*
		constexpr auto PickupItemSound = 0x1b8; // UWwiseEvent*
		constexpr auto PlaceLerpTime = 0x1c0; // float
		constexpr auto LocalPredictionTimeout = 0x1c4; // float
	}

	namespace n_UMovieSceneColorTrack { // : UMovieScenePropertyTrack
		constexpr auto bIsSlateColor = 0xb0; // bool
	}

	namespace n_USharkPartsDesc { // : UMeshMemoryConstraintsAIPartsDesc
		constexpr auto SharkPartsTag = 0x80; // FString
		constexpr auto SharkPlayerStats = 0x90; // FSharkPlayerStats
		constexpr auto Materials = 0x98; // TArray<FSharkMaterialEntry>
	}

	namespace n_UTemporaryEntitlementsTaleQuestServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto Entitlements = 0x28; // TArray<UClass*>
		constexpr auto GrantTemporaryEntitlementOnStart = 0x38; // bool
	}

	namespace n_UWwiseEmitterComponent { // : USceneComponent
		constexpr auto Emitter = 0x2b8; // FWwiseEmitter
		constexpr auto WwiseObjectPoolWrapper = 0x2d8; // UWwiseObjectPoolWrapper*
	}

	namespace n_UParticleModuleLocationPrimitiveSphere_Seeded { // : UParticleModuleLocationPrimitiveSphere
		constexpr auto RandomSeedInfo = 0x218; // FParticleRandomSeedInfo
	}

	namespace n_ANonDisplaceableLargeStaticMeshWieldableItem { // : ALargeStaticMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UNPCDialogPredicateHasRank { // : UNPCDialogPredicate
		constexpr auto Rank = 0x38; // URankDesc*
	}

	namespace n_UPhasedActorComponent { // : UActorComponent
		constexpr auto ActorClass = 0xd0; // UClass*
		constexpr auto SpawnedMapActor = 0xf0; // AActor*
		constexpr auto ClusterRoot = 0xf8; // APhasedClusterRoot*
	}

	namespace n_UClothingLoadoutComponent { // : UActorComponent
		constexpr auto LoadoutContainer = 0xf8; // FClothingLoadoutContainer
		constexpr auto OwningPlayer = 0x110; // AActor*
		constexpr auto EmoteSettings = 0x118; // UEmoteSettings*
		constexpr auto CustomEmotes = 0x198; // TArray<FEmoteData>
		constexpr auto CustomCostumeEmotes = 0x1a8; // TArray<FEmoteData>
	}

	namespace n_UBTTask_SetBlackboardActor { // : UBTTask_BlackboardBase
		constexpr auto Actor = 0x88; // AActor*
	}

	namespace n_UBlendedPostProcessingRainZoneComponent { // : UBlendedPostProcessingZoneComponentBase
		constexpr auto FadeCurveNormalised = 0x820; // UCurveFloat*
		constexpr auto BlendDistance = 0x828; // float
	}

	namespace n_UTextureSwitchByItem { // : UTextureSwitch
		constexpr auto FallbackTexture = 0x220; // FStringAssetReference
		constexpr auto Entries = 0x230; // TArray<FTextureSwitchItemEntry>
	}

	namespace n_UBootyCategory_C { // : UBootyCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UApplicationLifecycleComponent { // : UActorComponent
		constexpr auto ApplicationWillDeactivateDelegate = 0xc8; // FScriptMulticastDelegate
		constexpr auto ApplicationHasReactivatedDelegate = 0xd8; // FScriptMulticastDelegate
		constexpr auto ApplicationWillEnterBackgroundDelegate = 0xe8; // FScriptMulticastDelegate
		constexpr auto ApplicationHasEnteredForegroundDelegate = 0xf8; // FScriptMulticastDelegate
		constexpr auto ApplicationWillTerminateDelegate = 0x108; // FScriptMulticastDelegate
	}

	namespace n_UStatusResponseTriggerDrunkenness { // : UStatusResponse
		constexpr auto TargetDrunkenness = 0x30; // float
		constexpr auto SourceOfDrunkenness = 0x34; // EDrunkennessType
	}

	namespace n_AKillZVolume { // : APhysicsVolume
		constexpr auto TerminalVelocity = 0x408; // float
		constexpr auto Priority = 0x40c; // int32_t
		constexpr auto FluidFriction = 0x410; // float
		constexpr auto bWaterVolume = 0x414; // char : 1
		constexpr auto bPhysicsOnContact = 0x414; // char : 1
	}

	namespace n_UBTTask_PlayMontage { // : UBTTaskNode
		constexpr auto MontageToPlay = 0x60; // UObject*
		constexpr auto PlayAsDynamicMontage = 0x68; // bool
	}

	namespace n_UShantyPuzzleComponent { // : USceneComponent
		constexpr auto RequiredShantyItemDesc = 0x2b8; // UShantyItemDesc*
		constexpr auto ShantyPuzzleInteractionZoneDefinitions = 0x2c0; // TArray<FShantyPuzzleInteractionZoneDefinition>
		constexpr auto TimeLimited = 0x2d0; // bool
		constexpr auto ShouldMoveEnsembleToActorPosition = 0x2d1; // bool
		constexpr auto ActiveTimeRange = 0x2d8; // FGameTimeRange
		constexpr auto ShantyPuzzleInteractionZones = 0x2e8; // TArray<UShantyPuzzleInteractionZoneComponent*>
		constexpr auto CurrentlyPlayingShantyPuzzleEnsemble = 0x2f8; // AEnsemble*
	}

	namespace n_UMaterialExpressionQualitySwitch { // : UMaterialExpression
		constexpr auto Default = 0x70; // FExpressionInput
		constexpr auto Inputs = 0xa8; // FExpressionInput [0x3]
	}

	namespace n_USceneCaptureComponent { // : USceneComponent
		constexpr auto HiddenComponents = 0x2b0; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
		constexpr auto bCaptureEveryFrame = 0x2c0; // bool
		constexpr auto MaxViewDistanceOverride = 0x2c4; // float
		constexpr auto ShowFlagSettings = 0x2c8; // TArray<FEngineShowFlagsSetting>
	}

	namespace n_UShipPartCustomizationComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UNextPageRadialAction { // : URadialAction
		constexpr auto InputID = 0x28; // UNotificationInputId*
	}

	namespace n_UParticleModuleLocationPrimitiveSphereGPU { // : UParticleModuleLocationPrimitiveBase
		constexpr auto StartRadius = 0xc8; // FRawDistributionFloat
		constexpr auto AdditionalStartRadius = 0x100; // FRawDistributionFloat [0x4]
		constexpr auto bUseGroupAStartRadiusForAllGroups = 0x1e0; // char : 1
		constexpr auto AdditionalVelocityScales = 0x1e8; // FRawDistributionFloat [0x4]
		constexpr auto bUseGroupAVelocityScaleForAllGroups = 0x2c8; // char : 1
		constexpr auto AdditionalStartLocations = 0x2d0; // FRawDistributionVector [0x4]
		constexpr auto bUseGroupAStartLocationForAllGroups = 0x3b0; // char : 1
	}

	namespace n_UVoteAudioComponent { // : UActorComponent
		constexpr auto VoteCastAudioEvent = 0xd0; // UWwiseEvent*
		constexpr auto VoteRemovedAudioEvent = 0xd8; // UWwiseEvent*
		constexpr auto AudioPool = 0xe0; // UWwiseObjectPoolWrapper*
	}

	namespace n_UParticleModuleColor { // : UParticleModuleColorBase
		constexpr auto bUseGroupAColorForAllGroups = 0x50; // char : 1
		constexpr auto StartColor = 0x58; // FRawDistributionVector
		constexpr auto AdditionalStartColor = 0x90; // FRawDistributionVector [0x5]
		constexpr auto bUseGroupAAlphaForAllGroups = 0x1a8; // char : 1
		constexpr auto StartAlpha = 0x1b0; // FRawDistributionFloat
		constexpr auto AdditionalStartAlpha = 0x1e8; // FRawDistributionFloat [0x5]
		constexpr auto bClampAlpha = 0x300; // char : 1
		constexpr auto bIgnoreComponentColorTint = 0x300; // char : 1
	}

	namespace n_UVotableVoyageProposalComponent { // : UVotableWithSessionComponent
		constexpr auto TooltipUIFadeDuration = 0x248; // float
		constexpr auto TooltipUIScreenSpaceOffsetRatio = 0x24c; // FVector2D
		constexpr auto ProposedEntry = 0x258; // FProposedVoyageEntry
		constexpr auto ProposedTale = 0x268; // FProposedTaleEntry
		constexpr auto VotableMeshComponent = 0x280; // UStaticMeshComponent*
	}

	namespace n_UTitleDesc { // : UClothingDesc
		constexpr auto WardrobeKey = 0xd8; // FName
	}

	namespace n_UBTService_DetermineAIAbility { // : UBTService
		constexpr auto BlockChangeAIAbilitiesKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UCompositionGraphCaptureSettings { // : UMovieSceneCaptureProtocolSettings
		constexpr auto IncludeRenderPasses = 0x28; // FCompositionGraphCapturePasses
		constexpr auto bCaptureFramesInHDR = 0x38; // bool
		constexpr auto HDRCompressionQuality = 0x3c; // int32_t
		constexpr auto CaptureGamut = 0x40; // EHDRCaptureGamut
		constexpr auto PostProcessingMaterial = 0x48; // FStringAssetReference
	}

	namespace n_UPointLightComponent { // : ULightComponent
		constexpr auto Radius = 0x438; // float
		constexpr auto AttenuationRadius = 0x43c; // float
		constexpr auto bUseInverseSquaredFalloff = 0x440; // char : 1
		constexpr auto LightFalloffExponent = 0x444; // float
		constexpr auto IntensityScaleForWater = 0x448; // float
		constexpr auto MinDistanceToLightAssumed = 0x44c; // float
		constexpr auto SourceRadius = 0x450; // float
		constexpr auto SourceLength = 0x454; // float
		constexpr auto SimpleFunctionType = 0x458; // ESimpleLightFunctionType
		constexpr auto ScaleOffset = 0x45c; // float
		constexpr auto PulsePhase = 0x460; // float
		constexpr auto FlickerFrequency = 0x464; // float
		constexpr auto FlickerPerlinRow = 0x468; // int32_t
		constexpr auto LightmassSettings = 0x46c; // FLightmassPointLightSettings
	}

	namespace n_UIslandFaunaSpawnComponent { // : UIslandItemSpawnComponent
		constexpr auto FaunaSettings = 0x4e0; // UIslandFaunaSettings*
		constexpr auto FaunaSpawners = 0x4e8; // TArray<UAIFaunaSpawner*>
	}

	namespace n_APoseableMeshWieldableItem { // : AWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UEmblemComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UAddGameEventExclusionZoneStepDesc { // : UTaleQuestStepDesc
		constexpr auto Radius = 0x80; // float
		constexpr auto Location = 0x88; // FQuestVariableVector
	}

	namespace n_AAthenaPlayerController { // : APlayerController
		constexpr auto PioneerComponent = 0x788; // UPioneerComponent*
		constexpr auto PlayerPermissionsComponent = 0x790; // UPlayerPermissionsComponent*
		constexpr auto PlayerTelemetryComponent = 0x798; // UPlayerTelemetryComponent*
		constexpr auto PlayerStatsComponent = 0x7a0; // UPlayerStatsComponent*
		constexpr auto PlayerSeasonProgressionComponent = 0x7a8; // UPlayerSeasonProgressionComponent*
		constexpr auto PlayerHeroStatsComponent = 0x7b0; // UPlayerHeroStatsComponent*
		constexpr auto PlayerWalletComponent = 0x7b8; // UPlayerWalletComponent*
		constexpr auto BoxedRpcDispatcherComponent = 0x7c0; // UBoxedRpcDispatcherComponent*
		constexpr auto PlayerEntitlementComponent = 0x7c8; // UPlayerEntitlementComponent*
		constexpr auto PlayerMigratableStatusComponent = 0x7d0; // UPlayerMigratableStatusComponent*
		constexpr auto EmblemComponent = 0x7d8; // UEmblemComponent*
		constexpr auto PlayerCompanyComponent = 0x7e0; // UPlayerCompanyComponent*
		constexpr auto LeaderboardComponent = 0x7e8; // ULeaderboardComponent*
		constexpr auto RewardComponent = 0x7f0; // URewardComponent*
		constexpr auto PlayerNonVerbalComponent = 0x7f8; // UPlayerNonVerbalComponent*
		constexpr auto PlayerCrewComponent = 0x800; // UPlayerCrewComponent*
		constexpr auto PlayerMuteComponent = 0x808; // UPlayerMuteComponent*
		constexpr auto PlayerUIReturnedResponceComponent = 0x810; // UUIResponceComponent*
		constexpr auto PopUpNotificationComponent = 0x818; // UPopUpNotificationComponent*
		constexpr auto EncounterListenerComponent = 0x820; // UEncounterListenerComponent*
		constexpr auto CharacterAnimaticSettingsComponent = 0x828; // UCharacterAnimaticSettingsComponent*
		constexpr auto TutorialComponent = 0x830; // UAthenaTutorialComponent*
		constexpr auto ContextualTutorialComponent = 0x838; // UContextualTutorialComponent*
		constexpr auto ShantySelectionComponent = 0x840; // UShantySelectionComponent*
		constexpr auto TutorialManagerComponent = 0x848; // UTutorialManager*
		constexpr auto EmissaryActionRewardBoostComponent = 0x850; // UEmissaryActionRewardBoostComponent*
		constexpr auto PlayerMysteriousNoteComponent = 0x858; // UPlayerMysteriousNoteComponent*
		constexpr auto EmissaryParticipantComponent = 0x860; // UEmissaryParticipantComponent*
		constexpr auto CommodityPurchaseTrackingComponent = 0x868; // UCommodityPurchaseTrackingComponent*
		constexpr auto PlayerActivityComponent = 0x870; // UPlayerActivityComponent*
		constexpr auto IslandEventTrackerComponent = 0x878; // UIslandEventTrackerComponent*
		constexpr auto CampaignComponent = 0x880; // UCampaignComponent*
		constexpr auto InputRawYawScale = 0x888; // float
		constexpr auto InputRawPitchScale = 0x88c; // float
		constexpr auto InventoryMemory = 0x890; // FInventoryMemory
		constexpr auto CinematicCameraController = 0x8e0; // ACinematicCameraController*
		constexpr auto ClientSessionId = 0x1320; // FGuid
		constexpr auto PromptsLocalService = 0x13a8; // UPromptsLocalService*
		constexpr auto AutoCentreCurve = 0x13b0; // UCurveFloat*
		constexpr auto CinematicCameraControllerLocation = 0x13d0; // FVector
		constexpr auto CinematicCameraControllerRotation = 0x13dc; // FRotator
		constexpr auto PirateIdentity = 0x13e8; // FPirateIdentity
		constexpr auto DeathFlameOfFateType = 0x1460; // EFlameOfFateType
		constexpr auto FlameOfFateType = 0x1461; // EFlameOfFateType
		constexpr auto IndividualReplicationChannel = 0x1468; // AIndividualReplicationChannel*
	}

	namespace n_AShipCustomizationChest { // : APossessionsChest
		constexpr auto ShipInteractionRadius = 0x518; // USphereComponent*
		constexpr auto MaxShipSpeedXY = 0x520; // float
		constexpr auto DisableShipCheckRestrictions = 0x560; // bool
		constexpr auto CrewMembersInteracting = 0x568; // TArray<FShipCustomizationChestCrewMember>
	}

	namespace n_ADummyReplicatedActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UMultiLineEditableTextBox { // : UWidget
		constexpr auto Text = 0x138; // FText
		constexpr auto WidgetStyle = 0x170; // FEditableTextBoxStyle
		constexpr auto TextStyle = 0x9d0; // FTextBlockStyle
		constexpr auto Style = 0xb30; // USlateWidgetStyleAsset*
		constexpr auto Justification = 0xb38; // ETextJustify
		constexpr auto bAutoWrapText = 0xb39; // bool
		constexpr auto WrapTextAt = 0xb3c; // float
		constexpr auto Font = 0xb40; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xb80; // FLinearColor
		constexpr auto BackgroundColor = 0xb90; // FLinearColor
		constexpr auto ReadOnlyForegroundColor = 0xba0; // FLinearColor
		constexpr auto OnTextChanged = 0xbb0; // FScriptMulticastDelegate
		constexpr auto OnTextCommitted = 0xbc0; // FScriptMulticastDelegate
	}

	namespace n_UActionStateRadialContext { // : URadialContextBase
		constexpr auto TargetActionStates = 0x28; // TArray<UActionStateId*>
		constexpr auto AreDockablePhrasesRequired = 0x38; // bool
	}

	namespace n_ACapstanMechanismTriggerProxy { // : AMechanismElementProxy
		constexpr auto Parameters = 0x3f0; // FCapstanParams
	}

	namespace n_UMultiLineEditableText { // : UWidget
		constexpr auto Text = 0x138; // FText
		constexpr auto WidgetStyle = 0x170; // FTextBlockStyle
		constexpr auto Justification = 0x2d0; // ETextJustify
		constexpr auto bAutoWrapText = 0x2d1; // bool
		constexpr auto WrapTextAt = 0x2d4; // float
		constexpr auto Font = 0x2d8; // FSlateFontInfo
		constexpr auto OnTextChanged = 0x318; // FScriptMulticastDelegate
		constexpr auto OnTextCommitted = 0x328; // FScriptMulticastDelegate
	}

	namespace n_UGeyserSetupDataAsset { // : UDataAsset
		constexpr auto DormantDuration = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto InitialWarningDuration = 0x58; // FWeightedProbabilityRangeOfRanges
		constexpr auto NumSpurtsPerActivation = 0x88; // FWeightedProbabilityRange
		constexpr auto TimeBetweenSpurts = 0xa8; // FWeightedProbabilityRangeOfRanges
		constexpr auto ShouldDestroyOnDeactivation = 0xd8; // bool
		constexpr auto DestroyAfterDeactivationDelay = 0xdc; // float
	}

	namespace n_UNPCDialogOrExpression { // : UNPCDialogBinaryExpression
		constexpr auto Left = 0x28; // UNPCDialogExpression*
		constexpr auto Right = 0x30; // UNPCDialogExpression*
	}

	namespace n_UWidgetReflectorNodeBase { // : UObject
		constexpr auto Geometry = 0x28; // FGeometry
		constexpr auto ChildNodes = 0x60; // TArray<UWidgetReflectorNodeBase*>
		constexpr auto Tint = 0x70; // FLinearColor
	}

	namespace n_UKrakenShipWrappingTentacleAIAudioComponentParams { // : UDataAsset
		constexpr auto PlayWrapping = 0x28; // UWwiseEvent*
		constexpr auto StopWrapping = 0x30; // UWwiseEvent*
		constexpr auto PlayWrappedLoop = 0x38; // UWwiseEvent*
		constexpr auto StopWrappedLoop = 0x40; // UWwiseEvent*
		constexpr auto PlayUnwrapping = 0x48; // UWwiseEvent*
		constexpr auto StopUnwrapping = 0x50; // UWwiseEvent*
	}

	namespace n_UTaleQuestParallelStepDesc { // : UTaleQuestStepDesc
		constexpr auto Descs = 0x80; // TArray<UTaleQuestStepDesc*>
	}

	namespace n_UBakedDecalComponent { // : UActorComponent
		constexpr auto TargetTextureSize = 0xc8; // int32_t
		constexpr auto ClearColour = 0xcc; // FLinearColor
		constexpr auto MaxDeferredDecals = 0xdc; // int32_t
		constexpr auto TargetTexture = 0xe0; // UTextureRenderTarget2D*
		constexpr auto StaticMeshes = 0xe8; // TArray<UStaticMeshComponent*>
		constexpr auto DeferredDecals = 0xf8; // TArray<FDeferredBakedDecal>
	}

	namespace n_UMechanismAnimationCurve_Float { // : UMechanismAnimation
		constexpr auto Curve = 0x58; // FRuntimeFloatCurve
	}

	namespace n_UGameplayAbilitySet { // : UDataAsset
		constexpr auto Abilities = 0x28; // TArray<FGameplayAbilityBindInfo>
	}

	namespace n_UMockAthenaPlayerCharacterMovementComponent { // : UAthenaPlayerCharacterMovementComponent
		constexpr auto LandingSpeedToFallDamageCurve = 0x800; // UCurveFloat*
		constexpr auto MinFallSpeedToPossiblyCauseDamage = 0x808; // float
		constexpr auto MinTimeBetweenDamagingImpactsOnUnwalkableSurface = 0x80c; // float
		constexpr auto MinFallDamageToBreakLeg = 0x810; // float
		constexpr auto FiredFromActorFallDamageScalar = 0x814; // float
		constexpr auto TimeUntilRecoverFallDamageAudioState = 0x818; // float
		constexpr auto FallDamageLimpingStatus = 0x820; // FStatus
		constexpr auto SwimmingStateFilterTime = 0x838; // float
		constexpr auto MaxSpeedToleranceForPreventingJumping = 0x83c; // float
	}

	namespace n_UClueSiteTypeToMapMarkIdDataAsset { // : UDataAsset
		constexpr auto ClueSiteTypeToMarkIdMap = 0x28; // TArray<FClueSiteTypeToMarkId>
	}

	namespace n_ULadderInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UDeliverableRedirectionCompanyContext { // : UDeliverableRedirectionContextBase
		constexpr auto Companies = 0x28; // TArray<UCompany*>
	}

	namespace n_UFishingMiniGameFishDataAsset { // : UDataAsset
		constexpr auto ChanceOfEscapePositionBeingLeft = 0x28; // float
		constexpr auto ChanceOfEscapePositionBeingAway = 0x2c; // float
		constexpr auto ChanceOfEscapePositionBeingRight = 0x30; // float
		constexpr auto HowLongBeforeUnfoughtFishEscapes = 0x38; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeToTire = 0x68; // FWeightedProbabilityRangeOfRanges
		constexpr auto SwitchesBeforeRecovery = 0x98; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeSpentRecovering = 0xc8; // FWeightedProbabilityRangeOfRanges
		constexpr auto SpeedMovingBackToCentreWhenRecovering = 0xf8; // float
		constexpr auto SpeedMovingBackToCentreWhenRecoveringWhenReeling = 0xfc; // float
		constexpr auto NumFakeOuts = 0x100; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_USeaFortsWorldDataAsset { // : UDataAsset
		constexpr auto SeaForts = 0x28; // TArray<ASeaFort*>
		constexpr auto MaxActiveForts = 0x38; // int32_t
		constexpr auto ActivationMinDistanceFromPlayer = 0x3c; // float
		constexpr auto RandomActivationTimeMin = 0x40; // float
		constexpr auto RandomActivationTimeMax = 0x44; // float
		constexpr auto CrewVacantGracePeriod = 0x48; // float
	}

	namespace n_UMovieSceneActorReferenceTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UStorageContainerSpecialTypeSelectorEntries { // : UDataAsset
		constexpr auto PercentageChanceOfSpawning = 0x28; // float
		constexpr auto NumSpawners = 0x30; // UStorageContainerSpawnerCount*
		constexpr auto Entries = 0x38; // TArray<FTypedStorageContainerContentTypeSelectorEntry>
		constexpr auto FeatureToggle = 0x48; // FName
	}

	namespace n_AGenericPart { // : AActor
		constexpr auto CustomizationComponent = 0x3d0; // UReplicatedShipPartCustomizationComponent*
	}

	namespace n_USalvageItemSpawnComponentMock { // : USalvageItemSpawnComponent
		constexpr auto IslandSalvageLocationData = 0x4e0; // TArray<FIslandItemSpawnLocationData>
		constexpr auto GlobalIslandChanceToSpawn = 0x4f0; // float
		constexpr auto MinimumZOffSet = 0x4f4; // float
		constexpr auto MaximumZOffset = 0x4f8; // float
		constexpr auto MinimumRoll = 0x4fc; // float
		constexpr auto MaximumRoll = 0x500; // float
		constexpr auto MinimumPitch = 0x504; // float
		constexpr auto MaximumPitch = 0x508; // float
		constexpr auto SunkenItem = 0x50c; // bool
		constexpr auto SpawnLocationType = 0x510; // UIslandItemDataAsset*
		constexpr auto SpawnedContainerContents = 0x518; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_USwimmingCreatureAnimationInstance { // : UAnimInstance
		constexpr auto Speed = 0x458; // float
		constexpr auto PlayRate = 0x45c; // float
		constexpr auto Direction = 0x460; // float
		constexpr auto DeathMontage = 0x468; // UAnimMontage*
		constexpr auto SinkingMontage = 0x470; // UAnimMontage*
		constexpr auto DefaultImpactAnim = 0x478; // UAnimSequenceBase*
		constexpr auto ImpactAnims = 0x480; // TArray<FSwimmingCreatureImpactAnimData>
		constexpr auto MaxAccelerationForSpeed = 0x490; // float
		constexpr auto MaxPitchForSpeed = 0x494; // float
		constexpr auto MaxYawForDirection = 0x498; // float
		constexpr auto SpeedSmoothingFactor = 0x49c; // float
		constexpr auto DirectionSmoothingFactor = 0x4a0; // float
		constexpr auto AccelerationSmoothingFactor = 0x4a4; // float
		constexpr auto YawSmoothingFactor = 0x4a8; // float
		constexpr auto NetworkAnimationBlendTime = 0x4ac; // float
		constexpr auto RPCPlayableMontages = 0x4b0; // TArray<UObject*>
		constexpr auto NetworkPlayableAnimations = 0x4c0; // TArray<UAnimSequenceBase*>
		constexpr auto StrategySpeedOverrides = 0x4d0; // TArray<FAIStrategySpeedOverride>
		constexpr auto HitReactBlockingAIStrategies = 0x4e0; // TArray<UAIStrategyId*>
		constexpr auto CurrentlyPlayingNetworkMontage = 0x4f0; // UAnimMontage*
		constexpr auto MovementComponent = 0x598; // USwimmingCreatureMovementComponent*
		constexpr auto NetworkSyncedAnimationComponent = 0x5b8; // UNetworkSyncedAnimationComponent*
	}

	namespace n_ATriggerBase { // : AActor
		constexpr auto CollisionComponent = 0x3d0; // UShapeComponent*
		constexpr auto SpriteComponent = 0x3d8; // UBillboardComponent*
	}

	namespace n_ULeakerComponent { // : USceneComponent
		constexpr auto ParticleSystem_WaterLeakAboveWater = 0x2b8; // UParticleSystem*
		constexpr auto ParticleSystem_WaterLeakBelowWater = 0x2c0; // UParticleSystem*
		constexpr auto ParticleSystem_RepairLeakAboveWater = 0x2c8; // UParticleSystem*
		constexpr auto ParticleSystem_RepairLeakBelowWater = 0x2d0; // UParticleSystem*
		constexpr auto WaterLeakSfx_Play = 0x2d8; // UWwiseEvent*
		constexpr auto WaterLeakSfx_Stop = 0x2e0; // UWwiseEvent*
		constexpr auto WaterLeakRepairSfx_Play = 0x2e8; // UWwiseEvent*
		constexpr auto WaterLeakRepairSfx_Stop = 0x2f0; // UWwiseEvent*
		constexpr auto WaterLeakUnderwaterSwitchGroup = 0x2f8; // FName
		constexpr auto WaterLeakUnderwaterSwitchDefaultAboveWater = 0x300; // FName
		constexpr auto WaterLeakUnderwaterSwitchUnderwater = 0x308; // FName
		constexpr auto WaterLeakFadeTime = 0x310; // float
		constexpr auto WaterLeakEmitterName = 0x314; // FName
		constexpr auto WaterLeakWisePool = 0x320; // UWwiseObjectPoolWrapper*
		constexpr auto Leaks = 0x328; // TArray<FLeak>
	}

	namespace n_UBeckonGestureDataAsset { // : UDataAsset
		constexpr auto BeckonAnimation = 0x28; // UAnimSequence*
		constexpr auto BeckonAudio = 0x30; // UWwiseEvent*
	}

	namespace n_UDistantIdleAIAbility { // : UAthenaAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_UVulnerabilityLayerStateManagerComponent { // : UActorComponent
		constexpr auto ManagedVulnerabilityLayers = 0xf8; // TArray<FManagedVulnerabilityLayer>
	}

	namespace n_UChildConnection { // : UNetConnection
		constexpr auto Parent = 0x34588; // UNetConnection*
	}

	namespace n_UParticleModuleTrailSource { // : UParticleModuleTrailBase
		constexpr auto SourceMethod = 0x50; // ETrail2SourceMethod
		constexpr auto SourceName = 0x54; // FName
		constexpr auto SourceStrength = 0x60; // FRawDistributionFloat
		constexpr auto bLockSourceStength = 0x98; // char : 1
		constexpr auto SourceOffsetCount = 0x9c; // int32_t
		constexpr auto SourceOffsetDefaults = 0xa0; // TArray<FVector>
		constexpr auto SelectionMethod = 0xb0; // EParticleSourceSelectionMethod
		constexpr auto bInheritRotation = 0xb4; // char : 1
	}

	namespace n_UCapturedByKrakenInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UReviveSettings { // : UDeveloperSettings
		constexpr auto HealthRegained = 0x38; // float
		constexpr auto MaximumReviveDistance = 0x3c; // float
		constexpr auto FadeColour = 0x40; // FLinearColor
		constexpr auto ShouldFadeAudio = 0x50; // bool
		constexpr auto ServerWaitTimeBeforeFullyReviving = 0x54; // float
		constexpr auto ReviveTime = 0x58; // float
		constexpr auto MaxRevertEvaporateDuration = 0x5c; // float
		constexpr auto UnsupportedPlayModes = 0x60; // TArray<EPlayMode>
		constexpr auto ModeSpecificSettings = 0x70; // TArray<FModeSpecificReviveSettings>
		constexpr auto GiveUpHoldTime = 0x80; // float
		constexpr auto GiveUpFadeDuration = 0x84; // float
		constexpr auto GiveUpEvaporateDuration = 0x88; // float
	}

	namespace n_UAggressiveGhostShipDifficultyDataAsset { // : UDataAsset
		constexpr auto NumShotsToDestroyShip = 0x28; // FWeightedProbabilityRange
		constexpr auto PersistentDamageScale = 0x48; // float
		constexpr auto HealthToVFxLevel = 0x50; // TArray<FAggressiveGhostHealthToVfxLevel>
		constexpr auto Speed = 0x60; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeBetweenShots = 0x90; // FWeightedProbabilityRangeOfRanges
		constexpr auto WraithballCooldownTime = 0xc0; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeBetweenCheckingIfAShipIsBehindYou = 0xf0; // FWeightedProbabilityRangeOfRanges
		constexpr auto MaxDistanceBehindShipToBeMineTargetInMetres = 0x120; // float
		constexpr auto MaxMineTargetAngle = 0x124; // float
		constexpr auto ChanceOfDroppingMines = 0x128; // float
		constexpr auto NumMinesToDrop = 0x130; // FWeightedProbabilityRange
		constexpr auto MinTimeBetweenDroppingMoreMines = 0x150; // FWeightedProbabilityRangeOfRanges
		constexpr auto CanAnchorDrop = 0x180; // bool
		constexpr auto TimeBetweenAnchorDrops = 0x188; // FWeightedProbabilityRangeOfRanges
		constexpr auto AnchorDropWarningTime = 0x1b8; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeBetweenPortalJumpChecks = 0x1e8; // float
		constexpr auto MinDistanceFromAnyShipsToConsiderAPortalJumpInMetres = 0x1ec; // float
		constexpr auto TimeToBeAwayFromAnyShipsToConsiderPortalJumping = 0x1f0; // float
		constexpr auto ChanceOfPortalJumping = 0x1f4; // float
		constexpr auto PortalJumpDuration = 0x1f8; // FWeightedProbabilityRangeOfRanges
		constexpr auto PortalJumpCooldown = 0x228; // float
	}

	namespace n_UAmbientLightSourceComponent { // : ULightComponent
		constexpr auto Radius = 0x438; // float
		constexpr auto AmbientIntensity = 0x43c; // float
		constexpr auto Tint = 0x440; // FLinearColor
		constexpr auto QuadraticFalloff = 0x450; // char : 1
		constexpr auto Shape = 0x454; // EAmbientLightConeShape
		constexpr auto SimpleFunctionType = 0x455; // ESimpleLightFunctionType
		constexpr auto ScaleOffset = 0x458; // float
		constexpr auto PulsePhase = 0x45c; // float
		constexpr auto FlickerFrequency = 0x460; // float
		constexpr auto FlickerPerlinRow = 0x464; // int32_t
		constexpr auto bShadowed = 0x468; // bool
		constexpr auto GroupingPolicy = 0x469; // EAmbientLightClusteringPolicy
	}

	namespace n_UIslandItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto RespawnTime = 0x428; // float
		constexpr auto IslandData = 0x430; // AIslandData*
	}

	namespace n_UNPCDialogConditionalText { // : UObject
		constexpr auto Text = 0x28; // FText
		constexpr auto Expression = 0x60; // UNPCDialogExpression*
	}

	namespace n_UPerformancePetSpawnDefinitionsDataAsset { // : UDataAsset
		constexpr auto PetSpawnDefinitions = 0x28; // TArray<FPetSpawnDefinition>
		constexpr auto SpawnQuery = 0x38; // UEnvQuery*
		constexpr auto ShipSpawnQuery = 0x40; // UEnvQuery*
		constexpr auto PetCount = 0x48; // int32_t
		constexpr auto SpawnPetsOnStart = 0x4c; // bool
	}

	namespace n_UBuriedItemStepFromActorDesc { // : UBuriedItemStepDesc
		constexpr auto PlaceableActor = 0x128; // FQuestVariableActor
	}

	namespace n_UDebugStoryStateSourceAsset { // : UDataAsset
		constexpr auto DebugStories = 0x28; // TArray<FDebugStoryInfoModelSchedule>
	}

	namespace n_AGrenade { // : ACannonBall
		constexpr auto GrenadeSetupDataAsset = 0x7a8; // UGrenadeSetupDataAsset*
		constexpr auto RotationRatePitch = 0x7b0; // FWeightedProbabilityRangeOfRanges
		constexpr auto RotationRateRoll = 0x7e0; // FWeightedProbabilityRangeOfRanges
		constexpr auto RotationRateYaw = 0x810; // FWeightedProbabilityRangeOfRanges
		constexpr auto ThrownProjectileType = 0x840; // AActor*
	}

	namespace n_AClothingChestInteraction { // : APossessionsChestInteraction
		constexpr auto Categories = 0x448; // TArray<FFeaturedClothingCategory>
		constexpr auto AllTab = 0x458; // bool
		constexpr auto OriginalLoadout = 0x668; // FClothingLoadout
		constexpr auto Loadout = 0x678; // FClothingLoadout
	}

	namespace n_UPageNamedNextPageRadialAction { // : UNextPageRadialAction
		constexpr auto InputID = 0x28; // UNotificationInputId*
	}

	namespace n_UScratchAIAbilityParams { // : UMeleeAIAbilityParams
		constexpr auto MeleeAttacks = 0xc8; // TArray<FMeleeAttackIdWeights>
	}

	namespace n_UCommoditySourceComponent { // : UActorComponent
		constexpr auto NPCIdentifier = 0xd0; // FName
	}

	namespace n_UAISense_Hearing { // : UAISense
		constexpr auto MaxNoisesPerTick = 0x88; // int32_t
		constexpr auto MaxNoisesStored = 0x8c; // int32_t
		constexpr auto NoiseEventsArrayA = 0x98; // TArray<FAINoiseEvent>
		constexpr auto NoiseEventsArrayB = 0xa8; // TArray<FAINoiseEvent>
		constexpr auto SpeedOfSoundSq = 0xc8; // float
	}

	namespace n_UEmissaryFlotsamTooltipCustomizerComponent { // : UActorComponent
		constexpr auto CheckForDelivery = 0xd8; // bool
		constexpr auto CheckForPickup = 0xd9; // bool
	}

	namespace n_UCategoryBase { // : UObject
		constexpr auto Name = 0x28; // FText
		constexpr auto UniqueTextIdentifier = 0x60; // FName
		constexpr auto IconPath = 0x68; // FStringAssetReference
	}

	namespace n_UMaterialExpressionFontSampleParameter { // : UMaterialExpressionFontSample
		constexpr auto ParameterName = 0x80; // FName
		constexpr auto ExpressionGUID = 0x88; // FGuid
		constexpr auto Group = 0x98; // FName
	}

	namespace n_UMeshMemoryConstraintScoringPlayerView { // : UMeshMemoryConstraintScoringObject
		constexpr auto ScoringName = 0x28; // FName
		constexpr auto ScoringFactor = 0x30; // float
	}

	namespace n_UCompassItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UConsumableItemCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_ASirenController { // : AAthenaSwimmingAIController
		constexpr auto SwimmingPathFollowingComponent = 0x8f8; // USwimmingPathFollowingComponent*
		constexpr auto IgnoreTargetsOutOfWater = 0x900; // bool
		constexpr auto DistOfAttackerVsChanceToPursue = 0x908; // UCurveFloat*
		constexpr auto TimersToZeroIfStartingRevengeAttack = 0x910; // TArray<FName>
		constexpr auto DespawnRequiredBlackboardKey = 0x920; // FName
		constexpr auto DespawnRequiredReasonBlackboardKey = 0x928; // FName
		constexpr auto PathingFailedWeight = 0x930; // float
		constexpr auto PathingFailedThresholdToDespawn = 0x934; // float
	}

	namespace n_ARegionAssetCacheActor { // : AActor
		constexpr auto RegionData = 0x3d0; // TArray<FRegionAssetsList>
		constexpr auto LoadedAssets = 0x3e0; // TArray<UObject*>
	}

	namespace n_ULevelScriptBlueprint { // : UBlueprint
		constexpr auto bRecompileOnLoad = 0x50; // char : 1
		constexpr auto ParentClass = 0x58; // UObject*
		constexpr auto PRIVATE_InnermostPreviousCDO = 0x60; // UObject*
		constexpr auto bHasBeenRegenerated = 0x68; // char : 1
		constexpr auto bIsRegeneratingOnLoad = 0x68; // char : 1
		constexpr auto SimpleConstructionScript = 0x70; // USimpleConstructionScript*
		constexpr auto ComponentTemplates = 0x78; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x88; // TArray<UTimelineTemplate*>
		constexpr auto InheritableComponentHandler = 0x98; // UInheritableComponentHandler*
		constexpr auto BlueprintType = 0xa0; // EBlueprintType
		constexpr auto BlueprintSystemVersion = 0xa4; // int32_t
	}

	namespace n_AIndividualReplicationChannel { // : AActor
		constexpr auto ReplicationChannelComponents = 0x3d0; // TMap<UObject*, UObject*>
	}

	namespace n_UClimbingComponent { // : UIntentComponent
		constexpr auto UseLadderOffset = 0x188; // FVector
		constexpr auto ServerHeight = 0x194; // float
		constexpr auto ServerClimbId = 0x198; // char
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigratableDefaultComponentActor { // : AActor
		constexpr auto ComponentWithMigrationMarkup = 0x3d0; // UServerMigrationSerialisationDetailsTestsMigratableComponent*
	}

	namespace n_UIsWieldingItemRadialContext { // : URadialContextBase
		constexpr auto TargetsAllWieldables = 0x28; // bool
		constexpr auto TargetItems = 0x30; // TArray<AWieldableItem*>
	}

	namespace n_UDiggingEffectsDataAsset { // : UDataAsset
		constexpr auto EffectsOverrides = 0x28; // TArray<FItemDiggingEffectsOverride>
		constexpr auto Default = 0x38; // UItemDiggingEffectsConfig*
	}

	namespace n_UClusterSpawnData { // : UItemSpawnData
		constexpr auto ClusterDescClass = 0x58; // UClass*
	}

	namespace n_UAISpawnerList { // : UDataAsset
		constexpr auto Spawners = 0x28; // TArray<UAISpawner*>
	}

	namespace n_UInterpTrackInstMove { // : UInterpTrackInst
		constexpr auto ResetLocation = 0x28; // FVector
		constexpr auto ResetRotation = 0x34; // FRotator
	}

	namespace n_UEmergentContestVoyageRecipeDataAsset { // : UVoyageRecipeDataAsset
		constexpr auto ContestVoyageRecipe = 0x170; // FEmergentContestVoyageRecipe
	}

	namespace n_UMeleeAttackLockOnComponent { // : UActorComponent
		constexpr auto ComponentSettings = 0xc8; // UMeleeAttackLockOnComponentSettings*
		constexpr auto LockOnCameraModifier = 0x238; // ULockOnCameraModifier*
		constexpr auto TargetCharacter = 0x240; // TWeakObjectPtr<AAthenaCharacter>
		constexpr auto PotentialTargets = 0x248; // TArray<TWeakObjectPtr<AAthenaCharacter>>
	}

	namespace n_UPhasedActorSourceComponent { // : UActorComponent
		constexpr auto PhasingSourceActor = 0xc8; // AActor*
	}

	namespace n_UIslandMaterialStatusZone { // : UObject
		constexpr auto StatusMappings = 0x38; // TArray<FIslandMaterialZoneStatusMapping>
		constexpr auto ActiveMaterialIntensities = 0x48; // TMap<UPhysicalMaterial*, float>
	}

	namespace n_ATriggerObject { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UNPCDialogOptionSellBooty { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
	}

	namespace n_UStorageContainerContentTypeSelector { // : UDataAsset
		constexpr auto NumSpawners = 0x28; // FWeightedProbabilityRange
		constexpr auto MinDifferentSpawners = 0x48; // int32_t
		constexpr auto MaxDifferentSpawners = 0x4c; // int32_t
		constexpr auto NumSpawnerRef = 0x50; // UStorageContainerSpawnerCount*
		constexpr auto ContentSpawners = 0x58; // TArray<FStorageContainerContentTypeSelectorEntry>
		constexpr auto DebugSpawner = 0x68; // UStorageContainerContentSpawner*
		constexpr auto SelectorEntries = 0x70; // UStorageContainerContentTypeSelectorEntries*
		constexpr auto SpecialEntries = 0x78; // TArray<UStorageContainerSpecialTypeSelectorEntries*>
		constexpr auto SpawnerTypeMappings = 0x88; // FSpawnerTypeMappings
	}

	namespace n_UDistributionFloatUniformCurve { // : UDistributionFloat
		constexpr auto ConstantCurve = 0x38; // FInterpCurveVector2D
	}

	namespace n_AChainLightningProjectile { // : ADamageableCannonProjectile
		constexpr auto TriggerChainLightningHealthChangeReasons = 0x670; // TArray<EHealthChangedReason>
		constexpr auto ChainLightningSource = 0x680; // UChainLightningSourceComponent*
		constexpr auto PostFireProjectileScale = 0x688; // FVector
		constexpr auto PostFireScaleSpeed = 0x694; // float
	}

	namespace n_UParticleModuleVelocityCone { // : UParticleModuleVelocityBase
		constexpr auto Angle = 0x58; // FRawDistributionFloat
		constexpr auto Velocity = 0x90; // FRawDistributionFloat
		constexpr auto Direction = 0xc8; // FVector
		constexpr auto bUseGroupAForAll = 0xd4; // char : 1
		constexpr auto AdditionalParams = 0xd8; // FVelocityConeGroupParams [0x5]
		constexpr auto VelocityDistributeOverNPoints = 0x358; // uint32_t
		constexpr auto VelocityNPointsRandomness = 0x35c; // float
		constexpr auto AdditiveVelocity = 0x360; // FVector
		constexpr auto ConeDepthScale = 0x36c; // float
		constexpr auto WorldSpaceOffset = 0x370; // char : 1
		constexpr auto EmitterOriginOffset = 0x374; // FVector
		constexpr auto PushAwayFromCenterFactor = 0x380; // float
	}

	namespace n_UTaleQuestStepDesc { // : UObject
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UBTService_SetAIAnimationState { // : UBTService_BlackboardBase
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_AMatineeUtility { // : AActor
		constexpr auto BoundCharacter = 0x4a8; // AAthenaPlayerCharacter*
	}

	namespace n_UBlueprint { // : UBlueprintCore
		constexpr auto bRecompileOnLoad = 0x50; // char : 1
		constexpr auto ParentClass = 0x58; // UObject*
		constexpr auto PRIVATE_InnermostPreviousCDO = 0x60; // UObject*
		constexpr auto bHasBeenRegenerated = 0x68; // char : 1
		constexpr auto bIsRegeneratingOnLoad = 0x68; // char : 1
		constexpr auto SimpleConstructionScript = 0x70; // USimpleConstructionScript*
		constexpr auto ComponentTemplates = 0x78; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x88; // TArray<UTimelineTemplate*>
		constexpr auto InheritableComponentHandler = 0x98; // UInheritableComponentHandler*
		constexpr auto BlueprintType = 0xa0; // EBlueprintType
		constexpr auto BlueprintSystemVersion = 0xa4; // int32_t
	}

	namespace n_UCargoRunQuestData { // : UDataAsset
		constexpr auto Crates = 0x28; // TArray<UItemDesc*>
		constexpr auto DefaultCargoRunCrateData = 0x38; // UCargoRunCrateData*
		constexpr auto DefaultCargoRunMapData = 0x40; // UCargoRunMapData*
		constexpr auto CargoItemsDeliveryNotePluralisation = 0x48; // TArray<FText>
	}

	namespace n_ULightIntensityBlend { // : UEffectBlendObjectBase
		constexpr auto Component = 0x38; // FActorComponentSelector
		constexpr auto Inactive = 0x48; // float
		constexpr auto Active = 0x4c; // float
	}

	namespace n_UItemSnapshotSettings { // : UDeveloperSettings
		constexpr auto Generators = 0x38; // TArray<UItemSnapshotMetaGenerator*>
	}

	namespace n_UControlChannel { // : UChannel
		constexpr auto Connection = 0x28; // UNetConnection*
	}

	namespace n_UApplicationSettings { // : UObject
		constexpr auto GameLanguage = 0x28; // int32_t
	}

	namespace n_UControllableMock { // : UObject
		constexpr auto ActorThatRequestedStateChange = 0x38; // AActor*
		constexpr auto ObjectDisplayName = 0x40; // FText
		constexpr auto ControlObjectActionRuleParams = 0x78; // FControlObjectActionRuleParams
		constexpr auto Role = 0x88; // ENetRole
		constexpr auto HasAController = 0x89; // bool
		constexpr auto CanBeControlledByActorValue = 0x8a; // bool
	}

	namespace n_UNPCDialogConditionalExpression { // : UNPCDialogConditional
		constexpr auto Expression = 0x30; // UNPCDialogExpression*
	}

	namespace n_UAddMarkToTornMapStepDescBase { // : UTaleQuestStepDesc
		constexpr auto MapId = 0x80; // FQuestVariableGuid
		constexpr auto MapMark = 0x90; // FTaleQuestVariableMapMarkType
	}

	namespace n_UShipDamagerComponent { // : UActorComponent
		constexpr auto Shape = 0xd0; // UPrimitiveComponent*
		constexpr auto ShipHulls = 0xd8; // TArray<TScriptInterface<Class>>
		constexpr auto WatercraftHealthInterfaces = 0xe8; // TArray<TScriptInterface<Class>>
		constexpr auto ShipStrainDamage = 0xf8; // FStrainDamage
		constexpr auto TimeBetweenWatercraftDamage = 0x120; // FWeightedProbabilityRangeOfRanges
		constexpr auto WatercraftDamage = 0x150; // float
		constexpr auto StartDamagingOnBeginPlay = 0x154; // bool
	}

	namespace n_UTaleQuestGenerateClueSiteOnIslandStepDesc { // : UTaleQuestStepDesc
		constexpr auto IslandName = 0x80; // FQuestVariableName
		constexpr auto ClueSite = 0x90; // FQuestVariableClueSite
		constexpr auto ClueGenerationConfiguration = 0xa0; // UClueFactoryConfig*
	}

	namespace n_UAshenWindsFlamethrowerController { // : UObject
		constexpr auto FlamethrowerCollisionParams = 0x30; // FFlamethrowerCollisionsParams
		constexpr auto FlamethrowerFirePropagationIgnitionParams = 0x98; // UFireGridCellSelectionParamsDataAsset*
		constexpr auto FlamethrowerCollisionStatusEffect = 0xa0; // FStatus
		constexpr auto TimeUntilApplyStatusEffect = 0xb8; // float
		constexpr auto TimeUntilIgniteFirePropagation = 0xbc; // float
		constexpr auto TimeToConsiderActorOutsideFlame = 0xc0; // float
		constexpr auto FlamethrowerCollisionDamageAmount = 0xc4; // float
		constexpr auto DamagePerSecondInsideFlame = 0xc8; // float
		constexpr auto AshenWindsSkull = 0xd0; // AAshenWindsSkull*
		constexpr auto ActorsInsideFlame = 0xd8; // TMap<AActor*, FActorInsideFlameInformation>
	}

	namespace n_AAnimatedMechanismActionProxy { // : AMechanismElementProxy
		constexpr auto Delay = 0x3f0; // float
		constexpr auto MaterialGroup = 0x3f8; // UMechanismMaterialGroup*
	}

	namespace n_AStatusEffectOverlapZone { // : AActor
		constexpr auto CollisionMesh = 0x478; // UBoxComponent*
		constexpr auto StatusesToApplyOnOverlap = 0x480; // TArray<FDelayedStatusEffect>
		constexpr auto StartActive = 0x490; // bool
	}

	namespace n_UBlockVolcanoTaleQuestService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UBlockVolcanoTaleQuestServiceDesc*
	}

	namespace n_UCommoditySourceMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_USnapshotWidgetReflectorNode { // : UWidgetReflectorNodeBase
		constexpr auto CachedWidgetType = 0x80; // FText
		constexpr auto CachedWidgetVisibilityText = 0xb8; // FText
		constexpr auto CachedWidgetReadableLocation = 0xf0; // FText
		constexpr auto CachedWidgetFile = 0x128; // FString
		constexpr auto CachedWidgetLineNumber = 0x138; // int32_t
		constexpr auto CachedWidgetAssetName = 0x13c; // FName
		constexpr auto CachedWidgetDesiredSize = 0x144; // FVector2D
		constexpr auto CachedWidgetForegroundColor = 0x150; // FSlateColor
		constexpr auto CachedWidgetAddress = 0x180; // FString
		constexpr auto CachedWidgetEnabled = 0x190; // bool
	}

	namespace n_UMaterialExpressionPredicatedTextureSample { // : UMaterialExpressionTextureSample
		constexpr auto Predicate = 0x1a8; // FExpressionInput
		constexpr auto DefaultColour = 0x1e0; // FColor
	}

	namespace n_UBTTask_IgnoreActorTemporarily { // : UBTTask_BlackboardBase
		constexpr auto TimeToForget = 0x88; // float
	}

	namespace n_UItemDiggingBuryConfig { // : UObject
		constexpr auto MaxSmallCrewSizeForNumDigsSelection = 0x28; // int32_t
		constexpr auto NumDigsRequiredForSmallCrewSize = 0x30; // FWeightedProbabilityRange
		constexpr auto NumDigsRequiredForBiggerCrewSize = 0x50; // FWeightedProbabilityRange
		constexpr auto DefaultNumDigsIfNotInCrew = 0x70; // int32_t
	}

	namespace n_UStatusResponseCameraShake { // : UStatusResponse
		constexpr auto CameraShake = 0x30; // UCameraShake*
		constexpr auto InnerRadius = 0x38; // float
		constexpr auto OuterRadius = 0x3c; // float
		constexpr auto Falloff = 0x40; // float
		constexpr auto OrientShakeTowardsEpicenter = 0x44; // bool
		constexpr auto ShouldBlendOut = 0x45; // bool
	}

	namespace n_UDeliverableRedirectionNPCContextHandler { // : UDeliverableRedirectionContextHandlerBase
		constexpr auto SpecificNPCId = 0x30; // FGuid
	}

	namespace n_UMaterialExpressionDistanceFieldGradient { // : UMaterialExpression
		constexpr auto Position = 0x70; // FExpressionInput
	}

	namespace n_UParticleModuleEventReceiverKillParticles { // : UParticleModuleEventReceiverBase
		constexpr auto bStopSpawning = 0x60; // char : 1
	}

	namespace n_UGiveVoyageOnItemHandInComponent { // : UActorComponent
		constexpr auto InputID = 0xd0; // UNotificationInputId*
		constexpr auto ActionDisplayPriority = 0xd8; // EActionDisplayPriority
		constexpr auto VoyageEntries = 0xe0; // TArray<FVoyageHandInEntry>
	}

	namespace n_ULightningDataAsset { // : UDataAsset
		constexpr auto StrikeHitTime = 0x28; // float
		constexpr auto StrikeCompleteTime = 0x2c; // float
		constexpr auto StormHeight = 0x30; // float
		constexpr auto StandardLightningBaseDamage = 0x34; // float
		constexpr auto HighPriorityLightningBaseDamage = 0x38; // float
		constexpr auto LightningStrikeEvent = 0x40; // UWwiseEvent*
		constexpr auto LightningStrikePool = 0x48; // UWwiseObjectPoolWrapper*
		constexpr auto LightningMaterial = 0x50; // UMaterial*
		constexpr auto LightningTimingParam = 0x58; // FName
		constexpr auto LightningSourcePosParam = 0x60; // FName
		constexpr auto LightningTag = 0x68; // FName
		constexpr auto CollisionChannel = 0x70; // ECollisionChannel
		constexpr auto StrikeWaterParticleSystem = 0x78; // UObject*
		constexpr auto StrikeWaterEvent = 0x80; // UWwiseEvent*
		constexpr auto StrikeWaterPool = 0x88; // UWwiseObjectPoolWrapper*
		constexpr auto DisableStrikeGroundDecal = 0x90; // bool
		constexpr auto DisableStrikeGroundSFX = 0x91; // bool
		constexpr auto OverrideStrikeGroundEvent = 0x98; // UWwiseEvent*
		constexpr auto OverrideStrikeGroundPool = 0xa0; // UWwiseObjectPoolWrapper*
	}

	namespace n_UDeliverableRedirectionContextHandlerBase { // : UObject
		constexpr auto DestinationDescriptor = 0x28; // UDeliverableRedirectionDestinationDescriptorBase*
	}

	namespace n_UMaterialExpressionParticlePositionWS { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_ALegendaryMerchantCrateItemInfoMock { // : AMerchantCrateItemInfoMock
		constexpr auto FaunaBreedRarity = 0x710; // TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry>
		constexpr auto CurrentShip = 0x778; // AActor*
	}

	namespace n_UOnBuryAdjustFuseTimeScale { // : UOnBuryStrategy
		constexpr auto FuseTimeScaleOnBury = 0x28; // float
	}

	namespace n_UNPCByNameClueDestinationDescriptor { // : UClueDestinationDescriptor
		constexpr auto NPCIdentifier = 0x40; // FGuid
	}

	namespace n_UTaleSettings { // : UObject
		constexpr auto TaleRankRequirementsAssetRef = 0x28; // FStringAssetReference
	}

	namespace n_UTaleQuestRootFrame { // : UObject
		constexpr auto Definition = 0x30; // UObject*
	}

	namespace n_UParticleModuleVectorFieldGlobal { // : UParticleModuleVectorFieldBase
		constexpr auto bOverrideGlobalVectorFieldTightness = 0x50; // char : 1
		constexpr auto GlobalVectorFieldScale = 0x54; // float
		constexpr auto GlobalVectorFieldTightness = 0x58; // float
	}

	namespace n_AProceduralFoliageBlockingVolume { // : AVolume
		constexpr auto ProceduralFoliageVolume = 0x408; // AProceduralFoliageVolume*
	}

	namespace n_UMountableComponent { // : UActorComponent
		constexpr auto MountableType = 0xd0; // UMountableType*
		constexpr auto MountableTypeCrewStat = 0xd8; // FPlayerStat
		constexpr auto ActorCanServerMigrate = 0xdc; // bool
		constexpr auto Description = 0xe0; // FText
		constexpr auto ReplicatedMountpoint = 0x130; // UObject*
	}

	namespace n_UMovieSceneBindingOverrides { // : UObject
		constexpr auto BindingData = 0x30; // TArray<FMovieSceneBindingOverrideData>
	}

	namespace n_UPetFeedingDataAsset { // : UDataAsset
		constexpr auto PetFeedingParams = 0x28; // FPetFeedingParams
	}

	namespace n_UBTTask_ClearBlackboardValue { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_AGameCustomizationService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_USetMechanismActivationModeStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // USetMechanismActivationModeStepDesc*
	}

	namespace n_ACollectorsChestStaticWieldableItem { // : ANonDisplaceableLargeStaticMeshWieldableItem
		constexpr auto OpenableItemComponent = 0x7a0; // UOpenableItemComponent*
		constexpr auto Slots = 0x7a8; // TArray<UCollectorsChestItemSlotInteractable*>
	}

	namespace n_ATestMountedWeapon { // : AControllableObject
		constexpr auto SetProjectile = 0x518; // AActor*
		constexpr auto CameraAttachComponent = 0x520; // USceneComponent*
	}

	namespace n_UCustomizableGameEventSchedulerService { // : UGameEventSchedulerService
		constexpr auto Settings = 0x48; // UGameEventSchedulerSettingsAsset*
		constexpr auto World = 0x50; // UWorld*
		constexpr auto PermittedEventTypes = 0x88; // TArray<FGameEventCount>
	}

	namespace n_USpawnActorStepDescBase { // : UTaleQuestStepDesc
		constexpr auto Actor = 0x80; // UClass*
		constexpr auto ActorType = 0xa0; // FQuestVariableActorAssetType
		constexpr auto TrackActor = 0xb0; // bool
		constexpr auto AutomaticallyGatherForMigration = 0xb1; // bool
		constexpr auto MarkAsCritical = 0xb2; // bool
		constexpr auto CriticalActorLostMessage = 0xb8; // FText
		constexpr auto ActorVar = 0xf0; // FQuestVariableActor
	}

	namespace n_ASirenPawn { // : ASwimmingCreaturePawn
		constexpr auto StatusEffectComponent = 0x950; // UStatusEffectManagerComponent*
		constexpr auto HitDetectionComponent = 0x958; // UHitDetectionComponent*
		constexpr auto InventoryManipulatorComponent = 0x960; // UInventoryManipulatorComponent*
		constexpr auto WieldedItemComponent = 0x968; // UWieldedItemComponent*
		constexpr auto WieldableItemSetComponent = 0x970; // UWieldableItemSetComponent*
		constexpr auto LoadoutComponent = 0x978; // ULoadoutComponent*
		constexpr auto ItemLoadoutComponent = 0x980; // UItemLoadoutComponent*
		constexpr auto MeleeAttackProcessorComponent = 0x988; // UMeleeAttackProcessorComponent*
		constexpr auto AnimationDataStoreComponent = 0x990; // UAnimationDataStoreComponent*
		constexpr auto CustomAnimationMontageComponent = 0x998; // UCustomAnimationMontageComponent*
		constexpr auto FiringIntentionComponent = 0x9a0; // UAIProjectileWeaponFiringIntentionComponent*
		constexpr auto HealthGemComponent = 0x9a8; // UHealthGemComponent*
		constexpr auto DeathMontageId = 0x9b0; // FCustomAnimationMontageId
		constexpr auto CharacterHitReactionComponent = 0x9b8; // UCharacterHitReactionComponent*
		constexpr auto AnimationID = 0x9c8; // UAnimationDataStoreId*
		constexpr auto InputDelegator = 0x9d0; // FCompositeInputDelegator
	}

	namespace n_UBurrowHealAIAbilityParams { // : UBurrowAIAbilityParams
		constexpr auto AllyTypeToHeal = 0x140; // APawn*
		constexpr auto HealDuration = 0x148; // float
		constexpr auto RadiusForValidTargets = 0x14c; // float
		constexpr auto NumberOfTargetsToHeal = 0x150; // int32_t
		constexpr auto StatusToApplyOnHeal = 0x158; // FStatus
	}

	namespace n_UOceanCrawlerAudioParamsDataAsset { // : UDataAsset
		constexpr auto WwiseObjectPoolWrapper = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto AudioKeyPairs = 0x30; // TArray<FOceanCrawlerAudioKeyPair>
		constexpr auto BuffThankDelay = 0x40; // FWeightedProbabilityRangeOfRanges
		constexpr auto CrabBuffAudioSettings = 0x70; // FOceanCrawlerBuffAudioSettings
		constexpr auto EelBuffAudioSettings = 0x80; // FOceanCrawlerBuffAudioSettings
		constexpr auto HermitBuffAudioSettings = 0x90; // FOceanCrawlerBuffAudioSettings
	}

	namespace n_UAnimSequencerInstance { // : UAnimInstance
		constexpr auto CurrentSkeleton = 0x28; // USkeleton*
		constexpr auto UngroupedActivePlayers = 0x30; // TArray<FAnimTickRecord>
		constexpr auto SyncGroups = 0x40; // TArray<FAnimGroupInstance>
		constexpr auto VertexAnims = 0x50; // TArray<FActiveVertexAnim>
		constexpr auto RootMotionMode = 0x60; // ERootMotionMode
		constexpr auto bWarnAboutBlueprintUsage = 0x61; // bool
		constexpr auto OnMontageBlendingOut = 0x68; // FScriptMulticastDelegate
		constexpr auto OnMontageStarted = 0x78; // FScriptMulticastDelegate
		constexpr auto OnMontageEnded = 0x88; // FScriptMulticastDelegate
		constexpr auto OnStateEntered = 0x98; // FScriptMulticastDelegate
		constexpr auto OnStateExited = 0xa8; // FScriptMulticastDelegate
		constexpr auto OnStateInitialised = 0xb8; // FScriptMulticastDelegate
		constexpr auto OnAnimUpdated = 0xc8; // FScriptMulticastDelegate
		constexpr auto bQueueMontageEvents = 0x148; // bool
		constexpr auto ActiveAnimNotifyState = 0x240; // TArray<FAnimNotifyEvent>
		constexpr auto SlotNodeInitializationCounter = 0x350; // int16_t
		constexpr auto GraphTraversalCounter = 0x352; // int16_t
		constexpr auto bBoneCachesInvalidated = 0x3a8; // bool
		constexpr auto bBlueprintAnimUpdateEnabled = 0x438; // char : 1
	}

	namespace n_UAnimCompress_RemoveTrivialKeys { // : UAnimCompress
		constexpr auto MaxPosDiff = 0x40; // float
		constexpr auto MaxAngleDiff = 0x44; // float
		constexpr auto MaxScaleDiff = 0x48; // float
	}

	namespace n_UActorChannel { // : UChannel
		constexpr auto Actor = 0x68; // AActor*
		constexpr auto ObjectsRequiredForQueuedBunches = 0x158; // TArray<UObject*>
	}

	namespace n_UDrowningComponentParams { // : UDataAsset
		constexpr auto DrowningParameters = 0x28; // FBlendableDrowningParams
		constexpr auto DrowningEmitterPool = 0x50; // UWwiseObjectPoolWrapper*
		constexpr auto StartDrowningSfx = 0x58; // UWwiseEvent*
		constexpr auto StopDrowningSfx = 0x60; // UWwiseEvent*
		constexpr auto StartDrowningSfxRemotePlayer = 0x68; // UWwiseEvent*
		constexpr auto StopDrowningSfxRemotePlayer = 0x70; // UWwiseEvent*
		constexpr auto SurfaceBreathSfxSoft = 0x78; // UWwiseEvent*
		constexpr auto SurfaceBreathSfxMed = 0x80; // UWwiseEvent*
		constexpr auto SurfaceBreathSfxHard = 0x88; // UWwiseEvent*
		constexpr auto BubblesSfx = 0x90; // UWwiseEvent*
		constexpr auto PlayerDrowningAmountRtpc = 0x98; // FName
		constexpr auto RemotePlayerDrowningAmountRtpc = 0xa0; // FName
		constexpr auto BubblesFirstPerson = 0xa8; // UObject*
		constexpr auto BubblesThirdPerson = 0xb0; // UObject*
		constexpr auto BubblesAmountRtpc = 0xb8; // FName
		constexpr auto BubblesFirstPersonSocket = 0xc0; // FName
		constexpr auto BubblesThirdPersonSocket = 0xc8; // FName
		constexpr auto BubblesRateParam = 0xd0; // FName
		constexpr auto BubblesLargeRateParam = 0xd8; // FName
		constexpr auto BubbleRateTimeCurve = 0xe0; // UCurveFloat*
		constexpr auto BubbleIntervalForOxygenLevel = 0xe8; // FVector2D
		constexpr auto LargeBubbleStartTime = 0xf0; // float
	}

	namespace n_UAIPartsDesc { // : UDataAsset
		constexpr auto AIPartId = 0x28; // FAIPartId
	}

	namespace n_UTaleQuestAddCargoRunMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto IslandName = 0x88; // FQuestVariableName
		constexpr auto NumItems = 0x98; // FQuestVariableInt
		constexpr auto NPCId = 0xa8; // FQuestVariableGuid
		constexpr auto Layout = 0xb8; // UCargoRunMapLayout*
	}

	namespace n_UIslandWatercraftSpawnComponent { // : UUnmanagedSalvageItemSpawnComponent
		constexpr auto MinMaxYawOffset = 0x548; // float
		constexpr auto MinDistanceToNearestWatercraftInMetres = 0x54c; // float
	}

	namespace n_UNPCDialogUnaryExpression { // : UNPCDialogExpression
		constexpr auto Child = 0x28; // UNPCDialogExpression*
	}

	namespace n_UAIFormItemSpawnRequirement { // : USpawnRequirement
		constexpr auto AllowedForms = 0x50; // TArray<UAthenaAIFormDataAsset*>
	}

	namespace n_UCompanyTutorialVoyageProgress { // : UObject
		constexpr auto AssignedVoyageProposalDescClass = 0x28; // UVoyageProposalDesc*
		constexpr auto AssignedTaleRankDescClass = 0x30; // UTaleRankDesc*
	}

	namespace n_AAIShipService { // : AActor
		constexpr auto Params = 0x3f0; // UAIShipServiceDataAsset*
		constexpr auto BattleEncounters = 0x728; // TArray<UAIShipEncounterDesc*>
	}

	namespace n_APetAIController { // : AAthenaAIController
		constexpr auto StrategyControllerMovementMods = 0x918; // TArray<FAIStategyControllerMovementMod>
		constexpr auto DefaultControlRotationInterpSpeed = 0x928; // float
		constexpr auto DefaultStrategy = 0x930; // UAIStrategyId*
		constexpr auto ReactMappings = 0x938; // UReactStateMappingsDataAsset*
		constexpr auto HangoutSpotSelectorComponent = 0x948; // UPetHangoutSpotSelectorComponent*
		constexpr auto ForcedHangoutSpotComponent = 0x950; // UPetHangoutSpotComponent*
		constexpr auto DefaultBlackboardAsset = 0x958; // UBlackboardData*
		constexpr auto DefaultTree = 0x960; // UBehaviorTree*
		constexpr auto HangoutTree = 0x968; // UBehaviorTree*
		constexpr auto IdleTree = 0x970; // UBehaviorTree*
		constexpr auto MaximumReactRange = 0x978; // float
		constexpr auto DangerComponent = 0x980; // UPetDangerComponent*
		constexpr auto MinAgentHalfHeightPctOverride = 0x988; // float
	}

	namespace n_UBTDecorator_IsAtLocation { // : UBTDecorator_BlackboardBase
		constexpr auto AcceptableRadius = 0x90; // float
		constexpr auto bUseNavAgentGoalLocation = 0x94; // bool
	}

	namespace n_UCloudStorageBase { // : UPlatformInterfaceBase
		constexpr auto LocalCloudFiles = 0x38; // TArray<FString>
		constexpr auto bSuppressDelegateCalls = 0x48; // char : 1
	}

	namespace n_UEnvQueryTest_InsideWorldBounds { // : UEnvQueryTest
		constexpr auto Radius = 0x170; // FAIDataProviderFloatValue
	}

	namespace n_UEditableTextBoxWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto EditableTextBoxStyle = 0x30; // FEditableTextBoxStyle
	}

	namespace n_AProjectileWeapon { // : ASkeletalMeshWieldableItem
		constexpr auto InventoryItem = 0x7b8; // UInventoryItemComponent*
		constexpr auto ProjectileAimValidator = 0x7c0; // DelegateProperty
		constexpr auto WeaponParameters = 0x7d0; // FProjectileWeaponParameters
		constexpr auto State = 0x9a8; // EProjectileWeaponState
		constexpr auto NamedNotificationInputComponent = 0x9b0; // UNamedNotificationInputComponent*
		constexpr auto AimSensitivityComponent = 0x9b8; // UAimSensitivityComponent*
		constexpr auto ProjectileWeaponType = 0x9d0; // EProjectileWeaponType
		constexpr auto MaxAcceptableAttackTimeStampDelta = 0x9d4; // float
		constexpr auto AmmoLeft = 0x9dc; // int32_t
		constexpr auto DistanceBeforeGravity = 0x9e0; // float
		constexpr auto NameplateVisibilityRangeExtensionFactorWhileAiming = 0x9e4; // float
		constexpr auto ShouldShowAmmoUI = 0xa21; // bool
	}

	namespace n_AShroudBreakerService { // : AActor
		constexpr auto World = 0x448; // UWorld*
	}

	namespace n_UMusicZoneComponent { // : USceneComponent
		constexpr auto InnerRadius = 0x2b8; // float
		constexpr auto OuterRadius = 0x2bc; // float
		constexpr auto LocationRTPC = 0x2c0; // FName
		constexpr auto LocalRTPC = 0x2c8; // bool
		constexpr auto PlayEvent = 0x2d0; // UWwiseEvent*
		constexpr auto StopEvent = 0x2d8; // UWwiseEvent*
		constexpr auto OneShotEvents = 0x2e0; // TArray<UWwiseEvent*>
		constexpr auto EmitterPool = 0x2f0; // UWwiseObjectPoolWrapper*
		constexpr auto DisableAfterPlayThrough = 0x2f8; // bool
		constexpr auto ActivateOnBeginPlay = 0x2f9; // bool
		constexpr auto OnMusicZoneStarted = 0x300; // FScriptMulticastDelegate
	}

	namespace n_UTelemetryTaskStep { // : UTaleQuestStep
		constexpr auto TaskStep = 0x90; // UTaleQuestStep*
	}

	namespace n_ULandscapeGrassType { // : UObject
		constexpr auto GrassVarieties = 0x28; // TArray<FGrassVariety>
		constexpr auto GrassMesh = 0x38; // UStaticMesh*
		constexpr auto GrassDensity = 0x40; // float
		constexpr auto PlacementJitter = 0x44; // float
		constexpr auto StartCullDistance = 0x48; // int32_t
		constexpr auto EndCullDistance = 0x4c; // int32_t
		constexpr auto RandomRotation = 0x50; // bool
		constexpr auto AlignToSurface = 0x51; // bool
	}

	namespace n_UStatusResponseShipAddAnchor { // : UStatusResponse
		constexpr auto Params = 0x30; // FStandardAnchorDynamicsParameters
		constexpr auto AnchorOffsetFromShip = 0x58; // FVector
	}

	namespace n_UTaleQuestMultiTargetCompassService { // : UTaleQuestToolService
		constexpr auto ServiceDesc = 0x60; // UTaleQuestToolServiceDesc*
		constexpr auto WieldableDescs = 0x68; // TArray<UItemDesc*>
	}

	namespace n_APostProcessVolume { // : AVolume
		constexpr auto Settings = 0x410; // FPostProcessSettings
		constexpr auto Priority = 0x950; // float
		constexpr auto BlendRadius = 0x954; // float
		constexpr auto BlendWeight = 0x958; // float
		constexpr auto bEnabled = 0x95c; // char : 1
		constexpr auto bUnbound = 0x95c; // char : 1
	}

	namespace n_ANPCService { // : AActor
		constexpr auto NPCData = 0x3d8; // TArray<FNPCData>
	}

	namespace n_ATestActionStateCreatorDefinition { // : AActionStateCreatorDefinition
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UCoherentUIGTInGameMenusComponent { // : UCoherentBaseHUDComponent
		constexpr auto CurrentPawn = 0x370; // APawn*
		constexpr auto AudioComponent = 0x5c0; // UCoherentToWwiseEventComponent*
	}

	namespace n_AMechanismsService { // : AActor
		constexpr auto RegisteredMechanisms = 0x3e8; // TArray<FInteractableMechanismIslandData>
		constexpr auto OverlappingActors = 0x3f8; // TArray<FActorsOverlappingMechanismData>
	}

	namespace n_ATestQuestProxy { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_URammerComponent { // : UActorComponent
		constexpr auto DamagerType = 0xd0; // UDamagerType*
		constexpr auto RammerType = 0xd8; // URammerType*
		constexpr auto OwnerMovement = 0xe0; // TScriptInterface<Class>
	}

	namespace n_UGenerateDigLocationInRadiusStepDesc { // : UTaleQuestStepDesc
		constexpr auto IslandName = 0x80; // FQuestVariableName
		constexpr auto Center = 0x90; // FQuestVariableVector
		constexpr auto RadiusInCm = 0xa0; // float
		constexpr auto DigLocation = 0xa8; // FQuestVariableVector
	}

	namespace n_UEntitlementInformationComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UWorldLocationPopUpComponent { // : USceneComponent
		constexpr auto PopUpData = 0x2b0; // UWorldLocationPopUpDataAsset*
		constexpr auto LocationOverlapVolume = 0x2b8; // UShapeComponent*
		constexpr auto LocationCooldown = 0x2c0; // float
		constexpr auto AlwaysShowPopUp = 0x2c4; // bool
	}

	namespace n_UBTComposite_Sequence { // : UBTCompositeNode
		constexpr auto Children = 0x58; // TArray<FBTCompositeChild>
		constexpr auto Services = 0x68; // TArray<UBTService*>
	}

	namespace n_UTaleQuestMapStepDescBase { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UGatedHealthComponent { // : UItemHealthComponent
		constexpr auto NumOfGates = 0x240; // uint32_t
	}

	namespace n_UEnvQueryTest_HasLineOfSight { // : UEnvQueryTest
		constexpr auto TraceDirection = 0x170; // ETraceDirection
		constexpr auto Context = 0x178; // UEnvQueryContext*
	}

	namespace n_UCoherentUIGTBaseComponent { // : UActorComponent
		constexpr auto ReadyForBindings = 0xc8; // FScriptMulticastDelegate
		constexpr auto BindingsReleased = 0xd8; // FScriptMulticastDelegate
		constexpr auto FinishLoad = 0xe8; // FScriptMulticastDelegate
		constexpr auto FailLoad = 0xf8; // FScriptMulticastDelegate
		constexpr auto StartLoading = 0x108; // FScriptMulticastDelegate
		constexpr auto NavigateTo = 0x118; // FScriptMulticastDelegate
		constexpr auto JavaScriptEvent = 0x128; // FScriptMulticastDelegate
		constexpr auto UIGTScriptingReady = 0x138; // FScriptMulticastDelegate
		constexpr auto LiveViewSizeRequested = 0x148; // DelegateProperty
		constexpr auto Texture = 0x170; // UTextureRenderTarget2D*
		constexpr auto Filter = 0x178; // TextureFilter
		constexpr auto bReceiveInput = 0x179; // bool
		constexpr auto bReceiveInputWhenTransparent = 0x17a; // bool
		constexpr auto AllowPerformanceWarnings = 0x17b; // bool
		constexpr auto ExecuteJSTimersThresholdMs = 0x17c; // float
		constexpr auto UpdateStylesAndLayoutThresholdMs = 0x180; // float
		constexpr auto RecordRenderingCommandsThresholdMs = 0x184; // float
		constexpr auto PaintWarningThresholdMs = 0x188; // float
		constexpr auto LayersCountThreshold = 0x18c; // int32_t
		constexpr auto LayerWidthThreshold = 0x190; // int32_t
		constexpr auto LayerHeightThreshold = 0x194; // int32_t
		constexpr auto bEnableAdditionalDefaultStyles = 0x198; // bool
		constexpr auto bDelayedUpdate = 0x199; // bool
	}

	namespace n_UParticleModuleVectorFieldScale { // : UParticleModuleVectorFieldBase
		constexpr auto VectorFieldScale = 0x50; // UDistributionFloat*
	}

	namespace n_AHalfSkellyInteractableObject { // : AInteractableObject
		constexpr auto InteractableComponent = 0x460; // UInteractableComponent*
		constexpr auto SkeletalMeshComponent = 0x468; // USkeletalMeshComponent*
		constexpr auto HalfSkellyName = 0x470; // FText
	}

	namespace n_UMaterial { // : UMaterialInterface
		constexpr auto PhysMaterial = 0x58; // UPhysicalMaterial*
		constexpr auto DiffuseColor = 0x60; // FColorMaterialInput
		constexpr auto SpecularColor = 0xa0; // FColorMaterialInput
		constexpr auto BaseColor = 0xe0; // FColorMaterialInput
		constexpr auto Metallic = 0x120; // FScalarMaterialInput
		constexpr auto Specular = 0x160; // FScalarMaterialInput
		constexpr auto Roughness = 0x1a0; // FScalarMaterialInput
		constexpr auto Normal = 0x1e0; // FVectorMaterialInput
		constexpr auto EmissiveColor = 0x228; // FColorMaterialInput
		constexpr auto Opacity = 0x268; // FScalarMaterialInput
		constexpr auto OpacityMask = 0x2a8; // FScalarMaterialInput
		constexpr auto MaterialDomain = 0x2e8; // EMaterialDomain
		constexpr auto BlendMode = 0x2e9; // EBlendMode
		constexpr auto DecalBlendMode = 0x2ea; // EDecalBlendMode
		constexpr auto bDecalNoEmissiveOrRoughness = 0x2eb; // bool
		constexpr auto bDecalEnableStencil = 0x2ec; // bool
		constexpr auto MaterialDecalResponse = 0x2ed; // EMaterialDecalResponse
		constexpr auto ShadingModel = 0x2ee; // EMaterialShadingModel
		constexpr auto OpacityMaskClipValue = 0x2f0; // float
		constexpr auto DepthWeightScale = 0x2f4; // float
		constexpr auto DepthWeightExponent = 0x2f8; // float
		constexpr auto DepthWeightBase = 0x2fc; // float
		constexpr auto bBlendedOITAfterTranslucency = 0x300; // char : 1
		constexpr auto bForceResolution = 0x300; // char : 1
		constexpr auto ForcedResolution = 0x304; // ELowResTranslucencyCascade
		constexpr auto FirstSplitDistance = 0x308; // float
		constexpr auto SecondSplitDistance = 0x30c; // float
		constexpr auto FullResInFrontMaxDistance = 0x310; // float
		constexpr auto FullResInFront = 0x314; // char : 1
		constexpr auto PopPerParticle = 0x314; // char : 1
		constexpr auto WorldPositionOffset = 0x318; // FVectorMaterialInput
		constexpr auto WorldDisplacement = 0x360; // FVectorMaterialInput
		constexpr auto TessellationMultiplier = 0x3a8; // FScalarMaterialInput
		constexpr auto SubsurfaceColor = 0x3e8; // FColorMaterialInput
		constexpr auto ClearCoat = 0x428; // FScalarMaterialInput
		constexpr auto ClearCoatRoughness = 0x468; // FScalarMaterialInput
		constexpr auto AmbientOcclusion = 0x4a8; // FScalarMaterialInput
		constexpr auto Refraction = 0x4e8; // FScalarMaterialInput
		constexpr auto BillboardColor = 0x528; // FColorMaterialInput
		constexpr auto BillboardParams = 0x568; // FVectorMaterialInput
		constexpr auto CustomizedUVs = 0x5b0; // FVector2MaterialInput [0x8]
		constexpr auto MaterialAttributes = 0x7f0; // FMaterialAttributesInput
		constexpr auto PixelDepthOffset = 0x838; // FScalarMaterialInput
		constexpr auto bTranslucentBeforeTranslucency = 0x878; // char : 1
		constexpr auto bTranslucentBeforeVolumeFog = 0x878; // char : 1
		constexpr auto bTranslucentWithDepthWrite = 0x878; // char : 1
		constexpr auto bEnableSeparateTranslucency = 0x878; // char : 1
		constexpr auto bEnableResponsiveAA = 0x878; // char : 1
		constexpr auto bScreenSpaceReflections = 0x878; // char : 1
		constexpr auto TwoSided = 0x878; // char : 1
		constexpr auto DitheredLODTransition = 0x878; // char : 1
		constexpr auto ConstantMaterial = 0x87c; // EConstantMaterial
		constexpr auto SkyLightWhenOccluded = 0x880; // float
		constexpr auto CloudShadowsInfluence = 0x884; // float
		constexpr auto NumCustomizedUVs = 0x888; // int32_t
		constexpr auto TranslucencyLightingMode = 0x88c; // ETranslucencyLightingMode
		constexpr auto TranslucencyDirectionalLightingIntensity = 0x890; // float
		constexpr auto LightColorInfluence = 0x894; // float
		constexpr auto AmbientLightColorInfluence = 0x898; // float
		constexpr auto LightIntensityInfluence = 0x89c; // float
		constexpr auto AmbientLightIntensityInfluence = 0x8a0; // float
		constexpr auto AlternativeAmbientLightColorInfluence = 0x8a4; // float
		constexpr auto AlternativeAmbientLightIntensityInfluence = 0x8a8; // float
		constexpr auto bEvaluateLightningAtParticleCenter = 0x8ac; // char : 1
		constexpr auto TranslucencyScaleForReflection = 0x8b0; // float
		constexpr auto bObjectFadeEnabled = 0x8b4; // char : 1
		constexpr auto ObjectFadeRate = 0x8b8; // float
		constexpr auto ObjectFadeDistanceThreshold = 0x8bc; // float
		constexpr auto TranslucentShadowDensityScale = 0x8c0; // float
		constexpr auto TranslucentSelfShadowDensityScale = 0x8c4; // float
		constexpr auto TranslucentSelfShadowSecondDensityScale = 0x8c8; // float
		constexpr auto TranslucentSelfShadowSecondOpacity = 0x8cc; // float
		constexpr auto TranslucentBackscatteringExponent = 0x8d0; // float
		constexpr auto TranslucentMultipleScatteringExtinction = 0x8d4; // FLinearColor
		constexpr auto TranslucentShadowStartOffset = 0x8e4; // float
		constexpr auto VolumeFogScale = 0x8e8; // float
		constexpr auto DistanceFog = 0x8ec; // char : 1
		constexpr auto bDisableDepthTest = 0x8ec; // char : 1
		constexpr auto bGenerateSphericalParticleNormals = 0x8ec; // char : 1
		constexpr auto bDontRenderWhenPlayerInsideShip = 0x8ec; // char : 1
		constexpr auto bTangentSpaceNormal = 0x8ec; // char : 1
		constexpr auto bUseEmissiveForDynamicAreaLighting = 0x8ec; // char : 1
		constexpr auto bBlockGI = 0x8ec; // char : 1
		constexpr auto bUsedAsSpecialEngineMaterial = 0x8ec; // char : 1
		constexpr auto bUsedWithSkeletalMesh = 0x8ed; // char : 1
		constexpr auto bUsedWithEditorCompositing = 0x8ed; // char : 1
		constexpr auto bUsedWithLandscape = 0x8ed; // char : 1
		constexpr auto bUsedWithParticleSprites = 0x8ed; // char : 1
		constexpr auto bUsedWithCPUParticleSprites = 0x8ed; // char : 1
		constexpr auto bUsedWithStaticMesh = 0x8ed; // char : 1
		constexpr auto bUsedWithCoverage = 0x8ed; // char : 1
		constexpr auto bUsedWithGPUInstanceCulling = 0x8ed; // char : 1
		constexpr auto bUsedWithBeamTrails = 0x8ee; // char : 1
		constexpr auto bUsedWithMeshParticles = 0x8ee; // char : 1
		constexpr auto bUsedWithStaticLighting = 0x8ee; // char : 1
		constexpr auto bUsedWithFluidSurfaces = 0x8ee; // char : 1
		constexpr auto bUsedWithMorphTargets = 0x8ee; // char : 1
		constexpr auto bUsedWithSplineMeshes = 0x8ee; // char : 1
		constexpr auto bUsedWithInstancedStaticMeshes = 0x8ee; // char : 1
		constexpr auto bUsesDistortion = 0x8ee; // char : 1
		constexpr auto bUsedWithClothing = 0x8ef; // char : 1
		constexpr auto bUsedWithDeformables = 0x8ef; // char : 1
		constexpr auto bUsedWithFFTWaterMask = 0x8ef; // char : 1
		constexpr auto bUsedWithVolumeFogMask = 0x8ef; // char : 1
		constexpr auto bUsedWithDynamicObjectFading = 0x8ef; // char : 1
		constexpr auto bUsedWithWaterBoundary = 0x8ef; // char : 1
		constexpr auto bUsedWithClouds = 0x8ef; // char : 1
		constexpr auto bUsedWithInstancedRopes = 0x8ef; // char : 1
		constexpr auto bUsedWithPlanarReflection = 0x8f0; // char : 1
		constexpr auto bUsedWithPointLightShadows = 0x8f0; // char : 1
		constexpr auto bUsedWithMaskPass = 0x8f0; // char : 1
		constexpr auto bUsedWithUI = 0x8f0; // char : 1
		constexpr auto bAutomaticallySetUsageInEditor = 0x8f0; // char : 1
		constexpr auto bAllowEmissiveOnLandscape = 0x8f0; // char : 1
		constexpr auto bApplyWaterMask = 0x8f0; // char : 1
		constexpr auto bUseReZ = 0x8f0; // char : 1
		constexpr auto bFullyRough = 0x8f1; // char : 1
		constexpr auto bUseLightmapDirectionality = 0x8f1; // char : 1
		constexpr auto GeometryMode = 0x8f4; // EMaterialGeometryMode
		constexpr auto D3D11TessellationMode = 0x8f5; // EMaterialTessellationMode
		constexpr auto bEnableCrackFreeDisplacement = 0x8f8; // char : 1
		constexpr auto bEnableAdaptiveTessellation = 0x8f8; // char : 1
		constexpr auto MaxDisplacement = 0x8fc; // float
		constexpr auto Wireframe = 0x900; // char : 1
		constexpr auto bOutputVelocityOnBasePass = 0x900; // char : 1
		constexpr auto NormalOffsetShadowBiasScale = 0x904; // float
		constexpr auto EditorX = 0x908; // int32_t
		constexpr auto EditorY = 0x90c; // int32_t
		constexpr auto EditorPitch = 0x910; // int32_t
		constexpr auto EditorYaw = 0x914; // int32_t
		constexpr auto Expressions = 0x918; // TArray<UMaterialExpression*>
		constexpr auto MaterialFunctionInfos = 0x928; // TArray<FMaterialFunctionInfo>
		constexpr auto MaterialParameterCollectionInfos = 0x938; // TArray<FMaterialParameterCollectionInfo>
		constexpr auto bCanMaskedBeAssumedOpaque = 0x948; // char : 1
		constexpr auto bIsMasked = 0x948; // char : 1
		constexpr auto bIsPreviewMaterial = 0x948; // char : 1
		constexpr auto bUseMaterialAttributes = 0x948; // char : 1
		constexpr auto bUseTranslucencyVertexFog = 0x948; // char : 1
		constexpr auto bUseDensityMapOnTranslucencyVertexFog = 0x948; // char : 1
		constexpr auto bAllowDevelopmentShaderCompile = 0x948; // char : 1
		constexpr auto bIsMaterialEditorStatsMaterial = 0x948; // char : 1
		constexpr auto UsageFlagWarnings = 0x94c; // uint32_t
		constexpr auto BlendableLocation = 0x950; // EBlendableLocation
		constexpr auto BlendablePriority = 0x954; // int32_t
		constexpr auto bIsAlphaBlended = 0x958; // char : 1
		constexpr auto RefractionDepthBias = 0x95c; // float
		constexpr auto StateId = 0x960; // FGuid
		constexpr auto UnwrappedUVSet = 0x970; // int32_t
		constexpr auto ExpressionTextureReferences = 0xa00; // TArray<UTexture*>
	}

	namespace n_UParticleModuleRotationBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UVfxSelectorDataAsset { // : UDataAsset
		constexpr auto MinDefaultEffectParams = 0x28; // FVfxSelectorEntry
		constexpr auto Ranges = 0x50; // TArray<FVfxSelectorRange>
		constexpr auto MaxDefaultEffectParams = 0x60; // FVfxSelectorEntry
	}

	namespace n_UInlineVotingInteractionComponent { // : UVotingInteractionComponentBase
		constexpr auto VotingParameters = 0x130; // TArray<FInlineVotingParameterSet>
	}

	namespace n_UMaterialExpressionStaticSwitch { // : UMaterialExpression
		constexpr auto DefaultValue = 0x70; // char : 1
		constexpr auto A = 0x78; // FExpressionInput
		constexpr auto B = 0xb0; // FExpressionInput
		constexpr auto Value = 0xe8; // FExpressionInput
	}

	namespace n_UAnimNotify_StateComplete { // : UAnimNotify
		constexpr auto CompletedStateId = 0x38; // UAnimationStateId*
	}

	namespace n_UImage { // : UWidget
		constexpr auto Image = 0x138; // USlateBrushAsset*
		constexpr auto Brush = 0x140; // FSlateBrush
		constexpr auto BrushDelegate = 0x1d0; // DelegateProperty
		constexpr auto ColorAndOpacity = 0x1e0; // FLinearColor
		constexpr auto ColorAndOpacityDelegate = 0x1f0; // DelegateProperty
		constexpr auto OnMouseButtonDownEvent = 0x200; // DelegateProperty
	}

	namespace n_UDrawFrustumComponent { // : UPrimitiveComponent
		constexpr auto FrustumColor = 0x588; // FColor
		constexpr auto FrustumAngle = 0x58c; // float
		constexpr auto FrustumAspectRatio = 0x590; // float
		constexpr auto FrustumStartDist = 0x594; // float
		constexpr auto FrustumEndDist = 0x598; // float
		constexpr auto Texture = 0x5a0; // UTexture*
	}

	namespace n_UStatusEffectPersistenceComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AServerMigrationSerialisationDetailsTestsActorWithUniqueNetId { // : AActor
		constexpr auto UniqueId = 0x3d0; // FUniqueNetIdRepl
	}

	namespace n_USoundCue { // : USoundBase
		constexpr auto bOverrideAttenuation = 0x50; // char : 1
		constexpr auto FirstNode = 0x58; // USoundNode*
		constexpr auto VolumeMultiplier = 0x60; // float
		constexpr auto PitchMultiplier = 0x64; // float
		constexpr auto AttenuationOverrides = 0x68; // FAttenuationSettings
	}

	namespace n_UAITask_MoveTo { // : UAITask
		constexpr auto OnRequestFailed = 0x60; // FScriptMulticastDelegate
		constexpr auto OnMoveFinished = 0x70; // FScriptMulticastDelegate
		constexpr auto MoveGoalLocation = 0x80; // FVector
		constexpr auto MoveGoalActor = 0x98; // AActor*
		constexpr auto MoveAcceptanceRadius = 0xa0; // float
		constexpr auto bShouldStopOnOverlap = 0xa4; // bool
		constexpr auto bShouldAcceptPartialPath = 0xa5; // bool
		constexpr auto bShouldUsePathfinding = 0xa6; // bool
	}

	namespace n_UStatusResponseSetBlackboardFloatKey { // : UStatusResponse
		constexpr auto BlackboardFloatKeyName = 0x30; // FName
		constexpr auto ValueWhenActive = 0x38; // float
		constexpr auto ShouldClearKeyOnEnd = 0x3c; // bool
	}

	namespace n_ASailAngle { // : ASailManipulator
		constexpr auto RopeUVSpeed = 0x7c8; // float
		constexpr auto Rigging = 0x7d0; // URiggingSystemComponent*
		constexpr auto RiggingLeftRopeIndex = 0x7d8; // int32_t
		constexpr auto RiggingRightRopeIndex = 0x7dc; // int32_t
		constexpr auto PlayAudio = 0x7e0; // bool
	}

	namespace n_UBTTask_AthenaRunEQSQueryFromBlackboard { // : UBTTask_AthenaRunEQSQuery
		constexpr auto EQSBlackboardKey = 0x100; // FBlackboardKeySelector
	}

	namespace n_UNPCDialogOptionStorageContainerTake { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto EmptyText = 0xb8; // FText
		constexpr auto NoInventorySpaceText = 0xf0; // FText
	}

	namespace n_UBTTask_SetBlackboardClassValue { // : UBTTask_BlackboardBase
		constexpr auto ClassValue = 0x88; // UObject*
	}

	namespace n_AProjectileCooldownService { // : AActor
		constexpr auto ProjectileCooldownSettings = 0x3f8; // UProjectileCooldownServiceSettings*
	}

	namespace n_UPhysicsSpringComponent { // : USceneComponent
		constexpr auto SpringStiffness = 0x2b0; // float
		constexpr auto SpringDamping = 0x2b4; // float
		constexpr auto SpringLengthAtRest = 0x2b8; // float
		constexpr auto SpringRadius = 0x2bc; // float
		constexpr auto SpringChannel = 0x2c0; // ECollisionChannel
		constexpr auto bIgnoreSelf = 0x2c1; // bool
		constexpr auto SpringCompression = 0x2c4; // float
	}

	namespace n_UPetEntitlementBaseCategory { // : UItemCategory
		constexpr auto PetPreviewCamera = 0x80; // FName
	}

	namespace n_UWaitForAnimationStateEntryProxy { // : UObject
		constexpr auto OnReachedState = 0x28; // FScriptMulticastDelegate
	}

	namespace n_ASwimmingCreaturePawn { // : APawn
		constexpr auto ActionStateMachineComponent = 0x4a0; // UActionStateMachineComponent*
		constexpr auto ActionStatePriorityTableData = 0x4a8; // UActionStatePriorityTableData*
		constexpr auto ActionStateCreatorDefinition = 0x4b0; // AActionStateCreatorDefinition*
		constexpr auto AIControllerParams = 0x4b8; // UAthenaAIControllerParamsDataAsset*
		constexpr auto CollisionComponent = 0x4c0; // UShapeComponent*
		constexpr auto Mesh = 0x4c8; // USkeletalMeshMemoryConstraintComponent*
		constexpr auto FloatingMovementComponent = 0x4d0; // USwimmingCreatureMovementComponent*
		constexpr auto RewindComponent = 0x4d8; // URewindComponent*
		constexpr auto ProjectileTraceHitVolume = 0x4e0; // UPrimitiveComponent*
		constexpr auto HealthComponent = 0x4e8; // UHealthComponent*
		constexpr auto DamageableComponent = 0x4f0; // UActorDamageableComponent*
		constexpr auto DitherComponent = 0x4f8; // UDitherComponent*
		constexpr auto AIPartsRetrievalComponent = 0x500; // UAIPartsRetrievalComponent*
		constexpr auto NetworkSyncedAnimationComponent = 0x508; // UNetworkSyncedAnimationComponent*
		constexpr auto NetworkTriggeredVFXComponent = 0x510; // UNetworkTriggeredVFXComponent*
		constexpr auto WaterHeightProviderComponent = 0x518; // UWaterHeightProviderComponent*
		constexpr auto WaterInteractionComponent = 0x520; // UWaterInteractionComponent*
		constexpr auto FadeOutTime = 0x528; // float
		constexpr auto SwimmingCreatureType = 0x52c; // ESwimmingCreatureType
		constexpr auto CollisionShapeScaleOnDeath = 0x530; // FVector
		constexpr auto PawnEncounterSpec = 0x630; // FAIEncounterSpecification
		constexpr auto CurrentlyLoadedMaterials = 0x860; // TArray<FSwimmingCreatureLoadedMaterial>
		constexpr auto CurrentAIStrategy = 0x870; // UAIStrategyId*
	}

	namespace n_UShipTelemetrySubjectComponent { // : UTelemetrySubjectComponent
		constexpr auto SubjectName = 0xd0; // FString
		constexpr auto SubjectID = 0xe0; // FString
	}

	namespace n_UBootyItemWithCutscenesAnimationInstance { // : UWieldableItemAnimationInstance
		constexpr auto BootyItemSkeletalMesh = 0x640; // USkeletalMeshComponent*
		constexpr auto CutsceneAnimationData = 0x648; // UCutsceneAnimationDataAsset*
		constexpr auto CurrentCutscene = 0x650; // UAnimMontage*
	}

	namespace n_UBorderSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UMeshMemoryConstraintFallbackCollection { // : UDataAsset
		constexpr auto MaxScoringPerFrame = 0x28; // int32_t
		constexpr auto FallbackDataAssets = 0x30; // TArray<UMeshMemoryConstraintFallbackDataAsset*>
	}

	namespace n_ALandmarkReactionActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_AEarthquake { // : AActor
		constexpr auto EarthquakeSetupData = 0x3e0; // UEarthquakeSetupDataAsset*
		constexpr auto AssociatedVolcano = 0x3e8; // AVolcano*
		constexpr auto AssociatedGeyserManager = 0x3f0; // AGeyserManager*
		constexpr auto EarthquakeEffectInnerRadiusOffsetInMetres = 0x3f8; // float
		constexpr auto AudioPool = 0x400; // UWwiseObjectPoolWrapper*
		constexpr auto PlayEarthquakeLarge = 0x408; // UWwiseEvent*
		constexpr auto StopEarthquakeLarge = 0x410; // UWwiseEvent*
		constexpr auto PlayEarthquakeSmall = 0x418; // UWwiseEvent*
		constexpr auto StopEarthquakeSmall = 0x420; // UWwiseEvent*
		constexpr auto EarthquakeRtpcName = 0x428; // FName
		constexpr auto EarthquakeRtpcMin = 0x430; // float
		constexpr auto EarthquakeRtpcMax = 0x434; // float
		constexpr auto EarthquakeSizeToUseLargeAttenuation = 0x438; // float
		constexpr auto HitDetectionVolume = 0x440; // UCapsuleComponent*
		constexpr auto WindZone = 0x448; // UWindZoneComponent*
		constexpr auto EarthquakeState = 0x450; // EEarthquakeState
	}

	namespace n_UMaterialExpressionScalarParameter { // : UMaterialExpressionParameter
		constexpr auto DefaultValue = 0x90; // float
		constexpr auto SliderMin = 0x94; // float
		constexpr auto SliderMax = 0x98; // float
		constexpr auto bUseCustomPrimitiveData = 0x9c; // bool
		constexpr auto PrimitiveDataIndex = 0x9d; // char
	}

	namespace n_UShipCustomizationCategory { // : UCategoryBase
		constexpr auto Name = 0x28; // FText
		constexpr auto UniqueTextIdentifier = 0x60; // FName
		constexpr auto IconPath = 0x68; // FStringAssetReference
	}

	namespace n_AGameplayAbilityWorldReticle { // : AActor
		constexpr auto Parameters = 0x3d0; // FWorldReticleParameters
		constexpr auto bFaceOwnerFlat = 0x3dc; // bool
		constexpr auto bSnapToTargetedActor = 0x3dd; // bool
		constexpr auto bIsTargetValid = 0x3de; // bool
		constexpr auto bIsTargetAnActor = 0x3df; // bool
		constexpr auto MasterPC = 0x3e0; // APlayerController*
		constexpr auto TargetingActor = 0x3e8; // AActor*
	}

	namespace n_ABaseSimpleBootyItemProxy { // : ABootyProxy
		constexpr auto RetractableComponent = 0x7a8; // URetractableComponent*
		constexpr auto ItemProxyShipTrackerComponent = 0x7b0; // UItemProxyShipTrackerComponent*
	}

	namespace n_UCoherentBaseHUDComponent { // : UCoherentUIGTInstancedComponent
		constexpr auto CurrentPawn = 0x370; // APawn*
		constexpr auto AudioComponent = 0x5c0; // UCoherentToWwiseEventComponent*
	}

	namespace n_UInterpTrackEvent { // : UInterpTrack
		constexpr auto EventTrack = 0x70; // TArray<FEventTrackKey>
		constexpr auto bFireEventsWhenForwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x80; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x80; // char : 1
		constexpr auto bUseCustomEventName = 0x80; // char : 1
	}

	namespace n_UNavArea_LowHeight { // : UNavArea
		constexpr auto DefaultCost = 0x28; // float
		constexpr auto FixedAreaEnteringCost = 0x2c; // float
		constexpr auto DrawColor = 0x30; // FColor
		constexpr auto SupportedAgents = 0x34; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x38; // char : 1
		constexpr auto bSupportsAgent1 = 0x38; // char : 1
		constexpr auto bSupportsAgent2 = 0x38; // char : 1
		constexpr auto bSupportsAgent3 = 0x38; // char : 1
		constexpr auto bSupportsAgent4 = 0x38; // char : 1
		constexpr auto bSupportsAgent5 = 0x38; // char : 1
		constexpr auto bSupportsAgent6 = 0x38; // char : 1
		constexpr auto bSupportsAgent7 = 0x38; // char : 1
		constexpr auto bSupportsAgent8 = 0x39; // char : 1
		constexpr auto bSupportsAgent9 = 0x39; // char : 1
		constexpr auto bSupportsAgent10 = 0x39; // char : 1
		constexpr auto bSupportsAgent11 = 0x39; // char : 1
		constexpr auto bSupportsAgent12 = 0x39; // char : 1
		constexpr auto bSupportsAgent13 = 0x39; // char : 1
		constexpr auto bSupportsAgent14 = 0x39; // char : 1
		constexpr auto bSupportsAgent15 = 0x39; // char : 1
	}

	namespace n_UMaterialParameterBlendBase { // : UEffectBlendObjectBase
		constexpr auto DynamicMaterial = 0x38; // UMaterialInstanceDynamic*
		constexpr auto ParameterName = 0x40; // FName
		constexpr auto Mesh = 0x48; // FActorComponentSelector
		constexpr auto MaterialIndex = 0x58; // int32_t
	}

	namespace n_AAthenaFaunaAIController { // : AAthenaAIController
		constexpr auto MaxTimeBetweenThreatDetermination = 0x8f8; // float
		constexpr auto DefaultControlRotationInterpSpeed = 0x8fc; // float
		constexpr auto StrategyControllerMovementMods = 0x900; // TArray<FAIStategyControllerMovementMod>
		constexpr auto MinAgentHalfHeightPctOverride = 0x910; // float
		constexpr auto FaunaDataAsset = 0x918; // UFaunaAIContollerParamsDataAsset*
		constexpr auto CarrierActor = 0x920; // AActor*
		constexpr auto HighestDangerActor = 0x9d0; // AActor*
		constexpr auto PlayerTracker = 0xa60; // UFaunaAIPlayerTracker*
	}

	namespace n_UAudioSpaceTrackerComponent { // : UActorComponent
		constexpr auto CurrentSpaces = 0xc8; // TArray<UAudioSpaceComponent*>
	}

	namespace n_UCannonballItemCategory_C { // : UCannonballItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UInterpTrackDirector { // : UInterpTrack
		constexpr auto CutTrack = 0x70; // TArray<FDirectorTrackCut>
		constexpr auto bSimulateCameraCutsOnClients = 0x80; // char : 1
	}

	namespace n_UBTTask_PlayAnimation { // : UBTTaskNode
		constexpr auto AnimationToPlay = 0x60; // UAnimationAsset*
		constexpr auto bLooping = 0x68; // char : 1
		constexpr auto bNonBlocking = 0x68; // char : 1
		constexpr auto MyOwnerComp = 0x70; // UBehaviorTreeComponent*
		constexpr auto CachedSkelMesh = 0x78; // USkeletalMeshComponent*
	}

	namespace n_UAmmoStoreMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UAISenseConfig_Hearing { // : UAISenseConfig
		constexpr auto Implementation = 0x30; // UAISense_Hearing*
		constexpr auto HearingRange = 0x38; // float
		constexpr auto LoSHearingRange = 0x3c; // float
		constexpr auto bUseLoSHearing = 0x40; // char : 1
		constexpr auto DetectionByAffiliation = 0x44; // FAISenseAffiliationFilter
	}

	namespace n_UDebugShipService { // : UObject
		constexpr auto PlayerShip = 0x40; // AShip*
	}

	namespace n_UTaleQuestGetCollectionItemCountStepDesc { // : UTaleQuestStepDesc
		constexpr auto Collection = 0x80; // FQuestVariableCollection
		constexpr auto Num = 0x90; // FQuestVariableInt
	}

	namespace n_UGenerateDigLocationStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UGenerateDigLocationStepDesc*
	}

	namespace n_ATavernBoard { // : AInteractableObject
		constexpr auto Mesh = 0x468; // UStaticMeshComponent*
		constexpr auto InteractionRegion = 0x470; // UInteractableComponent*
		constexpr auto ContextualTutorialOverlap = 0x478; // UBoxComponent*
	}

	namespace n_ANamedPointsContainer { // : AActor
		constexpr auto Root = 0x3d0; // USceneComponent*
		constexpr auto NamedPoints = 0x3d8; // UNamedPointsComponent*
	}

	namespace n_ACameraActor { // : AActor
		constexpr auto AutoActivateForPlayer = 0x3d0; // EAutoReceiveInput
		constexpr auto CameraComponent = 0x3d8; // UCameraComponent*
		constexpr auto bConstrainAspectRatio = 0x3e8; // char : 1
		constexpr auto AspectRatio = 0x3ec; // float
		constexpr auto FOVAngle = 0x3f0; // float
		constexpr auto PostProcessBlendWeight = 0x3f4; // float
		constexpr auto PostProcessSettings = 0x400; // FPostProcessSettings
	}

	namespace n_AChainLightningVisualActor { // : AActor
		constexpr auto Emitter = 0x3d0; // FWwiseEmitter
		constexpr auto Data = 0x3f8; // FChainData
		constexpr auto CachedChainMaterials = 0x410; // TArray<UMaterialInstanceDynamic*>
		constexpr auto CachedChainComponents = 0x420; // TArray<UStaticMeshComponent*>
		constexpr auto SettingsAsset = 0x470; // UChainLightningVisualActorSettingsAsset*
		constexpr auto RootSceneComponent = 0x478; // USceneComponent*
		constexpr auto LightningVFXComponents = 0x498; // TArray<TWeakObjectPtr<UParticleSystemComponent>>
	}

	namespace n_AGhostShipDoor { // : AActor
		constexpr auto OnDoorOpenedDelegate = 0x3d8; // FScriptMulticastDelegate
		constexpr auto OpenForList = 0x3e8; // TArray<FOpenForListEntry>
		constexpr auto DoorFullyOpenTimer = 0x3f8; // float
		constexpr auto DoorMesh = 0x400; // UClientSkeletalMeshComponent*
		constexpr auto DynamicMaterialInstances = 0x408; // TArray<UMaterialInstanceDynamic*>
		constexpr auto DoorOpeningAnimation = 0x418; // UAnimSequence*
		constexpr auto DoorOpeningSfx = 0x420; // UWwiseEvent*
		constexpr auto DoorBoundingVolume = 0x428; // FBox
		constexpr auto MaxBoundingVolume = 0x444; // FVector
		constexpr auto DoorDeformationWhenFullyOpen = 0x450; // float
		constexpr auto BlockPlayerLeftGhostshipDelegate = 0x454; // bool
	}

	namespace n_UShadowMapTexture2D { // : UTexture2D
		constexpr auto ShadowmapFlags = 0x190; // EShadowMapFlags
	}

	namespace n_UAggressiveGhostShipNamesDataAsset { // : UDataAsset
		constexpr auto NameBuckets = 0x28; // TArray<FAggressiveGhostShipNameBucket>
	}

	namespace n_AGameplayCueNotify_Actor { // : AActor
		constexpr auto GameplayCueTag = 0x3d0; // FGameplayTag
		constexpr auto GameplayCueName = 0x3d8; // FName
		constexpr auto bAutoDestroyOnRemove = 0x3e0; // bool
		constexpr auto AutoDestroyDelay = 0x3e4; // float
		constexpr auto IsOverride = 0x3e8; // bool
		constexpr auto bUniqueInstancePerInstigator = 0x3e9; // bool
		constexpr auto bUniqueInstancePerSourceObject = 0x3ea; // bool
	}

	namespace n_UQuestDescDataAsset { // : UDataAsset
		constexpr auto IsEmergent = 0x28; // bool
	}

	namespace n_UEmissaryEntitlementDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UGetCurrentLocationDataStepDesc { // : UTaleQuestStepDesc
		constexpr auto OutLocationData = 0x80; // FQuestVarLocationData
	}

	namespace n_UOptInDamageableComponent { // : UDamageableComponent
		constexpr auto EnableDamageFilteringByType = 0x180; // bool
		constexpr auto AllowedDamagers = 0x188; // TArray<UDamagerType*>
	}

	namespace n_ARiddleMap { // : ATreasureMap
		constexpr auto CanvasWidth = 0x7d8; // int32_t
		constexpr auto CanvasHeight = 0x7dc; // int32_t
		constexpr auto RevealDuration = 0x7e0; // float
		constexpr auto RiddleGateCompleteRampInDuration = 0x7e4; // float
		constexpr auto RiddleGateCompleteRampOutDuration = 0x7e8; // float
		constexpr auto RiddleTextRenderer = 0x7f0; // FRiddleTextRenderer
		constexpr auto Contents = 0x848; // FRiddleMapContents
		constexpr auto MapInventoryTexturePath = 0x860; // FStringAssetReference
		constexpr auto Rotation = 0x870; // float
	}

	namespace n_UWorldLocationPopUpDataAsset { // : UDataAsset
		constexpr auto Id = 0x28; // FName
		constexpr auto BannerIcon = 0x30; // FStringAssetReference
		constexpr auto DisplayText = 0x40; // FText
		constexpr auto AudioOverride = 0x78; // UPopUpAudioDesc*
	}

	namespace n_UMaterialExpressionIf { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto AGreaterThanB = 0xe0; // FExpressionInput
		constexpr auto AEqualsB = 0x118; // FExpressionInput
		constexpr auto ALessThanB = 0x150; // FExpressionInput
		constexpr auto EqualsThreshold = 0x188; // float
		constexpr auto ConstB = 0x18c; // float
		constexpr auto ConstAEqualsB = 0x190; // float
	}

	namespace n_UItemDiggingAudioConfig { // : UObject
		constexpr auto ShovelEnterSurfaceSfx = 0x28; // UWwiseEvent*
		constexpr auto ExhumeStepSfx = 0x30; // UWwiseEvent*
		constexpr auto FullyDugUpSfx = 0x38; // UWwiseEvent*
	}

	namespace n_ARemoteActorDestructionService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTaleQuestAssignVaultStepDesc { // : UTaleQuestStepDesc
		constexpr auto SelectionOriginPointVar = 0x80; // FQuestVariableVector
		constexpr auto GoldHoarderVoyageTier = 0x90; // FQuestVariableInt
		constexpr auto ValidSeas = 0xa0; // FQuestVariableClassArray
		constexpr auto AlloctedVaultHandleVar = 0xb0; // FQuestVariableTaleResourceHandle
		constexpr auto AlloctedVaultVar = 0xc0; // FQuestVariableActor
		constexpr auto VaultKeyTypeVar = 0xd0; // FQuestVariableClass
		constexpr auto UsePriorityRange = 0xe0; // bool
		constexpr auto PriorityRange = 0xe4; // float
		constexpr auto NumberOfSearches = 0xe8; // int32_t
	}

	namespace n_UAIDioramaDesc { // : UDataAsset
		constexpr auto RoleList = 0x28; // TArray<FAIDioramaRoleDesc>
		constexpr auto DialogueData = 0x38; // USceneDialogueData*
	}

	namespace n_UVotingInteractionComponent { // : UVotingInteractionComponentBase
		constexpr auto HoldInputId = 0x120; // UNotificationInputId*
		constexpr auto ReleaseInputId = 0x128; // UNotificationInputId*
	}

	namespace n_UParticleModuleLight { // : UParticleModuleLightBase
		constexpr auto bUseInverseSquaredFalloff = 0x50; // bool
		constexpr auto bAffectsTranslucency = 0x51; // bool
		constexpr auto bIgnoreComponentTint = 0x52; // bool
		constexpr auto bPreviewLightRadius = 0x53; // bool
		constexpr auto SpawnFraction = 0x54; // float
		constexpr auto ColorScaleOverLife = 0x58; // FRawDistributionVector
		constexpr auto BrightnessOverLife = 0x90; // FRawDistributionFloat
		constexpr auto RadiusScale = 0xc8; // FRawDistributionFloat
		constexpr auto LightExponent = 0x100; // FRawDistributionFloat
	}

	namespace n_UWashedUpSkeletonClueDestinationGenerator { // : UClueDestinationGenerator
		constexpr auto RequiredClueSiteDataType = 0x28; // UClueSiteData*
		constexpr auto WeightedSupportedDescriptorTypes = 0x30; // TArray<FWeightedClueDestinationDescriptor>
	}

	namespace n_UUnmanagedSalvageItemSpawnComponent { // : USalvageItemSpawnComponent
		constexpr auto IslandSalvageLocationData = 0x4e0; // TArray<FIslandItemSpawnLocationData>
		constexpr auto GlobalIslandChanceToSpawn = 0x4f0; // float
		constexpr auto MinimumZOffSet = 0x4f4; // float
		constexpr auto MaximumZOffset = 0x4f8; // float
		constexpr auto MinimumRoll = 0x4fc; // float
		constexpr auto MaximumRoll = 0x500; // float
		constexpr auto MinimumPitch = 0x504; // float
		constexpr auto MaximumPitch = 0x508; // float
		constexpr auto SunkenItem = 0x50c; // bool
		constexpr auto SpawnLocationType = 0x510; // UIslandItemDataAsset*
		constexpr auto SpawnedContainerContents = 0x518; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_UAIBoobyTrapSpawner { // : UAIPerPlayerSpawner
		constexpr auto NumberOfWavesToSpawn = 0x610; // int32_t
		constexpr auto NewWaveSpawnSfx = 0x618; // UWwiseEvent*
		constexpr auto NewWaveSpawnSfxTriggerRadius = 0x620; // float
		constexpr auto ShowNameplatesFor = 0x628; // TArray<UAIClassId*>
		constexpr auto NamedAIDataAsset = 0x638; // UNamedAIDataAsset*
		constexpr auto ActorToTrack = 0x640; // AActor*
	}

	namespace n_UAnimationDataStore { // : UObject
		constexpr auto Data = 0x40; // TArray<FAnimationDataStoreEntry>
		constexpr auto LoadingData = 0x50; // TArray<FAnimationDataStoreLoadingEntry>
	}

	namespace n_UUnmanagedSalvageItemSpawnComponentMock { // : UUnmanagedSalvageItemSpawnComponent
		constexpr auto IslandSalvageLocationData = 0x4e0; // TArray<FIslandItemSpawnLocationData>
		constexpr auto GlobalIslandChanceToSpawn = 0x4f0; // float
		constexpr auto MinimumZOffSet = 0x4f4; // float
		constexpr auto MaximumZOffset = 0x4f8; // float
		constexpr auto MinimumRoll = 0x4fc; // float
		constexpr auto MaximumRoll = 0x500; // float
		constexpr auto MinimumPitch = 0x504; // float
		constexpr auto MaximumPitch = 0x508; // float
		constexpr auto SunkenItem = 0x50c; // bool
		constexpr auto SpawnLocationType = 0x510; // UIslandItemDataAsset*
		constexpr auto SpawnedContainerContents = 0x518; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_URotateMeshToLocalPlayerComponent { // : URotateMeshToActorComponent
		constexpr auto MeshToRotate = 0xc8; // UMeshComponent*
		constexpr auto ActorToRotateTo = 0xd0; // AActor*
		constexpr auto CloseProximityRadius = 0xd8; // float
		constexpr auto Use2DDistanceForCloseProximityRadius = 0xdc; // bool
		constexpr auto WhenInCloseProximityKeepLastYaw = 0xdd; // bool
		constexpr auto RotationSpeed = 0xe0; // float
		constexpr auto PreventPitchModification = 0xe4; // bool
		constexpr auto MaxPitch = 0xe8; // float
		constexpr auto CloseProximityYawRotation = 0xec; // float
	}

	namespace n_UProceduralFoliageComponent { // : UActorComponent
		constexpr auto FoliageSpawner = 0xc8; // UProceduralFoliageSpawner*
		constexpr auto TileOverlap = 0xd0; // float
		constexpr auto SpawningVolume = 0xd8; // AVolume*
		constexpr auto ProceduralGuid = 0xe0; // FGuid
	}

	namespace n_UTaleQuestAddTradeRouteMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto TradeRouteData = 0x80; // FQuestVariableDataAsset
		constexpr auto VesselName = 0x90; // FQuestVariableText
		constexpr auto MapId = 0xa0; // FQuestVariableGuid
		constexpr auto ClueSiteToMapMarkIdMap = 0xb0; // UClueSiteTypeToMapMarkIdDataAsset*
	}

	namespace n_UClothingCategory { // : UCategoryBase
		constexpr auto PiratePreviewRemovals = 0x78; // TArray<UClothingCategory*>
		constexpr auto PiratePreviewAnim = 0x88; // UAnimationAsset*
		constexpr auto PiratePreviewCamera = 0x90; // FName
		constexpr auto PiratePreviewSpin = 0x98; // bool
	}

	namespace n_UShipwreckSiteGeneratorRandomEditorComponent { // : UShipwreckSiteGeneratorRandomComponent
		constexpr auto ShipwreckSize = 0x110; // float
		constexpr auto SphereSegments = 0x114; // int32_t
		constexpr auto ShipwreckColor = 0x118; // FColor
		constexpr auto EndOfWorldColor = 0x11c; // FColor
		constexpr auto EndOfWorldWarningColor = 0x120; // FColor
		constexpr auto ValidSpawnZoneColor = 0x124; // FColor
		constexpr auto IslandColor = 0x128; // FColor
	}

	namespace n_UEnchantedCompassProximityAnnouncementComponent { // : UActorComponent
		constexpr auto StartAnnouncingEvent = 0xc8; // UWwiseEvent*
		constexpr auto StopAnnouncingEvent = 0xd0; // UWwiseEvent*
		constexpr auto MaxFrequencyDistanceSquared = 0xd8; // float
		constexpr auto WielderOrientation = 0xe0; // TScriptInterface<Class>
		constexpr auto WielderWwiseEmitterInterface = 0xf0; // TScriptInterface<Class>
		constexpr auto OwnerWieldableInterface = 0x100; // TScriptInterface<Class>
		constexpr auto ObjectMessagingDispatcher = 0x110; // TScriptInterface<Class>
		constexpr auto IsSettingEnabled = 0x120; // bool
	}

	namespace n_UBTTask_SetRecoveryMethod { // : UBTTaskNode
		constexpr auto RecoveryMethod = 0x60; // UAICharacterRecoverMethod*
	}

	namespace n_UItemsByCategoryRadialContentRule { // : URadialContentRule
		constexpr auto RadialIconScale = 0xd0; // float
		constexpr auto RadialIconOffset = 0xd4; // FVector2D
		constexpr auto RemappingAsset = 0xe0; // UInventoryItemDescToSlotRemappingPolicyAsset*
		constexpr auto MappedSlots = 0xe8; // TArray<AItemInfo*>
		constexpr auto CustomItemCategory = 0xf8; // UItemCategory*
		constexpr auto CustomItemCategories = 0x100; // TArray<UItemCategory*>
	}

	namespace n_UUsableComponent { // : UActorComponent
		constexpr auto ActionVisuals = 0xd0; // FWieldableItemActionVisuals
		constexpr auto ActionVisualOverrides = 0xe8; // TArray<FActionVisualsOverride>
	}

	namespace n_AAshenLordWorldEndCloud { // : AActor
		constexpr auto SelfDestructDelayOnComplete = 0x3d0; // float
		constexpr auto CloudState = 0x3d4; // EAshenLordWorldEndCloudState
		constexpr auto CurrentCloudAnimation = 0x3d8; // FAshenLordWorldEndCloudAnimation
	}

	namespace n_AWieldableItemSetMockCharacter { // : ACharacter
		constexpr auto WieldableItemSetComponent = 0x5d8; // UWieldableItemSetComponent*
	}

	namespace n_USunkenCurseArtefactDynamicMaterialComponent { // : UActorComponent
		constexpr auto MaterialElementIndex = 0xc8; // uint32_t
		constexpr auto MagicColourPropertyName = 0xcc; // FName
		constexpr auto DamageLevelPropertyName = 0xd4; // FName
		constexpr auto TimeBasedPropertyName = 0xdc; // FName
		constexpr auto HitPositionPropertyName = 0xe4; // FName
		constexpr auto CollapseStartTimePropertyName = 0xec; // FName
		constexpr auto TargetMesh = 0xf8; // UPrimitiveComponent*
		constexpr auto DynamicMaterials = 0x100; // TArray<UMaterialInstanceDynamic*>
		constexpr auto Statue = 0x110; // AStatueThreatBase*
	}

	namespace n_UStatConditionTrackedShipTargetSelector { // : UStatConditionTargetSelector
		constexpr auto Target = 0x28; // EStatConditionTarget
	}

	namespace n_UMaterialInstanceConstant { // : UMaterialInstance
		constexpr auto PhysMaterial = 0x58; // UPhysicalMaterial*
		constexpr auto Parent = 0x60; // UMaterialInterface*
		constexpr auto bHasStaticPermutationResource = 0x68; // char : 1
		constexpr auto bOverrideSubsurfaceProfile = 0x68; // char : 1
		constexpr auto ParentLightingGuid = 0x70; // FGuid
		constexpr auto FontParameterValues = 0x80; // TArray<FFontParameterValue>
		constexpr auto ScalarParameterValues = 0x90; // TArray<FScalarParameterValue>
		constexpr auto TextureParameterValues = 0xa0; // TArray<FTextureParameterValue>
		constexpr auto VectorParameterValues = 0xb0; // TArray<FVectorParameterValue>
		constexpr auto BasePropertyOverrides = 0xc0; // FMaterialInstanceBasePropertyOverrides
	}

	namespace n_UOnboardingIntroLocationComponent { // : USceneComponent
		constexpr auto SpawnRotation = 0x2d8; // FRotator
	}

	namespace n_UTaleQuestGenerateClueSiteAtSeaLocationStepDesc { // : UTaleQuestStepDesc
		constexpr auto ApproximateLocation = 0x80; // FQuestVariableVector
		constexpr auto ClueSite = 0x90; // FQuestVariableClueSite
		constexpr auto ClueFactoryConfiguration = 0xa0; // UClueFactoryConfig*
	}

	namespace n_UPetRoamingAnimationStateDefinitionDataAsset { // : UDataAsset
		constexpr auto AnimationDefinitionData = 0x28; // FPetRoamingAnimationStateDefinition
	}

	namespace n_UTinySharkParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FTinySharkParams
	}

	namespace n_UIsCurrencyTypeStatCondition { // : UTargetedStatCondition
		constexpr auto TargetCurrency = 0x30; // EWalletCurrencyId
	}

	namespace n_UEncounterListenerComponent { // : UActorComponent
		constexpr auto EncounterListenerType = 0xc8; // EEncounterListenerType
	}

	namespace n_AVotableObjectView { // : AInteractableBase
		constexpr auto InteractableComponent = 0x408; // UInteractableComponent*
		constexpr auto VotableObject = 0x410; // UVotableBaseComponent*
		constexpr auto HoldToTriggerTime = 0x418; // float
		constexpr auto Voters = 0x420; // TArray<TScriptInterface<Class>>
	}

	namespace n_UAISpawnAndCondition { // : UAISpawnComplexCondition
		constexpr auto Conditions = 0x30; // TArray<UAISpawnOverrideCondition*>
	}

	namespace n_UTextureCube { // : UTexture
		constexpr auto LODBias = 0x28; // int32_t
		constexpr auto NumCinematicMipLevels = 0x2c; // int32_t
		constexpr auto SRGB = 0x30; // char : 1
		constexpr auto NeverStream = 0x30; // char : 1
		constexpr auto bNoTiling = 0x30; // char : 1
		constexpr auto bUseCinematicMipLevels = 0x30; // char : 1
		constexpr auto CompressionNone = 0x30; // char : 1
		constexpr auto bUAV = 0x30; // char : 1
		constexpr auto MaxQualityReduction = 0x34; // uint32_t
		constexpr auto CachedCombinedLODBias = 0x38; // int32_t
		constexpr auto bAsyncResourceReleaseHasBeenStarted = 0x3c; // char : 1
		constexpr auto CompressionSettings = 0x40; // TextureCompressionSettings
		constexpr auto Filter = 0x41; // TextureFilter
		constexpr auto LODGroup = 0x42; // TextureGroup
		constexpr auto StreamingPriorityBoost = 0x44; // float
		constexpr auto ExternalMips = 0xa0; // TArray<FExternalMip>
	}

	namespace n_UActorActivationComponent { // : UActorComponent
		constexpr auto ActivationDuration = 0xd0; // float
		constexpr auto DeactivationDuration = 0xd4; // float
		constexpr auto AutoDestroyOnDeactivation = 0xd8; // bool
		constexpr auto OnActorActivationRequested = 0xe0; // FScriptMulticastDelegate
		constexpr auto OnActorActivationCompleted = 0xf0; // FScriptMulticastDelegate
		constexpr auto OnActorDeactivationRequested = 0x100; // FScriptMulticastDelegate
		constexpr auto OnActorDeactivationCompleted = 0x110; // FScriptMulticastDelegate
	}

	namespace n_UTestCategory { // : UCategoryBase
		constexpr auto Name = 0x28; // FText
		constexpr auto UniqueTextIdentifier = 0x60; // FName
		constexpr auto IconPath = 0x68; // FStringAssetReference
	}

	namespace n_UImpactListDataAsset { // : UDataAsset
		constexpr auto MaxAudioEventsPerDischarge = 0x28; // int32_t
		constexpr auto ProjectileList = 0x30; // TArray<FImpactProjectileData>
	}

	namespace n_UTallTaleSpawnedActorComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UTestDoubleIntentComponent { // : UDoubleIntentComponent
		constexpr auto ServerFirstIntent = 0xd0; // float
		constexpr auto ServerSecondIntent = 0xd8; // float
	}

	namespace n_UStatConditionWieldedItemInfoTargetSelector { // : UStatConditionTargetSelector
		constexpr auto Target = 0x28; // EStatConditionTarget
	}

	namespace n_URichTextBlock { // : UWidget
		constexpr auto Text = 0x138; // FText
		constexpr auto TextDelegate = 0x170; // DelegateProperty
		constexpr auto Font = 0x180; // FSlateFontInfo
		constexpr auto Color = 0x1c0; // FLinearColor
		constexpr auto Justification = 0x1d0; // ETextJustify
		constexpr auto AutoWrapText = 0x1d1; // bool
		constexpr auto WrapTextAt = 0x1d4; // float
		constexpr auto Margin = 0x1d8; // FMargin
		constexpr auto LineHeightPercentage = 0x1e8; // float
		constexpr auto Decorators = 0x1f0; // TArray<URichTextBlockDecorator*>
	}

	namespace n_UKrakenAICharacterAudioComponent { // : UAICharacterAudioComponent
		constexpr auto AICharacterAudioParams = 0x2e0; // UKrakenAICharacterAudioComponentParams*
		constexpr auto KrakenBodyEmitter = 0x2e8; // FWwiseEmitter
	}

	namespace n_UInterpGroupInstDirector { // : UInterpGroupInst
		constexpr auto Group = 0x28; // UInterpGroup*
		constexpr auto GroupActor = 0x30; // AActor*
		constexpr auto TrackInst = 0x38; // TArray<UInterpTrackInst*>
	}

	namespace n_USoundNodeDoppler { // : USoundNode
		constexpr auto DopplerIntensity = 0x38; // float
	}

	namespace n_UMeshMemoryConstraintScoringObject { // : UObject
		constexpr auto ScoringName = 0x28; // FName
		constexpr auto ScoringFactor = 0x30; // float
	}

	namespace n_UMaterialExpressionCameraVectorWS { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_AAthenaTavernPlayerCharacterMock { // : AAthenaTavernPlayerCharacter
		constexpr auto StreamingLocationComponent = 0x1ac0; // UStreamingLocationComponent*
		constexpr auto ArenaTavernPetMovementData = 0x1ac8; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto PlayerController = 0x1b00; // AAthenaPlayerController*
		constexpr auto VoteForRivalsHasPassed = 0x1b28; // bool
	}

	namespace n_USkeletalStashedMeshMemoryConstraintComponent { // : USkeletalMeshMemoryConstraintComponent
		constexpr auto Handler = 0x9a8; // UMeshMemoryConstraintHandler*
		constexpr auto FallbackOverrideMaterials = 0x9b0; // TArray<FStringAssetReference>
		constexpr auto MeshFallbackCategory = 0x9c0; // UMeshMemoryConstraintCategory*
		constexpr auto MeshReference = 0x9c8; // FStringAssetReference
		constexpr auto CachedMeshResourceSize = 0x9d8; // int64_t
		constexpr auto MemoryAccountedFor = 0x9e0; // bool
		constexpr auto NeedMeshLoadOnServer = 0x9e1; // bool
		constexpr auto BudgetToCountMemoryAgainstIfNoFallback = 0x9e8; // UMeshMemoryConstraintBudget*
	}

	namespace n_UConfigurableBuryableItemComponent { // : UActorComponent
		constexpr auto NotBuryable = 0xd0; // bool
		constexpr auto DoNotMakeXMarkWhenBuried = 0xd1; // bool
		constexpr auto DoNotNotifyAndMigrateWithCrew = 0xd2; // bool
	}

	namespace n_UWeightedTreasureChestDescAsset { // : UDataAsset
		constexpr auto Rewards = 0x28; // TArray<FWeightedTreasureChestDesc>
	}

	namespace n_UBTTask_RunBehavior { // : UBTTaskNode
		constexpr auto BehaviorAsset = 0x60; // UBehaviorTree*
	}

	namespace n_UDamageableComponent { // : UActorComponent
		constexpr auto OnApplyDamage = 0xd8; // FScriptMulticastDelegate
		constexpr auto OnResetDamage = 0xe8; // FScriptMulticastDelegate
		constexpr auto OnNonDamageableImpactReceived = 0xf8; // FScriptMulticastDelegate
		constexpr auto FeatureFlag = 0x108; // FName
		constexpr auto Vulnerabilities = 0x110; // TArray<FDamageableVulnerabilityPair>
		constexpr auto BlockDamageVerification = 0x120; // bool
		constexpr auto AddedVulnerabilityLayer = 0x128; // UDamageableVulnerabilityLayer*
		constexpr auto VulnerabilityLayers = 0x130; // TMap<FName, UDamageableVulnerabilityLayer*>
	}

	namespace n_UReviveGhostAnimationData { // : UAnimationData
		constexpr auto ReviveAnimationsDataAsset = 0x28; // UReviveGhostAnimationDataAsset*
	}

	namespace n_UTaleQuestReactionStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMovieSceneSubSection { // : UMovieSceneSection
		constexpr auto Parameters = 0x98; // FMovieSceneSectionParameters
		constexpr auto StartOffset = 0xa8; // float
		constexpr auto TimeScale = 0xac; // float
		constexpr auto PrerollTime = 0xb0; // float
		constexpr auto SubSequence = 0xb8; // UMovieSceneSequence*
		constexpr auto ActorToRecord = 0xc0; // AActor*
		constexpr auto TargetSequenceName = 0xe0; // FString
		constexpr auto TargetPathToRecordTo = 0xf0; // FDirectoryPath
	}

	namespace n_UPhysicsHandleComponent { // : UActorComponent
		constexpr auto GrabbedComponent = 0xc8; // UPrimitiveComponent*
		constexpr auto LinearDamping = 0xe0; // float
		constexpr auto LinearStiffness = 0xe4; // float
		constexpr auto AngularDamping = 0xe8; // float
		constexpr auto AngularStiffness = 0xec; // float
		constexpr auto InterpolationSpeed = 0x150; // float
	}

	namespace n_UTaleWaitForSpireToLoadStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UWwiseEvent { // : UObject
		constexpr auto RequiredBank = 0x28; // UWwiseBank*
		constexpr auto WaitForBankToLoad = 0x30; // bool
		constexpr auto WwiseId = 0x34; // uint32_t
		constexpr auto DurationMin = 0x38; // float
		constexpr auto DurationMax = 0x3c; // float
		constexpr auto MaxAttenuation = 0x40; // float
		constexpr auto DurationType = 0x44; // EWwiseEventDurationType
		constexpr auto CookedIsStopEvent = 0x45; // bool
	}

	namespace n_USkeletalMeshAggregateTickComponent { // : UActorComponent
		constexpr auto Mesh = 0xc8; // USkeletalMeshComponent*
	}

	namespace n_UCharacterHitReactionDamagerTypeToAnimTypeLayer { // : UObject
		constexpr auto DamagerTypeToAnimTypePairs = 0x28; // TArray<FCharacterHitReactionDamagerTypeToAnimTypePair>
	}

	namespace n_UPlayerRelevancyService { // : UObject
		constexpr auto PendingRequests = 0x38; // TArray<FPlayerRelevancyRequest>
	}

	namespace n_AMeleeWeapon { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x7a0; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7a8; // UNamedNotificationInputComponent*
		constexpr auto TrailParticleSystem_FP = 0x7b0; // UParticleSystemComponent*
		constexpr auto TrailParticleSystem_TP = 0x7b8; // UParticleSystemComponent*
		constexpr auto DataAsset = 0x7c0; // UMeleeWeaponDataAsset*
		constexpr auto InventoryManipulator = 0x7c8; // UInventoryManipulatorComponent*
		constexpr auto CanUseWeaponToBlock = 0x7d0; // bool
		constexpr auto PreventCombosOnHealthChange = 0x7d1; // bool
		constexpr auto MaxAcceptableAttackTimeStampDelta = 0x838; // float
		constexpr auto MaxAcceptableAttackLocationDelta = 0x83c; // float
		constexpr auto MaxAcceptableAttackLocationOnShipDelta = 0x840; // float
		constexpr auto MaxAcceptableAttackShipVelocityForLocation = 0x844; // float
		constexpr auto WieldersAttackProcessor = 0x858; // UMeleeAttackProcessorComponent*
	}

	namespace n_UShipAnnouncementService { // : UObject
		constexpr auto WorldPtr = 0x30; // UWorld*
		constexpr auto ShipAnnouncementCooldownDuration = 0x38; // float
		constexpr auto ShipAnnouncementViewThresholdDegrees = 0x3c; // float
		constexpr auto ShipAnnouncementDistThreshold = 0x40; // float
		constexpr auto ShipAnnouncementCache = 0x48; // FShipAnnouncementCache
	}

	namespace n_UAthenaAudioModuleSettings { // : UDeveloperSettings
		constexpr auto AudioConfigAsset = 0x38; // FStringAssetReference
	}

	namespace n_UKrakenHeadStateAnimationsDataAsset { // : UDataAsset
		constexpr auto States = 0x28; // TArray<FKrakenHeadStateAnimationMapping>
	}

	namespace n_ASceneCaptureCube { // : ASceneCapture
		constexpr auto CaptureComponentCube = 0x3d8; // USceneCaptureComponentCube*
		constexpr auto DrawFrustum = 0x3e0; // UDrawFrustumComponent*
	}

	namespace n_UMaterialExpressionNoise { // : UMaterialExpression
		constexpr auto Position = 0x70; // FExpressionInput
		constexpr auto FilterWidth = 0xa8; // FExpressionInput
		constexpr auto Scale = 0xe0; // float
		constexpr auto Quality = 0xe4; // int32_t
		constexpr auto NoiseFunction = 0xe8; // ENoiseFunction
		constexpr auto bTurbulence = 0xec; // char : 1
		constexpr auto Levels = 0xf0; // int32_t
		constexpr auto OutputMin = 0xf4; // float
		constexpr auto OutputMax = 0xf8; // float
		constexpr auto LevelScale = 0xfc; // float
	}

	namespace n_ALightmassCharacterIndirectDetailVolume { // : AVolume
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UHullDamagePointProxy { // : UObject
		constexpr auto Repairable = 0x30; // URepairableComponent*
	}

	namespace n_AMusicalInstrument { // : AWieldableItem
		constexpr auto InstrumentType = 0x7a0; // EMusicalInstrumentType
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto PlayingCoolDownTime = 0x7b0; // float
		constexpr auto InstrumentDrunkennessRtpc = 0x7b4; // FName
		constexpr auto InstrumentUnderwaterRtpc = 0x7bc; // FName
		constexpr auto MaxUnderwaterRtpcFactor = 0x7c4; // float
		constexpr auto MinUnderwaterRtpcFactor = 0x7c8; // float
		constexpr auto PlayingAINoiseRange = 0x7cc; // float
		constexpr auto AINoiseEventInterval = 0x7d0; // float
		constexpr auto TriggerEffectActor = 0x7d8; // UObject*
		constexpr auto NamedNotificationInputComponent = 0x7e0; // UNamedNotificationInputComponent*
		constexpr auto AthenaPlayerCharacter = 0x7f0; // AAthenaPlayerCharacter*
	}

	namespace n_UNPCAnimInstance { // : UAnimInstance
		constexpr auto LeftHandObject = 0x458; // AActor*
		constexpr auto RightHandObject = 0x460; // AActor*
		constexpr auto HeldObjectList = 0x468; // UNPCHeldObjectData*
		constexpr auto NPCSkeletalMesh = 0x470; // USkeletalMeshComponent*
		constexpr auto InitialSpawnedCosmeticItems = 0x478; // TArray<AActor*>
		constexpr auto HitReactionState = 0x488; // FHitReactionAnimationState
		constexpr auto HitReactionData = 0x4b0; // FHitReactionAnimationData
		constexpr auto Active = 0x4b8; // bool
		constexpr auto Interacting = 0x4b9; // bool
		constexpr auto LookAtActive = 0x4ba; // bool
		constexpr auto CustomAnimationLookAtActive = 0x4bb; // bool
		constexpr auto LookAtIKAlpha = 0x4bc; // float
		constexpr auto LookAtEnabledInterpolationTime = 0x4c0; // float
		constexpr auto LookAtDisabledInterpolationTime = 0x4c4; // float
		constexpr auto DisableLookAt = 0x4c8; // bool
		constexpr auto NPCCustomAnimationData = 0x4d0; // UNPCCustomAnimationDataAsset*
		constexpr auto NPCCustomAnimationBlueprintData = 0x4d8; // FNPCCustomAnimationBlueprintData
		constexpr auto InitialSpawnedCosmeticItemsActive = 0x540; // bool
		constexpr auto NPCCustomAnimationCurrentMontage = 0x548; // UAnimMontage*
		constexpr auto NPCCustomAnimationCurrentFacialAdditiveMontage = 0x550; // UAnimMontage*
		constexpr auto IdleVariantAnims = 0x558; // TArray<UAnimSequence*>
		constexpr auto InactiveVariantAnims = 0x568; // TArray<UAnimSequence*>
		constexpr auto InteractVariantAnims = 0x578; // TArray<UAnimSequence*>
		constexpr auto NPCAllocatedIdleAnimations = 0x588; // FNPCAnimationIdlesVariantStruct
		constexpr auto PreviousCustomAnimationState = 0x5a8; // ENPCCustomAnimationState
		constexpr auto UseLookAt = 0x5a9; // bool
		constexpr auto LookAtPlayerPosition = 0x5ac; // FVector
		constexpr auto PlayerCharacterIsValid = 0x5b8; // bool
		constexpr auto IsPlayingSequencerAnim = 0x5b9; // bool
		constexpr auto InteractionRange = 0x5f4; // float
		constexpr auto PlayerCharacter = 0x5f8; // ACharacter*
	}

	namespace n_UIslandDataAsset { // : UDataAsset
		constexpr auto AllowDefaultIdentityTransform = 0x28; // bool
		constexpr auto SpawningGracePeriod = 0x2c; // float
		constexpr auto AncientSkeletonSpawner = 0x30; // UAISpawner*
		constexpr auto IslandDefaultDataEntries = 0x38; // TArray<UIslandDataDefaultAssetEntry*>
		constexpr auto IslandDataEntries = 0x48; // TArray<UIslandDataAssetEntry*>
	}

	namespace n_AAsymmetricObjectServerManager { // : AActor
		constexpr auto SpawnedObject = 0x3e8; // AAsymmetricClientObject*
		constexpr auto SceneComponent = 0x3f0; // USceneComponent*
		constexpr auto AsymmetricObjectAsset = 0x3f8; // FStringAssetReference
		constexpr auto ForcedAsymmetricObjectAsset = 0x408; // UClass*
	}

	namespace n_UHitRegSnapshotRedirectImpactToReplicatedMovementAttachParentComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UPiratePreviewComponent { // : UCoherentUIGTRenderToTextureLiveView
		constexpr auto DefaultCamera = 0x168; // FName
		constexpr auto ClassToSpawn = 0x170; // UClass*
		constexpr auto DefaultResolution = 0x190; // FIntPoint
		constexpr auto CurrentView = 0x198; // FPiratePreviewView
		constexpr auto CurrentlySuppressedCategories = 0x1b8; // TArray<UClothingCategory*>
		constexpr auto Details = 0x1e0; // URenderToTextureSceneDetails*
		constexpr auto ClothingLoadout = 0x1e8; // FClothingLoadout
	}

	namespace n_UParticleModuleKillBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UGenericPartDescAsset { // : UShipPartDescAsset
		constexpr auto GenericPartDesc = 0x28; // FGenericPartDesc
	}

	namespace n_UPacingComponentPublicData { // : UDataAsset
		constexpr auto PacingCameraCurve = 0x28; // UCurveFloat*
		constexpr auto PacingMovementSpeedModifier = 0x30; // float
		constexpr auto CameraCurveTToPlayRumble = 0x34; // float
		constexpr auto CameraCurveTToPlayFootstepSFX = 0x38; // float
		constexpr auto MinStickDeflectionToMove = 0x3c; // float
		constexpr auto CameraSpringAccel = 0x40; // float
		constexpr auto CamPitchScalar = 0x44; // float
		constexpr auto TakingAStepRumble = 0x48; // UForceFeedbackEffect*
		constexpr auto TakingAStepAudioStateEvent = 0x50; // UWwiseEvent*
		constexpr auto HitTestTraceChannel = 0x58; // ECollisionChannel
	}

	namespace n_UParticleModuleSize { // : UParticleModuleSizeBase
		constexpr auto bUseGroupAForAll = 0x50; // char : 1
		constexpr auto StartSize = 0x58; // FRawDistributionVector
		constexpr auto AdditionalStartSizes = 0x90; // FRawDistributionVector [0x5]
		constexpr auto bKeepAspectRatio = 0x1a8; // char : 1
		constexpr auto bIgnoreComponentScale = 0x1a8; // char : 1
	}

	namespace n_UVideoCaptureSettings { // : UFrameGrabberProtocolSettings
		constexpr auto bUseCompression = 0x30; // bool
		constexpr auto CompressionQuality = 0x34; // float
		constexpr auto VideoCodec = 0x38; // FString
	}

	namespace n_UTaleQuestToolService { // : UTaleQuestService
		constexpr auto ServiceDesc = 0x60; // UTaleQuestToolServiceDesc*
		constexpr auto WieldableDescs = 0x68; // TArray<UItemDesc*>
	}

	namespace n_UCursedSailsCampaignDataAsset { // : UDataAsset
		constexpr auto Battles = 0x28; // TArray<FCursedSailsBattleParams>
	}

	namespace n_USporeExposureComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ABurrowEruptArea { // : ABurrowEruptBase
		constexpr auto BurrowState = 0x3d0; // EBurrowEruptState
		constexpr auto ExplosionComponent = 0x3d8; // UExplosionComponent*
	}

	namespace n_UMeshMemoryConstraintHandler { // : UObject
		constexpr auto MeshOwner = 0x28; // AActor*
		constexpr auto MemoryConstrainedMeshComponent = 0x30; // TScriptInterface<Class>
		constexpr auto MeshAvailabilityComponent = 0x40; // TScriptInterface<Class>
		constexpr auto ChangeableMeshComponent = 0x50; // TScriptInterface<Class>
		constexpr auto CachedMesh = 0x70; // UObject*
		constexpr auto CachedMeshName = 0x78; // FName
	}

	namespace n_UAnimNotify_PlayMontage { // : UAnimNotify
		constexpr auto MontageToPlay = 0x38; // UAnimMontage*
	}

	namespace n_AWallClock { // : AActor
		constexpr auto ClockMesh = 0x3d0; // UPoseableMeshComponent*
		constexpr auto MinuteHandBoneName = 0x3d8; // FName
		constexpr auto HourHandBoneName = 0x3e0; // FName
		constexpr auto ClockTimeUpdateRateInSeconds = 0x3e8; // float
		constexpr auto MeshRotationCorrection = 0x3ec; // float
		constexpr auto ClockMeshDynamicMaterialInstance = 0x428; // UMaterialInstanceDynamic*
	}

	namespace n_USpawnLocationKeywordPriorityListAsset { // : UDataAsset
		constexpr auto PriorityKeywords = 0x28; // TArray<FString>
	}

	namespace n_UInstrumentItemCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UIslandMechanismSelectionComponent { // : UActorComponent
		constexpr auto MechanismGroups = 0xc8; // TArray<AMechanismGroup*>
		constexpr auto FeatureToggledMechanismGroups = 0xd8; // TArray<FFeatureToggledMechanismGroups>
		constexpr auto CoolDownDuration = 0xe8; // float
		constexpr auto EnableRandomSelection = 0xec; // bool
		constexpr auto MechanismGroupsToSelect = 0xf0; // FWeightedProbabilityRangeOfRanges
		constexpr auto SelectedMechanismGroups = 0x120; // TArray<AMechanismGroup*>
	}

	namespace n_USoundNodeAssetReferencer { // : USoundNode
		constexpr auto ChildNodes = 0x28; // TArray<USoundNode*>
	}

	namespace n_UGameplayAbilityBlueprint { // : UBlueprint
		constexpr auto bRecompileOnLoad = 0x50; // char : 1
		constexpr auto ParentClass = 0x58; // UObject*
		constexpr auto PRIVATE_InnermostPreviousCDO = 0x60; // UObject*
		constexpr auto bHasBeenRegenerated = 0x68; // char : 1
		constexpr auto bIsRegeneratingOnLoad = 0x68; // char : 1
		constexpr auto SimpleConstructionScript = 0x70; // USimpleConstructionScript*
		constexpr auto ComponentTemplates = 0x78; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x88; // TArray<UTimelineTemplate*>
		constexpr auto InheritableComponentHandler = 0x98; // UInheritableComponentHandler*
		constexpr auto BlueprintType = 0xa0; // EBlueprintType
		constexpr auto BlueprintSystemVersion = 0xa4; // int32_t
	}

	namespace n_UAppliedStatusToSelfStatCondition { // : UTargetedStatCondition
		constexpr auto Status = 0x30; // TArray<UStatusBase*>
		constexpr auto ComparisonMode = 0x40; // EStatusComparisonMode
	}

	namespace n_UCutsceneResponseCoordinator { // : UObject
		constexpr auto SuppressResponses = 0x38; // bool
		constexpr auto WorldContextObject = 0x40; // UObject*
	}

	namespace n_UVulnerabilityDuringAIStrategyComponent { // : UActorComponent
		constexpr auto StrategyVulnerabilities = 0xc8; // TArray<FAIStrategyVulnerabilityData>
		constexpr auto HealthComponent = 0xd8; // UHealthComponent*
	}

	namespace n_UMeleeAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto MeleeAttacks = 0xc8; // TArray<FMeleeAttackIdWeights>
	}

	namespace n_UIsAnEmissaryStatCondition { // : UTargetedStatCondition
		constexpr auto TargetSelector = 0x28; // UStatConditionTargetSelector*
	}

	namespace n_UBTTask_ExecuteAIAbility { // : UBTTaskNode
		constexpr auto AIAbilityType = 0x60; // UAthenaAIAbilityType*
	}

	namespace n_AShipSpawnLocation { // : AActor
		constexpr auto LinkedShipSpawnLocations = 0x3d0; // TArray<AShipSpawnLocation*>
		constexpr auto AssociatedSpawnLocations = 0x3e0; // TArray<ASpawnLocation*>
		constexpr auto ShipSize = 0x3f0; // UShipSize*
		constexpr auto Description = 0x3f8; // FString
		constexpr auto BoxComponent = 0x408; // UBoxComponent*
	}

	namespace n_AController { // : AActor
		constexpr auto Pawn = 0x3d8; // APawn*
		constexpr auto Character = 0x3e8; // ACharacter*
		constexpr auto PlayerState = 0x3f0; // APlayerState*
		constexpr auto TransformComponent = 0x3f8; // USceneComponent*
		constexpr auto ControlRotation = 0x400; // FRotator
		constexpr auto bAttachToPawn = 0x40c; // char : 1
		constexpr auto StateName = 0x418; // FName
		constexpr auto OnInstigatedAnyDamage = 0x420; // FScriptMulticastDelegate
	}

	namespace n_ARecastNavMesh { // : ANavigationData
		constexpr auto bDrawTriangleEdges = 0x590; // char : 1
		constexpr auto bDrawPolyEdges = 0x590; // char : 1
		constexpr auto bDrawFilledPolys = 0x590; // char : 1
		constexpr auto bDrawNavMeshEdges = 0x590; // char : 1
		constexpr auto bDrawTileBounds = 0x590; // char : 1
		constexpr auto bDrawPathCollidingGeometry = 0x590; // char : 1
		constexpr auto bDrawTileLabels = 0x590; // char : 1
		constexpr auto bDrawPolygonLabels = 0x590; // char : 1
		constexpr auto bDrawDefaultPolygonCost = 0x591; // char : 1
		constexpr auto bDrawLabelsOnPathNodes = 0x591; // char : 1
		constexpr auto bDrawNavLinks = 0x591; // char : 1
		constexpr auto bDrawFailedNavLinks = 0x591; // char : 1
		constexpr auto bDrawClusters = 0x591; // char : 1
		constexpr auto bDrawOctree = 0x591; // char : 1
		constexpr auto bDistinctlyDrawTilesBeingBuilt = 0x591; // char : 1
		constexpr auto bDrawNavMesh = 0x591; // char : 1
		constexpr auto DrawOffset = 0x594; // float
		constexpr auto BuiltTileSizeUU = 0x598; // float
		constexpr auto BuiltCellSize = 0x59c; // float
		constexpr auto bFixedTilePoolSize = 0x5a0; // char : 1
		constexpr auto TilePoolSize = 0x5a4; // int32_t
		constexpr auto TileSizeUU = 0x5a8; // float
		constexpr auto CellSize = 0x5ac; // float
		constexpr auto CellHeight = 0x5b0; // float
		constexpr auto AgentRadius = 0x5b4; // float
		constexpr auto AgentHeight = 0x5b8; // float
		constexpr auto AgentMaxHeight = 0x5bc; // float
		constexpr auto AgentMaxSlope = 0x5c0; // float
		constexpr auto AgentMaxStepHeight = 0x5c4; // float
		constexpr auto MinRegionArea = 0x5c8; // float
		constexpr auto MergeRegionSize = 0x5cc; // float
		constexpr auto MaxSimplificationError = 0x5d0; // float
		constexpr auto MaxSimultaneousTileGenerationJobsCount = 0x5d4; // int32_t
		constexpr auto TileNumberHardLimit = 0x5d8; // int32_t
		constexpr auto PolyRefTileBits = 0x5dc; // int32_t
		constexpr auto PolyRefNavPolyBits = 0x5e0; // int32_t
		constexpr auto PolyRefSaltBits = 0x5e4; // int32_t
		constexpr auto DefaultDrawDistance = 0x5e8; // float
		constexpr auto DefaultMaxSearchNodes = 0x5ec; // float
		constexpr auto DefaultMaxHierarchicalSearchNodes = 0x5f0; // float
		constexpr auto RegionPartitioning = 0x5f4; // ERecastPartitioning
		constexpr auto LayerPartitioning = 0x5f5; // ERecastPartitioning
		constexpr auto RegionChunkSplits = 0x5f8; // int32_t
		constexpr auto LayerChunkSplits = 0x5fc; // int32_t
		constexpr auto bSortNavigationAreasByCost = 0x600; // char : 1
		constexpr auto bPerformVoxelFiltering = 0x600; // char : 1
		constexpr auto bMarkLowHeightAreas = 0x600; // char : 1
		constexpr auto bDoFullyAsyncNavDataGathering = 0x600; // char : 1
		constexpr auto bUseBetterOffsetsFromCorners = 0x600; // char : 1
		constexpr auto bUseVirtualFilters = 0x600; // char : 1
		constexpr auto bUseVoxelCache = 0x600; // char : 1
		constexpr auto TileSetUpdateInterval = 0x604; // float
		constexpr auto HeuristicScale = 0x608; // float
		constexpr auto VerticalDeviationFromGroundCompensation = 0x60c; // float
	}

	namespace n_ALiquidProjectile { // : ALaunchableProjectile
		constexpr auto ObjectTypeChannelToEnableInShip = 0x608; // ECollisionChannel
		constexpr auto DousingParameters = 0x610; // UFireGridCellSelectionParamsDataAsset*
		constexpr auto StatusesToApply = 0x618; // TArray<FStatus>
		constexpr auto LiquidProjectileNoiseTag = 0x628; // FName
		constexpr auto LiquidProjectileNoiseRadius = 0x630; // float
		constexpr auto Contents = 0x638; // FLiquidContents
	}

	namespace n_UDiscardTransientActorStep { // : UTaleQuestStep
		constexpr auto Desc = 0x88; // UDiscardTransientActorStepDesc*
	}

	namespace n_UStartEmissaryVoyageInlineVoteValidator { // : UEmissaryVoyageVoteValidatorBase
		constexpr auto TargetCompany = 0x30; // UCompany*
		constexpr auto RequiredEntitlement = 0x38; // UEntitlementDesc*
		constexpr auto Consumer = 0xa0; // UEmissaryVoyageInlineVoteConsumerBase*
	}

	namespace n_AExponentialHeightFog { // : AInfo
		constexpr auto Component = 0x3d0; // UExponentialHeightFogComponent*
		constexpr auto bEnabled = 0x3d8; // char : 1
	}

	namespace n_UMaterialExpressionAbs { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
	}

	namespace n_UAIBountySpawner { // : UAISpawner
		constexpr auto MaximumDistanceToPerceiveOnSpawnsAfterFirstGroup = 0x428; // float
		constexpr auto WaveGroups = 0x430; // TArray<FAIBountySpawnerWaveGroup>
		constexpr auto TeamColor = 0x440; // FStringAssetReference
		constexpr auto WavesPerRelocate = 0x450; // FWeightedProbabilityRange
		constexpr auto WaveSplitChance = 0x470; // FWeightedProbabilityRange
		constexpr auto WaveSuicideTime = 0x490; // TArray<float>
		constexpr auto WaveSuicideMinDist = 0x4a0; // float
		constexpr auto ImmediatelyPerceiveTargets = 0x4a4; // bool
		constexpr auto ActiveCombatDialogue = 0x4a8; // UAICombatDialogue*
		constexpr auto CrewMembers = 0x4d8; // TArray<AActor*>
		constexpr auto NonCrewMembersInRegion = 0x4e8; // TArray<AActor*>
		constexpr auto AllParticipatingPlayers = 0x4f8; // TArray<AActor*>
		constexpr auto AudioZoneTriggerComponent = 0x508; // UOverlapTriggerComponent*
	}

	namespace n_ATestProjectileWeapon { // : AProjectileWeapon
		constexpr auto TestProjectileWeaponParameters = 0xa58; // FTestProjectileWeaponParameters
		constexpr auto RequestDeniedCount = 0xa5c; // int32_t
		constexpr auto FireProjectilesCallCount = 0xa60; // int32_t
		constexpr auto HitPredictedCount = 0xa64; // int32_t
		constexpr auto HitAuthorityCount = 0xa68; // int32_t
		constexpr auto ProcessHitsAuthorityCallCount = 0xa6c; // int32_t
		constexpr auto OnWeaponFiredCalled = 0xa70; // bool
		constexpr auto AttackId = 0xa74; // FGuid
		constexpr auto ActorsHits = 0xa88; // TArray<AActor*>
		constexpr auto PhysicsMaterials = 0xa98; // TArray<UPhysicalMaterial*>
		constexpr auto LastProjectileAim = 0xab0; // FProjectileAim
	}

	namespace n_URemoveNPCOnShipStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ULevelReward { // : UReward
		constexpr auto Level = 0x28; // uint32_t
	}

	namespace n_AAthenaSwimmingAIController { // : AAthenaAIController
		constexpr auto SwimmingPathFollowingComponent = 0x8f8; // USwimmingPathFollowingComponent*
		constexpr auto IgnoreTargetsOutOfWater = 0x900; // bool
		constexpr auto DistOfAttackerVsChanceToPursue = 0x908; // UCurveFloat*
		constexpr auto TimersToZeroIfStartingRevengeAttack = 0x910; // TArray<FName>
		constexpr auto DespawnRequiredBlackboardKey = 0x920; // FName
		constexpr auto DespawnRequiredReasonBlackboardKey = 0x928; // FName
		constexpr auto PathingFailedWeight = 0x930; // float
		constexpr auto PathingFailedThresholdToDespawn = 0x934; // float
	}

	namespace n_USignalMechanismTargetComponent { // : UMechanismTriggerComponent
		constexpr auto TargetLocationRelativeToOwner = 0x158; // FVector
	}

	namespace n_UContestRewardComponent { // : UActorComponent
		constexpr auto CachedOwningContestManager = 0x110; // TWeakObjectPtr<AContestManagerService>
	}

	namespace n_UKrakenAnimatedTentacleAnimationSpecDataAsset { // : UDataAsset
		constexpr auto Bones = 0x28; // TArray<FKrakenAnimatedTentacleAnimationSpecBone>
	}

	namespace n_UProgressWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto ProgressBarStyle = 0x30; // FProgressBarStyle
	}

	namespace n_UWaterSlidePlayerComponent { // : UDoubleIntentComponent
		constexpr auto PlayerWaterSlideSplashingVFXComponent = 0xe8; // UParticleSystemComponent*
		constexpr auto PlayerWaterSlideSplashingVFX = 0xf0; // UParticleSystem*
		constexpr auto SpawnLocationZOffset = 0xf8; // float
		constexpr auto CurrentWaterSlide = 0x110; // AWaterSlide*
	}

	namespace n_URemoveCriticalActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto ActorVar = 0x80; // FQuestVariableActor
	}

	namespace n_UAthenaUserSettingsDefaults { // : UObject
		constexpr auto MaxFPSOptions = 0x28; // TArray<int32_t>
		constexpr auto AimSensitivitySettings = 0x38; // FAimSensitivitySettingsDefaults
	}

	namespace n_UTaleQuestAddTornMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto IslandName = 0x80; // FQuestVariableName
		constexpr auto NumberOfPieces = 0x90; // FQuestVariableInt
		constexpr auto MapParams = 0xa0; // FQuestVariableDataAsset
		constexpr auto MapId = 0xb0; // FQuestVariableGuid
	}

	namespace n_UIslandEventTooltipComponent { // : UActorComponent
		constexpr auto CachedTooltipData = 0xd8; // TArray<FIslandEventTooltipData>
		constexpr auto TooltipOffsetRatio = 0xe8; // FVector2D
		constexpr auto FadeDuration = 0xf0; // float
		constexpr auto ShowTooltipText = 0xf8; // FText
		constexpr auto HideTooltipText = 0x130; // FText
	}

	namespace n_ATestSkeletalWieldableInventoryItem { // : ASkeletalMeshWieldableItem
		constexpr auto InventoryItem = 0x790; // UInventoryItemComponent*
	}

	namespace n_UParticleModuleCameraBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_AItemSpawnTelemetryDispatchingItemInfo { // : AItemInfo
		constexpr auto ItemId = 0x520; // FGuid
	}

	namespace n_USirenEncounterSpawnBlockingBehaviourStrategy { // : UBaseSpawnBlockingBehaviourStrategy
		constexpr auto ChanceToSpawn = 0x48; // float
	}

	namespace n_UFishingInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UBTService_DetermineRecoveryMethod { // : UBTService
		constexpr auto TimeToForgetAfterSuccessfulFlee = 0x70; // float
		constexpr auto CachedAICharacterController = 0x78; // AAthenaAICharacterController*
	}

	namespace n_UCachedResourceProviderComponent { // : UResourceProviderComponent
		constexpr auto Cache = 0xe8; // UResourceCache*
	}

	namespace n_AOnlineBeaconClient { // : AOnlineBeacon
		constexpr auto BeaconOwner = 0x3f8; // AOnlineBeaconHostObject*
		constexpr auto BeaconConnection = 0x400; // UNetConnection*
		constexpr auto ConnectionState = 0x408; // EBeaconConnectionState
	}

	namespace n_UCrewSessionConfig { // : UObject
		constexpr auto SessionTemplates = 0x28; // TArray<FCrewSessionTemplate>
	}

	namespace n_UQuestBootyItemPopUpAsset { // : UDataAsset
		constexpr auto PopUpDescEntries = 0x28; // TArray<FQuestBootyItemPopUpEntry>
	}

	namespace n_UCharacterAudioFootfallControllerParams { // : UDataAsset
		constexpr auto PlayerSpeedRtpcName = 0x28; // FName
		constexpr auto MinPlayerSpeedRtpcValue = 0x30; // float
		constexpr auto MaxPlayerSpeedRtpcValue = 0x34; // float
		constexpr auto WadingRtpcName = 0x38; // FName
		constexpr auto MinWadingWwiseRtpcValue = 0x40; // float
		constexpr auto MaxWadingWwiseRtpcValue = 0x44; // float
		constexpr auto FootstepSquelchRtpcName = 0x48; // FName
		constexpr auto PlayerPerspectiveRtpcName = 0x50; // FName
		constexpr auto PlayerPerspectiveRtpcValue = 0x58; // float
		constexpr auto RemotePlayerPerspectiveRtpcValue = 0x5c; // float
		constexpr auto FootfallEvent = 0x60; // UWwiseEvent*
		constexpr auto FootfallPacingEvent = 0x68; // UWwiseEvent*
		constexpr auto CharacterCleanLandEvent = 0x70; // UWwiseEvent*
		constexpr auto CharacterJumpEvent = 0x78; // UWwiseEvent*
		constexpr auto CharacterSplashEvent = 0x80; // UWwiseEvent*
		constexpr auto FootfallsPool = 0x88; // UWwiseObjectPoolWrapper*
		constexpr auto VerticalSpeedRtpcName = 0x90; // FName
		constexpr auto MinVerticalSpeedRtpcValue = 0x98; // float
		constexpr auto MaxVerticalSpeedRtpcValue = 0x9c; // float
		constexpr auto BrokenLegSwitchGroup = 0xa0; // FName
		constexpr auto BrokenLegSwitchBroken = 0xa8; // FName
		constexpr auto FootwareCategorySwitchGroup = 0xb0; // FName
		constexpr auto FootwareCategoryBoots = 0xb8; // FName
		constexpr auto FootwareCategoryBarefoot = 0xc0; // FName
		constexpr auto FootwareCategoryPegleg = 0xc8; // FName
		constexpr auto FootfallEmoteSwitchGroup = 0xd0; // FName
		constexpr auto PlayingEmoteSwitch = 0xd8; // FName
		constexpr auto HotFloorSwitchGroup = 0xe0; // FName
		constexpr auto HotFloorActive = 0xe8; // FName
		constexpr auto FootfallBuriedTreasureRTPCName = 0xf0; // FName
		constexpr auto DecalOverlapRadius = 0xf8; // float
		constexpr auto SteppingOnDecalRTPCValue = 0xfc; // float
		constexpr auto NotSteppingOnDecalRTPCValue = 0x100; // float
	}

	namespace n_UGlitterBeardEntitlementDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_USetCanReceiveBuffStatusResponse { // : UStatusResponse
		constexpr auto LockBuffReceiver = 0x30; // bool
		constexpr auto RevertOnDeactivate = 0x31; // bool
	}

	namespace n_UMaterialExpressionTextureSampleParameter2D { // : UMaterialExpressionTextureSampleParameter
		constexpr auto ParameterName = 0x1a8; // FName
		constexpr auto ExpressionGUID = 0x1b0; // FGuid
		constexpr auto Group = 0x1c0; // FName
	}

	namespace n_AMythicalMerchantCrateItemInfoMock { // : AMerchantCrateItemInfoMock
		constexpr auto FaunaBreedRarity = 0x710; // TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry>
		constexpr auto CurrentShip = 0x778; // AActor*
	}

	namespace n_UPlayerActivityLifetimeRuleCatalogueDataAsset { // : UDataAsset
		constexpr auto PlayerActivityLifetimeRules = 0x28; // TArray<FPlayerActivityLifetimeRule>
	}

	namespace n_AMapFixtureTestGameMode { // : AGameMode
		constexpr auto bDisableAsyncOcclusionChecking = 0x3d8; // char : 1
		constexpr auto bUseSeamlessTravel = 0x3d8; // char : 1
		constexpr auto bPauseable = 0x3d8; // char : 1
		constexpr auto bStartPlayersAsSpectators = 0x3d8; // char : 1
		constexpr auto bDelayedStart = 0x3d8; // char : 1
		constexpr auto OptionsString = 0x3e0; // FString
		constexpr auto DefaultPawnClass = 0x3f0; // APawn*
		constexpr auto HUDClass = 0x3f8; // AHUD*
		constexpr auto NumSpectators = 0x400; // int32_t
		constexpr auto NumPlayers = 0x404; // int32_t
		constexpr auto NumBots = 0x408; // int32_t
		constexpr auto MinRespawnDelay = 0x40c; // float
		constexpr auto GameSession = 0x410; // AGameSession*
		constexpr auto NumTravellingPlayers = 0x418; // int32_t
		constexpr auto DefaultPlayerName = 0x420; // FText
		constexpr auto EngineMessageClass = 0x458; // ULocalMessage*
		constexpr auto PlayerControllerClass = 0x460; // APlayerController*
		constexpr auto SpectatorClass = 0x468; // ASpectatorPawn*
		constexpr auto ReplaySpectatorPlayerControllerClass = 0x470; // APlayerController*
		constexpr auto PlayerStateClass = 0x478; // APlayerState*
		constexpr auto GameStateClass = 0x480; // AGameState*
		constexpr auto GameState = 0x488; // AGameState*
		constexpr auto InactivePlayerArray = 0x490; // TArray<APlayerState*>
		constexpr auto GameModeClassAliases = 0x4b0; // TArray<FGameClassShortName>
		constexpr auto InactivePlayerStateLifeSpan = 0x4c0; // float
		constexpr auto bHandleDedicatedServerReplays = 0x4c4; // bool
	}

	namespace n_UImageCaptureSettings { // : UFrameGrabberProtocolSettings
		constexpr auto CompressionQuality = 0x30; // int32_t
	}

	namespace n_USpeakToActorConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UPetEntitlementCategory { // : UPetEntitlementBaseCategory
		constexpr auto PetPreviewCamera = 0x80; // FName
	}

	namespace n_ADockableBase { // : AControllableObject
		constexpr auto SkeletalMeshComponent = 0x508; // USkeletalMeshComponent*
		constexpr auto DetachCutOffTime = 0x510; // float
		constexpr auto FirstPersonLevelSequenceToPlay = 0x518; // ULevelSequence*
		constexpr auto ShouldInteractorDock = 0x520; // bool
		constexpr auto InteractableComponent = 0x528; // UInteractableComponent*
		constexpr auto DockableCutsceneName = 0x530; // FText
		constexpr auto InteractWithCutsceneText = 0x568; // FText
		constexpr auto DockingSocketName = 0x5a0; // FName
	}

	namespace n_ULoadSequencerAnimationStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // ULoadSequencerAnimationStepDesc*
		constexpr auto SequencerCutSceneActor = 0x98; // ASequencerCutSceneActor*
		constexpr auto TargetToSpawnActor = 0xa0; // AActor*
	}

	namespace n_UWheelAnimInstance { // : UAnimInstance
		constexpr auto WheelRotation = 0x440; // FRotator
		constexpr auto WheelTime = 0x44c; // float
		constexpr auto AnimationType = 0x450; // EWheelAnimationType
		constexpr auto IsAnimationTypeLeftTurnFast = 0x454; // char : 1
		constexpr auto IsAnimationTypeRightTurnFast = 0x454; // char : 1
		constexpr auto IsAnimationTypeRightTurnMid = 0x454; // char : 1
		constexpr auto IsAnimationTypeLeftTurnMid = 0x454; // char : 1
		constexpr auto IsAnimationTypeSmallTurn = 0x454; // char : 1
		constexpr auto IsTurningLeft = 0x454; // char : 1
		constexpr auto IsTurningRight = 0x454; // char : 1
		constexpr auto WheelPartScales = 0x458; // FWheelPartsScales
	}

	namespace n_UTallTaleContestRecipeDataAsset { // : UVoyageDescDataAsset
		constexpr auto WeightedContestZonesToActivate = 0x168; // FContestZoneDistribution
		constexpr auto AvailableIslandArchetypes = 0x178; // TArray<FContestIslandArchetype>
		constexpr auto ContestVoyageTime = 0x188; // FContestTimerData
		constexpr auto ScoreSystemToLoad = 0x1a0; // FStringClassReference
	}

	namespace n_ARotatingBlockPuzzle { // : APuzzleMechanism
		constexpr auto StaticMesh = 0x470; // UPrimitiveComponent*
		constexpr auto Position1Decal = 0x478; // UDecalComponent*
		constexpr auto Position2Decal = 0x480; // UDecalComponent*
		constexpr auto Position3Decal = 0x488; // UDecalComponent*
		constexpr auto Position4Decal = 0x490; // UDecalComponent*
		constexpr auto InteractVFXLocations = 0x498; // TArray<FTransform>
		constexpr auto InteractVFX = 0x4a8; // UObject*
		constexpr auto BlockName = 0x4b0; // FText
		constexpr auto DefaultMaterialInstance = 0x4e8; // UMaterialInterface*
		constexpr auto MaterialBlendInTime = 0x4f0; // float
		constexpr auto MaterialBlendOutTime = 0x4f4; // float
		constexpr auto IncorrectPulseDuration = 0x4f8; // float
		constexpr auto PuzzleVaultAudioParams = 0x500; // UPuzzleVaultAudioParams*
		constexpr auto CorrectPostion = 0x508; // int32_t
		constexpr auto RotationSpeed = 0x50c; // float
		constexpr auto CurrentPosition = 0x510; // int32_t
	}

	namespace n_UPersistentSalvageItemSpawnComponent { // : USalvageItemSpawnComponent
		constexpr auto RefreshItemsRate = 0x548; // float
	}

	namespace n_UAIPerPlayerSpawner { // : UAISpawner
		constexpr auto CheckSpawnedActorsInRadiusBeforeSpawning = 0x428; // bool
		constexpr auto RadiusToCheckForExistingPopulation = 0x42c; // float
		constexpr auto MaxExistingPopulationInRadius = 0x430; // int32_t
		constexpr auto DespawnAllPawnsWhenAllPlayersLeave = 0x434; // bool
		constexpr auto MaxActorsTotalPerPlayer = 0x438; // int32_t
		constexpr auto RunSimulation = 0x43c; // bool
		constexpr auto RankForSimulation = 0x440; // int32_t
		constexpr auto NumIterations = 0x444; // int32_t
		constexpr auto WantsToTemporarilyRememberPlayers = 0x448; // bool
		constexpr auto TemporaryPlayerMemoryTimeRange = 0x450; // FWeightedProbabilityRangeOfRanges
		constexpr auto PlayerDetails = 0x568; // TMap<AActor*, FAIPerPlayerSpawnerPlayerDetailsUnit>
		constexpr auto TemporaryPlayerDetails = 0x5b8; // TMap<AController*, FTemporaryPlayerDetailsUnitEntry>
	}

	namespace n_AVectorFieldVolume { // : AActor
		constexpr auto VectorFieldComponent = 0x3d0; // UVectorFieldComponent*
	}

	namespace n_UAthenaPlayerZonePenetrationTrackerComponent { // : UActorComponent
		constexpr auto OverlapType = 0xd0; // EOverlapType
		constexpr auto UpdateInterval = 0xd4; // float
		constexpr auto ShapeComponent = 0xd8; // UShapeComponent*
		constexpr auto PlayersInZone = 0xe0; // TArray<AAthenaPlayerCharacter*>
	}

	namespace n_ADestructibleActor { // : AActor
		constexpr auto DestructibleComponent = 0x3d0; // UDestructibleComponent*
		constexpr auto bAffectNavigation = 0x3d8; // char : 1
		constexpr auto OnActorFracture = 0x3e0; // FScriptMulticastDelegate
	}

	namespace n_UItemDescSpawnData { // : UItemSpawnData
		constexpr auto ItemDesc = 0x58; // UClass*
	}

	namespace n_UMovieSceneFloatSection { // : UMovieSceneSection
		constexpr auto FloatCurve = 0xa0; // FRichCurve
	}

	namespace n_UTileView { // : UTableViewBase
		constexpr auto ItemWidth = 0x138; // float
		constexpr auto ItemHeight = 0x13c; // float
		constexpr auto Items = 0x140; // TArray<UObject*>
		constexpr auto SelectionMode = 0x150; // ESelectionMode
		constexpr auto OnGenerateTileEvent = 0x154; // DelegateProperty
	}

	namespace n_UCoherentUIGTTooltipDetailedComponent { // : UCoherentUIGTAtlasComponent
		constexpr auto CurrentCanvas = 0x388; // UCanvas*
	}

	namespace n_UDeferralReasonPopUpNotificationDataAsset { // : UDataAsset
		constexpr auto FeatureToggle = 0x28; // FName
		constexpr auto DeferralReasonPopUpNotifications = 0x30; // TArray<FDeferralReasonPopUpNotificationInfo>
	}

	namespace n_UMaterialExpressionSpeedTree { // : UMaterialExpression
		constexpr auto GeometryType = 0x70; // ESpeedTreeGeometryType
		constexpr auto WindType = 0x71; // ESpeedTreeWindType
		constexpr auto LODType = 0x72; // ESpeedTreeLODType
		constexpr auto BillboardThreshold = 0x74; // float
		constexpr auto bAccurateWindVelocities = 0x78; // bool
	}

	namespace n_UOnItemWieldedComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ALanternWieldableReplica { // : AStaticMeshWieldableReplica
		constexpr auto LanternLightColour = 0x518; // FLinearColor
		constexpr auto LanternGlowColour = 0x528; // FLinearColor
		constexpr auto LanternFlameColour = 0x538; // FLinearColor
		constexpr auto LightComponent = 0x548; // USpotLightComponent*
		constexpr auto AmbientLightSourceComponent = 0x550; // UAmbientLightSourceComponent*
	}

	namespace n_APlayerMeleeWeapon { // : AMeleeWeapon
		constexpr auto InventoryItem = 0x7a0; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7a8; // UNamedNotificationInputComponent*
		constexpr auto TrailParticleSystem_FP = 0x7b0; // UParticleSystemComponent*
		constexpr auto TrailParticleSystem_TP = 0x7b8; // UParticleSystemComponent*
		constexpr auto DataAsset = 0x7c0; // UMeleeWeaponDataAsset*
		constexpr auto InventoryManipulator = 0x7c8; // UInventoryManipulatorComponent*
		constexpr auto CanUseWeaponToBlock = 0x7d0; // bool
		constexpr auto PreventCombosOnHealthChange = 0x7d1; // bool
		constexpr auto MaxAcceptableAttackTimeStampDelta = 0x838; // float
		constexpr auto MaxAcceptableAttackLocationDelta = 0x83c; // float
		constexpr auto MaxAcceptableAttackLocationOnShipDelta = 0x840; // float
		constexpr auto MaxAcceptableAttackShipVelocityForLocation = 0x844; // float
		constexpr auto WieldersAttackProcessor = 0x858; // UMeleeAttackProcessorComponent*
	}

	namespace n_UVoyageDescList { // : UDataAsset
		constexpr auto Tales = 0x28; // TArray<UVoyageDescDataAsset*>
	}

	namespace n_ATeleportStatue { // : ARespawnStatue
		constexpr auto LinkedCheckpoint = 0x478; // ASpawnProgressTriggerVolume*
		constexpr auto LinkedCheckpointActionRuleDescription = 0x498; // FText
		constexpr auto LinkedCheckpointWithLargeItemActionRuleDescription = 0x4d0; // FText
	}

	namespace n_UBTDecorator_PetFoodSourceAvailable { // : UBTDecorator_BaseConditional
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UCosmeticItemAnimationSetDataAsset { // : UDataAsset
		constexpr auto LoopData = 0x28; // FCosmeticItemAnimationSetLoopData
		constexpr auto OneShotSequences = 0x48; // TArray<UAnimSequenceBase*>
	}

	namespace n_UPropertyBinding { // : UObject
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UBTTask_TriggerNotification { // : UBTTaskNode
		constexpr auto NotificationId = 0x60; // UNotificationInputId*
	}

	namespace n_UColorTextureSwitchBySeed { // : UTextureSwitch
		constexpr auto HashSource = 0x220; // FName
		constexpr auto Entries = 0x228; // TArray<FColorTextureSwitchSeedEntry>
	}

	namespace n_ATavernStrangerNPC { // : ACompanyShopkeeper
		constexpr auto OwnedBarrelMeshActor = 0x610; // ATavernStrangersBarrel*
		constexpr auto StrangerControlsBarrelVisibility = 0x618; // bool
		constexpr auto RegisteredController = 0x620; // AAthenaPlayerController*
		constexpr auto ShowNPCEventHandle = 0x630; // FObjectMessagingHandle
		constexpr auto ResetNPCEventHandle = 0x678; // FObjectMessagingHandle
	}

	namespace n_AMermaidInteractionProxy { // : AModalInteractionProxy
		constexpr auto Mesh = 0x400; // UPrimitiveComponent*
		constexpr auto InteractionRegion = 0x408; // UInteractableComponent*
		constexpr auto InteractionType = 0x410; // AModalInteraction*
		constexpr auto DefaultTooltip = 0x418; // FText
		constexpr auto DefaultDisplayName = 0x450; // FText
		constexpr auto NotificationInputId = 0x488; // UNotificationInputId*
		constexpr auto DisplayPriority = 0x490; // EActionDisplayPriority
	}

	namespace n_UStatusResponseChangeCannonRotation { // : UStatusResponse
		constexpr auto TargetPitchAngle = 0x30; // float
		constexpr auto TargetYawAngle = 0x34; // float
		constexpr auto RotationsBlendTime = 0x38; // float
	}

	namespace n_USCS_Node { // : UObject
		constexpr auto ComponentTemplate = 0x28; // UActorComponent*
		constexpr auto VariableName = 0x30; // FName
		constexpr auto AttachToName = 0x38; // FName
		constexpr auto ParentComponentOrVariableName = 0x40; // FName
		constexpr auto ParentComponentOwnerClassName = 0x48; // FName
		constexpr auto bIsParentComponentNative = 0x50; // bool
		constexpr auto ServerMigrationFlagSet = 0x51; // bool
		constexpr auto ChildNodes = 0x58; // TArray<USCS_Node*>
		constexpr auto MetaDataArray = 0x68; // TArray<FBPVariableMetaDataEntry>
		constexpr auto VariableGuid = 0x78; // FGuid
	}

	namespace n_UTaleQuestSelectAISpawnerStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UShowLoginUICallbackProxy { // : UBlueprintAsyncActionBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UAthenaAnimationThirdPersonAnimationData { // : UAthenaAnimationData
		constexpr auto PulleyAnimationsDataAsset = 0x68; // UAthenaAnimationPulleyDataAsset*
		constexpr auto EmoteListingAsset = 0x70; // UAthenaAnimationEmoteListingAsset*
		constexpr auto KeyedInstrumentDataAsset = 0x78; // UAthenaAnimationKeyedInstrumentDataAsset*
	}

	namespace n_UWorldEndAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto WorldEndDurationMultiplier = 0x40; // float
		constexpr auto UseSuperHeatedWaterInStage = 0x44; // bool
	}

	namespace n_UPanelWidget { // : UWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_UNPCHeldObjectData { // : UDataAsset
		constexpr auto LeftHandWieldSocket = 0x28; // FName
		constexpr auto RightHandWieldSocket = 0x30; // FName
		constexpr auto DetachSocketA = 0x38; // FName
		constexpr auto DetachSocketB = 0x40; // FName
		constexpr auto Object1 = 0x48; // AActor*
		constexpr auto Object2 = 0x50; // AActor*
		constexpr auto Object3 = 0x58; // AActor*
		constexpr auto Object4 = 0x60; // AActor*
		constexpr auto Object5 = 0x68; // AActor*
		constexpr auto Object6 = 0x70; // AActor*
		constexpr auto Object7 = 0x78; // AActor*
		constexpr auto Object8 = 0x80; // AActor*
		constexpr auto Object9 = 0x88; // AActor*
		constexpr auto Object10 = 0x90; // AActor*
	}

	namespace n_ATriggerSphere { // : ATriggerBase
		constexpr auto CollisionComponent = 0x3d0; // UShapeComponent*
		constexpr auto SpriteComponent = 0x3d8; // UBillboardComponent*
	}

	namespace n_UIsItemOwnedStatCondition { // : UTargetedStatCondition
		constexpr auto OwnershipType = 0x30; // EItemOwnershipType
	}

	namespace n_URewindPhysicsService { // : UObject
		constexpr auto World = 0x30; // UWorld*
		constexpr auto Entries = 0x40; // TArray<FRewindPhysicsServiceEntry>
	}

	namespace n_AOnlineAthenaGameMode { // : AAthenaGameMode
		constexpr auto GhostShipPawnClass = 0x4e0; // APawn*
		constexpr auto ServerNetworkedEventsWhitelistDefinition = 0x4e8; // UNetworkedEventsWhitelistDefinition*
		constexpr auto GhostShipCoordinator = 0x688; // FGhostShipCoordinator
		constexpr auto StorageContainerRefresher = 0x8b8; // FStorageContainerRefresher
		constexpr auto RiddleQuestDescGeneratorData = 0x990; // URiddleQuestDescGeneratorData*
		constexpr auto RespawnTimer = 0x998; // float
		constexpr auto ContestRespawnTimer = 0x99c; // float
		constexpr auto StorageContainerRefreshInterval = 0x9a0; // float
		constexpr auto ContainerRefreshBatchSize = 0x9a4; // int32_t
	}

	namespace n_UNPCOnSurfaceLocationDataAsset { // : UDataAsset
		constexpr auto ShipSizeFloodLevels = 0x28; // TArray<FNPCOnSurfaceShipSizeFloodedLevels>
		constexpr auto Groups = 0x38; // TArray<FNPCOnSurfaceLocationGroup>
		constexpr auto FireTestOffset = 0x48; // FVector
	}

	namespace n_ASkeletonThrone { // : AActor
		constexpr auto RootSceneComponent = 0x3d8; // USceneComponent*
		constexpr auto MeshComponent = 0x3e0; // UStaticMeshComponent*
		constexpr auto EmoteCollisionComponent = 0x3e8; // UShapeComponent*
		constexpr auto EmoteNames = 0x3f0; // TArray<FName>
		constexpr auto ThroneStat = 0x400; // FPlayerStat
		constexpr auto SatOnStatFiredReactions = 0x408; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto ReactionPlayer = 0x418; // ALandmarkReactionPlayer*
	}

	namespace n_UMeleeSpinAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto MinAngleToTargetToActivate = 0xc8; // float
		constexpr auto MaxAngleToTargetToActivate = 0xcc; // float
		constexpr auto MinTimeBetweenCheck = 0xd0; // float
		constexpr auto MaxTimeBetweenCheck = 0xd4; // float
		constexpr auto ChanceOfActivation = 0xd8; // float
		constexpr auto SpinWaitTime = 0xdc; // float
		constexpr auto TurnSpeed = 0xe0; // float
	}

	namespace n_ULandscapeSplineControlPoint { // : UObject
		constexpr auto Location = 0x28; // FVector
		constexpr auto Rotation = 0x34; // FRotator
		constexpr auto Width = 0x40; // float
		constexpr auto SideFalloff = 0x44; // float
		constexpr auto EndFalloff = 0x48; // float
		constexpr auto ConnectedSegments = 0x50; // TArray<FLandscapeSplineConnection>
		constexpr auto Points = 0x60; // TArray<FLandscapeSplineInterpPoint>
		constexpr auto Bounds = 0x70; // FBox
		constexpr auto LocalMeshComponent = 0x90; // UControlPointMeshComponent*
	}

	namespace n_UVertexAnimation { // : UVertexAnimBase
		constexpr auto NumAnimatedVerts = 0x30; // int32_t
	}

	namespace n_UAbilityTask_WaitTargetData { // : UAbilityTask
		constexpr auto ValidData = 0x68; // FScriptMulticastDelegate
		constexpr auto Cancelled = 0x78; // FScriptMulticastDelegate
	}

	namespace n_UWaterSpoutVFXComponent { // : UActorComponent
		constexpr auto WaterSpouts = 0xc8; // TArray<FWaterSpout>
		constexpr auto SplashEffectPointBottomZ = 0xd8; // FVector
		constexpr auto SpoutParticleSystem = 0xe8; // UObject*
		constexpr auto SplashParticleSystem = 0xf0; // UObject*
		constexpr auto WaterSplashDelayMin = 0xf8; // float
		constexpr auto WaterSplashDelayMax = 0xfc; // float
		constexpr auto SplashEffectVFXOffset = 0x100; // float
		constexpr auto SplashSweepRadius = 0x104; // float
		constexpr auto ShouldSpawnKillPlaneAtSplash = 0x108; // bool
		constexpr auto SplashKillPlaneMesh = 0x110; // UStaticMesh*
		constexpr auto SplashKillPlaneScale = 0x118; // FVector
		constexpr auto SplashKillPlane = 0x128; // UStaticMeshComponent*
		constexpr auto ActiveWaterSpouts = 0x130; // TArray<FWaterSpout>
	}

	namespace n_UAthenaAIAbilityComponent { // : UActorComponent
		constexpr auto AIAbilities = 0xd0; // TArray<UAthenaAIAbility*>
		constexpr auto ActivatableAbilitiesInCurrentStage = 0xe0; // TArray<UAthenaAIAbility*>
		constexpr auto CurrentAIAbility = 0xf0; // UAthenaAIAbility*
		constexpr auto QueuedAbilityType = 0xf8; // UAthenaAIAbilityType*
		constexpr auto DebugAlwaysOnAbility = 0x100; // UAthenaAIAbilityType*
		constexpr auto AbilityDamageStages = 0x108; // TArray<FAthenaAIAbilityDamageStage>
	}

	namespace n_URowboatSpawnParamsDataAsset { // : UDataAsset
		constexpr auto RowboatTypes = 0x28; // TArray<ARowboat*>
	}

	namespace n_UAIDioramaLocationSourceComponent { // : USceneComponent
		constexpr auto DioramaRelativeLocations = 0x2c0; // TArray<FAIDioramaLocationSourceComponentData>
		constexpr auto DialogueTriggerRadius = 0x2d0; // float
		constexpr auto DialogueSubtitleBuffer = 0x2d4; // float
		constexpr auto AISenseRadiusForDebugDisplay = 0x2d8; // float
		constexpr auto Categories = 0x2e0; // TArray<UAIDioramaCategory*>
		constexpr auto DebugTriggerRadiusColor = 0x2f0; // FColor
		constexpr auto DebugSubtitleRadiusColor = 0x2f4; // FColor
		constexpr auto AISenseRadiusColor = 0x2f8; // FColor
		constexpr auto DialogueTriggerRadiusSphere = 0x300; // USphereComponent*
		constexpr auto DialogueSubtitleRadiusSphere = 0x308; // USphereComponent*
		constexpr auto AISenseRadiusSphere = 0x310; // USphereComponent*
	}

	namespace n_UBellDescAsset { // : UShipPartDescAsset
		constexpr auto BellDesc = 0x28; // FBellDesc
	}

	namespace n_UParticleModuleOrientationBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UItemRadialContentRule { // : URadialContentRule
		constexpr auto RadialIconScale = 0xd0; // float
		constexpr auto RadialIconOffset = 0xd4; // FVector2D
		constexpr auto RemappingAsset = 0xe0; // UInventoryItemCategoryToSlotRemappingAsset*
		constexpr auto RemappedSlots = 0xe8; // TArray<AItemInfo*>
	}

	namespace n_UTaleQuestAddTemporaryEntitlementStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_AStaticDamageableCargoRunCrateItemProxy { // : AStaticCargoRunCrateItemProxy
		constexpr auto GatedHealthComponent = 0x7e8; // UGatedHealthComponent*
		constexpr auto VisualHealthResponseComponent = 0x7f0; // UVisualHealthResponseComponent*
		constexpr auto LightweightStatusEffectComponent = 0x7f8; // ULightWeightStatusEffectManagerComponent*
	}

	namespace n_UParticipatedInActorKillConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UStaticMeshMemoryConstraintComponent { // : UStaticMeshComponent
		constexpr auto Handler = 0x608; // UMeshMemoryConstraintHandler*
		constexpr auto FallbackOverrideMaterials = 0x610; // TArray<FStringAssetReference>
		constexpr auto MeshFallbackCategory = 0x620; // UMeshMemoryConstraintCategory*
		constexpr auto MeshReference = 0x628; // FStringAssetReference
		constexpr auto CachedMeshResourceSize = 0x638; // int64_t
		constexpr auto MemoryAccountedFor = 0x640; // bool
		constexpr auto NeedMeshLoadOnServer = 0x641; // bool
		constexpr auto BudgetToCountMemoryAgainstIfNoFallback = 0x648; // UMeshMemoryConstraintBudget*
	}

	namespace n_UWaterHeightProviderComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMeleeSpinAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto AbilityCooldownSpeedMultiplier = 0x28; // float
		constexpr auto DamageRequiredForNextIntervalMultiplier = 0x2c; // float
		constexpr auto OverrideParams = 0x30; // bool
		constexpr auto AutoActivateOnStageTransition = 0x31; // bool
		constexpr auto TypeClass = 0x38; // UAthenaAIAbilityType*
	}

	namespace n_ADetourCrowdAIController { // : AAIController
		constexpr auto bLOSflag = 0x458; // char : 1
		constexpr auto bSkipExtraLOSChecks = 0x458; // char : 1
		constexpr auto bAllowStrafe = 0x458; // char : 1
		constexpr auto bWantsPlayerState = 0x458; // char : 1
		constexpr auto bDisableControlRotation = 0x458; // char : 1
		constexpr auto PathFollowingComponent = 0x460; // UPathFollowingComponent*
		constexpr auto BrainComponent = 0x468; // UBrainComponent*
		constexpr auto PerceptionComponent = 0x470; // UAIPerceptionComponent*
		constexpr auto ActionsComp = 0x478; // UPawnActionsComponent*
		constexpr auto Blackboard = 0x480; // UBlackboardComponent*
		constexpr auto CachedGameplayTasksComponent = 0x488; // UGameplayTasksComponent*
		constexpr auto ReceiveMoveCompleted = 0x4a0; // FScriptMulticastDelegate
	}

	namespace n_UBehaviorTreeManager { // : UObject
		constexpr auto MaxDebuggerSteps = 0x28; // int32_t
		constexpr auto LoadedTemplates = 0x30; // TArray<FBehaviorTreeTemplateInfo>
		constexpr auto ActiveComponents = 0x40; // TArray<UBehaviorTreeComponent*>
	}

	namespace n_UMovieSceneAudioSection { // : UMovieSceneSection
		constexpr auto Sound = 0x98; // USoundBase*
		constexpr auto StartOffset = 0xa0; // float
		constexpr auto AudioStartTime = 0xa4; // float
		constexpr auto AudioDilationFactor = 0xa8; // float
		constexpr auto AudioVolume = 0xac; // float
		constexpr auto SoundVolume = 0xb0; // FRichCurve
		constexpr auto PitchMultiplier = 0x128; // FRichCurve
		constexpr auto bSuppressSubtitles = 0x1a0; // bool
	}

	namespace n_UNPCOnShipSimpleAnimInstance { // : UAnimInstance
		constexpr auto Into = 0x440; // UAnimSequenceBase*
		constexpr auto Loop = 0x448; // UAnimSequenceBase*
		constexpr auto ActiveLoop = 0x450; // UAnimSequenceBase*
		constexpr auto Outof = 0x458; // UAnimSequenceBase*
		constexpr auto OutOfAlternate = 0x460; // UAnimSequenceBase*
		constexpr auto CustomAnimationMontageDefinitionListingDataAsset = 0x468; // UCustomAnimationMontageDefinitionListingDataAsset*
		constexpr auto FacialCustomAnimationMontageDefinitionListingDataAsset = 0x470; // UCustomAnimationMontageDefinitionListingDataAsset*
		constexpr auto LookAt = 0x478; // FAnimationLookAt
		constexpr auto MontageStateMachine = 0x510; // FCustomAnimationMontageStateMachine
		constexpr auto FacialMontageStateMachine = 0x5e8; // FCustomAnimationMontageStateMachine
		constexpr auto LoadOnDemandInactive = 0x6c0; // UWeightedAnimSequenceLoadOnDemand*
		constexpr auto LoadOnDemandActive = 0x6c8; // UWeightedAnimSequenceLoadOnDemand*
		constexpr auto LoadOnDemandActiveData = 0x6d0; // UWeightedAnimationLoadOnDemandDataAsset*
		constexpr auto LoadOnDemandInactiveData = 0x6d8; // UWeightedAnimationLoadOnDemandDataAsset*
		constexpr auto ActiveUsesWeightedIdles = 0x6e0; // bool
		constexpr auto InactiveUsesWeightedIdles = 0x6e1; // bool
		constexpr auto UseActiveAnimSet = 0x6e2; // bool
		constexpr auto LoopCompleted = 0x6e3; // bool
		constexpr auto UseAlternateOutOf = 0x6e4; // bool
	}

	namespace n_UAnimNotifyWwiseEmitterComponent { // : UWwiseEmitterComponent
		constexpr auto Emitter = 0x2b8; // FWwiseEmitter
		constexpr auto WwiseObjectPoolWrapper = 0x2d8; // UWwiseObjectPoolWrapper*
	}

	namespace n_UMysteriousNotesCompletionEventsModelDataAsset { // : UDataAsset
		constexpr auto MysteriousNoteCompletionEvents = 0x28; // TArray<FMysteriousNotesCompletionEventsModel>
	}

	namespace n_APrototypeMultiTargetEnchantedCompass { // : AMultiTargetEnchantedCompass
		constexpr auto Locations = 0x870; // TArray<FVector>
		constexpr auto LocationIds = 0x880; // TArray<FGuid>
		constexpr auto InventoryItem = 0x890; // UInventoryItemComponent*
		constexpr auto ProximityAnnouncementComponent = 0x898; // UEnchantedCompassProximityAnnouncementComponent*
	}

	namespace n_UBTService_PlayCustomMontageId { // : UBTService
		constexpr auto CustomAnimationMontageId = 0x70; // FCustomAnimationMontageId
	}

	namespace n_UAthenaCharacterDodgeComponent { // : UActorComponent
		constexpr auto Params = 0xc8; // FAthenaCharacterDodgeParams
		constexpr auto ConsecutiveDodgeCountResetTimer = 0xd8; // float
		constexpr auto BunnyHoppingScalarCurve = 0xe0; // UCurveFloat*
		constexpr auto Character = 0xe8; // AAthenaCharacter*
	}

	namespace n_UTaleQuestProgressService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UTaleQuestProgressServiceDesc*
		constexpr auto ParticipatingCrewIds = 0x68; // TArray<FGuid>
	}

	namespace n_UDrunkennessComponentPublicData { // : UDataAsset
		constexpr auto DrunkennessSetupData = 0x28; // TArray<FDrunkennessSetupData>
		constexpr auto VomitingThresholdWhenGettingDrunker = 0x38; // float
		constexpr auto VomitingThresholdWhenSobering = 0x3c; // float
		constexpr auto MinTimeBetweenVomitSpews = 0x40; // float
		constexpr auto MaxTimeBetweenVomitSpews = 0x44; // float
		constexpr auto MinVomitSpewDuration = 0x48; // float
		constexpr auto MaxVomitSpewDuration = 0x4c; // float
		constexpr auto WaterSplashSoberingAmount = 0x50; // float
		constexpr auto WaterSplashSoberingRate = 0x54; // float
		constexpr auto DrunkennessRemappingCurveForScreenVfx = 0x58; // UCurveFloat*
		constexpr auto DrunkennessRemappingCurveForStaggering = 0x60; // UCurveFloat*
		constexpr auto CameraRollAmp = 0x68; // float
		constexpr auto CameraRollAccel = 0x6c; // float
		constexpr auto DrunkennessComponentPool = 0x70; // UWwiseObjectPoolWrapper*
		constexpr auto StartDrunkennessSfx = 0x78; // UWwiseEvent*
		constexpr auto StopDrunkennessSfx = 0x80; // UWwiseEvent*
		constexpr auto StartDrunkennessSfxRemotePlayer = 0x88; // UWwiseEvent*
		constexpr auto StopDrunkennessSfxRemotePlayer = 0x90; // UWwiseEvent*
		constexpr auto PlayerDrunkennessAmountRtpc = 0x98; // FName
		constexpr auto RemotePlayerDrunkennessAmountRtpc = 0xa0; // FName
		constexpr auto MinDrunkennessToToggleLocomotionAnimType = 0xa8; // float
	}

	namespace n_AConditionalStatTriggerArea { // : AActor
		constexpr auto AreaBoxComponent = 0x3d0; // UBoxComponent*
		constexpr auto StatToAward = 0x3d8; // FPlayerStat
		constexpr auto NumberOfPlayersRequired = 0x3dc; // int32_t
		constexpr auto EntitlementsToCheckFor = 0x3e0; // TArray<UEntitlementDesc*>
		constexpr auto WieldableItemsToCheckFor = 0x3f0; // TArray<UItemDesc*>
		constexpr auto RequiredInputId = 0x400; // UNotificationInputId*
		constexpr auto PlayersMeetingCriteria = 0x418; // TArray<AController*>
	}

	namespace n_UVoyageLocationFeatureToggledOnlyNamedIslandListDataAsset { // : UDataAsset
		constexpr auto FeatureToggledOnlyNamedIslandsList = 0x28; // TArray<FFeatureToggledNamedIslands>
	}

	namespace n_UTextureSwitchBySeed { // : UTextureSwitch
		constexpr auto HashSource = 0x220; // FName
		constexpr auto FallbackProbability = 0x228; // float
		constexpr auto FallbackReferenceName = 0x22c; // FName
		constexpr auto FallbackTexture = 0x238; // FStringAssetReference
		constexpr auto Entries = 0x248; // TArray<FTextureSwitchSeedEntry>
	}

	namespace n_UBTDecorator_IsOccupyingHangoutSpotWithGivenId { // : UBTDecorator_BaseConditional
		constexpr auto SuccessIds = 0x68; // TArray<FHangoutSpotId>
	}

	namespace n_UBTDecorator_TestRange { // : UBTDecorator_CompareBlackboardValues
		constexpr auto EnterRange = 0x80; // FAIDataProviderFloatValue
		constexpr auto ExitRange = 0xb0; // FAIDataProviderFloatValue
		constexpr auto TestForOutsideRange = 0xe0; // bool
	}

	namespace n_UPlayerCurseComponent { // : UActorComponent
		constexpr auto TemplateVFX = 0xc8; // UParticleSystem*
		constexpr auto AudioComponentClass = 0xd0; // UActorComponent*
		constexpr auto PlayCurseActiveAudioLoopEvent = 0xd8; // UWwiseEvent*
		constexpr auto StopCurseActiveAudioLoopEvent = 0xe0; // UWwiseEvent*
		constexpr auto CurseAudioSwitchGroup = 0xe8; // FName
		constexpr auto CurseToAudioSwitchValues = 0xf0; // TArray<FPlayerCurseToAudioSwitchValue>
		constexpr auto CurseVFX = 0x118; // UParticleSystemComponent*
		constexpr auto ActiveCurseForFX = 0x170; // EPlayerCurseTag
	}

	namespace n_UMaterialExpressionParameter { // : UMaterialExpression
		constexpr auto ParameterName = 0x70; // FName
		constexpr auto ExpressionGUID = 0x78; // FGuid
		constexpr auto Group = 0x88; // FName
	}

	namespace n_UFishDataAsset { // : UDataAsset
		constexpr auto CruisingDepthBeneathWaterHeight = 0x28; // float
		constexpr auto RisingFromTheDepthsSpeed = 0x2c; // float
		constexpr auto EscapingToTheDepthsSpeed = 0x30; // float
		constexpr auto TimeReelingWhenBattlingToSnapLine = 0x38; // FWeightedProbabilityRangeOfRanges
		constexpr auto ReelingCooldownMultiplier = 0x68; // float
		constexpr auto NumberOfLoopsBeforeBiting = 0x70; // FWeightedProbabilityRange
		constexpr auto MinimumDistanceFromPlayer = 0x90; // FWeightedProbabilityRangeOfRanges
		constexpr auto DistanceFromPlayerToCatchFish = 0xc0; // float
		constexpr auto SecondsToRemainBeforeDespawning = 0xc4; // FFloatRange
		constexpr auto FloatBobDepthOnBeingHooked = 0xd4; // float
		constexpr auto RodBendAmountWhenBiting = 0xd8; // float
		constexpr auto RodBendAmountWhenBattling = 0xdc; // float
		constexpr auto RodBendAmountWhenRecovering = 0xe0; // float
		constexpr auto SplashVFXWhenBeingTired = 0xe8; // UObject*
		constexpr auto SplashVFXWhenBattling = 0xf0; // UObject*
		constexpr auto SplashVFXWhenJumpingOutOfWater = 0xf8; // UObject*
		constexpr auto SplashVFXWhenLandingInToWater = 0x100; // UObject*
		constexpr auto SplashZOffset = 0x108; // float
		constexpr auto FloatReelingMoveSpeedWhenMovingToMinimumDistanceFromPlayer = 0x10c; // float
		constexpr auto ReelingAnimationMaxSpeedWhenMovingToMinimumDistanceFromPlayer = 0x110; // float
		constexpr auto FloatReelingMoveSpeedWhenBattling = 0x114; // float
		constexpr auto ReelingAnimationMaxSpeedWhenBattling = 0x118; // float
		constexpr auto FloatReelingMoveSpeedWhenNotBattling = 0x11c; // float
		constexpr auto ReelingAnimationMaxSpeedWhenNotBattling = 0x120; // float
		constexpr auto TimeBetweenIsBlockedHitChecksOnServer = 0x124; // float
		constexpr auto TimeBeforeTurningOnHits = 0x128; // float
		constexpr auto HitTestTraceChannel = 0x12c; // ECollisionChannel
		constexpr auto HitDetectionHalfExtentXY = 0x130; // float
		constexpr auto HitDetectionHalfExtentZ = 0x134; // float
		constexpr auto HitDetectionZOffset = 0x138; // float
		constexpr auto FishingFishPool = 0x140; // UWwiseObjectPoolWrapper*
		constexpr auto FishTiredSwitchGroup = 0x148; // FName
		constexpr auto FishTiredSwitchDefault = 0x150; // FName
		constexpr auto FishTiredSwitchTired = 0x158; // FName
		constexpr auto FishBiteAndStruggleStart = 0x160; // UWwiseEvent*
		constexpr auto FishBiteAndStruggleStop = 0x168; // UWwiseEvent*
		constexpr auto FishJumpOutOfWater = 0x170; // UWwiseEvent*
		constexpr auto FishJumpIntoWater = 0x178; // UWwiseEvent*
		constexpr auto FishBitingForceFeedback = 0x180; // UForceFeedbackEffect*
	}

	namespace n_USpeakingTrumpetItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UTaleQuestAnyStep { // : UTaleQuestParallelStep
		constexpr auto Steps = 0x98; // TArray<UTaleQuestStep*>
		constexpr auto Desc = 0xa8; // UTaleQuestParallelStepDesc*
	}

	namespace n_UDrunkenChestComponent { // : UActorComponent
		constexpr auto OnPickedUpLocalPlayerOnlyEvent = 0xc8; // UWwiseEvent*
		constexpr auto DrunkennessComponent = 0xd0; // UDrunkennessComponent*
		constexpr auto Wielder = 0xd8; // AActor*
		constexpr auto TargetDrunkenness = 0xe0; // float
	}

	namespace n_UMeleeAIAbility { // : UAthenaAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_ADoubleActionItemWithAmmo { // : ADoubleActionItem
		constexpr auto bShouldShowAmmoUI = 0x958; // bool
		constexpr auto AmmoMax = 0x95c; // int32_t
		constexpr auto AmmoLeft = 0x960; // int32_t
	}

	namespace n_UFindNamedPointAsTransformStepDesc { // : UFindNamedPointStepDescBase
		constexpr auto OutputTransform = 0xd0; // FQuestVariableTransform
	}

	namespace n_UMaterialExpressionVectorParameter { // : UMaterialExpressionParameter
		constexpr auto DefaultValue = 0x90; // FLinearColor
		constexpr auto bUseCustomPrimitiveData = 0xa0; // bool
		constexpr auto PrimitiveDataIndex = 0xa1; // char
	}

	namespace n_AGeneratedMeshAreaLight { // : ASpotLight
		constexpr auto SpotLightComponent = 0x3e0; // USpotLightComponent*
	}

	namespace n_ATinySharkExperience { // : AActor
		constexpr auto RelevancyDistance = 0x3d8; // float
		constexpr auto TrackingMovementCheckInterval = 0x3dc; // float
		constexpr auto TrackingMovementValidQuery = 0x3e0; // UEnvQuery*
		constexpr auto TinySharkSpawner = 0x488; // UAIOnDemandSpawner*
		constexpr auto TinySharkPawn = 0x490; // ASharkPawn*
		constexpr auto HealthRTPC = 0x498; // FName
		constexpr auto Params = 0x4a8; // FTinySharkParams
		constexpr auto TinySharkTelemetryComponent = 0x560; // UTinySharkTelemetryComponent*
		constexpr auto TrackedShip = 0x568; // AShip*
		constexpr auto SightingEncounterParams = 0x5f0; // FEncounterParams
		constexpr auto CloseEncounterParams = 0x5fc; // FEncounterParams
		constexpr auto CachedControllerParamsAsset = 0x748; // UAthenaAIControllerParamsDataAsset*
	}

	namespace n_UQuestBookPageLayout { // : UDataAsset
		constexpr auto Images = 0x28; // TArray<FTreasureMapWidgetTexture>
		constexpr auto GeneralText = 0x38; // TArray<FTreasureMapWidgetLocalisedTextWithFontOverride>
	}

	namespace n_UMaterialExpressionUnderwaterTranslucencyTexture { // : UMaterialExpression
		constexpr auto Coordinates = 0x70; // FExpressionInput
	}

	namespace n_USoundNodeAttenuation { // : USoundNode
		constexpr auto AttenuationSettings = 0x38; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x40; // FAttenuationSettings
		constexpr auto bOverrideAttenuation = 0x100; // char : 1
	}

	namespace n_AGameplayEventSignal_SkinnedMesh { // : AGameplayEventSignal
		constexpr auto ProxyClass = 0x3d8; // ANetProxy*
		constexpr auto NexProxyFeatureToggle = 0x3e0; // FName
		constexpr auto TimeForSignalToActivateInSeconds = 0x3e8; // float
		constexpr auto TimeForSignalToDeactivateInSeconds = 0x3ec; // float
		constexpr auto TimeForAtmosphericPressureZoneToActivateInSeconds = 0x3f0; // float
		constexpr auto AtmosphericPressureZoneComponent = 0x3f8; // UAtmosphericPressureZoneComponent*
		constexpr auto LightingZoneComponent = 0x400; // ULightingZoneComponent*
		constexpr auto RotateMeshToActorComponent = 0x408; // URotateMeshToActorComponent*
		constexpr auto SignalMesh = 0x410; // UMeshComponent*
		constexpr auto Root = 0x418; // USceneComponent*
		constexpr auto SignalMaterial = 0x420; // UMaterialInstanceDynamic*
		constexpr auto EventType = 0x428; // EGameplayEventSignalType
		constexpr auto OwningNetworkRegion = 0x490; // ENetworkRegion
	}

	namespace n_UIsTargetCrewMemberStatCondition { // : UTargetedStatCondition
		constexpr auto TargetSelector = 0x28; // UStatConditionTargetSelector*
	}

	namespace n_UFishingMiniGameSetupDataAsset { // : UDataAsset
		constexpr auto EscapeRadiusAtMaxDistance = 0x28; // float
		constexpr auto EscapeRadiusAtMinDistance = 0x2c; // float
		constexpr auto PercentageOfEscapeRadiusToKeepFishFacingOutwards = 0x30; // float
		constexpr auto AwayEscapeSectorAngleAtMaxDistance = 0x34; // float
		constexpr auto AwayEscapeSectorAngleAtMinDistance = 0x38; // float
		constexpr auto LeftRightEscapeSectorAngleAtMaxDistance = 0x3c; // float
		constexpr auto LeftRightEscapeSectorAngleAtMinDistance = 0x40; // float
		constexpr auto TimeToNextAngleChangeWithinSector = 0x48; // FWeightedProbabilityRangeOfRanges
		constexpr auto FakeOutDistancePercentage = 0x78; // FWeightedProbabilityRangeOfRanges
	}

	namespace n_UMovementInterferenceComponent { // : UInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USpinBox { // : UWidget
		constexpr auto Value = 0x138; // float
		constexpr auto ValueDelegate = 0x13c; // DelegateProperty
		constexpr auto WidgetStyle = 0x150; // FSpinBoxStyle
		constexpr auto Style = 0x468; // USlateWidgetStyleAsset*
		constexpr auto Delta = 0x470; // float
		constexpr auto SliderExponent = 0x474; // float
		constexpr auto Font = 0x478; // FSlateFontInfo
		constexpr auto MinDesiredWidth = 0x4b8; // float
		constexpr auto ClearKeyboardFocusOnCommit = 0x4bc; // bool
		constexpr auto SelectAllTextOnCommit = 0x4bd; // bool
		constexpr auto ForegroundColor = 0x4c0; // FSlateColor
		constexpr auto OnValueChanged = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnValueCommitted = 0x500; // FScriptMulticastDelegate
		constexpr auto OnBeginSliderMovement = 0x510; // FScriptMulticastDelegate
		constexpr auto OnEndSliderMovement = 0x520; // FScriptMulticastDelegate
		constexpr auto bOverride_MinValue = 0x530; // char : 1
		constexpr auto bOverride_MaxValue = 0x530; // char : 1
		constexpr auto bOverride_MinSliderValue = 0x530; // char : 1
		constexpr auto bOverride_MaxSliderValue = 0x530; // char : 1
		constexpr auto MinValue = 0x534; // float
		constexpr auto MaxValue = 0x538; // float
		constexpr auto MinSliderValue = 0x53c; // float
		constexpr auto MaxSliderValue = 0x540; // float
	}

	namespace n_UVideprinterService { // : UObject
		constexpr auto Videprinters = 0x30; // TArray<AVideprinter*>
	}

	namespace n_UDamageableVulnerabilityLayer { // : UObject
		constexpr auto Vulnerabilities = 0x28; // TArray<FDamageableVulnerabilityPair>
	}

	namespace n_APressurePlateMechanismTrigger { // : APressurePlateMechanismTriggerBase
		constexpr auto DisableAfterActivation = 0x440; // bool
		constexpr auto AutoEnableAfterDisable = 0x441; // bool
		constexpr auto TimeAfterDisableBeforeAutoEnable = 0x444; // float
		constexpr auto DelayBeforeActivation = 0x448; // float
		constexpr auto DeactivateTime = 0x44c; // float
		constexpr auto InvertTriggerActivation = 0x450; // bool
	}

	namespace n_UInterpTrackFade { // : UInterpTrackFloatBase
		constexpr auto bPersistFade = 0x90; // char : 1
		constexpr auto bFadeAudio = 0x90; // char : 1
		constexpr auto FadeColor = 0x94; // FLinearColor
	}

	namespace n_UDebugSkipToStepDesc { // : UTaleQuestStepDesc
		constexpr auto NextDesc = 0x80; // UTaleQuestStepDesc*
		constexpr auto SkipName = 0x88; // FString
	}

	namespace n_UTreasureVaultItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto ItemSpawnType = 0x430; // EItemSpawnType
		constexpr auto VaultTreasureRarity = 0x438; // TArray<FVaultTreasureRarity>
		constexpr auto TrackItemsAndDestroy = 0x448; // bool
		constexpr auto FinishedSpawning = 0x449; // bool
		constexpr auto EventDispatcher = 0x450; // FObjectMessagingDispatcher
	}

	namespace n_USpawnCollectableQuestObjectStepDesc { // : UTaleQuestStepDesc
		constexpr auto CollectableQuestBookPageToSpawn = 0x80; // AActor*
		constexpr auto CollectingPlayerActor = 0x88; // FQuestVariablePlayerActor
	}

	namespace n_UDeviceProfile { // : UTextureLODSettings
		constexpr auto DeviceType = 0x38; // FString
		constexpr auto BaseProfileName = 0x48; // FString
		constexpr auto Parent = 0x58; // UObject*
		constexpr auto CVars = 0x68; // TArray<FString>
	}

	namespace n_UPlayerBuriedItemServiceMapStorePopulator { // : UObject
		constexpr auto DataAsset = 0x28; // UPlayerBuriedItemServiceMapStorePopulatorDataAsset*
	}

	namespace n_UMaterialExpressionParticleSize { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UStatusResponseBurpingGasChange { // : UStatusResponse
		constexpr auto IntensityMultiplier = 0x30; // float
	}

	namespace n_ASimpleBootyItemProxy { // : ABaseSimpleBootyItemProxy
		constexpr auto RetractableComponent = 0x7a8; // URetractableComponent*
		constexpr auto ItemProxyShipTrackerComponent = 0x7b0; // UItemProxyShipTrackerComponent*
	}

	namespace n_UShipFirePropagationComponent { // : UActorComponent
		constexpr auto FeatureToggleName = 0xd8; // FName
		constexpr auto ShipSize = 0xe0; // UShipSize*
		constexpr auto CellSize = 0xe8; // float
		constexpr auto GridDimensions = 0xec; // FIntVector
		constexpr auto GridOffset = 0xf8; // FVector
		constexpr auto Propagator = 0x108; // UFirePropagator*
		constexpr auto FireDamageDataAsset = 0x110; // UShipFireDamageParamsDataAsset*
		constexpr auto FireCellDescs = 0x118; // TArray<FFireCellDesc>
		constexpr auto BurnStatus = 0x138; // FStatus
		constexpr auto VFXManager = 0x150; // UFireGridVFXManager*
		constexpr auto VfxSpawnSettings = 0x158; // FFireGridVfxSpawnSettings
		constexpr auto FireLightManager = 0x1b0; // FShipFireLightManager
		constexpr auto FireCharringManager = 0x300; // FFireGridCharringManager
		constexpr auto ReplicatedCellData = 0x3c8; // TArray<FReplicatedFireCellData>
		constexpr auto ReplicatedCellCharringData = 0x3d8; // FReplicatedFireCellCharringData
		constexpr auto FireAudioManager = 0x3f0; // UFireGridAudioManager*
		constexpr auto FireAudioParams = 0x3f8; // FFireCellAudioParams
	}

	namespace n_UBTDecorator_ForceSuccess { // : UBTDecorator
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_ARenderToTextureMapBase { // : ATreasureMap
		constexpr auto RenderData = 0x7d8; // TArray<FMapTextureRenderData>
		constexpr auto MapTextures = 0x7e8; // TArray<UTexture*>
		constexpr auto CanvasWidth = 0x7f8; // int32_t
		constexpr auto CanvasHeight = 0x7fc; // int32_t
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigrationCustomSerialiseActor { // : AActor
		constexpr auto TestStruct = 0x3d0; // FServerMigrationCustomMigrationSerialisationStruct
	}

	namespace n_UDistributionVectorUniformCurve { // : UDistributionVector
		constexpr auto ConstantCurve = 0x38; // FInterpCurveTwoVectors
		constexpr auto bLockAxes1 = 0x50; // char : 1
		constexpr auto bLockAxes2 = 0x50; // char : 1
		constexpr auto LockedAxes = 0x54; // EDistributionVectorLockFlags [0x2]
		constexpr auto MirrorFlags = 0x56; // EDistributionVectorMirrorFlags [0x3]
		constexpr auto bUseExtremes = 0x5c; // char : 1
	}

	namespace n_USceneDialogueData { // : UObject
		constexpr auto ActorNames = 0x28; // TArray<FName>
		constexpr auto ChatType = 0x38; // ENPCChatType
		constexpr auto TextSections = 0x40; // TArray<USceneDialogueSection*>
		constexpr auto ChainedDialogue = 0x50; // bool
		constexpr auto SourceText = 0x58; // FString
	}

	namespace n_UInvalidationBox { // : UContentWidget
		constexpr auto CacheRelativeTransforms = 0x150; // bool
	}

	namespace n_UAIShipEncounterParamsDataAsset { // : UDataAsset
		constexpr auto SpawnParams = 0x28; // UAIShipEncounterSpawnParamsDataAsset*
		constexpr auto ContextParams = 0x30; // UAIShipContextParamsDataAsset*
		constexpr auto DefaultContextDesc = 0x38; // UAIShipContextDescDataAsset*
		constexpr auto ShipPawnClass = 0x40; // AShipProxyPawn*
		constexpr auto BuoyantObjectSpawnProfileAsset = 0x48; // UBuoyantObjectSpawnProfileDataAsset*
		constexpr auto EventSignalAssetClass = 0x50; // AGameplayEventSignal*
		constexpr auto EventSignalHeight = 0x58; // float
		constexpr auto EncounterCompleteText = 0x60; // FText
		constexpr auto OuterRadiusMultiplier = 0x98; // float
		constexpr auto MigrationRadiusMultiplier = 0x9c; // float
		constexpr auto InitialEncounterEntryDelay = 0xa0; // float
		constexpr auto MinEngagedDistanceFromPlayers = 0xa4; // float
		constexpr auto EnableMusicWhenShipsHaveNoTarget = 0xa8; // bool
		constexpr auto SecondsUntilEncounterEndsAfterLastCrewLeft = 0xac; // int32_t
		constexpr auto MaximumEncounterDuration = 0xb0; // int32_t
	}

	namespace n_UPlayerLoadoutAsset { // : ULoadoutAsset
		constexpr auto ClothingLoadout = 0x50; // FClothingLoadout
		constexpr auto PetLoadout = 0x60; // FPetLoadout
	}

	namespace n_UMaterialExpressionObjectBounds { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UPuzzleVaultAudioParams { // : UDataAsset
		constexpr auto PuzzleVaultPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto PuzzleVaultWaterFillPool = 0x30; // UWwiseObjectPoolWrapper*
		constexpr auto PuzzleVaultDoorOpening = 0x38; // UWwiseEvent*
		constexpr auto PuzzleVaultDoorClosing = 0x40; // UWwiseEvent*
		constexpr auto PuzzleVaultTriggered = 0x48; // UWwiseEvent*
		constexpr auto PuzzleVaultComplete = 0x50; // UWwiseEvent*
		constexpr auto PuzzleVaultCorrectSolution = 0x58; // UWwiseEvent*
		constexpr auto PuzzleVaultIncorrectSolution = 0x60; // UWwiseEvent*
		constexpr auto PuzzleVaultIncorrectSolutionDelayStart = 0x68; // UWwiseEvent*
		constexpr auto PuzzleVaultIncorrectSolutionDelayEnd = 0x70; // UWwiseEvent*
		constexpr auto PuzzleVaultTurnBlock = 0x78; // UWwiseEvent*
		constexpr auto WaterLeakStart = 0x80; // UWwiseEvent*
		constexpr auto WaterLeakStop = 0x88; // UWwiseEvent*
		constexpr auto WaterLeakEndClunk = 0x90; // UWwiseEvent*
	}

	namespace n_UTaleQuestRemoveMapStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTaleQuestRemoveMapStepDesc*
	}

	namespace n_UMovieScene { // : UMovieSceneSignedObject
		constexpr auto Spawnables = 0x80; // TArray<FMovieSceneSpawnable>
		constexpr auto Possessables = 0x90; // TArray<FMovieScenePossessable>
		constexpr auto ObjectBindings = 0xa0; // TArray<FMovieSceneBinding>
		constexpr auto MasterTracks = 0xb0; // TArray<UMovieSceneTrack*>
		constexpr auto CameraCutTrack = 0xc0; // UMovieSceneTrack*
		constexpr auto SelectionRange = 0xc8; // FFloatRange
		constexpr auto PlaybackRange = 0xd8; // FFloatRange
		constexpr auto bForceFixedFrameIntervalPlayback = 0xe8; // bool
		constexpr auto FixedFrameInterval = 0xec; // float
		constexpr auto InTime = 0xf0; // float
		constexpr auto OutTime = 0xf4; // float
		constexpr auto StartTime = 0xf8; // float
		constexpr auto EndTime = 0xfc; // float
	}

	namespace n_UOverrideProgressSpawnStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UListView { // : UTableViewBase
		constexpr auto ItemHeight = 0x138; // float
		constexpr auto Items = 0x140; // TArray<UObject*>
		constexpr auto SelectionMode = 0x150; // ESelectionMode
		constexpr auto OnGenerateRowEvent = 0x154; // DelegateProperty
	}

	namespace n_AItemInfo { // : AActor
		constexpr auto CanBeStoredInInventory = 0x3f0; // bool
		constexpr auto OnItemPickedUpDelegate = 0x3f8; // FScriptMulticastDelegate
		constexpr auto OnItemDroppedDeletage = 0x408; // FScriptMulticastDelegate
		constexpr auto WieldableType = 0x418; // AWieldableItem*
		constexpr auto ProxyType = 0x420; // AActor*
		constexpr auto WieldableItemPersistenceCooldownComponent = 0x428; // UWieldableItemPersistentCooldownComponent*
		constexpr auto Desc = 0x430; // UItemDesc*
		constexpr auto CurrentRepresentation = 0x438; // EItemRepresentation
		constexpr auto CurrentRepresentationInstance = 0x440; // AActor*
		constexpr auto CurrentOwner = 0x448; // AActor*
		constexpr auto TutorialOwner = 0x450; // AActor*
		constexpr auto DoNotConsiderForMigrationGather = 0x4f9; // bool
	}

	namespace n_UIslandFaunaSettings { // : UDataAsset
		constexpr auto IslandPopulatedChance = 0x28; // int32_t
		constexpr auto NumberOfFaunaTypes = 0x30; // FWeightedProbabilityRange
		constexpr auto FaunaTypeSettings = 0x50; // TArray<FFaunaTypeSettings>
	}

	namespace n_AInstancedNavMeshBoundsVolume { // : ANavMeshBoundsVolume
		constexpr auto SupportedAgents = 0x408; // FNavAgentSelector
		constexpr auto OriginatingLevelName = 0x40c; // FName
	}

	namespace n_URewardDefinitionAssetList { // : UDataAsset
		constexpr auto RewardDefinitionAssets = 0x28; // TArray<URewardDefinitionAsset*>
		constexpr auto WeightRewardTable = 0x38; // UWeightedRewardTableAsset*
	}

	namespace n_UActorPhasingComponent { // : UActorComponent
		constexpr auto ActorToHide = 0xc8; // AActor*
	}

	namespace n_UParticleModuleVelocityInheritParent { // : UParticleModuleVelocityBase
		constexpr auto Scale = 0x58; // FRawDistributionVector
		constexpr auto CustomParentScale = 0x90; // FRawDistributionVector
		constexpr auto ScalesRespectEmitterRotation = 0xc8; // char : 1
		constexpr auto UseCustomLocalSpace = 0xc8; // char : 1
		constexpr auto SpeedCap = 0xcc; // float
	}

	namespace n_UMaterialExpressionAppendVector { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
	}

	namespace n_UAnimInstance { // : UObject
		constexpr auto CurrentSkeleton = 0x28; // USkeleton*
		constexpr auto UngroupedActivePlayers = 0x30; // TArray<FAnimTickRecord>
		constexpr auto SyncGroups = 0x40; // TArray<FAnimGroupInstance>
		constexpr auto VertexAnims = 0x50; // TArray<FActiveVertexAnim>
		constexpr auto RootMotionMode = 0x60; // ERootMotionMode
		constexpr auto bWarnAboutBlueprintUsage = 0x61; // bool
		constexpr auto OnMontageBlendingOut = 0x68; // FScriptMulticastDelegate
		constexpr auto OnMontageStarted = 0x78; // FScriptMulticastDelegate
		constexpr auto OnMontageEnded = 0x88; // FScriptMulticastDelegate
		constexpr auto OnStateEntered = 0x98; // FScriptMulticastDelegate
		constexpr auto OnStateExited = 0xa8; // FScriptMulticastDelegate
		constexpr auto OnStateInitialised = 0xb8; // FScriptMulticastDelegate
		constexpr auto OnAnimUpdated = 0xc8; // FScriptMulticastDelegate
		constexpr auto bQueueMontageEvents = 0x148; // bool
		constexpr auto ActiveAnimNotifyState = 0x240; // TArray<FAnimNotifyEvent>
		constexpr auto SlotNodeInitializationCounter = 0x350; // int16_t
		constexpr auto GraphTraversalCounter = 0x352; // int16_t
		constexpr auto bBoneCachesInvalidated = 0x3a8; // bool
		constexpr auto bBlueprintAnimUpdateEnabled = 0x438; // char : 1
	}

	namespace n_UPlayerBuriedItemServiceDataAsset { // : UDataAsset
		constexpr auto TreasureDiscoveredMessage = 0x28; // UPopUpMessageDesc*
		constexpr auto TreasureDiscoveredByYouMessage = 0x30; // UPopUpMessageDesc*
		constexpr auto TreasureRetrievedMessage = 0x38; // UPopUpMessageDesc*
		constexpr auto TreasureRetrievedByYouMessage = 0x40; // UPopUpMessageDesc*
		constexpr auto TreasureBuriedMapAddedMessage = 0x48; // UPopUpMessageDesc*
		constexpr auto TreasureBuriedByYouMessageDelay = 0x50; // float
		constexpr auto TreasureBuriedByYouMapAddedMessage = 0x58; // UPopUpMessageDesc*
		constexpr auto TreasureBuriedMapUpdatedMessage = 0x60; // UPopUpMessageDesc*
		constexpr auto TreasureBuriedByYouMapUpdatedMessage = 0x68; // UPopUpMessageDesc*
		constexpr auto TreasureBuriedXNotCreatedMessage = 0x70; // UPopUpMessageDesc*
		constexpr auto TreasureBuriedByYouXNotCreatedMessage = 0x78; // UPopUpMessageDesc*
		constexpr auto MapGiftedMessage = 0x80; // UPopUpMessageDesc*
		constexpr auto MapGiftedByYouMessage = 0x88; // UPopUpMessageDesc*
		constexpr auto MapGiftedToYourCrewMessage = 0x90; // UPopUpMessageDesc*
		constexpr auto MapBundleStolenVictimMessage = 0x98; // UPopUpMessageDesc*
		constexpr auto MapBundleStolenVictimWasYouMessage = 0xa0; // UPopUpMessageDesc*
		constexpr auto MapBundleStolenPerpetratorMessage = 0xa8; // UPopUpMessageDesc*
		constexpr auto MapBundleStolenPerpetratorWasYouMessage = 0xb0; // UPopUpMessageDesc*
		constexpr auto MapBundlePlacedOnTableMessage = 0xb8; // UPopUpMessageDesc*
		constexpr auto MapBundleRetrievedMessage = 0xc0; // UPopUpMessageDesc*
		constexpr auto MapBundleWasSpawnedInSunkenShip = 0xc8; // UPopUpMessageDesc*
		constexpr auto MapWasAddedToTavernBoard = 0xd0; // UPopUpMessageDesc*
		constexpr auto MapWasTakenFromTavernBoard = 0xd8; // UPopUpMessageDesc*
		constexpr auto PrioritiseUseRewardIdAsPopup = 0xe0; // TArray<EBootyTypes>
		constexpr auto PlayerBuriedItemMapItemDesc = 0xf0; // UTreasureMapItemDesc*
		constexpr auto PlayerBuriedItemMapBundleItemDesc = 0xf8; // UItemDesc*
		constexpr auto ItemDigUpRadius = 0x100; // float
		constexpr auto ItemDigUpRadiusSurfaceOverride = 0x108; // TArray<FPlayerBuriedItemServiceItemDigUpRadiusSurfaceOverride>
		constexpr auto IsUndergroundLineTraceLength = 0x118; // float
		constexpr auto IsUndergroundLineTraceChannel = 0x11c; // ECollisionChannel
		constexpr auto IgnoreSurfaceTypes = 0x120; // TArray<EPhysicalSurface>
		constexpr auto NumXsDonationCommendationThreshold = 0x130; // int32_t
		constexpr auto DailyMapLimit = 0x134; // int32_t
		constexpr auto MapStorePopulatorDataAsset = 0x138; // UPlayerBuriedItemServiceMapStorePopulatorDataAsset*
		constexpr auto HaulSizeDataAsset = 0x140; // UPlayerBuriedItemServiceHaulSizeDataAsset*
		constexpr auto ServerShutdownCompensationRewardScalar = 0x148; // float
		constexpr auto MapBundleLostByAnotherCrewCompensationRewardScalar = 0x14c; // float
		constexpr auto SendRewardCompensationForItemsSecondsBeforeShutdown = 0x150; // float
		constexpr auto NumItemsRequiredOnMapForHoardStat = 0x154; // int32_t
		constexpr auto LineTraceHalfLength = 0x158; // float
		constexpr auto HitTestTraceChannel = 0x15c; // ECollisionChannel
	}

	namespace n_UAggressiveGhostShipMineFormationsDataAsset { // : UDataAsset
		constexpr auto MineFormationOptions = 0x28; // TArray<FAggressiveGhostShipMineFormationOptions>
	}

	namespace n_UTaleQuestEmissaryCompanyActionRewardBoostStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestEmissaryCompanyActionRewardBoostStepDesc*
	}

	namespace n_AMechanismGeyser { // : AGeyser
		constexpr auto GeyserStateWhenMechanismIsInactive = 0x438; // EGeyserState
		constexpr auto MechanismActionComponent = 0x440; // UMechanismActionComponent*
	}

	namespace n_UBTService_QueryShipsForTarget { // : UBTService
		constexpr auto MaxShipDistanceFromHomePosition = 0x70; // FAIDataProviderFloatValue
		constexpr auto MinDamageToSwitchTargets = 0xa0; // FAIDataProviderFloatValue
		constexpr auto MinSecondsBeforeSwitchTargets = 0xd0; // FAIDataProviderFloatValue
		constexpr auto SwitchTargetsAfterTimerExpires = 0x100; // FAIDataProviderBoolValue
		constexpr auto SecondsBeforeSwitchTargetsAfterTimerExpires = 0x130; // FAIDataProviderFloatValue
		constexpr auto TimeBetweenDiceRolls = 0x160; // FAIDataProviderFloatValue
		constexpr auto DiceRollForAggression = 0x190; // FAIDataProviderFloatValue
		constexpr auto MinTotalDamageToTurnDiceRollForAggression = 0x1c0; // FAIDataProviderFloatValue
		constexpr auto DiceRollForDamageAggression = 0x1f0; // FAIDataProviderFloatValue
		constexpr auto DiceRollForDamageDormancy = 0x220; // FAIDataProviderFloatValue
		constexpr auto PlayerDistanceThresholdToTurnAggressive = 0x250; // FAIDataProviderFloatValue
		constexpr auto IgnoreAI = 0x280; // bool
	}

	namespace n_UAIShipEncounterSpawnParamsDataAsset { // : UDataAsset
		constexpr auto SpawnDepth = 0x28; // float
		constexpr auto Radius = 0x2c; // float
		constexpr auto MinSafeSpawnDistanceFromOtherShips = 0x30; // float
		constexpr auto TimeDelayBetweenWaves = 0x34; // float
		constexpr auto RelativeSpawnLocationParams = 0x38; // FRelativeSpawnLocationGeneratorParams
	}

	namespace n_UBookTaleQuestService { // : UTaleQuestToolService
		constexpr auto BookContents = 0x120; // TArray<int32_t>
		constexpr auto ProcBookContents = 0x130; // TArray<FPageLayoutRepInfo>
		constexpr auto CurrentBookContents = 0x140; // TArray<int32_t>
		constexpr auto QuestBookDesc = 0x150; // UQuestBookItemDesc*
	}

	namespace n_UTaleQuestSpawnAIStepDesc { // : UTaleQuestBlueprintStepDesc
		constexpr auto SpawnerAsset = 0x130; // FQuestVariableAISpawner
		constexpr auto WaveSpawnLocation = 0x140; // FQuestVariableAsset
		constexpr auto WaveSpawnActorLocation = 0x150; // FQuestVariableActor
		constexpr auto RegionSource = 0x160; // FQuestVariableActor
		constexpr auto MusicZone = 0x170; // AActor*
		constexpr auto AILifeTimePolicy = 0x178; // EAILifeTimePolicy
		constexpr auto AISpawnerShutdownPolicy = 0x179; // EAISpawnerShutdownPolicy
	}

	namespace n_UGameEventParams { // : UDataAsset
		constexpr auto KeepAliveRadius = 0x28; // float
		constexpr auto InnerEncounterRadius = 0x2c; // float
		constexpr auto OuterEncounterRadius = 0x30; // float
	}

	namespace n_UTaleQuestAwaitEventStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UMaterialManipulationSettingsComponent { // : UActorComponent
		constexpr auto Settings = 0xd0; // FMaterialManipulationSettings
		constexpr auto OverrideMaterial = 0x100; // UMaterialInstance*
		constexpr auto PosedTransform = 0x110; // FTransform
	}

	namespace n_UInputKeyDelegateBinding { // : UInputDelegateBinding
		constexpr auto InputKeyDelegateBindings = 0x28; // TArray<FBlueprintInputKeyDelegateBinding>
	}

	namespace n_AAIController { // : AController
		constexpr auto bLOSflag = 0x458; // char : 1
		constexpr auto bSkipExtraLOSChecks = 0x458; // char : 1
		constexpr auto bAllowStrafe = 0x458; // char : 1
		constexpr auto bWantsPlayerState = 0x458; // char : 1
		constexpr auto bDisableControlRotation = 0x458; // char : 1
		constexpr auto PathFollowingComponent = 0x460; // UPathFollowingComponent*
		constexpr auto BrainComponent = 0x468; // UBrainComponent*
		constexpr auto PerceptionComponent = 0x470; // UAIPerceptionComponent*
		constexpr auto ActionsComp = 0x478; // UPawnActionsComponent*
		constexpr auto Blackboard = 0x480; // UBlackboardComponent*
		constexpr auto CachedGameplayTasksComponent = 0x488; // UGameplayTasksComponent*
		constexpr auto ReceiveMoveCompleted = 0x4a0; // FScriptMulticastDelegate
	}

	namespace n_UIslandDataDefaultAssetEntry { // : UDataAsset
		constexpr auto IslandType = 0x28; // EIslandType
		constexpr auto AISpawner = 0x30; // UAISpawner*
		constexpr auto AISpawnerOverrides = 0x38; // TArray<FToggledSpawnerOverride>
		constexpr auto CannonsAISpawner = 0x48; // UAISpawner*
		constexpr auto CannonsAISpawnerOverrides = 0x50; // TArray<FToggledSpawnerOverride>
		constexpr auto EmergentCaptainSpawner = 0x60; // UAISpawner*
		constexpr auto EmergentCaptainSpawnerOverrides = 0x68; // TArray<FToggledSpawnerOverride>
	}

	namespace n_UBrushBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UEmoteItemCategoriesListingAsset { // : UDataAsset
		constexpr auto EmoteItemCategories = 0x28; // TArray<UItemCategory*>
	}

	namespace n_ADestroyItemWhenPlacedOnActor { // : AActor
		constexpr auto TimeUntilItemDestroyed = 0x3d8; // float
	}

	namespace n_AOneShotAnimatedMechanismAction { // : AAnimatedMechanismAction
		constexpr auto Root = 0x520; // USceneComponent*
		constexpr auto Pivot = 0x528; // USceneComponent*
		constexpr auto Animation = 0x530; // FMechanismTransformAnimationCurve
		constexpr auto AudioEmitterPool = 0x538; // UWwiseObjectPoolWrapper*
		constexpr auto AnimationEvents = 0x540; // FMechanismAnimationEventContainer
	}

	namespace n_AClamberSpot { // : AInteractableBase
		constexpr auto InteractableComponent = 0x418; // UInteractableComponent*
		constexpr auto ClamberSplineComponent = 0x420; // USplineComponent*
		constexpr auto ClamberBlendParams = 0x428; // FLadderBlendParams
		constexpr auto InteractionVerb = 0x438; // FText
		constexpr auto InteractionDisplayName = 0x470; // FText
		constexpr auto InteractionOffset = 0x4a8; // FVector
		constexpr auto OnClamberSfx = 0x4b8; // UWwiseEvent*
		constexpr auto ClamberSpotPool = 0x4c0; // UWwiseObjectPoolWrapper*
	}

	namespace n_UEquipmentItemCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UTaleQuestAddRiddleMapBaseStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto IslandName = 0x88; // FQuestVariableName
	}

	namespace n_UDeliverableCompanyRequirement { // : UDeliverableRequirementBase
		constexpr auto AcceptedCompanies = 0x30; // TArray<UCompany*>
	}

	namespace n_UEnvQueryTest_GameplayTags { // : UEnvQueryTest
		constexpr auto TagsToMatch = 0x170; // EGameplayContainerMatchType
		constexpr auto GameplayTags = 0x178; // FGameplayTagContainer
	}

	namespace n_UMaterialExpressionStaticBool { // : UMaterialExpression
		constexpr auto Value = 0x70; // char : 1
	}

	namespace n_UCargoRunCrateComponent { // : UActorComponent
		constexpr auto CargoRunCrateData = 0xd8; // UCargoRunCrateData*
		constexpr auto CargoRunCrateCustomData = 0xe0; // UCargoRunCrateCustomData*
		constexpr auto DropOffData = 0xe8; // FCargoRunItemDropOffData
		constexpr auto NPCDialogComponent = 0x110; // TWeakObjectPtr<UNPCDialogComponent>
		constexpr auto WieldedState = 0x118; // EHasBeenWieldedState
	}

	namespace n_UCostumeWithEmoteDesc { // : UCostumeDesc
		constexpr auto CostumeEmotes = 0xe8; // TArray<UEmoteDesc*>
	}

	namespace n_UAvoidanceManager { // : UObject
		constexpr auto DefaultTimeToLive = 0x30; // float
		constexpr auto LockTimeAfterAvoid = 0x34; // float
		constexpr auto LockTimeAfterClean = 0x38; // float
		constexpr auto DeltaTimeToPredict = 0x3c; // float
		constexpr auto ArtificialRadiusExpansion = 0x40; // float
		constexpr auto TestHeightDifference = 0x44; // float
	}

	namespace n_USkeletonFortAIToggler { // : UObject
		constexpr auto FortUnits = 0x68; // TArray<FFortTogglerUnit>
		constexpr auto WorldContext = 0x78; // UObject*
	}

	namespace n_UScrollBoxSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
	}

	namespace n_AShipwrightInteractionProxy { // : AModalInteraction
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UMaterialExpressionLandscapeVisibilityMask { // : UMaterialExpression
		constexpr auto ExpressionGUID = 0x70; // FGuid
	}

	namespace n_UFireGridVFXManager { // : UObject
		constexpr auto VFXParams = 0x28; // UFireGridVFXParamsDataAsset*
		constexpr auto SpawnedParticleSystemsForTemplates = 0x30; // TMap<FName, UParticleSystemComponent*>
		constexpr auto SpawnedCustomParticleSystemsForCells = 0x80; // TArray<FFireParticleSystem>
		constexpr auto SpawnedMeshesForCells = 0x90; // TMap<int32_t, FFireMesh>
		constexpr auto SpawnedParticleSystemsForSmokeDescs = 0xe0; // TMap<int32_t, UParticleSystemComponent*>
		constexpr auto SpawnedExteriorSmokeParticleSystem = 0x130; // UParticleSystemComponent*
		constexpr auto SpawnedLowDetailParticleSystem = 0x138; // UParticleSystemComponent*
		constexpr auto DespawningMeshes = 0x140; // TArray<FFireMesh>
		constexpr auto InteriorSmokeSpawnDescs = 0x150; // TArray<FFireGridRelativeSpawnDesc>
		constexpr auto LowDetailVFXSpawnDescs = 0x160; // TArray<FFireGridLowDetailRelativeSpawnDesc>
		constexpr auto ParticleSpawnLODSettings = 0x170; // TArray<FFireParticleSpawnData>
		constexpr auto ExteriorSmokeVFXSpawnDescs = 0x180; // TArray<FFireGridLowDetailRelativeSpawnDesc>
		constexpr auto VFXToSpawn = 0x190; // TArray<FFireDefaultVFXSpawnData>
		constexpr auto InterleavedSpawnLists = 0x1a8; // TArray<FFireParticleSpawnList>
		constexpr auto Propagator = 0x1b8; // UFirePropagator*
	}

	namespace n_UBountyQuestDescData { // : UDataAsset
		constexpr auto AllBountyRewards = 0x28; // TArray<UItemDesc*>
		constexpr auto LocationPhrase = 0x38; // URiddleTextPhraseDataAsset*
		constexpr auto LocationUndergroundPhrase = 0x40; // URiddleTextPhraseDataAsset*
		constexpr auto BountyMapMugShotSets = 0x48; // TArray<FBountyQuestMugShotSet>
		constexpr auto BountyMapLayoutOptions = 0x58; // TArray<FBountyQuestLayoutOption>
		constexpr auto DefaultBountyMapDescriptions = 0x68; // TArray<FText>
		constexpr auto DefaultPawnClass = 0x78; // UClass*
		constexpr auto TargetLoadoutSubstitutions = 0x98; // TArray<FLoadoutSubstitution>
		constexpr auto Skillsets = 0xa8; // TArray<FCompanySkillsetProgressions>
	}

	namespace n_ALandscapeGizmoActiveActor { // : ALandscapeGizmoActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTaleDoorMigrationAction { // : UTaleMigrationAction
		constexpr auto Door = 0x28; // ASlidingDoor*
	}

	namespace n_UMaterialExpressionCustom { // : UMaterialExpression
		constexpr auto Code = 0x70; // FString
		constexpr auto OutputType = 0x80; // ECustomMaterialOutputType
		constexpr auto Description = 0x88; // FString
		constexpr auto Inputs = 0x98; // TArray<FCustomInput>
		constexpr auto DeclarationCode = 0xa8; // FString
	}

	namespace n_UFireBreathAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto FireBreathDurationMultiplier = 0x40; // float
	}

	namespace n_UCookItemConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UEntitlementSettings { // : UDeveloperSettings
		constexpr auto EntitlementMap = 0x38; // FStringAssetReference
		constexpr auto DefaultEntitlementsAsset = 0x48; // FStringAssetReference
		constexpr auto EntitlementsAssetOverrides = 0x58; // TArray<FFeaturedEntitlements>
		constexpr auto MissingIcon = 0x68; // FStringAssetReference
	}

	namespace n_UAshenLordAIFormComponent { // : UAthenaAIFormComponent
		constexpr auto AshenLordVulnerabilityDamageAudioEvent = 0x138; // UWwiseEvent*
		constexpr auto AshenLordHeartBeatShaderParamName = 0x140; // FName
		constexpr auto AshenLordBaseMaterial = 0x148; // UMaterial*
		constexpr auto CameraShake = 0x168; // UCameraShake*
		constexpr auto ShakeInnerRadius = 0x170; // float
		constexpr auto ShakeOuterRadius = 0x174; // float
		constexpr auto AshenLordDynamicMaterialInstance = 0x178; // UMaterialInstanceDynamic*
		constexpr auto CachedNormalisedHealthScalar = 0x180; // float
		constexpr auto IsInVulnerability = 0x184; // bool
	}

	namespace n_AAthenaPlayerCharacter { // : AAthenaCharacter
		constexpr auto FirstPersonMeshOffsetComponent = 0xd10; // USceneComponent*
		constexpr auto FirstPersonMesh = 0xd18; // USkeletalMeshComponent*
		constexpr auto FirstPersonCamera = 0xd20; // UAthenaCameraComponent*
		constexpr auto ThirdPersonCamera = 0xd28; // UAthenaCameraComponent*
		constexpr auto SpringArmCamera = 0xd30; // UAthenaCameraComponent*
		constexpr auto LookAtEmoteCameraComponent = 0xd38; // ULookAtEmoteCameraComponent*
		constexpr auto SpringArm = 0xd40; // UAthenaSpringArmComponent*
		constexpr auto LocalCloudDome = 0xd48; // UChildActorComponent*
		constexpr auto InteractionComponent = 0xd50; // UCharacterInteractionComponent*
		constexpr auto ClimbingComponent = 0xd58; // UClimbingComponent*
		constexpr auto DrunkennessComponent = 0xd60; // UDrunkennessComponent*
		constexpr auto StaggerComponent = 0xd68; // UStaggerComponent*
		constexpr auto DrowningComponent = 0xd70; // UDrowningComponent*
		constexpr auto RumbleHandlerComponent = 0xd78; // URumbleHandlerComponent*
		constexpr auto ScreenSpaceVfxComponent = 0xd80; // UScreenSpaceVfxComponent*
		constexpr auto TreasureMapCollectionComponent = 0xd88; // UTreasureMapCollectionComponent*
		constexpr auto PhrasesRadialComponent = 0xd90; // UPhrasesRadialComponent*
		constexpr auto QuickInventoryComponent = 0xd98; // UQuickInventoryComponent*
		constexpr auto PointOfInterestTrackerComponent = 0xda0; // UPointOfInterestTrackerComponent*
		constexpr auto LimpingComponent = 0xda8; // ULimpingComponent*
		constexpr auto PacingComponent = 0xdb0; // UPacingComponent*
		constexpr auto BurpComponent = 0xdb8; // UBurpComponent*
		constexpr auto MeleeLockOnComponent = 0xdc0; // UMeleeAttackLockOnComponent*
		constexpr auto DeathSelfInteractionComponent = 0xdc8; // UDeathSelfInteractionComponent*
		constexpr auto WaterSlidePlayerComponent = 0xdd0; // UWaterSlidePlayerComponent*
		constexpr auto ReviveDebugComponent = 0xdd8; // UReviveDebugComponent*
		constexpr auto FlashbangEffectComponent = 0xde0; // UFlashbangEffectComponent*
		constexpr auto WorldLocationVisitorComponent = 0xde8; // UWorldLocationVisitorComponent*
		constexpr auto MeleeAttackLockOnSettings = 0xdf0; // UMeleeAttackLockOnComponentSettings*
		constexpr auto StatusEffectManagerComponent = 0xdf8; // UStatusEffectManagerComponent*
		constexpr auto StatusEffectPersistenceComponent = 0xe00; // UStatusEffectPersistenceComponent*
		constexpr auto PlayerCurseComponent = 0xe08; // UPlayerCurseComponent*
		constexpr auto MaterialStatusSusceptibilityComponent = 0xe10; // UMaterialStatusSusceptibilityComponent*
		constexpr auto HealthRegenerationPoolComponent = 0xe18; // UHealthRegenerationPoolComponent*
		constexpr auto SicknessComponent = 0xe20; // USicknessComponent*
		constexpr auto PlayerViewRewindComponent = 0xe28; // URewindComponent*
		constexpr auto ProjectileTraceHitVolume = 0xe30; // UCapsuleComponent*
		constexpr auto PlayerMerchantContractsComponent = 0xe38; // UPlayerMerchantContractsComponent*
		constexpr auto PlayerShroudBreakerTrackerComponent = 0xe40; // UPlayerShroudBreakerTrackerComponent*
		constexpr auto PetOwnerComponent = 0xe48; // UPetOwnerComponent*
		constexpr auto SpawnContextContainerComponent = 0xe50; // UAISpawnContextContainerComponent*
		constexpr auto RadialManager = 0xe58; // URadialManagerComponent*
		constexpr auto CameraFOVWhenSprinting = 0xe60; // float
		constexpr auto ApproximateCamPitchToLocalCamOffsetCurve = 0xe68; // UCurveVector*
		constexpr auto WalkConditionParams = 0xe70; // FWalkConditionsParams
		constexpr auto ServerSprintConditionParams = 0xe78; // FSprintConditionsParams
		constexpr auto ClientSprintConditionParams = 0xe84; // FSprintConditionsParams
		constexpr auto SprintingServerTimeTolerance = 0xe90; // float
		constexpr auto PostSprintResetTime = 0xe94; // float
		constexpr auto EmoteSpringArmParameters = 0xe98; // UAthenaSpringArmComponentParams*
		constexpr auto DeathSpringArmParameters = 0xea0; // UAthenaSpringArmComponentParams*
		constexpr auto EmotesRadialDataAsset = 0xea8; // UEmotesRadialDataAsset*
		constexpr auto AllowAnimationTickAggregation = 0xeb0; // bool
		constexpr auto AchievementKillOpponentFromBehindWithBlunderbuss = 0xeb4; // FAchievementKillOpponentFromBehindWithBlunderbuss
		constexpr auto AchievementHeavyAttackRivalOffTheirShip = 0xeb8; // FAchievementHeavyAttackRivalOffTheirShip
		constexpr auto AchievementBlockThenHitAndGetBlockedThenTakeHit = 0xec8; // FAchievementBlockThenHitAndGetBlockedThenTakeHit
		constexpr auto AchievementHaveADrinkWithAnotherCrewAtAnOutpost = 0xed8; // FAchievementHaveADrinkWithAnotherCrewAtAnOutpost
		constexpr auto AchievementKillOpponentInContest = 0xef8; // FAchievementKillOpponentInContest
		constexpr auto ConditionalStatsTriggerForKillingAnotherPlayer = 0xf00; // UConditionalStatsTriggerType*
		constexpr auto PirateLegendHideoutPetMovementData = 0xf08; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto OnShipPetMovementData = 0xf10; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto RepairComponent = 0xf18; // UAsyncLoadoutRepairComponent*
		constexpr auto SeasonUIComponent = 0xf20; // USeasonProgressionUIComponent*
		constexpr auto EmotePropData = 0xf28; // UEmotePropData*
		constexpr auto ReplicatedOverrideAnimationEntry = 0xfe0; // FName
		constexpr auto FirstPersonAnimSetDataId = 0xfe8; // UAnimationDataStoreId*
		constexpr auto FirstPersonAnimationDataStoreWeakReferencesAsset = 0xff0; // UAnimationDataStoreWeakReferenceAsset*
		constexpr auto CharacterType = 0xff8; // ECharacterType
		constexpr auto ClothingLoadoutComponent = 0x1960; // UClothingLoadoutComponent*
		constexpr auto PetLoadoutComponent = 0x1968; // UPetLoadoutComponent*
		constexpr auto PrimaryVoyageParticipantComponent = 0x1970; // UVoyageParticipantComponent*
		constexpr auto TaleVoyageParticipantComponent = 0x1978; // UVoyageParticipantComponent*
		constexpr auto EmergentVoyageParticipantComponent = 0x1980; // UVoyageParticipantComponent*
		constexpr auto PlayerWorldLocationComponent = 0x1988; // UPlayerWorldLocationComponent*
		constexpr auto ChainLightningReceiverComponent = 0x1990; // UChainLightningReceiverComponent*
		constexpr auto PendingModelSwap = 0x1998; // FAthenaPlayerCharacterModelSwap
		constexpr auto ReplicatedEmoteExitAllowed = 0x19e8; // bool
		constexpr auto FinishedWaitingForSpawn = 0x1a68; // bool
		constexpr auto AutoFloatInWater = 0x1a9a; // bool
		constexpr auto ReplicatedIsSprinting = 0x1a9c; // bool
		constexpr auto AutoMoveCancelThreshold = 0x1ab8; // float
		constexpr auto ReplicatedOverridePirateDescSeed = 0x1abc; // int32_t
	}

	namespace n_UNavLinkDefinition { // : UObject
		constexpr auto Links = 0x28; // TArray<FNavigationLink>
		constexpr auto SegmentLinks = 0x38; // TArray<FNavigationSegmentLink>
	}

	namespace n_UPiratePreviewComponentPirateProfileRTT { // : UPiratePreviewComponent
		constexpr auto OwningPlayerController = 0x2b8; // AController*
	}

	namespace n_UEnvQueryTest_IsAngleInRange2D { // : UEnvQueryTest
		constexpr auto LineA = 0x170; // FEnvDirection
		constexpr auto LineB = 0x190; // FEnvDirection
		constexpr auto MinAngleDegrees = 0x1b0; // FAIDataProviderFloatValue
		constexpr auto MaxAngleDegrees = 0x1e0; // FAIDataProviderFloatValue
	}

	namespace n_UFireCellStateTimingParamsDataAsset { // : UDataAsset
		constexpr auto TimingParams = 0x28; // FFireCellStateTimingParams
	}

	namespace n_UBTTask_SailShipToLocation { // : UBTTask_BlackboardBase
		constexpr auto TargetLocationKey = 0x88; // FBlackboardKeySelector
		constexpr auto DistanceThresholdToConsiderTargetReached = 0xb0; // float
	}

	namespace n_UAbilityTask { // : UGameplayTask
		constexpr auto InstanceName = 0x28; // FName
	}

	namespace n_ULayer { // : UObject
		constexpr auto LayerName = 0x28; // FName
		constexpr auto bIsVisible = 0x30; // char : 1
		constexpr auto ActorStats = 0x38; // TArray<FLayerActorStats>
	}

	namespace n_UControlIntentInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto ControlledObject = 0x280; // TScriptInterface<Class>
	}

	namespace n_AEmoteCard { // : AActor
		constexpr auto DynamicCardSelectionMaterialInstance = 0x3d8; // UMaterialInstanceDynamic*
		constexpr auto MeshComponent = 0x3e0; // UStaticMeshComponent*
		constexpr auto RandomCardParameterName = 0x3e8; // FName
		constexpr auto RandomCardParameterRange = 0x3f0; // FInt32Range
	}

	namespace n_ATestClimbingActor { // : ACharacter
		constexpr auto ClimbingComponent = 0x640; // UClimbingComponent*
	}

	namespace n_UMerchantQuestDescData { // : UDataAsset
		constexpr auto AllMerchantCrates = 0x28; // TArray<UItemDesc*>
		constexpr auto AllMerchantCargo = 0x38; // TArray<UItemDesc*>
		constexpr auto AllFauna = 0x48; // TArray<UClass*>
		constexpr auto MerchantMapLayouts = 0x58; // TArray<UMerchantMapLayout*>
		constexpr auto DeliverByTimeTextFormat = 0x68; // FText
		constexpr auto DeliverByTimeHourFormat = 0xa0; // TArray<FText>
		constexpr auto DeliverByTimeDayFormat = 0xb0; // TArray<FText>
		constexpr auto CollectCratesFromTraderPopupDesc = 0xc0; // UPopUpMessageDesc*
		constexpr auto MerchantCompany = 0xc8; // UCompany*
	}

	namespace n_UMeshMemoryConstraintServiceBudgetData { // : UObject
		constexpr auto MeshesRef = 0x30; // TMap<FName, FMeshRegistration>
		constexpr auto MeshesScoringInfo = 0x80; // TArray<FMeshScoring>
		constexpr auto MeshMemoryConstraintFallbackAsset = 0x108; // UMeshMemoryConstraintFallbackDataAsset*
		constexpr auto World = 0x110; // UWorld*
		constexpr auto ConsumersToAddToScoring = 0x118; // TArray<FIndividualMeshScoringToAdd>
	}

	namespace n_ACustomizableTimeService { // : ADebugTimeService
		constexpr auto GameWorldTimeOffset = 0x408; // FTimespan
		constexpr auto TimeScalar = 0x414; // uint32_t
		constexpr auto NumberOfDaysInEachGameMonth = 0x418; // uint32_t
		constexpr auto ServiceTimeQueryRapidFrequencyOffsetMax = 0x420; // double
		constexpr auto ServiceTimeQueryRapidFrequencyInSeconds = 0x428; // float
		constexpr auto ServiceTimeQueryFrequencyInSeconds = 0x42c; // float
		constexpr auto ClientTimeUpdateFrequencyInSeconds = 0x430; // float
		constexpr auto SunriseTimeHours = 0x434; // float
		constexpr auto SunsetTimeHours = 0x438; // float
		constexpr auto LocalTimeUpdateAdjustMaxTimeDelta = 0x43c; // float
		constexpr auto MinLocalTimeUpdateAdjustPercentageToSlowDown = 0x440; // float
		constexpr auto MaxLocalTimeUpdateAdjustPercentageToSlowDown = 0x444; // float
		constexpr auto MinLocalTimeUpdateAdjustPercentageToSpeedUp = 0x448; // float
		constexpr auto MaxLocalTimeUpdateAdjustPercentageToSpeedUp = 0x44c; // float
		constexpr auto MaxNumReplicatedTimeEntriesToAverage = 0x450; // uint32_t
		constexpr auto ReplicatedServerTime = 0x4a0; // FReplicatedAuthoritativeTime
	}

	namespace n_UGlitterBeardUnlockVFXCoordinatorComponent { // : UActorComponent
		constexpr auto TreeActor = 0xc8; // FActorComponentSelector
		constexpr auto TreeMaterialInstanceDynamic = 0xd8; // UMaterialInstanceDynamic*
		constexpr auto TreeBlendTime = 0xe0; // float
	}

	namespace n_UDebugMenuDataAsset { // : UDataAsset
		constexpr auto DataAssets = 0x28; // TArray<UDebugMenuDataAsset*>
		constexpr auto MenuEntires = 0x38; // TArray<FDebugMenuDataAssetEntry>
		constexpr auto ButtonShortcuts = 0x48; // TArray<FDebugMenuButtonShortcut>
		constexpr auto MenuEntryGenerators = 0x58; // TArray<UDebugMenuEntryGenerator*>
	}

	namespace n_ULandmarkReactionEventCallFunction { // : ULandmarkReactionEvent
		constexpr auto Target = 0x28; // AActor*
		constexpr auto UseDefaultTarget = 0x30; // bool
	}

	namespace n_UStorageContainerContentTypeSelectorEntries { // : UDataAsset
		constexpr auto ContentSpawners = 0x28; // TArray<FTypedStorageContainerContentTypeSelectorEntry>
	}

	namespace n_UIslandServiceIslandTextureProviderComponent { // : UActorComponent
		constexpr auto IslandTextureSourceType = 0xd0; // EIslandTextureSourceType
	}

	namespace n_UPirateLegendSectionBundle { // : UDataAsset
		constexpr auto FeatureName = 0x28; // FName
		constexpr auto Entries = 0x30; // TArray<FPLSectionBundleEntry>
	}

	namespace n_ABattleElevator { // : AHangingPlatform
		constexpr auto InstancedNavMeshComponent = 0xad8; // UInstancedNavMeshComponent*
		constexpr auto ExplosionScriptInterface = 0xae0; // TScriptInterface<Class>
		constexpr auto SpectacleMechanismInterface = 0xaf0; // TScriptInterface<Class>
		constexpr auto BattleElevatorLocators = 0xb00; // ULocatorContainer*
		constexpr auto NamedPointsComponent = 0xb08; // UNamedPointsComponent*
		constexpr auto DamageableComponent = 0xb10; // UDamageableComponent*
		constexpr auto ChainPivotComponents = 0xb18; // TArray<USceneComponent*>
		constexpr auto ChainAnchorLocations = 0xb28; // TArray<FVector>
		constexpr auto OverrideTransitionPeriod = 0xb50; // float
		constexpr auto ExplosionNamedPointsGroupName = 0xbe4; // FName
	}

	namespace n_ULandmarkReactionEventStartParticleSystem { // : ULandmarkReactionEvent
		constexpr auto ComponentName = 0x38; // FName
		constexpr auto ComponentIndex = 0x40; // int32_t
		constexpr auto AudioCue = 0x48; // UWwiseEvent*
	}

	namespace n_UTeleportLungeAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto NamedControllerParams = 0x28; // TArray<FAthenaAIControllerParamValue>
		constexpr auto DamageIntervalCountingMode = 0x38; // EAIAbilityDamageIntervalCounterMode
		constexpr auto UseTimeBetweenAbility = 0x39; // bool
		constexpr auto ActivationTimerCooldown = 0x40; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto TimeBetweenAbility = 0x50; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto UseDamageBetweenAbility = 0x60; // bool
		constexpr auto DamageBetweenAbility = 0x68; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto AbilityRadius = 0x78; // float
		constexpr auto UseMinMaxAttackRange = 0x7c; // bool
		constexpr auto MinMaxAttackRange = 0x80; // FMinMaxAbilityRange
		constexpr auto FollowUpAbilities = 0x88; // TArray<FAIAbilityFollowUp>
		constexpr auto Weight = 0x98; // float
		constexpr auto ContinuousCooldownAbilityParameters = 0xa0; // FAIAbilityContinuousCooldownParameterData
		constexpr auto AIAbilityTypeClass = 0xc0; // UAthenaAIAbilityType*
	}

	namespace n_UCompanyRegionComponent { // : UWorldRegionComponent
		constexpr auto WorldRegionName = 0x2b0; // FName
		constexpr auto RegionShanty = 0x2b8; // UObject*
		constexpr auto WorldRegionRadius = 0x2c0; // float
	}

	namespace n_UKrakenIdleBehaviourParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FKrakenIdleBehaviourParams
	}

	namespace n_UStormServiceAsset { // : UDataAsset
		constexpr auto StormParams = 0x28; // TArray<UStormParams*>
		constexpr auto StormCheckRadius = 0x38; // float
		constexpr auto ChanceOfForwardTimeStep = 0x3c; // float
		constexpr auto StaticTimeOffsetBounds = 0x40; // FFloatRange
	}

	namespace n_ATreasureMap { // : ASkeletalMeshWieldableItem
		constexpr auto WieldableCanvasRenderingComponent = 0x7a0; // UWieldableItemCanvasRenderingComponent*
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7b0; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x7b8; // UUsableWieldableComponent*
		constexpr auto QuestMapIcon = 0x7d2; // EQuestMapIcon
	}

	namespace n_UDiggingAudioDataAsset { // : UDataAsset
		constexpr auto AudioOverrides = 0x28; // TArray<FItemDiggingAudioOverride>
		constexpr auto Default = 0x38; // UItemDiggingAudioConfig*
		constexpr auto SfxPool = 0x40; // UWwiseObjectPoolWrapper*
	}

	namespace n_APrecomputedVisibilityVolume { // : AVolume
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UPetListingDataAsset { // : UDataAsset
		constexpr auto Entries = 0x28; // TArray<FPetListingTypeEntry>
	}

	namespace n_UWorldMarkerOnSpawnPositionComponent { // : UActorComponent
		constexpr auto ZOffset = 0xc8; // float
		constexpr auto MarkerVariant = 0xd0; // UWorldMarkerVariant*
	}

	namespace n_UAnimBlueprintGeneratedClass { // : UBlueprintGeneratedClass
		constexpr auto BakedStateMachines = 0x228; // TArray<FBakedAnimationStateMachine>
		constexpr auto TargetSkeleton = 0x238; // USkeleton*
		constexpr auto AnimNotifies = 0x240; // TArray<FAnimNotifyEvent>
		constexpr auto RootAnimNodeIndex = 0x250; // int32_t
		constexpr auto Groups = 0x270; // TArray<FAnimGroupInfo>
		constexpr auto SkeletonSlotNames = 0x280; // TArray<FName>
	}

	namespace n_UTeleportLocationComponent { // : USceneComponent
		constexpr auto TeleportLocation = 0x2b0; // FTeleportLocation
	}

	namespace n_UTutorialManager { // : UActorComponent
		constexpr auto CompanyOnboardingStarterClass = 0xc8; // UTutorialStarter*
		constexpr auto MaidenVoyageStarterClass = 0xd0; // UTutorialStarter*
		constexpr auto BeachNPCSpawnFlowStarterClass = 0xd8; // UTutorialStarter*
		constexpr auto SelectedTutorialClass = 0xe0; // UTutorialStarter*
		constexpr auto SelectedTutorial = 0xe8; // UTutorialStarter*
		constexpr auto HasEverPlayedFirstPersonAnimation = 0xf0; // bool
		constexpr auto HasStartedTutorial = 0xf1; // bool
		constexpr auto HasReceivedEntitlements = 0xf2; // bool
		constexpr auto HasPosessedPawn = 0xf3; // bool
	}

	namespace n_ATestWieldableInventoryItem { // : AWieldableItem
		constexpr auto InventoryItem = 0x790; // UInventoryItemComponent*
	}

	namespace n_UInterpFilter_Custom { // : UInterpFilter
		constexpr auto Caption = 0x28; // FString
	}

	namespace n_UAthenaCharacterMovementUnderwater { // : UDataAsset
		constexpr auto bSphere = 0x28; // bool
		constexpr auto Radius = 0x2c; // float
		constexpr auto HalfHeight = 0x30; // float
		constexpr auto PenResolveInflation = 0x34; // float
		constexpr auto PullBackDistance = 0x38; // float
		constexpr auto FanOutAngle = 0x3c; // float
		constexpr auto MaxFanOutScalar = 0x40; // float
		constexpr auto FanOutNumSteps = 0x44; // uint32_t
		constexpr auto IdleBobSpeed = 0x48; // float
		constexpr auto IdleBobDuration = 0x4c; // float
		constexpr auto CollisionProfileName = 0x50; // FName
		constexpr auto VelocityToAngle = 0x58; // UCurveFloat*
		constexpr auto MaxExpectedHits = 0x60; // uint32_t
		constexpr auto bDrawDebugCapsule = 0x64; // bool
		constexpr auto bDebugOldMovement = 0x65; // bool
	}

	namespace n_UParticleModuleLocationGPU { // : UParticleModuleLocationBase
		constexpr auto StartLocation = 0x50; // FRawDistributionVector
		constexpr auto AdditionalStartLocations = 0x88; // FRawDistributionVector [0x5]
		constexpr auto bUseGroupAStartLocationForAllGroups = 0x1a0; // char : 1
	}

	namespace n_USoundNodeWaveParam { // : USoundNode
		constexpr auto WaveParameterName = 0x38; // FName
	}

	namespace n_UMaterialBillboardComponent { // : UPrimitiveComponent
		constexpr auto Elements = 0x588; // TArray<FMaterialSpriteElement>
	}

	namespace n_AOneShotToggleCollisionAction { // : AActor
		constexpr auto CollisionActionRoot = 0x3d0; // USceneComponent*
		constexpr auto BlockingPrimitive = 0x3d8; // UPrimitiveComponent*
		constexpr auto MechanismActionComponent = 0x3e0; // UMechanismActionComponent*
		constexpr auto KnockbackArrowComponent = 0x3e8; // UArrowComponent*
		constexpr auto UseInactiveCollisionProfileByDefault = 0x3f0; // bool
		constexpr auto KnockBackInfo = 0x3f4; // FKnockBackInfo
		constexpr auto KnockbackGracePeriod = 0x444; // float
		constexpr auto InactiveCollisionProfileName = 0x448; // FCollisionProfileName
		constexpr auto ActiveCollisionProfileName = 0x450; // FCollisionProfileName
		constexpr auto AudioParams = 0x458; // FOneShotToggleCollisionAudioParams
	}

	namespace n_USelectionOfSirenStatues { // : UObject
		constexpr auto Statues = 0x28; // TArray<UClass*>
	}

	namespace n_URemoveMechanismTriggerStepDesc { // : UTaleQuestStepDesc
		constexpr auto Action = 0x80; // FQuestVariableActor
		constexpr auto Trigger = 0x90; // FQuestVariableActor
	}

	namespace n_USetTaleProgressStepDesc { // : UTaleQuestStepDesc
		constexpr auto TriggerVolume = 0x80; // FQuestVariableActor
	}

	namespace n_UShipwreckSiteGeneratorComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USpawnCollectableQuestObjectStepFromLocationDesc { // : USpawnCollectableQuestObjectStepDesc
		constexpr auto ItemLocation = 0x98; // FQuestVariableVector
	}

	namespace n_UMaterialExpressionPixelNormalWS { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UTaleQuestSetNPCDialogKeyStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UNPCDialogPredicateHasEntitlement { // : UNPCDialogPredicate
		constexpr auto Entitlement = 0x38; // UEntitlementDesc*
	}

	namespace n_UItemProxyShipTrackerComponentDataAsset { // : UDataAsset
		constexpr auto ShipTypes = 0x28; // TArray<AActor*>
	}

	namespace n_USeaFortsService { // : UObject
		constexpr auto World = 0x30; // UWorld*
		constexpr auto SeaFortsData = 0x38; // USeaFortsWorldDataAsset*
		constexpr auto SeaForts = 0x40; // TArray<ASeaFort*>
	}

	namespace n_APivotAnimatedMechanismActionProxy { // : ASimpleAnimatedMechanismActionProxy
		constexpr auto Animation = 0x410; // FMechanismFloatAnimationCurve
	}

	namespace n_UClearProgressSpawnStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UIsAIShipEncounterTypeStatCondition { // : UStatCondition
		constexpr auto EncounterType = 0x28; // EAIShipEncounterType
	}

	namespace n_UWaterEmissionVolumeComponent { // : USceneComponent
		constexpr auto Radius = 0x2b0; // float
		constexpr auto GenerationDensity = 0x2b4; // float
	}

	namespace n_ACapstanRelease { // : AInteractableObject
		constexpr auto MeshComponent = 0x460; // UStaticMeshComponent*
		constexpr auto TooltipSocket = 0x468; // FName
		constexpr auto ReleaseTime = 0x470; // float
	}

	namespace n_UCutSceneSubtitlesComponent { // : UActorComponent
		constexpr auto SubtitleSphereRadiusInCm = 0xd0; // float
		constexpr auto CanDrawDebugSubtitleRadius = 0xd4; // bool
		constexpr auto SubtitleRadiusOrigin = 0xd8; // FVector
		constexpr auto SubtitleSphereRadiusInCmSqr = 0xfc; // float
	}

	namespace n_AInteractableLightMock { // : AInteractableLight
		constexpr auto InteractableLightParameters = 0x470; // UInteractableLightParameters*
		constexpr auto SfxSwitchOn = 0x478; // UWwiseEvent*
		constexpr auto SfxSwitchOff = 0x480; // UWwiseEvent*
		constexpr auto SfxBurningPlay = 0x488; // UWwiseEvent*
		constexpr auto SfxBurningStop = 0x490; // UWwiseEvent*
		constexpr auto SfxSetFlame = 0x498; // UWwiseEvent*
		constexpr auto SfxPool = 0x4a0; // UWwiseObjectPoolWrapper*
		constexpr auto SfxEmitterName = 0x4a8; // FName
		constexpr auto InteractionRadius = 0x4b0; // float
		constexpr auto LightData = 0x4b4; // FLightData
		constexpr auto ObjectMessageDispatcher = 0x4b8; // FObjectMessagingDispatcher
	}

	namespace n_UPioneerComponent { // : UActorComponent
		constexpr auto PioneerPeriodicUpdateInterval = 0xc8; // float
		constexpr auto MinUpdateTime = 0xd0; // int64_t
		constexpr auto PioneersProgressTime = 0xe8; // int64_t
	}

	namespace n_UAddMechanismTriggerStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UAddMechanismTriggerStepDesc*
	}

	namespace n_UShipSpeedBand { // : UObject
		constexpr auto MinimumSpeed = 0x28; // float
	}

	namespace n_UPersistenceIdentifierSettings { // : UDeveloperSettings
		constexpr auto PersistenceIdentifierSettingsAsset = 0x38; // FStringAssetReference
	}

	namespace n_UFontImportOptions { // : UObject
		constexpr auto Data = 0x28; // FFontImportOptionsData
	}

	namespace n_UVectorFieldAnimated { // : UVectorField
		constexpr auto Texture = 0x48; // UTexture2D*
		constexpr auto ConstructionOp = 0x50; // EVectorFieldConstructionOp
		constexpr auto VolumeSizeX = 0x54; // int32_t
		constexpr auto VolumeSizeY = 0x58; // int32_t
		constexpr auto VolumeSizeZ = 0x5c; // int32_t
		constexpr auto SubImagesX = 0x60; // int32_t
		constexpr auto SubImagesY = 0x64; // int32_t
		constexpr auto FrameCount = 0x68; // int32_t
		constexpr auto FramesPerSecond = 0x6c; // float
		constexpr auto bLoop = 0x70; // char : 1
		constexpr auto NoiseField = 0x78; // UVectorFieldStatic*
		constexpr auto NoiseScale = 0x80; // float
		constexpr auto NoiseMax = 0x84; // float
	}

	namespace n_UBootyItemDesc { // : UItemWithoutIconsDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_AEmissaryVoteInteractionActor { // : AActor
		constexpr auto FadeDuration = 0x3e0; // float
		constexpr auto EmissaryActiveInfo = 0x3e8; // FEmissaryDisplayInformation
		constexpr auto EmissaryInactiveInfo = 0x478; // FEmissaryDisplayInformation
	}

	namespace n_UItemDiggingAnimationConfig { // : UObject
		constexpr auto PosSpringAccel = 0x28; // float
		constexpr auto RotSpringAccel = 0x2c; // float
		constexpr auto ZOffsetToStartFirstPosBlendFrom = 0x30; // float
		constexpr auto InitialZOffset = 0x34; // float
		constexpr auto FinalZOffset = 0x38; // float
		constexpr auto PercentageOfExhumingTravelLastDigDoes = 0x3c; // float
		constexpr auto PitchRollAngleRandomCurve = 0x40; // UCurveFloat*
		constexpr auto PitchRollRattleCurveWhileMoving = 0x48; // UCurveFloat*
	}

	namespace n_UMeleeChargeAIAbility { // : UAthenaAIAbility
		constexpr auto AngleChecker = 0x78; // FMeleeAIAbilityAngleChecker
	}

	namespace n_UBTService_UpdateTargetLocationForPassiveShip { // : UBTService
		constexpr auto TargetLocationKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UWaterSlideInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UControllableObjectNamedContextualOpenRadialAction { // : UOpenRadialAction
		constexpr auto RadialContexts = 0x30; // TArray<FContextAction>
		constexpr auto CanExecuteRadial = 0x40; // URadialCreationRuleAsset*
	}

	namespace n_UAnimationEditorSettings { // : UDeveloperSettings
		constexpr auto CustomAnimationMontageIdListings = 0x38; // FStringAssetReference
	}

	namespace n_UBTDecorator_IsOccupiedHangoutSpotStillAvailable { // : UBTDecorator_BaseConditional
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UEventBroadcastStepDesc { // : UTaleQuestStepDesc
		constexpr auto EventName = 0x80; // FName
	}

	namespace n_UEmblemReward { // : UReward
		constexpr auto EmblemId = 0x28; // FEmblemId
	}

	namespace n_UFogVolumeComponent { // : USceneComponent
		constexpr auto Color = 0x2b0; // FLinearColor
		constexpr auto SceneFogSaturation = 0x2c0; // float
		constexpr auto Density = 0x2c4; // float
		constexpr auto HeightFogFalloff = 0x2c8; // float
		constexpr auto DistanceFalloffPower = 0x2cc; // float
		constexpr auto ShadowIntensity = 0x2d0; // float
		constexpr auto ScaleOnTranslucency = 0x2d4; // float
		constexpr auto FogVelocity = 0x2d8; // FVector
		constexpr auto NoisePrimaryScale = 0x2e4; // FVector
		constexpr auto NoiseSecondaryScale = 0x2f0; // FVector
		constexpr auto NoiseBlend = 0x2fc; // float
		constexpr auto VolumeTexture = 0x300; // UTexture*
		constexpr auto InscatteringIntensity = 0x308; // float
		constexpr auto InscatteringPower = 0x30c; // float
		constexpr auto ShadowDistance = 0x310; // float
		constexpr auto ActiveBelowDepth = 0x314; // float
		constexpr auto bUseSceneInscattering = 0x318; // char : 1
		constexpr auto bUnderwater = 0x31c; // bool
		constexpr auto bAdvancedVolumeFog = 0x31d; // bool
		constexpr auto UseDensityMapOnTranslucency = 0x31e; // bool
		constexpr auto DensityMap = 0x320; // UTexture*
		constexpr auto DensityMapScale = 0x328; // FVector
		constexpr auto DensityMapOffset = 0x334; // FVector
		constexpr auto DensityMapActiveHemisphereOrigin = 0x340; // FVector
		constexpr auto DensityMapActiveHemisphereDirection = 0x34c; // FVector
		constexpr auto DensityMapActiveHemisphereInnerRadius = 0x358; // float
		constexpr auto DensityMapActiveHemisphereOuterRadius = 0x35c; // float
		constexpr auto SelfShadowBrightness = 0x360; // float
		constexpr auto SelfShadowFogScale = 0x364; // float
		constexpr auto bMeshFog = 0x368; // bool
		constexpr auto MeshFogDensity = 0x36c; // float
		constexpr auto MeshFogShadowDensity = 0x370; // float
		constexpr auto MeshFogScatteringDensity = 0x374; // float
		constexpr auto MeshFogNoisePrimaryScale = 0x378; // FVector
		constexpr auto MeshFogNoiseSecondaryScale = 0x384; // FVector
		constexpr auto MeshFogNoiseBlend = 0x390; // float
		constexpr auto MeshFogVelocity = 0x394; // FVector
		constexpr auto MeshFogVolumeTexture = 0x3a0; // UTexture*
	}

	namespace n_UConditionalNPCDialogSettings { // : UDeveloperSettings
		constexpr auto ConditionalNPCDialogServiceSettingsLocation = 0x38; // FStringAssetReference
	}

	namespace n_UCollectorsChestItemSlotDefinitionDataAsset { // : UDataAsset
		constexpr auto AllowedObjects = 0x28; // TArray<FCollectorsChestItemSlotDefinition>
		constexpr auto AllowAll = 0x38; // bool
	}

	namespace n_UBTTask_MoveToMovingLocation { // : UBTTask_AthenaMoveTo
		constexpr auto MinimumLocationMovementForRePath = 0xb8; // float
		constexpr auto MinimumTimeBeforeRePath = 0xbc; // float
		constexpr auto IsContinuous = 0xc0; // bool
	}

	namespace n_ASkeletonActionStateCreatorDefinition { // : AActionStateCreatorDefinition
		constexpr auto AISpawnParams = 0x3d0; // FAISpawnActionStateParams
		constexpr auto AIDeadParams = 0x3e0; // FAIDeadActionStateParams
		constexpr auto UseItemParams = 0x3e4; // FUseItemActionStateParams
		constexpr auto UseCannonParams = 0x3e8; // FUseCannonActionStateParams
		constexpr auto RepairObjectParams = 0x448; // FRepairObjectActionStateParams
		constexpr auto ControlObjectParams = 0x44c; // FControlObjectActionStateParams
		constexpr auto HiddenStateParams = 0x464; // FHiddenActionStateParams
	}

	namespace n_UAthenaAIAbilityStageParams { // : UObject
		constexpr auto AbilityCooldownSpeedMultiplier = 0x28; // float
		constexpr auto DamageRequiredForNextIntervalMultiplier = 0x2c; // float
		constexpr auto OverrideParams = 0x30; // bool
		constexpr auto AutoActivateOnStageTransition = 0x31; // bool
		constexpr auto TypeClass = 0x38; // UAthenaAIAbilityType*
	}

	namespace n_UAthenaCharacterKnockbackComponent { // : UActorComponent
		constexpr auto Disabled = 0xd0; // bool
		constexpr auto Character = 0xd8; // AAthenaCharacter*
	}

	namespace n_UMaterialExpressionPanner { // : UMaterialExpression
		constexpr auto Coordinate = 0x70; // FExpressionInput
		constexpr auto Time = 0xa8; // FExpressionInput
		constexpr auto SpeedX = 0xe0; // float
		constexpr auto SpeedY = 0xe4; // float
		constexpr auto ConstCoordinate = 0xe8; // uint32_t
		constexpr auto bFractionalPart = 0xec; // bool
	}

	namespace n_UAssociateActorToCrewTaskStepDesc { // : UTaleQuestStepDesc
		constexpr auto TaskDesc = 0x80; // UTaleQuestStepDesc*
		constexpr auto ActorToAssociate = 0x88; // FQuestVariableActor
	}

	namespace n_UEmblemSettings { // : UObject
		constexpr auto EmblemDefinitionAssetListLocation = 0x28; // FStringAssetReference
	}

	namespace n_UPlayerGeneratedMapsContainerComponentDataAsset { // : UDataAsset
		constexpr auto WorldRegionMappings = 0x28; // TArray<FWorldRegionMapping>
		constexpr auto IslandsToExcludeFromTavernBoardDisplay = 0x38; // TArray<FName>
	}

	namespace n_ATavernStepsTrigger { // : AActor
		constexpr auto ReactionEventsOpen = 0x3d0; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto ReactionEventsCancel = 0x3e0; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto ShantyDelayBeforeStepsOpen = 0x3f0; // float
		constexpr auto CollisionRoot = 0x3f8; // USceneComponent*
		constexpr auto StepsListenerTriggerComponent = 0x400; // USphereComponent*
		constexpr auto PlayersInTavernTriggerComponent = 0x408; // USphereComponent*
		constexpr auto ShantyWorldRegionComponent = 0x410; // UWorldRegionComponent*
		constexpr auto PlayMagicEvent = 0x418; // UWwiseEvent*
		constexpr auto StopMagicEvent = 0x420; // UWwiseEvent*
		constexpr auto ShantyMagicEmitter = 0x428; // FWwiseEmitter
		constexpr auto ReactionEventPlayerOpen = 0x448; // ALandmarkReactionPlayer*
		constexpr auto AnimatedSteps = 0x450; // UAnimatedStepsComponent*
		constexpr auto StepsState = 0x458; // EStepsTriggerState
		constexpr auto ActorsPlayingInstruments = 0x460; // TArray<AActor*>
	}

	namespace n_UMaterialExpressionConstant3Vector { // : UMaterialExpression
		constexpr auto Constant = 0x70; // FLinearColor
	}

	namespace n_USpawnPhasedActorStepDesc { // : UTaleQuestStepDesc
		constexpr auto SocketName = 0x80; // FName
		constexpr auto Actor = 0x88; // UClass*
		constexpr auto LocationVar = 0xa8; // FQuestVariableActor
		constexpr auto ActorVar = 0xb8; // FQuestVariableActor
		constexpr auto bAttachToSocket = 0xc8; // bool
	}

	namespace n_UEditableGameplayTagQueryExpression_AllTagsMatch { // : UEditableGameplayTagQueryExpression
		constexpr auto Tags = 0x28; // FGameplayTagContainer
	}

	namespace n_UMerchantContractsService { // : UObject
		constexpr auto Contracts = 0x30; // TArray<FMerchantContract>
	}

	namespace n_UEelSlapAIAbility { // : UMeleeAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_UBodySetup2D { // : UBodySetup
		constexpr auto AggGeom2D = 0x2c8; // FAggregateGeometry2D
	}

	namespace n_UCrewOwnershipTrackingComponentMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_ALandscapeProxy { // : AActor
		constexpr auto SplineComponent = 0x3d8; // ULandscapeSplinesComponent*
		constexpr auto LandscapeGuid = 0x3e0; // FGuid
		constexpr auto LandscapeSectionOffset = 0x3f0; // FIntPoint
		constexpr auto MaxLODLevel = 0x3f8; // int32_t
		constexpr auto StaticLightingLOD = 0x3fc; // int32_t
		constexpr auto DefaultPhysMaterial = 0x400; // UPhysicalMaterial*
		constexpr auto StreamingDistanceMultiplier = 0x408; // float
		constexpr auto LandscapeMaterial = 0x410; // UMaterialInterface*
		constexpr auto LandscapeHoleMaterial = 0x418; // UMaterialInterface*
		constexpr auto LODDistanceFactor = 0x420; // float
		constexpr auto LandscapeComponents = 0x428; // TArray<ULandscapeComponent*>
		constexpr auto CollisionComponents = 0x438; // TArray<ULandscapeHeightfieldCollisionComponent*>
		constexpr auto FoliageComponents = 0x448; // TArray<UHierarchicalInstancedStaticMeshComponent*>
		constexpr auto StaticLightingResolution = 0x4d0; // float
		constexpr auto LandscapeActor = 0x4d4; // ALandscape*
		constexpr auto bCastStaticShadow = 0x4f0; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x4f0; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x4f0; // char : 1
		constexpr auto bCastFarShadow = 0x4f0; // char : 1
		constexpr auto bIsProxy = 0x4f0; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x4f0; // char : 1
		constexpr auto LpvIntensityMultiplier = 0x4f4; // float
		constexpr auto LpvBiasMultiplier = 0x4f8; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x4fc; // float
		constexpr auto LightmassSettings = 0x500; // FLightmassPrimitiveSettings
		constexpr auto CollisionMipLevel = 0x518; // int32_t
		constexpr auto CollisionThickness = 0x51c; // float
		constexpr auto BodyInstance = 0x520; // FBodyInstance
		constexpr auto ComponentSizeQuads = 0x6a0; // int32_t
		constexpr auto SubsectionSizeQuads = 0x6a4; // int32_t
		constexpr auto NumSubsections = 0x6a8; // int32_t
		constexpr auto bUsedForNavigation = 0x6ac; // char : 1
		constexpr auto bReflected = 0x6ac; // char : 1
		constexpr auto NavigationGeometryGatheringMode = 0x6b0; // ENavDataGatheringMode
		constexpr auto LODFalloff = 0x6b1; // ELandscapeLODFalloff
	}

	namespace n_UGhostCharacterAudioComponent { // : UActorComponent
		constexpr auto GhostShipPlayEvents = 0xc8; // TArray<UWwiseEvent*>
		constexpr auto GhostShipWaterphonePlay = 0xd8; // UWwiseEvent*
		constexpr auto GhostShipMusicStopAll = 0xe0; // UWwiseEvent*
		constexpr auto GhostShipAmbiencePlay = 0xe8; // UWwiseEvent*
		constexpr auto GhostShipAmbienceStop = 0xf0; // UWwiseEvent*
		constexpr auto GhostShipEventChangeMinTriggerTime = 0xf8; // float
		constexpr auto GhostShipEventChangeMaxTriggerTime = 0xfc; // float
		constexpr auto GhostCharacterAudioParams = 0x100; // UGhostCharacterAudioComponentParams*
		constexpr auto FootfallParams = 0x108; // UCharacterAudioFootfallControllerParams*
	}

	namespace n_UTaleQuestAddBountyMapStepDesc { // : UTaleQuestStepDesc
		constexpr auto MapId = 0x80; // FName
		constexpr auto IslandName = 0x88; // FQuestVariableName
		constexpr auto Location = 0x98; // FQuestVariableText
		constexpr auto Description = 0xa8; // FQuestVariableTextArray
		constexpr auto CaptainTargets = 0xb8; // FQuestVariableBountyTargetArray
		constexpr auto CrewTargets = 0xc8; // FQuestVariableBountyTargetArray
		constexpr auto CustomLayout = 0xd8; // UBountyMapLayout*
		constexpr auto OverrideTreasureMapItemDesc = 0xe0; // UTreasureMapItemDesc*
	}

	namespace n_USplineMeshComponent { // : UStaticMeshComponent
		constexpr auto SplineParams = 0x5f8; // FSplineMeshParams
		constexpr auto SplineUpDir = 0x650; // FVector
		constexpr auto bAllowSplineEditingPerInstance = 0x65c; // char : 1
		constexpr auto bSmoothInterpRollScale = 0x65c; // char : 1
		constexpr auto ForwardAxis = 0x660; // ESplineMeshAxis
		constexpr auto SplineBoundaryMin = 0x664; // float
		constexpr auto SplineBoundaryMax = 0x668; // float
		constexpr auto BodySetup = 0x670; // UBodySetup*
		constexpr auto CachedMeshBodySetupGuid = 0x678; // FGuid
		constexpr auto bMeshDirty = 0x688; // char : 1
	}

	namespace n_UAbilityTask_Repeat { // : UAbilityTask
		constexpr auto OnPerformAction = 0x68; // FScriptMulticastDelegate
		constexpr auto OnFinished = 0x78; // FScriptMulticastDelegate
	}

	namespace n_UAthenaSpringArmComponent { // : USpringArmComponent
		constexpr auto TargetArmLength = 0x2b0; // float
		constexpr auto SocketOffset = 0x2b4; // FVector
		constexpr auto TargetOffset = 0x2c0; // FVector
		constexpr auto ProbeSize = 0x2cc; // float
		constexpr auto ProbeChannel = 0x2d0; // ECollisionChannel
		constexpr auto bDoCollisionTest = 0x2d4; // char : 1
		constexpr auto bUsePawnControlRotation = 0x2d4; // char : 1
		constexpr auto bInheritPitch = 0x2d4; // char : 1
		constexpr auto bInheritYaw = 0x2d4; // char : 1
		constexpr auto bInheritRoll = 0x2d4; // char : 1
		constexpr auto bEnableCameraLag = 0x2d4; // char : 1
		constexpr auto bEnableCameraRotationLag = 0x2d4; // char : 1
		constexpr auto bUseCameraLagSubstepping = 0x2d4; // char : 1
		constexpr auto bDrawDebugLagMarkers = 0x2d5; // char : 1
		constexpr auto CameraLagSpeed = 0x2d8; // float
		constexpr auto CameraRotationLagSpeed = 0x2dc; // float
		constexpr auto CameraLagMaxTimeStep = 0x2e0; // float
		constexpr auto CameraLagMaxDistance = 0x2e4; // float
	}

	namespace n_UDebugTaleAddInstancedLevelStepDesc { // : UTaleQuestStepDesc
		constexpr auto InstancedLevelKeyword = 0x80; // FText
		constexpr auto InstancedLevelIndex = 0xb8; // uint32_t
	}

	namespace n_UReviveGhostAnimationInstance { // : UAnimInstance
		constexpr auto ReviveAnimations = 0x448; // FReviveGhostAnimations
		constexpr auto FullyInitialised = 0x470; // bool
		constexpr auto FullyRevived = 0x471; // bool
		constexpr auto FromSwimming = 0x472; // bool
	}

	namespace n_URewardedCurrencyConditionalStatsTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UTaleQuestNumericSwitchStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestNumericSwitchStepDesc*
		constexpr auto CurrentStep = 0x98; // UTaleQuestStep*
	}

	namespace n_UAudioSpaceDataAsset { // : UDataAsset
		constexpr auto RtpcToUpdate = 0x28; // FName
		constexpr auto AmbienceToStart = 0x30; // UWwiseEvent*
		constexpr auto AmbienceToStop = 0x38; // UWwiseEvent*
	}

	namespace n_UTaleQuestMakeStructStep { // : UTaleQuestStructStepBase
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTaleQuestAddCargoRunMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_AMemoryTestPawn { // : APawn
		constexpr auto Speed = 0x448; // float
		constexpr auto OnIslandVisited = 0x450; // FScriptMulticastDelegate
	}

	namespace n_UAbilityTask_WaitAttributeChange { // : UAbilityTask
		constexpr auto OnChange = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UServerMigrationSerialisationDetailsTestsMigratableComponent { // : UActorComponent
		constexpr auto FloatWithMigrationMarkup = 0xc8; // float
		constexpr auto IntWithNoMarkup = 0xcc; // int32_t
	}

	namespace n_UNavigationSettings { // : UDeveloperSettings
		constexpr auto DirectionNorth = 0x38; // FVector
		constexpr auto CompassDirectionLocTags = 0x48; // TArray<FString>
	}

	namespace n_UAthenaAnimationServerData { // : UAnimationServerData
		constexpr auto AISpawnData = 0x28; // TArray<FAthenaAnimationServerAnimAISpawnData>
	}

	namespace n_UMovieSceneStringSection { // : UMovieSceneSection
		constexpr auto StringCurve = 0xa0; // FStringCurve
	}

	namespace n_UMechanismAnimationEvent_ContinuousVFX { // : UMechanismAnimationEvent_VFX
		constexpr auto StartTime = 0x78; // float
		constexpr auto StopTime = 0x7c; // float
		constexpr auto VFXParams = 0x80; // FMechanismAnimationEvent_VFXParams
	}

	namespace n_ALargeWieldableMockActor { // : AWieldableMockActor
		constexpr auto InventoryItem = 0x7b0; // UInventoryItemComponent*
	}

	namespace n_UAtmosphericFogComponent { // : USceneComponent
		constexpr auto SunMultiplier = 0x2b0; // float
		constexpr auto FogMultiplier = 0x2b4; // float
		constexpr auto DensityMultiplier = 0x2b8; // float
		constexpr auto DensityOffset = 0x2bc; // float
		constexpr auto DistanceScale = 0x2c0; // float
		constexpr auto AltitudeScale = 0x2c4; // float
		constexpr auto DistanceOffset = 0x2c8; // float
		constexpr auto GroundOffset = 0x2cc; // float
		constexpr auto StartDistance = 0x2d0; // float
		constexpr auto SunDiscScale = 0x2d4; // float
		constexpr auto DefaultBrightness = 0x2d8; // float
		constexpr auto DefaultLightColor = 0x2dc; // FColor
		constexpr auto bDisableSunDisk = 0x2e0; // char : 1
		constexpr auto bDisableGroundScattering = 0x2e0; // char : 1
		constexpr auto PrecomputeParams = 0x2e4; // FAtmospherePrecomputeParameters
		constexpr auto TransmittanceTexture = 0x310; // UTexture2D*
		constexpr auto IrradianceTexture = 0x318; // UTexture2D*
	}

	namespace n_APlayerController { // : AController
		constexpr auto Player = 0x430; // UPlayer*
		constexpr auto AcknowledgedPawn = 0x440; // APawn*
		constexpr auto ControllingDirTrackInst = 0x448; // UInterpTrackInstDirector*
		constexpr auto MyHUD = 0x458; // AHUD*
		constexpr auto PlayerCameraManager = 0x460; // APlayerCameraManager*
		constexpr auto PlayerCameraManagerClass = 0x468; // APlayerCameraManager*
		constexpr auto bAutoManageActiveCameraTarget = 0x470; // bool
		constexpr auto TargetViewRotation = 0x474; // FRotator
		constexpr auto HiddenActors = 0x490; // TArray<AActor*>
		constexpr auto LastSpectatorStateSynchTime = 0x4a0; // float
		constexpr auto LastSpectatorSyncLocation = 0x4a4; // FVector
		constexpr auto LastSpectatorSyncRotation = 0x4b0; // FRotator
		constexpr auto ClientCap = 0x4bc; // int32_t
		constexpr auto CheatManager = 0x4c0; // UCheatManager*
		constexpr auto CheatClass = 0x4c8; // UCheatManager*
		constexpr auto PlayerInput = 0x4d0; // UPlayerInput*
		constexpr auto ActiveForceFeedbackEffects = 0x4d8; // TArray<FActiveForceFeedbackEffect>
		constexpr auto bPlayerIsWaiting = 0x578; // char : 1
		constexpr auto NetPlayerIndex = 0x57c; // char
		constexpr auto bHasVoiceHandshakeCompleted = 0x57d; // bool
		constexpr auto PendingSwapConnection = 0x580; // UNetConnection*
		constexpr auto NetConnection = 0x588; // UNetConnection*
		constexpr auto InputYawScale = 0x59c; // float
		constexpr auto InputPitchScale = 0x5a0; // float
		constexpr auto InputRollScale = 0x5a4; // float
		constexpr auto bShowMouseCursor = 0x5a8; // char : 1
		constexpr auto bEnableClickEvents = 0x5a8; // char : 1
		constexpr auto bEnableTouchEvents = 0x5a8; // char : 1
		constexpr auto bEnableMouseOverEvents = 0x5a8; // char : 1
		constexpr auto bEnableTouchOverEvents = 0x5a8; // char : 1
		constexpr auto bForceFeedbackEnabled = 0x5a8; // char : 1
		constexpr auto DefaultMouseCursor = 0x5ac; // EMouseCursor
		constexpr auto CurrentMouseCursor = 0x5ad; // EMouseCursor
		constexpr auto DefaultClickTraceChannel = 0x5ae; // ECollisionChannel
		constexpr auto CurrentClickTraceChannel = 0x5af; // ECollisionChannel
		constexpr auto HitResultTraceDistance = 0x5b0; // float
		constexpr auto ForceFeedbackIntensity = 0x5b4; // float
		constexpr auto InactiveStateInputComponent = 0x640; // UInputComponent*
		constexpr auto CurrentTouchInterface = 0x668; // UTouchInterface*
		constexpr auto SpectatorPawn = 0x6a0; // ASpectatorPawn*
		constexpr auto SpawnLocation = 0x6a8; // FVector
		constexpr auto LevelInputComponents = 0x6b8; // TMap<ULevel*, UInputComponent*>
		constexpr auto bIsLocalPlayerController = 0x71c; // bool
		constexpr auto SeamlessTravelCount = 0x71e; // uint16_t
		constexpr auto LastCompletedSeamlessTravelCount = 0x720; // uint16_t
		constexpr auto bInCinematicMode = 0x722; // bool
	}

	namespace n_UMovieSceneCameraAnimTrack { // : UMovieSceneNameableTrack
		constexpr auto CameraAnimSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UTaleQuestMultiTargetCompassAddTrackedLocationStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestMultiTargetCompassAddTrackedLocationStepDesc*
	}

	namespace n_ULandmarkReactionTriggerComponent { // : UActorComponent
		constexpr auto ReactionFrames = 0xd0; // TArray<FLandmarkReactionKeyFrame>
	}

	namespace n_UBroadcasterPuzzleStatueAudioParamsDataAsset { // : UDataAsset
		constexpr auto BroadcasterInitiateReactionSequence = 0x28; // UWwiseEvent*
		constexpr auto SuccessHumStart = 0x30; // UWwiseEvent*
		constexpr auto SuccessHumStop = 0x38; // UWwiseEvent*
		constexpr auto SuccessWaterLevelUp = 0x40; // UWwiseEvent*
		constexpr auto SuccessWaterLevelDown = 0x48; // UWwiseEvent*
		constexpr auto SuccessGeneralActivation = 0x50; // UWwiseEvent*
		constexpr auto UnsuccessfulSequence = 0x58; // UWwiseEvent*
		constexpr auto ShockwaveEffect = 0x60; // UWwiseEvent*
	}

	namespace n_UBTTask_PlayCustomMontageId { // : UBTTaskNode
		constexpr auto CustomAnimationMontageId = 0x60; // FCustomAnimationMontageId
		constexpr auto TimeToWaitOnServer = 0x68; // float
	}

	namespace n_UGameplayEffectCalculation { // : UObject
		constexpr auto RelevantAttributesToCapture = 0x28; // TArray<FGameplayEffectAttributeCaptureDefinition>
	}

	namespace n_UClothingLoadoutContainsItemRadialContext { // : URadialContextBase
		constexpr auto TargetItem = 0x28; // UClothingDesc*
	}

	namespace n_ULightComponentBase { // : USceneComponent
		constexpr auto LightGuid = 0x2b0; // FGuid
		constexpr auto Brightness = 0x2c0; // float
		constexpr auto Intensity = 0x2c4; // float
		constexpr auto LightColor = 0x2c8; // FColor
		constexpr auto bAffectsWorld = 0x2cc; // char : 1
		constexpr auto CastShadows = 0x2cc; // char : 1
		constexpr auto CastStaticShadows = 0x2cc; // char : 1
		constexpr auto CastDynamicShadows = 0x2cc; // char : 1
		constexpr auto bAffectTranslucentLighting = 0x2cc; // char : 1
		constexpr auto bPrecomputedLightingIsValid = 0x2cc; // char : 1
		constexpr auto RainOcclusion = 0x2cc; // char : 1
		constexpr auto IndirectLightingIntensity = 0x2d0; // float
		constexpr auto ScaleForTranslucency = 0x2d4; // float
		constexpr auto CapForTranslucency = 0x2d8; // float
	}

	namespace n_UAimOffsetBlendSpace1D { // : UBlendSpace1D
		constexpr auto bScaleAnimation = 0x108; // bool
	}

	namespace n_UEdGraph { // : UObject
		constexpr auto Schema = 0x28; // UEdGraphSchema*
		constexpr auto Nodes = 0x30; // TArray<UEdGraphNode*>
		constexpr auto bEditable = 0x40; // char : 1
		constexpr auto bAllowDeletion = 0x40; // char : 1
		constexpr auto bAllowRenaming = 0x40; // char : 1
	}

	namespace n_UDiggingBuryParamsDataAsset { // : UDataAsset
		constexpr auto Overrides = 0x28; // TArray<FItemBuryingBaseOverride>
		constexpr auto Default = 0x38; // UItemDiggingBuryConfig*
	}

	namespace n_UItemInfoHealthMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UAthenaAnimationWeaponDataAsset { // : UDataAsset
		constexpr auto WeaponData = 0x28; // FAthenaAnimationWeaponData
	}

	namespace n_ASharkPawn { // : ASwimmingCreaturePawn
		constexpr auto RammerComponent = 0x928; // URammerComponent*
		constexpr auto SharkAudioComponent = 0x930; // USharkAICharacterAudioComponent*
		constexpr auto AllowTestForQuickDeath = 0x938; // bool
		constexpr auto DistanceToGroundForQuickDeath = 0x93c; // float
		constexpr auto DistanceToGroundTestTraceChannel = 0x940; // ECollisionChannel
		constexpr auto CheckIntervalForQuickDeath = 0x944; // float
		constexpr auto ExtentEstimationPow = 0x948; // uint32_t
		constexpr auto CollisionComponentServerProfile = 0x94c; // FCollisionProfileName
		constexpr auto CollisionComponentClientProfile = 0x954; // FCollisionProfileName
	}

	namespace n_UNavModifierComponent { // : UNavRelevantComponent
		constexpr auto AreaClass = 0xf8; // UNavArea*
		constexpr auto FailsafeExtent = 0x100; // FVector
	}

	namespace n_APointLight { // : ALight
		constexpr auto PointLightComponent = 0x3e0; // UPointLightComponent*
	}

	namespace n_UTaleQuestBreakStructStepDesc { // : UTaleQuestStructStepDescBase
		constexpr auto Struct = 0x80; // UScriptStruct*
		constexpr auto PropertyMappings = 0x88; // TMap<FName, FName>
	}

	namespace n_USirenTridentProjectileParams { // : UDataAsset
		constexpr auto ParameterState = 0x28; // ESirenTridentProjectileState
		constexpr auto ExplosionParams = 0x30; // FExplosionInfo
		constexpr auto CollisionRadius = 0x170; // float
		constexpr auto MaterialScale = 0x174; // float
		constexpr auto MaterialScaleChangeDuration = 0x178; // float
		constexpr auto LaunchSpeed = 0x17c; // float
		constexpr auto ChargeTime = 0x180; // float
		constexpr auto LifeSpan = 0x184; // float
		constexpr auto AmmoCost = 0x188; // int32_t
		constexpr auto VfxCustomParameterValue = 0x18c; // float
		constexpr auto ProjectileAudioSwitchState = 0x190; // FName
		constexpr auto TrailSfxEventStart = 0x198; // UWwiseEvent*
		constexpr auto TrailSfxEventStop = 0x1a0; // UWwiseEvent*
		constexpr auto ImpactId = 0x1a8; // UImpactProjectileId*
		constexpr auto FireForceFeedback = 0x1b0; // UForceFeedbackEffect*
		constexpr auto SizeChangeForceFeedback = 0x1b8; // UForceFeedbackEffect*
	}

	namespace n_USharkAICharacterAudioComponent { // : UAICharacterAudioComponent
		constexpr auto SharkAudioParams = 0x2e0; // USharkAICharacterAudioComponentParams*
		constexpr auto CachedStrategyID = 0x408; // UAIStrategyId*
	}

	namespace n_UNPCOnShipDataAsset { // : UDataAsset
		constexpr auto NPCOnSurfaceDataAsset = 0x28; // UNPCOnSurfaceDataAsset*
		constexpr auto RestrictedIslands = 0x30; // TArray<FName>
		constexpr auto PlayersLeftShipRespawnCooldown = 0x40; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimeBetweenShipStateChecks = 0x70; // float
		constexpr auto TimeBetweenNPCUnderwaterChecks = 0x74; // float
		constexpr auto TimeBetweenNPCOnFireChecks = 0x78; // float
		constexpr auto EnemyShipNearbyDistanceXYInMetres = 0x7c; // float
		constexpr auto TimeBetweenRadialStateChecks = 0x80; // float
		constexpr auto TimeBetweenHideWhenInDangerChecks = 0x84; // float
	}

	namespace n_ATestShipActorPhysicsErrorCorrection { // : AShip
		constexpr auto OnGetPhysicsErrorCorrection = 0x14d0; // FScriptMulticastDelegate
	}

	namespace n_UStorageContainerSpawnerItemFeatureBasedWeightedItemList { // : UStorageContainerSpawnerWeightedItemList
		constexpr auto FeatureGroups = 0x38; // TArray<FStorageContainerWeightedItemListFeatureGroup>
	}

	namespace n_UMovieSceneMarginTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UActorDamageableComponent { // : UDamageableComponent
		constexpr auto HealthComp = 0x180; // UHealthComponent*
	}

	namespace n_UMoviePlayerSettings { // : UObject
		constexpr auto bWaitForMoviesToComplete = 0x28; // bool
		constexpr auto bMoviesAreSkippable = 0x29; // bool
		constexpr auto StartupMovies = 0x30; // TArray<FString>
	}

	namespace n_UBTTask_AthenaMoveTo { // : UBTTask_MoveTo
		constexpr auto ShouldFailBeforeSlowDown = 0xa0; // bool
		constexpr auto ExitBeforeSlowDownDistanceTolerance = 0xa4; // float
		constexpr auto ShouldOverrideMaxSpeedToSlow = 0xa8; // bool
		constexpr auto OverrideMaxSpeedToSlowDistanceFactor = 0xac; // float
		constexpr auto MaintainFacingBeforeMove = 0xb0; // bool
	}

	namespace n_ALadder { // : AInteractableBase
		constexpr auto MeshComponent = 0x428; // UStaticMeshComponent*
		constexpr auto OnTopSplineComponent = 0x430; // USplineComponent*
		constexpr auto OffTopSplineComponent = 0x438; // USplineComponent*
		constexpr auto MaxDistFromLadderTopToClassifyAsTopDocking = 0x440; // float
		constexpr auto InteractOffset = 0x444; // FVector
		constexpr auto LadderDefinition = 0x450; // FLadderDefinition
		constexpr auto LadderPhysicsMaterial = 0x470; // UPhysicalMaterial*
		constexpr auto Phrases = 0x478; // UPhrasesRadialDataAsset*
		constexpr auto RepeatExecutionThreshold = 0x480; // float
	}

	namespace n_UParticleModule { // : UObject
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UBurrowAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto ValidBurrowSurfaceTypes = 0xc8; // TArray<EPhysicalSurface>
		constexpr auto BurrowCrackToSpawn = 0xd8; // ABurrowCrack*
		constexpr auto BurrowEruptArea = 0xe0; // ABurrowEruptBase*
		constexpr auto EnvQueryLinesToTarget = 0xe8; // UEnvQuery*
		constexpr auto EnvQueryAroundTarget = 0xf0; // UEnvQuery*
		constexpr auto OffsetPositionForStartTrace = 0xf8; // FVector
		constexpr auto SurfaceDetectRaycastLength = 0x104; // float
		constexpr auto BurrowAroundTargetRange = 0x108; // float
		constexpr auto MaxSurfaceAngleForBurrow = 0x10c; // float
		constexpr auto bEruptFromClosestSpawn = 0x110; // bool
		constexpr auto EruptionDelayRndBetweenMinMaxSeconds = 0x114; // FMinMaxBurrowAbility
		constexpr auto NumberOfCrackWavesMinMax = 0x11c; // FMinMaxBurrowAbility
		constexpr auto RndSecondsBetweenCrackWaves = 0x124; // FMinMaxBurrowAbility
		constexpr auto NumberOfCracksPerWaveMinMax = 0x12c; // FMinMaxBurrowAbility
		constexpr auto RndSecondsBetweenEachCrackSpawn = 0x134; // FMinMaxBurrowAbility
	}

	namespace n_UPottableComponent { // : UActorComponent
		constexpr auto CanBePutInPot = 0xd0; // bool
	}

	namespace n_UGiveVoyageOnWieldItemComponent { // : UOnItemWieldedComponent
		constexpr auto VoyageRecipe = 0x150; // UVoyageRecipeDataAsset*
		constexpr auto SourceType = 0x158; // EEmergentVoyageSource
	}

	namespace n_UTransformBlendCurveComponent { // : UActorComponent
		constexpr auto Curve = 0xd0; // FTransformBlendCurve
	}

	namespace n_UStatusResponsePlayAudioLoopOnAllClients { // : UStatusResponse
		constexpr auto StartLoopEvent = 0x30; // UWwiseEvent*
		constexpr auto StopLoopEvent = 0x38; // UWwiseEvent*
	}

	namespace n_ASkeletalMeshItemProxy { // : AItemProxy
		constexpr auto InteractionPointRadius = 0x558; // float
		constexpr auto GroundImpactSfx = 0x560; // UWwiseEvent*
		constexpr auto VFXParams = 0x568; // TArray<FItemProxyImpactVfxParams>
		constexpr auto ZOffsetWhenPlacingWorldProxy = 0x578; // float
		constexpr auto RotationWhenPlacingWorldProxy = 0x57c; // FRotator
		constexpr auto DropOnSurfaceClientTraceChannel = 0x588; // ECollisionChannel
		constexpr auto ThirdPersonMesh = 0x590; // UPrimitiveComponent*
		constexpr auto TTL = 0x598; // float
		constexpr auto WaterInteractionComponent = 0x5a0; // UWaterInteractionComponent*
		constexpr auto BuoyancyComponent = 0x5a8; // UBuoyancyComponent*
		constexpr auto CachedProxySurfaceType = 0x5b1; // EPhysicalSurface
		constexpr auto CachedOnTopOfExistingBuriable = 0x5b2; // bool
		constexpr auto ItemInfo = 0x5b8; // AItemInfo*
		constexpr auto TTLPlayerProximityCutoff = 0x61c; // float
		constexpr auto TTLRecheckPeriod = 0x620; // float
	}

	namespace n_UInteractableLightParameters { // : UDataAsset
		constexpr auto LiveUpdate = 0x28; // bool
		constexpr auto StartLit = 0x29; // bool
		constexpr auto LightParams = 0x30; // TArray<FInteractableLightParams>
	}

	namespace n_UObtainMapPieceOnWieldComponent { // : UOnItemWieldedComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UIslandAirPocketComponent { // : UActorComponent
		constexpr auto AirGivingVolumes = 0xd0; // TArray<FAirGivingVolumeData>
	}

	namespace n_UEnvQueryGenerator_Donut { // : UEnvQueryGenerator_ProjectedPoints
		constexpr auto InnerRadius = 0x90; // FAIDataProviderFloatValue
		constexpr auto OuterRadius = 0xc0; // FAIDataProviderFloatValue
		constexpr auto NumberOfRings = 0xf0; // FAIDataProviderIntValue
		constexpr auto PointsPerRing = 0x120; // FAIDataProviderIntValue
		constexpr auto ArcDirection = 0x150; // FEnvDirection
		constexpr auto ArcAngle = 0x170; // FAIDataProviderFloatValue
		constexpr auto RandomiseRadius = 0x1a0; // bool
		constexpr auto Center = 0x1a8; // UEnvQueryContext*
		constexpr auto bDefineArc = 0x1b0; // char : 1
	}

	namespace n_URammableComponent { // : UActorComponent
		constexpr auto DamageSettings = 0xd0; // URammableDamageDataAsset*
		constexpr auto MinIntervalBetweenRamDamage = 0xd8; // float
		constexpr auto OwnerDamageable = 0xe0; // TScriptInterface<Class>
		constexpr auto OwnerMovement = 0xf0; // TScriptInterface<Class>
	}

	namespace n_UParticleModuleTypeDataGpu { // : UParticleModuleTypeDataBase
		constexpr auto EmitterInfo = 0x50; // FGPUSpriteEmitterInfo
		constexpr auto ResourceData = 0x2f0; // FGPUSpriteResourceData
		constexpr auto CameraMotionBlurAmount = 0xcf0; // float
		constexpr auto bClearExistingParticlesOnInit = 0xcf4; // char : 1
		constexpr auto AlphaCullingAggressiveness = 0xcf8; // EParticleAlphaThresholdLevel
		constexpr auto bOverrideAlphaThreshold = 0xcfc; // char : 1
		constexpr auto OverriddenAlphaThreshold = 0xd00; // float
		constexpr auto InteractionWithKillPlane = 0xd04; // EInteractionWithKillPlane
		constexpr auto KillPlanePointLocation = 0xd05; // EKillPlaneKillPointLocation
		constexpr auto FadingTimeWhenKilled = 0xd08; // float
	}

	namespace n_UStorageContainerSpawnerCount { // : UDataAsset
		constexpr auto NumSpawners = 0x28; // FWeightedProbabilityRange
		constexpr auto MinDifferentSpawners = 0x48; // int32_t
		constexpr auto MaxDifferentSpawners = 0x4c; // int32_t
	}

	namespace n_UImpactDataAsset { // : UDataAsset
		constexpr auto DecalMaterial = 0x28; // UMaterialInterface*
		constexpr auto DecalParamModifiers = 0x30; // TArray<UImpactDecalParamModifier*>
		constexpr auto DecalSize = 0x40; // FVector
		constexpr auto FadeScreenSize = 0x4c; // float
		constexpr auto DecalLifetime = 0x50; // float
		constexpr auto Particles = 0x58; // UObject*
		constexpr auto TriggeredForClientParticles = 0x60; // UObject*
		constexpr auto SplashParticles = 0x68; // UObject*
		constexpr auto ParticlesVfxRegion = 0x70; // EVfxRegion
		constexpr auto WwiseEvent = 0x78; // UWwiseEvent*
		constexpr auto WwiseEventLayer = 0x80; // UWwiseEvent*
		constexpr auto WwiseObjectPool = 0x88; // UWwiseObjectPoolWrapper*
		constexpr auto ParticleSystemIsPerPoint = 0x90; // bool
		constexpr auto AttachToPlayer = 0x91; // bool
		constexpr auto EnableUnderWaterImpact = 0x92; // bool
		constexpr auto MaxDepthForSplash = 0x94; // float
	}

	namespace n_UAggressiveGhostShipFixedSplinesDataAsset { // : UDataAsset
		constexpr auto Splines = 0x28; // TArray<FAggressiveGhostShipFixedSpline>
	}

	namespace n_UDockToObjectDisengageInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AWaterPuzzleAlterationMechanismActionProxy { // : AToggleAnimatedMechanismActionProxy
		constexpr auto PuzzleActor = 0x438; // AActor*
		constexpr auto WaterReactionDelay = 0x440; // float
		constexpr auto WaterLevelCapacity = 0x444; // int32_t
		constexpr auto MinimumMouthOpenDuration = 0x448; // float
	}

	namespace n_ULightingControllerSettings { // : UDataAsset
		constexpr auto FogDensityCurve = 0x28; // UCurveFloat*
		constexpr auto FogStartDistanceCurve = 0x30; // UCurveFloat*
		constexpr auto LightIntensityCurve = 0x38; // UCurveFloat*
		constexpr auto SkyDomeBrightnessCurve = 0x40; // UCurveFloat*
		constexpr auto SkyDomeMoonVisibilityCurve = 0x48; // UCurveFloat*
		constexpr auto SkyDomeStarBrightnessCurve = 0x50; // UCurveFloat*
		constexpr auto SkyDomeSunBrightnessCurve = 0x58; // UCurveFloat*
		constexpr auto PostLPVIntensityCurve = 0x60; // UCurveFloat*
		constexpr auto PostExposureBiasCurve = 0x68; // UCurveFloat*
		constexpr auto PostLPVOcclusionIntensityCurve = 0x70; // UCurveFloat*
		constexpr auto SkyLightIntensityCurve = 0x78; // UCurveFloat*
		constexpr auto FogBrightnessNearCurve = 0x80; // UCurveFloat*
		constexpr auto FogBrightnessFarCurve = 0x88; // UCurveFloat*
		constexpr auto PostBloomIntensityCurve = 0x90; // UCurveFloat*
		constexpr auto PostBloomThresholdCurve = 0x98; // UCurveFloat*
		constexpr auto SkyDomeAuraBrightnessCurve = 0xa0; // UCurveFloat*
		constexpr auto PostReflectionProbeBrightnessCurve = 0xa8; // UCurveFloat*
		constexpr auto PostReflectionProbeShadowBrightnessCurve = 0xb0; // UCurveFloat*
		constexpr auto VfxControllerCurve = 0xb8; // UCurveFloat*
		constexpr auto FogMaxOpacityCurve = 0xc0; // UCurveFloat*
		constexpr auto FogScatterExpCurve = 0xc8; // UCurveFloat*
		constexpr auto FogUnderwaterDensityCurve = 0xd0; // UCurveFloat*
		constexpr auto PostLensFlareIntensityCurve = 0xd8; // UCurveFloat*
		constexpr auto EmissiveFoliageCurve = 0xe0; // UCurveFloat*
		constexpr auto EmissiveLightsCurve = 0xe8; // UCurveFloat*
		constexpr auto PostExposureMinBrightnessCurve = 0xf0; // UCurveFloat*
		constexpr auto PostExposureMaxBrightnessCurve = 0xf8; // UCurveFloat*
		constexpr auto SkyDomeMoonBrightnessCurve = 0x100; // UCurveFloat*
		constexpr auto SkyDomeHorizonCloudBrightnessCurve = 0x108; // UCurveFloat*
		constexpr auto SkyDomeGreenFlashStrengthCurve = 0x110; // UCurveFloat*
		constexpr auto PostSaturationCurve = 0x118; // UCurveFloat*
		constexpr auto PostContrastCurve = 0x120; // UCurveFloat*
		constexpr auto CloudRimlightScaleCurve = 0x128; // UCurveFloat*
		constexpr auto CloudSkylightScaleCurve = 0x130; // UCurveFloat*
		constexpr auto CloudSunlightScaleCurve = 0x138; // UCurveFloat*
		constexpr auto CloudGlobalPressureCurve = 0x140; // UCurveFloat*
		constexpr auto PostUnderWaterBrightnessCurve = 0x148; // UCurveFloat*
		constexpr auto VfxCloudBrightnessCurve = 0x150; // UCurveFloat*
		constexpr auto LightGodRayIntensityCurve = 0x158; // UCurveFloat*
		constexpr auto CloudBottomBrightnessCurve = 0x160; // UCurveFloat*
		constexpr auto CloudSunlightShadowingCurve = 0x168; // UCurveFloat*
		constexpr auto SunDiscScaleCurve = 0x170; // UCurveFloat*
		constexpr auto WaterSpecularBrightnessCurve = 0x178; // UCurveFloat*
		constexpr auto VfxAmbientScaleCurve = 0x180; // UCurveFloat*
		constexpr auto CloudShadowBrightnessCurve = 0x188; // UCurveFloat*
		constexpr auto StormCloudShadowBrightnessCurve = 0x190; // UCurveFloat*
		constexpr auto StormPostBloomIntensityCurve = 0x198; // UCurveFloat*
		constexpr auto StormPostBloomThresholdCurve = 0x1a0; // UCurveFloat*
		constexpr auto DirectionalLightShadowSteppingRateCurve = 0x1a8; // UCurveFloat*
		constexpr auto SkullBrightnessCurve = 0x1b0; // UCurveFloat*
		constexpr auto FogColourAwayCurve = 0x1b8; // UCurveLinearColor*
		constexpr auto FogColourTowardsCurve = 0x1c0; // UCurveLinearColor*
		constexpr auto LightSunColourCurve = 0x1c8; // UCurveLinearColor*
		constexpr auto SkyDomeHorizonColourCurve = 0x1d0; // UCurveLinearColor*
		constexpr auto SkyDomeZenithColourCurve = 0x1d8; // UCurveLinearColor*
		constexpr auto SkyLightColourCurve = 0x1e0; // UCurveLinearColor*
		constexpr auto PostAmbientShadowColourCurve = 0x1e8; // UCurveLinearColor*
		constexpr auto FogColourAwayFarCurve = 0x1f0; // UCurveLinearColor*
		constexpr auto FogColourUnderwaterCurve = 0x1f8; // UCurveLinearColor*
		constexpr auto FogColourAwayUnderwaterCurve = 0x200; // UCurveLinearColor*
		constexpr auto WaterColourCurve = 0x208; // UCurveLinearColor*
		constexpr auto WaterColourShallowCurve = 0x210; // UCurveLinearColor*
		constexpr auto WaterBackLitColourCurve = 0x218; // UCurveLinearColor*
		constexpr auto WaterFoamColourCurve = 0x220; // UCurveLinearColor*
		constexpr auto WaterFoamHighlightColourCurve = 0x228; // UCurveLinearColor*
		constexpr auto WaterAmbientColourCurve = 0x230; // UCurveLinearColor*
		constexpr auto PostReflectionProbeTintCurve = 0x238; // UCurveLinearColor*
		constexpr auto CloudRimlightColourCurve = 0x240; // UCurveLinearColor*
		constexpr auto CloudSkylightColourCurve = 0x248; // UCurveLinearColor*
		constexpr auto CloudSunlightColourCurve = 0x250; // UCurveLinearColor*
		constexpr auto PostUnderWaterTintCurve = 0x258; // UCurveLinearColor*
		constexpr auto SkyDomeMoonColourCurve = 0x260; // UCurveLinearColor*
		constexpr auto PostGammaCurve = 0x268; // UCurveLinearColor*
		constexpr auto SkyDomeSunColourCurve = 0x270; // UCurveLinearColor*
		constexpr auto VFXFoamColourCurve = 0x278; // UCurveLinearColor*
		constexpr auto VFXWindColourCurve = 0x280; // UCurveLinearColor*
		constexpr auto VFXUnderwaterTintCurve = 0x288; // UCurveLinearColor*
		constexpr auto StormRainColourCurve = 0x290; // UCurveLinearColor*
		constexpr auto StormSkyLightColourCurve = 0x298; // UCurveLinearColor*
		constexpr auto StormPostGammaCurve = 0x2a0; // UCurveLinearColor*
		constexpr auto StormFogColourUnderwaterCurve = 0x2a8; // UCurveLinearColor*
		constexpr auto StormFogColourAwayUnderwaterCurve = 0x2b0; // UCurveLinearColor*
		constexpr auto StormWaterColourCurve = 0x2b8; // UCurveLinearColor*
		constexpr auto StormWaterColourShallowCurve = 0x2c0; // UCurveLinearColor*
		constexpr auto StormWaterBackLitColourCurve = 0x2c8; // UCurveLinearColor*
		constexpr auto StormWaterFoamColourCurve = 0x2d0; // UCurveLinearColor*
		constexpr auto StormWaterFoamHighlightColourCurve = 0x2d8; // UCurveLinearColor*
		constexpr auto StormWaterAmbientColourCurve = 0x2e0; // UCurveLinearColor*
		constexpr auto StormPostReflectionProbeTintCurve = 0x2e8; // UCurveLinearColor*
		constexpr auto SkullEyeColourCurve = 0x2f0; // UCurveLinearColor*
		constexpr auto SandColourStatic = 0x2f8; // FLinearColor
		constexpr auto FogUnderwaterMaxOpacityStatic = 0x308; // float
		constexpr auto FogUnderwaterScatterExpStatic = 0x30c; // float
		constexpr auto FogUnderwaterStartDistanceStatic = 0x310; // float
		constexpr auto FogUnderwaterBrightnessNearStatic = 0x314; // float
		constexpr auto FogUnderwaterBrightnessFarStatic = 0x318; // float
		constexpr auto FogDirectionalInscatteringStartStatic = 0x31c; // float
		constexpr auto FogUnderwaterDirectionalInscatteringStartStatic = 0x320; // float
		constexpr auto UnderwaterDirectionalLightMinBrightnessStatic = 0x324; // float
	}

	namespace n_UMaterialExpressionTextureBase { // : UMaterialExpression
		constexpr auto Texture = 0x70; // UTexture*
		constexpr auto SamplerType = 0x78; // EMaterialSamplerType
		constexpr auto IsDefaultMeshpaintTexture = 0x7c; // char : 1
	}

	namespace n_UEmoteSettings { // : UDeveloperSettings
		constexpr auto NumPages = 0x38; // int32_t
		constexpr auto ExpandedAndCompactEmoteRadialNumPages = 0x3c; // int32_t
	}

	namespace n_UMaterialExpressionParticleMacroUV { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UNPCDialogConditional { // : UObject
		constexpr auto ConditionalExpected = 0x28; // bool
	}

	namespace n_UNPCDialogPredicateReadAllOf { // : UNPCDialogPredicate
		constexpr auto SectionName = 0x38; // FString
	}

	namespace n_UPlayerNonVerbalComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UWaitUntilAllParticipantsEnterRadiusStep { // : UParticipantRadiusTrackerStepDesc
		constexpr auto DurationBetweenChecks = 0x80; // float
		constexpr auto Location = 0x88; // FQuestVariableVector
		constexpr auto Radius = 0x98; // FQuestVariableFloat
	}

	namespace n_UCancelVoyageVotableComponent { // : UVotableVoyageProposalComponent
		constexpr auto TooltipUIFadeDuration = 0x248; // float
		constexpr auto TooltipUIScreenSpaceOffsetRatio = 0x24c; // FVector2D
		constexpr auto ProposedEntry = 0x258; // FProposedVoyageEntry
		constexpr auto ProposedTale = 0x268; // FProposedTaleEntry
		constexpr auto VotableMeshComponent = 0x280; // UStaticMeshComponent*
	}

	namespace n_UTaleQuestAddMerchantMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto IslandName = 0x88; // FQuestVariableName
		constexpr auto DeliveryLocation = 0x98; // FQuestVariableText
		constexpr auto DeliverByTime = 0xa8; // FQuestVariableText
		constexpr auto Items = 0xb8; // FQuestVariableMerchantItemArray
		constexpr auto Layout = 0xc8; // UMerchantMapLayout*
	}

	namespace n_AStormService { // : AActor
		constexpr auto StormList = 0x420; // TArray<AActor*>
	}

	namespace n_ULevelSequencePlayer { // : UMovieSceneSequencePlayer
		constexpr auto SpawnablesParent = 0x600; // AActor*
	}

	namespace n_UTaleEnchantedSpyglassServiceDesc { // : UTaleQuestToolServiceDesc
		constexpr auto EnchantedSpyglassDesc = 0x30; // UItemDesc*
	}

	namespace n_UTaleQuestSequenceStepDesc { // : UTaleQuestFramedStepDesc
		constexpr auto Descs = 0xa0; // TArray<UTaleQuestStepDesc*>
	}

	namespace n_UTaleLoadSpireStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_URegisterServerMigrationPointOfInterestComponent { // : UActorComponent
		constexpr auto MigrationRadius = 0xc8; // float
	}

	namespace n_ACoveredMeshActor { // : AStaticMeshActor
		constexpr auto InstancedCoverageMeshComponent = 0x3e0; // UInstancedCoverageMeshComponent*
	}

	namespace n_UTaleQuestSpawnWashedUpSkeletonClueStepDesc { // : UTaleQuestStepDesc
		constexpr auto ClueSite = 0x80; // FQuestVariableClueSite
		constexpr auto ClueDescriptor = 0x90; // FQuestVariableClueDescriptor
		constexpr auto SkeletonActor = 0xa0; // FQuestVariableActor
		constexpr auto ClueItem = 0xb0; // FQuestVariableItemInfo
		constexpr auto SkeletonClueSocketName = 0xc0; // FName
	}

	namespace n_URumbleHandlerComponent { // : UActorComponent
		constexpr auto RumbleParameters = 0xc8; // TArray<FRumbleParameters>
	}

	namespace n_UAnimNotify_DestroyAllCosmeticItems { // : UAnimNotify
		constexpr auto PlayedWithSequencer = 0x28; // bool
	}

	namespace n_UPlayerNameDataAsset { // : UDataAsset
		constexpr auto PlayerNameOverrides = 0x28; // TArray<FText>
	}

	namespace n_ASceneDialogueCoordinator { // : AActor
		constexpr auto LinkedActors = 0x3e0; // TArray<AActor*>
		constexpr auto DialogueData = 0x3f0; // USceneDialogueData*
		constexpr auto LocalisableNames = 0x3f8; // TArray<FText>
		constexpr auto DefaultMessageDistance = 0x408; // float
	}

	namespace n_UInterpGroupDirector { // : UInterpGroup
		constexpr auto InterpTracks = 0x30; // TArray<UInterpTrack*>
		constexpr auto GroupName = 0x40; // FName
		constexpr auto GroupColor = 0x48; // FColor
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bVisible = 0x4c; // char : 1
		constexpr auto bIsFolder = 0x4c; // char : 1
		constexpr auto bIsParented = 0x4c; // char : 1
		constexpr auto bIsSelected = 0x4c; // char : 1
	}

	namespace n_AForceSpot { // : AInteractableObject
		constexpr auto InteractableComponent = 0x468; // UInteractableComponent*
		constexpr auto InteractionSplineComponent = 0x470; // USplineComponent*
		constexpr auto ForceScalar = 0x478; // float
		constexpr auto InteractionDisplayName = 0x480; // FText
		constexpr auto InteractionRadius = 0x4b8; // float
	}

	namespace n_UPlayerBuriedItemServiceHaulSizeDataAsset { // : UDataAsset
		constexpr auto HaulSizes = 0x28; // TArray<FPlayerBuriedItemServiceHaulSizeEntry>
	}

	namespace n_UPocketWatchItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UCharacterVfxComponent { // : UActorComponent
		constexpr auto WindVFX = 0xc8; // UParticleSystemComponent*
		constexpr auto OwnerCharacter = 0xd0; // AAthenaPlayerCharacter*
	}

	namespace n_ULandscapeHeightfieldCollisionComponent { // : UPrimitiveComponent
		constexpr auto ComponentLayerInfos = 0x588; // TArray<ULandscapeLayerInfoObject*>
		constexpr auto SectionBaseX = 0x598; // int32_t
		constexpr auto SectionBaseY = 0x59c; // int32_t
		constexpr auto CollisionSizeQuads = 0x5a0; // int32_t
		constexpr auto CollisionScale = 0x5a4; // float
		constexpr auto CollisionQuadFlags = 0x5a8; // TArray<char>
		constexpr auto HeightfieldGuid = 0x5b8; // FGuid
		constexpr auto CachedLocalBox = 0x5c8; // FBox
		constexpr auto RenderComponent = 0x5e4; // ULandscapeComponent*
		constexpr auto CookedPhysicalMaterials = 0x610; // TArray<UPhysicalMaterial*>
	}

	namespace n_UBTDecorator_CompareCurrentHealth { // : UBTDecorator_CompareFloatValueBase
		constexpr auto Comparison = 0x80; // EFloatValueComparisonType
		constexpr auto Value = 0x88; // FAIDataProviderFloatValue
	}

	namespace n_UNamedPointsComponent { // : UActorComponent
		constexpr auto NamedPointsAsset = 0xe8; // UNamedPointsCollectionListDataAsset*
	}

	namespace n_ACursedCaptainsSkullWieldable { // : ASimpleBootyWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UPetsServiceParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FPetsServiceParams
	}

	namespace n_UBillboardComponent { // : UPrimitiveComponent
		constexpr auto Sprite = 0x588; // UTexture2D*
		constexpr auto bIsScreenSizeScaled = 0x590; // char : 1
		constexpr auto ScreenSize = 0x594; // float
		constexpr auto U = 0x598; // float
		constexpr auto UL = 0x59c; // float
		constexpr auto V = 0x5a0; // float
		constexpr auto VL = 0x5a4; // float
	}

	namespace n_UAthenaGameplayDebuggingComponent { // : UGameplayDebuggingComponent
		constexpr auto CurrentServerActionStates = 0x7b8; // TArray<FString>
		constexpr auto CurrentAIStrategyId = 0x7c8; // UAIStrategyId*
		constexpr auto CachedAIAbilities = 0x7d0; // TArray<FDebugReplicatedAbilityData>
		constexpr auto CachedAITargetPickingData = 0x7e0; // TArray<FAthenaAIControllerTargetPickingData>
		constexpr auto NextAbility = 0x7f0; // UAthenaAIAbilityType*
		constexpr auto QueuedAbility = 0x7f8; // UAthenaAIAbilityType*
		constexpr auto ReadiedAbilities = 0x800; // TArray<UAthenaAIAbilityType*>
		constexpr auto AIAbilityComponent = 0x810; // UAthenaAIAbilityHandlerComponent*
		constexpr auto FollowUpAbilitySet = 0x818; // bool
		constexpr auto CurrentAbilityStageIndex = 0x81c; // int32_t
		constexpr auto AbilitiesActiveInCurrentStage = 0x820; // TArray<UAthenaAIAbilityType*>
	}

	namespace n_UBTDecorator_Blackboard { // : UBTDecorator_BlackboardBase
		constexpr auto IntValue = 0x90; // int32_t
		constexpr auto FloatValue = 0x94; // float
		constexpr auto StringValue = 0x98; // FString
		constexpr auto CachedDescription = 0xa8; // FString
		constexpr auto OperationType = 0xb8; // char
		constexpr auto NotifyObserver = 0xb9; // EBTBlackboardRestart
	}

	namespace n_AGhostShipTickManager { // : AActor
		constexpr auto GhostShipActors = 0x3d0; // TArray<AActor*>
	}

	namespace n_UCookingComponentAudioParams { // : UDataAsset
		constexpr auto CookingPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto EmitterOffsetVector = 0x30; // FVector
		constexpr auto FoodPlaceInPot = 0x40; // UWwiseEvent*
		constexpr auto CookingStart = 0x48; // UWwiseEvent*
		constexpr auto CookingStop = 0x50; // UWwiseEvent*
		constexpr auto CookingTypeSwitchGroup = 0x58; // FName
		constexpr auto CookingTypeSizzle = 0x60; // FName
		constexpr auto CookingTypeSimmer = 0x68; // FName
		constexpr auto FoodTypeSwitchGroup = 0x70; // FName
		constexpr auto FoodTypeFruit = 0x78; // FName
		constexpr auto FoodTypeMeat = 0x80; // FName
		constexpr auto FoodTypeRareMeat = 0x88; // FName
		constexpr auto FoodCookedAmount = 0x90; // FName
		constexpr auto MaxCookingRtpcAmount = 0x98; // float
	}

	namespace n_USpawnActorStep { // : USpawnActorBaseStep
		constexpr auto Desc = 0x98; // USpawnActorStepDesc*
	}

	namespace n_UMaterialExpressionFontSample { // : UMaterialExpression
		constexpr auto Font = 0x70; // UFont*
		constexpr auto FontTexturePage = 0x78; // int32_t
	}

	namespace n_UWrapBox { // : UPanelWidget
		constexpr auto InnerSlotPadding = 0x150; // FVector2D
	}

	namespace n_UParticleModuleVectorFieldRotationRate { // : UParticleModuleVectorFieldBase
		constexpr auto RotationRate = 0x50; // FVector
	}

	namespace n_UPopUpNotificationComponent { // : UActorComponent
		constexpr auto RewardPopUpNotifications = 0xc8; // TArray<URewardPopUpNotificationDataAsset*>
		constexpr auto DeferralReasonPopUpNotifications = 0xd8; // TArray<UDeferralReasonPopUpNotificationDataAsset*>
		constexpr auto CampaignPopUpNotifications = 0xe8; // TArray<UCampaignPopUpNotificationDataAsset*>
		constexpr auto PeriodicObjectiveCompletePopUp = 0xf8; // UPopUpMessageDesc*
		constexpr auto PeriodicObjectiveIncompletePopUp = 0x100; // UPopUpMessageDesc*
		constexpr auto NPCOnBeachFlowPopUpNoTaleCheckpointVoyage = 0x108; // UPopUpMessageDesc*
		constexpr auto NPCOnBeachFlowPopUpHasTaleCheckpointVoyage = 0x110; // UPopUpMessageDesc*
		constexpr auto CrewNotificationDataAsset = 0x118; // UCrewNotificationSettings*
		constexpr auto EmissaryState = 0x120; // FEmissaryNotificationState
		constexpr auto NewTitlesAvailableToBuyPopUp = 0x130; // UPopUpMessageDesc*
		constexpr auto PrioritisedPrompts = 0x138; // UPrioritisedPromptsManager*
		constexpr auto EmissaryLevelSettings = 0x140; // UEmissaryLevelSettingsAsset*
	}

	namespace n_UItemProxyWatercraftTrackerComponentDataAsset { // : UDataAsset
		constexpr auto WatercraftTypes = 0x28; // TArray<AActor*>
	}

	namespace n_URadialSettingsAsset { // : UDataAsset
		constexpr auto BaseRadialCreationRules = 0x28; // TArray<FBaseRadialEntry>
		constexpr auto BlockingAnalogInputs = 0x38; // TArray<UAnalogInputId*>
		constexpr auto MinRadialSectorUnselectableFraction = 0x48; // float
		constexpr auto MaxRadialSectorUnselectableFraction = 0x4c; // float
		constexpr auto MinSelectionMagnitude = 0x50; // float
		constexpr auto SelectionTimeout = 0x54; // float
	}

	namespace n_UShipPartsCatalogueDataAsset { // : UDataAsset
		constexpr auto Catalogue = 0x28; // FShipPartsCatalogue
	}

	namespace n_ACoherentUIGTGameHUD { // : AHUD
		constexpr auto CoherentUIGTHUD = 0x4c8; // UCoherentUIGTHUD*
	}

	namespace n_UElectricShieldBuffComponent { // : UActorComponent
		constexpr auto ShieldVFXAsset = 0xd0; // UParticleSystem*
		constexpr auto VfxSocketName = 0xd8; // FName
		constexpr auto StartAudioLoopEvent = 0xe0; // UWwiseEvent*
		constexpr auto StopAudioLoopEvent = 0xe8; // UWwiseEvent*
		constexpr auto IsShieldActive = 0xf0; // bool
		constexpr auto ShieldEffectComponent = 0xf8; // UParticleSystemComponent*
	}

	namespace n_UVulnerabilityAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto VulnerabilityDurationMultiplier = 0x40; // float
		constexpr auto MaxVulnerabilityPeriodHealthMultiplier = 0x44; // float
	}

	namespace n_UShipNamesDataAsset { // : UDataAsset
		constexpr auto Names = 0x28; // TArray<FText>
	}

	namespace n_UEditorOnlyChildActorComponent { // : UChildActorComponent
		constexpr auto CachedChildActorClass = 0x2d0; // AActor*
	}

	namespace n_UVotableBaseComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ALevelStreamingVolume { // : AVolume
		constexpr auto StreamingLevelNames = 0x408; // TArray<FName>
		constexpr auto bEditorPreVisOnly = 0x418; // char : 1
		constexpr auto bDisabled = 0x418; // char : 1
		constexpr auto StreamingUsage = 0x41c; // EStreamingVolumeUsage
	}

	namespace n_UContestVoyagesDataAsset { // : UDataAsset
		constexpr auto Contests = 0x28; // TArray<FContestVoyageInfo>
		constexpr auto TallTaleContests = 0x38; // TArray<FTallTaleContestInfo>
	}

	namespace n_UHeightTriggerableAudioComponentParams { // : UDataAsset
		constexpr auto Pool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto RisingOneShot = 0x30; // UWwiseEvent*
		constexpr auto RisingStart = 0x38; // UWwiseEvent*
		constexpr auto RisingStop = 0x40; // UWwiseEvent*
		constexpr auto LoweringStart = 0x48; // UWwiseEvent*
		constexpr auto LoweringStop = 0x50; // UWwiseEvent*
	}

	namespace n_UDrawSphereComponent { // : USphereComponent
		constexpr auto SphereRadius = 0x5a8; // float
	}

	namespace n_UAIClassIdTypeList { // : UDataAsset
		constexpr auto AllClassIds = 0x28; // TArray<UAIClassId*>
	}

	namespace n_AWieldableReplica { // : AActor
		constexpr auto MeshComponent = 0x3d8; // UPrimitiveComponent*
		constexpr auto CachedAnimationSet = 0x3e0; // UCosmeticItemAnimationSetDataAsset*
		constexpr auto ReplicaCategory = 0x3e8; // UItemCategory*
	}

	namespace n_ULockMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UAthenaProjectilesThrottledTickCollectionAsset { // : UDataAsset
		constexpr auto ProjectileTickPools = 0x28; // TArray<FThrottledProjectileTickPool>
	}

	namespace n_UMaterialExpressionCausticTextureCoordinate { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UStatusResponseBallast { // : UStatusResponse
		constexpr auto Duration = 0x30; // float
		constexpr auto WaterLevel = 0x34; // float
	}

	namespace n_UDemoPendingNetGame { // : UPendingNetGame
		constexpr auto NetDriver = 0x30; // UNetDriver*
		constexpr auto PreLoadedMapPackage = 0xe8; // UPackage*
		constexpr auto PreLoadedWorld = 0xf0; // UWorld*
	}

	namespace n_UBlueprintMechanismResetComponent { // : UActorComponent
		constexpr auto ResetMechanismInBlueprint = 0xd0; // FScriptMulticastDelegate
	}

	namespace n_UBTDecorator_ConeCheck { // : UBTDecorator
		constexpr auto ConeHalfAngle = 0x68; // float
		constexpr auto ConeOrigin = 0x70; // FBlackboardKeySelector
		constexpr auto ConeDirection = 0x98; // FBlackboardKeySelector
		constexpr auto Observed = 0xc0; // FBlackboardKeySelector
	}

	namespace n_UBTService_ObserveTargetReceivedDamage { // : UBTService
		constexpr auto ObservedActorKey = 0x70; // FBlackboardKeySelector
		constexpr auto HasObservedActorReceivedSufficientDamageResultKey = 0x98; // FBlackboardKeySelector
		constexpr auto ObservedActorDamageThreshold = 0xc0; // FAIDataProviderFloatValue
	}

	namespace n_UNPCDialogPredicateEquals { // : UNPCDialogPredicate
		constexpr auto ParameterName = 0x38; // FName
		constexpr auto Value = 0x40; // FString
	}

	namespace n_UAISenseConfig_Touch { // : UAISenseConfig
		constexpr auto MaxAge = 0x28; // float
		constexpr auto bStartsEnabled = 0x2c; // char : 1
	}

	namespace n_UCommodityTokenEntitlementDesc { // : UEntitlementDesc
		constexpr auto NPCToRedeemAt = 0xd8; // FName
		constexpr auto ItemToRedeemFor = 0xe0; // UItemDesc*
	}

	namespace n_UPlayerCrewComponent { // : UActorComponent
		constexpr auto OnCrewSessionChangedEventDispatcher = 0xe0; // TScriptInterface<Class>
		constexpr auto OnCrewSessionChangedEventHandle = 0xf0; // FObjectMessagingHandle
		constexpr auto CrewMembers = 0x178; // TArray<FCrewMemberData>
		constexpr auto CrewShip = 0x188; // FCrewShipData
		constexpr auto CrewMatchmakingVisibility = 0x18b; // FCrewMatchmakingVisibilityData
		constexpr auto CrewRivalVotingData = 0x18e; // FCrewArenaRivalVotingData
		constexpr auto SpawnProgress = 0x190; // TScriptInterface<Class>
		constexpr auto HasValidSpawnProgress = 0x1a0; // bool
		constexpr auto TaleProgress = 0x1a8; // TScriptInterface<Class>
		constexpr auto TaleProgressLevel = 0x1b8; // int32_t
		constexpr auto IsCaptainedSession = 0x1bc; // bool
		constexpr auto IsCaptain = 0x1bd; // bool
	}

	namespace n_ULightingZoneComponent { // : USceneComponent
		constexpr auto LightingZoneParameters = 0x2b8; // FLightingZoneParameters
	}

	namespace n_USicknessComponent { // : UActorComponent
		constexpr auto IncubationPeriodDuration = 0xd0; // FWeightedProbabilityRangeOfRanges
		constexpr auto LatentPeriodDuration = 0x100; // FWeightedProbabilityRangeOfRanges
		constexpr auto VomitingPeriodDuration = 0x130; // FWeightedProbabilityRangeOfRanges
		constexpr auto VomitBoutDuration = 0x160; // FWeightedProbabilityRangeOfRanges
		constexpr auto DelayBetweenVomitBouts = 0x190; // FWeightedProbabilityRangeOfRanges
		constexpr auto ScreenEffectStrengthWhenSicknessActive = 0x1c0; // float
		constexpr auto ScreenEffectStrengthWhileVomiting = 0x1c4; // float
		constexpr auto MaterialEffectStrengthWhenSicknessActive = 0x1c8; // float
		constexpr auto TargetScreenEffectStrength = 0x1cc; // float
		constexpr auto TargetMaterialEffectStrength = 0x1d0; // float
		constexpr auto ScreenEffectSpringAcceleration = 0x1d4; // float
		constexpr auto MaterialEffectSpringAcceleration = 0x1d8; // float
		constexpr auto CanGetSick = 0x1dc; // bool
	}

	namespace n_UNoiseMakerControllerParams { // : UDataAsset
		constexpr auto LookupRadiusAroundListener = 0x28; // float
		constexpr auto MaxAmountOfRemoteNoiseMakers = 0x2c; // int32_t
		constexpr auto WwiseFoliagePoolWrappers = 0x30; // TArray<UWwiseObjectPoolWrapper*>
	}

	namespace n_UWorldResourceRegistry { // : UObject
		constexpr auto ActorsById = 0x30; // TMap<uint32_t, AActor*>
	}

	namespace n_UQuestsConfig { // : UDataAsset
		constexpr auto CanvasLODs = 0x28; // TArray<FCanvasLOD>
		constexpr auto NamedAIDataAsset = 0x38; // UNamedAIDataAsset*
		constexpr auto XMarksTheSpotMapItemInfoDescClass = 0x40; // UTreasureMapItemDesc*
		constexpr auto DefaultDigRadius = 0x48; // float
		constexpr auto MinDistanceBetweenTreasureLocations = 0x4c; // float
		constexpr auto DefaultRiddleDigRadius = 0x50; // float
		constexpr auto RiddleMapItemInfoDescClass = 0x58; // UTreasureMapItemDesc*
		constexpr auto RiddlePhrasebookDataAsset = 0x60; // URiddleTextPhrasebookDataAsset*
		constexpr auto RiddleQuestDataAsset = 0x68; // URiddleQuestData*
		constexpr auto RiddleQuestDescGeneratorData = 0x70; // URiddleQuestDescGeneratorData*
		constexpr auto RiddleQuestValidLocationGeneratorData = 0x78; // URiddleQuestValidLocationGeneratorData*
		constexpr auto BountyMapItemInfoDescClass = 0x80; // UTreasureMapItemDesc*
		constexpr auto BountyQuestData = 0x88; // UBountyQuestData*
		constexpr auto BountyQuestDescData = 0x90; // UBountyQuestDescData*
		constexpr auto MerchantQuestDescData = 0x98; // UMerchantQuestDescData*
		constexpr auto MerchantQuestData = 0xa0; // UMerchantQuestData*
		constexpr auto MerchantMapItemInfoDescClass = 0xa8; // UTreasureMapItemDesc*
		constexpr auto CargoRunQuestData = 0xb0; // UCargoRunQuestData*
		constexpr auto CargoRunMapItemInfoDescClass = 0xb8; // UTreasureMapItemDesc*
		constexpr auto VoyageProposalAssetData = 0xc0; // UVoyageProposalAssetSelector*
		constexpr auto VoyageSelectionVoteCompletedSound = 0xc8; // UWwiseEvent*
		constexpr auto BuriedTreasureChestParams = 0xd0; // FBuriedTreasureChestParams
		constexpr auto VoyageProposalOverrides = 0x118; // TArray<FVoyageProposalOverride>
		constexpr auto VoyageProposal = 0x128; // UVoyageProposalDesc*
		constexpr auto VoyageProposal2 = 0x130; // UVoyageProposalDesc*
		constexpr auto VoyageProposal3 = 0x138; // UVoyageProposalDesc*
		constexpr auto VoyageProposal4 = 0x140; // UVoyageProposalDesc*
		constexpr auto AllTreasureArtifactsItemInfoDescs = 0x148; // TArray<UItemDesc*>
		constexpr auto AllMessageInBottles = 0x158; // TArray<UItemDesc*>
		constexpr auto AllSkeletonOrders = 0x168; // TArray<UItemDesc*>
		constexpr auto AllCollectorsChests = 0x178; // TArray<UItemDesc*>
		constexpr auto AllGoldMounds = 0x188; // TArray<UItemDesc*>
		constexpr auto DefaultSeas = 0x198; // TArray<USeaId*>
		constexpr auto MessageInABottleMapsDiscoveredBackgroundImage = 0x1a8; // FStringAssetReference
		constexpr auto MessageInABottleMapsDiscoveredImages = 0x1b8; // TArray<FStringAssetReference>
		constexpr auto SkeletonOrderMapsDiscoveredBackgroundImage = 0x1c8; // FStringAssetReference
		constexpr auto SkeletonOrderMapsDiscoveredImages = 0x1d8; // TArray<FStringAssetReference>
		constexpr auto CoralMessageInABottleMapsDiscoveredBackgroundImage = 0x1e8; // FStringAssetReference
		constexpr auto CoralMessageInABottleMapsDiscoveredImages = 0x1f8; // TArray<FStringAssetReference>
		constexpr auto TutorialStepStartSfx = 0x208; // UWwiseEvent*
		constexpr auto TutorialCutsceneSpawnpointRotation = 0x210; // FRotator
		constexpr auto TutorialCutsceneFirstPersonMeshOffset = 0x21c; // FVector
		constexpr auto TutorialCutsceneCharacterModelReplacedEventTimeout = 0x228; // float
		constexpr auto TutorialCutsceneTimeBeforeFadeIn = 0x22c; // float
		constexpr auto TutorialCutsceneFadeInDuration = 0x230; // float
		constexpr auto FoodToAddToInventoryInEatingTutorial = 0x238; // UItemDesc*
		constexpr auto TutorialStartingHealth = 0x240; // float
		constexpr auto TutorialEatBananaOpenRadial = 0x248; // UPopUpMessageDesc*
		constexpr auto TutorialSelectBananaPopupDesc = 0x250; // UPopUpMessageDesc*
		constexpr auto TutorialEatBananaPopupDesc = 0x258; // UPopUpMessageDesc*
		constexpr auto TutorialCycleWeaponPopupDesc = 0x260; // UPopUpMessageDesc*
		constexpr auto TutorialUseMapOpenRadial = 0x268; // UPopUpMessageDesc*
		constexpr auto TutorialSelectMap = 0x270; // UPopUpMessageDesc*
		constexpr auto TutorialUseMapPopupDesc = 0x278; // UPopUpMessageDesc*
		constexpr auto TutorialShowMapPopupDesc = 0x280; // UPopUpMessageDesc*
		constexpr auto MapToAddToInventoryInTutorial = 0x288; // UItemDesc*
		constexpr auto TutorialBuyVoyagePopupDesc = 0x290; // UPopUpMessageDesc*
		constexpr auto TutorialBuyVoyageNextOptionsDesc = 0x298; // UPopUpMessageDesc*
		constexpr auto PlaceVoyageOnCaptainTablePopupDesc = 0x2a0; // UPopUpMessageDesc*
		constexpr auto ReturnBootyToTraderPopupDesc = 0x2a8; // UPopUpMessageDesc*
		constexpr auto TutorialBuyClothesPopupDesc = 0x2b0; // UPopUpMessageDesc*
		constexpr auto TutorialEquipItemPopupDesc = 0x2b8; // UPopUpMessageDesc*
		constexpr auto GoldHoarderToClothesShopFootstepID = 0x2c0; // UFootstepIDAsset*
		constexpr auto ClothesShopToVanityChestFootstepID = 0x2c8; // UFootstepIDAsset*
		constexpr auto MermaidTutorialPopupDesc = 0x2d0; // UPopUpMessageDesc*
		constexpr auto OnTutorialEndedRewardId = 0x2d8; // FRewardId
		constexpr auto OnTutorialEndedRewardCompanyName = 0x2e0; // FName
		constexpr auto ChestInventoryInSellTreasureStep = 0x2e8; // UItemDesc*
		constexpr auto IslandNamesWithFemaleStranger = 0x2f0; // TArray<FName>
		constexpr auto TutorialTalkToStrangerPopupDesc = 0x300; // UPopUpMessageDesc*
		constexpr auto TutorialTalkToFemaleStrangerPopupDesc = 0x308; // UPopUpMessageDesc*
		constexpr auto TutorialSellTreasurePopupDesc = 0x310; // UPopUpMessageDesc*
		constexpr auto TutorialPickUpChestPopupDesc = 0x318; // UPopUpMessageDesc*
		constexpr auto StrangerToGoldHoarderFootstepID = 0x320; // UFootstepIDAsset*
		constexpr auto ReturnToStrangerPopupDesc = 0x328; // UPopUpMessageDesc*
		constexpr auto ReturnToStrangerFemalePopupDesc = 0x330; // UPopUpMessageDesc*
		constexpr auto GoItAlonePopupDesc = 0x338; // UPopUpMessageDesc*
		constexpr auto BeginTallTalePopupDesc = 0x340; // UPopUpMessageDesc*
		constexpr auto ContestMapItemInfoDescClass = 0x348; // UTreasureMapItemDesc*
		constexpr auto RomeChests = 0x350; // TArray<UItemDesc*>
		constexpr auto EmissaryCompanyIcons = 0x360; // TArray<FEmissaryCompanyQuestIcons>
	}

	namespace n_UKrakenShipHittingBehaviourParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FKrakenShipHittingBehaviourParams
	}

	namespace n_ADebugAISpawnerCreator { // : AActor
		constexpr auto SpawnerTemplate = 0x3d0; // UAISpawner*
		constexpr auto TriggerRadius = 0x3d8; // float
		constexpr auto Spawner = 0x3e0; // UAISpawner*
		constexpr auto ProximityPlayerTracker = 0x3e8; // UAIProximityPlayerTracker*
		constexpr auto Region = 0x3f0; // USimpleAIRegion*
	}

	namespace n_UDevelopmentAuthenticationSettings { // : UObject
		constexpr auto SandboxId = 0x28; // FString
		constexpr auto TokenServiceUrl = 0x38; // FString
		constexpr auto ClientId = 0x48; // FString
		constexpr auto ClientSecret = 0x58; // FString
		constexpr auto LivePrivileges = 0x68; // FString
	}

	namespace n_UParticleModuleMeshRotationRateMultiplyLife { // : UParticleModuleRotationRateBase
		constexpr auto LifeMultiplier = 0x50; // FRawDistributionVector
	}

	namespace n_ULockOnCameraModifier { // : UCameraModifier
		constexpr auto Settings = 0x48; // ULockOnCameraModifierSettings*
		constexpr auto IsYawLocked = 0x50; // bool
		constexpr auto OwnerInputsIgnored = 0x51; // bool
		constexpr auto TargetActor = 0x58; // AActor*
	}

	namespace n_USirenSongAIAbility { // : UAthenaAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_UMaterialExpressionAdd { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto ConstA = 0xe0; // float
		constexpr auto ConstB = 0xe4; // float
	}

	namespace n_USkeleton { // : UObject
		constexpr auto BoneTree = 0x28; // TArray<FBoneNode>
		constexpr auto LinkupCache = 0xb8; // TArray<FSkeletonToMeshLinkup>
		constexpr auto Sockets = 0xc8; // TArray<USkeletalMeshSocket*>
		constexpr auto SmartNames = 0x128; // FSmartNameContainer
		constexpr auto SlotGroups = 0x178; // TArray<FAnimSlotGroup>
	}

	namespace n_UContestCeremonyEventsDataAsset { // : UDataAsset
		constexpr auto ContestEvents = 0x28; // TArray<FContestEventSet>
	}

	namespace n_UAIAmmoRankProgression { // : UDataAsset
		constexpr auto RankMappings = 0x28; // TArray<FAIAmmoRankMapping>
		constexpr auto NumberOfRanks = 0x38; // int32_t
	}

	namespace n_URivalVotingInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UTaleQuestReleaseContendedResourceStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTaleQuestReleaseContendedResourceStepDesc*
		constexpr auto ResourceReleased = 0x98; // bool
	}

	namespace n_AAnimatedMaterialMechanismAction { // : AAnimatedMechanismAction
		constexpr auto AnimatedMaterials = 0x520; // TArray<FAnimatedMaterialData>
	}

	namespace n_APlayerStartPIE { // : APlayerStart
		constexpr auto PlayerStartTag = 0x3f8; // FName
	}

	namespace n_UCustomSkeletonAnimationDataList { // : UDataAsset
		constexpr auto CustomAnimationAssets = 0x28; // TArray<FStringAssetReference>
	}

	namespace n_UEnvQueryTest_InWorldEventZone { // : UEnvQueryTest
		constexpr auto Radius = 0x170; // float
	}

	namespace n_UPawnAction_Move { // : UPawnAction
		constexpr auto GoalActor = 0x90; // AActor*
		constexpr auto GoalLocation = 0x98; // FVector
		constexpr auto AcceptableRadius = 0xa4; // float
		constexpr auto FilterClass = 0xa8; // UNavigationQueryFilter*
		constexpr auto bAllowStrafe = 0xb0; // char : 1
		constexpr auto bFinishOnOverlap = 0xb0; // char : 1
		constexpr auto bUsePathfinding = 0xb0; // char : 1
		constexpr auto bAllowPartialPath = 0xb0; // char : 1
		constexpr auto bProjectGoalToNavigation = 0xb0; // char : 1
		constexpr auto bUpdatePathToGoal = 0xb0; // char : 1
		constexpr auto bAbortChildActionOnPathChange = 0xb0; // char : 1
	}

	namespace n_UTaleQuestAssignContendedResourceStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTaleQuestAssignContendedResourceStepDesc*
	}

	namespace n_UInAppPurchaseRestoreCallbackProxy { // : UObject
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UTitleCategory { // : UClothingCategory
		constexpr auto PiratePreviewRemovals = 0x78; // TArray<UClothingCategory*>
		constexpr auto PiratePreviewAnim = 0x88; // UAnimationAsset*
		constexpr auto PiratePreviewCamera = 0x90; // FName
		constexpr auto PiratePreviewSpin = 0x98; // bool
	}

	namespace n_ULocationOnIslandClueDestinationDescriptor { // : UClueDestinationDescriptor
		constexpr auto IslandIdentifier = 0x40; // FName
		constexpr auto WorldPosition = 0x48; // FVector
	}

	namespace n_ULoadableFireworkComponent { // : ULoadableProjectileComponent
		constexpr auto ShouldProjectileTrailDoReflections = 0x128; // bool
		constexpr auto ShouldUseGlobalOverrideFuseTimer = 0x129; // bool
		constexpr auto ShouldUseGlobalOverrideFuseSfx = 0x12a; // bool
		constexpr auto ShouldUseGlobalOverrideFuseVfx = 0x12b; // bool
		constexpr auto ShouldUseGlobalOverrideFuseMesh = 0x12c; // bool
		constexpr auto FireworksSettingsDataAsset = 0x130; // UFireworksSettingsDataAsset*
	}

	namespace n_UAbilityTask_WaitConfirm { // : UAbilityTask
		constexpr auto OnConfirm = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UEmissaryVoyageVoteValidatorBase { // : UVoteValidatorInlineBase
		constexpr auto TargetCompany = 0x30; // UCompany*
		constexpr auto RequiredEntitlement = 0x38; // UEntitlementDesc*
		constexpr auto Consumer = 0xa0; // UEmissaryVoyageInlineVoteConsumerBase*
	}

	namespace n_USoundClass { // : UObject
		constexpr auto Properties = 0x28; // FSoundClassProperties
		constexpr auto ChildClasses = 0x50; // TArray<USoundClass*>
		constexpr auto PassiveSoundMixModifiers = 0x60; // TArray<FPassiveSoundMixModifier>
		constexpr auto ParentClass = 0x70; // USoundClass*
	}

	namespace n_UShipCurseComponent { // : UActorComponent
		constexpr auto CachedShipAttachedActors = 0xc8; // TArray<AActor*>
		constexpr auto FoundMasts = 0xd8; // TArray<AMast*>
		constexpr auto ShipCapstan = 0xe8; // ACapstan*
		constexpr auto ShipCannons = 0xf0; // TArray<ACannon*>
		constexpr auto ShipWheel = 0x100; // AWheel*
		constexpr auto SailFixedIntentComponents = 0x108; // TArray<UFixedIntentComponent*>
		constexpr auto ShipCapstanTargetRatio = 0x188; // float
		constexpr auto ActiveCurseFX = 0x190; // TArray<FShipActiveCurseFXData>
		constexpr auto ActorsAffectedByToggleInteractionsCurse = 0x1a0; // TArray<AActor*>
		constexpr auto SpawnedFXForCurses = 0x1b0; // TArray<FShipCurseSpawnedFXForCurse>
	}

	namespace n_UFFTWaterExtendedPlaneComponent { // : UBaseWaterComponent
		constexpr auto WaterParams = 0x598; // FFFTWaterComponentParams
		constexpr auto Material = 0x8a8; // UMaterial*
	}

	namespace n_UInventoryItemDescToSlotRemappingPolicyAsset { // : UDataAsset
		constexpr auto Slots = 0x28; // TArray<UItemDesc*>
	}

	namespace n_UTunnelDesc { // : UDataAsset
		constexpr auto MatchmakingPlayModeTag = 0x28; // FString
		constexpr auto VignetteSequence = 0x38; // ULevelSequence*
		constexpr auto VignetteHeightCorrection = 0x40; // int32_t
		constexpr auto ShipSpecificVignettes = 0x48; // TArray<FShipSpecificData>
		constexpr auto EnableDynamicFogTransition = 0x58; // bool
		constexpr auto SecondsAfterVignetteSequenceStartsBeforeTransitioningFog = 0x5c; // float
		constexpr auto SecondsAfterVignetteSequenceStartsBeforeTriggeringEndSequence = 0x60; // float
		constexpr auto EndSequenceCameraAnimation = 0x68; // TArray<FShipCameraAnimation>
		constexpr auto DialogueData = 0x78; // USceneDialogueData*
		constexpr auto LocalisableNames = 0x80; // TArray<FText>
		constexpr auto Endpoint = 0x90; // AActor*
		constexpr auto EndPointOffset = 0x98; // FVector
		constexpr auto MusicOfTheSeasEvent = 0xa8; // UWwiseEvent*
		constexpr auto MusicOfTheSeasStop = 0xb0; // UWwiseEvent*
		constexpr auto MusicOfTheSeasPool = 0xb8; // UWwiseObjectPoolWrapper*
		constexpr auto AmbienceSfxEvent = 0xc0; // UWwiseEvent*
		constexpr auto AmbienceSfxStop = 0xc8; // UWwiseEvent*
		constexpr auto AmbienceSfxPool = 0xd0; // UWwiseObjectPoolWrapper*
		constexpr auto ForceRespawnPlayersOnShipInFailureScenarios = 0xd8; // bool
		constexpr auto DropCapstanOnTunnelExit = 0xd9; // bool
		constexpr auto SpawnLocation = 0xe0; // FStringAssetReference
		constexpr auto SpawnShipOutsidePortalOnDestinationServer = 0xf0; // bool
		constexpr auto SpawnShipOutsidePortalInFailureScenarios = 0xf1; // bool
		constexpr auto ShipTeleportEffectsClass = 0xf8; // AActor*
	}

	namespace n_UMovieSceneCameraCutSection { // : UMovieSceneSection
		constexpr auto CameraGuid = 0x98; // FGuid
	}

	namespace n_UProjectileMovementComponent { // : UMovementComponent
		constexpr auto InitialSpeed = 0x110; // float
		constexpr auto MaxSpeed = 0x114; // float
		constexpr auto bRotationFollowsVelocity = 0x118; // char : 1
		constexpr auto bShouldBounce = 0x118; // char : 1
		constexpr auto bInitialVelocityInLocalSpace = 0x118; // char : 1
		constexpr auto bForceSubStepping = 0x118; // char : 1
		constexpr auto bIsHomingProjectile = 0x118; // char : 1
		constexpr auto bBounceAngleAffectsFriction = 0x118; // char : 1
		constexpr auto bIsSliding = 0x118; // char : 1
		constexpr auto PreviousHitTime = 0x11c; // float
		constexpr auto PreviousHitNormal = 0x120; // FVector
		constexpr auto ProjectileGravityScale = 0x12c; // float
		constexpr auto Buoyancy = 0x130; // float
		constexpr auto Bounciness = 0x134; // float
		constexpr auto Friction = 0x138; // float
		constexpr auto BounceVelocityStopSimulatingThreshold = 0x13c; // float
		constexpr auto OnProjectileBounce = 0x140; // FScriptMulticastDelegate
		constexpr auto OnProjectileStop = 0x150; // FScriptMulticastDelegate
		constexpr auto HomingAccelerationMagnitude = 0x160; // float
		constexpr auto HomingTargetComponent = 0x164; // TWeakObjectPtr<USceneComponent>
		constexpr auto MaxSimulationTimeStep = 0x16c; // float
		constexpr auto MaxSimulationIterations = 0x170; // int32_t
	}

	namespace n_UAbilityTask_WaitAbilityCommit { // : UAbilityTask
		constexpr auto OnCommit = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UKillActorConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_AAggressiveGhostShipsEncounter { // : AGameEvent
		constexpr auto Params = 0x460; // UAggressiveGhostShipsEncounterParams*
		constexpr auto ActiveWaveMusicZoneActor = 0x468; // AActor*
		constexpr auto PoolResourceActor = 0x470; // AAggressiveGhostShipPoolResource*
		constexpr auto PhasedClusterRoot = 0x478; // APhasedClusterRoot*
	}

	namespace n_UAthenaAnimationWaterSlideDataAsset { // : UDataAsset
		constexpr auto Into = 0x28; // UAnimSequence*
		constexpr auto Action = 0x30; // UAnimSequence*
		constexpr auto Outof = 0x38; // UAnimSequence*
	}

	namespace n_UBootyItemInfoMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UTaleReleaseSpireStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTTask_IncrementBlackboardIntValue { // : UBTTask_BlackboardBase
		constexpr auto IntegerValueDelta = 0x88; // FAIDataProviderIntValue
	}

	namespace n_ASwingDoor { // : ADoor
		constexpr auto LockComponent = 0x4f0; // ULockComponent*
		constexpr auto OpenDoorAudioSting = 0x4f8; // UWwiseEvent*
		constexpr auto SwingDoorAudioParams = 0x500; // USwingDoorAudioParams*
		constexpr auto ServerDoorState = 0x528; // ESwingDoorState
	}

	namespace n_UTaleQuestNotificationUsingVariableStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestNotificationUsingVariableStepDesc*
	}

	namespace n_UOnTutorialStepNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto TutorialStepName = 0x30; // FName
	}

	namespace n_UBTDecorator_ActionState { // : UBTDecorator
		constexpr auto TrackId = 0x68; // EActionStateMachineTrackId
		constexpr auto StateId = 0x70; // UActionStateId*
	}

	namespace n_UMeshComponent { // : UPrimitiveComponent
		constexpr auto OverrideMaterials = 0x588; // TArray<UMaterialInterface*>
	}

	namespace n_UInterpTrackVectorBase { // : UInterpTrack
		constexpr auto VectorTrack = 0x70; // FInterpCurveVector
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_UTaleQuestNotificationStepDesc { // : UTaleQuestStepDesc
		constexpr auto Notification = 0x80; // UPopUpMessageDesc*
		constexpr auto PreventNotificationForPlayer = 0x88; // FQuestVariablePlayerActor
		constexpr auto Player = 0x98; // FQuestVariablePlayerActor
	}

	namespace n_UVoyageProposalDesc { // : UEntitlementDesc
		constexpr auto TradingCompany = 0xd8; // UCompany*
		constexpr auto Rank = 0xe0; // int32_t
		constexpr auto UnlockedForAnyRank = 0xe4; // bool
		constexpr auto AvailableEvenIfRecentlySeen = 0xe5; // bool
		constexpr auto Difficulty = 0xe8; // int32_t
		constexpr auto TooltipBackgroundImageUrl = 0xf0; // FStringAssetReference
		constexpr auto VoyageRecipe = 0x100; // UVoyageRecipeDataAsset*
		constexpr auto VoyageDesc = 0x108; // UVoyageDescDataAsset*
		constexpr auto OverrideVotingTableVoyageProposalMesh = 0x110; // FStringAssetReference
		constexpr auto OverrideOpenVoyageProposalMesh = 0x120; // FStringAssetReference
	}

	namespace n_USlidingDoorAudioParams { // : UDataAsset
		constexpr auto SlidingDoorPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto SlidingDoorOpeningLoopStart = 0x30; // UWwiseEvent*
		constexpr auto SlidingDoorOpeningLoopStop = 0x38; // UWwiseEvent*
		constexpr auto SlidingDoorOpeningAdditionalStopSound = 0x40; // UWwiseEvent*
		constexpr auto SlidingDoorClosingLoopStart = 0x48; // UWwiseEvent*
		constexpr auto SlidingDoorClosingLoopStop = 0x50; // UWwiseEvent*
		constexpr auto SlidingDoorClosingAdditionalStopSound = 0x58; // UWwiseEvent*
	}

	namespace n_AIgnitableMechanismTrigger { // : AActor
		constexpr auto Root = 0x3d8; // USceneComponent*
		constexpr auto FlammableComponent = 0x3e0; // UTimedFlammableComponent*
		constexpr auto StatusEffectManagerComponent = 0x3e8; // ULightWeightStatusEffectManagerComponent*
		constexpr auto MechanismTriggerComponent = 0x3f0; // UMechanismTriggerComponent*
	}

	namespace n_UInputSettings { // : UObject
		constexpr auto AxisConfig = 0x28; // TArray<FInputAxisConfigEntry>
		constexpr auto bAltEnterTogglesFullscreen = 0x38; // char : 1
		constexpr auto bUseMouseForTouch = 0x38; // char : 1
		constexpr auto bEnableMouseSmoothing = 0x38; // char : 1
		constexpr auto bEnableFOVScaling = 0x38; // char : 1
		constexpr auto FOVScale = 0x3c; // float
		constexpr auto DoubleClickTime = 0x40; // float
		constexpr auto ActionMappings = 0x48; // TArray<FInputActionKeyMapping>
		constexpr auto AxisMappings = 0x58; // TArray<FInputAxisKeyMapping>
		constexpr auto CombinedAxisMappings = 0x68; // TArray<FInputCombinedAxisKeyMapping>
		constexpr auto bAlwaysShowTouchInterface = 0x78; // bool
		constexpr auto bShowConsoleOnFourFingerTap = 0x79; // bool
		constexpr auto DefaultTouchInterface = 0x80; // FStringAssetReference
		constexpr auto ConsoleKey = 0x90; // FKey
		constexpr auto ConsoleKeys = 0xb0; // TArray<FKey>
	}

	namespace n_AVoyageInAContainerWieldableItem { // : AStaticMeshWieldableItem
		constexpr auto VoyageRecipeList = 0x790; // TArray<FMessageInABottleVoyageEntry>
		constexpr auto OnOpenedSfx = 0x7a0; // UWwiseEvent*
	}

	namespace n_UHorizontalBoxSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto Size = 0x48; // FSlateChildSize
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UWasWieldedCommodityItemBoughtAtDemandStatCondition { // : UTargetedStatCondition
		constexpr auto CommodityDemand = 0x30; // ECommodityDemand
	}

	namespace n_UGameplayEffectExecutionCalculation { // : UGameplayEffectCalculation
		constexpr auto bRequiresPassedInTags = 0x38; // bool
	}

	namespace n_UAnimNotify_AthenaPlayParticleEffect { // : UAnimNotify
		constexpr auto PSTemplate = 0x38; // UObject*
		constexpr auto SocketName = 0x40; // FName
		constexpr auto LocationOffset = 0x48; // FVector
		constexpr auto RotationOffset = 0x54; // FRotator
		constexpr auto RelativeScale = 0x60; // FVector
		constexpr auto ColorTint = 0x6c; // FLinearColor
		constexpr auto CustomParameter = 0x7c; // float
		constexpr auto Attached = 0x80; // char : 1
		constexpr auto KeepWorldScale = 0x80; // char : 1
		constexpr auto OwnerOnlySee = 0x80; // char : 1
		constexpr auto OwnerNoSee = 0x80; // char : 1
		constexpr auto OwnedByWorld = 0x80; // char : 1
		constexpr auto UnderwaterMode = 0x84; // EAnimNotifyUnderwaterMode
		constexpr auto CustomLocalSpaceMode = 0x85; // EVfxCustomLocalSpaceMode
	}

	namespace n_UIsProjectileOfGivenImpactProjectileId { // : UStatCondition
		constexpr auto ImpactProjectileId = 0x28; // UImpactProjectileId*
	}

	namespace n_USphereReflectionCaptureComponent { // : UReflectionCaptureComponent
		constexpr auto InfluenceRadius = 0x340; // float
		constexpr auto CaptureDistanceScale = 0x344; // float
		constexpr auto PreviewInfluenceRadius = 0x348; // UDrawSphereComponent*
	}

	namespace n_ACrewSpawnLocations { // : AActor
		constexpr auto AvailableSpawnLocations = 0x4f8; // TArray<AShipSpawnLocation*>
		constexpr auto AvailableNamedSpawnLocations = 0x508; // TArray<AProgressSpawnLocation*>
		constexpr auto PendingUnavailableSpawnLocations = 0x518; // TArray<AShipSpawnLocation*>
		constexpr auto SpawnVariablesAsset = 0x768; // UCrewSpawnLocationVariablesListAsset*
	}

	namespace n_USpawnPhasedItemStepDesc { // : UTaleQuestStepDesc
		constexpr auto TrackItem = 0x80; // bool
		constexpr auto MarkItemAsCritical = 0x81; // bool
		constexpr auto CriticalActorLostMessage = 0x88; // FText
		constexpr auto SocketName = 0xc0; // FName
		constexpr auto Item = 0xc8; // FQuestVariableItemDescType
		constexpr auto LocatorVar = 0xd8; // FQuestVariableActor
		constexpr auto SpawnedItemVar = 0xe8; // FQuestVariableItemInfo
	}

	namespace n_UPlayerMuteComponent { // : UActorComponent
		constexpr auto PlayerStatesPendingCrewMuting = 0xd0; // TArray<APlayerState*>
	}

	namespace n_UCircleMapClueDestinationContainerComponent { // : UActorComponent
		constexpr auto MapMarkId = 0xd8; // UMapMarkId*
		constexpr auto MapMarkArea = 0xe0; // float
		constexpr auto MapMarkScaleMin = 0xe4; // float
		constexpr auto MapMarkScaleMax = 0xe8; // float
		constexpr auto MapMarkNoiseModifier = 0xec; // float
		constexpr auto MapMarkBlendMode = 0xf0; // EBlendMode
		constexpr auto DebugCrossId = 0xf8; // UMapMarkId*
		constexpr auto ShowCluePositionOnMap = 0x100; // bool
		constexpr auto ClueRenderData = 0x108; // TArray<FMapTextureRenderData>
	}

	namespace n_UMurkWaterModifierZoneComponent { // : UWaterModifierZoneComponent
		constexpr auto MaximumInnerRadius = 0x338; // float
		constexpr auto MaximumOuterRadius = 0x33c; // float
		constexpr auto ActivationCurve = 0x340; // UCurveFloat*
		constexpr auto DeactivationCurve = 0x348; // UCurveFloat*
		constexpr auto DeactivateActorWhenInactive = 0x350; // bool
		constexpr auto State = 0x351; // EMurkWaterModifierZoneState
	}

	namespace n_UMeleeChargeAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto AbilityCooldownSpeedMultiplier = 0x28; // float
		constexpr auto DamageRequiredForNextIntervalMultiplier = 0x2c; // float
		constexpr auto OverrideParams = 0x30; // bool
		constexpr auto AutoActivateOnStageTransition = 0x31; // bool
		constexpr auto TypeClass = 0x38; // UAthenaAIAbilityType*
	}

	namespace n_UItemSpawnComponent { // : USceneComponent
		constexpr auto SpawnOnStart = 0x2b0; // bool
		constexpr auto SpawnParams = 0x2b8; // FItemSpawnParams
		constexpr auto ReferencedSpawnDistributionAsset = 0x2e0; // UWeightedItemDescSpawnDataAsset*
		constexpr auto ReferencedSpawnDistribution = 0x2e8; // UItemSpawnDistributionAsset*
		constexpr auto SpawnTransforms = 0x2f0; // TArray<FItemSpawnTransform>
		constexpr auto SpawnTransformsWithRandomQuantities = 0x300; // TArray<FItemSpawnTransformWithRandomQuantity>
		constexpr auto FeatureToggle = 0x310; // FName
		constexpr auto SpawnSource = 0x318; // ESpawnedItemSource
		constexpr auto SpawnRate = 0x31c; // float
		constexpr auto DestroyProxiesOnEndPlay = 0x320; // bool
		constexpr auto SpawnWithPhysicsEnabled = 0x321; // bool
		constexpr auto DoNotAttachToOwnerWhenSpawned = 0x322; // bool
		constexpr auto DropItemsOnSpawn = 0x323; // bool
		constexpr auto DropItemsUsingPriorityAIDropParams = 0x324; // bool
		constexpr auto SpawnList = 0x328; // TArray<FSpawnInstance>
		constexpr auto SingleItemInstances = 0x338; // TArray<FSpawnInstance>
		constexpr auto SpawnedItems = 0x348; // TArray<FSpawnedItem>
	}

	namespace n_UVulnerabilityAIAbility { // : UAthenaAIAbility
		constexpr auto Owner = 0x78; // APawn*
		constexpr auto SetupAbilityParams = 0x80; // UVulnerabilityAIAbilityParams*
	}

	namespace n_UWaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ASkeletalWieldableIngestible { // : AWieldableIngestible
		constexpr auto GiveItemUponConsumptionComponent = 0x798; // UGiveItemUponConsumptionComponent*
		constexpr auto ApplyStatusToConsumerComponent = 0x7a0; // UApplyStatusToConsumerComponent*
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7b0; // UNamedNotificationInputComponent*
		constexpr auto FeedableComponent = 0x7b8; // UFeedableComponent*
		constexpr auto InToIngestionDuration = 0x7c0; // float
		constexpr auto OutOfIngestionDuration = 0x7c4; // float
		constexpr auto CanIngest = 0x7c8; // bool
		constexpr auto IngestAudioEvent = 0x7d0; // UWwiseEvent*
		constexpr auto IngestAudioFoodType = 0x7d8; // FName
		constexpr auto IngestionStat = 0x7e0; // FPlayerStat
		constexpr auto IngestionShipStat = 0x7e4; // FPlayerStat
	}

	namespace n_ACampaignService { // : AActor
		constexpr auto ActiveCampaigns = 0x3e0; // TArray<FActiveCampaignInfo>
	}

	namespace n_UPlatformInterfaceBase { // : UObject
		constexpr auto AllDelegates = 0x28; // TArray<FDelegateArray>
	}

	namespace n_UPawnMovementComponent { // : UNavMovementComponent
		constexpr auto PawnOwner = 0x158; // APawn*
	}

	namespace n_ASkeletalMeshWieldableItem { // : AWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UIslandTypeWeightsDataAsset { // : UDataAsset
		constexpr auto IslandTypeWeightsForDifficultyRanks = 0x28; // TArray<FIslandTypeWeights>
	}

	namespace n_UMaterialExpressionDepthFade { // : UMaterialExpression
		constexpr auto InOpacity = 0x70; // FExpressionInput
		constexpr auto FadeDistance = 0xa8; // FExpressionInput
		constexpr auto OpacityDefault = 0xe0; // float
		constexpr auto FadeDistanceDefault = 0xe4; // float
	}

	namespace n_UFireworkStatsComponent { // : UActorComponent
		constexpr auto FlareRadius = 0xc8; // float
		constexpr auto NumberOfFireworksFiredAtNight = 0xd0; // int32_t
		constexpr auto FireworksFiredAtNightRadius = 0xd4; // float
		constexpr auto FiredFireworksAtNightTimer = 0xd8; // float
	}

	namespace n_UInputAxisDelegateBinding { // : UInputDelegateBinding
		constexpr auto InputAxisDelegateBindings = 0x28; // TArray<FBlueprintInputAxisDelegateBinding>
	}

	namespace n_UEncounterService { // : UObject
		constexpr auto Encounters = 0x38; // TArray<FEncounter>
		constexpr auto EncounterListenerData = 0x48; // FEncounterListenerData
		constexpr auto EncounterParams = 0x88; // FEncounterServiceParams
	}

	namespace n_AShipwreckHullAudio { // : AActor
		constexpr auto ShipwreckAudioRootComponent = 0x3d0; // USceneComponent*
		constexpr auto ShipwreckAudioDataArray = 0x3d8; // TArray<FShipwreckHullAudioData>
	}

	namespace n_UParticleModuleSize_Seeded { // : UParticleModuleSize
		constexpr auto RandomSeedInfo = 0x1b0; // FParticleRandomSeedInfo
	}

	namespace n_UEnvQueryManager { // : UObject
		constexpr auto InstanceCache = 0x98; // TArray<FEnvQueryInstanceCache>
		constexpr auto LocalContexts = 0xa8; // TArray<UEnvQueryContext*>
	}

	namespace n_UProceduralFoliageTile { // : UObject
		constexpr auto FoliageSpawner = 0x28; // UProceduralFoliageSpawner*
		constexpr auto InstancesArray = 0xd0; // TArray<FProceduralFoliageInstance>
	}

	namespace n_UPickupableComponent { // : UActorComponent
		constexpr auto PickupTime = 0xd0; // float
		constexpr auto PickupActionDisplayString = 0xd8; // FText
		constexpr auto PickupActionDisplayStringWhenFull = 0x110; // FText
		constexpr auto StartPickupInputId = 0x148; // UNotificationInputId*
	}

	namespace n_ABaseToggleAnimatedMechanismActionProxy { // : AAnimatedMechanismActionProxy
		constexpr auto AudioEmitterPool = 0x400; // UWwiseObjectPoolWrapper*
		constexpr auto AnimationEvents = 0x418; // TArray<FMechanismAnimationEventContainer>
	}

	namespace n_UBaseFoodItemCategory { // : UConsumableItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UMaterialInstance { // : UMaterialInterface
		constexpr auto PhysMaterial = 0x58; // UPhysicalMaterial*
		constexpr auto Parent = 0x60; // UMaterialInterface*
		constexpr auto bHasStaticPermutationResource = 0x68; // char : 1
		constexpr auto bOverrideSubsurfaceProfile = 0x68; // char : 1
		constexpr auto ParentLightingGuid = 0x70; // FGuid
		constexpr auto FontParameterValues = 0x80; // TArray<FFontParameterValue>
		constexpr auto ScalarParameterValues = 0x90; // TArray<FScalarParameterValue>
		constexpr auto TextureParameterValues = 0xa0; // TArray<FTextureParameterValue>
		constexpr auto VectorParameterValues = 0xb0; // TArray<FVectorParameterValue>
		constexpr auto BasePropertyOverrides = 0xc0; // FMaterialInstanceBasePropertyOverrides
	}

	namespace n_UClusterStaticMeshComponent { // : UStaticMeshComponent
		constexpr auto ItemDescSpawnData = 0x5f0; // UItemDescSpawnData*
	}

	namespace n_UBTDecorator_SetTagCooldown { // : UBTDecorator
		constexpr auto CooldownTag = 0x68; // FGameplayTag
		constexpr auto CoolDownDuration = 0x70; // float
		constexpr auto bAddToExistingDuration = 0x74; // bool
	}

	namespace n_UPremiumCatalogDataAsset { // : UDataAsset
		constexpr auto CatalogId = 0x28; // FGuid
		constexpr auto DisplayName = 0x38; // FText
		constexpr auto Tabs = 0x70; // TArray<FPremiumCatalogLandingPageTab>
	}

	namespace n_UActorSequencePlayer { // : UMovieSceneSequencePlayer
		constexpr auto OnPlay = 0x390; // FScriptMulticastDelegate
		constexpr auto OnStop = 0x3a0; // FScriptMulticastDelegate
		constexpr auto OnPause = 0x3b0; // FScriptMulticastDelegate
		constexpr auto bIsPlaying = 0x3c0; // char : 1
		constexpr auto bReversePlayback = 0x3c0; // char : 1
		constexpr auto bPendingFirstUpdate = 0x3c0; // char : 1
		constexpr auto Sequence = 0x3c8; // UMovieSceneSequence*
		constexpr auto TimeCursorPosition = 0x3d0; // float
		constexpr auto StartTime = 0x3d4; // float
		constexpr auto EndTime = 0x3d8; // float
		constexpr auto CurrentNumLoops = 0x3dc; // int32_t
		constexpr auto PlaybackSettings = 0x3f0; // FMovieSceneSequencePlaybackSettings
	}

	namespace n_USpawnPortalTaleStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_URowboatAudioComponent { // : USceneComponent
		constexpr auto Params = 0x2b0; // URowboatAudioComponentParams*
		constexpr auto ParentRowboat = 0x2b8; // ARowboat*
	}

	namespace n_AShippingDebugActorSphereCollection { // : AActor
		constexpr auto SphereList = 0x3d0; // TArray<FSphereData>
	}

	namespace n_UPawnNoiseEmitterComponent { // : UActorComponent
		constexpr auto bAIPerceptionSystemCompatibilityMode = 0xc8; // char : 1
		constexpr auto LastRemoteNoisePosition = 0xcc; // FVector
		constexpr auto NoiseLifetime = 0xd8; // float
		constexpr auto LastRemoteNoiseVolume = 0xdc; // float
		constexpr auto LastRemoteNoiseTime = 0xe0; // float
		constexpr auto LastLocalNoiseVolume = 0xe4; // float
		constexpr auto LastLocalNoiseTime = 0xe8; // float
	}

	namespace n_UGameplayCueNotify_Static { // : UObject
		constexpr auto GameplayCueTag = 0x28; // FGameplayTag
		constexpr auto GameplayCueName = 0x30; // FName
		constexpr auto IsOverride = 0x38; // bool
	}

	namespace n_UFireBreathAIAbility { // : UAthenaAIAbility
		constexpr auto Owner = 0x78; // APawn*
		constexpr auto SetupAbilityParams = 0x80; // UFireBreathAIAbilityParams*
		constexpr auto FireBreathEmitter = 0x88; // AStatusEffectOverlapZone*
		constexpr auto FireVFX = 0x90; // UVFXSpawnerComponent*
	}

	namespace n_UVaultPuzzleDataAsset { // : UDataAsset
		constexpr auto SolutionSets = 0x28; // TArray<FVaultPuzzleSolutionEntry>
		constexpr auto AudioSetting = 0x38; // EVaultAudioSettings
		constexpr auto RequiresOpenDoor = 0x39; // bool
		constexpr auto ShouldFillWithWater = 0x3a; // bool
		constexpr auto RequiresPuzzleSolution = 0x3b; // bool
		constexpr auto ShouldExtinguishBraziersOnComplete = 0x3c; // bool
		constexpr auto ShouldOpenRewardDoorOnComplete = 0x3d; // bool
		constexpr auto FillRateOverrides = 0x40; // TArray<float>
	}

	namespace n_UParticleModuleSubUV { // : UParticleModuleSubUVBase
		constexpr auto SubImageIndex = 0x50; // FRawDistributionFloat
		constexpr auto bUseRealTime = 0x88; // char : 1
	}

	namespace n_AMechanismElementProxy { // : AActor
		constexpr auto ElementClass = 0x3d8; // AActor*
		constexpr auto Relevancy = 0x3e0; // float
		constexpr auto Instance = 0x3e8; // AActor*
	}

	namespace n_URemoveNPCOnSurfaceStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ANavigationGraphNode { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UProjectileLauncherMechanismSourceComponent { // : USceneComponent
		constexpr auto InitialLaunchDelay = 0x2b8; // FFloatRange
		constexpr auto RepeatedLaunchDelay = 0x2c8; // FFloatRange
		constexpr auto TargetLocations = 0x2d8; // TArray<FVector>
		constexpr auto ProjectileType = 0x2e8; // ALaunchableProjectile*
		constexpr auto ProjectileSpeed = 0x2f0; // float
		constexpr auto Gravity = 0x2f4; // float
		constexpr auto GravityScalar = 0x2f8; // float
		constexpr auto PreferHigherAngles = 0x2fc; // bool
		constexpr auto SfxPool = 0x300; // UWwiseObjectPoolWrapper*
		constexpr auto LaunchSfx = 0x308; // UWwiseEvent*
		constexpr auto LaunchVFX = 0x310; // UObject*
		constexpr auto ProjectileLauncherMechanism = 0x318; // TScriptInterface<Class>
	}

	namespace n_UMaterialReferencesDataAsset { // : UDataAsset
		constexpr auto MaterialReferences = 0x28; // TArray<FMaterialReferencesEntry>
	}

	namespace n_UCoherentUIGTLiveView { // : UActorComponent
		constexpr auto LinkName = 0xc8; // FString
		constexpr auto Texture = 0xd8; // UTextureRenderTarget2D*
	}

	namespace n_UWaterSlideAudioParams { // : UDataAsset
		constexpr auto WaterSlideStart = 0x28; // UWwiseEvent*
		constexpr auto WaterSlideEnd = 0x30; // UWwiseEvent*
		constexpr auto WaterSlideIsEndOneShot = 0x38; // UWwiseEvent*
		constexpr auto WaterSlideChangeForkOneShot = 0x40; // UWwiseEvent*
		constexpr auto PlayerSpeedOnWaterSlideRTPC = 0x48; // FName
		constexpr auto PlayerSpeedThatMapsToOne = 0x50; // float
		constexpr auto PlayerSpeedThatMapsToZero = 0x54; // float
	}

	namespace n_UForceFeedbackEffect { // : UObject
		constexpr auto ChannelDetails = 0x28; // TArray<FForceFeedbackChannelDetails>
		constexpr auto Duration = 0x38; // float
	}

	namespace n_UTaleQuestBlueprintStepDesc { // : UTaleQuestStepDesc
		constexpr auto ParameterMappings = 0x80; // TMap<FName, FName>
		constexpr auto EndParameterMappings = 0xd0; // TMap<FName, FName>
		constexpr auto StepType = 0x120; // UBlueprintStepBase*
		constexpr auto StepInstance = 0x128; // UBlueprintStepBase*
	}

	namespace n_UCrewOwnershipTrackingComponent { // : UActorComponent
		constexpr auto SpawningCrewId = 0xe0; // FGuid
		constexpr auto CurrentOwnedByCrewId = 0xf0; // FGuid
		constexpr auto PreviousOwnedByCrewIdList = 0x100; // FOwnerListEntry
		constexpr auto CustomTrackingMap = 0x110; // TMap<FName, FOwnerListEntry>
	}

	namespace n_UFlamethrowerChargeVisuals { // : UObject
		constexpr auto FlamethrowerChargeInterface = 0x28; // TScriptInterface<Class>
		constexpr auto FlamethrowerChargeVisualsProviderInterface = 0x38; // TScriptInterface<Class>
		constexpr auto DynamicMaterials = 0x48; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UMaterialExpressionBoneMatrix { // : UMaterialExpression
		constexpr auto ReferenceIndex = 0x70; // int32_t
		constexpr auto BoneName = 0x74; // FName
		constexpr auto bPosition = 0x7c; // bool
	}

	namespace n_ULightingZoneService { // : UObject
		constexpr auto RegisteredLightingZones = 0x30; // TArray<TScriptInterface<Class>>
	}

	namespace n_UCostumeCategory { // : UClothingCategory
		constexpr auto PiratePreviewRemovals = 0x78; // TArray<UClothingCategory*>
		constexpr auto PiratePreviewAnim = 0x88; // UAnimationAsset*
		constexpr auto PiratePreviewCamera = 0x90; // FName
		constexpr auto PiratePreviewSpin = 0x98; // bool
	}

	namespace n_UItemCategory { // : UCategoryBase
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UInterpTrackInstBoolProp { // : UInterpTrackInstProperty
		constexpr auto BoolProperty = 0x40; // UBoolProperty*
		constexpr auto ResetBool = 0x48; // bool
	}

	namespace n_UAthenaAnimationFishingAnimationsGroupingAsset { // : UDataAsset
		constexpr auto FishingAnimations = 0x28; // FAthenaAnimationAsyncLoadedFishingAnimations
		constexpr auto LocomotionAnimations = 0x268; // FAthenaAnimationAsyncLoadedLocomotionAnimations
		constexpr auto JumpingAnimations = 0x368; // FAthenaAnimationAsyncLoadedObjectJumpingAnimations
		constexpr auto IdleAnimations = 0x3e8; // FAthenaAnimationAsyncLoadedObjectIdleAnimations
		constexpr auto HandAdditive = 0x448; // UAnimSequence*
		constexpr auto PersistentLoadedAnimations = 0x468; // FAthenaAnimationPersistentItemAnimations
	}

	namespace n_UMaterialExpressionParticleRelativeTime { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UConditionalStatsAsset { // : UDataAsset
		constexpr auto ConditionalStats = 0x28; // TArray<FConditionalStat>
	}

	namespace n_UParticleModuleParametersOverX { // : UParticleModule
		constexpr auto GroupScales = 0x50; // float [0x6]
	}

	namespace n_UBTTask_IncrementBlackboardFloatValue { // : UBTTask_BlackboardBase
		constexpr auto FloatValueDelta = 0x88; // FAIDataProviderFloatValue
	}

	namespace n_UIslandByNameClueDestinationDescriptor { // : UClueDestinationDescriptor
		constexpr auto IslandIdentifier = 0x40; // FName
	}

	namespace n_UAILoadoutItemSpawnRequirement { // : USpawnRequirement
		constexpr auto AllowedLoadouts = 0x50; // TArray<ULoadoutAsset*>
	}

	namespace n_UAthenaAnimationSittingDataAsset { // : UDataAsset
		constexpr auto Animations = 0x28; // TArray<FSeatAnimationDefinition>
		constexpr auto SittingStateId = 0x38; // UAnimationStateId*
	}

	namespace n_UMaterialExpressionFunctionOutput { // : UMaterialExpression
		constexpr auto OutputName = 0x70; // FString
		constexpr auto Description = 0x80; // FString
		constexpr auto SortPriority = 0x90; // int32_t
		constexpr auto A = 0x98; // FExpressionInput
		constexpr auto bLastPreviewed = 0xd0; // char : 1
		constexpr auto Id = 0xd4; // FGuid
	}

	namespace n_AStaticDamageableCargoRunCrate { // : AStaticCargoRunCrate
		constexpr auto GatedHealthComponent = 0x7e8; // UGatedHealthComponent*
		constexpr auto VisualHealthResponseComponent = 0x7f0; // UVisualHealthResponseComponent*
	}

	namespace n_AAbilitySystemDebugHUD { // : AHUD
		constexpr auto WhiteColor = 0x3d0; // FColor
		constexpr auto GreenColor = 0x3d4; // FColor
		constexpr auto RedColor = 0x3d8; // FColor
		constexpr auto PlayerOwner = 0x3e0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x3e8; // char : 1
		constexpr auto bShowHUD = 0x3e8; // char : 1
		constexpr auto bShowDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowHitBoxDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowOverlays = 0x3e8; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x3e8; // char : 1
		constexpr auto PostRenderedActors = 0x3f0; // TArray<AActor*>
		constexpr auto LastHUDRenderTime = 0x400; // float
		constexpr auto RenderDelta = 0x404; // float
		constexpr auto DebugDisplay = 0x408; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x418; // TArray<FName>
		constexpr auto Canvas = 0x428; // UCanvas*
		constexpr auto DebugCanvas = 0x430; // UCanvas*
		constexpr auto DebugTextList = 0x438; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x448; // AActor*
		constexpr auto ShowDebugTargetActor = 0x450; // AActor*
	}

	namespace n_UCharacterAnimaticSettingsComponent { // : UActorComponent
		constexpr auto HasPlayedWakeUpAnimation = 0x138; // bool
	}

	namespace n_UFFTWaterComponent { // : UBaseWaterComponent
		constexpr auto WaterParams = 0x598; // FFFTWaterComponentParams
		constexpr auto Brush = 0x8a8; // UModel*
		constexpr auto BrushBodySetup = 0x8b0; // UBodySetup*
		constexpr auto PrePivot = 0x8b8; // FVector
		constexpr auto LightFunctionMaterial = 0x948; // UMaterialInterface*
		constexpr auto DefaultLightFunctionMaterial = 0x950; // UMaterial*
	}

	namespace n_UCatalogOfferDataAsset { // : UDataAsset
		constexpr auto OfferId = 0x28; // FGuid
		constexpr auto CurrencyType = 0x38; // EWalletCurrencyId
	}

	namespace n_UBTTask_RotatePetToFaceBBEntryWithTime { // : UBTTask_RotateToFaceBBEntry
		constexpr auto Delay = 0x90; // float
		constexpr auto RotationTime = 0x94; // float
	}

	namespace n_UFirstPersonAnimationData { // : UAthenaAnimationData
		constexpr auto FirstPersonAnimaticList = 0x68; // UFirstPersonAnimaticList*
	}

	namespace n_UDebugSkipToStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UDebugSkipToStepDesc*
		constexpr auto NextStep = 0x98; // UTaleQuestStep*
	}

	namespace n_UEnvQueryGenerator_ActorsOfClass { // : UEnvQueryGenerator
		constexpr auto SearchRadius = 0x50; // FAIDataProviderFloatValue
		constexpr auto SearchedActorClass = 0x80; // AActor*
		constexpr auto SearchCenter = 0x88; // UEnvQueryContext*
	}

	namespace n_UStatusResponseDrunkCurse { // : UStatusResponse
		constexpr auto DrunkennessStrength = 0x30; // float
	}

	namespace n_UMechanismAnimationCurve_Flamethrower { // : UMechanismAnimation
		constexpr auto MinLength = 0x58; // float
		constexpr auto MaxLength = 0x5c; // float
		constexpr auto Radius = 0x60; // float
		constexpr auto MinFlameLengthRequiredForDamage = 0x64; // float
		constexpr auto LengthCurve = 0x68; // FRuntimeFloatCurve
	}

	namespace n_UAIEncounterGenerationRecipe { // : UDataAsset
		constexpr auto Forms = 0x28; // TArray<FAIFormVarietyEntry>
		constexpr auto SkillsetProgression = 0x38; // FStringAssetReference
		constexpr auto ItemDropProgression = 0x48; // FStringAssetReference
		constexpr auto TargetSkillsetOverrides = 0x58; // FTargetSkillsetProgressionPair
		constexpr auto TargetItemDropOverrides = 0x78; // FTargetItemDropProgressionPair
	}

	namespace n_UParticleModuleLocationPrimitiveTriangle { // : UParticleModuleLocationBase
		constexpr auto StartOffset = 0x50; // FRawDistributionVector
		constexpr auto Height = 0x88; // FRawDistributionFloat
		constexpr auto Angle = 0xc0; // FRawDistributionFloat
		constexpr auto Thickness = 0xf8; // FRawDistributionFloat
	}

	namespace n_UMapTableCanvasDataAsset { // : UDataAsset
		constexpr auto CanvasDetails = 0x28; // FMapTableCanvasDetails
	}

	namespace n_UActivitiesService { // : UObject
		constexpr auto ActivityIconDataAsset = 0x48; // UPlayerActivityIconCatalogueDataAsset*
	}

	namespace n_UPeriodicAINoiseEventComponent { // : UActorComponent
		constexpr auto NoiseTag = 0xc8; // FName
		constexpr auto NoiseRangeBasedOnMovementSpeed = 0xd0; // bool
		constexpr auto ConstantNoiseRange = 0xd4; // float
		constexpr auto MovementSpeedToNoiseRange = 0xd8; // UCurveFloat*
		constexpr auto OwnerActor = 0xe0; // AActor*
	}

	namespace n_UPoseableSkeletalMeshComponent { // : USkeletalMeshComponent
		constexpr auto AnimationMode = 0x6d0; // EAnimationMode
		constexpr auto AnimBlueprintGeneratedClass = 0x6d8; // UObject*
		constexpr auto AnimScriptInstance = 0x6e0; // UAnimInstance*
		constexpr auto AnimationData = 0x6e8; // FSingleAnimationPlayData
		constexpr auto CachedLocalAtoms = 0x718; // TArray<FTransform>
		constexpr auto CachedSpaceBases = 0x728; // TArray<FTransform>
		constexpr auto GlobalAnimRateScale = 0x760; // float
		constexpr auto bHasValidBodies = 0x764; // char : 1
		constexpr auto KinematicBonesUpdateType = 0x768; // EKinematicBonesUpdateToPhysics
		constexpr auto bBlendPhysics = 0x76c; // char : 1
		constexpr auto bEnablePhysicsOnDedicatedServer = 0x76c; // char : 1
		constexpr auto bUpdateJointsFromAnimation = 0x76c; // char : 1
		constexpr auto bDisableClothSimulation = 0x76c; // char : 1
		constexpr auto bCollideWithEnvironment = 0x76c; // char : 1
		constexpr auto bCollideWithAttachedChildren = 0x76c; // char : 1
		constexpr auto bLocalSpaceSimulation = 0x76c; // char : 1
		constexpr auto bClothMorphTarget = 0x76c; // char : 1
		constexpr auto bResetAfterTeleport = 0x76d; // char : 1
		constexpr auto TeleportDistanceThreshold = 0x770; // float
		constexpr auto TeleportRotationThreshold = 0x774; // float
		constexpr auto ClothBlendWeight = 0x778; // float
		constexpr auto RootBoneTranslation = 0x780; // FVector
		constexpr auto bNoSkeletonUpdate = 0x78c; // char : 1
		constexpr auto bPauseAnims = 0x78c; // char : 1
		constexpr auto bEnablePerPolyCollision = 0x78c; // char : 1
		constexpr auto BodySetup = 0x790; // UBodySetup*
		constexpr auto bAutonomousTickPose = 0x798; // char : 1
		constexpr auto bForceRefpose = 0x798; // char : 1
		constexpr auto bOldForceRefPose = 0x798; // char : 1
		constexpr auto bShowPrePhysBones = 0x798; // char : 1
		constexpr auto bRequiredBonesUpToDate = 0x798; // char : 1
		constexpr auto bAnimTreeInitialised = 0x798; // char : 1
		constexpr auto bEnableLineCheckWithBounds = 0x798; // char : 1
		constexpr auto LineCheckBoundsScale = 0x79c; // FVector
		constexpr auto RagdollAggregateThreshold = 0x7a8; // int32_t
		constexpr auto OnConstraintBroken = 0x7b0; // FScriptMulticastDelegate
		constexpr auto UseRefPoseToInitialise = 0x7c0; // bool
		constexpr auto LastPoseTickTime = 0x988; // float
	}

	namespace n_UMerchantQuestItemPluralisationData { // : UDataAsset
		constexpr auto ItemNames = 0x28; // TArray<FText>
	}

	namespace n_UAshenLordSummonAIAbilityParams { // : USummonAIAbilityParams
		constexpr auto FireShroudVFXParams = 0xe8; // FVFXHandlerComponentParams
		constexpr auto FireShroudVFXSpawner = 0x128; // UVFXSpawnerComponent*
		constexpr auto FireShroudParams = 0x130; // FAshenLordFireShroudParams
	}

	namespace n_URadialForceComponent { // : USceneComponent
		constexpr auto Radius = 0x2b0; // float
		constexpr auto Falloff = 0x2b4; // ERadialImpulseFalloff
		constexpr auto ImpulseStrength = 0x2b8; // float
		constexpr auto bImpulseVelChange = 0x2bc; // char : 1
		constexpr auto bIgnoreOwningActor = 0x2bc; // char : 1
		constexpr auto ForceStrength = 0x2c0; // float
		constexpr auto DestructibleDamage = 0x2c4; // float
		constexpr auto ObjectTypesToAffect = 0x2c8; // TArray<EObjectTypeQuery>
	}

	namespace n_USunkenCurseArtefactVfxComponent { // : UActorComponent
		constexpr auto VFXTintColour = 0xc8; // FColor
		constexpr auto DamagedParticleSystem = 0xd0; // UObject*
		constexpr auto DefeatedParticleSystem = 0xd8; // UObject*
		constexpr auto UnderwaterDefeatedParticleSystem = 0xe0; // UObject*
		constexpr auto GlowMaterialIndex = 0xe8; // int32_t
		constexpr auto GlowMaterialPropertyName = 0xec; // FName
		constexpr auto GlowMaterialScale = 0xf4; // float
		constexpr auto GlowMaterialBias = 0xf8; // float
		constexpr auto GlowUpdateSpeed = 0xfc; // float
		constexpr auto Statue = 0x100; // AStatueThreatBase*
		constexpr auto GlowMaterial = 0x108; // UMaterialInstanceDynamic*
	}

	namespace n_AVolcano { // : AActor
		constexpr auto HitDetectionVolume = 0x3e8; // UCapsuleComponent*
		constexpr auto UseDormantDuration = 0x3f0; // bool
		constexpr auto VolcanoSetupData = 0x3f8; // UVolcanoSetupDataAsset*
		constexpr auto AssociatedSuperheatedWater = 0x400; // AMurk*
		constexpr auto AssociatedLavaZone = 0x408; // ALavaZone*
		constexpr auto InnerTargetRadiusInMetres = 0x410; // float
		constexpr auto OuterTargetRadiusInMetres = 0x414; // float
		constexpr auto NearbyPlayerRangeToFireProjectilesInMetres = 0x418; // float
		constexpr auto RandomShipPositionScale = 0x41c; // float
		constexpr auto WarmingUpEmitter = 0x420; // UParticleSystemComponent*
		constexpr auto EruptingEmitter = 0x428; // UParticleSystemComponent*
		constexpr auto BlendedLightingZoneComponent = 0x430; // UBlendedLightingZoneComponent*
		constexpr auto BlendedAtmosphericPressureZoneComponent = 0x438; // UBlendedAtmosphericPressureZoneComponent*
		constexpr auto BlendedPostProcessingRainZoneComponent = 0x440; // UBlendedPostProcessingRainZoneComponent*
		constexpr auto ProjectileLaunchOffset = 0x448; // FVector
		constexpr auto AudioPool = 0x458; // UWwiseObjectPoolWrapper*
		constexpr auto WarmupAudioPlayEvent = 0x460; // UWwiseEvent*
		constexpr auto WarmupAudioStopEvent = 0x468; // UWwiseEvent*
		constexpr auto EruptingAudioPlayEvent = 0x470; // UWwiseEvent*
		constexpr auto EruptingAudioStopEvent = 0x478; // UWwiseEvent*
		constexpr auto InstantKillZone = 0x480; // UCapsuleComponent*
		constexpr auto InstantKillZoneTestInterval = 0x488; // float
		constexpr auto StateData = 0x48c; // FVolcanoStateData
		constexpr auto AssociatedIslandName = 0x498; // FName
	}

	namespace n_UWaterInteractionComponent { // : UBoxComponent
		constexpr auto BoxExtent = 0x5a8; // FVector
	}

	namespace n_UWaitUntilAnyParticipantEntersRadiusStep { // : UParticipantRadiusTrackerStepDesc
		constexpr auto DurationBetweenChecks = 0x80; // float
		constexpr auto Location = 0x88; // FQuestVariableVector
		constexpr auto Radius = 0x98; // FQuestVariableFloat
	}

	namespace n_UStatusResponseChangeSailHeight { // : UStatusResponse
		constexpr auto Duration = 0x30; // float
	}

	namespace n_UIsBootyItemSpawnSourceStatCondition { // : UTargetedStatCondition
		constexpr auto TargetSpawnSource = 0x30; // ESpawnedItemSource
	}

	namespace n_ATimedDoorMechanismAction { // : ABaseToggleAnimatedMechanismAction
		constexpr auto KeySequences = 0x568; // TArray<FKeySequence>
		constexpr auto InternalTrigger = 0x578; // UMechanismTriggerComponent*
		constexpr auto UseSameLandmarkEventsForAllJammedPhases = 0x580; // bool
		constexpr auto UseSameLandmarkEventsForAllLoweringPhases = 0x581; // bool
		constexpr auto LandmarkReactionsWhenDoorOpens = 0x588; // FTimedDoorLandmarkReactions
		constexpr auto LandmarkReactionsWhenDoorLowers = 0x598; // TArray<FTimedDoorLandmarkReactions>
		constexpr auto LandmarkReactionsWhenDoorJams = 0x5a8; // TArray<FTimedDoorLandmarkReactions>
		constexpr auto LandmarkReactionPlayer = 0x5b8; // ALandmarkReactionPlayer*
		constexpr auto CurrentKeyDesc = 0x5f0; // UItemDesc*
		constexpr auto ServerDoorState = 0x5f8; // FTimedDoorState
		constexpr auto EventDispatcher = 0x608; // FObjectMessagingDispatcher
	}

	namespace n_UItemCapForAssets { // : UObject
		constexpr auto Items = 0x28; // TArray<UClass*>
		constexpr auto Cap = 0x38; // int32_t
	}

	namespace n_URetractableFloatingBarrelComponent { // : URetractableComponent
		constexpr auto OwnerBuoyancyInterface = 0x100; // TScriptInterface<Class>
	}

	namespace n_UBTDecorator_FeatureToggle { // : UBTDecorator
		constexpr auto FeatureName = 0x68; // FName
	}

	namespace n_UCategoryDefaults { // : UDataAsset
		constexpr auto CategoryDefaults = 0x28; // TArray<FCategoryDefaultsUnit>
	}

	namespace n_UBTTask_RunBehaviorDynamic { // : UBTTaskNode
		constexpr auto InjectionTag = 0x60; // FGameplayTag
		constexpr auto DefaultBehaviorAsset = 0x68; // UBehaviorTree*
		constexpr auto BehaviorAsset = 0x70; // UBehaviorTree*
	}

	namespace n_UWaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_AVoyageProposalContainerInteraction { // : AModalInteraction
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UAthenaCharacterStateManagerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UParticleModuleRotationOverLifetime { // : UParticleModuleRotationBase
		constexpr auto RotationOverLife = 0x50; // FRawDistributionFloat
		constexpr auto Scale = 0x88; // char : 1
	}

	namespace n_AAthenaGhostPlayerCharacterMock { // : AAthenaGhostPlayerCharacter
		constexpr auto StreamingLocationComponent = 0x1ac0; // UStreamingLocationComponent*
		constexpr auto GhostShipTickManager = 0x1b58; // AGhostShipTickManager*
	}

	namespace n_ATestActionControlStateCreatorDefinition { // : AActionStateCreatorDefinition
		constexpr auto TeleportParams = 0x3d0; // FTeleportActionStateParams
		constexpr auto MigrationParams = 0x3fc; // FMigrationActionStateParams
	}

	namespace n_UEnvQueryTest_Distance { // : UEnvQueryTest
		constexpr auto TestMode = 0x170; // EEnvTestDistance
		constexpr auto DistanceTo = 0x178; // UEnvQueryContext*
	}

	namespace n_ULevel { // : UObject
		constexpr auto ActorCluster = 0xc8; // ULevelActorContainer*
		constexpr auto OwningWorld = 0xd0; // UWorld*
		constexpr auto Model = 0xd8; // UModel*
		constexpr auto ModelComponents = 0xe0; // TArray<UModelComponent*>
		constexpr auto LevelScriptActor = 0xf0; // ALevelScriptActor*
		constexpr auto NavListStart = 0xf8; // ANavigationObjectBase*
		constexpr auto NavListEnd = 0x100; // ANavigationObjectBase*
		constexpr auto NavDataChunks = 0x108; // TArray<UNavigationDataChunk*>
		constexpr auto LightmapTotalSize = 0x118; // float
		constexpr auto ShadowmapTotalSize = 0x11c; // float
		constexpr auto StaticNavigableGeometry = 0x120; // TArray<FVector>
		constexpr auto LevelVisibility = 0x260; // bool
		constexpr auto Blocked = 0x270; // char : 1
		constexpr auto AssetUserData = 0x2d8; // TArray<UAssetUserData*>
	}

	namespace n_UParticleModuleTypeDataMesh { // : UParticleModuleTypeDataBase
		constexpr auto Mesh = 0x50; // UStaticMesh*
		constexpr auto CastShadows = 0x58; // char : 1
		constexpr auto DoCollisions = 0x58; // char : 1
		constexpr auto MeshAlignment = 0x5c; // EMeshScreenAlignment
		constexpr auto bOverrideMaterial = 0x60; // char : 1
		constexpr auto Pitch = 0x64; // float
		constexpr auto Roll = 0x68; // float
		constexpr auto Yaw = 0x6c; // float
		constexpr auto RollPitchYawRange = 0x70; // FRawDistributionVector
		constexpr auto AxisLockOption = 0xb0; // EParticleAxisLock
		constexpr auto bCameraFacing = 0xb4; // char : 1
		constexpr auto CameraFacingUpAxisOption = 0xb8; // EMeshCameraFacingUpAxis
		constexpr auto CameraFacingOption = 0xb9; // EMeshCameraFacingOptions
		constexpr auto bApplyParticleRotationAsSpin = 0xbc; // char : 1
		constexpr auto bFaceCameraDirectionRatherThanPosition = 0xbc; // char : 1
		constexpr auto bFaceCameraOnlyOnSpawn = 0xbc; // char : 1
		constexpr auto bCollisionsConsiderPartilceSize = 0xbc; // char : 1
	}

	namespace n_UStatusResponseToggleInteractionPoint { // : UStatusResponse
		constexpr auto InteractionPointClasses = 0x30; // TArray<AInteractableBase*>
		constexpr auto ShipCurseTag = 0x40; // EShipCurseTag
		constexpr auto CurseTag = 0x41; // ECurseTag
		constexpr auto ResponseDuration = 0x44; // float
	}

	namespace n_UBullRushAIAbilityParams { // : UMeleeChargeAIAbilityParams
		constexpr auto StaticCollisionWarmup = 0xe0; // float
		constexpr auto ValidatorEQSystems = 0xe8; // TArray<UEnvQuery*>
		constexpr auto TimeBetweenCanExecuteChecks = 0xf8; // float
	}

	namespace n_AShopkeeper { // : ANPC
		constexpr auto Id = 0x4c8; // FGuid
		constexpr auto InteractableGrammaticalGenderComponent = 0x4d8; // UInteractableGrammaticalGenderComponent*
		constexpr auto CosmeticItemAnimationComponent = 0x4e0; // UCosmeticItemAnimationComponent*
		constexpr auto BeckonComponent = 0x4e8; // UBeckonComponent*
	}

	namespace n_UBlockGeysersTaleQuestService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UBlockGeysersTaleQuestServiceDesc*
	}

	namespace n_UInputBinder { // : UObject
		constexpr auto InputComponent = 0x28; // UInputComponent*
	}

	namespace n_UDirectionalLightComponent { // : ULightComponent
		constexpr auto bEnableLightShaftOcclusion = 0x438; // char : 1
		constexpr auto OcclusionMaskDarkness = 0x43c; // float
		constexpr auto OcclusionDepthRange = 0x440; // float
		constexpr auto LightShaftOverrideDirection = 0x444; // FVector
		constexpr auto WholeSceneDynamicShadowRadius = 0x450; // float
		constexpr auto DynamicShadowDistanceMovableLight = 0x454; // float
		constexpr auto DynamicShadowDistanceStationaryLight = 0x458; // float
		constexpr auto DynamicShadowCascades = 0x45c; // int32_t
		constexpr auto CascadeDistributionExponent = 0x460; // float
		constexpr auto CascadeTransitionFraction = 0x464; // float
		constexpr auto ShadowDistanceFadeoutFraction = 0x468; // float
		constexpr auto LastTransitionSizeOverride = 0x46c; // float
		constexpr auto CloseCascadeUpdateRateInMs = 0x470; // float
		constexpr auto FarCascadesUpdateRateInMs = 0x474; // float
		constexpr auto bUseInsetShadowsForMovableObjects = 0x478; // char : 1
		constexpr auto FarShadowCascadeCount = 0x47c; // int32_t
		constexpr auto FarShadowDistance = 0x480; // float
		constexpr auto NormalOffsetScale = 0x484; // float
		constexpr auto CloudsShadowsIntensity = 0x488; // float
		constexpr auto DistanceFieldShadowDistance = 0x48c; // float
		constexpr auto LightSourceAngle = 0x490; // float
		constexpr auto TraceDistance = 0x494; // float
		constexpr auto LightmassSettings = 0x498; // FLightmassDirectionalLightSettings
		constexpr auto bCastModulatedShadows = 0x4a8; // char : 1
		constexpr auto ModulatedShadowColor = 0x4ac; // FColor
		constexpr auto bUsedAsAtmosphereSunLight = 0x4b0; // char : 1
	}

	namespace n_UEmissaryRewardCampaignSettingsAsset { // : UDataAsset
		constexpr auto Companies = 0x28; // TArray<FEmissaryCompanyCampaignSettings>
	}

	namespace n_UAnimCompress_Automatic { // : UAnimCompress
		constexpr auto MaxEndEffectorError = 0x40; // float
		constexpr auto bTryFixedBitwiseCompression = 0x44; // char : 1
		constexpr auto bTryPerTrackBitwiseCompression = 0x44; // char : 1
		constexpr auto bTryLinearKeyRemovalCompression = 0x44; // char : 1
		constexpr auto bTryIntervalKeyRemoval = 0x44; // char : 1
		constexpr auto bRunCurrentDefaultCompressor = 0x44; // char : 1
		constexpr auto bAutoReplaceIfExistingErrorTooGreat = 0x44; // char : 1
		constexpr auto bRaiseMaxErrorToExisting = 0x44; // char : 1
	}

	namespace n_ATestDockingActorWithPhrases { // : ATestClimbingActor
		constexpr auto ClimbingComponent = 0x640; // UClimbingComponent*
	}

	namespace n_UMaterialExpressionMakeMaterialAttributes { // : UMaterialExpression
		constexpr auto BaseColor = 0x70; // FExpressionInput
		constexpr auto Metallic = 0xa8; // FExpressionInput
		constexpr auto Specular = 0xe0; // FExpressionInput
		constexpr auto Roughness = 0x118; // FExpressionInput
		constexpr auto EmissiveColor = 0x150; // FExpressionInput
		constexpr auto Opacity = 0x188; // FExpressionInput
		constexpr auto OpacityMask = 0x1c0; // FExpressionInput
		constexpr auto Normal = 0x1f8; // FExpressionInput
		constexpr auto WorldPositionOffset = 0x230; // FExpressionInput
		constexpr auto WorldDisplacement = 0x268; // FExpressionInput
		constexpr auto TessellationMultiplier = 0x2a0; // FExpressionInput
		constexpr auto SubsurfaceColor = 0x2d8; // FExpressionInput
		constexpr auto ClearCoat = 0x310; // FExpressionInput
		constexpr auto ClearCoatRoughness = 0x348; // FExpressionInput
		constexpr auto AmbientOcclusion = 0x380; // FExpressionInput
		constexpr auto Refraction = 0x3b8; // FExpressionInput
		constexpr auto CustomizedUVs = 0x3f0; // FExpressionInput [0x8]
		constexpr auto PixelDepthOffset = 0x5b0; // FExpressionInput
	}

	namespace n_ULiquidContainerService { // : UInteractableService
		constexpr auto InteractableAreas = 0x38; // TArray<UInteractableArea*>
	}

	namespace n_UPacingComponent { // : UActorComponent
		constexpr auto PublicData = 0xd0; // UPacingComponentPublicData*
		constexpr auto Player = 0xe8; // AAthenaPlayerCharacter*
	}

	namespace n_AMatineeActor { // : AActor
		constexpr auto MatineeData = 0x3d0; // UInterpData*
		constexpr auto MatineeControllerName = 0x3d8; // FName
		constexpr auto PlayRate = 0x3e0; // float
		constexpr auto bPlayOnLevelLoad = 0x3e4; // char : 1
		constexpr auto bForceStartPos = 0x3e4; // char : 1
		constexpr auto ForceStartPosition = 0x3e8; // float
		constexpr auto bLooping = 0x3ec; // char : 1
		constexpr auto bRewindOnPlay = 0x3ec; // char : 1
		constexpr auto bNoResetOnRewind = 0x3ec; // char : 1
		constexpr auto bRewindIfAlreadyPlaying = 0x3ec; // char : 1
		constexpr auto bDisableRadioFilter = 0x3ec; // char : 1
		constexpr auto bClientSideOnly = 0x3ec; // char : 1
		constexpr auto bSkipUpdateIfNotVisible = 0x3ec; // char : 1
		constexpr auto bIsSkippable = 0x3ec; // char : 1
		constexpr auto PreferredSplitScreenNum = 0x3f0; // int32_t
		constexpr auto bDisableMovementInput = 0x3f4; // char : 1
		constexpr auto bDisableLookAtInput = 0x3f4; // char : 1
		constexpr auto bHidePlayer = 0x3f4; // char : 1
		constexpr auto bHideHud = 0x3f4; // char : 1
		constexpr auto GroupActorInfos = 0x3f8; // TArray<FInterpGroupActorInfo>
		constexpr auto bShouldShowGore = 0x408; // char : 1
		constexpr auto GroupInst = 0x410; // TArray<UInterpGroupInst*>
		constexpr auto CameraCuts = 0x420; // TArray<FCameraCutInfo>
		constexpr auto bIsPlaying = 0x430; // char : 1
		constexpr auto bReversePlayback = 0x430; // char : 1
		constexpr auto bPaused = 0x430; // char : 1
		constexpr auto bPendingStop = 0x430; // char : 1
		constexpr auto InterpPosition = 0x434; // float
		constexpr auto ReplicationForceIsPlaying = 0x43c; // char
		constexpr auto bServerInitialLevelStreamingComplete = 0x444; // char : 1
	}

	namespace n_UPirateLegendDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UTelemetryTaskStepDesc { // : UTaleQuestStepDesc
		constexpr auto TaskDesc = 0x80; // UTaleQuestStepDesc*
		constexpr auto Description = 0x88; // FString
		constexpr auto TelemetryContext = 0x98; // FTelemetryStepContext
	}

	namespace n_USeasonPassEntitlementDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UDialogueSoundWaveProxy { // : USoundBase
		constexpr auto SoundClassObject = 0x28; // USoundClass*
		constexpr auto bDebug = 0x30; // char : 1
		constexpr auto MaxConcurrentResolutionRule = 0x34; // EMaxConcurrentResolutionRule
		constexpr auto MaxConcurrentPlayCount = 0x38; // int32_t
		constexpr auto Duration = 0x3c; // float
		constexpr auto AttenuationSettings = 0x40; // USoundAttenuation*
	}

	namespace n_UShipDamageableComponent { // : UOptInDamageableComponent
		constexpr auto Ship = 0x1a0; // AActor*
	}

	namespace n_UAchievementQueryCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_APlayerBuriedItemsMapBundleItemProxy { // : AFloatingItemProxy
		constexpr auto PhysicsErrorCorrection = 0x630; // FRigidBodyErrorCorrection
		constexpr auto BaseComponent = 0x650; // UBoxComponent*
		constexpr auto MovementTimeStamp = 0x688; // FNetTimeStampCalculator
		constexpr auto TutorialOwner = 0x6f8; // AActor*
		constexpr auto IsTutorialProxy = 0x700; // bool
		constexpr auto ReplicatedPhysicsState = 0x708; // FReplicatedPhysicsState
		constexpr auto ForceKeepTickActive = 0x758; // bool
		constexpr auto CachedAutoAimCollisionChannel = 0x788; // ECollisionChannel
		constexpr auto CachedVehicleCollisionResponse = 0x789; // ECollisionResponse
	}

	namespace n_UAddMarkToTornMapStep { // : UTaleQuestStep
		constexpr auto MapMark = 0xb0; // UMapMarkId*
	}

	namespace n_UParticleModuleSpawnRepeatPerPoint { // : UParticleModuleSpawnBase
		constexpr auto bProcessSpawnRate = 0x50; // char : 1
		constexpr auto bProcessBurstList = 0x50; // char : 1
	}

	namespace n_UFloatingMessageInABottleClueDestinationGenerator { // : UClueDestinationGenerator
		constexpr auto RequiredClueSiteDataType = 0x28; // UClueSiteData*
		constexpr auto WeightedSupportedDescriptorTypes = 0x30; // TArray<FWeightedClueDestinationDescriptor>
	}

	namespace n_AOnlineAthenaPlayerController { // : AAthenaPlayerController
		constexpr auto LogoutNoteCompletionIdent = 0x1490; // FMysteriousNotesCompletionEventsModelEntry
		constexpr auto IdleTimeTracker = 0x1498; // FIdleTimeTracker
		constexpr auto IdleDisconnectEnabled = 0x14d1; // bool
	}

	namespace n_UPirateSelector { // : UActorComponent
		constexpr auto QueuedPiratesToSpawn = 0xc8; // TArray<APosablePirate*>
		constexpr auto BeginCelebration = 0xd8; // FScriptMulticastDelegate
		constexpr auto StartGeneratingPirates = 0xe8; // FScriptMulticastDelegate
		constexpr auto EndGeneratingPirates = 0xf8; // FScriptMulticastDelegate
		constexpr auto GenerateShipSelectionPirate = 0x108; // FScriptMulticastDelegate
		constexpr auto SelectionConfirmed = 0x118; // FScriptMulticastDelegate
		constexpr auto SelectionCancelled = 0x128; // FScriptMulticastDelegate
		constexpr auto SelectPirateButtonPressed = 0x138; // FScriptMulticastDelegate
		constexpr auto RefreshPiratesButtonPressed = 0x148; // FScriptMulticastDelegate
		constexpr auto FavoritePirateButtonPressed = 0x158; // FScriptMulticastDelegate
		constexpr auto LeavingPirateSelectionState = 0x168; // FScriptMulticastDelegate
	}

	namespace n_APlaneReflectionCapture { // : AReflectionCapture
		constexpr auto CaptureComponent = 0x3d0; // UReflectionCaptureComponent*
	}

	namespace n_UBuoyantObjectSpawnProfileDataAsset { // : UDataAsset
		constexpr auto Profile = 0x28; // FBuoyantObjectSpawnProfile
	}

	namespace n_UBlueprintGeneratedClass { // : UClass
		constexpr auto NumReplicatedProperties = 0x1c0; // int32_t
		constexpr auto DynamicBindingObjects = 0x1c8; // TArray<UDynamicBlueprintBinding*>
		constexpr auto ComponentTemplates = 0x1d8; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x1e8; // TArray<UTimelineTemplate*>
		constexpr auto SimpleConstructionScript = 0x1f8; // USimpleConstructionScript*
		constexpr auto InheritableComponentHandler = 0x200; // UInheritableComponentHandler*
		constexpr auto UberGraphFramePointerProperty = 0x208; // UStructProperty*
		constexpr auto UberGraphFunction = 0x210; // UFunction*
		constexpr auto FastCallPairs = 0x218; // TArray<FEventGraphFastCallPair>
	}

	namespace n_UAddNPCOnSurfaceStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UDistributionVectorUniform { // : UDistributionVector
		constexpr auto Max = 0x38; // FVector
		constexpr auto Min = 0x44; // FVector
		constexpr auto bLockAxes = 0x50; // char : 1
		constexpr auto LockedAxes = 0x54; // EDistributionVectorLockFlags
		constexpr auto MirrorFlags = 0x55; // EDistributionVectorMirrorFlags [0x3]
		constexpr auto bUseExtremes = 0x58; // char : 1
	}

	namespace n_ATreasureChestItemInfo { // : ABootyItemInfo
		constexpr auto BootyType = 0x528; // EBootyTypes
		constexpr auto Id = 0x52c; // FGuid
		constexpr auto PlayedFirstTimeEquipSfx = 0x53c; // bool
		constexpr auto HandInPlayerStats = 0x540; // TArray<FPlayerStat>
		constexpr auto HandInStolenPlayerStats = 0x550; // TArray<FPlayerStat>
		constexpr auto HandInStolenFromPlayerStats = 0x560; // TArray<FPlayerStat>
		constexpr auto HandInGiftPlayerStats = 0x570; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendPlayerStats = 0x580; // TArray<FPlayerStat>
		constexpr auto HandInOnSchedulePlayerStats = 0x590; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendOnSchedulePlayerStats = 0x5a0; // TArray<FPlayerStat>
		constexpr auto HandInAsEmissaryPlayerStats = 0x5b0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInAsMaxLevelEmissaryPlayerStats = 0x5c0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsEmissaryPlayerStats = 0x5d0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsMaxLevelEmissaryPlayerStats = 0x5e0; // TArray<FEmissaryBootyItemStats>
		constexpr auto UsePlayerStats = 0x5f0; // TArray<FPlayerStat>
		constexpr auto UseStolenPlayerStats = 0x600; // TArray<FPlayerStat>
		constexpr auto CompanySpecificStats = 0x610; // FCompanyBootyStatList
		constexpr auto ConditionalHandInStat = 0x620; // FConditionalHandInStat
		constexpr auto DiscoveredPopupDesc = 0x640; // UPopUpMessageDesc*
		constexpr auto SellPrerequisites = 0x648; // FBootyItemSellPrerequisites
		constexpr auto TrackedOwnerComponent = 0x658; // UTrackedOwnerComponent*
		constexpr auto ItemQualityComponent = 0x660; // UItemQualityComponent*
		constexpr auto ItemQualityLevel = 0x668; // EEmissaryQualityLevel
		constexpr auto CompanySpecificItemQualityLevel = 0x670; // TArray<FPerComanyItemQualityEntry>
		constexpr auto HandInRewardId = 0x680; // FRewardId
		constexpr auto HandInRewardIdCompanySpecific = 0x688; // TArray<FCompanySpecificBootyReward>
		constexpr auto RewardToOwnCrewOnly = 0x698; // bool
		constexpr auto Rarity = 0x69c; // FName
		constexpr auto DeliverableComponent = 0x6c0; // UDeliverableComponent*
		constexpr auto CrewOwnershipTrackingComponent = 0x6c8; // UCrewOwnershipTrackingComponent*
		constexpr auto BootyItemShipOwnershipComponent = 0x6d0; // UBootyItemShipOwnershipComponent*
		constexpr auto SpawnSource = 0x6d8; // ESpawnedItemSource
	}

	namespace n_UInteractableArea { // : UObject
		constexpr auto Bounds = 0x28; // FBoxSphereBounds
		constexpr auto Name = 0x44; // FName
		constexpr auto Interactable = 0x50; // UObject*
		constexpr auto Parent = 0x58; // AActor*
	}

	namespace n_UGhostAIFormDataAsset { // : UAthenaAIFormDataAsset
		constexpr auto GhostShroudStaticMesh = 0x90; // UStaticMesh*
		constexpr auto GhostShroudAttachSocketName = 0x98; // FName
	}

	namespace n_UFeatureToggleStatCondition { // : UStatCondition
		constexpr auto FeatureToggle = 0x28; // FName
	}

	namespace n_UMaterialExpressionEyeAdaptation { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UDiggingSettings { // : UDeveloperSettings
		constexpr auto BuriedDecalClass = 0x38; // UBuriedItemDecal*
		constexpr auto MaxNumVisibleDecals = 0x40; // int32_t
		constexpr auto DecalReplicationDistance = 0x44; // float
		constexpr auto FullyBuriedItemDestroyDelay = 0x48; // float
		constexpr auto DirtinessParameterName = 0x4c; // FName
		constexpr auto UpdateDirtynessDelayOnBury = 0x54; // float
	}

	namespace n_AGameplayAbilityTargetActor_ActorPlacement { // : AGameplayAbilityTargetActor_GroundTrace
		constexpr auto PlacedActorClass = 0x520; // UObject*
		constexpr auto PlacedActorMaterial = 0x528; // UMaterialInterface*
	}

	namespace n_USplashProbeVFXComponent { // : UActorComponent
		constexpr auto Probes = 0xf0; // USplashProbeDataAsset*
		constexpr auto ProbesInstance = 0xf8; // USplashProbeDataAsset*
		constexpr auto AttachProbesToOwner = 0x100; // FActorComponentSelector
		constexpr auto AttachProbesToComponent = 0x110; // USceneComponent*
	}

	namespace n_UBTService_DisableStun { // : UBTService
		constexpr auto Interval = 0x60; // float
		constexpr auto RandomDeviation = 0x64; // float
		constexpr auto bCallTickOnSearchStart = 0x68; // char : 1
		constexpr auto bRestartTimerOnEachActivation = 0x68; // char : 1
	}

	namespace n_UParticleModuleBeamTarget { // : UParticleModuleBeamBase
		constexpr auto TargetMethod = 0x50; // Beam2SourceTargetMethod
		constexpr auto TargetName = 0x54; // FName
		constexpr auto Target = 0x60; // FRawDistributionVector
		constexpr auto bTargetAbsolute = 0x98; // char : 1
		constexpr auto bLockTarget = 0x98; // char : 1
		constexpr auto TargetTangentMethod = 0x9c; // Beam2SourceTargetTangentMethod
		constexpr auto TargetTangent = 0xa0; // FRawDistributionVector
		constexpr auto bLockTargetTangent = 0xd8; // char : 1
		constexpr auto TargetStrength = 0xe0; // FRawDistributionFloat
		constexpr auto bLockTargetStength = 0x118; // char : 1
		constexpr auto LockRadius = 0x11c; // float
	}

	namespace n_UPhysicsAsset { // : UObject
		constexpr auto BodySetup = 0x28; // TArray<UBodySetup*>
		constexpr auto BoundsBodies = 0x38; // TArray<int32_t>
		constexpr auto ConstraintSetup = 0x48; // TArray<UPhysicsConstraintTemplate*>
	}

	namespace n_USoundNodeWavePlayer { // : USoundNodeAssetReferencer
		constexpr auto SoundWaveAssetPtr = 0x38; // USoundWave*
		constexpr auto SoundWave = 0x58; // USoundWave*
		constexpr auto bLooping = 0x60; // char : 1
	}

	namespace n_UAIEncounterSettingsFixed { // : UAIEncounterSettings
		constexpr auto SpecificSkillset = 0x60; // FStringAssetReference
		constexpr auto Loadout = 0x70; // FStringAssetReference
		constexpr auto Form = 0x80; // FStringAssetReference
		constexpr auto Ammo = 0x90; // FStringAssetReference
		constexpr auto DioramaRole = 0xa0; // FName
		constexpr auto LocalisableName = 0xa8; // FText
		constexpr auto EncounterTrackingParams = 0xe0; // FEncounterParams
		constexpr auto ItemDropComponentClass = 0xf0; // UClass*
	}

	namespace n_UGameplayTagsSettings { // : UObject
		constexpr auto GameplayTags = 0x28; // TArray<FString>
	}

	namespace n_UPlayersSettings { // : UDeveloperSettings
		constexpr auto PlayerNameDataAssetLocation = 0x38; // FStringAssetReference
	}

	namespace n_UTaleQuestGetProjectionPointOnTradeRouteStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTaleQuestNPCBeckonCrewStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UOpenableItemMeshAnimationReactionComponent { // : UOpenableItemReactionComponent
		constexpr auto AnimNameSets = 0xd8; // TArray<FOpenableItemMeshAnimationReactionComponentAnimationNameAndSfxCueSet>
		constexpr auto MeshAnimatorComponent = 0xe8; // UMeshAnimatorComponent*
	}

	namespace n_ACutsceneLockNPC { // : ANPC
		constexpr auto LockComponent = 0x610; // ULockComponent*
		constexpr auto CutsceneComponent = 0x618; // UCutsceneComponent*
		constexpr auto AnimNotifyWwiseEmitterComponent = 0x620; // UAnimNotifyWwiseEmitterComponent*
		constexpr auto OnLockOpenedCutscene = 0x628; // FName
		constexpr auto TakeKeyInteractionText = 0x630; // FText
		constexpr auto KeyTaken = 0x668; // bool
		constexpr auto SetHiddenData = 0x670; // TArray<FSetHiddenData>
	}

	namespace n_ACannonBall { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x790; // UInventoryItemComponent*
		constexpr auto ConsumableWieldable = 0x798; // UConsumableWieldableComponent*
	}

	namespace n_AVariableFillRateWaterVolume { // : AWaterVolume
		constexpr auto MaxAmount = 0x3d0; // float
		constexpr auto EnableRipplesFromOverlappingActors = 0x3d4; // bool
		constexpr auto RippleLocations = 0x3d8; // TArray<FVector>
		constexpr auto RippleGenerators = 0x3e8; // TArray<FVector>
		constexpr auto OverlappingActors = 0x3f8; // TArray<AActor*>
		constexpr auto RippleFrequency = 0x408; // float
		constexpr auto CurrentAmount = 0x40c; // float
		constexpr auto TargetAmount = 0x410; // float
		constexpr auto LerpRate = 0x414; // float
	}

	namespace n_AGhostShipPlayerSpawnLocation { // : APlayerStart
		constexpr auto PlayerStartTag = 0x3f8; // FName
	}

	namespace n_AMast { // : AActor
		constexpr auto MastType = 0x408; // EMastType
		constexpr auto MastAudioParams = 0x410; // UMastAudioParams*
		constexpr auto SceneRootComponent = 0x418; // USceneComponent*
		constexpr auto AngleCombinerComponent = 0x420; // UIntentCombinerComponent*
		constexpr auto SailHoistIntentCombinerComponent = 0x428; // UIntentCombinerComponent*
		constexpr auto MastHoistIntentCombinerComponent = 0x430; // UIntentCombinerComponent*
		constexpr auto MastMovingAttachComponent = 0x438; // USceneComponent*
		constexpr auto SailAnglePivotComponent = 0x440; // USceneComponent*
		constexpr auto CustomizationComponent = 0x448; // UReplicatedShipPartCustomizationComponent*
		constexpr auto RepairableComponentFirst = 0x450; // URepairableComponent*
		constexpr auto RepairableComponentSecond = 0x458; // URepairableComponent*
		constexpr auto RepairableComponentThird = 0x460; // URepairableComponent*
		constexpr auto DamageableComponent = 0x468; // UShipDamageableComponent*
		constexpr auto MastFlammableComponent = 0x470; // UMastFlammableComponent*
		constexpr auto AngleBlend = 0x478; // float
		constexpr auto LoweredBlend = 0x47c; // float
		constexpr auto LoweringSpeed = 0x480; // float
		constexpr auto RaisingSpeed = 0x484; // float
		constexpr auto TurnSpeed = 0x488; // float
		constexpr auto MaxTurnAngle = 0x48c; // float
		constexpr auto LookAtPosLow = 0x490; // FVector
		constexpr auto LookAtPosHigh = 0x49c; // FVector
		constexpr auto SailAudioPool = 0x4a8; // UWwiseObjectPoolWrapper*
		constexpr auto AmbientSailFlapsSfx = 0x4b0; // UWwiseEvent*
		constexpr auto AmbientSailFlapsStopSfx = 0x4b8; // UWwiseEvent*
		constexpr auto PerfectSailInflationOneShot = 0x4c0; // UWwiseEvent*
		constexpr auto InflationRTPC = 0x4c8; // FName
		constexpr auto SailLengthRTPC = 0x4d0; // FName
		constexpr auto ClientSailBlendSpeed = 0x4d8; // float
		constexpr auto YardArms = 0x4e0; // TArray<UStaticMeshComponent*>
		constexpr auto TelemetryIdentifier = 0x4f0; // FName
		constexpr auto MastShouldBeFractured = 0x4f8; // bool
		constexpr auto MastCollisionProfiles = 0x4fc; // FMastCollisionProfiles
		constexpr auto MastPhysicsComponents = 0x528; // FMastPhysicsComponents
		constexpr auto MastIntactMesh = 0x560; // UStaticMesh*
		constexpr auto MastFractureMeshBottom = 0x568; // UStaticMesh*
		constexpr auto MastFractureMeshBottomScale = 0x570; // float
		constexpr auto MastFractureMeshOriginalScale = 0x574; // float
		constexpr auto MastFractureMeshTop = 0x578; // UStaticMesh*
		constexpr auto DamageParticleSystem = 0x580; // UParticleSystem*
		constexpr auto HingeHeight = 0x588; // float
		constexpr auto HingeDistanceFromCentre = 0x58c; // float
		constexpr auto HingeDirectionAngle = 0x590; // float
		constexpr auto MaxFallAngle = 0x594; // float
		constexpr auto MastLiftingSpeed = 0x598; // float
		constexpr auto OverrideSailLengthWhenFalling = 0x59c; // bool
		constexpr auto MaxFallenSailLength = 0x5a0; // float
		constexpr auto SailFoldingSpeed = 0x5a4; // float
		constexpr auto OverrideSailAngleWhenFalling = 0x5a8; // bool
		constexpr auto DesiredFallingSailAngle = 0x5ac; // float
		constexpr auto SailTwistingSpeed = 0x5b0; // float
		constexpr auto Hinge = 0x5b8; // UMastHinge*
		constexpr auto MastImpactForceToApplyToShip = 0x5c0; // FWeightedProbabilityRangeOfRanges
		constexpr auto MastImpactForceModifierToApplyToKrakenWrappedShip = 0x5f0; // float
		constexpr auto MastImpactHeightLocation = 0x5f4; // float
		constexpr auto CameraShake = 0x5f8; // UCameraShake*
		constexpr auto CameraShakeInnerRadius = 0x600; // float
		constexpr auto CameraShakeOuterRadius = 0x604; // float
		constexpr auto PreviewMastFallenPosition = 0x608; // bool
		constexpr auto RepairableComponents = 0x610; // TArray<URepairableComponent*>
		constexpr auto DamageAudioParameters = 0x620; // FMastDamageAudioParams
		constexpr auto TetherCustomisationComponent = 0x6d8; // UTetherCustomisationComponent*
		constexpr auto LinkedSails = 0x780; // TArray<UChildActorComponent*>
		constexpr auto LengthIntentPredictor = 0x790; // FIntentPredictor
		constexpr auto AngleIntentPredictor = 0x7ac; // FIntentPredictor
		constexpr auto MastHoistIntentPredictor = 0x7c8; // FIntentPredictor
		constexpr auto MastHoistingControlSchemeActive = 0x7e4; // bool
		constexpr auto SailGotPerfectWindEventHandle = 0x7e8; // FObjectMessagingHandle
		constexpr auto SailLostPerfectWindEventHandle = 0x830; // FObjectMessagingHandle
		constexpr auto MastRepairStoppedHandle = 0x878; // FObjectMessagingHandle
		constexpr auto SailsAudioEmitter = 0x8d0; // FWwiseEmitter
		constexpr auto ServerAngleRatio = 0x8f0; // float
		constexpr auto ServerLoweredProportion = 0x8f4; // float
		constexpr auto ServerMastFallingProportion = 0x8f8; // float
		constexpr auto AllowedToFall = 0x90c; // bool
		constexpr auto PlayAudio = 0x90d; // bool
		constexpr auto IsCursed = 0x940; // bool
	}

	namespace n_UMaterialExpressionStaticComponentMaskParameter { // : UMaterialExpressionParameter
		constexpr auto Input = 0x90; // FExpressionInput
		constexpr auto DefaultR = 0xc8; // char : 1
		constexpr auto DefaultG = 0xc8; // char : 1
		constexpr auto DefaultB = 0xc8; // char : 1
		constexpr auto DefaultA = 0xc8; // char : 1
	}

	namespace n_USeatStat_SitOnShipOnFire { // : USeatStat
		constexpr auto WeakShipActor = 0x48; // TWeakObjectPtr<AActor>
	}

	namespace n_AGeyser { // : AActor
		constexpr auto SetupData = 0x3d8; // UGeyserSetupDataAsset*
		constexpr auto GeyserState = 0x3e0; // EGeyserState
		constexpr auto StartActiveAudioLoopEvent = 0x3e8; // UWwiseEvent*
		constexpr auto StopActiveAudioLoopEvent = 0x3f0; // UWwiseEvent*
		constexpr auto PlayEruptingAudioEvent = 0x3f8; // UWwiseEvent*
		constexpr auto AudioEmitterComponent = 0x400; // UWwiseEmitterComponent*
		constexpr auto ExplosionComponent = 0x408; // UExplosionComponent*
		constexpr auto ActiveParticlesComponent = 0x410; // UParticleSystemComponent*
		constexpr auto EruptingParticlesComponent = 0x418; // UParticleSystemComponent*
		constexpr auto HitTestTraceChannel = 0x420; // ECollisionChannel
		constexpr auto GeyserHoleClass = 0x428; // AHole*
		constexpr auto GeyserHole = 0x430; // AHole*
	}

	namespace n_ASpotLight { // : ALight
		constexpr auto SpotLightComponent = 0x3e0; // USpotLightComponent*
	}

	namespace n_USkellyFortDataAsset { // : UDataAsset
		constexpr auto GameEventType = 0x28; // USkellyFortGameEventType*
		constexpr auto FindAvailableFortThrottle = 0x30; // float
		constexpr auto MinActivationDistanceFromPlayers = 0x34; // float
		constexpr auto MinEngagedDistanceFromPlayers = 0x38; // float
		constexpr auto FortSignalClass = 0x40; // AActor*
		constexpr auto BountySpawners = 0x48; // TArray<UAIBountySpawner*>
		constexpr auto BountyQuestDescData = 0x58; // UBountyQuestDescData*
		constexpr auto NamedAIDataAsset = 0x60; // UNamedAIDataAsset*
		constexpr auto NavMeshOverride = 0x68; // FName
		constexpr auto BountyQuestRandomSpawnGeneratorParams = 0x70; // FBountyQuestRandomSpawnGeneratorParams
		constexpr auto AdditionalWaves = 0x180; // TArray<FAdditionalWave>
		constexpr auto CrewSkillset = 0x190; // UAISkillsetRankProgression*
		constexpr auto CaptainSkillset = 0x198; // UAISkillsetRankProgression*
		constexpr auto CrewItemDrops = 0x1a0; // UAIItemSpawnRankProgression*
		constexpr auto CaptainItemDrops = 0x1a8; // UAIItemSpawnRankProgression*
		constexpr auto FindSpawnPosQuery = 0x1b0; // UEnvQuery*
		constexpr auto WaveRank = 0x1b8; // FWeightedProbabilityRange
		constexpr auto AISpawnerWhenFortInactive = 0x1d8; // UAISpawner*
		constexpr auto CannonsAISpawnerWhenFortInactive = 0x1e0; // UAISpawner*
		constexpr auto AISpawnerWhenFortActive = 0x1e8; // UAISpawner*
		constexpr auto CannonsAISpawnerWhenFortActive = 0x1f0; // UAISpawner*
		constexpr auto WaveSpawnSoundEffect = 0x1f8; // UWwiseEvent*
		constexpr auto FinalWaveSpawnSoundEffect = 0x200; // UWwiseEvent*
		constexpr auto FortCompleteSoundEffect = 0x208; // UWwiseEvent*
		constexpr auto WaveSpawnSoundEffectDelay = 0x210; // float
		constexpr auto AnticipationAudioZoneRadiusMetres = 0x214; // float
		constexpr auto ActionAudioZoneRadiusMetres = 0x218; // float
		constexpr auto KeyItemToUnlockDoor = 0x220; // UItemDesc*
		constexpr auto KeySpawnData = 0x228; // UItemDescSpawnData*
		constexpr auto PlayerStatToFireOnOpen = 0x230; // FPlayerStat
		constexpr auto EncounterSightingType = 0x234; // EEncounterType
		constexpr auto EncounterCloseType = 0x235; // EEncounterType
	}

	namespace n_UBlinkStrafeComponent { // : UActorComponent
		constexpr auto Character = 0xc8; // AAthenaAICharacter*
		constexpr auto OwnerAIController = 0xd0; // AAthenaAIControllerBase*
		constexpr auto ShouldBlink = 0xe0; // bool
	}

	namespace n_UCompany { // : UObject
		constexpr auto DisplayName = 0x28; // FText
		constexpr auto UniqueTextIdentifier = 0x60; // FName
	}

	namespace n_UMeshMemoryConstraintService { // : UObject
		constexpr auto World = 0x58; // UWorld*
		constexpr auto BudgetsMap = 0x98; // TMap<UMeshMemoryConstraintBudget*, UMeshMemoryConstraintServiceBudgetData*>
		constexpr auto CategoryToBudgetMap = 0xe8; // TMap<UMeshMemoryConstraintCategory*, UMeshMemoryConstraintBudget*>
	}

	namespace n_UDistributionFloatParticleParameter { // : UDistributionFloatParameterBase
		constexpr auto ParameterName = 0x40; // FName
		constexpr auto MinInput = 0x48; // float
		constexpr auto MaxInput = 0x4c; // float
		constexpr auto MinOutput = 0x50; // float
		constexpr auto MaxOutput = 0x54; // float
		constexpr auto ParamMode = 0x58; // DistributionParamMode
	}

	namespace n_UItemHealthMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_APoseableMeshWieldableReplica { // : AWieldableReplica
		constexpr auto MeshComponent = 0x3d8; // UPrimitiveComponent*
		constexpr auto CachedAnimationSet = 0x3e0; // UCosmeticItemAnimationSetDataAsset*
		constexpr auto ReplicaCategory = 0x3e8; // UItemCategory*
	}

	namespace n_AGhostShipStreamingProbe { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UMovieSceneLevelVisibilityTrack { // : UMovieSceneNameableTrack
		constexpr auto Sections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_AGameplayAbilityTargetActor { // : AActor
		constexpr auto ShouldProduceTargetDataOnServer = 0x3d0; // bool
		constexpr auto StartLocation = 0x3e0; // FGameplayAbilityTargetingLocationInfo
		constexpr auto MasterPC = 0x480; // APlayerController*
		constexpr auto OwningAbility = 0x488; // UGameplayAbility*
		constexpr auto bDestroyOnConfirmation = 0x490; // bool
		constexpr auto SourceActor = 0x498; // AActor*
		constexpr auto ReticleParams = 0x4a0; // FWorldReticleParameters
		constexpr auto ReticleClass = 0x4b0; // AGameplayAbilityWorldReticle*
		constexpr auto Filter = 0x4b8; // FGameplayTargetDataFilterHandle
		constexpr auto bDebug = 0x4d0; // bool
	}

	namespace n_UAchievementWriteCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_ULanternItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UStandardSailDynamicsDesc { // : UBaseSailDynamicsDesc
		constexpr auto SailSetFractionToSailForceAmp = 0x28; // UCurveFloat*
		constexpr auto Parameters = 0x30; // FStandardSailDynamicsParameters
	}

	namespace n_UPlayNpcAnimationStepDesc { // : UBasePlayNpcAnimationStepDesc
		constexpr auto TargetNpc = 0xb8; // FQuestVariableActor
		constexpr auto SpeakingActorLocalisableName = 0xc8; // FText
	}

	namespace n_UEnvQueryGenerator { // : UEnvQueryNode
		constexpr auto OptionName = 0x30; // FString
		constexpr auto NonShippingOnly = 0x40; // bool
		constexpr auto ItemType = 0x48; // UEnvQueryItemType*
	}

	namespace n_UGameplayCueSet { // : UDataAsset
		constexpr auto GameplayCueData = 0x28; // TArray<FGameplayCueNotifyData>
	}

	namespace n_UAIPartsService { // : UObject
		constexpr auto PartsCategoriesList = 0x30; // UAIPartsCategoryTypeList*
		constexpr auto TeamColors = 0x38; // UAIColorVariantPool*
	}

	namespace n_UNPCDialogPredicateHasSubsetOfEntitlements { // : UNPCDialogPredicate
		constexpr auto EntitlementsSet = 0x38; // TArray<UEntitlementDesc*>
		constexpr auto MinimumNumberSatisfied = 0x48; // int32_t
	}

	namespace n_AItemInteractionProxy { // : AItemProxy
		constexpr auto AcquiredItemDesc = 0x628; // UItemDesc*
		constexpr auto HidePromptIfInventoryIsFull = 0x630; // bool
	}

	namespace n_USplineComponent { // : UPrimitiveComponent
		constexpr auto SplineInfo = 0x588; // FInterpCurveVector
		constexpr auto SplineRotInfo = 0x5a0; // FInterpCurveQuat
		constexpr auto SplineScaleInfo = 0x5b8; // FInterpCurveVector
		constexpr auto SplineReparamTable = 0x5d0; // FInterpCurveFloat
		constexpr auto bAllowSplineEditingPerInstance = 0x5e8; // bool
		constexpr auto ReparamStepsPerSegment = 0x5ec; // int32_t
		constexpr auto Duration = 0x5f0; // float
		constexpr auto bStationaryEndpoints = 0x5f4; // bool
		constexpr auto bSplineHasBeenEdited = 0x5f5; // bool
		constexpr auto bClosedLoop = 0x5f6; // bool
		constexpr auto DefaultUpVector = 0x5f8; // FVector
	}

	namespace n_ARareMerchantCrateItemInfoMock { // : AMerchantCrateItemInfoMock
		constexpr auto FaunaBreedRarity = 0x710; // TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry>
		constexpr auto CurrentShip = 0x778; // AActor*
	}

	namespace n_UFireworkAmbientLightComponent { // : UAmbientLightSourceComponent
		constexpr auto Radius = 0x438; // float
		constexpr auto AmbientIntensity = 0x43c; // float
		constexpr auto Tint = 0x440; // FLinearColor
		constexpr auto QuadraticFalloff = 0x450; // char : 1
		constexpr auto Shape = 0x454; // EAmbientLightConeShape
		constexpr auto SimpleFunctionType = 0x455; // ESimpleLightFunctionType
		constexpr auto ScaleOffset = 0x458; // float
		constexpr auto PulsePhase = 0x45c; // float
		constexpr auto FlickerFrequency = 0x460; // float
		constexpr auto FlickerPerlinRow = 0x464; // int32_t
		constexpr auto bShadowed = 0x468; // bool
		constexpr auto GroupingPolicy = 0x469; // EAmbientLightClusteringPolicy
	}

	namespace n_UBTTask_MakeNoise { // : UBTTaskNode
		constexpr auto Loudnes = 0x60; // float
	}

	namespace n_AActor { // : UObject
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UInterpTrackInstAnimControl { // : UInterpTrackInst
		constexpr auto LastUpdatePosition = 0x28; // float
	}

	namespace n_UBlendedLightingZoneComponent { // : ULightingZoneComponent
		constexpr auto FadeCurveNormalised = 0x2d8; // UCurveFloat*
		constexpr auto FadeOutCurveNormalised = 0x2e0; // UCurveFloat*
	}

	namespace n_USpawnRequirement { // : UObject
		constexpr auto OR_Requirements = 0x40; // TArray<USpawnRequirement*>
	}

	namespace n_UAthenaAIShipControllerParamsDataAsset { // : UAthenaAIControllerParamsDataAsset
		constexpr auto TrackingMovementParams = 0x100; // FShipMovementParams
		constexpr auto TimesToSailBesideTarget = 0x138; // FWeightedProbabilityRangeOfRanges
		constexpr auto PerpendicularDistanceOffsets = 0x168; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimesBeforeDistanceChange = 0x198; // FWeightedProbabilityRangeOfRanges
		constexpr auto MaxParallelDistanceOffset = 0x1c8; // float
		constexpr auto AlignDistanceThreshold = 0x1cc; // float
		constexpr auto TimeToProjectIntoFutureForTracking = 0x1d0; // float
		constexpr auto TargetSpeedThresholdToTrackShip = 0x1d4; // float
		constexpr auto TrackingNoiseGenerator = 0x1d8; // FTrackingNoiseGenerator
		constexpr auto WheelAngleMonitorDuration = 0x1f0; // float
		constexpr auto WheelAngleChangeThresholdToBreakTracking = 0x1f4; // float
		constexpr auto SpeedMonitorDuration = 0x1f8; // float
		constexpr auto SpeedChangeThresholdToBreakTrackingInMPS = 0x1fc; // float
		constexpr auto TargetSpeedToConsiderAnchorLoweredInMPS = 0x200; // float
		constexpr auto TrackingLatencyTimes = 0x208; // FWeightedProbabilityRangeOfRanges
		constexpr auto TrackingLatencyTimesWhenAnchorLowered = 0x238; // FWeightedProbabilityRangeOfRanges
		constexpr auto DistToTargetShipVSTrackingLatencyCurve = 0x268; // UCurveFloat*
		constexpr auto CirclingMovementParams = 0x270; // FShipMovementParams
		constexpr auto TargetSpeedThresholdInKnots = 0x2a4; // float
		constexpr auto SecondsInFutureToProjectTargetLocation = 0x2a8; // float
		constexpr auto CircleRadiuses = 0x2b0; // FWeightedProbabilityRangeOfRanges
		constexpr auto CirclingSpeedsInDegreesPerSecond = 0x2e0; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimesToCircleBeforeChangingRadius = 0x310; // FWeightedProbabilityRangeOfRanges
		constexpr auto MinDistanceFromTargetToStartRam = 0x340; // float
		constexpr auto MaxDistanceFromTargetToStartRam = 0x344; // float
		constexpr auto MaxSpeedToRamTarget = 0x348; // float
		constexpr auto RammingMaxTurnSpeed = 0x34c; // float
		constexpr auto RammingTimeDampingScalar = 0x350; // float
		constexpr auto MinAngleToTargetToAttemptRam = 0x354; // float
		constexpr auto RammingLocationOffsets = 0x358; // FWeightedProbabilityRangeOfRanges
		constexpr auto SailingForwardMovementParams = 0x388; // FShipMovementParams
		constexpr auto MinAllowedDistanceToObstacle = 0x3bc; // float
		constexpr auto MaxPathAvoidanceDistance = 0x3c0; // float
		constexpr auto PassiveSailingMovementParams = 0x3c4; // FShipMovementParams
		constexpr auto ChanceToAnchor = 0x3f8; // float
		constexpr auto TimesToStayAnchored = 0x400; // FWeightedProbabilityRangeOfRanges
		constexpr auto NumIslandsToVisitBeforeReturning = 0x430; // int32_t
		constexpr auto DistanceFromIslandsToSailTo = 0x434; // float
		constexpr auto DistanceToTargetToDropAnchor = 0x438; // float
		constexpr auto AggressionOverrideImpactIDs = 0x440; // TArray<UImpactProjectileId*>
	}

	namespace n_UMovieSceneIntegerTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UAddMechanismTriggerStepDesc { // : UTaleQuestStepDesc
		constexpr auto Action = 0x80; // FQuestVariableActor
		constexpr auto Trigger = 0x90; // FQuestVariableActor
	}

	namespace n_ASphericalStatusEffectZone { // : AActor
		constexpr auto ActorActivationComponent = 0x3d8; // UActorActivationComponent*
		constexpr auto SphereComponent = 0x3e0; // USphereComponent*
		constexpr auto StatusEffectVolumeComponent = 0x3e8; // UStatusEffectVolumeComponent*
	}

	namespace n_USkeletalMeshComponent { // : USkinnedMeshComponent
		constexpr auto AnimationMode = 0x6d0; // EAnimationMode
		constexpr auto AnimBlueprintGeneratedClass = 0x6d8; // UObject*
		constexpr auto AnimScriptInstance = 0x6e0; // UAnimInstance*
		constexpr auto AnimationData = 0x6e8; // FSingleAnimationPlayData
		constexpr auto CachedLocalAtoms = 0x718; // TArray<FTransform>
		constexpr auto CachedSpaceBases = 0x728; // TArray<FTransform>
		constexpr auto GlobalAnimRateScale = 0x760; // float
		constexpr auto bHasValidBodies = 0x764; // char : 1
		constexpr auto KinematicBonesUpdateType = 0x768; // EKinematicBonesUpdateToPhysics
		constexpr auto bBlendPhysics = 0x76c; // char : 1
		constexpr auto bEnablePhysicsOnDedicatedServer = 0x76c; // char : 1
		constexpr auto bUpdateJointsFromAnimation = 0x76c; // char : 1
		constexpr auto bDisableClothSimulation = 0x76c; // char : 1
		constexpr auto bCollideWithEnvironment = 0x76c; // char : 1
		constexpr auto bCollideWithAttachedChildren = 0x76c; // char : 1
		constexpr auto bLocalSpaceSimulation = 0x76c; // char : 1
		constexpr auto bClothMorphTarget = 0x76c; // char : 1
		constexpr auto bResetAfterTeleport = 0x76d; // char : 1
		constexpr auto TeleportDistanceThreshold = 0x770; // float
		constexpr auto TeleportRotationThreshold = 0x774; // float
		constexpr auto ClothBlendWeight = 0x778; // float
		constexpr auto RootBoneTranslation = 0x780; // FVector
		constexpr auto bNoSkeletonUpdate = 0x78c; // char : 1
		constexpr auto bPauseAnims = 0x78c; // char : 1
		constexpr auto bEnablePerPolyCollision = 0x78c; // char : 1
		constexpr auto BodySetup = 0x790; // UBodySetup*
		constexpr auto bAutonomousTickPose = 0x798; // char : 1
		constexpr auto bForceRefpose = 0x798; // char : 1
		constexpr auto bOldForceRefPose = 0x798; // char : 1
		constexpr auto bShowPrePhysBones = 0x798; // char : 1
		constexpr auto bRequiredBonesUpToDate = 0x798; // char : 1
		constexpr auto bAnimTreeInitialised = 0x798; // char : 1
		constexpr auto bEnableLineCheckWithBounds = 0x798; // char : 1
		constexpr auto LineCheckBoundsScale = 0x79c; // FVector
		constexpr auto RagdollAggregateThreshold = 0x7a8; // int32_t
		constexpr auto OnConstraintBroken = 0x7b0; // FScriptMulticastDelegate
		constexpr auto UseRefPoseToInitialise = 0x7c0; // bool
		constexpr auto LastPoseTickTime = 0x988; // float
	}

	namespace n_UMaterialExpressionPredicatedTextureSampleParameter2D { // : UMaterialExpressionTextureSampleParameter2D
		constexpr auto Predicate = 0x1c8; // FExpressionInput
		constexpr auto DefaultColour = 0x200; // FColor
	}

	namespace n_UBlockEarthquakeTaleQuestService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UBlockEarthquakeTaleQuestServiceDesc*
	}

	namespace n_USeaRegionComponent { // : UWorldRegionComponent
		constexpr auto SeaId = 0x2f0; // USeaId*
	}

	namespace n_UVomitComponent { // : UCapsuleComponent
		constexpr auto VomitFxDurationWhenSpewingIntoBucket = 0x5b0; // float
		constexpr auto VomitVFX = 0x5b8; // FVomitVFX
		constexpr auto VomitSFX = 0x7b8; // FVomitSFX
		constexpr auto VomitScreenFX = 0x7f0; // FVomitScreenFX
		constexpr auto VomitProjectiles = 0x820; // FVomitProjectiles
		constexpr auto ImmunityAgainstContractingAfterVomiting = 0x870; // float
		constexpr auto ChanceForContractingVomitingIfBeingVomitedOn = 0x874; // float
		constexpr auto ContractedVomitingSpewDuration = 0x878; // FFloatRange
		constexpr auto ContractedVomitingSpewDelay = 0x888; // FFloatRange
		constexpr auto ContractedVomitVFXType = 0x898; // FName
		constexpr auto DebugInterval = 0x8a0; // float
		constexpr auto BoutData = 0x8a8; // UVomitBoutData*
	}

	namespace n_AStaticMeshFloatingItemProxy { // : AFloatingItemProxy
		constexpr auto PhysicsErrorCorrection = 0x630; // FRigidBodyErrorCorrection
		constexpr auto BaseComponent = 0x650; // UBoxComponent*
		constexpr auto MovementTimeStamp = 0x688; // FNetTimeStampCalculator
		constexpr auto TutorialOwner = 0x6f8; // AActor*
		constexpr auto IsTutorialProxy = 0x700; // bool
		constexpr auto ReplicatedPhysicsState = 0x708; // FReplicatedPhysicsState
		constexpr auto ForceKeepTickActive = 0x758; // bool
		constexpr auto CachedAutoAimCollisionChannel = 0x788; // ECollisionChannel
		constexpr auto CachedVehicleCollisionResponse = 0x789; // ECollisionResponse
	}

	namespace n_AIgnitableMechanismTriggerProxy { // : AMechanismElementProxy
		constexpr auto UseExtinguishTimer = 0x3f0; // bool
		constexpr auto AllowFireToBeReplenishedBeforeExtinguishTimerExpired = 0x3f1; // bool
		constexpr auto TimeInSecondsUntilFireExtinguished = 0x3f4; // float
		constexpr auto RecipientResponseList = 0x3f8; // UStatusRecipientResponseList*
	}

	namespace n_UCameraShake { // : UObject
		constexpr auto bSingleInstance = 0x28; // char : 1
		constexpr auto OscillationDuration = 0x2c; // float
		constexpr auto OscillationBlendInTime = 0x30; // float
		constexpr auto OscillationBlendOutTime = 0x34; // float
		constexpr auto RotOscillation = 0x38; // FROscillator
		constexpr auto LocOscillation = 0x5c; // FVOscillator
		constexpr auto FOVOscillation = 0x80; // FFOscillator
		constexpr auto AnimPlayRate = 0x8c; // float
		constexpr auto AnimScale = 0x90; // float
		constexpr auto AnimBlendInTime = 0x94; // float
		constexpr auto AnimBlendOutTime = 0x98; // float
		constexpr auto RandomAnimSegmentDuration = 0x9c; // float
		constexpr auto Anim = 0xa0; // UCameraAnim*
		constexpr auto bRandomAnimSegment = 0xa8; // char : 1
		constexpr auto CameraOwner = 0xc0; // APlayerCameraManager*
		constexpr auto ShakeScale = 0x130; // float
		constexpr auto OscillatorTimeRemaining = 0x134; // float
		constexpr auto AnimInst = 0x138; // UCameraAnimInst*
	}

	namespace n_UPlayerPermissionsComponent { // : UActorComponent
		constexpr auto AllowDebugMenuAccess = 0xc8; // bool
		constexpr auto AllowDebugMenuButtonShortcutsAccess = 0xc9; // bool
		constexpr auto AllowExecuteOnServer = 0xca; // bool
		constexpr auto DisableWatermark = 0xcb; // bool
	}

	namespace n_UBTTask_NOP { // : UBTTaskNode
		constexpr auto Id = 0x60; // int32_t
	}

	namespace n_UPetsAnimationData { // : UDataAsset
		constexpr auto PetAnimations = 0x28; // FPetAnimationDataStructure
		constexpr auto LookAtPitchRange = 0x240; // FFloatRange
		constexpr auto LookAtClamp = 0x250; // float
		constexpr auto LookAtTimeToComplete = 0x254; // float
		constexpr auto TransitionFromTurningMovementSpeed = 0x258; // float
		constexpr auto PositiveMoodAnimationRange = 0x25c; // FFloatRange
		constexpr auto PositiveMoodBlendTime = 0x26c; // float
	}

	namespace n_UDragDropOperation { // : UObject
		constexpr auto Tag = 0x28; // FString
		constexpr auto payload = 0x38; // UObject*
		constexpr auto DefaultDragVisual = 0x40; // UWidget*
		constexpr auto Pivot = 0x48; // EDragPivot
		constexpr auto Offset = 0x4c; // FVector2D
		constexpr auto OnDrop = 0x58; // FScriptMulticastDelegate
		constexpr auto OnDragCancelled = 0x68; // FScriptMulticastDelegate
		constexpr auto OnDragged = 0x78; // FScriptMulticastDelegate
	}

	namespace n_UBTTask_SwimAttackTargetShip { // : UBTTask_BlackboardBase
		constexpr auto BiteRadiusOffsetToBeginAttackHeadOn = 0x88; // float
		constexpr auto BiteRadiusOffsetToBeginAttackPerpendicular = 0x8c; // float
		constexpr auto MaxTimeToStartAttack = 0x90; // float
		constexpr auto AttackAnim = 0x98; // UAnimSequence*
		constexpr auto AttackAnimLength = 0xa0; // float
		constexpr auto TimeToPerformAttack = 0xa4; // float
		constexpr auto AttackVFX = 0xa8; // UObject*
		constexpr auto AttackVFXZOffset = 0xb0; // float
		constexpr auto LoSTraceProfileName = 0xb4; // FName
		constexpr auto LosTraceRadius = 0xc0; // FAIDataProviderFloatValue
		constexpr auto ImpulseData = 0xf0; // TArray<FSwimAttackTargetShipImpulseData>
		constexpr auto MinDamageHolesToApply = 0x100; // FAIDataProviderIntValue
		constexpr auto MaxDamageHolesToApply = 0x130; // FAIDataProviderIntValue
		constexpr auto LevelsOfHullDamage = 0x160; // int32_t
		constexpr auto DamageCauserType = 0x168; // UDamagerType*
		constexpr auto PlayerBiteRadius = 0x170; // FAIDataProviderFloatValue
		constexpr auto KnockbackParams = 0x1a0; // FKnockBackInfo
		constexpr auto PlayerBiteDamage = 0x1f0; // FAIDataProviderFloatValue
		constexpr auto TargetShip = 0x230; // AShip*
	}

	namespace n_UButtonSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_UStatusResponseApplyStatusPlayerCurse { // : UStatusResponse
		constexpr auto CurseTag = 0x30; // EPlayerCurseTag
		constexpr auto Status = 0x38; // FStatus
	}

	namespace n_UGridSlot { // : UPanelSlot
		constexpr auto HorizontalAlignment = 0x38; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x39; // EVerticalAlignment
		constexpr auto Row = 0x3c; // int32_t
		constexpr auto RowSpan = 0x40; // int32_t
		constexpr auto Column = 0x44; // int32_t
		constexpr auto ColumnSpan = 0x48; // int32_t
		constexpr auto Layer = 0x4c; // int32_t
		constexpr auto Nudge = 0x50; // FVector2D
	}

	namespace n_UThrobber { // : UWidget
		constexpr auto NumberOfPieces = 0x138; // int32_t
		constexpr auto bAnimateHorizontally = 0x13c; // bool
		constexpr auto bAnimateVertically = 0x13d; // bool
		constexpr auto bAnimateOpacity = 0x13e; // bool
		constexpr auto PieceImage = 0x140; // USlateBrushAsset*
		constexpr auto Image = 0x148; // FSlateBrush
	}

	namespace n_AEQSTestingPawn { // : ACharacter
		constexpr auto QueryTemplate = 0x5e0; // UEnvQuery*
		constexpr auto QueryParams = 0x5e8; // TArray<FEnvNamedValue>
		constexpr auto TimeLimitPerStep = 0x5f8; // float
		constexpr auto StepToDebugDraw = 0x5fc; // int32_t
		constexpr auto HighlightMode = 0x600; // EEnvQueryHightlightMode
		constexpr auto bDrawLabels = 0x604; // char : 1
		constexpr auto bDrawFailedItems = 0x604; // char : 1
		constexpr auto bReRunQueryOnlyOnFinishedMove = 0x604; // char : 1
		constexpr auto bShouldBeVisibleInGame = 0x604; // char : 1
		constexpr auto QueryingMode = 0x608; // EEnvQueryRunMode
	}

	namespace n_UResourceProviderComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ACalmWaterZone { // : AActor
		constexpr auto CalmWaterComponent = 0x3d0; // UCalmWaterComponent*
	}

	namespace n_UStallDetector { // : UObject
		constexpr auto Callback = 0x30; // FScriptMulticastDelegate
	}

	namespace n_UPetSpawnParamsDataAsset { // : UDataAsset
		constexpr auto PetClassID = 0x28; // UAIClassId*
		constexpr auto TreeToRun = 0x30; // UBehaviorTree*
		constexpr auto PetSkillset = 0x38; // UAthenaAIControllerParamsDataAsset*
		constexpr auto SpawnQueryForLand = 0x58; // UEnvQuery*
		constexpr auto SpawnQueryForShip = 0x60; // UEnvQuery*
	}

	namespace n_UGameplayAbilityBlueprintGeneratedClass { // : UBlueprintGeneratedClass
		constexpr auto NumReplicatedProperties = 0x1c0; // int32_t
		constexpr auto DynamicBindingObjects = 0x1c8; // TArray<UDynamicBlueprintBinding*>
		constexpr auto ComponentTemplates = 0x1d8; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x1e8; // TArray<UTimelineTemplate*>
		constexpr auto SimpleConstructionScript = 0x1f8; // USimpleConstructionScript*
		constexpr auto InheritableComponentHandler = 0x200; // UInheritableComponentHandler*
		constexpr auto UberGraphFramePointerProperty = 0x208; // UStructProperty*
		constexpr auto UberGraphFunction = 0x210; // UFunction*
		constexpr auto FastCallPairs = 0x218; // TArray<FEventGraphFastCallPair>
	}

	namespace n_UBTTask_GetCurrentHealth { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_USelectIslandsFromRegionStepDesc { // : UTaleQuestStepDesc
		constexpr auto Region = 0x80; // FQuestVariableDataAsset
		constexpr auto NumIslands = 0x90; // FQuestVariableInt
		constexpr auto MaxDifferentIslands = 0xa0; // FQuestVariableInt
		constexpr auto SelectedIslands = 0xb0; // FQuestVariableNameArray
		constexpr auto SelectionStrategy = 0xc0; // URegionIslandSelectionStrategyBase*
		constexpr auto DefaultNumIslands = 0xc8; // int32_t
		constexpr auto DefaultMaxDifferentIslands = 0xcc; // int32_t
	}

	namespace n_AReflectionCapture { // : AActor
		constexpr auto CaptureComponent = 0x3d0; // UReflectionCaptureComponent*
	}

	namespace n_ULocalPlayer { // : UPlayer
		constexpr auto ViewportClient = 0x60; // UGameViewportClient*
		constexpr auto AspectRatioAxisConstraint = 0xa8; // EAspectRatioAxisConstraint
		constexpr auto PendingLevelPlayerControllerClass = 0xb0; // APlayerController*
		constexpr auto bSentSplitJoin = 0xb8; // char : 1
		constexpr auto MinimumAspectRatio = 0xbc; // float
	}

	namespace n_UAmmoChangeEffect { // : UAmmoBaseEffect
		constexpr auto AmmoChangeEffectParams = 0x28; // FAmmoChangeEffectParams
	}

	namespace n_UDestructibleMesh { // : USkeletalMesh
		constexpr auto DefaultDestructibleParameters = 0x238; // FDestructibleParameters
		constexpr auto FractureEffects = 0x2c0; // TArray<FFractureEffect>
	}

	namespace n_UAnimNotify_DetachAndMaintainWorldPosition { // : UAnimNotify
		constexpr auto CurrentLocation = 0x38; // EWieldAnimationLocation
	}

	namespace n_UParticleModuleSpawnPerUnitNew { // : UParticleModuleSpawnPerUnit
		constexpr auto bAffectsGroupA = 0x58; // char : 1
		constexpr auto bAffectsGroupB = 0x58; // char : 1
		constexpr auto bAffectsGroupC = 0x58; // char : 1
		constexpr auto bAffectsGroupD = 0x58; // char : 1
		constexpr auto bAffectsGroupE = 0x58; // char : 1
		constexpr auto bAffectsReplacementGroup = 0x58; // char : 1
		constexpr auto UnitScalar = 0x5c; // float
		constexpr auto SpawnPerUnit = 0x60; // FRawDistributionFloat
		constexpr auto bIgnoreSpawnRateWhenMoving = 0x98; // char : 1
		constexpr auto MovementTolerance = 0x9c; // float
		constexpr auto MaxFrameDistance = 0xa0; // float
		constexpr auto bIgnoreMovementAlongX = 0xa4; // char : 1
		constexpr auto bIgnoreMovementAlongY = 0xa4; // char : 1
		constexpr auto bIgnoreMovementAlongZ = 0xa4; // char : 1
	}

	namespace n_UBTService_SetFloatToTheSurfaceWhileInBranch { // : UBTService
		constexpr auto FloatToTheSurfaceWhileInBranch = 0x70; // bool
	}

	namespace n_UDialogueWave { // : UObject
		constexpr auto bMature = 0x28; // char : 1
		constexpr auto SpokenText = 0x30; // FString
		constexpr auto ContextMappings = 0x40; // TArray<FDialogueContextMapping>
		constexpr auto LocalizationGUID = 0x50; // FGuid
	}

	namespace n_AMergedCollisionActor { // : AActor
		constexpr auto MergedCollisionComponent = 0x3d0; // UMergedCollisionComponent*
	}

	namespace n_UBTTask_RequestDespawn { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_UParticleModuleTypeDataBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_ABuoyantStorageContainer { // : AStorageContainer
		constexpr auto InteractionSocket = 0x4d0; // FName
		constexpr auto BaseComponent = 0x578; // UShapeComponent*
		constexpr auto PhysicsErrorCorrection = 0x580; // FRigidBodyErrorCorrection
		constexpr auto BuoyancyComponent = 0x5a0; // UBuoyancyComponent*
		constexpr auto DitherComponent = 0x5a8; // UDitherComponent*
		constexpr auto MovementTimeStamp = 0x5b0; // FNetTimeStampCalculator
		constexpr auto ReplicatedPhysicsState = 0x620; // FReplicatedPhysicsState
		constexpr auto WaterInteractionComponent = 0x678; // UWaterInteractionComponent*
		constexpr auto RetractableComponent = 0x680; // URetractableFloatingBarrelComponent*
	}

	namespace n_UStatusResponseScreenSpaceParticles { // : UStatusResponse
		constexpr auto ParticleSystem = 0x30; // UObject*
		constexpr auto DoesVFXTimeOut = 0x38; // bool
	}

	namespace n_UAthenaCharacterBaseInputComponentWithInterference { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UBTDecorator_ShouldCurrentActionStatePauseBehavior { // : UBTDecorator_BaseConditional
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UTeleportLocationRetrievalComponent { // : UActorComponent
		constexpr auto TeleportLocations = 0xc8; // TArray<FTeleportLocation>
	}

	namespace n_UBTService_DefaultFocusToPosAtRelativeAngleToObject { // : UBTService_DefaultFocus
		constexpr auto RelativeYawAngleOffset = 0xa0; // float
		constexpr auto RelativeDistance = 0xa4; // float
	}

	namespace n_UNavRelevantComponent { // : UActorComponent
		constexpr auto bNavigationRelevant = 0xec; // char : 1
		constexpr auto bAttachToOwnersRoot = 0xec; // char : 1
		constexpr auto CachedNavParent = 0xf0; // UObject*
	}

	namespace n_UBarrelsOfPlentySeaClueCreator { // : USeaClueCreator
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMin = 0x30; // int32_t
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMax = 0x34; // int32_t
	}

	namespace n_UParticleModuleParameterBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UParticleModuleLocationPrimitiveSphere { // : UParticleModuleLocationPrimitiveBase
		constexpr auto StartRadius = 0xc8; // FRawDistributionFloat
		constexpr auto AdditionalStartRadiuses = 0x100; // FRawDistributionFloat [0x4]
		constexpr auto StartRadiusUseGroupAForAll = 0x1e0; // char : 1
		constexpr auto PositiveXAngleRange = 0x1e4; // FVector2D
		constexpr auto NegativeXAngleRange = 0x1ec; // FVector2D
		constexpr auto PositiveYAngleRange = 0x1f4; // FVector2D
		constexpr auto NegativeYAngleRange = 0x1fc; // FVector2D
		constexpr auto PositiveZAngleRange = 0x204; // FVector2D
		constexpr auto NegativeZAngleRange = 0x20c; // FVector2D
	}

	namespace n_UCompositeClueDestinationDescriptor { // : UClueDestinationDescriptor
		constexpr auto PrimaryClueDestDescriptor = 0x40; // UClueDestinationDescriptor*
		constexpr auto SecondaryClueDestDescriptor = 0x48; // UClueDestinationDescriptor*
	}

	namespace n_UAbilityTask_StartAbilityState { // : UAbilityTask
		constexpr auto OnStateEnded = 0x68; // FScriptMulticastDelegate
		constexpr auto OnStateInterrupted = 0x78; // FScriptMulticastDelegate
	}

	namespace n_UStreamingSettings { // : UDeveloperSettings
		constexpr auto AsyncLoadingThreadEnabled = 0x38; // char : 1
		constexpr auto WarnIfTimeLimitExceeded = 0x38; // char : 1
		constexpr auto TimeLimitExceededMultiplier = 0x3c; // float
		constexpr auto TimeLimitExceededMinTime = 0x40; // float
		constexpr auto MinBulkDataSizeForAsyncLoading = 0x44; // int32_t
		constexpr auto AsyncIOBandwidthLimit = 0x48; // float
		constexpr auto UseBackgroundLevelStreaming = 0x4c; // char : 1
		constexpr auto AsyncLoadingUseFullTimeLimit = 0x4c; // char : 1
		constexpr auto AsyncLoadingTimeLimit = 0x50; // float
		constexpr auto PriorityAsyncLoadingExtraTime = 0x54; // float
		constexpr auto LevelStreamingActorsUpdateTimeLimit = 0x58; // float
		constexpr auto LevelStreamingComponentsRegistrationGranularity = 0x5c; // int32_t
	}

	namespace n_AFireworkProjectile { // : ALaunchableProjectile
		constexpr auto CollisionComponent = 0x618; // USphereComponent*
		constexpr auto MeshComponent = 0x620; // UStaticMeshComponent*
		constexpr auto ExplosionComponent = 0x628; // UExplosionComponent*
		constexpr auto FireworkStatsComponent = 0x630; // UFireworkStatsComponent*
		constexpr auto MeshDirectionComponent = 0x638; // USceneComponent*
		constexpr auto AnimationComponent = 0x640; // UProjectileAnimationComponent*
		constexpr auto GeneratedFireworkData = 0x648; // FGeneratedFireworkData
	}

	namespace n_UTaleQuestStartTinySharkExperienceStepDesc { // : UTaleQuestStepDesc
		constexpr auto SpawnLocation = 0x80; // FVector
		constexpr auto PartIndex = 0x8c; // int32_t
		constexpr auto TinySharkParams = 0x90; // FTinySharkParams
		constexpr auto ControllerParams = 0x148; // UAthenaAIControllerParamsDataAsset*
		constexpr auto TargetShip = 0x168; // AShip*
		constexpr auto TinySharkExperience = 0x170; // FQuestVariableTinySharkExperience
	}

	namespace n_UBrushComponent { // : UPrimitiveComponent
		constexpr auto Brush = 0x588; // UModel*
		constexpr auto BrushBodySetup = 0x590; // UBodySetup*
		constexpr auto PrePivot = 0x598; // FVector
	}

	namespace n_UAISpawnMatchesAnyContextCondition { // : UAISpawnOverrideCondition
		constexpr auto Contexts = 0x30; // TArray<UAISpawnContextId*>
	}

	namespace n_UVerticalBoxSlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto Size = 0x48; // FSlateChildSize
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UAIFormRankProgression { // : UDataAsset
		constexpr auto RankMappings = 0x28; // TArray<FAIFormRankMapping>
		constexpr auto NumberOfRanks = 0x38; // int32_t
	}

	namespace n_AQuestBook { // : ASkeletalMeshWieldableItem
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto ReplicationInfo = 0x7c0; // FQuestBookRepInfo
		constexpr auto PageList = 0x7e8; // UQuestBookPageList*
		constexpr auto ProcPageCache = 0x7f0; // TMap<int32_t, UQuestBookPageLayout*>
		constexpr auto MaterialHandler = 0x840; // FQuestBookMaterialHandler
		constexpr auto ExtraPageTurnDurationForForceRedraw = 0x980; // float
		constexpr auto UsableWieldableComponent = 0x988; // UUsableWieldableComponent*
		constexpr auto LightingController = 0x990; // ALightingController*
		constexpr auto ShadowCascadeDistributionExponentWhenUsing = 0x998; // float
		constexpr auto ShadowCascadeDistributionExponentTransitionTime = 0x99c; // float
		constexpr auto PageTurnDuration = 0x9a8; // float
		constexpr auto PageTurnForceRedrawDuration = 0x9ac; // float
		constexpr auto PageWidth = 0xad0; // int32_t
		constexpr auto PageHeight = 0xad4; // int32_t
		constexpr auto PageTextRenderer = 0xad8; // FQuestBookPageRenderer
	}

	namespace n_UShadowAIFormComponent { // : UAthenaAIFormComponent
		constexpr auto FlameSpecificPhobia = 0x138; // EFlameOfFateType
		constexpr auto LightStateConstantParticlesTemplate = 0x140; // UParticleSystem*
		constexpr auto DarkStateConstantParticlesTemplate = 0x148; // UParticleSystem*
		constexpr auto ToLightTransitionParticlesTemplate = 0x150; // UParticleSystem*
		constexpr auto ToDarkTransitionParticlesTemplate = 0x158; // UParticleSystem*
		constexpr auto ClientLightStatePhysMaterialOverride = 0x160; // UPhysicalMaterial*
		constexpr auto ClientDarkStatePhysMaterialOverride = 0x168; // UPhysicalMaterial*
		constexpr auto StartDarkStateAudioLoopEvent = 0x170; // UWwiseEvent*
		constexpr auto StopDarkStateAudioLoopEvent = 0x178; // UWwiseEvent*
		constexpr auto ShadowBaseMaterials = 0x180; // TArray<UMaterial*>
		constexpr auto ShadowShaderParamName = 0x190; // FName
		constexpr auto LightStateShaderParamValue = 0x198; // float
		constexpr auto DarkStateShaderParamValue = 0x19c; // float
		constexpr auto ShaderParamBlendSpeed = 0x1a0; // float
		constexpr auto SeedShaderParamName = 0x1a4; // FName
		constexpr auto MaxSeedShaderValue = 0x1ac; // int32_t
		constexpr auto CurrentState = 0x1b0; // EShadowAIFormState
		constexpr auto LightStateConstantParticleSystemComponent = 0x1b8; // UParticleSystemComponent*
		constexpr auto DarkStateConstantParticleSystemComponent = 0x1c0; // UParticleSystemComponent*
		constexpr auto ShadowDynamicMaterialInstances = 0x1c8; // TArray<UMaterialInstanceDynamic*>
		constexpr auto LanternArray = 0x230; // TArray<ALantern*>
		constexpr auto FlameSpecificDataMap = 0x240; // TArray<FFlameSpecificDataEntry>
	}

	namespace n_UCosmeticItemAnimationInstance { // : UAnimInstance
		constexpr auto AnimationDataSet = 0x448; // UCosmeticItemAnimationSetDataAsset*
		constexpr auto ActiveMontage = 0x450; // UAnimMontage*
	}

	namespace n_AServerMigrationSerialisationDetailsTestsActorWithChild { // : AActor
		constexpr auto ChildActorComponent = 0x3d0; // UChildActorComponent*
	}

	namespace n_UWaterSplashComponent { // : UActorComponent
		constexpr auto OnEnteredWater = 0xc8; // FScriptMulticastDelegate
		constexpr auto OnExitedWater = 0xd8; // FScriptMulticastDelegate
		constexpr auto OnReachedTooDeepToExist = 0xe8; // FScriptMulticastDelegate
		constexpr auto EnterWaterParticleSystem = 0x100; // UObject*
		constexpr auto EnterWaterSfx = 0x108; // UWwiseEvent*
		constexpr auto EnterWaterSfxWisePoolToUse = 0x110; // UWwiseObjectPoolWrapper*
		constexpr auto ExitWaterParticleSystem = 0x118; // UObject*
		constexpr auto ExitWaterSfx = 0x120; // UWwiseEvent*
		constexpr auto ExitWaterSfxWisePoolToUse = 0x128; // UWwiseObjectPoolWrapper*
		constexpr auto ParticleSystemAttachLocation = 0x130; // EAttachLocation
		constexpr auto UseComplexWaterHeightDetection = 0x131; // bool
		constexpr auto SpawnParticleSystemsAttached = 0x132; // bool
		constexpr auto SpawnParticleSystemsAlignedVertically = 0x133; // bool
		constexpr auto TriggerOnEntry = 0x134; // bool
		constexpr auto TriggerOnExit = 0x135; // bool
		constexpr auto AllowRepeatedEntryTriggers = 0x136; // bool
		constexpr auto AllowRepeatedExitTriggers = 0x137; // bool
		constexpr auto DeepWaterThreshold = 0x138; // float
		constexpr auto OceanFloorThreshold = 0x13c; // float
		constexpr auto MinimumFallDistance = 0x140; // float
	}

	namespace n_UChannel { // : UObject
		constexpr auto Connection = 0x28; // UNetConnection*
	}

	namespace n_UDestroySessionCallbackProxy { // : UOnlineBlueprintCallProxyBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UMaterialExpressionLandscapeGrassOutput { // : UMaterialExpressionCustomOutput
		constexpr auto GrassTypes = 0x70; // TArray<FGrassInput>
	}

	namespace n_AShipwreckService { // : AActor
		constexpr auto ToMoveList = 0x3d8; // TArray<TScriptInterface<Class>>
		constexpr auto WreckProbRange = 0x3e8; // FWeightedProbabilityRange
		constexpr auto WreckClass = 0x408; // AShipwreck*
		constexpr auto SiteGenerator = 0x410; // UShipwreckSiteGeneratorComponent*
		constexpr auto NameGenerator = 0x418; // UShipwreckNameGeneratorAbstract*
		constexpr auto ShipwreckLifetime = 0x420; // float
		constexpr auto PlayerDistanceMoveThreshold = 0x424; // float
		constexpr auto ShipDistanceMoveThreshold = 0x428; // float
		constexpr auto SpawnQueryData = 0x480; // FWreckSpawnQueryPriorityData
		constexpr auto WreckList = 0x490; // TArray<TScriptInterface<Class>>
		constexpr auto ActiveCustomWreckList = 0x4b0; // TArray<FCustomWreckEntry>
	}

	namespace n_UContestSelectIslandForItemStep { // : UTaleQuestStep
		constexpr auto SelectedIslands = 0x98; // TArray<FName>
	}

	namespace n_UNPCDialogPredicateOnTutorialStep { // : UNPCDialogPredicate
		constexpr auto TutorialStepName = 0x38; // FName
	}

	namespace n_UMountedWeaponAimAndFireInputComponent { // : UAthenaCharacterBaseInputComponentWithInterference
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_USpawnActorBaseStep { // : UTaleQuestStep
		constexpr auto BaseDesc = 0x90; // USpawnActorStepDescBase*
	}

	namespace n_UAbandonedNoteClueGenderSpecificTextIndexAsset { // : UAbandonedNoteClueTextIndexAssetBase
		constexpr auto ClueDestinationDescriptions = 0x28; // TArray<UAbandonedNoteClueGenderSpecificTextAsset*>
	}

	namespace n_AClueSiteCircleMapWieldable { // : ARenderToTextureMapBase
		constexpr auto InventoryRadialBackgroundTexture = 0x840; // UTexture2D*
		constexpr auto MapRadialIconData = 0x860; // FMapRadialIconData
	}

	namespace n_UEelThrowAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto MinMaxNumberOfAttacksBeforeEnd = 0xc8; // FWeightedProbabilityRange
	}

	namespace n_UEditableGameplayTagQueryExpression_AnyExprMatch { // : UEditableGameplayTagQueryExpression
		constexpr auto Expressions = 0x28; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UTaleQuestMerchantContract { // : UObject
		constexpr auto OnCompleted = 0x38; // FScriptMulticastDelegate
		constexpr auto OnExpired = 0x48; // FScriptMulticastDelegate
		constexpr auto OnDelivered = 0x58; // FScriptMulticastDelegate
		constexpr auto OnCollected = 0x68; // FScriptMulticastDelegate
		constexpr auto OnAllocated = 0x78; // FScriptMulticastDelegate
	}

	namespace n_UTaleQuestImportFrame { // : UTaleQuestRootFrame
		constexpr auto Definition = 0x30; // UObject*
	}

	namespace n_UAISenseConfig_Team { // : UAISenseConfig
		constexpr auto MaxAge = 0x28; // float
		constexpr auto bStartsEnabled = 0x2c; // char : 1
	}

	namespace n_UPetCategory_C { // : UPetEntitlementCategory
		constexpr auto PetPreviewCamera = 0x80; // FName
	}

	namespace n_ULoadableProjectileComponent { // : UActorComponent
		constexpr auto ProjectileType = 0xd0; // AActor*
		constexpr auto LoadedItemParticleTemplate = 0xd8; // UParticleSystem*
		constexpr auto LaunchParticleTemplate = 0xe0; // UParticleSystem*
		constexpr auto LaunchParticleDoReflections = 0xe8; // bool
		constexpr auto LaunchParticleAttachToBarrel = 0xe9; // bool
		constexpr auto LoadedFuseTimer = 0xec; // float
		constexpr auto FuseSoundWisePool = 0xf0; // UWwiseObjectPoolWrapper*
		constexpr auto FuseActivateSoundPlayEvent = 0xf8; // UWwiseEvent*
		constexpr auto FuseSoundPlayEvent = 0x100; // UWwiseEvent*
		constexpr auto FuseSoundStopEvent = 0x108; // UWwiseEvent*
		constexpr auto FuseParticleSystem = 0x110; // UObject*
		constexpr auto FuseMeshAssetReference = 0x118; // FStringAssetReference
	}

	namespace n_UEdGraphPin { // : UObject
		constexpr auto PinName = 0x28; // FString
		constexpr auto PinToolTip = 0x38; // FString
		constexpr auto Direction = 0x48; // EEdGraphPinDirection
		constexpr auto PinType = 0x50; // FEdGraphPinType
		constexpr auto DefaultValue = 0xa0; // FString
		constexpr auto AutogeneratedDefaultValue = 0xb0; // FString
		constexpr auto DefaultObject = 0xc0; // UObject*
		constexpr auto DefaultTextValue = 0xc8; // FText
		constexpr auto LinkedTo = 0x100; // TArray<UEdGraphPin*>
		constexpr auto SubPins = 0x110; // TArray<UEdGraphPin*>
		constexpr auto ParentPin = 0x120; // UEdGraphPin*
	}

	namespace n_UAIDebugVisualisationComponent { // : UActorComponent
		constexpr auto Lines = 0xc8; // TArray<FAIDebugVisualisationLine>
		constexpr auto Boxes = 0xd8; // TArray<FAIDebugVisualisationBox>
		constexpr auto Cylinders = 0xe8; // TArray<FAIDebugVisualisationCylinder>
		constexpr auto Spheres = 0xf8; // TArray<FAIDebugVisualisationSphere>
		constexpr auto Cones = 0x108; // TArray<FAIDebugVisualisationCone>
	}

	namespace n_AHangingPlatform { // : AContinuousAnimatedMechanismAction
		constexpr auto PlatformBody = 0xa28; // UStaticMeshComponent*
		constexpr auto DrivingMechanism = 0xa30; // UChildActorComponent*
		constexpr auto PlatformEndLocation = 0xa38; // FVector
		constexpr auto TargetDefiningTiltAxis = 0xa44; // FVector
		constexpr auto PlatformTiltHeightConstant = 0xa50; // FVector
		constexpr auto TotalTimeToComplete = 0xa5c; // float
		constexpr auto TimeForFullFlatten = 0xa60; // float
		constexpr auto TimeForFullMove = 0xa64; // float
		constexpr auto TiltAngle = 0xa68; // float
		constexpr auto CurrentAngleInterpolation = 0xa6c; // float
		constexpr auto CurrentMoveInterpolation = 0xa70; // float
	}

	namespace n_AGaneplayDebuggerProxyHUD { // : AHUD
		constexpr auto WhiteColor = 0x3d0; // FColor
		constexpr auto GreenColor = 0x3d4; // FColor
		constexpr auto RedColor = 0x3d8; // FColor
		constexpr auto PlayerOwner = 0x3e0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x3e8; // char : 1
		constexpr auto bShowHUD = 0x3e8; // char : 1
		constexpr auto bShowDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowHitBoxDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowOverlays = 0x3e8; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x3e8; // char : 1
		constexpr auto PostRenderedActors = 0x3f0; // TArray<AActor*>
		constexpr auto LastHUDRenderTime = 0x400; // float
		constexpr auto RenderDelta = 0x404; // float
		constexpr auto DebugDisplay = 0x408; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x418; // TArray<FName>
		constexpr auto Canvas = 0x428; // UCanvas*
		constexpr auto DebugCanvas = 0x430; // UCanvas*
		constexpr auto DebugTextList = 0x438; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x448; // AActor*
		constexpr auto ShowDebugTargetActor = 0x450; // AActor*
	}

	namespace n_ULocomotionInputComponent { // : UAthenaCharacterBaseLocomotionInputComponent
		constexpr auto ThrowablesItemCategory = 0x2d8; // UItemCategory*
	}

	namespace n_UNPCDialogOptionGiveMap { // : UNPCDialogOption
		constexpr auto Text = 0x80; // FText
		constexpr auto VoyageRecipe = 0xb8; // UVoyageRecipeDataAsset*
		constexpr auto LinkedDialog = 0xc0; // int32_t
		constexpr auto NumberOfUses = 0xc4; // int32_t
		constexpr auto NumTimesUsed = 0xc8; // int32_t
	}

	namespace n_UAICreatureCharacterMovementComponent { // : UCharacterMovementComponent
		constexpr auto AIStrategyMovementProperties = 0x558; // TArray<FAIStrategyMovementProperties>
		constexpr auto BlendSpeed = 0x568; // float
		constexpr auto bCreateDisturbance = 0x56c; // bool
		constexpr auto DisturbanceSize = 0x570; // float
		constexpr auto DisturbanceVelocityScale = 0x574; // float
		constexpr auto OrientationBlendSpeed = 0x578; // float
		constexpr auto OrientationMaxPitch = 0x57c; // float
		constexpr auto UpdateOrientationFrequency = 0x580; // float
		constexpr auto MinStairAngle = 0x584; // float
		constexpr auto MinStairVelocityDampen = 0x588; // float
		constexpr auto SubscribedStairClimbStrategies = 0x590; // TArray<UAIStrategyId*>
	}

	namespace n_UMaterialExpressionSceneTexture { // : UMaterialExpression
		constexpr auto Coordinates = 0x70; // FExpressionInput
		constexpr auto SceneTextureId = 0xa8; // ESceneTextureId
		constexpr auto bClampUVs = 0xa9; // bool
		constexpr auto bFiltered = 0xaa; // bool
	}

	namespace n_UMechanismAnimationEvent_OneShotAudio { // : UMechanismAnimationEvent_Audio
		constexpr auto StartTime = 0x60; // float
	}

	namespace n_UAnimNotify_WwiseSound { // : UAnimNotify
		constexpr auto WwiseEvent = 0x38; // UWwiseEvent*
		constexpr auto OwnedByWorld = 0x40; // bool
		constexpr auto PerspectiveRestriction = 0x41; // EAnimNotify_WwiseSound_PerspectiveRestriction
		constexpr auto OwnedByWorldWisePoolToUse = 0x48; // UWwiseObjectPoolWrapper*
	}

	namespace n_UAnimNotify_DitherActor { // : UAnimNotify
		constexpr auto FadeSetting = 0x38; // EDitherFadeSetting
		constexpr auto FadeTime = 0x3c; // float
	}

	namespace n_ULockComponent { // : UActorComponent
		constexpr auto FeatureFlag = 0xd0; // FName
		constexpr auto Locks = 0xd8; // TArray<FLockData>
		constexpr auto VaultLocks = 0xe8; // TArray<FVaultLock>
		constexpr auto LockStates = 0xf8; // TArray<FLockState>
		constexpr auto LockOpenedDelegate = 0x108; // FScriptMulticastDelegate
		constexpr auto IndividualLockOpenedDelegate = 0x118; // FScriptMulticastDelegate
		constexpr auto KeyUsedToUnlock = 0x128; // UItemDesc*
		constexpr auto LockKeyMeshAttachParent = 0x130; // USceneComponent*
		constexpr auto LockKeyMeshComponents = 0x138; // TArray<UStaticMeshMemoryConstraintComponent*>
		constexpr auto UnlockInputId = 0x148; // UNotificationInputId*
		constexpr auto TooltipDisplayPriority = 0x150; // EActionDisplayPriority
		constexpr auto ActionRules = 0x1d8; // UActionRulesComponent*
		constexpr auto UnlockText = 0x1e0; // FText
		constexpr auto NeedKeyToUnlockText = 0x218; // FText
		constexpr auto VaultUnavailableUnlockText = 0x250; // FText
		constexpr auto AssociatedOwnerObject = 0x288; // AActor*
	}

	namespace n_UShipCustomizationInfo { // : UDataAsset
		constexpr auto Category = 0x28; // UShipCustomizationCategory*
		constexpr auto ShipSizeCustomizations = 0x30; // TArray<FShipSizePartCustomizationInfo>
	}

	namespace n_UWaitForTunnelOfTheDamnedMigrationTaleQuestStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UWaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc*
	}

	namespace n_UBTTask_NotifyForcedHangoutComplete { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_UTaleQuestAddCircleMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto IslandName = 0x88; // FQuestVariableName
		constexpr auto Location = 0x98; // FQuestVariableVector
		constexpr auto CircleScale = 0xa8; // float
		constexpr auto RadialMiniIcon = 0xac; // EQuestMapIcon
	}

	namespace n_UPremiumCatalogBundleSetDataAsset { // : UPremiumCatalogLandingPageItemDataAsset
		constexpr auto PageTitle = 0x108; // FText
		constexpr auto PageIcon = 0x140; // FStringAssetReference
		constexpr auto BundleTitle = 0x150; // FText
		constexpr auto Saving = 0x188; // FText
		constexpr auto Offer = 0x1c0; // UCatalogOfferDataAsset*
		constexpr auto BundleItems = 0x1c8; // TArray<FPremiumShopBundleOfferItem>
		constexpr auto AdditionalItems = 0x1d8; // FPremiumCatalogItemSet
	}

	namespace n_UTaleQuestGetCrewShipManifestStepDesc { // : UTaleQuestStepDesc
		constexpr auto CrewId = 0x80; // FQuestVariableGuid
		constexpr auto CrewShipManifest = 0x90; // FQuestVariableCrewShipManifest
	}

	namespace n_ADebugTimeService { // : ATimeService
		constexpr auto GameWorldTimeOffset = 0x408; // FTimespan
		constexpr auto TimeScalar = 0x414; // uint32_t
		constexpr auto NumberOfDaysInEachGameMonth = 0x418; // uint32_t
		constexpr auto ServiceTimeQueryRapidFrequencyOffsetMax = 0x420; // double
		constexpr auto ServiceTimeQueryRapidFrequencyInSeconds = 0x428; // float
		constexpr auto ServiceTimeQueryFrequencyInSeconds = 0x42c; // float
		constexpr auto ClientTimeUpdateFrequencyInSeconds = 0x430; // float
		constexpr auto SunriseTimeHours = 0x434; // float
		constexpr auto SunsetTimeHours = 0x438; // float
		constexpr auto LocalTimeUpdateAdjustMaxTimeDelta = 0x43c; // float
		constexpr auto MinLocalTimeUpdateAdjustPercentageToSlowDown = 0x440; // float
		constexpr auto MaxLocalTimeUpdateAdjustPercentageToSlowDown = 0x444; // float
		constexpr auto MinLocalTimeUpdateAdjustPercentageToSpeedUp = 0x448; // float
		constexpr auto MaxLocalTimeUpdateAdjustPercentageToSpeedUp = 0x44c; // float
		constexpr auto MaxNumReplicatedTimeEntriesToAverage = 0x450; // uint32_t
		constexpr auto ReplicatedServerTime = 0x4a0; // FReplicatedAuthoritativeTime
	}

	namespace n_UTaleRankRequirements { // : UDataAsset
		constexpr auto RankRequirements = 0x28; // TArray<FCampaignRanks>
	}

	namespace n_UTimedFlammableComponent { // : UFlammableComponent
		constexpr auto UseExtinguishTimer = 0xe0; // bool
		constexpr auto AllowFireToBeReplenishedBeforeExtinguishTimerExpired = 0xe1; // bool
		constexpr auto TimeInSecondsUntilFireExtinguished = 0xe4; // float
	}

	namespace n_AHandHatch { // : AActor
		constexpr auto Mesh = 0x3d8; // UStaticMeshComponent*
		constexpr auto GlowMesh = 0x3e0; // UStaticMeshComponent*
		constexpr auto HandAnimations = 0x3e8; // TArray<UAnimSequence*>
		constexpr auto HatchLight = 0x3f8; // UPointLightComponent*
		constexpr auto FlameOfFateType = 0x400; // EFlameOfFateType
		constexpr auto HandsMeshes = 0x408; // TArray<UClientSkeletalMeshComponent*>
		constexpr auto HandsMeshesInvisibleRelativeLocations = 0x418; // TArray<FVector>
		constexpr auto HandsMeshesVisibleRelativeLocations = 0x428; // TArray<FVector>
		constexpr auto HandsMoveDistance = 0x438; // FVector
		constexpr auto HandsMoveTime = 0x444; // float
		constexpr auto HatchRespondsToSpawns = 0x448; // bool
		constexpr auto ActivationID = 0x44c; // FName
		constexpr auto IsHatchActive = 0x454; // bool
		constexpr auto EventDispatcher = 0x458; // FObjectMessagingDispatcher
		constexpr auto GlowDynamicMaterialInstance = 0x4f8; // UMaterialInstanceDynamic*
	}

	namespace n_UTaleQuestGenerateClueSiteOnIslandStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAshCloudAbilityStageParams { // : UAthenaAIAbilityStageParams
		constexpr auto AbilityCooldownSpeedMultiplier = 0x28; // float
		constexpr auto DamageRequiredForNextIntervalMultiplier = 0x2c; // float
		constexpr auto OverrideParams = 0x30; // bool
		constexpr auto AutoActivateOnStageTransition = 0x31; // bool
		constexpr auto TypeClass = 0x38; // UAthenaAIAbilityType*
	}

	namespace n_UMaterialExpressionSphericalParticleOpacity { // : UMaterialExpression
		constexpr auto Density = 0x70; // FExpressionInput
		constexpr auto ConstantDensity = 0xa8; // float
	}

	namespace n_UItemProxyShipTrackerComponent { // : UActorComponent
		constexpr auto ShipTrackingData = 0xd8; // UItemProxyShipTrackerComponentDataAsset*
		constexpr auto CurrentShip = 0xe0; // AActor*
	}

	namespace n_ARewardableItemInfo { // : AItemInfo
		constexpr auto RewardId = 0x500; // FRewardId
		constexpr auto Type = 0x508; // EBootyTypes
		constexpr auto Rarity = 0x50c; // FName
		constexpr auto HandInStats = 0x518; // TArray<FPlayerStat>
		constexpr auto LegendHandInStats = 0x528; // TArray<FPlayerStat>
		constexpr auto PopUpMessageDesc = 0x538; // UPopUpMessageDesc*
		constexpr auto PopUpAudioOverrides = 0x540; // UPopUpAudioDesc*
		constexpr auto Id = 0x548; // FGuid
	}

	namespace n_UAIPetsOnDemandSpawner { // : UAISpawner
		constexpr auto HasSpawnerLevelEncounters = 0x38; // bool
		constexpr auto SpawnTypeParamsCollection = 0x40; // FAISpawnTypeParamsCollection
		constexpr auto DefaultEncounterSettings = 0x88; // UAIEncounterSettings*
		constexpr auto DefaultSpawnWaveProgression = 0x90; // UAISpawnWaveSequenceRankProgression*
		constexpr auto SpawnContextSpecificEncounterSettings = 0x98; // TArray<FAISpawnContextIdEncounterSettingsPair>
		constexpr auto ShouldSpawnFacingRegionCentre = 0xa8; // bool
		constexpr auto DefaultSpawnType = 0xa9; // EAthenaAISpawnType
		constexpr auto FindSpawnPosQuery = 0xb0; // UEnvQuery*
		constexpr auto FindSpawnPosQueryRunMode = 0xb8; // EEnvQueryRunMode
		constexpr auto SpawnLocationType = 0xbc; // FName
		constexpr auto MaxNumOfSpawnedPawns = 0xc4; // int32_t
		constexpr auto PriorityForSpawnedPawns = 0xc8; // int32_t
		constexpr auto SpawnOverrides = 0xd0; // TArray<FConditionalAISpawnOverride>
		constexpr auto AdditionalBehaviours = 0xe0; // TArray<FAdditionalSpawnerBehaviour>
		constexpr auto AthenaAISettings = 0x360; // UAthenaAISettings*
	}

	namespace n_AAthenaAICharacterController { // : AAthenaAIController
		constexpr auto ItemParamsDataAsset = 0x900; // UAthenaAIItemParamsDataAsset*
		constexpr auto FallbackLoadoutIfAllEngageItemsDropped = 0x908; // ULoadoutAsset*
		constexpr auto ControlRotationInterpSpeed = 0x910; // float
		constexpr auto ControlRotationUseConstantInterp = 0x914; // bool
		constexpr auto FaceTargetDisabled = 0x915; // bool
		constexpr auto MinTurnAngleToPlayTurnAnim = 0x918; // float
		constexpr auto CharacterParamsDataAsset = 0x930; // UAthenaAICharacterControllerParamsDataAsset*
		constexpr auto SpawnItemDescForItemCategories = 0x9c8; // TArray<FAthenaAICharacterControllerSpawnItemDescForItemCategory>
		constexpr auto AIAbilityParams = 0x9d8; // TArray<UAthenaAIAbilityParams*>
		constexpr auto NonItemEngageOptions = 0x9e8; // TArray<FAthenaAIEngageEnemyData>
		constexpr auto DistanceInMToCannonShotHitChanceCurve = 0x9f8; // UCurveFloat*
	}

	namespace n_ACommonMerchantCrateItemInfoMock { // : AMerchantCrateItemInfoMock
		constexpr auto FaunaBreedRarity = 0x710; // TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry>
		constexpr auto CurrentShip = 0x778; // AActor*
	}

	namespace n_UHealthComponent { // : UActorComponent
		constexpr auto MinTimeSinceLastPredictedHealthChangeToFireChangedEventAgain = 0xd8; // float
		constexpr auto PreventDamageFromAllSourcesExceptWhitelistedSources = 0xdc; // bool
		constexpr auto MaxHealth = 0xe0; // float
		constexpr auto CurrentHealthInfo = 0xe4; // FCurrentHealthInfo
		constexpr auto ContinuousHealthChangeSources = 0x100; // TArray<FContinuousHealthChange>
		constexpr auto IsHealthAdjustLocked = 0x110; // bool
	}

	namespace n_UAssociateActorToCrewTaskStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UAssociateActorToCrewTaskStepDesc*
		constexpr auto TaskStep = 0x98; // UTaleQuestStep*
	}

	namespace n_UIngestedByKrakenInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UNPCDialogPredicateHasEmblem { // : UNPCDialogPredicate
		constexpr auto EmblemName = 0x38; // FName
	}

	namespace n_UClueDescriptorContainerComponent { // : UActorComponent
		constexpr auto CurrentClue = 0xd0; // UClueDescriptor*
		constexpr auto HasClueBeenGiven = 0xd8; // bool
	}

	namespace n_UCatchFaunaConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UAbilityTask_VisualizeTargeting { // : UAbilityTask
		constexpr auto TimeElapsed = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UWasProjectileFiredFromTypeOfActorStatCondition { // : UTargetedStatCondition
		constexpr auto ProjectileFiredFromType = 0x30; // EProjectileFiredFrom
	}

	namespace n_ULoadoutSettings { // : UObject
		constexpr auto DefaultLoadoutAsset = 0x28; // FStringAssetReference
		constexpr auto InitialLoadoutAsset = 0x38; // FStringAssetReference
		constexpr auto FallbackLoadoutAsset = 0x48; // FStringAssetReference
		constexpr auto ContestLoadoutAsset = 0x58; // FStringAssetReference
		constexpr auto SupplementalLoadouts = 0x68; // TArray<FSupplementalLoadout>
	}

	namespace n_UDestroySpawnedActorStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ATutorialEventControlledObject { // : AActor
		constexpr auto ActivateEventHandle = 0x3d8; // FObjectMessagingHandle
		constexpr auto DeactivateEventHandle = 0x420; // FObjectMessagingHandle
		constexpr auto ActivationSfx = 0x468; // UWwiseEvent*
		constexpr auto FullyActivatedSfx = 0x470; // UWwiseEvent*
		constexpr auto DeactivationSfx = 0x478; // UWwiseEvent*
		constexpr auto FullyDeactivatedSfx = 0x480; // UWwiseEvent*
		constexpr auto IsActivated = 0x488; // bool
		constexpr auto EventDispatcher = 0x490; // FObjectMessagingDispatcher
		constexpr auto RegisteredController = 0x530; // AAthenaPlayerController*
	}

	namespace n_UBP_TornMap_Desc_C { // : UTreasureMapItemDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_AAggressiveGhostShip { // : AActor
		constexpr auto OnPreparingToAnchorDrop = 0x410; // FScriptMulticastDelegate
		constexpr auto DataAsset = 0x420; // UAggressiveGhostShipDataAsset*
		constexpr auto DifficultyDataAsset = 0x428; // UAggressiveGhostShipDifficultyDataAsset*
		constexpr auto MineFormationsDataAsset = 0x430; // UAggressiveGhostShipMineFormationsDataAsset*
		constexpr auto LocationDataAsset = 0x438; // UAggressiveGhostShipLocationDataAsset*
		constexpr auto ShotSelectionDataAsset = 0x440; // UAggressiveGhostShipShotSelectionDataAsset*
		constexpr auto RewardsData = 0x448; // FAggressiveGhostShipRewardData
		constexpr auto RewardMarker = 0x460; // AShortRangeMarker*
		constexpr auto HitDetectionVolume = 0x468; // UBoxComponent*
		constexpr auto ShipDamageExplosionComponent = 0x470; // UExplosionComponent*
		constexpr auto OnDeathPushBackExplosionComponent = 0x478; // UExplosionComponent*
		constexpr auto ShipDamageableComponent = 0x480; // UShipDamageableComponent*
		constexpr auto NamedPointsComponent = 0x488; // UNamedPointsComponent*
		constexpr auto SplineComponent = 0x490; // USplineComponent*
		constexpr auto PortalEntryDistanceOffset = 0x498; // float
		constexpr auto PortalSpawnZOffset = 0x49c; // float
		constexpr auto PortalSpawnScale = 0x4a0; // FVector
		constexpr auto ImpulseCurve = 0x4b0; // UCurveFloat*
		constexpr auto SplineData = 0x4b8; // FAggressiveGhostShipSplineData
		constexpr auto GhostShipsToIgnore = 0x518; // TArray<TWeakObjectPtr<AAggressiveGhostShip>>
		constexpr auto ShipState = 0x528; // FAggressiveGhostShipState
		constexpr auto HasMadeShipAppear = 0x530; // bool
		constexpr auto PoolingResource = 0x538; // AAggressiveGhostShipPoolResource*
		constexpr auto IsOverlappingShip = 0x540; // bool
		constexpr auto NumShotsLeftToKill = 0x544; // int32_t
		constexpr auto RewardSpawner = 0x548; // FWeightedItemDescSpawner
		constexpr auto IsInert = 0x5a0; // bool
		constexpr auto ExtraDistanceAroundSplineOffset = 0x5a4; // float
		constexpr auto VisualsDataAsset = 0x5a8; // UAggressiveGhostShipVisualsDataAsset*
		constexpr auto TrackedActorType = 0x5b0; // ETrackedActorType
		constexpr auto AllProjectiles = 0x5b8; // TArray<ALaunchableProjectile*>
		constexpr auto VisibleMesh = 0x5c8; // UStaticMeshComponent*
		constexpr auto HealthIndicatorEffect = 0x5d0; // UParticleSystemComponent*
		constexpr auto ExtraMeshes = 0x5d8; // TArray<UStaticMeshComponent*>
		constexpr auto AllMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto AllMaterials = 0x770; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UCutsceneDataAsset { // : UDataAsset
		constexpr auto CutsceneGroups = 0x28; // TArray<FCutsceneGroup>
	}

	namespace n_UAnimNotifyState_SpawnCosmeticItem { // : UAnimNotifyState
		constexpr auto CosmeticItemToSpawn = 0x28; // AActor*
		constexpr auto SpawnLocation = 0x30; // EWieldAnimationLocation
		constexpr auto CosmeticItemAnimationDataSet = 0x38; // UCosmeticItemAnimationSetDataAsset*
		constexpr auto SpawnHidden = 0x40; // bool
		constexpr auto DestroyOnEnd = 0x41; // bool
		constexpr auto OverrideDestroyLocation = 0x42; // bool
		constexpr auto DestroyLocation = 0x43; // EWieldAnimationLocation
	}

	namespace n_UPetChestViewModelComponent { // : UPossessionsChestViewModel
		constexpr auto ClearIcon = 0x170; // FStringAssetReference
		constexpr auto WithClearButtons = 0x180; // bool
		constexpr auto Categories = 0x198; // TArray<UPetEntitlementBaseCategory*>
		constexpr auto IncludeAllCategory = 0x1a8; // bool
	}

	namespace n_UChestOfRageDataAsset { // : UDataAsset
		constexpr auto DormantDuration = 0x28; // float
		constexpr auto RageBuildingDuration = 0x2c; // float
		constexpr auto TimeInToRageBuildingToAbsorbWater = 0x30; // float
		constexpr auto SteamingDuration = 0x34; // float
		constexpr auto TimeInToSteamingStateWhereHitWillCauseInstantExplosion = 0x38; // float
		constexpr auto OnFireDuration = 0x3c; // float
		constexpr auto InWaterCoolingRate = 0x40; // float
		constexpr auto ForcedInWaterCoolingRate = 0x44; // float
		constexpr auto InRainCoolingRate = 0x48; // float
		constexpr auto WaterHeightCheckOffset = 0x4c; // float
		constexpr auto TimeToRemovePerSplash = 0x50; // UCurveFloat*
		constexpr auto HealthChangePerSecondWhilstCarryingASteamingChest = 0x58; // float
		constexpr auto PercentageToHeatHullWaterPerSecond = 0x5c; // float
		constexpr auto ChestInSuperheatedWaterSteadyStatePercentage = 0x60; // float
		constexpr auto RageBuildingVfx = 0x68; // UObject*
		constexpr auto MinimumRageValueToTriggerRageBuildingVfx = 0x70; // float
		constexpr auto SteamingVfx = 0x78; // UObject*
		constexpr auto OnFireVfx = 0x80; // UObject*
		constexpr auto ExplosionVfx = 0x88; // UObject*
		constexpr auto CooledDownSteamBlast = 0x90; // UObject*
		constexpr auto OnTakingDamageVfx = 0x98; // UObject*
		constexpr auto OnTakingDamageSfx = 0xa0; // UWwiseEvent*
		constexpr auto StartWhistlingOneShotSfx = 0xa8; // UWwiseEvent*
		constexpr auto StartWhistlingSfx = 0xb0; // UWwiseEvent*
		constexpr auto StopWhistlingSfx = 0xb8; // UWwiseEvent*
		constexpr auto StartRageBuildingSfx = 0xc0; // UWwiseEvent*
		constexpr auto StopRageBuildingSfx = 0xc8; // UWwiseEvent*
		constexpr auto ExplosionSfx = 0xd0; // UWwiseEvent*
		constexpr auto ExtinguishedSfx = 0xd8; // UWwiseEvent*
		constexpr auto AudioSFXPool = 0xe0; // UWwiseObjectPoolWrapper*
		constexpr auto DamageTable = 0xe8; // TArray<FChestOfRageDamageTableEntry>
	}

	namespace n_UCircleMapSettings { // : UDeveloperSettings
		constexpr auto CircleMapItemDescClass = 0x38; // FStringAssetReference
	}

	namespace n_AToggleAnimatedMechanismActionProxy { // : ABaseToggleAnimatedMechanismActionProxy
		constexpr auto InactiveToActiveAnimation = 0x428; // FMechanismTransformAnimationCurve
		constexpr auto ActiveToInactiveAnimation = 0x430; // FMechanismTransformAnimationCurve
	}

	namespace n_UAbilityTask_WaitGameplayEffectApplied_Target { // : UAbilityTask_WaitGameplayEffectApplied
		constexpr auto OnApplied = 0x130; // FScriptMulticastDelegate
	}

	namespace n_UGameplayDebuggingControllerComponent { // : UActorComponent
		constexpr auto OnDebugAIHUD = 0xc8; // AGameplayDebuggingHUDComponent*
		constexpr auto DebugAITargetActor = 0xd0; // AActor*
		constexpr auto AIDebugViewInputComponent = 0xd8; // UInputComponent*
		constexpr auto DebugCameraInputComponent = 0xe0; // UInputComponent*
		constexpr auto ActivationKey = 0x110; // FInputChord
		constexpr auto CategoryZeroBind = 0x138; // FInputChord
		constexpr auto CategoryOneBind = 0x160; // FInputChord
		constexpr auto CategoryTwoBind = 0x188; // FInputChord
		constexpr auto CategoryThreeBind = 0x1b0; // FInputChord
		constexpr auto CategoryFourBind = 0x1d8; // FInputChord
		constexpr auto CategoryFiveBind = 0x200; // FInputChord
		constexpr auto CategorySixBind = 0x228; // FInputChord
		constexpr auto CategorySevenBind = 0x250; // FInputChord
		constexpr auto CategoryEightBind = 0x278; // FInputChord
		constexpr auto CategoryNineBind = 0x2a0; // FInputChord
		constexpr auto CycleDetailsViewBind = 0x2c8; // FInputChord
		constexpr auto DebugCameraBind = 0x2f0; // FInputChord
		constexpr auto OnScreenDebugMessagesBind = 0x318; // FInputChord
		constexpr auto GameHUDBind = 0x340; // FInputChord
	}

	namespace n_UApplyNameplateToBountyWaveSpawnedAction { // : UPostBountyAIPawnSpawnedAction
		constexpr auto AIName = 0x28; // FText
	}

	namespace n_UEnvQueryGenerator_AIRegionLocations { // : UEnvQueryGenerator
		constexpr auto UseOverrideSpawnType = 0x50; // bool
		constexpr auto OverrideSpawnType = 0x54; // FName
	}

	namespace n_UDebugTeleportCrewStepDesc { // : UTaleQuestStepDesc
		constexpr auto LocatorVar = 0x80; // FQuestVariableActor
	}

	namespace n_ALight { // : AActor
		constexpr auto LightComponent = 0x3d0; // ULightComponent*
		constexpr auto bEnabled = 0x3d8; // char : 1
	}

	namespace n_UMerchantCrateCategoryMock { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UQuickInventoryComponent { // : UActorComponent
		constexpr auto CannonballItemCategory = 0xe0; // UItemCategory*
		constexpr auto CursedCannonballItemCategory = 0xe8; // UItemCategory*
		constexpr auto FoodItemCategory = 0xf0; // UItemCategory*
		constexpr auto RepairablesItemCategory = 0xf8; // UItemCategory*
		constexpr auto BaitItemCategory = 0x100; // UItemCategory*
		constexpr auto FireBombCategory = 0x108; // UItemCategory*
		constexpr auto ChainShotCategory = 0x110; // UItemCategory*
		constexpr auto FireworkCategory = 0x118; // UItemCategory*
	}

	namespace n_ASeatCollection { // : AActor
		constexpr auto Root = 0x3e0; // USceneComponent*
	}

	namespace n_UAbandonedNoteClueDescriptor { // : UClueDescriptor
		constexpr auto DestinationDescriptor = 0x28; // UClueDestinationDescriptor*
	}

	namespace n_UMeshMemoryConstraintFallbackCategoryDataAsset { // : UDataAsset
		constexpr auto ConstraintCategory = 0x28; // UMeshMemoryConstraintCategory*
		constexpr auto MeshFallbackReference = 0x30; // FStringAssetReference
		constexpr auto CachedMeshResourceSize = 0x40; // int64_t
	}

	namespace n_UBoobyTrapSpawnerDataAsset { // : UDataAsset
		constexpr auto RankEntries = 0x28; // TArray<FBoobyTrapSpawnerRankEntry>
	}

	namespace n_UTaleQuestWaitForHandInStepDesc { // : UTaleQuestStepDesc
		constexpr auto HandInActor = 0x80; // FQuestVariableActor
		constexpr auto SpecificItem = 0x90; // UItemDesc*
		constexpr auto HandInItem = 0x98; // FQuestVariableItemDescType
	}

	namespace n_UStorySpawnedActorsSettings { // : UDeveloperSettings
		constexpr auto StorySpawnActorsCollectionDataAssetLocation = 0x38; // FStringAssetReference
	}

	namespace n_USeasonXPReward { // : UReward
		constexpr auto SeasonXP = 0x28; // uint32_t
	}

	namespace n_ULevelStreamingAlwaysLoaded { // : ULevelStreaming
		constexpr auto WorldAsset = 0x28; // UWorld*
		constexpr auto PackageNameToLoad = 0x50; // FName
		constexpr auto LODPackageNames = 0x58; // TArray<FName>
		constexpr auto LevelTransform = 0x80; // FTransform
		constexpr auto bShouldBeVisibleInEditor = 0xbc; // char : 1
		constexpr auto Blocked = 0xbc; // char : 1
		constexpr auto bShouldBeLoaded = 0xbc; // char : 1
		constexpr auto bShouldBeVisible = 0xbc; // char : 1
		constexpr auto bShouldBlockOnLoad = 0xbc; // char : 1
		constexpr auto LevelLODIndex = 0xc0; // int32_t
		constexpr auto bDisableDistanceStreaming = 0xc4; // char : 1
		constexpr auto bDrawOnLevelStatusMap = 0xc4; // char : 1
		constexpr auto LevelColor = 0xc8; // FLinearColor
		constexpr auto EditorStreamingVolumes = 0xd8; // TArray<ALevelStreamingVolume*>
		constexpr auto MinTimeBetweenVolumeUnloadRequests = 0xe8; // float
		constexpr auto Keywords = 0xf0; // TArray<FString>
		constexpr auto OnLevelLoaded = 0x100; // FScriptMulticastDelegate
		constexpr auto OnLevelUnloaded = 0x110; // FScriptMulticastDelegate
		constexpr auto OnLevelShown = 0x120; // FScriptMulticastDelegate
		constexpr auto OnLevelHidden = 0x130; // FScriptMulticastDelegate
		constexpr auto LoadedLevel = 0x200; // ULevel*
		constexpr auto PendingUnloadLevel = 0x208; // ULevel*
	}

	namespace n_UEnvQueryTest_InGameEventExclusionZone { // : UEnvQueryTest
		constexpr auto Radius = 0x170; // float
	}

	namespace n_ADamageZone { // : AInteractableBase
		constexpr auto InteractionPointDepthOffset = 0x428; // float
		constexpr auto MaximumRepairAngleToRepairer = 0x42c; // float
		constexpr auto MaximumRepairDistance = 0x430; // float
		constexpr auto HullFloodedPercentageToShiftWaterSamplingPos = 0x434; // float
		constexpr auto WaterSampleOffsetBelowHullFloodThreshold = 0x438; // float
		constexpr auto WaterSampleOffsetAboveHullFloodThreshold = 0x43c; // float
		constexpr auto InternalWaterHeightDeltaForVFXUpdate = 0x440; // float
		constexpr auto InternalWaterSamplePositionTop = 0x444; // FVector
		constexpr auto InternalWaterSamplePositionBottom = 0x450; // FVector
		constexpr auto InternalWaterSamplePositionCurrent = 0x45c; // FVector
		constexpr auto WaterSplashDelayMax = 0x468; // float
		constexpr auto WaterSplashDelayMin = 0x46c; // float
		constexpr auto SceneRootComponent = 0x470; // USceneComponent*
		constexpr auto InteractionComponent = 0x478; // UInteractableComponent*
		constexpr auto LocationOnShip = 0x480; // EShipDeck
		constexpr auto AIInteractionOffset = 0x484; // FVector
		constexpr auto UndoRepairItemDesc = 0x490; // UItemDesc*
		constexpr auto UndoRepairTooltipText = 0x498; // FText
		constexpr auto UndoRepairInventoryFullTooltipText = 0x4d0; // FText
		constexpr auto LevelOfDamageProperties = 0x510; // TArray<FLevelOfDamageProperties>
		constexpr auto IsUnderExternalWater = 0x520; // bool
		constexpr auto IsUnderInternalWater = 0x521; // bool
		constexpr auto RepairType = 0x528; // URepairTypeId*
		constexpr auto InternalWater = 0x530; // AShipInternalWater*
		constexpr auto HoleDecalComponent = 0x540; // UDecalComponent*
		constexpr auto WaterLeakParticleSystem = 0x548; // UParticleSystemComponent*
		constexpr auto WaterLeakParticleSystemRepairing = 0x550; // UParticleSystemComponent*
		constexpr auto BubbleLeakParticleSystem = 0x558; // UParticleSystemComponent*
		constexpr auto BubbleLeakParticleSystemRepairing = 0x560; // UParticleSystemComponent*
		constexpr auto SplashParticleSystem = 0x568; // UParticleSystemComponent*
		constexpr auto InternalHitVfx = 0x570; // UParticleSystem*
		constexpr auto WaterLeakEmitter = 0x580; // FWwiseEmitter
		constexpr auto WaterLeakSfx_Play = 0x5a0; // UWwiseEvent*
		constexpr auto WaterLeakSfx_Stop = 0x5a8; // UWwiseEvent*
		constexpr auto WaterLeakRepairSfx_Play = 0x5b0; // UWwiseEvent*
		constexpr auto WaterLeakRepairSfx_Stop = 0x5b8; // UWwiseEvent*
		constexpr auto WaterLeakUnderwaterSwitchGroup = 0x5c0; // FName
		constexpr auto WaterLeakUnderwaterSwitchDefaultAboveWater = 0x5c8; // FName
		constexpr auto WaterLeakUnderwaterSwitchUnderwater = 0x5d0; // FName
		constexpr auto LeakDamageSwitchGroup = 0x5d8; // FName
		constexpr auto WaterLevelRTPC = 0x5e0; // FName
		constexpr auto WaterLeakFadeTime = 0x5e8; // float
		constexpr auto WaterLeakWisePool = 0x5f0; // UWwiseObjectPoolWrapper*
		constexpr auto Strain_DamageSfx = 0x5f8; // UWwiseEvent*
		constexpr auto StrainDamagePool = 0x600; // UWwiseObjectPoolWrapper*
		constexpr auto WaterLeakEmitterName = 0x608; // FName
		constexpr auto ExternalHitList = 0x618; // TArray<FHullDamageHit>
		constexpr auto AuthorityRepairableState = 0x628; // FAuthorityRepairableState
		constexpr auto DamageLevel = 0x644; // int32_t
		constexpr auto RepairedDamageLevel = 0x648; // int32_t
		constexpr auto AboutToBlow = 0x64c; // bool
	}

	namespace n_AVolumeMechanismTrigger { // : AActor
		constexpr auto MechanismTriggerComponent = 0x3d0; // UMechanismTriggerComponent*
		constexpr auto TriggerVolume = 0x3d8; // UBoxComponent*
		constexpr auto UsePerCrewOverlaps = 0x3e0; // bool
		constexpr auto PerCrewOverlapCooldownTimeInSeconds = 0x3e4; // int32_t
	}

	namespace n_UBattleElevatorEventRoomPhasesDataAsset { // : UDataAsset
		constexpr auto Phases = 0x28; // TArray<FBattleElevatorEventRoomPhase>
	}

	namespace n_UEnvQueryGenerator_BlueprintBase { // : UEnvQueryGenerator
		constexpr auto GeneratorsActionDescription = 0x50; // FText
		constexpr auto Context = 0x88; // UEnvQueryContext*
		constexpr auto GeneratedItemType = 0x90; // UEnvQueryItemType*
	}

	namespace n_UCircleMapClueDescriptor { // : UClueDescriptor
		constexpr auto DestinationDescriptor = 0x28; // UClueDestinationDescriptor*
	}

	namespace n_UAthenaGameEngine { // : URareGameEngine
		constexpr auto EngineSettings = 0xa48; // UAthenaGameEngineSettings*
	}

	namespace n_UUnlockConditionalStatsTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UAudioPortalComponent { // : USceneComponent
		constexpr auto AudioInsideSpace = 0x2b0; // UAudioSpaceDataAsset*
		constexpr auto AudioOutsideSpace = 0x2b8; // UAudioSpaceDataAsset*
		constexpr auto PortalTriggerDistance = 0x2c0; // float
		constexpr auto InsideRtpcUpdateDistance = 0x2c4; // float
		constexpr auto OutsideRtpcUpdateDistance = 0x2c8; // float
		constexpr auto TrackAttachmentToActor = 0x2cc; // bool
	}

	namespace n_UIslandByCompassBearingClueDestinationDescriptor { // : UClueDestinationDescriptor
		constexpr auto CompassDirection = 0x40; // ECompassDirections
	}

	namespace n_UStatusApplicationMonitorComponent { // : UActorComponent
		constexpr auto StatusApplicationTrigger = 0xc8; // UConditionalStatsTriggerType*
	}

	namespace n_UClawPummelAIAbilityParams { // : UKnockbackAIAbilityParams
		constexpr auto WarmUpTime = 0x208; // float
	}

	namespace n_UMechanismTriggerComponent { // : UActorComponent
		constexpr auto TriggerType = 0xd8; // EMechanismTriggerType
		constexpr auto OnMechanismActionRegisteredWithTriggerDelegate = 0xe0; // FScriptMulticastDelegate
		constexpr auto OnMechanismActionUnregisteredWithTriggerDelegate = 0xf0; // FScriptMulticastDelegate
		constexpr auto OnMechanismTriggerChangedMechanismActionStatesDelegate = 0x100; // FScriptMulticastDelegate
		constexpr auto OnMechanismTriggerStateChangedDelegate = 0x110; // FScriptMulticastDelegate
		constexpr auto OnMechanismTriggerResetDelegate = 0x120; // FScriptMulticastDelegate
		constexpr auto TriggerState = 0x140; // EMechanismTriggerState
	}

	namespace n_UParticleModuleOrbit { // : UParticleModuleOrbitBase
		constexpr auto ChainMode = 0x58; // EOrbitChainMode
		constexpr auto OffsetAmount = 0x60; // FRawDistributionVector
		constexpr auto OffsetOptions = 0x98; // FOrbitOptions
		constexpr auto RotationAmount = 0xa0; // FRawDistributionVector
		constexpr auto RotationOptions = 0xd8; // FOrbitOptions
		constexpr auto RotationRateAmount = 0xe0; // FRawDistributionVector
		constexpr auto RotationRateOptions = 0x118; // FOrbitOptions
	}

	namespace n_USpawnCollectableQuestObjectStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x98; // USpawnCollectableQuestObjectStepDesc*
		constexpr auto SpawnedPage = 0xa0; // TScriptInterface<Class>
	}

	namespace n_ALandmarkReactionPlayer { // : AActor
		constexpr auto OrderedReactions = 0x3d8; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto ActiveParticleSystems = 0x440; // TArray<UParticleSystemComponent*>
	}

	namespace n_UTaleQuestStoreClueOnActorStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UParticleSpriteEmitter { // : UParticleEmitter
		constexpr auto EmitterName = 0x28; // FName
		constexpr auto SubUVDataOffset = 0x30; // int32_t
		constexpr auto EmitterRenderMode = 0x34; // EEmitterRenderMode
		constexpr auto LODLevels = 0x38; // TArray<UParticleLODLevel*>
		constexpr auto ConvertedModules = 0x48; // char : 1
		constexpr auto PeakActiveParticles = 0x4c; // int32_t
		constexpr auto InitialAllocationCount = 0x50; // int32_t
		constexpr auto MediumDetailSpawnRateScale = 0x54; // float
		constexpr auto QualityLevelSpawnRateScale = 0x58; // float
		constexpr auto DetailMode = 0x5c; // EDetailMode
		constexpr auto MaxEmitterQuality = 0x5d; // EEmitterQuality
		constexpr auto MinEmitterQuality = 0x5e; // EEmitterQuality
		constexpr auto bIsSoloing = 0x60; // char : 1
		constexpr auto bCookedOut = 0x60; // char : 1
		constexpr auto bDisabledLODsKeepEmitterAlive = 0x60; // char : 1
		constexpr auto bHasAnyEnabledLODs = 0x60; // char : 1
		constexpr auto bHasAnyEnabledLODsValid = 0x60; // char : 1
		constexpr auto ModulesNeedingInstanceData = 0xa0; // TArray<UParticleModule*>
	}

	namespace n_ALandscape { // : ALandscapeProxy
		constexpr auto SplineComponent = 0x3d8; // ULandscapeSplinesComponent*
		constexpr auto LandscapeGuid = 0x3e0; // FGuid
		constexpr auto LandscapeSectionOffset = 0x3f0; // FIntPoint
		constexpr auto MaxLODLevel = 0x3f8; // int32_t
		constexpr auto StaticLightingLOD = 0x3fc; // int32_t
		constexpr auto DefaultPhysMaterial = 0x400; // UPhysicalMaterial*
		constexpr auto StreamingDistanceMultiplier = 0x408; // float
		constexpr auto LandscapeMaterial = 0x410; // UMaterialInterface*
		constexpr auto LandscapeHoleMaterial = 0x418; // UMaterialInterface*
		constexpr auto LODDistanceFactor = 0x420; // float
		constexpr auto LandscapeComponents = 0x428; // TArray<ULandscapeComponent*>
		constexpr auto CollisionComponents = 0x438; // TArray<ULandscapeHeightfieldCollisionComponent*>
		constexpr auto FoliageComponents = 0x448; // TArray<UHierarchicalInstancedStaticMeshComponent*>
		constexpr auto StaticLightingResolution = 0x4d0; // float
		constexpr auto LandscapeActor = 0x4d4; // ALandscape*
		constexpr auto bCastStaticShadow = 0x4f0; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x4f0; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x4f0; // char : 1
		constexpr auto bCastFarShadow = 0x4f0; // char : 1
		constexpr auto bIsProxy = 0x4f0; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x4f0; // char : 1
		constexpr auto LpvIntensityMultiplier = 0x4f4; // float
		constexpr auto LpvBiasMultiplier = 0x4f8; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x4fc; // float
		constexpr auto LightmassSettings = 0x500; // FLightmassPrimitiveSettings
		constexpr auto CollisionMipLevel = 0x518; // int32_t
		constexpr auto CollisionThickness = 0x51c; // float
		constexpr auto BodyInstance = 0x520; // FBodyInstance
		constexpr auto ComponentSizeQuads = 0x6a0; // int32_t
		constexpr auto SubsectionSizeQuads = 0x6a4; // int32_t
		constexpr auto NumSubsections = 0x6a8; // int32_t
		constexpr auto bUsedForNavigation = 0x6ac; // char : 1
		constexpr auto bReflected = 0x6ac; // char : 1
		constexpr auto NavigationGeometryGatheringMode = 0x6b0; // ENavDataGatheringMode
		constexpr auto LODFalloff = 0x6b1; // ELandscapeLODFalloff
	}

	namespace n_UKrakenAnimatedTentacleAnimationInstance { // : UAnimInstance
		constexpr auto AnimationStopBlendOutTime = 0x440; // float
		constexpr auto MidAnimationBranchBlendTime = 0x444; // float
		constexpr auto HitReactAnimations = 0x448; // TArray<FKrakenAnimatedTentacleHitReactAnimation>
		constexpr auto StateAnimationsAsset = 0x458; // UKrakenAnimatedTentacleStateAnimationsDataAsset*
		constexpr auto PlayingMontage = 0x460; // UAnimMontage*
		constexpr auto OwningKrakenAnimatedTentacle = 0x488; // AKrakenAnimatedTentacle*
	}

	namespace n_UNPCDialogHeaderDynamic { // : UNPCDialogHeader
		constexpr auto Text = 0x28; // FText
	}

	namespace n_UTaleQuestAdvanceRiddleMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTTask_PlaySound { // : UBTTaskNode
		constexpr auto SoundToPlay = 0x60; // USoundCue*
	}

	namespace n_UStatusResponseEmote { // : UStatusResponse
		constexpr auto EmoteIdentifier = 0x30; // FName
	}

	namespace n_UBoxReflectionCaptureComponent { // : UReflectionCaptureComponent
		constexpr auto BoxTransitionDistance = 0x340; // float
		constexpr auto PreviewInfluenceBox = 0x348; // UBoxComponent*
		constexpr auto PreviewCaptureBox = 0x350; // UBoxComponent*
	}

	namespace n_UBP_LocationMap_Desc_C { // : UTreasureMapItemDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_UPetDangerDataAsset { // : UDataAsset
		constexpr auto KnownHearingDangers = 0x28; // TArray<FPetDangerHearingThreat>
		constexpr auto MinChangeAverageThreatLocationToUpdate = 0x38; // float
		constexpr auto FleeDistance = 0x3c; // float
		constexpr auto ResponsePriorities = 0x40; // TArray<EPetDangerHearingResponseType>
	}

	namespace n_UTaleQuestReleaseVaultStep { // : UTaleQuestStep
		constexpr auto VaultReleased = 0x90; // bool
	}

	namespace n_UTaleQuestSelectShipwreckLocationFromValidCandidatesStep { // : UTaleQuestStep
		constexpr auto CachedSelectorService = 0xc8; // UTaleQuestSelectorService*
	}

	namespace n_AStatueThreatBase { // : AActor
		constexpr auto HealingPerSecond = 0x3f8; // float
		constexpr auto DespawnDelay = 0x3fc; // float
		constexpr auto EnableRadialDamageOnBeginPlay = 0x400; // bool
		constexpr auto OnStatueDamaged = 0x408; // FScriptMulticastDelegate
		constexpr auto OnStatueDestroyed = 0x418; // FScriptMulticastDelegate
		constexpr auto Root = 0x428; // USceneComponent*
		constexpr auto HealthComponent = 0x430; // UHealthComponent*
		constexpr auto RadialDamageComponent = 0x438; // URadialDamagerComponent*
		constexpr auto AudioComponent = 0x440; // USunkenCurseArtefactAudioComponent*
		constexpr auto VFXComponent = 0x448; // USunkenCurseArtefactVfxComponent*
		constexpr auto DamageMaterialComponent = 0x450; // USunkenCurseArtefactDynamicMaterialComponent*
		constexpr auto DamageableComponent = 0x458; // UActorDamageableComponent*
	}

	namespace n_UFrontendHudComponent { // : UCoherentBaseHUDComponent
		constexpr auto CurrentPawn = 0x370; // APawn*
		constexpr auto AudioComponent = 0x5c0; // UCoherentToWwiseEventComponent*
	}

	namespace n_UKrakenAICharacterAudioComponentParams { // : UDataAsset
		constexpr auto PlayKrakenAmbience = 0x28; // UWwiseEvent*
		constexpr auto StopKrakenAmbience = 0x30; // UWwiseEvent*
		constexpr auto PlayKrakenTell = 0x38; // UWwiseEvent*
		constexpr auto PlayKrakenTellCooldownMax = 0x40; // float
		constexpr auto PlayKrakenTellCooldownMin = 0x44; // float
	}

	namespace n_UTaleAddStormAvoidanceAreaStepDesc { // : UTaleQuestStepDesc
		constexpr auto Location = 0x80; // FQuestVariableVector
		constexpr auto Radius = 0x90; // FQuestVariableFloat
	}

	namespace n_UTaleMakeSpireVisibleStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAimOffsetBlendSpace { // : UBlendSpace
		constexpr auto AxisToScaleAnimation = 0x108; // EBlendSpaceAxis
	}

	namespace n_UTaleQuestAddChecklistMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto Title = 0x88; // FQuestVariableText
		constexpr auto Description = 0x98; // FQuestVariableText
		constexpr auto Items = 0xa8; // FQuestVariableChecklistItemArray
		constexpr auto Afternote = 0xb8; // FQuestVariableText
		constexpr auto Layout = 0xc8; // UChecklistMapLayout*
	}

	namespace n_UAbandonedNoteWieldableRenderingComponent { // : UActorComponent
		constexpr auto CanvasWidth = 0xc8; // int32_t
		constexpr auto CanvasHeight = 0xcc; // int32_t
		constexpr auto BodyTextFont = 0xd0; // UFont*
		constexpr auto TitleTextFont = 0xd8; // UFont*
		constexpr auto FontLineSpacing = 0xe0; // float
		constexpr auto FontScale = 0xe4; // float
		constexpr auto BodyTextLayout = 0xe8; // FTreasureMapWidgetText
		constexpr auto TitleTextLayout = 0x108; // FTreasureMapWidgetText
		constexpr auto ExtraTextFields = 0x128; // TArray<FTextEntryWithLayout>
		constexpr auto WieldableRenderingInterface = 0x138; // TScriptInterface<Class>
	}

	namespace n_UInstancedStaticMeshComponent { // : UStaticMeshComponent
		constexpr auto PerInstanceSMData = 0x5f0; // TArray<FInstancedStaticMeshInstanceData>
		constexpr auto InstancingRandomSeed = 0x600; // int32_t
		constexpr auto InstanceStartCullDistance = 0x604; // int32_t
		constexpr auto InstanceEndCullDistance = 0x608; // int32_t
		constexpr auto InstanceReorderTable = 0x610; // TArray<int32_t>
		constexpr auto RemovedInstances = 0x620; // TArray<int32_t>
		constexpr auto PhysicsSerializer = 0x678; // UPhysicsSerializer*
		constexpr auto NumPendingLightmaps = 0x680; // int32_t
		constexpr auto CachedMappings = 0x688; // TArray<FInstancedStaticMeshMappingInfo>
	}

	namespace n_UStaticStashedMeshMemoryConstraintComponent { // : UStaticMeshMemoryConstraintComponent
		constexpr auto Handler = 0x608; // UMeshMemoryConstraintHandler*
		constexpr auto FallbackOverrideMaterials = 0x610; // TArray<FStringAssetReference>
		constexpr auto MeshFallbackCategory = 0x620; // UMeshMemoryConstraintCategory*
		constexpr auto MeshReference = 0x628; // FStringAssetReference
		constexpr auto CachedMeshResourceSize = 0x638; // int64_t
		constexpr auto MemoryAccountedFor = 0x640; // bool
		constexpr auto NeedMeshLoadOnServer = 0x641; // bool
		constexpr auto BudgetToCountMemoryAgainstIfNoFallback = 0x648; // UMeshMemoryConstraintBudget*
	}

	namespace n_UInitialisePuzzleVaultStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_URecastNavMeshDataChunk { // : UNavigationDataChunk
		constexpr auto NavigationDataName = 0x28; // FName
	}

	namespace n_UMaterialExpressionDivide { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto ConstA = 0xe0; // float
		constexpr auto ConstB = 0xe4; // float
	}

	namespace n_USkeletonAudioFootfallControllerParams { // : UCharacterAudioFootfallControllerParams
		constexpr auto SkeletonLayerFootfallEvent = 0x108; // UWwiseEvent*
	}

	namespace n_UComponentWithDerivedTestInterface { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ATestAthenaPlayerController { // : AAthenaPlayerController
		constexpr auto LastReceivedForceFeedbackEffect = 0x1488; // UForceFeedbackEffect*
	}

	namespace n_UBTTask_FlushQueuedEngageEnemyMethod { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_APhasedClusterRoot { // : AActor
		constexpr auto Pawns = 0x3d0; // TArray<APawn*>
	}

	namespace n_ASeaFort { // : AIslandData
		constexpr auto OnEnabledChanged = 0x510; // FScriptMulticastDelegate
		constexpr auto ServerMigrationExclusionRadius = 0x520; // float
		constexpr auto Enabled = 0x524; // bool
	}

	namespace n_UContestSettingsDataAsset { // : UDataAsset
		constexpr auto MatchmakingTimeoutTime = 0x28; // FContestTimerData
		constexpr auto AttemptToMigrateFailSafeTime = 0x40; // FContestTimerData
		constexpr auto ContestStartTime = 0x58; // FContestTimerData
		constexpr auto PostContestTimeBeforeReturningToACT = 0x70; // FContestTimerData
		constexpr auto StartBlindsDisplayTime = 0x88; // FContestTimerData
		constexpr auto LeaderboardDisplayTime = 0xa0; // FContestTimerData
		constexpr auto ContestRewardTime = 0xb8; // FContestTimerData
		constexpr auto ServerShutdownMinutes = 0xd0; // FContestTimerData
		constexpr auto ServerRecruitingTime = 0xe8; // FContestTimerData
		constexpr auto StagingRequirements = 0x100; // FContestCrewRequirementData
		constexpr auto FallbackStagingRequirements = 0x128; // FContestCrewRequirementData
		constexpr auto ContestRequirements = 0x150; // FContestCrewRequirementData
		constexpr auto VoyageDataAsset = 0x178; // UContestVoyagesSelectorDataAsset*
		constexpr auto OverarchingVoyageAsset = 0x180; // UMatchmakingVoyageRecipeDesc*
		constexpr auto ArenaCompany = 0x188; // UCompany*
		constexpr auto ShipCatalogueDataAsset = 0x190; // UContestShipCatalogueDataAsset*
		constexpr auto ArenaTavernPawnClass = 0x198; // APawn*
		constexpr auto ContestUIDescriptions = 0x1a0; // FContestUIDescriptions
		constexpr auto LeaderboardMessagesInOrder = 0x220; // TArray<FText>
		constexpr auto StagingNotificationFrequency = 0x230; // float
		constexpr auto ItemsToReset = 0x238; // TArray<UItemCategory*>
		constexpr auto ContestLightingZoneWeightCurve = 0x248; // UCurveFloat*
		constexpr auto ContestForceSinkThreshold = 0x250; // float
		constexpr auto ScoreScroll = 0x258; // UItemDesc*
		constexpr auto NumOfPeriodsRetrievalString = 0x260; // FString
		constexpr auto PeriodEndInMinutesRetrievalStringPrefix = 0x270; // FString
		constexpr auto ConditionalStatForCompletingAContest = 0x280; // UConditionalStatsTriggerType*
		constexpr auto ConditionalStatForCompletingContestWithShip = 0x288; // UConditionalStatsTriggerType*
	}

	namespace n_UStatConditionTargetSelector { // : UObject
		constexpr auto Target = 0x28; // EStatConditionTarget
	}

	namespace n_UBTService_QueryPerceptionForTarget { // : UBTService
		constexpr auto Interval = 0x60; // float
		constexpr auto RandomDeviation = 0x64; // float
		constexpr auto bCallTickOnSearchStart = 0x68; // char : 1
		constexpr auto bRestartTimerOnEachActivation = 0x68; // char : 1
	}

	namespace n_AAlwaysCashInItemInfo { // : ABootyItemInfo
		constexpr auto BootyType = 0x528; // EBootyTypes
		constexpr auto Id = 0x52c; // FGuid
		constexpr auto PlayedFirstTimeEquipSfx = 0x53c; // bool
		constexpr auto HandInPlayerStats = 0x540; // TArray<FPlayerStat>
		constexpr auto HandInStolenPlayerStats = 0x550; // TArray<FPlayerStat>
		constexpr auto HandInStolenFromPlayerStats = 0x560; // TArray<FPlayerStat>
		constexpr auto HandInGiftPlayerStats = 0x570; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendPlayerStats = 0x580; // TArray<FPlayerStat>
		constexpr auto HandInOnSchedulePlayerStats = 0x590; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendOnSchedulePlayerStats = 0x5a0; // TArray<FPlayerStat>
		constexpr auto HandInAsEmissaryPlayerStats = 0x5b0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInAsMaxLevelEmissaryPlayerStats = 0x5c0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsEmissaryPlayerStats = 0x5d0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsMaxLevelEmissaryPlayerStats = 0x5e0; // TArray<FEmissaryBootyItemStats>
		constexpr auto UsePlayerStats = 0x5f0; // TArray<FPlayerStat>
		constexpr auto UseStolenPlayerStats = 0x600; // TArray<FPlayerStat>
		constexpr auto CompanySpecificStats = 0x610; // FCompanyBootyStatList
		constexpr auto ConditionalHandInStat = 0x620; // FConditionalHandInStat
		constexpr auto DiscoveredPopupDesc = 0x640; // UPopUpMessageDesc*
		constexpr auto SellPrerequisites = 0x648; // FBootyItemSellPrerequisites
		constexpr auto TrackedOwnerComponent = 0x658; // UTrackedOwnerComponent*
		constexpr auto ItemQualityComponent = 0x660; // UItemQualityComponent*
		constexpr auto ItemQualityLevel = 0x668; // EEmissaryQualityLevel
		constexpr auto CompanySpecificItemQualityLevel = 0x670; // TArray<FPerComanyItemQualityEntry>
		constexpr auto HandInRewardId = 0x680; // FRewardId
		constexpr auto HandInRewardIdCompanySpecific = 0x688; // TArray<FCompanySpecificBootyReward>
		constexpr auto RewardToOwnCrewOnly = 0x698; // bool
		constexpr auto Rarity = 0x69c; // FName
		constexpr auto DeliverableComponent = 0x6c0; // UDeliverableComponent*
		constexpr auto CrewOwnershipTrackingComponent = 0x6c8; // UCrewOwnershipTrackingComponent*
		constexpr auto BootyItemShipOwnershipComponent = 0x6d0; // UBootyItemShipOwnershipComponent*
		constexpr auto SpawnSource = 0x6d8; // ESpawnedItemSource
	}

	namespace n_UCutSceneSubtitlesExecutableAnimMetaData { // : UAnimMetaData
		constexpr auto SceneDialogueStructure = 0x30; // FSceneDialogueStructure
	}

	namespace n_UBeachNPCSpawnFlowLocationComponent { // : USceneComponent
		constexpr auto SpawnRotation = 0x2d8; // FRotator
	}

	namespace n_UTreasureMapDataAsset { // : UDataAsset
		constexpr auto Texture = 0x28; // UTexture*
		constexpr auto InventoryTexture = 0x48; // UTexture*
		constexpr auto CaptureParams = 0x68; // FTreasureMapDataCaptureParams
	}

	namespace n_UBurrowComponent { // : UActorComponent
		constexpr auto BurrowCrackClass = 0xd0; // ABurrowCrack*
		constexpr auto BurrowEruptClass = 0xd8; // ABurrowEruptBase*
		constexpr auto BurrowFadeoutTime = 0xe0; // float
		constexpr auto BurrowCracks = 0xe8; // TArray<ABurrowCrack*>
		constexpr auto BurrowErupt = 0xf8; // ABurrowEruptBase*
	}

	namespace n_UBlackboardKeyType_String { // : UBlackboardKeyType
		constexpr auto StringValue = 0x30; // FString
	}

	namespace n_ATimeService { // : AActor
		constexpr auto GameWorldTimeOffset = 0x408; // FTimespan
		constexpr auto TimeScalar = 0x414; // uint32_t
		constexpr auto NumberOfDaysInEachGameMonth = 0x418; // uint32_t
		constexpr auto ServiceTimeQueryRapidFrequencyOffsetMax = 0x420; // double
		constexpr auto ServiceTimeQueryRapidFrequencyInSeconds = 0x428; // float
		constexpr auto ServiceTimeQueryFrequencyInSeconds = 0x42c; // float
		constexpr auto ClientTimeUpdateFrequencyInSeconds = 0x430; // float
		constexpr auto SunriseTimeHours = 0x434; // float
		constexpr auto SunsetTimeHours = 0x438; // float
		constexpr auto LocalTimeUpdateAdjustMaxTimeDelta = 0x43c; // float
		constexpr auto MinLocalTimeUpdateAdjustPercentageToSlowDown = 0x440; // float
		constexpr auto MaxLocalTimeUpdateAdjustPercentageToSlowDown = 0x444; // float
		constexpr auto MinLocalTimeUpdateAdjustPercentageToSpeedUp = 0x448; // float
		constexpr auto MaxLocalTimeUpdateAdjustPercentageToSpeedUp = 0x44c; // float
		constexpr auto MaxNumReplicatedTimeEntriesToAverage = 0x450; // uint32_t
		constexpr auto ReplicatedServerTime = 0x4a0; // FReplicatedAuthoritativeTime
	}

	namespace n_UPetDesc { // : UItemDesc
		constexpr auto PetSpawnParams = 0x130; // UPetSpawnParamsDataAsset*
		constexpr auto PreviewPetClass = 0x138; // APreviewPet*
	}

	namespace n_UAudioSpaceComponent { // : UStaticMeshComponent
		constexpr auto AudioSpace = 0x5f0; // UAudioSpaceDataAsset*
	}

	namespace n_UShipBuilder { // : UObject
		constexpr auto Template = 0x58; // AShip*
	}

	namespace n_UAbilityTask_MoveToLocation { // : UAbilityTask
		constexpr auto OnTargetLocationReached = 0x68; // FScriptMulticastDelegate
		constexpr auto StartLocation = 0x7c; // FVector
		constexpr auto TargetLocation = 0x88; // FVector
		constexpr auto DurationOfMovement = 0x94; // float
		constexpr auto LerpCurve = 0xa0; // UCurveFloat*
		constexpr auto LerpCurveVector = 0xa8; // UCurveVector*
	}

	namespace n_UBTDecorator_TagCooldown { // : UBTDecorator
		constexpr auto CooldownTag = 0x68; // FGameplayTag
		constexpr auto CoolDownDuration = 0x70; // float
		constexpr auto bAddToExistingDuration = 0x74; // bool
		constexpr auto bActivatesCooldown = 0x75; // bool
	}

	namespace n_UStatusResponsePlayAudioOneShotOnLocalClient { // : UStatusResponse
		constexpr auto OneShotAudioEvent = 0x30; // UWwiseEvent*
	}

	namespace n_URewardDefinitionAsset { // : UDataAsset
		constexpr auto RewardDefinitions = 0x28; // TArray<FRewardDefinition>
	}

	namespace n_UInterpGroupInst { // : UObject
		constexpr auto Group = 0x28; // UInterpGroup*
		constexpr auto GroupActor = 0x30; // AActor*
		constexpr auto TrackInst = 0x38; // TArray<UInterpTrackInst*>
	}

	namespace n_UAshenLordEncounterParams { // : UGameEventParams
		constexpr auto AshenLordSpawner = 0x38; // UAISpawner*
		constexpr auto AshenLordBaseClass = 0x40; // UClass*
		constexpr auto AshenLordDioramaDesc = 0x60; // UAIDioramaDesc*
		constexpr auto AshenLordMusicZones = 0x68; // TArray<AActor*>
		constexpr auto DelayFromPlayerSpottedToRitualEnd = 0x78; // float
		constexpr auto AshenLordSpawnerProximityPlayerTrackerDistanceScalar = 0x7c; // float
		constexpr auto AllAshenLordDescs = 0x80; // TArray<UAshenLordDesc*>
		constexpr auto EventSignalClass = 0x90; // UClass*
		constexpr auto EventSignalHeightOffset = 0xb0; // float
		constexpr auto SightingEncounterParams = 0xb4; // FEncounterParams
		constexpr auto CloseEncounterParams = 0xc0; // FEncounterParams
		constexpr auto RewardsGeyserManagerParams = 0xd0; // UGeyserManagerSetupDataAsset*
		constexpr auto RewardLocationEnvironmentQuery = 0xd8; // UEnvQuery*
		constexpr auto MinDistanceBetweenRewardLocations = 0xe0; // float
		constexpr auto FallbackEncounterCompletionDurationSeconds = 0xe4; // float
	}

	namespace n_UParticleModuleAccelerationDrag { // : UParticleModuleAccelerationBase
		constexpr auto DragCoefficient = 0x58; // UDistributionFloat*
		constexpr auto DragOnLocalVelocity = 0x60; // UDistributionFloat*
		constexpr auto bUseGroupADragCoefficientForAllGroups = 0x68; // char : 1
		constexpr auto AdditionalDragCoefficient = 0x70; // UDistributionFloat* [0x5]
		constexpr auto bUseGroupADragOnLocalVelocityForAllGroups = 0x98; // char : 1
		constexpr auto AdditionalDragOnLocalVelocity = 0xa0; // UDistributionFloat* [0x5]
	}

	namespace n_UHasRequiredCookingStateStatCondition { // : UTargetedStatCondition
		constexpr auto RequiredState = 0x30; // ECookingState
	}

	namespace n_ATestGameModeWithServiceProviderGameState { // : AGameMode
		constexpr auto bDisableAsyncOcclusionChecking = 0x3d8; // char : 1
		constexpr auto bUseSeamlessTravel = 0x3d8; // char : 1
		constexpr auto bPauseable = 0x3d8; // char : 1
		constexpr auto bStartPlayersAsSpectators = 0x3d8; // char : 1
		constexpr auto bDelayedStart = 0x3d8; // char : 1
		constexpr auto OptionsString = 0x3e0; // FString
		constexpr auto DefaultPawnClass = 0x3f0; // APawn*
		constexpr auto HUDClass = 0x3f8; // AHUD*
		constexpr auto NumSpectators = 0x400; // int32_t
		constexpr auto NumPlayers = 0x404; // int32_t
		constexpr auto NumBots = 0x408; // int32_t
		constexpr auto MinRespawnDelay = 0x40c; // float
		constexpr auto GameSession = 0x410; // AGameSession*
		constexpr auto NumTravellingPlayers = 0x418; // int32_t
		constexpr auto DefaultPlayerName = 0x420; // FText
		constexpr auto EngineMessageClass = 0x458; // ULocalMessage*
		constexpr auto PlayerControllerClass = 0x460; // APlayerController*
		constexpr auto SpectatorClass = 0x468; // ASpectatorPawn*
		constexpr auto ReplaySpectatorPlayerControllerClass = 0x470; // APlayerController*
		constexpr auto PlayerStateClass = 0x478; // APlayerState*
		constexpr auto GameStateClass = 0x480; // AGameState*
		constexpr auto GameState = 0x488; // AGameState*
		constexpr auto InactivePlayerArray = 0x490; // TArray<APlayerState*>
		constexpr auto GameModeClassAliases = 0x4b0; // TArray<FGameClassShortName>
		constexpr auto InactivePlayerStateLifeSpan = 0x4c0; // float
		constexpr auto bHandleDedicatedServerReplays = 0x4c4; // bool
	}

	namespace n_UTaleQuestStartTinySharkExperienceStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_USeasonProgressionExclusionComponent { // : UActorComponent
		constexpr auto ShouldBeExcludedFromSeasonProgessionValue = 0xd0; // bool
	}

	namespace n_AEmissaryFlotsamItemInfo { // : ABootyItemInfo
		constexpr auto HandInOwnFlotsamReward = 0x708; // FCompanySpecificBootyReward
	}

	namespace n_USetHiddenOnKeyTakenStepDesc { // : UTaleQuestStepDesc
		constexpr auto CutsceneLockNPC = 0x80; // FQuestVariableActor
		constexpr auto SequencerCutSceneActor = 0x90; // FQuestVariableActor
		constexpr auto LevelSequence = 0xa0; // ULevelSequence*
		constexpr auto ActorName = 0xa8; // FString
		constexpr auto Visible = 0xb8; // bool
	}

	namespace n_AMegalodonSummonZone { // : AActor
		constexpr auto MegType = 0x3f8; // ETinySharkTypes
		constexpr auto SummonRadius = 0x3fc; // float
		constexpr auto UpdateFrequency = 0x400; // float
	}

	namespace n_UAthenaAIFormDataAsset { // : UDataAsset
		constexpr auto PreventHealthChangedReasons = 0x28; // TArray<EHealthChangedReason>
		constexpr auto DamageResponses = 0x38; // TArray<FAIFormDamageResponse>
		constexpr auto OverrideStatusRecipientResponseList = 0x48; // UStatusRecipientResponseList*
		constexpr auto SurfaceMaterial = 0x50; // UPhysicalMaterial*
		constexpr auto KilledVfxTemplate = 0x58; // UObject*
		constexpr auto AICharacterAudioComponent = 0x60; // UAICharacterAudioComponent*
		constexpr auto AnimNotifyEmitterWithObservers = 0x68; // UAnimNotifyWwiseEmitterComponent*
		constexpr auto HighPriorityFootstepAudio = 0x70; // bool
		constexpr auto MovementSpeedMultipler = 0x74; // float
		constexpr auto StatToFireOnDeath = 0x78; // FPlayerStat
		constexpr auto FeatureName = 0x7c; // FName
		constexpr auto FormComponentClass = 0x88; // UAthenaAIFormComponent*
	}

	namespace n_ATestPlayerRelevancyAthenaPlayerController { // : AAthenaPlayerController
		constexpr auto OnQueryRelevancyCallback = 0x1488; // FScriptMulticastDelegate
	}

	namespace n_UServerMigrationSerialisationDetailsTestsTArrayProperty { // : UObject
		constexpr auto IntegerArrayWithMigrationMarkup = 0x28; // TArray<int32_t>
	}

	namespace n_UMaterialExpressionSceneTexelSize { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UOverlay { // : UPanelWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_AWieldableWeaponMock { // : AStaticMeshWieldableItem
		constexpr auto InventoryItem = 0x790; // UInventoryItemComponent*
	}

	namespace n_ACabinDoor { // : ASwingDoor
		constexpr auto LockComponent = 0x4f0; // ULockComponent*
		constexpr auto OpenDoorAudioSting = 0x4f8; // UWwiseEvent*
		constexpr auto SwingDoorAudioParams = 0x500; // USwingDoorAudioParams*
		constexpr auto ServerDoorState = 0x528; // ESwingDoorState
	}

	namespace n_UAthenaAIControllerSharedParamValuesDataAsset { // : UDataAsset
		constexpr auto OverrideMeshScale = 0x28; // bool
		constexpr auto MeshScale = 0x2c; // float
		constexpr auto OverrideCurrentTargetPerceivedNotVisibleAge = 0x30; // bool
		constexpr auto CurrentTargetPerceivedNotVisibleAge = 0x34; // float
		constexpr auto AIStrategySenseSettingOverrides = 0x38; // TArray<FAthenaAIControllerSenseSettingOverride>
		constexpr auto HealthCustomisationValues = 0x48; // FAthenaAIControllerHealthCustomisation
		constexpr auto InitialBlackboardValues = 0x58; // TArray<FAthenaAIControllerParamValue>
		constexpr auto NamedControllerParams = 0x68; // TArray<FAthenaAIControllerParamValue>
		constexpr auto NamedWeightedRangesControllerParams = 0x78; // TArray<FAthenaAIControllerWeightedRangesParamValue>
	}

	namespace n_UCostumeDesc { // : UClothingDesc
		constexpr auto CrewCostume = 0xe0; // bool
	}

	namespace n_UFloatBinding { // : UPropertyBinding
		constexpr auto SourceObject = 0x28; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x30; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x40; // FName
	}

	namespace n_UCharacterAudioEventControllerParams { // : UDataAsset
		constexpr auto WieldEvent = 0x28; // UWwiseEvent*
		constexpr auto StowEvent = 0x30; // UWwiseEvent*
		constexpr auto EnemyHitNotifyEvent = 0x38; // UWwiseEvent*
		constexpr auto EnemyHitNotifyPool = 0x40; // UWwiseObjectPoolWrapper*
	}

	namespace n_UPremiumShopViewModelComponentBase { // : UActorComponent
		constexpr auto PetShopDataAsset = 0x270; // UPetShopDataAsset*
	}

	namespace n_UWieldableInteractableComponent { // : UActionRulesInteractableComponent
		constexpr auto WieldableItem = 0x120; // AWieldableItem*
	}

	namespace n_USkinnedMeshComponent { // : UMeshComponent
		constexpr auto SkeletalMesh = 0x598; // USkeletalMesh*
		constexpr auto MasterPoseComponent = 0x5a0; // TWeakObjectPtr<USkinnedMeshComponent>
		constexpr auto CustomDepthMaterial = 0x5e8; // UMaterialInterface*
		constexpr auto bUseBoundsFromMasterPoseComponent = 0x600; // char : 1
		constexpr auto ActiveVertexAnims = 0x608; // TArray<FActiveVertexAnim>
		constexpr auto PhysicsAssetOverride = 0x618; // UPhysicsAsset*
		constexpr auto ForcedLodModel = 0x620; // int32_t
		constexpr auto MinLodModel = 0x624; // int32_t
		constexpr auto PredictedLODLevel = 0x628; // int32_t
		constexpr auto OldPredictedLODLevel = 0x62c; // int32_t
		constexpr auto MaxDistanceFactor = 0x630; // float
		constexpr auto LODInfo = 0x638; // TArray<FSkelMeshComponentLODInfo>
		constexpr auto StreamingDistanceMultiplier = 0x648; // float
		constexpr auto WireframeColor = 0x64c; // FColor
		constexpr auto bForceWireframe = 0x650; // char : 1
		constexpr auto bDisplayBones = 0x650; // char : 1
		constexpr auto bDisplayBoneCollisions = 0x650; // char : 1
		constexpr auto bDisableMorphTarget = 0x650; // char : 1
		constexpr auto bHideSkin = 0x650; // char : 1
		constexpr auto bPerBoneMotionBlur = 0x668; // char : 1
		constexpr auto bComponentUseFixedSkelBounds = 0x668; // char : 1
		constexpr auto bConsiderAllBodiesForBounds = 0x668; // char : 1
		constexpr auto MeshComponentUpdateFlag = 0x66c; // EMeshComponentUpdateFlag
		constexpr auto bForceMeshObjectUpdate = 0x670; // char : 1
		constexpr auto bChartDistanceFactor = 0x670; // char : 1
		constexpr auto bCanHighlightSelectedSections = 0x670; // char : 1
		constexpr auto bRecentlyRendered = 0x670; // char : 1
		constexpr auto ProgressiveDrawingFraction = 0x674; // float
		constexpr auto CustomSortAlternateIndexMode = 0x678; // char
		constexpr auto CachedLocalBounds = 0x68c; // FBoxSphereBounds
		constexpr auto bCachedLocalBoundsUpToDate = 0x6a8; // bool
		constexpr auto bEnableUpdateRateOptimizations = 0x6a9; // bool
		constexpr auto bDisplayDebugUpdateRateOptimizations = 0x6aa; // bool
	}

	namespace n_ABaseToggleAnimatedMechanismAction { // : AAnimatedMechanismAction
		constexpr auto Root = 0x528; // USceneComponent*
		constexpr auto Pivot = 0x530; // USceneComponent*
		constexpr auto AudioEmitterPool = 0x538; // UWwiseObjectPoolWrapper*
		constexpr auto AnimationEvents = 0x550; // TArray<FMechanismAnimationEventContainer>
	}

	namespace n_UPlayerGeneratedMapsContainerComponent { // : UActorComponent
		constexpr auto ContainerDisplayName = 0xd0; // FText
		constexpr auto InstanceTransform = 0x110; // FTransform
		constexpr auto MapDesc = 0x140; // UItemDesc*
		constexpr auto ContainerDataAsset = 0x148; // UPlayerGeneratedMapsContainerComponentDataAsset*
		constexpr auto PlayerMapInventory = 0x150; // TArray<FPlayerGeneratedMapDisplayData>
		constexpr auto StoreMapInventory = 0x160; // TArray<FPlayerGeneratedMapDisplayData>
		constexpr auto AddMapSFX = 0x170; // UWwiseEvent*
		constexpr auto TakeMapSFX = 0x178; // UWwiseEvent*
		constexpr auto OpenContainerSFX = 0x180; // UWwiseEvent*
		constexpr auto MaxNumStoreMapsToReplicate = 0x188; // int32_t
		constexpr auto MaxNumPlayerMapsToReplicate = 0x18c; // int32_t
		constexpr auto DailyMapLimit = 0x190; // int32_t
		constexpr auto MapTakenBackgroundImage = 0x198; // FStringAssetReference
		constexpr auto MapTakenImages = 0x1a8; // TArray<FStringAssetReference>
		constexpr auto ServerAttachedPlayers = 0x1b8; // TArray<AActor*>
		constexpr auto SfxPool = 0x1c8; // UWwiseObjectPoolWrapper*
	}

	namespace n_UMeleeSpinAIAbility { // : UAthenaAIAbility
		constexpr auto AngleChecker = 0x78; // FMeleeAIAbilityAngleChecker
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigrationChildActorLinkedActor { // : AActor
		constexpr auto Component = 0x3d0; // UChildActorComponent*
	}

	namespace n_UBTTask_AttachToHangout { // : UBTTask_BlackboardBase
		constexpr auto TaskDuration = 0x88; // float
	}

	namespace n_UAIEncounterSettingsRankProgression { // : UAIEncounterSettings
		constexpr auto SkillsetProgression = 0x60; // FStringAssetReference
		constexpr auto LoadoutProgression = 0x70; // FStringAssetReference
		constexpr auto FormProgression = 0x80; // FStringAssetReference
		constexpr auto AmmoProgression = 0x90; // FStringAssetReference
		constexpr auto ItemDropComponentProgression = 0xa0; // FStringAssetReference
		constexpr auto EncounterTrackingParams = 0xb0; // FEncounterParams
	}

	namespace n_ACloudDome { // : AActor
		constexpr auto LocalPlayer = 0x480; // ULocalPlayer*
	}

	namespace n_UMaterialInformationService { // : UObject
		constexpr auto MaterialTranslationTable = 0x30; // UDataTable*
		constexpr auto MaterialAudioTable = 0x38; // UDataTable*
		constexpr auto MaterialVFXTable = 0x40; // UDataTable*
	}

	namespace n_UTaleQuestCommonToolService { // : UTaleQuestToolService
		constexpr auto ServiceDesc = 0x60; // UTaleQuestToolServiceDesc*
		constexpr auto WieldableDescs = 0x68; // TArray<UItemDesc*>
	}

	namespace n_ASimpleBootyWieldableItem { // : ALargeSkeletalMeshWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_USoundNodeMature { // : USoundNode
		constexpr auto ChildNodes = 0x28; // TArray<USoundNode*>
	}

	namespace n_AAthenaCalmWaterZone { // : ACalmWaterZone
		constexpr auto CalmWaterComponent = 0x3d0; // UCalmWaterComponent*
	}

	namespace n_UComboButtonWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto ComboButtonStyle = 0x30; // FComboButtonStyle
	}

	namespace n_UThrowableCannonballItemCategory_C { // : UCursedCannonballItemCategory_C
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UViewport { // : UContentWidget
		constexpr auto BackgroundColor = 0x150; // FLinearColor
	}

	namespace n_UNPCDialogPredicateIsWearingAny { // : UNPCDialogPredicate
		constexpr auto ClothingItems = 0x38; // TArray<UClothingDesc*>
	}

	namespace n_UMovieScenePropertyTrack { // : UMovieSceneNameableTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UCameraYawModifier { // : UCameraModifier
		constexpr auto bDebug = 0x28; // char : 1
		constexpr auto bExclusive = 0x28; // char : 1
		constexpr auto Priority = 0x2c; // char
		constexpr auto CameraOwner = 0x30; // APlayerCameraManager*
		constexpr auto AlphaInTime = 0x38; // float
		constexpr auto AlphaOutTime = 0x3c; // float
		constexpr auto Alpha = 0x40; // float
	}

	namespace n_UAISpawnerMusicZoneComponent { // : UMusicZoneComponent
		constexpr auto BattleWonEvent = 0x370; // UWwiseEvent*
		constexpr auto AISpawner = 0x378; // UAISpawner*
		constexpr auto SpawnerPawns = 0x380; // TArray<APawn*>
		constexpr auto SpawnerState = 0x390; // EAISpawnerMusicZoneState
	}

	namespace n_ULandscapeSplinesComponent { // : UPrimitiveComponent
		constexpr auto ControlPoints = 0x588; // TArray<ULandscapeSplineControlPoint*>
		constexpr auto Segments = 0x598; // TArray<ULandscapeSplineSegment*>
		constexpr auto CookedForeignMeshComponents = 0x5a8; // TArray<UMeshComponent*>
	}

	namespace n_UAISpawnContextContainerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UWaitForNPCOnSurfaceToSpawnStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UWaitForNPCOnSurfaceToSpawnStepDesc*
		constexpr auto SelectedManager = 0x98; // UNPCOnSurfaceManager*
	}

	namespace n_UEntitlementMapDataAsset { // : UDataAsset
		constexpr auto Entitlements = 0x28; // TArray<FEntitlementMapEntry>
		constexpr auto EntitlementAssets = 0x38; // TArray<UEntitlementMapDataAsset*>
	}

	namespace n_UParticleModuleRotation { // : UParticleModuleRotationBase
		constexpr auto bUseGroupARotationForAllGroups = 0x50; // char : 1
		constexpr auto StartRotation = 0x58; // FRawDistributionFloat
		constexpr auto AdditionalStartRotation = 0x90; // FRawDistributionFloat [0x5]
	}

	namespace n_UWaterExposureComponent { // : UActorComponent
		constexpr auto RainZoneThreshold = 0xc8; // float
		constexpr auto FullySubmergedOffset = 0xcc; // FVector
		constexpr auto PartiallySubmergedOffset = 0xd8; // FVector
		constexpr auto SubmergedStatus = 0xe8; // FStatus
		constexpr auto RainStatus = 0x100; // FStatus
		constexpr auto FeatureFlag = 0x118; // FName
		constexpr auto InRain = 0x120; // bool
		constexpr auto SubmergedState = 0x121; // ESubmergedState
	}

	namespace n_UVerticalBox { // : UPanelWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_APetChestInteraction { // : APossessionsChestInteraction
		constexpr auto Categories = 0x448; // TArray<FFeaturedPetCategory>
		constexpr auto AllTab = 0x458; // bool
		constexpr auto OriginalLoadout = 0x638; // FPetLoadout
		constexpr auto Loadout = 0x650; // FPetLoadout
	}

	namespace n_UNonVerbalRadialContentRule { // : URadialContentRule
		constexpr auto PrimaryActionSlot = 0x78; // URadialAction*
		constexpr auto SecondaryActionSlot = 0x80; // URadialAction*
		constexpr auto TertiaryActionSlot = 0x88; // URadialAction*
		constexpr auto QuaternaryActionSlot = 0x90; // URadialAction*
		constexpr auto RadialTextScale = 0x9c; // float
		constexpr auto RadialTextOffset = 0xa0; // FVector2D
	}

	namespace n_UHasEntitlementStatCondition { // : UStatCondition
		constexpr auto RequiredNumberToMatch = 0x28; // int32_t
		constexpr auto RequiredEntitlements = 0x30; // TArray<UEntitlementDesc*>
	}

	namespace n_UStartAggressiveGhostShipEncounterStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UStartAggressiveGhostShipEncounterStepDesc*
		constexpr auto EncounterIslandOverlapTrigger = 0x98; // AOverlapTriggerActor*
	}

	namespace n_UBTTask_BroadcastOceanCrawlerAbilityAudioEvent { // : UBTTaskNode
		constexpr auto OceanCrawlerAudioKeyToBroadcast = 0x60; // EOceanCrawlerAbilityAudioKey
	}

	namespace n_UEmissaryVoyageInlineVoteConsumerBase { // : UVoteConsumerInlineBase
		constexpr auto Validator = 0x30; // UEmissaryVoyageVoteValidatorBase*
		constexpr auto VoyageCinematicHeader = 0x80; // FText
		constexpr auto VoyageCinematicTag = 0xb8; // FName
		constexpr auto Votes = 0xe0; // TArray<FCrewMemberVotes>
		constexpr auto RpcDispatcher = 0xf0; // UBoxedRpcDispatcherComponent*
		constexpr auto OwningActor = 0x118; // AActor*
	}

	namespace n_ATutorialMap { // : ATreasureMap
		constexpr auto WieldableCanvasRenderingComponent = 0x7a0; // UWieldableItemCanvasRenderingComponent*
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7b0; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x7b8; // UUsableWieldableComponent*
		constexpr auto QuestMapIcon = 0x7d2; // EQuestMapIcon
	}

	namespace n_ALODActor { // : AActor
		constexpr auto StaticMeshComponent = 0x3d0; // UStaticMeshComponent*
		constexpr auto SubActors = 0x3d8; // TArray<AActor*>
		constexpr auto LODDrawDistance = 0x3e8; // float
		constexpr auto LodLevel = 0x3ec; // int32_t
		constexpr auto SubObjects = 0x3f0; // TArray<UObject*>
	}

	namespace n_UReviveEffectsDataAsset { // : UDataAsset
		constexpr auto ReviveMaterialParameterCollection = 0x28; // UMaterialParameterCollection*
		constexpr auto AstralCordReviveInProgressMaterialCollectionScalarParameterName = 0x30; // FName
		constexpr auto AstralCordFadeMaterialCollectionScalarParameterName = 0x38; // FName
		constexpr auto AstralCordBorderMaterialCollectionScalarParameterName = 0x40; // FName
		constexpr auto AstralCordBorderParamValueByAbsoluteTimeSinceDeath = 0x48; // UCurveFloat*
		constexpr auto ReviveePostProcessMaterial = 0x50; // UMaterial*
		constexpr auto GhostShaderGhostEffectInterpolationValue = 0x58; // float
		constexpr auto ReviveSuccessfulEffectDuration = 0x5c; // float
		constexpr auto ReviveSuccessfulOneShotVFX = 0x60; // UObject*
		constexpr auto ReviveSuccessfulOneShotVFX_Revivee = 0x68; // UObject*
		constexpr auto ReviveInProgressLoopingVFX = 0x70; // UObject*
		constexpr auto AstralCordReviveInProgressInterpolationSpeed = 0x78; // float
		constexpr auto AstralCordReviveNotInProgressInterpolationSpeed = 0x7c; // float
		constexpr auto ContinuousBodyLoopingVFX = 0x80; // UObject*
		constexpr auto AstralCordFadeInInterpolationSpeed = 0x88; // float
		constexpr auto AstralCordFadeOutInterpolationSpeed = 0x8c; // float
		constexpr auto DefaultAstralCordHeight = 0x90; // float
		constexpr auto AstralCordHeightOffsetFromTheGhost = 0x94; // float
		constexpr auto DeadPlayerBodyEvaporatesOneShotVFX = 0x98; // UObject*
		constexpr auto OtherPlayers_ReviveGhostAmbientStart = 0xa0; // UWwiseEvent*
		constexpr auto OtherPlayers_ReviveGhostAmbientStop = 0xa8; // UWwiseEvent*
		constexpr auto DeadPlayer_ReviveInProgressStart = 0xb0; // UWwiseEvent*
		constexpr auto DeadPlayer_ReviveInProgressStop = 0xb8; // UWwiseEvent*
		constexpr auto OtherPlayers_ReviveInProgressStart = 0xc0; // UWwiseEvent*
		constexpr auto OtherPlayers_ReviveInProgressStop = 0xc8; // UWwiseEvent*
	}

	namespace n_ASplineMeshActor { // : AActor
		constexpr auto SplineMeshComponent = 0x3d0; // USplineMeshComponent*
	}

	namespace n_URendererSettings { // : UDeveloperSettings
		constexpr auto bMobileHDR = 0x38; // char : 1
		constexpr auto MobileNumDynamicPointLights = 0x3c; // uint32_t
		constexpr auto bMobileDynamicPointLightsUseStaticBranch = 0x40; // char : 1
		constexpr auto bOcclusionCulling = 0x40; // char : 1
		constexpr auto MinScreenRadiusForLights = 0x44; // float
		constexpr auto MinScreenRadiusForEarlyZPass = 0x48; // float
		constexpr auto MinScreenRadiusForCSMdepth = 0x4c; // float
		constexpr auto bPrecomputedVisibilityWarning = 0x50; // char : 1
		constexpr auto bTextureStreaming = 0x50; // char : 1
		constexpr auto bUseDXT5NormalMaps = 0x50; // char : 1
		constexpr auto bAllowStaticLighting = 0x50; // char : 1
		constexpr auto bUseNormalMapsForStaticLighting = 0x50; // char : 1
		constexpr auto bGenerateMeshDistanceFields = 0x50; // char : 1
		constexpr auto bGenerateLandscapeGIData = 0x50; // char : 1
		constexpr auto TessellationAdaptivePixelsPerTriangle = 0x54; // float
		constexpr auto bSeparateTranslucency = 0x58; // char : 1
		constexpr auto TranslucentSortPolicy = 0x5c; // ETranslucentSortPolicy
		constexpr auto TranslucentSortAxis = 0x60; // FVector
		constexpr auto CustomDepthStencil = 0x6c; // ECustomDepthStencil
		constexpr auto bDefaultFeatureBloom = 0x70; // char : 1
		constexpr auto bDefaultFeatureAmbientOcclusion = 0x70; // char : 1
		constexpr auto bDefaultFeatureAmbientOcclusionStaticFraction = 0x70; // char : 1
		constexpr auto bDefaultFeatureAutoExposure = 0x70; // char : 1
		constexpr auto bDefaultFeatureMotionBlur = 0x70; // char : 1
		constexpr auto bDefaultFeatureLensFlare = 0x70; // char : 1
		constexpr auto DefaultFeatureAntiAliasing = 0x74; // EAntiAliasingMethodUI
		constexpr auto EarlyZPass = 0x75; // EEarlyZPass
		constexpr auto bDepthSort = 0x76; // EEarlyZPass
		constexpr auto bEarlyZPassMovable = 0x78; // char : 1
		constexpr auto bDBuffer = 0x78; // char : 1
		constexpr auto ClearSceneMethod = 0x7c; // EClearSceneOptions
		constexpr auto bBasePassOutputsVelocity = 0x80; // char : 1
		constexpr auto WireframeCullThreshold = 0x84; // float
		constexpr auto UIScaleRule = 0x88; // EUIScalingRule
		constexpr auto UIScaleCurve = 0x90; // FRuntimeFloatCurve
	}

	namespace n_UParticleModuleRequired { // : UParticleModule
		constexpr auto bDeactivateGroupA = 0x50; // char : 1
		constexpr auto bDeactivateGroupB = 0x50; // char : 1
		constexpr auto bDeactivateGroupC = 0x50; // char : 1
		constexpr auto bDeactivateGroupD = 0x50; // char : 1
		constexpr auto bDeactivateGroupE = 0x50; // char : 1
		constexpr auto EmitterPriority = 0x54; // EPriorityGroups
		constexpr auto bUseComplexitySystemWhenLooping = 0x58; // char : 1
		constexpr auto SwitchPriority = 0x5c; // EPriorityGroups
		constexpr auto bReplacementGroupIsAdditive = 0x60; // char : 1
		constexpr auto Material = 0x68; // UMaterialInterface*
		constexpr auto EmitterOrigin = 0x70; // FVector
		constexpr auto EmitterOriginUseGroupAForAll = 0x7c; // char : 1
		constexpr auto AdditionalEmitterOrigins = 0x80; // FVector [0x5]
		constexpr auto EmitterRotation = 0xbc; // FRotator
		constexpr auto ScreenAlignment = 0xc8; // EParticleScreenAlignment
		constexpr auto bUseGroupAScreenAlignmentForAllGroups = 0xcc; // char : 1
		constexpr auto AdditionalScreenAlignments = 0xd0; // EParticleScreenAlignment [0x5]
		constexpr auto AlignmentInheritedVelocityScale = 0xd8; // float
		constexpr auto bUseLocalSpace = 0xdc; // char : 1
		constexpr auto bFollowEmitter = 0xdc; // char : 1
		constexpr auto bTrailInGrandParentSpace = 0xdc; // char : 1
		constexpr auto bKillOnDeactivate = 0xdc; // char : 1
		constexpr auto bKillOnCompleted = 0xdc; // char : 1
		constexpr auto SortMode = 0xe0; // EParticleSortMode
		constexpr auto bUseLegacyEmitterTime = 0xe4; // char : 1
		constexpr auto EmitterDuration = 0xe8; // float
		constexpr auto EmitterDurationLow = 0xec; // float
		constexpr auto bEmitterDurationUseRange = 0xf0; // char : 1
		constexpr auto bDurationRecalcEachLoop = 0xf0; // char : 1
		constexpr auto bSeparateLoopTimeForSubUV = 0xf0; // char : 1
		constexpr auto EmitterLoops = 0xf4; // int32_t
		constexpr auto LoopTime = 0xf8; // FRawDistributionFloat
		constexpr auto LoopOffset = 0x130; // FRawDistributionFloat
		constexpr auto LoopTimeForSubUV = 0x168; // FRawDistributionFloat
		constexpr auto LoopBeginTime = 0x1a0; // float
		constexpr auto LoopEndTime = 0x1a4; // float
		constexpr auto SpawnRate = 0x1a8; // FRawDistributionFloat
		constexpr auto ParticleBurstMethod = 0x1e0; // EParticleBurstMethod
		constexpr auto BurstList = 0x1e8; // TArray<FParticleBurst>
		constexpr auto EmitterDelay = 0x1f8; // float
		constexpr auto EmitterDelayLow = 0x1fc; // float
		constexpr auto bEmitterDelayUseRange = 0x200; // char : 1
		constexpr auto bDelayFirstLoopOnly = 0x200; // char : 1
		constexpr auto InterpolationMethod = 0x204; // EParticleSubUVInterpMethod
		constexpr auto SubImages_Horizontal = 0x208; // int32_t
		constexpr auto SubImages_Vertical = 0x20c; // int32_t
		constexpr auto bScaleUV = 0x210; // char : 1
		constexpr auto RandomImageTime = 0x214; // float
		constexpr auto RandomImageChanges = 0x218; // int32_t
		constexpr auto bOverrideSystemMacroUV = 0x21c; // char : 1
		constexpr auto MacroUVPosition = 0x220; // FVector
		constexpr auto MacroUVRadius = 0x22c; // float
		constexpr auto bUseMaxDrawCount = 0x230; // char : 1
		constexpr auto MaxDrawCount = 0x234; // int32_t
		constexpr auto EmitterNormalsMode = 0x238; // EEmitterNormalsMode
		constexpr auto NormalsSphereCenter = 0x23c; // FVector
		constexpr auto NormalsCylinderDirection = 0x248; // FVector
		constexpr auto bOrbitModuleAffectsVelocityAlignment = 0x254; // char : 1
		constexpr auto UVFlippingMode = 0x258; // EParticleUVFlipMode
		constexpr auto CutoutTexture = 0x260; // UTexture2D*
		constexpr auto BoundingMode = 0x268; // ESubUVBoundingVertexCount
		constexpr auto OpacitySourceMode = 0x269; // EOpacitySourceMode
		constexpr auto AlphaThreshold = 0x26c; // float
		constexpr auto SafeMarginSize = 0x270; // float
		constexpr auto NamedMaterialOverrides = 0x278; // TArray<FName>
		constexpr auto bUseDistanceFading = 0x288; // char : 1
		constexpr auto FarStopFade = 0x28c; // float
		constexpr auto FarStartFade = 0x290; // float
		constexpr auto NearStartFade = 0x294; // float
		constexpr auto NearStopFade = 0x298; // float
		constexpr auto ApplyFOVDistanceScaling = 0x29c; // char : 1
		constexpr auto bUseDistanceSizeScale = 0x29c; // char : 1
		constexpr auto FarScaleFactor = 0x2a0; // float
		constexpr auto FarScaleEndDistance = 0x2a4; // float
		constexpr auto FarScaleBeginDistance = 0x2a8; // float
		constexpr auto NearScaleBeginDistance = 0x2ac; // float
		constexpr auto NearScaleEndDistance = 0x2b0; // float
		constexpr auto NearScaleFactor = 0x2b4; // float
	}

	namespace n_UMapMarkRenderResource { // : UMapRenderResource
		constexpr auto MarkTypeId = 0x28; // UMapMarkId*
	}

	namespace n_AReceiverPuzzleStatue { // : APuzzleStatueBase
		constexpr auto CurrentStatueConfiguration = 0x458; // uint8_t
		constexpr auto InitialStatueConfiguration = 0x45a; // char
		constexpr auto ConfigurationPositionPivot = 0x460; // USceneComponent*
		constexpr auto PositionTransitionCurve = 0x468; // UCurveFloat*
		constexpr auto Positions = 0x470; // TArray<FPuzzleStatueConfigurationPosition>
		constexpr auto ReceiverAudioParams = 0x480; // UReceiverPuzzleStatueAudioParamsDataAsset*
	}

	namespace n_AGameState { // : AInfo
		constexpr auto GameModeClass = 0x3d0; // AGameMode*
		constexpr auto AuthorityGameMode = 0x3d8; // AGameMode*
		constexpr auto SpectatorClass = 0x3e0; // ASpectatorPawn*
		constexpr auto MatchState = 0x3e8; // FName
		constexpr auto PreviousMatchState = 0x3f0; // FName
		constexpr auto ElapsedTime = 0x3f8; // int32_t
		constexpr auto PlayerArray = 0x400; // TArray<APlayerState*>
		constexpr auto ReplicatedWorldTimeSeconds = 0x410; // float
		constexpr auto ServerWorldTimeSecondsDelta = 0x414; // float
		constexpr auto ServerWorldTimeSecondsUpdateFrequency = 0x418; // float
	}

	namespace n_UMeshRotatorComponent { // : UActorComponent
		constexpr auto RotationRate = 0xc8; // FRotator
		constexpr auto Meshes = 0xd8; // TArray<UMeshComponent*>
	}

	namespace n_UAnimNotifyState_WwiseSound { // : UAnimNotifyState
		constexpr auto WwiseEvent = 0x28; // UWwiseEvent*
		constexpr auto WwiseEventEnd = 0x30; // UWwiseEvent*
	}

	namespace n_ALantern { // : AStaticMeshWieldableItem
		constexpr auto LightRaisedBlendSpringAccel = 0x7b0; // float
		constexpr auto LightActiveBlendSpringAccel = 0x7b4; // float
		constexpr auto TurnOnSfx = 0x7b8; // UWwiseEvent*
		constexpr auto TurnOffSfx = 0x7c0; // UWwiseEvent*
		constexpr auto FlameTransferSfx = 0x7c8; // UWwiseEvent*
		constexpr auto ThirdPersonLanternDistanceInMetresMultiplier = 0x7d0; // UCurveFloat*
		constexpr auto ThirdPersonLanternTimeOfDayMultiplier = 0x7d8; // UCurveFloat*
		constexpr auto CurrentThirdPersonMultiplier = 0x7e0; // float
		constexpr auto CurrentExternalLightFactor = 0x7e4; // float
		constexpr auto FlameData = 0x7e8; // FFlameData
		constexpr auto InventoryItem = 0x7f0; // UInventoryItemComponent*
		constexpr auto LightOn = 0x840; // bool
		constexpr auto bRaised = 0x841; // bool
		constexpr auto CanApplyFlameOfFate = 0x842; // bool
		constexpr auto NamedNotificationInputComponent = 0x848; // UNamedNotificationInputComponent*
		constexpr auto FlameOfFateLocked = 0x930; // bool
	}

	namespace n_UMaterialExpressionDepthOfFieldFunction { // : UMaterialExpression
		constexpr auto FunctionValue = 0x70; // EDepthOfFieldFunctionValue
		constexpr auto Depth = 0x78; // FExpressionInput
	}

	namespace n_UCoherentUIGTComponent { // : UCoherentUIGTBaseComponent
		constexpr auto URL = 0x310; // FString
		constexpr auto Width = 0x320; // int32_t
		constexpr auto Height = 0x324; // int32_t
		constexpr auto ManualTexture = 0x328; // bool
		constexpr auto ClickThroughAlphaThreshold = 0x32c; // float
		constexpr auto Transparent = 0x330; // bool
	}

	namespace n_USuperheatedWaterSetupDataAsset { // : UDataAsset
		constexpr auto TimeBetweenHealthReduction = 0x28; // float
		constexpr auto MinimumWaterDepthToCauseDamage = 0x2c; // float
		constexpr auto TimeBetweenLargeSurfaceEffects = 0x30; // FWeightedProbabilityRangeOfRanges
		constexpr auto LargeSurfaceEffectMinimumDistanceInMetres = 0x60; // float
		constexpr auto LargeSurfaceEffects = 0x68; // FRandomParticleSystemPicker
		constexpr auto EffectSpawnHeight = 0x78; // float
		constexpr auto MurkStrengthToStartEffects = 0x7c; // float
		constexpr auto TimeBetweenSmallSurfaceEffects = 0x80; // FWeightedProbabilityRangeOfRanges
		constexpr auto NumSmallSurfaceEffects = 0xb0; // FWeightedProbabilityRange
		constexpr auto SmallSurfaceEffects = 0xd0; // FDistanceThrottledRandomParticleSystemPicker
		constexpr auto SmallSurfaceEffectNearbyPlayerRadiusInMetres = 0xe0; // float
		constexpr auto SmallSurfaceEffectOffsetRadiusInMetres = 0xe4; // float
	}

	namespace n_UAnimNotifyCondition_FeatureConfigValidation { // : UAnimNotifyCondition
		constexpr auto Feature = 0x28; // FName
		constexpr auto TriggerWhenDisabled = 0x30; // bool
	}

	namespace n_UWidgetSwitcher { // : UPanelWidget
		constexpr auto ActiveWidgetIndex = 0x150; // int32_t
	}

	namespace n_UUMGSequencePlayer { // : UObject
		constexpr auto Animation = 0x390; // UWidgetAnimation*
	}

	namespace n_USectionFullyExhaustedConditional { // : UNPCDialogConditional
		constexpr auto SectionName = 0x30; // FString
	}

	namespace n_URewindComponent { // : UActorComponent
		constexpr auto AutoRegister = 0xd0; // bool
		constexpr auto CollisionChannel = 0xd1; // ECollisionChannel
		constexpr auto Parameters = 0xd4; // FRewindComponentParameters
		constexpr auto ShouldRegisterToAggregateTick = 0xe8; // bool
	}

	namespace n_UInstigatorTrackerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UPathFollowingComponent { // : UActorComponent
		constexpr auto MovementComp = 0x120; // UNavMovementComponent*
		constexpr auto MyNavData = 0x130; // ANavigationData*
		constexpr auto bUseVisibilityTestsSimplification = 0x1f4; // char : 1
	}

	namespace n_UInterpCurveEdSetup { // : UObject
		constexpr auto Tabs = 0x28; // TArray<FCurveEdTab>
		constexpr auto ActiveTab = 0x38; // int32_t
	}

	namespace n_UMastRepairableComponent { // : URepairableComponent
		constexpr auto OnRepairableStateChanged = 0x130; // FScriptMulticastDelegate
		constexpr auto OnDamageLevelChanged = 0x140; // FScriptMulticastDelegate
		constexpr auto OnRepairMounted = 0x150; // FScriptMulticastDelegate
		constexpr auto InteractionPointDepthOffset = 0x160; // float
		constexpr auto MaximumRepairAngleToRepairer = 0x164; // float
		constexpr auto MaximumRepairDistance = 0x168; // float
		constexpr auto RepairTime = 0x16c; // float
		constexpr auto RepairType = 0x170; // URepairTypeId*
		constexpr auto RepairMountParent = 0x178; // USceneComponent*
		constexpr auto RepairMountOffset = 0x180; // FTransform
		constexpr auto RepairMountSocket = 0x1b0; // FName
		constexpr auto MaxDamageLevel = 0x1b8; // int32_t
		constexpr auto AIInteractionType = 0x1c0; // UAIInteractableType*
		constexpr auto AIInteractionOffset = 0x1c8; // FVector
		constexpr auto AuthorityRepairableState = 0x1d8; // FRepairableAuthoritiveRepairState
		constexpr auto RepairableState = 0x1f0; // ERepairableState
		constexpr auto DamageLevel = 0x1f4; // int32_t
		constexpr auto InteractionState = 0x1f8; // EInteractableState
	}

	namespace n_UHealthGemComponent { // : UActorComponent
		constexpr auto OverridenMaterials = 0x1e0; // TArray<UMaterialInstanceDynamic*>
		constexpr auto EmissiveMaterialParameterName = 0x1f0; // FName
		constexpr auto BuildMaterialMapOnBeginPlay = 0x1f8; // bool
	}

	namespace n_URainZoneService { // : UObject
		constexpr auto RegisteredRainZones = 0x30; // TArray<TScriptInterface<Class>>
	}

	namespace n_UTaleVaultService { // : UTaleQuestService
		constexpr auto Vault = 0x60; // APuzzleVault*
		constexpr auto SolutionAsset = 0x68; // UVaultPuzzleDataAsset*
	}

	namespace n_AWieldableIngestible { // : AWieldableItem
		constexpr auto GiveItemUponConsumptionComponent = 0x798; // UGiveItemUponConsumptionComponent*
		constexpr auto ApplyStatusToConsumerComponent = 0x7a0; // UApplyStatusToConsumerComponent*
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7b0; // UNamedNotificationInputComponent*
		constexpr auto FeedableComponent = 0x7b8; // UFeedableComponent*
		constexpr auto InToIngestionDuration = 0x7c0; // float
		constexpr auto OutOfIngestionDuration = 0x7c4; // float
		constexpr auto CanIngest = 0x7c8; // bool
		constexpr auto IngestAudioEvent = 0x7d0; // UWwiseEvent*
		constexpr auto IngestAudioFoodType = 0x7d8; // FName
		constexpr auto IngestionStat = 0x7e0; // FPlayerStat
		constexpr auto IngestionShipStat = 0x7e4; // FPlayerStat
	}

	namespace n_UArenaWorldMarkerOnProxyComponent { // : UActorComponent
		constexpr auto MarkerVariant = 0xc8; // UWorldMarkerVariant*
	}

	namespace n_UCrewSpawnLocationVariablesListAsset { // : UDataAsset
		constexpr auto MinimumSafeShipDistance = 0x28; // float
		constexpr auto MaximumSafeShipDistance = 0x2c; // float
		constexpr auto SafeShipDistanceScore = 0x30; // float
		constexpr auto SpawnIsNotOccupiedPenalty = 0x34; // float
		constexpr auto PenaltyResourceIsland = 0x38; // int32_t
		constexpr auto PenaltyOutpostIsland = 0x3c; // int32_t
		constexpr auto PenaltySmallIsland = 0x40; // int32_t
		constexpr auto PenaltyMediumIsland = 0x44; // int32_t
		constexpr auto PenaltyLargeIsland = 0x48; // int32_t
		constexpr auto PenaltyFort = 0x4c; // int32_t
		constexpr auto PenaltySeaPost = 0x50; // int32_t
		constexpr auto PenaltyFortOfTheDamned = 0x54; // int32_t
	}

	namespace n_UGameplayAbility_CharacterJump { // : UGameplayAbility
		constexpr auto AbilityTags = 0x68; // FGameplayTagContainer
		constexpr auto bReplicateInputDirectly = 0xa8; // bool
		constexpr auto ReplicationPolicy = 0xd0; // EGameplayAbilityReplicationPolicy
		constexpr auto InstancingPolicy = 0xd1; // EGameplayAbilityInstancingPolicy
		constexpr auto bServerRespectsRemoteAbilityCancellation = 0xd2; // bool
		constexpr auto bRetriggerInstancedAbility = 0xd3; // bool
		constexpr auto CurrentActivationInfo = 0xd8; // FGameplayAbilityActivationInfo
		constexpr auto CurrentEventData = 0xf8; // FGameplayEventData
		constexpr auto NetExecutionPolicy = 0x198; // EGameplayAbilityNetExecutionPolicy
		constexpr auto CostGameplayEffectClass = 0x1a0; // UGameplayEffect*
		constexpr auto CostGameplayEffect = 0x1a8; // UGameplayEffect*
		constexpr auto AbilityTriggers = 0x1b0; // TArray<FAbilityTriggerData>
		constexpr auto CooldownGameplayEffectClass = 0x1c0; // UGameplayEffect*
		constexpr auto CooldownGameplayEffect = 0x1c8; // UGameplayEffect*
		constexpr auto CancelAbilitiesMatchingTagQuery = 0x1d0; // FGameplayTagQuery
		constexpr auto ConstTagQuery = 0x218; // FGameplayTagQuery
		constexpr auto CancelAbilitiesWithTag = 0x260; // FGameplayTagContainer
		constexpr auto BlockAbilitiesWithTag = 0x288; // FGameplayTagContainer
		constexpr auto ActivationOwnedTags = 0x2b0; // FGameplayTagContainer
		constexpr auto ActivationRequiredTags = 0x2d8; // FGameplayTagContainer
		constexpr auto ActivationBlockedTags = 0x300; // FGameplayTagContainer
		constexpr auto SourceRequiredTags = 0x328; // FGameplayTagContainer
		constexpr auto SourceBlockedTags = 0x350; // FGameplayTagContainer
		constexpr auto TargetRequiredTags = 0x378; // FGameplayTagContainer
		constexpr auto TargetBlockedTags = 0x3a0; // FGameplayTagContainer
		constexpr auto CurrentMontage = 0x438; // UAnimMontage*
		constexpr auto bIsActive = 0x440; // bool
		constexpr auto bIsCancelable = 0x441; // bool
		constexpr auto bIsBlockingOtherAbilities = 0x442; // bool
	}

	namespace n_UIntentBasedMechanismTriggerComponent { // : UMechanismTriggerComponent
		constexpr auto IntentComponent = 0x158; // TScriptInterface<Class>
	}

	namespace n_UFlamesOfFateSettingsAsset { // : UDataAsset
		constexpr auto FlameInfo = 0x28; // TArray<FFlamesOfFateFlameInfo>
		constexpr auto ShipInfo = 0x38; // TArray<FFlamesOfFateShipInfo>
		constexpr auto SailWithFlamesAboardFlameTypesToIgnore = 0x48; // TArray<EFlameOfFateType>
		constexpr auto SailWithFlamesAboardStatDataArray = 0x58; // TArray<FSailWithFlameOfFateColoursAboardStatData>
	}

	namespace n_UMovieSceneFadeTrack { // : UMovieSceneFloatTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_UKrakenShipWrappingTentacleAIAudioComponent { // : UAICharacterAudioComponent
		constexpr auto Params = 0x2e0; // UKrakenShipWrappingTentacleAIAudioComponentParams*
		constexpr auto KrakenTentacleEmitter = 0x2e8; // FWwiseEmitter
	}

	namespace n_UAnimCompositeBase { // : UAnimSequenceBase
		constexpr auto Notifies = 0x50; // TArray<FAnimNotifyEvent>
		constexpr auto SequenceLength = 0x60; // float
		constexpr auto RateScale = 0x64; // float
		constexpr auto RawCurveData = 0x68; // FRawCurveTracks
	}

	namespace n_UAIColorVariantPool { // : UDataAsset
		constexpr auto AvailableColors = 0x28; // TArray<FStringAssetReference>
	}

	namespace n_AInstancedFoliageActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_AStormEffectsExclusionTriggerVolume { // : AActor
		constexpr auto TriggerVolume = 0x3d0; // UCapsuleComponent*
	}

	namespace n_UWaterModifierZoneService { // : UObject
		constexpr auto RegisteredWaterModifierZones = 0x30; // TArray<TScriptInterface<Class>>
	}

	namespace n_UAIItemDropComponentList { // : UDataAsset
		constexpr auto AllSpawners = 0x28; // TArray<UClass*>
	}

	namespace n_UAnimationSettings { // : UDeveloperSettings
		constexpr auto DefaultVisibleDistanceFactorThresholds = 0x38; // TArray<float>
		constexpr auto CompressCommandletVersion = 0x48; // int32_t
		constexpr auto KeyEndEffectorsMatchNameArray = 0x50; // TArray<FString>
		constexpr auto DefaultCompressionAlgorithm = 0x60; // UAnimCompress*
		constexpr auto RotationCompressionFormat = 0x68; // AnimationCompressionFormat
		constexpr auto TranslationCompressionFormat = 0x69; // AnimationCompressionFormat
		constexpr auto AlternativeCompressionThreshold = 0x6c; // float
		constexpr auto ForceRecompression = 0x70; // bool
		constexpr auto bOnlyCheckForMissingSkeletalMeshes = 0x71; // bool
		constexpr auto bForceBelowThreshold = 0x72; // bool
		constexpr auto bFirstRecompressUsingCurrentOrDefault = 0x73; // bool
		constexpr auto bRaiseMaxErrorToExisting = 0x74; // bool
		constexpr auto bTryFixedBitwiseCompression = 0x75; // bool
		constexpr auto bTryPerTrackBitwiseCompression = 0x76; // bool
		constexpr auto bTryLinearKeyRemovalCompression = 0x77; // bool
		constexpr auto bTryIntervalKeyRemoval = 0x78; // bool
		constexpr auto bStripAnimationDataOnDedicatedServer = 0x79; // bool
	}

	namespace n_UAnimationDataStoreComponent { // : UActorComponent
		constexpr auto AnimationDataStoreWeakReferences = 0xd0; // UAnimationDataStoreWeakReferenceAsset*
	}

	namespace n_UClueDescriptorGenerator { // : UObject
		constexpr auto DescriptorType = 0x28; // UClueDescriptor*
		constexpr auto SupportedDestinationTypes = 0x30; // TArray<UClueDestinationDescriptor*>
	}

	namespace n_UAggressiveGhostShipVisualsDataAsset { // : UDataAsset
		constexpr auto MaterialOverrides = 0x28; // TArray<FAggressiveGhostShipVisualsMaterialOverride>
		constexpr auto ExtraMeshes = 0x38; // TArray<FAggressiveGhostShipVisualsExtraMesh>
		constexpr auto AppearAnimation = 0x48; // UAggressiveGhostShipAnimationDataAsset*
		constexpr auto DisappearAnimation = 0x50; // UAggressiveGhostShipAnimationDataAsset*
		constexpr auto SinkingAnimation = 0x58; // UAggressiveGhostShipAnimationDataAsset*
	}

	namespace n_UEmblemDefinitionAssetList { // : UDataAsset
		constexpr auto EmblemDefinitionAssets = 0x28; // TArray<UEmblemDefinitionDataAsset*>
	}

	namespace n_UMovieSceneParticleTrack { // : UMovieSceneNameableTrack
		constexpr auto ParticleSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UTelemetryProgressStepDesc { // : UTaleQuestStepDesc
		constexpr auto Progression = 0x80; // FString
		constexpr auto TelemetryContext = 0x90; // FTelemetryStepContext
	}

	namespace n_UAISystem { // : UAISystemBase
		constexpr auto PerceptionSystemClassName = 0x40; // FStringClassReference
		constexpr auto HotSpotManagerClassName = 0x50; // FStringClassReference
		constexpr auto AcceptanceRadius = 0x60; // float
		constexpr auto bFinishMoveOnGoalOverlap = 0x64; // bool
		constexpr auto bAcceptPartialPaths = 0x65; // bool
		constexpr auto bAllowStrafing = 0x66; // bool
		constexpr auto bEnableBTAITasks = 0x67; // bool
		constexpr auto BehaviorTreeManager = 0x68; // UBehaviorTreeManager*
		constexpr auto EnvironmentQueryManager = 0x70; // UEnvQueryManager*
		constexpr auto PerceptionSystem = 0x78; // UAIPerceptionSystem*
		constexpr auto AllProxyObjects = 0x80; // TArray<UAIAsyncTaskBlueprintProxy*>
		constexpr auto HotSpotManager = 0x90; // UAIHotSpotManager*
	}

	namespace n_UEditableTextWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto EditableTextStyle = 0x30; // FEditableTextStyle
	}

	namespace n_UBTService_UpdateFocusOnBBChangeWithOffsetFromWieldedProjectile { // : UBTService_UpdateFocusOnBBChange
		constexpr auto DisableUpdateMoveFocusForCurrentPathOnExit = 0xa0; // bool
		constexpr auto Conditional = 0xa8; // FConditionalBasedOnBlackboardKey
	}

	namespace n_UIsItemOfClassStatCondition { // : UTargetedStatCondition
		constexpr auto ItemType = 0x30; // UItemDesc*
		constexpr auto ExactMatch = 0x38; // bool
	}

	namespace n_USpawnRewardStepDesc { // : UTaleQuestStepDesc
		constexpr auto ItemSpawnData = 0x80; // FQuestVariableItemSpawnDataType
		constexpr auto SpawnLocation = 0x90; // FQuestVariableVector
		constexpr auto SpawnedActor = 0xa0; // FQuestVariableActor
		constexpr auto Tracked = 0xb0; // bool
		constexpr auto Critical = 0xb1; // bool
		constexpr auto DropOnSpawn = 0xb2; // bool
		constexpr auto FailureMessage = 0xb8; // FText
	}

	namespace n_UGameEventSchedulerService { // : UObject
		constexpr auto Settings = 0x48; // UGameEventSchedulerSettingsAsset*
		constexpr auto World = 0x50; // UWorld*
		constexpr auto PermittedEventTypes = 0x88; // TArray<FGameEventCount>
	}

	namespace n_UBTService_DisableDamageResponses { // : UBTService
		constexpr auto Interval = 0x60; // float
		constexpr auto RandomDeviation = 0x64; // float
		constexpr auto bCallTickOnSearchStart = 0x68; // char : 1
		constexpr auto bRestartTimerOnEachActivation = 0x68; // char : 1
	}

	namespace n_UInvalidShipCustomizationCategory { // : UShipCustomizationCategory
		constexpr auto Name = 0x28; // FText
		constexpr auto UniqueTextIdentifier = 0x60; // FName
		constexpr auto IconPath = 0x68; // FStringAssetReference
	}

	namespace n_UImpulseThrottlerComponent { // : UActorComponent
		constexpr auto MinimumTimeBetweenImpulses = 0xd0; // float
		constexpr auto ImpulseMultiplier = 0xd4; // float
	}

	namespace n_UMovieSceneCinematicShotSection { // : UMovieSceneSubSection
		constexpr auto DisplayName = 0x100; // FText
	}

	namespace n_ASkellyFort { // : AActor
		constexpr auto AllowedGameEventTypes = 0x3e8; // TArray<USkellyFortGameEventType*>
		constexpr auto IslandName = 0x3f8; // FName
		constexpr auto FortDoor = 0x400; // ASkeletonFortDoor*
		constexpr auto FortVaultTeleportVolume = 0x408; // APanicTeleportVolume*
		constexpr auto AIEncounterGenerationRecipeRankOrderListOverride = 0x410; // UAIEncounterGenerationRecipeRankOrderList*
		constexpr auto SkellyFortEmitter = 0x538; // FWwiseEmitter
		constexpr auto ServerMigrationExclusionRadius = 0x558; // float
		constexpr auto SkullCloudLoc = 0x55c; // FVector
		constexpr auto SkullCloudCloseProximityRotation = 0x568; // float
		constexpr auto Spawner = 0x570; // UAIBountySpawner*
		constexpr auto SkullCloud = 0x710; // AGameplayEventSignal*
		constexpr auto Rewards = 0x718; // TArray<UFortItemSpawnComponent*>
		constexpr auto WaveSpawnerLocations = 0x728; // TArray<FAIBountySpawnerWaveLocation>
		constexpr auto SkullCloudMaxPitch = 0x738; // float
		constexpr auto SightingEncounterParams = 0x73c; // FEncounterParams
		constexpr auto CloseEncounterParams = 0x748; // FEncounterParams
		constexpr auto SubjectName = 0x758; // FString
		constexpr auto FortUniqueId = 0x768; // FString
		constexpr auto WaveGroupSpawnedEvent = 0x778; // UWwiseEvent*
		constexpr auto FinalWaveGroupSpawnedEvent = 0x780; // UWwiseEvent*
		constexpr auto FortCompleteEvent = 0x788; // UWwiseEvent*
		constexpr auto ActionAudioZoneComponent = 0x798; // UOverlapTriggerComponent*
		constexpr auto AnticipationAudioZoneComponent = 0x7a0; // UOverlapTriggerComponent*
		constexpr auto ActiveFortType = 0x7a8; // USkellyFortGameEventType*
		constexpr auto SpawnedAdditionalCaptainsData = 0x7b0; // TArray<FAdditionalCaptainTarget>
	}

	namespace n_UPlayerWalletComponent { // : UActorComponent
		constexpr auto LastKnownBalance = 0xd0; // FWalletBalance
	}

	namespace n_UTaleQuestGenerateDebrisTypeForVoyageRankStepDesc { // : UTaleQuestStepDesc
		constexpr auto VoyageRank = 0x80; // FQuestVariableInt
		constexpr auto DebrisTypeArray = 0x90; // FQuestVariableActorAssetTypeArray
		constexpr auto DebrisForRankDescAsset = 0xa0; // UDebrisForVoyageRankDescAsset*
	}

	namespace n_UTimelineTemplate { // : UObject
		constexpr auto TimelineLength = 0x28; // float
		constexpr auto LengthMode = 0x2c; // ETimelineLengthMode
		constexpr auto bAutoPlay = 0x30; // char : 1
		constexpr auto bLoop = 0x30; // char : 1
		constexpr auto bReplicated = 0x30; // char : 1
		constexpr auto bValidatedAsWired = 0x30; // char : 1
		constexpr auto EventTracks = 0x38; // TArray<FTTEventTrack>
		constexpr auto FloatTracks = 0x48; // TArray<FTTFloatTrack>
		constexpr auto VectorTracks = 0x58; // TArray<FTTVectorTrack>
		constexpr auto LinearColorTracks = 0x68; // TArray<FTTLinearColorTrack>
		constexpr auto MetaDataArray = 0x78; // TArray<FBPVariableMetaDataEntry>
		constexpr auto TimelineGuid = 0x88; // FGuid
	}

	namespace n_UPlayerMerchantContractsComponent { // : UActorComponent
		constexpr auto Contracts = 0xd0; // TArray<FPlayerMerchantContract>
	}

	namespace n_UGridPanel { // : UPanelWidget
		constexpr auto ColumnFill = 0x150; // TArray<float>
		constexpr auto RowFill = 0x160; // TArray<float>
	}

	namespace n_UParticleModuleLocation { // : UParticleModuleLocationBase
		constexpr auto StartLocation = 0x50; // FRawDistributionVector
		constexpr auto AdditionalStartLocations = 0x88; // FRawDistributionVector [0x4]
		constexpr auto StartLocationUseGroupAForAll = 0x168; // char : 1
		constexpr auto DistributeOverNPoints = 0x16c; // float
		constexpr auto DistributeThreshold = 0x170; // float
	}

	namespace n_UParticleModuleRotation_Seeded { // : UParticleModuleRotation
		constexpr auto RandomSeedInfo = 0x1a8; // FParticleRandomSeedInfo
	}

	namespace n_UAthenaAnimationCustomSkeletonAnimationData { // : UDataAsset
		constexpr auto SkeletonCustomAnimData = 0x28; // FSkeletonCustomAnimationDataStructure
	}

	namespace n_AKrakenAnimatedTentacle { // : AKrakenTentacle
		constexpr auto RootSceneComponent = 0x520; // USceneComponent*
		constexpr auto BaseShipCollision = 0x528; // UCapsuleComponent*
		constexpr auto MeshOffsetComponent = 0x530; // USceneComponent*
		constexpr auto TentacleMeshComponent = 0x538; // USkeletalMeshComponent*
		constexpr auto KrakenTentacleAudioComponent = 0x540; // UKrakenTentacleAIAudioComponent*
		constexpr auto AttachSocketNameFirstPerson = 0x548; // FName
		constexpr auto AttachSocketNameThirdPerson = 0x550; // FName
		constexpr auto TentacleCollisionProfile = 0x558; // FCollisionProfileName
		constexpr auto CollisionSegments = 0x560; // TArray<FKrakenAnimatedTentacleCollisionSegment>
		constexpr auto EnabledShipCollision = 0x570; // bool
		constexpr auto DisableHeadCollisionsDuringHoldingState = 0x571; // bool
		constexpr auto CollisionBoneToUseForShipCollision = 0x574; // int32_t
		constexpr auto SegmentsCollisionEnableType = 0x578; // ECollisionEnabled
		constexpr auto BaseShipCollisionEnableType = 0x579; // ECollisionEnabled
		constexpr auto AnimationSpec = 0x580; // UKrakenAnimatedTentacleAnimationSpecDataAsset*
		constexpr auto AnimationMapping = 0x588; // UKrakenAnimatedTentacleAnimationMappingDataAsset*
		constexpr auto StateAnimationMapping = 0x590; // UKrakenAnimatedTentacleStateAnimationsDataAsset*
		constexpr auto AnimationPlayRate = 0x598; // float
		constexpr auto RequestedAnimationPlayRateBlendTime = 0x59c; // float
		constexpr auto PlayRateAdjustMaxTimeDelta = 0x5a0; // float
		constexpr auto PlayRateAdjustMaxPercentageToSpeedUpPlayRate = 0x5a4; // float
		constexpr auto PlayRateAdjustMaxPercentageToSlowDownPlayRate = 0x5a8; // float
		constexpr auto ServerAnimationTimeOffsetLatencyMultiplierForSynchronisation = 0x5ac; // float
		constexpr auto DebugDrawBoneLocationRadius = 0x5b0; // float
		constexpr auto DebugDrawTargetRadius = 0x5b4; // float
		constexpr auto DebugDrawBoneRotationEndPointRadius = 0x5b8; // float
		constexpr auto DebugDrawBoneRotationLength = 0x5bc; // float
		constexpr auto DebugDrawSuckingTargetRadius = 0x5c0; // float
		constexpr auto MinAnimationPlayedTimeToSetPendingStateChange = 0x5c4; // float
		constexpr auto MinAnimationLeftTimeToSetPendingStateChange = 0x5c8; // float
		constexpr auto AnimationOffsetTimeLeftForOptimalPendingStateChange = 0x5cc; // float
		constexpr auto SmoothNetUpdateLocationTime = 0x5d0; // float
		constexpr auto SmoothNetUpdateRotationTime = 0x5d4; // float
		constexpr auto MinDotToTargetToTryAndRotate = 0x5d8; // float
		constexpr auto MaxDotToTargetToTryAndRotate = 0x5dc; // float
		constexpr auto MinYawTurnRate = 0x5e0; // float
		constexpr auto MaxYawTurnRate = 0x5e4; // float
		constexpr auto MinInvisibleTime = 0x5e8; // float
		constexpr auto MinSuckingTellTime = 0x5ec; // float
		constexpr auto MaxSuckingTellTime = 0x5f0; // float
		constexpr auto MaxSuckingPlayerDistance = 0x5f4; // float
		constexpr auto MinHealthLossRequiredToAvoidAbortSuck = 0x5f8; // float
		constexpr auto TentacleSuckingTellVFX = 0x600; // UObject*
		constexpr auto TargetVFXAttachSocketName = 0x608; // FName
		constexpr auto TargetFirstPersonSuckingTellVFX = 0x610; // UObject*
		constexpr auto TargetThirdPersonSuckingTellVFX = 0x618; // UObject*
		constexpr auto MaxHealthLossRequiredToAvoidAbortSuck = 0x620; // float
		constexpr auto SuckingVelocity = 0x624; // float
		constexpr auto SuckingPlayerAttachDistance = 0x628; // float
		constexpr auto MinHealthLossRequiredToDropPlayer = 0x62c; // float
		constexpr auto MaxHealthLossRequiredToDropPlayer = 0x630; // float
		constexpr auto MinDamageDealtByCurrentTargetRequiredToDropPlayer = 0x634; // float
		constexpr auto MaxDamageDealtByCurrentTargetRequiredToDropPlayer = 0x638; // float
		constexpr auto MinHoldingTime = 0x63c; // float
		constexpr auto MaxHoldingTime = 0x640; // float
		constexpr auto MinWaterDunkTime = 0x644; // float
		constexpr auto MaxWaterDunkTime = 0x648; // float
		constexpr auto PowerSlamDamageTime = 0x64c; // float
		constexpr auto PowerSlamDamage = 0x650; // float
		constexpr auto IngestTargetSocketName = 0x654; // FName
		constexpr auto IngestTargetBoneIndexOffset = 0x65c; // int32_t
		constexpr auto MinIngestingTime = 0x660; // float
		constexpr auto MaxIngestingTime = 0x664; // float
		constexpr auto IngestingDamageAmountPerSecond = 0x668; // float
		constexpr auto RegurgitatingSpeed = 0x66c; // float
		constexpr auto RegurgitatingLaunchTime = 0x670; // float
		constexpr auto ThrowTargetLaunchTime = 0x674; // float
		constexpr auto ThrowTargetVisibleTime = 0x678; // float
		constexpr auto ThrowingSpeed = 0x67c; // float
		constexpr auto TentacleFirstPersonThrowingVFX = 0x680; // UObject*
		constexpr auto TentacleThirdPersonThrowingVFX = 0x688; // UObject*
		constexpr auto MinTargetVomitingDelay = 0x690; // float
		constexpr auto MaxTargetVomitingDelay = 0x694; // float
		constexpr auto MinTargetVomitingDuration = 0x698; // float
		constexpr auto MaxTargetVomitingDuration = 0x69c; // float
		constexpr auto TargetVomitingChances = 0x6a0; // TArray<FKrakenAnimatedTentacleHeldTargetVomittingChance>
		constexpr auto VomitVFXType = 0x6b0; // FName
		constexpr auto WaterTriggerableFX = 0x6b8; // TArray<FKrakenAnimatedTentacleWaterTriggerableFX>
		constexpr auto WaterQueryBoneIndex = 0x6c8; // int32_t
		constexpr auto TentaclePhysicalMaterial = 0x6d0; // UPhysicalMaterial*
		constexpr auto VisualLoggerUpdateTime = 0x6d8; // float
		constexpr auto ServerTimeToStartPlayingIdle = 0x6dc; // float
		constexpr auto AITargetVisibilityPoints = 0x6e0; // TArray<FVector>
		constexpr auto TargetBoxOffset = 0x6f0; // FVector
		constexpr auto TargetBoxScale = 0x6fc; // FVector
		constexpr auto ReplicatedAnimationProgression = 0x71c; // float
		constexpr auto IsHitReactionsEnabled = 0x720; // bool
		constexpr auto PendingState = 0x748; // UKrakenAnimatedTentacleState*
		constexpr auto ReplicatedCurrentState = 0x758; // UKrakenAnimatedTentacleState*
		constexpr auto PreviousState = 0x768; // UKrakenAnimatedTentacleState*
		constexpr auto IngestingProgress = 0x7a0; // float
		constexpr auto AuthoritativeAnimation = 0x7a8; // UKrakenAnimatedTentacleAnimationDataAsset*
		constexpr auto TentacleYaw = 0x7b0; // float
		constexpr auto TentacleWorldLocation = 0x7b4; // FVector
		constexpr auto CurrentTarget = 0x7c0; // AAthenaCharacter*
		constexpr auto HasPlayedIntroAnim = 0x7c8; // bool
		constexpr auto DockedToSceneComponent = 0x920; // USceneComponent*
		constexpr auto DockedLocalSpaceOffset = 0x928; // FVector
		constexpr auto DockedLocalSpaceRotation = 0x940; // FQuat
		constexpr auto TentacleSuckingTellParticleSystem = 0x998; // UParticleSystemComponent*
		constexpr auto TargetFirstPersonSuckingTellParticleSystem = 0x9a0; // UParticleSystemComponent*
		constexpr auto TargetThirdPersonSuckingTellParticleSystem = 0x9a8; // UParticleSystemComponent*
	}

	namespace n_UTaleQuestPlankServiceDesc { // : UTaleQuestToolServiceDesc
		constexpr auto WoodenPlankDesc = 0x30; // UItemDesc*
	}

	namespace n_UCargoRunMapLayout { // : UDataAsset
		constexpr auto NPCNameDescription = 0x28; // FTreasureMapWidgetText
		constexpr auto IslandNameDescription = 0x48; // FTreasureMapWidgetText
		constexpr auto NumOfItemsDescription = 0x68; // FTreasureMapWidgetText
		constexpr auto GeneralText = 0x88; // TArray<FTreasureMapWidgetLocalisedText>
		constexpr auto Images = 0x98; // TArray<FTreasureMapWidgetTexture>
	}

	namespace n_UAthenaAIAmmoDataAsset { // : UDataAsset
		constexpr auto AmmoWeights = 0xb8; // TArray<FAthenaAICharacterControllerWeightedAmmoType>
		constexpr auto FeatureName = 0xc8; // FName
	}

	namespace n_UInteractionSettings { // : UObject
		constexpr auto MaximumInteractionAngleClient = 0x28; // float
		constexpr auto MaximumInteractionAngleServer = 0x2c; // float
		constexpr auto MaximumInteractionDistance = 0x30; // float
		constexpr auto MaxInteractorsPlayerDistanceDelta = 0x34; // float
		constexpr auto MaxInteractorsCenterDistanceDelta = 0x38; // float
	}

	namespace n_UEQSRenderingComponent { // : UPrimitiveComponent
		constexpr auto MinDrawDistance = 0x2b8; // float
		constexpr auto LDMaxDrawDistance = 0x2c0; // float
		constexpr auto CachedMaxDrawDistance = 0x2c4; // float
		constexpr auto DepthPriorityGroup = 0x2c8; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x2c9; // ESceneDepthPriorityGroup
		constexpr auto bAlwaysCreatePhysicsState = 0x2cc; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x2cc; // char : 1
		constexpr auto bMultiBodyOverlap = 0x2cc; // char : 1
		constexpr auto bCheckAsyncSceneOnMove = 0x2cc; // char : 1
		constexpr auto bTraceComplexOnMove = 0x2cc; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x2cc; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x2cc; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x2cc; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x2cd; // char : 1
		constexpr auto bRenderInMainPass = 0x2cd; // char : 1
		constexpr auto bRenderInCustomPrePass = 0x2cd; // char : 1
		constexpr auto bReflected = 0x2cd; // char : 1
		constexpr auto bReflectedOnLowQuality = 0x2cd; // char : 1
		constexpr auto bFFTWaterMask = 0x2cd; // char : 1
		constexpr auto bVolumeFogMask = 0x2cd; // char : 1
		constexpr auto bAffectsFlatWater = 0x2ce; // char : 1
		constexpr auto bGPUParticlesKillPlane = 0x2ce; // char : 1
		constexpr auto bDontCull = 0x2ce; // char : 1
		constexpr auto bDontSizeOnScreenCull = 0x2ce; // char : 1
		constexpr auto OverriddenShadowMinTexelSize = 0x2d0; // float
		constexpr auto bOverrideShadowMinSizeCulling = 0x2d4; // bool
		constexpr auto bOverrideShadowCascadesExclusion = 0x2d5; // bool
		constexpr auto ExcludedShadowCascades = 0x2d6; // EExcludeFromCascades
		constexpr auto bReceivesDecals = 0x2d8; // char : 1
		constexpr auto bOwnerNoSee = 0x2d8; // char : 1
		constexpr auto bOnlyOwnerSee = 0x2d8; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x2d8; // char : 1
		constexpr auto bIsACloud = 0x2d8; // char : 1
		constexpr auto bUseAsOccluder = 0x2d8; // char : 1
		constexpr auto bSelectable = 0x2d8; // char : 1
		constexpr auto bForceMipStreaming = 0x2d8; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x2d9; // char : 1
		constexpr auto CastShadow = 0x2d9; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2d9; // char : 1
		constexpr auto bUseFarCascadeLPVBiasMultiplier = 0x2d9; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x2d9; // char : 1
		constexpr auto bCastDynamicShadow = 0x2d9; // char : 1
		constexpr auto bCastStaticShadow = 0x2d9; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x2d9; // char : 1
		constexpr auto bSelfShadowOnly = 0x2da; // char : 1
		constexpr auto bCastFarShadow = 0x2da; // char : 1
		constexpr auto bCastInsetShadow = 0x2da; // char : 1
		constexpr auto bCastCinematicShadow = 0x2da; // char : 1
		constexpr auto bCastHiddenShadow = 0x2da; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x2da; // char : 1
		constexpr auto bCastShadowOnLowQuality = 0x2da; // char : 1
		constexpr auto bLightAsIfStatic = 0x2da; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x2db; // char : 1
		constexpr auto IndirectLightingCacheQuality = 0x2dc; // EIndirectLightingCacheQuality
		constexpr auto bHasCachedStaticLighting = 0x2dd; // bool
		constexpr auto bStaticLightingBuildEnqueued = 0x2de; // bool
		constexpr auto bIgnoreRadialImpulse = 0x2e0; // char : 1
		constexpr auto bIgnoreRadialForce = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x2e0; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x2e0; // char : 1
		constexpr auto bUseEditorCompositing = 0x2e0; // char : 1
		constexpr auto bRenderCustomDepth = 0x2e0; // char : 1
		constexpr auto bAllowVelocityInMaterial = 0x2e0; // char : 1
		constexpr auto CustomDepthStencilValue = 0x2e4; // int32_t
		constexpr auto TranslucencySortPriority = 0x2e8; // int32_t
		constexpr auto VisibilityId = 0x2ec; // int32_t
		constexpr auto LpvBiasMultiplier = 0x2f4; // float
		constexpr auto FarCascadeLPVBiasMultiplier = 0x2f8; // float
		constexpr auto LpvIntensityMultiplier = 0x2fc; // float
		constexpr auto CustomPrimitiveData = 0x300; // FCustomPrimitiveData
		constexpr auto BodyInstance = 0x310; // FBodyInstance
		constexpr auto bAffectRain = 0x490; // char : 1
		constexpr auto bCanEverAffectNavigation = 0x490; // char : 1
		constexpr auto bSkipRenderingInOuterLPVCascades = 0x490; // char : 1
		constexpr auto bEnableMergeCollisionComponents = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerUnderwater = 0x490; // char : 1
		constexpr auto bVisibleWhenAboveWaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerAbove = 0x490; // char : 1
		constexpr auto bVisibleWhenUnderwaterAndPlayerUnderwater = 0x491; // char : 1
		constexpr auto bCanRenderAboveAndBelowWaterAtSameTime = 0x491; // char : 1
		constexpr auto BoundsScale = 0x498; // float
		constexpr auto OcclusionBoundsScale = 0x49c; // float
		constexpr auto LastRenderTime = 0x4a0; // float
		constexpr auto bGPUVisibility = 0x4a4; // bool
		constexpr auto bHasCustomNavigableGeometry = 0x4a5; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x4a6; // ECanBeCharacterBase
		constexpr auto OnComponentHit = 0x4f0; // FScriptMulticastDelegate
		constexpr auto OnComponentBeginOverlap = 0x4f1; // FScriptMulticastDelegate
		constexpr auto OnComponentEndOverlap = 0x4f2; // FScriptMulticastDelegate
		constexpr auto OnComponentWake = 0x4f3; // FScriptMulticastDelegate
		constexpr auto OnComponentSleep = 0x4f4; // FScriptMulticastDelegate
		constexpr auto LODParentPrimitive = 0x528; // UPrimitiveComponent*
		constexpr auto PostPhysicsComponentTick = 0x530; // FPrimitiveComponentPostPhysicsTickFunction
		constexpr auto MergedCollisionComponentParent = 0x580; // UPrimitiveComponent*
	}

	namespace n_UTaleQuestRetrieveSpawnedMerchantCaptainFromShipwreckStepDesc { // : UTaleQuestStepDesc
		constexpr auto ShipwreckSpawnedOn = 0x80; // FQuestVariableShipwreck
		constexpr auto SpawnedMerchantCaptain = 0x90; // FQuestVariableActor
	}

	namespace n_UBasePlayNpcAnimationStepDesc { // : UTaleQuestStepDesc
		constexpr auto PlaceableReaction = 0x80; // FQuestVariableActor
		constexpr auto AnimationNameToPlay = 0x90; // FName
		constexpr auto SubtitleMaxDistance = 0x98; // float
		constexpr auto UseServerDrivenDialogue = 0x9c; // bool
		constexpr auto DialogueData = 0xa0; // USceneDialogueData*
		constexpr auto LocalMusicZone = 0xa8; // UMusicZoneComponent*
		constexpr auto PreventServerMigration = 0xb0; // bool
	}

	namespace n_UTaleQuestSequenceStep { // : UTaleQuestFramedStep
		constexpr auto Desc = 0xd0; // UTaleQuestSequenceStepDesc*
		constexpr auto CurrentStep = 0xd8; // UTaleQuestStep*
		constexpr auto ForkedSteps = 0xe8; // TArray<FForkedStep>
	}

	namespace n_ATriggerCapsule { // : ATriggerBase
		constexpr auto CollisionComponent = 0x3d0; // UShapeComponent*
		constexpr auto SpriteComponent = 0x3d8; // UBillboardComponent*
	}

	namespace n_UContestOutOfBoundsComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UArmoryChestViewModelComponent { // : UPossessionsChestViewModel
		constexpr auto Categories = 0x180; // TArray<UWeaponItemCategory*>
		constexpr auto IncludeAllCategory = 0x190; // bool
	}

	namespace n_UMaterialExpressionLumaAvg { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UShipwreckSiteGeneratorRandomComponent { // : UShipwreckSiteGeneratorComponent
		constexpr auto SiteGenAsset = 0xc8; // UShipwreckSiteGeneratorRandom*
	}

	namespace n_AExplosionMechanismAction { // : AActor
		constexpr auto Base = 0x3d0; // USceneComponent*
		constexpr auto MechanismActionComponent = 0x3d8; // UMechanismActionComponent*
		constexpr auto ExplosiveComponent = 0x3e0; // UExplosiveComponent*
		constexpr auto ExplosionComponent = 0x3e8; // UExplosionComponent*
		constexpr auto Delay = 0x3f0; // float
		constexpr auto Cooldown = 0x3f4; // float
		constexpr auto ApplyCooldownPostDelay = 0x3f8; // bool
	}

	namespace n_AMechanism { // : AActor
		constexpr auto Bindings = 0x3e0; // TArray<FMechanismBinding>
		constexpr auto OnMechanismResetDelegate = 0x3f0; // FScriptMulticastDelegate
	}

	namespace n_USmokeTestCommandlet { // : UCommandlet
		constexpr auto HelpDescription = 0x28; // FString
		constexpr auto HelpUsage = 0x38; // FString
		constexpr auto HelpWebLink = 0x48; // FString
		constexpr auto HelpParamNames = 0x58; // TArray<FString>
		constexpr auto HelpParamDescriptions = 0x68; // TArray<FString>
		constexpr auto IsServer = 0x78; // char : 1
		constexpr auto IsClient = 0x78; // char : 1
		constexpr auto IsEditor = 0x78; // char : 1
		constexpr auto LogToConsole = 0x78; // char : 1
		constexpr auto ShowErrorCount = 0x78; // char : 1
	}

	namespace n_UInvalidPetEntitlementCategory { // : UPetEntitlementCategory
		constexpr auto PetPreviewCamera = 0x80; // FName
	}

	namespace n_UPlayerMysteriousNoteComponent { // : UActorComponent
		constexpr auto NoteData = 0xd0; // FClientNoteData
		constexpr auto BeenPossessed = 0xe8; // bool
		constexpr auto CinematicPlayed = 0xe9; // bool
	}

	namespace n_UInputTouchDelegateBinding { // : UInputDelegateBinding
		constexpr auto InputTouchDelegateBindings = 0x28; // TArray<FBlueprintInputTouchDelegateBinding>
	}

	namespace n_UAISpawnContextList { // : UDataAsset
		constexpr auto SpawnContextList = 0x28; // TArray<FAISpawnContextData>
	}

	namespace n_UShaderPlatformQualitySettings { // : UObject
		constexpr auto QualityOverrides = 0x28; // FMaterialQualityOverrides [0x3]
	}

	namespace n_UMutateCollectorsChestStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAIResource_Movement { // : UGameplayTaskResource
		constexpr auto ManualResourceID = 0x28; // int32_t
		constexpr auto bManuallySetID = 0x30; // char : 1
	}

	namespace n_UBTTask_SelectPetHangoutSpot { // : UBTTask_BlackboardBase
		constexpr auto NeedForceId = 0x88; // bool
		constexpr auto ForcedId = 0x8c; // FHangoutSpotId
	}

	namespace n_ULandmarkReactionEventPlayForceFeedback { // : ULandmarkReactionEvent
		constexpr auto ForceFeedbackEntries = 0x38; // TArray<FLandmarkReactionEventPlayForceFeedbackEntry>
		constexpr auto AudioCue = 0x48; // UWwiseEvent*
	}

	namespace n_UBlackboardKeyType_Enum { // : UBlackboardKeyType
		constexpr auto EnumType = 0x30; // UEnum*
		constexpr auto EnumName = 0x38; // FString
		constexpr auto bIsEnumNameValid = 0x48; // char : 1
	}

	namespace n_URewardSettings { // : UObject
		constexpr auto RewardDefinitionAssetListLocation = 0x28; // FStringAssetReference
	}

	namespace n_ASirenStatue { // : AStatueThreatBase
		constexpr auto Team = 0x570; // EAthenaAITeam
	}

	namespace n_UOnDigAdjustFuseTimeScale { // : UOnDigStrategy
		constexpr auto FuseTimeScaleOnDigUp = 0x28; // float
	}

	namespace n_UVoyageInventoryViewModelComponent { // : UViewModelComponentBase
		constexpr auto PlayerController = 0x140; // APlayerController*
	}

	namespace n_UParticleModuleBeamSource { // : UParticleModuleBeamBase
		constexpr auto SourceMethod = 0x50; // Beam2SourceTargetMethod
		constexpr auto SourceName = 0x54; // FName
		constexpr auto bSourceAbsolute = 0x5c; // char : 1
		constexpr auto Source = 0x60; // FRawDistributionVector
		constexpr auto bLockSource = 0x98; // char : 1
		constexpr auto SourceTangentMethod = 0x9c; // Beam2SourceTargetTangentMethod
		constexpr auto SourceTangent = 0xa0; // FRawDistributionVector
		constexpr auto bLockSourceTangent = 0xd8; // char : 1
		constexpr auto SourceStrength = 0xe0; // FRawDistributionFloat
		constexpr auto bLockSourceStength = 0x118; // char : 1
	}

	namespace n_AIslandService { // : AActor
		constexpr auto IslandFrameworkSettings = 0x458; // UIslandFrameworkSettings*
		constexpr auto IslandDataAsset = 0x460; // UIslandDataAsset*
		constexpr auto SunkenIslandSettingsDataAsset = 0x468; // USunkenIslandSettingsDataAsset*
		constexpr auto IslandArray = 0x488; // TArray<FIsland>
		constexpr auto CannonAISpawnerZoneDebugArray = 0x5b8; // TArray<FCannonAISpawnerZone>
		constexpr auto CannonAILocationDebugArray = 0x5c8; // TArray<FCannonAILocation>
		constexpr auto PlayerTrackers = 0x5d8; // TArray<UAIProximityPlayerTracker*>
	}

	namespace n_UShovelItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UItemFirstDroppedByMeOnMyShipConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UAISkillsetProgressionTypeList { // : UDataAsset
		constexpr auto AllProgressions = 0x28; // TArray<UAISkillsetRankProgression*>
	}

	namespace n_UAthenaCharacterBaseLocomotionInputComponent { // : UAthenaCharacterBaseInputComponent
		constexpr auto ThrowablesItemCategory = 0x2d8; // UItemCategory*
	}

	namespace n_UCatalogDiscountDataAsset { // : UDataAsset
		constexpr auto DiscountId = 0x28; // FGuid
		constexpr auto DisplayName = 0x38; // FText
		constexpr auto CurrencyType = 0x70; // EWalletCurrencyId
		constexpr auto PercentOff = 0x74; // uint32_t
	}

	namespace n_UAIShipContextDescDataAsset { // : UDataAsset
		constexpr auto ShipType = 0x28; // EAIShipType
		constexpr auto EncounterType = 0x29; // EAIShipEncounterType
		constexpr auto ShipDesc = 0x30; // UShipDescAsset*
		constexpr auto ControllerParams = 0x38; // UAthenaAIShipControllerParamsDataAsset*
		constexpr auto Spawners = 0x40; // TArray<FAIShipEncounterParamsSpawnerData>
		constexpr auto DamageParams = 0x50; // FAIShipContextDescDamageParams
		constexpr auto SailsCustomisation = 0x64; // FAIShipSailData
		constexpr auto SailColour = 0x74; // FColor
		constexpr auto FormType = 0x78; // FAIShipCrewFormType
		constexpr auto AmmoType = 0x98; // FAIShipCrewAmmoType
		constexpr auto RewardMarkerParams = 0xb0; // UShortRangeMarkerDataAsset*
	}

	namespace n_UMaterialExpressionLowResClouds { // : UMaterialExpression
		constexpr auto Coordinates = 0x70; // FExpressionInput
	}

	namespace n_UDebugMenuStatusDataAsset { // : UDataAsset
		constexpr auto StatusDefinitions = 0x28; // TArray<FDebugMenuStatusDefinition>
		constexpr auto Durations = 0x38; // TArray<float>
	}

	namespace n_UGlitterBeardFinaleCoordinatorComponent { // : UActorComponent
		constexpr auto AudioEventToSynchronise = 0xc8; // UWwiseEvent*
		constexpr auto ReplicationState = 0xd0; // FFinaleReplicationState
	}

	namespace n_UMaterialExpressionObjectRadius { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UAnimNotifyState_AthenaTimedParticleEffect { // : UAnimNotifyState_TimedParticleEffect
		constexpr auto RelativeScale = 0x58; // FVector
		constexpr auto ColorTint = 0x64; // FLinearColor
		constexpr auto CustomParameter = 0x74; // float
		constexpr auto Attached = 0x78; // char : 1
		constexpr auto KeepWorldScale = 0x78; // char : 1
		constexpr auto UnderwaterMode = 0x7c; // EAnimNotifyUnderwaterMode
		constexpr auto CustomLocalSpaceMode = 0x7d; // EVfxCustomLocalSpaceMode
	}

	namespace n_UIsWieldingItemStatCondition { // : UTargetedStatCondition
		constexpr auto TargetItems = 0x30; // TArray<UItemDesc*>
	}

	namespace n_UMovieSceneWidgetMaterialTrack { // : UMovieSceneMaterialTrack
		constexpr auto BrushPropertyNamePath = 0x98; // TArray<FName>
		constexpr auto TrackName = 0xa8; // FName
	}

	namespace n_USubUVAnimation { // : UObject
		constexpr auto SubUVTexture = 0x28; // UTexture2D*
		constexpr auto SubImages_Horizontal = 0x30; // int32_t
		constexpr auto SubImages_Vertical = 0x34; // int32_t
		constexpr auto BoundingMode = 0x38; // ESubUVBoundingVertexCount
		constexpr auto OpacitySourceMode = 0x39; // EOpacitySourceMode
		constexpr auto AlphaThreshold = 0x3c; // float
		constexpr auto SafeMarginSize = 0x40; // float
	}

	namespace n_UMediaPlayer { // : UObject
		constexpr auto OnMediaClosed = 0x28; // FScriptMulticastDelegate
		constexpr auto OnMediaOpened = 0x38; // FScriptMulticastDelegate
		constexpr auto Looping = 0x48; // char : 1
		constexpr auto URL = 0x50; // FString
	}

	namespace n_UStaticMesh { // : UObject
		constexpr auto MinLOD = 0x40; // int32_t
		constexpr auto Materials = 0x48; // TArray<UMaterialInterface*>
		constexpr auto LightMapResolution = 0x58; // int32_t
		constexpr auto LightMapCoordinateIndex = 0x5c; // int32_t
		constexpr auto BodySetup = 0x60; // UBodySetup*
		constexpr auto LODForCollision = 0x68; // int32_t
		constexpr auto bUseMaximumStreamingTexelRatio = 0x6c; // char : 1
		constexpr auto bStripComplexCollisionForConsole = 0x6c; // char : 1
		constexpr auto bHasNavigationData = 0x6c; // char : 1
		constexpr auto StreamingDistanceMultiplier = 0x70; // float
		constexpr auto LpvBiasMultiplier = 0x74; // float
		constexpr auto Sockets = 0xa8; // TArray<UStaticMeshSocket*>
		constexpr auto PositiveBoundsExtension = 0xd0; // FVector
		constexpr auto NegativeBoundsExtension = 0xdc; // FVector
		constexpr auto ExtendedBounds = 0xe8; // FBoxSphereBounds
		constexpr auto SourceMaterials = 0x108; // TArray<FString>
		constexpr auto UVsForStreaming = 0x118; // int32_t
		constexpr auto ElementToIgnoreForTexFactor = 0x11c; // int32_t
		constexpr auto AssetUserData = 0x120; // TArray<UAssetUserData*>
		constexpr auto NavCollision = 0x130; // UNavCollision*
	}

	namespace n_UDebugCreateAndPlayNpcAnimationStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UDebugCreateAndPlayNpcAnimationStepDesc*
		constexpr auto NPCDialogComponent = 0xa8; // UNPCDialogComponent*
		constexpr auto CutSceneActor = 0xb0; // ACutSceneActor*
		constexpr auto SpawnedActor = 0xb8; // AActor*
		constexpr auto PlaceableReactionActor = 0xc0; // APlaceableReaction*
	}

	namespace n_AAIDiorama { // : AActor
		constexpr auto SceneComponent = 0x3d8; // USceneComponent*
		constexpr auto SpawnedDialogueCoordinator = 0x3e0; // ASceneDialogueCoordinator*
		constexpr auto DialogueData = 0x3e8; // USceneDialogueData*
		constexpr auto LinkedActors = 0x3f0; // TArray<FAIDioramaPawn>
	}

	namespace n_UPlayerBuriedItemsMapBundleInteractionComponent { // : UActionRulesInteractableComponent
		constexpr auto MapBundleMesh = 0x130; // FActorComponentSelector
		constexpr auto PickupHoldTime = 0x140; // float
		constexpr auto CombineHoldTime = 0x144; // float
		constexpr auto StealingHoldTime = 0x148; // float
		constexpr auto HoldInputId = 0x150; // UNotificationInputId*
		constexpr auto ReleaseInputId = 0x158; // UNotificationInputId*
		constexpr auto StartStealingSoundEvent = 0x160; // UWwiseEvent*
		constexpr auto StopStealingSoundEvent = 0x168; // UWwiseEvent*
		constexpr auto StartStealingMusicEvent = 0x170; // UWwiseEvent*
		constexpr auto StopStealingMusicEvent = 0x178; // UWwiseEvent*
		constexpr auto SfxPool = 0x180; // UWwiseObjectPoolWrapper*
		constexpr auto MapsAvailable = 0x188; // bool
		constexpr auto ShipCrewId = 0x18c; // FGuid
	}

	namespace n_UDeliverableComponent { // : UActorComponent
		constexpr auto DeliveryRequirementsAsset = 0xd8; // UDeliverableRequirementsDataAsset*
	}

	namespace n_UBTDecorator_BlueprintBase { // : UBTDecorator
		constexpr auto AIOwner = 0x68; // AAIController*
		constexpr auto ActorOwner = 0x70; // AActor*
		constexpr auto ObservedKeyNames = 0x78; // TArray<FName>
		constexpr auto bShowPropertyDetails = 0x98; // char : 1
		constexpr auto bCheckConditionOnlyBlackBoardChanges = 0x98; // char : 1
		constexpr auto bIsObservingBB = 0x98; // char : 1
	}

	namespace n_UTextureLODSettings { // : UObject
		constexpr auto TextureLODGroups = 0x28; // TArray<FTextureLODGroup>
	}

	namespace n_UStoneFaceGlowComponent { // : UActorComponent
		constexpr auto FullToEmptyGlowCurve = 0xc8; // UCurveFloat*
		constexpr auto EmptyToFullGlowCurve = 0xd0; // UCurveFloat*
		constexpr auto ScalarParamOverrideName = 0xd8; // FName
		constexpr auto OverriddenMaterials = 0xe0; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UTaleQuestAddChecklistMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UTaleQuestCompassServiceDesc { // : UTaleQuestToolServiceDesc
		constexpr auto CompassDesc = 0x30; // UItemDesc*
	}

	namespace n_UAIDataProvider_QueryParams { // : UAIDataProvider
		constexpr auto ParamName = 0x28; // FName
		constexpr auto FloatValue = 0x30; // float
		constexpr auto IntValue = 0x34; // int32_t
		constexpr auto BoolValue = 0x38; // bool
	}

	namespace n_UMovieSceneNameableTrack { // : UMovieSceneTrack
		constexpr auto EvalOptions = 0x80; // FMovieSceneTrackEvalOptions
	}

	namespace n_UParticleEmitter { // : UObject
		constexpr auto EmitterName = 0x28; // FName
		constexpr auto SubUVDataOffset = 0x30; // int32_t
		constexpr auto EmitterRenderMode = 0x34; // EEmitterRenderMode
		constexpr auto LODLevels = 0x38; // TArray<UParticleLODLevel*>
		constexpr auto ConvertedModules = 0x48; // char : 1
		constexpr auto PeakActiveParticles = 0x4c; // int32_t
		constexpr auto InitialAllocationCount = 0x50; // int32_t
		constexpr auto MediumDetailSpawnRateScale = 0x54; // float
		constexpr auto QualityLevelSpawnRateScale = 0x58; // float
		constexpr auto DetailMode = 0x5c; // EDetailMode
		constexpr auto MaxEmitterQuality = 0x5d; // EEmitterQuality
		constexpr auto MinEmitterQuality = 0x5e; // EEmitterQuality
		constexpr auto bIsSoloing = 0x60; // char : 1
		constexpr auto bCookedOut = 0x60; // char : 1
		constexpr auto bDisabledLODsKeepEmitterAlive = 0x60; // char : 1
		constexpr auto bHasAnyEnabledLODs = 0x60; // char : 1
		constexpr auto bHasAnyEnabledLODsValid = 0x60; // char : 1
		constexpr auto ModulesNeedingInstanceData = 0xa0; // TArray<UParticleModule*>
	}

	namespace n_ULightMapTexture2D { // : UTexture2D
		constexpr auto RequestedMips = 0x138; // int32_t
		constexpr auto ResidentMips = 0x13c; // int32_t
		constexpr auto StreamingIndex = 0x140; // int32_t
		constexpr auto FirstResourceMemMip = 0x144; // int32_t
		constexpr auto ImportedSize = 0x14c; // FIntPoint
		constexpr auto ForceMipLevelsToBeResidentTimestamp = 0x154; // float
		constexpr auto bTemporarilyDisableStreaming = 0x158; // char : 1
		constexpr auto bIsStreamable = 0x158; // char : 1
		constexpr auto bHasCancelationPending = 0x158; // char : 1
		constexpr auto bForceMiplevelsToBeResident = 0x158; // char : 1
		constexpr auto bGlobalForceMipLevelsToBeResident = 0x158; // char : 1
		constexpr auto AddressX = 0x15c; // TextureAddress
		constexpr auto AddressY = 0x15d; // TextureAddress
		constexpr auto MinimumLoadedMips = 0x160; // int32_t
	}

	namespace n_UMountpointComponent { // : USceneComponent
		constexpr auto AcceptedMountableTypes = 0x2b8; // TArray<UMountableType*>
		constexpr auto DetachForwardDirectionRotator = 0x2c8; // FRotator
		constexpr auto DetachOffset = 0x2d4; // float
		constexpr auto UseOverrideMountedCollisionProfile = 0x2d8; // bool
		constexpr auto OverrideMountedCollisionProfileName = 0x2dc; // FCollisionProfileName
		constexpr auto ReplicatedMountedItem = 0x2f8; // UObject*
		constexpr auto IsMountingDisabled = 0x310; // bool
		constexpr auto MountedItemHadSimulatePhysicsEnabled = 0x311; // bool
		constexpr auto MountedItemPremountCollisionProfileName = 0x314; // FName
	}

	namespace n_UDiggingConfigResolverDataAsset { // : UDataAsset
		constexpr auto AudioDataAsset = 0x28; // UDiggingAudioDataAsset*
		constexpr auto AnimationDataAsset = 0x30; // UDiggingAnimationDataAsset*
		constexpr auto EffectsDataAsset = 0x38; // UDiggingEffectsDataAsset*
		constexpr auto BaseParamsDataAsset = 0x40; // UDiggingBaseParamsDataAsset*
		constexpr auto BuryingParamsDataAsset = 0x48; // UDiggingBuryParamsDataAsset*
	}

	namespace n_UPlayGroupNpcAnimationStepDesc { // : UBasePlayNpcAnimationStepDesc
		constexpr auto TargetNpc1 = 0xb8; // FQuestVariableActor
		constexpr auto TargetNpc2 = 0xc8; // FQuestVariableActor
		constexpr auto TargetNpc3 = 0xd8; // FQuestVariableActor
		constexpr auto SpeakingActorLocalisableNames = 0xe8; // TArray<FText>
	}

	namespace n_URewardComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UTaleQuestSelectEntryFromArrayStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTTaskNode { // : UBTNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_AAlwaysRelevantLightweightActor { // : AActor
		constexpr auto OwningActor = 0x3d0; // AActor*
	}

	namespace n_UDialogueVoice { // : UObject
		constexpr auto Gender = 0x28; // EGrammaticalGender
		constexpr auto Plurality = 0x29; // EGrammaticalNumber
		constexpr auto LocalizationGUID = 0x2c; // FGuid
	}

	namespace n_UShopViewModelComponent { // : UActorComponent
		constexpr auto MaxItemOffers = 0xc8; // uint32_t
		constexpr auto MaxHighPriorityItemOffers = 0xcc; // uint32_t
		constexpr auto MinVoyageOffers = 0xd0; // uint32_t
		constexpr auto MaxVoyagesOwned = 0xd4; // uint32_t
		constexpr auto IgnoredCompaniesForMaxVoyagesOwned = 0xd8; // TArray<UCompany*>
		constexpr auto StockRefreshTime = 0xe8; // int32_t
		constexpr auto PrioritisedVoyages = 0xf0; // TArray<UCategoryBase*>
		constexpr auto EmissaryLockedCommodityOfferDescription = 0x100; // FText
		constexpr auto OutOfStockLockedCommodityOfferDescription = 0x138; // FText
	}

	namespace n_UDeliverableRedirectionNonEmptyCollectorsChestContextHandler { // : UDeliverableRedirectionContextHandlerBase
		constexpr auto DestinationDescriptor = 0x28; // UDeliverableRedirectionDestinationDescriptorBase*
	}

	namespace n_UParticipantRadiusTrackerStepDesc { // : UTaleQuestStepDesc
		constexpr auto DurationBetweenChecks = 0x80; // float
		constexpr auto Location = 0x88; // FQuestVariableVector
		constexpr auto Radius = 0x98; // FQuestVariableFloat
	}

	namespace n_UBlockVolcanoTaleQuestServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto ActorNearIsland = 0x28; // FQuestVariableActor
	}

	namespace n_AShroudBreakerProxy { // : AFloatingItemProxy
		constexpr auto ShroudBreakerComponent = 0x790; // UShroudBreakerComponent*
		constexpr auto ItemProxyShipTrackerComponent = 0x798; // UItemProxyShipTrackerComponent*
		constexpr auto ItemProxyWatercraftTrackerComponent = 0x7a0; // UItemProxyWatercraftTrackerComponent*
		constexpr auto InteractableComponent = 0x7a8; // UInteractableComponent*
	}

	namespace n_UBountyMapLayout { // : UDataAsset
		constexpr auto Location = 0x28; // FTreasureMapWidgetText
		constexpr auto Descriptions = 0x48; // TArray<FTreasureMapWidgetText>
		constexpr auto Targets = 0x58; // TArray<FBountyMapLayoutTarget>
		constexpr auto Images = 0x68; // TArray<FTreasureMapWidgetTexture>
		constexpr auto GeneralText = 0x78; // TArray<FTreasureMapWidgetLocalisedText>
	}

	namespace n_UPhysicalMaterial { // : UObject
		constexpr auto Friction = 0x28; // float
		constexpr auto FrictionCombineMode = 0x2c; // EFrictionCombineMode
		constexpr auto bOverrideFrictionCombineMode = 0x2d; // bool
		constexpr auto Restitution = 0x30; // float
		constexpr auto RestitutionCombineMode = 0x34; // EFrictionCombineMode
		constexpr auto bOverrideRestitutionCombineMode = 0x35; // bool
		constexpr auto Density = 0x38; // float
		constexpr auto RaiseMassToPower = 0x3c; // float
		constexpr auto DestructibleDamageThresholdScale = 0x40; // float
		constexpr auto PhysicalMaterialProperty = 0x48; // UPhysicalMaterialPropertyBase*
		constexpr auto SurfaceType = 0x50; // EPhysicalSurface
	}

	namespace n_ACompass { // : APoseableMeshWieldableItem
		constexpr auto NamedNotificationInputComponent = 0x790; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x798; // UUsableWieldableComponent*
		constexpr auto SpinComponent = 0x7a0; // UCompassSpinComponent*
		constexpr auto NarratedCompassDirectionComponent = 0x7a8; // UNarratedCompassDirectionComponent*
		constexpr auto MeshToUse = 0x7b0; // UPoseableMeshComponent*
	}

	namespace n_UAddItemsFromDataToCollectorsChestStepBaseDesc { // : UMutateCollectorsChestStepDesc
		constexpr auto TrackItems = 0x90; // bool
		constexpr auto MarkItemsAsCritical = 0x91; // bool
		constexpr auto CriticalActorLostMessage = 0x98; // FText
	}

	namespace n_UNameplateSettings { // : UDeveloperSettings
		constexpr auto NameplateCollisionChannel = 0x38; // ECollisionChannel
	}

	namespace n_UTaleQuestGetNPCActorFromClueSiteStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UContestAwardScoreForItemDugUpStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAppearComponent { // : UActorComponent
		constexpr auto AppearOnStart = 0xd0; // bool
		constexpr auto MaterialParams = 0xd8; // TArray<FAppearMaterialParams>
		constexpr auto OnTriggerAppear = 0xe8; // FScriptMulticastDelegate
		constexpr auto OnTriggerDisappear = 0xf8; // FScriptMulticastDelegate
		constexpr auto OnSnapHidden = 0x108; // FScriptMulticastDelegate
		constexpr auto IsVisible = 0x118; // bool
		constexpr auto DynamicMaterials = 0x120; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UTunnelsOfTheDamnedLootFilterDataAsset { // : UDataAsset
		constexpr auto TargetProxyTypes = 0x28; // TArray<UClass*>
		constexpr auto IgnoredProxyTypes = 0x38; // TArray<UClass*>
		constexpr auto EmissaryFlagBaseType = 0x48; // UClass*
		constexpr auto IgnoreStorageContainers = 0x68; // bool
	}

	namespace n_UWieldableMysteriousNoteDataAsset { // : UDataAsset
		constexpr auto WieldableNoteDesc = 0x28; // UItemDesc*
		constexpr auto NoteLayout = 0x30; // UWieldableMysteriousNoteLayout*
	}

	namespace n_UKrakenActionCoordinatorComponent { // : UActorComponent
		constexpr auto CurrentPhaseEntry = 0xe0; // FCoordinatedKrakenPhaseAssetEntry
		constexpr auto CurrentAction = 0x120; // FProcessableActions
		constexpr auto NextAction = 0x138; // FProcessableActions
		constexpr auto CurrentActionReplicated = 0x150; // FProcessableActions
		constexpr auto NextActionReplicated = 0x168; // FProcessableActions
		constexpr auto CurrentlyRunningAction = 0x180; // FCoordinatedKrakenAction
		constexpr auto HasCurrentlyActiveAsset = 0x4e4; // bool
	}

	namespace n_UEmissaryLevelSettingsAsset { // : UDataAsset
		constexpr auto EmissaryLevelData = 0x28; // TArray<FEmissaryLevelEntry>
		constexpr auto BoostMultiplers = 0x38; // FEmissaryPointBoostMultipliers
		constexpr auto DefaultEmissaryFlagAssetReferences = 0x40; // FEmissaryFlagMeshReferences
		constexpr auto NumberOfCustomisedShipPartsToGainBoost = 0x60; // uint32_t
	}

	namespace n_UWatercraftTrackerComponent { // : UActorComponent
		constexpr auto CurrentWatercrafts = 0xd0; // TArray<AActor*>
	}

	namespace n_UNarratedCompassDirectionComponent { // : UNarratedAccessibilityComponent
		constexpr auto YawThreshold = 0xe8; // float
		constexpr auto CachedOrientationInterface = 0x218; // TScriptInterface<Class>
		constexpr auto Wielder = 0x228; // AActor*
		constexpr auto ObjectMessagingDispatcher = 0x230; // TScriptInterface<Class>
		constexpr auto CachedHUDMessagingDispatcher = 0x240; // TScriptInterface<Class>
	}

	namespace n_UVoyageRecipeDataAsset { // : UDataAsset
		constexpr auto Recipe = 0x28; // FVoyageRecipe
		constexpr auto IsVoyageLocationBound = 0x168; // bool
	}

	namespace n_ANavMeshBoundsVolume { // : AVolume
		constexpr auto SupportedAgents = 0x408; // FNavAgentSelector
		constexpr auto OriginatingLevelName = 0x40c; // FName
	}

	namespace n_UBTTask_MoveToFailOnDistanceChange { // : UBTTask_AthenaMoveTo
		constexpr auto FailOnDistanceBeingLess = 0xb8; // bool
		constexpr auto FailDistance = 0xbc; // float
	}

	namespace n_UTaleQuestUpdateCheckpointStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UVoyageGeneratorSimResult { // : UObject
		constexpr auto StartingLocation = 0xe8; // FVector
	}

	namespace n_UWaitUntilAllParticipantsLeaveRadiusStep { // : UParticipantRadiusTrackerStepDesc
		constexpr auto DurationBetweenChecks = 0x80; // float
		constexpr auto Location = 0x88; // FQuestVariableVector
		constexpr auto Radius = 0x98; // FQuestVariableFloat
	}

	namespace n_UKrakenParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FKrakenParams
	}

	namespace n_ASphereReflectionCapture { // : AReflectionCapture
		constexpr auto DrawCaptureRadius = 0x3d8; // UDrawSphereComponent*
	}

	namespace n_ULandscapeLayerInfoObject { // : UObject
		constexpr auto LayerName = 0x28; // FName
		constexpr auto PhysMaterial = 0x30; // UPhysicalMaterial*
		constexpr auto Hardness = 0x38; // float
	}

	namespace n_UTaleQuestReleaseVaultStepDesc { // : UTaleQuestStepDesc
		constexpr auto VaultHandleVar = 0x80; // FQuestVariableTaleResourceHandle
	}

	namespace n_UEmblemDefinitionDataAsset { // : UDataAsset
		constexpr auto Company = 0x28; // UCompany*
		constexpr auto CampaignId = 0x30; // FName
		constexpr auto CampaignTitle = 0x38; // FText
		constexpr auto CampaignDescription = 0x70; // FText
		constexpr auto MoreInfoFirst = 0xa8; // FText
		constexpr auto MoreInfoSecond = 0xe0; // FText
		constexpr auto MoreInfoFirstLocked = 0x118; // FText
		constexpr auto MoreInfoSecondLocked = 0x150; // FText
		constexpr auto CampaignImagePath = 0x188; // FStringAssetReference
		constexpr auto MarkAsNew = 0x198; // bool
		constexpr auto ActiveDuration = 0x1a0; // FEmblemDefinitionActiveDuration
		constexpr auto EmblemSets = 0x1b8; // TArray<FEmblemSetDefinition>
	}

	namespace n_UMovieScene3DTransformTrack { // : UMovieScenePropertyTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_AWaterVolume { // : AActor
		constexpr auto MaxAmount = 0x3d0; // float
		constexpr auto EnableRipplesFromOverlappingActors = 0x3d4; // bool
		constexpr auto RippleLocations = 0x3d8; // TArray<FVector>
		constexpr auto RippleGenerators = 0x3e8; // TArray<FVector>
		constexpr auto OverlappingActors = 0x3f8; // TArray<AActor*>
		constexpr auto RippleFrequency = 0x408; // float
		constexpr auto CurrentAmount = 0x40c; // float
		constexpr auto TargetAmount = 0x410; // float
		constexpr auto LerpRate = 0x414; // float
	}

	namespace n_UCatalogOfferLicence { // : UObject
		constexpr auto LicenceId = 0x28; // FGuid
	}

	namespace n_UEntitlementDesc { // : UDataAsset
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UPawnSensingComponent { // : UActorComponent
		constexpr auto HearingThreshold = 0xc8; // float
		constexpr auto LOSHearingThreshold = 0xcc; // float
		constexpr auto SightRadius = 0xd0; // float
		constexpr auto SensingInterval = 0xd4; // float
		constexpr auto HearingMaxSoundAge = 0xd8; // float
		constexpr auto bEnableSensingUpdates = 0xdc; // char : 1
		constexpr auto bOnlySensePlayers = 0xdc; // char : 1
		constexpr auto bSeePawns = 0xdc; // char : 1
		constexpr auto bHearNoises = 0xdc; // char : 1
		constexpr auto OnSeePawn = 0xe8; // FScriptMulticastDelegate
		constexpr auto OnHearNoise = 0xf8; // FScriptMulticastDelegate
		constexpr auto PeripheralVisionAngle = 0x108; // float
		constexpr auto PeripheralVisionCosine = 0x10c; // float
	}

	namespace n_UEnvQueryTest_InKrakenZone { // : UEnvQueryTest
		constexpr auto BufferRadius = 0x170; // float
	}

	namespace n_UEngineMessage { // : ULocalMessage
		constexpr auto FailedPlaceMessage = 0x28; // FString
		constexpr auto MaxedOutMessage = 0x38; // FString
		constexpr auto EnteredMessage = 0x48; // FString
		constexpr auto LeftMessage = 0x58; // FString
		constexpr auto GlobalNameChange = 0x68; // FString
		constexpr auto SpecEnteredMessage = 0x78; // FString
		constexpr auto NewPlayerMessage = 0x88; // FString
		constexpr auto NewSpecMessage = 0x98; // FString
	}

	namespace n_UMeleeWeaponMovementSpeedConfig { // : UDataAsset
		constexpr auto MovementSpeeds = 0x28; // TArray<FMeleeWeaponMovementSpeedPair>
	}

	namespace n_ATestLadderActor { // : AActor
		constexpr auto OnTopSplineComponent = 0x408; // USplineComponent*
		constexpr auto OffTopSplineComponent = 0x410; // USplineComponent*
		constexpr auto LadderPhysicsMaterial = 0x418; // UPhysicalMaterial*
	}

	namespace n_UFeatureToggledLevelsDataAsset { // : UDataAsset
		constexpr auto FeaturedToggledWorldLayouts = 0x28; // TArray<FFeatureToggledLevel>
		constexpr auto FeatureToggledLevels = 0x38; // TArray<FFeatureToggledLevels>
	}

	namespace n_UMechanismAnimationEvent_VFX { // : UMechanismAnimationEvent
		constexpr auto CachedParticleSystem = 0x40; // UParticleSystemComponent*
		constexpr auto CachedAttachParent = 0x48; // USceneComponent*
	}

	namespace n_ANavigationData { // : AActor
		constexpr auto RenderingComp = 0x3d0; // UPrimitiveComponent*
		constexpr auto NavDataConfig = 0x3d8; // FNavDataConfig
		constexpr auto bEnableDrawing = 0x430; // char : 1
		constexpr auto bRebuildAtRuntime = 0x430; // char : 1
		constexpr auto RuntimeGeneration = 0x434; // ERuntimeGenerationType
		constexpr auto bForceRebuildOnLoad = 0x438; // char : 1
		constexpr auto ObservedPathsTickInterval = 0x43c; // float
		constexpr auto SupportedAreas = 0x528; // TArray<FSupportedAreaData>
	}

	namespace n_UInterpTrackFloatProp { // : UInterpTrackFloatBase
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_AStaticMeshWieldableItem { // : AWieldableItem
		constexpr auto FirstPersonMesh = 0x428; // UPrimitiveComponent*
		constexpr auto ThirdPersonMesh = 0x430; // UPrimitiveComponent*
		constexpr auto ActionRulesComponent = 0x438; // UActionRulesComponent*
		constexpr auto AnimationKey = 0x440; // UWieldableItemAnimationStoreId*
		constexpr auto MessagingDispatcher = 0x448; // FObjectMessagingDispatcher
		constexpr auto AnimationOffset = 0x4f0; // FTransform
		constexpr auto EquipSfx = 0x520; // UWwiseEvent*
		constexpr auto UnequipSfx = 0x528; // UWwiseEvent*
		constexpr auto WielderLandedJumpSfx = 0x530; // UWwiseEvent*
		constexpr auto WielderFootstepLayerOneshot = 0x538; // UWwiseEvent*
		constexpr auto PlayerWalkSpeedRtpc = 0x540; // FName
		constexpr auto FirstTimeEquipSfx = 0x548; // UWwiseEvent*
		constexpr auto ForceUnequipSfx = 0x550; // bool
		constexpr auto ItemSize = 0x551; // EWieldableItemSize
		constexpr auto DetailAppearence = 0x558; // FDetailAppearenceDesc
		constexpr auto PropagateVisibilityToChildren = 0x588; // bool
		constexpr auto AINoiseTag = 0x58c; // FName
		constexpr auto ThirdPersonExtraMeshNames = 0x598; // TArray<FName>
		constexpr auto StashedExtraMeshNames = 0x5a8; // TArray<FName>
		constexpr auto StashedMeshComponent = 0x5b8; // UMeshComponent*
		constexpr auto StashedMeshAttachSocket = 0x5c0; // FName
		constexpr auto ServerWieldAttachSocket = 0x5c8; // FName
		constexpr auto Phrases = 0x5d0; // UPhrasesRadialDataAsset*
		constexpr auto CachedFirstPersonProxyMesh = 0x5d8; // UObject*
		constexpr auto CachedThirdPersonProxyMesh = 0x5e0; // UObject*
		constexpr auto ItemCategory = 0x710; // UItemCategory*
		constexpr auto ItemInfo = 0x718; // AItemInfo*
		constexpr auto InterpolatingItem = 0x720; // AInterpolatingItem*
		constexpr auto LastKnownWielder = 0x740; // TWeakObjectPtr<AActor>
		constexpr auto WieldableItemVfxComponent = 0x748; // UWieldableItemVfxComponent*
		constexpr auto ThirdPersonExtraMeshes = 0x750; // TArray<UMeshComponent*>
		constexpr auto StashedExtraMeshes = 0x760; // TArray<UMeshComponent*>
		constexpr auto OfferingEnabled = 0x789; // bool
	}

	namespace n_UGameplayDebuggerSettings { // : UObject
		constexpr auto CustomViewNames = 0x28; // FGDTCustomViewNames
		constexpr auto OverHead = 0x78; // bool
		constexpr auto Basic = 0x79; // bool
		constexpr auto BehaviorTree = 0x7a; // bool
		constexpr auto EQS = 0x7b; // bool
		constexpr auto EnableEQSOnHUD = 0x7c; // bool
		constexpr auto ActiveEQSIndex = 0x80; // int32_t
		constexpr auto Perception = 0x84; // bool
		constexpr auto GameView1 = 0x85; // bool
		constexpr auto GameView2 = 0x86; // bool
		constexpr auto GameView3 = 0x87; // bool
		constexpr auto GameView4 = 0x88; // bool
		constexpr auto GameView5 = 0x89; // bool
	}

	namespace n_ALandmarkBox { // : ALandmark
		constexpr auto DefaultShape = 0x658; // UShapeComponent*
	}

	namespace n_AServerMigrationSerialisationDetailsTestsActorThatMovesOnBeginPlay { // : AActor
		constexpr auto PrimitiveComponent = 0x3d0; // UPrimitiveComponent*
	}

	namespace n_USwingDoorAudioParams { // : UDataAsset
		constexpr auto SwingDoorPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto SwingDoorOpeningLoopStart = 0x30; // UWwiseEvent*
		constexpr auto SwingDoorOpeningLoopStop = 0x38; // UWwiseEvent*
		constexpr auto SwingDoorOpeningAdditionalStopSound = 0x40; // UWwiseEvent*
		constexpr auto SwingDoorClosingLoopStart = 0x48; // UWwiseEvent*
		constexpr auto SwingDoorClosingLoopStop = 0x50; // UWwiseEvent*
		constexpr auto SwingDoorClosingAdditionalStopSound = 0x58; // UWwiseEvent*
	}

	namespace n_UPLQuestLocationDataAsset { // : UDataAsset
		constexpr auto StartLocationActor = 0x28; // AActor*
		constexpr auto EndLocationActor = 0x48; // AActor*
		constexpr auto PageAuthorName = 0x68; // FName
	}

	namespace n_UAddNPCOnShipStepDesc { // : UTaleQuestStepDesc
		constexpr auto NPCOnShipDataAsset = 0x80; // UNPCOnShipDataAsset*
		constexpr auto NPCOnShipManager = 0x88; // FQuestVariableGuid
	}

	namespace n_ACapstan { // : AActor
		constexpr auto Parameters = 0x408; // FCapstanParams
		constexpr auto MaxReleaseAngle = 0x41c; // float
		constexpr auto MaxReleaseHeight = 0x420; // float
		constexpr auto MaxAngle = 0x424; // float
		constexpr auto StartRaised = 0x428; // bool
		constexpr auto IntentCombinerComponent = 0x430; // UControllableIntentCombinerComponent*
		constexpr auto RootSceneComponent = 0x438; // USceneComponent*
		constexpr auto MeshComponent = 0x440; // UStaticMeshComponent*
		constexpr auto CapstanReleaseComponent = 0x448; // UChildActorComponent*
		constexpr auto CustomizationComponent = 0x450; // UReplicatedShipPartCustomizationComponent*
		constexpr auto CapstanArms = 0x458; // TArray<ACapstanArm*>
		constexpr auto AudioParameters = 0x468; // FCapstanAudioParams
		constexpr auto CanSpinInfinitely = 0x4d0; // bool
		constexpr auto CapstanDamageComponent = 0x4e8; // UShipDamageableComponent*
		constexpr auto ChanceToDropTheAnchorOnDamage = 0x4f0; // float
		constexpr auto ShipPartFireCellActorSpaceLocation = 0x4f4; // FVector
		constexpr auto NetState = 0x538; // FCapstanNetState
		constexpr auto CapstanEmitter = 0x540; // FWwiseEmitter
		constexpr auto CapstanDamageLevelAudio = 0x560; // UDamageableShipPartAudioParams*
		constexpr auto CapstanDamageParticleSystem = 0x568; // UParticleSystem*
		constexpr auto EventDispatcher = 0x570; // FObjectMessagingDispatcher
		constexpr auto IsCursed = 0x79a; // bool
		constexpr auto CursedIntent = 0x79c; // float
	}

	namespace n_USpawnPhasedActorStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // USpawnPhasedActorStepDesc*
	}

	namespace n_AVoyageProposalContainer { // : AModalInteractionProxy
		constexpr auto VoyageSelectionVoteTag = 0x4b8; // FName
		constexpr auto VoyageCancelVoteTag = 0x4c0; // FName
		constexpr auto TaleSelectionVoteTag = 0x4c8; // FName
		constexpr auto TaleCancelVoteTag = 0x4d0; // FName
		constexpr auto CancelExistingPrimaryVoyages = 0x4d8; // bool
		constexpr auto VoyageDescAssetString = 0x4e0; // FString
		constexpr auto OptionalMapTableVoyageDescOverride = 0x4f0; // FString
		constexpr auto VoyageDescAsset = 0x500; // UVoyageDescDataAsset*
		constexpr auto IslandEventComponent = 0x508; // UIslandEventComponent*
		constexpr auto CrewShipManifest = 0x510; // ACrewShipManifest*
		constexpr auto VoyageSelectionVotableObjectViews = 0x518; // TArray<AActor*>
		constexpr auto VoyageCancelVotableObjectView = 0x528; // AActor*
		constexpr auto TaleManifests = 0x530; // TArray<ACrewShipManifest*>
		constexpr auto TaleVoteViews = 0x540; // TMap<AActor*, FGuid>
		constexpr auto TaleCancelVotableObjectView = 0x590; // AActor*
	}

	namespace n_UNavArea { // : UObject
		constexpr auto DefaultCost = 0x28; // float
		constexpr auto FixedAreaEnteringCost = 0x2c; // float
		constexpr auto DrawColor = 0x30; // FColor
		constexpr auto SupportedAgents = 0x34; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x38; // char : 1
		constexpr auto bSupportsAgent1 = 0x38; // char : 1
		constexpr auto bSupportsAgent2 = 0x38; // char : 1
		constexpr auto bSupportsAgent3 = 0x38; // char : 1
		constexpr auto bSupportsAgent4 = 0x38; // char : 1
		constexpr auto bSupportsAgent5 = 0x38; // char : 1
		constexpr auto bSupportsAgent6 = 0x38; // char : 1
		constexpr auto bSupportsAgent7 = 0x38; // char : 1
		constexpr auto bSupportsAgent8 = 0x39; // char : 1
		constexpr auto bSupportsAgent9 = 0x39; // char : 1
		constexpr auto bSupportsAgent10 = 0x39; // char : 1
		constexpr auto bSupportsAgent11 = 0x39; // char : 1
		constexpr auto bSupportsAgent12 = 0x39; // char : 1
		constexpr auto bSupportsAgent13 = 0x39; // char : 1
		constexpr auto bSupportsAgent14 = 0x39; // char : 1
		constexpr auto bSupportsAgent15 = 0x39; // char : 1
	}

	namespace n_ULevelSequence { // : UMovieSceneSequence
		constexpr auto MovieScene = 0x2a8; // UMovieScene*
		constexpr auto ObjectReferences = 0x2b0; // FLevelSequenceObjectReferenceMap
		constexpr auto PossessedObjects = 0x350; // TMap<FString, FLevelSequenceObject>
	}

	namespace n_UParticleModuleMeshMaterial { // : UParticleModuleMaterialBase
		constexpr auto MeshMaterials = 0x50; // TArray<UMaterialInterface*>
	}

	namespace n_UItemSnapshotMetaGenerator { // : UObject
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UWaitForMechanismActivationStepDesc { // : UTaleQuestStepDesc
		constexpr auto Action = 0x80; // FQuestVariableActor
	}

	namespace n_ANPC { // : AModalInteractionProxy
		constexpr auto Id = 0x4c8; // FGuid
		constexpr auto InteractableGrammaticalGenderComponent = 0x4d8; // UInteractableGrammaticalGenderComponent*
		constexpr auto CosmeticItemAnimationComponent = 0x4e0; // UCosmeticItemAnimationComponent*
		constexpr auto BeckonComponent = 0x4e8; // UBeckonComponent*
	}

	namespace n_UTornMapParams { // : UDataAsset
		constexpr auto TearingParams = 0x28; // TArray<FTornMapTearingParams>
		constexpr auto MarkTexture = 0x38; // FStringAssetReference
		constexpr auto MarkScale = 0x48; // float
	}

	namespace n_UTunnelsOfTheDamnedService { // : UObject
		constexpr auto Params = 0x30; // UTunnelsOfTheDamnedServiceParams*
		constexpr auto World = 0x38; // UWorld*
		constexpr auto TunnelInstances = 0x40; // TArray<FTunnelOfTheDamnedInstance>
		constexpr auto OnTunnelOfTheDamnedBaseTelemetryFragmentListenerHandle = 0x140; // FTelemetryFragmentListenerHandle
	}

	namespace n_UMaterialExpressionLandscapeLayerBlend { // : UMaterialExpression
		constexpr auto Layers = 0x70; // TArray<FLayerBlendInput>
		constexpr auto ExpressionGUID = 0x80; // FGuid
	}

	namespace n_ACargoRunMap { // : ATreasureMap
		constexpr auto CanvasWidth = 0x808; // int32_t
		constexpr auto CanvasHeight = 0x80c; // int32_t
		constexpr auto Font = 0x810; // UFont*
		constexpr auto FontScale = 0x818; // float
		constexpr auto FontLineSpacingScale = 0x81c; // float
		constexpr auto CargoRunMapLayout = 0x840; // UCargoRunMapLayout*
		constexpr auto Contents = 0x848; // FCargoRunMapContents
	}

	namespace n_UNavArea_Default { // : UNavArea
		constexpr auto DefaultCost = 0x28; // float
		constexpr auto FixedAreaEnteringCost = 0x2c; // float
		constexpr auto DrawColor = 0x30; // FColor
		constexpr auto SupportedAgents = 0x34; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x38; // char : 1
		constexpr auto bSupportsAgent1 = 0x38; // char : 1
		constexpr auto bSupportsAgent2 = 0x38; // char : 1
		constexpr auto bSupportsAgent3 = 0x38; // char : 1
		constexpr auto bSupportsAgent4 = 0x38; // char : 1
		constexpr auto bSupportsAgent5 = 0x38; // char : 1
		constexpr auto bSupportsAgent6 = 0x38; // char : 1
		constexpr auto bSupportsAgent7 = 0x38; // char : 1
		constexpr auto bSupportsAgent8 = 0x39; // char : 1
		constexpr auto bSupportsAgent9 = 0x39; // char : 1
		constexpr auto bSupportsAgent10 = 0x39; // char : 1
		constexpr auto bSupportsAgent11 = 0x39; // char : 1
		constexpr auto bSupportsAgent12 = 0x39; // char : 1
		constexpr auto bSupportsAgent13 = 0x39; // char : 1
		constexpr auto bSupportsAgent14 = 0x39; // char : 1
		constexpr auto bSupportsAgent15 = 0x39; // char : 1
	}

	namespace n_UTaleRemoveStormAvoidanceAreaStepDesc { // : UTaleQuestStepDesc
		constexpr auto Location = 0x80; // FQuestVariableVector
	}

	namespace n_AAthenaGameState { // : AServiceProviderGameState
		constexpr auto WindService = 0x5b8; // AWindService*
		constexpr auto PlayerManagerService = 0x5c0; // APlayerManagerService*
		constexpr auto ShipService = 0x5c8; // AShipService*
		constexpr auto WatercraftService = 0x5d0; // AWatercraftService*
		constexpr auto TimeService = 0x5d8; // ATimeService*
		constexpr auto HealthService = 0x5e0; // UHealthCustomizationService*
		constexpr auto CustomWeatherService = 0x5e8; // UCustomWeatherService*
		constexpr auto CustomStatusesService = 0x5f0; // UCustomStatusesService*
		constexpr auto WaterService = 0x5f8; // AFFTWaterService*
		constexpr auto StormService = 0x600; // AStormService*
		constexpr auto CrewService = 0x608; // ACrewService*
		constexpr auto ContestZoneService = 0x610; // AContestZoneService*
		constexpr auto ContestRowboatsService = 0x618; // AContestRowboatsService*
		constexpr auto IslandService = 0x620; // AIslandService*
		constexpr auto NPCService = 0x628; // ANPCService*
		constexpr auto SkellyFortService = 0x630; // ASkellyFortService*
		constexpr auto DeepSeaRegionService = 0x638; // ADeepSeaRegionService*
		constexpr auto AIDioramaService = 0x640; // AAIDioramaService*
		constexpr auto AshenLordEncounterService = 0x648; // AAshenLordEncounterService*
		constexpr auto AggressiveGhostShipsEncounterService = 0x650; // AAggressiveGhostShipsEncounterService*
		constexpr auto TallTaleService = 0x658; // ATallTaleService*
		constexpr auto AIShipObstacleService = 0x660; // AAIShipObstacleService*
		constexpr auto AIShipService = 0x668; // AAIShipService*
		constexpr auto AITargetService = 0x670; // AAITargetService*
		constexpr auto ShipLiveryCatalogueService = 0x678; // UShipLiveryCatalogueService*
		constexpr auto ContestManagerService = 0x680; // AContestManagerService*
		constexpr auto DrawDebugService = 0x688; // ADrawDebugService*
		constexpr auto WorldEventZoneService = 0x690; // AWorldEventZoneService*
		constexpr auto WorldResourceRegistry = 0x698; // UWorldResourceRegistry*
		constexpr auto KrakenService = 0x6a0; // AKrakenService*
		constexpr auto PlayerNameService = 0x6a8; // UPlayerNameService*
		constexpr auto TinySharkService = 0x6b0; // ATinySharkService*
		constexpr auto ProjectileService = 0x6b8; // AProjectileService*
		constexpr auto LaunchableProjectileService = 0x6c0; // ULaunchableProjectileService*
		constexpr auto ServerNotificationsService = 0x6c8; // UServerNotificationsService*
		constexpr auto AIManagerService = 0x6d0; // AAIManagerService*
		constexpr auto AIEncounterService = 0x6d8; // AAIEncounterService*
		constexpr auto AIEncounterGenerationService = 0x6e0; // AAIEncounterGenerationService*
		constexpr auto EncounterService = 0x6e8; // UEncounterService*
		constexpr auto GameEventSchedulerService = 0x6f0; // UGameEventSchedulerService*
		constexpr auto HideoutService = 0x6f8; // UHideoutService*
		constexpr auto StreamedLevelService = 0x700; // UAthenaStreamedLevelService*
		constexpr auto LocationProviderService = 0x708; // ULocationProviderService*
		constexpr auto HoleService = 0x710; // AHoleService*
		constexpr auto PlayerBuriedItemService = 0x718; // APlayerBuriedItemService*
		constexpr auto LoadoutService = 0x720; // ULoadoutService*
		constexpr auto OcclusionService = 0x728; // UOcclusionService*
		constexpr auto PetsService = 0x730; // UPetsService*
		constexpr auto AthenaAITeamsService = 0x738; // UAthenaAITeamsService*
		constexpr auto AllianceService = 0x740; // AAllianceService*
		constexpr auto MaterialAccessibilityService = 0x748; // UMaterialAccessibilityService*
		constexpr auto ReapersMarkService = 0x750; // AReapersMarkService*
		constexpr auto EmissaryLevelService = 0x758; // AEmissaryLevelService*
		constexpr auto CampaignService = 0x760; // ACampaignService*
		constexpr auto StoryService = 0x768; // AStoryService*
		constexpr auto StorySpawnedActorsService = 0x770; // AStorySpawnedActorsService*
		constexpr auto FlamesOfFateSettingsService = 0x778; // AFlamesOfFateSettingsService*
		constexpr auto ServiceStatusNotificationsService = 0x780; // AServiceStatusNotificationsService*
		constexpr auto MigrationService = 0x788; // UMigrationService*
		constexpr auto ShroudBreakerService = 0x790; // AShroudBreakerService*
		constexpr auto ServerUpdateReportingService = 0x798; // UServerUpdateReportingService*
		constexpr auto GenericMarkerService = 0x7a0; // AGenericMarkerService*
		constexpr auto MechanismsService = 0x7a8; // AMechanismsService*
		constexpr auto MerchantContractsService = 0x7b0; // UMerchantContractsService*
		constexpr auto ShipFactory = 0x7b8; // UShipFactory*
		constexpr auto RewindPhysicsService = 0x7c0; // URewindPhysicsService*
		constexpr auto NotificationMessagesDataAsset = 0x7c8; // UNotificationMessagesDataAsset*
		constexpr auto ProjectileCooldownService = 0x7d0; // AProjectileCooldownService*
		constexpr auto IslandReservationService = 0x7d8; // UIslandReservationService*
		constexpr auto PortalService = 0x7e0; // APortalService*
		constexpr auto MeshMemoryConstraintService = 0x7e8; // UMeshMemoryConstraintService*
		constexpr auto BootyStorageService = 0x7f0; // ABootyStorageService*
		constexpr auto SpireService = 0x7f8; // ASpireService*
		constexpr auto FireworkService = 0x800; // AFireworkService*
		constexpr auto AirGivingService = 0x808; // UAirGivingService*
		constexpr auto CutsceneService = 0x810; // UCutsceneService*
		constexpr auto CargoRunService = 0x818; // ACargoRunService*
		constexpr auto CommodityDemandService = 0x820; // ACommodityDemandService*
		constexpr auto DebugTeleportationDestinationService = 0x828; // ADebugTeleportationDestinationService*
		constexpr auto SeasonProgressionUIService = 0x830; // ASeasonProgressionUIService*
		constexpr auto TransientActorService = 0x838; // UTransientActorService*
		constexpr auto TunnelsOfTheDamnedService = 0x840; // UTunnelsOfTheDamnedService*
		constexpr auto WorldSequenceService = 0x848; // UWorldSequenceService*
		constexpr auto ItemLifetimeManagerService = 0x850; // UItemLifetimeManagerService*
		constexpr auto SeaFortsService = 0x858; // USeaFortsService*
		constexpr auto BeckonService = 0x860; // ABeckonService*
		constexpr auto VolcanoService = 0x868; // UVolcanoService*
		constexpr auto ShipAnnouncementService = 0x870; // UShipAnnouncementService*
		constexpr auto ServiceCoordinator = 0x9f8; // FGameServiceCoordinator
		constexpr auto ChatComponents = 0xa40; // TArray<TScriptInterface<Class>>
		constexpr auto IsXboxGamePadOnlyServer = 0xad0; // bool
		constexpr auto ShouldDisableAsyncOcclusionCheck = 0xad1; // bool
		constexpr auto SubPlayMode = 0xad8; // FString
		constexpr auto CustomVaultService = 0xae8; // UCustomVaultService*
		constexpr auto EntityEnumerationService = 0xaf0; // UEntityEnumerationService*
	}

	namespace n_ULeaderboardComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UMaterialExpressionBumpOffset { // : UMaterialExpression
		constexpr auto Coordinate = 0x70; // FExpressionInput
		constexpr auto Height = 0xa8; // FExpressionInput
		constexpr auto HeightRatioInput = 0xe0; // FExpressionInput
		constexpr auto HeightRatio = 0x118; // float
		constexpr auto ReferencePlane = 0x11c; // float
		constexpr auto ConstCoordinate = 0x120; // uint32_t
	}

	namespace n_UAIWeightedProbabilityRangeOfRangesRankProgression { // : UDataAsset
		constexpr auto RankMappings = 0x28; // TArray<FAIWeightedProbabilityRangeOfRangesRankMapping>
		constexpr auto NumberOfRanks = 0x38; // int32_t
	}

	namespace n_ADisableGeyserMechanismAction { // : AActor
		constexpr auto MechanismActionComponent = 0x3d0; // UMechanismActionComponent*
		constexpr auto GeysersToDisable = 0x3d8; // TArray<AGeyser*>
	}

	namespace n_AWorldSettings { // : AInfo
		constexpr auto bEnableWorldBoundsChecks = 0x3d8; // char : 1
		constexpr auto bEnableNavigationSystem = 0x3d8; // char : 1
		constexpr auto WorldCompositionSetting = 0x3dc; // EWorldCompositionSetting
		constexpr auto InstancedNavMeshesDataAssetOveride = 0x3e0; // FStringAssetReference
		constexpr auto bEnableWorldOriginRebasing = 0x3f0; // char : 1
		constexpr auto bWorldGravitySet = 0x3f0; // char : 1
		constexpr auto bGlobalGravitySet = 0x3f0; // char : 1
		constexpr auto KillZ = 0x3f4; // float
		constexpr auto KillZDamageType = 0x3f8; // UDamageType*
		constexpr auto GlobalGravityZ = 0x400; // float
		constexpr auto DefaultPhysicsVolumeClass = 0x408; // ADefaultPhysicsVolume*
		constexpr auto PhysicsCollisionHandlerClass = 0x410; // UPhysicsCollisionHandler*
		constexpr auto DefaultGameMode = 0x418; // AGameMode*
		constexpr auto DefaultMapPrefixes = 0x420; // TArray<FGameModePrefix>
		constexpr auto GameNetworkManagerClass = 0x430; // AGameNetworkManager*
		constexpr auto PackedLightAndShadowMapTextureSize = 0x438; // int32_t
		constexpr auto bMinimizeBSPSections = 0x43c; // char : 1
		constexpr auto DefaultColorScale = 0x440; // FVector
		constexpr auto bPrecomputeVisibility = 0x44c; // char : 1
		constexpr auto bPlaceCellsOnlyAlongCameraTracks = 0x44c; // char : 1
		constexpr auto VisibilityCellSize = 0x450; // int32_t
		constexpr auto VisibilityAggressiveness = 0x454; // EVisibilityAggressiveness
		constexpr auto bForceNoPrecomputedLighting = 0x458; // char : 1
		constexpr auto LightmassSettings = 0x45c; // FLightmassWorldInfoSettings
		constexpr auto LevelLightingQuality = 0x4a0; // ELightingBuildQuality
		constexpr auto DefaultReverbSettings = 0x4a8; // FReverbSettings
		constexpr auto DefaultAmbientZoneSettings = 0x4c0; // FInteriorSettings
		constexpr auto DefaultBaseSoundMix = 0x4e8; // USoundMix*
		constexpr auto WorldToMeters = 0x4f0; // float
		constexpr auto BookMarks = 0x4f8; // UBookMark* [0xa]
		constexpr auto TimeDilation = 0x548; // float
		constexpr auto MatineeTimeDilation = 0x54c; // float
		constexpr auto DemoPlayTimeDilation = 0x550; // float
		constexpr auto bHighPriorityLoading = 0x554; // char : 1
		constexpr auto bHighPriorityLoadingLocal = 0x554; // char : 1
		constexpr auto ReplicationViewers = 0x558; // TArray<FNetViewer>
		constexpr auto AssetUserData = 0x568; // TArray<UAssetUserData*>
		constexpr auto WorldGravityZ = 0x578; // float
		constexpr auto Pauser = 0x580; // APlayerState*
	}

	namespace n_UCutscenePoolTypeExhaustible { // : UCutscenePoolType
		constexpr auto DialogueSelectedRandomly = 0x28; // bool
		constexpr auto AvailableIndices = 0x30; // TArray<int32_t>
		constexpr auto OriginalIndices = 0x48; // TArray<int32_t>
	}

	namespace n_UBTDecorator_CanBlock { // : UBTDecorator_BaseConditional
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UAnimatedCosmeticItemAnimationInstance { // : UAnimInstance
		constexpr auto OneShotSequences = 0x448; // TArray<FNPCOneShotAnimationElement>
		constexpr auto ContinuousSequences = 0x458; // TArray<FNPCContinuousAnimationElement>
		constexpr auto ParentCharacterAnimationInstance = 0x468; // UAnimInstance*
		constexpr auto CurrentPlayingMontage = 0x470; // UAnimMontage*
		constexpr auto OneShot = 0x478; // UAnimSequenceBase*
		constexpr auto ContinuousIn = 0x480; // UAnimSequenceBase*
		constexpr auto ContinuousLoopA = 0x488; // UAnimSequenceBase*
		constexpr auto ContinuousLoopB = 0x490; // UAnimSequenceBase*
		constexpr auto ContinuousOut = 0x498; // UAnimSequenceBase*
	}

	namespace n_UShantyService { // : UObject
		constexpr auto EnsembleActors = 0x30; // TArray<AEnsemble*>
		constexpr auto ShantySettings = 0x40; // UShantySettings*
	}

	namespace n_AWorldEventZoneService { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTextureRenderTarget2D { // : UTextureRenderTarget
		constexpr auto SizeX = 0x140; // int32_t
		constexpr auto SizeY = 0x144; // int32_t
		constexpr auto ClearColor = 0x148; // FLinearColor
		constexpr auto AddressX = 0x158; // TextureAddress
		constexpr auto AddressY = 0x159; // TextureAddress
		constexpr auto bForceLinearGamma = 0x15c; // char : 1
		constexpr auto bHDR = 0x15c; // char : 1
		constexpr auto bAutoGenerateMips = 0x15c; // char : 1
		constexpr auto OverrideFormat = 0x160; // EPixelFormat
		constexpr auto bDontClearOnCreation = 0x161; // bool
	}

	namespace n_APawn { // : AActor
		constexpr auto bUseControllerRotationPitch = 0x3d8; // char : 1
		constexpr auto bUseControllerRotationYaw = 0x3d8; // char : 1
		constexpr auto bUseControllerRotationRoll = 0x3d8; // char : 1
		constexpr auto bCanAffectNavigationGeneration = 0x3d8; // char : 1
		constexpr auto BaseEyeHeight = 0x3dc; // float
		constexpr auto AutoPossessPlayer = 0x3e0; // EAutoReceiveInput
		constexpr auto AutoPossessAI = 0x3e1; // EAutoPossessAI
		constexpr auto AIControllerClass = 0x3e8; // AController*
		constexpr auto PlayerState = 0x3f0; // APlayerState*
		constexpr auto RemoteViewPitch = 0x3f8; // char
		constexpr auto LastHitBy = 0x400; // AController*
		constexpr auto Controller = 0x408; // AController*
		constexpr auto ControlInputVector = 0x428; // FVector
		constexpr auto LastControlInputVector = 0x434; // FVector
	}

	namespace n_UWardrobeDataAsset { // : UDataAsset
		constexpr auto ExcludeDataAssets = 0xc8; // TArray<UWardrobeExcludeDataAsset*>
		constexpr auto AssetMap = 0xd8; // TArray<FMeshPatchEntry>
	}

	namespace n_ATestDockableCutscene { // : ADockableCutscene
		constexpr auto FirstPersonAnimToPlay = 0x510; // UAnimSequence*
		constexpr auto DockableAnimToPlay = 0x518; // UAnimMontage*
		constexpr auto SkeletalMeshComponent = 0x520; // USkeletalMeshComponent*
		constexpr auto DetachCutOffTime = 0x528; // float
		constexpr auto InteractableComponent = 0x530; // UInteractableComponent*
		constexpr auto DockableCutsceneName = 0x538; // FText
		constexpr auto InteractWithCutsceneText = 0x570; // FText
		constexpr auto DockingSocketName = 0x5a8; // FName
	}

	namespace n_UPuzzleStatueInteractableComponent { // : UInteractableComponent
		constexpr auto ActionRulesComponent = 0x118; // UActionRulesComponent*
	}

	namespace n_UPlayerHeroStatsComponent { // : UActorComponent
		constexpr auto HeroStats = 0xc8; // TArray<FPlayerHeroStatUnit>
		constexpr auto ServerValues = 0xd8; // TArray<int64_t>
	}

	namespace n_UIslandTelemetrySubjectComponent { // : UTelemetrySubjectComponent
		constexpr auto SubjectName = 0xd0; // FString
		constexpr auto SubjectID = 0xe0; // FString
	}

	namespace n_UAIPerCrewSpawner { // : UAISpawner
		constexpr auto DefaultRespawnTimerRanges = 0x428; // UAIWeightedProbabilityRangeOfRangesRankProgression*
		constexpr auto MaxNumOfCrewsToSpawnFor = 0x430; // int32_t
		constexpr auto ActivateBySettingFootOnIsland = 0x434; // bool
		constexpr auto UseRespawnTimerForFirstSpawn = 0x435; // bool
		constexpr auto AssociateSpawnsWithSpecificCrews = 0x436; // bool
		constexpr auto PerceiveTriggerActorOnSpawn = 0x437; // bool
		constexpr auto EnforceRespawnTimeAfterCrewLeaves = 0x438; // bool
		constexpr auto IgnoreSpawningGracePeriodForNewCrew = 0x439; // bool
	}

	namespace n_ACoordinatedKraken { // : AActor
		constexpr auto OnSpecialEventDelegate = 0x3d8; // FScriptMulticastDelegate
		constexpr auto TentacleType = 0x3e8; // AKrakenAnimatedTentacle*
		constexpr auto HeadType = 0x3f0; // AKrakenHead*
		constexpr auto KrakenRoot = 0x3f8; // USceneComponent*
		constexpr auto KrakenActionCoordinator = 0x400; // UKrakenActionCoordinatorComponent*
		constexpr auto PhaseAssets = 0x408; // TArray<FCoordinatedKrakenPhaseAssetEntry>
		constexpr auto TentacleSpawnInfo = 0x440; // TArray<FCoordinatedKrakenTentacleSpawnInfo>
		constexpr auto HeadSpawnTransform = 0x450; // FTransform
		constexpr auto SpawnedHead = 0x480; // AKrakenHead*
		constexpr auto TargetActor = 0x488; // AActor*
		constexpr auto NetworkClusterEventRoom = 0x490; // ANetworkClusterEventRoom*
		constexpr auto ReplicatedTargetActorOverride = 0x498; // EOverrideState
	}

	namespace n_UHasBeenBuriedByAPlayerConditional { // : UTargetedStatCondition
		constexpr auto TargetSelector = 0x28; // UStatConditionTargetSelector*
	}

	namespace n_AAthenaAIShipController { // : AAthenaAIControllerBase
		constexpr auto BTAsset = 0x618; // UBehaviorTree*
		constexpr auto ShipParamsDataAsset = 0x638; // UAthenaAIShipControllerParamsDataAsset*
		constexpr auto StatusEffectManagerComponent = 0x640; // UStatusEffectManagerComponent*
		constexpr auto AnchorDynamicsParams = 0x648; // FStandardAnchorDynamicsParameters
	}

	namespace n_UAthenaAISettings { // : UDeveloperSettings
		constexpr auto AITypesAsset = 0x38; // FStringAssetReference
		constexpr auto AISpawnContextListAsset = 0x48; // FStringAssetReference
		constexpr auto FallbackAIDifficultyRank = 0x58; // int32_t
		constexpr auto MaxNumOfSpawnedActors = 0x5c; // int32_t
		constexpr auto MaxPlayerEquivalentAIsPerRegion = 0x60; // int32_t
		constexpr auto MaxWorldAICostUnitsForWorld = 0x64; // int32_t
		constexpr auto AIRegionCostUnitsForPlayer = 0x68; // int32_t
		constexpr auto CharacterNetRelevancy = 0x6c; // float
		constexpr auto CharacterRegionDensityCheckTimer = 0x70; // float
		constexpr auto CharacterWorldDensityCheckTimer = 0x74; // float
		constexpr auto DistanceToPlayerToRaiseSpawnPriority = 0x78; // float
		constexpr auto MinRetryingCanSpawnRequestTime = 0x7c; // float
		constexpr auto MaxRetryingCanSpawnRequestTime = 0x80; // float
		constexpr auto MinRetryingLocationCheckTime = 0x84; // float
		constexpr auto MaxRetryingLocationCheckTime = 0x88; // float
		constexpr auto CharacterAINoiseTickInterval = 0x8c; // float
		constexpr auto PeriodicAINoiseComponentTickInterval = 0x90; // float
		constexpr auto FaunaPlayerProximityDormancyRange = 0x94; // float
		constexpr auto FaunaPlayerProximityTickTime = 0x98; // float
		constexpr auto FaunaTimeOutOfPlayerProximityForDormancy = 0x9c; // float
		constexpr auto DefaultNavAgentCapsuleRadius = 0xa0; // float
		constexpr auto DefaultNavAgentCapsuleHalfHeight = 0xa4; // float
		constexpr auto MinDelayBeforeRetryingUnsuccessfulWave = 0xa8; // float
		constexpr auto MaxDelayBeforeRetryingUnsuccessfulWave = 0xac; // float
		constexpr auto AIEncounterServiceAssetClassFileLocation = 0xb0; // FStringAssetReference
		constexpr auto AIEncounterGenerationServiceAssetClassFileLocation = 0xc0; // FStringAssetReference
		constexpr auto AICharacterWaterInteractionCollisionProfileName = 0xd0; // FName
	}

	namespace n_AShovelHole { // : AHole
		constexpr auto ParallaxParameterName = 0x400; // FName
		constexpr auto Decal = 0x408; // UDecalComponent*
		constexpr auto ParallaxValue = 0x410; // float
		constexpr auto ContainedActor = 0x418; // AActor*
		constexpr auto DiggingComponent = 0x428; // UDiggingComponent*
		constexpr auto StatTriggerForDiggingItems = 0x438; // UConditionalStatsTriggerType*
	}

	namespace n_UVenomComponent { // : UActorComponent
		constexpr auto VenomStatusUsed = 0xd0; // FStatus
		constexpr auto CollisionChannel = 0xe8; // ECollisionChannel
		constexpr auto RangeDistance = 0xec; // float
		constexpr auto RangeAngle = 0xf0; // float
		constexpr auto EffectDuration = 0xf4; // float
	}

	namespace n_AMultiCrewSkeletonThrone { // : ASkeletonThrone
		constexpr auto RootSceneComponent = 0x3d8; // USceneComponent*
		constexpr auto MeshComponent = 0x3e0; // UStaticMeshComponent*
		constexpr auto EmoteCollisionComponent = 0x3e8; // UShapeComponent*
		constexpr auto EmoteNames = 0x3f0; // TArray<FName>
		constexpr auto ThroneStat = 0x400; // FPlayerStat
		constexpr auto SatOnStatFiredReactions = 0x408; // TArray<FLandmarkReactionKeyFrame>
		constexpr auto ReactionPlayer = 0x418; // ALandmarkReactionPlayer*
	}

	namespace n_USoundNodeGroupControl { // : USoundNode
		constexpr auto GroupSizes = 0x38; // TArray<int32_t>
	}

	namespace n_ALauncherParentMock { // : AActor
		constexpr auto IgnoreActors = 0x3e8; // TArray<AActor*>
	}

	namespace n_UAmmoStoreComponent { // : UActorComponent
		constexpr auto MaxAmmo = 0xd0; // int32_t
		constexpr auto ReloadSFX = 0xd8; // UWwiseEvent*
		constexpr auto RestockSFX = 0xe0; // UWwiseEvent*
		constexpr auto CurrentAmmo = 0xe8; // int32_t
	}

	namespace n_ATriggerBox { // : ATriggerBase
		constexpr auto CollisionComponent = 0x3d0; // UShapeComponent*
		constexpr auto SpriteComponent = 0x3d8; // UBillboardComponent*
	}

	namespace n_UTaleQuestClearTaleProposalsStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UEquipmentChestViewModelComponent { // : UPossessionsChestViewModel
		constexpr auto Categories = 0x180; // TArray<UItemCategory*>
		constexpr auto IncludeAllCategory = 0x190; // bool
	}

	namespace n_UEditableGameplayTagQueryExpression_AllExprMatch { // : UEditableGameplayTagQueryExpression
		constexpr auto Expressions = 0x28; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UMaterialExpressionPerInstanceRandom { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UMechanismMaterialMap_C { // : UMechanismMaterialMap
		constexpr auto MaterialClusters = 0x28; // TArray<FMechanismMaterialMapEntry>
	}

	namespace n_UStatusResponseHealthChange { // : UStatusResponse
		constexpr auto HealthChangeAmount = 0x30; // float
		constexpr auto HealthChangedReason = 0x34; // EHealthChangedReason
	}

	namespace n_UAddGameEventExclusionZoneStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UAddGameEventExclusionZoneStepDesc*
	}

	namespace n_UInterpTrackFloatMaterialParam { // : UInterpTrackFloatBase
		constexpr auto TargetMaterials = 0x90; // TArray<UMaterialInterface*>
		constexpr auto ParamName = 0xa0; // FName
	}

	namespace n_UAISkillsetRankProgression { // : UDataAsset
		constexpr auto RankMappings = 0x28; // TArray<FAISkillsetRankMapping>
		constexpr auto NumberOfRanks = 0x38; // int32_t
	}

	namespace n_UHarpoonInputComponent { // : UMountedWeaponAimAndFireInputComponent
		constexpr auto HarpoonLauncher = 0x290; // AHarpoonLauncher*
	}

	namespace n_UIpConnection { // : UNetConnection
		constexpr auto Children = 0x50; // TArray<UChildConnection*>
		constexpr auto Driver = 0x60; // UNetDriver*
		constexpr auto PackageMap = 0x68; // UPackageMap*
		constexpr auto OpenChannels = 0x70; // TArray<UChannel*>
		constexpr auto SentTemporaries = 0x80; // TArray<AActor*>
		constexpr auto ViewTarget = 0x90; // AActor*
		constexpr auto OwningActor = 0x98; // AActor*
		constexpr auto MaxPacket = 0xa0; // int32_t
		constexpr auto InternalAck = 0xa4; // char : 1
		constexpr auto LastReceiveTime = 0x3a0; // double
		constexpr auto MaxDormantActorsCheckedFromRelevancy = 0x34468; // int32_t
		constexpr auto DeferredCloseChannels = 0x344c0; // TArray<UChannel*>
	}

	namespace n_UEmissaryEntitlementCategory { // : UItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UTextBlockWidgetStyle { // : USlateWidgetStyleContainerBase
		constexpr auto TextBlockStyle = 0x30; // FTextBlockStyle
	}

	namespace n_ASkeletalMeshWieldableReplica { // : AWieldableReplica
		constexpr auto MeshComponent = 0x3d8; // UPrimitiveComponent*
		constexpr auto CachedAnimationSet = 0x3e0; // UCosmeticItemAnimationSetDataAsset*
		constexpr auto ReplicaCategory = 0x3e8; // UItemCategory*
	}

	namespace n_UEmissaryActionRewardBoostComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UNoiseMakerComponentParams { // : UDataAsset
		constexpr auto TriggerRadiusAroundNoiseMaker = 0x28; // float
		constexpr auto LocalNoiseMakerFoliagePlay = 0x30; // UWwiseEvent*
		constexpr auto LocalNoiseMakerFoliageStop = 0x38; // UWwiseEvent*
		constexpr auto LocalSpeedRtpc = 0x40; // FName
		constexpr auto SimulatedCharacterFoliagePlay = 0x48; // UWwiseEvent*
		constexpr auto SimulatedCharacterFoliageStop = 0x50; // UWwiseEvent*
		constexpr auto SimulatedCharacterSpeedRtpc = 0x58; // FName
		constexpr auto ProximityRtpc = 0x60; // FName
	}

	namespace n_UPetsSettings { // : UObject
		constexpr auto PetHangoutSpotsDataAsset = 0x28; // FStringAssetReference
		constexpr auto PetListingDataAsset = 0x38; // FStringAssetReference
		constexpr auto PetsServiceParamsDataAsset = 0x48; // FStringAssetReference
		constexpr auto PetSpawnDefinitionsDataAsset = 0x58; // FStringAssetReference
		constexpr auto ExcludedStatesForRoamingAssetGeneration = 0x68; // TArray<EAthenaAnimationPetRoamingState>
	}

	namespace n_UStaticMeshVoteVisualiserComponent { // : UActorComponent
		constexpr auto VoteIndicators = 0xe8; // TArray<FStaticMeshVoteIndicator>
		constexpr auto VoteAnimationTime = 0xf8; // float
	}

	namespace n_UTaleQuestLockCaptainCabinDoorStepDesc { // : UTaleQuestStepDesc
		constexpr auto Shipwreck = 0x80; // FQuestVariableShipwreck
		constexpr auto CabinKey = 0x90; // FQuestVariableItemInfo
	}

	namespace n_ADockableCutscene { // : AControllableObject
		constexpr auto FirstPersonAnimToPlay = 0x510; // UAnimSequence*
		constexpr auto DockableAnimToPlay = 0x518; // UAnimMontage*
		constexpr auto SkeletalMeshComponent = 0x520; // USkeletalMeshComponent*
		constexpr auto DetachCutOffTime = 0x528; // float
		constexpr auto InteractableComponent = 0x530; // UInteractableComponent*
		constexpr auto DockableCutsceneName = 0x538; // FText
		constexpr auto InteractWithCutsceneText = 0x570; // FText
		constexpr auto DockingSocketName = 0x5a8; // FName
	}

	namespace n_ATunnelOfTheDamned { // : AActor
		constexpr auto Root = 0x3e0; // USceneComponent*
		constexpr auto TunnelCollisions = 0x3e8; // UStaticMeshComponent*
		constexpr auto TunnelOverlapZone = 0x3f0; // UBoxComponent*
		constexpr auto RelativeSpawnLocation = 0x3f8; // FVector
		constexpr auto VoyageVotingTableType = 0x408; // AActor*
		constexpr auto CapstanType = 0x410; // AActor*
		constexpr auto WheelType = 0x418; // AActor*
		constexpr auto CannonPlayerLoadingInteractionPointType = 0x420; // AActor*
		constexpr auto CannonType = 0x428; // AActor*
		constexpr auto HarpoonType = 0x430; // AActor*
		constexpr auto RowboatAttachPointType = 0x438; // AActor*
		constexpr auto MapTableType = 0x440; // AActor*
		constexpr auto RowboatType = 0x448; // AActor*
		constexpr auto LadderTypes = 0x450; // TArray<AActor*>
		constexpr auto LootFilterDataAsset = 0x460; // UTunnelsOfTheDamnedLootFilterDataAsset*
		constexpr auto Desc = 0x468; // UTunnelDesc*
		constexpr auto TunnelStreamingLevelId = 0x470; // int32_t
		constexpr auto ShipInTunnel = 0x478; // AActor*
		constexpr auto CrewMembersInTunnel = 0x480; // TArray<AActor*>
		constexpr auto Endpoint = 0x490; // AActor*
		constexpr auto SequencerLevelActor = 0x498; // ASequencerCutSceneActor*
		constexpr auto ShipSpecificSequencerLevelActor = 0x4a0; // ASequencerCutSceneActor*
		constexpr auto ShipGetter = 0x4a8; // TScriptInterface<Class>
		constexpr auto CrewService = 0x4b8; // TScriptInterface<Class>
		constexpr auto CrewSpawnLocationsService = 0x4c8; // TScriptInterface<Class>
		constexpr auto IslandService = 0x4d8; // TScriptInterface<Class>
		constexpr auto PortalService = 0x4e8; // TScriptInterface<Class>
		constexpr auto FailureFallbackShipSpawnLocation = 0x4f8; // AShipSpawnLocation*
		constexpr auto ActionStateFadeCompletedTargets = 0x5d0; // TArray<TScriptInterface<Class>>
		constexpr auto FailureActionStateFadeCompletedTargets = 0x5e0; // TArray<TScriptInterface<Class>>
	}

	namespace n_UEnvQueryGenerator_KrakenSpawnLocations { // : UEnvQueryGenerator
		constexpr auto OptionName = 0x30; // FString
		constexpr auto NonShippingOnly = 0x40; // bool
		constexpr auto ItemType = 0x48; // UEnvQueryItemType*
	}

	namespace n_UShadowAIFormDataAsset { // : UAthenaAIFormDataAsset
		constexpr auto LightStateActivationTime = 0x90; // float
		constexpr auto LightStateCooldown = 0x94; // float
		constexpr auto PlayerLanternIdleLightRange = 0x98; // float
		constexpr auto PlayerLanternRaisedLightRange = 0x9c; // float
		constexpr auto FlareLightRange = 0xa0; // float
		constexpr auto LightExposureStunDuration = 0xa4; // float
		constexpr auto FlamePhobias = 0xa8; // TArray<EFlameOfFateType>
		constexpr auto AfraidOfLight = 0xb8; // bool
	}

	namespace n_ABattleElevatorEventRoom { // : ANetworkClusterEventRoom
		constexpr auto ActorsWithAIRegionsToAssignAIToCannons = 0x508; // TArray<AActor*>
		constexpr auto TargetBattleElevatorActor = 0x518; // ABattleElevator*
		constexpr auto CoordinatedKrakenTypeToSpawn = 0x520; // UClass*
		constexpr auto BattleElevatorRoomPhaseStartedDelegate = 0x540; // FScriptMulticastDelegate
		constexpr auto InitialFightPhase = 0x550; // FName
		constexpr auto PhasesAsset = 0x558; // UBattleElevatorEventRoomPhasesDataAsset*
		constexpr auto CurrentPhaseData = 0x560; // FCurrentPhaseData
	}

	namespace n_UVoyageProposalAssetSelector { // : UDataAsset
		constexpr auto Companies = 0x28; // TArray<FVoyageProposalCompanyAssetData>
	}

	namespace n_UTaleQuestUpdateMerchantMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto Item = 0x88; // FQuestVariableMerchantItem
		constexpr auto Index = 0x98; // FQuestVariableInt
	}

	namespace n_UVertexAnimBase { // : UObject
		constexpr auto BaseSkelMesh = 0x28; // USkeletalMesh*
	}

	namespace n_USequenceComponent { // : UActorComponent
		constexpr auto CorrectKeyPressedDelegate = 0xc8; // FScriptMulticastDelegate
		constexpr auto IncorrectKeyPressedDelegate = 0xd8; // FScriptMulticastDelegate
		constexpr auto SequenceCompleteDelegate = 0xe8; // FScriptMulticastDelegate
		constexpr auto Sequence = 0xf8; // TArray<int32_t>
		constexpr auto ResetOnError = 0x108; // bool
		constexpr auto SequenceComplete = 0x109; // bool
		constexpr auto Responses = 0x110; // TArray<FSequenceResponseContainer>
	}

	namespace n_UMovieSceneSkeletalAnimationSection { // : UMovieSceneSection
		constexpr auto Params = 0x98; // FMovieSceneSkeletalAnimationParams
		constexpr auto AnimSequence = 0x130; // UAnimSequence*
		constexpr auto Animation = 0x138; // UAnimSequenceBase*
		constexpr auto StartOffset = 0x140; // float
		constexpr auto EndOffset = 0x144; // float
		constexpr auto PlayRate = 0x148; // float
		constexpr auto bReverse = 0x14c; // char : 1
		constexpr auto SlotName = 0x150; // FName
	}

	namespace n_ABountyRewardItemProxy { // : ABootyProxy
		constexpr auto AmbiencePool = 0x7b8; // UWwiseObjectPoolWrapper*
		constexpr auto AmbiencePlay = 0x7c0; // UWwiseEvent*
		constexpr auto AmbienceStop = 0x7c8; // UWwiseEvent*
		constexpr auto AmbienceEmitter = 0x7d0; // FWwiseEmitter
	}

	namespace n_AGameNetworkManager { // : AInfo
		constexpr auto AdjustedNetSpeed = 0x3d0; // int32_t
		constexpr auto LastNetSpeedUpdateTime = 0x3d4; // float
		constexpr auto TotalNetBandwidth = 0x3d8; // int32_t
		constexpr auto MinDynamicBandwidth = 0x3dc; // int32_t
		constexpr auto MaxDynamicBandwidth = 0x3e0; // int32_t
		constexpr auto bIsStandbyCheckingEnabled = 0x3e4; // char : 1
		constexpr auto bHasStandbyCheatTriggered = 0x3e4; // char : 1
		constexpr auto StandbyRxCheatTime = 0x3e8; // float
		constexpr auto StandbyTxCheatTime = 0x3ec; // float
		constexpr auto BadPingThreshold = 0x3f0; // int32_t
		constexpr auto PercentMissingForRxStandby = 0x3f4; // float
		constexpr auto PercentMissingForTxStandby = 0x3f8; // float
		constexpr auto PercentForBadPing = 0x3fc; // float
		constexpr auto JoinInProgressStandbyWaitTime = 0x400; // float
		constexpr auto MoveRepSize = 0x404; // float
		constexpr auto MAXPOSITIONERRORSQUARED = 0x408; // float
		constexpr auto MAXNEARZEROVELOCITYSQUARED = 0x40c; // float
		constexpr auto CLIENTADJUSTUPDATECOST = 0x410; // float
		constexpr auto MAXCLIENTUPDATEINTERVAL = 0x414; // float
		constexpr auto MaxMoveDeltaTime = 0x418; // float
		constexpr auto ClientAuthorativePosition = 0x41c; // bool
		constexpr auto ClientErrorUpdateRateLimit = 0x420; // float
		constexpr auto bMovementTimeDiscrepancyDetection = 0x424; // bool
		constexpr auto bMovementTimeDiscrepancyResolution = 0x425; // bool
		constexpr auto MovementTimeDiscrepancyMaxTimeMargin = 0x428; // float
		constexpr auto MovementTimeDiscrepancyMinTimeMargin = 0x42c; // float
		constexpr auto MovementTimeDiscrepancyResolutionRate = 0x430; // float
		constexpr auto MovementTimeDiscrepancyDriftAllowance = 0x434; // float
		constexpr auto bMovementTimeDiscrepancyForceCorrectionsDuringResolution = 0x438; // bool
		constexpr auto bUseDistanceBasedRelevancy = 0x439; // bool
	}

	namespace n_UParticleModuleMeshRotation { // : UParticleModuleRotationBase
		constexpr auto StartRotation = 0x50; // FRawDistributionVector
		constexpr auto bInheritParent = 0x88; // char : 1
	}

	namespace n_UCharacterAudioComponentParams { // : UDataAsset
		constexpr auto CharacterAudioPool = 0x28; // UWwiseObjectPoolWrapper*
		constexpr auto CausedDamageAudioEvent = 0x30; // UWwiseEvent*
		constexpr auto CausedAIShipDamageAudioEvent = 0x38; // UWwiseEvent*
		constexpr auto CausedAggressiveGhostShipDamageAudioEvent = 0x40; // UWwiseEvent*
		constexpr auto CharacterDeadAudioEvent = 0x48; // UWwiseEvent*
		constexpr auto KilledCharacterAudioEvent = 0x50; // UWwiseEvent*
		constexpr auto LocalPlayerFireStart = 0x58; // UWwiseEvent*
		constexpr auto LocalPlayerFireStop = 0x60; // UWwiseEvent*
		constexpr auto RemotePlayerFireStart = 0x68; // UWwiseEvent*
		constexpr auto RemotePlayerFireStop = 0x70; // UWwiseEvent*
		constexpr auto LocalPlayerExtinguished = 0x78; // UWwiseEvent*
		constexpr auto RemotePlayerExtinguished = 0x80; // UWwiseEvent*
		constexpr auto CharacterState = 0x88; // FStateCategoryGroup
		constexpr auto PlayCharacterRespawn = 0xa8; // UWwiseEvent*
		constexpr auto CharacterStateDead = 0xb0; // FName
		constexpr auto CharacterStateFall = 0xb8; // FName
		constexpr auto CharacterStateStun = 0xc0; // FName
		constexpr auto CharacterStateFire = 0xc8; // FName
		constexpr auto CharacterStateDefault = 0xd0; // FName
		constexpr auto CharacterStateTeleporting = 0xd8; // FName
		constexpr auto CharacterStateSleeping = 0xe0; // FName
		constexpr auto PlayPlayerVengeance = 0xe8; // UWwiseEvent*
		constexpr auto StopPlayerVengeance = 0xf0; // UWwiseEvent*
		constexpr auto PlayPlayerVengeanceFinished = 0xf8; // UWwiseEvent*
		constexpr auto PlayerVengeanceRTPC = 0x100; // FName
		constexpr auto PlayerVengeanceMaxRtpc = 0x108; // float
		constexpr auto ExplosionSoundEvents = 0x110; // TArray<FDamageTypeToAudio>
		constexpr auto PlayPlayerSlidingDownLadder = 0x120; // UWwiseEvent*
		constexpr auto StopPlayerSlidingDownLadder = 0x128; // UWwiseEvent*
		constexpr auto LadderSlideSpeedRtpc = 0x130; // FName
		constexpr auto LadderUse = 0x138; // UWwiseEvent*
		constexpr auto CannonUse = 0x140; // UWwiseEvent*
		constexpr auto WheelUse = 0x148; // UWwiseEvent*
		constexpr auto SailManipulatorUse = 0x150; // UWwiseEvent*
		constexpr auto CharacterTorsoEnteredWater = 0x158; // UWwiseEvent*
		constexpr auto CharacterTorsoExitedWater = 0x160; // UWwiseEvent*
		constexpr auto PlayerSpeedRtpc = 0x168; // FName
		constexpr auto PlayerSpeedRtpcMin = 0x170; // float
		constexpr auto PlayerSpeedRtpcMax = 0x174; // float
		constexpr auto BrokeLegSwitchGroupName = 0x178; // FName
		constexpr auto BrokeLegSwitch = 0x180; // FName
		constexpr auto HealedLegSwitch = 0x188; // FName
		constexpr auto FallDamageRTPC = 0x190; // FName
		constexpr auto HealthChangeSfx = 0x198; // TArray<FHealthChangeAudio>
		constexpr auto LocalPlayerTeleportPlay = 0x1a8; // UWwiseEvent*
		constexpr auto LocalPlayerTeleportStop = 0x1b0; // UWwiseEvent*
		constexpr auto LargeShipMapDeck = 0x1b8; // UAudioSpaceDataAsset*
		constexpr auto LargeShipBrigDeck = 0x1c0; // UAudioSpaceDataAsset*
		constexpr auto LargeShipCaptainsCabin = 0x1c8; // UAudioSpaceDataAsset*
		constexpr auto IslandTavern = 0x1d0; // UAudioSpaceDataAsset*
		constexpr auto IslandCave = 0x1d8; // UAudioSpaceDataAsset*
		constexpr auto SmallestEnclosedRatioToTriggerCave = 0x1e0; // float
		constexpr auto PredominantCaveSurface = 0x1e4; // EPhysicalSurface
		constexpr auto LargestCaveSizeMetersSquared = 0x1e8; // float
		constexpr auto SmallestCaveSizeMetersSquared = 0x1ec; // float
		constexpr auto CaveSizeRtpcName = 0x1f0; // FName
		constexpr auto SmallestEnclosedRatioToTriggerCaveMusicNode = 0x1f8; // float
		constexpr auto LandingEventCooldownTime = 0x1fc; // float
		constexpr auto FogPenetrationAudioThresholdMin = 0x200; // float
		constexpr auto FogPenetrationAudioThresholdMax = 0x204; // float
		constexpr auto FogDensityRTPC = 0x208; // FName
		constexpr auto FogTypeSfx = 0x210; // TArray<FFogTypeToAudio>
		constexpr auto TrapTriggeredEvent = 0x220; // UWwiseEvent*
		constexpr auto EmoteCameraStart = 0x228; // UWwiseEvent*
		constexpr auto EmoteCameraStop = 0x230; // UWwiseEvent*
		constexpr auto ReviveSuccessful = 0x238; // UWwiseEvent*
		constexpr auto OtherPlayers_BodyEvaporates = 0x240; // UWwiseEvent*
		constexpr auto StartSleepingEvent = 0x248; // UWwiseEvent*
		constexpr auto StopSleepingEvent = 0x250; // UWwiseEvent*
		constexpr auto StartSleepingWithoutFartingEvent = 0x258; // UWwiseEvent*
		constexpr auto StopSleepingWithoutFartingEvent = 0x260; // UWwiseEvent*
	}

	namespace n_ULevelStreaming { // : UObject
		constexpr auto WorldAsset = 0x28; // UWorld*
		constexpr auto PackageNameToLoad = 0x50; // FName
		constexpr auto LODPackageNames = 0x58; // TArray<FName>
		constexpr auto LevelTransform = 0x80; // FTransform
		constexpr auto bShouldBeVisibleInEditor = 0xbc; // char : 1
		constexpr auto Blocked = 0xbc; // char : 1
		constexpr auto bShouldBeLoaded = 0xbc; // char : 1
		constexpr auto bShouldBeVisible = 0xbc; // char : 1
		constexpr auto bShouldBlockOnLoad = 0xbc; // char : 1
		constexpr auto LevelLODIndex = 0xc0; // int32_t
		constexpr auto bDisableDistanceStreaming = 0xc4; // char : 1
		constexpr auto bDrawOnLevelStatusMap = 0xc4; // char : 1
		constexpr auto LevelColor = 0xc8; // FLinearColor
		constexpr auto EditorStreamingVolumes = 0xd8; // TArray<ALevelStreamingVolume*>
		constexpr auto MinTimeBetweenVolumeUnloadRequests = 0xe8; // float
		constexpr auto Keywords = 0xf0; // TArray<FString>
		constexpr auto OnLevelLoaded = 0x100; // FScriptMulticastDelegate
		constexpr auto OnLevelUnloaded = 0x110; // FScriptMulticastDelegate
		constexpr auto OnLevelShown = 0x120; // FScriptMulticastDelegate
		constexpr auto OnLevelHidden = 0x130; // FScriptMulticastDelegate
		constexpr auto LoadedLevel = 0x200; // ULevel*
		constexpr auto PendingUnloadLevel = 0x208; // ULevel*
	}

	namespace n_APortalLocatorActor { // : AActor
		constexpr auto Root = 0x3d0; // USceneComponent*
		constexpr auto ContendedResourceComponent = 0x3d8; // UContendedResourceComponent*
		constexpr auto ActivePortalClass = 0x3e0; // ATunnelOfTheDamnedPortal*
		constexpr auto AssociatedSpawnLocations = 0x3e8; // TArray<ATunnelOfTheDamnedPortalShipSpawnLocation*>
	}

	namespace n_UMaterialExpressionSubtract { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto ConstA = 0xe0; // float
		constexpr auto ConstB = 0xe4; // float
	}

	namespace n_UDefaultOnlineEnvironmentSettings { // : UObject
		constexpr auto EnvironmentId = 0x28; // FString
		constexpr auto TitleId = 0x38; // uint32_t
		constexpr auto ServiceConfigId = 0x40; // FString
		constexpr auto ClientCertificateThumbprint = 0x50; // FString
	}

	namespace n_UFeatureToggleNPCDialogConditional { // : UNPCDialogConditional
		constexpr auto FeatureName = 0x30; // FName
	}

	namespace n_USceneCaptureComponent2D { // : USceneCaptureComponent
		constexpr auto FOVAngle = 0x318; // float
		constexpr auto TextureTarget = 0x320; // UTextureRenderTarget2D*
		constexpr auto CaptureSource = 0x328; // ESceneCaptureSource
		constexpr auto PostProcessSettings = 0x330; // FPostProcessSettings
		constexpr auto PostProcessBlendWeight = 0x870; // float
		constexpr auto OrthoWidth = 0x874; // float
		constexpr auto OrthoNearClipPlane = 0x878; // float
		constexpr auto OrthoFarClipPlane = 0x87c; // float
		constexpr auto ProjectionMode = 0x880; // ECameraProjectionMode
		constexpr auto AspectRatio = 0x884; // float
		constexpr auto bConstrainAspectRatio = 0x888; // char : 1
		constexpr auto LandscapeLODOverride = 0x88c; // int32_t
	}

	namespace n_UOverlaySlot { // : UPanelSlot
		constexpr auto Padding = 0x38; // FMargin
		constexpr auto HorizontalAlignment = 0x48; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x49; // EVerticalAlignment
	}

	namespace n_AHungeringDeep { // : AActor
		constexpr auto TickDelay = 0x3d8; // float
		constexpr auto RequiredShantyCount = 0x3dc; // int32_t
		constexpr auto SpawnableVolume = 0x3e0; // USphereComponent*
		constexpr auto RequiredTattoo = 0x3e8; // UClothingDesc*
		constexpr auto RequiredShanty = 0x3f0; // FName
	}

	namespace n_UWaterSensitiveComponent { // : UActorComponent
		constexpr auto WaterSensitiveData = 0xc8; // UWaterSensitiveComponentDataAsset*
	}

	namespace n_UStatusResponseApplyStatusShipCurse { // : UStatusResponse
		constexpr auto ShipCurseTag = 0x30; // EShipCurseTag
		constexpr auto Status = 0x38; // FStatus
		constexpr auto Duration = 0x50; // float
	}

	namespace n_UAIDioramaController { // : UObject
		constexpr auto AIDioramaDesc = 0x30; // UAIDioramaDesc*
		constexpr auto DialogueData = 0x38; // USceneDialogueData*
		constexpr auto SpawnedDioramaPawns = 0x40; // TArray<FAIDioramaPawn>
		constexpr auto AIDiorama = 0x50; // AAIDiorama*
		constexpr auto Spawner = 0x58; // UAISpawner*
	}

	namespace n_UBTTask_SetupAITargetWeaponForNextShot { // : UBTTaskNode
		constexpr auto Interactable = 0x60; // FBlackboardKeySelector
		constexpr auto TargetForInteractable = 0x88; // FBlackboardKeySelector
		constexpr auto TargetRelativeAimVector = 0xb0; // FBlackboardKeySelector
	}

	namespace n_UCanvasRenderTarget2D { // : UTextureRenderTarget2D
		constexpr auto OnCanvasRenderTargetUpdate = 0x168; // FScriptMulticastDelegate
		constexpr auto World = 0x178; // TWeakObjectPtr<UWorld>
	}

	namespace n_UInterpTrackAudioMaster { // : UInterpTrackVectorBase
		constexpr auto VectorTrack = 0x70; // FInterpCurveVector
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_UDestructibleComponent { // : USkinnedMeshComponent
		constexpr auto bFractureEffectOverride = 0x6c0; // char : 1
		constexpr auto FractureEffects = 0x6c8; // TArray<FFractureEffect>
		constexpr auto bEnableHardSleeping = 0x6d8; // bool
		constexpr auto LargeChunkThreshold = 0x6dc; // float
		constexpr auto OnComponentFracture = 0x6f0; // FScriptMulticastDelegate
	}

	namespace n_UContendedResourceService { // : UObject
		constexpr auto World = 0x38; // UWorld*
	}

	namespace n_USeagullManagerComponent { // : UShipCreatureManagerComponent
		constexpr auto DataAsset = 0x148; // USeagullManagerComponentDataAsset*
	}

	namespace n_AGameplayEventSignal_StaticMesh { // : AGameplayEventSignal
		constexpr auto ProxyClass = 0x3d8; // ANetProxy*
		constexpr auto NexProxyFeatureToggle = 0x3e0; // FName
		constexpr auto TimeForSignalToActivateInSeconds = 0x3e8; // float
		constexpr auto TimeForSignalToDeactivateInSeconds = 0x3ec; // float
		constexpr auto TimeForAtmosphericPressureZoneToActivateInSeconds = 0x3f0; // float
		constexpr auto AtmosphericPressureZoneComponent = 0x3f8; // UAtmosphericPressureZoneComponent*
		constexpr auto LightingZoneComponent = 0x400; // ULightingZoneComponent*
		constexpr auto RotateMeshToActorComponent = 0x408; // URotateMeshToActorComponent*
		constexpr auto SignalMesh = 0x410; // UMeshComponent*
		constexpr auto Root = 0x418; // USceneComponent*
		constexpr auto SignalMaterial = 0x420; // UMaterialInstanceDynamic*
		constexpr auto EventType = 0x428; // EGameplayEventSignalType
		constexpr auto OwningNetworkRegion = 0x490; // ENetworkRegion
	}

	namespace n_ADefaultPhysicsVolume { // : APhysicsVolume
		constexpr auto TerminalVelocity = 0x408; // float
		constexpr auto Priority = 0x40c; // int32_t
		constexpr auto FluidFriction = 0x410; // float
		constexpr auto bWaterVolume = 0x414; // char : 1
		constexpr auto bPhysicsOnContact = 0x414; // char : 1
	}

	namespace n_UTaleQuestEventStepDescBase { // : UTaleQuestStepDesc
		constexpr auto Dispatcher = 0x80; // UObject*
		constexpr auto EventType = 0x88; // FNativeAndUserDefinedStructSelector
		constexpr auto ArgumentMappings = 0x90; // TMap<FName, FName>
	}

	namespace n_UTaleQuestUnionStepDesc { // : UTaleQuestParallelStepDesc
		constexpr auto Descs = 0x80; // TArray<UTaleQuestStepDesc*>
	}

	namespace n_ASharkActionStateCreatorDefinition { // : AActionStateCreatorDefinition
		constexpr auto AISpawnParams = 0x3d0; // FAISpawnActionStateParams
		constexpr auto AIDeadParams = 0x3e0; // FAISwimmingCreatureDeadActionStateParams
	}

	namespace n_UTaleQuestSelectAISpawnerStepDesc { // : UTaleQuestStepDesc
		constexpr auto SelectFromSpawnerArray = 0x80; // FQuestVariableAISpawnerArray
		constexpr auto SelectedSpawnerAsset = 0x90; // FQuestVariableAISpawner
	}

	namespace n_UBreakpoint { // : UObject
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto Node = 0x30; // UEdGraphNode*
		constexpr auto bStepOnce = 0x38; // char : 1
		constexpr auto bStepOnce_WasPreviouslyDisabled = 0x38; // char : 1
		constexpr auto bStepOnce_RemoveAfterHit = 0x38; // char : 1
	}

	namespace n_UDeliverableRedirectionActionDataAsset { // : UDataAsset
		constexpr auto Handlers = 0x28; // TArray<UDeliverableRedirectionContextHandlerBase*>
		constexpr auto RedirectionTooltip = 0x38; // FText
		constexpr auto VisitSingleFemaleNPCTooltip = 0x70; // FText
		constexpr auto VisitSingleMaleNPCTooltip = 0xa8; // FText
		constexpr auto VisitSingleCompanyNPCTooltip = 0xe0; // FText
		constexpr auto VisitSingleCompanyNPCTooltipOverride = 0x118; // TArray<FSingleNPCCompanyRedirectionData>
		constexpr auto VisitMultipleNPCCompaniesTooltip = 0x128; // TArray<FMultipleNPCCompaniesRedirectionData>
		constexpr auto GoToOutpostTooltip = 0x138; // FText
	}

	namespace n_UContestZoneRespawnLocationsDataAsset { // : UDataAsset
		constexpr auto ContestRespawnLocations = 0x28; // TArray<FTransform>
	}

	namespace n_UFireworkItemCategory { // : UConsumableItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_USeasonPopupListAsset { // : UDataAsset
		constexpr auto SeasonPopups = 0x28; // TArray<USeasonPopupAsset*>
	}

	namespace n_ATinySharkService { // : AActor
		constexpr auto TinySharkServiceParams = 0x3e0; // UTinySharkServiceParamsDataAsset*
		constexpr auto TinySharkExperiences = 0x558; // TArray<ATinySharkExperience*>
	}

	namespace n_UTaleQuestGrantRewardStepDesc { // : UTaleQuestStepDesc
		constexpr auto RewardId = 0x80; // FRewardId
		constexpr auto Company = 0x88; // UCompany*
		constexpr auto Id = 0x90; // FGuid
		constexpr auto ShouldGrantToAlliedCrews = 0xa0; // bool
		constexpr auto Feature = 0xa4; // FName
	}

	namespace n_UTrackResponseCoordinatorStepDesc { // : UTaleQuestStepDesc
		constexpr auto CutsceneResponseCoordinator = 0x80; // FQuestVariableUObject
	}

	namespace n_UVaultTableMaterialSetDataAsset { // : UDataAsset
		constexpr auto SolutionHintMaterials = 0x28; // TArray<UMaterialInstance*>
	}

	namespace n_ACustomisationPreviewShip { // : AActor
		constexpr auto ShipCustomizationInfo = 0x3d0; // UShipCustomizationInfo*
		constexpr auto Category = 0x3d8; // FName
		constexpr auto LiveryComponent = 0x3e0; // UShipLiveryComponent*
		constexpr auto HullLiveryCustomizationComponent = 0x3e8; // UReplicatedShipPartCustomizationComponent*
		constexpr auto SailsLiveryCustomizationComponent = 0x3f0; // UReplicatedShipPartCustomizationComponent*
		constexpr auto CannonEnchantmentCustomizationComponent = 0x3f8; // UReplicatedShipPartCustomizationComponent*
		constexpr auto Root = 0x400; // USceneComponent*
		constexpr auto MastChildActorComponent = 0x408; // UChildActorComponent*
		constexpr auto WheelChildActorComponent = 0x410; // UChildActorComponent*
		constexpr auto CapstanChildActorComponent = 0x418; // UChildActorComponent*
		constexpr auto CannonChildActorComponent = 0x420; // UChildActorComponent*
		constexpr auto ShowParticles = 0x428; // bool
		constexpr auto ParticleWarmUpTime = 0x42c; // float
	}

	namespace n_ACursedCaptainsSkullItemInfo { // : ABootyItemInfo
		constexpr auto OnNewAnimatableRepresentation = 0x720; // FScriptMulticastDelegate
		constexpr auto AnimNotifyWwiseEmitterComponent = 0x730; // UAnimNotifyWwiseEmitterComponent*
		constexpr auto CutsceneComponent = 0x738; // UCutsceneComponent*
	}

	namespace n_AStaticMeshWieldableReplica { // : AWieldableReplica
		constexpr auto MeshComponent = 0x3d8; // UPrimitiveComponent*
		constexpr auto CachedAnimationSet = 0x3e0; // UCosmeticItemAnimationSetDataAsset*
		constexpr auto ReplicaCategory = 0x3e8; // UItemCategory*
	}

	namespace n_AQuestBookItemInfo { // : AItemInfo
		constexpr auto CanBeStoredInInventory = 0x3f0; // bool
		constexpr auto OnItemPickedUpDelegate = 0x3f8; // FScriptMulticastDelegate
		constexpr auto OnItemDroppedDeletage = 0x408; // FScriptMulticastDelegate
		constexpr auto WieldableType = 0x418; // AWieldableItem*
		constexpr auto ProxyType = 0x420; // AActor*
		constexpr auto WieldableItemPersistenceCooldownComponent = 0x428; // UWieldableItemPersistentCooldownComponent*
		constexpr auto Desc = 0x430; // UItemDesc*
		constexpr auto CurrentRepresentation = 0x438; // EItemRepresentation
		constexpr auto CurrentRepresentationInstance = 0x440; // AActor*
		constexpr auto CurrentOwner = 0x448; // AActor*
		constexpr auto TutorialOwner = 0x450; // AActor*
		constexpr auto DoNotConsiderForMigrationGather = 0x4f9; // bool
	}

	namespace n_AFogVolume { // : AActor
		constexpr auto SphereComponent = 0x3d0; // USphereComponent*
		constexpr auto FogVolumeComponent = 0x3d8; // UFogVolumeComponent*
	}

	namespace n_UParticleModuleParameterDynamic { // : UParticleModuleParameterBase
		constexpr auto DynamicParams = 0x50; // TArray<FEmitterDynamicParameter>
		constexpr auto UpdateFlags = 0x60; // int32_t
		constexpr auto bUsesVelocity = 0x64; // char : 1
	}

	namespace n_UChainLightningVisualActorSettingsAsset { // : UDataAsset
		constexpr auto MeshAsset = 0x28; // UStaticMesh*
		constexpr auto MaterialAsset = 0x30; // UMaterialInterface*
		constexpr auto ChainLightningCreatedOneShot = 0x38; // UWwiseEvent*
		constexpr auto ChainLightningVisualActorPool = 0x40; // UWwiseObjectPoolWrapper*
		constexpr auto PropogationVfx = 0x48; // UObject*
	}

	namespace n_AContestRowboatsService { // : AActor
		constexpr auto RowboatClass = 0x3d8; // AActor*
	}

	namespace n_UTakesItemFromStorageContainerConditionalTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigrationReferenceActor { // : AActor
		constexpr auto ActorReferenceWithMigrationMarkup = 0x3d0; // AActor*
	}

	namespace n_UHighLatencySettings { // : UObject
		constexpr auto UseHighLatency = 0x28; // bool
		constexpr auto PktLag = 0x2c; // int32_t
		constexpr auto PktLagVariance = 0x30; // int32_t
		constexpr auto PktOrder = 0x34; // bool
		constexpr auto PktDup = 0x38; // int32_t
		constexpr auto PktLoss = 0x3c; // int32_t
	}

	namespace n_APlayerCameraManager { // : AActor
		constexpr auto PCOwner = 0x3d0; // APlayerController*
		constexpr auto TransformComponent = 0x3d8; // USceneComponent*
		constexpr auto DefaultFOV = 0x3e8; // float
		constexpr auto DefaultOrthoWidth = 0x3f0; // float
		constexpr auto DefaultAspectRatio = 0x3f8; // float
		constexpr auto CameraCache = 0x440; // FCameraCacheEntry
		constexpr auto LastFrameCameraCache = 0x9f0; // FCameraCacheEntry
		constexpr auto ViewTarget = 0xfa0; // FTViewTarget
		constexpr auto PendingViewTarget = 0x1560; // FTViewTarget
		constexpr auto ModifierList = 0x1b38; // TArray<UCameraModifier*>
		constexpr auto DefaultModifiers = 0x1b48; // TArray<UCameraModifier*>
		constexpr auto FreeCamDistance = 0x1b58; // float
		constexpr auto FreeCamOffset = 0x1b5c; // FVector
		constexpr auto ViewTargetOffset = 0x1b68; // FVector
		constexpr auto CameraLensEffects = 0x1b88; // TArray<AEmitterCameraLensEffectBase*>
		constexpr auto CachedCameraShakeMod = 0x1b98; // UCameraModifier_CameraShake*
		constexpr auto AnimInstPool = 0x1ba0; // UCameraAnimInst* [0x8]
		constexpr auto PostProcessBlendCache = 0x1be0; // TArray<FPostProcessSettings>
		constexpr auto ActiveAnims = 0x1c00; // TArray<UCameraAnimInst*>
		constexpr auto FreeAnims = 0x1c10; // TArray<UCameraAnimInst*>
		constexpr auto AnimCameraActor = 0x1c20; // ACameraActor*
		constexpr auto bIsOrthographic = 0x1c28; // char : 1
		constexpr auto bUseClientSideCameraUpdates = 0x1c28; // char : 1
		constexpr auto bFollowHmdOrientation = 0x1c29; // char : 1
		constexpr auto ViewPitchMin = 0x1c2c; // float
		constexpr auto ViewPitchMax = 0x1c30; // float
		constexpr auto ViewYawMin = 0x1c34; // float
		constexpr auto ViewYawMax = 0x1c38; // float
		constexpr auto ViewRollMin = 0x1c3c; // float
		constexpr auto ViewRollMax = 0x1c40; // float
	}

	namespace n_UContestTeamAssignmentComponent { // : UActorComponent
		constexpr auto ArenaShipCatalogue = 0xf8; // UContestShipCatalogueDataAsset*
		constexpr auto CachedTeamSets = 0x108; // TArray<FShipLiveryTeamSet>
		constexpr auto CachedUniqueTeamSets = 0x118; // TArray<FShipLiveryTeamSet>
		constexpr auto LiverySets = 0x128; // TArray<FContestShipLiverySet>
		constexpr auto CurrentlyAvaliableLiverySets = 0x138; // TArray<FContestShipLiverySet>
	}

	namespace n_UShovelSurfaceFxDataAsset { // : UDataAsset
		constexpr auto SurfaceParams = 0x28; // TArray<FDigSurfaceTypeParams>
	}

	namespace n_UMovieScene3DAttachTrack { // : UMovieScene3DConstraintTrack
		constexpr auto ConstraintSections = 0x88; // TArray<UMovieSceneSection*>
	}

	namespace n_UPortalTaleServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto FallbackPortalDesc = 0x28; // UPortalDesc*
	}

	namespace n_AFireworkItemInfo { // : AItemInfo
		constexpr auto LoadableProjectileComponent = 0x500; // ULoadableFireworkComponent*
		constexpr auto FireworkDataAsset = 0x508; // FStringAssetReference
		constexpr auto GeneratedDataRNGSeed = 0x518; // int32_t
	}

	namespace n_UCaptainsClubhouseSettings { // : UDeveloperSettings
		constexpr auto CaptainsClubhouseSettingsDataAsset = 0x38; // FStringAssetReference
	}

	namespace n_UCompanyNPCComponent { // : UActorComponent
		constexpr auto Company = 0x100; // UCompany*
		constexpr auto SpecifiedItemsToPurchase = 0x108; // TArray<UItemDesc*>
		constexpr auto SellSpecificItemText = 0x118; // FText
		constexpr auto NPCName = 0x150; // FName
		constexpr auto HoldToHandInBootyDuration = 0x158; // float
		constexpr auto ConditionalStatForBootyHandIn = 0x160; // UConditionalStatsTriggerType*
	}

	namespace n_UCoherentUIGTWidget { // : UWidget
		constexpr auto Owner = 0x158; // AActor*
		constexpr auto ReadyForBindings = 0x160; // FScriptMulticastDelegate
		constexpr auto BindingsReleased = 0x170; // FScriptMulticastDelegate
		constexpr auto FinishLoad = 0x180; // FScriptMulticastDelegate
		constexpr auto FailLoad = 0x190; // FScriptMulticastDelegate
		constexpr auto StartLoading = 0x1a0; // FScriptMulticastDelegate
		constexpr auto NavigateTo = 0x1b0; // FScriptMulticastDelegate
		constexpr auto JavaScriptEvent = 0x1c0; // FScriptMulticastDelegate
		constexpr auto UIGTScriptingReady = 0x1d0; // FScriptMulticastDelegate
		constexpr auto Filter = 0x1f8; // TextureFilter
		constexpr auto bReceiveInput = 0x1f9; // bool
		constexpr auto bReceiveInputWhenTransparent = 0x1fa; // bool
		constexpr auto bGammaCorrectedMaterial = 0x1fb; // bool
		constexpr auto AllowPerformanceWarnings = 0x1fc; // bool
		constexpr auto ExecuteJSTimersThresholdMs = 0x200; // float
		constexpr auto UpdateStylesAndLayoutThresholdMs = 0x204; // float
		constexpr auto RecordRenderingCommandsThresholdMs = 0x208; // float
		constexpr auto PaintWarningThresholdMs = 0x20c; // float
		constexpr auto LayersCountThreshold = 0x210; // int32_t
		constexpr auto LayerWidthThreshold = 0x214; // int32_t
		constexpr auto LayerHeightThreshold = 0x218; // int32_t
		constexpr auto bEnableAdditionalDefaultStyles = 0x21c; // bool
		constexpr auto URL = 0x3c0; // FString
		constexpr auto ClickThroughAlphaThreshold = 0x3d0; // float
		constexpr auto Transparent = 0x3d4; // bool
	}

	namespace n_UEnvQueryTest { // : UEnvQueryNode
		constexpr auto TestOrder = 0x30; // int32_t
		constexpr auto TestPurpose = 0x34; // EEnvTestPurpose
		constexpr auto MultipleContextFilterOp = 0x35; // EEnvTestFilterOperator
		constexpr auto MultipleContextScoreOp = 0x36; // EEnvTestScoreOperator
		constexpr auto FilterType = 0x37; // EEnvTestFilterType
		constexpr auto BoolValue = 0x38; // FAIDataProviderBoolValue
		constexpr auto FloatValueMin = 0x68; // FAIDataProviderFloatValue
		constexpr auto FloatValueMax = 0x98; // FAIDataProviderFloatValue
		constexpr auto ScoringEquation = 0xc9; // EEnvTestScoreEquation
		constexpr auto ClampMinType = 0xca; // EEnvQueryTestClamping
		constexpr auto ClampMaxType = 0xcb; // EEnvQueryTestClamping
		constexpr auto ScoreClampMin = 0xd0; // FAIDataProviderFloatValue
		constexpr auto ScoreClampMax = 0x100; // FAIDataProviderFloatValue
		constexpr auto ScoringFactor = 0x130; // FAIDataProviderFloatValue
		constexpr auto bWorkOnFloatValues = 0x168; // char : 1
	}

	namespace n_ABuriedTreasureLocation { // : AActor
		constexpr auto BaseComponent = 0x3d0; // USphereComponent*
		constexpr auto DiggableSurfaceTypes = 0x3d8; // TArray<UPhysicalMaterial*>
		constexpr auto StopVerification = 0x3e8; // bool
	}

	namespace n_UTinySharkServiceParamsDataAsset { // : UDataAsset
		constexpr auto Params = 0x28; // FTinySharkServiceParams
		constexpr auto MaxNumTinySharkExperiences = 0x50; // int32_t
	}

	namespace n_AAmmoChest { // : AInteractableObject
		constexpr auto StaticMesh = 0x460; // UStaticMeshComponent*
	}

	namespace n_UAIFormTypeList { // : UDataAsset
		constexpr auto AllForms = 0x28; // TArray<UAthenaAIFormDataAsset*>
		constexpr auto DefaultForm = 0x38; // UAthenaAIFormDataAsset*
	}

	namespace n_UNPCDialogPredicateGroupAIState { // : UNPCDialogPredicate
		constexpr auto TargetState = 0x38; // EAIDialogueState
	}

	namespace n_UTaleQuestGetTinySharkExperienceParticipatingCrewsDesc { // : UTaleQuestStepDesc
		constexpr auto TinySharkExperience = 0x80; // ATinySharkExperience*
		constexpr auto ParticipatingCrews = 0x88; // FQuestVariableGuidArray
	}

	namespace n_UTextureRenderTarget { // : UTexture
		constexpr auto TargetGamma = 0x138; // float
	}

	namespace n_UInterpTrackMoveAxis { // : UInterpTrackFloatBase
		constexpr auto MoveAxis = 0x90; // EInterpMoveAxis
		constexpr auto LookupTrack = 0x98; // FInterpLookupTrack
	}

	namespace n_UAIItemSpawnRankProgression { // : UDataAsset
		constexpr auto RankMappings = 0x28; // TArray<FAIDropSpawnerRankMapping>
		constexpr auto NumberOfRanks = 0x38; // int32_t
	}

	namespace n_UAshCloudAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto AshCloudClass = 0xc8; // AAshenLordAshCloud*
	}

	namespace n_UShipLeakerComponent { // : ULeakerComponent
		constexpr auto ParticleSystem_SplashOnInternalWaterSurface = 0x358; // UParticleSystem*
		constexpr auto TickInterval = 0x360; // int32_t
		constexpr auto Ship = 0x368; // AShip*
		constexpr auto InternalWater = 0x370; // AShipInternalWater*
		constexpr auto ShipLeaks = 0x378; // TArray<FShipLeak>
	}

	namespace n_UEntitlementsAsset { // : UDataAsset
		constexpr auto Entitlements = 0x28; // TArray<FStringClassReference>
	}

	namespace n_ANetProxy { // : AActor
		constexpr auto OnVisibilityChanged = 0x3d0; // FScriptMulticastDelegate
		constexpr auto OwningActor = 0x3e0; // AActor*
		constexpr auto Mesh = 0x3e8; // UStaticMeshComponent*
		constexpr auto MinimumNetRelevancyDistanceFraction = 0x3f0; // float
		constexpr auto DepthCutOffForNonReplication = 0x3f4; // float
	}

	namespace n_AActorWithTestInterface { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UMastDescAsset { // : UShipPartDescAsset
		constexpr auto MastDesc = 0x28; // FMastDesc
	}

	namespace n_ACollectorsChestItemProxyStatic { // : ATreasureChestItemProxyStatic
		constexpr auto OpenableItemComponent = 0x848; // UOpenableItemComponent*
	}

	namespace n_UAthenaDebugSettings { // : UObject
		constexpr auto Dioramas = 0x28; // FStringAssetReference
	}

	namespace n_UPremiumCatalogCardsDataAsset { // : UPremiumCatalogLandingPageItemDataAsset
		constexpr auto PageTitle = 0x108; // FText
		constexpr auto PageIcon = 0x140; // FStringAssetReference
		constexpr auto Cards = 0x150; // TArray<UPremiumCatalogItemSetDataAsset*>
	}

	namespace n_UShipTelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UAchievementReward { // : UReward
		constexpr auto AchievementId = 0x28; // uint32_t
	}

	namespace n_AShantyZone { // : AActor
		constexpr auto AudioZone = 0x3d0; // UOverlapTriggerComponent*
		constexpr auto BaseInstrument = 0x3d8; // AMusicalInstrument*
		constexpr auto Root = 0x3f0; // UPrimitiveComponent*
		constexpr auto PlayersInZone = 0x3f8; // TArray<AActor*>
		constexpr auto Instrument = 0x408; // AMusicalInstrument*
	}

	namespace n_UMergedCollisionComponent { // : UPrimitiveComponent
		constexpr auto PerInstanceData = 0x588; // TArray<FMergedCollisionComponentStaticMeshInstanceData>
	}

	namespace n_ABurrowEruptBase { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UAIAsyncTaskBlueprintProxy { // : UObject
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFail = 0x38; // FScriptMulticastDelegate
	}

	namespace n_UCheckBox { // : UContentWidget
		constexpr auto CheckedState = 0x150; // ECheckBoxState
		constexpr auto CheckedStateDelegate = 0x154; // DelegateProperty
		constexpr auto WidgetStyle = 0x168; // FCheckBoxStyle
		constexpr auto Style = 0x758; // USlateWidgetStyleAsset*
		constexpr auto UncheckedImage = 0x760; // USlateBrushAsset*
		constexpr auto UncheckedHoveredImage = 0x768; // USlateBrushAsset*
		constexpr auto UncheckedPressedImage = 0x770; // USlateBrushAsset*
		constexpr auto CheckedImage = 0x778; // USlateBrushAsset*
		constexpr auto CheckedHoveredImage = 0x780; // USlateBrushAsset*
		constexpr auto CheckedPressedImage = 0x788; // USlateBrushAsset*
		constexpr auto UndeterminedImage = 0x790; // USlateBrushAsset*
		constexpr auto UndeterminedHoveredImage = 0x798; // USlateBrushAsset*
		constexpr auto UndeterminedPressedImage = 0x7a0; // USlateBrushAsset*
		constexpr auto HorizontalAlignment = 0x7a8; // EHorizontalAlignment
		constexpr auto Padding = 0x7ac; // FMargin
		constexpr auto BorderBackgroundColor = 0x7c0; // FSlateColor
		constexpr auto OnCheckStateChanged = 0x7f0; // FScriptMulticastDelegate
	}

	namespace n_USpawnPortalTaleStepDesc { // : UTaleQuestStepDesc
		constexpr auto PortalDesc = 0x80; // UPortalDesc*
		constexpr auto SpawnedPortal = 0x88; // FQuestVariableActor
	}

	namespace n_UPremiumShopSettings { // : UObject
		constexpr auto PetShopDataAsset = 0x28; // FStringAssetReference
	}

	namespace n_ULevelStreamingKismet { // : ULevelStreaming
		constexpr auto bInitiallyLoaded = 0x210; // char : 1
		constexpr auto bInitiallyVisible = 0x210; // char : 1
	}

	namespace n_UCatalogListDataAsset { // : UDataAsset
		constexpr auto Catalogs = 0x28; // TArray<UCatalogDataAsset*>
	}

	namespace n_UCampaignComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ULogicalOrStatCondition { // : UStatCondition
		constexpr auto StatConditions = 0x28; // TArray<UStatCondition*>
	}

	namespace n_UMigrationUIComponent { // : UActorComponent
		constexpr auto UIContentsDataAsset = 0xd8; // UMigrationUIContentsDataAsset*
		constexpr auto TextRenderTarget = 0xe0; // UCanvasRenderTarget2D*
		constexpr auto DynamicMaterial = 0xe8; // UMaterialInstanceDynamic*
	}

	namespace n_UFlamethrowerCoordinatorComponent { // : UActorComponent
		constexpr auto Flamethrowers = 0xd0; // TArray<UFlamethrowerComponent*>
		constexpr auto AnimatedMechanismInterface = 0xe0; // TScriptInterface<Class>
		constexpr auto MechanismInteractionInterface = 0xf0; // TScriptInterface<Class>
	}

	namespace n_USeatStat_SitWithOthers { // : USeatStat
		constexpr auto PlayersSittingToFireStat = 0x48; // int32_t
	}

	namespace n_ALavaZone { // : AActor
		constexpr auto TimeBetweenActivations = 0x3d0; // FWeightedProbabilityRangeOfRanges
		constexpr auto ActiveDuration = 0x400; // FWeightedProbabilityRangeOfRanges
		constexpr auto LavaMaterial = 0x430; // UPhysicalMaterial*
		constexpr auto ActorsInZone = 0x438; // TArray<AActor*>
		constexpr auto Active = 0x448; // bool
		constexpr auto InitializeFromGlobalState = 0x449; // bool
		constexpr auto SelfActivating = 0x44a; // bool
		constexpr auto MaterialZone = 0x450; // TScriptInterface<Class>
		constexpr auto LocalPlayerDispatcher = 0x460; // TScriptInterface<Class>
	}

	namespace n_ULeaderboardQueryCallbackProxy { // : UObject
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_AModalInteractionProxy { // : AInteractableBase
		constexpr auto Mesh = 0x400; // UPrimitiveComponent*
		constexpr auto InteractionRegion = 0x408; // UInteractableComponent*
		constexpr auto InteractionType = 0x410; // AModalInteraction*
		constexpr auto DefaultTooltip = 0x418; // FText
		constexpr auto DefaultDisplayName = 0x450; // FText
		constexpr auto NotificationInputId = 0x488; // UNotificationInputId*
		constexpr auto DisplayPriority = 0x490; // EActionDisplayPriority
	}

	namespace n_UAmmoTransferMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UFirstPersonAnimaticList { // : UDataAsset
		constexpr auto NamedFirstPersonAnimatics = 0x28; // TArray<FNamedFirstPersonAnimatic>
	}

	namespace n_UNPCOnSurfaceVODataAsset { // : UDataAsset
		constexpr auto VOGroups = 0x28; // TArray<FNPCOnSurfaceVOGroup>
	}

	namespace n_UItemLoadoutComponent { // : UActorComponent
		constexpr auto MaxWeaponSlots = 0xd8; // int32_t
		constexpr auto ItemLoadout = 0xe0; // FItemLoadout
		constexpr auto LoadoutSlots = 0x100; // FItemLoadoutComponentSlots
		constexpr auto WeaponSlots_ClientPredicted = 0x120; // TArray<UWeaponItemCategory*>
	}

	namespace n_UNonVerbalRadialDataAsset { // : UDataAsset
		constexpr auto Pages = 0x28; // TArray<FNonVerbalPageData>
	}

	namespace n_UDeepSeaSettings { // : UDeveloperSettings
		constexpr auto DeepSeaStartDepth = 0x38; // float
		constexpr auto DepthToRemoveSurfaceNetCluster = 0x3c; // float
	}

	namespace n_UMaterialExpressionTextureSampleParameterSubUV { // : UMaterialExpressionTextureSampleParameter2D
		constexpr auto bBlend = 0x1c8; // char : 1
		constexpr auto bMipBiasOnLowResolution = 0x1c8; // char : 1
	}

	namespace n_UDistributionFloatConstant { // : UDistributionFloat
		constexpr auto Constant = 0x38; // float
	}

	namespace n_UAbsorbsLiquidComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AProjectileLauncherMechanismAction { // : AActor
		constexpr auto MechanismActionComponent = 0x3d8; // UMechanismActionComponent*
		constexpr auto Mode = 0x3e0; // EProjectileLauncherMechanismMode
		constexpr auto ProjectilePoolConfiguration = 0x3e8; // FPoolableCollectionMapConfiguration
	}

	namespace n_USpawnShipwreckTaleStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // USpawnShipwreckTaleStepDesc*
	}

	namespace n_URetrieveBootyHandInComponent { // : UInteractableComponent
		constexpr auto NotificationStartInputID = 0x118; // UNotificationInputId*
		constexpr auto NotificationReleaseInputID = 0x120; // UNotificationInputId*
		constexpr auto DisplayPriority = 0x128; // EActionDisplayPriority
		constexpr auto RetrieveTargetPoint = 0x12c; // FVector
		constexpr auto BootyStorageSettings = 0x148; // UBootyStorageSettings*
		constexpr auto OnRetrievedSFX = 0x168; // UWwiseEvent*
		constexpr auto OwnerActionRulesComponent = 0x170; // UActionRulesComponent*
		constexpr auto SpawnBootyEQSQuery = 0x178; // UEnvQuery*
		constexpr auto ShouldTellStoredBootyCounterOnTooltip = 0x180; // bool
	}

	namespace n_UWorldEndAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto AbilityDuration = 0xc8; // float
		constexpr auto FireShroudParams = 0xd0; // FAshenLordFireShroudParams
		constexpr auto GeyserManagerSetup = 0xe8; // UGeyserManagerSetupDataAsset*
		constexpr auto GeyserStartDelay = 0xf0; // float
		constexpr auto VolcanicEmitterClass = 0xf8; // AAshenLordVolcano*
		constexpr auto UseSuperHeatedWater = 0x100; // bool
		constexpr auto SuperHeatedWaterClass = 0x108; // ASuperheatedWater*
		constexpr auto CloudActor = 0x110; // UClass*
		constexpr auto CloudOffset = 0x130; // FVector
		constexpr auto CloudSpawnDelay = 0x13c; // float
		constexpr auto CloudDespawnPreWarm = 0x140; // float
		constexpr auto VolcanicRockStartDelay = 0x144; // float
	}

	namespace n_URestrictedInteractionInputComponent { // : UInteractionInputComponent
		constexpr auto AllowedInteractableTypes = 0x2d0; // TArray<UObject*>
		constexpr auto AllowedInteractionNotificationInputIds = 0x2e0; // TArray<UNotificationInputId*>
	}

	namespace n_UBTDecorator_DoesPathExist { // : UBTDecorator
		constexpr auto BlackboardKeyA = 0x68; // FBlackboardKeySelector
		constexpr auto BlackboardKeyB = 0x90; // FBlackboardKeySelector
		constexpr auto bUseSelf = 0xb8; // char : 1
		constexpr auto PathQueryType = 0xbc; // EPathExistanceQueryType
		constexpr auto FilterClass = 0xc0; // UNavigationQueryFilter*
	}

	namespace n_ATreasuryRoom { // : AActor
		constexpr auto RoomAreaComponent = 0x3d8; // UBoxComponent*
		constexpr auto TreasuryInactiveDurationMinSeconds = 0x3e0; // float
		constexpr auto TreasuryInactiveDurationMaxSeconds = 0x3e4; // float
		constexpr auto RoomFailureDurationSeconds = 0x3e8; // float
		constexpr auto WaveDelaySeconds = 0x3ec; // float
		constexpr auto EncounterDelaySeconds = 0x3f0; // float
		constexpr auto VaultDoorAnimDurationSeconds = 0x3f4; // float
		constexpr auto VaultDoorOpenDurationSeconds = 0x3f8; // float
		constexpr auto MinWavesInEncounter = 0x3fc; // int32_t
		constexpr auto MaxWavesInEncounter = 0x400; // int32_t
		constexpr auto MaxEncounters = 0x404; // int32_t
		constexpr auto WaveEncounters = 0x408; // TArray<FTreasuryWaveEncounter>
		constexpr auto FloodMechanismActor = 0x418; // AActor*
		constexpr auto FloodTriggerActor = 0x420; // AActor*
		constexpr auto DrainMechanismActor = 0x428; // AActor*
		constexpr auto DrainTriggerActor = 0x430; // AActor*
		constexpr auto VaultMechanismActor = 0x438; // AActor*
		constexpr auto VaultTriggerActor = 0x440; // AActor*
		constexpr auto VaultLootSpawner = 0x448; // AActor*
		constexpr auto VaultLootSpawnLocationActor = 0x450; // AActor*
		constexpr auto Shimmer = 0x458; // AActor*
		constexpr auto OverlappingActors = 0x478; // TArray<AActor*>
		constexpr auto CachedParticipantControllers = 0x488; // TArray<TWeakObjectPtr<AController>>
		constexpr auto VaultLootSpawnerActor = 0x498; // AActor*
		constexpr auto VaultOpenStat = 0x4a0; // FPlayerStat
		constexpr auto FloodMechanismComponent = 0x4a8; // UMechanismActionComponent*
		constexpr auto DrainMechanismComponent = 0x4b0; // UMechanismActionComponent*
		constexpr auto VaultMechanismComponent = 0x4b8; // UMechanismActionComponent*
		constexpr auto FloodTriggerComponent = 0x4c0; // TScriptInterface<Class>
		constexpr auto DrainTriggerComponent = 0x4d0; // TScriptInterface<Class>
		constexpr auto VaultTriggerComponent = 0x4e0; // TScriptInterface<Class>
	}

	namespace n_UBTTask_TeleportTo { // : UBTTask_BlackboardBase
		constexpr auto UseNavMesh = 0x88; // bool
	}

	namespace n_UHierarchicalInstancedStaticMeshComponent { // : UInstancedStaticMeshComponent
		constexpr auto SortedInstances = 0x6e0; // TArray<int32_t>
		constexpr auto NumBuiltInstances = 0x6f0; // int32_t
		constexpr auto BuiltInstanceBounds = 0x6f4; // FBox
		constexpr auto UnbuiltInstanceBounds = 0x710; // FBox
		constexpr auto UnbuiltInstanceBoundsList = 0x730; // TArray<FBox>
		constexpr auto OcclusionLayerNumNodes = 0x740; // int32_t
		constexpr auto bDisableCollision = 0x746; // bool
	}

	namespace n_UCannonballItemCategory { // : UConsumableItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UAbilityTask_WaitGameplayTag { // : UAbilityTask
		constexpr auto InstanceName = 0x28; // FName
	}

	namespace n_UMaterialExpressionConstant4Vector { // : UMaterialExpression
		constexpr auto Constant = 0x70; // FLinearColor
	}

	namespace n_UShantyPuzzleInteractionZoneComponent { // : USphereComponent
		constexpr auto SphereRadius = 0x5a8; // float
	}

	namespace n_UPlayerShroudBreakerTrackerComponent { // : UShroudBreakerTrackerComponent
		constexpr auto ShroudBreakerActive = 0xd0; // bool
	}

	namespace n_UEmoteFlourishDesc { // : UEmoteDesc
		constexpr auto FlourishMappings = 0x110; // TArray<FEmoteFlourishCategoryMapping>
		constexpr auto FlourishType = 0x120; // EEmoteFlourishType
	}

	namespace n_UParticleModuleAlignRotationToVelocity { // : UParticleModuleRotationBase
		constexpr auto AdditionalAngle = 0x50; // FRawDistributionFloat
	}

	namespace n_ADamageableCannonProjectileTest { // : ADamageableCannonProjectile
		constexpr auto ImpactExplosionDelayOverride = 0x658; // float
	}

	namespace n_UEnvQueryContext_SeenActorsProjectedToGround { // : UEnvQueryContext
		constexpr auto SeenActors = 0x28; // TArray<AActor*>
	}

	namespace n_UTaleEnchantedSpyglassService { // : UTaleQuestToolService
		constexpr auto ServiceDesc = 0x60; // UTaleQuestToolServiceDesc*
		constexpr auto WieldableDescs = 0x68; // TArray<UItemDesc*>
	}

	namespace n_UStaticMeshSocket { // : UObject
		constexpr auto SocketName = 0x28; // FName
		constexpr auto RelativeLocation = 0x30; // FVector
		constexpr auto RelativeRotation = 0x3c; // FRotator
		constexpr auto RelativeScale = 0x48; // FVector
		constexpr auto Tag = 0x58; // FString
	}

	namespace n_UTaleQuestNumericSwitchStepDesc { // : UTaleQuestStepDesc
		constexpr auto Condition = 0x80; // FQuestVariableInt
		constexpr auto Descs = 0x90; // TArray<UTaleQuestStepDesc*>
	}

	namespace n_UStorageContainerContentSpawner { // : UDataAsset
		constexpr auto Entries = 0x28; // TArray<FStorageContainerContentSpawnerEntry>
	}

	namespace n_UKnockbackAIAbilityTriggerComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UActorFlammableComponent { // : UFlammableComponent
		constexpr auto FireVFX = 0xf8; // UParticleSystem*
		constexpr auto SteamVFX = 0x100; // UParticleSystem*
		constexpr auto FireVFXIntensity = 0x108; // float
	}

	namespace n_UIslandSalvageSpawnerCollection { // : UDataAsset
		constexpr auto SalvageSpawners = 0x28; // TArray<USalvageItemSpawnComponent*>
	}

	namespace n_UAISenseEvent_Hearing { // : UAISenseEvent
		constexpr auto Event = 0x28; // FAINoiseEvent
	}

	namespace n_UNPCDialogAndExpression { // : UNPCDialogBinaryExpression
		constexpr auto Left = 0x28; // UNPCDialogExpression*
		constexpr auto Right = 0x30; // UNPCDialogExpression*
	}

	namespace n_ASkyLight { // : AInfo
		constexpr auto LightComponent = 0x3d0; // USkyLightComponent*
		constexpr auto bEnabled = 0x3d8; // char : 1
	}

	namespace n_ABootyStorageService { // : AActor
		constexpr auto BootyStorageSettings = 0x450; // UBootyStorageSettings*
		constexpr auto BootyStorageSettingsAsset = 0x458; // UBootyStorageSettingsAsset*
		constexpr auto Storage = 0x460; // TArray<FCrewBootyStorage>
		constexpr auto SpawnBootyEQSRequest = 0x470; // FEnvQueryRequest
		constexpr auto SpawnRetrievalActorEQSRequest = 0x5e0; // FEnvQueryRequest
	}

	namespace n_UPetPerchComponent { // : UInteractableComponent
		constexpr auto AllowedPetTypes = 0x130; // TArray<UPetDesc*>
		constexpr auto HangoutSpotIndex = 0x140; // int32_t
		constexpr auto HangoutSpotName = 0x144; // FName
		constexpr auto InteractionPointLocation = 0x14c; // FVector
		constexpr auto Enabled = 0x158; // bool
		constexpr auto BlocksPetEmoteReactions = 0x159; // bool
		constexpr auto IgnorePickupFromHangoutTooltipDisplayOffset = 0x15a; // bool
	}

	namespace n_UCanvas { // : UObject
		constexpr auto OrgX = 0x28; // float
		constexpr auto OrgY = 0x2c; // float
		constexpr auto ClipX = 0x30; // float
		constexpr auto ClipY = 0x34; // float
		constexpr auto DrawColor = 0x38; // FColor
		constexpr auto bCenterX = 0x3c; // char : 1
		constexpr auto bCenterY = 0x3c; // char : 1
		constexpr auto bNoSmooth = 0x3c; // char : 1
		constexpr auto SizeX = 0x40; // int32_t
		constexpr auto SizeY = 0x44; // int32_t
		constexpr auto ColorModulate = 0x50; // FPlane
		constexpr auto DefaultTexture = 0x60; // UTexture2D*
		constexpr auto GradientTexture0 = 0x68; // UTexture2D*
		constexpr auto ReporterGraph = 0x70; // UReporterGraph*
	}

	namespace n_USummonAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto SummonSpawner = 0xc8; // UAIIncrementalWaveSpawner*
		constexpr auto NumToSpawn = 0xd0; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto MaxTotalAIFromSummonAbility = 0xe0; // int32_t
		constexpr auto DespawnAllOnDeath = 0xe4; // bool
	}

	namespace n_UTextureSwitchByEthnicity { // : UTextureSwitch
		constexpr auto Entries = 0x220; // TArray<FTextureSwitchEthnicityEntry>
	}

	namespace n_UAnimSequenceBase { // : UAnimationAsset
		constexpr auto Notifies = 0x50; // TArray<FAnimNotifyEvent>
		constexpr auto SequenceLength = 0x60; // float
		constexpr auto RateScale = 0x64; // float
		constexpr auto RawCurveData = 0x68; // FRawCurveTracks
	}

	namespace n_UAnimNotifyState_TimedParticleEffect { // : UAnimNotifyState
		constexpr auto PSTemplate = 0x28; // UParticleSystem*
		constexpr auto SocketName = 0x30; // FName
		constexpr auto LocationOffset = 0x38; // FVector
		constexpr auto RotationOffset = 0x44; // FRotator
		constexpr auto bOwnerOnlySee = 0x50; // bool
		constexpr auto bOwnerNoSee = 0x51; // bool
		constexpr auto bDestroyAtEnd = 0x52; // bool
		constexpr auto bWorldOwnedEffect = 0x53; // bool
	}

	namespace n_UFuseComponentMetaGenerator { // : UItemSnapshotMetaGenerator
		constexpr auto MetaWrapper = 0x28; // UScriptStruct*
	}

	namespace n_UParticleModuleTypeDataBeam2 { // : UParticleModuleTypeDataBase
		constexpr auto BeamMethod = 0x50; // EBeam2Method
		constexpr auto TextureTile = 0x54; // int32_t
		constexpr auto TextureTileDistance = 0x58; // float
		constexpr auto Sheets = 0x5c; // int32_t
		constexpr auto MaxBeamCount = 0x60; // int32_t
		constexpr auto Speed = 0x64; // float
		constexpr auto InterpolationPoints = 0x68; // int32_t
		constexpr auto bAlwaysOn = 0x6c; // char : 1
		constexpr auto UpVectorStepSize = 0x70; // int32_t
		constexpr auto BranchParentName = 0x74; // FName
		constexpr auto Distance = 0x80; // FRawDistributionFloat
		constexpr auto TaperMethod = 0xb8; // EBeamTaperMethod
		constexpr auto TaperFactor = 0xc0; // FRawDistributionFloat
		constexpr auto TaperScale = 0xf8; // FRawDistributionFloat
		constexpr auto RenderGeometry = 0x130; // char : 1
		constexpr auto RenderDirectLine = 0x130; // char : 1
		constexpr auto RenderLines = 0x130; // char : 1
		constexpr auto RenderTessellation = 0x130; // char : 1
		constexpr auto LOD_BeamModule_Source = 0x138; // TArray<UParticleModuleBeamSource*>
		constexpr auto LOD_BeamModule_Target = 0x148; // TArray<UParticleModuleBeamTarget*>
		constexpr auto LOD_BeamModule_Noise = 0x158; // TArray<UParticleModuleBeamNoise*>
		constexpr auto LOD_BeamModule_SourceModifier = 0x168; // TArray<UParticleModuleBeamModifier*>
		constexpr auto LOD_BeamModule_TargetModifier = 0x178; // TArray<UParticleModuleBeamModifier*>
	}

	namespace n_UFireworksSettingsDataAsset { // : UDataAsset
		constexpr auto LoadedFuseTimer = 0x28; // float
		constexpr auto FuseSoundWisePool = 0x30; // UWwiseObjectPoolWrapper*
		constexpr auto FuseActivateSoundPlayEvent = 0x38; // UWwiseEvent*
		constexpr auto FuseSoundPlayEvent = 0x40; // UWwiseEvent*
		constexpr auto FuseSoundStopEvent = 0x48; // UWwiseEvent*
		constexpr auto FuseParticleSystem = 0x50; // UObject*
		constexpr auto FuseMeshAssetReference = 0x58; // FStringAssetReference
	}

	namespace n_ULiquidContainerComponent { // : UActorComponent
		constexpr auto LiquidMaterialName = 0xc8; // FName
		constexpr auto LiquidMaterialParameterName = 0xd0; // FName
		constexpr auto LiquidTypeParams = 0xd8; // TArray<FLiquidTypeParams>
		constexpr auto StartingLiquidLevelNormalised = 0xe8; // float
		constexpr auto TransitionCurve = 0xf0; // UCurveFloat*
		constexpr auto TransitionSpeedDecrease = 0xf8; // float
		constexpr auto TransitionSpeedIncrease = 0xfc; // float
		constexpr auto LiquidMaterials = 0x100; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UAIEncounterGenerationRecipeRankOrderList { // : UDataAsset
		constexpr auto Recipes = 0x28; // TArray<UAIEncounterGenerationRecipe*>
		constexpr auto FeatureBasedRecipeLists = 0x38; // TArray<FAIEncounterGenerationRecipeFeatureBasedRankOrderList>
	}

	namespace n_UCommodityEntitlementRedemptionAsset { // : UDataAsset
		constexpr auto CommoditiesForRedemption = 0x28; // TArray<FEntitlementToRedeemItems>
	}

	namespace n_UIntentComponent { // : UActorComponent
		constexpr auto AckToken = 0xd8; // char
		constexpr auto RequiresHandshake = 0xd9; // bool
		constexpr auto ServerIntent = 0xdc; // float
		constexpr auto LocalIntent = 0xe0; // float
	}

	namespace n_UParticleModuleSizeBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UPhysicsThrusterComponent { // : USceneComponent
		constexpr auto ThrustStrength = 0x2b0; // float
	}

	namespace n_UVulnerabilityAIAbilityParams { // : UAthenaAIAbilityParams
		constexpr auto VulnerabilityDuration = 0xc8; // FAthenaAIAbilityPlayerBasedRanges
		constexpr auto MaxVulnerabilityPeriodDamageThreshold = 0xd8; // FAthenaAIAbilityPlayerBasedRanges
	}

	namespace n_UPlayerMigratableStatusComponent { // : UActorComponent
		constexpr auto CurrentShip = 0x210; // AActor*
	}

	namespace n_ULandmarkReactionEventPlayReactionFromAnotherLandmark { // : ULandmarkReactionEvent
		constexpr auto ReactionIndex = 0x38; // int32_t
	}

	namespace n_UAIPerceptionSystem { // : UObject
		constexpr auto Senses = 0x80; // TArray<UAISense*>
		constexpr auto PerceptionAgingRate = 0x90; // float
	}

	namespace n_AAthenaFFTWater { // : AFFTWater
		constexpr auto FFTWaterComponent = 0x408; // UFFTWaterComponent*
		constexpr auto ExtendedPlaneComponent = 0x410; // UFFTWaterExtendedPlaneComponent*
	}

	namespace n_UTaleQuestLoopStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UTaleQuestLoopStepDesc*
		constexpr auto CurrentStep = 0x98; // UTaleQuestStep*
	}

	namespace n_UBoneAIFormComponent { // : UAthenaAIFormComponent
		constexpr auto VfxCustomisations = 0xd0; // TArray<FAthenaAIFormComponentVfxCustomisation>
		constexpr auto FormData = 0xe0; // UAthenaAIFormDataAsset*
		constexpr auto HitReactionsLayer = 0xe8; // UCharacterHitReactionDamagerTypeToAnimTypeLayer*
	}

	namespace n_ASpireResource { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UInstancedRopeComponent { // : UPrimitiveComponent
		constexpr auto StaticMesh = 0x588; // UStaticMesh*
		constexpr auto Ropes = 0x590; // TArray<FInstancedRopeParams>
		constexpr auto ShadowLOD = 0x5a0; // int32_t
	}

	namespace n_UDamageType { // : UObject
		constexpr auto bCausedByWorld = 0x28; // char : 1
		constexpr auto bScaleMomentumByMass = 0x28; // char : 1
		constexpr auto DamageImpulse = 0x2c; // float
		constexpr auto bRadialDamageVelChange = 0x30; // char : 1
		constexpr auto DestructibleImpulse = 0x34; // float
		constexpr auto DestructibleDamageSpreadScale = 0x38; // float
		constexpr auto DamageFalloff = 0x3c; // float
	}

	namespace n_UAISpawnWaveSequenceRankProgression { // : UDataAsset
		constexpr auto RankMappings = 0x28; // TArray<FAISpawnWaveSequenceRankMapping>
		constexpr auto NumberOfRanks = 0x38; // int32_t
	}

	namespace n_UBTTask_SetBlackboardBoolValue { // : UBTTask_BlackboardBase
		constexpr auto NewValue = 0x88; // bool
	}

	namespace n_UTaleQuestReleaseContendedResourceStepDesc { // : UTaleQuestStepDesc
		constexpr auto ResourceHandle = 0x80; // FQuestVariableTaleResourceHandle
	}

	namespace n_UAggressiveGhostShipAnimationDataAsset { // : UDataAsset
		constexpr auto LocationCurve = 0x28; // FRuntimeVectorCurve
		constexpr auto RotationCurve = 0x198; // FRuntimeVectorCurve
		constexpr auto VelocityCurve = 0x308; // FRuntimeFloatCurve
	}

	namespace n_USummonAIAbility { // : UAthenaAIAbility
		constexpr auto SummonSpawner = 0x78; // UAIIncrementalWaveSpawner*
	}

	namespace n_UCustomAnimationMontageDefinitionListingDataAsset { // : UDataAsset
		constexpr auto Entries = 0x28; // TArray<FCustomAnimationMontageDefinitionEntry>
	}

	namespace n_AHarpoonLauncher { // : AControllableObject
		constexpr auto InteractionDisplayUseVerb = 0x6b0; // FText
		constexpr auto InteractionDisplayName = 0x6e8; // FText
		constexpr auto CameraDockSocket = 0x720; // FName
		constexpr auto CharacterDockSocket = 0x728; // FName
		constexpr auto TooltipSocket = 0x730; // FName
		constexpr auto ProjectileLaunchSocket = 0x738; // FName
		constexpr auto TetherAttachSocket = 0x740; // FName
		constexpr auto RetractedCharacterTargetPositionSocket = 0x748; // FName
		constexpr auto RetractedCharacterTargetPositionSourceMesh = 0x750; // FActorComponentSelector
		constexpr auto PitchRange = 0x760; // FFloatRange
		constexpr auto YawRange = 0x770; // FFloatRange
		constexpr auto FireAINoiseTag = 0x780; // FName
		constexpr auto FireAINoiseRange = 0x788; // float
		constexpr auto TetherChildActorComponent = 0x790; // UChildActorComponent*
		constexpr auto BaseMeshComponent = 0x798; // UStaticMeshComponent*
		constexpr auto MountMeshComponent = 0x7a0; // UStaticMeshComponent*
		constexpr auto BarrelMeshComponent = 0x7a8; // UStaticMeshComponent*
		constexpr auto LeftSpinnerMeshComponent = 0x7b0; // UStaticMeshComponent*
		constexpr auto RightSpinnerMeshComponent = 0x7b8; // UStaticMeshComponent*
		constexpr auto RopeSpoolMeshComponent = 0x7c0; // UStaticMeshComponent*
		constexpr auto InteractableComponent = 0x7c8; // UInteractableComponent*
		constexpr auto RetractorComponent = 0x7d0; // URetractorComponent*
		constexpr auto ProjectileChildActorComponent = 0x7d8; // UChildActorComponent*
		constexpr auto LauncherDamageComponent = 0x7e0; // UDamageableComponent*
		constexpr auto TetherCustomisationComponent = 0x7e8; // UTetherCustomisationComponent*
		constexpr auto TetherInterface = 0x7f0; // TScriptInterface<Class>
		constexpr auto AudioParams = 0x818; // UHarpoonLauncherAudioParamsDataAsset*
		constexpr auto VFXParams = 0x820; // UHarpoonLauncherVFXDataAsset*
		constexpr auto HarpoonImpactRumble = 0x828; // UForceFeedbackEffect*
		constexpr auto HarpoonDockedRumble = 0x830; // UForceFeedbackEffect*
		constexpr auto HarpoonDockedCameraShake = 0x838; // UCameraShake*
		constexpr auto EstimatedRetractionTimeScalarCurve = 0x840; // UCurveFloat*
		constexpr auto StartControllingNotificationInputId = 0x848; // UNotificationInputId*
		constexpr auto ProjectileSpeed = 0x850; // float
		constexpr auto RetractionSpeed = 0x854; // float
		constexpr auto SpinnerPitchScalar = 0x858; // float
		constexpr auto RopeSpoolPitchScalar = 0x85c; // float
		constexpr auto SpinnerMaxSlideDistance = 0x860; // float
		constexpr auto MaximumTetherLengthCm = 0x864; // float
		constexpr auto AimRelativeAngularLimitsDegrees = 0x868; // FRotator
		constexpr auto PositionRelativeOutOfWaterPitchLimitDegrees = 0x874; // float
		constexpr auto ShipSubmersionProportionRetractThreshold = 0x878; // float
		constexpr auto ShipOutOfWaterRetractTimeSecs = 0xad8; // float
		constexpr auto PitchSpeed = 0xae0; // float
		constexpr auto YawSpeed = 0xae4; // float
		constexpr auto ClientToServerAimBlendSpeed = 0xae8; // float
		constexpr auto OrientateBarrelTowardsTetherSpeedDistanceMultiplier = 0xaec; // float
		constexpr auto MaxReelInSpeedCmPerSec = 0xaf0; // float
		constexpr auto MaxWeightReelableAtMaxSpeedKg = 0xaf4; // float
		constexpr auto ReplicatedPitch = 0xaf8; // float
		constexpr auto ReplicatedYaw = 0xafc; // float
		constexpr auto IsMigrating = 0xb00; // bool
		constexpr auto AlwaysRetractAtMaxLength = 0xb1d; // bool
		constexpr auto ForwardedDamagerTypes = 0xb20; // TArray<UDamagerType*>
	}

	namespace n_UMechanismProximityResetComponent { // : USphereComponent
		constexpr auto Delay = 0x5b0; // float
	}

	namespace n_UAnimationDataStoreWeakReferenceAsset { // : UDataAsset
		constexpr auto AssetWeakRefs = 0x28; // TArray<FAnimationDataStoreAssetWeakReferenceEntry>
	}

	namespace n_UWaterBarrelInputComponent { // : ULookAtOffsetInputComponent
		constexpr auto WaterBarrel = 0x280; // AWaterBarrel*
	}

	namespace n_UBlendSpace { // : UBlendSpaceBase
		constexpr auto AxisToScaleAnimation = 0x108; // EBlendSpaceAxis
	}

	namespace n_UTaleQuestSelectClueSiteForLootStepDesc { // : UTaleQuestStepDesc
		constexpr auto SelectionStrategy = 0x80; // UTaleQuestArrayEntrySelectionStrategy*
		constexpr auto ClueSiteLootRestrictions = 0x88; // UClueSiteLootRestrictionsDataAsset*
		constexpr auto LootType = 0x90; // EClueSiteLootType
		constexpr auto OutputClueSite = 0x98; // FQuestVariableClueSite
		constexpr auto MaxedAllClueSites = 0xa8; // FQuestVariableBool
	}

	namespace n_UShipLightComponent { // : UActorComponent
		constexpr auto DormantShipRegions = 0xd0; // TArray<EShipRegion>
		constexpr auto ExposeToNetProxy = 0xe0; // bool
		constexpr auto NetProxyBitIndex = 0xe4; // int32_t
		constexpr auto LightParameters = 0xe8; // UInteractableLightParameters*
		constexpr auto LightIsOn_Server = 0xf1; // bool
		constexpr auto Lights = 0x108; // TArray<UPointLightComponent*>
	}

	namespace n_UGetVeilOfTheAncientsStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ACoherentUIGTSystem { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UItemQualityComponent { // : UActorComponent
		constexpr auto ItemQualityLevel = 0xd0; // EEmissaryQualityLevel
		constexpr auto CompanySpecificItemQualityLevels = 0xd8; // TArray<FPerComanyItemQualityEntry>
		constexpr auto CompanySpecificComplexItemQualityLevels = 0xe8; // TArray<FPerComanyComplexItemQualityEntry>
		constexpr auto CompanySpecificComplexItemQualityLevelsHandin = 0xf8; // TArray<FPerComanyComplexItemQualityEntry>
	}

	namespace n_UIsWieldedCommodityItemInDemandStatCondition { // : UTargetedStatCondition
		constexpr auto CommodityDemand = 0x30; // ECommodityDemand
	}

	namespace n_UNPCDialogPredicateAtHealthStage { // : UNPCDialogPredicate
		constexpr auto ActorIdx = 0x38; // int32_t
		constexpr auto HealthStage = 0x3c; // int32_t
	}

	namespace n_UAIRegionComponent { // : USceneComponent
		constexpr auto UpdateRegionPosition = 0x2b8; // bool
		constexpr auto NavMeshAgentType = 0x2bc; // FName
		constexpr auto RegionRadius = 0x2c4; // float
		constexpr auto SpawnLocationGroups = 0x2c8; // TArray<FSpawnLocationGroup>
	}

	namespace n_UBTDecorator_RandomDiceRoll { // : UBTDecorator
		constexpr auto Chance = 0x68; // FAIDataProviderFloatValue
	}

	namespace n_UMaterialExpressionSceneColor { // : UMaterialExpression
		constexpr auto InputMode = 0x70; // EMaterialSceneAttributeInputMode
		constexpr auto Input = 0x78; // FExpressionInput
		constexpr auto OffsetFraction = 0xb0; // FExpressionInput
		constexpr auto ConstInput = 0xe8; // FVector2D
	}

	namespace n_UKrakenHeadAnimationInstance { // : UAnimInstance
		constexpr auto CurrentState = 0x440; // UKrakenHeadState*
		constexpr auto PreviousState = 0x448; // UKrakenHeadState*
		constexpr auto MappingAsset = 0x450; // UKrakenHeadStateAnimationsDataAsset*
		constexpr auto SpawnBlendTime = 0x458; // float
		constexpr auto DefaultBlendTime = 0x45c; // float
		constexpr auto IsInIntro = 0x460; // bool
		constexpr auto PlayingMontage = 0x468; // UAnimMontage*
		constexpr auto KrakenHeadHitReactionAsset = 0x480; // UKrakenHeadHitReactAnimationsDataAsset*
	}

	namespace n_UUncachedResourceProviderComponent { // : UResourceProviderComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ACoherentBaseHUD { // : AHUD
		constexpr auto WhiteColor = 0x3d0; // FColor
		constexpr auto GreenColor = 0x3d4; // FColor
		constexpr auto RedColor = 0x3d8; // FColor
		constexpr auto PlayerOwner = 0x3e0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x3e8; // char : 1
		constexpr auto bShowHUD = 0x3e8; // char : 1
		constexpr auto bShowDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowHitBoxDebugInfo = 0x3e8; // char : 1
		constexpr auto bShowOverlays = 0x3e8; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x3e8; // char : 1
		constexpr auto PostRenderedActors = 0x3f0; // TArray<AActor*>
		constexpr auto LastHUDRenderTime = 0x400; // float
		constexpr auto RenderDelta = 0x404; // float
		constexpr auto DebugDisplay = 0x408; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x418; // TArray<FName>
		constexpr auto Canvas = 0x428; // UCanvas*
		constexpr auto DebugCanvas = 0x430; // UCanvas*
		constexpr auto DebugTextList = 0x438; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x448; // AActor*
		constexpr auto ShowDebugTargetActor = 0x450; // AActor*
	}

	namespace n_UTelemetryProgressStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UTelemetryProgressStepDesc*
	}

	namespace n_ULoadoutComponent { // : UActorComponent
		constexpr auto HaveSourcedLoadout = 0xf8; // bool
		constexpr auto LoadoutPersistence = 0xf9; // ELoadoutPersistence
		constexpr auto SupplementalLoadout = 0x100; // FLoadout
	}

	namespace n_UAISpawnMatchesAllContextsCondition { // : UAISpawnOverrideCondition
		constexpr auto Contexts = 0x30; // TArray<UAISpawnContextId*>
	}

	namespace n_UNavArea_Null { // : UNavArea
		constexpr auto DefaultCost = 0x28; // float
		constexpr auto FixedAreaEnteringCost = 0x2c; // float
		constexpr auto DrawColor = 0x30; // FColor
		constexpr auto SupportedAgents = 0x34; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x38; // char : 1
		constexpr auto bSupportsAgent1 = 0x38; // char : 1
		constexpr auto bSupportsAgent2 = 0x38; // char : 1
		constexpr auto bSupportsAgent3 = 0x38; // char : 1
		constexpr auto bSupportsAgent4 = 0x38; // char : 1
		constexpr auto bSupportsAgent5 = 0x38; // char : 1
		constexpr auto bSupportsAgent6 = 0x38; // char : 1
		constexpr auto bSupportsAgent7 = 0x38; // char : 1
		constexpr auto bSupportsAgent8 = 0x39; // char : 1
		constexpr auto bSupportsAgent9 = 0x39; // char : 1
		constexpr auto bSupportsAgent10 = 0x39; // char : 1
		constexpr auto bSupportsAgent11 = 0x39; // char : 1
		constexpr auto bSupportsAgent12 = 0x39; // char : 1
		constexpr auto bSupportsAgent13 = 0x39; // char : 1
		constexpr auto bSupportsAgent14 = 0x39; // char : 1
		constexpr auto bSupportsAgent15 = 0x39; // char : 1
	}

	namespace n_UDiggingBaseParamsDataAsset { // : UDataAsset
		constexpr auto BaseOverrides = 0x28; // TArray<FItemDiggingBaseOverride>
		constexpr auto Default = 0x38; // UItemDiggingBaseConfig*
	}

	namespace n_UEmissaryRewardMultiplierModelDataAsset { // : UDataAsset
		constexpr auto EmissaryRewardMultiplierModels = 0x28; // TArray<FEmissaryRewardMultiplierModel>
	}

	namespace n_AActionRuleTestActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UWieldablePetHungerComponent { // : UActorComponent
		constexpr auto HungerData = 0xc8; // UWieldablePetHungerDataAsset*
		constexpr auto CachedOverlappingActors = 0xf8; // TArray<FOverlapResult>
		constexpr auto ActiveFoodSources = 0x108; // TArray<FWieldablePetFoodSourceEntry>
		constexpr auto FoodSourcesToRemove = 0x118; // TArray<FWieldablePetFoodSourceEntry>
	}

	namespace n_UEyeOfReachItemCategory { // : UWeaponItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UInventoryItemComponent { // : UActorComponent
		constexpr auto Type = 0xd0; // EItemType
		constexpr auto Icon = 0xd8; // FStringAssetReference
		constexpr auto BackgroundImage = 0xe8; // FStringAssetReference
		constexpr auto IconUrl = 0xf8; // FString
		constexpr auto IconRotation = 0x108; // float
		constexpr auto IconScale = 0x10c; // float
	}

	namespace n_AProtoTavernPiano { // : AControllableObject
		constexpr auto PianoMesh = 0x508; // UStaticMeshComponent*
		constexpr auto DisplayName = 0x510; // FText
		constexpr auto AudioPool = 0x548; // UWwiseObjectPoolWrapper*
	}

	namespace n_UAbilityTask_WaitInputPress { // : UAbilityTask
		constexpr auto OnPress = 0x68; // FScriptMulticastDelegate
	}

	namespace n_USharkAICharacterAudioComponentParams { // : UDataAsset
		constexpr auto PlaySharkAttackTellLoop = 0x28; // UWwiseEvent*
		constexpr auto StopSharkAttackTellLoop = 0x30; // UWwiseEvent*
		constexpr auto PlaySharkDeath = 0x38; // UWwiseEvent*
		constexpr auto PlaySharkHit = 0x40; // UWwiseEvent*
		constexpr auto PlaySharkFinLoop = 0x48; // UWwiseEvent*
		constexpr auto StopSharkFinLoop = 0x50; // UWwiseEvent*
		constexpr auto SharkFinUnderwaterSwitchGroup = 0x58; // FName
		constexpr auto SharkFinUnderwaterSwitchAboveWater = 0x60; // FName
		constexpr auto SharkFinUnderwaterSwitchUnderwater = 0x68; // FName
		constexpr auto SharkSpeedFactorRtpc = 0x70; // FName
	}

	namespace n_ACameraBlockingVolume { // : AVolume
		constexpr auto BrushType = 0x3d0; // EBrushType
		constexpr auto BrushColor = 0x3d4; // FColor
		constexpr auto PolyFlags = 0x3d8; // int32_t
		constexpr auto bColored = 0x3dc; // char : 1
		constexpr auto bSolidWhenSelected = 0x3dc; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x3dc; // char : 1
		constexpr auto bNotForClientOrServer = 0x3dc; // char : 1
		constexpr auto Brush = 0x3e0; // UModel*
		constexpr auto BrushComponent = 0x3e8; // UBrushComponent*
		constexpr auto bInManipulation = 0x3f0; // char : 1
		constexpr auto SavedSelections = 0x3f8; // TArray<FGeomSelection>
	}

	namespace n_UMerchantCrateItemDescMock { // : UBootyItemDesc
		constexpr auto CanBeAddedToLoadout = 0xd8; // char : 1
		constexpr auto IsTransient = 0xd8; // char : 1
		constexpr auto PreviousItem = 0xe0; // FString
		constexpr auto NextItem = 0xf0; // FString
		constexpr auto IconRadPath = 0x100; // FStringAssetReference
		constexpr auto InstanceClassType = 0x110; // FStringClassReference
		constexpr auto ItemInfoOverrides = 0x120; // TArray<FItemInfoTogglePair>
	}

	namespace n_URegionalAssetCache { // : UObject
		constexpr auto RegionAssetLists = 0x30; // TMap<UObject*, FStringAssetReference>
		constexpr auto CurrentRegionKey = 0x80; // UObject*
	}

	namespace n_UPetEntitlementBaseDesc { // : UEntitlementDesc
		constexpr auto Title = 0x28; // FText
		constexpr auto Description = 0x60; // FText
		constexpr auto IconPath = 0x98; // FStringAssetReference
		constexpr auto IconInvPath = 0xa8; // FStringAssetReference
		constexpr auto IconPrvPath = 0xb8; // FStringAssetReference
		constexpr auto Category = 0xc8; // UCategoryBase*
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_USunkenIslandSettingsDataAsset { // : UDataAsset
		constexpr auto ExclusionInfo = 0x28; // TArray<FGameplayEventExclusionInfo>
	}

	namespace n_UAIShipServiceDataAsset { // : UDataAsset
		constexpr auto BattleEncounterParams = 0x28; // UAIShipEncounterParamsDataAsset*
		constexpr auto AggressiveEncounterParams = 0x30; // FAIShipEncounterParams
		constexpr auto PassiveEncounterParams = 0x48; // FAIShipEncounterParams
		constexpr auto ObstacleBucketDimensions = 0x60; // FIntPoint
		constexpr auto ShipwreckObstacleRadius = 0x68; // float
		constexpr auto ContextDescGenerationParams = 0x70; // FAIShipContextDescGenerationParams
		constexpr auto EncounterGenerationParams = 0xf0; // FAIShipBattleEncounterDescGenerationParams
		constexpr auto AggressiveEncounterGenerationParams = 0x118; // FAIShipSingleWaveEncounterDescGenerationParams
		constexpr auto PassiveEncounterGenerationParams = 0x128; // FAIShipSingleWaveEncounterDescGenerationParams
		constexpr auto TimerBattleFirstRegenInterval = 0x138; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimerBattleRegenInterval = 0x168; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimerBattleFinderThrottle = 0x198; // float
		constexpr auto TimerBattleRetryRegenInterval = 0x1a0; // FWeightedProbabilityRangeOfRanges
		constexpr auto TimerBattleMinActivationDistanceFromPlayers = 0x1d0; // float
		constexpr auto RewardMarkerParams = 0x1d8; // UShortRangeMarkerDataAsset*
	}

	namespace n_UAthenaAICharacterMovementComponent { // : UAthenaCharacterMovementComponent
		constexpr auto DefaultMovementProperties = 0x808; // FAIStrategyMovementProperties
		constexpr auto AIStrategyMovementProperties = 0x820; // TArray<FAIStrategyMovementProperties>
		constexpr auto ItemCategoryAIStrategyMovementPropertiesOverrides = 0x830; // TArray<FItemCategoryAIStrategyMovementPropertiesOverride>
		constexpr auto BlendSpeed = 0x840; // float
		constexpr auto KeepOnNavMeshProjectionDistance = 0x844; // float
		constexpr auto bDebugKeepOnNavMesh = 0x848; // bool
		constexpr auto DisableNavMeshChecks = 0x849; // bool
		constexpr auto OverrideSmoothNetUpdateDistancesDuringCharge = 0x84a; // bool
		constexpr auto ChargeMaxSmoothNetUpdateDist = 0x84c; // float
		constexpr auto ChargeNoSmoothNetUpdateDist = 0x850; // float
		constexpr auto ChargeSmoothNetUpdateGracePeriod = 0x854; // float
		constexpr auto DesiredMaxSpeedAmp = 0x8f8; // float
		constexpr auto DesiredMaxAccelAmp = 0x8fc; // float
	}

	namespace n_ACollectorsChestItemInfo { // : ATreasureChestItemInfo
		constexpr auto GoldInContainerRewardId = 0x718; // FRewardId
		constexpr auto GoldInContainerDataAsset = 0x738; // UGoldInContainerDataAsset*
		constexpr auto CollectorsChestSharedParams = 0x740; // UCollectorsChestSharedParamsDataAsset*
		constexpr auto PagesInContainerDataAsset = 0x748; // UQuestBookPagesInContainerDataAsset*
		constexpr auto CurrentLayerPriorityOrder = 0x750; // TArray<ULayerInContainerComponent*>
		constexpr auto Material = 0x760; // ECollectorsChestMaterial
		constexpr auto ItemInfosToStore = 0x770; // TArray<AItemInfo*>
		constexpr auto CollectorsChestShipOwnershipPropagationComponent = 0x780; // UCollectorsChestShipOwnershipPropagationComponent*
	}

	namespace n_UMerchantQuestData { // : UDataAsset
		constexpr auto ContractCompletePopupDesc = 0x28; // UPopUpMessageDesc*
		constexpr auto ContractExpiredPopupDesc = 0x30; // UPopUpMessageDesc*
	}

	namespace n_UTaleAddStormAvoidanceAreaStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UWaitForMechanismActivationStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UWaitForMechanismActivationStepDesc*
	}

	namespace n_USeatStat { // : UObject
		constexpr auto Stat = 0x28; // FPlayerStat
	}

	namespace n_UTexture { // : UObject
		constexpr auto LODBias = 0x28; // int32_t
		constexpr auto NumCinematicMipLevels = 0x2c; // int32_t
		constexpr auto SRGB = 0x30; // char : 1
		constexpr auto NeverStream = 0x30; // char : 1
		constexpr auto bNoTiling = 0x30; // char : 1
		constexpr auto bUseCinematicMipLevels = 0x30; // char : 1
		constexpr auto CompressionNone = 0x30; // char : 1
		constexpr auto bUAV = 0x30; // char : 1
		constexpr auto MaxQualityReduction = 0x34; // uint32_t
		constexpr auto CachedCombinedLODBias = 0x38; // int32_t
		constexpr auto bAsyncResourceReleaseHasBeenStarted = 0x3c; // char : 1
		constexpr auto CompressionSettings = 0x40; // TextureCompressionSettings
		constexpr auto Filter = 0x41; // TextureFilter
		constexpr auto LODGroup = 0x42; // TextureGroup
		constexpr auto StreamingPriorityBoost = 0x44; // float
		constexpr auto ExternalMips = 0xa0; // TArray<FExternalMip>
	}

	namespace n_UParticleModuleSpawnBase { // : UParticleModule
		constexpr auto bProcessSpawnRate = 0x50; // char : 1
		constexpr auto bProcessBurstList = 0x50; // char : 1
	}

	namespace n_UPlayerNameplateLocationOverrideComponent { // : UActorComponent
		constexpr auto NameplateLocation = 0xd0; // FTransform
		constexpr auto AdditionalHeight = 0x100; // float
	}

	namespace n_UWoodRepairTypeId { // : URepairTypeId
		constexpr auto DisplayName = 0x28; // FText
	}

	namespace n_USeasonPopupAsset { // : UDataAsset
		constexpr auto ThemeId = 0x28; // FName
		constexpr auto TierInfos = 0x30; // TArray<FSeasonIconPopupAsset>
		constexpr auto TrialInfos = 0x40; // TArray<FSeasonGoalPopupAsset>
		constexpr auto DeedInfos = 0x50; // TArray<FSeasonGoalPopupAsset>
		constexpr auto RenownActionInfos = 0x60; // TArray<FSeasonGoalPopupAsset>
		constexpr auto SeasonInfo = 0x70; // FSeasonIconPopupAsset
		constexpr auto LevelIncreaseInfo = 0xd8; // FSeasonIconPopupAsset
		constexpr auto RewardInfo = 0x140; // FSeasonIconPopupAsset
		constexpr auto MultipleRewardsInfo = 0x1a8; // FSeasonIconPopupAsset
		constexpr auto BackgroundImage = 0x210; // FStringAssetReference
		constexpr auto DefaultToastSfxEventName = 0x220; // FString
		constexpr auto DefaultToastEventName = 0x230; // FString
		constexpr auto DefaultToastSwitchName = 0x240; // FString
		constexpr auto DefaultToastSwitchValue = 0x250; // FString
		constexpr auto DefaultChatSfxEventName = 0x260; // FString
		constexpr auto DefaultChatEventName = 0x270; // FString
		constexpr auto DefaultChatSwitchName = 0x280; // FString
		constexpr auto DefaultChatSwitchValue = 0x290; // FString
	}

	namespace n_UTaleQuestWeightedItemDescSpawnDataAsset { // : UDataAsset
		constexpr auto WeightedItemSpawnDatas = 0x28; // TArray<FTaleQuestWeightedItemDescSpawnData>
		constexpr auto QuestObjectSpawnData = 0x38; // UItemSpawnData*
	}

	namespace n_UEnvQueryTest_FacingAwayFromActor { // : UEnvQueryTest
		constexpr auto CentreContext = 0x170; // UEnvQueryContext*
		constexpr auto ActorContext = 0x178; // UEnvQueryContext*
		constexpr auto ConeType = 0x180; // EConeWeightingMethod
		constexpr auto ConeThreshold = 0x188; // FAIDataProviderFloatValue
		constexpr auto DistanceFromQuerierToValidBandOfPoints = 0x1b8; // FAIDataProviderFloatValue
		constexpr auto UseOriginAsThreat = 0x1e8; // bool
		constexpr auto AngleBias = 0x1f0; // FAIDataProviderFloatValue
	}

	namespace n_AHideoutEntrance { // : AActor
		constexpr auto TriggerZoneComponent = 0x3d0; // UBoxComponent*
		constexpr auto HideoutExitSpawnPoints = 0x3d8; // TArray<ASpawnLocation*>
	}

	namespace n_UAggressiveGhostShipShotSelectionDataAsset { // : UDataAsset
		constexpr auto ShotSelection = 0x28; // TArray<FAggressiveGhostShipShotSelection>
	}

	namespace n_APickupableObject { // : AInteractableBase
		constexpr auto StartPickupObjectActionRuleParams = 0x408; // FStartPickupObjectActionRuleParams
		constexpr auto PickupTime = 0x418; // float
	}

	namespace n_UTaleQuestAddTradeRouteMapStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ATripwireMechanismTrigger { // : AActor
		constexpr auto MechanismTriggerComponent = 0x3d0; // UMechanismTriggerComponent*
		constexpr auto BoxCollisionThatTriggersWireSnap = 0x3d8; // UBoxComponent*
		constexpr auto WireStaticMesh = 0x3e0; // UStaticMeshComponent*
	}

	namespace n_UGameUserSettings { // : UObject
		constexpr auto bUseVSync = 0x28; // bool
		constexpr auto ResolutionSizeX = 0x48; // uint32_t
		constexpr auto ResolutionSizeY = 0x4c; // uint32_t
		constexpr auto LastUserConfirmedResolutionSizeX = 0x50; // uint32_t
		constexpr auto LastUserConfirmedResolutionSizeY = 0x54; // uint32_t
		constexpr auto WindowPosX = 0x58; // int32_t
		constexpr auto WindowPosY = 0x5c; // int32_t
		constexpr auto bUseDesktopResolutionForFullscreen = 0x60; // bool
		constexpr auto FullscreenMode = 0x64; // int32_t
		constexpr auto LastConfirmedFullscreenMode = 0x68; // int32_t
		constexpr auto Version = 0x6c; // uint32_t
		constexpr auto AudioQualityLevel = 0x70; // int32_t
	}

	namespace n_AEnsemble { // : AActor
		constexpr auto ShantyDesc = 0x400; // UShantyItemDesc*
		constexpr auto Instruments = 0x408; // TArray<AActor*>
		constexpr auto OldInstruments = 0x418; // TArray<FInstrumentHandlePairedWithActor>
		constexpr auto NewInstruments = 0x428; // TArray<FInstrumentHandlePairedWithActor>
		constexpr auto OverrideLeadPosition = 0x438; // FVector
		constexpr auto UseOverrideLeadPosition = 0x444; // bool
		constexpr auto ShantyData = 0x460; // FShantyData
	}

	namespace n_UDebugStoryStateSettings { // : UDeveloperSettings
		constexpr auto DebugStoryStateAssetLocation = 0x38; // FStringAssetReference
	}

	namespace n_UAIItemSpawnComponent { // : UItemSpawnComponent
		constexpr auto SpawnDelayAfterDeath = 0x428; // float
		constexpr auto PercentageChanceToDrop = 0x42c; // float
		constexpr auto RewardMarkerFeatureToggle = 0x430; // FName
		constexpr auto DeathItemSpawnDistributionOverrides = 0x438; // TArray<FCauseOfDeathItemSpawnDistribution>
		constexpr auto RewardMarkerDataAsset = 0x448; // UShortRangeMarkerDataAsset*
	}

	namespace n_UBTService_OverrideTurnSpeed { // : UBTService
		constexpr auto TurnSpeed = 0x70; // FAIDataProviderFloatValue
	}

	namespace n_ANetworkClusterEventRoom { // : AEventRoom
		constexpr auto ClearSpawnProgressOnRoomActivate = 0x3d8; // bool
		constexpr auto EntranceMechanisms = 0x3e0; // TArray<AActor*>
		constexpr auto ExitMechanisms = 0x3f0; // TArray<AActor*>
		constexpr auto PlayerLeftRoomDelegate = 0x400; // FScriptMulticastDelegate
		constexpr auto PlayerEnteredRoomDelegate = 0x410; // FScriptMulticastDelegate
		constexpr auto RoomAreaComponent = 0x420; // UBoxComponent*
		constexpr auto StartedDelegate = 0x428; // FScriptMulticastDelegate
		constexpr auto FailDelegate = 0x438; // FScriptMulticastDelegate
		constexpr auto CompletedDelegate = 0x448; // FScriptMulticastDelegate
		constexpr auto AftermathStartedDelegate = 0x458; // FScriptMulticastDelegate
	}

	namespace n_ATornMap { // : ARenderToTextureMapBase
		constexpr auto AltMapMarkTextureAsset = 0x848; // FStringAssetReference
		constexpr auto AltMapMarkTexture = 0x858; // UTexture*
		constexpr auto BlendSpeed = 0x860; // float
		constexpr auto MaskRefs = 0x868; // TArray<FStringAssetReference>
		constexpr auto TargetVisibility = 0x878; // TArray<FVector>
		constexpr auto MaskRotation = 0x8ac; // float
		constexpr auto NumPieces = 0x8b0; // int32_t
		constexpr auto MaskTextures = 0x8b8; // TArray<UTexture*>
	}

	namespace n_UVisualHealthResponseComponent { // : UActorComponent
		constexpr auto ActiveVfx = 0xc8; // UParticleSystemComponent*
		constexpr auto VisualHealthResponseData = 0xd0; // UVisualHealthResponseDataAsset*
		constexpr auto HealthResponseMaterials = 0xd8; // TArray<UMaterialInstanceDynamic*>
		constexpr auto OnMeshChangeDelegate = 0x170; // FScriptMulticastDelegate
		constexpr auto WaitForAllMeshChange = 0x180; // bool
		constexpr auto OnGateChangeDelegate = 0x188; // FScriptMulticastDelegate
	}

	namespace n_UTetherCustomisationComponent { // : UActorComponent
		constexpr auto ComponentToTetherTo = 0xd0; // USceneComponent*
		constexpr auto MassIntertiaScale = 0x120; // float
		constexpr auto CanBeTethered = 0x124; // bool
		constexpr auto IsMassInertiaScalingEnabled = 0x125; // bool
	}

	namespace n_UParticleModulePivotOffset { // : UParticleModuleLocationBase
		constexpr auto PivotOffset = 0x50; // FVector2D
	}

	namespace n_UClueDestinationGenerator { // : UObject
		constexpr auto RequiredClueSiteDataType = 0x28; // UClueSiteData*
		constexpr auto WeightedSupportedDescriptorTypes = 0x30; // TArray<FWeightedClueDestinationDescriptor>
	}

	namespace n_UAggressiveGhostShipLocationDataAsset { // : UDataAsset
		constexpr auto MinRadialSplineOffsetInMetres = 0x28; // float
		constexpr auto MaxRadialSplineOffsetInMetres = 0x2c; // float
		constexpr auto UseAlternativeSplinePoints = 0x30; // bool
		constexpr auto MinNumAlternativeSplinePoints = 0x34; // int32_t
		constexpr auto MaxNumAlternativeSplinePoints = 0x38; // int32_t
		constexpr auto AlternativeMinRadialSplineOffsetInMetres = 0x3c; // float
		constexpr auto AlternativeMaxRadialSplineOffsetInMetres = 0x40; // float
		constexpr auto AlternativeMinRadialBlendValue1 = 0x44; // float
		constexpr auto AlternativeMinRadialBlendValue2 = 0x48; // float
		constexpr auto MinDistanceBetweenSplinePointsInMetres = 0x4c; // float
		constexpr auto CacheDistanceInMetres = 0x50; // float
	}

	namespace n_ACompassWieldableReplica { // : APoseableMeshWieldableReplica
		constexpr auto SpinComponent = 0x518; // UCompassSpinComponent*
	}

	namespace n_UMaterialExpressionDDX { // : UMaterialExpression
		constexpr auto Value = 0x70; // FExpressionInput
	}

	namespace n_UBTDecorator_ActorWieldedItemCategory { // : UBTDecorator_BaseConditional
		constexpr auto Interval = 0x68; // float
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
		constexpr auto ItemCategoryToTest = 0x98; // UClass*
	}

	namespace n_UNarratedAccessibilityComponent { // : UActorComponent
		constexpr auto ContinuousNarrationCooldown = 0xc8; // float
		constexpr auto SettingsInterface = 0xd8; // TScriptInterface<Class>
	}

	namespace n_UBaseWorldMarker { // : UObject
		constexpr auto MarkerPosition = 0x28; // FVector_NetQuantize
		constexpr auto Variant = 0x38; // UWorldMarkerVariant*
	}

	namespace n_AMultiTargetEnchantedCompass { // : ACompass
		constexpr auto Locations = 0x870; // TArray<FVector>
		constexpr auto LocationIds = 0x880; // TArray<FGuid>
		constexpr auto InventoryItem = 0x890; // UInventoryItemComponent*
		constexpr auto ProximityAnnouncementComponent = 0x898; // UEnchantedCompassProximityAnnouncementComponent*
	}

	namespace n_AMockMerchantCrateItemProxy { // : ABaseMerchantCrateItemProxy
		constexpr auto RewindComponent = 0x7b8; // URewindComponent*
		constexpr auto MountpointInterface = 0x7c0; // TScriptInterface<Class>
		constexpr auto FullGroundImpactSfx = 0x7d0; // UWwiseEvent*
	}

	namespace n_UTaleSpireService { // : UTaleQuestService
		constexpr auto SpireMadeVisible = 0x68; // FScriptMulticastDelegate
	}

	namespace n_UGameplayTagReponseTable { // : UDataAsset
		constexpr auto Entries = 0x28; // TArray<FGameplayTagResponseTableEntry>
	}

	namespace n_UPremiumCatalogOfferDataAsset { // : UPremiumCatalogLandingPageItemDataAsset
		constexpr auto Offer = 0x108; // UCatalogOfferDataAsset*
	}

	namespace n_UParticleModuleWindInfluence { // : UParticleModuleWindBase
		constexpr auto WindSpeedCap = 0x50; // float
		constexpr auto RandomFactorForWindDirection = 0x54; // float
		constexpr auto InfluenceOnAcceleration = 0x58; // FRawDistributionFloat
		constexpr auto InfluenceOnVelocity = 0x90; // FRawDistributionFloat
	}

	namespace n_UBTTask_SetFloatToTheSurface { // : UBTTaskNode
		constexpr auto ShouldFloatToTheSurface = 0x60; // bool
	}

	namespace n_UModelComponent { // : UPrimitiveComponent
		constexpr auto ModelBodySetup = 0x5a0; // UBodySetup*
	}

	namespace n_UTaleQuestClueInventoryServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto AbandonedNoteItem = 0x28; // UClass*
		constexpr auto CircleMapItem = 0x48; // UClass*
	}

	namespace n_UBookMark { // : UObject
		constexpr auto Location = 0x28; // FVector
		constexpr auto Rotation = 0x34; // FRotator
		constexpr auto HiddenLevels = 0x40; // TArray<FString>
	}

	namespace n_UClueSiteData { // : UObject
		constexpr auto DebrisTrackingType = 0x28; // ETrackedOwnerType
	}

	namespace n_UTextureProxy { // : UTexture
		constexpr auto Texture = 0x138; // UTexture*
	}

	namespace n_UMaterialExpressionDistanceToNearestSurface { // : UMaterialExpression
		constexpr auto Position = 0x70; // FExpressionInput
	}

	namespace n_UHudSettings { // : UObject
		constexpr auto bShowHUD = 0x28; // char : 1
		constexpr auto DebugDisplay = 0x30; // TArray<FName>
	}

	namespace n_UDecalComponent { // : USceneComponent
		constexpr auto DecalMaterial = 0x2b0; // UMaterialInterface*
		constexpr auto SortOrder = 0x2b8; // int32_t
		constexpr auto FadeScreenSize = 0x2bc; // float
		constexpr auto MaterialInstanceDynamic = 0x2c0; // UMaterialInstanceDynamic*
	}

	namespace n_UInterpTrackInstVectorMaterialParam { // : UInterpTrackInst
		constexpr auto MaterialInstances = 0x28; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ResetVectors = 0x38; // TArray<FVector>
		constexpr auto PrimitiveMaterialRefs = 0x48; // TArray<FPrimitiveMaterialRef>
		constexpr auto InstancedTrack = 0x58; // UInterpTrackVectorMaterialParam*
	}

	namespace n_UFoliageType_InstancedStaticMesh { // : UFoliageType
		constexpr auto Mesh = 0x360; // UStaticMesh*
		constexpr auto OverrideMaterials = 0x368; // TArray<UMaterialInterface*>
		constexpr auto ComponentClass = 0x378; // UFoliageInstancedStaticMeshComponent*
	}

	namespace n_UReviveConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UExporter { // : UObject
		constexpr auto SupportedClass = 0x28; // UObject*
		constexpr auto ExportRootScope = 0x30; // UObject*
		constexpr auto FormatExtension = 0x38; // TArray<FString>
		constexpr auto FormatDescription = 0x48; // TArray<FString>
		constexpr auto PreferredFormatIndex = 0x58; // int32_t
		constexpr auto TextIndent = 0x5c; // int32_t
		constexpr auto bText = 0x60; // char : 1
		constexpr auto bSelectedOnly = 0x60; // char : 1
		constexpr auto bForceFileOperations = 0x60; // char : 1
	}

	namespace n_URemoveFogBankAvoidanceAreaStepDesc { // : UTaleQuestStepDesc
		constexpr auto Location = 0x80; // FQuestVariableVector
	}

	namespace n_UCinematicQuestRunnable { // : URunnable
		constexpr auto Message = 0x28; // FText
		constexpr auto Header = 0x60; // FText
		constexpr auto Tag = 0x98; // FName
		constexpr auto RunOnce = 0xa0; // bool
	}

	namespace n_AOnlineBeaconHostObject { // : AActor
		constexpr auto BeaconTypeName = 0x3d0; // FString
		constexpr auto ClientBeaconActorClass = 0x3e0; // AOnlineBeaconClient*
		constexpr auto ClientActors = 0x3e8; // TArray<AOnlineBeaconClient*>
	}

	namespace n_UAbilityTask_WaitConfirmCancel { // : UAbilityTask
		constexpr auto OnConfirm = 0x68; // FScriptMulticastDelegate
		constexpr auto OnCancel = 0x78; // FScriptMulticastDelegate
	}

	namespace n_UPremiumCatalogListDataAsset { // : UDataAsset
		constexpr auto Catalogs = 0x28; // TArray<UPremiumCatalogDataAsset*>
	}

	namespace n_UIsWieldingBootyTypeStatCondition { // : UTargetedStatCondition
		constexpr auto TargetBootyTypes = 0x30; // TArray<EBootyTypes>
	}

	namespace n_UMaterialExpressionWorldPosition { // : UMaterialExpression
		constexpr auto WorldPositionShaderOffset = 0x70; // EWorldPositionIncludedOffsets
	}

	namespace n_UWeightedAnimationLoadOnDemandDataAsset { // : UDataAsset
		constexpr auto WeightedAnimationList = 0x28; // TArray<FWeightedAnimationData>
		constexpr auto FallBackAnimation = 0x38; // UAnimSequence*
	}

	namespace n_AAlwaysRelevantLightweightPlayerNameplate { // : AAlwaysRelevantLightweightActor
		constexpr auto PlayerNameplateComponent = 0x3f8; // UAlwaysRelevantPlayerNameplateComponent*
		constexpr auto PlayerStatePtr = 0x400; // AAthenaPlayerState*
		constexpr auto OwnedActorsCrewId = 0x408; // FGuid
		constexpr auto IsOwnerInert = 0x430; // bool
	}

	namespace n_UEditableText { // : UWidget
		constexpr auto Text = 0x138; // FText
		constexpr auto TextDelegate = 0x170; // DelegateProperty
		constexpr auto HintText = 0x180; // FText
		constexpr auto HintTextDelegate = 0x1b8; // DelegateProperty
		constexpr auto WidgetStyle = 0x1c8; // FEditableTextStyle
		constexpr auto Style = 0x3f0; // USlateWidgetStyleAsset*
		constexpr auto BackgroundImageSelected = 0x3f8; // USlateBrushAsset*
		constexpr auto BackgroundImageComposing = 0x400; // USlateBrushAsset*
		constexpr auto CaretImage = 0x408; // USlateBrushAsset*
		constexpr auto Font = 0x410; // FSlateFontInfo
		constexpr auto ColorAndOpacity = 0x450; // FSlateColor
		constexpr auto IsReadOnly = 0x480; // bool
		constexpr auto IsPassword = 0x481; // bool
		constexpr auto MinimumDesiredWidth = 0x484; // float
		constexpr auto IsCaretMovedWhenGainFocus = 0x488; // bool
		constexpr auto SelectAllTextWhenFocused = 0x489; // bool
		constexpr auto RevertTextOnEscape = 0x48a; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0x48b; // bool
		constexpr auto SelectAllTextOnCommit = 0x48c; // bool
		constexpr auto OnTextChanged = 0x490; // FScriptMulticastDelegate
		constexpr auto OnTextCommitted = 0x4a0; // FScriptMulticastDelegate
	}

	namespace n_UAIPartsRetrievalComponent { // : UActorComponent
		constexpr auto PartsCategory = 0xd0; // UAIPartsCategory*
		constexpr auto ReplicatedAIPartsData = 0xd8; // FReplicatedAIPartsData
	}

	namespace n_UTaleQuestBlueprintStep { // : UTaleQuestStep
		constexpr auto Step = 0x90; // UBlueprintStepBase*
	}

	namespace n_UNPCCustomAnimationDataAsset { // : UDataAsset
		constexpr auto NPCCustomAnimationData = 0x30; // FNPCCustomAnimationDataStructure
	}

	namespace n_ACluster { // : AActor
		constexpr auto ClusterStaticMeshes = 0x3d0; // TArray<UClusterStaticMeshComponent*>
		constexpr auto AllComponents = 0x3e0; // TArray<UStaticMeshComponent*>
		constexpr auto DoesContainDecorator = 0x3f0; // bool
	}

	namespace n_UBTTask_CopyAIInteractionPointAndFocusToBlackboard { // : UBTTaskNode
		constexpr auto SourceInteractable = 0x60; // FBlackboardKeySelector
		constexpr auto InteractionPosition = 0x88; // FBlackboardKeySelector
		constexpr auto InteractionFocusPosition = 0xb0; // FBlackboardKeySelector
	}

	namespace n_UBurpComponent { // : UActorComponent
		constexpr auto MinGasToTriggerBurp = 0xc8; // float
		constexpr auto MinRandomBurpDelay = 0xcc; // float
		constexpr auto MaxRandomBurpDelay = 0xd0; // float
		constexpr auto GasDecayPerSecond = 0xd4; // float
		constexpr auto BurpComponentPool = 0xd8; // UWwiseObjectPoolWrapper*
		constexpr auto BurpSfx = 0xe0; // UWwiseEvent*
		constexpr auto PlayerSizeRTPCName = 0xe8; // FName
		constexpr auto BurpLengthRTPCName = 0xf0; // FName
	}

	namespace n_UWieldablePetAnimNotifyWwiseEmitterComponent { // : UAnimNotifyWwiseEmitterComponent
		constexpr auto Emitter = 0x2b8; // FWwiseEmitter
		constexpr auto WwiseObjectPoolWrapper = 0x2d8; // UWwiseObjectPoolWrapper*
	}

	namespace n_UInterpTrackInstSound { // : UInterpTrackInst
		constexpr auto LastUpdatePosition = 0x28; // float
		constexpr auto PlayAudioComp = 0x30; // UAudioComponent*
	}

	namespace n_UParticleModuleEmitterPointVelocity { // : UParticleModuleVelocityBase
		constexpr auto VelocityScale = 0x58; // FRawDistributionFloat
	}

	namespace n_UNPCDialogOptionFireTutorialDialogOptionSelectedEvent { // : UNPCDialogOption
		constexpr auto TutorialDialogOption = 0x80; // ETutorialDialogOption
		constexpr auto Text = 0x88; // FText
		constexpr auto CloseOnExectuted = 0xc0; // bool
		constexpr auto LinkedDialog = 0xc4; // int32_t
		constexpr auto RelevantOnServer = 0xc8; // bool
	}

	namespace n_AAggressiveGhostShipPoolResource { // : AActor
		constexpr auto DestroyDelay = 0x3d0; // float
		constexpr auto PortalPoolSize = 0x3d4; // int32_t
		constexpr auto PortalClass = 0x3d8; // AAggressiveGhostShipPortal*
	}

	namespace n_UConstellationAudioEventsDataAsset { // : UDataAsset
		constexpr auto ConstellationAudioEventsMap = 0x28; // TArray<FConstellationAudioPair>
	}

	namespace n_UShapeComponent { // : UPrimitiveComponent
		constexpr auto ShapeColor = 0x588; // FColor
		constexpr auto ShapeBodySetup = 0x590; // UBodySetup*
		constexpr auto bDrawOnlyIfSelected = 0x598; // char : 1
		constexpr auto bShouldCollideWhenPlacing = 0x598; // char : 1
		constexpr auto bDynamicObstacle = 0x598; // char : 1
		constexpr auto AreaClass = 0x5a0; // UNavArea*
	}

	namespace n_UGhostDataAsset { // : UDataAsset
		constexpr auto RevivedAnimationStateId = 0x28; // UAnimationStateId*
		constexpr auto InitialSpawnTime = 0x30; // float
		constexpr auto HeightOffsetFromCeilingCollision = 0x34; // float
		constexpr auto PlayModeParameters = 0x38; // TArray<FGhostPlayModeParameters>
		constexpr auto GhostCollisionChannel = 0x48; // ECollisionChannel
		constexpr auto GhostShader_Start_InitialAmount = 0x4c; // float
		constexpr auto GhostShader_Start_TargetAmount = 0x50; // float
		constexpr auto GhostShader_Start_Delay = 0x54; // float
		constexpr auto GhostShader_Start_Duration = 0x58; // float
		constexpr auto GhostShader_End_InitialAmount = 0x5c; // float
		constexpr auto GhostShader_End_TargetAmount = 0x60; // float
		constexpr auto GhostShader_End_Delay = 0x64; // float
		constexpr auto GhostShader_End_Duration = 0x68; // float
	}

	namespace n_UAbandonedNoteClueTextIndexAsset { // : UAbandonedNoteClueTextIndexAssetBase
		constexpr auto ClueDestinationDescriptions = 0x28; // TArray<UAbandonedNoteClueTextAsset*>
	}

	namespace n_UMaterialExpressionCosine { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto Period = 0xa8; // float
	}

	namespace n_ULoadingPointComponent { // : UActorComponent
		constexpr auto CanLoadItemCategories = 0xd0; // TArray<FCanLoadItemCategoryEntry>
		constexpr auto CanUnloadItemCategories = 0xe0; // TArray<FCanLoadItemCategoryEntry>
	}

	namespace n_ATunnelOfTheDamnedLocator { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UTaleWaitForSpireToLoadStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTTask_BlueprintBase { // : UBTTaskNode
		constexpr auto AIOwner = 0x60; // AAIController*
		constexpr auto ActorOwner = 0x68; // AActor*
		constexpr auto bShowPropertyDetails = 0x88; // char : 1
	}

	namespace n_UTaleQuestParallelStep { // : UTaleQuestStep
		constexpr auto Steps = 0x98; // TArray<UTaleQuestStep*>
		constexpr auto Desc = 0xa8; // UTaleQuestParallelStepDesc*
	}

	namespace n_UEnvQueryTest_PathfindingBatch { // : UEnvQueryTest_Pathfinding
		constexpr auto ScanRangeMultiplier = 0x248; // FAIDataProviderFloatValue
	}

	namespace n_UProjectileServiceDataAsset { // : UDataAsset
		constexpr auto MaxTrails = 0x28; // char
		constexpr auto DefaultTrailDistance = 0x2c; // float
		constexpr auto DefaultTrailFalloff = 0x30; // float
		constexpr auto TrailsMesh = 0x38; // UStaticMesh*
		constexpr auto Material = 0x40; // UMaterialInterface*
	}

	namespace n_UBootyStorageSettingsAsset { // : UDataAsset
		constexpr auto SpawnBootyCheatEQSQuery = 0x28; // UEnvQuery*
		constexpr auto RetrievalActor = 0x30; // AActor*
		constexpr auto SpawnRetrievalActorEQSQuery = 0x38; // UEnvQuery*
	}

	namespace n_UVolcanoSetupDataAsset { // : UDataAsset
		constexpr auto WarmUpDuration = 0x28; // FWeightedProbabilityRangeOfRanges
		constexpr auto EruptionDuration = 0x58; // FWeightedProbabilityRangeOfRanges
		constexpr auto DormantDuration = 0x88; // FWeightedProbabilityRangeOfRanges
		constexpr auto MinimumDurationForTheEffects = 0xb8; // float
		constexpr auto GroundAndWaterStayHotDurationAfterVolcanoFinishesDuration = 0xc0; // FWeightedProbabilityRangeOfRanges
		constexpr auto ProjectileTriggerFrequency = 0xf0; // FWeightedProbabilityRangeOfRanges
		constexpr auto PercentageOfMaxTargetingRange = 0x120; // FWeightedProbabilityRangeOfRanges
		constexpr auto MinNumProjectilesToTrigger = 0x150; // int32_t
		constexpr auto MaxNumProjectilesToTrigger = 0x154; // int32_t
		constexpr auto ExtraProjectilePoolNumProjectiles = 0x158; // int32_t
		constexpr auto ChanceToTargetPlayers = 0x160; // FVolcanoTargetChances
		constexpr auto ChanceToTargetShips = 0x1b8; // FVolcanoTargetChances
		constexpr auto ChanceToTargetWatercraft = 0x210; // FVolcanoTargetChances
		constexpr auto PlayerNearMissDistanceInMetres = 0x268; // FWeightedProbabilityRangeOfRanges
		constexpr auto InnerShipNearMissRadiusInMetres = 0x298; // float
		constexpr auto OuterShipNearMissRadiusInMetres = 0x29c; // float
		constexpr auto InnerWatercraftNearMissRadiusInMetres = 0x2a0; // float
		constexpr auto OuterWatercraftNearMissRadiusInMetres = 0x2a4; // float
		constexpr auto Projectiles = 0x2a8; // TArray<FWeightedVolcanoProjectile>
		constexpr auto ForceFeedbackIgnitionEffect = 0x2b8; // TArray<FLandmarkReactionEventPlayForceFeedbackEntry>
		constexpr auto LocalMiniProjectilesClass = 0x2c8; // AActor*
		constexpr auto LocalMiniProjectilesSpawnHeightAbovePlayerInMetres = 0x2d0; // FWeightedProbabilityRangeOfRanges
		constexpr auto LocalMiniProjectilesSpawnDistanceFromPlayerInMetres = 0x300; // FWeightedProbabilityRangeOfRanges
		constexpr auto LocalMiniProjectilesTimeBetweenSpawns = 0x330; // FWeightedProbabilityRangeOfRanges
		constexpr auto NumLocalMiniProjectilesToTrigger = 0x360; // FWeightedProbabilityRange
		constexpr auto LocalMiniProjectilesSpeed = 0x380; // FWeightedProbabilityRangeOfRanges
		constexpr auto LocalMiniProjectilesGravityScale = 0x3b0; // float
		constexpr auto LocalMiniProjectilesSpawnAngleRange = 0x3b8; // FWeightedProbabilityRangeOfRanges
		constexpr auto LocalMiniProjectilesSpawnStartPositionOffsetInMetres = 0x3e8; // FWeightedProbabilityRangeOfRanges
		constexpr auto LocalMiniProjectilesSpawnDistanceSpeedScalar = 0x418; // float
		constexpr auto LocalMiniProjectilesSpawnDistanceMaxPlayerSpeed = 0x41c; // float
		constexpr auto TimeBetweenLocalEmbers = 0x420; // float
		constexpr auto LocalEmbers = 0x428; // TArray<FVolcanoSetupDataEmbersEntry>
		constexpr auto EmbersSpawnOffsetInMetres = 0x438; // float
		constexpr auto ServerMigrationDistanceAsMultipleOfOuterTargetRadius = 0x43c; // float
	}

	namespace n_UBTService_UpdateIfShipShouldBreakTracking { // : UBTService
		constexpr auto TargetActorKey = 0x70; // FBlackboardKeySelector
		constexpr auto DisableTrackingKey = 0x98; // FBlackboardKeySelector
		constexpr auto ShouldSailForwardKey = 0xc0; // FBlackboardKeySelector
		constexpr auto TimeToSailForwardKey = 0xe8; // FBlackboardKeySelector
		constexpr auto CaptainIsPresentKey = 0x110; // FBlackboardKeySelector
	}

	namespace n_UFFTWaterSettings { // : UObject
		constexpr auto FFTWaterMaterialName = 0x28; // FStringAssetReference
		constexpr auto FFTWaterFoamTextureName = 0x38; // FStringAssetReference
		constexpr auto BaseMeshDetail = 0x48; // int32_t
	}

	namespace n_USimpleConstructionScript { // : UObject
		constexpr auto RootNodes = 0x28; // TArray<USCS_Node*>
		constexpr auto DefaultSceneRootNode = 0x38; // USCS_Node*
	}

	namespace n_UInventoryManipulatorComponent { // : UActorComponent
		constexpr auto StashItemTimeout = 0xd0; // float
		constexpr auto SlowStashItemTimeout = 0xd4; // float
		constexpr auto WieldItemTimeout = 0xd8; // float
		constexpr auto PickupSfx = 0xe0; // UWwiseEvent*
		constexpr auto AutoEquipPolicies = 0xe8; // TArray<FInventoryManipulatorAutoEquipPolicyEntry>
		constexpr auto ItemWieldingParamsLookup = 0xf8; // UDataTable*
		constexpr auto InventoryMemory = 0x100; // FInventoryMemory
		constexpr auto WieldableItemSetInterface = 0x150; // TScriptInterface<Class>
		constexpr auto WieldedItemInterface = 0x160; // TScriptInterface<Class>
		constexpr auto CachedWieldParamsAsset = 0x320; // UWieldingParamsAsset*
	}

	namespace n_UPlayerStatsComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AEnchantedCompass { // : ACompass
		constexpr auto TargetReplacedForceFeedback = 0x870; // UForceFeedbackEffect*
		constexpr auto TargetReplacedSFX = 0x878; // UWwiseEvent*
		constexpr auto InventoryItem = 0x880; // UInventoryItemComponent*
		constexpr auto Target = 0x88c; // FEnchantedCompassTarget
		constexpr auto ProximityAnnouncementComponent = 0x938; // UEnchantedCompassProximityAnnouncementComponent*
	}

	namespace n_UTimeOfDayDataAsset { // : UDataAsset
		constexpr auto SunriseStartHour = 0x28; // float
		constexpr auto MorningStartHour = 0x2c; // float
		constexpr auto MidDayStartHour = 0x30; // float
		constexpr auto AfternoonStartHour = 0x34; // float
		constexpr auto SunsetStartHour = 0x38; // float
		constexpr auto NightStartHour = 0x3c; // float
	}

	namespace n_UMaterialExpressionParticleSubUV { // : UMaterialExpressionTextureSample
		constexpr auto bBlend = 0x1a8; // char : 1
		constexpr auto bMipBiasOnLowResolution = 0x1a8; // char : 1
	}

	namespace n_UDrowningComponent { // : UActorComponent
		constexpr auto Params = 0xc8; // UDrowningComponentParams*
		constexpr auto DrowningParams = 0xd0; // FBlendableDrowningParams
		constexpr auto BubbleVFXComponent = 0xf8; // UParticleSystemComponent*
		constexpr auto ExtraBubblesFirstPersonVFXComponent = 0x100; // UParticleSystemComponent*
		constexpr auto OxygenLevel = 0x108; // float
		constexpr auto ServerDrowningState = 0x160; // DrowningState
		constexpr auto OwnerCharacter = 0x168; // AActor*
		constexpr auto OwnerHealthComponent = 0x170; // UHealthComponent*
		constexpr auto IsDrowningDisabled = 0x188; // bool
	}

	namespace n_UItemLoaderComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UPawnAction_BlueprintBase { // : UPawnAction
		constexpr auto ChildAction = 0x28; // UPawnAction*
		constexpr auto ParentAction = 0x30; // UPawnAction*
		constexpr auto OwnerComponent = 0x38; // UPawnActionsComponent*
		constexpr auto Instigator = 0x40; // UObject*
		constexpr auto BrainComp = 0x48; // UBrainComponent*
		constexpr auto bAllowNewSameClassInstance = 0x78; // char : 1
		constexpr auto bReplaceActiveSameClassInstance = 0x78; // char : 1
		constexpr auto bShouldPauseMovement = 0x78; // char : 1
	}

	namespace n_UAbilityTask_WaitGameplayTagRemoved { // : UAbilityTask_WaitGameplayTag
		constexpr auto Removed = 0x88; // FScriptMulticastDelegate
	}

	namespace n_ULayerInContainerComponent { // : UStaticMeshComponent
		constexpr auto FadeRate = 0x5f8; // float
		constexpr auto CanTake = 0x5fc; // bool
		constexpr auto LayerBlockingTakingThisLayer = 0x600; // ULayerInContainerComponent*
		constexpr auto DynamicMaterials = 0x608; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UAnimDataEntryStruct { // : UUserDefinedStruct
		constexpr auto Guid = 0x98; // FGuid
	}

	namespace n_UMechanismVFXEmitterComponent { // : UArrowComponent
		constexpr auto ArrowColor = 0x588; // FColor
		constexpr auto ArrowSize = 0x58c; // float
		constexpr auto bIsScreenSizeScaled = 0x590; // bool
		constexpr auto ScreenSize = 0x594; // float
		constexpr auto bTreatAsASprite = 0x598; // char : 1
	}

	namespace n_UParticleSystemReplay { // : UObject
		constexpr auto ClipIDNumber = 0x28; // int32_t
	}

	namespace n_UItemPreviewComponent { // : UCoherentUIGTRenderToTextureLiveView
		constexpr auto RequestedItemDesc = 0x100; // TWeakObjectPtr<UEntitlementDesc>
		constexpr auto FallbackPreviewIconAsset = 0x108; // FStringAssetReference
		constexpr auto RequiredPreviewObjectClass = 0x118; // UObject*
		constexpr auto DefaultCamera = 0x120; // FName
		constexpr auto ClassToSpawn = 0x128; // AItemPreviewActor*
		constexpr auto DefaultResolution = 0x130; // FIntPoint
		constexpr auto Details = 0x138; // URenderToTextureSceneDetails*
		constexpr auto RequestedAssetReference = 0x140; // FStringAssetReference
		constexpr auto ActiveAssetReference = 0x150; // FStringAssetReference
		constexpr auto InteractionActor = 0x160; // AActor*
		constexpr auto DataLoadObject = 0x168; // TWeakObjectPtr<UItemPreviewDataObject>
		constexpr auto CurrentView = 0x1d0; // FItemPreviewView
		constexpr auto CategoryReplacementMap = 0x288; // TArray<FCategoryPreviewEntry>
	}

	namespace n_AWaterPuzzleAlterationMechanismAction { // : AToggleAnimatedMechanismAction
		constexpr auto ShouldDrain = 0x570; // bool
		constexpr auto PuzzleActor = 0x578; // AActor*
		constexpr auto WaterReactionDelay = 0x580; // float
		constexpr auto WaterLevelCapacity = 0x584; // int32_t
		constexpr auto MinimumMouthOpenDuration = 0x588; // float
		constexpr auto AlterationMechanismAudioParams = 0x598; // UWaterPuzzleAlterationMechanismAudioParams*
		constexpr auto MouthSFXPosition = 0x5a0; // USceneComponent*
		constexpr auto MouthSFXEmitter = 0x5a8; // FWwiseEmitter
		constexpr auto SplashSFXEmitter = 0x5c8; // FWwiseEmitter
		constexpr auto WaterSpoutComponent = 0x5e8; // UWaterSpoutVFXComponent*
		constexpr auto GlowComponent = 0x5f0; // UStoneFaceGlowComponent*
	}

	namespace n_UDigUpPlayerBuriedItemStatsTriggerType { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_AAIDioramaService { // : AActor
		constexpr auto AllDioramasLocationsByCategory = 0x3d8; // TMap<UObject*, FDioramaCategoryEntries>
	}

	namespace n_UFlatWaterPlaneComponent { // : UBaseWaterComponent
		constexpr auto WaterId = 0x588; // UWaterId*
		constexpr auto ActiveInExclusionZone = 0x590; // bool
	}

	namespace n_UItemFirstDroppedByMeOnOtherShipConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UStandardHullDragDynamicsDesc { // : UBaseHullDragDynamicsDesc
		constexpr auto WaterDragScalarIfAllSailsUp = 0x28; // UCurveFloat*
		constexpr auto WaterDragScalarIfInReef = 0x30; // UCurveFloat*
		constexpr auto Parameters = 0x38; // FStandardHullDragDynamicsParameters
	}

	namespace n_UMaterialExpressionConstantBiasScale { // : UMaterialExpression
		constexpr auto Input = 0x70; // FExpressionInput
		constexpr auto Bias = 0xa8; // float
		constexpr auto Scale = 0xac; // float
	}

	namespace n_UFragileComponentDataAsset { // : UDataAsset
		constexpr auto DefaultDamageScalar = 0x28; // float
		constexpr auto DropDistanceToDamageCurve = 0x30; // UCurveFloat*
		constexpr auto FallSpeedToDamageCurve = 0x38; // UCurveFloat*
		constexpr auto DamageSound = 0x40; // UWwiseEvent*
		constexpr auto ObjectDamageRTPCName = 0x48; // FName
		constexpr auto DamageVfx = 0x50; // UObject*
		constexpr auto DamageVfxSocketName = 0x58; // FName
		constexpr auto SignificantHealthChangeAbsolute = 0x60; // float
		constexpr auto ShipDamageTypeMappings = 0x68; // TMap<UDamagerType*, float>
		constexpr auto ShipDamageTypeValues = 0x158; // TArray<FFragileComponentShipDamageTypeEntry>
		constexpr auto DamageTypeScalars = 0x168; // TArray<FFragileComponentHealthScalarEntry>
		constexpr auto BlockedHealthChangedReasons = 0x178; // TArray<EHealthChangedReason>
	}

	namespace n_UTaleQuestStructStepDescBase { // : UTaleQuestStepDesc
		constexpr auto Struct = 0x80; // UScriptStruct*
		constexpr auto PropertyMappings = 0x88; // TMap<FName, FName>
	}

	namespace n_UTeleportLungeAIAbility { // : UAthenaAIAbility
		constexpr auto AbilityParams = 0x28; // UAthenaAIAbilityParams*
		constexpr auto Pawn = 0x30; // APawn*
		constexpr auto Controller = 0x38; // AAthenaAIController*
		constexpr auto AIPawnInterface = 0x40; // TScriptInterface<Class>
		constexpr auto CurrentAbilityStageParams = 0x50; // UAthenaAIAbilityStageParams*
	}

	namespace n_UAudioSettings { // : UDeveloperSettings
		constexpr auto DefaultSoundClassName = 0x38; // FStringAssetReference
		constexpr auto DefaultBaseSoundMix = 0x48; // FStringAssetReference
		constexpr auto VoiPSoundClass = 0x58; // FStringAssetReference
		constexpr auto LowPassFilterResonance = 0x68; // float
		constexpr auto MaximumConcurrentStreams = 0x6c; // int32_t
		constexpr auto QualityLevels = 0x70; // TArray<FAudioQualitySettings>
	}

	namespace n_UActionStateMachineComponent { // : UActorComponent
		constexpr auto OnActionChangedOnTrack = 0xe0; // FScriptMulticastDelegate
	}

	namespace n_UCoherentToWwiseEventDataAsset { // : UDataAsset
		constexpr auto CoherentToWwiseEventEntries = 0x28; // TArray<FCoherentToWwiseEventDataAssetEntry>
	}

	namespace n_UAnimNotify_RumbleController { // : UAnimNotify
		constexpr auto ForceFeedbackEffect = 0x38; // UForceFeedbackEffect*
		constexpr auto ForceFeedbackTag = 0x40; // FName
		constexpr auto ForceFeedbackCondition = 0x48; // UForceFeedbackCondition*
	}

	namespace n_UParticleModuleRotationRate_Seeded { // : UParticleModuleRotationRate
		constexpr auto RandomSeedInfo = 0x1a8; // FParticleRandomSeedInfo
	}

	namespace n_UTextureFeedbackComponent { // : UActorComponent
		constexpr auto InputTexture1 = 0xc8; // UTexture*
		constexpr auto InputTexture2 = 0xd0; // UTexture2D*
		constexpr auto TextureSizeX = 0xd8; // int32_t
		constexpr auto TextureSizeY = 0xdc; // int32_t
		constexpr auto InputData = 0xe0; // FVector4
		constexpr auto FeedbackTexture = 0x138; // UTextureRenderTarget2D*
		constexpr auto FeedbackTexturePingPong = 0x140; // UTextureRenderTarget2D*
	}

	namespace n_UBTTask_RotateToFaceBBEntry { // : UBTTask_BlackboardBase
		constexpr auto Precision = 0x88; // float
	}

	namespace n_UEngine { // : UObject
		constexpr auto TinyFont = 0x30; // UFont*
		constexpr auto TinyFontName = 0x38; // FStringAssetReference
		constexpr auto SmallFont = 0x48; // UFont*
		constexpr auto SmallFontName = 0x50; // FStringAssetReference
		constexpr auto MediumFont = 0x60; // UFont*
		constexpr auto MediumFontName = 0x68; // FStringAssetReference
		constexpr auto LargeFont = 0x78; // UFont*
		constexpr auto LargeFontName = 0x80; // FStringAssetReference
		constexpr auto MonoFont = 0x90; // UFont*
		constexpr auto MonoFontName = 0x98; // FStringAssetReference
		constexpr auto SubtitleFont = 0xa8; // UFont*
		constexpr auto SubtitleFontName = 0xb0; // FStringAssetReference
		constexpr auto HugeFont = 0xc0; // UFont*
		constexpr auto HugeFontName = 0xc8; // FStringAssetReference
		constexpr auto AdditionalFonts = 0xd8; // TArray<UFont*>
		constexpr auto AdditionalFontNames = 0xf0; // TArray<FString>
		constexpr auto ConsoleClass = 0x100; // UConsole*
		constexpr auto ConsoleClassName = 0x108; // FStringClassReference
		constexpr auto GameViewportClientClass = 0x118; // UGameViewportClient*
		constexpr auto GameViewportClientClassName = 0x120; // FStringClassReference
		constexpr auto LocalPlayerClass = 0x130; // ULocalPlayer*
		constexpr auto LocalPlayerClassName = 0x138; // FStringClassReference
		constexpr auto WorldSettingsClass = 0x148; // AWorldSettings*
		constexpr auto WorldSettingsClassName = 0x150; // FStringClassReference
		constexpr auto NavigationSystemClassName = 0x160; // FStringClassReference
		constexpr auto NavigationSystemClass = 0x170; // UNavigationSystem*
		constexpr auto AvoidanceManagerClassName = 0x178; // FStringClassReference
		constexpr auto AvoidanceManagerClass = 0x188; // UAvoidanceManager*
		constexpr auto PhysicsCollisionHandlerClass = 0x190; // UPhysicsCollisionHandler*
		constexpr auto PhysicsCollisionHandlerClassName = 0x198; // FStringClassReference
		constexpr auto GameUserSettingsClassName = 0x1a8; // FStringClassReference
		constexpr auto GameUserSettingsClass = 0x1b8; // UGameUserSettings*
		constexpr auto AIControllerClassName = 0x1c0; // FStringClassReference
		constexpr auto GameUserSettings = 0x1d0; // UGameUserSettings*
		constexpr auto LevelScriptActorClass = 0x1d8; // ALevelScriptActor*
		constexpr auto LevelScriptActorClassName = 0x1e0; // FStringClassReference
		constexpr auto DefaultBlueprintBaseClassName = 0x1f0; // FStringClassReference
		constexpr auto GameSingletonClassName = 0x200; // FStringClassReference
		constexpr auto GameSingleton = 0x210; // UObject*
		constexpr auto DefaultPreviewPawnClass = 0x218; // APawn*
		constexpr auto DefaultPreviewPawnClassName = 0x220; // FStringClassReference
		constexpr auto PlayOnConsoleSaveDir = 0x230; // FString
		constexpr auto DefaultTexture = 0x240; // UTexture2D*
		constexpr auto DefaultTextureName = 0x248; // FStringAssetReference
		constexpr auto DefaultDiffuseTexture = 0x258; // UTexture*
		constexpr auto DefaultDiffuseTextureName = 0x260; // FStringAssetReference
		constexpr auto DefaultBSPVertexTexture = 0x270; // UTexture2D*
		constexpr auto DefaultBSPVertexTextureName = 0x278; // FStringAssetReference
		constexpr auto HighFrequencyNoiseTexture = 0x288; // UTexture2D*
		constexpr auto HighFrequencyNoiseTextureName = 0x290; // FStringAssetReference
		constexpr auto DefaultBokehTexture = 0x2a0; // UTexture2D*
		constexpr auto DefaultBokehTextureName = 0x2a8; // FStringAssetReference
		constexpr auto HDRCalibrationTexture = 0x2b8; // UTexture2D*
		constexpr auto HDRCalibrationTextureName = 0x2c0; // FStringAssetReference
		constexpr auto WireframeMaterial = 0x2d0; // UMaterial*
		constexpr auto WireframeMaterialName = 0x2d8; // FString
		constexpr auto DebugMeshMaterial = 0x2e8; // UMaterial*
		constexpr auto DebugMeshMaterialName = 0x2f0; // FStringAssetReference
		constexpr auto LevelColorationLitMaterial = 0x300; // UMaterial*
		constexpr auto LevelColorationLitMaterialName = 0x308; // FString
		constexpr auto LevelColorationUnlitMaterial = 0x318; // UMaterial*
		constexpr auto LevelColorationUnlitMaterialName = 0x320; // FString
		constexpr auto TriangleDensityScreenSpaceMaterial = 0x330; // UMaterial*
		constexpr auto TriangleDensityScreenSpaceMaterialName = 0x338; // FString
		constexpr auto TriangleDensityWorldSpaceMaterial = 0x348; // UMaterial*
		constexpr auto TriangleDensityWorldSpaceMaterialName = 0x350; // FString
		constexpr auto LightingTexelDensityMaterial = 0x360; // UMaterial*
		constexpr auto LightingTexelDensityName = 0x368; // FString
		constexpr auto ShadedLevelColorationLitMaterial = 0x378; // UMaterial*
		constexpr auto ShadedLevelColorationLitMaterialName = 0x380; // FString
		constexpr auto ShadedLevelColorationUnlitMaterial = 0x390; // UMaterial*
		constexpr auto ShadedLevelColorationUnlitMaterialName = 0x398; // FString
		constexpr auto RemoveSurfaceMaterial = 0x3a8; // UMaterial*
		constexpr auto RemoveSurfaceMaterialName = 0x3b0; // FStringAssetReference
		constexpr auto VertexColorMaterial = 0x3c0; // UMaterial*
		constexpr auto VertexColorMaterialName = 0x3c8; // FString
		constexpr auto VertexColorViewModeMaterial_ColorOnly = 0x3d8; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_ColorOnly = 0x3e0; // FString
		constexpr auto VertexColorViewModeMaterial_AlphaAsColor = 0x3f0; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_AlphaAsColor = 0x3f8; // FString
		constexpr auto VertexColorViewModeMaterial_RedOnly = 0x408; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_RedOnly = 0x410; // FString
		constexpr auto VertexColorViewModeMaterial_GreenOnly = 0x420; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_GreenOnly = 0x428; // FString
		constexpr auto VertexColorViewModeMaterial_BlueOnly = 0x438; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_BlueOnly = 0x440; // FString
		constexpr auto ConstraintLimitMaterial = 0x450; // UMaterial*
		constexpr auto ConstraintLimitMaterialX = 0x458; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialY = 0x460; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialZ = 0x468; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialName = 0x470; // FStringAssetReference
		constexpr auto InvalidLightmapSettingsMaterial = 0x480; // UMaterial*
		constexpr auto InvalidLightmapSettingsMaterialName = 0x488; // FStringAssetReference
		constexpr auto PreviewShadowsIndicatorMaterial = 0x498; // UMaterial*
		constexpr auto PreviewShadowsIndicatorMaterialName = 0x4a0; // FStringAssetReference
		constexpr auto ArrowMaterial = 0x4b0; // UMaterial*
		constexpr auto ArrowMaterialName = 0x4b8; // FStringAssetReference
		constexpr auto LightingOnlyBrightness = 0x4c8; // FLinearColor
		constexpr auto LightComplexityColors = 0x4d8; // TArray<FColor>
		constexpr auto ShaderComplexityColors = 0x4e8; // TArray<FLinearColor>
		constexpr auto StationaryLightOverlapColors = 0x4f8; // TArray<FLinearColor>
		constexpr auto LODColorationColors = 0x508; // TArray<FLinearColor>
		constexpr auto MaxPixelShaderAdditiveComplexityCount = 0x518; // float
		constexpr auto MaxES2PixelShaderAdditiveComplexityCount = 0x51c; // float
		constexpr auto MinLightMapDensity = 0x520; // float
		constexpr auto IdealLightMapDensity = 0x524; // float
		constexpr auto MaxLightMapDensity = 0x528; // float
		constexpr auto bRenderLightMapDensityGrayscale = 0x52c; // char : 1
		constexpr auto RenderLightMapDensityGrayscaleScale = 0x530; // float
		constexpr auto RenderLightMapDensityColorScale = 0x534; // float
		constexpr auto LightMapDensityVertexMappedColor = 0x538; // FLinearColor
		constexpr auto LightMapDensitySelectedColor = 0x548; // FLinearColor
		constexpr auto StatColorMappings = 0x558; // TArray<FStatColorMapping>
		constexpr auto DefaultPhysMaterial = 0x568; // UPhysicalMaterial*
		constexpr auto DefaultPhysMaterialName = 0x570; // FStringAssetReference
		constexpr auto ActiveGameNameRedirects = 0x580; // TArray<FGameNameRedirect>
		constexpr auto ActiveClassRedirects = 0x590; // TArray<FClassRedirect>
		constexpr auto ActivePluginRedirects = 0x5a0; // TArray<FPluginRedirect>
		constexpr auto ActiveStructRedirects = 0x5b0; // TArray<FStructRedirect>
		constexpr auto PreIntegratedSkinBRDFTexture = 0x5c0; // UTexture2D*
		constexpr auto PreIntegratedSkinBRDFTextureName = 0x5c8; // FStringAssetReference
		constexpr auto MiniFontTexture = 0x5d8; // UTexture2D*
		constexpr auto MiniFontTextureName = 0x5e0; // FStringAssetReference
		constexpr auto WeightMapPlaceholderTexture = 0x5f0; // UTexture*
		constexpr auto WeightMapPlaceholderTextureName = 0x5f8; // FStringAssetReference
		constexpr auto LightMapDensityTexture = 0x608; // UTexture2D*
		constexpr auto LightMapDensityTextureName = 0x610; // FStringAssetReference
		constexpr auto GameViewport = 0x628; // UGameViewportClient*
		constexpr auto DeferredCommands = 0x630; // TArray<FString>
		constexpr auto TickCycles = 0x640; // int32_t
		constexpr auto GameCycles = 0x644; // int32_t
		constexpr auto ClientCycles = 0x648; // int32_t
		constexpr auto NearClipPlane = 0x64c; // float
		constexpr auto bHardwareSurveyEnabled = 0x650; // char : 1
		constexpr auto bSubtitlesEnabled = 0x650; // char : 1
		constexpr auto bSubtitlesForcedOff = 0x650; // char : 1
		constexpr auto MaximumLoopIterationCount = 0x654; // int32_t
		constexpr auto bCanBlueprintsTickByDefault = 0x658; // char : 1
		constexpr auto bOptimizeAnimBlueprintMemberVariableAccess = 0x658; // char : 1
		constexpr auto bEnableEditorPSysRealtimeLOD = 0x658; // char : 1
		constexpr auto bSmoothFrameRate = 0x658; // char : 1
		constexpr auto bUseFixedFrameRate = 0x658; // char : 1
		constexpr auto FixedFrameRate = 0x65c; // float
		constexpr auto SmoothedFrameRateRange = 0x660; // FFloatRange
		constexpr auto bCheckForMultiplePawnsSpawnedInAFrame = 0x670; // char : 1
		constexpr auto NumPawnsAllowedToBeSpawnedInAFrame = 0x674; // int32_t
		constexpr auto bShouldGenerateLowQualityLightmaps = 0x678; // char : 1
		constexpr auto C_WorldBox = 0x67c; // FColor
		constexpr auto C_BrushWire = 0x680; // FColor
		constexpr auto C_AddWire = 0x684; // FColor
		constexpr auto C_SubtractWire = 0x688; // FColor
		constexpr auto C_SemiSolidWire = 0x68c; // FColor
		constexpr auto C_NonSolidWire = 0x690; // FColor
		constexpr auto C_WireBackground = 0x694; // FColor
		constexpr auto C_ScaleBoxHi = 0x698; // FColor
		constexpr auto C_VolumeCollision = 0x69c; // FColor
		constexpr auto C_BSPCollision = 0x6a0; // FColor
		constexpr auto C_OrthoBackground = 0x6a4; // FColor
		constexpr auto C_Volume = 0x6a8; // FColor
		constexpr auto C_BrushShape = 0x6ac; // FColor
		constexpr auto StreamingDistanceFactor = 0x6b0; // float
		constexpr auto TransitionType = 0x6b4; // ETransitionType
		constexpr auto TransitionDescription = 0x6b8; // FString
		constexpr auto TransitionGameMode = 0x6c8; // FString
		constexpr auto MeshLODRange = 0x6d8; // float
		constexpr auto bAllowMatureLanguage = 0x6dc; // char : 1
		constexpr auto CameraRotationThreshold = 0x6e0; // float
		constexpr auto CameraTranslationThreshold = 0x6e4; // float
		constexpr auto PrimitiveProbablyVisibleTime = 0x6e8; // float
		constexpr auto MaxOcclusionPixelsFraction = 0x6ec; // float
		constexpr auto bPauseOnLossOfFocus = 0x6f0; // char : 1
		constexpr auto MaxParticleResize = 0x6f4; // int32_t
		constexpr auto MaxParticleResizeWarn = 0x6f8; // int32_t
		constexpr auto PendingDroppedNotes = 0x700; // TArray<FDropNoteInfo>
		constexpr auto PhysicErrorCorrection = 0x710; // FRigidBodyErrorCorrection
		constexpr auto NetClientTicksPerSecond = 0x72c; // float
		constexpr auto bHasPendingGlobalReregister = 0x730; // char : 1
		constexpr auto DisplayGamma = 0x734; // float
		constexpr auto MinDesiredFrameRate = 0x738; // float
		constexpr auto DefaultSelectedMaterialColor = 0x73c; // FLinearColor
		constexpr auto SelectedMaterialColor = 0x74c; // FLinearColor
		constexpr auto SelectionOutlineColor = 0x75c; // FLinearColor
		constexpr auto SubduedSelectionOutlineColor = 0x76c; // FLinearColor
		constexpr auto SelectedMaterialColorOverride = 0x77c; // FLinearColor
		constexpr auto bIsOverridingSelectedColor = 0x78c; // bool
		constexpr auto bEnableOnScreenDebugMessages = 0x790; // char : 1
		constexpr auto bEnableOnScreenDebugMessagesDisplay = 0x790; // char : 1
		constexpr auto bSuppressMapWarnings = 0x790; // char : 1
		constexpr auto bCookSeparateSharedMPGameContent = 0x790; // char : 1
		constexpr auto bDisableAILogging = 0x790; // char : 1
		constexpr auto bEnableVisualLogRecordingOnStart = 0x794; // uint32_t
		constexpr auto ScreenSaverInhibitorSemaphore = 0x79c; // int32_t
		constexpr auto bLockReadOnlyLevels = 0x7a0; // char : 1
		constexpr auto ParticleEventManagerClassPath = 0x7a8; // FString
		constexpr auto SelectionHighlightIntensity = 0x7c8; // float
		constexpr auto BSPSelectionHighlightIntensity = 0x7cc; // float
		constexpr auto HoverHighlightIntensity = 0x7d0; // float
		constexpr auto SelectionHighlightIntensityBillboards = 0x7d4; // float
		constexpr auto NetDriverDefinitions = 0x908; // TArray<FNetDriverDefinition>
		constexpr auto ServerActors = 0x918; // TArray<FString>
		constexpr auto RuntimeServerActors = 0x928; // TArray<FString>
		constexpr auto bStartedLoadMapMovie = 0x938; // char : 1
		constexpr auto NextWorldContextHandle = 0x950; // int32_t
	}

	namespace n_UMovementComponent { // : UActorComponent
		constexpr auto UpdatedComponent = 0xc8; // USceneComponent*
		constexpr auto UpdatedPrimitive = 0xd0; // UPrimitiveComponent*
		constexpr auto Velocity = 0xdc; // FVector
		constexpr auto bConstrainToPlane = 0xe8; // char : 1
		constexpr auto bSnapToPlaneAtStart = 0xe8; // char : 1
		constexpr auto PlaneConstraintAxisSetting = 0xec; // EPlaneConstraintAxisSetting
		constexpr auto PlaneConstraintNormal = 0xf0; // FVector
		constexpr auto PlaneConstraintOrigin = 0xfc; // FVector
		constexpr auto bUpdateOnlyIfRendered = 0x108; // char : 1
		constexpr auto bAutoUpdateTickRegistration = 0x108; // char : 1
		constexpr auto bAutoRegisterUpdatedComponent = 0x108; // char : 1
	}

	namespace n_UNonVagueNonUniqueLandmarkComponent { // : USceneComponent
		constexpr auto DescriptionPhraseId = 0x2b0; // FName
		constexpr auto ExtraRadius = 0x2b8; // float
	}

	namespace n_UBlueprintSpawnAIStepDefault { // : UBlueprintSpawnAIStepBase
		constexpr auto BeginMode = 0x28; // ETaleQuestStepBeginMode
		constexpr auto Desc = 0x30; // UTaleQuestBlueprintStepDesc*
	}

	namespace n_UExpandableArea { // : UWidget
		constexpr auto bIsExpanded = 0x140; // bool
		constexpr auto MaxHeight = 0x144; // float
		constexpr auto AreaPadding = 0x148; // FMargin
		constexpr auto OnExpansionChanged = 0x158; // FScriptMulticastDelegate
		constexpr auto HeaderContent = 0x168; // UWidget*
		constexpr auto BodyContent = 0x170; // UWidget*
	}

	namespace n_UTaleQuestMultiTargetCompassServiceDesc { // : UTaleQuestToolServiceDesc
		constexpr auto CompassDesc = 0x30; // UItemDesc*
	}

	namespace n_UCompanyValidationAsset { // : UDataAsset
		constexpr auto CompaniesToValidate = 0x28; // TArray<FCompanyValidationAssetUnit>
	}

	namespace n_ASimpleBootyInteractiveItem { // : AStaticSimpleBootyWieldableItem
		constexpr auto NamedNotificationInputComponent = 0x798; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x7a0; // UUsableWieldableComponent*
		constexpr auto InteractionSfx = 0x7a8; // UWwiseEvent*
	}

	namespace n_UStrongholdKeyItemCategory_C { // : UDefaultItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UAddNPCOnSurfaceStepDesc { // : UTaleQuestStepDesc
		constexpr auto NPCOnSurfaceDataAsset = 0x80; // UNPCOnSurfaceDataAsset*
		constexpr auto ParentActor = 0x88; // FQuestVariableActor
		constexpr auto NPCOnSurfaceManager = 0x98; // FQuestVariableGuid
	}

	namespace n_UInterpTrackFloatParticleParam { // : UInterpTrackFloatBase
		constexpr auto ParamName = 0x90; // FName
	}

	namespace n_UInterpTrackInstFloatProp { // : UInterpTrackInstProperty
		constexpr auto ResetFloat = 0x40; // float
	}

	namespace n_UAIPartsCategory { // : UDataAsset
		constexpr auto Parts = 0x28; // TArray<UAIPartsDesc*>
		constexpr auto NextPartsIndex = 0x38; // int32_t
		constexpr auto UseWeightedArray = 0x3c; // bool
		constexpr auto UseWeightedArrayFeatureName = 0x40; // FName
		constexpr auto WeightedArray = 0x48; // FWeightedProbabilityRange
	}

	namespace n_UInteractableComponent { // : UActorComponent
		constexpr auto FeatureFlag = 0xd0; // FName
		constexpr auto BoxExtent = 0xd8; // FVector
		constexpr auto BoxOrigin = 0xe4; // FVector
		constexpr auto BoxRotation = 0xf0; // FRotator
		constexpr auto MayBeGrouped = 0xfc; // char : 1
		constexpr auto ProxyForActorInteraction = 0xfc; // char : 1
		constexpr auto RequiresFacingFront = 0x100; // bool
		constexpr auto RequiresNotAirborne = 0x101; // bool
		constexpr auto RequiresNotSwimming = 0x102; // bool
		constexpr auto InteractionRadius = 0x104; // float
		constexpr auto InteractableArea = 0x108; // UInteractableArea*
		constexpr auto CurrentInteractionState = 0x110; // EInteractableState
	}

	namespace n_UAthenaItemsSettings { // : UDeveloperSettings
		constexpr auto ProjectileCollisionChannel = 0x38; // ECollisionChannel
		constexpr auto ThrowableCollisionChannel = 0x39; // ECollisionChannel
	}

	namespace n_AMockInteractorActor { // : AActor
		constexpr auto FocusedInteractable = 0x3d8; // UObject*
		constexpr auto InteractedObject = 0x3e0; // UObject*
		constexpr auto InteractNotificationType = 0x3e8; // UNotificationInputId*
		constexpr auto ValidInteractNotificationIds = 0x3f0; // TArray<UNotificationInputId*>
	}

	namespace n_ADebugMenu { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_AModifyPlayerMovementOverlapActor { // : AActor
		constexpr auto MeshOverlapVolume = 0x3d8; // UStaticMeshComponent*
		constexpr auto BoxOverlapVolume = 0x3e0; // UBoxComponent*
		constexpr auto OverlapToUse = 0x3e8; // EOverlapShapeType
		constexpr auto MaxSpeedScalar = 0x3ec; // float
		constexpr auto DisableSprint = 0x3f0; // bool
		constexpr auto DisableJump = 0x3f1; // bool
		constexpr auto Root = 0x3f8; // USceneComponent*
		constexpr auto OverlapVolume = 0x400; // UPrimitiveComponent*
	}

	namespace n_UTextRenderComponent { // : UPrimitiveComponent
		constexpr auto Text = 0x588; // FText
		constexpr auto TextMaterial = 0x5c0; // UMaterialInterface*
		constexpr auto Font = 0x5c8; // UFont*
		constexpr auto HorizontalAlignment = 0x5d0; // EHorizTextAligment
		constexpr auto VerticalAlignment = 0x5d1; // EVerticalTextAligment
		constexpr auto TextRenderColor = 0x5d4; // FColor
		constexpr auto XScale = 0x5d8; // float
		constexpr auto YScale = 0x5dc; // float
		constexpr auto WorldSize = 0x5e0; // float
		constexpr auto InvDefaultSize = 0x5e4; // float
		constexpr auto HorizSpacingAdjust = 0x5e8; // float
		constexpr auto bAlwaysRenderAsText = 0x5ec; // char : 1
	}

	namespace n_URankDesc { // : UEntitlementDesc
		constexpr auto Grade = 0xd8; // uint32_t
	}

	namespace n_UFloatingPawnMovement { // : UPawnMovementComponent
		constexpr auto MaxSpeed = 0x160; // float
		constexpr auto Acceleration = 0x164; // float
		constexpr auto Deceleration = 0x168; // float
		constexpr auto TurningBoost = 0x16c; // float
		constexpr auto bPositionCorrected = 0x170; // char : 1
	}

	namespace n_UParticleModuleLightBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UExitOnAllCrewsDestroyedStep { // : UTaleQuestStep
		constexpr auto Desc = 0x90; // UExitOnAllCrewsDestroyedStepDesc*
	}

	namespace n_UPickUpObjectConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UParticleSystem { // : UObject
		constexpr auto SystemUpdateMode = 0x28; // EParticleSystemUpdateMode
		constexpr auto UpdateTime_FPS = 0x2c; // float
		constexpr auto UpdateTime_Delta = 0x30; // float
		constexpr auto WarmUpTime = 0x34; // float
		constexpr auto WarmupTickRate = 0x38; // float
		constexpr auto Emitters = 0x40; // TArray<UParticleEmitter*>
		constexpr auto PreviewComponent = 0x50; // UParticleSystemComponent*
		constexpr auto CurveEdSetup = 0x58; // UInterpCurveEdSetup*
		constexpr auto bOrientZAxisTowardCamera = 0x60; // char : 1
		constexpr auto LODDistanceCheckTime = 0x64; // float
		constexpr auto LODMethod = 0x68; // ParticleSystemLODMethod
		constexpr auto LODDistances = 0x70; // TArray<float>
		constexpr auto bRegenerateLODDuplicate = 0x80; // char : 1
		constexpr auto LODSettings = 0x88; // TArray<FParticleSystemLOD>
		constexpr auto bIgnoreBoundsRotation = 0x98; // char : 1
		constexpr auto bBoostParticleAggregationPriority = 0x98; // char : 1
		constexpr auto bUseFixedRelativeBoundingBox = 0x98; // char : 1
		constexpr auto FixedRelativeBoundingBox = 0x9c; // FBox
		constexpr auto bUseLowResTranslucencyBoundingBox = 0xb8; // char : 1
		constexpr auto LowResTranslucencyBoundingBox = 0xbc; // FBox
		constexpr auto SecondsBeforeInactive = 0xd8; // float
		constexpr auto bShouldResetPeakCounts = 0xdc; // char : 1
		constexpr auto bHasPhysics = 0xdc; // char : 1
		constexpr auto bPostPhysicsTick = 0xdc; // char : 1
		constexpr auto bUseRealtimeThumbnail = 0xdc; // char : 1
		constexpr auto ThumbnailImageOutOfDate = 0xdc; // char : 1
		constexpr auto Delay = 0xe0; // float
		constexpr auto DelayLow = 0xe4; // float
		constexpr auto bUseDelayRange = 0xe8; // char : 1
		constexpr auto MacroUVPosition = 0xec; // FVector
		constexpr auto MacroUVRadius = 0xf8; // float
		constexpr auto OcclusionBoundsMethod = 0xfc; // EParticleSystemOcclusionBoundsMethod
		constexpr auto CustomOcclusionBounds = 0x100; // FBox
		constexpr auto SoloTracking = 0x120; // TArray<FLODSoloTrack>
		constexpr auto NamedMaterialSlots = 0x130; // TArray<FNamedEmitterMaterial>
	}

	namespace n_AKraken { // : AActor
		constexpr auto RelevancyDistance = 0x3e8; // float
		constexpr auto InnerRadius = 0x400; // float
		constexpr auto OuterRadius = 0x404; // float
		constexpr auto CurrentState = 0x408; // EKrakenState
		constexpr auto MurkActor = 0x5c0; // AMurk*
		constexpr auto KrakenAudioComponent = 0x668; // UKrakenAICharacterAudioComponent*
		constexpr auto KrakenTelemetryComponent = 0x670; // UKrakenTelemetryComponent*
		constexpr auto SightingEncounterParams = 0x678; // FEncounterParams
		constexpr auto CloseEncounterParams = 0x684; // FEncounterParams
		constexpr auto Params = 0x6a0; // FKrakenParams
		constexpr auto NumTentaclesRemaining = 0x800; // int32_t
	}

	namespace n_UAIFixedWavesSpawner { // : UAISpawner
		constexpr auto SpawnedWaves = 0x428; // TArray<FAIPersistentSpawnerWave>
		constexpr auto NumWavesToSpawnOnSpottedNewTarget = 0x438; // int32_t
	}

	namespace n_UMenuAnchor { // : UContentWidget
		constexpr auto MenuClass = 0x150; // UUserWidget*
		constexpr auto OnGetMenuContentEvent = 0x158; // DelegateProperty
		constexpr auto Placement = 0x168; // EMenuPlacement
		constexpr auto OnMenuOpenChanged = 0x170; // FScriptMulticastDelegate
	}

	namespace n_UPlayerNameService { // : UObject
		constexpr auto PlayerNameDataAsset = 0x90; // UPlayerNameDataAsset*
	}

	namespace n_UAnimNotify_PlayWorldCameraShake { // : UAnimNotify
		constexpr auto CameraShake = 0x38; // UCameraShake*
		constexpr auto ShakeInnerRadius = 0x40; // float
		constexpr auto ShakeOuterRadius = 0x44; // float
	}

	namespace n_UTaleQuestStep { // : UObject
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_ACustomDeathService { // : AActor
		constexpr auto CustomPlayerStarts = 0x408; // TArray<APlayerStart*>
	}

	namespace n_UTankardRefillerComponent { // : UActorComponent
		constexpr auto Capacity = 0xc8; // int32_t
		constexpr auto ActionDisplayPriority = 0xcc; // EActionDisplayPriority
		constexpr auto NotificationInputId = 0xd0; // UNotificationInputId*
		constexpr auto RemainingGrogs = 0xd8; // int32_t
	}

	namespace n_UShipPointParticleComponent { // : UParticleSystemComponent
		constexpr auto ValidShipRegions = 0x868; // TArray<EShipRegion>
		constexpr auto SpawnPts = 0x878; // TArray<FVector>
		constexpr auto SpawnRateParam = 0x888; // FName
		constexpr auto ParamValueRange = 0x890; // FVector2D
		constexpr auto TimePerEmitMin = 0x898; // FVector2D
		constexpr auto TimePerEmitMax = 0x8a0; // FVector2D
		constexpr auto ParamType = 0x8a8; // EShipParticleParam
	}

	namespace n_UHitRegSnapshotComponent { // : UActorComponent
		constexpr auto SnapshotData = 0xd0; // FHitRegProjectileSnapshotData
		constexpr auto ServerDisplaySettings = 0x1b0; // FHitRegSnapshotDisplaySettings
		constexpr auto ExtractedMeshes = 0x1b8; // TMap<UObject*, FMeshVertexData>
		constexpr auto DistanceToDisplayMessages = 0x208; // float
	}

	namespace n_UNameplateService { // : UObject
		constexpr auto RegisteredNameplates = 0x30; // TArray<UNameplateComponent*>
	}

	namespace n_AKrakenHead { // : AActor
		constexpr auto SkeletalMesh = 0x3e0; // USkeletalMeshComponent*
		constexpr auto HealthComponent = 0x3e8; // UHealthComponent*
		constexpr auto ActorDamageableComponent = 0x3f0; // UActorDamageableComponent*
		constexpr auto SphereComponent = 0x3f8; // USphereComponent*
		constexpr auto VenomComponent = 0x400; // UVenomComponent*
		constexpr auto ExplosionComponent = 0x408; // UExplosionComponent*
		constexpr auto BiteAttackVFX = 0x410; // UParticleSystem*
		constexpr auto BreathingInContinuousStatusesToApply = 0x418; // TArray<FStatus>
		constexpr auto BreatheInStatusDuration = 0x428; // float
		constexpr auto RoarContinuousStatusesToApply = 0x430; // TArray<FStatus>
		constexpr auto RoarStatusDuration = 0x440; // float
		constexpr auto RoarEQSQuery = 0x448; // UEnvQuery*
		constexpr auto KnockbackDamagerType = 0x450; // UDamagerType*
		constexpr auto RoarKnockbackInfo = 0x458; // FKnockBackInfo
		constexpr auto HeadAnimInstance = 0x4a8; // UKrakenHeadAnimationInstance*
		constexpr auto EQSQuerierLocation = 0x4b0; // FVector
		constexpr auto KrakenHeadHealthParams = 0x4c0; // UKrakenHeadHealthParamsDataAsset*
		constexpr auto HeadStateRequest = 0x4c8; // FHeadStateChangeRequest
		constexpr auto IsDamageEnabled = 0x4e0; // bool
		constexpr auto Root = 0x4e8; // USceneComponent*
		constexpr auto BiteAttackImpactNamedPointsGroupName = 0x5b0; // FName
	}

	namespace n_AItemPreviewActor { // : AActor
		constexpr auto CurrentView = 0x3e0; // FItemPreviewView
		constexpr auto CameraLocations = 0x498; // TArray<USceneComponent*>
		constexpr auto PendingAnim = 0x4a8; // UAnimationAsset*
		constexpr auto CosmeticItemAnimationComponent = 0x4d0; // UCosmeticItemAnimationComponent*
		constexpr auto DefaultAnimation = 0x4d8; // UAnimationAsset*
		constexpr auto ItemSkeletalMeshComponent = 0x4e0; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto ItemStaticMeshComponent = 0x4e8; // TWeakObjectPtr<UStaticMeshComponent>
		constexpr auto MainCamera = 0x4f0; // TWeakObjectPtr<UCameraComponent>
		constexpr auto PreviewReadyEventHandle = 0x4f8; // FObjectMessagingHandle
		constexpr auto PreviewBusyEventHandle = 0x540; // FObjectMessagingHandle
		constexpr auto SpinItemRate = 0x588; // float
	}

	namespace n_UPrimitiveCollisionExtentAdjustOverTimeComponent { // : UActorComponent
		constexpr auto DelayBeforeExtentAdjustment = 0xc8; // float
		constexpr auto CachedWorld = 0xf8; // UWorld*
	}

	namespace n_UWaitOnCollectableQuestObjectStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x98; // UWaitOnCollectableQuestObjectStepDesc*
	}

	namespace n_UBlueprintStepBase { // : UObject
		constexpr auto BeginMode = 0x28; // ETaleQuestStepBeginMode
		constexpr auto Desc = 0x30; // UTaleQuestBlueprintStepDesc*
	}

	namespace n_UEditorStyleSettings { // : UObject
		constexpr auto SelectionColor = 0x28; // FLinearColor
		constexpr auto PressedSelectionColor = 0x38; // FLinearColor
		constexpr auto InactiveSelectionColor = 0x48; // FLinearColor
		constexpr auto KeyboardFocusColor = 0x58; // FLinearColor
		constexpr auto ColorVisionDeficiencyPreviewType = 0x68; // EColorVisionDeficiency
		constexpr auto bUseSmallToolBarIcons = 0x6c; // char : 1
		constexpr auto bEnableWindowAnimations = 0x6c; // char : 1
		constexpr auto bShowFriendlyNames = 0x6c; // char : 1
		constexpr auto bExpandConfigurationMenus = 0x6c; // char : 1
		constexpr auto bShowProjectMenus = 0x6c; // char : 1
		constexpr auto bShowLaunchMenus = 0x6c; // char : 1
		constexpr auto LogTimestampMode = 0x70; // ELogTimes
		constexpr auto bOpenAssetEditorTabsInNewWindow = 0x71; // bool
	}

	namespace n_UAnimCompress_BitwiseCompressOnly { // : UAnimCompress
		constexpr auto Description = 0x28; // FString
		constexpr auto bNeedsSkeleton = 0x38; // char : 1
		constexpr auto TranslationCompressionFormat = 0x3c; // AnimationCompressionFormat
		constexpr auto RotationCompressionFormat = 0x3d; // AnimationCompressionFormat
		constexpr auto ScaleCompressionFormat = 0x3e; // AnimationCompressionFormat
	}

	namespace n_AMockAthenaPlayerCharacterWithAthenaPlayerCharacterMovementComponent { // : AAthenaPlayerCharacterMock
		constexpr auto PetMovementParamsDataAsset = 0x1ac0; // UAICreatureMovementModifierParamsDataAsset*
		constexpr auto AllowedToSwim = 0x1ac8; // bool
	}

	namespace n_UTaleQuestPlankService { // : UTaleQuestToolService
		constexpr auto ServiceDesc = 0x60; // UTaleQuestToolServiceDesc*
		constexpr auto WieldableDescs = 0x68; // TArray<UItemDesc*>
	}

	namespace n_UImpactSettings { // : UObject
		constexpr auto ImpactListAssetRef = 0x28; // FStringAssetReference
	}

	namespace n_UBTDecorator { // : UBTAuxiliaryNode
		constexpr auto bInverseCondition = 0x60; // char : 1
		constexpr auto FlowAbortMode = 0x64; // EBTFlowAbortMode
	}

	namespace n_UFaunaAIContollerParamsDataAsset { // : UAthenaAIControllerParamsDataAsset
		constexpr auto Courage = 0x100; // FWeightedProbabilityRange
		constexpr auto CarriedItemThreatOverrides = 0x120; // TArray<FCarriedItemThreatOverride>
		constexpr auto ThreatenedBySightOfCarrier = 0x130; // bool
		constexpr auto KnownHearingDangers = 0x138; // TArray<FHearingThreat>
		constexpr auto CarrierHearingThreatSpeedThreshold = 0x148; // float
		constexpr auto DamageThreat = 0x14c; // float
		constexpr auto CharacterDistanceToDangerRatingCurve = 0x150; // UCurveFloat*
		constexpr auto DangerRatingToAgitationDurationCurve = 0x158; // UCurveFloat*
		constexpr auto TimeToBecomeAgitatedMin = 0x160; // float
		constexpr auto TimeToBecomeAgitatedMax = 0x164; // float
		constexpr auto AgitationDurationVariance = 0x168; // float
		constexpr auto AlertThreshold = 0x16c; // int32_t
		constexpr auto FleeThreshold = 0x170; // int32_t
		constexpr auto TimeToBecomeCalm = 0x174; // float
		constexpr auto CalmCooldownTime = 0x178; // float
		constexpr auto MaxDistanceFromLeaderForIdle = 0x17c; // float
		constexpr auto DistanceToLeaderPatrolChanceCurve = 0x180; // UCurveFloat*
	}

	namespace n_UScrapeableComponent { // : UActorComponent
		constexpr auto MinIntervalBetweenScrapeDamage = 0xd0; // float
		constexpr auto ScrapeDamageSettings = 0xd8; // UScrapeableDamageDataAsset*
		constexpr auto SafeZoneCenterDirection = 0xe0; // FVector
		constexpr auto SafeZoneMaximumAngle = 0xec; // float
		constexpr auto ScrapeDamagerType = 0xf0; // UDamagerType*
	}

	namespace n_UMaidenVoyageStarter { // : UTutorialStarter
		constexpr auto AthenaPlayerController = 0x28; // AAthenaPlayerController*
		constexpr auto ShouldPlayIntroAnimatic = 0x30; // bool
		constexpr auto ShouldDisableAllIntroBehaviour = 0x31; // bool
		constexpr auto IntroAnimationSettings = 0x34; // FFirstPersonAnimaticSettings
	}

	namespace n_UBlockEarthquakeTaleQuestServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto ActorNearIsland = 0x28; // FQuestVariableActor
	}

	namespace n_AWaterEmissionVolume { // : AActor
		constexpr auto WaterEmissionVolumeComponent = 0x3d0; // UWaterEmissionVolumeComponent*
	}

	namespace n_UStatusResponseAIShipSetMaxSpeedMultiplier { // : UStatusResponse
		constexpr auto MaxSpeedMultiplier = 0x30; // float
	}

	namespace n_AWatercraft { // : AActor
		constexpr auto BuoyancyComponent = 0x3f8; // UBuoyancyComponent*
		constexpr auto RolloverCorrector = 0x400; // FWatercraftRolloverCorrector
		constexpr auto NosediveBrake = 0x410; // UShipNosediveBrake*
		constexpr auto BowSplashContainer = 0x418; // UBowSplashContainer*
		constexpr auto CollisionMesh = 0x420; // UStaticMeshComponent*
		constexpr auto CraftMesh = 0x428; // UStaticMeshComponent*
		constexpr auto OverlapHits = 0x430; // UBoxComponent*
		constexpr auto WaterOcclusionVolume = 0x438; // UStaticMeshComponent*
		constexpr auto WaterInteractionComponent = 0x440; // UWaterInteractionComponent*
		constexpr auto ClientConvexHullCollisionProfile = 0x448; // FName
		constexpr auto MovementTimeStamp = 0x450; // FNetTimeStampCalculator
		constexpr auto PhysicsErrorCorrection = 0x4c0; // FRigidBodyErrorCorrection
		constexpr auto BuoyancySampleMovement = 0x510; // FBuoyancySampleMovement
		constexpr auto SpeedToChoppinessScalarCurve = 0x578; // UCurveFloat*
		constexpr auto DeepWaterSubmersionThreshold = 0x580; // float
		constexpr auto BuoyancyChoppinessWhileSinking = 0x584; // float
		constexpr auto RigidBodyAwake = 0x588; // bool
		constexpr auto InContactWithLand = 0x589; // bool
		constexpr auto InDeepWater = 0x58a; // bool
		constexpr auto Scrapeable = 0x590; // TScriptInterface<Class>
	}

	namespace n_UMaterialExpressionDecalMipmapLevel { // : UMaterialExpression
		constexpr auto TextureSize = 0x70; // FExpressionInput
		constexpr auto ConstWidth = 0xa8; // float
		constexpr auto ConstHeight = 0xac; // float
	}

	namespace n_UClearTaleProgressStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UMaterialExpressionTextureCoordinate { // : UMaterialExpression
		constexpr auto CoordinateIndex = 0x70; // int32_t
		constexpr auto UTiling = 0x74; // float
		constexpr auto VTiling = 0x78; // float
		constexpr auto UnMirrorU = 0x7c; // char : 1
		constexpr auto UnMirrorV = 0x7c; // char : 1
	}

	namespace n_UMaterialExpressionVertexID { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_USoundNodeConcatenator { // : USoundNode
		constexpr auto InputVolume = 0x38; // TArray<float>
	}

	namespace n_UMockHitReactionComponent { // : UHitReactionComponent
		constexpr auto CalledServerProcessHitReactionImpl = 0x100; // bool
		constexpr auto CalledClientProcessHitReactionImpl = 0x101; // bool
	}

	namespace n_UPlayerWorldLocationComponent { // : UActorComponent
		constexpr auto CurrentWorldLocation = 0xc8; // FName
	}

	namespace n_UDefeatAIShipEncounterConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UShipCustomizationChestViewModelComponent { // : UPossessionsChestViewModel
		constexpr auto AllianceFlagCategory = 0x170; // UShipCustomizationCategory*
		constexpr auto JoinAllianceDesc = 0x178; // UShipCustomizationDesc*
		constexpr auto LeaveAllianceDesc = 0x180; // UShipCustomizationDesc*
		constexpr auto LastRequestedCategory = 0x188; // UShipCustomizationCategory*
		constexpr auto Categories = 0x1a0; // TArray<UShipCustomizationCategory*>
		constexpr auto IncludeAllCategory = 0x1b0; // bool
		constexpr auto MutualExclusions = 0x1b8; // TArray<FShipCustomizationChestMutualExclusion>
	}

	namespace n_UAbilitySystemGlobals { // : UObject
		constexpr auto AbilitySystemGlobalsClassName = 0x28; // FStringClassReference
		constexpr auto ActivateFailCooldownTag = 0x38; // FGameplayTag
		constexpr auto ActivateFailCooldownName = 0x40; // FName
		constexpr auto ActivateFailCostTag = 0x48; // FGameplayTag
		constexpr auto ActivateFailCostName = 0x50; // FName
		constexpr auto ActivateFailTagsBlockedTag = 0x58; // FGameplayTag
		constexpr auto ActivateFailTagsBlockedName = 0x60; // FName
		constexpr auto ActivateFailTagsMissingTag = 0x68; // FGameplayTag
		constexpr auto ActivateFailTagsMissingName = 0x70; // FName
		constexpr auto ActivateFailNetworkingTag = 0x78; // FGameplayTag
		constexpr auto ActivateFailNetworkingName = 0x80; // FName
		constexpr auto GlobalCurveTableName = 0x88; // FString
		constexpr auto GlobalAttributeMetaDataTableName = 0x98; // FString
		constexpr auto GlobalAttributeSetDefaultsTableName = 0xa8; // FString
		constexpr auto GlobalGameplayCueManagerName = 0xb8; // FStringAssetReference
		constexpr auto GameplayCueNotifyPaths = 0xc8; // TArray<FString>
		constexpr auto GameplayTagResponseTableName = 0xd8; // FStringAssetReference
		constexpr auto GameplayTagResponseTable = 0xe8; // UGameplayTagReponseTable*
		constexpr auto PredictTargetGameplayEffects = 0xf0; // bool
		constexpr auto GlobalCurveTable = 0xf8; // UCurveTable*
		constexpr auto GlobalAttributeDefaultsTable = 0x100; // UCurveTable*
		constexpr auto GlobalAttributeMetaDataTable = 0x108; // UDataTable*
		constexpr auto GlobalGameplayCueManager = 0x110; // UGameplayCueManager*
	}

	namespace n_UParticleModuleSizeScaleBySpeed { // : UParticleModuleSizeBase
		constexpr auto SpeedScale = 0x50; // FVector2D
		constexpr auto MaxScale = 0x58; // FVector2D
	}

	namespace n_UEquippedWithItemStatCondition { // : UStatCondition
		constexpr auto RequiredItemsData = 0x28; // FItemRequirementData
	}

	namespace n_UPlayerEnteredShipConditionalStatTrigger { // : UConditionalStatsTriggerType
		constexpr auto UniqueTextIdentifier = 0x28; // FName
	}

	namespace n_UParticleModuleWindBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UTaleQuestRemoveMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
		constexpr auto Location = 0x88; // FQuestVariableVector
	}

	namespace n_ATaleNote { // : ASkeletalMeshWieldableItem
		constexpr auto CanvasWidth = 0x7a0; // int32_t
		constexpr auto CanvasHeight = 0x7a4; // int32_t
		constexpr auto FontScale = 0x7a8; // float
		constexpr auto Font = 0x7b0; // UFont*
		constexpr auto Image = 0x7b8; // FTreasureMapWidgetStreamedTexture
		constexpr auto TitleWidgetText = 0x7e8; // FTreasureMapWidgetText
		constexpr auto BodyWidgetText = 0x808; // FTreasureMapWidgetText
		constexpr auto NoteWidth = 0x828; // float
		constexpr auto Title = 0x830; // FText
		constexpr auto Body = 0x868; // FText
		constexpr auto RenderTarget = 0x8a0; // UMaybeCompressedCanvasRenderTarget2D*
		constexpr auto NamedNotificationInputComponent = 0x8a8; // UNamedNotificationInputComponent*
		constexpr auto UsableWieldableComponent = 0x8b0; // UUsableWieldableComponent*
		constexpr auto InventoryItemComponent = 0x8b8; // UInventoryItemComponent*
	}

	namespace n_UEmoteInfo { // : UDataAsset
		constexpr auto EmoteData = 0x28; // FEmoteData
		constexpr auto RadialIconPath = 0xc0; // FStringAssetReference
	}

	namespace n_UNPCDialogOption { // : UObject
		constexpr auto TelemetryKey = 0x28; // FString
		constexpr auto StatsToFire = 0x38; // TArray<FPlayerStatOption>
		constexpr auto ConditionalStatsToFire = 0x48; // TArray<UConditionalStatsTriggerType*>
		constexpr auto Conditions = 0x58; // TArray<UNPCDialogConditional*>
		constexpr auto ClientRunnables = 0x68; // TArray<URunnable*>
	}

	namespace n_UPirateLegendCategory { // : UCategoryBase
		constexpr auto Name = 0x28; // FText
		constexpr auto UniqueTextIdentifier = 0x60; // FName
		constexpr auto IconPath = 0x68; // FStringAssetReference
	}

	namespace n_APressurePlateMechanismTriggerBase { // : AActor
		constexpr auto MechanismTriggerComponent = 0x3d8; // UMechanismTriggerComponent*
		constexpr auto SteppedOnVFX = 0x3e0; // UParticleSystem*
		constexpr auto SteppedOnVFXStartTime = 0x3e8; // float
		constexpr auto SteppedOnVFXLocation = 0x3ec; // FVector
		constexpr auto SteppedOnVFXRotation = 0x3f8; // FRotator
		constexpr auto Root = 0x408; // USceneComponent*
		constexpr auto MechanismInteractionComponent = 0x410; // UMechanismInteractionComponent*
		constexpr auto TriggerBox = 0x418; // UBoxComponent*
		constexpr auto AnimationComponents = 0x428; // TArray<FPressurePlateAnimationComponent>
	}

	namespace n_UTaleQuestAwaitEventStepDesc { // : UTaleQuestEventStepDescBase
		constexpr auto Dispatcher = 0x80; // UObject*
		constexpr auto EventType = 0x88; // FNativeAndUserDefinedStructSelector
		constexpr auto ArgumentMappings = 0x90; // TMap<FName, FName>
	}

	namespace n_UMaterialExpressionRotator { // : UMaterialExpression
		constexpr auto Coordinate = 0x70; // FExpressionInput
		constexpr auto Time = 0xa8; // FExpressionInput
		constexpr auto CenterX = 0xe0; // float
		constexpr auto CenterY = 0xe4; // float
		constexpr auto Speed = 0xe8; // float
		constexpr auto ConstCoordinate = 0xec; // uint32_t
	}

	namespace n_AStorm { // : AActor
		constexpr auto PercentageOfStormWhereLightningCanStrike = 0x3f0; // float
		constexpr auto ScalingParams = 0x3f8; // FStormScalingParameters
		constexpr auto ExplosionComponent = 0x4c8; // UExplosionComponent*
		constexpr auto WindZoneComponent = 0x4d0; // UWindZoneComponent*
		constexpr auto RainZoneComponent = 0x4d8; // URainZoneComponent*
		constexpr auto LightningComponent = 0x4e0; // ULightningComponent*
		constexpr auto LightningManagerComponent = 0x4e8; // ULightningManagerComponent*
		constexpr auto PressureZoneComponent = 0x4f0; // UAtmosphericPressureZoneComponent*
		constexpr auto AngryWaterZoneComponent = 0x4f8; // UCalmWaterComponent*
		constexpr auto SubjectName = 0x500; // FString
		constexpr auto StormScale = 0x510; // float
		constexpr auto Radius = 0x514; // float
		constexpr auto ServerMigrationRadiusMultiplier = 0x518; // float
		constexpr auto BaseCloudMeshComponent = 0x520; // UStaticMeshComponent*
		constexpr auto RainSheetOuterMeshComponent = 0x528; // UStaticMeshComponent*
		constexpr auto RainSheetInnerMeshComponent = 0x530; // UStaticMeshComponent*
		constexpr auto RingCloudMeshComponent = 0x538; // UStaticMeshComponent*
		constexpr auto TopCloudMeshComponent = 0x540; // UStaticMeshComponent*
		constexpr auto EncounterParams = 0x548; // FEncounterParams
		constexpr auto Params = 0x560; // UStormParams*
		constexpr auto AvoidAreaList = 0x568; // TArray<FStormAvoidanceArea>
		constexpr auto CustomCentre = 0x58c; // FVector2D
		constexpr auto CustomStrength = 0x594; // float
		constexpr auto UsingCustomSettings = 0x598; // bool
	}

	namespace n_UMaterialExpressionLinearInterpolate { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
		constexpr auto Alpha = 0xe0; // FExpressionInput
		constexpr auto ConstA = 0x118; // float
		constexpr auto ConstB = 0x11c; // float
		constexpr auto ConstAlpha = 0x120; // float
	}

	namespace n_UMovieSceneParameterSection { // : UMovieSceneSection
		constexpr auto ScalarParameterNamesAndCurves = 0x98; // TArray<FScalarParameterNameAndCurve>
		constexpr auto VectorParameterNamesAndCurves = 0xa8; // TArray<FVectorParameterNameAndCurves>
		constexpr auto ColorParameterNamesAndCurves = 0xb8; // TArray<FColorParameterNameAndCurves>
	}

	namespace n_APlayerState { // : AInfo
		constexpr auto Score = 0x3d0; // float
		constexpr auto Ping = 0x3d4; // char
		constexpr auto PlayerName = 0x3d8; // FString
		constexpr auto PlayerId = 0x3f8; // int32_t
		constexpr auto bIsSpectator = 0x3fc; // char : 1
		constexpr auto bOnlySpectator = 0x3fc; // char : 1
		constexpr auto bIsABot = 0x3fc; // char : 1
		constexpr auto bIsInactive = 0x3fc; // char : 1
		constexpr auto bFromPreviousLevel = 0x3fc; // char : 1
		constexpr auto StartTime = 0x400; // int32_t
		constexpr auto EngineMessageClass = 0x408; // ULocalMessage*
		constexpr auto UniqueId = 0x428; // FUniqueNetIdRepl
	}

	namespace n_UWaitForNPCOnSurfaceToSpawnStepDesc { // : UTaleQuestStepDesc
		constexpr auto NPCOnSurfaceManager = 0x80; // FQuestVariableGuid
		constexpr auto OutNPC = 0x90; // FQuestVariableActor
	}

	namespace n_UTaleQuestGenerateLootDescForVoyageRankStepDesc { // : UTaleQuestStepDesc
		constexpr auto VoyageRank = 0x80; // FQuestVariableInt
		constexpr auto LootDescArray = 0x90; // FQuestVariableItemDescTypeArray
		constexpr auto LootForRankDescAsset = 0xa0; // ULootForVoyageRankDescAsset*
	}

	namespace n_UWwiseIDsDatabase { // : UDataAsset
		constexpr auto StateGroupIDs = 0x28; // TArray<uint32_t>
		constexpr auto StateGroupNames = 0x38; // TArray<FName>
		constexpr auto StateValueIDs = 0x48; // TArray<uint32_t>
		constexpr auto StateValueNames = 0x58; // TArray<FName>
		constexpr auto SwitchGroupIDs = 0x68; // TArray<uint32_t>
		constexpr auto SwitchGroupNames = 0x78; // TArray<FName>
		constexpr auto SwitchStateIDs = 0x88; // TArray<uint32_t>
		constexpr auto SwitchStateNames = 0x98; // TArray<FName>
	}

	namespace n_UBTService_ObserveTargetMeleeAttacks { // : UBTService
		constexpr auto TargetActorKey = 0x70; // FBlackboardKeySelector
		constexpr auto IsTargetAttackingResultKey = 0x98; // FBlackboardKeySelector
	}

	namespace n_USimpleLeakerComponent { // : ULeakerComponent
		constexpr auto ParticleSystem_WaterLeakAboveWater = 0x2b8; // UParticleSystem*
		constexpr auto ParticleSystem_WaterLeakBelowWater = 0x2c0; // UParticleSystem*
		constexpr auto ParticleSystem_RepairLeakAboveWater = 0x2c8; // UParticleSystem*
		constexpr auto ParticleSystem_RepairLeakBelowWater = 0x2d0; // UParticleSystem*
		constexpr auto WaterLeakSfx_Play = 0x2d8; // UWwiseEvent*
		constexpr auto WaterLeakSfx_Stop = 0x2e0; // UWwiseEvent*
		constexpr auto WaterLeakRepairSfx_Play = 0x2e8; // UWwiseEvent*
		constexpr auto WaterLeakRepairSfx_Stop = 0x2f0; // UWwiseEvent*
		constexpr auto WaterLeakUnderwaterSwitchGroup = 0x2f8; // FName
		constexpr auto WaterLeakUnderwaterSwitchDefaultAboveWater = 0x300; // FName
		constexpr auto WaterLeakUnderwaterSwitchUnderwater = 0x308; // FName
		constexpr auto WaterLeakFadeTime = 0x310; // float
		constexpr auto WaterLeakEmitterName = 0x314; // FName
		constexpr auto WaterLeakWisePool = 0x320; // UWwiseObjectPoolWrapper*
		constexpr auto Leaks = 0x328; // TArray<FLeak>
	}

	namespace n_ULightningManagerComponent { // : UActorComponent
		constexpr auto LightningManagerDataAsset = 0xc8; // ULightningManagerDataAsset*
		constexpr auto Radius = 0xd0; // float
	}

	namespace n_UShipTrackerComponent { // : UActorComponent
		constexpr auto bPlayerIsAbandoned = 0x198; // bool
		constexpr auto PlayerAbandonedReason = 0x199; // EPlayerAbandonedReason
	}

	namespace n_UCargoRunItemDesc { // : UBootyItemDesc
		constexpr auto DeliveryLocationId = 0x130; // FGuid
		constexpr auto DeliveryTimeLimitInMinutes = 0x140; // uint32_t
	}

	namespace n_UAssignItemStep { // : UTaleQuestStep
		constexpr auto StepDesc = 0x90; // UAssignItemStepDesc*
	}

	namespace n_ATunnelOfTheDamnedPortalShipSpawnLocation { // : AShipSpawnLocation
		constexpr auto LinkedShipSpawnLocations = 0x3d0; // TArray<AShipSpawnLocation*>
		constexpr auto AssociatedSpawnLocations = 0x3e0; // TArray<ASpawnLocation*>
		constexpr auto ShipSize = 0x3f0; // UShipSize*
		constexpr auto Description = 0x3f8; // FString
		constexpr auto BoxComponent = 0x408; // UBoxComponent*
	}

	namespace n_UTaleQuestDescAsset { // : UQuestDescDataAsset
		constexpr auto Root = 0x30; // UTaleQuestStepDesc*
		constexpr auto Linkage = 0x38; // TArray<UUserDefinedStruct*>
		constexpr auto ToggledDefinitions = 0x48; // TArray<FTaleQuestToggledDefinition>
		constexpr auto Definition = 0x58; // UObject*
		constexpr auto DevDefinition = 0x60; // UObject*
		constexpr auto TaleFailMessage = 0x68; // FText
		constexpr auto TaleFailBannerTag = 0xa0; // FName
		constexpr auto ShouldFireStartTallTaleTrackedObjective = 0xa8; // bool
	}

	namespace n_UEnvQueryTest_InIslandSafeZone { // : UEnvQueryTest
		constexpr auto Radius = 0x170; // float
	}

	namespace n_URadialBlurItemActionEffect { // : UItemActionEffect
		constexpr auto MaterialInstance = 0x28; // UMaterialInterface*
	}

	namespace n_APossessionsChest { // : AModalInteractionProxy
		constexpr auto Name = 0x498; // FText
		constexpr auto InteractionFeatureGuard = 0x4d0; // FName
		constexpr auto BeginInteractionSfx = 0x4d8; // UWwiseEvent*
		constexpr auto EndInteractionSfx = 0x4e0; // UWwiseEvent*
		constexpr auto SfxPool = 0x4e8; // UWwiseObjectPoolWrapper*
	}

	namespace n_UNamedPointsCollectionListDataAsset { // : UDataAsset
		constexpr auto SubAssets = 0x28; // TArray<UNamedPointsCollectionDataAsset*>
	}

	namespace n_UShipAssetClassDatabaseService { // : UObject
		constexpr auto StringToAssetClassMap = 0x30; // UStringToAssetClassMap*
	}

	namespace n_UEnvQueryGenerator_IslandTreasureLocations { // : UEnvQueryGenerator
		constexpr auto OptionName = 0x30; // FString
		constexpr auto NonShippingOnly = 0x40; // bool
		constexpr auto ItemType = 0x48; // UEnvQueryItemType*
	}

	namespace n_UInviteReceivedPopUpSettings { // : UObject
		constexpr auto SteamSingleInvitePopUpAssetLocation = 0x28; // FStringAssetReference
		constexpr auto SteamMultipleInvitesPopUpAssetLocation = 0x38; // FStringAssetReference
	}

	namespace n_URatManagerComponent { // : UShipCreatureManagerComponent
		constexpr auto DataAsset = 0x148; // URatManagerComponentDataAsset*
	}

	namespace n_UShipFactory { // : UObject
		constexpr auto Builders = 0x30; // TArray<UShipBuilder*>
	}

	namespace n_UStatusResponseAddManagedVulnerabilityLayer { // : UStatusResponse
		constexpr auto VulnerabilityName = 0x30; // FName
		constexpr auto VulnerabilityToApply = 0x38; // UDamageableVulnerabilityLayer*
		constexpr auto CancelVulnerabilityOnDeactivate = 0x40; // bool
		constexpr auto VulnerabilityDuration = 0x44; // float
	}

	namespace n_AAmbientLightSource { // : ALight
		constexpr auto AmbientLightSourceComponent = 0x3e0; // UAmbientLightSourceComponent*
	}

	namespace n_UReflectionCaptureComponent { // : USceneComponent
		constexpr auto bLockSettings = 0x2b0; // bool
		constexpr auto Brightness = 0x2b4; // float
		constexpr auto ShadowBrightness = 0x2b8; // float
		constexpr auto LPVOcclusionBrightness = 0x2bc; // float
		constexpr auto ReflectionTint = 0x2c0; // FLinearColor
		constexpr auto StateId = 0x2dc; // FGuid
	}

	namespace n_UInterpTrackColorScale { // : UInterpTrackVectorBase
		constexpr auto VectorTrack = 0x70; // FInterpCurveVector
		constexpr auto CurveTension = 0x88; // float
	}

	namespace n_UBTTask_RamTargetShip { // : UBTTask_BlackboardBase
		constexpr auto BlackboardKey = 0x60; // FBlackboardKeySelector
	}

	namespace n_UMaterialExpressionLogarithm2 { // : UMaterialExpression
		constexpr auto X = 0x70; // FExpressionInput
	}

	namespace n_APreviewPet { // : AActor
		constexpr auto InitialAnimState = 0x3d8; // EAthenaAnimationPetRoamingState
		constexpr auto InitialPartIdToLoad = 0x3dc; // FAIPartId
		constexpr auto PreviewPetPartsCategory = 0x3e8; // UAIPartsCategory*
		constexpr auto PreviewPetMesh = 0x3f0; // USkeletalMeshComponent*
		constexpr auto PreviewPetAnimationData = 0x3f8; // FPetAnimationDataPreview
		constexpr auto AIPartsRetrievalComponent = 0x408; // UAIPartsRetrievalComponent*
		constexpr auto PetPartCustomisationComponent = 0x410; // UPetPartCustomisationComponent*
	}

	namespace n_UInterpTrackInstVectorProp { // : UInterpTrackInstProperty
		constexpr auto ResetVector = 0x40; // FVector
	}

	namespace n_UMovieSceneVisibilityTrack { // : UMovieSceneBoolTrack
		constexpr auto PropertyName = 0x88; // FName
		constexpr auto PropertyPath = 0x90; // FString
		constexpr auto Sections = 0xa0; // TArray<UMovieSceneSection*>
	}

	namespace n_AAIDockableObject { // : AControllableObject
		constexpr auto InteractableType = 0x510; // UAIInteractableType*
		constexpr auto InteractableOffset = 0x518; // float
	}

	namespace n_USeaClueSiteTypesDataAsset { // : UDataAsset
		constexpr auto ClueSiteTypes = 0x28; // TArray<UClueSiteType*>
	}

	namespace n_USeatStat_SitOnSinkingShip { // : USeatStat
		constexpr auto WeakCurrentShip = 0x48; // TWeakObjectPtr<AActor>
	}

	namespace n_UCameraModifier { // : UObject
		constexpr auto bDebug = 0x28; // char : 1
		constexpr auto bExclusive = 0x28; // char : 1
		constexpr auto Priority = 0x2c; // char
		constexpr auto CameraOwner = 0x30; // APlayerCameraManager*
		constexpr auto AlphaInTime = 0x38; // float
		constexpr auto AlphaOutTime = 0x3c; // float
		constexpr auto Alpha = 0x40; // float
	}

	namespace n_UBTTask_AthenaRunEQSQuery { // : UBTTask_RunEQSQuery
		constexpr auto KeyToSetToTrueIfNoValidLocationFound = 0xa8; // FBlackboardKeySelector
		constexpr auto ReasonStringKeyIfNoValidLocationFound = 0xd0; // FBlackboardKeySelector
		constexpr auto ThrottleQueryTimePerFrame = 0xf8; // bool
		constexpr auto MaxSecondsToSpendOnQueryPerFrame = 0xfc; // float
	}

	namespace n_UContestUIComponent { // : UActorComponent
		constexpr auto ClientPlayerController = 0x120; // AAthenaPlayerController*
	}

	namespace n_UMaterialScalarParameterBlend { // : UMaterialParameterBlendBase
		constexpr auto Inactive = 0x60; // float
		constexpr auto Active = 0x64; // float
	}

	namespace n_UEnvQueryTest_WaterHeight { // : UEnvQueryTest
		constexpr auto WaterHeightCheckOffset = 0x170; // float
		constexpr auto ActorWithWaterPlaneContext = 0x178; // UEnvQueryContext*
	}

	namespace n_UPromptCounterAccessKey { // : UObject
		constexpr auto Key = 0x28; // FString
	}

	namespace n_URetractableItemProxyComponent { // : URetractableComponent
		constexpr auto FeatureToggle = 0xf0; // FName
		constexpr auto OrientationAdjustmentOnRetractFlags = 0xf8; // FRetractorOrientationAdjustmentFlags
		constexpr auto RetractorBoxAxis = 0xfb; // EAxis
		constexpr auto ShouldAutoReleaseOnSuccessfulRetract = 0xfc; // bool
		constexpr auto MigrateAttachedWithRetractor = 0xfd; // bool
		constexpr auto WasSimulatingPhysicsBeforeRetract = 0xfe; // bool
	}

	namespace n_AWheel { // : AControllableObject
		constexpr auto CustomizationComponent = 0x530; // UReplicatedShipPartCustomizationComponent*
		constexpr auto WheelAnimationProps = 0x538; // FWheelAnimationProperties
		constexpr auto WheelEventProps = 0x5b0; // FWheelEventProperties
		constexpr auto CenteredForceFeedbackEffect = 0x5b8; // UForceFeedbackEffect*
		constexpr auto TurbulenceForceFeedbackEffect = 0x5c0; // UForceFeedbackEffect*
		constexpr auto TurbulenceForceFeedbackTag = 0x5c8; // FName
		constexpr auto SteeringForceFeedbackEffect = 0x5d0; // UForceFeedbackEffect*
		constexpr auto SteeringForceFeedbackTag = 0x5d8; // FName
		constexpr auto EmitterPool = 0x5e0; // UWwiseObjectPoolWrapper*
		constexpr auto WheelStartedMovingEvent = 0x5e8; // UWwiseEvent*
		constexpr auto WheelHasStoppedEvent = 0x5f0; // UWwiseEvent*
		constexpr auto WheelIsStoppingEvent = 0x5f8; // UWwiseEvent*
		constexpr auto DamagedWheelStartedMovingEvent = 0x600; // UWwiseEvent*
		constexpr auto DamagedWheelHasStoppedEvent = 0x608; // UWwiseEvent*
		constexpr auto DamagedWheelIsStoppingEvent = 0x610; // UWwiseEvent*
		constexpr auto WheelCenteredEvent = 0x618; // UWwiseEvent*
		constexpr auto FightingTurbulenceStartEvent = 0x620; // UWwiseEvent*
		constexpr auto FightingTurbulenceStopEvent = 0x628; // UWwiseEvent*
		constexpr auto SqueakyWheelEvent = 0x630; // UWwiseEvent*
		constexpr auto RTPCTurnRateName = 0x638; // FName
		constexpr auto RTPCTurnAngleName = 0x640; // FName
		constexpr auto WheelDamageRTPC = 0x648; // FName
		constexpr auto DisableTurbulence = 0x650; // bool
		constexpr auto OnWheelDamageStateChanged = 0x658; // FScriptMulticastDelegate
		constexpr auto RootSceneComponent = 0x668; // USceneComponent*
		constexpr auto PlayerCollisionComponent = 0x670; // UBoxComponent*
		constexpr auto WheelDamageComponent = 0x678; // UShipDamageableComponent*
		constexpr auto RepairableComponentWest = 0x680; // URepairableComponent*
		constexpr auto RepairableComponentEast = 0x688; // URepairableComponent*
		constexpr auto RepairableComponentSouth = 0x690; // URepairableComponent*
		constexpr auto ShipPartFireCellActorSpaceLocation = 0x6e8; // FVector
		constexpr auto DamageSpeedMultiplierLevel1 = 0x718; // float
		constexpr auto DamageSpeedMultiplierLevel2 = 0x71c; // float
		constexpr auto DamageSpeedMultiplierLevel3 = 0x720; // float
		constexpr auto WheelDamageParticleSystem = 0x728; // UParticleSystem*
		constexpr auto TurbulenceFactor = 0x730; // float
		constexpr auto ServerWheelAngle = 0x734; // float
		constexpr auto ServerWantedAngle = 0x738; // float
		constexpr auto CenterJoltDuration = 0x760; // float
		constexpr auto CenterJoltSlowDownFactor = 0x764; // float
		constexpr auto WheelDamageLevelAudio = 0x788; // UDamageableShipPartAudioParams*
		constexpr auto MaxWheelAngle = 0x794; // float
		constexpr auto MinWheelAngle = 0x798; // float
		constexpr auto SqueakAtAngle = 0x79c; // float
		constexpr auto AllowedWheelDirection = 0x7a0; // EWheelDirection
		constexpr auto NarratedShipDirectionComponent = 0x7a8; // UNarratedShipDirectionComponent*
	}

	namespace n_ADeepSeaRegion { // : AActor
		constexpr auto Root = 0x3d8; // USceneComponent*
		constexpr auto DeepSeaRegionData = 0x3f8; // FDeepSeaRegionData
		constexpr auto DeepSeaRegionAudio = 0x418; // FDeepSeaRegionAmbienceAudio
		constexpr auto DeepSeaRegionScreenEffects = 0x430; // FDeepSeaRegionScreenEffects
	}

	namespace n_UMaterialExpressionVertexNormalWS { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_USteamAchievementPopUpSettings { // : UObject
		constexpr auto SteamAchievementPopUpAssetLocation = 0x28; // FStringAssetReference
	}

	namespace n_UGlintComponent { // : UStaticMeshComponent
		constexpr auto GlintComponentDataAsset = 0x5f0; // UGlintComponentDataAsset*
		constexpr auto CurrentEnteredShips = 0x5f8; // TArray<AActor*>
		constexpr auto GlintVisibilityLock = 0x608; // FGlintVisibilityLock
	}

	namespace n_UAthenaAIControllerParamsDataProvider { // : UAIDataProvider
		constexpr auto ParamName = 0x28; // FName
		constexpr auto FloatValue = 0x30; // float
		constexpr auto IntValue = 0x34; // int32_t
		constexpr auto BoolValue = 0x38; // bool
	}

	namespace n_USinkingComponent { // : UActorComponent
		constexpr auto SinkingParams = 0xd0; // FSinkingShipParams
		constexpr auto Ship = 0x108; // AShip*
		constexpr auto ShipState = 0x110; // EShipState
		constexpr auto KeelOverConfigIndex = 0x114; // int32_t
	}

	namespace n_UGlintComponentDataAsset { // : UDataAsset
		constexpr auto ToggleConditions = 0x28; // TArray<EGlintCondition>
		constexpr auto VisibleByDefault = 0x38; // bool
	}

	namespace n_UParticleModuleLocationEmitter { // : UParticleModuleLocationBase
		constexpr auto EmitterName = 0x50; // FName
		constexpr auto SelectionMethod = 0x58; // ELocationEmitterSelectionMethod
		constexpr auto InheritSourceVelocity = 0x5c; // char : 1
		constexpr auto InheritSourceVelocityScaleDistribution = 0x60; // FRawDistributionFloat
		constexpr auto bInheritSourceRotation = 0x98; // char : 1
		constexpr auto InheritSourceRotationScale = 0x9c; // float
	}

	namespace n_UBTTask_ClearPerceptualData { // : UBTTaskNode
		constexpr auto NodeName = 0x30; // FString
		constexpr auto TreeAsset = 0x40; // UBehaviorTree*
		constexpr auto ParentNode = 0x48; // UBTCompositeNode*
	}

	namespace n_UCharacterAudioComponent { // : UActorComponent
		constexpr auto Params = 0xd8; // UCharacterAudioComponentParams*
		constexpr auto MonsterCallEvent = 0xe0; // UWwiseEvent*
		constexpr auto MonsterCallHourToPlay = 0xe8; // int32_t
		constexpr auto TimeOfDayRtpc = 0xec; // FName
		constexpr auto PlayerMusicController = 0xf8; // FPlayerMusicController
		constexpr auto FootfallParams = 0x2b8; // UCharacterAudioFootfallControllerParams*
		constexpr auto EventParams = 0x2c0; // UCharacterAudioEventControllerParams*
		constexpr auto PegLegCategory = 0x2c8; // UClothingCategory*
		constexpr auto BootsCategory = 0x2d0; // UClothingCategory*
		constexpr auto AudioSpaceTracker = 0x310; // UAudioSpaceTrackerComponent*
		constexpr auto AthenaPlayerCharacter = 0x318; // AAthenaPlayerCharacter*
		constexpr auto CurrentSpace = 0x12e0; // UAudioSpaceDataAsset*
		constexpr auto CurrentShip = 0x1300; // AShip*
	}

	namespace n_UEmotesRadialDataAsset { // : UDataAsset
		constexpr auto Emotes = 0x28; // TArray<FEmoteData>
	}

	namespace n_UTexture2D { // : UTexture
		constexpr auto RequestedMips = 0x138; // int32_t
		constexpr auto ResidentMips = 0x13c; // int32_t
		constexpr auto StreamingIndex = 0x140; // int32_t
		constexpr auto FirstResourceMemMip = 0x144; // int32_t
		constexpr auto ImportedSize = 0x14c; // FIntPoint
		constexpr auto ForceMipLevelsToBeResidentTimestamp = 0x154; // float
		constexpr auto bTemporarilyDisableStreaming = 0x158; // char : 1
		constexpr auto bIsStreamable = 0x158; // char : 1
		constexpr auto bHasCancelationPending = 0x158; // char : 1
		constexpr auto bForceMiplevelsToBeResident = 0x158; // char : 1
		constexpr auto bGlobalForceMipLevelsToBeResident = 0x158; // char : 1
		constexpr auto AddressX = 0x15c; // TextureAddress
		constexpr auto AddressY = 0x15d; // TextureAddress
		constexpr auto MinimumLoadedMips = 0x160; // int32_t
	}

	namespace n_UEnvQueryTest_InSeaRockZone { // : UEnvQueryTest
		constexpr auto Radius = 0x170; // float
	}

	namespace n_UAthenaAnimationEmoteListingAsset { // : UDataAsset
		constexpr auto EmoteGroupings = 0x28; // TArray<UAthenaAnimationEmoteGroupingAsset*>
	}

	namespace n_UBTDecorator_ConditionalLoop { // : UBTDecorator_Blackboard
		constexpr auto IntValue = 0x90; // int32_t
		constexpr auto FloatValue = 0x94; // float
		constexpr auto StringValue = 0x98; // FString
		constexpr auto CachedDescription = 0xa8; // FString
		constexpr auto OperationType = 0xb8; // char
		constexpr auto NotifyObserver = 0xb9; // EBTBlackboardRestart
	}

	namespace n_UServiceHttpSettings { // : UObject
		constexpr auto DiscoveryServiceUrl = 0x28; // FString
		constexpr auto ServerMetricsLevel = 0x38; // EServiceHttpMetricsLevel
		constexpr auto ClientMetricsLevel = 0x39; // EServiceHttpMetricsLevel
	}

	namespace n_UHarpoonRenderComponent { // : UCordRenderComponent
		constexpr auto HarpoonMaterials = 0x628; // TArray<UMaterialInstanceDynamic*>
		constexpr auto LaunchAnimationDurationSecs = 0x638; // float
		constexpr auto HitAnimationDurationSecs = 0x63c; // float
		constexpr auto QuickRetractAnimationSpeed = 0x640; // float
	}

	namespace n_UDeathSelfInteractionComponent { // : UInteractableComponent
		constexpr auto HasGivenUp = 0x120; // bool
	}

	namespace n_UAISkillsetTypeList { // : UDataAsset
		constexpr auto AllSkillsets = 0x28; // TArray<UAthenaAIControllerParamsDataAsset*>
	}

	namespace n_UAIPerceptionStimuliSourceComponent { // : UActorComponent
		constexpr auto bAutoRegisterAsSource = 0xc8; // char : 1
		constexpr auto RegisterAsSourceForSenses = 0xd0; // TArray<UAISense*>
	}

	namespace n_UMaterialExpressionFmod { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
	}

	namespace n_UMapMarkMappingDataAsset { // : UDataAsset
		constexpr auto MarkDefinitions = 0x28; // TArray<FUserSettingsMapMarkDefinition>
	}

	namespace n_UAISpawnContextTaleQuestService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UAISpawnContextTaleQuestServiceDesc*
	}

	namespace n_URewardHandInComponent { // : UActorComponent
		constexpr auto Company = 0xd0; // UCompany*
	}

	namespace n_UItemSpawnDistributionAsset { // : UDataAsset
		constexpr auto SpawnDistribution = 0x28; // FItemSpawnDistribution
	}

	namespace n_UPetHangoutSpotSelectorComponent { // : UActorComponent
		constexpr auto HangoutSpotPositionComponent = 0xc8; // UPetHangoutSpotComponent*
		constexpr auto HangoutParamsDataAsset = 0xd0; // UPetHangoutSpotsDataAsset*
		constexpr auto PetType_Cached = 0x148; // UPetDesc*
	}

	namespace n_AAthenaAICharacter { // : AAthenaCharacter
		constexpr auto DefaultAmmoItemDescType = 0xca0; // UItemDesc*
		constexpr auto DefaultInteractableAmmoItemDescType = 0xca8; // UItemDesc*
		constexpr auto DistanceInMToCannonShotHitChanceCurve = 0xcb0; // UCurveFloat*
		constexpr auto AimNoiseEnabled = 0xcb8; // bool
		constexpr auto AmplitudeChangeSpeed = 0xcbc; // float
		constexpr auto AmplitudeOffset = 0xcc0; // float
		constexpr auto Frequency = 0xcc4; // float
		constexpr auto InteractableMissFallShortMinProportion = 0xcc8; // float
		constexpr auto InteractableMissFallShortMaxProportion = 0xccc; // float
		constexpr auto FaceTargetComponent = 0xcd0; // UFaceTargetComponent*
		constexpr auto AIPartsRetrievalComponent = 0xcd8; // UAIPartsRetrievalComponent*
		constexpr auto FormComponent = 0xce0; // UAthenaAIFormComponent*
		constexpr auto AICharacterAudioComponent = 0xce8; // UAICharacterAudioComponent*
		constexpr auto StatusEffectManagerComponent = 0xcf0; // UStatusEffectManagerComponent*
		constexpr auto StatusEffectPersistenceComponent = 0xcf8; // UStatusEffectPersistenceComponent*
		constexpr auto PlayerCurseComponent = 0xd00; // UPlayerCurseComponent*
		constexpr auto VulnerabilityDuringAIStrategyComponent = 0xd08; // UVulnerabilityDuringAIStrategyComponent*
		constexpr auto ProjectileTraceHitVolume = 0xd10; // UCapsuleComponent*
		constexpr auto AnimationDataOverriderComponent = 0xd18; // UAnimationDataOverriderComponent*
		constexpr auto CustomAnimationHandlerComponent = 0xd20; // UCustomAnimationHandlerComponent*
		constexpr auto FiringIntentionComponent = 0xd28; // UAIProjectileWeaponFiringIntentionComponent*
		constexpr auto KilledVfxTemplate = 0xd30; // UObject*
		constexpr auto PartSpecificKilledVfxTemplate = 0xd38; // UObject*
		constexpr auto AISpawnLoadout = 0xd40; // FItemLoadout
		constexpr auto KillOnFallingIntoWater = 0xd60; // bool
		constexpr auto MeleeAttackStrategyId = 0xd68; // UAIStrategyId*
		constexpr auto GunpowderKegAnimationStoreId = 0xd70; // UWieldableItemAnimationStoreId*
		constexpr auto OnFireStat = 0xd78; // FPlayerStat
		constexpr auto AssignedMesh = 0xdc8; // USkeletalMesh*
		constexpr auto TeamColorTexture = 0xdd0; // UColorTexture*
		constexpr auto TeamID = 0xdd8; // FGenericTeamId
		constexpr auto CurrentShip = 0xde0; // AActor*
		constexpr auto MeshScale = 0xde8; // float
		constexpr auto DamageResponsesDisabled = 0xdec; // bool
		constexpr auto TurnActive = 0xded; // bool
		constexpr auto CurrentAIStrategy = 0xdf0; // UAIStrategyId*
		constexpr auto CurrentAnimationState = 0xdf8; // UAIAnimationStateId*
		constexpr auto AlternateLocomotionItemType = 0xe00; // UItemCategory*
		constexpr auto Ammo = 0x10d0; // UAthenaAIAmmoDataAsset*
		constexpr auto PawnEncounterSpec = 0x10d8; // FAIEncounterSpecification
	}

	namespace n_UTestAthenaDebugMenuComponent { // : UAthenaDebugMenuComponent
		constexpr auto TestPermissionComponent = 0x128; // UPlayerPermissionsComponent*
	}

	namespace n_AMountpointActor { // : AInteractableObject
		constexpr auto MountpointComponent = 0x470; // UInterpolatingMountpointComponent*
		constexpr auto OverlapBroadcasterShapeComponent = 0x478; // UCapsuleComponent*
		constexpr auto InteractableComponent = 0x480; // UInteractableComponent*
		constexpr auto MountedMeshComponent = 0x488; // UStaticMeshComponent*
		constexpr auto ExtraRotationMountedMeshComponent = 0x490; // UStaticMeshComponent*
		constexpr auto PressedNotificationInputId = 0x498; // UNotificationInputId*
		constexpr auto ReleasedNotificationInputId = 0x4a0; // UNotificationInputId*
		constexpr auto InputHoldTime = 0x4a8; // float
		constexpr auto MountVerb = 0x4b0; // FText
		constexpr auto UnmountVerb = 0x4e8; // FText
		constexpr auto IsNothingToMountTooltipEnabled = 0x520; // bool
		constexpr auto NothingToMountDescription = 0x528; // FText
		constexpr auto DetachInteractionPoints = 0x560; // TArray<FVector>
		constexpr auto DetachInteractionPointRadius = 0x570; // float
		constexpr auto DetachInteractionMaxDistance = 0x574; // float
		constexpr auto AttachInteractionMaxDistance = 0x578; // float
		constexpr auto UnmountIfOwnerShipSinks = 0x57c; // bool
		constexpr auto UseClosestMountableToInteractor = 0x57d; // bool
	}

	namespace n_UTaleQuestClueSiteService { // : UTaleQuestService
		constexpr auto Desc = 0x60; // UTaleQuestClueSiteServiceDesc*
		constexpr auto ClueSites = 0x68; // TArray<FClueSite>
		constexpr auto SpawnedLoot = 0x78; // TMap<EClueSiteLootType, FClueSiteLootHistory>
		constexpr auto DebugClueSiteIds = 0xc8; // TArray<FGuid>
	}

	namespace n_UEnvQueryGenerator_FromContext { // : UEnvQueryGenerator
		constexpr auto Context = 0x50; // UEnvQueryContext*
	}

	namespace n_UTaleQuestSpawnLootItemInClueSiteStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UBTDecorator_ItemReadyToUse { // : UBTDecorator_BaseConditional
		constexpr auto NotificationId = 0x68; // UNotificationInputId*
	}

	namespace n_AMusicalInstrumentSkeletalMesh { // : AMusicalInstrument
		constexpr auto InstrumentType = 0x7a0; // EMusicalInstrumentType
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto PlayingCoolDownTime = 0x7b0; // float
		constexpr auto InstrumentDrunkennessRtpc = 0x7b4; // FName
		constexpr auto InstrumentUnderwaterRtpc = 0x7bc; // FName
		constexpr auto MaxUnderwaterRtpcFactor = 0x7c4; // float
		constexpr auto MinUnderwaterRtpcFactor = 0x7c8; // float
		constexpr auto PlayingAINoiseRange = 0x7cc; // float
		constexpr auto AINoiseEventInterval = 0x7d0; // float
		constexpr auto TriggerEffectActor = 0x7d8; // UObject*
		constexpr auto NamedNotificationInputComponent = 0x7e0; // UNamedNotificationInputComponent*
		constexpr auto AthenaPlayerCharacter = 0x7f0; // AAthenaPlayerCharacter*
	}

	namespace n_AStaticWieldableIngestible { // : AWieldableIngestible
		constexpr auto GiveItemUponConsumptionComponent = 0x798; // UGiveItemUponConsumptionComponent*
		constexpr auto ApplyStatusToConsumerComponent = 0x7a0; // UApplyStatusToConsumerComponent*
		constexpr auto InventoryItem = 0x7a8; // UInventoryItemComponent*
		constexpr auto NamedNotificationInputComponent = 0x7b0; // UNamedNotificationInputComponent*
		constexpr auto FeedableComponent = 0x7b8; // UFeedableComponent*
		constexpr auto InToIngestionDuration = 0x7c0; // float
		constexpr auto OutOfIngestionDuration = 0x7c4; // float
		constexpr auto CanIngest = 0x7c8; // bool
		constexpr auto IngestAudioEvent = 0x7d0; // UWwiseEvent*
		constexpr auto IngestAudioFoodType = 0x7d8; // FName
		constexpr auto IngestionStat = 0x7e0; // FPlayerStat
		constexpr auto IngestionShipStat = 0x7e4; // FPlayerStat
	}

	namespace n_UShantySelectionComponent { // : UActorComponent
		constexpr auto SelectedShanty = 0x120; // UShantyItemDesc*
	}

	namespace n_ULiveWidgetReflectorNode { // : UWidgetReflectorNodeBase
		constexpr auto Geometry = 0x28; // FGeometry
		constexpr auto ChildNodes = 0x60; // TArray<UWidgetReflectorNodeBase*>
		constexpr auto Tint = 0x70; // FLinearColor
	}

	namespace n_UStatusResponseApplyPersistentStatus { // : UStatusResponse
		constexpr auto StatusToApply = 0x30; // FStatus
		constexpr auto DurationMultiplier = 0x48; // float
	}

	namespace n_UParticleModuleCollisionBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UTaleQuestAdvanceRiddleMapStepDesc { // : UTaleQuestMapStepDescBase
		constexpr auto MapId = 0x80; // FName
	}

	namespace n_UTaleQuestSpawnWashedUpMessageInABottleClueStepDesc { // : UTaleQuestStepDesc
		constexpr auto ClueSite = 0x80; // FQuestVariableClueSite
		constexpr auto ClueDescriptor = 0x90; // FQuestVariableClueDescriptor
		constexpr auto MessageInABottle = 0xa0; // FQuestVariableActor
	}

	namespace n_AAITargetActor { // : AActor
		constexpr auto Root = 0x3d8; // USceneComponent*
		constexpr auto Team = 0x3e0; // EAthenaAITeam
	}

	namespace n_UTextureLightProfile { // : UTexture2D
		constexpr auto Brightness = 0x190; // float
		constexpr auto TextureMultiplier = 0x194; // float
	}

	namespace n_UInterpTrackColorProp { // : UInterpTrackVectorBase
		constexpr auto PropertyName = 0x90; // FName
	}

	namespace n_ATestAthenaGameModeWithHUD { // : ATestAthenaGameMode
		constexpr auto GhostShipPawnClass = 0x4e0; // APawn*
		constexpr auto ServerNetworkedEventsWhitelistDefinition = 0x4e8; // UNetworkedEventsWhitelistDefinition*
		constexpr auto GhostShipCoordinator = 0x688; // FGhostShipCoordinator
		constexpr auto StorageContainerRefresher = 0x8b8; // FStorageContainerRefresher
		constexpr auto RiddleQuestDescGeneratorData = 0x990; // URiddleQuestDescGeneratorData*
		constexpr auto RespawnTimer = 0x998; // float
		constexpr auto ContestRespawnTimer = 0x99c; // float
		constexpr auto StorageContainerRefreshInterval = 0x9a0; // float
		constexpr auto ContainerRefreshBatchSize = 0x9a4; // int32_t
	}

	namespace n_UEnvQueryGenerator_IslandAISpawnLocations { // : UEnvQueryGenerator
		constexpr auto OptionName = 0x30; // FString
		constexpr auto NonShippingOnly = 0x40; // bool
		constexpr auto ItemType = 0x48; // UEnvQueryItemType*
	}

	namespace n_UStatusResponseHealthRegenerationPoolChange { // : UStatusResponse
		constexpr auto HealthPoolChangeIntensityMultiplier = 0x30; // float
	}

	namespace n_AMigrationRelevancyClusterActor { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UMechanismInteractionComponent { // : UShapeComponent
		constexpr auto UseSimpleAsComplex = 0x5b0; // bool
		constexpr auto ShapeType = 0x5b1; // ECollisionShapeType
		constexpr auto SphereRadius = 0x5b4; // float
		constexpr auto BoxExtent = 0x5b8; // FVector
		constexpr auto AllowedInteractableTypes = 0x5c8; // TArray<FAllowedInteractableTypes>
		constexpr auto OnInitialiseComplexCollisionShapesDelegate = 0x5d8; // FScriptMulticastDelegate
		constexpr auto OnRadiusCollisionOverlapBeginDelegate = 0x5e8; // FScriptMulticastDelegate
		constexpr auto OnRadiusCollisionOverlapEndDelegate = 0x5f8; // FScriptMulticastDelegate
		constexpr auto OnFirstActorEnteredRadiusCollisionDelegate = 0x608; // FScriptMulticastDelegate
		constexpr auto OnLastActorLeftRadiusCollisionDelegate = 0x618; // FScriptMulticastDelegate
		constexpr auto OnComplexCollisionOverlapBeginDelegate = 0x628; // FScriptMulticastDelegate
		constexpr auto OnComplexCollisionOverlapEndDelegate = 0x638; // FScriptMulticastDelegate
		constexpr auto ComplexCollisionShapes = 0x648; // TArray<UPrimitiveComponent*>
	}

	namespace n_UNPCHintDialogueClueCreator { // : ULandClueCreator
		constexpr auto NPCMappingAsset = 0x30; // UExistingToPhasedNPCIndexAssetMap*
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMin = 0x38; // int32_t
		constexpr auto LootItemSpawnXYDistanceFromClueIncrementMax = 0x3c; // int32_t
		constexpr auto LootItemSpawnZOffset = 0x40; // int32_t
	}

	namespace n_UMaterialExpressionParticleSpeed { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UActorSpawnData { // : UItemSpawnData
		constexpr auto ActorClass = 0x58; // UClass*
	}

	namespace n_ATestLevelScriptActor { // : ALevelScriptActor
		constexpr auto Category = 0x3e0; // ETestCategory
		constexpr auto Area = 0x3e1; // ETestArea
		constexpr auto VisualTest = 0x3e2; // bool
		constexpr auto RunInEditor = 0x3e3; // bool
		constexpr auto RunOnServer = 0x3e4; // bool
		constexpr auto RequiresServices = 0x3e5; // bool
		constexpr auto AdditionalMetadata = 0x3e8; // TArray<FTestLevelMetadataEntry>
		constexpr auto CaptureType = 0x3f8; // EPerformanceCaptureType
		constexpr auto PlayModeOverride = 0x3f9; // ETestAutomationPlayModeOverride
		constexpr auto TestTimeout = 0x3fc; // float
		constexpr auto TestPausedTimeout = 0x400; // float
		constexpr auto VerboseLogCategories = 0x408; // TArray<FString>
		constexpr auto ClientsRunning = 0x418; // TArray<int32_t>
		constexpr auto ClientIds = 0x428; // TArray<int32_t>
		constexpr auto ClientPawns = 0x438; // TArray<FClientPawnDetails>
		constexpr auto SpawnedActors = 0x448; // TArray<AActor*>
		constexpr auto NextSpawnedActorIndex = 0x458; // int32_t
	}

	namespace n_USpawnPhasedActorAtLocationStepDesc { // : USpawnPhasedActorWithTransformStepBaseDesc
		constexpr auto Location = 0xf0; // FQuestVariableTransform
	}

	namespace n_UBucketItemCategory { // : UEquipmentItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UStorageContainerComponentData { // : UDataAsset
		constexpr auto CloseInteractionExemptHealthChangeReasons = 0x28; // TArray<EHealthChangedReason>
		constexpr auto BeginQuickGiveSFX = 0x38; // UWwiseEvent*
		constexpr auto EndQuickGiveSFX = 0x40; // UWwiseEvent*
		constexpr auto BeginQuickTakeSFX = 0x48; // UWwiseEvent*
		constexpr auto EndQuickTakeSFX = 0x50; // UWwiseEvent*
	}

	namespace n_UClueFactory { // : UObject
		constexpr auto Config = 0x28; // UClueFactoryConfig*
	}

	namespace n_UIslandItemDataAsset { // : UGeneratedLocationsDataAsset
		constexpr auto SpawnLocations = 0x38; // TArray<FIslandItemSpawnLocationData>
	}

	namespace n_UMaterialExpressionBlackBody { // : UMaterialExpression
		constexpr auto Temp = 0x70; // FExpressionInput
	}

	namespace n_UNPCDialogPredicateInAIDialogueState { // : UNPCDialogPredicate
		constexpr auto ActorIdx = 0x38; // int32_t
		constexpr auto DialogueState = 0x3c; // FName
	}

	namespace n_UChecklistMapSettings { // : UDeveloperSettings
		constexpr auto ChecklistMapItemDescClass = 0x38; // FStringAssetReference
	}

	namespace n_UFOVHandlerItemActionEffect { // : UItemActionEffect
		constexpr auto BlendSpeed = 0x28; // float
		constexpr auto AimFOV = 0x2c; // float
	}

	namespace n_AShipAudio { // : AActor
		constexpr auto ParentShip = 0x3e8; // AShip*
	}

	namespace n_USpacer { // : UWidget
		constexpr auto Size = 0x138; // FVector2D
	}

	namespace n_UAnimSequence { // : UAnimSequenceBase
		constexpr auto NumFrames = 0x78; // int32_t
		constexpr auto TrackToSkeletonMapTable = 0x80; // TArray<FTrackToSkeletonMap>
		constexpr auto TranslationData = 0xa0; // TArray<FTranslationTrack>
		constexpr auto RotationData = 0xb0; // TArray<FRotationTrack>
		constexpr auto ScaleData = 0xc0; // TArray<FScaleTrack>
		constexpr auto TranslationCompressionFormat = 0xd0; // AnimationCompressionFormat
		constexpr auto RotationCompressionFormat = 0xd1; // AnimationCompressionFormat
		constexpr auto ScaleCompressionFormat = 0xd2; // AnimationCompressionFormat
		constexpr auto CompressedTrackOffsets = 0xd8; // TArray<int32_t>
		constexpr auto CompressedScaleOffsets = 0xe8; // FCompressedOffsetData
		constexpr auto KeyEncodingFormat = 0x110; // AnimationKeyFormat
		constexpr auto AdditiveAnimType = 0x130; // EAdditiveAnimationType
		constexpr auto RefPoseType = 0x131; // EAdditiveBasePoseType
		constexpr auto RefPoseSeq = 0x138; // UAnimSequence*
		constexpr auto RefFrameIndex = 0x140; // int32_t
		constexpr auto EncodingPkgVersion = 0x144; // int32_t
		constexpr auto RetargetSource = 0x148; // FName
		constexpr auto bEnableRootMotion = 0x150; // bool
		constexpr auto RootMotionRootLock = 0x151; // ERootMotionRootLock
		constexpr auto bRootMotionSettingsCopiedFromMontage = 0x152; // bool
	}

	namespace n_UGrantPagesStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_USetSpawnProgressStepDesc { // : UTaleQuestStepDesc
		constexpr auto TriggerVolume = 0x80; // FQuestVariableActor
	}

	namespace n_UReactStateMappingsDataAsset { // : UDataAsset
		constexpr auto ReactMappings = 0x28; // TArray<FReactStateMapping>
	}

	namespace n_UNarratedShipDirectionComponent { // : UNarratedCompassDirectionComponent
		constexpr auto YawThreshold = 0xe8; // float
		constexpr auto CachedOrientationInterface = 0x218; // TScriptInterface<Class>
		constexpr auto Wielder = 0x228; // AActor*
		constexpr auto ObjectMessagingDispatcher = 0x230; // TScriptInterface<Class>
		constexpr auto CachedHUDMessagingDispatcher = 0x240; // TScriptInterface<Class>
	}

	namespace n_UWieldableFishingRodAnimationInstance { // : UWieldableItemAnimationInstance
		constexpr auto ReelSpeed = 0x630; // float
		constexpr auto RodBend = 0x634; // FVector2D
		constexpr auto RodBendAnimation = 0x640; // UBlendSpace*
		constexpr auto ReelAnimation = 0x648; // UAnimSequence*
		constexpr auto CurrentFishingState = 0x650; // EFishingState
		constexpr auto IsFishHookedAndVisible = 0x651; // bool
		constexpr auto CurrentFishingJIPState = 0x652; // EFishingState
	}

	namespace n_UFishSpawnParamsDataAsset { // : UDataAsset
		constexpr auto TimeOfDay = 0x28; // EFishSpawnTimeOfDay
		constexpr auto InPool = 0x29; // bool
		constexpr auto CloseToActiveFortOrSkellyShip = 0x2a; // bool
		constexpr auto InStorm = 0x2b; // bool
		constexpr auto CloseToShipwreck = 0x2c; // bool
		constexpr auto Sea = 0x30; // USeaId*
		constexpr auto Islands = 0x38; // UVoyageLocationOnlyNamedIslandListDataAsset*
		constexpr auto BaitType = 0x40; // EBaitType
		constexpr auto CatchWeight = 0x44; // float
		constexpr auto FishName = 0x48; // FName
		constexpr auto FishTypes = 0x50; // TArray<FFishSizeAndType>
		constexpr auto SizeWeights = 0x60; // UFishSizeWeightsDataAsset*
	}

	namespace n_ACrewService { // : AActor
		constexpr auto Crews = 0x4a8; // TArray<FCrew>
	}

	namespace n_UJwtAuthenticationTokenEditorSettings { // : UObject
		constexpr auto TokenSecretKey = 0x28; // FString
	}

	namespace n_UContextualTutorialComponent { // : UActorComponent
		constexpr auto ContextualTutorialClasses = 0xc8; // TArray<FContextualTutorialPromptDesc>
		constexpr auto SpawnedPromptActors = 0xd8; // TArray<AActor*>
	}

	namespace n_UInputComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UItemPreviewDataObject { // : UObject
		constexpr auto RequestedAssetReference = 0x30; // FStringAssetReference
		constexpr auto RequestedItemDesc = 0x40; // TWeakObjectPtr<UItemDesc>
		constexpr auto CurrentPreviewAssetReference = 0x48; // FStringAssetReference
	}

	namespace n_AAthenaTextRender { // : AStaticMeshActor
		constexpr auto Text = 0x3e0; // FText
		constexpr auto TextDesc = 0x418; // FTreasureMapWidgetText
		constexpr auto CanvasWidth = 0x438; // int32_t
		constexpr auto CanvasHeight = 0x43c; // int32_t
		constexpr auto Font = 0x440; // UFont*
		constexpr auto FontScale = 0x448; // FVector2D
		constexpr auto FontLineSpacingScale = 0x450; // float
		constexpr auto AthenaTextRenderTarget = 0x460; // UCanvasRenderTarget2D*
	}

	namespace n_URadialAction { // : UObject
		constexpr auto InputID = 0x28; // UNotificationInputId*
	}

	namespace n_UShantyCategory { // : UCategoryBase
		constexpr auto Name = 0x28; // FText
		constexpr auto UniqueTextIdentifier = 0x60; // FName
		constexpr auto IconPath = 0x68; // FStringAssetReference
	}

	namespace n_UParticleModuleColorScaleOverLife { // : UParticleModuleColorBase
		constexpr auto ColorScaleOverLife = 0x50; // FRawDistributionVector
		constexpr auto AlphaScaleOverLife = 0x88; // FRawDistributionFloat
		constexpr auto bEmitterTime = 0xc0; // char : 1
	}

	namespace n_UPreSpawnMusicZoneSpawnerStrategy { // : USpawnerBehaviourStrategy
		constexpr auto PreSpawnMusicZoneActor = 0x48; // AActor*
		constexpr auto PostSpawnMusicZoneActor = 0x50; // AActor*
		constexpr auto ShouldPlayBattleWonSting = 0x58; // bool
		constexpr auto ShouldStopMusicZoneWhenWaveCompleted = 0x59; // bool
		constexpr auto SpawnedActor = 0x60; // AActor*
		constexpr auto MusicZoneComponent = 0x68; // UMusicZoneComponent*
	}

	namespace n_UPhysicsConstraintComponent { // : USceneComponent
		constexpr auto ConstraintActor1 = 0x2b0; // AActor*
		constexpr auto ComponentName1 = 0x2b8; // FConstrainComponentPropName
		constexpr auto ConstraintActor2 = 0x2c0; // AActor*
		constexpr auto ComponentName2 = 0x2c8; // FConstrainComponentPropName
		constexpr auto ConstraintSetup = 0x2e0; // UPhysicsConstraintTemplate*
		constexpr auto OnConstraintBroken = 0x2e8; // FScriptMulticastDelegate
		constexpr auto ConstraintInstance = 0x300; // FConstraintInstance
	}

	namespace n_UMobileInstancedStaticMeshComponent { // : UStaticMeshComponent
		constexpr auto MaxInstances = 0x5f0; // int32_t
		constexpr auto InstanceTransforms = 0x600; // TArray<FTransform>
		constexpr auto InstanceMatrices = 0x610; // TArray<FMatrix>
		constexpr auto LocalBounds = 0x620; // FBoxSphereBounds
		constexpr auto bBoundsBuilt = 0x63c; // bool
		constexpr auto PhysicsSerializer = 0x640; // UPhysicsSerializer*
	}

	namespace n_UHangerComponent { // : USceneComponent
		constexpr auto Mass = 0x2b0; // float
		constexpr auto LimitConeAngle = 0x2b4; // float
		constexpr auto XAxisMotionScale = 0x2b8; // float
		constexpr auto YAxisMotionScale = 0x2bc; // float
	}

	namespace n_UViewModelComponentBase { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UGlitterBeardTelemetryComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_UInstancedNavMeshesDataAsset { // : UDataAsset
		constexpr auto InstancedNavMeshes = 0x28; // TArray<FInstancedNavMesh>
	}

	namespace n_UEnvQueryGenerator_KrakenTentacleSpawnLocations { // : UEnvQueryGenerator
		constexpr auto OptionName = 0x30; // FString
		constexpr auto NonShippingOnly = 0x40; // bool
		constexpr auto ItemType = 0x48; // UEnvQueryItemType*
	}

	namespace n_ADebugCameraController { // : APlayerController
		constexpr auto bUseOriginalPlayerHUD = 0x728; // char : 1
		constexpr auto bShowSelectedInfo = 0x728; // char : 1
		constexpr auto bIsFrozenRendering = 0x728; // char : 1
		constexpr auto DrawFrustum = 0x730; // UDrawFrustumComponent*
		constexpr auto OriginalControllerRef = 0x748; // APlayerController*
		constexpr auto OriginalPlayer = 0x750; // UPlayer*
		constexpr auto SpeedScale = 0x758; // float
		constexpr auto InitialMaxSpeed = 0x75c; // float
		constexpr auto InitialAccel = 0x760; // float
		constexpr auto InitialDecel = 0x764; // float
		constexpr auto SpeedScaleAdjustment = 0x768; // float
		constexpr auto FovScaleAdjustment = 0x76c; // float
	}

	namespace n_UFireworkItemCategory_C { // : UFireworkItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UWieldingParamsAsset { // : UDataAsset
		constexpr auto WieldDuration = 0x28; // float
		constexpr auto InvalidMidWieldInputs = 0x30; // TArray<UNotificationInputId*>
	}

	namespace n_UTaleQuestParallelForeachStepDesc { // : UTaleQuestStepDesc
		constexpr auto Count = 0x80; // uint32_t
		constexpr auto CanEditCount = 0x84; // bool
		constexpr auto InputMappings = 0x88; // TMap<FName, FName>
		constexpr auto BodyDesc = 0xd8; // UTaleQuestStepDesc*
		constexpr auto Generator = 0xe0; // UTaleQuestParallelForeachStep*
		constexpr auto Variables = 0xe8; // UScriptStruct*
	}

	namespace n_UAIEmergentCaptainSpawner { // : UAIPerCrewSpawner
		constexpr auto NamedAIDataAsset = 0x568; // UNamedAIDataAsset*
	}

	namespace n_UBoneMaskFilter { // : UObject
		constexpr auto BlendPoses = 0x28; // TArray<FInputBlendPose>
	}

	namespace n_UContentWidget { // : UPanelWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_ABootyItemInfo { // : ANonStorableItemInfo
		constexpr auto BootyType = 0x528; // EBootyTypes
		constexpr auto Id = 0x52c; // FGuid
		constexpr auto PlayedFirstTimeEquipSfx = 0x53c; // bool
		constexpr auto HandInPlayerStats = 0x540; // TArray<FPlayerStat>
		constexpr auto HandInStolenPlayerStats = 0x550; // TArray<FPlayerStat>
		constexpr auto HandInStolenFromPlayerStats = 0x560; // TArray<FPlayerStat>
		constexpr auto HandInGiftPlayerStats = 0x570; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendPlayerStats = 0x580; // TArray<FPlayerStat>
		constexpr auto HandInOnSchedulePlayerStats = 0x590; // TArray<FPlayerStat>
		constexpr auto HandInAsPirateLegendOnSchedulePlayerStats = 0x5a0; // TArray<FPlayerStat>
		constexpr auto HandInAsEmissaryPlayerStats = 0x5b0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInAsMaxLevelEmissaryPlayerStats = 0x5c0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsEmissaryPlayerStats = 0x5d0; // TArray<FEmissaryBootyItemStats>
		constexpr auto HandInStolenAsMaxLevelEmissaryPlayerStats = 0x5e0; // TArray<FEmissaryBootyItemStats>
		constexpr auto UsePlayerStats = 0x5f0; // TArray<FPlayerStat>
		constexpr auto UseStolenPlayerStats = 0x600; // TArray<FPlayerStat>
		constexpr auto CompanySpecificStats = 0x610; // FCompanyBootyStatList
		constexpr auto ConditionalHandInStat = 0x620; // FConditionalHandInStat
		constexpr auto DiscoveredPopupDesc = 0x640; // UPopUpMessageDesc*
		constexpr auto SellPrerequisites = 0x648; // FBootyItemSellPrerequisites
		constexpr auto TrackedOwnerComponent = 0x658; // UTrackedOwnerComponent*
		constexpr auto ItemQualityComponent = 0x660; // UItemQualityComponent*
		constexpr auto ItemQualityLevel = 0x668; // EEmissaryQualityLevel
		constexpr auto CompanySpecificItemQualityLevel = 0x670; // TArray<FPerComanyItemQualityEntry>
		constexpr auto HandInRewardId = 0x680; // FRewardId
		constexpr auto HandInRewardIdCompanySpecific = 0x688; // TArray<FCompanySpecificBootyReward>
		constexpr auto RewardToOwnCrewOnly = 0x698; // bool
		constexpr auto Rarity = 0x69c; // FName
		constexpr auto DeliverableComponent = 0x6c0; // UDeliverableComponent*
		constexpr auto CrewOwnershipTrackingComponent = 0x6c8; // UCrewOwnershipTrackingComponent*
		constexpr auto BootyItemShipOwnershipComponent = 0x6d0; // UBootyItemShipOwnershipComponent*
		constexpr auto SpawnSource = 0x6d8; // ESpawnedItemSource
	}

	namespace n_UMegalodonSoulInteractableComponent { // : UInteractableComponent
		constexpr auto DisplayName = 0x128; // FText
		constexpr auto TakeSoulTooltipText = 0x160; // FText
		constexpr auto EffigyNotRaisedToolTipText = 0x198; // FText
		constexpr auto NotWieldingEffigyTooltipText = 0x1d0; // FText
		constexpr auto CannotEnchantEffigyTooltipText = 0x208; // FText
		constexpr auto MegalodonSoulType = 0x240; // ETinySharkTypes
		constexpr auto ActivationInput = 0x248; // UNotificationInputId*
	}

	namespace n_UBehaviorTreeComponent { // : UBrainComponent
		constexpr auto NodeInstances = 0x148; // TArray<UBTNode*>
	}

	namespace n_UBaseWaterComponent { // : UPrimitiveComponent
		constexpr auto WaterId = 0x588; // UWaterId*
		constexpr auto ActiveInExclusionZone = 0x590; // bool
	}

	namespace n_UStatusResponseAIShipClampMaxTurnAngle { // : UStatusResponse
		constexpr auto ClampedMaxTurnAngle = 0x30; // float
	}

	namespace n_UIsActorTypeStatCondition { // : UTargetedStatCondition
		constexpr auto TargetActorClasses = 0x30; // TArray<UObject*>
	}

	namespace n_UVeilService { // : UTaleQuestService
		constexpr auto World = 0x80; // UWorld*
		constexpr auto GameState = 0x88; // AGameState*
		constexpr auto TrackedVeil = 0x98; // AVeilOfTheAncients*
		constexpr auto Ship = 0xa0; // AShip*
	}

	namespace n_UTaleQuestSetCompassTargetToActorStepDesc { // : UTaleQuestSetCompassTargetBaseStepDesc
		constexpr auto TargetActor = 0x88; // FQuestVariableActor
	}

	namespace n_UAIDataProvider_QueryParamFromCustomObjectProperty { // : UAIDataProvider
		constexpr auto ObjectProperty = 0x28; // FCustomDataProviderObjectPropertySelector
		constexpr auto FloatValue = 0x38; // float
		constexpr auto IntValue = 0x3c; // int32_t
		constexpr auto BoolValue = 0x40; // bool
	}

	namespace n_UAICharacterPartsDesc { // : UMeshMemoryConstraintsAIPartsDesc
		constexpr auto KilledVfxTemplate = 0x80; // FStringAssetReference
	}

	namespace n_UClearProgressSpawnStepDesc { // : UTaleQuestStepDesc
		constexpr auto Fork = 0x28; // bool
		constexpr auto PromotedPropertyVariables = 0x30; // TMap<FName, FQuestVariableAny>
	}

	namespace n_UCanvasPanel { // : UPanelWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_AGameplayAbilityTargetActor_GroundTrace { // : AGameplayAbilityTargetActor_Trace
		constexpr auto CollisionRadius = 0x500; // float
		constexpr auto CollisionHeight = 0x504; // float
	}

	namespace n_UNPCDialogOptionFireTutorialEvent { // : UNPCDialogOption
		constexpr auto TutorialStep = 0x80; // ETutorialDialogStep
		constexpr auto Text = 0x88; // FText
		constexpr auto CloseOnExectuted = 0xc0; // bool
		constexpr auto LinkedDialog = 0xc4; // int32_t
		constexpr auto RelevantOnServer = 0xc8; // bool
	}

	namespace n_UGhostAIFormComponent { // : UAthenaAIFormComponent
		constexpr auto VfxCustomisations = 0xd0; // TArray<FAthenaAIFormComponentVfxCustomisation>
		constexpr auto FormData = 0xe0; // UAthenaAIFormDataAsset*
		constexpr auto HitReactionsLayer = 0xe8; // UCharacterHitReactionDamagerTypeToAnimTypeLayer*
	}

	namespace n_UMaterialExpressionDotProduct { // : UMaterialExpression
		constexpr auto A = 0x70; // FExpressionInput
		constexpr auto B = 0xa8; // FExpressionInput
	}

	namespace n_UParticleModuleAttractorLine { // : UParticleModuleAttractorBase
		constexpr auto EndPoint0 = 0x50; // FVector
		constexpr auto EndPoint1 = 0x5c; // FVector
		constexpr auto Range = 0x68; // FRawDistributionFloat
		constexpr auto Strength = 0xa0; // FRawDistributionFloat
	}

	namespace n_UAthenaAIInteractableComponent { // : UAIInteractableComponent
		constexpr auto Moveable = 0x100; // bool
		constexpr auto InteractableRelativeVectorToSpawnPos = 0x104; // FVector
		constexpr auto TriggerSphereCentreOffset = 0x110; // FVector
		constexpr auto TriggerSphereRadiusOffset = 0x11c; // float
		constexpr auto TimeToCacheLastBestTargetResult = 0x120; // float
		constexpr auto OwnerAITeam = 0x124; // EAthenaAITeam
	}

	namespace n_AMapTable { // : AActor
		constexpr auto TableMeshComponent = 0x3e8; // UStaticMeshComponent*
		constexpr auto MousePanSpeed = 0x3f0; // float
		constexpr auto MouseZoomSpeed = 0x3f4; // float
		constexpr auto PanSpeedMinZoom = 0x3f8; // float
		constexpr auto PanSpeedMaxZoom = 0x3fc; // float
		constexpr auto ZoomSpeed = 0x400; // float
		constexpr auto MinZoom = 0x404; // float
		constexpr auto MaxZoom = 0x408; // float
		constexpr auto InitialZoom = 0x40c; // float
		constexpr auto RemoteBlendTime = 0x410; // float
		constexpr auto RemotePanSettleRange = 0x414; // float
		constexpr auto RemoteZoomSettleRange = 0x418; // float
		constexpr auto DrunknessStaggerScalarWhileUsing = 0x41c; // float
		constexpr auto MaxPins = 0x420; // int32_t
		constexpr auto PinToggleDist = 0x424; // float
		constexpr auto MaxTrail = 0x428; // int32_t
		constexpr auto MinDistPerTrailDrop = 0x42c; // float
		constexpr auto TimePerTrailUpdate = 0x430; // float
		constexpr auto MapTablePool = 0x438; // UWwiseObjectPoolWrapper*
		constexpr auto JoinTableSfx = 0x440; // UWwiseEvent*
		constexpr auto LeaveTableSfx = 0x448; // UWwiseEvent*
		constexpr auto PlayMoveMapSfx = 0x450; // UWwiseEvent*
		constexpr auto StopMoveMapSfx = 0x458; // UWwiseEvent*
		constexpr auto PlacePinSfx = 0x460; // UWwiseEvent*
		constexpr auto RemovePinSfx = 0x468; // UWwiseEvent*
		constexpr auto ShowTaleSfx = 0x470; // UWwiseEvent*
		constexpr auto HideTaleSfx = 0x478; // UWwiseEvent*
		constexpr auto HighlightTaleMarkerSfx = 0x480; // UWwiseEvent*
		constexpr auto TrackedBootyItemsUpdateInterval = 0x488; // float
		constexpr auto TrackedShipsUpdateInterval = 0x48c; // float
		constexpr auto TrackedShipDistanceThreshold = 0x490; // float
		constexpr auto ReapersMarkFlag = 0x498; // UShipCustomizationDesc*
		constexpr auto DynamicMaterial = 0x4a0; // UMaterialInstanceDynamic*
		constexpr auto ExpandedMapMaterial = 0x4a8; // UMaterialInterface*
		constexpr auto BaseMapMaterial = 0x4b0; // UMaterialInterface*
		constexpr auto TopMargin = 0x4b8; // float
		constexpr auto RightMargin = 0x4bc; // float
		constexpr auto BottomMargin = 0x4c0; // float
		constexpr auto LeftMargin = 0x4c4; // float
		constexpr auto ServerCentreLocation = 0x4c8; // FVector2D
		constexpr auto ServerZoomLevel = 0x4d0; // float
		constexpr auto ControllerQueue = 0x4d8; // TArray<AActor*>
		constexpr auto MapPins = 0x4e8; // TArray<FVector2D>
		constexpr auto TrackedShips = 0x4f8; // TArray<FWorldMapShipLocation>
		constexpr auto TrackedBootyItemInfos = 0x508; // TArray<FReapersMarkTrackedBootyItemInfo>
		constexpr auto BoundaryData = 0x518; // FLinearColor
		constexpr auto AllianceOverlayIcon = 0x528; // UTexture*
		constexpr auto CachedPlaymode = 0x750; // EPlayMode
		constexpr auto MapTableTutorialHandler = 0x768; // FMapTableTutorialHandler
	}

	namespace n_UIsWieldingItemOfTypeStatCondition { // : UTargetedStatCondition
		constexpr auto TargetItemCategories = 0x30; // TArray<UItemCategory*>
	}

	namespace n_UFortIslandDataDefaultAssetEntry { // : UIslandDataDefaultAssetEntry
		constexpr auto AISpawnerWhenFortActive = 0x78; // UAISpawner*
		constexpr auto CannonsAISpawnerWhenFortActive = 0x80; // UAISpawner*
	}

	namespace n_UCursedCannonballItemCategory_C { // : UCannonballItemCategory_C
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UBookTaleQuestServiceDesc { // : UTaleQuestToolServiceDesc
		constexpr auto QuestBookDesc = 0x30; // UQuestBookItemDesc*
	}

	namespace n_UTaleAggressiveGhostShipEncounterServiceDesc { // : UTaleQuestServiceDesc
		constexpr auto AggressiveGhostShipEncounterParams = 0x28; // UAggressiveGhostShipsEncounterParams*
	}

	namespace n_UMaterialExpressionObjectOrientation { // : UMaterialExpression
		constexpr auto Material = 0x28; // UMaterial*
		constexpr auto Function = 0x30; // UMaterialFunction*
		constexpr auto Desc = 0x38; // FString
		constexpr auto BorderColor = 0x48; // FColor
		constexpr auto bRealtimePreview = 0x4c; // char : 1
		constexpr auto bNeedToUpdatePreview = 0x4c; // char : 1
		constexpr auto bIsParameterExpression = 0x4c; // char : 1
		constexpr auto bCommentBubbleVisible = 0x4c; // char : 1
		constexpr auto bShowOutputNameOnPin = 0x4c; // char : 1
		constexpr auto bHidePreviewWindow = 0x4c; // char : 1
		constexpr auto bCollapsed = 0x4c; // char : 1
		constexpr auto bShaderInputData = 0x4c; // char : 1
		constexpr auto bShowInputs = 0x4d; // char : 1
		constexpr auto bShowOutputs = 0x4d; // char : 1
		constexpr auto MenuCategories = 0x50; // TArray<FText>
		constexpr auto Outputs = 0x60; // TArray<FExpressionOutput>
	}

	namespace n_UHoldToUseInputVisualModifier_RandomiseAlternate { // : UHoldToUseInputVisualModifier
		constexpr auto ChanceForAlternate = 0x28; // float
	}

	namespace n_UBTDecorator_TargetInRangeOfPoint { // : UBTDecorator_TargetInRange
		constexpr auto ReferencePointKey = 0x108; // FBlackboardKeySelector
	}

	namespace n_UBTTask_CharacterRotateToFaceBBEntry { // : UBTTask_RotateToFaceBBEntry
		constexpr auto Precision = 0x88; // float
	}

	namespace n_AStreamingProbe { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UParticleModuleColorBase { // : UParticleModule
		constexpr auto bSpawnModule = 0x28; // char : 1
		constexpr auto bUpdateModule = 0x28; // char : 1
		constexpr auto bFinalUpdateModule = 0x28; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x28; // char : 1
		constexpr auto bCurvesAsColor = 0x28; // char : 1
		constexpr auto b3DDrawMode = 0x28; // char : 1
		constexpr auto bSupported3DDrawMode = 0x28; // char : 1
		constexpr auto bEnabled = 0x28; // char : 1
		constexpr auto bEditable = 0x29; // char : 1
		constexpr auto LODDuplicate = 0x29; // char : 1
		constexpr auto bSupportsRandomSeed = 0x29; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x29; // char : 1
		constexpr auto LODValidity = 0x2c; // char
		constexpr auto ModuleInstanceOffsets = 0x30; // TArray<int32_t>
		constexpr auto ModuleOffsets = 0x40; // TArray<int32_t>
	}

	namespace n_UStatusResponseToggleCapstan { // : UStatusResponse
		constexpr auto DurationToToggleCapstan = 0x30; // float
	}

	namespace n_UPlayerAtmosphericsAudioComponentParams { // : UDataAsset
		constexpr auto WindStartEvent = 0x28; // UWwiseEvent*
		constexpr auto WindStopEvent = 0x30; // UWwiseEvent*
		constexpr auto RainStartEvent = 0x38; // UWwiseEvent*
		constexpr auto RainStopEvent = 0x40; // UWwiseEvent*
		constexpr auto GlobalWindSpeedRtpc = 0x48; // FName
		constexpr auto PlayerWindAngleRtpc = 0x50; // FName
		constexpr auto PlayerVerticalSpeedRtpc = 0x58; // FName
		constexpr auto AtmosphericPressureFreqRtpc = 0x60; // FName
		constexpr auto AtmosphericPressureVolRtpc = 0x68; // FName
		constexpr auto AtmosphericPressureFreqTimebase = 0x70; // float
		constexpr auto AtmosphericPressureVolTimebase = 0x74; // float
		constexpr auto PoolDensityWrapperData = 0x78; // TArray<FPoolDensityData>
	}

	namespace n_UFont { // : UObject
		constexpr auto FontCacheType = 0x30; // EFontCacheType
		constexpr auto Characters = 0x38; // TArray<FFontCharacter>
		constexpr auto Textures = 0x48; // TArray<UTexture2D*>
		constexpr auto IsRemapped = 0x58; // int32_t
		constexpr auto EmScale = 0x5c; // float
		constexpr auto Ascent = 0x60; // float
		constexpr auto Descent = 0x64; // float
		constexpr auto Leading = 0x68; // float
		constexpr auto Kerning = 0x6c; // int32_t
		constexpr auto ImportOptions = 0x70; // FFontImportOptionsData
		constexpr auto NumCharacters = 0x120; // int32_t
		constexpr auto MaxCharHeight = 0x128; // TArray<int32_t>
		constexpr auto ScalingFactor = 0x138; // float
		constexpr auto LegacyFontSize = 0x13c; // int32_t
		constexpr auto LegacyFontName = 0x140; // FName
		constexpr auto CompositeFont = 0x148; // FCompositeFont
	}

	namespace n_UWorld { // : UObject
		constexpr auto PersistentLevel = 0x30; // ULevel*
		constexpr auto NetDriver = 0x38; // UNetDriver*
		constexpr auto LineBatcher = 0x40; // ULineBatchComponent*
		constexpr auto PersistentLineBatcher = 0x48; // ULineBatchComponent*
		constexpr auto ForegroundLineBatcher = 0x50; // ULineBatchComponent*
		constexpr auto GameState = 0x58; // AGameState*
		constexpr auto NetworkManager = 0x60; // AGameNetworkManager*
		constexpr auto PhysicsCollisionHandler = 0x68; // UPhysicsCollisionHandler*
		constexpr auto ExtraReferencedObjects = 0x70; // TArray<UObject*>
		constexpr auto PerModuleDataObjects = 0x80; // TArray<UObject*>
		constexpr auto StreamingLevels = 0x90; // TArray<ULevelStreaming*>
		constexpr auto StreamingLevelsPrefix = 0xa0; // FString
		constexpr auto CurrentLevelPendingVisibility = 0xb0; // ULevel*
		constexpr auto MyParticleEventManager = 0xb8; // AParticleEventManager*
		constexpr auto DefaultPhysicsVolume = 0xc0; // APhysicsVolume*
		constexpr auto DirtyStreamingLevels = 0xc8; // TArray<ULevelStreaming*>
		constexpr auto Feature = 0xf4; // FName
		constexpr auto FeatureReferences = 0x100; // TArray<FName>
		constexpr auto ParticleLOD_bUseGameThread = 0x110; // bool
		constexpr auto ParticleLOD_bUseMultipleViewportCase = 0x111; // bool
		constexpr auto ParticleLOD_PlayerViewpointLocation = 0x114; // FVector
		constexpr auto TestMetadata = 0x120; // FString
		constexpr auto NavigationSystem = 0x130; // UNavigationSystem*
		constexpr auto AuthorityGameMode = 0x138; // AGameMode*
		constexpr auto AISystem = 0x140; // UAISystemBase*
		constexpr auto AvoidanceManager = 0x148; // UAvoidanceManager*
		constexpr auto Levels = 0x150; // TArray<ULevel*>
		constexpr auto CurrentLevel = 0x1b0; // ULevel*
		constexpr auto OwningGameInstance = 0x1c0; // UGameInstance*
		constexpr auto ParameterCollectionInstances = 0x1c8; // TArray<UMaterialParameterCollectionInstance*>
		constexpr auto WorldComposition = 0x798; // UWorldComposition*
		constexpr auto bAreConstraintsDirty = 0x7dd; // char : 1
	}

	namespace n_ULoadSequencerAnimationStepDesc { // : UTaleQuestStepDesc
		constexpr auto LevelSequencesToLoad = 0x80; // TArray<ULevelSequence*>
		constexpr auto TargetActorToSpawn = 0x90; // FQuestVariableActor
		constexpr auto LevelSequenceActorSpawnLocation = 0xa0; // FQuestVariableActor
		constexpr auto SequencerCutSceneActor = 0xb0; // FQuestVariableActor
		constexpr auto AttachToTargetActor = 0xc0; // bool
		constexpr auto AttachSocketName = 0xc4; // FName
		constexpr auto PlayGlobally = 0xcc; // bool
	}

	namespace n_UPlayerEntitlementComponent { // : UActorComponent
		constexpr auto ReplicatedEntitlements = 0xd8; // FPlayerEntitlementsCompact
		constexpr auto Entitlements = 0x110; // FPlayerEntitlements
		constexpr auto ReplicatedEntitlementIds = 0x208; // TArray<FEntitlementIdInfo>
		constexpr auto CrewTemporaryEntitlements = 0x370; // TArray<UClass*>
	}

	namespace n_UTaleQuestGenerateCluePointingToSiteStep { // : UTaleQuestStep
		constexpr auto TaleStepDesc = 0x80; // UTaleQuestStepDesc*
	}

	namespace n_UAbandonedNoteClueGenderSpecificTextAsset { // : UDataAsset
		constexpr auto Descriptions = 0x28; // TArray<FGenderSpecificTextPairings>
		constexpr auto DestinationType = 0x38; // UClueDestinationDescriptor*
	}

	namespace n_UObjectReferencer { // : UObject
		constexpr auto ReferencedObjects = 0x28; // TArray<UObject*>
	}

	namespace n_UCurveVector { // : UCurveBase
		constexpr auto FloatCurves = 0x30; // FRichCurve [0x3]
	}

	namespace n_UNavigationDataChunk { // : UObject
		constexpr auto NavigationDataName = 0x28; // FName
	}

	namespace n_UAllianceSettingsAsset { // : UDataAsset
		constexpr auto MaximumAllianceDistance = 0x28; // float
		constexpr auto PollDelay = 0x2c; // float
		constexpr auto OfferFlag = 0x30; // UShipCustomizationDesc*
		constexpr auto AcceptFlag = 0x38; // UShipCustomizationDesc*
		constexpr auto LeaveFlag = 0x40; // UShipCustomizationDesc*
		constexpr auto AlliancePennantAsset = 0x48; // UAlliancePennantAsset*
	}

	namespace n_UGroupedInteractableAreaComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_ADebugAIManagerService { // : AAIManagerService
		constexpr auto BlockedAIAbilities = 0xb40; // TArray<UAthenaAIAbilityType*>
	}

	namespace n_UAISenseConfig_Blueprint { // : UAISenseConfig
		constexpr auto Implementation = 0x30; // UAISense_Blueprint*
	}

	namespace n_UTradeRouteData { // : UDataAsset
		constexpr auto StartIsland = 0x28; // FIslandSelectionType
		constexpr auto EndIsland = 0x30; // FIslandSelectionType
		constexpr auto RouteCompletionStat = 0x38; // FPlayerStat
		constexpr auto MapOrientation = 0x3c; // ETradeRouteMapOrientation
		constexpr auto TradeRouteMapData = 0x40; // FTradeRouteMapData
	}

	namespace n_URegisterTransientActorStep { // : UTaleQuestStep
		constexpr auto Desc = 0x88; // URegisterTransientActorStepDesc*
	}

	namespace n_AWindService { // : AActor
		constexpr auto GlobalWindSource = 0x3e0; // AWindDirectionalSource*
		constexpr auto CurrentWindAngle = 0x3f8; // float
		constexpr auto CurrentWindMagnitude = 0x3fc; // float
		constexpr auto WindZones = 0x4e8; // TArray<TScriptInterface<Class>>
	}

	namespace n_UUniformGridPanel { // : UPanelWidget
		constexpr auto SlotPadding = 0x150; // FMargin
		constexpr auto MinDesiredSlotWidth = 0x160; // float
		constexpr auto MinDesiredSlotHeight = 0x164; // float
	}

	namespace n_UEmoteIdListingAsset { // : UDataAsset
		constexpr auto EmoteIds = 0x28; // TArray<FName>
	}

	namespace n_UGlitterBeardLanternSoundEffect { // : UEffectBlendObjectBase
		constexpr auto TriggerThreshold = 0x38; // float
		constexpr auto WWisePool = 0x40; // UWwiseObjectPoolWrapper*
		constexpr auto WwiseEvent = 0x48; // UWwiseEvent*
		constexpr auto Emitter = 0x50; // FWwiseEmitter
	}

	namespace n_UMerchantMapLayout { // : UDataAsset
		constexpr auto PickupLocation = 0x28; // FTreasureMapWidgetText
		constexpr auto DeliveryLocation = 0x48; // FTreasureMapWidgetText
		constexpr auto DeliverByTime = 0x68; // FTreasureMapWidgetText
		constexpr auto Items = 0x88; // TArray<FMerchantMapLayoutItem>
		constexpr auto Images = 0x98; // TArray<FTreasureMapWidgetTexture>
		constexpr auto GeneralText = 0xa8; // TArray<FTreasureMapWidgetLocalisedText>
	}

	namespace n_UOceanCrawlerAudioBroadcaster { // : UActorComponent
		constexpr auto AudioDataAsset = 0xc8; // UOceanCrawlerAudioParamsDataAsset*
		constexpr auto CachedOwner = 0xd0; // AActor*
	}

	namespace n_UBTTask_SetAIStrategy { // : UBTTaskNode
		constexpr auto NewStrategy = 0x60; // UAIStrategyId*
	}

	namespace n_USpawnDependentTrackedOwnerComponent { // : UTrackedOwnerComponent
		constexpr auto TrackedOwnerType = 0xd0; // ETrackedOwnerType
	}

	namespace n_UVoyageLocationFixedNamedIslandsWhiteListAsset { // : UDataAsset
		constexpr auto FixedIslandNamesWhiteList = 0x28; // TArray<FName>
	}

	namespace n_ATreasureChestItemProxyStatic { // : ATreasureChestItemProxy
		constexpr auto ShovelEnterSurfaceSfx = 0x7c8; // UWwiseEvent*
		constexpr auto ExhumeStepSfx = 0x7d0; // UWwiseEvent*
		constexpr auto FullyDugUpSfx = 0x7d8; // UWwiseEvent*
		constexpr auto ChestAmbiencePool = 0x7e0; // UWwiseObjectPoolWrapper*
		constexpr auto ChestAmbiencePlay = 0x7e8; // UWwiseEvent*
		constexpr auto ChestAmbienceStop = 0x7f0; // UWwiseEvent*
		constexpr auto DitherComponent = 0x7f8; // UDitherComponent*
		constexpr auto CloseProximityEncounterParams = 0x800; // FEncounterParams
		constexpr auto CachedAudioConfig = 0x810; // UItemDiggingAudioConfig*
	}

	namespace n_UAILoadoutProgressionTypeList { // : UDataAsset
		constexpr auto AllProgressions = 0x28; // TArray<UAILoadoutRankProgression*>
	}

	namespace n_UInGamePremiumShopViewModelComponent { // : UPremiumShopViewModelComponentBase
		constexpr auto PetShopDataAsset = 0x270; // UPetShopDataAsset*
	}

	namespace n_AServiceStatusNotificationsService { // : AActor
		constexpr auto ActiveNotifications = 0x3d8; // TArray<FServiceStatusNotification>
		constexpr auto DefaultUpdateDisplayedMessagesRateSeconds = 0x468; // uint32_t
	}

	namespace n_UAthenaCharacterKnockbackComponentMock { // : UAthenaCharacterKnockbackComponent
		constexpr auto Disabled = 0xd0; // bool
		constexpr auto Character = 0xd8; // AAthenaCharacter*
	}

	namespace n_USkeletalMesh { // : UObject
		constexpr auto Skeleton = 0x50; // USkeleton*
		constexpr auto Bounds = 0x58; // FBoxSphereBounds
		constexpr auto Materials = 0x78; // TArray<FSkeletalMaterial>
		constexpr auto SkelMirrorTable = 0x88; // TArray<FBoneMirrorInfo>
		constexpr auto SkelMirrorAxis = 0x98; // EAxis
		constexpr auto SkelMirrorFlipAxis = 0x99; // EAxis
		constexpr auto LODInfo = 0xa0; // TArray<FSkeletalMeshLODInfo>
		constexpr auto bUseFullPrecisionUVs = 0xb0; // char : 1
		constexpr auto bHasBeenSimplified = 0xb0; // char : 1
		constexpr auto bHasVertexColors = 0xb0; // char : 1
		constexpr auto DeformablesSettings = 0xb8; // TArray<FDeformablesSettings>
		constexpr auto bKeepTessellationAdjacency = 0xc8; // char : 1
		constexpr auto bKeepSkeletalMeshBuffersInMemory = 0xc8; // char : 1
		constexpr auto bEnablePerPolyCollision = 0xc8; // char : 1
		constexpr auto BodySetup = 0xd0; // UBodySetup*
		constexpr auto PhysicsAsset = 0xd8; // UPhysicsAsset*
		constexpr auto Characterization = 0xe0; // UHIKCharacterization*
		constexpr auto DeformablesPhysicsAsset = 0xe8; // UPhysicsAsset*
		constexpr auto StreamingDistanceMultiplier = 0xf0; // float
		constexpr auto StreamingDiscardedTexelRatios = 0xf4; // float
		constexpr auto MorphTargets = 0xf8; // TArray<UMorphTarget*>
		constexpr auto MeshPatchAssets = 0x108; // TArray<UMeshPatchAsset*>
		constexpr auto ClothingAssets = 0x1f0; // TArray<FClothingAssetData>
		constexpr auto AssetUserData = 0x210; // TArray<UAssetUserData*>
		constexpr auto Sockets = 0x228; // TArray<USkeletalMeshSocket*>
	}

	namespace n_UInAppPurchaseQueryCallbackProxy { // : UObject
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_ULogoutCallbackProxy { // : UBlueprintAsyncActionBase
		constexpr auto OnSuccess = 0x28; // FScriptMulticastDelegate
		constexpr auto OnFailure = 0x38; // FScriptMulticastDelegate
	}

	namespace n_URadialContentRule { // : UObject
		constexpr auto RadialTitle = 0x28; // FText
		constexpr auto NotificationInputsToBlock = 0x68; // TArray<UNotificationInputId*>
	}

	namespace n_ANavigationObjectBase { // : AActor
		constexpr auto CapsuleComponent = 0x3d8; // UCapsuleComponent*
		constexpr auto GoodSprite = 0x3e0; // UBillboardComponent*
		constexpr auto BadSprite = 0x3e8; // UBillboardComponent*
		constexpr auto bIsPIEPlayerStart = 0x3f0; // char : 1
	}

	namespace n_UParticleModuleKillOnFFTWater { // : UParticleModuleKillBase
		constexpr auto FFTWaterKillPointLocation = 0x50; // EFFTWaterKillPointLocation
		constexpr auto bUseGroupAFFTWaterKillPointForAllGroups = 0x54; // char : 1
		constexpr auto AdditionalFFTWaterKillPointLocations = 0x58; // EFFTWaterKillPointLocation [0x5]
	}

	namespace n_UWatermarkComponent { // : UActorComponent
		constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x80; // TArray<FName>
		constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
		constexpr auto AssetUserData = 0xb0; // TArray<UAssetUserData*>
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xc1; // char : 1
		constexpr auto bInstanceComponent = 0xc1; // char : 1
		constexpr auto bAutoActivate = 0xc2; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bNeedsLoadForClient = 0xc3; // char : 1
		constexpr auto bNeedsLoadForServer = 0xc3; // char : 1
		constexpr auto TargetNetDormancy = 0xc4; // EComponentNetDormancy
		constexpr auto CreationMethod = 0xc5; // EComponentCreationMethod
	}

	namespace n_AMockCharacterWithAthenaPlayerCharacterMovementComponent { // : ACharacter
		constexpr auto Mesh = 0x448; // USkeletalMeshComponent*
		constexpr auto CharacterMovement = 0x450; // UCharacterMovementComponent*
		constexpr auto CapsuleComponent = 0x458; // UCapsuleComponent*
		constexpr auto BasedMovement = 0x460; // FBasedMovementInfo
		constexpr auto ReplicatedBasedMovement = 0x498; // FBasedMovementInfo
		constexpr auto BaseTranslationOffset = 0x4d0; // FVector
		constexpr auto BaseRotationOffset = 0x4e0; // FQuat
		constexpr auto ReplicatedMovementMode = 0x4f0; // char
		constexpr auto bInBaseReplication = 0x4f1; // bool
		constexpr auto CrouchedEyeHeight = 0x4f4; // float
		constexpr auto bIsCrouched = 0x4f8; // char : 1
		constexpr auto bPressedJump = 0x4f8; // char : 1
		constexpr auto bClientUpdating = 0x4f8; // char : 1
		constexpr auto bClientWasFalling = 0x4f8; // char : 1
		constexpr auto bClientResimulateRootMotion = 0x4f8; // char : 1
		constexpr auto bSimGravityDisabled = 0x4f8; // char : 1
		constexpr auto bServerMoveIgnoreRootMotion = 0x4f8; // char : 1
		constexpr auto JumpKeyHoldTime = 0x4fc; // float
		constexpr auto JumpMaxHoldTime = 0x500; // float
		constexpr auto OnReachedJumpApex = 0x508; // FScriptMulticastDelegate
		constexpr auto OnCharacterMovementUpdated = 0x528; // FScriptMulticastDelegate
		constexpr auto ClientRootMotionParams = 0x540; // FRootMotionMovementParams
		constexpr auto RootMotionRepMoves = 0x580; // TArray<FSimulatedRootMotionReplicatedMove>
		constexpr auto RepRootMotion = 0x590; // FRepRootMotionMontage
	}

	namespace n_AActionStateCreatorDefinition { // : AActor
		constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
		constexpr auto CustomTimeDilation = 0x78; // float
		constexpr auto bAllowRemovalFromServerWhenCollisionMerged = 0x7c; // char : 1
		constexpr auto bAllowRemovalFromServerWhenAutomaticallyInstanced = 0x7c; // char : 1
		constexpr auto bHidden = 0x7c; // char : 1
		constexpr auto bNetTemporary = 0x7c; // char : 1
		constexpr auto bNetStartup = 0x7c; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x7c; // char : 1
		constexpr auto bAlwaysRelevant = 0x7c; // char : 1
		constexpr auto bReplicateMovement = 0x7c; // char : 1
		constexpr auto bTearOff = 0x7d; // char : 1
		constexpr auto bExchangedRoles = 0x7d; // char : 1
		constexpr auto bPendingNetUpdate = 0x7d; // char : 1
		constexpr auto bNetLoadOnClient = 0x7d; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x7d; // char : 1
		constexpr auto bBlockInput = 0x7d; // char : 1
		constexpr auto bCanBeInCluster = 0x7d; // char : 1
		constexpr auto bActorEnableCollision = 0x7e; // char : 1
		constexpr auto bReplicateAttachment = 0x7e; // char : 1
		constexpr auto bReplicates = 0x7e; // char : 1
		constexpr auto OnPreNetOwnershipChange = 0x80; // FScriptMulticastDelegate
		constexpr auto RemoteRole = 0x82; // ENetRole
		constexpr auto Owner = 0x88; // AActor*
		constexpr auto SpawnRestrictions = 0x90; // EActorSpawnRestrictions
		constexpr auto ReplicatedMovement = 0x94; // FRepMovement
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Role = 0x118; // ENetRole
		constexpr auto AutoReceiveInput = 0x11a; // EAutoReceiveInput
		constexpr auto InputPriority = 0x11c; // int32_t
		constexpr auto InputComponent = 0x120; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x128; // float
		constexpr auto NetTag = 0x130; // int32_t
		constexpr auto NetUpdateTime = 0x134; // float
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto NetPriority = 0x13c; // float
		constexpr auto LastNetUpdateTime = 0x140; // float
		constexpr auto NetDriverName = 0x144; // FName
		constexpr auto bAutoDestroyWhenFinished = 0x14c; // char : 1
		constexpr auto bCanBeDamaged = 0x14c; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x14c; // char : 1
		constexpr auto bCollideWhenPlacing = 0x14c; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x14c; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x14c; // char : 1
		constexpr auto SpawnCollisionHandlingMethod = 0x150; // ESpawnActorCollisionHandlingMethod
		constexpr auto Instigator = 0x158; // APawn*
		constexpr auto Children = 0x160; // TArray<AActor*>
		constexpr auto RootComponent = 0x170; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x178; // TArray<AMatineeActor*>
		constexpr auto InitialLifeSpan = 0x188; // float
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x190; // char : 1
		constexpr auto Layers = 0x198; // TArray<FName>
		constexpr auto ParentComponentActor = 0x1a8; // FActorPtr
		constexpr auto ChildComponentActors = 0x1b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto bActorSeamlessTraveled = 0x1c8; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x1c8; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x1c8; // char : 1
		constexpr auto Tags = 0x1d0; // TArray<FName>
		constexpr auto Feature = 0x1e0; // FName
		constexpr auto HiddenEditorViews = 0x1e8; // uint64_t
		constexpr auto OnActorBeginOverlap = 0x1f0; // FScriptMulticastDelegate
		constexpr auto OnActorEndOverlap = 0x1f1; // FScriptMulticastDelegate
		constexpr auto OnActorHit = 0x1f2; // FScriptMulticastDelegate
		constexpr auto OnDestroyed = 0x1f3; // FScriptMulticastDelegate
		constexpr auto OnEndPlay = 0x230; // FScriptMulticastDelegate
		constexpr auto bDoOverlapNotifiesOnLoad = 0x231; // bool
		constexpr auto BlueprintCreatedComponents = 0x328; // TArray<UActorComponent*>
		constexpr auto InstanceComponents = 0x338; // TArray<UActorComponent*>
		constexpr auto ChildActorInterfaceProviders = 0x350; // TArray<AActor*>
		constexpr auto DormancyLingeringInSeconds = 0x3c8; // double
	}

	namespace n_UParticleModuleTypeDataAnimTrail { // : UParticleModuleTypeDataBase
		constexpr auto bDeadTrailsOnDeactivate = 0x50; // char : 1
		constexpr auto bEnablePreviousTangentRecalculation = 0x50; // char : 1
		constexpr auto bTangentRecalculationEveryFrame = 0x50; // char : 1
		constexpr auto TilingDistance = 0x54; // float
		constexpr auto DistanceTessellationStepSize = 0x58; // float
		constexpr auto TangentTessellationStepSize = 0x5c; // float
		constexpr auto WidthTessellationStepSize = 0x60; // float
	}

	namespace n_UAISenseConfig { // : UObject
		constexpr auto MaxAge = 0x28; // float
		constexpr auto bStartsEnabled = 0x2c; // char : 1
	}

	namespace n_USafeZone { // : UContentWidget
		constexpr auto Slots = 0x138; // TArray<UPanelSlot*>
	}

	namespace n_USirenTridentItemCategory { // : UWeaponItemCategory
		constexpr auto NotificationInputId = 0x78; // UNotificationInputId*
	}

	namespace n_UNPCHintDialogueClueDestinationGenerator { // : UClueDestinationGenerator
		constexpr auto RequiredClueSiteDataType = 0x28; // UClueSiteData*
		constexpr auto WeightedSupportedDescriptorTypes = 0x30; // TArray<FWeightedClueDestinationDescriptor>
	}

	namespace n_AServerMigrationSerialisationDetailsTestsMigratableComponentActor { // : AActor
		constexpr auto ComponentWithMigrationMarkup = 0x3d0; // UServerMigrationSerialisationDetailsTestsMigratableComponent*
	}

	namespace n_ATestAthenaPlayerControllerWithAthenaPlayerCameraManager { // : ATestAthenaPlayerController
		constexpr auto LastReceivedForceFeedbackEffect = 0x1488; // UForceFeedbackEffect*
	}

}