namespace off {
	namespace n_AirDropBase { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto LOD = 0x20; // DynamicLOD2
		constexpr auto LOD0MeshRenderer = 0x28; // MeshRenderer
		constexpr auto AudioSource = 0x30; // DistanceBasedAudioSource
		constexpr auto mFadeOutBuffer = 0x38; // MaterialPropertyBlock
		constexpr auto mLastUpdateTime = 0x40; // float
		constexpr auto mFrameCounter = 0x44; // int
		constexpr auto mTargetFrameCounter = 0x48; // int
		constexpr auto mNumberOfHits = 0x4c; // int
		constexpr auto (Carriable)k__BackingField = 0x50; // IAirDropCarriable
		constexpr auto (IsInitialized)k__BackingField = 0x58; // bool
		constexpr auto (IsCarrying)k__BackingField = 0x59; // bool
		constexpr auto (Position)k__BackingField = 0x5c; // Vector3
		constexpr auto (TargetPosition)k__BackingField = 0x68; // Vector3
		constexpr auto (FinishETA)k__BackingField = 0x74; // float
		constexpr auto (NetView)k__BackingField = 0x78; // NetView
		constexpr auto (Transform)k__BackingField = 0x80; // Transform
	}

	namespace n_CacheChildrenQuery { // : ChildrenQuery
		constexpr auto nextInput = 0x60; // XPathNavigator
		constexpr auto elementStk = 0x68; // ClonableStack(XPathNavigator)
		constexpr auto positionStk = 0x70; // ClonableStack(int)
		constexpr auto needInput = 0x78; // bool
	}

	namespace n_MobileAuthenticatedStream { // : AuthenticatedStream
		constexpr auto xobileTlsContext = 0x38; // MobileTlsContext
		constexpr auto lastException = 0x40; // ExceptionDispatchInfo
		constexpr auto asyncHandshakeRequest = 0x48; // AsyncProtocolRequest
		constexpr auto asyncReadRequest = 0x50; // AsyncProtocolRequest
		constexpr auto asyncWriteRequest = 0x58; // AsyncProtocolRequest
		constexpr auto readBuffer = 0x60; // BufferOffsetSize2
		constexpr auto writeBuffer = 0x68; // BufferOffsetSize2
		constexpr auto ioLock = 0x70; // object
		constexpr auto closeRequested = 0x78; // int
		constexpr auto shutdown = 0x7c; // bool
		constexpr auto (SslStream)k__BackingField = 0x80; // SslStream
		constexpr auto (Settings)k__BackingField = 0x88; // MonoTlsSettings
		constexpr auto (Provider)k__BackingField = 0x90; // MonoTlsProvider
		constexpr auto ID = 0x98; // int
	}

	namespace n_EditorAttribute { // : Attribute
		constexpr auto baseTypeName = 0x10; // string
		constexpr auto typeName = 0x18; // string
	}

	namespace n_TraceLoggingTypeInfo {
		constexpr auto name = 0x10; // string
		constexpr auto keywords = 0x18; // EventKeywords
		constexpr auto level = 0x20; // EventLevel
		constexpr auto opcode = 0x24; // EventOpcode
		constexpr auto tags = 0x28; // EventTags
		constexpr auto dataType = 0x30; // Type
	}

	namespace n_TexturePacker_JsonArray.SpriteDataObject {
		constexpr auto frames = 0x10; // List(TexturePacker_JsonArray.Frame)
		constexpr auto meta = 0x18; // TexturePacker_JsonArray.Meta
	}

	namespace n_StaticDistanceBasedLOD { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto LOD0 = 0x20; // List(CustomRenderer)
		constexpr auto LOD1 = 0x28; // List(CustomRenderer)
		constexpr auto LOD0Distance = 0x30; // float
		constexpr auto LOD1Distance = 0x34; // float
		constexpr auto LOD0DistanceSqr = 0x38; // float
		constexpr auto LOD1DistanceSqr = 0x3c; // float
		constexpr auto isActive = 0x40; // bool
		constexpr auto Position = 0x44; // Vector3
		constexpr auto ScreenHeightRaw = 0x50; // float
		constexpr auto ScreenHeight = 0x54; // float
		constexpr auto inFrustum = 0x58; // bool
		constexpr auto m_activeLOD = 0x5c; // int
		constexpr auto m_targetLOD = 0x60; // int
	}

	namespace n_Gameplay {
		constexpr auto ToggleMap = 0x10; // bool
		constexpr auto RunningDot = 0x11; // bool
		constexpr auto ShowPings = 0x12; // bool
		constexpr auto ShowBorders = 0x13; // bool
		constexpr auto AutoReady = 0x14; // bool
		constexpr auto HitMarkers = 0x15; // bool
		constexpr auto DefaultHitMarkerColor = 0x18; // Color
		constexpr auto DefaultHitMarkerOpacity = 0x28; // float
		constexpr auto DefaultHitMarkerVolume = 0x2c; // float
		constexpr auto DefaultHitMarkerFade = 0x30; // float
		constexpr auto DefaultHitMarkerSize = 0x34; // float
		constexpr auto HeadshotHitMarkerColor = 0x38; // Color
		constexpr auto HeadshotHitMarkerOpacity = 0x48; // float
		constexpr auto HeadshotHitMarkerVolume = 0x4c; // float
		constexpr auto HeadshotHitMarkerFade = 0x50; // float
		constexpr auto HeadshotHitMarkerSize = 0x54; // float
		constexpr auto ArmorHitMarkerColor = 0x58; // Color
		constexpr auto ArmorHitMarkerOpacity = 0x68; // float
		constexpr auto ArmorHitMarkerVolume = 0x6c; // float
		constexpr auto ArmorHitMarkerFade = 0x70; // float
		constexpr auto ArmorHitMarkerSize = 0x74; // float
		constexpr auto KillHitMarkerColor = 0x78; // Color
		constexpr auto KillHitMarkerOpacity = 0x88; // float
		constexpr auto KillHitMarkerVolume = 0x8c; // float
		constexpr auto KillHitMarkerFade = 0x90; // float
		constexpr auto KillHitMarkerSize = 0x94; // float
		constexpr auto FriendlyColor = 0x98; // Color
		constexpr auto SquadFriendColor = 0xa8; // Color
		constexpr auto SquadLeaderColor = 0xb8; // Color
		constexpr auto EnemyColor = 0xc8; // Color
		constexpr auto FriendlyIconFade = 0xd8; // float
		constexpr auto SquadFriendIconFade = 0xdc; // float
		constexpr auto SquadLeaderIconFade = 0xe0; // float
		constexpr auto FriendlyIconSize = 0xe4; // float
		constexpr auto SquadFriendIconSize = 0xe8; // float
		constexpr auto SquadLeaderIconSize = 0xec; // float
		constexpr auto AllyObjectiveColor = 0xf0; // Color
		constexpr auto EnemyObjectiveColor = 0x100; // Color
		constexpr auto NeutralObjectiveColor = 0x110; // Color
		constexpr auto FriendlyOutlineIntensity = 0x120; // float
		constexpr auto FriendlyNameTagSize = 0x124; // float
		constexpr auto ShowFPS = 0x128; // bool
		constexpr auto ShowNetworkStats = 0x129; // bool
		constexpr auto PingSize = 0x12c; // float
		constexpr auto FlagSize = 0x130; // float
		constexpr auto FlagOpacity = 0x134; // float
		constexpr auto CrosshairSize = 0x138; // float
		constexpr auto CrosshairOpacity = 0x13c; // float
		constexpr auto CrosshairColor = 0x140; // Color
		constexpr auto ShowButtonKeybindings = 0x150; // bool
		constexpr auto ShowButtonToPingOnFlags = 0x151; // bool
		constexpr auto ShowButtonToPingToHelp = 0x152; // bool
		constexpr auto ChatOpaque = 0x154; // float
		constexpr auto AutoHideChat = 0x158; // bool
		constexpr auto ChatSize = 0x15c; // int
		constexpr auto ShowEnemyVoiceChat = 0x160; // bool
		constexpr auto EnableLocalVoiceChatWhenDown = 0x161; // bool
		constexpr auto MapMainGridColor = 0x164; // Color
		constexpr auto MapMainGridSize = 0x174; // float
		constexpr auto MapChildGridColor = 0x178; // Color
		constexpr auto MapChildGridSize = 0x188; // float
		constexpr auto TankHudColor = 0x18c; // Color
		constexpr auto ApcHudColor = 0x19c; // Color
		constexpr auto HelicopterHudColor = 0x1ac; // Color
	}

	namespace n_StaticAccessorAttribute { // : Attribute
		constexpr auto (Name)k__BackingField = 0x10; // string
		constexpr auto (Type)k__BackingField = 0x18; // StaticAccessorType
	}

	namespace n_SpotClock {
		constexpr auto (SpotLength)k__BackingField = 0x10; // float
		constexpr auto (LastTeamASpotted)k__BackingField = 0x14; // float
		constexpr auto (LastTeamBSpotted)k__BackingField = 0x18; // float
	}

	namespace n_X509Certificate2 { // : X509Certificate
		constexpr auto friendlyName = 0x30; // string
	}

	namespace n_SecurityElement.SecurityAttribute {
		constexpr auto _name = 0x10; // string
		constexpr auto _value = 0x18; // string
	}

	namespace n_RushBeaconTargetWorldMap { // : MapWorldBehaviour
		constexpr auto (WorldPosition)k__BackingField = 0x40; // Vector3
		constexpr auto (MapUI)k__BackingField = 0x50; // RushBeaconTargetUIMap
	}

	namespace n_EnvironmentObjectProvider { // : ExistanceProvider
		constexpr auto obj = 0x20; // EnvironmentObject
	}

	namespace n_ProgressChangedEventArgs { // : EventArgs
		constexpr auto progressPercentage = 0x10; // int
		constexpr auto userState = 0x18; // object
	}

	namespace n_ResourceReader { // : IResourceReader
		constexpr auto _store = 0x10; // BinaryReader
		constexpr auto _resCache = 0x18; // Dictionary(string, ResourceLocator)
		constexpr auto _nameSectionOffset = 0x20; // long
		constexpr auto _dataSectionOffset = 0x28; // long
		constexpr auto _nameHashes = 0x30; // int[]
		constexpr auto _nameHashesPtr = 0x38; // int*
		constexpr auto _namePositions = 0x40; // int[]
		constexpr auto _namePositionsPtr = 0x48; // int*
		constexpr auto _typeTable = 0x50; // RuntimeType[]
		constexpr auto _typeNamePositions = 0x58; // int[]
		constexpr auto _objFormatter = 0x60; // BinaryFormatter
		constexpr auto _numResources = 0x68; // int
		constexpr auto _ums = 0x70; // UnmanagedMemoryStream
		constexpr auto _version = 0x78; // int
	}

	namespace n_TriangleCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _processTriangle = 0x18; // TriangleCallback.ProcessTriangleDelegate
	}

	namespace n_UTF32Encoding { // : Encoding
		constexpr auto emitUTF32ByteOrderMark = 0x38; // bool
		constexpr auto isThrowException = 0x39; // bool
		constexpr auto bigEndian = 0x3a; // bool
	}

	namespace n_OptionsElement { // : MonoBehaviour
		constexpr auto Key = 0x18; // string
	}

	namespace n_LogConnection { // : MonoBehaviour
		constexpr auto PlayerLabel = 0x18; // TextMeshProUGUI
		constexpr auto Tool = 0x20; // RawImage
		constexpr auto Canvas = 0x28; // CanvasGroup
		constexpr auto thisRect = 0x30; // RectTransform
		constexpr auto timer = 0x38; // float
		constexpr auto updateRunning = 0x3c; // bool
		constexpr auto (TickIndex8)k__BackingField = 0x40; // int
		constexpr auto _lockedIsJoin = 0x44; // bool
	}

	namespace n_FastAction {
		constexpr auto delegates = 0x10; // LinkedList(Action)
		constexpr auto lookup = 0x18; // Dictionary(Action, LinkedListNode(Action))
	}

	namespace n_TextEditor {
		constexpr auto keyboardOnScreen = 0x10; // TouchScreenKeyboard
		constexpr auto controlID = 0x18; // int
		constexpr auto style = 0x20; // GUIStyle
		constexpr auto multiline = 0x28; // bool
		constexpr auto hasHorizontalCursorPos = 0x29; // bool
		constexpr auto isPasswordField = 0x2a; // bool
		constexpr auto scrollOffset = 0x2c; // Vector2
		constexpr auto m_Content = 0x38; // GUIContent
		constexpr auto m_CursorIndex = 0x40; // int
		constexpr auto m_SelectIndex = 0x44; // int
		constexpr auto m_RevealCursor = 0x48; // bool
		constexpr auto m_MouseDragSelectsWholeWords = 0x49; // bool
		constexpr auto m_DblClickInitPos = 0x4c; // int
		constexpr auto m_DblClickSnap = 0x50; // TextEditor.DblClickSnapping
		constexpr auto m_bJustSelected = 0x51; // bool
		constexpr auto m_iAltCursorPos = 0x54; // int
	}

	namespace n_Oid {
		constexpr auto m_value = 0x10; // string
		constexpr auto m_friendlyName = 0x18; // string
		constexpr auto m_group = 0x20; // OidGroup
	}

	namespace n_NatureComponent { // : MonoBehaviour
		constexpr auto data_function2id = 0x18; // Dictionary(Action(NetSerializer), byte)
		constexpr auto data_id2function = 0x20; // Dictionary(byte, Action(NetSerializer))
		constexpr auto noData_function2id = 0x28; // Dictionary(Action, byte)
		constexpr auto noData_id2function = 0x30; // Dictionary(byte, Action)
	}

	namespace n_ChatCooldown {
		constexpr auto mPostTimes = 0x10; // float[]
		constexpr auto mPostIndex = 0x18; // int
		constexpr auto mNextPostAbility = 0x1c; // float
	}

	namespace n_Dna.StructDecl {
		constexpr auto (Type)k__BackingField = 0x10; // Dna.TypeDecl
		constexpr auto (Elements)k__BackingField = 0x18; // Dna.ElementDecl[]
	}

	namespace n_BuildingLOD { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto isDestroyed = 0x1c; // bool
		constexpr auto Bounds = 0x20; // Bounds
		constexpr auto BoundsMin = 0x38; // Vector3
		constexpr auto BoundsMax = 0x44; // Vector3
		constexpr auto ShadowBounds = 0x50; // Bounds
		constexpr auto ShadowBoundsMin = 0x68; // Vector3
		constexpr auto ShadowBoundsMax = 0x74; // Vector3
		constexpr auto LOD0 = 0x80; // List(BuildingLODRenderer)
		constexpr auto LOD0ScreenHeight = 0x88; // float
		constexpr auto LOD1 = 0x90; // List(BuildingLODRenderer)
		constexpr auto LOD1ScreenHeight = 0x98; // float
		constexpr auto LOD2 = 0xa0; // List(BuildingLODRenderer)
		constexpr auto LOD2ScreenHeight = 0xa8; // float
		constexpr auto LOD3 = 0xb0; // BuildingLODRenderer
		constexpr auto LOD3ScreenHeight = 0xb8; // float
		constexpr auto m_activeLOD = 0xbc; // int
		constexpr auto m_targetLOD = 0xc0; // int
		constexpr auto m_position = 0xc4; // Vector3
		constexpr auto ScreenHeight = 0xd0; // float
		constexpr auto m_radius = 0xd4; // float
		constexpr auto m_radiusSqr = 0xd8; // float
		constexpr auto LOD0AddQueue = 0xe0; // Queue(BuildingLODRenderer)
		constexpr auto LOD1AddQueue = 0xe8; // Queue(BuildingLODRenderer)
		constexpr auto LOD2AddQueue = 0xf0; // Queue(BuildingLODRenderer)
	}

	namespace n_NameTable { // : XmlNameTable
		constexpr auto entries = 0x10; // NameTable.Entry[]
		constexpr auto count = 0x18; // int
		constexpr auto mask = 0x1c; // int
		constexpr auto hashCodeRandomizer = 0x20; // int
	}

	namespace n_GraphicRaycaster { // : BaseRaycaster
		constexpr auto m_IgnoreReversedGraphics = 0x20; // bool
		constexpr auto m_BlockingObjects = 0x24; // GraphicRaycaster.BlockingObjects
		constexpr auto m_BlockingMask = 0x28; // LayerMask
		constexpr auto m_Canvas = 0x30; // Canvas
		constexpr auto m_RaycastResults = 0x38; // List(Graphic)
	}

	namespace n_RenderGraph.RenderPass {
		constexpr auto name = 0x10; // string
		constexpr auto index = 0x18; // int
		constexpr auto customSampler = 0x20; // ProfilingSampler
		constexpr auto resourceReadList = 0x28; // List(RenderGraphResource)
		constexpr auto resourceWriteList = 0x30; // List(RenderGraphMutableResource)
		constexpr auto usedRendererListList = 0x38; // List(RenderGraphResource)
		constexpr auto enableAsyncCompute = 0x40; // bool
		constexpr auto m_ColorBuffers = 0x48; // RenderGraphMutableResource[]
		constexpr auto m_DepthBuffer = 0x50; // RenderGraphMutableResource
		constexpr auto m_MaxColorBufferIndex = 0x5c; // int
	}

	namespace n_BitArray { // : ICollection
		constexpr auto m_array = 0x10; // int[]
		constexpr auto m_length = 0x18; // int
		constexpr auto _version = 0x1c; // int
	}

	namespace n_NoInterpMinFloatParameter { // : VolumeParameter(float)
		constexpr auto min = 0x20; // float
	}

	namespace n_VolumeManager {
		constexpr auto (stack)k__BackingField = 0x10; // VolumeStack
		constexpr auto (baseComponentTypes)k__BackingField = 0x18; // IEnumerable(Type)
		constexpr auto m_SortedVolumes = 0x20; // Dictionary(int, List(Volume))
		constexpr auto m_Volumes = 0x28; // List(Volume)
		constexpr auto m_SortNeeded = 0x30; // Dictionary(int, bool)
		constexpr auto m_ComponentsDefaultState = 0x38; // List(VolumeComponent)
		constexpr auto m_TempColliders = 0x40; // List(Collider)
	}

	namespace n_Hook { // : ToolItem
		constexpr auto ProjectilePrefab = 0x60; // GameObject
		constexpr auto GasConsumption = 0x68; // float
	}

	namespace n_PlayerMenuOverlay_ReportItem { // : MonoBehaviour
		constexpr auto ProfilePicture = 0x18; // RawImage
		constexpr auto Name = 0x20; // TextMeshProUGUI
		constexpr auto Reason = 0x28; // TextMeshProUGUI
		constexpr auto Date = 0x30; // TextMeshProUGUI
		constexpr auto LoadingProfile = 0x38; // GameObject
		constexpr auto LoadingName = 0x40; // GameObject
		constexpr auto profile = 0x48; // SteamStats
		constexpr auto report = 0x50; // AReport
		constexpr auto counter = 0x70; // float
		constexpr auto (TickIndex8)k__BackingField = 0x74; // int
	}

	namespace n_BigInteger.ModulusRing {
		constexpr auto mod = 0x10; // BigInteger
		constexpr auto constant = 0x18; // BigInteger
	}

	namespace n_AddComponentMenu { // : Attribute
		constexpr auto m_AddComponentMenu = 0x10; // string
		constexpr auto m_Ordering = 0x18; // int
	}

	namespace n_ObserverCabin { // : SeatBehaviour
		constexpr auto HorizontalRange = 0x48; // float
		constexpr auto VerticalRange = 0x4c; // float
		constexpr auto ZoomFieldOfView = 0x50; // float
		constexpr auto Local = 0x58; // GameObject
		constexpr auto CameraPoint = 0x60; // Transform
		constexpr auto Camera = 0x68; // Camera
		constexpr auto Meshes = 0x70; // Renderer[]
		constexpr auto eular = 0x78; // Vector3
	}

	namespace n_SecurityElement {
		constexpr auto text = 0x10; // string
		constexpr auto tag = 0x18; // string
		constexpr auto attributes = 0x20; // ArrayList
		constexpr auto children = 0x28; // ArrayList
	}

	namespace n_ExposedProperty {
		constexpr auto m_Name = 0x10; // string
		constexpr auto m_Id = 0x18; // int
	}

	namespace n_RemotingServices.CACD {
		constexpr auto d = 0x10; // object
		constexpr auto c = 0x18; // object
	}

	namespace n_CharacterWearings {
		constexpr auto Head = 0x10; // WearableHead
		constexpr auto Chest = 0x18; // WearableChest
		constexpr auto Belt = 0x20; // WearableBelt
		constexpr auto Backbag = 0x28; // WearableBackbag
		constexpr auto Eye = 0x30; // Eye
		constexpr auto Face = 0x38; // Face
		constexpr auto Hair = 0x40; // Hair
		constexpr auto Skin = 0x48; // Body
		constexpr auto Uniform = 0x50; // Uniform
	}

	namespace n_DriverCamera { // : SeatBehaviour
		constexpr auto Speed = 0x48; // float
		constexpr auto ShakeT = 0x4c; // float
		constexpr auto vehicle = 0x50; // VehicleInstance
		constexpr auto parent = 0x58; // Transform
		constexpr auto eular = 0x60; // Vector3
		constexpr auto normal = 0x6c; // Vector3
		constexpr auto velocity = 0x78; // Vector3
		constexpr auto hits = 0x88; // List(DriverCamera.hit)
		constexpr auto removeQueue = 0x90; // Queue(DriverCamera.hit)
		constexpr auto shake = 0x98; // float
	}

	namespace n_LensDistortion { // : VolumeComponent
		constexpr auto intensity = 0x38; // ClampedFloatParameter
		constexpr auto xMultiplier = 0x40; // ClampedFloatParameter
		constexpr auto yMultiplier = 0x48; // ClampedFloatParameter
		constexpr auto center = 0x50; // Vector2Parameter
		constexpr auto scale = 0x58; // ClampedFloatParameter
	}

	namespace n_DESTransform { // : SymmetricTransform
		constexpr auto keySchedule = 0x58; // byte[]
		constexpr auto byteBuff = 0x60; // byte[]
		constexpr auto dwordBuff = 0x68; // uint[]
	}

	namespace n_TextureNoiseVariables {
		constexpr auto noiseOrigin = 0x10; // Vector2
		constexpr auto noiseFrequency = 0x18; // float
		constexpr auto noiseOctaves = 0x1c; // int
		constexpr auto noiseLacunarity = 0x20; // float
		constexpr auto noisePersistence = 0x24; // float
	}

	namespace n_ClosestConvexResultCallback { // : ConvexResultCallback
		constexpr auto (ConvexFromWorld)k__BackingField = 0x28; // Vector3
		constexpr auto (ConvexToWorld)k__BackingField = 0x34; // Vector3
		constexpr auto (HitCollisionObject)k__BackingField = 0x40; // CollisionObject
		constexpr auto (HitNormalWorld)k__BackingField = 0x48; // Vector3
		constexpr auto (HitPointWorld)k__BackingField = 0x54; // Vector3
	}

	namespace n_ReaderWriterCount {
		constexpr auto lockID = 0x10; // long
		constexpr auto readercount = 0x18; // int
		constexpr auto writercount = 0x1c; // int
		constexpr auto upgradecount = 0x20; // int
		constexpr auto next = 0x28; // ReaderWriterCount
	}

	namespace n_DebugUIHandlerColor { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // UIFoldout
		constexpr auto colorImage = 0x68; // Image
		constexpr auto fieldR = 0x70; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldG = 0x78; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldB = 0x80; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldA = 0x88; // DebugUIHandlerIndirectFloatField
		constexpr auto m_Field = 0x90; // DebugUI.ColorField
		constexpr auto m_Container = 0x98; // DebugUIHandlerContainer
	}

	namespace n_PrecisionPastTransform {
		constexpr auto position = 0x10; // Vector3
		constexpr auto scale = 0x1c; // Vector3
		constexpr auto rotation = 0x28; // Quaternion
	}

	namespace n_RenderGraphObjectPool {
		constexpr auto m_ArrayPool = 0x10; // Dictionary(ValueTuple(Type, int), Stack(object))
		constexpr auto m_AllocatedArrays = 0x18; // List(ValueTuple(object, ValueTuple(Type, int)))
		constexpr auto m_AllocatedMaterialPropertyBlocks = 0x20; // List(MaterialPropertyBlock)
	}

	namespace n_DebugUIHandlerGroup { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto header = 0x60; // Transform
		constexpr auto m_Field = 0x68; // DebugUI.Container
		constexpr auto m_Container = 0x70; // DebugUIHandlerContainer
	}

	namespace n_XmlSchemaSet {
		constexpr auto nameTable = 0x10; // XmlNameTable
		constexpr auto schemas = 0x18; // SortedList
		constexpr auto internalEventHandler = 0x20; // ValidationEventHandler
		constexpr auto eventHandler = 0x28; // ValidationEventHandler
		constexpr auto schemaLocations = 0x30; // Hashtable
		constexpr auto chameleonSchemas = 0x38; // Hashtable
		constexpr auto targetNamespaces = 0x40; // Hashtable
		constexpr auto compileAll = 0x48; // bool
		constexpr auto cachedCompiledInfo = 0x50; // SchemaInfo
		constexpr auto readerSettings = 0x58; // XmlReaderSettings
		constexpr auto compilationSettings = 0x60; // XmlSchemaCompilationSettings
	}

	namespace n_AABBCull { // : Cull
		constexpr auto Bounds = 0x20; // Bounds
		constexpr auto min = 0x38; // Vector3
		constexpr auto max = 0x44; // Vector3
	}

	namespace n_ListDictionaryInternal { // : IDictionary
		constexpr auto head = 0x10; // ListDictionaryInternal.DictionaryNode
		constexpr auto version = 0x18; // int
		constexpr auto count = 0x1c; // int
	}

	namespace n_PlayerMenuOverlay { // : MonoBehaviour
		constexpr auto MainMenu = 0x18; // GameObject
		constexpr auto UserName = 0x20; // TextMeshProUGUI
		constexpr auto SteamIDField = 0x28; // TMP_InputField
		constexpr auto UserProfile = 0x30; // RawImage
		constexpr auto UserProfileLoadingIcon = 0x38; // GameObject
		constexpr auto Reports = 0x40; // GameObject
		constexpr auto ReportMenu = 0x48; // GameObject
		constexpr auto ReportedLoading = 0x50; // GameObject
		constexpr auto ReportedText = 0x58; // GameObject
		constexpr auto ReportName = 0x60; // TextMeshProUGUI
		constexpr auto ModMenu = 0x68; // GameObject
		constexpr auto LoadingReportListIcon = 0x70; // GameObject
		constexpr auto Prefab = 0x78; // GameObject
		constexpr auto Parent = 0x80; // Transform
		constexpr auto reportsPool = 0x88; // UIPool(PlayerMenuOverlay_ReportItem)
		constexpr auto reportsActive = 0x90; // List(PlayerMenuOverlay_ReportItem)
		constexpr auto LoadingWarnListIcon = 0x98; // GameObject
		constexpr auto WarnPrefab = 0xa0; // GameObject
		constexpr auto WarnParent = 0xa8; // Transform
		constexpr auto WarnPool = 0xb0; // UIPool(PlayerMenuOverlay_WarnItem)
		constexpr auto WarnActive = 0xb8; // List(PlayerMenuOverlay_WarnItem)
		constexpr auto MuteImage = 0xc0; // RawImage
		constexpr auto MuteLabel = 0xc8; // TextMeshProUGUI
		constexpr auto BanScreen = 0xd0; // GameObject
		constexpr auto BanMonths = 0xd8; // TMP_InputField
		constexpr auto BanWeeks = 0xe0; // TMP_InputField
		constexpr auto BanDays = 0xe8; // TMP_InputField
		constexpr auto BanHours = 0xf0; // TMP_InputField
		constexpr auto BanMins = 0xf8; // TMP_InputField
		constexpr auto BanReason = 0x100; // TMP_InputField
		constexpr auto WarnScreen = 0x108; // GameObject
		constexpr auto WarnReason = 0x110; // TMP_InputField
		constexpr auto ServerWarnScreen = 0x118; // GameObject
		constexpr auto ServerWarnReason = 0x120; // TMP_InputField
		constexpr auto MutePhoto = 0x128; // Texture2D
		constexpr auto UnmutePhoto = 0x130; // Texture2D
		constexpr auto (TickIndex8)k__BackingField = 0x138; // int
		constexpr auto client = 0x140; // NetworkClient
		constexpr auto mSteamStats = 0x148; // SteamStats
		constexpr auto mSteamPhotoLoaded = 0x150; // bool
		constexpr auto mSteamStatsLoaded = 0x151; // bool
		constexpr auto steamID = 0x158; // ulong
	}

	namespace n_CompoundShapeChildArrayEnumerator { // : IEnumerator(CompoundShapeChild)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // CompoundShapeChild[]
	}

	namespace n_ToolAirDrone { // : GadgetManager
		constexpr auto GhostModel = 0xd0; // MeshRenderer
		constexpr auto Point = 0xd8; // Transform
		constexpr auto m_busy = 0xe0; // float
		constexpr auto SpawnPrefab = 0xe8; // GameObject
	}

	namespace n_LeaseSink { // : IMessageSink
		constexpr auto _nextSink = 0x10; // IMessageSink
	}

	namespace n_NetworkRoom {
		constexpr auto RoomName = 0x10; // string
		constexpr auto Map = 0x18; // string
		constexpr auto MapTime = 0x20; // DayNightTime
		constexpr auto GameMode = 0x24; // GameMode
		constexpr auto GameType = 0x25; // GameType
	}

	namespace n_SortKey {
		constexpr auto source = 0x10; // string
		constexpr auto key = 0x18; // byte[]
		constexpr auto options = 0x20; // CompareOptions
		constexpr auto lcid = 0x24; // int
	}

	namespace n_MaterialProperties { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_X509CertificateImplMono { // : X509CertificateImpl
		constexpr auto x509 = 0x18; // X509Certificate
	}

	namespace n_CFNetwork.CFWebProxy { // : IWebProxy
		constexpr auto credentials = 0x10; // ICredentials
		constexpr auto userSpecified = 0x18; // bool
	}

	namespace n_TextMeshPro { // : TMP_Text
		constexpr auto m_hasFontAssetChanged = 0x6b8; // bool
		constexpr auto m_previousLossyScaleY = 0x6bc; // float
		constexpr auto m_renderer = 0x6c0; // Renderer
		constexpr auto m_meshFilter = 0x6c8; // MeshFilter
		constexpr auto m_CanvasRenderer = 0x6d0; // CanvasRenderer
		constexpr auto m_isFirstAllocation = 0x6d8; // bool
		constexpr auto m_max_characters = 0x6dc; // int
		constexpr auto m_max_numberOfLines = 0x6e0; // int
		constexpr auto m_subTextObjects = 0x6e8; // TMP_SubMesh[]
		constexpr auto m_maskType = 0x6f0; // MaskingTypes
		constexpr auto m_EnvMapMatrix = 0x6f4; // Matrix4x4
		constexpr auto m_RectTransformCorners = 0x738; // Vector3[]
		constexpr auto m_isRegisteredForEvents = 0x740; // bool
		constexpr auto _SortingLayer = 0x744; // int
		constexpr auto _SortingLayerID = 0x748; // int
		constexpr auto _SortingOrder = 0x74c; // int
		constexpr auto OnPreRenderText = 0x750; // Action(TMP_TextInfo)
		constexpr auto m_currentAutoSizeMode = 0x758; // bool
	}

	namespace n_LoadoutAttachmentTitle { // : MonoBehaviour
		constexpr auto Label = 0x18; // TextMeshProUGUI
	}

	namespace n_RegexTree {
		constexpr auto _root = 0x10; // RegexNode
		constexpr auto _caps = 0x18; // Hashtable
		constexpr auto _capnumlist = 0x20; // int[]
		constexpr auto _capnames = 0x28; // Hashtable
		constexpr auto _capslist = 0x30; // string[]
		constexpr auto _options = 0x38; // RegexOptions
		constexpr auto _captop = 0x3c; // int
	}

	namespace n_DescendantBaseQuery { // : BaseAxisQuery
		constexpr auto matchSelf = 0x58; // bool
		constexpr auto abbrAxis = 0x59; // bool
	}

	namespace n_WebConnectionGroup.ConnectionState { // : IWebConnectionState
		constexpr auto (Connection)k__BackingField = 0x10; // WebConnection
		constexpr auto (Group)k__BackingField = 0x18; // WebConnectionGroup
		constexpr auto busy = 0x20; // bool
		constexpr auto idleSince = 0x28; // DateTime
	}

	namespace n_BurstCompiler.StaticTypeReinitAttribute { // : Attribute
		constexpr auto reinitType = 0x10; // Type
	}

	namespace n_CatchGame { // : GameplayMode
		constexpr auto RoundTime = 0x48; // RoundTimer
		constexpr auto mLast50TicketsLeftFlag = 0x50; // bool
		constexpr auto mLast10TicketsLeftFlag = 0x51; // bool
		constexpr auto SpawnPointsTeamA = 0x58; // Transform[]
		constexpr auto SpawnPointsTeamB = 0x60; // Transform[]
		constexpr auto SpawnPoints = 0x68; // Transform[]
	}

	namespace n_DebugUI.UIntField { // : DebugUI.Field(uint)
		constexpr auto min = 0x50; // Func(uint)
		constexpr auto max = 0x58; // Func(uint)
		constexpr auto incStep = 0x60; // uint
		constexpr auto intStepMult = 0x64; // uint
	}

	namespace n_MasterServerList.Randomizer {
		constexpr auto mMap = 0x10; // bool[]
		constexpr auto mCounter = 0x18; // int
		constexpr auto mLenght = 0x1c; // int
		constexpr auto mRandom = 0x20; // Random
	}

	namespace n_ConvexCast { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_ClanMember {
		constexpr auto ClanID = 0x10; // ulong
		constexpr auto SteamID = 0x18; // ulong
		constexpr auto XP = 0x20; // uint
		constexpr auto Rank = 0x24; // ClanRank
	}

	namespace n_CancellationTokenSource { // : IDisposable
		constexpr auto m_kernelEvent = 0x10; // ManualResetEvent
		constexpr auto m_registeredCallbacksLists = 0x18; // SparselyPopulatedArray(CancellationCallbackInfo)[]
		constexpr auto m_state = 0x20; // int
		constexpr auto m_threadIDExecutingCallbacks = 0x24; // int
		constexpr auto m_disposed = 0x28; // bool
		constexpr auto m_linkingRegistrations = 0x30; // CancellationTokenRegistration[]
		constexpr auto m_executingCallback = 0x38; // CancellationCallbackInfo
		constexpr auto m_timer = 0x40; // Timer
	}

	namespace n_TargetFrameworkAttribute { // : Attribute
		constexpr auto _frameworkName = 0x10; // string
		constexpr auto _frameworkDisplayName = 0x18; // string
	}

	namespace n_Stack.StackEnumerator { // : IEnumerator
		constexpr auto _stack = 0x10; // Stack
		constexpr auto _index = 0x18; // int
		constexpr auto _version = 0x1c; // int
		constexpr auto currentElement = 0x20; // object
	}

	namespace n_QueryBuilder {
		constexpr auto query = 0x10; // string
		constexpr auto allowVar = 0x18; // bool
		constexpr auto allowKey = 0x19; // bool
		constexpr auto allowCurrent = 0x1a; // bool
		constexpr auto needContext = 0x1b; // bool
		constexpr auto firstInput = 0x20; // BaseAxisQuery
		constexpr auto parseDepth = 0x28; // int
	}

	namespace n_MethodCall { // : IMethodCallMessage
		constexpr auto _uri = 0x10; // string
		constexpr auto _typeName = 0x18; // string
		constexpr auto _methodName = 0x20; // string
		constexpr auto _args = 0x28; // object[]
		constexpr auto _methodSignature = 0x30; // Type[]
		constexpr auto _methodBase = 0x38; // MethodBase
		constexpr auto _callContext = 0x40; // LogicalCallContext
		constexpr auto _targetIdentity = 0x48; // Identity
		constexpr auto _genericArguments = 0x50; // Type[]
		constexpr auto ExternalProperties = 0x58; // IDictionary
		constexpr auto InternalProperties = 0x60; // IDictionary
	}

	namespace n_SmokeArea { // : MonoBehaviour
		constexpr auto Radius = 0x18; // float
		constexpr auto Intensity = 0x1c; // float
		constexpr auto currentR = 0x20; // float
		constexpr auto effectPercent = 0x24; // float
		constexpr auto PopUpSpeed = 0x28; // float
		constexpr auto PopDownSpeed = 0x2c; // float
		constexpr auto PopUpDelay = 0x30; // float
		constexpr auto StayMaxRadiusDelay = 0x34; // float
		constexpr auto position = 0x38; // Vector3
		constexpr auto popingUp = 0x44; // bool
		constexpr auto popingDown = 0x45; // bool
		constexpr auto Distance = 0x48; // float
		constexpr auto isAdded = 0x4c; // bool
	}

	namespace n_X509ChainPolicy {
		constexpr auto apps = 0x10; // OidCollection
		constexpr auto cert = 0x18; // OidCollection
		constexpr auto store = 0x20; // X509CertificateCollection
		constexpr auto store2 = 0x28; // X509Certificate2Collection
		constexpr auto rflag = 0x30; // X509RevocationFlag
		constexpr auto mode = 0x34; // X509RevocationMode
		constexpr auto timeout = 0x38; // TimeSpan
		constexpr auto vflags = 0x40; // X509VerificationFlags
		constexpr auto vtime = 0x48; // DateTime
	}

	namespace n_MinkowskiSumShape { // : ConvexInternalShape
		constexpr auto _shapeA = 0x28; // ConvexShape
		constexpr auto _shapeB = 0x30; // ConvexShape
	}

	namespace n_GraphicReverter { // : MonoBehaviour
		constexpr auto IncludeInactives = 0x18; // bool
		constexpr auto ColorsRevertValue = 0x1c; // float
		constexpr auto child_raw = 0x20; // List(RawImage)
		constexpr auto child_img = 0x28; // List(Image)
		constexpr auto child_text = 0x30; // List(TextMeshProUGUI)
		constexpr auto child_raw_colors = 0x38; // Color[]
		constexpr auto child_img_colors = 0x40; // Color[]
		constexpr auto child_text_colors = 0x48; // Color[]
		constexpr auto child_raw_colors_reverted = 0x50; // Color[]
		constexpr auto child_img_colors_reverted = 0x58; // Color[]
		constexpr auto child_text_colors_reverted = 0x60; // Color[]
		constexpr auto mInvert = 0x68; // float
		constexpr auto mLerp = 0x6c; // float
	}

	namespace n_SHA512Managed { // : SHA512
		constexpr auto _buffer = 0x28; // byte[]
		constexpr auto _count = 0x30; // ulong
		constexpr auto _stateSHA512 = 0x38; // ulong[]
		constexpr auto _W = 0x40; // ulong[]
	}

	namespace n_ColorAdjustments { // : VolumeComponent
		constexpr auto postExposure = 0x38; // FloatParameter
		constexpr auto contrast = 0x40; // ClampedFloatParameter
		constexpr auto colorFilter = 0x48; // ColorParameter
		constexpr auto hueShift = 0x50; // ClampedFloatParameter
		constexpr auto saturation = 0x58; // ClampedFloatParameter
	}

	namespace n_TerrainTexture {
		constexpr auto texture = 0x10; // Texture2D
		constexpr auto terrainProtoId = 0x18; // int
		constexpr auto selected = 0x1c; // bool
	}

	namespace n_NetworkStream { // : Stream
		constexpr auto m_StreamSocket = 0x28; // Socket
		constexpr auto m_Readable = 0x30; // bool
		constexpr auto m_Writeable = 0x31; // bool
		constexpr auto m_OwnsSocket = 0x32; // bool
		constexpr auto m_CloseTimeout = 0x34; // int
		constexpr auto m_CleanedUp = 0x38; // bool
		constexpr auto m_CurrentReadTimeout = 0x3c; // int
		constexpr auto m_CurrentWriteTimeout = 0x40; // int
	}

	namespace n_RenderObjects.RenderObjectsSettings {
		constexpr auto passTag = 0x10; // string
		constexpr auto Event = 0x18; // RenderPassEvent
		constexpr auto filterSettings = 0x20; // RenderObjects.FilterSettings
		constexpr auto overrideMaterial = 0x28; // Material
		constexpr auto overrideMaterialPassIndex = 0x30; // int
		constexpr auto overrideDepthState = 0x34; // bool
		constexpr auto depthCompareFunction = 0x38; // CompareFunction
		constexpr auto enableWrite = 0x3c; // bool
		constexpr auto stencilSettings = 0x40; // StencilStateData
		constexpr auto cameraSettings = 0x48; // RenderObjects.CustomCameraSettings
	}

	namespace n_MatchSparse { // : Match
		constexpr auto _caps = 0x70; // Hashtable
	}

	namespace n_BrushMaskFiltersSettings {
		constexpr auto color = 0x10; // Color
		constexpr auto enableBrushStripe = 0x20; // bool
		constexpr auto colorSpace = 0x24; // ColorSpaceForBrushMaskFilter
		constexpr auto enableDefaultBrushPreviewMaterial = 0x28; // bool
		constexpr auto alphaVisualisationType = 0x2c; // AlphaVisualisationType
		constexpr auto customAlpha = 0x30; // float
	}

	namespace n_KeySizes {
		constexpr auto m_minSize = 0x10; // int
		constexpr auto m_maxSize = 0x14; // int
		constexpr auto m_skipSize = 0x18; // int
	}

	namespace n_Component { // : MarshalByRefObject
		constexpr auto site = 0x18; // ISite
		constexpr auto events = 0x20; // EventHandlerList
	}

	namespace n_CurrentSystemTimeZone { // : TimeZone
		constexpr auto LocalTimeZone = 0x10; // TimeZoneInfo
	}

	namespace n_ScoreboardMember { // : MonoBehaviour
		constexpr auto rectTransform = 0x18; // RectTransform
		constexpr auto btn = 0x20; // GraphicRevertedButton[]
		constexpr auto isLastItem = 0x28; // bool
		constexpr auto steamID = 0x30; // ulong
		constexpr auto lockedSquad = 0x38; // Squad
		constexpr auto Parent = 0x40; // ScoreboardSquad
		constexpr auto Icon = 0x48; // RawImage
		constexpr auto AfterPrestige = 0x50; // RectTransform
		constexpr auto Rank = 0x58; // Image
		constexpr auto RankLabel = 0x60; // TextMeshProUGUI
		constexpr auto Prestige = 0x68; // Image
		constexpr auto PrestigeBackground = 0x70; // RawImage
		constexpr auto Role = 0x78; // Image
		constexpr auto NameLabel = 0x80; // TextMeshProUGUI
		constexpr auto Mute = 0x88; // RawImage
		constexpr auto Vehicle = 0x90; // RawImage
		constexpr auto KillLabel = 0x98; // TextMeshProUGUI
		constexpr auto DeathLabel = 0xa0; // TextMeshProUGUI
		constexpr auto ScoreLabel = 0xa8; // TextMeshProUGUI
		constexpr auto PingIndicator = 0xb0; // RawImage
		constexpr auto Leader = 0xb8; // GameObject
		constexpr auto _lockedRank = 0xc0; // int
		constexpr auto _lockedPrestige = 0xc4; // int
		constexpr auto _lockedRole = 0xc8; // Role
		constexpr auto _lockedKill = 0xcc; // uint
		constexpr auto _lockedDeath = 0xd0; // uint
		constexpr auto _lockedScore = 0xd4; // uint
		constexpr auto _lockedPing = 0xd8; // int
		constexpr auto _lockedIsDead = 0xdc; // bool
		constexpr auto _lockedisMuted = 0xdd; // bool
		constexpr auto _lockedInVehicle = 0xde; // bool
		constexpr auto _lockedLeader = 0xdf; // bool
		constexpr auto _lockedIsLastItem = 0xe0; // bool
	}

	namespace n_RealProxy {
		constexpr auto class_to_proxy = 0x10; // Type
		constexpr auto _targetContext = 0x18; // Context
		constexpr auto _server = 0x20; // MarshalByRefObject
		constexpr auto _targetDomainId = 0x28; // int
		constexpr auto _targetUri = 0x30; // string
		constexpr auto _objectIdentity = 0x38; // Identity
		constexpr auto _objTP = 0x40; // object
		constexpr auto _stubData = 0x48; // object
	}

	namespace n_PlayerAchievements {
		constexpr auto active = 0x10; // HashSet(uint)
	}

	namespace n_Node { // : Feature
		constexpr auto _leaf = 0x20; // DbvtNode
	}

	namespace n_ResourceRequest { // : AsyncOperation
		constexpr auto m_Path = 0x20; // string
		constexpr auto m_Type = 0x28; // Type
	}

	namespace n_Button { // : Selectable
		constexpr auto m_OnClick = 0xf8; // Button.ButtonClickedEvent
	}

	namespace n_MapPlayerWorldObject { // : MapWorldBehaviour
		constexpr auto (Player)k__BackingField = 0x40; // NetworkClient
		constexpr auto (MapUI)k__BackingField = 0x48; // MapPlayerUIObject
		constexpr auto mInited = 0x50; // bool
	}

	namespace n_ConditionalAttribute { // : Attribute
		constexpr auto m_conditionString = 0x10; // string
	}

	namespace n_ParameterizedStrings.LowLevelStack {
		constexpr auto _arr = 0x10; // ParameterizedStrings.FormatParam[]
		constexpr auto _count = 0x18; // int
	}

	namespace n_DeployScreenBehaviour.SquadUI.RoleUI.RoleUIElement {
		constexpr auto Button = 0x10; // GraphicRevertedButton
		constexpr auto isSelected = 0x18; // GameObject
		constexpr auto Count = 0x20; // TextMeshProUGUI
		constexpr auto New = 0x28; // GameObject
		constexpr auto _lockedCurrent = 0x30; // int
		constexpr auto _lockedMax = 0x34; // int
		constexpr auto _lockedIsSelected = 0x38; // bool
	}

	namespace n_CharacterJoint { // : Joint
		constexpr auto targetRotation = 0x18; // Quaternion
		constexpr auto targetAngularVelocity = 0x28; // Vector3
		constexpr auto rotationDrive = 0x34; // JointDrive
	}

	namespace n_ObjectNull {
		constexpr auto nullCount = 0x10; // int
	}

	namespace n_ColorUsageAttribute { // : PropertyAttribute
		constexpr auto showAlpha = 0x18; // bool
		constexpr auto hdr = 0x19; // bool
		constexpr auto minBrightness = 0x1c; // float
		constexpr auto maxBrightness = 0x20; // float
		constexpr auto minExposureValue = 0x24; // float
		constexpr auto maxExposureValue = 0x28; // float
	}

	namespace n_ListDictionary { // : IDictionary
		constexpr auto head = 0x10; // ListDictionary.DictionaryNode
		constexpr auto version = 0x18; // int
		constexpr auto count = 0x1c; // int
		constexpr auto comparer = 0x20; // IComparer
	}

	namespace n_PrefabPath { // : MonoBehaviour
		constexpr auto PrefabName = 0x18; // string
	}

	namespace n_PickableBase {
		constexpr auto Index = 0x10; // ushort
		constexpr auto IsExists = 0x12; // bool
		constexpr auto Owner = 0x18; // NetworkClient
		constexpr auto Prefab = 0x20; // PickableWorldInstanceBase
		constexpr auto LastStreamReceived = 0x28; // float
		constexpr auto ClientPosition = 0x2c; // Vector3
		constexpr auto ClientRotation = 0x38; // Quaternion
		constexpr auto ServerPosition = 0x48; // Vector3
		constexpr auto ServerRotation = 0x54; // Quaternion
		constexpr auto DistanceToCamera = 0x64; // float
		constexpr auto SpawnTimeNetwork = 0x68; // float
		constexpr auto DeadTimeNetwork = 0x6c; // float
		constexpr auto mTargetLoadInstance = 0x70; // bool
		constexpr auto IsInstanceLoaded = 0x71; // bool
		constexpr auto WorldInstance = 0x78; // PickableWorldInstanceBase
	}

	namespace n_VisualElement { // : Focusable
		constexpr auto (isCompositeRoot)k__BackingField = 0x20; // bool
		constexpr auto m_Position = 0x24; // Vector3
		constexpr auto m_Rotation = 0x30; // Quaternion
		constexpr auto m_Scale = 0x40; // Vector3
		constexpr auto (isLayoutManual)k__BackingField = 0x4c; // bool
		constexpr auto m_Layout = 0x50; // Rect
		constexpr auto isBoundingBoxDirty = 0x60; // bool
		constexpr auto m_BoundingBox = 0x64; // Rect
		constexpr auto isWorldBoundingBoxDirty = 0x74; // bool
		constexpr auto m_WorldBoundingBox = 0x78; // Rect
		constexpr auto (isWorldTransformDirty)k__BackingField = 0x88; // bool
		constexpr auto (isWorldTransformInverseDirty)k__BackingField = 0x89; // bool
		constexpr auto m_WorldTransformCache = 0x8c; // Matrix4x4
		constexpr auto m_WorldTransformInverseCache = 0xcc; // Matrix4x4
		constexpr auto m_PseudoStates = 0x10c; // PseudoStates
		constexpr auto (pickingMode)k__BackingField = 0x110; // PickingMode
		constexpr auto (yogaNode)k__BackingField = 0x118; // YogaNode
		constexpr auto m_Style = 0x120; // VisualElementStylesData
		constexpr auto m_InheritedStylesData = 0x128; // InheritedStylesData
		constexpr auto (computedStyle)k__BackingField = 0x130; // ComputedStyle
		constexpr auto imguiContainerDescendantCount = 0x138; // int
		constexpr auto (hierarchy)k__BackingField = 0x140; // VisualElement.Hierarchy
		constexpr auto m_PhysicalParent = 0x148; // VisualElement
		constexpr auto m_Children = 0x150; // List(VisualElement)
		constexpr auto (elementPanel)k__BackingField = 0x158; // BaseVisualElementPanel
	}

	namespace n_LocalRayResult { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
		constexpr auto _collisionObject = 0x20; // CollisionObject
		constexpr auto _localShapeInfo = 0x28; // LocalShapeInfo
	}

	namespace n_XmlTextReaderImpl.LaterInitParam {
		constexpr auto useAsync = 0x10; // bool
		constexpr auto inputStream = 0x18; // Stream
		constexpr auto inputBytes = 0x20; // byte[]
		constexpr auto inputByteCount = 0x28; // int
		constexpr auto inputbaseUri = 0x30; // Uri
		constexpr auto inputUriStr = 0x38; // string
		constexpr auto inputUriResolver = 0x40; // XmlResolver
		constexpr auto inputContext = 0x48; // XmlParserContext
		constexpr auto inputTextReader = 0x50; // TextReader
		constexpr auto initType = 0x58; // XmlTextReaderImpl.InitInputType
	}

	namespace n_Uri.MoreInfo {
		constexpr auto Path = 0x10; // string
		constexpr auto Query = 0x18; // string
		constexpr auto Fragment = 0x20; // string
		constexpr auto AbsoluteUri = 0x28; // string
		constexpr auto Hash = 0x30; // int
		constexpr auto RemoteUrl = 0x38; // string
	}

	namespace n_RenderGraphResourceRegistry {
		constexpr auto m_TextureResources = 0x10; // DynamicArray(RenderGraphResourceRegistry.TextureResource)
		constexpr auto m_TexturePool = 0x18; // Dictionary(int, Stack(RTHandle))
		constexpr auto m_RendererListResources = 0x20; // DynamicArray(RenderGraphResourceRegistry.RendererListResource)
		constexpr auto m_RTHandleSystem = 0x28; // RTHandleSystem
		constexpr auto m_RenderGraphDebug = 0x30; // RenderGraphDebugParams
		constexpr auto m_Logger = 0x38; // RenderGraphLogger
		constexpr auto m_AllocatedTextures = 0x40; // List(ValueTuple(int, RTHandle))
	}

	namespace n_ChallengeResponse { // : IDisposable
		constexpr auto _disposed = 0x10; // bool
		constexpr auto _challenge = 0x18; // byte[]
		constexpr auto _lmpwd = 0x20; // byte[]
		constexpr auto _ntpwd = 0x28; // byte[]
	}

	namespace n_MultiBodyDynamicsWorld { // : DiscreteDynamicsWorld
		constexpr auto _bodies = 0x80; // List(MultiBody)
		constexpr auto _constraints = 0x88; // List(MultiBodyConstraint)
	}

	namespace n_PermutationTable {
		constexpr auto (Size)k__BackingField = 0x10; // int
		constexpr auto (Seed)k__BackingField = 0x14; // int
		constexpr auto (Inverse)k__BackingField = 0x18; // float
		constexpr auto (Max)k__BackingField = 0x1c; // int
		constexpr auto Wrap = 0x20; // int
		constexpr auto Table = 0x28; // int[]
	}

	namespace n_ClanInviteCode {
		constexpr auto Code = 0x10; // byte[]
		constexpr auto OwnerSteamID = 0x18; // ulong
		constexpr auto Expire = 0x20; // DateTime
	}

	namespace n_ObjectManager {
		constexpr auto m_onDeserializationHandler = 0x10; // DeserializationEventHandler
		constexpr auto m_onDeserializedHandler = 0x18; // SerializationEventHandler
		constexpr auto m_objects = 0x20; // ObjectHolder[]
		constexpr auto m_topObject = 0x28; // object
		constexpr auto m_specialFixupObjects = 0x30; // ObjectHolderList
		constexpr auto m_fixupCount = 0x38; // long
		constexpr auto m_selector = 0x40; // ISurrogateSelector
		constexpr auto m_context = 0x48; // StreamingContext
	}

	namespace n_SymmetricTransform { // : ICryptoTransform
		constexpr auto algo = 0x10; // SymmetricAlgorithm
		constexpr auto encrypt = 0x18; // bool
		constexpr auto BlockSizeByte = 0x1c; // int
		constexpr auto temp = 0x20; // byte[]
		constexpr auto temp2 = 0x28; // byte[]
		constexpr auto workBuff = 0x30; // byte[]
		constexpr auto workout = 0x38; // byte[]
		constexpr auto padmode = 0x40; // PaddingMode
		constexpr auto FeedBackByte = 0x44; // int
		constexpr auto m_disposed = 0x48; // bool
		constexpr auto lastBlock = 0x49; // bool
		constexpr auto _rng = 0x50; // RandomNumberGenerator
	}

	namespace n_VehiclePeers { // : ScriptableObject
		constexpr auto Peers = 0x18; // List(VehiclePeer)
	}

	namespace n_Buildable { // : MonoBehaviour
		constexpr auto PrefabName = 0x18; // string
		constexpr auto States = 0x20; // Buildable.State[]
		constexpr auto MaximumHP = 0x28; // float
		constexpr auto StartHP = 0x2c; // float
		constexpr auto BuildTime = 0x30; // float
		constexpr auto (Colliders)k__BackingField = 0x38; // Collider[]
		constexpr auto (Position)k__BackingField = 0x40; // Vector3
		constexpr auto (Rotation)k__BackingField = 0x4c; // Quaternion
		constexpr auto (HP)k__BackingField = 0x5c; // float
		constexpr auto (AcitveStateIndex)k__BackingField = 0x60; // int
		constexpr auto CanBuildFunction = 0x68; // Func(NetworkClient, bool)
		constexpr auto CanUnbuildFunction = 0x70; // Func(NetworkClient, bool)
		constexpr auto (FastListIndexA)k__BackingField = 0x78; // int
		constexpr auto (IsSceneObject)k__BackingField = 0x7c; // bool
		constexpr auto mBuildPointsPerSecond = 0x80; // float
		constexpr auto mIsAttachedToGroundObject = 0x84; // bool
		constexpr auto mGroundObject = 0x88; // GameObject
		constexpr auto (NetView)k__BackingField = 0x90; // NetView
	}

	namespace n_Stream { // : MarshalByRefObject
		constexpr auto valid = 0x10; // bool
		constexpr auto InPool = 0x10; // bool
		constexpr auto Buffer = 0x18; // byte[]
		constexpr auto _activeReadWriteTask = 0x18; // Stream.ReadWriteTask
		constexpr auto Serializer = 0x18; // NetSerializer
		constexpr auto WritePosition = 0x20; // int
		constexpr auto _asyncActiveSemaphore = 0x20; // SemaphoreSlim
		constexpr auto counters = 0x20; // Stream.counter[]
		constexpr auto ReadPosition = 0x24; // int
	}

	namespace n_SinkProviderData {
		constexpr auto sinkName = 0x10; // string
		constexpr auto children = 0x18; // ArrayList
		constexpr auto properties = 0x20; // Hashtable
	}

	namespace n_JointFeedback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_ChannelMixer { // : VolumeComponent
		constexpr auto redOutRedIn = 0x38; // ClampedFloatParameter
		constexpr auto redOutGreenIn = 0x40; // ClampedFloatParameter
		constexpr auto redOutBlueIn = 0x48; // ClampedFloatParameter
		constexpr auto greenOutRedIn = 0x50; // ClampedFloatParameter
		constexpr auto greenOutGreenIn = 0x58; // ClampedFloatParameter
		constexpr auto greenOutBlueIn = 0x60; // ClampedFloatParameter
		constexpr auto blueOutRedIn = 0x68; // ClampedFloatParameter
		constexpr auto blueOutGreenIn = 0x70; // ClampedFloatParameter
		constexpr auto blueOutBlueIn = 0x78; // ClampedFloatParameter
	}

	namespace n_Header {
		constexpr auto HeaderNamespace = 0x10; // string
		constexpr auto MustUnderstand = 0x18; // bool
		constexpr auto Name = 0x20; // string
		constexpr auto Value = 0x28; // object
	}

	namespace n_WaitHandle { // : MarshalByRefObject
		constexpr auto waitHandle = 0x18; // IntPtr
		constexpr auto safeWaitHandle = 0x20; // SafeWaitHandle
		constexpr auto hasThreadAffinity = 0x28; // bool
	}

	namespace n_SHA1Managed { // : SHA1
		constexpr auto _buffer = 0x28; // byte[]
		constexpr auto _count = 0x30; // long
		constexpr auto _stateSHA1 = 0x38; // uint[]
		constexpr auto _expandedBuffer = 0x40; // uint[]
	}

	namespace n_WallColliders { // : MonoBehaviour
		constexpr auto InPool = 0x18; // bool
		constexpr auto TargetWall = 0x20; // WallBuilder
		constexpr auto mColliderPool = 0x28; // Queue(BoxCollider)
		constexpr auto mColliderInUse = 0x30; // Queue(BoxCollider)
		constexpr auto mTemporaryUse = 0x38; // Queue(BoxCollider)
	}

	namespace n_XmlNotation { // : XmlNode
		constexpr auto publicId = 0x18; // string
		constexpr auto systemId = 0x20; // string
		constexpr auto name = 0x28; // string
	}

	namespace n_DocumentXPathNodeIterator_ElemDescendants { // : XPathNodeIterator
		constexpr auto nav = 0x18; // DocumentXPathNavigator
		constexpr auto level = 0x20; // int
		constexpr auto position = 0x24; // int
	}

	namespace n_GameScreen_SafeZone { // : MonoBehaviour
		constexpr auto Canvas = 0x18; // CanvasGroup
		constexpr auto Label = 0x20; // TextMeshProUGUI
		constexpr auto (TickIndex8)k__BackingField = 0x28; // int
		constexpr auto lastID = 0x2c; // int
	}

	namespace n_AndroidJavaException { // : Exception
		constexpr auto mJavaStackTrace = 0x88; // string
	}

	namespace n_ConvexResultCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _addSingleResult = 0x18; // ConvexResultCallback.AddSingleResultUnmanagedDelegate
		constexpr auto _needsCollision = 0x20; // ConvexResultCallback.NeedsCollisionUnmanagedDelegate
	}

	namespace n_GameScreen_BloodScreen { // : MonoBehaviour
		constexpr auto canvas = 0x18; // CanvasGroup
		constexpr auto Alpha = 0x20; // AnimationCurve
		constexpr auto (TickIndex8)k__BackingField = 0x28; // int
	}

	namespace n_CantedSight { // : MonoBehaviour
		constexpr auto PoolableAttachment = 0x18; // PoolableAttachment
		constexpr auto Type = 0x20; // ScopeType
		constexpr auto Body = 0x28; // MeshRenderer
		constexpr auto Cover = 0x30; // MeshRenderer
		constexpr auto Mask = 0x38; // GameObject
		constexpr auto AimPoint = 0x40; // Transform
		constexpr auto SwayPoint = 0x48; // Transform
		constexpr auto CantedFront = 0x50; // Transform
		constexpr auto SwayMax = 0x58; // float
		constexpr auto SwayValue = 0x5c; // float
		constexpr auto BlurOnAim = 0x60; // bool
		constexpr auto FocusDistance = 0x64; // float
		constexpr auto FocalLenght = 0x68; // float
		constexpr auto DistanceToEnableAim = 0x6c; // float
		constexpr auto RePositionAimPointByScale = 0x70; // bool
		constexpr auto RemovableObjects = 0x78; // GameObject[]
		constexpr auto ReticleSyncAxis = 0x80; // Axis
		constexpr auto ReticleSync = 0x88; // Transform
		constexpr auto TopSightParent = 0x90; // Transform
		constexpr auto (Item)k__BackingField = 0x98; // IAttachmentItem
		constexpr auto lod = 0xa0; // THPLod
	}

	namespace n_AssemblyConfigurationAttribute { // : Attribute
		constexpr auto m_configuration = 0x10; // string
	}

	namespace n_TrackBindingTypeAttribute { // : Attribute
		constexpr auto type = 0x10; // Type
		constexpr auto flags = 0x18; // TrackBindingFlags
	}

	namespace n_EncoderFallbackBuffer {
		constexpr auto charStart = 0x10; // char*
		constexpr auto charEnd = 0x18; // char*
		constexpr auto encoder = 0x20; // EncoderNLS
		constexpr auto setEncoder = 0x28; // bool
		constexpr auto bUsedEncoder = 0x29; // bool
		constexpr auto bFallingBack = 0x2a; // bool
		constexpr auto iRecursionCount = 0x2c; // int
	}

	namespace n_KinematicCharacterController { // : ICharacterController
		constexpr auto (Gravity)k__BackingField = 0x10; // float
		constexpr auto m_halfHeight = 0x14; // float
		constexpr auto m_ghostObject = 0x18; // PairCachingGhostObject
		constexpr auto m_convexShape = 0x20; // ConvexShape
		constexpr auto m_verticalVelocity = 0x28; // float
		constexpr auto m_verticalOffset = 0x2c; // float
		constexpr auto m_fallSpeed = 0x30; // float
		constexpr auto m_jumpSpeed = 0x34; // float
		constexpr auto m_maxJumpHeight = 0x38; // float
		constexpr auto m_maxSlopeRadians = 0x3c; // float
		constexpr auto m_maxSlopeCosine = 0x40; // float
		constexpr auto m_turnAngle = 0x44; // float
		constexpr auto m_stepHeight = 0x48; // float
		constexpr auto m_addedMargin = 0x4c; // float
		constexpr auto m_walkDirection = 0x50; // Vector3
		constexpr auto m_normalizedDirection = 0x5c; // Vector3
		constexpr auto m_currentPosition = 0x68; // Vector3
		constexpr auto m_currentStepOffset = 0x74; // float
		constexpr auto m_targetPosition = 0x78; // Vector3
		constexpr auto m_manifoldArray = 0x88; // AlignedManifoldArray
		constexpr auto m_touchingContact = 0x90; // bool
		constexpr auto m_touchingNormal = 0x94; // Vector3
		constexpr auto m_wasOnGround = 0xa0; // bool
		constexpr auto m_wasJumping = 0xa1; // bool
		constexpr auto m_useGhostObjectSweepTest = 0xa2; // bool
		constexpr auto m_upAxis = 0xa4; // int
		constexpr auto m_useWalkDirection = 0xa8; // bool
		constexpr auto m_velocityTimeInterval = 0xac; // float
		constexpr auto m_interpolateUp = 0xb0; // bool
		constexpr auto full_drop = 0xb1; // bool
		constexpr auto bounce_fix = 0xb2; // bool
	}

	namespace n_VoronoiSimplexSolver { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_DebugUI.Foldout { // : DebugUI.Container
		constexpr auto opened = 0x40; // bool
		constexpr auto (columnLabels)k__BackingField = 0x48; // string[]
	}

	namespace n_PKCS8.EncryptedPrivateKeyInfo {
		constexpr auto _algorithm = 0x10; // string
		constexpr auto _salt = 0x18; // byte[]
		constexpr auto _iterations = 0x20; // int
		constexpr auto _data = 0x28; // byte[]
	}

	namespace n_AlignedClusterArray { // : IList(Cluster)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_EventSystem { // : UIBehaviour
		constexpr auto m_SystemInputModules = 0x18; // List(BaseInputModule)
		constexpr auto m_CurrentInputModule = 0x20; // BaseInputModule
		constexpr auto m_FirstSelected = 0x28; // GameObject
		constexpr auto m_sendNavigationEvents = 0x30; // bool
		constexpr auto m_DragThreshold = 0x34; // int
		constexpr auto m_CurrentSelected = 0x38; // GameObject
		constexpr auto m_HasFocus = 0x40; // bool
		constexpr auto m_SelectionGuard = 0x41; // bool
		constexpr auto m_DummyData = 0x48; // BaseEventData
	}

	namespace n_NetworkRPC { // : Attribute
		constexpr auto Permissions = 0x10; // RPCPermissions
	}

	namespace n_PointerDispatchState {
		constexpr auto m_PendingPointerCapture = 0x10; // IEventHandler[]
		constexpr auto m_PointerCapture = 0x18; // IEventHandler[]
		constexpr auto m_ShouldSendCompatibilityMouseEvents = 0x20; // bool[]
	}

	namespace n_SchemaAttDef { // : SchemaDeclBase
		constexpr auto defExpanded = 0x60; // string
		constexpr auto lineNum = 0x68; // int
		constexpr auto linePos = 0x6c; // int
		constexpr auto valueLineNum = 0x70; // int
		constexpr auto valueLinePos = 0x74; // int
		constexpr auto reserved = 0x78; // SchemaAttDef.Reserve
	}

	namespace n_GunGameStepUI { // : MonoBehaviour
		constexpr auto mLastStep = 0x18; // int
		constexpr auto Left = 0x20; // GunGameStepUIElement
		constexpr auto Mid = 0x28; // GunGameStepUIElement
		constexpr auto Rigth = 0x30; // GunGameStepUIElement
	}

	namespace n_ColorGradingLutPass { // : ScriptableRenderPass
		constexpr auto m_LutBuilderLdr = 0x68; // Material
		constexpr auto m_LutBuilderHdr = 0x70; // Material
		constexpr auto m_HdrLutFormat = 0x78; // GraphicsFormat
		constexpr auto m_LdrLutFormat = 0x7c; // GraphicsFormat
		constexpr auto m_InternalLut = 0x80; // RenderTargetHandle
	}

	namespace n_CStreamReader { // : StreamReader
		constexpr auto driver = 0x68; // TermInfoDriver
	}

	namespace n_LoadoutToolSelectionElement { // : MonoBehaviour
		constexpr auto label_name = 0x18; // TextMeshProUGUI
		constexpr auto Icon = 0x20; // Image
		constexpr auto Flag = 0x28; // RawImage
		constexpr auto isLocked = 0x30; // GameObject
		constexpr auto rank_req = 0x38; // TextMeshProUGUI
		constexpr auto obj_color = 0x40; // RawImage
		constexpr auto obj2_color = 0x48; // RawImage
		constexpr auto Button = 0x50; // GraphicRevertedButton
		constexpr auto New = 0x58; // GameObject
		constexpr auto NewAttachments = 0x60; // GameObject
		constexpr auto NewAttachmentsLabel = 0x68; // TextMeshProUGUI
		constexpr auto Item = 0x70; // ITool
		constexpr auto isUnlocked = 0x78; // bool
		constexpr auto mLastCount = 0x7c; // int
		constexpr auto isSelected = 0x80; // bool
	}

	namespace n_VehicleTranformJobState {
		constexpr auto StopFlag = 0x10; // bool
		constexpr auto VehicleID = 0x14; // int
		constexpr auto ServerPosition = 0x18; // Vector3
		constexpr auto ServerRotation = 0x24; // Quaternion
		constexpr auto NetworkDelta = 0x34; // Vector3
		constexpr auto NetworkDeltaRotation = 0x40; // Quaternion
		constexpr auto LastReceivedStreamTime = 0x50; // float
		constexpr auto StreamRateDeltaTime = 0x54; // float
		constexpr auto StreamRate = 0x58; // int
		constexpr auto OutputPosition = 0x5c; // Vector3
		constexpr auto OutputRotation = 0x68; // Quaternion
	}

	namespace n_TextGenerator { // : IDisposable
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_LastString = 0x18; // string
		constexpr auto m_LastSettings = 0x20; // TextGenerationSettings
		constexpr auto m_HasGenerated = 0x80; // bool
		constexpr auto m_LastValid = 0x84; // TextGenerationError
		constexpr auto m_Verts = 0x88; // List(UIVertex)
		constexpr auto m_Characters = 0x90; // List(UICharInfo)
		constexpr auto m_Lines = 0x98; // List(UILineInfo)
		constexpr auto m_CachedVerts = 0xa0; // bool
		constexpr auto m_CachedCharacters = 0xa1; // bool
		constexpr auto m_CachedLines = 0xa2; // bool
	}

	namespace n_AnimationPlayableAsset { // : PlayableAsset
		constexpr auto m_Clip = 0x18; // AnimationClip
		constexpr auto m_Position = 0x20; // Vector3
		constexpr auto m_EulerAngles = 0x2c; // Vector3
		constexpr auto m_UseTrackMatchFields = 0x38; // bool
		constexpr auto m_MatchTargetFields = 0x3c; // MatchTargetFields
		constexpr auto m_RemoveStartOffset = 0x40; // bool
		constexpr auto m_ApplyFootIK = 0x41; // bool
		constexpr auto m_Loop = 0x44; // AnimationPlayableAsset.LoopMode
		constexpr auto (appliedOffsetMode)k__BackingField = 0x48; // AppliedOffsetMode
		constexpr auto m_Version = 0x4c; // int
		constexpr auto m_Rotation = 0x50; // Quaternion
	}

	namespace n_PickableManager { // : MonoBehaviour
		constexpr auto Items = 0x18; // PickableBase[]
		constexpr auto mView = 0x20; // NetView
		constexpr auto mUnityThreadIndexes = 0x28; // List(int)
		constexpr auto mThreadIndexes = 0x30; // List(int)
		constexpr auto mIndex = 0x38; // int
	}

	namespace n_Nature.Thunder {
		constexpr auto Thunders = 0x10; // ThunderItem[]
	}

	namespace n_MainMenuStatsTitle { // : MonoBehaviour
		constexpr auto Parent = 0x18; // MainMenuStats
		constexpr auto SelectedGameObj = 0x20; // GameObject
		constexpr auto List = 0x28; // GameObject
		constexpr auto TargetPage = 0x30; // GameObject
		constexpr auto Items = 0x38; // MainMenuStatsTitleItem[]
		constexpr auto wasSelected = 0x40; // bool
		constexpr auto selected = 0x48; // MainMenuStatsTitleItem
		constexpr auto OnNewItemSelected = 0x50; // UnityEvent
	}

	namespace n_PlayerEditorConnectionEvents {
		constexpr auto messageTypeSubscribers = 0x10; // List(PlayerEditorConnectionEvents.MessageTypeSubscribers)
		constexpr auto connectionEvent = 0x18; // PlayerEditorConnectionEvents.ConnectionChangeEvent
		constexpr auto disconnectionEvent = 0x20; // PlayerEditorConnectionEvents.ConnectionChangeEvent
	}

	namespace n_FirstPersonLoadoutManager.TransformCache {
		constexpr auto Transform = 0x10; // Transform
		constexpr auto Parent = 0x18; // Transform
		constexpr auto mPos = 0x20; // Vector3
		constexpr auto mRot = 0x2c; // Quaternion
	}

	namespace n_TriangleInfo { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_FilterSettings {
		constexpr auto rangeSlopeType = 0x10; // RangeCheckType
		constexpr auto rangeHeightType = 0x14; // RangeCheckType
		constexpr auto checkHeight = 0x18; // bool
		constexpr auto checkSlope = 0x19; // bool
		constexpr auto checkRangeHeight = 0x1a; // bool
		constexpr auto checkRangeSlope = 0x1b; // bool
		constexpr auto checkHeightType = 0x1c; // CheckType
		constexpr auto minHeight = 0x20; // float
		constexpr auto maxHeight = 0x24; // float
		constexpr auto rangeHeight = 0x28; // float
		constexpr auto minPermanentHeight = 0x2c; // float
		constexpr auto maxPermanentHeight = 0x30; // float
		constexpr auto heightFalloffType = 0x34; // FalloffType
		constexpr auto heightFalloffMinMax = 0x38; // bool
		constexpr auto minAddHeightFalloff = 0x3c; // float
		constexpr auto maxAddHeightFalloff = 0x40; // float
		constexpr auto minHeightFalloff = 0x44; // float
		constexpr auto maxHeightFalloff = 0x48; // float
		constexpr auto addHeightFalloff = 0x4c; // float
		constexpr auto heightNoiseFractal = 0x50; // FractalNoiseCPU
		constexpr auto heightFalloff = 0x58; // float
		constexpr auto heightNoise = 0x5c; // bool
		constexpr auto noiseFalloff = 0x60; // float
		constexpr auto maxRangeNoise = 0x64; // float
		constexpr auto minRangeNoise = 0x68; // float
		constexpr auto heightGradient = 0x70; // CustomGradient
		constexpr auto checkSlopeType = 0x78; // CheckType
		constexpr auto minSlope = 0x7c; // float
		constexpr auto maxSlope = 0x80; // float
		constexpr auto rangeSlope = 0x84; // float
		constexpr auto minPermanentSlope = 0x88; // float
		constexpr auto maxPermanentSlope = 0x8c; // float
		constexpr auto slopeFalloffType = 0x90; // FalloffType
		constexpr auto slopeFalloffMinMax = 0x94; // bool
		constexpr auto minAddSlopeFalloff = 0x98; // float
		constexpr auto maxAddSlopeFalloff = 0x9c; // float
		constexpr auto minSlopeFalloff = 0xa0; // float
		constexpr auto maxSlopeFalloff = 0xa4; // float
		constexpr auto slopeFalloff = 0xa8; // float
		constexpr auto addSlopeFalloff = 0xac; // float
		constexpr auto gradient = 0xb0; // CustomGradient
		constexpr auto checkTerrainTexturesList = 0xb8; // List(TerrainTexture)
		constexpr auto checkTextures = 0xc0; // bool
		constexpr auto minRemapTexture = 0xc4; // float
		constexpr auto maxRemapStrength = 0xc8; // float
		constexpr auto noiseTexture = 0xd0; // Texture2D
		constexpr auto fractal = 0xd8; // FractalNoiseCPU
		constexpr auto rangeMin = 0xe0; // float
		constexpr auto rangeMax = 0xe4; // float
		constexpr auto checkGlobalFractalNoise = 0xe8; // bool
		constexpr auto noisePreviewTexture = 0xe9; // bool
		constexpr auto remapNoiseMin = 0xec; // float
		constexpr auto remapNoiseMax = 0xf0; // float
		constexpr auto invert = 0xf4; // bool
		constexpr auto spawnProgress = 0xf8; // float
		constexpr auto cancelSpawn = 0xfc; // bool
		constexpr auto spawnComplete = 0xfd; // bool
	}

	namespace n_ClampedFloatParameter { // : FloatParameter
		constexpr auto min = 0x20; // float
		constexpr auto max = 0x24; // float
	}

	namespace n_PointerEventData { // : BaseEventData
		constexpr auto (pointerEnter)k__BackingField = 0x20; // GameObject
		constexpr auto m_PointerPress = 0x28; // GameObject
		constexpr auto (lastPress)k__BackingField = 0x30; // GameObject
		constexpr auto (rawPointerPress)k__BackingField = 0x38; // GameObject
		constexpr auto (pointerDrag)k__BackingField = 0x40; // GameObject
		constexpr auto (pointerCurrentRaycast)k__BackingField = 0x48; // RaycastResult
		constexpr auto (pointerPressRaycast)k__BackingField = 0x90; // RaycastResult
		constexpr auto hovered = 0xd8; // List(GameObject)
		constexpr auto (eligibleForClick)k__BackingField = 0xe0; // bool
		constexpr auto (pointerId)k__BackingField = 0xe4; // int
		constexpr auto (position)k__BackingField = 0xe8; // Vector2
		constexpr auto (delta)k__BackingField = 0xf0; // Vector2
		constexpr auto (pressPosition)k__BackingField = 0xf8; // Vector2
		constexpr auto (worldPosition)k__BackingField = 0x100; // Vector3
		constexpr auto (worldNormal)k__BackingField = 0x10c; // Vector3
		constexpr auto (clickTime)k__BackingField = 0x118; // float
		constexpr auto (clickCount)k__BackingField = 0x11c; // int
		constexpr auto (scrollDelta)k__BackingField = 0x120; // Vector2
		constexpr auto (useDragThreshold)k__BackingField = 0x128; // bool
		constexpr auto (dragging)k__BackingField = 0x129; // bool
		constexpr auto (button)k__BackingField = 0x12c; // PointerEventData.InputButton
	}

	namespace n_SupplyBox { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (lifeTime)k__BackingField = 0x1c; // float
		constexpr auto (inPool)k__BackingField = 0x20; // bool
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x21; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x24; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x28; // int
		constexpr auto (IsAttachedToAirDrop)k__BackingField = 0x2c; // bool
		constexpr auto (AttachedAirDrop)k__BackingField = 0x30; // AirDropBase
		constexpr auto BulletSupplyPoint = 0x38; // int
		constexpr auto FirstAidSupplyPoint = 0x3c; // int
		constexpr auto LightGadgetSupplyPoint = 0x40; // int
		constexpr auto HeavySupplyPoint = 0x44; // int
		constexpr auto ThrowableSupplyPoint = 0x48; // int
		constexpr auto AirDropOffset = 0x4c; // float
		constexpr auto LOD = 0x50; // DynamicLOD2
		constexpr auto (Core)k__BackingField = 0x58; // SupplyCore
		constexpr auto (Position)k__BackingField = 0x60; // Vector3
		constexpr auto (Rotation)k__BackingField = 0x6c; // Quaternion
		constexpr auto (NetView)k__BackingField = 0x80; // NetView
		constexpr auto (Rigidbody)k__BackingField = 0x88; // Rigidbody
		constexpr auto mUpdatePositionFlag = 0x90; // bool
		constexpr auto mLastStreamReceivedTime = 0x94; // float
		constexpr auto mServerPosition = 0x98; // Vector3
		constexpr auto mServerRotation = 0xa4; // Quaternion
		constexpr auto mNetworkPositionDelta = 0xb4; // Vector3
		constexpr auto mNetworkRotationDelta = 0xc0; // Quaternion
	}

	namespace n_CompoundShapeChild {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _childShape = 0x18; // CollisionShape
	}

	namespace n_PhysicsHandle { // : MonoBehaviour
		constexpr auto collidiers = 0x18; // List(CollisionObject)
	}

	namespace n_FrustumPlane {
		constexpr auto normal = 0x10; // Vector3
		constexpr auto distance = 0x1c; // float
		constexpr auto normalXNag = 0x20; // bool
		constexpr auto normalYNag = 0x21; // bool
		constexpr auto normalZNag = 0x22; // bool
	}

	namespace n_TerrainProp {
		constexpr auto Position = 0x10; // Vector3
		constexpr auto Rotation = 0x1c; // Quaternion
		constexpr auto Scale = 0x2c; // Vector3
		constexpr auto Referance = 0x38; // FoliageItem
		constexpr auto Bounds = 0x40; // Bounds
		constexpr auto Min = 0x58; // Vector3
		constexpr auto Max = 0x64; // Vector3
		constexpr auto WorldToLocal = 0x70; // Matrix4x4
	}

	namespace n_ManifoldPoint { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_CanvasCuller { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto AutoDetect = 0x1c; // bool
		constexpr auto CanvasGroups = 0x20; // List(CanvasGroup)
		constexpr auto GameObjects = 0x28; // List(GameObject)
		constexpr auto CheckForActive = 0x30; // bool
		constexpr auto mCanvas = 0x38; // Canvas
		constexpr auto mWasEnabled = 0x40; // bool
		constexpr auto mCount = 0x44; // int
		constexpr auto mCountG = 0x48; // int
	}

	namespace n_TimerThread.Timer { // : IDisposable
		constexpr auto m_StartTimeMilliseconds = 0x10; // int
		constexpr auto m_DurationMilliseconds = 0x14; // int
	}

	namespace n_CreateAssetMenuAttribute { // : Attribute
		constexpr auto (menuName)k__BackingField = 0x10; // string
		constexpr auto (fileName)k__BackingField = 0x18; // string
		constexpr auto (order)k__BackingField = 0x20; // int
	}

	namespace n_OverlayBehaviour { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto InGameScores = 0x20; // Canvas
		constexpr auto LogUI = 0x28; // OverlayBehaviour.Log
		constexpr auto AnnouncementUI = 0x30; // OverlayBehaviour.Announcement
		constexpr auto MapUI = 0x38; // OverlayBehaviour.Map
	}

	namespace n_RenderPassResources { // : ScriptableObject
		constexpr auto Debris = 0x18; // RenderPassResources.DebrisPass
		constexpr auto PostProcesses = 0x20; // PostProcess[]
	}

	namespace n_TestRangeTarget { // : MonoBehaviour
		constexpr auto DefaultState = 0x18; // Vector3
		constexpr auto HitState = 0x24; // Vector3
		constexpr auto ReAlive = 0x30; // float
		constexpr auto OriginPoint = 0x38; // Transform
		constexpr auto toStandUp = 0x40; // float
	}

	namespace n_PolarDecomposition { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_TaskCanceledException { // : OperationCanceledException
		constexpr auto m_canceledTask = 0x90; // Task
	}

	namespace n_MapUIBehaviour { // : MonoBehaviour
		constexpr auto MainCanvas = 0x18; // CanvasGroup
		constexpr auto RotationPoint = 0x20; // RectTransform
		constexpr auto WorldObject = 0x28; // GameObject
		constexpr auto WorldBehaviour = 0x30; // MapWorldBehaviour
		constexpr auto RectTransform = 0x38; // RectTransform
		constexpr auto ScreenRect = 0x40; // Rect
		constexpr auto isActive = 0x50; // bool
		constexpr auto m_canvasVisible = 0x51; // bool
		constexpr auto m_canvasBlocksRaycasts = 0x52; // bool
		constexpr auto mMainCanvasAlpha = 0x54; // float
		constexpr auto mUpdateCanvasAlphaFlag = 0x58; // bool
		constexpr auto (isHovering)k__BackingField = 0x59; // bool
		constexpr auto mPointerInside = 0x5a; // bool
	}

	namespace n_PointerInputModule.ButtonState {
		constexpr auto m_Button = 0x10; // PointerEventData.InputButton
		constexpr auto m_EventData = 0x18; // PointerInputModule.MouseButtonEventData
	}

	namespace n_FrontlineLayer { // : MonoBehaviour
		constexpr auto (SafeZoneOfTeamAEnabled)k__BackingField = 0x18; // bool
		constexpr auto (SafeZoneOfTeamBEnabled)k__BackingField = 0x19; // bool
		constexpr auto Flags = 0x20; // Flag[]
		constexpr auto Bounds = 0x28; // GamemodeBounds[]
	}

	namespace n_MeshBuilder {
		constexpr auto VertexBuffer = 0x10; // byte[]
		constexpr auto TrissBuffer = 0x18; // ushort[]
		constexpr auto vertexPosition = 0x20; // int
		constexpr auto trissPosition = 0x24; // int
		constexpr auto NumberOfVerticles = 0x28; // int
	}

	namespace n_GUITargetAttribute { // : Attribute
		constexpr auto displayMask = 0x10; // int
	}

	namespace n_CollisionAlgorithm { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_RuntimeCompatibilityAttribute { // : Attribute
		constexpr auto m_wrapNonExceptionThrows = 0x10; // bool
	}

	namespace n_ToolThpOffsets.Offset {
		constexpr auto Position = 0x10; // Vector3
		constexpr auto Rotation = 0x1c; // Vector3
	}

	namespace n_SquadAbilityAirDropBehaviour { // : SquadAbilityBehaviour
		constexpr auto HeightToSpawn = 0x78; // float
		constexpr auto PrefabToSpawn = 0x80; // GameObject
		constexpr auto AirDrop = 0x88; // AirDropBase
	}

	namespace n_AlignedNodeArrayDebugView {
		constexpr auto _array = 0x10; // AlignedNodeArray
	}

	namespace n_DelegateSerializationHolder.DelegateEntry {
		constexpr auto type = 0x10; // string
		constexpr auto assembly = 0x18; // string
		constexpr auto target = 0x20; // object
		constexpr auto targetTypeAssembly = 0x28; // string
		constexpr auto targetTypeName = 0x30; // string
		constexpr auto methodName = 0x38; // string
		constexpr auto delegateEntry = 0x40; // DelegateSerializationHolder.DelegateEntry
	}

	namespace n_HeightmapNew {
		constexpr auto widthY = 0x10; // int
		constexpr auto heightX = 0x14; // int
		constexpr auto heights = 0x18; // float[,]
		constexpr auto wasHeightmapSerialised = 0x20; // bool
	}

	namespace n_DefaultCollisionConstructionInfo { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_PackingAttribute { // : Attribute
		constexpr auto displayNames = 0x10; // string[]
		constexpr auto range = 0x18; // float[]
		constexpr auto packingScheme = 0x20; // FieldPacking
		constexpr auto offsetInSource = 0x24; // int
		constexpr auto sizeInBits = 0x28; // int
		constexpr auto isDirection = 0x2c; // bool
		constexpr auto sRGBDisplay = 0x2d; // bool
	}

	namespace n_VolumeStack { // : IDisposable
		constexpr auto components = 0x10; // Dictionary(Type, VolumeComponent)
	}

	namespace n_OptionalFieldAttribute { // : Attribute
		constexpr auto versionAdded = 0x10; // int
	}

	namespace n_TMP_MaterialManager.FallbackMaterial {
		constexpr auto fallbackID = 0x10; // long
		constexpr auto sourceMaterial = 0x18; // Material
		constexpr auto sourceMaterialCRC = 0x20; // int
		constexpr auto fallbackMaterial = 0x28; // Material
		constexpr auto count = 0x30; // int
	}

	namespace n_Light2DManager { // : IDisposable
		constexpr auto m_PrevInstance = 0x10; // Light2DManager
		constexpr auto m_Lights = 0x18; // List(Light2D)[]
		constexpr auto m_CullingGroup = 0x20; // CullingGroup
		constexpr auto m_BoundingSpheres = 0x28; // BoundingSphere[]
	}

	namespace n_Sphere {
		constexpr auto position = 0x10; // Vector3
		constexpr auto radius = 0x1c; // float
		constexpr auto priority = 0x20; // int
	}

	namespace n_AssemblyName { // : ICloneable
		constexpr auto name = 0x10; // string
		constexpr auto codebase = 0x18; // string
		constexpr auto major = 0x20; // int
		constexpr auto minor = 0x24; // int
		constexpr auto build = 0x28; // int
		constexpr auto revision = 0x2c; // int
		constexpr auto cultureinfo = 0x30; // CultureInfo
		constexpr auto flags = 0x38; // AssemblyNameFlags
		constexpr auto hashalg = 0x3c; // AssemblyHashAlgorithm
		constexpr auto keypair = 0x40; // StrongNameKeyPair
		constexpr auto publicKey = 0x48; // byte[]
		constexpr auto keyToken = 0x50; // byte[]
		constexpr auto versioncompat = 0x58; // AssemblyVersionCompatibility
		constexpr auto version = 0x60; // Version
		constexpr auto processor_architecture = 0x68; // ProcessorArchitecture
		constexpr auto contentType = 0x6c; // AssemblyContentType
	}

	namespace n_AlignedMaterialArrayEnumerator { // : IEnumerator(Material)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedMaterialArray
	}

	namespace n_Feature { // : Element
		constexpr auto _material = 0x18; // Material
	}

	namespace n_MaskableGraphic { // : Graphic
		constexpr auto m_ShouldRecalculateStencil = 0x90; // bool
		constexpr auto m_MaskMaterial = 0x98; // Material
		constexpr auto m_ParentMask = 0xa0; // RectMask2D
		constexpr auto m_Maskable = 0xa8; // bool
		constexpr auto m_IsMaskingGraphic = 0xa9; // bool
		constexpr auto m_IncludeForMasking = 0xaa; // bool
		constexpr auto m_OnCullStateChanged = 0xb0; // MaskableGraphic.CullStateChangedEvent
		constexpr auto m_ShouldRecalculate = 0xb8; // bool
		constexpr auto m_StencilValue = 0xbc; // int
		constexpr auto m_Corners = 0xc0; // Vector3[]
	}

	namespace n_AxisEmulator {
		constexpr auto Key = 0x10; // KeyCode
		constexpr auto Value = 0x14; // float
	}

	namespace n_MasterServerConnectionServer.request {
		constexpr auto Requested = 0x10; // bool
		constexpr auto Content = 0x18; // Stream
		constexpr auto Callback = 0x20; // Action(Stream, object, object)
		constexpr auto UserCallback = 0x28; // object
		constexpr auto UserObject = 0x30; // object
	}

	namespace n_RenderGraph {
		constexpr auto m_Resources = 0x10; // RenderGraphResourceRegistry
		constexpr auto m_RenderGraphPool = 0x18; // RenderGraphObjectPool
		constexpr auto m_RenderPasses = 0x20; // List(RenderGraph.RenderPass)
		constexpr auto m_RendererLists = 0x28; // List(RenderGraphResource)
		constexpr auto m_DebugParameters = 0x30; // RenderGraphDebugParams
		constexpr auto m_Logger = 0x38; // RenderGraphLogger
	}

	namespace n_MD4Managed { // : MD4
		constexpr auto state = 0x28; // uint[]
		constexpr auto buffer = 0x30; // byte[]
		constexpr auto count = 0x38; // uint[]
		constexpr auto x = 0x40; // uint[]
		constexpr auto digest = 0x48; // byte[]
	}

	namespace n_YogaNode {
		constexpr auto _ygNode = 0x10; // IntPtr
		constexpr auto _measureFunction = 0x18; // MeasureFunction
		constexpr auto _baselineFunction = 0x20; // BaselineFunction
	}

	namespace n_AbandonedMutexException { // : SystemException
		constexpr auto m_MutexIndex = 0x88; // int
		constexpr auto m_Mutex = 0x90; // Mutex
	}

	namespace n_DbvtAabbMm {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_OverlayBehaviour.Log {
		constexpr auto LogRect = 0x10; // RectTransform
		constexpr auto Canvas = 0x18; // Canvas
		constexpr auto List = 0x20; // VerticalList
		constexpr auto ConnectionPool = 0x28; // UIPool(LogConnection)
		constexpr auto KillPool = 0x30; // UIPool(LogKill)
		constexpr auto LogConnectionPrefab = 0x38; // GameObject
		constexpr auto LogKillPrefab = 0x40; // GameObject
		constexpr auto ListParent = 0x48; // Transform
	}

	namespace n_Dna.NameInfo {
		constexpr auto (Name)k__BackingField = 0x10; // string
		constexpr auto (IsPointer)k__BackingField = 0x18; // bool
		constexpr auto (Dim0)k__BackingField = 0x1c; // int
		constexpr auto (Dim1)k__BackingField = 0x20; // int
	}

	namespace n_XmlDownloadManager {
		constexpr auto connections = 0x10; // Hashtable
	}

	namespace n_BrickInstanceBehaviour { // : MonoBehaviour
		constexpr auto Rigidbody = 0x18; // Rigidbody
		constexpr auto Interpolation = 0x20; // RigidbodyInterpolationBehaviour
		constexpr auto MeshRenderer = 0x28; // MeshRenderer
		constexpr auto mLastColorIndex = 0x30; // int
	}

	namespace n_LoadingIcon { // : MonoBehaviour
		constexpr auto Speed = 0x18; // float
	}

	namespace n_VFXEventBinderBase { // : MonoBehaviour
		constexpr auto target = 0x18; // VisualEffect
		constexpr auto EventName = 0x20; // string
		constexpr auto eventAttribute = 0x28; // VFXEventAttribute
	}

	namespace n_Volume { // : MonoBehaviour
		constexpr auto isGlobal = 0x18; // bool
		constexpr auto priority = 0x1c; // float
		constexpr auto blendDistance = 0x20; // float
		constexpr auto weight = 0x24; // float
		constexpr auto sharedProfile = 0x28; // VolumeProfile
		constexpr auto m_PreviousLayer = 0x30; // int
		constexpr auto m_PreviousPriority = 0x34; // float
		constexpr auto m_InternalProfile = 0x38; // VolumeProfile
	}

	namespace n_DynamicLOD { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto SelfInitizlie = 0x1c; // bool
		constexpr auto AutoUpdatePosition = 0x1d; // bool
		constexpr auto LOD0Static = 0x20; // List(Renderer)
		constexpr auto LOD0ScreenHeight = 0x28; // float
		constexpr auto LOD1Static = 0x30; // List(Renderer)
		constexpr auto LOD1ScreenHeight = 0x38; // float
		constexpr auto LOD2Static = 0x40; // List(Renderer)
		constexpr auto LOD2ScreenHeight = 0x48; // float
		constexpr auto LOD3Static = 0x50; // List(Renderer)
		constexpr auto LOD3ScreenHeight = 0x58; // float
		constexpr auto VerticalRadius = 0x5c; // float
		constexpr auto TeamGUI = 0x60; // TeamGUI
		constexpr auto ScreenHeightRaw = 0x68; // float
		constexpr auto Position = 0x6c; // Vector3
		constexpr auto inFrustum = 0x78; // bool
		constexpr auto ScreenHeight = 0x7c; // float
		constexpr auto isActive = 0x80; // bool
		constexpr auto m_activeLOD = 0x84; // int
		constexpr auto m_targetLOD = 0x88; // int
		constexpr auto VerticalRadiusSqr = 0x8c; // float
		constexpr auto HasTeamGUI = 0x90; // bool
	}

	namespace n_ActionInterfaceWrapper { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _actionInterface = 0x18; // IAction
		constexpr auto _world = 0x20; // DynamicsWorld
		constexpr auto _debugDraw = 0x28; // ActionInterfaceWrapper.DebugDrawUnmanagedDelegate
		constexpr auto _updateAction = 0x30; // ActionInterfaceWrapper.UpdateActionUnmanagedDelegate
	}

	namespace n_XmlException { // : SystemException
		constexpr auto res = 0x88; // string
		constexpr auto args = 0x90; // string[]
		constexpr auto lineNumber = 0x98; // int
		constexpr auto linePosition = 0x9c; // int
		constexpr auto sourceUri = 0xa0; // string
		constexpr auto message = 0xa8; // string
	}

	namespace n_DebugUI.Button { // : DebugUI.Widget
		constexpr auto (action)k__BackingField = 0x38; // Action
	}

	namespace n_Barrel { // : MonoBehaviour
		constexpr auto PoolableAttachment = 0x18; // PoolableAttachment
		constexpr auto Body = 0x20; // MeshRenderer
		constexpr auto (Item)k__BackingField = 0x28; // IAttachmentItem
		constexpr auto mAttachmentComponets = 0x30; // IAttachmentChild[]
		constexpr auto lod = 0x38; // THPLod
	}

	namespace n_DebuggerBrowsableAttribute { // : Attribute
		constexpr auto state = 0x10; // DebuggerBrowsableState
	}

	namespace n_GUIScrollGroup { // : GUILayoutGroup
		constexpr auto calcMinWidth = 0x90; // float
		constexpr auto calcMaxWidth = 0x94; // float
		constexpr auto calcMinHeight = 0x98; // float
		constexpr auto calcMaxHeight = 0x9c; // float
		constexpr auto clientWidth = 0xa0; // float
		constexpr auto clientHeight = 0xa4; // float
		constexpr auto allowHorizontalScroll = 0xa8; // bool
		constexpr auto allowVerticalScroll = 0xa9; // bool
		constexpr auto needsHorizontalScrollbar = 0xaa; // bool
		constexpr auto needsVerticalScrollbar = 0xab; // bool
		constexpr auto horizontalScrollbar = 0xb0; // GUIStyle
		constexpr auto verticalScrollbar = 0xb8; // GUIStyle
	}

	namespace n_RC2 { // : SymmetricAlgorithm
		constexpr auto EffectiveKeySizeValue = 0x48; // int
	}

	namespace n_ConvexHullShape { // : PolyhedralConvexAabbCachingShape
		constexpr auto _points = 0x30; // Vector3Array
		constexpr auto _unscaledPoints = 0x38; // Vector3Array
	}

	namespace n_Coroutine { // : YieldInstruction
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_StandardTaskContinuation { // : TaskContinuation
		constexpr auto m_task = 0x10; // Task
		constexpr auto m_options = 0x18; // TaskContinuationOptions
		constexpr auto m_taskScheduler = 0x20; // TaskScheduler
	}

	namespace n_RangeContentValidator { // : ContentValidator
		constexpr auto firstpos = 0x18; // BitSet
		constexpr auto followpos = 0x20; // BitSet[]
		constexpr auto positionsWithRangeTerminals = 0x28; // BitSet
		constexpr auto symbols = 0x30; // SymbolsDictionary
		constexpr auto positions = 0x38; // Positions
		constexpr auto minMaxNodesCount = 0x40; // int
		constexpr auto endMarkerPos = 0x44; // int
	}

	namespace n_EventCallbackFunctorBase {
		constexpr auto (phase)k__BackingField = 0x10; // CallbackPhase
	}

	namespace n_AlignedIndexedMeshArrayDebugView {
		constexpr auto _array = 0x10; // AlignedIndexedMeshArray
	}

	namespace n_BlackScreen { // : MonoBehaviour
		constexpr auto img = 0x18; // RawImage
		constexpr auto canvas = 0x20; // Canvas
		constexpr auto group = 0x28; // CanvasGroup
		constexpr auto speed = 0x30; // float
		constexpr auto visible = 0x34; // bool
	}

	namespace n_TMP_Dropdown.DropdownItem { // : MonoBehaviour
		constexpr auto m_Text = 0x18; // TMP_Text
		constexpr auto m_Image = 0x20; // Image
		constexpr auto m_RectTransform = 0x28; // RectTransform
		constexpr auto m_Toggle = 0x30; // Toggle
	}

	namespace n_InternalEncoderBestFitFallback { // : EncoderFallback
		constexpr auto encoding = 0x18; // Encoding
		constexpr auto arrayBestFit = 0x20; // char[]
	}

	namespace n_PoolableTool { // : MonoBehaviour
		constexpr auto Renderers = 0x18; // Renderer[]
		constexpr auto ParentKeyID = 0x20; // int
		constexpr auto Transform = 0x28; // Transform
		constexpr auto Animation = 0x30; // Animation
		constexpr auto AudioSource = 0x38; // AudioSource
		constexpr auto WeaponComponent = 0x40; // WeaponManager
		constexpr auto GadgetComponent = 0x48; // GadgetManager
		constexpr auto mRendererCount = 0x50; // int
		constexpr auto mIsVisible = 0x54; // bool
		constexpr auto mInitialized = 0x55; // bool
		constexpr auto mIsFriendly = 0x56; // bool
		constexpr auto mIsLayerSet = 0x57; // bool
	}

	namespace n_RoundTimer {
		constexpr auto InitialSeconds = 0x10; // int
		constexpr auto CountdownEndNetworkTime = 0x14; // float
	}

	namespace n_Cull {
		constexpr auto Center = 0x10; // Vector3
		constexpr auto Radius = 0x1c; // float
	}

	namespace n_SteeringWheel { // : SeatBehaviour
		constexpr auto Mesh = 0x48; // Transform
		constexpr auto lastUpdate = 0x50; // float
		constexpr auto wheel = 0x54; // float
		constexpr auto instance_fp = 0x58; // GameObject
		constexpr auto instance_fpmesh = 0x60; // Transform
		constexpr auto transport = 0x68; // TransportBehaviour
	}

	namespace n_DrawObjectsPass { // : ScriptableRenderPass
		constexpr auto m_FilteringSettings = 0x68; // FilteringSettings
		constexpr auto m_RenderStateBlock = 0x80; // RenderStateBlock
		constexpr auto m_ShaderTagIdList = 0xf0; // List(ShaderTagId)
		constexpr auto m_ProfilerTag = 0xf8; // string
		constexpr auto m_ProfilingSampler = 0x100; // ProfilingSampler
		constexpr auto m_IsOpaque = 0x108; // bool
	}

	namespace n_FoliageItem { // : ScriptableObject
		constexpr auto RuntimeID = 0x18; // int
		constexpr auto Bounding = 0x1c; // FoliageBounding
		constexpr auto Center = 0x20; // Vector3
		constexpr auto BoundingBoxSize = 0x2c; // Vector3
		constexpr auto BoundingSphereRadius = 0x38; // float
		constexpr auto MimimumVelocity = 0x3c; // float
		constexpr auto MaximumVelocity = 0x40; // float
		constexpr auto MimimumVolume = 0x44; // float
		constexpr auto MaximumVolume = 0x48; // float
		constexpr auto RadiusOfSound = 0x4c; // float
		constexpr auto PlayInterval = 0x50; // float
		constexpr auto Low = 0x58; // AudioClip[]
		constexpr auto Medium = 0x60; // AudioClip[]
		constexpr auto Harsh = 0x68; // AudioClip[]
		constexpr auto halfBoundingBox = 0x70; // Vector3
		constexpr auto sqrSphere = 0x7c; // float
		constexpr auto _bound = 0x80; // Bounds
		constexpr auto rng = 0x98; // Random
		constexpr auto lastRandoms = 0xa0; // int[]
	}

	namespace n_OverlayChat { // : MonoBehaviour
		constexpr auto Parent = 0x18; // Transform
		constexpr auto ElementPrefab = 0x20; // GameObject
		constexpr auto InputField = 0x28; // TMP_InputField
		constexpr auto InputColor = 0x30; // RawImage
		constexpr auto canvas = 0x38; // CanvasGroup
		constexpr auto canvasRect = 0x40; // Canvas
		constexpr auto Raycaster = 0x48; // GraphicRaycaster
		constexpr auto active = 0x50; // List(RectTransform)
		constexpr auto pool = 0x58; // UIPool(TextMeshProUGUI)
		constexpr auto removeQueue = 0x60; // Queue(RectTransform)
		constexpr auto type = 0x68; // ChatType
		constexpr auto onDeployScreen = 0x6c; // bool
		constexpr auto lastEntry = 0x70; // float
		constexpr auto (TickIndex8)k__BackingField = 0x74; // int
		constexpr auto lastAlpha = 0x78; // float
	}

	namespace n_GameScreen_SeatChanging { // : MonoBehaviour
		constexpr auto ETA = 0x18; // float
		constexpr auto initialETA = 0x1c; // float
		constexpr auto onDone = 0x20; // Action(int)
		constexpr auto Index = 0x28; // int
		constexpr auto code = 0x2c; // KeyCode
		constexpr auto Value = 0x30; // Image
		constexpr auto mRegistered = 0x38; // bool
		constexpr auto (TickIndex8)k__BackingField = 0x3c; // int
	}

	namespace n_DebrisRegion.FrameBuffer {
		constexpr auto RenderBuffer = 0x10; // Matrix4x4[]
		constexpr auto ColorIDBuffer = 0x18; // int[]
		constexpr auto BufferCount = 0x20; // int
	}

	namespace n_CompoundPrimitiveManager { // : PrimitiveManagerBase
		constexpr auto _compoundShape = 0x18; // GImpactCompoundShape
	}

	namespace n_EditSettings {
		constexpr auto editTools = 0x10; // EditTools
		constexpr auto mouseRaycastMode = 0x14; // EditMouseRaycastMode
		constexpr auto rotationType = 0x18; // RotationType
		constexpr auto scaleType = 0x1c; // ScaleType
		constexpr auto mouseScaleSettings = 0x20; // MouseSettings
		constexpr auto mouseRotationSettings = 0x28; // MouseSettings
		constexpr auto mouseMoveAlongDirectionSettings = 0x30; // MouseSettings
		constexpr auto radius = 0x38; // float
		constexpr auto drawOnlyPriorityRadius = 0x3c; // bool
		constexpr auto findGameObjectLayers = 0x40; // LayerMask
		constexpr auto dragToLayers = 0x44; // LayerMask
		constexpr auto findGameObject = 0x48; // Transform
		constexpr auto objectGlobalScaleAtSessionStart = 0x50; // Vector3
		constexpr auto objectPositionAtSessionBegin = 0x5c; // Vector3
		constexpr auto cursorPosAtSessionStart = 0x68; // Vector2
	}

	namespace n_GUIStyleState {
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_SourceStyle = 0x18; // GUIStyle
	}

	namespace n_ActivityTracker {
		constexpr auto m_current = 0x10; // AsyncLocal(ActivityTracker.ActivityInfo)
		constexpr auto m_checkedForEnable = 0x18; // bool
	}

	namespace n_TranslationalLimitMotor { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_VFXPositionBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Transform
	}

	namespace n_FileWebRequest { // : WebRequest
		constexpr auto m_connectionGroupName = 0x38; // string
		constexpr auto m_contentLength = 0x40; // long
		constexpr auto m_credentials = 0x48; // ICredentials
		constexpr auto m_fileAccess = 0x50; // FileAccess
		constexpr auto m_headers = 0x58; // WebHeaderCollection
		constexpr auto m_method = 0x60; // string
		constexpr auto m_proxy = 0x68; // IWebProxy
		constexpr auto m_readerEvent = 0x70; // ManualResetEvent
		constexpr auto m_readPending = 0x78; // bool
		constexpr auto m_response = 0x80; // WebResponse
		constexpr auto m_stream = 0x88; // Stream
		constexpr auto m_syncHint = 0x90; // bool
		constexpr auto m_timeout = 0x94; // int
		constexpr auto m_uri = 0x98; // Uri
		constexpr auto m_writePending = 0xa0; // bool
		constexpr auto m_writing = 0xa1; // bool
		constexpr auto m_WriteAResult = 0xa8; // LazyAsyncResult
		constexpr auto m_ReadAResult = 0xb0; // LazyAsyncResult
		constexpr auto m_Aborted = 0xb8; // int
	}

	namespace n_SocketManager {
		constexpr auto (Interface)k__BackingField = 0x10; // ISocketManager
		constexpr auto Connecting = 0x18; // List(Connection)
		constexpr auto Connected = 0x20; // List(Connection)
		constexpr auto pollGroup = 0x28; // HSteamNetPollGroup
	}

	namespace n_PrototypeGameObject { // : Prototype
		constexpr auto precisionPastTransform = 0x20; // PrecisionPastTransform
		constexpr auto extents = 0x28; // Vector3
		constexpr auto pivotOffset = 0x34; // Vector3
		constexpr auto additionalSpawnSettings = 0x40; // AdditionalSpawnSettings
		constexpr auto failureSettings = 0x48; // FailureSettings
		constexpr auto intersectSettings = 0x50; // IntersectSettings
		constexpr auto flagsSettings = 0x58; // FlagsSettings
		constexpr auto transformModules = 0x60; // TransformComponents
		constexpr auto filterSettings = 0x68; // FilterSettings
		constexpr auto eraseFilterSettings = 0x70; // FilterSettings
	}

	namespace n_IOSelectorJob { // : IThreadPoolWorkItem
		constexpr auto operation = 0x10; // IOOperation
		constexpr auto callback = 0x18; // IOAsyncCallback
		constexpr auto state = 0x20; // IOAsyncResult
	}

	namespace n_GimPair { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_AmmoKitStanding { // : ReplicaGadget
		constexpr auto Item = 0x48; // AGadget
		constexpr auto GUI = 0x50; // TeamGUI
		constexpr auto LOD = 0x58; // DynamicDistanceBasedLOD
		constexpr auto Core = 0x60; // SupplyCore
		constexpr auto rigid = 0x68; // Rigidbody
		constexpr auto mServerSupply = 0x70; // float
		constexpr auto uploadFlag = 0x74; // bool
		constexpr auto clientVelocity = 0x78; // Vector3
		constexpr auto clientPosition = 0x84; // Vector3
		constexpr auto serverPosition = 0x90; // Vector3
		constexpr auto clientRotation = 0x9c; // Quaternion
		constexpr auto serverRotation = 0xac; // Quaternion
		constexpr auto client2serverMovement = 0xbc; // Vector3
		constexpr auto timeServerTookOwner = 0xc8; // float
	}

	namespace n_TypeForwardedFromAttribute { // : Attribute
		constexpr auto assemblyFullName = 0x10; // string
	}

	namespace n_VolumeProfile { // : ScriptableObject
		constexpr auto components = 0x18; // List(VolumeComponent)
		constexpr auto isDirty = 0x20; // bool
	}

	namespace n_EventSource { // : IDisposable
		constexpr auto providerMetadata = 0x10; // byte[]
		constexpr auto m_name = 0x18; // string
		constexpr auto m_id = 0x20; // int
		constexpr auto m_guid = 0x24; // Guid
		constexpr auto m_eventData = 0x38; // EventSource.EventMetadata[]
		constexpr auto m_rawManifest = 0x40; // byte[]
		constexpr auto m_eventCommandExecuted = 0x48; // EventHandler(EventCommandEventArgs)
		constexpr auto m_config = 0x50; // EventSourceSettings
		constexpr auto m_eventSourceEnabled = 0x54; // bool
		constexpr auto m_level = 0x58; // EventLevel
		constexpr auto m_matchAnyKeyword = 0x60; // EventKeywords
		constexpr auto m_Dispatchers = 0x68; // EventDispatcher
		constexpr auto m_provider = 0x70; // EventSource.OverideEventProvider
		constexpr auto m_completelyInited = 0x78; // bool
		constexpr auto m_constructionException = 0x80; // Exception
		constexpr auto m_outOfBandMessageCount = 0x88; // byte
		constexpr auto m_deferredCommands = 0x90; // EventCommandEventArgs
		constexpr auto m_traits = 0x98; // string[]
		constexpr auto m_curLiveSessions = 0xa0; // SessionMask
		constexpr auto m_etwSessionIdMap = 0xa8; // EtwSession[]
		constexpr auto m_legacySessions = 0xb0; // List(EtwSession)
		constexpr auto m_keywordTriggers = 0xb8; // long
		constexpr auto m_activityFilteringForETWEnabled = 0xc0; // SessionMask
		constexpr auto m_activityTracker = 0xc8; // ActivityTracker
	}

	namespace n_CalendarData {
		constexpr auto sNativeName = 0x10; // string
		constexpr auto saShortDates = 0x18; // string[]
		constexpr auto saYearMonths = 0x20; // string[]
		constexpr auto saLongDates = 0x28; // string[]
		constexpr auto sMonthDay = 0x30; // string
		constexpr auto saEraNames = 0x38; // string[]
		constexpr auto saAbbrevEraNames = 0x40; // string[]
		constexpr auto saAbbrevEnglishEraNames = 0x48; // string[]
		constexpr auto saDayNames = 0x50; // string[]
		constexpr auto saAbbrevDayNames = 0x58; // string[]
		constexpr auto saSuperShortDayNames = 0x60; // string[]
		constexpr auto saMonthNames = 0x68; // string[]
		constexpr auto saAbbrevMonthNames = 0x70; // string[]
		constexpr auto saMonthGenitiveNames = 0x78; // string[]
		constexpr auto saAbbrevMonthGenitiveNames = 0x80; // string[]
		constexpr auto saLeapYearMonthNames = 0x88; // string[]
		constexpr auto iTwoDigitYearMax = 0x90; // int
		constexpr auto iCurrentEra = 0x94; // int
		constexpr auto bUseUserOverrides = 0x98; // bool
	}

	namespace n_VisualTreeUpdater {
		constexpr auto m_UpdaterArray = 0x10; // VisualTreeUpdater.UpdaterArray
	}

	namespace n_RuntimeVehicleHitBox {
		constexpr auto Areas = 0x10; // Bounds[]
		constexpr auto Damages = 0x18; // float[]
	}

	namespace n_InvokeHandle { // : IFastListItemA
		constexpr auto Target = 0x10; // Action
		constexpr auto CallTime = 0x18; // float
		constexpr auto (FastListIndexA)k__BackingField = 0x1c; // int
	}

	namespace n_SuicideRushUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_SuicideC4 { // : GadgetManager
		constexpr auto Explosion = 0xd0; // GameObject
		constexpr auto switchingEta = 0xd8; // float
		constexpr auto busy = 0xdc; // float
	}

	namespace n_Task { // : IThreadPoolWorkItem
		constexpr auto m_taskId = 0x10; // int
		constexpr auto m_action = 0x18; // object
		constexpr auto m_stateObject = 0x20; // object
		constexpr auto m_taskScheduler = 0x28; // TaskScheduler
		constexpr auto m_parent = 0x30; // Task
		constexpr auto m_stateFlags = 0x38; // int
		constexpr auto m_continuationObject = 0x40; // object
		constexpr auto m_contingentProperties = 0x48; // Task.ContingentProperties
	}

	namespace n_Transport { // : Vehicle
		constexpr auto Gears = 0x120; // Gear[]
		constexpr auto Break = 0x128; // float
		constexpr auto Gravity = 0x12c; // float
		constexpr auto AntiRoll = 0x130; // float
		constexpr auto MinSteerAngle = 0x134; // float
		constexpr auto MaxSteerAngle = 0x138; // float
		constexpr auto AudioGas = 0x140; // AudioClip
		constexpr auto AudioIdle = 0x148; // AudioClip
		constexpr auto AudioFoley = 0x150; // AudioClip
		constexpr auto AudioTireSkids = 0x158; // AudioClip
		constexpr auto AudioWaterMovement = 0x160; // AudioClip
		constexpr auto AudioHorn = 0x168; // AudioClip
		constexpr auto AudioEngineFail = 0x170; // AudioClip
		constexpr auto AudioSuspension = 0x178; // AudioClip[]
		constexpr auto AudioImpact = 0x180; // AudioClip[]
		constexpr auto AudioCrashImpact = 0x188; // AudioClip[]
	}

	namespace n_LocalDataStoreHolder {
		constexpr auto m_Store = 0x10; // LocalDataStore
	}

	namespace n_DroneColliderProvider { // : ExistanceProvider
		constexpr auto drone = 0x20; // DroneInstance
	}

	namespace n_TriangleMeshShape { // : ConcaveShape
		constexpr auto _meshInterface = 0x28; // StridingMeshInterface
	}

	namespace n_DtdParser.ParseElementOnlyContent_LocalFrame {
		constexpr auto startParenEntityId = 0x10; // int
		constexpr auto parsingSchema = 0x14; // DtdParser.Token
	}

	namespace n_DebugUIHandlerFoldout { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // UIFoldout
		constexpr auto m_Field = 0x68; // DebugUI.Foldout
		constexpr auto m_Container = 0x70; // DebugUIHandlerContainer
	}

	namespace n_BaseEventData { // : AbstractEventData
		constexpr auto m_EventSystem = 0x18; // EventSystem
	}

	namespace n_AngularJoint { // : Joint
		constexpr auto _iControl = 0x20; // AngularJoint.IControl
		constexpr auto _axis = 0x28; // Vector3Array
	}

	namespace n_GUILayoutEntry {
		constexpr auto minWidth = 0x10; // float
		constexpr auto maxWidth = 0x14; // float
		constexpr auto minHeight = 0x18; // float
		constexpr auto maxHeight = 0x1c; // float
		constexpr auto rect = 0x20; // Rect
		constexpr auto stretchWidth = 0x30; // int
		constexpr auto stretchHeight = 0x34; // int
		constexpr auto consideredForMargin = 0x38; // bool
		constexpr auto m_Style = 0x40; // GUIStyle
	}

	namespace n_LayoutElement { // : UIBehaviour
		constexpr auto m_IgnoreLayout = 0x18; // bool
		constexpr auto m_MinWidth = 0x1c; // float
		constexpr auto m_MinHeight = 0x20; // float
		constexpr auto m_PreferredWidth = 0x24; // float
		constexpr auto m_PreferredHeight = 0x28; // float
		constexpr auto m_FlexibleWidth = 0x2c; // float
		constexpr auto m_FlexibleHeight = 0x30; // float
		constexpr auto m_LayoutPriority = 0x34; // int
	}

	namespace n_ActivatedClientTypeEntry { // : TypeEntry
		constexpr auto applicationUrl = 0x20; // string
		constexpr auto obj_type = 0x28; // Type
	}

	namespace n_MonoCMethod { // : RuntimeConstructorInfo
		constexpr auto mhandle = 0x10; // IntPtr
		constexpr auto name = 0x18; // string
		constexpr auto reftype = 0x20; // Type
	}

	namespace n_Selectable { // : UIBehaviour
		constexpr auto m_EnableCalled = 0x18; // bool
		constexpr auto m_Navigation = 0x20; // Navigation
		constexpr auto m_Transition = 0x48; // Selectable.Transition
		constexpr auto m_Colors = 0x4c; // ColorBlock
		constexpr auto m_SpriteState = 0xa8; // SpriteState
		constexpr auto m_AnimationTriggers = 0xc8; // AnimationTriggers
		constexpr auto m_Interactable = 0xd0; // bool
		constexpr auto m_TargetGraphic = 0xd8; // Graphic
		constexpr auto m_GroupsAllowInteraction = 0xe0; // bool
		constexpr auto m_CurrentIndex = 0xe4; // int
		constexpr auto (isPointerInside)k__BackingField = 0xe8; // bool
		constexpr auto (isPointerDown)k__BackingField = 0xe9; // bool
		constexpr auto (hasSelection)k__BackingField = 0xea; // bool
		constexpr auto m_CanvasGroupCache = 0xf0; // List(CanvasGroup)
	}

	namespace n_BinaryArray {
		constexpr auto objectId = 0x10; // int
		constexpr auto rank = 0x14; // int
		constexpr auto lengthA = 0x18; // int[]
		constexpr auto lowerBoundA = 0x20; // int[]
		constexpr auto binaryTypeEnum = 0x28; // BinaryTypeEnum
		constexpr auto typeInformation = 0x30; // object
		constexpr auto assemId = 0x38; // int
		constexpr auto binaryHeaderEnum = 0x3c; // BinaryHeaderEnum
		constexpr auto binaryArrayTypeEnum = 0x40; // BinaryArrayTypeEnum
	}

	namespace n_RushUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto Tickets = 0x28; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x30; // RawImage
		constexpr auto enemyTeamFlag = 0x38; // RawImage
		constexpr auto myTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x48; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x50; // RectTransform
		constexpr auto EnemyTeamValue = 0x58; // RectTransform
		constexpr auto lockedSeconds = 0x60; // int
	}

	namespace n_WebException { // : InvalidOperationException
		constexpr auto m_Status = 0x88; // WebExceptionStatus
		constexpr auto m_Response = 0x90; // WebResponse
		constexpr auto m_InternalStatus = 0x98; // WebExceptionInternalStatus
	}

	namespace n_ScreenScaleDanger { // : MonoBehaviour
		constexpr auto Slider = 0x18; // Slider
		constexpr auto Text = 0x20; // TextMeshProUGUI
		constexpr auto Image = 0x28; // RawImage
	}

	namespace n_SettingsBindableAttribute { // : Attribute
		constexpr auto _bindable = 0x10; // bool
	}

	namespace n_HeaderAttribute { // : PropertyAttribute
		constexpr auto header = 0x18; // string
	}

	namespace n_Win32Native.WIN32_FIND_DATA {
		constexpr auto dwFileAttributes = 0x10; // int
		constexpr auto cFileName = 0x18; // string
	}

	namespace n_SceneRenderPipeline { // : MonoBehaviour
		constexpr auto renderPipelineAsset = 0x18; // RenderPipelineAsset
	}

	namespace n_SoftRigidDynamicsWorld { // : DiscreteDynamicsWorld
		constexpr auto _softBodyArray = 0x80; // AlignedSoftBodyArray
		constexpr auto _softBodySolver = 0x88; // SoftBodySolver
		constexpr auto _ownsSolver = 0x90; // bool
		constexpr auto _worldInfo = 0x98; // SoftBodyWorldInfo
	}

	namespace n_Collision2D {
		constexpr auto m_Collider = 0x10; // int
		constexpr auto m_OtherCollider = 0x14; // int
		constexpr auto m_Rigidbody = 0x18; // int
		constexpr auto m_OtherRigidbody = 0x1c; // int
		constexpr auto m_RelativeVelocity = 0x20; // Vector2
		constexpr auto m_Enabled = 0x28; // int
		constexpr auto m_ContactCount = 0x2c; // int
		constexpr auto m_ReusedContacts = 0x30; // ContactPoint2D[]
		constexpr auto m_LegacyContacts = 0x38; // ContactPoint2D[]
	}

	namespace n_MaterialReferenceManager {
		constexpr auto m_FontMaterialReferenceLookup = 0x10; // Dictionary(int, Material)
		constexpr auto m_FontAssetReferenceLookup = 0x18; // Dictionary(int, TMP_FontAsset)
		constexpr auto m_SpriteAssetReferenceLookup = 0x20; // Dictionary(int, TMP_SpriteAsset)
		constexpr auto m_ColorGradientReferenceLookup = 0x28; // Dictionary(int, TMP_ColorGradient)
	}

	namespace n_ObjectReader.TypeNAssembly {
		constexpr auto type = 0x10; // Type
		constexpr auto assemblyName = 0x18; // string
	}

	namespace n_Body { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _soft = 0x18; // Cluster
	}

	namespace n_AlignedJointArrayDebugView {
		constexpr auto _array = 0x10; // AlignedJointArray
	}

	namespace n_MonoTlsConnectionInfo {
		constexpr auto (CipherSuiteCode)k__BackingField = 0x10; // CipherSuiteCode
		constexpr auto (ProtocolVersion)k__BackingField = 0x14; // TlsProtocols
		constexpr auto (PeerDomainName)k__BackingField = 0x18; // string
	}

	namespace n_CustomRenderer { // : MonoBehaviour
		constexpr auto HasShadowBounds = 0x18; // bool
		constexpr auto IsAABBBoundingBox = 0x19; // bool
		constexpr auto mMeshFilter = 0x20; // MeshFilter
		constexpr auto mMeshRenderer = 0x28; // MeshRenderer
		constexpr auto handle = 0x30; // RendererHandle
		constexpr auto bounds = 0x38; // Bounds
	}

	namespace n_StringFunctions { // : ValueQuery
		constexpr auto funcType = 0x18; // Function.FunctionType
		constexpr auto argList = 0x20; // IList(Query)
	}

	namespace n_SharedPackage {
		constexpr auto Package = 0x10; // NetSerializer
		constexpr auto SharedCount = 0x18; // int
	}

	namespace n_Type3Message { // : MessageBase
		constexpr auto _level = 0x18; // NtlmAuthLevel
		constexpr auto _challenge = 0x20; // byte[]
		constexpr auto _host = 0x28; // string
		constexpr auto _domain = 0x30; // string
		constexpr auto _username = 0x38; // string
		constexpr auto _password = 0x40; // string
		constexpr auto _type2 = 0x48; // Type2Message
		constexpr auto _lm = 0x50; // byte[]
		constexpr auto _nt = 0x58; // byte[]
	}

	namespace n_RoleCounts {
		constexpr auto Leader = 0x10; // int
		constexpr auto Assault = 0x14; // int
		constexpr auto Medic = 0x18; // int
		constexpr auto Support = 0x1c; // int
		constexpr auto Engineer = 0x20; // int
		constexpr auto Recon = 0x24; // int
	}

	namespace n_GameScreen_BindingHelper { // : MonoBehaviour
		constexpr auto BandageSelfCanvas = 0x18; // CanvasGroup
		constexpr auto BandageSelfHoldCanvas = 0x20; // CanvasGroup
		constexpr auto ReloadCanvas = 0x28; // CanvasGroup
		constexpr auto BandageOtherCanvas = 0x30; // CanvasGroup
		constexpr auto BandageOtherHoldCanvas = 0x38; // CanvasGroup
		constexpr auto HealSelfCanvas = 0x40; // CanvasGroup
		constexpr auto HealOtherCanvas = 0x48; // CanvasGroup
		constexpr auto ClimbCanvas = 0x50; // CanvasGroup
		constexpr auto YouAreBleedingCanvas = 0x58; // CanvasGroup
		constexpr auto SwitchBandageCanvas = 0x60; // CanvasGroup
		constexpr auto Bipod = 0x68; // CanvasGroup
		constexpr auto BoltLoad = 0x70; // CanvasGroup
		constexpr auto RocketLoad = 0x78; // CanvasGroup
		constexpr auto HealOther = 0x80; // KeybindingButton
		constexpr auto BandageOther = 0x88; // KeybindingButton
		constexpr auto BandageOtherHold = 0x90; // KeybindingButton
		constexpr auto Plant = 0x98; // KeybindingButton
		constexpr auto IRect = 0xa0; // RectTransform
		constexpr auto IIndicator = 0xa8; // RectTransform
		constexpr auto InteractA = 0xb0; // KeybindingButton
		constexpr auto InteractB = 0xb8; // KeybindingButton
		constexpr auto PlantProgress = 0xc0; // GameObject
		constexpr auto PlantProgressValue = 0xc8; // RectTransform
		constexpr auto lockedHealOther = 0xd0; // PlayerNetwork
		constexpr auto lockedBandgeOther = 0xd8; // PlayerNetwork
		constexpr auto lockedBandageOtherlangInd = 0xe0; // int
		constexpr auto canvas = 0xe8; // Canvas
		constexpr auto (TickIndex8)k__BackingField = 0xf0; // int
		constexpr auto mLastInteraction = 0xf8; // IInteractable
		constexpr auto bindA = 0x100; // Binding
		constexpr auto bindB = 0x108; // Binding
	}

	namespace n_ObjectIDGenerator {
		constexpr auto m_currentCount = 0x10; // int
		constexpr auto m_currentSize = 0x14; // int
		constexpr auto m_ids = 0x18; // long[]
		constexpr auto m_objs = 0x20; // object[]
	}

	namespace n_XmlChildNodes { // : XmlNodeList
		constexpr auto container = 0x10; // XmlNode
	}

	namespace n_ExclusiveReference {
		constexpr auto _ref = 0x10; // RegexRunner
		constexpr auto _obj = 0x18; // object
		constexpr auto _locked = 0x20; // int
	}

	namespace n_WeaponAccuracyStats {
		constexpr auto BaseHipFireAccuracy = 0x10; // float
		constexpr auto LowestHipFireAccuracy = 0x14; // float
		constexpr auto HipFireAccuracyDecreaseTime = 0x18; // float
		constexpr auto BaseADSFireAccuracy = 0x1c; // float
		constexpr auto LowestADSFireAccuracy = 0x20; // float
		constexpr auto ADSFireAccuracyDecreaseTime = 0x24; // float
	}

	namespace n_ProjectileExplosiveBullet { // : Projectile
		constexpr auto Meshes = 0xd8; // Renderer[]
		constexpr auto flagMeshesVisible = 0xe0; // bool
		constexpr auto ExplosionToSpawn = 0xe8; // GameObject
		constexpr auto SoundToSpawn = 0xf0; // ExplosionProfile
	}

	namespace n_MainMenuStatsTitleItem { // : MonoBehaviour
		constexpr auto Parent = 0x18; // MainMenuStatsTitle
		constexpr auto SelectedGameObj = 0x20; // GameObject
		constexpr auto wasSelected = 0x28; // bool
		constexpr auto WeaponType = 0x2c; // WeaponType
		constexpr auto GadgetType = 0x30; // LoadoutIndex
		constexpr auto VehicleType = 0x34; // VehicleType
	}

	namespace n_X509Certificate2ImplMono { // : X509Certificate2Impl
		constexpr auto _archived = 0x18; // bool
		constexpr auto _extensions = 0x20; // X509ExtensionCollection
		constexpr auto _publicKey = 0x28; // PublicKey
		constexpr auto issuer_name = 0x30; // X500DistinguishedName
		constexpr auto subject_name = 0x38; // X500DistinguishedName
		constexpr auto signature_algorithm = 0x40; // Oid
		constexpr auto intermediateCerts = 0x48; // X509CertificateImplCollection
		constexpr auto _cert = 0x50; // X509Certificate
	}

	namespace n_CustomizeStatsItem { // : MonoBehaviour
		constexpr auto isActive = 0x18; // bool
		constexpr auto TitleLabel = 0x20; // TextMeshProUGUI
		constexpr auto ValueLabel = 0x28; // TextMeshProUGUI
		constexpr auto ValueRect = 0x30; // RectTransform
		constexpr auto ValueOffsetRect = 0x38; // RectTransform
		constexpr auto ValueOffsetImage = 0x40; // RawImage
		constexpr auto MaxValue = 0x48; // float
		constexpr auto ShowAsFloat = 0x4c; // bool
		constexpr auto ShowAsPercent = 0x4d; // bool
		constexpr auto Value = 0x50; // float
		constexpr auto ValueOffset = 0x54; // float
		constexpr auto Target_Value = 0x58; // float
		constexpr auto Target_ValueOffset = 0x5c; // float
	}

	namespace n_CharacterJoinState {
		constexpr auto rotation = 0x10; // Quaternion
		constexpr auto position = 0x20; // Vector3
		constexpr auto anchor = 0x2c; // Vector3
		constexpr auto axis = 0x38; // Vector3
		constexpr auto autoConfigureConnectedAnchor = 0x44; // bool
		constexpr auto connectedAnchor = 0x48; // Vector3
		constexpr auto swingAxis = 0x54; // Vector3
		constexpr auto swingLimitSpring_spring = 0x60; // float
		constexpr auto swingLimitSpring_damper = 0x64; // float
		constexpr auto lowTwistLimit_limit = 0x68; // float
		constexpr auto lowTwistLimit_bounciness = 0x6c; // float
		constexpr auto lowTwistLimit_contactDistance = 0x70; // float
		constexpr auto highTwistLimit_limit = 0x74; // float
		constexpr auto highTwistLimit_bounciness = 0x78; // float
		constexpr auto highTwistLimit_contactDistance = 0x7c; // float
		constexpr auto swing1Limit_limit = 0x80; // float
		constexpr auto swing1Limit_bounciness = 0x84; // float
		constexpr auto swing1Limit_contactDistance = 0x88; // float
		constexpr auto swing2Limit_limit = 0x8c; // float
		constexpr auto swing2Limit_bounciness = 0x90; // float
		constexpr auto swing2Limit_contactDistance = 0x94; // float
		constexpr auto enableProjection = 0x98; // bool
		constexpr auto projectionDistance = 0x9c; // float
		constexpr auto projectionAngle = 0xa0; // float
		constexpr auto breakForce = 0xa4; // float
		constexpr auto breakTorque = 0xa8; // float
		constexpr auto enableCollision = 0xac; // bool
		constexpr auto enablePreprocessing = 0xad; // bool
		constexpr auto massScale = 0xb0; // float
		constexpr auto connectedMassScale = 0xb4; // float
	}

	namespace n_RocketLauncher { // : GadgetManager
		constexpr auto m_busyLenght = 0xd0; // float
		constexpr auto m_busy = 0xd4; // float
		constexpr auto m_reloadCounter = 0xd8; // float
		constexpr auto m_aim = 0xdc; // float
		constexpr auto m_loaded = 0xe0; // bool
		constexpr auto m_reloadFlag = 0xe1; // bool
		constexpr auto m_angle = 0xe4; // float
		constexpr auto m_currentRangeIndex = 0xe8; // int
		constexpr auto ShotPoint = 0xf0; // Transform
		constexpr auto RocketRenderer = 0xf8; // MeshRenderer
		constexpr auto StartAsLoaded = 0x100; // bool
		constexpr auto ForceTakeOff = 0x101; // bool
		constexpr auto ReloadSpeed = 0x104; // float
		constexpr auto Projectile = 0x108; // Rocket
		constexpr auto Default = 0x110; // PositionAndRotationStruct
		constexpr auto Aim = 0x128; // PositionAndRotationStruct
		constexpr auto Scope = 0x140; // Scope
		constexpr auto Speed = 0x148; // float
		constexpr auto AimFov = 0x14c; // float
		constexpr auto hasCustomZeroing = 0x150; // bool
		constexpr auto Ranges = 0x158; // int[]
	}

	namespace n_Dbvt.StkNP { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_FollowingQuery { // : BaseAxisQuery
		constexpr auto input = 0x58; // XPathNavigator
		constexpr auto iterator = 0x60; // XPathNodeIterator
	}

	namespace n_DebugUI.HistoryEnumField { // : DebugUI.EnumField
		constexpr auto (historyIndexGetter)k__BackingField = 0x80; // Func(int)[]
	}

	namespace n_GameScreen_Loadout_Item { // : MonoBehaviour
		constexpr auto Index = 0x18; // int
		constexpr auto IndexLabel = 0x20; // TextMeshProUGUI
		constexpr auto NameLabel = 0x28; // TextMeshProUGUI
		constexpr auto Icon = 0x30; // RawImage
		constexpr auto Canvas = 0x38; // CanvasGroup
		constexpr auto Selected = 0x40; // CanvasGroup
		constexpr auto GraphicReverter = 0x48; // GraphicReverter
	}

	namespace n_APCTurret { // : ToolItem
		constexpr auto ShotSounds = 0x60; // ExplosionProfile
		constexpr auto Bullet = 0x68; // ExplosiveBullet
		constexpr auto VerticalRange = 0x70; // Vector2
		constexpr auto MinCurve = 0x78; // AnimationCurve
		constexpr auto MuzzleScale = 0x80; // float
		constexpr auto Accuracy = 0x84; // float
		constexpr auto CameraShake = 0x88; // float
		constexpr auto RoundPerMinute = 0x8c; // int
		constexpr auto RoundsPerReload = 0x90; // int
		constexpr auto InitialRounds = 0x94; // int
		constexpr auto ImageEffect = 0x98; // PostProcess
		constexpr auto ImageEffectMaterial = 0xa0; // Material
		constexpr auto PostProcessingAnimation = 0xa8; // AnimationCurve
		constexpr auto PostProcessingScale = 0xb0; // float
		constexpr auto ReloadingTime = 0xb4; // float
		constexpr auto ReloadingClips = 0xb8; // AudioClip[]
		constexpr auto BarrelAnimation = 0xc0; // AnimationCurve
		constexpr auto ZoomLevels = 0xc8; // APCTurret.ZoomLevel[]
	}

	namespace n_CookieParser {
		constexpr auto m_tokenizer = 0x10; // CookieTokenizer
	}

	namespace n_ContentSizeSync { // : MonoBehaviour
		constexpr auto Target = 0x18; // RectTransform
		constexpr auto Horizontal = 0x20; // bool
		constexpr auto HorizontalOffset = 0x24; // float
		constexpr auto Vertical = 0x28; // bool
		constexpr auto VerticalOffset = 0x2c; // float
		constexpr auto EditorExecute = 0x30; // bool
		constexpr auto rectTransform = 0x38; // RectTransform
		constexpr auto (TickIndex8)k__BackingField = 0x40; // int
	}

	namespace n_XmlProcessingInstruction { // : XmlLinkedNode
		constexpr auto target = 0x20; // string
		constexpr auto data = 0x28; // string
	}

	namespace n_ObjectReader {
		constexpr auto m_stream = 0x10; // Stream
		constexpr auto m_surrogates = 0x18; // ISurrogateSelector
		constexpr auto m_context = 0x20; // StreamingContext
		constexpr auto m_objectManager = 0x30; // ObjectManager
		constexpr auto formatterEnums = 0x38; // InternalFE
		constexpr auto m_binder = 0x40; // SerializationBinder
		constexpr auto topId = 0x48; // long
		constexpr auto bSimpleAssembly = 0x50; // bool
		constexpr auto handlerObject = 0x58; // object
		constexpr auto m_topObject = 0x60; // object
		constexpr auto headers = 0x68; // Header[]
		constexpr auto handler = 0x70; // HeaderHandler
		constexpr auto serObjectInfoInit = 0x78; // SerObjectInfoInit
		constexpr auto m_formatterConverter = 0x80; // IFormatterConverter
		constexpr auto stack = 0x88; // SerStack
		constexpr auto valueFixupStack = 0x90; // SerStack
		constexpr auto crossAppDomainArray = 0x98; // object[]
		constexpr auto bFullDeserialization = 0xa0; // bool
		constexpr auto bOldFormatDetected = 0xa1; // bool
		constexpr auto valTypeObjectIdTable = 0xa8; // IntSizedArray
		constexpr auto typeCache = 0xb0; // NameCache
		constexpr auto previousAssemblyString = 0xb8; // string
		constexpr auto previousName = 0xc0; // string
		constexpr auto previousType = 0xc8; // Type
	}

	namespace n_Identity {
		constexpr auto _objectUri = 0x10; // string
		constexpr auto _channelSink = 0x18; // IMessageSink
		constexpr auto _envoySink = 0x20; // IMessageSink
		constexpr auto _clientDynamicProperties = 0x28; // DynamicPropertyCollection
		constexpr auto _serverDynamicProperties = 0x30; // DynamicPropertyCollection
		constexpr auto _objRef = 0x38; // ObjRef
		constexpr auto _disposed = 0x40; // bool
	}

	namespace n_ThreadPoolWorkQueue.WorkStealingQueue {
		constexpr auto m_array = 0x10; // IThreadPoolWorkItem[]
		constexpr auto m_mask = 0x18; // int
		constexpr auto m_headIndex = 0x1c; // int
		constexpr auto m_tailIndex = 0x20; // int
		constexpr auto m_foreignLock = 0x24; // SpinLock
	}

	namespace n_SteeringWheelManual { // : SeatBehaviour
		constexpr auto LeftIKPos = 0x48; // Vector3
		constexpr auto RightIKPos = 0x54; // Vector3
		constexpr auto Mesh = 0x60; // Transform
		constexpr auto wheel = 0x68; // float
		constexpr auto LeftHandTarget = 0x70; // Transform
		constexpr auto RightHandTarget = 0x78; // Transform
		constexpr auto LeftEular = 0x80; // Vector3
		constexpr auto RightEular = 0x8c; // Vector3
		constexpr auto Speed = 0x98; // float
		constexpr auto Arms = 0xa0; // SteeringWheelArms
		constexpr auto localPos = 0xa8; // Vector3
		constexpr auto localRot = 0xb4; // Quaternion
		constexpr auto localScal = 0xc4; // Vector3
		constexpr auto localParent = 0xd0; // Transform
		constexpr auto vehicle = 0xd8; // VehicleInstance
	}

	namespace n_FlagUISound { // : MonoBehaviour
		constexpr auto OnCapture = 0x18; // AudioClip[]
		constexpr auto OnLost = 0x20; // AudioClip[]
		constexpr auto src = 0x28; // AudioSource
		constexpr auto (TickIndex8)k__BackingField = 0x30; // int
	}

	namespace n_GameScreen_SquadAbilityMenu_AbilityItem { // : MonoBehaviour
		constexpr auto Item = 0x18; // SquadAbility
		constexpr auto IconRawImage = 0x20; // RawImage
		constexpr auto TimerImage = 0x28; // Image
		constexpr auto CountLabel = 0x30; // TextMeshProUGUI
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
		constexpr auto mButton = 0x40; // GraphicRevertedButton
		constexpr auto mLastMaxCount = 0x48; // int
		constexpr auto mLastCount = 0x4c; // int
	}

	namespace n_VisualElementStylesData {
		constexpr auto isShared = 0x10; // bool
		constexpr auto width = 0x14; // StyleLength
		constexpr auto height = 0x24; // StyleLength
		constexpr auto maxWidth = 0x34; // StyleLength
		constexpr auto maxHeight = 0x44; // StyleLength
		constexpr auto minWidth = 0x54; // StyleLength
		constexpr auto minHeight = 0x64; // StyleLength
		constexpr auto flexBasis = 0x74; // StyleLength
		constexpr auto flexShrink = 0x84; // StyleFloat
		constexpr auto flexGrow = 0x90; // StyleFloat
		constexpr auto overflow = 0x9c; // StyleInt
		constexpr auto left = 0xa8; // StyleLength
		constexpr auto top = 0xb8; // StyleLength
		constexpr auto right = 0xc8; // StyleLength
		constexpr auto bottom = 0xd8; // StyleLength
		constexpr auto alignSelf = 0xe8; // StyleInt
		constexpr auto color = 0xf4; // StyleColor
		constexpr auto unityBackgroundImageTintColor = 0x10c; // StyleColor
		constexpr auto alignItems = 0x124; // StyleInt
		constexpr auto alignContent = 0x130; // StyleInt
		constexpr auto borderLeftColor = 0x13c; // StyleColor
		constexpr auto borderTopColor = 0x154; // StyleColor
		constexpr auto borderRightColor = 0x16c; // StyleColor
		constexpr auto borderBottomColor = 0x184; // StyleColor
		constexpr auto opacity = 0x19c; // StyleFloat
		constexpr auto visibility = 0x1a8; // StyleInt
		constexpr auto display = 0x1b4; // StyleInt
		constexpr auto dpiScaling = 0x1c0; // float
	}

	namespace n_ThrownObject { // : MonoBehaviour
		constexpr auto VisualVersion = 0x18; // GameObject
		constexpr auto ObjectToSpawn = 0x20; // GameObject
		constexpr auto SoundProfile = 0x28; // ExplosionProfile
		constexpr auto (lifeTime)k__BackingField = 0x30; // float
		constexpr auto (inPool)k__BackingField = 0x34; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x38; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x3c; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x40; // bool
		constexpr auto (FastListIndexA)k__BackingField = 0x44; // int
		constexpr auto (isLocal)k__BackingField = 0x48; // bool
		constexpr auto (Owner)k__BackingField = 0x50; // NetworkClient
		constexpr auto (Item)k__BackingField = 0x58; // ToolItem
		constexpr auto (StartPosition)k__BackingField = 0x60; // Vector3
		constexpr auto (thisRigidbody)k__BackingField = 0x70; // Rigidbody
		constexpr auto (thisAudioSource)k__BackingField = 0x78; // AudioSource
		constexpr auto (NetworkID)k__BackingField = 0x80; // ushort
		constexpr auto mLastCollision = 0x84; // float
		constexpr auto mEtaToPostByCollision = 0x88; // float
		constexpr auto mHoldObject = 0x90; // GameObject
	}

	namespace n_PlayerMenuOverlay_WarnItem { // : MonoBehaviour
		constexpr auto ProfilePicture = 0x18; // RawImage
		constexpr auto Name = 0x20; // TextMeshProUGUI
		constexpr auto Reason = 0x28; // TextMeshProUGUI
		constexpr auto Date = 0x30; // TextMeshProUGUI
		constexpr auto LoadingProfile = 0x38; // GameObject
		constexpr auto LoadingName = 0x40; // GameObject
		constexpr auto profile = 0x48; // SteamStats
		constexpr auto warn = 0x50; // AWarn
		constexpr auto counter = 0x70; // float
		constexpr auto (TickIndex8)k__BackingField = 0x74; // int
	}

	namespace n_THPRagdollJoint { // : MonoBehaviour
		constexpr auto Parent = 0x18; // THPRagdoll
		constexpr auto Index = 0x20; // int
	}

	namespace n_TerrainDetails {
		constexpr auto Horizontal = 0x10; // int
		constexpr auto Vertical = 0x14; // int
		constexpr auto GridSize = 0x18; // float
		constexpr auto min = 0x1c; // Vector3
		constexpr auto max = 0x28; // Vector3
		constexpr auto Bounds = 0x34; // Vector3
		constexpr auto RegionMatrix2x2 = 0x40; // TerrainRegion[,]
	}

	namespace n_EventListener {
		constexpr auto _EventSourceCreated = 0x10; // EventHandler(EventSourceCreatedEventArgs)
		constexpr auto EventWritten = 0x18; // EventHandler(EventWrittenEventArgs)
		constexpr auto m_Next = 0x20; // EventListener
		constexpr auto m_activityFilter = 0x28; // ActivityFilter
	}

	namespace n_ServerList { // : MonoBehaviour
		constexpr auto Parent = 0x18; // Transform
		constexpr auto Prefab = 0x20; // GameObject
		constexpr auto SrcBtn = 0x28; // GameObject
		constexpr auto SrcLoading = 0x30; // GameObject
		constexpr auto Top = 0x38; // CanvasGroup
		constexpr auto pool = 0x40; // UIPool(ServerListElement)
		constexpr auto elements = 0x48; // Dictionary(ServerInfo, ServerListElement)
		constexpr auto sortElements = 0x50; // List(ServerListElement)
		constexpr auto group = 0x58; // CanvasGroup
		constexpr auto counter = 0x60; // float
		constexpr auto lastSort = 0x64; // ServerList.Sorting
		constexpr auto Arrows = 0x68; // RectTransform[]
		constexpr auto revertFlags = 0x70; // bool[]
	}

	namespace n_FPAnimationSmoother { // : MonoBehaviour
		constexpr auto Camera = 0x18; // Transform
		constexpr auto MovementTransform = 0x20; // Transform
		constexpr auto WeaponParent = 0x28; // Transform
		constexpr auto lockedTarget = 0x30; // Transform
		constexpr auto lastRelativeDelta = 0x38; // Vector3
		constexpr auto position = 0x44; // Vector3
		constexpr auto weaponParent_pos = 0x50; // Vector3
		constexpr auto weaponParent_rot = 0x5c; // Quaternion
	}

	namespace n_SoftBodyWorldInfo { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
		constexpr auto _broadphase = 0x20; // BroadphaseInterface
		constexpr auto _dispatcher = 0x28; // Dispatcher
		constexpr auto _sparseSdf = 0x30; // SparseSdf
	}

	namespace n_Vignette { // : VolumeComponent
		constexpr auto color = 0x38; // ColorParameter
		constexpr auto center = 0x40; // Vector2Parameter
		constexpr auto intensity = 0x48; // ClampedFloatParameter
		constexpr auto smoothness = 0x50; // ClampedFloatParameter
		constexpr auto rounded = 0x58; // BoolParameter
	}

	namespace n_RigidBody { // : CollisionObject
		constexpr auto IsSimulating = 0x40; // bool
		constexpr auto AddedToWorld = 0x41; // bool
		constexpr auto _motionState = 0x48; // MotionState
		constexpr auto _constraintRefs = 0x50; // List(TypedConstraint)
	}

	namespace n_TestRange_TargetLimb { // : MonoBehaviour
		constexpr auto Parent = 0x18; // TestRange_TargetHuman
		constexpr auto Part = 0x20; // PlayerBody
	}

	namespace n_UTF7Encoding.Decoder { // : DecoderNLS
		constexpr auto bits = 0x30; // int
		constexpr auto bitCount = 0x34; // int
		constexpr auto firstByte = 0x38; // bool
	}

	namespace n_RenderGraphDebugParams {
		constexpr auto enableRenderGraph = 0x10; // bool
		constexpr auto tagResourceNamesWithRG = 0x11; // bool
		constexpr auto clearRenderTargetsAtCreation = 0x12; // bool
		constexpr auto clearRenderTargetsAtRelease = 0x13; // bool
		constexpr auto unbindGlobalTextures = 0x14; // bool
		constexpr auto logFrameInformation = 0x15; // bool
		constexpr auto logResources = 0x16; // bool
	}

	namespace n_MarshalAsAttribute { // : Attribute
		constexpr auto MarshalCookie = 0x10; // string
		constexpr auto MarshalType = 0x18; // string
		constexpr auto MarshalTypeRef = 0x20; // Type
		constexpr auto SafeArrayUserDefinedSubType = 0x28; // Type
		constexpr auto utype = 0x30; // UnmanagedType
		constexpr auto ArraySubType = 0x34; // UnmanagedType
		constexpr auto SafeArraySubType = 0x38; // VarEnum
		constexpr auto SizeConst = 0x3c; // int
		constexpr auto IidParameterIndex = 0x40; // int
		constexpr auto SizeParamIndex = 0x44; // short
	}

	namespace n_MainMenuStatsWeaponsItem { // : MonoBehaviour
		constexpr auto Name = 0x18; // TextMeshProUGUI
		constexpr auto Value = 0x20; // TextMeshProUGUI
		constexpr auto Distance = 0x28; // TextMeshProUGUI
		constexpr auto Rank = 0x30; // TextMeshProUGUI
		constexpr auto Icon = 0x38; // RawImage
		constexpr auto ProgressValue = 0x40; // RectTransform
	}

	namespace n_EventDataAttribute { // : Attribute
		constexpr auto level = 0x10; // EventLevel
		constexpr auto opcode = 0x14; // EventOpcode
		constexpr auto (Name)k__BackingField = 0x18; // string
		constexpr auto (Keywords)k__BackingField = 0x20; // EventKeywords
		constexpr auto (Tags)k__BackingField = 0x28; // EventTags
	}

	namespace n_StridingMeshInterface { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_DefaultCollisionConfiguration { // : CollisionConfiguration
		constexpr auto _simplexSolver = 0x18; // VoronoiSimplexSolver
	}

	namespace n_RemoteTurretUI { // : MonoBehaviour
		constexpr auto Cross = 0x18; // RectTransform
		constexpr auto Count = 0x20; // TextMeshProUGUI
		constexpr auto OutOfAmmo = 0x28; // CanvasGroup
	}

	namespace n_DebrisSoundCollection { // : ScriptableObject
		constexpr auto Clips = 0x18; // AudioClip[]
	}

	namespace n_DesignerSerializerAttribute { // : Attribute
		constexpr auto serializerTypeName = 0x10; // string
		constexpr auto serializerBaseTypeName = 0x18; // string
	}

	namespace n_RushBaseUIMap { // : MapUIBehaviour
		constexpr auto BaseRawIamge = 0x60; // RawImage
		constexpr auto BaseLabelText = 0x68; // TextMeshProUGUI
		constexpr auto HoverImage = 0x70; // CanvasGroup
		constexpr auto (Base)k__BackingField = 0x78; // RushBase
		constexpr auto mHoverImageRect = 0x80; // RectTransform
		constexpr auto mHoverImageSize = 0x88; // float
		constexpr auto mIsMyBase = 0x8c; // bool
	}

	namespace n_RawImage { // : MaskableGraphic
		constexpr auto m_Texture = 0xc8; // Texture
		constexpr auto m_UVRect = 0xd0; // Rect
	}

	namespace n_LiftGammaGain { // : VolumeComponent
		constexpr auto lift = 0x38; // Vector4Parameter
		constexpr auto gamma = 0x40; // Vector4Parameter
		constexpr auto gain = 0x48; // Vector4Parameter
	}

	namespace n_Thread { // : CriticalFinalizerObject
		constexpr auto internal_thread = 0x10; // InternalThread
		constexpr auto m_ThreadStartArg = 0x18; // object
		constexpr auto pending_exception = 0x20; // object
		constexpr auto principal = 0x28; // IPrincipal
		constexpr auto principal_version = 0x30; // int
		constexpr auto m_Delegate = 0x38; // MulticastDelegate
		constexpr auto m_ExecutionContext = 0x40; // ExecutionContext
		constexpr auto m_ExecutionContextBelongsToOuterScope = 0x48; // bool
	}

	namespace n_NetworkCredential { // : ICredentials
		constexpr auto m_domain = 0x10; // string
		constexpr auto m_userName = 0x18; // string
		constexpr auto m_password = 0x20; // SecureString
	}

	namespace n_TeamDeathMatchUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_TypedConstraint.ConstraintInfo1 { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_GameModeSizes {
		constexpr auto Parent = 0x10; // Transform
		constexpr auto (TinyVarients)k__BackingField = 0x18; // List(GameplayMode)
		constexpr auto (SmallVarients)k__BackingField = 0x20; // List(GameplayMode)
		constexpr auto (MediumVarients)k__BackingField = 0x28; // List(GameplayMode)
		constexpr auto (BigVarients)k__BackingField = 0x30; // List(GameplayMode)
		constexpr auto (UltraVarients)k__BackingField = 0x38; // List(GameplayMode)
	}

	namespace n_ManagedBoxCollider {
		constexpr auto worldToLocal = 0x10; // Matrix4x4
		constexpr auto min = 0x50; // Vector3
		constexpr auto max = 0x5c; // Vector3
	}

	namespace n_Enum.ValuesAndNames {
		constexpr auto Values = 0x10; // ulong[]
		constexpr auto Names = 0x18; // string[]
	}

	namespace n_ThrownFlare { // : ThrownObject
		constexpr auto LifeTime = 0x98; // float
	}

	namespace n_GameScreen_AirDrone { // : MonoBehaviour
		constexpr auto kphMinLabel = 0x18; // TextMeshProUGUI
		constexpr auto kphMaxLabel = 0x20; // TextMeshProUGUI
		constexpr auto kphValueLabel = 0x28; // TextMeshProUGUI
		constexpr auto kphValueRect = 0x30; // RectTransform
		constexpr auto verticalMinLabel = 0x38; // TextMeshProUGUI
		constexpr auto verticalMaxLabel = 0x40; // TextMeshProUGUI
		constexpr auto verticalValueLabel = 0x48; // TextMeshProUGUI
		constexpr auto verticalValueRect = 0x50; // RectTransform
		constexpr auto altitudeMinLabel = 0x58; // TextMeshProUGUI
		constexpr auto altitudeMaxLabel = 0x60; // TextMeshProUGUI
		constexpr auto altitudeValueLabel = 0x68; // TextMeshProUGUI
		constexpr auto altitudeValueRect = 0x70; // RectTransform
		constexpr auto Signal = 0x78; // RawImage
		constexpr auto SignalFrames = 0x80; // Texture2D[]
		constexpr auto fieldOfViewLabel = 0x88; // TextMeshProUGUI
		constexpr auto range = 0x90; // TextMeshProUGUI
		constexpr auto m_canvas = 0x98; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0xa0; // int
		constexpr auto maxKPH = 0xa4; // float
		constexpr auto minDegrees = 0xa8; // float
		constexpr auto maxDegrees = 0xac; // float
		constexpr auto maxAltitude = 0xb0; // float
	}

	namespace n_Timer.Scheduler {
		constexpr auto list = 0x10; // SortedList
		constexpr auto changed = 0x18; // ManualResetEvent
	}

	namespace n_UnderRail { // : MonoBehaviour
		constexpr auto PoolableAttachment = 0x18; // PoolableAttachment
		constexpr auto MainBody = 0x20; // MeshRenderer
		constexpr auto HoldPoint = 0x28; // Transform
		constexpr auto LocalOnlyScript = 0x30; // AttachmentAddon
		constexpr auto HoldOffset = 0x38; // Vector3
		constexpr auto mAttachmentComponets = 0x48; // IAttachmentChild[]
		constexpr auto (Item)k__BackingField = 0x50; // IAttachmentItem
		constexpr auto lod = 0x58; // THPLod
		constexpr auto OnStateSetFalse = 0x60; // UnityEvent
		constexpr auto OnStateSetTrue = 0x68; // UnityEvent
		constexpr auto (State)k__BackingField = 0x70; // bool
	}

	namespace n_PointerInputModule { // : BaseInputModule
		constexpr auto m_PointerData = 0x48; // Dictionary(int, PointerEventData)
		constexpr auto m_MouseState = 0x50; // PointerInputModule.MouseState
	}

	namespace n_PlayerStart.NationStartLoadout.StartLoadout {
		constexpr auto Primary = 0x10; // AWeapon
		constexpr auto Secondary = 0x18; // AWeapon
		constexpr auto FirstAid = 0x20; // AGadget
		constexpr auto ToolA = 0x28; // AGadget
		constexpr auto ToolB = 0x30; // AGadget
		constexpr auto Throwable = 0x38; // AGadget
	}

	namespace n_Dbvt.StkNps { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_VehicleDebrisManager { // : MonoBehaviour
		constexpr auto registers = 0x18; // VehicleDebrisRegister[]
		constexpr auto registersList = 0x20; // FastListA(VehicleDebrisRegister)
		constexpr auto removeQueue = 0x28; // Queue(VehicleDebrisRegister)
		constexpr auto view = 0x30; // NetView
	}

	namespace n_AssemblyLoadEventArgs { // : EventArgs
		constexpr auto m_loadedAssembly = 0x10; // Assembly
	}

	namespace n_SerializationFieldInfo { // : FieldInfo
		constexpr auto m_field = 0x10; // RuntimeFieldInfo
		constexpr auto m_serializationName = 0x18; // string
	}

	namespace n_MovedFromAttribute { // : Attribute
		constexpr auto data = 0x10; // MovedFromAttributeData
	}

	namespace n_GunGameTeamSettings { // : GamemodeSettingsBase
		constexpr auto (GunGameTeam_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
	}

	namespace n_Pool.Environment {
		constexpr auto Concrete = 0x10; // GameObject
		constexpr auto Metal = 0x18; // GameObject
		constexpr auto Dirt = 0x20; // GameObject
		constexpr auto Wood = 0x28; // GameObject
		constexpr auto Glass = 0x30; // GameObject
		constexpr auto Water = 0x38; // GameObject
		constexpr auto WaterSplash = 0x40; // GameObject
		constexpr auto WaterHand = 0x48; // GameObject
		constexpr auto Blood = 0x50; // GameObject
		constexpr auto BrokenGlass = 0x58; // GameObject
		constexpr auto TreeFallFoliageFx = 0x60; // GameObject
	}

	namespace n_CollisionDispatcher { // : Dispatcher
		constexpr auto _collisionConfiguration = 0x28; // CollisionConfiguration
		constexpr auto _nearCallback = 0x30; // NearCallback
		constexpr auto _collisionCreateFuncs = 0x38; // List(CollisionAlgorithmCreateFunc)
		constexpr auto _nearCallbackUnmanaged = 0x40; // CollisionDispatcher.NearCallbackUnmanagedDelegate
		constexpr auto _nearCallbackUnmanagedPtr = 0x48; // IntPtr
	}

	namespace n_ComputeBuffer { // : IDisposable
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_String { // : IComparable
		constexpr auto m_stringLength = 0x10; // int
		constexpr auto m_firstChar = 0x14; // char
	}

	namespace n_UnlockRankUpUI.UnlockOrRank {
		constexpr auto isRank = 0x10; // bool
		constexpr auto Rank = 0x14; // int
		constexpr auto text = 0x18; // string
		constexpr auto img = 0x20; // Sprite
		constexpr auto type = 0x28; // UnlockRankUpUI.SoundCollection
		constexpr auto startTime = 0x2c; // float
		constexpr auto endTime = 0x30; // float
	}

	namespace n_CardSlider { // : MonoBehaviour
		constexpr auto Childs = 0x18; // RectTransform[]
		constexpr auto Index = 0x20; // int
		constexpr auto Speed = 0x24; // float
		constexpr auto position = 0x28; // Vector2
		constexpr auto rect = 0x30; // RectTransform
		constexpr auto ChildsGroups = 0x38; // CanvasGroup[]
		constexpr auto lastAppliedWidth = 0x40; // float
	}

	namespace n_PrototypeTerrainDetail { // : Prototype
		constexpr auto terrainDetailName = 0x20; // string
		constexpr auto terrainProtoId = 0x28; // int
		constexpr auto failureSettings = 0x30; // FailureSettings
		constexpr auto terrainDetailSettings = 0x38; // TerrainDetailSettings
		constexpr auto spawnDetailSettings = 0x40; // SpawnDetailSettings
		constexpr auto prefabType = 0x48; // PrefabType
		constexpr auto detailTexture = 0x50; // Texture2D
	}

	namespace n_KerningPair {
		constexpr auto m_FirstGlyph = 0x10; // uint
		constexpr auto m_FirstGlyphAdjustments = 0x14; // GlyphValueRecord_Legacy
		constexpr auto m_SecondGlyph = 0x24; // uint
		constexpr auto m_SecondGlyphAdjustments = 0x28; // GlyphValueRecord_Legacy
		constexpr auto xOffset = 0x38; // float
		constexpr auto m_IgnoreSpacingAdjustments = 0x3c; // bool
	}

	namespace n_WearableBackbag { // : Wearable
		constexpr auto Category = 0x40; // BackbagCategory
	}

	namespace n_FloatRangeParameter { // : VolumeParameter(Vector2)
		constexpr auto min = 0x20; // float
		constexpr auto max = 0x24; // float
	}

	namespace n_GlobalUI {
		constexpr auto UIPrefab = 0x10; // GameObject
		constexpr auto MaskedMapUI = 0x18; // Material
	}

	namespace n_TypeSpec {
		constexpr auto name = 0x10; // TypeIdentifier
		constexpr auto assembly_name = 0x18; // string
		constexpr auto nested = 0x20; // List(TypeIdentifier)
		constexpr auto generic_params = 0x28; // List(TypeSpec)
		constexpr auto modifier_spec = 0x30; // List(ModifierSpec)
		constexpr auto is_byref = 0x38; // bool
		constexpr auto display_fullname = 0x40; // string
	}

	namespace n_DefaultSerializer { // : Serializer
		constexpr auto _buffer = 0x90; // IntPtr
		constexpr auto _currentSize = 0x98; // int
		constexpr auto _uniqueIdGenerator = 0xa0; // IntPtr
		constexpr auto _totalSize = 0xa8; // int
		constexpr auto _serializationFlags = 0xac; // SerializationFlags
		constexpr auto _chunkP = 0xb0; // Dictionary(IntPtr, IntPtr)
		constexpr auto _uniquePointers = 0xb8; // Dictionary(IntPtr, IntPtr)
		constexpr auto _nameMap = 0xc0; // Dictionary(object, IntPtr)
		constexpr auto _chunkPtrs = 0xc8; // List(Chunk)
		constexpr auto _dna = 0xd0; // IntPtr
		constexpr auto _dnaLength = 0xd8; // int
		constexpr auto _names = 0xe0; // Dna.NameInfo[]
		constexpr auto _structs = 0xe8; // Dna.StructDecl[]
		constexpr auto _types = 0xf0; // Dna.TypeDecl[]
		constexpr auto _structReverse = 0xf8; // Dictionary(string, Dna.StructDecl)
	}

	namespace n_StackBuilderSink { // : IMessageSink
		constexpr auto _target = 0x10; // MarshalByRefObject
		constexpr auto _rp = 0x18; // RealProxy
	}

	namespace n_Expression.ExtensionInfo {
		constexpr auto NodeType = 0x10; // ExpressionType
	}

	namespace n_VFXLightBinder { // : VFXBinderBase
		constexpr auto m_ColorProperty = 0x20; // ExposedProperty
		constexpr auto m_BrightnessProperty = 0x28; // ExposedProperty
		constexpr auto m_RadiusProperty = 0x30; // ExposedProperty
		constexpr auto Target = 0x38; // Light
		constexpr auto BindColor = 0x40; // bool
		constexpr auto BindBrightness = 0x41; // bool
		constexpr auto BindRadius = 0x42; // bool
	}

	namespace n_WebConnectionData {
		constexpr auto _request = 0x10; // HttpWebRequest
		constexpr auto StatusCode = 0x18; // int
		constexpr auto StatusDescription = 0x20; // string
		constexpr auto Headers = 0x28; // WebHeaderCollection
		constexpr auto Version = 0x30; // Version
		constexpr auto ProxyVersion = 0x38; // Version
		constexpr auto stream = 0x40; // Stream
		constexpr auto Challenge = 0x48; // string[]
		constexpr auto _readState = 0x50; // ReadState
	}

	namespace n_EnumConverter { // : TypeConverter
		constexpr auto values = 0x10; // TypeConverter.StandardValuesCollection
		constexpr auto type = 0x18; // Type
	}

	namespace n_BitSet {
		constexpr auto count = 0x10; // int
		constexpr auto bits = 0x18; // uint[]
	}

	namespace n_CFProxySettings {
		constexpr auto settings = 0x10; // CFDictionary
	}

	namespace n_Flag { // : MonoBehaviour
		constexpr auto isBase = 0x18; // bool
		constexpr auto Character = 0x1a; // char
		constexpr auto CustomName = 0x20; // string
		constexpr auto Team = 0x28; // Team
		constexpr auto Radius = 0x2c; // float
		constexpr auto SnapToGround = 0x30; // bool
		constexpr auto OnFlagCaptured = 0x38; // Action(Flag, Team)
		constexpr auto CapturePerSecond = 0x40; // float
		constexpr auto ShowUI = 0x44; // bool
		constexpr auto CanTeamASpawn = 0x45; // bool
		constexpr auto CanTeamBSpawn = 0x46; // bool
		constexpr auto CanACapture = 0x47; // bool
		constexpr auto CanBCapture = 0x48; // bool
		constexpr auto NumberOfTeamAMemberInCount = 0x4c; // int
		constexpr auto NumberOfTeamBMemberInCount = 0x50; // int
		constexpr auto ComponentView = 0x58; // NetView
		constexpr auto ComponentMap = 0x60; // FlagWorldMap
		constexpr auto PlayerInsideTheFlag = 0x68; // List(PlayerNetworkState)
		constexpr auto VehicleSpawnPoints = 0x70; // VehicleSpawnPoint[]
		constexpr auto Objective = 0x78; // Objective
		constexpr auto UIComponent = 0x80; // FlagUI
		constexpr auto mSpawnPoints = 0x88; // SpawnPoint[]
		constexpr auto (Position)k__BackingField = 0x90; // Vector3
		constexpr auto (UIPosition)k__BackingField = 0x9c; // Vector3
		constexpr auto (isLocalPlayerInside)k__BackingField = 0xa8; // bool
		constexpr auto (isBeingCaptured)k__BackingField = 0xa9; // bool
		constexpr auto (TargetSquadsString)k__BackingField = 0xb0; // string
		constexpr auto (TargetSquadStringVersion)k__BackingField = 0xb8; // int
		constexpr auto (FastListIndexA)k__BackingField = 0xbc; // int
		constexpr auto mAwakeCalledFlag = 0xc0; // bool
		constexpr auto mCanTeamASpawnLock = 0xc1; // bool
		constexpr auto mCanTeamBSpawnLock = 0xc2; // bool
		constexpr auto mCanTeamACaptureLock = 0xc3; // bool
		constexpr auto mCanTeamBCaptureLock = 0xc4; // bool
		constexpr auto mWasBeingCapturedLock = 0xc5; // bool
		constexpr auto mRadiusSqr = 0xc8; // float
		constexpr auto mLocalLastCaptureSecond = 0xcc; // float
		constexpr auto mTeamSide = 0xd0; // float
	}

	namespace n_TeamGUI { // : MonoBehaviour
		constexpr auto MaxDistance = 0x18; // float
		constexpr auto MinDot = 0x1c; // float
		constexpr auto (FastListIndexA)k__BackingField = 0x20; // int
		constexpr auto (IsVisible)k__BackingField = 0x24; // bool
		constexpr auto (InFrustum)k__BackingField = 0x25; // bool
		constexpr auto (Team)k__BackingField = 0x26; // Team
		constexpr auto (IsMine)k__BackingField = 0x27; // bool
		constexpr auto (WorldPosition)k__BackingField = 0x28; // Vector3
		constexpr auto (LockedPlayer)k__BackingField = 0x38; // PlayerNetworkState
		constexpr auto (PlayerExists)k__BackingField = 0x40; // bool
		constexpr auto mRenderer = 0x48; // Renderer
		constexpr auto mMaxDistanceSqr = 0x50; // float
		constexpr auto mTargetState = 0x54; // bool
	}

	namespace n_ServerCertValidationCallback {
		constexpr auto m_ValidationCallback = 0x10; // RemoteCertificateValidationCallback
		constexpr auto m_Context = 0x18; // ExecutionContext
	}

	namespace n_PlayerProgess {
		constexpr auto SteamID = 0x10; // ulong
		constexpr auto DiscordID = 0x18; // ulong
		constexpr auto Role = 0x20; // Roles
		constexpr auto KillCount = 0x28; // Pint
		constexpr auto LeaderKills = 0x30; // Pint
		constexpr auto AssaultKills = 0x38; // Pint
		constexpr auto MedicKills = 0x40; // Pint
		constexpr auto EngineerKills = 0x48; // Pint
		constexpr auto SupportKills = 0x50; // Pint
		constexpr auto ReconKills = 0x58; // Pint
		constexpr auto DeathCount = 0x60; // Pint
		constexpr auto WinCount = 0x68; // uint
		constexpr auto LoseCount = 0x6c; // uint
		constexpr auto FriendlyShots = 0x70; // Pint
		constexpr auto FriendlyKills = 0x78; // Pint
		constexpr auto Revived = 0x80; // Pint
		constexpr auto RevivedTeamMates = 0x88; // Pint
		constexpr auto Assists = 0x90; // Pint
		constexpr auto Prestige = 0x98; // uint
		constexpr auto Rank = 0x9c; // uint
		constexpr auto EXP = 0xa0; // uint
		constexpr auto ShotsFired = 0xa4; // Pint
		constexpr auto ShotsHit = 0xac; // Pint
		constexpr auto Headshots = 0xb4; // Pint
		constexpr auto ObjectivesComplated = 0xbc; // Pint
		constexpr auto HealedHPs = 0xc4; // Pint
		constexpr auto RoadKills = 0xcc; // Pint
		constexpr auto Suicides = 0xd4; // Pint
		constexpr auto VehiclesDestroyed = 0xdc; // Pint
		constexpr auto VehicleHPRepaired = 0xe4; // Pint
		constexpr auto LongestKill = 0xec; // uint
		constexpr auto PlayTimeSeconds = 0xf0; // uint
		constexpr auto LeaderPlayTime = 0xf4; // uint
		constexpr auto AssaultPlayTime = 0xf8; // uint
		constexpr auto MedicPlayTime = 0xfc; // uint
		constexpr auto EngineerPlayTime = 0x100; // uint
		constexpr auto SupportPlayTime = 0x104; // uint
		constexpr auto ReconPlayTime = 0x108; // uint
		constexpr auto LeaderScore = 0x10c; // uint
		constexpr auto AssaultScore = 0x110; // uint
		constexpr auto MedicScore = 0x114; // uint
		constexpr auto EngineerScore = 0x118; // uint
		constexpr auto SupportScore = 0x11c; // uint
		constexpr auto ReconScore = 0x120; // uint
		constexpr auto TotalScore = 0x124; // uint
	}

	namespace n_MessageEventArgs {
		constexpr auto playerId = 0x10; // int
		constexpr auto data = 0x18; // byte[]
	}

	namespace n_ASN1 {
		constexpr auto m_nTag = 0x10; // byte
		constexpr auto m_aValue = 0x18; // byte[]
		constexpr auto elist = 0x20; // ArrayList
	}

	namespace n_BuildingAudioSource { // : MonoBehaviour
		constexpr auto TimeBeingDestroyed = 0x18; // float
		constexpr auto length = 0x1c; // float
		constexpr auto inverseSpeed = 0x20; // float
		constexpr auto size = 0x24; // StructureType
		constexpr auto startedFall = 0x28; // bool
		constexpr auto startedCrack = 0x29; // bool
		constexpr auto CloseRumble = 0x30; // AudioSource
		constexpr auto MediumRumble = 0x38; // AudioSource
		constexpr auto DistanceRumble = 0x40; // AudioSource
		constexpr auto OnFall = 0x48; // AudioSource
		constexpr auto Cracks = 0x50; // AudioClip[]
		constexpr auto Medium = 0x58; // AudioClip[]
		constexpr auto position = 0x60; // Vector3
		constexpr auto (TickIndex3)k__BackingField = 0x6c; // int
	}

	namespace n_MinimapObject { // : MonoBehaviour
		constexpr auto TargetColor = 0x18; // Color
	}

	namespace n_X509SubjectKeyIdentifierExtension { // : X509Extension
		constexpr auto _subjectKeyIdentifier = 0x28; // byte[]
		constexpr auto _ski = 0x30; // string
		constexpr auto _status = 0x38; // AsnDecodeStatus
	}

	namespace n_ServerObjectReplySink { // : IMessageSink
		constexpr auto _replySink = 0x10; // IMessageSink
		constexpr auto _identity = 0x18; // ServerIdentity
	}

	namespace n_ExplosiveBullet { // : ToolItem
		constexpr auto ProjectilePrefab = 0x60; // GameObject
		constexpr auto PhysicsRigidbodyRecoilForce = 0x68; // float
	}

	namespace n_WorldImporter {
		constexpr auto _dynamicsWorld = 0x10; // DynamicsWorld
		constexpr auto _allocatedBvhs = 0x18; // List(OptimizedBvh)
		constexpr auto _allocatedCollisionShapes = 0x20; // List(CollisionShape)
		constexpr auto _allocatedConstraints = 0x28; // List(TypedConstraint)
		constexpr auto _allocatedRigidBodies = 0x30; // List(RigidBody)
		constexpr auto _allocatedTriangleIndexArrays = 0x38; // List(TriangleIndexVertexArray)
		constexpr auto _allocatedTriangleInfoMaps = 0x40; // List(TriangleInfoMap)
		constexpr auto _bodyMap = 0x48; // Dictionary(byte[], CollisionObject)
		constexpr auto _bvhMap = 0x50; // Dictionary(long, OptimizedBvh)
		constexpr auto _nameBodyMap = 0x58; // Dictionary(string, RigidBody)
		constexpr auto _nameConstraintMap = 0x60; // Dictionary(string, TypedConstraint)
		constexpr auto _nameShapeMap = 0x68; // Dictionary(string, CollisionShape)
		constexpr auto _objectNameMap = 0x70; // Dictionary(object, string)
		constexpr auto _shapeMap = 0x78; // Dictionary(long, CollisionShape)
		constexpr auto _verboseMode = 0x80; // FileVerboseMode
	}

	namespace n_GamemodeBoudnsDebug { // : MonoBehaviour
		constexpr auto CheckGeneral = 0x18; // bool
		constexpr auto Team = 0x19; // Team
	}

	namespace n_DefaultValueAttribute { // : Attribute
		constexpr auto value = 0x10; // object
		constexpr auto DefaultValue = 0x10; // object
	}

	namespace n_Blit { // : ScriptableRendererFeature
		constexpr auto settings = 0x20; // Blit.BlitSettings
		constexpr auto m_RenderTextureHandle = 0x28; // RenderTargetHandle
		constexpr auto blitPass = 0x30; // BlitPass
	}

	namespace n_LocalShapeInfo { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_ServerIdentity { // : Identity
		constexpr auto _objectType = 0x48; // Type
		constexpr auto _serverObject = 0x50; // MarshalByRefObject
		constexpr auto _serverSink = 0x58; // IMessageSink
		constexpr auto _context = 0x60; // Context
		constexpr auto _lease = 0x68; // Lease
	}

	namespace n_LocalDataStoreElement {
		constexpr auto m_value = 0x10; // object
		constexpr auto m_cookie = 0x18; // long
	}

	namespace n_PlayerStart.NationStartCharacter.StartCharacter {
		constexpr auto Eye = 0x10; // Eye
		constexpr auto Face = 0x18; // Face
		constexpr auto Hair = 0x20; // Hair
		constexpr auto Skin = 0x28; // Body
		constexpr auto Uniform = 0x30; // Uniform
		constexpr auto Head = 0x38; // WearableHead
		constexpr auto Chest = 0x40; // WearableChest
		constexpr auto Belt = 0x48; // WearableBelt
		constexpr auto Backbag = 0x50; // WearableBackbag
	}

	namespace n_JobProducerTypeAttribute { // : Attribute
		constexpr auto (ProducerType)k__BackingField = 0x10; // Type
	}

	namespace n_LoadingToolInfo { // : MonoBehaviour
		constexpr auto ToolItem = 0x18; // ToolItem
		constexpr auto canvas = 0x20; // CanvasGroup
	}

	namespace n_AlignedCollisionObjectArrayEnumerator { // : IEnumerator(CollisionObject)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // IList(CollisionObject)
	}

	namespace n_GenerateHLSL { // : Attribute
		constexpr auto packingRules = 0x10; // PackingRules
		constexpr auto containsPackedFields = 0x14; // bool
		constexpr auto needAccessors = 0x15; // bool
		constexpr auto needSetters = 0x16; // bool
		constexpr auto needParamDebug = 0x17; // bool
		constexpr auto paramDefinesStart = 0x18; // int
		constexpr auto omitStructDeclaration = 0x1c; // bool
	}

	namespace n_FallenTreeBehaviour { // : MonoBehaviour
		constexpr auto Prefab = 0x18; // GameObject
		constexpr auto Height = 0x20; // float
		constexpr auto BoundsSize = 0x24; // float
		constexpr auto Rigidbody = 0x28; // Rigidbody
		constexpr auto AudioSource = 0x30; // AudioSource
		constexpr auto Parent = 0x38; // FallenTree
		constexpr auto CapsuleCollider = 0x40; // CapsuleCollider
		constexpr auto mAudioEnabled = 0x48; // bool
		constexpr auto mAudioShouldBeEnabled = 0x49; // bool
		constexpr auto mFallPlayed = 0x4a; // bool
	}

	namespace n_ServerList.Sorter { // : Comparer(ServerListElement)
		constexpr auto sort = 0x10; // ServerList.Sorting
		constexpr auto revert = 0x14; // bool
	}

	namespace n_XmlSchemaType { // : XmlSchemaAnnotated
		constexpr auto final = 0x10; // XmlSchemaDerivationMethod
		constexpr auto derivedBy = 0x14; // XmlSchemaDerivationMethod
		constexpr auto baseSchemaType = 0x18; // XmlSchemaType
		constexpr auto datatype = 0x20; // XmlSchemaDatatype
		constexpr auto elementDecl = 0x28; // SchemaElementDecl
		constexpr auto qname = 0x30; // XmlQualifiedName
		constexpr auto contentType = 0x38; // XmlSchemaContentType
	}

	namespace n_GameScreen_Bindings { // : MonoBehaviour
		constexpr auto Prefab = 0x18; // GameObject
		constexpr auto Parent = 0x20; // Transform
		constexpr auto LoadoutCanvas = 0x28; // CanvasGroup
		constexpr auto mPool = 0x30; // UIPool(KeybindingButton)
		constexpr auto mActive = 0x38; // List(KeybindingButton)
		constexpr auto mLastObject = 0x40; // object
		constexpr auto mLastFunction = 0x48; // Action(GameScreen_Bindings.Args)
		constexpr auto mArgs = 0x50; // GameScreen_Bindings.Args
		constexpr auto mLastFrame = 0x58; // int
		constexpr auto mLastTime = 0x5c; // float
		constexpr auto mGameObjectActive = 0x60; // bool
		constexpr auto mGroup = 0x68; // CanvasGroup
	}

	namespace n_Graphic { // : UIBehaviour
		constexpr auto m_Material = 0x18; // Material
		constexpr auto m_Color = 0x20; // Color
		constexpr auto m_SkipLayoutUpdate = 0x30; // bool
		constexpr auto m_SkipMaterialUpdate = 0x31; // bool
		constexpr auto m_RaycastTarget = 0x32; // bool
		constexpr auto m_RectTransform = 0x38; // RectTransform
		constexpr auto m_CanvasRenderer = 0x40; // CanvasRenderer
		constexpr auto m_Canvas = 0x48; // Canvas
		constexpr auto m_VertsDirty = 0x50; // bool
		constexpr auto m_MaterialDirty = 0x51; // bool
		constexpr auto m_OnDirtyLayoutCallback = 0x58; // UnityAction
		constexpr auto m_OnDirtyVertsCallback = 0x60; // UnityAction
		constexpr auto m_OnDirtyMaterialCallback = 0x68; // UnityAction
		constexpr auto m_CachedMesh = 0x70; // Mesh
		constexpr auto m_CachedUvs = 0x78; // Vector2[]
		constexpr auto m_ColorTweenRunner = 0x80; // TweenRunner(ColorTween)
		constexpr auto (useLegacyMeshGeneration)k__BackingField = 0x88; // bool
	}

	namespace n_RigidbodyInterpolationBehaviour { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto BoundsSize = 0x1c; // float
		constexpr auto mIsRegistered = 0x20; // bool
		constexpr auto mAwakeFlagCalled = 0x21; // bool
		constexpr auto mDisabled = 0x22; // bool
		constexpr auto Transform = 0x28; // Transform
		constexpr auto Rigidbody = 0x30; // Rigidbody
		constexpr auto HasRigidbody = 0x38; // bool
		constexpr auto PhysicsPosition = 0x3c; // Vector3
		constexpr auto PhysicsRotation = 0x48; // Quaternion
		constexpr auto PreviousPhysicsPosition = 0x58; // Vector3
		constexpr auto PreviousPhysicsRotation = 0x64; // Quaternion
		constexpr auto Position = 0x74; // Vector3
		constexpr auto Rotation = 0x80; // Quaternion
		constexpr auto InterpolatedFlag = 0x90; // bool
		constexpr auto ShouldInterpolate = 0x91; // bool
		constexpr auto Distance = 0x94; // float
	}

	namespace n_GameScreen_World2Screen { // : MonoBehaviour
		constexpr auto PrefabFlagUI = 0x18; // GameObject
		constexpr auto PrefabSpotterPingUI = 0x20; // GameObject
		constexpr auto PrefabRushBeaconUI = 0x28; // GameObject
		constexpr auto PrefabRushBeaconTargetUI = 0x30; // GameObject
		constexpr auto Flags = 0x38; // UIPool(FlagUI)
		constexpr auto RushBeacon = 0x40; // UIPool(RushBeaconUI)
		constexpr auto RushBeaconTarget = 0x48; // UIPool(RushBeaconTargetUI)
		constexpr auto SpotterPings = 0x50; // UIPool(RemoteSpotterPingUI)
	}

	namespace n_ItemBuffer {
		constexpr auto Mesh = 0x10; // Mesh
		constexpr auto Material = 0x18; // Material
		constexpr auto Batches = 0x20; // BatchBufferList
		constexpr auto BatchesShadow = 0x28; // BatchBufferList
		constexpr auto BaseCount = 0x30; // int
		constexpr auto OffsetCount = 0x34; // int
		constexpr auto ShadowBaseCount = 0x38; // int
		constexpr auto ShadowOffsetCount = 0x3c; // int
	}

	namespace n_sCti { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_AudioSampleProvider {
		constexpr auto sampleFramesAvailable = 0x10; // AudioSampleProvider.SampleFramesHandler
		constexpr auto sampleFramesOverflow = 0x18; // AudioSampleProvider.SampleFramesHandler
	}

	namespace n_DebugActionState {
		constexpr auto m_Type = 0x10; // DebugActionState.DebugActionKeyType
		constexpr auto m_PressedButtons = 0x18; // string[]
		constexpr auto m_PressedAxis = 0x20; // string
		constexpr auto m_PressedKeys = 0x28; // KeyCode[]
		constexpr auto m_TriggerPressedUp = 0x30; // bool[]
		constexpr auto m_Timer = 0x38; // float
		constexpr auto (runningAction)k__BackingField = 0x3c; // bool
		constexpr auto (actionState)k__BackingField = 0x40; // float
	}

	namespace n_SnapRotation { // : TransformComponentsSettings
		constexpr auto snapRotationAngle = 0x20; // float
		constexpr auto rotateAxisX = 0x24; // bool
		constexpr auto rotateAxisY = 0x25; // bool
		constexpr auto rotateAxisZ = 0x26; // bool
	}

	namespace n_DebugUIHandlerButton { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto m_Field = 0x60; // DebugUI.Button
	}

	namespace n_SlopePosition { // : TransformComponentsSettings
		constexpr auto maxSlope = 0x20; // float
		constexpr auto maxPositionOffset = 0x24; // Vector3
	}

	namespace n_TypeLoadException { // : SystemException
		constexpr auto ClassName = 0x88; // string
		constexpr auto AssemblyName = 0x90; // string
		constexpr auto MessageArg = 0x98; // string
		constexpr auto ResourceId = 0xa0; // int
	}

	namespace n_BaseVisualElementPanel { // : IPanel
		constexpr auto m_PixelsPerPoint = 0x10; // float
		constexpr auto (duringLayoutPhase)k__BackingField = 0x14; // bool
		constexpr auto (repaintData)k__BackingField = 0x18; // RepaintData
		constexpr auto (disposed)k__BackingField = 0x20; // bool
		constexpr auto m_TopElementUnderPointers = 0x28; // ElementUnderPointer
	}

	namespace n_ConvexSeparatingDistanceUtil { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_UnverifiedOutgoingPackage {
		constexpr auto EtaResend = 0x10; // float
		constexpr auto Package = 0x18; // SharedPackage
	}

	namespace n_BlitPass { // : ScriptableRenderPass
		constexpr auto blitMaterial = 0x68; // Material
		constexpr auto blitShaderPassIndex = 0x70; // int
		constexpr auto (filterMode)k__BackingField = 0x74; // FilterMode
		constexpr auto (source)k__BackingField = 0x78; // RenderTargetIdentifier
		constexpr auto (destination)k__BackingField = 0xa0; // RenderTargetHandle
		constexpr auto m_TemporaryColorTexture = 0xa4; // RenderTargetHandle
		constexpr auto m_ProfilerTag = 0xa8; // string
	}

	namespace n_LanguageHeader {
		constexpr auto FileName = 0x10; // string
		constexpr auto OriginalName = 0x18; // string
		constexpr auto Authors = 0x20; // string[]
	}

	namespace n_TimeZoneInfo { // : IEquatable(TimeZoneInfo)
		constexpr auto baseUtcOffset = 0x10; // TimeSpan
		constexpr auto daylightDisplayName = 0x18; // string
		constexpr auto displayName = 0x20; // string
		constexpr auto id = 0x28; // string
		constexpr auto transitions = 0x30; // List(KeyValuePair(DateTime, TimeType))
		constexpr auto standardDisplayName = 0x38; // string
		constexpr auto supportsDaylightSavingTime = 0x40; // bool
		constexpr auto adjustmentRules = 0x48; // TimeZoneInfo.AdjustmentRule[]
	}

	namespace n_GunGameTeamUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto PlayerUI = 0x58; // GunGameStepUI
		constexpr auto lockedSeconds = 0x60; // int
	}

	namespace n_XPathException { // : SystemException
		constexpr auto res = 0x88; // string
		constexpr auto args = 0x90; // string[]
		constexpr auto message = 0x98; // string
	}

	namespace n_Hashtable.SyncHashtable { // : Hashtable
		constexpr auto _table = 0x50; // Hashtable
	}

	namespace n_SemaphoreSlim.TaskNode { // : Task(bool)
		constexpr auto Prev = 0x58; // SemaphoreSlim.TaskNode
		constexpr auto Next = 0x60; // SemaphoreSlim.TaskNode
	}

	namespace n_AScope { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto PrefabLocals = 0x20; // PositionQuaternationScale
		constexpr auto PrefabAsset = 0x48; // GameObject
		constexpr auto Visual = 0x50; // Sprite
		constexpr auto LanguageId = 0x58; // int
		constexpr auto DefaultKill = 0x5c; // int
		constexpr auto ScopeType = 0x60; // ScopeType
		constexpr auto Sensitivity = 0x64; // ScopeSensitivity
		constexpr auto ZoomLevel = 0x68; // float
		constexpr auto Settings = 0x70; // AttachmentSettings
		constexpr auto SinusRecoil = 0x78; // float
		constexpr auto EulRecoil = 0x7c; // float
		constexpr auto CamShakeRecoil = 0x80; // float
	}

	namespace n_RuntimePanel { // : Panel
		constexpr auto targetTexture = 0x88; // RenderTexture
	}

	namespace n_UTF8Encoding.UTF8Encoder { // : EncoderNLS
		constexpr auto surrogateChar = 0x38; // int
	}

	namespace n_UsageBitfield {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_Curves.Aiming {
		constexpr auto PrimaryHorizontal = 0x10; // AnimationCurve
		constexpr auto PrimaryVertical = 0x18; // AnimationCurve
		constexpr auto PrimaryDepth = 0x20; // AnimationCurve
		constexpr auto SecondaryHorizontal = 0x28; // AnimationCurve
		constexpr auto SecondaryVertical = 0x30; // AnimationCurve
		constexpr auto SecondaryDepth = 0x38; // AnimationCurve
	}

	namespace n_Encoding.EncodingByteBuffer {
		constexpr auto bytes = 0x10; // byte*
		constexpr auto byteStart = 0x18; // byte*
		constexpr auto byteEnd = 0x20; // byte*
		constexpr auto chars = 0x28; // char*
		constexpr auto charStart = 0x30; // char*
		constexpr auto charEnd = 0x38; // char*
		constexpr auto byteCountResult = 0x40; // int
		constexpr auto enc = 0x48; // Encoding
		constexpr auto encoder = 0x50; // EncoderNLS
		constexpr auto fallbackBuffer = 0x58; // EncoderFallbackBuffer
	}

	namespace n_ConfigHandler { // : SmallXmlParser.IContentHandler
		constexpr auto typeEntries = 0x10; // ArrayList
		constexpr auto channelInstances = 0x18; // ArrayList
		constexpr auto currentChannel = 0x20; // ChannelData
		constexpr auto currentProviderData = 0x28; // Stack
		constexpr auto currentClientUrl = 0x30; // string
		constexpr auto appName = 0x38; // string
		constexpr auto currentXmlPath = 0x40; // string
		constexpr auto onlyDelayedChannels = 0x48; // bool
	}

	namespace n_KerningTable {
		constexpr auto kerningPairs = 0x10; // List(KerningPair)
	}

	namespace n_UnitySerializationHolder { // : ISerializable
		constexpr auto m_instantiation = 0x10; // Type[]
		constexpr auto m_elementTypes = 0x18; // int[]
		constexpr auto m_genericParameterPosition = 0x20; // int
		constexpr auto m_declaringType = 0x28; // Type
		constexpr auto m_declaringMethod = 0x30; // MethodBase
		constexpr auto m_data = 0x38; // string
		constexpr auto m_assemblyName = 0x40; // string
		constexpr auto m_unityType = 0x48; // int
	}

	namespace n_GameScreen_Healing { // : MonoBehaviour
		constexpr auto BandagedCanvas = 0x18; // CanvasGroup
		constexpr auto BandagedLabelCanvas = 0x20; // CanvasGroup
		constexpr auto BandagedValueRect = 0x28; // RectTransform
		constexpr auto HealedCanvas = 0x30; // CanvasGroup
		constexpr auto HealedLabelCanvas = 0x38; // CanvasGroup
		constexpr auto HealedIconRect = 0x40; // RectTransform
		constexpr auto (TickIndex8)k__BackingField = 0x48; // int
	}

	namespace n_MainLoop.mLoopUpdateStart {
		constexpr auto Array = 0x10; // IUpdateStartReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_NetworkPrefabs { // : ScriptableObject
		constexpr auto Prefabs = 0x18; // GameObject[]
	}

	namespace n_PixelPerfectCamera { // : MonoBehaviour
		constexpr auto m_AssetsPPU = 0x18; // int
		constexpr auto m_RefResolutionX = 0x1c; // int
		constexpr auto m_RefResolutionY = 0x20; // int
		constexpr auto m_UpscaleRT = 0x24; // bool
		constexpr auto m_PixelSnapping = 0x25; // bool
		constexpr auto m_CropFrameX = 0x26; // bool
		constexpr auto m_CropFrameY = 0x27; // bool
		constexpr auto m_StretchFill = 0x28; // bool
		constexpr auto m_Camera = 0x30; // Camera
		constexpr auto m_Internal = 0x38; // PixelPerfectCameraInternal
		constexpr auto m_CinemachineCompatibilityMode = 0x40; // bool
	}

	namespace n_UploadProgressChangedEventArgs { // : ProgressChangedEventArgs
		constexpr auto m_BytesReceived = 0x20; // long
		constexpr auto m_TotalBytesToReceive = 0x28; // long
		constexpr auto m_BytesSent = 0x30; // long
		constexpr auto m_TotalBytesToSend = 0x38; // long
	}

	namespace n_TMP_Settings.LineBreakingTable {
		constexpr auto leadingCharacters = 0x10; // Dictionary(int, char)
		constexpr auto followingCharacters = 0x18; // Dictionary(int, char)
	}

	namespace n_ClaymoreStanding { // : ReplicaGadget
		constexpr auto LineA = 0x48; // LineRenderer
		constexpr auto LineB = 0x50; // LineRenderer
		constexpr auto GUI = 0x58; // TeamGUI
		constexpr auto DeploySound = 0x60; // AudioClip
		constexpr auto TriggerSound = 0x68; // AudioClip
		constexpr auto Explosion = 0x70; // GameObject
		constexpr auto Claymore = 0x78; // AGadget
		constexpr auto ground = 0x80; // ExistanceProvider
		constexpr auto cableA = 0x88; // ExistanceProvider
		constexpr auto cableB = 0x90; // ExistanceProvider
		constexpr auto canConnect = 0x98; // bool
		constexpr auto connected = 0x99; // bool
		constexpr auto spawnTime = 0x9c; // float
		constexpr auto connectTime = 0xa0; // float
		constexpr auto etaExplode = 0xa4; // float
		constexpr auto checkPosition = 0xa8; // Vector3
		constexpr auto lastRayCheck = 0xb4; // float
		constexpr auto triggerOwner = 0xb8; // ulong
		constexpr auto parentedToGround = 0xc0; // bool
		constexpr auto (isTriggered)k__BackingField = 0xc1; // bool
	}

	namespace n_ShadowCaster2D { // : ShadowCasterGroup2D
		constexpr auto m_HasRenderer = 0x28; // bool
		constexpr auto m_UseRendererSilhouette = 0x29; // bool
		constexpr auto m_CastsShadows = 0x2a; // bool
		constexpr auto m_SelfShadows = 0x2b; // bool
		constexpr auto m_ApplyToSortingLayers = 0x30; // int[]
		constexpr auto m_ShapePath = 0x38; // Vector3[]
		constexpr auto m_ShapePathHash = 0x40; // int
		constexpr auto m_Mesh = 0x48; // Mesh
		constexpr auto m_InstanceId = 0x50; // int
		constexpr auto m_ShadowCasterGroup = 0x58; // ShadowCasterGroup2D
		constexpr auto m_PreviousShadowCasterGroup = 0x60; // ShadowCasterGroup2D
		constexpr auto m_PreviousShadowGroup = 0x68; // int
		constexpr auto m_PreviousCastsShadows = 0x6c; // bool
		constexpr auto m_PreviousPathHash = 0x70; // int
	}

	namespace n_PropagationPaths {
		constexpr auto trickleDownPath = 0x10; // List(VisualElement)
		constexpr auto targetElements = 0x18; // List(VisualElement)
		constexpr auto bubbleUpPath = 0x20; // List(VisualElement)
	}

	namespace n_VFXUISliderBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Slider
	}

	namespace n_DatatypeImplementation.SchemaDatatypeMap { // : IComparable
		constexpr auto name = 0x10; // string
		constexpr auto type = 0x18; // DatatypeImplementation
		constexpr auto parentIndex = 0x20; // int
	}

	namespace n_FileInfo { // : FileSystemInfo
		constexpr auto _name = 0x60; // string
	}

	namespace n_EventWrittenEventArgs { // : EventArgs
		constexpr auto (EventId)k__BackingField = 0x10; // int
		constexpr auto (RelatedActivityId)k__BackingField = 0x14; // Guid
		constexpr auto (Payload)k__BackingField = 0x28; // ReadOnlyCollection(object)
		constexpr auto m_message = 0x30; // string
		constexpr auto m_eventName = 0x38; // string
		constexpr auto m_eventSource = 0x40; // EventSource
		constexpr auto m_payloadNames = 0x48; // ReadOnlyCollection(string)
	}

	namespace n_TrimeshPrimitiveManager { // : PrimitiveManagerBase
		constexpr auto _meshInterface = 0x18; // StridingMeshInterface
	}

	namespace n_TMP_SpriteCharacter { // : TMP_TextElement
		constexpr auto m_Name = 0x30; // string
		constexpr auto m_HashCode = 0x38; // int
	}

	namespace n_ExistanceProvider {
		constexpr auto PhysicalObject = 0x10; // MonoBehaviour
		constexpr auto (SurfaceType)k__BackingField = 0x18; // ExistanceSurface
	}

	namespace n_TaskFactory {
		constexpr auto m_defaultCancellationToken = 0x10; // CancellationToken
		constexpr auto m_defaultScheduler = 0x18; // TaskScheduler
		constexpr auto m_defaultCreationOptions = 0x20; // TaskCreationOptions
		constexpr auto m_defaultContinuationOptions = 0x24; // TaskContinuationOptions
	}

	namespace n_NameCache {
		constexpr auto name = 0x10; // string
	}

	namespace n_VehicleRaycasterResult {
		constexpr auto (DistFraction)k__BackingField = 0x10; // float
		constexpr auto (HitNormalInWorld)k__BackingField = 0x14; // Vector3
		constexpr auto (HitPointInWorld)k__BackingField = 0x20; // Vector3
	}

	namespace n_AlignedCollisionObjectArrayDebugView {
		constexpr auto _array = 0x10; // AlignedCollisionObjectArray
	}

	namespace n_Task.ContingentProperties {
		constexpr auto m_capturedContext = 0x10; // ExecutionContext
		constexpr auto m_completionEvent = 0x18; // ManualResetEventSlim
		constexpr auto m_exceptionsHolder = 0x20; // TaskExceptionHolder
		constexpr auto m_cancellationToken = 0x28; // CancellationToken
		constexpr auto m_cancellationRegistration = 0x30; // Shared(CancellationTokenRegistration)
		constexpr auto m_internalCancellationRequested = 0x38; // int
		constexpr auto m_completionCountdown = 0x3c; // int
		constexpr auto m_exceptionalChildren = 0x40; // List(Task)
	}

	namespace n_VaultingSettings.ConditionBox {
		constexpr auto ConditionCollide = 0x10; // bool
		constexpr auto Forward = 0x14; // float
		constexpr auto UpDown = 0x18; // float
		constexpr auto Size = 0x1c; // Vector3
		constexpr auto Positive = 0x28; // Color
	}

	namespace n_Object {
		constexpr auto m_CachedPtr = 0x10; // IntPtr
	}

	namespace n_UnhandledExceptionEventArgs { // : EventArgs
		constexpr auto _Exception = 0x10; // object
		constexpr auto _IsTerminating = 0x18; // bool
	}

	namespace n_NullAttachment { // : IAttachmentItem
		constexpr auto t = 0x10; // AttachmentType
		constexpr auto m = 0x18; // AttachmentSettings
	}

	namespace n_AlignedBroadphasePairArray { // : IList(BroadphasePair)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_SocketException { // : Win32Exception
		constexpr auto m_EndPoint = 0x90; // EndPoint
	}

	namespace n_UIntArrayEnumerator { // : IEnumerator(uint)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // IList(uint)
	}

	namespace n_KeyHandler {
		constexpr auto Dir = 0x10; // string
		constexpr auto ActualDir = 0x18; // string
		constexpr auto IsVolatile = 0x20; // bool
		constexpr auto values = 0x28; // Hashtable
		constexpr auto file = 0x30; // string
		constexpr auto dirty = 0x38; // bool
	}

	namespace n_RotationalLimitMotor { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_MultiBodyLinkCollider { // : CollisionObject
		constexpr auto _multiBody = 0x40; // MultiBody
	}

	namespace n_NameInfo { // : ConcurrentSetItem(KeyValuePair(string, EventTags), NameInfo)
		constexpr auto name = 0x10; // string
		constexpr auto NIFullName = 0x10; // string
		constexpr auto NIobjectId = 0x18; // long
		constexpr auto tags = 0x18; // EventTags
		constexpr auto identity = 0x1c; // int
		constexpr auto NIassemId = 0x20; // long
		constexpr auto nameMetadata = 0x20; // byte[]
		constexpr auto NIprimitiveTypeEnum = 0x28; // InternalPrimitiveTypeE
		constexpr auto NItype = 0x30; // Type
		constexpr auto NIisSealed = 0x38; // bool
		constexpr auto NIisArray = 0x39; // bool
		constexpr auto NIisArrayItem = 0x3a; // bool
		constexpr auto NItransmitTypeOnObject = 0x3b; // bool
		constexpr auto NItransmitTypeOnMember = 0x3c; // bool
		constexpr auto NIisParentTypeOnObject = 0x3d; // bool
		constexpr auto NIarrayEnum = 0x40; // InternalArrayTypeE
		constexpr auto NIsealedStatusChecked = 0x44; // bool
	}

	namespace n_TokenizerStream {
		constexpr auto m_countTokens = 0x10; // int
		constexpr auto m_headTokens = 0x18; // TokenizerShortBlock
		constexpr auto m_lastTokens = 0x20; // TokenizerShortBlock
		constexpr auto m_currentTokens = 0x28; // TokenizerShortBlock
		constexpr auto m_indexTokens = 0x30; // int
		constexpr auto m_headStrings = 0x38; // TokenizerStringBlock
		constexpr auto m_currentStrings = 0x40; // TokenizerStringBlock
		constexpr auto m_indexStrings = 0x48; // int
	}

	namespace n_ChromaticAberration { // : VolumeComponent
		constexpr auto intensity = 0x38; // ClampedFloatParameter
	}

	namespace n_WeaponAttachments {
		constexpr auto MainSight = 0x10; // AScope
		constexpr auto TopSight = 0x18; // ATopSight
		constexpr auto MainCanted = 0x20; // ACanted
		constexpr auto MainBarrel = 0x28; // ABarrel
		constexpr auto MainSideRail = 0x30; // ASideRail
		constexpr auto MainUnderRail = 0x38; // AUnderRail
		constexpr auto MainBoltAction = 0x40; // ABoltAction
		constexpr auto SkinIndex = 0x48; // byte
		constexpr auto MagazineIndex = 0x49; // byte
	}

	namespace n_OpusDecoder { // : IDisposable
		constexpr auto _handle = 0x10; // IntPtr
		constexpr auto _previousPacketInvalid = 0x18; // bool
		constexpr auto _channelCount = 0x1c; // int
		constexpr auto _previousPacketBandwidth = 0x20; // Nullable(Bandwidth)
	}

	namespace n_DynamicLOD2 { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto SelfInitizlie = 0x1c; // bool
		constexpr auto LOD0Static = 0x20; // List(Renderer)
		constexpr auto LOD0ScreenHeight = 0x28; // float
		constexpr auto LOD1Static = 0x30; // List(Renderer)
		constexpr auto LOD1ScreenHeight = 0x38; // float
		constexpr auto VerticalRadius = 0x3c; // float
		constexpr auto ScreenHeightRaw = 0x40; // float
		constexpr auto Position = 0x44; // Vector3
		constexpr auto inFrustum = 0x50; // bool
		constexpr auto ScreenHeight = 0x54; // float
		constexpr auto isActive = 0x58; // bool
		constexpr auto m_activeLOD = 0x5c; // int
		constexpr auto m_targetLOD = 0x60; // int
		constexpr auto VerticalRadiusSqr = 0x64; // float
	}

	namespace n_VehicleAudioSource {
		constexpr auto isRented = 0x10; // bool
		constexpr auto MaxRange = 0x14; // float
		constexpr auto Parent = 0x18; // Transform
		constexpr auto _lowPass = 0x20; // bool
		constexpr auto _valid = 0x21; // bool
		constexpr auto _volume = 0x24; // float
		constexpr auto _pitch = 0x28; // float
		constexpr auto _clip = 0x30; // AudioClip
		constexpr auto _src = 0x38; // AudioSource
		constexpr auto _filter = 0x40; // AudioLowPassFilter
		constexpr auto _filterEnabled = 0x48; // bool
		constexpr auto _spread = 0x4c; // float
		constexpr auto _baseVolume = 0x50; // float
		constexpr auto Enabled = 0x54; // bool
	}

	namespace n_AlignedIndexedMeshArray { // : IList(IndexedMesh)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_TMP_UpdateRegistry {
		constexpr auto m_LayoutRebuildQueue = 0x10; // List(ICanvasElement)
		constexpr auto m_LayoutQueueLookup = 0x18; // HashSet(int)
		constexpr auto m_GraphicRebuildQueue = 0x20; // List(ICanvasElement)
		constexpr auto m_GraphicQueueLookup = 0x28; // HashSet(int)
	}

	namespace n_IPHostEntry {
		constexpr auto hostName = 0x10; // string
		constexpr auto aliases = 0x18; // string[]
		constexpr auto addressList = 0x20; // IPAddress[]
		constexpr auto isTrustedHost = 0x28; // bool
	}

	namespace n_X509EnhancedKeyUsageExtension { // : X509Extension
		constexpr auto _enhKeyUsage = 0x28; // OidCollection
		constexpr auto _status = 0x30; // AsnDecodeStatus
	}

	namespace n_BroadphaseRayCallback { // : BroadphaseAabbCallback
		constexpr auto _signs = 0x20; // UIntArray
	}

	namespace n_ObjectCullSettings {
		constexpr auto DistanceToCamera = 0x10; // float
		constexpr auto InFrustum = 0x14; // bool
		constexpr auto ScreenHeight = 0x18; // float
		constexpr auto Focus = 0x1c; // float
	}

	namespace n_CultureData {
		constexpr auto sAM1159 = 0x10; // string
		constexpr auto sPM2359 = 0x18; // string
		constexpr auto sTimeSeparator = 0x20; // string
		constexpr auto saLongTimes = 0x28; // string[]
		constexpr auto saShortTimes = 0x30; // string[]
		constexpr auto iFirstDayOfWeek = 0x38; // int
		constexpr auto iFirstWeekOfYear = 0x3c; // int
		constexpr auto waCalendars = 0x40; // int[]
		constexpr auto calendars = 0x48; // CalendarData[]
		constexpr auto sISO639Language = 0x50; // string
		constexpr auto sRealName = 0x58; // string
		constexpr auto bUseOverrides = 0x60; // bool
		constexpr auto calendarId = 0x64; // int
		constexpr auto numberIndex = 0x68; // int
		constexpr auto iDefaultAnsiCodePage = 0x6c; // int
		constexpr auto iDefaultOemCodePage = 0x70; // int
		constexpr auto iDefaultMacCodePage = 0x74; // int
		constexpr auto iDefaultEbcdicCodePage = 0x78; // int
		constexpr auto isRightToLeft = 0x7c; // bool
		constexpr auto sListSeparator = 0x80; // string
	}

	namespace n_OSSpecificSynchronizationContext { // : SynchronizationContext
		constexpr auto m_OSSynchronizationContext = 0x18; // object
	}

	namespace n_DebugUIHandlerWidget { // : MonoBehaviour
		constexpr auto colorDefault = 0x18; // Color
		constexpr auto colorSelected = 0x28; // Color
		constexpr auto (parentUIHandler)k__BackingField = 0x38; // DebugUIHandlerWidget
		constexpr auto (previousUIHandler)k__BackingField = 0x40; // DebugUIHandlerWidget
		constexpr auto (nextUIHandler)k__BackingField = 0x48; // DebugUIHandlerWidget
		constexpr auto m_Widget = 0x50; // DebugUI.Widget
	}

	namespace n_AsyncStreamReader {
		constexpr auto stream = 0x10; // Stream
		constexpr auto encoding = 0x18; // Encoding
		constexpr auto decoder = 0x20; // Decoder
		constexpr auto byteBuffer = 0x28; // byte[]
		constexpr auto charBuffer = 0x30; // char[]
		constexpr auto cancelOperation = 0x38; // bool
		constexpr auto eofEvent = 0x40; // ManualResetEvent
		constexpr auto syncObject = 0x48; // object
	}

	namespace n_SelfDestroy { // : MonoBehaviour
		constexpr auto LifeTime = 0x18; // float
		constexpr auto TargetObject = 0x20; // GameObject
	}

	namespace n_AlignedManifoldArray { // : IList(PersistentManifold)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_MarshalByRefObject {
		constexpr auto _identity = 0x10; // object
	}

	namespace n_ConnectionIndicator { // : MonoBehaviour
		constexpr auto ConnectionBad = 0x18; // CanvasGroup
		constexpr auto Desync = 0x20; // CanvasGroup
		constexpr auto BadPing = 0x28; // TextMeshProUGUI
		constexpr auto (TickIndex8)k__BackingField = 0x30; // int
		constexpr auto mLastPing = 0x34; // int
	}

	namespace n_Squad.SquadRoles {
		constexpr auto squad = 0x10; // Squad
		constexpr auto roleCounters = 0x18; // int[]
	}

	namespace n_DebugUIHandlerIndirectFloatField { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueLabel = 0x60; // Text
		constexpr auto getter = 0x68; // Func(float)
		constexpr auto setter = 0x70; // Action(float)
		constexpr auto incStepGetter = 0x78; // Func(float)
		constexpr auto incStepMultGetter = 0x80; // Func(float)
		constexpr auto decimalsGetter = 0x88; // Func(float)
	}

	namespace n_BinaryFormatter {
		constexpr auto m_surrogates = 0x10; // ISurrogateSelector
		constexpr auto m_context = 0x18; // StreamingContext
		constexpr auto m_binder = 0x28; // SerializationBinder
		constexpr auto m_typeFormat = 0x30; // FormatterTypeStyle
		constexpr auto m_assemblyFormat = 0x34; // FormatterAssemblyStyle
		constexpr auto m_securityLevel = 0x38; // TypeFilterLevel
		constexpr auto m_crossAppDomainArray = 0x40; // object[]
	}

	namespace n_SoundElement { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto src = 0x20; // AudioSource
		constexpr auto TimeToBePooled = 0x28; // float
	}

	namespace n_TextReader.SyncTextReader { // : TextReader
		constexpr auto _in = 0x18; // TextReader
	}

	namespace n_AssemblyMetadataAttribute { // : Attribute
		constexpr auto m_key = 0x10; // string
		constexpr auto m_value = 0x18; // string
	}

	namespace n_LoadoutAttachmentTrigger { // : MonoBehaviour
		constexpr auto Target = 0x18; // Transform
		constexpr auto rectTransform = 0x20; // RectTransform
	}

	namespace n_IgnoreAttribute { // : Attribute
		constexpr auto (DoesNotContributeToSize)k__BackingField = 0x10; // bool
	}

	namespace n_SurfaceDataAttributes { // : Attribute
		constexpr auto displayNames = 0x10; // string[]
		constexpr auto isDirection = 0x18; // bool
		constexpr auto sRGBDisplay = 0x19; // bool
		constexpr auto precision = 0x1c; // FieldPrecision
	}

	namespace n_ScriptableRendererFeature { // : ScriptableObject
		constexpr auto m_Active = 0x18; // bool
	}

	namespace n_ObjectMap {
		constexpr auto objectName = 0x10; // string
		constexpr auto objectType = 0x18; // Type
		constexpr auto binaryTypeEnumA = 0x20; // BinaryTypeEnum[]
		constexpr auto typeInformationA = 0x28; // object[]
		constexpr auto memberTypes = 0x30; // Type[]
		constexpr auto memberNames = 0x38; // string[]
		constexpr auto objectInfo = 0x40; // ReadObjectInfo
		constexpr auto isInitObjectInfo = 0x48; // bool
		constexpr auto objectReader = 0x50; // ObjectReader
		constexpr auto objectId = 0x58; // int
		constexpr auto assemblyInfo = 0x60; // BinaryAssemblyInfo
	}

	namespace n_SchemaEntity { // : IDtdEntityInfo
		constexpr auto qname = 0x10; // XmlQualifiedName
		constexpr auto url = 0x18; // string
		constexpr auto pubid = 0x20; // string
		constexpr auto text = 0x28; // string
		constexpr auto ndata = 0x30; // XmlQualifiedName
		constexpr auto lineNumber = 0x38; // int
		constexpr auto linePosition = 0x3c; // int
		constexpr auto isParameter = 0x40; // bool
		constexpr auto isExternal = 0x41; // bool
		constexpr auto parsingInProgress = 0x42; // bool
		constexpr auto isDeclaredInExternal = 0x43; // bool
		constexpr auto baseURI = 0x48; // string
		constexpr auto declaredURI = 0x50; // string
	}

	namespace n_EventCallbackRegistry {
		constexpr auto m_Callbacks = 0x10; // EventCallbackList
		constexpr auto m_TemporaryCallbacks = 0x18; // EventCallbackList
		constexpr auto m_IsInvoking = 0x20; // int
	}

	namespace n_AlignedFaceArray { // : IList(Face)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_VFXUIToggleBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Toggle
	}

	namespace n_Task.DelayPromise { // : Task(VoidTaskResult)
		constexpr auto Token = 0x58; // CancellationToken
		constexpr auto Registration = 0x60; // CancellationTokenRegistration
		constexpr auto Timer = 0x78; // Timer
	}

	namespace n_ScaleSinAnimated { // : MonoBehaviour
		constexpr auto WaveOffset = 0x18; // float
		constexpr auto WaveFrequency = 0x1c; // float
		constexpr auto WaveIntensity = 0x20; // float
		constexpr auto (TickIndex8)k__BackingField = 0x24; // int
	}

	namespace n_ValidationResult {
		constexpr auto trusted = 0x10; // bool
		constexpr auto user_denied = 0x11; // bool
		constexpr auto error_code = 0x14; // int
		constexpr auto policy_errors = 0x18; // Nullable(MonoSslPolicyErrors)
	}

	namespace n_ProcessStartInfo {
		constexpr auto fileName = 0x10; // string
		constexpr auto arguments = 0x18; // string
		constexpr auto directory = 0x20; // string
		constexpr auto verb = 0x28; // string
		constexpr auto windowStyle = 0x30; // ProcessWindowStyle
		constexpr auto errorDialog = 0x34; // bool
		constexpr auto errorDialogParentHandle = 0x38; // IntPtr
		constexpr auto useShellExecute = 0x40; // bool
		constexpr auto userName = 0x48; // string
		constexpr auto domain = 0x50; // string
		constexpr auto password = 0x58; // SecureString
		constexpr auto passwordInClearText = 0x60; // string
		constexpr auto loadUserProfile = 0x68; // bool
		constexpr auto redirectStandardInput = 0x69; // bool
		constexpr auto redirectStandardOutput = 0x6a; // bool
		constexpr auto redirectStandardError = 0x6b; // bool
		constexpr auto standardOutputEncoding = 0x70; // Encoding
		constexpr auto standardErrorEncoding = 0x78; // Encoding
		constexpr auto createNoWindow = 0x80; // bool
		constexpr auto weakParentProcess = 0x88; // WeakReference
		constexpr auto environmentVariables = 0x90; // StringDictionary
		constexpr auto environment = 0x98; // IDictionary(string, string)
	}

	namespace n_X509CertificateCollection.X509CertificateEnumerator { // : IEnumerator
		constexpr auto enumerator = 0x10; // IEnumerator
	}

	namespace n_DefaultProxySectionInternal {
		constexpr auto webProxy = 0x10; // IWebProxy
	}

	namespace n_NoInterpMaxFloatParameter { // : VolumeParameter(float)
		constexpr auto max = 0x20; // float
	}

	namespace n_PostProcessData.TextureResources {
		constexpr auto blueNoise16LTex = 0x10; // Texture2D[]
		constexpr auto filmGrainTex = 0x18; // Texture2D[]
		constexpr auto smaaAreaTex = 0x20; // Texture2D
		constexpr auto smaaSearchTex = 0x28; // Texture2D
	}

	namespace n_VolumeComponentMenu { // : Attribute
		constexpr auto menu = 0x10; // string
	}

	namespace n_MainLoop.mLoopLateUpdatePhysics {
		constexpr auto Array = 0x10; // ILateUpdatePhysicsReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_ConvexPolyhedron { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _uniqueEdges = 0x18; // AlignedVector3Array
		constexpr auto _vertices = 0x20; // AlignedVector3Array
	}

	namespace n_RelationshipManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnRefresh = 0x20; // RelationshipManager.RefreshHandler
		constexpr auto OnRelationshipUpdate = 0x28; // RelationshipManager.RelationshipUpdateHandler
	}

	namespace n_DeployButtons { // : MonoBehaviour
		constexpr auto DeployButton = 0x18; // GraphicRevertedButton
		constexpr auto SpectatorButton = 0x20; // GraphicRevertedButton
		constexpr auto DeployButtonValueImage = 0x28; // Image
		constexpr auto EnterToCloseLabel = 0x30; // TextMeshProUGUI
		constexpr auto DeployButtonLabel = 0x38; // TextMeshProUGUI
		constexpr auto DeployAboveButtonLabel = 0x40; // TextMeshProUGUI
		constexpr auto GamemodeLabel = 0x48; // TextMeshProUGUI
		constexpr auto DeployAboveButtonCanvas = 0x50; // CanvasGroup
		constexpr auto RespawnAudioSource = 0x58; // AudioSource
		constexpr auto OnRespawnAvailable = 0x60; // AudioClip
		constexpr auto OnRespawnAvailableLow = 0x68; // AudioClip
		constexpr auto OnDeployFail = 0x70; // AudioClip
		constexpr auto OnWaveReadyPressed = 0x78; // AudioClip[]
		constexpr auto DefaultButtonColor = 0x80; // Color
		constexpr auto InCombatButtonColor = 0x90; // Color
		constexpr auto WaveSystemSpawnReadyColor = 0xa0; // Color
		constexpr auto WaveSystemSpawnUnreadyColor = 0xb0; // Color
		constexpr auto (TickIndex8)k__BackingField = 0xc0; // int
		constexpr auto mLastSelectedObject = 0xc8; // MapWorldBehaviour
		constexpr auto mLastCanSpawnState = 0xd0; // bool
		constexpr auto mLastWaitingForCountdown = 0xd1; // bool
		constexpr auto mWaveSystemPlayerReady = 0xd2; // bool
		constexpr auto mSpawnCounter = 0xd4; // float
		constexpr auto mLastButtonColor = 0xd8; // Color
		constexpr auto mTargetButtonColor = 0xe8; // Color
		constexpr auto mLastFrame = 0xf8; // int
	}

	namespace n_FtpStatus {
		constexpr auto statusCode = 0x10; // FtpStatusCode
		constexpr auto statusDescription = 0x18; // string
	}

	namespace n_DeathScreen { // : MonoBehaviour
		constexpr auto valueBar = 0x18; // RectTransform
		constexpr auto NearstMedicValue = 0x20; // TextMeshProUGUI
		constexpr auto NearstTeamValue = 0x28; // TextMeshProUGUI
		constexpr auto SpaceToGiveUpText = 0x30; // TextMeshProUGUI
		constexpr auto KillCount = 0x38; // TextMeshProUGUI
		constexpr auto SpaceToGiveUpTextCanvas = 0x40; // CanvasGroup
		constexpr auto beingDragged = 0x48; // CanvasGroup
		constexpr auto HealingSelf = 0x50; // Transform
		constexpr auto HealingParent = 0x58; // Transform
		constexpr auto KillerMain = 0x60; // GameObject
		constexpr auto KillerName = 0x68; // TextMeshProUGUI
		constexpr auto TicketsScreen = 0x70; // GameObject
		constexpr auto TicketCount = 0x78; // TextMeshProUGUI
		constexpr auto TicketNegOneRect = 0x80; // RectTransform
		constexpr auto speed = 0x88; // float
		constexpr auto sendGiveUp = 0x8c; // bool
		constexpr auto killer = 0x90; // NetworkClient
		constexpr auto (TickIndex8)k__BackingField = 0x98; // int
	}

	namespace n_TypeDependencyAttribute { // : Attribute
		constexpr auto typeName = 0x10; // string
	}

	namespace n_TailoringInfo {
		constexpr auto LCID = 0x10; // int
		constexpr auto TailoringIndex = 0x14; // int
		constexpr auto TailoringCount = 0x18; // int
		constexpr auto FrenchSort = 0x1c; // bool
	}

	namespace n_MainMenu_InClan_List_Invite { // : MonoBehaviour
		constexpr auto ProfilePicture = 0x18; // RawImage
		constexpr auto ProfileLoading = 0x20; // GameObject
		constexpr auto Nickname = 0x28; // TextMeshProUGUI
		constexpr auto ExpireCounter = 0x30; // TextMeshProUGUI
		constexpr auto CodeField = 0x38; // TMP_InputField
		constexpr auto Actions = 0x40; // GameObject
		constexpr auto code = 0x48; // ClanInviteCode
		constexpr auto steamStats = 0x50; // SteamStats
		constexpr auto isSet = 0x58; // bool
	}

	namespace n_TerrianLayerSound {
		constexpr auto Layer = 0x10; // TerrainLayer
		constexpr auto Material = 0x18; // PhysicMaterial
	}

	namespace n_CatchGameSettings { // : GamemodeSettingsBase
		constexpr auto (CatchGame_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (CatchGame_Tickets)k__BackingField = 0x150; // GamemodeVariable(int)
	}

	namespace n_BoatState {
		constexpr auto NetworkDelta = 0x10; // Vector3
		constexpr auto NetworkDeltaRotation = 0x1c; // Quaternion
		constexpr auto ServerPosition = 0x2c; // Vector3
		constexpr auto ServerRotation = 0x38; // Quaternion
		constexpr auto ClientWorldVelocity = 0x48; // Vector3
		constexpr auto ServerLocalVelocity = 0x54; // Vector3
		constexpr auto ServerWorldVelocity = 0x60; // Vector3
		constexpr auto ServerWorldAngularVelocity = 0x6c; // Vector3
		constexpr auto ClientLocalVelocity = 0x78; // Vector3
		constexpr auto EngineIdle = 0x84; // BoatState.Audio
		constexpr auto EngineGas = 0x8c; // BoatState.Audio
		constexpr auto EngineFoley = 0x94; // BoatState.Audio
		constexpr auto EngineBubbles = 0x9c; // BoatState.Audio
		constexpr auto InputVertical = 0xa4; // float
		constexpr auto InputHorizontal = 0xa8; // float
		constexpr auto InputBreak = 0xac; // bool
	}

	namespace n_RigidBodyConstructionInfo { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _collisionShape = 0x18; // CollisionShape
		constexpr auto _motionState = 0x20; // MotionState
	}

	namespace n_TMP_GlyphPairAdjustmentRecord {
		constexpr auto m_FirstAdjustmentRecord = 0x10; // TMP_GlyphAdjustmentRecord
		constexpr auto m_SecondAdjustmentRecord = 0x24; // TMP_GlyphAdjustmentRecord
		constexpr auto m_FeatureLookupFlags = 0x38; // FontFeatureLookupFlags
	}

	namespace n_SupportsChildTracksAttribute { // : Attribute
		constexpr auto childType = 0x10; // Type
		constexpr auto levels = 0x18; // int
	}

	namespace n_DesignerCategoryAttribute { // : Attribute
		constexpr auto category = 0x10; // string
	}

	namespace n_Tetra { // : Feature
		constexpr auto _c0 = 0x20; // Vector3Array
		constexpr auto _leaf = 0x28; // DbvtNode
		constexpr auto _nodes = 0x30; // NodePtrArray
	}

	namespace n_BrushSettings {
		constexpr auto proceduralMask = 0x10; // ProceduralMask
		constexpr auto brushType = 0x18; // BrushType
		constexpr auto spacingMode = 0x1c; // SpacingMode
		constexpr auto brushSpacingEqualsType = 0x20; // SpacingEqualsType
		constexpr auto spacingRange = 0x24; // SpacingRange
		constexpr auto brushSpacing = 0x28; // float
		constexpr auto overrideSeason = 0x2c; // bool
		constexpr auto season = 0x30; // float
		constexpr auto m_brushRotation = 0x34; // float
		constexpr auto m_brushCosAngle = 0x38; // float
		constexpr auto m_brushSinAngle = 0x3c; // float
		constexpr auto m_brushRotationSizeMultiplier = 0x40; // float
		constexpr auto brushSize = 0x44; // float
		constexpr auto brushSizeJitter = 0x48; // float
		constexpr auto brushScatter = 0x4c; // float
		constexpr auto brushRotationJitter = 0x50; // float
		constexpr auto brushScatterJitter = 0x54; // float
		constexpr auto customBrushes = 0x58; // CustomBrushes
	}

	namespace n_TranslationalLimitMotor2 { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_SquadViewMember { // : MonoBehaviour
		constexpr auto RoleIcon = 0x18; // RawImage
		constexpr auto MuteIcon = 0x20; // RawImage
		constexpr auto Name = 0x28; // TextMeshProUGUI
		constexpr auto isDead = 0x30; // GameObject
		constexpr auto ButtonKick = 0x38; // GameObject
		constexpr auto ButtonPromote = 0x40; // GameObject
		constexpr auto ButtonMute = 0x48; // GameObject
		constexpr auto IsCaptain = 0x50; // GameObject
		constexpr auto NameLabelBackground = 0x58; // RectTransform
		constexpr auto RectTransform = 0x60; // RectTransform
		constexpr auto steamID = 0x68; // ulong
		constexpr auto _lastSetDeadFlag = 0x70; // bool
		constexpr auto _lastSetRole = 0x71; // Role
		constexpr auto _lastSetButtons = 0x74; // SquadViewMember.buttons_state
		constexpr auto _lastSetCaptain = 0x78; // bool
		constexpr auto _lastSetMuted = 0x79; // bool
	}

	namespace n_DebugUI.BitField { // : DebugUI.Field(Enum)
		constexpr auto (enumNames)k__BackingField = 0x50; // GUIContent[]
		constexpr auto (enumValues)k__BackingField = 0x58; // int[]
		constexpr auto m_EnumType = 0x60; // Type
	}

	namespace n_OverlayManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnToggle = 0x20; // OverlayManager.ToggleHandler
	}

	namespace n_GadgetManager { // : Tool
		constexpr auto (Item)k__BackingField = 0x90; // AGadget
		constexpr auto (FastListIndexA)k__BackingField = 0x98; // int
		constexpr auto (StartCount)k__BackingField = 0x9c; // int
		constexpr auto Count = 0xa0; // int
		constexpr auto SwitchTime = 0xa4; // float
		constexpr auto isRPCsRegistered = 0xa8; // bool
		constexpr auto (TickIndex5)k__BackingField = 0xac; // int
		constexpr auto _rpc_function_2_id = 0xb0; // Dictionary(Action, byte)
		constexpr auto _rpc_id_2_function = 0xb8; // Dictionary(byte, Action)
		constexpr auto _rpc_functionWPackage_2_id = 0xc0; // Dictionary(Action(NetSerializer), byte)
		constexpr auto _rpc_id_2_functionWPackage = 0xc8; // Dictionary(byte, Action(NetSerializer))
	}

	namespace n_BrickInstance { // : IFastListItemA
		constexpr auto BrickSize = 0x10; // Vector3
		constexpr auto (FastListIndexA)k__BackingField = 0x1c; // int
		constexpr auto (FastListIndexB)k__BackingField = 0x20; // int
		constexpr auto InPool = 0x24; // bool
		constexpr auto IsRegisteredToPhysicsScene = 0x25; // bool
		constexpr auto BulletRigidbody = 0x28; // RigidBody
		constexpr auto LastPhysicsWorldMatrix = 0x30; // BrickInstance.Matrix
		constexpr auto CurrentPhysicsWorldMatrix = 0x58; // BrickInstance.Matrix
		constexpr auto Velocity = 0x80; // Vector3
		constexpr auto LinearVelocity = 0x8c; // float
		constexpr auto MovementSqr = 0x90; // float
		constexpr auto ActiveRegionCell = 0x98; // DebrisRegion.DebrisBound
		constexpr auto RenderWorldMatrix = 0xa0; // BrickInstance.Matrix
		constexpr auto IsRegisteredToRenderThread = 0xc8; // bool
		constexpr auto ColorID = 0xcc; // int
		constexpr auto SpawnTime = 0xd0; // float
		constexpr auto DeadTime = 0xd4; // float
		constexpr auto DistanceToCamera = 0xd8; // float
		constexpr auto IsDead = 0xdc; // bool
		constexpr auto mRemoveLock = 0xe0; // object
		constexpr auto mLastVelocity = 0xe8; // float
		constexpr auto mLastPlayedSound = 0xec; // float
	}

	namespace n_DebugUI.ColorField { // : DebugUI.Field(Color)
		constexpr auto hdr = 0x50; // bool
		constexpr auto showAlpha = 0x51; // bool
		constexpr auto showPicker = 0x52; // bool
		constexpr auto incStep = 0x54; // float
		constexpr auto incStepMult = 0x58; // float
		constexpr auto decimals = 0x5c; // int
	}

	namespace n_OneTimeConnection {
		constexpr auto isConnected = 0x10; // bool
		constexpr auto Destination = 0x18; // EndPoint
		constexpr auto mSocket = 0x20; // Socket
		constexpr auto AnySentFlag = 0x28; // bool
		constexpr auto ReceivedFlag = 0x29; // bool
		constexpr auto PackageExecuted = 0x2a; // bool
		constexpr auto AllSent = 0x2b; // bool
		constexpr auto AliveUntil = 0x30; // long
		constexpr auto mReceivedPackages = 0x38; // Stream[]
		constexpr auto mSentPackages = 0x40; // Dictionary(int, Stream)
		constexpr auto mOutgoingVerifyList = 0x48; // HashSet(int)
		constexpr auto mKnownPackageCount = 0x50; // int
		constexpr auto mDuplicateCount = 0x54; // int
		constexpr auto mReceivedPackageCount = 0x58; // int
		constexpr auto mLastSentTime = 0x60; // long
	}

	namespace n_EventCallbackListPool {
		constexpr auto m_Stack = 0x10; // Stack(EventCallbackList)
	}

	namespace n_LoadoutAttachmentPoint { // : MonoBehaviour
		constexpr auto Index = 0x18; // int
		constexpr auto Line = 0x20; // LoadoutAttachmentLine
		constexpr auto LineChild = 0x28; // RectTransform
		constexpr auto Target = 0x30; // Transform
		constexpr auto Type = 0x38; // AttachmentType
		constexpr auto Label = 0x40; // TextMeshProUGUI
		constexpr auto NewAttachments = 0x48; // TextMeshProUGUI
		constexpr auto ReticleRect = 0x50; // RectTransform
		constexpr auto ColorRect = 0x58; // RectTransform
		constexpr auto ReticleImg = 0x60; // RawImage
		constexpr auto (isSelected)k__BackingField = 0x68; // bool
		constexpr auto (isHovering)k__BackingField = 0x69; // bool
		constexpr auto img = 0x70; // RawImage
		constexpr auto canvas = 0x78; // CanvasGroup
		constexpr auto rectTransform = 0x80; // RectTransform
		constexpr auto color = 0x88; // Color
		constexpr auto mCount = 0x98; // int
		constexpr auto imgAlpha = 0x9c; // float
		constexpr auto hasReticleColor = 0xa0; // bool
		constexpr auto lastHadReticleColor = 0xa4; // float
	}

	namespace n_WeaponMagazines.Mag {
		constexpr auto firedFlag = 0x10; // bool
		constexpr auto maxBulletCount = 0x14; // int
		constexpr auto MagazineIndex = 0x18; // int
		constexpr auto bulletCount = 0x1c; // int
	}

	namespace n_BoatBehaviour { // : VehicleInstance
		constexpr auto State = 0x1f0; // BoatState
		constexpr auto streamUpdater = 0x1f8; // BoatStreamUpdater
		constexpr auto m_lastFloatingPosition = 0x200; // Vector3
		constexpr auto m_lastFloatingFrame = 0x20c; // int
		constexpr auto m_lastVelocity = 0x210; // Vector3
		constexpr auto m_lastAngularVelocity = 0x21c; // Vector3
		constexpr auto m_swimingInputs = 0x228; // Vector4
		constexpr auto m_waterMovementSpeed = 0x238; // float
		constexpr auto mClientPosition = 0x23c; // Vector3
		constexpr auto mClientRotation = 0x248; // Quaternion
		constexpr auto mLastPackageReceiveTime = 0x258; // float
		constexpr auto mLastPackageReceiveDeltaTime = 0x25c; // float
		constexpr auto m_serverlastdriven = 0x260; // float
		constexpr auto m_engineBubbles = 0x268; // VehicleAudioSource
		constexpr auto m_engineIdle = 0x270; // VehicleAudioSource
		constexpr auto m_engineFoley = 0x278; // VehicleAudioSource
		constexpr auto m_engineGas = 0x280; // VehicleAudioSource
	}

	namespace n_RectOffset {
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_SourceStyle = 0x18; // object
	}

	namespace n_APC { // : Vehicle
		constexpr auto Break = 0x120; // float
		constexpr auto AntiRoll = 0x124; // float
		constexpr auto MinSteerAngle = 0x128; // float
		constexpr auto MaxSteerAngle = 0x12c; // float
		constexpr auto Gravity = 0x130; // float
		constexpr auto Gears = 0x138; // Gear[]
		constexpr auto EngineIdle = 0x140; // AudioClip
		constexpr auto Engine = 0x148; // AudioClip
		constexpr auto EngineGas = 0x150; // AudioClip
		constexpr auto WaterMovementOutside = 0x158; // AudioClip
		constexpr auto WaterMovementInside = 0x160; // AudioClip
	}

	namespace n_WeaponManager.Local {
		constexpr auto CurrentAction = 0x10; // WeaponAnimations
		constexpr auto magazines = 0x18; // WeaponMagazines
		constexpr auto defaultPosition = 0x20; // Vector3
		constexpr auto defaultEular = 0x2c; // Vector3
		constexpr auto defaultGunPosition = 0x38; // Vector3
		constexpr auto defaultGunEular = 0x44; // Vector3
		constexpr auto isFirstTime = 0x50; // bool
		constexpr auto drawOutLeft = 0x54; // float
		constexpr auto drawInLeft = 0x58; // float
		constexpr auto bolt_action_waiting = 0x5c; // bool
		constexpr auto burnDown = 0x60; // float
		constexpr auto positionStabilization = 0x64; // float
		constexpr auto rotationStabilization = 0x68; // float
		constexpr auto leftHandOffsetWeight = 0x6c; // float
		constexpr auto TimeSinceLastAnimation = 0x70; // float
		constexpr auto TimeLeftToFinishAnimation = 0x74; // float
		constexpr auto shotDelay = 0x78; // float
		constexpr auto lastShotTime = 0x7c; // float
		constexpr auto firstShotTime = 0x80; // float
		constexpr auto nextShotTimer = 0x84; // float
		constexpr auto remainingShots = 0x88; // int
		constexpr auto lastMultipleShot = 0x8c; // float
		constexpr auto remainingReload = 0x90; // float
		constexpr auto remainingMagCheck = 0x94; // float
		constexpr auto shellToSpawn = 0x98; // float
		constexpr auto timeToUpdateLocalBullets = 0x9c; // float
		constexpr auto boltActionRequired = 0xa0; // bool
		constexpr auto boltActionLeft = 0xa4; // float
		constexpr auto _isAiming = 0xa8; // bool
		constexpr auto hitTime = 0xac; // float
		constexpr auto waitingForSecondTab = 0xb0; // bool
		constexpr auto etaDropMag = 0xb4; // float
		constexpr auto DropMagAmmo = 0xb8; // int
		constexpr auto aimTime = 0xbc; // float
		constexpr auto Ranges = 0xc0; // float[]
		constexpr auto SelectedRange = 0xc8; // int
	}

	namespace n_DecoderReplacementFallback { // : DecoderFallback
		constexpr auto strDefault = 0x18; // string
	}

	namespace n_VehiclePeer {
		constexpr auto USA = 0x10; // Vehicle
		constexpr auto RUS = 0x18; // Vehicle
		constexpr auto TER = 0x20; // Vehicle
	}

	namespace n_UTF7Encoding { // : Encoding
		constexpr auto base64Bytes = 0x38; // byte[]
		constexpr auto base64Values = 0x40; // sbyte[]
		constexpr auto directEncode = 0x48; // bool[]
		constexpr auto m_allowOptionals = 0x50; // bool
	}

	namespace n_MessageBase {
		constexpr auto _type = 0x10; // int
		constexpr auto _flags = 0x14; // NtlmFlags
	}

	namespace n_VFXPropertyBinder { // : MonoBehaviour
		constexpr auto m_ExecuteInEditor = 0x18; // bool
		constexpr auto m_Bindings = 0x20; // List(VFXBinderBase)
		constexpr auto m_VisualEffect = 0x28; // VisualEffect
	}

	namespace n_ChannelData {
		constexpr auto Ref = 0x10; // string
		constexpr auto Type = 0x18; // string
		constexpr auto Id = 0x20; // string
		constexpr auto DelayLoadAsClientChannel = 0x28; // string
		constexpr auto _serverProviders = 0x30; // ArrayList
		constexpr auto _clientProviders = 0x38; // ArrayList
		constexpr auto _customProperties = 0x40; // Hashtable
	}

	namespace n_XPathArrayIterator { // : ResetableIterator
		constexpr auto list = 0x18; // IList
		constexpr auto index = 0x20; // int
	}

	namespace n_AlignedBroadphasePairArrayDebugView {
		constexpr auto _array = 0x10; // AlignedBroadphasePairArray
	}

	namespace n_EventTrigger { // : MonoBehaviour
		constexpr auto m_Delegates = 0x18; // List(EventTrigger.Entry)
	}

	namespace n_MonoMethodMessage { // : IMethodCallMessage
		constexpr auto method = 0x10; // MonoMethod
		constexpr auto args = 0x18; // object[]
		constexpr auto names = 0x20; // string[]
		constexpr auto arg_types = 0x28; // byte[]
		constexpr auto ctx = 0x30; // LogicalCallContext
		constexpr auto rval = 0x38; // object
		constexpr auto exc = 0x40; // Exception
		constexpr auto asyncResult = 0x48; // AsyncResult
		constexpr auto call_type = 0x50; // CallType
		constexpr auto uri = 0x58; // string
		constexpr auto properties = 0x60; // MCMDictionary
		constexpr auto methodSignature = 0x68; // Type[]
		constexpr auto identity = 0x70; // Identity
	}

	namespace n_MemberPrimitiveUnTyped {
		constexpr auto typeInformation = 0x10; // InternalPrimitiveTypeE
		constexpr auto value = 0x18; // object
	}

	namespace n_XPathParser {
		constexpr auto scanner = 0x10; // XPathScanner
		constexpr auto parseDepth = 0x18; // int
	}

	namespace n_DebugLine { // : MonoBehaviour
		constexpr auto (lifeTime)k__BackingField = 0x18; // float
		constexpr auto (inPool)k__BackingField = 0x1c; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x20; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x24; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x28; // bool
		constexpr auto thisLine = 0x30; // LineRenderer
	}

	namespace n_DebugManager {
		constexpr auto m_DebugActions = 0x10; // DebugActionDesc[]
		constexpr auto m_DebugActionStates = 0x18; // DebugActionState[]
		constexpr auto m_ReadOnlyPanels = 0x20; // ReadOnlyCollection(DebugUI.Panel)
		constexpr auto m_Panels = 0x28; // List(DebugUI.Panel)
		constexpr auto onDisplayRuntimeUIChanged = 0x30; // Action(bool)
		constexpr auto onSetDirty = 0x38; // Action
		constexpr auto resetData = 0x40; // Action
		constexpr auto refreshEditorRequested = 0x48; // bool
		constexpr auto m_Root = 0x50; // GameObject
		constexpr auto m_RootUICanvas = 0x58; // DebugUIHandlerCanvas
		constexpr auto m_PersistentRoot = 0x60; // GameObject
		constexpr auto m_RootUIPersistentCanvas = 0x68; // DebugUIHandlerPersistentCanvas
		constexpr auto m_EditorOpen = 0x70; // bool
	}

	namespace n_XmlSchemaParticle { // : XmlSchemaAnnotated
		constexpr auto minOccurs = 0x10; // Decimal
		constexpr auto maxOccurs = 0x20; // Decimal
		constexpr auto flags = 0x30; // XmlSchemaParticle.Occurs
	}

	namespace n_PainterVariables {
		constexpr auto (terrainUnderCursor)k__BackingField = 0x10; // Terrain
		constexpr auto (Mask)k__BackingField = 0x18; // Texture2D
		constexpr auto overrideSeason = 0x20; // bool
		constexpr auto season = 0x24; // float
		constexpr auto raycastInfo = 0x28; // RaycastInfo
		constexpr auto size = 0x30; // float
		constexpr auto rotation = 0x34; // float
		constexpr auto brushCosAngle = 0x38; // float
		constexpr auto brushSinAngle = 0x3c; // float
		constexpr auto brushRotationSizeMultiplier = 0x40; // float
		constexpr auto bounds = 0x44; // Bounds
	}

	namespace n_NativeTypeAttribute { // : Attribute
		constexpr auto (Header)k__BackingField = 0x10; // string
		constexpr auto (IntermediateScriptingStructName)k__BackingField = 0x18; // string
		constexpr auto (CodegenOptions)k__BackingField = 0x20; // CodegenOptions
	}

	namespace n_MotionBlur { // : VolumeComponent
		constexpr auto mode = 0x38; // MotionBlurModeParameter
		constexpr auto quality = 0x40; // MotionBlurQualityParameter
		constexpr auto intensity = 0x48; // ClampedFloatParameter
		constexpr auto clamp = 0x50; // ClampedFloatParameter
	}

	namespace n_InternalThread { // : CriticalFinalizerObject
		constexpr auto lock_thread_id = 0x10; // int
		constexpr auto handle = 0x18; // IntPtr
		constexpr auto native_handle = 0x20; // IntPtr
		constexpr auto unused3 = 0x28; // IntPtr
		constexpr auto name = 0x30; // IntPtr
		constexpr auto name_len = 0x38; // int
		constexpr auto state = 0x3c; // ThreadState
		constexpr auto abort_exc = 0x40; // object
		constexpr auto abort_state_handle = 0x48; // int
		constexpr auto thread_id = 0x50; // long
		constexpr auto debugger_thread = 0x58; // IntPtr
		constexpr auto static_data = 0x60; // UIntPtr
		constexpr auto runtime_thread_info = 0x68; // IntPtr
		constexpr auto current_appcontext = 0x70; // object
		constexpr auto root_domain_thread = 0x78; // object
		constexpr auto _serialized_principal = 0x80; // byte[]
		constexpr auto _serialized_principal_version = 0x88; // int
		constexpr auto appdomain_refs = 0x90; // IntPtr
		constexpr auto interruption_requested = 0x98; // int
		constexpr auto synch_cs = 0xa0; // IntPtr
		constexpr auto threadpool_thread = 0xa8; // bool
		constexpr auto thread_interrupt_requested = 0xa9; // bool
		constexpr auto stack_size = 0xac; // int
		constexpr auto apartment_state = 0xb0; // byte
		constexpr auto critical_region_level = 0xb4; // int
		constexpr auto managed_id = 0xb8; // int
		constexpr auto small_id = 0xbc; // int
		constexpr auto manage_callback = 0xc0; // IntPtr
		constexpr auto unused4 = 0xc8; // IntPtr
		constexpr auto flags = 0xd0; // IntPtr
		constexpr auto thread_pinning_ref = 0xd8; // IntPtr
		constexpr auto abort_protected_block_count = 0xe0; // IntPtr
		constexpr auto priority = 0xe8; // int
		constexpr auto owned_mutex = 0xf0; // IntPtr
		constexpr auto suspended_event = 0xf8; // IntPtr
		constexpr auto self_suspended = 0x100; // int
		constexpr auto unused1 = 0x108; // IntPtr
		constexpr auto unused2 = 0x110; // IntPtr
		constexpr auto last = 0x118; // IntPtr
	}

	namespace n_LoadoutShootingManager { // : MonoBehaviour
		constexpr auto MainC = 0x18; // CanvasGroup
		constexpr auto ShootC = 0x20; // CanvasGroup
		constexpr auto BoltC = 0x28; // CanvasGroup
		constexpr auto ReloadC = 0x30; // CanvasGroup
		constexpr auto AmmoCountC = 0x38; // CanvasGroup
		constexpr auto MagazineCheckC = 0x40; // CanvasGroup
		constexpr auto RotateC = 0x48; // CanvasGroup
		constexpr auto AmmoCount = 0x50; // TextMeshProUGUI
	}

	namespace n_PrototypeVegetationItem { // : Prototype
		constexpr auto terrainTreeName = 0x20; // string
		constexpr auto extents = 0x28; // Vector3
		constexpr auto terrainProtoId = 0x34; // int
		constexpr auto bendFactor = 0x38; // float
		constexpr auto additionalSpawnSettings = 0x40; // AdditionalSpawnSettings
		constexpr auto failureSettings = 0x48; // FailureSettings
		constexpr auto intersectSettings = 0x50; // IntersectSettings
		constexpr auto terrainTransformSettings = 0x58; // TerrainTransformSettings
		constexpr auto vegetationItemID = 0x60; // string
	}

	namespace n_SquadAbilityRallyPointBehaviour { // : SquadAbilityBehaviour
		constexpr auto TeamGUI = 0x78; // TeamGUI
		constexpr auto (BuildableRallyPoint)k__BackingField = 0x80; // BuildableRallyPoint
		constexpr auto mMap = 0x88; // MapRallyPointWorldObject
	}

	namespace n_RuntimeWrappedException { // : Exception
		constexpr auto m_wrappedException = 0x88; // object
	}

	namespace n_SynchronizationContextAwaitTaskContinuation { // : AwaitTaskContinuation
		constexpr auto m_syncContext = 0x20; // SynchronizationContext
	}

	namespace n_LocalVariableInfo {
		constexpr auto type = 0x10; // Type
		constexpr auto is_pinned = 0x18; // bool
		constexpr auto position = 0x1a; // ushort
	}

	namespace n_Conquest { // : GameplayMode
		constexpr auto (TicketBleedPerFlag)k__BackingField = 0x48; // int
		constexpr auto (NonBaseFlagCount)k__BackingField = 0x4c; // int
		constexpr auto (Flags)k__BackingField = 0x50; // Flag[]
		constexpr auto RoundTime = 0x58; // RoundTimer
		constexpr auto mLast50TicketsLeftFlag = 0x60; // bool
		constexpr auto mLast10TicketsLeftFlag = 0x61; // bool
		constexpr auto mLastTicketBleed = 0x64; // float
		constexpr auto mQuadUpdateCounter = 0x68; // int
	}

	namespace n_AutoModeProtoResource {
		constexpr auto selected = 0x10; // bool
		constexpr auto protoResource = 0x14; // ProtoResource
	}

	namespace n_DefaultDllImportSearchPathsAttribute { // : Attribute
		constexpr auto _paths = 0x10; // DllImportSearchPath
	}

	namespace n_AudioClip { // : Object
		constexpr auto m_PCMReaderCallback = 0x18; // AudioClip.PCMReaderCallback
		constexpr auto m_PCMSetPositionCallback = 0x20; // AudioClip.PCMSetPositionCallback
	}

	namespace n_TypeInfo { // : MonoBehaviour
		constexpr auto serverType = 0x10; // string
		constexpr auto type = 0x18; // TypeOfBiome
		constexpr auto serverHierarchy = 0x18; // string[]
		constexpr auto interfacesImplemented = 0x20; // string[]
		constexpr auto protoInfoList = 0x20; // List(PrototypeInfo)
	}

	namespace n_Function { // : AstNode
		constexpr auto functionType = 0x10; // Function.FunctionType
		constexpr auto argumentList = 0x18; // ArrayList
		constexpr auto name = 0x20; // string
		constexpr auto prefix = 0x28; // string
	}

	namespace n_TankTurret { // : ToolItem
		constexpr auto ShotSounds = 0x60; // ExplosionProfile
		constexpr auto AudioReloadEject = 0x68; // AudioClip
		constexpr auto AudioReloadInject = 0x70; // AudioClip
		constexpr auto AudioTurretMovement = 0x78; // AudioClip
		constexpr auto AudioShootingInside = 0x80; // AudioClip[]
		constexpr auto AudioMachineGunSounds = 0x88; // AudioClip[]
		constexpr auto MaximumHorizontalTurnPerSecond = 0x90; // float
		constexpr auto MaximumVerticalTurnPerSecond = 0x94; // float
		constexpr auto VerticalRange = 0x98; // Vector2
		constexpr auto SmokePrefab = 0xa0; // GameObject
		constexpr auto AP = 0xa8; // Shell
		constexpr auto HE = 0xb0; // Shell
		constexpr auto MachineGun = 0xb8; // MachineGunBullet
		constexpr auto InitialAP = 0xc0; // int
		constexpr auto InitialHE = 0xc4; // int
		constexpr auto InitialSmoke = 0xc8; // int
		constexpr auto InitialMachineGunAmmo = 0xcc; // int
		constexpr auto InitialMachineGunFirerate = 0xd0; // float
		constexpr auto InitialMachineGunAmmoLoadSize = 0xd4; // int
		constexpr auto InitialMachineGunReloadTime = 0xd8; // float
		constexpr auto BarrelAnimation = 0xe0; // AnimationCurve
		constexpr auto CameraShake = 0xe8; // AnimationCurve
		constexpr auto ZoomLevels = 0xf0; // TankTurret.ZoomLevel[]
	}

	namespace n_ReadObjectInfo {
		constexpr auto objectInfoId = 0x10; // int
		constexpr auto objectType = 0x18; // Type
		constexpr auto objectManager = 0x20; // ObjectManager
		constexpr auto count = 0x28; // int
		constexpr auto isSi = 0x2c; // bool
		constexpr auto isNamed = 0x2d; // bool
		constexpr auto isTyped = 0x2e; // bool
		constexpr auto bSimpleAssembly = 0x2f; // bool
		constexpr auto cache = 0x30; // SerObjectInfoCache
		constexpr auto wireMemberNames = 0x38; // string[]
		constexpr auto wireMemberTypes = 0x40; // Type[]
		constexpr auto lastPosition = 0x48; // int
		constexpr auto serializationSurrogate = 0x50; // ISerializationSurrogate
		constexpr auto context = 0x58; // StreamingContext
		constexpr auto memberTypesList = 0x68; // List(Type)
		constexpr auto serObjectInfoInit = 0x70; // SerObjectInfoInit
		constexpr auto formatterConverter = 0x78; // IFormatterConverter
	}

	namespace n_Impulse { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_MonoTlsSettings {
		constexpr auto (RemoteCertificateValidationCallback)k__BackingField = 0x10; // MonoRemoteCertificateValidationCallback
		constexpr auto (ClientCertificateSelectionCallback)k__BackingField = 0x18; // MonoLocalCertificateSelectionCallback
		constexpr auto (CertificateValidationTime)k__BackingField = 0x20; // Nullable(DateTime)
		constexpr auto (TrustAnchors)k__BackingField = 0x30; // X509CertificateCollection
		constexpr auto (UserSettings)k__BackingField = 0x38; // object
		constexpr auto (CertificateSearchPaths)k__BackingField = 0x40; // string[]
		constexpr auto (SendCloseNotify)k__BackingField = 0x48; // bool
		constexpr auto (EnabledProtocols)k__BackingField = 0x4c; // Nullable(TlsProtocols)
		constexpr auto (EnabledCiphers)k__BackingField = 0x58; // CipherSuiteCode[]
		constexpr auto cloned = 0x60; // bool
		constexpr auto checkCertName = 0x61; // bool
		constexpr auto checkCertRevocationStatus = 0x62; // bool
		constexpr auto useServicePointManagerCallback = 0x63; // Nullable(bool)
		constexpr auto skipSystemValidators = 0x65; // bool
		constexpr auto callbackNeedsChain = 0x66; // bool
		constexpr auto certificateValidator = 0x68; // ICertificateValidator
	}

	namespace n_ObjectGUIState { // : IDisposable
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_GImpactBvh { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _primitiveManager = 0x18; // PrimitiveManagerBase
	}

	namespace n_MenuVideo { // : IEnumerable(IOptionsElement)
		constexpr auto Resolution = 0x10; // ScreenResolutionBehaviour
		constexpr auto ScreenMode = 0x18; // EnumBehaviour
		constexpr auto ScreenScale = 0x20; // SliderBehaviour
		constexpr auto VerticalSync = 0x28; // ToggleBehaviour
		constexpr auto MaxFPS = 0x30; // SliderBehaviour
		constexpr auto GpuSkinning = 0x38; // ToggleBehaviour
		constexpr auto Brightness = 0x40; // SliderBehaviour
		constexpr auto FieldOfView = 0x48; // SliderBehaviour
		constexpr auto VehicleFieldOfView = 0x50; // SliderBehaviour
		constexpr auto UIMultithreading = 0x58; // ToggleBehaviour
		constexpr auto Shadows = 0x60; // ToggleBehaviour
		constexpr auto ShadowResolution = 0x68; // EnumBehaviour
		constexpr auto ShadowDistance = 0x70; // EnumBehaviour
		constexpr auto AntiAliasign = 0x78; // EnumBehaviour
		constexpr auto DestructionQuality = 0x80; // EnumBehaviour
		constexpr auto NumberOfLights = 0x88; // SliderBehaviour
		constexpr auto ObjectsQuality = 0x90; // SliderBehaviour
		constexpr auto LazyLods = 0x98; // ToggleBehaviour
		constexpr auto RainQuality = 0xa0; // EnumBehaviour
		constexpr auto RenderDistance = 0xa8; // SliderBehaviour
		constexpr auto ShaderQuality = 0xb0; // EnumBehaviour
		constexpr auto BrightnessColoring = 0xb8; // ToggleBehaviour
		constexpr auto Bloom = 0xc0; // ToggleBehaviour
		constexpr auto SSAO = 0xc8; // ToggleBehaviour
		constexpr auto MotionBlur = 0xd0; // ToggleBehaviour
		constexpr auto Vignette = 0xd8; // ToggleBehaviour
		constexpr auto ADSEffect = 0xe0; // ToggleBehaviour
	}

	namespace n_C4Standing { // : ReplicaGadget
		constexpr auto Explosion = 0x48; // GameObject
		constexpr auto C4 = 0x50; // AGadget
		constexpr auto GUI = 0x58; // TeamGUI
		constexpr auto mRigidbody = 0x60; // Rigidbody
		constexpr auto mRigidbodyInterpolation = 0x68; // RigidbodyInterpolationBehaviour
		constexpr auto mCollider = 0x70; // Collider
		constexpr auto mIsSticked = 0x78; // bool
		constexpr auto mIsRegisteredAsLocal = 0x79; // bool
		constexpr auto mSurface = 0x80; // ExistanceProvider
		constexpr auto mLastValidPoint = 0x88; // Vector3
		constexpr auto mLastValidNormal = 0x94; // Vector3
		constexpr auto mUploadFlag = 0xa0; // bool
		constexpr auto mClientVelocity = 0xa4; // Vector3
		constexpr auto mClientPosition = 0xb0; // Vector3
		constexpr auto mServerPosition = 0xbc; // Vector3
		constexpr auto mClientRotation = 0xc8; // Quaternion
		constexpr auto mServerRotation = 0xd8; // Quaternion
		constexpr auto mClient2serverMovement = 0xe8; // Vector3
		constexpr auto timeServerTookOwner = 0xf4; // float
		constexpr auto timeSticked = 0xf8; // float
		constexpr auto (isTriggered)k__BackingField = 0xfc; // bool
		constexpr auto wasTriggered = 0xfd; // bool
		constexpr auto invokehandle = 0x100; // InvokeHandle
	}

	namespace n_PositionAndRotation {
		constexpr auto Position = 0x10; // Vector3
		constexpr auto Eular = 0x1c; // Vector3
	}

	namespace n_Comparer { // : IComparer
		constexpr auto m_compareInfo = 0x10; // CompareInfo
	}

	namespace n_MainMenu_InClan_List_Members { // : MainMenu_InClan_List
		constexpr auto Prefab = 0x30; // GameObject
		constexpr auto Parent = 0x38; // Transform
		constexpr auto LoadingIcon = 0x40; // GameObject
		constexpr auto SearchBar = 0x48; // TMP_InputField
		constexpr auto PageBar = 0x50; // TMP_InputField
		constexpr auto Pool = 0x58; // UIPool(MainMenu_InClan_List_Member)
		constexpr auto mActives = 0x60; // List(MainMenu_InClan_List_Member)
		constexpr auto mMembers = 0x68; // List(ClanMember)
		constexpr auto MemberCount = 0x70; // int
		constexpr auto PageIndex = 0x74; // int
		constexpr auto wantToRefresh = 0x78; // bool
		constexpr auto SearchKey = 0x80; // string
	}

	namespace n_TaiwanCalendar { // : Calendar
		constexpr auto helper = 0x20; // GregorianCalendarHelper
	}

	namespace n_VFXEnabledBinder { // : VFXBinderBase
		constexpr auto check = 0x20; // VFXEnabledBinder.Check
		constexpr auto m_Property = 0x28; // ExposedProperty
		constexpr auto Target = 0x30; // GameObject
	}

	namespace n_LoadoutWeaponStatsSlider { // : MonoBehaviour
		constexpr auto LangID = 0x18; // int
		constexpr auto MaxValue = 0x1c; // float
		constexpr auto reversePositives = 0x20; // bool
		constexpr auto toString = 0x28; // string
		constexpr auto (TargetFirstValue)k__BackingField = 0x30; // float
		constexpr auto (TargetSecondValue)k__BackingField = 0x34; // float
		constexpr auto (FirstValue)k__BackingField = 0x38; // float
		constexpr auto (SecondValue)k__BackingField = 0x3c; // float
		constexpr auto ValueRect = 0x40; // RectTransform
		constexpr auto OffsetRect = 0x48; // RectTransform
		constexpr auto Label = 0x50; // TextMeshProUGUI
		constexpr auto ValueText = 0x58; // TextMeshProUGUI
	}

	namespace n_DigestSession {
		constexpr auto lastUse = 0x10; // DateTime
		constexpr auto _nc = 0x18; // int
		constexpr auto hash = 0x20; // HashAlgorithm
		constexpr auto parser = 0x28; // DigestHeaderParser
		constexpr auto _cnonce = 0x30; // string
	}

	namespace n_HMAC { // : KeyedHashAlgorithm
		constexpr auto blockSizeValue = 0x30; // int
		constexpr auto m_hashName = 0x38; // string
		constexpr auto m_hash1 = 0x40; // HashAlgorithm
		constexpr auto m_hash2 = 0x48; // HashAlgorithm
		constexpr auto m_inner = 0x50; // byte[]
		constexpr auto m_outer = 0x58; // byte[]
		constexpr auto m_hashing = 0x60; // bool
	}

	namespace n_MainMenu_PlayingFriend_Server { // : MonoBehaviour
		constexpr auto MainMenuPart = 0x18; // GameObject
		constexpr auto ServerPart = 0x20; // GameObject
		constexpr auto Self = 0x28; // RawImage
		constexpr auto ServerName = 0x30; // TextMeshProUGUI
		constexpr auto MapName = 0x38; // TextMeshProUGUI
		constexpr auto Gamemode = 0x40; // TextMeshProUGUI
		constexpr auto Players = 0x48; // TextMeshProUGUI
		constexpr auto TeamAFlag = 0x50; // RawImage
		constexpr auto TeamBFlag = 0x58; // RawImage
		constexpr auto TeamAScore = 0x60; // TextMeshProUGUI
		constexpr auto TeamBScore = 0x68; // TextMeshProUGUI
		constexpr auto Timer = 0x70; // TextMeshProUGUI
		constexpr auto ServerIcon = 0x78; // RawImage
		constexpr auto Prefab = 0x80; // GameObject
		constexpr auto Parent = 0x88; // Transform
		constexpr auto FriendPool = 0x90; // UIPool(RawImage)
		constexpr auto ActiveFriend = 0x98; // List(RawImage)
		constexpr auto server = 0xa0; // MainMenu_PlayingFriend.Server
	}

	namespace n_UniversalAdditionalCameraData { // : MonoBehaviour
		constexpr auto m_RenderShadows = 0x18; // bool
		constexpr auto m_RequiresDepthTextureOption = 0x1c; // CameraOverrideOption
		constexpr auto m_RequiresOpaqueTextureOption = 0x20; // CameraOverrideOption
		constexpr auto m_CameraType = 0x24; // CameraRenderType
		constexpr auto m_Cameras = 0x28; // List(Camera)
		constexpr auto m_RendererIndex = 0x30; // int
		constexpr auto m_VolumeLayerMask = 0x34; // LayerMask
		constexpr auto m_VolumeTrigger = 0x38; // Transform
		constexpr auto m_RenderPostProcessing = 0x40; // bool
		constexpr auto m_Antialiasing = 0x44; // AntialiasingMode
		constexpr auto m_AntialiasingQuality = 0x48; // AntialiasingQuality
		constexpr auto m_StopNaN = 0x4c; // bool
		constexpr auto m_Dithering = 0x4d; // bool
		constexpr auto m_ClearDepth = 0x4e; // bool
		constexpr auto m_RequiresDepthTexture = 0x4f; // bool
		constexpr auto m_RequiresColorTexture = 0x50; // bool
		constexpr auto m_Version = 0x54; // float
	}

	namespace n_MainLoop.mLoopLateUpdateStart {
		constexpr auto Array = 0x10; // ILateUpdateStartReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_GhostObject { // : CollisionObject
		constexpr auto _overlappingPairs = 0x40; // AlignedCollisionObjectArray
	}

	namespace n_PersistentCallGroup {
		constexpr auto m_Calls = 0x10; // List(PersistentCall)
	}

	namespace n_SeatBehaviour { // : MonoBehaviour
		constexpr auto (Parent)k__BackingField = 0x18; // Seat
		constexpr auto isBeingUsed = 0x20; // bool
		constexpr auto isControlling = 0x21; // bool
		constexpr auto (BehaviourIndex)k__BackingField = 0x24; // int
		constexpr auto lastNonlocalCall = 0x28; // float
		constexpr auto nonLocalFrameCounter = 0x2c; // int
		constexpr auto uploadCounter = 0x30; // int
		constexpr auto stream = 0x38; // NetSerializer
		constexpr auto (hasNonlocalUpdate)k__BackingField = 0x40; // bool
		constexpr auto (nonLocalUpdatePerFrame)k__BackingField = 0x44; // int
	}

	namespace n_Tool { // : MonoBehaviour
		constexpr auto (Player)k__BackingField = 0x18; // PlayerNetwork
		constexpr auto (isLocal)k__BackingField = 0x20; // bool
		constexpr auto (Index)k__BackingField = 0x21; // LoadoutIndex
		constexpr auto (ToolItem)k__BackingField = 0x28; // ToolItem
		constexpr auto (thisAnimation)k__BackingField = 0x30; // Animation
		constexpr auto (thisAudioSource)k__BackingField = 0x38; // AudioSource
		constexpr auto (thisLOD)k__BackingField = 0x40; // THPLod
		constexpr auto (thisPoolableTool)k__BackingField = 0x48; // PoolableTool
		constexpr auto GunTransform = 0x50; // Transform
		constexpr auto ToolCamera = 0x58; // Transform
		constexpr auto LeftHand = 0x60; // Transform
		constexpr auto RightHand = 0x68; // Transform
		constexpr auto gun_default_local_position = 0x70; // Vector3
		constexpr auto gun_default_local_rotation = 0x7c; // Quaternion
		constexpr auto (isUsing)k__BackingField = 0x8c; // bool
	}

	namespace n_SortedList.SyncSortedList { // : SortedList
		constexpr auto _list = 0x48; // SortedList
		constexpr auto _root = 0x50; // object
	}

	namespace n_DebugUIHandlerVBox { // : DebugUIHandlerWidget
		constexpr auto m_Container = 0x58; // DebugUIHandlerContainer
	}

	namespace n_GraphicRevertedButtonHover { // : MonoBehaviour
		constexpr auto Hover = 0x18; // CanvasGroup
		constexpr auto FadeSpeed = 0x20; // float
		constexpr auto mButton = 0x28; // GraphicRevertedButton
		constexpr auto mAlpha = 0x30; // float
		constexpr auto mRegistered = 0x34; // bool
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
	}

	namespace n_CustomAttributeData.LazyCAttrData {
		constexpr auto assembly = 0x10; // Assembly
		constexpr auto data = 0x18; // IntPtr
		constexpr auto data_length = 0x20; // uint
	}

	namespace n_GameScreen_Loadout { // : MonoBehaviour
		constexpr auto Items = 0x18; // GameScreen_Loadout_Item[]
		constexpr auto Canvas = 0x20; // CanvasGroup
		constexpr auto mIndex = 0x28; // float
		constexpr auto mTargetIndex = 0x2c; // float
		constexpr auto mSwitchTime = 0x30; // float
		constexpr auto mLastAlpha = 0x34; // float
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
	}

	namespace n_DebugUI.EnumField { // : DebugUI.Field(int)
		constexpr auto enumNames = 0x50; // GUIContent[]
		constexpr auto enumValues = 0x58; // int[]
		constexpr auto quickSeparators = 0x60; // int[]
		constexpr auto indexes = 0x68; // int[]
		constexpr auto (getIndex)k__BackingField = 0x70; // Func(int)
		constexpr auto (setIndex)k__BackingField = 0x78; // Action(int)
	}

	namespace n_PrecisionObject {
		constexpr auto objectInfo = 0x10; // ObjectInfo
		constexpr auto raycastInfo = 0x18; // RaycastInfo
	}

	namespace n_RegexFCD {
		constexpr auto _intStack = 0x10; // int[]
		constexpr auto _intDepth = 0x18; // int
		constexpr auto _fcStack = 0x20; // RegexFC[]
		constexpr auto _fcDepth = 0x28; // int
		constexpr auto _skipAllChildren = 0x2c; // bool
		constexpr auto _skipchild = 0x2d; // bool
		constexpr auto _failed = 0x2e; // bool
	}

	namespace n_ThreadHelper {
		constexpr auto _start = 0x10; // Delegate
		constexpr auto _startArg = 0x18; // object
		constexpr auto _executionContext = 0x20; // ExecutionContext
	}

	namespace n_ListDictionary.DictionaryNode {
		constexpr auto key = 0x10; // object
		constexpr auto value = 0x18; // object
		constexpr auto next = 0x20; // ListDictionary.DictionaryNode
	}

	namespace n_DownloadDataCompletedEventArgs { // : AsyncCompletedEventArgs
		constexpr auto m_Result = 0x28; // byte[]
	}

	namespace n_OpusEncoder { // : IDisposable
		constexpr auto _handle = 0x10; // IntPtr
		constexpr auto _frameSizePerChannel = 0x18; // int
		constexpr auto _inputSamplingRate = 0x1c; // SamplingRate
		constexpr auto _inputChannels = 0x20; // Channels
		constexpr auto writePacket = 0x28; // byte[]
		constexpr auto _encoderDelay = 0x30; // Delay
	}

	namespace n_StringResultHandler { // : SearchResultHandler(string)
		constexpr auto _includeFiles = 0x10; // bool
		constexpr auto _includeDirs = 0x11; // bool
	}

	namespace n_DocumentXPathNodeIterator_ElemChildren { // : DocumentXPathNodeIterator_ElemDescendants
		constexpr auto localNameAtom = 0x28; // string
		constexpr auto nsAtom = 0x30; // string
	}

	namespace n_TeamDeathMatch { // : GameplayMode
		constexpr auto RoundTime = 0x48; // RoundTimer
		constexpr auto mLast50TicketsLeftFlag = 0x50; // bool
		constexpr auto mLast10TicketsLeftFlag = 0x51; // bool
		constexpr auto SpawnPointsTeamA = 0x58; // Transform[]
		constexpr auto SpawnPointsTeamB = 0x60; // Transform[]
		constexpr auto SpawnPoints = 0x68; // Transform[]
	}

	namespace n_DeployScreenBehaviour { // : MonoBehaviour
		constexpr auto SquadUserInterface = 0x18; // DeployScreenBehaviour.SquadUI
		constexpr auto lock_inSquad = 0x20; // bool
		constexpr auto locked_squadMemberCount = 0x24; // int
		constexpr auto locked_squadTeam = 0x28; // Team
		constexpr auto lastLockedState = 0x2c; // Squad.SquadLockState
		constexpr auto lastChangeRequestSent = 0x30; // float
		constexpr auto mLastSquad = 0x38; // Squad
		constexpr auto Menu = 0x40; // GameObject
		constexpr auto Loadout = 0x48; // GameObject
		constexpr auto LoadoutNew = 0x50; // GameObject
		constexpr auto Customize = 0x58; // GameObject
		constexpr auto Servername = 0x60; // TextMeshProUGUI
		constexpr auto CenterBottomLeft = 0x68; // RectTransform
		constexpr auto Camera = 0x70; // GameObject
		constexpr auto Background = 0x78; // GameObject
		constexpr auto Self = 0x80; // GameObject
		constexpr auto (TickIndex8)k__BackingField = 0x88; // int
		constexpr auto mLastFrame = 0x8c; // int
	}

	namespace n_ChunkInd {
		constexpr auto Code = 0x10; // DnaID
		constexpr auto Length = 0x14; // int
		constexpr auto OldPtr = 0x18; // long
		constexpr auto DnaNR = 0x20; // int
		constexpr auto NR = 0x24; // int
	}

	namespace n_PointerInputModule.MouseState {
		constexpr auto m_TrackedButtons = 0x10; // List(PointerInputModule.ButtonState)
	}

	namespace n_DebugUIHandlerIntField { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueLabel = 0x60; // Text
		constexpr auto m_Field = 0x68; // DebugUI.IntField
	}

	namespace n_ContextMenu { // : Attribute
		constexpr auto menuItem = 0x10; // string
		constexpr auto validate = 0x18; // bool
		constexpr auto priority = 0x1c; // int
	}

	namespace n_CallbackEventHandler { // : IEventHandler
		constexpr auto m_CallbackRegistry = 0x10; // EventCallbackRegistry
	}

	namespace n_TerrainTreeSpawnInfo { // : MonoBehaviour
		constexpr auto treeList = 0x18; // List(TreeInstance)
	}

	namespace n_DecoderFallback {
		constexpr auto bIsMicrosoftBestFitFallback = 0x10; // bool
	}

	namespace n_SerObjectInfoCache {
		constexpr auto fullTypeName = 0x10; // string
		constexpr auto assemblyString = 0x18; // string
		constexpr auto hasTypeForwardedFrom = 0x20; // bool
		constexpr auto memberInfos = 0x28; // MemberInfo[]
		constexpr auto memberNames = 0x30; // string[]
		constexpr auto memberTypes = 0x38; // Type[]
	}

	namespace n_WallDestrucationResources {
		constexpr auto id = 0x10; // ulong
		constexpr auto bricksRemoved = 0x18; // Queue(Vector2Int)
		constexpr auto WorldPositionMatrix = 0x20; // Vector3[,]
		constexpr auto LocalPositionMatrix = 0x28; // Vector3[,]
		constexpr auto target_matrix_buffer = 0x30; // float[,]
		constexpr auto vertical_setBuffer = 0x38; // bool[]
	}

	namespace n_TMP_FontAsset { // : TMP_Asset
		constexpr auto m_Version = 0x30; // string
		constexpr auto m_SourceFontFileGUID = 0x38; // string
		constexpr auto m_SourceFontFile = 0x40; // Font
		constexpr auto m_AtlasPopulationMode = 0x48; // AtlasPopulationMode
		constexpr auto m_FaceInfo = 0x50; // FaceInfo
		constexpr auto m_GlyphTable = 0xb0; // List(Glyph)
		constexpr auto m_GlyphLookupDictionary = 0xb8; // Dictionary(uint, Glyph)
		constexpr auto m_CharacterTable = 0xc0; // List(TMP_Character)
		constexpr auto m_CharacterLookupDictionary = 0xc8; // Dictionary(uint, TMP_Character)
		constexpr auto m_AtlasTexture = 0xd0; // Texture2D
		constexpr auto m_AtlasTextures = 0xd8; // Texture2D[]
		constexpr auto m_AtlasTextureIndex = 0xe0; // int
		constexpr auto m_IsMultiAtlasTexturesEnabled = 0xe4; // bool
		constexpr auto m_ClearDynamicDataOnBuild = 0xe5; // bool
		constexpr auto m_UsedGlyphRects = 0xe8; // List(GlyphRect)
		constexpr auto m_FreeGlyphRects = 0xf0; // List(GlyphRect)
		constexpr auto m_fontInfo = 0xf8; // FaceInfo_Legacy
		constexpr auto atlas = 0x100; // Texture2D
		constexpr auto m_AtlasWidth = 0x108; // int
		constexpr auto m_AtlasHeight = 0x10c; // int
		constexpr auto m_AtlasPadding = 0x110; // int
		constexpr auto m_AtlasRenderMode = 0x114; // GlyphRenderMode
		constexpr auto m_glyphInfoList = 0x118; // List(TMP_Glyph)
		constexpr auto m_KerningTable = 0x120; // KerningTable
		constexpr auto m_FontFeatureTable = 0x128; // TMP_FontFeatureTable
		constexpr auto fallbackFontAssets = 0x130; // List(TMP_FontAsset)
		constexpr auto m_FallbackFontAssetTable = 0x138; // List(TMP_FontAsset)
		constexpr auto m_CreationSettings = 0x140; // FontAssetCreationSettings
		constexpr auto m_FontWeightTable = 0x198; // TMP_FontWeightPair[]
		constexpr auto fontWeights = 0x1a0; // TMP_FontWeightPair[]
		constexpr auto normalStyle = 0x1a8; // float
		constexpr auto normalSpacingOffset = 0x1ac; // float
		constexpr auto boldStyle = 0x1b0; // float
		constexpr auto boldSpacing = 0x1b4; // float
		constexpr auto italicStyle = 0x1b8; // byte
		constexpr auto tabSize = 0x1b9; // byte
		constexpr auto IsFontAssetLookupTablesDirty = 0x1ba; // bool
		constexpr auto FallbackSearchQueryLookup = 0x1c0; // HashSet(int)
		constexpr auto m_GlyphsToRender = 0x1c8; // List(Glyph)
		constexpr auto m_GlyphsRendered = 0x1d0; // List(Glyph)
		constexpr auto m_GlyphIndexList = 0x1d8; // List(uint)
		constexpr auto m_GlyphIndexListNewlyAdded = 0x1e0; // List(uint)
		constexpr auto m_GlyphsToAdd = 0x1e8; // List(uint)
		constexpr auto m_GlyphsToAddLookup = 0x1f0; // HashSet(uint)
		constexpr auto m_CharactersToAdd = 0x1f8; // List(TMP_Character)
		constexpr auto m_CharactersToAddLookup = 0x200; // HashSet(uint)
		constexpr auto s_MissingCharacterList = 0x208; // List(uint)
		constexpr auto m_MissingUnicodesFromFontFile = 0x210; // HashSet(uint)
	}

	namespace n_ValidationEventArgs { // : EventArgs
		constexpr auto ex = 0x10; // XmlSchemaException
		constexpr auto severity = 0x18; // XmlSeverityType
	}

	namespace n_IconsUI.PlayerRanks {
		constexpr auto _0 = 0x10; // Sprite
		constexpr auto _1 = 0x18; // Sprite
		constexpr auto _2 = 0x20; // Sprite
		constexpr auto _3 = 0x28; // Sprite
		constexpr auto _4 = 0x30; // Sprite
		constexpr auto _5 = 0x38; // Sprite
		constexpr auto _6 = 0x40; // Sprite
		constexpr auto _7 = 0x48; // Sprite
		constexpr auto _8 = 0x50; // Sprite
		constexpr auto _9 = 0x58; // Sprite
		constexpr auto _10 = 0x60; // Sprite
		constexpr auto _11 = 0x68; // Sprite
		constexpr auto _12 = 0x70; // Sprite
		constexpr auto _14 = 0x78; // Sprite
		constexpr auto _16 = 0x80; // Sprite
		constexpr auto _18 = 0x88; // Sprite
		constexpr auto _20 = 0x90; // Sprite
		constexpr auto _25 = 0x98; // Sprite
		constexpr auto _30 = 0xa0; // Sprite
		constexpr auto _40 = 0xa8; // Sprite
		constexpr auto _50 = 0xb0; // Sprite
		constexpr auto _60 = 0xb8; // Sprite
		constexpr auto _70 = 0xc0; // Sprite
		constexpr auto _80 = 0xc8; // Sprite
		constexpr auto _90 = 0xd0; // Sprite
		constexpr auto _100 = 0xd8; // Sprite
		constexpr auto _120 = 0xe0; // Sprite
		constexpr auto _130 = 0xe8; // Sprite
		constexpr auto _140 = 0xf0; // Sprite
		constexpr auto _150 = 0xf8; // Sprite
		constexpr auto _160 = 0x100; // Sprite
		constexpr auto _170 = 0x108; // Sprite
		constexpr auto _180 = 0x110; // Sprite
		constexpr auto _200 = 0x118; // Sprite
		constexpr auto _225 = 0x120; // Sprite
		constexpr auto _250 = 0x128; // Sprite
	}

	namespace n_Operator { // : AstNode
		constexpr auto opType = 0x10; // Operator.Op
		constexpr auto opnd1 = 0x18; // AstNode
		constexpr auto opnd2 = 0x20; // AstNode
	}

	namespace n_NItemThrower { // : GadgetManager
		constexpr auto ItemToThrow = 0xd0; // ThrownObject
		constexpr auto Angle = 0xd8; // float
		constexpr auto ItemObject = 0xe0; // GameObject
		constexpr auto ItemPim = 0xe8; // GameObject
		constexpr auto Camera = 0xf0; // Transform
		constexpr auto LeftShoulder = 0xf8; // Transform
		constexpr auto LeftArm = 0x100; // Transform
		constexpr auto Ready = 0x108; // AudioClip
		constexpr auto Throw = 0x110; // AudioClip
		constexpr auto StateStart = 0x118; // PositionAndRotation
		constexpr auto StateMouth = 0x120; // PositionAndRotation
		constexpr auto StateHold = 0x128; // PositionAndRotation
		constexpr auto StateThrow = 0x130; // PositionAndRotation
		constexpr auto _isThrowing = 0x138; // bool
		constexpr auto leftToReady = 0x13c; // float
		constexpr auto leftToDeswitch = 0x140; // float
		constexpr auto sinceStart = 0x144; // float
		constexpr auto sinceThrow = 0x148; // float
		constexpr auto wasThrown = 0x14c; // bool
		constexpr auto state = 0x150; // int
		constexpr auto latestEular = 0x154; // Vector3
	}

	namespace n_ApcTurretUI { // : MonoBehaviour
		constexpr auto Range = 0x18; // TextMeshProUGUI
		constexpr auto VerticalDegree = 0x20; // TextMeshProUGUI
		constexpr auto HorizontalDegree = 0x28; // TextMeshProUGUI
		constexpr auto Ammo = 0x30; // TextMeshProUGUI
		constexpr auto TotalAmmo = 0x38; // TextMeshProUGUI
		constexpr auto Zoom = 0x40; // TextMeshProUGUI
		constexpr auto RotationBody = 0x48; // RectTransform
	}

	namespace n_PairCachingGhostObject { // : GhostObject
		constexpr auto _overlappingPairCache = 0x48; // HashedOverlappingPairCache
	}

	namespace n_VFXPlaneBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Transform
		constexpr auto Position = 0x30; // ExposedProperty
		constexpr auto Normal = 0x38; // ExposedProperty
	}

	namespace n_Field {
		constexpr auto _isPublic = 0x10; // bool
		constexpr auto headerID = 0x14; // int
		constexpr auto _fieldType = 0x18; // FieldType
		constexpr auto _fieldName = 0x20; // string
		constexpr auto _maxValue = 0x28; // int
	}

	namespace n_AssetFileNameExtensionAttribute { // : Attribute
		constexpr auto (preferredExtension)k__BackingField = 0x10; // string
		constexpr auto (otherExtensions)k__BackingField = 0x18; // IEnumerable(string)
	}

	namespace n_LazyAsyncResult.ThreadContext {
		constexpr auto m_NestedIOCount = 0x10; // int
	}

	namespace n_TerrainTree {
		constexpr auto Lod0 = 0x10; // List(RendererHandle)
		constexpr auto Lod1 = 0x18; // List(RendererHandle)
		constexpr auto Lod2 = 0x20; // List(RendererHandle)
		constexpr auto Lod3 = 0x28; // List(RendererHandle)
		constexpr auto Lod0ScreenHeight = 0x30; // float
		constexpr auto Lod1ScreenHeight = 0x34; // float
		constexpr auto Lod2ScreenHeight = 0x38; // float
		constexpr auto ActiveLOD = 0x3c; // int
		constexpr auto TargetLOD = 0x40; // int
	}

	namespace n_RequestCacheBinding {
		constexpr auto m_RequestCache = 0x10; // RequestCache
		constexpr auto m_CacheValidator = 0x18; // RequestCacheValidator
	}

	namespace n_SerObjectInfoInit {
		constexpr auto seenBeforeTable = 0x10; // Hashtable
		constexpr auto objectInfoIdCount = 0x18; // int
		constexpr auto oiPool = 0x20; // SerStack
	}

	namespace n_GamemodeResources.GunGame {
		constexpr auto Tiny08v08 = 0x10; // GungameList[]
		constexpr auto Small16v16 = 0x18; // GungameList[]
		constexpr auto Medium32v32 = 0x20; // GungameList[]
		constexpr auto Big64v64 = 0x28; // GungameList[]
		constexpr auto Ultra90v90 = 0x30; // GungameList[]
	}

	namespace n_NeutralResourcesLanguageAttribute { // : Attribute
		constexpr auto _culture = 0x10; // string
		constexpr auto _fallbackLoc = 0x18; // UltimateResourceFallbackLocation
	}

	namespace n_UniversalAdditionalLightData { // : MonoBehaviour
		constexpr auto m_UsePipelineSettings = 0x18; // bool
	}

	namespace n_Triangle { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_PermissionSet { // : ISecurityEncodable
		constexpr auto state = 0x10; // PermissionState
		constexpr auto list = 0x18; // ArrayList
		constexpr auto _ignored = 0x20; // bool[]
	}

	namespace n_NtlmClient { // : IAuthenticationModule
		constexpr auto authObject = 0x10; // IAuthenticationModule
	}

	namespace n_TopTurretBehaviour { // : SeatBehaviour
		constexpr auto Item = 0x48; // Turret
		constexpr auto YAxis = 0x50; // Transform
		constexpr auto XAxis = 0x58; // Transform
		constexpr auto ShotPoint = 0x60; // Transform
		constexpr auto BulletEjectPoint = 0x68; // Transform
		constexpr auto LocalObj = 0x70; // GameObject
		constexpr auto Camera = 0x78; // Transform
		constexpr auto IKParent = 0x80; // Transform
		constexpr auto LeftHand = 0x88; // Vector3
		constexpr auto RightHand = 0x94; // Vector3
		constexpr auto (Ammo)k__BackingField = 0xa0; // int
		constexpr auto Accuracy = 0xa8; // WeaponAccuracy
		constexpr auto vehicle = 0xb0; // VehicleInstance
		constexpr auto LastShot = 0xb8; // float
		constexpr auto LocalInputAngles = 0xbc; // Vector2
		constexpr auto LocalRemoteAngles = 0xc4; // Vector2
		constexpr auto LocalRemoteAnglesCurrent = 0xcc; // Vector2
		constexpr auto LocalRemoteYaxisRotation = 0xd4; // Quaternion
		constexpr auto LocalRemoteXaxisRotation = 0xe4; // Quaternion
		constexpr auto moveFlagX = 0xf4; // bool
		constexpr auto moveFlagY = 0xf5; // bool
		constexpr auto isAiming = 0xf6; // bool
	}

	namespace n_DirectionalHitIndicator { // : MonoBehaviour
		constexpr auto canvas = 0x18; // CanvasGroup
		constexpr auto Element = 0x20; // GameObject
		constexpr auto Parent = 0x28; // Transform
		constexpr auto pool = 0x30; // UIPool(DHIE)
		constexpr auto inUse = 0x38; // Queue(DHIE)
		constexpr auto Full = 0x40; // Texture2D
		constexpr auto Line = 0x48; // Texture2D
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
	}

	namespace n_AlignedJointArray { // : IList(Joint)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_CaseInsensitiveComparer { // : IComparer
		constexpr auto m_compareInfo = 0x10; // CompareInfo
	}

	namespace n_Bootstring {
		constexpr auto delimiter = 0x10; // char
		constexpr auto base_num = 0x14; // int
		constexpr auto tmin = 0x18; // int
		constexpr auto tmax = 0x1c; // int
		constexpr auto skew = 0x20; // int
		constexpr auto damp = 0x24; // int
		constexpr auto initial_bias = 0x28; // int
		constexpr auto initial_n = 0x2c; // int
	}

	namespace n_FlagUI { // : MonoBehaviour
		constexpr auto Canvas = 0x18; // CanvasGroup
		constexpr auto Label = 0x20; // TextMeshProUGUI
		constexpr auto Meters = 0x28; // TextMeshProUGUI
		constexpr auto SquadsLabel = 0x30; // TextMeshProUGUI
		constexpr auto OrderLabel = 0x38; // TextMeshProUGUI
		constexpr auto OrderCanvas = 0x40; // CanvasGroup
		constexpr auto SelectHover = 0x48; // RawImage
		constexpr auto PingButton = 0x50; // KeybindingButton
		constexpr auto rectTransform = 0x58; // RectTransform
		constexpr auto image = 0x60; // Image
		constexpr auto MyTeam = 0x68; // Sprite
		constexpr auto EnemyTeam = 0x70; // Sprite
		constexpr auto Neutral = 0x78; // Sprite
		constexpr auto AttackAnim = 0x80; // GameObject
		constexpr auto DefendAnim = 0x88; // GameObject
		constexpr auto Visibility = 0x90; // AnimationCurve
		constexpr auto SinEffect = 0x98; // bool
		constexpr auto adsAlpha = 0x9c; // float
		constexpr auto flagOnCaptureTime = 0xa0; // float
		constexpr auto flagOnCaptureTimeSize = 0xa4; // float
		constexpr auto sinStartTime = 0xa8; // float
		constexpr auto mScale = 0xac; // float
		constexpr auto wasSinEffect = 0xb0; // bool
		constexpr auto viewport = 0xb4; // Vector3
		constexpr auto mState = 0xc0; // FlagUI.State
		constexpr auto mWasDoHovering = 0xc4; // bool
		constexpr auto mTargetSquadStringVersion = 0xc8; // int
		constexpr auto (FastListIndexA)k__BackingField = 0xcc; // int
		constexpr auto ScreenPosition = 0xd0; // Vector2
		constexpr auto IsVisible = 0xd8; // bool
		constexpr auto IsCapturing = 0xd9; // bool
		constexpr auto Alpha = 0xdc; // float
		constexpr auto (WorldFlag)k__BackingField = 0xe0; // Flag
		constexpr auto lastSetValue = 0xe8; // float
		constexpr auto lastSetState = 0xec; // FlagLocalState
		constexpr auto metersEnabled = 0xf0; // bool
		constexpr auto lastSetMeters = 0xf4; // int
		constexpr auto mLastSetSize = 0xf8; // float
		constexpr auto lastSize = 0xfc; // float
	}

	namespace n_WallBuilder { // : MonoBehaviour
		constexpr auto (isDestroyed)k__BackingField = 0x18; // bool
		constexpr auto (isPrepared)k__BackingField = 0x19; // bool
		constexpr auto Offset = 0x1c; // Vector3
		constexpr auto WidthCount = 0x28; // int
		constexpr auto HeightCount = 0x2c; // int
		constexpr auto WallWidth = 0x30; // float
		constexpr auto WallHeight = 0x34; // float
		constexpr auto WallDepth = 0x38; // float
		constexpr auto Holes = 0x40; // WallBuilder.WallHole[]
		constexpr auto ColorID = 0x48; // int
		constexpr auto Outside = 0x4c; // Vector2
		constexpr auto Inside = 0x54; // Vector2
		constexpr auto ParentObject = 0x60; // EnvironmentObject
		constexpr auto resources = 0x68; // WallDestrucationResources
		constexpr auto colliders = 0x70; // WallColliders
		constexpr auto m_hp = 0x78; // float
		constexpr auto m_initialHP = 0x7c; // float
		constexpr auto m_consideredDestroyedHP = 0x80; // float
		constexpr auto mLocalScale = 0x84; // Vector3
		constexpr auto m_registeredToLods = 0x90; // bool
		constexpr auto Position = 0x94; // Vector3
		constexpr auto Rotation = 0xa0; // Quaternion
		constexpr auto Scale = 0xb0; // Vector3
		constexpr auto _inverseLod1Face = 0xbc; // bool
		constexpr auto _inverseFaces = 0xbd; // bool
		constexpr auto LOD0Renderer = 0xc0; // BuildingLODRenderer
		constexpr auto LOD1Renderer = 0xc8; // BuildingLODRenderer
		constexpr auto LOD0MeshRenderer = 0xd0; // MeshRenderer
		constexpr auto LOD1MeshRenderer = 0xd8; // MeshRenderer
		constexpr auto LOD0Mesh = 0xe0; // Mesh
		constexpr auto LOD1Mesh = 0xe8; // Mesh
		constexpr auto numberOfBricksRemoved = 0xf0; // int
		constexpr auto (isChanged)k__BackingField = 0xf4; // bool
		constexpr auto (isProcessing)k__BackingField = 0xf5; // bool
		constexpr auto (isConsideredDestroyed)k__BackingField = 0xf6; // bool
	}

	namespace n_BinaryAssemblyInfo {
		constexpr auto assemblyString = 0x10; // string
		constexpr auto assembly = 0x18; // Assembly
	}

	namespace n_WearableChest { // : Wearable
		constexpr auto Category = 0x40; // ChestCategory
	}

	namespace n_TimeZoneInfo.AdjustmentRule { // : IEquatable(TimeZoneInfo.AdjustmentRule)
		constexpr auto m_dateStart = 0x10; // DateTime
		constexpr auto m_dateEnd = 0x18; // DateTime
		constexpr auto m_daylightDelta = 0x20; // TimeSpan
		constexpr auto m_daylightTransitionStart = 0x28; // TimeZoneInfo.TransitionTime
		constexpr auto m_daylightTransitionEnd = 0x40; // TimeZoneInfo.TransitionTime
		constexpr auto m_baseUtcOffsetDelta = 0x58; // TimeSpan
	}

	namespace n_VisualEffectActivationBehaviour { // : PlayableBehaviour
		constexpr auto onClipEnter = 0x10; // ExposedProperty
		constexpr auto onClipExit = 0x18; // ExposedProperty
		constexpr auto clipEnterEventAttributes = 0x20; // VisualEffectActivationBehaviour.EventState[]
		constexpr auto clipExitEventAttributes = 0x28; // VisualEffectActivationBehaviour.EventState[]
	}

	namespace n_HebrewNumber.HebrewValue {
		constexpr auto token = 0x10; // HebrewNumber.HebrewToken
		constexpr auto value = 0x14; // int
	}

	namespace n_AnimatorOverrideController { // : RuntimeAnimatorController
		constexpr auto OnOverrideControllerDirty = 0x18; // AnimatorOverrideController.OnOverrideControllerDirtyCallback
	}

	namespace n_ConvexPenetrationDepthSolver { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_MapVehicleUIObject { // : MapUIBehaviour
		constexpr auto Icon = 0x60; // Image
		constexpr auto SelectableCanvas = 0x68; // CanvasGroup
		constexpr auto instance = 0x70; // VehicleInstance
		constexpr auto _flipped = 0x78; // bool
		constexpr auto _hideSelectable = 0x79; // bool
	}

	namespace n_DebugUIHandlerBitField { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // UIFoldout
		constexpr auto toggles = 0x68; // List(DebugUIHandlerIndirectToggle)
		constexpr auto m_Field = 0x70; // DebugUI.BitField
		constexpr auto m_Container = 0x78; // DebugUIHandlerContainer
	}

	namespace n_VFXTriggerEventBinder { // : VFXEventBinderBase
		constexpr auto colliders = 0x30; // List(Collider)
		constexpr auto activation = 0x38; // VFXTriggerEventBinder.Activation
		constexpr auto positionParameter = 0x40; // ExposedProperty
	}

	namespace n_CharEnumerator { // : IEnumerator
		constexpr auto str = 0x10; // string
		constexpr auto index = 0x18; // int
		constexpr auto currentElement = 0x1c; // char
	}

	namespace n_ScriptableRendererData { // : ScriptableObject
		constexpr auto (isInvalidated)k__BackingField = 0x18; // bool
		constexpr auto m_RendererFeatures = 0x20; // List(ScriptableRendererFeature)
		constexpr auto m_RendererFeatureMap = 0x28; // List(long)
	}

	namespace n_FlirBehaviour { // : AttachmentAddon
		constexpr auto MaxEnergy = 0x40; // float
		constexpr auto IncreaseSpeed = 0x44; // float
		constexpr auto Energy = 0x48; // float
		constexpr auto Flir = 0x50; // GameObject
		constexpr auto Normal = 0x58; // GameObject
		constexpr auto Child = 0x60; // FlirReticle
		constexpr auto FlirReticle = 0x68; // Material
		constexpr auto (TickIndex6)k__BackingField = 0x70; // int
		constexpr auto isFlirObjectEnabled = 0x74; // bool
	}

	namespace n_Version { // : ICloneable
		constexpr auto _Major = 0x10; // int
		constexpr auto _Minor = 0x14; // int
		constexpr auto _Build = 0x18; // int
		constexpr auto _Revision = 0x1c; // int
	}

	namespace n_XmlImplementation {
		constexpr auto nameTable = 0x10; // XmlNameTable
	}

	namespace n_CanvasUpdateRegistry {
		constexpr auto m_PerformingLayoutUpdate = 0x10; // bool
		constexpr auto m_PerformingGraphicUpdate = 0x11; // bool
		constexpr auto m_CanvasUpdateProfilerStrings = 0x18; // string[]
		constexpr auto m_LayoutRebuildQueue = 0x20; // IndexedSet(ICanvasElement)
		constexpr auto m_GraphicRebuildQueue = 0x28; // IndexedSet(ICanvasElement)
	}

	namespace n_IntersectSettings {
		constexpr auto maximumChecks = 0x10; // int
		constexpr auto checkIntersectType = 0x14; // CheckIntersectType
		constexpr auto boundsCheckType = 0x18; // BoundsCheckType
		constexpr auto boundsSize = 0x1c; // Vector3
		constexpr auto uniformBoundsSize = 0x28; // bool
		constexpr auto multiplyBoundsSize = 0x2c; // float
		constexpr auto priority = 0x30; // int
		constexpr auto radius = 0x34; // float
		constexpr auto trunkRadius = 0x38; // float
		constexpr auto intersectRadiusType = 0x3c; // IntersectRadiusType
	}

	namespace n_RestrictionFacets {
		constexpr auto Length = 0x10; // int
		constexpr auto MinLength = 0x14; // int
		constexpr auto MaxLength = 0x18; // int
		constexpr auto Patterns = 0x20; // ArrayList
		constexpr auto Enumeration = 0x28; // ArrayList
		constexpr auto WhiteSpace = 0x30; // XmlSchemaWhiteSpace
		constexpr auto MaxInclusive = 0x38; // object
		constexpr auto MaxExclusive = 0x40; // object
		constexpr auto MinInclusive = 0x48; // object
		constexpr auto MinExclusive = 0x50; // object
		constexpr auto TotalDigits = 0x58; // int
		constexpr auto FractionDigits = 0x5c; // int
		constexpr auto Flags = 0x60; // RestrictionFlags
	}

	namespace n_SocketAsyncEventArgs { // : EventArgs
		constexpr auto disposed = 0x10; // bool
		constexpr auto in_progress = 0x14; // int
		constexpr auto remote_ep = 0x18; // EndPoint
		constexpr auto current_socket = 0x20; // Socket
		constexpr auto (AcceptSocket)k__BackingField = 0x28; // Socket
		constexpr auto (BytesTransferred)k__BackingField = 0x30; // int
		constexpr auto (SocketError)k__BackingField = 0x34; // SocketError
		constexpr auto Completed = 0x38; // EventHandler(SocketAsyncEventArgs)
	}

	namespace n_HttpWebRequest { // : WebRequest
		constexpr auto requestUri = 0x38; // Uri
		constexpr auto actualUri = 0x40; // Uri
		constexpr auto hostChanged = 0x48; // bool
		constexpr auto allowAutoRedirect = 0x49; // bool
		constexpr auto allowBuffering = 0x4a; // bool
		constexpr auto certificates = 0x50; // X509CertificateCollection
		constexpr auto connectionGroup = 0x58; // string
		constexpr auto haveContentLength = 0x60; // bool
		constexpr auto contentLength = 0x68; // long
		constexpr auto continueDelegate = 0x70; // HttpContinueDelegate
		constexpr auto cookieContainer = 0x78; // CookieContainer
		constexpr auto credentials = 0x80; // ICredentials
		constexpr auto haveResponse = 0x88; // bool
		constexpr auto haveRequest = 0x89; // bool
		constexpr auto requestSent = 0x8a; // bool
		constexpr auto webHeaders = 0x90; // WebHeaderCollection
		constexpr auto keepAlive = 0x98; // bool
		constexpr auto maxAutoRedirect = 0x9c; // int
		constexpr auto mediaType = 0xa0; // string
		constexpr auto method = 0xa8; // string
		constexpr auto initialMethod = 0xb0; // string
		constexpr auto pipelined = 0xb8; // bool
		constexpr auto preAuthenticate = 0xb9; // bool
		constexpr auto usedPreAuth = 0xba; // bool
		constexpr auto version = 0xc0; // Version
		constexpr auto force_version = 0xc8; // bool
		constexpr auto actualVersion = 0xd0; // Version
		constexpr auto proxy = 0xd8; // IWebProxy
		constexpr auto sendChunked = 0xe0; // bool
		constexpr auto servicePoint = 0xe8; // ServicePoint
		constexpr auto timeout = 0xf0; // int
		constexpr auto writeStream = 0xf8; // WebConnectionStream
		constexpr auto webResponse = 0x100; // HttpWebResponse
		constexpr auto asyncWrite = 0x108; // WebAsyncResult
		constexpr auto asyncRead = 0x110; // WebAsyncResult
		constexpr auto abortHandler = 0x118; // EventHandler
		constexpr auto aborted = 0x120; // int
		constexpr auto gotRequestStream = 0x124; // bool
		constexpr auto redirects = 0x128; // int
		constexpr auto expectContinue = 0x12c; // bool
		constexpr auto bodyBuffer = 0x130; // byte[]
		constexpr auto bodyBufferLength = 0x138; // int
		constexpr auto getResponseCalled = 0x13c; // bool
		constexpr auto saved_exc = 0x140; // Exception
		constexpr auto locker = 0x148; // object
		constexpr auto finished_reading = 0x150; // bool
		constexpr auto WebConnection = 0x158; // WebConnection
		constexpr auto auto_decomp = 0x160; // DecompressionMethods
		constexpr auto readWriteTimeout = 0x164; // int
		constexpr auto tlsProvider = 0x168; // MonoTlsProvider
		constexpr auto tlsSettings = 0x170; // MonoTlsSettings
		constexpr auto certValidationCallback = 0x178; // ServerCertValidationCallback
		constexpr auto auth_state = 0x180; // HttpWebRequest.AuthorizationState
		constexpr auto proxy_auth_state = 0x190; // HttpWebRequest.AuthorizationState
		constexpr auto host = 0x1a0; // string
		constexpr auto ResendContentFactory = 0x1a8; // Action(Stream)
		constexpr auto (ThrowOnError)k__BackingField = 0x1b0; // bool
		constexpr auto unsafe_auth_blah = 0x1b1; // bool
		constexpr auto (ReuseConnection)k__BackingField = 0x1b2; // bool
		constexpr auto StoredConnection = 0x1b8; // WebConnection
	}

	namespace n_AlignedClusterArrayDebugView {
		constexpr auto _array = 0x10; // AlignedClusterArray
	}

	namespace n_LazyAsyncResult { // : IAsyncResult
		constexpr auto m_AsyncObject = 0x10; // object
		constexpr auto m_AsyncState = 0x18; // object
		constexpr auto m_AsyncCallback = 0x20; // AsyncCallback
		constexpr auto m_Result = 0x28; // object
		constexpr auto m_IntCompleted = 0x30; // int
		constexpr auto m_UserEvent = 0x34; // bool
		constexpr auto m_Event = 0x38; // object
	}

	namespace n_GraphicRegistry {
		constexpr auto m_Graphics = 0x10; // Dictionary(Canvas, IndexedSet(Graphic))
	}

	namespace n_Delegate { // : ICloneable
		constexpr auto method_ptr = 0x10; // IntPtr
		constexpr auto invoke_impl = 0x18; // IntPtr
		constexpr auto m_target = 0x20; // object
		constexpr auto method = 0x28; // IntPtr
		constexpr auto delegate_trampoline = 0x30; // IntPtr
		constexpr auto extra_arg = 0x38; // IntPtr
		constexpr auto method_code = 0x40; // IntPtr
		constexpr auto method_info = 0x48; // MethodInfo
		constexpr auto original_method_info = 0x50; // MethodInfo
		constexpr auto data = 0x58; // DelegateData
		constexpr auto method_is_virtual = 0x60; // bool
	}

	namespace n_HableCurve.Segment {
		constexpr auto offsetX = 0x10; // float
		constexpr auto offsetY = 0x14; // float
		constexpr auto scaleX = 0x18; // float
		constexpr auto scaleY = 0x1c; // float
		constexpr auto lnA = 0x20; // float
		constexpr auto B = 0x24; // float
	}

	namespace n_StaticVehicleRepairStation { // : MonoBehaviour
		constexpr auto Radius = 0x18; // float
		constexpr auto LightVehicleHealPerSecond = 0x1c; // float
		constexpr auto HeavyVehicleHealPerSecond = 0x20; // float
		constexpr auto position = 0x24; // Vector3
		constexpr auto rate = 0x30; // float
	}

	namespace n_Link { // : Feature
		constexpr auto _n = 0x20; // NodePtrArray
	}

	namespace n_SoftBodySolver { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_PickableWorldInstanceBase { // : MonoBehaviour
		constexpr auto (PrefabID)k__BackingField = 0x18; // int
		constexpr auto (State)k__BackingField = 0x20; // PickableBase
		constexpr auto (lifeTime)k__BackingField = 0x28; // float
		constexpr auto (inPool)k__BackingField = 0x2c; // bool
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x2d; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x30; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x34; // int
		constexpr auto mIsRigidbodyExists = 0x38; // bool
		constexpr auto (Rigidbody)k__BackingField = 0x40; // Rigidbody
		constexpr auto (TickIndex5)k__BackingField = 0x48; // int
	}

	namespace n_AbstractEventData {
		constexpr auto m_Used = 0x10; // bool
	}

	namespace n_BroadphasePair {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_TypedConstraint.ConstraintInfo2 { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_AuthTicket { // : IDisposable
		constexpr auto Data = 0x10; // byte[]
		constexpr auto Handle = 0x18; // uint
	}

	namespace n_XmlSchemaAnyAttribute { // : XmlSchemaAnnotated
		constexpr auto ns = 0x10; // string
		constexpr auto processContents = 0x18; // XmlSchemaContentProcessing
		constexpr auto namespaceList = 0x20; // NamespaceList
	}

	namespace n_PickableResource { // : ScriptableObject
		constexpr auto Items = 0x18; // PickableWorldInstanceBase[]
	}

	namespace n_DSASignatureDeformatter { // : AsymmetricSignatureDeformatter
		constexpr auto _oid = 0x10; // string
	}

	namespace n_ProfilingSampler {
		constexpr auto (sampler)k__BackingField = 0x10; // CustomSampler
		constexpr auto (inlineSampler)k__BackingField = 0x18; // CustomSampler
		constexpr auto (name)k__BackingField = 0x20; // string
	}

	namespace n_Notification { // : MonoBehaviour
		constexpr auto Label = 0x18; // TextMeshProUGUI
		constexpr auto Indicator = 0x20; // RawImage
		constexpr auto Layer = 0x28; // RawImage
		constexpr auto rectTransform = 0x30; // RectTransform
		constexpr auto group = 0x38; // CanvasGroup
		constexpr auto handler = 0x40; // Notifications
		constexpr auto InitTime = 0x48; // float
		constexpr auto AliveUntil = 0x4c; // float
		constexpr auto expandETA = 0x50; // float
		constexpr auto expand = 0x54; // bool
	}

	namespace n_ALoadout {
		constexpr auto Role = 0x10; // Role
		constexpr auto Nation = 0x11; // Nation
		constexpr auto Primary = 0x18; // AWeapon
		constexpr auto Secondary = 0x20; // AWeapon
		constexpr auto FirstAid = 0x28; // AGadget
		constexpr auto ToolA = 0x30; // AGadget
		constexpr auto ToolB = 0x38; // AGadget
		constexpr auto Throwable = 0x40; // AGadget
		constexpr auto overNetwork_PrimaryAttachments = 0x48; // WeaponAttachments
		constexpr auto overNetwork_SecondaryAttachments = 0x50; // WeaponAttachments
		constexpr auto PrimaryExtra = 0x58; // byte
		constexpr auto SecondaryExtra = 0x59; // byte
		constexpr auto FirstAidExtra = 0x5a; // byte
		constexpr auto ToolAExtra = 0x5b; // byte
		constexpr auto ToolBExtra = 0x5c; // byte
		constexpr auto ThrowableExtra = 0x5d; // byte
	}

	namespace n_SliderValueReader { // : MonoBehaviour
		constexpr auto Slider = 0x18; // Slider
		constexpr auto asFloat = 0x20; // bool
		constexpr auto txt = 0x28; // TextMeshProUGUI
		constexpr auto Additional = 0x30; // string
	}

	namespace n_CommandBuffer { // : IDisposable
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_TerrainTransformSettings {
		constexpr auto minRotation = 0x10; // float
		constexpr auto maxRotation = 0x14; // float
		constexpr auto uniformScale = 0x18; // bool
		constexpr auto minScale = 0x1c; // Vector3
		constexpr auto maxScale = 0x28; // Vector3
	}

	namespace n_TestRange_TargetHuman { // : MonoBehaviour
		constexpr auto HP = 0x18; // float
	}

	namespace n_PostProcessingPass { // : ScriptableRenderPass
		constexpr auto m_ProfilerTag = 0x68; // string
		constexpr auto m_Settings = 0x70; // PostProcessingQuad.PostProcessingQuadSettings
		constexpr auto source = 0x78; // RenderTargetIdentifier
	}

	namespace n_AxisSweep3 { // : BroadphaseInterface
		constexpr auto _overlappingPairUserCallback = 0x30; // OverlappingPairCallback
	}

	namespace n_BooleanExpr { // : ValueQuery
		constexpr auto opnd1 = 0x18; // Query
		constexpr auto opnd2 = 0x20; // Query
		constexpr auto isOr = 0x28; // bool
	}

	namespace n_ShaderData { // : IDisposable
		constexpr auto m_LightDataBuffer = 0x10; // ComputeBuffer
		constexpr auto m_LightIndicesBuffer = 0x18; // ComputeBuffer
		constexpr auto m_ShadowDataBuffer = 0x20; // ComputeBuffer
		constexpr auto m_ShadowIndicesBuffer = 0x28; // ComputeBuffer
	}

	namespace n_AttachmentSettings {
		constexpr auto ReloadSpeed = 0x10; // AttachmentSettings.Variable
		constexpr auto DrawSpeed = 0x18; // AttachmentSettings.Variable
		constexpr auto AimDownTime = 0x20; // AttachmentSettings.Variable
		constexpr auto SwayWeigth = 0x28; // AttachmentSettings.Variable
		constexpr auto RunningSpeed = 0x30; // AttachmentSettings.Variable
		constexpr auto VerticalRecoil = 0x38; // AttachmentSettings.Variable
		constexpr auto HorizontalRecoil = 0x40; // AttachmentSettings.Variable
		constexpr auto FirstShotRecoil = 0x48; // AttachmentSettings.Variable
		constexpr auto Firerate = 0x50; // AttachmentSettings.Variable
		constexpr auto GunShotSoundDistance = 0x58; // AttachmentSettings.Variable
		constexpr auto MuzzleScale = 0x60; // AttachmentSettings.Variable
		constexpr auto EnableSuppressor = 0x68; // bool
		constexpr auto ProjectileVelocity = 0x6c; // AttachmentSettings.Variable
		constexpr auto ProjectileGravity = 0x74; // AttachmentSettings.Variable
		constexpr auto ProjectileAccuracy = 0x7c; // AttachmentSettings.Variable
		constexpr auto ProjectileDrag = 0x84; // AttachmentSettings.Variable
		constexpr auto ProjectileBodyDamage = 0x8c; // AttachmentSettings.Variable
		constexpr auto ProjectileArmorDamage = 0x94; // AttachmentSettings.Variable
		constexpr auto ProjectileLightVehicleDamage = 0x9c; // AttachmentSettings.Variable
		constexpr auto ProjectileHeavyVehicleDamage = 0xa4; // AttachmentSettings.Variable
		constexpr auto BoltActionSpeed = 0xac; // AttachmentSettings.Variable
		constexpr auto EnableAutoBoltAction = 0xb4; // bool
		constexpr auto EnableActionWhileAiming = 0xb5; // bool
	}

	namespace n_AppDomain { // : MarshalByRefObject
		constexpr auto _mono_app_domain = 0x18; // IntPtr
		constexpr auto _evidence = 0x20; // object
		constexpr auto _granted = 0x28; // object
		constexpr auto _principalPolicy = 0x30; // int
		constexpr auto AssemblyLoad = 0x38; // AssemblyLoadEventHandler
		constexpr auto AssemblyResolve = 0x40; // ResolveEventHandler
		constexpr auto DomainUnload = 0x48; // EventHandler
		constexpr auto ProcessExit = 0x50; // EventHandler
		constexpr auto ResourceResolve = 0x58; // ResolveEventHandler
		constexpr auto TypeResolve = 0x60; // ResolveEventHandler
		constexpr auto UnhandledException = 0x68; // UnhandledExceptionEventHandler
		constexpr auto FirstChanceException = 0x70; // EventHandler(FirstChanceExceptionEventArgs)
		constexpr auto _domain_manager = 0x78; // object
		constexpr auto ReflectionOnlyAssemblyResolve = 0x80; // ResolveEventHandler
		constexpr auto _activation = 0x88; // object
		constexpr auto _applicationIdentity = 0x90; // object
		constexpr auto compatibility_switch = 0x98; // List(string)
	}

	namespace n_LogicalCallContext { // : ISerializable
		constexpr auto m_Datastore = 0x10; // Hashtable
		constexpr auto m_RemotingData = 0x18; // CallContextRemotingData
		constexpr auto m_SecurityData = 0x20; // CallContextSecurityData
		constexpr auto m_HostContext = 0x28; // object
		constexpr auto m_IsCorrelationMgr = 0x30; // bool
		constexpr auto _sendHeaders = 0x38; // Header[]
		constexpr auto _recvHeaders = 0x40; // Header[]
	}

	namespace n_RuntimeElement { // : IInterval
		constexpr auto (intervalBit)k__BackingField = 0x10; // int
	}

	namespace n_KeyedHashAlgorithm { // : HashAlgorithm
		constexpr auto KeyValue = 0x28; // byte[]
	}

	namespace n_StreamWriter { // : TextWriter
		constexpr auto stream = 0x28; // Stream
		constexpr auto encoding = 0x30; // Encoding
		constexpr auto encoder = 0x38; // Encoder
		constexpr auto byteBuffer = 0x40; // byte[]
		constexpr auto charBuffer = 0x48; // char[]
		constexpr auto charPos = 0x50; // int
		constexpr auto charLen = 0x54; // int
		constexpr auto autoFlush = 0x58; // bool
		constexpr auto haveWrittenPreamble = 0x59; // bool
		constexpr auto closable = 0x5a; // bool
		constexpr auto _asyncWriteTask = 0x60; // Task
	}

	namespace n_ArrayList.ReadOnlyArrayList { // : ArrayList
		constexpr auto _list = 0x28; // ArrayList
	}

	namespace n_RaycastVehicle { // : IAction
		constexpr auto wheelInfo = 0x10; // WheelInfo[]
		constexpr auto forwardWS = 0x18; // Vector3[]
		constexpr auto axle = 0x20; // Vector3[]
		constexpr auto forwardImpulse = 0x28; // float[]
		constexpr auto sideImpulse = 0x30; // float[]
		constexpr auto currentVehicleSpeedKmHour = 0x38; // float
		constexpr auto indexRightAxis = 0x3c; // int
		constexpr auto indexUpAxis = 0x40; // int
		constexpr auto indexForwardAxis = 0x44; // int
		constexpr auto chassisBody = 0x48; // RigidBody
		constexpr auto vehicleRaycaster = 0x50; // IVehicleRaycaster
		constexpr auto blue = 0x58; // Vector3
		constexpr auto magenta = 0x64; // Vector3
	}

	namespace n_MlcpSolver { // : SequentialImpulseConstraintSolver
		constexpr auto _mlcpSolver = 0x20; // MlcpSolverInterface
	}

	namespace n_Anchor {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _node = 0x18; // Node
	}

	namespace n_SledgeHammer { // : GadgetManager
		constexpr auto FleshOnHit = 0xd0; // AudioClip[]
		constexpr auto etaBusy = 0xd8; // float
		constexpr auto etaHit = 0xdc; // float
		constexpr auto etaHitSound = 0xe0; // float
		constexpr auto switching = 0xe4; // float
		constexpr auto mLastHittingPlayer = 0xe8; // PlayerNetwork
	}

	namespace n_SRayCast {
		constexpr auto (Body)k__BackingField = 0x10; // SoftBody
		constexpr auto (Feature)k__BackingField = 0x18; // FeatureType
		constexpr auto (Fraction)k__BackingField = 0x1c; // float
		constexpr auto (Index)k__BackingField = 0x20; // int
	}

	namespace n_VehicleCollider { // : MonoBehaviour
		constexpr auto ID = 0x18; // int
		constexpr auto Vehicle = 0x20; // VehicleInstance
		constexpr auto Provider = 0x28; // VehicleColliderProvider
		constexpr auto Colliders = 0x30; // Collider[]
		constexpr auto isWheel = 0x38; // bool
	}

	namespace n_WebClient.ProgressData {
		constexpr auto BytesSent = 0x10; // long
		constexpr auto TotalBytesToSend = 0x18; // long
		constexpr auto BytesReceived = 0x20; // long
		constexpr auto TotalBytesToReceive = 0x28; // long
		constexpr auto HasUploadPhase = 0x30; // bool
	}

	namespace n_CanvasScaler { // : UIBehaviour
		constexpr auto m_UiScaleMode = 0x18; // CanvasScaler.ScaleMode
		constexpr auto m_ReferencePixelsPerUnit = 0x1c; // float
		constexpr auto m_ScaleFactor = 0x20; // float
		constexpr auto m_ReferenceResolution = 0x24; // Vector2
		constexpr auto m_ScreenMatchMode = 0x2c; // CanvasScaler.ScreenMatchMode
		constexpr auto m_MatchWidthOrHeight = 0x30; // float
		constexpr auto m_PhysicalUnit = 0x34; // CanvasScaler.Unit
		constexpr auto m_FallbackScreenDPI = 0x38; // float
		constexpr auto m_DefaultSpriteDPI = 0x3c; // float
		constexpr auto m_DynamicPixelsPerUnit = 0x40; // float
		constexpr auto m_Canvas = 0x48; // Canvas
		constexpr auto m_PrevScaleFactor = 0x50; // float
		constexpr auto m_PrevReferencePixelsPerUnit = 0x54; // float
	}

	namespace n_SHA1Internal {
		constexpr auto _H = 0x10; // uint[]
		constexpr auto count = 0x18; // ulong
		constexpr auto _ProcessingBuffer = 0x20; // byte[]
		constexpr auto _ProcessingBufferCount = 0x28; // int
		constexpr auto buff = 0x30; // uint[]
	}

	namespace n_AssemblyProductAttribute { // : Attribute
		constexpr auto m_product = 0x10; // string
	}

	namespace n_UserManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnCurrentUserUpdate = 0x20; // UserManager.CurrentUserUpdateHandler
	}

	namespace n_Context {
		constexpr auto domain_id = 0x10; // int
		constexpr auto context_id = 0x14; // int
		constexpr auto static_data = 0x18; // UIntPtr
		constexpr auto data = 0x20; // UIntPtr
		constexpr auto server_context_sink_chain = 0x28; // IMessageSink
		constexpr auto client_context_sink_chain = 0x30; // IMessageSink
		constexpr auto context_properties = 0x38; // List(IContextProperty)
		constexpr auto _localDataStore = 0x40; // LocalDataStoreHolder
		constexpr auto context_dynamic_properties = 0x48; // DynamicPropertyCollection
		constexpr auto callback_object = 0x50; // ContextCallbackObject
	}

	namespace n_LuxLWRP_LayerBasedCulling { // : MonoBehaviour
		constexpr auto SmallDetailsLayer = 0x18; // LayerMask
		constexpr auto SmallDetailsDistance = 0x1c; // float
		constexpr auto MediumDetailsLayer = 0x20; // LayerMask
		constexpr auto MediumDetailsDistance = 0x24; // float
	}

	namespace n_TailStream { // : Stream
		constexpr auto _Buffer = 0x28; // byte[]
		constexpr auto _BufferSize = 0x30; // int
		constexpr auto _BufferIndex = 0x34; // int
		constexpr auto _BufferFull = 0x38; // bool
	}

	namespace n_MissingSatelliteAssemblyException { // : SystemException
		constexpr auto _cultureName = 0x88; // string
	}

	namespace n_RushSpawnPoint { // : MonoBehaviour
		constexpr auto SpawnPointOf = 0x18; // RushSide
		constexpr auto mMap = 0x20; // RushSpawnPointWorldMap
		constexpr auto mHasMultiplePoints = 0x28; // bool
		constexpr auto mPoints = 0x30; // Vector3[]
		constexpr auto (Position)k__BackingField = 0x38; // Vector3
	}

	namespace n_Align { // : TransformComponentsSettings
		constexpr auto useNormalWeight = 0x20; // bool
		constexpr auto minMaxRange = 0x21; // bool
		constexpr auto fromDirection = 0x24; // Align.FromDirection
		constexpr auto minWeightToNormal = 0x28; // float
		constexpr auto maxWeightToNormal = 0x2c; // float
	}

	namespace n_ProceduralTexture2D { // : ScriptableObject
		constexpr auto input = 0x18; // Texture2D
		constexpr auto type = 0x20; // ProceduralTexture2D.TextureType
		constexpr auto includeAlpha = 0x24; // bool
		constexpr auto generateMipMaps = 0x25; // bool
		constexpr auto filterMode = 0x28; // FilterMode
		constexpr auto anisoLevel = 0x2c; // int
		constexpr auto compressionQuality = 0x30; // ProceduralTexture2D.CompressionLevel
		constexpr auto Tinput = 0x38; // Texture2D
		constexpr auto invT = 0x40; // Texture2D
		constexpr auto colorSpaceOrigin = 0x48; // Vector3
		constexpr auto colorSpaceVector1 = 0x54; // Vector3
		constexpr auto colorSpaceVector2 = 0x60; // Vector3
		constexpr auto colorSpaceVector3 = 0x6c; // Vector3
		constexpr auto compressionScalers = 0x78; // Vector4
		constexpr auto memoryUsageBytes = 0x88; // long
		constexpr auto currentInput = 0x90; // Texture2D
		constexpr auto currentType = 0x98; // ProceduralTexture2D.TextureType
		constexpr auto currentIncludeAlpha = 0x9c; // bool
		constexpr auto currentGenerateMipMaps = 0x9d; // bool
		constexpr auto currentFilterMode = 0xa0; // FilterMode
		constexpr auto currentAnisoLevel = 0xa4; // int
		constexpr auto currentCompressionQuality = 0xa8; // ProceduralTexture2D.CompressionLevel
	}

	namespace n_SliderSnapper { // : MonoBehaviour
		constexpr auto Slider = 0x18; // Slider
		constexpr auto Range = 0x20; // float
		constexpr auto SnapValues = 0x28; // float[]
		constexpr auto latestNumber = 0x30; // float
		constexpr auto (TickIndex8)k__BackingField = 0x34; // int
	}

	namespace n_EventSourceAttribute { // : Attribute
		constexpr auto (Name)k__BackingField = 0x10; // string
		constexpr auto (Guid)k__BackingField = 0x18; // string
		constexpr auto (LocalizationResources)k__BackingField = 0x20; // string
	}

	namespace n_VFXInputAxisBinder { // : VFXBinderBase
		constexpr auto m_AxisProperty = 0x20; // ExposedProperty
		constexpr auto AxisName = 0x28; // string
		constexpr auto AccumulateSpeed = 0x30; // float
		constexpr auto Accumulate = 0x34; // bool
	}

	namespace n_MeshUtils.Face { // : MeshUtils.Pooled(MeshUtils.Face)
		constexpr auto _prev = 0x10; // MeshUtils.Face
		constexpr auto _next = 0x18; // MeshUtils.Face
		constexpr auto _anEdge = 0x20; // MeshUtils.Edge
		constexpr auto _trail = 0x28; // MeshUtils.Face
		constexpr auto _n = 0x30; // int
		constexpr auto _marked = 0x34; // bool
		constexpr auto _inside = 0x35; // bool
	}

	namespace n_Tools.Attachments {
		constexpr auto Scopes = 0x10; // AScope[]
		constexpr auto TopSights = 0x18; // ATopSight[]
		constexpr auto Barrels = 0x20; // ABarrel[]
		constexpr auto Canted = 0x28; // ACanted[]
		constexpr auto SideRails = 0x30; // ASideRail[]
		constexpr auto UnderRails = 0x38; // AUnderRail[]
		constexpr auto BoltActions = 0x40; // ABoltAction[]
	}

	namespace n_CameraSwitcher { // : MonoBehaviour
		constexpr auto m_Cameras = 0x18; // Camera[]
		constexpr auto m_CurrentCameraIndex = 0x20; // int
		constexpr auto m_OriginalCamera = 0x28; // Camera
		constexpr auto m_OriginalCameraPosition = 0x30; // Vector3
		constexpr auto m_OriginalCameraRotation = 0x3c; // Quaternion
		constexpr auto m_CurrentCamera = 0x50; // Camera
		constexpr auto m_CameraNames = 0x58; // GUIContent[]
		constexpr auto m_CameraIndices = 0x60; // int[]
		constexpr auto m_DebugEntry = 0x68; // DebugUI.EnumField
		constexpr auto m_DebugEntryEnumIndex = 0x70; // int
	}

	namespace n_Serializer { // : IDisposable
		constexpr auto _allocate = 0x10; // Serializer.AllocateUnmanagedDelegate
		constexpr auto _finalizeChunk = 0x18; // Serializer.FinalizeChunkUnmanagedDelegate
		constexpr auto _findNameForPointer = 0x20; // Serializer.FindNameForPointerUnmanagedDelegate
		constexpr auto _findPointer = 0x28; // Serializer.FindPointerUnmanagedDelegate
		constexpr auto _finishSerialization = 0x30; // Serializer.FinishSerializationUnmanagedDelegate
		constexpr auto _getBufferPointer = 0x38; // Serializer.GetBufferPointerUnmanagedDelegate
		constexpr auto _getChunk = 0x40; // Serializer.GetChunkUnmanagedDelegate
		constexpr auto _getCurrentBufferSize = 0x48; // Serializer.GetCurrentBufferSizeUnmanagedDelegate
		constexpr auto _getNumChunks = 0x50; // Serializer.GetNumChunksUnmanagedDelegate
		constexpr auto _getSerializationFlags = 0x58; // Serializer.GetSerializationFlagsUnmanagedDelegate
		constexpr auto _getuniquePointer = 0x60; // Serializer.GetUniquePointerUnmanagedDelegate
		constexpr auto _registernameForPointer = 0x68; // Serializer.RegisterNameForPointerUnmanagedDelegate
		constexpr auto _serializeName = 0x70; // Serializer.SerializeNameUnmanagedDelegate
		constexpr auto _setSerializationFlags = 0x78; // Serializer.SetSerializationFlagsUnmanagedDelegate
		constexpr auto _startSerialization = 0x80; // Serializer.StartSerializationUnmanagedDelegate
		constexpr auto _native = 0x88; // IntPtr
	}

	namespace n_BooleanFunctions { // : ValueQuery
		constexpr auto arg = 0x18; // Query
		constexpr auto funcType = 0x20; // Function.FunctionType
	}

	namespace n_InteriorNode { // : SyntaxTreeNode
		constexpr auto leftChild = 0x10; // SyntaxTreeNode
		constexpr auto rightChild = 0x18; // SyntaxTreeNode
	}

	namespace n_Mine { // : GadgetManager
		constexpr auto MinePrefab = 0xd0; // GameObject
		constexpr auto etaReady = 0xd8; // float
		constexpr auto etaPut = 0xdc; // float
		constexpr auto etaDraw = 0xe0; // float
	}

	namespace n_DebugShapes {
		constexpr auto m_sphereMesh = 0x10; // Mesh
		constexpr auto m_boxMesh = 0x18; // Mesh
		constexpr auto m_coneMesh = 0x20; // Mesh
		constexpr auto m_pyramidMesh = 0x28; // Mesh
	}

	namespace n_WearableHead { // : Wearable
		constexpr auto Category = 0x40; // HeadCategory
	}

	namespace n_TMP_Style {
		constexpr auto m_Name = 0x10; // string
		constexpr auto m_HashCode = 0x18; // int
		constexpr auto m_OpeningDefinition = 0x20; // string
		constexpr auto m_ClosingDefinition = 0x28; // string
		constexpr auto m_OpeningTagArray = 0x30; // int[]
		constexpr auto m_ClosingTagArray = 0x38; // int[]
		constexpr auto m_OpeningTagUnicodeArray = 0x40; // uint[]
		constexpr auto m_ClosingTagUnicodeArray = 0x48; // uint[]
	}

	namespace n_LoadoutAttachmentElement { // : MonoBehaviour
		constexpr auto label_Name = 0x18; // TextMeshProUGUI
		constexpr auto img_Icon = 0x20; // RawImage
		constexpr auto obj_isLocked = 0x28; // GameObject
		constexpr auto obj_skinisLocked = 0x30; // GameObject
		constexpr auto obj_new = 0x38; // GameObject
		constexpr auto img_Skin = 0x40; // RawImage
		constexpr auto label_kill = 0x48; // TextMeshProUGUI
		constexpr auto Item = 0x50; // IAttachmentItem
		constexpr auto WeaponItem = 0x58; // AWeapon
		constexpr auto Button = 0x60; // GraphicRevertedButton
		constexpr auto isSelected = 0x68; // bool
		constexpr auto isLocked = 0x69; // bool
		constexpr auto expand = 0x6a; // bool
		constexpr auto mask = 0x70; // RectMask2D
		constexpr auto ishovering = 0x78; // bool
		constexpr auto mWasHovering = 0x79; // bool
	}

	namespace n_RuntimeResourceSet { // : ResourceSet
		constexpr auto _resCache = 0x28; // Dictionary(string, ResourceLocator)
		constexpr auto _defaultReader = 0x30; // ResourceReader
		constexpr auto _caseInsensitiveTable = 0x38; // Dictionary(string, ResourceLocator)
		constexpr auto _haveReadFromReader = 0x40; // bool
	}

	namespace n_MainLoop.mLoopJobComplete {
		constexpr auto Array = 0x10; // IJobCompleteReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_MessageDictionary.DictionaryEnumerator { // : IDictionaryEnumerator
		constexpr auto _methodDictionary = 0x10; // MessageDictionary
		constexpr auto _hashtableEnum = 0x18; // IDictionaryEnumerator
		constexpr auto _posMethod = 0x20; // int
	}

	namespace n_XmlSchemaSimpleTypeList { // : XmlSchemaSimpleTypeContent
		constexpr auto itemTypeName = 0x10; // XmlQualifiedName
		constexpr auto itemType = 0x18; // XmlSchemaSimpleType
		constexpr auto baseItemType = 0x20; // XmlSchemaSimpleType
	}

	namespace n_NativeHeaderAttribute { // : Attribute
		constexpr auto (Header)k__BackingField = 0x10; // string
	}

	namespace n_ExtensionQuery { // : Query
		constexpr auto prefix = 0x18; // string
		constexpr auto name = 0x20; // string
		constexpr auto xsltContext = 0x28; // XsltContext
		constexpr auto queryIterator = 0x30; // ResetableIterator
	}

	namespace n_StreamReader { // : TextReader
		constexpr auto stream = 0x18; // Stream
		constexpr auto encoding = 0x20; // Encoding
		constexpr auto decoder = 0x28; // Decoder
		constexpr auto byteBuffer = 0x30; // byte[]
		constexpr auto charBuffer = 0x38; // char[]
		constexpr auto _preamble = 0x40; // byte[]
		constexpr auto charPos = 0x48; // int
		constexpr auto charLen = 0x4c; // int
		constexpr auto byteLen = 0x50; // int
		constexpr auto bytePos = 0x54; // int
		constexpr auto _maxCharsPerBuffer = 0x58; // int
		constexpr auto _detectEncoding = 0x5c; // bool
		constexpr auto _checkPreamble = 0x5d; // bool
		constexpr auto _isBlocked = 0x5e; // bool
		constexpr auto _closable = 0x5f; // bool
		constexpr auto _asyncReadTask = 0x60; // Task
	}

	namespace n_C4 { // : GadgetManager
		constexpr auto C4Obj = 0xd0; // Transform
		constexpr auto C4ThrownPrefab = 0xd8; // GameObject
		constexpr auto switchingEta = 0xe0; // float
		constexpr auto busy = 0xe4; // float
		constexpr auto etaThrow = 0xe8; // float
	}

	namespace n_NfaContentValidator { // : ContentValidator
		constexpr auto firstpos = 0x18; // BitSet
		constexpr auto followpos = 0x20; // BitSet[]
		constexpr auto symbols = 0x28; // SymbolsDictionary
		constexpr auto positions = 0x30; // Positions
		constexpr auto endMarkerPos = 0x38; // int
	}

	namespace n_MainMenu_PlayingFriend { // : MonoBehaviour
		constexpr auto Prefab = 0x18; // GameObject
		constexpr auto Parent = 0x20; // Transform
		constexpr auto pool = 0x28; // UIPool(MainMenu_PlayingFriend_Server)
		constexpr auto active = 0x30; // List(MainMenu_PlayingFriend_Server)
		constexpr auto mServers = 0x38; // Dictionary(IPEndPoint, MainMenu_PlayingFriend.Server)
		constexpr auto mServerList = 0x40; // List(MainMenu_PlayingFriend.Server)
		constexpr auto lastRefresh = 0x48; // float
	}

	namespace n_CookieCollection.CookieCollectionEnumerator { // : IEnumerator
		constexpr auto m_cookies = 0x10; // CookieCollection
		constexpr auto m_count = 0x18; // int
		constexpr auto m_index = 0x1c; // int
		constexpr auto m_version = 0x20; // int
	}

	namespace n_EmptyWebProxy { // : IWebProxy
		constexpr auto m_credentials = 0x10; // ICredentials
	}

	namespace n_UnionExpr { // : Query
		constexpr auto qy1 = 0x18; // Query
		constexpr auto qy2 = 0x20; // Query
		constexpr auto advance1 = 0x28; // bool
		constexpr auto advance2 = 0x29; // bool
		constexpr auto currentNode = 0x30; // XPathNavigator
		constexpr auto nextNode = 0x38; // XPathNavigator
	}

	namespace n_XmlRegisteredNonCachedStream { // : Stream
		constexpr auto stream = 0x28; // Stream
		constexpr auto downloadManager = 0x30; // XmlDownloadManager
		constexpr auto host = 0x38; // string
	}

	namespace n_WearableBelt { // : Wearable
		constexpr auto Category = 0x40; // BeltCategory
	}

	namespace n_GameScreen_SquadAbilityNotification { // : MonoBehaviour
		constexpr auto Keybinding = 0x18; // GameObject
		constexpr auto Special = 0x20; // GameScreen_SquadAbilityNotification_Item
		constexpr auto Strike = 0x28; // GameScreen_SquadAbilityNotification_Item
		constexpr auto Structure = 0x30; // GameScreen_SquadAbilityNotification_Item
		constexpr auto Supply = 0x38; // GameScreen_SquadAbilityNotification_Item
		constexpr auto mRects = 0x40; // RectTransform[]
		constexpr auto mSpecialActive = 0x48; // bool
		constexpr auto mStrikeActive = 0x49; // bool
		constexpr auto mStructureActive = 0x4a; // bool
		constexpr auto mSupplyActive = 0x4b; // bool
		constexpr auto mEnabled = 0x4c; // bool
		constexpr auto mCounter = 0x50; // float
		constexpr auto mLastOverlayCount = 0x54; // int
		constexpr auto mOnDeployScreen = 0x58; // bool
		constexpr auto mKeybindingEnabled = 0x59; // bool
		constexpr auto mButtonActive = 0x5a; // bool
	}

	namespace n_Gradient { // : IEquatable(Gradient)
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_Numeric10FacetsChecker { // : FacetsChecker
		constexpr auto maxValue = 0x10; // Decimal
		constexpr auto minValue = 0x20; // Decimal
	}

	namespace n_CollisionAlgorithmCreateFunc { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_NativeConditionalAttribute { // : Attribute
		constexpr auto (Condition)k__BackingField = 0x10; // string
		constexpr auto (StubReturnStatement)k__BackingField = 0x18; // string
		constexpr auto (Enabled)k__BackingField = 0x20; // bool
	}

	namespace n_MethodResponse { // : IMethodReturnMessage
		constexpr auto _methodName = 0x10; // string
		constexpr auto _uri = 0x18; // string
		constexpr auto _typeName = 0x20; // string
		constexpr auto _methodBase = 0x28; // MethodBase
		constexpr auto _returnValue = 0x30; // object
		constexpr auto _exception = 0x38; // Exception
		constexpr auto _methodSignature = 0x40; // Type[]
		constexpr auto _inArgInfo = 0x48; // ArgInfo
		constexpr auto _args = 0x50; // object[]
		constexpr auto _outArgs = 0x58; // object[]
		constexpr auto _callMsg = 0x60; // IMethodCallMessage
		constexpr auto _callContext = 0x68; // LogicalCallContext
		constexpr auto _targetIdentity = 0x70; // Identity
		constexpr auto ExternalProperties = 0x78; // IDictionary
		constexpr auto InternalProperties = 0x80; // IDictionary
	}

	namespace n_CliffsAlign { // : TransformComponentsSettings
		constexpr auto setRotation = 0x20; // Vector3
	}

	namespace n_TypeIdentifiers.Display { // : TypeNames.ATypeName
		constexpr auto displayName = 0x10; // string
		constexpr auto internal_name = 0x18; // string
	}

	namespace n_RendererHashGroup {
		constexpr auto Key = 0x10; // long
		constexpr auto FlagBufferRendererHandleListSet = 0x18; // bool
		constexpr auto BufferRendererHandleList = 0x20; // FastListA(RendererHandle)
		constexpr auto FlagItemBufferSet = 0x28; // bool
		constexpr auto ItemBuffer = 0x30; // ItemBuffer
	}

	namespace n_DebugUI.Vector2Field { // : DebugUI.Field(Vector2)
		constexpr auto incStep = 0x50; // float
		constexpr auto incStepMult = 0x54; // float
		constexpr auto decimals = 0x58; // int
	}

	namespace n_RendererHandle { // : IFastListItemA
		constexpr auto (FastListIndexA)k__BackingField = 0x10; // int
		constexpr auto isActive = 0x14; // bool
		constexpr auto forceRenderingOff = 0x15; // bool
		constexpr auto Mesh = 0x18; // Mesh
		constexpr auto Material = 0x20; // Material
		constexpr auto Matrix = 0x28; // Matrix4x4
		constexpr auto Hash = 0x68; // long
		constexpr auto Group = 0x70; // RendererHashGroup
		constexpr auto Bounds = 0x78; // Cull
		constexpr auto inCameraFrustum = 0x80; // bool
		constexpr auto HasShadowsFrustum = 0x81; // bool
		constexpr auto shadowMin = 0x84; // Vector3
		constexpr auto shadowMax = 0x90; // Vector3
	}

	namespace n_XmlCachedStream { // : MemoryStream
		constexpr auto uri = 0x50; // Uri
	}

	namespace n_BinaryWriter { // : IDisposable
		constexpr auto OutStream = 0x10; // Stream
		constexpr auto _buffer = 0x18; // byte[]
		constexpr auto _encoding = 0x20; // Encoding
		constexpr auto _encoder = 0x28; // Encoder
		constexpr auto _leaveOpen = 0x30; // bool
		constexpr auto _largeByteBuffer = 0x38; // byte[]
		constexpr auto _maxChars = 0x40; // int
	}

	namespace n_SchemaDeclBase {
		constexpr auto name = 0x10; // XmlQualifiedName
		constexpr auto prefix = 0x18; // string
		constexpr auto isDeclaredInExternal = 0x20; // bool
		constexpr auto presence = 0x24; // SchemaDeclBase.Use
		constexpr auto schemaType = 0x28; // XmlSchemaType
		constexpr auto datatype = 0x30; // XmlSchemaDatatype
		constexpr auto defaultValueRaw = 0x38; // string
		constexpr auto defaultValueTyped = 0x40; // object
		constexpr auto maxLength = 0x48; // long
		constexpr auto minLength = 0x50; // long
		constexpr auto values = 0x58; // List(string)
	}

	namespace n_MainMenu_InClan_List_Invites { // : MainMenu_InClan_List
		constexpr auto Prefab = 0x30; // GameObject
		constexpr auto Parent = 0x38; // Transform
		constexpr auto LoadingIcon = 0x40; // GameObject
		constexpr auto NoPermissionIcon = 0x48; // GameObject
		constexpr auto PageBar = 0x50; // GameObject
		constexpr auto AddBar = 0x58; // GameObject
		constexpr auto PageField = 0x60; // TMP_InputField
		constexpr auto ListMenu = 0x68; // GameObject
		constexpr auto CreationMenu = 0x70; // GameObject
		constexpr auto CreationSubMenu = 0x78; // GameObject
		constexpr auto CreationSubResultMenu = 0x80; // GameObject
		constexpr auto CreationSubLoading = 0x88; // GameObject
		constexpr auto ErrorText = 0x90; // TextMeshProUGUI
		constexpr auto Days = 0x98; // TMP_InputField
		constexpr auto Hours = 0xa0; // TMP_InputField
		constexpr auto Minutes = 0xa8; // TMP_InputField
		constexpr auto GeneratedCodeField = 0xb0; // TMP_InputField
		constexpr auto pool = 0xb8; // UIPool(MainMenu_InClan_List_Invite)
		constexpr auto active = 0xc0; // List(MainMenu_InClan_List_Invite)
		constexpr auto mWantsToUpdate = 0xc8; // bool
		constexpr auto mPageIndex = 0xcc; // int
		constexpr auto codes = 0xd0; // List(ClanInviteCode)
		constexpr auto hasPermission = 0xd8; // bool
		constexpr auto didCreateCode = 0xd9; // bool
	}

	namespace n_UniversalRenderPipelineEditorResources.MaterialResources {
		constexpr auto lit = 0x10; // Material
		constexpr auto particleLit = 0x18; // Material
		constexpr auto terrainLit = 0x20; // Material
	}

	namespace n_RenderObjects.FilterSettings {
		constexpr auto RenderQueueType = 0x10; // RenderQueueType
		constexpr auto LayerMask = 0x14; // LayerMask
		constexpr auto PassNames = 0x18; // string[]
	}

	namespace n_CADMethodReturnMessage { // : CADMessageBase
		constexpr auto _returnValue = 0x38; // object
		constexpr auto _exception = 0x40; // CADArgHolder
		constexpr auto _sig = 0x48; // Type[]
	}

	namespace n_HorizontalListUpdater { // : MonoBehaviour
		constexpr auto component = 0x18; // HorizontalLayoutGroup
		constexpr auto spacing = 0x20; // float
		constexpr auto actionFrame = 0x24; // int
		constexpr auto (TickIndex8)k__BackingField = 0x28; // int
	}

	namespace n_RenderObjects { // : ScriptableRendererFeature
		constexpr auto settings = 0x20; // RenderObjects.RenderObjectsSettings
		constexpr auto renderObjectsPass = 0x28; // RenderObjectsPass
	}

	namespace n_GImpactQuantizedBvh { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _primitiveManager = 0x18; // PrimitiveManagerBase
	}

	namespace n_CLSCompliantAttribute { // : Attribute
		constexpr auto m_compliant = 0x10; // bool
	}

	namespace n_ObjectMouseRotationSettings {
		constexpr auto mouseSensitivity = 0x10; // float
	}

	namespace n_Encoding.DefaultDecoder { // : Decoder
		constexpr auto m_encoding = 0x20; // Encoding
		constexpr auto m_hasInitializedEncoding = 0x28; // bool
	}

	namespace n_DtdParser.UndeclaredNotation {
		constexpr auto name = 0x10; // string
		constexpr auto lineNo = 0x18; // int
		constexpr auto linePos = 0x1c; // int
		constexpr auto next = 0x20; // DtdParser.UndeclaredNotation
	}

	namespace n_SquadManager { // : MonoBehaviour
		constexpr auto TeamASquads = 0x18; // Squad[]
		constexpr auto TeamBSquads = 0x20; // Squad[]
	}

	namespace n_Encoding { // : ICloneable
		constexpr auto m_codePage = 0x10; // int
		constexpr auto dataItem = 0x18; // CodePageDataItem
		constexpr auto m_deserializedFromEverett = 0x20; // bool
		constexpr auto m_isReadOnly = 0x21; // bool
		constexpr auto encoderFallback = 0x28; // EncoderFallback
		constexpr auto decoderFallback = 0x30; // DecoderFallback
	}

	namespace n_ObjectMapInfo {
		constexpr auto objectId = 0x10; // int
		constexpr auto numMembers = 0x14; // int
		constexpr auto memberNames = 0x18; // string[]
		constexpr auto memberTypes = 0x20; // Type[]
	}

	namespace n_ValueNoiseCPU { // : NoiseCPU
		constexpr auto (Perm)k__BackingField = 0x28; // PermutationTable
	}

	namespace n_GameScreen_Binoculars { // : MonoBehaviour
		constexpr auto Canvas = 0x18; // CanvasGroup
		constexpr auto RangeFinderCanvas = 0x20; // CanvasGroup
		constexpr auto RangeFinderLabel = 0x28; // TextMeshProUGUI
	}

	namespace n_FileNotFoundException { // : IOException
		constexpr auto _fileName = 0x90; // string
		constexpr auto _fusionLog = 0x98; // string
	}

	namespace n_AngularJoint.Specs { // : Joint.Specs
		constexpr auto _iControl = 0x18; // AngularJoint.IControl
	}

	namespace n_ClientIdentity { // : Identity
		constexpr auto _proxyReference = 0x48; // WeakReference
	}

	namespace n_CFProxy {
		constexpr auto settings = 0x10; // CFDictionary
	}

	namespace n_DebugUIHandlerValue { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueLabel = 0x60; // Text
		constexpr auto m_Field = 0x68; // DebugUI.Value
		constexpr auto m_Timer = 0x70; // float
	}

	namespace n_ToolMedicKit { // : GadgetManager
		constexpr auto Body = 0xd0; // MeshRenderer
		constexpr auto MedicKitPrefab = 0xd8; // GameObject
		constexpr auto actionHolding = 0xe0; // ToolMedicKit.action
		constexpr auto nextAbility = 0xe4; // float
		constexpr auto etaToThrow = 0xe8; // float
		constexpr auto switchBack = 0xec; // bool
		constexpr auto lastHeal = 0xf0; // float
		constexpr auto otherPlayer = 0xf8; // PlayerNetwork
	}

	namespace n_GamemodeResources { // : ScriptableObject
		constexpr auto GunGameResources = 0x18; // GamemodeResources.GunGame
		constexpr auto SuicideRushResources = 0x20; // GamemodeResources.SuicideRush
		constexpr auto CatchGameResources = 0x28; // GamemodeResources.CatchGame
	}

	namespace n_TMP_UpdateManager {
		constexpr auto m_LayoutQueueLookup = 0x10; // HashSet(int)
		constexpr auto m_LayoutRebuildQueue = 0x18; // List(TMP_Text)
		constexpr auto m_GraphicQueueLookup = 0x20; // HashSet(int)
		constexpr auto m_GraphicRebuildQueue = 0x28; // List(TMP_Text)
		constexpr auto m_InternalUpdateLookup = 0x30; // HashSet(int)
		constexpr auto m_InternalUpdateQueue = 0x38; // List(TMP_Text)
		constexpr auto m_CullingUpdateLookup = 0x40; // HashSet(int)
		constexpr auto m_CullingUpdateQueue = 0x48; // List(TMP_Text)
	}

	namespace n_GImpactMeshShapePart { // : GImpactShapeInterface
		constexpr auto _gImpactTrimeshPrimitiveManager = 0x30; // TrimeshPrimitiveManager
	}

	namespace n_NativeWritableSelfAttribute { // : Attribute
		constexpr auto (WritableSelf)k__BackingField = 0x10; // bool
	}

	namespace n_CUIColorPicker { // : MonoBehaviour
		constexpr auto _color = 0x18; // Color
		constexpr auto _onValueChange = 0x28; // Action(Color)
		constexpr auto _update = 0x30; // Action
	}

	namespace n_ShadowsMidtonesHighlights { // : VolumeComponent
		constexpr auto shadows = 0x38; // Vector4Parameter
		constexpr auto midtones = 0x40; // Vector4Parameter
		constexpr auto highlights = 0x48; // Vector4Parameter
		constexpr auto shadowsStart = 0x50; // MinFloatParameter
		constexpr auto shadowsEnd = 0x58; // MinFloatParameter
		constexpr auto highlightsStart = 0x60; // MinFloatParameter
		constexpr auto highlightsEnd = 0x68; // MinFloatParameter
	}

	namespace n_MonoMethod { // : RuntimeMethodInfo
		constexpr auto mhandle = 0x10; // IntPtr
		constexpr auto name = 0x18; // string
		constexpr auto reftype = 0x20; // Type
	}

	namespace n_BulletVisual { // : MonoBehaviour
		constexpr auto Index = 0x18; // int
	}

	namespace n_HorizontalList {
		constexpr auto ConstHeight = 0x10; // int
		constexpr auto elements = 0x18; // List(RectTransform)
		constexpr auto ToRight = 0x20; // bool
		constexpr auto Spacing = 0x24; // float
		constexpr auto lerp = 0x28; // bool
		constexpr auto lerpSpeed = 0x2c; // float
	}

	namespace n_ChannelInfo { // : IChannelInfo
		constexpr auto channelData = 0x10; // object[]
	}

	namespace n_Random {
		constexpr auto inext = 0x10; // int
		constexpr auto inextp = 0x14; // int
		constexpr auto SeedArray = 0x18; // int[]
	}

	namespace n_CultureAwareComparer { // : StringComparer
		constexpr auto _compareInfo = 0x10; // CompareInfo
		constexpr auto _ignoreCase = 0x18; // bool
		constexpr auto _options = 0x1c; // CompareOptions
	}

	namespace n_DestructivePool.RuntimeObject { // : IFastListItemA
		constexpr auto (FastListIndexA)k__BackingField = 0x10; // int
		constexpr auto worldPosition = 0x14; // Vector3
		constexpr auto rigidFlags = 0x20; // bool[]
		constexpr auto rigids = 0x28; // RigidbodyInterpolationBehaviour[]
		constexpr auto tranfs = 0x30; // Transform[]
		constexpr auto smoothInterpolation = 0x38; // bool
		constexpr auto dieTime = 0x3c; // float
		constexpr auto worldObject = 0x40; // GameObject
		constexpr auto pool = 0x48; // DestructivePool.ObjectStructure
	}

	namespace n_MainRoom { // : MonoBehaviour
		constexpr auto MainCanvas = 0x18; // Canvas
		constexpr auto MainOverlay = 0x20; // GameObject
	}

	namespace n_OrdinalComparer { // : StringComparer
		constexpr auto _ignoreCase = 0x10; // bool
	}

	namespace n_HorizontalOrVerticalLayoutGroup { // : LayoutGroup
		constexpr auto m_Spacing = 0x58; // float
		constexpr auto m_ChildForceExpandWidth = 0x5c; // bool
		constexpr auto m_ChildForceExpandHeight = 0x5d; // bool
		constexpr auto m_ChildControlWidth = 0x5e; // bool
		constexpr auto m_ChildControlHeight = 0x5f; // bool
		constexpr auto m_ChildScaleWidth = 0x60; // bool
		constexpr auto m_ChildScaleHeight = 0x61; // bool
	}

	namespace n_GameScreen_SquadAbilityMenu { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto mItem = 0x20; // GameScreen_SquadAbilityMenuItem
		constexpr auto mItemAbility = 0x28; // GameScreen_SquadAbilityMenu_AbilityItem
		constexpr auto mCanvas = 0x30; // CanvasGroup
		constexpr auto mActiveTime = 0x38; // float
		constexpr auto mIsRegistered = 0x3c; // bool
		constexpr auto mMenuActiveTime = 0x40; // float
		constexpr auto mAbilityMenuActiveTime = 0x44; // float
		constexpr auto SquadPoints = 0x48; // TextMeshProUGUI
		constexpr auto MenuCanvas = 0x50; // CanvasGroup
		constexpr auto Menu = 0x58; // RectTransform
		constexpr auto Title = 0x60; // TextMeshProUGUI
		constexpr auto Desc = 0x68; // TextMeshProUGUI
		constexpr auto Icon = 0x70; // RawImage
		constexpr auto AbilityMenuCanvas = 0x78; // CanvasGroup
		constexpr auto AbilityMenu = 0x80; // RectTransform
		constexpr auto AbilityTitle = 0x88; // TextMeshProUGUI
		constexpr auto AbilityDesc = 0x90; // TextMeshProUGUI
		constexpr auto AbilityPoint = 0x98; // TextMeshProUGUI
		constexpr auto AbilityErrDesc = 0xa0; // TextMeshProUGUI
		constexpr auto AbilityErrCanvas = 0xa8; // CanvasGroup
		constexpr auto AbilityIcon = 0xb0; // RawImage
		constexpr auto MainMenu = 0xb8; // GameObject
		constexpr auto MenuSpecial = 0xc0; // GameObject
		constexpr auto MenuStrike = 0xc8; // GameObject
		constexpr auto MenuStructure = 0xd0; // GameObject
		constexpr auto MenuSupply = 0xd8; // GameObject
		constexpr auto mLastSqPoints = 0xe0; // int
	}

	namespace n_XmlNamedNodeMap.SmallXmlNodeList.SingleObjectEnumerator { // : IEnumerator
		constexpr auto loneValue = 0x10; // object
		constexpr auto position = 0x18; // int
	}

	namespace n_GameScreen_Dragging { // : MonoBehaviour
		constexpr auto Main = 0x18; // RectTransform
		constexpr auto State1 = 0x20; // CanvasGroup
		constexpr auto State2 = 0x28; // CanvasGroup
		constexpr auto State3 = 0x30; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
	}

	namespace n_PlayerClan {
		constexpr auto inClan = 0x10; // bool
		constexpr auto ClanID = 0x18; // ulong
		constexpr auto ClanRank = 0x20; // ClanRank
		constexpr auto EXPContribute = 0x24; // Pint
	}

	namespace n_ThreadPoolWorkQueueThreadLocals {
		constexpr auto workQueue = 0x10; // ThreadPoolWorkQueue
		constexpr auto workStealingQueue = 0x18; // ThreadPoolWorkQueue.WorkStealingQueue
		constexpr auto random = 0x20; // Random
	}

	namespace n_Pool.Muzzle {
		constexpr auto MuzzleFlashesRemote = 0x10; // GameObject[]
		constexpr auto MuzzleFlashesLocal = 0x18; // GameObject[]
		constexpr auto TankMuzzle = 0x20; // GameObject
		constexpr auto ApcMuzzle = 0x28; // GameObject
	}

	namespace n_Array.ArrayEnumerator { // : IEnumerator
		constexpr auto _array = 0x10; // Array
		constexpr auto _index = 0x18; // int
		constexpr auto _endIndex = 0x1c; // int
	}

	namespace n_BinaryCrossAppDomainString {
		constexpr auto objectId = 0x10; // int
		constexpr auto value = 0x14; // int
	}

	namespace n_NetworkClient {
		constexpr auto isConnected = 0x10; // bool
		constexpr auto ServerConnection = 0x18; // Connection
		constexpr auto ServerStreamBuffer = 0x20; // ServerHandler.StreamEndPoint
		constexpr auto (ServerRuntimeErrorCount)k__BackingField = 0x28; // int
		constexpr auto ServerLastTeamChangeTime = 0x2c; // float
		constexpr auto ServerLastChangedSeatTime = 0x30; // float
		constexpr auto ServerLastPingTime = 0x34; // float
		constexpr auto ServerStatsSaved = 0x38; // bool
		constexpr auto ServerFreezed = 0x39; // bool
		constexpr auto LastSpawnTime = 0x3c; // float
		constexpr auto Stats = 0x40; // PlayerStats
		constexpr auto BelongGroup = 0x48; // PlayerTeamSquadRole
		constexpr auto Nickname = 0x50; // string
		constexpr auto FullName = 0x58; // string
		constexpr auto ScoreboardName = 0x60; // string
		constexpr auto ChatName = 0x68; // string
		constexpr auto RoomID = 0x70; // byte
		constexpr auto RoundEXP = 0x74; // uint
		constexpr auto isMe = 0x78; // bool
		constexpr auto isServer = 0x79; // bool
		constexpr auto isBot = 0x7a; // bool
		constexpr auto IsSteamFriend = 0x7b; // bool
		constexpr auto IsVoiceChatMuted = 0x7c; // bool
		constexpr auto isClanFriend = 0x7d; // bool
		constexpr auto Voice = 0x80; // PlayerVoice
		constexpr auto State = 0x88; // PlayerNetworkState
	}

	namespace n_bFile {
		constexpr auto _chunks = 0x10; // List(ChunkInd)
		constexpr auto _dataStart = 0x18; // long
		constexpr auto _fileBuffer = 0x20; // byte[]
		constexpr auto _fileDna = 0x28; // Dna
		constexpr auto _flags = 0x30; // FileFlags
		constexpr auto _headerString = 0x38; // string
		constexpr auto _libPointers = 0x40; // Dictionary(long, byte[])
		constexpr auto _memoryDna = 0x48; // Dna
		constexpr auto _version = 0x50; // int
	}

	namespace n_HybridDictionary { // : IDictionary
		constexpr auto list = 0x10; // ListDictionary
		constexpr auto hashtable = 0x18; // Hashtable
		constexpr auto caseInsensitive = 0x20; // bool
	}

	namespace n_Display {
		constexpr auto nativeDisplay = 0x10; // IntPtr
	}

	namespace n_SphereSource {
		constexpr auto m_radius = 0x10; // float
		constexpr auto m_rayIndex = 0x14; // int
		constexpr auto m_nonhit = 0x18; // int
	}

	namespace n_PolyhedralConvexShape { // : ConvexInternalShape
		constexpr auto _convexPolyhedron = 0x28; // ConvexPolyhedron
	}

	namespace n_PlayerEditorConnectionEvents.MessageTypeSubscribers {
		constexpr auto m_messageTypeId = 0x10; // string
		constexpr auto subscriberCount = 0x18; // int
		constexpr auto messageCallback = 0x20; // PlayerEditorConnectionEvents.MessageEvent
	}

	namespace n_TextureToolsSettings {
		constexpr auto targetStrength = 0x10; // float
		constexpr auto opacity = 0x14; // float
		constexpr auto sharpenStrength = 0x18; // float
		constexpr auto blurStrength = 0x1c; // int
	}

	namespace n_Flare { // : MonoBehaviour
		constexpr auto MinDistance = 0x18; // float
		constexpr auto MaxDistance = 0x1c; // float
		constexpr auto Intensity = 0x20; // float
		constexpr auto Light = 0x28; // Light
		constexpr auto IntensityAnimation = 0x30; // AnimationCurve
		constexpr auto AwakeAnimation = 0x38; // AnimationCurve
		constexpr auto (lifeTime)k__BackingField = 0x40; // float
		constexpr auto (inPool)k__BackingField = 0x44; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x48; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x4c; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x50; // bool
		constexpr auto (FastListIndexA)k__BackingField = 0x54; // int
		constexpr auto (Position)k__BackingField = 0x58; // Vector3
		constexpr auto (RaycastSphere)k__BackingField = 0x68; // SphereSource
		constexpr auto AudioSource = 0x70; // DistanceBasedAudioSource
		constexpr auto mLightIntensity = 0x78; // float
		constexpr auto mDeadTime = 0x7c; // float
		constexpr auto mOffset = 0x80; // float
		constexpr auto mSpawnTime = 0x84; // float
	}

	namespace n_AttachmentManager { // : MonoBehaviour
		constexpr auto MainTopControll = 0x18; // Transform
		constexpr auto ShotPoint = 0x20; // Transform
		constexpr auto ShotParticle = 0x28; // ParticleSystem
		constexpr auto ShellPoint = 0x30; // ParticleSystem
		constexpr auto UseCantedAsSightIfNotExist = 0x38; // bool
		constexpr auto Parent_SightParent = 0x40; // Transform
		constexpr auto Parent_CantedParent = 0x48; // Transform
		constexpr auto Parent_CantedFront = 0x50; // Transform
		constexpr auto Parent_Barrel = 0x58; // Transform
		constexpr auto Parent_SideRails = 0x60; // Transform
		constexpr auto Parent_UnderRails = 0x68; // Transform
		constexpr auto IronSight = 0x70; // GameObject
		constexpr auto ExtraIronSight = 0x78; // GameObject[]
		constexpr auto IronSightPoint = 0x80; // Transform
		constexpr auto PistolBoltParent = 0x88; // Transform
		constexpr auto OnIronSightObjects = 0x90; // GameObject[]
		constexpr auto OnNonIronSightObjects = 0x98; // GameObject[]
		constexpr auto DefaultLowerOnIron = 0xa0; // float
		constexpr auto DefaultLowerOnNonIron = 0xa4; // float
		constexpr auto BlurActive = 0xa8; // bool
		constexpr auto BlurDistance = 0xac; // float
		constexpr auto BlurLenght = 0xb0; // float
		constexpr auto (Item)k__BackingField = 0xb8; // AWeapon
		constexpr auto (Attachments)k__BackingField = 0xc0; // WeaponAttachments
		constexpr auto (isLocal)k__BackingField = 0xc8; // bool
		constexpr auto (MainIronSight)k__BackingField = 0xd0; // IronSight
		constexpr auto (MainNightSight)k__BackingField = 0xd8; // NightSight
		constexpr auto (MainSight)k__BackingField = 0xe0; // Scope
		constexpr auto (TopSight)k__BackingField = 0xe8; // Scope
		constexpr auto (Barrel)k__BackingField = 0xf0; // Barrel
		constexpr auto (CantedSight)k__BackingField = 0xf8; // CantedSight
		constexpr auto (UnderRail)k__BackingField = 0x100; // UnderRail
		constexpr auto (SideRail)k__BackingField = 0x108; // SideRail
		constexpr auto HasSight = 0x110; // bool
		constexpr auto HasTopSight = 0x111; // bool
		constexpr auto HasCantedSight = 0x112; // bool
		constexpr auto HasBarrel = 0x113; // bool
		constexpr auto HasUnderRail = 0x114; // bool
		constexpr auto HasSideRail = 0x115; // bool
		constexpr auto (Sight)k__BackingField = 0x118; // SightOrder
		constexpr auto DefaultPosition = 0x11c; // Vector3
		constexpr auto (WeaponDepth)k__BackingField = 0x128; // float
		constexpr auto NightVisionAimOffset = 0x12c; // Vector3
		constexpr auto MainSightAimPosition = 0x138; // Vector3
		constexpr auto TopSightAimPosition = 0x144; // Vector3
		constexpr auto CantedSightAimPosition = 0x150; // Vector3
		constexpr auto NightAimPosition = 0x15c; // Vector3
		constexpr auto NightFov = 0x168; // float
		constexpr auto MainSightFov = 0x16c; // float
		constexpr auto TopSightFov = 0x170; // float
		constexpr auto CantedSightFov = 0x174; // float
		constexpr auto sightsList = 0x178; // List(IScope)
		constexpr auto MainTransform = 0x180; // Transform
		constexpr auto Weapon = 0x188; // WeaponManager
	}

	namespace n_ScriptableRenderer.RenderingFeatures {
		constexpr auto (cameraStacking)k__BackingField = 0x10; // bool
	}

	namespace n_RangeAttribute { // : PropertyAttribute
		constexpr auto min = 0x18; // float
		constexpr auto max = 0x1c; // float
	}

	namespace n_MainMenu_Beta { // : MonoBehaviour
		constexpr auto Child = 0x18; // GameObject
		constexpr auto Menus = 0x20; // GameObject[]
	}

	namespace n_CallContextSecurityData { // : ICloneable
		constexpr auto _principal = 0x10; // IPrincipal
	}

	namespace n_TrackAsset { // : PlayableAsset
		constexpr auto m_Version = 0x18; // int
		constexpr auto m_AnimClip = 0x20; // AnimationClip
		constexpr auto m_Locked = 0x28; // bool
		constexpr auto m_Muted = 0x29; // bool
		constexpr auto m_CustomPlayableFullTypename = 0x30; // string
		constexpr auto m_Curves = 0x38; // AnimationClip
		constexpr auto m_Parent = 0x40; // PlayableAsset
		constexpr auto m_Children = 0x48; // List(ScriptableObject)
		constexpr auto m_ItemsHash = 0x50; // int
		constexpr auto m_ClipsCache = 0x58; // TimelineClip[]
		constexpr auto m_Start = 0x60; // DiscreteTime
		constexpr auto m_End = 0x68; // DiscreteTime
		constexpr auto m_CacheSorted = 0x70; // bool
		constexpr auto m_SupportsNotifications = 0x71; // Nullable(bool)
		constexpr auto m_ChildTrackCache = 0x78; // IEnumerable(TrackAsset)
		constexpr auto m_Clips = 0x80; // List(TimelineClip)
		constexpr auto m_Markers = 0x88; // MarkerList
	}

	namespace n_RegexFC {
		constexpr auto _cc = 0x10; // RegexCharClass
		constexpr auto _nullable = 0x18; // bool
		constexpr auto _caseInsensitive = 0x19; // bool
	}

	namespace n_ThunderComponent { // : NatureComponent
		constexpr auto Sun = 0x38; // Light
		constexpr auto Skybox = 0x40; // Material
		constexpr auto DefaultSunIntensity = 0x48; // float
		constexpr auto DefaultSkyboxExposure = 0x4c; // float
		constexpr auto SunOffset = 0x50; // float
		constexpr auto SkyboxOffset = 0x54; // float
		constexpr auto MinThunderDelay = 0x58; // float
		constexpr auto MaxThunderDelay = 0x5c; // float
		constexpr auto SoundPool = 0x60; // Transform
		constexpr auto playlist = 0x68; // FastListA(PlayingThunder)
		constexpr auto pool = 0x70; // Queue(AudioSource)
		constexpr auto nextThunder = 0x78; // float
		constexpr auto records = 0x80; // Dictionary(byte, LO(int))
	}

	namespace n_Prefabs {
		constexpr auto Player = 0x10; // GameObject
		constexpr auto OfflinePlayer = 0x18; // GameObject
		constexpr auto FirstPerson = 0x20; // GameObject
		constexpr auto ThirdPerson = 0x28; // GameObject
		constexpr auto ThirdPersonRagdoll = 0x30; // GameObject
		constexpr auto SafeSpawn = 0x38; // GameObject
		constexpr auto Bound = 0x40; // GameObject
		constexpr auto BuildingAudioSource = 0x48; // GameObject
		constexpr auto StructureDebris = 0x50; // GameObject
		constexpr auto ThpBodyMesh = 0x58; // Mesh
		constexpr auto Water = 0x60; // AGround
		constexpr auto Wood = 0x68; // AGround
		constexpr auto SteeringWheelFP = 0x70; // GameObject
		constexpr auto SpecCamera = 0x78; // GameObject
		constexpr auto Rope = 0x80; // GameObject
		constexpr auto ZiplineRope = 0x88; // GameObject
	}

	namespace n_AnimationEvent {
		constexpr auto m_Time = 0x10; // float
		constexpr auto m_FunctionName = 0x18; // string
		constexpr auto m_StringParameter = 0x20; // string
		constexpr auto m_ObjectReferenceParameter = 0x28; // Object
		constexpr auto m_FloatParameter = 0x30; // float
		constexpr auto m_IntParameter = 0x34; // int
		constexpr auto m_MessageOptions = 0x38; // int
		constexpr auto m_Source = 0x3c; // AnimationEventSource
		constexpr auto m_StateSender = 0x40; // AnimationState
		constexpr auto m_AnimatorStateInfo = 0x48; // AnimatorStateInfo
		constexpr auto m_AnimatorClipInfo = 0x6c; // AnimatorClipInfo
	}

	namespace n_XmlUrlResolver { // : XmlResolver
		constexpr auto _credentials = 0x10; // ICredentials
		constexpr auto _proxy = 0x18; // IWebProxy
		constexpr auto _cachePolicy = 0x20; // RequestCachePolicy
	}

	namespace n_DistanceBasedAudioSource { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto AudioSource = 0x20; // AudioSource
		constexpr auto StartAsEnabled = 0x28; // bool
		constexpr auto (Position)k__BackingField = 0x2c; // Vector3
		constexpr auto (IsAudioEnabled)k__BackingField = 0x38; // bool
		constexpr auto (MaxDistance)k__BackingField = 0x3c; // float
		constexpr auto (DistanceToCameraSqr)k__BackingField = 0x40; // float
		constexpr auto mMaxDistanceSqr = 0x44; // float
		constexpr auto mAudioEnabled = 0x48; // bool
		constexpr auto shouldBeEnabled = 0x49; // bool
	}

	namespace n_TerrainUtility.TerrainMap {
		constexpr auto m_patchSize = 0x10; // Vector3
		constexpr auto m_errorCode = 0x1c; // TerrainUtility.TerrainMap.ErrorCode
		constexpr auto m_terrainTiles = 0x20; // Dictionary(TerrainUtility.TerrainMap.TileCoord, Terrain)
	}

	namespace n_FullScreenQuadPass { // : ScriptableRenderPass
		constexpr auto m_ProfilerTag = 0x68; // string
		constexpr auto m_Settings = 0x70; // FullScreenQuad.FullScreenQuadSettings
	}

	namespace n_WorldAnchor { // : Component
		constexpr auto OnTrackingChanged = 0x18; // WorldAnchor.OnTrackingChangedDelegate
	}

	namespace n_DirectoryInfo { // : FileSystemInfo
		constexpr auto current = 0x60; // string
		constexpr auto parent = 0x68; // string
	}

	namespace n_AsyncMethodBuilderCore.MoveNextRunner {
		constexpr auto m_context = 0x10; // ExecutionContext
		constexpr auto m_stateMachine = 0x18; // IAsyncStateMachine
	}

	namespace n_SharedReference {
		constexpr auto _ref = 0x10; // WeakReference
		constexpr auto _locked = 0x18; // int
	}

	namespace n_GimBvhData { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_X509ChainElementEnumerator { // : IEnumerator
		constexpr auto enumerator = 0x10; // IEnumerator
	}

	namespace n_NodePtrArrayEnumerator { // : IEnumerator(Node)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // IList(Node)
	}

	namespace n_AlignedSoftBodyArrayDebugView {
		constexpr auto _array = 0x10; // AlignedSoftBodyArray
	}

	namespace n_CacheOutputQuery { // : Query
		constexpr auto input = 0x18; // Query
		constexpr auto outputBuffer = 0x20; // List(XPathNavigator)
	}

	namespace n_CharacterPool.ThpPool {
		constexpr auto pool = 0x10; // Queue(THPController)
	}

	namespace n_SuicideRushSettings { // : GamemodeSettingsBase
		constexpr auto (SuicideRush_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (SuicideRush_Tickets)k__BackingField = 0x150; // GamemodeVariable(int)
	}

	namespace n_MyInternalTriangleIndexCallback { // : InternalTriangleIndexCallback
		constexpr auto _colShape = 0x20; // CompoundShape
		constexpr auto _depth = 0x28; // float
		constexpr auto _meshShape = 0x30; // GImpactMeshShape
	}

	namespace n_CharacterPool.PlayerPool {
		constexpr auto pool = 0x10; // Queue(PlayerNetwork)
	}

	namespace n_MapWorldBehaviour { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto FixedPosition = 0x1c; // bool
		constexpr auto FixedRotation = 0x1d; // bool
		constexpr auto FixedSize = 0x1e; // bool
		constexpr auto IconSize = 0x20; // float
		constexpr auto (IsRented)k__BackingField = 0x24; // bool
		constexpr auto (IsActive)k__BackingField = 0x25; // bool
		constexpr auto (MapUIInstance)k__BackingField = 0x28; // MapUIBehaviour
		constexpr auto mDefaultSize = 0x30; // Vector2
		constexpr auto mSize = 0x38; // float
		constexpr auto mLockedMapSize = 0x3c; // float
	}

	namespace n_NameObjectCollectionBase { // : ICollection
		constexpr auto _readOnly = 0x10; // bool
		constexpr auto _entriesArray = 0x18; // ArrayList
		constexpr auto _keyComparer = 0x20; // IEqualityComparer
		constexpr auto _entriesTable = 0x28; // Hashtable
		constexpr auto _nullKeyEntry = 0x30; // NameObjectCollectionBase.NameObjectEntry
		constexpr auto _serializationInfo = 0x38; // SerializationInfo
		constexpr auto _version = 0x40; // int
	}

	namespace n_MonoAsyncCall {
		constexpr auto msg = 0x10; // object
		constexpr auto cb_method = 0x18; // IntPtr
		constexpr auto cb_target = 0x20; // object
		constexpr auto state = 0x28; // object
		constexpr auto res = 0x30; // object
		constexpr auto out_args = 0x38; // object
	}

	namespace n_ScatterSettings {
		constexpr auto scatterAlgorithm = 0x10; // ScatterAlgorithm
		constexpr auto globalSpawnType = 0x14; // GlobalSpawnType
		constexpr auto numberOfCluster = 0x18; // int
		constexpr auto minMaxRange = 0x1c; // bool
		constexpr auto maxClusterСhecks = 0x20; // int
		constexpr auto minClusterСhecks = 0x24; // int
		constexpr auto maxSeedDistance = 0x28; // float
		constexpr auto minSeedDistance = 0x2c; // float
		constexpr auto numberOfChecks = 0x30; // int
		constexpr auto randomisationType = 0x34; // RandomisationType
		constexpr auto uniformGrid = 0x38; // bool
		constexpr auto gridStep = 0x3c; // Vector2
		constexpr auto gridAngle = 0x44; // float
		constexpr auto vastness = 0x48; // float
		constexpr auto visualOrigin = 0x4c; // Vector3
		constexpr auto onlyOneCheck = 0x58; // bool
		constexpr auto minMaxSlider = 0x59; // bool
		constexpr auto instance = 0x5c; // int
		constexpr auto minChecks = 0x60; // int
		constexpr auto maxChecks = 0x64; // int
	}

	namespace n_LayoutGroup { // : UIBehaviour
		constexpr auto m_Padding = 0x18; // RectOffset
		constexpr auto m_ChildAlignment = 0x20; // TextAnchor
		constexpr auto m_Rect = 0x28; // RectTransform
		constexpr auto m_Tracker = 0x30; // DrivenRectTransformTracker
		constexpr auto m_TotalMinSize = 0x34; // Vector2
		constexpr auto m_TotalPreferredSize = 0x3c; // Vector2
		constexpr auto m_TotalFlexibleSize = 0x44; // Vector2
		constexpr auto m_RectChildren = 0x50; // List(RectTransform)
	}

	namespace n_BindingBehaviour { // : OptionsElement
		constexpr auto isDefaultAxisA = 0x20; // bool
		constexpr auto isDefaultAxisB = 0x21; // bool
		constexpr auto DefaultValueA = 0x24; // KeyCode
		constexpr auto DefaultValueB = 0x28; // KeyCode
		constexpr auto DefaultAxisA = 0x2c; // InputAxis
		constexpr auto DefaultAxisB = 0x30; // InputAxis
		constexpr auto defaultAxisAPositive = 0x34; // bool
		constexpr auto defaultAxisBPositive = 0x35; // bool
		constexpr auto BinderA = 0x38; // Binding
		constexpr auto BinderB = 0x40; // Binding
	}

	namespace n_HLSLArray { // : Attribute
		constexpr auto arraySize = 0x10; // int
		constexpr auto elementType = 0x18; // Type
	}

	namespace n_DynamicResolutionHandler {
		constexpr auto m_Enabled = 0x10; // bool
		constexpr auto m_MinScreenFraction = 0x14; // float
		constexpr auto m_MaxScreenFraction = 0x18; // float
		constexpr auto m_CurrentFraction = 0x1c; // float
		constexpr auto m_PrevFraction = 0x20; // float
		constexpr auto m_ForcingRes = 0x24; // bool
		constexpr auto m_CurrentCameraRequest = 0x25; // bool
		constexpr auto m_ForceSoftwareFallback = 0x26; // bool
		constexpr auto m_PrevHWScaleWidth = 0x28; // float
		constexpr auto m_PrevHWScaleHeight = 0x2c; // float
		constexpr auto m_LastScaledSize = 0x30; // Vector2Int
		constexpr auto m_ScalerType = 0x38; // DynamicResScalePolicyType
		constexpr auto cachedOriginalSize = 0x3c; // Vector2Int
		constexpr auto (filter)k__BackingField = 0x44; // DynamicResUpscaleFilter
		constexpr auto type = 0x45; // DynamicResolutionType
		constexpr auto m_DynamicResMethod = 0x48; // PerformDynamicRes
	}

	namespace n_BotBehaviour { // : MonoBehaviour
		constexpr auto bot = 0x18; // BotPlayer
		constexpr auto playerNetwork = 0x20; // PlayerNetwork
		constexpr auto ForceDeathMode = 0x28; // bool
		constexpr auto ForceKill = 0x29; // bool
		constexpr auto ForceGiveUp = 0x2a; // bool
		constexpr auto ForceRevive = 0x2b; // bool
		constexpr auto giveUpTimer = 0x2c; // float
	}

	namespace n_BroadphaseInterface { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _overlappingPairCache = 0x18; // OverlappingPairCache
		constexpr auto _worldRefs = 0x20; // List(CollisionWorld)
		constexpr auto _worldDeferredCleanup = 0x28; // bool
	}

	namespace n_ToggleBehaviour { // : OptionsElement
		constexpr auto DefaultValue = 0x20; // bool
		constexpr auto Toggle = 0x28; // Toggle
		constexpr auto Dependeds = 0x30; // GameObject[]
		constexpr auto OnToggleOn = 0x38; // UnityEvent
		constexpr auto OnToggleOff = 0x40; // UnityEvent
		constexpr auto AffectedBySettings = 0x48; // bool
		constexpr auto Ultra = 0x49; // bool
		constexpr auto High = 0x4a; // bool
		constexpr auto Medium = 0x4b; // bool
		constexpr auto Low = 0x4c; // bool
		constexpr auto Potato = 0x4d; // bool
	}

	namespace n_ThreadPoolWorkQueue.QueueSegment {
		constexpr auto nodes = 0x10; // IThreadPoolWorkItem[]
		constexpr auto indexes = 0x18; // int
		constexpr auto Next = 0x20; // ThreadPoolWorkQueue.QueueSegment
	}

	namespace n_AlignedMaterialArrayDebugView {
		constexpr auto _array = 0x10; // AlignedMaterialArray
	}

	namespace n_BinHexDecoder { // : IncrementalReadDecoder
		constexpr auto buffer = 0x10; // byte[]
		constexpr auto curIndex = 0x18; // int
		constexpr auto endIndex = 0x1c; // int
		constexpr auto hasHalfByteCached = 0x20; // bool
		constexpr auto cachedHalfByte = 0x21; // byte
	}

	namespace n_PoolableBehaviour { // : MonoBehaviour
		constexpr auto (lifeTime)k__BackingField = 0x18; // float
		constexpr auto (inPool)k__BackingField = 0x1c; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x20; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x24; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x28; // bool
		constexpr auto thisRigidbody = 0x30; // Rigidbody
		constexpr auto invokeHandle = 0x38; // InvokeHandle
	}

	namespace n_DebugUIHandlerToggleHistory { // : DebugUIHandlerToggle
		constexpr auto historyToggles = 0x78; // Toggle[]
	}

	namespace n_RemoteSpotterPingUI { // : MonoBehaviour
		constexpr auto Textures = 0x18; // Texture2D[]
		constexpr auto image = 0x20; // RawImage
		constexpr auto canvas = 0x28; // CanvasGroup
		constexpr auto tr = 0x30; // RectTransform
		constexpr auto ArrowRectTransform = 0x38; // RectTransform
		constexpr auto ArrowCanvas = 0x40; // CanvasGroup
		constexpr auto MarkerCanvas = 0x48; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
		constexpr auto mLifeTime = 0x54; // float
		constexpr auto mHasParent = 0x58; // bool
		constexpr auto worldPosition = 0x5c; // Vector3
		constexpr auto parent = 0x68; // Transform
		constexpr auto localPosition = 0x70; // Vector3
	}

	namespace n_VFXTerrainBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Terrain = 0x28; // Terrain
		constexpr auto Terrain_Bounds_center = 0x30; // ExposedProperty
		constexpr auto Terrain_Bounds_size = 0x38; // ExposedProperty
		constexpr auto Terrain_HeightMap = 0x40; // ExposedProperty
		constexpr auto Terrain_Height = 0x48; // ExposedProperty
	}

	namespace n_HableCurve.Uniforms {
		constexpr auto parent = 0x10; // HableCurve
	}

	namespace n_GunGameFFAUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto PlayerUI = 0x58; // GunGameStepUI
		constexpr auto lockedSeconds = 0x60; // int
	}

	namespace n_MapStandard { // : MonoBehaviour
		constexpr auto Object = 0x18; // Transform
		constexpr auto Environment = 0x20; // Transform
		constexpr auto Medium = 0x28; // Transform
		constexpr auto Small = 0x30; // Transform
		constexpr auto Fx = 0x38; // Transform
		constexpr auto Background = 0x40; // Transform
		constexpr auto GrassColor = 0x48; // Color
		constexpr auto WindMovement = 0x58; // float
		constexpr auto WindDensity = 0x5c; // float
		constexpr auto WindStrenght = 0x60; // float
		constexpr auto DetailLOD0Distance = 0x64; // float
		constexpr auto DetailLOD1Distance = 0x68; // float
		constexpr auto DetailLOD2Distance = 0x6c; // float
		constexpr auto DetailLOD3Distance = 0x70; // float
		constexpr auto DetailLOD4Distance = 0x74; // float
		constexpr auto DetailLOD5Distance = 0x78; // float
		constexpr auto mBuildiableInstances = 0x80; // List(mBuildableInstance)
		constexpr auto mTerrain = 0x88; // Terrain
		constexpr auto mTerrainData = 0x90; // TerrainData
		constexpr auto alphamapWidth = 0x98; // int
		constexpr auto alphamapHeight = 0x9c; // int
		constexpr auto layers = 0xa0; // TerrainLayer[]
		constexpr auto mSplatmapData = 0xa8; // float[,,]
		constexpr auto mNumTextures = 0xb0; // int
	}

	namespace n_AssemblyInformationalVersionAttribute { // : Attribute
		constexpr auto m_informationalVersion = 0x10; // string
	}

	namespace n_Tess.ActiveRegion {
		constexpr auto _eUp = 0x10; // MeshUtils.Edge
		constexpr auto _nodeUp = 0x18; // Dict.Node(Tess.ActiveRegion)
		constexpr auto _windingNumber = 0x20; // int
		constexpr auto _inside = 0x24; // bool
		constexpr auto _sentinel = 0x25; // bool
		constexpr auto _dirty = 0x26; // bool
		constexpr auto _fixUpperEdge = 0x27; // bool
	}

	namespace n_RemoteSpotterBehaviour { // : SeatBehaviour
		constexpr auto Point = 0x48; // Transform
		constexpr auto Camera = 0x50; // Camera
		constexpr auto PostProcess = 0x58; // PostProcess
		constexpr auto vehicle = 0x60; // VehicleInstance
		constexpr auto LocalInputAngles = 0x68; // Vector2
		constexpr auto zoomLevel = 0x70; // int
		constexpr auto lastPing = 0x74; // float
	}

	namespace n_GamemodeSettingsBase {
		constexpr auto (Map)k__BackingField = 0x10; // Variable(string)
		constexpr auto (MapSize)k__BackingField = 0x18; // Variable(Size)
		constexpr auto (Gamemode)k__BackingField = 0x20; // Variable(GameMode)
		constexpr auto (Gametype)k__BackingField = 0x28; // Variable(GameType)
		constexpr auto (BleedingEnabled)k__BackingField = 0x30; // Variable(bool)
		constexpr auto (DamageMultiplier)k__BackingField = 0x38; // Variable(float)
		constexpr auto (FallDamageMultiplier)k__BackingField = 0x40; // Variable(float)
		constexpr auto (StamineEnabled)k__BackingField = 0x48; // Variable(bool)
		constexpr auto (FriendlyFireEnabled)k__BackingField = 0x50; // Variable(bool)
		constexpr auto (RespawnTime)k__BackingField = 0x58; // Variable(float)
		constexpr auto (VehicleType)k__BackingField = 0x60; // Variable(GameType)
		constexpr auto (VehicleSpawnRateMultiplier)k__BackingField = 0x68; // Variable(float)
		constexpr auto (HitMarkersEnabled)k__BackingField = 0x70; // Variable(bool)
		constexpr auto (KillCamEnabled)k__BackingField = 0x78; // Variable(bool)
		constexpr auto (PointLogEnabled)k__BackingField = 0x80; // Variable(bool)
		constexpr auto (MedicLimitPerTeam)k__BackingField = 0x88; // Variable(int)
		constexpr auto (EngineerLimitPerTeam)k__BackingField = 0x90; // Variable(int)
		constexpr auto (SupportLimitPerTeam)k__BackingField = 0x98; // Variable(int)
		constexpr auto (ReconLimitPerTeam)k__BackingField = 0xa0; // Variable(int)
		constexpr auto (MedicLimitPerSquad)k__BackingField = 0xa8; // Variable(int)
		constexpr auto (EngineerLimitPerSquad)k__BackingField = 0xb0; // Variable(int)
		constexpr auto (SupportLimitPerSquad)k__BackingField = 0xb8; // Variable(int)
		constexpr auto (ReconLimitPerSquad)k__BackingField = 0xc0; // Variable(int)
		constexpr auto (SpawningRule)k__BackingField = 0xc8; // Variable(SpawnableType)
		constexpr auto (SpawnWaveDelay)k__BackingField = 0xd0; // Variable(int)
		constexpr auto (AssaultRiflesAllowed)k__BackingField = 0xd8; // Variable(bool)
		constexpr auto (DesignatedMarksmanRiflesAllowed)k__BackingField = 0xe0; // Variable(bool)
		constexpr auto (SniperRiflesAllowed)k__BackingField = 0xe8; // Variable(bool)
		constexpr auto (PersonalDefenseWeaponsAllowed)k__BackingField = 0xf0; // Variable(bool)
		constexpr auto (LightSupportGunsAllowed)k__BackingField = 0xf8; // Variable(bool)
		constexpr auto (LightMachineGunsAllowed)k__BackingField = 0x100; // Variable(bool)
		constexpr auto (StandartPistolsAllowed)k__BackingField = 0x108; // Variable(bool)
		constexpr auto (AutoPistolsAllowed)k__BackingField = 0x110; // Variable(bool)
		constexpr auto (HeavyPistolsAllowed)k__BackingField = 0x118; // Variable(bool)
		constexpr auto (GrenadesAllowed)k__BackingField = 0x120; // Variable(bool)
		constexpr auto (RocketLaunchersAllowed)k__BackingField = 0x128; // Variable(bool)
		constexpr auto (MinesAllowed)k__BackingField = 0x130; // Variable(bool)
		constexpr auto (C4Allowed)k__BackingField = 0x138; // Variable(bool)
		constexpr auto (GrapplingHookAllowed)k__BackingField = 0x140; // Variable(bool)
	}

	namespace n_CFNetwork.GetProxyData { // : IDisposable
		constexpr auto script = 0x10; // IntPtr
		constexpr auto targetUri = 0x18; // IntPtr
		constexpr auto error = 0x20; // IntPtr
		constexpr auto result = 0x28; // IntPtr
		constexpr auto evt = 0x30; // ManualResetEvent
	}

	namespace n_GunGameTeam { // : GameplayMode
		constexpr auto RoundTime = 0x48; // RoundTimer
		constexpr auto Steps = 0x50; // GungameList
		constexpr auto Scores = 0x58; // Dictionary(ulong, int)
		constexpr auto SpawnPointsTeamA = 0x60; // Transform[]
		constexpr auto SpawnPointsTeamB = 0x68; // Transform[]
		constexpr auto SpawnPoints = 0x70; // Transform[]
	}

	namespace n_Slider { // : Selectable
		constexpr auto m_FillRect = 0xf8; // RectTransform
		constexpr auto m_HandleRect = 0x100; // RectTransform
		constexpr auto m_Direction = 0x108; // Slider.Direction
		constexpr auto m_MinValue = 0x10c; // float
		constexpr auto m_MaxValue = 0x110; // float
		constexpr auto m_WholeNumbers = 0x114; // bool
		constexpr auto m_Value = 0x118; // float
		constexpr auto m_OnValueChanged = 0x120; // Slider.SliderEvent
		constexpr auto m_FillImage = 0x128; // Image
		constexpr auto m_FillTransform = 0x130; // Transform
		constexpr auto m_FillContainerRect = 0x138; // RectTransform
		constexpr auto m_HandleTransform = 0x140; // Transform
		constexpr auto m_HandleContainerRect = 0x148; // RectTransform
		constexpr auto m_Offset = 0x150; // Vector2
		constexpr auto m_Tracker = 0x158; // DrivenRectTransformTracker
		constexpr auto m_DelayedUpdateVisuals = 0x159; // bool
	}

	namespace n_AssemblyTitleAttribute { // : Attribute
		constexpr auto m_title = 0x10; // string
	}

	namespace n_UnityTls.unitytls_interface_struct {
		constexpr auto UNITYTLS_INVALID_HANDLE = 0x10; // ulong
		constexpr auto UNITYTLS_TLSCTX_PROTOCOLRANGE_DEFAULT = 0x18; // UnityTls.unitytls_tlsctx_protocolrange
		constexpr auto unitytls_errorstate_create = 0x20; // UnityTls.unitytls_interface_struct.unitytls_errorstate_create_t
		constexpr auto unitytls_errorstate_raise_error = 0x28; // UnityTls.unitytls_interface_struct.unitytls_errorstate_raise_error_t
		constexpr auto unitytls_key_get_ref = 0x30; // UnityTls.unitytls_interface_struct.unitytls_key_get_ref_t
		constexpr auto unitytls_key_parse_der = 0x38; // UnityTls.unitytls_interface_struct.unitytls_key_parse_der_t
		constexpr auto unitytls_key_parse_pem = 0x40; // UnityTls.unitytls_interface_struct.unitytls_key_parse_pem_t
		constexpr auto unitytls_key_free = 0x48; // UnityTls.unitytls_interface_struct.unitytls_key_free_t
		constexpr auto unitytls_x509_export_der = 0x50; // UnityTls.unitytls_interface_struct.unitytls_x509_export_der_t
		constexpr auto unitytls_x509list_get_ref = 0x58; // UnityTls.unitytls_interface_struct.unitytls_x509list_get_ref_t
		constexpr auto unitytls_x509list_get_x509 = 0x60; // UnityTls.unitytls_interface_struct.unitytls_x509list_get_x509_t
		constexpr auto unitytls_x509list_create = 0x68; // UnityTls.unitytls_interface_struct.unitytls_x509list_create_t
		constexpr auto unitytls_x509list_append = 0x70; // UnityTls.unitytls_interface_struct.unitytls_x509list_append_t
		constexpr auto unitytls_x509list_append_der = 0x78; // UnityTls.unitytls_interface_struct.unitytls_x509list_append_der_t
		constexpr auto unitytls_x509list_append_pem = 0x80; // UnityTls.unitytls_interface_struct.unitytls_x509list_append_der_t
		constexpr auto unitytls_x509list_free = 0x88; // UnityTls.unitytls_interface_struct.unitytls_x509list_free_t
		constexpr auto unitytls_x509verify_default_ca = 0x90; // UnityTls.unitytls_interface_struct.unitytls_x509verify_default_ca_t
		constexpr auto unitytls_x509verify_explicit_ca = 0x98; // UnityTls.unitytls_interface_struct.unitytls_x509verify_explicit_ca_t
		constexpr auto unitytls_tlsctx_create_server = 0xa0; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_create_server_t
		constexpr auto unitytls_tlsctx_create_client = 0xa8; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_create_client_t
		constexpr auto unitytls_tlsctx_server_require_client_authentication = 0xb0; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_server_require_client_authentication_t
		constexpr auto unitytls_tlsctx_set_certificate_callback = 0xb8; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_set_certificate_callback_t
		constexpr auto unitytls_tlsctx_set_trace_callback = 0xc0; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_set_trace_callback_t
		constexpr auto unitytls_tlsctx_set_x509verify_callback = 0xc8; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_set_x509verify_callback_t
		constexpr auto unitytls_tlsctx_set_supported_ciphersuites = 0xd0; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_set_supported_ciphersuites_t
		constexpr auto unitytls_tlsctx_get_ciphersuite = 0xd8; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_get_ciphersuite_t
		constexpr auto unitytls_tlsctx_get_protocol = 0xe0; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_get_protocol_t
		constexpr auto unitytls_tlsctx_process_handshake = 0xe8; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_process_handshake_t
		constexpr auto unitytls_tlsctx_read = 0xf0; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_read_t
		constexpr auto unitytls_tlsctx_write = 0xf8; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_write_t
		constexpr auto unitytls_tlsctx_notify_close = 0x100; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_notify_close_t
		constexpr auto unitytls_tlsctx_free = 0x108; // UnityTls.unitytls_interface_struct.unitytls_tlsctx_free_t
		constexpr auto unitytls_random_generate_bytes = 0x110; // UnityTls.unitytls_interface_struct.unitytls_random_generate_bytes_t
	}

	namespace n_FileStreamAsyncResult { // : IAsyncResult
		constexpr auto state = 0x10; // object
		constexpr auto completed = 0x18; // bool
		constexpr auto wh = 0x20; // ManualResetEvent
		constexpr auto cb = 0x28; // AsyncCallback
		constexpr auto completedSynch = 0x30; // bool
		constexpr auto Count = 0x34; // int
		constexpr auto OriginalCount = 0x38; // int
		constexpr auto BytesRead = 0x3c; // int
		constexpr auto realcb = 0x40; // AsyncCallback
	}

	namespace n_ImplicitFn { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _eval = 0x18; // ImplicitFn.EvalUnmanagedDelegate
	}

	namespace n_SimulationIslandManager { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_BufferOffsetSize {
		constexpr auto Buffer = 0x10; // byte[]
		constexpr auto Offset = 0x18; // int
		constexpr auto Size = 0x1c; // int
		constexpr auto TotalBytes = 0x20; // int
		constexpr auto Complete = 0x24; // bool
	}

	namespace n_Shell { // : ToolItem
		constexpr auto ProjectilePrefab = 0x60; // GameObject
		constexpr auto LoadingTime = 0x68; // float
		constexpr auto PhysicsRigidbodyRecoilForce = 0x6c; // float
	}

	namespace n_Tonemapping { // : VolumeComponent
		constexpr auto mode = 0x38; // TonemappingModeParameter
	}

	namespace n_VehicleAudioSource.ImpactSource {
		constexpr auto src = 0x10; // AudioSource
		constexpr auto eta = 0x18; // float
	}

	namespace n_SimulationIslandManager.IslandCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_TMP_Sprite { // : TMP_TextElement_Legacy
		constexpr auto name = 0x38; // string
		constexpr auto hashCode = 0x40; // int
		constexpr auto unicode = 0x44; // int
		constexpr auto pivot = 0x48; // Vector2
		constexpr auto sprite = 0x50; // Sprite
	}

	namespace n_BufferOffsetSize2 { // : BufferOffsetSize
		constexpr auto InitialSize = 0x28; // int
	}

	namespace n_TMP_SpriteAsset { // : TMP_Asset
		constexpr auto m_NameLookup = 0x30; // Dictionary(int, int)
		constexpr auto m_GlyphIndexLookup = 0x38; // Dictionary(uint, int)
		constexpr auto m_Version = 0x40; // string
		constexpr auto m_FaceInfo = 0x48; // FaceInfo
		constexpr auto spriteSheet = 0xa8; // Texture
		constexpr auto m_SpriteCharacterTable = 0xb0; // List(TMP_SpriteCharacter)
		constexpr auto m_SpriteCharacterLookup = 0xb8; // Dictionary(uint, TMP_SpriteCharacter)
		constexpr auto m_SpriteGlyphTable = 0xc0; // List(TMP_SpriteGlyph)
		constexpr auto m_SpriteGlyphLookup = 0xc8; // Dictionary(uint, TMP_SpriteGlyph)
		constexpr auto spriteInfoList = 0xd0; // List(TMP_Sprite)
		constexpr auto fallbackSpriteAssets = 0xd8; // List(TMP_SpriteAsset)
		constexpr auto m_IsSpriteAssetLookupTablesDirty = 0xe0; // bool
	}

	namespace n_StringBuilder { // : ISerializable
		constexpr auto m_ChunkChars = 0x10; // char[]
		constexpr auto m_ChunkPrevious = 0x18; // StringBuilder
		constexpr auto m_ChunkLength = 0x20; // int
		constexpr auto m_ChunkOffset = 0x24; // int
		constexpr auto m_MaxCapacity = 0x28; // int
	}

	namespace n_AGround { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto Material = 0x20; // PhysicMaterial
		constexpr auto WalkingSpeed = 0x28; // float
		constexpr auto RunningMain = 0x30; // AudioClip
		constexpr auto Land = 0x38; // AudioClip[]
		constexpr auto Run = 0x40; // AudioClip[]
		constexpr auto Walk = 0x48; // AudioClip[]
		constexpr auto Rain = 0x50; // AGround.RainVariations
		constexpr auto BulletShell = 0x58; // AudioClip[]
		constexpr auto ThrowableLand = 0x60; // AudioClip[]
		constexpr auto HammerHit = 0x68; // AudioClip[]
		constexpr auto HammerSmash = 0x70; // AudioClip[]
		constexpr auto BulletImpacts = 0x78; // GameObject[]
		constexpr auto TankBulletImpacts = 0x80; // GameObject[]
		constexpr auto SurfaceExplosions = 0x88; // GameObject[]
		constexpr auto RifleMagazines = 0x90; // AudioClip[]
		constexpr auto PistolMagazines = 0x98; // AudioClip[]
	}

	namespace n_LongList {
		constexpr auto m_values = 0x10; // long[]
		constexpr auto m_count = 0x18; // int
		constexpr auto m_totalItems = 0x1c; // int
		constexpr auto m_currentItem = 0x20; // int
	}

	namespace n_MyCallback { // : TriangleRaycastCallback
		constexpr auto _ignorePart = 0x40; // int
		constexpr auto _ignoreTriangleIndex = 0x44; // int
	}

	namespace n_Encoder {
		constexpr auto m_fallback = 0x10; // EncoderFallback
		constexpr auto m_fallbackBuffer = 0x18; // EncoderFallbackBuffer
	}

	namespace n_XmlEnumAttribute { // : Attribute
		constexpr auto name = 0x10; // string
	}

	namespace n_Collection {
		constexpr auto DebrisMetalLow = 0x10; // DebrisSoundCollection
		constexpr auto DebrisMetalMedium = 0x18; // DebrisSoundCollection
		constexpr auto DebrisMetalHigh = 0x20; // DebrisSoundCollection
		constexpr auto DebrisWoodLow = 0x28; // DebrisSoundCollection
		constexpr auto DebrisWoodMedium = 0x30; // DebrisSoundCollection
		constexpr auto DebrisWoodHigh = 0x38; // DebrisSoundCollection
		constexpr auto DebrisConcreteLow = 0x40; // DebrisSoundCollection
		constexpr auto DebrisConcreteMedium = 0x48; // DebrisSoundCollection
		constexpr auto DebrisConcreteHigh = 0x50; // DebrisSoundCollection
	}

	namespace n_DbvtNode {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_Dna.TypeDecl {
		constexpr auto (Struct)k__BackingField = 0x10; // Dna.StructDecl
		constexpr auto (Length)k__BackingField = 0x18; // short
		constexpr auto (Name)k__BackingField = 0x20; // string
	}

	namespace n_NetView.RpcBuffers {
		constexpr auto RPC2Index = 0x10; // Dictionary(Action, byte)
		constexpr auto Index2RPC = 0x18; // NetView.RpcBuffers.Method[]
		constexpr auto RPCCount = 0x20; // int
		constexpr auto RPCD2Index = 0x28; // Dictionary(Action(NetSerializer), byte)
		constexpr auto Index2RPCD = 0x30; // NetView.RpcBuffers.MethodData[]
		constexpr auto RPCDCount = 0x38; // int
		constexpr auto Functions = 0x40; // List(SyncFunction)
		constexpr auto Target = 0x48; // NetView
	}

	namespace n_UniversalRenderPipeline { // : RenderPipeline
		constexpr auto cameraComparison = 0x18; // Comparison(Camera)
	}

	namespace n_TMP_SubMesh { // : MonoBehaviour
		constexpr auto m_fontAsset = 0x18; // TMP_FontAsset
		constexpr auto m_spriteAsset = 0x20; // TMP_SpriteAsset
		constexpr auto m_material = 0x28; // Material
		constexpr auto m_sharedMaterial = 0x30; // Material
		constexpr auto m_fallbackMaterial = 0x38; // Material
		constexpr auto m_fallbackSourceMaterial = 0x40; // Material
		constexpr auto m_isDefaultMaterial = 0x48; // bool
		constexpr auto m_padding = 0x4c; // float
		constexpr auto m_renderer = 0x50; // Renderer
		constexpr auto m_meshFilter = 0x58; // MeshFilter
		constexpr auto m_mesh = 0x60; // Mesh
		constexpr auto m_TextComponent = 0x68; // TextMeshPro
		constexpr auto m_isRegisteredForEvents = 0x70; // bool
	}

	namespace n_SmallXmlParserException { // : SystemException
		constexpr auto line = 0x88; // int
		constexpr auto column = 0x8c; // int
	}

	namespace n_EnvoyInfo { // : IEnvoyInfo
		constexpr auto envoySinks = 0x10; // IMessageSink
	}

	namespace n_ObjectMousePrecision {
		constexpr auto objectMouseUniformScale = 0x10; // ObjectMouseUniformScale
		constexpr auto objectMouseRotation = 0x18; // ObjectMouseRotation
		constexpr auto objectMouseMoveAlongDirection = 0x20; // ObjectMouseMoveAlongDirection
	}

	namespace n_BattleManager.ExplosionQueue {
		constexpr auto by = 0x10; // NetworkClient
		constexpr auto position = 0x18; // Vector3
		constexpr auto stats = 0x28; // ToolStats
		constexpr auto parent = 0x30; // ToolItem
		constexpr auto vehicle = 0x38; // VehicleInstance
		constexpr auto player = 0x40; // PlayerNetwork
		constexpr auto drone = 0x48; // DroneInstance
		constexpr auto checkObstacles = 0x50; // bool
	}

	namespace n_CustomizeMainStatsElement { // : MonoBehaviour
		constexpr auto Icon = 0x18; // Image
		constexpr auto ValueLabel = 0x20; // TextMeshProUGUI
		constexpr auto TitleLabel = 0x28; // TextMeshProUGUI
		constexpr auto lastTexture = 0x30; // Sprite
		constexpr auto lastCount = 0x38; // int
		constexpr auto lastTitle = 0x40; // string
	}

	namespace n_GameplayMode { // : MonoBehaviour
		constexpr auto (TickIndex7)k__BackingField = 0x18; // int
		constexpr auto (UIAsObject)k__BackingField = 0x20; // GameplayModeUI
		constexpr auto (view)k__BackingField = 0x28; // NetView
		constexpr auto IsEnabled = 0x30; // bool
		constexpr auto Size = 0x34; // Size
		constexpr auto tickets_a = 0x38; // double
		constexpr auto tickets_b = 0x40; // double
	}

	namespace n_MonoListItem {
		constexpr auto next = 0x10; // MonoListItem
		constexpr auto data = 0x18; // object
	}

	namespace n_XmlSchemaInfo { // : IXmlSchemaInfo
		constexpr auto isDefault = 0x10; // bool
		constexpr auto isNil = 0x11; // bool
		constexpr auto schemaElement = 0x18; // XmlSchemaElement
		constexpr auto schemaAttribute = 0x20; // XmlSchemaAttribute
		constexpr auto schemaType = 0x28; // XmlSchemaType
		constexpr auto memberType = 0x30; // XmlSchemaSimpleType
		constexpr auto validity = 0x38; // XmlSchemaValidity
		constexpr auto contentType = 0x3c; // XmlSchemaContentType
	}

	namespace n_LabelButtonHover { // : MonoBehaviour
		constexpr auto MainLabel = 0x18; // TextMeshProUGUI
		constexpr auto Hover = 0x20; // CanvasGroup
		constexpr auto includeHover = 0x28; // bool
		constexpr auto Idle_HoverAlpha = 0x2c; // float
		constexpr auto Enter_HoverAlpha = 0x30; // float
		constexpr auto Click_HoverAlpha = 0x34; // float
		constexpr auto includeFont = 0x38; // bool
		constexpr auto Idle_MainStyle = 0x3c; // FontStyles
		constexpr auto Enter_MainStyle = 0x40; // FontStyles
		constexpr auto Click_MainStyle = 0x44; // FontStyles
		constexpr auto Idle_MainColor = 0x48; // Color
		constexpr auto Enter_MainColor = 0x58; // Color
		constexpr auto Click_MainColor = 0x68; // Color
		constexpr auto StartAsClicked = 0x78; // bool
		constexpr auto isSelectable = 0x79; // bool
		constexpr auto UseLerp = 0x7a; // bool
		constexpr auto LerpSpeed = 0x7c; // float
		constexpr auto OnButtonSelected = 0x80; // UnityEvent
		constexpr auto (isSelected)k__BackingField = 0x88; // bool
		constexpr auto (State)k__BackingField = 0x8c; // ButtonHoverState
		constexpr auto (Parent)k__BackingField = 0x90; // ISelectableGroup
		constexpr auto (TickIndex8)k__BackingField = 0x98; // int
	}

	namespace n_CustomizationManager { // : MonoBehaviour
		constexpr auto Camera = 0x18; // Camera
		constexpr auto Character = 0x20; // CharacterArmor
		constexpr auto Content = 0x28; // Transform
		constexpr auto DefaultCameraPosition = 0x30; // Vector3
		constexpr auto DefaultCameraEular = 0x3c; // Vector3
	}

	namespace n_Variable { // : AstNode
		constexpr auto fieldName = 0x10; // string
		constexpr auto localname = 0x10; // string
		constexpr auto _value = 0x18; // byte[]
		constexpr auto prefix = 0x18; // string
		constexpr auto _fieldType = 0x20; // FieldType
	}

	namespace n_ArrayList { // : IList
		constexpr auto _items = 0x10; // object[]
		constexpr auto _size = 0x18; // int
		constexpr auto _version = 0x1c; // int
		constexpr auto _syncRoot = 0x20; // object
	}

	namespace n_MotionState { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _getWorldTransform = 0x18; // MotionState.GetWorldTransformUnmanagedDelegate
		constexpr auto _setWorldTransform = 0x20; // MotionState.SetWorldTransformUnmanagedDelegate
	}

	namespace n_KeyboardButtonStates {
		constexpr auto _keyboardButtonStates = 0x10; // Dictionary(KeyCode, bool)
	}

	namespace n_JSONEncoder {
		constexpr auto _buffer = 0x10; // StringBuilder
	}

	namespace n_DebugUIHandlerEnumField { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueLabel = 0x60; // Text
		constexpr auto m_Field = 0x68; // DebugUI.EnumField
	}

	namespace n_EventInfo { // : MemberInfo
		constexpr auto cached_add_event = 0x10; // EventInfo.AddEventAdapter
	}

	namespace n_ConvexTriangleMeshShape { // : PolyhedralConvexAabbCachingShape
		constexpr auto _meshInterface = 0x30; // StridingMeshInterface
	}

	namespace n_Pool {
		constexpr auto Explosions = 0x10; // Pool.Explosion
		constexpr auto Bullets = 0x18; // Pool.Bullet
		constexpr auto EnvironmentObjects = 0x20; // Pool.Environment
		constexpr auto Debugging = 0x28; // Pool.Debug
		constexpr auto Muzzles = 0x30; // Pool.Muzzle
		constexpr auto Gadgets = 0x38; // Pool.Gadget
		constexpr auto Ping = 0x40; // GameObject
	}

	namespace n_ComVisibleAttribute { // : Attribute
		constexpr auto _val = 0x10; // bool
	}

	namespace n_MissingMethodException { // : MissingMemberException
		constexpr auto signature = 0xa0; // string
	}

	namespace n_UniversalRenderPipelineAsset { // : RenderPipelineAsset
		constexpr auto m_DefaultShader = 0x18; // Shader
		constexpr auto m_Renderers = 0x20; // ScriptableRenderer[]
		constexpr auto k_AssetVersion = 0x28; // int
		constexpr auto k_AssetPreviousVersion = 0x2c; // int
		constexpr auto m_RendererType = 0x30; // RendererType
		constexpr auto m_RendererData = 0x38; // ScriptableRendererData
		constexpr auto m_RendererDataList = 0x40; // ScriptableRendererData[]
		constexpr auto m_DefaultRendererIndex = 0x48; // int
		constexpr auto m_RequireDepthTexture = 0x4c; // bool
		constexpr auto m_RequireOpaqueTexture = 0x4d; // bool
		constexpr auto m_OpaqueDownsampling = 0x50; // Downsampling
		constexpr auto m_SupportsTerrainHoles = 0x54; // bool
		constexpr auto m_SupportsHDR = 0x55; // bool
		constexpr auto m_MSAA = 0x58; // MsaaQuality
		constexpr auto m_RenderScale = 0x5c; // float
		constexpr auto m_MainLightRenderingMode = 0x60; // LightRenderingMode
		constexpr auto m_MainLightShadowsSupported = 0x64; // bool
		constexpr auto m_MainLightShadowmapResolution = 0x68; // ShadowResolution
		constexpr auto m_AdditionalLightsRenderingMode = 0x6c; // LightRenderingMode
		constexpr auto m_AdditionalLightsPerObjectLimit = 0x70; // int
		constexpr auto m_AdditionalLightShadowsSupported = 0x74; // bool
		constexpr auto m_AdditionalLightsShadowmapResolution = 0x78; // ShadowResolution
		constexpr auto m_ShadowDistance = 0x7c; // float
		constexpr auto m_ShadowCascades = 0x80; // ShadowCascadesOption
		constexpr auto m_Cascade2Split = 0x84; // float
		constexpr auto m_Cascade4Split = 0x88; // Vector3
		constexpr auto m_ShadowDepthBias = 0x94; // float
		constexpr auto m_ShadowNormalBias = 0x98; // float
		constexpr auto m_SoftShadowsSupported = 0x9c; // bool
		constexpr auto m_UseSRPBatcher = 0x9d; // bool
		constexpr auto m_SupportsDynamicBatching = 0x9e; // bool
		constexpr auto m_MixedLightingSupported = 0x9f; // bool
		constexpr auto m_DebugLevel = 0xa0; // PipelineDebugLevel
		constexpr auto m_UseAdaptivePerformance = 0xa4; // bool
		constexpr auto m_PostProcessingFeatureSet = 0xa8; // PostProcessingFeatureSet
		constexpr auto m_ColorGradingMode = 0xac; // ColorGradingMode
		constexpr auto m_ColorGradingLutSize = 0xb0; // int
		constexpr auto m_ShadowType = 0xb4; // ShadowQuality
		constexpr auto m_LocalShadowsSupported = 0xb8; // bool
		constexpr auto m_LocalShadowsAtlasResolution = 0xbc; // ShadowResolution
		constexpr auto m_MaxPixelLights = 0xc0; // int
		constexpr auto m_ShadowAtlasResolution = 0xc4; // ShadowResolution
		constexpr auto m_ShaderVariantLogLevel = 0xc8; // ShaderVariantLogLevel
	}

	namespace n_DecoderFallbackException { // : ArgumentException
		constexpr auto bytesUnknown = 0x90; // byte[]
		constexpr auto index = 0x98; // int
	}

	namespace n_Pipeline {
		constexpr auto UIRender = 0x10; // RenderObjects
		constexpr auto DefaultCharacterPassFriendly = 0x18; // RenderObjects
		constexpr auto DefaultCharacterPassFriendlyWall = 0x20; // RenderObjects
		constexpr auto DefaultCharacterPassEnemy = 0x28; // RenderObjects
		constexpr auto FlirEnemy = 0x30; // RenderObjects
		constexpr auto FlirFriendly = 0x38; // RenderObjects
		constexpr auto FlirEnemyGlobal = 0x40; // RenderObjects
		constexpr auto FlirFriendlyGlobal = 0x48; // RenderObjects
		constexpr auto NightVision = 0x50; // PostProcess
	}

	namespace n_Connection { // : IDisposable
		constexpr auto IsConnected0 = 0x10; // bool
		constexpr auto (isDisposed)k__BackingField = 0x10; // bool
		constexpr auto Ping0 = 0x14; // float
		constexpr auto m_isServerApp = 0x18; // bool
		constexpr auto (GameClient)k__BackingField = 0x18; // NetworkClient
		constexpr auto IsConnected = 0x20; // bool
		constexpr auto mSocket = 0x20; // Socket
		constexpr auto Destination = 0x28; // EndPoint
		constexpr auto mDestination = 0x28; // EndPoint
		constexpr auto m_pingCounter0 = 0x30; // Stopwatch
		constexpr auto Ping = 0x30; // long
		constexpr auto m_pingRequestBuffer0 = 0x38; // byte[]
		constexpr auto PingFloat = 0x38; // float
		constexpr auto Reason = 0x3c; // DisconnectReason
		constexpr auto m_pingCounterInterval = 0x40; // float
		constexpr auto m_socket = 0x40; // NativeUdpIPv4Socket
		constexpr auto m_lastPingValue = 0x44; // byte
		constexpr auto m_upload_reliableSequanceIndex = 0x48; // uint
		constexpr auto m_missedPings0 = 0x48; // int
		constexpr auto m_waitingPingResponse = 0x4c; // bool
		constexpr auto m_download_reliableSequanceIndex = 0x4c; // uint
		constexpr auto m_pingSendCounter = 0x50; // float
		constexpr auto m_sendSequanceIndex = 0x50; // uint
		constexpr auto m_receiveSequanceIndex = 0x54; // uint
		constexpr auto m_missedPings = 0x54; // int
		constexpr auto m_executablePackages = 0x58; // Queue(Stream)
		constexpr auto m_lastPingReplied = 0x58; // bool
		constexpr auto m_disconnectFlag = 0x59; // bool
		constexpr auto m_isServer = 0x5a; // bool
		constexpr auto m_outgoingVerifyList = 0x60; // Queue(uint)
		constexpr auto m_incomingRawPackages = 0x60; // Queue(NetSerializer)
		constexpr auto m_fragmentedPackages = 0x68; // List(NetSerializer)
		constexpr auto m_unverifiedPackages = 0x68; // Dictionary(uint, UnverifiedPackage)
		constexpr auto m_futurePackages = 0x70; // Dictionary(uint, Stream)
		constexpr auto m_receivedFuturePackages = 0x70; // Dictionary(uint, NetSerializer)
		constexpr auto m_fragmentedPackageStream = 0x78; // Stream
		constexpr auto m_outgoingUnverifiedPackages = 0x78; // Dictionary(uint, UnverifiedOutgoingPackage)
		constexpr auto m_outgoingVerifyIndexes = 0x80; // Queue(uint)
		constexpr auto m_pingCounter = 0x88; // Stopwatch
		constexpr auto m_verifyBuffer = 0x90; // byte[]
		constexpr auto m_pingRequestBuffer = 0x98; // byte[]
		constexpr auto m_executableReliablePackages = 0xa0; // Queue(NetSerializer)
		constexpr auto m_executableUnreliablePackages = 0xa8; // Queue(NetSerializer)
		constexpr auto m_executableVoiceChatPackages = 0xb0; // Queue(NetSerializer)
		constexpr auto mListeningMultithreaded = 0xb8; // bool
	}

	namespace n_RepairTool { // : GadgetManager
		constexpr auto Point = 0xd0; // Transform
		constexpr auto GripPoint = 0xd8; // Transform
		constexpr auto LightVehicleRepairPerSecond = 0xe0; // float
		constexpr auto HeavyVehicleRepairPerSecond = 0xe4; // float
		constexpr auto defaultPosition = 0xe8; // Vector3
		constexpr auto lastSent = 0xf4; // float
		constexpr auto lastVehicle = 0xf8; // VehicleInstance
		constexpr auto switching = 0x100; // float
		constexpr auto actionCounter = 0x104; // float
	}

	namespace n_IntegratedSubsystem { // : ISubsystem
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_subsystemDescriptor = 0x18; // ISubsystemDescriptor
	}

	namespace n_Depth2DBackground { // : MonoBehaviour
		constexpr auto color = 0x18; // Color
		constexpr auto img = 0x28; // RawImage
		constexpr auto Target = 0x30; // Color
		constexpr auto speed = 0x40; // float
		constexpr auto t = 0x44; // float
	}

	namespace n_Contraction {
		constexpr auto Index = 0x10; // int
		constexpr auto Source = 0x18; // char[]
		constexpr auto Replacement = 0x20; // string
		constexpr auto SortKey = 0x28; // byte[]
	}

	namespace n_IncrementStripIndexOnStart { // : VFXSpawnerCallbacks
		constexpr auto m_Index = 0x18; // uint
	}

	namespace n_GUIStyle {
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_Normal = 0x18; // GUIStyleState
		constexpr auto m_Hover = 0x20; // GUIStyleState
		constexpr auto m_Active = 0x28; // GUIStyleState
		constexpr auto m_Focused = 0x30; // GUIStyleState
		constexpr auto m_OnNormal = 0x38; // GUIStyleState
		constexpr auto m_OnHover = 0x40; // GUIStyleState
		constexpr auto m_OnActive = 0x48; // GUIStyleState
		constexpr auto m_OnFocused = 0x50; // GUIStyleState
		constexpr auto m_Border = 0x58; // RectOffset
		constexpr auto m_Padding = 0x60; // RectOffset
		constexpr auto m_Margin = 0x68; // RectOffset
		constexpr auto m_Overflow = 0x70; // RectOffset
		constexpr auto m_Name = 0x78; // string
	}

	namespace n_GunGameFFA { // : GameplayMode
		constexpr auto RoundTime = 0x48; // RoundTimer
		constexpr auto Steps = 0x50; // GungameList
		constexpr auto Scores = 0x58; // Dictionary(ulong, int)
		constexpr auto SpawnPoints = 0x60; // Transform[]
	}

	namespace n_GameScreen_SupplyTool { // : MonoBehaviour
		constexpr auto Index = 0x18; // int
		constexpr auto Title = 0x20; // TextMeshProUGUI
		constexpr auto Icon = 0x28; // RawImage
		constexpr auto SupplyOnIndex = 0x30; // TextMeshProUGUI
		constexpr auto Ammo = 0x38; // TextMeshProUGUI
		constexpr auto Points = 0x40; // TextMeshProUGUI
		constexpr auto Key = 0x48; // TextMeshProUGUI
		constexpr auto Canvas = 0x50; // CanvasGroup
		constexpr auto KeyCanvas = 0x58; // CanvasGroup
		constexpr auto OutOfPointsCanvas = 0x60; // CanvasGroup
		constexpr auto HoldValue = 0x68; // Image
		constexpr auto rect = 0x70; // RectTransform
		constexpr auto weapon = 0x78; // WeaponManager
		constexpr auto gadget = 0x80; // GadgetManager
		constexpr auto defaultPosition = 0x88; // Vector2
		constexpr auto midPosition = 0x90; // Vector2
		constexpr auto (TickIndex8)k__BackingField = 0x98; // int
		constexpr auto KeyCode = 0x9c; // KeyCode
		constexpr auto max_time = 0xa0; // float
		constexpr auto counter = 0xa4; // float
	}

	namespace n_GlobalJavaObjectRef {
		constexpr auto m_disposed = 0x10; // bool
		constexpr auto m_jobject = 0x18; // IntPtr
	}

	namespace n_ScreenResolutionBehaviour { // : OptionsElement
		constexpr auto Label = 0x20; // TextMeshProUGUI
		constexpr auto Next = 0x28; // Button
		constexpr auto Previous = 0x30; // Button
		constexpr auto currentIndex = 0x38; // int
		constexpr auto elements = 0x40; // string[]
		constexpr auto loaded = 0x48; // bool
	}

	namespace n_ABarrel { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto PrefabLocals = 0x20; // PositionQuaternationScale
		constexpr auto PrefabAsset = 0x48; // GameObject
		constexpr auto Visual = 0x50; // Sprite
		constexpr auto LanguageId = 0x58; // int
		constexpr auto DefaultKill = 0x5c; // int
		constexpr auto Settings = 0x60; // AttachmentSettings
	}

	namespace n_TMP_Text { // : MaskableGraphic
		constexpr auto m_text = 0xc8; // string
		constexpr auto m_IsTextBackingStringDirty = 0xd0; // bool
		constexpr auto m_TextPreprocessor = 0xd8; // ITextPreprocessor
		constexpr auto m_isRightToLeft = 0xe0; // bool
		constexpr auto m_fontAsset = 0xe8; // TMP_FontAsset
		constexpr auto m_currentFontAsset = 0xf0; // TMP_FontAsset
		constexpr auto m_isSDFShader = 0xf8; // bool
		constexpr auto m_sharedMaterial = 0x100; // Material
		constexpr auto m_currentMaterial = 0x108; // Material
		constexpr auto m_currentMaterialIndex = 0x110; // int
		constexpr auto m_fontSharedMaterials = 0x118; // Material[]
		constexpr auto m_fontMaterial = 0x120; // Material
		constexpr auto m_fontMaterials = 0x128; // Material[]
		constexpr auto m_isMaterialDirty = 0x130; // bool
		constexpr auto m_fontColor32 = 0x134; // Color32
		constexpr auto m_fontColor = 0x138; // Color
		constexpr auto m_underlineColor = 0x148; // Color32
		constexpr auto m_strikethroughColor = 0x14c; // Color32
		constexpr auto m_enableVertexGradient = 0x150; // bool
		constexpr auto m_colorMode = 0x154; // ColorMode
		constexpr auto m_fontColorGradient = 0x158; // VertexGradient
		constexpr auto m_fontColorGradientPreset = 0x198; // TMP_ColorGradient
		constexpr auto m_spriteAsset = 0x1a0; // TMP_SpriteAsset
		constexpr auto m_tintAllSprites = 0x1a8; // bool
		constexpr auto m_tintSprite = 0x1a9; // bool
		constexpr auto m_spriteColor = 0x1ac; // Color32
		constexpr auto m_StyleSheet = 0x1b0; // TMP_StyleSheet
		constexpr auto m_TextStyle = 0x1b8; // TMP_Style
		constexpr auto m_TextStyleHashCode = 0x1c0; // int
		constexpr auto m_overrideHtmlColors = 0x1c4; // bool
		constexpr auto m_faceColor = 0x1c8; // Color32
		constexpr auto m_outlineColor = 0x1cc; // Color32
		constexpr auto m_outlineWidth = 0x1d0; // float
		constexpr auto m_fontSize = 0x1d4; // float
		constexpr auto m_currentFontSize = 0x1d8; // float
		constexpr auto m_fontSizeBase = 0x1dc; // float
		constexpr auto m_sizeStack = 0x1e0; // TMP_TextProcessingStack(float)
		constexpr auto m_fontWeight = 0x200; // FontWeight
		constexpr auto m_FontWeightInternal = 0x204; // FontWeight
		constexpr auto m_FontWeightStack = 0x208; // TMP_TextProcessingStack(FontWeight)
		constexpr auto m_enableAutoSizing = 0x228; // bool
		constexpr auto m_maxFontSize = 0x22c; // float
		constexpr auto m_minFontSize = 0x230; // float
		constexpr auto m_AutoSizeIterationCount = 0x234; // int
		constexpr auto m_AutoSizeMaxIterationCount = 0x238; // int
		constexpr auto m_IsAutoSizePointSizeSet = 0x23c; // bool
		constexpr auto m_fontSizeMin = 0x240; // float
		constexpr auto m_fontSizeMax = 0x244; // float
		constexpr auto m_fontStyle = 0x248; // FontStyles
		constexpr auto m_FontStyleInternal = 0x24c; // FontStyles
		constexpr auto m_fontStyleStack = 0x250; // TMP_FontStyleStack
		constexpr auto m_isUsingBold = 0x25a; // bool
		constexpr auto m_HorizontalAlignment = 0x25c; // HorizontalAlignmentOptions
		constexpr auto m_VerticalAlignment = 0x260; // VerticalAlignmentOptions
		constexpr auto m_textAlignment = 0x264; // TextAlignmentOptions
		constexpr auto m_lineJustification = 0x268; // HorizontalAlignmentOptions
		constexpr auto m_lineJustificationStack = 0x270; // TMP_TextProcessingStack(HorizontalAlignmentOptions)
		constexpr auto m_textContainerLocalCorners = 0x290; // Vector3[]
		constexpr auto m_characterSpacing = 0x298; // float
		constexpr auto m_cSpacing = 0x29c; // float
		constexpr auto m_monoSpacing = 0x2a0; // float
		constexpr auto m_wordSpacing = 0x2a4; // float
		constexpr auto m_lineSpacing = 0x2a8; // float
		constexpr auto m_lineSpacingDelta = 0x2ac; // float
		constexpr auto m_lineHeight = 0x2b0; // float
		constexpr auto m_IsDrivenLineSpacing = 0x2b4; // bool
		constexpr auto m_lineSpacingMax = 0x2b8; // float
		constexpr auto m_paragraphSpacing = 0x2bc; // float
		constexpr auto m_charWidthMaxAdj = 0x2c0; // float
		constexpr auto m_charWidthAdjDelta = 0x2c4; // float
		constexpr auto m_enableWordWrapping = 0x2c8; // bool
		constexpr auto m_isCharacterWrappingEnabled = 0x2c9; // bool
		constexpr auto m_isNonBreakingSpace = 0x2ca; // bool
		constexpr auto m_isIgnoringAlignment = 0x2cb; // bool
		constexpr auto m_wordWrappingRatios = 0x2cc; // float
		constexpr auto m_overflowMode = 0x2d0; // TextOverflowModes
		constexpr auto m_firstOverflowCharacterIndex = 0x2d4; // int
		constexpr auto m_linkedTextComponent = 0x2d8; // TMP_Text
		constexpr auto parentLinkedComponent = 0x2e0; // TMP_Text
		constexpr auto m_isTextTruncated = 0x2e8; // bool
		constexpr auto m_enableKerning = 0x2e9; // bool
		constexpr auto m_GlyphHorizontalAdvanceAdjustment = 0x2ec; // float
		constexpr auto m_enableExtraPadding = 0x2f0; // bool
		constexpr auto checkPaddingRequired = 0x2f1; // bool
		constexpr auto m_isRichText = 0x2f2; // bool
		constexpr auto m_parseCtrlCharacters = 0x2f3; // bool
		constexpr auto m_isOverlay = 0x2f4; // bool
		constexpr auto m_isOrthographic = 0x2f5; // bool
		constexpr auto m_isCullingEnabled = 0x2f6; // bool
		constexpr auto m_isMaskingEnabled = 0x2f7; // bool
		constexpr auto isMaskUpdateRequired = 0x2f8; // bool
		constexpr auto m_ignoreCulling = 0x2f9; // bool
		constexpr auto m_horizontalMapping = 0x2fc; // TextureMappingOptions
		constexpr auto m_verticalMapping = 0x300; // TextureMappingOptions
		constexpr auto m_uvLineOffset = 0x304; // float
		constexpr auto m_renderMode = 0x308; // TextRenderFlags
		constexpr auto m_geometrySortingOrder = 0x30c; // VertexSortingOrder
		constexpr auto m_IsTextObjectScaleStatic = 0x310; // bool
		constexpr auto m_VertexBufferAutoSizeReduction = 0x311; // bool
		constexpr auto m_firstVisibleCharacter = 0x314; // int
		constexpr auto m_maxVisibleCharacters = 0x318; // int
		constexpr auto m_maxVisibleWords = 0x31c; // int
		constexpr auto m_maxVisibleLines = 0x320; // int
		constexpr auto m_useMaxVisibleDescender = 0x324; // bool
		constexpr auto m_pageToDisplay = 0x328; // int
		constexpr auto m_isNewPage = 0x32c; // bool
		constexpr auto m_margin = 0x330; // Vector4
		constexpr auto m_marginLeft = 0x340; // float
		constexpr auto m_marginRight = 0x344; // float
		constexpr auto m_marginWidth = 0x348; // float
		constexpr auto m_marginHeight = 0x34c; // float
		constexpr auto m_width = 0x350; // float
		constexpr auto m_textInfo = 0x358; // TMP_TextInfo
		constexpr auto m_havePropertiesChanged = 0x360; // bool
		constexpr auto m_isUsingLegacyAnimationComponent = 0x361; // bool
		constexpr auto m_transform = 0x368; // Transform
		constexpr auto m_rectTransform = 0x370; // RectTransform
		constexpr auto m_PreviousRectTransformSize = 0x378; // Vector2
		constexpr auto m_PreviousPivotPosition = 0x380; // Vector2
		constexpr auto (autoSizeTextContainer)k__BackingField = 0x388; // bool
		constexpr auto m_autoSizeTextContainer = 0x389; // bool
		constexpr auto m_mesh = 0x390; // Mesh
		constexpr auto m_isVolumetricText = 0x398; // bool
		constexpr auto OnPreRenderText = 0x3a0; // Action(TMP_TextInfo)
		constexpr auto m_spriteAnimator = 0x3a8; // TMP_SpriteAnimator
		constexpr auto m_flexibleHeight = 0x3b0; // float
		constexpr auto m_flexibleWidth = 0x3b4; // float
		constexpr auto m_minWidth = 0x3b8; // float
		constexpr auto m_minHeight = 0x3bc; // float
		constexpr auto m_maxWidth = 0x3c0; // float
		constexpr auto m_maxHeight = 0x3c4; // float
		constexpr auto m_LayoutElement = 0x3c8; // LayoutElement
		constexpr auto m_preferredWidth = 0x3d0; // float
		constexpr auto m_renderedWidth = 0x3d4; // float
		constexpr auto m_isPreferredWidthDirty = 0x3d8; // bool
		constexpr auto m_preferredHeight = 0x3dc; // float
		constexpr auto m_renderedHeight = 0x3e0; // float
		constexpr auto m_isPreferredHeightDirty = 0x3e4; // bool
		constexpr auto m_isCalculatingPreferredValues = 0x3e5; // bool
		constexpr auto m_layoutPriority = 0x3e8; // int
		constexpr auto m_isLayoutDirty = 0x3ec; // bool
		constexpr auto m_isAwake = 0x3ed; // bool
		constexpr auto m_isWaitingOnResourceLoad = 0x3ee; // bool
		constexpr auto m_inputSource = 0x3f0; // TMP_Text.TextInputSources
		constexpr auto m_fontScaleMultiplier = 0x3f4; // float
		constexpr auto tag_LineIndent = 0x3f8; // float
		constexpr auto tag_Indent = 0x3fc; // float
		constexpr auto m_indentStack = 0x400; // TMP_TextProcessingStack(float)
		constexpr auto tag_NoParsing = 0x420; // bool
		constexpr auto m_isParsingText = 0x421; // bool
		constexpr auto m_FXMatrix = 0x424; // Matrix4x4
		constexpr auto m_isFXMatrixSet = 0x464; // bool
		constexpr auto m_TextProcessingArray = 0x468; // TMP_Text.UnicodeChar[]
		constexpr auto m_InternalTextProcessingArraySize = 0x470; // int
		constexpr auto m_internalCharacterInfo = 0x478; // TMP_CharacterInfo[]
		constexpr auto m_totalCharacterCount = 0x480; // int
		constexpr auto m_characterCount = 0x484; // int
		constexpr auto m_firstCharacterOfLine = 0x488; // int
		constexpr auto m_firstVisibleCharacterOfLine = 0x48c; // int
		constexpr auto m_lastCharacterOfLine = 0x490; // int
		constexpr auto m_lastVisibleCharacterOfLine = 0x494; // int
		constexpr auto m_lineNumber = 0x498; // int
		constexpr auto m_lineVisibleCharacterCount = 0x49c; // int
		constexpr auto m_pageNumber = 0x4a0; // int
		constexpr auto m_PageAscender = 0x4a4; // float
		constexpr auto m_maxTextAscender = 0x4a8; // float
		constexpr auto m_maxCapHeight = 0x4ac; // float
		constexpr auto m_ElementAscender = 0x4b0; // float
		constexpr auto m_ElementDescender = 0x4b4; // float
		constexpr auto m_maxLineAscender = 0x4b8; // float
		constexpr auto m_maxLineDescender = 0x4bc; // float
		constexpr auto m_startOfLineAscender = 0x4c0; // float
		constexpr auto m_startOfLineDescender = 0x4c4; // float
		constexpr auto m_lineOffset = 0x4c8; // float
		constexpr auto m_meshExtents = 0x4cc; // Extents
		constexpr auto m_htmlColor = 0x4dc; // Color32
		constexpr auto m_colorStack = 0x4e0; // TMP_TextProcessingStack(Color32)
		constexpr auto m_underlineColorStack = 0x500; // TMP_TextProcessingStack(Color32)
		constexpr auto m_strikethroughColorStack = 0x520; // TMP_TextProcessingStack(Color32)
		constexpr auto m_HighlightStateStack = 0x540; // TMP_TextProcessingStack(HighlightState)
		constexpr auto m_colorGradientPreset = 0x570; // TMP_ColorGradient
		constexpr auto m_colorGradientStack = 0x578; // TMP_TextProcessingStack(TMP_ColorGradient)
		constexpr auto m_colorGradientPresetIsTinted = 0x5a0; // bool
		constexpr auto m_tabSpacing = 0x5a4; // float
		constexpr auto m_spacing = 0x5a8; // float
		constexpr auto m_TextStyleStacks = 0x5b0; // TMP_TextProcessingStack(int)[]
		constexpr auto m_TextStyleStackDepth = 0x5b8; // int
		constexpr auto m_ItalicAngleStack = 0x5c0; // TMP_TextProcessingStack(int)
		constexpr auto m_ItalicAngle = 0x5e0; // int
		constexpr auto m_actionStack = 0x5e8; // TMP_TextProcessingStack(int)
		constexpr auto m_padding = 0x608; // float
		constexpr auto m_baselineOffset = 0x60c; // float
		constexpr auto m_baselineOffsetStack = 0x610; // TMP_TextProcessingStack(float)
		constexpr auto m_xAdvance = 0x630; // float
		constexpr auto m_textElementType = 0x634; // TMP_TextElementType
		constexpr auto m_cached_TextElement = 0x638; // TMP_TextElement
		constexpr auto m_Ellipsis = 0x640; // TMP_Text.SpecialCharacter
		constexpr auto m_Underline = 0x660; // TMP_Text.SpecialCharacter
		constexpr auto m_defaultSpriteAsset = 0x680; // TMP_SpriteAsset
		constexpr auto m_currentSpriteAsset = 0x688; // TMP_SpriteAsset
		constexpr auto m_spriteCount = 0x690; // int
		constexpr auto m_spriteIndex = 0x694; // int
		constexpr auto m_spriteAnimationID = 0x698; // int
		constexpr auto m_ignoreActiveState = 0x69c; // bool
		constexpr auto m_TextBackingArray = 0x6a0; // TMP_Text.TextBackingContainer
		constexpr auto k_Power = 0x6b0; // Decimal[]
	}

	namespace n___BinaryParser {
		constexpr auto objectReader = 0x10; // ObjectReader
		constexpr auto input = 0x18; // Stream
		constexpr auto topId = 0x20; // long
		constexpr auto headerId = 0x28; // long
		constexpr auto objectMapIdTable = 0x30; // SizedArray
		constexpr auto assemIdToAssemblyTable = 0x38; // SizedArray
		constexpr auto stack = 0x40; // SerStack
		constexpr auto expectedType = 0x48; // BinaryTypeEnum
		constexpr auto expectedTypeInformation = 0x50; // object
		constexpr auto PRS = 0x58; // ParseRecord
		constexpr auto systemAssemblyInfo = 0x60; // BinaryAssemblyInfo
		constexpr auto dataReader = 0x68; // BinaryReader
		constexpr auto opPool = 0x70; // SerStack
		constexpr auto binaryObject = 0x78; // BinaryObject
		constexpr auto bowm = 0x80; // BinaryObjectWithMap
		constexpr auto bowmt = 0x88; // BinaryObjectWithMapTyped
		constexpr auto objectString = 0x90; // BinaryObjectString
		constexpr auto crossAppDomainString = 0x98; // BinaryCrossAppDomainString
		constexpr auto memberPrimitiveTyped = 0xa0; // MemberPrimitiveTyped
		constexpr auto byteBuffer = 0xa8; // byte[]
		constexpr auto memberPrimitiveUnTyped = 0xb0; // MemberPrimitiveUnTyped
		constexpr auto memberReference = 0xb8; // MemberReference
		constexpr auto objectNull = 0xc0; // ObjectNull
	}

	namespace n_Assembly.UnmanagedMemoryStreamForModule { // : UnmanagedMemoryStream
		constexpr auto module = 0x68; // Module
	}

	namespace n_JapaneseCalendar { // : Calendar
		constexpr auto helper = 0x20; // GregorianCalendarHelper
	}

	namespace n_MetaData {
		constexpr auto content = 0x10; // string
		constexpr auto platform = 0x18; // string
	}

	namespace n_XmlAttribute { // : XmlNode
		constexpr auto name = 0x18; // XmlName
		constexpr auto lastChild = 0x20; // XmlLinkedNode
	}

	namespace n_VisualEffectActivationClip { // : PlayableAsset
		constexpr auto activationBehavior = 0x18; // VisualEffectActivationBehaviour
	}

	namespace n_CADMessageBase {
		constexpr auto _args = 0x10; // object[]
		constexpr auto _serializedArgs = 0x18; // byte[]
		constexpr auto _propertyCount = 0x20; // int
		constexpr auto _callContext = 0x28; // CADArgHolder
		constexpr auto serializedMethod = 0x30; // byte[]
	}

	namespace n_ShellBehaviour { // : MonoBehaviour
		constexpr auto Connectors = 0x18; // Transform[]
		constexpr auto Rigidbody = 0x20; // Rigidbody
		constexpr auto ConnecterExist = 0x28; // bool
		constexpr auto connectorsPosition = 0x30; // Vector3[]
		constexpr auto connectorsRotation = 0x38; // Quaternion[]
		constexpr auto connectorsRigidbody = 0x40; // Rigidbody[]
		constexpr auto spawnTime = 0x48; // float
		constexpr auto poolHandle = 0x50; // InvokeHandle
		constexpr auto isConnecterAlive = 0x58; // bool
		constexpr auto lastHit = 0x5c; // float
		constexpr auto (lifeTime)k__BackingField = 0x60; // float
		constexpr auto (inPool)k__BackingField = 0x64; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x68; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x6c; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x70; // bool
		constexpr auto needsParented = 0x71; // bool
		constexpr auto noPoolMode = 0x72; // bool
	}

	namespace n_SolverState {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_X509ExtensionCollection { // : CollectionBase
		constexpr auto readOnly = 0x18; // bool
	}

	namespace n_TMP_Settings { // : ScriptableObject
		constexpr auto m_enableWordWrapping = 0x18; // bool
		constexpr auto m_enableKerning = 0x19; // bool
		constexpr auto m_enableExtraPadding = 0x1a; // bool
		constexpr auto m_enableTintAllSprites = 0x1b; // bool
		constexpr auto m_enableParseEscapeCharacters = 0x1c; // bool
		constexpr auto m_EnableRaycastTarget = 0x1d; // bool
		constexpr auto m_GetFontFeaturesAtRuntime = 0x1e; // bool
		constexpr auto m_missingGlyphCharacter = 0x20; // int
		constexpr auto m_warningsDisabled = 0x24; // bool
		constexpr auto m_defaultFontAsset = 0x28; // TMP_FontAsset
		constexpr auto m_defaultFontAssetPath = 0x30; // string
		constexpr auto m_defaultFontSize = 0x38; // float
		constexpr auto m_defaultAutoSizeMinRatio = 0x3c; // float
		constexpr auto m_defaultAutoSizeMaxRatio = 0x40; // float
		constexpr auto m_defaultTextMeshProTextContainerSize = 0x44; // Vector2
		constexpr auto m_defaultTextMeshProUITextContainerSize = 0x4c; // Vector2
		constexpr auto m_autoSizeTextContainer = 0x54; // bool
		constexpr auto m_IsTextObjectScaleStatic = 0x55; // bool
		constexpr auto m_fallbackFontAssets = 0x58; // List(TMP_FontAsset)
		constexpr auto m_matchMaterialPreset = 0x60; // bool
		constexpr auto m_defaultSpriteAsset = 0x68; // TMP_SpriteAsset
		constexpr auto m_defaultSpriteAssetPath = 0x70; // string
		constexpr auto m_enableEmojiSupport = 0x78; // bool
		constexpr auto m_MissingCharacterSpriteUnicode = 0x7c; // uint
		constexpr auto m_defaultColorGradientPresetsPath = 0x80; // string
		constexpr auto m_defaultStyleSheet = 0x88; // TMP_StyleSheet
		constexpr auto m_StyleSheetsResourcePath = 0x90; // string
		constexpr auto m_leadingCharacters = 0x98; // TextAsset
		constexpr auto m_followingCharacters = 0xa0; // TextAsset
		constexpr auto m_linebreakingRules = 0xa8; // TMP_Settings.LineBreakingTable
		constexpr auto m_UseModernHangulLineBreakingRules = 0xb0; // bool
	}

	namespace n_DictationRecognizer {
		constexpr auto m_Recognizer = 0x10; // IntPtr
		constexpr auto DictationHypothesis = 0x18; // DictationRecognizer.DictationHypothesisDelegate
		constexpr auto DictationResult = 0x20; // DictationRecognizer.DictationResultDelegate
		constexpr auto DictationComplete = 0x28; // DictationRecognizer.DictationCompletedDelegate
		constexpr auto DictationError = 0x30; // DictationRecognizer.DictationErrorHandler
	}

	namespace n_IOException { // : SystemException
		constexpr auto _maybeFullPath = 0x88; // string
	}

	namespace n_Platform { // : MonoBehaviour
		constexpr auto tr = 0x18; // Transform
		constexpr auto Position = 0x20; // Vector3
		constexpr auto lastKnowPositionFrame = 0x2c; // int
		constexpr auto Delta = 0x30; // Vector3
	}

	namespace n_FollSiblingQuery { // : BaseAxisQuery
		constexpr auto elementStk = 0x58; // ClonableStack(XPathNavigator)
		constexpr auto parentStk = 0x60; // List(XPathNavigator)
		constexpr auto nextInput = 0x68; // XPathNavigator
	}

	namespace n_VaultingSettings.Conditions {
		constexpr auto AreaConditions = 0x10; // VaultingSettings.ConditionBox[]
		constexpr auto LineConditions = 0x18; // VaultingSettings.ConditionLine[]
	}

	namespace n_MonoProperty { // : RuntimePropertyInfo
		constexpr auto klass = 0x10; // IntPtr
		constexpr auto prop = 0x18; // IntPtr
		constexpr auto info = 0x20; // MonoPropertyInfo
		constexpr auto cached = 0x50; // PInfo
		constexpr auto cached_getter = 0x58; // MonoProperty.GetterAdapter
	}

	namespace n_THPRagdoll { // : MonoBehaviour
		constexpr auto Joints = 0x18; // Transform[]
		constexpr auto Rigidbodies = 0x20; // Rigidbody[]
		constexpr auto mInited = 0x28; // bool
		constexpr auto thp = 0x30; // THPController
		constexpr auto (lifeTime)k__BackingField = 0x38; // float
		constexpr auto (inPool)k__BackingField = 0x3c; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x40; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x44; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x48; // bool
	}

	namespace n_Dropdown { // : Selectable
		constexpr auto m_Template = 0xf8; // RectTransform
		constexpr auto m_CaptionText = 0x100; // Text
		constexpr auto m_CaptionImage = 0x108; // Image
		constexpr auto m_ItemText = 0x110; // Text
		constexpr auto m_ItemImage = 0x118; // Image
		constexpr auto m_Value = 0x120; // int
		constexpr auto m_Options = 0x128; // Dropdown.OptionDataList
		constexpr auto m_OnValueChanged = 0x130; // Dropdown.DropdownEvent
		constexpr auto m_AlphaFadeSpeed = 0x138; // float
		constexpr auto m_Dropdown = 0x140; // GameObject
		constexpr auto m_Blocker = 0x148; // GameObject
		constexpr auto m_Items = 0x150; // List(Dropdown.DropdownItem)
		constexpr auto m_AlphaTweenRunner = 0x158; // TweenRunner(FloatTween)
		constexpr auto validTemplate = 0x160; // bool
	}

	namespace n_SpawnCheckTestDebug { // : MonoBehaviour
		constexpr auto CornerCount = 0x18; // int
		constexpr auto Radius = 0x1c; // float
		constexpr auto LayerCount = 0x20; // int
		constexpr auto MinimumDot = 0x24; // float
		constexpr auto Distance = 0x28; // float
	}

	namespace n_ExecutionContext { // : IDisposable
		constexpr auto _syncContext = 0x10; // SynchronizationContext
		constexpr auto _syncContextNoFlow = 0x18; // SynchronizationContext
		constexpr auto _logicalCallContext = 0x20; // LogicalCallContext
		constexpr auto _illogicalCallContext = 0x28; // IllogicalCallContext
		constexpr auto _flags = 0x30; // ExecutionContext.Flags
		constexpr auto _localValues = 0x38; // Dictionary(IAsyncLocal, object)
		constexpr auto _localChangeNotifications = 0x40; // List(IAsyncLocal)
	}

	namespace n_WeaponAccuracy { // : MonoBehaviour
		constexpr auto HipAccuracy = 0x18; // float
		constexpr auto AimAccuracy = 0x1c; // float
		constexpr auto MaxAccuracy = 0x20; // float
		constexpr auto baseEular = 0x24; // Vector3
		constexpr auto currentAccuracy = 0x30; // float
		constexpr auto lastSample = 0x34; // float
	}

	namespace n_MeshIdentity {
		constexpr auto Mesh = 0x10; // Mesh
		constexpr auto Material = 0x18; // Material
		constexpr auto bounds = 0x20; // Bounds
		constexpr auto hash = 0x38; // long
		constexpr auto Group = 0x40; // RendererHashGroup
	}

	namespace n_Overlay_VoiceChatElement { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto label = 0x20; // TextMeshProUGUI
		constexpr auto labelmute = 0x28; // TextMeshProUGUI
		constexpr auto img = 0x30; // Image
		constexpr auto Rect = 0x38; // RectTransform
		constexpr auto Icon = 0x40; // RawImage
		constexpr auto animation = 0x48; // SelfFramePlayer
		constexpr auto MutedIcon = 0x50; // Texture2D
		constexpr auto UnmutedIcon = 0x58; // Texture2D
		constexpr auto client = 0x60; // NetworkClient
		constexpr auto mKey = 0x68; // int
		constexpr auto pressTime = 0x6c; // float
		constexpr auto downFlag = 0x70; // bool
		constexpr auto channel = 0x71; // VoiceChannel
		constexpr auto mlastUpdate = 0x74; // float
	}

	namespace n_NtlmSession {
		constexpr auto message = 0x10; // MessageBase
	}

	namespace n_Panel { // : BaseVisualElementPanel
		constexpr auto m_RootContainer = 0x30; // VisualElement
		constexpr auto m_VisualTreeUpdater = 0x38; // VisualTreeUpdater
		constexpr auto m_Version = 0x40; // uint
		constexpr auto m_RepaintVersion = 0x44; // uint
		constexpr auto m_MarkerUpdate = 0x48; // ProfilerMarker
		constexpr auto (dispatcher)k__BackingField = 0x50; // EventDispatcher
		constexpr auto (ownerObject)k__BackingField = 0x58; // ScriptableObject
		constexpr auto (contextType)k__BackingField = 0x60; // ContextType
		constexpr auto (focusController)k__BackingField = 0x68; // FocusController
		constexpr auto (IMGUIEventInterests)k__BackingField = 0x70; // EventInterests
		constexpr auto (IMGUIContainersCount)k__BackingField = 0x74; // int
		constexpr auto (rootIMGUIContainer)k__BackingField = 0x78; // IMGUIContainer
		constexpr auto m_ValidatingLayout = 0x80; // bool
	}

	namespace n_ScreenSpaceShadowResolvePass { // : ScriptableRenderPass
		constexpr auto m_ScreenSpaceShadowsMaterial = 0x68; // Material
		constexpr auto m_ScreenSpaceShadowmap = 0x70; // RenderTargetHandle
		constexpr auto m_RenderTextureDescriptor = 0x74; // RenderTextureDescriptor
	}

	namespace n_RendererIdentity {
		constexpr auto LODs = 0x10; // List(MeshIdentity)[]
		constexpr auto Prefab = 0x18; // GameObject
		constexpr auto HasCollider = 0x20; // bool
		constexpr auto ColliderCenter = 0x24; // Vector3
		constexpr auto ColliderRadius = 0x30; // float
		constexpr auto ColliderHeight = 0x34; // float
		constexpr auto ActiveLOD = 0x38; // int
		constexpr auto MaxLODCount = 0x3c; // int
		constexpr auto LOD0ScreenHeight = 0x40; // float
		constexpr auto LOD1ScreenHeight = 0x44; // float
		constexpr auto LOD2ScreenHeight = 0x48; // float
		constexpr auto LOD3ScreenHeight = 0x4c; // float
		constexpr auto LOD4ScreenHeight = 0x50; // float
		constexpr auto LOD5ScreenHeight = 0x54; // float
		constexpr auto LOD6ScreenHeight = 0x58; // float
		constexpr auto m_cleared = 0x5c; // bool
	}

	namespace n_Capture {
		constexpr auto _text = 0x10; // string
		constexpr auto _index = 0x18; // int
		constexpr auto _length = 0x1c; // int
	}

	namespace n_Pose {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _pos = 0x18; // AlignedVector3Array
	}

	namespace n_LingerOption {
		constexpr auto enabled = 0x10; // bool
		constexpr auto lingerTime = 0x14; // int
	}

	namespace n_MainMenu_ServersOnline { // : MonoBehaviour
		constexpr auto Child = 0x18; // GameObject
		constexpr auto Label = 0x20; // TextMeshProUGUI
	}

	namespace n_MovementShakes {
		constexpr auto Onfall = 0x10; // AudioClip[]
		constexpr auto OnJump = 0x18; // AudioClip[]
		constexpr auto Rank1 = 0x20; // AudioClip[]
		constexpr auto Rank2 = 0x28; // AudioClip[]
		constexpr auto Rank3 = 0x30; // AudioClip[]
		constexpr auto Rank4 = 0x38; // AudioClip[]
		constexpr auto Rank5 = 0x40; // AudioClip[]
		constexpr auto _arr = 0x48; // AudioClip[][]
	}

	namespace n_AssemblyCompanyAttribute { // : Attribute
		constexpr auto m_company = 0x10; // string
	}

	namespace n_SortedList.SortedListEnumerator { // : IDictionaryEnumerator
		constexpr auto sortedList = 0x10; // SortedList
		constexpr auto key = 0x18; // object
		constexpr auto value = 0x20; // object
		constexpr auto index = 0x28; // int
		constexpr auto startIndex = 0x2c; // int
		constexpr auto endIndex = 0x30; // int
		constexpr auto version = 0x34; // int
		constexpr auto current = 0x38; // bool
		constexpr auto getObjectRetType = 0x3c; // int
	}

	namespace n_DtdParser { // : IDtdParser
		constexpr auto readerAdapter = 0x10; // IDtdParserAdapter
		constexpr auto readerAdapterWithValidation = 0x18; // IDtdParserAdapterWithValidation
		constexpr auto nameTable = 0x20; // XmlNameTable
		constexpr auto schemaInfo = 0x28; // SchemaInfo
		constexpr auto xmlCharType = 0x30; // XmlCharType
		constexpr auto systemId = 0x38; // string
		constexpr auto publicId = 0x40; // string
		constexpr auto normalize = 0x48; // bool
		constexpr auto validate = 0x49; // bool
		constexpr auto supportNamespaces = 0x4a; // bool
		constexpr auto v1Compat = 0x4b; // bool
		constexpr auto chars = 0x50; // char[]
		constexpr auto charsUsed = 0x58; // int
		constexpr auto curPos = 0x5c; // int
		constexpr auto scanningFunction = 0x60; // DtdParser.ScanningFunction
		constexpr auto nextScaningFunction = 0x64; // DtdParser.ScanningFunction
		constexpr auto savedScanningFunction = 0x68; // DtdParser.ScanningFunction
		constexpr auto whitespaceSeen = 0x6c; // bool
		constexpr auto tokenStartPos = 0x70; // int
		constexpr auto colonPos = 0x74; // int
		constexpr auto internalSubsetValueSb = 0x78; // StringBuilder
		constexpr auto externalEntitiesDepth = 0x80; // int
		constexpr auto currentEntityId = 0x84; // int
		constexpr auto freeFloatingDtd = 0x88; // bool
		constexpr auto hasFreeFloatingInternalSubset = 0x89; // bool
		constexpr auto stringBuilder = 0x90; // StringBuilder
		constexpr auto condSectionDepth = 0x98; // int
		constexpr auto literalLineInfo = 0x9c; // LineInfo
		constexpr auto literalQuoteChar = 0xa4; // char
		constexpr auto documentBaseUri = 0xa8; // string
		constexpr auto externalDtdBaseUri = 0xb0; // string
		constexpr auto undeclaredNotations = 0xb8; // Dictionary(string, DtdParser.UndeclaredNotation)
		constexpr auto condSectionEntityIds = 0xc0; // int[]
	}

	namespace n_MasterServerConnectionServer {
		constexpr auto IsConnected = 0x10; // bool
		constexpr auto Region = 0x14; // Region
		constexpr auto Name = 0x18; // string
		constexpr auto Map = 0x20; // string
		constexpr auto Gamemode = 0x28; // GameMode
		constexpr auto isHardcore = 0x29; // bool
		constexpr auto MaxPlayers = 0x2c; // int
		constexpr auto Hz = 0x30; // int
		constexpr auto isDay = 0x34; // bool
		constexpr auto mPort = 0x38; // int
		constexpr auto mSocket = 0x40; // Socket
		constexpr auto mConnection = 0x48; // Connection
		constexpr auto mCounter = 0x50; // Stopwatch
		constexpr auto mDestination = 0x58; // EndPoint
		constexpr auto mGoingRequests = 0x60; // Queue(MasterServerConnectionServer.request)
	}

	namespace n_EtwSession {
		constexpr auto m_etwSessionId = 0x10; // int
		constexpr auto m_activityFilter = 0x18; // ActivityFilter
	}

	namespace n_UTF8Encoding { // : Encoding
		constexpr auto emitUTF8Identifier = 0x38; // bool
		constexpr auto isThrowException = 0x39; // bool
	}

	namespace n_Mixers {
		constexpr auto Main = 0x10; // AudioMixer
		constexpr auto Voip = 0x18; // AudioMixerGroup
		constexpr auto Ambient = 0x20; // AudioMixerGroup
	}

	namespace n_RegexBoyerMoore {
		constexpr auto _positive = 0x10; // int[]
		constexpr auto _negativeASCII = 0x18; // int[]
		constexpr auto _negativeUnicode = 0x20; // int[][]
		constexpr auto _pattern = 0x28; // string
		constexpr auto _lowASCII = 0x30; // int
		constexpr auto _highASCII = 0x34; // int
		constexpr auto _rightToLeft = 0x38; // bool
		constexpr auto _caseInsensitive = 0x39; // bool
		constexpr auto _culture = 0x40; // CultureInfo
	}

	namespace n_DiscreteCollisionDetectorInterface.Result { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_AllowedFiringTypes {
		constexpr auto Single = 0x10; // bool
		constexpr auto Double = 0x11; // bool
		constexpr auto Triple = 0x12; // bool
		constexpr auto Auto = 0x13; // bool
	}

	namespace n_EventHandlerList.ListEntry {
		constexpr auto next = 0x10; // EventHandlerList.ListEntry
		constexpr auto key = 0x18; // object
		constexpr auto handler = 0x20; // Delegate
	}

	namespace n_MasterServerConnectionPlayer.Token {
		constexpr auto Server = 0x10; // EndPoint
		constexpr auto ValidLifeTime = 0x18; // float
		constexpr auto Value = 0x20; // ulong
	}

	namespace n_MenuAudio { // : IEnumerable(IOptionsElement)
		constexpr auto Master = 0x10; // SliderBehaviour
		constexpr auto Game = 0x18; // SliderBehaviour
		constexpr auto Music = 0x20; // SliderBehaviour
		constexpr auto Speech = 0x28; // SliderBehaviour
		constexpr auto Voip = 0x30; // SliderBehaviour
		constexpr auto DisableEnemyVoiceChat = 0x38; // ToggleBehaviour
		constexpr auto Ambient = 0x40; // SliderBehaviour
		constexpr auto MicDevice = 0x48; // MicDeviceBehaviour
		constexpr auto MicVolume = 0x50; // SliderBehaviour
		constexpr auto AudioChannels = 0x58; // EnumBehaviour
	}

	namespace n_AesTransform { // : SymmetricTransform
		constexpr auto expandedKey = 0x58; // uint[]
		constexpr auto Nk = 0x60; // int
		constexpr auto Nr = 0x64; // int
	}

	namespace n_VFXEventAttribute { // : IDisposable
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_Owner = 0x18; // bool
		constexpr auto m_VfxAsset = 0x20; // VisualEffectAsset
	}

	namespace n_Ladder { // : Climbable
		constexpr auto forward = 0x78; // Vector3
	}

	namespace n_AGadgetSounds {
		constexpr auto DrawIn = 0x10; // AudioClip
		constexpr auto DrawOut = 0x18; // AudioClip
		constexpr auto Actions = 0x20; // AudioClip[]
	}

	namespace n_Box2DShape { // : PolyhedralConvexShape
		constexpr auto _normals = 0x30; // Vector3Array
		constexpr auto _vertices = 0x38; // Vector3Array
	}

	namespace n_MicTestBehaviour { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto mIsListening = 0x1c; // bool
		constexpr auto Button = 0x20; // GraphicRevertedButton
		constexpr auto Text = 0x28; // TextMeshProUGUI
		constexpr auto Source = 0x30; // AudioSource
		constexpr auto MicVolume = 0x38; // Slider
		constexpr auto OnListeningIcon = 0x40; // RawImage
	}

	namespace n_TripleDESTransform { // : SymmetricTransform
		constexpr auto E1 = 0x58; // DESTransform
		constexpr auto D2 = 0x60; // DESTransform
		constexpr auto E3 = 0x68; // DESTransform
		constexpr auto D1 = 0x70; // DESTransform
		constexpr auto E2 = 0x78; // DESTransform
		constexpr auto D3 = 0x80; // DESTransform
	}

	namespace n_Light { // : Behaviour
		constexpr auto m_BakedIndex = 0x18; // int
	}

	namespace n_EventHandlerList {
		constexpr auto head = 0x10; // EventHandlerList.ListEntry
		constexpr auto parent = 0x18; // Component
	}

	namespace n_BuildableRallyPoint { // : Buildable
		constexpr auto mRally = 0x98; // SquadAbilityRallyPointBehaviour
	}

	namespace n_RenderPipeline {
		constexpr auto (disposed)k__BackingField = 0x10; // bool
	}

	namespace n_LangForUIText { // : MonoBehaviour
		constexpr auto WordID = 0x18; // int
		constexpr auto OutputEditing = 0x1c; // TextChanges
		constexpr auto Params = 0x20; // string[]
		constexpr auto mAwakeCalled = 0x28; // bool
		constexpr auto fitter = 0x30; // ContentSizeFitter
	}

	namespace n_AxisSweep3_32Bit { // : BroadphaseInterface
		constexpr auto _overlappingPairUserCallback = 0x30; // OverlappingPairCallback
	}

	namespace n_ExplosionProfile { // : ScriptableObject
		constexpr auto values = 0x18; // List(ExplosionProfile.Range)
	}

	namespace n_ToolThpOffsets {
		constexpr auto Position = 0x10; // ToolThpOffsets.PackedPosition
		constexpr auto Packad = 0x18; // ToolThpOffsets.Offset
		constexpr auto UseDefault = 0x20; // ToolThpOffsets.Offset
		constexpr auto UseAimdown = 0x28; // ToolThpOffsets.Offset
		constexpr auto RotateHeadOnAim = 0x30; // bool
	}

	namespace n_X509CertificateImpl { // : IDisposable
		constexpr auto cachedCertificateHash = 0x10; // byte[]
	}

	namespace n_DebuggerDisplayAttribute { // : Attribute
		constexpr auto name = 0x10; // string
		constexpr auto value = 0x18; // string
		constexpr auto type = 0x20; // string
	}

	namespace n_TooltipAttribute { // : PropertyAttribute
		constexpr auto tooltip = 0x18; // string
	}

	namespace n_DefaultPropertyAttribute { // : Attribute
		constexpr auto name = 0x10; // string
	}

	namespace n_RushBeaconWorldMap { // : MapWorldBehaviour
		constexpr auto (Beacon)k__BackingField = 0x40; // RushBeacon
		constexpr auto (MapUI)k__BackingField = 0x48; // RushBeaconUIMap
	}

	namespace n_SpawnInfo {
		constexpr auto prototype = 0x10; // PrototypeGameObject
		constexpr auto position = 0x18; // Vector3
		constexpr auto scaleFactor = 0x24; // Vector3
		constexpr auto rotation = 0x30; // Quaternion
		constexpr auto fitness = 0x40; // float
	}

	namespace n_Element { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_DiscreteDynamicsWorld { // : DynamicsWorld
		constexpr auto _simulationIslandManager = 0x78; // SimulationIslandManager
	}

	namespace n_MaterialPropertyBlock {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_CompareInfo { // : IDeserializationCallback
		constexpr auto m_name = 0x10; // string
		constexpr auto m_sortName = 0x18; // string
		constexpr auto win32LCID = 0x20; // int
		constexpr auto culture = 0x24; // int
		constexpr auto m_SortVersion = 0x28; // SortVersion
		constexpr auto collator = 0x30; // SimpleCollator
	}

	namespace n_CustomizePointParent { // : MonoBehaviour
		constexpr auto (isHovering)k__BackingField = 0x18; // bool
		constexpr auto WorldPoint = 0x20; // Transform
		constexpr auto _rect = 0x28; // RectTransform
		constexpr auto _img = 0x30; // RawImage
	}

	namespace n_BuildingLODRenderer { // : MonoBehaviour
		constexpr auto isDestroyed = 0x18; // bool
		constexpr auto forceRenderingOff = 0x19; // bool
		constexpr auto Mesh = 0x20; // Mesh
		constexpr auto Material = 0x28; // Material
		constexpr auto LocalToWorld = 0x30; // Matrix4x4
	}

	namespace n_CharacterArmor { // : MonoBehaviour
		constexpr auto Renderer = 0x18; // SkinnedMeshRenderer
		constexpr auto HelmetParent = 0x20; // Transform
		constexpr auto ChestParent = 0x28; // Transform
		constexpr auto ArmorBeltParent = 0x30; // Transform
		constexpr auto BackbagParent = 0x38; // Transform
		constexpr auto ThirdPerson = 0x40; // THPController
		constexpr auto State = 0x48; // PlayerNetworkState
		constexpr auto LocalArmors = 0x50; // THPArmor[]
		constexpr auto visualSpawns = 0x58; // GameObject[]
	}

	namespace n_DHIE { // : MonoBehaviour
		constexpr auto Canvas = 0x18; // CanvasGroup
		constexpr auto RawImage = 0x20; // RawImage
		constexpr auto initTime = 0x28; // float
		constexpr auto a = 0x2c; // float
	}

	namespace n_SizeVoteElement { // : MonoBehaviour
		constexpr auto SizeName = 0x18; // TextMeshProUGUI
		constexpr auto Votes = 0x20; // TextMeshProUGUI
		constexpr auto SelectedObject = 0x28; // GameObject
		constexpr auto mIndex = 0x30; // int
		constexpr auto mSize = 0x34; // Size
	}

	namespace n_InternalDecoderBestFitFallbackBuffer { // : DecoderFallbackBuffer
		constexpr auto cBestFit = 0x20; // char
		constexpr auto iCount = 0x24; // int
		constexpr auto iSize = 0x28; // int
		constexpr auto oFallback = 0x30; // InternalDecoderBestFitFallback
	}

	namespace n_PostProcess { // : ScriptableObject
		constexpr auto isActive = 0x18; // bool
		constexpr auto Material = 0x20; // Material
		constexpr auto OverwriteFlirColours = 0x28; // bool
		constexpr auto OverwrittenFlirFriendlyColor = 0x2c; // Color
		constexpr auto OverwrittenFlirEnemyColor = 0x3c; // Color
		constexpr auto EditorSceneDebug = 0x4c; // bool
	}

	namespace n_PhraseRecognizer {
		constexpr auto m_Recognizer = 0x10; // IntPtr
		constexpr auto OnPhraseRecognized = 0x18; // PhraseRecognizer.PhraseRecognizedDelegate
	}

	namespace n_SoapAttribute { // : Attribute
		constexpr auto _useAttribute = 0x10; // bool
		constexpr auto ProtXmlNamespace = 0x18; // string
		constexpr auto ReflectInfo = 0x20; // object
	}

	namespace n_SimpleCollator {
		constexpr auto textInfo = 0x10; // TextInfo
		constexpr auto cjkIndexer = 0x18; // CodePointIndexer
		constexpr auto contractions = 0x20; // Contraction[]
		constexpr auto level2Maps = 0x28; // Level2Map[]
		constexpr auto unsafeFlags = 0x30; // byte[]
		constexpr auto cjkCatTable = 0x38; // byte*
		constexpr auto cjkLv1Table = 0x40; // byte*
		constexpr auto cjkLv2Table = 0x48; // byte*
		constexpr auto cjkLv2Indexer = 0x50; // CodePointIndexer
		constexpr auto lcid = 0x58; // int
		constexpr auto frenchSort = 0x5c; // bool
	}

	namespace n_UniversalRenderPipelineEditorResources.ShaderResources {
		constexpr auto autodeskInteractivePS = 0x10; // Shader
		constexpr auto autodeskInteractiveTransparentPS = 0x18; // Shader
		constexpr auto autodeskInteractiveMaskedPS = 0x20; // Shader
		constexpr auto terrainDetailLitPS = 0x28; // Shader
		constexpr auto terrainDetailGrassPS = 0x30; // Shader
		constexpr auto terrainDetailGrassBillboardPS = 0x38; // Shader
		constexpr auto defaultSpeedTree7PS = 0x40; // Shader
		constexpr auto defaultSpeedTree8PS = 0x48; // Shader
	}

	namespace n_SquadAbilityHescoBehaviour { // : SquadAbilityBehaviour
		constexpr auto mBuildalbe = 0x78; // BuildableHesco
	}

	namespace n_WeaponAssetAnimations {
		constexpr auto BoltAction = 0x10; // AnimationClip
	}

	namespace n_DeployScreenBehaviour.SquadUI.SquadListViewUI {
		constexpr auto Pool = 0x10; // UIPool(SquadViewElement)
		constexpr auto elements = 0x18; // Dictionary(Squad, SquadViewElement)
		constexpr auto ObjectElement = 0x20; // GameObject
		constexpr auto Parent = 0x28; // Transform
	}

	namespace n_StrongNameKeyPair { // : ISerializable
		constexpr auto _publicKey = 0x10; // byte[]
		constexpr auto _keyPairContainer = 0x18; // string
		constexpr auto _keyPairExported = 0x20; // bool
		constexpr auto _keyPairArray = 0x28; // byte[]
	}

	namespace n_WhiteBalance { // : VolumeComponent
		constexpr auto temperature = 0x38; // ClampedFloatParameter
		constexpr auto tint = 0x40; // ClampedFloatParameter
	}

	namespace n_LambdaExpression { // : Expression
		constexpr auto _body = 0x10; // Expression
	}

	namespace n_CharacterPool.ToolAttachmentPool {
		constexpr auto mPool = 0x10; // Dictionary(int, Queue(PoolableAttachment))
		constexpr auto mPoolLocal = 0x18; // Dictionary(int, Queue(PoolableAttachment))
	}

	namespace n_LoadoutAttachmentPanel { // : MonoBehaviour
		constexpr auto thisrect = 0x18; // RectTransform
		constexpr auto Canvas = 0x20; // Canvas
		constexpr auto Panel = 0x28; // GameObject
		constexpr auto ContentParent = 0x30; // Transform
		constexpr auto PrefabTitle = 0x38; // GameObject
		constexpr auto PrefabElement = 0x40; // GameObject
		constexpr auto VerticaList = 0x48; // VerticalLayoutGroup
		constexpr auto spawnedTitles = 0x50; // List(LoadoutAttachmentTitle)
		constexpr auto spawnedItems = 0x58; // List(LoadoutAttachmentElement)
		constexpr auto registeredObjects = 0x60; // Dictionary(IAttachmentItem, RectTransform)
		constexpr auto titlePool = 0x68; // UIPool(LoadoutAttachmentTitle)
		constexpr auto itemPool = 0x70; // UIPool(LoadoutAttachmentElement)
		constexpr auto latestType = 0x78; // AttachmentType
		constexpr auto counter = 0x7c; // int
	}

	namespace n_DebugUI.IntField { // : DebugUI.Field(int)
		constexpr auto min = 0x50; // Func(int)
		constexpr auto max = 0x58; // Func(int)
		constexpr auto incStep = 0x60; // int
		constexpr auto intStepMult = 0x64; // int
	}

	namespace n_WellKnownServiceTypeEntry { // : TypeEntry
		constexpr auto obj_type = 0x20; // Type
		constexpr auto obj_uri = 0x28; // string
		constexpr auto obj_mode = 0x30; // WellKnownObjectMode
	}

	namespace n_Timer { // : MarshalByRefObject
		constexpr auto callback = 0x18; // TimerCallback
		constexpr auto state = 0x20; // object
		constexpr auto due_time_ms = 0x28; // long
		constexpr auto period_ms = 0x30; // long
		constexpr auto next_run = 0x38; // long
		constexpr auto disposed = 0x40; // bool
	}

	namespace n_ResourceManager {
		constexpr auto BaseNameField = 0x10; // string
		constexpr auto ResourceSets = 0x18; // Hashtable
		constexpr auto _resourceSets = 0x20; // Dictionary(string, ResourceSet)
		constexpr auto moduleDir = 0x28; // string
		constexpr auto MainAssembly = 0x30; // Assembly
		constexpr auto _locationInfo = 0x38; // Type
		constexpr auto _userResourceSet = 0x40; // Type
		constexpr auto _neutralResourcesCulture = 0x48; // CultureInfo
		constexpr auto _lastUsedResourceCache = 0x50; // ResourceManager.CultureNameResourceSetPair
		constexpr auto _ignoreCase = 0x58; // bool
		constexpr auto UseManifest = 0x59; // bool
		constexpr auto UseSatelliteAssem = 0x5a; // bool
		constexpr auto _fallbackLoc = 0x5c; // UltimateResourceFallbackLocation
		constexpr auto _satelliteContractVersion = 0x60; // Version
		constexpr auto _lookedForSatelliteContractVersion = 0x68; // bool
		constexpr auto _callingAssembly = 0x70; // Assembly
		constexpr auto m_callingAssembly = 0x78; // RuntimeAssembly
		constexpr auto resourceGroveler = 0x80; // IResourceGroveler
	}

	namespace n_WorleyNoiseCPU { // : NoiseCPU
		constexpr auto (Jitter)k__BackingField = 0x28; // float
		constexpr auto (Distance)k__BackingField = 0x2c; // VORONOI_DISTANCE
		constexpr auto (Combination)k__BackingField = 0x30; // VORONOI_COMBINATION
		constexpr auto (Perm)k__BackingField = 0x38; // PermutationTable
	}

	namespace n_JObject {
		constexpr auto (Kind)k__BackingField = 0x10; // JObjectKind
		constexpr auto (ObjectValue)k__BackingField = 0x18; // Dictionary(string, JObject)
		constexpr auto (ArrayValue)k__BackingField = 0x20; // List(JObject)
		constexpr auto (StringValue)k__BackingField = 0x28; // string
		constexpr auto (BooleanValue)k__BackingField = 0x30; // bool
		constexpr auto (DoubleValue)k__BackingField = 0x38; // double
		constexpr auto (FloatValue)k__BackingField = 0x40; // float
		constexpr auto (ULongValue)k__BackingField = 0x48; // ulong
		constexpr auto (LongValue)k__BackingField = 0x50; // long
		constexpr auto (UIntValue)k__BackingField = 0x58; // uint
		constexpr auto (IntValue)k__BackingField = 0x5c; // int
		constexpr auto (UShortValue)k__BackingField = 0x60; // ushort
		constexpr auto (ShortValue)k__BackingField = 0x62; // short
		constexpr auto (ByteValue)k__BackingField = 0x64; // byte
		constexpr auto (SByteValue)k__BackingField = 0x65; // sbyte
		constexpr auto (IsNegative)k__BackingField = 0x66; // bool
		constexpr auto (IsFractional)k__BackingField = 0x67; // bool
		constexpr auto (MinInteger)k__BackingField = 0x68; // IntegerSize
		constexpr auto (MinFloat)k__BackingField = 0x6c; // FloatSize
	}

	namespace n_MobileTlsContext { // : IDisposable
		constexpr auto parent = 0x10; // MobileAuthenticatedStream
		constexpr auto serverMode = 0x18; // bool
		constexpr auto targetHost = 0x20; // string
		constexpr auto serverName = 0x28; // string
		constexpr auto enabledProtocols = 0x30; // SslProtocols
		constexpr auto serverCertificate = 0x38; // X509Certificate
		constexpr auto clientCertificates = 0x40; // X509CertificateCollection
		constexpr auto askForClientCert = 0x48; // bool
		constexpr auto certificateValidator = 0x50; // ICertificateValidator2
	}

	namespace n_Blit.BlitSettings {
		constexpr auto Event = 0x10; // RenderPassEvent
		constexpr auto blitMaterial = 0x18; // Material
		constexpr auto blitMaterialPassIndex = 0x20; // int
		constexpr auto destination = 0x24; // Blit.Target
		constexpr auto textureId = 0x28; // string
	}

	namespace n_DescendantOverDescendantQuery { // : DescendantBaseQuery
		constexpr auto level = 0x60; // int
	}

	namespace n_FirstPersonLoadoutManager { // : IEnumerable(Tool)
		constexpr auto (TargetIndex)k__BackingField = 0x10; // int
		constexpr auto (Primary)k__BackingField = 0x18; // WeaponManager
		constexpr auto (Secondary)k__BackingField = 0x20; // WeaponManager
		constexpr auto (FirstAid)k__BackingField = 0x28; // GadgetManager
		constexpr auto (ToolA)k__BackingField = 0x30; // GadgetManager
		constexpr auto (ToolB)k__BackingField = 0x38; // GadgetManager
		constexpr auto (Throwable)k__BackingField = 0x40; // GadgetManager
		constexpr auto PrimaryTransform = 0x48; // FirstPersonLoadoutManager.TransformCache
		constexpr auto SecondaryTransform = 0x50; // FirstPersonLoadoutManager.TransformCache
		constexpr auto FirstAidTransform = 0x58; // FirstPersonLoadoutManager.TransformCache
		constexpr auto ToolATransform = 0x60; // FirstPersonLoadoutManager.TransformCache
		constexpr auto ToolBTransform = 0x68; // FirstPersonLoadoutManager.TransformCache
		constexpr auto ThrowableTransform = 0x70; // FirstPersonLoadoutManager.TransformCache
		constexpr auto throwableParent = 0x78; // Transform
		constexpr auto unthrowableParent = 0x80; // Transform
		constexpr auto player = 0x88; // PlayerNetwork
		constexpr auto role = 0x90; // Role
		constexpr auto timeToDeswich = 0x94; // float
		constexpr auto timeToSwitch = 0x98; // float
		constexpr auto cacheActiveIndex = 0x9c; // int
		constexpr auto cacheFrame = 0xa0; // int
		constexpr auto (isThrowing)k__BackingField = 0xa4; // bool
		constexpr auto PreviousIndex = 0xa8; // int
		constexpr auto position = 0xac; // Vector3
		constexpr auto rotation = 0xb8; // Quaternion
		constexpr auto scale = 0xc8; // Vector3
		constexpr auto parent = 0xd8; // Transform
	}

	namespace n_BatchBufferList {
		constexpr auto Array = 0x10; // BatchBuffer[]
		constexpr auto Count = 0x18; // int
		constexpr auto allocated = 0x1c; // int
	}

	namespace n_AsnEncodedData {
		constexpr auto _oid = 0x10; // Oid
		constexpr auto _raw = 0x18; // byte[]
	}

	namespace n_FlagWorldMap { // : MapWorldBehaviour
		constexpr auto (Flag)k__BackingField = 0x40; // Flag
		constexpr auto (MapUI)k__BackingField = 0x48; // FlagUIMap
	}

	namespace n_PKCS12.DeriveBytes {
		constexpr auto _hashName = 0x10; // string
		constexpr auto _iterations = 0x18; // int
		constexpr auto _password = 0x20; // byte[]
		constexpr auto _salt = 0x28; // byte[]
	}

	namespace n_SubSimplexClosestResult { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_TeamManager { // : MonoBehaviour
		constexpr auto (TickIndex3)k__BackingField = 0x18; // int
		constexpr auto mLastUpdateRich = 0x1c; // float
	}

	namespace n_GameScreen_GameAnnouncement { // : MonoBehaviour
		constexpr auto Label = 0x18; // TextMeshProUGUI
		constexpr auto Label2 = 0x20; // TextMeshProUGUI
		constexpr auto Rect = 0x28; // RectTransform
		constexpr auto Animation = 0x30; // AnimationCurve
		constexpr auto cvGroup1 = 0x38; // CanvasGroup
		constexpr auto cvGroup2 = 0x40; // CanvasGroup
		constexpr auto canvas = 0x48; // Canvas
		constexpr auto start = 0x50; // float
		constexpr auto end = 0x54; // float
		constexpr auto mScale = 0x58; // bool
		constexpr auto start2 = 0x5c; // float
		constexpr auto end2 = 0x60; // float
		constexpr auto (TickIndex8)k__BackingField = 0x64; // int
	}

	namespace n_ClassInterfaceAttribute { // : Attribute
		constexpr auto _val = 0x10; // ClassInterfaceType
	}

	namespace n_OverlayBehaviour.Announcement {
		constexpr auto Canvas = 0x10; // CanvasGroup
		constexpr auto CanvasUI = 0x18; // Canvas
		constexpr auto Label = 0x20; // TextMeshProUGUI
		constexpr auto lastSet = 0x28; // float
		constexpr auto t = 0x2c; // float
	}

	namespace n_TaskToApm.TaskWrapperAsyncResult { // : IAsyncResult
		constexpr auto Task = 0x10; // Task
		constexpr auto m_state = 0x18; // object
		constexpr auto m_completedSynchronously = 0x20; // bool
	}

	namespace n_NativeClassAttribute { // : Attribute
		constexpr auto (QualifiedNativeName)k__BackingField = 0x10; // string
		constexpr auto (Declaration)k__BackingField = 0x18; // string
	}

	namespace n_BrickExistance { // : ExistanceProvider
		constexpr auto wall = 0x20; // WallBuilder
		constexpr auto list = 0x28; // List(Vector2Int)
	}

	namespace n_TypeConverterAttribute { // : Attribute
		constexpr auto typeName = 0x10; // string
	}

	namespace n_OverlayLogItem { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto Text = 0x20; // TextMeshProUGUI
		constexpr auto Canvas = 0x28; // CanvasGroup
		constexpr auto Mask = 0x30; // RectMask2D
		constexpr auto mInitTime = 0x38; // float
		constexpr auto mPool = 0x40; // UIPool(OverlayLogItem)
		constexpr auto mRect = 0x48; // RectTransform
		constexpr auto Height = 0x50; // float
		constexpr auto mSet = 0x54; // bool
	}

	namespace n_RangeFinderBehaviour { // : AttachmentAddon
		constexpr auto (TickIndex6)k__BackingField = 0x40; // int
		constexpr auto Text = 0x48; // TextMesh
		constexpr auto Forward = 0x50; // Transform
		constexpr auto mLastSet = 0x58; // float
	}

	namespace n_ShortcutCombo {
		constexpr auto _keys = 0x10; // List(KeyCode)
		constexpr auto _mouseButtons = 0x18; // List(MouseButton)
		constexpr auto _possibleOverlaps = 0x20; // List(ShortcutCombo)
		constexpr auto _useCmdAsAlternativeForCtrl = 0x28; // bool
		constexpr auto _notActiveWhenMouseButtonsPressed = 0x29; // bool
		constexpr auto _notActiveWhenRightMouseButtonPressed = 0x2a; // bool
	}

	namespace n_DebugUI.FloatField { // : DebugUI.Field(float)
		constexpr auto min = 0x50; // Func(float)
		constexpr auto max = 0x58; // Func(float)
		constexpr auto incStep = 0x60; // float
		constexpr auto incStepMult = 0x64; // float
		constexpr auto decimals = 0x68; // int
	}

	namespace n_LocalBuilder { // : LocalVariableInfo
		constexpr auto name = 0x20; // string
		constexpr auto ilgen = 0x28; // ILGenerator
		constexpr auto startOffset = 0x30; // int
		constexpr auto endOffset = 0x34; // int
	}

	namespace n_Dna {
		constexpr auto _cmpFlags = 0x10; // Dna.FileDnaFlags[]
		constexpr auto _names = 0x18; // Dna.NameInfo[]
		constexpr auto _structs = 0x20; // Dna.StructDecl[]
		constexpr auto _types = 0x28; // Dna.TypeDecl[]
		constexpr auto _structReverse = 0x30; // Dictionary(string, int)
		constexpr auto _ptrLen = 0x38; // int
	}

	namespace n_MainLoop.mLoopFixedUpdate {
		constexpr auto Array = 0x10; // IFixedUpdateReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_ATopSight { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto PrefabLocals = 0x20; // PositionQuaternationScale
		constexpr auto PrefabAsset = 0x48; // GameObject
		constexpr auto Visual = 0x50; // Sprite
		constexpr auto LanguageId = 0x58; // int
		constexpr auto DefaultKill = 0x5c; // int
		constexpr auto ZoomLevel = 0x60; // float
		constexpr auto Settings = 0x68; // AttachmentSettings
		constexpr auto SinusRecoil = 0x70; // float
		constexpr auto EulRecoil = 0x74; // float
		constexpr auto CamShakeRecoil = 0x78; // float
		constexpr auto FieldOfView = 0x7c; // float
	}

	namespace n_SoapTypeAttribute { // : SoapAttribute
		constexpr auto _useAttribute = 0x28; // bool
		constexpr auto _xmlElementName = 0x30; // string
		constexpr auto _xmlNamespace = 0x38; // string
		constexpr auto _xmlTypeName = 0x40; // string
		constexpr auto _xmlTypeNamespace = 0x48; // string
		constexpr auto _isType = 0x50; // bool
		constexpr auto _isElement = 0x51; // bool
	}

	namespace n_Projectile.FutureRaycast {
		constexpr auto hitObject = 0x10; // GameObject
		constexpr auto hitPosition = 0x18; // Vector3
		constexpr auto hitNormal = 0x24; // Vector3
		constexpr auto HitTime = 0x30; // float
		constexpr auto isHit = 0x34; // bool
		constexpr auto nextCast = 0x38; // float
	}

	namespace n_DebugActionDesc {
		constexpr auto buttonTriggerList = 0x10; // List(string[])
		constexpr auto axisTrigger = 0x18; // string
		constexpr auto keyTriggerList = 0x20; // List(KeyCode[])
		constexpr auto repeatMode = 0x28; // DebugActionRepeatMode
		constexpr auto repeatDelay = 0x2c; // float
	}

	namespace n_AndroidJavaRunnableProxy { // : AndroidJavaProxy
		constexpr auto mRunnable = 0x20; // AndroidJavaRunnable
	}

	namespace n_Notifications { // : MonoBehaviour
		constexpr auto Element = 0x18; // GameObject
		constexpr auto Parent = 0x20; // Transform
		constexpr auto pool = 0x28; // UIPool(Notification)
		constexpr auto verticalList = 0x30; // VerticalList
		constexpr auto counter = 0x38; // int
		constexpr auto canvas = 0x40; // Canvas
		constexpr auto (TickIndex8)k__BackingField = 0x48; // int
	}

	namespace n_Dbvt.IClone { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_LayerSettings {
		constexpr auto paintLayers = 0x10; // LayerMask
	}

	namespace n_ObjectHolderList {
		constexpr auto m_values = 0x10; // ObjectHolder[]
		constexpr auto m_count = 0x18; // int
	}

	namespace n_ScrollRect { // : UIBehaviour
		constexpr auto m_Content = 0x18; // RectTransform
		constexpr auto m_Horizontal = 0x20; // bool
		constexpr auto m_Vertical = 0x21; // bool
		constexpr auto m_MovementType = 0x24; // ScrollRect.MovementType
		constexpr auto m_Elasticity = 0x28; // float
		constexpr auto m_Inertia = 0x2c; // bool
		constexpr auto m_DecelerationRate = 0x30; // float
		constexpr auto m_ScrollSensitivity = 0x34; // float
		constexpr auto m_Viewport = 0x38; // RectTransform
		constexpr auto m_HorizontalScrollbar = 0x40; // Scrollbar
		constexpr auto m_VerticalScrollbar = 0x48; // Scrollbar
		constexpr auto m_HorizontalScrollbarVisibility = 0x50; // ScrollRect.ScrollbarVisibility
		constexpr auto m_VerticalScrollbarVisibility = 0x54; // ScrollRect.ScrollbarVisibility
		constexpr auto m_HorizontalScrollbarSpacing = 0x58; // float
		constexpr auto m_VerticalScrollbarSpacing = 0x5c; // float
		constexpr auto m_OnValueChanged = 0x60; // ScrollRect.ScrollRectEvent
		constexpr auto m_PointerStartLocalCursor = 0x68; // Vector2
		constexpr auto m_ContentStartPosition = 0x70; // Vector2
		constexpr auto m_ViewRect = 0x78; // RectTransform
		constexpr auto m_ContentBounds = 0x80; // Bounds
		constexpr auto m_ViewBounds = 0x98; // Bounds
		constexpr auto m_Velocity = 0xb0; // Vector2
		constexpr auto m_Dragging = 0xb8; // bool
		constexpr auto m_Scrolling = 0xb9; // bool
		constexpr auto m_PrevPosition = 0xbc; // Vector2
		constexpr auto m_PrevContentBounds = 0xc4; // Bounds
		constexpr auto m_PrevViewBounds = 0xdc; // Bounds
		constexpr auto m_HasRebuiltLayout = 0xf4; // bool
		constexpr auto m_HSliderExpand = 0xf5; // bool
		constexpr auto m_VSliderExpand = 0xf6; // bool
		constexpr auto m_HSliderHeight = 0xf8; // float
		constexpr auto m_VSliderWidth = 0xfc; // float
		constexpr auto m_Rect = 0x100; // RectTransform
		constexpr auto m_HorizontalScrollbarRect = 0x108; // RectTransform
		constexpr auto m_VerticalScrollbarRect = 0x110; // RectTransform
		constexpr auto m_Tracker = 0x118; // DrivenRectTransformTracker
		constexpr auto m_Corners = 0x120; // Vector3[]
	}

	namespace n_MultiBodyLink {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_SortedList { // : IDictionary
		constexpr auto keys = 0x10; // object[]
		constexpr auto values = 0x18; // object[]
		constexpr auto _size = 0x20; // int
		constexpr auto version = 0x24; // int
		constexpr auto comparer = 0x28; // IComparer
		constexpr auto keyList = 0x30; // SortedList.KeyList
		constexpr auto valueList = 0x38; // SortedList.ValueList
		constexpr auto _syncRoot = 0x40; // object
	}

	namespace n_MainMenuStatsVehicleItem { // : MonoBehaviour
		constexpr auto Name = 0x18; // TextMeshProUGUI
		constexpr auto KilledWith = 0x20; // TextMeshProUGUI
		constexpr auto Destroyed = 0x28; // TextMeshProUGUI
		constexpr auto Icon = 0x30; // RawImage
	}

	namespace n_VFXRaycastBinder { // : VFXBinderBase
		constexpr auto m_TargetPosition = 0x20; // ExposedProperty
		constexpr auto m_TargetNormal = 0x28; // ExposedProperty
		constexpr auto m_TargetHit = 0x30; // ExposedProperty
		constexpr auto m_TargetPosition_position = 0x38; // ExposedProperty
		constexpr auto m_TargetNormal_direction = 0x40; // ExposedProperty
		constexpr auto RaycastSource = 0x48; // GameObject
		constexpr auto RaycastDirection = 0x50; // Vector3
		constexpr auto RaycastDirectionSpace = 0x5c; // VFXRaycastBinder.Space
		constexpr auto Layers = 0x60; // LayerMask
		constexpr auto MaxDistance = 0x64; // float
		constexpr auto m_HitInfo = 0x68; // RaycastHit
	}

	namespace n_SquadViewElement { // : MonoBehaviour
		constexpr auto SquadName = 0x18; // TextMeshProUGUI
		constexpr auto SquadCount = 0x20; // TextMeshProUGUI
		constexpr auto SquadLockedImg = 0x28; // RawImage
		constexpr auto JoinButton = 0x30; // GameObject
		constexpr auto btn = 0x38; // GraphicRevertedButton
		constexpr auto rawButton = 0x40; // RawImage
		constexpr auto Squad = 0x48; // Squad
		constexpr auto _lockedSquadCount = 0x50; // int
		constexpr auto _lockedMyClanSquad = 0x54; // bool
		constexpr auto _lockedClanSquad = 0x55; // bool
		constexpr auto _lockedSquadLocked = 0x58; // Squad.SquadLockState
	}

	namespace n_LightBoundData {
		constexpr auto isSpotLight = 0x10; // bool
		constexpr auto Width = 0x14; // float
		constexpr auto a = 0x18; // Vector3
		constexpr auto b = 0x24; // Vector3
		constexpr auto c = 0x30; // Vector3
		constexpr auto d = 0x3c; // Vector3
		constexpr auto e = 0x48; // Vector3
		constexpr auto f = 0x54; // Vector3
		constexpr auto g = 0x60; // Vector3
		constexpr auto h = 0x6c; // Vector3
	}

	namespace n_MapRallyPointUIObject { // : MapUIBehaviour
		constexpr auto Icon = 0x60; // RawImage
		constexpr auto SelectableCanvas = 0x68; // CanvasGroup
		constexpr auto BuildCanvas = 0x70; // CanvasGroup
		constexpr auto RallyPoint = 0x78; // SquadAbilityRallyPointBehaviour
		constexpr auto mIsOurSquadRally = 0x80; // bool
		constexpr auto mIsSelectable = 0x81; // bool
	}

	namespace n_RNGCryptoServiceProvider { // : RandomNumberGenerator
		constexpr auto _handle = 0x10; // IntPtr
	}

	namespace n_Overlay_DeadZone { // : MonoBehaviour
		constexpr auto canvas = 0x18; // Canvas
		constexpr auto activeTime = 0x20; // float
		constexpr auto Counter = 0x28; // TextMeshProUGUI
		constexpr auto counter = 0x30; // int
		constexpr auto (TickIndex8)k__BackingField = 0x34; // int
	}

	namespace n_SerializationInfo {
		constexpr auto m_members = 0x10; // string[]
		constexpr auto m_data = 0x18; // object[]
		constexpr auto m_types = 0x20; // Type[]
		constexpr auto m_nameToIndex = 0x28; // Dictionary(string, int)
		constexpr auto m_currMember = 0x30; // int
		constexpr auto m_converter = 0x38; // IFormatterConverter
		constexpr auto m_fullTypeName = 0x40; // string
		constexpr auto m_assemName = 0x48; // string
		constexpr auto objectType = 0x50; // Type
		constexpr auto isFullTypeNameSetExplicit = 0x58; // bool
		constexpr auto isAssemblyNameSetExplicit = 0x59; // bool
		constexpr auto requireSameTokenInPartialTrust = 0x5a; // bool
	}

	namespace n_PersistentManifold { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_WebConnectionStream { // : Stream
		constexpr auto isRead = 0x28; // bool
		constexpr auto cnc = 0x30; // WebConnection
		constexpr auto request = 0x38; // HttpWebRequest
		constexpr auto readBuffer = 0x40; // byte[]
		constexpr auto readBufferOffset = 0x48; // int
		constexpr auto readBufferSize = 0x4c; // int
		constexpr auto stream_length = 0x50; // int
		constexpr auto contentLength = 0x58; // long
		constexpr auto totalRead = 0x60; // long
		constexpr auto totalWritten = 0x68; // long
		constexpr auto nextReadCalled = 0x70; // bool
		constexpr auto pendingReads = 0x74; // int
		constexpr auto pendingWrites = 0x78; // int
		constexpr auto pending = 0x80; // ManualResetEvent
		constexpr auto allowBuffering = 0x88; // bool
		constexpr auto sendChunked = 0x89; // bool
		constexpr auto writeBuffer = 0x90; // MemoryStream
		constexpr auto requestWritten = 0x98; // bool
		constexpr auto headers = 0xa0; // byte[]
		constexpr auto disposed = 0xa8; // bool
		constexpr auto headersSent = 0xa9; // bool
		constexpr auto locker = 0xb0; // object
		constexpr auto initRead = 0xb8; // bool
		constexpr auto read_eof = 0xb9; // bool
		constexpr auto complete_request_written = 0xba; // bool
		constexpr auto read_timeout = 0xbc; // int
		constexpr auto write_timeout = 0xc0; // int
		constexpr auto cb_wrapper = 0xc8; // AsyncCallback
		constexpr auto IgnoreIOErrors = 0xd0; // bool
		constexpr auto (GetResponseOnClose)k__BackingField = 0xd1; // bool
	}

	namespace n_GameScreen_BleedingInVehicle { // : MonoBehaviour
		constexpr auto BleedingPop = 0x18; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0x20; // int
	}

	namespace n_DriverCabin { // : SeatBehaviour
		constexpr auto Local = 0x48; // GameObject
		constexpr auto CameraPoint = 0x50; // Transform
		constexpr auto Perspectives = 0x58; // DriverCabin.Perspective[]
		constexpr auto CameraIndex = 0x60; // int
		constexpr auto eulars = 0x64; // Vector2
	}

	namespace n_FunctionQuery { // : ExtensionQuery
		constexpr auto args = 0x38; // IList(Query)
		constexpr auto function = 0x40; // IXsltContextFunction
	}

	namespace n_QuantizedBvh { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_RushSpawnPointWorldMap { // : MapWorldBehaviour
		constexpr auto (SpawnPoint)k__BackingField = 0x40; // RushSpawnPoint
		constexpr auto (MapUI)k__BackingField = 0x48; // RushSpawnPointUIMap
		constexpr auto mIsInited = 0x50; // bool
	}

	namespace n_VFXMouseEventBinder { // : VFXEventBinderBase
		constexpr auto activation = 0x30; // VFXMouseEventBinder.Activation
		constexpr auto position = 0x38; // ExposedProperty
		constexpr auto RaycastMousePosition = 0x40; // bool
	}

	namespace n_LoadoutAttachmentLine { // : MonoBehaviour
		constexpr auto T = 0x18; // float
		constexpr auto Start = 0x20; // RectTransform
		constexpr auto EndAsItem = 0x28; // RectTransform
		constexpr auto horizontalLine = 0x30; // RectTransform
		constexpr auto verticalLine = 0x38; // RectTransform
		constexpr auto startPosition = 0x40; // Vector2
		constexpr auto endPosition = 0x48; // Vector2
		constexpr auto hadTargetLastFrame = 0x50; // bool
		constexpr auto currentEndPosition = 0x54; // Vector2
		constexpr auto isLocked = 0x5c; // bool
	}

	namespace n_VisualEffectActivationMixerBehaviour { // : PlayableBehaviour
		constexpr auto enabledStates = 0x10; // bool[]
	}

	namespace n_AlignedManifoldArrayEnumerator { // : IEnumerator(PersistentManifold)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedManifoldArray
	}

	namespace n_WebConnection.AbortHelper {
		constexpr auto Connection = 0x10; // WebConnection
	}

	namespace n_VFXPreviousPositionBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Transform
		constexpr auto oldPosition = 0x30; // Vector3
	}

	namespace n_BaseInputModule { // : UIBehaviour
		constexpr auto m_RaycastResultCache = 0x18; // List(RaycastResult)
		constexpr auto m_AxisEventData = 0x20; // AxisEventData
		constexpr auto m_EventSystem = 0x28; // EventSystem
		constexpr auto m_BaseEventData = 0x30; // BaseEventData
		constexpr auto m_InputOverride = 0x38; // BaseInput
		constexpr auto m_DefaultInput = 0x40; // BaseInput
	}

	namespace n_GamemodeResources.CatchGame {
		constexpr auto SledgeHammer = 0x10; // AGadget
		constexpr auto AntiPersonalMine = 0x18; // AGadget
	}

	namespace n_GameScreen_PointLog { // : MonoBehaviour
		constexpr auto Prefab = 0x18; // GameObject
		constexpr auto Parent = 0x20; // Transform
		constexpr auto pool = 0x28; // UIPool(GameScreen_PointLogElement)
		constexpr auto list = 0x30; // VerticalList
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
	}

	namespace n_SocketAsyncResult { // : IOAsyncResult
		constexpr auto socket = 0x30; // Socket
		constexpr auto operation = 0x38; // SocketOperation
		constexpr auto DelayedException = 0x40; // Exception
		constexpr auto EndPoint = 0x48; // EndPoint
		constexpr auto Buffer = 0x50; // byte[]
		constexpr auto Offset = 0x58; // int
		constexpr auto Size = 0x5c; // int
		constexpr auto SockFlags = 0x60; // SocketFlags
		constexpr auto AcceptSocket = 0x68; // Socket
		constexpr auto Addresses = 0x70; // IPAddress[]
		constexpr auto Port = 0x78; // int
		constexpr auto Buffers = 0x80; // IList(ArraySegment(byte))
		constexpr auto ReuseSocket = 0x88; // bool
		constexpr auto CurrentAddress = 0x8c; // int
		constexpr auto AcceptedSocket = 0x90; // Socket
		constexpr auto Total = 0x98; // int
		constexpr auto error = 0x9c; // int
		constexpr auto EndCalled = 0xa0; // int
	}

	namespace n_ClampedIntParameter { // : IntParameter
		constexpr auto min = 0x20; // int
		constexpr auto max = 0x24; // int
	}

	namespace n_CustomBrushes {
		constexpr auto customBrushes = 0x10; // List(Texture2D)
		constexpr auto selectedCustomBrush = 0x18; // int
	}

	namespace n_TupleElementNamesAttribute { // : Attribute
		constexpr auto _transformNames = 0x10; // string[]
	}

	namespace n_BurstCompilerOptions {
		constexpr auto _enableBurstCompilation = 0x10; // bool
		constexpr auto _enableBurstSafetyChecks = 0x11; // bool
		constexpr auto (IsGlobal)k__BackingField = 0x12; // bool
		constexpr auto (OptionsChanged)k__BackingField = 0x18; // Action
	}

	namespace n_SceneViewDepthCopyPass { // : ScriptableRenderPass
		constexpr auto (source)k__BackingField = 0x68; // RenderTargetHandle
		constexpr auto m_CopyDepthMaterial = 0x70; // Material
		constexpr auto m_ScaleBiasId = 0x78; // int
	}

	namespace n_ConvexPointCloudShape { // : PolyhedralConvexAabbCachingShape
		constexpr auto _unscaledPoints = 0x30; // Vector3Array
	}

	namespace n_Scope { // : MonoBehaviour
		constexpr auto PoolableAttachment = 0x18; // PoolableAttachment
		constexpr auto Type = 0x20; // ScopeType
		constexpr auto Body = 0x28; // MeshRenderer
		constexpr auto BodyHighPoly = 0x30; // Mesh
		constexpr auto Cover = 0x38; // MeshRenderer
		constexpr auto Mask = 0x40; // GameObject
		constexpr auto AimPoint = 0x48; // Transform
		constexpr auto SwayPoint = 0x50; // Transform
		constexpr auto SwayMax = 0x58; // float
		constexpr auto SwayValue = 0x5c; // float
		constexpr auto BlurOnAim = 0x60; // bool
		constexpr auto FocusDistance = 0x64; // float
		constexpr auto FocalLenght = 0x68; // float
		constexpr auto DistanceToEnableAim = 0x6c; // float
		constexpr auto RePositionAimPointByScale = 0x70; // bool
		constexpr auto OnAimOnly = 0x78; // GameObject[]
		constexpr auto RemovableObjects = 0x80; // GameObject[]
		constexpr auto CanBeUsedWithNightVision = 0x88; // bool
		constexpr auto ReticleSyncAxis = 0x8c; // Axis
		constexpr auto ReticleSync = 0x90; // Transform
		constexpr auto TopSightParent = 0x98; // Transform
		constexpr auto TopSightAngle = 0xa0; // float
		constexpr auto ChildInfos = 0xa8; // AimInfo[]
		constexpr auto LocalOnlyScript = 0xb0; // AttachmentAddon
		constexpr auto isAimEnabled = 0xb8; // bool
		constexpr auto wasAiming = 0xb9; // bool
		constexpr auto coverAlpha = 0xbc; // float
		constexpr auto coverMaterial = 0xc0; // Material
		constexpr auto localReticle = 0xc8; // Vector3
		constexpr auto (Item)k__BackingField = 0xd8; // IAttachmentItem
		constexpr auto lod = 0xe0; // THPLod
	}

	namespace n_XmlUnspecifiedAttribute { // : XmlAttribute
		constexpr auto fSpecified = 0x28; // bool
	}

	namespace n_CodePageDataItem {
		constexpr auto m_dataIndex = 0x10; // int
		constexpr auto m_uiFamilyCodePage = 0x14; // int
		constexpr auto m_webName = 0x18; // string
		constexpr auto m_flags = 0x20; // uint
	}

	namespace n_TextMeshProUGUI { // : TMP_Text
		constexpr auto m_hasFontAssetChanged = 0x6b8; // bool
		constexpr auto m_subTextObjects = 0x6c0; // TMP_SubMeshUI[]
		constexpr auto m_previousLossyScaleY = 0x6c8; // float
		constexpr auto m_RectTransformCorners = 0x6d0; // Vector3[]
		constexpr auto m_canvasRenderer = 0x6d8; // CanvasRenderer
		constexpr auto m_canvas = 0x6e0; // Canvas
		constexpr auto m_CanvasScaleFactor = 0x6e8; // float
		constexpr auto m_isFirstAllocation = 0x6ec; // bool
		constexpr auto m_max_characters = 0x6f0; // int
		constexpr auto m_baseMaterial = 0x6f8; // Material
		constexpr auto m_isScrollRegionSet = 0x700; // bool
		constexpr auto m_maskOffset = 0x704; // Vector4
		constexpr auto m_EnvMapMatrix = 0x714; // Matrix4x4
		constexpr auto m_isRegisteredForEvents = 0x754; // bool
		constexpr auto m_isRebuildingLayout = 0x755; // bool
		constexpr auto m_DelayedGraphicRebuild = 0x758; // Coroutine
		constexpr auto m_DelayedMaterialRebuild = 0x760; // Coroutine
		constexpr auto m_ClipRect = 0x768; // Rect
		constexpr auto m_ValidRect = 0x778; // bool
		constexpr auto OnPreRenderText = 0x780; // Action(TMP_TextInfo)
	}

	namespace n_Config {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_RigidContact { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _node = 0x18; // Node
		constexpr auto _cti = 0x20; // sCti
	}

	namespace n_DebugUIHandlerFloatField { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueLabel = 0x60; // Text
		constexpr auto m_Field = 0x68; // DebugUI.FloatField
	}

	namespace n_ListDictionaryInternal.NodeEnumerator { // : IDictionaryEnumerator
		constexpr auto list = 0x10; // ListDictionaryInternal
		constexpr auto current = 0x18; // ListDictionaryInternal.DictionaryNode
		constexpr auto version = 0x20; // int
		constexpr auto start = 0x24; // bool
	}

	namespace n_GrassIdentity {
		constexpr auto buffer = 0x10; // MeshBuffer
		constexpr auto Lod0 = 0x18; // Material
		constexpr auto Lod1 = 0x20; // Material
		constexpr auto Lod2 = 0x28; // Material
		constexpr auto m_cleared = 0x30; // bool
	}

	namespace n_SearchResult {
		constexpr auto fullPath = 0x10; // string
		constexpr auto userPath = 0x18; // string
		constexpr auto findData = 0x20; // Win32Native.WIN32_FIND_DATA
	}

	namespace n_CustomizePointItem { // : MonoBehaviour
		constexpr auto (isHovering)k__BackingField = 0x18; // bool
		constexpr auto Parent = 0x20; // CustomizePointParent
		constexpr auto ChildLine = 0x28; // RectTransform
		constexpr auto isWearable = 0x30; // bool
		constexpr auto WearableT = 0x34; // WearableType
		constexpr auto SkinT = 0x38; // Skins
		constexpr auto CameraPosition = 0x3c; // Vector3
		constexpr auto CameraEular = 0x48; // Vector3
		constexpr auto PlayerEular = 0x54; // Vector3
		constexpr auto _rect = 0x60; // RectTransform
		constexpr auto _img = 0x68; // RawImage
		constexpr auto _relativeUnselectedPosition = 0x70; // Vector2
		constexpr auto _relativeSelectedPosition = 0x78; // Vector2
		constexpr auto _canvas = 0x80; // CanvasGroup
	}

	namespace n_BinaryMethodCall {
		constexpr auto methodName = 0x10; // string
		constexpr auto typeName = 0x18; // string
		constexpr auto args = 0x20; // object[]
		constexpr auto callContext = 0x28; // object
		constexpr auto argTypes = 0x30; // Type[]
		constexpr auto bArgsPrimitive = 0x38; // bool
		constexpr auto messageEnum = 0x3c; // MessageEnum
	}

	namespace n_MethodBody {
		constexpr auto clauses = 0x10; // ExceptionHandlingClause[]
		constexpr auto locals = 0x18; // LocalVariableInfo[]
		constexpr auto il = 0x20; // byte[]
		constexpr auto init_locals = 0x28; // bool
		constexpr auto sig_token = 0x2c; // int
		constexpr auto max_stack = 0x30; // int
	}

	namespace n_InputField { // : Selectable
		constexpr auto m_Keyboard = 0xf8; // TouchScreenKeyboard
		constexpr auto m_TextComponent = 0x100; // Text
		constexpr auto m_Placeholder = 0x108; // Graphic
		constexpr auto m_ContentType = 0x110; // InputField.ContentType
		constexpr auto m_InputType = 0x114; // InputField.InputType
		constexpr auto m_AsteriskChar = 0x118; // char
		constexpr auto m_KeyboardType = 0x11c; // TouchScreenKeyboardType
		constexpr auto m_LineType = 0x120; // InputField.LineType
		constexpr auto m_HideMobileInput = 0x124; // bool
		constexpr auto m_CharacterValidation = 0x128; // InputField.CharacterValidation
		constexpr auto m_CharacterLimit = 0x12c; // int
		constexpr auto m_OnEndEdit = 0x130; // InputField.SubmitEvent
		constexpr auto m_OnValueChanged = 0x138; // InputField.OnChangeEvent
		constexpr auto m_OnValidateInput = 0x140; // InputField.OnValidateInput
		constexpr auto m_CaretColor = 0x148; // Color
		constexpr auto m_CustomCaretColor = 0x158; // bool
		constexpr auto m_SelectionColor = 0x15c; // Color
		constexpr auto m_Text = 0x170; // string
		constexpr auto m_CaretBlinkRate = 0x178; // float
		constexpr auto m_CaretWidth = 0x17c; // int
		constexpr auto m_ReadOnly = 0x180; // bool
		constexpr auto m_ShouldActivateOnSelect = 0x181; // bool
		constexpr auto m_CaretPosition = 0x184; // int
		constexpr auto m_CaretSelectPosition = 0x188; // int
		constexpr auto caretRectTrans = 0x190; // RectTransform
		constexpr auto m_CursorVerts = 0x198; // UIVertex[]
		constexpr auto m_InputTextCache = 0x1a0; // TextGenerator
		constexpr auto m_CachedInputRenderer = 0x1a8; // CanvasRenderer
		constexpr auto m_PreventFontCallback = 0x1b0; // bool
		constexpr auto m_Mesh = 0x1b8; // Mesh
		constexpr auto m_AllowInput = 0x1c0; // bool
		constexpr auto m_ShouldActivateNextUpdate = 0x1c1; // bool
		constexpr auto m_UpdateDrag = 0x1c2; // bool
		constexpr auto m_DragPositionOutOfBounds = 0x1c3; // bool
		constexpr auto m_CaretVisible = 0x1c4; // bool
		constexpr auto m_BlinkCoroutine = 0x1c8; // Coroutine
		constexpr auto m_BlinkStartTime = 0x1d0; // float
		constexpr auto m_DrawStart = 0x1d4; // int
		constexpr auto m_DrawEnd = 0x1d8; // int
		constexpr auto m_DragCoroutine = 0x1e0; // Coroutine
		constexpr auto m_OriginalText = 0x1e8; // string
		constexpr auto m_WasCanceled = 0x1f0; // bool
		constexpr auto m_HasDoneFocusTransition = 0x1f1; // bool
		constexpr auto m_WaitForSecondsRealtime = 0x1f8; // WaitForSecondsRealtime
		constexpr auto m_TouchKeyboardAllowsInPlaceEditing = 0x200; // bool
		constexpr auto m_ProcessingEvent = 0x208; // Event
	}

	namespace n_DebugUI.Value { // : DebugUI.Widget
		constexpr auto (getter)k__BackingField = 0x38; // Func(object)
		constexpr auto refreshRate = 0x40; // float
	}

	namespace n_X509Chain { // : IDisposable
		constexpr auto impl = 0x10; // X509ChainImpl
	}

	namespace n_UpaException { // : Exception
		constexpr auto particle1 = 0x88; // object
		constexpr auto particle2 = 0x90; // object
	}

	namespace n_IconsUI.Scoreboard {
		constexpr auto PointCollapsed = 0x10; // Texture2D
		constexpr auto PointExpanded = 0x18; // Texture2D
		constexpr auto Muted = 0x20; // Texture2D
		constexpr auto Unmuted = 0x28; // Texture2D
		constexpr auto ExpandedLine = 0x30; // Texture2D
		constexpr auto ExpandedLineEnd = 0x38; // Texture2D
		constexpr auto Ping4 = 0x40; // Texture
		constexpr auto Ping3 = 0x48; // Texture
		constexpr auto Ping2 = 0x50; // Texture
		constexpr auto Ping1 = 0x58; // Texture
	}

	namespace n_UTF7Encoding.Encoder { // : EncoderNLS
		constexpr auto bits = 0x38; // int
		constexpr auto bitCount = 0x3c; // int
	}

	namespace n_TransformComponentsSettings { // : ScriptableObject
		constexpr auto active = 0x18; // bool
	}

	namespace n_GlobalSpawnControllerSettings {
		constexpr auto modifiedType = 0x10; // TypeOfBiome
		constexpr auto modifiedTerrainDetailPrototype = 0x18; // PrototypeTerrainDetail
		constexpr auto enableVisualisation = 0x20; // bool
		constexpr auto enableAutoMode = 0x21; // bool
		constexpr auto delayAutoSpawn = 0x24; // float
		constexpr auto autoModeProtoResource = 0x28; // List(AutoModeProtoResource)
	}

	namespace n_UTF32Encoding.UTF32Decoder { // : DecoderNLS
		constexpr auto iChar = 0x30; // int
		constexpr auto readByteCount = 0x34; // int
	}

	namespace n_Tools { // : ScriptableObject
		constexpr auto EmptyGun = 0x18; // AWeapon
		constexpr auto EmptyGadget = 0x20; // AGadget
		constexpr auto AllTools = 0x28; // ToolItem[]
		constexpr auto AllAttachments = 0x30; // Tools.Attachments
	}

	namespace n_OptimizedBvhNode { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_ToolField {
		constexpr auto Structer = 0x10; // AGadgetStructer
		constexpr auto Fields = 0x18; // List(Variable)
		constexpr auto KeyList = 0x20; // Dictionary(string, Variable)
	}

	namespace n_ResourceManager.ResourceManagerMediator {
		constexpr auto _rm = 0x10; // ResourceManager
	}

	namespace n_BinaryAssembly {
		constexpr auto assemId = 0x10; // int
		constexpr auto assemblyString = 0x18; // string
	}

	namespace n_AlignedBroadphasePairArrayEnumerator { // : IEnumerator(BroadphasePair)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedBroadphasePairArray
	}

	namespace n_BipodBehaviour { // : AttachmentAddon
		constexpr auto (TickIndex5)k__BackingField = 0x40; // int
		constexpr auto HoldPoint = 0x48; // Transform
		constexpr auto OnLocal = 0x50; // GameObject
		constexpr auto HitA = 0x58; // Transform
		constexpr auto HitB = 0x60; // Transform
		constexpr auto GUIA = 0x68; // MeshRenderer
		constexpr auto GUIB = 0x70; // MeshRenderer
		constexpr auto aTouching = 0x78; // bool
		constexpr auto bTouching = 0x79; // bool
	}

	namespace n_SecurityDocument {
		constexpr auto m_data = 0x10; // byte[]
	}

	namespace n_ResourceSet { // : IDisposable
		constexpr auto Reader = 0x10; // IResourceReader
		constexpr auto Table = 0x18; // Hashtable
		constexpr auto _caseInsensitiveTable = 0x20; // Hashtable
	}

	namespace n_DatatypeImplementation { // : XmlSchemaDatatype
		constexpr auto variety = 0x10; // XmlSchemaDatatypeVariety
		constexpr auto restriction = 0x18; // RestrictionFacets
		constexpr auto baseType = 0x20; // DatatypeImplementation
		constexpr auto valueConverter = 0x28; // XmlValueConverter
		constexpr auto parentSchemaType = 0x30; // XmlSchemaType
	}

	namespace n_VideoPlayer { // : Behaviour
		constexpr auto prepareCompleted = 0x18; // VideoPlayer.EventHandler
		constexpr auto loopPointReached = 0x20; // VideoPlayer.EventHandler
		constexpr auto started = 0x28; // VideoPlayer.EventHandler
		constexpr auto frameDropped = 0x30; // VideoPlayer.EventHandler
		constexpr auto errorReceived = 0x38; // VideoPlayer.ErrorEventHandler
		constexpr auto seekCompleted = 0x40; // VideoPlayer.EventHandler
		constexpr auto clockResyncOccurred = 0x48; // VideoPlayer.TimeEventHandler
		constexpr auto frameReady = 0x50; // VideoPlayer.FrameReadyEventHandler
	}

	namespace n_DateTimeFormatInfo { // : ICloneable
		constexpr auto m_cultureData = 0x10; // CultureData
		constexpr auto m_name = 0x18; // string
		constexpr auto m_langName = 0x20; // string
		constexpr auto m_compareInfo = 0x28; // CompareInfo
		constexpr auto m_cultureInfo = 0x30; // CultureInfo
		constexpr auto amDesignator = 0x38; // string
		constexpr auto pmDesignator = 0x40; // string
		constexpr auto dateSeparator = 0x48; // string
		constexpr auto generalShortTimePattern = 0x50; // string
		constexpr auto generalLongTimePattern = 0x58; // string
		constexpr auto timeSeparator = 0x60; // string
		constexpr auto monthDayPattern = 0x68; // string
		constexpr auto dateTimeOffsetPattern = 0x70; // string
		constexpr auto calendar = 0x78; // Calendar
		constexpr auto firstDayOfWeek = 0x80; // int
		constexpr auto calendarWeekRule = 0x84; // int
		constexpr auto fullDateTimePattern = 0x88; // string
		constexpr auto abbreviatedDayNames = 0x90; // string[]
		constexpr auto m_superShortDayNames = 0x98; // string[]
		constexpr auto dayNames = 0xa0; // string[]
		constexpr auto abbreviatedMonthNames = 0xa8; // string[]
		constexpr auto monthNames = 0xb0; // string[]
		constexpr auto genitiveMonthNames = 0xb8; // string[]
		constexpr auto m_genitiveAbbreviatedMonthNames = 0xc0; // string[]
		constexpr auto leapYearMonthNames = 0xc8; // string[]
		constexpr auto longDatePattern = 0xd0; // string
		constexpr auto shortDatePattern = 0xd8; // string
		constexpr auto yearMonthPattern = 0xe0; // string
		constexpr auto longTimePattern = 0xe8; // string
		constexpr auto shortTimePattern = 0xf0; // string
		constexpr auto allYearMonthPatterns = 0xf8; // string[]
		constexpr auto allShortDatePatterns = 0x100; // string[]
		constexpr auto allLongDatePatterns = 0x108; // string[]
		constexpr auto allShortTimePatterns = 0x110; // string[]
		constexpr auto allLongTimePatterns = 0x118; // string[]
		constexpr auto m_eraNames = 0x120; // string[]
		constexpr auto m_abbrevEraNames = 0x128; // string[]
		constexpr auto m_abbrevEnglishEraNames = 0x130; // string[]
		constexpr auto optionalCalendars = 0x138; // int[]
		constexpr auto m_isReadOnly = 0x140; // bool
		constexpr auto formatFlags = 0x144; // DateTimeFormatFlags
		constexpr auto CultureID = 0x148; // int
		constexpr auto m_useUserOverride = 0x14c; // bool
		constexpr auto bUseCalendarInfo = 0x14d; // bool
		constexpr auto nDataItem = 0x150; // int
		constexpr auto m_isDefaultCalendar = 0x154; // bool
		constexpr auto m_dateWords = 0x158; // string[]
		constexpr auto m_fullTimeSpanPositivePattern = 0x160; // string
		constexpr auto m_fullTimeSpanNegativePattern = 0x168; // string
		constexpr auto m_dtfiTokenHash = 0x170; // TokenHashValue[]
	}

	namespace n_ObjectHolder {
		constexpr auto m_object = 0x10; // object
		constexpr auto m_id = 0x18; // long
		constexpr auto m_missingElementsRemaining = 0x20; // int
		constexpr auto m_missingDecendents = 0x24; // int
		constexpr auto m_serInfo = 0x28; // SerializationInfo
		constexpr auto m_surrogate = 0x30; // ISerializationSurrogate
		constexpr auto m_missingElements = 0x38; // FixupHolderList
		constexpr auto m_dependentObjects = 0x40; // LongList
		constexpr auto m_next = 0x48; // ObjectHolder
		constexpr auto m_flags = 0x50; // int
		constexpr auto m_markForFixupWhenAvailable = 0x54; // bool
		constexpr auto m_valueFixup = 0x58; // ValueTypeFixupInfo
		constexpr auto m_typeLoad = 0x60; // TypeLoadExceptionHolder
		constexpr auto m_reachable = 0x68; // bool
	}

	namespace n_RushBeaconUIMap { // : MapUIBehaviour
		constexpr auto BaseRawIamge = 0x60; // RawImage
		constexpr auto BaseLabelText = 0x68; // TextMeshProUGUI
		constexpr auto Canvas = 0x70; // CanvasGroup
		constexpr auto HoverImage = 0x78; // CanvasGroup
		constexpr auto (Beacon)k__BackingField = 0x80; // RushBeacon
		constexpr auto mHoverImageRect = 0x88; // RectTransform
		constexpr auto mHoverImageSize = 0x90; // float
		constexpr auto mIsDefending = 0x94; // bool
	}

	namespace n_TMP_StyleSheet { // : ScriptableObject
		constexpr auto m_StyleList = 0x18; // List(TMP_Style)
		constexpr auto m_StyleLookupDictionary = 0x20; // Dictionary(int, TMP_Style)
	}

	namespace n_SortedList.KeyList {
		constexpr auto sortedList = 0x10; // SortedList
	}

	namespace n_ConvexCast.CastResult { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_CatchGameUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_Uri { // : ISerializable
		constexpr auto m_String = 0x10; // string
		constexpr auto m_originalUnicodeString = 0x18; // string
		constexpr auto m_Syntax = 0x20; // UriParser
		constexpr auto m_DnsSafeHost = 0x28; // string
		constexpr auto m_Flags = 0x30; // Uri.Flags
		constexpr auto m_Info = 0x38; // Uri.UriInfo
		constexpr auto m_iriParsing = 0x40; // bool
	}

	namespace n_SerStack {
		constexpr auto objects = 0x10; // object[]
		constexpr auto stackId = 0x18; // string
		constexpr auto top = 0x20; // int
	}

	namespace n_FixupHolder {
		constexpr auto m_id = 0x10; // long
		constexpr auto m_fixupInfo = 0x18; // object
		constexpr auto m_fixupType = 0x20; // int
	}

	namespace n_AlignedTetraArrayEnumerator { // : IEnumerator(Tetra)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedTetraArray
	}

	namespace n_MinIntParameter { // : IntParameter
		constexpr auto min = 0x20; // int
	}

	namespace n_ContextLevelActivator { // : IActivator
		constexpr auto m_NextActivator = 0x10; // IActivator
	}

	namespace n_MouseSettings {
		constexpr auto mouseSensitivity = 0x10; // float
		constexpr auto minMouseSensitivity = 0x14; // float
		constexpr auto maxMouseSensitivity = 0x18; // float
	}

	namespace n_CanvasRenderer { // : Component
		constexpr auto (isMask)k__BackingField = 0x18; // bool
	}

	namespace n_RijndaelManagedTransform { // : ICryptoTransform
		constexpr auto m_cipherMode = 0x10; // CipherMode
		constexpr auto m_paddingValue = 0x14; // PaddingMode
		constexpr auto m_transformMode = 0x18; // RijndaelManagedTransformMode
		constexpr auto m_blockSizeBits = 0x1c; // int
		constexpr auto m_blockSizeBytes = 0x20; // int
		constexpr auto m_inputBlockSize = 0x24; // int
		constexpr auto m_outputBlockSize = 0x28; // int
		constexpr auto m_encryptKeyExpansion = 0x30; // int[]
		constexpr auto m_decryptKeyExpansion = 0x38; // int[]
		constexpr auto m_Nr = 0x40; // int
		constexpr auto m_Nb = 0x44; // int
		constexpr auto m_Nk = 0x48; // int
		constexpr auto m_encryptindex = 0x50; // int[]
		constexpr auto m_decryptindex = 0x58; // int[]
		constexpr auto m_IV = 0x60; // int[]
		constexpr auto m_lastBlockBuffer = 0x68; // int[]
		constexpr auto m_depadBuffer = 0x70; // byte[]
		constexpr auto m_shiftRegister = 0x78; // byte[]
	}

	namespace n_AlignedFaceArrayDebugView {
		constexpr auto _array = 0x10; // AlignedFaceArray
	}

	namespace n_IconsUI.EndOfRound {
		constexpr auto HeadShot = 0x10; // Sprite
		constexpr auto ObjectivePlay = 0x18; // Sprite
		constexpr auto Heal = 0x20; // Sprite
	}

	namespace n_SquadAbility { // : ScriptableObject
		constexpr auto (RuntimeID)k__BackingField = 0x18; // int
		constexpr auto TeamDeathMatch = 0x1c; // SquadAbility.GamemodeVariables
		constexpr auto AdvanceAndSecure = 0x21; // SquadAbility.GamemodeVariables
		constexpr auto Rush = 0x26; // SquadAbility.GamemodeVariables
		constexpr auto Conquest = 0x2b; // SquadAbility.GamemodeVariables
		constexpr auto InfConquest = 0x30; // SquadAbility.GamemodeVariables
		constexpr auto Domination = 0x35; // SquadAbility.GamemodeVariables
		constexpr auto Elimination = 0x3a; // SquadAbility.GamemodeVariables
		constexpr auto Frontline = 0x3f; // SquadAbility.GamemodeVariables
		constexpr auto GunGame = 0x44; // SquadAbility.GamemodeVariables
		constexpr auto FreeForAll = 0x49; // SquadAbility.GamemodeVariables
		constexpr auto GunGameTeam = 0x4e; // SquadAbility.GamemodeVariables
		constexpr auto SuicideRush = 0x53; // SquadAbility.GamemodeVariables
		constexpr auto CatchGame = 0x58; // SquadAbility.GamemodeVariables
		constexpr auto WorldBehaviour = 0x60; // SquadAbilityBehaviour
		constexpr auto MaximumInstance = 0x68; // int
		constexpr auto Cooldown = 0x6c; // int
		constexpr auto Cost = 0x70; // int
		constexpr auto CanItBeDeployedFromAnywhere = 0x74; // bool
		constexpr auto DistanceFromPlayerToDeploy = 0x78; // float
		constexpr auto CanBeDeployByCaptainOnly = 0x7c; // bool
		constexpr auto IsReplacable = 0x7d; // bool
		constexpr auto Icon = 0x80; // Texture2D
		constexpr auto TitleLangID = 0x88; // int
		constexpr auto DescriptionLangID = 0x8c; // int
		constexpr auto GhostModel = 0x90; // Mesh
		constexpr auto GhostMaterialPositive = 0x98; // Material
		constexpr auto GhostMaterialNegative = 0xa0; // Material
		constexpr auto MaximumDistanceFromGround = 0xa8; // float
		constexpr auto StartOffsetAngle = 0xac; // float
		constexpr auto RadiusCheck = 0xb0; // bool
		constexpr auto RadiusCheckCornerCount = 0xb4; // int
		constexpr auto RadiusCheckRadius = 0xb8; // float
		constexpr auto RadiusCheckLayerCount = 0xbc; // int
		constexpr auto RadiusCheckMaximumDot = 0xc0; // float
		constexpr auto BoxCastCheck = 0xc4; // bool
		constexpr auto BoxCastCenter = 0xc8; // Vector3
		constexpr auto BoxCastSize = 0xd4; // Vector3
		constexpr auto TopObstacleCheck = 0xe0; // bool
		constexpr auto TopObstacleCenter = 0xe4; // Vector3
		constexpr auto TopObstacleDimentions = 0xf0; // Vector2
	}

	namespace n_AWeaponAllowedAttachment {
		constexpr auto _barrelData = 0x10; // byte[]
		constexpr auto _cantedData = 0x18; // byte[]
		constexpr auto _scopeData = 0x20; // byte[]
		constexpr auto _underailData = 0x28; // byte[]
		constexpr auto _siderailData = 0x30; // byte[]
		constexpr auto _boltActionData = 0x38; // byte[]
	}

	namespace n_ExplosionSoundPlayer { // : MonoBehaviour
		constexpr auto Profile = 0x18; // ExplosionProfile
		constexpr auto Light = 0x20; // Light
		constexpr auto Frames = 0x28; // int
		constexpr auto (TickIndex3)k__BackingField = 0x2c; // int
		constexpr auto mFramesPast = 0x30; // int
		constexpr auto mDidRegister = 0x34; // bool
		constexpr auto (Position)k__BackingField = 0x38; // Vector3
	}

	namespace n_Overlay_VoiceChat { // : MonoBehaviour
		constexpr auto Prefab = 0x18; // GameObject
		constexpr auto Parent = 0x20; // Transform
		constexpr auto canvas = 0x28; // Canvas
		constexpr auto pool = 0x30; // UIPool(Overlay_VoiceChatElement)
		constexpr auto items = 0x38; // Dictionary(byte, Overlay_VoiceChatElement)
		constexpr auto list = 0x40; // VerticalList
		constexpr auto mState = 0x48; // Overlay_VoiceChat.State
		constexpr auto istransmitting = 0x4c; // bool
		constexpr auto self = 0x50; // Overlay_VoiceChatElement
		constexpr auto (TickIndex8)k__BackingField = 0x58; // int
		constexpr auto mLastSetWidth = 0x5c; // float
	}

	namespace n_AntiPersonalMineStanding { // : ReplicaGadget
		constexpr auto GUI = 0x48; // TeamGUI
		constexpr auto Explosion = 0x50; // GameObject
		constexpr auto TriggerCollider = 0x58; // GameObject
		constexpr auto Mine = 0x60; // AGadget
		constexpr auto ground = 0x68; // ExistanceProvider
		constexpr auto triggerOwner = 0x70; // ulong
		constexpr auto (isTriggered)k__BackingField = 0x78; // bool
	}

	namespace n_GimBvhTreeNodeArray {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_PrecisionSettings {
		constexpr auto precisionObject = 0x10; // PrecisionObject
		constexpr auto orientation = 0x18; // Quaternion
		constexpr auto scaleFactor = 0x28; // Vector3
		constexpr auto angle = 0x34; // float
		constexpr auto radius = 0x38; // float
		constexpr auto point = 0x3c; // Vector3
		constexpr auto fixedRotationValue = 0x48; // Vector3
		constexpr auto fixedScaleValue = 0x54; // Vector3
		constexpr auto selectType = 0x60; // PrecisionSelectType
		constexpr auto transfromType = 0x64; // PrecisionType
		constexpr auto handlesType = 0x68; // PrecisionHandlesType
		constexpr auto objectTransformType = 0x6c; // ObjectTransformType
		constexpr auto align = 0x70; // bool
		constexpr auto alongStroke = 0x71; // bool
		constexpr auto fixedRotation = 0x72; // bool
		constexpr auto fixedScale = 0x73; // bool
		constexpr auto spacing = 0x74; // float
	}

	namespace n_ConstantFitterUpdater { // : MonoBehaviour
		constexpr auto _fitter = 0x18; // ContentSizeFitter
		constexpr auto (TickIndex8)k__BackingField = 0x20; // int
	}

	namespace n_RequestCachePolicy {
		constexpr auto m_Level = 0x10; // RequestCacheLevel
	}

	namespace n_XmlChildEnumerator { // : IEnumerator
		constexpr auto container = 0x10; // XmlNode
		constexpr auto child = 0x18; // XmlNode
		constexpr auto isFirst = 0x20; // bool
	}

	namespace n_AUnderRail { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto PrefabLocals = 0x20; // PositionQuaternationScale
		constexpr auto PrefabAsset = 0x48; // GameObject
		constexpr auto Visual = 0x50; // Sprite
		constexpr auto LanguageId = 0x58; // int
		constexpr auto DefaultKill = 0x5c; // int
		constexpr auto Settings = 0x60; // AttachmentSettings
	}

	namespace n_AlignedJointArrayEnumerator { // : IEnumerator(Joint)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedJointArray
	}

	namespace n_CompassUIElement { // : MonoBehaviour
		constexpr auto transform = 0x18; // RectTransform
		constexpr auto Canvas = 0x20; // CanvasGroup
		constexpr auto Label = 0x28; // TextMeshProUGUI
		constexpr auto x = 0x30; // float
		constexpr auto positionFlag = 0x34; // bool
		constexpr auto stringFlag = 0x35; // bool
		constexpr auto targetPosition = 0x38; // Vector2
		constexpr auto targetString = 0x40; // string
		constexpr auto targetAlpha = 0x48; // float
		constexpr auto targetScale = 0x4c; // Vector3
		constexpr auto targetBearing = 0x58; // float
		constexpr auto currentBearing = 0x5c; // float
	}

	namespace n_XmlNodeListEnumerator { // : IEnumerator
		constexpr auto list = 0x10; // XPathNodeList
		constexpr auto index = 0x18; // int
		constexpr auto valid = 0x1c; // bool
	}

	namespace n_DecimalConstantAttribute { // : Attribute
		constexpr auto dec = 0x10; // Decimal
	}

	namespace n_VFXVisibilityEventBinder { // : VFXEventBinderBase
		constexpr auto activation = 0x30; // VFXVisibilityEventBinder.Activation
	}

	namespace n_OfflinePlayer.Weapon {
		constexpr auto Item = 0x10; // AWeapon
		constexpr auto Scope = 0x18; // AScope
		constexpr auto TopSight = 0x20; // ATopSight
		constexpr auto Canted = 0x28; // ACanted
		constexpr auto BoltAction = 0x30; // ABoltAction
		constexpr auto Barrel = 0x38; // ABarrel
		constexpr auto SideRail = 0x40; // ASideRail
		constexpr auto UnderRail = 0x48; // AUnderRail
		constexpr auto MagIndex = 0x50; // int
		constexpr auto SkinIndex = 0x54; // int
	}

	namespace n_FPHand { // : MonoBehaviour
		constexpr auto defaultScale = 0x18; // Vector3
		constexpr auto Fov120Scale = 0x24; // Vector3
		constexpr auto deltaPos = 0x30; // Vector3
		constexpr auto deltaScale = 0x3c; // Vector3
	}

	namespace n_AlignedLinkArrayDebugView {
		constexpr auto _array = 0x10; // AlignedLinkArray
	}

	namespace n_MainMenu_Ban { // : MonoBehaviour
		constexpr auto Child = 0x18; // GameObject
		constexpr auto Until = 0x20; // TextMeshProUGUI
		constexpr auto Reason = 0x28; // TextMeshProUGUI
		constexpr auto Menus = 0x30; // GameObject[]
		constexpr auto until = 0x38; // DateTime
	}

	namespace n_RectMask2D { // : UIBehaviour
		constexpr auto m_VertexClipper = 0x18; // RectangularVertexClipper
		constexpr auto m_RectTransform = 0x20; // RectTransform
		constexpr auto m_MaskableTargets = 0x28; // HashSet(MaskableGraphic)
		constexpr auto m_ClipTargets = 0x30; // HashSet(IClippable)
		constexpr auto m_ShouldRecalculateClipRects = 0x38; // bool
		constexpr auto m_Clippers = 0x40; // List(RectMask2D)
		constexpr auto m_LastClipRectCanvasSpace = 0x48; // Rect
		constexpr auto m_ForceClip = 0x58; // bool
		constexpr auto m_Padding = 0x5c; // Vector4
		constexpr auto m_Softness = 0x6c; // Vector2Int
		constexpr auto m_Canvas = 0x78; // Canvas
		constexpr auto m_Corners = 0x80; // Vector3[]
	}

	namespace n_AssemblyDelaySignAttribute { // : Attribute
		constexpr auto m_delaySign = 0x10; // bool
	}

	namespace n_UnitySynchronizationContext { // : SynchronizationContext
		constexpr auto m_AsyncWorkQueue = 0x18; // List(UnitySynchronizationContext.WorkRequest)
		constexpr auto m_CurrentFrameWork = 0x20; // List(UnitySynchronizationContext.WorkRequest)
		constexpr auto m_MainThreadID = 0x28; // int
		constexpr auto m_TrackedCount = 0x2c; // int
	}

	namespace n_Type2Message { // : MessageBase
		constexpr auto _nonce = 0x18; // byte[]
		constexpr auto _targetName = 0x20; // string
		constexpr auto _targetInfo = 0x28; // byte[]
	}

	namespace n_IconsUI.Clan {
		constexpr auto Owner = 0x10; // Sprite
		constexpr auto Officer = 0x18; // Sprite
		constexpr auto SnOfficer = 0x20; // Sprite
	}

	namespace n_Datatype_dateTimeBase { // : Datatype_anySimpleType
		constexpr auto dateTimeFlags = 0x38; // XsdDateTimeFlags
	}

	namespace n_TypeInformation {
		constexpr auto fullTypeName = 0x10; // string
		constexpr auto assemblyString = 0x18; // string
		constexpr auto hasTypeForwardedFrom = 0x20; // bool
	}

	namespace n_LocalDataStoreMgr {
		constexpr auto m_SlotInfoTable = 0x10; // bool[]
		constexpr auto m_FirstAvailableSlot = 0x18; // int
		constexpr auto m_ManagedLocalDataStores = 0x20; // List(LocalDataStore)
		constexpr auto m_KeyToSlotMap = 0x28; // Dictionary(string, LocalDataStoreSlot)
		constexpr auto m_CookieGenerator = 0x30; // long
	}

	namespace n_Collision {
		constexpr auto m_Impulse = 0x10; // Vector3
		constexpr auto m_RelativeVelocity = 0x1c; // Vector3
		constexpr auto m_Rigidbody = 0x28; // Rigidbody
		constexpr auto m_Collider = 0x30; // Collider
		constexpr auto m_ContactCount = 0x38; // int
		constexpr auto m_ReusedContacts = 0x40; // ContactPoint[]
		constexpr auto m_LegacyContacts = 0x48; // ContactPoint[]
	}

	namespace n_ListDictionaryInternal.DictionaryNode {
		constexpr auto key = 0x10; // object
		constexpr auto value = 0x18; // object
		constexpr auto next = 0x20; // ListDictionaryInternal.DictionaryNode
	}

	namespace n_MDX201 { // : GadgetManager
		constexpr auto MDX201Prefab = 0xd0; // GameObject
		constexpr auto etaReady = 0xd8; // float
		constexpr auto etaPut = 0xdc; // float
		constexpr auto etaDraw = 0xe0; // float
	}

	namespace n_TraceLoggingEventTypes {
		constexpr auto typeInfos = 0x10; // TraceLoggingTypeInfo[]
		constexpr auto name = 0x18; // string
		constexpr auto tags = 0x20; // EventTags
		constexpr auto level = 0x24; // byte
		constexpr auto opcode = 0x25; // byte
		constexpr auto keywords = 0x28; // EventKeywords
		constexpr auto typeMetadata = 0x30; // byte[]
		constexpr auto scratchSize = 0x38; // int
		constexpr auto dataCount = 0x3c; // int
		constexpr auto pinCount = 0x40; // int
		constexpr auto nameInfos = 0x48; // ConcurrentSet(KeyValuePair(string, EventTags), NameInfo)
	}

	namespace n_RegexCharClass {
		constexpr auto _rangelist = 0x10; // List(RegexCharClass.SingleRange)
		constexpr auto _categories = 0x18; // StringBuilder
		constexpr auto _canonical = 0x20; // bool
		constexpr auto _negate = 0x21; // bool
		constexpr auto _subtractor = 0x28; // RegexCharClass
	}

	namespace n_NumberFormatter.CustomInfo {
		constexpr auto UseGroup = 0x10; // bool
		constexpr auto DecimalDigits = 0x14; // int
		constexpr auto DecimalPointPos = 0x18; // int
		constexpr auto DecimalTailSharpDigits = 0x1c; // int
		constexpr auto IntegerDigits = 0x20; // int
		constexpr auto IntegerHeadSharpDigits = 0x24; // int
		constexpr auto IntegerHeadPos = 0x28; // int
		constexpr auto UseExponent = 0x2c; // bool
		constexpr auto ExponentDigits = 0x30; // int
		constexpr auto ExponentTailSharpDigits = 0x34; // int
		constexpr auto ExponentNegativeSignOnly = 0x38; // bool
		constexpr auto DividePlaces = 0x3c; // int
		constexpr auto Percents = 0x40; // int
		constexpr auto Permilles = 0x44; // int
	}

	namespace n_Track { // : MonoBehaviour
		constexpr auto Renderer = 0x18; // MeshRenderer
		constexpr auto materialSettings = 0x20; // MaterialPropertyBlock
		constexpr auto variables = 0x28; // Vector4
		constexpr auto posA = 0x38; // Vector4
		constexpr auto posB = 0x48; // Vector4
		constexpr auto posC = 0x58; // Vector4
		constexpr auto worldPosition = 0x68; // Vector3
		constexpr auto groundedTable = 0x78; // bool[]
		constexpr auto anygrounded = 0x80; // bool
		constexpr auto flipped = 0x81; // bool
	}

	namespace n_AlignedAnchorArrayDebugView {
		constexpr auto _array = 0x10; // AlignedAnchorArray
	}

	namespace n_ObjectMouseUniformScaleSettings {
		constexpr auto mouseSensitivity = 0x10; // float
	}

	namespace n_ToolAmmoKit { // : GadgetManager
		constexpr auto Body = 0xd0; // MeshRenderer
		constexpr auto AmmoKitPrefab = 0xd8; // GameObject
		constexpr auto actionHolding = 0xe0; // ToolAmmoKit.action
		constexpr auto nextAbility = 0xe4; // float
		constexpr auto etaToThrow = 0xe8; // float
		constexpr auto switchBack = 0xec; // bool
	}

	namespace n_EncoderNLS { // : Encoder
		constexpr auto charLeftOver = 0x20; // char
		constexpr auto m_encoding = 0x28; // Encoding
		constexpr auto m_mustFlush = 0x30; // bool
		constexpr auto m_throwOnOverflow = 0x31; // bool
		constexpr auto m_charsUsed = 0x34; // int
	}

	namespace n_EraInfo {
		constexpr auto era = 0x10; // int
		constexpr auto ticks = 0x18; // long
		constexpr auto yearOffset = 0x20; // int
		constexpr auto minEraYear = 0x24; // int
		constexpr auto maxEraYear = 0x28; // int
		constexpr auto eraName = 0x30; // string
		constexpr auto abbrevEraName = 0x38; // string
		constexpr auto englishEraName = 0x40; // string
	}

	namespace n_AchievementManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnUserAchievementUpdate = 0x20; // AchievementManager.UserAchievementUpdateHandler
	}

	namespace n_SceneSampleCamera { // : MonoBehaviour
		constexpr auto volume = 0x18; // Volume
		constexpr auto (TickIndex8)k__BackingField = 0x20; // int
		constexpr auto Gain = 0x24; // Vector4
		constexpr auto Gamma = 0x34; // Vector4
		constexpr auto Lift = 0x44; // Vector4
	}

	namespace n_Curves {
		constexpr auto AimingCurves = 0x10; // Curves.Aiming
		constexpr auto HearthbeatCurves = 0x18; // Curves.Hearthbeat
		constexpr auto VehicleFallOff = 0x20; // AnimationCurve
		constexpr auto ShotSoundsFallOff = 0x28; // AnimationCurve
	}

	namespace n_AwaitTaskContinuation { // : TaskContinuation
		constexpr auto m_capturedContext = 0x10; // ExecutionContext
		constexpr auto m_action = 0x18; // Action
	}

	namespace n_ReliabilityContractAttribute { // : Attribute
		constexpr auto _consistency = 0x10; // Consistency
		constexpr auto _cer = 0x14; // Cer
	}

	namespace n_AssertionException { // : Exception
		constexpr auto m_UserMessage = 0x88; // string
	}

	namespace n_RecoilSimulator { // : MonoBehaviour
		constexpr auto TargetPoint = 0x18; // Transform
		constexpr auto Local = 0x20; // Transform
		constexpr auto CameraRecoil = 0x28; // Transform
		constexpr auto LocalFix = 0x30; // Transform
		constexpr auto AimingDown = 0x38; // float
		constexpr auto fireRate = 0x3c; // float
		constexpr auto m_hipFireTarget = 0x40; // float
		constexpr auto m_hipFireCurrent = 0x44; // float
		constexpr auto HipFirePositionZ = 0x48; // AnimationCurve
		constexpr auto m_hipFireZPositionCurrent = 0x50; // float
		constexpr auto HipFireEularZ = 0x58; // AnimationCurve
		constexpr auto m_hipFireZEularCurrent = 0x60; // float
		constexpr auto HipFireEularY = 0x68; // AnimationCurve
		constexpr auto m_hipFireYEularCurrent = 0x70; // float
		constexpr auto m_hipFireYEularRandom = 0x74; // float
		constexpr auto HipFireEularX = 0x78; // AnimationCurve
		constexpr auto m_hipFireXEularCurrent = 0x80; // float
		constexpr auto recoil = 0x88; // WeaponRecoil
		constexpr auto m_sinceLastFire = 0x90; // float
		constexpr auto m_sinceFirstShot = 0x94; // float
		constexpr auto m_lastCameraEular = 0x98; // Vector3
		constexpr auto m_camereEularXRandom = 0xa4; // float
		constexpr auto m_camereEularYRandom = 0xa8; // float
		constexpr auto m_camereEularZRandom = 0xac; // float
		constexpr auto shakeM = 0xb0; // float
	}

	namespace n_Flashbang { // : MonoBehaviour
		constexpr auto (lifeTime)k__BackingField = 0x18; // float
		constexpr auto (inPool)k__BackingField = 0x1c; // bool
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x1d; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x20; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x24; // int
		constexpr auto (TickIndex5)k__BackingField = 0x28; // int
		constexpr auto MainLight = 0x30; // Light
		constexpr auto LightIntensityAnimation = 0x38; // AnimationCurve
		constexpr auto SoundProfile = 0x40; // ExplosionProfile
		constexpr auto mPosition = 0x48; // Vector3
		constexpr auto mSpawnTime = 0x54; // float
	}

	namespace n_IOAsyncResult { // : IAsyncResult
		constexpr auto async_callback = 0x10; // AsyncCallback
		constexpr auto async_state = 0x18; // object
		constexpr auto wait_handle = 0x20; // ManualResetEvent
		constexpr auto completed_synchronously = 0x28; // bool
		constexpr auto completed = 0x29; // bool
	}

	namespace n_DefaultVehicleRaycaster { // : IVehicleRaycaster
		constexpr auto m_dynamicsWorld = 0x10; // DynamicsWorld
	}

	namespace n_MainMenu_Languages { // : MonoBehaviour
		constexpr auto Parent = 0x18; // Transform
		constexpr auto Element = 0x20; // GameObject
		constexpr auto LoadingIcon = 0x28; // GameObject
		constexpr auto mIsLoaded = 0x30; // bool
	}

	namespace n_IconsUI.General {
		constexpr auto FlagAmerican = 0x10; // Sprite
		constexpr auto FlagRussain = 0x18; // Sprite
		constexpr auto FlagTerrorist = 0x20; // Sprite
		constexpr auto FlagNone = 0x28; // Sprite
		constexpr auto Locked = 0x30; // Sprite
		constexpr auto Unlocked = 0x38; // Sprite
		constexpr auto English = 0x40; // Texture2D
	}

	namespace n_Vector3ArrayEnumerator { // : IEnumerator(Vector3)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // IList(Vector3)
	}

	namespace n_MeshUtils.Edge { // : MeshUtils.Pooled(MeshUtils.Edge)
		constexpr auto _pair = 0x10; // MeshUtils.EdgePair
		constexpr auto _next = 0x20; // MeshUtils.Edge
		constexpr auto _Sym = 0x28; // MeshUtils.Edge
		constexpr auto _Onext = 0x30; // MeshUtils.Edge
		constexpr auto _Lnext = 0x38; // MeshUtils.Edge
		constexpr auto _Org = 0x40; // MeshUtils.Vertex
		constexpr auto _Lface = 0x48; // MeshUtils.Face
		constexpr auto _activeRegion = 0x50; // Tess.ActiveRegion
		constexpr auto _winding = 0x58; // int
	}

	namespace n_FrontlineSettings { // : GamemodeSettingsBase
		constexpr auto (FRONTLINE_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (FRONTLINE_FlagCaptureTime)k__BackingField = 0x150; // GamemodeVariable(int)
		constexpr auto (FRONTLINE_Tickets)k__BackingField = 0x158; // GamemodeVariable(int)
	}

	namespace n_NumberFormatInfo { // : ICloneable
		constexpr auto numberGroupSizes = 0x10; // int[]
		constexpr auto currencyGroupSizes = 0x18; // int[]
		constexpr auto percentGroupSizes = 0x20; // int[]
		constexpr auto positiveSign = 0x28; // string
		constexpr auto negativeSign = 0x30; // string
		constexpr auto numberDecimalSeparator = 0x38; // string
		constexpr auto numberGroupSeparator = 0x40; // string
		constexpr auto currencyGroupSeparator = 0x48; // string
		constexpr auto currencyDecimalSeparator = 0x50; // string
		constexpr auto currencySymbol = 0x58; // string
		constexpr auto ansiCurrencySymbol = 0x60; // string
		constexpr auto nanSymbol = 0x68; // string
		constexpr auto positiveInfinitySymbol = 0x70; // string
		constexpr auto negativeInfinitySymbol = 0x78; // string
		constexpr auto percentDecimalSeparator = 0x80; // string
		constexpr auto percentGroupSeparator = 0x88; // string
		constexpr auto percentSymbol = 0x90; // string
		constexpr auto perMilleSymbol = 0x98; // string
		constexpr auto nativeDigits = 0xa0; // string[]
		constexpr auto m_dataItem = 0xa8; // int
		constexpr auto numberDecimalDigits = 0xac; // int
		constexpr auto currencyDecimalDigits = 0xb0; // int
		constexpr auto currencyPositivePattern = 0xb4; // int
		constexpr auto currencyNegativePattern = 0xb8; // int
		constexpr auto numberNegativePattern = 0xbc; // int
		constexpr auto percentPositivePattern = 0xc0; // int
		constexpr auto percentNegativePattern = 0xc4; // int
		constexpr auto percentDecimalDigits = 0xc8; // int
		constexpr auto digitSubstitution = 0xcc; // int
		constexpr auto isReadOnly = 0xd0; // bool
		constexpr auto m_useUserOverride = 0xd1; // bool
		constexpr auto m_isInvariant = 0xd2; // bool
		constexpr auto validForParseAsNumber = 0xd3; // bool
		constexpr auto validForParseAsCurrency = 0xd4; // bool
	}

	namespace n_CardHover { // : MonoBehaviour
		constexpr auto LabelRec = 0x18; // RectTransform
		constexpr auto DefaultSize = 0x20; // Vector2
		constexpr auto ExtendedSize = 0x28; // Vector2
		constexpr auto Speed = 0x30; // float
		constexpr auto OnClicked = 0x38; // UnityEvent
		constexpr auto (isFocused)k__BackingField = 0x40; // bool
		constexpr auto tr = 0x48; // RectTransform
	}

	namespace n_RIPEMD160Managed { // : RIPEMD160
		constexpr auto _buffer = 0x28; // byte[]
		constexpr auto _count = 0x30; // long
		constexpr auto _stateMD160 = 0x38; // uint[]
		constexpr auto _blockDWords = 0x40; // uint[]
	}

	namespace n_RigidbodyState {
		constexpr auto solverVelocityIterations = 0x10; // int
		constexpr auto maxAngularVelocity = 0x14; // float
		constexpr auto sleepThreshold = 0x18; // float
		constexpr auto solverIterations = 0x1c; // int
		constexpr auto interpolation = 0x20; // RigidbodyInterpolation
		constexpr auto velocity = 0x24; // Vector3
		constexpr auto angularVelocity = 0x30; // Vector3
		constexpr auto drag = 0x3c; // float
		constexpr auto angularDrag = 0x40; // float
		constexpr auto mass = 0x44; // float
		constexpr auto maxDepenetrationVelocity = 0x48; // float
		constexpr auto isKinematic = 0x4c; // bool
		constexpr auto freezeRotation = 0x4d; // bool
		constexpr auto constraints = 0x50; // RigidbodyConstraints
		constexpr auto collisionDetectionMode = 0x54; // CollisionDetectionMode
		constexpr auto centerOfMass = 0x58; // Vector3
		constexpr auto inertiaTensorRotation = 0x64; // Quaternion
		constexpr auto inertiaTensor = 0x74; // Vector3
		constexpr auto detectCollisions = 0x80; // bool
		constexpr auto useGravity = 0x81; // bool
	}

	namespace n_ForwardRendererData.ShaderResources {
		constexpr auto blitPS = 0x10; // Shader
		constexpr auto copyDepthPS = 0x18; // Shader
		constexpr auto screenSpaceShadowPS = 0x20; // Shader
		constexpr auto samplingPS = 0x28; // Shader
		constexpr auto fallbackErrorPS = 0x30; // Shader
	}

	namespace n_MD5CryptoServiceProvider { // : MD5
		constexpr auto _H = 0x28; // uint[]
		constexpr auto buff = 0x30; // uint[]
		constexpr auto count = 0x38; // ulong
		constexpr auto _ProcessingBuffer = 0x40; // byte[]
		constexpr auto _ProcessingBufferCount = 0x48; // int
	}

	namespace n_Queue { // : ICollection
		constexpr auto _array = 0x10; // object[]
		constexpr auto _head = 0x18; // int
		constexpr auto _tail = 0x1c; // int
		constexpr auto _size = 0x20; // int
		constexpr auto _growFactor = 0x24; // int
		constexpr auto _version = 0x28; // int
	}

	namespace n_ShapeHull { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _shape = 0x18; // ConvexShape
		constexpr auto _indices = 0x20; // UIntArray
		constexpr auto _vertices = 0x28; // Vector3Array
	}

	namespace n_SHA384Managed { // : SHA384
		constexpr auto _buffer = 0x28; // byte[]
		constexpr auto _count = 0x30; // ulong
		constexpr auto _stateSHA384 = 0x38; // ulong[]
		constexpr auto _W = 0x40; // ulong[]
	}

	namespace n_PlayableDirector { // : Behaviour
		constexpr auto played = 0x18; // Action(PlayableDirector)
		constexpr auto paused = 0x20; // Action(PlayableDirector)
		constexpr auto stopped = 0x28; // Action(PlayableDirector)
	}

	namespace n_RushLayer { // : MonoBehaviour
		constexpr auto (RushBeacons)k__BackingField = 0x18; // RushBeacon[]
		constexpr auto (AttackerOnlyBounds)k__BackingField = 0x20; // RushGamemodeBounds
		constexpr auto mSpawnPoints = 0x28; // RushSpawnPoint[]
		constexpr auto (NetworkActivateTime)k__BackingField = 0x30; // float
	}

	namespace n_AlignedTetraArray { // : IList(Tetra)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_SecurityPermissionAttribute { // : CodeAccessSecurityAttribute
		constexpr auto m_Flags = 0x10; // SecurityPermissionFlag
	}

	namespace n_MainMenu { // : MonoBehaviour
		constexpr auto IntroParent = 0x18; // CanvasGroup
		constexpr auto MenuParent = 0x20; // CanvasGroup
		constexpr auto IntroChild = 0x28; // CanvasGroup
		constexpr auto PressAny = 0x30; // CanvasGroup
		constexpr auto EasterEgg = 0x38; // CanvasGroup
		constexpr auto ConnectingToServerLabel = 0x40; // TextMeshProUGUI
		constexpr auto Logo = 0x48; // RectTransform
		constexpr auto MenuTop = 0x50; // RectTransform
		constexpr auto _isConnected = 0x58; // bool
		constexpr auto _anyKey = 0x59; // bool
		constexpr auto connectionSince = 0x5c; // float
		constexpr auto menuSince = 0x60; // float
		constexpr auto mastercounter = 0x64; // int
		constexpr auto lastTime = 0x68; // float
		constexpr auto size = 0x6c; // float
		constexpr auto BottomM = 0x70; // RectTransform
		constexpr auto MenuCenter = 0x78; // RectTransform
		constexpr auto Matchmaking = 0x80; // GameObject
		constexpr auto MatchmakingLabel = 0x88; // TextMeshProUGUI
		constexpr auto ServerBrowser = 0x90; // GameObject
		constexpr auto ServerList = 0x98; // ServerList
		constexpr auto Menus = 0xa0; // CanvasGroup[]
		constexpr auto matching = 0xa8; // MatchmakingType
		constexpr auto timeMatchmaking = 0xac; // float
		constexpr auto userMatchtime = 0xb0; // float
		constexpr auto ProfileIcon = 0xb8; // RawImage
		constexpr auto ProfileName = 0xc0; // TextMeshProUGUI
		constexpr auto ProfilePrestige = 0xc8; // TextMeshProUGUI
		constexpr auto ProfilePrestigeValue = 0xd0; // Image
		constexpr auto ProfilePrestigeBackground = 0xd8; // Image
		constexpr auto ProfileRank = 0xe0; // TextMeshProUGUI
		constexpr auto ProfileRankValue = 0xe8; // Image
		constexpr auto ProfileRankImage = 0xf0; // Image
		constexpr auto ProfilePatreon = 0xf8; // GameObject[]
		constexpr auto InClan = 0x100; // CanvasGroup
		constexpr auto NotInClan = 0x108; // CanvasGroup
		constexpr auto DiscordConnected = 0x110; // GameObject
		constexpr auto DiscordDisconnected = 0x118; // GameObject
		constexpr auto DiscordConnectDBButton = 0x120; // GameObject
		constexpr auto LangTab = 0x128; // GameObject
		constexpr auto steamRichUpdate = 0x130; // float
		constexpr auto MenuIndex = 0x134; // int
		constexpr auto targetServer = 0x138; // ServerInfo
	}

	namespace n_TimelineClip { // : ICurvesOwner
		constexpr auto m_Version = 0x10; // int
		constexpr auto m_Start = 0x18; // double
		constexpr auto m_ClipIn = 0x20; // double
		constexpr auto m_Asset = 0x28; // Object
		constexpr auto m_Duration = 0x30; // double
		constexpr auto m_TimeScale = 0x38; // double
		constexpr auto m_ParentTrack = 0x40; // TrackAsset
		constexpr auto m_EaseInDuration = 0x48; // double
		constexpr auto m_EaseOutDuration = 0x50; // double
		constexpr auto m_BlendInDuration = 0x58; // double
		constexpr auto m_BlendOutDuration = 0x60; // double
		constexpr auto m_MixInCurve = 0x68; // AnimationCurve
		constexpr auto m_MixOutCurve = 0x70; // AnimationCurve
		constexpr auto m_BlendInCurveMode = 0x78; // TimelineClip.BlendCurveMode
		constexpr auto m_BlendOutCurveMode = 0x7c; // TimelineClip.BlendCurveMode
		constexpr auto m_ExposedParameterNames = 0x80; // List(string)
		constexpr auto m_AnimationCurves = 0x88; // AnimationClip
		constexpr auto m_Recordable = 0x90; // bool
		constexpr auto m_PostExtrapolationMode = 0x94; // TimelineClip.ClipExtrapolation
		constexpr auto m_PreExtrapolationMode = 0x98; // TimelineClip.ClipExtrapolation
		constexpr auto m_PostExtrapolationTime = 0xa0; // double
		constexpr auto m_PreExtrapolationTime = 0xa8; // double
		constexpr auto m_DisplayName = 0xb0; // string
	}

	namespace n_ApplicationManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
	}

	namespace n_ComDefaultInterfaceAttribute { // : Attribute
		constexpr auto _val = 0x10; // Type
	}

	namespace n_PKCS8.PrivateKeyInfo {
		constexpr auto _version = 0x10; // int
		constexpr auto _algorithm = 0x18; // string
		constexpr auto _key = 0x20; // byte[]
		constexpr auto _list = 0x28; // ArrayList
	}

	namespace n_FaceInfo_Legacy {
		constexpr auto Name = 0x10; // string
		constexpr auto PointSize = 0x18; // float
		constexpr auto Scale = 0x1c; // float
		constexpr auto CharacterCount = 0x20; // int
		constexpr auto LineHeight = 0x24; // float
		constexpr auto Baseline = 0x28; // float
		constexpr auto Ascender = 0x2c; // float
		constexpr auto CapHeight = 0x30; // float
		constexpr auto Descender = 0x34; // float
		constexpr auto CenterLine = 0x38; // float
		constexpr auto SuperscriptOffset = 0x3c; // float
		constexpr auto SubscriptOffset = 0x40; // float
		constexpr auto SubSize = 0x44; // float
		constexpr auto Underline = 0x48; // float
		constexpr auto UnderlineThickness = 0x4c; // float
		constexpr auto strikethrough = 0x50; // float
		constexpr auto strikethroughThickness = 0x54; // float
		constexpr auto TabWidth = 0x58; // float
		constexpr auto Padding = 0x5c; // float
		constexpr auto AtlasWidth = 0x60; // float
		constexpr auto AtlasHeight = 0x64; // float
	}

	namespace n_XmlNamespaceManager { // : IXmlNamespaceResolver
		constexpr auto nsdecls = 0x10; // XmlNamespaceManager.NamespaceDeclaration[]
		constexpr auto lastDecl = 0x18; // int
		constexpr auto nameTable = 0x20; // XmlNameTable
		constexpr auto scopeId = 0x28; // int
		constexpr auto hashTable = 0x30; // Dictionary(string, int)
		constexpr auto useHashtable = 0x38; // bool
		constexpr auto xml = 0x40; // string
		constexpr auto xmlNs = 0x48; // string
	}

	namespace n_LoadoutToolLine { // : MonoBehaviour
		constexpr auto T = 0x18; // float
		constexpr auto StartAsItem = 0x20; // RectTransform
		constexpr auto EndAsTransform = 0x28; // Transform
		constexpr auto horizontalLine = 0x30; // RectTransform
		constexpr auto verticalLine = 0x38; // RectTransform
		constexpr auto Bounds = 0x40; // RectTransform
		constexpr auto Canvas = 0x48; // Canvas
		constexpr auto startPosition = 0x50; // Vector2
		constexpr auto endPosition = 0x58; // Vector2
		constexpr auto hadTargetLastFrame = 0x60; // bool
		constexpr auto bounds = 0x68; // Vector3[]
	}

	namespace n_DocumentXPathNodeIterator_ElemChildren_NoLocalName { // : DocumentXPathNodeIterator_ElemDescendants
		constexpr auto nsAtom = 0x28; // string
	}

	namespace n_NoInterpClampedIntParameter { // : VolumeParameter(int)
		constexpr auto min = 0x20; // int
		constexpr auto max = 0x24; // int
	}

	namespace n_PositionOffset { // : TransformComponentsSettings
		constexpr auto minPositionOffset = 0x20; // Vector3
		constexpr auto maxPositionOffset = 0x2c; // Vector3
	}

	namespace n_ServerInfo { // : IComparable(ServerInfo)
		constexpr auto _counter = 0x10; // Stopwatch
		constexpr auto _socket = 0x18; // Socket
		constexpr auto buffer = 0x20; // byte[]
		constexpr auto lastSendTime = 0x28; // long
		constexpr auto Destination = 0x30; // IPEndPoint
		constexpr auto (IP)k__BackingField = 0x38; // string
		constexpr auto (Port)k__BackingField = 0x40; // int
		constexpr auto (Ping)k__BackingField = 0x48; // long
		constexpr auto (ServerName)k__BackingField = 0x50; // string
		constexpr auto (MapName)k__BackingField = 0x58; // string
		constexpr auto (MaxPlayers)k__BackingField = 0x60; // byte
		constexpr auto (MinRank)k__BackingField = 0x62; // ushort
		constexpr auto (MaxRank)k__BackingField = 0x64; // ushort
		constexpr auto (CurrentPlayers)k__BackingField = 0x66; // byte
		constexpr auto (GameMode)k__BackingField = 0x67; // GameMode
		constexpr auto (GameType)k__BackingField = 0x68; // GameType
		constexpr auto (Time)k__BackingField = 0x6c; // DayNightTime
		constexpr auto (Size)k__BackingField = 0x70; // Size
		constexpr auto (BuildID)k__BackingField = 0x78; // string
		constexpr auto (SteamID)k__BackingField = 0x80; // ulong
		constexpr auto (Hz)k__BackingField = 0x88; // int
		constexpr auto (isComplated)k__BackingField = 0x8c; // bool
		constexpr auto (isSucced)k__BackingField = 0x8d; // bool
	}

	namespace n_TrackClipTypeAttribute { // : Attribute
		constexpr auto inspectedType = 0x10; // Type
		constexpr auto allowAutoCreate = 0x18; // bool
	}

	namespace n_PlayerRootTransformState {
		constexpr auto StopFlag = 0x10; // bool
		constexpr auto RoomID = 0x14; // int
		constexpr auto StreamRate = 0x18; // int
		constexpr auto LastReceivedStreamTime = 0x1c; // float
		constexpr auto StreamRateDeltaTime = 0x20; // float
		constexpr auto NetworkDelta = 0x24; // Vector3
		constexpr auto ServerPosition = 0x30; // Vector3
		constexpr auto HorizontalMouseLook = 0x3c; // float
		constexpr auto OutputPosition = 0x40; // Vector3
	}

	namespace n_Shadow { // : BaseMeshEffect
		constexpr auto m_EffectColor = 0x20; // Color
		constexpr auto m_EffectDistance = 0x30; // Vector2
		constexpr auto m_UseGraphicAlpha = 0x38; // bool
	}

	namespace n_NoInterpMinIntParameter { // : VolumeParameter(int)
		constexpr auto min = 0x20; // int
	}

	namespace n_MainLoop.mLoopLateUpdateEnd {
		constexpr auto Array = 0x10; // ILateUpdateEndReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_VariableQuery { // : ExtensionQuery
		constexpr auto variable = 0x38; // IXsltContextVariable
	}

	namespace n_MonoField { // : RtFieldInfo
		constexpr auto klass = 0x10; // IntPtr
		constexpr auto fhandle = 0x18; // RuntimeFieldHandle
		constexpr auto name = 0x20; // string
		constexpr auto type = 0x28; // Type
		constexpr auto attrs = 0x30; // FieldAttributes
	}

	namespace n_IPAddress {
		constexpr auto m_Address = 0x10; // long
		constexpr auto m_ToString = 0x18; // string
		constexpr auto m_Family = 0x20; // AddressFamily
		constexpr auto m_Numbers = 0x28; // ushort[]
		constexpr auto m_ScopeId = 0x30; // long
		constexpr auto m_HashCode = 0x38; // int
	}

	namespace n_EventProvider { // : IDisposable
		constexpr auto m_etwCallback = 0x10; // UnsafeNativeMethods.ManifestEtw.EtwEnableCallback
		constexpr auto m_thisGCHandle = 0x18; // GCHandle
		constexpr auto m_regHandle = 0x20; // long
		constexpr auto m_level = 0x28; // byte
		constexpr auto m_anyKeywordMask = 0x30; // long
		constexpr auto m_allKeywordMask = 0x38; // long
		constexpr auto m_liveSessions = 0x40; // List(EventProvider.SessionInfo)
		constexpr auto m_enabled = 0x48; // bool
		constexpr auto m_providerId = 0x4c; // Guid
		constexpr auto m_disposed = 0x5c; // bool
	}

	namespace n_SoapMethodAttribute { // : SoapAttribute
		constexpr auto _responseElement = 0x28; // string
		constexpr auto _responseNamespace = 0x30; // string
		constexpr auto _returnElement = 0x38; // string
		constexpr auto _soapAction = 0x40; // string
		constexpr auto _useAttribute = 0x48; // bool
		constexpr auto _namespace = 0x50; // string
	}

	namespace n_PKCS7.EncryptedData {
		constexpr auto _version = 0x10; // byte
		constexpr auto _content = 0x18; // PKCS7.ContentInfo
		constexpr auto _encryptionAlgorithm = 0x20; // PKCS7.ContentInfo
		constexpr auto _encrypted = 0x28; // byte[]
	}

	namespace n_OSSpecificSynchronizationContext.InvocationContext {
		constexpr auto m_Delegate = 0x10; // SendOrPostCallback
		constexpr auto m_State = 0x18; // object
	}

	namespace n_VFXTransformBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Transform
		constexpr auto Position = 0x30; // ExposedProperty
		constexpr auto Angles = 0x38; // ExposedProperty
		constexpr auto Scale = 0x40; // ExposedProperty
	}

	namespace n_SecurityException { // : SystemException
		constexpr auto permissionState = 0x88; // string
	}

	namespace n_GImpactMeshShape { // : GImpactShapeInterface
		constexpr auto _meshInterface = 0x30; // StridingMeshInterface
		constexpr auto _disposeMeshInterface = 0x38; // bool
	}

	namespace n_TextContainer { // : UIBehaviour
		constexpr auto m_hasChanged = 0x18; // bool
		constexpr auto m_pivot = 0x1c; // Vector2
		constexpr auto m_anchorPosition = 0x24; // TextContainerAnchors
		constexpr auto m_rect = 0x28; // Rect
		constexpr auto m_isDefaultWidth = 0x38; // bool
		constexpr auto m_isDefaultHeight = 0x39; // bool
		constexpr auto m_isAutoFitting = 0x3a; // bool
		constexpr auto m_corners = 0x40; // Vector3[]
		constexpr auto m_worldCorners = 0x48; // Vector3[]
		constexpr auto m_margins = 0x50; // Vector4
		constexpr auto m_rectTransform = 0x60; // RectTransform
		constexpr auto m_textMeshPro = 0x68; // TextMeshPro
	}

	namespace n_Evidence.EvidenceEnumerator { // : IEnumerator
		constexpr auto currentEnum = 0x10; // IEnumerator
		constexpr auto hostEnum = 0x18; // IEnumerator
		constexpr auto assemblyEnum = 0x20; // IEnumerator
	}

	namespace n_PlayerGUI { // : MonoBehaviour
		constexpr auto GUI_Main_Renderer = 0x18; // MeshRenderer
		constexpr auto GUI_Main = 0x20; // TeamGUI
		constexpr auto GUI_PlayerHP = 0x28; // TeamGUI
		constexpr auto GUI_Bleeding = 0x30; // TeamGUI
		constexpr auto GUI_Revive = 0x38; // TeamGUI
		constexpr auto GUI_Dead = 0x40; // TeamGUI
		constexpr auto mOwner = 0x48; // NetworkClient
		constexpr auto mLastSetHP = 0x50; // float
		constexpr auto mLastMainMaterial = 0x58; // Material
		constexpr auto mLastMaterialUpdate = 0x60; // float
		constexpr auto mDeadFlag = 0x64; // bool
	}

	namespace n_DestructivePool { // : MonoBehaviour
		constexpr auto fakePlayer = 0x18; // CapsuleCollider
	}

	namespace n_AsyncWebClient {
		constexpr auto (URL)k__BackingField = 0x10; // string
		constexpr auto (isFail)k__BackingField = 0x18; // bool
		constexpr auto (isDownloading)k__BackingField = 0x19; // bool
		constexpr auto client = 0x20; // WebClient
		constexpr auto data = 0x28; // byte[]
	}

	namespace n_VehicleInstance { // : SeatManager
		constexpr auto Lods = 0x58; // MeshRenderer[]
		constexpr auto FrontLights = 0x60; // GameObject
		constexpr auto BackLights = 0x68; // GameObject
		constexpr auto (FastListIndexA)k__BackingField = 0x70; // int
		constexpr auto TransformIndex = 0x74; // int
		constexpr auto StopFlag = 0x78; // bool
		constexpr auto isInitialized = 0x79; // bool
		constexpr auto Rigidbody = 0x80; // SRigidbody
		constexpr auto AllSeatBehaviours = 0x88; // SeatBehaviour[]
		constexpr auto (Transform)k__BackingField = 0x90; // Transform
		constexpr auto (Visual)k__BackingField = 0x98; // Transform
		constexpr auto (WorldCollider)k__BackingField = 0xa0; // Transform
		constexpr auto (DriveCollider)k__BackingField = 0xa8; // Transform
		constexpr auto (Map)k__BackingField = 0xb0; // MapVehicleWorldObject
		constexpr auto (DamageVisualizer)k__BackingField = 0xb8; // VehicleVisualDamageManager
		constexpr auto (GUI)k__BackingField = 0xc0; // VehicleVisualGUI
		constexpr auto (Colliders)k__BackingField = 0xc8; // VehicleCollider[]
		constexpr auto (AllMeshRenderers)k__BackingField = 0xd0; // MeshRenderer[]
		constexpr auto (AllLayerRenderers)k__BackingField = 0xd8; // List(GameObject)
		constexpr auto (LOD)k__BackingField = 0xe0; // VehicleLOD
		constexpr auto (SpotClock)k__BackingField = 0xe8; // SpotClock
		constexpr auto WorldPosition = 0xf0; // Vector3
		constexpr auto WorldRotation = 0xfc; // Quaternion
		constexpr auto Stream = 0x110; // Stream
		constexpr auto StreamUpdater = 0x118; // StreamUpdater
		constexpr auto NetworkReceiveRate = 0x120; // StreamRate
		constexpr auto mAssistHolder = 0x128; // Dictionary(ulong, ValueTuple(float, ushort))
		constexpr auto ThreadedInterpolationVector = 0x130; // Vector3
		constexpr auto serverSideWorldColliders = 0x140; // VehicleWorldColliderServer
		constexpr auto FloatingPhysics = 0x148; // FloatingObjectPhysics
		constexpr auto m_repairHistory = 0x150; // Dictionary(ulong, float)
		constexpr auto _simulatingFlag = 0x158; // bool
		constexpr auto _driverUploadingFlag = 0x159; // bool
		constexpr auto _worldActive = 0x15a; // bool
		constexpr auto _engineChangeTime = 0x15c; // float
		constexpr auto _lastAutoDestroyTime = 0x160; // float
		constexpr auto server_lastPersonDamagedSteamID = 0x168; // ulong
		constexpr auto server_lastPersonDamagedToolID = 0x170; // int
		constexpr auto _lastEngineMultiplierCalculatedFrame = 0x174; // int
		constexpr auto _lastEngineMultiplierCalculated = 0x178; // float
		constexpr auto _lastSetLayer = 0x17c; // int
		constexpr auto m_lastInteract = 0x180; // float
		constexpr auto m_lastAutoDestroyCheck = 0x184; // float
		constexpr auto m_serverLastRepair = 0x188; // float
		constexpr auto m_repairedTill = 0x18c; // float
		constexpr auto m_counter = 0x190; // int
		constexpr auto (VehicleID)k__BackingField = 0x194; // int
		constexpr auto (SpawnPosition)k__BackingField = 0x198; // Vector3
		constexpr auto (isEngineOn)k__BackingField = 0x1a4; // bool
		constexpr auto (EngineOnNetworkTime)k__BackingField = 0x1a8; // float
		constexpr auto (EnginePower)k__BackingField = 0x1ac; // float
		constexpr auto (isSimulating)k__BackingField = 0x1b0; // bool
		constexpr auto (DistanceToLocalPlayer)k__BackingField = 0x1b4; // float
		constexpr auto (onWater)k__BackingField = 0x1b8; // bool
		constexpr auto (sinkLevel)k__BackingField = 0x1bc; // float
		constexpr auto (SpawnPoint)k__BackingField = 0x1c0; // VehicleSpawnPoint
		constexpr auto (OnSpawnTeam)k__BackingField = 0x1c8; // Team
		constexpr auto (FrontLight)k__BackingField = 0x1cc; // FrontLightState
		constexpr auto (BackLight)k__BackingField = 0x1d0; // BackLightState
		constexpr auto (HP)k__BackingField = 0x1d4; // float
		constexpr auto (RepairableHP)k__BackingField = 0x1d8; // float
		constexpr auto (LastDamageGiven)k__BackingField = 0x1dc; // float
		constexpr auto CollidersHidden = 0x1e0; // bool
		constexpr auto (Skin)k__BackingField = 0x1e4; // SkinType
		constexpr auto lastSupply = 0x1e8; // float
		constexpr auto m_lastPushed = 0x1ec; // float
	}

	namespace n_GuidAttribute { // : Attribute
		constexpr auto _val = 0x10; // string
	}

	namespace n_DebuggableAttribute { // : Attribute
		constexpr auto m_debuggingModes = 0x10; // DebuggableAttribute.DebuggingModes
	}

	namespace n_MapBehaviour { // : MonoBehaviour
		constexpr auto canvas = 0x18; // Canvas
		constexpr auto mask = 0x20; // RectMask2D
		constexpr auto raycaster = 0x28; // GraphicRaycaster
		constexpr auto (TickIndex8)k__BackingField = 0x30; // int
		constexpr auto Position = 0x38; // RectTransform
		constexpr auto Scale = 0x40; // float
		constexpr auto TargetScale = 0x44; // float
		constexpr auto lastMouse = 0x48; // Vector2
		constexpr auto isDragging = 0x50; // bool
		constexpr auto lastScaleDone = 0x54; // float
		constexpr auto isHovering = 0x58; // bool
		constexpr auto Self = 0x60; // RawImage
		constexpr auto Dynamic = 0x68; // Transform
		constexpr auto Dynamic2 = 0x70; // Transform
		constexpr auto Static = 0x78; // Transform
		constexpr auto GridMaterial = 0x80; // Material
		constexpr auto PlayAreaMaterial = 0x88; // Material
		constexpr auto MainMap = 0x90; // RawImage
		constexpr auto MainGrid = 0x98; // RawImage
		constexpr auto Point = 0xa0; // RectTransform
		constexpr auto PointCanvas = 0xa8; // CanvasGroup
		constexpr auto Player = 0xb0; // MapUIBehaviour
		constexpr auto Vehicle = 0xb8; // MapUIBehaviour
		constexpr auto Rally = 0xc0; // MapUIBehaviour
		constexpr auto RushBase = 0xc8; // MapUIBehaviour
		constexpr auto RushSpawnPoint = 0xd0; // MapUIBehaviour
		constexpr auto RushBeacon = 0xd8; // MapUIBehaviour
		constexpr auto RushBeaconTarget = 0xe0; // MapUIBehaviour
		constexpr auto PlayerPool = 0xe8; // MapUIPool(MapUIBehaviour)
		constexpr auto VehiclePool = 0xf0; // MapUIPool(MapUIBehaviour)
		constexpr auto FlagPool = 0xf8; // MapUIPool(MapUIBehaviour)
		constexpr auto RallyPool = 0x100; // MapUIPool(MapUIBehaviour)
		constexpr auto RushBasePool = 0x108; // MapUIPool(MapUIBehaviour)
		constexpr auto RushSpawnPointPool = 0x110; // MapUIPool(MapUIBehaviour)
		constexpr auto RushBeaconPool = 0x118; // MapUIPool(MapUIBehaviour)
		constexpr auto RushBeaconTargetPool = 0x120; // MapUIPool(MapUIBehaviour)
		constexpr auto Flag = 0x128; // MapUIBehaviour
		constexpr auto rectTransform = 0x130; // RectTransform
		constexpr auto m_mainMap = 0x138; // Texture
	}

	namespace n_Decoder {
		constexpr auto m_fallback = 0x10; // DecoderFallback
		constexpr auto m_fallbackBuffer = 0x18; // DecoderFallbackBuffer
	}

	namespace n_ClipperRegistry {
		constexpr auto m_Clippers = 0x10; // IndexedSet(IClipper)
	}

	namespace n_PauseMenu { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto Main = 0x20; // GameObject
		constexpr auto SettingScreen = 0x28; // GameObject
		constexpr auto GameplayObj = 0x30; // GameObject
		constexpr auto ControllersObj = 0x38; // GameObject
		constexpr auto KeybindingsObj = 0x40; // GameObject
		constexpr auto VideoObj = 0x48; // GameObject
		constexpr auto AudioObj = 0x50; // GameObject
		constexpr auto Options = 0x58; // PauseMenuOptions
		constexpr auto isDisconnecting = 0x60; // bool
	}

	namespace n_MainLoop.mLoopUpdateLogic {
		constexpr auto Array = 0x10; // IUpdateLogicReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_Rocket { // : ToolItem
		constexpr auto Zeroing = 0x60; // float
		constexpr auto ProjectilePrefab = 0x68; // GameObject
	}

	namespace n_ResolveEventArgs { // : EventArgs
		constexpr auto m_Name = 0x10; // string
		constexpr auto m_Requesting = 0x18; // Assembly
	}

	namespace n_Map { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto TeamA = 0x1c; // Nation
		constexpr auto TeamB = 0x1d; // Nation
		constexpr auto UniformSkinType = 0x20; // SkinType
		constexpr auto Size = 0x24; // MapSize
		constexpr auto DaySettings = 0x28; // MapDayNight
		constexpr auto NightSettings = 0x30; // MapDayNight
		constexpr auto TeamDeathMatch = 0x38; // GamemodeSizeVarients
		constexpr auto AdvanceAndSecure = 0x3d; // GamemodeSizeVarients
		constexpr auto Rush = 0x42; // GamemodeSizeVarients
		constexpr auto Conquest = 0x47; // GamemodeSizeVarients
		constexpr auto InfConquest = 0x4c; // GamemodeSizeVarients
		constexpr auto Domination = 0x51; // GamemodeSizeVarients
		constexpr auto Elimination = 0x56; // GamemodeSizeVarients
		constexpr auto Frontline = 0x5b; // GamemodeSizeVarients
		constexpr auto GunGame = 0x60; // GamemodeSizeVarients
		constexpr auto FreeForAll = 0x65; // GamemodeSizeVarients
		constexpr auto GunGameTeam = 0x6a; // GamemodeSizeVarients
		constexpr auto SuicideRush = 0x6f; // GamemodeSizeVarients
		constexpr auto CatchGame = 0x74; // GamemodeSizeVarients
		constexpr auto activeTime = 0x7c; // DayNightTime
	}

	namespace n_PlayerController { // : MonoBehaviour
		constexpr auto Player = 0x18; // PlayerNetwork
		constexpr auto CharacterController = 0x20; // CharacterController
		constexpr auto State = 0x28; // PlayerNetworkState
		constexpr auto VaultVelocity = 0x30; // Vector3
		constexpr auto ClimbServerPosition = 0x3c; // Vector3
		constexpr auto ClimbServerRotation = 0x48; // float
		constexpr auto ClimbHold = 0x4c; // bool
		constexpr auto jumpFlag = 0x4d; // bool
		constexpr auto fallForce = 0x50; // float
		constexpr auto gravityAcceleration = 0x54; // float
		constexpr auto verticalSpeed = 0x58; // float
		constexpr auto vector = 0x5c; // Vector3
		constexpr auto wasOnFly = 0x68; // bool
		constexpr auto wasGrounded = 0x69; // bool
		constexpr auto timeCasted = 0x6c; // float
		constexpr auto StopFlag = 0x70; // bool
	}

	namespace n_FilmGrain { // : VolumeComponent
		constexpr auto type = 0x38; // FilmGrainLookupParameter
		constexpr auto intensity = 0x40; // ClampedFloatParameter
		constexpr auto response = 0x48; // ClampedFloatParameter
		constexpr auto texture = 0x50; // NoInterpTextureParameter
	}

	namespace n_EventDispatcher {
		constexpr auto m_DispatchingStrategies = 0x10; // List(IEventDispatchingStrategy)
		constexpr auto m_Listener = 0x10; // EventListener
		constexpr auto m_EventEnabled = 0x18; // bool[]
		constexpr auto m_Queue = 0x18; // Queue(EventDispatcher.EventRecord)
		constexpr auto (pointerState)k__BackingField = 0x20; // PointerDispatchState
		constexpr auto m_activityFilteringEnabled = 0x20; // bool
		constexpr auto m_Next = 0x28; // EventDispatcher
		constexpr auto m_GateCount = 0x28; // uint
		constexpr auto m_DispatchContexts = 0x30; // Stack(EventDispatcher.DispatchContext)
		constexpr auto m_Immediate = 0x38; // bool
	}

	namespace n_ReaderWriterLockSlim { // : IDisposable
		constexpr auto fIsReentrant = 0x10; // bool
		constexpr auto myLock = 0x14; // int
		constexpr auto numWriteWaiters = 0x18; // uint
		constexpr auto numReadWaiters = 0x1c; // uint
		constexpr auto numWriteUpgradeWaiters = 0x20; // uint
		constexpr auto numUpgradeWaiters = 0x24; // uint
		constexpr auto fNoWaiters = 0x28; // bool
		constexpr auto upgradeLockOwnerId = 0x2c; // int
		constexpr auto writeLockOwnerId = 0x30; // int
		constexpr auto writeEvent = 0x38; // EventWaitHandle
		constexpr auto readEvent = 0x40; // EventWaitHandle
		constexpr auto upgradeEvent = 0x48; // EventWaitHandle
		constexpr auto waitUpgradeEvent = 0x50; // EventWaitHandle
		constexpr auto lockID = 0x58; // long
		constexpr auto fUpgradeThreadHoldingRead = 0x60; // bool
		constexpr auto owners = 0x64; // uint
		constexpr auto fDisposed = 0x68; // bool
	}

	namespace n_SubsystemDescriptor { // : ISubsystemDescriptor
		constexpr auto (id)k__BackingField = 0x10; // string
	}

	namespace n_StringCollection { // : IList
		constexpr auto data = 0x10; // ArrayList
	}

	namespace n_XmlSchemaChoice { // : XmlSchemaGroupBase
		constexpr auto items = 0x38; // XmlSchemaObjectCollection
	}

	namespace n_CollisionObjectWrapper {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_ResourceManager.CultureNameResourceSetPair {
		constexpr auto lastCultureName = 0x10; // string
		constexpr auto lastResourceSet = 0x18; // ResourceSet
	}

	namespace n_ObjectHolderListEnumerator {
		constexpr auto m_isFixupEnumerator = 0x10; // bool
		constexpr auto m_list = 0x18; // ObjectHolderList
		constexpr auto m_startingVersion = 0x20; // int
		constexpr auto m_currPos = 0x24; // int
	}

	namespace n_RSAManaged { // : RSA
		constexpr auto isCRTpossible = 0x20; // bool
		constexpr auto keypairGenerated0 = 0x21; // bool
		constexpr auto keyBlinding = 0x21; // bool
		constexpr auto keypairGenerated = 0x22; // bool
		constexpr auto m_disposed0 = 0x22; // bool
		constexpr auto m_disposed = 0x23; // bool
		constexpr auto d = 0x28; // BigInteger
		constexpr auto p = 0x30; // BigInteger
		constexpr auto q = 0x38; // BigInteger
		constexpr auto dp = 0x40; // BigInteger
		constexpr auto dq = 0x48; // BigInteger
		constexpr auto qInv = 0x50; // BigInteger
		constexpr auto n = 0x58; // BigInteger
		constexpr auto e = 0x60; // BigInteger
		constexpr auto KeyGenerated = 0x68; // RSAManaged.KeyGeneratedEventHandler
	}

	namespace n_MultiBodySolverConstraint { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _multiBodyA = 0x18; // MultiBody
		constexpr auto _multiBodyB = 0x20; // MultiBody
	}

	namespace n_ChildrenQuery { // : BaseAxisQuery
		constexpr auto iterator = 0x58; // XPathNodeIterator
	}

	namespace n_Video {
		constexpr auto Resolution = 0x10; // Resolutions
		constexpr auto FullScreenMode = 0x14; // FullScreenMode
		constexpr auto ScreenScale = 0x18; // int
		constexpr auto VerticalSync = 0x1c; // bool
		constexpr auto MaxFPS = 0x20; // int
		constexpr auto GpuSkinning = 0x24; // bool
		constexpr auto Brightness = 0x28; // float
		constexpr auto BrightnessColoring = 0x2c; // bool
		constexpr auto FieldOfView = 0x30; // float
		constexpr auto VehicleFieldOfView = 0x34; // float
		constexpr auto UIMulithreading = 0x38; // bool
		constexpr auto ShadowsEnabled = 0x39; // bool
		constexpr auto ShadowResolution = 0x3c; // ShadowResolution
		constexpr auto ShadowDistance = 0x40; // ShadowDistance
		constexpr auto Antialiasign = 0x44; // AntialiasignSettings
		constexpr auto SoftShadows = 0x48; // bool
		constexpr auto TerrainQuality = 0x4c; // float
		constexpr auto LazyLods = 0x50; // bool
		constexpr auto NumberOfLights = 0x54; // int
		constexpr auto RainQuality = 0x58; // QualityEnum
		constexpr auto DestructionQuality = 0x5c; // QualityEnum
		constexpr auto RenderDistance = 0x60; // int
		constexpr auto ShaderQuality = 0x64; // ShaderQualityEnum
		constexpr auto Vignette = 0x68; // bool
		constexpr auto Bloom = 0x69; // bool
		constexpr auto SSAO = 0x6a; // bool
		constexpr auto MotionBlur = 0x6b; // bool
		constexpr auto AdsEffect = 0x6c; // bool
	}

	namespace n_AnimationTrack { // : TrackAsset
		constexpr auto m_InfiniteClipPreExtrapolation = 0xa0; // TimelineClip.ClipExtrapolation
		constexpr auto m_InfiniteClipPostExtrapolation = 0xa4; // TimelineClip.ClipExtrapolation
		constexpr auto m_InfiniteClipOffsetPosition = 0xa8; // Vector3
		constexpr auto m_InfiniteClipOffsetEulerAngles = 0xb4; // Vector3
		constexpr auto m_InfiniteClipTimeOffset = 0xc0; // double
		constexpr auto m_InfiniteClipRemoveOffset = 0xc8; // bool
		constexpr auto m_InfiniteClipApplyFootIK = 0xc9; // bool
		constexpr auto mInfiniteClipLoop = 0xcc; // AnimationPlayableAsset.LoopMode
		constexpr auto m_MatchTargetFields = 0xd0; // MatchTargetFields
		constexpr auto m_Position = 0xd4; // Vector3
		constexpr auto m_EulerAngles = 0xe0; // Vector3
		constexpr auto m_AvatarMask = 0xf0; // AvatarMask
		constexpr auto m_ApplyAvatarMask = 0xf8; // bool
		constexpr auto m_TrackOffset = 0xfc; // TrackOffset
		constexpr auto m_InfiniteClip = 0x100; // AnimationClip
		constexpr auto m_OpenClipOffsetRotation = 0x108; // Quaternion
		constexpr auto m_Rotation = 0x118; // Quaternion
		constexpr auto m_ApplyOffsets = 0x128; // bool
	}

	namespace n_MulticastDelegate { // : Delegate
		constexpr auto delegates = 0x68; // Delegate[]
	}

	namespace n_RemoteConfigSettings {
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto Updated = 0x18; // Action(bool)
	}

	namespace n_ConstraintSolver { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_ContentSizeFitter { // : UIBehaviour
		constexpr auto m_HorizontalFit = 0x18; // ContentSizeFitter.FitMode
		constexpr auto m_VerticalFit = 0x1c; // ContentSizeFitter.FitMode
		constexpr auto m_Rect = 0x20; // RectTransform
		constexpr auto m_Tracker = 0x28; // DrivenRectTransformTracker
	}

	namespace n_MlcpSolverInterface { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_RTHandle {
		constexpr auto m_Owner = 0x10; // RTHandleSystem
		constexpr auto m_RT = 0x18; // RenderTexture
		constexpr auto m_ExternalTexture = 0x20; // Texture
		constexpr auto m_NameID = 0x28; // RenderTargetIdentifier
		constexpr auto m_EnableMSAA = 0x50; // bool
		constexpr auto m_EnableRandomWrite = 0x51; // bool
		constexpr auto m_EnableHWDynamicScale = 0x52; // bool
		constexpr auto m_Name = 0x58; // string
		constexpr auto (scaleFactor)k__BackingField = 0x60; // Vector2
		constexpr auto scaleFunc = 0x68; // ScaleFunc
		constexpr auto (useScaling)k__BackingField = 0x70; // bool
		constexpr auto (referenceSize)k__BackingField = 0x74; // Vector2Int
	}

	namespace n_X509KeyUsageExtension { // : X509Extension
		constexpr auto _keyUsages = 0x28; // X509KeyUsageFlags
		constexpr auto _status = 0x2c; // AsnDecodeStatus
	}

	namespace n_NodeFunctions { // : ValueQuery
		constexpr auto arg = 0x18; // Query
		constexpr auto funcType = 0x20; // Function.FunctionType
		constexpr auto xsltContext = 0x28; // XsltContext
	}

	namespace n_SoftContact { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _face = 0x18; // Face
		constexpr auto _node = 0x20; // Node
	}

	namespace n_VehicleSpawnPoint { // : MonoBehaviour
		constexpr auto Vehicle = 0x18; // Vehicle
		constexpr auto mPreferedTeam = 0x20; // Team
		constexpr auto mIsEnabled = 0x21; // bool
		constexpr auto (isActive)k__BackingField = 0x22; // bool
		constexpr auto (SpawnVehiclesAsNoTeam)k__BackingField = 0x23; // bool
		constexpr auto (ActiveInstance)k__BackingField = 0x28; // VehicleInstance
		constexpr auto (SpawnedTime)k__BackingField = 0x30; // float
		constexpr auto (NextSpawnTime)k__BackingField = 0x34; // float
		constexpr auto (TerritoryTeam)k__BackingField = 0x38; // Team
		constexpr auto (Peer)k__BackingField = 0x40; // VehiclePeer
	}

	namespace n_CollisionConfiguration { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_CompassUIElement_AirDrone { // : CompassUIElement
		constexpr auto Rect = 0x60; // RectTransform
	}

	namespace n_Curves.Hearthbeat {
		constexpr auto SingleHeathbeat = 0x10; // AnimationCurve
	}

	namespace n_MicDeviceBehaviour { // : OptionsElement
		constexpr auto Label = 0x20; // TextMeshProUGUI
		constexpr auto Next = 0x28; // Button
		constexpr auto Previous = 0x30; // Button
		constexpr auto lastUpdate = 0x38; // float
		constexpr auto currentIndex = 0x3c; // int
	}

	namespace n_TeamDeathMatchSettings { // : GamemodeSettingsBase
		constexpr auto (TDM_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (TDM_Tickets)k__BackingField = 0x150; // GamemodeVariable(int)
	}

	namespace n_UnionFind { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_TextWriter.SyncTextWriter { // : TextWriter
		constexpr auto _out = 0x28; // TextWriter
	}

	namespace n_SideRail { // : MonoBehaviour
		constexpr auto PoolableAttachment = 0x18; // PoolableAttachment
		constexpr auto Body = 0x20; // MeshRenderer
		constexpr auto RemovableObjects = 0x28; // GameObject[]
		constexpr auto LocalOnlyScript = 0x30; // AttachmentAddon
		constexpr auto mAttachmentComponets = 0x38; // IAttachmentChild[]
		constexpr auto (Item)k__BackingField = 0x40; // IAttachmentItem
		constexpr auto (Owner)k__BackingField = 0x48; // NetworkClient
		constexpr auto (Weapon)k__BackingField = 0x50; // WeaponManager
		constexpr auto lod = 0x58; // THPLod
		constexpr auto DefaultInput = 0x60; // bool
		constexpr auto DefaultState = 0x61; // bool
		constexpr auto OnStateSetFalse = 0x68; // UnityEvent
		constexpr auto OnStateSetTrue = 0x70; // UnityEvent
		constexpr auto State = 0x78; // bool
	}

	namespace n_GroupCollection { // : ICollection
		constexpr auto _match = 0x10; // Match
		constexpr auto _captureMap = 0x18; // Hashtable
		constexpr auto _groups = 0x20; // Group[]
	}

	namespace n_LoopAndDelay { // : VFXSpawnerCallbacks
		constexpr auto m_LoopMaxCount = 0x18; // int
		constexpr auto m_LoopCurrentIndex = 0x1c; // int
		constexpr auto m_WaitingForTotalTime = 0x20; // float
	}

	namespace n_GamemodeBoundsUIMap { // : MonoBehaviour
		constexpr auto Material = 0x18; // Material
		constexpr auto mVersion = 0x20; // int
		constexpr auto mTeam = 0x24; // Team
		constexpr auto mVertices = 0x28; // List(Vector2)
		constexpr auto mTeamASafeZones = 0x30; // List(Vector2Int)
		constexpr auto mTeamBSafeZones = 0x38; // List(Vector2Int)
		constexpr auto mBorders = 0x40; // Vector2Int
		constexpr auto mSecondBorders = 0x48; // Vector2Int
		constexpr auto mVerticesBuffer = 0x50; // ComputeBuffer
		constexpr auto mTeamASafeZonesBuffer = 0x58; // ComputeBuffer
		constexpr auto mTeamBSafeZonesBuffer = 0x60; // ComputeBuffer
		constexpr auto (TickIndex8)k__BackingField = 0x68; // int
	}

	namespace n_AsyncCompletedEventArgs { // : EventArgs
		constexpr auto error = 0x10; // Exception
		constexpr auto cancelled = 0x18; // bool
		constexpr auto userState = 0x20; // object
	}

	namespace n_FreeForAllUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_OfflinePlayer { // : MonoBehaviour
		constexpr auto Team = 0x18; // Team
		constexpr auto Role = 0x19; // Role
		constexpr auto Primary = 0x20; // OfflinePlayer.Weapon
		constexpr auto Secondary = 0x28; // OfflinePlayer.Weapon
		constexpr auto FirstAid = 0x30; // AGadget
		constexpr auto ToolA = 0x38; // AGadget
		constexpr auto ToolB = 0x40; // AGadget
		constexpr auto Throwable = 0x48; // AGadget
		constexpr auto Helmet = 0x50; // WearableHead
		constexpr auto Chest = 0x58; // WearableChest
		constexpr auto Backpack = 0x60; // WearableBackbag
		constexpr auto Belt = 0x68; // WearableBelt
		constexpr auto ArmorRunSpeedTotal = 0x70; // float
		constexpr auto ArmorAimSpeedTotal = 0x74; // float
		constexpr auto ResetPrimary = 0x78; // bool
		constexpr auto ResetSecondary = 0x79; // bool
		constexpr auto ResetThrowable = 0x7a; // bool
		constexpr auto forcedLoadout = 0x80; // ALoadout
		constexpr auto forcedSkin = 0x88; // CharacterWearings
	}

	namespace n_XPathDocumentElementDescendantIterator { // : XPathDocumentBaseIterator
		constexpr auto end = 0x28; // XPathDocumentNavigator
		constexpr auto localName = 0x30; // string
		constexpr auto namespaceUri = 0x38; // string
		constexpr auto matchSelf = 0x40; // bool
	}

	namespace n_RushBeaconUI { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (WorldBeacon)k__BackingField = 0x20; // RushBeacon
		constexpr auto Label = 0x28; // TextMeshProUGUI
		constexpr auto SquadLabel = 0x30; // TextMeshProUGUI
		constexpr auto ObjLabel = 0x38; // TextMeshProUGUI
		constexpr auto TargetAnimation = 0x40; // GameObject
		constexpr auto PingButton = 0x48; // GameObject
		constexpr auto ObjCanvas = 0x50; // CanvasGroup
		constexpr auto Selected = 0x58; // RectTransform
		constexpr auto AttackerIcon = 0x60; // Sprite
		constexpr auto DefenderIcon = 0x68; // Sprite
		constexpr auto mRect = 0x70; // RectTransform
		constexpr auto mCanvas = 0x78; // CanvasGroup
		constexpr auto mImage = 0x80; // Image
		constexpr auto mSquadLabelVers = 0x88; // int
		constexpr auto mIsAttacker = 0x8c; // bool
		constexpr auto mScale = 0x90; // float
		constexpr auto mAlpha = 0x94; // float
	}

	namespace n_VFXPropertyBindingAttribute { // : PropertyAttribute
		constexpr auto EditorTypes = 0x18; // string[]
	}

	namespace n_EventSource.OverideEventProvider { // : EventProvider
		constexpr auto m_eventSource = 0x60; // EventSource
	}

	namespace n_AsyncResult { // : IAsyncResult
		constexpr auto async_state = 0x10; // object
		constexpr auto handle = 0x18; // WaitHandle
		constexpr auto async_delegate = 0x20; // object
		constexpr auto data = 0x28; // IntPtr
		constexpr auto object_data = 0x30; // object
		constexpr auto sync_completed = 0x38; // bool
		constexpr auto completed = 0x39; // bool
		constexpr auto endinvoke_called = 0x3a; // bool
		constexpr auto async_callback = 0x40; // object
		constexpr auto current = 0x48; // ExecutionContext
		constexpr auto original = 0x50; // ExecutionContext
		constexpr auto add_time = 0x58; // long
		constexpr auto call_message = 0x60; // MonoMethodMessage
		constexpr auto message_ctrl = 0x68; // IMessageCtrl
		constexpr auto reply_message = 0x70; // IMessage
		constexpr auto orig_cb = 0x78; // WaitCallback
	}

	namespace n_ThpRagdollProfile {
		constexpr auto main_position = 0x10; // Vector3
		constexpr auto main_rotation = 0x1c; // Vector3
		constexpr auto spine = 0x28; // Vector3
		constexpr auto leftLeg = 0x34; // Vector3
		constexpr auto rightLeg = 0x40; // Vector3
		constexpr auto leftLegElbow = 0x4c; // Vector3
		constexpr auto rightLegElbow = 0x58; // Vector3
		constexpr auto leftArm = 0x64; // Vector3
		constexpr auto rightArm = 0x70; // Vector3
		constexpr auto leftArmElbow = 0x7c; // Vector3
		constexpr auto rightArmElbow = 0x88; // Vector3
		constexpr auto jobHandle = 0x98; // JobHandle
		constexpr auto job = 0xa8; // ThpRagdollProfile.RagdollBonesTransformUpdateJob
	}

	namespace n_TerrainRegion {
		constexpr auto Trees = 0x10; // BagRaw(Tree)
		constexpr auto Details = 0x18; // BagRaw(Grass)
		constexpr auto DetailMeshes = 0x20; // BagRaw(BakedGrass)
		constexpr auto Bounds = 0x28; // Bounds
		constexpr auto Min = 0x40; // Vector3
		constexpr auto Max = 0x4c; // Vector3
		constexpr auto Center = 0x58; // Vector3
		constexpr auto CenterXZ = 0x64; // Vector2
	}

	namespace n_AirDroneBehaviour { // : DroneInstance
		constexpr auto Rotors = 0xe8; // Transform[]
		constexpr auto Camera = 0xf0; // Transform
		constexpr auto CameraComponent = 0xf8; // Camera
		constexpr auto Hovering = 0x100; // AudioClip
		constexpr auto DefaultSpeed = 0x108; // float
		constexpr auto MaxSpeed = 0x10c; // float
		constexpr auto ThrottlePower = 0x110; // float
		constexpr auto YawSpeed = 0x114; // float
		constexpr auto VisualLeanDegrees = 0x118; // float
		constexpr auto MaximumHeight = 0x11c; // float
		constexpr auto m_horizontalMouse = 0x120; // float
		constexpr auto m_verticalMouse = 0x124; // float
		constexpr auto m_verticalInput = 0x128; // float
		constexpr auto m_horizontalInput = 0x12c; // float
		constexpr auto m_throttleInput = 0x130; // float
		constexpr auto m_zoom = 0x134; // float
		constexpr auto m_boostInput = 0x138; // bool
		constexpr auto m_rotorDegrees = 0x13c; // float
		constexpr auto m_lastHit = 0x140; // float
		constexpr auto m_altitude = 0x144; // float
		constexpr auto m_lastLostConnection = 0x148; // float
		constexpr auto m_cameraEular = 0x14c; // Vector3
		constexpr auto m_src = 0x158; // VehicleAudioSource
		constexpr auto m_remotePosition = 0x160; // Vector3
		constexpr auto m_remoteRotation = 0x16c; // Quaternion
		constexpr auto m_remoteVelocity = 0x17c; // Vector3
		constexpr auto m_gap = 0x188; // Vector3
		constexpr auto m_lastReceivedPackage = 0x194; // float
	}

	namespace n_BinaryObjectWithMap {
		constexpr auto binaryHeaderEnum = 0x10; // BinaryHeaderEnum
		constexpr auto objectId = 0x14; // int
		constexpr auto name = 0x18; // string
		constexpr auto numMembers = 0x20; // int
		constexpr auto memberNames = 0x28; // string[]
		constexpr auto assemId = 0x30; // int
	}

	namespace n_TransportBehaviour { // : VehicleInstance
		constexpr auto LeftFront = 0x1f0; // TransportBehaviour.Wheel
		constexpr auto RightFront = 0x200; // TransportBehaviour.Wheel
		constexpr auto LeftBack = 0x210; // TransportBehaviour.Wheel
		constexpr auto RightBack = 0x220; // TransportBehaviour.Wheel
		constexpr auto State = 0x230; // TransportState
		constexpr auto mGasSrc = 0x238; // VehicleAudioSource
		constexpr auto mIdleSrc = 0x240; // VehicleAudioSource
		constexpr auto mFoleySrc = 0x248; // VehicleAudioSource
		constexpr auto mSkidSrc = 0x250; // VehicleAudioSource
		constexpr auto mHornSrc = 0x258; // VehicleAudioSource
		constexpr auto mEngineSrc = 0x260; // VehicleAudioSource
		constexpr auto mMaxSpeed = 0x268; // float
		constexpr auto mWheelRadius = 0x26c; // float
		constexpr auto mIsGrounded = 0x270; // bool
		constexpr auto mGroundedWheelCount = 0x274; // int
		constexpr auto mLastVelocity = 0x278; // Vector3
		constexpr auto mLastAngularVelocity = 0x284; // Vector3
		constexpr auto mLastVerticalSpeed = 0x290; // float
		constexpr auto mLastVelocityLinearSqr = 0x294; // float
		constexpr auto mLastGroundedTime = 0x298; // float
		constexpr auto mLastTorque = 0x29c; // float
		constexpr auto mLastBreak = 0x2a0; // float
		constexpr auto mLastSteer = 0x2a4; // float
		constexpr auto mLastSidewaysVelocity = 0x2a8; // float
		constexpr auto mLastSuspectionsHitTime = 0x2ac; // float
		constexpr auto mLastGearChangeTime = 0x2b0; // float
		constexpr auto mNextRandomTime = 0x2b4; // float
		constexpr auto mNextRandomLength = 0x2b8; // float
		constexpr auto mWheelVisualEulars = 0x2bc; // Vector2
		constexpr auto mClientPosition = 0x2c4; // Vector3
		constexpr auto mClientRotation = 0x2d0; // Quaternion
		constexpr auto mLastPackageReceiveTime = 0x2e0; // float
		constexpr auto mLastPackageReceiveDeltaTime = 0x2e4; // float
		constexpr auto mServerDriveTime = 0x2e8; // float
	}

	namespace n_DecoderFallbackBuffer {
		constexpr auto byteStart = 0x10; // byte*
		constexpr auto charEnd = 0x18; // char*
	}

	namespace n_ClientContextReplySink { // : IMessageSink
		constexpr auto _replySink = 0x10; // IMessageSink
		constexpr auto _context = 0x18; // Context
	}

	namespace n_XmlSchemaException { // : SystemException
		constexpr auto res = 0x88; // string
		constexpr auto args = 0x90; // string[]
		constexpr auto sourceUri = 0x98; // string
		constexpr auto lineNumber = 0xa0; // int
		constexpr auto linePosition = 0xa4; // int
		constexpr auto sourceSchemaObject = 0xa8; // XmlSchemaObject
		constexpr auto message = 0xb0; // string
	}

	namespace n_EliminationUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_ProjectileBullet { // : Projectile
		constexpr auto Meshes = 0xd8; // Renderer[]
		constexpr auto flagMeshesVisible = 0xe0; // bool
	}

	namespace n_Module { // : ISerializable
		constexpr auto _impl = 0x10; // IntPtr
		constexpr auto assembly = 0x18; // Assembly
		constexpr auto fqname = 0x20; // string
		constexpr auto name = 0x28; // string
		constexpr auto scopename = 0x30; // string
		constexpr auto is_resource = 0x38; // bool
		constexpr auto token = 0x3c; // int
	}

	namespace n_OperandQuery { // : ValueQuery
		constexpr auto val = 0x18; // object
	}

	namespace n_XmlAtomicValue.NamespacePrefixForQName { // : IXmlNamespaceResolver
		constexpr auto prefix = 0x10; // string
		constexpr auto ns = 0x18; // string
	}

	namespace n_WebRequestPrefixElement {
		constexpr auto Prefix = 0x10; // string
		constexpr auto creator = 0x18; // IWebRequestCreate
		constexpr auto creatorType = 0x20; // Type
	}

	namespace n_RegexReplacement {
		constexpr auto _rep = 0x10; // string
		constexpr auto _strings = 0x18; // List(string)
		constexpr auto _rules = 0x20; // List(int)
	}

	namespace n_FreeForAll { // : GameplayMode
		constexpr auto RoundTime = 0x48; // RoundTimer
		constexpr auto SpawnPoints = 0x50; // Transform[]
	}

	namespace n_Parser {
		constexpr auto _doc = 0x10; // SecurityDocument
		constexpr auto _t = 0x18; // Tokenizer
	}

	namespace n_RegexCode {
		constexpr auto _codes = 0x10; // int[]
		constexpr auto _strings = 0x18; // string[]
		constexpr auto _trackcount = 0x20; // int
		constexpr auto _caps = 0x28; // Hashtable
		constexpr auto _capsize = 0x30; // int
		constexpr auto _fcPrefix = 0x38; // RegexPrefix
		constexpr auto _bmPrefix = 0x40; // RegexBoyerMoore
		constexpr auto _anchors = 0x48; // int
		constexpr auto _rightToLeft = 0x4c; // bool
	}

	namespace n_ProviderData {
		constexpr auto Ref = 0x10; // string
		constexpr auto Type = 0x18; // string
		constexpr auto Id = 0x20; // string
		constexpr auto CustomProperties = 0x28; // Hashtable
		constexpr auto CustomData = 0x30; // IList
	}

	namespace n_VFXAudioSpectrumBinder { // : VFXBinderBase
		constexpr auto m_CountProperty = 0x20; // ExposedProperty
		constexpr auto m_TextureProperty = 0x28; // ExposedProperty
		constexpr auto FFTWindow = 0x30; // FFTWindow
		constexpr auto Samples = 0x34; // uint
		constexpr auto Mode = 0x38; // VFXAudioSpectrumBinder.AudioSourceMode
		constexpr auto AudioSource = 0x40; // AudioSource
		constexpr auto m_Texture = 0x48; // Texture2D
		constexpr auto m_AudioCache = 0x50; // float[]
		constexpr auto m_ColorCache = 0x58; // Color[]
	}

	namespace n_VehicleAudioEvent {
		constexpr auto (isRented)k__BackingField = 0x10; // bool
		constexpr auto (MaxRange)k__BackingField = 0x14; // float
		constexpr auto (Parent)k__BackingField = 0x18; // Transform
		constexpr auto _clip = 0x20; // AudioClip
		constexpr auto _src = 0x28; // AudioSource
		constexpr auto _volume = 0x30; // float
		constexpr auto _clipLenght = 0x34; // float
		constexpr auto _playTime = 0x38; // float
		constexpr auto _pitch = 0x3c; // float
		constexpr auto (Enabled)k__BackingField = 0x40; // bool
	}

	namespace n_ScriptableRenderPass {
		constexpr auto (renderPassEvent)k__BackingField = 0x10; // RenderPassEvent
		constexpr auto (eyeIndex)k__BackingField = 0x14; // int
		constexpr auto (overrideCameraTarget)k__BackingField = 0x18; // bool
		constexpr auto (isBlitRenderPass)k__BackingField = 0x19; // bool
		constexpr auto m_ColorAttachments = 0x20; // RenderTargetIdentifier[]
		constexpr auto m_DepthAttachment = 0x28; // RenderTargetIdentifier
		constexpr auto m_ClearFlag = 0x50; // ClearFlag
		constexpr auto m_ClearColor = 0x54; // Color
	}

	namespace n_DomNameTable {
		constexpr auto entries = 0x10; // XmlName[]
		constexpr auto count = 0x18; // int
		constexpr auto mask = 0x1c; // int
		constexpr auto ownerDocument = 0x20; // XmlDocument
		constexpr auto nameTable = 0x28; // XmlNameTable
	}

	namespace n_MainLoop.mLoopLateUpdateUIUpdate {
		constexpr auto Array = 0x10; // ILateUpdateUIUpdate[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_ServicePointManager.SPKey {
		constexpr auto uri = 0x10; // Uri
		constexpr auto proxy = 0x18; // Uri
		constexpr auto use_connect = 0x20; // bool
	}

	namespace n_ArgumentOutOfRangeException { // : ArgumentException
		constexpr auto m_actualValue = 0x90; // object
	}

	namespace n_DebrisRenderingPass { // : ScriptableRenderPass
		constexpr auto transformBuffer = 0x68; // ComputeBuffer
		constexpr auto colorIDBuffer = 0x70; // ComputeBuffer
		constexpr auto colorBuffer = 0x78; // ComputeBuffer
		constexpr auto settings = 0x80; // DebrisRenderer.Settings
		constexpr auto ambientBuffer = 0xa8; // MaterialPropertyBlock
	}

	namespace n_EnumBehaviour { // : OptionsElement
		constexpr auto DefaultValue = 0x20; // int
		constexpr auto AssemblyType = 0x28; // string
		constexpr auto EnumType = 0x30; // string
		constexpr auto Label = 0x38; // TextMeshProUGUI
		constexpr auto Next = 0x40; // Button
		constexpr auto Previous = 0x48; // Button
		constexpr auto AffectedBySettings = 0x50; // bool
		constexpr auto Ultra = 0x54; // int
		constexpr auto High = 0x58; // int
		constexpr auto Medium = 0x5c; // int
		constexpr auto Low = 0x60; // int
		constexpr auto Potato = 0x64; // int
		constexpr auto currentIndex = 0x68; // int
		constexpr auto elements = 0x70; // string[]
		constexpr auto loaded = 0x78; // bool
	}

	namespace n_Binding { // : MonoBehaviour
		constexpr auto Name = 0x10; // string
		constexpr auto isAAxis = 0x18; // bool
		constexpr auto Label = 0x18; // TextMeshProUGUI
		constexpr auto isBAxis = 0x19; // bool
		constexpr auto mLastUsedFrame = 0x1c; // int
		constexpr auto mLastAxisFrame = 0x20; // int
		constexpr auto isListening = 0x20; // bool
		constexpr auto lastPress = 0x24; // float
		constexpr auto mLastKeyFrame = 0x24; // int
		constexpr auto _key = 0x28; // KeyCode
		constexpr auto AxisAEmulator = 0x28; // AxisEmulator
		constexpr auto _axis = 0x2c; // InputAxis
		constexpr auto (isAxis)k__BackingField = 0x30; // bool
		constexpr auto AxisBEmulator = 0x30; // AxisEmulator
		constexpr auto (isAxisPositive)k__BackingField = 0x31; // bool
		constexpr auto (TickIndex8)k__BackingField = 0x34; // int
		constexpr auto KeyAEmulator = 0x38; // KeyCodeEmulator
		constexpr auto KeyBEmulator = 0x40; // KeyCodeEmulator
	}

	namespace n_Pool.Debug {
		constexpr auto DebugLinePrefab = 0x10; // GameObject
		constexpr auto DebugLineRed = 0x18; // Material
		constexpr auto DebugLineBlue = 0x20; // Material
		constexpr auto DebugLineGreen = 0x28; // Material
		constexpr auto DebugLineWhite = 0x30; // Material
	}

	namespace n_DocumentXPathNodeIterator_Empty { // : XPathNodeIterator
		constexpr auto nav = 0x18; // XPathNavigator
	}

	namespace n_PrimitiveManagerBase { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_DeflateStream { // : Stream
		constexpr auto base_stream = 0x28; // Stream
		constexpr auto mode = 0x30; // CompressionMode
		constexpr auto leaveOpen = 0x34; // bool
		constexpr auto disposed = 0x35; // bool
		constexpr auto native = 0x38; // DeflateStreamNative
	}

	namespace n_BaseMeshEffect { // : UIBehaviour
		constexpr auto m_Graphic = 0x18; // Graphic
	}

	namespace n_ObjectReader.TopLevelAssemblyTypeResolver {
		constexpr auto m_topLevelAssembly = 0x10; // Assembly
	}

	namespace n_ValueTypeFixupInfo {
		constexpr auto m_containerID = 0x10; // long
		constexpr auto m_parentField = 0x18; // FieldInfo
		constexpr auto m_parentIndex = 0x20; // int[]
	}

	namespace n_XmlNode { // : ICloneable
		constexpr auto parentNode = 0x10; // XmlNode
	}

	namespace n_DownloadStringCompletedEventArgs { // : AsyncCompletedEventArgs
		constexpr auto m_Result = 0x28; // string
	}

	namespace n_XPathAxisIterator { // : XPathNodeIterator
		constexpr auto nav = 0x18; // XPathNavigator
		constexpr auto type = 0x20; // XPathNodeType
		constexpr auto name = 0x28; // string
		constexpr auto uri = 0x30; // string
		constexpr auto position = 0x38; // int
		constexpr auto matchSelf = 0x3c; // bool
		constexpr auto first = 0x3d; // bool
	}

	namespace n_GUILayoutGroup { // : GUILayoutEntry
		constexpr auto entries = 0x48; // List(GUILayoutEntry)
		constexpr auto isVertical = 0x50; // bool
		constexpr auto resetCoords = 0x51; // bool
		constexpr auto spacing = 0x54; // float
		constexpr auto sameSize = 0x58; // bool
		constexpr auto isWindow = 0x59; // bool
		constexpr auto windowID = 0x5c; // int
		constexpr auto m_Cursor = 0x60; // int
		constexpr auto m_StretchableCountX = 0x64; // int
		constexpr auto m_StretchableCountY = 0x68; // int
		constexpr auto m_UserSpecifiedWidth = 0x6c; // bool
		constexpr auto m_UserSpecifiedHeight = 0x6d; // bool
		constexpr auto m_ChildMinWidth = 0x70; // float
		constexpr auto m_ChildMaxWidth = 0x74; // float
		constexpr auto m_ChildMinHeight = 0x78; // float
		constexpr auto m_ChildMaxHeight = 0x7c; // float
		constexpr auto m_MarginLeft = 0x80; // int
		constexpr auto m_MarginRight = 0x84; // int
		constexpr auto m_MarginTop = 0x88; // int
		constexpr auto m_MarginBottom = 0x8c; // int
	}

	namespace n_UsedByNativeCodeAttribute { // : Attribute
		constexpr auto (Name)k__BackingField = 0x10; // string
	}

	namespace n_ObjectDisposedException { // : InvalidOperationException
		constexpr auto objectName = 0x88; // string
	}

	namespace n_Pool.Bullet.Shell {
		constexpr auto RifleShell = 0x10; // GameObject
		constexpr auto RifleConnectoredShell = 0x18; // GameObject
		constexpr auto PistolShell = 0x20; // GameObject
		constexpr auto APCShell = 0x28; // GameObject
	}

	namespace n_DebugUIHandlerHBox { // : DebugUIHandlerWidget
		constexpr auto m_Container = 0x58; // DebugUIHandlerContainer
	}

	namespace n_Evidence { // : ICollection
		constexpr auto _locked = 0x10; // bool
		constexpr auto hostEvidenceList = 0x18; // ArrayList
		constexpr auto assemblyEvidenceList = 0x20; // ArrayList
	}

	namespace n_BinaryCrossAppDomainAssembly {
		constexpr auto assemId = 0x10; // int
		constexpr auto assemblyIndex = 0x14; // int
	}

	namespace n_WellKnownClientTypeEntry { // : TypeEntry
		constexpr auto obj_type = 0x20; // Type
		constexpr auto obj_url = 0x28; // string
		constexpr auto app_url = 0x30; // string
	}

	namespace n_Cluster {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _framerefs = 0x18; // AlignedVector3Array
		constexpr auto _dImpulses = 0x20; // Vector3Array
		constexpr auto _leaf = 0x28; // DbvtNode
		constexpr auto _nodes = 0x30; // AlignedNodeArray
		constexpr auto _vImpulses = 0x38; // Vector3Array
	}

	namespace n_CustomizeListElement { // : MonoBehaviour
		constexpr auto isSelectedObj = 0x18; // GameObject
		constexpr auto Label = 0x20; // TextMeshProUGUI
		constexpr auto isLocked = 0x28; // GameObject
		constexpr auto (ItemWearable)k__BackingField = 0x30; // Wearable
		constexpr auto (ItemSkin)k__BackingField = 0x38; // ASkin
	}

	namespace n_SymmetricAlgorithm { // : IDisposable
		constexpr auto BlockSizeValue = 0x10; // int
		constexpr auto FeedbackSizeValue = 0x14; // int
		constexpr auto IVValue = 0x18; // byte[]
		constexpr auto KeyValue = 0x20; // byte[]
		constexpr auto LegalBlockSizesValue = 0x28; // KeySizes[]
		constexpr auto LegalKeySizesValue = 0x30; // KeySizes[]
		constexpr auto KeySizeValue = 0x38; // int
		constexpr auto ModeValue = 0x3c; // CipherMode
		constexpr auto PaddingValue = 0x40; // PaddingMode
	}

	namespace n_TMP_InputField { // : Selectable
		constexpr auto m_SoftKeyboard = 0xf8; // TouchScreenKeyboard
		constexpr auto m_RectTransform = 0x100; // RectTransform
		constexpr auto m_TextViewport = 0x108; // RectTransform
		constexpr auto m_TextComponentRectMask = 0x110; // RectMask2D
		constexpr auto m_TextViewportRectMask = 0x118; // RectMask2D
		constexpr auto m_CachedViewportRect = 0x120; // Rect
		constexpr auto m_TextComponent = 0x130; // TMP_Text
		constexpr auto m_TextComponentRectTransform = 0x138; // RectTransform
		constexpr auto m_Placeholder = 0x140; // Graphic
		constexpr auto m_VerticalScrollbar = 0x148; // Scrollbar
		constexpr auto m_VerticalScrollbarEventHandler = 0x150; // TMP_ScrollbarEventHandler
		constexpr auto m_IsDrivenByLayoutComponents = 0x158; // bool
		constexpr auto m_LayoutGroup = 0x160; // LayoutGroup
		constexpr auto m_IScrollHandlerParent = 0x168; // IScrollHandler
		constexpr auto m_ScrollPosition = 0x170; // float
		constexpr auto m_ScrollSensitivity = 0x174; // float
		constexpr auto m_ContentType = 0x178; // TMP_InputField.ContentType
		constexpr auto m_InputType = 0x17c; // TMP_InputField.InputType
		constexpr auto m_AsteriskChar = 0x180; // char
		constexpr auto m_KeyboardType = 0x184; // TouchScreenKeyboardType
		constexpr auto m_LineType = 0x188; // TMP_InputField.LineType
		constexpr auto m_HideMobileInput = 0x18c; // bool
		constexpr auto m_HideSoftKeyboard = 0x18d; // bool
		constexpr auto m_CharacterValidation = 0x190; // TMP_InputField.CharacterValidation
		constexpr auto m_RegexValue = 0x198; // string
		constexpr auto m_GlobalPointSize = 0x1a0; // float
		constexpr auto m_CharacterLimit = 0x1a4; // int
		constexpr auto m_OnEndEdit = 0x1a8; // TMP_InputField.SubmitEvent
		constexpr auto m_OnSubmit = 0x1b0; // TMP_InputField.SubmitEvent
		constexpr auto m_OnSelect = 0x1b8; // TMP_InputField.SelectionEvent
		constexpr auto m_OnDeselect = 0x1c0; // TMP_InputField.SelectionEvent
		constexpr auto m_OnTextSelection = 0x1c8; // TMP_InputField.TextSelectionEvent
		constexpr auto m_OnEndTextSelection = 0x1d0; // TMP_InputField.TextSelectionEvent
		constexpr auto m_OnValueChanged = 0x1d8; // TMP_InputField.OnChangeEvent
		constexpr auto m_OnTouchScreenKeyboardStatusChanged = 0x1e0; // TMP_InputField.TouchScreenKeyboardEvent
		constexpr auto m_OnValidateInput = 0x1e8; // TMP_InputField.OnValidateInput
		constexpr auto m_CaretColor = 0x1f0; // Color
		constexpr auto m_CustomCaretColor = 0x200; // bool
		constexpr auto m_SelectionColor = 0x204; // Color
		constexpr auto m_Text = 0x218; // string
		constexpr auto m_CaretBlinkRate = 0x220; // float
		constexpr auto m_CaretWidth = 0x224; // int
		constexpr auto m_ReadOnly = 0x228; // bool
		constexpr auto m_RichText = 0x229; // bool
		constexpr auto m_StringPosition = 0x22c; // int
		constexpr auto m_StringSelectPosition = 0x230; // int
		constexpr auto m_CaretPosition = 0x234; // int
		constexpr auto m_CaretSelectPosition = 0x238; // int
		constexpr auto caretRectTrans = 0x240; // RectTransform
		constexpr auto m_CursorVerts = 0x248; // UIVertex[]
		constexpr auto m_CachedInputRenderer = 0x250; // CanvasRenderer
		constexpr auto m_LastPosition = 0x258; // Vector2
		constexpr auto m_Mesh = 0x260; // Mesh
		constexpr auto m_AllowInput = 0x268; // bool
		constexpr auto m_ShouldActivateNextUpdate = 0x269; // bool
		constexpr auto m_UpdateDrag = 0x26a; // bool
		constexpr auto m_DragPositionOutOfBounds = 0x26b; // bool
		constexpr auto m_CaretVisible = 0x26c; // bool
		constexpr auto m_BlinkCoroutine = 0x270; // Coroutine
		constexpr auto m_BlinkStartTime = 0x278; // float
		constexpr auto m_DragCoroutine = 0x280; // Coroutine
		constexpr auto m_OriginalText = 0x288; // string
		constexpr auto m_WasCanceled = 0x290; // bool
		constexpr auto m_HasDoneFocusTransition = 0x291; // bool
		constexpr auto m_WaitForSecondsRealtime = 0x298; // WaitForSecondsRealtime
		constexpr auto m_PreventCallback = 0x2a0; // bool
		constexpr auto m_TouchKeyboardAllowsInPlaceEditing = 0x2a1; // bool
		constexpr auto m_IsTextComponentUpdateRequired = 0x2a2; // bool
		constexpr auto m_isLastKeyBackspace = 0x2a3; // bool
		constexpr auto m_PointerDownClickStartTime = 0x2a4; // float
		constexpr auto m_KeyDownStartTime = 0x2a8; // float
		constexpr auto m_DoubleClickDelay = 0x2ac; // float
		constexpr auto m_IsCompositionActive = 0x2b0; // bool
		constexpr auto m_ShouldUpdateIMEWindowPosition = 0x2b1; // bool
		constexpr auto m_PreviousIMEInsertionLine = 0x2b4; // int
		constexpr auto m_GlobalFontAsset = 0x2b8; // TMP_FontAsset
		constexpr auto m_OnFocusSelectAll = 0x2c0; // bool
		constexpr auto m_isSelectAll = 0x2c1; // bool
		constexpr auto m_ResetOnDeActivation = 0x2c2; // bool
		constexpr auto m_SelectionStillActive = 0x2c3; // bool
		constexpr auto m_ReleaseSelection = 0x2c4; // bool
		constexpr auto m_PreviouslySelectedObject = 0x2c8; // GameObject
		constexpr auto m_RestoreOriginalTextOnEscape = 0x2d0; // bool
		constexpr auto m_isRichTextEditingAllowed = 0x2d1; // bool
		constexpr auto m_LineLimit = 0x2d4; // int
		constexpr auto m_InputValidator = 0x2d8; // TMP_InputValidator
		constexpr auto m_isSelected = 0x2e0; // bool
		constexpr auto m_IsStringPositionDirty = 0x2e1; // bool
		constexpr auto m_IsCaretPositionDirty = 0x2e2; // bool
		constexpr auto m_forceRectTransformAdjustment = 0x2e3; // bool
		constexpr auto m_ProcessingEvent = 0x2e8; // Event
	}

	namespace n_ScaleFitness { // : TransformComponentsSettings
		constexpr auto uniformScaleOffset = 0x20; // bool
		constexpr auto offsetUniformScale = 0x24; // float
		constexpr auto offsetScale = 0x28; // Vector3
	}

	namespace n_SHA256Managed { // : SHA256
		constexpr auto _buffer = 0x28; // byte[]
		constexpr auto _count = 0x30; // long
		constexpr auto _stateSHA256 = 0x38; // uint[]
		constexpr auto _W = 0x40; // uint[]
	}

	namespace n_Boat { // : Vehicle
		constexpr auto WaterMovementVelocity = 0x120; // float
		constexpr auto WaterTurnVelocity = 0x124; // float
		constexpr auto WaterPitchDegree = 0x128; // float
		constexpr auto WaterRollDegree = 0x12c; // float
		constexpr auto EngineBubbles = 0x130; // AudioClip
		constexpr auto EngineIdle = 0x138; // AudioClip
		constexpr auto EngineFoley = 0x140; // AudioClip
		constexpr auto EngineGas = 0x148; // AudioClip
		constexpr auto EngineImpacts = 0x150; // AudioClip[]
	}

	namespace n_AndroidJavaProxy {
		constexpr auto javaInterface = 0x10; // AndroidJavaClass
		constexpr auto proxyObject = 0x18; // IntPtr
	}

	namespace n_ARC4Managed { // : RC4
		constexpr auto key = 0x48; // byte[]
		constexpr auto state = 0x50; // byte[]
		constexpr auto x = 0x58; // byte
		constexpr auto y = 0x59; // byte
		constexpr auto m_disposed = 0x5a; // bool
	}

	namespace n_SyncFunction { // : IComparable(SyncFunction)
		constexpr auto view = 0x10; // NetView
		constexpr auto Hash = 0x18; // string
		constexpr auto Order = 0x20; // SynchronizeOrder
		constexpr auto OnWrite = 0x28; // Action(NetSerializer)
		constexpr auto OnRead = 0x30; // Action(NetSerializer)
	}

	namespace n_AlignedManifoldArrayDebugView {
		constexpr auto _array = 0x10; // AlignedManifoldArray
	}

	namespace n_TriangleInfoMap { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_Bloom { // : VolumeComponent
		constexpr auto threshold = 0x38; // MinFloatParameter
		constexpr auto intensity = 0x40; // MinFloatParameter
		constexpr auto scatter = 0x48; // ClampedFloatParameter
		constexpr auto clamp = 0x50; // MinFloatParameter
		constexpr auto tint = 0x58; // ColorParameter
		constexpr auto highQualityFiltering = 0x60; // BoolParameter
		constexpr auto dirtTexture = 0x68; // TextureParameter
		constexpr auto dirtIntensity = 0x70; // MinFloatParameter
	}

	namespace n_AllHitsRayResultCallback { // : RayResultCallback
		constexpr auto (CollisionObjects)k__BackingField = 0x28; // List(CollisionObject)
		constexpr auto (HitFractions)k__BackingField = 0x30; // List(float)
		constexpr auto (HitNormalWorld)k__BackingField = 0x38; // List(Vector3)
		constexpr auto (HitPointWorld)k__BackingField = 0x40; // List(Vector3)
		constexpr auto (RayFromWorld)k__BackingField = 0x48; // Vector3
		constexpr auto (RayToWorld)k__BackingField = 0x54; // Vector3
	}

	namespace n_PlayerNetworkState {
		constexpr auto isConnected = 0x10; // bool
		constexpr auto isMine = 0x11; // bool
		constexpr auto mHealth = 0x14; // float
		constexpr auto RoomID = 0x18; // byte
		constexpr auto Address = 0x20; // EndPoint
		constexpr auto Inputs = 0x28; // PlayerInputs
		constexpr auto BelongGroup = 0x30; // PlayerTeamSquadRole
		constexpr auto Seat = 0x38; // Seat
		constexpr auto inSeat = 0x40; // bool
		constexpr auto inSameSeatWithLocal = 0x41; // bool
		constexpr auto Loadout = 0x48; // ALoadout
		constexpr auto Skin = 0x50; // CharacterWearings
		constexpr auto SpawnTime = 0x58; // float
		constexpr auto DownTime = 0x5c; // float
		constexpr auto SpawnProtectionUntil = 0x60; // float
		constexpr auto GiveUpValue = 0x64; // float
		constexpr auto isThrowing = 0x68; // bool
		constexpr auto isBleeding = 0x69; // bool
		constexpr auto isAlive = 0x6a; // bool
		constexpr auto isUp = 0x6b; // bool
		constexpr auto isDown = 0x6c; // bool
		constexpr auto isDead = 0x6d; // bool
		constexpr auto needsHealing = 0x6e; // bool
		constexpr auto DistanceToLocalPlayer = 0x70; // float
		constexpr auto inFrustum = 0x74; // bool
		constexpr auto ScreenHeight = 0x78; // float
		constexpr auto DirectionToPlayerFromLocal = 0x7c; // Vector3
		constexpr auto DotOfCamera = 0x88; // float
		constexpr auto NetworkReceiveRate = 0x8c; // StreamRate
		constexpr auto NetworkStreamPositionInterpolationSpeed = 0x90; // float
		constexpr auto NetworkStreamRotationInterpolationSpeed = 0x94; // float
		constexpr auto isFriendly = 0x98; // bool
		constexpr auto CurrentLoadoutIndex = 0x99; // LoadoutIndex
		constexpr auto CurrentVaulting = 0x9c; // VaultingType
		constexpr auto ServerVelocity = 0xa0; // Vector3
		constexpr auto ClientVelocity = 0xac; // Vector3
		constexpr auto ThpProfile = 0xb8; // ThpRagdollProfile
		constexpr auto BonePositions = 0xc0; // Vector3[]
		constexpr auto HitBoxes = 0xc8; // THPBodyParts[]
		constexpr auto FakeHitBox = 0xd0; // THPBodyParts
		constexpr auto Armors = 0xd8; // THPArmor[]
		constexpr auto ServerPosition = 0xe0; // Vector3
		constexpr auto ClientPosition = 0xec; // Vector3
		constexpr auto HeadPosition = 0xf8; // Vector3
		constexpr auto MouseLook = 0x104; // Vector2
		constexpr auto FreeLook = 0x10c; // Vector2
		constexpr auto LookingDireciton = 0x114; // Vector3
		constexpr auto Primary = 0x120; // WeaponManager
		constexpr auto Secondary = 0x128; // WeaponManager
		constexpr auto FirstAid = 0x130; // GadgetManager
		constexpr auto ToolA = 0x138; // GadgetManager
		constexpr auto ToolB = 0x140; // GadgetManager
		constexpr auto Throwable = 0x148; // GadgetManager
		constexpr auto DragJoint = 0x150; // ushort
		constexpr auto DragPosition = 0x154; // Vector3
		constexpr auto LastPingClient = 0x160; // NetworkClient
		constexpr auto LastPingTime = 0x168; // float
		constexpr auto ProjectileRegisterCounter = 0x16c; // ushort
		constexpr auto ReviveCount = 0x170; // int
		constexpr auto ClimbingObject = 0x178; // Climbable
		constexpr auto isClimbing = 0x180; // bool
		constexpr auto Client = 0x188; // NetworkClient
		constexpr auto isBeingDragged = 0x190; // bool
	}

	namespace n_EventTrigger.Entry {
		constexpr auto eventID = 0x10; // EventTriggerType
		constexpr auto callback = 0x18; // EventTrigger.TriggerEvent
	}

	namespace n_OptionsButtonHover { // : MonoBehaviour
		constexpr auto Bounds = 0x18; // RectTransform
		constexpr auto Hover = 0x20; // RawImage
		constexpr auto TargetDescription = 0x28; // OptionsButtonDescription
		constexpr auto changed = 0x30; // bool
		constexpr auto mouseInside = 0x31; // bool
		constexpr auto color = 0x34; // Color
		constexpr auto rawImage = 0x48; // RawImage
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
	}

	namespace n_UnmanagedFunctionPointerAttribute { // : Attribute
		constexpr auto m_callingConvention = 0x10; // CallingConvention
		constexpr auto CharSet = 0x14; // CharSet
		constexpr auto BestFitMapping = 0x18; // bool
		constexpr auto ThrowOnUnmappableChar = 0x19; // bool
		constexpr auto SetLastError = 0x1a; // bool
	}

	namespace n_LinearJoint { // : Joint
		constexpr auto _rPos = 0x20; // Vector3Array
	}

	namespace n_WheelEvent { // : MouseEventBase(WheelEvent)
		constexpr auto (delta)k__BackingField = 0xb8; // Vector3
	}

	namespace n_CultureInfo { // : ICloneable
		constexpr auto m_isReadOnly = 0x10; // bool
		constexpr auto cultureID = 0x14; // int
		constexpr auto parent_lcid = 0x18; // int
		constexpr auto datetime_index = 0x1c; // int
		constexpr auto number_index = 0x20; // int
		constexpr auto default_calendar_type = 0x24; // int
		constexpr auto m_useUserOverride = 0x28; // bool
		constexpr auto numInfo = 0x30; // NumberFormatInfo
		constexpr auto dateTimeInfo = 0x38; // DateTimeFormatInfo
		constexpr auto textInfo = 0x40; // TextInfo
		constexpr auto m_name = 0x48; // string
		constexpr auto englishname = 0x50; // string
		constexpr auto nativename = 0x58; // string
		constexpr auto iso3lang = 0x60; // string
		constexpr auto iso2lang = 0x68; // string
		constexpr auto win3lang = 0x70; // string
		constexpr auto territory = 0x78; // string
		constexpr auto native_calendar_names = 0x80; // string[]
		constexpr auto compareInfo = 0x88; // CompareInfo
		constexpr auto textinfo_data = 0x90; // void*
		constexpr auto m_dataItem = 0x98; // int
		constexpr auto calendar = 0xa0; // Calendar
		constexpr auto parent_culture = 0xa8; // CultureInfo
		constexpr auto constructed = 0xb0; // bool
		constexpr auto cached_serialized_form = 0xb8; // byte[]
		constexpr auto m_cultureData = 0xc0; // CultureData
		constexpr auto m_isInherited = 0xc8; // bool
	}

	namespace n_Lease { // : MarshalByRefObject
		constexpr auto _leaseExpireTime = 0x18; // DateTime
		constexpr auto _currentState = 0x20; // LeaseState
		constexpr auto _initialLeaseTime = 0x28; // TimeSpan
		constexpr auto _renewOnCallTime = 0x30; // TimeSpan
		constexpr auto _sponsorshipTimeout = 0x38; // TimeSpan
		constexpr auto _sponsors = 0x40; // ArrayList
		constexpr auto _renewingSponsors = 0x48; // Queue
		constexpr auto _renewalDelegate = 0x50; // Lease.RenewalDelegate
	}

	namespace n_RegexMatchTimeoutException { // : TimeoutException
		constexpr auto regexInput = 0x88; // string
		constexpr auto regexPattern = 0x90; // string
		constexpr auto matchTimeout = 0x98; // TimeSpan
	}

	namespace n_TMP_TextElement {
		constexpr auto m_ElementType = 0x10; // TextElementType
		constexpr auto m_Unicode = 0x14; // uint
		constexpr auto m_TextAsset = 0x18; // TMP_Asset
		constexpr auto m_Glyph = 0x20; // Glyph
		constexpr auto m_GlyphIndex = 0x28; // uint
		constexpr auto m_Scale = 0x2c; // float
	}

	namespace n_RectangularVertexClipper {
		constexpr auto m_WorldCorners = 0x10; // Vector3[]
		constexpr auto m_CanvasCorners = 0x18; // Vector3[]
	}

	namespace n_PlayerSelections {
		constexpr auto mAttachments = 0x10; // Dictionary(ushort, WeaponAttachments)
		constexpr auto mLoadouts = 0x18; // Dictionary(int, ALoadout)
		constexpr auto mWearings = 0x20; // Dictionary(int, CharacterWearings)
		constexpr auto Data = 0x28; // byte[]
	}

	namespace n_ReplicaGadget { // : MonoBehaviour
		constexpr auto (view)k__BackingField = 0x18; // NetView
		constexpr auto (myView)k__BackingField = 0x20; // ReplicaGadgetSide
		constexpr auto (Team)k__BackingField = 0x24; // Team
		constexpr auto (isServerControlling)k__BackingField = 0x25; // bool
		constexpr auto (lifeTime)k__BackingField = 0x28; // float
		constexpr auto (inPool)k__BackingField = 0x2c; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x30; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x34; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x38; // bool
		constexpr auto (FastListIndexA)k__BackingField = 0x3c; // int
		constexpr auto (stream)k__BackingField = 0x40; // NetSerializer
	}

	namespace n_PlayerLOD { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto ThirdPerson = 0x20; // THPController
		constexpr auto SkinnedBody = 0x28; // SkinnedMeshRenderer
		constexpr auto PoseBody = 0x30; // MeshRenderer
		constexpr auto m_PoseBodyFilter = 0x38; // MeshFilter
		constexpr auto Lods0 = 0x40; // List(Renderer)
		constexpr auto Lods1 = 0x48; // List(Renderer)
		constexpr auto Lods2 = 0x50; // List(Renderer)
		constexpr auto Lods3 = 0x58; // List(Renderer)
		constexpr auto ScreenHeight = 0x60; // float
		constexpr auto ScreenHeightRaw = 0x64; // float
		constexpr auto inFrustumRaw = 0x68; // bool
		constexpr auto isActive = 0x69; // bool
		constexpr auto HideAll = 0x6a; // bool
		constexpr auto m_activeLOD = 0x6c; // int
		constexpr auto m_targetLOD = 0x70; // int
		constexpr auto m_lastPose = 0x74; // PlayerPose
		constexpr auto m_initialized = 0x78; // bool
		constexpr auto m_skinVisible = 0x79; // bool
		constexpr auto m_staticMeshEnabled = 0x7a; // bool
	}

	namespace n_IconsUI.Input {
		constexpr auto LeftMouseButton = 0x10; // Sprite
		constexpr auto RightMouseButton = 0x18; // Sprite
		constexpr auto MiddleMouseButton = 0x20; // Sprite
		constexpr auto IdleMouseButton = 0x28; // Sprite
		constexpr auto KeyboardButton = 0x30; // Sprite
		constexpr auto KeyboardButtonBorder = 0x38; // Sprite
		constexpr auto KeyboardButton2 = 0x40; // Sprite
		constexpr auto ControllerButton = 0x48; // Sprite
	}

	namespace n_WeaponManager.Remote {
		constexpr auto magazines = 0x10; // WeaponMagazines
		constexpr auto shellToSpawn = 0x18; // float
	}

	namespace n_CrossAppDomainSink { // : IMessageSink
		constexpr auto _domainID = 0x10; // int
	}

	namespace n_FileWebResponse { // : WebResponse
		constexpr auto m_closed = 0x18; // bool
		constexpr auto m_contentLength = 0x20; // long
		constexpr auto m_fileAccess = 0x28; // FileAccess
		constexpr auto m_headers = 0x30; // WebHeaderCollection
		constexpr auto m_stream = 0x38; // Stream
		constexpr auto m_uri = 0x40; // Uri
	}

	namespace n_CookieCollection { // : ICollection
		constexpr auto m_version = 0x10; // int
		constexpr auto m_list = 0x18; // ArrayList
		constexpr auto m_TimeStamp = 0x20; // DateTime
		constexpr auto m_has_other_versions = 0x28; // bool
		constexpr auto m_IsReadOnly = 0x29; // bool
	}

	namespace n_DebugDraw { // : IDebugDraw
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _drawAabb = 0x18; // DebugDraw.DrawAabbUnmanagedDelegate
		constexpr auto _drawArc = 0x20; // DebugDraw.DrawArcUnmanagedDelegate
		constexpr auto _drawBox = 0x28; // DebugDraw.DrawBoxUnmanagedDelegate
		constexpr auto _drawCapsule = 0x30; // DebugDraw.DrawCapsuleUnmanagedDelegate
		constexpr auto _drawCone = 0x38; // DebugDraw.DrawConeUnmanagedDelegate
		constexpr auto _drawContactPoint = 0x40; // DebugDraw.DrawContactPointUnmanagedDelegate
		constexpr auto _drawCylinder = 0x48; // DebugDraw.DrawCylinderUnmanagedDelegate
		constexpr auto _drawLine = 0x50; // DebugDraw.DrawLineUnmanagedDelegate
		constexpr auto _drawPlane = 0x58; // DebugDraw.DrawPlaneUnmanagedDelegate
		constexpr auto _drawSphere = 0x60; // DebugDraw.DrawSphereUnmanagedDelegate
		constexpr auto _drawSpherePatch = 0x68; // DebugDraw.DrawSpherePatchUnmanagedDelegate
		constexpr auto _drawTransform = 0x70; // DebugDraw.DrawTransformUnmanagedDelegate
		constexpr auto _drawTriangle = 0x78; // DebugDraw.DrawTriangleUnmanagedDelegate
		constexpr auto _getDebugMode = 0x80; // DebugDraw.GetDebugModeUnmanagedDelegate
		constexpr auto _cb = 0x88; // DebugDraw.SimpleCallback
	}

	namespace n_FixedBufferAttribute { // : Attribute
		constexpr auto elementType = 0x10; // Type
		constexpr auto length = 0x18; // int
	}

	namespace n_TrackedReference {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_RemotingProxy { // : RealProxy
		constexpr auto _sink = 0x50; // IMessageSink
		constexpr auto _hasEnvoySink = 0x58; // bool
		constexpr auto _ctorCall = 0x60; // ConstructionCall
	}

	namespace n_VehicleWheel { // : MonoBehaviour
		constexpr auto UnityCollider = 0x18; // WheelCollider
		constexpr auto (CollidersEnabled)k__BackingField = 0x20; // bool
		constexpr auto (UnityCollidersEnabled)k__BackingField = 0x21; // bool
	}

	namespace n_VehicleDebrisRegister { // : IFastListItemA
		constexpr auto (FastListIndexA)k__BackingField = 0x10; // int
		constexpr auto ID = 0x14; // int
		constexpr auto Item = 0x18; // Vehicle
		constexpr auto WorldTransform = 0x20; // Transform
		constexpr auto Rigidbody = 0x28; // Rigidbody
		constexpr auto timeToDie = 0x30; // float
		constexpr auto ServerPosition = 0x34; // Vector3
		constexpr auto ServerRotation = 0x40; // Quaternion
		constexpr auto ClientPosition = 0x50; // Vector3
		constexpr auto ClientRotation = 0x5c; // Quaternion
		constexpr auto stream = 0x70; // NetSerializer
		constexpr auto lastStreamSent = 0x78; // float
		constexpr auto streamCounter = 0x7c; // int
		constexpr auto clientMovement = 0x80; // Vector3
	}

	namespace n_AGadgetStructer { // : ScriptableObject
		constexpr auto fields = 0x18; // List(Field)
	}

	namespace n_RayFromToCaster { // : Dbvt.ICollide
		constexpr auto _face = 0x18; // Face
	}

	namespace n_MissingMemberException { // : MemberAccessException
		constexpr auto ClassName = 0x88; // string
		constexpr auto MemberName = 0x90; // string
		constexpr auto Signature = 0x98; // byte[]
	}

	namespace n_VFXInputTouchBinder { // : VFXBinderBase
		constexpr auto m_TouchEnabledProperty = 0x20; // ExposedProperty
		constexpr auto m_Parameter = 0x28; // ExposedProperty
		constexpr auto m_VelocityParameter = 0x30; // ExposedProperty
		constexpr auto TouchIndex = 0x38; // int
		constexpr auto Target = 0x40; // Camera
		constexpr auto Distance = 0x48; // float
		constexpr auto SetVelocity = 0x4c; // bool
		constexpr auto m_PreviousPosition = 0x50; // Vector3
		constexpr auto m_PreviousTouch = 0x5c; // bool
	}

	namespace n_FixedSizeArray {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _count = 0x18; // int
	}

	namespace n_UnityEventBase { // : ISerializationCallbackReceiver
		constexpr auto m_Calls = 0x10; // InvokableCallList
		constexpr auto m_PersistentCalls = 0x18; // PersistentCallGroup
		constexpr auto m_CallsDirty = 0x20; // bool
	}

	namespace n_Dbvt.StkCln { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_CancellationCallbackInfo {
		constexpr auto Callback = 0x10; // Action(object)
		constexpr auto StateForCallback = 0x18; // object
		constexpr auto TargetSyncContext = 0x20; // SynchronizationContext
		constexpr auto TargetExecutionContext = 0x28; // ExecutionContext
		constexpr auto CancellationTokenSource = 0x30; // CancellationTokenSource
	}

	namespace n_StringDictionary { // : IEnumerable
		constexpr auto contents = 0x10; // Hashtable
	}

	namespace n_PrototypeTerrainTree { // : Prototype
		constexpr auto terrainTreeName = 0x20; // string
		constexpr auto extents = 0x28; // Vector3
		constexpr auto terrainProtoId = 0x34; // int
		constexpr auto bendFactor = 0x38; // float
		constexpr auto additionalSpawnSettings = 0x40; // AdditionalSpawnSettings
		constexpr auto failureSettings = 0x48; // FailureSettings
		constexpr auto intersectSettings = 0x50; // IntersectSettings
		constexpr auto terrainTransformSettings = 0x58; // TerrainTransformSettings
	}

	namespace n_FrameCounter {
		constexpr auto Tick02 = 0x10; // bool
		constexpr auto Tick04 = 0x11; // bool
		constexpr auto Tick06 = 0x12; // bool
		constexpr auto Tick08 = 0x13; // bool
		constexpr auto Tick10 = 0x14; // bool
		constexpr auto Tick15 = 0x15; // bool
		constexpr auto Tick30 = 0x16; // bool
		constexpr auto Tick60 = 0x17; // bool
		constexpr auto Tick90 = 0x18; // bool
		constexpr auto Tick120 = 0x19; // bool
		constexpr auto Tick240 = 0x1a; // bool
		constexpr auto counter = 0x1c; // int
	}

	namespace n_XPathNodeIterator { // : ICloneable
		constexpr auto count = 0x10; // int
	}

	namespace n_FilterQuery { // : BaseAxisQuery
		constexpr auto cond = 0x58; // Query
		constexpr auto noPosition = 0x60; // bool
	}

	namespace n_CFObject { // : IDisposable
		constexpr auto (Handle)k__BackingField = 0x10; // IntPtr
	}

	namespace n_AttributeQuery { // : BaseAxisQuery
		constexpr auto onAttribute = 0x58; // bool
	}

	namespace n_BurstCompileAttribute { // : Attribute
		constexpr auto (FloatMode)k__BackingField = 0x10; // FloatMode
		constexpr auto (FloatPrecision)k__BackingField = 0x14; // FloatPrecision
		constexpr auto _compileSynchronously = 0x18; // Nullable(bool)
		constexpr auto (Options)k__BackingField = 0x20; // string[]
	}

	namespace n_ShadowCasterGroup2D { // : MonoBehaviour
		constexpr auto m_ShadowGroup = 0x18; // int
		constexpr auto m_ShadowCasters = 0x20; // List(ShadowCaster2D)
	}

	namespace n_ThrowableManager.ActiveIndex { // : IFastListItemA
		constexpr auto (FastListIndexA)k__BackingField = 0x10; // int
		constexpr auto ArrayIndex = 0x14; // int
	}

	namespace n_SeatManager { // : MonoBehaviour
		constexpr auto Item = 0x18; // Vehicle
		constexpr auto (Seats)k__BackingField = 0x20; // Seat[]
		constexpr auto (view)k__BackingField = 0x28; // NetView
		constexpr auto (hasTakenOnce)k__BackingField = 0x30; // bool
		constexpr auto (isControlling)k__BackingField = 0x31; // bool
		constexpr auto (isInside)k__BackingField = 0x32; // bool
		constexpr auto (NumberOfPeopleInside)k__BackingField = 0x34; // int
		constexpr auto (BelongingTeamDueDriver)k__BackingField = 0x38; // Team
		constexpr auto (LastAcitveTeam)k__BackingField = 0x39; // Team
		constexpr auto (ControllingSince)k__BackingField = 0x3c; // float
		constexpr auto (lifeTime)k__BackingField = 0x40; // float
		constexpr auto (inPool)k__BackingField = 0x44; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x48; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x4c; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x50; // bool
	}

	namespace n_FakeProvider { // : ExistanceProvider
		constexpr auto value = 0x20; // bool
	}

	namespace n_Tank { // : Vehicle
		constexpr auto Gravity = 0x120; // float
		constexpr auto Break = 0x124; // float
		constexpr auto RotationVelocity = 0x128; // float
		constexpr auto RotationAccelaration = 0x12c; // float
		constexpr auto Gears = 0x130; // Gear[]
		constexpr auto AudioGas = 0x138; // AudioClip
		constexpr auto AudioIdle = 0x140; // AudioClip
		constexpr auto AudioMovement = 0x148; // AudioClip
		constexpr auto AudioEngineMain = 0x150; // AudioClip
		constexpr auto AudioEnginePitch = 0x158; // AudioClip
		constexpr auto TurretVerticalMinimum = 0x160; // AnimationCurve
	}

	namespace n_VerticalList {
		constexpr auto ConstHeight = 0x10; // int
		constexpr auto elements = 0x18; // List(RectTransform)
		constexpr auto ToDown = 0x20; // bool
		constexpr auto Spacing = 0x24; // float
		constexpr auto lerp = 0x28; // bool
		constexpr auto lerpSpeed = 0x2c; // float
	}

	namespace n_RegexNode {
		constexpr auto _type = 0x10; // int
		constexpr auto _children = 0x18; // List(RegexNode)
		constexpr auto _str = 0x20; // string
		constexpr auto _ch = 0x28; // char
		constexpr auto _m = 0x2c; // int
		constexpr auto _n = 0x30; // int
		constexpr auto _options = 0x34; // RegexOptions
		constexpr auto _next = 0x38; // RegexNode
	}

	namespace n_AnimationCurve { // : IEquatable(AnimationCurve)
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_TMP_TextElement_Legacy {
		constexpr auto id = 0x10; // int
		constexpr auto x = 0x14; // float
		constexpr auto y = 0x18; // float
		constexpr auto width = 0x1c; // float
		constexpr auto height = 0x20; // float
		constexpr auto xOffset = 0x24; // float
		constexpr auto yOffset = 0x28; // float
		constexpr auto xAdvance = 0x2c; // float
		constexpr auto scale = 0x30; // float
	}

	namespace n_CullingGroup { // : IDisposable
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_OnStateChanged = 0x18; // CullingGroup.StateChanged
	}

	namespace n_Vehicle { // : ToolItem
		constexpr auto _runtimeHitboxCache = 0x60; // RuntimeVehicleHitBox
		constexpr auto Nation = 0x68; // Nation
		constexpr auto VehicleEnterTime = 0x6c; // float
		constexpr auto AutoDestroyPercentage = 0x70; // float
		constexpr auto MinSpeedForRoadKill = 0x74; // float
		constexpr auto HP = 0x78; // float
		constexpr auto Prefab = 0x80; // GameObject
		constexpr auto PrefabCasual = 0x88; // GameObject
		constexpr auto DestroyedPrefab = 0x90; // GameObject
		constexpr auto RepairRatioPercent = 0x98; // float
		constexpr auto DestrucationPower = 0x9c; // float
		constexpr auto CanFloat = 0xa0; // bool
		constexpr auto FloatSpeed = 0xa4; // float
		constexpr auto SinkTime = 0xa8; // float
		constexpr auto FloatVerticalOffset = 0xac; // float
		constexpr auto CanBePushed = 0xb0; // bool
		constexpr auto PushVelocity = 0xb4; // float
		constexpr auto BoundSize = 0xb8; // float
		constexpr auto Com = 0xbc; // Vector3
		constexpr auto Hitboxes = 0xc8; // List(VehicleHitbox)
		constexpr auto ExplosionRange = 0xd0; // float
		constexpr auto ExplosionInfantryDamage = 0xd4; // float
		constexpr auto ExplosionLightVehicleDamage = 0xd8; // float
		constexpr auto ExplosionEnvironmentDamage = 0xdc; // float
		constexpr auto AudioEngineBurning = 0xe0; // AudioClip
		constexpr auto AudioEngineWarning = 0xe8; // AudioClip
		constexpr auto AudioBulletImpacts = 0xf0; // AudioClip[]
		constexpr auto AudioRocketImpacts = 0xf8; // AudioClip[]
		constexpr auto AudioEngineStart = 0x100; // AudioClip
		constexpr auto AudioEngineStop = 0x108; // AudioClip
		constexpr auto DesertLODs = 0x110; // Mesh[]
		constexpr auto ForestLODs = 0x118; // Mesh[]
	}

	namespace n_GImpactCompoundShape { // : GImpactShapeInterface
		constexpr auto _compoundPrimitiveManager = 0x30; // CompoundPrimitiveManager
	}

	namespace n_SatelliteContractVersionAttribute { // : Attribute
		constexpr auto _version = 0x10; // string
	}

	namespace n_KeyPairPersistence {
		constexpr auto _params = 0x10; // CspParameters
		constexpr auto _keyvalue = 0x18; // string
		constexpr auto _filename = 0x20; // string
		constexpr auto _container = 0x28; // string
	}

	namespace n_PKCS7.ContentInfo {
		constexpr auto contentType = 0x10; // string
		constexpr auto content = 0x18; // ASN1
	}

	namespace n_EliminationSettings { // : GamemodeSettingsBase
		constexpr auto (ELI_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (ELI_Tickets)k__BackingField = 0x150; // GamemodeVariable(int)
		constexpr auto (ELI_FlagCaptureTime)k__BackingField = 0x158; // GamemodeVariable(int)
	}

	namespace n_AWeaponMag { // : IAttachmentItem
		constexpr auto isExpaneded = 0x10; // bool
		constexpr auto ID = 0x14; // int
		constexpr auto MagName = 0x18; // string
		constexpr auto Permissions = 0x20; // Avaibility
		constexpr auto MagMesh = 0x28; // Mesh
		constexpr auto newAmmoCount = 0x30; // int
		constexpr auto SupplyCost = 0x34; // int
		constexpr auto MagazineVisual = 0x38; // GameObject
		constexpr auto Settings = 0x40; // AttachmentSettings
	}

	namespace n_AGadget { // : ToolItem
		constexpr auto Field = 0x60; // ToolField
		constexpr auto Permissions = 0x68; // Avaibility
		constexpr auto Rank = 0x70; // int
		constexpr auto BelongNation = 0x74; // Nation
		constexpr auto LoadoutIndex = 0x75; // LoadoutIndex
		constexpr auto Count = 0x78; // RoleCounts
		constexpr auto SupplyCost = 0x80; // int
		constexpr auto LocalPrefabAsset = 0x88; // GameObject
		constexpr auto Sounds = 0x90; // AGadgetSounds
		constexpr auto UIPos = 0x98; // Vector3
		constexpr auto UIEulars = 0xa4; // Vector3
		constexpr auto UIScale = 0xb0; // float
		constexpr auto CanHaveKills = 0xb4; // bool
		constexpr auto mCacheName = 0xb8; // string
		constexpr auto mCacheSet = 0xc0; // bool
	}

	namespace n_XPathDocument {
		constexpr auto pageText = 0x10; // XPathNode[]
		constexpr auto pageRoot = 0x18; // XPathNode[]
		constexpr auto pageXmlNmsp = 0x20; // XPathNode[]
		constexpr auto idxText = 0x28; // int
		constexpr auto idxRoot = 0x2c; // int
		constexpr auto idxXmlNmsp = 0x30; // int
		constexpr auto nameTable = 0x38; // XmlNameTable
		constexpr auto mapNmsp = 0x40; // Dictionary(XPathNodeRef, XPathNodeRef)
		constexpr auto idValueMap = 0x48; // Dictionary(string, XPathNodeRef)
	}

	namespace n_ArtilleryShellSound { // : MonoBehaviour
		constexpr auto Sounds = 0x18; // ArtilleryShellSound.Sound[]
		constexpr auto src = 0x20; // AudioSource
		constexpr auto Parent = 0x28; // Transform
		constexpr auto counter = 0x30; // float
		constexpr auto shakeCounter = 0x34; // float
		constexpr auto volume = 0x38; // float
		constexpr auto soundExist = 0x3c; // bool
	}

	namespace n_MainMenu_InClan_List { // : MonoBehaviour
		constexpr auto mRectTransform = 0x18; // RectTransform
		constexpr auto mContent = 0x20; // CanvasGroup
		constexpr auto (IsExpanded)k__BackingField = 0x28; // bool
		constexpr auto (DidRequested)k__BackingField = 0x29; // bool
	}

	namespace n_DllImportAttribute { // : Attribute
		constexpr auto _val = 0x10; // string
		constexpr auto EntryPoint = 0x18; // string
		constexpr auto CharSet = 0x20; // CharSet
		constexpr auto SetLastError = 0x24; // bool
		constexpr auto ExactSpelling = 0x25; // bool
		constexpr auto PreserveSig = 0x26; // bool
		constexpr auto CallingConvention = 0x28; // CallingConvention
		constexpr auto BestFitMapping = 0x2c; // bool
		constexpr auto ThrowOnUnmappableChar = 0x2d; // bool
	}

	namespace n_Scale { // : TransformComponentsSettings
		constexpr auto uniformScale = 0x20; // bool
		constexpr auto minScale = 0x24; // Vector3
		constexpr auto maxScale = 0x30; // Vector3
	}

	namespace n_AssemblyDefaultAliasAttribute { // : Attribute
		constexpr auto m_defaultAlias = 0x10; // string
	}

	namespace n_SRigidbody {
		constexpr auto Rigidbody = 0x10; // Rigidbody
		constexpr auto RigidsObj = 0x18; // GameObject
		constexpr auto state = 0x20; // RigidbodyState
		constexpr auto requireUpdate = 0x28; // bool
		constexpr auto InterpolationBehaviour = 0x30; // RigidbodyInterpolationBehaviour
		constexpr auto _activeTarget = 0x38; // bool
		constexpr auto _isActiveNow = 0x39; // bool
		constexpr auto _velocity = 0x3c; // Vector3
	}

	namespace n_WallBuilder.WallHole {
		constexpr auto StartX = 0x10; // float
		constexpr auto EndX = 0x14; // float
		constexpr auto StartY = 0x18; // float
		constexpr auto EndY = 0x1c; // float
		constexpr auto Draw = 0x20; // bool
	}

	namespace n_NameValueCollection { // : NameObjectCollectionBase
		constexpr auto _all = 0x48; // string[]
		constexpr auto _allKeys = 0x50; // string[]
	}

	namespace n_RemotingSurrogateSelector { // : ISurrogateSelector
		constexpr auto _next = 0x10; // ISurrogateSelector
	}

	namespace n_TMP_Dropdown { // : Selectable
		constexpr auto m_Template = 0xf8; // RectTransform
		constexpr auto m_CaptionText = 0x100; // TMP_Text
		constexpr auto m_CaptionImage = 0x108; // Image
		constexpr auto m_Placeholder = 0x110; // Graphic
		constexpr auto m_ItemText = 0x118; // TMP_Text
		constexpr auto m_ItemImage = 0x120; // Image
		constexpr auto m_Value = 0x128; // int
		constexpr auto m_Options = 0x130; // TMP_Dropdown.OptionDataList
		constexpr auto m_OnValueChanged = 0x138; // TMP_Dropdown.DropdownEvent
		constexpr auto m_AlphaFadeSpeed = 0x140; // float
		constexpr auto m_Dropdown = 0x148; // GameObject
		constexpr auto m_Blocker = 0x150; // GameObject
		constexpr auto m_Items = 0x158; // List(TMP_Dropdown.DropdownItem)
		constexpr auto m_AlphaTweenRunner = 0x160; // TweenRunner(FloatTween)
		constexpr auto validTemplate = 0x168; // bool
		constexpr auto m_Coroutine = 0x170; // Coroutine
	}

	namespace n_Audio {
		constexpr auto Master = 0x10; // float
		constexpr auto Game = 0x14; // float
		constexpr auto Music = 0x18; // float
		constexpr auto Speech = 0x1c; // float
		constexpr auto Voip = 0x20; // float
		constexpr auto DisableEnemyVoiceChat = 0x24; // bool
		constexpr auto Ambient = 0x28; // float
		constexpr auto MicVolumeBoost = 0x2c; // float
		constexpr auto MicDevice = 0x30; // string
		constexpr auto SpeakerMode = 0x38; // AudioSpeakerMode
	}

	namespace n_Pool.Bullet {
		constexpr auto Shells = 0x10; // Pool.Bullet.Shell
		constexpr auto Projectiles = 0x18; // Pool.Bullet.Projectile
		constexpr auto ArtilleryShell = 0x20; // GameObject
	}

	namespace n_SettingsPresents { // : MonoBehaviour
		constexpr auto Menu = 0x18; // PauseMenuOptions
	}

	namespace n_Authorization {
		constexpr auto m_Message = 0x10; // string
		constexpr auto m_Complete = 0x18; // bool
		constexpr auto ModuleAuthenticationType = 0x20; // string
	}

	namespace n_SslStream { // : AuthenticatedStream
		constexpr auto provider = 0x38; // MonoTlsProvider
		constexpr auto impl = 0x40; // IMonoSslStream
	}

	namespace n_X509ChainImplMono { // : X509ChainImpl
		constexpr auto location = 0x10; // StoreLocation
		constexpr auto elements = 0x18; // X509ChainElementCollection
		constexpr auto policy = 0x20; // X509ChainPolicy
	}

	namespace n_ContentSizeSyncNonSelf { // : MonoBehaviour
		constexpr auto Target = 0x18; // RectTransform
		constexpr auto Horizontal = 0x20; // bool
		constexpr auto HorizontalOffset = 0x24; // float
		constexpr auto Vertical = 0x28; // bool
		constexpr auto VerticalOffset = 0x2c; // float
		constexpr auto EditorExecute = 0x30; // bool
		constexpr auto rectTransform = 0x38; // RectTransform
	}

	namespace n_ToolGrapplingHook { // : GadgetManager
		constexpr auto Projectile = 0xd0; // Hook
		constexpr auto ShotPoint = 0xd8; // Transform
		constexpr auto HookMesh = 0xe0; // MeshRenderer
		constexpr auto MaxRange = 0xe8; // float
		constexpr auto DefaultGas = 0xec; // float
		constexpr auto DefaultPos = 0xf0; // PositionAndRotationStruct
		constexpr auto AimPos = 0x108; // PositionAndRotationStruct
		constexpr auto RangeLabel = 0x120; // TextMeshPro
		constexpr auto ProjectilePath = 0x128; // LineRenderer
		constexpr auto Particle = 0x130; // ParticleSystem
		constexpr auto dot = 0x138; // float
		constexpr auto m_loaded = 0x13c; // bool
		constexpr auto (Gas)k__BackingField = 0x140; // float
		constexpr auto (Distance)k__BackingField = 0x144; // float
		constexpr auto m_busy = 0x148; // float
		constexpr auto m_aiming = 0x14c; // bool
		constexpr auto m_reloadFlag = 0x14d; // bool
		constexpr auto mPathResults = 0x150; // List(Vector3)
		constexpr auto m_canFire = 0x158; // bool
	}

	namespace n_PlayerInputs {
		constexpr auto Vertical = 0x10; // float
		constexpr auto Horizontal = 0x14; // float
		constexpr auto Run = 0x18; // bool
		constexpr auto isAiming = 0x19; // bool
		constexpr auto isThrowing = 0x1a; // bool
		constexpr auto Standing = 0x1c; // PlayerStand
		constexpr auto Leaning = 0x20; // LeaningSide
		constexpr auto GroundID = 0x24; // byte
		constexpr auto inFreeLook = 0x25; // bool
		constexpr auto isInCombat = 0x26; // bool
		constexpr auto isDragging = 0x27; // bool
		constexpr auto isSwiming = 0x28; // bool
		constexpr auto PrimarySideRail = 0x29; // bool
		constexpr auto SecondarySideRail = 0x2a; // bool
		constexpr auto isSafelyMode = 0x2b; // bool
		constexpr auto isBeingObserved = 0x2c; // bool
		constexpr auto UnusedBool02 = 0x2d; // bool
	}

	namespace n_NatureManager.TreeCell { // : IComparable(NatureManager.TreeCell)
		constexpr auto Tree = 0x10; // TreeInstance
		constexpr auto WorldPosition = 0x38; // Vector3
		constexpr auto DistanceSqrToPlayer = 0x44; // float
	}

	namespace n_MinFloatParameter { // : FloatParameter
		constexpr auto min = 0x20; // float
	}

	namespace n_MessageDictionary { // : IDictionary
		constexpr auto _internalProperties = 0x10; // IDictionary
		constexpr auto _message = 0x18; // IMethodMessage
		constexpr auto _methodKeys = 0x20; // string[]
		constexpr auto _ownProperties = 0x28; // bool
	}

	namespace n_MasterServerConnectionPlayer {
		constexpr auto mConnection = 0x10; // OneTimeConnection
		constexpr auto mSocket = 0x18; // Socket
		constexpr auto mRegion = 0x20; // Region
		constexpr auto mOutgoingRequests = 0x28; // List(MasterServerConnectionPlayer.Request)
		constexpr auto mExistToken = 0x30; // MasterServerConnectionPlayer.Token
		constexpr auto mDeltaCounter = 0x38; // Stopwatch
		constexpr auto mServerList = 0x40; // List(EndPoint)
		constexpr auto mCooldown = 0x48; // float
		constexpr auto mOwnerSteamID = 0x50; // ulong
		constexpr auto mLastConnection = 0x58; // EndPoint
	}

	namespace n_PointerInputModule.MouseButtonEventData {
		constexpr auto buttonState = 0x10; // PointerEventData.FramePressState
		constexpr auto buttonData = 0x18; // PointerEventData
	}

	namespace n_XmlListConverter { // : XmlBaseConverter
		constexpr auto atomicConverter = 0x28; // XmlValueConverter
	}

	namespace n_OpenedHost {
		constexpr auto nonCachedConnectionsCount = 0x10; // int
	}

	namespace n_XmlReaderSettings {
		constexpr auto useAsync = 0x10; // bool
		constexpr auto nameTable = 0x18; // XmlNameTable
		constexpr auto xmlResolver = 0x20; // XmlResolver
		constexpr auto lineNumberOffset = 0x28; // int
		constexpr auto linePositionOffset = 0x2c; // int
		constexpr auto conformanceLevel = 0x30; // ConformanceLevel
		constexpr auto checkCharacters = 0x34; // bool
		constexpr auto maxCharactersInDocument = 0x38; // long
		constexpr auto maxCharactersFromEntities = 0x40; // long
		constexpr auto ignoreWhitespace = 0x48; // bool
		constexpr auto ignorePIs = 0x49; // bool
		constexpr auto ignoreComments = 0x4a; // bool
		constexpr auto dtdProcessing = 0x4c; // DtdProcessing
		constexpr auto validationType = 0x50; // ValidationType
		constexpr auto validationFlags = 0x54; // XmlSchemaValidationFlags
		constexpr auto schemas = 0x58; // XmlSchemaSet
		constexpr auto closeInput = 0x60; // bool
		constexpr auto isReadOnly = 0x61; // bool
		constexpr auto (IsXmlResolverSet)k__BackingField = 0x62; // bool
	}

	namespace n_MainMenu_InClan_List_Member { // : MonoBehaviour
		constexpr auto RectTr = 0x18; // RectTransform
		constexpr auto ProfilePicture = 0x20; // RawImage
		constexpr auto Nickname = 0x28; // TextMeshProUGUI
		constexpr auto Rank = 0x30; // TextMeshProUGUI
		constexpr auto Exp = 0x38; // TextMeshProUGUI
		constexpr auto PromoteAction = 0x40; // GameObject
		constexpr auto DemoteAction = 0x48; // GameObject
		constexpr auto KickAction = 0x50; // GameObject
		constexpr auto Owner = 0x58; // GameObject
		constexpr auto SnOfficer = 0x60; // GameObject
		constexpr auto Officer = 0x68; // GameObject
		constexpr auto Loading = 0x70; // GameObject
		constexpr auto Actions = 0x78; // RectTransform
		constexpr auto mClanMember = 0x80; // ClanMember
		constexpr auto mSteamStats = 0x88; // SteamStats
		constexpr auto mIsSet = 0x90; // bool
		constexpr auto mMemberCount = 0x94; // int
		constexpr auto mActionsExpanded = 0x98; // bool
	}

	namespace n_CustomizeList { // : MonoBehaviour
		constexpr auto ElementPrefab = 0x18; // GameObject
		constexpr auto ElementParent = 0x20; // Transform
		constexpr auto _canvas = 0x28; // CanvasGroup
		constexpr auto _rect = 0x30; // RectTransform
		constexpr auto _elements = 0x38; // List(CustomizeListElement)
		constexpr auto isWearableFlag = 0x40; // bool
		constexpr auto lastWearableType = 0x44; // WearableType
	}

	namespace n_PrecedingQuery { // : BaseAxisQuery
		constexpr auto workIterator = 0x58; // XPathNodeIterator
		constexpr auto ancestorStk = 0x60; // ClonableStack(XPathNavigator)
	}

	namespace n_ChainValidationHelper { // : ICertificateValidator2
		constexpr auto sender = 0x10; // object
		constexpr auto settings = 0x18; // MonoTlsSettings
		constexpr auto provider = 0x20; // MonoTlsProvider
		constexpr auto certValidationCallback = 0x28; // ServerCertValidationCallback
		constexpr auto certSelectionCallback = 0x30; // LocalCertSelectionCallback
		constexpr auto callbackWrapper = 0x38; // ServerCertValidationCallbackWrapper
		constexpr auto tlsStream = 0x40; // MonoTlsStream
		constexpr auto request = 0x48; // HttpWebRequest
	}

	namespace n_XmlDeclaration { // : XmlLinkedNode
		constexpr auto version = 0x20; // string
		constexpr auto encoding = 0x28; // string
		constexpr auto standalone = 0x30; // string
	}

	namespace n_GungameList { // : ScriptableObject
		constexpr auto RuntimeID = 0x18; // ushort
		constexpr auto Steps = 0x20; // GungameList.Step[]
	}

	namespace n_MainLightShadowCasterPass { // : ScriptableRenderPass
		constexpr auto m_ShadowmapWidth = 0x68; // int
		constexpr auto m_ShadowmapHeight = 0x6c; // int
		constexpr auto m_ShadowCasterCascadesCount = 0x70; // int
		constexpr auto m_SupportsBoxFilterForShadows = 0x74; // bool
		constexpr auto m_MainLightShadowmap = 0x78; // RenderTargetHandle
		constexpr auto m_MainLightShadowmapTexture = 0x80; // RenderTexture
		constexpr auto m_MainLightShadowMatrices = 0x88; // Matrix4x4[]
		constexpr auto m_CascadeSlices = 0x90; // ShadowSliceData[]
		constexpr auto m_CascadeSplitDistances = 0x98; // Vector4[]
		constexpr auto m_ProfilingSampler = 0xa0; // ProfilingSampler
	}

	namespace n_CompiledXpathExpr { // : XPathExpression
		constexpr auto query = 0x10; // Query
		constexpr auto expr = 0x18; // string
		constexpr auto needContext = 0x20; // bool
	}

	namespace n_VFXInputButtonBinder { // : VFXBinderBase
		constexpr auto m_ButtonProperty = 0x20; // ExposedProperty
		constexpr auto m_ButtonSmoothProperty = 0x28; // ExposedProperty
		constexpr auto ButtonName = 0x30; // string
		constexpr auto SmoothSpeed = 0x38; // float
		constexpr auto UseButtonSmooth = 0x3c; // bool
		constexpr auto m_CachedSmoothValue = 0x40; // float
	}

	namespace n_BatchRendererGroup {
		constexpr auto m_GroupHandle = 0x10; // IntPtr
		constexpr auto m_PerformCulling = 0x18; // BatchRendererGroup.OnPerformCulling
	}

	namespace n_Glyph {
		constexpr auto m_Index = 0x10; // uint
		constexpr auto m_Metrics = 0x14; // GlyphMetrics
		constexpr auto m_GlyphRect = 0x28; // GlyphRect
		constexpr auto m_Scale = 0x38; // float
		constexpr auto m_AtlasIndex = 0x3c; // int
	}

	namespace n_FPSway { // : MonoBehaviour
		constexpr auto ShootingFallBackCurve = 0x18; // AnimationCurve
		constexpr auto ShootingFallBackCurveAiming = 0x20; // AnimationCurve
		constexpr auto MovementZMovement = 0x28; // AnimationCurve
		constexpr auto WeaponSway = 0x30; // Transform
		constexpr auto AdsSwayControll = 0x38; // Transform
		constexpr auto AdsSwayBack = 0x40; // Transform
		constexpr auto mLocalEulars = 0x48; // Vector3
		constexpr auto mLocalPosition = 0x54; // Vector3
		constexpr auto mDefaultPosition = 0x60; // Vector3
		constexpr auto mBreathPosition = 0x6c; // Vector3
		constexpr auto mMovementPosition = 0x78; // Vector3
		constexpr auto mArmsUpPos = 0x84; // Vector3
		constexpr auto mArmsUpRot = 0x90; // Vector3
		constexpr auto mRunOffsetPosition = 0x9c; // Vector3
		constexpr auto mSafetlyRotation = 0xa8; // Vector3
		constexpr auto mSafetlyOffsetPosition = 0xb4; // Vector3
		constexpr auto mHoldingPosition = 0xc0; // Vector3
		constexpr auto mHoldingRot = 0xcc; // Vector3
		constexpr auto mGroundedFallPosition = 0xd8; // Vector3
		constexpr auto mGroundedFallRot = 0xe4; // Vector3
		constexpr auto mPronePos = 0xf0; // Vector3
		constexpr auto mProneRot = 0xfc; // Vector3
		constexpr auto mProneVisualPosition = 0x108; // Vector3
		constexpr auto mProneRot_visual = 0x114; // Vector3
		constexpr auto mLeanUpPosition = 0x120; // Vector3
		constexpr auto mLeanToolAnimationPosition = 0x12c; // Vector3
		constexpr auto mZPosition = 0x138; // Vector3
		constexpr auto mWaterEular = 0x144; // Vector3
		constexpr auto mWaterPosition = 0x150; // Vector3
		constexpr auto mShootingAPosition = 0x15c; // Vector3
		constexpr auto mShootingBPosition = 0x168; // Vector3
		constexpr auto mShootingCPosition = 0x174; // Vector3
		constexpr auto shootingAEular = 0x180; // Vector3
		constexpr auto shootingBEular = 0x18c; // Vector3
		constexpr auto swayEmulator = 0x198; // Vector2
		constexpr auto lastNonActive = 0x1a0; // float
		constexpr auto lastNonAim = 0x1a4; // float
		constexpr auto lastNonProne = 0x1a8; // float
		constexpr auto mSaved_pos = 0x1ac; // Vector3
		constexpr auto mSaved_eular = 0x1b8; // Vector3
		constexpr auto mSaved_rot = 0x1c4; // Quaternion
		constexpr auto mSwayAimEular = 0x1d4; // Vector3
		constexpr auto mState = 0x1e0; // PlayerNetworkState
		constexpr auto mLoadout = 0x1e8; // FirstPersonLoadoutManager
		constexpr auto mLoadoutActiveIndex = 0x1f0; // int
		constexpr auto mIsRunningKeybinding = 0x1f4; // bool
		constexpr auto mMouseHorizontal = 0x1f8; // float
		constexpr auto mMouseVertical = 0x1fc; // float
		constexpr auto mIsRunning = 0x200; // bool
		constexpr auto mIsAiming = 0x201; // bool
		constexpr auto mActiveTool = 0x208; // Tool
		constexpr auto mFPToolsActive = 0x210; // bool
		constexpr auto mFPPlayingAnimation = 0x211; // bool
		constexpr auto mApplyTransformPos = 0x214; // Vector3
		constexpr auto mApplyTransformRot = 0x220; // Vector3
	}

	namespace n_Rush { // : GameplayMode
		constexpr auto Layers = 0x48; // RushLayer[]
		constexpr auto AdvancingCounter = 0x50; // int
		constexpr auto RoundTime = 0x58; // RoundTimer
		constexpr auto AttackersTickets = 0x60; // int
		constexpr auto mBases = 0x68; // RushBase[]
		constexpr auto mActiveIndex = 0x70; // int
		constexpr auto mLastAdvandceCallTime = 0x74; // float
	}

	namespace n_PhotoCapture { // : IDisposable
		constexpr auto m_NativePtr = 0x10; // IntPtr
	}

	namespace n_TankBehaviour { // : VehicleInstance
		constexpr auto LeftWheels = 0x1f0; // VehicleWheel[]
		constexpr auto LeftTrack = 0x1f8; // Track
		constexpr auto RightWheels = 0x200; // VehicleWheel[]
		constexpr auto RightTrack = 0x208; // Track
		constexpr auto State = 0x210; // TankState
		constexpr auto mEngineGas = 0x218; // VehicleAudioSource
		constexpr auto mEngineIdle = 0x220; // VehicleAudioSource
		constexpr auto mEngineMovement = 0x228; // VehicleAudioSource
		constexpr auto mEngineMain = 0x230; // VehicleAudioSource
		constexpr auto mEnginePitch = 0x238; // VehicleAudioSource
		constexpr auto mMaxRPM = 0x240; // float
		constexpr auto mMaxSpeed = 0x244; // float
		constexpr auto mWheelRadius = 0x248; // float
		constexpr auto mNetworkStreamStream = 0x250; // TankStreamUpdater
		constexpr auto mMainTurret = 0x258; // TankTurretBehaviour
		constexpr auto mVelocity = 0x260; // Vector3
		constexpr auto mAngularVelocity = 0x26c; // Vector3
		constexpr auto mRotationLinearVelocity = 0x278; // float
		constexpr auto mLastGearChangeTime = 0x27c; // float
		constexpr auto mClientPosition = 0x280; // Vector3
		constexpr auto mClientRotation = 0x28c; // Quaternion
		constexpr auto mLastPackageReceiveTime = 0x29c; // float
		constexpr auto mLastPackageReceiveDeltaTime = 0x2a0; // float
	}

	namespace n_ApcTurretBehaviour { // : SeatBehaviour
		constexpr auto Item = 0x48; // APCTurret
		constexpr auto Local = 0x50; // GameObject
		constexpr auto YAxis = 0x58; // Transform
		constexpr auto XAxis = 0x60; // Transform
		constexpr auto ShotPoint = 0x68; // Transform
		constexpr auto ShellPoint = 0x70; // Transform
		constexpr auto Barrel = 0x78; // Transform
		constexpr auto Camera = 0x80; // Camera
		constexpr auto m_animationMaxLenght = 0x88; // float
		constexpr auto m_leftAmmo = 0x8c; // int
		constexpr auto m_loadedAmmo = 0x90; // int
		constexpr auto m_reload = 0x94; // float
		constexpr auto m_zoomIndex = 0x98; // int
		constexpr auto m_lastReload = 0x9c; // float
		constexpr auto m_lastShot = 0xa0; // float
		constexpr auto m_firstShot = 0xa4; // float
		constexpr auto m_moveFlagX = 0xa8; // bool
		constexpr auto m_moveFlagY = 0xa9; // bool
		constexpr auto m_moveBarrelFlag = 0xaa; // bool
		constexpr auto m_localRemoteAngles = 0xac; // Vector2
		constexpr auto m_localRemoteAnglesCurrent = 0xb4; // Vector2
		constexpr auto m_localRemoteYaxisRotation = 0xbc; // Quaternion
		constexpr auto m_localRemoteXaxisRotation = 0xcc; // Quaternion
		constexpr auto m_eular = 0xdc; // Vector3
		constexpr auto m_vehicle = 0xe8; // VehicleInstance
		constexpr auto m_accuracy = 0xf0; // WeaponAccuracy
		constexpr auto m_reloadAudioSource = 0xf8; // VehicleAudioEvent
	}

	namespace n_WeaponMagazines {
		constexpr auto Changed = 0x10; // bool
		constexpr auto (Clips)k__BackingField = 0x18; // WeaponMagazines.Mag[]
		constexpr auto (ClipIndexAtUse)k__BackingField = 0x20; // int
		constexpr auto maxAmmo = 0x24; // int
	}

	namespace n_AppDomainSetup {
		constexpr auto application_base = 0x10; // string
		constexpr auto application_name = 0x18; // string
		constexpr auto cache_path = 0x20; // string
		constexpr auto configuration_file = 0x28; // string
		constexpr auto dynamic_base = 0x30; // string
		constexpr auto license_file = 0x38; // string
		constexpr auto private_bin_path = 0x40; // string
		constexpr auto private_bin_path_probe = 0x48; // string
		constexpr auto shadow_copy_directories = 0x50; // string
		constexpr auto shadow_copy_files = 0x58; // string
		constexpr auto publisher_policy = 0x60; // bool
		constexpr auto path_changed = 0x61; // bool
		constexpr auto loader_optimization = 0x64; // int
		constexpr auto disallow_binding_redirects = 0x68; // bool
		constexpr auto disallow_code_downloads = 0x69; // bool
		constexpr auto _activationArguments = 0x70; // object
		constexpr auto domain_initializer = 0x78; // object
		constexpr auto application_trust = 0x80; // object
		constexpr auto domain_initializer_args = 0x88; // string[]
		constexpr auto disallow_appbase_probe = 0x90; // bool
		constexpr auto configuration_bytes = 0x98; // byte[]
		constexpr auto serialized_non_primitives = 0xa0; // byte[]
		constexpr auto (TargetFrameworkName)k__BackingField = 0xa8; // string
	}

	namespace n_BroadphaseProxy {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _clientObject = 0x18; // object
	}

	namespace n_ServicePoint {
		constexpr auto uri = 0x10; // Uri
		constexpr auto connectionLimit = 0x18; // int
		constexpr auto maxIdleTime = 0x1c; // int
		constexpr auto currentConnections = 0x20; // int
		constexpr auto idleSince = 0x28; // DateTime
		constexpr auto lastDnsResolve = 0x30; // DateTime
		constexpr auto protocolVersion = 0x38; // Version
		constexpr auto host = 0x40; // IPHostEntry
		constexpr auto usesProxy = 0x48; // bool
		constexpr auto groups = 0x50; // Dictionary(string, WebConnectionGroup)
		constexpr auto sendContinue = 0x58; // bool
		constexpr auto useConnect = 0x59; // bool
		constexpr auto hostE = 0x60; // object
		constexpr auto useNagle = 0x68; // bool
		constexpr auto endPointCallback = 0x70; // BindIPEndPoint
		constexpr auto tcp_keepalive = 0x78; // bool
		constexpr auto tcp_keepalive_time = 0x7c; // int
		constexpr auto tcp_keepalive_interval = 0x80; // int
		constexpr auto idleTimer = 0x88; // Timer
		constexpr auto m_ServerCertificateOrBytes = 0x90; // object
		constexpr auto m_ClientCertificateOrBytes = 0x98; // object
	}

	namespace n_UnicodeEncoding { // : Encoding
		constexpr auto isThrowException = 0x38; // bool
		constexpr auto bigEndian = 0x39; // bool
		constexpr auto byteOrderMark = 0x3a; // bool
	}

	namespace n_KeybindingButton { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto mMainButtonRect = 0x20; // RectTransform
		constexpr auto mValueLabel = 0x28; // TextMeshProUGUI
		constexpr auto mButtonLabel = 0x30; // TextMeshProUGUI
		constexpr auto mPicture = 0x38; // RawImage
		constexpr auto mKeybindingName = 0x40; // string
		constexpr auto mRectPixel = 0x48; // float
		constexpr auto mVisualAligment = 0x4c; // KeybindingButton.Aligment
		constexpr auto SnapToCornvers = 0x50; // bool
		constexpr auto SelfInitialize = 0x51; // bool
		constexpr auto BackgroundType = 0x54; // KeybindingButton.Background
		constexpr auto mImage = 0x58; // Image
		constexpr auto mButton = 0x60; // Binding
		constexpr auto mAwakeFlag = 0x68; // bool
		constexpr auto mPressTime = 0x6c; // float
		constexpr auto mDownTime = 0x70; // float
		constexpr auto mLastScale = 0x74; // float
		constexpr auto mScaledChangedFlag = 0x78; // bool
		constexpr auto RectTransform = 0x80; // RectTransform
	}

	namespace n_GameScreen_RangeFinder { // : MonoBehaviour
		constexpr auto c = 0x18; // CanvasGroup
		constexpr auto Label = 0x20; // TextMeshProUGUI
		constexpr auto (TickIndex8)k__BackingField = 0x28; // int
		constexpr auto lastSet = 0x2c; // float
	}

	namespace n_InvokableCallList {
		constexpr auto m_PersistentCalls = 0x10; // List(BaseInvokableCall)
		constexpr auto m_RuntimeCalls = 0x18; // List(BaseInvokableCall)
		constexpr auto m_ExecutingCalls = 0x20; // List(BaseInvokableCall)
		constexpr auto m_NeedsUpdate = 0x28; // bool
	}

	namespace n_UriBuilder {
		constexpr auto _changed = 0x10; // bool
		constexpr auto _fragment = 0x18; // string
		constexpr auto _host = 0x20; // string
		constexpr auto _password = 0x28; // string
		constexpr auto _path = 0x30; // string
		constexpr auto _port = 0x38; // int
		constexpr auto _query = 0x40; // string
		constexpr auto _scheme = 0x48; // string
		constexpr auto _schemeDelimiter = 0x50; // string
		constexpr auto _uri = 0x58; // Uri
		constexpr auto _username = 0x60; // string
	}

	namespace n_TerrainDetailSettings {
		constexpr auto minMax = 0x10; // bool
		constexpr auto onlyOneColor = 0x11; // bool
		constexpr auto noiseSpread = 0x14; // float
		constexpr auto bendFactor = 0x18; // float
		constexpr auto minWidth = 0x1c; // float
		constexpr auto maxWidth = 0x20; // float
		constexpr auto minHeight = 0x24; // float
		constexpr auto maxHeight = 0x28; // float
		constexpr auto healthyColour = 0x2c; // Color
		constexpr auto dryColour = 0x3c; // Color
		constexpr auto renderMode = 0x4c; // DetailRenderMode
		constexpr auto billboard = 0x50; // bool
	}

	namespace n_HashAlgorithm { // : IDisposable
		constexpr auto HashSizeValue = 0x10; // int
		constexpr auto HashValue = 0x18; // byte[]
		constexpr auto State = 0x20; // int
		constexpr auto m_bDisposed = 0x24; // bool
	}

	namespace n_GImpactShapeInterface { // : ConcaveShape
		constexpr auto _childShapes = 0x28; // List(CollisionShape)
	}

	namespace n_ToolArms { // : MonoBehaviour
		constexpr auto LeftShoulder = 0x18; // Transform
		constexpr auto LeftElbow = 0x20; // Transform
		constexpr auto RightShoulder = 0x28; // Transform
		constexpr auto RightElbow = 0x30; // Transform
		constexpr auto isBlenderArm = 0x38; // bool
		constexpr auto LeftArmsBack = 0x3c; // Vector3
		constexpr auto RightArmsBack = 0x48; // Vector3
	}

	namespace n_RegionInfo {
		constexpr auto regionId = 0x10; // int
		constexpr auto iso2Name = 0x18; // string
		constexpr auto iso3Name = 0x20; // string
		constexpr auto win3Name = 0x28; // string
		constexpr auto englishName = 0x30; // string
		constexpr auto nativeName = 0x38; // string
		constexpr auto currencySymbol = 0x40; // string
		constexpr auto isoCurrencySymbol = 0x48; // string
		constexpr auto currencyEnglishName = 0x50; // string
		constexpr auto currencyNativeName = 0x58; // string
	}

	namespace n_QuantizedBvhTree { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_CompilationRelaxationsAttribute { // : Attribute
		constexpr auto m_relaxations = 0x10; // int
	}

	namespace n_Pool.Bullet.Projectile {
		constexpr auto Bullet = 0x10; // GameObject
		constexpr auto Rocket = 0x18; // GameObject
		constexpr auto TankAPShell = 0x20; // GameObject
		constexpr auto TankHeShell = 0x28; // GameObject
		constexpr auto ExplosiveBullet = 0x30; // GameObject
	}

	namespace n_SmallXmlParser {
		constexpr auto handler = 0x10; // SmallXmlParser.IContentHandler
		constexpr auto reader = 0x18; // TextReader
		constexpr auto elementNames = 0x20; // Stack
		constexpr auto xmlSpaces = 0x28; // Stack
		constexpr auto xmlSpace = 0x30; // string
		constexpr auto buffer = 0x38; // StringBuilder
		constexpr auto nameBuffer = 0x40; // char[]
		constexpr auto isWhitespace = 0x48; // bool
		constexpr auto attributes = 0x50; // SmallXmlParser.AttrListImpl
		constexpr auto line = 0x58; // int
		constexpr auto column = 0x5c; // int
		constexpr auto resetColumn = 0x60; // bool
	}

	namespace n_AWeapon { // : ToolItem
		constexpr auto AllowedAttachments = 0x60; // AWeaponAllowedAttachment
		constexpr auto Permissions = 0x68; // Avaibility
		constexpr auto Sounds = 0x70; // AWeaponSounds
		constexpr auto Stats = 0x78; // WeaponStats
		constexpr auto BelongNation = 0x80; // Nation
		constexpr auto LoadoutIndex = 0x81; // LoadoutIndex
		constexpr auto WeaponType = 0x84; // WeaponType
		constexpr auto Animations = 0x88; // WeaponAssetAnimations
		constexpr auto Skins = 0x90; // List(AWeaponSkin)
		constexpr auto Magazines = 0x98; // List(AWeaponMag)
		constexpr auto LocalPrefabAsset = 0xa0; // GameObject
		constexpr auto DefaultMagazineVisual = 0xa8; // GameObject
		constexpr auto MagazineAtStartup = 0xb0; // int
		constexpr auto DefaultRoundsPerMagazine = 0xb4; // int
		constexpr auto DefaultMagazineSupplyCost = 0xb8; // int
		constexpr auto mCacheName = 0xc0; // string
		constexpr auto mCacheSet = 0xc8; // bool
	}

	namespace n_AssemblyKeyFileAttribute { // : Attribute
		constexpr auto m_keyFile = 0x10; // string
	}

	namespace n_Elimination { // : GameplayMode
		constexpr auto (Flags)k__BackingField = 0x48; // Flag[]
		constexpr auto (TicketBleedPerFlag)k__BackingField = 0x50; // int
		constexpr auto RoundTime = 0x58; // RoundTimer
		constexpr auto mLast50TicketsLeftFlag = 0x60; // bool
		constexpr auto mLast10TicketsLeftFlag = 0x61; // bool
		constexpr auto mLastTicketBleed = 0x64; // float
		constexpr auto mLastFlagsCheck = 0x68; // float
		constexpr auto mQuadUpdateCounter = 0x6c; // int
	}

	namespace n_QuaternationComparer { // : SharedObjectComparer(Quaternion)
		constexpr auto min = 0x10; // float
	}

	namespace n_SharedStatics {
		constexpr auto _maker = 0x10; // Tokenizer.StringMaker
	}

	namespace n_MultiBodyConstraint { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _multiBodyA = 0x18; // MultiBody
		constexpr auto _multiBodyB = 0x20; // MultiBody
	}

	namespace n_CharacterPool.ArmorPool {
		constexpr auto mPool = 0x10; // Dictionary(int, Queue(THPArmor))
	}

	namespace n_GameScreen_SquadAbilityNotification_Item { // : MonoBehaviour
		constexpr auto Abilities = 0x18; // SquadAbility[]
		constexpr auto Canvas = 0x20; // CanvasGroup
		constexpr auto CountLabel = 0x28; // TextMeshProUGUI
		constexpr auto (TickIndex8)k__BackingField = 0x30; // int
		constexpr auto (SetCount)k__BackingField = 0x34; // int
	}

	namespace n_CustomAttributeData {
		constexpr auto ctorInfo = 0x10; // ConstructorInfo
		constexpr auto ctorArgs = 0x18; // IList(CustomAttributeTypedArgument)
		constexpr auto namedArgs = 0x20; // IList(CustomAttributeNamedArgument)
		constexpr auto lazyData = 0x28; // CustomAttributeData.LazyCAttrData
	}

	namespace n_CodePointIndexer {
		constexpr auto ranges = 0x10; // CodePointIndexer.TableRange[]
		constexpr auto TotalCount = 0x18; // int
		constexpr auto defaultIndex = 0x1c; // int
		constexpr auto defaultCP = 0x20; // int
	}

	namespace n_AlignedIndexedMeshArrayEnumerator { // : IEnumerator(IndexedMesh)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedIndexedMeshArray
	}

	namespace n_NameTable.Entry {
		constexpr auto str = 0x10; // string
		constexpr auto hashCode = 0x18; // int
		constexpr auto next = 0x20; // NameTable.Entry
	}

	namespace n_CompoundShape { // : CollisionShape
		constexpr auto _childList = 0x28; // CompoundShapeChildArray
	}

	namespace n_MonoTODOAttribute { // : Attribute
		constexpr auto comment = 0x10; // string
	}

	namespace n_APCBehaviour { // : VehicleInstance
		constexpr auto Wheels = 0x1f0; // APCBehaviour.Wheel[]
		constexpr auto WaterMovementVelocity = 0x1f8; // float
		constexpr auto WaterTurnVelocity = 0x1fc; // float
		constexpr auto WaterPitchDegree = 0x200; // float
		constexpr auto WaterRollDegree = 0x204; // float
		constexpr auto State = 0x208; // APCBehaviour.VehicleState
		constexpr auto mEngineIdle = 0x210; // VehicleAudioSource
		constexpr auto mEngine = 0x218; // VehicleAudioSource
		constexpr auto mEngineGas = 0x220; // VehicleAudioSource
		constexpr auto mWaterOutside = 0x228; // VehicleAudioSource
		constexpr auto mWaterInside = 0x230; // VehicleAudioSource
		constexpr auto mIsGrounded = 0x238; // bool
		constexpr auto mMaxSpeed = 0x23c; // float
		constexpr auto mWheelRadius = 0x240; // float
		constexpr auto mWaterSpeed = 0x244; // float
		constexpr auto mNetworkStreamUpdater = 0x248; // APCBehaviour.StreamUpdater
		constexpr auto mTurret = 0x250; // ApcTurretBehaviour
		constexpr auto mLastFloatingFrame = 0x258; // int
		constexpr auto mLastVelocityLinearSqr = 0x25c; // float
		constexpr auto mLastVerticalSpeed = 0x260; // float
		constexpr auto mLastGroundedTime = 0x264; // float
		constexpr auto mLastShiftTime = 0x268; // float
		constexpr auto mLastTorque = 0x26c; // float
		constexpr auto mLastBreak = 0x270; // float
		constexpr auto mLastSteer = 0x274; // float
		constexpr auto mVelocity = 0x278; // Vector3
		constexpr auto mAngularVelocity = 0x284; // Vector3
		constexpr auto mLastFloatingPosition = 0x290; // Vector3
		constexpr auto mWheelVisualEular = 0x29c; // Vector3
		constexpr auto mSwimingInputs = 0x2a8; // Vector4
		constexpr auto mClientPosition = 0x2b8; // Vector3
		constexpr auto mClientRotation = 0x2c4; // Quaternion
		constexpr auto mLastPackageReceiveTime = 0x2d4; // float
		constexpr auto mLastPackageReceiveDeltaTime = 0x2d8; // float
		constexpr auto mServerDriveTime = 0x2dc; // float
	}

	namespace n_CallContextRemotingData { // : ICloneable
		constexpr auto _logicalCallID = 0x10; // string
	}

	namespace n_VFXSpawnerState { // : IDisposable
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_Owner = 0x18; // bool
	}

	namespace n_UniversalRenderPipelineEditorResources { // : ScriptableObject
		constexpr auto shaders = 0x18; // UniversalRenderPipelineEditorResources.ShaderResources
		constexpr auto materials = 0x20; // UniversalRenderPipelineEditorResources.MaterialResources
	}

	namespace n_SpaceAttribute { // : PropertyAttribute
		constexpr auto height = 0x18; // float
	}

	namespace n_Tess {
		constexpr auto _mesh = 0x10; // Mesh
		constexpr auto _normal = 0x18; // Vec3
		constexpr auto _sUnit = 0x24; // Vec3
		constexpr auto _tUnit = 0x30; // Vec3
		constexpr auto _bminX = 0x3c; // float
		constexpr auto _bminY = 0x40; // float
		constexpr auto _bmaxX = 0x44; // float
		constexpr auto _bmaxY = 0x48; // float
		constexpr auto _windingRule = 0x4c; // WindingRule
		constexpr auto _dict = 0x50; // Dict(Tess.ActiveRegion)
		constexpr auto _pq = 0x58; // PriorityQueue(MeshUtils.Vertex)
		constexpr auto _event = 0x60; // MeshUtils.Vertex
		constexpr auto _combineCallback = 0x68; // CombineCallback
		constexpr auto _vertices = 0x70; // ContourVertex[]
		constexpr auto _vertexCount = 0x78; // int
		constexpr auto _elements = 0x80; // int[]
		constexpr auto _elementCount = 0x88; // int
		constexpr auto SUnitX = 0x8c; // float
		constexpr auto SUnitY = 0x90; // float
		constexpr auto SentinelCoord = 0x94; // float
		constexpr auto NoEmptyPolygons = 0x98; // bool
		constexpr auto UsePooling = 0x99; // bool
	}

	namespace n_Footsteps {
		constexpr auto Grounds = 0x10; // AGround[]
		constexpr auto VehicleMetal = 0x18; // AGround
		constexpr auto Concrete = 0x20; // AGround
	}

	namespace n_LogicalExpr { // : ValueQuery
		constexpr auto op = 0x18; // Operator.Op
		constexpr auto opnd1 = 0x20; // Query
		constexpr auto opnd2 = 0x28; // Query
	}

	namespace n_ObjectProgress {
		constexpr auto isInitial = 0x10; // bool
		constexpr auto count = 0x14; // int
		constexpr auto expectedType = 0x18; // BinaryTypeEnum
		constexpr auto expectedTypeInformation = 0x20; // object
		constexpr auto name = 0x28; // string
		constexpr auto objectTypeEnum = 0x30; // InternalObjectTypeE
		constexpr auto memberTypeEnum = 0x34; // InternalMemberTypeE
		constexpr auto memberValueEnum = 0x38; // InternalMemberValueE
		constexpr auto dtType = 0x40; // Type
		constexpr auto numItems = 0x48; // int
		constexpr auto binaryTypeEnum = 0x4c; // BinaryTypeEnum
		constexpr auto typeInformation = 0x50; // object
		constexpr auto nullCount = 0x58; // int
		constexpr auto memberLength = 0x5c; // int
		constexpr auto binaryTypeEnumA = 0x60; // BinaryTypeEnum[]
		constexpr auto typeInformationA = 0x68; // object[]
		constexpr auto memberNames = 0x70; // string[]
		constexpr auto memberTypes = 0x78; // Type[]
		constexpr auto pr = 0x80; // ParseRecord
	}

	namespace n_PositionAndQuaternationClass {
		constexpr auto Position = 0x10; // Vector3
		constexpr auto Rotation = 0x1c; // Quaternion
	}

	namespace n_ClosestRayResultCallback { // : RayResultCallback
		constexpr auto (RayFromWorld)k__BackingField = 0x28; // Vector3
		constexpr auto (RayToWorld)k__BackingField = 0x34; // Vector3
		constexpr auto (HitNormalWorld)k__BackingField = 0x40; // Vector3
		constexpr auto (HitPointWorld)k__BackingField = 0x4c; // Vector3
	}

	namespace n_RequiredByNativeCodeAttribute { // : Attribute
		constexpr auto (Name)k__BackingField = 0x10; // string
		constexpr auto (Optional)k__BackingField = 0x18; // bool
		constexpr auto (GenerateProxy)k__BackingField = 0x19; // bool
	}

	namespace n_VFXInputKeyBinder { // : VFXBinderBase
		constexpr auto m_KeyProperty = 0x20; // ExposedProperty
		constexpr auto m_KeySmoothProperty = 0x28; // ExposedProperty
		constexpr auto Key = 0x30; // KeyCode
		constexpr auto SmoothSpeed = 0x34; // float
		constexpr auto UseKeySmooth = 0x38; // bool
		constexpr auto m_CachedSmoothValue = 0x3c; // float
	}

	namespace n_FieldOffsetAttribute { // : Attribute
		constexpr auto _val = 0x10; // int
	}

	namespace n_SerializationHeaderRecord {
		constexpr auto binaryFormatterMajorVersion = 0x10; // int
		constexpr auto binaryFormatterMinorVersion = 0x14; // int
		constexpr auto binaryHeaderEnum = 0x18; // BinaryHeaderEnum
		constexpr auto topId = 0x1c; // int
		constexpr auto headerId = 0x20; // int
		constexpr auto majorVersion = 0x24; // int
		constexpr auto minorVersion = 0x28; // int
	}

	namespace n_RenderPassResources.DebrisPass {
		constexpr auto MainMesh = 0x10; // Mesh
		constexpr auto MainMaterial = 0x18; // Material
		constexpr auto Colours = 0x20; // Color[]
		constexpr auto Materials = 0x28; // Material[]
	}

	namespace n_ForwardLights {
		constexpr auto m_AdditionalLightsBufferId = 0x10; // int
		constexpr auto m_AdditionalLightsIndicesId = 0x14; // int
		constexpr auto m_MixedLightingSetup = 0x18; // MixedLightingSetup
		constexpr auto k_DefaultLightPosition = 0x1c; // Vector4
		constexpr auto k_DefaultLightColor = 0x2c; // Vector4
		constexpr auto k_DefaultLightAttenuation = 0x3c; // Vector4
		constexpr auto k_DefaultLightSpotDirection = 0x4c; // Vector4
		constexpr auto k_DefaultLightsProbeChannel = 0x5c; // Vector4
		constexpr auto m_AdditionalLightPositions = 0x70; // Vector4[]
		constexpr auto m_AdditionalLightColors = 0x78; // Vector4[]
		constexpr auto m_AdditionalLightAttenuations = 0x80; // Vector4[]
		constexpr auto m_AdditionalLightSpotDirections = 0x88; // Vector4[]
		constexpr auto m_AdditionalLightOcclusionProbeChannels = 0x90; // Vector4[]
		constexpr auto m_UseStructuredBuffer = 0x98; // bool
	}

	namespace n_AlignedSoftBodyArrayEnumerator { // : IEnumerator(SoftBody)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedSoftBodyArray
	}

	namespace n_MainMenuStatsItem { // : MonoBehaviour
		constexpr auto Label = 0x18; // TextMeshProUGUI
		constexpr auto ID = 0x20; // int
	}

	namespace n_EventAttribute { // : Attribute
		constexpr auto (EventId)k__BackingField = 0x10; // int
		constexpr auto (Level)k__BackingField = 0x14; // EventLevel
		constexpr auto (Keywords)k__BackingField = 0x18; // EventKeywords
		constexpr auto (Task)k__BackingField = 0x20; // EventTask
		constexpr auto (Version)k__BackingField = 0x24; // byte
		constexpr auto (Message)k__BackingField = 0x28; // string
		constexpr auto (Tags)k__BackingField = 0x30; // EventTags
		constexpr auto (ActivityOptions)k__BackingField = 0x34; // EventActivityOptions
		constexpr auto m_opcode = 0x38; // EventOpcode
		constexpr auto m_opcodeSet = 0x3c; // bool
	}

	namespace n_RegexWriter {
		constexpr auto _intStack = 0x10; // int[]
		constexpr auto _depth = 0x18; // int
		constexpr auto _emitted = 0x20; // int[]
		constexpr auto _curpos = 0x28; // int
		constexpr auto _stringhash = 0x30; // Dictionary(string, int)
		constexpr auto _stringtable = 0x38; // List(string)
		constexpr auto _counting = 0x40; // bool
		constexpr auto _count = 0x44; // int
		constexpr auto _trackcount = 0x48; // int
		constexpr auto _caps = 0x50; // Hashtable
	}

	namespace n_LoadoutAttachmentManager { // : MonoBehaviour
		constexpr auto Points = 0x18; // LoadoutAttachmentPoint[]
		constexpr auto Trigger = 0x20; // LoadoutAttachmentTrigger
		constexpr auto Magazine = 0x28; // LoadoutAttachmentTrigger
		constexpr auto Panel = 0x30; // LoadoutAttachmentPanel
		constexpr auto item = 0x38; // AWeapon
		constexpr auto Selected = 0x40; // AttachmentType
	}

	namespace n_DeployScreenBehaviour.SquadUI {
		constexpr auto CreateJoinTab = 0x10; // GameObject
		constexpr auto InSquadTab = 0x18; // GameObject
		constexpr auto ClanCraeteTab = 0x20; // GameObject
		constexpr auto WriteOnlyName = 0x28; // TextMeshProUGUI
		constexpr auto ReadWriteName = 0x30; // InputField
		constexpr auto MemberPrefab = 0x38; // GameObject
		constexpr auto MemberParent = 0x40; // Transform
		constexpr auto LockedIcon = 0x48; // Image
		constexpr auto LockButton = 0x50; // GameObject
		constexpr auto LeaveButton = 0x58; // RawImage
		constexpr auto memberPool = 0x60; // UIPool(SquadViewMember)
		constexpr auto activeMembers = 0x68; // List(SquadViewMember)
		constexpr auto mSquadMemberList = 0x70; // VerticalList
		constexpr auto SquadListViewInterface = 0x78; // DeployScreenBehaviour.SquadUI.SquadListViewUI
		constexpr auto RoleInterface = 0x80; // DeployScreenBehaviour.SquadUI.RoleUI
	}

	namespace n_CustomizeStatsList { // : MonoBehaviour
		constexpr auto HP = 0x18; // CustomizeStatsItem
		constexpr auto Primary = 0x20; // CustomizeStatsItem
		constexpr auto Secondary = 0x28; // CustomizeStatsItem
		constexpr auto FirstAid = 0x30; // CustomizeStatsItem
		constexpr auto LightTool = 0x38; // CustomizeStatsItem
		constexpr auto HeavyTool = 0x40; // CustomizeStatsItem
		constexpr auto Throwable = 0x48; // CustomizeStatsItem
		constexpr auto Running = 0x50; // CustomizeStatsItem
		constexpr auto Aiming = 0x58; // CustomizeStatsItem
		constexpr auto Type = 0x60; // WearableType
		constexpr auto rect = 0x68; // RectTransform
		constexpr auto canvas = 0x70; // CanvasGroup
		constexpr auto defaultPosition = 0x78; // Vector2
		constexpr auto showcasePosition = 0x80; // Vector2
	}

	namespace n_RegisteredWaitHandle { // : MarshalByRefObject
		constexpr auto _waitObject = 0x18; // WaitHandle
		constexpr auto _callback = 0x20; // WaitOrTimerCallback
		constexpr auto _state = 0x28; // object
		constexpr auto _finalEvent = 0x30; // WaitHandle
		constexpr auto _cancelEvent = 0x38; // ManualResetEvent
		constexpr auto _timeout = 0x40; // TimeSpan
		constexpr auto _callsInProcess = 0x48; // int
		constexpr auto _executeOnlyOnce = 0x4c; // bool
		constexpr auto _unregistered = 0x4d; // bool
	}

	namespace n_TestScene { // : MonoBehaviour
		constexpr auto isOnline = 0x18; // bool
		constexpr auto forceHost = 0x19; // bool
		constexpr auto reconect = 0x1a; // bool
		constexpr auto balanceForce = 0x1b; // bool
		constexpr auto ForceEnd = 0x1c; // bool
		constexpr auto lastSet = 0x20; // float
		constexpr auto ConnectBot = 0x24; // bool
		constexpr auto TimeScale = 0x28; // float
		constexpr auto EFAmmo = 0x2c; // bool
		constexpr auto StopPost = 0x2d; // bool
		constexpr auto C4 = 0x30; // AGadget
		constexpr auto Claymore = 0x38; // AGadget
		constexpr auto Sledgehammer = 0x40; // AGadget
		constexpr auto RPG = 0x48; // AGadget
		constexpr auto MDX201 = 0x50; // AGadget
		constexpr auto MedicKit = 0x58; // AGadget
		constexpr auto PrimaryChangeTest = 0x60; // ToolItem
		constexpr auto PrimaryAttachmnets = 0x68; // WeaponAttachmentData
		constexpr auto TestChange = 0x70; // bool
		constexpr auto AnimateNetworkLOD = 0x71; // bool
		constexpr auto ForceNetworkLOD = 0x74; // int
		constexpr auto NetworkM = 0x78; // float
		constexpr auto RateDelta = 0x7c; // float
		constexpr auto RateFromOne = 0x80; // StreamRate
		constexpr auto InterpolationSpeed = 0x84; // float
		constexpr auto minDot = 0x88; // double
		constexpr auto maxDot = 0x90; // double
		constexpr auto dist = 0x98; // float
		constexpr auto SpawnOnAllFlags = 0x9c; // bool
		constexpr auto GravityMultiplier = 0xa0; // float
		constexpr auto GravityAccelerationSpeed = 0xa4; // float
		constexpr auto JumpSpeed = 0xa8; // float
		constexpr auto Test = 0xac; // float
		constexpr auto ShaderPass01 = 0xb0; // int
		constexpr auto ShaderPass02 = 0xb4; // int
		constexpr auto ShaderPass03 = 0xb8; // int
		constexpr auto ShaderPass04 = 0xbc; // int
		constexpr auto PrefabToSpawn = 0xc0; // GameObject
		constexpr auto SpawnPoint = 0xc8; // Transform
		constexpr auto Spawn = 0xd0; // bool
		constexpr auto Points = 0xd4; // int
		constexpr auto GivePoints = 0xd8; // bool
		constexpr auto SetPoints = 0xd9; // bool
		constexpr auto TreeForce = 0xdc; // float
		constexpr auto UnityFrameCount = 0xe0; // int
		constexpr auto ThreadFrameCount = 0xe4; // int
		constexpr auto PlacableTick = 0xe8; // int
		constexpr auto RequestRallyOnPlayer = 0xec; // bool
		constexpr auto generated = 0xf0; // GameObject
		constexpr auto view = 0xf8; // NetView
		constexpr auto m = 0x100; // int
	}

	namespace n_XmlElement { // : XmlLinkedNode
		constexpr auto name = 0x20; // XmlName
		constexpr auto attributes = 0x28; // XmlAttributeCollection
		constexpr auto lastChild = 0x30; // XmlLinkedNode
	}

	namespace n_AWeaponSounds {
		constexpr auto DrawIn = 0x10; // AudioClip
		constexpr auto DrawOut = 0x18; // AudioClip
		constexpr auto ReloadSlowNormal = 0x20; // AudioClip
		constexpr auto ReloadSlowBolt = 0x28; // AudioClip
		constexpr auto ReloadTacticalNormal = 0x30; // AudioClip
		constexpr auto ReloadTacticalBolt = 0x38; // AudioClip
		constexpr auto MagazineCheck = 0x40; // AudioClip
		constexpr auto BoltAction = 0x48; // AudioClip
		constexpr auto LastShotBoltAction = 0x50; // AudioClip
		constexpr auto Unsuppressed = 0x58; // AudioClip[]
		constexpr auto Suppressed = 0x60; // AudioClip[]
	}

	namespace n_OverlapFilterCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_InternalsVisibleToAttribute { // : Attribute
		constexpr auto _assemblyName = 0x10; // string
		constexpr auto _allInternalsVisible = 0x18; // bool
	}

	namespace n_RainComponent { // : NatureComponent
		constexpr auto OutsideRainSource = 0x38; // AudioSource
		constexpr auto InsideRainSource = 0x40; // AudioSource
		constexpr auto HeavyRainOutSideClip = 0x48; // AudioClip
		constexpr auto SoftRainOutSideClip = 0x50; // AudioClip
		constexpr auto LeafsRainSources = 0x58; // AudioSource[]
		constexpr auto Surfaces = 0x60; // AGround[]
		constexpr auto Close = 0x68; // ParticleSystem
		constexpr auto Medium = 0x70; // VisualEffect
		constexpr auto Far = 0x78; // VisualEffect
		constexpr auto Distant = 0x80; // VisualEffect
		constexpr auto RainIntensity = 0x88; // float
		constexpr auto result = 0x90; // List(ValueTuple(Vector3, AudioClip, float, GameObject))
		constexpr auto ObjsList = 0x98; // HashSet(GameObject)
		constexpr auto vehicles = 0xa0; // HashSet(VehicleInstance)
		constexpr auto active = 0xa8; // Dictionary(GameObject, ValueTuple(AudioSource, float))
		constexpr auto SurfaceList = 0xb0; // HashSet(AGround)
		constexpr auto poolAudioSource = 0xb8; // Queue(AudioSource)
		constexpr auto lastIntensity = 0xc0; // float
	}

	namespace n_Tile { // : TileBase
		constexpr auto m_Sprite = 0x18; // Sprite
		constexpr auto m_Color = 0x20; // Color
		constexpr auto m_Transform = 0x30; // Matrix4x4
		constexpr auto m_InstancedGameObject = 0x70; // GameObject
		constexpr auto m_Flags = 0x78; // TileFlags
		constexpr auto m_ColliderType = 0x7c; // Tile.ColliderType
	}

	namespace n_WeaponRecoil {
		constexpr auto VerticalMouse = 0x10; // float
		constexpr auto HorizontalMouse = 0x14; // float
		constexpr auto FirstShotRecoil = 0x18; // float
		constexpr auto HipFireZ = 0x1c; // float
		constexpr auto HipFireSinZ = 0x20; // float
		constexpr auto HipFireEularX = 0x24; // float
		constexpr auto HipFireEularY = 0x28; // float
		constexpr auto HipFireEularZ = 0x2c; // float
		constexpr auto AimFireZ = 0x30; // float
		constexpr auto AimFireEularX = 0x34; // float
		constexpr auto AimFireEularY = 0x38; // float
		constexpr auto AimFireEularZ = 0x3c; // float
		constexpr auto AimFireIronSightSinZ = 0x40; // float
	}

	namespace n_BitArray.BitArrayEnumeratorSimple { // : IEnumerator
		constexpr auto bitarray = 0x10; // BitArray
		constexpr auto index = 0x18; // int
		constexpr auto version = 0x1c; // int
		constexpr auto currentElement = 0x20; // bool
	}

	namespace n_UnmanagedMemoryStream { // : Stream
		constexpr auto _buffer = 0x28; // SafeBuffer
		constexpr auto _mem = 0x30; // byte*
		constexpr auto _length = 0x38; // long
		constexpr auto _capacity = 0x40; // long
		constexpr auto _position = 0x48; // long
		constexpr auto _offset = 0x50; // long
		constexpr auto _access = 0x58; // FileAccess
		constexpr auto _isOpen = 0x5c; // bool
		constexpr auto _lastReadTask = 0x60; // Task(int)
	}

	namespace n_XmlBaseConverter { // : XmlValueConverter
		constexpr auto schemaType = 0x10; // XmlSchemaType
		constexpr auto typeCode = 0x18; // XmlTypeCode
		constexpr auto clrTypeDefault = 0x20; // Type
	}

	namespace n_TextAreaAttribute { // : PropertyAttribute
		constexpr auto minLines = 0x18; // int
		constexpr auto maxLines = 0x1c; // int
	}

	namespace n_StoreManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnEntitlementCreate = 0x20; // StoreManager.EntitlementCreateHandler
		constexpr auto OnEntitlementDelete = 0x28; // StoreManager.EntitlementDeleteHandler
	}

	namespace n_RC2CryptoServiceProvider { // : RC2
		constexpr auto m_use40bitSalt = 0x50; // bool
	}

	namespace n_ColorParameter { // : VolumeParameter(Color)
		constexpr auto hdr = 0x28; // bool
		constexpr auto showAlpha = 0x29; // bool
		constexpr auto showEyeDropper = 0x2a; // bool
	}

	namespace n_PrototypeTerrainTexture { // : Prototype
		constexpr auto terrainTextureName = 0x20; // string
		constexpr auto splatIndex = 0x28; // int
		constexpr auto terrainTextureSettings = 0x30; // TerrainTextureSettings
		constexpr auto terrainLayer = 0x38; // TerrainLayer
	}

	namespace n_XsdSimpleValue {
		constexpr auto xmlType = 0x10; // XmlSchemaSimpleType
		constexpr auto typedValue = 0x18; // object
	}

	namespace n_OperatingSystem { // : ICloneable
		constexpr auto _platform = 0x10; // PlatformID
		constexpr auto _version = 0x18; // Version
		constexpr auto _servicePack = 0x20; // string
	}

	namespace n_FtpDataStream { // : Stream
		constexpr auto request = 0x28; // FtpWebRequest
		constexpr auto networkStream = 0x30; // Stream
		constexpr auto disposed = 0x38; // bool
		constexpr auto isRead = 0x39; // bool
		constexpr auto totalRead = 0x3c; // int
	}

	namespace n_HableCurve {
		constexpr auto (whitePoint)k__BackingField = 0x10; // float
		constexpr auto (inverseWhitePoint)k__BackingField = 0x14; // float
		constexpr auto (x0)k__BackingField = 0x18; // float
		constexpr auto (x1)k__BackingField = 0x1c; // float
		constexpr auto segments = 0x20; // HableCurve.Segment[]
		constexpr auto uniforms = 0x28; // HableCurve.Uniforms
	}

	namespace n_TriangleConvexcastCallback { // : TriangleCallback
		constexpr auto (AllowedPenetration)k__BackingField = 0x20; // float
		constexpr auto (ConvexShape)k__BackingField = 0x28; // ConvexShape
		constexpr auto (ConvexShapeFrom)k__BackingField = 0x30; // Matrix
		constexpr auto (ConvexShapeTo)k__BackingField = 0x70; // Matrix
		constexpr auto (HitFraction)k__BackingField = 0xb0; // float
		constexpr auto (TriangleCollisionMargin)k__BackingField = 0xb4; // float
		constexpr auto (TriangleToWorld)k__BackingField = 0xb8; // Matrix
	}

	namespace n_ApplyProceduralTextureProperties { // : MonoBehaviour
		constexpr auto m_Material = 0x18; // Material
		constexpr auto proceduralTexAssetAlbedo = 0x20; // ProceduralTexture2D
		constexpr auto proceduralTexAssetNormal = 0x28; // ProceduralTexture2D
		constexpr auto proceduralTexAssetMask = 0x30; // ProceduralTexture2D
	}

	namespace n_UriParser {
		constexpr auto m_Flags = 0x10; // UriSyntaxFlags
		constexpr auto m_UpdatableFlags = 0x14; // UriSyntaxFlags
		constexpr auto m_UpdatableFlagsUsed = 0x18; // bool
		constexpr auto m_Port = 0x1c; // int
		constexpr auto m_Scheme = 0x20; // string
	}

	namespace n_ActivatedServiceTypeEntry { // : TypeEntry
		constexpr auto obj_type = 0x20; // Type
	}

	namespace n_SynchronizationContext {
		constexpr auto _props = 0x10; // SynchronizationContextProperties
	}

	namespace n_TemporaryBrickExistance { // : ExistanceProvider
		constexpr auto wall = 0x20; // WallBuilder
		constexpr auto position = 0x28; // Vector3
		constexpr auto broken = 0x34; // bool
		constexpr auto brick = 0x38; // ExistanceProvider
	}

	namespace n_StageRuntimeInterface {
		constexpr auto m_AddGameObject = 0x10; // Func(bool, GameObject)
		constexpr auto m_GetCamera = 0x18; // Func(Camera)
		constexpr auto m_GetSunLight = 0x20; // Func(Light)
		constexpr auto SRPData = 0x28; // object
	}

	namespace n_FtpAsyncResult { // : IAsyncResult
		constexpr auto response = 0x10; // FtpWebResponse
		constexpr auto waitHandle = 0x18; // ManualResetEvent
		constexpr auto exception = 0x20; // Exception
		constexpr auto callback = 0x28; // AsyncCallback
		constexpr auto stream = 0x30; // Stream
		constexpr auto state = 0x38; // object
		constexpr auto completed = 0x40; // bool
		constexpr auto synch = 0x41; // bool
		constexpr auto locker = 0x48; // object
	}

	namespace n_Matrix2x2Bit { // : IEquatable(Matrix2x2Bit)
		constexpr auto Width = 0x10; // int
		constexpr auto Height = 0x14; // int
		constexpr auto TotalBytes = 0x18; // int
		constexpr auto Buffer = 0x20; // byte[]
	}

	namespace n_FileLoadException { // : IOException
		constexpr auto _fileName = 0x90; // string
		constexpr auto _fusionLog = 0x98; // string
	}

	namespace n_XmlTextReaderImpl.NodeData { // : IComparable
		constexpr auto type = 0x10; // XmlNodeType
		constexpr auto localName = 0x18; // string
		constexpr auto prefix = 0x20; // string
		constexpr auto ns = 0x28; // string
		constexpr auto nameWPrefix = 0x30; // string
		constexpr auto value = 0x38; // string
		constexpr auto chars = 0x40; // char[]
		constexpr auto valueStartPos = 0x48; // int
		constexpr auto valueLength = 0x4c; // int
		constexpr auto lineInfo = 0x50; // LineInfo
		constexpr auto lineInfo2 = 0x58; // LineInfo
		constexpr auto quoteChar = 0x60; // char
		constexpr auto depth = 0x64; // int
		constexpr auto isEmptyOrDefault = 0x68; // bool
		constexpr auto entityId = 0x6c; // int
		constexpr auto xmlContextPushed = 0x70; // bool
		constexpr auto nextAttrValueChunk = 0x78; // XmlTextReaderImpl.NodeData
		constexpr auto schemaType = 0x80; // object
		constexpr auto typedValue = 0x88; // object
	}

	namespace n_TaskExceptionHolder {
		constexpr auto m_task = 0x10; // Task
		constexpr auto m_faultExceptions = 0x18; // List(ExceptionDispatchInfo)
		constexpr auto m_cancellationException = 0x20; // ExceptionDispatchInfo
		constexpr auto m_isHandled = 0x28; // bool
	}

	namespace n_PointerSpec { // : ModifierSpec
		constexpr auto pointer_level = 0x10; // int
	}

	namespace n_ColorPickerBehaviour { // : OptionsElement
		constexpr auto DefaultValue = 0x20; // Color
		constexpr auto Picker = 0x30; // ColorPicker
	}

	namespace n_ThrowableManager { // : MonoBehaviour
		constexpr auto view = 0x18; // NetView
	}

	namespace n_AdditionalLightsShadowCasterPass { // : ScriptableRenderPass
		constexpr auto m_UseStructuredBuffer = 0x68; // bool
		constexpr auto m_AdditionalLightsShadowmap = 0x6c; // RenderTargetHandle
		constexpr auto m_AdditionalLightsShadowmapTexture = 0x70; // RenderTexture
		constexpr auto m_ShadowmapWidth = 0x78; // int
		constexpr auto m_ShadowmapHeight = 0x7c; // int
		constexpr auto m_AdditionalLightSlices = 0x80; // ShadowSliceData[]
		constexpr auto m_AdditionalLightsWorldToShadow = 0x88; // Matrix4x4[]
		constexpr auto m_AdditionalLightsShadowParams = 0x90; // Vector4[]
		constexpr auto m_AdditionalLightsShadowData = 0x98; // ShaderInput.ShadowData[]
		constexpr auto m_AdditionalShadowCastingLightIndices = 0xa0; // List(int)
		constexpr auto m_AdditionalShadowCastingLightIndicesMap = 0xa8; // List(int)
		constexpr auto m_SupportsBoxFilterForShadows = 0xb0; // bool
		constexpr auto m_ProfilingSampler = 0xb8; // ProfilingSampler
	}

	namespace n_Convex2DConvex2DAlgorithm.CreateFunc { // : CollisionAlgorithmCreateFunc
		constexpr auto _pdSolver = 0x20; // ConvexPenetrationDepthSolver
		constexpr auto _simplexSolver = 0x28; // VoronoiSimplexSolver
	}

	namespace n_ActivityTracker.ActivityInfo {
		constexpr auto m_name = 0x10; // string
		constexpr auto m_uniqueId = 0x18; // long
		constexpr auto m_guid = 0x20; // Guid
		constexpr auto m_activityPathGuidOffset = 0x30; // int
		constexpr auto m_level = 0x34; // int
		constexpr auto m_eventOptions = 0x38; // EventActivityOptions
		constexpr auto m_lastChildID = 0x40; // long
		constexpr auto m_stopped = 0x48; // int
		constexpr auto m_creator = 0x50; // ActivityTracker.ActivityInfo
		constexpr auto m_activityIdToRestore = 0x58; // Guid
	}

	namespace n_MenuKeybindings { // : IEnumerable(IOptionsElement)
		constexpr auto InfVerticalLook = 0x10; // BindingBehaviour
		constexpr auto InfHorizontalLook = 0x18; // BindingBehaviour
		constexpr auto Forward = 0x20; // BindingBehaviour
		constexpr auto Backward = 0x28; // BindingBehaviour
		constexpr auto Right = 0x30; // BindingBehaviour
		constexpr auto Left = 0x38; // BindingBehaviour
		constexpr auto Run = 0x40; // BindingBehaviour
		constexpr auto Crouch = 0x48; // BindingBehaviour
		constexpr auto Prone = 0x50; // BindingBehaviour
		constexpr auto ToggleCrouch = 0x58; // BindingBehaviour
		constexpr auto LeanLeft = 0x60; // BindingBehaviour
		constexpr auto LeanRight = 0x68; // BindingBehaviour
		constexpr auto Vault = 0x70; // BindingBehaviour
		constexpr auto Jump = 0x78; // BindingBehaviour
		constexpr auto FreeLook = 0x80; // BindingBehaviour
		constexpr auto Drag = 0x88; // BindingBehaviour
		constexpr auto DroneForward = 0x90; // BindingBehaviour
		constexpr auto DroneBackward = 0x98; // BindingBehaviour
		constexpr auto DroneRight = 0xa0; // BindingBehaviour
		constexpr auto DroneLeft = 0xa8; // BindingBehaviour
		constexpr auto DroneThrottleUp = 0xb0; // BindingBehaviour
		constexpr auto DroneThrottleDown = 0xb8; // BindingBehaviour
		constexpr auto DroneIncraseSpeed = 0xc0; // BindingBehaviour
		constexpr auto NightVision = 0xc8; // BindingBehaviour
		constexpr auto Fire = 0xd0; // BindingBehaviour
		constexpr auto Fire2 = 0xd8; // BindingBehaviour
		constexpr auto Ads = 0xe0; // BindingBehaviour
		constexpr auto FireMode = 0xe8; // BindingBehaviour
		constexpr auto ZeroingUp = 0xf0; // BindingBehaviour
		constexpr auto ZeroingDown = 0xf8; // BindingBehaviour
		constexpr auto ZeroingAdjusmentHoldKey = 0x100; // BindingBehaviour
		constexpr auto Reload = 0x108; // BindingBehaviour
		constexpr auto MagCheck = 0x110; // BindingBehaviour
		constexpr auto SafetlyMode = 0x118; // BindingBehaviour
		constexpr auto LaserOnOff = 0x120; // BindingBehaviour
		constexpr auto NextSight = 0x128; // BindingBehaviour
		constexpr auto PreviousSight = 0x130; // BindingBehaviour
		constexpr auto FlirChange = 0x138; // BindingBehaviour
		constexpr auto SwitchNext = 0x140; // BindingBehaviour
		constexpr auto SwitchPrevious = 0x148; // BindingBehaviour
		constexpr auto SwitchPrimary = 0x150; // BindingBehaviour
		constexpr auto SwitchSecondary = 0x158; // BindingBehaviour
		constexpr auto SwitchFirstAid = 0x160; // BindingBehaviour
		constexpr auto SwitchGadgetA = 0x168; // BindingBehaviour
		constexpr auto SwitchGadgetB = 0x170; // BindingBehaviour
		constexpr auto SwitchThrowable = 0x178; // BindingBehaviour
		constexpr auto Interact = 0x180; // BindingBehaviour
		constexpr auto ThrowGadget = 0x188; // BindingBehaviour
		constexpr auto CutRope = 0x190; // BindingBehaviour
		constexpr auto Push = 0x198; // BindingBehaviour
		constexpr auto Build = 0x1a0; // BindingBehaviour
		constexpr auto Unbuild = 0x1a8; // BindingBehaviour
		constexpr auto ChatAll = 0x1b0; // BindingBehaviour
		constexpr auto ChatTeam = 0x1b8; // BindingBehaviour
		constexpr auto ChatSquad = 0x1c0; // BindingBehaviour
		constexpr auto VoipLocal = 0x1c8; // BindingBehaviour
		constexpr auto VoipSquad = 0x1d0; // BindingBehaviour
		constexpr auto VoipSquadLeaders = 0x1d8; // BindingBehaviour
		constexpr auto Ping = 0x1e0; // BindingBehaviour
		constexpr auto Map = 0x1e8; // BindingBehaviour
		constexpr auto MapZoom = 0x1f0; // BindingBehaviour
		constexpr auto Scoreboard = 0x1f8; // BindingBehaviour
		constexpr auto SquadLeaderMenu = 0x200; // BindingBehaviour
		constexpr auto HideUI = 0x208; // BindingBehaviour
		constexpr auto EngineOnOff = 0x210; // BindingBehaviour
		constexpr auto LightsOnOff = 0x218; // BindingBehaviour
		constexpr auto Boost = 0x220; // BindingBehaviour
		constexpr auto ZoomIn = 0x228; // BindingBehaviour
		constexpr auto ZoomOut = 0x230; // BindingBehaviour
		constexpr auto TankAP = 0x238; // BindingBehaviour
		constexpr auto TankHE = 0x240; // BindingBehaviour
		constexpr auto TankStab = 0x248; // BindingBehaviour
		constexpr auto TankSmoke = 0x250; // BindingBehaviour
		constexpr auto SpotterObservePing = 0x258; // BindingBehaviour
		constexpr auto SpotterDangerPing = 0x260; // BindingBehaviour
	}

	namespace n_DebugUIPrefabBundle {
		constexpr auto type = 0x10; // string
		constexpr auto prefab = 0x18; // RectTransform
	}

	namespace n_DriverCabinUI { // : MonoBehaviour
		constexpr auto Camera0 = 0x18; // KeybindingButton
		constexpr auto Cameras = 0x20; // KeybindingButton[]
	}

	namespace n_LocalDataStore {
		constexpr auto m_DataTable = 0x10; // LocalDataStoreElement[]
		constexpr auto m_Manager = 0x18; // LocalDataStoreMgr
	}

	namespace n_TerrainSounds { // : ScriptableObject
		constexpr auto Layers = 0x18; // List(TerrianLayerSound)
	}

	namespace n_MapRallyPointWorldObject { // : MapWorldBehaviour
		constexpr auto (RallyPoint)k__BackingField = 0x40; // SquadAbilityRallyPointBehaviour
		constexpr auto (MapUI)k__BackingField = 0x48; // MapRallyPointUIObject
		constexpr auto mInited = 0x50; // bool
	}

	namespace n_DeployScreenBehaviour.SquadUI.RoleUI {
		constexpr auto Roles = 0x10; // DeployScreenBehaviour.SquadUI.RoleUI.RoleUIElement[]
		constexpr auto _lockedInSquad = 0x18; // bool
		constexpr auto lockedRole = 0x19; // Role
	}

	namespace n_XmlTextReader { // : XmlReader
		constexpr auto impl = 0x10; // XmlTextReaderImpl
	}

	namespace n_DocumentXPathNavigator { // : XPathNavigator
		constexpr auto document = 0x10; // XmlDocument
		constexpr auto source = 0x18; // XmlNode
		constexpr auto attributeIndex = 0x20; // int
		constexpr auto namespaceParent = 0x28; // XmlElement
	}

	namespace n_VerticalListMono { // : MonoBehaviour
		constexpr auto ConstHeight = 0x18; // int
		constexpr auto elements = 0x20; // List(RectTransform)
		constexpr auto ToDown = 0x28; // bool
		constexpr auto Spacing = 0x2c; // float
		constexpr auto lerp = 0x30; // bool
		constexpr auto lerpSpeed = 0x34; // float
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
	}

	namespace n_LogKill { // : MonoBehaviour
		constexpr auto thisRect = 0x18; // RectTransform
		constexpr auto Killer = 0x20; // TextMeshProUGUI
		constexpr auto Victim = 0x28; // TextMeshProUGUI
		constexpr auto VictimRect = 0x30; // RectTransform
		constexpr auto Tool = 0x38; // Image
		constexpr auto Canvas = 0x40; // CanvasGroup
		constexpr auto Fall = 0x48; // Sprite
		constexpr auto Death = 0x50; // Sprite
		constexpr auto timer = 0x58; // float
		constexpr auto updateRunning = 0x5c; // bool
		constexpr auto (TickIndex8)k__BackingField = 0x60; // int
	}

	namespace n_TMP_SpriteGlyph { // : Glyph
		constexpr auto sprite = 0x40; // Sprite
	}

	namespace n_ErrorWrapper {
		constexpr auto m_ErrorCode = 0x10; // int
	}

	namespace n_FPSRandomRotateAngle { // : MonoBehaviour
		constexpr auto RotateX = 0x18; // bool
		constexpr auto RotateY = 0x19; // bool
		constexpr auto RotateZ = 0x1a; // bool
		constexpr auto t = 0x20; // Transform
	}

	namespace n_TransparentProxy {
		constexpr auto _rp = 0x10; // RealProxy
		constexpr auto _class = 0x18; // RuntimeRemoteClassHandle
		constexpr auto _custom_type_info = 0x20; // bool
	}

	namespace n_TypeLoadExceptionHolder {
		constexpr auto m_typeName = 0x10; // string
	}

	namespace n_RootDesignerSerializerAttribute { // : Attribute
		constexpr auto reloadable = 0x10; // bool
		constexpr auto serializerTypeName = 0x18; // string
		constexpr auto serializerBaseTypeName = 0x20; // string
	}

	namespace n_BinaryReader { // : IDisposable
		constexpr auto m_stream = 0x10; // Stream
		constexpr auto m_buffer = 0x18; // byte[]
		constexpr auto m_decoder = 0x20; // Decoder
		constexpr auto m_charBytes = 0x28; // byte[]
		constexpr auto m_singleChar = 0x30; // char[]
		constexpr auto m_charBuffer = 0x38; // char[]
		constexpr auto m_maxCharsSize = 0x40; // int
		constexpr auto m_2BytesPerChar = 0x44; // bool
		constexpr auto m_isMemoryStream = 0x45; // bool
		constexpr auto m_leaveOpen = 0x46; // bool
	}

	namespace n_TankTurretUI { // : MonoBehaviour
		constexpr auto ZoomLevel = 0x18; // TextMeshProUGUI
		constexpr auto Range = 0x20; // TextMeshProUGUI
		constexpr auto SmokeLeft = 0x28; // TextMeshProUGUI
		constexpr auto SmokeReady = 0x30; // TextMeshProUGUI
		constexpr auto CannonReady = 0x38; // TextMeshProUGUI
		constexpr auto CanonType = 0x40; // TextMeshProUGUI
		constexpr auto StabilizationEnabled = 0x48; // TextMeshProUGUI
		constexpr auto VeritcalDegree = 0x50; // TextMeshProUGUI
		constexpr auto HorizontalDegree = 0x58; // TextMeshProUGUI
		constexpr auto APLeft = 0x60; // TextMeshProUGUI
		constexpr auto HeLeft = 0x68; // TextMeshProUGUI
		constexpr auto AmmoLeft = 0x70; // TextMeshProUGUI
		constexpr auto AmmoLoaded = 0x78; // TextMeshProUGUI
		constexpr auto HullRect = 0x80; // RectTransform
		constexpr auto Vignette = 0x88; // RectTransform
		constexpr auto HitIndicator = 0x90; // RectTransform
		constexpr auto APLeftCanva = 0x98; // CanvasGroup
		constexpr auto HeLeftCanva = 0xa0; // CanvasGroup
		constexpr auto lastZoom = 0xa8; // int
		constexpr auto lastRange = 0xac; // int
		constexpr auto lastRangeSetTime = 0xb0; // float
		constexpr auto cannonType = 0xb4; // TankCannonState
		constexpr auto stabilizationEnabled = 0xb8; // bool
		constexpr auto lastHullRotation = 0xbc; // float
		constexpr auto lastVerticalDegree = 0xc0; // int
		constexpr auto lastHorizontalDegree = 0xc4; // int
		constexpr auto lastSetType = 0xc8; // TankCannonType
		constexpr auto wasEnabled = 0xcc; // bool
		constexpr auto mMachineLeft = 0xd0; // int
		constexpr auto mMachineLoaded = 0xd4; // int
	}

	namespace n_DebugUIHandlerEnumHistory { // : DebugUIHandlerEnumField
		constexpr auto historyValues = 0x70; // Text[]
	}

	namespace n_ClientActivatedIdentity { // : ServerIdentity
		constexpr auto _targetThis = 0x70; // MarshalByRefObject
	}

	namespace n_SymbolsDictionary {
		constexpr auto last = 0x10; // int
		constexpr auto names = 0x18; // Hashtable
		constexpr auto wildcards = 0x20; // Hashtable
		constexpr auto particles = 0x28; // ArrayList
		constexpr auto particleLast = 0x30; // object
		constexpr auto isUpaEnforced = 0x38; // bool
	}

	namespace n_IllogicalCallContext {
		constexpr auto m_Datastore = 0x10; // Hashtable
		constexpr auto m_HostContext = 0x18; // object
	}

	namespace n_Materials {
		constexpr auto AttachmentBodyDiffuse = 0x10; // Material
		constexpr auto AttachmentBodyShadow = 0x18; // Material
		constexpr auto BulletMaterial = 0x20; // Material
		constexpr auto LowToolDiffuse = 0x28; // Material
		constexpr auto PlayerGUI_Team = 0x30; // Material
		constexpr auto PlayerGUI_Squad = 0x38; // Material
		constexpr auto PlayerGUI_SquadLeader = 0x40; // Material
		constexpr auto FriendlyWallHack = 0x48; // Material
		constexpr auto PlayerGUI_Bleeding = 0x50; // Material
		constexpr auto PlayerGUI_HealNeed = 0x58; // Material
		constexpr auto Concrete = 0x60; // PhysicMaterial
		constexpr auto PlayerFlirEnemy = 0x68; // Material
		constexpr auto PlayerFlirFriendly = 0x70; // Material
		constexpr auto RootTreeFoliage = 0x78; // Material
		constexpr auto PingGUI = 0x80; // Material
		constexpr auto MapGrid = 0x88; // Material
		constexpr auto GrassMaterials = 0x90; // Material[]
		constexpr auto GhostCircle = 0x98; // Mesh
		constexpr auto MainThpMaterial = 0xa0; // Material
		constexpr auto MainArmMaterial = 0xa8; // Material
		constexpr auto USAArmor = 0xb0; // Material
		constexpr auto USADesertArmor = 0xb8; // Texture2D
		constexpr auto USAForestArmor = 0xc0; // Texture2D
		constexpr auto RUArmor = 0xc8; // Material
		constexpr auto RUDesertArmor = 0xd0; // Texture2D
		constexpr auto RUForestArmor = 0xd8; // Texture2D
		constexpr auto DiffuseVMP = 0xe0; // Material
		constexpr auto DiffuseVMPTwoSided = 0xe8; // Material
		constexpr auto BuildableGhost = 0xf0; // Material
		constexpr auto StructureDebris = 0xf8; // Material
		constexpr auto StructureDebrisPiece = 0x100; // Material
		constexpr auto Deadzone = 0x108; // Material
		constexpr auto Safezone = 0x110; // Material
		constexpr auto DeadzoneCollider = 0x118; // Material
		constexpr auto DeadZoneCube = 0x120; // Mesh
		constexpr auto DeadZoneSphere = 0x128; // Mesh
		constexpr auto Standing = 0x130; // Mesh
		constexpr auto Crouching = 0x138; // Mesh
		constexpr auto Proning = 0x140; // Mesh
		constexpr auto Sitting = 0x148; // Mesh
		constexpr auto Dead = 0x150; // Mesh
		constexpr auto DebugZones = 0x158; // Material
	}

	namespace n_SphereCull { // : Cull
		constexpr auto Point = 0x20; // Vector3
		constexpr auto Radius = 0x2c; // float
	}

	namespace n_BiomesPackage { // : ScriptableObject
		constexpr auto areaForGlobalSpawn = 0x18; // Area
		constexpr auto globalSpawnControllerSettings = 0x20; // GlobalSpawnControllerSettings
		constexpr auto biomeList = 0x28; // List(Biome)
		constexpr auto multipleBrushSettings = 0x30; // BrushSettings
		constexpr auto brushSettingsForErase = 0x38; // BrushSettings
		constexpr auto editSettings = 0x40; // EditSettings
		constexpr auto presitionPaintSettings = 0x48; // PrecisionSettings
		constexpr auto biomeWindowsScroll = 0x50; // Vector2
		constexpr auto brushToolMode = 0x58; // BrushToolMode
		constexpr auto editorSettings = 0x60; // EditorSettings
		constexpr auto brushVisualisationSettings = 0x68; // BrushVisualisationSettings
		constexpr auto copiedBrushSettings = 0x70; // BrushSettings
		constexpr auto copiedLayerSettings = 0x78; // LayerSettings
		constexpr auto copiedFilterSettings = 0x80; // FilterSettings
		constexpr auto copiedTerrainDetailSettings = 0x88; // TerrainDetailSettings
		constexpr auto copiedAdditionalDetailSettings = 0x90; // SpawnDetailSettings
		constexpr auto copiedAdditionalSpawnSettings = 0x98; // AdditionalSpawnSettings
		constexpr auto copiedTerrainTransformSettings = 0xa0; // TerrainTransformSettings
		constexpr auto copiedFailureSettings = 0xa8; // FailureSettings
		constexpr auto copiedIntersectSettings = 0xb0; // IntersectSettings
		constexpr auto copiedTransformModulesSettings = 0xb8; // TransformComponents
		constexpr auto copiedFlagsSettings = 0xc0; // FlagsSettings
	}

	namespace n_Structure { // : MonoBehaviour
		constexpr auto Size = 0x18; // StructureType
		constexpr auto CanCollapse = 0x1c; // bool
		constexpr auto CollapseTrigger = 0x20; // float
		constexpr auto DestroyedMesh = 0x28; // Mesh
		constexpr auto m_wallsParent = 0x30; // Transform
		constexpr auto m_furnitureParent = 0x38; // Transform
		constexpr auto m_killZoneParent = 0x40; // Transform
		constexpr auto m_collidersParent = 0x48; // Transform
		constexpr auto m_lod3Model = 0x50; // Renderer
		constexpr auto m_lod0 = 0x58; // Mesh
		constexpr auto m_lod1 = 0x60; // Mesh
		constexpr auto m_lod2 = 0x68; // Mesh
		constexpr auto m_destroyedVersionLOD = 0x70; // int
		constexpr auto BuildingLOD = 0x78; // BuildingLOD
		constexpr auto KillZones = 0x80; // ManagedBoxCollider[]
		constexpr auto Colliders = 0x88; // ManagedBoxCollider[]
		constexpr auto Bounds = 0x90; // Bounds
		constexpr auto Center = 0xa8; // Vector3
		constexpr auto Height = 0xb4; // float
		constexpr auto MinRadius = 0xb8; // float
		constexpr auto MinRadiusSqr = 0xbc; // float
		constexpr auto MaxRadius = 0xc0; // float
		constexpr auto MaxRadiusSqr = 0xc4; // float
		constexpr auto BlockDestrucation = 0xc8; // bool
		constexpr auto m_enquequedWorks = 0xd0; // Queue(EnvironmentObject)
		constexpr auto m_frameRegistered = 0xd8; // bool
		constexpr auto (TickIndex3)k__BackingField = 0xdc; // int
		constexpr auto (IsBeingDestoyed)k__BackingField = 0xe0; // bool
		constexpr auto (TimeBeingDestroyed)k__BackingField = 0xe4; // float
		constexpr auto m_lod0above64k = 0xe8; // bool
		constexpr auto m_initialWallCount = 0xec; // int
		constexpr auto m_fallWallCount = 0xf0; // int
		constexpr auto m_wallCount = 0xf4; // int
		constexpr auto mMainLocalScale = 0xf8; // Vector3
		constexpr auto isBakedToMesh = 0x104; // bool
		constexpr auto isActive = 0x105; // bool
		constexpr auto ID = 0x108; // uint
		constexpr auto isDestroyed = 0x10c; // bool
	}

	namespace n_Renderer2DData { // : ScriptableRendererData
		constexpr auto m_TransparencySortMode = 0x30; // TransparencySortMode
		constexpr auto m_TransparencySortAxis = 0x34; // Vector3
		constexpr auto m_HDREmulationScale = 0x40; // float
		constexpr auto m_LightBlendStyles = 0x48; // Light2DBlendStyle[]
		constexpr auto m_UseDepthStencilBuffer = 0x50; // bool
		constexpr auto m_ShapeLightShader = 0x58; // Shader
		constexpr auto m_ShapeLightVolumeShader = 0x60; // Shader
		constexpr auto m_PointLightShader = 0x68; // Shader
		constexpr auto m_PointLightVolumeShader = 0x70; // Shader
		constexpr auto m_BlitShader = 0x78; // Shader
		constexpr auto m_ShadowGroupShader = 0x80; // Shader
		constexpr auto m_RemoveSelfShadowShader = 0x88; // Shader
		constexpr auto m_PostProcessData = 0x90; // PostProcessData
	}

	namespace n_StorageManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
	}

	namespace n_IntegratedSubsystemDescriptor { // : ISubsystemDescriptorImpl
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_DebugUIHandlerContainer { // : MonoBehaviour
		constexpr auto contentHolder = 0x18; // RectTransform
	}

	namespace n_HelpURLAttribute { // : Attribute
		constexpr auto m_Url = 0x10; // string
	}

	namespace n_LeaseManager {
		constexpr auto _objects = 0x10; // ArrayList
		constexpr auto _timer = 0x18; // Timer
	}

	namespace n_BroadphaseAabbCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _process = 0x18; // BroadphaseAabbCallback.ProcessUnmanagedDelegate
	}

	namespace n_Hashtable.HashtableEnumerator { // : IDictionaryEnumerator
		constexpr auto hashtable = 0x10; // Hashtable
		constexpr auto bucket = 0x18; // int
		constexpr auto version = 0x1c; // int
		constexpr auto current = 0x20; // bool
		constexpr auto getObjectRetType = 0x24; // int
		constexpr auto currentKey = 0x28; // object
		constexpr auto currentValue = 0x30; // object
	}

	namespace n_StaticMultipleLOD { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto isDestroyed = 0x1c; // bool
		constexpr auto GeneratedGrid = 0x1d; // bool
		constexpr auto SkipFrustum = 0x1e; // bool
		constexpr auto LOD0 = 0x20; // List(CustomRenderer)
		constexpr auto LOD0ScreenHeight = 0x28; // float
		constexpr auto LOD1 = 0x30; // List(CustomRenderer)
		constexpr auto LOD1ScreenHeight = 0x38; // float
		constexpr auto LOD2 = 0x40; // List(CustomRenderer)
		constexpr auto LOD2ScreenHeight = 0x48; // float
		constexpr auto LOD3 = 0x50; // List(CustomRenderer)
		constexpr auto LOD3ScreenHeight = 0x58; // float
		constexpr auto ScreenHeight = 0x5c; // float
		constexpr auto m_radius = 0x60; // float
		constexpr auto m_radiusSqr = 0x64; // float
		constexpr auto m_activeLOD = 0x68; // int
		constexpr auto m_targetLOD = 0x6c; // int
		constexpr auto m_position = 0x70; // Vector3
		constexpr auto m_lod1_exist = 0x7c; // bool
		constexpr auto m_lod2_exist = 0x7d; // bool
		constexpr auto m_lod3_exist = 0x7e; // bool
		constexpr auto includeFrustum = 0x7f; // bool
	}

	namespace n_SchemaElementDecl { // : SchemaDeclBase
		constexpr auto attdefs = 0x60; // Dictionary(XmlQualifiedName, SchemaAttDef)
		constexpr auto defaultAttdefs = 0x68; // List(IDtdDefaultAttributeInfo)
		constexpr auto isIdDeclared = 0x70; // bool
		constexpr auto hasNonCDataAttribute = 0x71; // bool
		constexpr auto hasRequiredAttribute = 0x72; // bool
		constexpr auto isNotationDeclared = 0x73; // bool
		constexpr auto prohibitedAttributes = 0x78; // Dictionary(XmlQualifiedName, XmlQualifiedName)
		constexpr auto contentValidator = 0x80; // ContentValidator
		constexpr auto anyAttribute = 0x88; // XmlSchemaAnyAttribute
	}

	namespace n_VFXInputMouseBinder { // : VFXBinderBase
		constexpr auto m_MouseLeftClickProperty = 0x20; // ExposedProperty
		constexpr auto m_MouseRightClickProperty = 0x28; // ExposedProperty
		constexpr auto m_PositionProperty = 0x30; // ExposedProperty
		constexpr auto m_VelocityProperty = 0x38; // ExposedProperty
		constexpr auto Target = 0x40; // Camera
		constexpr auto Distance = 0x48; // float
		constexpr auto SetVelocity = 0x4c; // bool
		constexpr auto CheckLeftClick = 0x4d; // bool
		constexpr auto CheckRightClick = 0x4e; // bool
		constexpr auto m_PreviousPosition = 0x50; // Vector3
	}

	namespace n_DepthOfField { // : VolumeComponent
		constexpr auto mode = 0x38; // DepthOfFieldModeParameter
		constexpr auto gaussianStart = 0x40; // MinFloatParameter
		constexpr auto gaussianEnd = 0x48; // MinFloatParameter
		constexpr auto gaussianMaxRadius = 0x50; // ClampedFloatParameter
		constexpr auto highQualitySampling = 0x58; // BoolParameter
		constexpr auto focusDistance = 0x60; // MinFloatParameter
		constexpr auto aperture = 0x68; // ClampedFloatParameter
		constexpr auto focalLength = 0x70; // ClampedFloatParameter
		constexpr auto bladeCount = 0x78; // ClampedIntParameter
		constexpr auto bladeCurvature = 0x80; // ClampedFloatParameter
		constexpr auto bladeRotation = 0x88; // ClampedFloatParameter
	}

	namespace n_ConnectionManager {
		constexpr auto (Interface)k__BackingField = 0x10; // IConnectionManager
		constexpr auto (ConnectionInfo)k__BackingField = 0x18; // ConnectionInfo
		constexpr auto Connected = 0x2d0; // bool
		constexpr auto Connecting = 0x2d1; // bool
	}

	namespace n_XmlEntity { // : XmlNode
		constexpr auto publicId = 0x18; // string
		constexpr auto systemId = 0x20; // string
		constexpr auto notationName = 0x28; // string
		constexpr auto name = 0x30; // string
		constexpr auto unparsedReplacementStr = 0x38; // string
		constexpr auto baseURI = 0x40; // string
		constexpr auto lastChild = 0x48; // XmlLinkedNode
		constexpr auto childrenFoliating = 0x50; // bool
	}

	namespace n_HMACSHA384 { // : HMAC
		constexpr auto m_useLegacyBlockSize = 0x68; // bool
	}

	namespace n_Mainmenu_LanguagesItem { // : MonoBehaviour
		constexpr auto Panel = 0x18; // RawImage
		constexpr auto Texture = 0x20; // RawImage
		constexpr auto Loading = 0x28; // GameObject
		constexpr auto Name = 0x30; // TextMeshProUGUI
		constexpr auto Auth = 0x38; // TextMeshProUGUI
		constexpr auto Lang = 0x40; // LanguageHeader
		constexpr auto button = 0x48; // GraphicRevertedButton
	}

	namespace n_SelfRotator { // : MonoBehaviour
		constexpr auto RandomStart = 0x18; // bool
		constexpr auto XRandomless = 0x1c; // Vector2
		constexpr auto YRandomless = 0x24; // Vector2
		constexpr auto ZRandomless = 0x2c; // Vector2
		constexpr auto RotateType = 0x34; // ObjectRotatorType
		constexpr auto XSpeed = 0x38; // float
		constexpr auto YSpeed = 0x3c; // float
		constexpr auto ZSpeed = 0x40; // float
		constexpr auto stored = 0x44; // Vector3
	}

	namespace n_Frontline { // : GameplayMode
		constexpr auto Layers = 0x48; // FrontlineLayer[]
		constexpr auto RoundTime = 0x50; // RoundTimer
		constexpr auto NonBaseFlagCount = 0x58; // int
		constexpr auto TicketBleedPerFlag = 0x5c; // int
		constexpr auto mLast50TicketsLeftFlag = 0x60; // bool
		constexpr auto mLast10TicketsLeftFlag = 0x61; // bool
		constexpr auto mLastTicketBleed = 0x64; // float
		constexpr auto mActiveTeamAStep = 0x68; // int
		constexpr auto mActiveTeamBStep = 0x6c; // int
		constexpr auto mLastActiveTeamAStep = 0x70; // int
		constexpr auto mLastActiveTeamBStep = 0x74; // int
		constexpr auto mQuadUpdateCounter = 0x78; // int
	}

	namespace n_LuxLWRP_HelpBtn { // : PropertyAttribute
		constexpr auto URL = 0x18; // string
	}

	namespace n_TextureCurve { // : IDisposable
		constexpr auto (length)k__BackingField = 0x10; // int
		constexpr auto m_Loop = 0x14; // bool
		constexpr auto m_ZeroValue = 0x18; // float
		constexpr auto m_Range = 0x1c; // float
		constexpr auto m_Curve = 0x20; // AnimationCurve
		constexpr auto m_LoopingCurve = 0x28; // AnimationCurve
		constexpr auto m_Texture = 0x30; // Texture2D
		constexpr auto m_IsCurveDirty = 0x38; // bool
		constexpr auto m_IsTextureDirty = 0x39; // bool
	}

	namespace n_Light2D { // : MonoBehaviour
		constexpr auto m_LightType = 0x18; // Light2D.LightType
		constexpr auto m_PreviousLightType = 0x1c; // Light2D.LightType
		constexpr auto m_BlendStyleIndex = 0x20; // int
		constexpr auto m_FalloffIntensity = 0x24; // float
		constexpr auto m_Color = 0x28; // Color
		constexpr auto m_Intensity = 0x38; // float
		constexpr auto m_LightVolumeOpacity = 0x3c; // float
		constexpr auto m_ApplyToSortingLayers = 0x40; // int[]
		constexpr auto m_LightCookieSprite = 0x48; // Sprite
		constexpr auto m_UseNormalMap = 0x50; // bool
		constexpr auto m_LightOrder = 0x54; // int
		constexpr auto m_AlphaBlendOnOverlap = 0x58; // bool
		constexpr auto m_PreviousLightOrder = 0x5c; // int
		constexpr auto m_PreviousBlendStyleIndex = 0x60; // int
		constexpr auto m_PreviousLightVolumeOpacity = 0x64; // float
		constexpr auto m_PreviousLightCookieSpriteExists = 0x68; // bool
		constexpr auto m_PreviousLightCookieSprite = 0x70; // Sprite
		constexpr auto m_Mesh = 0x78; // Mesh
		constexpr auto m_LightCullingIndex = 0x80; // int
		constexpr auto m_LocalBounds = 0x84; // Bounds
		constexpr auto m_ShadowIntensity = 0x9c; // float
		constexpr auto m_ShadowVolumeIntensity = 0xa0; // float
		constexpr auto m_PointLightInnerAngle = 0xa4; // float
		constexpr auto m_PointLightOuterAngle = 0xa8; // float
		constexpr auto m_PointLightInnerRadius = 0xac; // float
		constexpr auto m_PointLightOuterRadius = 0xb0; // float
		constexpr auto m_PointLightDistance = 0xb4; // float
		constexpr auto m_PointLightQuality = 0xb8; // Light2D.PointLightQuality
		constexpr auto m_ShapeLightParametricSides = 0xbc; // int
		constexpr auto m_ShapeLightParametricAngleOffset = 0xc0; // float
		constexpr auto m_ShapeLightParametricRadius = 0xc4; // float
		constexpr auto m_ShapeLightFalloffSize = 0xc8; // float
		constexpr auto m_ShapeLightFalloffOffset = 0xcc; // Vector2
		constexpr auto m_ShapePath = 0xd8; // Vector3[]
		constexpr auto m_PreviousShapeLightFalloffSize = 0xe0; // float
		constexpr auto m_PreviousShapeLightParametricSides = 0xe4; // int
		constexpr auto m_PreviousShapeLightParametricAngleOffset = 0xe8; // float
		constexpr auto m_PreviousShapeLightParametricRadius = 0xec; // float
		constexpr auto m_PreviousShapeLightFalloffOffset = 0xf0; // Vector2
	}

	namespace n_PaniniProjection { // : VolumeComponent
		constexpr auto distance = 0x38; // ClampedFloatParameter
		constexpr auto cropToFit = 0x40; // ClampedFloatParameter
	}

	namespace n_ProceduralMask {
		constexpr auto mask = 0x10; // Texture2D
		constexpr auto shape = 0x18; // SpawnShape
		constexpr auto brushFalloff = 0x1c; // float
		constexpr auto brushStrength = 0x20; // float
		constexpr auto noiseType = 0x24; // NoiseType
		constexpr auto fractal = 0x28; // FractalNoiseCPU
		constexpr auto rangeMin = 0x30; // float
		constexpr auto rangeMax = 0x34; // float
		constexpr auto seed = 0x38; // int
		constexpr auto octaves = 0x3c; // int
		constexpr auto frequency = 0x40; // float
		constexpr auto lacunarity = 0x44; // float
		constexpr auto persistence = 0x48; // float
		constexpr auto fractalNoise = 0x4c; // bool
		constexpr auto remapMin = 0x50; // float
		constexpr auto remapMax = 0x54; // float
		constexpr auto invert = 0x58; // bool
	}

	namespace n_RepaintData {
		constexpr auto (currentOffset)k__BackingField = 0x10; // Matrix4x4
		constexpr auto (repaintEvent)k__BackingField = 0x50; // Event
	}

	namespace n_BinaryMethodReturn {
		constexpr auto returnValue = 0x10; // object
		constexpr auto args = 0x18; // object[]
		constexpr auto callContext = 0x20; // object
		constexpr auto argTypes = 0x28; // Type[]
		constexpr auto bArgsPrimitive = 0x30; // bool
		constexpr auto messageEnum = 0x34; // MessageEnum
		constexpr auto returnType = 0x38; // Type
	}

	namespace n_RushUISounds { // : MonoBehaviour
		constexpr auto OnPlantingSound = 0x18; // AudioSource
		constexpr auto PlantSounds = 0x20; // AudioClip[]
		constexpr auto OnRushObjecivePlanted = 0x28; // AudioClip[]
		constexpr auto OnRushObjectiveDefused = 0x30; // AudioClip[]
		constexpr auto OnRushObjeciveDestroyed = 0x38; // AudioClip[]
		constexpr auto OnLayerEnd = 0x40; // AudioClip[]
		constexpr auto OnNewLayer = 0x48; // AudioClip[]
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
	}

	namespace n_GameplayModeUI { // : MonoBehaviour
		constexpr auto (GamemodeObject)k__BackingField = 0x18; // GameplayMode
	}

	namespace n_GridLayoutGroup { // : LayoutGroup
		constexpr auto m_StartCorner = 0x58; // GridLayoutGroup.Corner
		constexpr auto m_StartAxis = 0x5c; // GridLayoutGroup.Axis
		constexpr auto m_CellSize = 0x60; // Vector2
		constexpr auto m_Spacing = 0x68; // Vector2
		constexpr auto m_Constraint = 0x70; // GridLayoutGroup.Constraint
		constexpr auto m_ConstraintCount = 0x74; // int
	}

	namespace n_TimerThread.TimerNode { // : TimerThread.Timer
		constexpr auto m_TimerState = 0x18; // TimerThread.TimerNode.TimerState
		constexpr auto m_Callback = 0x20; // TimerThread.Callback
		constexpr auto m_Context = 0x28; // object
		constexpr auto m_QueueLock = 0x30; // object
		constexpr auto next = 0x38; // TimerThread.TimerNode
		constexpr auto prev = 0x40; // TimerThread.TimerNode
	}

	namespace n_AspectRatioFitter { // : UIBehaviour
		constexpr auto m_AspectMode = 0x18; // AspectRatioFitter.AspectMode
		constexpr auto m_AspectRatio = 0x1c; // float
		constexpr auto m_Rect = 0x20; // RectTransform
		constexpr auto m_DelayedSetDirty = 0x28; // bool
		constexpr auto m_Tracker = 0x29; // DrivenRectTransformTracker
	}

	namespace n_GUILayoutUtility.LayoutCache {
		constexpr auto topLevel = 0x10; // GUILayoutGroup
		constexpr auto layoutGroups = 0x18; // GenericStack
		constexpr auto windows = 0x20; // GUILayoutGroup
	}

	namespace n_RushBaseWorldMap { // : MapWorldBehaviour
		constexpr auto (Base)k__BackingField = 0x40; // RushBase
		constexpr auto (MapUI)k__BackingField = 0x48; // RushBaseUIMap
		constexpr auto mIsInited = 0x50; // bool
	}

	namespace n_OverlayBehaviour.Map {
		constexpr auto MapRect = 0x10; // RectTransform
		constexpr auto Overlay = 0x18; // Transform
		constexpr auto DeployScreen = 0x20; // Transform
		constexpr auto inDeploy = 0x28; // bool
	}

	namespace n_RushSpawnPointUIMap { // : MapUIBehaviour
		constexpr auto BaseRawIamge = 0x60; // RawImage
		constexpr auto BaseLabelText = 0x68; // TextMeshProUGUI
		constexpr auto HoverImage = 0x70; // CanvasGroup
		constexpr auto (SpawnPoint)k__BackingField = 0x78; // RushSpawnPoint
		constexpr auto mHoverImageRect = 0x80; // RectTransform
		constexpr auto mHoverImageSize = 0x88; // float
		constexpr auto mIsMyBase = 0x8c; // bool
	}

	namespace n_VFXMultiplePositionBinder { // : VFXBinderBase
		constexpr auto PositionMapProperty = 0x20; // ExposedProperty
		constexpr auto PositionCountProperty = 0x28; // ExposedProperty
		constexpr auto Targets = 0x30; // GameObject[]
		constexpr auto EveryFrame = 0x38; // bool
		constexpr auto positionMap = 0x40; // Texture2D
		constexpr auto count = 0x48; // int
	}

	namespace n_UIResources { // : ScriptableObject
		constexpr auto VideoSettings = 0x18; // VideoSettings
		constexpr auto Global = 0x20; // GlobalUI
		constexpr auto Icons = 0x28; // IconsUI
	}

	namespace n_GimBvhDataArray {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_StackTrace {
		constexpr auto frames = 0x10; // StackFrame[]
		constexpr auto captured_traces = 0x18; // StackTrace[]
		constexpr auto debug_info = 0x20; // bool
	}

	namespace n_RushBeaconTargetUI { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (WorldBeacon)k__BackingField = 0x20; // RushBeacon
		constexpr auto (FrameNumber)k__BackingField = 0x28; // int
		constexpr auto mCanvas = 0x30; // CanvasGroup
		constexpr auto mRect = 0x38; // RectTransform
		constexpr auto mScreenViewport = 0x40; // Vector3
		constexpr auto mWorldPosition = 0x4c; // Vector3
		constexpr auto mAlpha = 0x58; // float
	}

	namespace n_MeshCombiner {
		constexpr auto BatchMaterial = 0x10; // Material
		constexpr auto isBatched = 0x18; // bool
		constexpr auto MainBuffer_uint8 = 0x20; // byte[]
		constexpr auto TriangleBuffer_uint16 = 0x28; // ushort[]
		constexpr auto mainBufferPosition = 0x30; // int
		constexpr auto triangleBufferPosition = 0x34; // int
		constexpr auto currentVertexCount = 0x38; // int
		constexpr auto currentTriangleCount = 0x3c; // int
	}

	namespace n_RemoteTurretBehaviour { // : SeatBehaviour
		constexpr auto Item = 0x48; // Turret
		constexpr auto YAxis = 0x50; // Transform
		constexpr auto XAxis = 0x58; // Transform
		constexpr auto ShotPoint = 0x60; // Transform
		constexpr auto ShellPoint = 0x68; // Transform
		constexpr auto ShotPointActual = 0x70; // Transform
		constexpr auto Camera = 0x78; // Transform
		constexpr auto LocalObj = 0x80; // GameObject
		constexpr auto (Ammo)k__BackingField = 0x88; // int
		constexpr auto Accuracy = 0x90; // WeaponAccuracy
		constexpr auto vehicle = 0x98; // VehicleInstance
		constexpr auto LastShot = 0xa0; // float
		constexpr auto LocalInputAngles = 0xa4; // Vector2
		constexpr auto LocalRemoteAngles = 0xac; // Vector2
		constexpr auto LocalRemoteAnglesCurrent = 0xb4; // Vector2
		constexpr auto LocalRemoteYaxisRotation = 0xbc; // Quaternion
		constexpr auto LocalRemoteXaxisRotation = 0xcc; // Quaternion
		constexpr auto moveFlagX = 0xdc; // bool
		constexpr auto moveFlagY = 0xdd; // bool
		constexpr auto zoom = 0xe0; // int
		constexpr auto postEffect = 0xe4; // float
		constexpr auto firstShot = 0xe8; // float
		constexpr auto lastZoom = 0xec; // float
	}

	namespace n_SelectableGroup { // : MonoBehaviour
		constexpr auto Selectables = 0x18; // List(GameObject)
		constexpr auto _selectables = 0x20; // List(ISelectable)
	}

	namespace n_TrackColorAttribute { // : Attribute
		constexpr auto m_Color = 0x10; // Color
	}

	namespace n_Focusable { // : CallbackEventHandler
		constexpr auto (focusable)k__BackingField = 0x18; // bool
		constexpr auto isIMGUIContainer = 0x19; // bool
	}

	namespace n_ManifestBuilder {
		constexpr auto opcodeTab = 0x10; // Dictionary(int, string)
		constexpr auto taskTab = 0x18; // Dictionary(int, string)
		constexpr auto keywordTab = 0x20; // Dictionary(ulong, string)
		constexpr auto mapsTab = 0x28; // Dictionary(string, Type)
		constexpr auto stringTab = 0x30; // Dictionary(string, string)
		constexpr auto sb = 0x38; // StringBuilder
		constexpr auto events = 0x40; // StringBuilder
		constexpr auto templates = 0x48; // StringBuilder
		constexpr auto resources = 0x50; // ResourceManager
		constexpr auto flags = 0x58; // EventManifestOptions
		constexpr auto errors = 0x60; // IList(string)
		constexpr auto perEventByteArrayArgIndices = 0x68; // Dictionary(string, List(int))
		constexpr auto eventName = 0x70; // string
		constexpr auto numParams = 0x78; // int
		constexpr auto byteArrArgIndices = 0x80; // List(int)
	}

	namespace n_SerializationObjectManager {
		constexpr auto m_objectSeenTable = 0x10; // Hashtable
		constexpr auto m_onSerializedHandler = 0x18; // SerializationEventHandler
		constexpr auto m_context = 0x20; // StreamingContext
	}

	namespace n_OpusException { // : Exception
		constexpr auto _statusCode = 0x88; // OpusStatusCode
	}

	namespace n_XmlNameEx { // : XmlName
		constexpr auto flags = 0x48; // byte
		constexpr auto memberType = 0x50; // XmlSchemaSimpleType
		constexpr auto schemaType = 0x58; // XmlSchemaType
		constexpr auto decl = 0x60; // object
	}

	namespace n_DesignerAttribute { // : Attribute
		constexpr auto designerTypeName = 0x10; // string
		constexpr auto designerBaseTypeName = 0x18; // string
	}

	namespace n_GameScreen_RepairTool { // : MonoBehaviour
		constexpr auto GearRect = 0x18; // RectTransform
		constexpr auto HpRect = 0x20; // RectTransform
		constexpr auto HpCanvas = 0x28; // CanvasGroup
		constexpr auto HPValue = 0x30; // RectTransform
		constexpr auto HPPossibleValue = 0x38; // RectTransform
		constexpr auto Turn = 0x40; // bool
		constexpr auto canvas = 0x48; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
	}

	namespace n_RegexRunner {
		constexpr auto runtextbeg = 0x10; // int
		constexpr auto runtextend = 0x14; // int
		constexpr auto runtextstart = 0x18; // int
		constexpr auto runtext = 0x20; // string
		constexpr auto runtextpos = 0x28; // int
		constexpr auto runtrack = 0x30; // int[]
		constexpr auto runtrackpos = 0x38; // int
		constexpr auto runstack = 0x40; // int[]
		constexpr auto runstackpos = 0x48; // int
		constexpr auto runcrawl = 0x50; // int[]
		constexpr auto runcrawlpos = 0x58; // int
		constexpr auto runtrackcount = 0x5c; // int
		constexpr auto runmatch = 0x60; // Match
		constexpr auto runregex = 0x68; // Regex
		constexpr auto timeout = 0x70; // int
		constexpr auto ignoreTimeout = 0x74; // bool
		constexpr auto timeoutOccursAt = 0x78; // int
		constexpr auto timeoutChecksToSkip = 0x7c; // int
	}

	namespace n_XPathNodeList { // : XmlNodeList
		constexpr auto list = 0x10; // List(XmlNode)
		constexpr auto nodeIterator = 0x18; // XPathNodeIterator
		constexpr auto done = 0x20; // bool
	}

	namespace n_SRDescriptionAttribute { // : DescriptionAttribute
		constexpr auto isReplaced = 0x18; // bool
	}

	namespace n_VoiceManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnSettingsUpdate = 0x20; // VoiceManager.SettingsUpdateHandler
	}

	namespace n_CollectionBase { // : IList
		constexpr auto list = 0x10; // ArrayList
	}

	namespace n_MagazineInstanceBehaviour { // : MonoBehaviour
		constexpr auto (lifeTime)k__BackingField = 0x18; // float
		constexpr auto (inPool)k__BackingField = 0x1c; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x20; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x24; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x28; // bool
		constexpr auto MagazineID = 0x2c; // int
		constexpr auto BoxCollider = 0x30; // BoxCollider
		constexpr auto isServerSide = 0x38; // bool
		constexpr auto stream = 0x40; // Stream
		constexpr auto streamingController = 0x48; // StreamUpdater
		constexpr auto colliderActive = 0x50; // bool
		constexpr auto clientPosition = 0x58; // SharedObject(Vector3)
		constexpr auto clientRotation = 0x60; // SharedObject(Quaternion)
		constexpr auto client2Server = 0x68; // Vector3
		constexpr auto lastStream = 0x74; // float
		constexpr auto rigidShouldEnabled = 0x78; // bool
		constexpr auto shouldColliderActive = 0x79; // bool
		constexpr auto mRigidbody = 0x80; // Rigidbody
		constexpr auto mRigidbodyInterpolation = 0x88; // RigidbodyInterpolationBehaviour
		constexpr auto mRigidbodyExist = 0x90; // bool
		constexpr auto lastPlay = 0x94; // float
	}

	namespace n_XmlDocumentType { // : XmlLinkedNode
		constexpr auto name = 0x20; // string
		constexpr auto publicId = 0x28; // string
		constexpr auto systemId = 0x30; // string
		constexpr auto internalSubset = 0x38; // string
		constexpr auto namespaces = 0x40; // bool
		constexpr auto entities = 0x48; // XmlNamedNodeMap
		constexpr auto notations = 0x50; // XmlNamedNodeMap
		constexpr auto schemaInfo = 0x58; // SchemaInfo
	}

	namespace n_Structure.FallingStructure {
		constexpr auto KillZones = 0x10; // ManagedBoxCollider[]
		constexpr auto Start = 0x18; // float
		constexpr auto End = 0x1c; // float
	}

	namespace n_TransparentSettingsPass { // : ScriptableRenderPass
		constexpr auto m_shouldReceiveShadows = 0x68; // bool
	}

	namespace n_ExceptionHandlingClause {
		constexpr auto catch_type = 0x10; // Type
		constexpr auto filter_offset = 0x18; // int
		constexpr auto flags = 0x1c; // ExceptionHandlingClauseOptions
		constexpr auto try_offset = 0x20; // int
		constexpr auto try_length = 0x24; // int
		constexpr auto handler_offset = 0x28; // int
		constexpr auto handler_length = 0x2c; // int
	}

	namespace n_CollisionWorld { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _broadphase = 0x18; // BroadphaseInterface
		constexpr auto _collisionObjectArray = 0x20; // AlignedCollisionObjectArray
		constexpr auto _debugDrawer = 0x28; // IDebugDraw
		constexpr auto _dispatcher = 0x30; // Dispatcher
		constexpr auto _dispatchInfo = 0x38; // DispatcherInfo
	}

	namespace n_TabForTypeOfBiome {
		constexpr auto selected = 0x10; // bool
		constexpr auto typeList = 0x18; // List(TypeOfBiome)
		constexpr auto name = 0x20; // string
	}

	namespace n_NetView { // : MonoBehaviour
		constexpr auto SynchronizeTransform = 0x18; // bool
		constexpr auto RegisterAsDefaultSceneObject = 0x19; // bool
		constexpr auto UseSendMessage = 0x1a; // bool
		constexpr auto NetworkAwakeReceivers = 0x20; // UnityEvent
		constexpr auto (IsInitialized)k__BackingField = 0x28; // bool
		constexpr auto (PrefabName)k__BackingField = 0x30; // string
		constexpr auto (IsSceneObject)k__BackingField = 0x38; // bool
		constexpr auto (IsReplicated)k__BackingField = 0x39; // bool
		constexpr auto (NetworkID)k__BackingField = 0x3a; // ushort
		constexpr auto (OwnerSteamID)k__BackingField = 0x40; // ulong
		constexpr auto (Owner)k__BackingField = 0x48; // NetworkClient
		constexpr auto (IsMine)k__BackingField = 0x50; // bool
		constexpr auto (RPCBuffers)k__BackingField = 0x58; // NetView.RpcBuffers
		constexpr auto (SupplyBox)k__BackingField = 0x60; // SupplyBox
		constexpr auto (PlayerNetworkComponent)k__BackingField = 0x68; // PlayerNetwork
		constexpr auto (VehicleComponent)k__BackingField = 0x70; // VehicleInstance
		constexpr auto (ReplicateGadgetComponent)k__BackingField = 0x78; // ReplicaGadget
		constexpr auto (DroneComponent)k__BackingField = 0x80; // DroneInstance
		constexpr auto mAwakeCalledFlag = 0x88; // bool
		constexpr auto mIsDestroyedFlag = 0x89; // bool
	}

	namespace n_CookieContainer {
		constexpr auto m_domainTable = 0x10; // Hashtable
		constexpr auto m_maxCookieSize = 0x18; // int
		constexpr auto m_maxCookies = 0x1c; // int
		constexpr auto m_maxCookiesPerDomain = 0x20; // int
		constexpr auto m_count = 0x24; // int
		constexpr auto m_fqdnMyDomain = 0x28; // string
	}

	namespace n_DSACryptoServiceProvider { // : DSA
		constexpr auto store = 0x20; // KeyPairPersistence
		constexpr auto persistKey = 0x28; // bool
		constexpr auto persisted = 0x29; // bool
		constexpr auto privateKeyExportable = 0x2a; // bool
		constexpr auto m_disposed = 0x2b; // bool
		constexpr auto dsa = 0x30; // DSAManaged
	}

	namespace n_XPathParser.ParamInfo {
		constexpr auto ftype = 0x10; // Function.FunctionType
		constexpr auto minargs = 0x14; // int
		constexpr auto maxargs = 0x18; // int
		constexpr auto argTypes = 0x20; // XPathResultType[]
	}

	namespace n_Tokenizer.StringMaker {
		constexpr auto aStrings = 0x10; // string[]
		constexpr auto cStringsMax = 0x18; // uint
		constexpr auto cStringsUsed = 0x1c; // uint
		constexpr auto _outStringBuilder = 0x20; // StringBuilder
		constexpr auto _outChars = 0x28; // char[]
		constexpr auto _outIndex = 0x30; // int
	}

	namespace n_InvokableCall { // : BaseInvokableCall
		constexpr auto Delegate = 0x10; // UnityAction
	}

	namespace n_RuntimeInitializeOnLoadMethodAttribute { // : PreserveAttribute
		constexpr auto m_LoadType = 0x10; // RuntimeInitializeLoadType
	}

	namespace n_EventSourceCreatedEventArgs { // : EventArgs
		constexpr auto (EventSource)k__BackingField = 0x10; // EventSource
	}

	namespace n_RegexCharClass.SingleRange {
		constexpr auto _first = 0x10; // char
		constexpr auto _last = 0x12; // char
	}

	namespace n_VehicleVisualGUI { // : MonoBehaviour
		constexpr auto SpottedGUI = 0x18; // MeshRenderer
		constexpr auto (Vehicle)k__BackingField = 0x20; // VehicleInstance
		constexpr auto mWasSpotted = 0x28; // bool
	}

	namespace n_TransformState {
		constexpr auto localPosition = 0x10; // Vector3
		constexpr auto localRotation = 0x1c; // Quaternion
	}

	namespace n_XmlEntityReference { // : XmlLinkedNode
		constexpr auto name = 0x20; // string
		constexpr auto lastChild = 0x28; // XmlLinkedNode
	}

	namespace n_RayResultCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _addSingleResult = 0x18; // RayResultCallback.AddSingleResultUnmanagedDelegate
		constexpr auto _needsCollision = 0x20; // RayResultCallback.NeedsCollisionUnmanagedDelegate
	}

	namespace n_PhysicsRaycaster { // : BaseRaycaster
		constexpr auto m_EventCamera = 0x20; // Camera
		constexpr auto m_EventMask = 0x28; // LayerMask
		constexpr auto m_MaxRayIntersections = 0x2c; // int
		constexpr auto m_LastMaxRayIntersections = 0x30; // int
		constexpr auto m_Hits = 0x38; // RaycastHit[]
	}

	namespace n_ArgInfo {
		constexpr auto _paramMap = 0x10; // int[]
		constexpr auto _inoutArgCount = 0x18; // int
		constexpr auto _method = 0x20; // MethodBase
	}

	namespace n_Positions {
		constexpr auto positions = 0x10; // ArrayList
	}

	namespace n_DebugUI.Vector3Field { // : DebugUI.Field(Vector3)
		constexpr auto incStep = 0x50; // float
		constexpr auto incStepMult = 0x54; // float
		constexpr auto decimals = 0x58; // int
	}

	namespace n_ResourceFallbackManager { // : IEnumerable(CultureInfo)
		constexpr auto m_startingCulture = 0x10; // CultureInfo
		constexpr auto m_neutralResourcesCulture = 0x18; // CultureInfo
		constexpr auto m_useParents = 0x20; // bool
	}

	namespace n_DynamicPropertyCollection {
		constexpr auto _properties = 0x10; // ArrayList
	}

	namespace n_ArrayList.ArrayListEnumeratorSimple { // : IEnumerator
		constexpr auto list = 0x10; // ArrayList
		constexpr auto index = 0x18; // int
		constexpr auto version = 0x1c; // int
		constexpr auto currentElement = 0x20; // object
		constexpr auto isArrayList = 0x28; // bool
	}

	namespace n_Process { // : Component
		constexpr auto haveProcessId = 0x28; // bool
		constexpr auto processId = 0x2c; // int
		constexpr auto haveProcessHandle = 0x30; // bool
		constexpr auto m_processHandle = 0x38; // SafeProcessHandle
		constexpr auto isRemoteMachine = 0x40; // bool
		constexpr auto machineName = 0x48; // string
		constexpr auto m_processAccess = 0x50; // int
		constexpr auto threads = 0x58; // ProcessThreadCollection
		constexpr auto modules = 0x60; // ProcessModuleCollection
		constexpr auto haveWorkingSetLimits = 0x68; // bool
		constexpr auto havePriorityClass = 0x69; // bool
		constexpr auto startInfo = 0x70; // ProcessStartInfo
		constexpr auto watchForExit = 0x78; // bool
		constexpr auto watchingForExit = 0x79; // bool
		constexpr auto onExited = 0x80; // EventHandler
		constexpr auto exited = 0x88; // bool
		constexpr auto exitCode = 0x8c; // int
		constexpr auto signaled = 0x90; // bool
		constexpr auto haveExitTime = 0x91; // bool
		constexpr auto raisedOnExited = 0x92; // bool
		constexpr auto registeredWaitHandle = 0x98; // RegisteredWaitHandle
		constexpr auto waitHandle = 0xa0; // WaitHandle
		constexpr auto synchronizingObject = 0xa8; // ISynchronizeInvoke
		constexpr auto standardOutput = 0xb0; // StreamReader
		constexpr auto standardInput = 0xb8; // StreamWriter
		constexpr auto standardError = 0xc0; // StreamReader
		constexpr auto disposed = 0xc8; // bool
		constexpr auto outputStreamReadMode = 0xcc; // Process.StreamReadMode
		constexpr auto errorStreamReadMode = 0xd0; // Process.StreamReadMode
		constexpr auto inputStreamReadMode = 0xd4; // Process.StreamReadMode
		constexpr auto output = 0xd8; // AsyncStreamReader
		constexpr auto error = 0xe0; // AsyncStreamReader
		constexpr auto process_name = 0xe8; // string
	}

	namespace n_MD2Managed { // : MD2
		constexpr auto state = 0x28; // byte[]
		constexpr auto checksum = 0x30; // byte[]
		constexpr auto buffer = 0x38; // byte[]
		constexpr auto count = 0x40; // int
		constexpr auto x = 0x48; // byte[]
	}

	namespace n_StaticSupplyBox { // : MonoBehaviour
		constexpr auto RuntimeID = 0x18; // byte
		constexpr auto lastRequest = 0x1c; // float
	}

	namespace n_ContentValidator {
		constexpr auto contentType = 0x10; // XmlSchemaContentType
		constexpr auto isOpen = 0x14; // bool
		constexpr auto isEmptiable = 0x15; // bool
	}

	namespace n_Mesh { // : MeshUtils.Pooled(Mesh)
		constexpr auto _vHead = 0x10; // MeshUtils.Vertex
		constexpr auto _fHead = 0x18; // MeshUtils.Face
		constexpr auto _eHead = 0x20; // MeshUtils.Edge
		constexpr auto _eHeadSym = 0x28; // MeshUtils.Edge
	}

	namespace n_AssemblyDescriptionAttribute { // : Attribute
		constexpr auto m_description = 0x10; // string
	}

	namespace n_FlashlightBehaviour { // : AttachmentAddon
		constexpr auto (FastListIndexA)k__BackingField = 0x40; // int
		constexpr auto (TickIndex3)k__BackingField = 0x44; // int
		constexpr auto SideRail = 0x48; // SideRail
		constexpr auto ActiveOnAim = 0x50; // bool
		constexpr auto Light = 0x58; // DistanceBasedLights
		constexpr auto RaycastSphere = 0x60; // SphereSource
		constexpr auto mLastAiming = 0x68; // bool
		constexpr auto Intentsity = 0x6c; // float
		constexpr auto MaxRange = 0x70; // float
		constexpr auto MinRange = 0x74; // float
		constexpr auto DotMin = 0x78; // float
		constexpr auto ProjectionMax = 0x7c; // float
	}

	namespace n_EditorBrowsableAttribute { // : Attribute
		constexpr auto browsableState = 0x10; // EditorBrowsableState
	}

	namespace n_DebugUIHandlerPersistentCanvas { // : MonoBehaviour
		constexpr auto panel = 0x18; // RectTransform
		constexpr auto valuePrefab = 0x20; // RectTransform
		constexpr auto m_Items = 0x28; // List(DebugUIHandlerValue)
	}

	namespace n_TestRange_Movement { // : MonoBehaviour
		constexpr auto PointA = 0x18; // Vector3
		constexpr auto PointB = 0x24; // Vector3
		constexpr auto Speed = 0x30; // float
		constexpr auto Rotate = 0x34; // bool
		constexpr auto PositionOffset = 0x38; // Vector3
		constexpr auto RotationOffset = 0x44; // Vector3
		constexpr auto mDistance = 0x50; // float
		constexpr auto mTimeSpeed = 0x54; // float
		constexpr auto mPreviousPosition = 0x58; // Vector3
	}

	namespace n_NoInterpClampedFloatParameter { // : VolumeParameter(float)
		constexpr auto min = 0x20; // float
		constexpr auto max = 0x24; // float
	}

	namespace n_AlignedAnchorArrayEnumerator { // : IEnumerator(Anchor)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedAnchorArray
	}

	namespace n_LuxLWRP_Wind { // : MonoBehaviour
		constexpr auto UpdateInEditMode = 0x18; // bool
		constexpr auto Resolution = 0x1c; // RTSize
		constexpr auto Format = 0x20; // RTFormat
		constexpr auto WindBaseTex = 0x28; // Texture
		constexpr auto WindCompositeShader = 0x30; // Shader
		constexpr auto Grass = 0x38; // float
		constexpr auto Foliage = 0x3c; // float
		constexpr auto BaseWindSpeed = 0x40; // float
		constexpr auto SizeInWorldSpace = 0x44; // float
		constexpr auto speedLayer0 = 0x48; // float
		constexpr auto speedLayer1 = 0x4c; // float
		constexpr auto speedLayer2 = 0x50; // float
		constexpr auto GrassGustTiling = 0x54; // int
		constexpr auto GrassGustSpeed = 0x58; // float
		constexpr auto LayerToMixWith = 0x5c; // GustMixLayer
		constexpr auto JitterFrequency = 0x60; // float
		constexpr auto JitterHighFrequency = 0x64; // float
		constexpr auto WindRenderTexture = 0x68; // RenderTexture
		constexpr auto m_material = 0x70; // Material
		constexpr auto uvs = 0x78; // Vector2
		constexpr auto uvs1 = 0x80; // Vector2
		constexpr auto uvs2 = 0x88; // Vector2
		constexpr auto uvs3 = 0x90; // Vector2
		constexpr auto WindRTPID = 0x98; // int
		constexpr auto trans = 0xa0; // Transform
		constexpr auto windZone = 0xa8; // WindZone
		constexpr auto mainWind = 0xb0; // float
		constexpr auto turbulence = 0xb4; // float
		constexpr auto LuxLWRPWindDirSizePID = 0xb8; // int
		constexpr auto LuxLWRPWindStrengthMultipliersPID = 0xbc; // int
		constexpr auto LuxLWRPSinTimePID = 0xc0; // int
		constexpr auto LuxLWRPGustPID = 0xc4; // int
		constexpr auto LuxLWRPGustMixLayerPID = 0xc8; // int
		constexpr auto LuxLWRPWindUVsPID = 0xcc; // int
		constexpr auto LuxLWRPWindUVs1PID = 0xd0; // int
		constexpr auto LuxLWRPWindUVs2PID = 0xd4; // int
		constexpr auto LuxLWRPWindUVs3PID = 0xd8; // int
		constexpr auto previousRTSize = 0xdc; // int
		constexpr auto previousRTFormat = 0xe0; // int
		constexpr auto WindDirectionSize = 0xe4; // Vector4
	}

	namespace n_CADMethodCallMessage { // : CADMessageBase
		constexpr auto _uri = 0x38; // string
	}

	namespace n_ToolItem { // : ScriptableObject
		constexpr auto ToolID = 0x18; // ushort
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto LangugeID = 0x20; // int
		constexpr auto Icon = 0x28; // Sprite
		constexpr auto AmmoCount = 0x30; // Sprite
		constexpr auto Type = 0x38; // ToolItem.ToolTypes
		constexpr auto CanBeSupplied = 0x3c; // bool
		constexpr auto stats = 0x40; // ToolStats
		constexpr auto Offsets = 0x48; // ToolThpOffsets
		constexpr auto mCacheNameTool = 0x50; // string
		constexpr auto mCacheToolNameSet = 0x58; // bool
	}

	namespace n_PlayerStart.NationStartCharacter {
		constexpr auto SquadLeader = 0x10; // PlayerStart.NationStartCharacter.StartCharacter
		constexpr auto Assault = 0x18; // PlayerStart.NationStartCharacter.StartCharacter
		constexpr auto Medic = 0x20; // PlayerStart.NationStartCharacter.StartCharacter
		constexpr auto Engineer = 0x28; // PlayerStart.NationStartCharacter.StartCharacter
		constexpr auto Support = 0x30; // PlayerStart.NationStartCharacter.StartCharacter
		constexpr auto Recon = 0x38; // PlayerStart.NationStartCharacter.StartCharacter
		constexpr auto ArmorMaterial = 0x40; // Material
		constexpr auto DesertArmorTexture = 0x48; // Texture2D
		constexpr auto ForestArmorTexture = 0x50; // Texture2D
	}

	namespace n_FileUnserializer {
		constexpr auto Values = 0x10; // Dictionary(string, string)
	}

	namespace n_XPathDocumentElementChildIterator { // : XPathDocumentBaseIterator
		constexpr auto localName = 0x28; // string
		constexpr auto namespaceUri = 0x30; // string
	}

	namespace n_MapDayNight { // : ScriptableObject
		constexpr auto Lighting = 0x18; // MapLightingSettings
		constexpr auto Rotation = 0x20; // MapDirectionLightRotation
	}

	namespace n_PrimitiveArray {
		constexpr auto code = 0x10; // InternalPrimitiveTypeE
		constexpr auto booleanA = 0x18; // bool[]
		constexpr auto charA = 0x20; // char[]
		constexpr auto doubleA = 0x28; // double[]
		constexpr auto int16A = 0x30; // short[]
		constexpr auto int32A = 0x38; // int[]
		constexpr auto int64A = 0x40; // long[]
		constexpr auto sbyteA = 0x48; // sbyte[]
		constexpr auto singleA = 0x50; // float[]
		constexpr auto uint16A = 0x58; // ushort[]
		constexpr auto uint32A = 0x60; // uint[]
		constexpr auto uint64A = 0x68; // ulong[]
	}

	namespace n_TankStreamUpdater {
		constexpr auto lastPosition = 0x10; // Vector3
		constexpr auto lastRotation = 0x1c; // Quaternion
		constexpr auto lastEngine = 0x2c; // float
		constexpr auto lastShell = 0x30; // float
		constexpr auto lastSmoke = 0x34; // float
		constexpr auto lastMachineGun = 0x38; // float
		constexpr auto lastSent = 0x3c; // float
	}

	namespace n_SimplexNoiseCPU { // : NoiseCPU
		constexpr auto (Perm)k__BackingField = 0x28; // PermutationTable
	}

	namespace n_BinaryObjectWithMapTyped {
		constexpr auto binaryHeaderEnum = 0x10; // BinaryHeaderEnum
		constexpr auto objectId = 0x14; // int
		constexpr auto name = 0x18; // string
		constexpr auto numMembers = 0x20; // int
		constexpr auto memberNames = 0x28; // string[]
		constexpr auto binaryTypeEnumA = 0x30; // BinaryTypeEnum[]
		constexpr auto typeInformationA = 0x38; // object[]
		constexpr auto memberAssemIds = 0x40; // int[]
		constexpr auto assemId = 0x48; // int
	}

	namespace n_MonoList { // : TextAsset
		constexpr auto AttributeByList = 0x18; // Dictionary(Type, MonoItem[])
		constexpr auto idToType = 0x20; // Dictionary(ushort, Type)
		constexpr auto typeToId = 0x28; // Dictionary(Type, ushort)
	}

	namespace n_DigestHeaderParser {
		constexpr auto header = 0x10; // string
		constexpr auto length = 0x18; // int
		constexpr auto pos = 0x1c; // int
		constexpr auto values = 0x20; // string[]
	}

	namespace n_CaseInsensitiveHashCodeProvider { // : IHashCodeProvider
		constexpr auto m_text = 0x10; // TextInfo
	}

	namespace n_CompassUI { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto (TickIndex0)k__BackingField = 0x1c; // int
		constexpr auto Elements = 0x20; // CompassUIElement[]
		constexpr auto ElementPrefab = 0x28; // GameObject
		constexpr auto ElementCount = 0x30; // int
		constexpr auto Width = 0x34; // float
		constexpr auto Angle = 0x38; // float
		constexpr auto Scale = 0x3c; // bool
		constexpr auto Fade = 0x3d; // bool
		constexpr auto BearingText = 0x40; // TextMeshProUGUI
		constexpr auto BigSize = 0x48; // int
		constexpr auto SmallSize = 0x4c; // int
		constexpr auto Bearing = 0x50; // float
		constexpr auto latestEngineBearing = 0x54; // float
		constexpr auto lastString = 0x58; // string
		constexpr auto lastFont = 0x60; // int
		constexpr auto latestThreadBearing = 0x64; // float
	}

	namespace n_InternalDecoderBestFitFallback { // : DecoderFallback
		constexpr auto encoding = 0x18; // Encoding
		constexpr auto arrayBestFit = 0x20; // char[]
		constexpr auto cReplacement = 0x28; // char
	}

	namespace n_TriggerTransfer { // : MonoBehaviour
		constexpr auto Receiver = 0x18; // MonoBehaviour
		constexpr auto _target = 0x20; // ITriggerReceiver
	}

	namespace n_Water { // : MonoBehaviour
		constexpr auto TopWater = 0x18; // Material
		constexpr auto BottomWater = 0x20; // Material
		constexpr auto Up = 0x28; // Vector3
		constexpr auto Position = 0x34; // Vector3
		constexpr auto Rotation = 0x40; // Quaternion
		constexpr auto InverseRotation = 0x50; // Quaternion
		constexpr auto UpSigned = 0x60; // float
		constexpr auto Min = 0x64; // Vector3
		constexpr auto Max = 0x70; // Vector3
		constexpr auto WorldToLocal = 0x7c; // Matrix4x4
		constexpr auto isFloatable = 0xbc; // bool
		constexpr auto DrawEditorGizmos = 0xbd; // bool
		constexpr auto height = 0xc0; // float
	}

	namespace n_ThreadPoolWorkQueue {
		constexpr auto queueHead = 0x10; // ThreadPoolWorkQueue.QueueSegment
		constexpr auto queueTail = 0x18; // ThreadPoolWorkQueue.QueueSegment
		constexpr auto numOutstandingThreadRequests = 0x20; // int
	}

	namespace n_AsyncProtocolRequest {
		constexpr auto (Parent)k__BackingField = 0x10; // MobileAuthenticatedStream
		constexpr auto (RunSynchronously)k__BackingField = 0x18; // bool
		constexpr auto (UserResult)k__BackingField = 0x1c; // int
		constexpr auto Started = 0x20; // int
		constexpr auto RequestedSize = 0x24; // int
		constexpr auto WriteRequested = 0x28; // int
		constexpr auto locker = 0x30; // object
	}

	namespace n_Claymore { // : GadgetManager
		constexpr auto ClaymorePrefab = 0xd0; // GameObject
		constexpr auto etaReady = 0xd8; // float
		constexpr auto etaPut = 0xdc; // float
		constexpr auto etaDraw = 0xe0; // float
	}

	namespace n_GameModeManager { // : MonoBehaviour
		constexpr auto TeamACamera = 0x18; // GameObject
		constexpr auto TeamBCamera = 0x20; // GameObject
		constexpr auto GameEndCamera = 0x28; // GameObject
		constexpr auto TeamDeathMatch = 0x30; // GameModeSizes
		constexpr auto AdvanceAndSecure = 0x38; // GameModeSizes
		constexpr auto Rush = 0x40; // GameModeSizes
		constexpr auto Conquest = 0x48; // GameModeSizes
		constexpr auto InfantryConquest = 0x50; // GameModeSizes
		constexpr auto Domination = 0x58; // GameModeSizes
		constexpr auto Elimination = 0x60; // GameModeSizes
		constexpr auto Frontline = 0x68; // GameModeSizes
		constexpr auto GunGameFFA = 0x70; // GameModeSizes
		constexpr auto FreeForAll = 0x78; // GameModeSizes
		constexpr auto GunGameTDM = 0x80; // GameModeSizes
		constexpr auto SuicideRush = 0x88; // GameModeSizes
		constexpr auto CatchGame = 0x90; // GameModeSizes
		constexpr auto mDefaultTeamACameraPoint = 0x98; // PositionAndQuaternationStruct
		constexpr auto mDefaultTeamBCameraPoint = 0xb4; // PositionAndQuaternationStruct
		constexpr auto mLockedTeam = 0xd0; // Team
		constexpr auto mDeadZoneColliders = 0xd8; // List(MeshRenderer)
	}

	namespace n_LeafNode { // : SyntaxTreeNode
		constexpr auto pos = 0x10; // int
	}

	namespace n_TokenHashValue {
		constexpr auto tokenString = 0x10; // string
		constexpr auto tokenType = 0x18; // TokenType
		constexpr auto tokenValue = 0x1c; // int
	}

	namespace n_CustomGradient {
		constexpr auto blendMode = 0x10; // CustomGradient.BlendMode
		constexpr auto keys = 0x18; // List(CustomGradient.ColourKey)
	}

	namespace n_VehicleHitbox {
		constexpr auto Bounds = 0x10; // Bounds
		constexpr auto DamageMultiplier = 0x28; // float
	}

	namespace n_SecureString { // : IDisposable
		constexpr auto length = 0x10; // int
		constexpr auto disposed = 0x14; // bool
		constexpr auto data = 0x18; // byte[]
	}

	namespace n_InheritedStylesData { // : IEquatable(InheritedStylesData)
		constexpr auto color = 0x10; // StyleColor
		constexpr auto font = 0x28; // StyleFont
		constexpr auto fontSize = 0x40; // StyleLength
		constexpr auto unityFontStyle = 0x50; // StyleInt
		constexpr auto unityTextAlign = 0x5c; // StyleInt
		constexpr auto visibility = 0x68; // StyleInt
		constexpr auto whiteSpace = 0x74; // StyleInt
	}

	namespace n_CompiledXpathExpr.UndefinedXsltContext { // : XsltContext
		constexpr auto nsResolver = 0x50; // IXmlNamespaceResolver
	}

	namespace n_CADObjRef {
		constexpr auto objref = 0x10; // ObjRef
		constexpr auto SourceDomain = 0x18; // int
		constexpr auto TypeInfo = 0x20; // byte[]
	}

	namespace n_OidCollection { // : ICollection
		constexpr auto m_list = 0x10; // ArrayList
	}

	namespace n_IPEndPoint { // : EndPoint
		constexpr auto m_Address = 0x10; // IPAddress
		constexpr auto m_Port = 0x18; // int
	}

	namespace n_GroupEnumerator { // : IEnumerator
		constexpr auto _rgc = 0x10; // GroupCollection
		constexpr auto _curindex = 0x18; // int
	}

	namespace n_SuicideRush { // : GameplayMode
		constexpr auto RoundTime = 0x48; // RoundTimer
		constexpr auto SpawnPoints = 0x50; // Transform[]
	}

	namespace n_PlayerNetwork { // : MonoBehaviour
		constexpr auto TransformIndex = 0x18; // int
		constexpr auto IsMine = 0x1c; // bool
		constexpr auto RoomID = 0x1d; // byte
		constexpr auto FPManager = 0x20; // FPController
		constexpr auto TPManager = 0x28; // THPController
		constexpr auto State = 0x30; // PlayerNetworkState
		constexpr auto (FastListIndexA)k__BackingField = 0x38; // int
		constexpr auto (FastListIndexB)k__BackingField = 0x3c; // int
		constexpr auto mLastPersonDownedYou = 0x40; // NetworkClient
		constexpr auto mLastPersonToolID = 0x48; // ushort
		constexpr auto mLastShotBody = 0x4a; // PlayerBody
		constexpr auto mLastDownReason = 0x4b; // PlayerNetwork.ReasonOfDamage
		constexpr auto mAssistHolder = 0x50; // Dictionary(ulong, ValueTuple(float, ushort))
		constexpr auto mPullTime = 0x58; // float
		constexpr auto mBeingPulled = 0x5c; // bool
		constexpr auto mPullPosition = 0x60; // Vector3
		constexpr auto view = 0x70; // NetView
		constexpr auto controller = 0x78; // PlayerController
		constexpr auto map = 0x80; // MapPlayerWorldObject
		constexpr auto mIsRegistered = 0x88; // bool
		constexpr auto stream = 0x90; // Stream
		constexpr auto etaToFadeIn = 0x98; // float
		constexpr auto lastGroundedPosition = 0x9c; // Vector3
		constexpr auto groundedLock = 0xa8; // bool
		constexpr auto lastCloseShot = 0xac; // float
		constexpr auto armor_aimingSpeed = 0xb0; // float
		constexpr auto armor_runningSpeed = 0xb4; // float
		constexpr auto lastStanding = 0xb8; // PlayerStand
		constexpr auto frameCounter = 0xc0; // FrameCounter
		constexpr auto server1SecondCounter = 0xc8; // float
		constexpr auto mVaultCorutine = 0xd0; // Coroutine
		constexpr auto mClampedPosition = 0xd8; // Vector3
		constexpr auto mClampPosition = 0xe4; // bool
		constexpr auto mLastObserveCheck = 0xe8; // float
		constexpr auto mLastRecevedShot = 0xec; // float
		constexpr auto serverSide_Bleeding = 0xf0; // Coroutine
		constexpr auto ragdollSyncFrameCounter = 0xf8; // int
		constexpr auto lastReceivedStreamTime = 0xfc; // float
		constexpr auto lastReceivedStreamDelta = 0x100; // float
		constexpr auto lastNetworkDelta = 0x104; // Vector3
	}

	namespace n_AngularJoint.IControl { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
		constexpr auto _prepare = 0x20; // AngularJoint.IControl.PrepareUnmanagedDelegate
		constexpr auto _speed = 0x28; // AngularJoint.IControl.SpeedUnmanagedDelegate
	}

	namespace n_TimerThread.Queue {
		constexpr auto m_DurationMilliseconds = 0x10; // int
	}

	namespace n_NativeNameAttribute { // : Attribute
		constexpr auto (Name)k__BackingField = 0x10; // string
	}

	namespace n_WearableStats {
		constexpr auto customArmor = 0x10; // bool
		constexpr auto customMovement = 0x11; // bool
		constexpr auto customLoadout = 0x12; // bool
		constexpr auto armorHP = 0x14; // int
		constexpr auto runSpeedMultiplier = 0x18; // float
		constexpr auto aimDownSightSpeedMultiplier = 0x1c; // float
		constexpr auto staminaMultiplier = 0x20; // float
		constexpr auto primaryExtra = 0x24; // int
		constexpr auto secondaryExtra = 0x28; // int
		constexpr auto firstAidExtra = 0x2c; // int
		constexpr auto toolAExtra = 0x30; // int
		constexpr auto toolBExtra = 0x34; // int
		constexpr auto throwableExtra = 0x38; // int
	}

	namespace n_Ucs4Decoder { // : Decoder
		constexpr auto lastBytes = 0x20; // byte[]
		constexpr auto lastBytesCount = 0x28; // int
	}

	namespace n_OpenFileDialog.OpenFileName {
		constexpr auto structSize = 0x10; // int
		constexpr auto dlgOwner = 0x18; // IntPtr
		constexpr auto instance = 0x20; // IntPtr
		constexpr auto filter = 0x28; // string
		constexpr auto customFilter = 0x30; // string
		constexpr auto maxCustFilter = 0x38; // int
		constexpr auto filterIndex = 0x3c; // int
		constexpr auto file = 0x40; // string
		constexpr auto maxFile = 0x48; // int
		constexpr auto fileTitle = 0x50; // string
		constexpr auto maxFileTitle = 0x58; // int
		constexpr auto initialDir = 0x60; // string
		constexpr auto title = 0x68; // string
		constexpr auto flags = 0x70; // int
		constexpr auto fileOffset = 0x74; // short
		constexpr auto fileExtension = 0x76; // short
		constexpr auto defExt = 0x78; // string
		constexpr auto custData = 0x80; // IntPtr
		constexpr auto hook = 0x88; // IntPtr
		constexpr auto templateName = 0x90; // string
		constexpr auto reservedPtr = 0x98; // IntPtr
		constexpr auto reservedInt = 0xa0; // int
		constexpr auto flagsEx = 0xa4; // int
	}

	namespace n_Convex2DShape { // : ConvexShape
		constexpr auto _childShape = 0x28; // ConvexShape
	}

	namespace n_VoronoiNoiseCPU { // : NoiseCPU
		constexpr auto (Distance)k__BackingField = 0x28; // VORONOI_DISTANCE
		constexpr auto (Combination)k__BackingField = 0x2c; // VORONOI_COMBINATION
		constexpr auto (Perm)k__BackingField = 0x30; // PermutationTable
	}

	namespace n_Win32RegistryApi { // : IRegistryApi
		constexpr auto NativeBytesPerCharacter = 0x10; // int
	}

	namespace n_APCBehaviour.StreamUpdater {
		constexpr auto lastPosition = 0x10; // Vector3
		constexpr auto lastRotation = 0x1c; // Quaternion
		constexpr auto lastEngine = 0x2c; // float
		constexpr auto lastShell = 0x30; // float
		constexpr auto lastSent = 0x34; // float
	}

	namespace n_AuthenticatedStream { // : Stream
		constexpr auto _InnerStream = 0x28; // Stream
		constexpr auto _LeaveStreamOpen = 0x30; // bool
	}

	namespace n_TMP_ColorGradient { // : ScriptableObject
		constexpr auto colorMode = 0x18; // ColorMode
		constexpr auto topLeft = 0x1c; // Color
		constexpr auto topRight = 0x2c; // Color
		constexpr auto bottomLeft = 0x3c; // Color
		constexpr auto bottomRight = 0x4c; // Color
	}

	namespace n_MemberReference {
		constexpr auto idRef = 0x10; // int
	}

	namespace n_PropertyAttribute { // : Attribute
		constexpr auto (order)k__BackingField = 0x10; // int
	}

	namespace n_DebrisSoundManager { // : MonoBehaviour
		constexpr auto mRegisteredBricks = 0x18; // FastListB(DebrisSoundManager.mBrickRegister)
		constexpr auto mRegisteredBrickCollisions = 0x20; // FastListA(DebrisSoundManager.mBrickRegister)
		constexpr auto mCollisionQueue = 0x28; // Queue(Vector3)
		constexpr auto collisionRemoveQueue = 0x30; // Queue(DebrisSoundManager.mBrickRegister)
		constexpr auto breakRemoveQueue = 0x38; // Queue(DebrisSoundManager.mBrickRegister)
	}

	namespace n_SliderBehaviour { // : OptionsElement
		constexpr auto DefaultValue = 0x20; // float
		constexpr auto Slider = 0x28; // Slider
		constexpr auto AffectedBySettings = 0x30; // bool
		constexpr auto Ultra = 0x34; // float
		constexpr auto High = 0x38; // float
		constexpr auto Medium = 0x3c; // float
		constexpr auto Low = 0x40; // float
		constexpr auto Potato = 0x44; // float
	}

	namespace n_ManifestBasedResourceGroveler { // : IResourceGroveler
		constexpr auto _mediator = 0x10; // ResourceManager.ResourceManagerMediator
	}

	namespace n_CertificateHandler {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_DefaultDependencyAttribute { // : Attribute
		constexpr auto loadHint = 0x10; // LoadHint
	}

	namespace n_RotationTransform {
		constexpr auto axis = 0x10; // RotationAxis
		constexpr auto tr = 0x18; // Transform
		constexpr auto eular = 0x20; // Vector3
	}

	namespace n_TriangleIndexVertexArray { // : StridingMeshInterface
		constexpr auto _meshes = 0x18; // List(IndexedMesh)
		constexpr auto _initialMesh = 0x20; // IndexedMesh
		constexpr auto _indexedMeshArray = 0x28; // AlignedIndexedMeshArray
	}

	namespace n_GameScreen_Infantry.Magazine {
		constexpr auto Obj = 0x10; // GameObject
		constexpr auto Value = 0x18; // Image
		constexpr auto lastValue = 0x20; // float
		constexpr auto isActive = 0x24; // bool
	}

	namespace n_Stream.ReadWriteTask { // : Task(int)
		constexpr auto _isRead = 0x58; // bool
		constexpr auto _stream = 0x60; // Stream
		constexpr auto _buffer = 0x68; // byte[]
		constexpr auto _offset = 0x70; // int
		constexpr auto _count = 0x74; // int
		constexpr auto _callback = 0x78; // AsyncCallback
		constexpr auto _context = 0x80; // ExecutionContext
	}

	namespace n_ProjectileHook { // : Projectile
		constexpr auto Renderer = 0xd8; // TrailRenderer
		constexpr auto trailStart = 0xe0; // bool
	}

	namespace n_SecurityParser { // : SmallXmlParser
		constexpr auto root = 0x68; // SecurityElement
		constexpr auto current = 0x70; // SecurityElement
		constexpr auto stack = 0x78; // Stack
	}

	namespace n_Socket { // : IDisposable
		constexpr auto is_closed = 0x10; // bool
		constexpr auto is_listening = 0x11; // bool
		constexpr auto useOverlappedIO = 0x12; // bool
		constexpr auto linger_timeout = 0x14; // int
		constexpr auto addressFamily = 0x18; // AddressFamily
		constexpr auto socketType = 0x1c; // SocketType
		constexpr auto protocolType = 0x20; // ProtocolType
		constexpr auto m_Handle = 0x28; // SafeSocketHandle
		constexpr auto seed_endpoint = 0x30; // EndPoint
		constexpr auto ReadSem = 0x38; // SemaphoreSlim
		constexpr auto WriteSem = 0x40; // SemaphoreSlim
		constexpr auto is_blocking = 0x48; // bool
		constexpr auto is_bound = 0x49; // bool
		constexpr auto is_connected = 0x4a; // bool
		constexpr auto m_IntCleanedUp = 0x4c; // int
		constexpr auto connect_in_progress = 0x50; // bool
	}

	namespace n_TMP_Asset { // : ScriptableObject
		constexpr auto m_InstanceID = 0x18; // int
		constexpr auto hashCode = 0x1c; // int
		constexpr auto material = 0x20; // Material
		constexpr auto materialHashCode = 0x28; // int
	}

	namespace n_TMP_MaterialManager.MaskingMaterial {
		constexpr auto baseMaterial = 0x10; // Material
		constexpr auto stencilMaterial = 0x18; // Material
		constexpr auto count = 0x20; // int
		constexpr auto stencilID = 0x24; // int
	}

	namespace n_NamespaceList {
		constexpr auto type = 0x10; // NamespaceList.ListType
		constexpr auto set = 0x18; // Hashtable
		constexpr auto targetNamespace = 0x20; // string
	}

	namespace n_MemberHolder {
		constexpr auto memberType = 0x10; // Type
		constexpr auto context = 0x18; // StreamingContext
	}

	namespace n_BadImageFormatException { // : SystemException
		constexpr auto _fileName = 0x88; // string
		constexpr auto _fusionLog = 0x90; // string
	}

	namespace n_ThrownSmokeGrenade { // : ThrownObject
		constexpr auto ParticleAliveTime = 0x98; // float
		constexpr auto TrigerTime = 0x9c; // float
	}

	namespace n_ThreadLock {
		constexpr auto mSemaphore = 0x10; // SemaphoreSlim
	}

	namespace n_Rope { // : Climbable
		constexpr auto m_lineRenderer = 0x78; // LineRenderer
		constexpr auto m_collider = 0x80; // BoxCollider
		constexpr auto m_existanceProvider = 0x88; // ExistanceProvider
		constexpr auto m_destroyInvokeHandle = 0x90; // InvokeHandle
	}

	namespace n_Nature {
		constexpr auto NatureThunder = 0x10; // Nature.Thunder
	}

	namespace n_RushBase { // : MonoBehaviour
		constexpr auto Side = 0x18; // RushSide
		constexpr auto mNetView = 0x20; // NetView
		constexpr auto mMap = 0x28; // RushBaseWorldMap
		constexpr auto (Position)k__BackingField = 0x30; // Vector3
	}

	namespace n_MibIPGlobalProperties { // : UnixIPGlobalProperties
		constexpr auto StatisticsFile = 0x10; // string
		constexpr auto StatisticsFileIPv6 = 0x18; // string
		constexpr auto TcpFile = 0x20; // string
		constexpr auto Tcp6File = 0x28; // string
		constexpr auto UdpFile = 0x30; // string
		constexpr auto Udp6File = 0x38; // string
	}

	namespace n_ToolStats {
		constexpr auto DamageOnInfantryBody = 0x10; // float
		constexpr auto DamageOnInfantryArmor = 0x14; // float
		constexpr auto DamageOnLightArmoredVehicles = 0x18; // float
		constexpr auto DamageOnHeavyHeavyVehicles = 0x1c; // float
		constexpr auto DamageEnvironment = 0x20; // float
		constexpr auto DamageToBuildables = 0x24; // float
		constexpr auto TriggerableExplosionRadius = 0x28; // float
		constexpr auto InfantryExplosionRadius = 0x2c; // float
		constexpr auto EnvironmentExplosionRadius = 0x30; // float
		constexpr auto VehicleExplosionRadius = 0x34; // float
		constexpr auto DropOf = 0x38; // AnimationCurve
		constexpr auto BulletVelocity = 0x40; // int
		constexpr auto Gravity = 0x44; // float
		constexpr auto Drag = 0x48; // float
		constexpr auto ProjectileSize = 0x4c; // float
		constexpr auto ProjectileVisualSize = 0x50; // float
	}

	namespace n_PostProcessPass.MaterialLibrary {
		constexpr auto stopNaN = 0x10; // Material
		constexpr auto subpixelMorphologicalAntialiasing = 0x18; // Material
		constexpr auto gaussianDepthOfField = 0x20; // Material
		constexpr auto bokehDepthOfField = 0x28; // Material
		constexpr auto cameraMotionBlur = 0x30; // Material
		constexpr auto paniniProjection = 0x38; // Material
		constexpr auto bloom = 0x40; // Material
		constexpr auto uber = 0x48; // Material
		constexpr auto finalPass = 0x50; // Material
	}

	namespace n_ConquestSettings { // : GamemodeSettingsBase
		constexpr auto (CONQ_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (CONQ_FlagCaptureTime)k__BackingField = 0x150; // GamemodeVariable(int)
		constexpr auto (CONQ_Tickets)k__BackingField = 0x158; // GamemodeVariable(int)
	}

	namespace n_DebugUIHandlerCanvas { // : MonoBehaviour
		constexpr auto m_DebugTreeState = 0x18; // int
		constexpr auto m_PrefabsMap = 0x20; // Dictionary(Type, Transform)
		constexpr auto panelPrefab = 0x28; // Transform
		constexpr auto prefabs = 0x30; // List(DebugUIPrefabBundle)
		constexpr auto m_UIPanels = 0x38; // List(DebugUIHandlerPanel)
		constexpr auto m_SelectedPanel = 0x40; // int
		constexpr auto m_SelectedWidget = 0x48; // DebugUIHandlerWidget
		constexpr auto m_CurrentQueryPath = 0x50; // string
	}

	namespace n_IntSizedArray { // : ICloneable
		constexpr auto objects = 0x10; // int[]
		constexpr auto negObjects = 0x18; // int[]
	}

	namespace n_PhotoCaptureFrame { // : IDisposable
		constexpr auto m_NativePtr = 0x10; // IntPtr
		constexpr auto (dataLength)k__BackingField = 0x18; // int
		constexpr auto (hasLocationData)k__BackingField = 0x1c; // bool
		constexpr auto (pixelFormat)k__BackingField = 0x20; // CapturePixelFormat
	}

	namespace n_XPathAncestorQuery { // : CacheAxisQuery
		constexpr auto matchSelf = 0x60; // bool
	}

	namespace n_OverlappingPairCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_FlirReticle { // : AttachmentAddon
		constexpr auto constantUpdate = 0x40; // bool
		constexpr auto material = 0x48; // Material
		constexpr auto lastFrameRendered = 0x50; // float
		constexpr auto usePreviousFrame = 0x54; // bool
		constexpr auto previousFrame = 0x58; // RenderTexture
		constexpr auto FriendlyColor = 0x60; // Color
		constexpr auto EnemyColor = 0x70; // Color
	}

	namespace n_RenderObjectsPass { // : ScriptableRenderPass
		constexpr auto renderQueueType = 0x68; // RenderQueueType
		constexpr auto m_FilteringSettings = 0x6c; // FilteringSettings
		constexpr auto m_CameraSettings = 0x88; // RenderObjects.CustomCameraSettings
		constexpr auto m_ProfilerTag = 0x90; // string
		constexpr auto m_ProfilingSampler = 0x98; // ProfilingSampler
		constexpr auto (overrideMaterial)k__BackingField = 0xa0; // Material
		constexpr auto (overrideMaterialPassIndex)k__BackingField = 0xa8; // int
		constexpr auto m_ShaderTagIdList = 0xb0; // List(ShaderTagId)
		constexpr auto m_RenderStateBlock = 0xb8; // RenderStateBlock
	}

	namespace n_XPathNodeIterator.Enumerator { // : IEnumerator
		constexpr auto original = 0x10; // XPathNodeIterator
		constexpr auto current = 0x18; // XPathNodeIterator
		constexpr auto iterationStarted = 0x20; // bool
	}

	namespace n_Stopwatch {
		constexpr auto elapsed = 0x10; // long
		constexpr auto started = 0x18; // long
		constexpr auto is_running = 0x20; // bool
	}

	namespace n_NamespaceQuery { // : BaseAxisQuery
		constexpr auto onNamespace = 0x58; // bool
	}

	namespace n_PinnedBufferMemoryStream { // : UnmanagedMemoryStream
		constexpr auto _array = 0x68; // byte[]
		constexpr auto _pinningHandle = 0x70; // GCHandle
	}

	namespace n_BootConfigData {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_Datatype_List { // : Datatype_anySimpleType
		constexpr auto itemType = 0x38; // DatatypeImplementation
		constexpr auto minListSize = 0x40; // int
	}

	namespace n_ContactResultCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _addSingleResult = 0x18; // ContactResultCallback.AddSingleResultUnmanagedDelegate
		constexpr auto _needsCollision = 0x20; // ContactResultCallback.NeedsCollisionUnmanagedDelegate
	}

	namespace n_Encoding.DefaultEncoder { // : Encoder
		constexpr auto m_encoding = 0x20; // Encoding
		constexpr auto m_hasInitializedEncoding = 0x28; // bool
		constexpr auto charLeftOver = 0x2a; // char
	}

	namespace n_ProjectileRocket { // : Projectile
		constexpr auto ExplosionPrefab = 0xd8; // GameObject
		constexpr auto TrailSmoke = 0xe0; // GameObject
		constexpr auto src = 0xe8; // AudioSource
		constexpr auto trail = 0xf0; // float
	}

	namespace n_MeshUtils.Vertex { // : MeshUtils.Pooled(MeshUtils.Vertex)
		constexpr auto _prev = 0x10; // MeshUtils.Vertex
		constexpr auto _next = 0x18; // MeshUtils.Vertex
		constexpr auto _anEdge = 0x20; // MeshUtils.Edge
		constexpr auto _coords = 0x28; // Vec3
		constexpr auto _s = 0x34; // float
		constexpr auto _t = 0x38; // float
		constexpr auto _pqHandle = 0x3c; // PQHandle
		constexpr auto _n = 0x40; // int
		constexpr auto _data = 0x48; // object
	}

	namespace n_AlignedNodeArray { // : IList(Node)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_OnlineUserInterface { // : MonoBehaviour
		constexpr auto DeployScreen = 0x18; // GameObject
		constexpr auto GameOverlay = 0x20; // GameObject
		constexpr auto _depoyScreenEnabled = 0x28; // bool
		constexpr auto _gameScreenEnabled = 0x29; // bool
	}

	namespace n_TaskScheduler {
		constexpr auto m_taskSchedulerId = 0x10; // int
	}

	namespace n_RuntimeClip { // : RuntimeClipBase
		constexpr auto m_Clip = 0x18; // TimelineClip
		constexpr auto m_Playable = 0x20; // Playable
		constexpr auto m_ParentMixer = 0x30; // Playable
	}

	namespace n_CspParameters {
		constexpr auto ProviderType = 0x10; // int
		constexpr auto ProviderName = 0x18; // string
		constexpr auto KeyContainerName = 0x20; // string
		constexpr auto KeyNumber = 0x28; // int
		constexpr auto m_flags = 0x2c; // int
	}

	namespace n_XmlCharacterData { // : XmlLinkedNode
		constexpr auto data = 0x20; // string
	}

	namespace n_NoInterpFloatRangeParameter { // : VolumeParameter(Vector2)
		constexpr auto min = 0x20; // float
		constexpr auto max = 0x24; // float
	}

	namespace n_CollisionAlgorithmConstructionInfo { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _dispatcher1 = 0x18; // Dispatcher
		constexpr auto _manifold = 0x20; // PersistentManifold
	}

	namespace n_HMACSHA512 { // : HMAC
		constexpr auto m_useLegacyBlockSize = 0x68; // bool
	}

	namespace n_PlayerStart.WeaponStartAttachments {
		constexpr auto Weapon = 0x10; // AWeapon
		constexpr auto Attachments = 0x18; // WeaponAttachmentData
	}

	namespace n_DispatcherInfo {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_ColorLookup { // : VolumeComponent
		constexpr auto texture = 0x38; // TextureParameter
		constexpr auto contribution = 0x40; // ClampedFloatParameter
	}

	namespace n_WaitForSeconds { // : YieldInstruction
		constexpr auto m_Seconds = 0x10; // float
	}

	namespace n_NativeUdpIPv4Socket { // : IDisposable
		constexpr auto m_Disposed = 0x10; // bool
		constexpr auto m_AddressCache = 0x18; // Dictionary(EndPoint, byte[])
		constexpr auto m_AddressMap = 0x20; // Dictionary(ulong, EndPoint)
		constexpr auto m_ListenAddressBase = 0x28; // byte[]
		constexpr auto m_ListenAddress = 0x30; // byte[]
		constexpr auto m_Handle = 0x38; // IntPtr
	}

	namespace n_DateTimeFormatInfoScanner {
		constexpr auto m_dateWords = 0x10; // List(string)
		constexpr auto m_ymdFlags = 0x18; // DateTimeFormatInfoScanner.FoundDatePattern
	}

	namespace n_Pool.Explosion {
		constexpr auto SmallExplosions = 0x10; // GameObject[]
		constexpr auto MediumExplosions = 0x18; // GameObject[]
		constexpr auto BigExplosions = 0x20; // GameObject[]
		constexpr auto BuildingExplosions = 0x28; // GameObject[]
		constexpr auto TankExplosions = 0x30; // GameObject[]
		constexpr auto TransportExplosions = 0x38; // GameObject[]
		constexpr auto ApcExplosions = 0x40; // GameObject[]
		constexpr auto BoatExplosions = 0x48; // GameObject[]
		constexpr auto HelicopterExplosions = 0x50; // GameObject[]
		constexpr auto VehicleImpacts = 0x58; // GameObject[]
		constexpr auto TankBlast = 0x60; // GameObject
		constexpr auto RegularExplosionBlast = 0x68; // GameObject
		constexpr auto ApcBlast = 0x70; // GameObject
	}

	namespace n_NetworkManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnMessage = 0x20; // NetworkManager.MessageHandler
		constexpr auto OnRouteUpdate = 0x28; // NetworkManager.RouteUpdateHandler
	}

	namespace n_TransformComponents {
		constexpr auto settings = 0x10; // List(TransformComponentsSettings)
	}

	namespace n___BinaryWriter {
		constexpr auto sout = 0x10; // Stream
		constexpr auto formatterTypeStyle = 0x18; // FormatterTypeStyle
		constexpr auto objectMapTable = 0x20; // Hashtable
		constexpr auto objectWriter = 0x28; // ObjectWriter
		constexpr auto dataWriter = 0x30; // BinaryWriter
		constexpr auto m_nestedObjectCount = 0x38; // int
		constexpr auto nullCount = 0x3c; // int
		constexpr auto binaryMethodCall = 0x40; // BinaryMethodCall
		constexpr auto binaryMethodReturn = 0x48; // BinaryMethodReturn
		constexpr auto binaryObject = 0x50; // BinaryObject
		constexpr auto binaryObjectWithMap = 0x58; // BinaryObjectWithMap
		constexpr auto binaryObjectWithMapTyped = 0x60; // BinaryObjectWithMapTyped
		constexpr auto binaryObjectString = 0x68; // BinaryObjectString
		constexpr auto binaryArray = 0x70; // BinaryArray
		constexpr auto byteBuffer = 0x78; // byte[]
		constexpr auto chunkSize = 0x80; // int
		constexpr auto memberPrimitiveUnTyped = 0x88; // MemberPrimitiveUnTyped
		constexpr auto memberPrimitiveTyped = 0x90; // MemberPrimitiveTyped
		constexpr auto objectNull = 0x98; // ObjectNull
		constexpr auto memberReference = 0xa0; // MemberReference
		constexpr auto binaryAssembly = 0xa8; // BinaryAssembly
	}

	namespace n_SlopeScale { // : TransformComponentsSettings
		constexpr auto uniformScaleOffset = 0x20; // bool
		constexpr auto maxSlope = 0x24; // float
		constexpr auto maxUniformScaleOffset = 0x28; // float
		constexpr auto maxScaleOffset = 0x2c; // Vector3
	}

	namespace n_Regex { // : ISerializable
		constexpr auto pattern = 0x10; // string
		constexpr auto factory = 0x18; // RegexRunnerFactory
		constexpr auto roptions = 0x20; // RegexOptions
		constexpr auto internalMatchTimeout = 0x28; // TimeSpan
		constexpr auto caps = 0x30; // Hashtable
		constexpr auto capnames = 0x38; // Hashtable
		constexpr auto capslist = 0x40; // string[]
		constexpr auto capsize = 0x48; // int
		constexpr auto runnerref = 0x50; // ExclusiveReference
		constexpr auto replref = 0x58; // SharedReference
		constexpr auto code = 0x60; // RegexCode
		constexpr auto refsInitialized = 0x68; // bool
	}

	namespace n_BrushHandlesSettings {
		constexpr auto brushHandlesType = 0x10; // BrushHandlesType
		constexpr auto drawSolidDisc = 0x14; // bool
		constexpr auto sphereColor = 0x18; // Color
		constexpr auto spherePixelWidth = 0x28; // float
		constexpr auto circleColor = 0x2c; // Color
		constexpr auto circlePixelWidth = 0x3c; // float
	}

	namespace n_VaultingSettings.ConditionLine {
		constexpr auto Forward = 0x10; // float
		constexpr auto UpDown = 0x14; // float
		constexpr auto EditorColor = 0x18; // Color
	}

	namespace n_Dbvt.ICollide { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_MasterServerConnectionPlayer.Request {
		constexpr auto ServerEP = 0x10; // EndPoint
		constexpr auto RequestSent = 0x18; // bool
		constexpr auto Content = 0x20; // Stream
		constexpr auto Callback = 0x28; // Action(Stream, Client2MasterServerCommuncation)
		constexpr auto TokenRequest = 0x30; // bool
	}

	namespace n_PrototypeInfo {
		constexpr auto prototype = 0x10; // PrototypeGameObject
		constexpr auto prefabList = 0x18; // List(ObjectInfo)
	}

	namespace n_Generic6DofSpring2Constraint { // : TypedConstraint
		constexpr auto _angularLimits = 0x38; // RotationalLimitMotor2[]
		constexpr auto _linearLimits = 0x40; // TranslationalLimitMotor2
	}

	namespace n_GameScreen_MiddleText { // : MonoBehaviour
		constexpr auto canvas = 0x18; // CanvasGroup
		constexpr auto label = 0x20; // TextMeshProUGUI
		constexpr auto time = 0x28; // float
		constexpr auto (TickIndex8)k__BackingField = 0x2c; // int
	}

	namespace n_UTF16Decoder { // : Decoder
		constexpr auto bigEndian = 0x20; // bool
		constexpr auto lastByte = 0x24; // int
	}

	namespace n_ScriptableRuntimeReflectionSystemWrapper {
		constexpr auto (implementation)k__BackingField = 0x10; // IScriptableRuntimeReflectionSystem
	}

	namespace n_BrushVisualisationSettings {
		constexpr auto visualizeMode = 0x10; // VisualizeMode
		constexpr auto brushHandlesSettings = 0x18; // BrushHandlesSettings
		constexpr auto brushMaskFiltersSettings = 0x20; // BrushMaskFiltersSettings
		constexpr auto simpleFilterSettings = 0x28; // SimpleFilterSettings
	}

	namespace n_ServerObjectTerminatorSink { // : IMessageSink
		constexpr auto _nextSink = 0x10; // IMessageSink
	}

	namespace n_WebRequest.WebProxyWrapperOpaque { // : IWebProxy
		constexpr auto webProxy = 0x10; // WebProxy
	}

	namespace n_GImpactQuantizedBvhNode { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_AlignedMaterialArray { // : IList(Material)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_CompatibleComparer { // : IEqualityComparer
		constexpr auto _comparer = 0x10; // IComparer
		constexpr auto _hcp = 0x18; // IHashCodeProvider
	}

	namespace n_ArgumentException { // : SystemException
		constexpr auto m_paramName = 0x88; // string
	}

	namespace n_Projectile { // : MonoBehaviour
		constexpr auto Register = 0x18; // ProjectileRegister
		constexpr auto (lifeTime)k__BackingField = 0x20; // float
		constexpr auto (inPool)k__BackingField = 0x24; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x28; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x2c; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x30; // bool
		constexpr auto (Mask)k__BackingField = 0x34; // int
		constexpr auto (LifeTime)k__BackingField = 0x38; // float
		constexpr auto (StartPosition)k__BackingField = 0x3c; // Vector3
		constexpr auto (SpawnTime)k__BackingField = 0x48; // float
		constexpr auto (ParentItem)k__BackingField = 0x50; // ToolItem
		constexpr auto (Stats)k__BackingField = 0x58; // ToolStats
		constexpr auto (Owner)k__BackingField = 0x60; // NetworkClient
		constexpr auto (isServerSide)k__BackingField = 0x68; // bool
		constexpr auto (isMine)k__BackingField = 0x69; // bool
		constexpr auto (FastListIndexA)k__BackingField = 0x6c; // int
		constexpr auto Transform = 0x70; // Transform
		constexpr auto mInRuntime = 0x78; // bool
		constexpr auto mLastUpdate = 0x7c; // float
		constexpr auto mVelocity = 0x80; // float
		constexpr auto mGravity = 0x84; // float
		constexpr auto mDrag = 0x88; // float
		constexpr auto mSize = 0x8c; // float
		constexpr auto mCurrentVelocity = 0x90; // Vector3
		constexpr auto mAlive = 0x9c; // float
		constexpr auto mCurrentDirection = 0xa0; // Vector3
		constexpr auto mCurrentPosition = 0xac; // Vector3
		constexpr auto mHighQualityRay = 0xb8; // bool
		constexpr auto mIsRicochetPlayed = 0xb9; // bool
		constexpr auto mDidFirstFramePassed = 0xba; // bool
		constexpr auto mRotationUpdateTick = 0xbc; // int
		constexpr auto mUpdateRate = 0xc0; // int
		constexpr auto mUpdateTick = 0xc4; // int
		constexpr auto mLastScale = 0xc8; // float
		constexpr auto mFutureCast = 0xd0; // Projectile.FutureRaycast
	}

	namespace n_QueueUserWorkItemCallback { // : IThreadPoolWorkItem
		constexpr auto callback = 0x10; // WaitCallback
		constexpr auto context = 0x18; // ExecutionContext
		constexpr auto state = 0x20; // object
	}

	namespace n_SnowComponent { // : NatureComponent
		constexpr auto Low = 0x38; // GameObject
		constexpr auto Medium = 0x40; // GameObject
		constexpr auto High = 0x48; // GameObject
		constexpr auto Ultra = 0x50; // GameObject
	}

	namespace n_InfConquestSettings { // : GamemodeSettingsBase
		constexpr auto (INFCONQ_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (INFCONQ_FlagCaptureTime)k__BackingField = 0x150; // GamemodeVariable(int)
		constexpr auto (INFCONQ_Tickets)k__BackingField = 0x158; // GamemodeVariable(int)
	}

	namespace n_InfiniteRuntimeClip { // : RuntimeElement
		constexpr auto m_Playable = 0x18; // Playable
	}

	namespace n_VideoSettings {
		constexpr auto noShadows = 0x10; // UniversalRenderPipelineAsset
		constexpr auto loadout = 0x18; // UniversalRenderPipelineAsset
		constexpr auto softEdge256 = 0x20; // UniversalRenderPipelineAsset
		constexpr auto softEdge512 = 0x28; // UniversalRenderPipelineAsset
		constexpr auto softEdge1024 = 0x30; // UniversalRenderPipelineAsset
		constexpr auto softEdge2048 = 0x38; // UniversalRenderPipelineAsset
		constexpr auto softEdge4096 = 0x40; // UniversalRenderPipelineAsset
		constexpr auto ImageEffects = 0x48; // VolumeProfile
		constexpr auto LoadoutImageEffects = 0x50; // VolumeProfile
		constexpr auto ReticleDay = 0x58; // RenderObjects
		constexpr auto ReticleNight = 0x60; // RenderObjects
	}

	namespace n_TestBoat { // : MonoBehaviour
		constexpr auto mRigid = 0x18; // Rigidbody
		constexpr auto FloatingPhysics = 0x20; // FloatingObjectPhysics
		constexpr auto Vertical = 0x28; // float
		constexpr auto Pitch = 0x2c; // float
		constexpr auto Yaw = 0x30; // float
		constexpr auto Roll = 0x34; // float
	}

	namespace n_ExplosionProfile.Range {
		constexpr auto Distance = 0x10; // float
		constexpr auto Clips = 0x18; // AudioClip[]
	}

	namespace n_ServerListElement { // : MonoBehaviour
		constexpr auto MapIcon = 0x18; // RawImage
		constexpr auto ServerName = 0x20; // TextMeshProUGUI
		constexpr auto Info = 0x28; // TextMeshProUGUI
		constexpr auto Players = 0x30; // TextMeshProUGUI
		constexpr auto Tick = 0x38; // TextMeshProUGUI
		constexpr auto Type = 0x40; // TextMeshProUGUI
		constexpr auto PingIndicator = 0x48; // RawImage
		constexpr auto Ping = 0x50; // TextMeshProUGUI
		constexpr auto btn = 0x58; // GraphicRevertedButton
		constexpr auto thisraw = 0x60; // RawImage
		constexpr auto group = 0x68; // CanvasGroup
		constexpr auto canJoin = 0x70; // bool
		constexpr auto info = 0x78; // ServerInfo
	}

	namespace n_DebrisRenderer { // : ScriptableRendererFeature
		constexpr auto settings = 0x20; // DebrisRenderer.Settings
		constexpr auto pass = 0x48; // DebrisRenderingPass
	}

	namespace n_InverseKinematicsSelf { // : MonoBehaviour
		constexpr auto Target = 0x18; // Transform
		constexpr auto upperArm = 0x20; // Transform
		constexpr auto forearm = 0x28; // Transform
		constexpr auto hand = 0x30; // Transform
		constexpr auto elbow = 0x38; // Transform
		constexpr auto uppperArm_OffsetRotation = 0x40; // Vector3
		constexpr auto forearm_OffsetRotation = 0x4c; // Vector3
		constexpr auto WorkInDebug = 0x58; // bool
		constexpr auto TargetParent = 0x60; // Transform
		constexpr auto TargetChildPos = 0x68; // Vector3
		constexpr auto angle = 0x74; // float
		constexpr auto upperArm_Length = 0x78; // float
		constexpr auto forearm_Length = 0x7c; // float
		constexpr auto arm_Length = 0x80; // float
		constexpr auto targetDistance = 0x84; // float
		constexpr auto adyacent = 0x88; // float
		constexpr auto upperArm_Length2 = 0x8c; // float
		constexpr auto forearm_Length2 = 0x90; // float
		constexpr auto up2_for2 = 0x94; // float
	}

	namespace n_DebugUIHandlerVector3 { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // UIFoldout
		constexpr auto fieldX = 0x68; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldY = 0x70; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldZ = 0x78; // DebugUIHandlerIndirectFloatField
		constexpr auto m_Field = 0x80; // DebugUI.Vector3Field
		constexpr auto m_Container = 0x88; // DebugUIHandlerContainer
	}

	namespace n_ASkin { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto LanguageID = 0x20; // int
		constexpr auto Permissions = 0x28; // Avaibility
		constexpr auto PrimaryAsset = 0x30; // Texture2D
		constexpr auto SecondaryAsset = 0x38; // Texture2D
	}

	namespace n_SerializationInfoEnumerator { // : IEnumerator
		constexpr auto m_members = 0x10; // string[]
		constexpr auto m_data = 0x18; // object[]
		constexpr auto m_types = 0x20; // Type[]
		constexpr auto m_numItems = 0x28; // int
		constexpr auto m_currItem = 0x2c; // int
		constexpr auto m_current = 0x30; // bool
	}

	namespace n_IronSight { // : IAttachment
		constexpr auto self = 0x10; // GameObject
		constexpr auto aimPoint = 0x18; // Transform
		constexpr auto parent = 0x20; // AttachmentManager
		constexpr auto index = 0x28; // LoadoutIndex
		constexpr auto (Item)k__BackingField = 0x30; // IAttachmentItem
	}

	namespace n_Exception { // : ISerializable
		constexpr auto _className = 0x10; // string
		constexpr auto _message = 0x18; // string
		constexpr auto _data = 0x20; // IDictionary
		constexpr auto _innerException = 0x28; // Exception
		constexpr auto _helpURL = 0x30; // string
		constexpr auto _stackTrace = 0x38; // object
		constexpr auto _stackTraceString = 0x40; // string
		constexpr auto _remoteStackTraceString = 0x48; // string
		constexpr auto _remoteStackIndex = 0x50; // int
		constexpr auto _dynamicMethods = 0x58; // object
		constexpr auto _HResult = 0x60; // int
		constexpr auto _source = 0x68; // string
		constexpr auto _safeSerializationManager = 0x70; // SafeSerializationManager
		constexpr auto captured_traces = 0x78; // StackTrace[]
		constexpr auto native_trace_ips = 0x80; // IntPtr[]
	}

	namespace n_FractalNoiseCPU {
		constexpr auto noiseType = 0x10; // NoiseType
		constexpr auto seed = 0x14; // int
		constexpr auto octaves = 0x18; // int
		constexpr auto frequency = 0x1c; // float
		constexpr auto (Amplitude)k__BackingField = 0x20; // float
		constexpr auto (Offset)k__BackingField = 0x24; // Vector3
		constexpr auto lacunarity = 0x30; // float
		constexpr auto persistence = 0x34; // float
		constexpr auto (Noises)k__BackingField = 0x38; // INoiseCPU[]
		constexpr auto (Amplitudes)k__BackingField = 0x40; // float[]
		constexpr auto (Frequencies)k__BackingField = 0x48; // float[]
	}

	namespace n_PlayerTeamSquadRole {
		constexpr auto Hash = 0x10; // int
		constexpr auto Team = 0x10; // Team
		constexpr auto SquadIndex = 0x11; // byte
		constexpr auto Role = 0x12; // Role
		constexpr auto Unused = 0x13; // byte
	}

	namespace n_LocalConvexResult { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
		constexpr auto _hitCollisionObject = 0x20; // CollisionObject
		constexpr auto _localShapeInfo = 0x28; // LocalShapeInfo
	}

	namespace n_PauseMenuOptions { // : MonoBehaviour
		constexpr auto GamePlay = 0x18; // MenuGamePlay
		constexpr auto Controllers = 0x20; // MenuControllers
		constexpr auto Keybindings = 0x28; // MenuKeybindings
		constexpr auto Audio = 0x30; // MenuAudio
		constexpr auto Video = 0x38; // MenuVideo
		constexpr auto ChangeTeamButton = 0x40; // GameObject
		constexpr auto SuicideButton = 0x48; // GameObject
		constexpr auto QuestionTab = 0x50; // GameObject
		constexpr auto QuestionTabLabel = 0x58; // TextMeshProUGUI
		constexpr auto (TickIndex8)k__BackingField = 0x60; // int
		constexpr auto all = 0x68; // OptionsButtonHover[]
		constexpr auto isAsking = 0x70; // bool
		constexpr auto positive = 0x78; // Action
		constexpr auto negative = 0x80; // Action
		constexpr auto done = 0x88; // Action
	}

	namespace n_HorizontallListMono { // : MonoBehaviour
		constexpr auto ConstHeight = 0x18; // int
		constexpr auto elements = 0x20; // List(RectTransform)
		constexpr auto ToRight = 0x28; // bool
		constexpr auto Spacing = 0x2c; // float
		constexpr auto lerp = 0x30; // bool
		constexpr auto lerpSpeed = 0x34; // float
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
	}

	namespace n_Dbvt.StkNN { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_AsyncReadOrWriteRequest { // : AsyncProtocolRequest
		constexpr auto (UserBuffer)k__BackingField = 0x38; // BufferOffsetSize
		constexpr auto (CurrentSize)k__BackingField = 0x40; // int
	}

	namespace n_Joint {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _refs = 0x18; // Vector3Array
	}

	namespace n_ServerCertValidationCallback.CallbackContext {
		constexpr auto request = 0x10; // object
		constexpr auto certificate = 0x18; // X509Certificate
		constexpr auto chain = 0x20; // X509Chain
		constexpr auto sslPolicyErrors = 0x28; // SslPolicyErrors
		constexpr auto result = 0x2c; // bool
	}

	namespace n_AlignedLinkArrayEnumerator { // : IEnumerator(Link)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedLinkArray
	}

	namespace n_CollisionObject { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _isDisposed = 0x18; // bool
		constexpr auto _broadphaseHandle = 0x20; // BroadphaseProxy
		constexpr auto _collisionShape = 0x28; // CollisionShape
		constexpr auto isRegisteredToWorld = 0x30; // bool
		constexpr auto (UserObject)k__BackingField = 0x38; // object
	}

	namespace n_TextInfo { // : ICloneable
		constexpr auto m_listSeparator = 0x10; // string
		constexpr auto m_isReadOnly = 0x18; // bool
		constexpr auto m_cultureName = 0x20; // string
		constexpr auto m_cultureData = 0x28; // CultureData
		constexpr auto m_textInfoName = 0x30; // string
		constexpr auto m_IsAsciiCasingSameAsInvariant = 0x38; // Nullable(bool)
		constexpr auto customCultureName = 0x40; // string
		constexpr auto m_nDataItem = 0x48; // int
		constexpr auto m_useUserOverride = 0x4c; // bool
		constexpr auto m_win32LangID = 0x50; // int
	}

	namespace n_Seat { // : MonoBehaviour
		constexpr auto ThirdPersonPosition = 0x18; // Vector3
		constexpr auto ThirdPersonEular = 0x24; // Vector3
		constexpr auto ThirdPersonScale = 0x30; // float
		constexpr auto SeatType = 0x34; // SeatType
		constexpr auto LeftHandIK = 0x38; // Transform
		constexpr auto RightHandIK = 0x40; // Transform
		constexpr auto disableVisual = 0x48; // bool
		constexpr auto Priority = 0x4c; // int
		constexpr auto EnterTime = 0x50; // float
		constexpr auto IsDriverSeat = 0x54; // bool
		constexpr auto HorizontalRange = 0x58; // float
		constexpr auto VerticalRange = 0x5c; // float
		constexpr auto WindActive = 0x60; // bool
		constexpr auto BlurActive = 0x61; // bool
		constexpr auto BlurFocusDistance = 0x64; // float
		constexpr auto BlurFocalLenght = 0x68; // float
		constexpr auto SittingAnimation = 0x6c; // SittingAnimation
		constexpr auto SpineEular = 0x70; // Vector3
		constexpr auto ShowCursor = 0x7c; // bool
		constexpr auto canBeHurtByBullet = 0x7d; // bool
		constexpr auto canBeHurtByExplosion = 0x7e; // bool
		constexpr auto SeatBehaviours = 0x80; // SeatBehaviour[]
		constexpr auto EnableFlir = 0x88; // bool
		constexpr auto Roles = 0x89; // AvailableRoles
		constexpr auto (OwnerSteamID)k__BackingField = 0x90; // ulong
		constexpr auto (Parent)k__BackingField = 0x98; // SeatManager
		constexpr auto (Index)k__BackingField = 0xa0; // int
		constexpr auto ReceiveRewards = 0xa4; // bool
	}

	namespace n_CrossAppDomainData {
		constexpr auto _ContextID = 0x10; // object
		constexpr auto _DomainID = 0x18; // int
		constexpr auto _processGuid = 0x20; // string
	}

	namespace n_LoadoutWeaponStatsManager { // : MonoBehaviour
		constexpr auto DamageBody = 0x18; // LoadoutWeaponStatsSlider
		constexpr auto DamageArmor = 0x20; // LoadoutWeaponStatsSlider
		constexpr auto DamageLightVehicle = 0x28; // LoadoutWeaponStatsSlider
		constexpr auto DamageHeavyVehicle = 0x30; // LoadoutWeaponStatsSlider
		constexpr auto VerticalRecoil = 0x38; // LoadoutWeaponStatsSlider
		constexpr auto HorizontalRecoil = 0x40; // LoadoutWeaponStatsSlider
		constexpr auto FirstShotKick = 0x48; // LoadoutWeaponStatsSlider
		constexpr auto Controll = 0x50; // LoadoutWeaponStatsSlider
		constexpr auto DrawSpeed = 0x58; // LoadoutWeaponStatsSlider
		constexpr auto Accuracy = 0x60; // LoadoutWeaponStatsSlider
		constexpr auto Firerate = 0x68; // LoadoutWeaponStatsSlider
		constexpr auto ShotSoundDistance = 0x70; // LoadoutWeaponStatsSlider
		constexpr auto MuzzleScale = 0x78; // LoadoutWeaponStatsSlider
		constexpr auto Velocity = 0x80; // LoadoutWeaponStatsSlider
		constexpr auto AimDownTime = 0x88; // LoadoutWeaponStatsSlider
		constexpr auto RunningSpeed = 0x90; // LoadoutWeaponStatsSlider
		constexpr auto BoltActionSpeed = 0x98; // LoadoutWeaponStatsSlider
		constexpr auto AutoBoltActionSpace = 0xa0; // GameObject
		constexpr auto AutoBoltAction = 0xa8; // GameObject
		constexpr auto BoltActionWhileADS = 0xb0; // GameObject
		constexpr auto Table = 0xb8; // WeaponRangeTable
		constexpr auto weapon = 0xc0; // AWeapon
	}

	namespace n_Pointer { // : ISerializable
		constexpr auto _ptr = 0x10; // void*
		constexpr auto _ptrType = 0x18; // RuntimeType
	}

	namespace n_PostProcessPass { // : ScriptableRenderPass
		constexpr auto m_Descriptor = 0x68; // RenderTextureDescriptor
		constexpr auto m_Source = 0x9c; // RenderTargetHandle
		constexpr auto m_Destination = 0xa0; // RenderTargetHandle
		constexpr auto m_Depth = 0xa4; // RenderTargetHandle
		constexpr auto m_InternalLut = 0xa8; // RenderTargetHandle
		constexpr auto m_Materials = 0xb0; // PostProcessPass.MaterialLibrary
		constexpr auto m_Data = 0xb8; // PostProcessData
		constexpr auto m_DepthOfField = 0xc0; // DepthOfField
		constexpr auto m_MotionBlur = 0xc8; // MotionBlur
		constexpr auto m_PaniniProjection = 0xd0; // PaniniProjection
		constexpr auto m_Bloom = 0xd8; // Bloom
		constexpr auto m_LensDistortion = 0xe0; // LensDistortion
		constexpr auto m_ChromaticAberration = 0xe8; // ChromaticAberration
		constexpr auto m_Vignette = 0xf0; // Vignette
		constexpr auto m_ColorLookup = 0xf8; // ColorLookup
		constexpr auto m_ColorAdjustments = 0x100; // ColorAdjustments
		constexpr auto m_Tonemapping = 0x108; // Tonemapping
		constexpr auto m_FilmGrain = 0x110; // FilmGrain
		constexpr auto m_DefaultHDRFormat = 0x118; // GraphicsFormat
		constexpr auto m_UseRGBM = 0x11c; // bool
		constexpr auto m_SMAAEdgeFormat = 0x120; // GraphicsFormat
		constexpr auto m_GaussianCoCFormat = 0x124; // GraphicsFormat
		constexpr auto m_PrevViewProjM = 0x128; // Matrix4x4
		constexpr auto m_ResetHistory = 0x168; // bool
		constexpr auto m_DitheringTextureIndex = 0x16c; // int
		constexpr auto m_MRT2 = 0x170; // RenderTargetIdentifier[]
		constexpr auto m_BokehKernel = 0x178; // Vector4[]
		constexpr auto m_BokehHash = 0x180; // int
		constexpr auto m_IsStereo = 0x184; // bool
		constexpr auto m_IsFinalPass = 0x185; // bool
		constexpr auto m_HasFinalPass = 0x186; // bool
		constexpr auto m_EnableSRGBConversionIfNeeded = 0x187; // bool
		constexpr auto m_BlitMaterial = 0x188; // Material
	}

	namespace n_XmlDocument { // : XmlNode
		constexpr auto implementation = 0x18; // XmlImplementation
		constexpr auto domNameTable = 0x20; // DomNameTable
		constexpr auto lastChild = 0x28; // XmlLinkedNode
		constexpr auto entities = 0x30; // XmlNamedNodeMap
		constexpr auto htElementIdMap = 0x38; // Hashtable
		constexpr auto htElementIDAttrDecl = 0x40; // Hashtable
		constexpr auto schemaInfo = 0x48; // SchemaInfo
		constexpr auto schemas = 0x50; // XmlSchemaSet
		constexpr auto reportValidity = 0x58; // bool
		constexpr auto actualLoadingStatus = 0x59; // bool
		constexpr auto onNodeInsertingDelegate = 0x60; // XmlNodeChangedEventHandler
		constexpr auto onNodeInsertedDelegate = 0x68; // XmlNodeChangedEventHandler
		constexpr auto onNodeRemovingDelegate = 0x70; // XmlNodeChangedEventHandler
		constexpr auto onNodeRemovedDelegate = 0x78; // XmlNodeChangedEventHandler
		constexpr auto onNodeChangingDelegate = 0x80; // XmlNodeChangedEventHandler
		constexpr auto onNodeChangedDelegate = 0x88; // XmlNodeChangedEventHandler
		constexpr auto fEntRefNodesPresent = 0x90; // bool
		constexpr auto fCDataNodesPresent = 0x91; // bool
		constexpr auto preserveWhitespace = 0x92; // bool
		constexpr auto isLoading = 0x93; // bool
		constexpr auto strDocumentName = 0x98; // string
		constexpr auto strDocumentFragmentName = 0xa0; // string
		constexpr auto strCommentName = 0xa8; // string
		constexpr auto strTextName = 0xb0; // string
		constexpr auto strCDataSectionName = 0xb8; // string
		constexpr auto strEntityName = 0xc0; // string
		constexpr auto strID = 0xc8; // string
		constexpr auto strXmlns = 0xd0; // string
		constexpr auto strXml = 0xd8; // string
		constexpr auto strSpace = 0xe0; // string
		constexpr auto strLang = 0xe8; // string
		constexpr auto strEmpty = 0xf0; // string
		constexpr auto strNonSignificantWhitespaceName = 0xf8; // string
		constexpr auto strSignificantWhitespaceName = 0x100; // string
		constexpr auto strReservedXmlns = 0x108; // string
		constexpr auto strReservedXml = 0x110; // string
		constexpr auto baseURI = 0x118; // string
		constexpr auto resolver = 0x120; // XmlResolver
		constexpr auto bSetResolver = 0x128; // bool
		constexpr auto objLock = 0x130; // object
		constexpr auto namespaceXml = 0x138; // XmlAttribute
	}

	namespace n_ObjectMouseUniformScale {
		constexpr auto scaleAxis = 0x10; // TransformAxis
		constexpr auto cursorPosAtSessionStart = 0x14; // Vector2
		constexpr auto objectGlobalScaleAtSessionStart = 0x1c; // Vector3
		constexpr auto gameObject = 0x28; // ObjectInfo
		constexpr auto uniformScale = 0x30; // bool
		constexpr auto _isActive = 0x31; // bool
		constexpr auto objectMouseUniformScaleSettings = 0x38; // ObjectMouseUniformScaleSettings
	}

	namespace n_NoiseCPU { // : INoiseCPU
		constexpr auto (Frequency)k__BackingField = 0x10; // float
		constexpr auto (Amplitude)k__BackingField = 0x14; // float
		constexpr auto (Offset)k__BackingField = 0x18; // Vector3
	}

	namespace n_NoInterpColorParameter { // : VolumeParameter(Color)
		constexpr auto hdr = 0x28; // bool
		constexpr auto showAlpha = 0x29; // bool
		constexpr auto showEyeDropper = 0x2a; // bool
	}

	namespace n_CustomLODManager { // : MonoBehaviour
		constexpr auto dynamiclod2Changes = 0x18; // ThreadSafeQueue(CustomLODManager.dynamicLod2Order)
		constexpr auto dynamiclodChanges = 0x20; // ThreadSafeQueue(CustomLODManager.dynamicLodOrder)
		constexpr auto staticnultipleChanges = 0x28; // ThreadSafeQueue(CustomLODManager.staticMultipleLodOrder)
		constexpr auto playerChanges = 0x30; // ThreadSafeQueue(CustomLODManager.playerLodOrder)
		constexpr auto vehicleChanges = 0x38; // ThreadSafeQueue(CustomLODManager.vehicleLodOrder)
		constexpr auto buildingChanges = 0x40; // ThreadSafeQueue(CustomLODManager.buildingLodOrder)
		constexpr auto distancebasedlodChanges = 0x48; // ThreadSafeQueue(CustomLODManager.distancebasedLodOrder)
		constexpr auto dynamicDistancebasedlodChanges = 0x50; // ThreadSafeQueue(CustomLODManager.dynamicDistancebasedLodOrder)
	}

	namespace n_GameManager { // : MonoBehaviour
		constexpr auto view = 0x18; // NetView
		constexpr auto mServerHeatMap = 0x20; // float
		constexpr auto isVoting = 0x24; // bool
		constexpr auto yesVotes = 0x28; // List(ulong)
		constexpr auto noVotes = 0x30; // List(ulong)
	}

	namespace n_LeafRangeNode { // : LeafNode
		constexpr auto min = 0x18; // Decimal
		constexpr auto max = 0x28; // Decimal
		constexpr auto nextIteration = 0x38; // BitSet
	}

	namespace n_Assembly { // : ICustomAttributeProvider
		constexpr auto _mono_assembly = 0x10; // IntPtr
		constexpr auto resolve_event_holder = 0x18; // Assembly.ResolveEventHolder
		constexpr auto _evidence = 0x20; // object
		constexpr auto _minimum = 0x28; // object
		constexpr auto _optional = 0x30; // object
		constexpr auto _refuse = 0x38; // object
		constexpr auto _granted = 0x40; // object
		constexpr auto _denied = 0x48; // object
		constexpr auto fromByteArray = 0x50; // bool
		constexpr auto assemblyName = 0x58; // string
	}

	namespace n_OidEnumerator { // : IEnumerator
		constexpr auto m_oids = 0x10; // OidCollection
		constexpr auto m_current = 0x18; // int
	}

	namespace n_SmallXmlParser.AttrListImpl { // : SmallXmlParser.IAttrList
		constexpr auto attrNames = 0x10; // List(string)
		constexpr auto attrValues = 0x18; // List(string)
	}

	namespace n_SupplyCore {
		constexpr auto MaxDistanceSqr = 0x10; // float
		constexpr auto IsActive = 0x14; // bool
		constexpr auto WorldPosition = 0x18; // Vector3
		constexpr auto BulletSupplyPoint = 0x24; // int
		constexpr auto FirstAidSupplyPoint = 0x28; // int
		constexpr auto LightGadgetSupplyPoint = 0x2c; // int
		constexpr auto HeavySupplyPoint = 0x30; // int
		constexpr auto ThrowableSupplyPoint = 0x34; // int
		constexpr auto OnUserReqeustToSupply = 0x38; // Action(LoadoutIndex)
	}

	namespace n_WebClient.DownloadBitsState {
		constexpr auto WebClient = 0x10; // WebClient
		constexpr auto WriteStream = 0x18; // Stream
		constexpr auto InnerBuffer = 0x20; // byte[]
		constexpr auto AsyncOp = 0x28; // AsyncOperation
		constexpr auto Request = 0x30; // WebRequest
		constexpr auto CompletionDelegate = 0x38; // CompletionDelegate
		constexpr auto ReadStream = 0x40; // Stream
		constexpr auto SgBuffers = 0x48; // ScatterGatherBuffers
		constexpr auto ContentLength = 0x50; // long
		constexpr auto Length = 0x58; // long
		constexpr auto Progress = 0x60; // WebClient.ProgressData
	}

	namespace n_JSONStreamEncoder {
		constexpr auto _writer = 0x10; // TextWriter
		constexpr auto _contextStack = 0x18; // JSONStreamEncoder.EncoderContext[]
		constexpr auto _contextStackPointer = 0x20; // int
		constexpr auto _newlineInserted = 0x24; // bool
	}

	namespace n_XPathScanner {
		constexpr auto xpathExpr = 0x10; // string
		constexpr auto xpathExprIndex = 0x18; // int
		constexpr auto kind = 0x1c; // XPathScanner.LexKind
		constexpr auto currentChar = 0x20; // char
		constexpr auto name = 0x28; // string
		constexpr auto prefix = 0x30; // string
		constexpr auto stringValue = 0x38; // string
		constexpr auto numberValue = 0x40; // double
		constexpr auto canBeFunction = 0x48; // bool
		constexpr auto xmlCharType = 0x50; // XmlCharType
	}

	namespace n_DefaultMemberAttribute { // : Attribute
		constexpr auto m_memberName = 0x10; // string
	}

	namespace n_ProjectileRegister {
		constexpr auto Stats = 0x10; // ToolStats
		constexpr auto Parent = 0x18; // ToolItem
		constexpr auto Projectile = 0x20; // Projectile
		constexpr auto PlayerID = 0x28; // byte
		constexpr auto ProjectileID = 0x2a; // ushort
		constexpr auto Hash = 0x2c; // int
		constexpr auto SpawnTime = 0x30; // float
		constexpr auto SpawnPosition = 0x34; // Vector3
		constexpr auto HitTime = 0x40; // float
		constexpr auto HitPosition = 0x44; // Vector3
	}

	namespace n_FormerlySerializedAsAttribute { // : Attribute
		constexpr auto m_oldName = 0x10; // string
	}

	namespace n_CharacterArmor.Work {
		constexpr auto final = 0x10; // Texture2D
		constexpr auto buffer = 0x18; // Color[]
		constexpr auto skin = 0x20; // Color[]
		constexpr auto uniform = 0x28; // Color[]
		constexpr auto face = 0x30; // Color[]
		constexpr auto eye = 0x38; // Color[]
		constexpr auto hair = 0x40; // Color[]
	}

	namespace n_Aabb { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_SemaphoreSlim { // : IDisposable
		constexpr auto m_currentCount = 0x10; // int
		constexpr auto m_maxCount = 0x14; // int
		constexpr auto m_waitCount = 0x18; // int
		constexpr auto m_lockObj = 0x20; // object
		constexpr auto m_waitHandle = 0x28; // ManualResetEvent
		constexpr auto m_asyncHead = 0x30; // SemaphoreSlim.TaskNode
		constexpr auto m_asyncTail = 0x38; // SemaphoreSlim.TaskNode
	}

	namespace n_Image { // : MaskableGraphic
		constexpr auto m_Sprite = 0xc8; // Sprite
		constexpr auto m_OverrideSprite = 0xd0; // Sprite
		constexpr auto m_Type = 0xd8; // Image.Type
		constexpr auto m_PreserveAspect = 0xdc; // bool
		constexpr auto m_FillCenter = 0xdd; // bool
		constexpr auto m_FillMethod = 0xe0; // Image.FillMethod
		constexpr auto m_FillAmount = 0xe4; // float
		constexpr auto m_FillClockwise = 0xe8; // bool
		constexpr auto m_FillOrigin = 0xec; // int
		constexpr auto m_AlphaHitTestMinimumThreshold = 0xf0; // float
		constexpr auto m_Tracked = 0xf4; // bool
		constexpr auto m_UseSpriteMesh = 0xf5; // bool
		constexpr auto m_PixelsPerUnitMultiplier = 0xf8; // float
		constexpr auto m_CachedReferencePixelsPerUnit = 0xfc; // float
	}

	namespace n_LaserBehaviour { // : AttachmentAddon
		constexpr auto (FastListIndexA)k__BackingField = 0x40; // int
		constexpr auto (TickIndex7)k__BackingField = 0x44; // int
		constexpr auto LaserScale = 0x48; // float
		constexpr auto Max = 0x4c; // float
		constexpr auto Point = 0x50; // Transform
		constexpr auto Line = 0x58; // LineRenderer
		constexpr auto SideRail = 0x60; // SideRail
		constexpr auto nextUpdateTime = 0x68; // float
	}

	namespace n_FPMouseLook { // : MonoBehaviour
		constexpr auto Speed = 0x18; // float
		constexpr auto (TickIndex5)k__BackingField = 0x1c; // int
		constexpr auto mLastRecoilSetTime = 0x20; // float
		constexpr auto mLastRecoilSmooth = 0x24; // float
		constexpr auto mLastType = 0x28; // RecoilTypes
		constexpr auto horizontalBack = 0x2c; // float
		constexpr auto verticalBack = 0x30; // float
		constexpr auto horizontalRecoil = 0x34; // float
		constexpr auto verticalRecoil = 0x38; // float
		constexpr auto TransformX = 0x40; // Transform
		constexpr auto TransformY = 0x48; // Transform
		constexpr auto localEularsX = 0x50; // Vector3
		constexpr auto localEularsY = 0x5c; // Vector3
	}

	namespace n_XPathSelectionIterator { // : ResetableIterator
		constexpr auto nav = 0x18; // XPathNavigator
		constexpr auto query = 0x20; // Query
		constexpr auto position = 0x28; // int
	}

	namespace n_PingManager { // : MonoBehaviour
		constexpr auto OnSelect = 0x18; // AudioClip[]
		constexpr auto OnDeselect = 0x20; // AudioClip[]
		constexpr auto OnChange = 0x28; // AudioClip[]
		constexpr auto PrefabPingEnemy = 0x30; // GameObject
		constexpr auto PrefabPingSniper = 0x38; // GameObject
		constexpr auto PrefabPingMarker = 0x40; // GameObject
		constexpr auto mView = 0x48; // NetView
		constexpr auto mPressDownTime = 0x50; // float
	}

	namespace n_FPController { // : MonoBehaviour
		constexpr auto (TickIndex0)k__BackingField = 0x18; // int
		constexpr auto (TickIndex6)k__BackingField = 0x1c; // int
		constexpr auto (TickIndex1)k__BackingField = 0x20; // int
		constexpr auto ScaleTransform = 0x28; // Transform
		constexpr auto CameraParent = 0x30; // Transform
		constexpr auto CameraAnimations = 0x38; // Animation
		constexpr auto MainCamera = 0x40; // Camera
		constexpr auto MouseLook = 0x48; // FPMouseLook
		constexpr auto Arms2Animation = 0x50; // Animation
		constexpr auto LeftShoulder = 0x58; // Transform
		constexpr auto LeftElbow = 0x60; // Transform
		constexpr auto RightShoulder = 0x68; // Transform
		constexpr auto RightElbow = 0x70; // Transform
		constexpr auto LeftShoulderB = 0x78; // Transform
		constexpr auto LeftElbowB = 0x80; // Transform
		constexpr auto RightShoulderB = 0x88; // Transform
		constexpr auto RightElbowB = 0x90; // Transform
		constexpr auto FPLeanTransform = 0x98; // Transform
		constexpr auto FPCamereTransform = 0xa0; // Transform
		constexpr auto GadgetCameraAnimations = 0xa8; // Animation
		constexpr auto DownAnimations = 0xb0; // Animator
		constexpr auto UpAnimations = 0xb8; // Animator
		constexpr auto ThrowingAnimation = 0xc0; // Animation
		constexpr auto CameraKick = 0xc8; // AnimationCurve
		constexpr auto UnthrowableParent = 0xd0; // Transform
		constexpr auto ThrowableParent = 0xd8; // Transform
		constexpr auto MainChild = 0xe0; // GameObject
		constexpr auto ToolChild = 0xe8; // GameObject
		constexpr auto MainAudioSources = 0xf0; // GameObject
		constexpr auto FPArms = 0xf8; // SkinnedMeshRenderer
		constexpr auto LeftArmIK = 0x100; // InverseKinematics
		constexpr auto DragTarget = 0x108; // Transform
		constexpr auto FootstepOutput = 0x110; // AudioSource
		constexpr auto RunningOutput = 0x118; // AudioSource
		constexpr auto BreathOutput = 0x120; // AudioSource
		constexpr auto BeatOutput = 0x128; // AudioSource
		constexpr auto SwimingOutput = 0x130; // AudioSource
		constexpr auto WindOutput = 0x138; // AudioSource
		constexpr auto DeathMain = 0x140; // GameObject
		constexpr auto FPThpSkinned = 0x148; // SkinnedMeshRenderer
		constexpr auto FPThpHeadGap = 0x150; // MeshRenderer
		constexpr auto HeadX = 0x158; // Transform
		constexpr auto HeadY = 0x160; // Transform
		constexpr auto Joints = 0x168; // Transform[]
		constexpr auto mPlayer = 0x170; // PlayerNetwork
		constexpr auto mRunState = 0x178; // int
		constexpr auto FPLeanTransformEular = 0x17c; // Vector3
		constexpr auto dragDefaultPos = 0x188; // Vector3
		constexpr auto lastFoliagePosition = 0x194; // Vector3
		constexpr auto LeftArmThrowWeight = 0x1a0; // float
		constexpr auto LeftArmWeight = 0x1a4; // float
		constexpr auto RightArmWeight = 0x1a8; // float
		constexpr auto was_currentStanding = 0x1ac; // PlayerStand
		constexpr auto last_Standing = 0x1b0; // PlayerStand
		constexpr auto latestState = 0x1b4; // PlayerState
		constexpr auto wasLeaning = 0x1b8; // LeaningSide
		constexpr auto lastRandInputs = 0x1bc; // Vector2
		constexpr auto lastRand = 0x1c4; // float
		constexpr auto lastStep = 0x1c8; // float
		constexpr auto stepIdle = 0x1cc; // float
		constexpr auto downSpeed = 0x1d0; // float
		constexpr auto wasGrounded = 0x1d4; // bool
		constexpr auto lastNonGrounded = 0x1d8; // float
		constexpr auto leftToNextOrderStand = 0x1dc; // float
		constexpr auto groundSpeed = 0x1e0; // float
		constexpr auto crouchByToggle = 0x1e4; // bool
		constexpr auto screenRed = 0x1e8; // float
		constexpr auto wasSwiming = 0x1ec; // bool
		constexpr auto suppresion = 0x1f0; // float
		constexpr auto lastSuppression = 0x1f4; // float
		constexpr auto beatOffset = 0x1f8; // float
		constexpr auto beatSpeed = 0x1fc; // float
		constexpr auto beatIntensity = 0x200; // float
		constexpr auto lastJump = 0x204; // float
		constexpr auto _bindingAHoldingETA = 0x208; // float
		constexpr auto _bindingBHoldingETA = 0x20c; // float
		constexpr auto _bindingATimer = 0x210; // float
		constexpr auto _bindingBTimer = 0x214; // float
		constexpr auto _bindingAUsed = 0x218; // bool
		constexpr auto _bindingBUsed = 0x219; // bool
		constexpr auto wasClimbing = 0x21a; // bool
		constexpr auto _focusedOnClimabable = 0x21b; // bool
		constexpr auto ScaleTransformX = 0x21c; // float
		constexpr auto mLastWindPosition = 0x220; // Vector3
		constexpr auto emptyDraggingLock = 0x230; // object
		constexpr auto ragdollsAround = 0x238; // List(THPController)
		constexpr auto wasWillingToDrag = 0x240; // bool
		constexpr auto willingToDrag = 0x241; // bool
		constexpr auto holdingbone = 0x242; // bool
		constexpr auto foundClosestBody = 0x248; // THPController
		constexpr auto foundClosestLimbIndex = 0x250; // int
		constexpr auto toolSwitchFlag = 0x254; // bool
		constexpr auto lastVaultingEnd = 0x258; // float
		constexpr auto mVaultCoroutine = 0x260; // Coroutine
		constexpr auto order_left = 0x268; // bool
		constexpr auto order_right = 0x269; // bool
		constexpr auto latestAnimation = 0x270; // string
		constexpr auto lastTakenDamage = 0x278; // float
		constexpr auto lastBleeding = 0x27c; // float
		constexpr auto cameraDamage_shake = 0x280; // Vector3
		constexpr auto camera_kick = 0x28c; // Vector3
		constexpr auto camera_sway = 0x298; // Vector3
		constexpr auto camera_nonstabilizer_target = 0x2a4; // Vector3
		constexpr auto camera_nonstabilizer = 0x2b0; // Vector3
		constexpr auto last_nonStabilizer = 0x2bc; // float
		constexpr auto camera_switching_target = 0x2c0; // Vector3
		constexpr auto camera_switching = 0x2cc; // Vector3
		constexpr auto lastKick = 0x2d8; // float
		constexpr auto lastKickIntensity = 0x2dc; // float
		constexpr auto forcedIndex = 0x2e0; // int
		constexpr auto wasForced = 0x2e4; // bool
		constexpr auto ignoredDeswitch = 0x2e5; // bool
		constexpr auto up_state = 0x2e8; // int
		constexpr auto down_state = 0x2ec; // int
		constexpr auto loadoutActiveIndex = 0x2f0; // int
		constexpr auto mWasPlanting = 0x2f4; // bool
		constexpr auto keyAiming = 0x2f5; // bool
		constexpr auto isAiming = 0x2f6; // bool
		constexpr auto mBeatOutputPitch = 0x2f8; // float
		constexpr auto mFoliageSoundQueue = 0x300; // Queue(ValueTuple(AudioClip, float, float))
		constexpr auto mWindVolume = 0x308; // float
		constexpr auto mRotateOffset = 0x30c; // float
		constexpr auto mLastPlantableLangID = 0x310; // int
		constexpr auto lastAbilityPlacing = 0x318; // SquadAbility
		constexpr auto mSpawnTime = 0x320; // float
		constexpr auto DraggingLimb = 0x328; // Transform
		constexpr auto DraggingBody = 0x330; // THPController
		constexpr auto DraggingLimbIndex = 0x338; // int
		constexpr auto PossibleVault = 0x33c; // VaultingType
		constexpr auto ClimbCatch = 0x340; // float
		constexpr auto LoadoutManager = 0x348; // FirstPersonLoadoutManager
		constexpr auto CameraParentEularA = 0x350; // Vector3
		constexpr auto isDown = 0x35c; // bool
		constexpr auto inSeat = 0x35d; // bool
		constexpr auto isClimbing = 0x35e; // bool
		constexpr auto onDrone = 0x35f; // bool
		constexpr auto isSwiming = 0x360; // bool
		constexpr auto mActiveTool = 0x368; // Tool
		constexpr auto mouseHorizontalCache = 0x370; // float
		constexpr auto mouseVeritcalCache = 0x374; // float
	}

	namespace n_UTF7Encoding.DecoderUTF7FallbackBuffer { // : DecoderFallbackBuffer
		constexpr auto cFallback = 0x20; // char
		constexpr auto iCount = 0x24; // int
		constexpr auto iSize = 0x28; // int
	}

	namespace n_CFString { // : CFObject
		constexpr auto str = 0x18; // string
	}

	namespace n_ComCompatibleVersionAttribute { // : Attribute
		constexpr auto _major = 0x10; // int
		constexpr auto _minor = 0x14; // int
		constexpr auto _build = 0x18; // int
		constexpr auto _revision = 0x1c; // int
	}

	namespace n_BinaryObject {
		constexpr auto objectId = 0x10; // int
		constexpr auto mapId = 0x14; // int
	}

	namespace n_TraceLoggingMetadataCollector {
		constexpr auto impl = 0x10; // TraceLoggingMetadataCollector.Impl
		constexpr auto currentGroup = 0x18; // FieldMetadata
		constexpr auto bufferedArrayFieldCount = 0x20; // int
		constexpr auto (Tags)k__BackingField = 0x24; // EventFieldTags
	}

	namespace n_APCBehaviour.VehicleState {
		constexpr auto NetworkDelta = 0x10; // Vector3
		constexpr auto NetworkDeltaRotation = 0x1c; // Quaternion
		constexpr auto ServerPosition = 0x2c; // Vector3
		constexpr auto ServerRotation = 0x38; // Quaternion
		constexpr auto ClientWorldVelocity = 0x48; // Vector3
		constexpr auto ServerLocalVelocity = 0x54; // Vector3
		constexpr auto ServerWorldVelocity = 0x60; // Vector3
		constexpr auto ServerWorldAngularVelocity = 0x6c; // Vector3
		constexpr auto ClientLocalVelocity = 0x78; // Vector3
		constexpr auto RPM = 0x84; // float
		constexpr auto Gear = 0x88; // int
		constexpr auto EngineIdle = 0x8c; // APCBehaviour.VehicleState.Audio
		constexpr auto Engine = 0x94; // APCBehaviour.VehicleState.Audio
		constexpr auto EngineGas = 0x9c; // APCBehaviour.VehicleState.Audio
		constexpr auto WaterOutside = 0xa4; // APCBehaviour.VehicleState.Audio
		constexpr auto WaterInside = 0xac; // APCBehaviour.VehicleState.Audio
		constexpr auto InputVertical = 0xb4; // float
		constexpr auto InputHorizontal = 0xb8; // float
		constexpr auto InputBreak = 0xbc; // bool
	}

	namespace n_MicActivityVisualizer { // : MonoBehaviour
		constexpr auto Value = 0x18; // RectTransform
		constexpr auto (TickIndex8)k__BackingField = 0x20; // int
		constexpr auto mLastReadPosition = 0x24; // int
	}

	namespace n_TMP_TextInfo {
		constexpr auto textComponent = 0x10; // TMP_Text
		constexpr auto characterCount = 0x18; // int
		constexpr auto spriteCount = 0x1c; // int
		constexpr auto spaceCount = 0x20; // int
		constexpr auto wordCount = 0x24; // int
		constexpr auto linkCount = 0x28; // int
		constexpr auto lineCount = 0x2c; // int
		constexpr auto pageCount = 0x30; // int
		constexpr auto materialCount = 0x34; // int
		constexpr auto characterInfo = 0x38; // TMP_CharacterInfo[]
		constexpr auto wordInfo = 0x40; // TMP_WordInfo[]
		constexpr auto linkInfo = 0x48; // TMP_LinkInfo[]
		constexpr auto lineInfo = 0x50; // TMP_LineInfo[]
		constexpr auto pageInfo = 0x58; // TMP_PageInfo[]
		constexpr auto meshInfo = 0x60; // TMP_MeshInfo[]
		constexpr auto m_CachedMeshInfo = 0x68; // TMP_MeshInfo[]
	}

	namespace n_Directory.SearchData {
		constexpr auto fullPath = 0x10; // string
		constexpr auto userPath = 0x18; // string
		constexpr auto searchOption = 0x20; // SearchOption
	}

	namespace n_ResultException { // : Exception
		constexpr auto Result = 0x88; // Result
	}

	namespace n_TaskSchedulerAwaitTaskContinuation { // : AwaitTaskContinuation
		constexpr auto m_scheduler = 0x20; // TaskScheduler
	}

	namespace n_XmlTextReaderImpl.XmlContext {
		constexpr auto xmlSpace = 0x10; // XmlSpace
		constexpr auto xmlLang = 0x18; // string
		constexpr auto defaultNamespace = 0x20; // string
		constexpr auto previousContext = 0x28; // XmlTextReaderImpl.XmlContext
	}

	namespace n_ParticleContentValidator { // : ContentValidator
		constexpr auto symbols = 0x18; // SymbolsDictionary
		constexpr auto positions = 0x20; // Positions
		constexpr auto stack = 0x28; // Stack
		constexpr auto contentNode = 0x30; // SyntaxTreeNode
		constexpr auto isPartial = 0x38; // bool
		constexpr auto minMaxNodesCount = 0x3c; // int
		constexpr auto enableUpaCheck = 0x40; // bool
	}

	namespace n_MaxIntParameter { // : IntParameter
		constexpr auto max = 0x20; // int
	}

	namespace n_AnimationTriggers {
		constexpr auto m_NormalTrigger = 0x10; // string
		constexpr auto m_HighlightedTrigger = 0x18; // string
		constexpr auto m_PressedTrigger = 0x20; // string
		constexpr auto m_SelectedTrigger = 0x28; // string
		constexpr auto m_DisabledTrigger = 0x30; // string
	}

	namespace n_TurretDriverCamera { // : MonoBehaviour
		constexpr auto parent = 0x18; // Transform
		constexpr auto eular = 0x20; // Vector3
		constexpr auto normal = 0x2c; // Vector3
		constexpr auto velocity = 0x38; // Vector3
	}

	namespace n_SchemaNotation {
		constexpr auto name = 0x10; // XmlQualifiedName
		constexpr auto systemLiteral = 0x18; // string
		constexpr auto pubid = 0x20; // string
	}

	namespace n_ScoreboardSquad { // : MonoBehaviour
		constexpr auto rectTransform = 0x18; // RectTransform
		constexpr auto canvas = 0x20; // CanvasGroup
		constexpr auto btn = 0x28; // GraphicRevertedButton
		constexpr auto locked = 0x30; // GameObject
		constexpr auto Icon = 0x38; // RawImage
		constexpr auto CountIcon = 0x40; // RawImage
		constexpr auto SquadName = 0x48; // TextMeshProUGUI
		constexpr auto SquadCount = 0x50; // TextMeshProUGUI
		constexpr auto SquadPoint = 0x58; // TextMeshProUGUI
		constexpr auto squadExist = 0x60; // bool
		constexpr auto pool = 0x68; // UIPool(ScoreboardMember)
		constexpr auto activeMembers = 0x70; // List(ScoreboardMember)
		constexpr auto squad = 0x78; // Squad
		constexpr auto Team = 0x80; // Team
		constexpr auto refresh_flag = 0x81; // bool
		constexpr auto _lockedCount = 0x84; // int
		constexpr auto _lockedMaxCount = 0x88; // int
		constexpr auto _lockedisExpanded = 0x8c; // bool
		constexpr auto _lockedisMine = 0x8d; // bool
		constexpr auto _lockedState = 0x90; // Squad.SquadLockState
		constexpr auto mLockedPoints = 0x94; // int
	}

	namespace n_AlignedSoftBodyArray { // : IList(SoftBody)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_MaxFloatParameter { // : FloatParameter
		constexpr auto max = 0x20; // float
	}

	namespace n_XmlLinkedNode { // : XmlNode
		constexpr auto next = 0x18; // XmlLinkedNode
	}

	namespace n_AWeaponSkin { // : IAttachmentItem
		constexpr auto ID = 0x10; // int
		constexpr auto SkinName = 0x18; // string
		constexpr auto SkinMesh = 0x20; // Mesh
		constexpr auto BoltMesh = 0x28; // Mesh
		constexpr auto Permissions = 0x30; // Avaibility
		constexpr auto SkinTexture = 0x38; // Texture2D
		constexpr auto mSettings = 0x40; // AttachmentSettings
	}

	namespace n_XmlNamedNodeMap { // : IEnumerable
		constexpr auto parent = 0x10; // XmlNode
		constexpr auto nodes = 0x18; // XmlNamedNodeMap.SmallXmlNodeList
	}

	namespace n_FreeCamera { // : MonoBehaviour
		constexpr auto m_LookSpeedController = 0x18; // float
		constexpr auto m_LookSpeedMouse = 0x1c; // float
		constexpr auto m_MoveSpeed = 0x20; // float
		constexpr auto m_MoveSpeedIncrement = 0x24; // float
		constexpr auto m_Turbo = 0x28; // float
	}

	namespace n_SafeSerializationEventArgs { // : EventArgs
		constexpr auto m_streamingContext = 0x10; // StreamingContext
		constexpr auto m_serializedStates = 0x20; // List(object)
	}

	namespace n_AssemblyCopyrightAttribute { // : Attribute
		constexpr auto m_copyright = 0x10; // string
	}

	namespace n_Scrollbar { // : Selectable
		constexpr auto m_HandleRect = 0xf8; // RectTransform
		constexpr auto m_Direction = 0x100; // Scrollbar.Direction
		constexpr auto m_Value = 0x104; // float
		constexpr auto m_Size = 0x108; // float
		constexpr auto m_NumberOfSteps = 0x10c; // int
		constexpr auto m_OnValueChanged = 0x110; // Scrollbar.ScrollEvent
		constexpr auto m_ContainerRect = 0x118; // RectTransform
		constexpr auto m_Offset = 0x120; // Vector2
		constexpr auto m_Tracker = 0x128; // DrivenRectTransformTracker
		constexpr auto m_PointerDownRepeat = 0x130; // Coroutine
		constexpr auto isPointerDownAndNotDragging = 0x138; // bool
		constexpr auto m_DelayedUpdateVisuals = 0x139; // bool
	}

	namespace n_NightSight { // : IAttachment
		constexpr auto self = 0x10; // GameObject
		constexpr auto aimPoint = 0x18; // Transform
		constexpr auto parent = 0x20; // AttachmentManager
		constexpr auto index = 0x28; // LoadoutIndex
		constexpr auto (Item)k__BackingField = 0x30; // IAttachmentItem
	}

	namespace n_AttachmentAddon { // : MonoBehaviour
		constexpr auto (isLocal)k__BackingField = 0x18; // bool
		constexpr auto (player)k__BackingField = 0x20; // PlayerNetwork
		constexpr auto (weapon)k__BackingField = 0x28; // WeaponManager
		constexpr auto (attachment)k__BackingField = 0x30; // IAttachmentItem
		constexpr auto (isAimingToThis)k__BackingField = 0x38; // bool
	}

	namespace n_TimeNotificationBehaviour { // : PlayableBehaviour
		constexpr auto m_Notifications = 0x10; // List(TimeNotificationBehaviour.NotificationEntry)
		constexpr auto m_PreviousTime = 0x18; // double
		constexpr auto m_NeedSortNotifications = 0x20; // bool
		constexpr auto m_TimeSource = 0x28; // Playable
	}

	namespace n_DeployPoint { // : MonoBehaviour
		constexpr auto (ID)k__BackingField = 0x18; // ushort
		constexpr auto (Target)k__BackingField = 0x20; // IDeployable
	}

	namespace n_BvhTriangleMeshShape { // : TriangleMeshShape
		constexpr auto _optimizedBvh = 0x30; // OptimizedBvh
		constexpr auto _triangleInfoMap = 0x38; // TriangleInfoMap
	}

	namespace n_PostProcessingQuad { // : ScriptableRendererFeature
		constexpr auto m_Settings = 0x20; // PostProcessingQuad.PostProcessingQuadSettings
		constexpr auto m_RenderQuadPass = 0x28; // PostProcessingPass
	}

	namespace n_Biome { // : ScriptableObject
		constexpr auto biomeName = 0x18; // string
		constexpr auto renameIndexTab = 0x20; // int
		constexpr auto renameTab = 0x24; // bool
		constexpr auto selected = 0x25; // bool
		constexpr auto renaming = 0x26; // bool
		constexpr auto tabList = 0x28; // List(TabForTypeOfBiome)
		constexpr auto typeWindowsScroll = 0x30; // Vector2
	}

	namespace n_SpawnPoint { // : MonoBehaviour
		constexpr auto SpawnPointFor = 0x18; // Team
		constexpr auto SpawnCondition = 0x1c; // SpawnCondition
	}

	namespace n_XmlLoader {
		constexpr auto doc = 0x10; // XmlDocument
		constexpr auto reader = 0x18; // XmlReader
		constexpr auto preserveWhitespace = 0x20; // bool
	}

	namespace n_RotationalLimitMotor2 { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_KinematicClosestNotMeRayResultCallback { // : ClosestRayResultCallback
		constexpr auto _me = 0x58; // CollisionObject
	}

	namespace n_DfaContentValidator { // : ContentValidator
		constexpr auto transitionTable = 0x18; // int[][]
		constexpr auto symbols = 0x20; // SymbolsDictionary
	}

	namespace n_LayoutRebuilder { // : ICanvasElement
		constexpr auto m_ToRebuild = 0x10; // RectTransform
		constexpr auto m_CachedHashFromTransform = 0x18; // int
	}

	namespace n_Axis { // : AstNode
		constexpr auto axisType = 0x10; // Axis.AxisType
		constexpr auto input = 0x18; // AstNode
		constexpr auto prefix = 0x20; // string
		constexpr auto name = 0x28; // string
		constexpr auto nodeType = 0x30; // XPathNodeType
		constexpr auto abbrAxis = 0x34; // bool
		constexpr auto urn = 0x38; // string
	}

	namespace n_ObjectMouseRotation {
		constexpr auto rotationAxis = 0x10; // TransformAxis
		constexpr auto gameObject = 0x18; // GameObject
		constexpr auto customRotationAxis = 0x20; // Vector3
		constexpr auto rotatingAroundCustomAxis = 0x2c; // bool
		constexpr auto freeRotating = 0x2d; // bool
		constexpr auto _isActive = 0x2e; // bool
		constexpr auto objectMouseRotationSettings = 0x30; // ObjectMouseRotationSettings
	}

	namespace n_CharacterPool.ToolPool {
		constexpr auto mPool = 0x10; // Dictionary(int, Queue(PoolableTool))
	}

	namespace n_DebugUIHandlerVector2 { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // UIFoldout
		constexpr auto fieldX = 0x68; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldY = 0x70; // DebugUIHandlerIndirectFloatField
		constexpr auto m_Field = 0x78; // DebugUI.Vector2Field
		constexpr auto m_Container = 0x80; // DebugUIHandlerContainer
	}

	namespace n_NodeOverlapCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_PlayerToolsProgess {
		constexpr auto values = 0x10; // Dictionary(ushort, PlayerToolsProgess.ToolValues)
	}

	namespace n_WebConnectionGroup {
		constexpr auto sPoint = 0x10; // ServicePoint
		constexpr auto name = 0x18; // string
		constexpr auto connections = 0x20; // LinkedList(WebConnectionGroup.ConnectionState)
		constexpr auto queue = 0x28; // Queue
		constexpr auto closing = 0x30; // bool
		constexpr auto ConnectionClosed = 0x38; // EventHandler
	}

	namespace n_AsymmetricAlgorithm { // : IDisposable
		constexpr auto KeySizeValue = 0x10; // int
		constexpr auto LegalKeySizesValue = 0x18; // KeySizes[]
	}

	namespace n_GraphicRevertedButton { // : MonoBehaviour
		constexpr auto isActive = 0x18; // bool
		constexpr auto Invert = 0x1c; // float
		constexpr auto ClickInvert = 0x20; // float
		constexpr auto SpeedOfFadeIn = 0x24; // float
		constexpr auto SpeedOfFadeOut = 0x28; // float
		constexpr auto autoDetect = 0x2c; // bool
		constexpr auto includeInactives = 0x2d; // bool
		constexpr auto OnClickEvent = 0x30; // UnityEvent
		constexpr auto OnPointerDown = 0x38; // UnityEvent
		constexpr auto OnHoverEnter = 0x40; // UnityEvent
		constexpr auto OnHoverExit = 0x48; // UnityEvent
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
		constexpr auto (IsClickable)k__BackingField = 0x54; // bool
		constexpr auto (IsHovering)k__BackingField = 0x55; // bool
		constexpr auto child_raw = 0x58; // List(RawImage)
		constexpr auto child_img = 0x60; // List(Image)
		constexpr auto child_text = 0x68; // List(TextMeshProUGUI)
		constexpr auto child_raw_colors = 0x70; // Color[]
		constexpr auto child_img_colors = 0x78; // Color[]
		constexpr auto child_text_colors = 0x80; // Color[]
		constexpr auto child_raw_colors_reverted = 0x88; // Color[]
		constexpr auto child_img_colors_reverted = 0x90; // Color[]
		constexpr auto child_text_colors_reverted = 0x98; // Color[]
		constexpr auto child_raw_colors_reverted_clicked = 0xa0; // Color[]
		constexpr auto child_img_colors_reverted_clicked = 0xa8; // Color[]
		constexpr auto child_text_colors_reverted_clicked = 0xb0; // Color[]
		constexpr auto alpha = 0xb8; // float
		constexpr auto listenerExist = 0xbc; // bool
		constexpr auto isScanned = 0xbd; // bool
		constexpr auto mWasPressing = 0xbe; // bool
	}

	namespace n_VaultingSettings { // : ScriptableObject
		constexpr auto VaultingConditions = 0x18; // VaultingSettings.Conditions
		constexpr auto ClimbMediumConditions = 0x20; // VaultingSettings.Conditions
		constexpr auto ClimbHighConditions = 0x28; // VaultingSettings.Conditions
		constexpr auto ClimbLadder = 0x30; // VaultingSettings.Conditions
	}

	namespace n_MemoryStream { // : Stream
		constexpr auto _buffer = 0x28; // byte[]
		constexpr auto _origin = 0x30; // int
		constexpr auto _position = 0x34; // int
		constexpr auto _length = 0x38; // int
		constexpr auto _capacity = 0x3c; // int
		constexpr auto _expandable = 0x40; // bool
		constexpr auto _writable = 0x41; // bool
		constexpr auto _exposable = 0x42; // bool
		constexpr auto _isOpen = 0x43; // bool
		constexpr auto _lastReadTask = 0x48; // Task(int)
	}

	namespace n_Sampler {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_Mask { // : UIBehaviour
		constexpr auto m_RectTransform = 0x18; // RectTransform
		constexpr auto m_ShowMaskGraphic = 0x20; // bool
		constexpr auto m_Graphic = 0x28; // Graphic
		constexpr auto m_MaskMaterial = 0x30; // Material
		constexpr auto m_UnmaskMaterial = 0x38; // Material
	}

	namespace n_AtomicBoolean {
		constexpr auto flag = 0x10; // int
	}

	namespace n_ToolBandage { // : GadgetManager
		constexpr auto PrefabPickable = 0xd0; // PickableWorldInstanceBase
		constexpr auto BandagePoint = 0xd8; // Transform
		constexpr auto isMedic = 0xe0; // bool
		constexpr auto healingSelf = 0xe1; // bool
		constexpr auto healingOther = 0xe2; // bool
		constexpr auto healTimer = 0xe4; // float
		constexpr auto requestSent = 0xe8; // bool
	}

	namespace n_GameScreen_Hook { // : MonoBehaviour
		constexpr auto value = 0x18; // RectTransform
		constexpr auto negValue = 0x20; // RectTransform
		constexpr auto canvas = 0x28; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0x30; // int
	}

	namespace n_ErrorMessage { // : IMethodCallMessage
		constexpr auto _uri = 0x10; // string
	}

	namespace n_CopyDepthPass { // : ScriptableRenderPass
		constexpr auto (source)k__BackingField = 0x68; // RenderTargetHandle
		constexpr auto (destination)k__BackingField = 0x6c; // RenderTargetHandle
		constexpr auto m_CopyDepthMaterial = 0x70; // Material
		constexpr auto m_ScaleBiasId = 0x78; // int
	}

	namespace n_GameScreen_Bindings.Args {
		constexpr auto Orders = 0x10; // List(GameScreen_Bindings.Args.order)
	}

	namespace n_XmlSchemaObjectCollection { // : CollectionBase
		constexpr auto parent = 0x18; // XmlSchemaObject
	}

	namespace n_FixupHolderList {
		constexpr auto m_values = 0x10; // FixupHolder[]
		constexpr auto m_count = 0x18; // int
	}

	namespace n_EditorSettings {
		constexpr auto useLargeRanges = 0x10; // bool
		constexpr auto maxBrushSize = 0x14; // float
		constexpr auto maxEraseSize = 0x18; // float
		constexpr auto maxEditSize = 0x1c; // float
		constexpr auto maxBrushLargeSpacing = 0x20; // float
		constexpr auto maxChecks = 0x24; // int
		constexpr auto minHeight = 0x28; // float
		constexpr auto maxHeight = 0x2c; // float
		constexpr auto maxTargetStrength = 0x30; // int
		constexpr auto spawnCheckOffset = 0x34; // float
		constexpr auto enableUndoForGameObject = 0x38; // bool
		constexpr auto enableTips = 0x39; // bool
	}

	namespace n_KeyCodeEmulator {
		constexpr auto _axis = 0x10; // string
		constexpr auto _isNone = 0x18; // bool
		constexpr auto isPositive = 0x19; // bool
		constexpr auto isDown = 0x1a; // bool
		constexpr auto isHold = 0x1b; // bool
		constexpr auto isUp = 0x1c; // bool
	}

	namespace n_FrontlineUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_VehicleLOD { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto VerticalRadius = 0x1c; // float
		constexpr auto LOD0ScreenHeight = 0x20; // float
		constexpr auto LOD1ScreenHeight = 0x24; // float
		constexpr auto LOD2ScreenHeight = 0x28; // float
		constexpr auto LOD3ScreenHeight = 0x2c; // float
		constexpr auto Lods0 = 0x30; // List(Renderer)
		constexpr auto Lods1 = 0x38; // List(Renderer)
		constexpr auto Lods2 = 0x40; // List(Renderer)
		constexpr auto Lods3 = 0x48; // List(Renderer)
		constexpr auto ScreenHeight = 0x50; // float
		constexpr auto ScreenHeightRaw = 0x54; // float
		constexpr auto inFrustumRaw = 0x58; // bool
		constexpr auto Vehicle = 0x60; // VehicleInstance
		constexpr auto isActive = 0x68; // bool
		constexpr auto m_activeLOD = 0x6c; // int
		constexpr auto m_targetLOD = 0x70; // int
	}

	namespace n_SplitToning { // : VolumeComponent
		constexpr auto shadows = 0x38; // ColorParameter
		constexpr auto highlights = 0x40; // ColorParameter
		constexpr auto balance = 0x48; // ClampedFloatParameter
	}

	namespace n_MultithreadedRenderingBehaviour { // : MonoBehaviour
		constexpr auto RenderObjects = 0x18; // bool
		constexpr auto RenderGrass = 0x19; // bool
		constexpr auto RenderTrees = 0x1a; // bool
		constexpr auto RenderBuildings = 0x1b; // bool
		constexpr auto SphericalRendering = 0x1c; // bool
		constexpr auto DrawGridLimit = 0x20; // int
		constexpr auto m_runningFlag = 0x24; // bool
		constexpr auto m_queue = 0x28; // Queue(ValueTuple(bool, RendererHandle))
		constexpr auto m_itemsLinear = 0x30; // BagRaw(FastListA(RendererHandle))
		constexpr auto planes = 0x38; // FrustumPlane[]
		constexpr auto m_lodBias = 0x40; // float
		constexpr auto m_renderShadows = 0x44; // bool
		constexpr auto m_shadowsDistance = 0x48; // float
		constexpr auto mWorkBuffer = 0x50; // FrameBatch
		constexpr auto mRenderBuffer = 0x58; // FrameBatch
		constexpr auto mReady = 0x60; // bool
	}

	namespace n_MuzzleFlash { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (lifeTime)k__BackingField = 0x1c; // float
		constexpr auto (inPool)k__BackingField = 0x20; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x24; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x28; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x2c; // bool
		constexpr auto LifeTime = 0x30; // float
		constexpr auto mLife = 0x34; // float
		constexpr auto (NoPoolMode)k__BackingField = 0x38; // bool
	}

	namespace n_VFXUIDropdownBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Dropdown
	}

	namespace n_WebConnection {
		constexpr auto sPoint = 0x10; // ServicePoint
		constexpr auto nstream = 0x18; // Stream
		constexpr auto socket = 0x20; // Socket
		constexpr auto socketLock = 0x28; // object
		constexpr auto state = 0x30; // IWebConnectionState
		constexpr auto status = 0x38; // WebExceptionStatus
		constexpr auto keepAlive = 0x3c; // bool
		constexpr auto buffer = 0x40; // byte[]
		constexpr auto abortHandler = 0x48; // EventHandler
		constexpr auto abortHelper = 0x50; // WebConnection.AbortHelper
		constexpr auto Data = 0x58; // WebConnectionData
		constexpr auto chunkedRead = 0x60; // bool
		constexpr auto chunkStream = 0x68; // MonoChunkStream
		constexpr auto queue = 0x70; // Queue
		constexpr auto reused = 0x78; // bool
		constexpr auto position = 0x7c; // int
		constexpr auto priority_request = 0x80; // HttpWebRequest
		constexpr auto ntlm_credentials = 0x88; // NetworkCredential
		constexpr auto ntlm_authenticated = 0x90; // bool
		constexpr auto unsafe_sharing = 0x91; // bool
		constexpr auto connect_ntlm_auth_state = 0x94; // WebConnection.NtlmAuthState
		constexpr auto connect_request = 0x98; // HttpWebRequest
		constexpr auto connect_exception = 0xa0; // Exception
		constexpr auto tlsStream = 0xa8; // MonoTlsStream
	}

	namespace n_XmlQualifiedName {
		constexpr auto name = 0x10; // string
		constexpr auto ns = 0x18; // string
		constexpr auto hash = 0x20; // int
	}

	namespace n_PlayerSounds {
		constexpr auto AudioMixers = 0x10; // Mixers
		constexpr auto Footsteps = 0x18; // Footsteps
		constexpr auto Shakes = 0x20; // MovementShakes
		constexpr auto HitClips = 0x28; // AudioClip[]
		constexpr auto ArmorHitClips = 0x30; // AudioClip[]
		constexpr auto Ricochets = 0x38; // AudioClip[]
		constexpr auto FoliageItems = 0x40; // FoliageItem[]
		constexpr auto TreeFalls = 0x48; // AudioClip[]
		constexpr auto TreeFallings = 0x50; // AudioClip[]
		constexpr auto DryFires = 0x58; // AudioClip[]
		constexpr auto FireModeChanges = 0x60; // AudioClip[]
		constexpr auto RadioStart = 0x68; // AudioClip
		constexpr auto RadioEnd = 0x70; // AudioClip
		constexpr auto GadgetSounds = 0x78; // PlayerSounds.Gadgets
		constexpr auto OnKill = 0x80; // AudioClip[]
		constexpr auto FireBass = 0x88; // AudioClip[]
		constexpr auto OnBalanceChange = 0x90; // AudioClip
		constexpr auto GameAboutToEnd = 0x98; // AudioClip
		constexpr auto BrickFew = 0xa0; // AudioClip[]
		constexpr auto BrickMedium = 0xa8; // AudioClip[]
		constexpr auto BrickMany = 0xb0; // AudioClip[]
		constexpr auto BrickCollisionFew = 0xb8; // AudioClip[]
		constexpr auto BrickCollisionMedium = 0xc0; // AudioClip[]
		constexpr auto BrickCollisionMany = 0xc8; // AudioClip[]
		constexpr auto BrickGrounded = 0xd0; // AudioClip[]
	}

	namespace n_PostProcessData.ShaderResources {
		constexpr auto stopNanPS = 0x10; // Shader
		constexpr auto subpixelMorphologicalAntialiasingPS = 0x18; // Shader
		constexpr auto gaussianDepthOfFieldPS = 0x20; // Shader
		constexpr auto bokehDepthOfFieldPS = 0x28; // Shader
		constexpr auto cameraMotionBlurPS = 0x30; // Shader
		constexpr auto paniniProjectionPS = 0x38; // Shader
		constexpr auto lutBuilderLdrPS = 0x40; // Shader
		constexpr auto lutBuilderHdrPS = 0x48; // Shader
		constexpr auto bloomPS = 0x50; // Shader
		constexpr auto uberPostPS = 0x58; // Shader
		constexpr auto finalPostPassPS = 0x60; // Shader
	}

	namespace n_TestCarriable { // : MonoBehaviour
		constexpr auto Offset = 0x18; // float
		constexpr auto (AttachedAirDrop)k__BackingField = 0x20; // AirDropBase
		constexpr auto (IsAttachedToAirDrop)k__BackingField = 0x28; // bool
		constexpr auto mRigid = 0x30; // RigidbodyInterpolationBehaviour
	}

	namespace n_ParseRecord {
		constexpr auto PRparseTypeEnum = 0x10; // InternalParseTypeE
		constexpr auto PRobjectTypeEnum = 0x14; // InternalObjectTypeE
		constexpr auto PRarrayTypeEnum = 0x18; // InternalArrayTypeE
		constexpr auto PRmemberTypeEnum = 0x1c; // InternalMemberTypeE
		constexpr auto PRmemberValueEnum = 0x20; // InternalMemberValueE
		constexpr auto PRobjectPositionEnum = 0x24; // InternalObjectPositionE
		constexpr auto PRname = 0x28; // string
		constexpr auto PRvalue = 0x30; // string
		constexpr auto PRvarValue = 0x38; // object
		constexpr auto PRkeyDt = 0x40; // string
		constexpr auto PRdtType = 0x48; // Type
		constexpr auto PRdtTypeCode = 0x50; // InternalPrimitiveTypeE
		constexpr auto PRisEnum = 0x54; // bool
		constexpr auto PRobjectId = 0x58; // long
		constexpr auto PRidRef = 0x60; // long
		constexpr auto PRarrayElementTypeString = 0x68; // string
		constexpr auto PRarrayElementType = 0x70; // Type
		constexpr auto PRisArrayVariant = 0x78; // bool
		constexpr auto PRarrayElementTypeCode = 0x7c; // InternalPrimitiveTypeE
		constexpr auto PRrank = 0x80; // int
		constexpr auto PRlengthA = 0x88; // int[]
		constexpr auto PRpositionA = 0x90; // int[]
		constexpr auto PRlowerBoundA = 0x98; // int[]
		constexpr auto PRupperBoundA = 0xa0; // int[]
		constexpr auto PRindexMap = 0xa8; // int[]
		constexpr auto PRmemberIndex = 0xb0; // int
		constexpr auto PRlinearlength = 0xb4; // int
		constexpr auto PRrectangularMap = 0xb8; // int[]
		constexpr auto PRisLowerBound = 0xc0; // bool
		constexpr auto PRtopId = 0xc8; // long
		constexpr auto PRheaderId = 0xd0; // long
		constexpr auto PRobjectInfo = 0xd8; // ReadObjectInfo
		constexpr auto PRisValueTypeFixup = 0xe0; // bool
		constexpr auto PRnewObj = 0xe8; // object
		constexpr auto PRobjectA = 0xf0; // object[]
		constexpr auto PRprimitiveArray = 0xf8; // PrimitiveArray
		constexpr auto PRisRegistered = 0x100; // bool
		constexpr auto PRmemberData = 0x108; // object[]
		constexpr auto PRsi = 0x110; // SerializationInfo
		constexpr auto PRnullCount = 0x118; // int
	}

	namespace n_DiscordHandlerMonobehaviour { // : MonoBehaviour
		constexpr auto mClient = 0x18; // Discord
		constexpr auto mActivity = 0x20; // Activity
		constexpr auto mActivityUpdateFlag = 0xa8; // bool
		constexpr auto mLastUpdate = 0xac; // float
	}

	namespace n_IconsUI.PlayerRoles {
		constexpr auto Roles = 0x10; // Sprite[]
		constexpr auto RolesInCircle = 0x18; // Sprite[]
	}

	namespace n_DefaultEventAttribute { // : Attribute
		constexpr auto name = 0x10; // string
	}

	namespace n_ArgumentCache { // : ISerializationCallbackReceiver
		constexpr auto m_ObjectArgument = 0x10; // Object
		constexpr auto m_ObjectArgumentAssemblyTypeName = 0x18; // string
		constexpr auto m_IntArgument = 0x20; // int
		constexpr auto m_FloatArgument = 0x24; // float
		constexpr auto m_StringArgument = 0x28; // string
		constexpr auto m_BoolArgument = 0x30; // bool
	}

	namespace n_SocketPermission { // : CodeAccessPermission
		constexpr auto m_acceptList = 0x10; // ArrayList
		constexpr auto m_connectList = 0x18; // ArrayList
		constexpr auto m_noRestriction = 0x20; // bool
	}

	namespace n_Level2Map {
		constexpr auto Source = 0x10; // byte
		constexpr auto Replace = 0x11; // byte
	}

	namespace n_RSACryptoServiceProvider { // : RSA
		constexpr auto store = 0x20; // KeyPairPersistence
		constexpr auto persistKey = 0x28; // bool
		constexpr auto persisted = 0x29; // bool
		constexpr auto privateKeyExportable = 0x2a; // bool
		constexpr auto m_disposed = 0x2b; // bool
		constexpr auto rsa = 0x30; // RSAManaged
	}

	namespace n_RushBeacon { // : MonoBehaviour
		constexpr auto PlantedLight = 0x18; // Light
		constexpr auto PlantingAudioSource = 0x20; // DistanceBasedAudioSource
		constexpr auto (Objective)k__BackingField = 0x28; // Objective
		constexpr auto mMap = 0x30; // RushBeaconWorldMap
		constexpr auto mNetView = 0x38; // NetView
		constexpr auto mPlantable = 0x40; // Plantable
		constexpr auto mAudioSources = 0x48; // DistanceBasedAudioSource[]
		constexpr auto mAttackerSpawns = 0x50; // List(Vector3)
		constexpr auto mDefenderSpawns = 0x58; // List(Vector3)
		constexpr auto (FastListIndexA)k__BackingField = 0x60; // int
		constexpr auto mUI = 0x68; // RushBeaconUI
		constexpr auto mBuilder = 0x70; // StringBuilder
		constexpr auto mServerPlanter = 0x78; // ulong
		constexpr auto mNumberOfPlants = 0x80; // int
		constexpr auto (IsPlanted)k__BackingField = 0x84; // bool
		constexpr auto (PlantNetworkTime)k__BackingField = 0x88; // float
		constexpr auto (ExplodeNetworkTime)k__BackingField = 0x8c; // float
		constexpr auto (Position)k__BackingField = 0x90; // Vector3
		constexpr auto (Char)k__BackingField = 0x9c; // char
		constexpr auto (TargetSquadsString)k__BackingField = 0xa0; // string
		constexpr auto (TargetSquadStringVersion)k__BackingField = 0xa8; // int
	}

	namespace n_OverlayLog { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto Prefab = 0x20; // GameObject
		constexpr auto Parent = 0x28; // Transform
		constexpr auto mPool = 0x30; // UIPool(OverlayLogItem)
		constexpr auto mVerticalList = 0x38; // VerticalList
	}

	namespace n_NameObjectCollectionBase.NameObjectKeysEnumerator { // : IEnumerator
		constexpr auto _pos = 0x10; // int
		constexpr auto _coll = 0x18; // NameObjectCollectionBase
		constexpr auto _version = 0x20; // int
	}

	namespace n_FinalBlitPass { // : ScriptableRenderPass
		constexpr auto m_Source = 0x68; // RenderTargetHandle
		constexpr auto m_BlitMaterial = 0x70; // Material
		constexpr auto m_TargetDimension = 0x78; // TextureDimension
	}

	namespace n_TankTurretBehaviour { // : SeatBehaviour
		constexpr auto Item = 0x48; // TankTurret
		constexpr auto LocalObj = 0x50; // GameObject
		constexpr auto YAxis = 0x58; // Transform
		constexpr auto XAxis = 0x60; // Transform
		constexpr auto ShotPoint = 0x68; // Transform
		constexpr auto MachineGunShotPointVisual = 0x70; // Transform
		constexpr auto MachineGunShotPoint = 0x78; // Transform
		constexpr auto Camera = 0x80; // Camera
		constexpr auto ZoomedCameraPosition = 0x88; // Vector3
		constexpr auto DefaultCameraPosition = 0x94; // Vector3
		constexpr auto BarrelTransform = 0xa0; // Transform
		constexpr auto CurrentYAxis = 0xa8; // float
		constexpr auto CurrentXAxis = 0xac; // float
		constexpr auto (SmokeReloadState)k__BackingField = 0xb0; // float
		constexpr auto (ShellLoadState)k__BackingField = 0xb4; // float
		constexpr auto (MachineGunReloadState)k__BackingField = 0xb8; // float
		constexpr auto (TargetShellType)k__BackingField = 0xbc; // TankCannonType
		constexpr auto vehicle = 0xc0; // TankBehaviour
		constexpr auto ejectingShellSound = 0xc8; // VehicleAudioEvent
		constexpr auto injectingShellSound = 0xd0; // VehicleAudioEvent
		constexpr auto movementSound = 0xd8; // VehicleAudioSource
		constexpr auto mTurretWeaponAccuracy = 0xe0; // WeaponAccuracy
		constexpr auto horizontalDegree = 0xe8; // float
		constexpr auto verticalDegree = 0xec; // float
		constexpr auto LocalRemoteAngles = 0xf0; // Vector2
		constexpr auto LocalRemoteAnglesCurrent = 0xf8; // Vector2
		constexpr auto LocalRemoteYaxisRotation = 0x100; // Quaternion
		constexpr auto LocalRemoteXaxisRotation = 0x110; // Quaternion
		constexpr auto moveFlagX = 0x120; // bool
		constexpr auto moveFlagY = 0x121; // bool
		constexpr auto moveBarrelFlag = 0x122; // bool
		constexpr auto stabilizationEnabled = 0x123; // bool
		constexpr auto zoomLevel = 0x124; // int
		constexpr auto lastShot = 0x128; // float
		constexpr auto lastMachineGunShot = 0x12c; // float
		constexpr auto animationMaxLenght = 0x130; // float
		constexpr auto horizontalVelocity = 0x134; // float
		constexpr auto targetEjectingSound = 0x138; // float
		constexpr auto targetEjectingSoundPitch = 0x13c; // float
		constexpr auto targetInjectingSound = 0x140; // float
		constexpr auto targetInjectingSoundPitch = 0x144; // float
		constexpr auto supplyCounter = 0x148; // float
		constexpr auto smokeRequested = 0x14c; // bool
		constexpr auto SmokeLeft = 0x150; // int
		constexpr auto HELeft = 0x154; // int
		constexpr auto APLeft = 0x158; // int
		constexpr auto MachineGunAmmoLeft = 0x15c; // int
		constexpr auto MachineGunAmmoLoaded = 0x160; // int
	}

	namespace n_MemberInfoSerializationHolder { // : ISerializable
		constexpr auto m_memberName = 0x10; // string
		constexpr auto m_reflectedType = 0x18; // RuntimeType
		constexpr auto m_signature = 0x20; // string
		constexpr auto m_signature2 = 0x28; // string
		constexpr auto m_memberType = 0x30; // MemberTypes
		constexpr auto m_info = 0x38; // SerializationInfo
	}

	namespace n_DynamicDistanceBasedLOD { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto AutoInitialize = 0x1c; // bool
		constexpr auto LOD0 = 0x20; // List(Renderer)
		constexpr auto LOD1 = 0x28; // List(Renderer)
		constexpr auto LOD0Distance = 0x30; // float
		constexpr auto LOD1Distance = 0x34; // float
		constexpr auto LOD0DistanceSqr = 0x38; // float
		constexpr auto LOD1DistanceSqr = 0x3c; // float
		constexpr auto isActive = 0x40; // bool
		constexpr auto Position = 0x44; // Vector3
		constexpr auto ScreenHeightRaw = 0x50; // float
		constexpr auto ScreenHeight = 0x54; // float
		constexpr auto inFrustum = 0x58; // bool
		constexpr auto m_activeLOD = 0x5c; // int
		constexpr auto m_targetLOD = 0x60; // int
	}

	namespace n_LoadoutContentScale { // : MonoBehaviour
		constexpr auto lockedScale = 0x18; // float
	}

	namespace n_ProtoResourceType {
		constexpr auto resourceType = 0x10; // ResourceType
		constexpr auto selected = 0x14; // bool
		constexpr auto name = 0x18; // string
	}

	namespace n_IntroGPortal { // : MonoBehaviour
		constexpr auto lifeTime = 0x18; // float
	}

	namespace n_Controllers {
		constexpr auto VerticalSensitivity = 0x10; // float
		constexpr auto HorizontalSensitivity = 0x14; // float
		constexpr auto InvertVertical = 0x18; // bool
		constexpr auto InvertHorizontal = 0x19; // bool
		constexpr auto DirectionalClimbing = 0x1a; // bool
		constexpr auto ToggleAim = 0x1b; // bool
		constexpr auto ToggleLean = 0x1c; // bool
		constexpr auto ToggleDrag = 0x1d; // bool
		constexpr auto SwapReloading = 0x1e; // bool
		constexpr auto ADSVerticalSensitivity = 0x20; // float
		constexpr auto ADSHorizontalSensitivity = 0x24; // float
		constexpr auto _1Sensitivity = 0x28; // float
		constexpr auto _2Sensitivity = 0x2c; // float
		constexpr auto _3Sensitivity = 0x30; // float
		constexpr auto _4Sensitivity = 0x34; // float
		constexpr auto _6Sensitivity = 0x38; // float
		constexpr auto _8Sensitivity = 0x3c; // float
		constexpr auto _12Sensitivity = 0x40; // float
		constexpr auto _15Sensitivity = 0x44; // float
		constexpr auto _20Sensitivity = 0x48; // float
		constexpr auto _40Sensitivity = 0x4c; // float
	}

	namespace n_MapVehicleWorldObject { // : MapWorldBehaviour
		constexpr auto (Vehicle)k__BackingField = 0x40; // VehicleInstance
		constexpr auto (MapUI)k__BackingField = 0x48; // MapVehicleUIObject
		constexpr auto mVisibleFlag = 0x50; // bool
		constexpr auto mLastState = 0x54; // MapVehicleWorldObject.State
		constexpr auto mIconColor = 0x58; // Color
	}

	namespace n_InternalFE {
		constexpr auto FEtypeFormat = 0x10; // FormatterTypeStyle
		constexpr auto FEassemblyFormat = 0x14; // FormatterAssemblyStyle
		constexpr auto FEsecurityLevel = 0x18; // TypeFilterLevel
		constexpr auto FEserializerTypeEnum = 0x1c; // InternalSerializerTypeE
	}

	namespace n_AnimationOutputWeightProcessor { // : ITimelineEvaluateCallback
		constexpr auto m_Output = 0x10; // AnimationPlayableOutput
		constexpr auto m_Mixers = 0x20; // List(AnimationOutputWeightProcessor.WeightInfo)
	}

	namespace n_Renderer2D { // : ScriptableRenderer
		constexpr auto m_ColorGradingLutPass = 0x80; // ColorGradingLutPass
		constexpr auto m_Render2DLightingPass = 0x88; // Render2DLightingPass
		constexpr auto m_PostProcessPass = 0x90; // PostProcessPass
		constexpr auto m_FinalBlitPass = 0x98; // FinalBlitPass
		constexpr auto m_FinalPostProcessPass = 0xa0; // PostProcessPass
		constexpr auto m_UseDepthStencilBuffer = 0xa8; // bool
		constexpr auto m_CreateColorTexture = 0xa9; // bool
		constexpr auto m_CreateDepthTexture = 0xaa; // bool
		constexpr auto k_ColorTextureHandle = 0xac; // RenderTargetHandle
		constexpr auto k_DepthTextureHandle = 0xb0; // RenderTargetHandle
		constexpr auto k_AfterPostProcessColorHandle = 0xb4; // RenderTargetHandle
		constexpr auto k_ColorGradingLutHandle = 0xb8; // RenderTargetHandle
		constexpr auto m_BlitMaterial = 0xc0; // Material
		constexpr auto m_Renderer2DData = 0xc8; // Renderer2DData
	}

	namespace n_BuildableHitReceiver { // : MonoBehaviour
		constexpr auto Parent = 0x18; // Buildable
	}

	namespace n_Uri.UriInfo {
		constexpr auto Host = 0x10; // string
		constexpr auto ScopeId = 0x18; // string
		constexpr auto String = 0x20; // string
		constexpr auto Offset = 0x28; // Uri.Offset
		constexpr auto DnsSafeHost = 0x38; // string
		constexpr auto MoreInfo = 0x40; // Uri.MoreInfo
	}

	namespace n_GetTerrainHeightNormalMap { // : MonoBehaviour
		constexpr auto targetTerrainData = 0x18; // TerrainData
		constexpr auto savePathTerrainHeightNormalMap = 0x20; // string
	}

	namespace n_DebugUI.HistoryBoolField { // : DebugUI.BoolField
		constexpr auto (historyGetter)k__BackingField = 0x50; // Func(bool)[]
	}

	namespace n_ReflectionMethodsCache {
		constexpr auto raycast3D = 0x10; // ReflectionMethodsCache.Raycast3DCallback
		constexpr auto raycast3DAll = 0x18; // ReflectionMethodsCache.RaycastAllCallback
		constexpr auto getRaycastNonAlloc = 0x20; // ReflectionMethodsCache.GetRaycastNonAllocCallback
		constexpr auto raycast2D = 0x28; // ReflectionMethodsCache.Raycast2DCallback
		constexpr auto getRayIntersectionAll = 0x30; // ReflectionMethodsCache.GetRayIntersectionAllCallback
		constexpr auto getRayIntersectionAllNonAlloc = 0x38; // ReflectionMethodsCache.GetRayIntersectionAllNonAllocCallback
	}

	namespace n_Type { // : MemberInfo
		constexpr auto _impl = 0x10; // RuntimeTypeHandle
	}

	namespace n_XPathNodeInfoAtom {
		constexpr auto localName = 0x10; // string
		constexpr auto namespaceUri = 0x18; // string
		constexpr auto prefix = 0x20; // string
		constexpr auto baseUri = 0x28; // string
		constexpr auto pageParent = 0x30; // XPathNode[]
		constexpr auto pageSibling = 0x38; // XPathNode[]
		constexpr auto pageSimilar = 0x40; // XPathNode[]
		constexpr auto doc = 0x48; // XPathDocument
		constexpr auto pageInfo = 0x50; // XPathNodePageInfo
	}

	namespace n_ContinuationTaskFromTask { // : Task
		constexpr auto m_antecedent = 0x50; // Task
	}

	namespace n_ConstructionCall { // : MethodCall
		constexpr auto _activator = 0x68; // IActivator
		constexpr auto _activationAttributes = 0x70; // object[]
		constexpr auto _contextProperties = 0x78; // IList
		constexpr auto _activationType = 0x80; // Type
		constexpr auto _activationTypeName = 0x88; // string
		constexpr auto _isContextOk = 0x90; // bool
		constexpr auto _sourceProxy = 0x98; // RemotingProxy
	}

	namespace n_PostProcessPassCompat { // : ScriptableRenderPass
		constexpr auto m_Source = 0x68; // RenderTargetHandle
		constexpr auto m_Destination = 0x6c; // RenderTargetHandle
		constexpr auto m_Descriptor = 0x70; // RenderTextureDescriptor
		constexpr auto m_TemporaryColorTexture = 0xa4; // RenderTargetHandle
		constexpr auto m_IsOpaquePostProcessing = 0xa8; // bool
	}

	namespace n_PlayingThunder { // : IFastListItemA
		constexpr auto StartTime = 0x10; // float
		constexpr auto EndTime = 0x14; // float
		constexpr auto Item = 0x18; // ThunderItem
		constexpr auto AudioPlayFlag = 0x20; // bool
		constexpr auto AudioSource = 0x28; // AudioSource
		constexpr auto (FastListIndexA)k__BackingField = 0x30; // int
	}

	namespace n_TokenizerShortBlock {
		constexpr auto m_block = 0x10; // short[]
		constexpr auto m_next = 0x18; // TokenizerShortBlock
	}

	namespace n_CachedCodeEntry {
		constexpr auto _key = 0x10; // string
		constexpr auto _code = 0x18; // RegexCode
		constexpr auto _caps = 0x20; // Hashtable
		constexpr auto _capnames = 0x28; // Hashtable
		constexpr auto _capslist = 0x30; // string[]
		constexpr auto _capsize = 0x38; // int
		constexpr auto _factory = 0x40; // RegexRunnerFactory
		constexpr auto _runnerref = 0x48; // ExclusiveReference
		constexpr auto _replref = 0x50; // SharedReference
	}

	namespace n_SortKeyBuffer {
		constexpr auto l1b = 0x10; // byte[]
		constexpr auto l2b = 0x18; // byte[]
		constexpr auto l3b = 0x20; // byte[]
		constexpr auto l4sb = 0x28; // byte[]
		constexpr auto l4tb = 0x30; // byte[]
		constexpr auto l4kb = 0x38; // byte[]
		constexpr auto l4wb = 0x40; // byte[]
		constexpr auto l5b = 0x48; // byte[]
		constexpr auto source = 0x50; // string
		constexpr auto l1 = 0x58; // int
		constexpr auto l2 = 0x5c; // int
		constexpr auto l3 = 0x60; // int
		constexpr auto l4s = 0x64; // int
		constexpr auto l4t = 0x68; // int
		constexpr auto l4k = 0x6c; // int
		constexpr auto l4w = 0x70; // int
		constexpr auto l5 = 0x74; // int
		constexpr auto lcid = 0x78; // int
		constexpr auto options = 0x7c; // CompareOptions
		constexpr auto processLevel2 = 0x80; // bool
		constexpr auto frenchSort = 0x81; // bool
		constexpr auto frenchSorted = 0x82; // bool
	}

	namespace n_Ucs4Encoding { // : Encoding
		constexpr auto ucs4Decoder = 0x38; // Ucs4Decoder
	}

	namespace n_DebugUI.Panel { // : DebugUI.IContainer
		constexpr auto (flags)k__BackingField = 0x10; // DebugUI.Flags
		constexpr auto (displayName)k__BackingField = 0x18; // string
		constexpr auto (groupIndex)k__BackingField = 0x20; // int
		constexpr auto (children)k__BackingField = 0x28; // ObservableList(DebugUI.Widget)
		constexpr auto onSetDirty = 0x30; // Action(DebugUI.Panel)
	}

	namespace n_Dropdown.OptionData {
		constexpr auto m_Text = 0x10; // string
		constexpr auto m_Image = 0x18; // Sprite
	}

	namespace n_DebugUIHandlerPanel { // : MonoBehaviour
		constexpr auto nameLabel = 0x18; // Text
		constexpr auto scrollRect = 0x20; // ScrollRect
		constexpr auto viewport = 0x28; // RectTransform
		constexpr auto m_ScrollTransform = 0x30; // RectTransform
		constexpr auto m_ContentTransform = 0x38; // RectTransform
		constexpr auto m_MaskTransform = 0x40; // RectTransform
		constexpr auto m_Panel = 0x48; // DebugUI.Panel
	}

	namespace n_Filter { // : AstNode
		constexpr auto input = 0x10; // AstNode
		constexpr auto condition = 0x18; // AstNode
	}

	namespace n_DebugUIHandlerUIntField { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueLabel = 0x60; // Text
		constexpr auto m_Field = 0x68; // DebugUI.UIntField
	}

	namespace n_EnvironmentObject { // : MonoBehaviour
		constexpr auto RuntimeID = 0x18; // uint
		constexpr auto Position = 0x1c; // Vector3
		constexpr auto Bounds = 0x28; // Bounds
		constexpr auto Volume = 0x40; // float
		constexpr auto IsConsideredAsDestroyed = 0x44; // bool
		constexpr auto BreakSound = 0x48; // DebrisSoundCollection
		constexpr auto ParentStructer = 0x50; // Structure
		constexpr auto IgnoreRuntimeLodMesh = 0x58; // bool
		constexpr auto Lod0StartIndex = 0x5c; // int
		constexpr auto Lod0Lenght = 0x60; // int
		constexpr auto Lod1StartIndex = 0x64; // int
		constexpr auto Lod1Lenght = 0x68; // int
		constexpr auto Lod2StartIndex = 0x6c; // int
		constexpr auto Lod2Lenght = 0x70; // int
		constexpr auto wallBuilder = 0x78; // WallBuilder
		constexpr auto Durability = 0x80; // float
		constexpr auto Type = 0x84; // EnvironmentType
		constexpr auto OnDestroy = 0x88; // GameObject
		constexpr auto LOD1Version = 0x90; // Mesh
		constexpr auto Bullet = 0x98; // bool
		constexpr auto Sledgehammer = 0x99; // bool
		constexpr auto LowImpactExplosion = 0x9a; // bool
		constexpr auto HighImpactExplosion = 0x9b; // bool
		constexpr auto LaunchedShell = 0x9c; // bool
		constexpr auto LightVehicleVelocityKeep = 0xa0; // float
		constexpr auto HeavyVehicleVelocityKeep = 0xa4; // float
		constexpr auto BreakableByLightVehicle = 0xa8; // bool
		constexpr auto BreakableByHeavyVehicle = 0xa9; // bool
		constexpr auto Wall_IgnoreEditorCollision = 0xaa; // bool
		constexpr auto Wall_IgnoreLODVersion = 0xab; // bool
		constexpr auto Wall_AllSidesVisible = 0xac; // bool
		constexpr auto Wall_ForwardVisible = 0xad; // bool
		constexpr auto Wall_BackwardVisible = 0xae; // bool
		constexpr auto Wall_Dependeds = 0xb0; // List(EnvironmentObject)
		constexpr auto (isDestroyed)k__BackingField = 0xb8; // bool
		constexpr auto (isGodMode)k__BackingField = 0xb9; // bool
	}

	namespace n_DebrisRegion.DebrisBound {
		constexpr auto mLockObject = 0x10; // object
		constexpr auto active = 0x18; // bool
		constexpr auto inFrustum = 0x19; // bool
		constexpr auto Bound = 0x1c; // Bounds
		constexpr auto BoundMin = 0x34; // Vector3
		constexpr auto BoundMax = 0x40; // Vector3
		constexpr auto List = 0x50; // FastListA(BrickInstance)
	}

	namespace n_Dropdown.DropdownItem { // : MonoBehaviour
		constexpr auto m_Text = 0x18; // Text
		constexpr auto m_Image = 0x20; // Image
		constexpr auto m_RectTransform = 0x28; // RectTransform
		constexpr auto m_Toggle = 0x30; // Toggle
	}

	namespace n_WeaponManager.Debug {
		constexpr auto debug_ammo_count = 0x10; // int
		constexpr auto debug_wasReloading = 0x14; // bool
		constexpr auto boltActionRequired = 0x15; // bool
		constexpr auto nextShotTimer = 0x18; // float
		constexpr auto remainingReload = 0x1c; // float
		constexpr auto boltActionLeft = 0x20; // float
	}

	namespace n_GregorianCalendarHelper {
		constexpr auto m_maxYear = 0x10; // int
		constexpr auto m_minYear = 0x14; // int
		constexpr auto m_Cal = 0x18; // Calendar
		constexpr auto m_EraInfo = 0x20; // EraInfo[]
		constexpr auto m_eras = 0x28; // int[]
		constexpr auto m_minDate = 0x30; // DateTime
	}

	namespace n_ObjectInfo {
		constexpr auto parentObject = 0x10; // GameObject
		constexpr auto bounds = 0x18; // Bounds
	}

	namespace n_LockableBool { // : IEquatable(bool)
		constexpr auto Value = 0x10; // bool
	}

	namespace n_UnlockRankUpUI { // : MonoBehaviour
		constexpr auto Main = 0x18; // GameObject
		constexpr auto RankIcon = 0x20; // Image
		constexpr auto RankText = 0x28; // TextMeshProUGUI
		constexpr auto MainUnlock = 0x30; // GameObject
		constexpr auto UnlockImage = 0x38; // Image
		constexpr auto UnlockText = 0x40; // TextMeshProUGUI
		constexpr auto a = 0x48; // bool
		constexpr auto b = 0x49; // bool
		constexpr auto Rank = 0x50; // AudioClip[]
		constexpr auto Attachment = 0x58; // AudioClip[]
		constexpr auto Weapon = 0x60; // AudioClip[]
		constexpr auto canvas = 0x68; // Canvas
		constexpr auto queue = 0x70; // Queue(UnlockRankUpUI.UnlockOrRank)
		constexpr auto (TickIndex8)k__BackingField = 0x78; // int
	}

	namespace n_ToolCamera { // : MonoBehaviour
		constexpr auto (TickIndex5)k__BackingField = 0x18; // int
		constexpr auto SkipFrames = 0x1c; // int
		constexpr auto HorizontalAxis = 0x20; // Axis
		constexpr auto InvertHorizontal = 0x24; // bool
		constexpr auto VerticalAxis = 0x28; // Axis
		constexpr auto InvertVertical = 0x2c; // bool
		constexpr auto Multiplier = 0x30; // float
		constexpr auto m = 0x34; // float
		constexpr auto ParentAnimation = 0x38; // Animation
		constexpr auto latestEular = 0x40; // Vector3
		constexpr auto aimingL = 0x4c; // float
	}

	namespace n_ConstraintSetting {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_FontData { // : ISerializationCallbackReceiver
		constexpr auto m_Font = 0x10; // Font
		constexpr auto m_FontSize = 0x18; // int
		constexpr auto m_FontStyle = 0x1c; // FontStyle
		constexpr auto m_BestFit = 0x20; // bool
		constexpr auto m_MinSize = 0x24; // int
		constexpr auto m_MaxSize = 0x28; // int
		constexpr auto m_Alignment = 0x2c; // TextAnchor
		constexpr auto m_AlignByGeometry = 0x30; // bool
		constexpr auto m_RichText = 0x31; // bool
		constexpr auto m_HorizontalOverflow = 0x34; // HorizontalWrapMode
		constexpr auto m_VerticalOverflow = 0x38; // VerticalWrapMode
		constexpr auto m_LineSpacing = 0x3c; // float
	}

	namespace n_MainMenu_InClan_List_Leave { // : MainMenu_InClan_List
		constexpr auto Title = 0x30; // TextMeshProUGUI
		constexpr auto Icon = 0x38; // RawImage
		constexpr auto LeaveIcon = 0x40; // Texture2D
		constexpr auto TrashIcon = 0x48; // Texture2D
		constexpr auto QuestionPage = 0x50; // GameObject
		constexpr auto QuestionTitle = 0x58; // TextMeshProUGUI
		constexpr auto last_state = 0x60; // int
	}

	namespace n_GunGameFFASettings { // : GamemodeSettingsBase
		constexpr auto (GunGameFFA_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
	}

	namespace n_FieldMetadata {
		constexpr auto name = 0x10; // string
		constexpr auto nameSize = 0x18; // int
		constexpr auto tags = 0x1c; // EventFieldTags
		constexpr auto custom = 0x20; // byte[]
		constexpr auto fixedCount = 0x28; // ushort
		constexpr auto inType = 0x2a; // byte
		constexpr auto outType = 0x2b; // byte
	}

	namespace n_THPLod { // : MonoBehaviour
		constexpr auto LOD0Active = 0x18; // Renderer[]
		constexpr auto LOD1Active = 0x20; // Renderer[]
		constexpr auto LOD2Active = 0x28; // Renderer[]
	}

	namespace n_MedicKitStanding { // : ReplicaGadget
		constexpr auto Item = 0x48; // AGadget
		constexpr auto GUI = 0x50; // TeamGUI
		constexpr auto LOD = 0x58; // DynamicDistanceBasedLOD
		constexpr auto rigid = 0x60; // Rigidbody
		constexpr auto uploadFlag = 0x68; // bool
		constexpr auto clientVelocity = 0x6c; // Vector3
		constexpr auto clientPosition = 0x78; // Vector3
		constexpr auto serverPosition = 0x84; // Vector3
		constexpr auto clientRotation = 0x90; // Quaternion
		constexpr auto serverRotation = 0xa0; // Quaternion
		constexpr auto client2serverMovement = 0xb0; // Vector3
		constexpr auto timeServerTookOwner = 0xbc; // float
	}

	namespace n_Hacd { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _callbackFunctionUnmanaged = 0x18; // Hacd.CallbackFunctionUnmanagedDelegate
		constexpr auto _callbackFunction = 0x20; // Hacd.CallBackFunction
	}

	namespace n_SelfAudioPlayer { // : MonoBehaviour
		constexpr auto clips = 0x18; // AudioClip[]
		constexpr auto Volume = 0x20; // float
		constexpr auto MaxRange = 0x24; // float
	}

	namespace n_Maps { // : ScriptableObject
		constexpr auto AllMaps = 0x18; // Map[]
	}

	namespace n_Operand { // : AstNode
		constexpr auto type = 0x10; // XPathResultType
		constexpr auto val = 0x18; // object
	}

	namespace n_BurstCompiler.FakeDelegate {
		constexpr auto (Method)k__BackingField = 0x10; // MethodInfo
	}

	namespace n_SquadAbilityManager {
		constexpr auto mAbilityCooldowns = 0x10; // Dictionary(int, float)
		constexpr auto AbilityCounter = 0x18; // Dictionary(SquadAbility, int)
		constexpr auto WorldBehaviours = 0x20; // HashSet(SquadAbilityBehaviour)
		constexpr auto RallyPoint = 0x28; // SquadAbilityRallyPointBehaviour
	}

	namespace n_PublicKey {
		constexpr auto _key = 0x10; // AsymmetricAlgorithm
		constexpr auto _keyValue = 0x18; // AsnEncodedData
		constexpr auto _params = 0x20; // AsnEncodedData
		constexpr auto _oid = 0x28; // Oid
	}

	namespace n_DebugUIHandlerToggle { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // Toggle
		constexpr auto checkmarkImage = 0x68; // Image
		constexpr auto m_Field = 0x70; // DebugUI.BoolField
	}

	namespace n_UIFoldout { // : Toggle
		constexpr auto content = 0x120; // GameObject
		constexpr auto arrowOpened = 0x128; // GameObject
		constexpr auto arrowClosed = 0x130; // GameObject
	}

	namespace n_ImageManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
	}

	namespace n_FtpWebRequest { // : WebRequest
		constexpr auto requestUri = 0x38; // Uri
		constexpr auto file_name = 0x40; // string
		constexpr auto servicePoint = 0x48; // ServicePoint
		constexpr auto origDataStream = 0x50; // Stream
		constexpr auto dataStream = 0x58; // Stream
		constexpr auto controlStream = 0x60; // Stream
		constexpr auto controlReader = 0x68; // StreamReader
		constexpr auto credentials = 0x70; // NetworkCredential
		constexpr auto hostEntry = 0x78; // IPHostEntry
		constexpr auto localEndPoint = 0x80; // IPEndPoint
		constexpr auto remoteEndPoint = 0x88; // IPEndPoint
		constexpr auto proxy = 0x90; // IWebProxy
		constexpr auto timeout = 0x98; // int
		constexpr auto rwTimeout = 0x9c; // int
		constexpr auto offset = 0xa0; // long
		constexpr auto binary = 0xa8; // bool
		constexpr auto enableSsl = 0xa9; // bool
		constexpr auto usePassive = 0xaa; // bool
		constexpr auto keepAlive = 0xab; // bool
		constexpr auto method = 0xb0; // string
		constexpr auto renameTo = 0xb8; // string
		constexpr auto locker = 0xc0; // object
		constexpr auto requestState = 0xc8; // FtpWebRequest.RequestState
		constexpr auto asyncResult = 0xd0; // FtpAsyncResult
		constexpr auto ftpResponse = 0xd8; // FtpWebResponse
		constexpr auto requestStream = 0xe0; // Stream
		constexpr auto initial_path = 0xe8; // string
		constexpr auto dataEncoding = 0xf0; // Encoding
	}

	namespace n_ToggleGroup { // : UIBehaviour
		constexpr auto m_AllowSwitchOff = 0x18; // bool
		constexpr auto m_Toggles = 0x20; // List(Toggle)
	}

	namespace n_OverlapCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_NamespaceListNode { // : SyntaxTreeNode
		constexpr auto namespaceList = 0x10; // NamespaceList
		constexpr auto particle = 0x18; // object
	}

	namespace n_ArraySpec { // : ModifierSpec
		constexpr auto dimensions = 0x10; // int
		constexpr auto bound = 0x14; // bool
	}

	namespace n_PairSet {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_Transform.Enumerator { // : IEnumerator
		constexpr auto outer = 0x10; // Transform
		constexpr auto currentIndex = 0x18; // int
	}

	namespace n_XmlElementAttribute { // : Attribute
		constexpr auto elementName = 0x10; // string
		constexpr auto type = 0x18; // Type
		constexpr auto order = 0x20; // int
	}

	namespace n_RTHandleSystem { // : IDisposable
		constexpr auto m_HardwareDynamicResRequested = 0x10; // bool
		constexpr auto m_ScaledRTSupportsMSAA = 0x11; // bool
		constexpr auto m_ScaledRTCurrentMSAASamples = 0x14; // MSAASamples
		constexpr auto m_AutoSizedRTs = 0x18; // HashSet(RTHandle)
		constexpr auto m_AutoSizedRTsArray = 0x20; // RTHandle[]
		constexpr auto m_ResizeOnDemandRTs = 0x28; // HashSet(RTHandle)
		constexpr auto m_RTHandleProperties = 0x30; // RTHandleProperties
		constexpr auto m_MaxWidths = 0x60; // int
		constexpr auto m_MaxHeights = 0x64; // int
	}

	namespace n_TokenizerStringBlock {
		constexpr auto m_block = 0x10; // string[]
		constexpr auto m_next = 0x18; // TokenizerStringBlock
	}

	namespace n_PlayerWarnScreen { // : MonoBehaviour
		constexpr auto WarnReason = 0x18; // TextMeshProUGUI
		constexpr auto Skip = 0x20; // TextMeshProUGUI
		constexpr auto Value = 0x28; // RectTransform
		constexpr auto CanvasGroup = 0x30; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0x38; // int
		constexpr auto mValue = 0x3c; // float
		constexpr auto mInitTime = 0x40; // float
	}

	namespace n_SecondPhysicsBehaviour { // : MonoBehaviour
		constexpr auto accumulator_physics = 0x18; // double
		constexpr auto working = 0x20; // bool
	}

	namespace n_TransformParametersManager {
		constexpr auto m_BaseSettings = 0x10; // List(TransformComponentsSettings)
		constexpr auto settingsTypes = 0x18; // Dictionary(Type, TransformComponentsAttribute)
	}

	namespace n_VehicleColliderProvider { // : ExistanceProvider
		constexpr auto Vehicle = 0x20; // VehicleInstance
	}

	namespace n_SelfAudioSourcePlayer { // : MonoBehaviour
		constexpr auto clips = 0x18; // AudioClip[]
	}

	namespace n_TypeInitializationException { // : SystemException
		constexpr auto _typeName = 0x88; // string
	}

	namespace n_CopyColorPass { // : ScriptableRenderPass
		constexpr auto m_SampleOffsetShaderHandle = 0x68; // int
		constexpr auto m_SamplingMaterial = 0x70; // Material
		constexpr auto m_DownsamplingMethod = 0x78; // Downsampling
		constexpr auto (source)k__BackingField = 0x80; // RenderTargetIdentifier
		constexpr auto (destination)k__BackingField = 0xa8; // RenderTargetHandle
	}

	namespace n_GameScreen_Flir { // : MonoBehaviour
		constexpr auto c = 0x18; // CanvasGroup
		constexpr auto valu = 0x20; // RectTransform
		constexpr auto valim = 0x28; // RawImage
		constexpr auto mode = 0x30; // TextMeshProUGUI
		constexpr auto tc = 0x38; // CanvasGroup
		constexpr auto (TickIndex8)k__BackingField = 0x40; // int
		constexpr auto isActive = 0x44; // bool
		constexpr auto canChange = 0x45; // bool
	}

	namespace n_Queue.QueueEnumerator { // : IEnumerator
		constexpr auto _q = 0x10; // Queue
		constexpr auto _index = 0x18; // int
		constexpr auto _version = 0x1c; // int
		constexpr auto currentElement = 0x20; // object
	}

	namespace n_DebugUIHandlerVector4 { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // UIFoldout
		constexpr auto fieldX = 0x68; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldY = 0x70; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldZ = 0x78; // DebugUIHandlerIndirectFloatField
		constexpr auto fieldW = 0x80; // DebugUIHandlerIndirectFloatField
		constexpr auto m_Field = 0x88; // DebugUI.Vector4Field
		constexpr auto m_Container = 0x90; // DebugUIHandlerContainer
	}

	namespace n_ContactJoint { // : Joint
		constexpr auto _rPos = 0x20; // Vector3Array
	}

	namespace n_MenuControllers { // : IEnumerable(IOptionsElement)
		constexpr auto VerticalSensitivity = 0x10; // SliderBehaviour
		constexpr auto HorizontalSensitivity = 0x18; // SliderBehaviour
		constexpr auto InvertVertical = 0x20; // ToggleBehaviour
		constexpr auto InvertHorizontal = 0x28; // ToggleBehaviour
		constexpr auto DirectionalClimbing = 0x30; // ToggleBehaviour
		constexpr auto ToggleAim = 0x38; // ToggleBehaviour
		constexpr auto ToggleLean = 0x40; // ToggleBehaviour
		constexpr auto SwapReloading = 0x48; // ToggleBehaviour
		constexpr auto ToggleDrag = 0x50; // ToggleBehaviour
		constexpr auto ADSVerticalSensitivity = 0x58; // SliderBehaviour
		constexpr auto ADSHorizontalSensitivity = 0x60; // SliderBehaviour
		constexpr auto _1Sensitivity = 0x68; // SliderBehaviour
		constexpr auto _2Sensitivity = 0x70; // SliderBehaviour
		constexpr auto _3Sensitivity = 0x78; // SliderBehaviour
		constexpr auto _4Sensitivity = 0x80; // SliderBehaviour
		constexpr auto _6Sensitivity = 0x88; // SliderBehaviour
		constexpr auto _8Sensitivity = 0x90; // SliderBehaviour
		constexpr auto _12Sensitivity = 0x98; // SliderBehaviour
		constexpr auto _15Sensitivity = 0xa0; // SliderBehaviour
		constexpr auto _20Sensitivity = 0xa8; // SliderBehaviour
		constexpr auto _40Sensitivity = 0xb0; // SliderBehaviour
	}

	namespace n_TreePrototype {
		constexpr auto m_Prefab = 0x10; // GameObject
		constexpr auto m_BendFactor = 0x18; // float
	}

	namespace n_TypeInferenceRuleAttribute { // : Attribute
		constexpr auto _rule = 0x10; // string
	}

	namespace n_BvhTree { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_Font { // : Object
		constexpr auto m_FontTextureRebuildCallback = 0x18; // Font.FontTextureRebuildCallback
	}

	namespace n_LoadoutToolSelection { // : MonoBehaviour
		constexpr auto Prefab = 0x18; // GameObject
		constexpr auto PrefabTitle = 0x20; // GameObject
		constexpr auto Parent = 0x28; // Transform
		constexpr auto Line = 0x30; // LoadoutToolLine
		constexpr auto spawnedObjects = 0x38; // List(LoadoutToolSelectionElement)
		constexpr auto spawnedTitles = 0x40; // List(TextMeshProUGUI)
		constexpr auto counter = 0x48; // int
		constexpr auto latestIndex = 0x4c; // LoadoutIndex
		constexpr auto poolElements = 0x50; // UIPool(LoadoutToolSelectionElement)
		constexpr auto poolTitles = 0x58; // UIPool(TextMeshProUGUI)
	}

	namespace n_FlagsSettings {
		constexpr auto tagsSelectedType = 0x10; // TagsSelectedType
		constexpr auto lightmapStatic = 0x14; // bool
		constexpr auto batchingStatic = 0x15; // bool
		constexpr auto occludeeStatic = 0x16; // bool
		constexpr auto occluderStatic = 0x17; // bool
		constexpr auto navigationStatic = 0x18; // bool
		constexpr auto offMeshLinkGeneration = 0x19; // bool
		constexpr auto reflectionProbeStatic = 0x1a; // bool
	}

	namespace n_RushGamemodeBounds { // : MonoBehaviour
		constexpr auto Type = 0x18; // RushBoundType
		constexpr auto IsMainSafeZone = 0x1c; // bool
		constexpr auto Points = 0x20; // List(Vector3)
	}

	namespace n_TerrainTextureSettings {
		constexpr auto diffuseTexture = 0x10; // Texture2D
		constexpr auto normalMapTexture = 0x18; // Texture2D
		constexpr auto tileSize = 0x20; // Vector2
		constexpr auto tileOffset = 0x28; // Vector2
		constexpr auto metallic = 0x30; // float
		constexpr auto smoothness = 0x34; // float
		constexpr auto specular = 0x38; // Color
	}

	namespace n_NumberFormatter {
		constexpr auto _nfi = 0x10; // NumberFormatInfo
		constexpr auto _cbuf = 0x18; // char[]
		constexpr auto _NaN = 0x20; // bool
		constexpr auto _infinity = 0x21; // bool
		constexpr auto _isCustomFormat = 0x22; // bool
		constexpr auto _specifierIsUpper = 0x23; // bool
		constexpr auto _positive = 0x24; // bool
		constexpr auto _specifier = 0x26; // char
		constexpr auto _precision = 0x28; // int
		constexpr auto _defPrecision = 0x2c; // int
		constexpr auto _digitsLen = 0x30; // int
		constexpr auto _offset = 0x34; // int
		constexpr auto _decPointPos = 0x38; // int
		constexpr auto _val1 = 0x3c; // uint
		constexpr auto _val2 = 0x40; // uint
		constexpr auto _val3 = 0x44; // uint
		constexpr auto _val4 = 0x48; // uint
		constexpr auto _ind = 0x4c; // int
	}

	namespace n_LoadoutGadgetStatsSlider { // : MonoBehaviour
		constexpr auto referanceWidth = 0x18; // float
		constexpr auto MaxValue = 0x1c; // float
		constexpr auto Value = 0x20; // float
		constexpr auto isFloat = 0x24; // bool
		constexpr auto percentValue = 0x28; // float
		constexpr auto ValueRect = 0x30; // RectTransform
		constexpr auto CursorRect = 0x38; // RectTransform
		constexpr auto ValueText = 0x40; // TextMeshProUGUI
		constexpr auto currentValue = 0x48; // float
	}

	namespace n_SteeringWheelArms { // : MonoBehaviour
		constexpr auto LeftArm = 0x18; // InverseKinematicsSelf
		constexpr auto RightArm = 0x20; // InverseKinematicsSelf
		constexpr auto ArmsSkin = 0x28; // SkinnedMeshRenderer
	}

	namespace n_PersistentCall {
		constexpr auto m_Target = 0x10; // Object
		constexpr auto m_MethodName = 0x18; // string
		constexpr auto m_Mode = 0x20; // PersistentListenerMode
		constexpr auto m_Arguments = 0x28; // ArgumentCache
		constexpr auto m_CallState = 0x30; // UnityEventCallState
	}

	namespace n_Dbvt.IWriter { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_KinematicClosestNotMeConvexResultCallback { // : ClosestConvexResultCallback
		constexpr auto _me = 0x60; // CollisionObject
		constexpr auto _up = 0x68; // Vector3
		constexpr auto _minSlopeDot = 0x74; // float
	}

	namespace n_AggregateException { // : Exception
		constexpr auto m_innerExceptions = 0x88; // ReadOnlyCollection(Exception)
	}

	namespace n_ABoltAction { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto PrefabLocals = 0x20; // PositionQuaternationScale
		constexpr auto Visual = 0x48; // Sprite
		constexpr auto LanguageId = 0x50; // int
		constexpr auto DefaultKill = 0x54; // int
		constexpr auto Settings = 0x58; // AttachmentSettings
	}

	namespace n_IconsUI {
		constexpr auto GeneralIcons = 0x10; // IconsUI.General
		constexpr auto PlayerRankIcons = 0x18; // IconsUI.PlayerRanks
		constexpr auto PlayerPrestigeIcons = 0x20; // IconsUI.PlayerPrestige
		constexpr auto RoleIcons = 0x28; // IconsUI.PlayerRoles
		constexpr auto ScoreboardIcons = 0x30; // IconsUI.Scoreboard
		constexpr auto OverlayIcons = 0x38; // IconsUI.Overlay
		constexpr auto AttachmentIcons = 0x40; // IconsUI.Attachments
		constexpr auto Inputs = 0x48; // IconsUI.Input
		constexpr auto EndOfRoundIcons = 0x50; // IconsUI.EndOfRound
		constexpr auto ClanIcons = 0x58; // IconsUI.Clan
		constexpr auto MapIcons = 0x60; // IconsUI.Map
	}

	namespace n_ASideRail { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto PrefabLocals = 0x20; // PositionQuaternationScale
		constexpr auto PrefabAsset = 0x48; // GameObject
		constexpr auto Visual = 0x50; // Sprite
		constexpr auto LanguageId = 0x58; // int
		constexpr auto DefaultKill = 0x5c; // int
		constexpr auto IsToggleable = 0x60; // bool
		constexpr auto OnToggledOn = 0x68; // Texture2D
		constexpr auto OnToggleOnSound = 0x70; // AudioClip
		constexpr auto OnToggledOff = 0x78; // Texture2D
		constexpr auto OnToggleOffSound = 0x80; // AudioClip
		constexpr auto Settings = 0x88; // AttachmentSettings
	}

	namespace n_Pool.Gadget {
		constexpr auto Prefab_ThrownMedicKit = 0x10; // GameObject
	}

	namespace n_PlayerSounds.Gadgets {
		constexpr auto ThrowableObjects = 0x10; // PlayerSounds.Gadgets.Throwable
		constexpr auto C4Trigger = 0x18; // AudioClip[]
		constexpr auto C4Throw = 0x20; // AudioClip[]
	}

	namespace n_MainLoop.mLoopJobSchedule {
		constexpr auto Array = 0x10; // IJobScheduleReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_ConvexConvexAlgorithm.CreateFunc { // : CollisionAlgorithmCreateFunc
		constexpr auto _pdSolver = 0x20; // ConvexPenetrationDepthSolver
		constexpr auto _simplexSolver = 0x28; // VoronoiSimplexSolver
	}

	namespace n_ObjRef { // : IObjectReference
		constexpr auto channel_info = 0x10; // IChannelInfo
		constexpr auto uri = 0x18; // string
		constexpr auto typeInfo = 0x20; // IRemotingTypeInfo
		constexpr auto envoyInfo = 0x28; // IEnvoyInfo
		constexpr auto flags = 0x30; // int
		constexpr auto _serverType = 0x38; // Type
	}

	namespace n_SparseSdf {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_PerlinNoiseCPU { // : NoiseCPU
		constexpr auto (Perm)k__BackingField = 0x28; // PermutationTable
	}

	namespace n_FailureSettings {
		constexpr auto failureRateType = 0x10; // FailureRateType
		constexpr auto failureRateFromFitness = 0x18; // CustomGradient
		constexpr auto failureRate = 0x20; // float
	}

	namespace n_MemberExpression { // : Expression
		constexpr auto (Expression)k__BackingField = 0x10; // Expression
	}

	namespace n_RegexParser {
		constexpr auto _stack = 0x10; // RegexNode
		constexpr auto _group = 0x18; // RegexNode
		constexpr auto _alternation = 0x20; // RegexNode
		constexpr auto _concatenation = 0x28; // RegexNode
		constexpr auto _unit = 0x30; // RegexNode
		constexpr auto _pattern = 0x38; // string
		constexpr auto _currentPos = 0x40; // int
		constexpr auto _culture = 0x48; // CultureInfo
		constexpr auto _autocap = 0x50; // int
		constexpr auto _capcount = 0x54; // int
		constexpr auto _captop = 0x58; // int
		constexpr auto _capsize = 0x5c; // int
		constexpr auto _caps = 0x60; // Hashtable
		constexpr auto _capnames = 0x68; // Hashtable
		constexpr auto _capnumlist = 0x70; // int[]
		constexpr auto _capnamelist = 0x78; // List(string)
		constexpr auto _options = 0x80; // RegexOptions
		constexpr auto _optionsStack = 0x88; // List(RegexOptions)
		constexpr auto _ignoreNextParen = 0x90; // bool
	}

	namespace n_ExpandString {
		constexpr auto value = 0x10; // string
	}

	namespace n_GameScreen_PlayerInfo { // : MonoBehaviour
		constexpr auto Label = 0x18; // TextMeshProUGUI
		constexpr auto isCaptain = 0x20; // GameObject
		constexpr auto Canvas = 0x28; // CanvasGroup
		constexpr auto trs = 0x30; // RectTransform
		constexpr auto client = 0x38; // NetworkClient
		constexpr auto head = 0x40; // Transform
		constexpr auto b = 0x48; // StringBuilder
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
	}

	namespace n_Event {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_TermInfoReader {
		constexpr auto boolSize = 0x10; // short
		constexpr auto numSize = 0x12; // short
		constexpr auto strOffsets = 0x14; // short
		constexpr auto buffer = 0x18; // byte[]
		constexpr auto booleansOffset = 0x20; // int
	}

	namespace n_SortedList.ValueList { // : IList
		constexpr auto sortedList = 0x10; // SortedList
	}

	namespace n_DownloadProgressChangedEventArgs { // : ProgressChangedEventArgs
		constexpr auto m_BytesReceived = 0x20; // long
		constexpr auto m_TotalBytesToReceive = 0x28; // long
	}

	namespace n_Motion { // : Object
		constexpr auto (isAnimatorMotion)k__BackingField = 0x18; // bool
	}

	namespace n_Objective { // : MonoBehaviour
		constexpr auto (NetView)k__BackingField = 0x18; // NetView
		constexpr auto OnObjectiveSelected = 0x20; // UnityEvent
		constexpr auto (CanBeSelected)k__BackingField = 0x28; // bool
		constexpr auto (ID)k__BackingField = 0x2a; // ushort
		constexpr auto (WorldPosition)k__BackingField = 0x2c; // Vector3
		constexpr auto (ScreenViewport)k__BackingField = 0x38; // Vector3
		constexpr auto (VisibleOnScreen)k__BackingField = 0x44; // bool
		constexpr auto mRegistered = 0x45; // bool
	}

	namespace n_NumberFunctions { // : ValueQuery
		constexpr auto arg = 0x18; // Query
		constexpr auto ftype = 0x20; // Function.FunctionType
	}

	namespace n_ScaledBvhTriangleMeshShape { // : ConcaveShape
		constexpr auto _childShape = 0x28; // BvhTriangleMeshShape
	}

	namespace n_GameModeManagerUI { // : MonoBehaviour
		constexpr auto MainCanvas = 0x18; // Canvas
		constexpr auto Uis = 0x20; // GameplayModeUI[]
	}

	namespace n_AlignedClusterArrayEnumerator { // : IEnumerator(Cluster)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedClusterArray
	}

	namespace n_OverlappingPairCache { // : OverlappingPairCallback
		constexpr auto _ghostPairCallback = 0x20; // OverlappingPairCallback
		constexpr auto _overlappingPairArray = 0x28; // AlignedBroadphasePairArray
	}

	namespace n_DesignerSerializationVisibilityAttribute { // : Attribute
		constexpr auto visibility = 0x10; // DesignerSerializationVisibility
	}

	namespace n_SoftBody { // : CollisionObject
		constexpr auto _anchors = 0x40; // AlignedAnchorArray
		constexpr auto _bounds = 0x48; // Vector3Array
		constexpr auto _clusterDbvt = 0x50; // Dbvt
		constexpr auto _config = 0x58; // Config
		constexpr auto _clusters = 0x60; // AlignedClusterArray
		constexpr auto _faceDbvt = 0x68; // Dbvt
		constexpr auto _faces = 0x70; // AlignedFaceArray
		constexpr auto _joints = 0x78; // AlignedJointArray
		constexpr auto _links = 0x80; // AlignedLinkArray
		constexpr auto _materials = 0x88; // AlignedMaterialArray
		constexpr auto _nodeDbvt = 0x90; // Dbvt
		constexpr auto _nodes = 0x98; // AlignedNodeArray
		constexpr auto _pose = 0xa0; // Pose
		constexpr auto _softBodySolver = 0xa8; // SoftBodySolver
		constexpr auto _solverState = 0xb0; // SolverState
		constexpr auto _tetras = 0xb8; // AlignedTetraArray
		constexpr auto _worldInfo = 0xc0; // SoftBodyWorldInfo
		constexpr auto _aJointControls = 0xc8; // List(AngularJoint.IControl)
		constexpr auto (Tag)k__BackingField = 0xd0; // object
	}

	namespace n_Depth2DAnimation { // : MonoBehaviour
		constexpr auto senvisity = 0x18; // float
		constexpr auto scale = 0x1c; // float
		constexpr auto tr = 0x20; // RectTransform
		constexpr auto defaultPos = 0x28; // Vector2
		constexpr auto currentPos = 0x30; // Vector2
		constexpr auto Sscale = 0x38; // Vector2
	}

	namespace n_PointerFixup {
		constexpr auto (StructAlloc)k__BackingField = 0x10; // byte[]
		constexpr auto (Offsets)k__BackingField = 0x18; // long[]
	}

	namespace n_DisposerReplySink { // : IMessageSink
		constexpr auto _next = 0x10; // IMessageSink
		constexpr auto _disposable = 0x18; // IDisposable
	}

	namespace n_MainLoop.mLoopThreadUpdate {
		constexpr auto Array = 0x10; // IThreadUpdateReceiver[]
		constexpr auto Count = 0x18; // int
		constexpr auto Length = 0x1c; // int
	}

	namespace n_Avaibility {
		constexpr auto AllowedClassRoles = 0x10; // AvailableRoles
		constexpr auto AllowedNation = 0x16; // AvailableNations
		constexpr auto RequiredPermissions = 0x20; // ulong
		constexpr auto RequiredRank = 0x28; // int
		constexpr auto RequiredPrestige = 0x2c; // int
		constexpr auto RequiredKill = 0x30; // int
	}

	namespace n_AlignedVector3Array { // : IList(Vector3)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_StructureDebris { // : MonoBehaviour
		constexpr auto DebrisMeshRenderer = 0x18; // MeshRenderer
		constexpr auto Particle = 0x20; // VisualEffect
		constexpr auto AnimationMeshRenderer_1_1 = 0x28; // MeshRenderer
		constexpr auto AnimationMeshRenderer_N1_N1 = 0x30; // MeshRenderer
		constexpr auto AnimationMeshRenderer_1_N1 = 0x38; // MeshRenderer
		constexpr auto AnimationMeshRenderer_N1_1 = 0x40; // MeshRenderer
		constexpr auto (FastListIndexA)k__BackingField = 0x48; // int
		constexpr auto (TickIndex5)k__BackingField = 0x4c; // int
		constexpr auto mDebrisMaterial = 0x50; // MaterialPropertyBlock
		constexpr auto mAnimationMaterial_1_1 = 0x58; // MaterialPropertyBlock
		constexpr auto mAnimationMaterial_N1_N1 = 0x60; // MaterialPropertyBlock
		constexpr auto mAnimationMaterial_1_N1 = 0x68; // MaterialPropertyBlock
		constexpr auto mAnimationMaterial_N1_1 = 0x70; // MaterialPropertyBlock
		constexpr auto mInitTime = 0x78; // float
		constexpr auto mAnimationLength = 0x7c; // float
		constexpr auto mAnimationHeight = 0x80; // float
		constexpr auto mDebrisHeight = 0x84; // float
		constexpr auto mYPos = 0x88; // float
		constexpr auto mDebrisBounds = 0x8c; // Bounds
		constexpr auto mSize = 0xa4; // StructureType
		constexpr auto mLOD0 = 0xa8; // Mesh
		constexpr auto (Center)k__BackingField = 0xb0; // Vector3
		constexpr auto (MaxRadiusSqr)k__BackingField = 0xbc; // float
		constexpr auto (MaxRadius)k__BackingField = 0xc0; // float
		constexpr auto (MinRadius)k__BackingField = 0xc4; // float
	}

	namespace n_ResourceReader.ResourceEnumerator { // : IDictionaryEnumerator
		constexpr auto _reader = 0x10; // ResourceReader
		constexpr auto _currentIsValid = 0x18; // bool
		constexpr auto _currentName = 0x1c; // int
		constexpr auto _dataPosition = 0x20; // int
	}

	namespace n_CultureNotFoundException { // : ArgumentException
		constexpr auto m_invalidCultureName = 0x90; // string
		constexpr auto m_invalidCultureId = 0x98; // Nullable(int)
	}

	namespace n_CharacterResources { // : ScriptableObject
		constexpr auto AllWearables = 0x18; // Wearable[]
		constexpr auto AllSkins = 0x20; // ASkin[]
	}

	namespace n_DateTimeConstantAttribute { // : CustomConstantAttribute
		constexpr auto date = 0x10; // DateTime
	}

	namespace n_SoapFieldAttribute { // : SoapAttribute
		constexpr auto _elementName = 0x28; // string
		constexpr auto _isElement = 0x30; // bool
	}

	namespace n_BufferedRTHandleSystem { // : IDisposable
		constexpr auto m_RTHandles = 0x10; // Dictionary(int, RTHandle[])
		constexpr auto m_RTHandleSystem = 0x18; // RTHandleSystem
		constexpr auto m_DisposedValue = 0x20; // bool
	}

	namespace n_XmlSchemaComplexType { // : XmlSchemaType
		constexpr auto block = 0x40; // XmlSchemaDerivationMethod
		constexpr auto contentTypeParticle = 0x48; // XmlSchemaParticle
		constexpr auto attributeWildcard = 0x50; // XmlSchemaAnyAttribute
		constexpr auto pvFlags = 0x58; // byte
	}

	namespace n_CStreamWriter { // : StreamWriter
		constexpr auto driver = 0x68; // TermInfoDriver
	}

	namespace n_CenterOfMass { // : MonoBehaviour
		constexpr auto centerOfMassOffset = 0x18; // Vector3
		constexpr auto rb = 0x28; // Rigidbody
		constexpr auto showCOM = 0x30; // bool
		constexpr auto radius = 0x34; // float
	}

	namespace n_ColorPicker { // : MonoBehaviour
		constexpr auto Picker = 0x18; // RectTransform
		constexpr auto Background = 0x20; // RawImage
		constexpr auto Child = 0x28; // CanvasGroup
		constexpr auto Red = 0x30; // Slider
		constexpr auto Green = 0x38; // Slider
		constexpr auto Blue = 0x40; // Slider
		constexpr auto RedBackground = 0x48; // RawImage
		constexpr auto GreenBackground = 0x50; // RawImage
		constexpr auto BlueBackground = 0x58; // RawImage
		constexpr auto ResultImage = 0x60; // RawImage
		constexpr auto OptionsParent = 0x68; // OptionsButtonHover
		constexpr auto AutoHide = 0x70; // bool
		constexpr auto _result = 0x74; // Color
		constexpr auto (TickIndex8)k__BackingField = 0x84; // int
		constexpr auto doUpdate = 0x88; // bool
		constexpr auto mouseInside = 0x89; // bool
	}

	namespace n_SignatureDescription {
		constexpr auto _strKey = 0x10; // string
		constexpr auto _strDigest = 0x18; // string
		constexpr auto _strFormatter = 0x20; // string
		constexpr auto _strDeformatter = 0x28; // string
	}

	namespace n_PlayerSounds.Gadgets.Throwable {
		constexpr auto SmokeOnThrown = 0x10; // AudioClip[]
	}

	namespace n_InternalTriangleIndexCallback { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _internalProcessTriangleIndex = 0x18; // InternalTriangleIndexCallback.InternalProcessTriangleIndexDelegate
	}

	namespace n_EncoderReplacementFallbackBuffer { // : EncoderFallbackBuffer
		constexpr auto strDefault = 0x30; // string
		constexpr auto fallbackCount = 0x38; // int
		constexpr auto fallbackIndex = 0x3c; // int
	}

	namespace n_TimelinePlayable { // : PlayableBehaviour
		constexpr auto m_IntervalTree = 0x10; // IntervalTree(RuntimeElement)
		constexpr auto m_ActiveClips = 0x18; // List(RuntimeElement)
		constexpr auto m_CurrentListOfActiveClips = 0x20; // List(RuntimeElement)
		constexpr auto m_ActiveBit = 0x28; // int
		constexpr auto m_EvaluateCallbacks = 0x30; // List(ITimelineEvaluateCallback)
		constexpr auto m_PlayableCache = 0x38; // Dictionary(TrackAsset, Playable)
	}

	namespace n_DispIdAttribute { // : Attribute
		constexpr auto _val = 0x10; // int
	}

	namespace n_Note { // : Element
		constexpr auto _nodes = 0x18; // NodePtrArray
	}

	namespace n_MDX201Standing { // : ReplicaGadget
		constexpr auto GUI = 0x48; // TeamGUI
		constexpr auto Glare = 0x50; // MeshRenderer
		constexpr auto Head = 0x58; // Transform
		constexpr auto MDX201Item = 0x60; // AGadget
		constexpr auto ground = 0x68; // ExistanceProvider
		constexpr auto offset = 0x70; // float
		constexpr auto position = 0x74; // Vector3
		constexpr auto forward = 0x80; // Vector3
		constexpr auto _isVisible = 0x8c; // bool
		constexpr auto _wasVisible = 0x8d; // bool
		constexpr auto _obstacleExist = 0x8e; // bool
		constexpr auto _lastObstacleCheck = 0x90; // int
		constexpr auto HP = 0x94; // float
	}

	namespace n_Face { // : Feature
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _leaf = 0x20; // DbvtNode
		constexpr auto _n = 0x28; // NodePtrArray
	}

	namespace n_DebugUI.Vector4Field { // : DebugUI.Field(Vector4)
		constexpr auto incStep = 0x50; // float
		constexpr auto incStepMult = 0x54; // float
		constexpr auto decimals = 0x58; // int
	}

	namespace n_DebugUI.Container { // : DebugUI.Widget
		constexpr auto (children)k__BackingField = 0x38; // ObservableList(DebugUI.Widget)
	}

	namespace n_Alert {
		constexpr auto level = 0x10; // AlertLevel
		constexpr auto description = 0x11; // AlertDescription
	}

	namespace n_DiscreteCollisionDetectorInterface { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_WebHeaderCollection { // : NameValueCollection
		constexpr auto m_CommonHeaders = 0x58; // string[]
		constexpr auto m_NumCommonHeaders = 0x60; // int
		constexpr auto m_InnerCollection = 0x68; // NameValueCollection
		constexpr auto m_Type = 0x70; // WebHeaderCollectionType
	}

	namespace n_ActivityManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnActivityJoin = 0x20; // ActivityManager.ActivityJoinHandler
		constexpr auto OnActivitySpectate = 0x28; // ActivityManager.ActivitySpectateHandler
		constexpr auto OnActivityJoinRequest = 0x30; // ActivityManager.ActivityJoinRequestHandler
		constexpr auto OnActivityInvite = 0x38; // ActivityManager.ActivityInviteHandler
	}

	namespace n_Render2DLightingPass { // : ScriptableRenderPass
		constexpr auto m_Renderer2DData = 0x68; // Renderer2DData
	}

	namespace n_FocusChangeDirection {
		constexpr auto m_Value = 0x10; // int
	}

	namespace n_VFXVelocityBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // Transform
		constexpr auto m_PreviousTime = 0x30; // float
		constexpr auto m_PreviousPosition = 0x34; // Vector3
	}

	namespace n_RC2Transform { // : SymmetricTransform
		constexpr auto R0 = 0x58; // ushort
		constexpr auto R1 = 0x5a; // ushort
		constexpr auto R2 = 0x5c; // ushort
		constexpr auto R3 = 0x5e; // ushort
		constexpr auto K = 0x60; // ushort[]
		constexpr auto j = 0x68; // int
	}

	namespace n_FloatingObjectPhysics {
		constexpr auto VerticalOffset = 0x10; // float
		constexpr auto sinceInWater = 0x14; // float
		constexpr auto Force = 0x18; // float
		constexpr auto SinkSpeed = 0x1c; // float
		constexpr auto PositionDrag = 0x20; // float
		constexpr auto RotationDrag = 0x24; // float
		constexpr auto SurfaceNormal = 0x28; // Vector3
		constexpr auto SinkLevel = 0x34; // float
		constexpr auto canFloat = 0x38; // bool
	}

	namespace n_AlignedTetraArrayDebugView {
		constexpr auto _array = 0x10; // AlignedTetraArray
	}

	namespace n_MapLightingSettings {
		constexpr auto SkyColor = 0x10; // Color
		constexpr auto EquatorColor = 0x20; // Color
		constexpr auto GroundColor = 0x30; // Color
		constexpr auto SunColor = 0x40; // Color
		constexpr auto Intensity = 0x50; // float
		constexpr auto Shadows = 0x54; // LightShadows
		constexpr auto SkyboxMaterial = 0x58; // Material
		constexpr auto Fog_Enabled = 0x60; // bool
		constexpr auto Fog_Color = 0x64; // Color
		constexpr auto Fog_Mode = 0x74; // FogMode
		constexpr auto Fog_Start = 0x78; // float
		constexpr auto Fog_End = 0x7c; // float
		constexpr auto Fog_Density = 0x80; // float
		constexpr auto FogNightVision_Enabled = 0x84; // bool
		constexpr auto FogNightVision_Color = 0x88; // Color
		constexpr auto FogNightVision_Mode = 0x98; // FogMode
		constexpr auto FogNightVision_Start = 0x9c; // float
		constexpr auto FogNightVision_End = 0xa0; // float
		constexpr auto FogNightVision_Density = 0xa4; // float
	}

	namespace n_ManualResetEventSlim { // : IDisposable
		constexpr auto m_lock = 0x10; // object
		constexpr auto m_eventObj = 0x18; // ManualResetEvent
		constexpr auto m_combinedState = 0x20; // int
	}

	namespace n_BoxShape { // : PolyhedralConvexShape
		constexpr auto ID = 0x30; // ulong
	}

	namespace n_Clan {
		constexpr auto ID = 0x10; // ulong
		constexpr auto Name = 0x18; // string
		constexpr auto Tag = 0x20; // string
		constexpr auto Color = 0x28; // Color
		constexpr auto XP = 0x38; // uint
	}

	namespace n_RenderGraphLogger {
		constexpr auto m_Builder = 0x10; // StringBuilder
		constexpr auto m_CurrentIndentation = 0x18; // int
	}

	namespace n_ReflectionTypeLoadException { // : SystemException
		constexpr auto _classes = 0x88; // Type[]
		constexpr auto _exceptions = 0x90; // Exception[]
	}

	namespace n_IconsUI.Overlay {
		constexpr auto ConnectedIcon = 0x10; // Texture2D
		constexpr auto DisconnectedIcon = 0x18; // Texture2D
	}

	namespace n_LobbyManager {
		constexpr auto MethodsPtr = 0x10; // IntPtr
		constexpr auto MethodsStructure = 0x18; // object
		constexpr auto OnLobbyUpdate = 0x20; // LobbyManager.LobbyUpdateHandler
		constexpr auto OnLobbyDelete = 0x28; // LobbyManager.LobbyDeleteHandler
		constexpr auto OnMemberConnect = 0x30; // LobbyManager.MemberConnectHandler
		constexpr auto OnMemberUpdate = 0x38; // LobbyManager.MemberUpdateHandler
		constexpr auto OnMemberDisconnect = 0x40; // LobbyManager.MemberDisconnectHandler
		constexpr auto OnLobbyMessage = 0x48; // LobbyManager.LobbyMessageHandler
		constexpr auto OnSpeaking = 0x50; // LobbyManager.SpeakingHandler
		constexpr auto OnNetworkMessage = 0x58; // LobbyManager.NetworkMessageHandler
	}

	namespace n_SerializationEvents {
		constexpr auto m_OnSerializingMethods = 0x10; // List(MethodInfo)
		constexpr auto m_OnSerializedMethods = 0x18; // List(MethodInfo)
		constexpr auto m_OnDeserializingMethods = 0x20; // List(MethodInfo)
		constexpr auto m_OnDeserializedMethods = 0x28; // List(MethodInfo)
	}

	namespace n_ScatterGatherBuffers.MemoryChunk {
		constexpr auto Buffer = 0x10; // byte[]
		constexpr auto FreeOffset = 0x18; // int
		constexpr auto Next = 0x20; // ScatterGatherBuffers.MemoryChunk
	}

	namespace n_VertexHelper { // : IDisposable
		constexpr auto m_Positions = 0x10; // List(Vector3)
		constexpr auto m_Colors = 0x18; // List(Color32)
		constexpr auto m_Uv0S = 0x20; // List(Vector2)
		constexpr auto m_Uv1S = 0x28; // List(Vector2)
		constexpr auto m_Uv2S = 0x30; // List(Vector2)
		constexpr auto m_Uv3S = 0x38; // List(Vector2)
		constexpr auto m_Normals = 0x40; // List(Vector3)
		constexpr auto m_Tangents = 0x48; // List(Vector4)
		constexpr auto m_Indices = 0x50; // List(int)
		constexpr auto m_ListsInitalized = 0x58; // bool
	}

	namespace n_DSASignatureFormatter { // : AsymmetricSignatureFormatter
		constexpr auto _oid = 0x10; // string
	}

	namespace n_GimBvhTreeNode { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_ClientContextTerminatorSink { // : IMessageSink
		constexpr auto _context = 0x10; // Context
	}

	namespace n_VolumeParameter {
		constexpr auto m_OverrideState = 0x10; // bool
	}

	namespace n_EventBase { // : IDisposable
		constexpr auto (timestamp)k__BackingField = 0x10; // long
		constexpr auto (eventId)k__BackingField = 0x18; // ulong
		constexpr auto (triggerEventId)k__BackingField = 0x20; // ulong
		constexpr auto (propagation)k__BackingField = 0x28; // EventBase.EventPropagation
		constexpr auto m_Path = 0x30; // PropagationPaths
		constexpr auto (lifeCycleStatus)k__BackingField = 0x38; // EventBase.LifeCycleStatus
		constexpr auto (leafTarget)k__BackingField = 0x40; // IEventHandler
		constexpr auto m_Target = 0x48; // IEventHandler
		constexpr auto (skipElements)k__BackingField = 0x50; // List(IEventHandler)
		constexpr auto (propagationPhase)k__BackingField = 0x58; // PropagationPhase
		constexpr auto m_CurrentTarget = 0x60; // IEventHandler
		constexpr auto m_ImguiEvent = 0x68; // Event
		constexpr auto (originalMousePosition)k__BackingField = 0x70; // Vector2
	}

	namespace n_SortVersion {
		constexpr auto m_NlsVersion = 0x10; // int
		constexpr auto m_SortId = 0x14; // Guid
	}

	namespace n_SpawnDetailSettings {
		constexpr auto opacity = 0x10; // float
		constexpr auto useRandomOpacity = 0x14; // bool
		constexpr auto successOfErase = 0x18; // float
		constexpr auto targetStrength = 0x1c; // int
		constexpr auto minSeason = 0x20; // float
		constexpr auto maxSeason = 0x24; // float
	}

	namespace n_TypeEntry {
		constexpr auto assembly_name = 0x10; // string
		constexpr auto type_name = 0x18; // string
	}

	namespace n_VFXBinderBase { // : MonoBehaviour
		constexpr auto binder = 0x18; // VFXPropertyBinder
	}

	namespace n_Squad {
		constexpr auto (ServerUserAssignedCustomName)k__BackingField = 0x10; // string
		constexpr auto SquadIndex = 0x18; // byte
		constexpr auto Team = 0x19; // Team
		constexpr auto (OriginalSquadName)k__BackingField = 0x20; // string
		constexpr auto (Fullname)k__BackingField = 0x28; // string
		constexpr auto (SquadName)k__BackingField = 0x30; // string
		constexpr auto (LockState)k__BackingField = 0x38; // Squad.SquadLockState
		constexpr auto IsClanSquad = 0x3c; // bool
		constexpr auto Points = 0x40; // int
		constexpr auto Roles = 0x48; // Squad.SquadRoles
		constexpr auto Abilities = 0x50; // SquadAbilityManager
		constexpr auto Crew = 0x58; // List(ulong)
		constexpr auto CaptainID = 0x60; // ulong
		constexpr auto SquadTargetObjectiveNetworkID = 0x68; // ushort
		constexpr auto NextAvailableRallySetTime = 0x6c; // float
		constexpr auto LocalPlayerKickedTime = 0x70; // float
	}

	namespace n_DetailPrototype {
		constexpr auto m_Prototype = 0x10; // GameObject
		constexpr auto m_PrototypeTexture = 0x18; // Texture2D
		constexpr auto m_HealthyColor = 0x20; // Color
		constexpr auto m_DryColor = 0x30; // Color
		constexpr auto m_MinWidth = 0x40; // float
		constexpr auto m_MaxWidth = 0x44; // float
		constexpr auto m_MinHeight = 0x48; // float
		constexpr auto m_MaxHeight = 0x4c; // float
		constexpr auto m_NoiseSpread = 0x50; // float
		constexpr auto m_BendFactor = 0x54; // float
		constexpr auto m_RenderMode = 0x58; // int
		constexpr auto m_UsePrototypeMesh = 0x5c; // int
	}

	namespace n_TypedConstraint { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _jointFeedback = 0x18; // JointFeedback
		constexpr auto _rigidBodyA = 0x20; // RigidBody
		constexpr auto _rigidBodyB = 0x28; // RigidBody
		constexpr auto (Userobject)k__BackingField = 0x30; // object
	}

	namespace n_NotifyParentPropertyAttribute { // : Attribute
		constexpr auto notifyParent = 0x10; // bool
	}

	namespace n_DecoderNLS { // : Decoder
		constexpr auto m_encoding = 0x20; // Encoding
		constexpr auto m_mustFlush = 0x28; // bool
		constexpr auto m_throwOnOverflow = 0x29; // bool
		constexpr auto m_bytesUsed = 0x2c; // int
	}

	namespace n_SteamInterface {
		constexpr auto Self = 0x10; // IntPtr
		constexpr auto SelfGlobal = 0x18; // IntPtr
		constexpr auto SelfServer = 0x20; // IntPtr
		constexpr auto SelfClient = 0x28; // IntPtr
		constexpr auto (IsServer)k__BackingField = 0x30; // bool
	}

	namespace n_DescriptionAttribute { // : Attribute
		constexpr auto description = 0x10; // string
	}

	namespace n_GimGImpactQuantizedBvhNodeArray {
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_RegexInterpreter { // : RegexRunner
		constexpr auto runoperator = 0x80; // int
		constexpr auto runcodes = 0x88; // int[]
		constexpr auto runcodepos = 0x90; // int
		constexpr auto runstrings = 0x98; // string[]
		constexpr auto runcode = 0xa0; // RegexCode
		constexpr auto runfcPrefix = 0xa8; // RegexPrefix
		constexpr auto runbmPrefix = 0xb0; // RegexBoyerMoore
		constexpr auto runanchors = 0xb8; // int
		constexpr auto runrtl = 0xbc; // bool
		constexpr auto runci = 0xbd; // bool
		constexpr auto runculture = 0xc0; // CultureInfo
	}

	namespace n_EventFieldAttribute { // : Attribute
		constexpr auto (Tags)k__BackingField = 0x10; // EventFieldTags
		constexpr auto (Name)k__BackingField = 0x18; // string
		constexpr auto (Format)k__BackingField = 0x20; // EventFieldFormat
	}

	namespace n_SquadAbilityBehaviour { // : MonoBehaviour
		constexpr auto Item = 0x18; // SquadAbility
		constexpr auto (lifeTime)k__BackingField = 0x20; // float
		constexpr auto (inPool)k__BackingField = 0x24; // bool
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x25; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x28; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x2c; // int
		constexpr auto (FastListIndexA)k__BackingField = 0x30; // int
		constexpr auto (IsRegistered)k__BackingField = 0x34; // bool
		constexpr auto (Ability)k__BackingField = 0x38; // SquadAbility
		constexpr auto (Squad)k__BackingField = 0x40; // Squad
		constexpr auto (Position)k__BackingField = 0x48; // Vector3
		constexpr auto (Rotation)k__BackingField = 0x54; // Quaternion
		constexpr auto (DistanceToCamera)k__BackingField = 0x64; // float
		constexpr auto (InitializeNetworkTime)k__BackingField = 0x68; // float
		constexpr auto (NetView)k__BackingField = 0x70; // NetView
	}

	namespace n_ListDebugView {
		constexpr auto _list = 0x10; // IEnumerable
	}

	namespace n_BaseAxisQuery { // : Query
		constexpr auto qyInput = 0x18; // Query
		constexpr auto nameTest = 0x20; // bool
		constexpr auto name = 0x28; // string
		constexpr auto prefix = 0x30; // string
		constexpr auto nsUri = 0x38; // string
		constexpr auto typeTest = 0x40; // XPathNodeType
		constexpr auto currentNode = 0x48; // XPathNavigator
		constexpr auto position = 0x50; // int
	}

	namespace n_MapDirectionLightRotation {
		constexpr auto Rotation = 0x10; // Vector3
	}

	namespace n_XmlDocumentFragment { // : XmlNode
		constexpr auto lastChild = 0x18; // XmlLinkedNode
	}

	namespace n_FallenTree { // : IFastListItemA
		constexpr auto (FastListIndexA)k__BackingField = 0x10; // int
		constexpr auto IsServerSide = 0x14; // bool
		constexpr auto IsExists = 0x15; // bool
		constexpr auto Tree = 0x18; // Tree
		constexpr auto NetworkSpawnTime = 0x20; // float
		constexpr auto NetworkDeadTime = 0x24; // float
		constexpr auto ServerPosition = 0x28; // Vector3
		constexpr auto ServerRotation = 0x34; // Quaternion
		constexpr auto LastStreamTime = 0x44; // float
		constexpr auto ClientPosition = 0x48; // Vector3
		constexpr auto ClientRotation = 0x54; // Quaternion
		constexpr auto ClientUpdateFlag = 0x64; // bool
		constexpr auto DistanceToCamera = 0x68; // float
		constexpr auto ScreenHeight = 0x6c; // float
		constexpr auto CameraDot = 0x70; // float
		constexpr auto VelocityPerSecond = 0x74; // float
		constexpr auto WorldObject = 0x78; // FallenTreeBehaviour
		constexpr auto IsLoaded = 0x80; // bool
		constexpr auto ShouldBeLoaded = 0x81; // bool
	}

	namespace n_StringReader { // : TextReader
		constexpr auto _s = 0x18; // string
		constexpr auto _pos = 0x20; // int
		constexpr auto _length = 0x24; // int
	}

	namespace n_Dropdown.OptionDataList {
		constexpr auto m_Options = 0x10; // List(Dropdown.OptionData)
	}

	namespace n_Datatype_union { // : Datatype_anySimpleType
		constexpr auto types = 0x38; // XmlSchemaSimpleType[]
	}

	namespace n_SelfFramePlayer { // : MonoBehaviour
		constexpr auto Frames = 0x18; // Sprite[]
		constexpr auto Delay = 0x20; // float
		constexpr auto isRandom = 0x24; // bool
		constexpr auto DoNotSelectSameIndex = 0x25; // bool
		constexpr auto (Pause)k__BackingField = 0x26; // bool
		constexpr auto (CurrentIndex)k__BackingField = 0x28; // int
		constexpr auto thisImg = 0x30; // Image
		constexpr auto lastSet = 0x38; // float
	}

	namespace n_IdnMapping {
		constexpr auto allow_unassigned = 0x10; // bool
		constexpr auto use_std3 = 0x11; // bool
		constexpr auto puny = 0x18; // Punycode
	}

	namespace n_StreamUpdater {
		constexpr auto lastPosition = 0x10; // Vector3
		constexpr auto lastRotation = 0x1c; // Quaternion
		constexpr auto lastEngine = 0x2c; // float
		constexpr auto lastSent = 0x30; // float
	}

	namespace n_XmlAttributeAttribute { // : Attribute
		constexpr auto attributeName = 0x10; // string
	}

	namespace n_GamemodeResources.SuicideRush {
		constexpr auto SuicideTool = 0x10; // AGadget
	}

	namespace n_XPathDocumentKindDescendantIterator { // : XPathDocumentBaseIterator
		constexpr auto end = 0x28; // XPathDocumentNavigator
		constexpr auto typ = 0x30; // XPathNodeType
		constexpr auto matchSelf = 0x34; // bool
	}

	namespace n_SchemaInfo { // : IDtdInfo
		constexpr auto elementDecls = 0x10; // Dictionary(XmlQualifiedName, SchemaElementDecl)
		constexpr auto undeclaredElementDecls = 0x18; // Dictionary(XmlQualifiedName, SchemaElementDecl)
		constexpr auto generalEntities = 0x20; // Dictionary(XmlQualifiedName, SchemaEntity)
		constexpr auto parameterEntities = 0x28; // Dictionary(XmlQualifiedName, SchemaEntity)
		constexpr auto docTypeName = 0x30; // XmlQualifiedName
		constexpr auto internalDtdSubset = 0x38; // string
		constexpr auto hasNonCDataAttributes = 0x40; // bool
		constexpr auto hasDefaultAttributes = 0x41; // bool
		constexpr auto targetNamespaces = 0x48; // Dictionary(string, bool)
		constexpr auto attributeDecls = 0x50; // Dictionary(XmlQualifiedName, SchemaAttDef)
		constexpr auto schemaType = 0x58; // SchemaType
		constexpr auto elementDeclsByType = 0x60; // Dictionary(XmlQualifiedName, SchemaElementDecl)
		constexpr auto notations = 0x68; // Dictionary(string, SchemaNotation)
	}

	namespace n_X509BasicConstraintsExtension { // : X509Extension
		constexpr auto _certificateAuthority = 0x28; // bool
		constexpr auto _hasPathLengthConstraint = 0x29; // bool
		constexpr auto _pathLengthConstraint = 0x2c; // int
		constexpr auto _status = 0x30; // AsnDecodeStatus
	}

	namespace n_CompletionActionInvoker { // : IThreadPoolWorkItem
		constexpr auto m_action = 0x10; // ITaskCompletionAction
		constexpr auto m_completingTask = 0x18; // Task
	}

	namespace n_ListDictionary.NodeEnumerator { // : IDictionaryEnumerator
		constexpr auto list = 0x10; // ListDictionary
		constexpr auto current = 0x18; // ListDictionary.DictionaryNode
		constexpr auto version = 0x20; // int
		constexpr auto start = 0x24; // bool
	}

	namespace n_Encoding.EncodingCharBuffer {
		constexpr auto chars = 0x10; // char*
		constexpr auto charStart = 0x18; // char*
		constexpr auto charEnd = 0x20; // char*
		constexpr auto charCountResult = 0x28; // int
		constexpr auto enc = 0x30; // Encoding
		constexpr auto decoder = 0x38; // DecoderNLS
		constexpr auto byteStart = 0x40; // byte*
		constexpr auto byteEnd = 0x48; // byte*
		constexpr auto bytes = 0x50; // byte*
		constexpr auto fallbackBuffer = 0x58; // DecoderFallbackBuffer
	}

	namespace n_XmlSchemaSequence { // : XmlSchemaGroupBase
		constexpr auto items = 0x38; // XmlSchemaObjectCollection
	}

	namespace n_ObjectMouseMoveAlongDirectionSettings {
		constexpr auto mouseSensitivity = 0x10; // float
	}

	namespace n_ForwardRenderer { // : ScriptableRenderer
		constexpr auto m_ColorGradingLutPass = 0x80; // ColorGradingLutPass
		constexpr auto m_DepthPrepass = 0x88; // DepthOnlyPass
		constexpr auto m_MainLightShadowCasterPass = 0x90; // MainLightShadowCasterPass
		constexpr auto m_AdditionalLightsShadowCasterPass = 0x98; // AdditionalLightsShadowCasterPass
		constexpr auto m_RenderOpaqueForwardPass = 0xa0; // DrawObjectsPass
		constexpr auto m_DrawSkyboxPass = 0xa8; // DrawSkyboxPass
		constexpr auto m_CopyDepthPass = 0xb0; // CopyDepthPass
		constexpr auto m_CopyColorPass = 0xb8; // CopyColorPass
		constexpr auto m_TransparentSettingsPass = 0xc0; // TransparentSettingsPass
		constexpr auto m_RenderTransparentForwardPass = 0xc8; // DrawObjectsPass
		constexpr auto m_OnRenderObjectCallbackPass = 0xd0; // InvokeOnRenderObjectCallbackPass
		constexpr auto m_PostProcessPass = 0xd8; // PostProcessPass
		constexpr auto m_FinalPostProcessPass = 0xe0; // PostProcessPass
		constexpr auto m_FinalBlitPass = 0xe8; // FinalBlitPass
		constexpr auto m_CapturePass = 0xf0; // CapturePass
		constexpr auto m_ActiveCameraColorAttachment = 0xf8; // RenderTargetHandle
		constexpr auto m_ActiveCameraDepthAttachment = 0xfc; // RenderTargetHandle
		constexpr auto m_CameraColorAttachment = 0x100; // RenderTargetHandle
		constexpr auto m_CameraDepthAttachment = 0x104; // RenderTargetHandle
		constexpr auto m_DepthTexture = 0x108; // RenderTargetHandle
		constexpr auto m_OpaqueColor = 0x10c; // RenderTargetHandle
		constexpr auto m_AfterPostProcessColor = 0x110; // RenderTargetHandle
		constexpr auto m_ColorGradingLut = 0x114; // RenderTargetHandle
		constexpr auto m_ForwardLights = 0x118; // ForwardLights
		constexpr auto m_DefaultStencilState = 0x120; // StencilState
		constexpr auto m_BlitMaterial = 0x130; // Material
		constexpr auto m_CopyDepthMaterial = 0x138; // Material
		constexpr auto m_SamplingMaterial = 0x140; // Material
		constexpr auto m_ScreenspaceShadowsMaterial = 0x148; // Material
	}

	namespace n_WheelInfo {
		constexpr auto IsFrontWheel = 0x10; // bool
		constexpr auto Brake = 0x14; // float
		constexpr auto ChassisConnectionPointCS = 0x18; // Vector3
		constexpr auto ClientInfo = 0x28; // IntPtr
		constexpr auto ClippedInvContactDotSuspension = 0x30; // float
		constexpr auto DeltaRotation = 0x34; // float
		constexpr auto EngineForce = 0x38; // float
		constexpr auto FrictionSlip = 0x3c; // float
		constexpr auto MaxSuspensionForce = 0x40; // float
		constexpr auto MaxSuspensionTravelCm = 0x44; // float
		constexpr auto RaycastInfo = 0x48; // RaycastInfo
		constexpr auto RollInfluence = 0x98; // float
		constexpr auto Rotation = 0x9c; // float
		constexpr auto SkidInfo = 0xa0; // float
		constexpr auto Steering = 0xa4; // float
		constexpr auto SuspensionRelativeVelocity = 0xa8; // float
		constexpr auto SuspensionRestLength1 = 0xac; // float
		constexpr auto SuspensionStiffness = 0xb0; // float
		constexpr auto WheelAxleCS = 0xb4; // Vector3
		constexpr auto WheelDirectionCS = 0xc0; // Vector3
		constexpr auto WheelsDampingCompression = 0xcc; // float
		constexpr auto WheelsDampingRelaxation = 0xd0; // float
		constexpr auto WheelsRadius = 0xd4; // float
		constexpr auto WheelsSuspensionForce = 0xd8; // float
		constexpr auto WorldTransform = 0xdc; // Matrix
	}

	namespace n_ConquestUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_XmlTextReaderImpl { // : XmlReader
		constexpr auto laterInitParam = 0x10; // XmlTextReaderImpl.LaterInitParam
		constexpr auto xmlCharType = 0x18; // XmlCharType
		constexpr auto ps = 0x20; // XmlTextReaderImpl.ParsingState
		constexpr auto parsingFunction = 0x98; // XmlTextReaderImpl.ParsingFunction
		constexpr auto nextParsingFunction = 0x9c; // XmlTextReaderImpl.ParsingFunction
		constexpr auto nextNextParsingFunction = 0xa0; // XmlTextReaderImpl.ParsingFunction
		constexpr auto nodes = 0xa8; // XmlTextReaderImpl.NodeData[]
		constexpr auto curNode = 0xb0; // XmlTextReaderImpl.NodeData
		constexpr auto index = 0xb8; // int
		constexpr auto curAttrIndex = 0xbc; // int
		constexpr auto attrCount = 0xc0; // int
		constexpr auto attrHashtable = 0xc4; // int
		constexpr auto attrDuplWalkCount = 0xc8; // int
		constexpr auto attrNeedNamespaceLookup = 0xcc; // bool
		constexpr auto fullAttrCleanup = 0xcd; // bool
		constexpr auto attrDuplSortingArray = 0xd0; // XmlTextReaderImpl.NodeData[]
		constexpr auto nameTable = 0xd8; // XmlNameTable
		constexpr auto nameTableFromSettings = 0xe0; // bool
		constexpr auto xmlResolver = 0xe8; // XmlResolver
		constexpr auto url = 0xf0; // string
		constexpr auto normalize = 0xf8; // bool
		constexpr auto supportNamespaces = 0xf9; // bool
		constexpr auto whitespaceHandling = 0xfc; // WhitespaceHandling
		constexpr auto dtdProcessing = 0x100; // DtdProcessing
		constexpr auto entityHandling = 0x104; // EntityHandling
		constexpr auto ignorePIs = 0x108; // bool
		constexpr auto ignoreComments = 0x109; // bool
		constexpr auto checkCharacters = 0x10a; // bool
		constexpr auto lineNumberOffset = 0x10c; // int
		constexpr auto linePositionOffset = 0x110; // int
		constexpr auto closeInput = 0x114; // bool
		constexpr auto maxCharactersInDocument = 0x118; // long
		constexpr auto maxCharactersFromEntities = 0x120; // long
		constexpr auto v1Compat = 0x128; // bool
		constexpr auto namespaceManager = 0x130; // XmlNamespaceManager
		constexpr auto lastPrefix = 0x138; // string
		constexpr auto xmlContext = 0x140; // XmlTextReaderImpl.XmlContext
		constexpr auto parsingStatesStack = 0x148; // XmlTextReaderImpl.ParsingState[]
		constexpr auto parsingStatesStackTop = 0x150; // int
		constexpr auto reportedBaseUri = 0x158; // string
		constexpr auto reportedEncoding = 0x160; // Encoding
		constexpr auto dtdInfo = 0x168; // IDtdInfo
		constexpr auto fragmentType = 0x170; // XmlNodeType
		constexpr auto fragmentParserContext = 0x178; // XmlParserContext
		constexpr auto fragment = 0x180; // bool
		constexpr auto incReadDecoder = 0x188; // IncrementalReadDecoder
		constexpr auto incReadState = 0x190; // XmlTextReaderImpl.IncrementalReadState
		constexpr auto incReadLineInfo = 0x194; // LineInfo
		constexpr auto incReadDepth = 0x19c; // int
		constexpr auto incReadLeftStartPos = 0x1a0; // int
		constexpr auto incReadLeftEndPos = 0x1a4; // int
		constexpr auto attributeValueBaseEntityId = 0x1a8; // int
		constexpr auto emptyEntityInAttributeResolved = 0x1ac; // bool
		constexpr auto validationEventHandling = 0x1b0; // IValidationEventHandling
		constexpr auto onDefaultAttributeUse = 0x1b8; // XmlTextReaderImpl.OnDefaultAttributeUseDelegate
		constexpr auto validatingReaderCompatFlag = 0x1c0; // bool
		constexpr auto addDefaultAttributesAndNormalize = 0x1c1; // bool
		constexpr auto stringBuilder = 0x1c8; // StringBuilder
		constexpr auto rootElementParsed = 0x1d0; // bool
		constexpr auto standalone = 0x1d1; // bool
		constexpr auto nextEntityId = 0x1d4; // int
		constexpr auto parsingMode = 0x1d8; // XmlTextReaderImpl.ParsingMode
		constexpr auto readState = 0x1dc; // ReadState
		constexpr auto lastEntity = 0x1e0; // IDtdEntityInfo
		constexpr auto afterResetState = 0x1e8; // bool
		constexpr auto documentStartBytePos = 0x1ec; // int
		constexpr auto readValueOffset = 0x1f0; // int
		constexpr auto charactersInDocument = 0x1f8; // long
		constexpr auto charactersFromEntities = 0x200; // long
		constexpr auto currentEntities = 0x208; // Dictionary(IDtdEntityInfo, IDtdEntityInfo)
		constexpr auto disableUndeclaredEntityCheck = 0x210; // bool
		constexpr auto outerReader = 0x218; // XmlReader
		constexpr auto xmlResolverIsSet = 0x220; // bool
		constexpr auto Xml = 0x228; // string
		constexpr auto XmlNs = 0x230; // string
		constexpr auto parseText_dummyTask = 0x238; // Task(Tuple(int, int, int, bool))
	}

	namespace n_BinaryCrossAppDomainMap {
		constexpr auto crossAppDomainArrayIndex = 0x10; // int
	}

	namespace n_VideoCapture { // : IDisposable
		constexpr auto m_NativePtr = 0x10; // IntPtr
	}

	namespace n_GameScreen_Infantry { // : MonoBehaviour
		constexpr auto ToolName = 0x18; // TextMeshProUGUI
		constexpr auto NightVision = 0x20; // GameObject
		constexpr auto WeaponsMain = 0x28; // GameObject
		constexpr auto Mags = 0x30; // GameScreen_Infantry.Magazine[]
		constexpr auto FireModeSingle = 0x38; // GameObject
		constexpr auto FireModeDouble = 0x40; // GameObject
		constexpr auto FireModeTriple = 0x48; // GameObject
		constexpr auto FireModeAuto = 0x50; // GameObject
		constexpr auto GadgetMain = 0x58; // GameObject
		constexpr auto GadgetCount = 0x60; // TextMeshProUGUI
		constexpr auto FirstAidCount = 0x68; // TextMeshProUGUI
		constexpr auto ThrowableIcon = 0x70; // Image
		constexpr auto ThrowableCount = 0x78; // TextMeshProUGUI
		constexpr auto AttachmentsParent = 0x80; // RectTransform
		constexpr auto MagCheck = 0x88; // GameObject
		constexpr auto FireMode = 0x90; // GameObject
		constexpr auto SideRail = 0x98; // GameObject
		constexpr auto SwitchCanted = 0xa0; // GameObject
		constexpr auto SwitchCantedCanvas = 0xa8; // CanvasGroup
		constexpr auto SideRailImage = 0xb0; // RawImage
		constexpr auto (TickIndex8)k__BackingField = 0xb8; // int
		constexpr auto active_weapon = 0xc0; // WeaponManager
		constexpr auto active_gadget = 0xc8; // GadgetManager
		constexpr auto active_throwable = 0xd0; // GadgetManager
		constexpr auto lastThrowableCount = 0xd8; // int
		constexpr auto lastFirstAidCount = 0xdc; // int
		constexpr auto lastGadgetCount = 0xe0; // int
		constexpr auto sideRailState = 0xe4; // bool
		constexpr auto lastFiring = 0xe8; // FiringTypes
		constexpr auto lastSetIcon = 0xf0; // Sprite
		constexpr auto mList = 0xf8; // HorizontalList
		constexpr auto mLastMax = 0x100; // float
		constexpr auto mNightVisionOn = 0x104; // bool
		constexpr auto mToolNameWidth = 0x108; // float
		constexpr auto mMagWidth = 0x10c; // float
	}

	namespace n_TankState {
		constexpr auto Gear = 0x10; // int
		constexpr auto RPM = 0x14; // float
		constexpr auto LocalVelocity = 0x18; // Vector3
		constexpr auto ClientWorldVelocity = 0x24; // Vector3
		constexpr auto NetworkDelta = 0x30; // Vector3
		constexpr auto NetworkDeltaRotation = 0x3c; // Quaternion
		constexpr auto ServerPosition = 0x4c; // Vector3
		constexpr auto ServerRotation = 0x58; // Quaternion
		constexpr auto ServerWorldVelocity = 0x68; // Vector3
		constexpr auto MovementInputs = 0x74; // Vector2
		constexpr auto MovementBreak = 0x7c; // bool
		constexpr auto AudioEngineGas = 0x80; // TankState.Audio
		constexpr auto AudioEngineIdle = 0x88; // TankState.Audio
		constexpr auto AudioEngineMovement = 0x90; // TankState.Audio
		constexpr auto AudioEngineMain = 0x98; // TankState.Audio
		constexpr auto AudioEnginePitch = 0xa0; // TankState.Audio
	}

	namespace n_GlintBehaviour { // : AttachmentAddon
		constexpr auto (FastListIndexA)k__BackingField = 0x40; // int
		constexpr auto (FastListIndexB)k__BackingField = 0x44; // int
		constexpr auto activeIndex = 0x48; // LoadoutIndex
		constexpr auto isRegistered = 0x49; // bool
		constexpr auto Glint = 0x50; // MeshRenderer
		constexpr auto _isVisible = 0x58; // bool
		constexpr auto _wasVisible = 0x59; // bool
		constexpr auto _lensUnderShadow = 0x5a; // bool
		constexpr auto _lensVisibleToCamera = 0x5b; // bool
		constexpr auto _sunVisibleToLens = 0x5c; // bool
		constexpr auto _lensReflectionVisibleToCamera = 0x5d; // bool
		constexpr auto position = 0x60; // Vector3
		constexpr auto _requirePosition = 0x6c; // bool
		constexpr auto _requireCheck = 0x6d; // bool
		constexpr auto _obstacleExist = 0x6e; // bool
		constexpr auto _lastObstacleCheck = 0x70; // int
	}

	namespace n_InterfaceTypeAttribute { // : Attribute
		constexpr auto _val = 0x10; // ComInterfaceType
	}

	namespace n_XmlSchemaCompilationSettings {
		constexpr auto enableUpaCheck = 0x10; // bool
	}

	namespace n_EventCommandEventArgs { // : EventArgs
		constexpr auto (Command)k__BackingField = 0x10; // EventCommand
		constexpr auto (Arguments)k__BackingField = 0x18; // IDictionary(string, string)
		constexpr auto eventSource = 0x20; // EventSource
		constexpr auto dispatcher = 0x28; // EventDispatcher
		constexpr auto listener = 0x30; // EventListener
		constexpr auto perEventSourceSessionId = 0x38; // int
		constexpr auto etwSessionId = 0x3c; // int
		constexpr auto enable = 0x40; // bool
		constexpr auto level = 0x44; // EventLevel
		constexpr auto matchAnyKeyword = 0x48; // EventKeywords
		constexpr auto nextCommand = 0x50; // EventCommandEventArgs
	}

	namespace n_FtpWebResponse { // : WebResponse
		constexpr auto stream = 0x18; // Stream
		constexpr auto uri = 0x20; // Uri
		constexpr auto statusCode = 0x28; // FtpStatusCode
		constexpr auto lastModified = 0x30; // DateTime
		constexpr auto bannerMessage = 0x38; // string
		constexpr auto welcomeMessage = 0x40; // string
		constexpr auto exitMessage = 0x48; // string
		constexpr auto statusDescription = 0x50; // string
		constexpr auto method = 0x58; // string
		constexpr auto disposed = 0x60; // bool
		constexpr auto request = 0x68; // FtpWebRequest
		constexpr auto contentLength = 0x70; // long
	}

	namespace n_XmlUntypedConverter { // : XmlListConverter
		constexpr auto allowListToList = 0x30; // bool
	}

	namespace n_X509CertificateImplCollection { // : IDisposable
		constexpr auto list = 0x10; // List(X509CertificateImpl)
	}

	namespace n_HeaderInfo {
		constexpr auto IsRequestRestricted = 0x10; // bool
		constexpr auto IsResponseRestricted = 0x11; // bool
		constexpr auto Parser = 0x18; // HeaderParser
		constexpr auto HeaderName = 0x20; // string
		constexpr auto AllowMultiValues = 0x28; // bool
	}

	namespace n_Vector3ListDebugView {
		constexpr auto _list = 0x10; // IList(Vector3)
	}

	namespace n_TMP_Dropdown.OptionDataList {
		constexpr auto m_Options = 0x10; // List(TMP_Dropdown.OptionData)
	}

	namespace n_UnverifiedPackage {
		constexpr auto EtaResend = 0x10; // float
		constexpr auto Package = 0x18; // Stream
	}

	namespace n_XmlNodeChangedEventArgs { // : EventArgs
		constexpr auto action = 0x10; // XmlNodeChangedAction
		constexpr auto node = 0x18; // XmlNode
		constexpr auto oldParent = 0x20; // XmlNode
		constexpr auto newParent = 0x28; // XmlNode
		constexpr auto oldValue = 0x30; // string
		constexpr auto newValue = 0x38; // string
	}

	namespace n_DebugUI.Widget {
		constexpr auto m_Panel = 0x10; // DebugUI.Panel
		constexpr auto m_Parent = 0x18; // DebugUI.IContainer
		constexpr auto (flags)k__BackingField = 0x20; // DebugUI.Flags
		constexpr auto (displayName)k__BackingField = 0x28; // string
		constexpr auto (queryPath)k__BackingField = 0x30; // string
	}

	namespace n_TouchScreenKeyboard {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_DelegateData {
		constexpr auto target_type = 0x10; // Type
		constexpr auto method_name = 0x18; // string
		constexpr auto curried_first_arg = 0x20; // bool
	}

	namespace n_VerticalHeightMin { // : MonoBehaviour
		constexpr auto MaxRect = 0x18; // RectTransform
		constexpr auto Min = 0x20; // float
		constexpr auto Max = 0x24; // float
		constexpr auto rect = 0x28; // RectTransform
		constexpr auto (TickIndex8)k__BackingField = 0x30; // int
	}

	namespace n_CacheAxisQuery { // : BaseAxisQuery
		constexpr auto outputBuffer = 0x58; // List(XPathNavigator)
	}

	namespace n_EncoderFallbackException { // : ArgumentException
		constexpr auto charUnknown = 0x90; // char
		constexpr auto charUnknownHigh = 0x92; // char
		constexpr auto charUnknownLow = 0x94; // char
		constexpr auto index = 0x98; // int
	}

	namespace n_VisualTreeUpdater.UpdaterArray {
		constexpr auto m_VisualTreeUpdaters = 0x10; // IVisualTreeUpdater[]
	}

	namespace n_RenderObjects.CustomCameraSettings {
		constexpr auto overrideCamera = 0x10; // bool
		constexpr auto restoreCamera = 0x11; // bool
		constexpr auto offset = 0x14; // Vector4
		constexpr auto cameraFieldOfView = 0x24; // float
	}

	namespace n_Calendar { // : ICloneable
		constexpr auto m_currentEraValue = 0x10; // int
		constexpr auto m_isReadOnly = 0x14; // bool
		constexpr auto twoDigitYearMax = 0x18; // int
	}

	namespace n_MonoEvent { // : RuntimeEventInfo
		constexpr auto klass = 0x18; // IntPtr
		constexpr auto handle = 0x20; // IntPtr
	}

	namespace n_PlayerVoice {
		constexpr auto (Decoder)k__BackingField = 0x10; // OpusDecoder
		constexpr auto (index)k__BackingField = 0x18; // byte
		constexpr auto (Stream)k__BackingField = 0x20; // AudioClip
		constexpr auto (VoiceChannel)k__BackingField = 0x28; // VoiceChannel
		constexpr auto (isTransmitting)k__BackingField = 0x29; // bool
		constexpr auto (RadioSource)k__BackingField = 0x30; // AudioSource
		constexpr auto LastSequanceIndex = 0x38; // uint
		constexpr auto startTime = 0x3c; // float
		constexpr auto lastTime = 0x40; // float
		constexpr auto (TransmitStart)k__BackingField = 0x44; // float
	}

	namespace n_Chunk {
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_Text { // : MaskableGraphic
		constexpr auto m_FontData = 0xc8; // FontData
		constexpr auto m_Text = 0xd0; // string
		constexpr auto m_TextCache = 0xd8; // TextGenerator
		constexpr auto m_TextCacheForLayout = 0xe0; // TextGenerator
		constexpr auto m_DisableFontTextureRebuiltCallback = 0xe8; // bool
		constexpr auto m_TempVerts = 0xf0; // UIVertex[]
	}

	namespace n_ActivityFilter { // : IDisposable
		constexpr auto m_activeActivities = 0x10; // ConcurrentDictionary(Guid, int)
		constexpr auto m_rootActiveActivities = 0x18; // ConcurrentDictionary(Guid, Tuple(Guid, int))
		constexpr auto m_providerGuid = 0x20; // Guid
		constexpr auto m_eventId = 0x30; // int
		constexpr auto m_samplingFreq = 0x34; // int
		constexpr auto m_curSampleCount = 0x38; // int
		constexpr auto m_perEventSourceSessionId = 0x3c; // int
		constexpr auto m_next = 0x40; // ActivityFilter
		constexpr auto m_myActivityDelegate = 0x48; // Action(Guid)
	}

	namespace n_SupportedRenderingFeatures {
		constexpr auto (reflectionProbeModes)k__BackingField = 0x10; // SupportedRenderingFeatures.ReflectionProbeModes
		constexpr auto (defaultMixedLightingModes)k__BackingField = 0x14; // SupportedRenderingFeatures.LightmapMixedBakeModes
		constexpr auto (mixedLightingModes)k__BackingField = 0x18; // SupportedRenderingFeatures.LightmapMixedBakeModes
		constexpr auto (lightmapBakeTypes)k__BackingField = 0x1c; // LightmapBakeType
		constexpr auto (lightmapsModes)k__BackingField = 0x20; // LightmapsMode
		constexpr auto (enlighten)k__BackingField = 0x24; // bool
		constexpr auto (lightProbeProxyVolumes)k__BackingField = 0x25; // bool
		constexpr auto (motionVectors)k__BackingField = 0x26; // bool
		constexpr auto (receiveShadows)k__BackingField = 0x27; // bool
		constexpr auto (reflectionProbes)k__BackingField = 0x28; // bool
		constexpr auto (rendererPriority)k__BackingField = 0x29; // bool
		constexpr auto (terrainDetailUnsupported)k__BackingField = 0x2a; // bool
		constexpr auto (overridesEnvironmentLighting)k__BackingField = 0x2b; // bool
		constexpr auto (overridesFog)k__BackingField = 0x2c; // bool
		constexpr auto (overridesOtherLightingSettings)k__BackingField = 0x2d; // bool
		constexpr auto (editableMaterialRenderQueue)k__BackingField = 0x2e; // bool
		constexpr auto (overridesLODBias)k__BackingField = 0x2f; // bool
		constexpr auto (overridesMaximumLODLevel)k__BackingField = 0x30; // bool
		constexpr auto (autoAmbientProbeBaking)k__BackingField = 0x31; // bool
		constexpr auto (autoDefaultReflectionProbeBaking)k__BackingField = 0x32; // bool
	}

	namespace n_GregorianCalendar { // : Calendar
		constexpr auto m_type = 0x20; // GregorianCalendarTypes
	}

	namespace n_WeaponRecoilPaterns {
		constexpr auto PositionZ = 0x10; // AnimationCurve
		constexpr auto EularZ = 0x18; // AnimationCurve
		constexpr auto EularY = 0x20; // AnimationCurve
		constexpr auto EularX = 0x28; // AnimationCurve
		constexpr auto CameraShakeX = 0x30; // AnimationCurve
		constexpr auto CameraShakeHipMultiplierX = 0x38; // float
		constexpr auto CameraShakeY = 0x40; // AnimationCurve
		constexpr auto CameraShakeHipMultiplierY = 0x48; // float
		constexpr auto CameraShakeZ = 0x50; // AnimationCurve
		constexpr auto CameraShakeHipMultiplierZ = 0x58; // float
		constexpr auto CameraShakeAimMultiplier = 0x5c; // float
	}

	namespace n_MainMenu_NoClan_Manager { // : MonoBehaviour
		constexpr auto Home = 0x18; // CanvasGroup
		constexpr auto JoinPage = 0x20; // CanvasGroup
		constexpr auto CreatePage = 0x28; // CanvasGroup
		constexpr auto CreateName = 0x30; // TMP_InputField
		constexpr auto CreateTag = 0x38; // TMP_InputField
		constexpr auto CreateColor = 0x40; // CUIColorPicker
		constexpr auto CreateError = 0x48; // TextMeshProUGUI
		constexpr auto CreatePhotoPreview = 0x50; // RawImage
		constexpr auto CreatePhoto = 0x58; // byte[]
		constexpr auto JoinCodeField = 0x60; // TMP_InputField
		constexpr auto JoinError = 0x68; // TextMeshProUGUI
		constexpr auto index = 0x70; // int
	}

	namespace n_MergeFilterQuery { // : CacheOutputQuery
		constexpr auto child = 0x28; // Query
	}

	namespace n_ObjectWriter {
		constexpr auto m_objectQueue = 0x10; // Queue
		constexpr auto m_idGenerator = 0x18; // ObjectIDGenerator
		constexpr auto m_currentId = 0x20; // int
		constexpr auto m_surrogates = 0x28; // ISurrogateSelector
		constexpr auto m_context = 0x30; // StreamingContext
		constexpr auto serWriter = 0x40; // __BinaryWriter
		constexpr auto m_objectManager = 0x48; // SerializationObjectManager
		constexpr auto topId = 0x50; // long
		constexpr auto topName = 0x58; // string
		constexpr auto headers = 0x60; // Header[]
		constexpr auto formatterEnums = 0x68; // InternalFE
		constexpr auto m_binder = 0x70; // SerializationBinder
		constexpr auto serObjectInfoInit = 0x78; // SerObjectInfoInit
		constexpr auto m_formatterConverter = 0x80; // IFormatterConverter
		constexpr auto crossAppDomainArray = 0x88; // object[]
		constexpr auto previousObj = 0x90; // object
		constexpr auto previousId = 0x98; // long
		constexpr auto previousType = 0xa0; // Type
		constexpr auto previousCode = 0xa8; // InternalPrimitiveTypeE
		constexpr auto assemblyToIdTable = 0xb0; // Hashtable
		constexpr auto niPool = 0xb8; // SerStack
	}

	namespace n_GUIContent {
		constexpr auto m_Text = 0x10; // string
		constexpr auto m_Image = 0x18; // Texture
		constexpr auto m_Tooltip = 0x20; // string
	}

	namespace n_ThirdPersonAnimationJobData {
		constexpr auto Update = 0x10; // bool
		constexpr auto isActive = 0x11; // bool
		constexpr auto Data = 0x18; // PositionAndQuaternationClass[]
	}

	namespace n_Toggle { // : Selectable
		constexpr auto toggleTransition = 0xf8; // Toggle.ToggleTransition
		constexpr auto graphic = 0x100; // Graphic
		constexpr auto m_Group = 0x108; // ToggleGroup
		constexpr auto onValueChanged = 0x110; // Toggle.ToggleEvent
		constexpr auto m_IsOn = 0x118; // bool
	}

	namespace n_Wearable { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto LanguageID = 0x20; // int
		constexpr auto Permissions = 0x28; // Avaibility
		constexpr auto Prefab = 0x30; // GameObject
		constexpr auto Stats = 0x38; // WearableStats
	}

	namespace n_GameResources { // : ScriptableObject
		constexpr auto Materials = 0x18; // Materials
		constexpr auto PlayerSounds = 0x20; // PlayerSounds
		constexpr auto GamePrefabs = 0x28; // Prefabs
		constexpr auto Pool = 0x30; // Pool
		constexpr auto Curves = 0x38; // Curves
		constexpr auto Nature = 0x40; // Nature
		constexpr auto Pipeline = 0x48; // Pipeline
		constexpr auto Collections = 0x50; // Collection
		constexpr auto Abilities = 0x58; // SquadAbility[]
	}

	namespace n_ContextQuery { // : Query
		constexpr auto contextNode = 0x18; // XPathNavigator
	}

	namespace n_EncoderReplacementFallback { // : EncoderFallback
		constexpr auto strDefault = 0x18; // string
	}

	namespace n_XPathDocumentNavigator { // : XPathNavigator
		constexpr auto pageCurrent = 0x10; // XPathNode[]
		constexpr auto pageParent = 0x18; // XPathNode[]
		constexpr auto idxCurrent = 0x20; // int
		constexpr auto idxParent = 0x24; // int
		constexpr auto atomizedLocalName = 0x28; // string
	}

	namespace n_TaskFactory.CompleteOnInvokePromise { // : Task(Task)
		constexpr auto _tasks = 0x58; // IList(Task)
		constexpr auto m_firstTaskAlreadyCompleted = 0x60; // int
	}

	namespace n_DeflateStreamNative {
		constexpr auto feeder = 0x10; // DeflateStreamNative.UnmanagedReadOrWrite
		constexpr auto base_stream = 0x18; // Stream
		constexpr auto z_stream = 0x20; // DeflateStreamNative.SafeDeflateStreamHandle
		constexpr auto data = 0x28; // GCHandle
		constexpr auto disposed = 0x2c; // bool
		constexpr auto io_buffer = 0x30; // byte[]
	}

	namespace n_Binoculars { // : GadgetManager
		constexpr auto switchEta = 0xd0; // float
		constexpr auto toAim = 0xd4; // float
		constexpr auto wasAiming = 0xd8; // bool
		constexpr auto zoomLevel = 0xdc; // int
	}

	namespace n_Vector2Comparer { // : SharedObjectComparer(Vector2)
		constexpr auto min = 0x10; // float
	}

	namespace n_ObsoleteAttribute { // : Attribute
		constexpr auto _message = 0x10; // string
		constexpr auto _error = 0x18; // bool
	}

	namespace n_VFXBinderAttribute { // : PropertyAttribute
		constexpr auto MenuPath = 0x18; // string
	}

	namespace n_Hashtable { // : IDictionary
		constexpr auto buckets = 0x10; // Hashtable.bucket[]
		constexpr auto count = 0x18; // int
		constexpr auto occupancy = 0x1c; // int
		constexpr auto loadsize = 0x20; // int
		constexpr auto loadFactor = 0x24; // float
		constexpr auto version = 0x28; // int
		constexpr auto isWriterInProgress = 0x2c; // bool
		constexpr auto keys = 0x30; // ICollection
		constexpr auto values = 0x38; // ICollection
		constexpr auto _keycomparer = 0x40; // IEqualityComparer
		constexpr auto _syncRoot = 0x48; // object
	}

	namespace n_SpawnOverDistance.InputProperties {
		constexpr auto Position = 0x10; // Vector3
		constexpr auto RatePerUnit = 0x1c; // float
		constexpr auto VelocityThreshold = 0x20; // float
	}

	namespace n_VoteModeElement { // : MonoBehaviour
		constexpr auto GamemodeName = 0x18; // TextMeshProUGUI
		constexpr auto Votes = 0x20; // TextMeshProUGUI
		constexpr auto SelectedObject = 0x28; // GameObject
		constexpr auto mIndex = 0x30; // int
		constexpr auto mGamemode = 0x34; // GameMode
	}

	namespace n_BrowsableAttribute { // : Attribute
		constexpr auto browsable = 0x10; // bool
	}

	namespace n_RemoteSpotterUI { // : MonoBehaviour
		constexpr auto Reticle = 0x18; // RectTransform
		constexpr auto Range = 0x20; // TextMeshProUGUI
	}

	namespace n_Turret { // : ToolItem
		constexpr auto ShotSounds = 0x60; // AudioClip[]
		constexpr auto ZoomIn = 0x68; // AudioClip
		constexpr auto ZoomOut = 0x70; // AudioClip
		constexpr auto MaximumHorizontalTurnPerSecond = 0x78; // float
		constexpr auto HorizontalRange = 0x7c; // Vector2
		constexpr auto MaximumVerticalTurnPerSecond = 0x84; // float
		constexpr auto VerticalRange = 0x88; // Vector2
		constexpr auto isExplosive = 0x90; // bool
		constexpr auto RoundPerMinute = 0x94; // int
		constexpr auto InitialRounds = 0x98; // int
		constexpr auto Accuracy = 0x9c; // float
		constexpr auto MuzzleScale = 0xa0; // float
		constexpr auto BarrelShake = 0xa8; // AnimationCurve
		constexpr auto BarrelShakeScale = 0xb0; // float
		constexpr auto CameraShake = 0xb8; // AnimationCurve
		constexpr auto CameraShakeScale = 0xc0; // float
		constexpr auto PostProcessingAnimation = 0xc8; // AnimationCurve
		constexpr auto PostProcessingScale = 0xd0; // float
		constexpr auto ImageEffect = 0xd8; // PostProcess
		constexpr auto ImageEffectMaterial = 0xe0; // Material
		constexpr auto ZoomLevels = 0xe8; // int[]
	}

	namespace n_DefaultExecutionOrder { // : Attribute
		constexpr auto m_Order = 0x10; // int
	}

	namespace n_GUILayoutOption {
		constexpr auto type = 0x10; // GUILayoutOption.Type
		constexpr auto value = 0x18; // object
	}

	namespace n_RegistryKey { // : MarshalByRefObject
		constexpr auto handle = 0x18; // object
		constexpr auto safe_handle = 0x20; // SafeRegistryHandle
		constexpr auto hive = 0x28; // object
		constexpr auto qname = 0x30; // string
		constexpr auto isRemoteRoot = 0x38; // bool
		constexpr auto isWritable = 0x39; // bool
	}

	namespace n_ES { // : MonoBehaviour
		constexpr auto naturalFrequency = 0x18; // float
		constexpr auto dampingRatio = 0x1c; // float
		constexpr auto forceShift = 0x20; // float
		constexpr auto setSuspensionDistance = 0x24; // bool
	}

	namespace n_Physics2DRaycaster { // : PhysicsRaycaster
		constexpr auto m_Hits = 0x40; // RaycastHit2D[]
	}

	namespace n_SoapServices.TypeInfo {
		constexpr auto Attributes = 0x10; // Hashtable
		constexpr auto Elements = 0x18; // Hashtable
	}

	namespace n_NativeMethodAttribute { // : Attribute
		constexpr auto (Name)k__BackingField = 0x10; // string
		constexpr auto (IsThreadSafe)k__BackingField = 0x18; // bool
		constexpr auto (IsFreeFunction)k__BackingField = 0x19; // bool
		constexpr auto (ThrowsException)k__BackingField = 0x1a; // bool
		constexpr auto (HasExplicitThis)k__BackingField = 0x1b; // bool
	}

	namespace n_MonoChunkStream {
		constexpr auto headers = 0x10; // WebHeaderCollection
		constexpr auto chunkSize = 0x18; // int
		constexpr auto chunkRead = 0x1c; // int
		constexpr auto totalWritten = 0x20; // int
		constexpr auto state = 0x24; // MonoChunkStream.State
		constexpr auto saved = 0x28; // StringBuilder
		constexpr auto sawCR = 0x30; // bool
		constexpr auto gotit = 0x31; // bool
		constexpr auto trailerState = 0x34; // int
		constexpr auto chunks = 0x38; // ArrayList
	}

	namespace n_Climbable { // : MonoBehaviour
		constexpr auto OnPlayers = 0x18; // List(PlayerNetwork)
		constexpr auto ID = 0x20; // int
		constexpr auto (isSceneObject)k__BackingField = 0x24; // bool
		constexpr auto (Bottom)k__BackingField = 0x28; // Vector3
		constexpr auto (Top)k__BackingField = 0x34; // Vector3
		constexpr auto (UpNormal)k__BackingField = 0x40; // Vector3
		constexpr auto (Bottom2TopVector)k__BackingField = 0x4c; // Vector3
		constexpr auto (LenghtSqr)k__BackingField = 0x58; // float
		constexpr auto (Lenght)k__BackingField = 0x5c; // float
		constexpr auto (lifeTime)k__BackingField = 0x60; // float
		constexpr auto (inPool)k__BackingField = 0x64; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x68; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x6c; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x70; // bool
	}

	namespace n_Keybindings {
		constexpr auto bindings = 0x10; // List(Binding)
		constexpr auto InfLookVertical = 0x18; // Binding
		constexpr auto InfLookHorizontal = 0x20; // Binding
		constexpr auto Forward = 0x28; // Binding
		constexpr auto Backward = 0x30; // Binding
		constexpr auto Right = 0x38; // Binding
		constexpr auto Left = 0x40; // Binding
		constexpr auto Run = 0x48; // Binding
		constexpr auto Crouch = 0x50; // Binding
		constexpr auto Prone = 0x58; // Binding
		constexpr auto ToggleCrouch = 0x60; // Binding
		constexpr auto LeanLeft = 0x68; // Binding
		constexpr auto LeanRight = 0x70; // Binding
		constexpr auto Vault = 0x78; // Binding
		constexpr auto Jump = 0x80; // Binding
		constexpr auto FreeLook = 0x88; // Binding
		constexpr auto Dragging = 0x90; // Binding
		constexpr auto DroneForward = 0x98; // Binding
		constexpr auto DroneBackward = 0xa0; // Binding
		constexpr auto DroneRight = 0xa8; // Binding
		constexpr auto DroneLeft = 0xb0; // Binding
		constexpr auto DroneThrottleUp = 0xb8; // Binding
		constexpr auto DroneThrottleDown = 0xc0; // Binding
		constexpr auto DroneIncraseSpeed = 0xc8; // Binding
		constexpr auto NightVision = 0xd0; // Binding
		constexpr auto Fire = 0xd8; // Binding
		constexpr auto Fire2 = 0xe0; // Binding
		constexpr auto AimDownSight = 0xe8; // Binding
		constexpr auto FireMode = 0xf0; // Binding
		constexpr auto ZeroingUp = 0xf8; // Binding
		constexpr auto ZeroingDown = 0x100; // Binding
		constexpr auto ZeroingAdjusmentHoldKey = 0x108; // Binding
		constexpr auto Reload = 0x110; // Binding
		constexpr auto MagCheck = 0x118; // Binding
		constexpr auto SafetlyMode = 0x120; // Binding
		constexpr auto LaserOnOff = 0x128; // Binding
		constexpr auto NextSight = 0x130; // Binding
		constexpr auto PreviousSight = 0x138; // Binding
		constexpr auto FlirMode = 0x140; // Binding
		constexpr auto SwitchNext = 0x148; // Binding
		constexpr auto SwitchPrevious = 0x150; // Binding
		constexpr auto SwitchPrimary = 0x158; // Binding
		constexpr auto SwitchSecondary = 0x160; // Binding
		constexpr auto SwitchFirstAid = 0x168; // Binding
		constexpr auto SwitchGadgetA = 0x170; // Binding
		constexpr auto SwitchGadgetB = 0x178; // Binding
		constexpr auto SwitchThrowable = 0x180; // Binding
		constexpr auto Interact = 0x188; // Binding
		constexpr auto CutRope = 0x190; // Binding
		constexpr auto ThrowGadget = 0x198; // Binding
		constexpr auto Push = 0x1a0; // Binding
		constexpr auto Build = 0x1a8; // Binding
		constexpr auto Unbuild = 0x1b0; // Binding
		constexpr auto ChatAll = 0x1b8; // Binding
		constexpr auto ChatTeam = 0x1c0; // Binding
		constexpr auto ChatSquad = 0x1c8; // Binding
		constexpr auto VoipLocal = 0x1d0; // Binding
		constexpr auto VoipSquad = 0x1d8; // Binding
		constexpr auto VoipSquadLeaders = 0x1e0; // Binding
		constexpr auto Ping = 0x1e8; // Binding
		constexpr auto Map = 0x1f0; // Binding
		constexpr auto MapZoom = 0x1f8; // Binding
		constexpr auto Scoreboard = 0x200; // Binding
		constexpr auto SquadLeaderMenu = 0x208; // Binding
		constexpr auto HideUI = 0x210; // Binding
		constexpr auto LightsOnOff = 0x218; // Binding
		constexpr auto EngineOnOff = 0x220; // Binding
		constexpr auto Boost = 0x228; // Binding
		constexpr auto ZoomIn = 0x230; // Binding
		constexpr auto ZoomOut = 0x238; // Binding
		constexpr auto TankAP = 0x240; // Binding
		constexpr auto TankHE = 0x248; // Binding
		constexpr auto TankStabilization = 0x250; // Binding
		constexpr auto TankSmoke = 0x258; // Binding
		constexpr auto SpotterObserve = 0x260; // Binding
		constexpr auto SpotterDanger = 0x268; // Binding
	}

	namespace n_WeaponAttachmentData {
		constexpr auto MainSight = 0x10; // AScope
		constexpr auto TopSight = 0x18; // ATopSight
		constexpr auto Canted = 0x20; // ACanted
		constexpr auto BoltAction = 0x28; // ABoltAction
		constexpr auto Barrel = 0x30; // ABarrel
		constexpr auto SideRail = 0x38; // ASideRail
		constexpr auto UnderRail = 0x40; // AUnderRail
		constexpr auto MagazineIndex = 0x48; // int
		constexpr auto SkinIndex = 0x4c; // int
	}

	namespace n_FileSystemInfo { // : MarshalByRefObject
		constexpr auto _data = 0x18; // MonoIOStat
		constexpr auto _dataInitialised = 0x40; // int
		constexpr auto FullPath = 0x48; // string
		constexpr auto OriginalPath = 0x50; // string
		constexpr auto _displayPath = 0x58; // string
	}

	namespace n_CookieTokenizer {
		constexpr auto m_eofCookie = 0x10; // bool
		constexpr auto m_index = 0x14; // int
		constexpr auto m_length = 0x18; // int
		constexpr auto m_name = 0x20; // string
		constexpr auto m_quoted = 0x28; // bool
		constexpr auto m_start = 0x2c; // int
		constexpr auto m_token = 0x30; // CookieToken
		constexpr auto m_tokenLength = 0x34; // int
		constexpr auto m_tokenStream = 0x38; // string
		constexpr auto m_value = 0x40; // string
	}

	namespace n_VoteMapElement { // : MonoBehaviour
		constexpr auto mouseInside = 0x18; // bool
		constexpr auto bounds = 0x20; // RectTransform
		constexpr auto MapIcon = 0x28; // RawImage
		constexpr auto MapName = 0x30; // TextMeshProUGUI
		constexpr auto MapGameMode = 0x38; // TextMeshProUGUI
		constexpr auto MapSize = 0x40; // TextMeshProUGUI
		constexpr auto VoteCounterDay = 0x48; // TextMeshProUGUI
		constexpr auto VoteCounterNight = 0x50; // TextMeshProUGUI
		constexpr auto VoteCounterTotal = 0x58; // TextMeshProUGUI
		constexpr auto DaySelected = 0x60; // GameObject
		constexpr auto NightSelected = 0x68; // GameObject
		constexpr auto Map = 0x70; // EndingMap
		constexpr auto ID = 0x90; // int
		constexpr auto Total = 0x94; // int
		constexpr auto OrderIndex = 0x98; // int
	}

	namespace n_GameScreen_Supply { // : MonoBehaviour
		constexpr auto Primary = 0x18; // GameScreen_SupplyTool
		constexpr auto Secondary = 0x20; // GameScreen_SupplyTool
		constexpr auto FirstAid = 0x28; // GameScreen_SupplyTool
		constexpr auto LightGadget = 0x30; // GameScreen_SupplyTool
		constexpr auto HeavyGadget = 0x38; // GameScreen_SupplyTool
		constexpr auto Throwable = 0x40; // GameScreen_SupplyTool
		constexpr auto HorizontalLayout = 0x48; // HorizontalLayoutGroup
		constexpr auto Origin = 0x50; // RectTransform
		constexpr auto (TickIndex8)k__BackingField = 0x58; // int
		constexpr auto mLastCore = 0x60; // SupplyCore
		constexpr auto mActive = 0x68; // bool
	}

	namespace n_ContextMenuItemAttribute { // : PropertyAttribute
		constexpr auto name = 0x18; // string
		constexpr auto function = 0x20; // string
	}

	namespace n_BaseRaycaster { // : UIBehaviour
		constexpr auto m_RootRaycaster = 0x18; // BaseRaycaster
	}

	namespace n_LoopAndDelay.InputProperties {
		constexpr auto LoopCount = 0x10; // int
		constexpr auto LoopDuration = 0x14; // float
		constexpr auto Delay = 0x18; // float
	}

	namespace n_TransportState {
		constexpr auto NetworkDelta = 0x10; // Vector3
		constexpr auto NetworkDeltaRotation = 0x1c; // Quaternion
		constexpr auto ServerPosition = 0x2c; // Vector3
		constexpr auto ServerRotation = 0x38; // Quaternion
		constexpr auto ClientWorldVelocity = 0x48; // Vector3
		constexpr auto ServerLocalVelocity = 0x54; // Vector3
		constexpr auto ServerWorldVelocity = 0x60; // Vector3
		constexpr auto ServerWorldAngularVelocity = 0x6c; // Vector3
		constexpr auto ClientLocalVelocity = 0x78; // Vector3
		constexpr auto RPM = 0x84; // float
		constexpr auto Gear = 0x88; // int
		constexpr auto AudioGas = 0x8c; // TransportState.Audio
		constexpr auto AudioIdle = 0x94; // TransportState.Audio
		constexpr auto AudioFoley = 0x9c; // TransportState.Audio
		constexpr auto AudioSkid = 0xa4; // TransportState.Audio
		constexpr auto AudioHorn = 0xac; // TransportState.Audio
		constexpr auto AudioEngineFail = 0xb4; // TransportState.Audio
		constexpr auto InputVertical = 0xbc; // float
		constexpr auto InputHorizontal = 0xc0; // float
		constexpr auto InputBreak = 0xc4; // bool
		constexpr auto InputBoost = 0xc5; // bool
	}

	namespace n_CollisionShape { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
		constexpr auto _isDisposed = 0x19; // bool
		constexpr auto (UserObject)k__BackingField = 0x20; // object
	}

	namespace n_XPathDescendantIterator { // : XPathAxisIterator
		constexpr auto level = 0x40; // int
	}

	namespace n_MonoChunkStream.Chunk {
		constexpr auto Bytes = 0x10; // byte[]
		constexpr auto Offset = 0x18; // int
	}

	namespace n_NetworkStatUI { // : MonoBehaviour
		constexpr auto BytesSent = 0x18; // TextMeshProUGUI
		constexpr auto BytesReceived = 0x20; // TextMeshProUGUI
		constexpr auto TotalReceived = 0x28; // TextMeshProUGUI
		constexpr auto TotalSent = 0x30; // TextMeshProUGUI
		constexpr auto PackageLoss = 0x38; // TextMeshProUGUI
		constexpr auto PackageDuplicate = 0x40; // TextMeshProUGUI
		constexpr auto VoiceChatUpload = 0x48; // TextMeshProUGUI
		constexpr auto VoiceChatDownload = 0x50; // TextMeshProUGUI
		constexpr auto Ping = 0x58; // TextMeshProUGUI
		constexpr auto PlayerCount = 0x60; // TextMeshProUGUI
		constexpr auto ReliableSent = 0x68; // TextMeshProUGUI
		constexpr auto ReliableReceived = 0x70; // TextMeshProUGUI
		constexpr auto c = 0x78; // Canvas
		constexpr auto counter = 0x80; // float
		constexpr auto (TickIndex8)k__BackingField = 0x84; // int
	}

	namespace n_TMP_Dropdown.OptionData {
		constexpr auto m_Text = 0x10; // string
		constexpr auto m_Image = 0x18; // Sprite
	}

	namespace n_Hashtable.KeyCollection { // : ICollection
		constexpr auto _hashtable = 0x10; // Hashtable
	}

	namespace n_TouchInputModule { // : PointerInputModule
		constexpr auto m_LastMousePosition = 0x58; // Vector2
		constexpr auto m_MousePosition = 0x60; // Vector2
		constexpr auto m_InputPointerEvent = 0x68; // PointerEventData
		constexpr auto m_ForceModuleActive = 0x70; // bool
	}

	namespace n_VFXSphereBinder { // : VFXBinderBase
		constexpr auto m_Property = 0x20; // ExposedProperty
		constexpr auto Target = 0x28; // SphereCollider
		constexpr auto Center = 0x30; // ExposedProperty
		constexpr auto Radius = 0x38; // ExposedProperty
	}

	namespace n_MainCamera { // : MonoBehaviour
		constexpr auto Priority = 0x18; // int
		constexpr auto IgnoreCameraShake = 0x1c; // bool
		constexpr auto (FastListIndexA)k__BackingField = 0x20; // int
		constexpr auto m_enabled = 0x24; // bool
		constexpr auto m_isInitialized = 0x25; // bool
		constexpr auto m_foliage_forward = 0x28; // float
		constexpr auto m_foliage_up = 0x2c; // float
		constexpr auto m_foliage_scale = 0x30; // float
		constexpr auto m_lastPing = 0x34; // float
		constexpr auto m_isFPCamera = 0x38; // bool
		constexpr auto m_UIFlagDisabled = 0x39; // bool
		constexpr auto m_uploadFlag = 0x3a; // bool
		constexpr auto CameraComponent = 0x40; // Camera
		constexpr auto m_audioListener = 0x48; // AudioListener
		constexpr auto m_defaultEular = 0x50; // Vector3
		constexpr auto m_data = 0x60; // UniversalAdditionalCameraData
	}

	namespace n_X509ChainElementCollection { // : ICollection
		constexpr auto _list = 0x10; // ArrayList
	}

	namespace n_WindowsConsoleDriver { // : IConsoleDriver
		constexpr auto inputHandle = 0x10; // IntPtr
		constexpr auto outputHandle = 0x18; // IntPtr
		constexpr auto defaultAttribute = 0x20; // short
	}

	namespace n_StandaloneInputModule { // : PointerInputModule
		constexpr auto m_PrevActionTime = 0x58; // float
		constexpr auto m_LastMoveVector = 0x5c; // Vector2
		constexpr auto m_ConsecutiveMoveCount = 0x64; // int
		constexpr auto m_LastMousePosition = 0x68; // Vector2
		constexpr auto m_MousePosition = 0x70; // Vector2
		constexpr auto m_CurrentFocusedGameObject = 0x78; // GameObject
		constexpr auto m_InputPointerEvent = 0x80; // PointerEventData
		constexpr auto m_HorizontalAxis = 0x88; // string
		constexpr auto m_VerticalAxis = 0x90; // string
		constexpr auto m_SubmitButton = 0x98; // string
		constexpr auto m_CancelButton = 0xa0; // string
		constexpr auto m_InputActionsPerSecond = 0xa8; // float
		constexpr auto m_RepeatDelay = 0xac; // float
		constexpr auto m_ForceModuleActive = 0xb0; // bool
	}

	namespace n_NetSerializer { // : IDisposable
		constexpr auto buffer = 0x10; // byte[]
		constexpr auto WritePosition = 0x18; // int
		constexpr auto ReadPosition = 0x1c; // int
		constexpr auto (isDisposed)k__BackingField = 0x20; // bool
		constexpr auto (inPool)k__BackingField = 0x21; // bool
	}

	namespace n_HandIKProvider {
		constexpr auto hasparent = 0x10; // bool
		constexpr auto left = 0x18; // Transform
		constexpr auto right = 0x20; // Transform
		constexpr auto leftLocal = 0x28; // Vector3
		constexpr auto rightLocal = 0x34; // Vector3
	}

	namespace n_X509Certificate { // : ISerializable
		constexpr auto decoder = 0x10; // ASN1
		constexpr auto impl = 0x10; // X509CertificateImpl
		constexpr auto hideDates = 0x18; // bool
		constexpr auto m_encodedcert = 0x18; // byte[]
		constexpr auto issuer_name = 0x20; // string
		constexpr auto m_from = 0x20; // DateTime
		constexpr auto m_until = 0x28; // DateTime
		constexpr auto subject_name = 0x28; // string
		constexpr auto issuer = 0x30; // ASN1
		constexpr auto m_issuername = 0x38; // string
		constexpr auto m_keyalgo = 0x40; // string
		constexpr auto m_keyalgoparams = 0x48; // byte[]
		constexpr auto subject = 0x50; // ASN1
		constexpr auto m_subject = 0x58; // string
		constexpr auto m_publickey = 0x60; // byte[]
		constexpr auto signature = 0x68; // byte[]
		constexpr auto m_signaturealgo = 0x70; // string
		constexpr auto m_signaturealgoparams = 0x78; // byte[]
		constexpr auto _rsa = 0x80; // RSA
		constexpr auto _dsa = 0x88; // DSA
		constexpr auto version = 0x90; // int
		constexpr auto serialnumber = 0x98; // byte[]
		constexpr auto issuerUniqueID = 0xa0; // byte[]
		constexpr auto subjectUniqueID = 0xa8; // byte[]
		constexpr auto extensions = 0xb0; // X509ExtensionCollection
	}

	namespace n_GlobalCanvas { // : MonoBehaviour
		constexpr auto EventSystem = 0x18; // GameObject
		constexpr auto (TickIndex8)k__BackingField = 0x20; // int
		constexpr auto lastEvent = 0x24; // int
	}

	namespace n_InfConquest { // : GameplayMode
		constexpr auto (TicketBleedPerFlag)k__BackingField = 0x48; // int
		constexpr auto (NonBaseFlagCount)k__BackingField = 0x4c; // int
		constexpr auto (Flags)k__BackingField = 0x50; // Flag[]
		constexpr auto RoundTime = 0x58; // RoundTimer
		constexpr auto mLast50TicketsLeftFlag = 0x60; // bool
		constexpr auto mLast10TicketsLeftFlag = 0x61; // bool
		constexpr auto mLastTicketBleed = 0x64; // float
		constexpr auto mQuadUpdateCounter = 0x68; // int
	}

	namespace n_DynamicsWorld { // : CollisionWorld
		constexpr auto _callback = 0x40; // DynamicsWorld.InternalTickCallback
		constexpr auto _callbackUnmanaged = 0x48; // DynamicsWorld.InternalTickCallbackUnmanaged
		constexpr auto _constraintSolver = 0x50; // ConstraintSolver
		constexpr auto _solverInfo = 0x58; // ContactSolverInfo
		constexpr auto _actions = 0x60; // Dictionary(IAction, ActionInterfaceWrapper)
		constexpr auto _constraints = 0x68; // List(TypedConstraint)
		constexpr auto (WorldUserInfo)k__BackingField = 0x70; // object
	}

	namespace n_PlayerStats {
		constexpr auto Progess = 0x10; // PlayerProgess
		constexpr auto Clan = 0x18; // PlayerClan
		constexpr auto ToolsProgess = 0x20; // PlayerToolsProgess
		constexpr auto Achievements = 0x28; // PlayerAchievements
		constexpr auto Selections = 0x30; // PlayerSelections
		constexpr auto isBanned = 0x38; // bool
	}

	namespace n_XmlName { // : IXmlSchemaInfo
		constexpr auto prefix = 0x10; // string
		constexpr auto localName = 0x18; // string
		constexpr auto ns = 0x20; // string
		constexpr auto name = 0x28; // string
		constexpr auto hashCode = 0x30; // int
		constexpr auto ownerDoc = 0x38; // XmlDocument
		constexpr auto next = 0x40; // XmlName
	}

	namespace n_GUISkin { // : ScriptableObject
		constexpr auto m_Font = 0x18; // Font
		constexpr auto m_box = 0x20; // GUIStyle
		constexpr auto m_button = 0x28; // GUIStyle
		constexpr auto m_toggle = 0x30; // GUIStyle
		constexpr auto m_label = 0x38; // GUIStyle
		constexpr auto m_textField = 0x40; // GUIStyle
		constexpr auto m_textArea = 0x48; // GUIStyle
		constexpr auto m_window = 0x50; // GUIStyle
		constexpr auto m_horizontalSlider = 0x58; // GUIStyle
		constexpr auto m_horizontalSliderThumb = 0x60; // GUIStyle
		constexpr auto m_horizontalSliderThumbExtent = 0x68; // GUIStyle
		constexpr auto m_verticalSlider = 0x70; // GUIStyle
		constexpr auto m_verticalSliderThumb = 0x78; // GUIStyle
		constexpr auto m_verticalSliderThumbExtent = 0x80; // GUIStyle
		constexpr auto m_horizontalScrollbar = 0x88; // GUIStyle
		constexpr auto m_horizontalScrollbarThumb = 0x90; // GUIStyle
		constexpr auto m_horizontalScrollbarLeftButton = 0x98; // GUIStyle
		constexpr auto m_horizontalScrollbarRightButton = 0xa0; // GUIStyle
		constexpr auto m_verticalScrollbar = 0xa8; // GUIStyle
		constexpr auto m_verticalScrollbarThumb = 0xb0; // GUIStyle
		constexpr auto m_verticalScrollbarUpButton = 0xb8; // GUIStyle
		constexpr auto m_verticalScrollbarDownButton = 0xc0; // GUIStyle
		constexpr auto m_ScrollView = 0xc8; // GUIStyle
		constexpr auto m_CustomStyles = 0xd0; // GUIStyle[]
		constexpr auto m_Settings = 0xd8; // GUISettings
		constexpr auto m_Styles = 0xe0; // Dictionary(string, GUIStyle)
	}

	namespace n_ManifestResourceInfo {
		constexpr auto _containingAssembly = 0x10; // Assembly
		constexpr auto _containingFileName = 0x18; // string
		constexpr auto _resourceLocation = 0x20; // ResourceLocation
	}

	namespace n_XPathNodePageInfo {
		constexpr auto pageNum = 0x10; // int
		constexpr auto nodeCount = 0x14; // int
		constexpr auto pageNext = 0x18; // XPathNode[]
	}

	namespace n_AllShortcutCombos { // : Singleton(AllShortcutCombos)
		constexpr auto _offsetFromPlacementSurface = 0x10; // ShortcutCombo
		constexpr auto _mouseRotateAroundX = 0x18; // ShortcutCombo
		constexpr auto _mouseRotateAroundY = 0x20; // ShortcutCombo
		constexpr auto _mouseRotateAroundZ = 0x28; // ShortcutCombo
		constexpr auto _mouseScreenRotate = 0x30; // ShortcutCombo
		constexpr auto _mouseFreeRotate = 0x38; // ShortcutCombo
		constexpr auto _mouseUniformScale = 0x40; // ShortcutCombo
		constexpr auto _mouseScaleX = 0x48; // ShortcutCombo
		constexpr auto _mouseScaleY = 0x50; // ShortcutCombo
		constexpr auto _mouseScaleZ = 0x58; // ShortcutCombo
		constexpr auto _editToolRotationTypeX = 0x60; // ShortcutCombo
		constexpr auto _editToolRotationTypeY = 0x68; // ShortcutCombo
		constexpr auto _editToolRotationTypeZ = 0x70; // ShortcutCombo
		constexpr auto _editToolRotationTypeFree = 0x78; // ShortcutCombo
		constexpr auto _editToolRotationTypeScreen = 0x80; // ShortcutCombo
		constexpr auto _editToolScaleTypeX = 0x88; // ShortcutCombo
		constexpr auto _editToolScaleTypeY = 0x90; // ShortcutCombo
		constexpr auto _editToolScaleTypeZ = 0x98; // ShortcutCombo
		constexpr auto _editToolScaleTypeUniform = 0xa0; // ShortcutCombo
		constexpr auto _editToolMouseRaycastModeRaycast = 0xa8; // ShortcutCombo
		constexpr auto _editToolMouseRaycastModeMoveAlongDirection = 0xb0; // ShortcutCombo
		constexpr auto _editToolMouseRaycastModeRotation = 0xb8; // ShortcutCombo
		constexpr auto _editToolMouseRaycastModeScale = 0xc0; // ShortcutCombo
		constexpr auto _brushTool = 0xc8; // ShortcutCombo
		constexpr auto _globalSpawnTool = 0xd0; // ShortcutCombo
		constexpr auto _editTool = 0xd8; // ShortcutCombo
		constexpr auto _precisionTool = 0xe0; // ShortcutCombo
		constexpr auto _brushPaintTool = 0xe8; // ShortcutCombo
		constexpr auto _erasePaintTool = 0xf0; // ShortcutCombo
	}

	namespace n_MeshBuilderLong {
		constexpr auto VertexBuffer = 0x10; // byte[]
		constexpr auto TrissBuffer = 0x18; // int[][]
		constexpr auto vertexPosition = 0x20; // int
		constexpr auto trissPosition = 0x28; // int[]
		constexpr auto NumberOfVerticles = 0x30; // int
	}

	namespace n_NightGoggle { // : MonoBehaviour
		constexpr auto (TickIndex3)k__BackingField = 0x18; // int
		constexpr auto (TickIndex6)k__BackingField = 0x1c; // int
		constexpr auto (TickIndex5)k__BackingField = 0x20; // int
		constexpr auto mLightSources = 0x28; // List(NightGoggle.mLightSource)
		constexpr auto mEtaToEffect = 0x30; // float
		constexpr auto mLastValue = 0x34; // bool
		constexpr auto NightVisionMaterial = 0x38; // Material
		constexpr auto OnActivate = 0x40; // AudioClip
		constexpr auto OnDeactivate = 0x48; // AudioClip
	}

	namespace n_SizedArray { // : ICloneable
		constexpr auto objects = 0x10; // object[]
		constexpr auto negObjects = 0x18; // object[]
	}

	namespace n_ReadOnlyCollectionBase { // : ICollection
		constexpr auto list = 0x10; // ArrayList
	}

	namespace n_CustomizeMainStatsManager { // : MonoBehaviour
		constexpr auto Primary = 0x18; // CustomizeMainStatsElement
		constexpr auto Secondary = 0x20; // CustomizeMainStatsElement
		constexpr auto FirstAid = 0x28; // CustomizeMainStatsElement
		constexpr auto ToolA = 0x30; // CustomizeMainStatsElement
		constexpr auto ToolB = 0x38; // CustomizeMainStatsElement
		constexpr auto Throwable = 0x40; // CustomizeMainStatsElement
	}

	namespace n_XPathSingletonIterator { // : ResetableIterator
		constexpr auto nav = 0x18; // XPathNavigator
		constexpr auto position = 0x20; // int
	}

	namespace n_InverseKinematics { // : MonoBehaviour
		constexpr auto Target = 0x18; // Transform
		constexpr auto WorkInDebug = 0x20; // bool
		constexpr auto upperArm = 0x28; // Transform
		constexpr auto forearm = 0x30; // Transform
		constexpr auto hand = 0x38; // Transform
		constexpr auto elbow = 0x40; // Transform
		constexpr auto uppperArm_OffsetRotation = 0x48; // Vector3
		constexpr auto forearm_OffsetRotation = 0x54; // Vector3
		constexpr auto TargetParent = 0x60; // Transform
		constexpr auto TargetChildPos = 0x68; // Vector3
		constexpr auto angle = 0x74; // float
		constexpr auto upperArm_Length_default = 0x78; // float
		constexpr auto forearm_Length_default = 0x7c; // float
		constexpr auto upperArm_Length = 0x80; // float
		constexpr auto forearm_Length = 0x84; // float
		constexpr auto arm_Length = 0x88; // float
		constexpr auto targetDistance = 0x8c; // float
		constexpr auto adyacent = 0x90; // float
		constexpr auto up2_for2 = 0x94; // float
	}

	namespace n_BinaryObjectString {
		constexpr auto objectId = 0x10; // int
		constexpr auto value = 0x18; // string
	}

	namespace n_IntroLanguageElement { // : MonoBehaviour
		constexpr auto Name = 0x18; // TextMeshProUGUI
		constexpr auto Authors = 0x20; // TextMeshProUGUI
		constexpr auto Button = 0x28; // GraphicRevertedSelection
		constexpr auto Language = 0x30; // LanguageHeader
	}

	namespace n_Stack { // : ICollection
		constexpr auto _array = 0x10; // object[]
		constexpr auto _size = 0x18; // int
		constexpr auto _version = 0x1c; // int
	}

	namespace n_VFXRigidBodyCollisionEventBinder { // : VFXEventBinderBase
		constexpr auto positionParameter = 0x30; // ExposedProperty
		constexpr auto directionParameter = 0x38; // ExposedProperty
	}

	namespace n_TimelineAsset.EditorSettings {
		constexpr auto m_Framerate = 0x10; // float
	}

	namespace n_CADArgHolder {
		constexpr auto index = 0x10; // int
	}

	namespace n_Overlay_StunCanvas { // : MonoBehaviour
		constexpr auto FrameRawImage = 0x18; // RawImage
		constexpr auto FrameCanvas = 0x20; // CanvasGroup
		constexpr auto OverlayCanvas = 0x28; // CanvasGroup
		constexpr auto OverlayAnimtion = 0x30; // AnimationCurve
		constexpr auto EarRingAudioSource = 0x38; // AudioSource
		constexpr auto EarRingAnimation = 0x40; // AnimationCurve
		constexpr auto mCanvas = 0x48; // Canvas
		constexpr auto mFrameTemp = 0x50; // RenderTexture
		constexpr auto mStunIntensity = 0x58; // float
		constexpr auto mStunLength = 0x5c; // float
		constexpr auto mStunCounter = 0x60; // float
		constexpr auto (TickIndex8)k__BackingField = 0x64; // int
	}

	namespace n_DepthOnlyPass { // : ScriptableRenderPass
		constexpr auto kDepthBufferBits = 0x68; // int
		constexpr auto (depthAttachmentHandle)k__BackingField = 0x6c; // RenderTargetHandle
		constexpr auto (descriptor)k__BackingField = 0x70; // RenderTextureDescriptor
		constexpr auto m_FilteringSettings = 0xa4; // FilteringSettings
		constexpr auto m_ProfilingSampler = 0xc0; // ProfilingSampler
		constexpr auto m_ShaderTagId = 0xc8; // ShaderTagId
	}

	namespace n_IconsUI.Attachments {
		constexpr auto MagIcon = 0x10; // Sprite
		constexpr auto BoltActionIcon = 0x18; // Sprite
	}

	namespace n_IMGUIContainer { // : VisualElement
		constexpr auto m_OnGUIHandler = 0x160; // Action
		constexpr auto m_ObjectGUIState = 0x168; // ObjectGUIState
		constexpr auto useOwnerObjectGUIState = 0x170; // bool
		constexpr auto (lastWorldClip)k__BackingField = 0x174; // Rect
		constexpr auto m_Cache = 0x188; // GUILayoutUtility.LayoutCache
		constexpr auto m_CachedClippingRect = 0x190; // Rect
		constexpr auto m_CachedTransform = 0x1a0; // Matrix4x4
		constexpr auto (contextType)k__BackingField = 0x1e0; // ContextType
		constexpr auto lostFocus = 0x1e4; // bool
		constexpr auto receivedFocus = 0x1e5; // bool
		constexpr auto focusChangeDirection = 0x1e8; // FocusChangeDirection
		constexpr auto hasFocusableControls = 0x1f0; // bool
		constexpr auto newKeyboardFocusControlID = 0x1f4; // int
		constexpr auto (focusOnlyIfHasFocusableControls)k__BackingField = 0x1f8; // bool
		constexpr auto m_GUIGlobals = 0x1fc; // IMGUIContainer.GUIGlobals
	}

	namespace n_SHA1CryptoServiceProvider { // : SHA1
		constexpr auto sha = 0x28; // SHA1Internal
	}

	namespace n_MagazineManager { // : MonoBehaviour
		constexpr auto view = 0x18; // NetView
	}

	namespace n_EventCallbackList {
		constexpr auto m_List = 0x10; // List(EventCallbackFunctorBase)
		constexpr auto (trickleDownCallbackCount)k__BackingField = 0x18; // int
		constexpr auto (bubbleUpCallbackCount)k__BackingField = 0x1c; // int
	}

	namespace n_GameScreen_PlayerPing { // : MonoBehaviour
		constexpr auto MinimumFunct = 0x18; // AnimationCurve
		constexpr auto Max = 0x20; // float
		constexpr auto RescueParent = 0x28; // GameObject
		constexpr auto RescueCanvas = 0x30; // CanvasGroup
		constexpr auto RescueCenter = 0x38; // RectTransform
		constexpr auto RescueLabel = 0x40; // TextMeshProUGUI
		constexpr auto PingRect = 0x48; // RectTransform
		constexpr auto PingButton = 0x50; // KeybindingButton
		constexpr auto (TickIndex8)k__BackingField = 0x58; // int
		constexpr auto mLastPoint = 0x5c; // Vector2
	}

	namespace n_CompoundShapeChildArray { // : FixedSizeArray
		constexpr auto _backingArray = 0x20; // CompoundShapeChild[]
	}

	namespace n_VehicleTuning {
		constexpr auto SuspensionStiffness = 0x10; // float
		constexpr auto SuspensionCompression = 0x14; // float
		constexpr auto SuspensionDamping = 0x18; // float
		constexpr auto MaxSuspensionTravelCm = 0x1c; // float
		constexpr auto FrictionSlip = 0x20; // float
		constexpr auto MaxSuspensionForce = 0x24; // float
	}

	namespace n_GameScreen { // : MonoBehaviour
		constexpr auto Infantry = 0x18; // Canvas
		constexpr auto InSeat = 0x20; // Canvas
		constexpr auto Drones = 0x28; // Canvas
		constexpr auto InDeath = 0x30; // GameObject
		constexpr auto SeatParent = 0x38; // RectTransform
		constexpr auto PrefabSeatPerson = 0x40; // GameObject
		constexpr auto EngineOnUI = 0x48; // CanvasGroup
		constexpr auto RepairedUI = 0x50; // CanvasGroup
		constexpr auto SuppliedUI = 0x58; // CanvasGroup
		constexpr auto seatPool = 0x60; // UIPool(GameScreen_SeatPerson)
		constexpr auto activeSeats = 0x68; // List(GameScreen_SeatPerson)
		constexpr auto gameObjs = 0x70; // GameScreen_Object[]
		constexpr auto canvas = 0x78; // CanvasGroup
		constexpr auto activeTime = 0x80; // float
		constexpr auto (TickIndex8)k__BackingField = 0x84; // int
		constexpr auto _infActive = 0x88; // bool
		constexpr auto _seatActive = 0x89; // bool
		constexpr auto _droneActive = 0x8a; // bool
		constexpr auto _deathActive = 0x8b; // bool
		constexpr auto _seatManagerActive = 0x90; // SeatManager
		constexpr auto _EngineUIVisible = 0x98; // bool
	}

	namespace n_TriangleRaycastCallback { // : TriangleCallback
		constexpr auto (Flags)k__BackingField = 0x20; // TriangleRaycastCallback.EFlags
		constexpr auto (From)k__BackingField = 0x24; // Vector3
		constexpr auto (HitFraction)k__BackingField = 0x30; // float
		constexpr auto (To)k__BackingField = 0x34; // Vector3
	}

	namespace n_DescendantQuery { // : DescendantBaseQuery
		constexpr auto nodeIterator = 0x60; // XPathNodeIterator
	}

	namespace n_SafeBag {
		constexpr auto _bagOID = 0x10; // string
		constexpr auto _asn1 = 0x18; // ASN1
	}

	namespace n_MACTripleDES { // : KeyedHashAlgorithm
		constexpr auto m_encryptor = 0x30; // ICryptoTransform
		constexpr auto _cs = 0x38; // CryptoStream
		constexpr auto _ts = 0x40; // TailStream
		constexpr auto m_bytesPerBlock = 0x48; // int
		constexpr auto des = 0x50; // TripleDES
	}

	namespace n_DiscreteCollisionDetectorInterface.ClosestPointInput { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_PropertyAnalysis {
		constexpr auto name = 0x10; // string
		constexpr auto getterInfo = 0x18; // MethodInfo
		constexpr auto typeInfo = 0x20; // TraceLoggingTypeInfo
		constexpr auto fieldAttribute = 0x28; // EventFieldAttribute
	}

	namespace n_Tokenizer {
		constexpr auto LineNo = 0x10; // int
		constexpr auto _inProcessingTag = 0x14; // int
		constexpr auto _inBytes = 0x18; // byte[]
		constexpr auto _inChars = 0x20; // char[]
		constexpr auto _inString = 0x28; // string
		constexpr auto _inIndex = 0x30; // int
		constexpr auto _inSize = 0x34; // int
		constexpr auto _inSavedCharacter = 0x38; // int
		constexpr auto _inTokenSource = 0x3c; // Tokenizer.TokenSource
		constexpr auto _inTokenReader = 0x40; // Tokenizer.ITokenReader
		constexpr auto _maker = 0x48; // Tokenizer.StringMaker
		constexpr auto _searchStrings = 0x50; // string[]
		constexpr auto _replaceStrings = 0x58; // string[]
		constexpr auto _inNestedIndex = 0x60; // int
		constexpr auto _inNestedSize = 0x64; // int
		constexpr auto _inNestedString = 0x68; // string
	}

	namespace n_GameScreen_SeatPerson { // : MonoBehaviour
		constexpr auto Number = 0x18; // TextMeshProUGUI
		constexpr auto PersonName = 0x20; // TextMeshProUGUI
		constexpr auto tr = 0x28; // RectTransform
		constexpr auto seat = 0x30; // Seat
		constexpr auto locked = 0x38; // NetworkClient
		constexpr auto (TickIndex8)k__BackingField = 0x40; // int
	}

	namespace n_FPSLightCurves { // : MonoBehaviour
		constexpr auto (TickIndex3)k__BackingField = 0x18; // int
		constexpr auto LightCurve = 0x20; // AnimationCurve
		constexpr auto mLight = 0x28; // Light
		constexpr auto mBaseIntensity = 0x30; // float
		constexpr auto mStartTime = 0x34; // float
		constexpr auto mLightEnabled = 0x38; // bool
	}

	namespace n_WallBuilder.mMeshBuffer {
		constexpr auto lod0 = 0x10; // MeshBuilder
		constexpr auto lod1 = 0x18; // MeshBuilder
		constexpr auto areas = 0x20; // List(WallBuilder.mArea)
		constexpr auto collisionSettings = 0x28; // List(WallBuilder.mBoxColliderSettings)
	}

	namespace n_IncrementStripIndexOnStart.InputProperties {
		constexpr auto StripMaxCount = 0x10; // uint
	}

	namespace n_InventoryDef { // : IEquatable(InventoryDef)
		constexpr auto _id = 0x10; // InventoryDefId
	}

	namespace n_Plantable { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto CanInteractUnsafeThread = 0x20; // Plantable.mCanInteractDelegate
		constexpr auto (Position)k__BackingField = 0x28; // Vector3
		constexpr auto (LocalClientProgress)k__BackingField = 0x34; // float
		constexpr auto PlantTime = 0x38; // float
		constexpr auto OnPlayerInteract = 0x40; // UnityEvent
		constexpr auto mView = 0x48; // NetView
		constexpr auto mRadius = 0x50; // float
		constexpr auto mRadiusSqr = 0x54; // float
		constexpr auto mLastLocalUpdateSent = 0x58; // float
		constexpr auto mLastInteractionTime = 0x5c; // float
		constexpr auto mCollider = 0x60; // Collider
		constexpr auto mCancelHandle = 0x68; // InvokeHandle
		constexpr auto CaptureRadius = 0x70; // float
	}

	namespace n_DynamicPropertyCollection.DynamicPropertyReg {
		constexpr auto Property = 0x10; // IDynamicProperty
		constexpr auto Sink = 0x18; // IDynamicMessageSink
	}

	namespace n_MapPlayerUIObject { // : MapUIBehaviour
		constexpr auto MainImage = 0x60; // RawImage
		constexpr auto PlayerLabel = 0x68; // TextMeshProUGUI
		constexpr auto ContentSync = 0x70; // ContentSizeSyncNonSelf
		constexpr auto HoverCanvas = 0x78; // CanvasGroup
		constexpr auto SelectableCanvas = 0x80; // CanvasGroup
		constexpr auto SelectableIcon = 0x88; // RectTransform
		constexpr auto client = 0x90; // NetworkClient
		constexpr auto lastSetName = 0x98; // string
		constexpr auto lastSquad = 0xa0; // Squad
		constexpr auto lastState = 0xa8; // MapPlayerUIObject.State
		constexpr auto dynamicLayer = 0xac; // int
	}

	namespace n_ScriptableRenderer { // : IDisposable
		constexpr auto (supportedRenderingFeatures)k__BackingField = 0x10; // ScriptableRenderer.RenderingFeatures
		constexpr auto m_ActiveRenderPassQueue = 0x18; // List(ScriptableRenderPass)
		constexpr auto m_RendererFeatures = 0x20; // List(ScriptableRendererFeature)
		constexpr auto m_CameraColorTarget = 0x28; // RenderTargetIdentifier
		constexpr auto m_CameraDepthTarget = 0x50; // RenderTargetIdentifier
		constexpr auto m_FirstTimeCameraColorTargetIsBound = 0x78; // bool
		constexpr auto m_FirstTimeCameraDepthTargetIsBound = 0x79; // bool
		constexpr auto m_XRRenderTargetNeedsClear = 0x7a; // bool
	}

	namespace n_InfConquestUI { // : GameplayModeUI
		constexpr auto Timer = 0x20; // TextMeshProUGUI
		constexpr auto myTeamFlag = 0x28; // RawImage
		constexpr auto enemyTeamFlag = 0x30; // RawImage
		constexpr auto myTeamScore = 0x38; // TextMeshProUGUI
		constexpr auto EnemyTeamScore = 0x40; // TextMeshProUGUI
		constexpr auto myTeamValue = 0x48; // RectTransform
		constexpr auto EnemyTeamValue = 0x50; // RectTransform
		constexpr auto lockedSeconds = 0x58; // int
	}

	namespace n_AndroidJavaObject { // : IDisposable
		constexpr auto m_jobject = 0x10; // GlobalJavaObjectRef
		constexpr auto m_jclass = 0x18; // GlobalJavaObjectRef
	}

	namespace n_StencilStateData {
		constexpr auto overrideStencilState = 0x10; // bool
		constexpr auto stencilReference = 0x14; // int
		constexpr auto stencilCompareFunction = 0x18; // CompareFunction
		constexpr auto passOperation = 0x1c; // StencilOp
		constexpr auto failOperation = 0x20; // StencilOp
		constexpr auto zFailOperation = 0x24; // StencilOp
	}

	namespace n_GameScreen_Hitmarker { // : MonoBehaviour
		constexpr auto c = 0x18; // CanvasGroup
		constexpr auto img = 0x20; // RawImage
		constexpr auto HitMarkerVolume = 0x28; // float
		constexpr auto Sounds = 0x30; // AudioClip[]
		constexpr auto SoundsArmor = 0x38; // AudioClip[]
		constexpr auto hitmarker = 0x40; // Texture2D
		constexpr auto spawnProtection = 0x48; // Texture2D
		constexpr auto vehicle = 0x50; // Texture2D
		constexpr auto tr = 0x58; // RectTransform
		constexpr auto mSource = 0x60; // AudioSource
		constexpr auto mEndTime = 0x68; // float
		constexpr auto mStartTime = 0x6c; // float
		constexpr auto mOpacity = 0x70; // float
		constexpr auto mSize = 0x74; // float
		constexpr auto (TickIndex8)k__BackingField = 0x78; // int
	}

	namespace n_Type1Message { // : MessageBase
		constexpr auto _host = 0x18; // string
		constexpr auto _domain = 0x20; // string
	}

	namespace n_AsyncProtocolResult {
		constexpr auto (UserResult)k__BackingField = 0x10; // int
		constexpr auto (Error)k__BackingField = 0x18; // ExceptionDispatchInfo
	}

	namespace n_Rotation { // : TransformComponentsSettings
		constexpr auto minRotation = 0x20; // Vector3
		constexpr auto maxRotation = 0x2c; // Vector3
	}

	namespace n_LocalDataStoreSlot {
		constexpr auto m_mgr = 0x10; // LocalDataStoreMgr
		constexpr auto m_slot = 0x18; // int
		constexpr auto m_cookie = 0x20; // long
	}

	namespace n_Vector3Comparer { // : SharedObjectComparer(Vector3)
		constexpr auto min = 0x10; // float
	}

	namespace n_GZipStream { // : Stream
		constexpr auto _deflateStream = 0x28; // DeflateStream
	}

	namespace n_TMP_ScrollbarEventHandler { // : MonoBehaviour
		constexpr auto isSelected = 0x18; // bool
	}

	namespace n_ControllerColliderHit {
		constexpr auto m_Controller = 0x10; // CharacterController
		constexpr auto m_Collider = 0x18; // Collider
		constexpr auto m_Point = 0x20; // Vector3
		constexpr auto m_Normal = 0x2c; // Vector3
		constexpr auto m_MoveDirection = 0x38; // Vector3
		constexpr auto m_MoveLength = 0x44; // float
		constexpr auto m_Push = 0x48; // int
	}

	namespace n_PixelPerfectCameraInternal { // : ISerializationCallbackReceiver
		constexpr auto m_Component = 0x10; // IPixelPerfectCamera
		constexpr auto m_SerializableComponent = 0x18; // PixelPerfectCamera
		constexpr auto originalOrthoSize = 0x20; // float
		constexpr auto hasPostProcessLayer = 0x24; // bool
		constexpr auto cropFrameXAndY = 0x25; // bool
		constexpr auto cropFrameXOrY = 0x26; // bool
		constexpr auto useStretchFill = 0x27; // bool
		constexpr auto zoom = 0x28; // int
		constexpr auto useOffscreenRT = 0x2c; // bool
		constexpr auto offscreenRTWidth = 0x30; // int
		constexpr auto offscreenRTHeight = 0x34; // int
		constexpr auto pixelRect = 0x38; // Rect
		constexpr auto orthoSize = 0x48; // float
		constexpr auto unitsPerPixel = 0x4c; // float
		constexpr auto cinemachineVCamZoom = 0x50; // int
	}

	namespace n_SteamStats {
		constexpr auto isFail = 0x10; // bool
		constexpr auto (SteamID)k__BackingField = 0x18; // ulong
		constexpr auto (Nickname)k__BackingField = 0x20; // string
		constexpr auto (SearchName)k__BackingField = 0x28; // string
		constexpr auto (State)k__BackingField = 0x30; // SteamStats.PersonState
		constexpr auto mAvatarBigUrl = 0x38; // string
		constexpr auto mAvatarBig = 0x40; // Texture2D
		constexpr auto mDownloadingAvatarBig = 0x48; // bool
		constexpr auto mAvatarMediumUrl = 0x50; // string
		constexpr auto mAvatarMedium = 0x58; // Texture2D
		constexpr auto mDownloadingAvatarMedium = 0x60; // bool
		constexpr auto mAvatarSmallUrl = 0x68; // string
		constexpr auto mAvatarSmall = 0x70; // Texture2D
		constexpr auto mDownloadingAvatarSmall = 0x78; // bool
	}

	namespace n_RuntimeType { // : TypeInfo
		constexpr auto type_info = 0x18; // MonoTypeInfo
		constexpr auto GenericCache = 0x20; // object
		constexpr auto m_serializationCtor = 0x28; // RuntimeConstructorInfo
	}

	namespace n_XmlAtomicValue { // : XPathItem
		constexpr auto xmlType = 0x10; // XmlSchemaType
		constexpr auto objVal = 0x18; // object
		constexpr auto clrType = 0x20; // TypeCode
		constexpr auto unionVal = 0x28; // XmlAtomicValue.Union
		constexpr auto nsPrefix = 0x30; // XmlAtomicValue.NamespacePrefixForQName
	}

	namespace n_RegexPrefix {
		constexpr auto _prefix = 0x10; // string
		constexpr auto _caseInsensitive = 0x18; // bool
	}

	namespace n_PathList {
		constexpr auto m_list = 0x10; // SortedList
	}

	namespace n_XmlSchemaSimpleTypeRestriction { // : XmlSchemaSimpleTypeContent
		constexpr auto baseTypeName = 0x10; // XmlQualifiedName
		constexpr auto facets = 0x18; // XmlSchemaObjectCollection
	}

	namespace n_GUIPing { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (lifeTime)k__BackingField = 0x1c; // float
		constexpr auto (inPool)k__BackingField = 0x20; // bool
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x21; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x24; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x28; // int
		constexpr auto mInvokeHandle = 0x30; // InvokeHandle
		constexpr auto Position = 0x38; // Vector3
		constexpr auto Type = 0x44; // PingType
	}

	namespace n_FileWebStream { // : FileStream
		constexpr auto m_request = 0x70; // FileWebRequest
	}

	namespace n_UniformScalingShape { // : ConvexShape
		constexpr auto _convexChildShape = 0x28; // ConvexShape
	}

	namespace n_ObjectMouseMoveAlongDirection {
		constexpr auto normalizedMoveDirection = 0x10; // Vector3
		constexpr auto objectPositionAtSessionBegin = 0x1c; // Vector3
		constexpr auto cursorPosAtSessionStart = 0x28; // Vector2
		constexpr auto gameObject = 0x30; // GameObject
		constexpr auto _isActive = 0x38; // bool
		constexpr auto objectMouseMoveAlongDirectionSettings = 0x40; // ObjectMouseMoveAlongDirectionSettings
	}

	namespace n_AngularLimit { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_SafeBuffer { // : SafeHandleZeroOrMinusOneIsInvalid
		constexpr auto inited = 0x20; // bool
	}

	namespace n_AlignedAnchorArray { // : IList(Anchor)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_OperationCanceledException { // : SystemException
		constexpr auto _cancellationToken = 0x88; // CancellationToken
	}

	namespace n_EndpointPermission {
		constexpr auto hostname = 0x10; // string
		constexpr auto port = 0x18; // int
		constexpr auto transport = 0x1c; // TransportType
		constexpr auto resolved = 0x20; // bool
		constexpr auto hasWildcard = 0x21; // bool
		constexpr auto addresses = 0x28; // IPAddress[]
	}

	namespace n_CADMethodRef {
		constexpr auto ctor = 0x10; // bool
		constexpr auto typeName = 0x18; // string
		constexpr auto methodName = 0x20; // string
		constexpr auto param_names = 0x28; // string[]
		constexpr auto generic_arg_names = 0x30; // string[]
	}

	namespace n_Animation.Enumerator { // : IEnumerator
		constexpr auto m_Outer = 0x10; // Animation
		constexpr auto m_CurrentIndex = 0x18; // int
	}

	namespace n_AlignedNodeArrayEnumerator { // : IEnumerator(Node)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedNodeArray
	}

	namespace n_SafeHandle { // : CriticalFinalizerObject
		constexpr auto handle = 0x10; // IntPtr
		constexpr auto _state = 0x18; // int
		constexpr auto _ownsHandle = 0x1c; // bool
		constexpr auto _fullyInitialized = 0x1d; // bool
	}

	namespace n_VehicleWorldColliderServer { // : MonoBehaviour
		constexpr auto Vehicle = 0x18; // VehicleInstance
	}

	namespace n_ThunderItem { // : ScriptableObject
		constexpr auto NetworkID = 0x18; // byte
		constexpr auto Sound = 0x20; // AudioClip
		constexpr auto Delay = 0x28; // float
		constexpr auto Lighting = 0x30; // AnimationCurve
		constexpr auto DirectionLightIntensity = 0x38; // float
		constexpr auto SkyExpesureIntensity = 0x3c; // float
	}

	namespace n_PoolableAttachment { // : MonoBehaviour
		constexpr auto Renderers = 0x18; // Renderer[]
		constexpr auto Lights = 0x20; // GameObject[]
		constexpr auto ParentKeyID = 0x28; // int
		constexpr auto ScopeComponent = 0x30; // Scope
		constexpr auto BarrelComponent = 0x38; // Barrel
		constexpr auto CantedSightComponent = 0x40; // CantedSight
		constexpr auto SideRailComponent = 0x48; // SideRail
		constexpr auto UnderRailComponent = 0x50; // UnderRail
		constexpr auto Transform = 0x58; // Transform
		constexpr auto mRendererCount = 0x60; // int
		constexpr auto mIsVisible = 0x64; // bool
		constexpr auto mInitialized = 0x65; // bool
		constexpr auto mIsFriendly = 0x66; // bool
		constexpr auto mIsLayerSet = 0x67; // bool
	}

	namespace n_Dna.ElementDecl {
		constexpr auto (Type)k__BackingField = 0x10; // Dna.TypeDecl
		constexpr auto (Name)k__BackingField = 0x18; // Dna.NameInfo
	}

	namespace n_Win32Exception { // : ExternalException
		constexpr auto nativeErrorCode = 0x88; // int
	}

	namespace n_MagazineFxShowDelays {
		constexpr auto NormalReload = 0x10; // float
		constexpr auto NormalReloadBolt = 0x14; // float
		constexpr auto TacticalReload = 0x18; // float
		constexpr auto TacticalReloadBolt = 0x1c; // float
		constexpr auto MagDropDelay = 0x20; // float
	}

	namespace n_XmlSchemaSimpleType { // : XmlSchemaType
		constexpr auto content = 0x40; // XmlSchemaSimpleTypeContent
	}

	namespace n_WebClient { // : Component
		constexpr auto m_baseAddress = 0x28; // Uri
		constexpr auto m_credentials = 0x30; // ICredentials
		constexpr auto m_headers = 0x38; // WebHeaderCollection
		constexpr auto m_requestParameters = 0x40; // NameValueCollection
		constexpr auto m_WebResponse = 0x48; // WebResponse
		constexpr auto m_WebRequest = 0x50; // WebRequest
		constexpr auto m_Encoding = 0x58; // Encoding
		constexpr auto m_Method = 0x60; // string
		constexpr auto m_ContentLength = 0x68; // long
		constexpr auto m_InitWebClientAsync = 0x70; // bool
		constexpr auto m_Cancelled = 0x71; // bool
		constexpr auto m_Progress = 0x78; // WebClient.ProgressData
		constexpr auto m_Proxy = 0x80; // IWebProxy
		constexpr auto m_ProxySet = 0x88; // bool
		constexpr auto m_CachePolicy = 0x90; // RequestCachePolicy
		constexpr auto m_CallNesting = 0x98; // int
		constexpr auto m_AsyncOp = 0xa0; // AsyncOperation
		constexpr auto OpenReadCompleted = 0xa8; // OpenReadCompletedEventHandler
		constexpr auto openReadOperationCompleted = 0xb0; // SendOrPostCallback
		constexpr auto OpenWriteCompleted = 0xb8; // OpenWriteCompletedEventHandler
		constexpr auto openWriteOperationCompleted = 0xc0; // SendOrPostCallback
		constexpr auto DownloadStringCompleted = 0xc8; // DownloadStringCompletedEventHandler
		constexpr auto downloadStringOperationCompleted = 0xd0; // SendOrPostCallback
		constexpr auto DownloadDataCompleted = 0xd8; // DownloadDataCompletedEventHandler
		constexpr auto downloadDataOperationCompleted = 0xe0; // SendOrPostCallback
		constexpr auto DownloadFileCompleted = 0xe8; // AsyncCompletedEventHandler
		constexpr auto downloadFileOperationCompleted = 0xf0; // SendOrPostCallback
		constexpr auto UploadStringCompleted = 0xf8; // UploadStringCompletedEventHandler
		constexpr auto uploadStringOperationCompleted = 0x100; // SendOrPostCallback
		constexpr auto UploadDataCompleted = 0x108; // UploadDataCompletedEventHandler
		constexpr auto uploadDataOperationCompleted = 0x110; // SendOrPostCallback
		constexpr auto UploadFileCompleted = 0x118; // UploadFileCompletedEventHandler
		constexpr auto uploadFileOperationCompleted = 0x120; // SendOrPostCallback
		constexpr auto UploadValuesCompleted = 0x128; // UploadValuesCompletedEventHandler
		constexpr auto uploadValuesOperationCompleted = 0x130; // SendOrPostCallback
		constexpr auto DownloadProgressChanged = 0x138; // DownloadProgressChangedEventHandler
		constexpr auto UploadProgressChanged = 0x140; // UploadProgressChangedEventHandler
		constexpr auto reportDownloadProgressChanged = 0x148; // SendOrPostCallback
		constexpr auto reportUploadProgressChanged = 0x150; // SendOrPostCallback
	}

	namespace n_RaycastInfo {
		constexpr auto hitInfo = 0x10; // RaycastHit
	}

	namespace n_AsyncRequest {
		constexpr auto ReplySink = 0x10; // IMessageSink
		constexpr auto MsgRequest = 0x18; // IMessage
	}

	namespace n_MonoTlsStream {
		constexpr auto provider = 0x10; // MonoTlsProvider
		constexpr auto networkStream = 0x18; // NetworkStream
		constexpr auto request = 0x20; // HttpWebRequest
		constexpr auto settings = 0x28; // MonoTlsSettings
		constexpr auto sslStream = 0x30; // IMonoSslStream
		constexpr auto status = 0x38; // WebExceptionStatus
		constexpr auto (CertificateValidationFailed)k__BackingField = 0x3c; // bool
	}

	namespace n_Stream.SynchronousAsyncResult { // : IAsyncResult
		constexpr auto _stateObject = 0x10; // object
		constexpr auto _isWrite = 0x18; // bool
		constexpr auto _waitHandle = 0x20; // ManualResetEvent
		constexpr auto _exceptionInfo = 0x28; // ExceptionDispatchInfo
		constexpr auto _endXxxCalled = 0x30; // bool
		constexpr auto _bytesRead = 0x34; // int
	}

	namespace n_AxisEventData { // : BaseEventData
		constexpr auto (moveVector)k__BackingField = 0x20; // Vector2
		constexpr auto (moveDir)k__BackingField = 0x28; // MoveDirection
	}

	namespace n_ITilemap {
		constexpr auto m_Tilemap = 0x10; // Tilemap
	}

	namespace n_WebRequest { // : MarshalByRefObject
		constexpr auto m_AuthenticationLevel = 0x18; // AuthenticationLevel
		constexpr auto m_ImpersonationLevel = 0x1c; // TokenImpersonationLevel
		constexpr auto m_CachePolicy = 0x20; // RequestCachePolicy
		constexpr auto m_CacheProtocol = 0x28; // RequestCacheProtocol
		constexpr auto m_CacheBinding = 0x30; // RequestCacheBinding
	}

	namespace n_GameScreen_SquadAbilityMenuItem { // : MonoBehaviour
		constexpr auto Icon = 0x18; // Texture2D
		constexpr auto TitleID = 0x20; // int
		constexpr auto DescID = 0x24; // int
		constexpr auto Text = 0x28; // TextMeshProUGUI
		constexpr auto Target = 0x30; // GameScreen_SquadAbilityNotification_Item
		constexpr auto mButton = 0x38; // GraphicRevertedButton
		constexpr auto (TickIndex8)k__BackingField = 0x40; // int
		constexpr auto mLastSetCount = 0x44; // int
	}

	namespace n_BulletFile { // : bFile
		constexpr auto _dnaCopy = 0x58; // byte[]
		constexpr auto Bvhs = 0x60; // List(byte[])
		constexpr auto CollisionObjects = 0x68; // List(byte[])
		constexpr auto CollisionShapes = 0x70; // List(byte[])
		constexpr auto Constraints = 0x78; // List(byte[])
		constexpr auto DynamicsWorldInfo = 0x80; // List(byte[])
		constexpr auto MultiBodies = 0x88; // List(byte[])
		constexpr auto RigidBodies = 0x90; // List(byte[])
	}

	namespace n_FPBuildingShakeHandler { // : MonoBehaviour
		constexpr auto mRandom = 0x18; // Random
		constexpr auto (TickIndex5)k__BackingField = 0x20; // int
		constexpr auto Intensity = 0x28; // AnimationCurve
		constexpr auto IntensityAfter = 0x30; // AnimationCurve
		constexpr auto Multiplier = 0x38; // float
		constexpr auto RandomizeMovement = 0x3c; // float
		constexpr auto m_eular = 0x40; // Vector3
		constexpr auto mUpdateFlag = 0x4c; // bool
	}

	namespace n_TransformComponentsAttribute { // : Attribute
		constexpr auto renderer = 0x10; // Type
		constexpr auto menuItem = 0x18; // string
	}

	namespace n_SettingsSectionInternal {
		constexpr auto HttpListenerUnescapeRequestUrl = 0x10; // bool
		constexpr auto IPProtectionLevel = 0x14; // IPProtectionLevel
	}

	namespace n_GameScreen_Crosshair { // : MonoBehaviour
		constexpr auto tr = 0x18; // RectTransform
		constexpr auto mImage = 0x20; // RawImage
		constexpr auto canvas = 0x28; // CanvasGroup
		constexpr auto lastTime = 0x30; // float
		constexpr auto (TickIndex8)k__BackingField = 0x34; // int
	}

	namespace n_Discord { // : IDisposable
		constexpr auto SelfHandle = 0x10; // GCHandle
		constexpr auto EventsPtr = 0x18; // IntPtr
		constexpr auto Events = 0x20; // Discord.FFIEvents
		constexpr auto ApplicationEventsPtr = 0x28; // IntPtr
		constexpr auto ApplicationEvents = 0x30; // ApplicationManager.FFIEvents
		constexpr auto ApplicationManagerInstance = 0x38; // ApplicationManager
		constexpr auto UserEventsPtr = 0x40; // IntPtr
		constexpr auto UserEvents = 0x48; // UserManager.FFIEvents
		constexpr auto UserManagerInstance = 0x50; // UserManager
		constexpr auto ImageEventsPtr = 0x58; // IntPtr
		constexpr auto ImageEvents = 0x60; // ImageManager.FFIEvents
		constexpr auto ImageManagerInstance = 0x68; // ImageManager
		constexpr auto ActivityEventsPtr = 0x70; // IntPtr
		constexpr auto ActivityEvents = 0x78; // ActivityManager.FFIEvents
		constexpr auto ActivityManagerInstance = 0x98; // ActivityManager
		constexpr auto RelationshipEventsPtr = 0xa0; // IntPtr
		constexpr auto RelationshipEvents = 0xa8; // RelationshipManager.FFIEvents
		constexpr auto RelationshipManagerInstance = 0xb8; // RelationshipManager
		constexpr auto LobbyEventsPtr = 0xc0; // IntPtr
		constexpr auto LobbyEvents = 0xc8; // LobbyManager.FFIEvents
		constexpr auto LobbyManagerInstance = 0x108; // LobbyManager
		constexpr auto NetworkEventsPtr = 0x110; // IntPtr
		constexpr auto NetworkEvents = 0x118; // NetworkManager.FFIEvents
		constexpr auto NetworkManagerInstance = 0x128; // NetworkManager
		constexpr auto OverlayEventsPtr = 0x130; // IntPtr
		constexpr auto OverlayEvents = 0x138; // OverlayManager.FFIEvents
		constexpr auto OverlayManagerInstance = 0x140; // OverlayManager
		constexpr auto StorageEventsPtr = 0x148; // IntPtr
		constexpr auto StorageEvents = 0x150; // StorageManager.FFIEvents
		constexpr auto StorageManagerInstance = 0x158; // StorageManager
		constexpr auto StoreEventsPtr = 0x160; // IntPtr
		constexpr auto StoreEvents = 0x168; // StoreManager.FFIEvents
		constexpr auto StoreManagerInstance = 0x178; // StoreManager
		constexpr auto VoiceEventsPtr = 0x180; // IntPtr
		constexpr auto VoiceEvents = 0x188; // VoiceManager.FFIEvents
		constexpr auto VoiceManagerInstance = 0x190; // VoiceManager
		constexpr auto AchievementEventsPtr = 0x198; // IntPtr
		constexpr auto AchievementEvents = 0x1a0; // AchievementManager.FFIEvents
		constexpr auto AchievementManagerInstance = 0x1a8; // AchievementManager
		constexpr auto MethodsPtr = 0x1b0; // IntPtr
		constexpr auto MethodsStructure = 0x1b8; // object
		constexpr auto setLogHook = 0x1c0; // Nullable(GCHandle)
	}

	namespace n_Match { // : Group
		constexpr auto _groupcoll = 0x38; // GroupCollection
		constexpr auto _regex = 0x40; // Regex
		constexpr auto _textbeg = 0x48; // int
		constexpr auto _textpos = 0x4c; // int
		constexpr auto _textend = 0x50; // int
		constexpr auto _textstart = 0x54; // int
		constexpr auto _matches = 0x58; // int[][]
		constexpr auto _matchcount = 0x60; // int[]
		constexpr auto _balancing = 0x68; // bool
	}

	namespace n_GameScreen_PointLogElement { // : MonoBehaviour
		constexpr auto label = 0x18; // TextMeshProUGUI
		constexpr auto canvas = 0x20; // CanvasGroup
		constexpr auto rect = 0x28; // RectTransform
		constexpr auto baseHeight = 0x30; // float
		constexpr auto baseFont = 0x34; // float
		constexpr auto timeToDie = 0x38; // float
		constexpr auto spawnTime = 0x3c; // float
		constexpr auto points = 0x40; // float
		constexpr auto baseString = 0x48; // string
		constexpr auto (TickIndex8)k__BackingField = 0x50; // int
		constexpr auto destroyFlag = 0x54; // bool
	}

	namespace n_DistanceBasedLights { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (ForceActivate)k__BackingField = 0x1c; // bool
		constexpr auto DayDistance = 0x20; // float
		constexpr auto NightDistance = 0x24; // float
		constexpr auto mLight = 0x28; // Light
		constexpr auto mBounds = 0x30; // Bounds
		constexpr auto mData = 0x48; // LightBoundData
		constexpr auto isLightActive = 0x50; // bool
		constexpr auto mLightActive = 0x51; // bool
		constexpr auto mActiveFlag = 0x52; // bool
		constexpr auto distanceToLocalPlayerSqr = 0x54; // float
		constexpr auto isVisibleToLocalCamera = 0x58; // bool
		constexpr auto position = 0x5c; // Vector3
		constexpr auto rotation = 0x68; // Quaternion
	}

	namespace n_BotPlayer { // : ILateUpdateStartReceiver
		constexpr auto Bot = 0x10; // NetworkClient
		constexpr auto (TickIndex5)k__BackingField = 0x18; // int
	}

	namespace n_TMP_FontFeatureTable {
		constexpr auto m_GlyphPairAdjustmentRecords = 0x10; // List(TMP_GlyphPairAdjustmentRecord)
		constexpr auto m_GlyphPairAdjustmentRecordLookupDictionary = 0x18; // Dictionary(uint, TMP_GlyphPairAdjustmentRecord)
	}

	namespace n_TlsException { // : Exception
		constexpr auto alert = 0x88; // Alert
	}

	namespace n_TypeOfBiome { // : ScriptableObject
		constexpr auto synchronizedTerrainData = 0x18; // bool
		constexpr auto sceneTypeInfo = 0x20; // TypeInfo
		constexpr auto prototypeWindowsScroll = 0x28; // Vector2
		constexpr auto typeName = 0x30; // string
		constexpr auto selected = 0x38; // bool
		constexpr auto area = 0x40; // Area
		constexpr auto isActiveGlobalBrush = 0x48; // bool
		constexpr auto resourceTabList = 0x50; // List(ProtoResourceType)
		constexpr auto protoGameObjectList = 0x58; // List(PrototypeGameObject)
		constexpr auto protoTerrainTreeList = 0x60; // List(PrototypeTerrainTree)
		constexpr auto protoTerrainDetailList = 0x68; // List(PrototypeTerrainDetail)
		constexpr auto protoTerrainTextureList = 0x70; // List(PrototypeTerrainTexture)
		constexpr auto protoVegetationItemList = 0x78; // List(PrototypeVegetationItem)
		constexpr auto brushSettings = 0x80; // BrushSettings
		constexpr auto textureToolsSettings = 0x88; // TextureToolsSettings
		constexpr auto layerSettings = 0x90; // LayerSettings
		constexpr auto scatterSettings = 0x98; // ScatterSettings
		constexpr auto precisionUnit = 0xa0; // int
		constexpr auto pastPrecisionUnit = 0xa4; // int
		constexpr auto filterType = 0xa8; // FilterType
		constexpr auto eraseFilterType = 0xac; // FilterType
		constexpr auto spawnMode = 0xb0; // SpawnMode
	}

	namespace n_XmlParserContext {
		constexpr auto _nt = 0x10; // XmlNameTable
		constexpr auto _nsMgr = 0x18; // XmlNamespaceManager
		constexpr auto _docTypeName = 0x20; // string
		constexpr auto _pubId = 0x28; // string
		constexpr auto _sysId = 0x30; // string
		constexpr auto _internalSubset = 0x38; // string
		constexpr auto _xmlLang = 0x40; // string
		constexpr auto _xmlSpace = 0x48; // XmlSpace
		constexpr auto _baseURI = 0x50; // string
		constexpr auto _encoding = 0x58; // Encoding
	}

	namespace n_SocketAddress {
		constexpr auto m_Size = 0x10; // int
		constexpr auto m_Buffer = 0x18; // byte[]
		constexpr auto m_changed = 0x20; // bool
		constexpr auto m_hash = 0x24; // int
	}

	namespace n_BoatStreamUpdater {
		constexpr auto lastPosition = 0x10; // Vector3
		constexpr auto lastRotation = 0x1c; // Quaternion
		constexpr auto lastEngine = 0x2c; // float
		constexpr auto lastShell = 0x30; // float
		constexpr auto lastSent = 0x34; // float
	}

	namespace n_FPSCounter { // : MonoBehaviour
		constexpr auto t = 0x18; // TextMeshProUGUI
		constexpr auto Parent = 0x20; // Canvas
		constexpr auto lastUpdate = 0x28; // float
		constexpr auto counter = 0x2c; // int
		constexpr auto isactive = 0x30; // bool
		constexpr auto (TickIndex8)k__BackingField = 0x34; // int
	}

	namespace n_TMP_SpriteAnimator { // : MonoBehaviour
		constexpr auto m_animations = 0x18; // Dictionary(int, bool)
		constexpr auto m_TextComponent = 0x20; // TMP_Text
	}

	namespace n_BatchBuffer {
		constexpr auto Matrices = 0x10; // Matrix4x4[]
		constexpr auto Count = 0x18; // int
	}

	namespace n_WaitForSecondsRealtime { // : CustomYieldInstruction
		constexpr auto (waitTime)k__BackingField = 0x10; // float
		constexpr auto m_WaitUntilTime = 0x14; // float
	}

	namespace n_HttpWebResponse { // : WebResponse
		constexpr auto uri = 0x18; // Uri
		constexpr auto webHeaders = 0x20; // WebHeaderCollection
		constexpr auto cookieCollection = 0x28; // CookieCollection
		constexpr auto method = 0x30; // string
		constexpr auto version = 0x38; // Version
		constexpr auto statusCode = 0x40; // HttpStatusCode
		constexpr auto statusDescription = 0x48; // string
		constexpr auto contentLength = 0x50; // long
		constexpr auto contentType = 0x58; // string
		constexpr auto cookie_container = 0x60; // CookieContainer
		constexpr auto disposed = 0x68; // bool
		constexpr auto stream = 0x70; // Stream
	}

	namespace n_AlignedCollisionObjectArray { // : IList(CollisionObject)
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _collisionWorld = 0x18; // CollisionWorld
		constexpr auto _backingList = 0x20; // List(CollisionObject)
	}

	namespace n_UnityEvent { // : UnityEventBase
		constexpr auto m_InvokeArray = 0x28; // object[]
	}

	namespace n_MainMenuStatsGadgetItem { // : MonoBehaviour
		constexpr auto Name = 0x18; // TextMeshProUGUI
		constexpr auto Value = 0x20; // TextMeshProUGUI
		constexpr auto Rank = 0x28; // TextMeshProUGUI
		constexpr auto Icon = 0x30; // RawImage
	}

	namespace n_BitSerializer {
		constexpr auto buffer = 0x10; // byte[]
		constexpr auto bytesOffset = 0x18; // int
		constexpr auto writeBits = 0x1c; // int
		constexpr auto readBits = 0x20; // int
	}

	namespace n_NameObjectCollectionBase.NameObjectEntry {
		constexpr auto Key = 0x10; // string
		constexpr auto Value = 0x18; // object
	}

	namespace n_ExceptionDispatchInfo {
		constexpr auto m_Exception = 0x10; // Exception
		constexpr auto m_stackTrace = 0x18; // object
	}

	namespace n_FloatComparer { // : SharedObjectComparer(float)
		constexpr auto min = 0x10; // float
	}

	namespace n_StackFrame {
		constexpr auto ilOffset = 0x10; // int
		constexpr auto nativeOffset = 0x14; // int
		constexpr auto methodAddress = 0x18; // long
		constexpr auto methodIndex = 0x20; // uint
		constexpr auto methodBase = 0x28; // MethodBase
		constexpr auto fileName = 0x30; // string
		constexpr auto lineNumber = 0x38; // int
		constexpr auto columnNumber = 0x3c; // int
		constexpr auto internalMethodName = 0x40; // string
	}

	namespace n_Area { // : MonoBehaviour
		constexpr auto enableProceduralMask = 0x18; // bool
		constexpr auto proceduralMask = 0x20; // ProceduralMask
		constexpr auto enableArea = 0x28; // bool
		constexpr auto pastThisPosition = 0x2c; // Vector3
		constexpr auto pastScale = 0x38; // Vector3
		constexpr auto areaBounds = 0x44; // Bounds
		constexpr auto heighmapSettingsFoldout = 0x5c; // bool
		constexpr auto handlesSettingsFoldout = 0x5d; // bool
		constexpr auto resolution = 0x60; // Resolution
		constexpr auto pastResolution = 0x64; // Resolution
		constexpr auto heightmap = 0x68; // HeightmapNew
		constexpr auto temporaryHeightmapForGlobalBrush = 0x70; // HeightmapNew
		constexpr auto wasHeightmapCreated = 0x78; // bool
		constexpr auto pathToHeighmap = 0x80; // string
		constexpr auto colorCube = 0x88; // Color
		constexpr auto pixelWidth = 0x98; // float
		constexpr auto dotted = 0x9c; // bool
		constexpr auto handleSettingsMode = 0xa0; // HandleSettingsMode
		constexpr auto drawHandleIfNotSelected = 0xa4; // bool
	}

	namespace n_DestructivePool.ObjectStructure {
		constexpr auto localPosition = 0x10; // Vector3[]
		constexpr auto localRotation = 0x18; // Quaternion[]
		constexpr auto prefab = 0x20; // GameObject
		constexpr auto pool = 0x28; // Queue(DestructivePool.RuntimeObject)
	}

	namespace n_Group { // : Capture
		constexpr auto groupNode = 0x10; // AstNode
		constexpr auto _caps = 0x20; // int[]
		constexpr auto _capcount = 0x28; // int
		constexpr auto _name = 0x30; // string
	}

	namespace n_StateMachineAttribute { // : Attribute
		constexpr auto (StateMachineType)k__BackingField = 0x10; // Type
	}

	namespace n_MainMenu_ServersLeft { // : MonoBehaviour
		constexpr auto Child = 0x18; // GameObject
		constexpr auto Label = 0x20; // TextMeshProUGUI
	}

	namespace n_VolumeComponent { // : ScriptableObject
		constexpr auto active = 0x18; // bool
		constexpr auto (displayName)k__BackingField = 0x20; // string
		constexpr auto (parameters)k__BackingField = 0x28; // ReadOnlyCollection(VolumeParameter)
		constexpr auto m_AdvancedMode = 0x30; // bool
	}

	namespace n_WeakReference { // : ISerializable
		constexpr auto isLongReference = 0x10; // bool
		constexpr auto gcHandle = 0x14; // GCHandle
	}

	namespace n_DownloadHandler {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_MinAttribute { // : PropertyAttribute
		constexpr auto min = 0x18; // float
	}

	namespace n_AlignedFaceArrayEnumerator { // : IEnumerator(Face)
		constexpr auto _i = 0x10; // int
		constexpr auto _count = 0x14; // int
		constexpr auto _array = 0x18; // AlignedFaceArray
	}

	namespace n_ShootingRangeManager { // : MonoBehaviour
		constexpr auto Camera = 0x18; // GameObject
		constexpr auto SpawnPoint = 0x20; // Transform
	}

	namespace n_XRInputSubsystem { // : IntegratedSubsystem(XRInputSubsystemDescriptor)
		constexpr auto trackingOriginUpdated = 0x20; // Action(XRInputSubsystem)
		constexpr auto boundaryChanged = 0x28; // Action(XRInputSubsystem)
	}

	namespace n_UnicodeEncoding.Decoder { // : DecoderNLS
		constexpr auto lastByte = 0x30; // int
		constexpr auto lastChar = 0x34; // char
	}

	namespace n_NoInterpMaxIntParameter { // : VolumeParameter(int)
		constexpr auto max = 0x20; // int
	}

	namespace n_Prototype {
		constexpr auto prefab = 0x10; // GameObject
		constexpr auto selected = 0x18; // bool
	}

	namespace n_MainLoopBehaviourEnd { // : MonoBehaviour
		constexpr auto mCounter = 0x18; // Stopwatch
		constexpr auto mLastServertick = 0x20; // long
		constexpr auto mLastServerUploadTick = 0x28; // long
	}

	namespace n_SafeSerializationManager { // : IObjectReference
		constexpr auto m_serializedStates = 0x10; // IList(object)
		constexpr auto m_savedSerializationInfo = 0x18; // SerializationInfo
		constexpr auto m_realObject = 0x20; // object
		constexpr auto m_realType = 0x28; // RuntimeType
		constexpr auto SerializeObjectState = 0x30; // EventHandler(SafeSerializationEventArgs)
	}

	namespace n_FileStream { // : Stream
		constexpr auto buf = 0x28; // byte[]
		constexpr auto name = 0x30; // string
		constexpr auto safeHandle = 0x38; // SafeFileHandle
		constexpr auto isExposed = 0x40; // bool
		constexpr auto append_startpos = 0x48; // long
		constexpr auto access = 0x50; // FileAccess
		constexpr auto owner = 0x54; // bool
		constexpr auto async = 0x55; // bool
		constexpr auto canseek = 0x56; // bool
		constexpr auto anonymous = 0x57; // bool
		constexpr auto buf_dirty = 0x58; // bool
		constexpr auto buf_size = 0x5c; // int
		constexpr auto buf_length = 0x60; // int
		constexpr auto buf_offset = 0x64; // int
		constexpr auto buf_start = 0x68; // long
	}

	namespace n_Dbvt { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_GUISettings {
		constexpr auto m_DoubleClickSelectsWord = 0x10; // bool
		constexpr auto m_TripleClickSelectsLine = 0x11; // bool
		constexpr auto m_CursorColor = 0x14; // Color
		constexpr auto m_CursorFlashSpeed = 0x24; // float
		constexpr auto m_SelectionColor = 0x28; // Color
	}

	namespace n_DebugUIHandlerIndirectToggle { // : DebugUIHandlerWidget
		constexpr auto nameLabel = 0x58; // Text
		constexpr auto valueToggle = 0x60; // Toggle
		constexpr auto checkmarkImage = 0x68; // Image
		constexpr auto getter = 0x70; // Func(int, bool)
		constexpr auto setter = 0x78; // Action(int, bool)
		constexpr auto index = 0x80; // int
	}

	namespace n_RSAPKCS1SignatureDescription { // : SignatureDescription
		constexpr auto _hashAlgorithm = 0x30; // string
	}

	namespace n_SpawnOverDistance { // : VFXSpawnerCallbacks
		constexpr auto m_OldPosition = 0x18; // Vector3
		constexpr auto cachedSqrThreshold = 0x24; // float
		constexpr auto cachedRatePerSqrUnit = 0x28; // float
	}

	namespace n_FoliageLOD { // : MonoBehaviour
		constexpr auto LOD1 = 0x18; // Material
		constexpr auto LOD2 = 0x20; // Material
		constexpr auto CanBeScaled = 0x28; // bool
		constexpr auto LOD3 = 0x30; // Material
		constexpr auto LOD3Mesh = 0x38; // Mesh
		constexpr auto LOD4 = 0x40; // Material
		constexpr auto LOD4Mesh = 0x48; // Mesh
		constexpr auto LOD5 = 0x50; // Material
		constexpr auto LOD5Mesh = 0x58; // Mesh
		constexpr auto LOD6 = 0x60; // Material
		constexpr auto LOD6Mesh = 0x68; // Mesh
	}

	namespace n_VFXHierarchyAttributeMapBinder { // : VFXBinderBase
		constexpr auto m_BoneCount = 0x20; // ExposedProperty
		constexpr auto m_PositionMap = 0x28; // ExposedProperty
		constexpr auto m_TargetPositionMap = 0x30; // ExposedProperty
		constexpr auto m_RadiusPositionMap = 0x38; // ExposedProperty
		constexpr auto HierarchyRoot = 0x40; // Transform
		constexpr auto DefaultRadius = 0x48; // float
		constexpr auto MaximumDepth = 0x4c; // uint
		constexpr auto Radius = 0x50; // VFXHierarchyAttributeMapBinder.RadiusMode
		constexpr auto position = 0x58; // Texture2D
		constexpr auto targetPosition = 0x60; // Texture2D
		constexpr auto radius = 0x68; // Texture2D
		constexpr auto bones = 0x70; // List(VFXHierarchyAttributeMapBinder.Bone)
	}

	namespace n_SpectatorCamera { // : MonoBehaviour
		constexpr auto (TickIndex5)k__BackingField = 0x18; // int
		constexpr auto PP = 0x20; // Volume
		constexpr auto m_camera = 0x28; // Camera
		constexpr auto m_mode = 0x30; // SpectatorCameraMode
		constexpr auto m_verticalMouseInput = 0x34; // float
		constexpr auto m_horizontalMouseInput = 0x38; // float
		constexpr auto m_verticalInput = 0x3c; // float
		constexpr auto m_horizontalInput = 0x40; // float
		constexpr auto m_heightInput = 0x44; // float
		constexpr auto m_speedMultiplier = 0x48; // float
		constexpr auto m_fieldOfViewInput = 0x4c; // float
		constexpr auto m_shift = 0x50; // bool
		constexpr auto m_verticalVelocity = 0x54; // float
		constexpr auto m_horizontalVelocity = 0x58; // float
		constexpr auto m_upVelocity = 0x5c; // float
		constexpr auto m_angularYVelocity = 0x60; // float
		constexpr auto m_angularXVelocity = 0x64; // float
		constexpr auto m_fieldOfView = 0x68; // float
	}

	namespace n_FrameBatch {
		constexpr auto Ref = 0x10; // FrameBatch.mRef
	}

	namespace n_AssemblyFileVersionAttribute { // : Attribute
		constexpr auto _version = 0x10; // string
	}

	namespace n_WebProxy { // : IWebProxy
		constexpr auto _UseRegistry = 0x10; // bool
		constexpr auto _BypassOnLocal = 0x11; // bool
		constexpr auto m_EnableAutoproxy = 0x12; // bool
		constexpr auto _ProxyAddress = 0x18; // Uri
		constexpr auto _BypassList = 0x20; // ArrayList
		constexpr auto _Credentials = 0x28; // ICredentials
		constexpr auto _RegExBypassList = 0x30; // Regex[]
		constexpr auto _ProxyHostAddresses = 0x38; // Hashtable
		constexpr auto m_ScriptEngine = 0x40; // AutoWebProxyScriptEngine
	}

	namespace n_TermInfoDriver { // : IConsoleDriver
		constexpr auto reader = 0x10; // TermInfoReader
		constexpr auto cursorLeft = 0x18; // int
		constexpr auto cursorTop = 0x1c; // int
		constexpr auto title = 0x20; // string
		constexpr auto titleFormat = 0x28; // string
		constexpr auto cursorVisible = 0x30; // bool
		constexpr auto csrVisible = 0x38; // string
		constexpr auto csrInvisible = 0x40; // string
		constexpr auto clear = 0x48; // string
		constexpr auto bell = 0x50; // string
		constexpr auto term = 0x58; // string
		constexpr auto stdin = 0x60; // StreamReader
		constexpr auto stdout = 0x68; // CStreamWriter
		constexpr auto windowWidth = 0x70; // int
		constexpr auto windowHeight = 0x74; // int
		constexpr auto bufferHeight = 0x78; // int
		constexpr auto bufferWidth = 0x7c; // int
		constexpr auto buffer = 0x80; // char[]
		constexpr auto readpos = 0x88; // int
		constexpr auto writepos = 0x8c; // int
		constexpr auto keypadXmit = 0x90; // string
		constexpr auto keypadLocal = 0x98; // string
		constexpr auto inited = 0xa0; // bool
		constexpr auto initLock = 0xa8; // object
		constexpr auto initKeys = 0xb0; // bool
		constexpr auto origPair = 0xb8; // string
		constexpr auto origColors = 0xc0; // string
		constexpr auto cursorAddress = 0xc8; // string
		constexpr auto fgcolor = 0xd0; // ConsoleColor
		constexpr auto setfgcolor = 0xd8; // string
		constexpr auto setbgcolor = 0xe0; // string
		constexpr auto maxColors = 0xe8; // int
		constexpr auto noGetPosition = 0xec; // bool
		constexpr auto keymap = 0xf0; // Hashtable
		constexpr auto rootmap = 0xf8; // ByteMatcher
		constexpr auto rl_startx = 0x100; // int
		constexpr auto rl_starty = 0x104; // int
		constexpr auto control_characters = 0x108; // byte[]
		constexpr auto echobuf = 0x110; // char[]
		constexpr auto echon = 0x118; // int
	}

	namespace n_ReturnMessage { // : IMethodReturnMessage
		constexpr auto _outArgs = 0x10; // object[]
		constexpr auto _args = 0x18; // object[]
		constexpr auto _callCtx = 0x20; // LogicalCallContext
		constexpr auto _returnValue = 0x28; // object
		constexpr auto _uri = 0x30; // string
		constexpr auto _exception = 0x38; // Exception
		constexpr auto _methodBase = 0x40; // MethodBase
		constexpr auto _methodName = 0x48; // string
		constexpr auto _methodSignature = 0x50; // Type[]
		constexpr auto _typeName = 0x58; // string
		constexpr auto _properties = 0x60; // MethodReturnDictionary
		constexpr auto _targetIdentity = 0x68; // Identity
		constexpr auto _inArgInfo = 0x70; // ArgInfo
	}

	namespace n_PostProcessData { // : ScriptableObject
		constexpr auto shaders = 0x18; // PostProcessData.ShaderResources
		constexpr auto textures = 0x20; // PostProcessData.TextureResources
	}

	namespace n_TextWriter { // : MarshalByRefObject
		constexpr auto CoreNewLine = 0x18; // char[]
		constexpr auto InternalFormatProvider = 0x20; // IFormatProvider
	}

	namespace n_SimpleAsyncResult { // : IAsyncResult
		constexpr auto handle = 0x10; // ManualResetEvent
		constexpr auto synch = 0x18; // bool
		constexpr auto isCompleted = 0x19; // bool
		constexpr auto cb = 0x20; // SimpleAsyncCallback
		constexpr auto state = 0x28; // object
		constexpr auto callbackDone = 0x30; // bool
		constexpr auto exc = 0x38; // Exception
		constexpr auto locker = 0x40; // object
		constexpr auto user_read_synch = 0x48; // Nullable(bool)
	}

	namespace n_AsyncOperation { // : YieldInstruction
		constexpr auto syncContext = 0x10; // SynchronizationContext
		constexpr auto m_Ptr = 0x10; // IntPtr
		constexpr auto m_completeCallback = 0x18; // Action(AsyncOperation)
		constexpr auto userSuppliedState = 0x18; // object
		constexpr auto alreadyCompleted = 0x20; // bool
	}

	namespace n_MouseCursor { // : Singleton(MouseCursor)
		constexpr auto _previousPosition = 0x10; // Vector2
		constexpr auto _offsetSinceLastMouseMove = 0x18; // Vector2
		constexpr auto _objectMaskEnabledStates = 0x20; // Stack(bool)
	}

	namespace n_FrameBatch.mRef {
		constexpr auto BufferLinearList = 0x10; // BagRaw(ItemBuffer)
		constexpr auto BuildingLODs = 0x18; // List(BuildingLODRenderer)
		constexpr auto BuildingLODsShadowsOnly = 0x20; // List(BuildingLODRenderer)
		constexpr auto GrassInstances = 0x28; // BagRaw(BakedGrass)
	}

	namespace n_StencilMaterial.MatEntry {
		constexpr auto baseMat = 0x10; // Material
		constexpr auto customMat = 0x18; // Material
		constexpr auto count = 0x20; // int
		constexpr auto stencilId = 0x24; // int
		constexpr auto operation = 0x28; // StencilOp
		constexpr auto compareFunction = 0x2c; // CompareFunction
		constexpr auto readMask = 0x30; // int
		constexpr auto writeMask = 0x34; // int
		constexpr auto useAlphaClip = 0x38; // bool
		constexpr auto colorMask = 0x3c; // ColorWriteMask
	}

	namespace n_VFXExpressionValues {
		constexpr auto m_Ptr = 0x10; // IntPtr
	}

	namespace n_Generic6DofConstraint { // : TypedConstraint
		constexpr auto _angularLimits = 0x38; // RotationalLimitMotor[]
		constexpr auto _linearLimits = 0x40; // TranslationalLimitMotor
	}

	namespace n_PlayerStart { // : ScriptableObject
		constexpr auto LoadoutUSA = 0x18; // PlayerStart.NationStartLoadout
		constexpr auto LoadoutRUS = 0x20; // PlayerStart.NationStartLoadout
		constexpr auto LoadoutTER = 0x28; // PlayerStart.NationStartLoadout
		constexpr auto Weapons = 0x30; // PlayerStart.WeaponStartAttachments[]
		constexpr auto CharacterUSA = 0x38; // PlayerStart.NationStartCharacter
		constexpr auto CharacterRUS = 0x40; // PlayerStart.NationStartCharacter
		constexpr auto CharacterTER = 0x48; // PlayerStart.NationStartCharacter
	}

	namespace n_XPathDocumentBaseIterator { // : XPathNodeIterator
		constexpr auto ctxt = 0x18; // XPathDocumentNavigator
		constexpr auto pos = 0x20; // int
	}

	namespace n_CryptoStream { // : Stream
		constexpr auto _stream = 0x28; // Stream
		constexpr auto _Transform = 0x30; // ICryptoTransform
		constexpr auto _InputBuffer = 0x38; // byte[]
		constexpr auto _InputBufferIndex = 0x40; // int
		constexpr auto _InputBlockSize = 0x44; // int
		constexpr auto _OutputBuffer = 0x48; // byte[]
		constexpr auto _OutputBufferIndex = 0x50; // int
		constexpr auto _OutputBlockSize = 0x54; // int
		constexpr auto _transformMode = 0x58; // CryptoStreamMode
		constexpr auto _canRead = 0x5c; // bool
		constexpr auto _canWrite = 0x5d; // bool
		constexpr auto _finalBlockTransformed = 0x5e; // bool
	}

	namespace n_GlobalEventSystem { // : MonoBehaviour
		constexpr auto (TickIndex8)k__BackingField = 0x18; // int
		constexpr auto mFlag = 0x1c; // bool
		constexpr auto mC = 0x20; // float
		constexpr auto InitializeTime = 0x28; // DateTime
		constexpr auto ms = 0x30; // int
	}

	namespace n_InternalEncoderBestFitFallbackBuffer { // : EncoderFallbackBuffer
		constexpr auto cBestFit = 0x30; // char
		constexpr auto oFallback = 0x38; // InternalEncoderBestFitFallback
		constexpr auto iCount = 0x40; // int
		constexpr auto iSize = 0x44; // int
	}

	namespace n_XmlSchemaAny { // : XmlSchemaParticle
		constexpr auto ns = 0x38; // string
		constexpr auto processContents = 0x40; // XmlSchemaContentProcessing
		constexpr auto namespaceList = 0x48; // NamespaceList
	}

	namespace n_ServerHandler.StreamEndPoint { // : IEquatable(ServerHandler.StreamEndPoint)
		constexpr auto RoomIndex = 0x10; // int
		constexpr auto EndPoint = 0x18; // EndPoint
		constexpr auto StreamBuffer = 0x20; // NetSerializer
	}

	namespace n_PlayerStart.NationStartLoadout {
		constexpr auto SquadLeader = 0x10; // PlayerStart.NationStartLoadout.StartLoadout
		constexpr auto Assault = 0x18; // PlayerStart.NationStartLoadout.StartLoadout
		constexpr auto Medic = 0x20; // PlayerStart.NationStartLoadout.StartLoadout
		constexpr auto Engineer = 0x28; // PlayerStart.NationStartLoadout.StartLoadout
		constexpr auto Support = 0x30; // PlayerStart.NationStartLoadout.StartLoadout
		constexpr auto Recon = 0x38; // PlayerStart.NationStartLoadout.StartLoadout
	}

	namespace n_BigInteger {
		constexpr auto length = 0x10; // uint
		constexpr auto data = 0x18; // uint[]
	}

	namespace n_MonoCustomAttrs.AttributeInfo {
		constexpr auto _usage = 0x10; // AttributeUsageAttribute
		constexpr auto _inheritanceLevel = 0x18; // int
	}

	namespace n_AdditionalSpawnSettings {
		constexpr auto success = 0x10; // float
		constexpr auto successForErase = 0x14; // float
		constexpr auto minSeason = 0x18; // float
		constexpr auto maxSeason = 0x1c; // float
	}

	namespace n_StackGuard {
		constexpr auto m_inliningDepth = 0x10; // int
	}

	namespace n_IteratorFilter { // : XPathNodeIterator
		constexpr auto innerIterator = 0x18; // XPathNodeIterator
		constexpr auto name = 0x20; // string
		constexpr auto position = 0x28; // int
	}

	namespace n_UnobservedTaskExceptionEventArgs { // : EventArgs
		constexpr auto m_exception = 0x10; // AggregateException
		constexpr auto m_observed = 0x18; // bool
	}

	namespace n_NativeThrowsAttribute { // : Attribute
		constexpr auto (ThrowsException)k__BackingField = 0x10; // bool
	}

	namespace n_ElementUnderPointer {
		constexpr auto m_PendingTopElementUnderPointer = 0x10; // VisualElement[]
		constexpr auto m_TopElementUnderPointer = 0x18; // VisualElement[]
		constexpr auto m_TriggerPointerEvent = 0x20; // IPointerEvent[]
		constexpr auto m_TriggerMouseEvent = 0x28; // IMouseEvent[]
		constexpr auto m_PickingPointerPositions = 0x30; // Vector2[]
		constexpr auto m_IsPickingPointerTemporaries = 0x38; // bool[]
	}

	namespace n_RushSettings { // : GamemodeSettingsBase
		constexpr auto (RUSH_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (RUSH_PlantTime)k__BackingField = 0x150; // GamemodeVariable(int)
		constexpr auto (RUSH_Tickets)k__BackingField = 0x158; // GamemodeVariable(int)
		constexpr auto (RUSH_BeaconExplodeTime)k__BackingField = 0x160; // GamemodeVariable(int)
	}

	namespace n_THPBodyParts { // : MonoBehaviour
		constexpr auto THP = 0x18; // THPController
		constexpr auto Collider = 0x20; // BoxCollider
		constexpr auto ThisTransform = 0x28; // Transform
		constexpr auto thisBody = 0x30; // PlayerBody
		constexpr auto LastUpdatedFrame = 0x34; // int
		constexpr auto WorldToLocal = 0x38; // Matrix4x4
	}

	namespace n_BulletXmlWorldImporter { // : WorldImporter
		constexpr auto _fileVersion = 0x88; // int
		constexpr auto _fileOK = 0x8c; // bool
		constexpr auto _collisionShapeData = 0x90; // List(byte[])
		constexpr auto _constraintData = 0x98; // List(byte[])
		constexpr auto _rigidBodyData = 0xa0; // List(byte[])
		constexpr auto _pointerLookup = 0xa8; // Dictionary(long, byte[])
	}

	namespace n_MainMenuStats { // : MonoBehaviour
		constexpr auto Titles = 0x18; // MainMenuStatsTitle[]
		constexpr auto HomePageTitle = 0x20; // MainMenuStatsTitle
		constexpr auto StatsPageTitle = 0x28; // MainMenuStatsTitle
		constexpr auto WeaponsPageTitle = 0x30; // MainMenuStatsTitle
		constexpr auto GadgetsPageTitle = 0x38; // MainMenuStatsTitle
		constexpr auto VehiclesPageTitle = 0x40; // MainMenuStatsTitle
		constexpr auto HomePage = 0x48; // GameObject
		constexpr auto StatsPage = 0x50; // GameObject
		constexpr auto WeaponsPage = 0x58; // GameObject
		constexpr auto GadgetsPage = 0x60; // GameObject
		constexpr auto VehiclesPage = 0x68; // GameObject
		constexpr auto KDValue = 0x70; // TextMeshProUGUI
		constexpr auto KDRectValue = 0x78; // Image
		constexpr auto WLValue = 0x80; // TextMeshProUGUI
		constexpr auto WLRectValue = 0x88; // Image
		constexpr auto AccuracyValue = 0x90; // TextMeshProUGUI
		constexpr auto AccuracyRectValue = 0x98; // Image
		constexpr auto ScoreMinValue = 0xa0; // TextMeshProUGUI
		constexpr auto ScorePerMinRectValue = 0xa8; // Image
		constexpr auto KillMinValue = 0xb0; // TextMeshProUGUI
		constexpr auto KillPerMinRectValue = 0xb8; // Image
		constexpr auto MostPlayedClassTitle = 0xc0; // TextMeshProUGUI
		constexpr auto MostPlayedClassValue = 0xc8; // TextMeshProUGUI
		constexpr auto MostPlayedClassPic = 0xd0; // RawImage
		constexpr auto MostKillClassTitle = 0xd8; // TextMeshProUGUI
		constexpr auto MostKillClassValue = 0xe0; // TextMeshProUGUI
		constexpr auto MostKillClassPic = 0xe8; // RawImage
		constexpr auto MostScoredClassTitle = 0xf0; // TextMeshProUGUI
		constexpr auto MostScoredClassValue = 0xf8; // TextMeshProUGUI
		constexpr auto MostScoredClassPic = 0x100; // RawImage
		constexpr auto MostKillWeaponTitle = 0x108; // TextMeshProUGUI
		constexpr auto MostKillWeaponValue = 0x110; // TextMeshProUGUI
		constexpr auto MostKillWeaponPic = 0x118; // RawImage
		constexpr auto MostKillGadgetTitle = 0x120; // TextMeshProUGUI
		constexpr auto MostKillGadgetValue = 0x128; // TextMeshProUGUI
		constexpr auto MostKillGadgetPic = 0x130; // RawImage
		constexpr auto MostKillVehicleTitle = 0x138; // TextMeshProUGUI
		constexpr auto MostKillVehicleValue = 0x140; // TextMeshProUGUI
		constexpr auto MostKillVehiclePic = 0x148; // RawImage
		constexpr auto Kills = 0x150; // MainMenuStatsItem
		constexpr auto Deaths = 0x158; // MainMenuStatsItem
		constexpr auto GamePlayed = 0x160; // MainMenuStatsItem
		constexpr auto Win = 0x168; // MainMenuStatsItem
		constexpr auto Lost = 0x170; // MainMenuStatsItem
		constexpr auto TotalPlayed = 0x178; // MainMenuStatsItem
		constexpr auto TotalScored = 0x180; // MainMenuStatsItem
		constexpr auto LeaderClass = 0x188; // MainMenuStatsClassItem
		constexpr auto AssaultClass = 0x190; // MainMenuStatsClassItem
		constexpr auto MedicClass = 0x198; // MainMenuStatsClassItem
		constexpr auto EngineerClass = 0x1a0; // MainMenuStatsClassItem
		constexpr auto SupportClass = 0x1a8; // MainMenuStatsClassItem
		constexpr auto ReconClass = 0x1b0; // MainMenuStatsClassItem
		constexpr auto FriendliesShot = 0x1b8; // MainMenuStatsItem
		constexpr auto FriendliesKilled = 0x1c0; // MainMenuStatsItem
		constexpr auto RevivedSomeone = 0x1c8; // MainMenuStatsItem
		constexpr auto RevivedSelf = 0x1d0; // MainMenuStatsItem
		constexpr auto HealedHPs = 0x1d8; // MainMenuStatsItem
		constexpr auto ShotsFired = 0x1e0; // MainMenuStatsItem
		constexpr auto ShotsHit = 0x1e8; // MainMenuStatsItem
		constexpr auto LongestKill = 0x1f0; // MainMenuStatsItem
		constexpr auto Headshots = 0x1f8; // MainMenuStatsItem
		constexpr auto ObjectivesComplated = 0x200; // MainMenuStatsItem
		constexpr auto RoadKills = 0x208; // MainMenuStatsItem
		constexpr auto VehiclesDestroyed = 0x210; // MainMenuStatsItem
		constexpr auto VehiclesRepaired = 0x218; // MainMenuStatsItem
		constexpr auto Suicides = 0x220; // MainMenuStatsItem
		constexpr auto PrefabWeaponItem = 0x228; // GameObject
		constexpr auto WeaponsParent = 0x230; // Transform
		constexpr auto ActiveWeaponItems = 0x238; // List(GameObject)
		constexpr auto PrefabGadgetItem = 0x240; // GameObject
		constexpr auto GadgetsParent = 0x248; // Transform
		constexpr auto ActiveGadgetItems = 0x250; // List(GameObject)
		constexpr auto PrefabVehicleItem = 0x258; // GameObject
		constexpr auto VehicleParent = 0x260; // Transform
		constexpr auto ActiveVehicleItems = 0x268; // List(GameObject)
		constexpr auto PrestigeUpPage = 0x270; // GameObject
	}

	namespace n_PlayerConnection { // : ScriptableObject
		constexpr auto m_PlayerEditorConnectionEvents = 0x18; // PlayerEditorConnectionEvents
		constexpr auto m_connectedPlayers = 0x20; // List(int)
		constexpr auto m_IsInitilized = 0x28; // bool
	}

	namespace n_GameScreen_Pinging { // : MonoBehaviour
		constexpr auto Cursor = 0x18; // RectTransform
		constexpr auto Items = 0x20; // GameScreen_PingingItem[]
		constexpr auto position = 0x28; // Vector2
		constexpr auto Canvas = 0x30; // CanvasGroup
		constexpr auto mWasActive = 0x38; // bool
		constexpr auto index = 0x3c; // int
		constexpr auto (TickIndex8)k__BackingField = 0x40; // int
	}

	namespace n_ContactSolverInfoData { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
	}

	namespace n_CallableGameEvents {
		constexpr auto Mono = 0x10; // Type
		constexpr auto Method = 0x18; // MethodInfo
	}

	namespace n_FoliageNoise { // : MonoBehaviour
		constexpr auto Position = 0x18; // Vector3
		constexpr auto Rotation = 0x24; // Quaternion
		constexpr auto Scale = 0x34; // Vector3
		constexpr auto Referance = 0x40; // FoliageItem
	}

	namespace n_ProjectileTankBullet { // : Projectile
		constexpr auto ExplosionToSpawn = 0xd8; // GameObject
	}

	namespace n_AttributeUsageAttribute { // : Attribute
		constexpr auto m_attributeTarget = 0x10; // AttributeTargets
		constexpr auto m_allowMultiple = 0x14; // bool
		constexpr auto m_inherited = 0x15; // bool
	}

	namespace n_TimeType {
		constexpr auto Offset = 0x10; // int
		constexpr auto IsDst = 0x14; // bool
		constexpr auto Name = 0x18; // string
	}

	namespace n_WeaponManager { // : Tool
		constexpr auto IsEmptyWeapon = 0x90; // bool
		constexpr auto reloadingStabilization = 0x91; // bool
		constexpr auto shellExist = 0x92; // bool
		constexpr auto hasPistolShell = 0x93; // bool
		constexpr auto connectorExist = 0x94; // bool
		constexpr auto shellSpawnDelay = 0x98; // float
		constexpr auto boltActionshellSpawnDelay = 0x9c; // float
		constexpr auto modelScale = 0xa0; // float
		constexpr auto fakeShotEnabled = 0xa4; // bool
		constexpr auto fakeShotHipEnabled = 0xa5; // bool
		constexpr auto canReloadWhileAim = 0xa6; // bool
		constexpr auto VisualMagazineDelays = 0xa8; // MagazineFxShowDelays
		constexpr auto BoltTransform = 0xb0; // Transform
		constexpr auto MagazineMeshes = 0xb8; // MeshRenderer[]
		constexpr auto AnimatedBullets = 0xc0; // Transform[]
		constexpr auto MainBodyMesh = 0xc8; // MeshRenderer
		constexpr auto MainMagazine = 0xd0; // MeshRenderer
		constexpr auto MainBoltActionMesh = 0xd8; // MeshRenderer
		constexpr auto MainSightPoint = 0xe0; // Transform
		constexpr auto BarrelPoint = 0xe8; // Transform
		constexpr auto CantedPoint = 0xf0; // Transform
		constexpr auto SideRailPoint = 0xf8; // Transform
		constexpr auto UnderRailPoint = 0x100; // Transform
		constexpr auto CamoPoint = 0x108; // Transform
		constexpr auto StockEndPoint = 0x110; // Transform
		constexpr auto TriggerPoint = 0x118; // Transform
		constexpr auto Item = 0x120; // AWeapon
		constexpr auto Stats = 0x128; // WeaponStats
		constexpr auto ToolStats = 0x130; // ToolStats
		constexpr auto Attachments = 0x138; // AttachmentManager
		constexpr auto bullets = 0x140; // List(BulletVisual)
		constexpr auto firingType = 0x148; // FiringTypes
		constexpr auto isDebugMode = 0x14c; // bool
		constexpr auto (FastListIndexA)k__BackingField = 0x150; // int
		constexpr auto local = 0x158; // WeaponManager.Local
		constexpr auto debug = 0x160; // WeaponManager.Debug
		constexpr auto remote = 0x168; // WeaponManager.Remote
		constexpr auto LastDroppedMagazineAmmo = 0x170; // int
	}

	namespace n_FlagUIMap { // : MapUIBehaviour
		constexpr auto Label = 0x60; // TextMeshProUGUI
		constexpr auto SquadTargetLabel = 0x68; // TextMeshProUGUI
		constexpr auto Hover = 0x70; // CanvasGroup
		constexpr auto Circle = 0x78; // Image
		constexpr auto CircleRect = 0x80; // RectTransform
		constexpr auto Attack = 0x88; // GameObject
		constexpr auto Defend = 0x90; // GameObject
		constexpr auto image = 0x98; // Image
		constexpr auto flag = 0xa0; // Flag
		constexpr auto mTargetSquadStringVersion = 0xa8; // int
		constexpr auto mState = 0xac; // FlagUIMap.State
	}

	namespace n_IconsUI.PlayerPrestige {
		constexpr auto Sprites = 0x10; // Sprite[]
		constexpr auto Sprites2 = 0x18; // Sprite[]
		constexpr auto Sprites3 = 0x20; // Sprite[]
	}

	namespace n_AssemblyTrademarkAttribute { // : Attribute
		constexpr auto m_trademark = 0x10; // string
	}

	namespace n_QuantizedBvhNode { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_FreeForAllSettings { // : GamemodeSettingsBase
		constexpr auto (FFA_Timer)k__BackingField = 0x148; // GamemodeVariable(Timer)
		constexpr auto (FFA_Tickets)k__BackingField = 0x150; // GamemodeVariable(int)
	}

	namespace n_IndexedMesh { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _preventDelete = 0x18; // bool
		constexpr auto _ownsData = 0x19; // bool
	}

	namespace n_Tree {
		constexpr auto ID = 0x10; // int
		constexpr auto Renderer = 0x18; // RendererIdentity
		constexpr auto Bounds = 0x20; // Bounds
		constexpr auto boundsMin = 0x38; // Vector3
		constexpr auto boundsCenter = 0x44; // Vector3
		constexpr auto boundsMax = 0x50; // Vector3
		constexpr auto shadowBoundsMin = 0x5c; // Vector3
		constexpr auto shadowBoundsMax = 0x68; // Vector3
		constexpr auto position = 0x74; // Vector3
		constexpr auto rotation = 0x80; // Quaternion
		constexpr auto scale = 0x90; // Vector3
		constexpr auto Radius = 0x9c; // float
		constexpr auto StopRendering = 0xa0; // bool
		constexpr auto DestroyOwnerSteamID = 0xa8; // ulong
		constexpr auto Collider = 0xb0; // CapsuleCollider
		constexpr auto HP = 0xb8; // float
		constexpr auto localToWorld = 0xbc; // Matrix4x4
	}

	namespace n_Tokenizer.StreamTokenReader { // : Tokenizer.ITokenReader
		constexpr auto _in = 0x10; // StreamReader
		constexpr auto _numCharRead = 0x18; // int
	}

	namespace n_SoapHexBinary {
		constexpr auto _value = 0x10; // byte[]
		constexpr auto sb = 0x18; // StringBuilder
	}

	namespace n_MainMenuStatsClassItem { // : MonoBehaviour
		constexpr auto Kills = 0x18; // TextMeshProUGUI
		constexpr auto XP = 0x20; // TextMeshProUGUI
		constexpr auto TimePlayed = 0x28; // TextMeshProUGUI
	}

	namespace n_DroneInstance { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (TickIndex9)k__BackingField = 0x1c; // int
		constexpr auto (lifeTime)k__BackingField = 0x20; // float
		constexpr auto (inPool)k__BackingField = 0x24; // bool
		constexpr auto (PrefabInstanceID)k__BackingField = 0x28; // int
		constexpr auto (RuntimeInstanceID)k__BackingField = 0x2c; // int
		constexpr auto (isSpawnedFromPool)k__BackingField = 0x30; // bool
		constexpr auto Item = 0x38; // ToolItem
		constexpr auto PrefabDead = 0x40; // GameObject
		constexpr auto Local = 0x48; // GameObject
		constexpr auto PostProcess = 0x50; // PostProcess
		constexpr auto GUIFriendly = 0x58; // Renderer
		constexpr auto MaximumHealh = 0x60; // float
		constexpr auto MaximumRange = 0x64; // float
		constexpr auto provider = 0x68; // DroneColliderProvider
		constexpr auto (View)k__BackingField = 0x70; // NetView
		constexpr auto (Rigidbody)k__BackingField = 0x78; // Rigidbody
		constexpr auto (PhysicsInterpolation)k__BackingField = 0x80; // RigidbodyInterpolationBehaviour
		constexpr auto (LOD)k__BackingField = 0x88; // DynamicLOD
		constexpr auto (Stream)k__BackingField = 0x90; // NetSerializer
		constexpr auto (DistanceToLocalCamera)k__BackingField = 0x98; // float
		constexpr auto (DistanceToLocalPlayer)k__BackingField = 0x9c; // float
		constexpr auto (Team)k__BackingField = 0xa0; // Team
		constexpr auto (LastHit)k__BackingField = 0xa4; // float
		constexpr auto (Health)k__BackingField = 0xa8; // float
		constexpr auto WorldPosition = 0xac; // Vector3
		constexpr auto WorldRotation = 0xb8; // Quaternion
		constexpr auto WorldVelocity = 0xc8; // Vector3
		constexpr auto m_initialized = 0xd4; // bool
		constexpr auto m_couter = 0xd8; // int
		constexpr auto m_targetCounter = 0xdc; // int
		constexpr auto (PhysicsEnabled)k__BackingField = 0xe0; // bool
		constexpr auto (isControlling)k__BackingField = 0xe1; // bool
	}

	namespace n_ParameterInfo { // : ICustomAttributeProvider
		constexpr auto ClassImpl = 0x10; // Type
		constexpr auto DefaultValueImpl = 0x18; // object
		constexpr auto MemberImpl = 0x20; // MemberInfo
		constexpr auto NameImpl = 0x28; // string
		constexpr auto PositionImpl = 0x30; // int
		constexpr auto AttrsImpl = 0x34; // ParameterAttributes
		constexpr auto marshalAs = 0x38; // MarshalAsAttribute
	}

	namespace n_UnityTlsContext { // : MobileTlsContext
		constexpr auto tlsContext = 0x58; // UnityTls.unitytls_tlsctx*
		constexpr auto requestedClientCertChain = 0x60; // UnityTls.unitytls_x509list*
		constexpr auto requestedClientKey = 0x68; // UnityTls.unitytls_key*
		constexpr auto readCallback = 0x70; // UnityTls.unitytls_tlsctx_read_callback
		constexpr auto writeCallback = 0x78; // UnityTls.unitytls_tlsctx_write_callback
		constexpr auto certificateCallback = 0x80; // UnityTls.unitytls_tlsctx_certificate_callback
		constexpr auto verifyCallback = 0x88; // UnityTls.unitytls_tlsctx_x509verify_callback
		constexpr auto localClientCertificate = 0x90; // X509Certificate
		constexpr auto remoteCertificate = 0x98; // X509Certificate
		constexpr auto connectioninfo = 0xa0; // MonoTlsConnectionInfo
		constexpr auto isAuthenticated = 0xa8; // bool
		constexpr auto hasContext = 0xa9; // bool
		constexpr auto closedGraceful = 0xaa; // bool
		constexpr auto writeBuffer = 0xb0; // byte[]
		constexpr auto readBuffer = 0xb8; // byte[]
		constexpr auto handle = 0xc0; // GCHandle
		constexpr auto lastException = 0xc8; // Exception
	}

	namespace n_TypeAnalysis {
		constexpr auto properties = 0x10; // PropertyAnalysis[]
		constexpr auto name = 0x18; // string
		constexpr auto keywords = 0x20; // EventKeywords
		constexpr auto level = 0x28; // EventLevel
		constexpr auto opcode = 0x2c; // EventOpcode
		constexpr auto tags = 0x30; // EventTags
	}

	namespace n_DebuggerTypeProxyAttribute { // : Attribute
		constexpr auto typeName = 0x10; // string
	}

	namespace n_DecoderReplacementFallbackBuffer { // : DecoderFallbackBuffer
		constexpr auto strDefault = 0x20; // string
		constexpr auto fallbackCount = 0x28; // int
		constexpr auto fallbackIndex = 0x2c; // int
	}

	namespace n_RequireComponent { // : Attribute
		constexpr auto m_Type0 = 0x10; // Type
		constexpr auto m_Type1 = 0x18; // Type
		constexpr auto m_Type2 = 0x20; // Type
	}

	namespace n_EditorResources { // : ScriptableObject
		constexpr auto DebugPlayerModel = 0x18; // Mesh
		constexpr auto DebugSphere = 0x20; // Mesh
		constexpr auto DebugRushBeaconArea = 0x28; // Mesh
		constexpr auto USA = 0x30; // Texture2D
		constexpr auto RUS = 0x38; // Texture2D
		constexpr auto Natural = 0x40; // Texture2D
	}

	namespace n_ClimbableManager { // : MonoBehaviour
		constexpr auto Instances = 0x18; // List(Climbable)
		constexpr auto view = 0x20; // NetView
		constexpr auto mLastRequest = 0x28; // float
		constexpr auto mLastRequestHandle = 0x30; // InvokeHandle
	}

	namespace n_ColorCurves { // : VolumeComponent
		constexpr auto master = 0x38; // TextureCurveParameter
		constexpr auto red = 0x40; // TextureCurveParameter
		constexpr auto green = 0x48; // TextureCurveParameter
		constexpr auto blue = 0x50; // TextureCurveParameter
		constexpr auto hueVsHue = 0x58; // TextureCurveParameter
		constexpr auto hueVsSat = 0x60; // TextureCurveParameter
		constexpr auto satVsSat = 0x68; // TextureCurveParameter
		constexpr auto lumVsSat = 0x70; // TextureCurveParameter
	}

	namespace n_MeshBuffer {
		constexpr auto (inPool)k__BackingField = 0x10; // bool
		constexpr auto vertices = 0x18; // List(Vector3)
		constexpr auto triangles = 0x20; // List(int)
		constexpr auto normals = 0x28; // List(Vector3)
		constexpr auto uvs = 0x30; // List(Vector2)
		constexpr auto mIsAbove64K = 0x38; // bool
	}

	namespace n_BoxBoxDetector { // : DiscreteCollisionDetectorInterface
		constexpr auto _box1 = 0x18; // BoxShape
		constexpr auto _box2 = 0x20; // BoxShape
	}

	namespace n_SoftBodyHelpers.LinkDep {
		constexpr auto (LinkB)k__BackingField = 0x10; // bool
		constexpr auto (Next)k__BackingField = 0x18; // SoftBodyHelpers.LinkDep
		constexpr auto (Value)k__BackingField = 0x20; // Link
	}

	namespace n_DelegateSerializationHolder { // : ISerializable
		constexpr auto _delegate = 0x10; // Delegate
	}

	namespace n_Joint.Specs { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_Compute_DT_EventArgs {
		constexpr auto EventType = 0x10; // Compute_DistanceTransform_EventTypes
		constexpr auto ProgressPercentage = 0x14; // float
		constexpr auto Colors = 0x18; // Color[]
	}

	namespace n_GunGameStepUIElement { // : MonoBehaviour
		constexpr auto mImage = 0x18; // RawImage
	}

	namespace n_Logger { // : ILogger
		constexpr auto (logHandler)k__BackingField = 0x10; // ILogHandler
		constexpr auto (logEnabled)k__BackingField = 0x18; // bool
		constexpr auto (filterLogType)k__BackingField = 0x1c; // LogType
	}

	namespace n_DefaultBinder.BinderState {
		constexpr auto m_argsMap = 0x10; // int[]
		constexpr auto m_originalSize = 0x18; // int
		constexpr auto m_isParamArray = 0x1c; // bool
	}

	namespace n_CrossContextChannel.ContextRestoreSink { // : IMessageSink
		constexpr auto _next = 0x10; // IMessageSink
		constexpr auto _context = 0x18; // Context
		constexpr auto _call = 0x20; // IMessage
	}

	namespace n_MenuGamePlay { // : IEnumerable(IOptionsElement)
		constexpr auto ToggleMap = 0x10; // ToggleBehaviour
		constexpr auto RunningDot = 0x18; // ToggleBehaviour
		constexpr auto ShowPings = 0x20; // ToggleBehaviour
		constexpr auto ShowBorders = 0x28; // ToggleBehaviour
		constexpr auto AutoReady = 0x30; // ToggleBehaviour
		constexpr auto HitMarkers = 0x38; // ToggleBehaviour
		constexpr auto DefaultHitMarkerColor = 0x40; // ColorPickerBehaviour
		constexpr auto DefaultHitMarkerOpacity = 0x48; // SliderBehaviour
		constexpr auto DefaultHitMarkerVolume = 0x50; // SliderBehaviour
		constexpr auto DefaultHitMarkerFade = 0x58; // SliderBehaviour
		constexpr auto DefaultHitMarkerSize = 0x60; // SliderBehaviour
		constexpr auto HeadshotHitMarkerColor = 0x68; // ColorPickerBehaviour
		constexpr auto HeadshotHitMarkerOpacity = 0x70; // SliderBehaviour
		constexpr auto HeadshotHitMarkerVolume = 0x78; // SliderBehaviour
		constexpr auto HeadshotHitMarkerFade = 0x80; // SliderBehaviour
		constexpr auto HeadshotHitMarkerSize = 0x88; // SliderBehaviour
		constexpr auto ArmorHitMarkerColor = 0x90; // ColorPickerBehaviour
		constexpr auto ArmorHitMarkerOpacity = 0x98; // SliderBehaviour
		constexpr auto ArmorHitMarkerVolume = 0xa0; // SliderBehaviour
		constexpr auto ArmorHitMarkerFade = 0xa8; // SliderBehaviour
		constexpr auto ArmorHitMarkerSize = 0xb0; // SliderBehaviour
		constexpr auto KillHitMarkerColor = 0xb8; // ColorPickerBehaviour
		constexpr auto KillHitMarkerOpacity = 0xc0; // SliderBehaviour
		constexpr auto KillHitMarkerVolume = 0xc8; // SliderBehaviour
		constexpr auto KillHitMarkerFade = 0xd0; // SliderBehaviour
		constexpr auto KillHitMarkerSize = 0xd8; // SliderBehaviour
		constexpr auto FriendlyColor = 0xe0; // ColorPickerBehaviour
		constexpr auto SquadFriendColor = 0xe8; // ColorPickerBehaviour
		constexpr auto SquadLeaderColor = 0xf0; // ColorPickerBehaviour
		constexpr auto EnemyColor = 0xf8; // ColorPickerBehaviour
		constexpr auto FriendlyIconFade = 0x100; // SliderBehaviour
		constexpr auto SquadFriendIconFade = 0x108; // SliderBehaviour
		constexpr auto SquadLeaderIconFade = 0x110; // SliderBehaviour
		constexpr auto FriendlyIconSize = 0x118; // SliderBehaviour
		constexpr auto SquadFriendIconSize = 0x120; // SliderBehaviour
		constexpr auto SquadLeaderIconSize = 0x128; // SliderBehaviour
		constexpr auto AllyObjective = 0x130; // ColorPickerBehaviour
		constexpr auto EnemyObjective = 0x138; // ColorPickerBehaviour
		constexpr auto NeutralObjective = 0x140; // ColorPickerBehaviour
		constexpr auto FriendlyOutlineIntensity = 0x148; // SliderBehaviour
		constexpr auto FriendlyNameTagSize = 0x150; // SliderBehaviour
		constexpr auto ShowFPS = 0x158; // ToggleBehaviour
		constexpr auto ShowNetworkStats = 0x160; // ToggleBehaviour
		constexpr auto PingSize = 0x168; // SliderBehaviour
		constexpr auto FlagSize = 0x170; // SliderBehaviour
		constexpr auto FlagOpacity = 0x178; // SliderBehaviour
		constexpr auto CrosshairSize = 0x180; // SliderBehaviour
		constexpr auto CrosshairOpacity = 0x188; // SliderBehaviour
		constexpr auto CrosshairColor = 0x190; // ColorPickerBehaviour
		constexpr auto ShowKeybindings = 0x198; // ToggleBehaviour
		constexpr auto ShowButtonToPingOnFlags = 0x1a0; // ToggleBehaviour
		constexpr auto ShowButtonToPingToHelp = 0x1a8; // ToggleBehaviour
		constexpr auto AutoHide = 0x1b0; // ToggleBehaviour
		constexpr auto ChatOpaque = 0x1b8; // SliderBehaviour
		constexpr auto ChatSize = 0x1c0; // SliderBehaviour
		constexpr auto ShowEnemyVoiceChat = 0x1c8; // ToggleBehaviour
		constexpr auto EnableLocalVoiceChatWhenDown = 0x1d0; // ToggleBehaviour
		constexpr auto MapMainGridColor = 0x1d8; // ColorPickerBehaviour
		constexpr auto MapMainGridSize = 0x1e0; // SliderBehaviour
		constexpr auto MapChildGridColor = 0x1e8; // ColorPickerBehaviour
		constexpr auto MapChildGridSize = 0x1f0; // SliderBehaviour
		constexpr auto TankHUD = 0x1f8; // ColorPickerBehaviour
		constexpr auto ApcHUD = 0x200; // ColorPickerBehaviour
		constexpr auto HelicopterHUD = 0x208; // ColorPickerBehaviour
	}

	namespace n_EndOfGameManagerBehaviour { // : MonoBehaviour
		constexpr auto TimeFunction = 0x18; // AnimationCurve
		constexpr auto WhiteScreenFunction = 0x20; // AnimationCurve
		constexpr auto Main = 0x28; // CanvasGroup
		constexpr auto Votes = 0x30; // CanvasGroup
		constexpr auto Modes = 0x38; // CanvasGroup
		constexpr auto Sizes = 0x40; // CanvasGroup
		constexpr auto WhiteScreen = 0x48; // CanvasGroup
		constexpr auto Stress4Seconds = 0x50; // AudioClip
		constexpr auto EndMusic = 0x58; // AudioClip
		constexpr auto Won = 0x60; // TextMeshProUGUI
		constexpr auto Tickets = 0x68; // TextMeshProUGUI
		constexpr auto Countdown = 0x70; // TextMeshProUGUI
		constexpr auto Element = 0x78; // GameObject
		constexpr auto ElementModes = 0x80; // GameObject
		constexpr auto ElementSizes = 0x88; // GameObject
		constexpr auto TestDebug = 0x90; // bool
		constexpr auto mRaycaster = 0x98; // GraphicRaycaster
		constexpr auto mAudioSource = 0xa0; // AudioSource
		constexpr auto mAnimation = 0xa8; // Animation
		constexpr auto mCanvas = 0xb0; // Canvas
		constexpr auto endTime = 0xb8; // float
		constexpr auto animatedStarted = 0xbc; // bool
		constexpr auto musicStarted = 0xbd; // bool
		constexpr auto hasModeVote = 0xbe; // bool
		constexpr auto hasSizeVote = 0xbf; // bool
		constexpr auto mLastSiblingSet = 0xc0; // float
		constexpr auto ended = 0xc4; // bool
		constexpr auto mMapVoteElements = 0xc8; // List(VoteMapElement)
		constexpr auto mMapVoteElementsSort = 0xd0; // List(VoteMapElement)
		constexpr auto mGamemodeVoteElements = 0xd8; // List(VoteModeElement)
		constexpr auto mSizeVoteElements = 0xe0; // List(SizeVoteElement)
		constexpr auto mActiveTable = 0xe8; // bool[]
		constexpr auto (TickIndex8)k__BackingField = 0xf0; // int
	}

	namespace n_AppDomainLevelActivator { // : IActivator
		constexpr auto _activationUrl = 0x10; // string
		constexpr auto _next = 0x18; // IActivator
	}

	namespace n_DecalManager { // : MonoBehaviour
		constexpr auto Gizmos = 0x18; // bool
	}

	namespace n_NatureManager { // : MonoBehaviour
		constexpr auto view = 0x18; // NetView
		constexpr auto mainWind = 0x20; // AudioSource
		constexpr auto id2Component = 0x28; // Dictionary(byte, NatureComponent)
		constexpr auto component2Id = 0x30; // Dictionary(NatureComponent, byte)
		constexpr auto underTreeBuffer = 0x38; // BagList(NatureManager.TreeCell)
		constexpr auto treeCells = 0x40; // GridCell(NatureManager.TreeCell)
	}

	namespace n_DSAManaged { // : DSA
		constexpr auto keypairGenerated = 0x20; // bool
		constexpr auto m_disposed = 0x21; // bool
		constexpr auto p = 0x28; // BigInteger
		constexpr auto q = 0x30; // BigInteger
		constexpr auto g = 0x38; // BigInteger
		constexpr auto x = 0x40; // BigInteger
		constexpr auto y = 0x48; // BigInteger
		constexpr auto j = 0x50; // BigInteger
		constexpr auto seed = 0x58; // BigInteger
		constexpr auto counter = 0x60; // int
		constexpr auto j_missing = 0x64; // bool
		constexpr auto rng = 0x68; // RandomNumberGenerator
		constexpr auto KeyGenerated = 0x70; // DSAManaged.KeyGeneratedEventHandler
	}

	namespace n_MultiBody { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _links = 0x18; // MultiBodyLink[]
	}

	namespace n_WriteObjectInfo {
		constexpr auto objectInfoId = 0x10; // int
		constexpr auto obj = 0x18; // object
		constexpr auto objectType = 0x20; // Type
		constexpr auto isSi = 0x28; // bool
		constexpr auto isNamed = 0x29; // bool
		constexpr auto isTyped = 0x2a; // bool
		constexpr auto isArray = 0x2b; // bool
		constexpr auto si = 0x30; // SerializationInfo
		constexpr auto cache = 0x38; // SerObjectInfoCache
		constexpr auto memberData = 0x40; // object[]
		constexpr auto serializationSurrogate = 0x48; // ISerializationSurrogate
		constexpr auto context = 0x50; // StreamingContext
		constexpr auto serObjectInfoInit = 0x60; // SerObjectInfoInit
		constexpr auto objectId = 0x68; // long
		constexpr auto assemId = 0x70; // long
		constexpr auto binderTypeName = 0x78; // string
		constexpr auto binderAssemblyString = 0x80; // string
	}

	namespace n_TimelineAsset { // : PlayableAsset
		constexpr auto m_Version = 0x18; // int
		constexpr auto m_Tracks = 0x20; // List(ScriptableObject)
		constexpr auto m_FixedDuration = 0x28; // double
		constexpr auto m_CacheOutputTracks = 0x30; // TrackAsset[]
		constexpr auto m_CacheRootTracks = 0x38; // List(TrackAsset)
		constexpr auto m_CacheFlattenedTracks = 0x40; // List(TrackAsset)
		constexpr auto m_EditorSettings = 0x48; // TimelineAsset.EditorSettings
		constexpr auto m_DurationMode = 0x50; // TimelineAsset.DurationMode
		constexpr auto m_MarkerTrack = 0x58; // MarkerTrack
	}

	namespace n_THPController { // : MonoBehaviour
		constexpr auto (FastListIndexA)k__BackingField = 0x18; // int
		constexpr auto (FastListIndexB)k__BackingField = 0x1c; // int
		constexpr auto lod = 0x20; // PlayerLOD
		constexpr auto MainAnimator = 0x28; // Animation
		constexpr auto SpineController = 0x30; // Transform
		constexpr auto SpineAController = 0x38; // Transform
		constexpr auto VerticalMouseLook = 0x40; // Transform
		constexpr auto ToolRoot = 0x48; // Transform
		constexpr auto ToolOffset = 0x50; // Transform
		constexpr auto MainSpineTransform = 0x58; // Transform
		constexpr auto Spine2 = 0x60; // Transform
		constexpr auto SpineL = 0x68; // Transform
		constexpr auto HeadAimController = 0x70; // Transform
		constexpr auto HeadXAxisController = 0x78; // Transform
		constexpr auto HeadYAxisController = 0x80; // Transform
		constexpr auto PackedBottomSpineParent = 0x88; // Transform
		constexpr auto PackedUpperSpineParent = 0x90; // Transform
		constexpr auto LeftIK = 0x98; // InverseKinematics
		constexpr auto RightIK = 0xa0; // InverseKinematics
		constexpr auto ToolAudioSource = 0xa8; // AudioSource
		constexpr auto LocalChatAudioSource = 0xb0; // AudioSource
		constexpr auto HitBoxes = 0xb8; // THPBodyParts[]
		constexpr auto FakeHit = 0xc0; // THPBodyParts
		constexpr auto RagdollsColliders = 0xc8; // Transform[]
		constexpr auto RagdollCollidersParent = 0xd0; // Transform[]
		constexpr auto AttachedRagdoll = 0xd8; // THPRagdoll
		constexpr auto ArmorManager = 0xe0; // CharacterArmor
		constexpr auto DebugKeepRagdoll = 0xe8; // bool
		constexpr auto WorldPosition = 0xec; // Vector3
		constexpr auto PlayerGUI = 0xf8; // PlayerGUI
		constexpr auto Player = 0x100; // PlayerNetwork
		constexpr auto State = 0x108; // PlayerNetworkState
		constexpr auto StateSafe = 0x110; // PlayerNetworkState
		constexpr auto m_inSeatSittingFlag = 0x118; // SittingAnimation
		constexpr auto m_TargetAnimationQuality = 0x11c; // THPController.animationQuality
		constexpr auto m_lastStanding = 0x120; // PlayerStand
		constexpr auto m_lastPlayedFootstep = 0x124; // float
		constexpr auto m_etaToThrowDone = 0x128; // float
		constexpr auto m_seatYAxisAngle = 0x12c; // float
		constexpr auto m_safety = 0x130; // float
		constexpr auto m_lastMovement = 0x134; // float
		constexpr auto m_nextTimeCanPlayAnimation = 0x138; // float
		constexpr auto m_activeMovementAnimation = 0x140; // string
		constexpr auto m_inSeatFreeFlag = 0x148; // bool
		constexpr auto m_inSeatFlag = 0x149; // bool
		constexpr auto m_isClimbingFlag = 0x14a; // bool
		constexpr auto m_isRopeClimbing = 0x14b; // bool
		constexpr auto m_isLadderClimbing = 0x14c; // bool
		constexpr auto m_friendlyColliderEnabled = 0x14d; // bool
		constexpr auto m_voiceChatPlaying = 0x14e; // bool
		constexpr auto m_isFriendly = 0x14f; // bool
		constexpr auto m_animationsEnabled = 0x150; // bool
		constexpr auto m_grounded = 0x151; // bool
		constexpr auto mFootstepsQueue = 0x158; // Queue(ValueTuple(AudioClip, float))
		constexpr auto mFoliageStepsQueue = 0x160; // Queue(ValueTuple(AudioClip, float, float))
		constexpr auto m_audioSourceEnabled = 0x168; // bool
		constexpr auto m_toolAnimationsEnabled = 0x169; // bool
		constexpr auto m_climbingRopeHoldFlag = 0x16a; // bool
		constexpr auto m_screenHeight = 0x16c; // float
		constexpr auto m_inFrustum = 0x170; // bool
		constexpr auto m_distance = 0x174; // float
		constexpr auto SpineController_localRotation = 0x178; // Quaternion
		constexpr auto SpineAController_localPosition = 0x188; // Vector3
		constexpr auto SpineAController_localRotation = 0x194; // Quaternion
		constexpr auto VerticalMouseLook_localRotation = 0x1a4; // Quaternion
		constexpr auto transform_localPosition = 0x1b4; // Vector3
		constexpr auto ToolOffset_localPosition = 0x1c0; // Vector3
		constexpr auto Safetly_localPosition = 0x1cc; // Vector3
		constexpr auto Safetly_localRotation = 0x1d8; // Quaternion
		constexpr auto HeadXAxisController_localRotation = 0x1e8; // SharedObject(Quaternion)
		constexpr auto HeadYAxisController_localRotation = 0x1f0; // SharedObject(Quaternion)
		constexpr auto current_transform_localPosition = 0x1f8; // SharedObject(Vector3)
		constexpr auto current_transform_localRotation = 0x200; // SharedObject(Quaternion)
		constexpr auto (isInitialized)k__BackingField = 0x208; // bool
		constexpr auto AnimationJobIndex = 0x20c; // int
		constexpr auto m_ragdollBonesDefault = 0x210; // TransformAccessArray
		constexpr auto m_jobsInitialized = 0x218; // bool
		constexpr auto RagdollEnabled = 0x219; // bool
		constexpr auto RagdollPhysicsEnabled = 0x21a; // bool
		constexpr auto CloseToLocalPlayerForDragging = 0x21b; // bool
		constexpr auto LastBonesPositionsUpdated = 0x21c; // float
		constexpr auto visaul_active = 0x220; // LoadoutIndex
		constexpr auto visaul_active_target = 0x221; // LoadoutIndex
		constexpr auto visual_eta_switch = 0x224; // float
		constexpr auto (isSetAsDead)k__BackingField = 0x228; // bool
	}

	namespace n_ByteMatcher {
		constexpr auto map = 0x10; // Hashtable
		constexpr auto starts = 0x18; // Hashtable
	}

	namespace n_UTF8Encoding.UTF8Decoder { // : DecoderNLS
		constexpr auto bits = 0x30; // int
	}

	namespace n_MainMenu_InClan_List_Home { // : MainMenu_InClan_List
		constexpr auto ClanName = 0x30; // TextMeshProUGUI
		constexpr auto ClanTag = 0x38; // TextMeshProUGUI
		constexpr auto ClanColor = 0x40; // TextMeshProUGUI
		constexpr auto ClanExp = 0x48; // TextMeshProUGUI
		constexpr auto ClanPhoto = 0x50; // RawImage
		constexpr auto OwnerActions = 0x58; // GameObject
		constexpr auto ClanPhotoLoading = 0x60; // GameObject
		constexpr auto ColorPicker = 0x68; // CUIColorPicker
		constexpr auto ColorPickerRoot = 0x70; // GameObject
	}

	namespace n_PKCS12 { // : ICloneable
		constexpr auto _password = 0x10; // byte[]
		constexpr auto _keyBags = 0x18; // ArrayList
		constexpr auto _secretBags = 0x20; // ArrayList
		constexpr auto _certs = 0x28; // X509CertificateCollection
		constexpr auto _keyBagsChanged = 0x30; // bool
		constexpr auto _secretBagsChanged = 0x31; // bool
		constexpr auto _certsChanged = 0x32; // bool
		constexpr auto _iterations = 0x34; // int
		constexpr auto _safeBags = 0x38; // ArrayList
		constexpr auto _rng = 0x40; // RandomNumberGenerator
	}

	namespace n_GraphicRevertedSelection { // : MonoBehaviour
		constexpr auto SelectedGameObject = 0x18; // GameObject
		constexpr auto mCanBeSelected = 0x20; // bool
		constexpr auto (IsSelected)k__BackingField = 0x21; // bool
		constexpr auto OnSelected = 0x28; // UnityEvent
		constexpr auto OnDeselected = 0x30; // UnityEvent
	}

	namespace n_MemberPrimitiveTyped {
		constexpr auto primitiveTypeEnum = 0x10; // InternalPrimitiveTypeE
		constexpr auto value = 0x18; // object
	}

	namespace n_MinimapMapBaker { // : MonoBehaviour
		constexpr auto MiniMapTexture = 0x18; // Texture2D
		constexpr auto MainmapTexture = 0x20; // Texture2D
	}

	namespace n_ForwardRendererData { // : ScriptableRendererData
		constexpr auto postProcessData = 0x30; // PostProcessData
		constexpr auto shaders = 0x38; // ForwardRendererData.ShaderResources
		constexpr auto m_OpaqueLayerMask = 0x40; // LayerMask
		constexpr auto m_TransparentLayerMask = 0x44; // LayerMask
		constexpr auto m_DefaultStencilState = 0x48; // StencilStateData
		constexpr auto m_ShadowTransparentReceive = 0x50; // bool
	}

	namespace n_FocusController {
		constexpr auto (focusRing)k__BackingField = 0x10; // IFocusRing
		constexpr auto m_FocusedElements = 0x18; // List(FocusController.FocusedElement)
		constexpr auto (imguiKeyboardControl)k__BackingField = 0x20; // int
	}

	namespace n_XmlTextReaderImpl.DtdParserProxy { // : IDtdParserAdapterV1
		constexpr auto reader = 0x10; // XmlTextReaderImpl
	}

	namespace n_MonoTypeInfo {
		constexpr auto full_name = 0x10; // string
		constexpr auto default_ctor = 0x18; // MonoCMethod
	}

	namespace n_THPArmor { // : MonoBehaviour
		constexpr auto isActive = 0x18; // bool
		constexpr auto hasColliders = 0x19; // bool
		constexpr auto ID = 0x1a; // byte
		constexpr auto Durability = 0x1c; // float
		constexpr auto THP = 0x20; // THPController
		constexpr auto Item = 0x28; // Wearable
		constexpr auto Part = 0x30; // PlayerBody
		constexpr auto Colliders = 0x38; // BoxCollider[]
		constexpr auto Visual = 0x40; // Renderer
		constexpr auto ColliderMatrixes = 0x48; // Matrix4x4[]
		constexpr auto LastFrameMatrixUpdated = 0x50; // int
		constexpr auto thisTransform = 0x58; // Transform
		constexpr auto centers = 0x60; // Vector3[]
		constexpr auto sizes = 0x68; // Vector3[]
		constexpr auto mIsActive = 0x70; // bool
	}

	namespace n_CapturePass { // : ScriptableRenderPass
		constexpr auto m_CameraColorHandle = 0x68; // RenderTargetHandle
	}

	namespace n_AlignedLinkArray { // : IList(Link)
		constexpr auto _native = 0x10; // IntPtr
	}

	namespace n_ParseError { // : Exception
		constexpr auto Position = 0x88; // int
	}

	namespace n_X509Extension { // : AsnEncodedData
		constexpr auto extnOid = 0x10; // string
		constexpr auto extnCritical = 0x18; // bool
		constexpr auto extnValue = 0x20; // ASN1
		constexpr auto _critical = 0x20; // bool
	}

	namespace n_FileBasedResourceGroveler { // : IResourceGroveler
		constexpr auto _mediator = 0x10; // ResourceManager.ResourceManagerMediator
	}

	namespace n_ConsoleCancelEventArgs { // : EventArgs
		constexpr auto _type = 0x10; // ConsoleSpecialKey
		constexpr auto _cancel = 0x14; // bool
	}

	namespace n_TraceLoggingMetadataCollector.Impl {
		constexpr auto fields = 0x10; // List(FieldMetadata)
		constexpr auto scratchSize = 0x18; // short
		constexpr auto dataCount = 0x1a; // sbyte
		constexpr auto pinCount = 0x1b; // sbyte
		constexpr auto bufferNesting = 0x1c; // int
		constexpr auto scalar = 0x20; // bool
	}

	namespace n_RPCPackage {
		constexpr auto (TargetNetworkObject)k__BackingField = 0x10; // NetView
		constexpr auto Package = 0x18; // NetSerializer
		constexpr auto (Flag_sent)k__BackingField = 0x20; // bool
		constexpr auto (ExpectedWritePosition)k__BackingField = 0x24; // int
	}

	namespace n_NumericExpr { // : ValueQuery
		constexpr auto op = 0x18; // Operator.Op
		constexpr auto opnd1 = 0x20; // Query
		constexpr auto opnd2 = 0x28; // Query
	}

	namespace n_EventPayload { // : IDictionary(string, object)
		constexpr auto m_names = 0x10; // List(string)
		constexpr auto m_values = 0x18; // List(object)
	}

	namespace n_ScatterGatherBuffers {
		constexpr auto headChunk = 0x10; // ScatterGatherBuffers.MemoryChunk
		constexpr auto currentChunk = 0x18; // ScatterGatherBuffers.MemoryChunk
		constexpr auto nextChunkLength = 0x20; // int
		constexpr auto totalLength = 0x24; // int
		constexpr auto chunkCount = 0x28; // int
	}

	namespace n_AGround.RainVariations {
		constexpr auto LightRoof = 0x10; // AudioClip
		constexpr auto HeavyRoof = 0x18; // AudioClip
		constexpr auto Light = 0x20; // AudioClip
		constexpr auto Heavy = 0x28; // AudioClip
	}

	namespace n_TimerThread.TimerQueue { // : TimerThread.Queue
		constexpr auto m_Timers = 0x18; // TimerThread.TimerNode
	}

	namespace n_ScoreboardBehaviour { // : MonoBehaviour
		constexpr auto MyTeamParent = 0x18; // RectTransform
		constexpr auto EnemyTeamParent = 0x20; // RectTransform
		constexpr auto TeamAParent = 0x28; // RectTransform
		constexpr auto TeamBParent = 0x30; // RectTransform
		constexpr auto SquadPrefab = 0x38; // GameObject
		constexpr auto MemberPrefab = 0x40; // GameObject
		constexpr auto TeamAFlag = 0x48; // Image
		constexpr auto TeamBFlag = 0x50; // Image
		constexpr auto TeamAName = 0x58; // TextMeshProUGUI
		constexpr auto TeamBName = 0x60; // TextMeshProUGUI
		constexpr auto TeamACount = 0x68; // TextMeshProUGUI
		constexpr auto TeamBCount = 0x70; // TextMeshProUGUI
		constexpr auto TeamACanvas = 0x78; // Canvas
		constexpr auto TeamBCanvas = 0x80; // Canvas
		constexpr auto TeamARaycaster = 0x88; // GraphicRaycaster
		constexpr auto TeamBRaycaster = 0x90; // GraphicRaycaster
		constexpr auto VisibleMembers = 0x98; // List(ScoreboardMember)
		constexpr auto (TickIndex8)k__BackingField = 0xa0; // int
		constexpr auto mTeamAMemberPool = 0xa8; // UIPool(ScoreboardMember)
		constexpr auto mTeamBMemberPool = 0xb0; // UIPool(ScoreboardMember)
		constexpr auto mTeamASquads = 0xb8; // ScoreboardSquad[]
		constexpr auto mTeamBSquads = 0xc0; // ScoreboardSquad[]
		constexpr auto mCurrentTeam = 0xc8; // Team
		constexpr auto mShowTeams = 0xc9; // bool
		constexpr auto mLockedTeamACount = 0xcc; // int
		constexpr auto mLockedTeamBCount = 0xd0; // int
		constexpr auto mTeamACurrentVersion = 0xd4; // int
		constexpr auto mTeamBCurrentVersion = 0xd8; // int
		constexpr auto mTeamATargetVersion = 0xdc; // int
		constexpr auto mTeamBTargetVersion = 0xe0; // int
		constexpr auto mCanvas = 0xe8; // Canvas
	}

	namespace n_TMP_SubMeshUI { // : MaskableGraphic
		constexpr auto m_fontAsset = 0xc8; // TMP_FontAsset
		constexpr auto m_spriteAsset = 0xd0; // TMP_SpriteAsset
		constexpr auto m_material = 0xd8; // Material
		constexpr auto m_sharedMaterial = 0xe0; // Material
		constexpr auto m_fallbackMaterial = 0xe8; // Material
		constexpr auto m_fallbackSourceMaterial = 0xf0; // Material
		constexpr auto m_isDefaultMaterial = 0xf8; // bool
		constexpr auto m_padding = 0xfc; // float
		constexpr auto m_mesh = 0x100; // Mesh
		constexpr auto m_TextComponent = 0x108; // TextMeshProUGUI
		constexpr auto m_isRegisteredForEvents = 0x110; // bool
		constexpr auto m_materialDirty = 0x111; // bool
		constexpr auto m_materialReferenceIndex = 0x114; // int
		constexpr auto m_RootCanvasTransform = 0x118; // Transform
	}

	namespace n_XPathDocumentKindChildIterator { // : XPathDocumentBaseIterator
		constexpr auto typ = 0x28; // XPathNodeType
	}

	namespace n_VehicleVisualDamageManager { // : MonoBehaviour
		constexpr auto FireFx = 0x18; // GameObject
		constexpr auto SmokeFx = 0x20; // GameObject
		constexpr auto _engineBurning = 0x28; // VehicleAudioSource
		constexpr auto _engineWarning = 0x30; // VehicleAudioSource
		constexpr auto vehicle = 0x38; // VehicleInstance
	}

	namespace n_SimpleFilterSettings {
		constexpr auto enableSpawnVisualization = 0x10; // bool
		constexpr auto visualizeArea = 0x11; // bool
		constexpr auto visualiserResolution = 0x14; // int
		constexpr auto customHandleSize = 0x18; // float
		constexpr auto handlesType = 0x1c; // HandlesType
		constexpr auto handleResizingType = 0x20; // HandleResizingType
		constexpr auto colorHandlesType = 0x24; // ColorHandlesType
		constexpr auto alpha = 0x28; // float
		constexpr auto activeColor = 0x2c; // Color
		constexpr auto inactiveColor = 0x3c; // Color
	}

	namespace n_ValueFixup {
		constexpr auto valueFixupEnum = 0x10; // ValueFixupEnum
		constexpr auto arrayObj = 0x18; // Array
		constexpr auto indexMap = 0x20; // int[]
		constexpr auto header = 0x28; // object
		constexpr auto memberObject = 0x30; // object
		constexpr auto objectInfo = 0x38; // ReadObjectInfo
		constexpr auto memberName = 0x40; // string
	}

	namespace n_MainMenu_PlayingFriend.Server { // : IEquatable(MainMenu_PlayingFriend.Server)
		constexpr auto ServerName = 0x10; // string
		constexpr auto IPAddress = 0x18; // IPEndPoint
		constexpr auto Region = 0x20; // Region
		constexpr auto Map = 0x28; // string
		constexpr auto Gamemode = 0x30; // GameMode
		constexpr auto NumberOfPlayers = 0x34; // int
		constexpr auto MaxNumberOfPlayers = 0x38; // int
		constexpr auto TeamANation = 0x3c; // Nation
		constexpr auto TeamBNation = 0x3d; // Nation
		constexpr auto TeamAPoints = 0x40; // int
		constexpr auto TeamBPoints = 0x44; // int
		constexpr auto TimeInSecondsLeft = 0x48; // int
		constexpr auto Members = 0x50; // List(ulong)
	}

	namespace n_AesManaged { // : Aes
		constexpr auto m_rijndael = 0x48; // RijndaelManaged
	}

	namespace n_SafeSocketHandle { // : SafeHandleZeroOrMinusOneIsInvalid
		constexpr auto blocking_threads = 0x20; // List(Thread)
		constexpr auto threads_stacktraces = 0x28; // Dictionary(Thread, StackTrace)
		constexpr auto in_cleanup = 0x30; // bool
	}

	namespace n_NativePropertyAttribute { // : NativeMethodAttribute
		constexpr auto (TargetType)k__BackingField = 0x20; // TargetType
	}

	namespace n_Cookie {
		constexpr auto m_comment = 0x10; // string
		constexpr auto m_commentUri = 0x18; // Uri
		constexpr auto m_cookieVariant = 0x20; // CookieVariant
		constexpr auto m_discard = 0x24; // bool
		constexpr auto m_domain = 0x28; // string
		constexpr auto m_domain_implicit = 0x30; // bool
		constexpr auto m_expires = 0x38; // DateTime
		constexpr auto m_name = 0x40; // string
		constexpr auto m_path = 0x48; // string
		constexpr auto m_path_implicit = 0x50; // bool
		constexpr auto m_port = 0x58; // string
		constexpr auto m_port_implicit = 0x60; // bool
		constexpr auto m_port_list = 0x68; // int[]
		constexpr auto m_secure = 0x70; // bool
		constexpr auto m_httpOnly = 0x71; // bool
		constexpr auto m_timeStamp = 0x78; // DateTime
		constexpr auto m_value = 0x80; // string
		constexpr auto m_version = 0x88; // int
		constexpr auto m_domainKey = 0x90; // string
		constexpr auto IsQuotedVersion = 0x98; // bool
		constexpr auto IsQuotedDomain = 0x99; // bool
	}

	namespace n_LoadoutScreenBehaviour { // : MonoBehaviour
		constexpr auto awakeCalled = 0x18; // bool
		constexpr auto LoadoutCamera = 0x20; // Camera
		constexpr auto ContentParent = 0x28; // Transform
		constexpr auto Title = 0x30; // TextMeshProUGUI
		constexpr auto KillCount = 0x38; // TextMeshProUGUI
		constexpr auto AttachmentManager = 0x40; // LoadoutAttachmentManager
		constexpr auto StatsManager = 0x48; // LoadoutWeaponStatsManager
		constexpr auto ToolSelection = 0x50; // LoadoutToolSelection
		constexpr auto TableRange = 0x58; // WeaponRangeTable
		constexpr auto Points = 0x60; // GameObject
		constexpr auto AttachmentList = 0x68; // GameObject
		constexpr auto WeaponStats = 0x70; // GameObject
		constexpr auto ShootingHelper = 0x78; // GameObject
		constexpr auto primarySelected = 0x80; // GameObject
		constexpr auto secondarySelected = 0x88; // GameObject
		constexpr auto firstAidSelected = 0x90; // GameObject
		constexpr auto toolASelected = 0x98; // GameObject
		constexpr auto toolBSelected = 0xa0; // GameObject
		constexpr auto throwableSelected = 0xa8; // GameObject
		constexpr auto primaryNew = 0xb0; // GameObject
		constexpr auto secondaryNew = 0xb8; // GameObject
		constexpr auto firstAidNew = 0xc0; // GameObject
		constexpr auto toolANew = 0xc8; // GameObject
		constexpr auto toolBNew = 0xd0; // GameObject
		constexpr auto throwableNew = 0xd8; // GameObject
		constexpr auto currentIndex = 0xe0; // LoadoutIndex
		constexpr auto eulars = 0xe4; // Vector3
		constexpr auto dragStartMouse = 0xf0; // Vector2Int
		constexpr auto lastNation = 0xf8; // Nation
		constexpr auto lastRole = 0xf9; // Role
		constexpr auto AspectRatioAreas = 0x100; // Vector2[]
	}

	namespace n_Dispatcher { // : IDisposable
		constexpr auto _native = 0x10; // IntPtr
		constexpr auto _worldRefs = 0x18; // List(CollisionWorld)
		constexpr auto _worldDeferredCleanup = 0x20; // bool
	}

	namespace n_IconsUI.Map {
		constexpr auto TeamMate = 0x10; // Texture2D
		constexpr auto SquadMate = 0x18; // Texture2D
		constexpr auto DownMate = 0x20; // Texture2D
	}

	namespace n_TriangleShape { // : PolyhedralConvexShape
		constexpr auto _vertices = 0x30; // Vector3Array
	}

	namespace n_AsyncMethodBuilderCore.ContinuationWrapper {
		constexpr auto m_continuation = 0x10; // Action
		constexpr auto m_invokeAction = 0x18; // Action
		constexpr auto m_innerTask = 0x20; // Task
	}

	namespace n_FullScreenQuad { // : ScriptableRendererFeature
		constexpr auto m_Settings = 0x20; // FullScreenQuad.FullScreenQuadSettings
		constexpr auto m_RenderQuadPass = 0x30; // FullScreenQuadPass
	}

	namespace n_WebAsyncResult { // : SimpleAsyncResult
		constexpr auto nbytes = 0x50; // int
		constexpr auto innerAsyncResult = 0x58; // IAsyncResult
		constexpr auto response = 0x60; // HttpWebResponse
		constexpr auto writeStream = 0x68; // Stream
		constexpr auto buffer = 0x70; // byte[]
		constexpr auto offset = 0x78; // int
		constexpr auto size = 0x7c; // int
		constexpr auto EndCalled = 0x80; // bool
		constexpr auto AsyncWriteAll = 0x81; // bool
		constexpr auto AsyncObject = 0x88; // HttpWebRequest
	}

	namespace n_LoadingScreenManager { // : MonoBehaviour
		constexpr auto Camera = 0x18; // Camera
		constexpr auto Bar = 0x20; // Transform
		constexpr auto Label = 0x28; // TextMeshProUGUI
		constexpr auto QueueLabel = 0x30; // TextMeshProUGUI
		constexpr auto Gamemods = 0x38; // List(CanvasGroup)
		constexpr auto target = 0x40; // int
		constexpr auto lastValue = 0x44; // float
	}

	namespace n_EncoderFallback {
		constexpr auto bIsMicrosoftBestFitFallback = 0x10; // bool
	}

	namespace n_GameScreen_Object { // : MonoBehaviour
		constexpr auto VehicleCondition = 0x18; // GameScreen_Object.VehicleState
		constexpr auto PlayerCondition = 0x1c; // GameScreen_Object.PlayerState
		constexpr auto GameModeCondition = 0x20; // GameScreen_Object.GamemodeState
		constexpr auto isVisible = 0x24; // bool
	}

	namespace n_ACanted { // : ScriptableObject
		constexpr auto ID = 0x18; // int
		constexpr auto InstanceID = 0x1c; // int
		constexpr auto PrefabLocals = 0x20; // PositionQuaternationScale
		constexpr auto PrefabAsset = 0x48; // GameObject
		constexpr auto Visual = 0x50; // Sprite
		constexpr auto LanguageId = 0x58; // int
		constexpr auto DefaultKill = 0x5c; // int
		constexpr auto ZoomLevel = 0x60; // float
		constexpr auto Settings = 0x68; // AttachmentSettings
		constexpr auto SinusRecoil = 0x70; // float
		constexpr auto EulRecoil = 0x74; // float
		constexpr auto CamShakeRecoil = 0x78; // float
	}

	namespace n_GameScreen_PingingItem { // : MonoBehaviour
		constexpr auto Label = 0x18; // CanvasGroup
		constexpr auto rt = 0x20; // RectTransform
		constexpr auto gr = 0x28; // GraphicReverter
	}

	namespace n_SpawnVisualizerPixel {
		constexpr auto position = 0x10; // Vector3
		constexpr auto viability = 0x1c; // float
		constexpr auto alpha = 0x20; // float
	}

	namespace n_WeaponRangeTable { // : MonoBehaviour
		constexpr auto Output = 0x18; // RawImage
		constexpr auto ItemPrefab = 0x20; // GameObject
		constexpr auto mPool = 0x28; // UIPool(TextMeshProUGUI)
		constexpr auto mAcitve = 0x30; // List(TextMeshProUGUI)
		constexpr auto mLastWeapon = 0x38; // AWeapon
		constexpr auto mLastOriginalVelocity = 0x40; // float
		constexpr auto mLastOriginalGravity = 0x44; // float
		constexpr auto mLastOriginalDrag = 0x48; // float
		constexpr auto mLastNewVelocity = 0x4c; // float
		constexpr auto mLastNewGravity = 0x50; // float
		constexpr auto mLastNewDrag = 0x54; // float
	}

	namespace n_WeaponStats {
		constexpr auto Accuracy = 0x10; // WeaponAccuracyStats
		constexpr auto Recoil = 0x18; // WeaponRecoil
		constexpr auto RecoilPaterns = 0x20; // WeaponRecoilPaterns
		constexpr auto RecoilType = 0x28; // RecoilTypes
		constexpr auto AdsTime = 0x2c; // float
		constexpr auto PlayerRunningSpeed = 0x30; // float
		constexpr auto Weigth = 0x34; // float
		constexpr auto ReloadSpeed = 0x38; // float
		constexpr auto DrawSpeed = 0x3c; // float
		constexpr auto ZeroPer = 0x40; // float
		constexpr auto MaxZeroingRange = 0x44; // float
		constexpr auto RoundsPerMinute = 0x48; // int
		constexpr auto BurnDown = 0x50; // AnimationCurve
		constexpr auto FiringType = 0x58; // FiringTypes
		constexpr auto AllowedFirings = 0x60; // AllowedFiringTypes
		constexpr auto MuzzleScale = 0x68; // float
		constexpr auto MuzzleChance = 0x6c; // int
		constexpr auto isSuppressed = 0x70; // bool
		constexpr auto ShotSoundDistance = 0x74; // float
		constexpr auto BoltActionRifle = 0x78; // bool
		constexpr auto AutoBoltAction = 0x79; // bool
		constexpr auto BoltActionWhileAiming = 0x7a; // bool
		constexpr auto BoltActionSpeed = 0x7c; // float
	}

	namespace n_GamemodeBounds { // : MonoBehaviour
		constexpr auto Type = 0x18; // BoundType
		constexpr auto SafeZoneOf = 0x1c; // Team
		constexpr auto Points = 0x20; // List(Vector3)
		constexpr auto mMesh = 0x28; // Mesh
		constexpr auto mMeshRenderer = 0x30; // MeshRenderer
	}

}