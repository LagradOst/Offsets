namespace off {
	constexpr auto GNames = 0x6927e00;
	constexpr auto GObjects = 0x6623a18;
	constexpr auto GWorld = 0x6914c5f;
	constexpr auto ObjectsXorValue = 0x7a2f;

	namespace n_UCloudStorageBase {
		constexpr auto LocalCloudFiles = 0x40; // TArray<FString>
		constexpr auto bSuppressDelegateCalls = 0x50; // char : 1
	}

	namespace n_UAnimNotifyState_ParticleColliderTimed {
		constexpr auto Events = 0xb8; // TMap<FName, UImpactEffectConfig*>
	}

	namespace n_UClingComponent {
		constexpr auto OnStateChanged = 0x178; // FMulticastInlineDelegate
		constexpr auto ClingConfig = 0x188; // FClingConfig
		constexpr auto MoveTickData = 0x2f0; // FClingMoveTickData
		constexpr auto AttachedLocationType = 0x314; // EZombieAttachLocationType
		constexpr auto AttachToLocationType = 0x315; // EZombieAttachLocationType
		constexpr auto bIsSwiveling = 0x316; // bool
		constexpr auto bClingMoving = 0x317; // bool
		constexpr auto CurrentActiveMontage = 0x318; // UAnimMontage*
		constexpr auto PoleAttachedCollisionProfileName = 0x360; // FName
	}

	namespace n_UFloatingPawnMovement {
		constexpr auto MaxSpeed = 0x170; // float
		constexpr auto Acceleration = 0x174; // float
		constexpr auto Deceleration = 0x178; // float
		constexpr auto TurningBoost = 0x17c; // float
		constexpr auto bPositionCorrected = 0x180; // char : 1
	}

	namespace n_URoundAnalyticsComponent {
		constexpr auto LateJoinersAwaitingProfileLoad = 0x160; // TArray<TWeakObjectPtr<AGobiPlayerState>>
	}

	namespace n_ATraumaKitBase {
		constexpr auto SceneRoot = 0x2a0; // USceneComponent*
		constexpr auto StaticMeshComponent = 0x2a8; // UStaticMeshComponent*
		constexpr auto UseTriggerVolumeComponent = 0x2b0; // UBoxComponent*
		constexpr auto AnimContextLocatorComponent = 0x2b8; // UAnimContextLocatorComponent*
		constexpr auto PingableComponent = 0x2c0; // UPingableComponent*
		constexpr auto StaticMeshTemp1Component = 0x2c8; // UStaticMeshComponent*
		constexpr auto StaticMeshTemp2Component = 0x2d0; // UStaticMeshComponent*
		constexpr auto UsableComponent = 0x2d8; // UUsableComponent*
		constexpr auto UsableHighlightComponent = 0x2e0; // UUsableHighlightComponent*
		constexpr auto ItemAudioComponent = 0x2e8; // UItemAudioComponent*
		constexpr auto CostText = 0x2f0; // FText
		constexpr auto UsableCurrencyCostTextMsg = 0x308; // FText
		constexpr auto ChargeText = 0x320; // FText
		constexpr auto HeroCardCompareName = 0x338; // FName
		constexpr auto FreeChargesPerDifficulty = 0x340; // int32_t [0x6]
		constexpr auto CurrencyChargeCost = 0x358; // int32_t
		constexpr auto ChanceOfSpawning = 0x35c; // float
		constexpr auto HealthHealAmt = 0x360; // float
		constexpr auto TraumaHealAmt = 0x364; // float
		constexpr auto StrikesHealAmt = 0x368; // int32_t
		constexpr auto ApplyEffectsToTarget = 0x370; // TArray<UGameplayEffect*>
		constexpr auto bIsEnabled = 0x380; // bool
		constexpr auto CurrentChargeCnt = 0x384; // int32_t
	}

	namespace n_UNavigationSystemModuleConfig {
		constexpr auto bStrictlyStatic = 0x58; // char : 1
		constexpr auto bCreateOnClient = 0x58; // char : 1
		constexpr auto bAutoSpawnMissingNavData = 0x58; // char : 1
		constexpr auto bSpawnNavDataInNavBoundsLevel = 0x58; // char : 1
	}

	namespace n_UMovieScenePrimitiveMaterialSection {
		constexpr auto MaterialChannel = 0xe8; // FMovieSceneObjectPathChannel
	}

	namespace n_UAchievementsPanelUserWidget {
		constexpr auto CategoriesToText = 0x458; // TMap<EAchievementCategory, FText>
	}

	namespace n_ULootSpawnConfigAsset {
		constexpr auto AttachmentCountWeights = 0x38; // TArray<float>
		constexpr auto SpawnConfigs = 0x48; // TArray<FLootSpawnConfig>
	}

	namespace n_AEffectActor {
		constexpr auto AkComponent = 0x2a0; // UAkComponent*
		constexpr auto Decals = 0x2a8; // TArray<FImpactDecalDefinition>
		constexpr auto BaseEmitters = 0x2b8; // TArray<UParticleSystem*>
		constexpr auto LifetimeMinMax = 0x2c8; // FVector2D
		constexpr auto EmitterFadeOutTime = 0x2d0; // float
		constexpr auto DestroyDelay = 0x2d4; // float
		constexpr auto AudioAOELoop = 0x2e0; // UAkAudioEvent*
		constexpr auto AudioAOELoopStop = 0x2e8; // UAkAudioEvent*
		constexpr auto AudioCheckRadius = 0x2f0; // float
		constexpr auto AudioCheckCountThreshold = 0x2f4; // int8_t
		constexpr auto ReplicatedEffectActorInfo = 0x32c; // FReplicatedEffectActorInfo
	}

	namespace n_UEnvQueryTest_WallCling_Dot {
		constexpr auto LineFrom = 0x208; // UEnvQueryContext*
		constexpr auto LineTo = 0x210; // UEnvQueryContext*
		constexpr auto TestMode = 0x218; // EEnvTestDot
		constexpr auto bAbsoluteValue = 0x219; // bool
	}

	namespace n_ALevelResetCoordinator {
		constexpr auto LevelsToReset = 0x2c0; // TArray<ULevelStreamingDynamic*>
	}

	namespace n_UInterpTrackInstParticleReplay {
		constexpr auto LastUpdatePosition = 0x30; // float
	}

	namespace n_UMatchmaking {
		constexpr auto GobiWebServices = 0x30; // UGobiWebServices*
		constexpr auto MatchmakingPoolManager = 0x38; // UMatchmakingPoolManager*
		constexpr auto OnlineSessions = 0x40; // UOnlineSessions*
		constexpr auto TimerConfigs = 0x60; // TArray<FTaskTimerConfig>
		constexpr auto GameServerAutoConnectTime = 0xa98; // double
		constexpr auto GameServerWaitForFirstPartySessionTime = 0xaa0; // double
		constexpr auto UIBuckets = 0xaa8; // TArray<FMatchmakingUIBucket>
		constexpr auto UIAtuinEnvironments = 0xab8; // TArray<FMatchmakingUIAtuinEnvironment>
		constexpr auto LocalUserSlots = 0xac8; // TArray<UMatchmakingLocalUserSlot*>
		constexpr auto WaitForJoinersToLeaveDuration = 0xcf0; // double
		constexpr auto PacketRelayGracePeriod = 0xdd0; // double
		constexpr auto StartupReconnectGracePeriod = 0xe08; // double
		constexpr auto ReconnectSettingsUpdateInterval = 0xe10; // double
		constexpr auto OnPoolJoined = 0xfe8; // FMulticastInlineDelegate
		constexpr auto OnPoolLeft = 0xff8; // FMulticastInlineDelegate
		constexpr auto OnPoolServerAllocated = 0x1008; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleAccelerationBase {
		constexpr auto bAlwaysInWorldSpace = 0x38; // char : 1
	}

	namespace n_UGameCoachListUserWidget {
		constexpr auto GameCoachWaypoints = 0x458; // TMap<TWeakObjectPtr<UGameCoachLesson>, AWaypoint*>
		constexpr auto NotificationLessons = 0x4a8; // TMap<UGameCoachLesson*, FLessonNotificationData>
	}

	namespace n_USpectatorPawnMovement {
		constexpr auto bIgnoreTimeDilation = 0x188; // char : 1
	}

	namespace n_UEnvQueryNode {
		constexpr auto VerNum = 0x30; // int32_t
	}

	namespace n_UCanvasPanelSlot {
		constexpr auto LayoutData = 0x40; // FAnchorData
		constexpr auto bAutoSize = 0x68; // bool
		constexpr auto bAutoWidth = 0x69; // bool
		constexpr auto bAutoHeight = 0x6a; // bool
		constexpr auto ZOrder = 0x6c; // int32_t
	}

	namespace n_AC4Placement {
		constexpr auto StaticMeshComponent = 0x2a0; // UStaticMeshComponent*
		constexpr auto UsableComponent = 0x2a8; // UUsableComponent*
		constexpr auto UsableTriggerComponent = 0x2b0; // UBoxComponent*
		constexpr auto AkComponent = 0x2b8; // UAkComponent*
		constexpr auto PointLightComponent = 0x2c0; // UPointLightComponent*
		constexpr auto GameCoachLessonsComponent = 0x2c8; // UGameCoachLessonsComponent*
		constexpr auto AlignComponent = 0x2d0; // USceneComponent*
		constexpr auto UseMontage3P = 0x2d8; // UAnimMontage*
		constexpr auto PlaceableMaterial = 0x2e0; // UMaterialInterface*
		constexpr auto C4PlacedMaterial = 0x2e8; // UMaterialInterface*
		constexpr auto AKEC4Activated = 0x2f0; // UAkAudioEvent*
		constexpr auto AKEC4ActiveChirp = 0x2f8; // UAkAudioEvent*
		constexpr auto PointLightMaxIntensity = 0x300; // float
		constexpr auto PointLightMinIntensity = 0x304; // float
		constexpr auto FirstFlashChirpDelay = 0x308; // float
		constexpr auto InitialFlashChirpDelay = 0x30c; // float
		constexpr auto InitialFlashChirpCountMax = 0x310; // int32_t
		constexpr auto FlashChirpDelay = 0x314; // float
	}

	namespace n_UParticleModuleVectorFieldRotationRate {
		constexpr auto RotationRate = 0x38; // FVector
	}

	namespace n_UParticleModuleLocationWorldOffset_Seeded {
		constexpr auto RandomSeedInfo = 0x88; // FParticleRandomSeedInfo
	}

	namespace n_UCampaignRunData {
		constexpr auto LastRoundResult = 0x30; // ECampaignRoundResult
		constexpr auto bNeedsCardDraw = 0x34; // bool
		constexpr auto GameplayCardManagerSeed = 0x38; // uint64_t
		constexpr auto StaticDirectorCards = 0x40; // TArray<FActiveGameplayCard>
		constexpr auto DynamicDirectorCards = 0x50; // TArray<FActiveGameplayCard>
		constexpr auto CampaignPlayerSlotData = 0x60; // TArray<FCampaignPlayerSlotData>
	}

	namespace n_UWander_Special_SpawnPlacementCondition_C {
		constexpr auto InViewOfSafeRoom = 0x78; // FAISpawnEval_InViewOfSafeRoom
	}

	namespace n_UMaterialExpressionConstant3Vector {
		constexpr auto Constant = 0x48; // FLinearColor
	}

	namespace n_UComboButtonWidgetStyle {
		constexpr auto ComboButtonStyle = 0x38; // FComboButtonStyle
	}

	namespace n_UGlobalAnalyticsManager {
		constexpr auto MatchmakingAnalytics = 0x90; // UMatchmakingAnalytics*
		constexpr auto PcHwAnalyticsComponent = 0x98; // UPcHwAnalytics*
		constexpr auto ProfileDeltaAnalytics = 0xa0; // UProfileDeltaAnalytics*
		constexpr auto SurveyPopup = 0xa8; // USurveyPopup*
	}

	namespace n_UNiagaraDataInterfaceColorCurve {
		constexpr auto RedCurve = 0x60; // FRichCurve
		constexpr auto GreenCurve = 0xe0; // FRichCurve
		constexpr auto BlueCurve = 0x160; // FRichCurve
		constexpr auto AlphaCurve = 0x1e0; // FRichCurve
	}

	namespace n_UAnimEvalSet_FallOverStart_C {
		constexpr auto RandomChance = 0x1b8; // FGameplayEval_RandomChance
	}

	namespace n_UHealthBarComponent {
		constexpr auto bEnabled = 0xf8; // bool
		constexpr auto DisplayName = 0x100; // FText
		constexpr auto bEnableHealthbarOnlyForTaggedLocalPlayer = 0x118; // bool
		constexpr auto bDisplayHealthbarWhenTeammatesDoDamage = 0x119; // bool
		constexpr auto ClearOwnerTime = 0x11c; // float
	}

	namespace n_UPlayerAnalyticsSettings {
		constexpr auto PreviouslySentEntitlements = 0x98; // TArray<FString>
	}

	namespace n_USubmixEffectSubmixEQPreset {
		constexpr auto Settings = 0x80; // FSubmixEffectSubmixEQSettings
	}

	namespace n_UPlayerInput {
		constexpr auto DebugExecBindings = 0x128; // TArray<FKeyBind>
		constexpr auto InvertedAxis = 0x168; // TArray<FName>
	}

	namespace n_UCompressedImageSequenceProtocol {
		constexpr auto CompressionQuality = 0xe0; // int32_t
	}

	namespace n_UParticleModuleSubUVMovie {
		constexpr auto bUseEmitterTime = 0x78; // char : 1
		constexpr auto FrameRate = 0x80; // FRawDistributionFloat
		constexpr auto StartingFrame = 0xb0; // int32_t
	}

	namespace n_UGameplayTagsDeveloperSettings {
		constexpr auto DeveloperConfigName = 0x30; // FString
	}

	namespace n_UCameraModifier_DamageScreenEffect {
		constexpr auto DamageThresholds = 0x630; // TArray<FDamageThreshold>
	}

	namespace n_UApplyGameModeTagMod {
		constexpr auto TagsToApply = 0xd0; // FGameplayTagContainer
	}

	namespace n_UEnvQueryGenerator_Composite {
		constexpr auto Generators = 0x58; // TArray<UEnvQueryGenerator*>
		constexpr auto bAllowDifferentItemTypes = 0x68; // char : 1
		constexpr auto bHasMatchingItemType = 0x68; // char : 1
		constexpr auto ForcedItemType = 0x70; // UEnvQueryItemType*
	}

	namespace n_UGameCoachPluginSettings {
		constexpr auto GameCoachClass = 0x40; // UGameCoach*
		constexpr auto TipLessons = 0x48; // TArray<UGameCoachLesson*>
		constexpr auto NumTipsPerLevel = 0x58; // int32_t
	}

	namespace n_UMaterialExpressionSpeedTree {
		constexpr auto GeometryInput = 0x48; // FExpressionInput
		constexpr auto WindInput = 0x5c; // FExpressionInput
		constexpr auto LODInput = 0x70; // FExpressionInput
		constexpr auto ExtraBendWS = 0x84; // FExpressionInput
		constexpr auto GeometryType = 0x98; // ESpeedTreeGeometryType
		constexpr auto WindType = 0x99; // ESpeedTreeWindType
		constexpr auto LODType = 0x9a; // ESpeedTreeLODType
		constexpr auto BillboardThreshold = 0x9c; // float
		constexpr auto bAccurateWindVelocities = 0xa0; // bool
	}

	namespace n_AAkReverbVolume {
		constexpr auto bEnabled = 0x318; // char : 1
		constexpr auto AuxBus = 0x320; // UAkAuxBus*
		constexpr auto AuxBusName = 0x328; // FString
		constexpr auto SendLevel = 0x338; // float
		constexpr auto FadeRate = 0x33c; // float
		constexpr auto Priority = 0x340; // float
		constexpr auto LateReverbComponent = 0x348; // UAkLateReverbComponent*
	}

	namespace n_ULevelStreamingMod {
		constexpr auto LevelStreamingKeyToAdd = 0xd0; // FName
	}

	namespace n_AWaterVolume {
		constexpr auto Characters = 0x2f8; // TArray<AGobiCharacter*>
		constexpr auto Definition = 0x3a8; // UWaterVolumeDef*
		constexpr auto Surface = 0x3b0; // UWaterSurface*
		constexpr auto bSurfaceHeightModifiable = 0x410; // bool
		constexpr auto WaterSurfaceZ = 0x414; // float
	}

	namespace n_UNavMovementComponent {
		constexpr auto NavAgentProps = 0x128; // FNavAgentProperties
		constexpr auto FixedPathBrakingDistance = 0x158; // float
		constexpr auto bUpdateNavAgentWithOwnersCollision = 0x15c; // char : 1
		constexpr auto bUseAccelerationForPaths = 0x15c; // char : 1
		constexpr auto bUseFixedBrakingDistanceForPaths = 0x15c; // char : 1
		constexpr auto MovementState = 0x15d; // FMovementProperties
		constexpr auto PathFollowingComp = 0x160; // UObject*
	}

	namespace n_UParticleModuleLifetime {
		constexpr auto Lifetime = 0x38; // FRawDistributionFloat
	}

	namespace n_UInAppPurchaseRestoreCallbackProxy2 {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UExponentialHeightFogComponent {
		constexpr auto FogDensity = 0x230; // float
		constexpr auto FogHeightFalloff = 0x234; // float
		constexpr auto SecondFogData = 0x238; // FExponentialHeightFogData
		constexpr auto FogInscatteringColor = 0x244; // FLinearColor
		constexpr auto InscatteringColorCubemap = 0x258; // UTextureCube*
		constexpr auto InscatteringColorCubemapAngle = 0x260; // float
		constexpr auto InscatteringTextureTint = 0x264; // FLinearColor
		constexpr auto FullyDirectionalInscatteringColorDistance = 0x274; // float
		constexpr auto NonDirectionalInscatteringColorDistance = 0x278; // float
		constexpr auto DirectionalInscatteringExponent = 0x27c; // float
		constexpr auto DirectionalInscatteringStartDistance = 0x280; // float
		constexpr auto DirectionalInscatteringColor = 0x284; // FLinearColor
		constexpr auto FogMaxOpacity = 0x294; // float
		constexpr auto StartDistance = 0x298; // float
		constexpr auto FogCutoffDistance = 0x29c; // float
		constexpr auto bEnableVolumetricFog = 0x2a0; // bool
		constexpr auto VolumetricFogScatteringDistribution = 0x2a4; // float
		constexpr auto VolumetricFogAlbedo = 0x2a8; // FColor
		constexpr auto VolumetricFogEmissive = 0x2ac; // FLinearColor
		constexpr auto VolumetricFogExtinctionScale = 0x2bc; // float
		constexpr auto VolumetricFogDistance = 0x2c0; // float
		constexpr auto VolumetricFogStaticLightingScatteringIntensity = 0x2c4; // float
		constexpr auto bOverrideLightColorsWithFogInscatteringColors = 0x2c8; // bool
	}

	namespace n_UInstantInventoryUpgradeMod {
		constexpr auto TagQuery = 0xd0; // FGameplayTagQuery
	}

	namespace n_ULegalScreen_WBP_C {
		constexpr auto UberGraphFrame = 0x558; // FPointerToUberGraphFrame
		constexpr auto EpilepsyWarningFadeOut = 0x560; // UWidgetAnimation*
		constexpr auto EpilepsyWarningDelay10s = 0x568; // UWidgetAnimation*
		constexpr auto LegalFadeOut = 0x570; // UWidgetAnimation*
		constexpr auto LegalFadeIn = 0x578; // UWidgetAnimation*
		constexpr auto LogoFadeOut = 0x580; // UWidgetAnimation*
		constexpr auto LogoFadeIn = 0x588; // UWidgetAnimation*
		constexpr auto LegalPanel = 0x590; // UVerticalBox*
		constexpr auto ShaderBuildProgress_WBP = 0x598; // UShaderBuildProgress_WBP_C*
		constexpr auto OnAnimationsFinished = 0x5a0; // FMulticastInlineDelegate
		constexpr auto bWaitOnAssets = 0x5b0; // bool
		constexpr auto bShaderCompilationEnabled = 0x5b1; // bool
		constexpr auto bSkipLegalScreen = 0x5b2; // bool
	}

	namespace n_UShrubEmitterNode {
		constexpr auto ShrubInfo = 0x70; // FShrubEmitterInfo
	}

	namespace n_UNiagaraDataInterfaceVector2DCurve {
		constexpr auto XCurve = 0x60; // FRichCurve
		constexpr auto YCurve = 0xe0; // FRichCurve
	}

	namespace n_UFixedFrameRateCustomTimeStep {
		constexpr auto FixedFrameRate = 0x30; // FFrameRate
	}

	namespace n_UAISenseConfig_Blueprint {
		constexpr auto Implementation = 0x50; // UAISense_Blueprint*
	}

	namespace n_UPawnAction_Move {
		constexpr auto GoalActor = 0xa0; // AActor*
		constexpr auto GoalLocation = 0xa8; // FVector
		constexpr auto AcceptableRadius = 0xb4; // float
		constexpr auto FilterClass = 0xb8; // UNavigationQueryFilter*
		constexpr auto bAllowStrafe = 0xc0; // char : 1
		constexpr auto bFinishOnOverlap = 0xc0; // char : 1
		constexpr auto bUsePathfinding = 0xc0; // char : 1
		constexpr auto bAllowPartialPath = 0xc0; // char : 1
		constexpr auto bProjectGoalToNavigation = 0xc0; // char : 1
		constexpr auto bUpdatePathToGoal = 0xc0; // char : 1
		constexpr auto bAbortChildActionOnPathChange = 0xc0; // char : 1
	}

	namespace n_UItemFilterUserWidget {
		constexpr auto OnFilterChanged = 0x458; // FMulticastInlineDelegate
		constexpr auto Filters = 0x468; // TArray<EItemFilter>
		constexpr auto DefaultFilter = 0x478; // EItemFilter
	}

	namespace n_UMovieSceneEventTrack {
		constexpr auto bFireEventsWhenForwards = 0x60; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x60; // char : 1
		constexpr auto EventPosition = 0x64; // EFireEventsAtPosition
		constexpr auto EventReceivers = 0x68; // TArray<FMovieSceneObjectBindingID>
		constexpr auto Sections = 0x78; // TArray<UMovieSceneSection*>
	}

	namespace n_UOnSaferoomStateChangeTrigger {
		constexpr auto TimerInterval = 0x58; // float
		constexpr auto InSaferoomDelay = 0x5c; // float
		constexpr auto InitialEndingSaferoomDelay = 0x60; // float
		constexpr auto SaferoonWaitingDelayMinMax = 0x64; // FVector2D
		constexpr auto InjuredChance = 0x6c; // float
		constexpr auto StartingSaferoom = 0x70; // TWeakObjectPtr<ASafeRoom>
	}

	namespace n_UProjectileImpactEmitterComponent {
		constexpr auto GameplayEffectEmitterComponentTag = 0xe8; // FName
		constexpr auto bEmitOnFirstImpactOnly = 0xf0; // bool
	}

	namespace n_UAIDataProvider_TuningData {
		constexpr auto ParamName = 0x30; // FName
		constexpr auto FloatValue = 0x38; // float
		constexpr auto IntValue = 0x3c; // int32_t
		constexpr auto BoolValue = 0x40; // bool
		constexpr auto TagsValue = 0x48; // FGameplayTagContainer
		constexpr auto TagQueryValue = 0x68; // FGameplayTagQuery
		constexpr auto UObjectValue = 0xb0; // UObject*
	}

	namespace n_UMaterialExpressionRayTracingQualitySwitch {
		constexpr auto Normal = 0x48; // FExpressionInput
		constexpr auto RayTraced = 0x5c; // FExpressionInput
	}

	namespace n_UAkWwiseTree {
		constexpr auto OnSelectionChanged = 0x148; // FMulticastInlineDelegate
		constexpr auto OnItemDragged = 0x158; // FMulticastInlineDelegate
	}

	namespace n_UCharacterMusicInfo {
		constexpr auto ClassFilter = 0x38; // AActor*
		constexpr auto CharacterMusicStart = 0x40; // UAkAudioEvent*
		constexpr auto CharacterMusicStop = 0x48; // UAkAudioEvent*
		constexpr auto MusicDelayDueToDeath = 0x50; // float
		constexpr auto DistanceRTPCName = 0x58; // FString
		constexpr auto SupportedCharacterEvents = 0x68; // EMusicEventType
		constexpr auto EngagedDistance = 0x6c; // float
		constexpr auto MaxDistance = 0x70; // float
		constexpr auto PassiveMusicState = 0x74; // FName
		constexpr auto DistantMusicState = 0x7c; // FName
		constexpr auto bWantsBeatSync = 0x84; // bool
		constexpr auto StateGroup = 0x88; // FName
		constexpr auto CharacterTag = 0x90; // FGameplayTag
		constexpr auto TagToStateMapping = 0x98; // TMap<FGameplayTag, FCharacterMusicStateConfig>
		constexpr auto ActiveCharacterMusicState = 0xf0; // FCharacterMusicStateConfig
		constexpr auto ClosestCharacter = 0x12c; // TWeakObjectPtr<AActor>
	}

	namespace n_UGameplayAction_BotAttack {
		constexpr auto DefaultAtkRange = 0x210; // float
		constexpr auto DefaultEnemyRadius = 0x214; // float
		constexpr auto EnemyContext = 0x218; // UAnimContext_Actor*
		constexpr auto FilterSet = 0x220; // UGameplayEvaluatorSet*
		constexpr auto CooldownEffectOnSecondaryAtk = 0x228; // UGameplayEffect*
		constexpr auto BotAtkSecondaryCooldownTag = 0x230; // FGameplayTag
	}

	namespace n_ABirdSite {
		constexpr auto PerchVisibility = 0x2a0; // int32_t
		constexpr auto bAllowHorizontalBirdMovement = 0x2c8; // bool
		constexpr auto bEnableTrigger = 0x2c9; // bool
		constexpr auto bTriggersAllBirdSites = 0x2ca; // bool
		constexpr auto ChanceToHorde = 0x2d0; // FGamePropertyFloat
		constexpr auto ChanceToAlert = 0x308; // FGamePropertyFloat
		constexpr auto bHordeRetriggerable = 0x340; // bool
		constexpr auto bAlertRetriggerable = 0x341; // bool
		constexpr auto TriggerOmenTags = 0x348; // FGameplayTagContainer
		constexpr auto HordeAlertDelay = 0x368; // float
		constexpr auto MinBirdsToHordeAndAlert = 0x36c; // int32_t
		constexpr auto TrackedCharactersUpdateRate = 0x370; // float
		constexpr auto CrouchedTriggerRadius = 0x374; // float
		constexpr auto TakeOffDistance = 0x378; // FVector2D
		constexpr auto TakeOffPitch = 0x380; // FVector2D
		constexpr auto TakeOffYaw = 0x388; // FVector2D
		constexpr auto BirdFacing = 0x390; // EBirdFacing
		constexpr auto bBirdsVisibleInInvalidCell = 0x391; // bool
		constexpr auto bSnapSplinePointsToGround = 0x392; // bool
		constexpr auto SnapSearchUp = 0x394; // float
		constexpr auto SnapSearchDown = 0x398; // float
		constexpr auto AlertsTriggerAll = 0x39c; // bool
		constexpr auto SplineComponent = 0x3a0; // USplineComponent*
		constexpr auto AkComponent = 0x3a8; // UAkComponent*
		constexpr auto PingableComponent = 0x3b0; // UPingableComponent*
		constexpr auto PingableVolume = 0x3b8; // UBoxComponent*
		constexpr auto HordeCue = 0x3c0; // FGameplayTag
		constexpr auto HordeCueDistance = 0x3c8; // FVector2D
		constexpr auto HordeCueHeight = 0x3d0; // FVector2D
		constexpr auto AKEIdleLoop = 0x3d8; // UAkAudioEvent*
		constexpr auto AKEIdleLoopStop = 0x3e0; // UAkAudioEvent*
		constexpr auto AKEFlyAway = 0x3e8; // UAkAudioEvent*
		constexpr auto MaxDistanceSurprised = 0x3f0; // float
		constexpr auto BirdSystem = 0x468; // ABirdSystem*
	}

	namespace n_UGameplayAction_BotIdle {
		constexpr auto FilterSet = 0x210; // UGameplayEvaluatorSet*
		constexpr auto MaxIdleTime = 0x218; // float
		constexpr auto MaxIdleTimeNoPlayers = 0x21c; // float
		constexpr auto bFocusWatch = 0x220; // bool
		constexpr auto FocusWatch = 0x224; // FFocusWatch
		constexpr auto TeammateObjectiveDistThreshold = 0x268; // float
		constexpr auto TeammateObjectiveUpdateFreq = 0x26c; // float
	}

	namespace n_UCheckBoxWidgetStyle {
		constexpr auto CheckBoxStyle = 0x38; // FCheckBoxStyle
	}

	namespace n_AAudioMaterialOverride {
		constexpr auto Priority = 0x318; // float
		constexpr auto Surface = 0x31c; // EPhysicalSurface
		constexpr auto SpecialSurface = 0x320; // FString
	}

	namespace n_UEnvQueryGenerator_NavmeshBordersCentroids {
		constexpr auto NavigationFilter = 0x58; // UNavigationQueryFilter*
		constexpr auto SearchRadius = 0x60; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0x98; // FAIDataProviderFloatValue
		constexpr auto bPlaceOnBorders = 0xd0; // bool
		constexpr auto bPlaceCentroids = 0xd1; // bool
		constexpr auto Querier = 0xd8; // UEnvQueryContext*
		constexpr auto bPlaceAtQuerierLocation = 0xe0; // bool
		constexpr auto GenerateAround = 0xe8; // UEnvQueryContext*
	}

	namespace n_UBTService_Hag {
		constexpr auto HagStateBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto PrevHagStateBBKey = 0xa0; // FBlackboardKeySelector
	}

	namespace n_UOmenConfigAsset {
		constexpr auto OmenQuery = 0x38; // FGameplayTagQuery
		constexpr auto Range = 0x80; // float
		constexpr auto HighlightChannel = 0x84; // EStencilChannel
		constexpr auto ScreenEffectTag = 0x88; // FGameplayTag
		constexpr auto ScreenEffectDuration = 0x90; // float
		constexpr auto ScreenEffectCooldown = 0x94; // float
		constexpr auto Dialogue = 0x98; // FDataTableRowHandle
		constexpr auto DialogueCooldown = 0xb8; // float
		constexpr auto Overrides = 0xc0; // TArray<FOmenConfig>
	}

	namespace n_UBrushStampIndicator {
		constexpr auto BrushRadius = 0x40; // float
		constexpr auto BrushFalloff = 0x44; // float
		constexpr auto BrushPosition = 0x48; // FVector
		constexpr auto BrushNormal = 0x54; // FVector
		constexpr auto bDrawIndicatorLines = 0x60; // bool
		constexpr auto bDrawRadiusCircle = 0x61; // bool
		constexpr auto bDrawFalloffCircle = 0x62; // bool
		constexpr auto SampleStepCount = 0x64; // int32_t
		constexpr auto LineColor = 0x68; // FLinearColor
		constexpr auto LineThickness = 0x78; // float
		constexpr auto bDepthTested = 0x7c; // bool
		constexpr auto bDrawSecondaryLines = 0x7d; // bool
		constexpr auto SecondaryLineThickness = 0x80; // float
		constexpr auto SecondaryLineColor = 0x84; // FLinearColor
		constexpr auto AttachedComponent = 0x98; // UPrimitiveComponent*
	}

	namespace n_UAnimEvalSet_Light_Damage_DeathReaction_C {
		constexpr auto DamageAmountComparison = 0xc0; // FGameplayEval_DamageAmount
		constexpr auto DamageAmountRange = 0x158; // FGameplayEval_DamageRange
		constexpr auto DamageType = 0x220; // FGameplayEval_DamageType
		constexpr auto DamageBone = 0x2e0; // FGameplayEval_DamageBone
		constexpr auto DistanceToDamageSource = 0x340; // FGameplayEval_Distance
		constexpr auto AvatarHealth = 0x410; // FGameplayEval_Health
		constexpr auto AvatarTags = 0x468; // FGameplayEval_GameplayTags
		constexpr auto AvatarSpeed = 0x500; // FGameplayEval_SpeedRange
	}

	namespace n_ULeaderboardScreen {
		constexpr auto ListItems = 0x598; // TArray<ULeaderboardListItem*>
	}

	namespace n_ASceneCapture2D {
		constexpr auto CaptureComponent2D = 0x2b0; // USceneCaptureComponent2D*
	}

	namespace n_UGameplayEffectEmitterComponent {
		constexpr auto bStartActive = 0xe8; // bool
		constexpr auto EffectContext = 0x100; // FGameplayEffectContext
		constexpr auto Config = 0x180; // FGameplayEffectsEmitterTestConfig
		constexpr auto AkComponent = 0x1d0; // UAkComponent*
		constexpr auto bUseShapeComponent = 0x1d8; // bool
		constexpr auto TickInterval = 0x1dc; // float
		constexpr auto CollisionSphere = 0x1e0; // FEffectEmitterSphere
		constexpr auto ShapeComponentTag = 0x1ec; // FName
		constexpr auto ShapeComponentGameplayTag = 0x1f4; // FGameplayTag
		constexpr auto EffectSourceLocationComponentTag = 0x1fc; // FGameplayTag
		constexpr auto bEmitOnlyOnce = 0x204; // bool
		constexpr auto bRemoveEffectOnEndOverlap = 0x205; // bool
		constexpr auto bRemoveEffectOnStop = 0x206; // bool
		constexpr auto bRemoveActiveEffectOnTestFail = 0x207; // bool
		constexpr auto bRefreshActiveEffectOnTestPass = 0x208; // bool
		constexpr auto bRequiresLineOfSight = 0x209; // bool
		constexpr auto bRequiresDotProductCheck = 0x20a; // bool
		constexpr auto MinTargetDotProduct = 0x20c; // float
		constexpr auto OverlapTagQuery = 0x210; // FGameplayTagQuery
		constexpr auto bIgnoreOwnerOverlaps = 0x258; // bool
		constexpr auto LineOfSightTargetComponentTag = 0x25c; // FName
		constexpr auto bUseTargetEyePosForLoS = 0x264; // bool
		constexpr auto TraceStartForwardOffset = 0x268; // float
		constexpr auto EffectClass = 0x2a8; // UGameplayEffect*
		constexpr auto OwnerEffectClass = 0x2b0; // UGameplayEffect*
		constexpr auto ParticleSet = 0x2c0; // FParticleSet
		constexpr auto StartAkEvent = 0x340; // UAkAudioEvent*
		constexpr auto StopAkEvent = 0x348; // UAkAudioEvent*
		constexpr auto ShapeComponent = 0x350; // UShapeComponent*
	}

	namespace n_UTRSPerfSubsystem {
		constexpr auto PerfOverall = 0x40; // UTRSPerfOverall*
	}

	namespace n_UAISenseConfig_Damage {
		constexpr auto Implementation = 0x50; // UAISense_Damage*
	}

	namespace n_UAkLinuxInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettingsWithSampleRate
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xc0; // FAkAdvancedInitializationSettingsWithMultiCoreRendering
		constexpr auto TRSSettings = 0xf8; // FAkTRSPerPlatformSettings
	}

	namespace n_UDatasmithCineCameraComponentTemplate {
		constexpr auto FilmbackSettings = 0x38; // FDatasmithCameraFilmbackSettingsTemplate
		constexpr auto LensSettings = 0x40; // FDatasmithCameraLensSettingsTemplate
		constexpr auto FocusSettings = 0x44; // FDatasmithCameraFocusSettingsTemplate
		constexpr auto CurrentFocalLength = 0x4c; // float
		constexpr auto CurrentAperture = 0x50; // float
		constexpr auto PostProcessSettings = 0x60; // FDatasmithPostProcessSettingsTemplate
	}

	namespace n_ATriggerBase {
		constexpr auto CollisionComponent = 0x2a0; // UShapeComponent*
	}

	namespace n_UAnimNotify_SharedSoundEnemy {
		constexpr auto EnemySound = 0x50; // ESharedEnemyAnimSound
		constexpr auto ChanceToPlayIfLocal = 0x54; // float
		constexpr auto ChanceToPlayIfRemote = 0x58; // float
	}

	namespace n_USplineMeshMergeComponent {
		constexpr auto StaticMeshToReplaceTag = 0xe8; // FName
	}

	namespace n_UNavLocationComponent {
		constexpr auto NavmeshQueryExtent = 0x4b8; // FVector
	}

	namespace n_UMovieSceneBuiltInEasingFunction {
		constexpr auto Type = 0x38; // EMovieSceneBuiltInEasing
	}

	namespace n_UDatasmithDeltaGenSceneImportData {
		constexpr auto bMergeNodes = 0x50; // bool
		constexpr auto bOptimizeDuplicatedNodes = 0x51; // bool
		constexpr auto bRemoveInvisibleNodes = 0x52; // bool
		constexpr auto bSimplifyNodeHierarchy = 0x53; // bool
		constexpr auto bImportVar = 0x54; // bool
		constexpr auto VarPath = 0x58; // FString
		constexpr auto bImportPos = 0x68; // bool
		constexpr auto PosPath = 0x70; // FString
		constexpr auto bImportTml = 0x80; // bool
		constexpr auto TmlPath = 0x88; // FString
	}

	namespace n_UParticleModuleColor_Seeded {
		constexpr auto RandomSeedInfo = 0xb8; // FParticleRandomSeedInfo
	}

	namespace n_UFacialAnimationPluginSettings {
		constexpr auto LipsyncCommandlineTool = 0x40; // FFilePath
		constexpr auto VoiceAudioFolder = 0x50; // FDirectoryPath
		constexpr auto LocalizationTable = 0x60; // TSoftObjectPtr<UDataTable>
	}

	namespace n_ALevelVisibilityVolume {
		constexpr auto bAddNewLevelsAsVisibile = 0x370; // bool
		constexpr auto VisibleLevels = 0x378; // TMap<FName, bool>
		constexpr auto bAffectsSectorsAndPortalsTypes = 0x3c8; // bool
	}

	namespace n_UGameplayEvalSet_LadderIsReady_C {
		constexpr auto IsLadder = 0x78; // FGameplayEval_NavArea
		constexpr auto IsNavLinkNext = 0xe8; // FGameplayEval_IsNavLinkNext
		constexpr auto IsAvatarFacing = 0x130; // FGameplayEval_IsAvatarFacing
		constexpr auto IsAtLadder = 0x188; // FGameplayEval_Distance
		constexpr auto LadderIsReady = 0x258; // FGameplayEval_LadderIsReady
	}

	namespace n_UEnvQueryGenerator_Perception {
		constexpr auto SearchCenter = 0x58; // UEnvQueryContext*
	}

	namespace n_UFTUESettings {
		constexpr auto OnTutorialChanged = 0x88; // FMulticastInlineDelegate
		constexpr auto TutorialPopups = 0xa8; // TArray<FName>
		constexpr auto BakedMessageSlugs = 0xb8; // TArray<FName>
		constexpr auto DynamicMessageSlugs = 0xc8; // TArray<FName>
		constexpr auto bHasAcceptedEULA = 0xd8; // bool
		constexpr auto bHasSetStartupOptions = 0xd9; // bool
		constexpr auto bHasSeenVoiceRecordingWarning = 0xda; // bool
		constexpr auto bHasCompletedTutorialLevels = 0xdb; // bool
		constexpr auto bHasSeenCrossplayWarning = 0xdc; // bool
		constexpr auto bHasSeenHardwareToast = 0xdd; // bool
		constexpr auto bHasSeenPvPDisconnectWarning = 0xde; // bool
		constexpr auto CompletedTutorials = 0xdf; // char [0x19]
	}

	namespace n_UShaderPlatformQualitySettings {
		constexpr auto QualityOverrides = 0x30; // FMaterialQualityOverrides [0x3]
	}

	namespace n_UMaterialExpressionSobol {
		constexpr auto Cell = 0x48; // FExpressionInput
		constexpr auto Index = 0x5c; // FExpressionInput
		constexpr auto Seed = 0x70; // FExpressionInput
		constexpr auto ConstIndex = 0x84; // uint32_t
		constexpr auto ConstSeed = 0x88; // FVector2D
	}

	namespace n_ALevelSequenceSmartActor {
		constexpr auto ProxyActorToReplace = 0x460; // AActor*
	}

	namespace n_UTransformGizmo {
		constexpr auto ActiveTarget = 0x48; // UTransformProxy*
		constexpr auto bSnapToWorldGrid = 0x50; // bool
		constexpr auto bUseContextCoordinateSystem = 0x51; // bool
		constexpr auto CurrentCoordinateSystem = 0x54; // EToolContextCoordinateSystem
		constexpr auto ActiveComponents = 0xf0; // TArray<UPrimitiveComponent*>
		constexpr auto NonuniformScaleComponents = 0x100; // TArray<UPrimitiveComponent*>
		constexpr auto ActiveGizmos = 0x110; // TArray<UInteractiveGizmo*>
		constexpr auto CameraAxisSource = 0x130; // UGizmoConstantFrameAxisSource*
		constexpr auto AxisXSource = 0x138; // UGizmoComponentAxisSource*
		constexpr auto AxisYSource = 0x140; // UGizmoComponentAxisSource*
		constexpr auto AxisZSource = 0x148; // UGizmoComponentAxisSource*
		constexpr auto UnitAxisXSource = 0x150; // UGizmoComponentAxisSource*
		constexpr auto UnitAxisYSource = 0x158; // UGizmoComponentAxisSource*
		constexpr auto UnitAxisZSource = 0x160; // UGizmoComponentAxisSource*
		constexpr auto StateTarget = 0x168; // UGizmoTransformChangeStateTarget*
		constexpr auto ScaledTransformSource = 0x170; // UGizmoScaledTransformSource*
	}

	namespace n_UTexture2DDynamic {
		constexpr auto Format = 0xc8; // EPixelFormat
	}

	namespace n_UTimecodeProvider {
		constexpr auto FrameDelay = 0x30; // float
	}

	namespace n_ACommon_AICharacterBP_C {
		constexpr auto UberGraphFrame = 0x13a8; // FPointerToUberGraphFrame
		constexpr auto AimAssist_Head = 0x13b0; // UBoxComponent*
		constexpr auto ZombieFacialAnimation = 0x13b8; // UZombieFacialAnimationComponent*
		constexpr auto WeakSpots = 0x13c0; // UWeakSpotsComponent*
		constexpr auto StumbleDamageAccumulator = 0x13c8; // UStumbleDamageAccumulatorComponent*
		constexpr auto Melee = 0x13d0; // UCapsuleComponent*
		constexpr auto Mutilation = 0x13d8; // UMutilationComponent*
		constexpr auto StandardBoneMap_BP = 0x13e0; // UStandardBoneMap_BP_C*
		constexpr auto EnemyAudioComponent_BP = 0x13e8; // UEnemyAudioComponent_BP_C*
		constexpr auto Pingable = 0x13f0; // UPingableComponent*
	}

	namespace n_UHeroHighlightComponent {
		constexpr auto ImpairedHighlightTags = 0x148; // FGameplayTagContainer
		constexpr auto VisibilityBone = 0x168; // FName
		constexpr auto HeroLifeStateComponent = 0x170; // UHeroLifeStateComponent*
		constexpr auto bHeroHighlightEnabled = 0x178; // bool
		constexpr auto DeadHighlightItemTagQuery = 0x180; // FGameplayTagQuery
	}

	namespace n_UAnimCurveCompressionSettings {
		constexpr auto Codec = 0x30; // UAnimCurveCompressionCodec*
	}

	namespace n_USkinnedDamageTextureComponent {
		constexpr auto SkeletalMesh = 0xe8; // USkinnedMeshComponent*
		constexpr auto DamageTexture = 0xf0; // UTextureRenderTarget2D*
		constexpr auto TextureSize = 0xf8; // uint32_t
		constexpr auto DamageScalar = 0xfc; // float
		constexpr auto DamageInfluenceArea = 0x100; // float
		constexpr auto UVSetToUse = 0x104; // uint32_t
		constexpr auto InnerGradient = 0x108; // float
		constexpr auto OutterGradient = 0x10c; // float
		constexpr auto bUseNormalsForNegativeValues = 0x110; // bool
	}

	namespace n_ULifeStateZombieGhost {
		constexpr auto GhostMaterials = 0xa8; // TArray<FGhostMaterial>
	}

	namespace n_UPlatformCallouts_WBP_C {
		constexpr auto UberGraphFrame = 0x458; // FPointerToUberGraphFrame
		constexpr auto PrimaryCallouts = 0x460; // UHorizontalBox*
		constexpr auto RootPanel = 0x468; // UHorizontalBox*
		constexpr auto SecondaryCallouts = 0x470; // UHorizontalBox*
		constexpr auto WidgetsByAction = 0x478; // TMap<FName, UPlatformCalloutButtonUserWidget*>
		constexpr auto ChildSpacing = 0x4c8; // float
	}

	namespace n_UCameraAnimInst {
		constexpr auto CamAnim = 0x30; // UCameraAnim*
		constexpr auto InterpGroupInst = 0x38; // UInterpGroupInst*
		constexpr auto PlayRate = 0x58; // float
		constexpr auto MoveTrack = 0x70; // UInterpTrackMove*
		constexpr auto MoveInst = 0x78; // UInterpTrackInstMove*
		constexpr auto PlaySpace = 0x80; // ECameraAnimPlaySpace
	}

	namespace n_USoundAttenuation {
		constexpr auto Attenuation = 0x30; // FSoundAttenuationSettings
	}

	namespace n_UGameplayCue_Audio_OneShot {
		constexpr auto SoundLookup = 0x30; // ESharedSurvivorAnimSound
		constexpr auto bPrepSurface = 0x31; // bool
		constexpr auto bShouldFollow = 0x32; // bool
		constexpr auto bStopOnDestroy = 0x33; // bool
		constexpr auto bFPOnly = 0x34; // bool
	}

	namespace n_UDialogueEvalSet_Surrounded_C {
		constexpr auto NearbyCharacters = 0x78; // FGameplayEval_NearbyCharacters
	}

	namespace n_UAkIOSInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettingsWithSampleRate
		constexpr auto AudioSession = 0x98; // FAkAudioSession
		constexpr auto CommunicationSettings = 0xa8; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xd0; // FAkAdvancedInitializationSettings
		constexpr auto TRSSettings = 0x104; // FAkTRSPerPlatformSettings
	}

	namespace n_ULevelSequencePlayer {
		constexpr auto OnCameraCut = 0x890; // FMulticastInlineDelegate
	}

	namespace n_UEnvQueryTest_TimeInActiveAreaSet {
		constexpr auto bZeroIfNotVisible = 0x208; // bool
	}

	namespace n_UMountedGunAnimInstance {
		constexpr auto DesiredRotation = 0x2b8; // FRotator
		constexpr auto DesiredBarrelRotation = 0x2c4; // float
		constexpr auto BarrelRotationRate = 0x2c8; // float
		constexpr auto BarrelRotationFalloffRate = 0x2cc; // float
		constexpr auto GunRotationInterpSpeed = 0x2d0; // float
	}

	namespace n_UEnvQueryTest_DirectnessDistance {
		constexpr auto DirectnessTo = 0x208; // UEnvQueryContext*
		constexpr auto DirectnessFrom = 0x210; // UEnvQueryContext*
		constexpr auto DistanceRadius = 0x218; // float
	}

	namespace n_UARTrackedGeometry {
		constexpr auto UniqueId = 0x30; // FGuid
		constexpr auto LocalToTrackingTransform = 0x40; // FTransform
		constexpr auto LocalToAlignedTrackingTransform = 0x70; // FTransform
		constexpr auto TrackingState = 0xa0; // EARTrackingState
		constexpr auto UnderlyingMesh = 0xb0; // UMRMeshComponent*
		constexpr auto ObjectClassification = 0xb8; // EARObjectClassification
		constexpr auto LastUpdateFrameNumber = 0xd0; // int32_t
		constexpr auto DebugName = 0xe0; // FName
	}

	namespace n_UMovieSceneByteSection {
		constexpr auto ByteCurve = 0xe8; // FMovieSceneByteChannel
	}

	namespace n_UInterpTrackInstFloatParticleParam {
		constexpr auto ResetFloat = 0x30; // float
	}

	namespace n_UStereoLayerShapeCylinder {
		constexpr auto Radius = 0x30; // float
		constexpr auto OverlayArc = 0x34; // float
		constexpr auto Height = 0x38; // int32_t
	}

	namespace n_AFogVolume {
		constexpr auto FogColor = 0x2a0; // FLinearColor
		constexpr auto MinVolumeFog = 0x2b0; // float
		constexpr auto FogNoiseScale = 0x2b4; // float
		constexpr auto FogNoisePan = 0x2b8; // FVector
		constexpr auto FogNoisePanSpeed = 0x2c4; // float
		constexpr auto bGenerateGroundFog = 0x2c8; // bool
		constexpr auto GroundFogHeight = 0x2cc; // float
		constexpr auto GroundFogAO = 0x2d0; // float
		constexpr auto HeightmapPixelDistance = 0x2d4; // float
		constexpr auto DynamicFogMaterial = 0x2e0; // UMaterialInstanceDynamic*
		constexpr auto GroundHeightmap = 0x2e8; // UTexture2D*
	}

	namespace n_UMovieScene3DAttachSection {
		constexpr auto AttachSocketName = 0x110; // FName
		constexpr auto AttachComponentName = 0x118; // FName
		constexpr auto AttachmentLocationRule = 0x120; // EAttachmentRule
		constexpr auto AttachmentRotationRule = 0x121; // EAttachmentRule
		constexpr auto AttachmentScaleRule = 0x122; // EAttachmentRule
		constexpr auto DetachmentLocationRule = 0x123; // EDetachmentRule
		constexpr auto DetachmentRotationRule = 0x124; // EDetachmentRule
		constexpr auto DetachmentScaleRule = 0x125; // EDetachmentRule
	}

	namespace n_UMovieScene3DConstraintTrack {
		constexpr auto ConstraintSections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UAnimNotify_SpawnDecal {
		constexpr auto TraceDirectionContext = 0x40; // UAnimContext_Rotation*
		constexpr auto TraceChannel = 0x48; // ECollisionChannel
		constexpr auto TraceLength = 0x4c; // float
		constexpr auto TraceStartPosBoneName = 0x50; // FName
		constexpr auto ImpactDirectionAngle = 0x58; // float
		constexpr auto DecalDefinitionAsset = 0x60; // UDecalDefinition*
	}

	namespace n_URadialForceComponent {
		constexpr auto Radius = 0x230; // float
		constexpr auto Falloff = 0x234; // ERadialImpulseFalloff
		constexpr auto ImpulseStrength = 0x238; // float
		constexpr auto bImpulseVelChange = 0x23c; // char : 1
		constexpr auto bIgnoreOwningActor = 0x23c; // char : 1
		constexpr auto ForceStrength = 0x240; // float
		constexpr auto DestructibleDamage = 0x244; // float
		constexpr auto ObjectTypesToAffect = 0x248; // TArray<EObjectTypeQuery>
	}

	namespace n_AGobiSwitchActor {
		constexpr auto SwitchedOn = 0x2a0; // FMulticastInlineDelegate
		constexpr auto SceneRoot = 0x2b0; // USceneComponent*
		constexpr auto UsableVolume = 0x2b8; // UBoxComponent*
		constexpr auto UsableMesh = 0x2c0; // UStaticMeshComponent*
		constexpr auto WaypointSpawner = 0x2c8; // UWaypointSpawnerComponent*
		constexpr auto Usable = 0x2d0; // UUsableComponent*
		constexpr auto AKComp = 0x2d8; // UAkComponent*
		constexpr auto MeshMaterial = 0x2e0; // UMaterialInterface*
		constexpr auto HologramMeshMaterial = 0x2e8; // UMaterialInterface*
		constexpr auto ActivationSound = 0x2f0; // UAkAudioEvent*
		constexpr auto ActivationLoop = 0x2f8; // UAkAudioEvent*
		constexpr auto ActivationLoopStop = 0x300; // UAkAudioEvent*
	}

	namespace n_ACommon_DismemberedPieceSkel_BP_C {
		constexpr auto SkeletalMesh = 0x2a0; // USkeletalMeshComponent*
		constexpr auto DefaultSceneRoot = 0x2a8; // USceneComponent*
	}

	namespace n_UConversationQueue {
		constexpr auto ConversationQueue = 0x58; // TArray<FQueuedConversation>
	}

	namespace n_UHagComponent {
		constexpr auto HagStateTags = 0x100; // FGameplayTag [0x5]
		constexpr auto TimeToInvestigate = 0x128; // float
		constexpr auto AlertBerserkDistance = 0x12c; // float
		constexpr auto FleeTags = 0x138; // FGameplayTagQuery
		constexpr auto BlackboardAsset = 0x180; // UBlackboardData*
		constexpr auto EnemyBBKey = 0x188; // FBlackboardKeySelector
		constexpr auto MadAnimPlayedBBKey = 0x1b0; // FBlackboardKeySelector
		constexpr auto AllowHordeByDifficulty = 0x1d8; // FDifficultyBool
		constexpr auto HagOwner = 0x2d0; // AGobiCharacter*
		constexpr auto BerserkTarget = 0x2d8; // AHeroCharacter*
		constexpr auto CurrentHagState = 0x2e0; // EHagState
		constexpr auto PreviousHagState = 0x2e1; // EHagState
	}

	namespace n_UBTTask_TriggerAction {
		constexpr auto GameplayTags = 0x78; // FAIDataProviderGameplayTagContainerValue
		constexpr auto MatchingTagType = 0xc8; // EGameplayActionMatchingTagType
		constexpr auto MatchingTagQuery = 0xd0; // FAIDataProviderGameplayTagQueryContainerValue
	}

	namespace n_ULevelVariantSets {
		constexpr auto DirectorClass = 0x30; // UObject*
		constexpr auto VariantSets = 0x38; // TArray<UVariantSet*>
	}

	namespace n_UParticleModuleAttractorLine {
		constexpr auto EndPoint0 = 0x38; // FVector
		constexpr auto EndPoint1 = 0x44; // FVector
		constexpr auto Range = 0x50; // FRawDistributionFloat
		constexpr auto Strength = 0x80; // FRawDistributionFloat
	}

	namespace n_UGameplayEffectApplyPingEffects {
		constexpr auto PingTargetQuery = 0x250; // FGameplayTagQuery
		constexpr auto CancelTagsQuery = 0x298; // FGameplayTagQuery
		constexpr auto EffectClasses = 0x2e0; // TArray<UGameplayEffect*>
	}

	namespace n_UAISubsystem {
		constexpr auto AISystem = 0x38; // UAISystem*
	}

	namespace n_UTimeSynchronizationSource {
		constexpr auto bUseForSynchronization = 0x30; // bool
		constexpr auto FrameOffset = 0x34; // int32_t
	}

	namespace n_UParticleModuleLocationPrimitiveSphere_Seeded {
		constexpr auto RandomSeedInfo = 0xe8; // FParticleRandomSeedInfo
	}

	namespace n_AGameSession {
		constexpr auto MaxSpectators = 0x2a0; // int32_t
		constexpr auto MaxPlayers = 0x2a4; // int32_t
		constexpr auto MaxPartySize = 0x2a8; // int32_t
		constexpr auto MaxSplitscreensPerConnection = 0x2ac; // char
		constexpr auto bRequiresPushToTalk = 0x2ad; // bool
		constexpr auto SessionName = 0x2b0; // FName
	}

	namespace n_UTitanStage1TentacleComponent {
		constexpr auto OnTentaclePainRoarStart = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnTentaclePainRoarEnd = 0xf8; // FMulticastInlineDelegate
		constexpr auto State = 0x108; // ETitanStage1TentacleState
		constexpr auto FlinchState = 0x114; // ETitanStage1TentacleFlinchState
		constexpr auto TargetActor = 0x148; // TWeakObjectPtr<AActor>
		constexpr auto ID = 0x150; // ETitanTentacleId
		constexpr auto EmergeAnimSequenceVariants = 0x158; // TArray<UAnimSequence*>
		constexpr auto EmergeAnimSequenceIndex = 0x170; // int8_t
		constexpr auto RetractAnimSequenceVariants = 0x178; // TArray<UAnimSequence*>
		constexpr auto RetractAnimSequenceIndex = 0x190; // int8_t
		constexpr auto IdleAnimSequenceVariants = 0x198; // TArray<UAnimSequence*>
		constexpr auto IdleAnimSequenceIndex = 0x1b0; // int8_t
		constexpr auto WoundedIdleAnimSequenceVariants = 0x1b8; // TArray<UAnimSequence*>
		constexpr auto WoundedIdleAnimSequenceIndex = 0x1d0; // int8_t
		constexpr auto SlapAttackWindUpEnterBlendSpace = 0x1d8; // UBlendSpace1D*
		constexpr auto SlapAttackWindUpLoopBlendSpace = 0x1e0; // UBlendSpace1D*
		constexpr auto SlapAttackWindUpStumbleBlendSpace = 0x1e8; // UBlendSpace1D*
		constexpr auto SlapAttackEnterBlendSpace = 0x1f0; // UBlendSpace1D*
		constexpr auto SlapAttackGroundLoopBlendSpace = 0x1f8; // UBlendSpace1D*
		constexpr auto SlapAttackRecoverBlendSpace = 0x200; // UBlendSpace1D*
		constexpr auto PainRoarAnimSequenceVariants = 0x208; // TArray<UAnimSequence*>
		constexpr auto PainRoarAnimSequenceIndex = 0x220; // int8_t
		constexpr auto AcidSprayAttackEnterAnimSequence = 0x228; // UAnimSequence*
		constexpr auto AcidSprayAttackLoopAnimSequence = 0x230; // UAnimSequence*
		constexpr auto AcidSprayAttackExitAnimSequence = 0x238; // UAnimSequence*
		constexpr auto AcidSprayAttackWindUpEnterAnimSequence = 0x240; // UAnimSequence*
		constexpr auto AcidSprayAttackWindUpLoopAnimSequence = 0x248; // UAnimSequence*
		constexpr auto EmergeSeconds = 0x250; // float
		constexpr auto RetractSeconds = 0x254; // float
		constexpr auto SlapAttackWindUpSeconds = 0x258; // float
		constexpr auto SlapAttackWindUpStumbleSeconds = 0x25c; // float
		constexpr auto SlapAttackSeconds = 0x260; // float
		constexpr auto SlapAttackRecoverSeconds = 0x264; // float
		constexpr auto SlapAttackGroundLoopSeconds = 0x268; // float
		constexpr auto SlapAttackAOEDelaySeconds = 0x26c; // float
		constexpr auto AcidSprayAttackWindUpSeconds = 0x270; // float
		constexpr auto AcidSprayAttackLoopSeconds = 0x274; // float
		constexpr auto MaxAttackDistance = 0x278; // float
		constexpr auto MaxAttackDistanceBelow = 0x27c; // float
		constexpr auto AttackVolumeTag = 0x280; // FGameplayTag
		constexpr auto SlapAttackGameplayEffects = 0x288; // TArray<UGameplayEffect*>
		constexpr auto EmergeActor = 0x298; // TWeakObjectPtr<AActor>
		constexpr auto EmergeSKMAnimSequence = 0x2a0; // UAnimSequence*
		constexpr auto WindUpFlinchVariants = 0x2a8; // TArray<UAnimSequence*>
		constexpr auto GroundLoopFlinchVariants = 0x2b8; // TArray<UAnimSequence*>
		constexpr auto WindUpFlinchIndex = 0x2d0; // int8_t
		constexpr auto GroundLoopFlinchIndex = 0x2d1; // int8_t
		constexpr auto FlinchCooldownMinMax = 0x2d8; // FVector2D
		constexpr auto WindUpAccumulatedDamageForStumble = 0x2e0; // float
		constexpr auto SlapAttackAOEEmitterTags = 0x2e8; // TArray<FGameplayTag>
		constexpr auto TentacleEndBoneName = 0x2f8; // FName
		constexpr auto ZOffsetForRangeArray = 0x338; // TArray<FZOffsetForRange>
		constexpr auto RiseRate = 0x348; // float
		constexpr auto ThreatComp = 0x358; // UThreatComponent*
		constexpr auto AllowThreat = 0x360; // int32_t [0x10]
	}

	namespace n_UARSaveWorldAsyncTaskBlueprintProxy {
		constexpr auto OnSuccess = 0x58; // FMulticastInlineDelegate
		constexpr auto OnFailed = 0x68; // FMulticastInlineDelegate
	}

	namespace n_UImage {
		constexpr auto Brush = 0x148; // FSlateBrush
		constexpr auto BrushDelegate = 0x1d8; // FDelegate
		constexpr auto ColorAndOpacity = 0x1e8; // FSlateColor
		constexpr auto ColorAndOpacityDelegate = 0x218; // FDelegate
		constexpr auto bFlipForRightToLeftFlowDirection = 0x228; // bool
		constexpr auto OnMouseButtonDownEvent = 0x22c; // FDelegate
	}

	namespace n_UAnimNotify_PlayMontageNotify {
		constexpr auto NotifyName = 0x40; // FName
	}

	namespace n_UInGameScreen {
		constexpr auto bCloseWhenHeroDisabled = 0x558; // bool
		constexpr auto bCloseWhenHeroNotAlive = 0x559; // bool
	}

	namespace n_AAkSpatialAudioVolume {
		constexpr auto SurfaceReflectorSet = 0x318; // UAkSurfaceReflectorSetComponent*
		constexpr auto LateReverb = 0x320; // UAkLateReverbComponent*
		constexpr auto Room = 0x328; // UAkRoomComponent*
	}

	namespace n_UAnimEvalSet_Shared_Melee_C {
		constexpr auto DistanceToEnemy = 0xc0; // FGameplayEval_Distance
		constexpr auto DistanceZToEnemy = 0x190; // FGameplayEval_Distance
		constexpr auto AngleToEnemy = 0x260; // FGameplayEval_Angle
		constexpr auto HasPlayedRecently = 0x2c0; // FAnimEval_MontageLastPlayed
		constexpr auto RandomChance = 0x310; // FGameplayEval_RandomChance
		constexpr auto CheckDismembered = 0x360; // FGameplayEval_Dismembered
		constexpr auto EnemySpeed = 0x3b8; // FGameplayEval_Speed
		constexpr auto RandomScore = 0x418; // FGameplayEval_Random
		constexpr auto AvatarTags = 0x460; // FGameplayEval_GameplayTags
	}

	namespace n_ANavLinkProxy {
		constexpr auto PointLinks = 0x2b0; // TArray<FNavigationLink>
		constexpr auto SegmentLinks = 0x2c0; // TArray<FNavigationSegmentLink>
		constexpr auto SmartLinkComp = 0x2d0; // UNavLinkCustomComponent*
		constexpr auto bSmartLinkIsRelevant = 0x2d8; // bool
		constexpr auto OnSmartLinkReached = 0x2e0; // FMulticastInlineDelegate
	}

	namespace n_UPartyPlayerCardUserWidget {
		constexpr auto Player = 0x460; // FPartyPlayer
		constexpr auto bIsEnemy = 0x570; // bool
		constexpr auto bIsInGroup = 0x571; // bool
		constexpr auto bIsGroupLeader = 0x572; // bool
		constexpr auto bIsPlayingGobi = 0x573; // bool
		constexpr auto bShowGroupMarker = 0x574; // bool
		constexpr auto bIsEmpty = 0x575; // bool
		constexpr auto bCharacterNameVisible = 0x576; // bool
		constexpr auto PartyScreenTab = 0x577; // EPartyScreenTab
		constexpr auto StatusNormalColor = 0x578; // FSlateColor
		constexpr auto StatusNotInGameColor = 0x5a8; // FSlateColor
		constexpr auto StatusInPartyColor = 0x5d8; // FSlateColor
	}

	namespace n_URuntimeVirtualTexture {
		constexpr auto MaterialType = 0x30; // ERuntimeVirtualTextureMaterialType
		constexpr auto bCompressTextures = 0x31; // bool
		constexpr auto bEnable = 0x32; // bool
		constexpr auto bClearTextures = 0x33; // bool
		constexpr auto bSinglePhysicalSpace = 0x34; // bool
		constexpr auto bPrivateSpace = 0x35; // bool
		constexpr auto bEnableScalability = 0x36; // bool
		constexpr auto Size = 0x38; // int32_t
		constexpr auto TileCount = 0x3c; // int32_t
		constexpr auto TileSize = 0x40; // int32_t
		constexpr auto TileBorderSize = 0x44; // int32_t
		constexpr auto StreamLowMips = 0x48; // int32_t
		constexpr auto StreamingTexture = 0x50; // URuntimeVirtualTextureStreamingProxy*
		constexpr auto bEnableCompressCrunch = 0x58; // bool
		constexpr auto RemoveLowMips = 0x5c; // int32_t
	}

	namespace n_UARTrackedImage {
		constexpr auto DetectedImage = 0xe8; // UARCandidateImage*
		constexpr auto EstimatedSize = 0xf0; // FVector2D
	}

	namespace n_UParticleModuleVelocityOverLifetime {
		constexpr auto VelOverLife = 0x40; // FRawDistributionVector
		constexpr auto Absolute = 0x88; // char : 1
	}

	namespace n_UBTService_Brute {
		constexpr auto BruteStateBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto PrevBruteStateBBKey = 0xa0; // FBlackboardKeySelector
	}

	namespace n_ACineCameraActor {
		constexpr auto LookatTrackingSettings = 0x830; // FCameraLookatTrackingSettings
	}

	namespace n_UAnimEvalSet_Shared_DestructibleAttackLink_C {
		constexpr auto Distance To Destructible = 0xc0; // FGameplayEval_Distance
		constexpr auto Z DistanceTo Destructible = 0x190; // FGameplayEval_Distance
		constexpr auto PlayedRecently = 0x260; // FAnimEval_MontageLastPlayed
		constexpr auto BlockedByPawn = 0x2b0; // FGameplayEval_BlockedByPawn
	}

	namespace n_UHealthHitMarkerComponent {
		constexpr auto DamageTagQuery = 0xe8; // FGameplayTagQuery
		constexpr auto DamageSourceTagQuery = 0x130; // FGameplayTagQuery
		constexpr auto MaxRecentDamageInfoAge = 0x178; // float
		constexpr auto HealthComponent = 0x180; // UHealthComponent*
		constexpr auto GobiGameState = 0x188; // AGobiGameStateBase*
	}

	namespace n_ULandscapeComponent {
		constexpr auto SectionBaseX = 0x4b0; // int32_t
		constexpr auto SectionBaseY = 0x4b4; // int32_t
		constexpr auto ComponentSizeQuads = 0x4b8; // int32_t
		constexpr auto SubsectionSizeQuads = 0x4bc; // int32_t
		constexpr auto NumSubsections = 0x4c0; // int32_t
		constexpr auto OverrideMaterial = 0x4c8; // UMaterialInterface*
		constexpr auto OverrideHoleMaterial = 0x4d0; // UMaterialInterface*
		constexpr auto OverrideMaterials = 0x4d8; // TArray<FLandscapeComponentMaterialOverride>
		constexpr auto MaterialInstances = 0x4e8; // TArray<UMaterialInstanceConstant*>
		constexpr auto MaterialInstancesDynamic = 0x4f8; // TArray<UMaterialInstanceDynamic*>
		constexpr auto LODIndexToMaterialIndex = 0x508; // TArray<int8_t>
		constexpr auto MaterialIndexToDisabledTessellationMaterial = 0x518; // TArray<int8_t>
		constexpr auto XYOffsetmapTexture = 0x528; // UTexture2D*
		constexpr auto WeightmapScaleBias = 0x530; // FVector4
		constexpr auto WeightmapSubsectionOffset = 0x540; // float
		constexpr auto HeightmapScaleBias = 0x550; // FVector4
		constexpr auto CachedLocalBox = 0x560; // FBox
		constexpr auto CollisionComponent = 0x57c; // LazyObjectProperty
		constexpr auto HeightmapTexture = 0x598; // UTexture2D*
		constexpr auto WeightmapLayerAllocations = 0x5a0; // TArray<FWeightmapLayerAllocationInfo>
		constexpr auto WeightmapTextures = 0x5b0; // TArray<UTexture2D*>
		constexpr auto MapBuildDataId = 0x5c0; // FGuid
		constexpr auto IrrelevantLights = 0x5d0; // TArray<FGuid>
		constexpr auto CollisionMipLevel = 0x5e0; // int32_t
		constexpr auto SimpleCollisionMipLevel = 0x5e4; // int32_t
		constexpr auto NegativeZBoundsExtension = 0x5e8; // float
		constexpr auto PositiveZBoundsExtension = 0x5ec; // float
		constexpr auto StaticLightingResolution = 0x5f0; // float
		constexpr auto ForcedLOD = 0x5f4; // int32_t
		constexpr auto LODBias = 0x5f8; // int32_t
		constexpr auto StateId = 0x5fc; // FGuid
		constexpr auto BakedTextureMaterialGuid = 0x60c; // FGuid
		constexpr auto GIBakedBaseColorTexture = 0x620; // UTexture2D*
		constexpr auto MobileBlendableLayerMask = 0x628; // char
		constexpr auto MobileMaterialInterface = 0x630; // UMaterialInterface*
		constexpr auto MobileMaterialInterfaces = 0x638; // TArray<UMaterialInterface*>
		constexpr auto MobileWeightmapTextures = 0x648; // TArray<UTexture2D*>
	}

	namespace n_UAnimContext_NavLinkContextLoc {
		constexpr auto DesiredContextLocation = 0x70; // ENavLinkContextLocations
	}

	namespace n_UDefibrillatorComponent {
		constexpr auto OnDefibSucceeded = 0x160; // FMulticastInlineDelegate
		constexpr auto OnDefibFailed = 0x170; // FMulticastInlineDelegate
		constexpr auto MoveTickData = 0x1d8; // FDefibillatorMoveTickData
		constexpr auto MaxTargetDistance = 0x1e8; // float
		constexpr auto MinAngleToTarget = 0x1ec; // float
		constexpr auto OwningPlayerBlockingTags = 0x1f0; // FGameplayTagContainer
		constexpr auto OwningPlayerAppliedTags = 0x210; // FGameplayTagContainer
		constexpr auto DefibTargetTagQuery = 0x230; // FGameplayTagQuery
		constexpr auto RequiredUseTime = 0x278; // float
		constexpr auto FirstPersonMontage = 0x280; // UAnimMontage*
		constexpr auto ThirdPersonMontage = 0x288; // UAnimMontage*
		constexpr auto TargetMontageSets = 0x290; // TArray<UMontageSet*>
		constexpr auto TargetAnimationTime = 0x2a0; // float
		constexpr auto OwningPlayerProgressBarText = 0x2a8; // FText
		constexpr auto TargetProgressBarText = 0x2c0; // FText
		constexpr auto ReviveEffects = 0x2d8; // TArray<UGameplayEffect*>
		constexpr auto AKEOnBeginUse = 0x2e8; // UAkAudioEvent*
		constexpr auto AKEOnEndUse = 0x2f0; // UAkAudioEvent*
		constexpr auto AKEOnSuccessfulUse = 0x2f8; // UAkAudioEvent*
	}

	namespace n_ASocialSpaceGameState {
		constexpr auto OnSocialSpaceMatchStarted = 0x578; // FMulticastInlineDelegate
		constexpr auto OnSocialSpaceMatchEnded = 0x588; // FMulticastInlineDelegate
		constexpr auto GameplayCueManager = 0x5a0; // UGameplayCueManager*
	}

	namespace n_USoundNodeDoppler {
		constexpr auto DopplerIntensity = 0x60; // float
		constexpr auto bUseSmoothing = 0x64; // bool
		constexpr auto SmoothingInterpSpeed = 0x68; // float
	}

	namespace n_ATRSSplineAudioSource {
		constexpr auto SoundSource = 0x2a0; // UAkComponent*
		constexpr auto SoundSpline = 0x2a8; // USplineComponent*
		constexpr auto bAudioPlayOnStart = 0x2b0; // bool
		constexpr auto bDrawDebugSphere = 0x2b1; // bool
		constexpr auto MoveType = 0x2b2; // ESplineMovementMode
		constexpr auto SplineRate = 0x2b4; // float
	}

	namespace n_UAISystemBase {
		constexpr auto AISystemClassName = 0x30; // FSoftClassPath
		constexpr auto AISystemModuleName = 0x48; // FName
		constexpr auto bInstantiateAISystemOnClient = 0x58; // bool
	}

	namespace n_UAnimNotify_EvalBranch {
		constexpr auto BranchData = 0x40; // TArray<FEvalBranchData>
	}

	namespace n_AAISpawnActor_BP_C {
		constexpr auto Scene = 0x590; // USceneComponent*
		constexpr auto Billboard = 0x598; // UBillboardComponent*
		constexpr auto Arrow = 0x5a0; // UArrowComponent*
		constexpr auto NavLocation = 0x5a8; // UNavLocationComponent*
	}

	namespace n_UAxisAngleGizmo {
		constexpr auto AxisSource = 0x50; // TScriptInterface<IGizmoAxisSource>
		constexpr auto AngleSource = 0x60; // TScriptInterface<IGizmoFloatParameterSource>
		constexpr auto HitTarget = 0x70; // TScriptInterface<IGizmoClickTarget>
		constexpr auto StateTarget = 0x80; // TScriptInterface<IGizmoStateTarget>
		constexpr auto bInInteraction = 0x90; // bool
		constexpr auto RotationOrigin = 0x94; // FVector
		constexpr auto RotationAxis = 0xa0; // FVector
		constexpr auto RotationPlaneX = 0xac; // FVector
		constexpr auto RotationPlaneY = 0xb8; // FVector
		constexpr auto InteractionStartPoint = 0xc4; // FVector
		constexpr auto InteractionCurPoint = 0xd0; // FVector
		constexpr auto InteractionStartAngle = 0xdc; // float
		constexpr auto InteractionCurAngle = 0xe0; // float
	}

	namespace n_UAnimationSharingManager {
		constexpr auto Skeletons = 0x30; // TArray<USkeleton*>
		constexpr auto PerSkeletonData = 0x40; // TArray<UAnimSharingInstance*>
	}

	namespace n_UGobiWatermarkSettings {
		constexpr auto LegalTextPadding = 0x40; // FMargin
		constexpr auto DateTextPadding = 0x50; // FMargin
		constexpr auto PartnerDetailsTextPadding = 0x60; // FMargin
		constexpr auto TextStyle = 0x70; // FTextBlockStyle
	}

	namespace n_UMovieScene2DTransformSection {
		constexpr auto TransformMask = 0xe8; // FMovieScene2DTransformMask
		constexpr auto Translation = 0xf0; // FMovieSceneFloatChannel [0x2]
		constexpr auto Rotation = 0x230; // FMovieSceneFloatChannel
		constexpr auto Scale = 0x2d0; // FMovieSceneFloatChannel [0x2]
		constexpr auto Shear = 0x410; // FMovieSceneFloatChannel [0x2]
	}

	namespace n_UMultiLineEditableTextBox {
		constexpr auto Text = 0x168; // FText
		constexpr auto HintText = 0x180; // FText
		constexpr auto HintTextDelegate = 0x198; // FDelegate
		constexpr auto WidgetStyle = 0x1a8; // FEditableTextBoxStyle
		constexpr auto TextStyle = 0xa28; // FTextBlockStyle
		constexpr auto bIsReadOnly = 0xcc8; // bool
		constexpr auto AllowContextMenu = 0xcc9; // bool
		constexpr auto VirtualKeyboardOptions = 0xcca; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardDismissAction = 0xccb; // EVirtualKeyboardDismissAction
		constexpr auto Style = 0xcd0; // USlateWidgetStyleAsset*
		constexpr auto Font = 0xcd8; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xd38; // FLinearColor
		constexpr auto BackgroundColor = 0xd48; // FLinearColor
		constexpr auto ReadOnlyForegroundColor = 0xd58; // FLinearColor
		constexpr auto OnTextChanged = 0xd68; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0xd78; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleSize_Seeded {
		constexpr auto RandomSeedInfo = 0x80; // FParticleRandomSeedInfo
	}

	namespace n_USlateVectorArtData {
		constexpr auto VertexData = 0x30; // TArray<FSlateMeshVertex>
		constexpr auto IndexData = 0x40; // TArray<uint32_t>
		constexpr auto Material = 0x50; // UMaterialInterface*
		constexpr auto ExtentMin = 0x58; // FVector2D
		constexpr auto ExtentMax = 0x60; // FVector2D
	}

	namespace n_UGameplayAction_Snitch {
		constexpr auto GatherRadius = 0x2e8; // float
		constexpr auto GatherRadiusGrowthAmount = 0x2ec; // float
		constexpr auto MaxGatherRadius = 0x2f0; // float
		constexpr auto AlertToEnemyEffects = 0x2f8; // TArray<UGameplayEffect*>
		constexpr auto SnitchDuration = 0x308; // float
		constexpr auto GatherBlockingTags = 0x318; // FGameplayTagQuery
		constexpr auto GatherToSmartActorClass = 0x360; // AAISmartActor*
		constexpr auto SnitchedAndFinishedTag = 0x378; // FGameplayTag
	}

	namespace n_UHeroMovementComponent {
		constexpr auto Harpoon = 0xe8c; // FHarpoonData
		constexpr auto NextHarpoonSource = 0xec0; // AActor*
		constexpr auto MovementForceData = 0xed0; // FMovementForceData
		constexpr auto PendingMovementForceData = 0xf10; // FMovementForceData
		constexpr auto MoveToTargetData = 0xf50; // FMoveToTargetData
		constexpr auto MovementSpeedConfig = 0x1510; // FMovementSpeedConfig
		constexpr auto MaxIncapSpeed = 0x15f8; // float
		constexpr auto Inventory = 0x1600; // UInventoryComponent*
		constexpr auto OwningHero = 0x1608; // AHeroCharacter*
		constexpr auto BlockingKnockbackTags = 0x1610; // FGameplayTagQuery
		constexpr auto KnockbackPhysConfig = 0x1658; // FMovementForcePhysConfig
		constexpr auto MeleeMovementForcePhysConfig = 0x1664; // FMovementForcePhysConfig
		constexpr auto AlertRadiusCrouch = 0x167c; // float
		constexpr auto AlertRadiusWalk = 0x1680; // float
		constexpr auto AlertRadiusSprint = 0x1684; // float
		constexpr auto AlertLoudnessCrouch = 0x1688; // float
		constexpr auto AlertLoudnessWalk = 0x168c; // float
		constexpr auto AlertLoudnessSprint = 0x1690; // float
		constexpr auto MinTimeBetweenCrouchInputToggle = 0x1694; // float
		constexpr auto DelayBetweenAlerts = 0x16a8; // float
		constexpr auto DefaultPrimaryInputThreshold = 0x16ac; // float
	}

	namespace n_AAudioController {
		constexpr auto SharedBanks = 0x2a0; // TArray<UAkAudioBank*>
		constexpr auto MapSpecificBanks = 0x2b0; // TArray<UAkAudioBank*>
		constexpr auto PVPBank = 0x2c0; // UAkAudioBank*
		constexpr auto AkSimpleComp = 0x2c8; // UAkSimpleComponent*
		constexpr auto AudioStateMonitor = 0x2d0; // UAudioStateComponent*
		constexpr auto ModListener = 0x2d8; // UCardListenerComponent*
		constexpr auto DemoPausedSound = 0x2e0; // UAkAudioEvent*
		constexpr auto DemoUnpausedSound = 0x2e8; // UAkAudioEvent*
		constexpr auto MapMusicIdentifier = 0x2f0; // FName
		constexpr auto SafeRoomMusicRow = 0x2f8; // FDataTableRowHandle
		constexpr auto AtmosphereBank = 0x318; // UAkAudioBank*
		constexpr auto AtmosphereStart = 0x320; // UAkAudioEvent*
		constexpr auto AtmosphereStop = 0x328; // UAkAudioEvent*
		constexpr auto RainEvent = 0x330; // UAkAudioEvent*
		constexpr auto StartingPresentationValue = 0x338; // float
	}

	namespace n_UGameplayEffectLadderMovementModeComponent {
		constexpr auto AscendSpeedMod = 0x240; // FGamePropertyFloatMod
		constexpr auto DescendSpeedMod = 0x250; // FGamePropertyFloatMod
	}

	namespace n_UAnimContext_ClosestCharacter {
		constexpr auto CharacterTags = 0x150; // FGameplayTagQuery
		constexpr auto MinCloseCharacters = 0x198; // int32_t
		constexpr auto MaxCharacterDistance = 0x19c; // float
	}

	namespace n_UInteractiveCar {
		constexpr auto LootDoorUseTime = 0xe8; // float
		constexpr auto DoorPartialOpenAlpha = 0xec; // float
		constexpr auto DoorOpenCurve = 0xf0; // UCurveFloat*
		constexpr auto DoorCloseCurve = 0xf8; // UCurveFloat*
		constexpr auto CarDamageDialogueMaxRange = 0x100; // float
		constexpr auto CarAlarmDialogueMaxRange = 0x104; // float
		constexpr auto bInvulnerable = 0x108; // bool
		constexpr auto OnFirePingableTag = 0x10c; // FGameplayTag
		constexpr auto OnFireLifeStateTag = 0x114; // FGameplayTag
		constexpr auto DestroyedLifeStateTag = 0x11c; // FGameplayTag
		constexpr auto CrushedDamageTypes = 0x128; // FGameplayTagContainer
		constexpr auto Crushed = 0x148; // UAkAudioEvent*
		constexpr auto AlarmChance = 0x150; // float
		constexpr auto AlarmDelay = 0x154; // float
		constexpr auto AlarmDuration = 0x158; // float
		constexpr auto AlarmDamageActivationRange = 0x15c; // float
		constexpr auto AlarmOmenTags = 0x160; // FGameplayTagContainer
		constexpr auto AlarmVfxIdleCurve = 0x180; // UCurveFloat*
		constexpr auto AlarmVfxActiveCurve = 0x188; // UCurveFloat*
		constexpr auto AlarmLightIntensityIdle = 0x190; // float
		constexpr auto AlarmLightIntensityActive = 0x194; // float
		constexpr auto AlarmMaterialParams = 0x198; // TArray<FInteractiveCarAlarmMaterialParams>
		constexpr auto AlarmLightClick = 0x1a8; // UAkAudioEvent*
		constexpr auto AlarmLoops = 0x1b0; // TMap<UAkAudioEvent*, UAkAudioEvent*>
		constexpr auto HordeStartCue = 0x200; // FGameplayTag
		constexpr auto BodyMeshComponent = 0x208; // UMeshComponent*
		constexpr auto DestroyedBodyMeshComponent = 0x210; // UMeshComponent*
		constexpr auto GasCapMeshComponent = 0x218; // UMeshComponent*
		constexpr auto HealthComponent = 0x220; // UHealthComponent*
		constexpr auto AudioComponent = 0x228; // UAkComponent*
		constexpr auto AlertComponent = 0x230; // UAlertComponent*
		constexpr auto PingableComponent = 0x238; // UPingableComponent*
		constexpr auto Lights = 0x240; // TArray<ULightComponent*>
		constexpr auto DoorStates = 0x250; // TArray<EInteractiveCarDoorState>
		constexpr auto WindowStates = 0x270; // TArray<EInteractiveCarWindowState>
		constexpr auto AlarmLoop = 0x330; // UAkAudioEvent*
		constexpr auto AlarmLoopStop = 0x338; // UAkAudioEvent*
		constexpr auto bHasAlarm = 0x340; // bool
		constexpr auto bAlarmUsed = 0x341; // bool
	}

	namespace n_UItemObservableComponent {
		constexpr auto TooltipOverride = 0x550; // FItemObservableToolTipOverride
		constexpr auto SimpleCollisionFlags = 0x5b0; // int32_t
		constexpr auto BoxExtents = 0x5b4; // FVector
		constexpr auto ObservableStates = 0x5c0; // TArray<FItemObservableState>
	}

	namespace n_UStumbleComponent {
		constexpr auto bPlayerControlledOnly = 0xe8; // bool
		constexpr auto StumbleConfig = 0xf0; // FStumbleConfig
	}

	namespace n_UInterpTrackFloatParticleParam {
		constexpr auto ParamName = 0x98; // FName
	}

	namespace n_ACableActor {
		constexpr auto CableComponent = 0x2a0; // UCableComponent*
	}

	namespace n_USoundfieldEndpointSubmix {
		constexpr auto SoundfieldEndpointType = 0x40; // FName
		constexpr auto EndpointSettingsClass = 0x48; // UAudioEndpointSettingsBase*
		constexpr auto EndpointSettings = 0x50; // USoundfieldEndpointSettingsBase*
		constexpr auto EncodingSettingsClass = 0x58; // USoundfieldEncodingSettingsBase*
		constexpr auto EncodingSettings = 0x60; // USoundfieldEncodingSettingsBase*
		constexpr auto SoundfieldEffectChain = 0x68; // TArray<USoundfieldEffectBase*>
	}

	namespace n_USoundClass {
		constexpr auto Properties = 0x30; // FSoundClassProperties
		constexpr auto ChildClasses = 0x88; // TArray<USoundClass*>
		constexpr auto PassiveSoundMixModifiers = 0x98; // TArray<FPassiveSoundMixModifier>
		constexpr auto Modulation = 0xa8; // FSoundModulation
		constexpr auto ParentClass = 0xb8; // USoundClass*
	}

	namespace n_UTextureRenderTargetCube {
		constexpr auto SizeX = 0xc8; // int32_t
		constexpr auto ClearColor = 0xcc; // FLinearColor
		constexpr auto OverrideFormat = 0xdc; // EPixelFormat
		constexpr auto bHDR = 0xdd; // char : 1
		constexpr auto bForceLinearGamma = 0xdd; // char : 1
	}

	namespace n_UAnimNotify_AOEEmitter {
		constexpr auto AOEEmitterTag = 0x40; // FGameplayTag
	}

	namespace n_UNiagaraDataInterfaceChaosDestruction {
		constexpr auto ChaosSolverActorSet = 0x38; // TSet<AChaosSolverActor*>
		constexpr auto DataSourceType = 0x88; // EDataSourceTypeEnum
		constexpr auto DataProcessFrequency = 0x8c; // int32_t
		constexpr auto MaxNumberOfDataEntriesToSpawn = 0x90; // int32_t
		constexpr auto DoSpawn = 0x94; // bool
		constexpr auto SpawnMultiplierMinMax = 0x98; // FVector2D
		constexpr auto SpawnChance = 0xa0; // float
		constexpr auto ImpulseToSpawnMinMax = 0xa4; // FVector2D
		constexpr auto SpeedToSpawnMinMax = 0xac; // FVector2D
		constexpr auto MassToSpawnMinMax = 0xb4; // FVector2D
		constexpr auto ExtentMinToSpawnMinMax = 0xbc; // FVector2D
		constexpr auto ExtentMaxToSpawnMinMax = 0xc4; // FVector2D
		constexpr auto VolumeToSpawnMinMax = 0xcc; // FVector2D
		constexpr auto SolverTimeToSpawnMinMax = 0xd4; // FVector2D
		constexpr auto SurfaceTypeToSpawn = 0xdc; // int32_t
		constexpr auto LocationFilteringMode = 0xe0; // ELocationFilteringModeEnum
		constexpr auto LocationXToSpawn = 0xe1; // ELocationXToSpawnEnum
		constexpr auto LocationXToSpawnMinMax = 0xe4; // FVector2D
		constexpr auto LocationYToSpawn = 0xec; // ELocationYToSpawnEnum
		constexpr auto LocationYToSpawnMinMax = 0xf0; // FVector2D
		constexpr auto LocationZToSpawn = 0xf8; // ELocationZToSpawnEnum
		constexpr auto LocationZToSpawnMinMax = 0xfc; // FVector2D
		constexpr auto DataSortingType = 0x104; // EDataSortTypeEnum
		constexpr auto bGetExternalCollisionData = 0x105; // bool
		constexpr auto DoSpatialHash = 0x106; // bool
		constexpr auto SpatialHashVolumeMin = 0x108; // FVector
		constexpr auto SpatialHashVolumeMax = 0x114; // FVector
		constexpr auto SpatialHashVolumeCellSize = 0x120; // FVector
		constexpr auto MaxDataPerCell = 0x12c; // int32_t
		constexpr auto bApplyMaterialsFilter = 0x130; // bool
		constexpr auto ChaosBreakingMaterialSet = 0x138; // TSet<UPhysicalMaterial*>
		constexpr auto bGetExternalBreakingData = 0x188; // bool
		constexpr auto bGetExternalTrailingData = 0x189; // bool
		constexpr auto RandomPositionMagnitudeMinMax = 0x18c; // FVector2D
		constexpr auto InheritedVelocityMultiplier = 0x194; // float
		constexpr auto RandomVelocityGenerationType = 0x198; // ERandomVelocityGenerationTypeEnum
		constexpr auto RandomVelocityMagnitudeMinMax = 0x19c; // FVector2D
		constexpr auto SpreadAngleMax = 0x1a4; // float
		constexpr auto VelocityOffsetMin = 0x1a8; // FVector
		constexpr auto VelocityOffsetMax = 0x1b4; // FVector
		constexpr auto FinalVelocityMagnitudeMinMax = 0x1c0; // FVector2D
		constexpr auto MaxLatency = 0x1c8; // float
		constexpr auto DebugType = 0x1cc; // EDebugTypeEnum
		constexpr auto LastSpawnedPointID = 0x1d0; // int32_t
		constexpr auto LastSpawnTime = 0x1d4; // float
		constexpr auto SolverTime = 0x1e8; // float
		constexpr auto TimeStampOfLastProcessedData = 0x1ec; // float
	}

	namespace n_UScaleBox {
		constexpr auto Stretch = 0x160; // EStretch
		constexpr auto StretchDirection = 0x161; // EStretchDirection
		constexpr auto UserSpecifiedScale = 0x164; // float
		constexpr auto IgnoreInheritedScale = 0x168; // bool
	}

	namespace n_UAnimEvalSet_FPMantle_C {
		constexpr auto MantleHeight = 0xc0; // FGameplayEval_MantleHeight
	}

	namespace n_USoundNodeBranch {
		constexpr auto BoolParameterName = 0x60; // FName
	}

	namespace n_UParticleModuleRotation {
		constexpr auto StartRotation = 0x38; // FRawDistributionFloat
	}

	namespace n_UPhysicalMaterialMask {
		constexpr auto UVChannelIndex = 0x30; // int32_t
		constexpr auto AddressX = 0x34; // TextureAddress
		constexpr auto AddressY = 0x35; // TextureAddress
	}

	namespace n_AChallengeGameState {
		constexpr auto ChallengeMonitorComponent = 0x6a8; // UChallengeMonitorComponent*
	}

	namespace n_UMantleComponent {
		constexpr auto OnMantleStateChanged = 0x130; // FMulticastInlineDelegate
		constexpr auto Config = 0x270; // FMantleMontageConfig
		constexpr auto bActivateOnJump = 0x348; // bool
		constexpr auto bActivateOnMovement = 0x349; // bool
		constexpr auto bActivateOnMovementWhileFalling = 0x34a; // bool
		constexpr auto ActivationFallSpeedMin = 0x34c; // float
		constexpr auto ActivationFallSpeedMax = 0x350; // float
		constexpr auto BlockingTags = 0x358; // FGameplayTagContainer
		constexpr auto MinDetectionHeight = 0x378; // float
		constexpr auto MaxDetectionHeight = 0x37c; // float
		constexpr auto MaxHorizontalDistance = 0x380; // float
		constexpr auto MaxLedgeExtrusion = 0x384; // float
		constexpr auto OpeningTestStepHeight = 0x388; // float
		constexpr auto LandDistance = 0x38c; // float
		constexpr auto RestrictSurfaceInclineWhenHeightBelow = 0x390; // float
		constexpr auto SurfaceInclineRestriction = 0x394; // float
		constexpr auto RelaxedSurfaceInclineRestriction = 0x398; // float
		constexpr auto bCalculateMantleDepth = 0x39c; // bool
		constexpr auto MaxDepthCalculationSize = 0x3a0; // float
		constexpr auto GroundCheckDistance = 0x3a4; // float
		constexpr auto MinMantleHeightFromGround = 0x3a8; // float
		constexpr auto WallHitRequiredAngle = 0x3ac; // float
		constexpr auto bUseMovementDirectionForWallDetection = 0x3b0; // bool
		constexpr auto bUseWallNormalAsMantleDirection = 0x3b1; // bool
		constexpr auto DefaultClimbParameters = 0x3b4; // FMantleProceduralClimbParameters
		constexpr auto bMoveToWall = 0x3c0; // bool
		constexpr auto MoveToWallTime = 0x3c4; // float
		constexpr auto ClimbTimeout = 0x3c8; // float
		constexpr auto bAutoCrouch = 0x3cc; // bool
		constexpr auto SnapToWallYawRotationOnHeightAbove = 0x3d0; // float
		constexpr auto ClimbParametersHeightOverrides = 0x3d8; // TArray<FMantleClimbHeightConfig>
		constexpr auto MontageSet = 0x3e8; // UMontageSet*
		constexpr auto LeapMontageSet = 0x3f0; // UMontageSet*
		constexpr auto ItemSwappingTags = 0x3f8; // FGameplayTagContainer
		constexpr auto MaxMoveSpeedOnMontageEnd = 0x418; // float
		constexpr auto bClearZVelocityOnMontageEnd = 0x41c; // bool
	}

	namespace n_UNiagaraDataInterfaceCurlNoise {
		constexpr auto Seed = 0x38; // uint32_t
	}

	namespace n_UEnvQueryGenerator_AISpawners {
		constexpr auto SearchCenter = 0x58; // UEnvQueryContext*
		constexpr auto SearchRadius = 0x60; // FAIDataProviderFloatValue
		constexpr auto TagQuery = 0x98; // FAIDataProviderGameplayTagQueryContainerValue
		constexpr auto SecondaryTagQuery = 0x110; // FAIDataProviderGameplayTagQueryContainerValue
	}

	namespace n_UParticleModuleBeamTarget {
		constexpr auto TargetMethod = 0x38; // Beam2SourceTargetMethod
		constexpr auto TargetName = 0x3c; // FName
		constexpr auto Target = 0x48; // FRawDistributionVector
		constexpr auto bTargetAbsolute = 0x90; // char : 1
		constexpr auto bLockTarget = 0x90; // char : 1
		constexpr auto TargetTangentMethod = 0x94; // Beam2SourceTargetTangentMethod
		constexpr auto TargetTangent = 0x98; // FRawDistributionVector
		constexpr auto bLockTargetTangent = 0xe0; // char : 1
		constexpr auto TargetStrength = 0xe8; // FRawDistributionFloat
		constexpr auto bLockTargetStength = 0x118; // char : 1
		constexpr auto LockRadius = 0x11c; // float
	}

	namespace n_USteamNetConnection {
		constexpr auto bIsPassthrough = 0x1ad8; // bool
	}

	namespace n_UParticleSystemComponent {
		constexpr auto Template = 0x4b0; // UParticleSystem*
		constexpr auto EmitterMaterials = 0x4b8; // TArray<UMaterialInterface*>
		constexpr auto SkelMeshComponents = 0x4c8; // TArray<USkeletalMeshComponent*>
		constexpr auto bResetOnDetach = 0x4d9; // char : 1
		constexpr auto bUpdateOnDedicatedServer = 0x4d9; // char : 1
		constexpr auto bAllowRecycling = 0x4d9; // char : 1
		constexpr auto bAutoManageAttachment = 0x4d9; // char : 1
		constexpr auto bAutoAttachWeldSimulatedBodies = 0x4d9; // char : 1
		constexpr auto bWarmingUp = 0x4da; // char : 1
		constexpr auto bOverrideLODMethod = 0x4da; // char : 1
		constexpr auto bSkipUpdateDynamicDataDuringTick = 0x4da; // char : 1
		constexpr auto LODMethod = 0x4e5; // ParticleSystemLODMethod
		constexpr auto RequiredSignificance = 0x4e6; // EParticleSignificanceLevel
		constexpr auto InstanceParameters = 0x4e8; // TArray<FParticleSysParam>
		constexpr auto OnParticleSpawn = 0x4f8; // FMulticastInlineDelegate
		constexpr auto OnParticleBurst = 0x508; // FMulticastInlineDelegate
		constexpr auto OnParticleDeath = 0x518; // FMulticastInlineDelegate
		constexpr auto OnParticleCollide = 0x528; // FMulticastInlineDelegate
		constexpr auto bOldPositionValid = 0x550; // bool
		constexpr auto OldPosition = 0x554; // FVector
		constexpr auto PartSysVelocity = 0x560; // FVector
		constexpr auto WarmupTime = 0x56c; // float
		constexpr auto WarmupTickRate = 0x570; // float
		constexpr auto SecondsBeforeInactive = 0x578; // float
		constexpr auto MaxTimeBeforeForceUpdateTransform = 0x580; // float
		constexpr auto ReplayClips = 0x5a0; // TArray<UParticleSystemReplay*>
		constexpr auto CustomTimeDilation = 0x5b8; // float
		constexpr auto AutoAttachParent = 0x610; // TWeakObjectPtr<USceneComponent>
		constexpr auto AutoAttachSocketName = 0x618; // FName
		constexpr auto AutoAttachLocationRule = 0x620; // EAttachmentRule
		constexpr auto AutoAttachRotationRule = 0x621; // EAttachmentRule
		constexpr auto AutoAttachScaleRule = 0x622; // EAttachmentRule
		constexpr auto OnSystemFinished = 0x650; // FMulticastInlineDelegate
	}

	namespace n_UInterpTrackAkAudioRTPC {
		constexpr auto Param = 0x98; // FString
		constexpr auto bPlayOnReverse = 0xa8; // char : 1
		constexpr auto bContinueRTPCOnMatineeEnd = 0xa8; // char : 1
	}

	namespace n_UProjectileThrowComponent {
		constexpr auto OnThrowEnded = 0x1e0; // FMulticastInlineDelegate
		constexpr auto MoveTickData = 0x1f0; // FProjectileThrowTickData
		constexpr auto bUsesTuningDataTable = 0x218; // bool
		constexpr auto TuningDataIdentifier = 0x21c; // FName
		constexpr auto ProjectileThrowTuning = 0x228; // FProjectileThrowTuning
		constexpr auto ThrowConfig = 0x2a8; // FProjectileThrowConfig
		constexpr auto ReplicatedSpawnProjectileCount = 0x5f8; // uint16_t
		constexpr auto ReplicatedThrow = 0x5fc; // FReplicatedThrowInfo
		constexpr auto ThrowTarget = 0x618; // AActor*
	}

	namespace n_UAnimEvalSet_ItemStance_C {
		constexpr auto ItemStance = 0xc0; // FGameplayEval_SelectedItemAnimationStance
	}

	namespace n_UBoxComponent {
		constexpr auto BoxExtent = 0x4c8; // FVector
		constexpr auto LineThickness = 0x4d4; // float
	}

	namespace n_UMutilationHitReactionConfig {
		constexpr auto HitReactionSets = 0x38; // TArray<UMutilationHitReactionSet*>
	}

	namespace n_ULightComponent {
		constexpr auto Temperature = 0x260; // float
		constexpr auto MaxDrawDistance = 0x264; // float
		constexpr auto MaxDistanceFadeRange = 0x268; // float
		constexpr auto bUseTemperature = 0x26c; // char : 1
		constexpr auto ShadowMapChannel = 0x270; // int32_t
		constexpr auto MinRoughness = 0x278; // float
		constexpr auto SpecularScale = 0x27c; // float
		constexpr auto ShadowResolutionScale = 0x280; // float
		constexpr auto ShadowBias = 0x284; // float
		constexpr auto ShadowSlopeBias = 0x288; // float
		constexpr auto ShadowSharpen = 0x28c; // float
		constexpr auto ContactShadowLength = 0x290; // float
		constexpr auto ContactShadowLengthInWS = 0x294; // char : 1
		constexpr auto MoirePatternAdjustment = 0x298; // float
		constexpr auto ContactShadowStepCount = 0x29c; // int32_t
		constexpr auto ContactShadowDitherSwitch = 0x2a0; // int32_t
		constexpr auto ContactShadowDitherAdjustment = 0x2a4; // float
		constexpr auto ContactShadowDitherFrameMod = 0x2a8; // int32_t
		constexpr auto ContactShadowDistanceCurveMode = 0x2ac; // int32_t
		constexpr auto InverseSquaredFalloff = 0x2b0; // char : 1
		constexpr auto CastTranslucentShadows = 0x2b0; // char : 1
		constexpr auto bCastShadowsFromCinematicObjectsOnly = 0x2b0; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x2b0; // char : 1
		constexpr auto bForceCachedShadowsForMovablePrimitives = 0x2b0; // char : 1
		constexpr auto bAllowLightingSubsystemControl = 0x2b0; // char : 1
		constexpr auto LightingChannels = 0x2b4; // FLightingChannels
		constexpr auto ShadowChannels = 0x2b5; // FShadowChannels
		constexpr auto ShadowOpacity = 0x2b8; // float
		constexpr auto LightFunctionMaterial = 0x2c0; // UMaterialInterface*
		constexpr auto LightFunctionScale = 0x2c8; // FVector
		constexpr auto IESTexture = 0x2d8; // UTextureLightProfile*
		constexpr auto bUseIESBrightness = 0x2e0; // char : 1
		constexpr auto IESBrightnessScale = 0x2e4; // float
		constexpr auto LightFunctionFadeDistance = 0x2e8; // float
		constexpr auto DisabledBrightness = 0x2ec; // float
		constexpr auto bEnableLightShaftBloom = 0x2f0; // char : 1
		constexpr auto BloomScale = 0x2f4; // float
		constexpr auto BloomThreshold = 0x2f8; // float
		constexpr auto BloomMaxBrightness = 0x2fc; // float
		constexpr auto BloomTint = 0x300; // FColor
		constexpr auto bUseRayTracedDistanceFieldShadows = 0x304; // bool
		constexpr auto RayStartOffsetDepthScale = 0x308; // float
		constexpr auto Hardness = 0x30c; // float
		constexpr auto bOwnerNoSee = 0x310; // char : 1
		constexpr auto bOnlyOwnerSee = 0x310; // char : 1
		constexpr auto bCanBeVisCulled = 0x311; // bool
	}

	namespace n_UMaterialExpressionOneMinus {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UMovieSceneParameterSection {
		constexpr auto BoolParameterNamesAndCurves = 0xe8; // TArray<FBoolParameterNameAndCurve>
		constexpr auto ScalarParameterNamesAndCurves = 0xf8; // TArray<FScalarParameterNameAndCurve>
		constexpr auto Vector2DParameterNamesAndCurves = 0x108; // TArray<FVector2DParameterNameAndCurves>
		constexpr auto VectorParameterNamesAndCurves = 0x118; // TArray<FVectorParameterNameAndCurves>
		constexpr auto ColorParameterNamesAndCurves = 0x128; // TArray<FColorParameterNameAndCurves>
		constexpr auto TransformParameterNamesAndCurves = 0x138; // TArray<FTransformParameterNameAndCurves>
	}

	namespace n_UInteractiveToolManager {
		constexpr auto ActiveLeftTool = 0x38; // UInteractiveTool*
		constexpr auto ActiveRightTool = 0x40; // UInteractiveTool*
		constexpr auto ToolBuilders = 0x98; // TMap<FString, UInteractiveToolBuilder*>
	}

	namespace n_UGeometryCacheCodecRaw {
		constexpr auto DummyProperty = 0x40; // int32_t
	}

	namespace n_UAnimNotify_SetLeapDestination {
		constexpr auto Leap = 0x40; // UAnimContext_LeapComponent*
		constexpr auto Destination = 0x48; // UAnimContext_Transform*
	}

	namespace n_USoundCue {
		constexpr auto bPrimeOnLoad = 0x168; // char : 1
		constexpr auto FirstNode = 0x170; // USoundNode*
		constexpr auto VolumeMultiplier = 0x178; // float
		constexpr auto PitchMultiplier = 0x17c; // float
		constexpr auto AttenuationOverrides = 0x180; // FSoundAttenuationSettings
		constexpr auto SubtitlePriority = 0x520; // float
		constexpr auto bOverrideAttenuation = 0x528; // char : 1
		constexpr auto bExcludeFromRandomNodeBranchCulling = 0x528; // char : 1
		constexpr auto CookedQualityIndex = 0x52c; // int32_t
		constexpr auto bHasPlayWhenSilent = 0x530; // char : 1
	}

	namespace n_UGameplayCue_BulletImpact {
		constexpr auto ImpactTable = 0x30; // UImpactEffectConfig*
		constexpr auto bThirdPersonOnly = 0x38; // bool
		constexpr auto bGetCharacterMeshImpactResultFromHitResult = 0x39; // bool
		constexpr auto bOverrideImpactDirectionWithInstigatorForward = 0x3a; // bool
	}

	namespace n_ARoomVolume {
		constexpr auto Type = 0x2d8; // uint32_t
	}

	namespace n_UMovieSceneEventSection {
		constexpr auto Events = 0xe8; // FNameCurve
		constexpr auto EventData = 0x160; // FMovieSceneEventSectionData
	}

	namespace n_UParticleSystemReplay {
		constexpr auto ClipIDNumber = 0x30; // int32_t
	}

	namespace n_UInputKeySelector {
		constexpr auto WidgetStyle = 0x148; // FButtonStyle
		constexpr auto TextStyle = 0x3e0; // FTextBlockStyle
		constexpr auto SelectedKey = 0x680; // FInputChord
		constexpr auto Font = 0x6a0; // FSlateFontInfo
		constexpr auto Margin = 0x700; // FMargin
		constexpr auto ColorAndOpacity = 0x710; // FLinearColor
		constexpr auto KeySelectionText = 0x720; // FText
		constexpr auto NoKeySpecifiedText = 0x738; // FText
		constexpr auto bAllowModifierKeys = 0x750; // bool
		constexpr auto bAllowGamepadKeys = 0x751; // bool
		constexpr auto EscapeKeys = 0x758; // TArray<FKey>
		constexpr auto OnKeySelected = 0x768; // FMulticastInlineDelegate
		constexpr auto OnIsSelectingKeyChanged = 0x778; // FMulticastInlineDelegate
	}

	namespace n_UEnvQueryContext_PerceivedActors {
		constexpr auto Affiliation = 0x30; // FAISenseAffiliationFilter
		constexpr auto TagQueryToMatch = 0x38; // FGameplayTagQuery
	}

	namespace n_UPlatformCalloutImageUserWidget {
		constexpr auto PCTextureOverride = 0x458; // UTexture2D*
	}

	namespace n_UAnimComposite {
		constexpr auto AnimationTrack = 0xc0; // FAnimTrack
	}

	namespace n_AAkAcousticPortal {
		constexpr auto InitialState = 0x348; // AkAcousticPortalState
		constexpr auto ObstructionRefreshInterval = 0x34c; // float
		constexpr auto ObstructionCollisionChannel = 0x350; // ECollisionChannel
	}

	namespace n_UOptionDefaultsDeveloperSettings {
		constexpr auto VoiceVolume = 0x40; // float
		constexpr auto MicBoost = 0x44; // float
		constexpr auto MicThreshold = 0x48; // float
		constexpr auto bVOIPSideChainEnabled = 0x4c; // bool
		constexpr auto bSuppressAudioOnFocusLost = 0x4d; // bool
		constexpr auto MixProfileName = 0x50; // FName
		constexpr auto bStaminaBreathEnabled = 0x58; // bool
		constexpr auto GPUSettingsTable = 0x60; // TSoftObjectPtr<UDataTable>
	}

	namespace n_UAnimSingleNodeInstance {
		constexpr auto CurrentAsset = 0x2b8; // UAnimationAsset*
		constexpr auto PostEvaluateAnimEvent = 0x2c0; // FDelegate
	}

	namespace n_UClipReloadComponent {
		constexpr auto ReplicatedReloadData = 0x258; // FReplicatedReloadData
		constexpr auto ReloadLength = 0x260; // float
		constexpr auto ReloadAnimationLength = 0x264; // float
		constexpr auto ReloadAddTime = 0x268; // float
		constexpr auto bAutoReloadWhenEmpty = 0x26c; // bool
		constexpr auto ReloadMontageFP = 0x270; // UAnimMontage*
		constexpr auto ReloadMontage3P = 0x278; // UAnimMontage*
		constexpr auto AppliedTag = 0x280; // FGameplayTag
		constexpr auto BlockingTags = 0x288; // FGameplayTagContainer
		constexpr auto InterruptingTags = 0x2a8; // FGameplayTagContainer
		constexpr auto CancellingTags = 0x2c8; // FGameplayTagContainer
		constexpr auto BackgroundReloadAKE = 0x2e8; // UAkAudioEvent*
	}

	namespace n_UParticleModuleOrientationAxisLock {
		constexpr auto LockAxisFlags = 0x38; // EParticleAxisLock
	}

	namespace n_UPostRoundScreen {
		constexpr auto PanelInfoArray = 0x558; // TArray<FPostRoundPanelInfo>
	}

	namespace n_UGobiNavLinkComponent {
		constexpr auto NavGenerationData = 0x4d0; // FNavLinkGenerator
		constexpr auto CustomUserID = 0x580; // uint32_t
		constexpr auto RelativeLinkOffsets = 0x588; // TArray<FNavLinkOffset>
		constexpr auto EnabledNavAreaClass = 0x598; // UNavArea*
		constexpr auto BeginPlayNavAreaClass = 0x5b8; // UNavArea*
		constexpr auto bEnableBeginPlayNavAreaClass = 0x5c0; // bool
		constexpr auto HighClimbDistance = 0x5c4; // float
		constexpr auto ContextLocations = 0x5c8; // TArray<FVector>
		constexpr auto ContextDistances = 0x5d8; // TArray<float>
		constexpr auto ErrorTolerance = 0x5e8; // float
	}

	namespace n_UMaterialExpressionNoise {
		constexpr auto Position = 0x48; // FExpressionInput
		constexpr auto FilterWidth = 0x5c; // FExpressionInput
		constexpr auto Scale = 0x70; // float
		constexpr auto Quality = 0x74; // int32_t
		constexpr auto NoiseFunction = 0x78; // ENoiseFunction
		constexpr auto bTurbulence = 0x7c; // char : 1
		constexpr auto Levels = 0x80; // int32_t
		constexpr auto OutputMin = 0x84; // float
		constexpr auto OutputMax = 0x88; // float
		constexpr auto LevelScale = 0x8c; // float
		constexpr auto bTiling = 0x90; // char : 1
		constexpr auto RepeatSize = 0x94; // uint32_t
	}

	namespace n_UCardFan {
		constexpr auto OnShowExpandedCard = 0x160; // FMulticastInlineDelegate
		constexpr auto OnUserScrolled = 0x170; // FMulticastInlineDelegate
		constexpr auto CardWidgetClass = 0x180; // UUserWidget*
		constexpr auto ScrollBarStyle = 0x188; // FScrollBarStyle
		constexpr auto ScrollBarVisibility = 0x6a0; // ESlateVisibility
		constexpr auto ConsumeMouseWheel = 0x6a1; // EConsumeMouseWheel
		constexpr auto ScrollbarThickness = 0x6a4; // FVector2D
		constexpr auto ScrollbarPadding = 0x6ac; // FMargin
		constexpr auto bAlwaysShowScrollbar = 0x6bc; // bool
		constexpr auto bAlwaysShowScrollbarTrack = 0x6bd; // bool
		constexpr auto bScrollBarHasSizeWhenNotInUse = 0x6be; // bool
		constexpr auto bAllowOverscroll = 0x6bf; // bool
		constexpr auto bAnimateWheelScrolling = 0x6c0; // bool
		constexpr auto bHandleNavigation = 0x6c1; // bool
		constexpr auto NavigationDestination = 0x6c2; // EDescendantScrollDestination
		constexpr auto NavigationScrollPadding = 0x6c4; // float
		constexpr auto ClickDragKey = 0x6c8; // FKey
		constexpr auto bAllowClickDragScrolling = 0x6e0; // bool
		constexpr auto WheelScrollMultiplier = 0x6e4; // float
		constexpr auto ScrollAnimationSpeed = 0x6e8; // float
		constexpr auto MinChildSize = 0x6ec; // float
		constexpr auto ChildSpacing = 0x6f0; // float
		constexpr auto ExpandedCardWidget = 0x708; // UUserWidget*
	}

	namespace n_UGPEvalSet_FilterNavLink {
		constexpr auto AllowedNavAreas = 0x78; // TArray<UNavArea*>
		constexpr auto MaxStartRangeEval = 0x88; // FGameplayEval_Distance
		constexpr auto AllowedNavAreaEval = 0x158; // FGameplayEval_NavArea
	}

	namespace n_USoundGroups {
		constexpr auto SoundGroupProfiles = 0x30; // TArray<FSoundGroup>
	}

	namespace n_UPawnActionsComponent {
		constexpr auto ControlledPawn = 0xe8; // APawn*
		constexpr auto ActionStacks = 0xf0; // TArray<FPawnActionStack>
		constexpr auto ActionEvents = 0x100; // TArray<FPawnActionEvent>
		constexpr auto CurrentAction = 0x110; // UPawnAction*
	}

	namespace n_UMaterialExpressionRotateAboutAxis {
		constexpr auto NormalizedRotationAxis = 0x48; // FExpressionInput
		constexpr auto RotationAngle = 0x5c; // FExpressionInput
		constexpr auto PivotPoint = 0x70; // FExpressionInput
		constexpr auto Position = 0x84; // FExpressionInput
		constexpr auto Period = 0x98; // float
	}

	namespace n_UNiagaraDataInterfaceGrid2D {
		constexpr auto NumCellsX = 0xd8; // int32_t
		constexpr auto NumCellsY = 0xdc; // int32_t
		constexpr auto NumCellsMaxAxis = 0xe0; // int32_t
		constexpr auto NumAttributes = 0xe4; // int32_t
		constexpr auto SetGridFromMaxAxis = 0xe8; // bool
		constexpr auto WorldBBoxSize = 0xec; // FVector2D
	}

	namespace n_UGameDirectorSeamlessTravelData {
		constexpr auto TimeSinceLastHorde = 0x30; // float
	}

	namespace n_AGobiSplineMeshActor {
		constexpr auto EditableSpline = 0x2a0; // USplineComponent*
		constexpr auto GeneratedSubObjects = 0x2a8; // TArray<USplineMeshComponent*>
		constexpr auto PointNumbers = 0x2b8; // TArray<UTextRenderComponent*>
		constexpr auto bFinalized = 0x2c8; // bool
		constexpr auto bUseCollisionProfile = 0x2c9; // bool
		constexpr auto CollisionProfile = 0x2cc; // FName
		constexpr auto CollisionChannelToUse = 0x2d4; // ECollisionChannel
		constexpr auto CollisionEnabled = 0x2d5; // ECollisionEnabled
		constexpr auto SplineMeshMode = 0x2d6; // ESplineMeshMode
		constexpr auto ForwardAxis = 0x2d7; // ESplineMeshAxis
		constexpr auto Padding = 0x2d8; // float
		constexpr auto Mesh = 0x2e0; // UStaticMesh*
		constexpr auto bCastShadows = 0x2e8; // bool
		constexpr auto ForceLOD = 0x2e9; // int8_t
		constexpr auto bLockCurrentMeshArray = 0x2ea; // bool
		constexpr auto bContiguous = 0x2eb; // bool
		constexpr auto AvailableMeshes = 0x2f0; // TArray<FSplineMeshElement>
		constexpr auto bSequential = 0x300; // bool
		constexpr auto bPreventAdjancency = 0x301; // bool
		constexpr auto GlobalScale = 0x304; // FVector
		constexpr auto CachedGlobalScale = 0x310; // FVector
		constexpr auto PerInstanceData = 0x320; // TArray<FPerInstanceData>
		constexpr auto PerInstanceRotation = 0x330; // TArray<FVector>
		constexpr auto bUseCapMeshes = 0x340; // bool
		constexpr auto CapMeshes = 0x348; // FCapData
		constexpr auto bDrawOnlySpline = 0x368; // bool
		constexpr auto bShowDebugMaterials = 0x369; // bool
		constexpr auto DebugMaterials = 0x370; // TArray<UMaterialInterface*>
		constexpr auto bDrawDebugNumbers = 0x380; // bool
		constexpr auto DebugNumbersPrefs = 0x384; // FDebugNumbersPrefs
		constexpr auto MeshesToUse = 0x390; // TArray<FSplineMeshElement>
		constexpr auto Distances = 0x3a0; // TArray<float>
		constexpr auto DebugMaterialsToUse = 0x3b0; // TArray<UMaterialInterface*>
		constexpr auto MeshesCache = 0x3c0; // TArray<FSplineMeshElement>
	}

	namespace n_UBTService_BlackboardBase {
		constexpr auto BlackboardKey = 0x78; // FBlackboardKeySelector
	}

	namespace n_UDamageStatTracker {
		constexpr auto OnIncrementKillStat = 0x40; // FMulticastInlineDelegate
		constexpr auto SnitcherTagsQuery = 0x50; // FGameplayTagQuery
		constexpr auto CurrentCharacter = 0x98; // AGobiCharacter*
	}

	namespace n_UAkAudioBank {
		constexpr auto IsDialogueBank = 0x30; // bool
		constexpr auto IsCacheManaged = 0x31; // bool
		constexpr auto MemberEvents = 0x38; // TArray<FString>
	}

	namespace n_UGameplayEffectRecoilComponent {
		constexpr auto RecoilYawScaleMod = 0x250; // FGamePropertyFloatMod
		constexpr auto RecoilPitchScaleMod = 0x260; // FGamePropertyFloatMod
		constexpr auto RecoilMinRequiredYawScaleMod = 0x270; // FGamePropertyFloatMod
		constexpr auto RecoilMinRequiredPitchScaleMod = 0x280; // FGamePropertyFloatMod
		constexpr auto GunKickYawScaleMod = 0x290; // FGamePropertyFloatMod
		constexpr auto GunKickPitchScaleMod = 0x2a0; // FGamePropertyFloatMod
		constexpr auto GunKickRollScaleMod = 0x2b0; // FGamePropertyFloatMod
		constexpr auto GunKickMaxAngleScaleMod = 0x2c0; // FGamePropertyFloatMod
		constexpr auto PushbackInitialOffsetScaleMod = 0x2d0; // FGamePropertyFloatMod
		constexpr auto PushbackStabilizedOffsetScaleMod = 0x2e0; // FGamePropertyFloatMod
	}

	namespace n_UZombieMeshConfigMod {
		constexpr auto MeshConfigMod = 0xd0; // FSkeletalMeshConfigMod
	}

	namespace n_UMaterialExpressionLandscapeLayerSwitch {
		constexpr auto LayerUsed = 0x48; // FExpressionInput
		constexpr auto LayerNotUsed = 0x5c; // FExpressionInput
		constexpr auto ParameterName = 0x70; // FName
		constexpr auto PreviewUsed = 0x78; // char : 1
		constexpr auto ExpressionGUID = 0x7c; // FGuid
	}

	namespace n_UShadowMapTexture2D {
		constexpr auto ShadowmapFlags = 0xf0; // EShadowMapFlags
	}

	namespace n_UDocHealOtherLesson_BP_C {
		constexpr auto UberGraphFrame = 0x4e8; // FPointerToUberGraphFrame
	}

	namespace n_USourceEffectChorusPreset {
		constexpr auto Settings = 0x88; // FSourceEffectChorusSettings
	}

	namespace n_ULogoutCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UChargeComponent {
		constexpr auto OnChargeEnded = 0x1e0; // FMulticastInlineDelegate
		constexpr auto OnChargeBreakPressed = 0x1f0; // FMulticastInlineDelegate
		constexpr auto ChargePushingCount = 0x200; // int32_t
		constexpr auto StumbleImpact = 0x334; // FHitResult
		constexpr auto MoveTickData = 0x3bc; // FChargeMoveTickData
		constexpr auto CurrentActiveMontage = 0x3e0; // UAnimMontage*
		constexpr auto FilterSet = 0x3e8; // UGameplayEvaluatorSet*
		constexpr auto AccelerateMontages = 0x3f0; // TArray<UAnimMontage*>
		constexpr auto DecelerateMontages = 0x400; // TArray<UAnimMontage*>
		constexpr auto CharacterImpactMontages = 0x410; // TArray<UAnimMontage*>
		constexpr auto ImpactStumbleMontages = 0x420; // TArray<UAnimMontage*>
		constexpr auto DisableMovementInputScalars = 0x430; // TArray<FName>
		constexpr auto bStumbleOnWorldImpacts = 0x440; // bool
		constexpr auto bDeflectOnWorldImpacts = 0x441; // bool
		constexpr auto bPlayerCancelsChargeWhenFalling = 0x442; // bool
		constexpr auto MinTimeBeforeChargeButtonCancels = 0x444; // float
		constexpr auto bUsesBreakButton = 0x448; // bool
		constexpr auto MinTimeBeforeBackButtonCancels = 0x44c; // float
		constexpr auto BreakDeceleration = 0x450; // float
		constexpr auto bAIStopAtCliffs = 0x454; // bool
		constexpr auto bAICancelsChargeWhenFalling = 0x455; // bool
		constexpr auto StumbleImpactTable = 0x458; // UImpactEffectConfig*
		constexpr auto AppliedTags = 0x460; // FGameplayTagContainer
		constexpr auto RampUpTags = 0x480; // FGameplayTagContainer
		constexpr auto DeceleratingTags = 0x4a0; // FGameplayTagContainer
		constexpr auto CancelTags = 0x4c0; // FGameplayTagQuery
		constexpr auto AccelerateMontageTagQuery = 0x508; // FGameplayTagQuery
		constexpr auto BlockingTags = 0x550; // FGameplayTagQuery
		constexpr auto BlockingTargetTags = 0x598; // FGameplayTagQuery
		constexpr auto InterruptChargeCharacterTags = 0x5e0; // FGameplayTagQuery
		constexpr auto ChargeCollisionTag = 0x628; // FGameplayTag
		constexpr auto BlockingChargeImpactMontageTags = 0x630; // FGameplayTagQuery
		constexpr auto ChargingEffects = 0x678; // TArray<UGameplayEffect*>
		constexpr auto ChargeCollisionEffects = 0x688; // TArray<UGameplayEffect*>
		constexpr auto ImpactStumbleEffects = 0x698; // TArray<UGameplayEffect*>
		constexpr auto AudioStartEvents = 0x6a8; // TArray<FEnemyAudioEvent>
		constexpr auto AudioStopEvents = 0x6b8; // TArray<FEnemyAudioEvent>
		constexpr auto ChargePushMinTime = 0x6c8; // float
		constexpr auto MaxChargePathAngle = 0x6cc; // float
		constexpr auto MaxNavLinkClimbHeight = 0x6d4; // float
		constexpr auto TraceAheadDistance = 0x6d8; // float
		constexpr auto TraceAheadNavMeshDistance = 0x6dc; // float
		constexpr auto ImpactExplosionComponentTag = 0x6e0; // FGameplayTag
		constexpr auto ChargeTuning = 0x6e8; // FChargeTuning
	}

	namespace n_UAnimContext_DamageSource {
		constexpr auto DamageInfo = 0x70; // UAnimContext_DamageInfo*
	}

	namespace n_UAudioStateComponent {
		constexpr auto OnUIActivated = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnIncapStateChanged = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnResetMission = 0x108; // FMulticastInlineDelegate
		constexpr auto OnMissionSuccess = 0x118; // FMulticastInlineDelegate
		constexpr auto OnCampaignEnded = 0x128; // FMulticastInlineDelegate
		constexpr auto OnLoadingNextMission = 0x138; // FMulticastInlineDelegate
		constexpr auto AKERiddenSaferoomOpen = 0x148; // UAkAudioEvent*
		constexpr auto bIsFullscreen = 0x150; // bool
		constexpr auto bIsMoviePlaying = 0x151; // bool
		constexpr auto bIsInGameCinematicPlaying = 0x152; // bool
		constexpr auto bIsLoadingIntoNextMission = 0x153; // bool
	}

	namespace n_UBTService_ChaserRunEQS {
		constexpr auto WallClingBlackboardKey = 0x190; // FBlackboardKeySelector
	}

	namespace n_UEditableGameplayTagQueryExpression_AllExprMatch {
		constexpr auto Expressions = 0x30; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UMeleeGameCoachLesson {
		constexpr auto NearbyCharactersContext = 0x460; // UGameplayContext_NearbyCharacters*
	}

	namespace n_AVendorNPC {
		constexpr auto bDisableNags = 0x2a0; // bool
		constexpr auto DelayForAttract = 0x2a4; // float
		constexpr auto DialogueAmbientRate = 0x2a8; // FVector2D
		constexpr auto DialogueNagRate = 0x2b0; // FVector2D
		constexpr auto bIsSaferoomVendor = 0x2b8; // bool
		constexpr auto bEndingSaferoom = 0x2b9; // bool
		constexpr auto FocusTrackingUpdateRate = 0x2bc; // float
		constexpr auto DefaultRootComponent = 0x2c0; // USceneComponent*
		constexpr auto SkeletalMeshComponent = 0x2c8; // USkeletalMeshComponent*
		constexpr auto AudioEmitterComponent = 0x2d0; // UAkSkeletalComponent*
		constexpr auto DialogueComponent = 0x2d8; // UGobiDialogueComponent*
		constexpr auto AudioComponent = 0x2e0; // ULiteCharacterAudioComponent*
		constexpr auto FacialAnimationComponent = 0x2e8; // UFacialAnimationComponent*
		constexpr auto VoiceRowHandle = 0x2f0; // FDataTableRowHandle
		constexpr auto NagBoxComponent = 0x310; // UBoxComponent*
		constexpr auto State = 0x338; // EVendorAnimBehaviorState
	}

	namespace n_UNiagaraDataInterfaceNeighborGrid3D {
		constexpr auto MaxNeighborsPerVoxel = 0xf8; // uint32_t
	}

	namespace n_UPlayDeathReactionComponent {
		constexpr auto MontageSets = 0xe8; // TArray<UMontageSet*>
		constexpr auto DieToRagdollTag = 0xf8; // FGameplayTag
		constexpr auto ReplicatedDeathReactionMontage = 0x140; // UAnimMontage*
	}

	namespace n_UARGetCandidateObjectAsyncTaskBlueprintProxy {
		constexpr auto OnSuccess = 0x58; // FMulticastInlineDelegate
		constexpr auto OnFailed = 0x68; // FMulticastInlineDelegate
	}

	namespace n_UGizmoAxisScaleParameterSource {
		constexpr auto AxisSource = 0x50; // TScriptInterface<IGizmoAxisSource>
		constexpr auto TransformSource = 0x60; // TScriptInterface<IGizmoTransformSource>
		constexpr auto ScaleMultiplier = 0x70; // float
		constexpr auto Parameter = 0x74; // float
		constexpr auto LastChange = 0x78; // FGizmoFloatParameterChange
		constexpr auto CurScaleAxis = 0x80; // FVector
		constexpr auto CurScaleOrigin = 0x8c; // FVector
		constexpr auto InitialTransform = 0xa0; // FTransform
	}

	namespace n_UDistributionFloatUniformCurve {
		constexpr auto ConstantCurve = 0x40; // FInterpCurveVector2D
	}

	namespace n_UDemoNetDriver {
		constexpr auto RollbackNetStartupActors = 0x858; // TMap<FString, FRollbackNetStartupActorInfo>
		constexpr auto CheckpointSaveMaxMSPerFrame = 0xc6c; // float
		constexpr auto MulticastRecordOptions = 0xca0; // TArray<FMulticastRecordOptions>
		constexpr auto bIsLocalReplay = 0xd00; // bool
		constexpr auto SpectatorControllers = 0xd08; // TArray<APlayerController*>
	}

	namespace n_UNestBoilComponent {
		constexpr auto DamageSound = 0x180; // UAkAudioEvent*
	}

	namespace n_UMaterialExpressionConstant {
		constexpr auto R = 0x48; // float
	}

	namespace n_UAnimEvaluator_HitBone {
		constexpr auto HitBoneBelow = 0x50; // FName
		constexpr auto Hit = 0x58; // UAnimContext_HitResult*
	}

	namespace n_UGameplayEffectDamageFilter {
		constexpr auto OutgoingDamageFilter = 0x248; // UDamageFilter*
		constexpr auto IncomingDamageFilter = 0x250; // UDamageFilter*
		constexpr auto WeakSpotDamageMultiplierMod = 0x258; // FGamePropertyFloatMod
		constexpr auto OutgoingFriendlyFireScaleMod = 0x268; // FGamePropertyFloatMod
	}

	namespace n_UBorder {
		constexpr auto HorizontalAlignment = 0x160; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x161; // EVerticalAlignment
		constexpr auto ContentColorAndOpacity = 0x168; // FSlateColor
		constexpr auto ContentColorAndOpacityDelegate = 0x198; // FDelegate
		constexpr auto Padding = 0x1a8; // FMargin
		constexpr auto Background = 0x1b8; // FSlateBrush
		constexpr auto BackgroundDelegate = 0x248; // FDelegate
		constexpr auto BrushColor = 0x258; // FSlateColor
		constexpr auto BrushColorDelegate = 0x288; // FDelegate
		constexpr auto DesiredSizeScale = 0x298; // FVector2D
		constexpr auto bFlipForRightToLeftFlowDirection = 0x2a0; // bool
		constexpr auto OnMouseButtonDownEvent = 0x2a4; // FDelegate
		constexpr auto OnMouseButtonUpEvent = 0x2b4; // FDelegate
		constexpr auto OnMouseMoveEvent = 0x2c4; // FDelegate
		constexpr auto OnMouseDoubleClickEvent = 0x2d4; // FDelegate
	}

	namespace n_UHeroLOSVolumeComponent {
		constexpr auto LOSVolumeExtents = 0x4b0; // TArray<FVector>
		constexpr auto LOSTestPositions = 0x4c0; // TArray<FVector>
	}

	namespace n_UUniformInteger {
		constexpr auto Magnitude = 0xe8; // int32_t
	}

	namespace n_UMovieSceneLevelVisibilityTrack {
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_ULifeStateFakeDead {
		constexpr auto AutoRagdollFromBoneName = 0xa8; // FName
		constexpr auto DeadCapsuleCollisionProfile = 0xb0; // FName
		constexpr auto TurnOffCollisionOnComponents = 0xb8; // TArray<FGameplayTag>
		constexpr auto HealthResetPct = 0xc8; // float
		constexpr auto bShouldRagdoll = 0xcc; // bool
		constexpr auto MaxFakeDeathCount = 0xd0; // int32_t
		constexpr auto bOnFinalDeathBecomeInvulnerable = 0xd4; // bool
		constexpr auto RemovedTags = 0xd8; // FGameplayTagContainer
		constexpr auto FinalDeathAppliedTags = 0xf8; // FGameplayTagContainer
	}

	namespace n_UAnimNotifyState_SetTags {
		constexpr auto Tags = 0x38; // FGameplayTagContainer
		constexpr auto bApplyToAnimatingActor = 0x58; // bool
		constexpr auto Actor = 0x60; // UAnimContext_Actor*
		constexpr auto ActorTags = 0x68; // UAnimContext_GameplayTags*
	}

	namespace n_UNavRedirectorComponent {
		constexpr auto NavLink = 0xe8; // UGobiNavLinkComponent*
		constexpr auto NavMod = 0xf0; // UGobiNavModifierComponent*
	}

	namespace n_UGameplayAction {
		constexpr auto ActionTags = 0x30; // FGameplayTagContainer
		constexpr auto CancelActionsWithTag = 0x50; // FGameplayTagContainer
		constexpr auto BlockActionsWithTag = 0x70; // FGameplayTagContainer
		constexpr auto BlockActionsThatMatch = 0x90; // FGameplayTagQuery
		constexpr auto RunningActionTagRequirements = 0xd8; // FGameplayTagQuery
		constexpr auto ActivationOwnedTags = 0x120; // FGameplayTagContainer
		constexpr auto ActivatingActorTagRequirements = 0x140; // FGameplayTagQuery
		constexpr auto CooldownEffect = 0x188; // UGameplayEffect*
		constexpr auto CooldownEffectOnSuccess = 0x190; // UGameplayEffect*
		constexpr auto CooldownEffectOnFailed = 0x198; // UGameplayEffect*
		constexpr auto ActivationEffects = 0x1a0; // TArray<UGameplayEffect*>
		constexpr auto Priority = 0x1b0; // char
		constexpr auto bDisableSteeringBehavior = 0x1b1; // bool
		constexpr auto SteeringBehaviorOverride = 0x1b8; // USteeringBehavior*
		constexpr auto SteeringControlOverride = 0x1c0; // USteeringControl*
		constexpr auto ActivatingActor = 0x1e0; // AActor*
		constexpr auto ActivatingCharacter = 0x1e8; // AGobiCharacter*
	}

	namespace n_UFP_HeroLoco_Base_ABP_C {
		constexpr auto UberGraphFrame = 0x2c0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2c8; // FAnimNode_Root
		constexpr auto AnimGraphNode_TransitionResult_16 = 0x2f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_15 = 0x320; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_14 = 0x348; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_13 = 0x370; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_12 = 0x398; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_9 = 0x3c0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_11 = 0x438; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_8 = 0x468; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_10 = 0x4e0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_11 = 0x510; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_10 = 0x538; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_9 = 0x560; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_8 = 0x588; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0x5b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0x5d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x600; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x628; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x650; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x678; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_7 = 0x6a0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_9 = 0x718; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x748; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_8 = 0x7c0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x7f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_7 = 0x868; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x898; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_6 = 0x910; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult = 0x940; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x968; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_5 = 0x9e0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0xa10; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0xa88; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_3 = 0xab8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_3 = 0xb68; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer = 0xb98; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_2 = 0xc10; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_2 = 0xc40; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult = 0xcf0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0xd20; // FAnimNode_StateMachine
		constexpr auto WeaponAnimState = 0xdd0; // FWeaponAnimState
		constexpr auto HeroAnimState = 0xe14; // FHeroAnimStateFP
		constexpr auto FirstPersonAnimations = 0xe40; // FWeaponAnimsFP
		constexpr auto MinWalkStartSpeed = 0xe80; // float
		constexpr auto GobiAnimState = 0xe84; // FGobiAnimationState
		constexpr auto LadderState = 0xedc; // FLadderAnimStateFP
	}

	namespace n_AGobiPlayerController {
		constexpr auto PlayerSprays = 0x7f0; // UPlayerSpraysComponent*
		constexpr auto PlayerWaypoints = 0x7f8; // UPlayerWaypointsComponent*
		constexpr auto OnBeginPlayingState = 0x810; // FMulticastInlineDelegate
		constexpr auto OnEndPlayingState = 0x820; // FMulticastInlineDelegate
		constexpr auto OnBeginSpectatingState = 0x830; // FMulticastInlineDelegate
		constexpr auto OnEndSpectatingState = 0x840; // FMulticastInlineDelegate
		constexpr auto ScreenFXComponent = 0x850; // UScreenFXComponent*
		constexpr auto SyncedClientCVars = 0x85c; // FSyncedClientPlayerControllerCVars
		constexpr auto TriggerEffectsHandler = 0x870; // UTriggerEffectsHandler*
		constexpr auto CheatBoomClass = 0x878; // AActor*
		constexpr auto CheatMolotovClass = 0x880; // AActor*
		constexpr auto TriggerEffectsHandlerClass = 0x888; // UTriggerEffectsHandler*
	}

	namespace n_UDamageFilterComponent {
		constexpr auto InitialOutgoingDamageFilterClass = 0xe8; // UDamageFilter*
	}

	namespace n_UAnimNotifyState_TitanStage3TailThrashModeDisable {
		constexpr auto ThrashMode = 0x38; // ETitanStage3TailThrashMode
	}

	namespace n_USignInTask {
		constexpr auto GobiWebServices = 0x50; // UGobiWebServices*
		constexpr auto GobiWBP1 = 0x58; // UGobiWBP1*
		constexpr auto GameInstance = 0x60; // UGobiGameInstance*
		constexpr auto Dependencies = 0x68; // TArray<FSignInTaskDependency>
	}

	namespace n_ABaseball_Bat_BP_C {
		constexpr auto ItemAnimationData = 0x4e0; // UItemAnimationDataComponent*
		constexpr auto MeleeAttack = 0x4e8; // UTraceMeleeComponent*
	}

	namespace n_UBTService_Health {
		constexpr auto HealthBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto HealthLabelEnum = 0xa0; // UEnum*
		constexpr auto HealthRanges = 0xa8; // TArray<FHealthRange>
	}

	namespace n_UFTUETutorialScreen {
		constexpr auto BGTexture = 0x5d8; // TSoftObjectPtr<UTexture2D>
	}

	namespace n_USynthSamplePlayer {
		constexpr auto SoundWave = 0x710; // USoundWave*
		constexpr auto OnSampleLoaded = 0x718; // FMulticastInlineDelegate
		constexpr auto OnSamplePlaybackProgress = 0x728; // FMulticastInlineDelegate
	}

	namespace n_UMovieScenePropertyTrack {
		constexpr auto SectionToKey = 0x60; // UMovieSceneSection*
		constexpr auto PropertyName = 0x68; // FName
		constexpr auto PropertyPath = 0x70; // FString
		constexpr auto Sections = 0x80; // TArray<UMovieSceneSection*>
	}

	namespace n_UMaterialExpressionArcsineFast {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UListView {
		constexpr auto Orientation = 0x320; // EOrientation
		constexpr auto SelectionMode = 0x321; // ESelectionMode
		constexpr auto ConsumeMouseWheel = 0x322; // EConsumeMouseWheel
		constexpr auto bClearSelectionOnClick = 0x323; // bool
		constexpr auto bIsFocusable = 0x324; // bool
		constexpr auto EntrySpacing = 0x328; // float
		constexpr auto bReturnFocusToSelection = 0x32c; // bool
		constexpr auto ListItems = 0x330; // TArray<UObject*>
		constexpr auto BP_OnEntryInitialized = 0x350; // FMulticastInlineDelegate
		constexpr auto BP_OnItemClicked = 0x360; // FMulticastInlineDelegate
		constexpr auto BP_OnItemDoubleClicked = 0x370; // FMulticastInlineDelegate
		constexpr auto BP_OnItemIsHoveredChanged = 0x380; // FMulticastInlineDelegate
		constexpr auto BP_OnItemSelectionChanged = 0x390; // FMulticastInlineDelegate
		constexpr auto BP_OnItemScrolledIntoView = 0x3a0; // FMulticastInlineDelegate
	}

	namespace n_UTestMovieSceneTrack {
		constexpr auto bHighPassFilter = 0x60; // bool
		constexpr auto SectionArray = 0x68; // TArray<UMovieSceneSection*>
	}

	namespace n_UHitMarkerComponent {
		constexpr auto OnHitMarkerRequested = 0xe8; // FMulticastInlineDelegate
		constexpr auto RequiredVictimTags = 0xf8; // FGameplayTagQuery
	}

	namespace n_UMasterAudioSubmixCaptureProtocol {
		constexpr auto Filename = 0x60; // FString
	}

	namespace n_ASpawnLocalityVolume {
		constexpr auto DefaultWeight = 0x2d8; // float
		constexpr auto TagRequirements = 0x2e0; // FGameplayTagQuery
		constexpr auto CharacterSets = 0x328; // TArray<FSpawnLocalityCharacterSet>
	}

	namespace n_UWmfMediaSettings {
		constexpr auto AllowNonStandardCodecs = 0x30; // bool
		constexpr auto LowLatency = 0x31; // bool
		constexpr auto NativeAudioOut = 0x32; // bool
		constexpr auto HardwareAcceleratedVideoDecoding = 0x33; // bool
	}

	namespace n_UAnimEvaluator {
		constexpr auto bDrawDebug = 0x30; // bool
		constexpr auto Weight = 0x34; // float
		constexpr auto EvalType = 0x38; // EEvalType
		constexpr auto bInvertTest = 0x39; // bool
		constexpr auto ID = 0x3c; // int32_t
	}

	namespace n_UGizmoLocalVec2ParameterSource {
		constexpr auto Value = 0x50; // FVector2D
		constexpr auto LastChange = 0x58; // FGizmoVec2ParameterChange
	}

	namespace n_UVerticalBoxSlot {
		constexpr auto Size = 0x40; // FSlateChildSize
		constexpr auto Padding = 0x48; // FMargin
		constexpr auto HorizontalAlignment = 0x60; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x61; // EVerticalAlignment
	}

	namespace n_UNavCollisionBase {
		constexpr auto bIsDynamicObstacle = 0x30; // char : 1
	}

	namespace n_UAkSwitchInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettingsWithSampleRate
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettings
		constexpr auto AdvancedSettings = 0xb8; // FAkAdvancedInitializationSettingsWithMultiCoreRendering
		constexpr auto TRSSettings = 0xf0; // FAkTRSPerPlatformSettings
	}

	namespace n_UDistributionVectorParameterBase {
		constexpr auto ParameterName = 0x58; // FName
		constexpr auto MinInput = 0x60; // FVector
		constexpr auto MaxInput = 0x6c; // FVector
		constexpr auto MinOutput = 0x78; // FVector
		constexpr auto MaxOutput = 0x84; // FVector
		constexpr auto ParamModes = 0x90; // DistributionParamMode [0x3]
	}

	namespace n_UAudioCaptureComponent {
		constexpr auto JitterLatencyFrames = 0x710; // int32_t
	}

	namespace n_UGobiPlayerChallengeComponent {
		constexpr auto OnPlayerChallengeRankUpdated = 0xe8; // FMulticastInlineDelegate
		constexpr auto ChallengeRank = 0x100; // FGobiPlayerChallengeRank
	}

	namespace n_UEnvQueryGenerator_BlueprintBase {
		constexpr auto GeneratorsActionDescription = 0x58; // FText
		constexpr auto Context = 0x70; // UEnvQueryContext*
		constexpr auto GeneratedItemType = 0x78; // UEnvQueryItemType*
	}

	namespace n_UParticleModuleMeshMaterial {
		constexpr auto MeshMaterials = 0x38; // TArray<UMaterialInterface*>
	}

	namespace n_UNiagaraDataInterfaceSkeletalMesh {
		constexpr auto Source = 0x38; // AActor*
		constexpr auto MeshUserParameter = 0x40; // FNiagaraUserParameterBinding
		constexpr auto SourceComponent = 0x68; // USkeletalMeshComponent*
		constexpr auto SkinningMode = 0x70; // ENDISkeletalMesh_SkinningMode
		constexpr auto SamplingRegions = 0x78; // TArray<FName>
		constexpr auto WholeMeshLOD = 0x88; // int32_t
		constexpr auto FilteredBones = 0x90; // TArray<FName>
		constexpr auto FilteredSockets = 0xa0; // TArray<FName>
		constexpr auto ExcludeBoneName = 0xb0; // FName
		constexpr auto bExcludeBone = 0xb8; // char : 1
	}

	namespace n_UPostProcessComponent {
		constexpr auto Settings = 0x240; // FPostProcessSettings
		constexpr auto Priority = 0x7a0; // float
		constexpr auto BlendRadius = 0x7a4; // float
		constexpr auto BlendWeight = 0x7a8; // float
		constexpr auto bEnabled = 0x7ac; // char : 1
		constexpr auto bUnbound = 0x7ac; // char : 1
	}

	namespace n_ALevelSequenceActor {
		constexpr auto PlaybackSettings = 0x2b0; // FMovieSceneSequencePlaybackSettings
		constexpr auto SequencePlayer = 0x2c8; // ULevelSequencePlayer*
		constexpr auto LevelSequence = 0x2d0; // FSoftObjectPath
		constexpr auto AdditionalEventReceivers = 0x2e8; // TArray<AActor*>
		constexpr auto CameraSettings = 0x2f8; // FLevelSequenceCameraSettings
		constexpr auto BurnInOptions = 0x300; // ULevelSequenceBurnInOptions*
		constexpr auto BindingOverrides = 0x308; // UMovieSceneBindingOverrides*
		constexpr auto bAutoPlay = 0x310; // char : 1
		constexpr auto bOverrideInstanceData = 0x310; // char : 1
		constexpr auto bReplicatePlayback = 0x310; // char : 1
		constexpr auto DefaultInstanceData = 0x318; // UObject*
		constexpr auto BurnInInstance = 0x320; // ULevelSequenceBurnIn*
		constexpr auto bShowBurnin = 0x328; // bool
	}

	namespace n_UNavLinkComponent {
		constexpr auto Links = 0x4b8; // TArray<FNavigationLink>
	}

	namespace n_UAnimEvalSet_Shared_DestructibleAttack_C {
		constexpr auto Distance To Destructible = 0xc0; // FGameplayEval_Distance
		constexpr auto Z DistanceTo Destructible = 0x190; // FGameplayEval_Distance
		constexpr auto PlayedRecently = 0x260; // FAnimEval_MontageLastPlayed
		constexpr auto BlockedByPawn = 0x2b0; // FGameplayEval_BlockedByPawn
	}

	namespace n_UMapSelectUserWidget {
		constexpr auto OnMapSelected = 0x458; // FMulticastInlineDelegate
		constexpr auto OnMapFocused = 0x468; // FMulticastInlineDelegate
		constexpr auto HeaderWidgets = 0x478; // TSet<UGobiUserWidget*>
		constexpr auto MapWidgets = 0x4c8; // TSet<UMatchmakingSettingEntryUserWidget*>
	}

	namespace n_UEnvQueryTest_IsCurrentEnemy {
		constexpr auto StickyTimeDP = 0x208; // FAIDataProviderFloatValue
	}

	namespace n_UBossPositionTrigger {
		constexpr auto TestInterval = 0x40; // float
		constexpr auto WarningNameCooldown = 0x44; // float
		constexpr auto SpottedByEnemyCooldown = 0x4c; // float
		constexpr auto CommonFilterClass = 0x58; // TSoftClassPtr<UObject>
		constexpr auto BossReqsMapData = 0x80; // TMap<TSoftClassPtr<UObject>, FBossReqsData>
		constexpr auto FleeTag = 0xd0; // FGameplayTag
		constexpr auto DelayForBossFlee = 0xd8; // float
		constexpr auto BossFleeCooldown = 0xdc; // float
	}

	namespace n_UMaterialExpressionTextureSampleParameter {
		constexpr auto ParameterName = 0xd8; // FName
		constexpr auto ExpressionGUID = 0xe0; // FGuid
		constexpr auto Group = 0xf0; // FName
	}

	namespace n_USoundNodeModulator {
		constexpr auto PitchMin = 0x60; // float
		constexpr auto PitchMax = 0x64; // float
		constexpr auto VolumeMin = 0x68; // float
		constexpr auto VolumeMax = 0x6c; // float
	}

	namespace n_UAkWindowsInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettingsWithSampleRate
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xc0; // FAkWindowsAdvancedInitializationSettings
		constexpr auto TRSSettings = 0x100; // FAkTRSPerPlatformSettings
	}

	namespace n_UInterpTrackInstAkAudioEvent {
		constexpr auto LastUpdatePosition = 0x30; // float
	}

	namespace n_UForceFeedbackComponent {
		constexpr auto ForceFeedbackEffect = 0x230; // UForceFeedbackEffect*
		constexpr auto bAutoDestroy = 0x238; // char : 1
		constexpr auto bStopWhenOwnerDestroyed = 0x238; // char : 1
		constexpr auto bLooping = 0x238; // char : 1
		constexpr auto bIgnoreTimeDilation = 0x238; // char : 1
		constexpr auto bOverrideAttenuation = 0x238; // char : 1
		constexpr auto IntensityMultiplier = 0x23c; // float
		constexpr auto AttenuationSettings = 0x240; // UForceFeedbackAttenuation*
		constexpr auto AttenuationOverrides = 0x248; // FForceFeedbackAttenuationSettings
		constexpr auto OnForceFeedbackFinished = 0x2f8; // FMulticastInlineDelegate
	}

	namespace n_UCaravanSelectPanelUserWidget {
		constexpr auto LastKnownCaravans = 0x458; // TArray<FCaravanInstance>
	}

	namespace n_UGameplayEffectTriggerHorde {
		constexpr auto HordeLabel = 0x238; // FString
	}

	namespace n_UGobiWebServices {
		constexpr auto WebServiceMatchmakingAPI = 0x30; // UWebServiceMatchmakingAPI*
		constexpr auto WebServiceSessionAPI = 0x38; // UWebServiceSessionAPI*
		constexpr auto AgoraLeaderboardsClient = 0x40; // UWebServiceAgoraHydraLeaderboards*
		constexpr auto AgoraCommerceClient = 0x48; // UWebServiceAgoraHydraCommerce*
		constexpr auto WebServiceAgoraHydraAuthAPI = 0x50; // UWebServiceAgoraHydraAuthAPI*
		constexpr auto AgoraSSCClient = 0x58; // UWebServiceAgoraHydraSSC*
	}

	namespace n_UWeaponTracer {
		constexpr auto ParticleSystem = 0x38; // UParticleSystem*
		constexpr auto FadeDuration = 0x40; // float
		constexpr auto Material = 0x48; // UMaterialInterface*
	}

	namespace n_UNetDriver {
		constexpr auto NetConnectionClassName = 0x38; // FString
		constexpr auto ReplicationDriverClassName = 0x48; // FString
		constexpr auto MaxDownloadSize = 0x58; // int32_t
		constexpr auto bClampListenServerTickRate = 0x5c; // char : 1
		constexpr auto NetServerMaxTickRate = 0x60; // int32_t
		constexpr auto MaxNetTickRate = 0x64; // int32_t
		constexpr auto MaxInternetClientRate = 0x68; // int32_t
		constexpr auto MaxClientRate = 0x6c; // int32_t
		constexpr auto ServerTravelPause = 0x70; // float
		constexpr auto SpawnPrioritySeconds = 0x74; // float
		constexpr auto RelevantTimeout = 0x78; // float
		constexpr auto KeepAliveTime = 0x7c; // float
		constexpr auto InitialConnectTimeout = 0x80; // float
		constexpr auto ConnectionTimeout = 0x84; // float
		constexpr auto TimeoutMultiplierForUnoptimizedBuilds = 0x88; // float
		constexpr auto bNoTimeouts = 0x8c; // bool
		constexpr auto bNeverApplyNetworkEmulationSettings = 0x8d; // bool
		constexpr auto ServerConnection = 0x90; // UNetConnection*
		constexpr auto ClientConnections = 0x98; // TArray<UNetConnection*>
		constexpr auto RecentlyDisconnectedTrackingTime = 0x108; // int32_t
		constexpr auto World = 0x148; // UWorld*
		constexpr auto WorldPackage = 0x150; // UPackage*
		constexpr auto NetConnectionClass = 0x178; // UObject*
		constexpr auto ReplicationDriverClass = 0x180; // UObject*
		constexpr auto NetDriverName = 0x198; // FName
		constexpr auto ChannelDefinitions = 0x1a0; // TArray<FChannelDefinition>
		constexpr auto ChannelDefinitionMap = 0x1b0; // TMap<FName, FChannelDefinition>
		constexpr auto ActorChannelPool = 0x200; // TArray<UChannel*>
		constexpr auto Time = 0x218; // float
		constexpr auto ReplicationDriver = 0x700; // UReplicationDriver*
	}

	namespace n_UOnPlayerStaminaStateChangedTrigger {
		constexpr auto AllCharacterStaminaInfo = 0x50; // TArray<FCharacterStaminaInfo>
		constexpr auto TickTimerInterval = 0x60; // float
	}

	namespace n_USteeringBehavior_Pursue {
		constexpr auto TargetActor = 0x58; // UAnimContext_Actor*
		constexpr auto bIgnoreZ = 0x60; // bool
	}

	namespace n_APlayerTrackingAudioVolume {
		constexpr auto SoundSource = 0x318; // UAkComponent*
		constexpr auto bAudioPlayOnStart = 0x320; // bool
		constexpr auto bDrawDebugSphere = 0x321; // bool
	}

	namespace n_UWrapBoxSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto bFillEmptySpace = 0x50; // bool
		constexpr auto FillSpanWhenLessThan = 0x54; // float
		constexpr auto HorizontalAlignment = 0x58; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x59; // EVerticalAlignment
	}

	namespace n_USpacer {
		constexpr auto Size = 0x148; // FVector2D
	}

	namespace n_UZombieCancelChannelHintUserWidget {
		constexpr auto VisibilityTagQuery = 0x458; // FGameplayTagQuery
	}

	namespace n_UMovieSceneMaterialTrack {
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UAvoidanceManager {
		constexpr auto DefaultTimeToLive = 0x38; // float
		constexpr auto LockTimeAfterAvoid = 0x3c; // float
		constexpr auto LockTimeAfterClean = 0x40; // float
		constexpr auto DeltaTimeToPredict = 0x44; // float
		constexpr auto ArtificialRadiusExpansion = 0x48; // float
		constexpr auto TestHeightDifference = 0x4c; // float
		constexpr auto HeightCheckMargin = 0x50; // float
	}

	namespace n_UInterpTrackInstSlomo {
		constexpr auto OldTimeDilation = 0x30; // float
	}

	namespace n_UBTService_GobiRunEQS {
		constexpr auto bRequiresBlackboardCondition = 0x138; // bool
		constexpr auto BlackboardCondition = 0x139; // EBasicKeyOperation
		constexpr auto TagRequirements = 0x140; // FGameplayTagQuery
		constexpr auto bAllowsAnyObject = 0x188; // bool
	}

	namespace n_UNPCHealthDamagedTrigger {
		constexpr auto BulletDamageTypeTag = 0x50; // FGameplayTag
		constexpr auto ChanceForFriendlyFire = 0x58; // float
		constexpr auto ReactionCooldown = 0x5c; // float
	}

	namespace n_URelationshipSettings {
		constexpr auto OutgoingFriendInvites = 0x98; // TMap<FString, FRelationshipOutgoingFriendInvite>
		constexpr auto IncomingFriendInvites = 0xe8; // TMap<FString, FRelationshipIncomingFriendInvite>
	}

	namespace n_UVectorFieldAnimated {
		constexpr auto Texture = 0x50; // UTexture2D*
		constexpr auto ConstructionOp = 0x58; // EVectorFieldConstructionOp
		constexpr auto VolumeSizeX = 0x5c; // int32_t
		constexpr auto VolumeSizeY = 0x60; // int32_t
		constexpr auto VolumeSizeZ = 0x64; // int32_t
		constexpr auto SubImagesX = 0x68; // int32_t
		constexpr auto SubImagesY = 0x6c; // int32_t
		constexpr auto FrameCount = 0x70; // int32_t
		constexpr auto FramesPerSecond = 0x74; // float
		constexpr auto bLoop = 0x78; // char : 1
		constexpr auto NoiseField = 0x80; // UVectorFieldStatic*
		constexpr auto NoiseScale = 0x88; // float
		constexpr auto NoiseMax = 0x8c; // float
	}

	namespace n_URespawnActorComponent {
		constexpr auto Payload = 0xf0; // FRespawnPayload
	}

	namespace n_UEdGraphNode {
		constexpr auto DeprecatedPins = 0x40; // TArray<UEdGraphPin_Deprecated*>
		constexpr auto NodePosX = 0x50; // int32_t
		constexpr auto NodePosY = 0x54; // int32_t
		constexpr auto NodeWidth = 0x58; // int32_t
		constexpr auto NodeHeight = 0x5c; // int32_t
		constexpr auto AdvancedPinDisplay = 0x60; // ENodeAdvancedPins
		constexpr auto EnabledState = 0x61; // ENodeEnabledState
		constexpr auto bDisplayAsDisabled = 0x63; // char : 1
		constexpr auto bUserSetEnabledState = 0x63; // char : 1
		constexpr auto bIsNodeEnabled = 0x63; // char : 1
		constexpr auto bHasCompilerMessage = 0x63; // char : 1
		constexpr auto NodeComment = 0x68; // FString
		constexpr auto ErrorType = 0x78; // int32_t
		constexpr auto ErrorMsg = 0x80; // FString
		constexpr auto NodeGuid = 0x90; // FGuid
	}

	namespace n_UBaseMediaSource {
		constexpr auto PlayerName = 0x88; // FName
	}

	namespace n_UAnimEvalSet_Shared_DeathReaction_BoneArray_C {
		constexpr auto AvatarHitDirection = 0xc0; // FGameplayEval_Angle
		constexpr auto DamageType = 0x120; // FGameplayEval_DamageType
		constexpr auto DamageBone = 0x1e0; // FGameplayEval_HitReactionBone
		constexpr auto DistanceToDamageSource = 0x290; // FGameplayEval_Distance
		constexpr auto AvatarHealth = 0x360; // FGameplayEval_Health
		constexpr auto RandomChance = 0x3b8; // FGameplayEval_RandomChance
		constexpr auto HasTarget = 0x408; // FGameplayEval_HasContext
		constexpr auto AvatarTags = 0x458; // FGameplayEval_GameplayTags
	}

	namespace n_UWorldComposition {
		constexpr auto TilesStreaming = 0x50; // TArray<ULevelStreaming*>
		constexpr auto TilesStreamingTimeThreshold = 0x60; // double
		constexpr auto bLoadAllTilesDuringCinematic = 0x68; // bool
		constexpr auto bRebaseOriginIn3DSpace = 0x69; // bool
		constexpr auto RebaseOriginDistance = 0x6c; // float
	}

	namespace n_UEditableGameplayTagQueryExpression_AllTagsMatch {
		constexpr auto Tags = 0x30; // FGameplayTagContainer
	}

	namespace n_USubmixEffectFlexiverbPreset {
		constexpr auto Settings = 0x80; // FSubmixEffectFlexiverbSettings
	}

	namespace n_UOverlaySlot {
		constexpr auto Padding = 0x48; // FMargin
		constexpr auto HorizontalAlignment = 0x58; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x59; // EVerticalAlignment
	}

	namespace n_ACommonArmored_AICharacterBP_C {
		constexpr auto Armor = 0x13f8; // UArmorComponent*
	}

	namespace n_UAnimNotify_TRSEvent {
		constexpr auto EventName = 0x40; // FName
	}

	namespace n_UHUDScreen {
		constexpr auto OnHealingStart = 0x558; // FMulticastInlineDelegate
		constexpr auto OnHealingEnd = 0x568; // FMulticastInlineDelegate
		constexpr auto MissionStartEvent = 0x578; // UAkAudioEvent*
		constexpr auto MissionEndEvent = 0x580; // UAkAudioEvent*
		constexpr auto ObjectiveStartEvent = 0x588; // UAkAudioEvent*
		constexpr auto ObjectiveEndEvent = 0x590; // UAkAudioEvent*
		constexpr auto OnCommWheelVisibilityChanged = 0x598; // FMulticastInlineDelegate
		constexpr auto CenterBannerMessages = 0x5a8; // TArray<FCenterBannerMessage>
		constexpr auto DamageNumberInfos = 0x5b8; // TArray<FDamageNumberInfo>
		constexpr auto CenteredPanel = 0x6c8; // UPanelWidget*
	}

	namespace n_UGranularSynth {
		constexpr auto GranulatedSoundWave = 0x710; // USoundWave*
	}

	namespace n_UGameCoachSubsystem {
		constexpr auto GameCoach = 0x38; // UGameCoach*
	}

	namespace n_UEnvQueryTest_DistanceMapBasic {
		constexpr auto DistanceMapSource = 0x208; // UEnvQueryContext*
		constexpr auto DistanceMapNavMesh = 0x210; // FNavAgentSelector
		constexpr auto ItemsWithNoDistanceShould = 0x214; // EEnvItemStatus
	}

	namespace n_UInterestingMomentComponent {
		constexpr auto GameplayAnalyticsManager = 0xe8; // AGameplayAnalyticsManager*
	}

	namespace n_UOnlineSessionClient {
		constexpr auto bIsFromInvite = 0x1e0; // bool
		constexpr auto bHandlingDisconnect = 0x1e1; // bool
	}

	namespace n_UOnlineSettings {
		constexpr auto VoicePreference = 0x99; // EMatchmakingVoicePreference
		constexpr auto bCrossPlayEnabled = 0x9a; // bool
		constexpr auto GroupInvitePrivacy = 0x9b; // EGroupInvitePrivacy
		constexpr auto ActiveMatches = 0xa0; // TArray<FString>
	}

	namespace n_UGameplayTask {
		constexpr auto InstanceName = 0x38; // FName
		constexpr auto ResourceOverlapPolicy = 0x42; // ETaskResourceOverlapPolicy
		constexpr auto ChildTask = 0x68; // UGameplayTask*
	}

	namespace n_UEnvQueryTest_Voronoi {
		constexpr auto RegionSource = 0x208; // UEnvQueryContext*
		constexpr auto SampleSources = 0x210; // UEnvQueryContext*
	}

	namespace n_UMaterialExpressionClamp {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto Min = 0x5c; // FExpressionInput
		constexpr auto Max = 0x70; // FExpressionInput
		constexpr auto ClampMode = 0x84; // EClampMode
		constexpr auto MinDefault = 0x88; // float
		constexpr auto MaxDefault = 0x8c; // float
	}

	namespace n_UVendorScreen {
		constexpr auto ItemSubcategoryWidget = 0x588; // UVendorSubcategoryUserWidget*
		constexpr auto CategoryGroups = 0x590; // TArray<FCategoryGroup>
		constexpr auto LastSeenVendorStock = 0x5f0; // TArray<FVendorStockItem>
		constexpr auto ErrorSound = 0x600; // FSlateSound
		constexpr auto InventoryComponent = 0x618; // TSoftObjectPtr<UInventoryComponent>
	}

	namespace n_UGizmoArrowComponent {
		constexpr auto Direction = 0x4d0; // FVector
		constexpr auto Gap = 0x4dc; // float
		constexpr auto Length = 0x4e0; // float
		constexpr auto Thickness = 0x4e4; // float
	}

	namespace n_UGizmoCircleComponent {
		constexpr auto Normal = 0x4d0; // FVector
		constexpr auto Radius = 0x4dc; // float
		constexpr auto Thickness = 0x4e0; // float
		constexpr auto NumSides = 0x4e4; // int32_t
		constexpr auto bViewAligned = 0x4e8; // bool
		constexpr auto bOnlyAllowFrontFacingHits = 0x4e9; // bool
	}

	namespace n_UVFXCorpseManager {
		constexpr auto OnFadeNearby = 0x58; // FMulticastInlineDelegate
	}

	namespace n_APopupPromptVolume {
		constexpr auto PopupTitle = 0x328; // FText
		constexpr auto PopupMessage = 0x340; // FText
		constexpr auto ButtonCombo = 0x358; // EPopupButtonCombo
	}

	namespace n_AAISpawnActor_Sleeper_Wall_BP_C {
		constexpr auto HeroLOSVolume = 0x5b0; // UHeroLOSVolumeComponent*
	}

	namespace n_ATRSPortal {
		constexpr auto bDisableAfterDistance = 0x3b0; // bool
		constexpr auto MaxDistance = 0x3b4; // float
		constexpr auto bEnabled = 0x3b8; // bool
		constexpr auto bIncludeOutdoorSectors = 0x3b9; // bool
		constexpr auto bExclusiveOutdoorSectors = 0x3ba; // bool
	}

	namespace n_UAnimNotify_SS_Human_C {
		constexpr auto HumanSound_1 = 0x58; // SharedSurvivorAnimSound_Enum
	}

	namespace n_UCardPaginatorUserWidget {
		constexpr auto OnDragDrop = 0x458; // FMulticastInlineDelegate
		constexpr auto OnCardFocused = 0x468; // FMulticastInlineDelegate
		constexpr auto OnCardUnfocused = 0x478; // FMulticastInlineDelegate
		constexpr auto PageText = 0x488; // UTextBlock*
		constexpr auto PagesText = 0x490; // UGobiTextBlock*
		constexpr auto CardWrapBox = 0x498; // UWrapBox*
		constexpr auto PrevPageButton = 0x4a0; // UGobiUserWidget*
		constexpr auto NextPageButton = 0x4a8; // UGobiUserWidget*
		constexpr auto CARDS_PER_PAGE = 0x4b0; // int32_t
		constexpr auto CardClass = 0x4b8; // USelectableGameplayCardUserWidget*
		constexpr auto NoCardsMessage = 0x4c0; // FText
	}

	namespace n_UParticleModuleLocationPrimitiveSphere {
		constexpr auto StartRadius = 0xb8; // FRawDistributionFloat
	}

	namespace n_USceneCaptureComponent {
		constexpr auto PrimitiveRenderMode = 0x230; // ESceneCapturePrimitiveRenderMode
		constexpr auto CaptureSource = 0x231; // ESceneCaptureSource
		constexpr auto bCaptureEveryFrame = 0x232; // char : 1
		constexpr auto bCaptureOnMovement = 0x232; // char : 1
		constexpr auto bAlwaysPersistRenderingState = 0x233; // bool
		constexpr auto HiddenComponents = 0x238; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
		constexpr auto HiddenActors = 0x248; // TArray<AActor*>
		constexpr auto ShowOnlyComponents = 0x258; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
		constexpr auto ShowOnlyActors = 0x268; // TArray<AActor*>
		constexpr auto LODDistanceFactor = 0x278; // float
		constexpr auto MaxViewDistanceOverride = 0x27c; // float
		constexpr auto CaptureSortPriority = 0x280; // int32_t
		constexpr auto bUseRayTracingIfEnabled = 0x284; // bool
		constexpr auto ShowFlagSettings = 0x288; // TArray<FEngineShowFlagsSetting>
		constexpr auto ProfilingEventName = 0x2a8; // FString
	}

	namespace n_UAnimNotifyState_AttackWindow {
		constexpr auto AttackVolumeTag = 0x38; // FGameplayTag
		constexpr auto AttackGameplayEffects = 0x40; // TArray<UGameplayEffect*>
		constexpr auto bResetOverlaps = 0x50; // bool
		constexpr auto bUpdateOverlaps = 0x51; // bool
		constexpr auto bOverrideAttackVolumeCollision = 0x52; // bool
		constexpr auto AttackVolumeCollisionProfile = 0x54; // FCollisionProfileName
	}

	namespace n_UMatchmakingPoolManager {
		constexpr auto PoolConfigs = 0x30; // TArray<FMatchmakingPoolConfig>
		constexpr auto GobiWebServices = 0x40; // UGobiWebServices*
		constexpr auto SequenceMessagesTimeout = 0x60; // float
		constexpr auto SequenceSessionJoinTimeout = 0x64; // float
	}

	namespace n_UInterpTrackAkAudioEvent {
		constexpr auto Events = 0x98; // TArray<FAkAudioEventTrackKey>
		constexpr auto bContinueEventOnMatineeEnd = 0xa8; // char : 1
	}

	namespace n_UAISense_TRSHearing {
		constexpr auto NoiseEvents = 0x88; // TArray<FAITRSNoiseEvent>
		constexpr auto SpeedOfSoundSq = 0x98; // float
	}

	namespace n_UAudioInteractableComponent {
		constexpr auto AudioToPlay = 0x230; // UAkAudioEvent*
		constexpr auto bCanBeDamaged = 0x238; // bool
		constexpr auto bCanBeUsed = 0x239; // bool
		constexpr auto DefaultPromptText = 0x240; // FText
		constexpr auto Cooldown = 0x258; // float
		constexpr auto HealthComponent = 0x260; // UHealthComponent*
		constexpr auto UsableComponent = 0x268; // UUsableComponent*
	}

	namespace n_UMaterialExpressionClearCoatNormalCustomOutput {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UCardListenerComponent {
		constexpr auto CardRequestToTagMapping = 0xe8; // TArray<FCardRequestToCueData>
		constexpr auto RequestCounter = 0xf8; // int32_t
		constexpr auto RequestIndex = 0xfc; // int32_t
	}

	namespace n_UAmmoDragPayload {
		constexpr auto AmmoType = 0x38; // EAmmoType
		constexpr auto NumToDrop = 0x3c; // int32_t
	}

	namespace n_UProceduralSnapToGroundComponent {
		constexpr auto ProceduralPhase = 0xf1; // EProceduralBuildPhase
		constexpr auto TraceZOffset = 0xf4; // float
		constexpr auto TraceDistance = 0xf8; // float
		constexpr auto TraceProfileName = 0xfc; // FCollisionProfileName
	}

	namespace n_UProjectileSimple {
		constexpr auto MaxLifetime = 0x94; // float
		constexpr auto CollisionRadius = 0x98; // float
		constexpr auto CollisionChannel = 0x9c; // ECollisionChannel
		constexpr auto CharacterCollisionRadius = 0xa0; // float
		constexpr auto ContinueMovingIfHitActorWithTags = 0xa8; // FGameplayTagQuery
		constexpr auto ImpactEffectConfig = 0xf0; // UImpactEffectConfig*
		constexpr auto bSpawnImpactDeferred = 0xf8; // bool
		constexpr auto bAlsoImpactGroundIfImpactedCharacter = 0xf9; // bool
		constexpr auto GroundTraceDownDistance = 0xfc; // float
		constexpr auto bApplyDamage = 0x100; // bool
		constexpr auto DamageAmount = 0x104; // float
		constexpr auto DamageType = 0x108; // UGobiDamageType*
	}

	namespace n_UDatasmithSpotLightComponentTemplate {
		constexpr auto InnerConeAngle = 0x38; // float
		constexpr auto OuterConeAngle = 0x3c; // float
	}

	namespace n_UNiagaraScript {
		constexpr auto Usage = 0x30; // ENiagaraScriptUsage
		constexpr auto UsageIndex = 0x34; // int32_t
		constexpr auto UsageId = 0x38; // FGuid
		constexpr auto RapidIterationParameters = 0x48; // FNiagaraParameterStore
		constexpr auto ScriptExecutionParamStore = 0x100; // FNiagaraScriptExecutionParameterStore
		constexpr auto ScriptExecutionBoundParameters = 0x1d8; // TArray<FNiagaraBoundParameter>
		constexpr auto CachedScriptVMId = 0x1e8; // FNiagaraVMExecutableDataId
		constexpr auto CachedScriptVM = 0x3e0; // FNiagaraVMExecutableData
		constexpr auto CachedParameterCollectionReferences = 0x508; // TArray<UNiagaraParameterCollection*>
		constexpr auto CachedDefaultDataInterfaces = 0x518; // TArray<FNiagaraScriptDataInterfaceInfo>
	}

	namespace n_UMediaComponent {
		constexpr auto MediaTexture = 0xe8; // UMediaTexture*
		constexpr auto MediaPlayer = 0xf0; // UMediaPlayer*
	}

	namespace n_ANavMeshBoundsVolume {
		constexpr auto SupportedAgents = 0x2d8; // FNavAgentSelector
	}

	namespace n_UGeometryCollectionComponent {
		constexpr auto ChaosSolverActor = 0x530; // AChaosSolverActor*
		constexpr auto RestCollection = 0x618; // UGeometryCollection*
		constexpr auto InitializationFields = 0x620; // TArray<AFieldSystemActor*>
		constexpr auto Simulating = 0x630; // bool
		constexpr auto ObjectType = 0x638; // EObjectStateTypeEnum
		constexpr auto EnableClustering = 0x639; // bool
		constexpr auto ClusterGroupIndex = 0x63c; // int32_t
		constexpr auto MaxClusterLevel = 0x640; // int32_t
		constexpr auto DamageThreshold = 0x648; // TArray<float>
		constexpr auto ClusterConnectionType = 0x658; // EClusterConnectionTypeEnum
		constexpr auto CollisionGroup = 0x65c; // int32_t
		constexpr auto CollisionSampleFraction = 0x660; // float
		constexpr auto LinearEtherDrag = 0x664; // float
		constexpr auto AngularEtherDrag = 0x668; // float
		constexpr auto PhysicalMaterial = 0x670; // UChaosPhysicalMaterial*
		constexpr auto InitialVelocityType = 0x678; // EInitialVelocityTypeEnum
		constexpr auto InitialLinearVelocity = 0x67c; // FVector
		constexpr auto InitialAngularVelocity = 0x688; // FVector
		constexpr auto CacheParameters = 0x698; // FGeomComponentCacheParameters
		constexpr auto NotifyGeometryCollectionPhysicsStateChange = 0x6e8; // FMulticastInlineDelegate
		constexpr auto NotifyGeometryCollectionPhysicsLoadingStateChange = 0x6f8; // FMulticastInlineDelegate
		constexpr auto OnChaosBreakEvent = 0x720; // FMulticastInlineDelegate
		constexpr auto DesiredCacheTime = 0x730; // float
		constexpr auto CachePlayback = 0x734; // bool
		constexpr auto OnChaosPhysicsCollision = 0x738; // FMulticastInlineDelegate
		constexpr auto bNotifyBreaks = 0x748; // bool
		constexpr auto bNotifyCollisions = 0x749; // bool
		constexpr auto DummyBodySetup = 0x928; // UBodySetup*
	}

	namespace n_UGizmoScaledTransformSource {
		constexpr auto ChildTransformSource = 0x50; // TScriptInterface<IGizmoTransformSource>
	}

	namespace n_UEnvQueryTest_EnemyDamageAttackable {
		constexpr auto MaxAttackFailures = 0x2a0; // FAIDataProviderIntValue
		constexpr auto bUseAttackTime = 0x2d8; // bool
		constexpr auto MaxTimeSinceAttackFailure = 0x2e0; // FAIDataProviderFloatValue
		constexpr auto bUseAttackDistance = 0x318; // bool
		constexpr auto UseAttackLocation = 0x320; // FAIDataProviderBoolValue
		constexpr auto MinDistanceSinceAttackFailure = 0x358; // FAIDataProviderFloatValue
		constexpr auto MaxDistance = 0x390; // FAIDataProviderFloatValue
	}

	namespace n_AProfileCamera {
		constexpr auto TeleportPlayerWhenViewedFromHere = 0x2a0; // bool
	}

	namespace n_UGameplayAction_TraversalSteer {
		constexpr auto SteeringConfigs = 0x210; // TArray<FTraversalSteeringConfig>
		constexpr auto ArrivalDistance = 0x220; // float
	}

	namespace n_USteeringBehavior {
		constexpr auto ChildBehaviorMode = 0x38; // EChildBehaviorMode
		constexpr auto ChildBehaviors = 0x40; // TArray<FSteeringBehaviorChild>
		constexpr auto bNormalizeChildWeights = 0x50; // bool
	}

	namespace n_UBlueprintCore {
		constexpr auto SkeletonGeneratedClass = 0x30; // UObject*
		constexpr auto GeneratedClass = 0x38; // UObject*
		constexpr auto bLegacyNeedToPurgeSkelRefs = 0x40; // bool
		constexpr auto BlueprintGuid = 0x44; // FGuid
	}

	namespace n_UPlaneFalloff {
		constexpr auto Magnitude = 0xe8; // float
		constexpr auto MinRange = 0xec; // float
		constexpr auto MaxRange = 0xf0; // float
		constexpr auto Default = 0xf4; // float
		constexpr auto Distance = 0xf8; // float
		constexpr auto Position = 0xfc; // FVector
		constexpr auto Normal = 0x108; // FVector
		constexpr auto Falloff = 0x114; // EFieldFalloffType
	}

	namespace n_UEditableTextBox {
		constexpr auto Text = 0x148; // FText
		constexpr auto TextDelegate = 0x160; // FDelegate
		constexpr auto WidgetStyle = 0x170; // FEditableTextBoxStyle
		constexpr auto Style = 0x9f0; // USlateWidgetStyleAsset*
		constexpr auto HintText = 0x9f8; // FText
		constexpr auto HintTextDelegate = 0xa10; // FDelegate
		constexpr auto Font = 0xa20; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xa80; // FLinearColor
		constexpr auto BackgroundColor = 0xa90; // FLinearColor
		constexpr auto ReadOnlyForegroundColor = 0xaa0; // FLinearColor
		constexpr auto IsReadOnly = 0xab0; // bool
		constexpr auto IsPassword = 0xab1; // bool
		constexpr auto MinimumDesiredWidth = 0xab4; // float
		constexpr auto Padding = 0xab8; // FMargin
		constexpr auto IsCaretMovedWhenGainFocus = 0xac8; // bool
		constexpr auto SelectAllTextWhenFocused = 0xac9; // bool
		constexpr auto RevertTextOnEscape = 0xaca; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0xacb; // bool
		constexpr auto SelectAllTextOnCommit = 0xacc; // bool
		constexpr auto AllowContextMenu = 0xacd; // bool
		constexpr auto KeyboardType = 0xace; // EVirtualKeyboardType
		constexpr auto VirtualKeyboardOptions = 0xacf; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardTrigger = 0xad0; // EVirtualKeyboardTrigger
		constexpr auto VirtualKeyboardDismissAction = 0xad1; // EVirtualKeyboardDismissAction
		constexpr auto Justification = 0xad2; // ETextJustify
		constexpr auto ShapedTextOptions = 0xad3; // FShapedTextOptions
		constexpr auto OnTextChanged = 0xad8; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0xae8; // FMulticastInlineDelegate
	}

	namespace n_UHUDMissionObjectiveTipsUserWidget {
		constexpr auto ObjectiveTipClass = 0x458; // UHUDMissionObjectiveTipUserWidget*
	}

	namespace n_USoundBase {
		constexpr auto SoundClassObject = 0x30; // USoundClass*
		constexpr auto bDebug = 0x38; // char : 1
		constexpr auto bOverrideConcurrency = 0x38; // char : 1
		constexpr auto bOutputToBusOnly = 0x38; // char : 1
		constexpr auto bHasDelayNode = 0x38; // char : 1
		constexpr auto bHasConcatenatorNode = 0x38; // char : 1
		constexpr auto bBypassVolumeScaleForPriority = 0x38; // char : 1
		constexpr auto VirtualizationMode = 0x39; // EVirtualizationMode
		constexpr auto ConcurrencySet = 0x90; // TSet<USoundConcurrency*>
		constexpr auto ConcurrencyOverrides = 0xe0; // FSoundConcurrencySettings
		constexpr auto Duration = 0x100; // float
		constexpr auto MaxDistance = 0x104; // float
		constexpr auto TotalSamples = 0x108; // float
		constexpr auto Priority = 0x10c; // float
		constexpr auto AttenuationSettings = 0x110; // USoundAttenuation*
		constexpr auto Modulation = 0x118; // FSoundModulation
		constexpr auto SoundSubmixObject = 0x128; // USoundSubmixBase*
		constexpr auto SoundSubmixSends = 0x130; // TArray<FSoundSubmixSendInfo>
		constexpr auto SourceEffectChain = 0x140; // USoundEffectSourcePresetChain*
		constexpr auto BusSends = 0x148; // TArray<FSoundSourceBusSendInfo>
		constexpr auto PreEffectBusSends = 0x158; // TArray<FSoundSourceBusSendInfo>
	}

	namespace n_UParticleModuleRotation_Seeded {
		constexpr auto RandomSeedInfo = 0x68; // FParticleRandomSeedInfo
	}

	namespace n_UBTTask_RegisterAttackAttempt {
		constexpr auto EnemyBBKey = 0x78; // FBlackboardKeySelector
	}

	namespace n_UDemoTimeline {
		constexpr auto BackgroundBrush = 0x148; // FSlateBrush
		constexpr auto BackgroundBrushDelegate = 0x1d8; // FDelegate
		constexpr auto IndicatorBrush = 0x1e8; // FSlateBrush
		constexpr auto IndicatorBrushDelegate = 0x278; // FDelegate
	}

	namespace n_UCrowdFollowingComponent {
		constexpr auto CharacterMovement = 0x298; // UCharacterMovementComponent*
		constexpr auto CrowdAgentMoveDirection = 0x2a0; // FVector
	}

	namespace n_UVendorSaleMod {
		constexpr auto SaleParams = 0xd0; // FVendorSaleParams
	}

	namespace n_UOptionsTextSpinnerWidget {
		constexpr auto TTSValueOverrides = 0x468; // TMap<int32_t, FString>
	}

	namespace n_UBlackboardKeyType_Class {
		constexpr auto BaseClass = 0x38; // UObject*
	}

	namespace n_UGobiUserWidget {
		constexpr auto OnHovered = 0x2d8; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x2e8; // FMulticastInlineDelegate
		constexpr auto OnPressed = 0x2f8; // FMulticastInlineDelegate
		constexpr auto OnReleased = 0x308; // FMulticastInlineDelegate
		constexpr auto OnClicked = 0x318; // FMulticastInlineDelegate
		constexpr auto OnRightClicked = 0x328; // FMulticastInlineDelegate
		constexpr auto OnDoubleClicked = 0x338; // FMulticastInlineDelegate
		constexpr auto bListenForCultureChange = 0x348; // bool
		constexpr auto bIgnoreTrapFocus = 0x349; // bool
		constexpr auto bListenForInputDeviceChange = 0x34a; // bool
		constexpr auto TTSFocusAudioEvents = 0x350; // TMap<EIconPlatform, UAkAudioEvent*>
		constexpr auto TTSFocusStopAudioEvent = 0x3a0; // UAkAudioEvent*
		constexpr auto bTTSFocusPlayDuringPreSignIn = 0x3a8; // bool
		constexpr auto TTSFocusMessage = 0x3b8; // FString
		constexpr auto bIsTTSQueued = 0x3c8; // bool
		constexpr auto PressedSound = 0x3d0; // FSlateSound
		constexpr auto ClickedSound = 0x3e8; // FSlateSound
		constexpr auto HoveredSound = 0x400; // FSlateSound
		constexpr auto bIsHoverEnabled = 0x418; // bool
		constexpr auto bIsClickEnabled = 0x419; // bool
		constexpr auto bIsMouseClickEnabled = 0x41a; // bool
		constexpr auto bIsRightClickEnabled = 0x41b; // bool
		constexpr auto bIsGamepadClickEnabled = 0x41c; // bool
		constexpr auto bIsKeyboardClickEnabled = 0x41d; // bool
		constexpr auto KeyboardClickActionOverride = 0x420; // FName
		constexpr auto GamepadClickActionOverride = 0x428; // FName
		constexpr auto DragDropKey = 0x430; // FKey
		constexpr auto bIsHovered = 0x448; // bool
		constexpr auto bIsPressed = 0x449; // bool
		constexpr auto bIsRightPressed = 0x44a; // bool
	}

	namespace n_UCardDrawScreen {
		constexpr auto DefaultCardClickedSound = 0x558; // UAkAudioEvent*
		constexpr auto LightCardClickedSound = 0x560; // UAkAudioEvent*
		constexpr auto MediumCardClickedSound = 0x568; // UAkAudioEvent*
		constexpr auto HeavyCardClickedSound = 0x570; // UAkAudioEvent*
		constexpr auto WildCardClickedSound = 0x578; // UAkAudioEvent*
		constexpr auto CardFlipDelay = 0x580; // float
		constexpr auto PreviousDrawnCards = 0x588; // TArray<FDataTableRowHandle>
		constexpr auto LastCardPlayed = 0x598; // FDataTableRowHandle
		constexpr auto CardsWaitingForServerResponse = 0x5b8; // TArray<FDataTableRowHandle>
		constexpr auto CardManager = 0x5c8; // TWeakObjectPtr<UGameplayCardManager>
	}

	namespace n_APVPHoldoutGameMode {
		constexpr auto ReadyToWaitMinTime = 0x5a8; // float
		constexpr auto ReadyToWaitMinTicks = 0x5b0; // int32_t
		constexpr auto SupplyPointsConfig = 0x5bc; // FPVPHoldoutSupplyPointsConfig
		constexpr auto HeroAdvantageEffects = 0x5d8; // TArray<FTeamImbalanceEffects>
		constexpr auto ZombieAdvantageEffects = 0x5e8; // TArray<FTeamImbalanceEffects>
		constexpr auto HeroDisadvantageEffects = 0x5f8; // TArray<FTeamImbalanceEffects>
		constexpr auto ZombieDisadvantageEffects = 0x608; // TArray<FTeamImbalanceEffects>
	}

	namespace n_UMovieSceneGeometryCacheSection {
		constexpr auto Params = 0xe8; // FMovieSceneGeometryCacheParams
	}

	namespace n_UDialogueWave {
		constexpr auto bMature = 0x30; // char : 1
		constexpr auto bOverride_SubtitleOverride = 0x30; // char : 1
		constexpr auto SpokenText = 0x38; // FString
		constexpr auto SubtitleOverride = 0x48; // FString
		constexpr auto ContextMappings = 0x58; // TArray<FDialogueContextMapping>
		constexpr auto LocalizationGUID = 0x68; // FGuid
	}

	namespace n_UMaterialExpressionScalarParameter {
		constexpr auto DefaultValue = 0x60; // float
		constexpr auto bUseCustomPrimitiveData = 0x64; // bool
		constexpr auto PrimitiveDataIndex = 0x65; // char
	}

	namespace n_UAnimNotify_SpawnImpactEffect {
		constexpr auto bUseRotationContext = 0x40; // bool
		constexpr auto TraceDirectionContext = 0x48; // UAnimContext_Rotation*
		constexpr auto TraceDirection = 0x50; // EAnimNotifySpawnImpactTraceDirection
		constexpr auto TraceChannel = 0x51; // ECollisionChannel
		constexpr auto TraceLength = 0x54; // float
		constexpr auto TraceStartPosBoneName = 0x58; // FName
		constexpr auto DirectionOverride = 0x60; // EAnimNotifySpawnImpactDirectionOverride
		constexpr auto DirectionOverrideYawOffset = 0x64; // float
		constexpr auto ImpactEffectConfig = 0x68; // UImpactEffectConfig*
		constexpr auto BlockingTags = 0x70; // FGameplayTagContainer
	}

	namespace n_UItemFinder_Mod {
		constexpr auto EntropyChance = 0xd0; // float
		constexpr auto ChancePerKill = 0xd4; // float
		constexpr auto ItemTags = 0xd8; // FGameplayTagContainer
		constexpr auto DamageTypeTagQuery = 0xf8; // FGameplayTagQuery
		constexpr auto TargetTagQuery = 0x140; // FGameplayTagQuery
		constexpr auto bTargetMustBeCharacter = 0x188; // bool
	}

	namespace n_UGlobalAssetLoader {
		constexpr auto ConfigAssets = 0x38; // TArray<FGlobalAssetLoaderAsset>
		constexpr auto WeaponTableClasses = 0x48; // TArray<TSoftObjectPtr<UObject>>
		constexpr auto GeneratedAssetTables = 0x58; // TArray<UAssetTable*>
		constexpr auto RequestedAssetTables = 0x68; // TArray<UAssetTable*>
		constexpr auto LoadedObjects = 0x78; // TArray<UObject*>
		constexpr auto AppLaunchUIAssets = 0x88; // TArray<UObject*>
	}

	namespace n_UGameMapsSettings {
		constexpr auto LocalMapOptions = 0x30; // FString
		constexpr auto TransitionMap = 0x40; // FSoftObjectPath
		constexpr auto bUseSplitscreen = 0x58; // bool
		constexpr auto TwoPlayerSplitscreenLayout = 0x59; // ETwoPlayerSplitScreenType
		constexpr auto ThreePlayerSplitscreenLayout = 0x5a; // EThreePlayerSplitScreenType
		constexpr auto FourPlayerSplitscreenLayout = 0x5b; // EFourPlayerSplitScreenType
		constexpr auto bOffsetPlayerGamepadIds = 0x5c; // bool
		constexpr auto GameInstanceClass = 0x60; // FSoftClassPath
		constexpr auto GameDefaultMap = 0x78; // FSoftObjectPath
		constexpr auto ServerDefaultMap = 0x90; // FSoftObjectPath
		constexpr auto GlobalDefaultGameMode = 0xa8; // FSoftClassPath
		constexpr auto GlobalDefaultServerGameMode = 0xc0; // FSoftClassPath
		constexpr auto GameModeMapPrefixes = 0xd8; // TArray<FGameModeName>
		constexpr auto GameModeClassAliases = 0xe8; // TArray<FGameModeName>
	}

	namespace n_AMapMetrics {
		constexpr auto bRebuildMetrics = 0x2a0; // bool
		constexpr auto MapMetricsData = 0x2a8; // UMapMetricsDataAsset*
	}

	namespace n_UAnimNotify_RattleTrigger {
		constexpr auto Bone = 0x40; // FName
		constexpr auto Radius = 0x48; // float
		constexpr auto SpeedModifier = 0x4c; // float
	}

	namespace n_UAnimNotify_SS_Enemy_C {
		constexpr auto EnemySound_1 = 0x60; // SharedEnemyAnimSound_Enum
	}

	namespace n_ULifeStateHeroLedgeHang {
		constexpr auto HelpInteractionTime = 0xa8; // float
		constexpr auto UsableComponentTag = 0xac; // FName
		constexpr auto TwoArmsHangHealthPct = 0xb4; // float
		constexpr auto OneArmsHangHealthPct = 0xb8; // float
		constexpr auto FallDeathMontage = 0xd0; // UAnimMontage*
	}

	namespace n_UMapSpatialInfoComponent {
		constexpr auto SerializedCellInfo = 0x4c8; // TArray<char>
		constexpr auto GoldenPathLength = 0x548; // float
		constexpr auto bRestrictToNavPlacementVolumes = 0x54c; // bool
		constexpr auto DistanceFromNavPlacementVolumes = 0x550; // float
		constexpr auto VisibilityMaxDistanceForward = 0x554; // float
		constexpr auto VisibilityMaxDistanceBackward = 0x558; // float
		constexpr auto NearbyDistance = 0x55c; // float
		constexpr auto MaxAudibleDistance = 0x560; // float
		constexpr auto bGenerateMergedCells = 0x564; // bool
		constexpr auto bGenerateGoldenPathDistances = 0x565; // bool
		constexpr auto bGenerateVisibility = 0x566; // bool
		constexpr auto GenerationBoundsTag = 0x568; // FName
		constexpr auto bRestrictMergedCellsBasedOnVisibility = 0x570; // bool
		constexpr auto MaxMergeTestVisMismatches = 0x574; // int32_t
		constexpr auto bGenerateDebugMergeTestVisInfo = 0x578; // bool
		constexpr auto bGenerateDebugNonVisibleAreaInfo = 0x579; // bool
		constexpr auto bGenerateNearbyCells = 0x57a; // bool
		constexpr auto bGenerateAudibleCells = 0x57b; // bool
		constexpr auto bGenerateWallsOnlyAtTestActor = 0x57c; // bool
		constexpr auto bGenerateWallsNorth = 0x57d; // bool
		constexpr auto bGenerateWallsEast = 0x57e; // bool
		constexpr auto bGenerateWallsSouth = 0x57f; // bool
		constexpr auto bGenerateWallsWest = 0x580; // bool
		constexpr auto bDrawOnlyIfSelected = 0x581; // bool
		constexpr auto bDrawBehindWalls = 0x582; // bool
		constexpr auto bDrawConnections = 0x583; // bool
		constexpr auto bDrawLinkToGenerationVolumes = 0x584; // bool
		constexpr auto bDrawVisibilityLocations = 0x585; // bool
		constexpr auto bDrawInViewFromSafeRoom = 0x586; // bool
		constexpr auto bDrawWalls = 0x587; // bool
		constexpr auto bDrawWallSources = 0x588; // bool
		constexpr auto bDrawWallTestPoints = 0x589; // bool
		constexpr auto MovementChannel = 0x58a; // ECollisionChannel
		constexpr auto VisiblityChannel = 0x58b; // ECollisionChannel
		constexpr auto TraceActorBaseClassesToIgnore = 0x590; // TArray<AActor*>
		constexpr auto CollisionProfileNamesToIgnore = 0x5a0; // TArray<FName>
		constexpr auto TraceActorTagsToIgnore = 0x5b0; // TArray<FName>
		constexpr auto DrawType = 0x5c0; // EMapSpatialInfoDrawType
		constexpr auto NavMeshSpawnActorClasses = 0x610; // TArray<AActor*>
		constexpr auto SerializedSonicProperties = 0x620; // TArray<char>
		constexpr auto EnableSonicPropertyGeneration = 0x640; // bool
		constexpr auto SonicFootprintReport = 0x648; // FString
		constexpr auto SonicPropertiesSize = 0x658; // float
		constexpr auto MaxTotalSonicPathlength = 0x65c; // float
		constexpr auto GoldenPathCullingDistance = 0x660; // float
		constexpr auto MaxObstructionToExclude = 0x664; // float
		constexpr auto EnableMirrorReduction = 0x668; // bool
	}

	namespace n_UMovieSceneFloatSection {
		constexpr auto FloatCurve = 0xe8; // FMovieSceneFloatChannel
	}

	namespace n_UGameplayEffectParticleInstant {
		constexpr auto ParticleSystem = 0x238; // UParticleSystem*
	}

	namespace n_URendererSettings {
		constexpr auto bMobileDisableVertexFog = 0x40; // char : 1
		constexpr auto MaxMobileCascades = 0x44; // int32_t
		constexpr auto MobileMSAASampleCount = 0x48; // EMobileMSAASampleCount
		constexpr auto bMobileUseLegacyShadingModel = 0x4c; // char : 1
		constexpr auto bMobileAllowDitheredLODTransition = 0x4c; // char : 1
		constexpr auto bMobileAllowSoftwareOcclusionCulling = 0x4c; // char : 1
		constexpr auto bMobileVirtualTextures = 0x4c; // char : 1
		constexpr auto bDiscardUnusedQualityLevels = 0x4c; // char : 1
		constexpr auto bOcclusionCulling = 0x4c; // char : 1
		constexpr auto MinScreenRadiusForLights = 0x50; // float
		constexpr auto MinScreenRadiusForEarlyZPass = 0x54; // float
		constexpr auto MinScreenRadiusForCSMdepth = 0x58; // float
		constexpr auto bPrecomputedVisibilityWarning = 0x5c; // char : 1
		constexpr auto bTextureStreaming = 0x5c; // char : 1
		constexpr auto bUseDXT5NormalMaps = 0x5c; // char : 1
		constexpr auto bUseDX11Formats = 0x5c; // char : 1
		constexpr auto bVirtualTextures = 0x5c; // char : 1
		constexpr auto bVirtualTexturedLightmaps = 0x5c; // char : 1
		constexpr auto VirtualTextureTileSize = 0x60; // uint32_t
		constexpr auto VirtualTextureTileBorderSize = 0x64; // uint32_t
		constexpr auto VirtualTextureFeedbackFactor = 0x68; // uint32_t
		constexpr auto bVirtualTextureEnableCompressZlib = 0x6c; // char : 1
		constexpr auto bVirtualTextureEnableCompressCrunch = 0x6c; // char : 1
		constexpr auto bClearCoatEnableSecondNormal = 0x6c; // char : 1
		constexpr auto bAnisotropicBRDF = 0x6c; // char : 1
		constexpr auto ReflectionCaptureResolution = 0x70; // int32_t
		constexpr auto ReflectionEnvironmentLightmapMixBasedOnRoughness = 0x74; // char : 1
		constexpr auto bForwardShading = 0x74; // char : 1
		constexpr auto bVertexFoggingForOpaque = 0x74; // char : 1
		constexpr auto bAllowStaticLighting = 0x74; // char : 1
		constexpr auto bUseNormalMapsForStaticLighting = 0x74; // char : 1
		constexpr auto bGenerateMeshDistanceFields = 0x74; // char : 1
		constexpr auto bEightBitMeshDistanceFields = 0x74; // char : 1
		constexpr auto bGenerateLandscapeGIData = 0x74; // char : 1
		constexpr auto bCompressMeshDistanceFields = 0x75; // char : 1
		constexpr auto TessellationAdaptivePixelsPerTriangle = 0x78; // float
		constexpr auto bSeparateTranslucency = 0x7c; // char : 1
		constexpr auto TranslucentSortPolicy = 0x80; // ETranslucentSortPolicy
		constexpr auto TranslucentSortAxis = 0x84; // FVector
		constexpr auto CustomDepthStencil = 0x90; // ECustomDepthStencil
		constexpr auto bCustomDepthTaaJitter = 0x94; // char : 1
		constexpr auto bEnableAlphaChannelInPostProcessing = 0x98; // EAlphaChannelMode
		constexpr auto NGXAppId = 0xa0; // FString
		constexpr auto bDefaultFeatureBloom = 0xb0; // char : 1
		constexpr auto bDefaultFeatureAmbientOcclusion = 0xb0; // char : 1
		constexpr auto bDefaultFeatureAmbientOcclusionStaticFraction = 0xb0; // char : 1
		constexpr auto bDefaultFeatureAutoExposure = 0xb0; // char : 1
		constexpr auto DefaultFeatureAutoExposure = 0xb4; // EAutoExposureMethodUI
		constexpr auto DefaultFeatureAutoExposureBias = 0xb8; // float
		constexpr auto bExtendDefaultLuminanceRangeInAutoExposureSettings = 0xbc; // char : 1
		constexpr auto bUsePreExposure = 0xbc; // char : 1
		constexpr auto bEnablePreExposureOnlyInTheEditor = 0xbc; // char : 1
		constexpr auto bDefaultFeatureMotionBlur = 0xbc; // char : 1
		constexpr auto bDefaultFeatureLensFlare = 0xbc; // char : 1
		constexpr auto bTemporalUpsampling = 0xbc; // char : 1
		constexpr auto bSSGI = 0xbc; // char : 1
		constexpr auto DefaultFeatureAntiAliasing = 0xc0; // EAntiAliasingMethod
		constexpr auto DefaultLightUnits = 0xc1; // ELightUnits
		constexpr auto DefaultBackBufferPixelFormat = 0xc2; // EDefaultBackBufferPixelFormat
		constexpr auto bRenderUnbuiltPreviewLightsInGame = 0xc4; // char : 1
		constexpr auto bRenderUnbuiltPreviewShadowsInGame = 0xc4; // char : 1
		constexpr auto bStencilForLODDither = 0xc4; // char : 1
		constexpr auto EarlyZPass = 0xc8; // EEarlyZPass
		constexpr auto bEarlyZPassOnlyMaterialMasking = 0xcc; // char : 1
		constexpr auto bDBuffer = 0xcc; // char : 1
		constexpr auto ClearSceneMethod = 0xd0; // EClearSceneOptions
		constexpr auto bBasePassOutputsVelocity = 0xd4; // char : 1
		constexpr auto bVertexDeformationOutputsVelocity = 0xd4; // char : 1
		constexpr auto bSelectiveBasePassOutputs = 0xd4; // char : 1
		constexpr auto bDefaultParticleCutouts = 0xd4; // char : 1
		constexpr auto GPUSimulationTextureSizeX = 0xd8; // int32_t
		constexpr auto GPUSimulationTextureSizeY = 0xdc; // int32_t
		constexpr auto bGlobalClipPlane = 0xe0; // char : 1
		constexpr auto GBufferFormat = 0xe4; // EGBufferFormat
		constexpr auto bUseGPUMorphTargets = 0xe8; // char : 1
		constexpr auto bNvidiaAftermathEnabled = 0xe8; // char : 1
		constexpr auto bMultiView = 0xe8; // char : 1
		constexpr auto bMobilePostProcessing = 0xe8; // char : 1
		constexpr auto bMobileMultiView = 0xe8; // char : 1
		constexpr auto bMobileUseHWsRGBEncoding = 0xe8; // char : 1
		constexpr auto bRoundRobinOcclusion = 0xe8; // char : 1
		constexpr auto bODSCapture = 0xe8; // char : 1
		constexpr auto bMeshStreaming = 0xe9; // char : 1
		constexpr auto WireframeCullThreshold = 0xec; // float
		constexpr auto bEnableRayTracing = 0xf0; // char : 1
		constexpr auto bEnableRayTracingTextureLOD = 0xf0; // char : 1
		constexpr auto bSupportStationarySkylight = 0xf0; // char : 1
		constexpr auto bSupportLowQualityLightmaps = 0xf0; // char : 1
		constexpr auto bSupportPointLightWholeSceneShadows = 0xf0; // char : 1
		constexpr auto bSupportAtmosphericFog = 0xf0; // char : 1
		constexpr auto bSupportSkyAtmosphere = 0xf0; // char : 1
		constexpr auto bSupportSkyAtmosphereAffectsHeightFog = 0xf0; // char : 1
		constexpr auto bSupportSkinCacheShaders = 0xf1; // char : 1
		constexpr auto DefaultSkinCacheBehavior = 0xf4; // ESkinCacheDefaultBehavior
		constexpr auto SkinCacheSceneMemoryLimitInMB = 0xf8; // float
		constexpr auto bMobileEnableStaticAndCSMShadowReceivers = 0xfc; // char : 1
		constexpr auto bMobileEnableMovableLightCSMShaderCulling = 0xfc; // char : 1
		constexpr auto bMobileAllowDistanceFieldShadows = 0xfc; // char : 1
		constexpr auto bMobileAllowMovableDirectionalLights = 0xfc; // char : 1
		constexpr auto MobileNumDynamicPointLights = 0x100; // uint32_t
		constexpr auto bMobileDynamicPointLightsUseStaticBranch = 0x104; // char : 1
		constexpr auto bMobileAllowMovableSpotlights = 0x104; // char : 1
		constexpr auto bSupport16BitBoneIndex = 0x104; // char : 1
		constexpr auto bGPUSkinLimit2BoneInfluences = 0x104; // char : 1
		constexpr auto bSupportDepthOnlyIndexBuffers = 0x104; // char : 1
		constexpr auto bSupportReversedIndexBuffers = 0x104; // char : 1
		constexpr auto bSupportMaterialLayers = 0x104; // char : 1
		constexpr auto bLPV = 0x104; // char : 1
		constexpr auto bSupportAlphaToCoverage = 0x105; // char : 1
		constexpr auto TRSMobileLuminance = 0x108; // float
		constexpr auto bEnableNonCSMProjectedWholeSceneShadows = 0x10c; // char : 1
	}

	namespace n_UGameplayContext_NextUsable {
		constexpr auto BaseNavLink = 0x90; // UAnimContext_NavLinkLocation*
		constexpr auto UsableTags = 0x98; // FGameplayTagContainer
		constexpr auto bSkipActivatableUsables = 0xb8; // bool
		constexpr auto SearchDist = 0xbc; // float
	}

	namespace n_UGobiLoadingScreenDataSet {
		constexpr auto LoadingImage = 0x38; // TSoftObjectPtr<UTexture2D>
		constexpr auto ShowDemoLoadingImage = 0x60; // TSoftObjectPtr<UTexture2D>
	}

	namespace n_UReplicatedMontageComponent {
		constexpr auto IgnoreRootMotionSlots = 0x130; // TArray<FName>
		constexpr auto RepData = 0x1b8; // FReplicatedMontageData
		constexpr auto AnimInstance = 0x1e8; // UAnimInstance*
		constexpr auto GobiCharacter = 0x280; // AGobiCharacter*
		constexpr auto Movement = 0x288; // UGobiCharacterMovementComponent*
		constexpr auto SerializableMontages = 0x290; // TArray<UAnimMontage*>
		constexpr auto PlayDeathReactionComponent = 0x2a0; // UPlayDeathReactionComponent*
	}

	namespace n_UTipEvaluatorSet_BP_C {
		constexpr auto CanShowTip = 0x78; // FGobiGameCoachEval_CanShowTip
	}

	namespace n_UMaterialExpressionTextureProperty {
		constexpr auto TextureObject = 0x48; // FExpressionInput
		constexpr auto Property = 0x5c; // EMaterialExposedTextureProperty
	}

	namespace n_UInputAxisDelegateBinding {
		constexpr auto InputAxisDelegateBindings = 0x30; // TArray<FBlueprintInputAxisDelegateBinding>
	}

	namespace n_UAssetTableOrganizer {
		constexpr auto AssetLists = 0x38; // TMap<FString, UAssetTable*>
	}

	namespace n_ALevelBounds {
		constexpr auto BoxComponent = 0x2a0; // UBoxComponent*
		constexpr auto bAutoUpdateBounds = 0x2a8; // bool
	}

	namespace n_UAnimNotify_GobiMusicEvent {
		constexpr auto EventHandle = 0x40; // FDataTableRowHandle
	}

	namespace n_UCombineComponent {
		constexpr auto CombineState = 0xe8; // ECombineState
		constexpr auto OnCombineStarted = 0x158; // FMulticastInlineDelegate
		constexpr auto OnCombineStopped = 0x168; // FMulticastInlineDelegate
		constexpr auto Usable = 0x178; // UUsableComponent*
		constexpr auto CornStalks = 0x180; // TArray<FCornstalk>
		constexpr auto CornStalkTag = 0x190; // FName
		constexpr auto CornSplineTag = 0x198; // FName
		constexpr auto InstanceClass = 0x1a0; // UInstancedStaticMeshComponent*
		constexpr auto InstanceClassTag = 0x1a8; // FName
		constexpr auto BladeSocketLocationNames = 0x1b0; // TArray<FName>
		constexpr auto BladeSocketLocations = 0x1c0; // TArray<FVector>
		constexpr auto BirdSites = 0x1d0; // TArray<ABirdSite*>
		constexpr auto BirdSiteTag = 0x1e0; // FName
		constexpr auto BirdLaunchDistance = 0x1e8; // float
		constexpr auto GobiNavModifierStart = 0x1f0; // UGobiNavModifierComponent*
		constexpr auto GobiNavModifierStartTag = 0x1f8; // FName
		constexpr auto GobiNavModifierEnd = 0x200; // UGobiNavModifierComponent*
		constexpr auto GobiNavModifierEndTag = 0x208; // FName
		constexpr auto NavAreaDisabled = 0x210; // UNavArea*
		constexpr auto NavAreaGobiDefault = 0x218; // UNavArea*
		constexpr auto Blades = 0x220; // TArray<UStaticMeshComponent*>
		constexpr auto BladesTag = 0x230; // FName
		constexpr auto CornAudioJostles = 0x238; // TArray<APlaceableAudioJostle*>
		constexpr auto CornAudioJostleTag = 0x248; // FName
		constexpr auto MinCombineDistanceToAudioJostle = 0x250; // float
		constexpr auto AkVehicle = 0x258; // UAkComponent*
		constexpr auto AkVehicleTag = 0x260; // FName
		constexpr auto AkBlades = 0x268; // UAkComponent*
		constexpr auto AkBladesTag = 0x270; // FName
		constexpr auto ItemAkBank = 0x278; // UItemAkBankComponent*
		constexpr auto ItemAkBankTag = 0x280; // FName
		constexpr auto CombineEngineStart = 0x288; // UAkAudioEvent*
		constexpr auto CombineEngineLoop = 0x290; // UAkAudioEvent*
		constexpr auto CombineEngineExplode = 0x298; // UAkAudioEvent*
		constexpr auto CombineEngineDeath = 0x2a0; // UAkAudioEvent*
		constexpr auto CombineEngineCrash = 0x2a8; // UAkAudioEvent*
		constexpr auto BladesLoop = 0x2b0; // UAkAudioEvent*
		constexpr auto BladesLoopStop = 0x2b8; // UAkAudioEvent*
		constexpr auto PlantShred = 0x2c0; // UAkAudioEvent*
		constexpr auto BodyShred = 0x2c8; // UAkAudioEvent*
		constexpr auto BodyHitAudioDelayTime = 0x2d0; // float
		constexpr auto PlantHitAudioDelayTime = 0x2d4; // float
		constexpr auto CombineIgnitionCurve = 0x2d8; // UCurveFloat*
		constexpr auto StartCountdown = 0x2e0; // float
		constexpr auto CombineIgnitionUpdateRate = 0x2e4; // float
		constexpr auto Spotlights = 0x2e8; // TArray<USpotLightComponent*>
		constexpr auto SpotlightTag = 0x2f8; // FName
		constexpr auto MaxIntensity = 0x300; // float
		constexpr auto CombineSmokeParticle = 0x308; // UParticleSystemComponent*
		constexpr auto CombineSmokeParticleTag = 0x310; // FName
		constexpr auto CornShuckGroup = 0x318; // UParticleSystemComponent*
		constexpr auto CornShuckGroupTag = 0x320; // FName
		constexpr auto CombineWheelParticles = 0x328; // TArray<UParticleSystemComponent*>
		constexpr auto CombineWheelsTag = 0x338; // FName
		constexpr auto WheelMeshes = 0x340; // TArray<UStaticMeshComponent*>
		constexpr auto WheelMeshTag = 0x350; // FName
		constexpr auto CornShuck = 0x358; // UParticleSystem*
		constexpr auto PlantHitVFXDelayTime = 0x360; // float
		constexpr auto WheelParticleDelayTime = 0x364; // float
		constexpr auto CornSpray = 0x368; // UParticleSystemComponent*
		constexpr auto CornSprayTag = 0x370; // FName
		constexpr auto CombineBloodVFX = 0x378; // UParticleSystemComponent*
		constexpr auto CombineBloodVFXTag = 0x380; // FName
		constexpr auto PushbackVolumes = 0x388; // TArray<UBoxComponent*>
		constexpr auto PushbackVolumeTag = 0x398; // FName
		constexpr auto PushbackVolumeDamage = 0x3a0; // float
		constexpr auto PushbackVolumeDamageEnableDelay = 0x3a4; // float
		constexpr auto CombinePushbackDamageType = 0x3a8; // UGobiDamageType*
		constexpr auto PhysicalSurfaceForDamage = 0x3b0; // EPhysicalSurface
		constexpr auto BladeCornBox = 0x3b8; // UBoxComponent*
		constexpr auto BladeCornBoxTag = 0x3c0; // FName
		constexpr auto CornStalkClass = 0x3c8; // AActor*
		constexpr auto QueryTypes = 0x3d0; // TArray<EObjectTypeQuery>
		constexpr auto MoveCombineCountdown = 0x3e0; // float
		constexpr auto MaxTravelZ = 0x3e4; // float
		constexpr auto SuspensionLinearInterpSpeed = 0x3e8; // float
		constexpr auto SuspensionAngularInterpSpeed = 0x3ec; // float
		constexpr auto Spline = 0x3f0; // USplineComponent*
		constexpr auto SplineTag = 0x3f8; // FName
		constexpr auto CombineMesh = 0x400; // UStaticMeshComponent*
		constexpr auto CombineMeshTag = 0x408; // FName
		constexpr auto BladeMovementRate = 0x410; // float
		constexpr auto ChildActorComponentClass = 0x418; // UChildActorComponent*
		constexpr auto ChildActorComponentTag = 0x420; // FName
		constexpr auto bIsCombineMoving = 0x428; // bool
		constexpr auto CombineDamageAmount = 0x42c; // float
		constexpr auto CombineDamageCooldown = 0x430; // float
		constexpr auto CombineDamageType = 0x438; // UGobiDamageType*
		constexpr auto CombineDistanceCheck = 0x440; // float
		constexpr auto CombineBloodDeactiveCountdown = 0x444; // float
		constexpr auto CleanupKillVolumeTag = 0x448; // FName
		constexpr auto CleanupKillVolumeDelay = 0x450; // float
		constexpr auto CleanupKillVolume = 0x458; // UBoxComponent*
	}

	namespace n_ACutsceneCoordinator {
		constexpr auto CutsceneDefinitionRowHandle = 0x2a0; // FDataTableRowHandle
		constexpr auto OnIntroFadeOut = 0x2c0; // FMulticastInlineDelegate
		constexpr auto OnCutsceneSetup = 0x2d0; // FMulticastInlineDelegate
		constexpr auto OnPlaySequence = 0x2e0; // FMulticastInlineDelegate
		constexpr auto OnCutsceneCleanup = 0x2f0; // FMulticastInlineDelegate
		constexpr auto OnPhaseChanged = 0x300; // FMulticastInlineDelegate
		constexpr auto ControlState = 0x310; // ECutsceneControl
		constexpr auto LevelSequence = 0x318; // ULevelSequence*
		constexpr auto LevelSequenceActor = 0x320; // ALevelSequenceActor*
		constexpr auto LevelSequencePlayer = 0x328; // ULevelSequencePlayer*
		constexpr auto LocalSynchronizationComponent = 0x330; // UPlayerCutsceneSynchronizationComponent*
		constexpr auto PreloadedAssets = 0x338; // TArray<UObject*>
	}

	namespace n_UGameplayEffectSetTags {
		constexpr auto Tags = 0x250; // FGameplayTagContainer
		constexpr auto CountDelta = 0x270; // int32_t
	}

	namespace n_UGobiMediaSubtitleHelperSubsystem {
		constexpr auto SubtitleTimingTable = 0x40; // UDataTable*
	}

	namespace n_ALevelSequenceScenarioActorBase {
		constexpr auto SceneRoot = 0x2a0; // USceneComponent*
		constexpr auto TextRender = 0x2a8; // UTextRenderComponent*
		constexpr auto bIsEnabled = 0x2b0; // bool
		constexpr auto bForceSequenceActorDespawn = 0x2b1; // bool
		constexpr auto ForceDespawnOfCharactersThatMatch = 0x2b8; // FGameplayTagQuery
		constexpr auto bOnlyOnePlayerIsRequiredToStart = 0x300; // bool
		constexpr auto bTriggerWhenAllPlayersAreOutOfTriggerVolume = 0x301; // bool
		constexpr auto StartSequenceTriggerVolume = 0x308; // ATriggerVolume*
		constexpr auto SequenceCharacterClass = 0x310; // AGobiCharacter*
		constexpr auto bSequenceActorIsUnkillable = 0x318; // bool
		constexpr auto TagsToAddToSpawnedCharacter = 0x320; // FGameplayTagContainer
		constexpr auto InPlaySequenceActorTagContainer = 0x340; // FGameplayTagContainer
		constexpr auto CharacterSpawnActor = 0x360; // ACharacterSpawnActor*
		constexpr auto LevelSequenceActor = 0x368; // ALevelSequenceActor*
		constexpr auto HighPrioritySmartActor = 0x370; // AAISmartActor*
		constexpr auto OnRecycledEnableLSSAB = 0x378; // ALevelSequenceScenarioActorBase*
		constexpr auto OnCompletedActivateLinkedLSSAB = 0x380; // ALevelSequenceScenarioActorBase*
		constexpr auto GetSavedHealthFromTheseLSSABs = 0x388; // TArray<ALevelSequenceScenarioActorBase*>
		constexpr auto OnCompletedLinkDelayTime = 0x398; // float
		constexpr auto OnSpawnSequenceCharacter = 0x3a0; // FMulticastInlineDelegate
		constexpr auto bSequenceActorsKilled = 0x3bc; // bool
		constexpr auto bSequenceActorIsActing = 0x3bd; // bool
		constexpr auto LevelSequenceScenario = 0x3c0; // ULevelSequenceScenarioComponent*
	}

	namespace n_UEnvQueryGenerator_Usables {
		constexpr auto SearchCenter = 0x58; // UEnvQueryContext*
		constexpr auto SearchRadius = 0x60; // FAIDataProviderFloatValue
	}

	namespace n_UGizmoComponentHitTarget {
		constexpr auto Component = 0x38; // UPrimitiveComponent*
	}

	namespace n_ASpotLight {
		constexpr auto SpotLightComponent = 0x2b0; // USpotLightComponent*
	}

	namespace n_ABaseMeleeWeapon_BP_C {
		constexpr auto BaseStaticMesh_3P = 0x4d0; // UStaticMeshComponent*
		constexpr auto BaseMesh_1P = 0x4d8; // UFPRigSkeletalMeshComponent*
	}

	namespace n_UBTDecorator_Cooldown {
		constexpr auto CooldownTime = 0x70; // FAIDataProviderFloatValue
	}

	namespace n_ABotController {
		constexpr auto BaseLoadout = 0x448; // FInventoryLoadout
		constexpr auto OnGoToLocReached = 0x480; // FMulticastInlineDelegate
		constexpr auto OnGoToLocSeqCompleted = 0x490; // FMulticastInlineDelegate
		constexpr auto OnBotConfigChangedEvent = 0x4a0; // FMulticastInlineDelegate
		constexpr auto OnBotSwarmedEvent = 0x4b0; // FMulticastInlineDelegate
		constexpr auto OnCombatEvent = 0x4c0; // FMulticastInlineDelegate
		constexpr auto CombatExitDelay = 0x4d0; // float
		constexpr auto CombatEndGroupUpDelay = 0x4d4; // float
		constexpr auto HordeEndGroupUpDelay = 0x4d8; // float
		constexpr auto InitFailTimer = 0x4dc; // float
		constexpr auto GobiWorldProbeMgr = 0x4e0; // FGobiWorldProbeManager
		constexpr auto AwarenessSystem = 0x558; // FBotAwarenessSystem
		constexpr auto ItemSystem = 0x858; // FBotItemSystem
		constexpr auto InventorySystem = 0x960; // FBotInventorySystem
		constexpr auto InteractSystem = 0xb18; // FBotInteractSystem
		constexpr auto TetherSystem = 0xe20; // FTetherSystem
		constexpr auto PingSystem = 0xf40; // FBotPingSystem
		constexpr auto CombatSystem = 0x11d0; // FBotCombatSystem
		constexpr auto TeamInfo = 0x1738; // FBotTeamInfo
		constexpr auto ThreatList = 0x1c68; // FBotThreatList
		constexpr auto OwnerGobiChar = 0x1cb8; // AGobiCharacter*
		constexpr auto OwnerHeroChar = 0x1cc0; // AHeroCharacter*
		constexpr auto BotTypeBotTag = 0x1cc8; // FGameplayTag
		constexpr auto BotTypeNPCTag = 0x1cd0; // FGameplayTag
		constexpr auto BotBehaviorNoCombatTag = 0x1cd8; // FGameplayTag
		constexpr auto BotBehaviorNoWanderTag = 0x1ce0; // FGameplayTag
		constexpr auto BotItemUseCooldownTag = 0x1ce8; // FGameplayTag
		constexpr auto AttackTags = 0x1cf0; // FGameplayTagContainer
		constexpr auto ThreatDistScore = 0x1d10; // float
		constexpr auto EyePosHeight = 0x1d14; // float
		constexpr auto DbgDisableActionsTags = 0x1d18; // FGameplayTagContainer
		constexpr auto DbgDisableAttacksTags = 0x1d38; // FGameplayTagContainer
		constexpr auto DbgDisableMovementTags = 0x1d58; // FGameplayTagContainer
		constexpr auto DisableMovementTags = 0x1d80; // FGameplayTagContainer
		constexpr auto Wander_EQS = 0x1da0; // UEnvQuery*
		constexpr auto ThreatEQS = 0x1da8; // UEnvQuery*
		constexpr auto AttackLocEQS = 0x1db0; // UEnvQuery*
		constexpr auto AttackDistanceRanges = 0x1db8; // UAIDistanceRanges*
		constexpr auto BotInteractIgnoreTag = 0x1dc0; // FGameplayTag
		constexpr auto BotInteractIgnoreAlwaysTag = 0x1dc8; // FGameplayTag
		constexpr auto BotItemPickupLimitTag = 0x1dd0; // FGameplayTag
		constexpr auto TargetMeleeOnlyTagQuery = 0x1dd8; // FGameplayTagQuery
		constexpr auto TargetMeleePreferredTagQuery = 0x1e20; // FGameplayTagQuery
		constexpr auto TargetRangedOnlyTagQuery = 0x1e68; // FGameplayTagQuery
		constexpr auto ItemPickupSearchDist = 0x1eb0; // float
		constexpr auto EnvironSenseAllowedTagQuery = 0x1eb8; // FGameplayTagQuery
		constexpr auto ThreatPingTagQuery = 0x1f00; // FGameplayTagQuery
		constexpr auto UsableSearchDist = 0x2040; // float
		constexpr auto InteractNavToDist = 0x2044; // float
		constexpr auto InteractActivateDist = 0x2048; // float
		constexpr auto TeammateFollowTetherDist = 0x204c; // float
		constexpr auto DefaultBotPlaystyleConfigSet = 0x2060; // UBotPlaystyleConfigCollection*
		constexpr auto BotSharedConfigRowHandle = 0x2898; // FDataTableRowHandle
		constexpr auto StatsComponent = 0x2918; // UPlayerStatsComponent*
		constexpr auto bIsCombatAllowed = 0x299b; // bool
		constexpr auto bIsWanderAllowed = 0x299c; // bool
		constexpr auto bReturnToCombatStartLoc = 0x299d; // bool
		constexpr auto bAutoHideWeapons = 0x299e; // bool
	}

	namespace n_UGameplayEvalSet_Jump_C {
		constexpr auto IsJump = 0x78; // FGameplayEval_NavArea
		constexpr auto IsNavLinkNext = 0xe8; // FGameplayEval_IsNavLinkNext
		constexpr auto IsAtJump = 0x130; // FGameplayEval_Distance
	}

	namespace n_AMolotov_FirePool_BP_C {
		constexpr auto UberGraphFrame = 0x2d0; // FPointerToUberGraphFrame
		constexpr auto GameplayEffectEmitter = 0x2d8; // UGameplayEffectEmitterComponent*
		constexpr auto GameplayEffectRadius = 0x2e0; // USphereComponent*
		constexpr auto DefaultSceneRoot = 0x2e8; // USceneComponent*
		constexpr auto ParticleSets = 0x2f0; // TArray<UParticleSystem*>
		constexpr auto SpawnedParticleSet = 0x300; // UParticleSystemComponent*
		constexpr auto MolotovFireAkComp = 0x308; // UAkComponent*
	}

	namespace n_AGameplayEffectEmitterActor {
		constexpr auto EmitterComponent = 0x2a0; // UGameplayEffectEmitterComponent*
		constexpr auto DefaultRootComponent = 0x2a8; // USceneComponent*
		constexpr auto EmitterVolume = 0x2b0; // UBoxComponent*
		constexpr auto MeshComponent = 0x2b8; // UStaticMeshComponent*
		constexpr auto bStartActive = 0x2c0; // bool
	}

	namespace n_UNameplateManagerUserWidget {
		constexpr auto ADSOpacity = 0x458; // float
		constexpr auto IncapOffset = 0x45c; // float
		constexpr auto AutoCollapseTagQuery = 0x460; // FGameplayTagQuery
		constexpr auto Nameplates = 0x4a8; // TMap<TWeakObjectPtr<APlayerSlot>, UNameplateUserWidget*>
	}

	namespace n_UNavigationSystemV1 {
		constexpr auto MainNavData = 0x30; // ANavigationData*
		constexpr auto AbstractNavData = 0x38; // ANavigationData*
		constexpr auto DefaultAgentName = 0x40; // FName
		constexpr auto CrowdManagerClass = 0x48; // TSoftClassPtr<UObject>
		constexpr auto bAutoCreateNavigationData = 0x70; // char : 1
		constexpr auto bSpawnNavDataInNavBoundsLevel = 0x70; // char : 1
		constexpr auto bAllowClientSideNavigation = 0x70; // char : 1
		constexpr auto bShouldDiscardSubLevelNavData = 0x70; // char : 1
		constexpr auto bTickWhilePaused = 0x70; // char : 1
		constexpr auto bSupportRebuilding = 0x70; // char : 1
		constexpr auto bInitialBuildingLocked = 0x70; // char : 1
		constexpr auto bSkipAgentHeightCheckWhenPickingNavData = 0x71; // char : 1
		constexpr auto DataGatheringMode = 0x74; // ENavDataGatheringModeConfig
		constexpr auto bGenerateNavigationOnlyAroundNavigationInvokers = 0x78; // char : 1
		constexpr auto ActiveTilesUpdateInterval = 0x7c; // float
		constexpr auto SupportedAgents = 0x80; // TArray<FNavDataConfig>
		constexpr auto SupportedAgentsMask = 0x90; // FNavAgentSelector
		constexpr auto NavDataSet = 0x98; // TArray<ANavigationData*>
		constexpr auto NavDataRegistrationQueue = 0xa8; // TArray<ANavigationData*>
		constexpr auto OnNavDataRegisteredEvent = 0xc8; // FMulticastInlineDelegate
		constexpr auto OnNavigationGenerationFinishedDelegate = 0xd8; // FMulticastInlineDelegate
		constexpr auto OperationMode = 0x1c4; // FNavigationSystemRunMode
		constexpr auto DirtyAreasUpdateFreq = 0x51c; // float
	}

	namespace n_UAnimNotify_PlayParticleEffect {
		constexpr auto PSTemplate = 0x40; // UParticleSystem*
		constexpr auto LocationOffset = 0x48; // FVector
		constexpr auto RotationOffset = 0x54; // FRotator
		constexpr auto Scale = 0x60; // FVector
		constexpr auto Attached = 0x80; // char : 1
		constexpr auto SocketName = 0x84; // FName
	}

	namespace n_UTierStarsUserWidget {
		constexpr auto StarMaterialInstance = 0x458; // UMaterialInstanceDynamic*
	}

	namespace n_ASphereReflectionCapture {
		constexpr auto DrawCaptureRadius = 0x2a8; // UDrawSphereComponent*
	}

	namespace n_UBTTask_TriggerHorde {
		constexpr auto TriggerReason = 0x78; // FString
	}

	namespace n_UDeathGasSpawnComponent {
		constexpr auto OnDeathGasSpawnEnded = 0x1e0; // FMulticastInlineDelegate
		constexpr auto SpawnMontagesName = 0x1f0; // FName
		constexpr auto SpawnMontages = 0x1f8; // TArray<UAnimMontage*>
		constexpr auto AppliedTags = 0x208; // FGameplayTagContainer
		constexpr auto ActivatingActorTagRequirements = 0x228; // FGameplayTagQuery
		constexpr auto DeathGasSpawnTuning = 0x270; // FDeathGasSpawnTuning
		constexpr auto DeathGasClass = 0x290; // ADeathGasActor*
		constexpr auto AppliedGameplayEffects = 0x298; // TArray<UGameplayEffect*>
		constexpr auto MoveTickData = 0x2c0; // FDeathGasSpawnMoveTickData
	}

	namespace n_UBreakpoint {
		constexpr auto bEnabled = 0x30; // char : 1
		constexpr auto Node = 0x38; // UEdGraphNode*
		constexpr auto bStepOnce = 0x40; // char : 1
		constexpr auto bStepOnce_WasPreviouslyDisabled = 0x40; // char : 1
		constexpr auto bStepOnce_RemoveAfterHit = 0x40; // char : 1
	}

	namespace n_USteeringBehavior_Distance {
		constexpr auto DistanceContextClass = 0x58; // UAnimContext_Distance*
		constexpr auto DistanceRange = 0x60; // FFloatRange
		constexpr auto MinDistSteeringBehaviorOld = 0x70; // USteeringBehavior*
		constexpr auto MaxDistSteeringBehaviorOld = 0x78; // USteeringBehavior*
		constexpr auto MinDistSteeringBehavior = 0x80; // USteeringBehavior*
		constexpr auto MaxDistSteeringBehavior = 0x88; // USteeringBehavior*
	}

	namespace n_UParticleModuleSizeScaleBySpeed {
		constexpr auto SpeedScale = 0x38; // FVector2D
		constexpr auto MaxScale = 0x40; // FVector2D
	}

	namespace n_UBlendProfile {
		constexpr auto OwningSkeleton = 0x38; // USkeleton*
		constexpr auto ProfileEntries = 0x40; // TArray<FBlendProfileBoneEntry>
	}

	namespace n_UGameplayEffectMoveSpeedScale {
		constexpr auto BaseSpeedMod = 0x238; // FCustomDataProviderFloat
		constexpr auto AdditionalSpeedModPerStack = 0x240; // float
	}

	namespace n_UDistributionFloatConstant {
		constexpr auto Constant = 0x40; // float
	}

	namespace n_AProfilePhysicsCaster {
		constexpr auto NumCasts = 0x2a0; // int32_t
		constexpr auto CasterType = 0x2a4; // EPhysicsCasterType
		constexpr auto CasterStart = 0x2a5; // EPhysicsCasterPosition
		constexpr auto CasterEnd = 0x2a6; // EPhysicsCasterPosition
		constexpr auto bTraceComplex = 0x2a7; // bool
		constexpr auto TraceType = 0x2a8; // EPhysicsCasterTraceType
		constexpr auto Channel = 0x2a9; // ECollisionChannel
		constexpr auto TraceTypeProfileName = 0x2ac; // FName
		constexpr auto bTraceHitOnly = 0x2b4; // bool
		constexpr auto bGetMaterial = 0x2b5; // bool
		constexpr auto InitialDelay = 0x2b8; // float
		constexpr auto UserBounds = 0x2c0; // UStaticMeshComponent*
	}

	namespace n_USoundCollectionAssetAnimPreview {
		constexpr auto SCAHumanAnimPreview = 0x38; // USoundCollectionAsset*
		constexpr auto SCAEnemyAnimPreview = 0x40; // USoundCollectionAsset*
	}

	namespace n_APlayerCharacter {
		constexpr auto OnPlayerCharacterSlotChanged = 0x1330; // FMulticastInlineDelegate
		constexpr auto bApplyControllerYawRotationRate = 0x1368; // bool
		constexpr auto ControllerYawRotationRate = 0x136c; // float
		constexpr auto ControllerYawRotationRateStartDistance = 0x1370; // float
		constexpr auto ControllerYawRotationRateStopDistance = 0x1374; // float
		constexpr auto OccupiedPlayerSlot = 0x1378; // APlayerSlot*
		constexpr auto CrouchTransitionTime = 0x1394; // float
		constexpr auto CrouchViewModifier = 0x13a0; // FCameraViewModifier
		constexpr auto CanJumpTagQuery = 0x13e8; // FGameplayTagQuery
	}

	namespace n_UGameplayEffectItemCycleComponent {
		constexpr auto WeaponSwapSpeedScaleMod = 0x250; // FGamePropertyFloatMod
		constexpr auto PowerSwapEffects = 0x260; // TArray<UGameplayEffect*>
		constexpr auto PowerSwapPlayerEffects = 0x270; // TArray<UGameplayEffect*>
	}

	namespace n_AAudioJostleProceduralBuilder {
		constexpr auto UnmappedEmitterInfo = 0x2a8; // TArray<UEmitterNodeBase*>
	}

	namespace n_UBTTask_MoveDirectlyToward {
		constexpr auto bDisablePathUpdateOnGoalLocationChange = 0xb8; // char : 1
		constexpr auto bProjectVectorGoalToNavigation = 0xb8; // char : 1
		constexpr auto bUpdatedDeprecatedProperties = 0xb8; // char : 1
	}

	namespace n_USpinBox {
		constexpr auto Value = 0x148; // float
		constexpr auto ValueDelegate = 0x14c; // FDelegate
		constexpr auto WidgetStyle = 0x160; // FSpinBoxStyle
		constexpr auto Style = 0x478; // USlateWidgetStyleAsset*
		constexpr auto MinFractionalDigits = 0x480; // int32_t
		constexpr auto MaxFractionalDigits = 0x484; // int32_t
		constexpr auto bAlwaysUsesDeltaSnap = 0x488; // bool
		constexpr auto Delta = 0x48c; // float
		constexpr auto SliderExponent = 0x490; // float
		constexpr auto Font = 0x498; // FSlateFontInfo
		constexpr auto Justification = 0x4f8; // ETextJustify
		constexpr auto MinDesiredWidth = 0x4fc; // float
		constexpr auto ClearKeyboardFocusOnCommit = 0x500; // bool
		constexpr auto SelectAllTextOnCommit = 0x501; // bool
		constexpr auto bIsFocusedOnHover = 0x502; // bool
		constexpr auto ForegroundColor = 0x508; // FSlateColor
		constexpr auto OnValueChanged = 0x538; // FMulticastInlineDelegate
		constexpr auto OnValueCommitted = 0x548; // FMulticastInlineDelegate
		constexpr auto OnBeginSliderMovement = 0x558; // FMulticastInlineDelegate
		constexpr auto OnEndSliderMovement = 0x568; // FMulticastInlineDelegate
		constexpr auto bOverride_MinValue = 0x578; // char : 1
		constexpr auto bOverride_MaxValue = 0x578; // char : 1
		constexpr auto bOverride_MinSliderValue = 0x578; // char : 1
		constexpr auto bOverride_MaxSliderValue = 0x578; // char : 1
		constexpr auto MinValue = 0x57c; // float
		constexpr auto MaxValue = 0x580; // float
		constexpr auto MinSliderValue = 0x584; // float
		constexpr auto MaxSliderValue = 0x588; // float
	}

	namespace n_UTRSOnlineEntitlementsEOSSettings {
		constexpr auto EntitlementIds = 0x40; // TArray<FString>
	}

	namespace n_UAIDataProvider_QueryParams {
		constexpr auto ParamName = 0x30; // FName
		constexpr auto FloatValue = 0x38; // float
		constexpr auto IntValue = 0x3c; // int32_t
		constexpr auto BoolValue = 0x40; // bool
		constexpr auto TagsValue = 0x48; // FGameplayTagContainer
		constexpr auto TagQueryValue = 0x68; // FGameplayTagQuery
		constexpr auto ObjectValue = 0xb0; // UObject*
	}

	namespace n_UInterpTrackInstColorProp {
		constexpr auto ResetColor = 0x60; // FColor
	}

	namespace n_UGameplayContext_HeroIsInCombat {
		constexpr auto LastDamageReceived = 0x68; // FDamageInfo
		constexpr auto LastDamageInflicted = 0x128; // FDamageInfo
	}

	namespace n_UItemBaseComponent {
		constexpr auto OwnerMovementComponent = 0x140; // UHeroMovementComponent*
		constexpr auto UsePrompt = 0x148; // FText
	}

	namespace n_UBTTask_FinishWithResult {
		constexpr auto Result = 0x78; // EBTNodeResult
	}

	namespace n_APlaceableAudioJostle {
		constexpr auto JostleType = 0x2a0; // EJostleMode
		constexpr auto ShrubBehavior = 0x2a8; // FShrubEmitterInfo
		constexpr auto BumpBehavior = 0x2d0; // FBumpEmitterInfo
		constexpr auto RattleBehavior = 0x300; // FRattleEmitterInfo
		constexpr auto bAutoEnable = 0x340; // bool
		constexpr auto bIsEnabled = 0x341; // bool
		constexpr auto Node = 0x348; // UEmitterNodeBase*
	}

	namespace n_UDatasmithVREDSceneImportData {
		constexpr auto bMergeNodes = 0x50; // bool
		constexpr auto bOptimizeDuplicatedNodes = 0x51; // bool
		constexpr auto bImportMats = 0x52; // bool
		constexpr auto MatsPath = 0x58; // FString
		constexpr auto bImportVar = 0x68; // bool
		constexpr auto bCleanVar = 0x69; // bool
		constexpr auto VarPath = 0x70; // FString
		constexpr auto bImportLightInfo = 0x80; // bool
		constexpr auto LightInfoPath = 0x88; // FString
		constexpr auto bImportClipInfo = 0x98; // bool
		constexpr auto ClipInfoPath = 0xa0; // FString
	}

	namespace n_UPropertyValue {
		constexpr auto Properties = 0x90; // TArray<TFieldPath<FProperty>>
		constexpr auto PropertyIndices = 0xa0; // TArray<int32_t>
		constexpr auto CapturedPropSegments = 0xb0; // TArray<FCapturedPropSegment>
		constexpr auto FullDisplayString = 0xc0; // FString
		constexpr auto PropertySetterName = 0xd0; // FName
		constexpr auto PropertySetterParameterDefaults = 0xd8; // TMap<FString, FString>
		constexpr auto bHasRecordedData = 0x128; // bool
		constexpr auto LeafPropertyClass = 0x130; // UObject*
		constexpr auto ValueBytes = 0x140; // TArray<char>
		constexpr auto PropCategory = 0x150; // EPropertyValueCategory
	}

	namespace n_UAutomationTestSettings {
		constexpr auto EngineTestModules = 0x30; // TArray<FString>
		constexpr auto EditorTestModules = 0x40; // TArray<FString>
		constexpr auto AutomationTestmap = 0x50; // FSoftObjectPath
		constexpr auto EditorPerformanceTestMaps = 0x68; // TArray<FEditorMapPerformanceTestDefinition>
		constexpr auto AssetsToOpen = 0x78; // TArray<FSoftObjectPath>
		constexpr auto BuildPromotionTest = 0x88; // FBuildPromotionTestSettings
		constexpr auto MaterialEditorPromotionTest = 0x278; // FMaterialEditorPromotionSettings
		constexpr auto ParticleEditorPromotionTest = 0x2a8; // FParticleEditorPromotionSettings
		constexpr auto BlueprintEditorPromotionTest = 0x2b8; // FBlueprintEditorPromotionSettings
		constexpr auto TestLevelFolders = 0x2e8; // TArray<FString>
		constexpr auto ExternalTools = 0x2f8; // TArray<FExternalToolDefinition>
		constexpr auto ImportExportTestDefinitions = 0x308; // TArray<FEditorImportExportTestDefinition>
		constexpr auto LaunchOnSettings = 0x318; // TArray<FLaunchOnTestSettings>
		constexpr auto DefaultScreenshotResolution = 0x328; // FIntPoint
	}

	namespace n_UWeaponAttachmentComponent {
		constexpr auto OnAttachmentsChanged = 0x160; // FMulticastInlineDelegate
		constexpr auto OnAttachmentAdded = 0x170; // FMulticastInlineDelegate
		constexpr auto OnAttachmentRemoved = 0x180; // FMulticastInlineDelegate
		constexpr auto PendingAttachmentApplications = 0x1c0; // TArray<FDataTableRowHandle>
		constexpr auto PendingAttachmentRemovals = 0x1d0; // TArray<FDataTableRowHandle>
		constexpr auto AppliedAttachments = 0x1e0; // TArray<FDataTableRowHandle>
		constexpr auto AppliedAttachments_Client = 0x1f0; // TArray<FDataTableRowHandle>
		constexpr auto UnsupportedAttachments = 0x200; // FGameplayTagContainer
		constexpr auto AttachmentSlots = 0x220; // TArray<FGameplayTagContainer>
		constexpr auto DefaultMeshConfigurations = 0x230; // UAttachmentMeshConfigurations*
		constexpr auto MeshConfigurationOverrides = 0x238; // TArray<FWeaponAttachmentMeshConfig>
	}

	namespace n_UMapBuildDataRegistry {
		constexpr auto LevelLightingQuality = 0x30; // ELightingBuildQuality
	}

	namespace n_UMovieSceneMarginSection {
		constexpr auto TopCurve = 0xe8; // FMovieSceneFloatChannel
		constexpr auto LeftCurve = 0x188; // FMovieSceneFloatChannel
		constexpr auto RightCurve = 0x228; // FMovieSceneFloatChannel
		constexpr auto BottomCurve = 0x2c8; // FMovieSceneFloatChannel
	}

	namespace n_UAnimEvalSet_FixedScore_C {
		constexpr auto FixedScore = 0xc0; // FGameplayEval_FixedScore
	}

	namespace n_URendererOverrideSettings {
		constexpr auto bSupportAllShaderPermutations = 0x40; // char : 1
		constexpr auto bForceRecomputeTangents = 0x40; // char : 1
	}

	namespace n_UGameplayContext_AIStimulus {
		constexpr auto StimuliSourceActor = 0x90; // UAnimContext_Actor*
	}

	namespace n_ACameraRig_Crane {
		constexpr auto CranePitch = 0x2a0; // float
		constexpr auto CraneYaw = 0x2a4; // float
		constexpr auto CraneArmLength = 0x2a8; // float
		constexpr auto bLockMountPitch = 0x2ac; // bool
		constexpr auto bLockMountYaw = 0x2ad; // bool
		constexpr auto TransformComponent = 0x2b0; // USceneComponent*
		constexpr auto CraneYawControl = 0x2b8; // USceneComponent*
		constexpr auto CranePitchControl = 0x2c0; // USceneComponent*
		constexpr auto CraneCameraMount = 0x2c8; // USceneComponent*
	}

	namespace n_UAISenseEvent_Damage {
		constexpr auto Event = 0x30; // FAIDamageEvent
	}

	namespace n_UInputAxisKeyDelegateBinding {
		constexpr auto InputAxisKeyDelegateBindings = 0x30; // TArray<FBlueprintInputAxisKeyDelegateBinding>
	}

	namespace n_UParticleModuleTypeDataBeam2 {
		constexpr auto BeamMethod = 0x38; // EBeam2Method
		constexpr auto TextureTile = 0x3c; // int32_t
		constexpr auto TextureTileDistance = 0x40; // float
		constexpr auto Sheets = 0x44; // int32_t
		constexpr auto MaxBeamCount = 0x48; // int32_t
		constexpr auto Speed = 0x4c; // float
		constexpr auto InterpolationPoints = 0x50; // int32_t
		constexpr auto bAlwaysOn = 0x54; // char : 1
		constexpr auto UpVectorStepSize = 0x58; // int32_t
		constexpr auto BranchParentName = 0x5c; // FName
		constexpr auto Distance = 0x68; // FRawDistributionFloat
		constexpr auto TaperMethod = 0x98; // EBeamTaperMethod
		constexpr auto TaperFactor = 0xa0; // FRawDistributionFloat
		constexpr auto TaperScale = 0xd0; // FRawDistributionFloat
		constexpr auto RenderGeometry = 0x100; // char : 1
		constexpr auto RenderDirectLine = 0x100; // char : 1
		constexpr auto RenderLines = 0x100; // char : 1
		constexpr auto RenderTessellation = 0x100; // char : 1
	}

	namespace n_ULifeStateRescueFromRespawn {
		constexpr auto CurrentRescueStart = 0xb4; // TWeakObjectPtr<ARescuePlayerStart>
		constexpr auto InNeedOfRescueMontages = 0xc0; // TMap<ERescueSpawnPointType, UAnimMontage*>
		constexpr auto RescuedMontages = 0x110; // TMap<ERescueSpawnPointType, UAnimMontage*>
		constexpr auto bApplyCameraSocketOffset = 0x160; // bool
		constexpr auto CameraSocketOffset = 0x164; // FVector
		constexpr auto bApplyCameraTargetArmLength = 0x17c; // bool
		constexpr auto CameraTargetArmLength = 0x180; // float
		constexpr auto bApplyViewYawLimit = 0x188; // bool
		constexpr auto ViewYawLimit = 0x18c; // float
		constexpr auto bApplyViewPitchLimit = 0x190; // bool
		constexpr auto ViewPitchLimit = 0x194; // FVector2D
	}

	namespace n_UTireType {
		constexpr auto FrictionScale = 0x38; // float
	}

	namespace n_UAnimContext_PawnProximity {
		constexpr auto QueryOrigin = 0x50; // UAnimContext_Transform*
		constexpr auto QueryBorder = 0x58; // UAnimContext_Transform*
		constexpr auto QueryRadius = 0x60; // float
		constexpr auto PawnFilterClass = 0x68; // AGobiCharacter*
		constexpr auto TagQueryFilter = 0x70; // FGameplayTagQuery
		constexpr auto BlockingGameplayTags = 0xb8; // FGameplayTagContainer
	}

	namespace n_UGameplayContext_NearbyCharacters {
		constexpr auto CharacterTags = 0x50; // FGameplayTagQuery
		constexpr auto MinDistance = 0x98; // float
		constexpr auto MaxDistance = 0x9c; // float
		constexpr auto bCheckViewAngle = 0xa0; // bool
		constexpr auto ViewAngle = 0xa4; // float
	}

	namespace n_UAudioZombieManagerSystem {
		constexpr auto ManagerName = 0x30; // FName
		constexpr auto bPushZombieCallouts = 0x38; // bool
		constexpr auto bPushNumThreateningZombies = 0x39; // bool
		constexpr auto bPushMaxThreat = 0x3a; // bool
		constexpr auto bPushCumulativeThreat = 0x3b; // bool
		constexpr auto NumThreateningZombiesRTPCName = 0x3c; // FName
		constexpr auto MaxThreatRTPCName = 0x44; // FName
		constexpr auto CumulativeThreatRTPCName = 0x4c; // FName
		constexpr auto PVPCollapsePhaseMultiplier = 0x54; // float
		constexpr auto RegistrationQuery = 0x58; // FGameplayTagQuery
		constexpr auto FrayRadius = 0xa0; // float
		constexpr auto MinRadiusMultiplier = 0xa4; // float
		constexpr auto CalloutRadius = 0xa8; // float
		constexpr auto MaxRadius = 0xac; // float
		constexpr auto MaxRadiusMultiplier = 0xb0; // float
		constexpr auto FromBehindMultiplier = 0xb4; // float
		constexpr auto MutedMultiplier = 0xb8; // float
		constexpr auto bUpdatePreferenceOnManagedCharacter = 0xbc; // bool
		constexpr auto PreferenceMinDeltaBeforeUpdate = 0xc0; // float
		constexpr auto TagMultipliers = 0xc8; // TMap<FGameplayTag, float>
		constexpr auto DebugColor = 0x118; // FColor
		constexpr auto bTextRenderer = 0x11c; // bool
		constexpr auto DebugTextSize = 0x120; // float
	}

	namespace n_UAkPS4InitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettings
		constexpr auto CommunicationSettings = 0x90; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xb8; // FAkPS4AdvancedInitializationSettings
		constexpr auto TRSSettings = 0xf8; // FAkTRSPerPlatformSettings
	}

	namespace n_ULifeStateHealth {
		constexpr auto EnterRules = 0xa8; // TArray<FLifeStateTransitionRuleHealth>
		constexpr auto ExitRules = 0xb8; // TArray<FLifeStateTransitionRuleHealth>
	}

	namespace n_UMaterialExpressionTemporalSobol {
		constexpr auto Index = 0x48; // FExpressionInput
		constexpr auto Seed = 0x5c; // FExpressionInput
		constexpr auto ConstIndex = 0x70; // uint32_t
		constexpr auto ConstSeed = 0x74; // FVector2D
	}

	namespace n_UParticleModuleLocationPrimitiveCylinder {
		constexpr auto RadialVelocity = 0xb8; // char : 1
		constexpr auto StartRadius = 0xc0; // FRawDistributionFloat
		constexpr auto StartHeight = 0xf0; // FRawDistributionFloat
		constexpr auto HeightAxis = 0x120; // CylinderHeightAxis
	}

	namespace n_UInterpTrackInstAkAudioRTPC {
		constexpr auto LastUpdatePosition = 0x30; // float
	}

	namespace n_UMaterialExpressionShaderStageSwitch {
		constexpr auto PixelShader = 0x48; // FExpressionInput
		constexpr auto VertexShader = 0x5c; // FExpressionInput
	}

	namespace n_UWaterSimulation {
		constexpr auto GridSize = 0x38; // FIntVector
		constexpr auto SimGrid = 0x48; // UCanvasRenderTarget2D*
		constexpr auto SimGridT = 0x50; // UCanvasRenderTarget2D*
		constexpr auto SimColorGrid = 0x58; // UCanvasRenderTarget2D*
		constexpr auto SimColorGridT = 0x60; // UCanvasRenderTarget2D*
		constexpr auto GridWorldSize = 0x68; // FVector
		constexpr auto Ground = 0x78; // UTexture2D*
		constexpr auto GroundOrigin = 0x80; // FVector
		constexpr auto GroundSize = 0x8c; // FVector2D
		constexpr auto GroundScale = 0x94; // float
		constexpr auto ForceTexture = 0x98; // UTexture2D*
		constexpr auto ForceTextureScale = 0xa0; // float
		constexpr auto Speed = 0xa4; // float
		constexpr auto SimulationSteps = 0xa8; // int32_t
		constexpr auto Viscosity = 0xac; // float
		constexpr auto WaterLineHeight = 0xb0; // float
		constexpr auto WaterLineAttenuation = 0xb4; // float
		constexpr auto WaterColorRChannelAtten = 0xb8; // float
		constexpr auto WaterColorGChannelAtten = 0xbc; // float
		constexpr auto WaterColorBChannelAtten = 0xc0; // float
		constexpr auto WaterDynamicFoamAtten = 0xc4; // float
		constexpr auto WaterDynamicFoamGeneration = 0xc8; // float
		constexpr auto ForceResponseChannel = 0xcc; // WaterForceChannelType
		constexpr auto VolumeCenterLocation = 0xd0; // FVector
		constexpr auto OldVolumeCenterLocation = 0xdc; // FVector
		constexpr auto PlayerSurfaceLocation = 0xe8; // FVector
		constexpr auto EffectiveGridWorldSize = 0xf4; // FVector
		constexpr auto LastName = 0x100; // FString
		constexpr auto CachedGround = 0x110; // UTexture2D*
		constexpr auto Time = 0x118; // float
	}

	namespace n_ADatasmithSceneActor {
		constexpr auto Scene = 0x2a0; // UDatasmithScene*
		constexpr auto RelatedActors = 0x2a8; // TMap<FName, TSoftObjectPtr<AActor>>
	}

	namespace n_UOnlinePIESettings {
		constexpr auto bOnlinePIEEnabled = 0x40; // bool
		constexpr auto Logins = 0x48; // TArray<FPIELoginSettingsInternal>
	}

	namespace n_UReticleComponent {
		constexpr auto ReticleClass = 0x100; // AGobiReticle*
		constexpr auto ShowReticleTagQuery = 0x108; // FGameplayTagQuery
		constexpr auto bLocalPlayerOnly = 0x150; // bool
	}

	namespace n_UParticleModuleBeamModifier {
		constexpr auto ModifierType = 0x38; // BeamModifierType
		constexpr auto PositionOptions = 0x3c; // FBeamModifierOptions
		constexpr auto Position = 0x40; // FRawDistributionVector
		constexpr auto TangentOptions = 0x88; // FBeamModifierOptions
		constexpr auto Tangent = 0x90; // FRawDistributionVector
		constexpr auto bAbsoluteTangent = 0xd8; // char : 1
		constexpr auto StrengthOptions = 0xdc; // FBeamModifierOptions
		constexpr auto Strength = 0xe0; // FRawDistributionFloat
	}

	namespace n_USoundNodeParamCrossFade {
		constexpr auto ParamName = 0x70; // FName
	}

	namespace n_UEnvQueryTest_PounceTrace {
		constexpr auto Context = 0x208; // UEnvQueryContext*
		constexpr auto ItemHeightOffset = 0x210; // FAIDataProviderFloatValue
		constexpr auto ContextHeightOffset = 0x248; // FAIDataProviderFloatValue
		constexpr auto TraceHalfHeightOffset = 0x280; // FAIDataProviderFloatValue
	}

	namespace n_UPropertyBinding {
		constexpr auto SourceObject = 0x30; // TWeakObjectPtr<UObject>
		constexpr auto SourcePath = 0x38; // FDynamicPropertyPath
		constexpr auto DestinationProperty = 0x60; // FName
	}

	namespace n_UGameNetworkManagerSettings {
		constexpr auto MinDynamicBandwidth = 0x30; // int32_t
		constexpr auto MaxDynamicBandwidth = 0x34; // int32_t
		constexpr auto TotalNetBandwidth = 0x38; // int32_t
		constexpr auto BadPingThreshold = 0x3c; // int32_t
		constexpr auto bIsStandbyCheckingEnabled = 0x40; // char : 1
		constexpr auto StandbyRxCheatTime = 0x44; // float
		constexpr auto StandbyTxCheatTime = 0x48; // float
		constexpr auto PercentMissingForRxStandby = 0x4c; // float
		constexpr auto PercentMissingForTxStandby = 0x50; // float
		constexpr auto PercentForBadPing = 0x54; // float
		constexpr auto JoinInProgressStandbyWaitTime = 0x58; // float
	}

	namespace n_UGameplayAction_LeapAttack {
		constexpr auto TellMontage = 0x210; // UAnimMontage*
		constexpr auto TellDuration = 0x218; // float
	}

	namespace n_UZombieGhostComponent {
		constexpr auto UpdateCanSpawnInterval = 0xf8; // float
		constexpr auto MinSpawnDistance2DFromHeroes = 0xfc; // float
		constexpr auto MinSpawnDistanceZFromHeroes = 0x100; // float
		constexpr auto MinTeleportDistanceFromHeroes = 0x104; // float
		constexpr auto MinSecondsUnseenToTeleport = 0x108; // float
		constexpr auto MinSecondsUndamagedToTeleport = 0x10c; // float
		constexpr auto SpawnInMontage = 0x110; // UAnimMontage*
		constexpr auto FortificationsThatCollide = 0x118; // TArray<TSoftClassPtr<UObject>>
		constexpr auto LOSCheckBoneNames = 0x128; // TArray<FName>
		constexpr auto CanSpawnEffects = 0x138; // TArray<UGameplayEffect*>
		constexpr auto AKESpawnError = 0x148; // UAkAudioEvent*
		constexpr auto CanSpawnResult = 0x150; // ECanSpawnResult
		constexpr auto CanTeleportResult = 0x151; // ECanSpawnResult
	}

	namespace n_UZombieMutationNodeUserWidget {
		constexpr auto ZombieCardRowHandle = 0x458; // FDataTableRowHandle
		constexpr auto bPurchased = 0x478; // bool
		constexpr auto bPrereqsSatisfied = 0x479; // bool
		constexpr auto bOwningPlayerCanAfford = 0x47a; // bool
		constexpr auto bOwningPlayerCanSpendOn = 0x47b; // bool
	}

	namespace n_UGizmoLineHandleComponent {
		constexpr auto Normal = 0x4d0; // FVector
		constexpr auto HandleSize = 0x4dc; // float
		constexpr auto Thickness = 0x4e0; // float
		constexpr auto Direction = 0x4e4; // FVector
		constexpr auto Length = 0x4f0; // float
		constexpr auto bImageScale = 0x4f4; // bool
	}

	namespace n_UDistributionFloatParameterBase {
		constexpr auto ParameterName = 0x48; // FName
		constexpr auto MinInput = 0x50; // float
		constexpr auto MaxInput = 0x54; // float
		constexpr auto MinOutput = 0x58; // float
		constexpr auto MaxOutput = 0x5c; // float
		constexpr auto ParamMode = 0x60; // DistributionParamMode
	}

	namespace n_UAkActivatedPlugins {
		constexpr auto Platforms = 0x30; // TMap<FString, FAkPluginList>
	}

	namespace n_AFOVManager {
		constexpr auto PlayerFOVStates = 0x2b8; // TMap<ULocalPlayer*, FPlayerFOVState>
		constexpr auto ActiveFirstPersonMeshes = 0x310; // TArray<TScriptInterface<ICustomProjectionInterface>>
	}

	namespace n_UGameplayAction_HagIdle {
		constexpr auto CalmInvestigateDuration = 0x210; // float
		constexpr auto IdleMontages = 0x218; // TArray<UAnimMontage*>
		constexpr auto CalmInvestigateEffectsToRemove = 0x228; // TArray<UGameplayEffect*>
	}

	namespace n_UAkItemProperties {
		constexpr auto OnSelectionChanged = 0x148; // FMulticastInlineDelegate
		constexpr auto OnPropertyDragged = 0x158; // FMulticastInlineDelegate
	}

	namespace n_UVoipOverlayGridUserWidget {
		constexpr auto EntryGridPanel = 0x460; // UPanelWidget*
	}

	namespace n_ALODActor {
		constexpr auto StaticMeshComponent = 0x2a0; // UStaticMeshComponent*
		constexpr auto ImpostersStaticMeshComponents = 0x2a8; // TMap<UMaterialInterface*, UInstancedStaticMeshComponent*>
		constexpr auto Proxy = 0x2f8; // UHLODProxy*
		constexpr auto Key = 0x300; // FName
		constexpr auto LODDrawDistance = 0x308; // float
		constexpr auto LODLevel = 0x30c; // int32_t
		constexpr auto SubActors = 0x310; // TArray<AActor*>
		constexpr auto CachedNumHLODLevels = 0x320; // char
	}

	namespace n_UZombiePopupMutationUserWidget {
		constexpr auto MutationPointsHBox = 0x458; // UHorizontalBox*
		constexpr auto LeftBar = 0x460; // UImage*
		constexpr auto RightBar = 0x468; // UImage*
		constexpr auto CompletedText = 0x470; // UTextBlock*
		constexpr auto LevelText = 0x478; // UTextBlock*
		constexpr auto MutationDescriptionText = 0x480; // UTextBlock*
		constexpr auto MutationPointsText = 0x488; // UTextBlock*
		constexpr auto CompleteColor = 0x490; // FSlateColor
		constexpr auto IncompleteColor = 0x4c0; // FSlateColor
	}

	namespace n_UGizmoConstantFrameAxisSource {
		constexpr auto Origin = 0x38; // FVector
		constexpr auto Direction = 0x44; // FVector
		constexpr auto TangentX = 0x50; // FVector
		constexpr auto TangentY = 0x5c; // FVector
	}

	namespace n_UShaderBuildProgress_WBP_C {
		constexpr auto UberGraphFrame = 0x458; // FPointerToUberGraphFrame
		constexpr auto CircularThrobber_73 = 0x460; // UCircularThrobber*
		constexpr auto CompilationProgress = 0x468; // UProgressBar*
		constexpr auto OuterVBox = 0x470; // UVerticalBox*
		constexpr auto ProgressText = 0x478; // UBaseTextBlock_C*
		constexpr auto MaxRemainingToCompile = 0x480; // int32_t
		constexpr auto bShaderCompilationEnabled = 0x484; // bool
	}

	namespace n_UTimelineTemplate {
		constexpr auto TimelineLength = 0x30; // float
		constexpr auto LengthMode = 0x34; // ETimelineLengthMode
		constexpr auto bAutoPlay = 0x35; // char : 1
		constexpr auto bLoop = 0x35; // char : 1
		constexpr auto bReplicated = 0x35; // char : 1
		constexpr auto bIgnoreTimeDilation = 0x35; // char : 1
		constexpr auto EventTracks = 0x38; // TArray<FTTEventTrack>
		constexpr auto FloatTracks = 0x48; // TArray<FTTFloatTrack>
		constexpr auto VectorTracks = 0x58; // TArray<FTTVectorTrack>
		constexpr auto LinearColorTracks = 0x68; // TArray<FTTLinearColorTrack>
		constexpr auto MetaDataArray = 0x78; // TArray<FBPVariableMetaDataEntry>
		constexpr auto TimelineGuid = 0x88; // FGuid
		constexpr auto VariableName = 0x98; // FName
		constexpr auto DirectionPropertyName = 0xa0; // FName
		constexpr auto UpdateFunctionName = 0xa8; // FName
		constexpr auto FinishedFunctionName = 0xb0; // FName
	}

	namespace n_UAchievementTrackerComponent {
		constexpr auto OnAchievementCompleted = 0xe8; // FMulticastInlineDelegate
		constexpr auto AllAchievements = 0x148; // TArray<UAchievement*>
		constexpr auto ActiveAchievements = 0x158; // TArray<UAchievement*>
		constexpr auto AchievementClasses = 0x168; // TArray<UAchievement*>
		constexpr auto PartyUpAchievementClass = 0x190; // UAchievement*
		constexpr auto TestRewardAchievementClass = 0x198; // UAchievement*
	}

	namespace n_USynth2DSlider {
		constexpr auto ValueX = 0x148; // float
		constexpr auto ValueY = 0x14c; // float
		constexpr auto ValueXDelegate = 0x150; // FDelegate
		constexpr auto ValueYDelegate = 0x160; // FDelegate
		constexpr auto WidgetStyle = 0x170; // FSynth2DSliderStyle
		constexpr auto SliderHandleColor = 0x450; // FLinearColor
		constexpr auto IndentHandle = 0x460; // bool
		constexpr auto Locked = 0x461; // bool
		constexpr auto StepSize = 0x464; // float
		constexpr auto IsFocusable = 0x468; // bool
		constexpr auto OnMouseCaptureBegin = 0x470; // FMulticastInlineDelegate
		constexpr auto OnMouseCaptureEnd = 0x480; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureBegin = 0x490; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureEnd = 0x4a0; // FMulticastInlineDelegate
		constexpr auto OnValueChangedX = 0x4b0; // FMulticastInlineDelegate
		constexpr auto OnValueChangedY = 0x4c0; // FMulticastInlineDelegate
	}

	namespace n_AExponentialHeightFog {
		constexpr auto Component = 0x2a0; // UExponentialHeightFogComponent*
		constexpr auto bEnabled = 0x2a8; // char : 1
	}

	namespace n_UDecalComponent {
		constexpr auto DecalMaterial = 0x230; // UMaterialInterface*
		constexpr auto SortOrder = 0x280; // int32_t
		constexpr auto FadeScreenSize = 0x284; // float
		constexpr auto FadeStartDelay = 0x288; // float
		constexpr auto FadeDuration = 0x28c; // float
		constexpr auto FadeInDuration = 0x290; // float
		constexpr auto FadeInStartDelay = 0x294; // float
		constexpr auto bDestroyOwnerAfterFade = 0x298; // char : 1
		constexpr auto DecalSize = 0x29c; // FVector
	}

	namespace n_UInterpTrackParticleReplay {
		constexpr auto TrackKeys = 0x78; // TArray<FParticleReplayTrackKey>
	}

	namespace n_UAnimEvalSet_Shared_DeathReaction_Survivor_C {
		constexpr auto PreviousLifeState = 0x4a0; // FGameplayEval_IsHeroPreviousLifeState
		constexpr auto IsCrouched = 0x4f0; // FGameplayEval_GameplayTags
	}

	namespace n_UBTDecorator_ConeCheck {
		constexpr auto ConeHalfAngle = 0x70; // float
		constexpr auto ConeOrigin = 0x78; // FBlackboardKeySelector
		constexpr auto ConeDirection = 0xa0; // FBlackboardKeySelector
		constexpr auto Observed = 0xc8; // FBlackboardKeySelector
	}

	namespace n_UAIDataProvider_Random {
		constexpr auto Min = 0xb8; // float
		constexpr auto Max = 0xbc; // float
		constexpr auto bInteger = 0xc0; // char : 1
	}

	namespace n_UDistributionFloat {
		constexpr auto bCanBeBaked = 0x38; // char : 1
		constexpr auto bBakedDataSuccesfully = 0x38; // char : 1
	}

	namespace n_UHorizontalBox {
		constexpr auto ChildSpacing = 0x170; // float
	}

	namespace n_UProgressBar {
		constexpr auto WidgetStyle = 0x148; // FProgressBarStyle
		constexpr auto Style = 0x300; // USlateWidgetStyleAsset*
		constexpr auto BackgroundImage = 0x308; // USlateBrushAsset*
		constexpr auto FillImage = 0x310; // USlateBrushAsset*
		constexpr auto MarqueeImage = 0x318; // USlateBrushAsset*
		constexpr auto Percent = 0x320; // float
		constexpr auto BarFillType = 0x324; // EProgressBarFillType
		constexpr auto bIsMarquee = 0x325; // bool
		constexpr auto BorderPadding = 0x328; // FVector2D
		constexpr auto PercentDelegate = 0x330; // FDelegate
		constexpr auto FillColorAndOpacity = 0x340; // FSlateColor
		constexpr auto FillColorAndOpacityDelegate = 0x370; // FDelegate
	}

	namespace n_UMutilationSubsystem {
		constexpr auto QualityCache = 0x100; // TArray<FMutilationQualityCache>
	}

	namespace n_UCardTooltipUserWidget {
		constexpr auto HostWidget = 0x458; // UWidget*
		constexpr auto HostCardRowHandle = 0x460; // FDataTableRowHandle
		constexpr auto PerkEntryClass = 0x480; // UPerkDetailsEntryUserWidget*
		constexpr auto PerkDescWrapWidth = 0x488; // float
	}

	namespace n_UTextPropertyTestObject {
		constexpr auto DefaultedText = 0x30; // FText
		constexpr auto UndefaultedText = 0x48; // FText
		constexpr auto TransientText = 0x60; // FText
	}

	namespace n_APlayerSlot {
		constexpr auto SlotIdx = 0x2a0; // FSlotIndex
		constexpr auto ReservedPlayerId = 0x2a8; // FString
		constexpr auto bReserved = 0x2b8; // bool
		constexpr auto bAllowBots = 0x2b9; // bool
		constexpr auto Team = 0x2ba; // EGobiTeam
		constexpr auto bHasReceivedInitialSpawn = 0x2bb; // bool
		constexpr auto bHasChosenLoadout = 0x2bc; // bool
		constexpr auto bNeedsQuickPlayCharacterTransfer = 0x2bd; // bool
		constexpr auto CharacterTransferOwedDraws = 0x2c0; // int32_t
		constexpr auto TimeSpentDead = 0x2c4; // float
		constexpr auto bIsCurrentlyAlive = 0x2c8; // bool
		constexpr auto CurrentHeroRowHandle = 0x2d0; // FDataTableRowHandle
		constexpr auto CurrentCustomizationSet = 0x310; // FCharacterCustomizationSet
		constexpr auto CachedPostRoundBonuses = 0x398; // TArray<FPostRoundSummaryStatValue>
		constexpr auto HeroRespawnSnapshot = 0x3a8; // FRespawnSnapshot_Hero
		constexpr auto bHasEverBeenAlive = 0x581; // bool
		constexpr auto OnSlotSelectedCharacterChanged = 0x588; // FMulticastInlineDelegate
		constexpr auto OnOwningPlayerChanged = 0x598; // FMulticastInlineDelegate
		constexpr auto OnControllingPlayerChanged = 0x5a8; // FMulticastInlineDelegate
		constexpr auto OnAssignedPawnChanged = 0x5b8; // FMulticastInlineDelegate
		constexpr auto OnPlayerNameChanged = 0x5c8; // FMulticastInlineDelegate
		constexpr auto AssignedPawn = 0x658; // APawn*
		constexpr auto OwningPlayer = 0x660; // AGobiPlayerState*
		constexpr auto ControllingPlayer = 0x668; // AGobiPlayerState*
		constexpr auto PlayerLoadout = 0x670; // FPlayerLoadout
		constexpr auto SaferoomSnapshot = 0x718; // FRespawnSnapshot_Hero
	}

	namespace n_UParticleModuleLocationBoneSocket {
		constexpr auto SourceType = 0x38; // ELocationBoneSocketSource
		constexpr auto UniversalOffset = 0x3c; // FVector
		constexpr auto SourceLocations = 0x48; // TArray<FLocationBoneSocketInfo>
		constexpr auto SelectionMethod = 0x58; // ELocationBoneSocketSelectionMethod
		constexpr auto bUpdatePositionEachFrame = 0x5c; // char : 1
		constexpr auto bOrientMeshEmitters = 0x5c; // char : 1
		constexpr auto bInheritBoneVelocity = 0x5c; // char : 1
		constexpr auto InheritVelocityScale = 0x60; // float
		constexpr auto SkelMeshActorParamName = 0x64; // FName
		constexpr auto NumPreSelectedIndices = 0x6c; // int32_t
	}

	namespace n_UAkMarkerCallbackInfo {
		constexpr auto Identifier = 0x40; // int32_t
		constexpr auto Position = 0x44; // int32_t
		constexpr auto Label = 0x48; // FString
	}

	namespace n_UEdGraphNode_Documentation {
		constexpr auto Link = 0xa0; // FString
		constexpr auto Excerpt = 0xb0; // FString
	}

	namespace n_UMaterialExpressionMaterialProxyReplace {
		constexpr auto Realtime = 0x48; // FExpressionInput
		constexpr auto MaterialProxy = 0x5c; // FExpressionInput
	}

	namespace n_UPhysicsAsset {
		constexpr auto BoundsBodies = 0x38; // TArray<int32_t>
		constexpr auto SkeletalBodySetups = 0x48; // TArray<USkeletalBodySetup*>
		constexpr auto ConstraintSetup = 0x58; // TArray<UPhysicsConstraintTemplate*>
		constexpr auto SolverIterations = 0x68; // FSolverIterations
		constexpr auto bNotForDedicatedServer = 0x80; // char : 1
		constexpr auto ThumbnailInfo = 0x128; // UThumbnailInfo*
		constexpr auto BodySetup = 0x130; // TArray<UBodySetup*>
	}

	namespace n_UBTDecorator_DataBindingIsValid {
		constexpr auto UObjectDataProvider = 0x70; // FAIDataProviderUObjectValue
	}

	namespace n_UPlayerMoveSpeedMod {
		constexpr auto Speed = 0xd0; // FCustomDataProviderFloat
	}

	namespace n_UChannel {
		constexpr auto Connection = 0x30; // UNetConnection*
	}

	namespace n_UAtmosphericFogComponent {
		constexpr auto SunMultiplier = 0x230; // float
		constexpr auto FogMultiplier = 0x234; // float
		constexpr auto DensityMultiplier = 0x238; // float
		constexpr auto DensityOffset = 0x23c; // float
		constexpr auto DistanceScale = 0x240; // float
		constexpr auto AltitudeScale = 0x244; // float
		constexpr auto DistanceOffset = 0x248; // float
		constexpr auto GroundOffset = 0x24c; // float
		constexpr auto StartDistance = 0x250; // float
		constexpr auto SunDiscScale = 0x254; // float
		constexpr auto DefaultBrightness = 0x258; // float
		constexpr auto DefaultLightColor = 0x25c; // FColor
		constexpr auto bDisableSunDisk = 0x260; // char : 1
		constexpr auto bAtmosphereAffectsSunIlluminance = 0x260; // char : 1
		constexpr auto bDisableGroundScattering = 0x260; // char : 1
		constexpr auto PrecomputeParams = 0x264; // FAtmospherePrecomputeParameters
		constexpr auto TransmittanceTexture = 0x290; // UTexture2D*
		constexpr auto IrradianceTexture = 0x298; // UTexture2D*
	}

	namespace n_UAnimNotifyState_RepickMontage {
		constexpr auto bAllowRepickOfSelf = 0x38; // bool
	}

	namespace n_ADebugCameraController {
		constexpr auto bShowSelectedInfo = 0x628; // char : 1
		constexpr auto bIsFrozenRendering = 0x628; // char : 1
		constexpr auto bIsOrbitingSelectedActor = 0x628; // char : 1
		constexpr auto bOrbitPivotUseCenter = 0x628; // char : 1
		constexpr auto bEnableBufferVisualization = 0x628; // char : 1
		constexpr auto bEnableBufferVisualizationFullMode = 0x628; // char : 1
		constexpr auto bIsBufferVisualizationInputSetup = 0x628; // char : 1
		constexpr auto bLastDisplayEnabled = 0x628; // char : 1
		constexpr auto DrawFrustum = 0x630; // UDrawFrustumComponent*
		constexpr auto SelectedActor = 0x638; // AActor*
		constexpr auto SelectedComponent = 0x640; // UPrimitiveComponent*
		constexpr auto SelectedHitPoint = 0x648; // FHitResult
		constexpr auto OriginalControllerRef = 0x6d0; // APlayerController*
		constexpr auto OriginalPlayer = 0x6d8; // UPlayer*
		constexpr auto SpeedScale = 0x6e0; // float
		constexpr auto InitialMaxSpeed = 0x6e4; // float
		constexpr auto InitialAccel = 0x6e8; // float
		constexpr auto InitialDecel = 0x6ec; // float
	}

	namespace n_UAnimSet {
		constexpr auto bAnimRotationOnly = 0x30; // char : 1
		constexpr auto TrackBoneNames = 0x38; // TArray<FName>
		constexpr auto LinkupCache = 0x48; // TArray<FAnimSetMeshLinkup>
		constexpr auto BoneUseAnimTranslation = 0x58; // TArray<char>
		constexpr auto ForceUseMeshTranslation = 0x68; // TArray<char>
		constexpr auto UseTranslationBoneNames = 0x78; // TArray<FName>
		constexpr auto ForceMeshTranslationBoneNames = 0x88; // TArray<FName>
		constexpr auto PreviewSkelMeshName = 0x98; // FName
		constexpr auto BestRatioSkelMeshName = 0xa0; // FName
	}

	namespace n_ULightComponentBase {
		constexpr auto LightGuid = 0x230; // FGuid
		constexpr auto Brightness = 0x240; // float
		constexpr auto Intensity = 0x244; // float
		constexpr auto LightColor = 0x248; // FColor
		constexpr auto bAffectsWorld = 0x24c; // char : 1
		constexpr auto CastShadows = 0x24c; // char : 1
		constexpr auto CastStaticShadows = 0x24c; // char : 1
		constexpr auto CastDynamicShadows = 0x24c; // char : 1
		constexpr auto bAffectTranslucentLighting = 0x24c; // char : 1
		constexpr auto bTransmission = 0x24c; // char : 1
		constexpr auto bCastVolumetricShadow = 0x24c; // char : 1
		constexpr auto bCastDeepShadow = 0x24c; // char : 1
		constexpr auto bCastRaytracedShadow = 0x24d; // char : 1
		constexpr auto bAffectReflection = 0x24d; // char : 1
		constexpr auto bAffectGlobalIllumination = 0x24d; // char : 1
		constexpr auto IndirectLightingIntensity = 0x250; // float
		constexpr auto VolumetricScatteringIntensity = 0x254; // float
		constexpr auto SamplesPerPixel = 0x258; // int32_t
	}

	namespace n_UPlacementComponent {
		constexpr auto ActorClass = 0xf0; // AActor*
		constexpr auto ProceduralPhase = 0xf8; // EProceduralBuildPhase
		constexpr auto bGenerateRandomSeed = 0xf9; // bool
		constexpr auto RandomSeed = 0xfc; // int32_t
		constexpr auto OffsetMode = 0x100; // EPlacementOffsetMode
		constexpr auto Translation = 0x104; // FVector
		constexpr auto Rotation = 0x110; // FRotator
		constexpr auto MinTranslation = 0x11c; // FVector
		constexpr auto MaxTranslation = 0x128; // FVector
		constexpr auto MinRotation = 0x134; // FRotator
		constexpr auto MaxRotation = 0x140; // FRotator
	}

	namespace n_UPostRoundChallengeObjectiveUserWidget {
		constexpr auto PointCountAnim = 0x468; // FGobiCountAnim
		constexpr auto DiffCountAnim = 0x490; // FGobiCountAnim
	}

	namespace n_USupplyPointsUserWidget {
		constexpr auto SupplyPoints = 0x458; // int32_t
	}

	namespace n_UPlatformInputIcons {
		constexpr auto Keys = 0x30; // TMap<FKey, FInputIcons>
	}

	namespace n_ASurfaceTypeDebugActor {
		constexpr auto StaticMeshComponent = 0x2a0; // UStaticMeshComponent*
		constexpr auto TextRendererComponent = 0x2a8; // UTextRenderComponent*
		constexpr auto InternalRootComponent = 0x2b0; // USceneComponent*
		constexpr auto ImpactGameplayTag = 0x2b8; // FGameplayTag
	}

	namespace n_UNiagaraEmitter {
		constexpr auto bLocalSpace = 0x30; // bool
		constexpr auto bDeterminism = 0x31; // bool
		constexpr auto RandomSeed = 0x34; // int32_t
		constexpr auto AllocationMode = 0x38; // EParticleAllocationMode
		constexpr auto PreAllocationCount = 0x3c; // int32_t
		constexpr auto UpdateScriptProps = 0x40; // FNiagaraEmitterScriptProperties
		constexpr auto SpawnScriptProps = 0x68; // FNiagaraEmitterScriptProperties
		constexpr auto EmitterSpawnScriptProps = 0x90; // FNiagaraEmitterScriptProperties
		constexpr auto EmitterUpdateScriptProps = 0xb8; // FNiagaraEmitterScriptProperties
		constexpr auto SimTarget = 0xe0; // ENiagaraSimTarget
		constexpr auto FixedBounds = 0xe4; // FBox
		constexpr auto MinDetailLevel = 0x100; // int32_t
		constexpr auto MaxDetailLevel = 0x104; // int32_t
		constexpr auto GlobalSpawnCountScaleOverrides = 0x108; // FNiagaraDetailsLevelScaleOverrides
		constexpr auto Platforms = 0x120; // FNiagaraPlatformSet
		constexpr auto ScalabilityOverrides = 0x140; // FNiagaraEmitterScalabilityOverrides
		constexpr auto bInterpolatedSpawning = 0x150; // char : 1
		constexpr auto bFixedBounds = 0x150; // char : 1
		constexpr auto bUseMinDetailLevel = 0x150; // char : 1
		constexpr auto bUseMaxDetailLevel = 0x150; // char : 1
		constexpr auto bOverrideGlobalSpawnCountScale = 0x150; // char : 1
		constexpr auto bRequiresPersistentIDs = 0x150; // char : 1
		constexpr auto MaxDeltaTimePerTick = 0x154; // float
		constexpr auto DefaultShaderStageIndex = 0x158; // uint32_t
		constexpr auto MaxUpdateIterations = 0x15c; // uint32_t
		constexpr auto SpawnStages = 0x160; // TSet<uint32_t>
		constexpr auto bSimulationStagesEnabled = 0x1b0; // char : 1
		constexpr auto bDeprecatedShaderStagesEnabled = 0x1b0; // char : 1
		constexpr auto bLimitDeltaTime = 0x1b0; // char : 1
		constexpr auto UniqueEmitterName = 0x1b8; // FString
		constexpr auto RendererProperties = 0x1c8; // TArray<UNiagaraRendererProperties*>
		constexpr auto EventHandlerScriptProps = 0x1d8; // TArray<FNiagaraEventScriptProperties>
		constexpr auto SimulationStages = 0x1e8; // TArray<UNiagaraSimulationStageBase*>
		constexpr auto GPUComputeScript = 0x1f8; // UNiagaraScript*
		constexpr auto SharedEventGeneratorIds = 0x200; // TArray<FName>
	}

	namespace n_UGobiLocalPlayer {
		constexpr auto OnSettingsInitialized = 0x260; // FMulticastInlineDelegate
		constexpr auto PlayerSettings = 0x2e0; // UPlayerSettingsGame*
		constexpr auto GameCoachSettings = 0x2e8; // UGameCoachSettings*
		constexpr auto FTUESettings = 0x2f0; // UFTUESettings*
		constexpr auto PlayerProfileSettings = 0x2f8; // UPlayerProfileSettings*
		constexpr auto OnlineSettings = 0x300; // UOnlineSettings*
		constexpr auto RelationshipSettings = 0x308; // URelationshipSettings*
		constexpr auto PlayerAnalyticsSettings = 0x310; // UPlayerAnalyticsSettings*
	}

	namespace n_UFXSystemAsset {
		constexpr auto MaxPoolSize = 0x30; // uint32_t
	}

	namespace n_UGeometryCache {
		constexpr auto Materials = 0x38; // TArray<UMaterialInterface*>
		constexpr auto Tracks = 0x48; // TArray<UGeometryCacheTrack*>
		constexpr auto StartFrame = 0x68; // int32_t
		constexpr auto EndFrame = 0x6c; // int32_t
	}

	namespace n_UStumbleOthersComponent {
		constexpr auto StumbleFrequency = 0x150; // float
		constexpr auto MinDistance = 0x154; // float
		constexpr auto AngleThreshold = 0x158; // float
		constexpr auto FrontImpactAngle = 0x15c; // float
		constexpr auto FrontAngle = 0x160; // float
		constexpr auto TagRequirements = 0x168; // FGameplayTagQuery
		constexpr auto TargetTagRequirements = 0x1b0; // FGameplayTagQuery
		constexpr auto ApplyEffects = 0x1f8; // TArray<UGameplayEffect*>
	}

	namespace n_UGizmoComponentWorldTransformSource {
		constexpr auto Component = 0x50; // USceneComponent*
		constexpr auto bModifyComponentOnTransform = 0x58; // bool
	}

	namespace n_UGameplayEvalSet_Shared_Melee_Filter_C {
		constexpr auto DistanceToEnemy = 0xc0; // FGameplayEval_Distance
		constexpr auto DistanceZToEnemy = 0x190; // FGameplayEval_Distance
		constexpr auto AngleToEnemy = 0x260; // FGameplayEval_Angle
		constexpr auto NavBlocked = 0x2c0; // FGameplayEval_NavBlocked
		constexpr auto AvatarTags = 0x318; // FGameplayEval_GameplayTags
		constexpr auto EnemyTags = 0x3b0; // FGameplayEval_GameplayTags
		constexpr auto EnemySpeed = 0x448; // FGameplayEval_Speed
		constexpr auto BlockedByPawn = 0x4a8; // FGameplayEval_BlockedByPawn
		constexpr auto VisibilityToEnemy = 0x510; // FGameplayEval_HasVisibility
	}

	namespace n_ULightmassPortalComponent {
		constexpr auto PreviewBox = 0x230; // UBoxComponent*
	}

	namespace n_UNestsComponent {
		constexpr auto bHasFinishedSetup = 0xe8; // bool
		constexpr auto HiddenNestClusterBoils = 0xf0; // TArray<FClusterBoils>
		constexpr auto bIsNestDead = 0x100; // bool
		constexpr auto VisibleNestClusterBoils = 0x108; // TArray<FClusterBoils>
		constexpr auto HordeTriggeredCount = 0x118; // int32_t
		constexpr auto WaypointLessonActorClass = 0x140; // AActor*
		constexpr auto WaypointLessonActorZoffset = 0x148; // float
		constexpr auto SpawnedBoils = 0x150; // TArray<AActor*>
		constexpr auto OnBoilShrink = 0x160; // FMulticastInlineDelegate
		constexpr auto OnClusterDestroyed = 0x170; // FMulticastInlineDelegate
		constexpr auto OnNestDestroyed = 0x180; // FMulticastInlineDelegate
		constexpr auto OnPlayedCards = 0x190; // FMulticastInlineDelegate
		constexpr auto bAllowScenarioToAffectNest = 0x1a0; // bool
		constexpr auto bClusterDeathDropsLoot = 0x1a1; // bool
		constexpr auto bClusterDeathAddsCards = 0x1a2; // bool
		constexpr auto bNestDeathDropsLoot = 0x1a3; // bool
		constexpr auto bNestDeathAddsCards = 0x1a4; // bool
		constexpr auto BoilsToSpawn = 0x1a8; // AActor*
		constexpr auto NestBoilToSpawn = 0x1b0; // AActor*
		constexpr auto TotalOfClustersVisible = 0x1b8; // int32_t
		constexpr auto NumberOfClusterDestroyed = 0x1bc; // int32_t
		constexpr auto ClusterTag = 0x1c0; // FGameplayTag
		constexpr auto NestBoilBaseTag = 0x1c8; // FGameplayTag
		constexpr auto NestBaseTag = 0x1d0; // FGameplayTag
		constexpr auto NumberOfArmsforEasyDifficulty = 0x1d8; // int32_t
		constexpr auto NumberOfArmsforNormalDifficulty = 0x1dc; // int32_t
		constexpr auto NumberOfArmsforHardDifficulty = 0x1e0; // int32_t
		constexpr auto NumberOfArmsforLegendaryDifficulty = 0x1e4; // int32_t
		constexpr auto AISpawnActorVolume = 0x1e8; // AAISpawnActorVolume*
		constexpr auto SpawnedAISpawnActorVolumes = 0x1f0; // TArray<AAISpawnActorVolume*>
		constexpr auto AISpawnActorVolumeScale = 0x200; // FVector
		constexpr auto HordeBlockTag = 0x20c; // FGameplayTag
		constexpr auto ClusterLootTag = 0x218; // FGameplayTagContainer
		constexpr auto DisallowedClusterLootTag = 0x238; // FGameplayTagContainer
		constexpr auto NestLootTag = 0x258; // FGameplayTagContainer
		constexpr auto DisallowedNestLootTag = 0x278; // FGameplayTagContainer
		constexpr auto NestLootSpawn = 0x298; // USceneComponent*
		constexpr auto NestLootSpawnTag = 0x2a0; // FName
		constexpr auto ClusterTransformZOffset = 0x2a8; // float
		constexpr auto ClusterTransformZGroundOffset = 0x2ac; // float
		constexpr auto NavBoundsExtents = 0x2b0; // FVector
		constexpr auto FliesParticle = 0x2c0; // UParticleSystem*
		constexpr auto ClusterParticleOffset = 0x2c8; // float
		constexpr auto ClusterExplodeParticle = 0x2d0; // UParticleSystem*
		constexpr auto NestPodExplosion = 0x2d8; // UParticleSystem*
		constexpr auto ClustersAkComponents = 0x2e0; // TArray<UAkComponent*>
		constexpr auto VisibleSplines = 0x2f0; // TArray<USplineComponent*>
		constexpr auto AKBasePodTag = 0x300; // FName
		constexpr auto AkTentacleTag = 0x308; // FName
		constexpr auto HordeRoarLocationTag = 0x310; // FName
		constexpr auto NearBasePodTag = 0x318; // FName
		constexpr auto NestIdleAudio = 0x320; // UAkAudioEvent*
		constexpr auto TentacleIdleAudio = 0x328; // UAkAudioEvent*
		constexpr auto TentacleIdleStopAudio = 0x330; // UAkAudioEvent*
		constexpr auto TentacleLocationUpdateRate = 0x338; // float
		constexpr auto NestHurtAudio = 0x340; // UAkAudioEvent*
		constexpr auto ClusterDestroyedAudio = 0x348; // UAkAudioEvent*
		constexpr auto NestSmallIdleAudio = 0x350; // UAkAudioEvent*
		constexpr auto BoilsDestoryedAudio = 0x358; // UAkAudioEvent*
		constexpr auto BoilsShrinkAudioEvent = 0x360; // UAkAudioEvent*
		constexpr auto BoilsGrowAudioEvent = 0x368; // UAkAudioEvent*
		constexpr auto NestPodDeathAudioEvent = 0x370; // UAkAudioEvent*
		constexpr auto NestPodExplosionAudioEvent = 0x378; // UAkAudioEvent*
		constexpr auto DialogueDelay = 0x380; // float
		constexpr auto LastClusterAliveDialogueTable = 0x388; // FDataTableRowHandle
		constexpr auto TwoClusterAliveDialogueTable = 0x3a8; // FDataTableRowHandle
		constexpr auto ThreePlusClusterAliveDialogueTableArray = 0x3c8; // TArray<FDataTableRowHandle>
		constexpr auto HordeDialogueTable = 0x3d8; // FDataTableRowHandle
		constexpr auto HordeTag = 0x3f8; // FGameplayTag
		constexpr auto NestDefeatedDialogueTable = 0x400; // FDataTableRowHandle
		constexpr auto NestEncounterDialogueTable = 0x420; // FDataTableRowHandle
		constexpr auto NestEncounterHint1DialogueTable = 0x440; // FDataTableRowHandle
		constexpr auto NestEncounterHint2DialogueTable = 0x460; // FDataTableRowHandle
		constexpr auto Hint1CountdownTimer = 0x480; // float
		constexpr auto Hint2CountdownTimer = 0x484; // float
		constexpr auto ExcitationRadius = 0x488; // float
		constexpr auto SpeedOfPropagation = 0x48c; // float
		constexpr auto LifeSpanWhenDestroyed = 0x490; // float
		constexpr auto AKBasePod = 0x498; // UAkComponent*
		constexpr auto AKTentacle = 0x4a0; // UAkComponent*
		constexpr auto HordeRoarLocation = 0x4a8; // UBillboardComponent*
		constexpr auto NearBasePodBox = 0x4b0; // UBoxComponent*
		constexpr auto ActiveCardsInPlay = 0x4b8; // TArray<FDataTableRowHandle>
		constexpr auto EasyDifficultyCardsArray = 0x4c8; // TArray<FNestChallengeCards>
		constexpr auto NormalDifficultyCardsArray = 0x4d8; // TArray<FNestChallengeCards>
		constexpr auto HardDifficultyCardsArray = 0x4e8; // TArray<FNestChallengeCards>
		constexpr auto LegendaryDifficultyCardsArray = 0x4f8; // TArray<FNestChallengeCards>
		constexpr auto NumOfCardDraws = 0x508; // TArray<int32_t>
		constexpr auto ScenarioDifficultyCardDraw = 0x518; // FDifficultyInt
		constexpr auto ClusterDestroyedText = 0x530; // FString
		constexpr auto NestDestroyedText = 0x540; // FString
	}

	namespace n_ABandwidthTestActor {
		constexpr auto BandwidthGenerator = 0x2a0; // FBandwidthTestGenerator
	}

	namespace n_USubmixEffectReverbFastPreset {
		constexpr auto Settings = 0xa8; // FSubmixEffectReverbFastSettings
	}

	namespace n_UInteractiveCarMod {
		constexpr auto DestroyableChance = 0xd8; // FGamePropertyFloatMod
	}

	namespace n_UVendorAnimInstance {
		constexpr auto CurrentBehaviorState = 0x2b8; // EVendorAnimBehaviorState
		constexpr auto LonelyAnim = 0x2c0; // UAnimSequence*
		constexpr auto NagAnim = 0x2c8; // UAnimSequence*
		constexpr auto InteractAnim = 0x2d0; // UAnimSequence*
		constexpr auto InteractToLonelyAnim = 0x2d8; // UAnimSequence*
		constexpr auto LonelyToNagAnim = 0x2e0; // UAnimSequence*
		constexpr auto NagToLonelyAnim = 0x2e8; // UAnimSequence*
		constexpr auto NagToInteractAnim = 0x2f0; // UAnimSequence*
		constexpr auto LookAtInfo = 0x2f8; // FLookAtInfo
	}

	namespace n_UNiagaraPreviewAxis_InterpParamLinearColor {
		constexpr auto Min = 0x40; // FLinearColor
		constexpr auto Max = 0x50; // FLinearColor
	}

	namespace n_UInputActionDelegateBinding {
		constexpr auto InputActionDelegateBindings = 0x30; // TArray<FBlueprintInputActionDelegateBinding>
	}

	namespace n_UMatchmakingLocalUserSlot {
		constexpr auto GobiWebServices = 0x30; // UGobiWebServices*
		constexpr auto Matchmaking = 0x38; // UMatchmaking*
		constexpr auto OnlineSessions = 0x40; // UOnlineSessions*
		constexpr auto GobiWBP1 = 0x48; // UGobiWBP1*
		constexpr auto GameInstance = 0x50; // UGameInstance*
		constexpr auto TimerConfigs = 0x58; // TArray<FTaskTimerConfig>
		constexpr auto SignInTasks = 0x298; // FSignInTasks
		constexpr auto VivoxListener = 0x310; // UVivoxListener*
		constexpr auto BroadcastMessageManager = 0x318; // UBroadcastMessageManager*
	}

	namespace n_UAudioJostleSystemPluginSettings {
		constexpr auto AudioJostleBehaviorsClass = 0x40; // UAudioJostleBehaviors*
		constexpr auto GridSize = 0x48; // float
		constexpr auto HighQualitySettings = 0x4c; // FAudioJostleQualitySettings
		constexpr auto LowQualitySettings = 0x58; // FAudioJostleQualitySettings
	}

	namespace n_UMaterialExpressionLandscapeLayerCoords {
		constexpr auto MappingType = 0x48; // ETerrainCoordMappingType
		constexpr auto CustomUVType = 0x49; // ELandscapeCustomizedCoordType
		constexpr auto MappingScale = 0x4c; // float
		constexpr auto MappingRotation = 0x50; // float
		constexpr auto MappingPanU = 0x54; // float
		constexpr auto MappingPanV = 0x58; // float
	}

	namespace n_ALandscapeStreamingProxy {
		constexpr auto LandscapeActor = 0x5c0; // LazyObjectProperty
	}

	namespace n_UInstancedStaticMeshComponent {
		constexpr auto PerInstanceSMData = 0x5c0; // TArray<FInstancedStaticMeshInstanceData>
		constexpr auto NumCustomDataFloats = 0x5d0; // int32_t
		constexpr auto PerInstanceSMCustomData = 0x5d8; // TArray<float>
		constexpr auto InstancingRandomSeed = 0x5e8; // int32_t
		constexpr auto InstanceStartCullDistance = 0x5ec; // int32_t
		constexpr auto InstanceEndCullDistance = 0x5f0; // int32_t
		constexpr auto InstanceReorderTable = 0x5f8; // TArray<int32_t>
		constexpr auto NumPendingLightmaps = 0x664; // int32_t
		constexpr auto CachedMappings = 0x668; // TArray<FInstancedStaticMeshMappingInfo>
	}

	namespace n_UInventoryLesson_BP_C {
		constexpr auto UberGraphFrame = 0x460; // FPointerToUberGraphFrame
	}

	namespace n_UEndpoints {
		constexpr auto AtuinVersion = 0x30; // int32_t
		constexpr auto ClientEndpoints = 0x38; // TArray<FWebServiceEndpoint>
		constexpr auto DediEndpoints = 0x48; // TArray<FWebServiceEndpoint>
	}

	namespace n_UTextBlock {
		constexpr auto Text = 0x168; // FText
		constexpr auto TextDelegate = 0x180; // FDelegate
		constexpr auto ColorAndOpacity = 0x190; // FSlateColor
		constexpr auto ColorAndOpacityDelegate = 0x1c0; // FDelegate
		constexpr auto Font = 0x1d0; // FSlateFontInfo
		constexpr auto StrikeBrush = 0x230; // FSlateBrush
		constexpr auto ShadowOffset = 0x2c0; // FVector2D
		constexpr auto ShadowColorAndOpacity = 0x2c8; // FLinearColor
		constexpr auto ShadowColorAndOpacityDelegate = 0x2d8; // FDelegate
		constexpr auto MinDesiredWidth = 0x2e8; // float
		constexpr auto bWrapWithInvalidationPanel = 0x2ec; // bool
		constexpr auto bAutoWrapText = 0x2ed; // bool
		constexpr auto bForceUppercase = 0x2ee; // bool
		constexpr auto Kerning = 0x2f0; // int32_t
		constexpr auto bSimpleTextMode = 0x2f4; // bool
	}

	namespace n_UBTComposite_SimpleParallelEx {
		constexpr auto ParallelMode = 0x98; // EBTParallelExMode
	}

	namespace n_UApplyEffectItemComponent {
		constexpr auto OnItemApplied = 0x160; // FMulticastInlineDelegate
		constexpr auto OnItemCancelled = 0x170; // FMulticastInlineDelegate
		constexpr auto CurrentState = 0x180; // EEffectApplicationItemState
		constexpr auto TargetActor = 0x188; // AActor*
		constexpr auto HitComponent = 0x198; // UPrimitiveComponent*
		constexpr auto VisualTargetCharacter = 0x1a0; // AGobiCharacter*
		constexpr auto bWillExpendAmmoOnUse = 0x1a8; // bool
		constexpr auto RequiredUseLength = 0x28c; // float
		constexpr auto FinishUseStateLength = 0x290; // float
		constexpr auto bRequireButtonHeld = 0x294; // bool
		constexpr auto bActivateWithoutValidTarget = 0x295; // bool
		constexpr auto bExpendAmmoWithoutValidTarget = 0x296; // bool
		constexpr auto bSelectPreviousWeaponAfterUse = 0x297; // bool
		constexpr auto bCancelUseOnKnockback = 0x298; // bool
		constexpr auto bRequireSelection = 0x299; // bool
		constexpr auto ChanceToExpendAmmoOnUse = 0x29c; // float
		constexpr auto bCanUseWhileFalling = 0x2a0; // bool
		constexpr auto bWaitForPrimaryRelease = 0x2a1; // bool
		constexpr auto UsableClassForUsableTimeScale = 0x2b0; // TSoftClassPtr<UObject>
		constexpr auto MovementScale = 0x2d8; // float
		constexpr auto MovementScaleLabel = 0x2dc; // FName
		constexpr auto bApplyMovementScaleToTargetPlayer = 0x2e4; // bool
		constexpr auto bScaleAnimationLengthToUseLength = 0x2e5; // bool
		constexpr auto UseMontageFP = 0x2e8; // UAnimMontage*
		constexpr auto UseMontage3P = 0x2f0; // UAnimMontage*
		constexpr auto EndUseMontageFP = 0x2f8; // UAnimMontage*
		constexpr auto EndUseMontage3P = 0x300; // UAnimMontage*
		constexpr auto AltUseMontageFP = 0x308; // UAnimMontage*
		constexpr auto AltUseMontage3P = 0x310; // UAnimMontage*
		constexpr auto EndAltUseMontageFP = 0x318; // UAnimMontage*
		constexpr auto EndAltUseMontage3P = 0x320; // UAnimMontage*
		constexpr auto bRemoveAppliedTagsBeforeApplyingSuccessfulEffects = 0x328; // bool
		constexpr auto bRemoveTargetAppliedEffectsUponEndUse = 0x329; // bool
		constexpr auto AppliedTags = 0x330; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x350; // FGameplayTagContainer
		constexpr auto ContinuousTagQuery = 0x370; // FGameplayTagQuery
		constexpr auto TargetAppliedTags = 0x3b8; // FGameplayTagContainer
		constexpr auto InitialTargetTagQuery = 0x3d8; // FGameplayTagQuery
		constexpr auto ContinuousTargetTagQuery = 0x420; // FGameplayTagQuery
		constexpr auto BeginUseCue = 0x468; // FGameplayTag
		constexpr auto SuccessfulUseCue = 0x470; // FGameplayTag
		constexpr auto UnsuccessfulUseCue = 0x478; // FGameplayTag
		constexpr auto ProgressBarText = 0x480; // FText
		constexpr auto TargetProgressBarText = 0x498; // FText
		constexpr auto TargetSelfProgressBarText = 0x4b0; // FText
		constexpr auto bShowProgressbar = 0x4c8; // bool
		constexpr auto bAllowAltUseTargetting = 0x4c9; // bool
		constexpr auto MaxAltUseTargetDistance = 0x4cc; // float
		constexpr auto MaxAltUseTargetDistanceWhenUsing = 0x4d0; // float
		constexpr auto MinAngleToTarget = 0x4d4; // float
		constexpr auto OnSuccessGameplayEffects = 0x4d8; // TArray<UGameplayEffect*>
		constexpr auto OnTargetUseGameplayEffects = 0x4e8; // TArray<UGameplayEffect*>
		constexpr auto OnOwnerUseGameplayEffects = 0x4f8; // TArray<UGameplayEffect*>
		constexpr auto OnHeldGameplayEffects = 0x508; // TArray<UGameplayEffect*>
		constexpr auto TriggeredEventName = 0x518; // FName
	}

	namespace n_UEnvQueryGenerator_Spiral {
		constexpr auto InnerRadius = 0x88; // FAIDataProviderFloatValue
		constexpr auto OuterRadius = 0xc0; // FAIDataProviderFloatValue
		constexpr auto NumberOfLoops = 0xf8; // FAIDataProviderIntValue
		constexpr auto SpaceBetweenLoops = 0x130; // FAIDataProviderFloatValue
		constexpr auto SpaceBetweenPoints = 0x168; // FAIDataProviderFloatValue
		constexpr auto Center = 0x1a0; // UEnvQueryContext*
	}

	namespace n_URadioButton {
		constexpr auto WidgetStyle = 0x160; // FRadioButtonStyle
		constexpr auto bIsChecked = 0x568; // bool
		constexpr auto bIsContentInside = 0x569; // bool
		constexpr auto HorizontalAlignment = 0x56a; // EHorizontalAlignment
		constexpr auto IsFocusable = 0x56b; // bool
		constexpr auto bIsFocusedOnHover = 0x56c; // bool
		constexpr auto RadioButtonGroup = 0x570; // FName
		constexpr auto OnCheckStateChanged = 0x578; // FMulticastInlineDelegate
		constexpr auto OnClicked = 0x588; // FMulticastInlineDelegate
		constexpr auto OnHovered = 0x598; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x5a8; // FMulticastInlineDelegate
		constexpr auto OnPressed = 0x5b8; // FMulticastInlineDelegate
		constexpr auto OnReleased = 0x5c8; // FMulticastInlineDelegate
		constexpr auto ClickMethod = 0x5d8; // EButtonClickMethod
	}

	namespace n_UPushToTalkComponent {
		constexpr auto InputComponent = 0xe8; // UInputComponent*
	}

	namespace n_UGobiGameCoachLesson {
		constexpr auto LastUpdateTarget = 0xe0; // AActor*
		constexpr auto TargetGameplayTagsComponentCached = 0xe8; // UGameplayTagsComponent*
		constexpr auto GobiLocalPlayer = 0xf0; // UGobiLocalPlayer*
		constexpr auto TargetCharacter = 0xf8; // AGobiCharacter*
		constexpr auto bListenForPawnChanges = 0x100; // bool
		constexpr auto bAllowAllTRSEvents = 0x101; // bool
		constexpr auto OnExtraInfo = 0x108; // FMulticastInlineDelegate
		constexpr auto OnShowWaypoint = 0x118; // FMulticastInlineDelegate
		constexpr auto OnSetWaypointText = 0x128; // FMulticastInlineDelegate
		constexpr auto Team = 0x138; // EGobiTeam
		constexpr auto LocalPlayerTags = 0x140; // FGameplayTagQuery
		constexpr auto TargetTags = 0x188; // FGameplayTagQuery
		constexpr auto LocalPlayerInventoryItemTagQuery = 0x1d0; // FGameplayTagQuery
		constexpr auto LocalPlayerTeachableEvalSets = 0x218; // TArray<UGobiGameCoachEvaluatorSet*>
		constexpr auto TargetTeachableEvalSets = 0x228; // TArray<UGobiGameCoachEvaluatorSet*>
		constexpr auto ActiveMissionObjective = 0x238; // FDataTableRowHandle
		constexpr auto bMainMenu = 0x258; // bool
		constexpr auto bSocialSpace = 0x259; // bool
		constexpr auto bPvP = 0x25a; // bool
		constexpr auto bCoop = 0x25b; // bool
		constexpr auto LowestCoopDifficulty = 0x25c; // EMissionDifficulty
		constexpr auto HighestCoopDifficulty = 0x25d; // EMissionDifficulty
		constexpr auto bShowDemo2020 = 0x25e; // bool
		constexpr auto TeachingSuccessLocalPlayerTags = 0x260; // FGameplayTagQuery
		constexpr auto TeachingSuccessTargetTags = 0x2a8; // FGameplayTagQuery
		constexpr auto TeachingSuccessLocalPlayerEvalSets = 0x2f0; // TArray<UGobiGameCoachEvaluatorSet*>
		constexpr auto TeachingSuccessTargetEvalSets = 0x300; // TArray<UGobiGameCoachEvaluatorSet*>
		constexpr auto TeachingSuccessTRSEventNames = 0x310; // TArray<FName>
		constexpr auto TeachingFailureLocalPlayerTags = 0x320; // FGameplayTagQuery
		constexpr auto TeachingFailureTargetTags = 0x368; // FGameplayTagQuery
		constexpr auto TeachingFailureLocalPlayerEvalSets = 0x3b0; // TArray<UGobiGameCoachEvaluatorSet*>
		constexpr auto bFailIfEvalSetFails = 0x3c0; // bool
		constexpr auto TeachingFailureTargetEvalSets = 0x3c8; // TArray<UGobiGameCoachEvaluatorSet*>
		constexpr auto NotificationIcon = 0x3d8; // UTexture2D*
		constexpr auto NotificationText = 0x3e0; // FText
		constexpr auto NotificationGamepadText = 0x3f8; // FText
		constexpr auto bNotificationOutputTTS = 0x410; // bool
		constexpr auto WaypointIcon = 0x418; // UTexture2D*
		constexpr auto WaypointTitle = 0x420; // FText
		constexpr auto WaypointText = 0x438; // FText
		constexpr auto HighlightEquipSlot = 0x450; // EEquipmentSlot
		constexpr auto bShowInGameOnly = 0x451; // bool
		constexpr auto bHideForPotentialUsableTarget = 0x452; // bool
		constexpr auto bHideForAltUseTarget = 0x453; // bool
		constexpr auto DisplayOverrideSound = 0x458; // UAkAudioEvent*
	}

	namespace n_UTweenManagerComponent {
		constexpr auto mTweenContainers = 0xe8; // TArray<UTweenContainer*>
	}

	namespace n_ASafeRoomVendor {
		constexpr auto MatchStartedCondition = 0x2a0; // FMatchStartedCondition
	}

	namespace n_UPartyBeaconState {
		constexpr auto SessionName = 0x30; // FName
		constexpr auto NumConsumedReservations = 0x38; // int32_t
		constexpr auto MaxReservations = 0x3c; // int32_t
		constexpr auto NumTeams = 0x40; // int32_t
		constexpr auto NumPlayersPerTeam = 0x44; // int32_t
		constexpr auto TeamAssignmentMethod = 0x48; // FName
		constexpr auto ReservedHostTeamNum = 0x50; // int32_t
		constexpr auto ForceTeamNum = 0x54; // int32_t
		constexpr auto bRestrictCrossConsole = 0x58; // bool
		constexpr auto bEnableRemovalRequests = 0x59; // bool
		constexpr auto Reservations = 0x60; // TArray<FPartyReservation>
	}

	namespace n_USceneCaptureComponentCube {
		constexpr auto TextureTarget = 0x2c8; // UTextureRenderTargetCube*
		constexpr auto bCaptureRotation = 0x2d0; // bool
		constexpr auto TextureTargetLeft = 0x2d8; // UTextureRenderTargetCube*
		constexpr auto TextureTargetRight = 0x2e0; // UTextureRenderTargetCube*
		constexpr auto TextureTargetODS = 0x2e8; // UTextureRenderTarget2D*
		constexpr auto IPD = 0x2f0; // float
	}

	namespace n_UCutsceneAudioSinkSubsystem {
		constexpr auto MediaPlayerPairs = 0x48; // TMap<TWeakObjectPtr<UMediaPlayer>, UAudioSinkSystem*>
	}

	namespace n_UEnvQueryTest_DistanceAlongGoldenPathDelta {
		constexpr auto HeroContext = 0x208; // UEnvQueryContext*
	}

	namespace n_ULootSpawnCountMod {
		constexpr auto SpawnCountModifier = 0xd0; // FLootSpawnCountModifier
	}

	namespace n_UGameplayAction_Death {
		constexpr auto DieToRagdollQuery = 0x2e8; // FGameplayTagQuery
	}

	namespace n_UAnimContext_ActorSocket {
		constexpr auto Socket = 0x90; // FName
		constexpr auto bFailIfSocketNotFound = 0x98; // bool
	}

	namespace n_UItemAmmoMod {
		constexpr auto RequiredAssociatedItemTag = 0xd0; // FGameplayTag
		constexpr auto Count = 0xd8; // int32_t
	}

	namespace n_UGobiPlayerProfileComponent {
		constexpr auto bPlayerProfileServiceHealthy = 0x18a; // bool
	}

	namespace n_UTextLayoutWidget {
		constexpr auto ShapedTextOptions = 0x148; // FShapedTextOptions
		constexpr auto Justification = 0x14b; // ETextJustify
		constexpr auto WrappingPolicy = 0x14c; // ETextWrappingPolicy
		constexpr auto AutoWrapText = 0x14d; // char : 1
		constexpr auto WrapTextAt = 0x150; // float
		constexpr auto Margin = 0x154; // FMargin
		constexpr auto LineHeightPercentage = 0x164; // float
	}

	namespace n_UChatBoxUserWidget {
		constexpr auto PlayerJoinedGroupAudio = 0x458; // UAkAudioEvent*
	}

	namespace n_USphereReflectionCaptureComponent {
		constexpr auto InfluenceRadius = 0x2a8; // float
		constexpr auto CaptureDistanceScale = 0x2ac; // float
		constexpr auto PreviewInfluenceRadius = 0x2b0; // UDrawSphereComponent*
	}

	namespace n_ASwapTeamVolume {
		constexpr auto RejectionTeleportLocation = 0x360; // USceneComponent*
	}

	namespace n_USourceEffectEQPreset {
		constexpr auto Settings = 0x80; // FSourceEffectEQSettings
	}

	namespace n_UNiagaraComponent {
		constexpr auto Asset = 0x4b0; // UNiagaraSystem*
		constexpr auto TickBehavior = 0x4b8; // ENiagaraTickBehavior
		constexpr auto OverrideParameters = 0x4c0; // FNiagaraUserRedirectionParameterStore
		constexpr auto bForceSolo = 0x5c8; // char : 1
		constexpr auto bAutoDestroy = 0x5f4; // char : 1
		constexpr auto bRenderingEnabled = 0x5f4; // char : 1
		constexpr auto bAutoManageAttachment = 0x5f4; // char : 1
		constexpr auto bAutoAttachWeldSimulatedBodies = 0x5f4; // char : 1
		constexpr auto MaxTimeBeforeForceUpdateTransform = 0x5f8; // float
		constexpr auto OnSystemFinished = 0x600; // FMulticastInlineDelegate
		constexpr auto AutoAttachParent = 0x610; // TWeakObjectPtr<USceneComponent>
		constexpr auto AutoAttachSocketName = 0x618; // FName
		constexpr auto AutoAttachLocationRule = 0x620; // EAttachmentRule
		constexpr auto AutoAttachRotationRule = 0x621; // EAttachmentRule
		constexpr auto AutoAttachScaleRule = 0x622; // EAttachmentRule
	}

	namespace n_UAnimNotifyState_TimedNiagaraEffect {
		constexpr auto Template = 0x38; // UNiagaraSystem*
		constexpr auto SocketName = 0x40; // FName
		constexpr auto LocationOffset = 0x48; // FVector
		constexpr auto RotationOffset = 0x54; // FRotator
		constexpr auto bDestroyAtEnd = 0x60; // bool
	}

	namespace n_UOptionsBindingTextLabelUserWidget {
		constexpr auto InputList = 0x458; // TArray<FOptionsBindingTextLabelInputType>
		constexpr auto bShowIcon = 0x468; // bool
		constexpr auto CalloutIconHeight = 0x46c; // float
		constexpr auto HumanAxisDataTableList = 0x470; // TArray<UDataTable*>
		constexpr auto ZombieAxisDataTableList = 0x480; // TArray<UDataTable*>
		constexpr auto HumanActionsDataTableList = 0x490; // TArray<UDataTable*>
		constexpr auto ZombieActionsDataTableList = 0x4a0; // TArray<UDataTable*>
	}

	namespace n_UGameplayTagsTrait {
		constexpr auto Tags = 0x30; // FGameplayTagContainer
		constexpr auto RandomChance = 0x50; // float
	}

	namespace n_UAnimNotifyState_SetBoneVis {
		constexpr auto BoneVisibilityChanges = 0x38; // TArray<FAnimNotify_BoneVisDef>
	}

	namespace n_UEnvQueryGenerator_SimpleGrid {
		constexpr auto GridSize = 0x88; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0xc0; // FAIDataProviderFloatValue
		constexpr auto GenerateAround = 0xf8; // UEnvQueryContext*
	}

	namespace n_UAnimEvalSet_ClimbTop_C {
		constexpr auto DistanceToTopStart = 0xc0; // FGameplayEval_ReachedClimbLocation
		constexpr auto TopDistance = 0x110; // FGameplayEval_Distance
		constexpr auto ClimbDownDistance = 0x1e0; // FGameplayEval_Distance
		constexpr auto RandomChance = 0x2b0; // FGameplayEval_RandomChance
	}

	namespace n_UAnimContext_RandomOnce {
		constexpr auto RandomValues = 0x50; // TMap<FName, float>
	}

	namespace n_UGameplayTask_SpawnActor {
		constexpr auto Success = 0x70; // FMulticastInlineDelegate
		constexpr auto DidNotSpawn = 0x80; // FMulticastInlineDelegate
		constexpr auto ClassToSpawn = 0xa8; // AActor*
	}

	namespace n_UMaterialExpressionArctangent2Fast {
		constexpr auto Y = 0x48; // FExpressionInput
		constexpr auto X = 0x5c; // FExpressionInput
	}

	namespace n_UMovieSceneNiagaraParameterTrack {
		constexpr auto Parameter = 0x70; // FNiagaraVariable
	}

	namespace n_UGizmoTransformChangeStateTarget {
		constexpr auto TransactionManager = 0x58; // TScriptInterface<IToolContextTransactionProvider>
	}

	namespace n_UES_DangerClose_C {
		constexpr auto NearbyCharacters = 0x78; // FGameplayEval_NearbyCharacters
	}

	namespace n_UClothPhysicalMeshDataNv_Legacy {
		constexpr auto MaxDistances = 0xe8; // TArray<float>
		constexpr auto BackstopDistances = 0xf8; // TArray<float>
		constexpr auto BackstopRadiuses = 0x108; // TArray<float>
		constexpr auto AnimDriveMultipliers = 0x118; // TArray<float>
	}

	namespace n_UPlanarReflectionComponent {
		constexpr auto PreviewBox = 0x2c8; // UBoxComponent*
		constexpr auto NormalDistortionStrength = 0x2d0; // float
		constexpr auto PrefilterRoughness = 0x2d4; // float
		constexpr auto PrefilterRoughnessDistance = 0x2d8; // float
		constexpr auto ScreenPercentage = 0x2dc; // int32_t
		constexpr auto ExtraFOV = 0x2e0; // float
		constexpr auto DistanceFromPlaneFadeStart = 0x2e4; // float
		constexpr auto DistanceFromPlaneFadeEnd = 0x2e8; // float
		constexpr auto DistanceFromPlaneFadeoutStart = 0x2ec; // float
		constexpr auto DistanceFromPlaneFadeoutEnd = 0x2f0; // float
		constexpr auto AngleFromPlaneFadeStart = 0x2f4; // float
		constexpr auto AngleFromPlaneFadeEnd = 0x2f8; // float
		constexpr auto bShowPreviewPlane = 0x2fc; // bool
		constexpr auto bRenderSceneTwoSided = 0x2fd; // bool
	}

	namespace n_USoundNodeRandom {
		constexpr auto Weights = 0x60; // TArray<float>
		constexpr auto HasBeenUsed = 0x70; // TArray<bool>
		constexpr auto NumRandomUsed = 0x80; // int32_t
		constexpr auto PreselectAtLevelLoad = 0x84; // int32_t
		constexpr auto bShouldExcludeFromBranchCulling = 0x88; // char : 1
		constexpr auto bSoundCueExcludedFromBranchCulling = 0x88; // char : 1
		constexpr auto bRandomizeWithoutReplacement = 0x88; // char : 1
	}

	namespace n_UCardDrawOverviewUserWidget {
		constexpr auto SourceToCenter = 0x480; // FCardAnim
		constexpr auto CenterToDest = 0x4a0; // FCardAnim
		constexpr auto SourceShrink = 0x4c0; // FCardAnim
		constexpr auto DestExpand = 0x4e0; // FCardAnim
	}

	namespace n_UMaterialExpressionFloor {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UBTService {
		constexpr auto Interval = 0x68; // float
		constexpr auto RandomDeviation = 0x6c; // float
		constexpr auto bCallTickOnSearchStart = 0x70; // char : 1
		constexpr auto bRestartTimerOnEachActivation = 0x70; // char : 1
	}

	namespace n_UBlackboardComponent {
		constexpr auto BrainComp = 0xe8; // UBrainComponent*
		constexpr auto DefaultBlackboardAsset = 0xf0; // UBlackboardData*
		constexpr auto BlackboardAsset = 0xf8; // UBlackboardData*
		constexpr auto KeyInstances = 0x120; // TArray<UBlackboardKeyType*>
	}

	namespace n_UTimedActivationComponent {
		constexpr auto bStartCountdownOnBeginPlay = 0xe8; // bool
		constexpr auto Countdown = 0xec; // float
		constexpr auto CountdownIntervalSound = 0xf0; // UAkAudioEvent*
		constexpr auto LongestIntervalDelay = 0xf8; // float
		constexpr auto ShortestIntervalDelay = 0xfc; // float
		constexpr auto CountdownPctForShortestInterval = 0x100; // float
		constexpr auto CountdownPctForLongestInterval = 0x104; // float
		constexpr auto OnCountdownFinished = 0x108; // FMulticastInlineDelegate
	}

	namespace n_UTeamRelationshipMap {
		constexpr auto Relationships = 0x30; // TArray<FTeamRelationship>
	}

	namespace n_UBTDecorator_ClearBlackboardKey {
		constexpr auto bOnlyClearOnSuccess = 0x98; // char : 1
	}

	namespace n_UThreatMod_SafeRoom {
		constexpr auto ChangeRate = 0x40; // float
	}

	namespace n_UAnimNotifyState_Trail {
		constexpr auto PSTemplate = 0x38; // UParticleSystem*
		constexpr auto FirstSocketName = 0x40; // FName
		constexpr auto SecondSocketName = 0x48; // FName
		constexpr auto WidthScaleMode = 0x50; // ETrailWidthMode
		constexpr auto WidthScaleCurve = 0x54; // FName
		constexpr auto bRecycleSpawnedSystems = 0x5c; // char : 1
		constexpr auto OverrideComponentTag = 0x60; // FName
	}

	namespace n_USoundNodeDistanceCrossFade {
		constexpr auto CrossFadeInput = 0x60; // TArray<FDistanceDatum>
	}

	namespace n_UAnimContext_Trace {
		constexpr auto TraceStart = 0x50; // UAnimContext_Transform*
		constexpr auto TraceEnd = 0x58; // UAnimContext_Transform*
		constexpr auto TraceStartForwardOffset = 0x60; // float
		constexpr auto TraceEndForwardOffset = 0x64; // float
		constexpr auto TraceChannel = 0x68; // ECollisionChannel
		constexpr auto bUseCustomTraceChannel = 0x69; // bool
		constexpr auto CustomTraceChannel = 0x6c; // FName
		constexpr auto bTraceBothDirections = 0x74; // bool
		constexpr auto bDoSweep = 0x75; // bool
		constexpr auto Radius = 0x78; // float
		constexpr auto HalfHeight = 0x7c; // float
	}

	namespace n_UAnimNotify_SharedSoundHuman {
		constexpr auto HumanSound = 0x50; // ESharedSurvivorAnimSound
		constexpr auto PlayIfLocal = 0x51; // bool
		constexpr auto PlayIfRemote = 0x52; // bool
	}

	namespace n_AAudioVolume {
		constexpr auto Priority = 0x2d8; // float
		constexpr auto bEnabled = 0x2dc; // char : 1
		constexpr auto Settings = 0x2e0; // FReverbSettings
		constexpr auto AmbientZoneSettings = 0x300; // FInteriorSettings
	}

	namespace n_UEnvQueryTest_DeltaMap {
		constexpr auto DeltaMapSource = 0x208; // UEnvQueryContext*
		constexpr auto DeltaMapNavMesh = 0x210; // FNavAgentSelector
		constexpr auto ItemsWithNoDeltaShould = 0x214; // EEnvItemStatus
	}

	namespace n_UFontFace {
		constexpr auto SourceFilename = 0x38; // FString
		constexpr auto Hinting = 0x48; // EFontHinting
		constexpr auto LoadingPolicy = 0x49; // EFontLoadingPolicy
		constexpr auto LayoutMethod = 0x4a; // EFontLayoutMethod
	}

	namespace n_UOnlineEngineInterfaceImpl {
		constexpr auto MappedUniqueNetIdTypes = 0x30; // TMap<FName, FName>
		constexpr auto CompatibleUniqueNetIdTypes = 0x80; // TArray<FName>
		constexpr auto VoiceSubsystemNameOverride = 0x90; // FName
	}

	namespace n_APartyBeaconClient {
		constexpr auto DestSessionId = 0x360; // FString
		constexpr auto PendingReservation = 0x370; // FPartyReservation
		constexpr auto RequestType = 0x3c0; // EClientRequestType
		constexpr auto bPendingReservationSent = 0x3c1; // bool
		constexpr auto bCancelReservation = 0x3c2; // bool
	}

	namespace n_UTeamPositionTrigger {
		constexpr auto TestInterval = 0x40; // float
		constexpr auto TakeLeadSeparationDistance = 0x44; // float
		constexpr auto TakeLeadMaxDistFromGoldenPath = 0x48; // float
		constexpr auto TeamClusterDistance = 0x4c; // float
		constexpr auto SeparatedFromTeamDistance = 0x50; // float
	}

	namespace n_UGobiEnemyDamageComponent {
		constexpr auto BlackboardAsset = 0xe8; // UBlackboardData*
		constexpr auto EnemyBBKey = 0xf0; // FBlackboardKeySelector
		constexpr auto CharacterOwner = 0x118; // AGobiCharacter*
		constexpr auto EnemyDamage = 0x120; // TMap<AGobiCharacter*, FGobiEnemyDamage>
		constexpr auto CurrentEnemy = 0x170; // AGobiCharacter*
		constexpr auto BlackboardComp = 0x180; // UBlackboardComponent*
	}

	namespace n_ULootScenario {
		constexpr auto ScenarioClass = 0x38; // TSoftClassPtr<UObject>
		constexpr auto bStartWithScenario = 0x60; // bool
		constexpr auto bStopWithScenario = 0x61; // bool
		constexpr auto bAutoSpawnItems = 0x62; // bool
		constexpr auto bRemoveUnusedItems = 0x63; // bool
		constexpr auto SpawnDistanceThreshold = 0x64; // float
		constexpr auto ItemsToMaintain = 0x68; // TArray<FLootScenarioItemMaintenance>
	}

	namespace n_UThrowableComponent {
		constexpr auto OnItemThrown = 0x160; // FMulticastInlineDelegate
		constexpr auto bActivationPressed = 0x170; // bool
		constexpr auto Projectile = 0x1e0; // AActor*
		constexpr auto PullBackStateConfig = 0x1e8; // FThrowableStateConfig
		constexpr auto PullBackLoopStateConfig = 0x210; // FThrowableStateConfig
		constexpr auto ThrowingStateConfig = 0x238; // FThrowableStateConfig
		constexpr auto ThrowTime = 0x260; // float
		constexpr auto LaunchVelocity = 0x264; // FVector
		constexpr auto bDelayThrowUntilNextTick = 0x270; // bool
		constexpr auto bUseImpulse = 0x271; // bool
		constexpr auto bUseImpulseScalarOverride = 0x272; // bool
		constexpr auto ImpulseScalarOverride = 0x274; // float
		constexpr auto AppliedTags = 0x278; // FGameplayTagContainer
		constexpr auto InitialTagQuery = 0x298; // FGameplayTagQuery
		constexpr auto ContinuousTagQuery = 0x2e0; // FGameplayTagQuery
		constexpr auto TargetingReticleActor = 0x328; // AActor*
		constexpr auto TargetingReticlePredictTime = 0x330; // float
		constexpr auto RequiredAmmo = 0x334; // int32_t
		constexpr auto HiddenBoneOnThrow = 0x338; // FName
		constexpr auto SpawnPositionOffset = 0x340; // FVector
		constexpr auto SpawnRotationOffset = 0x34c; // FRotator
	}

	namespace n_USourceEffectMidSideSpreaderPreset {
		constexpr auto Settings = 0x7c; // FSourceEffectMidSideSpreaderSettings
	}

	namespace n_UPathFollowingComponent {
		constexpr auto MovementComp = 0x120; // UNavMovementComponent*
		constexpr auto MyNavData = 0x130; // ANavigationData*
	}

	namespace n_UBTTask_MoveTo {
		constexpr auto AcceptableRadius = 0xa0; // float
		constexpr auto FilterClass = 0xa8; // UNavigationQueryFilter*
		constexpr auto ObservedBlackboardValueTolerance = 0xb0; // float
		constexpr auto bObserveBlackboardValue = 0xb4; // char : 1
		constexpr auto bAllowStrafe = 0xb4; // char : 1
		constexpr auto bAllowPartialPath = 0xb4; // char : 1
		constexpr auto bTrackMovingGoal = 0xb4; // char : 1
		constexpr auto bProjectGoalLocation = 0xb4; // char : 1
		constexpr auto bReachTestIncludesAgentRadius = 0xb4; // char : 1
		constexpr auto bReachTestIncludesGoalRadius = 0xb4; // char : 1
		constexpr auto bStopOnOverlap = 0xb4; // char : 1
		constexpr auto bStopOnOverlapNeedsUpdate = 0xb5; // char : 1
	}

	namespace n_UBTTask_SetTagCooldown {
		constexpr auto CooldownTag = 0x78; // FGameplayTag
		constexpr auto bAddToExistingDuration = 0x80; // bool
		constexpr auto CooldownDuration = 0x84; // float
	}

	namespace n_UBumpEmitterNode {
		constexpr auto BumpInfo = 0x70; // FBumpEmitterInfo
	}

	namespace n_UConsoleSettings {
		constexpr auto MaxScrollbackSize = 0x30; // int32_t
		constexpr auto ManualAutoCompleteList = 0x38; // TArray<FAutoCompleteCommand>
		constexpr auto AutoCompleteMapPaths = 0x48; // TArray<FString>
		constexpr auto BackgroundOpacityPercentage = 0x58; // float
		constexpr auto bOrderTopToBottom = 0x5c; // bool
		constexpr auto bDisplayHelpInAutoComplete = 0x5d; // bool
		constexpr auto InputColor = 0x60; // FColor
		constexpr auto HistoryColor = 0x64; // FColor
		constexpr auto AutoCompleteCommandColor = 0x68; // FColor
		constexpr auto AutoCompleteCVarColor = 0x6c; // FColor
		constexpr auto AutoCompleteFadedColor = 0x70; // FColor
	}

	namespace n_UChaosSolverSettings {
		constexpr auto DefaultChaosSolverActorClass = 0x48; // FSoftClassPath
	}

	namespace n_UGameplayEffectCameraShake {
		constexpr auto bPlayAsWorldCameraShake = 0x238; // bool
		constexpr auto InnerRadius = 0x23c; // float
		constexpr auto OuterRadius = 0x240; // float
		constexpr auto EpicenterOffset = 0x244; // FVector
		constexpr auto bUseBoneLocationAsEpicenter = 0x250; // bool
		constexpr auto EpicenterBone = 0x254; // FName
		constexpr auto Falloff = 0x25c; // float
		constexpr auto bOrientShakeTowardsEpicenter = 0x260; // bool
		constexpr auto bLocalPlayerOnly = 0x261; // bool
		constexpr auto Shake = 0x268; // UCameraShake*
		constexpr auto ForceFeedbackEffect = 0x270; // UForceFeedbackEffect*
		constexpr auto bForceFeedbackIsLooping = 0x278; // bool
	}

	namespace n_UBTTaskNode {
		constexpr auto Services = 0x60; // TArray<UBTService*>
		constexpr auto bIgnoreRestartSelf = 0x70; // char : 1
	}

	namespace n_UGameplayAction_BotLadderTraversal {
		constexpr auto FilterSet = 0x210; // UGameplayEvaluatorSet*
		constexpr auto bDisabled = 0x218; // bool
		constexpr auto DesiredDestContext = 0x220; // UAnimContext_Transform*
		constexpr auto DestDistConstraint = 0x228; // float
		constexpr auto RemoveTags = 0x230; // FGameplayTagContainer
		constexpr auto SearchExtents = 0x250; // FVector
	}

	namespace n_UEndMatchCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UActorToComponentConverter {
		constexpr auto bUpdate = 0x38; // bool
		constexpr auto ActorClass = 0x40; // AActor*
	}

	namespace n_UMovieSceneAudioTrack {
		constexpr auto AudioSections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UGameplayEffectWeakspot {
		constexpr auto AppliedWeakspot = 0x240; // FWeakSpotAttachment
		constexpr auto WeakSpotMaxHealthMod = 0x420; // FGamePropertyFloatMod
	}

	namespace n_UHeroAudioComponent {
		constexpr auto TempTestFootsteps = 0x308; // int32_t
		constexpr auto WetStep = 0x310; // UAkAudioEvent*
		constexpr auto WetStepMinDuration = 0x318; // float
		constexpr auto WetStepMaxDuration = 0x31c; // float
		constexpr auto LowHealthPercentage = 0x320; // float
		constexpr auto IncappedRowHandle = 0x328; // FDataTableRowHandle
		constexpr auto RevivedRowHandle = 0x348; // FDataTableRowHandle
		constexpr auto FullHealthReachedRowHandle = 0x368; // FDataTableRowHandle
		constexpr auto LowHealthReachedRowHandle = 0x388; // FDataTableRowHandle
		constexpr auto PossibleSoundCollections = 0x3a8; // TArray<USoundCollectionAsset*>
		constexpr auto AudioDamageTypeEvents = 0x3c0; // TArray<FAudioDamageTypeEvent>
		constexpr auto DefaultDamageType = 0x3d0; // FGameplayTag
		constexpr auto AudioController = 0x3d8; // TWeakObjectPtr<AAudioController>
		constexpr auto LadderGrabHardAudioEvent = 0x3e0; // UAkAudioEvent*
		constexpr auto LadderGrabSoftAudioEvent = 0x3e8; // UAkAudioEvent*
		constexpr auto LadderDismountAudioEvent = 0x3f0; // UAkAudioEvent*
		constexpr auto SpeedRTPCRequiredForLadderGrabHard = 0x3f8; // float
		constexpr auto LadderMvmtThresholdScalar = 0x3fc; // float
		constexpr auto FootstepThresholdCurve = 0x400; // UCurveFloat*
		constexpr auto MaxSpeedForFootsteps = 0x408; // float
		constexpr auto FoleyDuckingScalar = 0x40c; // float
		constexpr auto FoleyDuckReleaseTimeScale = 0x410; // float
		constexpr auto PlayerMaxSpeedSquared = 0x414; // float
		constexpr auto PivotThresholdSquared = 0x418; // float
		constexpr auto PivotScuffAudioCooldown = 0x41c; // float
		constexpr auto ItemMvmtFoleyMinMaxDelay = 0x420; // FVector2D
		constexpr auto ItemMovementFoleyMap = 0x428; // TMap<AItem*, UAkAudioEvent*>
		constexpr auto MovementFoleyDelayMap = 0x478; // TMap<FName, float>
		constexpr auto ItemMovementFoleyDelayMap = 0x4c8; // TMap<FName, float>
		constexpr auto WeaponAnimDataTable = 0x518; // UDataTable*
		constexpr auto bIsMovementDisabled = 0x520; // bool
		constexpr auto bIsSprinting = 0x521; // bool
		constexpr auto bIsCrouching = 0x522; // bool
		constexpr auto bIsADSing = 0x523; // bool
		constexpr auto GreedMvmtAudioEvent = 0x528; // UAkAudioEvent*
		constexpr auto GreedMaxRTPCValue = 0x530; // int32_t
		constexpr auto ReviveFromIncapLocalAudioEvent = 0x5a0; // UAkAudioEvent*
		constexpr auto ReviveFromIncapWorldAudioEvent = 0x5a8; // UAkAudioEvent*
		constexpr auto UtilityStopAllAudioEvent = 0x5b0; // UAkAudioEvent*
		constexpr auto PlayerDeathAudioEvent = 0x5b8; // UAkAudioEvent*
		constexpr auto PlayerDeath2DAudioEvent = 0x5c0; // UAkAudioEvent*
		constexpr auto OverhealAudioEvent = 0x5e8; // UAkAudioEvent*
		constexpr auto BodyfallSwtAudioEvent = 0x5f0; // UAkAudioEvent*
		constexpr auto HeartbeatLoopAudioEvent = 0x5f8; // UAkAudioEvent*
		constexpr auto HeartbeatLoopStopAudioEvent = 0x600; // UAkAudioEvent*
		constexpr auto HeartbeatUpdateRate = 0x608; // float
		constexpr auto HeartbeatCooldown = 0x60c; // float
		constexpr auto HeartbeatHealthRatioMultiplier = 0x610; // float
		constexpr auto HeartbeatRTPCDivider = 0x614; // float
		constexpr auto LowHealthTime = 0x618; // float
		constexpr auto HitMarkerAudioEvent = 0x640; // UAkAudioEvent*
		constexpr auto HitMarkerFriendlyAudioEvent = 0x648; // UAkAudioEvent*
		constexpr auto HitMarkerDamageTypeTagContainer = 0x650; // FGameplayTagContainer
		constexpr auto HitMarkerArmorAudioEvent = 0x670; // UAkAudioEvent*
		constexpr auto HitMarkerMeleeArmorAudioEvent = 0x678; // UAkAudioEvent*
		constexpr auto HitMarkerArmorDestroyedAudioEvent = 0x680; // UAkAudioEvent*
		constexpr auto KevlarArmoredTagContainer = 0x688; // FGameplayTagContainer
		constexpr auto HitMarkerKevlarAudioEvent = 0x6a8; // UAkAudioEvent*
		constexpr auto HeadPopMinorAudioEvent = 0x6b0; // UAkAudioEvent*
		constexpr auto HeadshotAudioEvent = 0x6b8; // UAkAudioEvent*
		constexpr auto PVPRiddenDeathAudioEvent = 0x6c0; // UAkAudioEvent*
		constexpr auto FlashlightOnAudioEvent = 0x6c8; // UAkAudioEvent*
		constexpr auto FlashlightOffAudioEvent = 0x6d0; // UAkAudioEvent*
		constexpr auto CurrencyEarnedAudioEvent = 0x6d8; // UAkAudioEvent*
		constexpr auto AdditionalCurrencyAKE = 0x6e0; // TMap<FString, UAkAudioEvent*>
	}

	namespace n_UMaterialExpressionStaticBoolParameter {
		constexpr auto DefaultValue = 0x60; // char : 1
	}

	namespace n_UAsyncActionLoadPrimaryAssetClassList {
		constexpr auto Completed = 0x80; // FMulticastInlineDelegate
	}

	namespace n_UTitanMouthComponent {
		constexpr auto Tongues = 0x128; // TArray<AActor*>
		constexpr auto TongueComponents = 0x138; // TArray<UTitanTongueComponent*>
		constexpr auto GrabTellMontage = 0x148; // UAnimMontage*
		constexpr auto GrabMontage = 0x150; // UAnimMontage*
		constexpr auto PullMontage = 0x158; // UAnimMontage*
		constexpr auto BiteMontage = 0x160; // UAnimMontage*
		constexpr auto AllTonguesDestroyedMontage = 0x168; // UAnimMontage*
		constexpr auto MouthWeakSpotDestroyedMontage = 0x170; // UAnimMontage*
		constexpr auto TongueClasses = 0x178; // TArray<AActor*>
		constexpr auto TongueAttachSocket = 0x188; // FName
	}

	namespace n_UGameplayAction_Spawn {
		constexpr auto bSortMontagesAlphabetically = 0x210; // bool
		constexpr auto SpawnMontages = 0x218; // TArray<UAnimMontage*>
		constexpr auto MontageSets = 0x228; // TArray<UMontageSet*>
		constexpr auto ExitSpawnMontages = 0x238; // TArray<UAnimMontage*>
		constexpr auto SupplementalPreSpawnSequences = 0x248; // TMap<UAnimMontage*, UAnimSequence*>
		constexpr auto ExitMontageSets = 0x298; // TArray<UMontageSet*>
		constexpr auto TriggerExitTags = 0x2a8; // FGameplayTagContainer
		constexpr auto bExitOnEnemyChanged = 0x2c8; // bool
		constexpr auto EnemyChangedExitDelayTime = 0x2cc; // float
		constexpr auto bExitOnAlerted = 0x2d0; // bool
		constexpr auto AlertedExitDelayTime = 0x2d4; // float
		constexpr auto bSpawnHidden = 0x2d8; // bool
		constexpr auto PreSpawnLocationOffset = 0x2dc; // FVector
		constexpr auto PreSpawnEmitter = 0x2e8; // UParticleSystem*
		constexpr auto SpawnActorPostSpawnGE = 0x2f0; // UGameplayEffect*
		constexpr auto SpawnActorPostSpawnHordingGE = 0x2f8; // UGameplayEffect*
		constexpr auto SpawnActorPostSpawnWanderingGE = 0x300; // UGameplayEffect*
		constexpr auto MaxSpawnDelay = 0x308; // float
		constexpr auto bExitMontageDelayAsRange = 0x30c; // bool
		constexpr auto ExitMontageDelayTime = 0x310; // float
		constexpr auto bDisablePhysicalizeDeathAnimation = 0x314; // bool
		constexpr auto bSetLandMovementMode = 0x315; // bool
		constexpr auto LandMovementMode = 0x316; // EMovementMode
		constexpr auto SpawnCollisionProfileName = 0x318; // FName
	}

	namespace n_UAnimMetaData_MontageSync {
		constexpr auto Montage = 0x30; // UAnimMontage*
		constexpr auto SyncTargetContext = 0x38; // UGameplayContext_ActorComponent*
		constexpr auto bSyncStops = 0x40; // bool
	}

	namespace n_UNPCBanterDialogueTrigger {
		constexpr auto NPCBanterDataTable = 0x58; // UDataTable*
		constexpr auto MaxConversationDistance = 0x60; // float
		constexpr auto TimerInterval = 0x64; // FVector2D
		constexpr auto BackupBanterStartTimer = 0x6c; // float
	}

	namespace n_USkeletalMeshSimplificationSettings {
		constexpr auto SkeletalMeshReductionModuleName = 0x40; // FName
	}

	namespace n_USharedSoundManager {
		constexpr auto HighQualitySettings = 0x30; // FSharedSoundQualitySettings
		constexpr auto LowQualitySettings = 0x44; // FSharedSoundQualitySettings
		constexpr auto VocalizationSharedSoundFilter = 0x58; // TSet<FName>
		constexpr auto FootstepSharedSoundFilter = 0xa8; // TSet<FName>
		constexpr auto LowPrioritySharedSoundFilter = 0xf8; // TSet<FName>
	}

	namespace n_AZombieWallAttachLocation {
		constexpr auto BadLocatorSpriteComponent = 0x2c8; // UBillboardComponent*
		constexpr auto VerticalDistanceRange = 0x2d0; // FVector2D
		constexpr auto HorizontalDistanceRange = 0x2d8; // FVector2D
		constexpr auto OnSetLocationVisible = 0x2e0; // FMulticastInlineDelegate
		constexpr auto OnSetLocationFocused = 0x2f0; // FMulticastInlineDelegate
		constexpr auto LocationType = 0x300; // EZombieAttachLocationType
		constexpr auto PrimitiveComponentTag = 0x304; // FGameplayTag
		constexpr auto bIgnorePrimitiveOffset = 0x30c; // bool
		constexpr auto Primitive = 0x310; // UPrimitiveComponent*
		constexpr auto Spline = 0x318; // USplineComponent*
		constexpr auto VisualizationMesh = 0x320; // UStaticMeshComponent*
		constexpr auto NavLocationComponent = 0x328; // UNavLocationComponent*
	}

	namespace n_UEnvelopeFollowerListener {
		constexpr auto OnEnvelopeFollowerUpdate = 0xe8; // FMulticastInlineDelegate
	}

	namespace n_UEnvQueryTest {
		constexpr auto TestOrder = 0x38; // int32_t
		constexpr auto TestPurpose = 0x3c; // EEnvTestPurpose
		constexpr auto TestComment = 0x40; // FString
		constexpr auto MultipleContextFilterOp = 0x50; // EEnvTestFilterOperator
		constexpr auto MultipleContextScoreOp = 0x51; // EEnvTestScoreOperator
		constexpr auto FilterType = 0x52; // EEnvTestFilterType
		constexpr auto BoolValue = 0x58; // FAIDataProviderBoolValue
		constexpr auto FloatValueMin = 0x90; // FAIDataProviderFloatValue
		constexpr auto FloatValueMax = 0xc8; // FAIDataProviderFloatValue
		constexpr auto ScoringEquation = 0x101; // EEnvTestScoreEquation
		constexpr auto ClampMinType = 0x102; // EEnvQueryTestClamping
		constexpr auto ClampMaxType = 0x103; // EEnvQueryTestClamping
		constexpr auto NormalizationType = 0x104; // EEQSNormalizationType
		constexpr auto ScoreClampMin = 0x108; // FAIDataProviderFloatValue
		constexpr auto ScoreClampMax = 0x140; // FAIDataProviderFloatValue
		constexpr auto ScoreClampBehavior = 0x178; // EEnvQueryTestClampBehavior
		constexpr auto ScoringFactor = 0x180; // FAIDataProviderFloatValue
		constexpr auto ReferenceValue = 0x1b8; // FAIDataProviderFloatValue
		constexpr auto bDefineReferenceValue = 0x1f0; // bool
		constexpr auto bWorkOnFloatValues = 0x200; // char : 1
	}

	namespace n_UGeometryCacheTrackStreamable {
		constexpr auto Codec = 0x60; // UGeometryCacheCodecBase*
		constexpr auto StartSampleTime = 0xd0; // float
	}

	namespace n_APhysicsVolume {
		constexpr auto TerminalVelocity = 0x2d8; // float
		constexpr auto Priority = 0x2dc; // int32_t
		constexpr auto FluidFriction = 0x2e0; // float
		constexpr auto bWaterVolume = 0x2e4; // char : 1
		constexpr auto bPhysicsOnContact = 0x2e4; // char : 1
	}

	namespace n_UNetDriverEOS {
		constexpr auto bIsPassthrough = 0x7d0; // bool
		constexpr auto bIsUsingP2PSockets = 0x7d1; // bool
	}

	namespace n_UFlashBangReceiverComponent {
		constexpr auto OwnerPlayer = 0xec; // TWeakObjectPtr<APlayerCharacter>
		constexpr auto FlashbangGameplayTag = 0xf8; // FGameplayTag
		constexpr auto GameplayTagsComponent = 0x100; // TWeakObjectPtr<UGameplayTagsComponent>
		constexpr auto FlashbangMaterial = 0x118; // UMaterialInterface*
		constexpr auto FlashColor = 0x120; // FLinearColor
		constexpr auto FlashIntensityCurve = 0x130; // UCurveFloat*
		constexpr auto AfterImageIntensityCurve = 0x138; // UCurveFloat*
		constexpr auto AfterImageScalePerSec = 0x140; // float
		constexpr auto PostProcessMaterialInstance = 0x144; // TWeakObjectPtr<UMaterialInstanceDynamic>
		constexpr auto FramebufferCopy = 0x150; // UFramebufferCopy*
	}

	namespace n_UMaterialExpressionAtmosphericFogColor {
		constexpr auto WorldPosition = 0x48; // FExpressionInput
	}

	namespace n_UMaterialExpressionQualitySwitch {
		constexpr auto Default = 0x48; // FExpressionInput
		constexpr auto Inputs = 0x5c; // FExpressionInput [0x3]
	}

	namespace n_UDefaultLevelSequenceInstanceData {
		constexpr auto TransformOriginActor = 0x38; // AActor*
		constexpr auto TransformOrigin = 0x40; // FTransform
	}

	namespace n_UOnGameplayTagChangedTrigger {
		constexpr auto PinnedTagContainer = 0x60; // FGameplayTagContainer
		constexpr auto PinnedByEnemyTagContainer = 0x80; // FGameplayTagContainer
		constexpr auto PinnedCalloutInterval = 0xa4; // float
		constexpr auto ChanceForPinnedCallout = 0xa8; // float
		constexpr auto MaxStruggleBeforePinnedCallout = 0xac; // int32_t
		constexpr auto PukedTagContainer = 0xb8; // FGameplayTagContainer
		constexpr auto PukedCalloutDelay = 0xd8; // float
		constexpr auto SqueezedTagContainer = 0xe0; // FGameplayTagContainer
		constexpr auto SqueezedCalloutInterval = 0x100; // float
		constexpr auto EatenTagContainer = 0x108; // FGameplayTagContainer
		constexpr auto DelayBeforeHagEating = 0x12c; // float
		constexpr auto OutOfSafezoneTagContainer = 0x130; // FGameplayTagContainer
		constexpr auto OutOfSafezoneCoughInterval = 0x150; // float
	}

	namespace n_UAnimEvalSet_Shared_Alert_Attacked_C {
		constexpr auto AngleToEnemy = 0xc0; // FGameplayEval_Angle
		constexpr auto DamageType = 0x120; // FGameplayEval_DamageType
		constexpr auto RandomChance = 0x1e0; // FGameplayEval_RandomChance
	}

	namespace n_ABaseWeapon_BP_C {
		constexpr auto TuningData = 0x4a8; // UTuningDataComponent*
		constexpr auto ItemAkBank = 0x4b0; // UItemAkBankComponent*
		constexpr auto ItemCycle = 0x4b8; // UItemCycleComponent*
		constexpr auto WeaponMovementSpeed = 0x4c0; // UWeaponMovementSpeedComponent*
		constexpr auto MovementFoley = 0x4c8; // UAkAudioEvent*
	}

	namespace n_UDrenchComponent {
		constexpr auto bEnabled = 0x1fc; // bool
		constexpr auto FadeTime = 0x200; // float
		constexpr auto HalfLife = 0x204; // float
		constexpr auto MaxStrength = 0x208; // float
		constexpr auto ScaleCurrentStrength = 0x20c; // float
		constexpr auto ScaleIncomingStrength = 0x210; // float
		constexpr auto EaseOutPower = 0x214; // float
		constexpr auto MinDecayStrength = 0x218; // float
		constexpr auto ReplacePct = 0x21c; // float
		constexpr auto DecayDelay = 0x220; // float
		constexpr auto UpdateDelta = 0x224; // float
		constexpr auto DrenchParams = 0x228; // TMap<FGameplayTag, UMeshMaterialParamSet*>
		constexpr auto IncomingDrench = 0x278; // FDrenchReplicatedData
	}

	namespace n_UAkAndroidInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettingsWithSampleRate
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xc0; // FAkAndroidAdvancedInitializationSettings
		constexpr auto TRSSettings = 0x100; // FAkTRSPerPlatformSettings
	}

	namespace n_AOnlineBeaconClient {
		constexpr auto BeaconOwner = 0x2d0; // AOnlineBeaconHostObject*
		constexpr auto BeaconConnection = 0x2d8; // UNetConnection*
		constexpr auto ConnectionState = 0x2e0; // EBeaconConnectionState
	}

	namespace n_ACameraShakeSourceActor {
		constexpr auto CameraShakeSourceComponent = 0x2a0; // UCameraShakeSourceComponent*
	}

	namespace n_ASleeper_Projectile_BP_C {
		constexpr auto UberGraphFrame = 0x798; // FPointerToUberGraphFrame
		constexpr auto AimAssistSphere = 0x7a0; // USphereComponent*
		constexpr auto AimAssistTarget = 0x7a8; // UAimAssistTargetComponent*
		constexpr auto CollisionHero = 0x7b0; // USphereComponent*
		constexpr auto Threat = 0x7b8; // UThreatComponent*
		constexpr auto ScenarioActor = 0x7c0; // ASleeper_HeroGrappled_ScenarioActor_C*
		constexpr auto TargetSnared = 0x7c8; // bool
		constexpr auto TargetCharacter = 0x7d0; // AGobiCharacter*
		constexpr auto FriendlyFireImmunityGE = 0x7d8; // UGameplayEffect*
	}

	namespace n_UAnimNotify_Detach {
		constexpr auto EnemyContextClass = 0x40; // UAnimContext_Enemy*
	}

	namespace n_UCurveFloat {
		constexpr auto FloatCurve = 0x38; // FRichCurve
		constexpr auto bIsEventCurve = 0xb8; // bool
	}

	namespace n_UBTTask_NavigateTo {
		constexpr auto AcceptableRadius = 0xa0; // FAIDataProviderFloatValue
		constexpr auto FilterClass = 0xd8; // UNavigationQueryFilter*
		constexpr auto ObservedBlackboardValueTolerance = 0xe0; // float
		constexpr auto bAllowStrafe = 0xe4; // char : 1
		constexpr auto bAllowPartialPath = 0xe4; // char : 1
		constexpr auto bStopOnOverlap = 0xe4; // char : 1
		constexpr auto bResetVelocityOnAbort = 0xe4; // char : 1
		constexpr auto bObserveBlackboardValue = 0xe4; // char : 1
		constexpr auto bFailOnBetterClaim = 0xe8; // bool
		constexpr auto bPursueTarget = 0xe9; // bool
		constexpr auto PursueTargetUpdateRate = 0xec; // FVector2D
		constexpr auto SteeringBehaviorDataProvider = 0xf8; // FAIDataProviderUObjectValue
		constexpr auto SteeringControlDataProvider = 0x130; // FAIDataProviderUObjectValue
	}

	namespace n_ADrawbridge {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto BridgeStaticMeshComp = 0x2a8; // UStaticMeshComponent*
		constexpr auto PulleyStaticMeshComp = 0x2b0; // UStaticMeshComponent*
		constexpr auto PulleyRopeStaticMeshComp = 0x2b8; // UStaticMeshComponent*
		constexpr auto CrankSkeletalMeshComp = 0x2c0; // USkeletalMeshComponent*
		constexpr auto CrankPulleyCableComp = 0x2c8; // UCableComponent*
		constexpr auto CrankBridgeCableComp = 0x2d0; // UCableComponent*
		constexpr auto CableBridgeAttachPoint = 0x2d8; // USceneComponent*
		constexpr auto CableCrankAttachPoint = 0x2e0; // USceneComponent*
		constexpr auto CrankLocation = 0x2e8; // USceneComponent*
		constexpr auto RopeParticleSystemComp = 0x2f0; // UParticleSystemComponent*
		constexpr auto BridgeImpactParticleSystemComp = 0x2f8; // UParticleSystemComponent*
		constexpr auto UsableComponent = 0x300; // UUsableComponent*
		constexpr auto UsableTriggerComponent = 0x308; // UBoxComponent*
		constexpr auto UsableHighlightComp = 0x310; // UUsableHighlightComponent*
		constexpr auto GameplayEffectsComp = 0x318; // UGameplayEffectsComponent*
		constexpr auto ItemAkBankComponent = 0x320; // UItemAkBankComponent*
		constexpr auto PulleyAKComponent = 0x328; // UAkComponent*
		constexpr auto CrankAKComponent = 0x330; // UAkComponent*
		constexpr auto BridgeAKComponent = 0x338; // UAkComponent*
		constexpr auto StartLessonTriggerBox = 0x340; // UBoxComponent*
		constexpr auto GameCoachLessonsComponent = 0x348; // UGameCoachLessonsComponent*
		constexpr auto OnBridgeFullyLowered = 0x350; // FMulticastInlineDelegate
		constexpr auto UseMontage3P = 0x360; // UAnimMontage*
		constexpr auto TriggerHordeReason = 0x368; // FString
		constexpr auto GobiNavModifierActor = 0x378; // AActor*
		constexpr auto SpawnActorVolume = 0x380; // AAISpawnActorVolume*
		constexpr auto HordeBlockingTag = 0x388; // FGameplayTag
		constexpr auto StartingBridgePitch = 0x390; // float
		constexpr auto EndingBridgePitch = 0x394; // float
		constexpr auto RopeBreakPct = 0x398; // float
		constexpr auto RotationProgressMultiplier = 0x39c; // float
		constexpr auto PulleyMultiplier = 0x3a0; // float
		constexpr auto BridgeFallSpeedIncrease = 0x3a4; // float
		constexpr auto MaxBridgeFallSpeed = 0x3a8; // float
		constexpr auto MaxBridgeToolkitFallSpeed = 0x3ac; // float
		constexpr auto BridgeLoweredWalkableSlopeOverride = 0x3b0; // FWalkableSlopeOverride
		constexpr auto ActorsToDestroyWhenLowered = 0x3c0; // TSet<TWeakObjectPtr<AActor>>
		constexpr auto LoweredCrankMaterials = 0x410; // TArray<UMaterialInterface*>
		constexpr auto LessonDelay = 0x420; // float
		constexpr auto HighlightGameplayTagContainer = 0x428; // FGameplayTagContainer
		constexpr auto CableScalarParameterName = 0x448; // FName
		constexpr auto CrankBridgeCableMultiplier = 0x450; // float
		constexpr auto CrankPulleyCableMultiplier = 0x454; // float
		constexpr auto bHideCableWhenBridgeFalls = 0x458; // bool
		constexpr auto bDetachFromEnd = 0x459; // bool
		constexpr auto bShouldEnableCableCollision = 0x45a; // bool
		constexpr auto DeactivateCableCollisionCooldown = 0x45c; // float
		constexpr auto AKEPulleyLoop = 0x460; // UAkAudioEvent*
		constexpr auto AKEPulleyLoopStop = 0x468; // UAkAudioEvent*
		constexpr auto AKEHandleLoop = 0x470; // UAkAudioEvent*
		constexpr auto AKEHandleLoopStop = 0x478; // UAkAudioEvent*
		constexpr auto AKEBridgeCreakLoop = 0x480; // UAkAudioEvent*
		constexpr auto AKEBridgeCreakLoopStop = 0x488; // UAkAudioEvent*
		constexpr auto AKEBridgeSquealLoop = 0x490; // UAkAudioEvent*
		constexpr auto AKEBridgeSquealLoopStop = 0x498; // UAkAudioEvent*
		constexpr auto AKEBridgeSquealFall = 0x4a0; // UAkAudioEvent*
		constexpr auto AKEBridgeImpact = 0x4a8; // UAkAudioEvent*
		constexpr auto AKEToolkitBridgeImpact = 0x4b0; // UAkAudioEvent*
		constexpr auto TriggerHordeCue = 0x4b8; // FGameplayTag
		constexpr auto BridgeMovementPct = 0x4c0; // float
	}

	namespace n_UGobiSpectatorMovementComponent {
		constexpr auto SpringArmComponent = 0x190; // USpringArmComponent*
		constexpr auto GamepadLookHorzRate = 0x1b8; // float
		constexpr auto GamepadLookVertRate = 0x1bc; // float
		constexpr auto MouseLookHorzScale = 0x1c0; // float
		constexpr auto MouseLookVertScale = 0x1c4; // float
		constexpr auto bAllowFirstPerson = 0x1c8; // bool
		constexpr auto AutoFollowPitchOffset = 0x1cc; // float
		constexpr auto AutoFollowDelaySeconds = 0x1d0; // float
		constexpr auto AutoFollowFadeoutSeconds = 0x1d4; // float
	}

	namespace n_UDatasmithCineCameraActorTemplate {
		constexpr auto LookatTrackingSettings = 0x38; // FDatasmithCameraLookatTrackingSettingsTemplate
	}

	namespace n_UBlackboardKeyType_String {
		constexpr auto StringValue = 0x38; // FString
	}

	namespace n_UGameplayEffectWeightedRandomItem {
		constexpr auto SupportedTags = 0x238; // FGameplayTagContainer
		constexpr auto DisallowedTags = 0x258; // FGameplayTagContainer
		constexpr auto bAddAttachments = 0x278; // bool
		constexpr auto DisallowedAttachments = 0x280; // FGameplayTagContainer
		constexpr auto MinAttachments = 0x2a0; // int32_t
		constexpr auto MaxAttachments = 0x2a4; // int32_t
	}

	namespace n_UPoseAsset {
		constexpr auto PoseContainer = 0x88; // FPoseDataContainer
		constexpr auto bAdditivePose = 0x118; // bool
		constexpr auto BasePoseIndex = 0x11c; // int32_t
		constexpr auto RetargetSource = 0x120; // FName
	}

	namespace n_UParticleModuleLocationSkelVertSurface {
		constexpr auto SourceType = 0x38; // ELocationSkelVertSurfaceSource
		constexpr auto UniversalOffset = 0x3c; // FVector
		constexpr auto bUpdatePositionEachFrame = 0x48; // char : 1
		constexpr auto bOrientMeshEmitters = 0x48; // char : 1
		constexpr auto bInheritBoneVelocity = 0x48; // char : 1
		constexpr auto InheritVelocityScale = 0x4c; // float
		constexpr auto SkelMeshActorParamName = 0x50; // FName
		constexpr auto ValidAssociatedBones = 0x58; // TArray<FName>
		constexpr auto bEnforceNormalCheck = 0x68; // char : 1
		constexpr auto NormalToCompare = 0x6c; // FVector
		constexpr auto NormalCheckToleranceDegrees = 0x78; // float
		constexpr auto NormalCheckTolerance = 0x7c; // float
		constexpr auto ValidMaterialIndices = 0x80; // TArray<int32_t>
		constexpr auto bInheritVertexColor = 0x90; // char : 1
		constexpr auto bInheritUV = 0x90; // char : 1
		constexpr auto InheritUVChannel = 0x94; // uint32_t
	}

	namespace n_UGameplayTagsRndSelectionTrait {
		constexpr auto TagSets = 0x30; // TArray<FGameplayTagSet>
		constexpr auto bAddAllTagSets = 0x40; // bool
		constexpr auto RandomChance = 0x44; // float
	}

	namespace n_USubmixEffectReverbPreset {
		constexpr auto Settings = 0xa4; // FSubmixEffectReverbSettings
	}

	namespace n_UAITypePointCosts {
		constexpr auto Costs = 0x38; // TArray<FAITypeCost>
	}

	namespace n_UInheritableComponentHandler {
		constexpr auto Records = 0x30; // TArray<FComponentOverrideRecord>
		constexpr auto UnnecessaryComponents = 0x40; // TArray<UActorComponent*>
	}

	namespace n_UNavLinkDefinition {
		constexpr auto Links = 0x30; // TArray<FNavigationLink>
		constexpr auto SegmentLinks = 0x40; // TArray<FNavigationSegmentLink>
	}

	namespace n_UMaterialParameterCollectionInstance {
		constexpr auto Collection = 0x38; // UMaterialParameterCollection*
	}

	namespace n_UEnvQueryTest_Project {
		constexpr auto ProjectionData = 0x208; // FEnvTraceData
	}

	namespace n_UTitanTongueComponent {
		constexpr auto State = 0xe8; // ETitanTongueState
		constexpr auto TargetActor = 0x140; // AActor*
		constexpr auto PullSecs = 0x148; // float
		constexpr auto GrabRange = 0x14c; // float
		constexpr auto PullNearDist = 0x150; // float
		constexpr auto PullFarDist = 0x154; // float
		constexpr auto GrabbedEffects = 0x158; // TArray<UGameplayEffect*>
		constexpr auto GrabSecs = 0x168; // float
		constexpr auto GrabBlendSpace = 0x170; // UBlendSpace1D*
		constexpr auto MissSecs = 0x178; // float
		constexpr auto MissBlendSpace = 0x180; // UBlendSpace1D*
		constexpr auto PullBlendSpace = 0x188; // UBlendSpace1D*
		constexpr auto ReleaseBlendSpace = 0x190; // UBlendSpace1D*
		constexpr auto BiteAnimSequence = 0x198; // UAnimSequence*
		constexpr auto EatAnimSequence = 0x1a0; // UAnimSequence*
		constexpr auto AttachComponentTag = 0x1a8; // FGameplayTag
		constexpr auto AttachBone = 0x1b0; // FName
	}

	namespace n_UDialogueEvaluatorTrigger {
		constexpr auto EvalSet = 0x50; // UGobiDialogueEvaluatorSet*
		constexpr auto TestInterval = 0x58; // float
		constexpr auto OnPassedEventName = 0x5c; // FName
		constexpr auto OnContinueEventName = 0x64; // FName
		constexpr auto OnFailedEventName = 0x6c; // FName
		constexpr auto OwningCharacterAsEventTarget = 0x74; // bool
		constexpr auto ActiveEvalSet = 0x78; // UGobiDialogueEvaluatorSet*
	}

	namespace n_UNiagaraRibbonRendererProperties {
		constexpr auto Material = 0x58; // UMaterialInterface*
		constexpr auto MaterialUserParamBinding = 0x60; // FNiagaraUserParameterBinding
		constexpr auto FacingMode = 0x88; // ENiagaraRibbonFacingMode
		constexpr auto UV0TilingDistance = 0x8c; // float
		constexpr auto UV0Scale = 0x90; // FVector2D
		constexpr auto UV0Offset = 0x98; // FVector2D
		constexpr auto UV0AgeOffsetMode = 0xa0; // ENiagaraRibbonAgeOffsetMode
		constexpr auto UV1TilingDistance = 0xa4; // float
		constexpr auto UV1Scale = 0xa8; // FVector2D
		constexpr auto UV1Offset = 0xb0; // FVector2D
		constexpr auto UV1AgeOffsetMode = 0xb8; // ENiagaraRibbonAgeOffsetMode
		constexpr auto DrawDirection = 0xb9; // ENiagaraRibbonDrawDirection
		constexpr auto CurveTension = 0xbc; // float
		constexpr auto TessellationMode = 0xc0; // ENiagaraRibbonTessellationMode
		constexpr auto TessellationFactor = 0xc4; // int32_t
		constexpr auto bUseConstantFactor = 0xc8; // bool
		constexpr auto TessellationAngle = 0xcc; // float
		constexpr auto bScreenSpaceTessellation = 0xd0; // bool
		constexpr auto PositionBinding = 0xd8; // FNiagaraVariableAttributeBinding
		constexpr auto ColorBinding = 0x150; // FNiagaraVariableAttributeBinding
		constexpr auto VelocityBinding = 0x1c8; // FNiagaraVariableAttributeBinding
		constexpr auto NormalizedAgeBinding = 0x240; // FNiagaraVariableAttributeBinding
		constexpr auto RibbonTwistBinding = 0x2b8; // FNiagaraVariableAttributeBinding
		constexpr auto RibbonWidthBinding = 0x330; // FNiagaraVariableAttributeBinding
		constexpr auto RibbonFacingBinding = 0x3a8; // FNiagaraVariableAttributeBinding
		constexpr auto RibbonIdBinding = 0x420; // FNiagaraVariableAttributeBinding
		constexpr auto RibbonLinkOrderBinding = 0x498; // FNiagaraVariableAttributeBinding
		constexpr auto MaterialRandomBinding = 0x510; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterialBinding = 0x588; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial1Binding = 0x600; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial2Binding = 0x678; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial3Binding = 0x6f0; // FNiagaraVariableAttributeBinding
	}

	namespace n_UDialogueSubsystem {
		constexpr auto DialogueSystem = 0x38; // UDialogueSystem*
	}

	namespace n_ABarbedWire_Planted {
		constexpr auto GameplayEffectsComponent = 0x2a0; // UGameplayEffectsComponent*
		constexpr auto InternalRootComponent = 0x2a8; // USceneComponent*
		constexpr auto StaticMeshComponent = 0x2b0; // UStaticMeshComponent*
		constexpr auto BoxComponent = 0x2b8; // UBoxComponent*
		constexpr auto GameplayEffectEmitterComponent = 0x2c0; // UGameplayEffectEmitterComponent*
		constexpr auto HealthComponent = 0x2c8; // UHealthComponent*
		constexpr auto ItemAudioComponent = 0x2d0; // UItemAudioComponent*
		constexpr auto bShouldSpread = 0x2d8; // bool
		constexpr auto SpreadDistance = 0x2dc; // float
		constexpr auto TraceOffset = 0x2e0; // FVector
		constexpr auto TraceChannel = 0x2ec; // ECollisionChannel
	}

	namespace n_UGobiPerformanceMetricTestController {
		constexpr auto CurrentActor = 0x68; // AActor*
	}

	namespace n_UTitanStage3TailComponent {
		constexpr auto State = 0x100; // ETitanStage3TailState
		constexpr auto CurrentThrashMode = 0x101; // ETitanStage3TailThrashMode
		constexpr auto AttackVolumeTag = 0x104; // FGameplayTag
		constexpr auto ThrashGameplayEffects = 0x110; // TArray<UGameplayEffect*>
		constexpr auto ThrashLeftAnimSequence = 0x120; // UAnimSequence*
		constexpr auto ThrashRightAnimSequence = 0x128; // UAnimSequence*
	}

	namespace n_UMaterialExpressionArccosineFast {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UChallengeObjectiveDamageDealtData {
		constexpr auto DamageTypeQuery = 0x70; // FGameplayTagQuery
		constexpr auto IgnoreDamageContextFlags = 0xb8; // int32_t
	}

	namespace n_ASocialSpacePlayerController {
		constexpr auto OnSignedIn = 0x8a0; // FMulticastInlineDelegate
		constexpr auto OnSignedOut = 0x8b0; // FMulticastInlineDelegate
	}

	namespace n_UNavigationQueryFilter {
		constexpr auto Areas = 0x30; // TArray<FNavigationFilterArea>
		constexpr auto IncludeFlags = 0x40; // FNavigationFilterFlags
		constexpr auto ExcludeFlags = 0x44; // FNavigationFilterFlags
	}

	namespace n_ASleeper {
		constexpr auto SceneRoot = 0x2a0; // USceneComponent*
		constexpr auto PodMeshComponent = 0x2a8; // USkeletalMeshComponent*
		constexpr auto ProjectileSpawnLocation = 0x2b0; // USceneComponent*
		constexpr auto SensorySphereComponent = 0x2b8; // USphereComponent*
		constexpr auto PingableComponent = 0x2c0; // UPingableComponent*
		constexpr auto HealthComponent = 0x2c8; // UHealthComponent*
		constexpr auto GameplayEffectsComponent = 0x2d0; // UGameplayEffectsComponent*
		constexpr auto GameplayTagsComponent = 0x2d8; // UGameplayTagsComponent*
		constexpr auto ThreatComponent = 0x2e0; // UThreatComponent*
		constexpr auto AggroTimeDelay = 0x2e8; // float
		constexpr auto AttackAimConeAngleDegrees = 0x2ec; // float
		constexpr auto ProjectileClass = 0x2f0; // ASleeperProjectile*
		constexpr auto ProjectileSpeed = 0x2f8; // float
		constexpr auto PredictiveAimingScalar = 0x2fc; // float
		constexpr auto MinTargetLocationChangeForPredicitveAiming = 0x300; // float
		constexpr auto TargetValidTagQuery = 0x308; // FGameplayTagQuery
		constexpr auto DeathVFX = 0x350; // UParticleSystem*
		constexpr auto IdleLoopAudioEvent = 0x358; // UAkAudioEvent*
		constexpr auto IdleLoopStopAudioEvent = 0x360; // UAkAudioEvent*
		constexpr auto ReleaseAudioEvent = 0x368; // UAkAudioEvent*
		constexpr auto IdleVOXAudioEvent = 0x370; // UAkAudioEvent*
		constexpr auto IdleVOXRate = 0x378; // FVector2D
		constexpr auto ProjectileSpawnOffset = 0x380; // float
		constexpr auto SleeperBurstMusicStinger = 0x388; // FDataTableRowHandle
		constexpr auto OnLaunch = 0x3a8; // FMulticastInlineDelegate
		constexpr auto bLaunched = 0x3b8; // bool
		constexpr auto LiveProjectile = 0x3c0; // ASleeperProjectile*
		constexpr auto AttackTarget = 0x3fc; // TWeakObjectPtr<AGobiCharacter>
	}

	namespace n_UGameplayEffectAdjustContinues {
		constexpr auto Mode = 0x238; // EAdjustContinuesMode
		constexpr auto Adjustment = 0x23c; // int32_t
	}

	namespace n_UInventoryComponent {
		constexpr auto LastConsumableActivations = 0x130; // TMap<EEquipmentSlot, float>
		constexpr auto OnAddRemoveItemServer = 0x180; // FMulticastInlineDelegate
		constexpr auto OnDroppedItem = 0x190; // FMulticastInlineDelegate
		constexpr auto OnSelectedItemChanged = 0x1a0; // FMulticastInlineDelegate
		constexpr auto OnUtilityItemApplied = 0x1b0; // FMulticastInlineDelegate
		constexpr auto OnCurrencyChanged = 0x1c0; // FMulticastInlineDelegate
		constexpr auto OnCurrencyChangedDetailed = 0x1d0; // FMulticastInlineDelegate
		constexpr auto OnAdjustCurrency = 0x1f8; // FMulticastInlineDelegate
		constexpr auto OnItemUseFailed = 0x208; // FMulticastInlineDelegate
		constexpr auto OnConsumableSlotSelected = 0x218; // FMulticastInlineDelegate
		constexpr auto EquipmentSlotChanged = 0x228; // FMulticastInlineDelegate
		constexpr auto InputSelectedSlot = 0x300; // EEquipmentSlot
		constexpr auto EquipmentSlots = 0x308; // TArray<AItem*>
		constexpr auto PostRoundBonusCurrency = 0x318; // int32_t
		constexpr auto Currency = 0x31c; // int32_t
		constexpr auto LootingPlayerState = 0x320; // TWeakObjectPtr<APlayerState>
		constexpr auto DeathItemContainer = 0x328; // AItemPickup*
		constexpr auto SelectableEquipmentSlots = 0x330; // TArray<EEquipmentSlot>
		constexpr auto PerkItems = 0x340; // TArray<FDataTableRowHandle>
		constexpr auto ItemsDisabledTags = 0x350; // FGameplayTagContainer
		constexpr auto ItemsDisabledInstantTags = 0x378; // FGameplayTagContainer
		constexpr auto PrimaryWeaponDisabledTags = 0x398; // FGameplayTagContainer
		constexpr auto SecondaryWeaponDisabledTags = 0x3b8; // FGameplayTagContainer
		constexpr auto IsOnLadderTag = 0x3d8; // FGameplayTag
		constexpr auto SelectedItemActor = 0x3e0; // AItem*
		constexpr auto MoveTickSelectedActor = 0x3e8; // AItem*
		constexpr auto GameplayTagsComponent = 0x3f0; // UGameplayTagsComponent*
		constexpr auto LifeStateComponent = 0x3f8; // ULifeStateComponent*
		constexpr auto GobiPlayerMovementComponent = 0x400; // UGobiPlayerMovementComponent*
		constexpr auto OwnerPawn = 0x408; // APawn*
		constexpr auto AmmoReserves = 0x410; // FAmmoReserve [0x7]
		constexpr auto ServerSelectionActor = 0xb48; // AItem*
		constexpr auto ServerSelectionParity = 0xb51; // char
		constexpr auto LowAmmoEffectAudioCue = 0xba8; // UAkAudioEvent*
		constexpr auto LowAmmoEffectScreenEffectCue = 0xbb0; // FGameplayTag
		constexpr auto CurrencyRewardEntries = 0xbb8; // TArray<FCurrencyReward>
	}

	namespace n_URichTextBlockImageDecorator {
		constexpr auto ImageSet = 0x30; // UDataTable*
	}

	namespace n_UAkLuminInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettingsWithSampleRate
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xc0; // FAkAdvancedInitializationSettingsWithMultiCoreRendering
		constexpr auto TRSSettings = 0xf8; // FAkTRSPerPlatformSettings
	}

	namespace n_UParticleModuleMeshRotationRate {
		constexpr auto StartRotationRate = 0x38; // FRawDistributionVector
	}

	namespace n_UNiagaraPreviewAxis_InterpParamVector4 {
		constexpr auto Min = 0x40; // FVector4
		constexpr auto Max = 0x50; // FVector4
	}

	namespace n_UTextBlockWidgetStyle {
		constexpr auto TextBlockStyle = 0x38; // FTextBlockStyle
	}

	namespace n_UGizmoBaseComponent {
		constexpr auto Color = 0x4b0; // FLinearColor
		constexpr auto HoverSizeMultiplier = 0x4c0; // float
		constexpr auto PixelHitDistanceThreshold = 0x4c4; // float
	}

	namespace n_UMovieSceneSequencePlayer {
		constexpr auto OnPlay = 0x410; // FMulticastInlineDelegate
		constexpr auto OnPlayReverse = 0x420; // FMulticastInlineDelegate
		constexpr auto OnStop = 0x430; // FMulticastInlineDelegate
		constexpr auto OnPause = 0x440; // FMulticastInlineDelegate
		constexpr auto OnFinished = 0x450; // FMulticastInlineDelegate
		constexpr auto Status = 0x460; // EMovieScenePlayerStatus
		constexpr auto bReversePlayback = 0x464; // char : 1
		constexpr auto Sequence = 0x468; // UMovieSceneSequence*
		constexpr auto StartTime = 0x470; // FFrameNumber
		constexpr auto DurationFrames = 0x474; // int32_t
		constexpr auto CurrentNumLoops = 0x478; // int32_t
		constexpr auto PlaybackSettings = 0x490; // FMovieSceneSequencePlaybackSettings
		constexpr auto RootTemplateInstance = 0x4a8; // FMovieSceneRootEvaluationTemplateInstance
		constexpr auto NetSyncProps = 0x830; // FMovieSceneSequenceReplProperties
		constexpr auto PlaybackClient = 0x840; // TScriptInterface<IMovieScenePlaybackClient>
	}

	namespace n_UGameplayCardTravelSubsystem {
		constexpr auto TravelData = 0x38; // FGameplayCardTravelData
	}

	namespace n_USoundSubmixWithParentBase {
		constexpr auto ParentSubmix = 0x40; // USoundSubmixBase*
	}

	namespace n_UMaterialExpressionParticleSubUV {
		constexpr auto bBlend = 0xd8; // char : 1
	}

	namespace n_UParticleModuleEventGenerator {
		constexpr auto Events = 0x38; // TArray<FParticleEvent_GenerateInfo>
	}

	namespace n_UVariantObjectBinding {
		constexpr auto CachedActorLabel = 0x30; // FString
		constexpr auto ObjectPtr = 0x40; // FSoftObjectPath
		constexpr auto LazyObjectPtr = 0x58; // LazyObjectProperty
		constexpr auto CapturedProperties = 0x78; // TArray<UPropertyValue*>
		constexpr auto FunctionCallers = 0x88; // TArray<FFunctionCaller>
	}

	namespace n_UHealthPipUserWidget {
		constexpr auto MaterialInstance = 0x458; // UMaterialInstanceDynamic*
		constexpr auto Health = 0x460; // float
		constexpr auto HealingHealth = 0x464; // float
		constexpr auto TempHealth = 0x468; // float
		constexpr auto MaxHealth = 0x46c; // float
		constexpr auto CurWidth = 0x470; // float
		constexpr auto HealthBaxMaxDamageMaterialName = 0x474; // FName
		constexpr auto HealthBaxMaxDamageColorGroup = 0x47c; // FName
		constexpr auto HealthBaxTraumaMaterialName = 0x484; // FName
		constexpr auto HealthBaxTraumaColorGroup = 0x48c; // FName
	}

	namespace n_UCurveLinearColorAtlas {
		constexpr auto TextureSize = 0xf0; // uint32_t
		constexpr auto GradientCurves = 0xf8; // TArray<UCurveLinearColor*>
	}

	namespace n_ULodClipboardContent {
		constexpr auto LODInfo = 0x30; // FRawLodInfo
	}

	namespace n_UEnvQueryContext_ScenarioData {
		constexpr auto ScenarioTag = 0x30; // FGameplayTag
	}

	namespace n_AGameDirectorDebugger {
		constexpr auto HeroSpawnContexts = 0x2a0; // TArray<FHeroContext>
		constexpr auto bAllHerosPreparing = 0x2b0; // bool
		constexpr auto GameIntensity = 0x2b4; // float
		constexpr auto GameIntensityRate = 0x2b8; // float
		constexpr auto GameThreatLevel = 0x2bc; // uint32_t
		constexpr auto TotalAICount = 0x2c0; // int32_t
		constexpr auto TotalAggroAICount = 0x2c4; // int32_t
		constexpr auto TotalPointBudget = 0x2c8; // int32_t
		constexpr auto NumPlayersOnNav = 0x2cc; // int32_t
		constexpr auto NumNavmeshes = 0x2d0; // int32_t
		constexpr auto NumPlayersOnObjectiveDMap = 0x2d4; // int32_t
		constexpr auto bHasValidObjective = 0x2d8; // bool
		constexpr auto NumSpawnersByPlayers = 0x2dc; // int32_t
		constexpr auto ActiveScenarios = 0x2e0; // TArray<FName>
		constexpr auto ActiveScenarioDetails = 0x2f0; // TArray<FString>
		constexpr auto ActiveScenarioSpawnerSuccessRate = 0x300; // TArray<float>
		constexpr auto DormantScenarios = 0x310; // TArray<FName>
		constexpr auto SpawnActorDebug = 0x320; // TArray<FAISpawnActorDebugInfo>
		constexpr auto RecycleDistance = 0x330; // float
		constexpr auto DistanceAdvancedAfterHorde = 0x334; // float
		constexpr auto CurrentObjectiveDistance = 0x338; // float
		constexpr auto ObjectiveSearchDistance = 0x33c; // float
		constexpr auto ObjectiveLocation = 0x340; // FVector
		constexpr auto PacingPhase = 0x34c; // EPacingPhase
		constexpr auto PhaseHolder = 0x350; // FName
		constexpr auto RemainingPhaseTime = 0x358; // float
		constexpr auto HeroSpawnIdx = 0x35c; // uint32_t
		constexpr auto GreySpawners = 0x360; // TArray<FVector>
		constexpr auto RedSpawners = 0x370; // TArray<FVector>
		constexpr auto GreenSpawners = 0x380; // TArray<FVector>
		constexpr auto CyanSpawners = 0x390; // TArray<FVector>
		constexpr auto OrangeSpawners = 0x3a0; // TArray<FVector>
		constexpr auto YellowSpawners = 0x3b0; // TArray<FVector>
	}

	namespace n_UAssetManager {
		constexpr auto ObjectReferenceList = 0x2c8; // TArray<UObject*>
		constexpr auto bIsGlobalAsyncScanEnvironment = 0x2d8; // bool
		constexpr auto bShouldGuessTypeAndName = 0x2d9; // bool
		constexpr auto bShouldUseSynchronousLoad = 0x2da; // bool
		constexpr auto bIsLoadingFromPakFiles = 0x2db; // bool
		constexpr auto bShouldAcquireMissingChunksOnLoad = 0x2dc; // bool
		constexpr auto bOnlyCookProductionAssets = 0x2dd; // bool
		constexpr auto bIsBulkScanning = 0x2de; // bool
		constexpr auto bIsPrimaryAssetDirectoryCurrent = 0x2df; // bool
		constexpr auto bIsManagementDatabaseCurrent = 0x2e0; // bool
		constexpr auto bUpdateManagementDatabaseAfterScan = 0x2e1; // bool
		constexpr auto bIncludeOnlyOnDiskAssets = 0x2e2; // bool
		constexpr auto NumberOfSpawnedNotifications = 0x2e4; // int32_t
	}

	namespace n_UGobiCameraShake {
		constexpr auto OscillationBlendCurve = 0x168; // UCurveFloat*
	}

	namespace n_UInteractiveGizmo {
		constexpr auto InputBehaviors = 0x38; // UInputBehaviorSet*
	}

	namespace n_UAIScriptingComponent {
		constexpr auto OnSenseUnWatched = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnSensedWhizBy = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnAlertedChanged = 0x108; // FMulticastInlineDelegate
		constexpr auto OnEnemyChanged = 0x118; // FMulticastInlineDelegate
		constexpr auto OnHideFromHordesChanged = 0x128; // FMulticastInlineDelegate
		constexpr auto CachedEnemy = 0x138; // AActor*
		constexpr auto BlackboardAsset = 0x140; // UBlackboardData*
		constexpr auto AlertToLocationBBKey = 0x148; // FBlackboardKeySelector
		constexpr auto PseudoAlertToLocationBBKey = 0x170; // FBlackboardKeySelector
		constexpr auto RetreatLocationBBKey = 0x198; // FBlackboardKeySelector
		constexpr auto AmbushLocationBBKey = 0x1c0; // FBlackboardKeySelector
		constexpr auto WanderLocationBBKey = 0x1e8; // FBlackboardKeySelector
		constexpr auto IsHordingBBKey = 0x210; // FBlackboardKeySelector
		constexpr auto EnemyBBKey = 0x238; // FBlackboardKeySelector
		constexpr auto HighPrioritySmartActorBBKey = 0x260; // FBlackboardKeySelector
		constexpr auto LowPrioritySmartActorBBKey = 0x288; // FBlackboardKeySelector
		constexpr auto ReachInSmartActorBBKey = 0x2b0; // FBlackboardKeySelector
		constexpr auto WallClingActorBBKey = 0x2d8; // FBlackboardKeySelector
		constexpr auto CanTriggerAttackBBKey = 0x300; // FBlackboardKeySelector
		constexpr auto CanTriggerAttackIgnoreEnabledBBKey = 0x328; // FBlackboardKeySelector
		constexpr auto IsDeadBBKey = 0x350; // FBlackboardKeySelector
		constexpr auto HealthBBKey = 0x378; // FBlackboardKeySelector
		constexpr auto ScriptSplineBBKey = 0x3a0; // FBlackboardKeySelector
		constexpr auto HideFromHordesBBKey = 0x3c8; // FBlackboardKeySelector
		constexpr auto ShouldHideBBKey = 0x3f0; // FBlackboardKeySelector
		constexpr auto AttackLocationBBKey = 0x418; // FBlackboardKeySelector
		constexpr auto DefaultExtents = 0x440; // FVector
	}

	namespace n_APVPClassicGameMode {
		constexpr auto ZombieRelocateOnDistanceFromHeroes = 0x5a8; // float
		constexpr auto MaxDistancePointsToObjective = 0x5ac; // int32_t
		constexpr auto ExpGrowthFactor = 0x5b0; // float
		constexpr auto BonusScoreForRemainingCapable = 0x5b4; // float
		constexpr auto HasBeenIncapacitatedQuery = 0x5b8; // FGameplayTagQuery
		constexpr auto DistanceTraveledUpdateInterval = 0x600; // float
	}

	namespace n_UAISense_Touch {
		constexpr auto RegisteredEvents = 0x88; // TArray<FAITouchEvent>
	}

	namespace n_UMessagePopupUserWidget {
		constexpr auto ButtonClass = 0x498; // TSoftClassPtr<UObject>
	}

	namespace n_ASleeper_AICharacterBP_C {
		constexpr auto UberGraphFrame = 0x1330; // FPointerToUberGraphFrame
		constexpr auto HealthBar = 0x1338; // UHealthBarComponent*
		constexpr auto InfectedHighlight = 0x1340; // UInfectedHighlightComponent*
		constexpr auto EnemyAudioComponent_BP = 0x1348; // UEnemyAudioComponent_BP_C*
		constexpr auto LootContainer = 0x1350; // AItemPickupBase_BP_C*
		constexpr auto LootContainerClass = 0x1358; // AActor*
		constexpr auto AttackRadius = 0x1360; // float
		constexpr auto ThreatReactThresholdTime = 0x1364; // float
		constexpr auto SleeperPod = 0x1368; // AActor*
		constexpr auto IsActiveSleeper = 0x1370; // bool
		constexpr auto InactiveMaxHealth = 0x1374; // float
		constexpr auto ThreatComponent = 0x1378; // UThreatComponent*
		constexpr auto ScenarioActor = 0x1380; // ASleeper_HeroGrappled_ScenarioActor_C*
		constexpr auto NewVar_1 = 0x1388; // int32_t
		constexpr auto SpawnOffset = 0x138c; // FVector
	}

	namespace n_UMovieSceneGeometryCollectionSection {
		constexpr auto Params = 0xe8; // FMovieSceneGeometryCollectionParams
	}

	namespace n_UPreviewMeshCollection {
		constexpr auto Skeleton = 0x40; // USkeleton*
		constexpr auto SkeletalMeshes = 0x48; // TArray<FPreviewMeshCollectionEntry>
	}

	namespace n_UMicroManagerSubsystem {
		constexpr auto ManagerMap = 0x38; // TMap<UMicroManager*, UMicroManager*>
	}

	namespace n_ULevelStreamingDynamic {
		constexpr auto bInitiallyLoaded = 0x148; // char : 1
		constexpr auto bInitiallyVisible = 0x148; // char : 1
		constexpr auto bReloadOnSoftReset = 0x14c; // char : 1
		constexpr auto bDefaultSpawnLevel = 0x14c; // char : 1
	}

	namespace n_ACameraRig_Rail {
		constexpr auto CurrentPositionOnRail = 0x2a0; // float
		constexpr auto bLockOrientationToRail = 0x2a4; // bool
		constexpr auto TransformComponent = 0x2a8; // USceneComponent*
		constexpr auto RailSplineComponent = 0x2b0; // USplineComponent*
		constexpr auto RailCameraMount = 0x2b8; // USceneComponent*
	}

	namespace n_UBlackboardKeyType_Object {
		constexpr auto BaseClass = 0x38; // UObject*
	}

	namespace n_UInterpTrackEvent {
		constexpr auto EventTrack = 0x78; // TArray<FEventTrackKey>
		constexpr auto bFireEventsWhenForwards = 0x88; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x88; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x88; // char : 1
		constexpr auto bUseCustomEventName = 0x88; // char : 1
	}

	namespace n_USkeletalMeshLODSettings {
		constexpr auto MinLOD = 0x38; // FPerPlatformInt
		constexpr auto DisableBelowMinLodStripping = 0x3c; // FPerPlatformBool
		constexpr auto bSupportLODStreaming = 0x3d; // FPerPlatformBool
		constexpr auto MaxNumStreamedLODs = 0x40; // FPerPlatformInt
		constexpr auto MaxNumOptionalLODs = 0x44; // FPerPlatformInt
		constexpr auto LODGroups = 0x48; // TArray<FSkeletalMeshLODGroupSettings>
	}

	namespace n_AHero_BP_C {
		constexpr auto UberGraphFrame = 0x16d0; // FPointerToUberGraphFrame
		constexpr auto CameraViewModifier = 0x16d8; // UCameraViewModifierComponent*
		constexpr auto ModifyView = 0x16e0; // UModifyViewComponent*
		constexpr auto Drench = 0x16e8; // UDrench_Component_Hero_BP_C*
		constexpr auto ThirdPersonLegsMesh = 0x16f0; // USkeletalMeshComponent*
		constexpr auto ThirdPersonHeadMesh = 0x16f8; // USkeletalMeshComponent*
		constexpr auto Attachable = 0x1700; // UAttachableComponent*
		constexpr auto TRSEventTrigger_BP = 0x1708; // UTRSEventTrigger_BP_C*
		constexpr auto FlashlightPose1 = 0x1710; // UFlashlightPoseComponent*
		constexpr auto HeroDialogue_BP = 0x1718; // UHeroDialogue_BP_C*
		constexpr auto Stumble = 0x1720; // UStumbleComponent*
		constexpr auto Grapple = 0x1728; // UGrappleComponent*
		constexpr auto HeroFacialAnimation = 0x1730; // UHeroFacialAnimationComponent*
		constexpr auto PhysicalAnimation = 0x1738; // UPhysicalAnimationComponent*
		constexpr auto HeroGameCoachLessons = 0x1740; // UHeroGameCoachLessons_BP_C*
		constexpr auto HealthHitMarker = 0x1748; // UHealthHitMarkerComponent*
		constexpr auto DamageFilterComponent = 0x1750; // UDamageFilterComponent*
		constexpr auto KillHandler = 0x1758; // UKillHandlerComponent*
		constexpr auto FlashBangReceiver_BP = 0x1760; // UFlashBangReceiver_BP_C*
		constexpr auto MountedWeaponInteract = 0x1768; // UMountedWeaponInteractComponent*
		constexpr auto Pingable = 0x1770; // UPingableComponent*
		constexpr auto FlashlightPose = 0x1778; // UFlashlightPoseComponent*
		constexpr auto HeroHighlight_BP = 0x1780; // UHeroHighlight_BP_C*
		constexpr auto Mantle = 0x1788; // UMantleComponent*
		constexpr auto GameplayContext = 0x1790; // UGameplayContextComponent*
		constexpr auto CameraRoot = 0x1798; // USceneComponent*
		constexpr auto ThirdPersonCamera = 0x17a0; // UCameraComponent*
		constexpr auto FirstPersonCamera = 0x17a8; // UCameraComponent*
		constexpr auto FirstPersonArms = 0x17b0; // UFPRigSkeletalMeshComponent*
		constexpr auto FirstPersonSpringArm = 0x17b8; // USpringArmComponent*
		constexpr auto ThirdPersonSpringArm = 0x17c0; // USpringArmComponent*
		constexpr auto PlayerStamina = 0x17c8; // UPlayerStaminaComponent*
		constexpr auto PlayerSprint = 0x17d0; // UPlayerSprintComponent*
		constexpr auto PlayerAimAssist = 0x17d8; // UPlayerAimAssistComponent*
		constexpr auto MoveIgnoreActors = 0x17e0; // UMoveIgnoreActorsComponent*
		constexpr auto IncapUsable_BP = 0x17e8; // UIncapUsable_BP_C*
		constexpr auto PerkComponent = 0x17f0; // UPerkComponent*
		constexpr auto PlayHitReaction = 0x17f8; // UPlayHitReactionComponent*
		constexpr auto Player_Damage_Capsule = 0x1800; // UCapsuleComponent*
		constexpr auto Health = 0x1808; // UHealthComponent*
		constexpr auto FlashlightManager = 0x1810; // UHeroLightComponent*
		constexpr auto LedgeHangUsable_BP = 0x1818; // ULedgeHangUsable_BP_C*
		constexpr auto PlayerMovementDebug = 0x1820; // UPlayerMovementDebugComponent*
		constexpr auto HeroLifeStateComponent_BP = 0x1828; // UHeroLifeStateComponent_BP_C*
		constexpr auto GrappleSpotLight = 0x1830; // USpotLightComponent*
		constexpr auto DistanceMapSource = 0x1838; // UDistanceMapSourceComponent*
		constexpr auto IncapUseVolume = 0x1840; // UCapsuleComponent*
		constexpr auto HeroUse = 0x1848; // UHeroUseComponent*
		constexpr auto GameplayEffects = 0x1850; // UGameplayEffectsComponent*
		constexpr auto HitMarker = 0x1858; // UHitMarkerComponent*
		constexpr auto HeroAudioComponent_BP = 0x1860; // UHeroAudioComponent_BP_C*
		constexpr auto HeroView = 0x1868; // UPlayerViewComponent*
		constexpr auto Inventory = 0x1870; // UInventoryComponent*
		constexpr auto Callback_OnJumped = 0x1878; // FMulticastInlineDelegate
		constexpr auto Callback_OnLanded = 0x1888; // FMulticastInlineDelegate
		constexpr auto AlertCommons_Radius = 0x1898; // float
	}

	namespace n_UParticleModuleKillBox {
		constexpr auto LowerLeftCorner = 0x38; // FRawDistributionVector
		constexpr auto UpperRightCorner = 0x80; // FRawDistributionVector
		constexpr auto bAbsolute = 0xc8; // char : 1
		constexpr auto bKillInside = 0xc8; // char : 1
		constexpr auto bAxisAlignedAndFixedSize = 0xc8; // char : 1
	}

	namespace n_UAnimEvalSet_Climb {
		constexpr auto IsNavLinkNext = 0xc0; // FGameplayEval_IsNavLinkNext
		constexpr auto ClimbLinkEval = 0x108; // FAnimEval_Climb
		constexpr auto MaxStartingDistance = 0x170; // float
		constexpr auto ClimbUp = 0x174; // float
		constexpr auto TopDistance = 0x178; // float
		constexpr auto ClimbDown = 0x17c; // float
		constexpr auto ClimbNavAreas = 0x180; // TArray<UNavArea*>
		constexpr auto bNeedsClearPathToLinkStart = 0x190; // bool
	}

	namespace n_UBTService_TeamSensor {
		constexpr auto AllowSensorTagQuery = 0x78; // FGameplayTagQuery
		constexpr auto TeammateTagQuery = 0xc0; // FGameplayTagQuery
		constexpr auto TeammateTargetBBKey = 0x108; // FBlackboardKeySelector
		constexpr auto TeammateDistBBKey = 0x130; // FBlackboardKeySelector
		constexpr auto ShouldTeamTeleportBBKey = 0x158; // FBlackboardKeySelector
		constexpr auto TeamCentroidBBKey = 0x180; // FBlackboardKeySelector
	}

	namespace n_UEnvQueryTest_NotAggroOrOld {
		constexpr auto OldThreshold = 0x208; // float
	}

	namespace n_UPrespawnComponent {
		constexpr auto PreSpawnInfo = 0xf0; // FPreSpawnInfo
		constexpr auto PreSpawnActorClass = 0x140; // AActor*
		constexpr auto PreSpawnSKMComp = 0x148; // USkeletalMeshComponent*
	}

	namespace n_UBTDecorator_CanEnterBruteState {
		constexpr auto State = 0x70; // EBruteState
		constexpr auto FlowControlDelay = 0x74; // float
	}

	namespace n_UVendorSubcategoryUserWidget {
		constexpr auto OnItemFocusReceived = 0x458; // FMulticastInlineDelegate
		constexpr auto OnItemFocusLost = 0x468; // FMulticastInlineDelegate
		constexpr auto OnItemClicked = 0x478; // FMulticastInlineDelegate
	}

	namespace n_UHagAnimInstance {
		constexpr auto HagAnimState = 0x7f8; // FHagAnimState
	}

	namespace n_UGameplayContextComponent {
		constexpr auto Contexts = 0xe8; // TArray<UGameplayContext*>
		constexpr auto RepContextLocation = 0x148; // FRepContextLocation
		constexpr auto RepContextRotation = 0x160; // FRepContextRotation
		constexpr auto InitialContexts = 0x178; // TArray<UGameplayContext*>
	}

	namespace n_UProjectileSprayComponent {
		constexpr auto OnSprayEnded = 0x1d8; // FMulticastInlineDelegate
		constexpr auto SprayConfig = 0x1e8; // FProjectileSprayConfig
		constexpr auto MoveTickData = 0x328; // FProjectileSprayMoveTickData
		constexpr auto Projectiles = 0x338; // TArray<UProjectileSimple*>
		constexpr auto SprayTarget = 0x3d4; // FVector
	}

	namespace n_UTestMovieSceneSequence {
		constexpr auto MovieScene = 0x350; // UMovieScene*
	}

	namespace n_UWaterRipplerComponent {
		constexpr auto RipplerDefinition = 0x230; // UWaterRipplerDef*
		constexpr auto WaterVolume = 0x238; // AWaterVolume*
		constexpr auto RuntimeData = 0x240; // FWaterRipplerRuntime
	}

	namespace n_UEnvQueryTest_EnemyClaim {
		constexpr auto InitialEnemyMaxDP = 0x208; // FAIDataProviderIntValue
		constexpr auto ClaimRadiusDP = 0x240; // FAIDataProviderFloatValue
	}

	namespace n_UParticleModuleAcceleration {
		constexpr auto Acceleration = 0x40; // FRawDistributionVector
		constexpr auto bApplyOwnerScale = 0x88; // char : 1
	}

	namespace n_UActivitySubsystem {
		constexpr auto bEnabledForPlatform = 0x38; // bool
	}

	namespace n_UBTService_BlueprintBase {
		constexpr auto AIOwner = 0x78; // AAIController*
		constexpr auto ActorOwner = 0x80; // AActor*
		constexpr auto bShowPropertyDetails = 0x98; // char : 1
		constexpr auto bShowEventDetails = 0x98; // char : 1
	}

	namespace n_ANavigationObjectBase {
		constexpr auto CapsuleComponent = 0x2a8; // UCapsuleComponent*
		constexpr auto GoodSprite = 0x2b0; // UBillboardComponent*
		constexpr auto BadSprite = 0x2b8; // UBillboardComponent*
		constexpr auto bIsPIEPlayerStart = 0x2c0; // char : 1
	}

	namespace n_ABirdSystem {
		constexpr auto bBirdSystemEnabled = 0x2a8; // bool
		constexpr auto bNetworked = 0x2a9; // bool
		constexpr auto bControlledByMicroManager = 0x2aa; // bool
		constexpr auto SupportedGameModes = 0x2ac; // uint32_t
		constexpr auto BirdCount = 0x2b0; // int32_t
		constexpr auto InitialLocation = 0x2b4; // FVector2D
		constexpr auto HoverRadius = 0x2bc; // FVector2D
		constexpr auto CircleCount = 0x2c4; // int32_t
		constexpr auto SplinePointCount = 0x2c8; // int32_t
		constexpr auto SplineRadius = 0x2cc; // float
		constexpr auto bLandSameSiteAllowed = 0x2d0; // bool
		constexpr auto InitialFlightOption = 0x2d1; // EBirdAfterInitialFlight
		constexpr auto ActorTypes = 0x2d8; // TArray<ABird*>
		constexpr auto Sites = 0x2e8; // TArray<ABirdSite*>
		constexpr auto StartSite = 0x398; // ABirdSite*
		constexpr auto BirdActors = 0x3a0; // TArray<ABird*>
		constexpr auto Splines = 0x3b0; // TArray<USplineComponent*>
		constexpr auto BirdSpawns = 0x3c0; // TArray<int8_t>
		constexpr auto BirdInfos = 0x3d0; // TArray<FBirdInfo>
	}

	namespace n_UGameplayAction_BotInteractUse {
		constexpr auto UsableComponentClass = 0x210; // UUsableComponent*
		constexpr auto InteractContext = 0x218; // UAnimContext_Actor*
		constexpr auto FilterSet = 0x220; // UGameplayEvaluatorSet*
	}

	namespace n_UTweenVector {
		constexpr auto OnTweenStart = 0xb0; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0xd0; // FMulticastInlineDelegate
		constexpr auto OnTweenActorHit = 0xe0; // FMulticastInlineDelegate
		constexpr auto OnTweenActorBeginOverlap = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnTweenPrimitiveComponentHit = 0x100; // FMulticastInlineDelegate
		constexpr auto OnTweenPrimitiveComponentBeginOverlap = 0x110; // FMulticastInlineDelegate
	}

	namespace n_ABaseGun_Static_BP_C {
		constexpr auto SightMesh_3P = 0x508; // UStaticMeshComponent*
		constexpr auto BarrelMesh_3P = 0x510; // UStaticMeshComponent*
		constexpr auto BaseStaticMesh_3P = 0x518; // UStaticMeshComponent*
	}

	namespace n_UDebugCameraControllerSettings {
		constexpr auto CycleViewModes = 0x40; // TArray<FDebugCameraControllerSettingsViewModeIndex>
	}

	namespace n_UMaterialExpressionStaticBool {
		constexpr auto Value = 0x48; // char : 1
	}

	namespace n_UBot_DeathReaction_GA_C {
		constexpr auto UberGraphFrame = 0x210; // FPointerToUberGraphFrame
	}

	namespace n_UParticleModuleCollision {
		constexpr auto DampingFactor = 0x38; // FRawDistributionVector
		constexpr auto DampingFactorRotation = 0x80; // FRawDistributionVector
		constexpr auto MaxCollisions = 0xc8; // FRawDistributionFloat
		constexpr auto CollisionCompletionOption = 0xf8; // EParticleCollisionComplete
		constexpr auto CollisionTypes = 0x100; // TArray<EObjectTypeQuery>
		constexpr auto bApplyPhysics = 0x118; // char : 1
		constexpr auto bIgnoreTriggerVolumes = 0x118; // char : 1
		constexpr auto ParticleMass = 0x120; // FRawDistributionFloat
		constexpr auto DirScalar = 0x150; // float
		constexpr auto bPawnsDoNotDecrementCount = 0x154; // char : 1
		constexpr auto bOnlyVerticalNormalsDecrementCount = 0x154; // char : 1
		constexpr auto VerticalFudgeFactor = 0x158; // float
		constexpr auto DelayAmount = 0x160; // FRawDistributionFloat
		constexpr auto bDropDetail = 0x190; // char : 1
		constexpr auto bCollideOnlyIfVisible = 0x190; // char : 1
		constexpr auto bUnstickInitialHits = 0x190; // char : 1
		constexpr auto bIgnoreSourceActor = 0x190; // char : 1
		constexpr auto MaxCollisionDistance = 0x194; // float
	}

	namespace n_UAkXSXInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettings
		constexpr auto ApuHeapSettings = 0x90; // FAkXSXApuHeapInitializationSettings
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xc0; // FAkXSXAdvancedInitializationSettings
		constexpr auto TRSSettings = 0xfc; // FAkTRSPerPlatformSettings
	}

	namespace n_UDialogueResponseSet {
		constexpr auto Responses = 0x38; // TMap<FName, FDialogueResponse>
	}

	namespace n_UEditableTextBoxWidgetStyle {
		constexpr auto EditableTextBoxStyle = 0x38; // FEditableTextBoxStyle
	}

	namespace n_UTextureRenderTarget {
		constexpr auto TargetGamma = 0xc0; // float
	}

	namespace n_UParticleModuleRotationRateMultiplyLife {
		constexpr auto LifeMultiplier = 0x38; // FRawDistributionFloat
	}

	namespace n_UGameplayEffectReloadComponent {
		constexpr auto ReloadSpeedScaleMod = 0x250; // FGamePropertyFloatMod
		constexpr auto PowerReloadEffects = 0x260; // TArray<UGameplayEffect*>
		constexpr auto PowerReloadPlayerEffects = 0x270; // TArray<UGameplayEffect*>
	}

	namespace n_ULightmappedSurfaceCollection {
		constexpr auto SourceModel = 0x30; // UModel*
		constexpr auto Surfaces = 0x38; // TArray<int32_t>
	}

	namespace n_UInterpGroup {
		constexpr auto InterpTracks = 0x38; // TArray<UInterpTrack*>
		constexpr auto GroupName = 0x48; // FName
		constexpr auto GroupColor = 0x50; // FColor
		constexpr auto bCollapsed = 0x54; // char : 1
		constexpr auto bVisible = 0x54; // char : 1
		constexpr auto bIsFolder = 0x54; // char : 1
		constexpr auto bIsParented = 0x54; // char : 1
		constexpr auto bIsSelected = 0x54; // char : 1
	}

	namespace n_UTRSAudioDebugger {
		constexpr auto World = 0x30; // UWorld*
	}

	namespace n_UGameplayAction_SmartActor {
		constexpr auto PlayAndWaitProxy = 0x218; // UPlayMontageAndWaitProxy*
		constexpr auto ChosenMontage = 0x220; // UAnimMontage*
		constexpr auto Montages = 0x228; // TArray<UAnimMontage*>
		constexpr auto bDeactivateOnBlendOut = 0x238; // bool
		constexpr auto PlayRateRange = 0x23c; // FVector2D
		constexpr auto SmartActorCooldownEffect = 0x248; // UGameplayEffect*
	}

	namespace n_UWallGrabTrait {
		constexpr auto Config = 0x30; // FWallGrabConfig
		constexpr auto WallGrabComponentClass = 0x188; // UWallGrabComponent*
	}

	namespace n_UGameplayEffectAudio {
		constexpr auto StartAkAudioEvents = 0x238; // TArray<UAkAudioEvent*>
		constexpr auto StopAkAudioEvents = 0x248; // TArray<UAkAudioEvent*>
		constexpr auto bLocallyControlledOnly = 0x258; // bool
		constexpr auto bPostAtLocation = 0x259; // bool
	}

	namespace n_USignInScreen {
		constexpr auto OnPlayerSignedIn = 0x560; // FMulticastInlineDelegate
		constexpr auto MatchmakingFailedPopupData = 0x570; // FSignInFailedPopupData
		constexpr auto RoboSignInKBMAudio = 0x5e8; // UAkAudioEvent*
		constexpr auto RoboSignInPSAudio = 0x5f0; // UAkAudioEvent*
		constexpr auto RoboSignInSteamContAudio = 0x5f8; // UAkAudioEvent*
		constexpr auto RoboSignInSwitchAudio = 0x600; // UAkAudioEvent*
		constexpr auto RoboSignInXboxAudio = 0x608; // UAkAudioEvent*
		constexpr auto RoboSignInStopAudio = 0x610; // UAkAudioEvent*
		constexpr auto Matchmaking = 0x640; // UMatchmaking*
	}

	namespace n_UAISenseConfig_Sight {
		constexpr auto Implementation = 0x50; // UAISense_Sight*
		constexpr auto SightRadius = 0x58; // float
		constexpr auto LoseSightRadius = 0x5c; // float
		constexpr auto PeripheralVisionAngleDegrees = 0x60; // float
		constexpr auto DetectionByAffiliation = 0x64; // FAISenseAffiliationFilter
		constexpr auto AutoSuccessRangeFromLastSeenLocation = 0x68; // float
	}

	namespace n_UBTTask_RunBehaviorDynamic {
		constexpr auto InjectionTag = 0x78; // FGameplayTag
		constexpr auto DefaultBehaviorAsset = 0x80; // UBehaviorTree*
		constexpr auto BehaviorAsset = 0x88; // UBehaviorTree*
	}

	namespace n_UGizmoLocalFloatParameterSource {
		constexpr auto Value = 0x50; // float
		constexpr auto LastChange = 0x54; // FGizmoFloatParameterChange
	}

	namespace n_USkeletalBodySetup {
		constexpr auto bSkipScaleFromAnimation = 0x258; // bool
		constexpr auto PhysicalAnimationData = 0x260; // TArray<FPhysicalAnimationProfile>
	}

	namespace n_ATemplateSequenceActor {
		constexpr auto PlaybackSettings = 0x2a8; // FMovieSceneSequencePlaybackSettings
		constexpr auto SequencePlayer = 0x2c0; // UTemplateSequencePlayer*
		constexpr auto TemplateSequence = 0x2c8; // FSoftObjectPath
		constexpr auto BindingOverride = 0x2e0; // FTemplateSequenceBindingOverrideData
	}

	namespace n_UMaterialExpressionMaterialFunctionCall {
		constexpr auto MaterialFunction = 0x48; // UMaterialFunctionInterface*
		constexpr auto FunctionParameterInfo = 0x50; // FMaterialParameterInfo
	}

	namespace n_ACableFerry {
		constexpr auto CurrentFerryState = 0x2a0; // EFerryState
		constexpr auto GobiGameState = 0x2c8; // AGobiGameStateBase*
		constexpr auto DefaultSceneRoot = 0x2d0; // USceneComponent*
		constexpr auto Ferry = 0x2d8; // UStaticMeshComponent*
		constexpr auto FerryMotor = 0x2e0; // UStaticMeshComponent*
		constexpr auto FerryMotorCable1 = 0x2e8; // UCableComponent*
		constexpr auto FerryMotorCable2 = 0x2f0; // UCableComponent*
		constexpr auto IntactFerryRoot = 0x2f8; // USceneComponent*
		constexpr auto BrokenFerryRoot = 0x300; // USceneComponent*
		constexpr auto UsableVolume = 0x308; // UBoxComponent*
		constexpr auto DamageVolume = 0x310; // UBoxComponent*
		constexpr auto PushbackVolume = 0x318; // UBoxComponent*
		constexpr auto KnockbackVolume = 0x320; // UBoxComponent*
		constexpr auto ZombieBlockVolumes = 0x328; // TArray<UBoxComponent*>
		constexpr auto PlayerCheckerVolume = 0x338; // UBoxComponent*
		constexpr auto NavModifierVolume = 0x340; // UBoxComponent*
		constexpr auto FerryTravelSpline = 0x348; // USplineComponent*
		constexpr auto UsableComp = 0x350; // UUsableComponent*
		constexpr auto NotUsableComp = 0x358; // UUsableComponent*
		constexpr auto HealthComp = 0x360; // UHealthComponent*
		constexpr auto GobiNavModifierComp = 0x368; // UGobiNavModifierComponent*
		constexpr auto UsableHighlightComp = 0x370; // UUsableHighlightComponent*
		constexpr auto GameplayEffectsComp = 0x378; // UGameplayEffectsComponent*
		constexpr auto IntactFerry = 0x380; // TArray<UStaticMeshComponent*>
		constexpr auto IntactFerryMotor = 0x390; // TArray<UStaticMeshComponent*>
		constexpr auto BrokenFerry = 0x3a0; // TArray<UStaticMeshComponent*>
		constexpr auto BrokenFerryMotor = 0x3b0; // TArray<UStaticMeshComponent*>
		constexpr auto PlayersInVolume = 0x3c0; // TArray<AHeroCharacter*>
		constexpr auto HeroAttachmentLocations = 0x3d0; // TArray<FName>
		constexpr auto FerryHitLocations = 0x3e0; // TArray<FName>
		constexpr auto ThreatActorClassForBigObjects = 0x3f0; // AActor*
		constexpr auto SpawnThreatActors = 0x3f8; // TArray<AActor*>
		constexpr auto FerrySceneComponentTag = 0x408; // FGameplayTag
		constexpr auto bRequiresAllPlayersForUse = 0x410; // bool
		constexpr auto PushbackDelay = 0x414; // float
		constexpr auto PushbackCooldown = 0x418; // float
		constexpr auto PushbackHeroDamage = 0x41c; // float
		constexpr auto PushbackZombieDamage = 0x420; // float
		constexpr auto IncapCameraCollisionDisableTime = 0x424; // float
		constexpr auto bKillPlayerIncappedByFerry = 0x428; // bool
		constexpr auto KnockbackImpulseStrength = 0x42c; // float
		constexpr auto KnockbackDuration = 0x430; // float
		constexpr auto KnockbackGravityScalar = 0x434; // float
		constexpr auto PushbackDamageType = 0x438; // UGobiDamageType*
		constexpr auto PushbackDamagePhysicalSurface = 0x440; // EPhysicalSurface
		constexpr auto PushbackTargets = 0x448; // TMap<AGobiCharacter*, float>
		constexpr auto SpeedAdjustTargetQuery = 0x498; // FGameplayTagQuery
		constexpr auto SpeedAdjustTagsToRemove = 0x4e0; // FGameplayTagContainer
		constexpr auto SpeedAdjustTagsToAdd = 0x500; // FGameplayTagContainer
	}

	namespace n_UGlobalAssetLoaderV2 {
		constexpr auto GlobalAssetTable = 0x30; // UDataTable*
		constexpr auto RequestedAssetTables = 0x38; // TArray<UAssetTable*>
		constexpr auto LoadedAssetTables = 0x48; // TArray<UAssetTable*>
	}

	namespace n_UVisibilityNavMapQueryFilter {
		constexpr auto VisibilityCountInfluence = 0x50; // float
		constexpr auto PartialVisibilityScalar = 0x54; // float
	}

	namespace n_ADefaultPawn {
		constexpr auto BaseTurnRate = 0x2f8; // float
		constexpr auto BaseLookUpRate = 0x2fc; // float
		constexpr auto MovementComponent = 0x300; // UPawnMovementComponent*
		constexpr auto CollisionComponent = 0x308; // USphereComponent*
		constexpr auto MeshComponent = 0x310; // UStaticMeshComponent*
		constexpr auto bAddDefaultMovementBindings = 0x318; // char : 1
	}

	namespace n_UAISenseEvent_TRSHearing {
		constexpr auto Event = 0x30; // FAITRSNoiseEvent
	}

	namespace n_UGameplayTasksComponent {
		constexpr auto bIsNetDirty = 0xf4; // char : 1
		constexpr auto SimulatedTasks = 0xf8; // TArray<UGameplayTask*>
		constexpr auto TaskPriorityQueue = 0x108; // TArray<UGameplayTask*>
		constexpr auto TickingTasks = 0x128; // TArray<UGameplayTask*>
		constexpr auto KnownTasks = 0x138; // TArray<UGameplayTask*>
		constexpr auto OnClaimedResourcesChange = 0x148; // FMulticastInlineDelegate
	}

	namespace n_UAnimEvalSet_ItemStanceHitDirection_C {
		constexpr auto ItemStance = 0xc0; // FGameplayEval_SelectedItemAnimationStance
		constexpr auto HitDirection = 0x110; // FGameplayEval_Angle
	}

	namespace n_UColorBlindOutlineHighlightData {
		constexpr auto OutlinePalettes = 0x38; // TMap<EColorBlindMode, FHighlightPalette>
	}

	namespace n_UCommon_LocoBase_ABP_C {
		constexpr auto UberGraphFrame = 0x2c0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2c8; // FAnimNode_Root
		constexpr auto AnimGraphNode_TransitionResult_28 = 0x2f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_27 = 0x320; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_26 = 0x348; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_25 = 0x370; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_24 = 0x398; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_22 = 0x410; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_23 = 0x440; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_21 = 0x4b8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_24 = 0x4e8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_23 = 0x510; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_22 = 0x538; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_21 = 0x560; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_20 = 0x588; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_19 = 0x5b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendListByEnum_11 = 0x5d8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_18 = 0x688; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_16 = 0x818; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_19 = 0x8a0; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_17 = 0x940; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_15 = 0xad0; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_18 = 0xb58; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_16 = 0xbf8; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_14 = 0xd88; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_17 = 0xe10; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_15 = 0xeb0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_13 = 0x1040; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_16 = 0x10c8; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_StateResult_20 = 0x1168; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_14 = 0x1198; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_12 = 0x1328; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_13 = 0x13b0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_11 = 0x1540; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_12 = 0x15c8; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_10 = 0x1758; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_11 = 0x17e0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_9 = 0x1970; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_15 = 0x19f8; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotateRootBone_14 = 0x1a98; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotateRootBone_13 = 0x1b38; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_BlendListByEnum_10 = 0x1bd8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_RotateRootBone_12 = 0x1c88; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_StateResult_19 = 0x1d28; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_OrientationWarping_28 = 0x1d58; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_27 = 0x1dc8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_26 = 0x1e38; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_25 = 0x1ea8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_BlendListByEnum_9 = 0x1f18; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_OrientationWarping_24 = 0x1fc8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_23 = 0x2038; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_22 = 0x20a8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_21 = 0x2118; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_BlendListByEnum_8 = 0x2188; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_OrientationWarping_20 = 0x2238; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_19 = 0x22a8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_18 = 0x2318; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_17 = 0x2388; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_BlendListByGameplayTag_4 = 0x23f8; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_BlendSpacePlayer_28 = 0x24c0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_27 = 0x25a8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_26 = 0x2690; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_25 = 0x2778; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_24 = 0x2860; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_23 = 0x2948; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_22 = 0x2a30; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_21 = 0x2b18; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_20 = 0x2c00; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_19 = 0x2ce8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_18 = 0x2dd0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_17 = 0x2eb8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_7 = 0x2fa0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_StateResult_18 = 0x3050; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_10 = 0x3080; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotateRootBone_11 = 0x3210; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_TransitionResult_18 = 0x32b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_17 = 0x32d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_22 = 0x3300; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_17 = 0x3378; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByGameplayTag_3 = 0x33a8; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_SequencePlayer_21 = 0x3470; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_20 = 0x34e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_19 = 0x3560; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_18 = 0x35d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_17 = 0x3650; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_16 = 0x36c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_15 = 0x3740; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_16 = 0x37b8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_6 = 0x37e8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_15 = 0x3898; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_5 = 0x38c8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_14 = 0x3978; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_16 = 0x39a8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_15 = 0x39d0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_14 = 0x39f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_13 = 0x3a20; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_12 = 0x3a48; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_11 = 0x3a70; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendListByEnum_6 = 0x3a98; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_9 = 0x3b48; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_8 = 0x3cd8; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_10 = 0x3d60; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_8 = 0x3e00; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_7 = 0x3f90; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_9 = 0x4018; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_7 = 0x40b8; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_6 = 0x4248; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_8 = 0x42d0; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_6 = 0x4370; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_5 = 0x4500; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_7 = 0x4588; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_StateResult_13 = 0x4628; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_5 = 0x4658; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_4 = 0x47e8; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_4 = 0x4870; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_3 = 0x4a00; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_3 = 0x4a88; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching_2 = 0x4c18; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_2 = 0x4ca0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_DistanceMatching = 0x4e30; // FAnimNode_DistanceMatching
		constexpr auto AnimGraphNode_RotateRootBone_6 = 0x4eb8; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotateRootBone_5 = 0x4f58; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_RotateRootBone_4 = 0x4ff8; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_BlendListByEnum_5 = 0x5098; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_RotateRootBone_3 = 0x5148; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_StateResult_12 = 0x51e8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_OrientationWarping_16 = 0x5218; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_15 = 0x5288; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_14 = 0x52f8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_13 = 0x5368; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_12 = 0x53d8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_11 = 0x5448; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_10 = 0x54b8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_9 = 0x5528; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_8 = 0x5598; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_7 = 0x5608; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_6 = 0x5678; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_5 = 0x56e8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_4 = 0x5758; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_3 = 0x57c8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_2 = 0x5838; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping = 0x58a8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_BlendListByGameplayTag_2 = 0x5918; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_BlendSpacePlayer_16 = 0x59e0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_15 = 0x5ac8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_14 = 0x5bb0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_13 = 0x5c98; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_4 = 0x5d80; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_12 = 0x5e30; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_11 = 0x5f18; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_10 = 0x6000; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_9 = 0x60e8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_3 = 0x61d0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_8 = 0x6280; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_7 = 0x6368; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_6 = 0x6450; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_5 = 0x6538; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_2 = 0x6620; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_4 = 0x66d0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_3 = 0x67b8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_2 = 0x68a0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer = 0x6988; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum = 0x6a70; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_StateResult_11 = 0x6b20; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace = 0x6b50; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotateRootBone_2 = 0x6ce0; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_TransitionResult_10 = 0x6d80; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_9 = 0x6da8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_14 = 0x6dd0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_10 = 0x6e48; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_13 = 0x6e78; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByGameplayTag = 0x6ef0; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_SequencePlayer_12 = 0x6fb8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_11 = 0x7030; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_10 = 0x70a8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_9 = 0x7120; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_8 = 0x7198; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_7 = 0x7210; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_9 = 0x7288; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_4 = 0x72b8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_8 = 0x7368; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_3 = 0x7398; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_7 = 0x7448; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_2 = 0x7478; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_SaveCachedPose = 0x7528; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TransitionResult_8 = 0x75e0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0x7608; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0x7630; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x7658; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x7680; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x76a8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x76d0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0x76f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x7720; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_6 = 0x7798; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_RotateRootBone = 0x77c8; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_ComponentToLocalSpace_2 = 0x7868; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_LocalToComponentSpace_2 = 0x7888; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ModifyBone = 0x78a8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_BlendListByBool = 0x79b0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x7a50; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x7ac8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_5 = 0x7b40; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x7b70; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0x7be8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x7c18; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x7c40; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive = 0x7cb8; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_3 = 0x7d80; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer = 0x7db0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_2 = 0x7e28; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose = 0x7e58; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult = 0x7e80; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x7eb0; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x7f60; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0x7f80; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_CopyBone_2 = 0x7fa0; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_CopyBone = 0x8090; // FAnimNode_CopyBone
		constexpr auto TurnInPlaceState = 0x8180; // FLocoTurnInPlace
		constexpr auto LocoPredictState = 0x8230; // FLocomotionPrediction
		constexpr auto ForwardDirection = 0x8298; // FAnimDirectionRange
		constexpr auto RightDirection = 0x82b4; // FAnimDirectionRange
		constexpr auto LeftDirection = 0x82d0; // FAnimDirectionRange
		constexpr auto BackwardDirection = 0x82ec; // FAnimDirectionRange
		constexpr auto LocomotionData = 0x8308; // FAnimLocomotionData
		constexpr auto AnimationState = 0x8348; // FGobiAnimationState
		constexpr auto AnimState3P = 0x83a0; // FAnimState3P
		constexpr auto LocoPredict = 0x83a8; // FLocomotionPrediction
		constexpr auto Leaning = 0x8410; // FLocoLeaning
		constexpr auto LocoBlendTime = 0x841c; // float
		constexpr auto LocoSpeedsBlendTime = 0x8420; // float
		constexpr auto ClimbWallOffset = 0x8424; // float
		constexpr auto AttackAimAlpha = 0x8428; // float
		constexpr auto LocoCounterYaw = 0x842c; // float
	}

	namespace n_UChildActorComponent {
		constexpr auto ChildActorClass = 0x230; // AActor*
		constexpr auto ChildActor = 0x238; // AActor*
		constexpr auto ChildActorTemplate = 0x240; // AActor*
	}

	namespace n_UCharacterDialogueComponent {
		constexpr auto OwnerCharacter = 0x228; // TWeakObjectPtr<AGobiCharacter>
		constexpr auto DialogueDisabledTags = 0x238; // FGameplayTagContainer
	}

	namespace n_AItemPickup_BP_C {
		constexpr auto UberGraphFrame = 0x4f8; // FPointerToUberGraphFrame
		constexpr auto GameplayTags = 0x500; // UGameplayTagsComponent*
		constexpr auto GlintLocation = 0x508; // UBillboardComponent*
		constexpr auto ItemAudio = 0x510; // UItemAudioComponent*
		constexpr auto Pingable = 0x518; // UPingableComponent*
		constexpr auto OnPickedUp = 0x520; // FMulticastInlineDelegate
		constexpr auto ItemGlintParticle = 0x530; // UParticleSystemComponent*
		constexpr auto bAutoPositionObservable = 0x538; // bool
	}

	namespace n_UIntSerialization {
		constexpr auto UnsignedInt16Variable = 0x30; // uint16_t
		constexpr auto UnsignedInt32Variable = 0x34; // uint32_t
		constexpr auto UnsignedInt64Variable = 0x38; // uint64_t
		constexpr auto SignedInt8Variable = 0x40; // int8_t
		constexpr auto SignedInt16Variable = 0x42; // int16_t
		constexpr auto SignedInt64Variable = 0x48; // int64_t
		constexpr auto UnsignedInt8Variable = 0x50; // char
		constexpr auto SignedInt32Variable = 0x54; // int32_t
	}

	namespace n_UVideoCaptureProtocol {
		constexpr auto bUseCompression = 0x70; // bool
		constexpr auto CompressionQuality = 0x74; // float
	}

	namespace n_UAnimContext_Angle {
		constexpr auto AngleFrom = 0x60; // UAnimContext_Transform*
		constexpr auto InvertAngleFrom = 0x68; // bool
		constexpr auto AngleTo = 0x70; // UAnimContext_Transform*
		constexpr auto InvertAngleTo = 0x78; // bool
	}

	namespace n_USteeringBehavior_MeleeCircle {
		constexpr auto AttackDistance = 0x58; // float
		constexpr auto SlowdownDistance = 0x5c; // float
		constexpr auto EnemyFrontConeDeg = 0x60; // float
		constexpr auto StrafeSpeed = 0x64; // float
	}

	namespace n_UParticleModuleVelocity {
		constexpr auto StartVelocity = 0x40; // FRawDistributionVector
		constexpr auto StartVelocityRadial = 0x88; // FRawDistributionFloat
	}

	namespace n_UNiagaraSettings {
		constexpr auto AdditionalParameterTypes = 0x40; // TArray<FSoftObjectPath>
		constexpr auto AdditionalPayloadTypes = 0x50; // TArray<FSoftObjectPath>
		constexpr auto AdditionalParameterEnums = 0x60; // TArray<FSoftObjectPath>
		constexpr auto DefaultEffectType = 0x70; // FSoftObjectPath
		constexpr auto QualityLevels = 0x88; // TArray<FText>
		constexpr auto DefaultEffectTypePtr = 0x98; // UNiagaraEffectType*
	}

	namespace n_UCameraViewModifierComponent {
		constexpr auto CameraModifierClass = 0x100; // UCameraModifier_InterpolateFOV*
	}

	namespace n_UGameplayEffectPathMoveScale {
		constexpr auto Tag = 0x238; // FGameplayTag
	}

	namespace n_UAsyncActionLoadPrimaryAssetClass {
		constexpr auto Completed = 0x80; // FMulticastInlineDelegate
	}

	namespace n_AMolotovProjectile {
		constexpr auto MaxExplodeAngleDegrees = 0x660; // float
		constexpr auto MaximumBounces = 0x664; // int32_t
		constexpr auto AcceptableCharacterImpactZOffset = 0x668; // float
		constexpr auto AboveImpactZOffsetEffects = 0x670; // TArray<UGameplayEffect*>
		constexpr auto CharacterTagQueryToAllowAOE = 0x680; // FGameplayTagQuery
		constexpr auto AOEGameplayEffects = 0x6c8; // FGameplayEffectsEmitterTestConfig
		constexpr auto InitialFlameToSpawn = 0x718; // AActor*
		constexpr auto BounceAudioEvent = 0x720; // UAkAudioEvent*
		constexpr auto NumberOfBouncesAccrued = 0x72c; // int32_t
	}

	namespace n_UMissionOverviewScreen {
		constexpr auto FallbackImage = 0x558; // TSoftObjectPtr<UTexture2D>
		constexpr auto TipTable = 0x580; // UDataTable*
	}

	namespace n_UParticleSpawnDef {
		constexpr auto Params = 0x38; // TArray<FGobiParticleParam>
		constexpr auto EmitterSets = 0x48; // TArray<FImpactEmitterSet>
		constexpr auto SourceItemEmitterSets = 0x58; // TArray<FImpactSourceEmitterSet>
	}

	namespace n_UAIDataProvider_BehaviorParams {
		constexpr auto ParamName = 0x30; // FName
		constexpr auto FloatValue = 0x38; // float
		constexpr auto IntValue = 0x3c; // int32_t
		constexpr auto BoolValue = 0x40; // bool
		constexpr auto TagsValue = 0x48; // FGameplayTagContainer
		constexpr auto TagQueryValue = 0x68; // FGameplayTagQuery
		constexpr auto TraceDataValue = 0xb0; // FAITraceData
		constexpr auto UObjectValue = 0xc8; // UObject*
	}

	namespace n_UServerStatusComponent {
		constexpr auto ServerStatus = 0xe8; // FServerStatus
	}

	namespace n_UMaterialExpressionDecalMipmapLevel {
		constexpr auto TextureSize = 0x48; // FExpressionInput
		constexpr auto ConstWidth = 0x5c; // float
		constexpr auto ConstHeight = 0x60; // float
	}

	namespace n_UInAppPurchaseCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UDedicatedServerManager {
		constexpr auto NoMatchmakingTimingOutDelay = 0xf0; // double
		constexpr auto FortDediAPI = 0xf8; // UWebServiceFortDediAPI*
		constexpr auto GobiWebServices = 0x100; // UGobiWebServices*
		constexpr auto MatchmakingPoolManager = 0x108; // UMatchmakingPoolManager*
		constexpr auto TimerConfigs = 0x150; // TArray<FTaskTimerConfig>
		constexpr auto WaitForConnectionsTime = 0x948; // double
		constexpr auto UnloadDelay = 0x950; // double
		constexpr auto WaitForPendingSessionParticipantsDuration = 0xa28; // double
		constexpr auto RequestedShutdownEmptyServerTimeout = 0xa38; // double
	}

	namespace n_UParticleModuleSubUV {
		constexpr auto Animation = 0x38; // USubUVAnimation*
		constexpr auto SubImageIndex = 0x40; // FRawDistributionFloat
		constexpr auto bUseRealTime = 0x70; // char : 1
	}

	namespace n_UButton {
		constexpr auto Style = 0x160; // USlateWidgetStyleAsset*
		constexpr auto WidgetStyle = 0x168; // FButtonStyle
		constexpr auto ColorAndOpacity = 0x400; // FSlateColor
		constexpr auto BackgroundColor = 0x430; // FSlateColor
		constexpr auto ClickMethod = 0x460; // EButtonClickMethod
		constexpr auto TouchMethod = 0x461; // EButtonTouchMethod
		constexpr auto PressMethod = 0x462; // EButtonPressMethod
		constexpr auto IsFocusable = 0x463; // bool
		constexpr auto bIsFocusedOnHover = 0x464; // bool
		constexpr auto OnClicked = 0x468; // FMulticastInlineDelegate
		constexpr auto OnPressed = 0x478; // FMulticastInlineDelegate
		constexpr auto OnReleased = 0x488; // FMulticastInlineDelegate
		constexpr auto OnHovered = 0x498; // FMulticastInlineDelegate
		constexpr auto OnUnhovered = 0x4a8; // FMulticastInlineDelegate
	}

	namespace n_UAkAuxBus {
		constexpr auto RequiredBank = 0x30; // UAkAudioBank*
	}

	namespace n_UGameplayContext_ActorComponent {
		constexpr auto ComponentTag = 0x58; // FGameplayTag
		constexpr auto bIncludeParentTags = 0x60; // bool
	}

	namespace n_UWaypointDataSet {
		constexpr auto SurvivorPingCreatedSound = 0x38; // UAkAudioEvent*
		constexpr auto ZombiePingCreatedSound = 0x40; // UAkAudioEvent*
		constexpr auto PingIcons = 0x48; // TMap<EPingType, UTexture2D*>
		constexpr auto WideItemPingBackground = 0x98; // UTexture2D*
		constexpr auto WideItemPingBorder = 0xa0; // UTexture2D*
		constexpr auto SquareItemPingBackground = 0xa8; // UTexture2D*
		constexpr auto SquareItemPingBorder = 0xb0; // UTexture2D*
	}

	namespace n_UJukeboxMusicComponent {
		constexpr auto bAutoLoadNextSong = 0xe8; // bool
		constexpr auto Playlist = 0xf0; // UJukeboxMusicPlaylist*
		constexpr auto AKEStartTrack = 0xf8; // UAkAudioEvent*
		constexpr auto AKEStopTrack = 0x100; // UAkAudioEvent*
		constexpr auto MusicScenarioName = 0x108; // FName
		constexpr auto bInvokeMusicState = 0x110; // bool
		constexpr auto OnNewTrackSelected = 0x118; // FMulticastInlineDelegate
		constexpr auto TimescaleRampTimeMs = 0x128; // int32_t
		constexpr auto AkComponent = 0x12c; // TWeakObjectPtr<UAkComponent>
		constexpr auto TrackNumber = 0x134; // int32_t
		constexpr auto State = 0x138; // EJukeboxMusicState
		constexpr auto CurrentTrackStartTimeStamp = 0x13c; // int32_t
	}

	namespace n_UMaterialExpressionArctangent {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UBTTask_GameplayTaskBase {
		constexpr auto bWaitForGameplayTask = 0x78; // char : 1
	}

	namespace n_UAudioCurveSourceComponent {
		constexpr auto CurveSourceBindingName = 0x828; // FName
		constexpr auto CurveSyncOffset = 0x830; // float
	}

	namespace n_UMovieSceneCameraAnimTrack {
		constexpr auto CameraAnimSections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UClothLODDataCommon_Legacy {
		constexpr auto PhysicalMeshData = 0x30; // UClothPhysicalMeshDataBase_Legacy*
		constexpr auto ClothPhysicalMeshData = 0x38; // FClothPhysicalMeshData
		constexpr auto CollisionData = 0x130; // FClothCollisionData
	}

	namespace n_AGameStateBase {
		constexpr auto GameModeClass = 0x2a0; // AGameModeBase*
		constexpr auto AuthorityGameMode = 0x2a8; // AGameModeBase*
		constexpr auto SpectatorClass = 0x2b0; // ASpectatorPawn*
		constexpr auto PlayerArray = 0x2b8; // TArray<APlayerState*>
		constexpr auto bReplicatedHasBegunPlay = 0x2c8; // bool
		constexpr auto ReplicatedWorldTimeSeconds = 0x2cc; // float
		constexpr auto ServerWorldTimeSecondsDelta = 0x2d0; // float
		constexpr auto ServerWorldTimeSecondsUpdateFrequency = 0x2d4; // float
	}

	namespace n_UMaterialExpressionTransform {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto TransformSourceType = 0x5c; // EMaterialVectorCoordTransformSource
		constexpr auto TransformType = 0x5d; // EMaterialVectorCoordTransform
	}

	namespace n_ULightMapVirtualTexture2D {
		constexpr auto TypeToLayer = 0xf0; // TArray<int8_t>
	}

	namespace n_UGameplayAction_BotMantleTraversal {
		constexpr auto FilterSet = 0x210; // UGameplayEvaluatorSet*
		constexpr auto bDisabled = 0x218; // bool
		constexpr auto DesiredDestContext = 0x220; // UAnimContext_Transform*
		constexpr auto ArriveExtent = 0x228; // FVector
	}

	namespace n_USubmixEffectFilterPreset {
		constexpr auto Settings = 0x7c; // FSubmixEffectFilterSettings
	}

	namespace n_UEnvQueryGenerator_SingleActor {
		constexpr auto ActorContext = 0x58; // UEnvQueryContext*
	}

	namespace n_UParticleModuleMeshRotationRate_Seeded {
		constexpr auto RandomSeedInfo = 0x80; // FParticleRandomSeedInfo
	}

	namespace n_UPhysicalAnimationComponent {
		constexpr auto StrengthMultiplyer = 0xe8; // float
		constexpr auto SkeletalMeshComponent = 0xf0; // USkeletalMeshComponent*
	}

	namespace n_UAttachmentMeshConfigurations {
		constexpr auto MeshConfigurations = 0x38; // TArray<FWeaponAttachmentMeshConfig>
	}

	namespace n_UAIAsyncTaskBlueprintProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFail = 0x40; // FMulticastInlineDelegate
	}

	namespace n_USourceEffectPannerPreset {
		constexpr auto Settings = 0x78; // FSourceEffectPannerSettings
	}

	namespace n_UStreamMediaSource {
		constexpr auto StreamUrl = 0x90; // FString
	}

	namespace n_ALMG02_BP_C {
		constexpr auto ADS = 0x520; // UADSComponent*
		constexpr auto FireModeSingleTrace = 0x528; // UFireModeSingleTraceComponent*
		constexpr auto BulletPenetration = 0x530; // UBulletPenetrationComponent*
		constexpr auto ClipAmmo = 0x538; // UClipAmmoComponent*
		constexpr auto Recoil = 0x540; // URecoilComponent*
		constexpr auto ClipReload = 0x548; // UClipReloadComponent*
		constexpr auto Spread = 0x550; // USpreadComponent*
		constexpr auto ItemAnimationData = 0x558; // UItemAnimationDataComponent*
	}

	namespace n_ULandscapeInfo {
		constexpr auto LandscapeActor = 0x30; // LazyObjectProperty
		constexpr auto LandscapeGuid = 0x4c; // FGuid
		constexpr auto ComponentSizeQuads = 0x5c; // int32_t
		constexpr auto SubsectionSizeQuads = 0x60; // int32_t
		constexpr auto ComponentNumSubsections = 0x64; // int32_t
		constexpr auto DrawScale = 0x68; // FVector
		constexpr auto XYtoComponentMap = 0x78; // TMap<FIntPoint, ULandscapeComponent*>
		constexpr auto Proxies = 0x118; // TArray<ALandscapeStreamingProxy*>
	}

	namespace n_USceneComponent {
		constexpr auto PhysicsVolume = 0xf0; // TWeakObjectPtr<APhysicsVolume>
		constexpr auto AttachParent = 0xf8; // USceneComponent*
		constexpr auto AttachSocketName = 0x100; // FName
		constexpr auto AttachChildren = 0x108; // TArray<USceneComponent*>
		constexpr auto ClientAttachedChildren = 0x118; // TArray<USceneComponent*>
		constexpr auto RelativeLocation = 0x154; // FVector
		constexpr auto RelativeRotation = 0x160; // FRotator
		constexpr auto RelativeScale3D = 0x16c; // FVector
		constexpr auto ComponentVelocity = 0x178; // FVector
		constexpr auto bComponentToWorldUpdated = 0x184; // char : 1
		constexpr auto bAbsoluteLocation = 0x184; // char : 1
		constexpr auto bAbsoluteRotation = 0x184; // char : 1
		constexpr auto bAbsoluteScale = 0x184; // char : 1
		constexpr auto bVisible = 0x184; // char : 1
		constexpr auto bShouldBeAttached = 0x184; // char : 1
		constexpr auto bShouldSnapLocationWhenAttached = 0x184; // char : 1
		constexpr auto bShouldSnapRotationWhenAttached = 0x185; // char : 1
		constexpr auto bShouldUpdatePhysicsVolume = 0x185; // char : 1
		constexpr auto bHiddenInGame = 0x185; // char : 1
		constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0x185; // char : 1
		constexpr auto bUseAttachParentBound = 0x185; // char : 1
		constexpr auto Mobility = 0x187; // EComponentMobility
		constexpr auto bAssetDecidesDetailMode = 0x188; // char : 1
		constexpr auto ComponentDetailMode = 0x189; // EDetailMode
		constexpr auto PhysicsVolumeChangedDelegate = 0x18a; // FMulticastSparseDelegate
	}

	namespace n_UTitanTentacleComponent {
		constexpr auto State = 0xe8; // ETitanTentacleState
		constexpr auto TargetActor = 0x160; // AActor*
		constexpr auto AttackAngle = 0x168; // float
		constexpr auto ID = 0x16c; // ETitanTentacleId
		constexpr auto AttackVolumeTag = 0x170; // FGameplayTag
		constexpr auto SmashGameplayEffects = 0x178; // TArray<UGameplayEffect*>
		constexpr auto SwipeGameplayEffects = 0x188; // TArray<UGameplayEffect*>
	}

	namespace n_AIntervalGizmoActor {
		constexpr auto UpIntervalComponent = 0x2a0; // UGizmoLineHandleComponent*
		constexpr auto DownIntervalComponent = 0x2a8; // UGizmoLineHandleComponent*
		constexpr auto ForwardIntervalComponent = 0x2b0; // UGizmoLineHandleComponent*
	}

	namespace n_UTutorialPopupUserWidget {
		constexpr auto ButtonDelayTime = 0x478; // float
	}

	namespace n_UActorSequenceComponent {
		constexpr auto PlaybackSettings = 0xe8; // FMovieSceneSequencePlaybackSettings
		constexpr auto Sequence = 0x100; // UActorSequence*
		constexpr auto SequencePlayer = 0x108; // UActorSequencePlayer*
	}

	namespace n_UGizmoWorldAxisSource {
		constexpr auto Origin = 0x38; // FVector
		constexpr auto AxisIndex = 0x44; // int32_t
	}

	namespace n_UEnvQueryTest_GoldenPathDistance {
		constexpr auto Mode = 0x208; // EGoldenPathDistanceMode
	}

	namespace n_UDistributionVectorUniformCurve {
		constexpr auto ConstantCurve = 0x40; // FInterpCurveTwoVectors
		constexpr auto bLockAxes1 = 0x58; // char : 1
		constexpr auto bLockAxes2 = 0x58; // char : 1
		constexpr auto LockedAxes = 0x5c; // EDistributionVectorLockFlags [0x2]
		constexpr auto MirrorFlags = 0x5e; // EDistributionVectorMirrorFlags [0x3]
		constexpr auto bUseExtremes = 0x64; // char : 1
	}

	namespace n_UAnimEvalSet_Shared_Traversal_2D_C {
		constexpr auto Distance2D NavLinkStartToEnd = 0xc0; // FGameplayEval_Distance
		constexpr auto NavArea = 0x190; // FGameplayEval_NavArea
		constexpr auto RandomChance = 0x200; // FGameplayEval_RandomChance
		constexpr auto DistanceToNavLinkStart = 0x250; // FGameplayEval_Distance
	}

	namespace n_ATitan_AcidBloodPool_BP_C {
		constexpr auto UberGraphFrame = 0x338; // FPointerToUberGraphFrame
		constexpr auto Box = 0x340; // UBoxComponent*
		constexpr auto GameplayEffectEmitter = 0x348; // UGameplayEffectEmitterComponent*
	}

	namespace n_UParticleModuleAttractorPointGravity {
		constexpr auto Position = 0x38; // FVector
		constexpr auto Radius = 0x44; // float
		constexpr auto Strength = 0x48; // UDistributionFloat*
		constexpr auto StrengthRaw = 0x50; // FRawDistributionFloat
	}

	namespace n_ULeapMovementModeComponent {
		constexpr auto MaxLeapDuration = 0x130; // float
		constexpr auto LeapSlideableDuration = 0x134; // float
		constexpr auto MinLeapImpactDotToStepUp = 0x138; // float
		constexpr auto MinLeapImpactDotToSlide = 0x13c; // float
		constexpr auto bAttemptToStepUpOnBlockingHit = 0x140; // bool
	}

	namespace n_UGameplayMod {
		constexpr auto bApplyOnlyToOwner = 0x30; // bool
		constexpr auto ApplyTagQuery = 0x38; // FGameplayTagQuery
		constexpr auto FirstApplicationTagQuery = 0x80; // FGameplayTagQuery
		constexpr auto bInstanced = 0xc8; // bool
		constexpr auto bApplyOnClients = 0xc9; // bool
		constexpr auto bApplyToSingleplayerOnly = 0xca; // bool
		constexpr auto SupportedPhases = 0xcc; // int32_t
	}

	namespace n_UMaterialExpressionSubtract {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto ConstA = 0x70; // float
		constexpr auto ConstB = 0x74; // float
	}

	namespace n_USpectatorBeaconState {
		constexpr auto SessionName = 0x30; // FName
		constexpr auto NumConsumedReservations = 0x38; // int32_t
		constexpr auto MaxReservations = 0x3c; // int32_t
		constexpr auto bRestrictCrossConsole = 0x40; // bool
		constexpr auto Reservations = 0x48; // TArray<FSpectatorReservation>
	}

	namespace n_USoundCollectionAsset {
		constexpr auto UserDefinedEnum = 0x38; // UEnum*
		constexpr auto SoundCollectionMode = 0x40; // ESharedSoundCollectionMode
		constexpr auto Sounds = 0x48; // TMap<FName, FSharedSoundBehavior>
	}

	namespace n_UMovieSceneParticleSection {
		constexpr auto ParticleKeys = 0xe8; // FMovieSceneParticleChannel
	}

	namespace n_ULevelSequenceBurnIn {
		constexpr auto FrameInformation = 0x2d8; // FLevelSequencePlayerSnapshot
		constexpr auto LevelSequenceActor = 0x390; // ALevelSequenceActor*
	}

	namespace n_UAnimNotify_MotionCorrectionGoal {
		constexpr auto bDrawDebug = 0x40; // bool
		constexpr auto CorrectionGoal = 0x48; // FMotionCorrectionGoal
	}

	namespace n_ALevelStreamingVolume {
		constexpr auto StreamingLevelNames = 0x2d8; // TArray<FName>
		constexpr auto bEditorPreVisOnly = 0x2e8; // char : 1
		constexpr auto bDisabled = 0x2e8; // char : 1
		constexpr auto StreamingUsage = 0x2ec; // EStreamingVolumeUsage
	}

	namespace n_UVirtualTexturePoolConfig {
		constexpr auto DefaultSizeInMegabyte = 0x30; // int32_t
		constexpr auto Pools = 0x38; // TArray<FVirtualTextureSpacePoolConfig>
	}

	namespace n_UMaterial {
		constexpr auto PhysMaterial = 0x90; // UPhysicalMaterial*
		constexpr auto PhysMaterialMask = 0x98; // UPhysicalMaterialMask*
		constexpr auto PhysicalMaterialMap = 0xa0; // UPhysicalMaterial* [0x8]
		constexpr auto Metallic = 0xe0; // FScalarMaterialInput
		constexpr auto Specular = 0xf4; // FScalarMaterialInput
		constexpr auto Anisotropy = 0x108; // FScalarMaterialInput
		constexpr auto Normal = 0x11c; // FVectorMaterialInput
		constexpr auto Tangent = 0x130; // FVectorMaterialInput
		constexpr auto EmissiveColor = 0x144; // FColorMaterialInput
		constexpr auto MaterialDomain = 0x158; // EMaterialDomain
		constexpr auto BlendMode = 0x159; // EBlendMode
		constexpr auto DecalBlendMode = 0x15a; // EDecalBlendMode
		constexpr auto MaterialDecalResponse = 0x15b; // EMaterialDecalResponse
		constexpr auto ShadingModel = 0x15c; // EMaterialShadingModel
		constexpr auto bCastDynamicShadowAsMasked = 0x15d; // char : 1
		constexpr auto ShadingModels = 0x15e; // FMaterialShadingModelField
		constexpr auto OpacityMaskClipValue = 0x160; // float
		constexpr auto WorldPositionOffset = 0x164; // FVectorMaterialInput
		constexpr auto Refraction = 0x178; // FScalarMaterialInput
		constexpr auto MaterialAttributes = 0x18c; // FMaterialAttributesInput
		constexpr auto PixelDepthOffset = 0x1a4; // FScalarMaterialInput
		constexpr auto ShadingModelFromMaterialExpression = 0x1b8; // FShadingModelMaterialInput
		constexpr auto bEnableSeparateTranslucency = 0x1cc; // char : 1
		constexpr auto bEnableResponsiveAA = 0x1cc; // char : 1
		constexpr auto bScreenSpaceReflections = 0x1cc; // char : 1
		constexpr auto bContactShadows = 0x1cc; // char : 1
		constexpr auto TwoSided = 0x1cc; // char : 1
		constexpr auto DitheredLODTransition = 0x1cc; // char : 1
		constexpr auto DitherOpacityMask = 0x1cc; // char : 1
		constexpr auto bAllowNegativeEmissiveColor = 0x1cc; // char : 1
		constexpr auto TranslucencyLightingMode = 0x1cd; // ETranslucencyLightingMode
		constexpr auto bEnableMobileSeparateTranslucency = 0x1ce; // char : 1
		constexpr auto NumCustomizedUVs = 0x1d0; // int32_t
		constexpr auto TranslucencyDirectionalLightingIntensity = 0x1d4; // float
		constexpr auto TranslucentCustomDepthWritesEveryPixel = 0x1d8; // char : 1
		constexpr auto TranslucentShadowDensityScale = 0x1dc; // float
		constexpr auto TranslucentSelfShadowDensityScale = 0x1e0; // float
		constexpr auto TranslucentSelfShadowSecondDensityScale = 0x1e4; // float
		constexpr auto TranslucentSelfShadowSecondOpacity = 0x1e8; // float
		constexpr auto TranslucentBackscatteringExponent = 0x1ec; // float
		constexpr auto TranslucentMultipleScatteringExtinction = 0x1f0; // FLinearColor
		constexpr auto TranslucentShadowStartOffset = 0x200; // float
		constexpr auto bDisableDepthTest = 0x204; // char : 1
		constexpr auto bWriteOnlyAlpha = 0x204; // char : 1
		constexpr auto bGenerateSphericalParticleNormals = 0x204; // char : 1
		constexpr auto bTangentSpaceNormal = 0x204; // char : 1
		constexpr auto bUseEmissiveForDynamicAreaLighting = 0x204; // char : 1
		constexpr auto bBlockGI = 0x204; // char : 1
		constexpr auto bUsedAsSpecialEngineMaterial = 0x204; // char : 1
		constexpr auto bUsedWithSkeletalMesh = 0x204; // char : 1
		constexpr auto bUsedWithEditorCompositing = 0x205; // char : 1
		constexpr auto bUsedWithParticleSprites = 0x205; // char : 1
		constexpr auto bUsedWithBeamTrails = 0x205; // char : 1
		constexpr auto bUsedWithMeshParticles = 0x205; // char : 1
		constexpr auto bUsedWithNiagaraSprites = 0x205; // char : 1
		constexpr auto bUsedWithNiagaraRibbons = 0x205; // char : 1
		constexpr auto bUsedWithNiagaraMeshParticles = 0x205; // char : 1
		constexpr auto bUsedWithGeometryCache = 0x205; // char : 1
		constexpr auto bUsedWithStaticLighting = 0x206; // char : 1
		constexpr auto bUsedWithMorphTargets = 0x206; // char : 1
		constexpr auto bUsedWithSplineMeshes = 0x206; // char : 1
		constexpr auto bUsedWithInstancedStaticMeshes = 0x206; // char : 1
		constexpr auto bUsedWithGeometryCollections = 0x206; // char : 1
		constexpr auto bUsesDistortion = 0x206; // char : 1
		constexpr auto bUsedWithClothing = 0x206; // char : 1
		constexpr auto bUsedWithWater = 0x208; // char : 1
		constexpr auto bUsedWithHairStrands = 0x208; // char : 1
		constexpr auto bUsedWithLidarPointCloud = 0x208; // char : 1
		constexpr auto bUsedWithUI = 0x20c; // char : 1
		constexpr auto bAutomaticallySetUsageInEditor = 0x20c; // char : 1
		constexpr auto bFullyRough = 0x20c; // char : 1
		constexpr auto bUseFullPrecision = 0x20c; // char : 1
		constexpr auto bUseLightmapDirectionality = 0x20c; // char : 1
		constexpr auto bForwardRenderUsePreintegratedGFForSimpleIBL = 0x210; // char : 1
		constexpr auto bUseHQForwardReflections = 0x214; // char : 1
		constexpr auto bUsePlanarForwardReflections = 0x214; // char : 1
		constexpr auto bNormalCurvatureToRoughness = 0x214; // char : 1
		constexpr auto D3D11TessellationMode = 0x215; // EMaterialTessellationMode
		constexpr auto bEnableCrackFreeDisplacement = 0x216; // char : 1
		constexpr auto bEnableAdaptiveTessellation = 0x216; // char : 1
		constexpr auto AllowTranslucentCustomDepthWrites = 0x216; // char : 1
		constexpr auto Wireframe = 0x216; // char : 1
		constexpr auto ShadingRate = 0x217; // EMaterialShadingRate
		constexpr auto bCanMaskedBeAssumedOpaque = 0x218; // char : 1
		constexpr auto bIsMasked = 0x218; // char : 1
		constexpr auto bIsPreviewMaterial = 0x218; // char : 1
		constexpr auto bIsFunctionPreviewMaterial = 0x218; // char : 1
		constexpr auto bUseMaterialAttributes = 0x218; // char : 1
		constexpr auto bCastRayTracedShadows = 0x218; // char : 1
		constexpr auto bUseTranslucencyVertexFog = 0x218; // char : 1
		constexpr auto bIsSky = 0x218; // char : 1
		constexpr auto bComputeFogPerPixel = 0x219; // char : 1
		constexpr auto bOutputTranslucentVelocity = 0x219; // char : 1
		constexpr auto bAllowDevelopmentShaderCompile = 0x219; // char : 1
		constexpr auto bIsMaterialEditorStatsMaterial = 0x219; // char : 1
		constexpr auto BlendableLocation = 0x21a; // EBlendableLocation
		constexpr auto BlendableOutputAlpha = 0x21b; // char : 1
		constexpr auto bEnableStencilTest = 0x21b; // char : 1
		constexpr auto StencilCompare = 0x21c; // EMaterialStencilCompare
		constexpr auto StencilRefValue = 0x21d; // char
		constexpr auto RefractionMode = 0x21e; // ERefractionMode
		constexpr auto BlendablePriority = 0x220; // int32_t
		constexpr auto bIsBlendable = 0x224; // char : 1
		constexpr auto UsageFlagWarnings = 0x228; // uint32_t
		constexpr auto RefractionDepthBias = 0x22c; // float
		constexpr auto StateId = 0x230; // FGuid
		constexpr auto MaxDisplacement = 0x240; // float
		constexpr auto CachedExpressionData = 0x2d0; // FMaterialCachedExpressionData
	}

	namespace n_UUserDefinedEnum {
		constexpr auto DisplayNameMap = 0x68; // TMap<FName, FText>
	}

	namespace n_UCurveVector {
		constexpr auto FloatCurves = 0x38; // FRichCurve [0x3]
	}

	namespace n_UMissionOverviewFooterUserWidget {
		constexpr auto MapChainUserWidget = 0x458; // UMissionOverviewMapChainUserWidget*
	}

	namespace n_USaferoomCurrencyMod {
		constexpr auto CurrencyGrantedPerSaferoom = 0xe0; // int32_t
		constexpr auto AdjustCurrencyCause = 0xe8; // FString
	}

	namespace n_UParticleModuleVectorFieldScale {
		constexpr auto VectorFieldScale = 0x38; // UDistributionFloat*
		constexpr auto VectorFieldScaleRaw = 0x40; // FRawDistributionFloat
	}

	namespace n_USkeletalMeshPieceTrait {
		constexpr auto MeshPieces = 0x30; // TArray<FMeshesConfig>
		constexpr auto SkelMeshMasterGameplayTag = 0x40; // FGameplayTag
		constexpr auto bStartHidden = 0x48; // bool
		constexpr auto bCastShadow = 0x49; // bool
		constexpr auto bRelativeTransform = 0x4a; // bool
		constexpr auto RelativeTransform = 0x50; // FTransform
	}

	namespace n_USourceEffectFoldbackDistortionPreset {
		constexpr auto Settings = 0x7c; // FSourceEffectFoldbackDistortionSettings
	}

	namespace n_UActorPlacementSpec {
		constexpr auto ActorClass = 0x30; // AActor*
		constexpr auto SegmentStartIndex = 0x38; // int32_t
		constexpr auto SegmentEndIndex = 0x3c; // int32_t
		constexpr auto DistanceInterval = 0x40; // float
		constexpr auto OffsetFromStart = 0x44; // float
		constexpr auto InheritSplineRotation = 0x48; // bool
		constexpr auto bInheritSplineYawRotation = 0x49; // bool
		constexpr auto OffsetMode = 0x4a; // ESplineActorOffsetMode
		constexpr auto Translation = 0x4c; // FVector
		constexpr auto Rotation = 0x58; // FRotator
		constexpr auto MinTranslation = 0x64; // FVector
		constexpr auto MaxTranslation = 0x70; // FVector
		constexpr auto MinRotation = 0x7c; // FRotator
		constexpr auto MaxRotation = 0x88; // FRotator
		constexpr auto PlacedActors = 0x98; // TArray<AActor*>
	}

	namespace n_UGameplayAction_LeapTraversal {
		constexpr auto LeapShortcutContext = 0x2e8; // UGameplayContext_LeapShortcut*
	}

	namespace n_UDirectorCardWeightsConverter {
		constexpr auto bUpdate = 0x38; // bool
	}

	namespace n_UGameplayEffectHeroUseComponent {
		constexpr auto ApplicableUsableClass = 0x240; // TSoftClassPtr<UObject>
		constexpr auto UsableTimeScaleMod = 0x268; // FGamePropertyFloatMod
		constexpr auto MaxUseCount = 0x278; // int32_t
		constexpr auto Cooldown = 0x27c; // float
	}

	namespace n_APassageSpawner {
		constexpr auto SyncedClass = 0x2a0; // UObject*
		constexpr auto PrecachedClasses = 0x2a8; // TArray<UObject*>
		constexpr auto AllowedTypes = 0x2b8; // uint32_t
		constexpr auto AllowedTypesOverride = 0x2c0; // TMap<EGameModeClassification, FAllowedTypes>
		constexpr auto bMirrored = 0x310; // bool
		constexpr auto PassageClasses = 0x318; // TSoftClassPtr<UObject> [0x4]
		constexpr auto SpecialClasses = 0x3b8; // TSoftClassPtr<UObject> [0x2]
		constexpr auto PassageClassesMirrored = 0x408; // TSoftClassPtr<UObject> [0x4]
		constexpr auto SpecialClassesMirrored = 0x4a8; // TSoftClassPtr<UObject> [0x2]
		constexpr auto AlarmMode = 0x4f8; // EAlarmMode
		constexpr auto AlarmModeOverride = 0x500; // TMap<EGameModeClassification, EAlarmMode>
		constexpr auto bCastStaticShadow = 0x550; // bool
		constexpr auto bAkAudioPortalEnabled = 0x551; // bool
		constexpr auto AlarmAudioEvents = 0x558; // TArray<FDoorAlarmAudio>
		constexpr auto SyncedPassageSpawner = 0x568; // APassageSpawner*
		constexpr auto NavLinkComponent = 0x570; // UGobiNavLinkComponent*
		constexpr auto NavModifierComponent = 0x578; // UGobiNavModifierComponent*
		constexpr auto AkAcousticPortalComponent = 0x580; // UAkAcousticPortalComponent*
		constexpr auto SpawnedPassage = 0x588; // AActor*
		constexpr auto OnPassageSpawned = 0x590; // FMulticastInlineDelegate
	}

	namespace n_UTitanTongueAnimInstance {
		constexpr auto TitanTongueComponent = 0x2c0; // UTitanTongueComponent*
		constexpr auto bIdle = 0x2c8; // bool
		constexpr auto bGrabbing = 0x2c9; // bool
		constexpr auto GrabPlayRate = 0x2cc; // float
		constexpr auto bMissing = 0x2d0; // bool
		constexpr auto MissPlayRate = 0x2d4; // float
		constexpr auto bPulling = 0x2d8; // bool
		constexpr auto PullPlayRate = 0x2dc; // float
		constexpr auto bHolding = 0x2e0; // bool
		constexpr auto bBiting = 0x2e1; // bool
		constexpr auto bReleasing = 0x2e2; // bool
		constexpr auto bEating = 0x2e3; // bool
		constexpr auto TargetDist = 0x2e4; // float
	}

	namespace n_AWaterSurfaceMesh {
		constexpr auto WaterVolume = 0x2b0; // AWaterVolume*
	}

	namespace n_UAssetExportTask {
		constexpr auto Object = 0x30; // UObject*
		constexpr auto Exporter = 0x38; // UExporter*
		constexpr auto Filename = 0x40; // FString
		constexpr auto bSelected = 0x50; // bool
		constexpr auto bReplaceIdentical = 0x51; // bool
		constexpr auto bPrompt = 0x52; // bool
		constexpr auto bAutomated = 0x53; // bool
		constexpr auto bUseFileArchive = 0x54; // bool
		constexpr auto bWriteEmptyFiles = 0x55; // bool
		constexpr auto IgnoreObjectList = 0x58; // TArray<UObject*>
		constexpr auto Options = 0x68; // UObject*
		constexpr auto Errors = 0x70; // TArray<FString>
	}

	namespace n_AGobiWorldSettings {
		constexpr auto bOnlineInventoryEnabled = 0x430; // bool
		constexpr auto bSignInInputProcessing = 0x431; // bool
		constexpr auto bMainMenu = 0x432; // bool
		constexpr auto bSharedScreen = 0x433; // bool
		constexpr auto bSupportsBots = 0x434; // bool
		constexpr auto bNeedsCommonZombieMeshMerge = 0x435; // bool
		constexpr auto Chapter = 0x438; // FDataTableRowHandle
		constexpr auto AutoStartMapMissions = 0x458; // TArray<FAutoStartMapMission>
		constexpr auto CharacterLineupLevel = 0x468; // TSoftObjectPtr<UWorld>
		constexpr auto bSectorsAndPortalsEnabled = 0x490; // bool
		constexpr auto FoliageSectorsAndPortalsMode = 0x494; // int32_t
		constexpr auto bAllowLODDistanceScaling = 0x498; // bool
		constexpr auto PoolSizeAdjustment = 0x49c; // int32_t
	}

	namespace n_UWaypointUserWidget {
		constexpr auto ADSOpacity = 0x2d8; // float
		constexpr auto ArrowOffsetFromIcon = 0x2e4; // float
	}

	namespace n_UAsyncTaskDownloadImage {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFail = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UCaravanProgressScreen {
		constexpr auto bWaitingOnRequest = 0x564; // bool
	}

	namespace n_ULayer {
		constexpr auto LayerName = 0x30; // FName
		constexpr auto bIsVisible = 0x38; // char : 1
		constexpr auto ActorStats = 0x40; // TArray<FLayerActorStats>
	}

	namespace n_UStaticCaravans {
		constexpr auto TutorialCaravan = 0x38; // FStaticCaravan
		constexpr auto CaravanChains = 0x68; // TArray<FStaticCaravanChain>
	}

	namespace n_UCardFilterUserWidget {
		constexpr auto OnFilterChanged = 0x458; // FMulticastInlineDelegate
		constexpr auto Filters = 0x468; // TArray<ECardFilter>
		constexpr auto DefaultFilter = 0x478; // ECardFilter
	}

	namespace n_UNavigationPath {
		constexpr auto PathUpdatedNotifier = 0x30; // FMulticastInlineDelegate
		constexpr auto PathPoints = 0x40; // TArray<FVector>
		constexpr auto RecalculateOnInvalidation = 0x50; // ENavigationOptionFlag
	}

	namespace n_UNiagaraPreviewAxis_InterpParamVector {
		constexpr auto Min = 0x40; // FVector
		constexpr auto Max = 0x4c; // FVector
	}

	namespace n_UAnimEvalSet_Shared_Idle_C {
		constexpr auto Random = 0xc0; // FGameplayEval_Random
		constexpr auto HasPlayedRecently = 0x108; // FAnimEval_MontageLastPlayed
	}

	namespace n_UAnimNotify_PlaySound {
		constexpr auto Sound = 0x40; // USoundBase*
		constexpr auto VolumeMultiplier = 0x48; // float
		constexpr auto PitchMultiplier = 0x4c; // float
		constexpr auto bFollow = 0x50; // char : 1
		constexpr auto AttachName = 0x54; // FName
	}

	namespace n_UNiagaraDataInterfaceVolumeTexture {
		constexpr auto Texture = 0x38; // UVolumeTexture*
	}

	namespace n_UIpNetDriver {
		constexpr auto LogPortUnreach = 0x760; // char : 1
		constexpr auto AllowPlayerPortUnreach = 0x760; // char : 1
		constexpr auto MaxPortCountToTry = 0x764; // uint32_t
		constexpr auto ServerDesiredSocketReceiveBufferBytes = 0x774; // uint32_t
		constexpr auto ServerDesiredSocketSendBufferBytes = 0x778; // uint32_t
		constexpr auto ClientDesiredSocketReceiveBufferBytes = 0x77c; // uint32_t
		constexpr auto ClientDesiredSocketSendBufferBytes = 0x780; // uint32_t
		constexpr auto MaxSecondsInReceive = 0x788; // double
		constexpr auto NbPacketsBetweenReceiveTimeTest = 0x790; // int32_t
		constexpr auto ResolutionConnectionTimeout = 0x794; // float
	}

	namespace n_UBrushComponent {
		constexpr auto Brush = 0x4b0; // UModel*
		constexpr auto BrushBodySetup = 0x4b8; // UBodySetup*
	}

	namespace n_UHapticFeedbackEffect_Buffer {
		constexpr auto Amplitudes = 0x30; // TArray<char>
		constexpr auto SampleRate = 0x40; // int32_t
	}

	namespace n_UAnimEvalSet_DefibReation_C {
		constexpr auto ReviveSource = 0xc0; // FGameplayEval_ReviveSource
	}

	namespace n_UGameplayAction_Traversal {
		constexpr auto bSortMontagesAlphabetically = 0x210; // bool
		constexpr auto TraversalMontages = 0x218; // TArray<UAnimMontage*>
		constexpr auto MontageSets = 0x228; // TArray<UMontageSet*>
		constexpr auto TraversalCollisionProfileName = 0x238; // FName
		constexpr auto ReapplyEffectsOnTraversalSuccess = 0x240; // TArray<UGameplayEffect*>
		constexpr auto TraversalFlyRequesters = 0x250; // TArray<UAnimSequenceBase*>
		constexpr auto EvalChains = 0x260; // TArray<UAnimNotifyState_EvalChainMontage*>
		constexpr auto PlayRateRange = 0x270; // FVector2D
		constexpr auto QueuedEffectsToReapply = 0x278; // TArray<FQueuedEffect>
	}

	namespace n_UBTDecorator_CanTriggerAction {
		constexpr auto ActionTagQuery = 0x70; // FGameplayTagQuery
		constexpr auto ActionTags = 0xb8; // FAIDataProviderGameplayTagQueryContainerValue
		constexpr auto bTestIsEnabledForActor = 0x130; // bool
		constexpr auto bDisableOnSuccess = 0x131; // bool
		constexpr auto FlowControlDelay = 0x134; // float
	}

	namespace n_UVariantSet {
		constexpr auto DisplayText = 0x30; // FText
		constexpr auto bExpanded = 0x60; // bool
		constexpr auto Variants = 0x68; // TArray<UVariant*>
	}

	namespace n_UHUDEquipmentEntryUserWidget {
		constexpr auto bIsLowAmmo = 0x4a8; // bool
	}

	namespace n_UItemAudioComponent {
		constexpr auto bDebug = 0xe8; // bool
		constexpr auto bStopAttractOnBeginUse = 0xe9; // bool
		constexpr auto bStopAttractOnEndUse = 0xea; // bool
		constexpr auto MinSpeedForBounceAudio = 0xec; // float
		constexpr auto MaxSpeedForRollAudio = 0xf0; // float
		constexpr auto BounceCooldown = 0xf4; // float
		constexpr auto AKESpawn = 0x100; // UAkAudioEvent*
		constexpr auto AKEAttractLoop = 0x108; // UAkAudioEvent*
		constexpr auto AKEAttractLoopStop = 0x110; // UAkAudioEvent*
		constexpr auto AKEInteractStart = 0x118; // UAkAudioEvent*
		constexpr auto AKEInteractEnd = 0x120; // UAkAudioEvent*
		constexpr auto AKEInteractSuccess = 0x128; // UAkAudioEvent*
		constexpr auto AKESpawnedFromKill = 0x130; // UAkAudioEvent*
	}

	namespace n_UMaterialExpressionShadingModel {
		constexpr auto ShadingModel = 0x48; // EMaterialShadingModel
	}

	namespace n_UGameplayAction_TriggerHorde {
		constexpr auto IsAllowedByDifficulty = 0x210; // FDifficultyBool
	}

	namespace n_UGameplayTask_WaitDelay {
		constexpr auto OnFinish = 0x70; // FMulticastInlineDelegate
	}

	namespace n_UMantleSpeedMod {
		constexpr auto MantleSpeed = 0xd0; // FCustomDataProviderFloat
	}

	namespace n_USkinnedMeshComponent {
		constexpr auto SkeletalMesh = 0x528; // USkeletalMesh*
		constexpr auto MasterPoseComponent = 0x530; // TWeakObjectPtr<USkinnedMeshComponent>
		constexpr auto SkinCacheUsage = 0x538; // TArray<ESkinCacheUsage>
		constexpr auto PhysicsAssetOverride = 0x640; // UPhysicsAsset*
		constexpr auto ForcedLodModel = 0x648; // int32_t
		constexpr auto MinLodModel = 0x64c; // int32_t
		constexpr auto IndividualLodBias = 0x650; // int32_t
		constexpr auto StreamingDistanceMultiplier = 0x65c; // float
		constexpr auto LODInfo = 0x668; // TArray<FSkelMeshComponentLODInfo>
		constexpr auto VisibilityBasedAnimTickOption = 0x69c; // EVisibilityBasedAnimTickOption
		constexpr auto bOverrideMinLod = 0x69e; // char : 1
		constexpr auto bUseBoundsFromMasterPoseComponent = 0x69e; // char : 1
		constexpr auto bForceWireframe = 0x69e; // char : 1
		constexpr auto bDisplayBones = 0x69e; // char : 1
		constexpr auto bDisableMorphTarget = 0x69e; // char : 1
		constexpr auto bHideSkin = 0x69e; // char : 1
		constexpr auto bPerBoneMotionBlur = 0x69f; // char : 1
		constexpr auto bComponentUseFixedSkelBounds = 0x69f; // char : 1
		constexpr auto bUseFixedBoundsOverrideMinMax = 0x69f; // char : 1
		constexpr auto FixedBoundsOverrideMin = 0x6a0; // FVector
		constexpr auto FixedBoundsOverrideMax = 0x6ac; // FVector
		constexpr auto bUsePhysicsAssetToCalcBounds = 0x6b8; // char : 1
		constexpr auto bConsiderAllBodiesForBounds = 0x6b8; // char : 1
		constexpr auto bSyncAttachParentLOD = 0x6b8; // char : 1
		constexpr auto bCanHighlightSelectedSections = 0x6b8; // char : 1
		constexpr auto bRecentlyRendered = 0x6b8; // char : 1
		constexpr auto bCastCapsuleDirectShadow = 0x6b8; // char : 1
		constexpr auto bCastCapsuleIndirectShadow = 0x6b8; // char : 1
		constexpr auto bCPUSkinning = 0x6b8; // char : 1
		constexpr auto bEnableUpdateRateOptimizations = 0x6b9; // char : 1
		constexpr auto bServerIgnoresUpdateRateOptimizationFrameSkip = 0x6b9; // char : 1
		constexpr auto bDisplayDebugUpdateRateOptimizations = 0x6b9; // char : 1
		constexpr auto bRenderStatic = 0x6b9; // char : 1
		constexpr auto bIgnoreMasterPoseComponentLOD = 0x6b9; // char : 1
		constexpr auto bStopTickingWhenNoLongerAnimating = 0x6ba; // bool
		constexpr auto StopTickingWhenNoLongerAnimatingTime = 0x6bc; // float
		constexpr auto bCachedLocalBoundsUpToDate = 0x6c0; // char : 1
		constexpr auto bForceMeshObjectUpdate = 0x6cc; // char : 1
		constexpr auto CapsuleIndirectShadowMinVisibility = 0x6d0; // float
		constexpr auto CachedLocalSpaceBounds = 0x6e8; // FBoxSphereBounds
	}

	namespace n_UMovieSceneFadeSection {
		constexpr auto FadeColor = 0x188; // FLinearColor
		constexpr auto bFadeAudio = 0x198; // char : 1
	}

	namespace n_UGameplayAction_BotAttackRanged {
		constexpr auto FullAutoTimeMult = 0x400; // float
	}

	namespace n_AARSkyLight {
		constexpr auto CaptureProbe = 0x2b0; // UAREnvironmentCaptureProbe*
	}

	namespace n_ADecalActor {
		constexpr auto Decal = 0x2a0; // UDecalComponent*
	}

	namespace n_UCommandlet {
		constexpr auto HelpDescription = 0x30; // FString
		constexpr auto HelpUsage = 0x40; // FString
		constexpr auto HelpWebLink = 0x50; // FString
		constexpr auto HelpParamNames = 0x60; // TArray<FString>
		constexpr auto HelpParamDescriptions = 0x70; // TArray<FString>
		constexpr auto IsServer = 0x80; // char : 1
		constexpr auto IsClient = 0x80; // char : 1
		constexpr auto IsEditor = 0x80; // char : 1
		constexpr auto LogToConsole = 0x80; // char : 1
		constexpr auto ShowErrorCount = 0x80; // char : 1
		constexpr auto ShowProgress = 0x80; // char : 1
	}

	namespace n_UParticleModuleVectorFieldRotation {
		constexpr auto MinInitialRotation = 0x38; // FVector
		constexpr auto MaxInitialRotation = 0x44; // FVector
	}

	namespace n_UBlueprintGeneratedClass {
		constexpr auto NumReplicatedProperties = 0x260; // int32_t
		constexpr auto bHasNativizedParent = 0x264; // char : 1
		constexpr auto bHasCookedComponentInstancingData = 0x264; // char : 1
		constexpr auto DynamicBindingObjects = 0x268; // TArray<UDynamicBlueprintBinding*>
		constexpr auto ComponentTemplates = 0x278; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x288; // TArray<UTimelineTemplate*>
		constexpr auto ComponentClassOverrides = 0x298; // TArray<FBPComponentClassOverride>
		constexpr auto SimpleConstructionScript = 0x2a8; // USimpleConstructionScript*
		constexpr auto InheritableComponentHandler = 0x2b0; // UInheritableComponentHandler*
		constexpr auto UberGraphFramePointerProperty = 0x2b8; // UStructProperty*
		constexpr auto UberGraphFunction = 0x2c8; // UFunction*
		constexpr auto CookedComponentInstancingData = 0x2d0; // TMap<FName, FBlueprintCookedComponentInstancingData>
	}

	namespace n_UBTDecorator_Loop {
		constexpr auto NumLoops = 0x70; // int32_t
		constexpr auto bInfiniteLoop = 0x74; // bool
		constexpr auto InfiniteLoopTimeoutTime = 0x78; // float
	}

	namespace n_UAsyncAssetSet {
		constexpr auto LoadedObjects = 0x90; // TArray<UObject*>
	}

	namespace n_UGobiSlider {
		constexpr auto DefaultClickSound = 0x5b0; // UAkAudioEvent*
	}

	namespace n_UAISpawnActorVariantsConfig {
		constexpr auto Variants = 0x38; // TArray<FAISpawnActorVariantDefinition>
	}

	namespace n_UGameplayAction_ReachIn {
		constexpr auto DistanceToActivate = 0x210; // float
		constexpr auto DistanceToPlayReachIn = 0x214; // float
		constexpr auto LoopTime = 0x218; // float
		constexpr auto ThrowSpeed = 0x21c; // float
		constexpr auto SkeletalMeshTag = 0x220; // FGameplayTag
		constexpr auto ReachInSmartActorContext = 0x228; // UAnimContext_ReachInSmartActor*
		constexpr auto SmartActorSteeringBehavior = 0x230; // USteeringBehavior*
		constexpr auto SuccessfulGrabEffects = 0x238; // TArray<UGameplayEffect*>
		constexpr auto SuccessfulGrabTargetEffects = 0x248; // TArray<UGameplayEffect*>
		constexpr auto GrabReleasedEffects = 0x258; // TArray<UGameplayEffect*>
		constexpr auto SmartActorCooldown = 0x268; // UGameplayEffect*
		constexpr auto BlockingTagQuery = 0x270; // FGameplayTagQuery
		constexpr auto ReachInMontageSet = 0x2b8; // UMontageSet*
		constexpr auto ReachInLoopMontageSet = 0x2c0; // UMontageSet*
		constexpr auto ReachInLoopEndMontageSet = 0x2c8; // UMontageSet*
		constexpr auto ReachInGrabMontageSet = 0x2d0; // UMontageSet*
		constexpr auto NotifyVolumeInfoMap = 0x2d8; // TMap<FName, FReachInSweepVolumeInfo>
	}

	namespace n_UTitanStage3TentacleComponent {
		constexpr auto State = 0xe8; // ETitanStage3TentacleState
		constexpr auto CurrentAttackZoneId = 0x13c; // int32_t
		constexpr auto ID = 0x140; // ETitanTentacleId
		constexpr auto SprayComponentTag = 0x144; // FGameplayTag
		constexpr auto AcidSprayAttackZones = 0x150; // TArray<FTitanStage3AcidSprayAttackZone>
		constexpr auto PathRootBone = 0x160; // FName
		constexpr auto DeathAnimSequence = 0x168; // UAnimSequence*
	}

	namespace n_UInterpTrackInstVisibility {
		constexpr auto Action = 0x30; // EVisibilityTrackAction
		constexpr auto LastUpdatePosition = 0x34; // float
	}

	namespace n_UInterpTrackToggle {
		constexpr auto ToggleTrack = 0x78; // TArray<FToggleTrackKey>
		constexpr auto bActivateSystemEachUpdate = 0x88; // char : 1
		constexpr auto bActivateWithJustAttachedFlag = 0x88; // char : 1
		constexpr auto bFireEventsWhenForwards = 0x88; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x88; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x88; // char : 1
	}

	namespace n_AGobiPlayerControllerBase {
		constexpr auto OnLastInputDeviceChanged = 0x628; // FMulticastInlineDelegate
		constexpr auto OnInputDisabled = 0x650; // FMulticastInlineDelegate
		constexpr auto OnInputEnabled = 0x660; // FMulticastInlineDelegate
		constexpr auto OnChatMessageReceived = 0x6c8; // FMulticastInlineDelegate
		constexpr auto OnSystemMessageReceived = 0x6e8; // FMulticastInlineDelegate
		constexpr auto GobiPlayerInput = 0x6f8; // UGobiPlayerInput*
		constexpr auto BugReporter = 0x708; // UBugReporterComponent*
		constexpr auto WatermarkMaterial = 0x710; // UMaterialInstance*
		constexpr auto WatermarkRenderTarget = 0x718; // UCanvasRenderTarget2D*
		constexpr auto WatermarkMaterialClass = 0x720; // UMaterialInterface*
		constexpr auto WatermarkFont = 0x728; // UFont*
		constexpr auto UIScreenManagerClass = 0x730; // UUIScreenManager*
		constexpr auto UIScreenManager = 0x738; // UUIScreenManager*
		constexpr auto GlobalSafeZoneWidget = 0x740; // UGlobalSafeZoneUserWidget*
		constexpr auto PushToTalkComponent = 0x748; // UPushToTalkComponent*
		constexpr auto VoiceTalkersComponent = 0x750; // UVoiceTalkersComponent*
		constexpr auto SubtitleComponent = 0x758; // UTRSSubtitleComponent*
		constexpr auto GobiPlayerProfileComponent = 0x760; // UGobiPlayerProfileComponent*
		constexpr auto PlayerStatsComponent = 0x768; // UPlayerStatsComponent*
		constexpr auto GobiPlayerChallengeComponent = 0x770; // UGobiPlayerChallengeComponent*
	}

	namespace n_UDrawFrustumComponent {
		constexpr auto FrustumColor = 0x4b0; // FColor
		constexpr auto FrustumAngle = 0x4b4; // float
		constexpr auto FrustumAspectRatio = 0x4b8; // float
		constexpr auto FrustumStartDist = 0x4bc; // float
		constexpr auto FrustumEndDist = 0x4c0; // float
		constexpr auto Texture = 0x4c8; // UTexture*
	}

	namespace n_UPlayerLevelStreamingComponent {
		constexpr auto NumLoadedLevels = 0x100; // int32_t
	}

	namespace n_USoundfieldSubmix {
		constexpr auto SoundfieldEncodingFormat = 0x48; // FName
		constexpr auto EncodingSettings = 0x50; // USoundfieldEncodingSettingsBase*
		constexpr auto SoundfieldEffectChain = 0x58; // TArray<USoundfieldEffectBase*>
		constexpr auto EncodingSettingsClass = 0x68; // USoundfieldEncodingSettingsBase*
	}

	namespace n_UGameplayEffectHeroIncapReviveBonus {
		constexpr auto IncapReviveHealingMod = 0x240; // FGamePropertyFloatMod
	}

	namespace n_ULifeStateAlive {
		constexpr auto StartInjuredHealthPct = 0xa8; // float
		constexpr auto StartCriticalHealthPct = 0xac; // float
		constexpr auto CriticalHealthMoveInputScaleLabel = 0xb0; // FName
		constexpr auto CriticalHealthMoveInputScale = 0xb8; // float
		constexpr auto HealthState = 0xbc; // EHealthState
		constexpr auto CriticallyInjuredScreenFXTag = 0xc0; // FGameplayTag
		constexpr auto bRevertCollisionProfileOnEnter = 0xc8; // bool
		constexpr auto AliveCapsuleCollisionProfile = 0xcc; // FName
		constexpr auto HealthStateTags = 0xd4; // FGameplayTag [0x4]
	}

	namespace n_UAchievementQueryCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UDatasmithImportOptions {
		constexpr auto SearchPackagePolicy = 0x30; // EDatasmithImportSearchPackagePolicy
		constexpr auto MaterialConflictPolicy = 0x31; // EDatasmithImportAssetConflictPolicy
		constexpr auto TextureConflictPolicy = 0x32; // EDatasmithImportAssetConflictPolicy
		constexpr auto StaticMeshActorImportPolicy = 0x33; // EDatasmithImportActorPolicy
		constexpr auto LightImportPolicy = 0x34; // EDatasmithImportActorPolicy
		constexpr auto CameraImportPolicy = 0x35; // EDatasmithImportActorPolicy
		constexpr auto OtherActorImportPolicy = 0x36; // EDatasmithImportActorPolicy
		constexpr auto MaterialQuality = 0x37; // EDatasmithImportMaterialQuality
		constexpr auto BaseOptions = 0x3c; // FDatasmithImportBaseOptions
		constexpr auto ReimportOptions = 0x50; // FDatasmithReimportOptions
		constexpr auto Filename = 0x58; // FString
		constexpr auto FilePath = 0x68; // FString
	}

	namespace n_UGameplayEffectHeal {
		constexpr auto bAutoHealOutOfCriticalState = 0x244; // bool
		constexpr auto InstantHealing = 0x248; // float
		constexpr auto InstantPermanentHealing = 0x24c; // float
		constexpr auto RecurringHealing = 0x250; // float
		constexpr auto RecurringPermanentHealing = 0x254; // float
		constexpr auto RecurringHealingFrequency = 0x258; // float
		constexpr auto MinHealAmount = 0x25c; // float
		constexpr auto bStackTemporaryHealth = 0x260; // bool
		constexpr auto TemporaryHealth = 0x264; // float
		constexpr auto TemporaryHealthParams = 0x268; // FTemporaryHealthParams
		constexpr auto bUseHealingScaleMods = 0x280; // bool
		constexpr auto bSourcePawnPerkCriticalHeal = 0x281; // bool
		constexpr auto CritHealGameplayEffects = 0x288; // TArray<UGameplayEffect*>
	}

	namespace n_UMovieSceneParticleParameterTrack {
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UFogMod {
		constexpr auto bOverride_HeightFogStartDistance = 0xd0; // char : 1
		constexpr auto bOverride_HeightFogInscatteringColor = 0xd0; // char : 1
		constexpr auto bOverride_VolumeFogAlbedo = 0xd0; // char : 1
		constexpr auto bOverride_MinVolumeFog = 0xd0; // char : 1
		constexpr auto bOverride_VolumeFogNoiseScale = 0xd0; // char : 1
		constexpr auto bOverride_VolumeFogNoisePan = 0xd0; // char : 1
		constexpr auto bOverride_VolumeFogNoisePanSpeed = 0xd0; // char : 1
		constexpr auto bOverride_VolumeGroundFogHeight = 0xd0; // char : 1
		constexpr auto bOverride_VolumeGroundFogAO = 0xd1; // char : 1
		constexpr auto HeightFogStartDistance = 0xd4; // float
		constexpr auto HeightFogInscatteringColor = 0xd8; // FLinearColor
		constexpr auto bUseSecondFog = 0xe8; // char : 1
		constexpr auto SecondFogDensity = 0xec; // float
		constexpr auto SecondFogHeightFalloff = 0xf0; // float
		constexpr auto SecondFogHeightOffset = 0xf4; // float
		constexpr auto VolumeFogAlbedo = 0xf8; // FLinearColor
		constexpr auto MinVolumeFog = 0x108; // float
		constexpr auto MinVolumeFogOverTime = 0x110; // UCurveFloat*
		constexpr auto VolumeFogNoiseScale = 0x118; // float
		constexpr auto VolumeFogNoisePan = 0x11c; // FVector
		constexpr auto VolumeFogNoisePanSpeed = 0x128; // float
		constexpr auto VolumeGroundFogHeight = 0x12c; // float
		constexpr auto VolumeGroundFogAO = 0x130; // float
	}

	namespace n_UMaterialExpressionStaticSwitchParameter {
		constexpr auto A = 0x68; // FExpressionInput
		constexpr auto B = 0x7c; // FExpressionInput
	}

	namespace n_UParticleEmitter {
		constexpr auto EmitterName = 0x30; // FName
		constexpr auto SubUVDataOffset = 0x38; // int32_t
		constexpr auto EmitterRenderMode = 0x3c; // EEmitterRenderMode
		constexpr auto SignificanceLevel = 0x3d; // EParticleSignificanceLevel
		constexpr auto bUseLegacySpawningBehavior = 0x3f; // char : 1
		constexpr auto ConvertedModules = 0x3f; // char : 1
		constexpr auto bIsSoloing = 0x3f; // char : 1
		constexpr auto bCookedOut = 0x3f; // char : 1
		constexpr auto bDisabledLODsKeepEmitterAlive = 0x3f; // char : 1
		constexpr auto bDisableWhenInsignficant = 0x40; // char : 1
		constexpr auto LODLevels = 0x48; // TArray<UParticleLODLevel*>
		constexpr auto PeakActiveParticles = 0x58; // int32_t
		constexpr auto InitialAllocationCount = 0x5c; // int32_t
		constexpr auto QualityLevelSpawnRateScale = 0x60; // float
		constexpr auto DetailModeBitmask = 0x64; // uint32_t
	}

	namespace n_UCullingField {
		constexpr auto Culling = 0xe8; // UFieldNodeBase*
		constexpr auto Field = 0xf0; // UFieldNodeBase*
		constexpr auto Operation = 0xf8; // EFieldCullingOperationType
	}

	namespace n_ULifeStateBase {
		constexpr auto AppliedTags = 0x50; // FGameplayTagContainer
		constexpr auto AppliedGameplayEffects = 0x70; // TArray<UGameplayEffect*>
		constexpr auto ExitGameplayEffects = 0x80; // TArray<UGameplayEffect*>
		constexpr auto ActiveEffects = 0x98; // TArray<TWeakObjectPtr<UGameplayEffect>>
	}

	namespace n_UParticleColliderComponent {
		constexpr auto Events = 0xe8; // TMap<FName, UImpactEffectConfig*>
		constexpr auto bMaterialNormalParam = 0x138; // bool
		constexpr auto bMaterialLocationParam = 0x139; // bool
	}

	namespace n_UInteractiveToolsContext {
		constexpr auto InputRouter = 0x60; // UInputRouter*
		constexpr auto ToolManager = 0x68; // UInteractiveToolManager*
		constexpr auto GizmoManager = 0x70; // UInteractiveGizmoManager*
		constexpr auto ToolManagerClass = 0x78; // TSoftClassPtr<UObject>
	}

	namespace n_UGobiSafeZone {
		constexpr auto PadLeft = 0x160; // bool
		constexpr auto PadRight = 0x161; // bool
		constexpr auto PadTop = 0x162; // bool
		constexpr auto PadBottom = 0x163; // bool
	}

	namespace n_UTRSSubtitleComponent {
		constexpr auto SubtitleWidget = 0xe8; // UUserWidget*
	}

	namespace n_UEngineMessage {
		constexpr auto FailedPlaceMessage = 0x30; // FString
		constexpr auto MaxedOutMessage = 0x40; // FString
		constexpr auto EnteredMessage = 0x50; // FString
		constexpr auto LeftMessage = 0x60; // FString
		constexpr auto GlobalNameChange = 0x70; // FString
		constexpr auto SpecEnteredMessage = 0x80; // FString
		constexpr auto NewPlayerMessage = 0x90; // FString
		constexpr auto NewSpecMessage = 0xa0; // FString
	}

	namespace n_UNavModifierComponent {
		constexpr auto AreaClass = 0x118; // UNavArea*
		constexpr auto FailsafeExtent = 0x120; // FVector
		constexpr auto bIncludeAgentHeight = 0x12c; // char : 1
	}

	namespace n_UNiagaraSimulationStageBase {
		constexpr auto Script = 0x30; // UNiagaraScript*
		constexpr auto SimulationStageName = 0x38; // FName
	}

	namespace n_UBTDecorator_HasBlackboardTimeoutExpired {
		constexpr auto Offset = 0x98; // float
	}

	namespace n_UAnimEvalSet_Rubble_DeathReaction_C {
		constexpr auto AvatarHealth = 0xc0; // FGameplayEval_Health
		constexpr auto AvatarTags = 0x118; // FGameplayEval_GameplayTags
	}

	namespace n_UWidgetSwitcherSlot {
		constexpr auto Padding = 0x48; // FMargin
		constexpr auto HorizontalAlignment = 0x58; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x59; // EVerticalAlignment
	}

	namespace n_ADialogueBankManger {
		constexpr auto RequiredSpeakerBanks = 0x2b8; // TArray<FName>
		constexpr auto RequiredConversationBanks = 0x2c8; // TArray<FName>
	}

	namespace n_ASleeperNest_BP_C {
		constexpr auto UberGraphFrame = 0x418; // FPointerToUberGraphFrame
		constexpr auto PlayerBlockerCapsule = 0x420; // UCapsuleComponent*
		constexpr auto InfectedHighlight = 0x428; // UInfectedHighlightComponent*
		constexpr auto AkComponent = 0x430; // UAkComponent*
		constexpr auto ItemAkBank = 0x438; // UItemAkBankComponent*
		constexpr auto AimAssistTarget = 0x440; // UAimAssistTargetComponent*
		constexpr auto HasChosenSpawnLocation = 0x448; // bool
	}

	namespace n_UButtonStyleAsset {
		constexpr auto ButtonStyle = 0x30; // FButtonStyle
	}

	namespace n_AZombieCharacter {
		constexpr auto OnLockedInSafeRoom = 0x1430; // FMulticastInlineDelegate
		constexpr auto OutOfRangeStateChanged = 0x1440; // FMulticastInlineDelegate
		constexpr auto bLockedInSafeRoom = 0x1450; // bool
		constexpr auto bInSafeRoom = 0x1451; // bool
		constexpr auto bOutOfRange = 0x1452; // bool
		constexpr auto ZombieGhostComponent = 0x1458; // UZombieGhostComponent*
		constexpr auto ZombieUIData = 0x14a0; // FZombieUIData
		constexpr auto FloatingReticleInterpolationSpeed = 0x15c0; // float
		constexpr auto DamageInflictedMutationPoints = 0x15c4; // float
		constexpr auto KillInflictedMutationPoints = 0x15c8; // int32_t
		constexpr auto IncapInflictedMutationPoints = 0x15cc; // int32_t
		constexpr auto ZombieAdvantageMutationGainScalar = 0x15d0; // TArray<float>
		constexpr auto ZombieDisdvantageMutationGainScalar = 0x15e0; // TArray<float>
	}

	namespace n_UInterpTrackMove {
		constexpr auto PosTrack = 0x78; // FInterpCurveVector
		constexpr auto EulerTrack = 0x90; // FInterpCurveVector
		constexpr auto LookupTrack = 0xa8; // FInterpLookupTrack
		constexpr auto LookAtGroupName = 0xb8; // FName
		constexpr auto LinCurveTension = 0xc0; // float
		constexpr auto AngCurveTension = 0xc4; // float
		constexpr auto bUseQuatInterpolation = 0xc8; // char : 1
		constexpr auto bShowArrowAtKeys = 0xc8; // char : 1
		constexpr auto bDisableMovement = 0xc8; // char : 1
		constexpr auto bShowTranslationOnCurveEd = 0xc8; // char : 1
		constexpr auto bShowRotationOnCurveEd = 0xc8; // char : 1
		constexpr auto bHide3DTrack = 0xc8; // char : 1
		constexpr auto RotMode = 0xcc; // EInterpTrackMoveRotMode
	}

	namespace n_UEnvQueryContext_Character {
		constexpr auto CharacterClass = 0x30; // AGobiCharacter*
	}

	namespace n_UBTDecorator_SetBlackboardKey {
		constexpr auto KeySet = 0x70; // FBlackboardKeySet
	}

	namespace n_UDeviceProfileManager {
		constexpr auto Profiles = 0x30; // TArray<UObject*>
	}

	namespace n_UVoiceRoutingComponent {
		constexpr auto Matchmaking = 0xe8; // UMatchmaking*
	}

	namespace n_UPawnAction_Sequence {
		constexpr auto ActionSequence = 0xa0; // TArray<UPawnAction*>
		constexpr auto ChildFailureHandlingMode = 0xb0; // EPawnActionFailHandling
		constexpr auto RecentActionCopy = 0xb8; // UPawnAction*
	}

	namespace n_UHitMarkerUserWidget {
		constexpr auto Show = 0x4c8; // UWidgetAnimation*
		constexpr auto ArmorHitTexture = 0x4d0; // UTexture2D*
		constexpr auto ArmorBrokenTexture = 0x4d8; // UTexture2D*
		constexpr auto LineThickness = 0x4e0; // float
		constexpr auto ExtendedLength = 0x4e4; // float
		constexpr auto ShortLength = 0x4e8; // float
		constexpr auto GeneralDamageColor = 0x4f0; // FSlateColor
		constexpr auto FriendlyFireColor = 0x520; // FSlateColor
		constexpr auto HitArmorColor = 0x550; // FSlateColor
		constexpr auto DestroyedArmorColor = 0x580; // FSlateColor
		constexpr auto HitWeakSpotColor = 0x5b0; // FSlateColor
		constexpr auto DestroyedWeakSpotColor = 0x5e0; // FSlateColor
		constexpr auto KilledColor = 0x610; // FSlateColor
	}

	namespace n_UPawnNoiseEmitterComponent {
		constexpr auto bAIPerceptionSystemCompatibilityMode = 0xe8; // char : 1
		constexpr auto LastRemoteNoisePosition = 0xec; // FVector
		constexpr auto NoiseLifetime = 0xf8; // float
		constexpr auto LastRemoteNoiseVolume = 0xfc; // float
		constexpr auto LastRemoteNoiseTime = 0x100; // float
		constexpr auto LastLocalNoiseVolume = 0x104; // float
		constexpr auto LastLocalNoiseTime = 0x108; // float
	}

	namespace n_UMaterialExpressionComponentMask {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto R = 0x5c; // char : 1
		constexpr auto G = 0x5c; // char : 1
		constexpr auto B = 0x5c; // char : 1
		constexpr auto A = 0x5c; // char : 1
	}

	namespace n_UMovieSceneVectorTrack {
		constexpr auto NumChannelsUsed = 0x90; // int32_t
	}

	namespace n_UAISeparationGroups {
		constexpr auto Groups = 0x38; // TArray<FAISeparationGroup>
	}

	namespace n_UWrapBox {
		constexpr auto InnerSlotPadding = 0x160; // FVector2D
		constexpr auto WrapWidth = 0x168; // float
		constexpr auto bExplicitWrapWidth = 0x16c; // bool
	}

	namespace n_UEnvQueryTest_VoronoiDepth {
		constexpr auto RegionSource = 0x208; // UEnvQueryContext*
		constexpr auto SampleSources = 0x210; // UEnvQueryContext*
	}

	namespace n_UVendorComponent {
		constexpr auto VendorStock = 0xe8; // TArray<FVendorStockItem>
		constexpr auto RandomItemStockParams = 0xf8; // TArray<FRolledVendorStockItemParams>
		constexpr auto RandomCardStockParams = 0x108; // TArray<FRolledVendorStockCardParams>
		constexpr auto OnUserClosedVendorScreen = 0x118; // FMulticastInlineDelegate
		constexpr auto OnPurchaseMade = 0x128; // FMulticastInlineDelegate
		constexpr auto ReplicatedVendorStock = 0x148; // TArray<FVendorStockItem>
	}

	namespace n_UGameplayDeveloperSettings {
		constexpr auto ImpactQualityScaling = 0x40; // EPerfScalingMethod
		constexpr auto ImpactQualitySettings = 0x44; // FImpactQualitySettings [0x5]
		constexpr auto DecalCategoryTable = 0xd0; // TSoftObjectPtr<UDataTable>
		constexpr auto DecalMaxCountPerQuality = 0xf8; // int32_t [0x5]
		constexpr auto DecalMaxCountFadeEarlyRatio = 0x10c; // float
		constexpr auto DecalInsignificantMinDistance = 0x110; // float
		constexpr auto DecalQualityScaling = 0x114; // EPerfScalingMethod
		constexpr auto DecalQualitySettings = 0x118; // FDecalQualitySettings [0x5]
		constexpr auto ParticleSpawnCullSizeMinDistance = 0x230; // float
		constexpr auto ParticleQuality = 0x238; // FParticleQualitySettings [0x5]
		constexpr auto ParticleCullGroups = 0x300; // TMap<FName, FParticleSpawnCullingGroup>
		constexpr auto SurvivorHealthPerPip = 0x350; // int32_t
		constexpr auto SurvivorMaxPipHealth = 0x354; // int32_t
		constexpr auto RiddenHealthPerPip = 0x358; // int32_t
		constexpr auto RiddenMaxPipHealth = 0x35c; // int32_t
		constexpr auto StaminaPerPip = 0x360; // int32_t
		constexpr auto TableOfGameplayCardTables = 0x368; // TSoftObjectPtr<UDataTable>
		constexpr auto PerkTables = 0x390; // TArray<TSoftObjectPtr<UDataTable>>
		constexpr auto GameplayCardPresetsTable = 0x3a0; // TSoftObjectPtr<UDataTable>
		constexpr auto GameplayCardPresetsTablePvP = 0x3c8; // TSoftObjectPtr<UDataTable>
		constexpr auto GameplayCardsTable = 0x3f0; // TSoftObjectPtr<UDataTable>
		constexpr auto AIDirectorCardsTable = 0x418; // TSoftObjectPtr<UDataTable>
		constexpr auto AIDirectorCardWeightsTable = 0x440; // TSoftObjectPtr<UDataTable>
		constexpr auto AIDirectorCardWeightsShowDemoTable = 0x468; // TSoftObjectPtr<UDataTable>
		constexpr auto DynamicCardOverrideTables = 0x490; // TArray<TSoftObjectPtr<UDataTable>>
		constexpr auto BurnCardsTable = 0x4a0; // TSoftObjectPtr<UDataTable>
		constexpr auto ZombieMutationGameplayCardsTable = 0x4c8; // TSoftObjectPtr<UDataTable>
		constexpr auto ZombieMutationTreesTable = 0x4f0; // TSoftObjectPtr<UDataTable>
		constexpr auto StaticCaravans = 0x518; // TSoftObjectPtr<UStaticCaravans>
		constexpr auto CaravanMerchantsTable = 0x540; // TSoftObjectPtr<UDataTable>
		constexpr auto CaravanSchemasTable = 0x568; // TSoftObjectPtr<UDataTable>
		constexpr auto ProductsTable = 0x590; // TSoftObjectPtr<UDataTable>
		constexpr auto SpraysTable = 0x5b8; // TSoftObjectPtr<UDataTable>
		constexpr auto WeaponsTable = 0x5e0; // TSoftObjectPtr<UDataTable>
		constexpr auto HeroDefinitionsTable = 0x608; // TSoftObjectPtr<UDataTable>
		constexpr auto EntitlementsTable = 0x630; // TSoftObjectPtr<UDataTable>
		constexpr auto EntitlementContentPackagesTable = 0x658; // TSoftObjectPtr<UDataTable>
		constexpr auto GameplayDataSet = 0x680; // TSoftObjectPtr<UGameplayDataSet>
		constexpr auto HealthDamageRanges = 0x6a8; // TSoftObjectPtr<UHealthDamageRanges>
		constexpr auto HealthPercentRanges = 0x6d0; // TSoftObjectPtr<UHealthDamageRanges>
		constexpr auto DeckLoadoutCards = 0x6f8; // int32_t
		constexpr auto DeckLoadoutCardsPvP = 0x6fc; // int32_t
		constexpr auto MaxDeckSize = 0x700; // int32_t
		constexpr auto MaxDeckSizePvP = 0x704; // int32_t
		constexpr auto PvPStartCurrency = 0x708; // int32_t
		constexpr auto PvPNextMapCurrency = 0x70c; // int32_t
		constexpr auto DroppedCurrencyItem = 0x710; // FDataTableRowHandle
		constexpr auto AimAssistFrictionDefault = 0x730; // float
		constexpr auto AimAssistMagnetismDefault = 0x734; // float
		constexpr auto MaxCameraInputSmoothingSecsDefault = 0x738; // float
		constexpr auto LeftStickInnerDeadZoneDefault = 0x73c; // float
		constexpr auto LeftStickInnerDeadZoneMax = 0x740; // float
		constexpr auto LeftStickOuterDeadZoneDefault = 0x744; // float
		constexpr auto RightStickInnerDeadZoneDefault = 0x748; // float
		constexpr auto RightStickInnerDeadZoneMax = 0x74c; // float
		constexpr auto RightStickOuterDeadZoneDefault = 0x750; // float
		constexpr auto SignificanceCategories = 0x758; // TMap<FGameplayTag, FSignificanceCategory>
		constexpr auto UpdateRateOptimizationCategories = 0x7a8; // TMap<FGameplayTag, FUpdateRateOptimizationCategory>
		constexpr auto FootplantCategories = 0x7f8; // TMap<FGameplayTag, FFootplantCategory>
		constexpr auto CorpseSettings = 0x848; // FCorpseSettings
		constexpr auto VistaCharacterSettings = 0x8b8; // FVistaCharacterSettings
		constexpr auto MutilationExplosionMaxRagdolls = 0x8d0; // int32_t
		constexpr auto MutilationExplosionRatioRagdolls = 0x8d4; // float
		constexpr auto MutilationQualityScaling = 0x8d8; // EPerfScalingMethod
		constexpr auto MutilationScalability = 0x8e0; // FMutilationScalability [0x5]
		constexpr auto MutilationCategories = 0xc28; // TMap<FGameplayTag, FMutilationCategory>
		constexpr auto EffectActorSettings = 0xc78; // TMap<AEffectActor*, FEffectActorSettings>
		constexpr auto WaterMaxDepth = 0xcc8; // float
		constexpr auto WaterDeepDepth = 0xccc; // float
		constexpr auto WaterProjectileDeepDepth = 0xcd0; // float
		constexpr auto WaterDeepExitTime = 0xcd4; // float
		constexpr auto WaterEffectDefault = 0xcd8; // UGameplayEffect*
		constexpr auto WaterDeepEffectDefault = 0xce0; // UGameplayEffect*
		constexpr auto WaterPhysicsMaterialDefault = 0xce8; // FSoftObjectPath
		constexpr auto WaterRipplerGenericSmallDef = 0xd00; // TSoftObjectPtr<UWaterRipplerDef>
		constexpr auto WaterVolumeDefault = 0xd28; // TSoftObjectPtr<UWaterVolumeDef>
		constexpr auto WaterSurfaceDefault = 0xd50; // TSoftObjectPtr<UWaterSurfaceDef>
		constexpr auto PathToObjectiveAgentProperties = 0xd78; // FNavAgentProperties
		constexpr auto PathToObjectiveNavFilterClass = 0xda8; // UNavigationQueryFilter*
		constexpr auto ItemNavFilterClass = 0xdb0; // UNavigationQueryFilter*
		constexpr auto UIEnableForceFeedbackEffect = 0xdb8; // TSoftObjectPtr<UForceFeedbackEffect>
		constexpr auto PreroundPrecacheItems = 0xde0; // TArray<FDataTableRowHandle>
		constexpr auto StaticResolutionScaleMin = 0xdf0; // float
		constexpr auto DynamicResolutionScaleMin = 0xdf4; // float
		constexpr auto SafeRoomVendorGracePeriod = 0xdf8; // float
		constexpr auto GameplayAudioCaptionsTable = 0xe00; // TSoftObjectPtr<UDataTable>
		constexpr auto MissionMapsTable = 0xe28; // TSoftObjectPtr<UDataTable>
		constexpr auto MissionMapChainsTable = 0xe50; // TSoftObjectPtr<UDataTable>
		constexpr auto MissionChapterAssets = 0xe78; // TSoftObjectPtr<UAssetTable>
		constexpr auto MissionTabelAssets = 0xea0; // TSoftObjectPtr<UAssetTable>
		constexpr auto MissionObjectiveAssets = 0xec8; // TSoftObjectPtr<UAssetTable>
		constexpr auto MissionDifficultiesTable = 0xef0; // TSoftObjectPtr<UDataTable>
		constexpr auto ChallengeSetsTable = 0xf18; // TSoftObjectPtr<UDataTable>
		constexpr auto ChallengeRanksTable = 0xf40; // TSoftObjectPtr<UDataTable>
		constexpr auto HoldoutMission = 0xf68; // FDataTableRowHandle
		constexpr auto AnimGraphTags = 0xf88; // FGobiAnimGraphTags
		constexpr auto HighlightPalette = 0xfb0; // FHighlightPalette
		constexpr auto RecoilCameraModifier = 0x1000; // UCameraModifier_WeaponRecoil*
		constexpr auto LowAmmoStateRecentTime = 0x1008; // float
		constexpr auto WeaponQualityScalingMethod = 0x100c; // EPerfScalingMethod
		constexpr auto WeaponSimulatedQualitySettings = 0x1010; // FWeaponSimulatedQualitySettings [0x5]
		constexpr auto FirstMapPvEDrawBonus = 0x104c; // int32_t
		constexpr auto BasePvEDraws = 0x1050; // int32_t
		constexpr auto FirstMapPvPDrawBonus = 0x1054; // int32_t
		constexpr auto BasePvPDraws = 0x1058; // int32_t
		constexpr auto DefaultGameplayCards = 0x1060; // TArray<FDataTableRowHandle>
		constexpr auto DistanceMatchingCurveName = 0x1070; // FName
		constexpr auto CommonZombieSkeleton = 0x1078; // TSoftObjectPtr<USkeleton>
		constexpr auto CommonZombiePhysicsAsset = 0x10a0; // TSoftObjectPtr<UPhysicsAsset>
		constexpr auto CommonZombieShadowPhysicsAsset = 0x10c8; // TSoftObjectPtr<UPhysicsAsset>
		constexpr auto CommonZombieMeshHideMaterial = 0x10f0; // TSoftObjectPtr<UMaterialInterface>
		constexpr auto MaxZombieMergedMeshPoolSize = 0x1118; // int32_t
		constexpr auto CommonZombiesMapMeshTable = 0x1120; // TSoftObjectPtr<UDataTable>
		constexpr auto MinFogUIDistanceCutoffCurve = 0x1148; // TSoftObjectPtr<UCurveFloat>
		constexpr auto GlobalGameplayMaterialParamCollection = 0x1170; // TSoftObjectPtr<UMaterialParameterCollection>
		constexpr auto GenericAggregationTable = 0x1198; // TSoftObjectPtr<UDataTable>
	}

	namespace n_UCableComponent {
		constexpr auto bAttachStart = 0x528; // bool
		constexpr auto bAttachEnd = 0x529; // bool
		constexpr auto AttachEndTo = 0x530; // FComponentReference
		constexpr auto AttachEndToSocketName = 0x558; // FName
		constexpr auto EndLocation = 0x560; // FVector
		constexpr auto CableLength = 0x56c; // float
		constexpr auto NumSegments = 0x570; // int32_t
		constexpr auto SubstepTime = 0x574; // float
		constexpr auto SolverIterations = 0x578; // int32_t
		constexpr auto bEnableStiffness = 0x57c; // bool
		constexpr auto bEnableCollision = 0x57d; // bool
		constexpr auto CollisionFriction = 0x580; // float
		constexpr auto CableForce = 0x584; // FVector
		constexpr auto CableGravityScale = 0x590; // float
		constexpr auto CableWidth = 0x594; // float
		constexpr auto NumSides = 0x598; // int32_t
		constexpr auto TileMaterial = 0x59c; // float
	}

	namespace n_UInterpTrackInstBoolProp {
		constexpr auto ResetBool = 0x68; // bool
	}

	namespace n_UBulletPenetrationDefense {
		constexpr auto Surfaces = 0x38; // TMap<EPhysicalSurface, FBulletPenetrationDefenseDefinition>
	}

	namespace n_UFriendlyFireMod {
		constexpr auto FriendlyFireAdjustment = 0xd0; // float
	}

	namespace n_AAISmartActorBase {
		constexpr auto GameplayTags = 0x2a8; // FGameplayTagContainer
		constexpr auto UserActionSet = 0x2c8; // TArray<UGameplayAction*>
		constexpr auto bShuffleUserActions = 0x2d8; // bool
		constexpr auto MaxUsers = 0x2dc; // int32_t
		constexpr auto bNeedsToRenderOnClient = 0x2e0; // bool
		constexpr auto RequiredCharacterTags = 0x2e8; // FGameplayTagContainer
		constexpr auto BlockingCharacterTags = 0x308; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x328; // FGameplayTagContainer
		constexpr auto MinRotatingCooldownTime = 0x348; // float
		constexpr auto MaxRotatingCooldownTime = 0x34c; // float
		constexpr auto MinRotatingCooldownOffset = 0x350; // float
		constexpr auto MaxRotatingCooldownOffset = 0x354; // float
		constexpr auto GameplayTagsComponent = 0x358; // UGameplayTagsComponent*
		constexpr auto GameplayEffectsComponent = 0x360; // UGameplayEffectsComponent*
		constexpr auto SpawnerBlockingRadius = 0x368; // float
		constexpr auto RequiresSameActorWithin = 0x36c; // float
		constexpr auto OnStartUse = 0x370; // FMulticastInlineDelegate
		constexpr auto OnStopUse = 0x380; // FMulticastInlineDelegate
	}

	namespace n_UAnimContextLocatorComponent {
		constexpr auto LocatorTag = 0x4b8; // FGameplayTag
		constexpr auto Locators = 0x4c0; // TArray<FTagLocator>
		constexpr auto TraceDistance = 0x4d0; // float
		constexpr auto ScanDistance = 0x4d4; // float
		constexpr auto bShowDetailDebug = 0x4d8; // bool
		constexpr auto bHasValidClimbData = 0x4d9; // bool
	}

	namespace n_UChaserAnimInstance {
		constexpr auto ChaserAnimState = 0x828; // FChaserAnimState
		constexpr auto PounceQuery = 0x848; // FGameplayTagQuery
		constexpr auto PounceAttackingQuery = 0x890; // FGameplayTagQuery
		constexpr auto LeapInterruptedQuery = 0x8d8; // FGameplayTagQuery
	}

	namespace n_UTexture2D {
		constexpr auto LevelIndex = 0xc0; // int32_t
		constexpr auto FirstResourceMemMip = 0xc4; // int32_t
		constexpr auto bTemporarilyDisableStreaming = 0xc8; // char : 1
		constexpr auto AddressX = 0xc9; // TextureAddress
		constexpr auto AddressY = 0xca; // TextureAddress
		constexpr auto ImportedSize = 0xcc; // FIntPoint
	}

	namespace n_UDragDropOperation {
		constexpr auto Tag = 0x30; // FString
		constexpr auto Payload = 0x40; // UObject*
		constexpr auto DefaultDragVisual = 0x48; // UWidget*
		constexpr auto Pivot = 0x50; // EDragPivot
		constexpr auto Offset = 0x54; // FVector2D
		constexpr auto OnDrop = 0x60; // FMulticastInlineDelegate
		constexpr auto OnDragCancelled = 0x70; // FMulticastInlineDelegate
		constexpr auto OnDragged = 0x80; // FMulticastInlineDelegate
	}

	namespace n_UMountedWeaponInteractComponent {
		constexpr auto ValidMountQuery = 0xe8; // FGameplayTagQuery
		constexpr auto EffectsToApplyOnMount = 0x130; // TArray<UGameplayEffect*>
		constexpr auto CurrentMountedWeapon = 0x140; // AActor*
		constexpr auto MountedWeaponComponent = 0x148; // UMountedWeaponComponent*
	}

	namespace n_ULMG01_ABP_C {
		constexpr auto UberGraphFrame = 0x3c0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x3c8; // FAnimNode_Root
		constexpr auto AnimGraphNode_SequencePlayer = 0x3f8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_Slot = 0x470; // FAnimNode_Slot
	}

	namespace n_UADSComponent {
		constexpr auto bIsHoldingADS = 0x160; // bool
		constexpr auto ADSActivatePercent = 0x278; // FAssetLookupFloat
		constexpr auto ADSMeshSwapPercent = 0x290; // FAssetLookupFloat
		constexpr auto ADSActiveFOV = 0x2a8; // FAssetLookupFloat
		constexpr auto FOVBlendCurve = 0x2c0; // FAssetLookupCurveFloat
		constexpr auto ZoomLevel = 0x2d8; // EAimSensitivitySpace
		constexpr auto ADSEnterAnimation = 0x2e0; // FAssetLookupAnimSequence
		constexpr auto ADSExitAnimation = 0x2f8; // FAssetLookupAnimSequence
		constexpr auto ADSIdleAnimation = 0x310; // FAssetLookupAnimSequence
		constexpr auto FiringNoiseAdditiveAlphaMax = 0x328; // FAssetLookupFloat
		constexpr auto JumpWeightMax = 0x340; // FAssetLookupFloat
		constexpr auto WalkWeightMax = 0x358; // FAssetLookupFloat
		constexpr auto LookSwayWeightMax = 0x370; // FAssetLookupFloat
		constexpr auto CharacterADSSoundTag = 0x388; // FName
		constexpr auto GunBonesToHideAtADS = 0x390; // TArray<FName>
		constexpr auto PlayerBonesToHideAtADS = 0x3a0; // TArray<FName>
		constexpr auto BonesToHideWhenADS = 0x3b0; // FAssetLookupNameArray
		constexpr auto BonesToUnhideWhenADS = 0x3d0; // FAssetLookupNameArray
		constexpr auto BlockingTags = 0x3f0; // FAssetLookupGameplayTagContainer
		constexpr auto TagsToApply = 0x420; // FAssetLookupGameplayTagContainer
		constexpr auto InstantlyCancellingTags = 0x450; // FGameplayTagContainer
		constexpr auto ADSTuning = 0x470; // FADSTuning
	}

	namespace n_UGameplayCueSet {
		constexpr auto GameplayCues = 0x38; // TArray<FGameplayCueData>
	}

	namespace n_UAnimStreamable {
		constexpr auto NumFrames = 0xc0; // int32_t
		constexpr auto Interpolation = 0xc4; // EAnimInterpolationType
		constexpr auto RetargetSource = 0xc8; // FName
		constexpr auto BoneCompressionSettings = 0xe0; // UAnimBoneCompressionSettings*
		constexpr auto CurveCompressionSettings = 0xe8; // UAnimCurveCompressionSettings*
		constexpr auto bEnableRootMotion = 0xf0; // bool
		constexpr auto RootMotionRootLock = 0xf1; // ERootMotionRootLock
		constexpr auto bForceRootLock = 0xf2; // bool
		constexpr auto bUseNormalizedRootMotionScale = 0xf3; // bool
	}

	namespace n_AGobiSpatialAudioVolume {
		constexpr auto LateReverbComp = 0x318; // UAkLateReverbComponent*
		constexpr auto RoomComp = 0x320; // UAkRoomComponent*
		constexpr auto Priority = 0x330; // float
		constexpr auto AuxBusName = 0x338; // FString
		constexpr auto ExteriorDelayAux = 0x348; // FString
		constexpr auto AmbienceLoopStart = 0x358; // UAkAudioEvent*
		constexpr auto AmbienceLoopStop = 0x360; // UAkAudioEvent*
		constexpr auto WallOcclusion = 0x368; // float
		constexpr auto WeaponDecay = 0x36c; // EWeaponDecayEnum
		constexpr auto ThreatSoundOcclusion = 0x370; // FAkRTPCTransition
		constexpr auto SendLevel = 0x388; // float
		constexpr auto FadeRate = 0x38c; // float
		constexpr auto bEnableRoom = 0x390; // bool
	}

	namespace n_UAnimSharingTransitionInstance {
		constexpr auto FromComponent = 0x2b8; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto ToComponent = 0x2c0; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto BlendTime = 0x2c8; // float
		constexpr auto bBlendBool = 0x2cc; // bool
	}

	namespace n_UExplosionComponent {
		constexpr auto Config = 0x230; // FExplosionConfig
		constexpr auto OnDebugVisualizeAddSplineComponent = 0x370; // FMulticastInlineDelegate
		constexpr auto OnExploded = 0x380; // FMulticastInlineDelegate
	}

	namespace n_UGameplayContext_PlayerStaminaState {
		constexpr auto SubjectPlayer = 0x50; // UAnimContext_Actor*
	}

	namespace n_UCharacterAudioComponent {
		constexpr auto bUseCrowdSound = 0x118; // bool
		constexpr auto BodySize = 0x119; // ECharacterBodySize
		constexpr auto MovementSpeedMaxDivisor = 0x11c; // float
		constexpr auto GameplayTagSetDataTable = 0x120; // UDataTable*
		constexpr auto AudioEmitter = 0x128; // UAkSkeletalComponent*
		constexpr auto SelectedSoundCollection = 0x130; // USoundCollectionAsset*
		constexpr auto OwningCharacter = 0x138; // TWeakObjectPtr<AGobiCharacter>
		constexpr auto StartingStateAndParams = 0x140; // FStartingStateAndParams
		constexpr auto CurrentSpatialVolume = 0x1f0; // AGobiSpatialAudioVolume*
		constexpr auto bWetPrimed = 0x1f8; // bool
		constexpr auto WaterEnter = 0x200; // UAkAudioEvent*
		constexpr auto WaterExit = 0x208; // UAkAudioEvent*
		constexpr auto WaterMove = 0x210; // UAkAudioEvent*
		constexpr auto WaterDrips = 0x218; // UAkAudioEvent*
		constexpr auto SpectateSwap = 0x220; // UAkAudioEvent*
		constexpr auto bStartingStatesDebug = 0x228; // bool
		constexpr auto DialogueBoneName = 0x22c; // FName
		constexpr auto VoiceLineFinishedCallback = 0x240; // FDelegate
		constexpr auto CurrentVoiceLine = 0x268; // FString
		constexpr auto DialogueStopEvent = 0x278; // UAkAudioEvent*
		constexpr auto DamageDrivenMusicEvents = 0x2e0; // TArray<FMusicDamageTypeEvent>
	}

	namespace n_UItemAkBankComponent {
		constexpr auto AkBank = 0xe8; // UAkAudioBank*
		constexpr auto AdditionalBanks = 0xf0; // TArray<UAkAudioBank*>
		constexpr auto MaxDistanceForLoad = 0x100; // float
		constexpr auto bStopLoadWhenHealthIsZero = 0x104; // bool
	}

	namespace n_UMeleeComponent {
		constexpr auto OnStartMelee = 0x1e0; // FMulticastInlineDelegate
		constexpr auto OnStopMelee = 0x1f0; // FMulticastInlineDelegate
		constexpr auto PerFrameOverlapResults = 0x3b8; // TArray<FHitResult>
		constexpr auto ImpactHitResult = 0x3c8; // FHitResult
		constexpr auto OverlappedActors = 0x450; // TArray<AActor*>
		constexpr auto ImpactCueHandle = 0x460; // FGameplayCueHandle
		constexpr auto MeleeAttacks = 0x478; // TArray<FMeleeAttack>
		constexpr auto ImpactVolumeCollisionProfile = 0x488; // FCollisionProfileName
		constexpr auto bUseMeleeTarget = 0x490; // bool
		constexpr auto CookingMontage = 0x498; // UAnimMontage*
		constexpr auto PrepReattackMontages = 0x4a0; // TArray<UAnimMontage*>
		constexpr auto ComboWindowMontageNotifyName = 0x4b0; // FName
		constexpr auto CollisionWindowMontageNotifyname = 0x4b8; // FName
		constexpr auto ImpactWindowMontageNotifyName = 0x4c0; // FName
		constexpr auto ReattackWindowMontageNotifyName = 0x4c8; // FName
		constexpr auto MoveToMeleeTargetNotifyName = 0x4d0; // FName
		constexpr auto AttackMontagesName = 0x4d8; // FName
		constexpr auto ImpactMontagesName = 0x4e0; // FName
		constexpr auto CalculateMeleeTargetTraceName = 0x4e8; // FName
		constexpr auto MeleeHitValidationTraceCheckName = 0x4f0; // FName
		constexpr auto CollisionMeshTag = 0x4f8; // FName
		constexpr auto CollisionMode = 0x500; // EMeleeCollisionMode
		constexpr auto bRequiresClearTraceCheck = 0x501; // bool
		constexpr auto ClearTraceChannel = 0x502; // ECollisionChannel
		constexpr auto ImpactSweepCollisionProfile = 0x504; // FCollisionProfileName
		constexpr auto ImpactOverlapLagCompensationEnabled = 0x50c; // bool
		constexpr auto ImpactOverlapLagCompensationScalar = 0x510; // float
		constexpr auto ImpactCue = 0x514; // FGameplayTag
		constexpr auto MeleeSwipeSound = 0x520; // UAkAudioEvent*
		constexpr auto MeleeHitSound = 0x528; // UAkAudioEvent*
		constexpr auto AppliedTag = 0x530; // FGameplayTag
		constexpr auto BlockingTags = 0x538; // FGameplayTagContainer
		constexpr auto SkipCookingTags = 0x558; // FGameplayTagContainer
		constexpr auto CancelTagsQuery = 0x578; // FGameplayTagQuery
		constexpr auto bReactivateIfInputHeld = 0x5c0; // bool
		constexpr auto ServerVolumePadding = 0x5c4; // float
		constexpr auto CookingEffects = 0x5c8; // TArray<UGameplayEffect*>
		constexpr auto ApplyEffectsToSelf = 0x5d8; // TArray<UGameplayEffect*>
		constexpr auto ApplyEffects = 0x5e8; // TArray<UGameplayEffect*>
		constexpr auto MeleeTargetClass = 0x5f8; // AGobiReticle*
		constexpr auto MeleeTargetLockedOnClass = 0x600; // AGobiReticle*
		constexpr auto bSetReticleRadiusToImpactRadius = 0x608; // bool
		constexpr auto MeleeTuning = 0x60c; // FMeleeTuning
	}

	namespace n_UGameplayEffectsComponent {
		constexpr auto OnApplyEffect = 0xe8; // FMulticastInlineDelegate
		constexpr auto OwnedEffects = 0xf8; // TArray<UGameplayEffect*>
		constexpr auto NetEffects_OwnerOnly = 0x130; // FNetGameplayEffectArray
		constexpr auto ClientEffects_OwnerOnly = 0x248; // TArray<FNetGameplayEffect>
		constexpr auto NetEffects_NoCond = 0x258; // FNetGameplayEffectArray
		constexpr auto ClientEffects_NoCond = 0x370; // TArray<FNetGameplayEffect>
	}

	namespace n_USleeperAnimInstance {
		constexpr auto CurrentBehaviorState = 0x2b8; // ESleeperAnimBehaviorState
		constexpr auto TetherLocation = 0x2c0; // FTransform
	}

	namespace n_UAnimContext_LastVisibleLocation {
		constexpr auto Trace = 0x78; // UAnimContext_Trace*
	}

	namespace n_UZombieAbilityUserWidget {
		constexpr auto AbilityComponent = 0x458; // UAbilityComponent*
		constexpr auto AbilityData = 0x460; // FZombieAbilityData
	}

	namespace n_UNavCollision {
		constexpr auto CylinderCollision = 0x88; // TArray<FNavCollisionCylinder>
		constexpr auto BoxCollision = 0x98; // TArray<FNavCollisionBox>
		constexpr auto AreaClass = 0xa8; // UNavArea*
		constexpr auto bGatherConvexGeometry = 0xb0; // char : 1
		constexpr auto bCreateOnClient = 0xb0; // char : 1
	}

	namespace n_UFoliageType {
		constexpr auto UpdateGuid = 0x30; // FGuid
		constexpr auto Density = 0x40; // float
		constexpr auto DensityAdjustmentFactor = 0x44; // float
		constexpr auto Radius = 0x48; // float
		constexpr auto bSingleInstanceModeOverrideRadius = 0x4c; // bool
		constexpr auto SingleInstanceModeRadius = 0x50; // float
		constexpr auto Scaling = 0x54; // EFoliageScaling
		constexpr auto ScaleX = 0x58; // FFloatInterval
		constexpr auto ScaleY = 0x60; // FFloatInterval
		constexpr auto ScaleZ = 0x68; // FFloatInterval
		constexpr auto VertexColorMaskByChannel = 0x70; // FFoliageVertexColorChannelMask [0x4]
		constexpr auto VertexColorMask = 0xa0; // FoliageVertexColorMask
		constexpr auto VertexColorMaskThreshold = 0xa4; // float
		constexpr auto VertexColorMaskInvert = 0xa8; // char : 1
		constexpr auto ZOffset = 0xac; // FFloatInterval
		constexpr auto AlignToNormal = 0xb4; // char : 1
		constexpr auto AlignMaxAngle = 0xb8; // float
		constexpr auto RandomYaw = 0xbc; // char : 1
		constexpr auto RandomPitchAngle = 0xc0; // float
		constexpr auto GroundSlopeAngle = 0xc4; // FFloatInterval
		constexpr auto Height = 0xcc; // FFloatInterval
		constexpr auto LandscapeLayers = 0xd8; // TArray<FName>
		constexpr auto MinimumLayerWeight = 0xe8; // float
		constexpr auto ExclusionLandscapeLayers = 0xf0; // TArray<FName>
		constexpr auto MinimumExclusionLayerWeight = 0x100; // float
		constexpr auto LandscapeLayer = 0x104; // FName
		constexpr auto CollisionWithWorld = 0x10c; // char : 1
		constexpr auto CollisionScale = 0x110; // FVector
		constexpr auto MeshBounds = 0x11c; // FBoxSphereBounds
		constexpr auto LowBoundOriginRadius = 0x138; // FVector
		constexpr auto Mobility = 0x144; // EComponentMobility
		constexpr auto CullDistance = 0x148; // FInt32Interval
		constexpr auto LodLimits = 0x150; // FInt32Interval
		constexpr auto LODDistanceScale = 0x158; // float
		constexpr auto bEnableStaticLighting = 0x15c; // char : 1
		constexpr auto CastShadow = 0x15c; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x15c; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x15c; // char : 1
		constexpr auto bCastDynamicShadow = 0x15c; // char : 1
		constexpr auto bCastStaticShadow = 0x15c; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x15c; // char : 1
		constexpr auto bReceivesDecals = 0x15c; // char : 1
		constexpr auto bOverrideLightMapRes = 0x15d; // char : 1
		constexpr auto OverriddenLightMapRes = 0x160; // int32_t
		constexpr auto LightmapType = 0x164; // ELightmapType
		constexpr auto bUseAsOccluder = 0x168; // char : 1
		constexpr auto BodyInstance = 0x170; // FBodyInstance
		constexpr auto CustomNavigableGeometry = 0x280; // EHasCustomNavigableGeometry
		constexpr auto LightingChannels = 0x281; // FLightingChannels
		constexpr auto bRenderCustomDepth = 0x284; // char : 1
		constexpr auto CustomDepthStencilValue = 0x288; // int32_t
		constexpr auto TranslucencySortPriority = 0x28c; // int32_t
		constexpr auto CollisionRadius = 0x290; // float
		constexpr auto ShadeRadius = 0x294; // float
		constexpr auto NumSteps = 0x298; // int32_t
		constexpr auto InitialSeedDensity = 0x29c; // float
		constexpr auto AverageSpreadDistance = 0x2a0; // float
		constexpr auto SpreadVariance = 0x2a4; // float
		constexpr auto SeedsPerStep = 0x2a8; // int32_t
		constexpr auto DistributionSeed = 0x2ac; // int32_t
		constexpr auto MaxInitialSeedOffset = 0x2b0; // float
		constexpr auto bCanGrowInShade = 0x2b4; // bool
		constexpr auto bSpawnsInShade = 0x2b5; // bool
		constexpr auto MaxInitialAge = 0x2b8; // float
		constexpr auto MaxAge = 0x2bc; // float
		constexpr auto OverlapPriority = 0x2c0; // float
		constexpr auto ProceduralScale = 0x2c4; // FFloatInterval
		constexpr auto ScaleCurve = 0x2d0; // FRuntimeFloatCurve
		constexpr auto ChangeCount = 0x358; // int32_t
		constexpr auto ReapplyDensity = 0x35c; // char : 1
		constexpr auto ReapplyRadius = 0x35c; // char : 1
		constexpr auto ReapplyAlignToNormal = 0x35c; // char : 1
		constexpr auto ReapplyRandomYaw = 0x35c; // char : 1
		constexpr auto ReapplyScaling = 0x35c; // char : 1
		constexpr auto ReapplyScaleX = 0x35c; // char : 1
		constexpr auto ReapplyScaleY = 0x35c; // char : 1
		constexpr auto ReapplyScaleZ = 0x35c; // char : 1
		constexpr auto ReapplyRandomPitchAngle = 0x35d; // char : 1
		constexpr auto ReapplyGroundSlope = 0x35d; // char : 1
		constexpr auto ReapplyHeight = 0x35d; // char : 1
		constexpr auto ReapplyLandscapeLayers = 0x35d; // char : 1
		constexpr auto ReapplyZOffset = 0x35d; // char : 1
		constexpr auto ReapplyCollisionWithWorld = 0x35d; // char : 1
		constexpr auto ReapplyVertexColorMask = 0x35d; // char : 1
		constexpr auto bEnableDensityScaling = 0x35d; // char : 1
		constexpr auto DensityScalingBias = 0x360; // float
		constexpr auto RuntimeVirtualTextures = 0x368; // TArray<URuntimeVirtualTexture*>
		constexpr auto VirtualTextureCullMips = 0x378; // int32_t
		constexpr auto VirtualTextureRenderPassType = 0x37c; // ERuntimeVirtualTextureMainPassType
	}

	namespace n_UMovieSceneCameraCutTrack {
		constexpr auto bCanBlend = 0x60; // bool
		constexpr auto Sections = 0x68; // TArray<UMovieSceneSection*>
	}

	namespace n_UMovieSceneCaptureProtocolBase {
		constexpr auto State = 0x58; // EMovieSceneCaptureProtocolState
	}

	namespace n_UAkLateReverbComponent {
		constexpr auto bEnable = 0x230; // char : 1
		constexpr auto AuxBus = 0x238; // UAkAuxBus*
		constexpr auto AuxBusName = 0x240; // FString
		constexpr auto SendLevel = 0x250; // float
		constexpr auto FadeRate = 0x254; // float
		constexpr auto Priority = 0x258; // float
		constexpr auto NextLowerPriorityComponent = 0x260; // UAkLateReverbComponent*
	}

	namespace n_ALandscapeProxy {
		constexpr auto SplineComponent = 0x2a0; // ULandscapeSplinesComponent*
		constexpr auto LandscapeGuid = 0x2a8; // FGuid
		constexpr auto LandscapeSectionOffset = 0x2b8; // FIntPoint
		constexpr auto MaxLODLevel = 0x2c0; // int32_t
		constexpr auto LODDistanceFactor = 0x2c4; // float
		constexpr auto LODFalloff = 0x2c8; // ELandscapeLODFalloff
		constexpr auto ComponentScreenSizeToUseSubSections = 0x2cc; // float
		constexpr auto LOD0ScreenSize = 0x2d0; // float
		constexpr auto LOD0DistributionSetting = 0x2d4; // float
		constexpr auto LODDistributionSetting = 0x2d8; // float
		constexpr auto TessellationComponentScreenSize = 0x2dc; // float
		constexpr auto UseTessellationComponentScreenSizeFalloff = 0x2e0; // bool
		constexpr auto TessellationComponentScreenSizeFalloff = 0x2e4; // float
		constexpr auto OccluderGeometryLOD = 0x2e8; // int32_t
		constexpr auto StaticLightingLOD = 0x2ec; // int32_t
		constexpr auto DefaultPhysMaterial = 0x2f0; // UPhysicalMaterial*
		constexpr auto StreamingDistanceMultiplier = 0x2f8; // float
		constexpr auto LandscapeMaterial = 0x300; // UMaterialInterface*
		constexpr auto LandscapeHoleMaterial = 0x328; // UMaterialInterface*
		constexpr auto LandscapeMaterialsOverride = 0x330; // TArray<FLandscapeProxyMaterialOverride>
		constexpr auto bMeshHoles = 0x340; // bool
		constexpr auto MeshHolesMaxLod = 0x341; // char
		constexpr auto RuntimeVirtualTextures = 0x348; // TArray<URuntimeVirtualTexture*>
		constexpr auto VirtualTextureNumLods = 0x358; // int32_t
		constexpr auto VirtualTextureLodBias = 0x35c; // int32_t
		constexpr auto VirtualTextureRenderPassType = 0x360; // ERuntimeVirtualTextureMainPassType
		constexpr auto NegativeZBoundsExtension = 0x364; // float
		constexpr auto PositiveZBoundsExtension = 0x368; // float
		constexpr auto LandscapeComponents = 0x370; // TArray<ULandscapeComponent*>
		constexpr auto CollisionComponents = 0x380; // TArray<ULandscapeHeightfieldCollisionComponent*>
		constexpr auto FoliageComponents = 0x390; // TArray<UHierarchicalInstancedStaticMeshComponent*>
		constexpr auto bHasLandscapeGrass = 0x404; // bool
		constexpr auto StaticLightingResolution = 0x408; // float
		constexpr auto bCastStaticShadow = 0x40c; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x40c; // char : 1
		constexpr auto bCastFarShadow = 0x40c; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x410; // char : 1
		constexpr auto LightingChannels = 0x411; // FLightingChannels
		constexpr auto bUseMaterialPositionOffsetInStaticLighting = 0x414; // char : 1
		constexpr auto bRenderCustomDepth = 0x414; // char : 1
		constexpr auto CustomDepthStencilValue = 0x418; // int32_t
		constexpr auto LDMaxDrawDistance = 0x41c; // float
		constexpr auto LightmassSettings = 0x420; // FLightmassPrimitiveSettings
		constexpr auto CollisionMipLevel = 0x438; // int32_t
		constexpr auto SimpleCollisionMipLevel = 0x43c; // int32_t
		constexpr auto CollisionThickness = 0x440; // float
		constexpr auto BodyInstance = 0x448; // FBodyInstance
		constexpr auto bGenerateOverlapEvents = 0x558; // char : 1
		constexpr auto bAffectsGroundFog = 0x558; // char : 1
		constexpr auto bBakeMaterialPositionOffsetIntoCollision = 0x558; // char : 1
		constexpr auto ComponentSizeQuads = 0x55c; // int32_t
		constexpr auto SubsectionSizeQuads = 0x560; // int32_t
		constexpr auto NumSubsections = 0x564; // int32_t
		constexpr auto bUsedForNavigation = 0x568; // char : 1
		constexpr auto bFillCollisionUnderLandscapeForNavmesh = 0x568; // char : 1
		constexpr auto bUseDynamicMaterialInstance = 0x56c; // bool
		constexpr auto NavigationGeometryGatheringMode = 0x56d; // ENavDataGatheringMode
		constexpr auto bUseLandscapeForCullingInvisibleHLODVertices = 0x56e; // bool
		constexpr auto bHasLayersContent = 0x56f; // bool
		constexpr auto WeightmapUsageMap = 0x570; // TMap<UTexture2D*, ULandscapeWeightmapUsage*>
	}

	namespace n_UMaterialExpressionCosine {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto Period = 0x5c; // float
	}

	namespace n_UCheatManager {
		constexpr auto DebugCameraControllerRef = 0x30; // ADebugCameraController*
		constexpr auto DebugCameraControllerClass = 0x38; // ADebugCameraController*
	}

	namespace n_URadiusHordeScenarioComponent {
		constexpr auto AffectCharactersRadius = 0xe8; // float
		constexpr auto CharacterMatchTags = 0xf0; // FGameplayTagQuery
		constexpr auto bActivateOnOwnerCharacterDeath = 0x138; // bool
		constexpr auto OnDeathActivateDelay = 0x13c; // float
		constexpr auto HordeOnCharacterClass = 0x140; // AGobiCharacter*
		constexpr auto AlertTriggerHordeType = 0x148; // EPlayerHordeTriggerTypes
		constexpr auto HordeTag = 0x14c; // FGameplayTag
		constexpr auto HordeReason = 0x158; // FString
	}

	namespace n_ANiagaraActor {
		constexpr auto NiagaraComponent = 0x2a0; // UNiagaraComponent*
		constexpr auto bDestroyOnSystemFinish = 0x2a8; // char : 1
	}

	namespace n_UFPAssetSlot {
		constexpr auto LoadedAssets = 0x58; // TArray<UObject*>
	}

	namespace n_UBTService_GameplayTags {
		constexpr auto Values = 0x78; // TArray<FGameplayTagChange>
	}

	namespace n_UGobiPathFollowingComponent {
		constexpr auto bShouldAvoidObstacles = 0x291; // bool
		constexpr auto bShouldAnticipateTurns = 0x292; // bool
		constexpr auto bShouldSlowdownAtGoal = 0x293; // bool
		constexpr auto bShouldUsePathOffset = 0x294; // bool
		constexpr auto bEnableAgentSeparation = 0x295; // bool
		constexpr auto AgentSeparationWeight = 0x298; // float
		constexpr auto TraversalTag = 0x29c; // FGameplayTag
		constexpr auto ShortcuttingTag = 0x2a4; // FGameplayTag
		constexpr auto DestructibleTag = 0x2ac; // FGameplayTag
		constexpr auto DefaultSteeringControl = 0x2b8; // USteeringControl*
		constexpr auto DefaultSteeringBehavior = 0x2c0; // USteeringBehavior*
		constexpr auto PathingWalkableFloorAngle = 0x2c8; // float
		constexpr auto PathingMaxStepHeight = 0x2d0; // float
	}

	namespace n_UIncapHealthUserWidget {
		constexpr auto SelectedItemTags = 0x458; // FGameplayTagQuery
	}

	namespace n_UPlayerStaminaComponent {
		constexpr auto OnStaminaExhaustionStarted = 0x130; // FMulticastInlineDelegate
		constexpr auto OnStaminaExhaustionFinished = 0x140; // FMulticastInlineDelegate
		constexpr auto OnStaminaStateChanged = 0x150; // FMulticastInlineDelegate
		constexpr auto CurrentStamina = 0x160; // float
		constexpr auto MaxStamina = 0x170; // FGamePropertyFloat
		constexpr auto StaminaRegenPerSecond = 0x1a8; // FGamePropertyFloat
		constexpr auto StaminaRegenerationDelay = 0x1e0; // float
		constexpr auto LowStaminaPercent = 0x1e4; // float
		constexpr auto InfiniteStaminaTagQuery = 0x1e8; // FCachedGameplayTagQuery
	}

	namespace n_UFramebufferCopy {
		constexpr auto TextureTarget = 0x38; // UTextureRenderTarget2D*
		constexpr auto FramebufferCopyReady = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UColorTableTexture {
		constexpr auto SourceTable = 0x38; // UDataTable*
		constexpr auto SourceTableSetting = 0x40; // EColorTableSource
		constexpr auto TargetTexture = 0x48; // UTexture2D*
		constexpr auto TextureData = 0x50; // TArray<FLinearColor>
	}

	namespace n_UEnvQueryContext_QuerierNavFloor {
		constexpr auto SearchHeight = 0x38; // float
	}

	namespace n_UWaterRipplerDef {
		constexpr auto MovingHeightRange = 0x38; // FVector2D
		constexpr auto MovingWidthRange = 0x40; // FVector2D
		constexpr auto Strength = 0x48; // FVector2D
		constexpr auto Size = 0x50; // FVector2D
		constexpr auto Lifetime = 0x58; // FVector2D
		constexpr auto Frequency = 0x60; // FVector2D
		constexpr auto ForceType = 0x68; // EWaterRippleStartType
		constexpr auto EnableAmbientRipples = 0x69; // bool
		constexpr auto AmbientRippleStrength = 0x6c; // FVector2D
		constexpr auto AmbientRippleSize = 0x74; // FVector2D
	}

	namespace n_UFooter_WBP_C {
		constexpr auto UberGraphFrame = 0x458; // FPointerToUberGraphFrame
		constexpr auto FullScreenGradient = 0x460; // UImage*
		constexpr auto HR = 0x468; // UImage*
		constexpr auto LetterboxGradient = 0x470; // UImage*
		constexpr auto Tint = 0x478; // UImage*
		constexpr auto SetFillColor = 0x480; // FSlateColor
		constexpr auto SetFillOpacity = 0x4b0; // float
		constexpr auto SetFillVisibility = 0x4b4; // ESlateVisibility
		constexpr auto SetHRVisibility = 0x4b5; // ESlateVisibility
		constexpr auto SetLetterboxGradientVisibility = 0x4b6; // ESlateVisibility
		constexpr auto SetFullScreenGradientVisibility = 0x4b7; // ESlateVisibility
	}

	namespace n_UBlendSpace1D {
		constexpr auto bScaleAnimation = 0x150; // bool
	}

	namespace n_UComboBoxString {
		constexpr auto DefaultOptions = 0x148; // TArray<FString>
		constexpr auto SelectedOption = 0x158; // FString
		constexpr auto WidgetStyle = 0x168; // FComboBoxStyle
		constexpr auto ItemStyle = 0x588; // FTableRowStyle
		constexpr auto ContentPadding = 0xde8; // FMargin
		constexpr auto MaxListHeight = 0xdf8; // float
		constexpr auto HasDownArrow = 0xdfc; // bool
		constexpr auto EnableGamepadNavigationMode = 0xdfd; // bool
		constexpr auto Font = 0xe00; // FSlateFontInfo
		constexpr auto ForegroundColor = 0xe60; // FSlateColor
		constexpr auto bIsFocusable = 0xe90; // bool
		constexpr auto bIsFocusedOnHover = 0xe91; // bool
		constexpr auto bPlaySoundOnClear = 0xe92; // bool
		constexpr auto ItemNavigationSound = 0xe98; // FSlateSound
		constexpr auto ConsumeMouseWheel = 0xeb0; // EConsumeMouseWheel
		constexpr auto OnGenerateWidgetEvent = 0xeb4; // FDelegate
		constexpr auto OnSelectionChanged = 0xec8; // FMulticastInlineDelegate
		constexpr auto OnOpening = 0xed8; // FMulticastInlineDelegate
	}

	namespace n_URegions {
		constexpr auto Regions = 0x30; // TArray<FWebServiceRegion>
	}

	namespace n_UPathMoveScaleMod {
		constexpr auto Tag = 0xd0; // FGameplayTag
	}

	namespace n_UTempPerkEntryUserWidget {
		constexpr auto bPreventExpiration = 0x458; // bool
	}

	namespace n_UMaterialExpressionLandscapeGrassOutput {
		constexpr auto GrassTypes = 0x48; // TArray<FGrassInput>
	}

	namespace n_UPlayerName_WBP_C {
		constexpr auto UberGraphFrame = 0x5a8; // FPointerToUberGraphFrame
		constexpr auto PlatformIcon = 0x5b0; // UPlatformIcon_WBP_C*
		constexpr auto PlayerNameText = 0x5b8; // UTextBlock*
		constexpr auto ScaleBox_63 = 0x5c0; // UScaleBox*
		constexpr auto NameFont = 0x5c8; // FSlateFontInfo
		constexpr auto TextJustification = 0x628; // ETextJustify
		constexpr auto bDisableScaling = 0x629; // bool
	}

	namespace n_ULevel {
		constexpr auto OwningWorld = 0xc0; // UWorld*
		constexpr auto Model = 0xc8; // UModel*
		constexpr auto ModelComponents = 0xd0; // TArray<UModelComponent*>
		constexpr auto WhitelistedActorFactoryNames = 0xf0; // TArray<FString>
		constexpr auto ActorCluster = 0x100; // ULevelActorContainer*
		constexpr auto NumTextureStreamingUnbuiltComponents = 0x108; // int32_t
		constexpr auto NumTextureStreamingDirtyResources = 0x10c; // int32_t
		constexpr auto LevelScriptActor = 0x110; // ALevelScriptActor*
		constexpr auto NavListStart = 0x118; // ANavigationObjectBase*
		constexpr auto NavListEnd = 0x120; // ANavigationObjectBase*
		constexpr auto NavDataChunks = 0x128; // TArray<UNavigationDataChunk*>
		constexpr auto LightmapTotalSize = 0x138; // float
		constexpr auto ShadowmapTotalSize = 0x13c; // float
		constexpr auto StaticNavigableGeometry = 0x140; // TArray<FVector>
		constexpr auto StreamingTextureGuids = 0x150; // TArray<FGuid>
		constexpr auto LevelBuildDataId = 0x1f8; // FGuid
		constexpr auto MapBuildData = 0x208; // UMapBuildDataRegistry*
		constexpr auto LightBuildLevelOffset = 0x210; // FIntVector
		constexpr auto bIsLightingScenario = 0x21c; // char : 1
		constexpr auto bTextureStreamingRotationChanged = 0x21c; // char : 1
		constexpr auto bStaticComponentsRegisteredInStreamingManager = 0x21c; // char : 1
		constexpr auto bIsVisible = 0x21c; // char : 1
		constexpr auto WorldSettings = 0x268; // AWorldSettings*
		constexpr auto AssetUserData = 0x278; // TArray<UAssetUserData*>
		constexpr auto DestroyedReplicatedStaticActors = 0x298; // TArray<FReplicatedStaticActorDestructionInfo>
	}

	namespace n_UBTService_Angle {
		constexpr auto TargetBlackboardKey = 0xa0; // FBlackboardKeySelector
		constexpr auto AngleLabelEnum = 0xc8; // UEnum*
		constexpr auto AngleRanges = 0xd0; // TArray<FAngleRange>
	}

	namespace n_ADatasmithAreaLightActor {
		constexpr auto LightType = 0x2a0; // EDatasmithAreaLightActorType
		constexpr auto LightShape = 0x2a1; // EDatasmithAreaLightActorShape
		constexpr auto Dimensions = 0x2a4; // FVector2D
		constexpr auto Intensity = 0x2ac; // float
		constexpr auto IntensityUnits = 0x2b0; // ELightUnits
		constexpr auto Color = 0x2b4; // FLinearColor
		constexpr auto Temperature = 0x2c4; // float
		constexpr auto IESTexture = 0x2c8; // UTextureLightProfile*
		constexpr auto bUseIESBrightness = 0x2d0; // bool
		constexpr auto IESBrightnessScale = 0x2d4; // float
		constexpr auto Rotation = 0x2d8; // FRotator
		constexpr auto SourceRadius = 0x2e4; // float
		constexpr auto SourceLength = 0x2e8; // float
		constexpr auto AttenuationRadius = 0x2ec; // float
		constexpr auto SpotlightInnerAngle = 0x2f0; // float
		constexpr auto SpotlightOuterAngle = 0x2f4; // float
	}

	namespace n_UInterpTrackInstMove {
		constexpr auto ResetLocation = 0x30; // FVector
		constexpr auto ResetRotation = 0x3c; // FRotator
	}

	namespace n_AMolotov_TargetingReticle_BP_C {
		constexpr auto VFX_UI_Grenade_Targeting_PS = 0x2a0; // UParticleSystemComponent*
		constexpr auto Root = 0x2a8; // USceneComponent*
		constexpr auto Sphere = 0x2b0; // UStaticMeshComponent*
		constexpr auto Billboard = 0x2b8; // UBillboardComponent*
		constexpr auto Arrow = 0x2c0; // UArrowComponent*
	}

	namespace n_UPhysicsThrusterComponent {
		constexpr auto ThrustStrength = 0x230; // float
	}

	namespace n_ACharacterCustomizationManager {
		constexpr auto CustomizationMannequin = 0x2a0; // ACustomizationMannequin*
		constexpr auto WeaponCustomizationMannequin = 0x2a8; // AWeaponCustomizationMannequin*
		constexpr auto ViewTargetTransitionParams = 0x2b0; // FViewTargetTransitionParams
		constexpr auto CharacterCustomizationCamera = 0x2c0; // ACameraActor*
		constexpr auto WeaponCustomizationCamera = 0x2c8; // ACameraActor*
		constexpr auto CharacterToActorMap = 0x2d0; // TArray<FCharacterRelatedActors>
	}

	namespace n_USoundNode {
		constexpr auto ChildNodes = 0x30; // TArray<USoundNode*>
	}

	namespace n_UStereoLayerComponent {
		constexpr auto bLiveTexture = 0x230; // char : 1
		constexpr auto bSupportsDepth = 0x230; // char : 1
		constexpr auto bNoAlphaChannel = 0x230; // char : 1
		constexpr auto Texture = 0x238; // UTexture*
		constexpr auto LeftTexture = 0x240; // UTexture*
		constexpr auto bQuadPreserveTextureRatio = 0x248; // char : 1
		constexpr auto QuadSize = 0x24c; // FVector2D
		constexpr auto UVRect = 0x254; // FBox2D
		constexpr auto CylinderRadius = 0x268; // float
		constexpr auto CylinderOverlayArc = 0x26c; // float
		constexpr auto CylinderHeight = 0x270; // int32_t
		constexpr auto EquirectProps = 0x274; // FEquirectProps
		constexpr auto StereoLayerType = 0x2bc; // EStereoLayerType
		constexpr auto StereoLayerShape = 0x2bd; // EStereoLayerShape
		constexpr auto Shape = 0x2c0; // UStereoLayerShape*
		constexpr auto Priority = 0x2c8; // int32_t
	}

	namespace n_UBaseBrushTool {
		constexpr auto BrushProperties = 0xc8; // UBrushBaseProperties*
		constexpr auto bInBrushStroke = 0xd0; // bool
		constexpr auto LastBrushStamp = 0xd4; // FBrushStampData
		constexpr auto PropertyClass = 0x190; // TSoftClassPtr<UObject>
		constexpr auto BrushStampIndicator = 0x1b8; // UBrushStampIndicator*
	}

	namespace n_UAIPerceptionSystem {
		constexpr auto Senses = 0x90; // TArray<UAISense*>
		constexpr auto PerceptionAgingRate = 0xa0; // float
	}

	namespace n_UMoveIgnoreActorsComponent {
		constexpr auto OverlapPadding = 0x130; // float
	}

	namespace n_UBTTask_WaitBlackboardTime {
		constexpr auto BlackboardKey = 0x80; // FBlackboardKeySelector
	}

	namespace n_UHapticFeedbackEffect_SoundWave {
		constexpr auto SoundWave = 0x30; // USoundWave*
	}

	namespace n_USubsurfaceProfile {
		constexpr auto Settings = 0x30; // FSubsurfaceProfileStruct
	}

	namespace n_UMeshMaterialParamSet {
		constexpr auto bDevDisabled = 0x38; // bool
		constexpr auto SlotNames = 0x40; // TArray<FName>
		constexpr auto TagRequirements = 0x50; // FGameplayTagQuery
		constexpr auto ParamValuesSet = 0x98; // TArray<FMeshMaterialParamValuesSet>
	}

	namespace n_UAnimEvalSet_MorgueFreezer_DeathReaction_C {
		constexpr auto AvatarHealth = 0xc0; // FGameplayEval_Health
		constexpr auto AvatarTags = 0x118; // FGameplayEval_GameplayTags
	}

	namespace n_UAnimEvalSet_Shared_DeathReaction_Gib_C {
		constexpr auto HasTags = 0x4a0; // FGameplayEval_GameplayTags
	}

	namespace n_UInterpTrackLinearColorBase {
		constexpr auto LinearColorTrack = 0x78; // FInterpCurveLinearColor
		constexpr auto CurveTension = 0x90; // float
	}

	namespace n_UDatasmithSkyLightComponentTemplate {
		constexpr auto SourceType = 0x38; // ESkyLightSourceType
		constexpr auto CubemapResolution = 0x3c; // int32_t
		constexpr auto Cubemap = 0x40; // UTextureCube*
	}

	namespace n_UConsole {
		constexpr auto ConsoleTargetPlayer = 0x40; // ULocalPlayer*
		constexpr auto DefaultTexture_Black = 0x48; // UTexture2D*
		constexpr auto DefaultTexture_White = 0x50; // UTexture2D*
		constexpr auto HistoryBuffer = 0x70; // TArray<FString>
	}

	namespace n_UEnvQueryTest_CanSeeSpawnActor {
		constexpr auto LookerContext = 0x208; // UEnvQueryContext*
		constexpr auto LookerZOffset = 0x210; // float
		constexpr auto MaxTimeInActiveAreaSetToConsiderNotVisible = 0x214; // float
	}

	namespace n_UZombieCrosshairUserWidget {
		constexpr auto SavedReticleColor = 0x458; // FLinearColor
		constexpr auto SupportedGameplayTags = 0x468; // FGameplayTag
	}

	namespace n_UBasicOverlays {
		constexpr auto Overlays = 0x30; // TArray<FOverlayItem>
	}

	namespace n_UNoiseField {
		constexpr auto MinRange = 0xe8; // float
		constexpr auto MaxRange = 0xec; // float
		constexpr auto Transform = 0xf0; // FTransform
	}

	namespace n_UClingPropertyMod {
		constexpr auto Type = 0xf0; // EClingPropertyModType
		constexpr auto CanAttach = 0xf4; // int32_t
	}

	namespace n_UMovieScene3DTransformSection {
		constexpr auto TransformMask = 0xe8; // FMovieSceneTransformMask
		constexpr auto Translation = 0xf0; // FMovieSceneFloatChannel [0x3]
		constexpr auto Rotation = 0x2d0; // FMovieSceneFloatChannel [0x3]
		constexpr auto Scale = 0x4b0; // FMovieSceneFloatChannel [0x3]
		constexpr auto ManualWeight = 0x690; // FMovieSceneFloatChannel
		constexpr auto bUseQuaternionInterpolation = 0x734; // bool
	}

	namespace n_UChatMessage {
		constexpr auto Message = 0x30; // FText
	}

	namespace n_ULandscapeHeightfieldCollisionComponent {
		constexpr auto ComponentLayerInfos = 0x4b0; // TArray<ULandscapeLayerInfoObject*>
		constexpr auto SectionBaseX = 0x4c0; // int32_t
		constexpr auto SectionBaseY = 0x4c4; // int32_t
		constexpr auto CollisionSizeQuads = 0x4c8; // int32_t
		constexpr auto CollisionScale = 0x4cc; // float
		constexpr auto SimpleCollisionSizeQuads = 0x4d0; // int32_t
		constexpr auto CollisionQuadFlags = 0x4d8; // TArray<char>
		constexpr auto HeightfieldGuid = 0x4e8; // FGuid
		constexpr auto CachedLocalBox = 0x4f8; // FBox
		constexpr auto RenderComponent = 0x514; // LazyObjectProperty
		constexpr auto CookedPhysicalMaterials = 0x540; // TArray<UPhysicalMaterial*>
	}

	namespace n_UAnimNotify_SetChargeDistance {
		constexpr auto Charge = 0x40; // UAnimContext_ChargeComponent*
		constexpr auto TargetLocation = 0x48; // UAnimContext_Transform*
	}

	namespace n_UGameplayAction_Hide {
		constexpr auto HideDuration = 0x2e8; // FVector2D
	}

	namespace n_APlanarReflection {
		constexpr auto PlanarReflectionComponent = 0x2b0; // UPlanarReflectionComponent*
		constexpr auto bShowPreviewPlane = 0x2b8; // bool
	}

	namespace n_UTweenRotatorLatentFactory {
		constexpr auto OnTweenStart = 0x38; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0x48; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0x58; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionSetMaterialAttributes {
		constexpr auto Inputs = 0x48; // TArray<FExpressionInput>
		constexpr auto AttributeSetTypes = 0x58; // TArray<FGuid>
	}

	namespace n_ULifeStateIncap {
		constexpr auto MaxIncapCount = 0xb8; // FGamePropertyInt
		constexpr auto IncapHealthPool = 0xf0; // float
		constexpr auto TemporaryHealthParams = 0xf8; // FTemporaryHealthParams
		constexpr auto bCanDie = 0x110; // bool
		constexpr auto PermanentAppliedTags = 0x118; // FGameplayTagContainer
		constexpr auto CurrentIncapCount = 0x138; // int32_t
		constexpr auto CollisionProfile = 0x13c; // FCollisionProfileName
	}

	namespace n_UParticleModule {
		constexpr auto bSpawnModule = 0x30; // char : 1
		constexpr auto bUpdateModule = 0x30; // char : 1
		constexpr auto bFinalUpdateModule = 0x30; // char : 1
		constexpr auto bUpdateForGPUEmitter = 0x30; // char : 1
		constexpr auto bCurvesAsColor = 0x30; // char : 1
		constexpr auto b3DDrawMode = 0x30; // char : 1
		constexpr auto bSupported3DDrawMode = 0x30; // char : 1
		constexpr auto bEnabled = 0x30; // char : 1
		constexpr auto bEditable = 0x31; // char : 1
		constexpr auto LODDuplicate = 0x31; // char : 1
		constexpr auto bSupportsRandomSeed = 0x31; // char : 1
		constexpr auto bRequiresLoopingNotification = 0x31; // char : 1
		constexpr auto LODValidity = 0x32; // char
	}

	namespace n_UInterpData {
		constexpr auto InterpLength = 0x30; // float
		constexpr auto PathBuildTime = 0x34; // float
		constexpr auto InterpGroups = 0x38; // TArray<UInterpGroup*>
		constexpr auto CurveEdSetup = 0x48; // UInterpCurveEdSetup*
		constexpr auto EdSectionStart = 0x50; // float
		constexpr auto EdSectionEnd = 0x54; // float
		constexpr auto bShouldBakeAndPrune = 0x58; // char : 1
		constexpr auto CachedDirectorGroup = 0x60; // UInterpGroupDirector*
		constexpr auto AllEventNames = 0x68; // TArray<FName>
	}

	namespace n_UAISense {
		constexpr auto DefaultExpirationAge = 0x30; // float
		constexpr auto NotifyType = 0x34; // EAISenseNotifyType
		constexpr auto bWantsNewPawnNotification = 0x38; // char : 1
		constexpr auto bAutoRegisterAllPawnsAsSources = 0x38; // char : 1
		constexpr auto PerceptionSystemInstance = 0x40; // UAIPerceptionSystem*
	}

	namespace n_ULicensePopupUserWidget {
		constexpr auto ScreenMode = 0x500; // ELicensePopupMode
	}

	namespace n_UCardFanSlot {
		constexpr auto VerticalAlignment = 0x40; // EVerticalAlignment
	}

	namespace n_UMouseCursorDefault_WBP_C {
		constexpr auto Icon = 0x458; // UImage*
	}

	namespace n_UMovieScene3DConstraintSection {
		constexpr auto ConstraintId = 0xe8; // FGuid
		constexpr auto ConstraintBindingID = 0xf8; // FMovieSceneObjectBindingID
	}

	namespace n_UAnimNotifyState_MotionCorrection {
		constexpr auto bDrawDebug = 0x38; // bool
		constexpr auto bIsLinkedToGoal = 0x39; // bool
		constexpr auto LinkedGoal = 0x3c; // FName
		constexpr auto CorrectionGoal = 0x48; // FMotionCorrectionGoal
	}

	namespace n_UParticleModuleLocationEmitter {
		constexpr auto EmitterName = 0x38; // FName
		constexpr auto SelectionMethod = 0x40; // ELocationEmitterSelectionMethod
		constexpr auto InheritSourceVelocity = 0x44; // char : 1
		constexpr auto InheritSourceVelocityScale = 0x48; // float
		constexpr auto bInheritSourceRotation = 0x4c; // char : 1
		constexpr auto InheritSourceRotationScale = 0x50; // float
	}

	namespace n_UOnHealthChangeTrigger {
		constexpr auto TimerInterval = 0x60; // float
		constexpr auto MinHealthForOnHealed = 0x64; // float
		constexpr auto OnHeroDamagedTagExceptions = 0x68; // FGameplayTagContainer
		constexpr auto HealthMaxPercentageForNag = 0x88; // float
		constexpr auto HealthMaxPercentageForLowHealth = 0x8c; // float
		constexpr auto HealthMaxPercentageForLowHealthBig = 0x90; // float
		constexpr auto DoomCoughChance = 0x94; // float
		constexpr auto FriendlyFireDelay = 0x98; // float
		constexpr auto FriendlyFireCooldown = 0x9c; // float
		constexpr auto HealingItemTagQuery = 0xa8; // FGameplayTagQuery
		constexpr auto BulletDamageTypeTag = 0xf0; // FGameplayTag
		constexpr auto FireDamageTypeContainer = 0xf8; // FGameplayTagContainer
		constexpr auto FireDamageAmountReq = 0x118; // float
	}

	namespace n_AItem {
		constexpr auto RowHandle = 0x318; // FDataTableRowHandle
		constexpr auto Name = 0x338; // FName
		constexpr auto EquipmentSlot = 0x340; // EEquipmentSlot
		constexpr auto InternalRootComponent = 0x348; // USceneComponent*
		constexpr auto MeshManagementComponent = 0x350; // UItemMeshManagementComponent*
		constexpr auto MovementTickableComponents = 0x420; // TArray<UMovementTickableComponent*>
		constexpr auto ItemToReturnWhenDropped = 0x430; // FDataTableRowHandle
		constexpr auto BaseFirstPersonFoV = 0x450; // FFPFOVConfiguration
		constexpr auto AttachmentFoVConfigurations = 0x478; // TArray<FFirstPersonFoVAttachmentConfiguration>
		constexpr auto AdditionalItemGrantedWhenPickedUp = 0x488; // FDataTableRowHandle
	}

	namespace n_UTraceMeleeComponent {
		constexpr auto ActiveMontages = 0x1e0; // FTraceMeleeActiveMontage
		constexpr auto OverlappedActors = 0x1f0; // TArray<AActor*>
		constexpr auto DamagedCharacters = 0x200; // TArray<AActor*>
		constexpr auto ImpactCueHandle = 0x210; // FGameplayCueHandle
		constexpr auto CurrentState_MoveTick = 0x228; // EHeroMeleeState
		constexpr auto ComboCount_MoveTick = 0x22a; // char
		constexpr auto ReplicatedAttackData = 0x22c; // FReplicatedAttackData
		constexpr auto StartBuildUpSound = 0x388; // UAkAudioEvent*
		constexpr auto BuildUpMaxSound = 0x390; // UAkAudioEvent*
		constexpr auto ExitBuildUpSound = 0x3a0; // UAkAudioEvent*
		constexpr auto bAlwaysPlayExitBuildUpSound = 0x3a8; // bool
		constexpr auto ExertBigOnReleaseChance = 0x3ac; // float
		constexpr auto MeleeSwipeSound = 0x3b8; // UAkAudioEvent*
		constexpr auto LowStamMeleeSwipeSwt = 0x3c0; // UAkAudioEvent*
		constexpr auto BuildUpMeleeSwipeSound = 0x3c8; // UAkAudioEvent*
		constexpr auto NoCleavePowerSound = 0x3d0; // UAkAudioEvent*
		constexpr auto MeleeHitSound = 0x3d8; // UAkAudioEvent*
		constexpr auto HeavyHitterMeleeHitSounds = 0x3e0; // TArray<UAkAudioEvent*>
		constexpr auto BuildUpMeleeHitSounds = 0x3f0; // TArray<UAkAudioEvent*>
		constexpr auto SharedMeleeSwipeSound = 0x400; // FName
		constexpr auto ImpactCue = 0x408; // FGameplayTag
		constexpr auto BashOverrideDialogue = 0x410; // FDataTableRowHandle
		constexpr auto AttackStartForceFeedback = 0x430; // UForceFeedbackEffect*
		constexpr auto InitialHitForceFeedback = 0x438; // UForceFeedbackEffect*
		constexpr auto TriggerEffects = 0x440; // FTriggerEffectsDefinition
		constexpr auto MeleeActiveAppliedTags = 0x450; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x470; // FGameplayTagContainer
		constexpr auto bUsesPrimaryButton = 0x570; // bool
		constexpr auto EffectsAppliedToHitActor = 0x578; // TArray<UGameplayEffect*>
		constexpr auto CleaveDefense = 0x588; // UBulletPenetrationDefense*
		constexpr auto DamageType = 0x590; // UGobiDamageType*
		constexpr auto HeavyAttackDamageType = 0x598; // UGobiDamageType*
		constexpr auto LightAttackSequence = 0x5a0; // TArray<FTraceMeleeAttack>
		constexpr auto HeavyAttackSequence = 0x5b0; // TArray<FHeavyHeroMeleeAttack>
		constexpr auto BlockMontageFP = 0x5c0; // UAnimMontage*
		constexpr auto BlockMontage3P = 0x5c8; // UAnimMontage*
		constexpr auto BlockingStateAppliedEffects = 0x5d0; // TArray<UGameplayEffect*>
		constexpr auto BlockedDamageSelfAppliedEffects = 0x5e0; // TArray<UGameplayEffect*>
		constexpr auto BlockedDamageInstigatorAppliedEffects = 0x5f0; // TArray<UGameplayEffect*>
		constexpr auto TraceMeleeTuning = 0x600; // FTraceMeleeTuning
		constexpr auto HeavyAttackRequiredQuery = 0x6a0; // FGameplayTagQuery
		constexpr auto BlockedDamageInstigatorQuery = 0x6e8; // FGameplayTagQuery
		constexpr auto BlockedDamageDamageTypeQuery = 0x730; // FGameplayTagQuery
	}

	namespace n_UEvansburgh_D_Hero_C4_Holder_Lesson_BP_C {
		constexpr auto UberGraphFrame = 0x460; // FPointerToUberGraphFrame
	}

	namespace n_UTRSCubemapCapturer {
		constexpr auto CaptureComponents = 0x40; // TArray<USceneCaptureComponent2D*>
	}

	namespace n_UParticleModuleVectorFieldGlobal {
		constexpr auto bOverrideGlobalVectorFieldTightness = 0x38; // char : 1
		constexpr auto GlobalVectorFieldScale = 0x3c; // float
		constexpr auto GlobalVectorFieldTightness = 0x40; // float
	}

	namespace n_UMovieSceneBoolSection {
		constexpr auto DefaultValue = 0xe8; // bool
		constexpr auto BoolCurve = 0xf0; // FMovieSceneBoolChannel
	}

	namespace n_UAxisPositionGizmo {
		constexpr auto AxisSource = 0x50; // TScriptInterface<IGizmoAxisSource>
		constexpr auto ParameterSource = 0x60; // TScriptInterface<IGizmoFloatParameterSource>
		constexpr auto HitTarget = 0x70; // TScriptInterface<IGizmoClickTarget>
		constexpr auto StateTarget = 0x80; // TScriptInterface<IGizmoStateTarget>
		constexpr auto bEnableSignedAxis = 0x90; // bool
		constexpr auto bInInteraction = 0x91; // bool
		constexpr auto InteractionOrigin = 0x94; // FVector
		constexpr auto InteractionAxis = 0xa0; // FVector
		constexpr auto InteractionStartPoint = 0xac; // FVector
		constexpr auto InteractionCurPoint = 0xb8; // FVector
		constexpr auto InteractionStartParameter = 0xc4; // float
		constexpr auto InteractionCurParameter = 0xc8; // float
		constexpr auto ParameterSign = 0xcc; // float
	}

	namespace n_UInterpTrackInstAnimControl {
		constexpr auto LastUpdatePosition = 0x30; // float
	}

	namespace n_UWidget {
		constexpr auto Slot = 0x30; // UPanelSlot*
		constexpr auto bIsEnabledDelegate = 0x38; // FDelegate
		constexpr auto ToolTipText = 0x48; // FText
		constexpr auto ToolTipTextDelegate = 0x60; // FDelegate
		constexpr auto ToolTipWidget = 0x70; // UWidget*
		constexpr auto ToolTipWidgetDelegate = 0x78; // FDelegate
		constexpr auto VisibilityDelegate = 0x88; // FDelegate
		constexpr auto RenderTransform = 0x98; // FWidgetTransform
		constexpr auto RenderTransformPivot = 0xb4; // FVector2D
		constexpr auto bIsVariable = 0xbc; // char : 1
		constexpr auto bCreatedByConstructionScript = 0xbc; // char : 1
		constexpr auto bIsEnabled = 0xbc; // char : 1
		constexpr auto bShowDisabledEffect = 0xbc; // char : 1
		constexpr auto bPlaySoundOnFocus = 0xbc; // char : 1
		constexpr auto bOverride_Cursor = 0xbc; // char : 1
		constexpr auto AccessibleWidgetData = 0xc0; // USlateAccessibleWidgetData*
		constexpr auto bIsVolatile = 0xc8; // char : 1
		constexpr auto Cursor = 0xc9; // EMouseCursor
		constexpr auto Clipping = 0xca; // EWidgetClipping
		constexpr auto Visibility = 0xcb; // ESlateVisibility
		constexpr auto RenderOpacity = 0xcc; // float
		constexpr auto Navigation = 0xd0; // UWidgetNavigation*
		constexpr auto FlowDirectionPreference = 0xd8; // EFlowDirectionPreference
		constexpr auto NativeBindings = 0x100; // TArray<UPropertyBinding*>
		constexpr auto OnVisibilityChanged = 0x130; // FMulticastInlineDelegate
		constexpr auto bForceShowFocus = 0x140; // bool
		constexpr auto bShowFocusRectIfFocused = 0x141; // bool
	}

	namespace n_UApplyEffectItemTraceComponent {
		constexpr auto TraceDistance = 0x520; // float
		constexpr auto bTargetCharactersOnly = 0x524; // bool
		constexpr auto TraceChannel = 0x525; // ECollisionChannel
		constexpr auto RequiredClassType = 0x528; // UObject*
	}

	namespace n_AMatineeActorCameraAnim {
		constexpr auto CameraAnim = 0x348; // UCameraAnim*
	}

	namespace n_UTweenVectorLatentFactory {
		constexpr auto OnTweenStart = 0x38; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0x48; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0x58; // FMulticastInlineDelegate
	}

	namespace n_UInterpTrackFloatAnimBPParam {
		constexpr auto AnimBlueprintClass = 0x98; // UObject*
		constexpr auto AnimClass = 0xa0; // UAnimInstance*
		constexpr auto ParamName = 0xa8; // FName
	}

	namespace n_UGameplayEffectFireModeComponent {
		constexpr auto AlertRadiusScaleMod = 0x250; // FGamePropertyFloatMod
		constexpr auto BulletDamageScaleMod = 0x260; // FGamePropertyFloatMod
		constexpr auto BulletRangeScaleMod = 0x270; // FGamePropertyFloatMod
		constexpr auto StumbleDamageScaleMod = 0x280; // FGamePropertyFloatMod
		constexpr auto UnalertDamageScale = 0x290; // FGamePropertyFloatMod
		constexpr auto DelayBetweenShotsScale = 0x2a0; // FGamePropertyFloatMod
		constexpr auto WeakSpotDamageMultiplierMod = 0x2b0; // FGamePropertyFloatMod
		constexpr auto FireAnimAssetLookupTag = 0x2c0; // FGameplayTag
		constexpr auto RechamberAnimAssetLookupTag = 0x2c8; // FGameplayTag
		constexpr auto FireAudioAssetLookupTag = 0x2d0; // FGameplayTag
		constexpr auto MuzzleSocketAssetLookupTag = 0x2d8; // FGameplayTag
		constexpr auto WeaponTracerAssetLookupTag = 0x2e0; // FGameplayTag
	}

	namespace n_UAutoDestroySubsystem {
		constexpr auto ActorsToPoll = 0x40; // TArray<AActor*>
	}

	namespace n_UEnvQueryContext_Objective {
		constexpr auto GameplayObjectiveClass = 0x30; // FAIDataProviderUObjectValue
	}

	namespace n_AWaterRippler {
		constexpr auto WaterRipplerComponent = 0x2a0; // UWaterRipplerComponent*
	}

	namespace n_AGobiSpectatorPawn {
		constexpr auto OnSpectateTargetChanged = 0x320; // FMulticastInlineDelegate
		constexpr auto TargetActor = 0x330; // AActor*
		constexpr auto LocalHeroActor = 0x338; // AActor*
		constexpr auto PotentialTargets = 0x340; // TArray<AActor*>
	}

	namespace n_UInAppPurchaseCallbackProxy2 {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UBTCompositeNode {
		constexpr auto Children = 0x60; // TArray<FBTCompositeChild>
		constexpr auto Services = 0x70; // TArray<UBTService*>
		constexpr auto bApplyDecoratorScope = 0x90; // char : 1
	}

	namespace n_UAnimEvalSet_Bot_InteractTarget_C {
		constexpr auto Distance2D = 0xc0; // FGameplayEval_Distance
		constexpr auto DistanceVert = 0x190; // FGameplayEval_Distance
		constexpr auto ActorClass = 0x260; // FGameplayEval_ActorClass
		constexpr auto GameplayTags = 0x2b8; // FGameplayEval_GameplayTags
		constexpr auto CanUseUsable = 0x350; // FGameplayEval_CanUseUsable
	}

	namespace n_USoundSubmix {
		constexpr auto bMuteWhenBackgrounded = 0x48; // char : 1
		constexpr auto SubmixEffectChain = 0x50; // TArray<USoundEffectSubmixPreset*>
		constexpr auto AmbisonicsPluginSettings = 0x60; // USoundfieldEncodingSettingsBase*
		constexpr auto EnvelopeFollowerAttackTime = 0x68; // int32_t
		constexpr auto EnvelopeFollowerReleaseTime = 0x6c; // int32_t
		constexpr auto OutputVolume = 0x70; // float
		constexpr auto OnSubmixRecordedFileDone = 0x78; // FMulticastInlineDelegate
	}

	namespace n_UGameplayAction_HagAggro {
		constexpr auto AggroTellMontageSet = 0x210; // UMontageSet*
		constexpr auto AggroSuccessMontageSet = 0x218; // UMontageSet*
		constexpr auto AggroFailedMontageSet = 0x220; // UMontageSet*
		constexpr auto TimeToAggro = 0x228; // float
	}

	namespace n_UDialogueSystem {
		constexpr auto OnConversationBegin = 0x30; // FMulticastInlineDelegate
		constexpr auto OnConversationEnd = 0x40; // FMulticastInlineDelegate
		constexpr auto EventDefinitionTable = 0x50; // UDataTable*
		constexpr auto SpeakerTable = 0x58; // UDataTable*
		constexpr auto SpeakerMap = 0x60; // TMap<UDialogueComponent*, FSpeakerRuntimeData>
		constexpr auto DialoguePlayback = 0x290; // UDialoguePlayback*
		constexpr auto Debugger = 0x298; // ADialogueSystemDebugger*
		constexpr auto BankManager = 0x2a0; // ADialogueBankManger*
		constexpr auto DebuggerClass = 0x2a8; // ADialogueSystemDebugger*
		constexpr auto ResponseGroupTable = 0x2b0; // UDataTable*
		constexpr auto ConversationTable = 0x2b8; // UDataTable*
		constexpr auto DialogueAnimationTable = 0x2c0; // UDataTable*
		constexpr auto PriorityTable = 0x2c8; // UDataTable*
		constexpr auto LastSpokenDialogueComp = 0x2d0; // UDialogueComponent*
	}

	namespace n_ATRSSplineMeshActor {
		constexpr auto EditableSpline = 0x2a0; // USplineComponent*
		constexpr auto GeneratedSubObjects = 0x2a8; // TArray<USplineMeshComponent*>
		constexpr auto PointNumbers = 0x2b8; // TArray<UTextRenderComponent*>
		constexpr auto ConvertedMesh = 0x2c8; // UStaticMeshComponent*
		constexpr auto bFinalized = 0x2d0; // bool
		constexpr auto bAffectsNavigation = 0x2d1; // bool
		constexpr auto bDisableCollision = 0x2d2; // bool
		constexpr auto SplineMeshMode = 0x2d3; // ETRSSplineMeshActorSplineMeshMode
		constexpr auto ForwardAxis = 0x2d4; // ESplineMeshAxis
		constexpr auto GlobalBank = 0x2d8; // float
		constexpr auto GlobalScale = 0x2dc; // FVector
		constexpr auto Padding = 0x2e8; // float
		constexpr auto Mesh = 0x2f0; // UStaticMesh*
		constexpr auto bCastShadows = 0x2f8; // bool
		constexpr auto ForceLOD = 0x2f9; // int8_t
		constexpr auto bLockCurrentMeshArray = 0x2fa; // bool
		constexpr auto bContiguous = 0x2fb; // bool
		constexpr auto AvailableMeshes = 0x300; // TArray<FTRSSplineMeshActorSplineMeshElement>
		constexpr auto bSequential = 0x310; // bool
		constexpr auto bPreventAdjancency = 0x311; // bool
		constexpr auto CachedGlobalScale = 0x314; // FVector
		constexpr auto PerInstanceData = 0x320; // TArray<FTRSSplineMeshActorPerInstanceData>
		constexpr auto PerInstanceRotation = 0x330; // TArray<FVector>
		constexpr auto bUseCapMeshes = 0x340; // bool
		constexpr auto bOverrideEndPointData = 0x341; // bool
		constexpr auto EndPointDataOverride = 0x344; // FTRSSplineMeshActorPerInstanceData
		constexpr auto CapMeshes = 0x358; // FTRSSplineMeshActorCapData
		constexpr auto StaticMeshTypeToUse = 0x378; // ETRSSplineMeshActorMeshType
		constexpr auto bUsedWithWater = 0x379; // bool
		constexpr auto UMult = 0x37c; // float
		constexpr auto bAutoMultU = 0x380; // bool
		constexpr auto bFlipU = 0x381; // bool
		constexpr auto VMult = 0x384; // float
		constexpr auto bAutoMultV = 0x388; // bool
		constexpr auto bFlipV = 0x389; // bool
		constexpr auto AutoMultAdjust = 0x38c; // int32_t
		constexpr auto bDrawOnlySpline = 0x390; // bool
		constexpr auto bShowDebugMaterials = 0x391; // bool
		constexpr auto DebugMaterials = 0x398; // TArray<UMaterialInterface*>
		constexpr auto bDrawDebugNumbers = 0x3a8; // bool
		constexpr auto DebugNumbersPrefs = 0x3ac; // FTRSSplineMeshActorDebugNumbersPrefs
		constexpr auto MeshesToUse = 0x3b8; // TArray<FTRSSplineMeshActorSplineMeshElement>
		constexpr auto Distances = 0x3c8; // TArray<float>
		constexpr auto DebugMaterialsToUse = 0x3d8; // TArray<UMaterialInterface*>
		constexpr auto MeshesCache = 0x3e8; // TArray<FTRSSplineMeshActorSplineMeshElement>
		constexpr auto bMeshTypeSelected = 0x3f8; // bool
	}

	namespace n_UNiagaraDataInterfaceSpline {
		constexpr auto Source = 0x38; // AActor*
	}

	namespace n_UBTDecorator_CompareBBEntries {
		constexpr auto Operator = 0x70; // EBlackBoardEntryComparison
		constexpr auto BlackboardKeyA = 0x78; // FBlackboardKeySelector
		constexpr auto BlackboardKeyB = 0xa0; // FBlackboardKeySelector
	}

	namespace n_ALandscapeMeshProxyActor {
		constexpr auto LandscapeMeshProxyComponent = 0x2a0; // ULandscapeMeshProxyComponent*
	}

	namespace n_UBuildPatchManifest {
		constexpr auto ManifestFileVersion = 0x30; // char
		constexpr auto bIsFileData = 0x31; // bool
		constexpr auto AppID = 0x34; // uint32_t
		constexpr auto AppName = 0x38; // FString
		constexpr auto BuildVersion = 0x48; // FString
		constexpr auto LaunchExe = 0x58; // FString
		constexpr auto LaunchCommand = 0x68; // FString
		constexpr auto PrereqIds = 0x78; // TSet<FString>
		constexpr auto PrereqName = 0xc8; // FString
		constexpr auto PrereqPath = 0xd8; // FString
		constexpr auto PrereqArgs = 0xe8; // FString
		constexpr auto FileManifestList = 0xf8; // TArray<FFileManifestData>
		constexpr auto ChunkList = 0x108; // TArray<FChunkInfoData>
		constexpr auto CustomFields = 0x118; // TArray<FCustomFieldData>
	}

	namespace n_UGameplayEffectAdjustIncapStrikes {
		constexpr auto IncapStrikesToApply = 0x238; // int32_t
	}

	namespace n_UChaosPhysicalMaterial {
		constexpr auto Friction = 0x30; // float
		constexpr auto StaticFriction = 0x34; // float
		constexpr auto Restitution = 0x38; // float
		constexpr auto LinearEtherDrag = 0x3c; // float
		constexpr auto AngularEtherDrag = 0x40; // float
		constexpr auto SleepingLinearVelocityThreshold = 0x44; // float
		constexpr auto SleepingAngularVelocityThreshold = 0x48; // float
	}

	namespace n_UAkAudioEvent {
		constexpr auto RequiredBank = 0x30; // UAkAudioBank*
		constexpr auto MaxAttenuationRadius = 0x38; // float
		constexpr auto IsInfinite = 0x3c; // bool
		constexpr auto MinimumDuration = 0x40; // float
		constexpr auto MaximumDuration = 0x44; // float
		constexpr auto MaxDurationForLanguage = 0x48; // TMap<FName, float>
		constexpr auto MinDurationForLanguage = 0x98; // TMap<FName, float>
		constexpr auto DataVersion = 0xe8; // int32_t
	}

	namespace n_UDatasmithStaticMeshTemplate {
		constexpr auto SectionInfoMap = 0x38; // FDatasmithMeshSectionInfoMapTemplate
		constexpr auto LightMapCoordinateIndex = 0x88; // int32_t
		constexpr auto LightMapResolution = 0x8c; // int32_t
		constexpr auto BuildSettings = 0x90; // TArray<FDatasmithMeshBuildSettingsTemplate>
		constexpr auto StaticMaterials = 0xa0; // TArray<FDatasmithStaticMaterialTemplate>
	}

	namespace n_UNiagaraParameterCollection {
		constexpr auto Namespace = 0x30; // FName
		constexpr auto Parameters = 0x38; // TArray<FNiagaraVariable>
		constexpr auto DefaultInstance = 0x48; // UNiagaraParameterCollectionInstance*
		constexpr auto CompileId = 0x50; // FGuid
	}

	namespace n_UPvPHoldoutStateUserWidget {
		constexpr auto PhaseEndAudio = 0x458; // UAkAudioEvent*
		constexpr auto PhaseTransitionAudio = 0x460; // UAkAudioEvent*
		constexpr auto TimerClickStartAudio = 0x468; // UAkAudioEvent*
		constexpr auto TimerClickAudio = 0x470; // UAkAudioEvent*
		constexpr auto TimerSurpassPositiveAudio = 0x478; // UAkAudioEvent*
		constexpr auto TimerSurpassNegativeAudio = 0x480; // UAkAudioEvent*
		constexpr auto ALARM_THRESHOLD_SECONDS = 0x488; // int32_t
	}

	namespace n_UEnvQueryTest_EnemyDamageAmount {
		constexpr auto bUseDamagePrecent = 0x2a0; // bool
	}

	namespace n_UMaterialExpressionFontSample {
		constexpr auto Font = 0x48; // UFont*
		constexpr auto FontTexturePage = 0x50; // int32_t
	}

	namespace n_UArmorTrait {
		constexpr auto Armor = 0x30; // FArmor
	}

	namespace n_UAnimContext_BotTarget {
		constexpr auto TargetContext = 0x150; // UAnimContext_Actor*
	}

	namespace n_UGridPathFollowingComponent {
		constexpr auto GridManager = 0x290; // UNavLocalGridManager*
	}

	namespace n_UGameplayAction_ProjectileThrow {
		constexpr auto ThrowComponentTag = 0x210; // FGameplayTag
		constexpr auto bAddActivationOwnedTagsForCanActivate = 0x218; // bool
	}

	namespace n_UTitanStage1TentacleAnimInstance {
		constexpr auto TentacleComponent = 0x2c0; // UTitanStage1TentacleComponent*
		constexpr auto bDormant = 0x2c8; // bool
		constexpr auto bIdle = 0x2c9; // bool
		constexpr auto bEmerge = 0x2ca; // bool
		constexpr auto bSlapAttackWindUp = 0x2cb; // bool
		constexpr auto bSlapAttack = 0x2cc; // bool
		constexpr auto bSlapAttackGroundLoop = 0x2cd; // bool
		constexpr auto SlapAttackPlayRate = 0x2d0; // float
		constexpr auto bSlapAttackRecover = 0x2d4; // bool
		constexpr auto bPainRoar = 0x2d5; // bool
		constexpr auto bWoundedIdle = 0x2d6; // bool
		constexpr auto bAcidSprayAttackWindUp = 0x2d7; // bool
		constexpr auto bAcidSprayAttackEnter = 0x2d8; // bool
		constexpr auto bAcidSprayAttackLoop = 0x2d9; // bool
		constexpr auto bAcidSprayAttackExit = 0x2da; // bool
		constexpr auto EmergePlayRate = 0x2dc; // float
		constexpr auto bRetract = 0x2e0; // bool
		constexpr auto AngleToTarget = 0x2e4; // float
		constexpr auto bFlinching1 = 0x2e8; // bool
		constexpr auto bFlinching2 = 0x2e9; // bool
		constexpr auto bSlapAttackWindUpStumble = 0x2ea; // bool
		constexpr auto EmergeAnimSequence = 0x2f0; // UAnimSequence*
		constexpr auto RetractAnimSequence = 0x2f8; // UAnimSequence*
		constexpr auto IdleAnimSequence = 0x300; // UAnimSequence*
		constexpr auto HurtIdleAnimSequence = 0x308; // UAnimSequence*
		constexpr auto SlapAttackWindUpEnterBlendSpace = 0x310; // UBlendSpace1D*
		constexpr auto SlapAttackWindUpLoopBlendSpace = 0x318; // UBlendSpace1D*
		constexpr auto SlapAttackWindUpStumbleBlendSpace = 0x320; // UBlendSpace1D*
		constexpr auto SlapAttackEnterBlendSpace = 0x328; // UBlendSpace1D*
		constexpr auto SlapAttackGroundLoopBlendSpace = 0x330; // UBlendSpace1D*
		constexpr auto SlapAttackRecoverBlendSpace = 0x338; // UBlendSpace1D*
		constexpr auto PainRoarAnimSequence = 0x340; // UAnimSequence*
		constexpr auto AcidSprayAttackWindUpEnterAnimSequence = 0x348; // UAnimSequence*
		constexpr auto AcidSprayAttackWindUpLoopAnimSequence = 0x350; // UAnimSequence*
		constexpr auto AcidSprayAttackEnterAnimSequence = 0x358; // UAnimSequence*
		constexpr auto AcidSprayAttackLoopAnimSequence = 0x360; // UAnimSequence*
		constexpr auto AcidSprayAttackExitAnimSequence = 0x368; // UAnimSequence*
		constexpr auto FlinchAnimSequence = 0x370; // UAnimSequence*
	}

	namespace n_UMaterialExpressionBlackBody {
		constexpr auto Temp = 0x48; // FExpressionInput
	}

	namespace n_UActiveAreaSetBucketWeightMod {
		constexpr auto BucketWeights = 0xd0; // TArray<float>
	}

	namespace n_UPacketRelayClientConnectionConfig {
		constexpr auto HeartbeatInterval = 0x30; // double
		constexpr auto TimeoutSeconds = 0x38; // double
	}

	namespace n_UBreakableComponent {
		constexpr auto PristineHiddenCollisionProfile = 0xe8; // FCollisionProfileName
		constexpr auto DeformableVisibleCollisionProfile = 0xf0; // FCollisionProfileName
		constexpr auto BreakableVisibleCollisionProfile = 0xf8; // FCollisionProfileName
		constexpr auto BreakableVisibleIntercollisionProfile = 0x100; // FCollisionProfileName
		constexpr auto BreakableTraceChannel = 0x108; // ECollisionChannel
		constexpr auto BonesToHealth = 0x10c; // float
		constexpr auto BoneHealthVariance = 0x110; // float
		constexpr auto AnchorBones = 0x118; // TArray<FName>
		constexpr auto UncrackableBones = 0x128; // TArray<FName>
		constexpr auto UnbreakableBones = 0x138; // TArray<FName>
		constexpr auto CustomNeighbors = 0x148; // TArray<FBonePair>
		constexpr auto CustomNotNeighbors = 0x158; // TArray<FBonePair>
		constexpr auto CrackDepth = 0x168; // FVector2D
		constexpr auto LinearImpulseScale = 0x170; // float
		constexpr auto AngularImpulseScale = 0x174; // float
		constexpr auto DestroyedImpulseScale = 0x178; // float
		constexpr auto DetachableLinearImpulseScale = 0x17c; // float
		constexpr auto DetachableAngularImpulseScale = 0x180; // float
		constexpr auto MaxSimulationTime = 0x184; // float
		constexpr auto IntercollisionDelay = 0x188; // FVector2D
		constexpr auto DoorShakeCurve = 0x190; // UCurveFloat*
		constexpr auto DoorShakeDistance = 0x198; // float
		constexpr auto DoorShakeHalfAngle = 0x19c; // float
		constexpr auto Hinge = 0x1a0; // USceneComponent*
		constexpr auto HealthComponent = 0x1a8; // UHealthComponent*
		constexpr auto PristineMeshes = 0x1b0; // TArray<UMeshComponent*>
		constexpr auto DeformableMesh = 0x1c0; // UPoseableMeshComponent*
		constexpr auto BreakableMesh = 0x1c8; // UPoseableMeshComponent*
		constexpr auto SkinnedDamage = 0x1d0; // USkinnedDamageTextureComponent*
		constexpr auto AttachmentBoneMap = 0x1d8; // TMap<USceneComponent*, FName>
		constexpr auto Detachables = 0x228; // TArray<FDetachableInfo>
		constexpr auto NetHitDir = 0x2d8; // FVector
		constexpr auto NetBonesCracked = 0x2e8; // TArray<int32_t>
		constexpr auto NetBonesDestroyed = 0x2f8; // TArray<int32_t>
		constexpr auto NetDeformations = 0x308; // TArray<FHitInfo>
		constexpr auto BoneInfos = 0x318; // TArray<FBoneInfo>
	}

	namespace n_UGameplayEffectDamage {
		constexpr auto InstantDamage = 0x248; // float
		constexpr auto InstantPermanentDamage = 0x24c; // float
		constexpr auto RecurringDamage = 0x250; // float
		constexpr auto RecurringPermanentDamage = 0x254; // float
		constexpr auto RecurringDamageFrequency = 0x258; // float
		constexpr auto BeginDamageRampTime = 0x25c; // float
		constexpr auto EndDamageRampTime = 0x260; // float
		constexpr auto RecurringDamageStart = 0x264; // float
		constexpr auto ApplyEffectsOnRecurringDamage = 0x268; // TArray<UGameplayEffect*>
		constexpr auto bApplyAccumulatedDamageOnStop = 0x278; // bool
		constexpr auto MinAccumulatedDamageOnStop = 0x27c; // float
		constexpr auto DamageTypeClass = 0x280; // UGobiDamageType*
		constexpr auto bAllowZeroInstantDamage = 0x288; // bool
		constexpr auto bCalculatePermanentDamageAsPctOfDamage = 0x289; // bool
	}

	namespace n_AMindControlProjectile {
		constexpr auto BumpCollisionComponent = 0x660; // USphereComponent*
		constexpr auto OnHit = 0x668; // FMulticastInlineDelegate
		constexpr auto Health = 0x678; // UHealthComponent*
		constexpr auto MoveToTarget = 0x680; // AActor*
		constexpr auto OnMiss = 0x688; // FMulticastInlineDelegate
		constexpr auto MCAI_Class = 0x698; // AGobiCharacter*
		constexpr auto MissPSTemplate = 0x6a0; // UParticleSystem*
		constexpr auto CooldownEffectOnSuccess = 0x6a8; // UGameplayEffect*
		constexpr auto CooldownEffectOnFailed = 0x6b0; // UGameplayEffect*
		constexpr auto BlockingTargetTags = 0x6b8; // FGameplayTagContainer
		constexpr auto DamageTypeToFriendlies = 0x6d8; // UGobiDamageType*
	}

	namespace n_UParticleModuleTypeDataRibbon {
		constexpr auto MaxTessellationBetweenParticles = 0x38; // int32_t
		constexpr auto SheetsPerTrail = 0x3c; // int32_t
		constexpr auto MaxTrailCount = 0x40; // int32_t
		constexpr auto MaxParticleInTrailCount = 0x44; // int32_t
		constexpr auto bDeadTrailsOnDeactivate = 0x48; // char : 1
		constexpr auto bDeadTrailsOnSourceLoss = 0x48; // char : 1
		constexpr auto bClipSourceSegement = 0x48; // char : 1
		constexpr auto bEnablePreviousTangentRecalculation = 0x48; // char : 1
		constexpr auto bTangentRecalculationEveryFrame = 0x48; // char : 1
		constexpr auto bSpawnInitialParticle = 0x48; // char : 1
		constexpr auto RenderAxis = 0x4c; // ETrailsRenderAxisOption
		constexpr auto TangentSpawningScalar = 0x50; // float
		constexpr auto bRenderGeometry = 0x54; // char : 1
		constexpr auto bRenderSpawnPoints = 0x54; // char : 1
		constexpr auto bRenderTangents = 0x54; // char : 1
		constexpr auto bRenderTessellation = 0x54; // char : 1
		constexpr auto TilingDistance = 0x58; // float
		constexpr auto DistanceTessellationStepSize = 0x5c; // float
		constexpr auto bEnableTangentDiffInterpScale = 0x60; // char : 1
		constexpr auto TangentTessellationScalar = 0x64; // float
	}

	namespace n_UBTTask_RotateToFaceBBEntry {
		constexpr auto Precision = 0xa0; // float
		constexpr auto bNeverClearFocus = 0xa8; // bool
	}

	namespace n_UAISense_Team {
		constexpr auto RegisteredEvents = 0x88; // TArray<FAITeamStimulusEvent>
	}

	namespace n_UChildConnection {
		constexpr auto Parent = 0x1a38; // UNetConnection*
	}

	namespace n_ULocalLightComponent {
		constexpr auto IntensityUnits = 0x388; // ELightUnits
		constexpr auto Radius = 0x38c; // float
		constexpr auto AttenuationRadius = 0x390; // float
		constexpr auto LightmassSettings = 0x394; // FLightmassPointLightSettings
	}

	namespace n_UEnvQueryGenerator_TRSPathingGrid {
		constexpr auto NavigationFilter = 0x58; // UNavigationQueryFilter*
		constexpr auto GridHalSize = 0x60; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0x98; // FAIDataProviderFloatValue
		constexpr auto bPlaceCentroids = 0xd0; // bool
		constexpr auto CentroidCullDistance = 0xd8; // FAIDataProviderFloatValue
		constexpr auto GenerateAround = 0x110; // UEnvQueryContext*
		constexpr auto Querier = 0x118; // UEnvQueryContext*
		constexpr auto bPlaceAtQuerierLocation = 0x120; // bool
		constexpr auto bSearchNearbyContextOnFail = 0x121; // bool
		constexpr auto MinPolysToConsiderAFail = 0x124; // int32_t
		constexpr auto NearbyContextSearchRange = 0x128; // float
	}

	namespace n_UItemMeshManagementComponent {
		constexpr auto OnFirstPersonMeshInitialized = 0x160; // FMulticastInlineDelegate
		constexpr auto OnFirstPersonMeshShutdown = 0x170; // FMulticastInlineDelegate
		constexpr auto ThirdPersonMeshComponents = 0x180; // TArray<UPrimitiveComponent*>
		constexpr auto FirstPersonMeshComponents = 0x190; // TArray<UPrimitiveComponent*>
		constexpr auto AppliedAttachmentMeshConfigs = 0x1a0; // TArray<FWeaponAttachmentMeshConfig>
		constexpr auto CustomizationRow = 0x1b0; // FDataTableRowHandle
		constexpr auto DefaultMeshes = 0x2c8; // TArray<FName>
		constexpr auto FirstPersonBonesHiddenByDefault = 0x328; // TArray<FName>
		constexpr auto FirstPersonPhysicsAssetOverride = 0x338; // UPhysicsAsset*
		constexpr auto BaseThirdPersonMeshTag = 0x340; // FGameplayTag
		constexpr auto ThirdPersonAttachBoneName = 0x348; // FName
		constexpr auto SecondaryThirdPersonMeshTag = 0x350; // FGameplayTag
		constexpr auto SecondaryThirdPersonAttachBoneName = 0x358; // FName
	}

	namespace n_UCharacterEmitterMod {
		constexpr auto CharacterEmitterDef = 0xd0; // FCharacterEmitterDef
	}

	namespace n_UAnimEvalSet_Common_Melee_Overlap_C {
		constexpr auto OverlapTest = 0xc0; // FGameplayEval_OverlapActor
		constexpr auto HasPlayedRecently = 0x198; // FAnimEval_MontageLastPlayed
		constexpr auto CheckDismembered = 0x1e8; // FGameplayEval_Dismembered
		constexpr auto RandomScore = 0x240; // FGameplayEval_Random
		constexpr auto RandomChanceByTag = 0x288; // FGameplayEval_RandomChanceByTag
		constexpr auto HasVisibility = 0x330; // FGameplayEval_HasVisibility
		constexpr auto NavBlocked = 0x388; // FGameplayEval_NavBlocked
		constexpr auto GameplayTags = 0x3e0; // FGameplayEval_GameplayTags
	}

	namespace n_UCarAlarmGameCoachLesson {
		constexpr auto CarAlarmTeachDuration = 0x460; // float
	}

	namespace n_AGravelFiller {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto SwitchStaticMeshComponent = 0x2a8; // UStaticMeshComponent*
		constexpr auto GravelMoundMeshComponent = 0x2b0; // UStaticMeshComponent*
		constexpr auto GravelPourParticleSystemComponent = 0x2b8; // UParticleSystemComponent*
		constexpr auto UsableComponent = 0x2c0; // UUsableComponent*
		constexpr auto UsableTriggerComponent = 0x2c8; // UBoxComponent*
		constexpr auto StartGravelLessonTriggerBox = 0x2d0; // UBoxComponent*
		constexpr auto EndGravelLessonTriggerBox = 0x2d8; // UBoxComponent*
		constexpr auto AudioMachinerySceneComponent = 0x2e0; // USceneComponent*
		constexpr auto UsableHighlightComp = 0x2e8; // UUsableHighlightComponent*
		constexpr auto GravelNavBuilder = 0x2f0; // AActor*
		constexpr auto GravelFillerStartRowHandle = 0x2f8; // FDataTableRowHandle
		constexpr auto GravelFillerStopRowHandle = 0x318; // FDataTableRowHandle
		constexpr auto GravelMusicScenario = 0x338; // FName
		constexpr auto ButtonActivateAudioEvent = 0x340; // UAkAudioEvent*
		constexpr auto ConveyorStartLoopAudioEvent = 0x348; // UAkAudioEvent*
		constexpr auto ConveyorStopLoopAudioEvent = 0x350; // UAkAudioEvent*
		constexpr auto FactoryStartLoopAudioEvent = 0x358; // UAkAudioEvent*
		constexpr auto FactoryStopLoopAudioEvent = 0x360; // UAkAudioEvent*
		constexpr auto SwitchStartLoopAudioEvent = 0x368; // UAkAudioEvent*
		constexpr auto SwitchStopLoopAudioEvent = 0x370; // UAkAudioEvent*
		constexpr auto GravelMoundTrickleStartLoopAudioEvent = 0x378; // UAkAudioEvent*
		constexpr auto GravelMoundTrickleStopLoopAudioEvent = 0x380; // UAkAudioEvent*
		constexpr auto ChuteHornAudioEvent = 0x388; // UAkAudioEvent*
		constexpr auto OnGravelPileStateChange = 0x390; // FMulticastInlineDelegate
		constexpr auto DelayAfterSwitchUse = 0x3a0; // float
		constexpr auto GravelTotalFillTime = 0x3a4; // float
		constexpr auto GravelTotalHeightGrowth = 0x3a8; // float
		constexpr auto GravelHeightGrowthFloatCurve = 0x3b0; // UCurveFloat*
		constexpr auto ReachGravelConversation = 0x3b8; // FQueuedConversation
		constexpr auto FirstGameCoachLessonsClass = 0x420; // UObject*
		constexpr auto FirstGameCoachLessonDelay = 0x428; // float
		constexpr auto SecondGameCoachLessonsClass = 0x430; // UObject*
		constexpr auto SecondGameCoachLessonDelay = 0x438; // float
		constexpr auto HighlightGameplayTagContainer = 0x440; // FGameplayTagContainer
		constexpr auto HintOneTimer = 0x460; // float
		constexpr auto HintTwoTimer = 0x464; // float
		constexpr auto PercentInEventForStatusDialogue = 0x468; // float
		constexpr auto MinHealthPctForWinning = 0x46c; // float
		constexpr auto MinHeroesNeededForWinning = 0x470; // int32_t
		constexpr auto FirstLesson = 0x478; // UGameCoachLessonsComponent*
		constexpr auto SecondLesson = 0x480; // UGameCoachLessonsComponent*
		constexpr auto ConveyorAkComponent = 0x488; // UAkComponent*
		constexpr auto FactoryAkComponent = 0x490; // UAkComponent*
		constexpr auto SwitchAkComponent = 0x498; // UAkComponent*
		constexpr auto GravelMoundAkComponent = 0x4a0; // UAkComponent*
		constexpr auto MoundHeight = 0x4a8; // float
		constexpr auto bPlayersEnteredArea = 0x4ac; // bool
		constexpr auto bPlayersOverMound = 0x4ad; // bool
	}

	namespace n_USelectableGameplayCardUserWidget {
		constexpr auto ProductRowHandle = 0x458; // FDataTableRowHandle
		constexpr auto CardRowHandle = 0x478; // FDataTableRowHandle
		constexpr auto OnFlipAnimFinished = 0x498; // FMulticastInlineDelegate
		constexpr auto bShowTooltip = 0x4a8; // bool
		constexpr auto OnDragDrop = 0x4b0; // FMulticastInlineDelegate
		constexpr auto DeckType = 0x4c0; // EGameplayCardDeckType
		constexpr auto DragVisualClass = 0x4c8; // USmallDeckEntryDragVisualUserWidget*
	}

	namespace n_UGameplayEffectRevive {
		constexpr auto ReviveData = 0x238; // FReviveEffectData
	}

	namespace n_UVectorFieldComponent {
		constexpr auto VectorField = 0x4b0; // UVectorField*
		constexpr auto Intensity = 0x4b8; // float
		constexpr auto Tightness = 0x4bc; // float
		constexpr auto bPreviewVectorField = 0x4c0; // char : 1
		constexpr auto CreationPointCountX = 0x4c4; // int32_t
		constexpr auto CreationPointCountY = 0x4c8; // int32_t
		constexpr auto CreationPointCountZ = 0x4cc; // int32_t
		constexpr auto CreationFlowVector = 0x4d0; // FVector
		constexpr auto CreationMaxDistanceToCollider = 0x4dc; // float
	}

	namespace n_UGameplayAction_Cling {
		constexpr auto TauntMontages = 0x248; // TArray<UAnimMontage*>
		constexpr auto TauntCooldown = 0x258; // FVector2D
	}

	namespace n_UMaterialExpressionPower {
		constexpr auto Base = 0x48; // FExpressionInput
		constexpr auto Exponent = 0x5c; // FExpressionInput
		constexpr auto ConstExponent = 0x70; // float
	}

	namespace n_UAnimEvalSet_Shared_HitReaction_UB_C {
		constexpr auto AvatarHitDirection = 0xc0; // FGameplayEval_Angle
		constexpr auto RandomChance = 0x120; // FGameplayEval_RandomChance
		constexpr auto HitBone = 0x170; // FGameplayEval_HitReactionBone
		constexpr auto Health = 0x220; // FGameplayEval_Health
		constexpr auto GameplayTags = 0x278; // FGameplayEval_GameplayTags
	}

	namespace n_UAnimationSharingSetup {
		constexpr auto SkeletonSetups = 0x30; // TArray<FPerSkeletonAnimationSharingSetup>
		constexpr auto ScalabilitySettings = 0x40; // FAnimationSharingScalability
	}

	namespace n_UEQTest_VoronoiDistanceMapCell {
		constexpr auto CellSource = 0x208; // UEnvQueryContext*
		constexpr auto DistanceMapNavMesh = 0x210; // FNavAgentSelector
		constexpr auto ItemsWithNoCellShould = 0x214; // EEnvItemStatus
	}

	namespace n_UFoliageType_Actor {
		constexpr auto ActorClass = 0x380; // AActor*
		constexpr auto bShouldAttachToBaseComponent = 0x388; // bool
	}

	namespace n_APawn {
		constexpr auto bUseControllerRotationPitch = 0x2a8; // char : 1
		constexpr auto bUseControllerRotationYaw = 0x2a8; // char : 1
		constexpr auto bUseControllerRotationRoll = 0x2a8; // char : 1
		constexpr auto bCanAffectNavigationGeneration = 0x2a8; // char : 1
		constexpr auto BaseEyeHeight = 0x2ac; // float
		constexpr auto AutoPossessPlayer = 0x2b0; // EAutoReceiveInput
		constexpr auto AutoPossessAI = 0x2b1; // EAutoPossessAI
		constexpr auto RemoteViewPitch = 0x2b2; // char
		constexpr auto AIControllerClass = 0x2b8; // AController*
		constexpr auto PlayerState = 0x2c0; // APlayerState*
		constexpr auto Controller = 0x2d0; // AController*
		constexpr auto ControlInputVector = 0x2dc; // FVector
		constexpr auto LastControlInputVector = 0x2e8; // FVector
	}

	namespace n_UAIDistanceRanges {
		constexpr auto DistanceLabelEnum = 0x38; // UEnum*
		constexpr auto Ranges = 0x40; // TArray<FDistanceRange>
	}

	namespace n_UBTNode {
		constexpr auto NodeName = 0x38; // FString
		constexpr auto TreeAsset = 0x48; // UBehaviorTree*
		constexpr auto ParentNode = 0x50; // UBTCompositeNode*
	}

	namespace n_UAnimAttackWindowComponent {
		constexpr auto AttackCollisionVolumeTag = 0xe8; // FGameplayTag
		constexpr auto bRequiresLineOfSight = 0xf0; // bool
		constexpr auto LineOfSightTargetComponentTag = 0xf4; // FName
		constexpr auto bUseTargetEyePosForLoS = 0xfc; // bool
	}

	namespace n_UHeroStatTracker {
		constexpr auto CurrentCharacter = 0x40; // AHeroCharacter*
	}

	namespace n_UMatchmakingSettingsInfoUserWidget {
		constexpr auto PvPBackgroundTexture = 0x478; // TSoftObjectPtr<UTexture2D>
	}

	namespace n_UMeshMaterialSet {
		constexpr auto SlotNames = 0x38; // TArray<FName>
		constexpr auto Materials = 0x48; // TArray<UMaterialInterface*>
	}

	namespace n_UInterpTrackInstToggle {
		constexpr auto Action = 0x30; // ETrackToggleAction
		constexpr auto LastUpdatePosition = 0x34; // float
		constexpr auto bSavedActiveState = 0x38; // char : 1
	}

	namespace n_UGameplayContext_UsableComponent {
		constexpr auto ComponentTag = 0x58; // FGameplayTag
		constexpr auto bIncludeParentTags = 0x60; // bool
		constexpr auto bUseBotInteract = 0x61; // bool
	}

	namespace n_UFileMediaSource {
		constexpr auto FilePath = 0x90; // FString
		constexpr auto PrecacheFile = 0xa0; // bool
	}

	namespace n_UARCandidateImage {
		constexpr auto CandidateTexture = 0x38; // UTexture2D*
		constexpr auto FriendlyName = 0x40; // FString
		constexpr auto Width = 0x50; // float
		constexpr auto Height = 0x54; // float
		constexpr auto Orientation = 0x58; // EARCandidateImageOrientation
	}

	namespace n_UDatasmithPointLightComponentTemplate {
		constexpr auto IntensityUnits = 0x38; // ELightUnits
		constexpr auto SourceRadius = 0x3c; // float
		constexpr auto SourceLength = 0x40; // float
		constexpr auto AttenuationRadius = 0x44; // float
	}

	namespace n_UOnLifeStateChangeTrigger {
		constexpr auto IncapBeatDelay = 0x60; // float
		constexpr auto FirstIncapCalloutDelay = 0x64; // float
		constexpr auto DeathBeatDelay = 0x68; // float
		constexpr auto DeathLaterDelay = 0x6c; // float
		constexpr auto IncapInterval = 0x70; // float
		constexpr auto RescueCalloutsBeforeLong = 0x74; // int32_t
		constexpr auto ChanceForRescueCallout = 0x78; // float
		constexpr auto ChanceForRescueCalloutLong = 0x7c; // float
		constexpr auto RescueInterval = 0x80; // float
		constexpr auto LedgeHangInterval = 0x84; // float
	}

	namespace n_USnitchComponent {
		constexpr auto OnSnitched = 0xe8; // FMulticastInlineDelegate
		constexpr auto bSnitchOnDeath = 0xf8; // bool
		constexpr auto SnitchedTag = 0xfc; // FGameplayTag
	}

	namespace n_UMonoWaveTableSynthPreset {
		constexpr auto PresetName = 0x30; // FString
		constexpr auto bLockKeyframesToGridBool = 0x40; // char : 1
		constexpr auto LockKeyframesToGrid = 0x44; // int32_t
		constexpr auto WaveTableResolution = 0x48; // int32_t
		constexpr auto WaveTable = 0x50; // TArray<FRuntimeFloatCurve>
		constexpr auto bNormalizeWaveTables = 0x60; // char : 1
	}

	namespace n_USynthComponent {
		constexpr auto bAutoDestroy = 0x230; // char : 1
		constexpr auto bStopWhenOwnerDestroyed = 0x230; // char : 1
		constexpr auto bAllowSpatialization = 0x230; // char : 1
		constexpr auto bOverrideAttenuation = 0x230; // char : 1
		constexpr auto bOutputToBusOnly = 0x234; // char : 1
		constexpr auto AttenuationSettings = 0x238; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x240; // FSoundAttenuationSettings
		constexpr auto ConcurrencySettings = 0x5e0; // USoundConcurrency*
		constexpr auto ConcurrencySet = 0x5e8; // TSet<USoundConcurrency*>
		constexpr auto SoundClass = 0x638; // USoundClass*
		constexpr auto SourceEffectChain = 0x640; // USoundEffectSourcePresetChain*
		constexpr auto SoundSubmix = 0x648; // USoundSubmixBase*
		constexpr auto SoundSubmixSends = 0x650; // TArray<FSoundSubmixSendInfo>
		constexpr auto BusSends = 0x660; // TArray<FSoundSourceBusSendInfo>
		constexpr auto Modulation = 0x670; // FSoundModulation
		constexpr auto PreEffectBusSends = 0x680; // TArray<FSoundSourceBusSendInfo>
		constexpr auto bIsUISound = 0x690; // char : 1
		constexpr auto bIsPreviewSound = 0x690; // char : 1
		constexpr auto EnvelopeFollowerAttackTime = 0x694; // int32_t
		constexpr auto EnvelopeFollowerReleaseTime = 0x698; // int32_t
		constexpr auto OnAudioEnvelopeValue = 0x6a0; // FMulticastInlineDelegate
		constexpr auto Synth = 0x6d0; // USynthSound*
		constexpr auto AudioComponent = 0x6d8; // UAudioComponent*
	}

	namespace n_UParticleModuleAccelerationDragScaleOverLife {
		constexpr auto DragScale = 0x40; // UDistributionFloat*
		constexpr auto DragScaleRaw = 0x48; // FRawDistributionFloat
	}

	namespace n_UGameplayAction_BotFallTraversal {
		constexpr auto FilterSet = 0x210; // UGameplayEvaluatorSet*
		constexpr auto bDisabled = 0x218; // bool
	}

	namespace n_UAnimEvalSet_Shared_Traversal_3D_C {
		constexpr auto Distance2D NavLinkStartToEnd = 0xc0; // FGameplayEval_Distance
		constexpr auto DistanceZ NavLinkStartToEnd = 0x190; // FGameplayEval_Distance
		constexpr auto NavArea = 0x260; // FGameplayEval_NavArea
		constexpr auto RandomChance = 0x2d0; // FGameplayEval_RandomChance
		constexpr auto DistanceToNavLinkStart = 0x320; // FGameplayEval_Distance
	}

	namespace n_USoundfieldEffectBase {
		constexpr auto Settings = 0x30; // USoundfieldEffectSettingsBase*
	}

	namespace n_ABaseGun_Skeletal_BP_C {
		constexpr auto SightMesh_3P = 0x508; // UStaticMeshComponent*
		constexpr auto BarrelMesh_3P = 0x510; // UStaticMeshComponent*
		constexpr auto BaseMesh_3P = 0x518; // USkeletalMeshComponent*
	}

	namespace n_UBTService_LifeState {
		constexpr auto LifeStateBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto TagToEnumMap = 0xa0; // TMap<FGameplayTag, ELifeState>
	}

	namespace n_UGameplayEffectProjectileThrowComponent {
		constexpr auto ThrowComponentTag = 0x240; // FGameplayTag
		constexpr auto PlayRateMods = 0x248; // TMap<UAnimMontage*, FGamePropertyFloatMod>
	}

	namespace n_UGobiSafeZoneSlot {
		constexpr auto SafeAreaScale = 0x40; // FMargin
		constexpr auto HAlign = 0x50; // EHorizontalAlignment
		constexpr auto VAlign = 0x51; // EVerticalAlignment
		constexpr auto Padding = 0x54; // FMargin
	}

	namespace n_UHierarchicalLODSetup {
		constexpr auto HierarchicalLODSetup = 0x30; // TArray<FHierarchicalSimplification>
		constexpr auto OverrideBaseMaterial = 0x40; // TSoftObjectPtr<UMaterialInterface>
	}

	namespace n_UBTTask_ClearBlackboardKey {
		constexpr auto BlackboardKey = 0x78; // FBlackboardKeySelector
	}

	namespace n_UAISenseConfig_UnWatched {
		constexpr auto Implementation = 0x50; // UAISense_UnWatched*
		constexpr auto WatchedMaxRadius = 0x58; // float
		constexpr auto AutoWatchedRadius = 0x5c; // float
		constexpr auto GlobalWatchTimeLimitMS = 0x60; // float
		constexpr auto DetectionByAffiliation = 0x64; // FAISenseAffiliationFilter
		constexpr auto bResetTimerOnLookedAt = 0x68; // char : 1
		constexpr auto bResetTimerOnTrigger = 0x68; // char : 1
	}

	namespace n_UGameplayEffectDrench {
		constexpr auto bDisableDrenchComponent = 0x238; // bool
		constexpr auto DrenchTag = 0x23c; // FGameplayTag
		constexpr auto DistanceMode = 0x244; // EDrenchDistanceMode
		constexpr auto bChainEffect = 0x245; // bool
		constexpr auto StrengthSettings = 0x248; // TArray<FDrenchStrengthSettings>
	}

	namespace n_UMovieSceneSubTrack {
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UAnimNotify_Ragdoll {
		constexpr auto BoneName = 0x40; // FName
		constexpr auto CollisionProfileToSet = 0x48; // FName
	}

	namespace n_UInteractiveCarSpawner {
		constexpr auto ClassTypes = 0xe8; // TMap<TSoftClassPtr<UObject>, EInteractiveCarType>
		constexpr auto PrecachedClasses = 0x138; // TArray<UObject*>
		constexpr auto SpawnedCar = 0x148; // AActor*
	}

	namespace n_UAISense_Blueprint {
		constexpr auto ListenerDataType = 0x88; // UUserDefinedStruct*
		constexpr auto ListenerContainer = 0x90; // TArray<UAIPerceptionComponent*>
		constexpr auto UnprocessedEvents = 0xa0; // TArray<UAISenseEvent*>
	}

	namespace n_UARBasicLightEstimate {
		constexpr auto AmbientIntensityLumens = 0x30; // float
		constexpr auto AmbientColorTemperatureKelvin = 0x34; // float
		constexpr auto AmbientColor = 0x38; // FLinearColor
	}

	namespace n_UEditableGameplayTagQueryExpression_AnyExprMatch {
		constexpr auto Expressions = 0x30; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UAISenseConfig_Omnipotence {
		constexpr auto Implementation = 0x50; // UAISense_Omnipotence*
		constexpr auto OmniRadius = 0x58; // float
		constexpr auto DetectionByAffiliation = 0x5c; // FAISenseAffiliationFilter
	}

	namespace n_UAssetLoaderComponent {
		constexpr auto AssetLists = 0xe8; // TArray<UAssetTable*>
	}

	namespace n_UCameraModifier {
		constexpr auto bDebug = 0x30; // char : 1
		constexpr auto bExclusive = 0x30; // char : 1
		constexpr auto Priority = 0x34; // char
		constexpr auto CameraOwner = 0x38; // APlayerCameraManager*
		constexpr auto AlphaInTime = 0x40; // float
		constexpr auto AlphaOutTime = 0x44; // float
		constexpr auto Alpha = 0x48; // float
	}

	namespace n_UChatScreen {
		constexpr auto OnScreenNewStatusChanged = 0x558; // FMulticastInlineDelegate
		constexpr auto ScreensToVoipOverlayPosition = 0x568; // TMap<TSoftClassPtr<UObject>, FVector2D>
		constexpr auto DefaulVoipOverlayPos = 0x5b8; // FVector2D
		constexpr auto OnChatOpened = 0x5c0; // FMulticastInlineDelegate
	}

	namespace n_UItemSlotUserWidget {
		constexpr auto bSmallIcon = 0x458; // bool
	}

	namespace n_UParticleModulePivotOffset {
		constexpr auto PivotOffset = 0x38; // FVector2D
	}

	namespace n_UOptionsColorComboBoxWidget {
		constexpr auto ComboOptions = 0x480; // TArray<FLinearColor>
	}

	namespace n_UPlayerNameUserWidget {
		constexpr auto TruncateWidth = 0x478; // int32_t
		constexpr auto bShowPlatformIcon = 0x47c; // bool
		constexpr auto Player = 0x480; // FPartyPlayer
	}

	namespace n_UZombieFacialAnimationComponent {
		constexpr auto CurveSourceBindingName = 0xf0; // FName
		constexpr auto ExpressionBlendTime = 0xf8; // float
		constexpr auto MinDamageForPainExpression = 0xfc; // float
		constexpr auto PainExpressionTime = 0x100; // float
		constexpr auto ZombieFacialAnimationData = 0x108; // UZombieFacialAnimationData*
	}

	namespace n_UMovieSceneVectorSection {
		constexpr auto Curves = 0xe8; // FMovieSceneFloatChannel [0x4]
		constexpr auto ChannelsUsed = 0x368; // int32_t
	}

	namespace n_UMaterialExpressionTextureBase {
		constexpr auto Texture = 0x48; // UTexture*
		constexpr auto SamplerType = 0x50; // EMaterialSamplerType
		constexpr auto IsDefaultMeshpaintTexture = 0x51; // char : 1
	}

	namespace n_UCineCameraComponent {
		constexpr auto FilmbackSettings = 0x810; // FCameraFilmbackSettings
		constexpr auto Filmback = 0x81c; // FCameraFilmbackSettings
		constexpr auto LensSettings = 0x828; // FCameraLensSettings
		constexpr auto FocusSettings = 0x840; // FCameraFocusSettings
		constexpr auto CurrentFocalLength = 0x898; // float
		constexpr auto CurrentAperture = 0x89c; // float
		constexpr auto CurrentFocusDistance = 0x8a0; // float
		constexpr auto FilmbackPresets = 0x8b0; // TArray<FNamedFilmbackPreset>
		constexpr auto LensPresets = 0x8c0; // TArray<FNamedLensPreset>
		constexpr auto DefaultFilmbackPresetName = 0x8d0; // FString
		constexpr auto DefaultFilmbackPreset = 0x8e0; // FString
		constexpr auto DefaultLensPresetName = 0x8f0; // FString
		constexpr auto DefaultLensFocalLength = 0x900; // float
		constexpr auto DefaultLensFStop = 0x904; // float
	}

	namespace n_USignInTask_HydraAuth {
		constexpr auto HydraAllowListTask = 0x88; // USignInTask_HydraAllowList*
	}

	namespace n_USourceEffectFilterPreset {
		constexpr auto Settings = 0x7c; // FSourceEffectFilterSettings
	}

	namespace n_UTestAnimInstance {
		constexpr auto TargetCharacter = 0x7c0; // TWeakObjectPtr<AHeroCharacter>
	}

	namespace n_AAmbientSound {
		constexpr auto AudioComponent = 0x2a0; // UAudioComponent*
	}

	namespace n_ALevelScriptActor {
		constexpr auto bInputEnabled = 0x2a0; // char : 1
	}

	namespace n_UParticleModuleLifetime_Seeded {
		constexpr auto RandomSeedInfo = 0x68; // FParticleRandomSeedInfo
	}

	namespace n_UP1AccountButtonUserWidget {
		constexpr auto AccountNameTruncateWidth = 0x458; // int32_t
		constexpr auto P1IconWidgetClass = 0x498; // TSoftClassPtr<UObject>
		constexpr auto P1SignInScreenClass = 0x4c0; // TSoftClassPtr<UObject>
	}

	namespace n_UUISpeakerTest {
		constexpr auto Bank = 0x30; // UAkAudioBank*
		constexpr auto FrontLeftEvent = 0x38; // UAkAudioEvent*
		constexpr auto FrontCenterEvent = 0x40; // UAkAudioEvent*
		constexpr auto FrontRightEvent = 0x48; // UAkAudioEvent*
		constexpr auto SideLeftEvent = 0x50; // UAkAudioEvent*
		constexpr auto SideRightEvent = 0x58; // UAkAudioEvent*
		constexpr auto BackLeftEvent = 0x60; // UAkAudioEvent*
		constexpr auto BackRightEvent = 0x68; // UAkAudioEvent*
		constexpr auto LFEEvent = 0x70; // UAkAudioEvent*
		constexpr auto StopEvent = 0x78; // UAkAudioEvent*
		constexpr auto OnSpeakerTestStateChanged = 0x80; // FMulticastInlineDelegate
	}

	namespace n_UPersonalEventTrigger {
		constexpr auto Policy = 0x30; // EEventTriggerPolicy
	}

	namespace n_ULightPropagationVolumeBlendable {
		constexpr auto Settings = 0x38; // FLightPropagationVolumeSettings
		constexpr auto BlendWeight = 0x78; // float
	}

	namespace n_UNiagaraDataInterfaceVectorField {
		constexpr auto Field = 0x38; // UVectorField*
		constexpr auto bTileX = 0x40; // bool
		constexpr auto bTileY = 0x41; // bool
		constexpr auto bTileZ = 0x42; // bool
	}

	namespace n_UChaosGameplayEventDispatcher {
		constexpr auto CollisionEventRegistrations = 0x200; // TMap<UPrimitiveComponent*, FChaosHandlerSet>
		constexpr auto BreakEventRegistrations = 0x250; // TMap<UPrimitiveComponent*, FBreakEventCallbackWrapper>
	}

	namespace n_UBTService_RegisterAttackAttempt {
		constexpr auto Timeframe = 0x78; // ETimeframe
		constexpr auto EnemyBBKey = 0x80; // FBlackboardKeySelector
	}

	namespace n_ASwitchActor {
		constexpr auto SceneComponent = 0x2b8; // USceneComponent*
		constexpr auto LastSelectedOption = 0x2c0; // int32_t
	}

	namespace n_AAkAmbientSound {
		constexpr auto AkComponent = 0x2a0; // UAkComponent*
		constexpr auto StopWhenOwnerIsDestroyed = 0x2a8; // bool
		constexpr auto AutoPost = 0x2a9; // bool
	}

	namespace n_UDatasmithFBXSceneImportData {
		constexpr auto bGenerateLightmapUVs = 0x30; // bool
		constexpr auto TexturesDir = 0x38; // FString
		constexpr auto IntermediateSerialization = 0x48; // char
		constexpr auto bColorizeMaterials = 0x49; // bool
	}

	namespace n_UAnimSequenceBase {
		constexpr auto Notifies = 0x88; // TArray<FAnimNotifyEvent>
		constexpr auto SequenceLength = 0x98; // float
		constexpr auto RateScale = 0x9c; // float
		constexpr auto RawCurveData = 0xa0; // FRawCurveTracks
		constexpr auto AbsoluteRootMotionTranslationDistance = 0xb0; // float
		constexpr auto AbsoluteRootMotionTranslationDistance2D = 0xb4; // float
		constexpr auto RootMotionSpeed = 0xb8; // float
		constexpr auto RootMotionSpeed2D = 0xbc; // float
	}

	namespace n_UPlayerStatsComponent {
		constexpr auto StatTrackers = 0x100; // TArray<UStatTrackerBase*>
		constexpr auto StatTrackerClasses = 0x110; // TArray<UStatTrackerBase*>
		constexpr auto OwningController = 0x120; // AController*
		constexpr auto PlayerProfileComponent = 0x128; // UGobiPlayerProfileComponent*
	}

	namespace n_UInputSettings {
		constexpr auto AxisConfig = 0x30; // TArray<FInputAxisConfigEntry>
		constexpr auto bAltEnterTogglesFullscreen = 0x40; // char : 1
		constexpr auto bF11TogglesFullscreen = 0x40; // char : 1
		constexpr auto bUseMouseForTouch = 0x40; // char : 1
		constexpr auto bEnableMouseSmoothing = 0x40; // char : 1
		constexpr auto bEnableFOVScaling = 0x40; // char : 1
		constexpr auto bCaptureMouseOnLaunch = 0x40; // char : 1
		constexpr auto bDefaultViewportMouseLock = 0x40; // char : 1
		constexpr auto bAlwaysShowTouchInterface = 0x40; // char : 1
		constexpr auto bShowConsoleOnFourFingerTap = 0x41; // char : 1
		constexpr auto bEnableGestureRecognizer = 0x41; // char : 1
		constexpr auto bUseAutocorrect = 0x42; // bool
		constexpr auto ExcludedAutocorrectOS = 0x48; // TArray<FString>
		constexpr auto ExcludedAutocorrectCultures = 0x58; // TArray<FString>
		constexpr auto ExcludedAutocorrectDeviceModels = 0x68; // TArray<FString>
		constexpr auto DefaultViewportMouseCaptureMode = 0x78; // EMouseCaptureMode
		constexpr auto DefaultViewportMouseLockMode = 0x79; // EMouseLockMode
		constexpr auto FOVScale = 0x7c; // float
		constexpr auto DoubleClickTime = 0x80; // float
		constexpr auto ActionMappings = 0x88; // TArray<FInputActionKeyMapping>
		constexpr auto AxisMappings = 0x98; // TArray<FInputAxisKeyMapping>
		constexpr auto SpeechMappings = 0xa8; // TArray<FInputActionSpeechMapping>
		constexpr auto DefaultTouchInterface = 0xb8; // FSoftObjectPath
		constexpr auto ConsoleKey = 0xd0; // FKey
		constexpr auto ConsoleKeys = 0xe8; // TArray<FKey>
	}

	namespace n_UItemSpawningAnalyticsComponent {
		constexpr auto AnalyticsManager = 0x138; // AGameplayAnalyticsManager*
	}

	namespace n_UMaterialExpressionLandscapeLayerBlend {
		constexpr auto Layers = 0x48; // TArray<FLayerBlendInput>
		constexpr auto ExpressionGUID = 0x58; // FGuid
	}

	namespace n_UMovieSceneByteTrack {
		constexpr auto Enum = 0x90; // UEnum*
	}

	namespace n_UDialoguePlayback {
		constexpr auto DialogueTriggers = 0x380; // TArray<UWorldDialogueTrigger*>
		constexpr auto AttenuationAdjustment = 0x390; // float
		constexpr auto ActiveTriggers = 0x398; // TArray<UWorldDialogueTrigger*>
		constexpr auto DialogueLedger = 0x3a8; // UDialogueLedger*
		constexpr auto AfterConvoDelayTime = 0x3b4; // float
	}

	namespace n_APlayerSpawnManagerDebugger {
		constexpr auto FurthestAlongDebugInfo = 0x2a0; // FPlayerDebugInfo
		constexpr auto DeadPlayerDebugInfo = 0x2b8; // TArray<FPlayerDebugInfo>
		constexpr auto RequiredGoldenPathDelta = 0x2c8; // float
	}

	namespace n_UBTService_Damage {
		constexpr auto DamageCounterBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto DamageTags = 0xa0; // FGameplayTagContainer
		constexpr auto DamageTagMatchType = 0xc0; // EGameplayTagContainerMatchType
	}

	namespace n_UBirdsWarningLesson_BP_C {
		constexpr auto UberGraphFrame = 0x460; // FPointerToUberGraphFrame
	}

	namespace n_UEnvQueryTest_PlayerSpawnInfluence {
		constexpr auto DefaultScore = 0x208; // float
	}

	namespace n_UGameplayEffectAccumStumble {
		constexpr auto StumbleAmount = 0x238; // float
	}

	namespace n_AGobiPlayerStart {
		constexpr auto MissionHandle = 0x2d0; // FDataTableRowHandle
	}

	namespace n_UAnimationDataSourceRegistry {
		constexpr auto DataSources = 0x30; // TMap<FName, TWeakObjectPtr<UObject>>
	}

	namespace n_UHubHeaderEntryUserWidget {
		constexpr auto TrackedObjectives = 0x458; // TArray<FDataTableRowHandle>
	}

	namespace n_UGameplayEvalSet_BotSharedTraversal2D_C {
		constexpr auto IsNavLinkNext = 0x78; // FGameplayEval_IsNavLinkNext
		constexpr auto IsAvatarFacing = 0xc0; // FGameplayEval_IsAvatarFacing
		constexpr auto Distance2D NavLinkStartToEnd = 0x118; // FGameplayEval_Distance
		constexpr auto NavArea = 0x1e8; // FGameplayEval_NavArea
		constexpr auto DistanceToNavLinkStart = 0x258; // FGameplayEval_Distance
	}

	namespace n_UAISpawnCard {
		constexpr auto bShouldLogOnSuccess = 0x30; // bool
		constexpr auto bLimitOnePerDeck = 0x31; // bool
		constexpr auto GenerationConditionEvalSet = 0x38; // UAISpawnConditionEvaluatorSet*
		constexpr auto ConditionEvalSet = 0x40; // UAISpawnConditionEvaluatorSet*
		constexpr auto SpawnerPlacementConditionEvalSet = 0x48; // UAISpawnConditionEvaluatorSet*
		constexpr auto Populations = 0x50; // TArray<FAIPopulation>
		constexpr auto TotalAICount = 0x60; // int32_t
		constexpr auto bHasWakingPopulation = 0x64; // bool
		constexpr auto bShouldSpawnEarly = 0x65; // bool
		constexpr auto TagsToApplyToAllPopulations = 0x68; // FGameplayTagContainer
		constexpr auto CardTags = 0x88; // FGameplayTagContainer
		constexpr auto bShouldExhaust = 0xa8; // bool
		constexpr auto SpawningData = 0xb0; // USpawningEQSData*
		constexpr auto bAllowSpawnEQSToBeOverridden = 0xb8; // bool
		constexpr auto AISpawnerClass = 0xc0; // AAISpawnActor*
		constexpr auto DespawnerTags = 0xc8; // FGameplayTagContainer
		constexpr auto AISpawnerTags = 0xe8; // FGameplayTagContainer
		constexpr auto InitialWanderDistanceBucketsToSkip = 0x108; // int32_t
		constexpr auto bPlaceOnWalls = 0x10c; // bool
		constexpr auto WallSpawnHeight = 0x110; // FVector2D
		constexpr auto SpawnRadiusOverride = 0x118; // float
		constexpr auto SelfSpawnRadiusOverride = 0x11c; // float
		constexpr auto SpawnHalfHeightOverride = 0x120; // float
		constexpr auto bLimitOneSpawnerPerActorSpawnData = 0x124; // bool
		constexpr auto bOnRecycleEnableSpawners = 0x125; // bool
		constexpr auto bOnSpawnDisableAllSpawners = 0x126; // bool
		constexpr auto EnableSpawnerStartDistancePercentage = 0x128; // FVector2D
		constexpr auto bIgnoreMaxAILimit = 0x130; // bool
		constexpr auto bUseDesiredGoldenPathDistanceDeltaFromHeroes = 0x131; // bool
		constexpr auto DesiredGoldenPathDistanceFromHeroes = 0x134; // FVector2D
		constexpr auto bGuaranteeSpawnAtPreplacedSpawner = 0x13c; // bool
		constexpr auto bDisableFleeAtLastPreplacedSpawner = 0x13d; // bool
		constexpr auto bHighPriority = 0x13e; // bool
		constexpr auto bForceSpawnUnseeable = 0x13f; // bool
		constexpr auto bApplyExitPlayCooldownsOnSafeRoomExit = 0x140; // bool
		constexpr auto ForceSpawnAtBuckets = 0x148; // TArray<char>
		constexpr auto bPreferTestActors = 0x158; // bool
		constexpr auto bDiscardForHighSpawnHeat = 0x159; // bool
		constexpr auto DesiredGoldenPathDistanceDeltaName = 0x15c; // FName
		constexpr auto bEnterPlayCooldownOffsetSet = 0x164; // bool
		constexpr auto EnterPlayCooldownOffset = 0x168; // float
		constexpr auto bExitPlayCooldownOffsetSet = 0x16c; // bool
		constexpr auto ExitPlayCooldownOffset = 0x170; // float
		constexpr auto RotatingCooldownPhase = 0x174; // float
	}

	namespace n_UBirdsAlertedGameCoachLesson {
		constexpr auto BirdTeachDuration = 0x460; // float
	}

	namespace n_ABaseProjectile {
		constexpr auto ProjectileMovement = 0x490; // UProjectileMovementComponent*
		constexpr auto ParticleSystem = 0x498; // UParticleSystemComponent*
		constexpr auto StaticMeshComponent = 0x4a0; // UStaticMeshComponent*
		constexpr auto MaxLifetime = 0x4a8; // float
		constexpr auto MinDotFromInstigatorCheck = 0x4ac; // float
		constexpr auto bRequiresClearTraceCheck = 0x4b0; // bool
		constexpr auto bRequiresClientCollision = 0x4b1; // bool
		constexpr auto ClearTraceChannel = 0x4b2; // ECollisionChannel
		constexpr auto InterpComponentGameplayTag = 0x4b4; // FGameplayTag
		constexpr auto OnProjectileImpact = 0x4c0; // FMulticastInlineDelegate
		constexpr auto ProjectileImpactBehavior = 0x4d0; // uint16_t
		constexpr auto ApplyImpactBehaviorToOverlappingActors = 0x4d8; // FGameplayTagQuery
		constexpr auto HitDestroyDelay = 0x520; // float
		constexpr auto StayHiddenDuration = 0x524; // float
		constexpr auto DeathDestroyDelay = 0x528; // float
		constexpr auto bWaterDeepDestroys = 0x52c; // bool
		constexpr auto WaterDeepDepth = 0x530; // float
		constexpr auto CollisionComponentGameplayTag = 0x538; // FGameplayTag
		constexpr auto ActorsHit = 0x550; // TSet<AActor*>
		constexpr auto ImpactCueHandle = 0x5a0; // FGameplayCueHandle
		constexpr auto ImpactCue = 0x5b8; // FGameplayTag
		constexpr auto ImpactEffectConfig = 0x5c0; // UImpactEffectConfig*
		constexpr auto bSpawnImpactDeferred = 0x5c8; // bool
		constexpr auto ImpactAudioEvent = 0x5d0; // UAkAudioEvent*
		constexpr auto bAlsoImpactGroundIfImpactedCharacter = 0x5d8; // bool
		constexpr auto GroundTraceDownDistance = 0x5dc; // float
		constexpr auto TravelLoopAudioEvent = 0x5e0; // UAkAudioEvent*
		constexpr auto TravelLoopStopAudioEvent = 0x5e8; // UAkAudioEvent*
		constexpr auto bApplyDamage = 0x5f8; // bool
		constexpr auto DamageAmount = 0x5fc; // float
		constexpr auto DamageType = 0x600; // UGobiDamageType*
		constexpr auto bIgnoreIncapHeroImpacts = 0x608; // bool
		constexpr auto ReplicatedImpacts = 0x618; // TArray<FHitResult>
		constexpr auto EmitterOnSpawn = 0x630; // UParticleSystem*
		constexpr auto EmitterOnImpact = 0x640; // UParticleSystem*
		constexpr auto bImpactEmitterInheritsImpactNormalRotation = 0x648; // bool
		constexpr auto AdditionalImpactEmitterRotation = 0x64c; // FRotator
	}

	namespace n_UGameplayEffectHeroLightComponent {
		constexpr auto FirstPersonLightConfig = 0x240; // FFlashlightViewConfig
		constexpr auto ThirdPersonLightConfig = 0x2a0; // FFlashlightViewConfig
	}

	namespace n_UMovieSceneCameraShakeTrack {
		constexpr auto CameraShakeSections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UAnimNotify_AkEvent {
		constexpr auto AttachName = 0x40; // FName
		constexpr auto Event = 0x48; // UAkAudioEvent*
		constexpr auto Follow = 0x50; // bool
		constexpr auto EventName = 0x58; // FString
		constexpr auto PositionOffset = 0x68; // FVector
		constexpr auto Debug = 0x74; // bool
	}

	namespace n_UGizmoUniformScaleParameterSource {
		constexpr auto AxisSource = 0x50; // TScriptInterface<IGizmoAxisSource>
		constexpr auto TransformSource = 0x60; // TScriptInterface<IGizmoTransformSource>
		constexpr auto ScaleMultiplier = 0x70; // float
		constexpr auto Parameter = 0x74; // FVector2D
		constexpr auto LastChange = 0x7c; // FGizmoVec2ParameterChange
		constexpr auto CurScaleOrigin = 0x8c; // FVector
		constexpr auto CurScaleNormal = 0x98; // FVector
		constexpr auto CurScaleAxisX = 0xa4; // FVector
		constexpr auto CurScaleAxisY = 0xb0; // FVector
		constexpr auto InitialTransform = 0xc0; // FTransform
	}

	namespace n_AImpostorProxySpline {
		constexpr auto SplineComponent = 0x2a8; // USplineComponent*
		constexpr auto MinSpawnDelay = 0x2b0; // float
		constexpr auto MaxSpawnDelay = 0x2b4; // float
		constexpr auto MovementSpeed = 0x2b8; // float
	}

	namespace n_ASafeRoomVendor_BP_C {
		constexpr auto UberGraphFrame = 0x2c8; // FPointerToUberGraphFrame
		constexpr auto Vendor = 0x2d0; // UVendorComponent*
		constexpr auto ItemAudio = 0x2d8; // UItemAudioComponent*
		constexpr auto UseTriggerVolume = 0x2e0; // UBoxComponent*
		constexpr auto AnimContextLocator = 0x2e8; // UAnimContextLocatorComponent*
		constexpr auto Usable = 0x2f0; // UUsableComponent*
		constexpr auto StaticMesh = 0x2f8; // UStaticMeshComponent*
		constexpr auto DefaultSceneRoot = 0x300; // USceneComponent*
	}

	namespace n_UAudioComponent {
		constexpr auto Sound = 0x230; // USoundBase*
		constexpr auto InstanceParameters = 0x238; // TArray<FAudioComponentParam>
		constexpr auto SoundClassOverride = 0x248; // USoundClass*
		constexpr auto bAutoDestroy = 0x250; // char : 1
		constexpr auto bStopWhenOwnerDestroyed = 0x250; // char : 1
		constexpr auto bShouldRemainActiveIfDropped = 0x250; // char : 1
		constexpr auto bAllowSpatialization = 0x250; // char : 1
		constexpr auto bOverrideAttenuation = 0x250; // char : 1
		constexpr auto bOverrideSubtitlePriority = 0x250; // char : 1
		constexpr auto bIsUISound = 0x250; // char : 1
		constexpr auto bEnableLowPassFilter = 0x250; // char : 1
		constexpr auto bOverridePriority = 0x251; // char : 1
		constexpr auto bSuppressSubtitles = 0x251; // char : 1
		constexpr auto bAutoManageAttachment = 0x252; // char : 1
		constexpr auto AudioComponentUserID = 0x258; // FName
		constexpr auto PitchModulationMin = 0x260; // float
		constexpr auto PitchModulationMax = 0x264; // float
		constexpr auto VolumeModulationMin = 0x268; // float
		constexpr auto VolumeModulationMax = 0x26c; // float
		constexpr auto VolumeMultiplier = 0x270; // float
		constexpr auto EnvelopeFollowerAttackTime = 0x274; // int32_t
		constexpr auto EnvelopeFollowerReleaseTime = 0x278; // int32_t
		constexpr auto Priority = 0x27c; // float
		constexpr auto SubtitlePriority = 0x280; // float
		constexpr auto SourceEffectChain = 0x288; // USoundEffectSourcePresetChain*
		constexpr auto PitchMultiplier = 0x290; // float
		constexpr auto LowPassFilterFrequency = 0x294; // float
		constexpr auto AttenuationSettings = 0x2a0; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x2a8; // FSoundAttenuationSettings
		constexpr auto ConcurrencySettings = 0x648; // USoundConcurrency*
		constexpr auto ConcurrencySet = 0x650; // TSet<USoundConcurrency*>
		constexpr auto AutoAttachLocationRule = 0x6ac; // EAttachmentRule
		constexpr auto AutoAttachRotationRule = 0x6ad; // EAttachmentRule
		constexpr auto AutoAttachScaleRule = 0x6ae; // EAttachmentRule
		constexpr auto OnAudioFinished = 0x6b0; // FMulticastInlineDelegate
		constexpr auto OnAudioPlaybackPercent = 0x6d8; // FMulticastInlineDelegate
		constexpr auto OnAudioSingleEnvelopeValue = 0x700; // FMulticastInlineDelegate
		constexpr auto OnAudioMultiEnvelopeValue = 0x728; // FMulticastInlineDelegate
		constexpr auto Modulation = 0x750; // FSoundModulation
		constexpr auto OnQueueSubtitles = 0x760; // FDelegate
		constexpr auto AutoAttachParent = 0x770; // TWeakObjectPtr<USceneComponent>
		constexpr auto AutoAttachSocketName = 0x778; // FName
	}

	namespace n_UGameplayEffectStumbleComponent {
		constexpr auto PlayRateMods = 0x240; // TMap<UAnimMontage*, FGamePropertyFloatMod>
	}

	namespace n_UMainMenuScreen {
		constexpr auto OnReturnToSignIn = 0x558; // FMulticastInlineDelegate
	}

	namespace n_UDamageType {
		constexpr auto bCausedByWorld = 0x30; // char : 1
		constexpr auto bScaleMomentumByMass = 0x30; // char : 1
		constexpr auto bRadialDamageVelChange = 0x30; // char : 1
		constexpr auto DamageImpulse = 0x34; // float
		constexpr auto DestructibleImpulse = 0x38; // float
		constexpr auto DestructibleDamageSpreadScale = 0x3c; // float
		constexpr auto DamageFalloff = 0x40; // float
	}

	namespace n_AHeroGameMode {
		constexpr auto SpawnTagOverride = 0x488; // FName
		constexpr auto PostMatchWaitDuration = 0x490; // float
		constexpr auto TransitionWaitDuration = 0x494; // float
		constexpr auto DefaultSpawnTag = 0x4dc; // FName
		constexpr auto ExcludeCharactersFromGameDirectorSpawning = 0x4e8; // FGameplayTagQuery
	}

	namespace n_UDatasmithPostProcessVolumeTemplate {
		constexpr auto Settings = 0x40; // FDatasmithPostProcessSettingsTemplate
		constexpr auto bEnabled = 0x80; // char : 1
		constexpr auto bUnbound = 0x80; // char : 1
	}

	namespace n_UAnimInstance {
		constexpr auto CurrentSkeleton = 0x30; // USkeleton*
		constexpr auto RootMotionMode = 0x38; // ERootMotionMode
		constexpr auto bUseMultiThreadedAnimationUpdate = 0x39; // char : 1
		constexpr auto bUsingCopyPoseFromMesh = 0x39; // char : 1
		constexpr auto bReceiveNotifiesFromLinkedInstances = 0x39; // char : 1
		constexpr auto bPropagateNotifiesToLinkedInstances = 0x39; // char : 1
		constexpr auto bQueueMontageEvents = 0x39; // char : 1
		constexpr auto OnMontageBlendingOut = 0x40; // FMulticastInlineDelegate
		constexpr auto OnMontageStarted = 0x80; // FMulticastInlineDelegate
		constexpr auto OnMontageEnded = 0x90; // FMulticastInlineDelegate
		constexpr auto OnAllMontageInstancesEnded = 0xa0; // FMulticastInlineDelegate
		constexpr auto NotifyQueue = 0x140; // FAnimNotifyQueue
		constexpr auto ActiveAnimNotifyState = 0x1c0; // TArray<FAnimNotifyEvent>
		constexpr auto TabControl = 0x1d0; // UDebugTabControl*
	}

	namespace n_UUIDeveloperSettings {
		constexpr auto DataSet = 0x40; // TSoftObjectPtr<UUIDataSet>
		constexpr auto ScreenClasses = 0x68; // TArray<TSoftClassPtr<UObject>>
		constexpr auto AppLaunchScreenClasses = 0x78; // TArray<FSoftObjectPath>
		constexpr auto MutationScreenClass = 0x88; // TSoftClassPtr<UObject>
		constexpr auto StandardScreenResolution = 0xb0; // FIntPoint
		constexpr auto SafeZoneStepSize = 0xb8; // float
		constexpr auto SafeZoneMinValue = 0xbc; // float
		constexpr auto WaypointDataSet = 0xc0; // TSoftObjectPtr<UWaypointDataSet>
		constexpr auto PingWaypointClass = 0xe8; // TSoftClassPtr<UObject>
		constexpr auto DefaultWaypointClass = 0x110; // TSoftClassPtr<UObject>
		constexpr auto PingLifetime = 0x138; // float
		constexpr auto ItemPingLifetime = 0x13c; // float
		constexpr auto PingDistance = 0x140; // float
		constexpr auto PingHeightOffset = 0x144; // float
		constexpr auto PerPlayerPingLimit = 0x148; // int32_t
		constexpr auto PingOldNewScaleRange = 0x14c; // FVector2D
		constexpr auto WaypointBounds = 0x154; // FMargin
		constexpr auto AnalogBindThreshold = 0x164; // float
		constexpr auto GamepadChatDoubleClickTime = 0x168; // float
		constexpr auto GamepadAxisThreshold = 0x16c; // float
		constexpr auto CalloutTextFont = 0x170; // FSlateFontInfo
		constexpr auto CalloutSingleCharTextFont = 0x1d0; // FSlateFontInfo
		constexpr auto CalloutTextPadding = 0x230; // FMargin
		constexpr auto CalloutTextColor = 0x240; // FSlateColor
		constexpr auto CalloutIconHeight = 0x270; // int32_t
		constexpr auto CalloutIconTextWidth = 0x274; // int32_t
		constexpr auto ItemToolTipOffset = 0x278; // FVector2D
		constexpr auto ItemPickupTooltipClass = 0x280; // TSoftClassPtr<UObject>
		constexpr auto ItemObservationDistance = 0x2a8; // float
		constexpr auto ItemObservationSphereRadius = 0x2ac; // float
		constexpr auto ItemPickupTooltipOffset = 0x2b0; // float
		constexpr auto ItemPickupTooltipBounds = 0x2b4; // FMargin
		constexpr auto ItemPickupUseDuration = 0x2c4; // float
		constexpr auto NumAmmoToDrop = 0x2c8; // int32_t
		constexpr auto NumCurrencyToDrop = 0x2cc; // int32_t
		constexpr auto ItemDropRandomRotationMin = 0x2d0; // FRotator
		constexpr auto ItemAttributeSortOrder = 0x2e0; // TArray<EItemAttributeType>
		constexpr auto ItemAttributeDisplayTypes = 0x2f0; // TMap<EItemAttributeType, EItemAttributeDisplayType>
		constexpr auto PositiveAttributeColor = 0x340; // FSlateColor
		constexpr auto NegativeAttributeColor = 0x370; // FSlateColor
		constexpr auto ItemDropRandomRotationMax = 0x3a0; // FRotator
		constexpr auto DefaultMessageCountdownPopupClass = 0x3b0; // TSoftClassPtr<UObject>
		constexpr auto DefaultMessageThrobberPopupClass = 0x3d8; // TSoftClassPtr<UObject>
		constexpr auto DefaultMessagePopupClass = 0x400; // TSoftClassPtr<UObject>
		constexpr auto CalloutTooltipClass = 0x428; // TSoftClassPtr<UObject>
		constexpr auto CardTooltipClass = 0x450; // TSoftClassPtr<UObject>
		constexpr auto TutorialPopupClass = 0x478; // TSoftClassPtr<UObject>
		constexpr auto MOTDPopupClass = 0x4a0; // TSoftClassPtr<UObject>
		constexpr auto PasswordPopupClass = 0x4c8; // TSoftClassPtr<UObject>
		constexpr auto LicensePopupClass = 0x4f0; // TSoftClassPtr<UObject>
		constexpr auto StartupOptionsPopupClass = 0x518; // TSoftClassPtr<UObject>
		constexpr auto NameChangerPopupClass = 0x540; // TSoftClassPtr<UObject>
		constexpr auto SignInPopupClass = 0x568; // TSoftClassPtr<UObject>
		constexpr auto ReportPlayerPopupClass = 0x590; // TSoftClassPtr<UObject>
		constexpr auto SurveyPopupClass = 0x5b8; // TSoftClassPtr<UObject>
		constexpr auto PartyCrossplayErrorPopupClass = 0x5e0; // TSoftClassPtr<UObject>
		constexpr auto TooltipZOrder = 0x608; // int32_t
		constexpr auto DifficultyPopupTimesToShow = 0x60c; // int32_t
		constexpr auto InvitePromptDuration = 0x610; // float
		constexpr auto ZombieStuckRespawnDuration = 0x614; // float
		constexpr auto CommWheelActionsDataSet = 0x618; // TSoftObjectPtr<UCommWheelActionsData>
		constexpr auto CommWheelHoldDuration = 0x640; // float
		constexpr auto CommWheelPingLifetime = 0x644; // float
		constexpr auto CommWheelAnalogSelectionThreshold = 0x648; // float
		constexpr auto CommWheelMouseSelectionThreshold = 0x64c; // float
		constexpr auto CommWheelAnalogLockThreshold = 0x650; // float
		constexpr auto ScrollSpeed = 0x654; // float
		constexpr auto ListViewScrollSpeed = 0x658; // float
		constexpr auto CardAffinitiesToNames = 0x660; // TMap<EGameplayCardAffinity, FText>
		constexpr auto CardAffinitiesToColors = 0x6b0; // TMap<EGameplayCardAffinity, FSlateColor>
		constexpr auto ItemCategoriesToNames = 0x700; // TMap<EItemCategory, FText>
		constexpr auto TestAchievementClass = 0x750; // TSoftClassPtr<UObject>
		constexpr auto LowClickThreshold = 0x778; // int32_t
		constexpr auto ClickThreshold = 0x77c; // int32_t
		constexpr auto BeepThreshold = 0x780; // int32_t
		constexpr auto ChatMessageCacheSize = 0x784; // int32_t
		constexpr auto PreRoundCharacterSelectLevel = 0x788; // TSoftObjectPtr<UWorld>
		constexpr auto PostRoundCharacterSelectLevel = 0x7b0; // TSoftObjectPtr<UWorld>
		constexpr auto SplashFailureDuration = 0x7d8; // float
		constexpr auto DefaultPostroundPanelDuration = 0x7dc; // float
		constexpr auto PostroundPanelDurations = 0x7e0; // TMap<EPostRoundPanel, float>
		constexpr auto PlayerSprayActor = 0x830; // TSoftClassPtr<UObject>
		constexpr auto DefaultUserSpray = 0x858; // FSprayData
		constexpr auto UnockableSpraysTable = 0x868; // TSoftObjectPtr<UDataTable>
		constexpr auto SprayDistance = 0x890; // float
		constexpr auto DefaultUserBadge = 0x894; // FBadgeData
		constexpr auto UnlockableTitlesTable = 0x8a0; // TSoftObjectPtr<UDataTable>
		constexpr auto UnlockableEmblemsTable = 0x8c8; // TSoftObjectPtr<UDataTable>
		constexpr auto UnlockableBannersTable = 0x8f0; // TSoftObjectPtr<UDataTable>
		constexpr auto MaxUserSprays = 0x918; // int32_t
		constexpr auto MixProfileTable = 0x920; // TSoftObjectPtr<UDataTable>
		constexpr auto MOTDTable = 0x948; // TSoftObjectPtr<UDataTable>
		constexpr auto MediumDamageThreshold = 0x970; // float
		constexpr auto LargeDamageThreshold = 0x974; // float
		constexpr auto MaxDamageIndicators = 0x978; // char
		constexpr auto HitMarkerContextPriority = 0x980; // TArray<EDamageContext>
		constexpr auto LateJoinerCinematicThreshold = 0x990; // float
		constexpr auto SelectedPipOnColor = 0x998; // FSlateColor
		constexpr auto SelectedPipOffColor = 0x9c8; // FSlateColor
		constexpr auto TutorialMaps = 0x9f8; // TArray<FDataTableRowHandle>
		constexpr auto DefaultDifficulty = 0xa08; // EMissionDifficulty
	}

	namespace n_UEnvQueryTest_Distance {
		constexpr auto TestMode = 0x208; // EEnvTestDistance
		constexpr auto DistanceTo = 0x210; // UEnvQueryContext*
	}

	namespace n_UMaterialExpressionArccosine {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UMaterialExpressionFresnel {
		constexpr auto ExponentIn = 0x48; // FExpressionInput
		constexpr auto Exponent = 0x5c; // float
		constexpr auto BaseReflectFractionIn = 0x60; // FExpressionInput
		constexpr auto BaseReflectFraction = 0x74; // float
		constexpr auto Normal = 0x78; // FExpressionInput
	}

	namespace n_UGameplayEffectLifeStateIncap {
		constexpr auto MaxIncapCountMod = 0x270; // FGamePropertyIntMod
	}

	namespace n_UNPCComponent {
		constexpr auto MaxHeroFocusDistance = 0xe8; // float
		constexpr auto FocusTrackingUpdateRate = 0xf0; // float
		constexpr auto NPCOwner = 0xf8; // AGobiCharacter*
		constexpr auto bCanFocusEnable = 0x119; // bool
	}

	namespace n_ADialogueSystemDebugger {
		constexpr auto RegisteredSpeakers = 0x2a8; // TArray<FName>
		constexpr auto ActiveSpeech = 0x2b8; // TArray<FDialogueActiveSpeechDebugInfo>
		constexpr auto QueuedEvents = 0x2c8; // TArray<FQueuedEventDebugInfo>
		constexpr auto FullHistory = 0x2d8; // TArray<FDialogueRecordDebugInfo>
	}

	namespace n_USlateSettings {
		constexpr auto bExplicitCanvasChildZOrder = 0x30; // bool
	}

	namespace n_UMaterialExpressionPanner {
		constexpr auto Coordinate = 0x48; // FExpressionInput
		constexpr auto Time = 0x5c; // FExpressionInput
		constexpr auto Speed = 0x70; // FExpressionInput
		constexpr auto SpeedX = 0x84; // float
		constexpr auto SpeedY = 0x88; // float
		constexpr auto ConstCoordinate = 0x8c; // uint32_t
		constexpr auto bFractionalPart = 0x90; // bool
	}

	namespace n_UPersonalizationScreen {
		constexpr auto SprayData = 0x558; // FSprayData
		constexpr auto TempSprayData = 0x568; // FSprayData
	}

	namespace n_UNavigationDataChunk {
		constexpr auto NavigationDataName = 0x30; // FName
	}

	namespace n_UEnvQueryGenerator_ItemPickups {
		constexpr auto SearchCenter = 0x58; // UEnvQueryContext*
		constexpr auto SearchRadius = 0x60; // FAIDataProviderFloatValue
	}

	namespace n_ARadialForceActor {
		constexpr auto ForceComponent = 0x2a0; // URadialForceComponent*
	}

	namespace n_UAkSettings {
		constexpr auto MaxSimultaneousReverbVolumes = 0x30; // char
		constexpr auto WwiseProjectPath = 0x38; // FFilePath
		constexpr auto WwiseSoundBankFolder = 0x48; // FDirectoryPath
		constexpr auto bAutoConnectToWAAPI = 0x58; // bool
		constexpr auto DefaultOcclusionCollisionChannel = 0x59; // ECollisionChannel
		constexpr auto NavMeshSelector = 0x5c; // FNavAgentSelector
		constexpr auto bEnableMultiCoreRendering = 0xb0; // bool
		constexpr auto MigratedEnableMultiCoreRendering = 0xb1; // bool
		constexpr auto WwiseWindowsInstallationPath = 0xb8; // FDirectoryPath
		constexpr auto WwiseMacInstallationPath = 0xc8; // FFilePath
		constexpr auto bUseHeadphoneStateGroup = 0xd8; // bool
		constexpr auto HeadphoneStateGroupName = 0xe0; // FString
		constexpr auto PluggedInStateName = 0xf0; // FString
		constexpr auto UnpluggedStateName = 0x100; // FString
		constexpr auto bUsePlatformEQStateGroup = 0x110; // bool
		constexpr auto PlatformEQStateGroupName = 0x118; // FString
		constexpr auto AndroidEQStateName = 0x128; // FString
		constexpr auto OculusGoEQStateName = 0x138; // FString
		constexpr auto OculusSantaCruzEQStateName = 0x148; // FString
		constexpr auto WindowsEQStateName = 0x158; // FString
		constexpr auto bLinkDialogueLanguageToTextCulture = 0x168; // bool
		constexpr auto CultureToWwiseLanguageDirectory = 0x170; // TMap<FString, FString>
		constexpr auto bUseDistanceTickOptimizations = 0x1c0; // bool
		constexpr auto AlwaysTickDistance = 0x1c4; // float
		constexpr auto SlowTickDistance = 0x1c8; // float
		constexpr auto TargetTickInterval = 0x1cc; // float
		constexpr auto SlowTickMaxInterval = 0x1d0; // float
		constexpr auto bStopTickingInactiveComponents = 0x1d4; // bool
		constexpr auto bUsingVelocitySensitiveTicking = 0x1d5; // bool
		constexpr auto AngleGranularity = 0x1d8; // float
		constexpr auto RadiusRatio = 0x1dc; // float
		constexpr auto FirstPersonRTPCName = 0x1e0; // FString
		constexpr auto bUsingSoundBankCachingSystem = 0x1f0; // bool
		constexpr auto bEnableAmbientSoundManagement = 0x1f1; // bool
		constexpr auto CacheManagerThrashingTimestep = 0x1f8; // double
		constexpr auto ExtraDistancePadding = 0x200; // float
		constexpr auto bEnableAcousticPortalManagement = 0x204; // bool
		constexpr auto AcousticPortalMaxAudibleDistance = 0x208; // float
		constexpr auto ManagerUpdateRate = 0x20c; // float
		constexpr auto ActivePortalTickRate = 0x210; // float
		constexpr auto ListenerManagerClass = 0x218; // UTRSListenerManager*
		constexpr auto InitializationBanks = 0x220; // TArray<TSoftObjectPtr<UAkAudioBank>>
		constexpr auto ImportToolDestinationFolderName = 0x230; // FString
		constexpr auto DLCPrefix = 0x240; // FString
		constexpr auto AdditionalAudioDirectories = 0x250; // TSet<FString>
	}

	namespace n_UDataTable {
		constexpr auto RowStruct = 0x30; // UScriptStruct*
		constexpr auto bStripFromClientBuilds = 0x88; // char : 1
		constexpr auto bIgnoreExtraFields = 0x88; // char : 1
		constexpr auto bIgnoreMissingFields = 0x88; // char : 1
		constexpr auto ImportKeyField = 0x90; // FString
	}

	namespace n_UConnectionCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UGobiMusicSubsystem {
		constexpr auto MusicSystem = 0x38; // UGobiMusicSystem*
	}

	namespace n_UAsyncActionLoadPrimaryAsset {
		constexpr auto Completed = 0x80; // FMulticastInlineDelegate
	}

	namespace n_UModularSynthComponent {
		constexpr auto VoiceCount = 0x710; // int32_t
	}

	namespace n_UCameraComponent {
		constexpr auto FieldOfView = 0x230; // float
		constexpr auto OrthoWidth = 0x234; // float
		constexpr auto OrthoNearClipPlane = 0x238; // float
		constexpr auto OrthoFarClipPlane = 0x23c; // float
		constexpr auto AspectRatio = 0x240; // float
		constexpr auto bConstrainAspectRatio = 0x244; // char : 1
		constexpr auto bUseFieldOfViewForLOD = 0x244; // char : 1
		constexpr auto bLockToHmd = 0x244; // char : 1
		constexpr auto bUsePawnControlRotation = 0x244; // char : 1
		constexpr auto bUsePawnControlRotationAsRelativeRotation = 0x248; // char : 1
		constexpr auto ProjectionMode = 0x24d; // ECameraProjectionMode
		constexpr auto PostProcessBlendWeight = 0x280; // float
		constexpr auto PostProcessSettings = 0x2b0; // FPostProcessSettings
	}

	namespace n_UAnimEvalSet_Medium_Damage_DeathReaction_C {
		constexpr auto DamageAmountComparison = 0xc0; // FGameplayEval_DamageAmount
		constexpr auto DamageAmountRange = 0x158; // FGameplayEval_DamageRange
		constexpr auto DamageType = 0x220; // FGameplayEval_DamageType
		constexpr auto DamageBone = 0x2e0; // FGameplayEval_HitReactionBone
		constexpr auto DistanceToDamageSource = 0x390; // FGameplayEval_Distance
		constexpr auto AvatarHealth = 0x460; // FGameplayEval_Health
		constexpr auto AvatarTags = 0x4b8; // FGameplayEval_GameplayTags
		constexpr auto AvatarSpeed = 0x550; // FGameplayEval_SpeedRange
	}

	namespace n_USystemTimeTimecodeProvider {
		constexpr auto FrameRate = 0x38; // FFrameRate
		constexpr auto bGenerateFullFrame = 0x40; // bool
		constexpr auto bUseHighPerformanceClock = 0x41; // bool
	}

	namespace n_UMeshApplicationTrait {
		constexpr auto SkeletalMeshConfigs = 0x30; // TArray<FSkeletalMeshConfig>
		constexpr auto StaticMeshConfigs = 0x40; // TArray<FStaticMeshConfig>
	}

	namespace n_USubmixEffectDynamicsProcessorPreset {
		constexpr auto Settings = 0xc0; // FSubmixEffectDynamicsProcessorSettings
	}

	namespace n_UDistributionFloatConstantCurve {
		constexpr auto ConstantCurve = 0x40; // FInterpCurveFloat
	}

	namespace n_UEnvQueryTest_Volume {
		constexpr auto VolumeContext = 0x208; // UEnvQueryContext*
		constexpr auto VolumeClass = 0x210; // AVolume*
		constexpr auto bDoComplexVolumeTest = 0x218; // char : 1
	}

	namespace n_UBurstAttackComponent {
		constexpr auto OnBurstEnded = 0x1e0; // FMulticastInlineDelegate
		constexpr auto MoveTickData = 0x1f0; // FBurstMoveTickData
		constexpr auto bCanBurstOffLedges = 0x2b2; // bool
		constexpr auto bCanWalkOffLedgesDuringBurstEnd = 0x2b3; // bool
		constexpr auto bSqueezeAttack = 0x2b4; // bool
		constexpr auto bMeleeAttack = 0x2b5; // bool
		constexpr auto bSecondaryButtonCancelsBurst = 0x2b6; // bool
		constexpr auto MeleeAttackComponentTag = 0x2b8; // FGameplayTag
		constexpr auto BurstCollisionProfileName = 0x2c0; // FName
		constexpr auto BurstMontagesName = 0x2c8; // FName
		constexpr auto RotationRateClampName = 0x2d0; // FName
		constexpr auto BurstMontages = 0x2d8; // TArray<UAnimMontage*>
		constexpr auto BurstTraversalMontages = 0x2e8; // TArray<UAnimMontage*>
		constexpr auto BurstStopMontages = 0x2f8; // TArray<UAnimMontage*>
		constexpr auto AppliedTags = 0x308; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x328; // FGameplayTagQuery
		constexpr auto CancelTags = 0x370; // FGameplayTagContainer
		constexpr auto BurstCollisionStumbleTag = 0x390; // FGameplayTag
		constexpr auto BurstCollisionStumbleEffects = 0x398; // TArray<UGameplayEffect*>
		constexpr auto bUsesTuningData = 0x3a8; // bool
		constexpr auto BurstAttackTuning = 0x3ac; // FBurstAttackTuning
	}

	namespace n_UAkSurfaceReflectorSetComponent {
		constexpr auto bEnableSurfaceReflectors = 0x230; // char : 1
		constexpr auto AcousticPolys = 0x238; // TArray<FAkPoly>
		constexpr auto bEnableDiffraction = 0x248; // char : 1
		constexpr auto bEnableDiffractionOnBoundaryEdges = 0x248; // char : 1
		constexpr auto AssociatedRoom = 0x250; // AActor*
	}

	namespace n_UMovieSceneEnumTrack {
		constexpr auto Enum = 0x90; // UEnum*
	}

	namespace n_UMaterialExpressionLinearInterpolate {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto Alpha = 0x70; // FExpressionInput
		constexpr auto ConstA = 0x84; // float
		constexpr auto ConstB = 0x88; // float
		constexpr auto ConstAlpha = 0x8c; // float
	}

	namespace n_UTextureLightProfile {
		constexpr auto Brightness = 0xf0; // float
		constexpr auto TextureMultiplier = 0xf4; // float
	}

	namespace n_ACameraActor {
		constexpr auto AutoActivateForPlayer = 0x2a0; // EAutoReceiveInput
		constexpr auto CameraComponent = 0x2a8; // UCameraComponent*
		constexpr auto SceneComponent = 0x2b0; // USceneComponent*
		constexpr auto bConstrainAspectRatio = 0x2c0; // char : 1
		constexpr auto AspectRatio = 0x2c4; // float
		constexpr auto FOVAngle = 0x2c8; // float
		constexpr auto PostProcessBlendWeight = 0x2cc; // float
		constexpr auto PostProcessSettings = 0x2d0; // FPostProcessSettings
	}

	namespace n_UInterpTrackInstFloatMaterialParam {
		constexpr auto MaterialInstances = 0x30; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ResetFloats = 0x40; // TArray<float>
		constexpr auto PrimitiveMaterialRefs = 0x50; // TArray<FPrimitiveMaterialRef>
		constexpr auto InstancedTrack = 0x60; // UInterpTrackFloatMaterialParam*
	}

	namespace n_UGamepadConfigPanelUserWidget {
		constexpr auto bIsZombieMode = 0x4c8; // bool
		constexpr auto bCustomBindingsShowing = 0x4c9; // bool
		constexpr auto OnButtonConfigPreviewed = 0x4d0; // FMulticastInlineDelegate
		constexpr auto GamepadHumanButtons = 0x4e0; // TArray<FGamepadConfigButtonData>
		constexpr auto GamepadZombieButtons = 0x4f0; // TArray<FGamepadConfigButtonData>
	}

	namespace n_UAIPerceptionStimuliSourceComponent {
		constexpr auto bAutoRegisterAsSource = 0xe8; // char : 1
		constexpr auto RegisterAsSourceForSenses = 0xf0; // TArray<UAISense*>
	}

	namespace n_UNiagaraDataInterfaceGrid3D {
		constexpr auto NumVoxels = 0xd8; // FIntVector
		constexpr auto VoxelSize = 0xe4; // float
		constexpr auto SetGridFromVoxelSize = 0xe8; // bool
		constexpr auto WorldBBoxSize = 0xec; // FVector
	}

	namespace n_UAnimContext_Facing {
		constexpr auto Facing = 0x60; // UAnimContext_Transform*
		constexpr auto TargetPos = 0x68; // UAnimContext_Transform*
	}

	namespace n_UEnvQueryGenerator_Donut {
		constexpr auto InnerRadius = 0x88; // FAIDataProviderFloatValue
		constexpr auto OuterRadius = 0xc0; // FAIDataProviderFloatValue
		constexpr auto NumberOfRings = 0xf8; // FAIDataProviderIntValue
		constexpr auto PointsPerRing = 0x130; // FAIDataProviderIntValue
		constexpr auto ArcDirection = 0x168; // FEnvDirection
		constexpr auto ArcAngle = 0x188; // FAIDataProviderFloatValue
		constexpr auto bUseSpiralPattern = 0x1c0; // bool
		constexpr auto Center = 0x1c8; // UEnvQueryContext*
		constexpr auto bDefineArc = 0x1d0; // char : 1
	}

	namespace n_UPartyGroupsTab_WBP_C {
		constexpr auto UberGraphFrame = 0x458; // FPointerToUberGraphFrame
		constexpr auto PlayerLeftStack = 0x460; // UVerticalBox*
		constexpr auto GroupPlayers = 0x468; // TArray<FPartyPlayer>
		constexpr auto EnemyPlayers = 0x478; // TArray<FPartyPlayer>
		constexpr auto MaxLeftPlayersForMode = 0x488; // int32_t
		constexpr auto EditorEmptyPlayerCount = 0x48c; // int32_t
		constexpr auto AvailableInviteSlots = 0x490; // int32_t
	}

	namespace n_UNiagaraEffectType {
		constexpr auto UpdateFrequency = 0x30; // ENiagaraScalabilityUpdateFrequency
		constexpr auto CullReaction = 0x34; // ENiagaraCullReaction
		constexpr auto DetailLevelScalabilitySettings = 0x38; // TArray<FNiagaraSystemScalabilitySettings>
		constexpr auto SystemScalabilitySettings = 0x48; // FNiagaraSystemScalabilitySettingsArray
		constexpr auto EmitterScalabilitySettings = 0x58; // FNiagaraEmitterScalabilitySettingsArray
	}

	namespace n_UGenCondition_ScenarioCausedInterruption_C {
		constexpr auto ScenarioInterruption = 0x78; // FAISpawnEval_ScenarioCausedInterruption
	}

	namespace n_UTitanStage1Component {
		constexpr auto OnTitanPainRoarStart = 0xf0; // FMulticastInlineDelegate
		constexpr auto State = 0x100; // ETitanStage1State
		constexpr auto MaxAttackRange = 0x104; // float
		constexpr auto bAutoAttackOnBegin = 0x108; // bool
		constexpr auto TitanStage1Tuning = 0x110; // FTitanStage1Tuning
		constexpr auto NumEmergeAnimSequences = 0x150; // int8_t
		constexpr auto NumRetractAnimSequences = 0x151; // int8_t
		constexpr auto OptionalTentacleActorReferences = 0x198; // TArray<AActor*>
		constexpr auto TentacleComponents = 0x1a8; // TArray<UTitanStage1TentacleComponent*>
	}

	namespace n_UAssetTable {
		constexpr auto DebugName = 0x38; // FString
		constexpr auto Assets = 0x48; // TArray<FSoftObjectPath>
		constexpr auto SoundBanks = 0x58; // TArray<UAkAudioBank*>
	}

	namespace n_UCardDragPayload {
		constexpr auto CardRowHandle = 0x30; // FDataTableRowHandle
	}

	namespace n_UEnvQueryTest_IsPerceived {
		constexpr auto MaxStimulusAge = 0x208; // float
	}

	namespace n_USkeletalMeshSocket {
		constexpr auto SocketName = 0x30; // FName
		constexpr auto BoneName = 0x38; // FName
		constexpr auto RelativeLocation = 0x40; // FVector
		constexpr auto RelativeRotation = 0x4c; // FRotator
		constexpr auto RelativeScale = 0x58; // FVector
		constexpr auto bForceAlwaysAnimated = 0x64; // bool
	}

	namespace n_UPopupManager {
		constexpr auto OnPopupOpened = 0x38; // FMulticastInlineDelegate
		constexpr auto OnPopupClosed = 0x48; // FMulticastInlineDelegate
		constexpr auto PopupQueue = 0x58; // TArray<UPopupUserWidget*>
	}

	namespace n_UAISystem {
		constexpr auto PerceptionSystemClassName = 0x60; // FSoftClassPath
		constexpr auto HotSpotManagerClassName = 0x78; // FSoftClassPath
		constexpr auto AcceptanceRadius = 0x90; // float
		constexpr auto PathfollowingRegularPathPointAcceptanceRadius = 0x94; // float
		constexpr auto PathfollowingNavLinkAcceptanceRadius = 0x98; // float
		constexpr auto bFinishMoveOnGoalOverlap = 0x9c; // bool
		constexpr auto bAcceptPartialPaths = 0x9d; // bool
		constexpr auto bAllowStrafing = 0x9e; // bool
		constexpr auto bEnableBTAITasks = 0x9f; // bool
		constexpr auto bAllowControllersAsEQSQuerier = 0xa0; // bool
		constexpr auto bEnableDebuggerPlugin = 0xa1; // bool
		constexpr auto bForgetStaleActors = 0xa2; // bool
		constexpr auto DefaultSightCollisionChannel = 0xa3; // ECollisionChannel
		constexpr auto BehaviorTreeManager = 0xa8; // UBehaviorTreeManager*
		constexpr auto EnvironmentQueryManager = 0xb0; // UEnvQueryManager*
		constexpr auto PerceptionSystem = 0xb8; // UAIPerceptionSystem*
		constexpr auto AllProxyObjects = 0xc0; // TArray<UAIAsyncTaskBlueprintProxy*>
		constexpr auto HotSpotManager = 0xd0; // UAIHotSpotManager*
		constexpr auto NavLocalGrids = 0xd8; // UNavLocalGridManager*
	}

	namespace n_UMovieSceneCinematicShotSection {
		constexpr auto ShotDisplayName = 0x160; // FString
		constexpr auto DisplayName = 0x170; // FText
	}

	namespace n_UMovieSceneSkeletalAnimationTrack {
		constexpr auto AnimationSections = 0x60; // TArray<UMovieSceneSection*>
		constexpr auto bUseLegacySectionIndexBlend = 0x70; // bool
	}

	namespace n_UGameplayAction_BotTraversal {
		constexpr auto TraversalGroups = 0x210; // TArray<FBotTraversalGroup>
		constexpr auto FilterSet = 0x220; // UGameplayEvaluatorSet*
	}

	namespace n_AGameModeBase {
		constexpr auto GameSessionClass = 0x2b0; // AGameSession*
		constexpr auto GameStateClass = 0x2b8; // AGameStateBase*
		constexpr auto PlayerControllerClass = 0x2c0; // APlayerController*
		constexpr auto PlayerStateClass = 0x2c8; // APlayerState*
		constexpr auto HUDClass = 0x2d0; // AHUD*
		constexpr auto DefaultPawnClass = 0x2d8; // APawn*
		constexpr auto SpectatorClass = 0x2e0; // ASpectatorPawn*
		constexpr auto ReplaySpectatorPlayerControllerClass = 0x2e8; // APlayerController*
		constexpr auto ServerStatReplicatorClass = 0x2f0; // AServerStatReplicator*
		constexpr auto GameSession = 0x2f8; // AGameSession*
		constexpr auto GameState = 0x300; // AGameStateBase*
		constexpr auto ServerStatReplicator = 0x308; // AServerStatReplicator*
		constexpr auto DefaultPlayerName = 0x310; // FText
		constexpr auto bUseSeamlessTravel = 0x328; // char : 1
		constexpr auto bStartPlayersAsSpectators = 0x328; // char : 1
		constexpr auto bPauseable = 0x328; // char : 1
	}

	namespace n_UDialogueVoice {
		constexpr auto Gender = 0x30; // EGrammaticalGender
		constexpr auto Plurality = 0x31; // EGrammaticalNumber
		constexpr auto LocalizationGUID = 0x34; // FGuid
	}

	namespace n_AGobiTeleportMarker {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
	}

	namespace n_ULandscapeMaterialInstanceConstant {
		constexpr auto TextureStreamingInfo = 0x418; // TArray<FLandscapeMaterialTextureStreamingInfo>
		constexpr auto bIsLayerThumbnail = 0x428; // char : 1
		constexpr auto bDisableTessellation = 0x428; // char : 1
		constexpr auto bMobile = 0x428; // char : 1
		constexpr auto bEditorToolUsage = 0x428; // char : 1
	}

	namespace n_UPlayerCutsceneSynchronizationComponent {
		constexpr auto bVotingToSkip = 0xe9; // bool
		constexpr auto CutscenePhase = 0xea; // ECutscenePhase
	}

	namespace n_USteeringBehavior_PathFollowing {
		constexpr auto MaxTurnAngleRange = 0x58; // FVector2D
		constexpr auto bMaxTurnAngleRelativeToOwnerFacing = 0x60; // bool
		constexpr auto MaxRotationRateWhenStationary = 0x64; // float
		constexpr auto SlowdownDistance = 0x68; // float
		constexpr auto SpeedAdjustmentContext = 0x70; // UAnimContext_Rotation*
		constexpr auto MaxAngleFromSpeedAdjContext = 0x78; // float
		constexpr auto bUseLookAheadLocation = 0x7c; // bool
		constexpr auto LookAheadDistance = 0x80; // float
		constexpr auto LinkFocusDistanceThreshold = 0x84; // float
	}

	namespace n_UMaterialExpressionSkyAtmosphereLightIlluminance {
		constexpr auto LightIndex = 0x48; // int32_t
		constexpr auto WorldPosition = 0x4c; // FExpressionInput
	}

	namespace n_UParticleModuleLight {
		constexpr auto bUseInverseSquaredFalloff = 0x38; // bool
		constexpr auto bAffectsTranslucency = 0x39; // bool
		constexpr auto Hardness = 0x3c; // float
		constexpr auto SpecularScale = 0x40; // float
		constexpr auto bPreviewLightRadius = 0x44; // bool
		constexpr auto SpawnFraction = 0x48; // float
		constexpr auto ColorScaleOverLife = 0x50; // FRawDistributionVector
		constexpr auto BrightnessOverLife = 0x98; // FRawDistributionFloat
		constexpr auto RadiusScale = 0xc8; // FRawDistributionFloat
		constexpr auto LightExponent = 0xf8; // FRawDistributionFloat
		constexpr auto LightingChannels = 0x128; // FLightingChannels
		constexpr auto VolumetricScatteringIntensity = 0x12c; // float
		constexpr auto bHighQualityLights = 0x130; // bool
		constexpr auto bShadowCastingLights = 0x131; // bool
	}

	namespace n_UMaterialExpressionNormalize {
		constexpr auto VectorInput = 0x48; // FExpressionInput
	}

	namespace n_UBehaviorTreeManager {
		constexpr auto MaxDebuggerSteps = 0x30; // int32_t
		constexpr auto LoadedTemplates = 0x38; // TArray<FBehaviorTreeTemplateInfo>
		constexpr auto ActiveComponents = 0x48; // TArray<UBehaviorTreeComponent*>
	}

	namespace n_UNiagaraDataInterfaceVectorCurve {
		constexpr auto XCurve = 0x60; // FRichCurve
		constexpr auto YCurve = 0xe0; // FRichCurve
		constexpr auto ZCurve = 0x160; // FRichCurve
	}

	namespace n_UPVPGameModeSeamessTravelData {
		constexpr auto bTeamAHero = 0x30; // bool
	}

	namespace n_UTutorialTipUserWidget {
		constexpr auto Tutorial = 0x468; // EFTUETutorial
		constexpr auto bAlwaysShowDuringTutorialLevels = 0x469; // bool
	}

	namespace n_UBTDecorator_TimeLimit {
		constexpr auto TimeLimit = 0x70; // float
	}

	namespace n_UMaterialExpressionDistanceToNearestSurface {
		constexpr auto Position = 0x48; // FExpressionInput
	}

	namespace n_UARPlaneGeometry {
		constexpr auto Orientation = 0xe8; // EARPlaneOrientation
		constexpr auto Center = 0xec; // FVector
		constexpr auto Extent = 0xf8; // FVector
		constexpr auto SubsumedBy = 0x118; // UARPlaneGeometry*
	}

	namespace n_UGameplayTagsSettings {
		constexpr auto ImportTagsFromConfig = 0x50; // bool
		constexpr auto WarnOnInvalidTags = 0x51; // bool
		constexpr auto FastReplication = 0x52; // bool
		constexpr auto InvalidTagCharacters = 0x58; // FString
		constexpr auto CategoryRemapping = 0x68; // TArray<FGameplayTagCategoryRemap>
		constexpr auto GameplayTagTableList = 0x78; // TArray<FSoftObjectPath>
		constexpr auto GameplayTagRedirects = 0x88; // TArray<FGameplayTagRedirect>
		constexpr auto CommonlyReplicatedTags = 0x98; // TArray<FName>
		constexpr auto NumBitsForContainerSize = 0xa8; // int32_t
		constexpr auto NetIndexFirstBitSegment = 0xac; // int32_t
		constexpr auto RestrictedConfigFiles = 0xb0; // TArray<FRestrictedConfigInfo>
	}

	namespace n_UParticleModuleColorOverLife {
		constexpr auto ColorOverLife = 0x38; // FRawDistributionVector
		constexpr auto AlphaOverLife = 0x80; // FRawDistributionFloat
		constexpr auto bClampAlpha = 0xb0; // char : 1
	}

	namespace n_UMovementComponent {
		constexpr auto UpdatedComponent = 0xe8; // USceneComponent*
		constexpr auto UpdatedPrimitive = 0xf0; // UPrimitiveComponent*
		constexpr auto Velocity = 0xfc; // FVector
		constexpr auto PlaneConstraintNormal = 0x108; // FVector
		constexpr auto PlaneConstraintOrigin = 0x114; // FVector
		constexpr auto bUpdateOnlyIfRendered = 0x120; // char : 1
		constexpr auto bAutoUpdateTickRegistration = 0x120; // char : 1
		constexpr auto bTickBeforeOwner = 0x120; // char : 1
		constexpr auto bAutoRegisterUpdatedComponent = 0x120; // char : 1
		constexpr auto bConstrainToPlane = 0x120; // char : 1
		constexpr auto bSnapToPlaneAtStart = 0x120; // char : 1
		constexpr auto bAutoRegisterPhysicsVolumeUpdates = 0x120; // char : 1
		constexpr auto bComponentShouldUpdatePhysicsVolume = 0x120; // char : 1
		constexpr auto PlaneConstraintAxisSetting = 0x123; // EPlaneConstraintAxisSetting
	}

	namespace n_UAISpawnDeck {
		constexpr auto SpawnCards = 0x90; // TArray<UAISpawnCard*>
		constexpr auto PrioritySpawnCards = 0xa0; // TArray<UAISpawnCard*>
		constexpr auto ExhaustedCards = 0xb0; // TArray<UAISpawnCard*>
		constexpr auto DiscardedCards = 0xc0; // TArray<FDiscardedCard>
		constexpr auto PriorityDiscardedCards = 0xd0; // TArray<FDiscardedCard>
		constexpr auto CardsInPlay = 0xe0; // TArray<FCardInPlay>
	}

	namespace n_USkyLightComponent {
		constexpr auto SourceType = 0x260; // ESkyLightSourceType
		constexpr auto SourceCubemapAngle = 0x270; // float
		constexpr auto CubemapResolution = 0x274; // int32_t
		constexpr auto SkyDistanceThreshold = 0x278; // float
		constexpr auto bCaptureEmissiveOnly = 0x27c; // bool
		constexpr auto bLowerHemisphereIsBlack = 0x27d; // bool
		constexpr auto LowerHemisphereColor = 0x280; // FLinearColor
		constexpr auto OcclusionMaxDistance = 0x290; // float
		constexpr auto Contrast = 0x294; // float
		constexpr auto OcclusionExponent = 0x298; // float
		constexpr auto MinOcclusion = 0x29c; // float
		constexpr auto OcclusionTint = 0x2a0; // FColor
		constexpr auto OcclusionCombineMode = 0x2a4; // EOcclusionCombineMode
		constexpr auto BlendDestinationCubemap = 0x358; // UTextureCube*
	}

	namespace n_UBTDecorator_Blackboard {
		constexpr auto IntValue = 0x98; // int32_t
		constexpr auto FloatValue = 0x9c; // float
		constexpr auto StringValue = 0xa0; // FString
		constexpr auto CachedDescription = 0xb0; // FString
		constexpr auto OperationType = 0xc0; // char
		constexpr auto NotifyObserver = 0xc1; // EBTBlackboardRestart
	}

	namespace n_UPlatformEventsComponent {
		constexpr auto PlatformChangedToLaptopModeDelegate = 0xe8; // FMulticastInlineDelegate
		constexpr auto PlatformChangedToTabletModeDelegate = 0xf8; // FMulticastInlineDelegate
	}

	namespace n_UAssetMappingTable {
		constexpr auto MappedAssets = 0x30; // TArray<FAssetMapping>
	}

	namespace n_UBlueprint {
		constexpr auto ParentClass = 0x58; // UObject*
		constexpr auto BlueprintType = 0x60; // EBlueprintType
		constexpr auto bRecompileOnLoad = 0x61; // char : 1
		constexpr auto bHasBeenRegenerated = 0x61; // char : 1
		constexpr auto bIsRegeneratingOnLoad = 0x61; // char : 1
		constexpr auto BlueprintSystemVersion = 0x64; // int32_t
		constexpr auto SimpleConstructionScript = 0x68; // USimpleConstructionScript*
		constexpr auto ComponentTemplates = 0x70; // TArray<UActorComponent*>
		constexpr auto Timelines = 0x80; // TArray<UTimelineTemplate*>
		constexpr auto ComponentClassOverrides = 0x90; // TArray<FBPComponentClassOverride>
		constexpr auto InheritableComponentHandler = 0xa0; // UInheritableComponentHandler*
	}

	namespace n_UBTService_ActorLocation {
		constexpr auto ActorBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto LocationBBKey = 0xa0; // FBlackboardKeySelector
	}

	namespace n_UWeaponCustomizationScreen {
		constexpr auto CurrentItem = 0x598; // FDataTableRowHandle
		constexpr auto InitialEquippedCustomization = 0x5b8; // FDataTableRowHandle
		constexpr auto EquippedCustomization = 0x5d8; // FDataTableRowHandle
		constexpr auto RelatedCustomizationRowHandles = 0x5f8; // TArray<FDataTableRowHandle>
		constexpr auto ItemRowHandles = 0x610; // TArray<FDataTableRowHandle>
	}

	namespace n_UAISenseConfig_TRSSight {
		constexpr auto Implementation = 0x50; // UAISense_TRSSight*
		constexpr auto SightRadius = 0x58; // float
		constexpr auto AlertSightRadius = 0x5c; // float
		constexpr auto LoseSightRadius = 0x60; // float
		constexpr auto MinRadius = 0x64; // float
		constexpr auto PeripheralVisionAngleDegrees = 0x68; // float
		constexpr auto DetectionByAffiliation = 0x6c; // FAISenseAffiliationFilter
		constexpr auto AutoSuccessRangeFromLastSeenLocation = 0x70; // float
		constexpr auto bUseAimAssist = 0x74; // bool
	}

	namespace n_UAnimCompress {
		constexpr auto bNeedsSkeleton = 0x40; // char : 1
		constexpr auto TranslationCompressionFormat = 0x44; // AnimationCompressionFormat
		constexpr auto RotationCompressionFormat = 0x45; // AnimationCompressionFormat
		constexpr auto ScaleCompressionFormat = 0x46; // AnimationCompressionFormat
	}

	namespace n_UGameplayAction_Despawn {
		constexpr auto bRecycleOnDespawn = 0x210; // bool
		constexpr auto bLeaveDeadBody = 0x211; // bool
		constexpr auto DespawnCollisionProfile = 0x214; // FCollisionProfileName
		constexpr auto PreDespawnMontages = 0x220; // TArray<UAnimMontage*>
		constexpr auto DespawnMontages = 0x230; // TArray<UAnimMontage*>
		constexpr auto PreDespawnTime = 0x240; // float
	}

	namespace n_UEmissiveScalingComponent {
		constexpr auto EmissiveScalarParamName = 0xe8; // FName
		constexpr auto MaterialSlotName = 0xf0; // FName
		constexpr auto SkelMeshComponentTags = 0xf8; // FGameplayTagContainer
	}

	namespace n_UIncapUsableComponent {
		constexpr auto DamageForMinProgressLost = 0x4f8; // float
		constexpr auto DamageForMaxProgressLost = 0x4fc; // float
		constexpr auto MinProgressLostFromDamage = 0x500; // float
		constexpr auto MaxProgressLostFromDamage = 0x504; // float
		constexpr auto DamageTagsToIgnore = 0x508; // FGameplayTagQuery
		constexpr auto ReviveEffects = 0x550; // TArray<UGameplayEffect*>
	}

	namespace n_UTargetingReticleComponent {
		constexpr auto TuningData = 0x140; // FTargetingReticleTuning
		constexpr auto TargetReticleClass = 0x168; // AGobiReticle*
		constexpr auto TargetReticleLockedOnClass = 0x170; // AGobiReticle*
		constexpr auto TargetReticleGhostClass = 0x178; // AGobiReticle*
		constexpr auto ShowReticleTagQuery = 0x180; // FGameplayTagQuery
		constexpr auto UpdateTargetTagQuery = 0x1c8; // FGameplayTagQuery
		constexpr auto ExcludeAngleChecksTagQuery = 0x210; // FGameplayTagQuery
		constexpr auto TargetHitValidationTraceCheckName = 0x258; // FName
		constexpr auto CalculateTargetTraceName = 0x260; // FName
		constexpr auto bLockOnCharacters = 0x268; // bool
		constexpr auto bUseActorLocationForTraceStart = 0x2c0; // bool
	}

	namespace n_UTumorTossComponent {
		constexpr auto AlternateTargetClasses = 0x620; // TArray<AActor*>
		constexpr auto SweepRadius = 0x630; // float
		constexpr auto AvailableAimModes = 0x634; // int32_t
	}

	namespace n_AMotDActor {
		constexpr auto OnMessageUpdated = 0x2a0; // FMulticastInlineDelegate
		constexpr auto MessageURLDev = 0x2b0; // FString
		constexpr auto MessageURLShipping = 0x2c0; // FString
		constexpr auto bUpdateOnBeginPlay = 0x2d0; // bool
	}

	namespace n_UAkItemBoolProperties {
		constexpr auto OnSelectionChanged = 0x148; // FMulticastInlineDelegate
		constexpr auto OnPropertyDragged = 0x158; // FMulticastInlineDelegate
	}

	namespace n_ULevelSequenceDirector {
		constexpr auto Player = 0x30; // ULevelSequencePlayer*
	}

	namespace n_UMatchmakingScreen {
		constexpr auto OnModeChanged = 0x588; // FMulticastInlineDelegate
		constexpr auto bCanMatchmake = 0x750; // bool
	}

	namespace n_UAnimBlueprint {
		constexpr auto TargetSkeleton = 0xb0; // USkeleton*
		constexpr auto Groups = 0xb8; // TArray<FAnimGroupInfo>
		constexpr auto bUseMultiThreadedAnimationUpdate = 0xc8; // bool
		constexpr auto bWarnAboutBlueprintUsage = 0xc9; // bool
	}

	namespace n_UGameState_PostRoundStickTogetherComponent {
		constexpr auto bVotingToStickTogether = 0x100; // bool
		constexpr auto UserIdToJoin = 0x108; // FString
	}

	namespace n_UMaterialExpressionFrac {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UBTDecorator_CheckDifficulty {
		constexpr auto IsAllowed = 0x70; // FDifficultyBool
	}

	namespace n_UNPCMissionComponent {
		constexpr auto NPCMissionDataTable = 0xe8; // UDataTable*
		constexpr auto NPCObjectiveDataTable = 0xf0; // UDataTable*
	}

	namespace n_ABrush {
		constexpr auto BrushType = 0x2a0; // EBrushType
		constexpr auto BrushColor = 0x2a4; // FColor
		constexpr auto PolyFlags = 0x2a8; // int32_t
		constexpr auto bColored = 0x2ac; // char : 1
		constexpr auto bSolidWhenSelected = 0x2ac; // char : 1
		constexpr auto bPlaceableFromClassBrowser = 0x2ac; // char : 1
		constexpr auto bNotForClientOrServer = 0x2ac; // char : 1
		constexpr auto Brush = 0x2b0; // UModel*
		constexpr auto BrushComponent = 0x2b8; // UBrushComponent*
		constexpr auto bInManipulation = 0x2c0; // char : 1
		constexpr auto SavedSelections = 0x2c8; // TArray<FGeomSelection>
	}

	namespace n_UGameplayEffectKnockback {
		constexpr auto Knockback = 0x238; // FGameplayEffectKnockbackData
	}

	namespace n_USoundNodeModulatorContinuous {
		constexpr auto PitchModulationParams = 0x60; // FModulatorContinuousParams
		constexpr auto VolumeModulationParams = 0x80; // FModulatorContinuousParams
	}

	namespace n_UPingableComponent {
		constexpr auto OffsetHeight = 0xe8; // float
		constexpr auto IdentifierTag = 0xec; // FGameplayTag
		constexpr auto OwningTeam = 0xf4; // EGobiTeam
		constexpr auto Type = 0xf5; // EPingType
		constexpr auto bAutoPosition = 0xf6; // bool
		constexpr auto bEnabled = 0xf7; // bool
	}

	namespace n_UMaterialExpressionStaticComponentMaskParameter {
		constexpr auto Input = 0x60; // FExpressionInput
		constexpr auto DefaultR = 0x74; // char : 1
		constexpr auto DefaultG = 0x74; // char : 1
		constexpr auto DefaultB = 0x74; // char : 1
		constexpr auto DefaultA = 0x74; // char : 1
	}

	namespace n_USoundSubmixBase {
		constexpr auto ChildSubmixes = 0x30; // TArray<USoundSubmixBase*>
	}

	namespace n_UStreamingSettings {
		constexpr auto AsyncLoadingThreadEnabled = 0x40; // char : 1
		constexpr auto WarnIfTimeLimitExceeded = 0x40; // char : 1
		constexpr auto TimeLimitExceededMultiplier = 0x44; // float
		constexpr auto TimeLimitExceededMinTime = 0x48; // float
		constexpr auto MinBulkDataSizeForAsyncLoading = 0x4c; // int32_t
		constexpr auto UseBackgroundLevelStreaming = 0x50; // char : 1
		constexpr auto AsyncLoadingUseFullTimeLimit = 0x50; // char : 1
		constexpr auto AsyncLoadingTimeLimit = 0x54; // float
		constexpr auto PriorityAsyncLoadingExtraTime = 0x58; // float
		constexpr auto LevelStreamingActorsUpdateTimeLimit = 0x5c; // float
		constexpr auto PriorityLevelStreamingActorsUpdateExtraTime = 0x60; // float
		constexpr auto LevelStreamingComponentsRegistrationGranularity = 0x64; // int32_t
		constexpr auto LevelStreamingUnregisterComponentsTimeLimit = 0x68; // float
		constexpr auto LevelStreamingComponentsUnregistrationGranularity = 0x6c; // int32_t
		constexpr auto FlushStreamingOnExit = 0x70; // char : 1
		constexpr auto EventDrivenLoaderEnabled = 0x70; // char : 1
	}

	namespace n_UHapticFeedbackEffect_Curve {
		constexpr auto HapticDetails = 0x30; // FHapticFeedbackDetails_Curve
	}

	namespace n_UAnimNotify_ChangeAttachMovement {
		constexpr auto bNewMoveToAttachLocation = 0x40; // bool
		constexpr auto EnemyContextClass = 0x48; // UAnimContext_Enemy*
	}

	namespace n_UImageSequenceProtocol_EXR {
		constexpr auto bCompressed = 0xe0; // bool
		constexpr auto CaptureGamut = 0xe1; // EHDRCaptureGamut
	}

	namespace n_UBTService_DefaultFocus {
		constexpr auto FocusPriority = 0xa0; // char
	}

	namespace n_UAnimCompress_RemoveLinearKeys {
		constexpr auto MaxPosDiff = 0x48; // float
		constexpr auto MaxAngleDiff = 0x4c; // float
		constexpr auto MaxScaleDiff = 0x50; // float
		constexpr auto MaxEffectorDiff = 0x54; // float
		constexpr auto MinEffectorDiff = 0x58; // float
		constexpr auto EffectorDiffSocket = 0x5c; // float
		constexpr auto ParentKeyScale = 0x60; // float
		constexpr auto bRetarget = 0x64; // char : 1
		constexpr auto bActuallyFilterLinearKeys = 0x64; // char : 1
	}

	namespace n_UOmenConfigSetAsset {
		constexpr auto OmenConfigs = 0x38; // TArray<UOmenConfigAsset*>
	}

	namespace n_UEnvQueryGenerator_Cone {
		constexpr auto AlignedPointsDistance = 0x88; // FAIDataProviderFloatValue
		constexpr auto ConeDegrees = 0xc0; // FAIDataProviderFloatValue
		constexpr auto AngleStep = 0xf8; // FAIDataProviderFloatValue
		constexpr auto Range = 0x130; // FAIDataProviderFloatValue
		constexpr auto CenterActor = 0x168; // UEnvQueryContext*
		constexpr auto bIncludeContextLocation = 0x170; // char : 1
	}

	namespace n_ALedgeHangTriggerVolume {
		constexpr auto bTriggerLedgeHang = 0x2e8; // bool
	}

	namespace n_UGameCoachLesson {
		constexpr auto LocalPlayer = 0x30; // ULocalPlayer*
		constexpr auto GameCoach = 0x38; // UGameCoach*
		constexpr auto Target = 0x70; // AActor*
		constexpr auto DisplayTarget = 0x78; // AActor*
		constexpr auto State = 0x80; // EGameCoachLessonState
		constexpr auto TargetType = 0x81; // EGameCoachTargetType
		constexpr auto bTeachableVisibility = 0x82; // bool
		constexpr auto Priority = 0x84; // int32_t
		constexpr auto ConcurrentLimit = 0x88; // int32_t
		constexpr auto ReplacementPolicy = 0x8c; // EGameCoachLessonReplacementPolicy
		constexpr auto VisibleLimit = 0x90; // int32_t
		constexpr auto SuccessLimit = 0x94; // int32_t
		constexpr auto PerRoundLimit = 0x98; // int32_t
		constexpr auto PerRoundSuccessLimit = 0x9c; // int32_t
		constexpr auto MinDuration = 0xa0; // float
		constexpr auto MaxDuration = 0xa4; // float
		constexpr auto CooldownDuration = 0xa8; // float
		constexpr auto MaxOpportunityDuration = 0xac; // float
		constexpr auto OpenDelay = 0xb0; // float
		constexpr auto MinTeachableDistance = 0xb4; // float
		constexpr auto MaxTeachableDistance = 0xb8; // float
		constexpr auto MinFailureDistance = 0xbc; // float
		constexpr auto MaxFailureDistance = 0xc0; // float
		constexpr auto bFailureVisibility = 0xc4; // bool
	}

	namespace n_UBloaterExplodePropertyMod {
		constexpr auto Type = 0xf0; // EExplodModType
	}

	namespace n_UEditableGameplayTagQueryExpression_NoTagsMatch {
		constexpr auto Tags = 0x30; // FGameplayTagContainer
	}

	namespace n_USaveSlotListUserWidget {
		constexpr auto OnSlotSelected = 0x458; // FMulticastInlineDelegate
		constexpr auto OnSlotFocused = 0x468; // FMulticastInlineDelegate
	}

	namespace n_UAnimNotifyState_EvalChainMontage {
		constexpr auto EvalChains = 0x38; // TArray<FEvalChain>
	}

	namespace n_UGameplayEffectSpawnImpact {
		constexpr auto bThirdPersonOnly = 0x238; // bool
		constexpr auto ImpactEffectConfig = 0x240; // UImpactEffectConfig*
		constexpr auto bGetCharacterMeshImpactResultFromHitResult = 0x248; // bool
	}

	namespace n_UGameplayAction_SmartSequencer {
		constexpr auto DistanceToActivate = 0x210; // float
		constexpr auto DistanceToPlaySequence = 0x214; // float
		constexpr auto SmartActorSteeringBehavior = 0x218; // USteeringBehavior*
		constexpr auto bStartSequenceWhenReady = 0x220; // bool
		constexpr auto BindingDelayTime = 0x224; // float
		constexpr auto LevelSequenceActor = 0x230; // ALevelSequenceActor*
	}

	namespace n_UCheckBox {
		constexpr auto CheckedState = 0x160; // ECheckBoxState
		constexpr auto CheckedStateDelegate = 0x164; // FDelegate
		constexpr auto WidgetStyle = 0x178; // FCheckBoxStyle
		constexpr auto Style = 0x750; // USlateWidgetStyleAsset*
		constexpr auto UncheckedImage = 0x758; // USlateBrushAsset*
		constexpr auto UncheckedHoveredImage = 0x760; // USlateBrushAsset*
		constexpr auto UncheckedPressedImage = 0x768; // USlateBrushAsset*
		constexpr auto CheckedImage = 0x770; // USlateBrushAsset*
		constexpr auto CheckedHoveredImage = 0x778; // USlateBrushAsset*
		constexpr auto CheckedPressedImage = 0x780; // USlateBrushAsset*
		constexpr auto UndeterminedImage = 0x788; // USlateBrushAsset*
		constexpr auto UndeterminedHoveredImage = 0x790; // USlateBrushAsset*
		constexpr auto UndeterminedPressedImage = 0x798; // USlateBrushAsset*
		constexpr auto HorizontalAlignment = 0x7a0; // EHorizontalAlignment
		constexpr auto Padding = 0x7a4; // FMargin
		constexpr auto BorderBackgroundColor = 0x7b8; // FSlateColor
		constexpr auto IsFocusable = 0x7e8; // bool
		constexpr auto bIsFocusedOnHover = 0x7e9; // bool
		constexpr auto OnCheckStateChanged = 0x7f0; // FMulticastInlineDelegate
		constexpr auto ClickMethod = 0x800; // EButtonClickMethod
	}

	namespace n_ULeaderboardFlushCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_ULocalPlayer {
		constexpr auto ViewportClient = 0x78; // UGameViewportClient*
		constexpr auto AspectRatioAxisConstraint = 0x9c; // EAspectRatioAxisConstraint
		constexpr auto PendingLevelPlayerControllerClass = 0xa0; // APlayerController*
		constexpr auto bSentSplitJoin = 0xa8; // char : 1
		constexpr auto ControllerId = 0xc0; // int32_t
	}

	namespace n_AMissionGameMode {
		constexpr auto GoldenPathTraveledDistancePctForRespawn = 0x530; // float
		constexpr auto bHeroRescueRespawnEnabled = 0x540; // bool
		constexpr auto RespawnDelayTime = 0x544; // float
		constexpr auto NoHumanPresenceFailTimerDelaySeconds = 0x548; // float
		constexpr auto IncapableHeroFailureDelay = 0x54c; // float
		constexpr auto bHeroTestNonCapableGrappleTags = 0x550; // bool
	}

	namespace n_ULootUpgradeMod {
		constexpr auto LootUpgradeConfigs = 0xd0; // TArray<FLootUpgradeConfig>
		constexpr auto StackedSpawnCountModifiers = 0xe0; // TArray<FLootSpawnCountModifier>
	}

	namespace n_UAnimNotify_PlayNiagaraEffect {
		constexpr auto Template = 0x40; // UNiagaraSystem*
		constexpr auto LocationOffset = 0x48; // FVector
		constexpr auto RotationOffset = 0x54; // FRotator
		constexpr auto Scale = 0x60; // FVector
		constexpr auto Attached = 0x90; // char : 1
		constexpr auto SocketName = 0x94; // FName
	}

	namespace n_UMaterialExpressionChannelMaskParameter {
		constexpr auto MaskChannel = 0x78; // EChannelMaskParameterColor
		constexpr auto Input = 0x7c; // FExpressionInput
	}

	namespace n_UPlayerViewComponent {
		constexpr auto OnViewChanged = 0xe8; // FMulticastInlineDelegate
		constexpr auto ThirdPersonViewConfig = 0xf8; // FPlayerViewConfig
		constexpr auto bSupportsFirstPerson = 0x148; // bool
		constexpr auto FirstPersonViewConfig = 0x14c; // FPlayerViewConfig
		constexpr auto ThirdPersonTags = 0x188; // FGameplayTagContainer
		constexpr auto ThirdPersonOrbitTags = 0x1a8; // FGameplayTagContainer
		constexpr auto ThirdPersonOccludedTags = 0x1c8; // FGameplayTagContainer
		constexpr auto bThirdPersonOrbitResetsToFirstPersonRotation = 0x1e8; // bool
		constexpr auto CharacterFadeOutDistance = 0x1ec; // float
		constexpr auto CharacterFadeOutOpacity = 0x1f0; // float
		constexpr auto CharacterHideDistance = 0x1f4; // float
		constexpr auto LifeStateComponent = 0x220; // ULifeStateComponent*
		constexpr auto GameplayTagsComponent = 0x228; // UGameplayTagsComponent*
		constexpr auto RepViewData = 0x230; // FPlayerViewData
	}

	namespace n_UMovieSceneAkAudioRTPCSection {
		constexpr auto Name = 0xe8; // FString
		constexpr auto FloatCurve = 0xf8; // FRichCurve
		constexpr auto FloatChannelSerializationHelper = 0x178; // FMovieSceneFloatChannelSerializationHelper
		constexpr auto RTPCChannel = 0x1a8; // FMovieSceneFloatChannel
	}

	namespace n_UParticleModuleLocationPrimitiveBase {
		constexpr auto Positive_X = 0x38; // char : 1
		constexpr auto Positive_Y = 0x38; // char : 1
		constexpr auto Positive_Z = 0x38; // char : 1
		constexpr auto Negative_X = 0x38; // char : 1
		constexpr auto Negative_Y = 0x38; // char : 1
		constexpr auto Negative_Z = 0x38; // char : 1
		constexpr auto SurfaceOnly = 0x38; // char : 1
		constexpr auto Velocity = 0x38; // char : 1
		constexpr auto VelocityScale = 0x40; // FRawDistributionFloat
		constexpr auto StartLocation = 0x70; // FRawDistributionVector
	}

	namespace n_APlayerSpawnManagerBase {
		constexpr auto RescueStartPointQueryTemplate = 0x2b0; // UEnvQuery*
		constexpr auto RescueRespawnSearchRadius = 0x2b8; // float
		constexpr auto RescueStartLoSChannel = 0x2bc; // ECollisionChannel
		constexpr auto RescueRepositionQueryTemplate = 0x2c0; // UEnvQuery*
		constexpr auto TimeRequiredForReposition = 0x2c8; // float
		constexpr auto RepositionCheckInterval = 0x2cc; // float
		constexpr auto ZombieStartPointQueryTemplate = 0x2f0; // UEnvQuery*
		constexpr auto ZombieStartPointNoHeroesQueryTemplate = 0x2f8; // UEnvQuery*
		constexpr auto ZombieTestStart = 0x360; // AZombiePlayerStart*
		constexpr auto PossibleZombieStarts = 0x368; // TArray<FVector>
		constexpr auto DeferredSpawnRequests = 0x378; // TArray<FSpawnRequestContext>
		constexpr auto InitialSpawnRequests = 0x388; // TArray<FSpawnRequestContext>
		constexpr auto SpawnManagerDebugger = 0x3f8; // APlayerSpawnManagerDebugger*
	}

	namespace n_UParticleModuleTypeDataMesh {
		constexpr auto Mesh = 0x38; // UStaticMesh*
		constexpr auto LODSizeScale = 0x58; // float
		constexpr auto bUseStaticMeshLODs = 0x5c; // char : 1
		constexpr auto CastShadows = 0x5c; // char : 1
		constexpr auto DoCollisions = 0x5c; // char : 1
		constexpr auto MeshAlignment = 0x5d; // EMeshScreenAlignment
		constexpr auto bOverrideMaterial = 0x5e; // char : 1
		constexpr auto bOverrideDefaultMotionBlurSettings = 0x5e; // char : 1
		constexpr auto bEnableMotionBlur = 0x5e; // char : 1
		constexpr auto RollPitchYawRange = 0x60; // FRawDistributionVector
		constexpr auto AxisLockOption = 0xa8; // EParticleAxisLock
		constexpr auto bCameraFacing = 0xa9; // char : 1
		constexpr auto CameraFacingUpAxisOption = 0xaa; // EMeshCameraFacingUpAxis
		constexpr auto CameraFacingOption = 0xab; // EMeshCameraFacingOptions
		constexpr auto bApplyParticleRotationAsSpin = 0xac; // char : 1
		constexpr auto bFaceCameraDirectionRatherThanPosition = 0xac; // char : 1
		constexpr auto bCollisionsConsiderPartilceSize = 0xac; // char : 1
	}

	namespace n_UDamageIndicatorPipUserWidget {
		constexpr auto SmallDamage = 0x458; // UTexture2D*
		constexpr auto MediumDamage = 0x460; // UTexture2D*
		constexpr auto LargeDamage = 0x468; // UTexture2D*
	}

	namespace n_USpawningEQSData {
		constexpr auto SpawnEQS = 0x38; // UEnvQuery*
		constexpr auto TagQuery = 0x40; // FGameplayTagQuery
		constexpr auto MaxSpawnDistanceFromPlayers = 0x88; // float
		constexpr auto RequiredTagCheckOption = 0x8c; // EGameplayContainerMatchType
		constexpr auto RequiredTags = 0x90; // FGameplayTagContainer
	}

	namespace n_UTextButton_WBP_C {
		constexpr auto UberGraphFrame = 0x470; // FPointerToUberGraphFrame
		constexpr auto BG = 0x478; // UImage*
		constexpr auto CTABG = 0x480; // UImage*
		constexpr auto CTAHover = 0x488; // UImage*
		constexpr auto Frame = 0x490; // UImage*
		constexpr auto HoverContainer = 0x498; // UOverlay*
		constexpr auto TextBlock = 0x4a0; // UButtonTextBlock_C*
		constexpr auto TextScaleBox = 0x4a8; // UScaleBox*
		constexpr auto TutorialPanel = 0x4b0; // UOverlay*
		constexpr auto Text = 0x4b8; // FText
		constexpr auto bIsHighlighted = 0x4d0; // bool
		constexpr auto bIsLeftJustified = 0x4d1; // bool
		constexpr auto bIsCTAButton = 0x4d2; // bool
		constexpr auto bShowHighlightWhenFocused = 0x4d3; // bool
		constexpr auto bUseCustomPadding = 0x4d4; // bool
		constexpr auto CustomPadding = 0x4d8; // FMargin
	}

	namespace n_UBodySetup {
		constexpr auto AggGeom = 0x30; // FKAggregateGeom
		constexpr auto BoneName = 0x88; // FName
		constexpr auto PhysicsType = 0x90; // EPhysicsType
		constexpr auto bAlwaysFullAnimWeight = 0x91; // char : 1
		constexpr auto bConsiderForBounds = 0x91; // char : 1
		constexpr auto bMeshCollideAll = 0x91; // char : 1
		constexpr auto bDoubleSidedGeometry = 0x91; // char : 1
		constexpr auto bGenerateNonMirroredCollision = 0x91; // char : 1
		constexpr auto bSharedCookedData = 0x91; // char : 1
		constexpr auto bGenerateMirroredCollision = 0x91; // char : 1
		constexpr auto bSupportUVsAndFaceRemap = 0x91; // char : 1
		constexpr auto CollisionReponse = 0x93; // EBodyCollisionResponse
		constexpr auto CollisionTraceFlag = 0x94; // ECollisionTraceFlag
		constexpr auto PhysMaterial = 0x98; // UPhysicalMaterial*
		constexpr auto WalkableSlopeOverride = 0xa0; // FWalkableSlopeOverride
		constexpr auto DefaultInstance = 0x128; // FBodyInstance
		constexpr auto BuildScale3D = 0x240; // FVector
	}

	namespace n_UAnimNotify_CameraShake {
		constexpr auto InnerRadius = 0x40; // float
		constexpr auto OuterRadius = 0x44; // float
		constexpr auto EpicenterOffset = 0x48; // FVector
		constexpr auto bUseBoneLocationAsEpicenter = 0x54; // bool
		constexpr auto EpicenterBone = 0x58; // FName
		constexpr auto Falloff = 0x60; // float
		constexpr auto bOrientShakeTowardsEpicenter = 0x64; // bool
		constexpr auto Shake = 0x68; // UCameraShake*
		constexpr auto ForceFeedbackEffect = 0x70; // UForceFeedbackEffect*
		constexpr auto TagQueryRequirment = 0x78; // FGameplayTagQuery
	}

	namespace n_AProfilingPlayerController {
		constexpr auto HoveredActor = 0x8a0; // AActor*
		constexpr auto HoveredComponent = 0x8a8; // UActorComponent*
		constexpr auto HiddenActorStack = 0x8b0; // TArray<AActor*>
		constexpr auto ProfileCameras = 0x8e8; // TArray<AProfileCamera*>
	}

	namespace n_UAnimNotify_EvalBranchWithOffset {
		constexpr auto bInvertOffset = 0x50; // bool
	}

	namespace n_AAssetLoader {
		constexpr auto AssetLoaderComponent = 0x2a0; // UAssetLoaderComponent*
	}

	namespace n_UInterpTrackInstEvent {
		constexpr auto LastUpdatePosition = 0x30; // float
	}

	namespace n_UNestMod {
		constexpr auto NumPodsAdjustment = 0xe0; // int32_t
	}

	namespace n_UImpactEffectConfig {
		constexpr auto bEnableOnDedicatedServer = 0x38; // bool
		constexpr auto AudioEvents = 0x40; // TArray<UAkAudioEvent*>
		constexpr auto Jostler = 0x50; // FExplosionJostler
		constexpr auto GameplayTagDefinitions = 0x60; // TMap<FGameplayTag, FImpactDefinition>
		constexpr auto GameplayTagContainerDefinitions = 0xb0; // TArray<FImpactGameplayTagContainerDefinition>
		constexpr auto ImpactDefinitions = 0xc0; // TMap<EPhysicalSurface, FImpactDefinition>
		constexpr auto bOverrideScalabilitySettings = 0x110; // bool
		constexpr auto OverrideQualities = 0x114; // FImpactOverrideQuality [0x5]
		constexpr auto DeferredImpactFlags = 0x150; // uint32_t
	}

	namespace n_ULootSpawnSubsystem {
		constexpr auto LootTables = 0x48; // TArray<UDataTable*>
		constexpr auto Mods = 0x58; // TArray<ULootSpawnCountMod*>
		constexpr auto Upgrades = 0x68; // TArray<ULootUpgradeMod*>
		constexpr auto LootScenarios = 0x78; // TArray<ULootScenario*>
		constexpr auto ScenarioRefs = 0x88; // TArray<UScenarioComponent*>
	}

	namespace n_UParticleModuleVectorFieldScaleOverLife {
		constexpr auto VectorFieldScaleOverLife = 0x38; // UDistributionFloat*
		constexpr auto VectorFieldScaleOverLifeRaw = 0x40; // FRawDistributionFloat
	}

	namespace n_USplineMeshComponent {
		constexpr auto SplineParams = 0x5c8; // FSplineMeshParams
		constexpr auto SplineUpDir = 0x620; // FVector
		constexpr auto SplineBoundaryMin = 0x62c; // float
		constexpr auto CachedMeshBodySetupGuid = 0x630; // FGuid
		constexpr auto BodySetup = 0x640; // UBodySetup*
		constexpr auto SplineBoundaryMax = 0x648; // float
		constexpr auto bAllowSplineEditingPerInstance = 0x64c; // char : 1
		constexpr auto bSmoothInterpRollScale = 0x64c; // char : 1
		constexpr auto bMeshDirty = 0x64c; // char : 1
		constexpr auto ForwardAxis = 0x64d; // ESplineMeshAxis
		constexpr auto VirtualTextureMainPassMaxDrawDistance = 0x650; // float
	}

	namespace n_APlayerCameraManager {
		constexpr auto PCOwner = 0x2a0; // APlayerController*
		constexpr auto TransformComponent = 0x2a8; // USceneComponent*
		constexpr auto DefaultFOV = 0x2b8; // float
		constexpr auto DefaultOrthoWidth = 0x2c0; // float
		constexpr auto DefaultAspectRatio = 0x2c8; // float
		constexpr auto CameraCache = 0x310; // FCameraCacheEntry
		constexpr auto LastFrameCameraCache = 0x910; // FCameraCacheEntry
		constexpr auto ViewTarget = 0xf10; // FTViewTarget
		constexpr auto PendingViewTarget = 0x1520; // FTViewTarget
		constexpr auto CameraCachePrivate = 0x1b60; // FCameraCacheEntry
		constexpr auto LastFrameCameraCachePrivate = 0x2160; // FCameraCacheEntry
		constexpr auto ModifierList = 0x2760; // TArray<UCameraModifier*>
		constexpr auto DefaultModifiers = 0x2770; // TArray<UCameraModifier*>
		constexpr auto FreeCamDistance = 0x2780; // float
		constexpr auto FreeCamOffset = 0x2784; // FVector
		constexpr auto ViewTargetOffset = 0x2790; // FVector
		constexpr auto CameraLensEffects = 0x27b0; // TArray<AEmitterCameraLensEffectBase*>
		constexpr auto CachedCameraShakeMod = 0x27c0; // UCameraModifier_CameraShake*
		constexpr auto AnimInstPool = 0x27c8; // UCameraAnimInst* [0x8]
		constexpr auto PostProcessBlendCache = 0x2808; // TArray<FPostProcessSettings>
		constexpr auto ActiveAnims = 0x2828; // TArray<UCameraAnimInst*>
		constexpr auto FreeAnims = 0x2838; // TArray<UCameraAnimInst*>
		constexpr auto AnimCameraActor = 0x2848; // ACameraActor*
		constexpr auto bIsOrthographic = 0x2850; // char : 1
		constexpr auto bDefaultConstrainAspectRatio = 0x2850; // char : 1
		constexpr auto bClientSimulatingViewTarget = 0x2850; // char : 1
		constexpr auto bUseClientSideCameraUpdates = 0x2850; // char : 1
		constexpr auto bGameCameraCutThisFrame = 0x2851; // char : 1
		constexpr auto ViewPitchMin = 0x2854; // float
		constexpr auto ViewPitchMax = 0x2858; // float
		constexpr auto ViewYawMin = 0x285c; // float
		constexpr auto ViewYawMax = 0x2860; // float
		constexpr auto ViewRollMin = 0x2864; // float
		constexpr auto ViewRollMax = 0x2868; // float
		constexpr auto ServerUpdateCameraTimeout = 0x2870; // float
	}

	namespace n_UInvalidationBox {
		constexpr auto bCanCache = 0x160; // bool
		constexpr auto CacheRelativeTransforms = 0x161; // bool
	}

	namespace n_UTRSEventSubsystem {
		constexpr auto TRSEventSystem = 0x38; // UTRSEventSystem*
	}

	namespace n_UEnvQueryManager {
		constexpr auto InstanceCache = 0xb0; // TArray<FEnvQueryInstanceCache>
		constexpr auto LocalContexts = 0xc0; // TArray<UEnvQueryContext*>
		constexpr auto GCShieldedWrappers = 0xd0; // TArray<UEnvQueryInstanceBlueprintWrapper*>
		constexpr auto MaxAllowedTestingTime = 0x134; // float
		constexpr auto bTestQueriesUsingBreadth = 0x138; // bool
		constexpr auto QueryCountWarningThreshold = 0x13c; // int32_t
		constexpr auto QueryCountWarningInterval = 0x140; // double
	}

	namespace n_UFleeComponent {
		constexpr auto OnDistanceConditionMet = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnHealthConditionMet = 0xf8; // FMulticastInlineDelegate
		constexpr auto bDistanceCondition = 0x108; // bool
		constexpr auto FleeObjectiveDeltaDistance = 0x10c; // float
		constexpr auto FleeDeltaDistance = 0x110; // float
		constexpr auto bHealthCondition = 0x114; // bool
		constexpr auto FleeHealthPercentDelta = 0x118; // float
		constexpr auto bChanceCondition = 0x11c; // bool
		constexpr auto FleeChancePercent = 0x120; // float
		constexpr auto FleeStatSpecifier = 0x128; // FString
		constexpr auto CharacterOwner = 0x138; // AGobiCharacter*
	}

	namespace n_ABobsArm_Weapon_BP_C {
		constexpr auto UberGraphFrame = 0x4f0; // FPointerToUberGraphFrame
		constexpr auto OwnerGameplayComponent = 0x4f8; // UGameplayTagsComponent*
	}

	namespace n_UDoorAlarmGameCoachLesson {
		constexpr auto AlarmTeachDuration = 0x460; // float
	}

	namespace n_AGobiGameStateBase {
		constexpr auto VoiceRoutingComponent = 0x310; // UVoiceRoutingComponent*
		constexpr auto GameState_PostRoundStickTogetherComponent = 0x318; // UGameState_PostRoundStickTogetherComponent*
		constexpr auto CharacterSelectLevelManager = 0x320; // UCharacterSelectLevelManager*
		constexpr auto GameModeType = 0x328; // EGameModeType
		constexpr auto PlayerReadyStatuses = 0x330; // TArray<FGobiReadyStatus>
		constexpr auto ActiveTransitionDuration = 0x340; // float
		constexpr auto LastTransitionTime = 0x344; // float
		constexpr auto PoolConfig = 0x348; // FString
		constexpr auto TeamScores = 0x358; // TArray<int32_t>
		constexpr auto PlayerSlotManagerClass = 0x368; // APlayerSlotManager*
		constexpr auto PlayerSlotClass = 0x370; // APlayerSlot*
		constexpr auto PlayerSlotManager = 0x378; // APlayerSlotManager*
		constexpr auto PlayerAssetLoader = 0x380; // APlayerAssetLoader*
		constexpr auto NumTimesMissionRestarted = 0x388; // int32_t
		constexpr auto GameplayCardManager = 0x390; // UGameplayCardManager*
		constexpr auto LevelTravelDetails = 0x398; // FLevelTravelDetails
		constexpr auto ZombieMutationManager = 0x3d0; // UZombieMutationManager*
		constexpr auto CampaignRunComponent = 0x3d8; // UCampaignRunComponent*
		constexpr auto OmenConfigSet = 0x3e0; // UOmenConfigSetAsset*
		constexpr auto OnAllPlayersReady = 0x3e8; // FMulticastInlineDelegate
		constexpr auto OnPlayerReadyChanged = 0x3f8; // FMulticastInlineDelegate
		constexpr auto TotalElapsedTime = 0x418; // int32_t
		constexpr auto bFirstMapInChain = 0x41c; // bool
		constexpr auto bShouldSkipCardDraw = 0x41d; // bool
		constexpr auto ZombieMeshRandomSeed = 0x420; // int32_t
		constexpr auto OnMatchStarted = 0x428; // FMulticastInlineDelegate
		constexpr auto OnMatchEnded = 0x438; // FMulticastInlineDelegate
		constexpr auto OnLeavingMap = 0x448; // FMulticastInlineDelegate
		constexpr auto OnWaitingToResetMatch = 0x458; // FMulticastInlineDelegate
		constexpr auto OnResetMission = 0x468; // FMulticastInlineDelegate
		constexpr auto OnResetCompleted = 0x478; // FMulticastInlineDelegate
		constexpr auto OnCreditsStarted = 0x488; // FMulticastInlineDelegate
		constexpr auto OnPlayerStatesChanged = 0x498; // FMulticastInlineDelegate
		constexpr auto OnWaitForReadyPlayers = 0x4a8; // FMulticastInlineDelegate
		constexpr auto OnMatchStateChanged = 0x4b8; // FMulticastInlineDelegate
		constexpr auto OnAllMatchStateChangedHandlersDone = 0x4c8; // FMulticastInlineDelegate
		constexpr auto OldPlayerStatuses = 0x548; // TArray<FGobiReadyStatus>
		constexpr auto GameStateDebugger = 0x558; // AGobiGameStateDebugger*
		constexpr auto MissionManager = 0x560; // UMissionManager*
		constexpr auto bTutorial = 0x568; // bool
		constexpr auto bTraining = 0x569; // bool
		constexpr auto bIsSinglePlayer = 0x56a; // bool
		constexpr auto bIsPrivate = 0x56b; // bool
		constexpr auto LeaverPenaltyState = 0x56c; // ELeaverPenaltyState
		constexpr auto AnalyticsManager = 0x570; // AGameplayAnalyticsManager*
	}

	namespace n_UDistributionVectorUniform {
		constexpr auto Max = 0x40; // FVector
		constexpr auto Min = 0x4c; // FVector
		constexpr auto bLockAxes = 0x58; // char : 1
		constexpr auto LockedAxes = 0x5c; // EDistributionVectorLockFlags
		constexpr auto MirrorFlags = 0x5d; // EDistributionVectorMirrorFlags [0x3]
		constexpr auto bUseExtremes = 0x60; // char : 1
	}

	namespace n_UEnvQueryTest_ItemPickupScore {
		constexpr auto bForTeammates = 0x208; // bool
	}

	namespace n_UGlobalLoadingSettings {
		constexpr auto GlobalAssetTable = 0x40; // TSoftObjectPtr<UDataTable>
	}

	namespace n_UGameplayEffectGrappleComponent {
		constexpr auto BreakoutCountPerLevelMod = 0x240; // FGamePropertyIntMod
		constexpr auto BreakoutCooldownSecsMod = 0x250; // FGamePropertyFloatMod
		constexpr auto BreakoutRequiredInputHeldTimeMod = 0x260; // FGamePropertyFloatMod
		constexpr auto bEnableBreakout = 0x270; // bool
	}

	namespace n_UApplyOnItemSelectedMod {
		constexpr auto ItemTagQuery = 0xd0; // FGameplayTagQuery
		constexpr auto CharacterEmitterDef = 0x118; // FCharacterEmitterDef
	}

	namespace n_UMaterialExpressionTextureCoordinate {
		constexpr auto CoordinateIndex = 0x48; // int32_t
		constexpr auto UTiling = 0x4c; // float
		constexpr auto VTiling = 0x50; // float
		constexpr auto UnMirrorU = 0x54; // char : 1
		constexpr auto UnMirrorV = 0x54; // char : 1
	}

	namespace n_UGameplayEffectAddComponent {
		constexpr auto ActorComponentClass = 0x240; // UActorComponent*
		constexpr auto GameplayTag = 0x248; // FGameplayTag
	}

	namespace n_UAnimEvalSet_Shared_DeathReaction_Moving_C {
		constexpr auto AvatarHitDirection = 0xc0; // FGameplayEval_Angle
		constexpr auto AvatarSpeed = 0x120; // FGameplayEval_SpeedRange
		constexpr auto AvatarTags = 0x1e8; // FGameplayEval_GameplayTags
		constexpr auto DamageBone = 0x280; // FGameplayEval_HitReactionBone
		constexpr auto RandomChance = 0x330; // FGameplayEval_RandomChance
		constexpr auto DamageType = 0x380; // FGameplayEval_DamageType
	}

	namespace n_UBackgroundBlur {
		constexpr auto Padding = 0x160; // FMargin
		constexpr auto HorizontalAlignment = 0x170; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x171; // EVerticalAlignment
		constexpr auto bApplyAlphaToBlur = 0x172; // bool
		constexpr auto BlurStrength = 0x174; // float
		constexpr auto bOverrideAutoRadiusCalculation = 0x178; // bool
		constexpr auto BlurRadius = 0x17c; // int32_t
		constexpr auto LowQualityFallbackBrush = 0x180; // FSlateBrush
	}

	namespace n_UEnvQueryInstanceBlueprintWrapper {
		constexpr auto QueryID = 0x38; // int32_t
		constexpr auto ItemType = 0x60; // UEnvQueryItemType*
		constexpr auto OptionIndex = 0x68; // int32_t
		constexpr auto OnQueryFinishedEvent = 0x70; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleLocationPrimitiveCylinder_Seeded {
		constexpr auto RandomSeedInfo = 0x128; // FParticleRandomSeedInfo
	}

	namespace n_UNiagaraParameterCollectionInstance {
		constexpr auto Collection = 0x30; // UNiagaraParameterCollection*
		constexpr auto OverridenParameters = 0x38; // TArray<FNiagaraVariable>
		constexpr auto ParameterStorage = 0x48; // FNiagaraParameterStore
	}

	namespace n_URestrictedGameplayTagsList {
		constexpr auto ConfigFileName = 0x30; // FString
		constexpr auto RestrictedGameplayTagList = 0x40; // TArray<FRestrictedGameplayTagTableRow>
	}

	namespace n_UAkComponent {
		constexpr auto AttenuationScalingFactor = 0x368; // float
		constexpr auto AkAudioEvent = 0x370; // UAkAudioEvent*
		constexpr auto EventName = 0x378; // FString
		constexpr auto IsManagedAmbientSound = 0x388; // bool
	}

	namespace n_UAnimEvalSet_Common_Idle_C {
		constexpr auto GameplayTagEval = 0xc0; // FGameplayEval_GameplayTags
	}

	namespace n_UGameCoachSettings {
		constexpr auto Lessons = 0x98; // TArray<FGameCoachLessonSettings>
		constexpr auto TipIndex = 0xa8; // int32_t
	}

	namespace n_UMovieSceneBindingOverrides {
		constexpr auto BindingData = 0x30; // TArray<FMovieSceneBindingOverrideData>
	}

	namespace n_UAnimEvalSet_Bot_ItemUseTarget_C {
		constexpr auto Distance2D = 0xc0; // FGameplayEval_Distance
		constexpr auto DistanceVert = 0x190; // FGameplayEval_Distance
		constexpr auto ActorClass = 0x260; // FGameplayEval_ActorClass
		constexpr auto GameplayTags = 0x2b8; // FGameplayEval_GameplayTags
		constexpr auto LineOfSight = 0x350; // FGameplayEval_LineOfSight
	}

	namespace n_AInteractiveFoliageActor {
		constexpr auto CapsuleComponent = 0x2b0; // UCapsuleComponent*
		constexpr auto TouchingActorEntryPosition = 0x2b8; // FVector
		constexpr auto FoliageVelocity = 0x2c4; // FVector
		constexpr auto FoliageForce = 0x2d0; // FVector
		constexpr auto FoliagePosition = 0x2dc; // FVector
		constexpr auto FoliageDamageImpulseScale = 0x2e8; // float
		constexpr auto FoliageTouchImpulseScale = 0x2ec; // float
		constexpr auto FoliageStiffness = 0x2f0; // float
		constexpr auto FoliageStiffnessQuadratic = 0x2f4; // float
		constexpr auto FoliageDamping = 0x2f8; // float
		constexpr auto MaxDamageImpulse = 0x2fc; // float
		constexpr auto MaxTouchImpulse = 0x300; // float
		constexpr auto MaxForce = 0x304; // float
		constexpr auto Mass = 0x308; // float
	}

	namespace n_AGameplayObjective {
		constexpr auto DistanceMapSourceComp = 0x2a0; // UDistanceMapSourceComponent*
	}

	namespace n_UReflectionCaptureComponent {
		constexpr auto CaptureOffsetComponent = 0x230; // UBillboardComponent*
		constexpr auto ReflectionSourceType = 0x238; // EReflectionSourceType
		constexpr auto Cubemap = 0x240; // UTextureCube*
		constexpr auto SourceCubemapAngle = 0x248; // float
		constexpr auto Brightness = 0x24c; // float
		constexpr auto CaptureOffset = 0x250; // FVector
		constexpr auto MapBuildDataId = 0x25c; // FGuid
	}

	namespace n_UMaterialExpressionArcsine {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UTRSAudioTickManager {
		constexpr auto World = 0x30; // UWorld*
	}

	namespace n_UPartyToolTipUserWidget {
		constexpr auto Player = 0x460; // FPartyPlayer
		constexpr auto Commands = 0x570; // TArray<FMenuCommand>
	}

	namespace n_UPawnAction {
		constexpr auto ChildAction = 0x30; // UPawnAction*
		constexpr auto ParentAction = 0x38; // UPawnAction*
		constexpr auto OwnerComponent = 0x40; // UPawnActionsComponent*
		constexpr auto Instigator = 0x48; // UObject*
		constexpr auto BrainComp = 0x50; // UBrainComponent*
		constexpr auto bAllowNewSameClassInstance = 0x88; // char : 1
		constexpr auto bReplaceActiveSameClassInstance = 0x88; // char : 1
		constexpr auto bShouldPauseMovement = 0x88; // char : 1
		constexpr auto bAlwaysNotifyOnFinished = 0x88; // char : 1
	}

	namespace n_UNiagaraComponentPool {
		constexpr auto WorldParticleSystemPools = 0x30; // TMap<UNiagaraSystem*, FNCPool>
	}

	namespace n_UMaterialExpressionMakeMaterialAttributes {
		constexpr auto BaseColor = 0x48; // FExpressionInput
		constexpr auto Metallic = 0x5c; // FExpressionInput
		constexpr auto Specular = 0x70; // FExpressionInput
		constexpr auto Roughness = 0x84; // FExpressionInput
		constexpr auto Anisotropy = 0x98; // FExpressionInput
		constexpr auto EmissiveColor = 0xac; // FExpressionInput
		constexpr auto Opacity = 0xc0; // FExpressionInput
		constexpr auto OpacityMask = 0xd4; // FExpressionInput
		constexpr auto Normal = 0xe8; // FExpressionInput
		constexpr auto Tangent = 0xfc; // FExpressionInput
		constexpr auto WorldPositionOffset = 0x110; // FExpressionInput
		constexpr auto WorldDisplacement = 0x124; // FExpressionInput
		constexpr auto TessellationMultiplier = 0x138; // FExpressionInput
		constexpr auto SubsurfaceColor = 0x14c; // FExpressionInput
		constexpr auto ClearCoat = 0x160; // FExpressionInput
		constexpr auto ClearCoatRoughness = 0x174; // FExpressionInput
		constexpr auto AmbientOcclusion = 0x188; // FExpressionInput
		constexpr auto Refraction = 0x19c; // FExpressionInput
		constexpr auto CustomizedUVs = 0x1b0; // FExpressionInput [0x8]
		constexpr auto PixelDepthOffset = 0x250; // FExpressionInput
		constexpr auto ShadingModel = 0x264; // FExpressionInput
	}

	namespace n_UGenConditionBase_C {
		constexpr auto Phase = 0x78; // FAISpawnEval_PacingPhase
		constexpr auto ChanceToPlay = 0xc0; // FAISpawnEval_Chance
		constexpr auto Check Deck = 0x118; // FAISpawnEval_CheckGeneratingDeckTags
		constexpr auto Check Card = 0x1a8; // FAISpawnEval_CheckCardTags
		constexpr auto Check Character = 0x238; // FAISpawnEval_CheckCharacterTags
		constexpr auto Check Character_3 = 0x2e8; // FAISpawnEval_CheckCharacterTags
		constexpr auto Check_Difficulty = 0x398; // FAISpawnEval_Difficulty
		constexpr auto ChanceGrowingByDifficulty = 0x3e0; // FAISpawnEval_GrowingChanceByDifficulty
		constexpr auto Check_GrowingChance = 0x438; // FAISpawnEval_GrowingChance
		constexpr auto Cooldown = 0x490; // FAISpawnEval_Cooldown
		constexpr auto Cooldown_3 = 0x510; // FAISpawnEval_Cooldown
	}

	namespace n_UParticleEffectTrait {
		constexpr auto ParticleEffectDefinitions = 0x30; // TArray<FParticleEffectTraitDef>
	}

	namespace n_AFlashlightBase_C {
		constexpr auto UberGraphFrame = 0x2a0; // FPointerToUberGraphFrame
		constexpr auto SpotLight1 = 0x2a8; // USpotLightComponent*
		constexpr auto SpotLight = 0x2b0; // USpotLightComponent*
	}

	namespace n_UGlobalSafeZone_WBP_C {
		constexpr auto GobiSafeZone_77 = 0x2e0; // UGobiSafeZone*
	}

	namespace n_UBlendSpace {
		constexpr auto AxisToScaleAnimation = 0x150; // EBlendSpaceAxis
	}

	namespace n_UAnimNotify_WeaponSharedSound {
		constexpr auto PreviewAudio = 0x40; // UAkAudioEvent*
		constexpr auto BoneName = 0x48; // FName
		constexpr auto SoundLookup = 0x50; // ESharedWeaponAnimSound
	}

	namespace n_UParticleModuleRotationRate {
		constexpr auto StartRotationRate = 0x38; // FRawDistributionFloat
	}

	namespace n_UScenarioManagerMod {
		constexpr auto MinNumToEnabledAdjustment = 0xd0; // int32_t
		constexpr auto MaxNumToEnabledAdjustment = 0xd4; // int32_t
		constexpr auto ScenarioManagerModTag = 0xd8; // FGameplayTag
	}

	namespace n_UScareBirdsScenario_BP_C {
		constexpr auto UberGraphFrame = 0x388; // FPointerToUberGraphFrame
		constexpr auto HeroFixedScore = 0x390; // FScenarioHeroEval_FixedScore
		constexpr auto StartedInViolent = 0x3d8; // bool
	}

	namespace n_UProceduralFoliageComponent {
		constexpr auto FoliageSpawner = 0xe8; // UProceduralFoliageSpawner*
		constexpr auto TileOverlap = 0xf0; // float
		constexpr auto SpawningVolume = 0xf8; // AVolume*
		constexpr auto ProceduralGuid = 0x100; // FGuid
	}

	namespace n_UParticleModuleVelocityBase {
		constexpr auto bInWorldSpace = 0x38; // char : 1
		constexpr auto bApplyOwnerScale = 0x38; // char : 1
	}

	namespace n_ARescuePlayerStart {
		constexpr auto NavLocationComponent = 0x310; // UNavLocationComponent*
		constexpr auto SpawnPointType = 0x318; // ERescueSpawnPointType
		constexpr auto bEnabled = 0x319; // bool
		constexpr auto CurrentPawn = 0x320; // APawn*
	}

	namespace n_UGobiDialogueComponent {
		constexpr auto PvPZombieBlacklist = 0x200; // TArray<FName>
		constexpr auto StaminaBreathResponseGroup = 0x210; // TArray<FName>
	}

	namespace n_UInterpTrackFloatProp {
		constexpr auto PropertyName = 0x98; // FName
	}

	namespace n_UEnvQueryContext_AIActorsInRange {
		constexpr auto Affiliation = 0x30; // FAISenseAffiliationFilter
		constexpr auto Radius = 0x34; // float
	}

	namespace n_AWeaponCustomizationMannequin {
		constexpr auto BaseSkeletalMesh = 0x310; // USkeletalMesh*
		constexpr auto DesiredItemRowHandle = 0x318; // FDataTableRowHandle
		constexpr auto CurrentLoadingRowHandle = 0x338; // FDataTableRowHandle
		constexpr auto DesiredCustomizationRowHandle = 0x358; // FDataTableRowHandle
		constexpr auto CurrentLoadingCustomizationRowHandle = 0x378; // FDataTableRowHandle
		constexpr auto BonesHiddenByDefault = 0x398; // TArray<FName>
		constexpr auto WeaponCameraDistance = 0x3a8; // float
	}

	namespace n_UGameplayContext_NextPathCornerOfNavArea {
		constexpr auto NavArea = 0x90; // UNavArea*
	}

	namespace n_AGobiGameModeBase {
		constexpr auto OnWaitingPostMatch = 0x390; // FMulticastInlineDelegate
		constexpr auto GameModeType = 0x3a0; // EGameModeType
		constexpr auto bSupportsBots = 0x3a1; // bool
		constexpr auto WaitToResetMatchDuration = 0x3a4; // float
		constexpr auto WaitToStartAfterResetMatchDuration = 0x3a8; // float
		constexpr auto ResettingMatchTimeoutDuration = 0x3ac; // float
		constexpr auto ResetCompletedMatchStateDuration = 0x3b0; // float
		constexpr auto CreditsWaitDuration = 0x3b4; // float
		constexpr auto PlayerSpawnManager = 0x3b8; // APlayerSpawnManagerBase*
		constexpr auto GameplayTagsComponent = 0x3c0; // UGameplayTagsComponent*
		constexpr auto LevelStreamingCoordinator = 0x3c8; // ALevelStreamingCoordinator*
		constexpr auto LootData = 0x3d0; // ULootData*
		constexpr auto PlayerSpawnManagerClass = 0x3d8; // APlayerSpawnManagerBase*
		constexpr auto AudioControllerClass = 0x3e0; // AActor*
		constexpr auto AudioController = 0x3e8; // AActor*
		constexpr auto GameDirectorClass = 0x3f0; // UGameDirector*
		constexpr auto GameDirector = 0x3f8; // UGameDirector*
		constexpr auto BotControllerClass = 0x400; // ABotController*
		constexpr auto LevelResetCoordinator = 0x408; // ALevelResetCoordinator*
		constexpr auto LullSystem = 0x410; // ALullSystem*
		constexpr auto WaitForBackfillDuration = 0x420; // float
		constexpr auto WaitForReadyPlayersDuration = 0x424; // float
		constexpr auto WaypointManager = 0x430; // UWaypointManager*
	}

	namespace n_AController {
		constexpr auto PlayerState = 0x2a8; // APlayerState*
		constexpr auto StateName = 0x2b8; // FName
		constexpr auto Pawn = 0x2c0; // APawn*
		constexpr auto Character = 0x2d0; // ACharacter*
		constexpr auto TransformComponent = 0x2d8; // USceneComponent*
		constexpr auto ControlRotation = 0x2f8; // FRotator
		constexpr auto bAttachToPawn = 0x304; // char : 1
	}

	namespace n_UApplyGameplayEffectMod {
		constexpr auto ChanceToApplyEffects = 0xe8; // float
		constexpr auto TagsToApply = 0xf0; // FGameplayTagContainer
		constexpr auto GameplayEffectsToApply = 0x110; // TArray<UGameplayEffect*>
		constexpr auto LinkedAffinity = 0x120; // EGameplayCardAffinity
		constexpr auto RandomSeed = 0x124; // int32_t
	}

	namespace n_URotatingMovementComponent {
		constexpr auto RotationRate = 0x128; // FRotator
		constexpr auto PivotTranslation = 0x134; // FVector
		constexpr auto bRotationInLocalSpace = 0x140; // char : 1
	}

	namespace n_UBTDecorator_IsInPacingPhase {
		constexpr auto PacingPhase = 0x70; // EPacingPhase
	}

	namespace n_UAnimEvalSet_HitReaction_FB_Stun_C {
		constexpr auto AvatarHealth = 0xc0; // FGameplayEval_Health
		constexpr auto AvatarTags = 0x118; // FGameplayEval_GameplayTags
		constexpr auto Random = 0x1b0; // FGameplayEval_Random
		constexpr auto DamageType = 0x1f8; // FGameplayEval_DamageType
	}

	namespace n_ULeaderboardQueryCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UCardStatsUserWidget {
		constexpr auto StatWidgets = 0x458; // TSet<UStatEntryUserWidget*>
		constexpr auto AffinityStatsPopup = 0x4a8; // UAffinityStatsPopup*
		constexpr auto AffinityPopupClass = 0x4b0; // UAffinityStatsPopup*
	}

	namespace n_UMaterialExpressionBumpOffset {
		constexpr auto Coordinate = 0x48; // FExpressionInput
		constexpr auto Height = 0x5c; // FExpressionInput
		constexpr auto HeightRatioInput = 0x70; // FExpressionInput
		constexpr auto HeightRatio = 0x84; // float
		constexpr auto ReferencePlane = 0x88; // float
		constexpr auto ConstCoordinate = 0x8c; // uint32_t
	}

	namespace n_UTimeSynchronizableMediaSource {
		constexpr auto bUseTimeSynchronization = 0x90; // bool
		constexpr auto FrameDelay = 0x94; // int32_t
		constexpr auto TimeDelay = 0x98; // double
	}

	namespace n_UBrushBaseProperties {
		constexpr auto BrushSize = 0x58; // float
		constexpr auto bSpecifyRadius = 0x5c; // bool
		constexpr auto BrushRadius = 0x60; // float
		constexpr auto BrushDepth = 0x64; // float
		constexpr auto BrushStrength = 0x68; // float
		constexpr auto BrushFalloffAmount = 0x6c; // float
		constexpr auto bShowStrength = 0x70; // bool
		constexpr auto bShowFalloff = 0x71; // bool
	}

	namespace n_AGobiReticle {
		constexpr auto TargetRoot = 0x2a0; // USceneComponent*
		constexpr auto SplineComponent = 0x2a8; // USplineComponent*
		constexpr auto SplineMeshComponents = 0x2b0; // TArray<USplineMeshComponent*>
		constexpr auto MaxSplinePoints = 0x2c0; // int32_t
		constexpr auto SplineMesh = 0x2c8; // UStaticMesh*
		constexpr auto RadiusScale = 0x2d0; // float
		constexpr auto RadiusBuffer = 0x2d4; // float
	}

	namespace n_UMaterialBillboardComponent {
		constexpr auto Elements = 0x4b0; // TArray<FMaterialSpriteElement>
	}

	namespace n_UStatEntryUserWidget {
		constexpr auto bCanShowDiff = 0x458; // bool
	}

	namespace n_UMaterialExpressionDepthFade {
		constexpr auto InOpacity = 0x48; // FExpressionInput
		constexpr auto FadeDistance = 0x5c; // FExpressionInput
		constexpr auto OpacityDefault = 0x70; // float
		constexpr auto FadeDistanceDefault = 0x74; // float
	}

	namespace n_UPointLightComponent {
		constexpr auto bUseInverseSquaredFalloff = 0x3a0; // char : 1
		constexpr auto LightFalloffExponent = 0x3a4; // float
		constexpr auto SourceRadius = 0x3a8; // float
		constexpr auto SoftSourceRadius = 0x3ac; // float
		constexpr auto SourceLength = 0x3b0; // float
	}

	namespace n_UChallengeData {
		constexpr auto Banner = 0x38; // UTexture2D*
		constexpr auto DisplayName = 0x40; // FText
		constexpr auto Map = 0x58; // FDataTableRowHandle
		constexpr auto ChallengeCards = 0x78; // TArray<FDataTableRowHandle>
		constexpr auto ChallengeObjectives = 0x88; // TArray<UChallengeObjectiveData*>
		constexpr auto InitialCurrency = 0x98; // int32_t
	}

	namespace n_UOpenScreenUsableComponent {
		constexpr auto OnScreenClosedEvent = 0x4f8; // FMulticastInlineDelegate
		constexpr auto ScreenClass = 0x508; // UUIScreen*
		constexpr auto MatchmakingScreenMode = 0x510; // EMatchmakingScreenMode
		constexpr auto DependencyScreenClass = 0x518; // UUIScreen*
		constexpr auto bDisabledForTradeShow = 0x520; // bool
		constexpr auto bDisabledDuringChunkInstall = 0x521; // bool
	}

	namespace n_UEditableMesh {
		constexpr auto Adapters = 0x3c0; // TArray<UEditableMeshAdapter*>
		constexpr auto TextureCoordinateCount = 0x3d8; // int32_t
		constexpr auto PendingCompactCounter = 0x524; // int32_t
		constexpr auto SubdivisionCount = 0x528; // int32_t
	}

	namespace n_USourceEffectEnvelopeFollowerPreset {
		constexpr auto Settings = 0x7c; // FSourceEffectEnvelopeFollowerSettings
	}

	namespace n_UMaterialExpressionConstant2Vector {
		constexpr auto R = 0x48; // float
		constexpr auto G = 0x4c; // float
	}

	namespace n_UBTTask_SetHagState {
		constexpr auto HagState = 0x78; // EHagState
	}

	namespace n_UAnimContext_Character {
		constexpr auto LocationOffsetX = 0x98; // FAIDataProviderFloatValue
		constexpr auto LocationOffsetY = 0xd0; // FAIDataProviderFloatValue
		constexpr auto LocationOffsetZ = 0x108; // FAIDataProviderFloatValue
	}

	namespace n_UMaterialExpressionTangentOutput {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UCapsuleComponent {
		constexpr auto CapsuleHalfHeight = 0x4c8; // float
		constexpr auto CapsuleRadius = 0x4cc; // float
	}

	namespace n_UAnimNotifyState_ContextTickable {
		constexpr auto Context = 0x38; // UGameplayContext*
	}

	namespace n_UGameplayCueManager {
		constexpr auto GameplayCueSet = 0x38; // UGameplayCueSet*
	}

	namespace n_UMaterialFunctionInterface {
		constexpr auto StateId = 0x30; // FGuid
		constexpr auto MaterialFunctionUsage = 0x40; // EMaterialFunctionUsage
	}

	namespace n_UGameplayEffectMeleeComponent {
		constexpr auto MeleeComponentTag = 0x240; // FGameplayTag
		constexpr auto CookPlayRateMod = 0x248; // FGamePropertyFloatMod
		constexpr auto AttackPlayRateMod = 0x258; // FGamePropertyFloatMod
		constexpr auto ImpactPlayRateMod = 0x268; // FGamePropertyFloatMod
	}

	namespace n_UNiagaraDataInterfaceParticleRead {
		constexpr auto EmitterName = 0x38; // FString
	}

	namespace n_UFieldSystemMetaDataIteration {
		constexpr auto Iterations = 0xe8; // int32_t
	}

	namespace n_UAkComponentBase {
		constexpr auto EarlyReflectionAuxBus = 0x258; // UAkAuxBus*
		constexpr auto EarlyReflectionAuxBusName = 0x260; // FString
		constexpr auto EarlyReflectionBusSendGain = 0x270; // float
		constexpr auto EnableSpotReflectors = 0x274; // char : 1
		constexpr auto DrawFirstOrderReflections = 0x274; // char : 1
		constexpr auto DrawSecondOrderReflections = 0x274; // char : 1
		constexpr auto DrawHigherOrderReflections = 0x274; // char : 1
		constexpr auto DrawDiffraction = 0x274; // char : 1
		constexpr auto StopWhenOwnerDestroyed = 0x278; // bool
		constexpr auto OcclusionRefreshInterval = 0x27c; // float
		constexpr auto bUseReverbVolumes = 0x280; // bool
	}

	namespace n_USkyAtmosphereComponent {
		constexpr auto TransformMode = 0x230; // ESkyAtmosphereTransformMode
		constexpr auto BottomRadius = 0x234; // float
		constexpr auto GroundAlbedo = 0x238; // FColor
		constexpr auto AtmosphereHeight = 0x23c; // float
		constexpr auto MultiScatteringFactor = 0x240; // float
		constexpr auto RayleighScatteringScale = 0x244; // float
		constexpr auto RayleighScattering = 0x248; // FLinearColor
		constexpr auto RayleighExponentialDistribution = 0x258; // float
		constexpr auto MieScatteringScale = 0x25c; // float
		constexpr auto MieScattering = 0x260; // FLinearColor
		constexpr auto MieAbsorptionScale = 0x270; // float
		constexpr auto MieAbsorption = 0x274; // FLinearColor
		constexpr auto MieAnisotropy = 0x284; // float
		constexpr auto MieExponentialDistribution = 0x288; // float
		constexpr auto OtherAbsorptionScale = 0x28c; // float
		constexpr auto OtherAbsorption = 0x290; // FLinearColor
		constexpr auto OtherTentDistribution = 0x2a0; // FTentDistribution
		constexpr auto SkyLuminanceFactor = 0x2ac; // FLinearColor
		constexpr auto AerialPespectiveViewDistanceScale = 0x2bc; // float
		constexpr auto HeightFogContribution = 0x2c0; // float
		constexpr auto TransmittanceMinLightElevationAngle = 0x2c4; // float
		constexpr auto bStaticLightingBuiltGUID = 0x2ec; // FGuid
	}

	namespace n_AGobiPlayerState {
		constexpr auto OnCharacterSelected = 0x3a0; // FMulticastInlineDelegate
		constexpr auto OnCharacterSelectionFailed = 0x3b0; // FMulticastInlineDelegate
		constexpr auto OnCardDrawFailed = 0x3c0; // FMulticastInlineDelegate
		constexpr auto OnPvPEvent = 0x3d0; // FMulticastInlineDelegate
		constexpr auto OnStartMissionObjective = 0x3f8; // FMulticastInlineDelegate
		constexpr auto OnEndMissionObjective = 0x408; // FMulticastInlineDelegate
		constexpr auto OnCurrentPawnChanged = 0x418; // FMulticastInlineDelegate
		constexpr auto OnQueuedZombieRespawnTurnStart = 0x440; // FMulticastInlineDelegate
		constexpr auto OnQueuedZombieRespawnTurnEnd = 0x450; // FMulticastInlineDelegate
		constexpr auto OnPreRoundStepChanged = 0x460; // FMulticastInlineDelegate
		constexpr auto OnOwnedSlotChanged = 0x470; // FMulticastInlineDelegate
		constexpr auto OnControlledSlotChanged = 0x480; // FMulticastInlineDelegate
		constexpr auto OnPostRoundBonusSPChanged = 0x4a0; // FMulticastInlineDelegate
		constexpr auto OnRespawnCountChanged = 0x4b0; // FMulticastInlineDelegate
		constexpr auto OnCardGiverApplied = 0x4c0; // FMulticastInlineDelegate
		constexpr auto OnBadgeDirty = 0x500; // FMulticastInlineDelegate
		constexpr auto Matchmaking = 0x510; // UMatchmaking*
		constexpr auto RecentPawn = 0x51c; // TWeakObjectPtr<APawn>
		constexpr auto CurrentPawn = 0x524; // TWeakObjectPtr<APawn>
		constexpr auto OwnedPlayerSlot = 0x52c; // TWeakObjectPtr<APlayerSlot>
		constexpr auto ControlledPlayerSlot = 0x534; // TWeakObjectPtr<APlayerSlot>
		constexpr auto BotRowHandle = 0x540; // FDataTableRowHandle
		constexpr auto HydraDisplayName = 0x560; // FString
		constexpr auto PlayerCutsceneSynchronizationComponent = 0x580; // UPlayerCutsceneSynchronizationComponent*
		constexpr auto PlayerLevelStreamingComponent = 0x588; // UPlayerLevelStreamingComponent*
		constexpr auto PlayerLevelResetComponent = 0x590; // UPlayerLevelResetComponent*
		constexpr auto PlayerState_PostRoundStickTogetherComponent = 0x598; // UPlayerState_PostRoundStickTogetherComponent*
		constexpr auto DistanceTraveledToObjective = 0x5a0; // float
		constexpr auto DistanceTraveledToObjectivePct = 0x5a4; // float
		constexpr auto PVPHoldoutTime = 0x5a8; // float
		constexpr auto MutationPointsAtLastSpawn = 0x5b8; // float
		constexpr auto ZombieRespawnTimes = 0x620; // TArray<FZombieRespawnTime>
		constexpr auto NextZombieMinRespawnTime = 0x630; // float
		constexpr auto ZombieRespawnSnapshot = 0x634; // FRespawnSnapshot_Zombie
		constexpr auto PlayerRespawnCount = 0x640; // int32_t
		constexpr auto UnmutedHydraPublicIds = 0x648; // TArray<FString>
		constexpr auto VivoxTalker = 0x658; // FString
		constexpr auto bGroupLeader = 0x669; // bool
		constexpr auto GroupSessionId = 0x670; // FString
		constexpr auto GroupSessionCluster = 0x680; // FString
		constexpr auto GroupSessionPrivacy = 0x690; // ESessionPrivacy
		constexpr auto bIsPlayingTutorial = 0x691; // bool
		constexpr auto UserIds = 0x698; // FPlayerStateUserIds
		constexpr auto CurrentTeam = 0x6c0; // EGobiTeam
		constexpr auto PrevTeam = 0x6c1; // EGobiTeam
		constexpr auto DeadToSpectatorDelay = 0x6c4; // float
		constexpr auto CurrentPawnClass = 0x6c8; // APawn*
		constexpr auto BotGameCardsPicked = 0x6d0; // int32_t
		constexpr auto PreRoundStep = 0x6d4; // EPreRoundStep
		constexpr auto BadgeData = 0x700; // FBadgeData
		constexpr auto PlayerStatsComponent = 0x710; // UPlayerStatsComponent*
		constexpr auto PlayerProfileComponent = 0x718; // UGobiPlayerProfileComponent*
		constexpr auto PostRoundStatConfigs = 0x728; // TArray<FPostRoundStatConfig>
		constexpr auto PostRoundStatValues = 0x738; // TArray<int32_t>
		constexpr auto PostRoundBonusSP = 0x748; // int32_t
		constexpr auto PostRoundLineupStats = 0x750; // double [0xb]
		constexpr auto ScoreboardStats = 0x7a8; // double [0x2]
	}

	namespace n_USkeletalMeshRegionConfig {
		constexpr auto Regions = 0x38; // TArray<USkeletalMeshRegion*>
		constexpr auto MaterialParamSets = 0x48; // TArray<UMeshMaterialParamSet*>
		constexpr auto TagRequirements = 0x58; // FGameplayTagQuery
		constexpr auto ConfigIdentifier = 0xa0; // FGameplayTag
	}

	namespace n_UDatasmithCommonTessellationOptions {
		constexpr auto Options = 0x30; // FDatasmithTessellationOptions
	}

	namespace n_UInstantSpawnedLootUpgradeMod {
		constexpr auto ItemQuery = 0xd0; // FGameplayTagQuery
		constexpr auto SpawnerQuery = 0x118; // FGameplayTagQuery
		constexpr auto bApplyOnlyToItemsAtSpawners = 0x160; // bool
	}

	namespace n_ANiagaraPreviewGrid {
		constexpr auto System = 0x2a0; // UNiagaraSystem*
		constexpr auto ResetMode = 0x2a8; // ENiagaraPreviewGridResetMode
		constexpr auto PreviewAxisX = 0x2b0; // UNiagaraPreviewAxis*
		constexpr auto PreviewAxisY = 0x2b8; // UNiagaraPreviewAxis*
		constexpr auto PreviewClass = 0x2c0; // ANiagaraPreviewBase*
		constexpr auto SpacingX = 0x2c8; // float
		constexpr auto SpacingY = 0x2cc; // float
		constexpr auto NumX = 0x2d0; // int32_t
		constexpr auto NumY = 0x2d4; // int32_t
		constexpr auto PreviewComponents = 0x2d8; // TArray<UChildActorComponent*>
	}

	namespace n_UAIDeckGenBase_C {
		constexpr auto Chance = 0x78; // FAISpawnEval_Chance
		constexpr auto Check Generating Deck Tags = 0xd0; // FAISpawnEval_CheckGeneratingDeckTags
		constexpr auto Difficulty = 0x160; // FAISpawnEval_Difficulty
	}

	namespace n_UThreatMod_ChangeOverTime {
		constexpr auto ChangeRate = 0x40; // float
		constexpr auto Mode = 0x44; // EThreatChange_Mode
	}

	namespace n_UBTDecorator_KeepFocus {
		constexpr auto FocusTargetKey = 0x70; // FBlackboardKeySelector
		constexpr auto FocusPriority = 0x98; // char
	}

	namespace n_UFirstPersonAssetLoader {
		constexpr auto AssetSlots = 0x40; // TArray<UFPAssetSlot*>
		constexpr auto NearbyItemAssetSet = 0x50; // UAsyncAssetSet*
		constexpr auto AllPickupItemsAssetSet = 0x58; // UAsyncAssetSet*
		constexpr auto PreroundAssetSet = 0x60; // UAsyncAssetSet*
	}

	namespace n_UItemCycleComponent {
		constexpr auto PowerSwapEffects = 0x248; // TArray<UGameplayEffect*>
		constexpr auto PowerSwapPlayerEffects = 0x258; // TArray<UGameplayEffect*>
		constexpr auto bIsSelectable = 0x268; // bool
		constexpr auto RaiseSpec = 0x270; // FItemCycleSpec
		constexpr auto LowerSpec = 0x2b0; // FItemCycleSpec
		constexpr auto CharacterItemCycleSoundTag = 0x2f0; // FName
		constexpr auto ItemCycleTuning = 0x2f8; // FItemCycleTuning
	}

	namespace n_UMovieSceneComponentMaterialTrack {
		constexpr auto MaterialIndex = 0x70; // int32_t
	}

	namespace n_UCharacterEmitterComponent {
		constexpr auto EffectContext = 0x118; // FGameplayEffectContext
		constexpr auto CollisionProfile = 0x198; // FName
		constexpr auto LineOfSightForgivenessTime = 0x1a0; // float
	}

	namespace n_UWindDirectionalSourceComponent {
		constexpr auto Strength = 0x230; // float
		constexpr auto Speed = 0x234; // float
		constexpr auto MinGustAmount = 0x238; // float
		constexpr auto MaxGustAmount = 0x23c; // float
		constexpr auto Radius = 0x240; // float
		constexpr auto bPointWind = 0x244; // char : 1
	}

	namespace n_AFortificationActor {
		constexpr auto AlertComponent = 0x2a0; // UAlertComponent*
		constexpr auto NotificationBoxComponent = 0x2a8; // UNotificationBoxComponent*
		constexpr auto UsableTriggerComponent = 0x2b0; // UBoxComponent*
		constexpr auto UsableComponent = 0x2b8; // UUsableComponent*
		constexpr auto InternalRootComponent = 0x2c0; // USceneComponent*
		constexpr auto HealthComponent = 0x2c8; // UHealthComponent*
		constexpr auto FortificationMeshComponent = 0x2d0; // UStaticMeshComponent*
		constexpr auto FortificationSkelMeshComponent = 0x2d8; // USkeletalMeshComponent*
		constexpr auto DecalComponent = 0x2e0; // UDecalComponent*
		constexpr auto FortifiedNavLinkComponent = 0x2e8; // UGobiNavLinkComponent*
		constexpr auto DestroyedNavLinkComponent = 0x2f0; // UGobiNavLinkComponent*
		constexpr auto NavModifierComponent = 0x2f8; // UGobiNavModifierComponent*
		constexpr auto AkAcousticPortalComponent = 0x300; // UAkAcousticPortalComponent*
		constexpr auto bUseSkeletalMesh = 0x308; // bool
		constexpr auto FortificationMeshes = 0x310; // TArray<FFortificationMeshInfo>
		constexpr auto FortificationSkelMeshInfo = 0x320; // FFortificationSkelMeshInfo
		constexpr auto ImpulseMagnitude = 0x350; // float
		constexpr auto ChanceToBeginDestroyed = 0x354; // float
		constexpr auto bShowDecal = 0x358; // bool
		constexpr auto DestroyedNavAreaClass = 0x360; // UNavArea*
		constexpr auto BrokenPieceLifetime = 0x368; // float
		constexpr auto BrokenFortificationMesh = 0x370; // UStaticMesh*
		constexpr auto BrokenFortificationMaterialOverride = 0x378; // UMaterialInterface*
		constexpr auto BrokenFortificationParticleEffect = 0x380; // UParticleSystem*
		constexpr auto bCanUpgradeFromBroken = 0x388; // bool
		constexpr auto RequiredMaterialsForBrokenUpgrade = 0x390; // TArray<FUsableInventoryCondition>
		constexpr auto DamageParticleEffect = 0x3b0; // UParticleSystem*
		constexpr auto OverlapDamageType = 0x3b8; // UGobiDamageType*
		constexpr auto OverlapDamage = 0x3c0; // float
		constexpr auto OnFortificationBreakTag = 0x3c4; // FGameplayTag
		constexpr auto PercentageBrokenToOpenAKPortal = 0x3e4; // float
	}

	namespace n_UEnvQueryTest_RescuePointOccupied {
		constexpr auto MatchType = 0x208; // ERescueOccupiedMatchType
	}

	namespace n_ULandscapeWeightmapUsage {
		constexpr auto ChannelUsage = 0x30; // ULandscapeComponent* [0x4]
		constexpr auto LayerGuid = 0x50; // FGuid
	}

	namespace n_UBookMark {
		constexpr auto Location = 0x30; // FVector
		constexpr auto Rotation = 0x3c; // FRotator
		constexpr auto HiddenLevels = 0x48; // TArray<FString>
	}

	namespace n_UAnimContext_Distance {
		constexpr auto DistFrom = 0x50; // UAnimContext_Transform*
		constexpr auto DistTo = 0x58; // UAnimContext_Transform*
		constexpr auto bAccountForRadii = 0x60; // bool
		constexpr auto bAccountForNavLinkOffset = 0x61; // bool
	}

	namespace n_UDatasmithMaterialInstanceTemplate {
		constexpr auto ParentMaterial = 0x38; // TSoftObjectPtr<UMaterialInterface>
		constexpr auto ScalarParameterValues = 0x60; // TMap<FName, float>
		constexpr auto VectorParameterValues = 0xb0; // TMap<FName, FLinearColor>
		constexpr auto TextureParameterValues = 0x100; // TMap<FName, TSoftObjectPtr<UTexture>>
		constexpr auto StaticParameters = 0x150; // FDatasmithStaticParameterSetTemplate
	}

	namespace n_UHUDEquipmentPanelUserWidget {
		constexpr auto bIsVendor = 0x458; // bool
	}

	namespace n_UMaterialExpressionSine {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto Period = 0x5c; // float
	}

	namespace n_AScenarioManager {
		constexpr auto StartupPhase = 0x2a0; // EScenarioManagerPhase
		constexpr auto ScenarioCollections = 0x2a8; // TArray<FScenarioCollection>
	}

	namespace n_UNiagaraDataInterfaceStaticMesh {
		constexpr auto DefaultMesh = 0x38; // UStaticMesh*
		constexpr auto Source = 0x40; // AActor*
		constexpr auto SourceComponent = 0x48; // UStaticMeshComponent*
		constexpr auto SectionFilter = 0x50; // FNDIStaticMeshSectionFilter
	}

	namespace n_UParticleModuleAttractorParticle {
		constexpr auto EmitterName = 0x38; // FName
		constexpr auto Range = 0x40; // FRawDistributionFloat
		constexpr auto bStrengthByDistance = 0x70; // char : 1
		constexpr auto Strength = 0x78; // FRawDistributionFloat
		constexpr auto bAffectBaseVelocity = 0xa8; // char : 1
		constexpr auto SelectionMethod = 0xac; // EAttractorParticleSelectionMethod
		constexpr auto bRenewSource = 0xb0; // char : 1
		constexpr auto bInheritSourceVel = 0xb0; // char : 1
		constexpr auto LastSelIndex = 0xb4; // int32_t
	}

	namespace n_UGhostModeIndicatorUserWidget {
		constexpr auto SpawnNotfication = 0x460; // UPanelWidget*
	}

	namespace n_UDestroySessionCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_ULifeStateComponent {
		constexpr auto ReviveMontageSets = 0xe8; // TArray<UMontageSet*>
		constexpr auto ReviveAnimationTime = 0xf8; // float
		constexpr auto OnLifeStateChanged = 0x100; // FMulticastInlineDelegate
		constexpr auto ActiveLifeStateTag = 0x180; // FGameplayTag
		constexpr auto ReplicatedLifeStateChangeInfo = 0x198; // FLifeStateChangeInfo
		constexpr auto LifeStates = 0x1a8; // TArray<FLifeStateMap>
		constexpr auto ActiveLifeState = 0x1b8; // ULifeStateBase*
		constexpr auto ReplicatedLifeStates = 0x1c0; // TArray<ULifeStateBase*>
		constexpr auto CurrentReviveMontage = 0x1f0; // UAnimMontage*
	}

	namespace n_UCommonZombieMeshSubsystem {
		constexpr auto MergedMeshes = 0x40; // TArray<FMeshMergeConfiguration>
		constexpr auto MeshConfigMods = 0x50; // TArray<FSkeletalMeshConfigMod>
	}

	namespace n_UFoliageInstancedStaticMeshComponent {
		constexpr auto GenerationGuid = 0x770; // FGuid
	}

	namespace n_UAnimNotifyState_ClampInputRotationRate {
		constexpr auto Label = 0x38; // FName
		constexpr auto Type = 0x40; // EClampInputRotationType
		constexpr auto Rate = 0x44; // FVector2D
	}

	namespace n_UZombieVariantEntryUserWidget {
		constexpr auto LocalUserPipColor = 0x468; // FSlateColor
		constexpr auto OtherUserPipColor = 0x498; // FSlateColor
		constexpr auto UnusedPipColor = 0x4c8; // FSlateColor
		constexpr auto TeamPipWidget = 0x4f8; // UGobiUserWidget*
		constexpr auto TeamPipsHBox = 0x500; // UHorizontalBox*
		constexpr auto Portrait = 0x508; // UImage*
		constexpr auto VariantText = 0x510; // UTextBlock*
	}

	namespace n_USkeletalMeshComponent {
		constexpr auto AnimBlueprintGeneratedClass = 0x728; // UObject*
		constexpr auto AnimClass = 0x730; // UAnimInstance*
		constexpr auto AnimScriptInstance = 0x738; // UAnimInstance*
		constexpr auto PostProcessAnimInstance = 0x740; // UAnimInstance*
		constexpr auto AnimationData = 0x748; // FSingleAnimationPlayData
		constexpr auto RootBoneTranslation = 0x770; // FVector
		constexpr auto LineCheckBoundsScale = 0x77c; // FVector
		constexpr auto LinkedInstances = 0x7a8; // TArray<UAnimInstance*>
		constexpr auto CachedBoneSpaceTransforms = 0x7b8; // TArray<FTransform>
		constexpr auto CachedComponentSpaceTransforms = 0x7c8; // TArray<FTransform>
		constexpr auto GlobalAnimRateScale = 0x7f8; // float
		constexpr auto KinematicBonesUpdateType = 0x7fc; // EKinematicBonesUpdateToPhysics
		constexpr auto PhysicsTransformUpdateMode = 0x7fd; // EPhysicsTransformUpdateMode
		constexpr auto AnimationMode = 0x7ff; // EAnimationMode
		constexpr auto bDisablePostProcessBlueprint = 0x801; // char : 1
		constexpr auto bUpdateOverlapsOnAnimationFinalize = 0x801; // char : 1
		constexpr auto bHasValidBodies = 0x801; // char : 1
		constexpr auto bBlendPhysics = 0x801; // char : 1
		constexpr auto bEnablePhysicsOnDedicatedServer = 0x801; // char : 1
		constexpr auto bUpdateJointsFromAnimation = 0x802; // char : 1
		constexpr auto bDisableClothSimulation = 0x802; // char : 1
		constexpr auto bDisableRigidBodyAnimNode = 0x802; // char : 1
		constexpr auto bAllowAnimCurveEvaluation = 0x802; // char : 1
		constexpr auto bDisableAnimCurves = 0x802; // char : 1
		constexpr auto bCollideWithEnvironment = 0x803; // char : 1
		constexpr auto bCollideWithAttachedChildren = 0x803; // char : 1
		constexpr auto bLocalSpaceSimulation = 0x803; // char : 1
		constexpr auto bResetAfterTeleport = 0x803; // char : 1
		constexpr auto bDeferKinematicBoneUpdate = 0x803; // char : 1
		constexpr auto bNoSkeletonUpdate = 0x803; // char : 1
		constexpr auto bPauseAnims = 0x803; // char : 1
		constexpr auto bUseRefPoseOnInitAnim = 0x804; // char : 1
		constexpr auto bEnablePerPolyCollision = 0x804; // char : 1
		constexpr auto bForceRefpose = 0x804; // char : 1
		constexpr auto bOnlyAllowAutonomousTickPose = 0x804; // char : 1
		constexpr auto bIsAutonomousTickPose = 0x804; // char : 1
		constexpr auto bOldForceRefPose = 0x804; // char : 1
		constexpr auto bShowPrePhysBones = 0x804; // char : 1
		constexpr auto bRequiredBonesUpToDate = 0x804; // char : 1
		constexpr auto bAnimTreeInitialised = 0x805; // char : 1
		constexpr auto bIncludeComponentLocationIntoBounds = 0x805; // char : 1
		constexpr auto bEnableLineCheckWithBounds = 0x805; // char : 1
		constexpr auto bUseBendingElements = 0x805; // char : 1
		constexpr auto bUseTetrahedralConstraints = 0x805; // char : 1
		constexpr auto bUseThinShellVolumeConstraints = 0x805; // char : 1
		constexpr auto bUseSelfCollisions = 0x805; // char : 1
		constexpr auto bUseContinuousCollisionDetection = 0x805; // char : 1
		constexpr auto bPropagateCurvesToSlaves = 0x806; // char : 1
		constexpr auto bSkipKinematicUpdateWhenInterpolating = 0x806; // char : 1
		constexpr auto bSkipBoundsUpdateWhenInterpolating = 0x806; // char : 1
		constexpr auto bNeedsQueuedAnimEventsDispatched = 0x806; // char : 1
		constexpr auto CachedAnimCurveUidVersion = 0x808; // uint16_t
		constexpr auto MassMode = 0x80a; // EClothMassMode
		constexpr auto UniformMass = 0x80c; // float
		constexpr auto TotalMass = 0x810; // float
		constexpr auto Density = 0x814; // float
		constexpr auto MinPerParticleMass = 0x818; // float
		constexpr auto ClothBlendWeight = 0x81c; // float
		constexpr auto EdgeStiffness = 0x820; // float
		constexpr auto BendingStiffness = 0x824; // float
		constexpr auto AreaStiffness = 0x828; // float
		constexpr auto VolumeStiffness = 0x82c; // float
		constexpr auto StrainLimitingStiffness = 0x830; // float
		constexpr auto ShapeTargetStiffness = 0x834; // float
		constexpr auto DisallowedAnimCurves = 0x838; // TArray<FName>
		constexpr auto BodySetup = 0x848; // UBodySetup*
		constexpr auto OnConstraintBroken = 0x858; // FMulticastInlineDelegate
		constexpr auto ClothingSimulationFactory = 0x868; // UClothingSimulationFactory*
		constexpr auto TeleportDistanceThreshold = 0x940; // float
		constexpr auto TeleportRotationThreshold = 0x944; // float
		constexpr auto LastPoseTickFrame = 0x950; // uint32_t
		constexpr auto ClothingInteractor = 0x9b0; // UClothingSimulationInteractor*
		constexpr auto OnAnimInitialized = 0xa80; // FMulticastInlineDelegate
	}

	namespace n_UGameplayEffectAbilityComponent {
		constexpr auto AbilityComponentTag = 0x240; // FGameplayTag
		constexpr auto CooldownMod = 0x248; // FGamePropertyFloatMod
		constexpr auto DurationMod = 0x258; // FGamePropertyFloatMod
	}

	namespace n_UTweenFloat {
		constexpr auto OnTweenStart = 0xb0; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0xd0; // FMulticastInlineDelegate
		constexpr auto OnTweenActorHit = 0xe0; // FMulticastInlineDelegate
		constexpr auto OnTweenActorBeginOverlap = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnTweenPrimitiveComponentHit = 0x100; // FMulticastInlineDelegate
		constexpr auto OnTweenPrimitiveComponentBeginOverlap = 0x110; // FMulticastInlineDelegate
		constexpr auto OnTweenSplinePointReached = 0x120; // FMulticastInlineDelegate
	}

	namespace n_ULandscapeMeshCollisionComponent {
		constexpr auto MeshGuid = 0x590; // FGuid
	}

	namespace n_USaferoomConfigurationAsset {
		constexpr auto DoorIdentifierMapping = 0x38; // TMap<EPartySafeRoomState, FGameplayTag>
	}

	namespace n_ULaserSightComponent {
		constexpr auto FirstPersonDotParticle = 0x190; // UParticleSystemComponent*
		constexpr auto ThirdPersonDotParticle = 0x198; // UParticleSystemComponent*
		constexpr auto FirstPersonLaserSightConfig = 0x1a0; // FLaserSightConfig
		constexpr auto ThirdPersonLaserSightConfig = 0x1d8; // FLaserSightConfig
	}

	namespace n_UGameplayEffectMovementComponent {
		constexpr auto StandingBaseMoveSpeedScaleMod = 0x248; // FDirectionalMoveSpeedModifier
		constexpr auto StandingADSMoveSpeedScaleMod = 0x278; // FDirectionalMoveSpeedModifier
		constexpr auto StandingHipFiringMoveSpeedScaleMod = 0x2a8; // FDirectionalMoveSpeedModifier
		constexpr auto StandingADSFiringMoveSpeedScaleMod = 0x2d8; // FDirectionalMoveSpeedModifier
		constexpr auto CrouchedBaseMoveSpeedScaleMod = 0x308; // FDirectionalMoveSpeedModifier
		constexpr auto CrouchedADSMoveSpeedScaleMod = 0x338; // FDirectionalMoveSpeedModifier
		constexpr auto CrouchedHipFiringMoveSpeedScaleMod = 0x368; // FDirectionalMoveSpeedModifier
		constexpr auto CrouchedADSFiringMoveSpeedScaleMod = 0x398; // FDirectionalMoveSpeedModifier
		constexpr auto SprintingMoveSpeedScaleMod = 0x3c8; // FGamePropertyFloatMod
		constexpr auto MovementNoiseScaleMod = 0x3d8; // FGamePropertyFloatMod
	}

	namespace n_ACommon_DismemberedPieceStaticMesh_BP_C {
		constexpr auto StaticMesh = 0x2a0; // UStaticMeshComponent*
		constexpr auto DefaultSceneRoot = 0x2a8; // USceneComponent*
	}

	namespace n_UTitanStage2And3AnimInstance {
		constexpr auto TitanStage2And3Component = 0x2c0; // UTitanStage2And3Component*
		constexpr auto bDormant = 0x2c8; // bool
		constexpr auto bIdle = 0x2c9; // bool
		constexpr auto bBiteTell = 0x2ca; // bool
		constexpr auto bBiting = 0x2cb; // bool
		constexpr auto bDead = 0x2cc; // bool
		constexpr auto BiteAngle = 0x2d0; // float
		constexpr auto bRetreat = 0x2d4; // bool
		constexpr auto bDig = 0x2d5; // bool
		constexpr auto bTailThrash = 0x2d6; // bool
		constexpr auto bTailThrashLeft = 0x2d7; // bool
		constexpr auto bTailThrashRight = 0x2d8; // bool
		constexpr auto TentacleFrontLeft = 0x2e0; // FTitanStage3TentacleAnimInfo
		constexpr auto TentacleFrontRight = 0x308; // FTitanStage3TentacleAnimInfo
		constexpr auto TentacleBackLeft = 0x330; // FTitanStage3TentacleAnimInfo
		constexpr auto TentacleBackRight = 0x358; // FTitanStage3TentacleAnimInfo
		constexpr auto AcidSprayAttackExitAnimSequence = 0x380; // UAnimSequence*
		constexpr auto TailThrashLeftAnimSequence = 0x388; // UAnimSequence*
		constexpr auto TailThrashRightAnimSequence = 0x390; // UAnimSequence*
		constexpr auto DeathAnimSequence = 0x398; // UAnimSequence*
	}

	namespace n_ABirdSite_BP_C {
		constexpr auto UberGraphFrame = 0x4d0; // FPointerToUberGraphFrame
		constexpr auto Decal_Bird_Entrails_01 = 0x4d8; // UDecalComponent*
		constexpr auto DecalRoot = 0x4e0; // USceneComponent*
		constexpr auto Nest_Piles_SML_02_SM2 = 0x4e8; // UStaticMeshComponent*
		constexpr auto Nest_Piles_SML_02_SM1 = 0x4f0; // UStaticMeshComponent*
		constexpr auto Nest_Piles_SML_01_SM = 0x4f8; // UStaticMeshComponent*
		constexpr auto GibsRoot = 0x500; // USceneComponent*
		constexpr auto GameCoachLessons = 0x508; // UGameCoachLessonsComponent*
		constexpr auto ScareBirdsScenario_BP = 0x510; // UScareBirdsScenario_BP_C*
		constexpr auto Alert = 0x518; // UAlertComponent*
		constexpr auto SphereTrigger = 0x520; // USphereComponent*
		constexpr auto Bird Site BB Icon = 0x528; // UBillboardComponent*
		constexpr auto ShowGibs = 0x530; // bool
		constexpr auto ScaleGibs = 0x534; // FVector
	}

	namespace n_AProceduralFoliageVolume {
		constexpr auto ProceduralComponent = 0x2d8; // UProceduralFoliageComponent*
	}

	namespace n_UHeroAnimInstance3P {
		constexpr auto HeroAnimData = 0x7e0; // FHeroAnimData3P
		constexpr auto HeroAnimState = 0xa30; // FHeroAnimState3P
		constexpr auto HeroDraggedAnimData = 0xe30; // FHeroDraggedAnimData3P
		constexpr auto FacePoseAsset = 0xe48; // UPoseAsset*
		constexpr auto FemaleScaleCurve = 0xe50; // FGobiAnimationCurveData
		constexpr auto FemaleCharacterScale = 0xe60; // float
		constexpr auto ThirdPersonLeftHandIK = 0xe64; // FOffHandIK
		constexpr auto ThirdPersonRightHandIK = 0xe98; // FOffHandIK
		constexpr auto LocoStances = 0xed0; // UHeroLocoStances*
		constexpr auto ForceUnarmedQuery = 0xed8; // FCachedGameplayTagQuery
	}

	namespace n_UMaterialInstance {
		constexpr auto PhysMaterial = 0x90; // UPhysicalMaterial*
		constexpr auto PhysicalMaterialMap = 0x98; // UPhysicalMaterial* [0x8]
		constexpr auto Parent = 0xd8; // UMaterialInterface*
		constexpr auto bHasStaticPermutationResource = 0xe0; // char : 1
		constexpr auto bOverrideSubsurfaceProfile = 0xe0; // char : 1
		constexpr auto ScalarParameterValues = 0xe8; // TArray<FScalarParameterValue>
		constexpr auto VectorParameterValues = 0xf8; // TArray<FVectorParameterValue>
		constexpr auto TextureParameterValues = 0x108; // TArray<FTextureParameterValue>
		constexpr auto RuntimeVirtualTextureParameterValues = 0x118; // TArray<FRuntimeVirtualTextureParameterValue>
		constexpr auto FontParameterValues = 0x128; // TArray<FFontParameterValue>
		constexpr auto BasePropertyOverrides = 0x138; // FMaterialInstanceBasePropertyOverrides
		constexpr auto StaticParameters = 0x150; // FStaticParameterSet
		constexpr auto CachedLayerParameters = 0x190; // FMaterialCachedParameters
		constexpr auto CachedReferencedTextures = 0x330; // TArray<UObject*>
	}

	namespace n_USoundNodeAttenuation {
		constexpr auto AttenuationSettings = 0x60; // USoundAttenuation*
		constexpr auto AttenuationOverrides = 0x68; // FSoundAttenuationSettings
		constexpr auto bOverrideAttenuation = 0x408; // char : 1
	}

	namespace n_UShowLoginUICallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UUserInterfaceSettings {
		constexpr auto RenderFocusRule = 0x40; // ERenderFocusRule
		constexpr auto HardwareCursors = 0x48; // TMap<EMouseCursor, FHardwareCursorReference>
		constexpr auto SoftwareCursors = 0x98; // TMap<EMouseCursor, FSoftClassPath>
		constexpr auto DefaultCursor = 0xe8; // FSoftClassPath
		constexpr auto TextEditBeamCursor = 0x100; // FSoftClassPath
		constexpr auto CrosshairsCursor = 0x118; // FSoftClassPath
		constexpr auto HandCursor = 0x130; // FSoftClassPath
		constexpr auto GrabHandCursor = 0x148; // FSoftClassPath
		constexpr auto GrabHandClosedCursor = 0x160; // FSoftClassPath
		constexpr auto SlashedCircleCursor = 0x178; // FSoftClassPath
		constexpr auto ApplicationScale = 0x190; // float
		constexpr auto UIScaleRule = 0x194; // EUIScalingRule
		constexpr auto CustomScalingRuleClass = 0x198; // FSoftClassPath
		constexpr auto UIScaleCurve = 0x1b0; // FRuntimeFloatCurve
		constexpr auto bAllowHighDPIInGameMode = 0x238; // bool
		constexpr auto bLoadWidgetsOnDedicatedServer = 0x239; // bool
		constexpr auto GlobalStyle = 0x240; // TSoftObjectPtr<UGlobalStyle>
		constexpr auto CursorClasses = 0x268; // TArray<UObject*>
		constexpr auto CustomScalingRuleClassInstance = 0x278; // UObject*
		constexpr auto CustomScalingRule = 0x280; // UDPICustomScalingRule*
	}

	namespace n_UFacialAnimationComponent {
		constexpr auto CurveSourceBindingName = 0xf0; // FName
		constexpr auto ExpressionBlendTime = 0xf8; // float
		constexpr auto VisemeBlendOutTime = 0xfc; // float
		constexpr auto FacialAnimationData = 0x100; // UFacialAnimationData*
		constexpr auto DialogComponent = 0x108; // UDialogueComponent*
		constexpr auto LipsyncHelperSubsystem = 0x120; // ULipsyncHelperSubsystem*
	}

	namespace n_UInterpTrackInstFloatAnimBPParam {
		constexpr auto AnimScriptInstance = 0x30; // UAnimInstance*
		constexpr auto ResetFloat = 0x38; // float
	}

	namespace n_UPerkComponent {
		constexpr auto OnPerkChange = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnPerkAdded = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnPerkRemoved = 0x108; // FMulticastInlineDelegate
		constexpr auto OnPerkExpirationTimeChanged = 0x118; // FMulticastInlineDelegate
		constexpr auto ActivePerks = 0x138; // TArray<FActivePerk>
	}

	namespace n_AAISpawnActor_Open_AvgBig_BP_C {
		constexpr auto HeroLOSVolume = 0x5b0; // UHeroLOSVolumeComponent*
	}

	namespace n_UParticleModuleEventReceiverKillParticles {
		constexpr auto bStopSpawning = 0x48; // char : 1
	}

	namespace n_UEnvQueryTest_HasPathedToRecently {
		constexpr auto TimeSinceLastPathfind = 0x208; // float
		constexpr auto BlackboardAsset = 0x210; // UBlackboardData*
		constexpr auto PathFollowInfoBBKey = 0x218; // FBlackboardKeySelector
	}

	namespace n_UAudioJostleBehaviors {
		constexpr auto ShrubBehaviors = 0x30; // TArray<FShrubBehaviorContainer>
		constexpr auto BumpBehaviors = 0x40; // TArray<FBumpBehaviorContainer>
		constexpr auto RattleBehaviors = 0x50; // TArray<FRattleBehaviorContainer>
	}

	namespace n_ULineOfSightSubsystem {
		constexpr auto LOSTraceBuffer = 0x38; // TArray<FLOSTrace>
		constexpr auto LOSData = 0x48; // TMap<AActor*, FLOSData>
		constexpr auto DynamicActors = 0x98; // TMap<AActor*, FLOSActor>
	}

	namespace n_UAnimContext_NavPathCorner {
		constexpr auto CornerIdx = 0x70; // int32_t
	}

	namespace n_AZombieStandIn {
		constexpr auto bIsMale = 0x2a0; // bool
		constexpr auto OnAppearanceChanged = 0x2a8; // FMulticastInlineDelegate
		constexpr auto MaleDefaultAnimation = 0x2b8; // UAnimSequence*
		constexpr auto FemaleDefaultAnimation = 0x2c0; // UAnimSequence*
		constexpr auto MaleConfig = 0x2c8; // FGobiCharacterConfig
		constexpr auto FemaleConfig = 0x2f0; // FGobiCharacterConfig
		constexpr auto CharacterRandomizationData = 0x318; // FCharacterRandomizationData
	}

	namespace n_UMaterialExpressionMultiply {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto ConstA = 0x70; // float
		constexpr auto ConstB = 0x74; // float
	}

	namespace n_UMaterialFunctionInstance {
		constexpr auto Parent = 0x48; // UMaterialFunctionInterface*
		constexpr auto Base = 0x50; // UMaterialFunctionInterface*
		constexpr auto ScalarParameterValues = 0x58; // TArray<FScalarParameterValue>
		constexpr auto VectorParameterValues = 0x68; // TArray<FVectorParameterValue>
		constexpr auto TextureParameterValues = 0x78; // TArray<FTextureParameterValue>
		constexpr auto FontParameterValues = 0x88; // TArray<FFontParameterValue>
		constexpr auto StaticSwitchParameterValues = 0x98; // TArray<FStaticSwitchParameter>
		constexpr auto StaticComponentMaskParameterValues = 0xa8; // TArray<FStaticComponentMaskParameter>
		constexpr auto RuntimeVirtualTextureParameterValues = 0xb8; // TArray<FRuntimeVirtualTextureParameterValue>
	}

	namespace n_UMovieSceneTrack {
		constexpr auto EvalOptions = 0x58; // FMovieSceneTrackEvalOptions
		constexpr auto bIsEvalDisabled = 0x5d; // bool
	}

	namespace n_UGameplayAction_Pounce {
		constexpr auto PounceComponentTag = 0x218; // FGameplayTag
	}

	namespace n_UUsableComponent {
		constexpr auto OnBeginUse = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnEndUse = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnSuccessfulUse = 0x108; // FMulticastInlineDelegate
		constexpr auto OnEnabledChanged = 0x118; // FMulticastInlineDelegate
		constexpr auto OnSuccessfulUseDetailed = 0x140; // FMulticastInlineDelegate
		constexpr auto bCanUseWhileFalling = 0x168; // bool
		constexpr auto UsingActor = 0x170; // AActor*
		constexpr auto RequiredTriggerGameplayTag = 0x178; // FGameplayTag
		constexpr auto RequiredUseTime = 0x180; // float
		constexpr auto bResetOnStopUse = 0x184; // bool
		constexpr auto bSupportsTapAndHold = 0x185; // bool
		constexpr auto UsedByPlayerSlots = 0x1f8; // TArray<APlayerSlot*>
		constexpr auto bIsEnabled = 0x208; // bool
		constexpr auto bDisableOnSuccessfulUse = 0x209; // bool
		constexpr auto bAllowQuickUseItems = 0x20a; // bool
		constexpr auto bAllowQuickUseItemsWithZeroRequiredUseTime = 0x20b; // bool
		constexpr auto bRequireQuickUseItem = 0x20c; // bool
		constexpr auto bQuickUseItemOnlyRequiredForFirstUse = 0x20d; // bool
		constexpr auto bSingleUsePerPlayerSlot = 0x20e; // bool
		constexpr auto DefaultPromptText = 0x210; // FText
		constexpr auto SingleUsePerPlayerText = 0x228; // FText
		constexpr auto UsersProgressBarDef = 0x240; // FUsableProgressBarDefinition
		constexpr auto OwnersProgressBarDef = 0x268; // FUsableProgressBarDefinition
		constexpr auto bCanDisablePingable = 0x290; // bool
		constexpr auto OwnerAppliedGameplayEffects = 0x298; // TArray<UGameplayEffect*>
		constexpr auto UserAppliedGameplayEffects = 0x2a8; // TArray<UGameplayEffect*>
		constexpr auto OwnerRequiredTagQuery = 0x2b8; // FGameplayTagQuery
		constexpr auto UsingActorBlockingTags = 0x300; // FGameplayTagContainer
		constexpr auto TagsAppliedToOwner = 0x320; // FGameplayTagContainer
		constexpr auto TagsAppliedToUsingActor = 0x340; // FGameplayTagContainer
		constexpr auto BeginUseCueTag = 0x360; // FGameplayTag
		constexpr auto SuccessfulUseCueTag = 0x368; // FGameplayTag
		constexpr auto EndUseCueTag = 0x370; // FGameplayTag
		constexpr auto CurrencyCondition = 0x378; // FCurrencyCondition
		constexpr auto HealthPercentCondition = 0x3a8; // FHealthPercentCondition
		constexpr auto MissionObjectiveCondition = 0x3e0; // FMissionObjectiveCondition
		constexpr auto SafeRoomVendorCondition = 0x430; // FSafeRoomVendorCondition
		constexpr auto InventoryConditionMode = 0x460; // EInventoryConditionMode
		constexpr auto InventoryConditions = 0x468; // TArray<FUsableInventoryCondition>
		constexpr auto GameplayTagConditions = 0x478; // TArray<FGameplayTagCondition>
		constexpr auto bUsingActorCanBeBelow = 0x488; // bool
		constexpr auto bRequireClearLineOfSight = 0x489; // bool
		constexpr auto TraceLocation = 0x48a; // EUsableTraceLocation
		constexpr auto ClearLoSTraceTimeForgiveness = 0x48c; // float
		constexpr auto bFailTriggerTraceOnOwnerHit = 0x490; // bool
		constexpr auto AssociatedMeshTags = 0x498; // FGameplayTagContainer
		constexpr auto bPerformReachOutAnimation = 0x4b8; // bool
		constexpr auto bBypassCapsuleCheckOnHold = 0x4b9; // bool
		constexpr auto CancelDistance = 0x4bc; // float
		constexpr auto FailedUseSound = 0x4c0; // UAkAudioEvent*
		constexpr auto UseAnimation = 0x4c8; // UAnimMontage*
		constexpr auto UseAnimations = 0x4d0; // TArray<UAnimMontage*>
		constexpr auto bScaleUseAnimBasedOnUsersUseRate = 0x4e0; // bool
		constexpr auto EndUseAnimation = 0x4e8; // UAnimMontage*
		constexpr auto UsablePriority = 0x4f0; // EUsablePriority
	}

	namespace n_APlayerSpray {
		constexpr auto SprayData = 0x2a8; // FSprayData
		constexpr auto SprayAudioEvent = 0x2b8; // UAkAudioEvent*
		constexpr auto AudioOffset = 0x2c0; // float
	}

	namespace n_UDatasmithGLTFSceneImportData {
		constexpr auto Generator = 0x30; // FString
		constexpr auto Version = 0x40; // float
		constexpr auto Author = 0x48; // FString
		constexpr auto License = 0x58; // FString
		constexpr auto Source = 0x68; // FString
	}

	namespace n_UPingLesson_BP_C {
		constexpr auto UberGraphFrame = 0x460; // FPointerToUberGraphFrame
	}

	namespace n_UQuickInvitePlayerCardUserWidget {
		constexpr auto Player = 0x458; // FPartyPlayer
	}

	namespace n_UReportPlayerPopupUserWidget {
		constexpr auto ReportOptions = 0x478; // TArray<FReportPlayerEntry>
	}

	namespace n_UInterpTrack {
		constexpr auto SubTracks = 0x40; // TArray<UInterpTrack*>
		constexpr auto TrackInstClass = 0x50; // UInterpTrackInst*
		constexpr auto ActiveCondition = 0x58; // ETrackActiveCondition
		constexpr auto TrackTitle = 0x60; // FString
		constexpr auto bOnePerGroup = 0x70; // char : 1
		constexpr auto bDirGroupOnly = 0x70; // char : 1
		constexpr auto bDisableTrack = 0x70; // char : 1
		constexpr auto bIsSelected = 0x70; // char : 1
		constexpr auto bIsAnimControlTrack = 0x70; // char : 1
		constexpr auto bSubTrackOnly = 0x70; // char : 1
		constexpr auto bVisible = 0x70; // char : 1
		constexpr auto bIsRecording = 0x70; // char : 1
	}

	namespace n_UGameplayEffectApplyPerk {
		constexpr auto PerksToApply = 0x248; // TArray<FDataTableRowHandle>
	}

	namespace n_URig {
		constexpr auto TransformBases = 0x38; // TArray<FTransformBase>
		constexpr auto Nodes = 0x48; // TArray<FNode>
	}

	namespace n_UGameThreatSystem {
		constexpr auto ThreatModifierProfile = 0x30; // TArray<UGameThreatModifier*>
		constexpr auto GameThreatStartAmount = 0x40; // float
		constexpr auto ThreatLevels = 0x44; // float [0x6]
		constexpr auto StressScalePerLevel = 0x5c; // float [0x6]
		constexpr auto ThreatModifiers = 0x78; // TArray<UGameThreatModifier*>
	}

	namespace n_UAchievementWriteCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UIpConnection {
		constexpr auto SocketErrorDisconnectDelay = 0x1a88; // float
	}

	namespace n_UVoipOverlayBaseUserWidget {
		constexpr auto bSkipScreenVisibilityBinding = 0x458; // bool
	}

	namespace n_UVoiceTalkersComponent {
		constexpr auto Matchmaking = 0xe8; // UMatchmaking*
		constexpr auto Controller = 0xf0; // APlayerController*
		constexpr auto OnAnyLocalPlayerTalkingChanged = 0x100; // FMulticastInlineDelegate
		constexpr auto OnAnyRemotePlayerTalkingChanged = 0x110; // FMulticastInlineDelegate
	}

	namespace n_USynthKnob {
		constexpr auto Value = 0x148; // float
		constexpr auto StepSize = 0x14c; // float
		constexpr auto MouseSpeed = 0x150; // float
		constexpr auto MouseFineTuneSpeed = 0x154; // float
		constexpr auto ShowTooltipInfo = 0x158; // char : 1
		constexpr auto ParameterName = 0x160; // FText
		constexpr auto ParameterUnits = 0x178; // FText
		constexpr auto ValueDelegate = 0x190; // FDelegate
		constexpr auto WidgetStyle = 0x1a0; // FSynthKnobStyle
		constexpr auto Locked = 0x3f8; // bool
		constexpr auto IsFocusable = 0x3f9; // bool
		constexpr auto OnMouseCaptureBegin = 0x400; // FMulticastInlineDelegate
		constexpr auto OnMouseCaptureEnd = 0x410; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureBegin = 0x420; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureEnd = 0x430; // FMulticastInlineDelegate
		constexpr auto OnValueChanged = 0x440; // FMulticastInlineDelegate
	}

	namespace n_UStaticMeshSimulationComponent {
		constexpr auto Simulating = 0xf0; // bool
		constexpr auto bNotifyCollisions = 0xf1; // bool
		constexpr auto ObjectType = 0xf2; // EObjectStateTypeEnum
		constexpr auto Mass = 0xf4; // float
		constexpr auto CollisionType = 0xf8; // ECollisionTypeEnum
		constexpr auto ImplicitType = 0xf9; // EImplicitTypeEnum
		constexpr auto MinLevelSetResolution = 0xfc; // int32_t
		constexpr auto MaxLevelSetResolution = 0x100; // int32_t
		constexpr auto InitialVelocityType = 0x104; // EInitialVelocityTypeEnum
		constexpr auto InitialLinearVelocity = 0x108; // FVector
		constexpr auto InitialAngularVelocity = 0x114; // FVector
		constexpr auto DamageThreshold = 0x120; // float
		constexpr auto PhysicalMaterial = 0x128; // UChaosPhysicalMaterial*
		constexpr auto ChaosSolverActor = 0x130; // AChaosSolverActor*
		constexpr auto OnChaosPhysicsCollision = 0x138; // FMulticastInlineDelegate
		constexpr auto SimulatedComponents = 0x158; // TArray<UPrimitiveComponent*>
	}

	namespace n_UVerticalBox {
		constexpr auto ChildSpacing = 0x170; // float
	}

	namespace n_UAnimNotify_ParticleCollider {
		constexpr auto Offset = 0x40; // FTransform
		constexpr auto BoneName = 0x70; // FName
		constexpr auto EmitterDef = 0x78; // FImpactEmitterDefinition
	}

	namespace n_UAISmartActor_BruteReachIn {
		constexpr auto EnabledBox = 0xe8; // UBoxComponent*
		constexpr auto VisualizationMesh = 0xf0; // UStaticMeshComponent*
		constexpr auto AISmartActor = 0xf8; // AAISmartActor*
		constexpr auto DoorHealthComponent = 0x100; // UHealthComponent*
		constexpr auto bShouldEnableOnOverlap = 0x108; // bool
		constexpr auto MaxSearchDistance = 0x10c; // float
		constexpr auto DamageTypeClass = 0x110; // UGobiDamageType*
		constexpr auto ValidOverlappingActors = 0x120; // TSet<AHeroCharacter*>
	}

	namespace n_UGizmoPlaneScaleParameterSource {
		constexpr auto AxisSource = 0x90; // TScriptInterface<IGizmoAxisSource>
		constexpr auto TransformSource = 0xa0; // TScriptInterface<IGizmoTransformSource>
		constexpr auto ScaleMultiplier = 0xb0; // float
		constexpr auto Parameter = 0xb4; // FVector2D
		constexpr auto LastChange = 0xbc; // FGizmoVec2ParameterChange
		constexpr auto CurScaleOrigin = 0xcc; // FVector
		constexpr auto CurScaleNormal = 0xd8; // FVector
		constexpr auto CurScaleAxisX = 0xe4; // FVector
		constexpr auto CurScaleAxisY = 0xf0; // FVector
		constexpr auto InitialTransform = 0x100; // FTransform
	}

	namespace n_UCompositeDataTable {
		constexpr auto ParentTables = 0xd8; // TArray<UDataTable*>
		constexpr auto OldParentTables = 0xe8; // TArray<UDataTable*>
	}

	namespace n_UEndpointSubmix {
		constexpr auto EndpointType = 0x40; // FName
		constexpr auto EndpointSettingsClass = 0x48; // UAudioEndpointSettingsBase*
		constexpr auto EndpointSettings = 0x50; // UAudioEndpointSettingsBase*
	}

	namespace n_USlider {
		constexpr auto Value = 0x148; // float
		constexpr auto ValueDelegate = 0x14c; // FDelegate
		constexpr auto MinValue = 0x15c; // float
		constexpr auto MaxValue = 0x160; // float
		constexpr auto WidgetStyle = 0x168; // FSliderStyle
		constexpr auto Orientation = 0x4d8; // EOrientation
		constexpr auto SliderBarColor = 0x4e0; // FSlateColor
		constexpr auto SliderHandleColor = 0x510; // FSlateColor
		constexpr auto IndentHandle = 0x540; // bool
		constexpr auto Locked = 0x541; // bool
		constexpr auto MouseUsesStep = 0x542; // bool
		constexpr auto RequiresControllerLock = 0x543; // bool
		constexpr auto StepSize = 0x544; // float
		constexpr auto bSnapToStep = 0x548; // bool
		constexpr auto IsFocusable = 0x549; // bool
		constexpr auto bIsFocusedOnHover = 0x54a; // bool
		constexpr auto bLockFocusWhileControllerCaptured = 0x54b; // bool
		constexpr auto OnMouseCaptureBegin = 0x550; // FMulticastInlineDelegate
		constexpr auto OnMouseCaptureEnd = 0x560; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureBegin = 0x570; // FMulticastInlineDelegate
		constexpr auto OnControllerCaptureEnd = 0x580; // FMulticastInlineDelegate
		constexpr auto OnValueChanged = 0x590; // FMulticastInlineDelegate
	}

	namespace n_UParticleModuleEventReceiverBase {
		constexpr auto EventGeneratorType = 0x38; // EParticleEventType
		constexpr auto EventName = 0x3c; // FName
	}

	namespace n_URetainerBox {
		constexpr auto RenderOnInvalidation = 0x160; // bool
		constexpr auto RenderOnPhase = 0x161; // bool
		constexpr auto Phase = 0x164; // int32_t
		constexpr auto PhaseCount = 0x168; // int32_t
		constexpr auto EffectMaterial = 0x170; // UMaterialInterface*
		constexpr auto TextureParameter = 0x178; // FName
	}

	namespace n_UGameplayEvalSet_Fall_C {
		constexpr auto IsFall = 0x78; // FGameplayEval_NavArea
		constexpr auto IsNavLinkNext = 0xe8; // FGameplayEval_IsNavLinkNext
		constexpr auto IsAtFall = 0x130; // FGameplayEval_Distance
	}

	namespace n_UMaterialExpressionCustom {
		constexpr auto Code = 0x48; // FString
		constexpr auto OutputType = 0x58; // ECustomMaterialOutputType
		constexpr auto Description = 0x60; // FString
		constexpr auto Inputs = 0x70; // TArray<FCustomInput>
		constexpr auto AdditionalDefines = 0x80; // TArray<FCustomDefine>
		constexpr auto IncludeFilePaths = 0x90; // TArray<FString>
	}

	namespace n_APVPGameState {
		constexpr auto QueuedZombieRespawnState = 0x6a8; // TArray<FQueuedZombieRespawnState>
		constexpr auto LastQueueZombiePlayerTurns = 0x6b8; // TMap<APawn*, AGobiPlayerState*>
	}

	namespace n_USphereComponent {
		constexpr auto SphereRadius = 0x4c8; // float
	}

	namespace n_UHLODProxy {
		constexpr auto ProxyMeshes = 0x30; // TArray<FHLODProxyMesh>
	}

	namespace n_USoundNodeDelay {
		constexpr auto DelayMin = 0x60; // float
		constexpr auto DelayMax = 0x64; // float
	}

	namespace n_AItemPickupBase_BP_C {
		constexpr auto ProjectileMovement = 0x540; // UProjectileMovementComponent*
	}

	namespace n_UTRSListenerManagerSubsystem {
		constexpr auto Manager = 0x38; // UTRSListenerManager*
	}

	namespace n_UInAppPurchaseQueryCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UGameplayAction_Stumble {
		constexpr auto StumbleOthersDamageType = 0x2e8; // UGobiDamageType*
		constexpr auto StumbleOthersTagsRequirement = 0x2f0; // FGameplayTagQuery
		constexpr auto StumbleOthersRadius = 0x338; // float
	}

	namespace n_UPlayerMicIconUserWidget {
		constexpr auto TalkingTexture = 0x460; // UTexture2D*
		constexpr auto MutedTexture = 0x468; // UTexture2D*
		constexpr auto IconImage = 0x470; // UImage*
	}

	namespace n_UAISenseEvent_Hearing {
		constexpr auto Event = 0x30; // FAINoiseEvent
	}

	namespace n_UAITask_MoveTo {
		constexpr auto OnRequestFailed = 0x78; // FMulticastInlineDelegate
		constexpr auto OnMoveFinished = 0x88; // FMulticastInlineDelegate
		constexpr auto MoveRequest = 0x98; // FAIMoveRequest
	}

	namespace n_UAISpawnDeckGenerator {
		constexpr auto GenerationConditionEvalSet = 0x38; // UAISpawnConditionEvaluatorSet*
		constexpr auto ChildDeckBehavior = 0x40; // EChildDeckBehavior
		constexpr auto NumChildDecks = 0x44; // FIntPoint
		constexpr auto bAllowChildDeckReuse = 0x4c; // bool
		constexpr auto ChildSpawnDeckGenerators = 0x50; // TArray<UAISpawnDeckGenerator*>
		constexpr auto SpawnCardRules = 0x60; // TArray<FAISpawnCardRule>
		constexpr auto DeckTags = 0x70; // FGameplayTagContainer
		constexpr auto MaxCardsInPlay = 0x90; // int32_t
		constexpr auto DelayBetweenCardDraws = 0x94; // float
		constexpr auto DelayAfterDiscard = 0x98; // float
		constexpr auto DelayBeforeInitialSpawn = 0xa0; // TArray<FPerThreatLevelSpawnDelay>
		constexpr auto DelayBeforeWaveSpawn = 0xb0; // TArray<FPerThreatLevelSpawnDelay>
		constexpr auto DelayBetweenCueAndSpawn = 0xc0; // float
		constexpr auto NumHordeWaves = 0xc4; // FIntPoint
		constexpr auto CompleteAfterSpawningStoppedTime = 0xcc; // float
		constexpr auto bCompleteWhenAllCardsAreInPlayOrExhausted = 0xd0; // bool
		constexpr auto bCompleteWhenAllCardsAreExhausted = 0xd1; // bool
		constexpr auto bApplyModCards = 0xd2; // bool
		constexpr auto DeckWeight = 0xd4; // float
		constexpr auto bRetryEQSWithoutOverrideIfNoSpawnersFound = 0xd8; // bool
		constexpr auto bExcludeCardsInPlayFromGeneratedDeck = 0xd9; // bool
		constexpr auto SpawnHeatBlockStart = 0xdc; // FDifficultyFloat
	}

	namespace n_UMaterialExpressionRotator {
		constexpr auto Coordinate = 0x48; // FExpressionInput
		constexpr auto Time = 0x5c; // FExpressionInput
		constexpr auto CenterX = 0x70; // float
		constexpr auto CenterY = 0x74; // float
		constexpr auto Speed = 0x78; // float
		constexpr auto ConstCoordinate = 0x7c; // uint32_t
	}

	namespace n_UGameplayEffect {
		constexpr auto ChildEffectClasses = 0x38; // TArray<UGameplayEffect*>
		constexpr auto OnFinished = 0x48; // FMulticastInlineDelegate
		constexpr auto ChildEffects = 0x60; // TArray<UGameplayEffect*>
		constexpr auto ApplicationScheme = 0x70; // EGameplayEffectApplicationScheme
		constexpr auto bResetChildrenLifetimeOnLifetimeReset = 0x71; // bool
		constexpr auto bInheritEffectSourceFromTargetsRecentDamage = 0x72; // bool
		constexpr auto MaxStackOrInstanceCount = 0x74; // uint16_t
		constexpr auto bOnlyOneActivePerTarget = 0x76; // bool
		constexpr auto ResetLifetimeScheme = 0x77; // EGameplayEffectResetLifetimeScheme
		constexpr auto Duration = 0x78; // float
		constexpr auto MinDuration = 0x7c; // float
		constexpr auto MaxDuration = 0x80; // float
		constexpr auto GameplayTagsQuery = 0x88; // FGameplayTagQuery
		constexpr auto InstigatorTagsQuery = 0xd0; // FGameplayTagQuery
		constexpr auto PausingGameplayTags = 0x118; // FGameplayTagContainer
		constexpr auto RemoveEffectsOfTypeOnApplication = 0x138; // TArray<UGameplayEffect*>
		constexpr auto ApplicationEffectRemovalStackRules = 0x148; // EGameplayEffectStackRemovalRules
		constexpr auto ApplyEffectsOnRemoval = 0x150; // TArray<UGameplayEffect*>
		constexpr auto bRemoveOnInstigatorDestroyed = 0x160; // bool
		constexpr auto OwningGameplayEffectComponent = 0x168; // UGameplayEffectsComponent*
		constexpr auto EffectContext = 0x170; // FGameplayEffectContext
		constexpr auto TargetActor = 0x1f8; // AActor*
	}

	namespace n_AMicroManagerDefaults {
		constexpr auto MicroManagerDefaults = 0x2a0; // UMicroManagerDefaultsAsset*
	}

	namespace n_UGameplayAction_FakeDeath {
		constexpr auto FakeDeathMontageSet = 0x210; // UMontageSet*
		constexpr auto FakeDeathExitMontageMap = 0x218; // TMap<UAnimMontage*, UAnimMontage*>
		constexpr auto TimeToRemainDead = 0x268; // float
		constexpr auto HealthPctThreshold = 0x26c; // float
		constexpr auto FakeDeathChancePct = 0x270; // float
		constexpr auto HeroDetectDistance = 0x274; // float
		constexpr auto HeroDetectTagQuery = 0x278; // FGameplayTagQuery
		constexpr auto FleeDeltaDistance = 0x2c0; // float
		constexpr auto EnemyContextClass = 0x2c8; // UAnimContext_Enemy*
		constexpr auto AttachSkeletalMeshTag = 0x2d0; // FGameplayTag
		constexpr auto AttachSkeletalMeshBone = 0x2d8; // FName
		constexpr auto AttachRelativeRotation = 0x2e0; // FRotator
		constexpr auto AttachTargetEffects = 0x2f0; // TArray<UGameplayEffect*>
	}

	namespace n_UAnimEvalSet_IncapRevive_C {
		constexpr auto ReviveSource = 0xc0; // FGameplayEval_ReviveSource
	}

	namespace n_USpotLightComponent {
		constexpr auto InnerConeAngle = 0x3b8; // float
		constexpr auto OuterConeAngle = 0x3bc; // float
		constexpr auto LightShaftConeAngle = 0x3c0; // float
	}

	namespace n_AGeometryCacheActor {
		constexpr auto GeometryCacheComponent = 0x2a0; // UGeometryCacheComponent*
	}

	namespace n_USleeper_ABP_C {
		constexpr auto UberGraphFrame = 0x2f0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_TransitionResult_11 = 0x2f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_10 = 0x320; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_9 = 0x348; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_8 = 0x370; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0x398; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0x3c0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x3e8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x410; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x438; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x460; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0x488; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x4b0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_6 = 0x528; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x558; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_5 = 0x5d0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x600; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0x678; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x6a8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_3 = 0x720; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x750; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_2 = 0x7c8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer = 0x7f8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult = 0x870; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x8a0; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_Root = 0x950; // FAnimNode_Root
	}

	namespace n_ULevelCapture {
		constexpr auto bAutoStartCapture = 0x228; // bool
		constexpr auto PrerequisiteActorId = 0x234; // FGuid
	}

	namespace n_UParticleModuleCameraOffset {
		constexpr auto CameraOffset = 0x38; // FRawDistributionFloat
		constexpr auto bSpawnTimeOnly = 0x68; // char : 1
		constexpr auto UpdateMethod = 0x6c; // EParticleCameraOffsetUpdateMethod
	}

	namespace n_UInterpTrackInstSound {
		constexpr auto LastUpdatePosition = 0x30; // float
		constexpr auto PlayAudioComp = 0x38; // UAudioComponent*
	}

	namespace n_AGeometryCollectionDebugDrawActor {
		constexpr auto WarningMessage = 0x2a0; // FGeometryCollectionDebugDrawWarningMessage
		constexpr auto SelectedRigidBody = 0x2a8; // FGeometryCollectionDebugDrawActorSelectedRigidBody
		constexpr auto bDebugDrawWholeCollection = 0x2c0; // bool
		constexpr auto bDebugDrawHierarchy = 0x2c1; // bool
		constexpr auto bDebugDrawClustering = 0x2c2; // bool
		constexpr auto HideGeometry = 0x2c3; // EGeometryCollectionDebugDrawActorHideGeometry
		constexpr auto bShowRigidBodyId = 0x2c4; // bool
		constexpr auto bShowRigidBodyCollision = 0x2c5; // bool
		constexpr auto bCollisionAtOrigin = 0x2c6; // bool
		constexpr auto bShowRigidBodyTransform = 0x2c7; // bool
		constexpr auto bShowRigidBodyInertia = 0x2c8; // bool
		constexpr auto bShowRigidBodyVelocity = 0x2c9; // bool
		constexpr auto bShowRigidBodyForce = 0x2ca; // bool
		constexpr auto bShowRigidBodyInfos = 0x2cb; // bool
		constexpr auto bShowTransformIndex = 0x2cc; // bool
		constexpr auto bShowTransform = 0x2cd; // bool
		constexpr auto bShowParent = 0x2ce; // bool
		constexpr auto bShowLevel = 0x2cf; // bool
		constexpr auto bShowConnectivityEdges = 0x2d0; // bool
		constexpr auto bShowGeometryIndex = 0x2d1; // bool
		constexpr auto bShowGeometryTransform = 0x2d2; // bool
		constexpr auto bShowBoundingBox = 0x2d3; // bool
		constexpr auto bShowFaces = 0x2d4; // bool
		constexpr auto bShowFaceIndices = 0x2d5; // bool
		constexpr auto bShowFaceNormals = 0x2d6; // bool
		constexpr auto bShowSingleFace = 0x2d7; // bool
		constexpr auto SingleFaceIndex = 0x2d8; // int32_t
		constexpr auto bShowVertices = 0x2dc; // bool
		constexpr auto bShowVertexIndices = 0x2dd; // bool
		constexpr auto bShowVertexNormals = 0x2de; // bool
		constexpr auto bUseActiveVisualization = 0x2df; // bool
		constexpr auto PointThickness = 0x2e0; // float
		constexpr auto LineThickness = 0x2e4; // float
		constexpr auto bTextShadow = 0x2e8; // bool
		constexpr auto TextScale = 0x2ec; // float
		constexpr auto NormalScale = 0x2f0; // float
		constexpr auto AxisScale = 0x2f4; // float
		constexpr auto ArrowScale = 0x2f8; // float
		constexpr auto RigidBodyIdColor = 0x2fc; // FColor
		constexpr auto RigidBodyTransformScale = 0x300; // float
		constexpr auto RigidBodyCollisionColor = 0x304; // FColor
		constexpr auto RigidBodyInertiaColor = 0x308; // FColor
		constexpr auto RigidBodyVelocityColor = 0x30c; // FColor
		constexpr auto RigidBodyForceColor = 0x310; // FColor
		constexpr auto RigidBodyInfoColor = 0x314; // FColor
		constexpr auto TransformIndexColor = 0x318; // FColor
		constexpr auto TransformScale = 0x31c; // float
		constexpr auto LevelColor = 0x320; // FColor
		constexpr auto ParentColor = 0x324; // FColor
		constexpr auto ConnectivityEdgeThickness = 0x328; // float
		constexpr auto GeometryIndexColor = 0x32c; // FColor
		constexpr auto GeometryTransformScale = 0x330; // float
		constexpr auto BoundingBoxColor = 0x334; // FColor
		constexpr auto FaceColor = 0x338; // FColor
		constexpr auto FaceIndexColor = 0x33c; // FColor
		constexpr auto FaceNormalColor = 0x340; // FColor
		constexpr auto SingleFaceColor = 0x344; // FColor
		constexpr auto VertexColor = 0x348; // FColor
		constexpr auto VertexIndexColor = 0x34c; // FColor
		constexpr auto VertexNormalColor = 0x350; // FColor
		constexpr auto SpriteComponent = 0x358; // UBillboardComponent*
	}

	namespace n_AZombiePlayerStart {
		constexpr auto NavLocationComponent = 0x2f8; // UNavLocationComponent*
	}

	namespace n_UBTTask_RunBehavior {
		constexpr auto BehaviorAsset = 0x78; // UBehaviorTree*
	}

	namespace n_UAnimBoneCompressionCodec {
		constexpr auto Description = 0x30; // FString
	}

	namespace n_UUIScreen {
		constexpr auto OnClosed = 0x458; // FMulticastInlineDelegate
		constexpr auto OpenSoundOverride = 0x468; // UAkAudioEvent*
		constexpr auto CloseSoundOverride = 0x470; // UAkAudioEvent*
		constexpr auto MuteClickOverride = 0x478; // FSlateSound
		constexpr auto UnmuteClickOverride = 0x490; // FSlateSound
		constexpr auto bIsFullscreen = 0x4a8; // bool
		constexpr auto bDisableWorldRendering = 0x4a9; // bool
		constexpr auto bForceVsync = 0x4aa; // bool
		constexpr auto bHideWaypoints = 0x4ab; // bool
		constexpr auto bRequiresPlayerPawn = 0x4ac; // bool
		constexpr auto bPlayOpenSound = 0x4ad; // bool
		constexpr auto bPlayCloseSound = 0x4ae; // bool
		constexpr auto bIsPersistent = 0x4af; // bool
		constexpr auto bExecuteSplitscreenActions = 0x4b0; // bool
		constexpr auto bCenterCursorOnOpen = 0x4b1; // bool
		constexpr auto bTrapFocus = 0x4b2; // bool
		constexpr auto bAllowSystemSettings = 0x4b3; // bool
		constexpr auto ZOrder = 0x4b4; // int32_t
		constexpr auto ScreenName = 0x4b8; // FString
		constexpr auto bSuppressBackgroundAudio = 0x4c8; // bool
		constexpr auto Presence = 0x4c9; // EUIScreenPresence
	}

	namespace n_UMaterialExpressionThinTranslucentMaterialOutput {
		constexpr auto TransmittanceColor = 0x48; // FExpressionInput
	}

	namespace n_UEnvQueryGenerator_SmartActorGrid {
		constexpr auto SmartActorClass = 0x58; // AAISmartActorBase*
		constexpr auto SearchRadius = 0x60; // float
		constexpr auto SearchCenter = 0x68; // UEnvQueryContext*
	}

	namespace n_UHealOtherGameCoachLesson {
		constexpr auto SelectedItemTags = 0x460; // FGameplayTagQuery
		constexpr auto OutOfRangeText = 0x4a8; // FText
		constexpr auto InRangeText = 0x4c0; // FText
	}

	namespace n_UGizmoAxisRotationParameterSource {
		constexpr auto AxisSource = 0x50; // TScriptInterface<IGizmoAxisSource>
		constexpr auto TransformSource = 0x60; // TScriptInterface<IGizmoTransformSource>
		constexpr auto Angle = 0x70; // float
		constexpr auto LastChange = 0x74; // FGizmoFloatParameterChange
		constexpr auto CurRotationAxis = 0x7c; // FVector
		constexpr auto CurRotationOrigin = 0x88; // FVector
		constexpr auto InitialTransform = 0xa0; // FTransform
	}

	namespace n_USleeperNest_ABP_C {
		constexpr auto UberGraphFrame = 0x2f0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2f8; // FAnimNode_Root
		constexpr auto AnimGraphNode_TransitionResult_9 = 0x328; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_8 = 0x350; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0x378; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0x3a0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x3c8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x3f0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x418; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x440; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0x468; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x490; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_6 = 0x508; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x538; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_5 = 0x5b0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x5e0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0x658; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x688; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_3 = 0x700; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x730; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_2 = 0x7a8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer = 0x7d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult = 0x850; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x880; // FAnimNode_StateMachine
	}

	namespace n_UClusterBoilComponent {
		constexpr auto OnBoilDeath = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnGrew = 0xf8; // FMulticastInlineDelegate
		constexpr auto bShrunk = 0x108; // bool
		constexpr auto HealthComp = 0x138; // UHealthComponent*
		constexpr auto OwnerMesh = 0x140; // UStaticMeshComponent*
		constexpr auto ThreatComp = 0x148; // UThreatComponent*
		constexpr auto HitSound = 0x150; // UAkAudioEvent*
		constexpr auto DeathSound = 0x158; // UAkAudioEvent*
		constexpr auto DeathExplosion = 0x160; // UParticleSystem*
		constexpr auto ShrinkGrowCurve = 0x168; // UCurveFloat*
		constexpr auto GrowDelay = 0x170; // float
		constexpr auto BoilWorldScale = 0x174; // FVector
	}

	namespace n_UGobiButton {
		constexpr auto DefaultClickSound = 0x4c8; // UAkAudioEvent*
	}

	namespace n_UMaterialExpressionStaticSwitch {
		constexpr auto DefaultValue = 0x48; // char : 1
		constexpr auto A = 0x4c; // FExpressionInput
		constexpr auto B = 0x60; // FExpressionInput
		constexpr auto Value = 0x74; // FExpressionInput
	}

	namespace n_UPaperDollAttachmentDragUserWidget {
		constexpr auto ParentItem = 0x460; // AItem*
		constexpr auto AttachmentRowHandle = 0x468; // FDataTableRowHandle
	}

	namespace n_UUpdateHealthBarEnabledMod {
		constexpr auto bEnabled = 0xd0; // bool
	}

	namespace n_UItemDragPayload {
		constexpr auto Item = 0x30; // AItem*
	}

	namespace n_UAISenseConfig_TRSHearing {
		constexpr auto Implementation = 0x50; // UAISense_TRSHearing*
		constexpr auto HearingMode = 0x58; // ESenseHearingMode
		constexpr auto HearingRange = 0x5c; // float
		constexpr auto LoSHearingRange = 0x60; // float
		constexpr auto HearingDistPathingMult = 0x64; // float
		constexpr auto bUseLoSHearing = 0x68; // char : 1
		constexpr auto bAlertToInstigator = 0x6c; // bool
		constexpr auto DetectionByAffiliation = 0x70; // FAISenseAffiliationFilter
	}

	namespace n_UGameUserSettings {
		constexpr auto bUseVSync = 0x30; // bool
		constexpr auto bUseDynamicResolution = 0x31; // bool
		constexpr auto ResolutionSizeX = 0x88; // uint32_t
		constexpr auto ResolutionSizeY = 0x8c; // uint32_t
		constexpr auto LastUserConfirmedResolutionSizeX = 0x90; // uint32_t
		constexpr auto LastUserConfirmedResolutionSizeY = 0x94; // uint32_t
		constexpr auto bLastUserConfirmedHDREnabled = 0x98; // bool
		constexpr auto WindowPosX = 0x9c; // int32_t
		constexpr auto WindowPosY = 0xa0; // int32_t
		constexpr auto FullscreenMode = 0xa4; // int32_t
		constexpr auto LastConfirmedFullscreenMode = 0xa8; // int32_t
		constexpr auto PreferredFullscreenMode = 0xac; // int32_t
		constexpr auto Version = 0xb0; // uint32_t
		constexpr auto AudioQualityLevel = 0xb4; // int32_t
		constexpr auto LastConfirmedAudioQualityLevel = 0xb8; // int32_t
		constexpr auto FrameRateLimit = 0xbc; // float
		constexpr auto DesiredScreenWidth = 0xc4; // int32_t
		constexpr auto bUseDesiredScreenHeight = 0xc8; // bool
		constexpr auto DesiredScreenHeight = 0xcc; // int32_t
		constexpr auto LastUserConfirmedDesiredScreenWidth = 0xd0; // int32_t
		constexpr auto LastUserConfirmedDesiredScreenHeight = 0xd4; // int32_t
		constexpr auto LastRecommendedScreenWidth = 0xd8; // float
		constexpr auto LastRecommendedScreenHeight = 0xdc; // float
		constexpr auto LastCPUBenchmarkResult = 0xe0; // float
		constexpr auto LastGPUBenchmarkResult = 0xe4; // float
		constexpr auto LastCPUBenchmarkSteps = 0xe8; // TArray<float>
		constexpr auto LastGPUBenchmarkSteps = 0xf8; // TArray<float>
		constexpr auto LastGPUBenchmarkMultiplier = 0x108; // float
		constexpr auto bUseHDRDisplayOutput = 0x10c; // bool
		constexpr auto HDRDisplayOutputNits = 0x110; // int32_t
		constexpr auto OnGameUserSettingsUINeedsUpdate = 0x138; // FMulticastInlineDelegate
	}

	namespace n_UBruteAnimInstance {
		constexpr auto BruteAnimState = 0x7f8; // FBruteAnimState
	}

	namespace n_UTweenVector2D {
		constexpr auto OnTweenStart = 0xb0; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0xd0; // FMulticastInlineDelegate
	}

	namespace n_UGameplayTagsManager {
		constexpr auto TagSources = 0xc8; // TArray<FGameplayTagSource>
		constexpr auto GameplayTagTables = 0x1b8; // TArray<UDataTable*>
	}

	namespace n_UGameplayTagsList {
		constexpr auto ConfigFileName = 0x30; // FString
		constexpr auto GameplayTagList = 0x40; // TArray<FGameplayTagTableRow>
	}

	namespace n_UMovieSceneSubSection {
		constexpr auto Parameters = 0xe8; // FMovieSceneSectionParameters
		constexpr auto StartOffset = 0x10c; // float
		constexpr auto TimeScale = 0x110; // float
		constexpr auto PrerollTime = 0x114; // float
		constexpr auto SubSequence = 0x118; // UMovieSceneSequence*
		constexpr auto ActorToRecord = 0x120; // LazyObjectProperty
		constexpr auto TargetSequenceName = 0x140; // FString
		constexpr auto TargetPathToRecordTo = 0x150; // FDirectoryPath
	}

	namespace n_UBTService_SmartActor {
		constexpr auto SmartActorBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto RequiredSmartActorTags = 0xa0; // FGameplayTagQuery
		constexpr auto BlockingSmartActorTags = 0xe8; // FAIDataProviderGameplayTagContainerValue
		constexpr auto MaxSearchDistance = 0x138; // FAIDataProviderFloatValue
	}

	namespace n_UBTService_ClosestActorOfClass {
		constexpr auto SearchedActorClass = 0xa0; // AActor*
	}

	namespace n_AHeroCharacter {
		constexpr auto OnHeroWalkOffLedge = 0x1448; // FMulticastInlineDelegate
		constexpr auto AlertComponent = 0x1470; // UAlertComponent*
		constexpr auto OnHeroDefinitionChanged = 0x1478; // FMulticastInlineDelegate
		constexpr auto OnSafeRoomChanged = 0x1488; // FMulticastInlineDelegate
		constexpr auto CurSafeRoom = 0x1498; // ASafeRoom*
		constexpr auto BotPlaystyleConfigSet = 0x14a0; // UBotPlaystyleConfigCollection*
		constexpr auto IncappedEyeHeight = 0x1610; // float
		constexpr auto HeroDefinitionRowHandle = 0x1618; // FDataTableRowHandle
		constexpr auto CameraRootGameplayTag = 0x1638; // FGameplayTag
		constexpr auto FiringTags = 0x1640; // FGameplayTagContainer
		constexpr auto ItemObserverComponent = 0x1660; // UItemObserverComponent*
		constexpr auto HeroLedgeHangComponent = 0x1668; // UHeroLedgeHangComponent*
		constexpr auto FirstPersonMeshConfig = 0x1670; // FHeroFirstPersonMeshConfig
		constexpr auto bMainHero = 0x16c8; // bool
	}

	namespace n_UTransformProxy {
		constexpr auto bRotatePerObject = 0x78; // bool
		constexpr auto bSetPivotMode = 0x79; // bool
		constexpr auto SharedTransform = 0x90; // FTransform
		constexpr auto InitialSharedTransform = 0xc0; // FTransform
	}

	namespace n_AMolotovFlame {
		constexpr auto ParticleSystemComponent = 0x2a0; // UParticleSystemComponent*
		constexpr auto AudioSourceOffset = 0x2a8; // FVector
		constexpr auto AudioInitialDelay = 0x2b4; // float
		constexpr auto FireStartLoopSound = 0x2b8; // UAkAudioEvent*
		constexpr auto FireStopLoopSound = 0x2c0; // UAkAudioEvent*
	}

	namespace n_AServerStatReplicator {
		constexpr auto bUpdateStatNet = 0x2a0; // bool
		constexpr auto bOverwriteClientStats = 0x2a1; // bool
		constexpr auto Channels = 0x2a4; // uint32_t
		constexpr auto InRate = 0x2a8; // uint32_t
		constexpr auto OutRate = 0x2ac; // uint32_t
		constexpr auto MaxPacketOverhead = 0x2b4; // uint32_t
		constexpr auto InRateClientMax = 0x2b8; // uint32_t
		constexpr auto InRateClientMin = 0x2bc; // uint32_t
		constexpr auto InRateClientAvg = 0x2c0; // uint32_t
		constexpr auto InPacketsClientMax = 0x2c4; // uint32_t
		constexpr auto InPacketsClientMin = 0x2c8; // uint32_t
		constexpr auto InPacketsClientAvg = 0x2cc; // uint32_t
		constexpr auto OutRateClientMax = 0x2d0; // uint32_t
		constexpr auto OutRateClientMin = 0x2d4; // uint32_t
		constexpr auto OutRateClientAvg = 0x2d8; // uint32_t
		constexpr auto OutPacketsClientMax = 0x2dc; // uint32_t
		constexpr auto OutPacketsClientMin = 0x2e0; // uint32_t
		constexpr auto OutPacketsClientAvg = 0x2e4; // uint32_t
		constexpr auto NetNumClients = 0x2e8; // uint32_t
		constexpr auto InPackets = 0x2ec; // uint32_t
		constexpr auto OutPackets = 0x2f0; // uint32_t
		constexpr auto InBunches = 0x2f4; // uint32_t
		constexpr auto OutBunches = 0x2f8; // uint32_t
		constexpr auto OutLoss = 0x2fc; // uint32_t
		constexpr auto InLoss = 0x300; // uint32_t
		constexpr auto VoiceBytesSent = 0x304; // uint32_t
		constexpr auto VoiceBytesRecv = 0x308; // uint32_t
		constexpr auto VoicePacketsSent = 0x30c; // uint32_t
		constexpr auto VoicePacketsRecv = 0x310; // uint32_t
		constexpr auto PercentInVoice = 0x314; // uint32_t
		constexpr auto PercentOutVoice = 0x318; // uint32_t
		constexpr auto NumActorChannels = 0x31c; // uint32_t
		constexpr auto NumConsideredActors = 0x320; // uint32_t
		constexpr auto PrioritizedActors = 0x324; // uint32_t
		constexpr auto NumRelevantActors = 0x328; // uint32_t
		constexpr auto NumRelevantDeletedActors = 0x32c; // uint32_t
		constexpr auto NumReplicatedActorAttempts = 0x330; // uint32_t
		constexpr auto NumReplicatedActors = 0x334; // uint32_t
		constexpr auto NumActors = 0x338; // uint32_t
		constexpr auto NumNetActors = 0x33c; // uint32_t
		constexpr auto NumDormantActors = 0x340; // uint32_t
		constexpr auto NumInitiallyDormantActors = 0x344; // uint32_t
		constexpr auto NumNetGUIDsAckd = 0x348; // uint32_t
		constexpr auto NumNetGUIDsPending = 0x34c; // uint32_t
		constexpr auto NumNetGUIDsUnAckd = 0x350; // uint32_t
		constexpr auto ObjPathBytes = 0x354; // uint32_t
		constexpr auto NetGUIDOutRate = 0x358; // uint32_t
		constexpr auto NetGUIDInRate = 0x35c; // uint32_t
		constexpr auto NetSaturated = 0x360; // uint32_t
	}

	namespace n_UHeroLightComponent {
		constexpr auto OnHeroLightStatusChanged = 0xe8; // FMulticastInlineDelegate
		constexpr auto bLightStatus = 0xf8; // bool
		constexpr auto FlashLightBPs = 0x100; // AActor* [0x6]
		constexpr auto SmoothAlpha = 0x130; // float
		constexpr auto FPFlashlightPoseName = 0x134; // FName
		constexpr auto TPFlashlightPoseName = 0x148; // FName
		constexpr auto PlayerViewComponent = 0x158; // UPlayerViewComponent*
		constexpr auto FlickerModifiers = 0x1d8; // TArray<FLightParameterFlickerModifier>
		constexpr auto FlashLightConfig = 0x1e8; // TArray<FLightParameterConfig>
		constexpr auto FlashLightComponents = 0x1f8; // TArray<USpotLightComponent*>
	}

	namespace n_UMorphTarget {
		constexpr auto BaseSkelMesh = 0x30; // USkeletalMesh*
	}

	namespace n_UAkXboxOneGDKInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettings
		constexpr auto ApuHeapSettings = 0x90; // FAkXboxOneApuHeapInitializationSettings
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xc0; // FAkXboxOneAdvancedInitializationSettings
		constexpr auto TRSSettings = 0xfc; // FAkTRSPerPlatformSettings
	}

	namespace n_UWeakSpotsComponent {
		constexpr auto OnWeakSpotHealthChanged = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnWeakSpotAttachmentDestroyed = 0x100; // FMulticastInlineDelegate
		constexpr auto bUseWeakspotsForTargetLineOfSightTests = 0x110; // bool
		constexpr auto NonCharacterHitSound = 0x118; // UAkAudioEvent*
		constexpr auto WeakSpotsTuning = 0x120; // FWeakSpotsTuning
		constexpr auto InitialWeakSpotAttachments = 0x148; // TArray<FWeakSpotAttachment>
		constexpr auto WeakSpotSurfaces = 0x158; // TArray<FWeakSpotSurface>
		constexpr auto WeakSpotAttachments = 0x178; // TArray<FWeakSpotAttachment>
		constexpr auto CachedWeakSpotAttachments = 0x188; // TArray<FWeakSpotAttachment>
		constexpr auto MaxRecentHitTags = 0x1d4; // int32_t
		constexpr auto bDestroyWeakSpotsOnDeath = 0x1d8; // bool
		constexpr auto bWeakspotsUseAttachParentBound = 0x1d9; // bool
	}

	namespace n_UAnimEvalSet_Shared_Alerted_C {
		constexpr auto AngleToAlert = 0xc0; // FGameplayEval_Angle
		constexpr auto DamageType = 0x120; // FGameplayEval_DamageType
		constexpr auto RandomChance = 0x1e0; // FGameplayEval_RandomChance
	}

	namespace n_UAkWwiseTreeSelector {
		constexpr auto OnSelectionChanged = 0x148; // FMulticastInlineDelegate
		constexpr auto OnItemDragged = 0x158; // FMulticastInlineDelegate
	}

	namespace n_UMicroManagerDefaultsAsset {
		constexpr auto Defaults = 0x38; // TArray<FMicroManagerDefault>
	}

	namespace n_UGameplayContext_LeapShortcut {
		constexpr auto MinShortCuttingDistance = 0x70; // float
		constexpr auto MaxShortCuttingDistance = 0x74; // float
		constexpr auto ArcParam = 0x78; // float
		constexpr auto ProjectileParams = 0x80; // FPredictProjectilePathParams
	}

	namespace n_UBTDecorator_CompareDistance {
		constexpr auto StartKey = 0x70; // FBlackboardKeySelector
		constexpr auto EndKey = 0x98; // FBlackboardKeySelector
		constexpr auto Operation = 0xc0; // EDistanceOperation
		constexpr auto Distance = 0xc8; // FAIDataProviderFloatValue
		constexpr auto Offset = 0x100; // FAIDataProviderFloatValue
		constexpr auto OffsetOperation = 0x138; // EOffsetOperation
		constexpr auto FlowControlDelay = 0x13c; // float
	}

	namespace n_URagdollComponent {
		constexpr auto OnSetToRagdoll = 0x100; // FMulticastInlineDelegate
		constexpr auto OnUnsetFromRagdoll = 0x128; // FMulticastInlineDelegate
		constexpr auto VFXCorpseActorType = 0x140; // AVFXCorpse*
		constexpr auto BloodPoolDecalDef = 0x148; // UDecalDefinition*
		constexpr auto DissolveAudioEvent = 0x150; // UAkAudioEvent*
		constexpr auto MeshTag = 0x158; // FName
		constexpr auto bPhysicalizeDeathAnimations = 0x160; // bool
		constexpr auto PhysicalizeDeathTagQuery = 0x168; // FGameplayTagQuery
		constexpr auto PhysicalAnimProfile = 0x1b0; // FName
		constexpr auto PhysicalizeBoneName = 0x1b8; // FName
		constexpr auto ReplicatedRagdollData = 0x1e8; // FRagdollReplicatedData
		constexpr auto Water = 0x218; // FRagdollWaterData
		constexpr auto bHasBegunPhysicalizedDeath = 0x258; // bool
	}

	namespace n_UPhysicsSettings {
		constexpr auto DefaultGravityZ = 0x40; // float
		constexpr auto DefaultTerminalVelocity = 0x44; // float
		constexpr auto DefaultFluidFriction = 0x48; // float
		constexpr auto SimulateScratchMemorySize = 0x4c; // int32_t
		constexpr auto RagdollAggregateThreshold = 0x50; // int32_t
		constexpr auto TriangleMeshTriangleMinAreaThreshold = 0x54; // float
		constexpr auto bEnableShapeSharing = 0x58; // bool
		constexpr auto bEnablePCM = 0x59; // bool
		constexpr auto bEnableStabilization = 0x5a; // bool
		constexpr auto bWarnMissingLocks = 0x5b; // bool
		constexpr auto bEnable2DPhysics = 0x5c; // bool
		constexpr auto PhysicErrorCorrection = 0x60; // FRigidBodyErrorCorrection
		constexpr auto LockedAxis = 0x94; // ESettingsLockedAxis
		constexpr auto DefaultDegreesOfFreedom = 0x95; // ESettingsDOF
		constexpr auto BounceThresholdVelocity = 0x98; // float
		constexpr auto FrictionCombineMode = 0x9c; // EFrictionCombineMode
		constexpr auto RestitutionCombineMode = 0x9d; // EFrictionCombineMode
		constexpr auto MaxAngularVelocity = 0xa0; // float
		constexpr auto MaxDepenetrationVelocity = 0xa4; // float
		constexpr auto ContactOffsetMultiplier = 0xa8; // float
		constexpr auto MinContactOffset = 0xac; // float
		constexpr auto MaxContactOffset = 0xb0; // float
		constexpr auto bSimulateSkeletalMeshOnDedicatedServer = 0xb4; // bool
		constexpr auto DefaultShapeComplexity = 0xb5; // ECollisionTraceFlag
		constexpr auto bDefaultHasComplexCollision = 0xb6; // bool
		constexpr auto bSuppressFaceRemapTable = 0xb7; // bool
		constexpr auto bSupportUVFromHitResults = 0xb8; // bool
		constexpr auto bDisableActiveActors = 0xb9; // bool
		constexpr auto bDisableKinematicStaticPairs = 0xba; // bool
		constexpr auto bDisableKinematicKinematicPairs = 0xbb; // bool
		constexpr auto bDisableCCD = 0xbc; // bool
		constexpr auto bEnableEnhancedDeterminism = 0xbd; // bool
		constexpr auto AnimPhysicsMinDeltaTime = 0xc0; // float
		constexpr auto bSimulateAnimPhysicsAfterReset = 0xc4; // bool
		constexpr auto MaxPhysicsDeltaTime = 0xc8; // float
		constexpr auto bSubstepping = 0xcc; // bool
		constexpr auto bSubsteppingAsync = 0xcd; // bool
		constexpr auto MaxSubstepDeltaTime = 0xd0; // float
		constexpr auto MaxSubsteps = 0xd4; // int32_t
		constexpr auto SyncSceneSmoothingFactor = 0xd8; // float
		constexpr auto InitialAverageFrameRate = 0xdc; // float
		constexpr auto PhysXTreeRebuildRate = 0xe0; // int32_t
		constexpr auto PhysicalSurfaces = 0xe8; // TArray<FPhysicalSurfaceName>
		constexpr auto DefaultBroadphaseSettings = 0xf8; // FBroadphaseSettings
		constexpr auto ChaosSettings = 0x138; // FChaosPhysicsSettings
	}

	namespace n_UMaterialExpressionGetMaterialAttributes {
		constexpr auto MaterialAttributes = 0x48; // FMaterialAttributesInput
		constexpr auto AttributeGetTypes = 0x60; // TArray<FGuid>
	}

	namespace n_UPawnMovementComponent {
		constexpr auto PawnOwner = 0x168; // APawn*
	}

	namespace n_UPlayerMovementDebugComponent {
		constexpr auto GobiPlayerMovementComponent = 0xe8; // UGobiPlayerMovementComponent*
		constexpr auto CharacterOwner = 0xf0; // ACharacter*
	}

	namespace n_UMatchmakingAnalytics {
		constexpr auto Matchmaking = 0x280; // UMatchmaking*
	}

	namespace n_UEditableGameplayTagQueryExpression_AnyTagsMatch {
		constexpr auto Tags = 0x30; // FGameplayTagContainer
	}

	namespace n_UEngine {
		constexpr auto TinyFont = 0x38; // UFont*
		constexpr auto TinyFontName = 0x40; // FSoftObjectPath
		constexpr auto SmallFont = 0x58; // UFont*
		constexpr auto SmallFontName = 0x60; // FSoftObjectPath
		constexpr auto MediumFont = 0x78; // UFont*
		constexpr auto MediumFontName = 0x80; // FSoftObjectPath
		constexpr auto LargeFont = 0x98; // UFont*
		constexpr auto LargeFontName = 0xa0; // FSoftObjectPath
		constexpr auto SubtitleFont = 0xb8; // UFont*
		constexpr auto SubtitleFontName = 0xc0; // FSoftObjectPath
		constexpr auto AdditionalFonts = 0xd8; // TArray<UFont*>
		constexpr auto AdditionalFontNames = 0xf0; // TArray<FString>
		constexpr auto ConsoleClass = 0x100; // UConsole*
		constexpr auto ConsoleClassName = 0x108; // FSoftClassPath
		constexpr auto GameViewportClientClass = 0x120; // UGameViewportClient*
		constexpr auto GameViewportClientClassName = 0x128; // FSoftClassPath
		constexpr auto LocalPlayerClass = 0x140; // ULocalPlayer*
		constexpr auto LocalPlayerClassName = 0x148; // FSoftClassPath
		constexpr auto WorldSettingsClass = 0x160; // AWorldSettings*
		constexpr auto WorldSettingsClassName = 0x168; // FSoftClassPath
		constexpr auto NavigationSystemClassName = 0x180; // FSoftClassPath
		constexpr auto NavigationSystemClass = 0x198; // UNavigationSystemBase*
		constexpr auto NavigationSystemConfigClassName = 0x1a0; // FSoftClassPath
		constexpr auto NavigationSystemConfigClass = 0x1b8; // UNavigationSystemConfig*
		constexpr auto AvoidanceManagerClassName = 0x1c0; // FSoftClassPath
		constexpr auto AvoidanceManagerClass = 0x1d8; // UAvoidanceManager*
		constexpr auto PhysicsCollisionHandlerClass = 0x1e0; // UPhysicsCollisionHandler*
		constexpr auto PhysicsCollisionHandlerClassName = 0x1e8; // FSoftClassPath
		constexpr auto GameUserSettingsClassName = 0x200; // FSoftClassPath
		constexpr auto GameUserSettingsClass = 0x218; // UGameUserSettings*
		constexpr auto AIControllerClassName = 0x220; // FSoftClassPath
		constexpr auto GameUserSettings = 0x238; // UGameUserSettings*
		constexpr auto LevelScriptActorClass = 0x240; // ALevelScriptActor*
		constexpr auto LevelScriptActorClassName = 0x248; // FSoftClassPath
		constexpr auto DefaultBlueprintBaseClassName = 0x260; // FSoftClassPath
		constexpr auto GameSingletonClassName = 0x278; // FSoftClassPath
		constexpr auto GameSingleton = 0x290; // UObject*
		constexpr auto AssetManagerClassName = 0x298; // FSoftClassPath
		constexpr auto AssetManager = 0x2b0; // UAssetManager*
		constexpr auto DefaultTexture = 0x2b8; // UTexture2D*
		constexpr auto DefaultTextureName = 0x2c0; // FSoftObjectPath
		constexpr auto DefaultDiffuseTexture = 0x2d8; // UTexture*
		constexpr auto DefaultDiffuseTextureName = 0x2e0; // FSoftObjectPath
		constexpr auto DefaultBSPVertexTexture = 0x2f8; // UTexture2D*
		constexpr auto DefaultBSPVertexTextureName = 0x300; // FSoftObjectPath
		constexpr auto HighFrequencyNoiseTexture = 0x318; // UTexture2D*
		constexpr auto HighFrequencyNoiseTextureName = 0x320; // FSoftObjectPath
		constexpr auto DefaultBokehTexture = 0x338; // UTexture2D*
		constexpr auto DefaultBokehTextureName = 0x340; // FSoftObjectPath
		constexpr auto DefaultBloomKernelTexture = 0x358; // UTexture2D*
		constexpr auto DefaultBloomKernelTextureName = 0x360; // FSoftObjectPath
		constexpr auto WireframeMaterial = 0x378; // UMaterial*
		constexpr auto WireframeMaterialName = 0x380; // FString
		constexpr auto DebugMeshMaterial = 0x390; // UMaterial*
		constexpr auto DebugMeshMaterialName = 0x398; // FSoftObjectPath
		constexpr auto EmissiveMeshMaterial = 0x3b0; // UMaterial*
		constexpr auto EmissiveMeshMaterialName = 0x3b8; // FSoftObjectPath
		constexpr auto DefaultLineBatchComponentTranslucentSortPriority = 0x3d0; // int32_t
		constexpr auto LevelColorationLitMaterial = 0x3d8; // UMaterial*
		constexpr auto LevelColorationLitMaterialName = 0x3e0; // FString
		constexpr auto LevelColorationUnlitMaterial = 0x3f0; // UMaterial*
		constexpr auto LevelColorationUnlitMaterialName = 0x3f8; // FString
		constexpr auto LightingTexelDensityMaterial = 0x408; // UMaterial*
		constexpr auto LightingTexelDensityName = 0x410; // FString
		constexpr auto ShadedLevelColorationLitMaterial = 0x420; // UMaterial*
		constexpr auto ShadedLevelColorationLitMaterialName = 0x428; // FString
		constexpr auto ShadedLevelColorationUnlitMaterial = 0x438; // UMaterial*
		constexpr auto ShadedLevelColorationUnlitMaterialName = 0x440; // FString
		constexpr auto RemoveSurfaceMaterial = 0x450; // UMaterial*
		constexpr auto RemoveSurfaceMaterialName = 0x458; // FSoftObjectPath
		constexpr auto VertexColorMaterial = 0x470; // UMaterial*
		constexpr auto VertexColorMaterialName = 0x478; // FString
		constexpr auto VertexColorViewModeMaterial_ColorOnly = 0x488; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_ColorOnly = 0x490; // FString
		constexpr auto VertexColorViewModeMaterial_AlphaAsColor = 0x4a0; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_AlphaAsColor = 0x4a8; // FString
		constexpr auto VertexColorViewModeMaterial_RedOnly = 0x4b8; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_RedOnly = 0x4c0; // FString
		constexpr auto VertexColorViewModeMaterial_GreenOnly = 0x4d0; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_GreenOnly = 0x4d8; // FString
		constexpr auto VertexColorViewModeMaterial_BlueOnly = 0x4e8; // UMaterial*
		constexpr auto VertexColorViewModeMaterialName_BlueOnly = 0x4f0; // FString
		constexpr auto DebugEditorMaterialName = 0x500; // FSoftObjectPath
		constexpr auto ConstraintLimitMaterial = 0x518; // UMaterial*
		constexpr auto ConstraintLimitMaterialX = 0x520; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialXAxis = 0x528; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialY = 0x530; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialYAxis = 0x538; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialZ = 0x540; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialZAxis = 0x548; // UMaterialInstanceDynamic*
		constexpr auto ConstraintLimitMaterialPrismatic = 0x550; // UMaterialInstanceDynamic*
		constexpr auto InvalidLightmapSettingsMaterial = 0x558; // UMaterial*
		constexpr auto InvalidLightmapSettingsMaterialName = 0x560; // FSoftObjectPath
		constexpr auto PreviewShadowsIndicatorMaterial = 0x578; // UMaterial*
		constexpr auto PreviewShadowsIndicatorMaterialName = 0x580; // FSoftObjectPath
		constexpr auto ArrowMaterial = 0x598; // UMaterial*
		constexpr auto ArrowMaterialYellow = 0x5a0; // UMaterialInstanceDynamic*
		constexpr auto ArrowMaterialName = 0x5a8; // FSoftObjectPath
		constexpr auto LightingOnlyBrightness = 0x5c0; // FLinearColor
		constexpr auto ShaderComplexityColors = 0x5d0; // TArray<FLinearColor>
		constexpr auto QuadComplexityColors = 0x5e0; // TArray<FLinearColor>
		constexpr auto LightComplexityColors = 0x5f0; // TArray<FLinearColor>
		constexpr auto StationaryLightOverlapColors = 0x600; // TArray<FLinearColor>
		constexpr auto LODColorationColors = 0x610; // TArray<FLinearColor>
		constexpr auto HLODColorationColors = 0x620; // TArray<FLinearColor>
		constexpr auto StreamingAccuracyColors = 0x630; // TArray<FLinearColor>
		constexpr auto MaxPixelShaderAdditiveComplexityCount = 0x640; // float
		constexpr auto MaxES3PixelShaderAdditiveComplexityCount = 0x644; // float
		constexpr auto MinLightMapDensity = 0x648; // float
		constexpr auto IdealLightMapDensity = 0x64c; // float
		constexpr auto MaxLightMapDensity = 0x650; // float
		constexpr auto bRenderLightMapDensityGrayscale = 0x654; // char : 1
		constexpr auto RenderLightMapDensityGrayscaleScale = 0x658; // float
		constexpr auto RenderLightMapDensityColorScale = 0x65c; // float
		constexpr auto LightMapDensityVertexMappedColor = 0x660; // FLinearColor
		constexpr auto LightMapDensitySelectedColor = 0x670; // FLinearColor
		constexpr auto StatColorMappings = 0x680; // TArray<FStatColorMapping>
		constexpr auto DefaultPhysMaterial = 0x690; // UPhysicalMaterial*
		constexpr auto DefaultPhysMaterialName = 0x698; // FSoftObjectPath
		constexpr auto ActiveGameNameRedirects = 0x6b0; // TArray<FGameNameRedirect>
		constexpr auto ActiveClassRedirects = 0x6c0; // TArray<FClassRedirect>
		constexpr auto ActivePluginRedirects = 0x6d0; // TArray<FPluginRedirect>
		constexpr auto ActiveStructRedirects = 0x6e0; // TArray<FStructRedirect>
		constexpr auto PreIntegratedSkinBRDFTexture = 0x6f0; // UTexture2D*
		constexpr auto PreIntegratedSkinBRDFTextureName = 0x6f8; // FSoftObjectPath
		constexpr auto BlueNoiseTexture = 0x710; // UTexture2D*
		constexpr auto BlueNoiseTextureName = 0x718; // FSoftObjectPath
		constexpr auto MiniFontTexture = 0x730; // UTexture2D*
		constexpr auto MiniFontTextureName = 0x738; // FSoftObjectPath
		constexpr auto WeightMapPlaceholderTexture = 0x750; // UTexture*
		constexpr auto WeightMapPlaceholderTextureName = 0x758; // FSoftObjectPath
		constexpr auto LightMapDensityTexture = 0x770; // UTexture2D*
		constexpr auto LightMapDensityTextureName = 0x778; // FSoftObjectPath
		constexpr auto GameViewport = 0x798; // UGameViewportClient*
		constexpr auto DeferredCommands = 0x7a0; // TArray<FString>
		constexpr auto TickCycles = 0x7b0; // int32_t
		constexpr auto GameCycles = 0x7b4; // int32_t
		constexpr auto ClientCycles = 0x7b8; // int32_t
		constexpr auto NearClipPlane = 0x7bc; // float
		constexpr auto bHardwareSurveyEnabled = 0x7c0; // char : 1
		constexpr auto bSubtitlesEnabled = 0x7c0; // char : 1
		constexpr auto bSubtitlesForcedOff = 0x7c0; // char : 1
		constexpr auto MaximumLoopIterationCount = 0x7c4; // int32_t
		constexpr auto bCanBlueprintsTickByDefault = 0x7c8; // char : 1
		constexpr auto bOptimizeAnimBlueprintMemberVariableAccess = 0x7c8; // char : 1
		constexpr auto bAllowMultiThreadedAnimationUpdate = 0x7c8; // char : 1
		constexpr auto bEnableEditorPSysRealtimeLOD = 0x7c8; // char : 1
		constexpr auto bSmoothFrameRate = 0x7c8; // char : 1
		constexpr auto bUseFixedFrameRate = 0x7c8; // char : 1
		constexpr auto FixedFrameRate = 0x7cc; // float
		constexpr auto SmoothedFrameRateRange = 0x7d0; // FFloatRange
		constexpr auto CustomTimeStep = 0x7e0; // UEngineCustomTimeStep*
		constexpr auto CustomTimeStepClassName = 0x808; // FSoftClassPath
		constexpr auto TimecodeProvider = 0x820; // UTimecodeProvider*
		constexpr auto TimecodeProviderClassName = 0x848; // FSoftClassPath
		constexpr auto bGenerateDefaultTimecode = 0x860; // bool
		constexpr auto GenerateDefaultTimecodeFrameRate = 0x864; // FFrameRate
		constexpr auto GenerateDefaultTimecodeFrameDelay = 0x86c; // float
		constexpr auto bCheckForMultiplePawnsSpawnedInAFrame = 0x870; // char : 1
		constexpr auto NumPawnsAllowedToBeSpawnedInAFrame = 0x874; // int32_t
		constexpr auto bShouldGenerateLowQualityLightmaps = 0x878; // char : 1
		constexpr auto C_WorldBox = 0x87c; // FColor
		constexpr auto C_BrushWire = 0x880; // FColor
		constexpr auto C_AddWire = 0x884; // FColor
		constexpr auto C_SubtractWire = 0x888; // FColor
		constexpr auto C_SemiSolidWire = 0x88c; // FColor
		constexpr auto C_NonSolidWire = 0x890; // FColor
		constexpr auto C_WireBackground = 0x894; // FColor
		constexpr auto C_ScaleBoxHi = 0x898; // FColor
		constexpr auto C_VolumeCollision = 0x89c; // FColor
		constexpr auto C_BSPCollision = 0x8a0; // FColor
		constexpr auto C_OrthoBackground = 0x8a4; // FColor
		constexpr auto C_Volume = 0x8a8; // FColor
		constexpr auto C_BrushShape = 0x8ac; // FColor
		constexpr auto StreamingDistanceFactor = 0x8b0; // float
		constexpr auto GameScreenshotSaveDirectory = 0x8b8; // FDirectoryPath
		constexpr auto TransitionType = 0x8c8; // ETransitionType
		constexpr auto TransitionDescription = 0x8d0; // FString
		constexpr auto TransitionGameMode = 0x8e0; // FString
		constexpr auto MeshLODRange = 0x8f0; // float
		constexpr auto bAllowMatureLanguage = 0x8f4; // char : 1
		constexpr auto CameraRotationThreshold = 0x8f8; // float
		constexpr auto CameraTranslationThreshold = 0x8fc; // float
		constexpr auto PrimitiveProbablyVisibleTime = 0x900; // float
		constexpr auto MaxOcclusionPixelsFraction = 0x904; // float
		constexpr auto bPauseOnLossOfFocus = 0x908; // char : 1
		constexpr auto MaxParticleResize = 0x90c; // int32_t
		constexpr auto MaxParticleResizeWarn = 0x910; // int32_t
		constexpr auto PendingDroppedNotes = 0x918; // TArray<FDropNoteInfo>
		constexpr auto NetClientTicksPerSecond = 0x928; // float
		constexpr auto DisplayGamma = 0x92c; // float
		constexpr auto MinDesiredFrameRate = 0x930; // float
		constexpr auto DefaultSelectedMaterialColor = 0x934; // FLinearColor
		constexpr auto SelectedMaterialColor = 0x944; // FLinearColor
		constexpr auto SelectionOutlineColor = 0x954; // FLinearColor
		constexpr auto SubduedSelectionOutlineColor = 0x964; // FLinearColor
		constexpr auto SelectedMaterialColorOverride = 0x974; // FLinearColor
		constexpr auto bIsOverridingSelectedColor = 0x984; // bool
		constexpr auto bEnableOnScreenDebugMessages = 0x988; // char : 1
		constexpr auto bEnableOnScreenDebugMessagesDisplay = 0x988; // char : 1
		constexpr auto bSuppressMapWarnings = 0x988; // char : 1
		constexpr auto bDisableAILogging = 0x988; // char : 1
		constexpr auto bEnableVisualLogRecordingOnStart = 0x98c; // uint32_t
		constexpr auto ScreenSaverInhibitorSemaphore = 0x994; // int32_t
		constexpr auto bLockReadOnlyLevels = 0x998; // char : 1
		constexpr auto ParticleEventManagerClassPath = 0x9a0; // FString
		constexpr auto SelectionHighlightIntensity = 0x9b0; // float
		constexpr auto BSPSelectionHighlightIntensity = 0x9b4; // float
		constexpr auto SelectionHighlightIntensityBillboards = 0x9b8; // float
		constexpr auto NetDriverDefinitions = 0xc18; // TArray<FNetDriverDefinition>
		constexpr auto ServerActors = 0xc28; // TArray<FString>
		constexpr auto RuntimeServerActors = 0xc38; // TArray<FString>
		constexpr auto NetErrorLogInterval = 0xc48; // float
		constexpr auto bStartedLoadMapMovie = 0xc4c; // char : 1
		constexpr auto NextWorldContextHandle = 0xc68; // int32_t
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureSampleParameter {
		constexpr auto ParameterName = 0x98; // FName
		constexpr auto ExpressionGUID = 0xa0; // FGuid
		constexpr auto Group = 0xb0; // FName
	}

	namespace n_UHUDMissionEntryUserWidget {
		constexpr auto ObjectiveWidget = 0x458; // UHUDMissionObjectiveEntryUserWidget*
		constexpr auto MissionHandle = 0x460; // FDataTableRowHandle
	}

	namespace n_UAnimNotify_SetPhysicalBlend {
		constexpr auto BoneName = 0x40; // FName
		constexpr auto CollisionProfileName = 0x48; // FName
		constexpr auto PhysicsBlendWeight = 0x50; // float
		constexpr auto bSkipCustomPhysicsType = 0x54; // bool
	}

	namespace n_UUserDefinedImageCaptureProtocol {
		constexpr auto Format = 0xe0; // EDesiredImageFormat
		constexpr auto bEnableCompression = 0xe1; // bool
		constexpr auto CompressionQuality = 0xe4; // int32_t
	}

	namespace n_UMaterialExpressionCrossProduct {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
	}

	namespace n_UPlayerMoneyUserWidget {
		constexpr auto bAnimate = 0x458; // bool
		constexpr auto bAlwaysVisible = 0x459; // bool
		constexpr auto AnimStartCoordinates = 0x45c; // FVector2D
		constexpr auto CenterToDest = 0x468; // FGobiEasingAnim
		constexpr auto CountAnim = 0x488; // FMoneyCountAnim
		constexpr auto PositiveMoneyLoopAudioEvent = 0x4b0; // UAkAudioEvent*
		constexpr auto PositiveMoneyLoopStopAudioEvent = 0x4b8; // UAkAudioEvent*
		constexpr auto NegativeMoneyLoopAudioEvent = 0x4c0; // UAkAudioEvent*
		constexpr auto NegativeMoneyLoopStopAudioEvent = 0x4c8; // UAkAudioEvent*
	}

	namespace n_UMovieSceneAkAudioEventSection {
		constexpr auto Event = 0x128; // UAkAudioEvent*
		constexpr auto RetriggerEvent = 0x130; // bool
		constexpr auto ScrubTailLengthMs = 0x134; // int32_t
		constexpr auto StopAtSectionEnd = 0x138; // bool
		constexpr auto EventName = 0x140; // FString
		constexpr auto MaxSourceDuration = 0x170; // float
		constexpr auto MaxDurationSourceID = 0x178; // FString
	}

	namespace n_UMultiLineEditableText {
		constexpr auto Text = 0x168; // FText
		constexpr auto HintText = 0x180; // FText
		constexpr auto HintTextDelegate = 0x198; // FDelegate
		constexpr auto WidgetStyle = 0x1a8; // FTextBlockStyle
		constexpr auto bIsReadOnly = 0x448; // bool
		constexpr auto Font = 0x450; // FSlateFontInfo
		constexpr auto SelectAllTextWhenFocused = 0x4b0; // bool
		constexpr auto ClearTextSelectionOnFocusLoss = 0x4b1; // bool
		constexpr auto RevertTextOnEscape = 0x4b2; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0x4b3; // bool
		constexpr auto AllowContextMenu = 0x4b4; // bool
		constexpr auto VirtualKeyboardOptions = 0x4b5; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardDismissAction = 0x4b6; // EVirtualKeyboardDismissAction
		constexpr auto OnTextChanged = 0x4b8; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0x4c8; // FMulticastInlineDelegate
		constexpr auto bIsFocusedOnHover = 0x4d8; // bool
	}

	namespace n_UTimelineComponent {
		constexpr auto TheTimeline = 0xe8; // FTimeline
		constexpr auto bIgnoreTimeDilation = 0x180; // char : 1
	}

	namespace n_UCleanerNightmareAchievement {
		constexpr auto Maps = 0xb8; // TArray<FDataTableRowHandle>
		constexpr auto Cleaner = 0xc8; // FDataTableRowHandle
	}

	namespace n_UMissionOverviewTeamUserWidget {
		constexpr auto bEnemyTeam = 0x458; // bool
		constexpr auto WidgetMatchmakingTeam = 0x459; // EMatchmakingTeam
		constexpr auto TeamScore = 0x45c; // int32_t
	}

	namespace n_UAnimSharingInstance {
		constexpr auto RegisteredActors = 0x30; // TArray<AActor*>
		constexpr auto StateProcessor = 0xb0; // UAnimationSharingStateProcessor*
		constexpr auto UsedAnimationSequences = 0xf0; // TArray<UAnimSequence*>
		constexpr auto StateEnum = 0x110; // UEnum*
		constexpr auto SharingActor = 0x118; // AActor*
	}

	namespace n_UGeometryCacheComponent {
		constexpr auto GeometryCache = 0x528; // UGeometryCache*
		constexpr auto bRunning = 0x530; // bool
		constexpr auto bLooping = 0x531; // bool
		constexpr auto StartTimeOffset = 0x534; // float
		constexpr auto PlaybackSpeed = 0x538; // float
		constexpr auto NumTracks = 0x53c; // int32_t
		constexpr auto ElapsedTime = 0x540; // float
		constexpr auto Duration = 0x574; // float
		constexpr auto bManualTick = 0x578; // bool
	}

	namespace n_UMaterialExpressionCollectionParameter {
		constexpr auto Collection = 0x48; // UMaterialParameterCollection*
		constexpr auto ParameterName = 0x50; // FName
		constexpr auto ParameterId = 0x58; // FGuid
	}

	namespace n_UUniformVector {
		constexpr auto Magnitude = 0xe8; // float
		constexpr auto Direction = 0xec; // FVector
	}

	namespace n_UEnvQueryTest_GameplayTags {
		constexpr auto TagQueryToMatch = 0x208; // FGameplayTagQuery
		constexpr auto bUpdatedToUseQuery = 0x250; // bool
		constexpr auto TagsToMatch = 0x251; // EGameplayContainerMatchType
		constexpr auto GameplayTags = 0x258; // FGameplayTagContainer
	}

	namespace n_UFP_HeroAdd_Base_ABP_C {
		constexpr auto UberGraphFrame = 0x2c0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2c8; // FAnimNode_Root
		constexpr auto AnimGraphNode_SubInput = 0x2f8; // FAnimNode_LinkedInputPose
		constexpr auto AnimGraphNode_TransitionResult_31 = 0x370; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_30 = 0x398; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_29 = 0x3c0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_28 = 0x3e8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_27 = 0x410; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_26 = 0x438; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_25 = 0x460; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_24 = 0x488; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_23 = 0x4b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_UseCachedPose_20 = 0x4d8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_19 = 0x500; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_21 = 0x5c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_24 = 0x640; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_19 = 0x670; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_23 = 0x698; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_18 = 0x6c8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_18 = 0x6f0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_20 = 0x7b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_22 = 0x830; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_ApplyAdditive_17 = 0x860; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_UseCachedPose_17 = 0x928; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_19 = 0x950; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_21 = 0x9c8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_16 = 0x9f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_16 = 0xa20; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_18 = 0xae8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_20 = 0xb60; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_8 = 0xb90; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_4 = 0xc40; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_3 = 0xdd0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_2 = 0xf60; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace = 0x10f0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_TransitionResult_22 = 0x1280; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_21 = 0x12a8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_20 = 0x12d0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_19 = 0x12f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_StateResult_19 = 0x1320; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_15 = 0x1350; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_17 = 0x1378; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_15 = 0x13f0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_18 = 0x14b8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_14 = 0x14e8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_16 = 0x1510; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_14 = 0x1588; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_17 = 0x1650; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_7 = 0x1680; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_16 = 0x1730; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_15 = 0x1760; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_13 = 0x17d8; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_UseCachedPose_13 = 0x18a0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_14 = 0x18c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_12 = 0x1940; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_15 = 0x1a08; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_6 = 0x1a38; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_TransitionResult_18 = 0x1ae8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_17 = 0x1b10; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_UseCachedPose_12 = 0x1b38; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_14 = 0x1b60; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_11 = 0x1b90; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer_13 = 0x1bb8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_11 = 0x1c30; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_12 = 0x1cf8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_10 = 0x1d70; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_13 = 0x1e38; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_5 = 0x1e68; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_SaveCachedPose_6 = 0x1f18; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_5 = 0x1fd0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TransitionResult_16 = 0x2088; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_15 = 0x20b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_14 = 0x20d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_13 = 0x2100; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_12 = 0x2128; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_11 = 0x2150; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_UseCachedPose_10 = 0x2178; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_12 = 0x21a0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_11 = 0x21d0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_9 = 0x2248; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_UseCachedPose_9 = 0x2310; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_11 = 0x2338; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_10 = 0x2368; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_8 = 0x23e0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_UseCachedPose_8 = 0x24a8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_10 = 0x24d0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_9 = 0x2500; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_7 = 0x2578; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0x2640; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_9 = 0x2668; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_4 = 0x2698; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_TransitionResult_10 = 0x2748; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_9 = 0x2770; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_StateResult_8 = 0x2798; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_8 = 0x27c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_TwoWayBlend_2 = 0x2840; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_7 = 0x2908; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_7 = 0x2980; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_3 = 0x29b0; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_ApplyAdditive_6 = 0x2a60; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SaveCachedPose_4 = 0x2b28; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TransitionResult_8 = 0x2be0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0x2c08; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0x2c30; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x2c58; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x2c80; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x2ca8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0x2cd0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_6 = 0x2cf8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0x2d28; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_5 = 0x2d50; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x2e18; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_5 = 0x2e90; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x2ec0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_4 = 0x2ee8; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x2fb0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0x3028; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x3058; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_3 = 0x3080; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_2 = 0x30b0; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x3160; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_3 = 0x31d8; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_TwoWayBlend = 0x32a0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x3368; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SaveCachedPose_3 = 0x33e0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x3498; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose = 0x3550; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x3608; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0x3630; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_ApplyAdditive_2 = 0x3658; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x3720; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer = 0x3798; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x3810; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive = 0x3838; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_2 = 0x3900; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose = 0x3930; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult = 0x3958; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x3988; // FAnimNode_StateMachine
		constexpr auto WeaponAnimState = 0x3a38; // FWeaponAnimState
		constexpr auto GobiAnimationState = 0x3a7c; // FGobiAnimationState
		constexpr auto AdditiveState = 0x3ad4; // FFirstPersonAdditiveState
		constexpr auto FirstPersonAnimations = 0x3b48; // FWeaponAnimsFP
		constexpr auto HeroAnimState = 0x3b88; // FHeroAnimStateFP
	}

	namespace n_UGameplayContext_LadderTransform {
		constexpr auto bGetLadderTop = 0x70; // bool
		constexpr auto bWithCapsuleOffset = 0x71; // bool
	}

	namespace n_UCrowdManager {
		constexpr auto NavDataSet = 0x30; // TArray<ANavigationData*>
		constexpr auto AvoidanceConfig = 0x40; // TArray<FCrowdAvoidanceConfig>
		constexpr auto SamplingPatterns = 0x50; // TArray<FCrowdAvoidanceSamplingPattern>
		constexpr auto MaxAgents = 0x60; // int32_t
		constexpr auto MaxAgentRadius = 0x64; // float
		constexpr auto MaxAvoidedAgents = 0x68; // int32_t
		constexpr auto MaxAvoidedWalls = 0x6c; // int32_t
		constexpr auto NavmeshCheckInterval = 0x70; // float
		constexpr auto PathOptimizationInterval = 0x74; // float
		constexpr auto SeparationDirClamp = 0x78; // float
		constexpr auto PathOffsetRadiusMultiplier = 0x7c; // float
		constexpr auto bResolveCollisions = 0x80; // char : 1
	}

	namespace n_UAudioSettings {
		constexpr auto bDisableUE4AudioSystem = 0x40; // char : 1
		constexpr auto DefaultSoundClassName = 0x48; // FSoftObjectPath
		constexpr auto DefaultMediaSoundClassName = 0x60; // FSoftObjectPath
		constexpr auto DefaultSoundConcurrencyName = 0x78; // FSoftObjectPath
		constexpr auto DefaultBaseSoundMix = 0x90; // FSoftObjectPath
		constexpr auto VoiPSoundClass = 0xa8; // FSoftObjectPath
		constexpr auto MasterSubmix = 0xc0; // FSoftObjectPath
		constexpr auto ReverbSubmix = 0xd8; // FSoftObjectPath
		constexpr auto EQSubmix = 0xf0; // FSoftObjectPath
		constexpr auto VoiPSampleRate = 0x108; // EVoiceSampleRate
		constexpr auto DefaultReverbSendLevel = 0x10c; // float
		constexpr auto MaximumConcurrentStreams = 0x110; // int32_t
		constexpr auto GlobalMinPitchScale = 0x114; // float
		constexpr auto GlobalMaxPitchScale = 0x118; // float
		constexpr auto QualityLevels = 0x120; // TArray<FAudioQualitySettings>
		constexpr auto bAllowPlayWhenSilent = 0x130; // char : 1
		constexpr auto bDisableMasterEQ = 0x130; // char : 1
		constexpr auto bAllowCenterChannel3DPanning = 0x130; // char : 1
		constexpr auto NumStoppingSources = 0x134; // uint32_t
		constexpr auto PanningMethod = 0x138; // EPanningMethod
		constexpr auto MonoChannelUpmixMethod = 0x139; // EMonoChannelUpmixMethod
		constexpr auto DialogueFilenameFormat = 0x140; // FString
	}

	namespace n_UMaterialExpressionDivide {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto ConstA = 0x70; // float
		constexpr auto ConstB = 0x74; // float
	}

	namespace n_USteeringControl {
		constexpr auto MovementSpeedStances = 0x38; // TArray<FMovementSpeedStance>
		constexpr auto CognitiveAbilityRange = 0x48; // FVector2D
	}

	namespace n_APathToObjectiveActor {
		constexpr auto DefaultRootComponent = 0x2a0; // USceneComponent*
		constexpr auto PathToObjectiveSpline = 0x2a8; // USplineComponent*
	}

	namespace n_UEditableStaticMeshAdapter {
		constexpr auto StaticMesh = 0x30; // UStaticMesh*
		constexpr auto OriginalStaticMesh = 0x38; // UStaticMesh*
		constexpr auto StaticMeshLODIndex = 0x40; // int32_t
	}

	namespace n_UMaterialExpressionDDY {
		constexpr auto Value = 0x48; // FExpressionInput
	}

	namespace n_USlateAccessibleWidgetData {
		constexpr auto bCanChildrenBeAccessible = 0x30; // bool
		constexpr auto AccessibleBehavior = 0x31; // ESlateAccessibleBehavior
		constexpr auto AccessibleSummaryBehavior = 0x32; // ESlateAccessibleBehavior
		constexpr auto AccessibleText = 0x38; // FText
		constexpr auto AccessibleTextDelegate = 0x50; // FDelegate
		constexpr auto AccessibleSummaryText = 0x60; // FText
		constexpr auto AccessibleSummaryTextDelegate = 0x78; // FDelegate
	}

	namespace n_AAudioAreaTrigger {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto AudioBanks = 0x2a8; // TArray<UAkAudioBank*>
		constexpr auto OneAkEventMultipleTargetPoints = 0x2c0; // TArray<FMultiPositioningInfo>
		constexpr auto OneTargetPointMultipleAkEvents = 0x2d0; // TArray<FMultiAudioEventInfo>
		constexpr auto DirectAudioAllEnter = 0x2e0; // TArray<UAkAudioEvent*>
		constexpr auto DirectAudioAllExit = 0x2f0; // TArray<UAkAudioEvent*>
		constexpr auto DirectAudioLocalEnter = 0x300; // TArray<UAkAudioEvent*>
		constexpr auto DirectAudioLocalExit = 0x310; // TArray<UAkAudioEvent*>
		constexpr auto bDebug = 0x320; // bool
	}

	namespace n_AGobiGameState {
		constexpr auto OnSafeRoomStateChanged = 0x578; // FMulticastInlineDelegate
		constexpr auto OnPlayerInsideChanged = 0x588; // FMulticastInlineDelegate
		constexpr auto OnMissionDifficultyChanged = 0x598; // FMulticastInlineDelegate
		constexpr auto OnCampaignEnded = 0x5a8; // FMulticastInlineDelegate
		constexpr auto OnMissionEnded = 0x5b8; // FMulticastInlineDelegate
		constexpr auto PartySafeRoomState = 0x5c8; // EPartySafeRoomState
		constexpr auto bSafeRoomVendorsDisabled = 0x5c9; // bool
		constexpr auto MissionState = 0x5d8; // FMissionState
		constexpr auto bEnableVoice = 0x5da; // bool
		constexpr auto MissionDifficulty = 0x5db; // EMissionDifficulty
		constexpr auto FriendlyFireModifier = 0x5dc; // float
		constexpr auto GameplayCueManager = 0x5e0; // UGameplayCueManager*
		constexpr auto FallbackSpectatorLocationClass = 0x5e8; // AActor*
		constexpr auto FallbackSpectatorLocationOffset = 0x5f0; // FVector
		constexpr auto PacketSimulationSettings = 0x5fc; // FSyncedPacketSimulationSettings
		constexpr auto CharacterMovementDebugEndpoint = 0x630; // UCharacterMovementDebugEndpoint*
		constexpr auto ServerStatusComponent = 0x638; // UServerStatusComponent*
		constexpr auto GameThreatLevel = 0x640; // uint32_t
		constexpr auto OnThreatLevelRaised = 0x644; // FGameplayTag
		constexpr auto OnThreatLevelLowered = 0x664; // FGameplayTag
		constexpr auto GameThreatNormalized = 0x684; // float
		constexpr auto GameThreat = 0x688; // float
		constexpr auto PacingPhase = 0x68c; // EPacingPhase
		constexpr auto CurrentMapChainIndex = 0x690; // int32_t
		constexpr auto NextMapToUnlock = 0x698; // FString
	}

	namespace n_UPendingNetGame {
		constexpr auto NetDriver = 0x38; // UNetDriver*
		constexpr auto DemoNetDriver = 0x40; // UDemoNetDriver*
	}

	namespace n_UInterpTrackInstDirector {
		constexpr auto OldViewTarget = 0x30; // AActor*
	}

	namespace n_UGameEngine {
		constexpr auto MaxDeltaTime = 0xe00; // float
		constexpr auto ServerFlushLogInterval = 0xe04; // float
		constexpr auto GameInstance = 0xe08; // UGameInstance*
	}

	namespace n_UAREnvironmentCaptureProbe {
		constexpr auto EnvironmentCaptureTexture = 0xf8; // UAREnvironmentCaptureProbeTexture*
	}

	namespace n_ULevelSequence {
		constexpr auto MovieScene = 0x350; // UMovieScene*
		constexpr auto ObjectReferences = 0x358; // FLevelSequenceObjectReferenceMap
		constexpr auto BindingReferences = 0x3a8; // FLevelSequenceBindingReferences
		constexpr auto PossessedObjects = 0x448; // TMap<FString, FLevelSequenceObject>
		constexpr auto DirectorClass = 0x498; // UObject*
	}

	namespace n_UDistributionVectorConstant {
		constexpr auto Constant = 0x40; // FVector
		constexpr auto bLockAxes = 0x4c; // char : 1
		constexpr auto LockedAxes = 0x50; // EDistributionVectorLockFlags
	}

	namespace n_UMaterialExpressionSkyAtmosphereLightDirection {
		constexpr auto LightIndex = 0x48; // int32_t
	}

	namespace n_USubUVAnimation {
		constexpr auto SubUVTexture = 0x30; // UTexture2D*
		constexpr auto SubImages_Horizontal = 0x38; // int32_t
		constexpr auto SubImages_Vertical = 0x3c; // int32_t
		constexpr auto BoundingMode = 0x40; // ESubUVBoundingVertexCount
		constexpr auto OpacitySourceMode = 0x41; // EOpacitySourceMode
		constexpr auto AlphaThreshold = 0x44; // float
	}

	namespace n_AImpostorGroupManager {
		constexpr auto SceneRoot = 0x2a0; // USceneComponent*
		constexpr auto BoxComponent = 0x2a8; // UBoxComponent*
		constexpr auto ImpostorStationaryStaticMeshs = 0x2b0; // TArray<UStaticMesh*>
		constexpr auto ImpostorSplineStaticMeshs = 0x2c0; // TArray<UStaticMesh*>
		constexpr auto StationaryImpostorMaterials = 0x2d0; // TArray<UMaterialInterface*>
		constexpr auto SplineImpostorMaterials = 0x2e0; // TArray<UMaterialInterface*>
		constexpr auto bStartPopulated = 0x2f0; // bool
	}

	namespace n_USoundNodeOscillator {
		constexpr auto bModulateVolume = 0x60; // char : 1
		constexpr auto bModulatePitch = 0x60; // char : 1
		constexpr auto AmplitudeMin = 0x64; // float
		constexpr auto AmplitudeMax = 0x68; // float
		constexpr auto FrequencyMin = 0x6c; // float
		constexpr auto FrequencyMax = 0x70; // float
		constexpr auto OffsetMin = 0x74; // float
		constexpr auto OffsetMax = 0x78; // float
		constexpr auto CenterMin = 0x7c; // float
		constexpr auto CenterMax = 0x80; // float
	}

	namespace n_UPrimitiveComponent {
		constexpr auto MinDrawDistance = 0x238; // float
		constexpr auto LDMaxDrawDistance = 0x23c; // float
		constexpr auto bAssetDecidesMaxDrawDistance = 0x240; // char : 1
		constexpr auto CachedMaxDrawDistance = 0x244; // float
		constexpr auto DepthPriorityGroup = 0x248; // ESceneDepthPriorityGroup
		constexpr auto ViewOwnerDepthPriorityGroup = 0x249; // ESceneDepthPriorityGroup
		constexpr auto IndirectLightingCacheQuality = 0x24a; // EIndirectLightingCacheQuality
		constexpr auto LightmapType = 0x24b; // ELightmapType
		constexpr auto bAssetDecidesEnableAutoLODGeneration = 0x24c; // char : 1
		constexpr auto bUseMaxLODAsImposter = 0x24c; // char : 1
		constexpr auto bBatchImpostersAsInstances = 0x24c; // char : 1
		constexpr auto bNeverDistanceCull = 0x24c; // char : 1
		constexpr auto bAlwaysCreatePhysicsState = 0x24d; // char : 1
		constexpr auto bGenerateOverlapEvents = 0x24d; // char : 1
		constexpr auto bAffectsGroundFog = 0x24d; // char : 1
		constexpr auto bMultiBodyOverlap = 0x24d; // char : 1
		constexpr auto bTraceComplexOnMove = 0x24d; // char : 1
		constexpr auto bReturnMaterialOnMove = 0x24d; // char : 1
		constexpr auto bUseViewOwnerDepthPriorityGroup = 0x24d; // char : 1
		constexpr auto bAllowCullDistanceVolume = 0x24d; // char : 1
		constexpr auto bHasMotionBlurVelocityMeshes = 0x24e; // char : 1
		constexpr auto bVisibleInReflectionCaptures = 0x24e; // char : 1
		constexpr auto bVisibleInRayTracing = 0x24e; // char : 1
		constexpr auto bRenderInMainPass = 0x24e; // char : 1
		constexpr auto bRenderInDepthPass = 0x24e; // char : 1
		constexpr auto bReceivesDecals = 0x24e; // char : 1
		constexpr auto bOwnerNoSee = 0x24e; // char : 1
		constexpr auto bOnlyOwnerSee = 0x24f; // char : 1
		constexpr auto bTreatAsBackgroundForOcclusion = 0x24f; // char : 1
		constexpr auto bUseAsOccluder = 0x24f; // char : 1
		constexpr auto bSelectable = 0x24f; // char : 1
		constexpr auto bForceMipStreaming = 0x24f; // char : 1
		constexpr auto bHasPerInstanceHitProxies = 0x24f; // char : 1
		constexpr auto CastShadow = 0x24f; // char : 1
		constexpr auto bAffectDynamicIndirectLighting = 0x24f; // char : 1
		constexpr auto bAffectDistanceFieldLighting = 0x250; // char : 1
		constexpr auto bCastDynamicShadow = 0x250; // char : 1
		constexpr auto bCastStaticShadow = 0x250; // char : 1
		constexpr auto bCastVolumetricTranslucentShadow = 0x250; // char : 1
		constexpr auto bSelfShadowOnly = 0x250; // char : 1
		constexpr auto bCastFarShadow = 0x250; // char : 1
		constexpr auto bCastInsetShadow = 0x250; // char : 1
		constexpr auto bCastCinematicShadow = 0x250; // char : 1
		constexpr auto bCastHiddenShadow = 0x251; // char : 1
		constexpr auto bCastShadowAsTwoSided = 0x251; // char : 1
		constexpr auto bLightAsIfStatic = 0x251; // char : 1
		constexpr auto bLightAttachmentsAsGroup = 0x251; // char : 1
		constexpr auto bExcludeFromLightAttachmentGroup = 0x251; // char : 1
		constexpr auto bReceiveMobileCSMShadows = 0x251; // char : 1
		constexpr auto bSingleSampleShadowFromStationaryLights = 0x251; // char : 1
		constexpr auto bIgnoreRadialImpulse = 0x251; // char : 1
		constexpr auto bIgnoreRadialForce = 0x252; // char : 1
		constexpr auto bApplyImpulseOnDamage = 0x252; // char : 1
		constexpr auto bReplicatePhysicsToAutonomousProxy = 0x252; // char : 1
		constexpr auto bFillCollisionUnderneathForNavmesh = 0x252; // char : 1
		constexpr auto AlwaysLoadOnClient = 0x252; // char : 1
		constexpr auto AlwaysLoadOnServer = 0x252; // char : 1
		constexpr auto bUseEditorCompositing = 0x252; // char : 1
		constexpr auto bRenderCustomDepth = 0x252; // char : 1
		constexpr auto bRenderCustomDepthPlayer2 = 0x253; // char : 1
		constexpr auto bRenderForeground = 0x253; // char : 1
		constexpr auto bHasCustomNavigableGeometry = 0x254; // EHasCustomNavigableGeometry
		constexpr auto CanCharacterStepUpOn = 0x256; // ECanBeCharacterBase
		constexpr auto LightingChannels = 0x257; // FLightingChannels
		constexpr auto ShadowChannels = 0x258; // FShadowChannels
		constexpr auto CustomDepthStencilWriteMask = 0x259; // ERendererStencilMask
		constexpr auto CustomDepthStencilValue = 0x25c; // int32_t
		constexpr auto CustomPrimitiveData = 0x260; // FCustomPrimitiveData
		constexpr auto CustomPrimitiveDataInternal = 0x270; // FCustomPrimitiveData
		constexpr auto TranslucencySortPriority = 0x288; // int32_t
		constexpr auto VisibilityId = 0x28c; // int32_t
		constexpr auto RuntimeVirtualTextures = 0x290; // TArray<URuntimeVirtualTexture*>
		constexpr auto VirtualTextureLodBias = 0x2a0; // int8_t
		constexpr auto VirtualTextureCullMips = 0x2a1; // int8_t
		constexpr auto VirtualTextureMinCoverage = 0x2a2; // int8_t
		constexpr auto VirtualTextureRenderPassType = 0x2a3; // ERuntimeVirtualTextureMainPassType
		constexpr auto LpvBiasMultiplier = 0x2a8; // float
		constexpr auto BoundsScale = 0x2b4; // float
		constexpr auto MoveIgnoreActors = 0x2c8; // TArray<AActor*>
		constexpr auto MoveIgnoreComponents = 0x2d8; // TArray<UPrimitiveComponent*>
		constexpr auto BodyInstance = 0x2f8; // FBodyInstance
		constexpr auto OnComponentHit = 0x408; // FMulticastSparseDelegate
		constexpr auto OnComponentBeginOverlap = 0x409; // FMulticastSparseDelegate
		constexpr auto OnComponentEndOverlap = 0x40a; // FMulticastSparseDelegate
		constexpr auto OnComponentWake = 0x40d; // FMulticastSparseDelegate
		constexpr auto OnComponentSleep = 0x40e; // FMulticastSparseDelegate
		constexpr auto OnBeginCursorOver = 0x410; // FMulticastInlineDelegate
		constexpr auto OnEndCursorOver = 0x420; // FMulticastInlineDelegate
		constexpr auto OnClicked = 0x430; // FMulticastInlineDelegate
		constexpr auto OnReleased = 0x440; // FMulticastInlineDelegate
		constexpr auto OnInputTouchBegin = 0x450; // FMulticastInlineDelegate
		constexpr auto OnInputTouchEnd = 0x460; // FMulticastInlineDelegate
		constexpr auto OnInputTouchEnter = 0x470; // FMulticastInlineDelegate
		constexpr auto OnInputTouchLeave = 0x480; // FMulticastInlineDelegate
		constexpr auto LODParentPrimitive = 0x4a8; // UPrimitiveComponent*
	}

	namespace n_UARSessionConfig {
		constexpr auto bGenerateMeshDataFromTrackedGeometry = 0x38; // bool
		constexpr auto bGenerateCollisionForMeshData = 0x39; // bool
		constexpr auto bGenerateNavMeshForMeshData = 0x3a; // bool
		constexpr auto bUseMeshDataForOcclusion = 0x3b; // bool
		constexpr auto bRenderMeshDataInWireframe = 0x3c; // bool
		constexpr auto bTrackSceneObjects = 0x3d; // bool
		constexpr auto bUsePersonSegmentationForOcclusion = 0x3e; // bool
		constexpr auto WorldAlignment = 0x3f; // EARWorldAlignment
		constexpr auto SessionType = 0x40; // EARSessionType
		constexpr auto PlaneDetectionMode = 0x41; // EARPlaneDetectionMode
		constexpr auto bHorizontalPlaneDetection = 0x42; // bool
		constexpr auto bVerticalPlaneDetection = 0x43; // bool
		constexpr auto bEnableAutoFocus = 0x44; // bool
		constexpr auto LightEstimationMode = 0x45; // EARLightEstimationMode
		constexpr auto FrameSyncMode = 0x46; // EARFrameSyncMode
		constexpr auto bEnableAutomaticCameraOverlay = 0x47; // bool
		constexpr auto bEnableAutomaticCameraTracking = 0x48; // bool
		constexpr auto bResetCameraTracking = 0x49; // bool
		constexpr auto bResetTrackedObjects = 0x4a; // bool
		constexpr auto CandidateImages = 0x50; // TArray<UARCandidateImage*>
		constexpr auto MaxNumSimultaneousImagesTracked = 0x60; // int32_t
		constexpr auto EnvironmentCaptureProbeType = 0x64; // EAREnvironmentCaptureProbeType
		constexpr auto WorldMapData = 0x68; // TArray<char>
		constexpr auto CandidateObjects = 0x78; // TArray<UARCandidateObject*>
		constexpr auto DesiredVideoFormat = 0x88; // FARVideoFormat
		constexpr auto FaceTrackingDirection = 0x94; // EARFaceTrackingDirection
		constexpr auto FaceTrackingUpdate = 0x95; // EARFaceTrackingUpdate
		constexpr auto SerializedARCandidateImageDatabase = 0x98; // TArray<char>
		constexpr auto EnabledSessionTrackingFeature = 0xa8; // EARSessionTrackingFeature
	}

	namespace n_UEnvQueryGenerator_OnCircle {
		constexpr auto CircleRadius = 0x88; // FAIDataProviderFloatValue
		constexpr auto SpaceBetween = 0xc0; // FAIDataProviderFloatValue
		constexpr auto NumberOfPoints = 0xf8; // FAIDataProviderIntValue
		constexpr auto PointOnCircleSpacingMethod = 0x130; // EPointOnCircleSpacingMethod
		constexpr auto ArcDirection = 0x138; // FEnvDirection
		constexpr auto ArcAngle = 0x158; // FAIDataProviderFloatValue
		constexpr auto AngleRadians = 0x190; // float
		constexpr auto CircleCenter = 0x198; // UEnvQueryContext*
		constexpr auto bIgnoreAnyContextActorsWhenGeneratingCircle = 0x1a0; // bool
		constexpr auto CircleCenterZOffset = 0x1a8; // FAIDataProviderFloatValue
		constexpr auto TraceData = 0x1e0; // FEnvTraceData
		constexpr auto bDefineArc = 0x210; // char : 1
	}

	namespace n_UAnimCompress_RemoveTrivialKeys {
		constexpr auto MaxPosDiff = 0x48; // float
		constexpr auto MaxAngleDiff = 0x4c; // float
		constexpr auto MaxScaleDiff = 0x50; // float
	}

	namespace n_UGameplayEffectEmitterRadius {
		constexpr auto EmitterComponentTag = 0x238; // FGameplayTag
		constexpr auto Radius = 0x240; // FGamePropertyFloatMod
	}

	namespace n_UClickDragInputBehavior {
		constexpr auto bUpdateModifiersDuringDrag = 0x120; // bool
	}

	namespace n_UMaterialExpressionFmod {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
	}

	namespace n_UGameplayAudioCaptionSubsystem {
		constexpr auto GameplayAudioCaptionsTable = 0x50; // UDataTable*
		constexpr auto LocalController = 0x58; // APlayerController*
	}

	namespace n_UApplyTagMod {
		constexpr auto TagsToApply = 0xd0; // FGameplayTagContainer
	}

	namespace n_UJukeboxMusicPlaylist {
		constexpr auto RequiredBank = 0x38; // UAkAudioBank*
		constexpr auto TrackList = 0x40; // TSet<UAkAudioEvent*>
	}

	namespace n_UBTDecorator_BlueprintBase {
		constexpr auto AIOwner = 0x70; // AAIController*
		constexpr auto ActorOwner = 0x78; // AActor*
		constexpr auto ObservedKeyNames = 0x80; // TArray<FName>
		constexpr auto bShowPropertyDetails = 0xa0; // char : 1
		constexpr auto bCheckConditionOnlyBlackBoardChanges = 0xa0; // char : 1
		constexpr auto bIsObservingBB = 0xa0; // char : 1
	}

	namespace n_AMelee_AICharacterBP_C {
		constexpr auto UberGraphFrame = 0x1330; // FPointerToUberGraphFrame
		constexpr auto PlayDeathReaction = 0x1338; // UPlayDeathReactionComponent*
		constexpr auto Drench = 0x1340; // UDrench_Component_Zombie_BP_C*
		constexpr auto DamageFilter = 0x1348; // UDamageFilterComponent*
		constexpr auto GameplayContext = 0x1350; // UGameplayContextComponent*
		constexpr auto AimAssistTarget = 0x1358; // UAimAssistTargetComponent*
		constexpr auto AnimAttackWindow = 0x1360; // UAnimAttackWindowComponent*
		constexpr auto PlayHitReaction = 0x1368; // UPlayHitReactionComponent*
		constexpr auto LifeStateComponent = 0x1370; // UAIZombieLifeStateComponent_BP_C*
		constexpr auto Damage_Capsule = 0x1378; // UCapsuleComponent*
		constexpr auto GameplayEffects = 0x1380; // UGameplayEffectsComponent*
		constexpr auto PhysicalAnimation = 0x1388; // UPhysicalAnimationComponent*
		constexpr auto Health = 0x1390; // UHealthComponent*
		constexpr auto DamageFilterEffect = 0x1398; // UGameplayEffect*
	}

	namespace n_UMaterialExpressionBreakMaterialAttributes {
		constexpr auto MaterialAttributes = 0x48; // FMaterialAttributesInput
	}

	namespace n_UMaterialExpressionArctangent2 {
		constexpr auto Y = 0x48; // FExpressionInput
		constexpr auto X = 0x5c; // FExpressionInput
	}

	namespace n_UGameplayTagsComponent {
		constexpr auto OnTagChanged = 0xf0; // FMulticastInlineDelegate
		constexpr auto GameplayTags = 0x130; // FGameplayTagContainer
	}

	namespace n_UHighlightComponent {
		constexpr auto ActiveState = 0xe8; // FHighlightState
		constexpr auto bDisableWhenVisible = 0xec; // bool
		constexpr auto CustomHighlightMeshTags = 0xf0; // FGameplayTagContainer
		constexpr auto GobiCharacterOwner = 0x110; // AGobiCharacter*
	}

	namespace n_UHeroAudioComponent_BP_C {
		constexpr auto MovementThreshold = 0x738; // float
		constexpr auto TempFootstepsEnabled = 0x73c; // bool
		constexpr auto OwnerMovementComponent = 0x740; // UCharacterMovementComponent*
		constexpr auto AudioScreenEffects = 0x748; // TArray<FAudioScreenEffect_Struct>
		constexpr auto CumulativeDistance = 0x758; // float
		constexpr auto CrouchThresholdScalar = 0x75c; // float
		constexpr auto SprintScalar = 0x760; // float
	}

	namespace n_UActSelectUserWidget {
		constexpr auto OnMapSelected = 0x458; // FMulticastInlineDelegate
		constexpr auto OnMapChainToggled = 0x468; // FMulticastInlineDelegate
		constexpr auto OnMapFocused = 0x478; // FMulticastInlineDelegate
	}

	namespace n_UOptionsGamepadLayoutUserWidget {
		constexpr auto DisplayMode = 0x458; // EGamepadLayoutDisplayMode
	}

	namespace n_UCardInsertUserWidget {
		constexpr auto TitleText = 0x458; // UTextBlock*
		constexpr auto WrapTitleText = 0x460; // UTextBlock*
		constexpr auto TitleWidgetSwitcher = 0x468; // UWidgetSwitcher*
		constexpr auto TypeText = 0x470; // UTextBlock*
		constexpr auto BodyText = 0x478; // URichTextBlock*
		constexpr auto SPRewardText = 0x480; // URichTextBlock*
		constexpr auto SharedTextContainer = 0x488; // UOverlay*
		constexpr auto SharedBodyText = 0x490; // URichTextBlock*
	}

	namespace n_UPounceComponent {
		constexpr auto OnPounceCookStarted = 0x1e0; // FMulticastInlineDelegate
		constexpr auto OnPounceCookEnded = 0x1f0; // FMulticastInlineDelegate
		constexpr auto OnPounceEnded = 0x200; // FMulticastInlineDelegate
		constexpr auto bUsesTuningData = 0x210; // bool
		constexpr auto TuningDataIdentifier = 0x214; // FName
		constexpr auto PounceTuning = 0x220; // FPounceTuning
		constexpr auto GrabCollisionMeshTag = 0x300; // FName
		constexpr auto LeapMontages = 0x308; // TArray<UAnimMontage*>
		constexpr auto LeapFromWallMontages = 0x318; // TArray<UAnimMontage*>
		constexpr auto bLeapMontagePlaysLoop = 0x328; // bool
		constexpr auto LandMontages = 0x330; // TArray<UAnimMontage*>
		constexpr auto AttackStumbleMontage = 0x340; // FAttackStumbleMontage
		constexpr auto AttackStumbleIncapMontage = 0x350; // FAttackStumbleMontage
		constexpr auto AttackMontages = 0x360; // TArray<UAnimMontage*>
		constexpr auto CookingMontages = 0x370; // TArray<UAnimMontage*>
		constexpr auto LeapFromWallCookingMontages = 0x380; // TArray<UAnimMontage*>
		constexpr auto ReleaseDeadCharacterMontages = 0x390; // TArray<UAnimMontage*>
		constexpr auto ApplyEffects = 0x3a0; // TArray<UGameplayEffect*>
		constexpr auto ApplyAttackingEffects = 0x3b0; // TArray<UGameplayEffect*>
		constexpr auto ApplyEndingEffects = 0x3c0; // TArray<UGameplayEffect*>
		constexpr auto ApplyEndingEffectsToTarget = 0x3d0; // TArray<UGameplayEffect*>
		constexpr auto ApplyEffectsToPouncedTarget = 0x3e0; // TArray<UGameplayEffect*>
		constexpr auto CookingEffects = 0x3f0; // TArray<UGameplayEffect*>
		constexpr auto AppliedTags = 0x400; // FGameplayTagContainer
		constexpr auto AppliedLeapingTags = 0x420; // FGameplayTagContainer
		constexpr auto LeapInterruptTags = 0x440; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x460; // FGameplayTagContainer
		constexpr auto BlockingTargetTags = 0x480; // FGameplayTagContainer
		constexpr auto RequiredTargetMoveTagQuery = 0x4a0; // FGameplayTagQuery
		constexpr auto CancelTags = 0x4e8; // FGameplayTagQuery
		constexpr auto CancelTargetTags = 0x530; // FGameplayTagQuery
		constexpr auto AudioCookingStopEvents = 0x578; // TArray<FEnemyAudioEvent>
		constexpr auto AudioCookingInterruptedEvents = 0x588; // TArray<FEnemyAudioEvent>
		constexpr auto MoveIgnoreCharacters = 0x598; // FGameplayTagQuery
		constexpr auto bCrouchWhenCooking = 0x5e0; // bool
		constexpr auto bCrouchWhenLeaping = 0x5e1; // bool
		constexpr auto bDamageInterruptsLeap = 0x5e2; // bool
		constexpr auto DamageInterruptsLeapTagQuery = 0x5e8; // FGameplayTagQuery
		constexpr auto SpeedMultiplierCurve = 0x630; // UCurveFloat*
		constexpr auto MaxDistanceFromGrabbedTarget = 0x638; // float
		constexpr auto ChargeDamageTypeToFriendlies = 0x640; // UGobiDamageType*
		constexpr auto LineOfSightTargetComponentTag = 0x648; // FName
		constexpr auto LineOfSightSweepRadius = 0x650; // float
		constexpr auto LineOfSightSweepHalfHeight = 0x654; // float
		constexpr auto PounceCollisionProfileName = 0x658; // FCollisionProfileName
		constexpr auto LandCheckAheadDotThreshold = 0x660; // float
		constexpr auto bIsBunnyKick = 0x664; // bool
		constexpr auto BunnyKick = 0x668; // FPounceBunnyKick
		constexpr auto MCAI_Class = 0x6c8; // AGobiCharacter*
		constexpr auto bSetVictimCameraDownwards = 0x6d0; // bool
		constexpr auto AI = 0x6d8; // FPounceAIConfig
		constexpr auto Player = 0x6e8; // FPouncePlayerConfig
		constexpr auto ReapplyEffectsOnLeapEnd = 0x7e0; // TArray<UGameplayEffect*>
		constexpr auto GameplayGrabbedCharacter = 0x7f0; // AGobiCharacter*
		constexpr auto bLeapInterrupted = 0x7f8; // bool
		constexpr auto QueuedEffectsToReapply = 0x800; // TArray<FQueuedEffect>
	}

	namespace n_AVectorFieldVolume {
		constexpr auto VectorFieldComponent = 0x2a0; // UVectorFieldComponent*
	}

	namespace n_UCharacterSelectUserWidget {
		constexpr auto ClaimedCharacters = 0x4b8; // TMap<AGobiPlayerState*, FDataTableRowHandle>
	}

	namespace n_UGameplayActionsComponent {
		constexpr auto ActionSet = 0xf0; // TArray<UGameplayAction*>
		constexpr auto Actions = 0x100; // TArray<UGameplayAction*>
		constexpr auto RunningActions = 0x110; // TArray<UGameplayAction*>
		constexpr auto TickableActions = 0x120; // TArray<UGameplayAction*>
	}

	namespace n_ULandscapeGrassType {
		constexpr auto GrassVarieties = 0x30; // TArray<FGrassVariety>
		constexpr auto bEnableDensityScaling = 0x40; // char : 1
		constexpr auto GrassMesh = 0x48; // UStaticMesh*
		constexpr auto GrassDensity = 0x50; // float
		constexpr auto PlacementJitter = 0x54; // float
		constexpr auto StartCullDistance = 0x58; // int32_t
		constexpr auto EndCullDistance = 0x5c; // int32_t
		constexpr auto RandomRotation = 0x60; // bool
		constexpr auto AlignToSurface = 0x61; // bool
	}

	namespace n_URadialFalloff {
		constexpr auto Magnitude = 0xe8; // float
		constexpr auto MinRange = 0xec; // float
		constexpr auto MaxRange = 0xf0; // float
		constexpr auto Default = 0xf4; // float
		constexpr auto Radius = 0xf8; // float
		constexpr auto Position = 0xfc; // FVector
		constexpr auto Falloff = 0x108; // EFieldFalloffType
	}

	namespace n_UMeshSimplificationSettings {
		constexpr auto MeshReductionModuleName = 0x40; // FName
	}

	namespace n_UGameplayEffectSpreadComponent {
		constexpr auto SpreadMinScaleMod = 0x250; // FGamePropertyFloatMod
		constexpr auto SpreadMaxScaleMod = 0x260; // FGamePropertyFloatMod
		constexpr auto SpreadDecayRateScaleMod = 0x270; // FGamePropertyFloatMod
		constexpr auto FiringSpreadAddScaleMod = 0x280; // FGamePropertyFloatMod
		constexpr auto MovingSpreadAddScaleMod = 0x290; // FGamePropertyFloatMod
	}

	namespace n_UModularSynthPresetBank {
		constexpr auto Presets = 0x30; // TArray<FModularSynthPresetBankEntry>
	}

	namespace n_URattleEmitterNode {
		constexpr auto RattleEmitterInfo = 0xa0; // FRattleEmitterInfo
	}

	namespace n_UInterpTrackBoolProp {
		constexpr auto BoolTrack = 0x78; // TArray<FBoolTrackKey>
		constexpr auto PropertyName = 0x88; // FName
	}

	namespace n_APreparationArea {
		constexpr auto DefaultRootComponent = 0x2a0; // USceneComponent*
		constexpr auto SupportedGameModes = 0x2a8; // uint32_t
	}

	namespace n_UTitanComponent {
		constexpr auto OnPhaseKilled = 0xe8; // FMulticastInlineDelegate
		constexpr auto State = 0xf8; // ETitanState
		constexpr auto TentacleComponents = 0x168; // TArray<UTitanTentacleComponent*>
		constexpr auto PhaseIdx = 0x178; // int32_t
		constexpr auto DeathMontage = 0x180; // UAnimMontage*
		constexpr auto TurnRight90Montage = 0x188; // UAnimMontage*
		constexpr auto TurnLeft90Montage = 0x190; // UAnimMontage*
		constexpr auto TurnRight180Montage = 0x198; // UAnimMontage*
		constexpr auto TurnLeft180Montage = 0x1a0; // UAnimMontage*
		constexpr auto Phases = 0x1a8; // TArray<FTitanPhase>
	}

	namespace n_UAISenseMod {
		constexpr auto SenseMods = 0xd0; // TArray<FAISenseModInfo>
	}

	namespace n_URigidBodyDynamicsComponent {
		constexpr auto RigidBodySkelMesh = 0xe8; // USkeletalMesh*
		constexpr auto RigidBodySkelMeshComponent = 0xf0; // USkeletalMeshComponent*
		constexpr auto RigidBodyLifetime = 0xf8; // float
		constexpr auto AnimationToPlay = 0x100; // UAnimationAsset*
		constexpr auto ImpulseMagnitude = 0x108; // float
	}

	namespace n_UPrimaryAssetLabel {
		constexpr auto Rules = 0x38; // FPrimaryAssetRules
		constexpr auto bLabelAssetsInMyDirectory = 0x58; // char : 1
		constexpr auto bIsRuntimeLabel = 0x58; // char : 1
		constexpr auto ExplicitAssets = 0x60; // TArray<TSoftObjectPtr<UObject>>
		constexpr auto ExplicitBlueprints = 0x70; // TArray<TSoftClassPtr<UObject>>
		constexpr auto AssetCollection = 0x80; // FCollectionReference
	}

	namespace n_UMaterialExpressionTangent {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto Period = 0x5c; // float
	}

	namespace n_UPanelWidget {
		constexpr auto Slots = 0x148; // TArray<UPanelSlot*>
	}

	namespace n_UBTDecorator_CopyLocationFromBBKey {
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
		constexpr auto BlackboardKeyToCopy = 0x98; // FBlackboardKeySelector
	}

	namespace n_UTitanTailComponent {
		constexpr auto bOnLeft = 0x120; // bool
		constexpr auto AttackVolumeTag = 0x124; // FGameplayTag
		constexpr auto SwipeAttackAngle = 0x12c; // float
		constexpr auto SwipeGameplayEffects = 0x130; // TArray<UGameplayEffect*>
		constexpr auto SwipeLeftTellMontage = 0x140; // UAnimMontage*
		constexpr auto SwipeLeftAttackMontage = 0x148; // UAnimMontage*
		constexpr auto SwipeRightTellMontage = 0x150; // UAnimMontage*
		constexpr auto SwipeRightAttackMontage = 0x158; // UAnimMontage*
		constexpr auto SweepForwardAngleMin = 0x160; // float
		constexpr auto SweepForwardAngleMax = 0x164; // float
		constexpr auto SweepForwardGameplayEffects = 0x168; // TArray<UGameplayEffect*>
		constexpr auto SweepForwardLeftTailOnLeftTellMontage = 0x178; // UAnimMontage*
		constexpr auto SweepForwardLeftTailOnLeftAttackMontage = 0x180; // UAnimMontage*
		constexpr auto SweepForwardLeftTailOnRightTellMontage = 0x188; // UAnimMontage*
		constexpr auto SweepForwardLeftTailOnRightAttackMontage = 0x190; // UAnimMontage*
		constexpr auto SweepForwardRightTailOnLeftTellMontage = 0x198; // UAnimMontage*
		constexpr auto SweepForwardRightTailOnLeftAttackMontage = 0x1a0; // UAnimMontage*
		constexpr auto SweepForwardRightTailOnRightTellMontage = 0x1a8; // UAnimMontage*
		constexpr auto SweepForwardRightTailOnRightAttackMontage = 0x1b0; // UAnimMontage*
	}

	namespace n_UAnimContext_MantleTarget {
		constexpr auto bUseMantleLedgePos = 0x78; // bool
	}

	namespace n_UPrimitiveParameterCollection {
		constexpr auto FloatParameters = 0x38; // TArray<FPrimitiveFloatParameter>
		constexpr auto VectorParameters = 0x48; // TArray<FPrimitiveVectorParameter>
		constexpr auto StateId = 0x58; // FGuid
		constexpr auto TotalNumberOfFloats = 0x68; // int32_t
	}

	namespace n_UBTTask_MakeNoise {
		constexpr auto Loudnes = 0x78; // float
	}

	namespace n_APVPHoldoutGameState {
		constexpr auto OnHoldoutStateChanged = 0x708; // FMulticastInlineDelegate
		constexpr auto MaxRounds = 0x718; // int32_t
		constexpr auto SurvivalStartTime = 0x71c; // float
		constexpr auto SurvivalEndTime = 0x720; // float
		constexpr auto TeamForfeitTime = 0x724; // float
		constexpr auto TeamSurvivalTimes = 0x728; // TArray<int32_t>
		constexpr auto HoldoutResult = 0x738; // EHoldoutResult
		constexpr auto WinningTeam = 0x739; // EMatchmakingTeam
	}

	namespace n_UEditableTextWidgetStyle {
		constexpr auto EditableTextStyle = 0x38; // FEditableTextStyle
	}

	namespace n_USteeringBehavior_Seek {
		constexpr auto TargetLocation = 0x58; // UAnimContext_Transform*
		constexpr auto bIgnoreZ = 0x60; // bool
		constexpr auto bUseCharacterEyeHeightForFocusOffset = 0x61; // bool
	}

	namespace n_UDialoguePluginSettings {
		constexpr auto DialogueSystemClass = 0x40; // TSoftClassPtr<UObject>
		constexpr auto DialoguePlaybackClass = 0x68; // TSoftClassPtr<UObject>
		constexpr auto BankManagerClass = 0x90; // TSoftClassPtr<UObject>
		constexpr auto ConversationTable = 0xb8; // TSoftObjectPtr<UDataTable>
		constexpr auto ResponseGroupTable = 0xe0; // TSoftObjectPtr<UDataTable>
		constexpr auto PriorityTable = 0x108; // TSoftObjectPtr<UDataTable>
		constexpr auto EventDefinitionTable = 0x130; // TSoftObjectPtr<UDataTable>
		constexpr auto DialogueAnimationTable = 0x158; // TSoftObjectPtr<UDataTable>
		constexpr auto FloatingConversationDelay = 0x180; // float
		constexpr auto FloatingConversationMax = 0x184; // int32_t
		constexpr auto ConversationBankLoadDelay = 0x188; // float
		constexpr auto PreloadAllConversationBanks = 0x18c; // bool
		constexpr auto CommsRTPC = 0x190; // FString
		constexpr auto CommsInnerRadius = 0x1a0; // float
		constexpr auto CommsOuterRadius = 0x1a4; // float
		constexpr auto CommsOcclusionThreshold = 0x1a8; // float
	}

	namespace n_UAnimNotify_ThrowProjectileBase {
		constexpr auto ProjectileThrowClass = 0x40; // UProjectileThrowComponent*
	}

	namespace n_UNiagaraLightRendererProperties {
		constexpr auto bUseInverseSquaredFalloff = 0x58; // char : 1
		constexpr auto bAffectsTranslucency = 0x58; // char : 1
		constexpr auto bOverrideRenderingEnabled = 0x58; // char : 1
		constexpr auto RadiusScale = 0x5c; // float
		constexpr auto ColorAdd = 0x60; // FVector
		constexpr auto LightRenderingEnabledBinding = 0x70; // FNiagaraVariableAttributeBinding
		constexpr auto LightExponentBinding = 0xe8; // FNiagaraVariableAttributeBinding
		constexpr auto PositionBinding = 0x160; // FNiagaraVariableAttributeBinding
		constexpr auto ColorBinding = 0x1d8; // FNiagaraVariableAttributeBinding
		constexpr auto RadiusBinding = 0x250; // FNiagaraVariableAttributeBinding
		constexpr auto VolumetricScatteringBinding = 0x2c8; // FNiagaraVariableAttributeBinding
	}

	namespace n_UWidgetSwitcher {
		constexpr auto ActiveWidgetIndex = 0x160; // int32_t
		constexpr auto OnActiveWidgetChanged = 0x168; // FMulticastInlineDelegate
	}

	namespace n_UTextureLODSettings {
		constexpr auto TextureLODGroups = 0x30; // TArray<FTextureLODGroup>
	}

	namespace n_APartyBeaconHost {
		constexpr auto State = 0x2c8; // UPartyBeaconState*
		constexpr auto bLogoutOnSessionTimeout = 0x330; // bool
		constexpr auto SessionTimeoutSecs = 0x334; // float
		constexpr auto TravelSessionTimeoutSecs = 0x338; // float
	}

	namespace n_ULandscapeSplineControlPoint {
		constexpr auto Location = 0x30; // FVector
		constexpr auto Rotation = 0x3c; // FRotator
		constexpr auto Width = 0x48; // float
		constexpr auto LayerWidthRatio = 0x4c; // float
		constexpr auto SideFalloff = 0x50; // float
		constexpr auto LeftSideFalloffFactor = 0x54; // float
		constexpr auto RightSideFalloffFactor = 0x58; // float
		constexpr auto LeftSideLayerFalloffFactor = 0x5c; // float
		constexpr auto RightSideLayerFalloffFactor = 0x60; // float
		constexpr auto EndFalloff = 0x64; // float
		constexpr auto bAllowCullDistanceVolume = 0x68; // char : 1
		constexpr auto ConnectedSegments = 0x70; // TArray<FLandscapeSplineConnection>
		constexpr auto Points = 0x80; // TArray<FLandscapeSplineInterpPoint>
		constexpr auto Bounds = 0x90; // FBox
		constexpr auto LocalMeshComponent = 0xb0; // UControlPointMeshComponent*
	}

	namespace n_UAkSettingsPerUser {
		constexpr auto WwiseWindowsInstallationPath = 0x30; // FDirectoryPath
		constexpr auto WwiseMacInstallationPath = 0x40; // FFilePath
		constexpr auto WaapiIPAddress = 0x50; // FString
		constexpr auto WaapiPort = 0x60; // uint32_t
		constexpr auto SuppressWwiseProjectPathWarnings = 0x64; // bool
	}

	namespace n_UTweenRotator {
		constexpr auto OnTweenStart = 0xb0; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0xd0; // FMulticastInlineDelegate
		constexpr auto OnTweenActorHit = 0xe0; // FMulticastInlineDelegate
		constexpr auto OnTweenActorBeginOverlap = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnTweenPrimitiveComponentHit = 0x100; // FMulticastInlineDelegate
		constexpr auto OnTweenPrimitiveComponentBeginOverlap = 0x110; // FMulticastInlineDelegate
	}

	namespace n_UMovieSceneCameraAnimSection {
		constexpr auto AnimData = 0xe8; // FMovieSceneCameraAnimSectionData
		constexpr auto CameraAnim = 0x108; // UCameraAnim*
		constexpr auto PlayRate = 0x110; // float
		constexpr auto PlayScale = 0x114; // float
		constexpr auto BlendInTime = 0x118; // float
		constexpr auto BlendOutTime = 0x11c; // float
		constexpr auto bLooping = 0x120; // bool
	}

	namespace n_UMaterialExpressionMax {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto ConstA = 0x70; // float
		constexpr auto ConstB = 0x74; // float
	}

	namespace n_UAsyncActionHandleSaveGame {
		constexpr auto Completed = 0x38; // FMulticastInlineDelegate
		constexpr auto SaveGameObject = 0x68; // USaveGame*
	}

	namespace n_AGobiGameStateDebugger {
		constexpr auto GameState = 0x2a0; // AGobiGameStateBase*
	}

	namespace n_UGobiPlayerMovementComponent {
		constexpr auto OnJump = 0x950; // FMulticastInlineDelegate
		constexpr auto OwningPlayer = 0x968; // APlayerCharacter*
		constexpr auto LifeStateComponent = 0x970; // ULifeStateComponent*
		constexpr auto CameraComponent = 0x978; // UCameraComponent*
		constexpr auto bIsJumping = 0x980; // bool
		constexpr auto LookDisabledTags = 0x988; // FGameplayTagQuery
		constexpr auto InputSelectedEquipmentSlot = 0xa88; // EEquipmentSlot
		constexpr auto InputSelectedEquipmentActor = 0xa90; // AItem*
		constexpr auto PotentialUsableActor = 0xa98; // AActor*
		constexpr auto NetAccel = 0xaa0; // FVector_NetQuantize
		constexpr auto DebugFlySpeed = 0xaac; // float
		constexpr auto MaxSprintSpeed = 0xab0; // float
		constexpr auto CrouchedJumpCancelsCrouch = 0xab4; // bool
		constexpr auto MantleVerticalSpeedMods = 0xab8; // TArray<FCustomDataProviderFloat>
		constexpr auto MaxSpeedMods = 0xac8; // TArray<FCustomDataProviderFloat>
		constexpr auto JumpOffLadderLateralSpeed = 0xad8; // float
		constexpr auto MovementInputScaleLowerLimit = 0xadc; // float
		constexpr auto LookInputHandler = 0xae0; // FLookInputHandler
		constexpr auto DisableInputMovementTags = 0xcb0; // FGameplayTagContainer
		constexpr auto DisableJumpInputTags = 0xcd0; // FGameplayTagQuery
		constexpr auto bTickSpringArms = 0xd18; // bool
		constexpr auto bServerEnforcedFixedTimestep = 0xd54; // bool
		constexpr auto ServerMovementBase = 0xd58; // UPrimitiveComponent*
		constexpr auto QueuedClientAdjustments = 0xe68; // TArray<FQueuedClientAdjustment>
	}

	namespace n_UEOSSettings {
		constexpr auto CacheDir = 0x30; // FString
		constexpr auto DefaultArtifactName = 0x40; // FString
		constexpr auto TickBudgetInMilliseconds = 0x50; // int32_t
		constexpr auto bEnableOverlay = 0x54; // bool
		constexpr auto bEnableSocialOverlay = 0x55; // bool
		constexpr auto bShouldEnforceBeingLaunchedByEGS = 0x56; // bool
		constexpr auto TitleStorageTags = 0x58; // TArray<FString>
		constexpr auto TitleStorageReadChunkLength = 0x68; // int32_t
		constexpr auto Artifacts = 0x70; // TArray<FArtifactSettings>
		constexpr auto bUseEAS = 0x80; // bool
		constexpr auto bUseEOSConnect = 0x81; // bool
		constexpr auto bMirrorStatsToEOS = 0x82; // bool
		constexpr auto bMirrorAchievementsToEOS = 0x83; // bool
		constexpr auto bUseEOSSessions = 0x84; // bool
		constexpr auto bMirrorPresenceToEAS = 0x85; // bool
	}

	namespace n_UMatchmakingDifficultyUserWidget {
		constexpr auto OnDifficultyFocused = 0x458; // FMulticastInlineDelegate
	}

	namespace n_UPvPEventsFeedUserWidget {
		constexpr auto EntryWidget = 0x458; // UGobiUserWidget*
		constexpr auto MaxEntries = 0x460; // int32_t
		constexpr auto EntryExpireSeconds = 0x464; // float
		constexpr auto PvPEventEntries = 0x468; // TArray<FPvPEventData>
	}

	namespace n_USourceEffectWaveShaperPreset {
		constexpr auto Settings = 0x78; // FSourceEffectWaveShaperSettings
	}

	namespace n_UPawnAction_Repeat {
		constexpr auto ActionToRepeat = 0xa0; // UPawnAction*
		constexpr auto RecentActionCopy = 0xa8; // UPawnAction*
		constexpr auto ChildFailureHandlingMode = 0xb0; // EPawnActionFailHandling
	}

	namespace n_UInterpTrackFloatMaterialParam {
		constexpr auto TargetMaterials = 0x98; // TArray<UMaterialInterface*>
		constexpr auto ParamName = 0xa8; // FName
	}

	namespace n_UNiagaraPreviewAxis_InterpParamVector2D {
		constexpr auto Min = 0x40; // FVector2D
		constexpr auto Max = 0x48; // FVector2D
	}

	namespace n_UMatchSettingToggleButtonUserWidget {
		constexpr auto OnSuccessfulClick = 0x458; // FMulticastInlineDelegate
		constexpr auto bIsToggle = 0x469; // bool
		constexpr auto CheckBoxCheckedImage = 0x470; // UTexture2D*
		constexpr auto CheckBoxUncheckedImage = 0x478; // UTexture2D*
	}

	namespace n_UARTrackableNotifyComponent {
		constexpr auto OnAddTrackedGeometry = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedGeometry = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedGeometry = 0x108; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedPlane = 0x118; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedPlane = 0x128; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedPlane = 0x138; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedPoint = 0x148; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedPoint = 0x158; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedPoint = 0x168; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedImage = 0x178; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedImage = 0x188; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedImage = 0x198; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedFace = 0x1a8; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedFace = 0x1b8; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedFace = 0x1c8; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedEnvProbe = 0x1d8; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedEnvProbe = 0x1e8; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedEnvProbe = 0x1f8; // FMulticastInlineDelegate
		constexpr auto OnAddTrackedObject = 0x208; // FMulticastInlineDelegate
		constexpr auto OnUpdateTrackedObject = 0x218; // FMulticastInlineDelegate
		constexpr auto OnRemoveTrackedObject = 0x228; // FMulticastInlineDelegate
	}

	namespace n_UMutilationConfig {
		constexpr auto Pieces = 0x38; // TMap<EMutilationRegion, FMutilationPieceConfig>
		constexpr auto bSkelPiecesCanStopTicking = 0x88; // bool
		constexpr auto ExplodeRegions = 0x8c; // int32_t
		constexpr auto DismemberedPieceSkelMeshActor = 0x90; // AActor*
		constexpr auto DismemberedPieceStaticMeshActor = 0x98; // AActor*
	}

	namespace n_UARCandidateObject {
		constexpr auto CandidateObjectData = 0x38; // TArray<char>
		constexpr auto FriendlyName = 0x48; // FString
		constexpr auto BoundingBox = 0x58; // FBox
	}

	namespace n_UMaterialExpressionPerInstanceCustomData {
		constexpr auto DefaultValue = 0x48; // FExpressionInput
		constexpr auto ConstDefaultValue = 0x5c; // float
		constexpr auto DataIndex = 0x60; // uint32_t
	}

	namespace n_UParticleModuleLocationDirect {
		constexpr auto Location = 0x38; // FRawDistributionVector
		constexpr auto LocationOffset = 0x80; // FRawDistributionVector
		constexpr auto ScaleFactor = 0xc8; // FRawDistributionVector
		constexpr auto Direction = 0x110; // FRawDistributionVector
	}

	namespace n_UCameraModifier_CameraShake {
		constexpr auto ActiveShakes = 0x50; // TArray<FActiveCameraShakeInfo>
		constexpr auto ExpiredPooledShakesMap = 0x60; // TMap<UCameraShake*, FPooledCameraShakes>
		constexpr auto SplitScreenShakeScale = 0xb0; // float
	}

	namespace n_ULeaderboardListItem {
		constexpr auto Data = 0x30; // FLeaderboardData
		constexpr auto Index = 0x48; // int32_t
		constexpr auto ChallengeRankName = 0x50; // FText
		constexpr auto ChallengeRankIcon = 0x68; // UTexture2D*
		constexpr auto bIsLocalPlayer = 0x70; // bool
	}

	namespace n_UPhysicsHandleComponent {
		constexpr auto GrabbedComponent = 0xe8; // UPrimitiveComponent*
		constexpr auto bSoftAngularConstraint = 0xf8; // char : 1
		constexpr auto bSoftLinearConstraint = 0xf8; // char : 1
		constexpr auto bInterpolateTarget = 0xf8; // char : 1
		constexpr auto LinearDamping = 0xfc; // float
		constexpr auto LinearStiffness = 0x100; // float
		constexpr auto AngularDamping = 0x104; // float
		constexpr auto AngularStiffness = 0x108; // float
		constexpr auto InterpolationSpeed = 0x170; // float
	}

	namespace n_UOptionsToggleSpinnerWidget {
		constexpr auto SpinnerChanged = 0x458; // FMulticastInlineDelegate
	}

	namespace n_UMovieSceneObjectPropertyTrack {
		constexpr auto PropertyClass = 0x90; // UObject*
	}

	namespace n_UAkGameObject {
		constexpr auto AkAudioEvent = 0x230; // UAkAudioEvent*
		constexpr auto EventName = 0x238; // FString
	}

	namespace n_AAcousticVolume {
		constexpr auto BoundingBox = 0x2f8; // FBox
	}

	namespace n_UAnimNotifyState_TimedParticleEffect {
		constexpr auto PSTemplate = 0x38; // UParticleSystem*
		constexpr auto SocketName = 0x40; // FName
		constexpr auto LocationOffset = 0x48; // FVector
		constexpr auto RotationOffset = 0x54; // FRotator
		constexpr auto bDestroyAtEnd = 0x60; // bool
		constexpr auto OverrideComponentTag = 0x64; // FName
		constexpr auto AttachLocationType = 0x6c; // EAttachLocation
		constexpr auto TagQueryRequirment = 0x70; // FGameplayTagQuery
	}

	namespace n_UParticleModuleRequired {
		constexpr auto Material = 0x38; // UMaterialInterface*
		constexpr auto MinFacingCameraBlendDistance = 0x40; // float
		constexpr auto MaxFacingCameraBlendDistance = 0x44; // float
		constexpr auto EmitterOrigin = 0x48; // FVector
		constexpr auto EmitterRotation = 0x54; // FRotator
		constexpr auto ScreenAlignment = 0x60; // EParticleScreenAlignment
		constexpr auto bUseLocalSpace = 0x61; // char : 1
		constexpr auto bKillOnDeactivate = 0x61; // char : 1
		constexpr auto bKillOnCompleted = 0x61; // char : 1
		constexpr auto SortMode = 0x62; // EParticleSortMode
		constexpr auto bUseLegacyEmitterTime = 0x63; // char : 1
		constexpr auto bRemoveHMDRoll = 0x63; // char : 1
		constexpr auto bEmitterDurationUseRange = 0x63; // char : 1
		constexpr auto EmitterDuration = 0x64; // float
		constexpr auto SpawnRate = 0x68; // FRawDistributionFloat
		constexpr auto BurstList = 0x98; // TArray<FParticleBurst>
		constexpr auto EmitterDelay = 0xa8; // float
		constexpr auto EmitterDelayLow = 0xac; // float
		constexpr auto bDelayFirstLoopOnly = 0xb0; // char : 1
		constexpr auto InterpolationMethod = 0xb1; // EParticleSubUVInterpMethod
		constexpr auto bScaleUV = 0xb2; // char : 1
		constexpr auto bEmitterDelayUseRange = 0xb2; // char : 1
		constexpr auto ParticleBurstMethod = 0xb3; // EParticleBurstMethod
		constexpr auto bOverrideSystemMacroUV = 0xb4; // char : 1
		constexpr auto bUseMaxDrawCount = 0xb4; // char : 1
		constexpr auto OpacitySourceMode = 0xb5; // EOpacitySourceMode
		constexpr auto EmitterNormalsMode = 0xb6; // EEmitterNormalsMode
		constexpr auto bOrbitModuleAffectsVelocityAlignment = 0xb7; // char : 1
		constexpr auto SubImages_Horizontal = 0xb8; // int32_t
		constexpr auto SubImages_Vertical = 0xbc; // int32_t
		constexpr auto RandomImageTime = 0xc0; // float
		constexpr auto RandomImageChanges = 0xc4; // int32_t
		constexpr auto MacroUVPosition = 0xc8; // FVector
		constexpr auto MacroUVRadius = 0xd4; // float
		constexpr auto UVFlippingMode = 0xd8; // EParticleUVFlipMode
		constexpr auto BoundingMode = 0xd9; // ESubUVBoundingVertexCount
		constexpr auto bDurationRecalcEachLoop = 0xda; // char : 1
		constexpr auto NormalsSphereCenter = 0xdc; // FVector
		constexpr auto AlphaThreshold = 0xe8; // float
		constexpr auto EmitterLoops = 0xec; // int32_t
		constexpr auto CutoutTexture = 0xf0; // UTexture2D*
		constexpr auto MaxDrawCount = 0xf8; // int32_t
		constexpr auto EmitterDurationLow = 0xfc; // float
		constexpr auto NormalsCylinderDirection = 0x100; // FVector
		constexpr auto NamedMaterialOverrides = 0x110; // TArray<FName>
	}

	namespace n_UGobiViewportClient {
		constexpr auto FOVManager = 0x3a0; // AFOVManager*
	}

	namespace n_UMatchmakingModeUserWidget {
		constexpr auto OnViewSwitched = 0x458; // FMulticastInlineDelegate
		constexpr auto bIsActive = 0x468; // bool
	}

	namespace n_UFindTurnBasedMatchCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UOptionsTextComboBoxWidget {
		constexpr auto ComboOptions = 0x480; // TMap<FString, FText>
	}

	namespace n_UBTDecorator_CheckEnemyDamageAttackable {
		constexpr auto EnemyBBKey = 0x70; // FBlackboardKeySelector
		constexpr auto bOwnerDamageOnly = 0x98; // bool
		constexpr auto MaxAttackFailures = 0xa0; // FAIDataProviderIntValue
		constexpr auto bUseAttackTime = 0xd8; // bool
		constexpr auto MaxTimeSinceAttackFailure = 0xe0; // FAIDataProviderFloatValue
		constexpr auto bUseAttackDistance = 0x118; // bool
		constexpr auto UseAttackLocation = 0x120; // FAIDataProviderBoolValue
		constexpr auto MinDistanceSinceAttackFailure = 0x158; // FAIDataProviderFloatValue
		constexpr auto MaxDistance = 0x190; // FAIDataProviderFloatValue
	}

	namespace n_UAnimNotify_FocusTrackingRefPose {
		constexpr auto RefPoseData = 0x40; // FFocusTrackingRefPose
		constexpr auto SlotName = 0xa0; // FName
	}

	namespace n_UFallingRockComponent {
		constexpr auto State = 0xe8; // EFallingRockState
		constexpr auto FallTells = 0xf0; // TArray<FFallingRockTell>
		constexpr auto ExplodeDuration = 0x100; // float
		constexpr auto ImpactEffectParticleSystemTag = 0x104; // FGameplayTag
	}

	namespace n_UParticleModuleMeshRotationRateMultiplyLife {
		constexpr auto LifeMultiplier = 0x38; // FRawDistributionVector
	}

	namespace n_UAssetManagerSettings {
		constexpr auto PrimaryAssetTypesToScan = 0x40; // TArray<FPrimaryAssetTypeInfo>
		constexpr auto DirectoriesToExclude = 0x50; // TArray<FDirectoryPath>
		constexpr auto PrimaryAssetRules = 0x60; // TArray<FPrimaryAssetRulesOverride>
		constexpr auto CustomPrimaryAssetRules = 0x70; // TArray<FPrimaryAssetRulesCustomOverride>
		constexpr auto bOnlyCookProductionAssets = 0x80; // bool
		constexpr auto bShouldManagerDetermineTypeAndName = 0x81; // bool
		constexpr auto bShouldGuessTypeAndNameInEditor = 0x82; // bool
		constexpr auto bShouldAcquireMissingChunksOnLoad = 0x83; // bool
		constexpr auto PrimaryAssetIdRedirects = 0x88; // TArray<FAssetManagerRedirect>
		constexpr auto PrimaryAssetTypeRedirects = 0x98; // TArray<FAssetManagerRedirect>
		constexpr auto AssetPathRedirects = 0xa8; // TArray<FAssetManagerRedirect>
		constexpr auto MetaDataTagsForAssetRegistry = 0xb8; // TSet<FName>
	}

	namespace n_UBTDecorator_KeepInCone {
		constexpr auto ConeHalfAngle = 0x70; // float
		constexpr auto ConeOrigin = 0x78; // FBlackboardKeySelector
		constexpr auto Observed = 0xa0; // FBlackboardKeySelector
		constexpr auto bUseSelfAsOrigin = 0xc8; // char : 1
		constexpr auto bUseSelfAsObserved = 0xc8; // char : 1
	}

	namespace n_UGameplayContext_MeleeImpactLocation {
		constexpr auto MeleeComponentGameplayTag = 0x78; // FGameplayTag
	}

	namespace n_AControlPointMeshActor {
		constexpr auto ControlPointMeshComponent = 0x2a0; // UControlPointMeshComponent*
	}

	namespace n_UObservationSystemSettings {
		constexpr auto ObserverUpdateTime = 0x30; // float
		constexpr auto ObservationUpdateTime = 0x34; // float
		constexpr auto DefaultLOSCollisionChannel = 0x38; // ECollisionChannel
		constexpr auto bTraceComplex = 0x39; // bool
		constexpr auto Tick = 0x3a; // EObservationTick
	}

	namespace n_UAnimBoneCompressionCodec_ACL {
		constexpr auto SafetyFallbackCodec = 0x40; // UAnimBoneCompressionCodec*
	}

	namespace n_UARPin {
		constexpr auto TrackedGeometry = 0x30; // UARTrackedGeometry*
		constexpr auto PinnedComponent = 0x38; // USceneComponent*
		constexpr auto LocalToTrackingTransform = 0x40; // FTransform
		constexpr auto LocalToAlignedTrackingTransform = 0x70; // FTransform
		constexpr auto TrackingState = 0xa0; // EARTrackingState
		constexpr auto OnARTrackingStateChanged = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnARTransformUpdated = 0xd0; // FMulticastInlineDelegate
	}

	namespace n_ATransformGizmoActor {
		constexpr auto TranslateX = 0x2a0; // UPrimitiveComponent*
		constexpr auto TranslateY = 0x2a8; // UPrimitiveComponent*
		constexpr auto TranslateZ = 0x2b0; // UPrimitiveComponent*
		constexpr auto TranslateYZ = 0x2b8; // UPrimitiveComponent*
		constexpr auto TranslateXZ = 0x2c0; // UPrimitiveComponent*
		constexpr auto TranslateXY = 0x2c8; // UPrimitiveComponent*
		constexpr auto RotateX = 0x2d0; // UPrimitiveComponent*
		constexpr auto RotateY = 0x2d8; // UPrimitiveComponent*
		constexpr auto RotateZ = 0x2e0; // UPrimitiveComponent*
		constexpr auto UniformScale = 0x2e8; // UPrimitiveComponent*
		constexpr auto AxisScaleX = 0x2f0; // UPrimitiveComponent*
		constexpr auto AxisScaleY = 0x2f8; // UPrimitiveComponent*
		constexpr auto AxisScaleZ = 0x300; // UPrimitiveComponent*
		constexpr auto PlaneScaleYZ = 0x308; // UPrimitiveComponent*
		constexpr auto PlaneScaleXZ = 0x310; // UPrimitiveComponent*
		constexpr auto PlaneScaleXY = 0x318; // UPrimitiveComponent*
	}

	namespace n_UCommWheelActionsData {
		constexpr auto ActionDefinitions = 0x38; // TMap<ECommWheelAction, FCommWheelActionDefinition>
		constexpr auto SurvivorActions = 0x88; // TArray<FCommWheelActionPage>
		constexpr auto ZombieActions = 0x98; // TArray<FCommWheelActionPage>
	}

	namespace n_UEconomyAnalyticsComponent {
		constexpr auto EntitlementsTable = 0x150; // UDataTable*
	}

	namespace n_UNiagaraEventReceiverEmitterAction_SpawnParticles {
		constexpr auto NumParticles = 0x30; // uint32_t
	}

	namespace n_UAnimNotifyState_ApplyGameplayEffects {
		constexpr auto GameplayEffects = 0x38; // TArray<UGameplayEffect*>
	}

	namespace n_UHealthComponent {
		constexpr auto OnDamage = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnDeath = 0x160; // FMulticastInlineDelegate
		constexpr auto OnHeal = 0x170; // FMulticastInlineDelegate
		constexpr auto OnHealthChanged = 0x198; // FMulticastInlineDelegate
		constexpr auto OnTemporaryHealthChanged = 0x1a8; // FMulticastInlineDelegate
		constexpr auto OnRecentDamageInfoChanged = 0x1b8; // FMulticastInlineDelegate
		constexpr auto HealingReceivedScale = 0x1f0; // FGamePropertyFloat
		constexpr auto HealingAppliedScale = 0x228; // FGamePropertyFloat
		constexpr auto TemporaryHealingReceivedScale = 0x260; // FGamePropertyFloat
		constexpr auto TemporaryHealingAppliedScale = 0x298; // FGamePropertyFloat
		constexpr auto CriticalHealMultiplier = 0x340; // FGamePropertyFloat
		constexpr auto PermanentDamageScale = 0x378; // FGamePropertyFloat
		constexpr auto HealthRegenPerSecond = 0x3b0; // FGamePropertyFloat
		constexpr auto HealthDepletedMaxHealthPenalty = 0x3e8; // FGamePropertyFloat
		constexpr auto InitialHealthPercent = 0x420; // float
		constexpr auto InitialMaxHealth = 0x428; // FGamePropertyFloat
		constexpr auto MaxHealthLowerLimit = 0x460; // float
		constexpr auto HealthTuning = 0x468; // FHealthTuning
		constexpr auto CurrentMaxHealth = 0x5b0; // float
		constexpr auto DamageFilterClass = 0x5b8; // UDamageFilter*
		constexpr auto MaxRecentDamageInfo = 0x5d0; // int32_t
		constexpr auto DefaultTempHealthParams = 0x5d8; // FTemporaryHealthParams
		constexpr auto RecentDamageInfo = 0x5f0; // TArray<FReplicatedDamageInfo>
		constexpr auto ArmorComponent = 0x608; // UArmorComponent*
		constexpr auto WeakSpotsComponent = 0x610; // UWeakSpotsComponent*
		constexpr auto Health = 0x618; // float
		constexpr auto TemporaryHealth = 0x61c; // float
		constexpr auto TemporaryHealthParams = 0x628; // FTemporaryHealthParams
		constexpr auto HealEventCounter = 0x640; // int32_t
		constexpr auto PermanentDamageBlockingTagQuery = 0x718; // FGameplayTagQuery
		constexpr auto WeakSpotOnlyDamageTagQuery = 0x760; // FGameplayTagQuery
		constexpr auto TemporaryHealthGrantedTags = 0x7a8; // FGameplayTagContainer
		constexpr auto PersistentHealthName = 0x7c8; // FName
		constexpr auto bAllowDamageNumbers = 0x7d0; // bool
		constexpr auto bIgnoreDamageFromBots = 0x7d1; // bool
	}

	namespace n_UAnimNotify_AddTagToAttachedEnemy {
		constexpr auto TagsToAdd = 0x40; // FGameplayTagContainer
		constexpr auto EnemyContextClass = 0x60; // UAnimContext_Enemy*
	}

	namespace n_UGarbageCollectionSettings {
		constexpr auto TimeBetweenPurgingPendingKillObjects = 0x40; // float
		constexpr auto FlushStreamingOnGC = 0x44; // char : 1
		constexpr auto AllowParallelGC = 0x44; // char : 1
		constexpr auto ForceParallelGCOnDedicatedServers = 0x44; // char : 1
		constexpr auto IncrementalBeginDestroyEnabled = 0x44; // char : 1
		constexpr auto MultithreadedDestructionEnabled = 0x44; // char : 1
		constexpr auto CreateGCClusters = 0x44; // char : 1
		constexpr auto AssetClusteringEnabled = 0x44; // char : 1
		constexpr auto ActorClusteringEnabled = 0x44; // char : 1
		constexpr auto BlueprintClusteringEnabled = 0x45; // char : 1
		constexpr auto UseDisregardForGCOnDedicatedServers = 0x45; // char : 1
		constexpr auto MinGCClusterSize = 0x48; // int32_t
		constexpr auto NumRetriesBeforeForcingGC = 0x4c; // int32_t
		constexpr auto MaxObjectsNotConsideredByGC = 0x50; // int32_t
		constexpr auto SizeOfPermanentObjectPool = 0x54; // int32_t
		constexpr auto MaxObjectsInGame = 0x58; // int32_t
		constexpr auto MaxObjectsInEditor = 0x5c; // int32_t
	}

	namespace n_UMaterialExpressionPrimitiveParameter {
		constexpr auto Collection = 0x48; // UPrimitiveParameterCollection*
		constexpr auto ParameterName = 0x50; // FName
		constexpr auto ParameterIndex = 0x58; // int32_t
	}

	namespace n_UPreRenderedCinematicScreen {
		constexpr auto CinematicRowHandle = 0x558; // FDataTableRowHandle
		constexpr auto MediaPlayer = 0x578; // UMediaPlayer*
	}

	namespace n_UGameplayAction_HagDeath {
		constexpr auto MontageSets = 0x210; // TArray<UMontageSet*>
		constexpr auto EnemyContextClass = 0x220; // UAnimContext_Enemy*
		constexpr auto AttachSkeletalMeshTag = 0x228; // FGameplayTag
		constexpr auto AttachSkeletalMeshBone = 0x230; // FName
		constexpr auto AttachRelativeRotation = 0x238; // FRotator
		constexpr auto AttachTargetEffects = 0x248; // TArray<UGameplayEffect*>
	}

	namespace n_ULadderUsableComponent {
		constexpr auto ReleasePromptText = 0x4f8; // FText
	}

	namespace n_ATitan_AcidBloodPool_S2_BP_C {
		constexpr auto UberGraphFrame = 0x338; // FPointerToUberGraphFrame
		constexpr auto Box = 0x340; // UBoxComponent*
		constexpr auto GameplayEffectEmitter = 0x348; // UGameplayEffectEmitterComponent*
	}

	namespace n_UGameplayEffectApplyGE {
		constexpr auto EffectClass = 0x238; // UGameplayEffect*
	}

	namespace n_UParticleModuleTypeDataGpu {
		constexpr auto EmitterInfo = 0x40; // FGPUSpriteEmitterInfo
		constexpr auto ResourceData = 0x2c0; // FGPUSpriteResourceData
		constexpr auto CameraMotionBlurAmount = 0x420; // float
		constexpr auto bClearExistingParticlesOnInit = 0x424; // char : 1
	}

	namespace n_ARectLight {
		constexpr auto RectLightComponent = 0x2b0; // URectLightComponent*
	}

	namespace n_UPostRoundChallengeResultsUserWidget {
		constexpr auto ScoreCountAnim = 0x458; // FGobiCountAnim
		constexpr auto ScoreDiffCountAnim = 0x480; // FGobiCountAnim
		constexpr auto NewBestScoreCountAnim = 0x4a8; // FGobiCountAnim
		constexpr auto RankCountAnim = 0x4d0; // FGobiCountAnim
		constexpr auto RankDiffCountAnim = 0x4f8; // FGobiCountAnim
		constexpr auto SupplyPointsCountAnim = 0x520; // FGobiCountAnim
		constexpr auto ObjectiveDelay = 0x548; // float
	}

	namespace n_UTestMovieSceneSubTrack {
		constexpr auto SectionArray = 0x70; // TArray<UMovieSceneSection*>
	}

	namespace n_UAnimSharingAdditiveInstance {
		constexpr auto BaseComponent = 0x2b8; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto AdditiveAnimation = 0x2c0; // TWeakObjectPtr<UAnimSequence>
		constexpr auto Alpha = 0x2c8; // float
		constexpr auto bStateBool = 0x2cc; // bool
	}

	namespace n_UMaterialExpressionLandscapeLayerSample {
		constexpr auto ParameterName = 0x48; // FName
		constexpr auto PreviewWeight = 0x50; // float
		constexpr auto ExpressionGUID = 0x54; // FGuid
	}

	namespace n_UCompositionGraphCaptureProtocol {
		constexpr auto IncludeRenderPasses = 0x60; // FCompositionGraphCapturePasses
		constexpr auto bCaptureFramesInHDR = 0x70; // bool
		constexpr auto HDRCompressionQuality = 0x74; // int32_t
		constexpr auto CaptureGamut = 0x78; // EHDRCaptureGamut
		constexpr auto PostProcessingMaterial = 0x80; // FSoftObjectPath
		constexpr auto bDisableScreenPercentage = 0x98; // bool
		constexpr auto PostProcessingMaterialPtr = 0xa0; // UMaterialInterface*
	}

	namespace n_ULandscapeSplinesComponent {
		constexpr auto ControlPoints = 0x4b0; // TArray<ULandscapeSplineControlPoint*>
		constexpr auto Segments = 0x4c0; // TArray<ULandscapeSplineSegment*>
		constexpr auto CookedForeignMeshComponents = 0x4d0; // TArray<UMeshComponent*>
	}

	namespace n_UProceduralMeshComponent {
		constexpr auto bUseComplexAsSimpleCollision = 0x530; // bool
		constexpr auto bUseAsyncCooking = 0x531; // bool
		constexpr auto ProcMeshBodySetup = 0x538; // UBodySetup*
		constexpr auto ProcMeshSections = 0x540; // TArray<FProcMeshSection>
		constexpr auto CollisionConvexElems = 0x550; // TArray<FKConvexElem>
		constexpr auto LocalBounds = 0x560; // FBoxSphereBounds
		constexpr auto AsyncBodySetupQueue = 0x580; // TArray<UBodySetup*>
	}

	namespace n_ASkyAtmosphere {
		constexpr auto SkyAtmosphereComponent = 0x2a0; // USkyAtmosphereComponent*
	}

	namespace n_UBTTask_UseSmartActor {
		constexpr auto SmartActorBlackboardKey = 0x78; // FBlackboardKeySelector
	}

	namespace n_AProjectilePin {
		constexpr auto BlockingTargetTags = 0x2a0; // FGameplayTagQuery
		constexpr auto MaxPinTime = 0x2e8; // float
		constexpr auto bUseOwnerChargePinTime = 0x2ec; // bool
		constexpr auto bDestroyOnInstigatorDeath = 0x2ed; // bool
		constexpr auto OwnerThrowComponentTag = 0x2f0; // FGameplayTag
		constexpr auto AttachBone = 0x2f8; // FName
		constexpr auto bIgnoreParentRotation = 0x300; // bool
		constexpr auto VictimCancelTags = 0x308; // FGameplayTagContainer
		constexpr auto ApplyPinnedEffects = 0x328; // TArray<UGameplayEffect*>
		constexpr auto ApplyInstigatorEffects = 0x338; // TArray<UGameplayEffect*>
		constexpr auto SpawnEmitterOnDestroy = 0x348; // UParticleSystem*
		constexpr auto CurrentState = 0x354; // EProjectilePinState
	}

	namespace n_UAnimMontage {
		constexpr auto BlendIn = 0xc0; // FAlphaBlend
		constexpr auto BlendInTime = 0xf0; // float
		constexpr auto BlendOut = 0xf8; // FAlphaBlend
		constexpr auto BlendOutTime = 0x128; // float
		constexpr auto BlendOutTriggerTime = 0x12c; // float
		constexpr auto SyncGroup = 0x130; // FName
		constexpr auto SyncSlotIndex = 0x138; // int32_t
		constexpr auto MarkerData = 0x140; // FMarkerSyncData
		constexpr auto CompositeSections = 0x160; // TArray<FCompositeSection>
		constexpr auto SlotAnimTracks = 0x170; // TArray<FSlotAnimationTrack>
		constexpr auto BranchingPoints = 0x180; // TArray<FBranchingPoint>
		constexpr auto bEnableRootMotionTranslation = 0x190; // bool
		constexpr auto bEnableRootMotionRotation = 0x191; // bool
		constexpr auto bEnableAutoBlendOut = 0x192; // bool
		constexpr auto RootMotionRootLock = 0x193; // ERootMotionRootLock
		constexpr auto BranchingPointMarkers = 0x198; // TArray<FBranchingPointMarker>
		constexpr auto BranchingPointStateNotifyIndices = 0x1a8; // TArray<int32_t>
		constexpr auto TimeStretchCurve = 0x1b8; // FTimeStretchCurve
		constexpr auto TimeStretchCurveName = 0x1e0; // FName
	}

	namespace n_UVolumeTexture {
		constexpr auto UAV = 0x118; // char : 1
	}

	namespace n_UEnvQueryTest_Trace {
		constexpr auto TraceData = 0x208; // FEnvTraceData
		constexpr auto TraceFromContext = 0x238; // FAIDataProviderBoolValue
		constexpr auto ItemHeightOffset = 0x270; // FAIDataProviderFloatValue
		constexpr auto ContextHeightOffset = 0x2a8; // FAIDataProviderFloatValue
		constexpr auto Context = 0x2e0; // UEnvQueryContext*
	}

	namespace n_UNiagaraSystem {
		constexpr auto bDumpDebugSystemInfo = 0x39; // bool
		constexpr auto bDumpDebugEmitterInfo = 0x3a; // bool
		constexpr auto bFixedBounds = 0x3c; // char : 1
		constexpr auto EffectType = 0x40; // UNiagaraEffectType*
		constexpr auto bOverrideScalabilitySettings = 0x48; // bool
		constexpr auto ScalabilityOverrides = 0x50; // TArray<FNiagaraSystemScalabilityOverride>
		constexpr auto SystemScalabilityOverrides = 0x60; // FNiagaraSystemScalabilityOverrides
		constexpr auto EmitterHandles = 0x70; // TArray<FNiagaraEmitterHandle>
		constexpr auto ParameterCollectionOverrides = 0x80; // TArray<UNiagaraParameterCollectionInstance*>
		constexpr auto SystemSpawnScript = 0x90; // UNiagaraScript*
		constexpr auto SystemUpdateScript = 0x98; // UNiagaraScript*
		constexpr auto SystemCompiledData = 0xb0; // FNiagaraSystemCompiledData
		constexpr auto ExposedParameters = 0x308; // FNiagaraUserRedirectionParameterStore
		constexpr auto FixedBounds = 0x410; // FBox
		constexpr auto bAutoDeactivate = 0x42c; // bool
		constexpr auto WarmupTime = 0x430; // float
		constexpr auto WarmupTickCount = 0x434; // int32_t
		constexpr auto WarmupTickDelta = 0x438; // float
		constexpr auto bHasSystemScriptDIsWithPerInstanceData = 0x43c; // bool
		constexpr auto UserDINamesReadInSystemScripts = 0x440; // TArray<FName>
	}

	namespace n_UBTTask_BlackboardBase {
		constexpr auto BlackboardKey = 0x78; // FBlackboardKeySelector
	}

	namespace n_AFlashlightVolume {
		constexpr auto bDisableFlashlightDialogue = 0x2d8; // bool
		constexpr auto TimeBetweenOnOffDialogue = 0x2dc; // float
	}

	namespace n_URadialIntMask {
		constexpr auto Radius = 0xe8; // float
		constexpr auto Position = 0xec; // FVector
		constexpr auto InteriorValue = 0xf8; // int32_t
		constexpr auto ExteriorValue = 0xfc; // int32_t
		constexpr auto SetMaskCondition = 0x100; // ESetMaskConditionType
	}

	namespace n_UOnlineSessions {
		constexpr auto TimerConfig = 0x48; // FTaskTimerConfig
	}

	namespace n_UPlatformMediaSource {
		constexpr auto MediaSource = 0x88; // UMediaSource*
	}

	namespace n_UGizmoAxisIntervalParameterSource {
		constexpr auto FloatParameterSource = 0x50; // TScriptInterface<IGizmoFloatParameterSource>
		constexpr auto MinParameter = 0x60; // float
		constexpr auto MaxParameter = 0x64; // float
	}

	namespace n_UMaterialExpressionVectorNoise {
		constexpr auto Position = 0x48; // FExpressionInput
		constexpr auto NoiseFunction = 0x5c; // EVectorNoiseFunction
		constexpr auto Quality = 0x60; // int32_t
		constexpr auto bTiling = 0x64; // char : 1
		constexpr auto TileSize = 0x68; // uint32_t
	}

	namespace n_UPlayerSprintComponent {
		constexpr auto SprintConfig = 0x130; // FSprintConfig
		constexpr auto SprintMoveTickData = 0x1d0; // FSprintStateData
	}

	namespace n_UUniformGridSlot {
		constexpr auto HorizontalAlignment = 0x40; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x41; // EVerticalAlignment
		constexpr auto Row = 0x44; // int32_t
		constexpr auto Column = 0x48; // int32_t
	}

	namespace n_UMainMenuScreenManager {
		constexpr auto CaravanManager = 0x278; // UCaravanManager*
		constexpr auto StaticMOTDEntries = 0x280; // TArray<FMOTDTab>
	}

	namespace n_UActorSequence {
		constexpr auto MovieScene = 0x350; // UMovieScene*
		constexpr auto ObjectReferences = 0x358; // FActorSequenceObjectReferenceMap
	}

	namespace n_UEnvQueryTest_Overlap {
		constexpr auto OverlapData = 0x208; // FEnvOverlapData
	}

	namespace n_UAnimNotifyState_AttachActor {
		constexpr auto AttachActor = 0x38; // UAnimContext_Actor*
		constexpr auto AttachSkeletalMeshTag = 0x40; // FGameplayTag
		constexpr auto AttachSkeletalMeshBone = 0x48; // FName
		constexpr auto AttachRelativeRotation = 0x50; // FRotator
		constexpr auto AttachTargetEffects = 0x60; // TArray<UGameplayEffect*>
		constexpr auto bAuoDetachOnEnd = 0x70; // bool
		constexpr auto bIncapActorOnDetach = 0x71; // bool
	}

	namespace n_URandomVector {
		constexpr auto Magnitude = 0xe8; // float
	}

	namespace n_UHUDMissionObjectiveEntryUserWidget {
		constexpr auto ObjectiveHandle = 0x458; // FDataTableRowHandle
		constexpr auto ObjectiveState = 0x478; // EObjectiveState
		constexpr auto StateToSound = 0x480; // TMap<EObjectiveState, UAkAudioEvent*>
		constexpr auto LOW_TIMER_THRESHOLD = 0x4d0; // int32_t
	}

	namespace n_UGizmoTransformProxyTransformSource {
		constexpr auto Proxy = 0x50; // UTransformProxy*
	}

	namespace n_UEnvQueryTest_ActiveAreaSetVisibility {
		constexpr auto Visibility = 0x208; // int32_t
	}

	namespace n_UBTService_CanTriggerAction {
		constexpr auto ActionsToCheck = 0x78; // TArray<FActionToCheck>
		constexpr auto MatchingTagType = 0x88; // EGameplayActionMatchingTagType
		constexpr auto bTestIsEnabledForActor = 0x89; // bool
	}

	namespace n_UApplyOnItemThrownMod {
		constexpr auto ItemTagQuery = 0xd0; // FGameplayTagQuery
		constexpr auto CharacterEmitterDef = 0x118; // FCharacterEmitterDef
	}

	namespace n_UMaterialExpressionTextureSampleParameterSubUV {
		constexpr auto bBlend = 0xf8; // char : 1
	}

	namespace n_UBTService_BlackboardValues {
		constexpr auto Values = 0x78; // TArray<FBlackBoardValue>
	}

	namespace n_UAISense_Sight {
		constexpr auto MaxTracesPerTick = 0x150; // int32_t
		constexpr auto MinQueriesPerTimeSliceCheck = 0x154; // int32_t
		constexpr auto MaxTimeSlicePerTick = 0x158; // double
		constexpr auto HighImportanceQueryDistanceThreshold = 0x160; // float
		constexpr auto MaxQueryImportance = 0x168; // float
		constexpr auto SightLimitQueryImportance = 0x16c; // float
	}

	namespace n_UAnimNotify_ApplyGameplayEffect {
		constexpr auto bUnconditional = 0x40; // bool
		constexpr auto Distance = 0x44; // float
		constexpr auto bApplyToCharactersOnly = 0x48; // bool
		constexpr auto ApplyToCharacterTeams = 0x4c; // int32_t
		constexpr auto OverlapCollisionProfile = 0x50; // FCollisionProfileName
		constexpr auto bRequiresLineOfSight = 0x58; // bool
		constexpr auto bCheckLineOfSightToWeakSpots = 0x59; // bool
		constexpr auto LineOfSightTargetComponentTag = 0x5c; // FName
		constexpr auto bUseTargetEyePosForLoS = 0x64; // bool
		constexpr auto bSkipLOSForHostileTargets = 0x65; // bool
		constexpr auto BoneName = 0x68; // FName
		constexpr auto bExcludeInstigatingActor = 0x70; // bool
		constexpr auto bExcludeGodPlayers = 0x71; // bool
		constexpr auto bFavorWeakspots = 0x72; // bool
		constexpr auto GameplayEffects = 0x78; // TArray<UGameplayEffect*>
	}

	namespace n_ALight {
		constexpr auto LightComponent = 0x2a0; // ULightComponent*
		constexpr auto bEnabled = 0x2a8; // char : 1
	}

	namespace n_UAnimContext_PounceDestination {
		constexpr auto Pounce = 0x70; // UAnimContext_PounceComponent*
	}

	namespace n_UFireModeShotgunComponent {
		constexpr auto FireModeShotgunTuning = 0x808; // FFireModeShotgunTuning
	}

	namespace n_UTerrainFollowerComponent {
		constexpr auto bOrientMesh = 0xe8; // bool
		constexpr auto LerpSpeed = 0xec; // float
	}

	namespace n_UShapeComponent {
		constexpr auto ShapeBodySetup = 0x4b0; // UBodySetup*
		constexpr auto AreaClass = 0x4b8; // UNavAreaBase*
		constexpr auto ShapeColor = 0x4c0; // FColor
		constexpr auto bDrawOnlyIfSelected = 0x4c4; // char : 1
		constexpr auto bShouldCollideWhenPlacing = 0x4c4; // char : 1
		constexpr auto bDynamicObstacle = 0x4c4; // char : 1
	}

	namespace n_UApplyOnTagMod {
		constexpr auto CharacterTagQuery = 0xe0; // FGameplayTagQuery
		constexpr auto CharacterEmitterDef = 0x128; // FCharacterEmitterDef
	}

	namespace n_UAmmoPouchComponent {
		constexpr auto UseCount = 0x52c; // int32_t
		constexpr auto AmmoPecentageToGrant = 0x530; // float [0x7]
		constexpr auto AKEOnUse = 0x550; // UAkAudioEvent*
	}

	namespace n_UTriggerHordeComponent {
		constexpr auto OnTriggerHordeEnded = 0x1e0; // FMulticastInlineDelegate
		constexpr auto TriggerHordeCue = 0x1f0; // FGameplayTag
		constexpr auto TriggerHordeTuning = 0x1f8; // FTriggerHordeTuning
		constexpr auto HordeLabel = 0x218; // FString
		constexpr auto TriggerHordeMontagesName = 0x228; // FName
		constexpr auto HordeCounter = 0x250; // int32_t
	}

	namespace n_ASkyLight {
		constexpr auto LightComponent = 0x2a0; // USkyLightComponent*
		constexpr auto bEnabled = 0x2a8; // char : 1
	}

	namespace n_UCollisionProfile {
		constexpr auto Profiles = 0x40; // TArray<FCollisionResponseTemplate>
		constexpr auto DefaultChannelResponses = 0x50; // TArray<FCustomChannelSetup>
		constexpr auto EditProfiles = 0x60; // TArray<FCustomProfile>
		constexpr auto ProfileRedirects = 0x70; // TArray<FRedirector>
		constexpr auto CollisionChannelRedirects = 0x80; // TArray<FRedirector>
		constexpr auto AutoApplySettingsPerCollisionProfile = 0x90; // TMap<FName, FAutoApplyProfileSettings>
	}

	namespace n_UHorizontalBoxSlot {
		constexpr auto Padding = 0x48; // FMargin
		constexpr auto Size = 0x58; // FSlateChildSize
		constexpr auto HorizontalAlignment = 0x60; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x61; // EVerticalAlignment
	}

	namespace n_UKeybindEntryUserWidget {
		constexpr auto OnEntryFocusGained = 0x458; // FMulticastInlineDelegate
	}

	namespace n_UGobiLoadingScreenSettings {
		constexpr auto DataSet = 0x40; // TSoftObjectPtr<UGobiLoadingScreenDataSet>
	}

	namespace n_UInteractiveGizmoManager {
		constexpr auto ActiveGizmos = 0x38; // TArray<FActiveGizmo>
		constexpr auto GizmoBuilders = 0x60; // TMap<FString, UInteractiveGizmoBuilder*>
	}

	namespace n_UMissionOverviewMapChainUserWidget {
		constexpr auto PipUserWidget = 0x458; // UMissionOverviewMapPipUserWidget*
		constexpr auto SubChainSpacerUserWidget = 0x460; // UUserWidget*
		constexpr auto PipSpacerUserWidget = 0x468; // UUserWidget*
	}

	namespace n_UInterpTrackVisibility {
		constexpr auto VisibilityTrack = 0x78; // TArray<FVisibilityTrackKey>
		constexpr auto bFireEventsWhenForwards = 0x88; // char : 1
		constexpr auto bFireEventsWhenBackwards = 0x88; // char : 1
		constexpr auto bFireEventsWhenJumpingForwards = 0x88; // char : 1
	}

	namespace n_UStereoLayerShapeEquirect {
		constexpr auto LeftUVRect = 0x30; // FBox2D
		constexpr auto RightUVRect = 0x44; // FBox2D
		constexpr auto LeftScale = 0x58; // FVector2D
		constexpr auto RightScale = 0x60; // FVector2D
		constexpr auto LeftBias = 0x68; // FVector2D
		constexpr auto RightBias = 0x70; // FVector2D
	}

	namespace n_AComms_DialogueSpeaker {
		constexpr auto VoiceRowHandle = 0x2b8; // FDataTableRowHandle
		constexpr auto AkComponent = 0x2d8; // UAkSimpleComponent*
		constexpr auto DialogueComp = 0x2e0; // UGobiDialogueComponent*
		constexpr auto CurrentVoiceLine = 0x300; // FString
		constexpr auto DialogueStopEvent = 0x310; // UAkAudioEvent*
	}

	namespace n_UHeroLedgeHangComponent {
		constexpr auto Config = 0x130; // FHeroLedgeHangConfig
		constexpr auto MoveTickData = 0x1c0; // FHeroLedgeHangData
	}

	namespace n_UCircularThrobber {
		constexpr auto NumberOfPieces = 0x148; // int32_t
		constexpr auto Period = 0x14c; // float
		constexpr auto Radius = 0x150; // float
		constexpr auto PieceImage = 0x158; // USlateBrushAsset*
		constexpr auto Image = 0x160; // FSlateBrush
		constexpr auto bEnableRadius = 0x1f0; // bool
	}

	namespace n_UBTService_RunEQS {
		constexpr auto EQSRequest = 0xa0; // FEQSParametrizedQueryExecutionRequest
		constexpr auto bClearBlackboardOnNoResults = 0x120; // bool
		constexpr auto bClearBlackboardOnInvalidEQS = 0x121; // bool
	}

	namespace n_UEmitterNodeBase {
		constexpr auto Position = 0x30; // FVector
		constexpr auto ReferenceActorTransform = 0x40; // FTransform
	}

	namespace n_UMaterialExpressionGIReplace {
		constexpr auto Default = 0x48; // FExpressionInput
		constexpr auto StaticIndirect = 0x5c; // FExpressionInput
		constexpr auto DynamicIndirect = 0x70; // FExpressionInput
	}

	namespace n_UBashHealthComponent {
		constexpr auto MaxBashesBeforeDeath = 0xe8; // int32_t
		constexpr auto bAIDieFromBashIfIdle = 0xec; // bool
		constexpr auto DamageTypeTagQuery = 0xf0; // FGameplayTagQuery
		constexpr auto DamageTypeOverride = 0x138; // UGobiDamageType*
	}

	namespace n_UEdGraph {
		constexpr auto Schema = 0x30; // UEdGraphSchema*
		constexpr auto Nodes = 0x38; // TArray<UEdGraphNode*>
		constexpr auto bEditable = 0x48; // char : 1
		constexpr auto bAllowDeletion = 0x48; // char : 1
		constexpr auto bAllowRenaming = 0x48; // char : 1
	}

	namespace n_UEnvQueryTest_CanHearSpawnActor {
		constexpr auto ListenerContext = 0x208; // UEnvQueryContext*
		constexpr auto ListenerZOffset = 0x210; // float
	}

	namespace n_AItemPickup {
		constexpr auto PingableVolume = 0x2a0; // UBoxComponent*
		constexpr auto StaticMeshComponent = 0x2a8; // UStaticMeshComponent*
		constexpr auto UsableVolumeComponent = 0x2b0; // USphereComponent*
		constexpr auto UsableComponent = 0x2b8; // UItemPickupUsableComponent*
		constexpr auto ItemObservableComponent = 0x2c0; // UItemObservableComponent*
		constexpr auto UsableHighlightComponent = 0x2c8; // UUsableHighlightComponent*
		constexpr auto OnItemsClaimed = 0x2e8; // FMulticastInlineDelegate
		constexpr auto OnItemsClaimedDetailed = 0x2f8; // FMulticastInlineDelegate
		constexpr auto CreationContext = 0x308; // EItemPickupCreationContext
		constexpr auto bGivesCard = 0x320; // bool
		constexpr auto bGivesBasicCard = 0x321; // bool
		constexpr auto GivenCardHandle = 0x328; // FDataTableRowHandle
		constexpr auto bApplyUsableConditionForGivenCard = 0x348; // bool
		constexpr auto GameplayCardCondition = 0x350; // FGameplayCardCondition
		constexpr auto CountType = 0x398; // EPickupCountType
		constexpr auto PickupSlot = 0x399; // EPickupSlot
		constexpr auto UpgradeOverrideTag = 0x39c; // FGameplayTag
		constexpr auto bDestroyWhenLastItemLooted = 0x3a4; // bool
		constexpr auto bAddItemAmmoOnPickup = 0x3a5; // bool
		constexpr auto ItemRowsAndQuantities = 0x3a8; // TArray<FItemRowAndQuantity>
		constexpr auto RandomItemRolls = 0x3b8; // TArray<FRandomItemTableRoll>
		constexpr auto ItemPickedUpCue = 0x3c8; // FGameplayTag
		constexpr auto DroppedSpeed = 0x3d0; // float
		constexpr auto DroppedRotationOffset = 0x3d4; // FRotator
		constexpr auto DroppedTranslationOffset = 0x3e0; // FVector
		constexpr auto KillZVolumesToIgnore = 0x3f0; // FGameplayTagQuery
		constexpr auto bEnablePingableVolume = 0x438; // bool
		constexpr auto PingIconOverride = 0x440; // UTexture2D*
		constexpr auto PingIconTint = 0x448; // FSlateColor
		constexpr auto QualityColor = 0x4a8; // TMap<EItemQuality, FLinearColor>
	}

	namespace n_USCS_Node {
		constexpr auto ComponentClass = 0x30; // UObject*
		constexpr auto ComponentTemplate = 0x38; // UActorComponent*
		constexpr auto CookedComponentInstancingData = 0x40; // FBlueprintCookedComponentInstancingData
		constexpr auto AttachToName = 0x88; // FName
		constexpr auto ParentComponentOrVariableName = 0x90; // FName
		constexpr auto ParentComponentOwnerClassName = 0x98; // FName
		constexpr auto bIsParentComponentNative = 0xa0; // bool
		constexpr auto ChildNodes = 0xa8; // TArray<USCS_Node*>
		constexpr auto MetaDataArray = 0xb8; // TArray<FBPVariableMetaDataEntry>
		constexpr auto VariableGuid = 0xc8; // FGuid
		constexpr auto InternalVariableName = 0xd8; // FName
	}

	namespace n_UGeometryCollectionDebugDrawComponent {
		constexpr auto GeometryCollectionDebugDrawActor = 0xe8; // AGeometryCollectionDebugDrawActor*
		constexpr auto GeometryCollectionRenderLevelSetActor = 0xf0; // AGeometryCollectionRenderLevelSetActor*
	}

	namespace n_UMaterialExpressionBlendMaterialAttributes {
		constexpr auto A = 0x48; // FMaterialAttributesInput
		constexpr auto B = 0x60; // FMaterialAttributesInput
		constexpr auto Alpha = 0x78; // FExpressionInput
		constexpr auto PixelAttributeBlendType = 0x8c; // EMaterialAttributeBlend
		constexpr auto VertexAttributeBlendType = 0x8d; // EMaterialAttributeBlend
	}

	namespace n_UPlayerAimAssistComponent {
		constexpr auto MinTargetingRange = 0x1b0; // float
		constexpr auto MaxTargetingRange = 0x1b4; // float
		constexpr auto MaxTargetingAngle = 0x1b8; // float
		constexpr auto PreviousTargetScoreWeight = 0x1bc; // float
		constexpr auto DistanceScoreWeight = 0x1c0; // float
		constexpr auto AngleScoreWeight = 0x1c4; // float
		constexpr auto bFrictionEnabled = 0x1c8; // bool
		constexpr auto VerticalInputFriction = 0x1cc; // float
		constexpr auto HorizontalInputFriction = 0x1d0; // float
		constexpr auto ADSFrictionScalar = 0x1d4; // float
		constexpr auto bADSSnapEnabled = 0x1d8; // bool
		constexpr auto ADSSnapSecs = 0x1dc; // float
		constexpr auto ADSSnapCooldownSecs = 0x1e0; // float
		constexpr auto MaxADSSnapAngle = 0x1e4; // float
		constexpr auto MaxBotADSSnapAngle = 0x1e8; // float
		constexpr auto ADSSnapExponent = 0x1ec; // float
		constexpr auto bTrackingEnabled = 0x1f0; // bool
		constexpr auto ADSTrackingStrength = 0x1f4; // float
		constexpr auto NonADSTrackingStrength = 0x1f8; // float
		constexpr auto TrackingPitchBlendInPercent = 0x1fc; // float
		constexpr auto SprintingTrackingStrengthScalar = 0x200; // float
		constexpr auto HordedEnemyCount = 0x204; // char
		constexpr auto HordedDistance = 0x208; // float
		constexpr auto MaxMagnetismPitch = 0x20c; // float
		constexpr auto MinMagnetismDeltaAnglePerSec = 0x210; // float
		constexpr auto MaxAsyncThreads = 0x214; // int8_t
	}

	namespace n_URadialVector {
		constexpr auto Magnitude = 0xe8; // float
		constexpr auto Position = 0xec; // FVector
	}

	namespace n_UNetworkSettings {
		constexpr auto bVerifyPeer = 0x40; // char : 1
		constexpr auto bEnableMultiplayerWorldOriginRebasing = 0x40; // char : 1
		constexpr auto MaxRepArraySize = 0x44; // int32_t
		constexpr auto MaxRepArrayMemory = 0x48; // int32_t
		constexpr auto PlayerNameMaxLength = 0x4c; // int32_t
		constexpr auto NetworkEmulationProfiles = 0x50; // TArray<FNetworkEmulationProfileDescription>
	}

	namespace n_UEnvironmentStatus_WBP_C {
		constexpr auto UberGraphFrame = 0x458; // FPointerToUberGraphFrame
		constexpr auto BucketText = 0x460; // UTextBlock*
		constexpr auto EnvironmentText = 0x468; // UTextBlock*
		constexpr auto NonStandardBackground = 0x470; // UImage*
		constexpr auto SeparatorText = 0x478; // UTextBlock*
	}

	namespace n_ADeathGasActor {
		constexpr auto SafeZone_Volume = 0x2a0; // UCapsuleComponent*
		constexpr auto OriginalMeshRadius = 0x2a8; // float
		constexpr auto StartingRadius = 0x2ac; // float
		constexpr auto EndingRadius = 0x2b0; // float
		constexpr auto TransitionTime = 0x2b4; // float
		constexpr auto WarmupTime = 0x2b8; // float
		constexpr auto Duration = 0x2bc; // float
		constexpr auto AppliedGameplayEffects = 0x2c0; // TArray<UGameplayEffect*>
		constexpr auto bStartImmediately = 0x2d0; // bool
		constexpr auto CurrentEffectRadius = 0x2d4; // float
		constexpr auto AppliedEffectsMap = 0x2e8; // TMap<AGobiCharacter*, FDeathGasAppliedEffects>
		constexpr auto CurrentState = 0x338; // EDeathGasState
	}

	namespace n_UParticleModuleAccelerationDrag {
		constexpr auto DragCoefficient = 0x40; // UDistributionFloat*
		constexpr auto DragCoefficientRaw = 0x48; // FRawDistributionFloat
	}

	namespace n_UPacketHandlerProfileConfig {
		constexpr auto Components = 0x30; // TArray<FString>
	}

	namespace n_UDifficultyManager {
		constexpr auto DifficultyData = 0x30; // TArray<FDifficultyRow>
	}

	namespace n_UToIntegerField {
		constexpr auto FloatField = 0xe8; // UFieldNodeFloat*
	}

	namespace n_UDatasmithActorTemplate {
		constexpr auto Layers = 0x38; // TSet<FName>
		constexpr auto Tags = 0x88; // TSet<FName>
	}

	namespace n_AGeometryCollectionActor {
		constexpr auto GeometryCollectionComponent = 0x2a0; // UGeometryCollectionComponent*
		constexpr auto GeometryCollectionDebugDrawComponent = 0x2a8; // UGeometryCollectionDebugDrawComponent*
	}

	namespace n_UStumbleDamageAccumulatorComponent {
		constexpr auto Config = 0xe8; // FDamageAccumulationConfig
	}

	namespace n_USteeringBehavior_SeekDir {
		constexpr auto SourceLocation = 0x58; // UAnimContext_Transform*
		constexpr auto TargetLocation = 0x60; // UAnimContext_Transform*
		constexpr auto bIgnoreZ = 0x68; // bool
		constexpr auto bUseCharacterEyeHeightForFocusOffset = 0x69; // bool
	}

	namespace n_UMaterialExpressionPreviousFrameSwitch {
		constexpr auto CurrentFrame = 0x48; // FExpressionInput
		constexpr auto PreviousFrame = 0x5c; // FExpressionInput
	}

	namespace n_UZombieMutationScreen {
		constexpr auto CalloutTooltipXOffset = 0x648; // float
		constexpr auto DefaultPurchaseSound = 0x650; // TSoftObjectPtr<UAkAudioEvent>
		constexpr auto ProgressUpgradeSound = 0x678; // TSoftObjectPtr<UAkAudioEvent>
		constexpr auto ErrorSound = 0x6a0; // TSoftObjectPtr<UAkAudioEvent>
		constexpr auto OpenPopupSound = 0x6c8; // TSoftObjectPtr<UAkAudioEvent>
		constexpr auto ZombieFamilyUserWidget = 0x6f0; // UZombieFamilyUserWidget*
		constexpr auto PopupAbilityWidget = 0x6f8; // UZombiePopupAbilityUserWidget*
		constexpr auto PopupMutationWidget = 0x700; // UZombiePopupMutationUserWidget*
		constexpr auto PopupMutationProgressBarWidget = 0x708; // UZombiePopupMutationProgressBarUserWidget*
		constexpr auto FocusedTreeHandle = 0x710; // FDataTableRowHandle
		constexpr auto FocusedVariantPawnClass = 0x730; // APawn*
		constexpr auto FocusedWidget = 0x738; // TWeakObjectPtr<UGobiUserWidget>
		constexpr auto ContextHBox = 0x748; // UHorizontalBox*
		constexpr auto FamilyHBox = 0x750; // UHorizontalBox*
		constexpr auto ContextOverlay = 0x758; // UOverlay*
		constexpr auto DescriptionText = 0x760; // UTextBlock*
		constexpr auto MainVBox = 0x768; // UVerticalBox*
	}

	namespace n_UGamepadOptionsPanelUserWidget {
		constexpr auto GamepadStickBindingData = 0x4a8; // TArray<UDataTable*>
	}

	namespace n_ULiteCharacterAudioComponent {
		constexpr auto DialogueBoneName = 0x100; // FName
		constexpr auto DialogueStopEvent = 0x108; // UAkAudioEvent*
		constexpr auto SoundCollection = 0x110; // USoundCollectionAsset*
		constexpr auto VoiceLineFinishedCallback = 0x118; // FDelegate
		constexpr auto AudioEmitter = 0x128; // TWeakObjectPtr<UAkSkeletalComponent>
		constexpr auto MeshComp = 0x130; // TWeakObjectPtr<USkeletalMeshComponent>
		constexpr auto CurrentVoiceLine = 0x140; // FString
	}

	namespace n_UMOTDPopupUserWidget {
		constexpr auto ButtonDelayTime = 0x478; // float
	}

	namespace n_UInterpTrackVectorBase {
		constexpr auto VectorTrack = 0x78; // FInterpCurveVector
		constexpr auto CurveTension = 0x90; // float
	}

	namespace n_UWidgetAnimationDelegateBinding {
		constexpr auto WidgetAnimationDelegateBindings = 0x30; // TArray<FBlueprintWidgetAnimationDelegateBinding>
	}

	namespace n_UAnimEvalSet_Heavy_Damage_DeathReaction_C {
		constexpr auto DamageAmountComparison = 0xc0; // FGameplayEval_DamageAmount
		constexpr auto DamageAmountRange = 0x158; // FGameplayEval_DamageRange
		constexpr auto DamageType = 0x220; // FGameplayEval_DamageType
		constexpr auto DamageBone = 0x2e0; // FGameplayEval_DamageBone
		constexpr auto DistanceToDamageSource = 0x340; // FGameplayEval_Distance
		constexpr auto AvatarHealth = 0x410; // FGameplayEval_Health
		constexpr auto AvatarTags = 0x468; // FGameplayEval_GameplayTags
		constexpr auto AvatarSpeed = 0x500; // FGameplayEval_SpeedRange
	}

	namespace n_UGeometryCacheTrack {
		constexpr auto Duration = 0x30; // float
	}

	namespace n_UAsyncActionChangePrimaryAssetBundles {
		constexpr auto Completed = 0x80; // FMulticastInlineDelegate
	}

	namespace n_UPaperDollWeaponSlotUserWidget {
		constexpr auto OnCanEquipAttachment = 0x468; // FDelegate
		constexpr auto OnTryEquipAttachment = 0x478; // FDelegate
	}

	namespace n_AJukebox {
		constexpr auto StaticMeshComponent = 0x2a0; // UStaticMeshComponent*
		constexpr auto UsableComponent = 0x2a8; // UUsableComponent*
		constexpr auto UsableTriggerComponent = 0x2b0; // UBoxComponent*
		constexpr auto AkComponent = 0x2b8; // UAkComponent*
		constexpr auto JukeboxMusicComp = 0x2c0; // UJukeboxMusicComponent*
		constexpr auto bAutoLoadNextSong = 0x2c8; // bool
		constexpr auto TurnOnText = 0x2d0; // FText
		constexpr auto TurnOffText = 0x2e8; // FText
		constexpr auto TurnOnUseTime = 0x300; // float
		constexpr auto TurnOffUseTime = 0x304; // float
		constexpr auto AKEBeginUse = 0x308; // UAkAudioEvent*
		constexpr auto AKEEndUse = 0x310; // UAkAudioEvent*
		constexpr auto OnButtonPressed = 0x318; // FMulticastInlineDelegate
		constexpr auto bIsPlaying = 0x328; // bool
	}

	namespace n_ULandscapeMeshProxyComponent {
		constexpr auto LandscapeGuid = 0x5c0; // FGuid
		constexpr auto ProxyComponentBases = 0x5d0; // TArray<FIntPoint>
		constexpr auto ProxyLOD = 0x5e0; // int8_t
	}

	namespace n_UScrollBoxSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UEnvQueryContext_Player {
		constexpr auto GameplayTagsQuery = 0x30; // FGameplayTagQuery
	}

	namespace n_UAudioJostleComponent {
		constexpr auto JostleType = 0xe8; // EJostleMode
		constexpr auto ShrubBehavior = 0xf0; // FShrubEmitterInfo
		constexpr auto BumpBehavior = 0x118; // FBumpEmitterInfo
		constexpr auto RattleBehavior = 0x148; // FRattleEmitterInfo
		constexpr auto bAutoEnable = 0x188; // bool
		constexpr auto bIsEnabled = 0x189; // bool
		constexpr auto Node = 0x190; // UEmitterNodeBase*
	}

	namespace n_UMaterialExpressionAdd {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto ConstA = 0x70; // float
		constexpr auto ConstB = 0x74; // float
	}

	namespace n_ASceneCapture {
		constexpr auto MeshComp = 0x2a0; // UStaticMeshComponent*
		constexpr auto SceneComponent = 0x2a8; // USceneComponent*
	}

	namespace n_UListViewBase {
		constexpr auto EntryWidgetClass = 0x148; // UUserWidget*
		constexpr auto WheelScrollMultiplier = 0x150; // float
		constexpr auto bEnableScrollAnimation = 0x154; // bool
		constexpr auto bEnableFixedLineOffset = 0x155; // bool
		constexpr auto FixedLineScrollOffset = 0x158; // float
		constexpr auto BP_OnEntryGenerated = 0x160; // FMulticastInlineDelegate
		constexpr auto BP_OnEntryReleased = 0x170; // FMulticastInlineDelegate
		constexpr auto bIsFocusedOnHover = 0x180; // bool
		constexpr auto bScrollBarHasSizeWhenNotInUse = 0x181; // bool
		constexpr auto EntryWidgetPool = 0x188; // FUserWidgetPool
	}

	namespace n_UAnimNotify_Navigation {
		constexpr auto NavModifierAreaClass = 0x40; // UNavArea*
		constexpr auto NavLinkAreaClass = 0x48; // UNavArea*
	}

	namespace n_UPostRoundSummaryUserWidget {
		constexpr auto Stats = 0x458; // TArray<FUIPlayerStat>
		constexpr auto FailureTextColor = 0x468; // FSlateColor
	}

	namespace n_UPlayHitReactionComponent {
		constexpr auto OnHitReaction = 0xe8; // FMulticastInlineDelegate
		constexpr auto MontageSets = 0x170; // TArray<UMontageSet*>
		constexpr auto TimeBetweenReactions = 0x180; // FVector2D
		constexpr auto bAutoTriggerHitReactsOnRecentDamage = 0x188; // bool
		constexpr auto DeathFilterSet = 0x190; // UGameplayEvaluatorSet*
		constexpr auto CameraShakeRequiredDamageQuery = 0x198; // FGameplayTagQuery
		constexpr auto CameraShakeReactions = 0x1e0; // TArray<FCameraShakeReaction>
	}

	namespace n_UInterpTrackInstVectorProp {
		constexpr auto ResetVector = 0x60; // FVector
	}

	namespace n_UWidgetNavigation {
		constexpr auto Up = 0x30; // FWidgetNavigationData
		constexpr auto Down = 0x54; // FWidgetNavigationData
		constexpr auto Left = 0x78; // FWidgetNavigationData
		constexpr auto Right = 0x9c; // FWidgetNavigationData
		constexpr auto Next = 0xc0; // FWidgetNavigationData
		constexpr auto Previous = 0xe4; // FWidgetNavigationData
	}

	namespace n_UBTService_Horde {
		constexpr auto AlertLocationBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto HordeTagQuery = 0xa0; // FGameplayTagQuery
	}

	namespace n_USoundNodeDialoguePlayer {
		constexpr auto DialogueWaveParameter = 0x60; // FDialogueWaveParameter
		constexpr auto bLooping = 0x80; // char : 1
	}

	namespace n_UTitanAnimInstance {
		constexpr auto TitanComponent = 0x2c0; // UTitanComponent*
		constexpr auto bIdle = 0x2c8; // bool
		constexpr auto bTailOnLeft = 0x2c9; // bool
		constexpr auto bDead = 0x2ca; // bool
		constexpr auto TentacleFrontLeft = 0x2d0; // FTitanTentacleAnimInfo
		constexpr auto TentacleFrontRight = 0x318; // FTitanTentacleAnimInfo
		constexpr auto TentacleBackLeft = 0x360; // FTitanTentacleAnimInfo
		constexpr auto TentacleBackRight = 0x3a8; // FTitanTentacleAnimInfo
		constexpr auto IdleAnimSequence = 0x3f0; // UAnimSequence*
	}

	namespace n_UInputBehaviorSet {
		constexpr auto Behaviors = 0x30; // TArray<FBehaviorInfo>
	}

	namespace n_UMotionControllerComponent {
		constexpr auto PlayerIndex = 0x4b0; // int32_t
		constexpr auto Hand = 0x4b4; // EControllerHand
		constexpr auto MotionSource = 0x4b8; // FName
		constexpr auto bDisableLowLatencyUpdate = 0x4c0; // char : 1
		constexpr auto CurrentTrackingStatus = 0x4c4; // ETrackingStatus
		constexpr auto bDisplayDeviceModel = 0x4c5; // bool
		constexpr auto DisplayModelSource = 0x4c8; // FName
		constexpr auto CustomDisplayMesh = 0x4d0; // UStaticMesh*
		constexpr auto DisplayMeshMaterialOverrides = 0x4d8; // TArray<UMaterialInterface*>
		constexpr auto DisplayComponent = 0x550; // UPrimitiveComponent*
	}

	namespace n_UTextRenderComponent {
		constexpr auto Text = 0x4b0; // FText
		constexpr auto TextMaterial = 0x4c8; // UMaterialInterface*
		constexpr auto Font = 0x4d0; // UFont*
		constexpr auto HorizontalAlignment = 0x4d8; // EHorizTextAligment
		constexpr auto VerticalAlignment = 0x4d9; // EVerticalTextAligment
		constexpr auto TextRenderColor = 0x4dc; // FColor
		constexpr auto XScale = 0x4e0; // float
		constexpr auto YScale = 0x4e4; // float
		constexpr auto WorldSize = 0x4e8; // float
		constexpr auto InvDefaultSize = 0x4ec; // float
		constexpr auto HorizSpacingAdjust = 0x4f0; // float
		constexpr auto VertSpacingAdjust = 0x4f4; // float
		constexpr auto bAlwaysRenderAsText = 0x4f8; // char : 1
	}

	namespace n_USoundNodeWaveParam {
		constexpr auto WaveParameterName = 0x60; // FName
	}

	namespace n_UAnimNotifyState_ThrowProjectile {
		constexpr auto ProjectileThrowClass = 0x38; // UProjectileThrowComponent*
	}

	namespace n_UNiagaraDataInterfaceVector4Curve {
		constexpr auto XCurve = 0x60; // FRichCurve
		constexpr auto YCurve = 0xe0; // FRichCurve
		constexpr auto ZCurve = 0x160; // FRichCurve
		constexpr auto WCurve = 0x1e0; // FRichCurve
	}

	namespace n_UMaterialExpressionReroute {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UActiveAreaSetComponent {
		constexpr auto DebugOverall = 0xe8; // FActiveAreaSetDebugData
		constexpr auto DebugActiveAreaSet = 0xf8; // FActiveAreaSetDebugData
		constexpr auto DebugDistanceBucketWeightLevels = 0x108; // TArray<int32_t>
		constexpr auto GoldenPathPopulationRange = 0x118; // FVector2D
		constexpr auto GoldenPathMinScale = 0x120; // float
		constexpr auto InclusionMode = 0x124; // EInclusionMode
		constexpr auto WanderPopulationBucketDistance = 0x128; // float
		constexpr auto WanderPopulationBucketDensities = 0x130; // TArray<float>
		constexpr auto WanderPopulationBucketDensityLevelsByDifficulty = 0x140; // TArray<FWanderBucketDensityLevelsByDifficultyEntry>
		constexpr auto WanderPopulationInitialBucketDistance = 0x150; // float
		constexpr auto WanderPopulationInitialBucketDensity = 0x154; // float
		constexpr auto WanderPopulationInitialBucketDensityLevelsByDifficulty = 0x158; // TArray<FWanderBucketInitialDensityLevelByDifficultyEntry>
		constexpr auto WanderDensityConfig = 0x168; // UWanderPopulationDensityConfig*
		constexpr auto MovementChannel = 0x170; // ECollisionChannel
	}

	namespace n_UAnimNotify_Mutilate {
		constexpr auto bExplode = 0x40; // bool
		constexpr auto PctToDismember = 0x44; // float
		constexpr auto DismemberImpulseMagnitude = 0x48; // float
		constexpr auto ImpulseMagnitude = 0x4c; // float
		constexpr auto Region = 0x50; // EMutilationRegion
		constexpr auto Type = 0x51; // EMutilationType
		constexpr auto DamageInfo = 0x58; // UAnimContext_DamageInfo*
	}

	namespace n_ULocalizedOverlays {
		constexpr auto DefaultOverlays = 0x30; // UBasicOverlays*
		constexpr auto LocaleToOverlaysMap = 0x38; // TMap<FString, UBasicOverlays*>
	}

	namespace n_UWidgetAnimation {
		constexpr auto MovieScene = 0x350; // UMovieScene*
		constexpr auto AnimationBindings = 0x358; // TArray<FWidgetAnimationBinding>
		constexpr auto bLegacyFinishOnStop = 0x368; // bool
		constexpr auto DisplayLabel = 0x370; // FString
	}

	namespace n_UInterpGroupCamera {
		constexpr auto CameraAnimInst = 0x58; // UCameraAnim*
		constexpr auto CompressTolerance = 0x60; // float
	}

	namespace n_APlayerStandIn {
		constexpr auto OnAppearanceChanged = 0x2a0; // FMulticastInlineDelegate
		constexpr auto bEnabled = 0x2b0; // bool
		constexpr auto OnlyValidIfSlotMatchesGender = 0x2b1; // EPlayerStandInGender
		constexpr auto OnlyValidIfSlotMatchesCharacter = 0x2b8; // FDataTableRowHandle
		constexpr auto ConfigureForNonPartyCharacter = 0x2d8; // FDataTableRowHandle
		constexpr auto CharacterRowHandle = 0x2f8; // FDataTableRowHandle
		constexpr auto CustomizationSet = 0x318; // FCharacterCustomizationSet
		constexpr auto DrenchSettings = 0x3a0; // EDrenchSettings
		constexpr auto MaleDefaultAnimation = 0x3c0; // UAnimSequence*
		constexpr auto FemaleDefaultAnimation = 0x3c8; // UAnimSequence*
		constexpr auto IncappedMeshMaterialParamSet = 0x3d0; // UMeshMaterialParamSet*
		constexpr auto DeadMeshMaterialParamSet = 0x3d8; // UMeshMaterialParamSet*
	}

	namespace n_UMovieSceneObjectPropertySection {
		constexpr auto ObjectChannel = 0xe8; // FMovieSceneObjectPathChannel
	}

	namespace n_UCaravanScreen {
		constexpr auto bReadyForTutorialPopup = 0x594; // bool
	}

	namespace n_UVendorItemUserWidget {
		constexpr auto RefillTrackerWidget = 0x458; // UVendorRefillTrackerUserWidget*
		constexpr auto WatchedEquipSlots = 0x460; // TArray<EEquipmentSlot>
	}

	namespace n_UAnimNotifyState_ModifyView {
		constexpr auto ViewModifier = 0x38; // FCameraViewModifier
		constexpr auto RequiredTags = 0x80; // FGameplayTagQuery
	}

	namespace n_UEnvQueryTest_EnemyDamageLocation {
		constexpr auto bUseAttackLocation = 0x2a0; // bool
	}

	namespace n_UAttachmentDragPayload {
		constexpr auto Attachment = 0x38; // FDataTableRowHandle
		constexpr auto SlotIndex = 0x58; // int32_t
	}

	namespace n_UAnimCompress_PerTrackCompression {
		constexpr auto MaxZeroingThreshold = 0x68; // float
		constexpr auto MaxPosDiffBitwise = 0x6c; // float
		constexpr auto MaxAngleDiffBitwise = 0x70; // float
		constexpr auto MaxScaleDiffBitwise = 0x74; // float
		constexpr auto AllowedRotationFormats = 0x78; // TArray<AnimationCompressionFormat>
		constexpr auto AllowedTranslationFormats = 0x88; // TArray<AnimationCompressionFormat>
		constexpr auto AllowedScaleFormats = 0x98; // TArray<AnimationCompressionFormat>
		constexpr auto bResampleAnimation = 0xa8; // char : 1
		constexpr auto ResampledFramerate = 0xac; // float
		constexpr auto MinKeysForResampling = 0xb0; // int32_t
		constexpr auto bUseAdaptiveError = 0xb4; // char : 1
		constexpr auto bUseOverrideForEndEffectors = 0xb4; // char : 1
		constexpr auto TrackHeightBias = 0xb8; // int32_t
		constexpr auto ParentingDivisor = 0xbc; // float
		constexpr auto ParentingDivisorExponent = 0xc0; // float
		constexpr auto bUseAdaptiveError2 = 0xc4; // char : 1
		constexpr auto RotationErrorSourceRatio = 0xc8; // float
		constexpr auto TranslationErrorSourceRatio = 0xcc; // float
		constexpr auto ScaleErrorSourceRatio = 0xd0; // float
		constexpr auto MaxErrorPerTrackRatio = 0xd4; // float
		constexpr auto PerturbationProbeSize = 0xd8; // float
	}

	namespace n_AGameMode {
		constexpr auto MatchState = 0x340; // FName
		constexpr auto bDelayedStart = 0x348; // char : 1
		constexpr auto NumSpectators = 0x34c; // int32_t
		constexpr auto NumPlayers = 0x350; // int32_t
		constexpr auto NumBots = 0x354; // int32_t
		constexpr auto MinRespawnDelay = 0x358; // float
		constexpr auto NumTravellingPlayers = 0x35c; // int32_t
		constexpr auto EngineMessageClass = 0x360; // ULocalMessage*
		constexpr auto InactivePlayerArray = 0x368; // TArray<APlayerState*>
		constexpr auto InactivePlayerStateLifeSpan = 0x378; // float
		constexpr auto MaxInactivePlayers = 0x37c; // int32_t
	}

	namespace n_AConversationTrigger {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto bTriggersOnFullPartyEnter = 0x2a8; // bool
		constexpr auto bTriggerOnce = 0x2a9; // bool
		constexpr auto bUseDirectional = 0x2aa; // bool
		constexpr auto MinDirectionalAmount = 0x2ac; // float
		constexpr auto bUseLookAt = 0x2b0; // bool
		constexpr auto MinLookAtAngle = 0x2b4; // float
		constexpr auto bActivated = 0x2b8; // bool
		constexpr auto bDequeueConversationOnPlayerExitTrigger = 0x2b9; // bool
		constexpr auto InstigatorRule = 0x2ba; // EInstigatorRule
		constexpr auto NeededHeroNames = 0x2c0; // TArray<FName>
		constexpr auto bQueueAllChoices = 0x2d0; // bool
		constexpr auto ConversationChoices = 0x2d8; // TArray<FQueuedConversation>
		constexpr auto ConversationsToDequeue = 0x2e8; // TArray<FQueuedConversation>
		constexpr auto ConversationTriggersToDisable = 0x2f8; // TArray<AConversationTrigger*>
	}

	namespace n_UMaterialExpressionReflectionVectorWS {
		constexpr auto CustomWorldNormal = 0x48; // FExpressionInput
		constexpr auto bNormalizeCustomWorldNormal = 0x5c; // char : 1
	}

	namespace n_ULifeStateDead {
		constexpr auto AutoRagdollFromBoneName = 0xa8; // FName
		constexpr auto DeadCapsuleCollisionProfile = 0xb0; // FName
		constexpr auto bRegisterWithCorpseManager = 0xb8; // bool
		constexpr auto TurnOffCollisionOnComponents = 0xc0; // TArray<FGameplayTag>
		constexpr auto MontageSets = 0xd0; // TArray<UMontageSet*>
		constexpr auto PlayingDeathMontage = 0xe0; // UAnimMontage*
		constexpr auto DeathMontage = 0xe8; // UAnimMontage*
		constexpr auto bNeedsToBeHidden = 0xf0; // bool
	}

	namespace n_UOnlineFlow {
		constexpr auto Matchmaking = 0x60; // UMatchmaking*
		constexpr auto OnMatchmakingStateChanged = 0x140; // FMulticastInlineDelegate
	}

	namespace n_UPaperDollDragUserWidget {
		constexpr auto DragVisualClass = 0x458; // UItemDragVisualUserWidget*
	}

	namespace n_UGobiDamageType {
		constexpr auto DamageTagContainer = 0x30; // FGameplayTagContainer
		constexpr auto GameplayEffects = 0x50; // TArray<UGameplayEffect*>
	}

	namespace n_UAudioImpulseResponse {
		constexpr auto ImpulseResponse = 0x30; // TArray<float>
		constexpr auto NumChannels = 0x40; // int32_t
		constexpr auto SampleRate = 0x44; // int32_t
		constexpr auto NormalizationVolumeDb = 0x48; // float
		constexpr auto IRData = 0x50; // TArray<float>
	}

	namespace n_ALootSystem {
		constexpr auto LootConfig = 0x2a0; // ULootSpawnConfigAsset*
		constexpr auto LootConfigPVPClassic = 0x2a8; // ULootSpawnConfigAsset*
		constexpr auto LootConfigPVPHoldout = 0x2b0; // ULootSpawnConfigAsset*
		constexpr auto TradeShowLootConfig = 0x2b8; // ULootSpawnConfigAsset*
		constexpr auto TradeShowLootConfigPVPClassic = 0x2c0; // ULootSpawnConfigAsset*
		constexpr auto TradeShowLootConfigPVPHoldout = 0x2c8; // ULootSpawnConfigAsset*
		constexpr auto TreasureRooms = 0x2d0; // FSpawnCountRange
	}

	namespace n_UAITask {
		constexpr auto OwnerController = 0x70; // AAIController*
	}

	namespace n_UUIDataSet {
		constexpr auto LowClickAudioEvent = 0x38; // UAkAudioEvent*
		constexpr auto ClickAudioEvent = 0x40; // UAkAudioEvent*
		constexpr auto BeepAudioEvent = 0x48; // UAkAudioEvent*
		constexpr auto ObjectiveCountChangeDefaultAudioEvent = 0x50; // UAkAudioEvent*
		constexpr auto UISpeakerTestClass = 0x58; // UUISpeakerTest*
		constexpr auto WidgetFocusedSound = 0x60; // FSlateSound
		constexpr auto FocusBrush = 0x78; // FSlateBrush
		constexpr auto CalloutTextBrush = 0x108; // FSlateBrush
		constexpr auto GameplayTagsToStatusIcons = 0x198; // TMap<FGameplayTag, UTexture2D*>
		constexpr auto DefaultCardIcon = 0x1e8; // UTexture2D*
		constexpr auto DefaultCardBackground = 0x1f0; // UTexture2D*
		constexpr auto CardAffinitiesToIcons = 0x1f8; // TMap<EGameplayCardAffinity, UTexture2D*>
		constexpr auto DefaultAchievementIcon = 0x248; // UTexture2D*
		constexpr auto DefaultRewardIconSmall = 0x250; // UTexture2D*
		constexpr auto DefaultRewardIconShowcase = 0x258; // UTexture2D*
		constexpr auto DefaultSprayIcon = 0x260; // UTexture2D*
		constexpr auto DefaultWeaponSkinIcon = 0x268; // UTexture2D*
		constexpr auto DefaultCharacterSkinIcon = 0x270; // UTexture2D*
		constexpr auto DefaultTitleIcon = 0x278; // UTexture2D*
		constexpr auto DefaultEmblemIcon = 0x280; // UTexture2D*
		constexpr auto DefaultBannerIcon = 0x288; // UTexture2D*
		constexpr auto DefaultObjectiveIcon = 0x290; // UTexture2D*
		constexpr auto CheckBoxCheckedImage = 0x298; // UTexture2D*
		constexpr auto CheckBoxUncheckedImage = 0x2a0; // UTexture2D*
		constexpr auto ObjectiveStateToIcon = 0x2a8; // TMap<EObjectiveState, UTexture2D*>
		constexpr auto ObjectiveStateToColor = 0x2f8; // TMap<EObjectiveState, FSlateColor>
		constexpr auto GlobalSafeZoneWidgetClass = 0x348; // UGlobalSafeZoneUserWidget*
		constexpr auto ColorBlindGroupDataSet = 0x350; // UColorBlindGroupData*
		constexpr auto ColorBlindMaterialColors = 0x358; // UColorTableTexture*
		constexpr auto ColorBlindPlayerOutlineHighlightData = 0x360; // UColorBlindOutlineHighlightData*
		constexpr auto ColorBlindMaterialData = 0x368; // UDataTable*
	}

	namespace n_UAkEventCallbackInfo {
		constexpr auto PlayingID = 0x38; // int32_t
		constexpr auto EventID = 0x3c; // int32_t
	}

	namespace n_UEdGraphPin_Deprecated {
		constexpr auto PinName = 0x30; // FString
		constexpr auto PinToolTip = 0x40; // FString
		constexpr auto Direction = 0x50; // EEdGraphPinDirection
		constexpr auto PinType = 0x58; // FEdGraphPinType
		constexpr auto DefaultValue = 0xb0; // FString
		constexpr auto AutogeneratedDefaultValue = 0xc0; // FString
		constexpr auto DefaultObject = 0xd0; // UObject*
		constexpr auto DefaultTextValue = 0xd8; // FText
		constexpr auto LinkedTo = 0xf0; // TArray<UEdGraphPin_Deprecated*>
		constexpr auto SubPins = 0x100; // TArray<UEdGraphPin_Deprecated*>
		constexpr auto ParentPin = 0x110; // UEdGraphPin_Deprecated*
		constexpr auto ReferencePassThroughConnection = 0x118; // UEdGraphPin_Deprecated*
	}

	namespace n_UGameplayAction_AmbushHide {
		constexpr auto StayInCoverDuration = 0x2e8; // FVector2D
		constexpr auto bRepositionOnHeroLOS = 0x2f0; // bool
		constexpr auto RepositionOnHeroDistanceMapDistance = 0x2f4; // float
		constexpr auto SneakAdvanceTag = 0x2f8; // FGameplayTag
		constexpr auto DistanceMapNavMesh = 0x300; // FNavAgentSelector
	}

	namespace n_USpringArmComponent {
		constexpr auto TargetArmLength = 0x230; // float
		constexpr auto SocketOffset = 0x234; // FVector
		constexpr auto TargetOffset = 0x240; // FVector
		constexpr auto ProbeSize = 0x24c; // float
		constexpr auto ProbeChannel = 0x250; // ECollisionChannel
		constexpr auto bDoCollisionTest = 0x254; // char : 1
		constexpr auto bUsePawnControlRotation = 0x254; // char : 1
		constexpr auto bInheritPitch = 0x254; // char : 1
		constexpr auto bInheritYaw = 0x254; // char : 1
		constexpr auto bInheritRoll = 0x254; // char : 1
		constexpr auto bEnableCameraLag = 0x254; // char : 1
		constexpr auto bEnableCameraRotationLag = 0x254; // char : 1
		constexpr auto bUseCameraLagSubstepping = 0x254; // char : 1
		constexpr auto bDrawDebugLagMarkers = 0x255; // char : 1
		constexpr auto CameraLagSpeed = 0x258; // float
		constexpr auto CameraRotationLagSpeed = 0x25c; // float
		constexpr auto bCollisionTargetOffsetEnabled = 0x260; // bool
		constexpr auto CollisionTargetOffset = 0x264; // FVector
		constexpr auto CollisionSocketOffset = 0x270; // FVector
		constexpr auto CollisionTargetOffsetLagSpeed = 0x27c; // float
		constexpr auto CameraArmLengthLagSpeed = 0x280; // float
		constexpr auto CameraReplicationRotationInterpSpeed = 0x284; // float
		constexpr auto CameraLagMaxTimeStep = 0x288; // float
		constexpr auto CameraLagMaxDistance = 0x28c; // float
	}

	namespace n_UFontImportOptions {
		constexpr auto Data = 0x30; // FFontImportOptionsData
	}

	namespace n_UNavAgentLocationComponent {
		constexpr auto TestForFloorDistance = 0xe8; // float
	}

	namespace n_USynthSound {
		constexpr auto OwningSynthComponent = 0x370; // USynthComponent*
	}

	namespace n_UHealthBarUserWidget {
		constexpr auto MaxHealth = 0x458; // float
		constexpr auto CurrentMaxHealth = 0x45c; // float
		constexpr auto Health = 0x460; // float
		constexpr auto HealingHealth = 0x464; // float
		constexpr auto TempHealth = 0x468; // float
		constexpr auto PipClass = 0x470; // UHealthPipUserWidget*
	}

	namespace n_UBadgeEditPanelUserWidget {
		constexpr auto BadgeEditMode = 0x458; // EBadgeEditMode
	}

	namespace n_UOptionsSelectableButtonUserWidget {
		constexpr auto OnSelected = 0x458; // FMulticastInlineDelegate
		constexpr auto OnDeselected = 0x468; // FMulticastInlineDelegate
	}

	namespace n_UHoldoutConfig {
		constexpr auto SafeZoneFinalRadius = 0x38; // float
		constexpr auto PrepPhaseDuration = 0x3c; // float
		constexpr auto CollapsePhaseDurations = 0x40; // TArray<float>
		constexpr auto HordePhaseDuration = 0x50; // float
		constexpr auto HordePhaseHordeDelay = 0x54; // float
		constexpr auto HeroPrepPhaseGameplayEffects = 0x58; // TArray<UGameplayEffect*>
		constexpr auto FinalPhaseScenarioLoopTime = 0x68; // float
		constexpr auto CollapsePhases = 0x70; // TArray<FHoldoutCollapsePhase>
	}

	namespace n_ASplineBasedActorPlacer {
		constexpr auto SplineComponent = 0x2a0; // USplineComponent*
		constexpr auto ForcePointType = 0x2a8; // ESplinePointType
		constexpr auto bForcePointType = 0x2a9; // bool
		constexpr auto bClosedLoop = 0x2aa; // bool
	}

	namespace n_UTuningDataComponent {
		constexpr auto DataTableRow = 0x100; // FDataTableRowHandle
	}

	namespace n_UVFXCorpseSubsystem {
		constexpr auto VFXCorpseManager = 0x38; // UVFXCorpseManager*
	}

	namespace n_UBTTask_SetBruteState {
		constexpr auto BruteState = 0x78; // EBruteState
	}

	namespace n_UZombieMutationManager {
		constexpr auto Table = 0x38; // UDataTable*
		constexpr auto MinRespawnTimes = 0x40; // TArray<float>
		constexpr auto ZombieAdvantageRespawnTimes = 0x50; // TArray<FTeamAdvantageZombieRespawnTimes>
		constexpr auto ZombieDisadvantageRespawnTimes = 0x60; // TArray<FTeamAdvantageZombieRespawnTimes>
		constexpr auto DefaultRespawnTime = 0x70; // float
		constexpr auto QueuedZombieRespawnTurnWaitTime = 0x74; // float
		constexpr auto bVariantLocksEnabled = 0x78; // bool
		constexpr auto bIgnoreOnFieldLimits = 0x79; // bool
	}

	namespace n_UBTTask_RunEQSQuery {
		constexpr auto QueryTemplate = 0xa0; // UEnvQuery*
		constexpr auto QueryParams = 0xa8; // TArray<FEnvNamedValue>
		constexpr auto QueryConfig = 0xb8; // TArray<FAIDynamicParam>
		constexpr auto RunMode = 0xc8; // EEnvQueryRunMode
		constexpr auto EQSQueryBlackboardKey = 0xd0; // FBlackboardKeySelector
		constexpr auto bUseBBKey = 0xf8; // bool
		constexpr auto EQSRequest = 0x100; // FEQSParametrizedQueryExecutionRequest
	}

	namespace n_UEnvQueryTest_PathfindingBatch {
		constexpr auto ScanRangeMultiplier = 0x290; // FAIDataProviderFloatValue
	}

	namespace n_UDatasmithAssetUserData {
		constexpr auto MetaData = 0x30; // TMap<FName, FString>
	}

	namespace n_UAttachableComponent {
		constexpr auto DesiredAttachment = 0x140; // FAttachToActorInfo
		constexpr auto CurrentAttachment = 0x1b0; // FAttachToActorInfo
		constexpr auto AttachedCollisionProfile = 0x220; // FCollisionProfileName
	}

	namespace n_UDemoDeveloperSettings {
		constexpr auto DemoHUDWidget = 0x40; // TSoftClassPtr<UObject>
		constexpr auto PlaybackSpeedStep = 0x68; // float
		constexpr auto PlaybackSpeedMin = 0x6c; // float
		constexpr auto PlaybackSpeedMax = 0x70; // float
		constexpr auto PlaybackJumpStep = 0x74; // float
	}

	namespace n_UStepOnComponent {
		constexpr auto StepOnActorConfigs = 0xf0; // TArray<FStepOnActorConfig>
	}

	namespace n_UDamageIndicatorUserWidget {
		constexpr auto DamageIndicatorClass = 0x458; // UGobiUserWidget*
	}

	namespace n_USkeletalMesh {
		constexpr auto Skeleton = 0x68; // USkeleton*
		constexpr auto ImportedBounds = 0x70; // FBoxSphereBounds
		constexpr auto ExtendedBounds = 0x8c; // FBoxSphereBounds
		constexpr auto PositiveBoundsExtension = 0xa8; // FVector
		constexpr auto NegativeBoundsExtension = 0xb4; // FVector
		constexpr auto Materials = 0xe0; // TArray<FSkeletalMaterial>
		constexpr auto SkelMirrorTable = 0xf0; // TArray<FBoneMirrorInfo>
		constexpr auto LODInfo = 0x100; // TArray<FSkeletalMeshLODInfo>
		constexpr auto MinLOD = 0x160; // FPerPlatformInt
		constexpr auto DisableBelowMinLodStripping = 0x164; // FPerPlatformBool
		constexpr auto bServerUsesOnlyHighestIndexLOD = 0x165; // bool
		constexpr auto SkelMirrorAxis = 0x166; // EAxis
		constexpr auto SkelMirrorFlipAxis = 0x167; // EAxis
		constexpr auto bUseFullPrecisionUVs = 0x168; // char : 1
		constexpr auto bUseHighPrecisionTangentBasis = 0x168; // char : 1
		constexpr auto bExplicitCPUSkinning = 0x168; // char : 1
		constexpr auto bCPUAccessOnly = 0x168; // char : 1
		constexpr auto bHasBeenSimplified = 0x168; // char : 1
		constexpr auto bHasVertexColors = 0x168; // char : 1
		constexpr auto bEnablePerPolyCollision = 0x168; // char : 1
		constexpr auto BodySetup = 0x170; // UBodySetup*
		constexpr auto PhysicsAsset = 0x178; // UPhysicsAsset*
		constexpr auto ShadowPhysicsAsset = 0x180; // UPhysicsAsset*
		constexpr auto NodeMappingData = 0x188; // TArray<UNodeMappingContainer*>
		constexpr auto bSupportRayTracing = 0x198; // char : 1
		constexpr auto MorphTargets = 0x1a0; // TArray<UMorphTarget*>
		constexpr auto PostProcessAnimBlueprint = 0x328; // UAnimInstance*
		constexpr auto MeshClothingAssets = 0x330; // TArray<UClothingAssetBase*>
		constexpr auto SamplingInfo = 0x340; // FSkeletalMeshSamplingInfo
		constexpr auto AssetUserData = 0x370; // TArray<UAssetUserData*>
		constexpr auto Sockets = 0x388; // TArray<USkeletalMeshSocket*>
		constexpr auto SkinWeightProfiles = 0x3a8; // TArray<FSkinWeightProfileInfo>
	}

	namespace n_UEnvQueryGenerator_AICharacters {
		constexpr auto GenerateOnlyActorsInRadius = 0x58; // FAIDataProviderBoolValue
		constexpr auto SearchCenter = 0x90; // UEnvQueryContext*
		constexpr auto SearchRadius = 0x98; // FAIDataProviderFloatValue
		constexpr auto TagQuery = 0xd0; // FAIDataProviderGameplayTagQueryContainerValue
		constexpr auto SecondaryTagQuery = 0x148; // FAIDataProviderGameplayTagQueryContainerValue
	}

	namespace n_UARTrackedQRCode {
		constexpr auto QRCode = 0xf8; // FString
		constexpr auto Version = 0x108; // int32_t
	}

	namespace n_UMaterialExpressionViewProperty {
		constexpr auto Property = 0x48; // EMaterialExposedViewProperty
	}

	namespace n_UParticleModuleParameterDynamic {
		constexpr auto DynamicParams = 0x38; // TArray<FEmitterDynamicParameter>
		constexpr auto UpdateFlags = 0x48; // int32_t
		constexpr auto bUsesVelocity = 0x4c; // char : 1
	}

	namespace n_ASpectatorBeaconClient {
		constexpr auto DestSessionId = 0x360; // FString
		constexpr auto PendingReservation = 0x370; // FSpectatorReservation
		constexpr auto RequestType = 0x3e8; // ESpectatorClientRequestType
		constexpr auto bPendingReservationSent = 0x3e9; // bool
		constexpr auto bCancelReservation = 0x3ea; // bool
	}

	namespace n_UInteractiveToolPropertySet {
		constexpr auto CachedProperties = 0x48; // UObject*
		constexpr auto bIsPropertySetEnabled = 0x50; // bool
	}

	namespace n_USoundWave {
		constexpr auto CompressionQuality = 0x168; // int32_t
		constexpr auto StreamingPriority = 0x16c; // int32_t
		constexpr auto SampleRateQuality = 0x170; // ESoundwaveSampleRateSettings
		constexpr auto SoundGroup = 0x172; // ESoundGroup
		constexpr auto bLooping = 0x173; // char : 1
		constexpr auto bStreaming = 0x173; // char : 1
		constexpr auto bSeekableStreaming = 0x173; // char : 1
		constexpr auto LoadingBehavior = 0x174; // ESoundWaveLoadingBehavior
		constexpr auto bMature = 0x175; // char : 1
		constexpr auto bManualWordWrap = 0x175; // char : 1
		constexpr auto bSingleLine = 0x175; // char : 1
		constexpr auto bIsAmbisonics = 0x176; // char : 1
		constexpr auto FrequenciesToAnalyze = 0x178; // TArray<float>
		constexpr auto CookedSpectralTimeData = 0x188; // TArray<FSoundWaveSpectralTimeData>
		constexpr auto CookedEnvelopeTimeData = 0x198; // TArray<FSoundWaveEnvelopeTimeData>
		constexpr auto InitialChunkSize = 0x1a8; // int32_t
		constexpr auto SpokenText = 0x1f0; // FString
		constexpr auto SubtitlePriority = 0x200; // float
		constexpr auto Volume = 0x204; // float
		constexpr auto Pitch = 0x208; // float
		constexpr auto NumChannels = 0x20c; // int32_t
		constexpr auto SampleRate = 0x210; // int32_t
		constexpr auto Subtitles = 0x220; // TArray<FSubtitleCue>
		constexpr auto Curves = 0x230; // UCurveTable*
		constexpr auto InternalCurves = 0x238; // UCurveTable*
	}

	namespace n_UMaterialExpressionTextureSample {
		constexpr auto Coordinates = 0x58; // FExpressionInput
		constexpr auto TextureObject = 0x6c; // FExpressionInput
		constexpr auto MipValue = 0x80; // FExpressionInput
		constexpr auto CoordinatesDX = 0x94; // FExpressionInput
		constexpr auto CoordinatesDY = 0xa8; // FExpressionInput
		constexpr auto AutomaticViewMipBiasValue = 0xbc; // FExpressionInput
		constexpr auto MipValueMode = 0xd0; // ETextureMipValueMode
		constexpr auto SamplerSource = 0xd1; // ESamplerSourceMode
		constexpr auto AutomaticViewMipBias = 0xd2; // char : 1
		constexpr auto ConstCoordinate = 0xd3; // char
		constexpr auto ConstMipValue = 0xd4; // int32_t
	}

	namespace n_UAsyncActionLoadPrimaryAssetList {
		constexpr auto Completed = 0x80; // FMulticastInlineDelegate
	}

	namespace n_ALevelStreamingCoordinator {
		constexpr auto GameModeStreamingVolumes = 0x2a0; // TArray<FGameModeStreamingVolumes>
		constexpr auto CardStreamingVolumes = 0x2b0; // TArray<FCardStreamingVolumes>
		constexpr auto LevelStreamingVolumes = 0x2c0; // TArray<ALevelStreamingVolume*>
		constexpr auto InMatchLevelStreamingVolumes = 0x2d0; // TArray<ALevelStreamingVolume*>
		constexpr auto GameModeLevelStreamingVolumes = 0x2e0; // TArray<FGameModeStreamingVolume>
		constexpr auto GameModeInMatchLevelStreamingVolumes = 0x2f0; // TArray<FGameModeStreamingVolume>
		constexpr auto CardDependentStreamingVolumes = 0x300; // TArray<FCardDependentStreamingVolume>
		constexpr auto ActiveGameModeStreamingVolumes = 0x310; // TArray<ALevelStreamingVolume*>
		constexpr auto ActiveSafeRoomStreamingVolumes = 0x320; // TArray<ALevelStreamingVolume*>
	}

	namespace n_UBlendSpaceBase {
		constexpr auto bRotationBlendInMeshSpace = 0x90; // bool
		constexpr auto AnimLength = 0x94; // float
		constexpr auto InterpolationParam = 0x98; // FInterpolationParameter [0x3]
		constexpr auto TargetWeightInterpolationSpeedPerSec = 0xb0; // float
		constexpr auto NotifyTriggerMode = 0xb4; // ENotifyTriggerMode
		constexpr auto PerBoneBlend = 0xb8; // TArray<FPerBoneInterpolation>
		constexpr auto SampleIndexWithMarkers = 0xc8; // int32_t
		constexpr auto SampleData = 0xd0; // TArray<FBlendSample>
		constexpr auto GridSamples = 0xe0; // TArray<FEditorElement>
		constexpr auto BlendParameters = 0xf0; // FBlendParameter [0x3]
	}

	namespace n_UMolotovGrowthComponent {
		constexpr auto AllSequencesComplete = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnFlamesStopped = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnSequenceComplete = 0x108; // FMulticastInlineDelegate
		constexpr auto ActorToSpawn = 0x118; // AMolotovFlame*
		constexpr auto TraceProfileName = 0x120; // FCollisionProfileName
		constexpr auto LaunchPositionOffset = 0x128; // FVector
		constexpr auto MaxLaunchesPerFrame = 0x134; // char
		constexpr auto AdditionalDelayForEachChildStep = 0x138; // float
		constexpr auto LaunchStepHeight = 0x13c; // float
		constexpr auto MaxFlameDistanceFromGround = 0x140; // float
		constexpr auto bUseInitialLaunchDirForAllLaunches = 0x144; // bool
		constexpr auto ForwardLaunchConfig = 0x148; // FLaunchConfig
		constexpr auto bLaunchInReverseDirection = 0x15c; // bool
		constexpr auto ReverseLaunchConfig = 0x160; // FLaunchConfig
		constexpr auto MaxLifetime = 0x174; // float
		constexpr auto bAlignFlamesToSurface = 0x178; // bool
		constexpr auto SpawnedActors = 0x1a8; // TArray<AMolotovFlame*>
	}

	namespace n_UDialogueComponent {
		constexpr auto MaxRecentDialogueInfo = 0xe8; // int32_t
		constexpr auto RecentDialogueInfos = 0xf0; // TArray<FReplicatedDialogueInfo>
		constexpr auto LastStopSpeakingInfo = 0x104; // FReplicatedStopSpeakingInfo
		constexpr auto BookendEndRequestCounter = 0x110; // int32_t
		constexpr auto OnDialogueBegin = 0x118; // FMulticastInlineDelegate
		constexpr auto OnDialogueFinished = 0x128; // FMulticastInlineDelegate
		constexpr auto OnDialogueStopped = 0x138; // FMulticastInlineDelegate
		constexpr auto bShowAvailableSubtitles = 0x148; // bool
		constexpr auto SpeakerRowId = 0x1a8; // FName
	}

	namespace n_UApplicationLifecycleComponent {
		constexpr auto ApplicationWillDeactivateDelegate = 0xe8; // FMulticastInlineDelegate
		constexpr auto ApplicationHasReactivatedDelegate = 0xf8; // FMulticastInlineDelegate
		constexpr auto ApplicationWillEnterBackgroundDelegate = 0x108; // FMulticastInlineDelegate
		constexpr auto ApplicationHasEnteredForegroundDelegate = 0x118; // FMulticastInlineDelegate
		constexpr auto ApplicationWillTerminateDelegate = 0x128; // FMulticastInlineDelegate
		constexpr auto ApplicationShouldUnloadResourcesDelegate = 0x138; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedStartupArgumentsDelegate = 0x148; // FMulticastInlineDelegate
		constexpr auto OnTemperatureChangeDelegate = 0x158; // FMulticastInlineDelegate
		constexpr auto OnLowPowerModeDelegate = 0x168; // FMulticastInlineDelegate
	}

	namespace n_AWoundConfigActor {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto Mesh = 0x2a8; // USkeletalMeshComponent*
		constexpr auto WoundConfigsData = 0x2b0; // UMutilationWoundConfigData*
	}

	namespace n_UAnimNotify_SetAttackLocation {
		constexpr auto bUseFeetLocation = 0x40; // bool
	}

	namespace n_UGizmoBoxComponent {
		constexpr auto Origin = 0x4d0; // FVector
		constexpr auto Rotation = 0x4e0; // FQuat
		constexpr auto Dimensions = 0x4f0; // FVector
		constexpr auto LineThickness = 0x4fc; // float
		constexpr auto bRemoveHiddenLines = 0x500; // bool
		constexpr auto bEnableAxisFlip = 0x501; // bool
	}

	namespace n_UTweenContainer {
		constexpr auto OwningTweenManager = 0x30; // UTweenManagerComponent*
		constexpr auto OnTweenContainerEnd = 0x38; // FMulticastInlineDelegate
		constexpr auto mSequences = 0x58; // TArray<FParallelTween>
	}

	namespace n_UGameCoach {
		constexpr auto LocalPlayer = 0x50; // ULocalPlayer*
		constexpr auto EnabledLessons = 0x58; // TArray<UGameCoachLesson*>
		constexpr auto QueuedEnables = 0x68; // TArray<FGameCoachQueuedEnable>
		constexpr auto VisiblityMinRefreshInterval = 0x158; // float
		constexpr auto VisiblityMaxRefreshInterval = 0x15c; // float
	}

	namespace n_UBTTask_Wait {
		constexpr auto WaitTime = 0x78; // float
		constexpr auto RandomDeviation = 0x7c; // float
	}

	namespace n_ASafeRoom {
		constexpr auto ConfigAsset = 0x2a0; // USaferoomConfigurationAsset*
		constexpr auto DefaultRootComponent = 0x2a8; // USceneComponent*
		constexpr auto DefaultSaferoomVolume = 0x2b0; // UBoxComponent*
		constexpr auto SaferoomDoors = 0x2c8; // TArray<ADoor*>
		constexpr auto EffectEmitters = 0x2d8; // TArray<AGameplayEffectEmitterActor*>
		constexpr auto OccupiedState = 0x2e8; // EPartySafeRoomState
		constexpr auto SpawnTag = 0x2ec; // FName
		constexpr auto FinalSaferoomDetails = 0x2f8; // FLevelTravelDetails
		constexpr auto CheckpointSaferoomConfig = 0x330; // FCheckpointSaferoomConfig
		constexpr auto CurrentMissionObjectiveScheme = 0x390; // FName
		constexpr auto MissionObjectiveSchemes = 0x398; // TMap<FName, FSafeRoomMissionObjectiveConfig>
		constexpr auto DoorLockedDuration = 0x3e8; // float
		constexpr auto DoorOpenDuration = 0x3ec; // float
		constexpr auto StartingConvo = 0x3f0; // FName
		constexpr auto StartingConvoResponseGroup = 0x3f8; // FName
		constexpr auto bCanPostEnterExitDialogue = 0x400; // bool
		constexpr auto bCanPostSaferoomNagDialogue = 0x401; // bool
		constexpr auto CurrentSaferoomState = 0x432; // EPartySafeRoomState
		constexpr auto OnOccupancyChanged = 0x438; // FMulticastInlineDelegate
	}

	namespace n_UCurveLinearColor {
		constexpr auto FloatCurves = 0x38; // FRichCurve [0x4]
		constexpr auto AdjustHue = 0x238; // float
		constexpr auto AdjustSaturation = 0x23c; // float
		constexpr auto AdjustBrightness = 0x240; // float
		constexpr auto AdjustBrightnessCurve = 0x244; // float
		constexpr auto AdjustVibrance = 0x248; // float
		constexpr auto AdjustMinAlpha = 0x24c; // float
		constexpr auto AdjustMaxAlpha = 0x250; // float
	}

	namespace n_UScenarioComponent {
		constexpr auto bInterruptable = 0xe8; // bool
		constexpr auto bInterrupting = 0xe9; // bool
		constexpr auto CardEvalTags = 0xf0; // FGameplayTagContainer
		constexpr auto bCanEverSpawn = 0x110; // bool
		constexpr auto bWantsSoloSpawning = 0x111; // bool
		constexpr auto bDisableOnComplete = 0x112; // bool
		constexpr auto HeldPacingPhaseForInfiniteWaves = 0x113; // EPacingPhase
		constexpr auto bUseDelayBeforeSpawn = 0x114; // bool
		constexpr auto FirstWaveCueTags = 0x118; // TArray<FGameplayTag>
		constexpr auto LastWaveDoneCueTags = 0x128; // TArray<FGameplayTag>
		constexpr auto NextWaveCueTags = 0x138; // TArray<FGameplayTag>
		constexpr auto SpawningLocationTag = 0x148; // FGameplayTag
		constexpr auto SupportedGameModes = 0x150; // uint32_t
		constexpr auto AISDGTopLevelSpawnDeckOverrides = 0x158; // FTopLevelSpawnDeckOverrides
		constexpr auto ActivationConditions = 0x1e0; // UScenarioEvaluatorSet*
		constexpr auto CompletionConditions = 0x1e8; // UScenarioEvaluatorSet*
		constexpr auto FailureConditions = 0x1f0; // UScenarioEvaluatorSet*
		constexpr auto FailureTime = 0x1f8; // float
		constexpr auto HeroEvaluators = 0x208; // UScenarioHeroEvaluatorSet*
		constexpr auto AISpawnDeckGenerator = 0x210; // UAISpawnDeckGenerator*
		constexpr auto AISpawnDeck = 0x218; // UAISpawnDeck*
		constexpr auto AISpawnDeckOverrideTags = 0x228; // FGameplayTagContainer
		constexpr auto OverrideAISpawnDeckGenerator = 0x248; // UAISpawnDeckGenerator*
		constexpr auto InitialRecycleConfigOverride = 0x250; // FRecycleConfigOverride
		constexpr auto RecycleConfigOverride = 0x278; // FRecycleConfigOverride
		constexpr auto UsableActors = 0x2a0; // TArray<AActor*>
		constexpr auto AISmartActors = 0x2b8; // TArray<AAISmartActorBase*>
		constexpr auto State = 0x2c8; // EScenarioState
		constexpr auto HeroDebugInfos = 0x300; // TArray<FScenarioHeroDebugInfo>
		constexpr auto LastActiveSpawnRule = 0x310; // FName
		constexpr auto SpawnerSuccessRate = 0x318; // float
		constexpr auto bDeckCleanup = 0x31e; // bool
		constexpr auto MaxDeckCleanupDuration = 0x320; // float
		constexpr auto DeckCleanupHeroAdvanceRange = 0x324; // float
	}

	namespace n_UDatasmithAreaLightActorTemplate {
		constexpr auto LightType = 0x38; // EDatasmithAreaLightActorType
		constexpr auto LightShape = 0x39; // EDatasmithAreaLightActorShape
		constexpr auto Dimensions = 0x3c; // FVector2D
		constexpr auto Color = 0x44; // FLinearColor
		constexpr auto Intensity = 0x54; // float
		constexpr auto IntensityUnits = 0x58; // ELightUnits
		constexpr auto Temperature = 0x5c; // float
		constexpr auto IESTexture = 0x60; // TSoftObjectPtr<UTextureLightProfile>
		constexpr auto bUseIESBrightness = 0x88; // bool
		constexpr auto IESBrightnessScale = 0x8c; // float
		constexpr auto Rotation = 0x90; // FRotator
		constexpr auto SourceRadius = 0x9c; // float
		constexpr auto SourceLength = 0xa0; // float
		constexpr auto AttenuationRadius = 0xa4; // float
	}

	namespace n_UParticleModuleSpawnPerUnit {
		constexpr auto UnitScalar = 0x40; // float
		constexpr auto MovementTolerance = 0x44; // float
		constexpr auto SpawnPerUnit = 0x48; // FRawDistributionFloat
		constexpr auto MaxFrameDistance = 0x78; // float
		constexpr auto bIgnoreSpawnRateWhenMoving = 0x7c; // char : 1
		constexpr auto bIgnoreMovementAlongX = 0x7c; // char : 1
		constexpr auto bIgnoreMovementAlongY = 0x7c; // char : 1
		constexpr auto bIgnoreMovementAlongZ = 0x7c; // char : 1
	}

	namespace n_UVectorFieldStatic {
		constexpr auto SizeX = 0x50; // int32_t
		constexpr auto SizeY = 0x54; // int32_t
		constexpr auto SizeZ = 0x58; // int32_t
		constexpr auto bAllowCPUAccess = 0x5c; // bool
		constexpr auto CPUData = 0x90; // TArray<FVector4>
	}

	namespace n_UInterpTrackVectorMaterialParam {
		constexpr auto TargetMaterials = 0x98; // TArray<UMaterialInterface*>
		constexpr auto ParamName = 0xa8; // FName
	}

	namespace n_ALightmassPortal {
		constexpr auto PortalComponent = 0x2a0; // ULightmassPortalComponent*
	}

	namespace n_UMaterialExpressionFeatureLevelSwitch {
		constexpr auto Default = 0x48; // FExpressionInput
		constexpr auto Inputs = 0x5c; // FExpressionInput [0x4]
	}

	namespace n_URuntimeVirtualTextureStreamingProxy {
		constexpr auto Settings = 0xf0; // FVirtualTextureBuildSettings
		constexpr auto bSinglePhysicalSpace = 0xfc; // bool
		constexpr auto BuildHash = 0x100; // uint32_t
	}

	namespace n_UBTDecorator_CheckLOS {
		constexpr auto bDoAsyncTrace = 0x70; // bool
		constexpr auto TraceData = 0x78; // FAIDataProviderTraceDataValue
		constexpr auto StartKey = 0xc0; // FBlackboardKeySelector
		constexpr auto EndKey = 0xe8; // FBlackboardKeySelector
		constexpr auto TraceStartForwardOffset = 0x110; // FAIDataProviderFloatValue
		constexpr auto TraceEndForwardOffset = 0x148; // FAIDataProviderFloatValue
		constexpr auto TraceStartHeightOffset = 0x180; // FAIDataProviderFloatValue
		constexpr auto TraceStartCharacterHeightOffsetScalar = 0x1b8; // FAIDataProviderFloatValue
		constexpr auto TraceEndHeightOffset = 0x1f0; // FAIDataProviderFloatValue
		constexpr auto bTraceBothDirections = 0x228; // bool
		constexpr auto bDisableOnSuccess = 0x229; // bool
		constexpr auto FlowControlDelay = 0x22c; // float
	}

	namespace n_UPassageSpawnerMod {
		constexpr auto AlarmCountsMin = 0xd8; // FGamePropertyFloatMod [0x4]
		constexpr auto AlarmCountsMax = 0x118; // FGamePropertyFloatMod [0x4]
		constexpr auto ClassCountsMin = 0x158; // FGamePropertyFloatMod [0x4]
		constexpr auto ClassCountsMax = 0x198; // FGamePropertyFloatMod [0x4]
		constexpr auto AlarmWeights = 0x1d8; // FGamePropertyFloatMod [0x4]
		constexpr auto ClassWeights = 0x218; // FGamePropertyFloatMod [0x4]
	}

	namespace n_UMRMeshComponent {
		constexpr auto Material = 0x4b8; // UMaterialInterface*
		constexpr auto bCreateMeshProxySections = 0x4c0; // bool
		constexpr auto bUpdateNavMeshOnMeshUpdate = 0x4c1; // bool
		constexpr auto bNeverCreateCollisionMesh = 0x4c2; // bool
		constexpr auto CachedBodySetup = 0x4c8; // UBodySetup*
		constexpr auto BodySetups = 0x4d0; // TArray<UBodySetup*>
		constexpr auto WireframeMaterial = 0x4e0; // UMaterialInterface*
	}

	namespace n_UProceduralBuilderEditorSettings {
		constexpr auto bSelectionPrefabOptionsEnabled = 0x30; // bool
		constexpr auto bFullMapPrefabOptionsEnabled = 0x31; // bool
		constexpr auto bAutoUpdatePlacedPrefabsWithoutPromptPostUpdate = 0x32; // bool
		constexpr auto bAutoBuildOnPlacement = 0x33; // bool
		constexpr auto bAutoSelectPostAutoBuild = 0x34; // bool
		constexpr auto bAutoUpdatePrefabsOnMapLoadForCommandlets = 0x35; // bool
		constexpr auto bAutoUpdatePromptForLocked = 0x36; // bool
		constexpr auto bAutoUpdatePromptForUnlocked = 0x37; // bool
		constexpr auto bReplaceSelectionWithPrefabOnCreateFromPrefab = 0x38; // bool
		constexpr auto StrictClassFilter = 0x40; // TArray<FString>
		constexpr auto InheritedClassFilter = 0x50; // TArray<FString>
		constexpr auto StrictClassAndAttachedFilter = 0x60; // TArray<FString>
		constexpr auto InheritedClassAndAttachedFilter = 0x70; // TArray<FString>
	}

	namespace n_UNavigationSystemConfig {
		constexpr auto NavigationSystemClass = 0x30; // FSoftClassPath
		constexpr auto SupportedAgentsMask = 0x48; // FNavAgentSelector
		constexpr auto DefaultAgentName = 0x4c; // FName
		constexpr auto bIsOverriden = 0x54; // char : 1
	}

	namespace n_UBTTask_PlaySound {
		constexpr auto SoundToPlay = 0x78; // USoundCue*
	}

	namespace n_UMaterialExpressionDesaturation {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto Fraction = 0x5c; // FExpressionInput
		constexpr auto LuminanceFactors = 0x70; // FLinearColor
	}

	namespace n_UBTComposite_SimpleParallel {
		constexpr auto FinishMode = 0x98; // EBTParallelMode
	}

	namespace n_UMaterialExpressionTruncate {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UMaterialExpressionBentNormalCustomOutput {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UMovieSceneAkTrack {
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
		constexpr auto bIsAMasterTrack = 0x70; // char : 1
	}

	namespace n_UAffinityPopupStatEntryUserWidget {
		constexpr auto StatEntryClass = 0x458; // UStatEntryUserWidget*
	}

	namespace n_UThreatComponent {
		constexpr auto bIsEnabled = 0xe8; // bool
		constexpr auto ThreatLevel = 0xe9; // EThreatLevel
		constexpr auto bStartsEnabled = 0xea; // bool
		constexpr auto DefaultAlertRadius = 0xec; // float
		constexpr auto NoiseLoudness = 0xf0; // float
		constexpr auto NoiseEventFrequency = 0xf4; // float
		constexpr auto bValidOnlyForAllBotTeams = 0xfc; // bool
		constexpr auto bDynamicProximityChecks = 0xfd; // bool
		constexpr auto ProximityChkFreq = 0x100; // float
		constexpr auto FriendlyProximityDist = 0x110; // float
		constexpr auto NumFriendliesToDisable = 0x118; // int32_t
		constexpr auto EnemyProximityDist = 0x11c; // float
		constexpr auto NumEnemiesToEnable = 0x124; // int32_t
	}

	namespace n_ANavSystemConfigOverride {
		constexpr auto NavigationSystemConfig = 0x2a0; // UNavigationSystemConfig*
		constexpr auto OverridePolicy = 0x2a8; // ENavSystemOverridePolicy
		constexpr auto bLoadOnClient = 0x2a9; // char : 1
	}

	namespace n_USignificanceManager {
		constexpr auto SignificanceManagerClassName = 0x110; // FSoftClassPath
	}

	namespace n_UTaskManRelayStatusUserWidget {
		constexpr auto DisabledText = 0x458; // FString
	}

	namespace n_UObjectReferencer {
		constexpr auto ReferencedObjects = 0x30; // TArray<UObject*>
	}

	namespace n_UMaterialExpressionTime {
		constexpr auto bIgnorePause = 0x48; // char : 1
		constexpr auto bOverride_Period = 0x48; // char : 1
		constexpr auto Period = 0x4c; // float
	}

	namespace n_USimpleConstructionScript {
		constexpr auto RootNodes = 0x30; // TArray<USCS_Node*>
		constexpr auto AllNodes = 0x40; // TArray<USCS_Node*>
		constexpr auto DefaultSceneRootNode = 0x50; // USCS_Node*
	}

	namespace n_UBirdSystemMod {
		constexpr auto MinSystems = 0xd8; // FGamePropertyIntMod
		constexpr auto MaxSystems = 0xe8; // FGamePropertyIntMod
	}

	namespace n_UGameplayEffectTraceMeleeComponent {
		constexpr auto MeleeDamageScaleMod = 0x250; // FGamePropertyFloatMod
		constexpr auto MeleeSwingSpeedScaleMod = 0x260; // FGamePropertyFloatMod
		constexpr auto MeleeStaminaScaleMod = 0x270; // FGamePropertyFloatMod
		constexpr auto MeleeStumbleDamageScaleMod = 0x280; // FGamePropertyFloatMod
		constexpr auto MeleeCleavePowerScaleMod = 0x290; // FGamePropertyFloatMod
		constexpr auto BlockingStateAppliedEffects = 0x2a0; // TArray<UGameplayEffect*>
		constexpr auto BlockedDamageSelfAppliedEffects = 0x2b0; // TArray<UGameplayEffect*>
		constexpr auto BlockedDamageInstigatorAppliedEffects = 0x2c0; // TArray<UGameplayEffect*>
		constexpr auto bAllowCollateralDamage = 0x2d0; // bool
	}

	namespace n_UMovieSceneNiagaraVectorParameterTrack {
		constexpr auto ChannelsUsed = 0x98; // int32_t
	}

	namespace n_UHeroScreenManager {
		constexpr auto OnNewHeroCardAdded = 0x210; // FMulticastInlineDelegate
		constexpr auto OnNewHeroCardsCleared = 0x220; // FMulticastInlineDelegate
		constexpr auto KnownAIDirectorCards = 0x230; // TArray<FDataTableRowHandle>
		constexpr auto NewHeroCards = 0x240; // TArray<FDataTableRowHandle>
	}

	namespace n_UAISense_Hearing {
		constexpr auto NoiseEvents = 0x88; // TArray<FAINoiseEvent>
		constexpr auto SpeedOfSoundSq = 0x98; // float
	}

	namespace n_UHeroLocoStances {
		constexpr auto LocoStances = 0x38; // TArray<FLocomotionStance>
	}

	namespace n_UDrenchAssetUserData {
		constexpr auto DrenchMaterialParamOverrides = 0x30; // TMap<FGameplayTag, FDrenchMaterialParamOverride>
	}

	namespace n_UPlayMontageCallbackProxy {
		constexpr auto OnCompleted = 0x30; // FMulticastInlineDelegate
		constexpr auto OnBlendOut = 0x40; // FMulticastInlineDelegate
		constexpr auto OnInterrupted = 0x50; // FMulticastInlineDelegate
		constexpr auto OnNotifyBegin = 0x60; // FMulticastInlineDelegate
		constexpr auto OnNotifyEnd = 0x70; // FMulticastInlineDelegate
	}

	namespace n_UAnimEvalSet_Shared_HitReaction_FB_Recent_C {
		constexpr auto AvatarHealth = 0xc0; // FGameplayEval_Health
		constexpr auto AvatarHitDirection = 0x118; // FGameplayEval_Angle
		constexpr auto AvatarTags = 0x178; // FGameplayEval_GameplayTags
		constexpr auto PlayedRecently = 0x210; // FAnimEval_MontageLastPlayed
		constexpr auto Random = 0x260; // FGameplayEval_Random
	}

	namespace n_UAnimEvalSet_Shared_RangedAttack_C {
		constexpr auto Distance3D ToEnemy = 0xc0; // FGameplayEval_Distance
		constexpr auto AngleToEnemy = 0x190; // FGameplayEval_Angle
		constexpr auto RandomChance = 0x1f0; // FGameplayEval_RandomChance
		constexpr auto LineOfSight = 0x240; // FGameplayEval_LineOfSight
		constexpr auto EnemyTags = 0x290; // FGameplayEval_GameplayTags
	}

	namespace n_UGameplayEffectMaterialParameterCollection {
		constexpr auto ApplyOnStart = 0x238; // TArray<FMaterialParameterCollectionData>
		constexpr auto ApplyOnStop = 0x248; // TArray<FMaterialParameterCollectionData>
	}

	namespace n_UEnvQueryContext_FurthestCapableHero {
		constexpr auto DistanceMode = 0x30; // ECapablePlayerDistanceMode
		constexpr auto DistanceMapSource = 0x38; // UEnvQueryContext*
		constexpr auto DistanceMapNavMesh = 0x40; // FNavAgentSelector
	}

	namespace n_UWidgetBlueprintGeneratedClass {
		constexpr auto WidgetTree = 0x358; // UWidgetTree*
		constexpr auto bAllowTemplate = 0x360; // char : 1
		constexpr auto bAllowDynamicCreation = 0x360; // char : 1
		constexpr auto bValidTemplate = 0x360; // char : 1
		constexpr auto bTemplateInitialized = 0x360; // char : 1
		constexpr auto bCookedTemplate = 0x360; // char : 1
		constexpr auto bClassRequiresNativeTick = 0x360; // char : 1
		constexpr auto Bindings = 0x368; // TArray<FDelegateRuntimeBinding>
		constexpr auto Animations = 0x378; // TArray<UWidgetAnimation*>
		constexpr auto NamedSlots = 0x388; // TArray<FName>
		constexpr auto TemplateAsset = 0x398; // TSoftObjectPtr<UUserWidget>
		constexpr auto Template = 0x3c0; // UUserWidget*
	}

	namespace n_UKillFeedUserWidget {
		constexpr auto PlayerStates = 0x458; // TMap<TWeakObjectPtr<APlayerSlot>, EKillFeedState>
	}

	namespace n_USteeringBehavior_FocusLookAhead {
		constexpr auto LookAheadTime = 0x58; // float
	}

	namespace n_UAnimSequence {
		constexpr auto NumFrames = 0xc0; // int32_t
		constexpr auto TrackToSkeletonMapTable = 0xc8; // TArray<FTrackToSkeletonMap>
		constexpr auto BoneCompressionSettings = 0xe8; // UAnimBoneCompressionSettings*
		constexpr auto CurveCompressionSettings = 0xf0; // UAnimCurveCompressionSettings*
		constexpr auto AdditiveAnimType = 0x168; // EAdditiveAnimationType
		constexpr auto RefPoseType = 0x169; // EAdditiveBasePoseType
		constexpr auto RefPoseSeq = 0x170; // UAnimSequence*
		constexpr auto RefFrameIndex = 0x178; // int32_t
		constexpr auto RetargetSource = 0x17c; // FName
		constexpr auto Interpolation = 0x184; // EAnimInterpolationType
		constexpr auto bEnableRootMotion = 0x185; // bool
		constexpr auto RootMotionRootLock = 0x186; // ERootMotionRootLock
		constexpr auto bForceRootLock = 0x187; // bool
		constexpr auto bUseNormalizedRootMotionScale = 0x188; // bool
		constexpr auto bAnimIsComplete = 0x189; // bool
		constexpr auto bRootMotionSettingsCopiedFromMontage = 0x18a; // bool
		constexpr auto AuthoredSyncMarkers = 0x190; // TArray<FAnimSyncMarker>
	}

	namespace n_UPeriodicMovementComponent {
		constexpr auto UseRandomTimeOffset = 0x128; // bool
		constexpr auto MoveInWorldAxis = 0x129; // bool
		constexpr auto X_Axis = 0x12c; // FPeriodicMovementParams
		constexpr auto Y_Axis = 0x13c; // FPeriodicMovementParams
		constexpr auto Z_Axis = 0x14c; // FPeriodicMovementParams
		constexpr auto Yaw = 0x15c; // FPeriodicMovementParams
	}

	namespace n_UAkSlider {
		constexpr auto Value = 0x148; // float
		constexpr auto ValueDelegate = 0x14c; // FDelegate
		constexpr auto WidgetStyle = 0x160; // FSliderStyle
		constexpr auto Orientation = 0x4d0; // EOrientation
		constexpr auto SliderBarColor = 0x4d4; // FLinearColor
		constexpr auto SliderHandleColor = 0x4e4; // FLinearColor
		constexpr auto IndentHandle = 0x4f4; // bool
		constexpr auto Locked = 0x4f5; // bool
		constexpr auto StepSize = 0x4f8; // float
		constexpr auto IsFocusable = 0x4fc; // bool
		constexpr auto ThePropertyToControl = 0x500; // FAkPropertyToControl
		constexpr auto ItemToControl = 0x510; // FAkWwiseItemToControl
		constexpr auto OnValueChanged = 0x550; // FMulticastInlineDelegate
		constexpr auto OnItemDropped = 0x560; // FMulticastInlineDelegate
		constexpr auto OnPropertyDropped = 0x570; // FMulticastInlineDelegate
	}

	namespace n_UAnimNotify_SharedSoundBase {
		constexpr auto Bone = 0x40; // FName
		constexpr auto DemoSoundAsset = 0x48; // USoundCollectionAssetAnimPreview*
	}

	namespace n_UGameplayEffectPlayerStaminaComponent {
		constexpr auto MaxStaminaMod = 0x240; // FGamePropertyFloatMod
		constexpr auto StaminaRegenPerSecondMod = 0x250; // FGamePropertyFloatMod
	}

	namespace n_USteeringBehavior_Oscillate {
		constexpr auto DistanceContextClass = 0x58; // UAnimContext_Distance*
		constexpr auto TargetActor = 0x60; // UAnimContext_Actor*
		constexpr auto Period = 0x68; // float
		constexpr auto OscillationOuterRange = 0x6c; // FFloatRange
		constexpr auto MaxOscillationRange = 0x7c; // FFloatRange
	}

	namespace n_UNavArea {
		constexpr auto DefaultCost = 0x38; // float
		constexpr auto FixedAreaEnteringCost = 0x3c; // float
		constexpr auto RandomCost = 0x44; // float
		constexpr auto DrawColor = 0x48; // FColor
		constexpr auto SupportedAgents = 0x4c; // FNavAgentSelector
		constexpr auto bSupportsAgent0 = 0x50; // char : 1
		constexpr auto bSupportsAgent1 = 0x50; // char : 1
		constexpr auto bSupportsAgent2 = 0x50; // char : 1
		constexpr auto bSupportsAgent3 = 0x50; // char : 1
		constexpr auto bSupportsAgent4 = 0x50; // char : 1
		constexpr auto bSupportsAgent5 = 0x50; // char : 1
		constexpr auto bSupportsAgent6 = 0x50; // char : 1
		constexpr auto bSupportsAgent7 = 0x50; // char : 1
		constexpr auto bSupportsAgent8 = 0x51; // char : 1
		constexpr auto bSupportsAgent9 = 0x51; // char : 1
		constexpr auto bSupportsAgent10 = 0x51; // char : 1
		constexpr auto bSupportsAgent11 = 0x51; // char : 1
		constexpr auto bSupportsAgent12 = 0x51; // char : 1
		constexpr auto bSupportsAgent13 = 0x51; // char : 1
		constexpr auto bSupportsAgent14 = 0x51; // char : 1
		constexpr auto bSupportsAgent15 = 0x51; // char : 1
	}

	namespace n_UAnimEvalSet_EnterLadderTop_C {
		constexpr auto EnterLadder = 0xc0; // FAnimEval_EnterLadder
	}

	namespace n_UAsyncTask_LoadXRDeviceVisComponent {
		constexpr auto OnModelLoaded = 0x38; // FMulticastInlineDelegate
		constexpr auto OnLoadFailure = 0x48; // FMulticastInlineDelegate
		constexpr auto SpawnedComponent = 0x60; // UPrimitiveComponent*
	}

	namespace n_UAnimEvalSet_Shared_HitReaction_UB_Weakspot_Rupture_C {
		constexpr auto Dismembered = 0xc0; // FGameplayEval_Dismembered
		constexpr auto HitBone = 0x118; // FGameplayEval_HitReactionBone
		constexpr auto DamageType = 0x1c8; // FGameplayEval_DamageType
		constexpr auto DamageAmount = 0x288; // FGameplayEval_DamageAmount
		constexpr auto HitReactionHealth = 0x320; // FGameplayEval_HitReactionHealth
		constexpr auto CanRupture = 0x378; // FGameplayEval_CanRupture
		constexpr auto HitReactionWeakspot = 0x3c8; // FGameplayEval_HitReactionWeakSpot
	}

	namespace n_UMutilationHitReactionSet {
		constexpr auto FilterSet = 0x38; // UGameplayEvaluatorSet*
		constexpr auto HitReactions = 0x40; // TArray<FMutilationHitReaction>
	}

	namespace n_UBTDecorator_CheckPounceTrace {
		constexpr auto StartKey = 0x70; // FBlackboardKeySelector
		constexpr auto EndKey = 0x98; // FBlackboardKeySelector
		constexpr auto TraceStartHeightOffset = 0xc0; // FAIDataProviderFloatValue
		constexpr auto TraceEndHeightOffset = 0xf8; // FAIDataProviderFloatValue
		constexpr auto TraceHalfHeightOffset = 0x130; // FAIDataProviderFloatValue
	}

	namespace n_UDatasmithStaticMeshIFCImportData {
		constexpr auto SourceGlobalId = 0x30; // FString
	}

	namespace n_URuntimeVirtualTextureComponent {
		constexpr auto VirtualTexture = 0x230; // URuntimeVirtualTexture*
		constexpr auto bUseStreamingLowMipsInEditor = 0x238; // bool
		constexpr auto BoundsSourceActor = 0x240; // AActor*
	}

	namespace n_UGlobalStyle {
		constexpr auto Colors = 0x58; // TMap<FName, FGlobalStyleColor>
		constexpr auto Fonts = 0xa8; // TMap<FName, FSlateFontInfo>
		constexpr auto RichTextStyles = 0xf8; // TMap<FName, FTextBlockStyle>
	}

	namespace n_UFoliageType_InstancedStaticMesh {
		constexpr auto Mesh = 0x380; // UStaticMesh*
		constexpr auto OverrideMaterials = 0x388; // TArray<UMaterialInterface*>
		constexpr auto ComponentClass = 0x398; // UFoliageInstancedStaticMeshComponent*
	}

	namespace n_AMolotov_Item_BP_C {
		constexpr auto UberGraphFrame = 0x4d0; // FPointerToUberGraphFrame
		constexpr auto BaseStaticMesh_3P = 0x4d8; // UStaticMeshComponent*
		constexpr auto Flames_1P = 0x4e0; // UFPRigParticleSystemComponent*
		constexpr auto BaseMesh_1P = 0x4e8; // UFPRigSkeletalMeshComponent*
		constexpr auto ClipAmmo = 0x4f0; // UClipAmmoComponent*
		constexpr auto Throwable = 0x4f8; // UThrowableComponent*
		constexpr auto ItemAnimationData = 0x500; // UItemAnimationDataComponent*
	}

	namespace n_AARSharedWorldGameState {
		constexpr auto PreviewImageData = 0x310; // TArray<char>
		constexpr auto ARWorldData = 0x320; // TArray<char>
		constexpr auto PreviewImageBytesTotal = 0x330; // int32_t
		constexpr auto ARWorldBytesTotal = 0x334; // int32_t
		constexpr auto PreviewImageBytesDelivered = 0x338; // int32_t
		constexpr auto ARWorldBytesDelivered = 0x33c; // int32_t
	}

	namespace n_UPacketRelayNetConnection {
		constexpr auto bIsPassthrough = 0x1ad8; // bool
	}

	namespace n_UExplosionTrait {
		constexpr auto Config = 0x30; // FExplosionConfig
		constexpr auto ComponentTag = 0x170; // FGameplayTag
		constexpr auto ExplosionComponentClass = 0x178; // UExplosionComponent*
	}

	namespace n_UWaterInteractableComponent {
		constexpr auto Type = 0x4d8; // InjectionType
		constexpr auto Texture = 0x4e0; // UTexture*
		constexpr auto TextureRGBScale = 0x4e8; // FVector
		constexpr auto TextureAlphaScale = 0x4f4; // float
		constexpr auto Channel = 0x4f8; // WaterForceChannelType
		constexpr auto IntensityCycleBaseline = 0x4fc; // float
		constexpr auto IntensityCycleDuration = 0x500; // float
		constexpr auto IntensityCycleAttack = 0x504; // float
		constexpr auto IntensityCycleDecay = 0x508; // float
		constexpr auto IntensityCycleSustain = 0x50c; // float
		constexpr auto IntensityCycleSustainLevel = 0x510; // float
		constexpr auto IntensityCycleRelease = 0x514; // float
		constexpr auto TileEverywhere = 0x518; // bool
	}

	namespace n_USoundNodeSoundClass {
		constexpr auto SoundClassOverride = 0x60; // USoundClass*
	}

	namespace n_UInputKeySelectorImage {
		constexpr auto WidgetStyle = 0x148; // FButtonStyle
		constexpr auto IconSize = 0x3e0; // FVector2D
		constexpr auto EmptyImage = 0x3e8; // FSlateBrush
		constexpr auto ActionOrAxisName = 0x478; // FName
		constexpr auto IsAxis = 0x480; // bool
		constexpr auto AxisScale = 0x484; // float
		constexpr auto AnalogBindThreshold = 0x488; // float
		constexpr auto BindingTimerDuration = 0x48c; // float
		constexpr auto SelectedKey = 0x490; // FInputChord
		constexpr auto Margin = 0x4b0; // FMargin
		constexpr auto bAllowGamepadKeys = 0x4c0; // bool
		constexpr auto bAllowPCKeys = 0x4c1; // bool
		constexpr auto bRightMouseClear = 0x4c2; // bool
		constexpr auto bCanRebind = 0x4c3; // bool
		constexpr auto EscapeKeys = 0x4c8; // TArray<FKey>
		constexpr auto ClearKeys = 0x4e8; // TArray<FKey>
		constexpr auto OnPreviewSelectKey = 0x4f8; // FMulticastInlineDelegate
		constexpr auto OnKeySelected = 0x508; // FMulticastInlineDelegate
		constexpr auto OnIsSelectingKeyChanged = 0x518; // FMulticastInlineDelegate
		constexpr auto OnCantRebind = 0x528; // FMulticastInlineDelegate
		constexpr auto OnKeyBlocked = 0x538; // FMulticastInlineDelegate
	}

	namespace n_UMovieSceneEnumSection {
		constexpr auto EnumCurve = 0xe8; // FMovieSceneByteChannel
	}

	namespace n_UChaosDestructionListener {
		constexpr auto bIsCollisionEventListeningEnabled = 0x230; // char : 1
		constexpr auto bIsBreakingEventListeningEnabled = 0x230; // char : 1
		constexpr auto bIsTrailingEventListeningEnabled = 0x230; // char : 1
		constexpr auto CollisionEventRequestSettings = 0x234; // FChaosCollisionEventRequestSettings
		constexpr auto BreakingEventRequestSettings = 0x24c; // FChaosBreakingEventRequestSettings
		constexpr auto TrailingEventRequestSettings = 0x264; // FChaosTrailingEventRequestSettings
		constexpr auto ChaosSolverActors = 0x280; // TSet<AChaosSolverActor*>
		constexpr auto GeometryCollectionActors = 0x2d0; // TSet<AGeometryCollectionActor*>
		constexpr auto OnCollisionEvents = 0x320; // FMulticastInlineDelegate
		constexpr auto OnBreakingEvents = 0x330; // FMulticastInlineDelegate
		constexpr auto OnTrailingEvents = 0x340; // FMulticastInlineDelegate
	}

	namespace n_UCommon_DismemberedPiece_ABP_C {
		constexpr auto UberGraphFrame = 0x2f0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2f8; // FAnimNode_Root
		constexpr auto AnimGraphNode_PoseSnapshot = 0x328; // FAnimNode_PoseSnapshot
	}

	namespace n_UVectorField {
		constexpr auto Bounds = 0x30; // FBox
		constexpr auto Intensity = 0x4c; // float
	}

	namespace n_AMelee_ControllerBP_C {
		constexpr auto AIScripting = 0x498; // UAIScriptingComponent*
		constexpr auto AIPerception = 0x4a0; // UAIPerceptionComponent*
		constexpr auto AttackTags = 0x4a8; // FGameplayTagContainer
		constexpr auto AlertTags = 0x4c8; // FGameplayTagContainer
		constexpr auto IdleTags = 0x4e8; // FGameplayTagContainer
		constexpr auto AttackLocation_EQS = 0x508; // UEnvQuery*
		constexpr auto Threat_EQS = 0x510; // UEnvQuery*
		constexpr auto HitReactionTags = 0x518; // FGameplayTagContainer
		constexpr auto Wander_EQS = 0x538; // UEnvQuery*
		constexpr auto AngerTags = 0x540; // FGameplayTagContainer
		constexpr auto AmbushLocation_EQS = 0x560; // UEnvQuery*
		constexpr auto SneakAdvanceLocation_EQS = 0x568; // UEnvQuery*
		constexpr auto SneakTags = 0x570; // FGameplayTagQuery
		constexpr auto SneakAdvanceTags = 0x5b8; // FGameplayTagQuery
	}

	namespace n_UWidgetInteractionComponent {
		constexpr auto OnHoveredWidgetChanged = 0x230; // FMulticastInlineDelegate
		constexpr auto VirtualUserIndex = 0x250; // int32_t
		constexpr auto PointerIndex = 0x254; // float
		constexpr auto TraceChannel = 0x258; // ECollisionChannel
		constexpr auto InteractionDistance = 0x25c; // float
		constexpr auto InteractionSource = 0x260; // EWidgetInteractionSource
		constexpr auto bEnableHitTesting = 0x261; // bool
		constexpr auto bHitTestReturnsFaceIndex = 0x262; // bool
		constexpr auto bIgnoreObstructions = 0x263; // bool
		constexpr auto bShowDebug = 0x264; // bool
		constexpr auto DebugColor = 0x268; // FLinearColor
		constexpr auto CustomHitResult = 0x2f0; // FHitResult
		constexpr auto LocalHitLocation = 0x378; // FVector2D
		constexpr auto LastLocalHitLocation = 0x380; // FVector2D
		constexpr auto HoveredWidgetComponent = 0x388; // UWidgetComponent*
		constexpr auto LastHitResult = 0x390; // FHitResult
		constexpr auto bIsHoveredWidgetInteractable = 0x418; // bool
		constexpr auto bIsHoveredWidgetFocusable = 0x419; // bool
		constexpr auto bIsHoveredWidgetHitTestVisible = 0x41a; // bool
	}

	namespace n_UAnimClassData {
		constexpr auto BakedStateMachines = 0x38; // TArray<FBakedAnimationStateMachine>
		constexpr auto TargetSkeleton = 0x48; // USkeleton*
		constexpr auto AnimNotifies = 0x50; // TArray<FAnimNotifyEvent>
		constexpr auto OrderedSavedPoseIndicesMap = 0x60; // TMap<FName, FCachedPoseIndices>
		constexpr auto AnimBlueprintFunctions = 0xb0; // TArray<FAnimBlueprintFunction>
		constexpr auto AnimBlueprintFunctionData = 0xc0; // TArray<FAnimBlueprintFunctionData>
		constexpr auto AnimNodeProperties = 0xd0; // TArray<TFieldPath<FStructProperty>>
		constexpr auto LinkedAnimGraphNodeProperties = 0xf0; // TArray<TFieldPath<FStructProperty>>
		constexpr auto LinkedAnimLayerNodeProperties = 0x110; // TArray<TFieldPath<FStructProperty>>
		constexpr auto PreUpdateNodeProperties = 0x130; // TArray<TFieldPath<FStructProperty>>
		constexpr auto DynamicResetNodeProperties = 0x150; // TArray<TFieldPath<FStructProperty>>
		constexpr auto StateMachineNodeProperties = 0x170; // TArray<TFieldPath<FStructProperty>>
		constexpr auto InitializationNodeProperties = 0x190; // TArray<TFieldPath<FStructProperty>>
		constexpr auto GraphNameAssetPlayers = 0x1b0; // TMap<FName, FGraphAssetPlayerInformation>
		constexpr auto SyncGroupNames = 0x200; // TArray<FName>
		constexpr auto EvaluateGraphExposedInputs = 0x210; // TArray<FExposedValueHandler>
		constexpr auto GraphBlendOptions = 0x220; // TMap<FName, FAnimGraphBlendOptions>
	}

	namespace n_UTitanStage2TentacleComponent {
		constexpr auto StateInfo = 0x118; // FTitanStage2StateInfo
		constexpr auto ZoneAnims = 0x120; // TArray<FTitanStage2TentacleZoneAnims>
	}

	namespace n_UVariant {
		constexpr auto DisplayText = 0x30; // FText
		constexpr auto ObjectBindings = 0x60; // TArray<UVariantObjectBinding*>
		constexpr auto Thumbnail = 0x70; // UTexture2D*
	}

	namespace n_ULifetimeStatsScreen {
		constexpr auto Stats = 0x558; // TArray<FUIPlayerStat>
	}

	namespace n_UAnimNotifyState_DisableAimAssist {
		constexpr auto bEnableOnNotifyEnd = 0x38; // bool
	}

	namespace n_UParticleModuleTypeDataAnimTrail {
		constexpr auto bDeadTrailsOnDeactivate = 0x38; // char : 1
		constexpr auto bEnablePreviousTangentRecalculation = 0x38; // char : 1
		constexpr auto bTangentRecalculationEveryFrame = 0x38; // char : 1
		constexpr auto TilingDistance = 0x3c; // float
		constexpr auto DistanceTessellationStepSize = 0x40; // float
		constexpr auto TangentTessellationStepSize = 0x44; // float
		constexpr auto WidthTessellationStepSize = 0x48; // float
	}

	namespace n_ULipsyncHelperSubsystem {
		constexpr auto CurrentLanguageLipsyncLines = 0x48; // UDataTable*
		constexpr auto LocalizationTable = 0x50; // UDataTable*
	}

	namespace n_UAnimationSharingStateProcessor {
		constexpr auto AnimationStateEnum = 0x30; // TSoftObjectPtr<UEnum>
	}

	namespace n_UWaypointSpawnerComponent {
		constexpr auto WaypointDef = 0x4d0; // FWaypointDefinition
		constexpr auto Waypoint = 0x5a0; // AWaypoint*
	}

	namespace n_AVistaCharacterSpawner {
		constexpr auto OnVistaCharacteSpawn = 0x2a0; // FMulticastInlineDelegate
		constexpr auto GobiCharacterClass = 0x2b0; // AGobiCharacter*
		constexpr auto PreloadMeshConfigs = 0x2b8; // TArray<USkeletalMeshRegionConfig*>
		constexpr auto NumCharactersToSpawn = 0x2c8; // int32_t
		constexpr auto bFillOnStart = 0x2d0; // bool
		constexpr auto bRespawnOnDeath = 0x2d1; // bool
		constexpr auto SpawnDelay = 0x2d4; // float
		constexpr auto SpawnRadius = 0x2d8; // float
		constexpr auto bSpawnOnlyWhenNotVisible = 0x2dc; // bool
		constexpr auto SpawnNavigationFilterClass = 0x2e0; // UNavigationQueryFilter*
		constexpr auto KillPopDamageType = 0x2e8; // UGobiDamageType*
		constexpr auto LoadedAssets = 0x2f0; // TArray<UObject*>
	}

	namespace n_UNiagaraSpriteRendererProperties {
		constexpr auto Material = 0x58; // UMaterialInterface*
		constexpr auto MaterialUserParamBinding = 0x60; // FNiagaraUserParameterBinding
		constexpr auto Alignment = 0x88; // ENiagaraSpriteAlignment
		constexpr auto FacingMode = 0x89; // ENiagaraSpriteFacingMode
		constexpr auto PivotInUVSpace = 0x8c; // FVector2D
		constexpr auto SortMode = 0x94; // ENiagaraSortMode
		constexpr auto SubImageSize = 0x98; // FVector2D
		constexpr auto bSubImageBlend = 0xa0; // char : 1
		constexpr auto bRemoveHMDRollInVR = 0xa0; // char : 1
		constexpr auto bSortOnlyWhenTranslucent = 0xa0; // char : 1
		constexpr auto MinFacingCameraBlendDistance = 0xa4; // float
		constexpr auto MaxFacingCameraBlendDistance = 0xa8; // float
		constexpr auto PositionBinding = 0xb0; // FNiagaraVariableAttributeBinding
		constexpr auto ColorBinding = 0x128; // FNiagaraVariableAttributeBinding
		constexpr auto VelocityBinding = 0x1a0; // FNiagaraVariableAttributeBinding
		constexpr auto SpriteRotationBinding = 0x218; // FNiagaraVariableAttributeBinding
		constexpr auto SpriteSizeBinding = 0x290; // FNiagaraVariableAttributeBinding
		constexpr auto SpriteFacingBinding = 0x308; // FNiagaraVariableAttributeBinding
		constexpr auto SpriteAlignmentBinding = 0x380; // FNiagaraVariableAttributeBinding
		constexpr auto SubImageIndexBinding = 0x3f8; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterialBinding = 0x470; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial1Binding = 0x4e8; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial2Binding = 0x560; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial3Binding = 0x5d8; // FNiagaraVariableAttributeBinding
		constexpr auto CameraOffsetBinding = 0x650; // FNiagaraVariableAttributeBinding
		constexpr auto UVScaleBinding = 0x6c8; // FNiagaraVariableAttributeBinding
		constexpr auto MaterialRandomBinding = 0x740; // FNiagaraVariableAttributeBinding
		constexpr auto CustomSortingBinding = 0x7b8; // FNiagaraVariableAttributeBinding
		constexpr auto NormalizedAgeBinding = 0x830; // FNiagaraVariableAttributeBinding
	}

	namespace n_UBoxFalloff {
		constexpr auto Magnitude = 0xe8; // float
		constexpr auto MinRange = 0xec; // float
		constexpr auto MaxRange = 0xf0; // float
		constexpr auto Default = 0xf4; // float
		constexpr auto Transform = 0x100; // FTransform
		constexpr auto Falloff = 0x130; // EFieldFalloffType
	}

	namespace n_UApplyDamageDealtEffectsMod {
		constexpr auto ApplicationMethod = 0xd0; // EApplyDamageEffectModType
		constexpr auto DamageDealtTriggerConfig = 0xd8; // FDamageDealtTriggeredEffectConfig
		constexpr auto DamageSourceEmitterDef = 0x1e0; // FCharacterEmitterDef
		constexpr auto DamageTargetEmitterDef = 0x2e8; // FCharacterEmitterDef
	}

	namespace n_UFireModeMachineGunComponent {
		constexpr auto WindUpTime = 0x18c; // float
		constexpr auto MaxDamageDistance = 0x190; // float
		constexpr auto DelayBetweenDamageTicks = 0x194; // float
		constexpr auto DamageType = 0x198; // UGobiDamageType*
		constexpr auto ImpactTraceProfile = 0x1a0; // FCollisionProfileName
		constexpr auto ImpactEffectOverlapProfile = 0x1a8; // FCollisionProfileName
		constexpr auto ImpactEffectRadius = 0x1b0; // float
		constexpr auto ImpactLocationGameplayEffects = 0x1b8; // TArray<UGameplayEffect*>
		constexpr auto GunMeshTag = 0x1c8; // FGameplayTag
		constexpr auto MaxVisualTraceLength = 0x1d0; // float
		constexpr auto DelayBetweenVisualTraces = 0x1d4; // float
		constexpr auto WindupLoopAudio = 0x1d8; // UAkAudioEvent*
		constexpr auto WindupLoopStopAudio = 0x1e0; // UAkAudioEvent*
		constexpr auto FireLoopAudio = 0x1e8; // UAkAudioEvent*
		constexpr auto FireLoopStopAudio = 0x1f0; // UAkAudioEvent*
		constexpr auto MuzzleFlashBoneName = 0x1f8; // FName
		constexpr auto TracerSpawnLocationBoneName = 0x200; // FName
		constexpr auto FirstPersonMuzzleFlash = 0x208; // UParticleSystem*
		constexpr auto ThirdPersonMuzzleFlash = 0x210; // UParticleSystem*
		constexpr auto TracerVelocityMinMax = 0x218; // FVector2D
		constexpr auto ImpactEffectConfig = 0x220; // UImpactEffectConfig*
		constexpr auto WeaponTracer = 0x228; // UWeaponTracer*
		constexpr auto TracerFrequency = 0x230; // char
	}

	namespace n_UHudSettings {
		constexpr auto bShowHUD = 0x30; // char : 1
		constexpr auto DebugDisplay = 0x38; // TArray<FName>
	}

	namespace n_UAnimCompress_RemoveEverySecondKey {
		constexpr auto MinKeys = 0x48; // int32_t
		constexpr auto bStartAtSecondKey = 0x4c; // char : 1
	}

	namespace n_UCreateSessionCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UBTService_CanUseSmartActor {
		constexpr auto SmartActorBlackboardKey = 0xa0; // FBlackboardKeySelector
	}

	namespace n_USoundNodeEnveloper {
		constexpr auto LoopStart = 0x60; // float
		constexpr auto LoopEnd = 0x64; // float
		constexpr auto DurationAfterLoop = 0x68; // float
		constexpr auto LoopCount = 0x6c; // int32_t
		constexpr auto bLoopIndefinitely = 0x70; // char : 1
		constexpr auto bLoop = 0x70; // char : 1
		constexpr auto VolumeInterpCurve = 0x78; // UDistributionFloatConstantCurve*
		constexpr auto PitchInterpCurve = 0x80; // UDistributionFloatConstantCurve*
		constexpr auto VolumeCurve = 0x88; // FRuntimeFloatCurve
		constexpr auto PitchCurve = 0x110; // FRuntimeFloatCurve
		constexpr auto PitchMin = 0x198; // float
		constexpr auto PitchMax = 0x19c; // float
		constexpr auto VolumeMin = 0x1a0; // float
		constexpr auto VolumeMax = 0x1a4; // float
	}

	namespace n_UOperatorField {
		constexpr auto Magnitude = 0xe8; // float
		constexpr auto RightField = 0xf0; // UFieldNodeBase*
		constexpr auto LeftField = 0xf8; // UFieldNodeBase*
		constexpr auto Operation = 0x100; // EFieldOperationType
	}

	namespace n_UMastermindSettings {
		constexpr auto MastermindDebugCommandManagerClass = 0x40; // TSoftClassPtr<UObject>
		constexpr auto MastermindTCPPort = 0x68; // int32_t
	}

	namespace n_UMaterialExpressionConstant4Vector {
		constexpr auto Constant = 0x48; // FLinearColor
	}

	namespace n_UAnimBlueprintGeneratedClass {
		constexpr auto BakedStateMachines = 0x360; // TArray<FBakedAnimationStateMachine>
		constexpr auto TargetSkeleton = 0x370; // USkeleton*
		constexpr auto AnimNotifies = 0x378; // TArray<FAnimNotifyEvent>
		constexpr auto OrderedSavedPoseIndicesMap = 0x388; // TMap<FName, FCachedPoseIndices>
		constexpr auto SyncGroupNames = 0x458; // TArray<FName>
		constexpr auto EvaluateGraphExposedInputs = 0x468; // TArray<FExposedValueHandler>
		constexpr auto GraphAssetPlayerInformation = 0x478; // TMap<FName, FGraphAssetPlayerInformation>
		constexpr auto GraphBlendOptions = 0x4c8; // TMap<FName, FAnimGraphBlendOptions>
	}

	namespace n_UAnimationAsset {
		constexpr auto Skeleton = 0x40; // USkeleton*
		constexpr auto MetaData = 0x68; // TArray<UAnimMetaData*>
		constexpr auto AssetUserData = 0x78; // TArray<UAssetUserData*>
	}

	namespace n_USoundConcurrency {
		constexpr auto Concurrency = 0x30; // FSoundConcurrencySettings
	}

	namespace n_UFieldSystemMetaDataProcessingResolution {
		constexpr auto ResolutionType = 0xe8; // EFieldResolutionType
	}

	namespace n_UBaseTween {
		constexpr auto mOwningTweenContainer = 0x70; // UTweenContainer*
	}

	namespace n_UGameplayEffectClipAmmoComponent {
		constexpr auto MaxClipAmountScaleMod = 0x250; // FGamePropertyFloatMod
	}

	namespace n_UGameDirector {
		constexpr auto OnHordeEvent = 0x30; // FMulticastInlineDelegate
		constexpr auto AITypePointCosts = 0x40; // UAITypePointCosts*
		constexpr auto PacingConfigBase = 0xe8; // FPacingConfigBase
		constexpr auto PacingConfigOverride = 0x130; // TArray<FPacingConfigOverride>
		constexpr auto AISpawnPointBudgets = 0x220; // UAISpawnPointBudgets*
		constexpr auto HeroNavmeshSelector = 0x228; // FNavAgentSelector
		constexpr auto ValidHeroSpawnQuery = 0x238; // FGameplayTagQuery
		constexpr auto ValidHeroLOSQuery = 0x280; // FGameplayTagQuery
		constexpr auto MaxAICount = 0x2c8; // int32_t
		constexpr auto MaxAIInSolo = 0x2cc; // FPerPlatformInt
		constexpr auto TestSpawningScenarioClass = 0x2d8; // TSoftClassPtr<UObject>
		constexpr auto HeroDistanceScoreWeight = 0x308; // float
		constexpr auto HeroPopulationScoreWeight = 0x30c; // float
		constexpr auto HeroSeparationScoreWeight = 0x310; // float
		constexpr auto HeroBudgetScoreWeight = 0x314; // float
		constexpr auto HeroLifeStateScoreWeight = 0x318; // float
		constexpr auto DelayForHordeFinishDialogue = 0x31c; // float
		constexpr auto FloatingConvoDelayAdjustment = 0x320; // float
		constexpr auto IntensitySystemClass = 0x360; // UGameIntensitySystem*
		constexpr auto IntensitySystem = 0x368; // UGameIntensitySystem*
		constexpr auto RecycleConfig = 0x378; // FRecycleConfig
		constexpr auto ResolvedRecycleConfig = 0x390; // FRecycleConfig
		constexpr auto bDisableHorde = 0x3c8; // bool
		constexpr auto bDebugShowStats = 0x3c9; // bool
		constexpr auto LOSChannel = 0x3e2; // ECollisionChannel
		constexpr auto OverrideAISpawnDeckGenerator = 0x3f8; // UAISpawnDeckGenerator*
		constexpr auto AISpawnDeckGeneratorForGobiSpawnAIFromClass = 0x420; // UAISpawnDeckGenerator*
		constexpr auto AISpawnDeckForGobiSpawnAIFromClass = 0x428; // UAISpawnDeck*
		constexpr auto GameDirectorDebugger = 0x430; // AGameDirectorDebugger*
		constexpr auto DirectorStateSummary = 0x438; // FDirectorStateSummary
		constexpr auto ClearAfterHordeConfig = 0x458; // FClearAfterHordeConfig
		constexpr auto SpawnHeatDecayRate = 0x468; // float
	}

	namespace n_UPlanePositionGizmo {
		constexpr auto AxisSource = 0x50; // TScriptInterface<IGizmoAxisSource>
		constexpr auto ParameterSource = 0x60; // TScriptInterface<IGizmoVec2ParameterSource>
		constexpr auto HitTarget = 0x70; // TScriptInterface<IGizmoClickTarget>
		constexpr auto StateTarget = 0x80; // TScriptInterface<IGizmoStateTarget>
		constexpr auto bEnableSignedAxis = 0x90; // bool
		constexpr auto bFlipX = 0x91; // bool
		constexpr auto bFlipY = 0x92; // bool
		constexpr auto bInInteraction = 0x93; // bool
		constexpr auto InteractionOrigin = 0x94; // FVector
		constexpr auto InteractionNormal = 0xa0; // FVector
		constexpr auto InteractionAxisX = 0xac; // FVector
		constexpr auto InteractionAxisY = 0xb8; // FVector
		constexpr auto InteractionStartPoint = 0xc4; // FVector
		constexpr auto InteractionCurPoint = 0xd0; // FVector
		constexpr auto InteractionStartParameter = 0xdc; // FVector2D
		constexpr auto InteractionCurParameter = 0xe4; // FVector2D
		constexpr auto ParameterSigns = 0xec; // FVector2D
	}

	namespace n_UAudioMutilationManager {
		constexpr auto MaxMutilationEventsPerFrame = 0x30; // uint16_t
	}

	namespace n_UClothingAssetBase {
		constexpr auto ImportedFilePath = 0x30; // FString
		constexpr auto AssetGuid = 0x40; // FGuid
	}

	namespace n_UProgressWidgetStyle {
		constexpr auto ProgressBarStyle = 0x38; // FProgressBarStyle
	}

	namespace n_UPartyScreen {
		constexpr auto PartyPrivacyOptionsPtr = 0x5b8; // UPartyPrivacyOptionsPopup*
	}

	namespace n_AMolotov_Projectile_BP_C {
		constexpr auto UberGraphFrame = 0x730; // FPointerToUberGraphFrame
		constexpr auto LitRagParticle = 0x738; // UParticleSystemComponent*
		constexpr auto Alert = 0x740; // UAlertComponent*
		constexpr auto RotatingMovement = 0x748; // URotatingMovementComponent*
	}

	namespace n_UAkPS5InitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettings
		constexpr auto CommunicationSettings = 0x90; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xb8; // FAkPellegrinoAdvancedInitializationSettings
		constexpr auto TRSSettings = 0xf8; // FAkTRSPerPlatformSettings
	}

	namespace n_AStaticMeshActor {
		constexpr auto StaticMeshComponent = 0x2a0; // UStaticMeshComponent*
		constexpr auto bStaticMeshReplicateMovement = 0x2a8; // bool
		constexpr auto NavigationGeometryGatheringMode = 0x2a9; // ENavDataGatheringMode
	}

	namespace n_UCharacterAudioManagerSubsystem {
		constexpr auto MutilationManager = 0x38; // UAudioMutilationManager*
		constexpr auto SharedSoundManager = 0x40; // USharedSoundManager*
	}

	namespace n_UBorderSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UPaperDollAmmoUserWidget {
		constexpr auto AmmoType = 0x460; // EAmmoType
	}

	namespace n_USegmentedReloadComponent {
		constexpr auto bReloadPressed = 0x210; // bool
		constexpr auto ReloadEnterLength = 0x268; // float
		constexpr auto ReloadAddTime = 0x26c; // float
		constexpr auto ReloadLoopLength = 0x270; // float
		constexpr auto ReloadExitLength = 0x274; // float
		constexpr auto ReloadExitAnimationLength = 0x278; // float
		constexpr auto AutoReloadWhenEmpty = 0x27c; // bool
		constexpr auto AppliedTags = 0x280; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x2a0; // FGameplayTagContainer
		constexpr auto InterruptingTags = 0x2c0; // FGameplayTagContainer
		constexpr auto CancellingTags = 0x2e0; // FGameplayTagContainer
		constexpr auto MinRequiredAmmoForReloadInterrupt = 0x300; // int8_t
		constexpr auto ReloadMontageFP = 0x308; // UAnimMontage*
		constexpr auto ReloadMontage3P = 0x310; // UAnimMontage*
	}

	namespace n_UInterpTrackAnimControl {
		constexpr auto SlotName = 0x98; // FName
		constexpr auto AnimSeqs = 0xa0; // TArray<FAnimControlTrackKey>
		constexpr auto bSkipAnimNotifiers = 0xb0; // char : 1
	}

	namespace n_UButtonWidgetStyle {
		constexpr auto ButtonStyle = 0x38; // FButtonStyle
	}

	namespace n_UProceduralFoliageTile {
		constexpr auto FoliageSpawner = 0x30; // UProceduralFoliageSpawner*
		constexpr auto InstancesArray = 0xd8; // TArray<FProceduralFoliageInstance>
	}

	namespace n_UTraitCollection {
		constexpr auto Traits = 0x38; // TArray<UTrait*>
	}

	namespace n_UBotPlaystyleConfigCollection {
		constexpr auto Playstyles = 0x38; // TArray<FBotPlaystyleConfig>
	}

	namespace n_UPawnAction_Wait {
		constexpr auto TimeToWait = 0xa0; // float
	}

	namespace n_UMatchmakingSettingsPanelUserWidget {
		constexpr auto Mode = 0x468; // EMatchmakingScreenMode
	}

	namespace n_UGameViewportClient {
		constexpr auto ViewportConsole = 0x48; // UConsole*
		constexpr auto DebugProperties = 0x50; // TArray<FDebugDisplayProperty>
		constexpr auto MaxSplitscreenPlayers = 0x70; // int32_t
		constexpr auto World = 0x80; // UWorld*
		constexpr auto GameInstance = 0x88; // UGameInstance*
	}

	namespace n_UHierarchicalInstancedStaticMeshComponent {
		constexpr auto SortedInstances = 0x688; // TArray<int32_t>
		constexpr auto NumBuiltInstances = 0x698; // int32_t
		constexpr auto BuiltInstanceBounds = 0x6a0; // FBox
		constexpr auto UnbuiltInstanceBounds = 0x6bc; // FBox
		constexpr auto UnbuiltInstanceBoundsList = 0x6d8; // TArray<FBox>
		constexpr auto bEnableDensityScaling = 0x6e8; // char : 1
		constexpr auto OcclusionLayerNumNodes = 0x6f4; // int32_t
		constexpr auto CacheMeshExtendedBounds = 0x6f8; // FBoxSphereBounds
		constexpr auto bDisableCollision = 0x714; // bool
		constexpr auto InstanceCountToRender = 0x718; // int32_t
	}

	namespace n_UDistributionFloatUniform {
		constexpr auto Min = 0x40; // float
		constexpr auto Max = 0x44; // float
	}

	namespace n_UBTDecorator_CheckGameplayTagsOnActorFlowControl {
		constexpr auto NotifyObserver = 0x148; // EBTGameplayTagRestart
	}

	namespace n_UCampaignRunManager {
		constexpr auto LoadedCampaignRunData = 0x80; // FCampaignRunDataV3
	}

	namespace n_AVolumetricLightmapDensityVolume {
		constexpr auto AllowedMipLevelRange = 0x2d8; // FInt32Interval
	}

	namespace n_UAnimNotify_PlayerSound {
		constexpr auto PlayerSoundEvent = 0x40; // UAkAudioEvent*
	}

	namespace n_UCurrencyDragPayload {
		constexpr auto NumToDrop = 0x38; // int32_t
	}

	namespace n_UStaminaBarUserWidget {
		constexpr auto PipClass = 0x458; // UStaminaPipUserWidget*
		constexpr auto CurrentStamina = 0x460; // float
		constexpr auto MaxStamina = 0x464; // float
	}

	namespace n_AWaterSimSurfaceMesh {
		constexpr auto bStandaloneWaterSim = 0x2b0; // bool
		constexpr auto WaterSim = 0x2b8; // UWaterSimulation*
		constexpr auto WaterSurfaceComponent = 0x2c0; // UWaterSurfaceComponent*
		constexpr auto DistanceCheckInterval = 0x2c8; // float
	}

	namespace n_UAnimationCompressionLibraryDatabase {
		constexpr auto CookedCompressedBytes = 0x30; // TArray<char>
		constexpr auto CookedAnimSequenceMappings = 0x40; // TArray<uint64_t>
		constexpr auto MaxStreamRequestSizeKB = 0x120; // uint32_t
	}

	namespace n_ULadderMovementModeComponent {
		constexpr auto ApproachMontages = 0x130; // TArray<UAnimMontage*>
		constexpr auto DismountMontages = 0x140; // TArray<UAnimMontage*>
		constexpr auto Config = 0x150; // FLadderMovementModeConfig
		constexpr auto MoveTickData = 0x320; // FLadderMovementModeData
	}

	namespace n_UNiagaraDataInterfaceCurve {
		constexpr auto Curve = 0x60; // FRichCurve
	}

	namespace n_UNiagaraDataInterfaceExport {
		constexpr auto CallbackHandlerParameter = 0x38; // FNiagaraUserParameterBinding
	}

	namespace n_UEditableText {
		constexpr auto Text = 0x148; // FText
		constexpr auto TextDelegate = 0x160; // FDelegate
		constexpr auto HintText = 0x170; // FText
		constexpr auto HintTextDelegate = 0x188; // FDelegate
		constexpr auto WidgetStyle = 0x198; // FEditableTextStyle
		constexpr auto Style = 0x3e0; // USlateWidgetStyleAsset*
		constexpr auto BackgroundImageSelected = 0x3e8; // USlateBrushAsset*
		constexpr auto BackgroundImageComposing = 0x3f0; // USlateBrushAsset*
		constexpr auto CaretImage = 0x3f8; // USlateBrushAsset*
		constexpr auto Font = 0x400; // FSlateFontInfo
		constexpr auto ColorAndOpacity = 0x460; // FSlateColor
		constexpr auto IsReadOnly = 0x490; // bool
		constexpr auto IsPassword = 0x491; // bool
		constexpr auto MinimumDesiredWidth = 0x494; // float
		constexpr auto IsCaretMovedWhenGainFocus = 0x498; // bool
		constexpr auto SelectAllTextWhenFocused = 0x499; // bool
		constexpr auto RevertTextOnEscape = 0x49a; // bool
		constexpr auto ClearKeyboardFocusOnCommit = 0x49b; // bool
		constexpr auto SelectAllTextOnCommit = 0x49c; // bool
		constexpr auto AllowContextMenu = 0x49d; // bool
		constexpr auto KeyboardType = 0x49e; // EVirtualKeyboardType
		constexpr auto VirtualKeyboardOptions = 0x49f; // FVirtualKeyboardOptions
		constexpr auto VirtualKeyboardTrigger = 0x4a0; // EVirtualKeyboardTrigger
		constexpr auto VirtualKeyboardDismissAction = 0x4a1; // EVirtualKeyboardDismissAction
		constexpr auto Justification = 0x4a2; // ETextJustify
		constexpr auto ShapedTextOptions = 0x4a3; // FShapedTextOptions
		constexpr auto bIsFocusedOnHover = 0x4a6; // bool
		constexpr auto bIsFocusRectVisible = 0x4a7; // bool
		constexpr auto OnIsTypedCharValid = 0x4a8; // FDelegate
		constexpr auto OnTextChanged = 0x4b8; // FMulticastInlineDelegate
		constexpr auto OnTextCommitted = 0x4c8; // FMulticastInlineDelegate
	}

	namespace n_UNavAreaMeta_SwitchByAgent {
		constexpr auto Agent0Area = 0x58; // UNavArea*
		constexpr auto Agent1Area = 0x60; // UNavArea*
		constexpr auto Agent2Area = 0x68; // UNavArea*
		constexpr auto Agent3Area = 0x70; // UNavArea*
		constexpr auto Agent4Area = 0x78; // UNavArea*
		constexpr auto Agent5Area = 0x80; // UNavArea*
		constexpr auto Agent6Area = 0x88; // UNavArea*
		constexpr auto Agent7Area = 0x90; // UNavArea*
		constexpr auto Agent8Area = 0x98; // UNavArea*
		constexpr auto Agent9Area = 0xa0; // UNavArea*
		constexpr auto Agent10Area = 0xa8; // UNavArea*
		constexpr auto Agent11Area = 0xb0; // UNavArea*
		constexpr auto Agent12Area = 0xb8; // UNavArea*
		constexpr auto Agent13Area = 0xc0; // UNavArea*
		constexpr auto Agent14Area = 0xc8; // UNavArea*
		constexpr auto Agent15Area = 0xd0; // UNavArea*
	}

	namespace n_UExpandableArea {
		constexpr auto Style = 0x150; // FExpandableAreaStyle
		constexpr auto BorderBrush = 0x280; // FSlateBrush
		constexpr auto BorderColor = 0x310; // FSlateColor
		constexpr auto bIsExpanded = 0x340; // bool
		constexpr auto MaxHeight = 0x344; // float
		constexpr auto HeaderPadding = 0x348; // FMargin
		constexpr auto AreaPadding = 0x358; // FMargin
		constexpr auto OnExpansionChanged = 0x368; // FMulticastInlineDelegate
		constexpr auto HeaderContent = 0x378; // UWidget*
		constexpr auto BodyContent = 0x380; // UWidget*
	}

	namespace n_UUdpMessagingSettings {
		constexpr auto EnableTransport = 0x30; // bool
		constexpr auto bAutoRepair = 0x31; // bool
		constexpr auto bStopServiceWhenAppDeactivates = 0x32; // bool
		constexpr auto UnicastEndpoint = 0x38; // FString
		constexpr auto MulticastEndpoint = 0x48; // FString
		constexpr auto MessageFormat = 0x58; // EUdpMessageFormat
		constexpr auto MulticastTimeToLive = 0x59; // char
		constexpr auto StaticEndpoints = 0x60; // TArray<FString>
		constexpr auto EnableTunnel = 0x70; // bool
		constexpr auto TunnelUnicastEndpoint = 0x78; // FString
		constexpr auto TunnelMulticastEndpoint = 0x88; // FString
		constexpr auto RemoteTunnelEndpoints = 0x98; // TArray<FString>
	}

	namespace n_UParticleModuleOrbit {
		constexpr auto ChainMode = 0x40; // EOrbitChainMode
		constexpr auto OffsetAmount = 0x48; // FRawDistributionVector
		constexpr auto OffsetOptions = 0x90; // FOrbitOptions
		constexpr auto RotationAmount = 0x98; // FRawDistributionVector
		constexpr auto RotationOptions = 0xe0; // FOrbitOptions
		constexpr auto RotationRateAmount = 0xe8; // FRawDistributionVector
		constexpr auto RotationRateOptions = 0x130; // FOrbitOptions
	}

	namespace n_AGeometryCollectionRenderLevelSetActor {
		constexpr auto TargetVolumeTexture = 0x2a0; // UVolumeTexture*
		constexpr auto RayMarchMaterial = 0x2a8; // UMaterial*
		constexpr auto SurfaceTolerance = 0x2b0; // float
		constexpr auto Isovalue = 0x2b4; // float
		constexpr auto Enabled = 0x2b8; // bool
		constexpr auto RenderVolumeBoundingBox = 0x2b9; // bool
	}

	namespace n_USourceEffectSimpleDelayPreset {
		constexpr auto Settings = 0x88; // FSourceEffectSimpleDelaySettings
	}

	namespace n_UClothPhysicalMeshDataBase_Legacy {
		constexpr auto Vertices = 0x30; // TArray<FVector>
		constexpr auto Normals = 0x40; // TArray<FVector>
		constexpr auto Indices = 0x50; // TArray<uint32_t>
		constexpr auto InverseMasses = 0x60; // TArray<float>
		constexpr auto BoneData = 0x70; // TArray<FClothVertBoneData>
		constexpr auto NumFixedVerts = 0x80; // int32_t
		constexpr auto MaxBoneWeights = 0x84; // int32_t
		constexpr auto SelfCollisionIndices = 0x88; // TArray<uint32_t>
	}

	namespace n_UCharacterMovementComponent {
		constexpr auto CharacterOwner = 0x180; // ACharacter*
		constexpr auto GravityScale = 0x188; // float
		constexpr auto MaxStepHeight = 0x18c; // float
		constexpr auto MaxFloorTraceDistance = 0x190; // float
		constexpr auto JumpZVelocity = 0x194; // float
		constexpr auto JumpOffJumpZFactor = 0x198; // float
		constexpr auto JumpOffSpeed = 0x19c; // float
		constexpr auto WalkableFloorAngle = 0x1a0; // float
		constexpr auto WalkableFloorZ = 0x1a4; // float
		constexpr auto MovementMode = 0x1a8; // EMovementMode
		constexpr auto CustomMovementMode = 0x1a9; // char
		constexpr auto NetworkSmoothingMode = 0x1aa; // ENetworkSmoothingMode
		constexpr auto GroundFriction = 0x1ac; // float
		constexpr auto MaxWalkSpeed = 0x1cc; // float
		constexpr auto MaxWalkSpeedCrouched = 0x1d0; // float
		constexpr auto MaxSwimSpeed = 0x1d4; // float
		constexpr auto MaxFlySpeed = 0x1d8; // float
		constexpr auto MaxCustomMovementSpeed = 0x1dc; // float
		constexpr auto MaxAcceleration = 0x1e0; // float
		constexpr auto MinAnalogWalkSpeed = 0x1e4; // float
		constexpr auto BrakingFrictionFactor = 0x1e8; // float
		constexpr auto BrakingFriction = 0x1ec; // float
		constexpr auto BrakingSubStepTime = 0x1f0; // float
		constexpr auto BrakingDecelerationWalking = 0x1f4; // float
		constexpr auto BrakingDecelerationFalling = 0x1f8; // float
		constexpr auto BrakingDecelerationSwimming = 0x1fc; // float
		constexpr auto BrakingDecelerationFlying = 0x200; // float
		constexpr auto AirControl = 0x204; // float
		constexpr auto AirControlBoostMultiplier = 0x208; // float
		constexpr auto AirControlBoostVelocityThreshold = 0x20c; // float
		constexpr auto FallingLateralFriction = 0x210; // float
		constexpr auto CrouchedHalfHeight = 0x214; // float
		constexpr auto Buoyancy = 0x218; // float
		constexpr auto PerchRadiusThreshold = 0x21c; // float
		constexpr auto PerchAdditionalHeight = 0x220; // float
		constexpr auto RotationRate = 0x224; // FRotator
		constexpr auto bUseSeparateBrakingFriction = 0x230; // char : 1
		constexpr auto bApplyGravityWhileJumping = 0x230; // char : 1
		constexpr auto bUseControllerDesiredRotation = 0x230; // char : 1
		constexpr auto bOrientRotationToMovement = 0x230; // char : 1
		constexpr auto bSweepWhileNavWalking = 0x230; // char : 1
		constexpr auto bMovementInProgress = 0x230; // char : 1
		constexpr auto bEnableScopedMovementUpdates = 0x230; // char : 1
		constexpr auto bEnableServerDualMoveScopedMovementUpdates = 0x231; // char : 1
		constexpr auto bForceMaxAccel = 0x231; // char : 1
		constexpr auto bRunPhysicsWithNoController = 0x231; // char : 1
		constexpr auto bForceNextFloorCheck = 0x231; // char : 1
		constexpr auto bShrinkProxyCapsule = 0x231; // char : 1
		constexpr auto bCanWalkOffLedges = 0x231; // char : 1
		constexpr auto bCanWalkOffLedgesWhenCrouching = 0x231; // char : 1
		constexpr auto bNetworkSkipProxyPredictionOnNetUpdate = 0x232; // char : 1
		constexpr auto bNetworkAlwaysReplicateTransformUpdateTimestamp = 0x232; // char : 1
		constexpr auto bDeferUpdateMoveComponent = 0x232; // char : 1
		constexpr auto bEnablePhysicsInteraction = 0x232; // char : 1
		constexpr auto bTouchForceScaledToMass = 0x232; // char : 1
		constexpr auto bPushForceScaledToMass = 0x232; // char : 1
		constexpr auto bPushForceUsingZOffset = 0x232; // char : 1
		constexpr auto bScalePushForceToVelocity = 0x233; // char : 1
		constexpr auto DeferredUpdatedMoveComponent = 0x238; // USceneComponent*
		constexpr auto MaxOutOfWaterStepHeight = 0x240; // float
		constexpr auto OutofWaterZ = 0x244; // float
		constexpr auto Mass = 0x248; // float
		constexpr auto StandingDownwardForceScale = 0x24c; // float
		constexpr auto InitialPushForceFactor = 0x250; // float
		constexpr auto PushForceFactor = 0x254; // float
		constexpr auto PushForcePointZOffsetFactor = 0x258; // float
		constexpr auto TouchForceFactor = 0x25c; // float
		constexpr auto MinTouchForce = 0x260; // float
		constexpr auto MaxTouchForce = 0x264; // float
		constexpr auto RepulsionForce = 0x268; // float
		constexpr auto Acceleration = 0x26c; // FVector
		constexpr auto LastUpdateRotation = 0x280; // FQuat
		constexpr auto LastUpdateLocation = 0x290; // FVector
		constexpr auto LastUpdateVelocity = 0x29c; // FVector
		constexpr auto ServerLastTransformUpdateTimeStamp = 0x2a8; // float
		constexpr auto ServerLastClientGoodMoveAckTime = 0x2ac; // float
		constexpr auto ServerLastClientAdjustmentTime = 0x2b0; // float
		constexpr auto PendingImpulseToApply = 0x2b4; // FVector
		constexpr auto PendingForceToApply = 0x2c0; // FVector
		constexpr auto AnalogInputModifier = 0x2cc; // float
		constexpr auto MaxSimulationTimeStep = 0x2dc; // float
		constexpr auto MaxSimulationIterations = 0x2e0; // int32_t
		constexpr auto MaxJumpApexAttemptsPerSimulation = 0x2e4; // int32_t
		constexpr auto MaxDepenetrationWithGeometry = 0x2e8; // float
		constexpr auto MaxDepenetrationWithGeometryAsProxy = 0x2ec; // float
		constexpr auto MaxDepenetrationWithPawn = 0x2f0; // float
		constexpr auto MaxDepenetrationWithPawnAsProxy = 0x2f4; // float
		constexpr auto NetworkSimulatedSmoothLocationTime = 0x2f8; // float
		constexpr auto NetworkSimulatedSmoothRotationTime = 0x2fc; // float
		constexpr auto ListenServerNetworkSimulatedSmoothLocationTime = 0x300; // float
		constexpr auto ListenServerNetworkSimulatedSmoothRotationTime = 0x304; // float
		constexpr auto NetProxyShrinkRadius = 0x308; // float
		constexpr auto NetProxyShrinkHalfHeight = 0x30c; // float
		constexpr auto NetworkMaxSmoothUpdateDistance = 0x310; // float
		constexpr auto NetworkNoSmoothUpdateDistance = 0x314; // float
		constexpr auto NetworkMinTimeBetweenClientAckGoodMoves = 0x318; // float
		constexpr auto NetworkMinTimeBetweenClientAdjustments = 0x31c; // float
		constexpr auto NetworkMinTimeBetweenClientAdjustmentsLargeCorrection = 0x320; // float
		constexpr auto NetworkLargeClientCorrectionDistance = 0x324; // float
		constexpr auto LedgeCheckThreshold = 0x328; // float
		constexpr auto JumpOutOfWaterPitch = 0x32c; // float
		constexpr auto CurrentFloor = 0x330; // FFindFloorResult
		constexpr auto DefaultLandMovementMode = 0x3c4; // EMovementMode
		constexpr auto DefaultWaterMovementMode = 0x3c5; // EMovementMode
		constexpr auto GroundMovementMode = 0x3c6; // EMovementMode
		constexpr auto bMaintainHorizontalGroundVelocity = 0x3c7; // char : 1
		constexpr auto MaxSpeedWhenMaintainingHorizontalGroundVelocity = 0x3c8; // float
		constexpr auto bImpartBaseVelocityX = 0x3cc; // char : 1
		constexpr auto bImpartBaseVelocityY = 0x3cc; // char : 1
		constexpr auto bImpartBaseVelocityZ = 0x3cc; // char : 1
		constexpr auto bImpartBaseAngularVelocity = 0x3cc; // char : 1
		constexpr auto bJustTeleported = 0x3cc; // char : 1
		constexpr auto bNetworkUpdateReceived = 0x3cc; // char : 1
		constexpr auto bNetworkMovementModeChanged = 0x3cc; // char : 1
		constexpr auto bIgnoreClientMovementErrorChecksAndCorrection = 0x3cc; // char : 1
		constexpr auto bServerAcceptClientAuthoritativePosition = 0x3cd; // char : 1
		constexpr auto bNotifyApex = 0x3cd; // char : 1
		constexpr auto bCheatFlying = 0x3cd; // char : 1
		constexpr auto bWantsToCrouch = 0x3cd; // char : 1
		constexpr auto bCrouchMaintainsBaseLocation = 0x3cd; // char : 1
		constexpr auto bIgnoreBaseRotation = 0x3cd; // char : 1
		constexpr auto bFastAttachedMove = 0x3cd; // char : 1
		constexpr auto bAlwaysCheckFloor = 0x3cd; // char : 1
		constexpr auto bUseFlatBaseForFloorChecks = 0x3ce; // char : 1
		constexpr auto bPerformingJumpOff = 0x3ce; // char : 1
		constexpr auto bWantsToLeaveNavWalking = 0x3ce; // char : 1
		constexpr auto bUseRVOAvoidance = 0x3ce; // char : 1
		constexpr auto bRequestedMoveUseAcceleration = 0x3ce; // char : 1
		constexpr auto bWasSimulatingRootMotion = 0x3d8; // char : 1
		constexpr auto bAllowPhysicsRotationDuringAnimRootMotion = 0x3d8; // char : 1
		constexpr auto bHasRequestedVelocity = 0x3d8; // char : 1
		constexpr auto bRequestedMoveWithMaxSpeed = 0x3d8; // char : 1
		constexpr auto bWasAvoidanceUpdated = 0x3d8; // char : 1
		constexpr auto bProjectNavMeshWalking = 0x3d8; // char : 1
		constexpr auto bProjectNavMeshOnBothWorldChannels = 0x3d9; // char : 1
		constexpr auto AvoidanceConsiderationRadius = 0x3ec; // float
		constexpr auto RequestedVelocity = 0x3f0; // FVector
		constexpr auto AvoidanceUID = 0x3fc; // int32_t
		constexpr auto AvoidanceGroup = 0x400; // FNavAvoidanceMask
		constexpr auto GroupsToAvoid = 0x404; // FNavAvoidanceMask
		constexpr auto GroupsToIgnore = 0x408; // FNavAvoidanceMask
		constexpr auto AvoidanceWeight = 0x40c; // float
		constexpr auto PendingLaunchVelocity = 0x410; // FVector
		constexpr auto NavMeshProjectionInterval = 0x4c0; // float
		constexpr auto NavMeshProjectionTimer = 0x4c4; // float
		constexpr auto NavMeshProjectionInterpSpeed = 0x4c8; // float
		constexpr auto NavMeshProjectionHeightScaleUp = 0x4cc; // float
		constexpr auto NavMeshProjectionHeightScaleDown = 0x4d0; // float
		constexpr auto NavWalkingFloorDistTolerance = 0x4d4; // float
		constexpr auto bClampToNavMeshWhenNormalWalking = 0x4d8; // char : 1
		constexpr auto PostPhysicsTickFunction = 0x4e0; // FCharacterMovementComponentPostPhysicsTickFunction
		constexpr auto MinTimeBetweenTimeStampResets = 0x53c; // float
		constexpr auto CurrentRootMotion = 0x548; // FRootMotionSourceGroup
		constexpr auto RootMotionParams = 0x610; // FRootMotionMovementParams
		constexpr auto AnimRootMotionVelocity = 0x654; // FVector
	}

	namespace n_UMaterialExpressionVertexInterpolator {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UParticleModuleMeshRotation {
		constexpr auto StartRotation = 0x38; // FRawDistributionVector
		constexpr auto bInheritParent = 0x80; // char : 1
	}

	namespace n_UProceduralFoliageSpawner {
		constexpr auto RandomSeed = 0x30; // int32_t
		constexpr auto TileSize = 0x34; // float
		constexpr auto NumUniqueTiles = 0x38; // int32_t
		constexpr auto MinimumQuadTreeSize = 0x3c; // float
		constexpr auto FoliageTypes = 0x48; // TArray<FFoliageTypeObject>
	}

	namespace n_UAnimEvalSet_Shared_DeathReaction_Fire_C {
		constexpr auto DamageType = 0xc0; // FGameplayEval_DamageType
		constexpr auto AvatarHealth = 0x180; // FGameplayEval_Health
		constexpr auto RandomChance = 0x1d8; // FGameplayEval_RandomChance
		constexpr auto GameplayTags = 0x228; // FGameplayEval_GameplayTags
	}

	namespace n_UDialogueEventSet {
		constexpr auto Events = 0x38; // TArray<FDialogueEvent>
	}

	namespace n_UBTDecorator_IsActionEnabledForActor {
		constexpr auto ActionTagQuery = 0x70; // FGameplayTagQuery
		constexpr auto ActionTags = 0xb8; // FAIDataProviderGameplayTagQueryContainerValue
		constexpr auto bDisableOnSuccess = 0x130; // bool
		constexpr auto FlowControlDelay = 0x134; // float
	}

	namespace n_UParticleModuleBeamNoise {
		constexpr auto bLowFreq_Enabled = 0x38; // char : 1
		constexpr auto Frequency = 0x3c; // int32_t
		constexpr auto Frequency_LowRange = 0x40; // int32_t
		constexpr auto NoiseRange = 0x48; // FRawDistributionVector
		constexpr auto NoiseRangeScale = 0x90; // FRawDistributionFloat
		constexpr auto bNRScaleEmitterTime = 0xc0; // char : 1
		constexpr auto NoiseSpeed = 0xc8; // FRawDistributionVector
		constexpr auto bSmooth = 0x110; // char : 1
		constexpr auto NoiseLockRadius = 0x114; // float
		constexpr auto bNoiseLock = 0x118; // char : 1
		constexpr auto bOscillate = 0x118; // char : 1
		constexpr auto NoiseLockTime = 0x11c; // float
		constexpr auto NoiseTension = 0x120; // float
		constexpr auto bUseNoiseTangents = 0x124; // char : 1
		constexpr auto NoiseTangentStrength = 0x128; // FRawDistributionFloat
		constexpr auto NoiseTessellation = 0x158; // int32_t
		constexpr auto bTargetNoise = 0x15c; // char : 1
		constexpr auto FrequencyDistance = 0x160; // float
		constexpr auto bApplyNoiseScale = 0x164; // char : 1
		constexpr auto NoiseScale = 0x168; // FRawDistributionFloat
	}

	namespace n_AExplodingBarrel {
		constexpr auto StaticMeshComponent = 0x2a0; // UStaticMeshComponent*
		constexpr auto ExplosionComponent = 0x2a8; // UExplosionComponent*
		constexpr auto BurnSmoke = 0x2b0; // UParticleSystemComponent*
		constexpr auto NavModifierVolume = 0x2b8; // UBoxComponent*
		constexpr auto PingableComponent = 0x2c0; // UPingableComponent*
		constexpr auto PingableVolume = 0x2c8; // UBoxComponent*
		constexpr auto HealthComponent = 0x2d0; // UHealthComponent*
		constexpr auto GobiNavModifierComponent = 0x2d8; // UGobiNavModifierComponent*
		constexpr auto HighlightComponent = 0x2e0; // UHighlightComponent*
		constexpr auto GameplayEffectsComponent = 0x2e8; // UGameplayEffectsComponent*
		constexpr auto SmokeEmitterDuration = 0x2f0; // float
		constexpr auto RandomHealthMin = 0x2f4; // float
		constexpr auto RandomHealthMax = 0x2f8; // float
		constexpr auto AfterExplosionCollision = 0x2fc; // FCollisionProfileName
		constexpr auto XYImpulseMin = 0x304; // float
		constexpr auto XYImpulseMax = 0x308; // float
		constexpr auto ZImpulseMin = 0x30c; // float
		constexpr auto ZImpulseMax = 0x310; // float
		constexpr auto LocalRotationXYMin = 0x314; // float
		constexpr auto LocalRotationXYMax = 0x318; // float
		constexpr auto InitialFlame = 0x320; // UObject*
		constexpr auto ExplodedStaticMesh = 0x328; // UStaticMesh*
	}

	namespace n_UArmorComponent {
		constexpr auto OnArmorDamage = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnArmorHealthChanged = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnDestroyedArmor = 0x108; // FMulticastInlineDelegate
		constexpr auto InitialArmor = 0x118; // TArray<FArmor>
		constexpr auto InitialArmorSet = 0x128; // UArmorSet*
		constexpr auto DestroyedImpactScale = 0x130; // float
		constexpr auto LastDamageInfo = 0x198; // FDamageInfo
		constexpr auto ArmorHealth = 0x250; // TArray<FArmorHealth>
		constexpr auto ArmorDestroyed = 0x260; // TArray<FArmorDestroyed>
	}

	namespace n_AProceduralFoliageBlockingVolume {
		constexpr auto ProceduralFoliageVolume = 0x2d8; // AProceduralFoliageVolume*
	}

	namespace n_UMovieSceneCapture {
		constexpr auto ImageCaptureProtocolType = 0x40; // FSoftClassPath
		constexpr auto AudioCaptureProtocolType = 0x58; // FSoftClassPath
		constexpr auto ImageCaptureProtocol = 0x70; // UMovieSceneImageCaptureProtocolBase*
		constexpr auto AudioCaptureProtocol = 0x78; // UMovieSceneAudioCaptureProtocolBase*
		constexpr auto Settings = 0x80; // FMovieSceneCaptureSettings
		constexpr auto bUseSeparateProcess = 0xf0; // bool
		constexpr auto bCloseEditorWhenCaptureStarts = 0xf1; // bool
		constexpr auto AdditionalCommandLineArguments = 0xf8; // FString
		constexpr auto InheritedCommandLineArguments = 0x108; // FString
	}

	namespace n_UFTUETutorialScreen_WBP_C {
		constexpr auto UberGraphFrame = 0x618; // FPointerToUberGraphFrame
		constexpr auto BG = 0x620; // UImage*
		constexpr auto Callouts = 0x628; // UPlatformCallouts_WBP_C*
		constexpr auto Footer_WBP = 0x630; // UFooter_WBP_C*
		constexpr auto FriendsCancelButton = 0x638; // UTextButton_WBP_C*
		constexpr auto FriendsPanel = 0x640; // UOverlay*
		constexpr auto FriendsStartButton = 0x648; // UTextButton_WBP_C*
		constexpr auto PartyGroupsTab = 0x650; // UPartyGroupsTab_WBP_C*
		constexpr auto PlayFriendsButton = 0x658; // UTextButton_WBP_C*
		constexpr auto PlaySoloButton = 0x660; // UTextButton_WBP_C*
		constexpr auto SkipButton = 0x668; // UTextButton_WBP_C*
		constexpr auto SoloCancelButton = 0x670; // UTextButton_WBP_C*
		constexpr auto Switcher = 0x678; // UWidgetSwitcher*
	}

	namespace n_UAnimEvalSet_Shared_DeathReaction_C {
		constexpr auto AvatarHitDirection = 0xc0; // FGameplayEval_Angle
		constexpr auto DamageType = 0x120; // FGameplayEval_DamageType
		constexpr auto DamageBone = 0x1e0; // FGameplayEval_DamageBone
		constexpr auto DistanceToDamageSource = 0x240; // FGameplayEval_Distance
		constexpr auto AvatarHealth = 0x310; // FGameplayEval_Health
		constexpr auto RandomChance = 0x368; // FGameplayEval_RandomChance
		constexpr auto HasTarget = 0x3b8; // FGameplayEval_HasContext
		constexpr auto AvatarTags = 0x408; // FGameplayEval_GameplayTags
	}

	namespace n_AEmitterCameraLensEffectBase {
		constexpr auto PS_CameraEffect = 0x308; // UParticleSystem*
		constexpr auto PS_CameraEffectNonExtremeContent = 0x310; // UParticleSystem*
		constexpr auto BaseCamera = 0x318; // APlayerCameraManager*
		constexpr auto RelativeTransform = 0x320; // FTransform
		constexpr auto BaseFOV = 0x350; // float
		constexpr auto bAllowMultipleInstances = 0x354; // char : 1
		constexpr auto bResetWhenRetriggered = 0x354; // char : 1
		constexpr auto EmittersToTreatAsSame = 0x358; // TArray<AEmitterCameraLensEffectBase*>
		constexpr auto DistFromCamera = 0x368; // float
	}

	namespace n_UNiagaraPreviewAxis_InterpParamInt32 {
		constexpr auto Min = 0x40; // int32_t
		constexpr auto Max = 0x44; // int32_t
	}

	namespace n_UGameplayContext_PounceTrace {
		constexpr auto Pounce = 0x50; // UAnimContext_PounceComponent*
		constexpr auto TraceEnd = 0x58; // UAnimContext_Transform*
	}

	namespace n_UZombieMutationTreeUserWidget {
		constexpr auto TreeLinkWidget = 0x458; // UZombieMutationLinkUserWidget*
	}

	namespace n_USoundEffectSourcePresetChain {
		constexpr auto Chain = 0x30; // TArray<FSourceEffectChainEntry>
		constexpr auto bPlayEffectChainTails = 0x40; // char : 1
	}

	namespace n_UWidgetComponent {
		constexpr auto Space = 0x528; // EWidgetSpace
		constexpr auto TimingPolicy = 0x529; // EWidgetTimingPolicy
		constexpr auto WidgetClass = 0x530; // UUserWidget*
		constexpr auto DrawSize = 0x538; // FIntPoint
		constexpr auto bManuallyRedraw = 0x540; // bool
		constexpr auto bRedrawRequested = 0x541; // bool
		constexpr auto RedrawTime = 0x544; // float
		constexpr auto CurrentDrawSize = 0x550; // FIntPoint
		constexpr auto bDrawAtDesiredSize = 0x558; // bool
		constexpr auto Pivot = 0x55c; // FVector2D
		constexpr auto bReceiveHardwareInput = 0x564; // bool
		constexpr auto bWindowFocusable = 0x565; // bool
		constexpr auto WindowVisibility = 0x566; // EWindowVisibility
		constexpr auto bApplyGammaCorrection = 0x567; // bool
		constexpr auto OwnerPlayer = 0x568; // ULocalPlayer*
		constexpr auto BackgroundColor = 0x570; // FLinearColor
		constexpr auto TintColorAndOpacity = 0x580; // FLinearColor
		constexpr auto OpacityFromTexture = 0x590; // float
		constexpr auto BlendMode = 0x594; // EWidgetBlendMode
		constexpr auto bIsTwoSided = 0x595; // bool
		constexpr auto bHasTranslucentDepthTest = 0x596; // bool
		constexpr auto TickWhenOffscreen = 0x597; // bool
		constexpr auto Widget = 0x598; // UUserWidget*
		constexpr auto BodySetup = 0x5c0; // UBodySetup*
		constexpr auto TranslucentMaterial = 0x5c8; // UMaterialInterface*
		constexpr auto TranslucentMaterial_NoDepth = 0x5d0; // UMaterialInterface*
		constexpr auto TranslucentMaterial_OneSided = 0x5d8; // UMaterialInterface*
		constexpr auto TranslucentMaterial_OneSided_NoDepth = 0x5e0; // UMaterialInterface*
		constexpr auto OpaqueMaterial = 0x5e8; // UMaterialInterface*
		constexpr auto OpaqueMaterial_OneSided = 0x5f0; // UMaterialInterface*
		constexpr auto MaskedMaterial = 0x5f8; // UMaterialInterface*
		constexpr auto MaskedMaterial_OneSided = 0x600; // UMaterialInterface*
		constexpr auto RenderTarget = 0x608; // UTextureRenderTarget2D*
		constexpr auto MaterialInstance = 0x610; // UMaterialInstanceDynamic*
		constexpr auto bAddedToScreen = 0x618; // bool
		constexpr auto bEditTimeUsable = 0x619; // bool
		constexpr auto bForceDrawOneFrame = 0x61a; // bool
		constexpr auto SharedLayerName = 0x61c; // FName
		constexpr auto LayerZOrder = 0x624; // int32_t
		constexpr auto GeometryMode = 0x628; // EWidgetGeometryMode
		constexpr auto CylinderArcAngle = 0x62c; // float
	}

	namespace n_UDeviceProfile {
		constexpr auto DeviceType = 0x40; // FString
		constexpr auto BaseProfileName = 0x50; // FString
		constexpr auto Parent = 0x60; // UObject*
		constexpr auto CVars = 0x80; // TArray<FString>
	}

	namespace n_UMaterialExpressionLandscapeLayerWeight {
		constexpr auto Base = 0x48; // FExpressionInput
		constexpr auto Layer = 0x5c; // FExpressionInput
		constexpr auto ParameterName = 0x70; // FName
		constexpr auto PreviewWeight = 0x78; // float
		constexpr auto ConstBase = 0x7c; // FVector
		constexpr auto ExpressionGUID = 0x88; // FGuid
	}

	namespace n_UWoundComponent {
		constexpr auto Config = 0x5c0; // FWoundData
	}

	namespace n_UNineSliceAssetUserData {
		constexpr auto DrawAs = 0x30; // ESlateBrushDrawType
		constexpr auto Margin = 0x34; // FMargin
	}

	namespace n_UNiagaraRendererProperties {
		constexpr auto SortOrderHint = 0x30; // int32_t
		constexpr auto bIsEnabled = 0x34; // bool
		constexpr auto bMotionBlurEnabled = 0x35; // bool
	}

	namespace n_UPlayedCardsGridUserWidget {
		constexpr auto NumRows = 0x458; // int32_t
		constexpr auto NumColumns = 0x45c; // int32_t
		constexpr auto MiniCardClass = 0x460; // UMiniCardUserWidget*
		constexpr auto CardCounts = 0x468; // TMap<FDataTableRowHandle, int32_t>
	}

	namespace n_AChaosSolverActor {
		constexpr auto TimeStepMultiplier = 0x2a0; // float
		constexpr auto CollisionIterations = 0x2a4; // int32_t
		constexpr auto PushOutIterations = 0x2a8; // int32_t
		constexpr auto PushOutPairIterations = 0x2ac; // int32_t
		constexpr auto ClusterConnectionFactor = 0x2b0; // float
		constexpr auto ClusterUnionConnectionType = 0x2b4; // EClusterConnectionTypeEnum
		constexpr auto DoGenerateCollisionData = 0x2b5; // bool
		constexpr auto CollisionFilterSettings = 0x2b8; // FSolverCollisionFilterSettings
		constexpr auto DoGenerateBreakingData = 0x2c8; // bool
		constexpr auto BreakingFilterSettings = 0x2cc; // FSolverBreakingFilterSettings
		constexpr auto DoGenerateTrailingData = 0x2dc; // bool
		constexpr auto TrailingFilterSettings = 0x2e0; // FSolverTrailingFilterSettings
		constexpr auto bHasFloor = 0x2f0; // bool
		constexpr auto FloorHeight = 0x2f4; // float
		constexpr auto MassScale = 0x2f8; // float
		constexpr auto bGenerateContactGraph = 0x2fc; // bool
		constexpr auto ChaosDebugSubstepControl = 0x2fd; // FChaosDebugSubstepControl
		constexpr auto SpriteComponent = 0x300; // UBillboardComponent*
		constexpr auto GameplayEventDispatcherComponent = 0x320; // UChaosGameplayEventDispatcher*
	}

	namespace n_UAnimNotify_GameplayCue {
		constexpr auto Instigator = 0x40; // UAnimContext_Actor*
		constexpr auto SourceActor = 0x48; // UAnimContext_Actor*
		constexpr auto TargetActor = 0x50; // UAnimContext_Actor*
		constexpr auto BoneName = 0x58; // FName
		constexpr auto Cue = 0x60; // FGameplayTag
	}

	namespace n_ALevelSequenceMediaController {
		constexpr auto Sequence = 0x2a8; // ALevelSequenceActor*
		constexpr auto MediaComponent = 0x2b0; // UMediaComponent*
		constexpr auto ServerStartTimeSeconds = 0x2b8; // float
	}

	namespace n_UAnimMetaData_AnimEvaluatorSet {
		constexpr auto AnimEvaluatorSet = 0x30; // UAnimationEvalSet*
		constexpr auto PawnControllerType = 0x38; // EPawnControllerType
		constexpr auto bDrawDebug = 0x39; // bool
	}

	namespace n_UParticleModuleSizeMultiplyLife {
		constexpr auto LifeMultiplier = 0x38; // FRawDistributionVector
		constexpr auto MultiplyX = 0x80; // char : 1
		constexpr auto MultiplyY = 0x80; // char : 1
		constexpr auto MultiplyZ = 0x80; // char : 1
	}

	namespace n_UBTTask_ChaserRunEQSQuery {
		constexpr auto bClearBlackboardOnNoResults = 0x190; // bool
		constexpr auto WallClingBlackboardKey = 0x198; // FBlackboardKeySelector
	}

	namespace n_UInterpTrackInstProperty {
		constexpr auto InterpProperty = 0x30; // TFieldPath<FProperty>
		constexpr auto PropertyOuterObjectInst = 0x50; // UObject*
	}

	namespace n_UReloadComponent {
		constexpr auto PowerReloadEffects = 0x1f0; // TArray<UGameplayEffect*>
		constexpr auto PowerReloadPlayerEffects = 0x200; // TArray<UGameplayEffect*>
	}

	namespace n_UDismembermentAnimInstance {
		constexpr auto PoseSnapshot = 0x2b8; // FPoseSnapshot
	}

	namespace n_UGenericAggregationComponent {
		constexpr auto AggregationConfiguration = 0xe8; // UDataTable*
		constexpr auto GameplayAnalyticsManager = 0xf0; // AGameplayAnalyticsManager*
		constexpr auto TrackedSystems = 0x198; // TMap<FName, FSystemRecord>
	}

	namespace n_UGobiPlayerInput {
		constexpr auto AxialDeadzoneRequiredMin = 0x408; // float
		constexpr auto AxialDeadzoneRequiredMax = 0x40c; // float
		constexpr auto AxialDeadzoneGrowthMin = 0x410; // float
		constexpr auto AxialDeadzoneGrowthMax = 0x414; // float
	}

	namespace n_ALadder {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto LadderTouchVolume = 0x2a8; // UBoxComponent*
		constexpr auto LadderUsableVolume = 0x2b0; // UBoxComponent*
		constexpr auto LadderTop = 0x2b8; // USceneComponent*
		constexpr auto LadderBottom = 0x2c0; // USceneComponent*
		constexpr auto LadderUsable = 0x2c8; // UUsableComponent*
		constexpr auto GameplayTagsComponent = 0x2d0; // UGameplayTagsComponent*
	}

	namespace n_UBehaviorTree {
		constexpr auto RootNode = 0x38; // UBTCompositeNode*
		constexpr auto BlackboardAsset = 0x40; // UBlackboardData*
		constexpr auto RootDecorators = 0x48; // TArray<UBTDecorator*>
		constexpr auto RootDecoratorOps = 0x58; // TArray<FBTDecoratorLogic>
	}

	namespace n_UDamageFilter {
		constexpr auto DamageTypeMods = 0x30; // TArray<FDamageTypeDamageMod>
	}

	namespace n_UGizmoConstantAxisSource {
		constexpr auto Origin = 0x38; // FVector
		constexpr auto Direction = 0x44; // FVector
	}

	namespace n_UTraitsMod {
		constexpr auto Traits = 0xd0; // TArray<UTrait*>
		constexpr auto bSelf = 0xe0; // bool
		constexpr auto TagQuery = 0xe8; // FGameplayTagQuery
	}

	namespace n_UMaterialExpressionLogarithm2 {
		constexpr auto X = 0x48; // FExpressionInput
	}

	namespace n_UWanderPopulationDensityConfig {
		constexpr auto WanderPopulationBucketDensityLevels = 0x38; // TMap<EWanderBucketDensityLevel, FWanderPopulationBucketDensityLevel>
	}

	namespace n_UMaterialExpressionShadowReplace {
		constexpr auto Default = 0x48; // FExpressionInput
		constexpr auto Shadow = 0x5c; // FExpressionInput
	}

	namespace n_UVOIPTalker {
		constexpr auto Settings = 0xe8; // FVoiceSettings
	}

	namespace n_UPlayerHealthUserWidget {
		constexpr auto OnPlayerHealthChanged = 0x458; // FMulticastInlineDelegate
		constexpr auto OnCurrentMaxHealthChanged = 0x468; // FMulticastInlineDelegate
		constexpr auto HealAnimHealthPerSecond = 0x478; // float
	}

	namespace n_AEQSTestingPawn {
		constexpr auto QueryTemplate = 0x5d8; // UEnvQuery*
		constexpr auto QueryParams = 0x5e0; // TArray<FEnvNamedValue>
		constexpr auto QueryConfig = 0x5f0; // TArray<FAIDynamicParam>
		constexpr auto TimeLimitPerStep = 0x600; // float
		constexpr auto StepToDebugDraw = 0x604; // int32_t
		constexpr auto HighlightMode = 0x608; // EEnvQueryHightlightMode
		constexpr auto bDrawLabels = 0x60c; // char : 1
		constexpr auto bDrawFailedItems = 0x60c; // char : 1
		constexpr auto bReRunQueryOnlyOnFinishedMove = 0x60c; // char : 1
		constexpr auto bShouldBeVisibleInGame = 0x60c; // char : 1
		constexpr auto bTickDuringGame = 0x60c; // char : 1
		constexpr auto QueryingMode = 0x610; // EEnvQueryRunMode
		constexpr auto NavAgentProperties = 0x618; // FNavAgentProperties
	}

	namespace n_UCanvasRenderTarget2D {
		constexpr auto OnCanvasRenderTargetUpdate = 0xf0; // FMulticastInlineDelegate
		constexpr auto World = 0x100; // TWeakObjectPtr<UWorld>
		constexpr auto bShouldClearRenderTargetOnReceiveUpdate = 0x108; // bool
	}

	namespace n_UAnimEvalSet_FallLand_C {
		constexpr auto DistanceToClimbEnd = 0xc0; // FGameplayEval_ReachedClimbLocation
	}

	namespace n_UAmbisonicsEncodingSettings {
		constexpr auto AmbisonicsOrder = 0x30; // int32_t
	}

	namespace n_UGameplayAction_BotItemUse {
		constexpr auto FilterSet = 0x210; // UGameplayEvaluatorSet*
	}

	namespace n_UGameplayContext_HeroUseTransform {
		constexpr auto ComponentTag = 0x70; // FGameplayTag
	}

	namespace n_UPlantableGhostComponent {
		constexpr auto OnSetToValidLocation = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnSetToInvalidLocation = 0xf8; // FMulticastInlineDelegate
	}

	namespace n_UAISenseConfig_Hearing {
		constexpr auto Implementation = 0x50; // UAISense_Hearing*
		constexpr auto HearingRange = 0x58; // float
		constexpr auto LoSHearingRange = 0x5c; // float
		constexpr auto bUseLoSHearing = 0x60; // char : 1
		constexpr auto DetectionByAffiliation = 0x64; // FAISenseAffiliationFilter
	}

	namespace n_UStatTrackerBase {
		constexpr auto OwningController = 0x30; // AController*
		constexpr auto StatsComponent = 0x38; // UPlayerStatsComponent*
	}

	namespace n_UGameplayEffectApplyTrait {
		constexpr auto Traits = 0x240; // TArray<UTrait*>
	}

	namespace n_UObservableComponent {
		constexpr auto ShapeColor = 0x4b0; // FColor
		constexpr auto bDrawOnlyIfSelected = 0x4b4; // bool
		constexpr auto DebugDrawFlags = 0x4b8; // int32_t
		constexpr auto bDrawContinueRules = 0x4bc; // bool
		constexpr auto OnObservationStart = 0x4c0; // FMulticastInlineDelegate
		constexpr auto OnObservationEnd = 0x4d0; // FMulticastInlineDelegate
		constexpr auto bEnabled = 0x4e0; // bool
		constexpr auto UsesDifferentContinueRules = 0x4e1; // bool
		constexpr auto ObservationStartRules = 0x4e4; // FObservationRule
		constexpr auto ObservationContinueRules = 0x50c; // FObservationRule
	}

	namespace n_USlateWidgetStyleAsset {
		constexpr auto CustomStyle = 0x30; // USlateWidgetStyleContainerBase*
	}

	namespace n_UCommWheelLesson_BP_C {
		constexpr auto UberGraphFrame = 0x460; // FPointerToUberGraphFrame
		constexpr auto bCanTeach = 0x468; // bool
	}

	namespace n_AOnlineBeaconHostObject {
		constexpr auto BeaconTypeName = 0x2a0; // FString
		constexpr auto ClientBeaconActorClass = 0x2b0; // AOnlineBeaconClient*
		constexpr auto ClientActors = 0x2b8; // TArray<AOnlineBeaconClient*>
	}

	namespace n_UMaterialExpressionAppendVector {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
	}

	namespace n_AAISpawnActor {
		constexpr auto VisibilityMode = 0x460; // EVisibilityMode
		constexpr auto AudibilityMode = 0x461; // EAudibilityMode
		constexpr auto bUseStandSpawnPositioning = 0x462; // bool
		constexpr auto bUseNavLocationCompForSpawnLocation = 0x463; // bool
		constexpr auto MaxSpawnCount = 0x464; // int32_t
		constexpr auto HordeBlockingTags = 0x468; // FGameplayTagContainer
		constexpr auto WanderBlockingTags = 0x488; // FGameplayTagContainer
		constexpr auto bDisableOnSeen = 0x4c4; // bool
		constexpr auto bDisableOnHeard = 0x4c5; // bool
		constexpr auto OnSeenGE = 0x4c8; // UGameplayEffect*
		constexpr auto OnHeardGE = 0x4d0; // UGameplayEffect*
	}

	namespace n_UGameplayEffectMoveInputScale {
		constexpr auto ScaleLabel = 0x238; // FName
		constexpr auto MoveInputScale = 0x240; // float
	}

	namespace n_ALevelVariantSetsActor {
		constexpr auto LevelVariantSets = 0x2a0; // FSoftObjectPath
	}

	namespace n_UFP_HeroPostProcess_ABP_C {
		constexpr auto UberGraphFrame = 0x2c0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2c8; // FAnimNode_Root
		constexpr auto AnimGraphNode_LinkedInputPose = 0x2f8; // FAnimNode_LinkedInputPose
	}

	namespace n_USoundNodeConcatenator {
		constexpr auto InputVolume = 0x60; // TArray<float>
	}

	namespace n_UMovieSceneNiagaraSystemSpawnSection {
		constexpr auto SectionStartBehavior = 0xe8; // ENiagaraSystemSpawnSectionStartBehavior
		constexpr auto SectionEvaluateBehavior = 0xec; // ENiagaraSystemSpawnSectionEvaluateBehavior
		constexpr auto SectionEndBehavior = 0xf0; // ENiagaraSystemSpawnSectionEndBehavior
		constexpr auto AgeUpdateMode = 0xf4; // ENiagaraAgeUpdateMode
	}

	namespace n_ATRSOccluder {
		constexpr auto MaxDistance = 0x380; // float
		constexpr auto bExclusiveOutdoorSector = 0x384; // bool
	}

	namespace n_UUniformScalar {
		constexpr auto Magnitude = 0xe8; // float
	}

	namespace n_UDamageCameraShakeComponent {
		constexpr auto CameraShakes = 0xe8; // TArray<FDamageCameraShake>
	}

	namespace n_UAkGeometryComponent {
		constexpr auto MeshType = 0x230; // AkMeshType
		constexpr auto LOD = 0x234; // int32_t
		constexpr auto StaticMeshSurfaceOverride = 0x238; // TMap<UMaterialInterface*, FAkGeometrySurfaceOverride>
		constexpr auto CollisionMeshSurfaceOverride = 0x288; // FAkGeometrySurfaceOverride
		constexpr auto bEnableDiffraction = 0x298; // char : 1
		constexpr auto bEnableDiffractionOnBoundaryEdges = 0x298; // char : 1
		constexpr auto AssociatedRoom = 0x2a0; // AActor*
		constexpr auto GeometryData = 0x2b0; // FAkGeometryData
	}

	namespace n_UMindControlComponent {
		constexpr auto AttachedHeroTargetReplicated = 0xe8; // AGobiCharacter*
		constexpr auto bKillOnTick = 0xf8; // bool
		constexpr auto TgtToMCAIAttachPrimitiveComponentTag = 0x158; // FGameplayTag
		constexpr auto TgtToMCAIAttachPoint = 0x160; // FName
		constexpr auto TgtToMCAIAttachRelativeLocation = 0x168; // FVector
		constexpr auto TgtToMCAIAttachRelativeRotation = 0x174; // FRotator
		constexpr auto TgtAttachMeshTag = 0x180; // FGameplayTag
		constexpr auto MCAIToTgtAttachPoint = 0x188; // FName
		constexpr auto InterruptDmgTypeTags = 0x190; // FGameplayTagContainer
		constexpr auto InterruptDmgAttempts = 0x1b0; // int32_t
		constexpr auto NoApplyDmgTag = 0x1b4; // FGameplayTag
		constexpr auto ApplyEffectsToTarget = 0x1c0; // TArray<UGameplayEffect*>
		constexpr auto BlockingTargetTags = 0x1d0; // FGameplayTagContainer
		constexpr auto CancelBlockingTargetTags = 0x1f0; // FGameplayTagContainer
		constexpr auto ApplyInstigatorEffects = 0x210; // TArray<UGameplayEffect*>
		constexpr auto ApplyInstigatorEffectOnEnd = 0x220; // UGameplayEffect*
		constexpr auto MaxDurationAfterSrcDies = 0x228; // float
		constexpr auto DeathPSTemplate = 0x230; // UParticleSystem*
		constexpr auto DeathPSRelativeLocation = 0x238; // FVector
	}

	namespace n_AHelicopter {
		constexpr auto OnCharacterEnteredHelicopter = 0x2a0; // FMulticastInlineDelegate
		constexpr auto OnAllCharactersEnteredHelicopter = 0x2b0; // FMulticastInlineDelegate
		constexpr auto TriggerVolume = 0x2c0; // UBoxComponent*
		constexpr auto DefaultRootComponent = 0x2c8; // USceneComponent*
		constexpr auto ApplyEffectsToCharacter = 0x2d0; // TArray<UGameplayEffect*>
		constexpr auto GiveCharactersPrimaryWeapon = 0x2e0; // FName
		constexpr auto CharacterAttachPointDistThreshold = 0x304; // float
		constexpr auto CharacterAttachPointUpdateRate = 0x308; // float
	}

	namespace n_UDynamicEntryBox {
		constexpr auto EntryWidgetClass = 0x208; // UUserWidget*
	}

	namespace n_UFindSessionsCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UDistanceMapSourceComponent {
		constexpr auto bShouldEnableOnBegin = 0x4b0; // bool
		constexpr auto DebugMapIdx = 0x4b4; // int32_t
		constexpr auto DistanceThresholdForRegen = 0x4d0; // float
		constexpr auto SearchDistance = 0x4d4; // float
		constexpr auto bRequiresDeltas = 0x4d8; // bool
		constexpr auto SupportedAgents = 0x4dc; // FNavAgentSelector
		constexpr auto bAllowMultipleSupportedAgents = 0x4e0; // bool
	}

	namespace n_UUniformGridPanel {
		constexpr auto SlotPadding = 0x160; // FMargin
		constexpr auto MinDesiredSlotWidth = 0x170; // float
		constexpr auto MinDesiredSlotHeight = 0x174; // float
	}

	namespace n_UGameStateBaseSeamessTravelData {
		constexpr auto TeamScores = 0x30; // TArray<int32_t>
	}

	namespace n_UColorBlindGroupData {
		constexpr auto ColorBlindGroups = 0x38; // TMap<FName, FColorBlindGroup>
	}

	namespace n_UEnvQueryGenerator_PathingGrid {
		constexpr auto PathToItem = 0x100; // FAIDataProviderBoolValue
		constexpr auto NavigationFilter = 0x138; // UNavigationQueryFilter*
		constexpr auto ScanRangeMultiplier = 0x140; // FAIDataProviderFloatValue
	}

	namespace n_UWidgetAnimationPlayCallbackProxy {
		constexpr auto Finished = 0x30; // FMulticastInlineDelegate
	}

	namespace n_UAbilityTimeMod {
		constexpr auto Type = 0xd0; // EAbilityTimeModType
		constexpr auto Time = 0xd4; // FGamePropertyFloatMod
		constexpr auto AbilityTags = 0xe8; // FGameplayTagContainer
	}

	namespace n_UMissionManager {
		constexpr auto OnMissionStartServer = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnMissionEndServer = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnStartObjectiveServer = 0x108; // FMulticastInlineDelegate
		constexpr auto OnObjectiveCountChangedServer = 0x118; // FMulticastInlineDelegate
		constexpr auto OnEndObjectiveServer = 0x128; // FMulticastInlineDelegate
		constexpr auto OnServerMissionChangedClient = 0x138; // FMulticastInlineDelegate
		constexpr auto OnMissionSublevelsLoadedServer = 0x178; // FMulticastInlineDelegate
		constexpr auto PlayersAwaitingServerMission = 0x190; // TArray<APlayerState*>
		constexpr auto PlayersAwaitingTeam = 0x1a0; // TArray<APlayerState*>
		constexpr auto ChapterDataTables = 0x1b8; // TArray<UDataTable*>
		constexpr auto MissionDataTables = 0x1c8; // TArray<UDataTable*>
		constexpr auto ObjectiveDataTables = 0x1d8; // TArray<UDataTable*>
		constexpr auto ActiveMissions = 0x3a8; // TSet<FDataTableRowHandle>
		constexpr auto PlayerLiveMissionDataArray = 0x3f8; // TArray<FPlayerLiveMissionData>
		constexpr auto LiveObjectiveTimersReplicated = 0x408; // TArray<int32_t>
		constexpr auto LiveObjectiveTimers = 0x418; // TArray<FObjectiveTimerData>
		constexpr auto ServerMissionRowHandle = 0x428; // FDataTableRowHandle
	}

	namespace n_UEnvQueryGenerator_CurrentLocation {
		constexpr auto QueryContext = 0x58; // UEnvQueryContext*
	}

	namespace n_UTcpMessagingSettings {
		constexpr auto EnableTransport = 0x30; // bool
		constexpr auto ListenEndpoint = 0x38; // FString
		constexpr auto ConnectToEndpoints = 0x48; // TArray<FString>
		constexpr auto ConnectionRetryDelay = 0x58; // int32_t
		constexpr auto bStopServiceWhenAppDeactivates = 0x5c; // bool
	}

	namespace n_UPartyPlayerCard_WBP_C {
		constexpr auto UberGraphFrame = 0x628; // FPointerToUberGraphFrame
		constexpr auto AddPlayerPlus = 0x630; // UTextBlock*
		constexpr auto BG = 0x638; // UImage*
		constexpr auto CharacterNameText = 0x640; // UTextBlock*
		constexpr auto Emblem = 0x648; // UImage*
		constexpr auto Frame = 0x650; // UImage*
		constexpr auto HoverContainer = 0x658; // UOverlay*
		constexpr auto LeaderIcon = 0x660; // UImage*
		constexpr auto PartyIcon = 0x668; // UImage*
		constexpr auto PlayerMicIcon = 0x670; // UPlayerMicIcon_WBP_C*
		constexpr auto PlayerName = 0x678; // UPlayerName_WBP_C*
		constexpr auto StatusText = 0x680; // UTextBlock*
		constexpr auto bSupportsInvite = 0x688; // bool
		constexpr auto FrameUnfocusedRenderOpacity = 0x68c; // float
		constexpr auto FrameFocusedRenderOpacity = 0x690; // float
	}

	namespace n_UMaterialExpressionVectorParameter {
		constexpr auto DefaultValue = 0x60; // FLinearColor
		constexpr auto bUseCustomPrimitiveData = 0x70; // bool
		constexpr auto PrimitiveDataIndex = 0x71; // char
	}

	namespace n_ASpawnEQSInfluencer {
		constexpr auto Influence = 0x2a0; // int32_t
		constexpr auto DefaultRootComponent = 0x2a8; // USceneComponent*
	}

	namespace n_UAnimInstance3P {
		constexpr auto LocomotionData = 0x3b8; // FAnimLocomotionData
		constexpr auto ForwardDirection = 0x3f8; // FAnimDirectionRange
		constexpr auto RightDirection = 0x414; // FAnimDirectionRange
		constexpr auto LeftDirection = 0x430; // FAnimDirectionRange
		constexpr auto BackwardDirection = 0x44c; // FAnimDirectionRange
		constexpr auto TurnInPlaceState = 0x468; // FLocoTurnInPlace
		constexpr auto LocoPredict = 0x518; // FLocomotionPrediction
		constexpr auto Leaning = 0x580; // FLocoLeaning
		constexpr auto DirectionInterpAlpha = 0x58c; // float
		constexpr auto DirectionChangingSpeedThreshold = 0x590; // float
		constexpr auto LookAtInfo = 0x594; // FLookAtInfo
		constexpr auto AimRotationInfo = 0x5c8; // FAimRotationInfo
		constexpr auto LadderAnimState = 0x5d4; // FLadderAnimState
		constexpr auto FootPlanting = 0x5e0; // FGobiFootPlanting
		constexpr auto IkAlphaCurve = 0x758; // FGobiAnimationCurveData
		constexpr auto FootPlantingAlphaCurve = 0x768; // FGobiAnimationCurveData
		constexpr auto DisableAimOffsetCurve = 0x778; // FGobiAnimationCurveData
		constexpr auto LegIKAlpha = 0x788; // float
		constexpr auto FootPlantingAlpha = 0x78c; // float
		constexpr auto SlopeWarping = 0x790; // FGobiSlopeWarping
		constexpr auto AimOffsetAlpha = 0x7a4; // float
		constexpr auto AnimState3P = 0x7a8; // FAnimState3P
	}

	namespace n_UScrollBar {
		constexpr auto WidgetStyle = 0x148; // FScrollBarStyle
		constexpr auto Style = 0x660; // USlateWidgetStyleAsset*
		constexpr auto bAlwaysShowScrollbar = 0x668; // bool
		constexpr auto bAlwaysShowScrollbarTrack = 0x669; // bool
		constexpr auto Orientation = 0x66a; // EOrientation
		constexpr auto Thickness = 0x66c; // FVector2D
		constexpr auto Padding = 0x674; // FMargin
	}

	namespace n_UAnimContext_DamageInfo {
		constexpr auto DamageInfo = 0x70; // FDamageInfo
		constexpr auto bIgnoreZeroDamageInSameFrame = 0x128; // bool
	}

	namespace n_UComponentDelegateBinding {
		constexpr auto ComponentDelegateBindings = 0x30; // TArray<FBlueprintComponentDelegateBinding>
	}

	namespace n_UMutilationWoundConfigData {
		constexpr auto Configs = 0x38; // TArray<FMutilationWoundsConfig>
	}

	namespace n_UMaterialExpressionDistanceFieldGradient {
		constexpr auto Position = 0x48; // FExpressionInput
	}

	namespace n_UBTTask_PushPawnAction {
		constexpr auto Action = 0x78; // UPawnAction*
	}

	namespace n_UInAppPurchaseQueryCallbackProxy2 {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UEnvQueryOption {
		constexpr auto Generator = 0x30; // UEnvQueryGenerator*
		constexpr auto Tests = 0x38; // TArray<UEnvQueryTest*>
	}

	namespace n_UWoundRootComponent {
		constexpr auto WoundTag = 0x230; // FGameplayTag
	}

	namespace n_UGeneralProjectSettings {
		constexpr auto CompanyName = 0x30; // FString
		constexpr auto CompanyDistinguishedName = 0x40; // FString
		constexpr auto CopyrightNotice = 0x50; // FString
		constexpr auto Description = 0x60; // FString
		constexpr auto Homepage = 0x70; // FString
		constexpr auto LicensingTerms = 0x80; // FString
		constexpr auto PrivacyPolicy = 0x90; // FString
		constexpr auto ProjectID = 0xa0; // FGuid
		constexpr auto ProjectName = 0xb0; // FString
		constexpr auto ProjectVersion = 0xc0; // FString
		constexpr auto SupportContact = 0xd0; // FString
		constexpr auto ProjectDisplayedTitle = 0xe0; // FText
		constexpr auto ProjectDebugTitleInfo = 0xf8; // FText
		constexpr auto bShouldWindowPreserveAspectRatio = 0x110; // bool
		constexpr auto bUseBorderlessWindow = 0x111; // bool
		constexpr auto bStartInVR = 0x112; // bool
		constexpr auto bStartInAR = 0x113; // bool
		constexpr auto bSupportAR = 0x114; // bool
		constexpr auto bAllowWindowResize = 0x115; // bool
		constexpr auto bAllowClose = 0x116; // bool
		constexpr auto bAllowMaximize = 0x117; // bool
		constexpr auto bAllowMinimize = 0x118; // bool
	}

	namespace n_UGameplayAction_BotJumpTraversal {
		constexpr auto FilterSet = 0x210; // UGameplayEvaluatorSet*
		constexpr auto bDisabled = 0x218; // bool
		constexpr auto DesiredDestContext = 0x220; // UAnimContext_Transform*
	}

	namespace n_UGameplayEffectADSComponent {
		constexpr auto ADSSpeedScaleMod = 0x250; // FGamePropertyFloatMod
		constexpr auto ADSConfigAssetLookupTag = 0x260; // FGameplayTag
		constexpr auto ZoomLevelOverride = 0x268; // EAimSensitivitySpace
	}

	namespace n_ALightweightNPC {
		constexpr auto Mesh = 0x2a0; // USkeletalMeshComponent*
		constexpr auto AudioEmitter = 0x2a8; // UAkSkeletalComponent*
		constexpr auto DialogueComponent = 0x2b0; // UGobiDialogueComponent*
		constexpr auto AudioComponent = 0x2b8; // ULiteCharacterAudioComponent*
		constexpr auto FacialAnimationComponent = 0x2c0; // UFacialAnimationComponent*
		constexpr auto GameplayTagsComponent = 0x2c8; // UGameplayTagsComponent*
		constexpr auto VoiceRowHandle = 0x2d0; // FDataTableRowHandle
		constexpr auto bIsFemale = 0x2f0; // bool
		constexpr auto MaleFacialAnimationData = 0x2f8; // TArray<UFacialAnimationData*>
		constexpr auto FemaleFacialAnimationData = 0x308; // TArray<UFacialAnimationData*>
	}

	namespace n_ULootData {
		constexpr auto LootTables = 0x38; // TArray<UDataTable*>
		constexpr auto LootSystemMapConfig = 0x48; // ULootSystemMapConfigAsset*
	}

	namespace n_UHeroAnimInstanceFP {
		constexpr auto FirstPersonAdditiveState = 0x3b8; // FFirstPersonAdditiveState
		constexpr auto FirstPersonAdditiveConfig = 0x428; // FFirstPersonAdditiveConfig
		constexpr auto CameraMotionStrength = 0x454; // float
		constexpr auto MeshOffset = 0x458; // FVector
		constexpr auto CameraOffset = 0x464; // FVector
		constexpr auto HeroAnimData = 0x470; // FHeroAnimDataFP
		constexpr auto HeroAnimState = 0x4d8; // FHeroAnimStateFP
		constexpr auto LadderAnimState = 0x504; // FLadderAnimStateFP
		constexpr auto VerticalSplitscreenFPMeshOffset = 0x514; // FVector
		constexpr auto HorizontalSplitscreenFPMeshOffset = 0x520; // FVector
		constexpr auto WeaponAnimData = 0x530; // FWeaponAnimData
		constexpr auto WeaponAnimState = 0x550; // FWeaponAnimState
		constexpr auto WeaponAnims = 0x598; // FWeaponAnimsFP
		constexpr auto TurnInPlaceBlendTime = 0x618; // float
	}

	namespace n_UTemplateSequence {
		constexpr auto MovieScene = 0x350; // UMovieScene*
		constexpr auto BoundActorClass = 0x358; // TSoftClassPtr<UObject>
		constexpr auto BoundPreviewActor = 0x380; // TSoftObjectPtr<AActor>
		constexpr auto BoundActorComponents = 0x3a8; // TMap<FGuid, FName>
	}

	namespace n_ULandscapeLayerInfoObject {
		constexpr auto LayerName = 0x30; // FName
		constexpr auto PhysMaterial = 0x38; // UPhysicalMaterial*
		constexpr auto Hardness = 0x40; // float
		constexpr auto LayerUsageDebugColor = 0x44; // FLinearColor
	}

	namespace n_UMaterialExpressionSkyAtmosphereLightDiskLuminance {
		constexpr auto LightIndex = 0x48; // int32_t
	}

	namespace n_UAnimEvalSet_Armored_Common_Melee_Overlap_C {
		constexpr auto OverlapTest = 0xc0; // FGameplayEval_OverlapActor
		constexpr auto HasPlayedRecently = 0x198; // FAnimEval_MontageLastPlayed
		constexpr auto CheckDismembered = 0x1e8; // FGameplayEval_Dismembered
		constexpr auto RandomScore = 0x240; // FGameplayEval_Random
		constexpr auto HasVisibility = 0x288; // FGameplayEval_HasVisibility
		constexpr auto NavBlocked = 0x2e0; // FGameplayEval_NavBlocked
		constexpr auto GameplayTags = 0x338; // FGameplayEval_GameplayTags
	}

	namespace n_UAISense_Prediction {
		constexpr auto RegisteredEvents = 0x88; // TArray<FAIPredictionEvent>
	}

	namespace n_UMaterialExpressionSceneColor {
		constexpr auto InputMode = 0x48; // EMaterialSceneAttributeInputMode
		constexpr auto Input = 0x4c; // FExpressionInput
		constexpr auto OffsetFraction = 0x60; // FExpressionInput
		constexpr auto ConstInput = 0x74; // FVector2D
	}

	namespace n_AWorldSettings {
		constexpr auto ActiveMapsForBuild = 0x2a8; // TArray<FSoftObjectPath>
		constexpr auto VisibilityCellSize = 0x2b8; // int32_t
		constexpr auto VisibilityAggressiveness = 0x2bc; // EVisibilityAggressiveness
		constexpr auto bPrecomputeVisibility = 0x2bd; // char : 1
		constexpr auto bPlaceCellsOnlyAlongCameraTracks = 0x2bd; // char : 1
		constexpr auto bEnableWorldBoundsChecks = 0x2bd; // char : 1
		constexpr auto bEnableNavigationSystem = 0x2bd; // char : 1
		constexpr auto bEnableAISystem = 0x2bd; // char : 1
		constexpr auto bEnableWorldComposition = 0x2bd; // char : 1
		constexpr auto bUseClientSideLevelStreamingVolumes = 0x2bd; // char : 1
		constexpr auto bEnableWorldOriginRebasing = 0x2bd; // char : 1
		constexpr auto bWorldGravitySet = 0x2be; // char : 1
		constexpr auto bGlobalGravitySet = 0x2be; // char : 1
		constexpr auto bMinimizeBSPSections = 0x2be; // char : 1
		constexpr auto bForceNoPrecomputedLighting = 0x2be; // char : 1
		constexpr auto bHighPriorityLoading = 0x2be; // char : 1
		constexpr auto bHighPriorityLoadingLocal = 0x2be; // char : 1
		constexpr auto bOverrideDefaultBroadphaseSettings = 0x2be; // char : 1
		constexpr auto NavigationSystemConfig = 0x2c0; // UNavigationSystemConfig*
		constexpr auto NavigationSystemConfigOverride = 0x2c8; // UNavigationSystemConfig*
		constexpr auto WorldToMeters = 0x2d0; // float
		constexpr auto KillZ = 0x2d4; // float
		constexpr auto WorldGravityZ = 0x2d8; // float
		constexpr auto GlobalGravityZ = 0x2dc; // float
		constexpr auto DefaultPhysicsVolumeClass = 0x2e0; // ADefaultPhysicsVolume*
		constexpr auto PhysicsCollisionHandlerClass = 0x2e8; // UPhysicsCollisionHandler*
		constexpr auto DefaultGameMode = 0x2f0; // AGameModeBase*
		constexpr auto GameNetworkManagerClass = 0x2f8; // AGameNetworkManager*
		constexpr auto PackedLightAndShadowMapTextureSize = 0x300; // int32_t
		constexpr auto DefaultColorScale = 0x304; // FVector
		constexpr auto DefaultMaxDistanceFieldOcclusionDistance = 0x310; // float
		constexpr auto GlobalDistanceFieldViewDistance = 0x314; // float
		constexpr auto DynamicIndirectShadowsSelfShadowingIntensity = 0x318; // float
		constexpr auto DefaultReverbSettings = 0x320; // FReverbSettings
		constexpr auto DefaultAmbientZoneSettings = 0x340; // FInteriorSettings
		constexpr auto MonoCullingDistance = 0x364; // float
		constexpr auto DefaultBaseSoundMix = 0x368; // USoundMix*
		constexpr auto TimeDilation = 0x370; // float
		constexpr auto MatineeTimeDilation = 0x374; // float
		constexpr auto DemoPlayTimeDilation = 0x378; // float
		constexpr auto MinGlobalTimeDilation = 0x37c; // float
		constexpr auto MaxGlobalTimeDilation = 0x380; // float
		constexpr auto MinUndilatedFrameTime = 0x384; // float
		constexpr auto MaxUndilatedFrameTime = 0x388; // float
		constexpr auto BroadphaseSettings = 0x38c; // FBroadphaseSettings
		constexpr auto bDrawDebugMBPBounds = 0x3cc; // bool
		constexpr auto bFlashMBPBounds = 0x3cd; // bool
		constexpr auto MBPBoundsDrawColor = 0x3d0; // FColor
		constexpr auto MBPOuterBoundsDrawColor = 0x3d4; // FColor
		constexpr auto Pauser = 0x3d8; // APlayerState*
		constexpr auto ReplicationViewers = 0x3e0; // TArray<FNetViewer>
		constexpr auto AssetUserData = 0x3f0; // TArray<UAssetUserData*>
		constexpr auto PauserPlayerState = 0x400; // APlayerState*
		constexpr auto MaxNumberOfBookmarks = 0x408; // int32_t
		constexpr auto DefaultBookmarkClass = 0x410; // UBookmarkBase*
		constexpr auto BookmarkArray = 0x418; // TArray<UBookmarkBase*>
		constexpr auto LastBookmarkClass = 0x428; // UBookmarkBase*
	}

	namespace n_UCameraAnim {
		constexpr auto CameraInterpGroup = 0x30; // UInterpGroup*
		constexpr auto AnimLength = 0x38; // float
		constexpr auto BoundingBox = 0x3c; // FBox
		constexpr auto bRelativeToInitialTransform = 0x58; // char : 1
		constexpr auto bRelativeToInitialFOV = 0x58; // char : 1
		constexpr auto BaseFOV = 0x5c; // float
		constexpr auto BasePostProcessSettings = 0x60; // FPostProcessSettings
		constexpr auto BasePostProcessBlendWeight = 0x5c0; // float
	}

	namespace n_UTRSAcousticPortalDistanceManager {
		constexpr auto World = 0x38; // UWorld*
	}

	namespace n_AGobiCharacter {
		constexpr auto OnPossessedBy = 0x5f0; // FMulticastInlineDelegate
		constexpr auto OnUnpossessed = 0x618; // FMulticastInlineDelegate
		constexpr auto OnSpectateStart = 0x628; // FMulticastInlineDelegate
		constexpr auto OnSpectateStop = 0x638; // FMulticastInlineDelegate
		constexpr auto OnPlayerStateChanged = 0x648; // FMulticastInlineDelegate
		constexpr auto OnFellOutOfWorld = 0x658; // FMulticastInlineDelegate
		constexpr auto OnTriggeredHorde = 0x668; // FMulticastInlineDelegate
		constexpr auto GameplayTagsComponent = 0xef0; // UGameplayTagsComponent*
		constexpr auto TraitsComponent = 0xef8; // UTraitsComponent*
		constexpr auto CharacterEmitterComponent = 0xf00; // UCharacterEmitterComponent*
		constexpr auto SkeletalAudioEmitter = 0xf08; // UAkSkeletalComponent*
		constexpr auto CharacterAudioComponent = 0xf10; // UCharacterAudioComponent*
		constexpr auto LadderMovementModeComponent = 0xf18; // ULadderMovementModeComponent*
		constexpr auto GameplayActionsComponent = 0xf20; // UGameplayActionsComponent*
		constexpr auto LifeStateComp = 0xf28; // ULifeStateComponent*
		constexpr auto MoveIgnoreActorsComponent = 0xf30; // UMoveIgnoreActorsComponent*
		constexpr auto RagdollComponent = 0xf38; // URagdollComponent*
		constexpr auto ReplicatedMontageComponent = 0xf40; // UReplicatedMontageComponent*
		constexpr auto TuningDataComponent = 0xf48; // UTuningDataComponent*
		constexpr auto ScriptingComponent = 0xf50; // UAIScriptingComponent*
		constexpr auto LastKnownController = 0xf58; // AGobiPlayerController*
		constexpr auto bDamageNumbersVisible = 0xf60; // bool
		constexpr auto bWasBotControlled = 0xf78; // bool
		constexpr auto CurrentLocoVariations = 0xf80; // TArray<FSelectedLocoInfo>
		constexpr auto Enemy = 0xf90; // AActor*
		constexpr auto bIsAggro = 0xf98; // bool
		constexpr auto CharacterRandomizationData = 0xf9c; // FCharacterRandomizationData
		constexpr auto WasRenderedClientInfo = 0xfa8; // FWasRenderedClientInfo
		constexpr auto CharacterDisplayName = 0xfc8; // FText
		constexpr auto SpawnEnvQuery = 0xfe0; // UEnvQuery*
		constexpr auto BackfillSpawnEnvQuery = 0xfe8; // UEnvQuery*
		constexpr auto Loadout = 0xff0; // FGobiCharacterLoadout
		constexpr auto bUsesZombieMergeMeshPool = 0x1038; // bool
		constexpr auto CharacterConfigs = 0x1040; // TArray<FGobiCharacterConfig>
		constexpr auto PlayerAimPitchOffset = 0x1050; // float
		constexpr auto FallDamage = 0x1058; // FFallDamageData
		constexpr auto ImpactTableMap = 0x1088; // TMap<FGameplayTag, FCharacterImpactTableConfig>
		constexpr auto MaterialParamOverrideConfigs = 0x10d8; // TArray<FMaterialParamOverride>
		constexpr auto IntensityMode = 0x10e8; // EIntensityMode
		constexpr auto MaxDistanceToAffectIntensity = 0x10ec; // float
		constexpr auto bProlongHordeCleanup = 0x10f0; // bool
		constexpr auto GlowingEyesMaterialSlotName = 0x10f4; // FName
		constexpr auto GlowingEyesSocketName = 0x10fc; // FName
		constexpr auto GlowingEyesFwdVectorParamName = 0x1104; // FName
		constexpr auto GlowingEyesStrengthParamName = 0x110c; // FName
		constexpr auto LocoVariationConfig = 0x1118; // FLocoVariationConfig
		constexpr auto MoveEffects = 0x1130; // FGobiCharacterMoveEffects
		constexpr auto GameplayTags = 0x11a8; // FGameplayTagContainer
		constexpr auto CrouchingTags = 0x11c8; // FGameplayTagContainer
		constexpr auto DisableYawRotationTag = 0x11e8; // FGameplayTag
		constexpr auto NonCapableGrappleTags = 0x11f0; // FGameplayTagQuery
		constexpr auto DamageComponentCollisionName = 0x1238; // FName
		constexpr auto bCharacterAvoidanceMovementEnabled = 0x1240; // bool
		constexpr auto CharacterAvoidanceMinDistance = 0x1244; // float
		constexpr auto CharacterAvoidanceWakeUpDelay = 0x1248; // float
		constexpr auto EnemyCharacterAvoidance = 0x1250; // FCharacterAvoidanceTuning
		constexpr auto FriendlyCharacterAvoidance = 0x1280; // FCharacterAvoidanceTuning
		constexpr auto Slug = 0x12b0; // FName
		constexpr auto HordingTags = 0x12b8; // FGameplayTagContainer
		constexpr auto bApplyGameplayCardAISpawnPhase = 0x12d8; // bool
		constexpr auto bTrackHeroCanSee = 0x12d9; // bool
		constexpr auto EyeSocket = 0x12dc; // FName
		constexpr auto CharacterTraits = 0x12e8; // TArray<UTraitCollection*>
		constexpr auto UpdateRateOptimizationCategory = 0x12f8; // FGameplayTag
		constexpr auto SignificanceCategory = 0x1300; // FGameplayTag
		constexpr auto SignificanceDistanceWeight = 0x1308; // float
		constexpr auto FootplantIKLODCategory = 0x130c; // FGameplayTag
		constexpr auto MutilationCategory = 0x1314; // FGameplayTag
		constexpr auto bDisableUpdatingCharactersPhysicsVolume = 0x131c; // bool
		constexpr auto SpawnHeat = 0x1320; // float
		constexpr auto CachedMapSpatialInfoComponent = 0x1328; // UMapSpatialInfoComponent*
	}

	namespace n_UProxyLODMeshSimplificationSettings {
		constexpr auto ProxyLODMeshReductionModuleName = 0x40; // FName
	}

	namespace n_USteeringBehavior_ReturnToNavmesh {
		constexpr auto SearchExtentScale = 0x58; // float
	}

	namespace n_UEnvQuery {
		constexpr auto QueryName = 0x38; // FName
		constexpr auto Options = 0x40; // TArray<UEnvQueryOption*>
	}

	namespace n_UAnimEvalSet_Common_Melee_Crowding_C {
		constexpr auto IsMontageCurrentlyPlaying = 0x4f8; // FAnimEval_MontageCurrentlyPlaying
		constexpr auto PawnBlocked = 0x540; // FGameplayEval_BlockedByPawn
		constexpr auto NavBlocked = 0x5a8; // FGameplayEval_NavBlocked
	}

	namespace n_UToFloatField {
		constexpr auto IntField = 0xe8; // UFieldNodeInt*
	}

	namespace n_ABlighted_AcidPool_BP_C {
		constexpr auto Box = 0x338; // UBoxComponent*
		constexpr auto GameplayEffectEmitter = 0x340; // UGameplayEffectEmitterComponent*
	}

	namespace n_UTweenFloatLatentFactory {
		constexpr auto OnTweenStart = 0x38; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0x48; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0x58; // FMulticastInlineDelegate
	}

	namespace n_UMaterialInstanceConstant {
		constexpr auto PhysMaterialMask = 0x410; // UPhysicalMaterialMask*
	}

	namespace n_AMatineeActor {
		constexpr auto MatineeData = 0x2a0; // UInterpData*
		constexpr auto MatineeControllerName = 0x2a8; // FName
		constexpr auto PlayRate = 0x2b0; // float
		constexpr auto bPlayOnLevelLoad = 0x2b4; // char : 1
		constexpr auto bForceStartPos = 0x2b4; // char : 1
		constexpr auto ForceStartPosition = 0x2b8; // float
		constexpr auto bLooping = 0x2bc; // char : 1
		constexpr auto bRewindOnPlay = 0x2bc; // char : 1
		constexpr auto bNoResetOnRewind = 0x2bc; // char : 1
		constexpr auto bRewindIfAlreadyPlaying = 0x2bc; // char : 1
		constexpr auto bDisableRadioFilter = 0x2bc; // char : 1
		constexpr auto bClientSideOnly = 0x2bc; // char : 1
		constexpr auto bSkipUpdateIfNotVisible = 0x2bc; // char : 1
		constexpr auto bIsSkippable = 0x2bc; // char : 1
		constexpr auto PreferredSplitScreenNum = 0x2c0; // int32_t
		constexpr auto bDisableMovementInput = 0x2c4; // char : 1
		constexpr auto bDisableLookAtInput = 0x2c4; // char : 1
		constexpr auto bHidePlayer = 0x2c4; // char : 1
		constexpr auto bHideHud = 0x2c4; // char : 1
		constexpr auto GroupActorInfos = 0x2c8; // TArray<FInterpGroupActorInfo>
		constexpr auto bShouldShowGore = 0x2d8; // char : 1
		constexpr auto GroupInst = 0x2e0; // TArray<UInterpGroupInst*>
		constexpr auto CameraCuts = 0x2f0; // TArray<FCameraCutInfo>
		constexpr auto bIsPlaying = 0x300; // char : 1
		constexpr auto bReversePlayback = 0x300; // char : 1
		constexpr auto bPaused = 0x300; // char : 1
		constexpr auto bPendingStop = 0x300; // char : 1
		constexpr auto InterpPosition = 0x304; // float
		constexpr auto ReplicationForceIsPlaying = 0x30c; // char
		constexpr auto OnPlay = 0x310; // FMulticastInlineDelegate
		constexpr auto OnStop = 0x320; // FMulticastInlineDelegate
		constexpr auto OnPause = 0x330; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionFunctionInput {
		constexpr auto Preview = 0x48; // FExpressionInput
		constexpr auto InputName = 0x5c; // FName
		constexpr auto Description = 0x68; // FString
		constexpr auto ID = 0x78; // FGuid
		constexpr auto InputType = 0x88; // EFunctionInputType
		constexpr auto PreviewValue = 0x90; // FVector4
		constexpr auto bUsePreviewValueAsDefault = 0xa0; // char : 1
		constexpr auto SortPriority = 0xa4; // int32_t
		constexpr auto bCompilingFunctionPreview = 0xa8; // char : 1
	}

	namespace n_UPlayMontageAndWaitProxy {
		constexpr auto OnCompleted = 0x30; // FMulticastInlineDelegate
		constexpr auto OnBlendOut = 0x40; // FMulticastInlineDelegate
		constexpr auto OnInterrupted = 0x50; // FMulticastInlineDelegate
		constexpr auto OnNotifyBegin = 0x60; // FMulticastInlineDelegate
		constexpr auto OnNotifyEnd = 0x70; // FMulticastInlineDelegate
	}

	namespace n_ASleeper_HeroGrappled_ScenarioActor_C {
		constexpr auto Sleeper_HeroGrappled_Scenario_BP = 0x2a0; // USleeper_HeroGrappled_Scenario_BP_C*
		constexpr auto DefaultSceneRoot = 0x2a8; // USceneComponent*
	}

	namespace n_UMaterialExpressionMaterialAttributeLayers {
		constexpr auto ParameterName = 0x48; // FName
		constexpr auto ExpressionGUID = 0x50; // FGuid
		constexpr auto Input = 0x60; // FMaterialAttributesInput
		constexpr auto DefaultLayers = 0x78; // FMaterialLayersFunctions
		constexpr auto LayerCallers = 0xb8; // TArray<UMaterialExpressionMaterialFunctionCall*>
		constexpr auto NumActiveLayerCallers = 0xc8; // int32_t
		constexpr auto BlendCallers = 0xd0; // TArray<UMaterialExpressionMaterialFunctionCall*>
		constexpr auto NumActiveBlendCallers = 0xe0; // int32_t
		constexpr auto bIsLayerGraphBuilt = 0xe4; // bool
	}

	namespace n_UMediaSoundComponent {
		constexpr auto Channels = 0x710; // EMediaSoundChannels
		constexpr auto DynamicRateAdjustment = 0x714; // bool
		constexpr auto RateAdjustmentFactor = 0x718; // float
		constexpr auto RateAdjustmentRange = 0x71c; // FFloatRange
		constexpr auto MediaPlayer = 0x730; // UMediaPlayer*
	}

	namespace n_UHeroUseComponent {
		constexpr auto OnBeginUse = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnEndUse = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnSuccessfulUse = 0x108; // FMulticastInlineDelegate
		constexpr auto InitialProbeRadius = 0x118; // float
		constexpr auto InitialProbeLength = 0x11c; // float
		constexpr auto SecondaryProbeRadius = 0x120; // float
		constexpr auto SecondaryProbeLength = 0x124; // float
		constexpr auto SpottingHeightIncrease = 0x128; // float
		constexpr auto PotentialUsableAngle = 0x12c; // float
		constexpr auto ReachoutAnimationDelay = 0x130; // float
		constexpr auto ActorBeingUsed = 0x138; // AActor*
		constexpr auto PotentialUsableActor = 0x140; // AActor*
		constexpr auto ActiveUsableComponent = 0x148; // UUsableComponent*
		constexpr auto PotentialUsableComponent = 0x150; // UUsableComponent*
		constexpr auto SpottingUsableComponent = 0x158; // UUsableComponent*
		constexpr auto LastUsePressUsable = 0x160; // UUsableComponent*
		constexpr auto CurrentUseAnimation = 0x168; // UAnimMontage*
		constexpr auto CurrentHeroUseState = 0x170; // EHeroUseState
	}

	namespace n_UMovieSceneLevelVisibilitySection {
		constexpr auto Visibility = 0xe8; // ELevelVisibility
		constexpr auto LevelNames = 0xf0; // TArray<FName>
	}

	namespace n_USourceEffectRingModulationPreset {
		constexpr auto Settings = 0x84; // FSourceEffectRingModulationSettings
	}

	namespace n_UAnimEvalSet_Chaser_ProjectileThrow_C {
		constexpr auto SelfVelocity = 0x328; // FGameplayEval_Speed
		constexpr auto Tags = 0x388; // FGameplayEval_GameplayTags
		constexpr auto HasPath = 0x420; // FGameplayEval_HasPath
		constexpr auto ClingAttached = 0x468; // FGameplayEval_ClingAttached
	}

	namespace n_UCameraModifier_InterpolateFOV {
		constexpr auto TargetFOVPct = 0x50; // float
		constexpr auto BlendOption = 0x5c; // EAlphaBlendOption
		constexpr auto CustomBlendCurve = 0x60; // UCurveFloat*
		constexpr auto OwnerPlayer = 0xe8; // ULocalPlayer*
	}

	namespace n_USubmixEffectConvolutionReverbPreset {
		constexpr auto Settings = 0x48; // FSubmixEffectConvolutionReverbSettings
		constexpr auto ImpulseResponse = 0x68; // UAudioImpulseResponse*
		constexpr auto BlockSize = 0x70; // ESubmixEffectConvolutionReverbBlockSize
		constexpr auto bEnableHardwareAcceleration = 0x71; // bool
	}

	namespace n_UMovieScenePrimitiveMaterialTrack {
		constexpr auto MaterialIndex = 0x90; // int32_t
	}

	namespace n_UGameplayDataSet {
		constexpr auto PerThreatCatchUpBonuses = 0x38; // TArray<FPerThreatCatchUpBonus>
		constexpr auto AlwaysUnlockedCards = 0x48; // TArray<FDataTableRowHandle>
		constexpr auto AlwaysUnlockedCardsPvP = 0x58; // TArray<FDataTableRowHandle>
		constexpr auto GameplayCardCategoryData = 0x68; // TMap<EGameplayCardCategory, FGameplayCardUIData>
		constexpr auto MaxCardsToDrawOnCharacterTransfer = 0xb8; // int32_t
	}

	namespace n_UParticleModuleAccelerationConstant {
		constexpr auto Acceleration = 0x40; // FVector
	}

	namespace n_UGameplayEffectCharacterEmitter {
		constexpr auto CharacterEmitterDef = 0x240; // FCharacterEmitterDef
	}

	namespace n_UHUDHintTextUserWidget {
		constexpr auto ReloadBlockingTags = 0x458; // FGameplayTagContainer
		constexpr auto Ammo = 0x478; // UClipAmmoComponent*
		constexpr auto SelectedItem = 0x480; // AItem*
		constexpr auto Reload = 0x488; // UReloadComponent*
		constexpr auto HeroLifeState = 0x490; // UHeroLifeStateComponent*
		constexpr auto EventSecondsRemaining = 0x498; // float
	}

	namespace n_UBlackboardKeyType_Enum {
		constexpr auto EnumType = 0x38; // UEnum*
		constexpr auto EnumName = 0x40; // FString
		constexpr auto bIsEnumNameValid = 0x50; // char : 1
	}

	namespace n_USignInScreen_WBP_C {
		constexpr auto UberGraphFrame = 0x658; // FPointerToUberGraphFrame
		constexpr auto NewAnimation = 0x660; // UWidgetAnimation*
		constexpr auto AcceptingInviteText = 0x668; // UBaseTextBlock_C*
		constexpr auto BG = 0x670; // UImage*
		constexpr auto BGImage = 0x678; // UImage*
		constexpr auto CreatingGroupText = 0x680; // UBaseTextBlock_C*
		constexpr auto CreatingPartyText = 0x688; // UBaseTextBlock_C*
		constexpr auto EnvironmentStatus_WBP = 0x690; // UEnvironmentStatus_WBP_C*
		constexpr auto FetchingProfileText = 0x698; // UBaseTextBlock_C*
		constexpr auto Frame = 0x6a0; // UImage*
		constexpr auto SigningInText = 0x6a8; // UBaseTextBlock_C*
		constexpr auto SignInPrompt = 0x6b0; // UOverlay*
		constexpr auto SignInPromptText = 0x6b8; // URichTextBlock*
		constexpr auto TaskManRelayStatus = 0x6c0; // UTaskManRelayStatus_WBP_C*
		constexpr auto WaitingForServerThrobber = 0x6c8; // UCircularThrobber*
		constexpr auto SignInState = 0x6d0; // ESignInScreenState
		constexpr auto CancelKeys = 0x6d8; // TArray<FKey>
		constexpr auto BGTexture = 0x6e8; // TSoftObjectPtr<UTexture2D>
		constexpr auto TweenOpenContainer = 0x710; // UTweenContainer*
	}

	namespace n_UMatchmakingMOTDUserWidget {
		constexpr auto Tabs = 0x458; // TArray<FMOTDHubInfo>
		constexpr auto DynamicIcon = 0x468; // UTexture2D*
	}

	namespace n_UInterpFilter {
		constexpr auto Caption = 0x30; // FString
	}

	namespace n_UBruteComponent {
		constexpr auto BruteStateTags = 0x100; // FGameplayTag [0x5]
		constexpr auto MeleeProbability = 0x128; // float
		constexpr auto BlackboardAsset = 0x130; // UBlackboardData*
		constexpr auto EnemyBBKey = 0x138; // FBlackboardKeySelector
		constexpr auto MeleeActionTagQuery = 0x160; // FGameplayTagQuery
		constexpr auto TumorTossActionTagQuery = 0x1a8; // FGameplayTagQuery
		constexpr auto MinTargetAttacksBeforeTargetSwitch = 0x1f0; // int32_t
		constexpr auto MinTargetDistanceDiffBeforeTargetSwitch = 0x1f4; // float
		constexpr auto BruteOwner = 0x338; // AGobiCharacter*
		constexpr auto CurrentBruteState = 0x340; // EBruteState
		constexpr auto PreviousBruteState = 0x341; // EBruteState
	}

	namespace n_UGobiProjectileMovementComponent {
		constexpr auto RotationRate = 0x210; // FRotator
		constexpr auto RotationPositionOffset = 0x21c; // FVector
		constexpr auto bRotationInLocalSpace = 0x228; // char : 1
	}

	namespace n_UBTDecorator_DoesPathExist {
		constexpr auto BlackboardKeyA = 0x70; // FBlackboardKeySelector
		constexpr auto BlackboardKeyB = 0x98; // FBlackboardKeySelector
		constexpr auto bUseSelf = 0xc0; // char : 1
		constexpr auto PathQueryType = 0xc4; // EPathExistanceQueryType
		constexpr auto FilterClass = 0xc8; // UNavigationQueryFilter*
	}

	namespace n_UInterpTrackLinearColorProp {
		constexpr auto PropertyName = 0x98; // FName
	}

	namespace n_UInputRouter {
		constexpr auto bAutoInvalidateOnHover = 0x30; // bool
		constexpr auto bAutoInvalidateOnCapture = 0x31; // bool
		constexpr auto ActiveInputBehaviors = 0x40; // UInputBehaviorSet*
	}

	namespace n_UBTTask_BlueprintBase {
		constexpr auto AIOwner = 0x78; // AAIController*
		constexpr auto ActorOwner = 0x80; // AActor*
		constexpr auto TickInterval = 0x88; // FIntervalCountdown
		constexpr auto bShowPropertyDetails = 0xa8; // char : 1
	}

	namespace n_UParticleModuleSpawnBase {
		constexpr auto bProcessSpawnRate = 0x38; // char : 1
		constexpr auto bProcessBurstList = 0x38; // char : 1
	}

	namespace n_UScreenFXComponent {
		constexpr auto ScreenFXData = 0xe8; // TArray<UScreenEffect*>
		constexpr auto DefaultDamageEffectClass = 0xf8; // UScreenEffect*
		constexpr auto DefaultDamageScreenEffect = 0x100; // UScreenEffect*
		constexpr auto DamageTypeFXOverrides = 0x108; // TArray<FDamageScreenEffectMapping>
		constexpr auto ScreenEffectInstances = 0x118; // TArray<UScreenEffect*>
		constexpr auto OwnerPlayer = 0x128; // TWeakObjectPtr<APlayerCharacter>
		constexpr auto OwningPlayerController = 0x130; // TWeakObjectPtr<APlayerController>
		constexpr auto CameraManager = 0x138; // TWeakObjectPtr<APlayerCameraManager>
		constexpr auto HealthComponent = 0x140; // TWeakObjectPtr<UHealthComponent>
		constexpr auto OnScreenEffectActiveChanged = 0x158; // FMulticastInlineDelegate
	}

	namespace n_UGameplayEffectOmenSensor {
		constexpr auto OmenQuery = 0x238; // FGameplayTagQuery
	}

	namespace n_UGuidDataTable {
		constexpr auto GuidToDisplayName = 0xd8; // TMap<FGuid, FName>
	}

	namespace n_UPopupUserWidget {
		constexpr auto OnPopupClosed = 0x458; // FMulticastInlineDelegate
		constexpr auto Payload = 0x468; // UObject*
		constexpr auto bDestroyOnClose = 0x470; // bool
		constexpr auto bInvokeAudioPauseStateWhenOpen = 0x471; // bool
	}

	namespace n_UARTexture {
		constexpr auto TextureType = 0xc0; // EARTextureType
		constexpr auto Timestamp = 0xc4; // float
		constexpr auto ExternalTextureGuid = 0xc8; // FGuid
		constexpr auto Size = 0xd8; // FVector2D
	}

	namespace n_UAnimContext_ActorSceneComp {
		constexpr auto ComponentTag = 0x90; // FName
	}

	namespace n_UFriendRequestsPopupUserWidget {
		constexpr auto NumRequestsPerPage = 0x560; // int32_t
		constexpr auto NumRequestsToSearch = 0x564; // int32_t
	}

	namespace n_UEnvQueryGenerator_ActorsOfClass {
		constexpr auto SearchedActorClass = 0x58; // AActor*
		constexpr auto SearchActorClass = 0x60; // FAIDataProviderUObjectValue
		constexpr auto GenerateOnlyActorsInRadius = 0x98; // FAIDataProviderBoolValue
		constexpr auto SearchRadius = 0xd0; // FAIDataProviderFloatValue
		constexpr auto SearchCenter = 0x108; // UEnvQueryContext*
	}

	namespace n_UCommon_Zombie_ABP_C {
		constexpr auto UberGraphFrame = 0x800; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x808; // FAnimNode_Root
		constexpr auto AnimGraphNode_SaveCachedPose_7 = 0x838; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_2 = 0x8f0; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_Slot_4 = 0x9b0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_11 = 0x9f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_10 = 0xa20; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_3 = 0xa48; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_6 = 0xa90; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_Slot_2 = 0xb48; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_9 = 0xb90; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_5 = 0xbb8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0xc70; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_8 = 0xd30; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0xd58; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0xd80; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_2 = 0xda8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SaveCachedPose_4 = 0xe48; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0xf00; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_CurveSource = 0xf28; // FAnimNode_CurveSource
		constexpr auto AnimGraphNode_PoseBlendNode = 0xf68; // FAnimNode_PoseBlendNode
		constexpr auto AnimGraphNode_BlendListByBool = 0x1000; // FAnimNode_BlendListByBool
		constexpr auto __CustomProperty_LocoCounterYaw_838DA19C4320A3A8999F0D8735A716A4 = 0x10a0; // float
		constexpr auto __CustomProperty_AttackAimAlpha_838DA19C4320A3A8999F0D8735A716A4 = 0x10a4; // float
		constexpr auto __CustomProperty_LocoSpeedsBlendTime_838DA19C4320A3A8999F0D8735A716A4 = 0x10a8; // float
		constexpr auto __CustomProperty_LocoBlendTime_838DA19C4320A3A8999F0D8735A716A4 = 0x10ac; // float
		constexpr auto __CustomProperty_Leaning_838DA19C4320A3A8999F0D8735A716A4 = 0x10b0; // FLocoLeaning
		constexpr auto __CustomProperty_LocoPredict_838DA19C4320A3A8999F0D8735A716A4 = 0x10c0; // FLocomotionPrediction
		constexpr auto __CustomProperty_AnimState3P_838DA19C4320A3A8999F0D8735A716A4 = 0x1128; // FAnimState3P
		constexpr auto __CustomProperty_AnimationState_838DA19C4320A3A8999F0D8735A716A4 = 0x1130; // FGobiAnimationState
		constexpr auto __CustomProperty_LocomotionData_838DA19C4320A3A8999F0D8735A716A4 = 0x1188; // FAnimLocomotionData
		constexpr auto __CustomProperty_BackwardDirection_838DA19C4320A3A8999F0D8735A716A4 = 0x11c8; // FAnimDirectionRange
		constexpr auto __CustomProperty_LeftDirection_838DA19C4320A3A8999F0D8735A716A4 = 0x11e4; // FAnimDirectionRange
		constexpr auto __CustomProperty_RightDirection_838DA19C4320A3A8999F0D8735A716A4 = 0x1200; // FAnimDirectionRange
		constexpr auto __CustomProperty_ForwardDirection_838DA19C4320A3A8999F0D8735A716A4 = 0x121c; // FAnimDirectionRange
		constexpr auto __CustomProperty_LocoPredictState_838DA19C4320A3A8999F0D8735A716A4 = 0x1238; // FLocomotionPrediction
		constexpr auto __CustomProperty_TurnInPlaceState_838DA19C4320A3A8999F0D8735A716A4 = 0x12a0; // FLocoTurnInPlace
		constexpr auto AnimGraphNode_LinkedAnimGraph_2 = 0x1350; // FAnimNode_LinkedAnimGraph
		constexpr auto __CustomProperty_LocoCounterYaw_595F317948A60B33D1850393E04CDD36 = 0x13f8; // float
		constexpr auto __CustomProperty_AttackAimAlpha_595F317948A60B33D1850393E04CDD36 = 0x13fc; // float
		constexpr auto __CustomProperty_LocoSpeedsBlendTime_595F317948A60B33D1850393E04CDD36 = 0x1400; // float
		constexpr auto __CustomProperty_LocoBlendTime_595F317948A60B33D1850393E04CDD36 = 0x1404; // float
		constexpr auto __CustomProperty_Leaning_595F317948A60B33D1850393E04CDD36 = 0x1408; // FLocoLeaning
		constexpr auto __CustomProperty_LocoPredict_595F317948A60B33D1850393E04CDD36 = 0x1418; // FLocomotionPrediction
		constexpr auto __CustomProperty_AnimState3P_595F317948A60B33D1850393E04CDD36 = 0x1480; // FAnimState3P
		constexpr auto __CustomProperty_AnimationState_595F317948A60B33D1850393E04CDD36 = 0x1488; // FGobiAnimationState
		constexpr auto __CustomProperty_LocomotionData_595F317948A60B33D1850393E04CDD36 = 0x14e0; // FAnimLocomotionData
		constexpr auto __CustomProperty_BackwardDirection_595F317948A60B33D1850393E04CDD36 = 0x1520; // FAnimDirectionRange
		constexpr auto __CustomProperty_LeftDirection_595F317948A60B33D1850393E04CDD36 = 0x153c; // FAnimDirectionRange
		constexpr auto __CustomProperty_RightDirection_595F317948A60B33D1850393E04CDD36 = 0x1558; // FAnimDirectionRange
		constexpr auto __CustomProperty_ForwardDirection_595F317948A60B33D1850393E04CDD36 = 0x1574; // FAnimDirectionRange
		constexpr auto __CustomProperty_LocoPredictState_595F317948A60B33D1850393E04CDD36 = 0x1590; // FLocomotionPrediction
		constexpr auto __CustomProperty_TurnInPlaceState_595F317948A60B33D1850393E04CDD36 = 0x15f8; // FLocoTurnInPlace
		constexpr auto AnimGraphNode_LinkedAnimGraph = 0x16a8; // FAnimNode_LinkedAnimGraph
		constexpr auto AnimGraphNode_SaveCachedPose_3 = 0x1750; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend = 0x1808; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x18d0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot = 0x18f8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x1940; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x19f8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x1a20; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_RotateRootBone = 0x1a48; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_SaveCachedPose = 0x1ae8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace = 0x1ba0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_UseCachedPose = 0x1d30; // FAnimNode_UseCachedPose
		constexpr auto AdditiveBlendWeight = 0x1d58; // float
		constexpr auto UpperBodyBlendWeight = 0x1d5c; // float
	}

	namespace n_UTitanStage2And3Component {
		constexpr auto OnStageKilled = 0xf0; // FMulticastInlineDelegate
		constexpr auto OnBeganStage3Death = 0x100; // FMulticastInlineDelegate
		constexpr auto OnEscape = 0x110; // FMulticastInlineDelegate
		constexpr auto RemainingWeakSpots = 0x138; // int32_t
		constexpr auto ReplicatedStateInfo = 0x1b8; // FReplicatedTitanStateInfo
		constexpr auto Stage = 0x1c4; // int32_t
		constexpr auto Stage2PhaseIdx = 0x1c8; // int32_t
		constexpr auto Stage3PhaseIdx = 0x1cc; // int32_t
		constexpr auto Stage3SegmentIdx = 0x1d0; // int32_t
		constexpr auto bPredictKnockbackOnClient = 0x1d4; // bool
		constexpr auto Stage2Tentacles = 0x1d8; // TArray<AActor*>
		constexpr auto Stage3TentacleComponents = 0x1f8; // TArray<UTitanStage3TentacleComponent*>
		constexpr auto bAutoAttackOnBegin = 0x218; // bool
		constexpr auto DeathAnimSequence = 0x220; // UAnimSequence*
		constexpr auto RightWeakSpotSocketName = 0x228; // FName
		constexpr auto LeftWeakSpotSocketName = 0x230; // FName
		constexpr auto Stage2Health = 0x238; // float
		constexpr auto Stage2TentacleClass = 0x240; // AActor*
		constexpr auto Stage2WeakSpotCount = 0x248; // int32_t
		constexpr auto KnockbackTagsToApply = 0x250; // FGameplayTagContainer
		constexpr auto PlayerKnocbackTriggerTag = 0x270; // FGameplayTag
		constexpr auto KnockbackImpulse = 0x278; // float
		constexpr auto KnockbackDuration = 0x27c; // float
		constexpr auto KnockbackGravityScalar = 0x280; // float
		constexpr auto Stage3Health = 0x284; // float
		constexpr auto Stage3ScenarioActor = 0x288; // TWeakObjectPtr<AActor>
		constexpr auto FallBehindTrigger = 0x290; // TWeakObjectPtr<AActor>
		constexpr auto Stage3WeakSpotCount = 0x298; // int32_t
		constexpr auto PathRootBone = 0x29c; // FName
		constexpr auto TitanStage2Tuning = 0x2a8; // FTitanStage2Tuning
		constexpr auto TitanStage3Tuning = 0x2c0; // FTitanStage3Tuning
		constexpr auto Phase2WeakspotOneDestroyed = 0x2f0; // FDataTableRowHandle
		constexpr auto Phase2WeakspotTwoDestroyed = 0x310; // FDataTableRowHandle
		constexpr auto Phase3WeakspotHit = 0x330; // FDataTableRowHandle
		constexpr auto Phase3WeakspotDestroyed = 0x350; // FDataTableRowHandle
		constexpr auto Stage2AimAssistData = 0x370; // TArray<FWeakspotAimAssistData>
		constexpr auto Stage3AimAssistData = 0x380; // TArray<FWeakspotAimAssistData>
		constexpr auto Stage3BlendTime = 0x390; // float
	}

	namespace n_UUMGSequencePlayer {
		constexpr auto Animation = 0x410; // UWidgetAnimation*
	}

	namespace n_UInterpCurveEdSetup {
		constexpr auto Tabs = 0x30; // TArray<FCurveEdTab>
		constexpr auto ActiveTab = 0x40; // int32_t
	}

	namespace n_UBlackboardData {
		constexpr auto Parent = 0x38; // UBlackboardData*
		constexpr auto Keys = 0x40; // TArray<FBlackboardEntry>
		constexpr auto bHasSynchronizedKeys = 0x50; // char : 1
	}

	namespace n_UBTDecorator {
		constexpr auto bInverseCondition = 0x68; // char : 1
		constexpr auto FlowAbortMode = 0x6c; // EBTFlowAbortMode
	}

	namespace n_UBoneMaskFilter {
		constexpr auto BlendPoses = 0x30; // TArray<FInputBlendPose>
	}

	namespace n_AOnlineBeacon {
		constexpr auto BeaconConnectionInitialTimeout = 0x2a8; // float
		constexpr auto BeaconConnectionTimeout = 0x2ac; // float
		constexpr auto NetDriver = 0x2b0; // UNetDriver*
	}

	namespace n_USubmixEffectDelayPreset {
		constexpr auto Settings = 0x7c; // FSubmixEffectDelaySettings
		constexpr auto DynamicSettings = 0x88; // FSubmixEffectDelaySettings
	}

	namespace n_UCardInventoryLesson_BP_C {
		constexpr auto UberGraphFrame = 0x460; // FPointerToUberGraphFrame
	}

	namespace n_UFlashlightPoseComponent {
		constexpr auto SmoothAlpha = 0x230; // float
		constexpr auto FlashlightLeadStrength = 0x234; // float
	}

	namespace n_UAkMusicSyncCallbackInfo {
		constexpr auto PlayingID = 0x38; // int32_t
		constexpr auto SegmentInfo = 0x3c; // FAkSegmentInfo
		constexpr auto MusicSyncType = 0x60; // EAkCallbackType
		constexpr auto UserCueName = 0x68; // FString
	}

	namespace n_AHUD {
		constexpr auto PlayerOwner = 0x2a0; // APlayerController*
		constexpr auto bLostFocusPaused = 0x2a8; // char : 1
		constexpr auto bShowHUD = 0x2a8; // char : 1
		constexpr auto bShowDebugInfo = 0x2a8; // char : 1
		constexpr auto CurrentTargetIndex = 0x2ac; // int32_t
		constexpr auto bShowHitBoxDebugInfo = 0x2b0; // char : 1
		constexpr auto bShowOverlays = 0x2b0; // char : 1
		constexpr auto bEnableDebugTextShadow = 0x2b0; // char : 1
		constexpr auto PostRenderedActors = 0x2b8; // TArray<AActor*>
		constexpr auto DebugDisplay = 0x2d0; // TArray<FName>
		constexpr auto ToggledDebugCategories = 0x2e0; // TArray<FName>
		constexpr auto Canvas = 0x2f0; // UCanvas*
		constexpr auto DebugCanvas = 0x2f8; // UCanvas*
		constexpr auto DebugTextList = 0x300; // TArray<FDebugTextInfo>
		constexpr auto ShowDebugTargetDesiredClass = 0x310; // AActor*
		constexpr auto ShowDebugTargetActor = 0x318; // AActor*
		constexpr auto ScrollSpeed = 0x320; // int32_t
		constexpr auto TabChangeDirection = 0x324; // int32_t
	}

	namespace n_UAnimContext_Direction {
		constexpr auto DirectionFrom = 0x60; // UAnimContext_Transform*
		constexpr auto DirectionTo = 0x68; // UAnimContext_Transform*
	}

	namespace n_APVPGameMode {
		constexpr auto DefaultZombiePawnClasses = 0x570; // TArray<APawn*>
		constexpr auto ZombieRespawnEQSTimerMax = 0x580; // float
		constexpr auto MutationPointTrickleRate = 0x588; // float
		constexpr auto MutationPointTrickleAmount = 0x58c; // int32_t
		constexpr auto ZombieMutationPointsPerRound = 0x590; // TArray<int32_t>
	}

	namespace n_UNiagaraDataInterfaceRWBase {
		constexpr auto OutputShaderStages = 0x38; // TSet<int32_t>
		constexpr auto IterationShaderStages = 0x88; // TSet<int32_t>
	}

	namespace n_UDynamicEntryBoxBase {
		constexpr auto EntryBoxType = 0x148; // EDynamicBoxType
		constexpr auto EntrySpacing = 0x14c; // FVector2D
		constexpr auto SpacingPattern = 0x158; // TArray<FVector2D>
		constexpr auto EntrySizeRule = 0x168; // FSlateChildSize
		constexpr auto EntryHorizontalAlignment = 0x170; // EHorizontalAlignment
		constexpr auto EntryVerticalAlignment = 0x171; // EVerticalAlignment
		constexpr auto MaxElementSize = 0x174; // int32_t
		constexpr auto EntryWidgetPool = 0x188; // FUserWidgetPool
	}

	namespace n_UWaterSurface {
		constexpr auto Definition = 0x40; // UWaterSurfaceDef*
		constexpr auto HeightMID = 0x48; // UMaterialInstanceDynamic*
		constexpr auto ForceMID = 0x50; // UMaterialInstanceDynamic*
		constexpr auto NormalMID = 0x58; // UMaterialInstanceDynamic*
		constexpr auto OriginalMeshMaterial = 0x60; // UMaterialInterface*
		constexpr auto RenderTargets = 0x68; // TArray<UTextureRenderTarget2D*>
		constexpr auto NormalRenderTargets = 0x78; // TArray<UTextureRenderTarget2D*>
		constexpr auto RTMeshComponent = 0x90; // UStaticMeshComponent*
		constexpr auto WaterMID = 0x98; // UMaterialInstanceDynamic*
		constexpr auto ShiftRTTempTarget = 0xa0; // UTextureRenderTarget2D*
		constexpr auto MapperData = 0xa8; // FWaterMapperData
		constexpr auto RipplerProxies = 0xd8; // TArray<FWaterRipplerProxy>
		constexpr auto RipplerHits = 0xe8; // TArray<FWaterRipplerHit>
	}

	namespace n_UGameCoachLessonsComponent {
		constexpr auto LessonClasses = 0xe8; // TArray<UGameCoachLesson*>
		constexpr auto AlternateTarget = 0xf8; // AActor*
		constexpr auto AlternateDisplayTarget = 0x100; // AActor*
		constexpr auto Scope = 0x108; // EGameCoachRegistrationScope
		constexpr auto TraceChannel = 0x109; // ECollisionChannel
		constexpr auto bUseCustomTraceChannel = 0x10a; // bool
		constexpr auto CustomTraceChannel = 0x10c; // FName
	}

	namespace n_UControlPointMeshComponent {
		constexpr auto VirtualTextureMainPassMaxDrawDistance = 0x5c0; // float
	}

	namespace n_USessionConnectionConfig {
		constexpr auto ReconnectTimer = 0x30; // FTaskTimerConfig
		constexpr auto ReconnectAbandonTime = 0xa0; // double
		constexpr auto InGameReconnectAbandonTime = 0xa8; // double
		constexpr auto TaskTimeout = 0xb0; // double
		constexpr auto PingIntervalMin = 0xb8; // double
		constexpr auto PingIntervalMax = 0xc0; // double
		constexpr auto NumPingsToMigrate = 0xc8; // int32_t
	}

	namespace n_UMovieSceneColorSection {
		constexpr auto RedCurve = 0xe8; // FMovieSceneFloatChannel
		constexpr auto GreenCurve = 0x188; // FMovieSceneFloatChannel
		constexpr auto BlueCurve = 0x228; // FMovieSceneFloatChannel
		constexpr auto AlphaCurve = 0x2c8; // FMovieSceneFloatChannel
	}

	namespace n_UTitanStage2MouthComponent {
		constexpr auto OnMouthOpenEvent = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnMouthCloseEvent = 0xf8; // FMulticastInlineDelegate
		constexpr auto State = 0x168; // ETitanStage2MouthState
		constexpr auto BiteAngle = 0x16c; // float
		constexpr auto BiteBlendSpace = 0x170; // UBlendSpace1D*
		constexpr auto BiteRange = 0x178; // float
		constexpr auto RoarMontage = 0x180; // UAnimMontage*
		constexpr auto FlinchMontage = 0x188; // UAnimMontage*
		constexpr auto RoarExitMontage = 0x190; // UAnimMontage*
		constexpr auto BiteGameplayEffects = 0x198; // TArray<UGameplayEffect*>
		constexpr auto AttackVolumeTag = 0x1a8; // FGameplayTag
		constexpr auto PivotSocket = 0x1b0; // FName
		constexpr auto TitanBiteDamageClass = 0x1b8; // UGobiDamageType*
		constexpr auto RoarInterruptMusicHandle = 0x1d8; // FDataTableRowHandle
	}

	namespace n_UParticleModuleAccelerationOverLifetime {
		constexpr auto AccelOverLife = 0x40; // FRawDistributionVector
	}

	namespace n_UParticleModuleBeamSource {
		constexpr auto SourceMethod = 0x38; // Beam2SourceTargetMethod
		constexpr auto SourceName = 0x3c; // FName
		constexpr auto bSourceAbsolute = 0x44; // char : 1
		constexpr auto Source = 0x48; // FRawDistributionVector
		constexpr auto bLockSource = 0x90; // char : 1
		constexpr auto SourceTangentMethod = 0x94; // Beam2SourceTargetTangentMethod
		constexpr auto SourceTangent = 0x98; // FRawDistributionVector
		constexpr auto bLockSourceTangent = 0xe0; // char : 1
		constexpr auto SourceStrength = 0xe8; // FRawDistributionFloat
		constexpr auto bLockSourceStength = 0x118; // char : 1
	}

	namespace n_UDatasmithStaticMeshComponentTemplate {
		constexpr auto StaticMesh = 0x38; // UStaticMesh*
		constexpr auto OverrideMaterials = 0x40; // TArray<UMaterialInterface*>
	}

	namespace n_UGameplayAction_Ambush {
		constexpr auto AmbushOnHeroLOSMinDistance = 0x210; // float
		constexpr auto AmbushOnHeroMinDistance = 0x218; // float
	}

	namespace n_UNiagaraMeshRendererProperties {
		constexpr auto ParticleMesh = 0x58; // UStaticMesh*
		constexpr auto SortMode = 0x60; // ENiagaraSortMode
		constexpr auto bOverrideMaterials = 0x64; // char : 1
		constexpr auto bSortOnlyWhenTranslucent = 0x64; // char : 1
		constexpr auto OverrideMaterials = 0x68; // TArray<FNiagaraMeshMaterialOverride>
		constexpr auto SubImageSize = 0x78; // FVector2D
		constexpr auto bSubImageBlend = 0x80; // char : 1
		constexpr auto FacingMode = 0x84; // ENiagaraMeshFacingMode
		constexpr auto bLockedAxisEnable = 0x88; // char : 1
		constexpr auto LockedAxis = 0x8c; // FVector
		constexpr auto LockedAxisSpace = 0x98; // ENiagaraMeshLockedAxisSpace
		constexpr auto PositionBinding = 0xa0; // FNiagaraVariableAttributeBinding
		constexpr auto ColorBinding = 0x118; // FNiagaraVariableAttributeBinding
		constexpr auto VelocityBinding = 0x190; // FNiagaraVariableAttributeBinding
		constexpr auto MeshOrientationBinding = 0x208; // FNiagaraVariableAttributeBinding
		constexpr auto ScaleBinding = 0x280; // FNiagaraVariableAttributeBinding
		constexpr auto SubImageIndexBinding = 0x2f8; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterialBinding = 0x370; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial1Binding = 0x3e8; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial2Binding = 0x460; // FNiagaraVariableAttributeBinding
		constexpr auto DynamicMaterial3Binding = 0x4d8; // FNiagaraVariableAttributeBinding
		constexpr auto MaterialRandomBinding = 0x550; // FNiagaraVariableAttributeBinding
		constexpr auto CustomSortingBinding = 0x5c8; // FNiagaraVariableAttributeBinding
		constexpr auto NormalizedAgeBinding = 0x640; // FNiagaraVariableAttributeBinding
		constexpr auto CameraOffsetBinding = 0x6b8; // FNiagaraVariableAttributeBinding
	}

	namespace n_UMovieSceneSpawnTrack {
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
		constexpr auto ObjectGuid = 0x70; // FGuid
	}

	namespace n_UGameplayTask_TimeLimitedExecution {
		constexpr auto OnFinished = 0x70; // FMulticastInlineDelegate
		constexpr auto OnTimeExpired = 0x80; // FMulticastInlineDelegate
	}

	namespace n_UZombieFacialAnimationData {
		constexpr auto FacePoseAsset = 0x38; // UPoseAsset*
		constexpr auto ExpressionCurves = 0x40; // FName [0xf]
	}

	namespace n_ASplineMeshActor {
		constexpr auto SplineMeshComponent = 0x2a0; // USplineMeshComponent*
	}

	namespace n_UAnimMetaData_MontageLink {
		constexpr auto LinkedMontage = 0x30; // UAnimMontage*
	}

	namespace n_UGameplayEffectAISense {
		constexpr auto SenseMods = 0x240; // TArray<FAISenseModInfo>
	}

	namespace n_UGameplayEffectInventoryComponent {
		constexpr auto AmmoReservesStartingPct = 0x240; // FGamePropertyFloatMod [0x7]
		constexpr auto AmmoReservesRefillPct = 0x2b0; // FGamePropertyFloatMod [0x7]
		constexpr auto AmmoReservesMax = 0x320; // FGamePropertyIntMod [0x7]
		constexpr auto bAllowPrimariesInSecondarySlot = 0x390; // bool
		constexpr auto bDisableSpawningDroppedItems = 0x391; // bool
	}

	namespace n_UBotAIScriptingComponent {
		constexpr auto TeammateTargetBBKey = 0x478; // FBlackboardKeySelector
		constexpr auto TeammateDistBBKey = 0x4a0; // FBlackboardKeySelector
		constexpr auto ShouldTeleportBBKey = 0x4c8; // FBlackboardKeySelector
		constexpr auto WanderFollowTeammateBBKey = 0x4f0; // FBlackboardKeySelector
		constexpr auto AllowMeleeNavBBKey = 0x518; // FBlackboardKeySelector
		constexpr auto GoToLocationBBKey = 0x540; // FBlackboardKeySelector
		constexpr auto InteractTargetBBKey = 0x568; // FBlackboardKeySelector
		constexpr auto InteractTargetNavLocBBKey = 0x598; // FBlackboardKeySelector
		constexpr auto DesiredSelfItemPickupBBKey = 0x5c0; // FBlackboardKeySelector
		constexpr auto DesiredTeamItemPickupBBKey = 0x5e8; // FBlackboardKeySelector
		constexpr auto DesiredUsableBBKey = 0x610; // FBlackboardKeySelector
		constexpr auto ItemUseBBKey = 0x638; // FBlackboardKeySelector
		constexpr auto ItemUseNavActorBBKey = 0x660; // FBlackboardKeySelector
		constexpr auto ItemUseNavLocBBKey = 0x688; // FBlackboardKeySelector
	}

	namespace n_USourceEffectStereoDelayPreset {
		constexpr auto Settings = 0x84; // FSourceEffectStereoDelaySettings
	}

	namespace n_UDatasmithLandscapeTemplate {
		constexpr auto LandscapeMaterial = 0x38; // UMaterialInterface*
		constexpr auto StaticLightingLOD = 0x40; // int32_t
	}

	namespace n_UPlatformCalloutImage_WBP_C {
		constexpr auto UberGraphFrame = 0x470; // FPointerToUberGraphFrame
		constexpr auto CalloutIcon = 0x478; // UImage*
		constexpr auto CalloutText = 0x480; // UTextBlock*
		constexpr auto Action = 0x488; // FName
		constexpr auto bShowKey = 0x490; // bool
		constexpr auto bShowGamepad = 0x491; // bool
		constexpr auto OnIconVisibilityChanged = 0x498; // FMulticastInlineDelegate
		constexpr auto OnInputChanged = 0x4a8; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureReplace {
		constexpr auto Default = 0x48; // FExpressionInput
		constexpr auto VirtualTextureOutput = 0x5c; // FExpressionInput
	}

	namespace n_UWindowTitleBarAreaSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UArmorSet {
		constexpr auto Armor = 0x38; // TArray<FArmor>
	}

	namespace n_UCampaignRunComponent {
		constexpr auto ActiveCampaignRunType = 0x100; // EActiveCampaignRunType
		constexpr auto CampaignRunOwners = 0x108; // TArray<FString>
		constexpr auto LastRoundResult = 0x118; // ECampaignRoundResult
		constexpr auto RemainingRetries = 0x11c; // int32_t
		constexpr auto DedicatedServerManager = 0x120; // UDedicatedServerManager*
		constexpr auto CampaignRunManager = 0x128; // UCampaignRunManager*
		constexpr auto PlayerProfileManager = 0x130; // UGobiPlayerProfileManager*
		constexpr auto bCampaignRunAbandoned = 0x148; // bool
	}

	namespace n_UMaterialExpressionShadingPathSwitch {
		constexpr auto Default = 0x48; // FExpressionInput
		constexpr auto Inputs = 0x5c; // FExpressionInput [0x3]
	}

	namespace n_APostProcessVolume {
		constexpr auto Settings = 0x2e0; // FPostProcessSettings
		constexpr auto Priority = 0x840; // float
		constexpr auto BlendRadius = 0x844; // float
		constexpr auto BlendWeight = 0x848; // float
		constexpr auto bEnabled = 0x84c; // char : 1
		constexpr auto bUnbound = 0x84c; // char : 1
	}

	namespace n_UGobiNavModifierComponent {
		constexpr auto AreaClass = 0x118; // UNavArea*
		constexpr auto InactiveAreaClass = 0x120; // UNavArea*
		constexpr auto SupportedAgents = 0x128; // FNavAgentSelector
		constexpr auto CustomNavBoundsVolumesTag = 0x12c; // FGameplayTag
		constexpr auto AreaClassToRemoveHordeBlockingTagOnSpawnActors = 0x138; // UNavArea*
		constexpr auto HordeBlockingTagToRemoveOnSpawnActors = 0x140; // FGameplayTag
		constexpr auto bIncludeAgentHeight = 0x148; // char : 1
	}

	namespace n_UPlayerSlotManagerSeamlessTravelData {
		constexpr auto TeamSlots = 0x30; // TArray<FTeamSlots>
		constexpr auto TeamAMapping = 0x40; // TArray<FCharacterSelectMapping>
		constexpr auto TeamBMapping = 0x50; // TArray<FCharacterSelectMapping>
	}

	namespace n_UApplyOnItemAppliedMod {
		constexpr auto ActivateWhenAppliedTo = 0xd0; // EApplyOnItemAppliedTargeting
		constexpr auto ApplyEmitterDefTo = 0xd1; // EApplyOnItemAppliedTargeting
		constexpr auto ItemTagQuery = 0xd8; // FGameplayTagQuery
		constexpr auto CharacterEmitterDef = 0x120; // FCharacterEmitterDef
	}

	namespace n_AProfilingGameMode {
		constexpr auto AnalyticsManager = 0x488; // AGameplayAnalyticsManager*
	}

	namespace n_UZombieFamilyUserWidget {
		constexpr auto OnVariantClicked = 0x458; // FMulticastInlineDelegate
		constexpr auto OnVariantRightClicked = 0x468; // FMulticastInlineDelegate
		constexpr auto OnVariantFocused = 0x478; // FMulticastInlineDelegate
		constexpr auto OnUpgradeClicked = 0x488; // FMulticastInlineDelegate
		constexpr auto OnUpgradeRightClicked = 0x498; // FMulticastInlineDelegate
		constexpr auto OnUpgradeFocused = 0x4a8; // FMulticastInlineDelegate
		constexpr auto OnUpgradeUnfocused = 0x4b8; // FMulticastInlineDelegate
		constexpr auto TeamPipWidget = 0x4c8; // UGobiUserWidget*
		constexpr auto MutationPointsFormatText = 0x4d0; // FText
		constexpr auto UpgradePreviewWidget = 0x4e8; // UZombieUpgradePreviewUserWidget*
		constexpr auto VariantWidget = 0x4f0; // UZombieVariantEntryUserWidget*
		constexpr auto MutationProgressWidget = 0x4f8; // UZombieMutationProgressUserWidget*
		constexpr auto BG = 0x500; // UImage*
		constexpr auto UpgradePreviewsHBox = 0x508; // UHorizontalBox*
		constexpr auto VariantsHBox = 0x510; // UHorizontalBox*
		constexpr auto UpgradesVBox = 0x518; // UVerticalBox*
		constexpr auto FamilyNameText = 0x520; // UTextBlock*
	}

	namespace n_UChatMessageUserWidget {
		constexpr auto FadeDelay = 0x460; // float
		constexpr auto FadeDuration = 0x464; // float
	}

	namespace n_UGrappleComponent {
		constexpr auto OnGrappleStateChanged = 0xe8; // FMulticastInlineDelegate
		constexpr auto bCanBreakout = 0x105; // bool
		constexpr auto bBreakingOut = 0x106; // bool
		constexpr auto ActiveGrapplers = 0x168; // TArray<FActiveGrappler>
		constexpr auto State = 0x178; // EGrappleState
		constexpr auto bAutoBreakout = 0x179; // bool
		constexpr auto DelayBeforeBreakoutSecs = 0x17c; // float
		constexpr auto BreakoutInputRequiredHoldTime = 0x180; // FGamePropertyFloat
		constexpr auto BreakoutCountPerLevel = 0x1b8; // FGamePropertyInt
		constexpr auto BreakoutCooldownSecs = 0x1f0; // FGamePropertyFloat
		constexpr auto BreakoutTargetGameplayEffects = 0x228; // TArray<UGameplayEffect*>
		constexpr auto BreakoutSelfGameplayEffects = 0x250; // TArray<UGameplayEffect*>
		constexpr auto BreakoutFPAnimMontage = 0x260; // UAnimMontage*
		constexpr auto Breakout3PAnimMontage = 0x268; // UAnimMontage*
		constexpr auto BreakingOutAdditiveMontage = 0x270; // UAnimMontage*
		constexpr auto BreakoutEnabledTags = 0x278; // FGameplayTagContainer
		constexpr auto BreakoutDisablingTags = 0x298; // FGameplayTagContainer
		constexpr auto AKEBreakout = 0x2b8; // UAkAudioEvent*
		constexpr auto GrappledDamageFilter = 0x2c0; // UDamageFilter*
	}

	namespace n_UGameIntensitySystem {
		constexpr auto CombatDecayRate = 0xac; // float
		constexpr auto NonCombatDecayRate = 0xb0; // float
		constexpr auto AdvancingDecayRate = 0xb4; // float
		constexpr auto NumPlayersToAverage = 0xb8; // int32_t
		constexpr auto AggroEnemiesNear = 0xbc; // FHeroIntensityEventData
		constexpr auto SelfDamaged = 0xd0; // FHeroIntensityEventData
		constexpr auto TeammateDamaged = 0xe4; // FHeroIntensityEventData
		constexpr auto TeammateIncapped = 0xf8; // FHeroIntensityEventData
		constexpr auto TeammateDied = 0x10c; // FHeroIntensityEventData
	}

	namespace n_UZombieNameplateManagerUserWidget {
		constexpr auto ADSOpacity = 0x45c; // float
	}

	namespace n_UAnimEvalSet_Shared_HitReaction_UB_Dismember_C {
		constexpr auto Dismembered = 0xc0; // FGameplayEval_Dismembered
		constexpr auto HitBone = 0x118; // FGameplayEval_HitReactionBone
		constexpr auto DamageType = 0x1c8; // FGameplayEval_DamageType
		constexpr auto DamageAmount = 0x288; // FGameplayEval_DamageAmount
		constexpr auto HitReactionHealth = 0x320; // FGameplayEval_HitReactionHealth
		constexpr auto CanRupture = 0x378; // FGameplayEval_CanRupture
	}

	namespace n_ULeaderboardUsableComponent {
		constexpr auto Region = 0x530; // ELeaderboardRegion
	}

	namespace n_UMaterialShaderQualitySettings {
		constexpr auto ForwardSettingMap = 0x30; // TMap<FName, UShaderPlatformQualitySettings*>
	}

	namespace n_UInterpTrackFade {
		constexpr auto bPersistFade = 0x98; // char : 1
		constexpr auto bFadeAudio = 0x98; // char : 1
		constexpr auto FadeColor = 0x9c; // FLinearColor
	}

	namespace n_UAISense_TRSSight {
		constexpr auto MaxTracesPerTick = 0x138; // int32_t
		constexpr auto MinQueriesPerTimeSliceCheck = 0x13c; // int32_t
		constexpr auto MaxTimeSlicePerTick = 0x140; // double
		constexpr auto HighImportanceQueryDistanceThreshold = 0x148; // float
		constexpr auto MaxQueryImportance = 0x150; // float
		constexpr auto SightLimitQueryImportance = 0x154; // float
	}

	namespace n_APVPHoldoutActor {
		constexpr auto DefaultRootComponent = 0x2a0; // USceneComponent*
		constexpr auto bUsePlayAreaVolume = 0x2a8; // bool
		constexpr auto PlayAreaBox = 0x2b0; // UBoxComponent*
		constexpr auto PlayAreaVolume = 0x2b8; // AVolume*
		constexpr auto SafeZoneRoot = 0x2c0; // USceneComponent*
		constexpr auto SafeZoneCollisionCapsule = 0x2c8; // UCapsuleComponent*
		constexpr auto SafeZoneVisibleCylinder = 0x2d0; // UStaticMeshComponent*
		constexpr auto SafeZoneCenterMarker = 0x2d8; // UStaticMeshComponent*
		constexpr auto SafeZoneWallSpline = 0x2e0; // USplineComponent*
		constexpr auto SafeZoneWallAK = 0x2e8; // UAkComponent*
		constexpr auto SafeZoneVisibleCylinderRadiusScale = 0x2f0; // float
		constexpr auto ScenarioComponentTags = 0x2f8; // TArray<FGameplayTag>
		constexpr auto FinalPhaseScenarioComponentTag = 0x308; // FGameplayTag
		constexpr auto CurrentState = 0x310; // EHoldoutState
		constexpr auto StateStartTime = 0x314; // float
		constexpr auto CollapseStateData = 0x318; // FHoldoutCollapseStateData
		constexpr auto HoldoutConfig = 0x448; // UHoldoutConfig*
		constexpr auto InSwarmWarningCooldown = 0x450; // float
		constexpr auto CoachDialogueComp = 0x458; // UDialogueComponent*
	}

	namespace n_USourceEffectBitCrusherPreset {
		constexpr auto Settings = 0x78; // FSourceEffectBitCrusherSettings
	}

	namespace n_UInteractiveTool {
		constexpr auto InputBehaviors = 0x50; // UInputBehaviorSet*
		constexpr auto ToolPropertyObjects = 0x58; // TArray<UObject*>
	}

	namespace n_UEnemyAudioComponent {
		constexpr auto bVocalFreeze = 0x308; // bool
		constexpr auto PossibleSoundCollectionsMale = 0x310; // TArray<USoundCollectionAsset*>
		constexpr auto PossibleSoundCollectionsFemale = 0x320; // TArray<USoundCollectionAsset*>
		constexpr auto VocalizationList = 0x330; // TArray<FName>
		constexpr auto IdleName = 0x350; // FName
		constexpr auto BlightedIdleName = 0x358; // FName
		constexpr auto IdleTimerMinMax = 0x360; // FVector2D
		constexpr auto AggroTimerMinMax = 0x368; // FVector2D
		constexpr auto BlightedIdleTimerMinMax = 0x370; // FVector2D
		constexpr auto BlightedTag = 0x378; // FGameplayTag
		constexpr auto ChanceToPlayGoreSoundWhenHit = 0x3a0; // float
		constexpr auto BloodSprayAudioEvent = 0x3a8; // UAkAudioEvent*
		constexpr auto UtilityStopAllAudioEvent = 0x3b0; // UAkAudioEvent*
		constexpr auto LocalAudioDamageTypeEvents = 0x3b8; // TArray<FAudioDamageTypeEvent>
		constexpr auto DefaultLocalDamageType = 0x3c8; // FGameplayTag
		constexpr auto RemoteAudioDamageTypeEvents = 0x3d0; // TArray<FAudioDamageTypeEvent>
		constexpr auto DefaultRemoteDamageType = 0x3e0; // FGameplayTag
		constexpr auto HurtName = 0x3e8; // FName
		constexpr auto HurtCriticalName = 0x3f0; // FName
		constexpr auto LocalAttackerHitWeakSpotAudioEvents = 0x3f8; // TArray<UAkAudioEvent*>
		constexpr auto LocalAttackerGunHitWeakSpotAudioEvents = 0x408; // UAkAudioEvent*
		constexpr auto RemoteAttackerHitWeakSpotAudioEvent = 0x410; // UAkAudioEvent*
		constexpr auto DeathName = 0x418; // FName
		constexpr auto DelayBeforeOnDeath = 0x420; // float
		constexpr auto ShotgunKillAudioEvent = 0x428; // UAkAudioEvent*
		constexpr auto TagSharedSoundOnDeathMap = 0x430; // TMap<FGameplayTag, FName>
		constexpr auto DebrisDropLightAudioEvent = 0x490; // UAkAudioEvent*
		constexpr auto ChanceToPlayDebrisDropLight = 0x498; // float
		constexpr auto GibBloodLimbAudioEvent = 0x4a0; // UAkAudioEvent*
		constexpr auto GibBloodHeadAudioEvent = 0x4a8; // UAkAudioEvent*
		constexpr auto GibHeadAudioEvent = 0x4b0; // UAkAudioEvent*
		constexpr auto GibLimbAudioEvent = 0x4b8; // UAkAudioEvent*
		constexpr auto bCountTorsoAsHeadless = 0x4c0; // bool
		constexpr auto BodyfallBoneName = 0x4c4; // FName
		constexpr auto BodyfallName = 0x4cc; // FName
		constexpr auto bUseOnHitDuringRagDoll = 0x4d4; // bool
		constexpr auto CenterToOuterThickness = 0x4d8; // float
		constexpr auto BodyfallTimerRate = 0x4dc; // float
		constexpr auto EnemyChangedLocalPlayerName = 0x4f8; // FName
		constexpr auto EnemyChangedName = 0x500; // FName
		constexpr auto ArmorHitAudioEvent = 0x508; // UAkAudioEvent*
		constexpr auto ArmorBreakAudioEvent = 0x510; // UAkAudioEvent*
		constexpr auto WallPounceTell = 0x518; // UAkAudioEvent*
		constexpr auto WallPounceTellRate = 0x520; // float
		constexpr auto AudioBank = 0x528; // UAkAudioBank*
		constexpr auto BeginPreSpawnAudioEvent = 0x530; // UAkAudioEvent*
		constexpr auto BeginPreSpawnMusicEvent = 0x538; // FDataTableRowHandle
		constexpr auto EndPreSpawnAudioEvent = 0x558; // UAkAudioEvent*
		constexpr auto EndPreSpawnMusicEvent = 0x560; // FDataTableRowHandle
		constexpr auto PreSpawnRattleTimerRate = 0x580; // float
		constexpr auto PreSpawnRattleRadius = 0x584; // float
		constexpr auto PreSpawnRattleLocationOffsetRange = 0x588; // FVector2D
		constexpr auto RadiusBarkNearCooldown = 0x5c0; // float
		constexpr auto DelayBetweenBehindTellAndAggro = 0x5c4; // float
		constexpr auto RadiusBarkFarCooldown = 0x5c8; // float
		constexpr auto ChanceToPlayIdleOnEnter = 0x5cc; // float
		constexpr auto bIgnoreIfNotTargetRadius = 0x5d0; // bool
		constexpr auto bEntersFrayDebug = 0x5d1; // bool
		constexpr auto SpawnedAudioEvent = 0x600; // UAkAudioEvent*
		constexpr auto DespawnTag = 0x608; // FGameplayTag
		constexpr auto HitMarkerSlimeTagContainer = 0x620; // FGameplayTagContainer
		constexpr auto HitMarkerSlimeAudioEvent = 0x640; // UAkAudioEvent*
		constexpr auto HitMarkerGoreAudioEvent = 0x648; // UAkAudioEvent*
		constexpr auto HitMarkerMeleeSwtAudioEvent = 0x650; // UAkAudioEvent*
	}

	namespace n_UNiagaraDataInterfaceTexture {
		constexpr auto Texture = 0x38; // UTexture*
	}

	namespace n_UMaterialExpressionSquareRoot {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UCustomCollisionChannelMap {
		constexpr auto CustomCollisionChannelNames = 0x38; // FName [0x4]
	}

	namespace n_UPlayerSettingsSystem {
		constexpr auto OnApplySettings = 0x148; // FMulticastInlineDelegate
		constexpr auto GameInstance = 0x1a0; // UGameInstance*
		constexpr auto GPUSettingsTable = 0x1a8; // UDataTable*
		constexpr auto SettingsVersion = 0x1b8; // int32_t
		constexpr auto bSplitscreenVertical = 0x1bc; // bool
		constexpr auto bPushToTalk = 0x1bd; // bool
		constexpr auto bVoiceEnabled = 0x1be; // bool
		constexpr auto MasterVolume = 0x1c0; // float
		constexpr auto VoiceVolume = 0x1c4; // float
		constexpr auto SFXVolume = 0x1c8; // float
		constexpr auto DialogVolume = 0x1cc; // float
		constexpr auto MusicVolume = 0x1d0; // float
		constexpr auto MicBoost = 0x1d4; // float
		constexpr auto MicThreshold = 0x1d8; // float
		constexpr auto MixProfile = 0x1dc; // FName
		constexpr auto bVOIPSideChainEnabled = 0x1e4; // bool
		constexpr auto bSuppressAudioOnFocusLost = 0x1e5; // bool
		constexpr auto TargetMonitorName = 0x1e8; // FString
		constexpr auto UpscalingMode = 0x1f8; // EUpscalingMode
		constexpr auto AAMode = 0x1f9; // EAAMode
		constexpr auto FSRMode = 0x1fa; // EFSRMode
		constexpr auto DLSSMode = 0x1fb; // EDLSSMode
		constexpr auto FramerateCapMode = 0x1fc; // EFramerateCapMode
		constexpr auto GraphicsQuality = 0x200; // int32_t
		constexpr auto FieldOfView = 0x204; // float
		constexpr auto FOVSettings = 0x208; // FFOVSettings
		constexpr auto FOVConstraint = 0x218; // EFOVConstraint
		constexpr auto LDRBrightness = 0x21c; // float
		constexpr auto LDRContrast = 0x220; // float
		constexpr auto LDRSaturation = 0x224; // float
		constexpr auto HDRBrightness = 0x228; // float
		constexpr auto HDRContrast = 0x22c; // float
		constexpr auto HDRSaturation = 0x230; // float
		constexpr auto bStaticResolutionScaleOverriden = 0x234; // bool
		constexpr auto StaticResolutionScale = 0x238; // float
		constexpr auto TargetFramerate = 0x23c; // float
		constexpr auto MotionBlurMode = 0x240; // EMotionBlurMode
		constexpr auto bCASSharpening = 0x241; // bool
		constexpr auto DLSSSharpening = 0x244; // float
		constexpr auto bFlashlightShadows = 0x248; // bool
		constexpr auto PcHardwareHash = 0x24c; // uint32_t
		constexpr auto PcSettingsHash = 0x250; // uint32_t
		constexpr auto bHasBeenSentSurvey = 0x254; // bool
		constexpr auto SafeZoneScale = 0x258; // float
		constexpr auto bChromaticAberration = 0x25c; // bool
		constexpr auto bAdaptiveFXQualityEnabled = 0x25d; // bool
		constexpr auto StoredHydraId = 0x260; // FString
		constexpr auto LastSurveyDisplayTimestamp = 0x270; // int64_t
		constexpr auto TextLanguageCode = 0x278; // FString
		constexpr auto DialogueLanguageCode = 0x288; // FString
		constexpr auto LastSystemLanguageCode = 0x298; // FString
		constexpr auto AudioOutputDeviceName = 0x2a8; // FString
		constexpr auto AudioInputDeviceName = 0x2b8; // FString
		constexpr auto AudioChannelOverride = 0x2c8; // AkChannelConfiguration
		constexpr auto MuxyGameLinkRefreshToken = 0x2d0; // FString
		constexpr auto DetectedGraphicsQuality = 0x2e0; // int32_t
		constexpr auto DetectedSyntheticBenchmarkQuality = 0x2e4; // int32_t
		constexpr auto bStaminaBreathEnabled = 0x2e8; // bool
	}

	namespace n_UPlayerProfileSettings {
		constexpr auto PublicId = 0x98; // FString
		constexpr auto OfflineData = 0xa8; // FPlayerProfileData
		constexpr auto OnlineDataCache = 0x4b0; // FTU02PlayerProfileData
	}

	namespace n_UAtuinBeacons {
		constexpr auto ResolveTimeoutSeconds = 0x30; // double
		constexpr auto NumResolveThreads = 0x38; // int32_t
		constexpr auto RoundIntervalSeconds = 0x40; // double
		constexpr auto RoundIntervalMinSeconds = 0x48; // double
		constexpr auto DefaultLatencyMilliseconds = 0x50; // double
		constexpr auto Rounds = 0x58; // int32_t
	}

	namespace n_UPacketRelayServerConnectionConfig {
		constexpr auto HeartbeatInterval = 0x30; // double
		constexpr auto TimeoutSeconds = 0x38; // double
	}

	namespace n_UNiagaraPreviewAxis_InterpParamFloat {
		constexpr auto Min = 0x40; // float
		constexpr auto Max = 0x44; // float
	}

	namespace n_UMaterialExpressionFunctionOutput {
		constexpr auto OutputName = 0x48; // FName
		constexpr auto Description = 0x50; // FString
		constexpr auto SortPriority = 0x60; // int32_t
		constexpr auto A = 0x64; // FExpressionInput
		constexpr auto bLastPreviewed = 0x78; // char : 1
		constexpr auto ID = 0x7c; // FGuid
	}

	namespace n_UPlatformCalloutButtonUserWidget {
		constexpr auto bExecutePressReleaseActions = 0x458; // bool
	}

	namespace n_UMaterialExpressionMin {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto ConstA = 0x70; // float
		constexpr auto ConstB = 0x74; // float
	}

	namespace n_UAIPerceptionComponent {
		constexpr auto SensesConfig = 0xe8; // TArray<UAISenseConfig*>
		constexpr auto DominantSense = 0xf8; // UAISense*
		constexpr auto AIOwner = 0x110; // AAIController*
		constexpr auto OnPerceptionUpdated = 0x198; // FMulticastInlineDelegate
		constexpr auto OnTargetPerceptionUpdated = 0x1a8; // FMulticastInlineDelegate
	}

	namespace n_UIntervalGizmo {
		constexpr auto StateTarget = 0x40; // UGizmoTransformChangeStateTarget*
		constexpr auto TransformProxy = 0x58; // UTransformProxy*
		constexpr auto ActiveComponents = 0x60; // TArray<UPrimitiveComponent*>
		constexpr auto ActiveGizmos = 0x70; // TArray<UInteractiveGizmo*>
		constexpr auto AxisYSource = 0x98; // UGizmoComponentAxisSource*
		constexpr auto AxisZSource = 0xa0; // UGizmoComponentAxisSource*
	}

	namespace n_UDatasmithLightComponentTemplate {
		constexpr auto bVisible = 0x38; // char : 1
		constexpr auto CastShadows = 0x3c; // char : 1
		constexpr auto bUseTemperature = 0x3c; // char : 1
		constexpr auto bUseIESBrightness = 0x3c; // char : 1
		constexpr auto Intensity = 0x40; // float
		constexpr auto Temperature = 0x44; // float
		constexpr auto IESBrightnessScale = 0x48; // float
		constexpr auto LightColor = 0x4c; // FLinearColor
		constexpr auto LightFunctionMaterial = 0x60; // UMaterialInterface*
		constexpr auto IESTexture = 0x68; // UTextureLightProfile*
	}

	namespace n_UClothConfigNv {
		constexpr auto ClothingWindMethod = 0x30; // EClothingWindMethodNv
		constexpr auto VerticalConstraint = 0x34; // FClothConstraintSetupNv
		constexpr auto HorizontalConstraint = 0x44; // FClothConstraintSetupNv
		constexpr auto BendConstraint = 0x54; // FClothConstraintSetupNv
		constexpr auto ShearConstraint = 0x64; // FClothConstraintSetupNv
		constexpr auto SelfCollisionRadius = 0x74; // float
		constexpr auto SelfCollisionStiffness = 0x78; // float
		constexpr auto SelfCollisionCullScale = 0x7c; // float
		constexpr auto Damping = 0x80; // FVector
		constexpr auto Friction = 0x8c; // float
		constexpr auto WindDragCoefficient = 0x90; // float
		constexpr auto WindLiftCoefficient = 0x94; // float
		constexpr auto LinearDrag = 0x98; // FVector
		constexpr auto AngularDrag = 0xa4; // FVector
		constexpr auto LinearInertiaScale = 0xb0; // FVector
		constexpr auto AngularInertiaScale = 0xbc; // FVector
		constexpr auto CentrifugalInertiaScale = 0xc8; // FVector
		constexpr auto SolverFrequency = 0xd4; // float
		constexpr auto StiffnessFrequency = 0xd8; // float
		constexpr auto GravityScale = 0xdc; // float
		constexpr auto GravityOverride = 0xe0; // FVector
		constexpr auto bUseGravityOverride = 0xec; // bool
		constexpr auto TetherStiffness = 0xf0; // float
		constexpr auto TetherLimit = 0xf4; // float
		constexpr auto CollisionThickness = 0xf8; // float
		constexpr auto AnimDriveSpringStiffness = 0xfc; // float
		constexpr auto AnimDriveDamperStiffness = 0x100; // float
		constexpr auto WindMethod = 0x104; // EClothingWindMethod_Legacy
		constexpr auto VerticalConstraintConfig = 0x108; // FClothConstraintSetup_Legacy
		constexpr auto HorizontalConstraintConfig = 0x118; // FClothConstraintSetup_Legacy
		constexpr auto BendConstraintConfig = 0x128; // FClothConstraintSetup_Legacy
		constexpr auto ShearConstraintConfig = 0x138; // FClothConstraintSetup_Legacy
	}

	namespace n_ABaseGun_BP_C {
		constexpr auto ADSSightStaticMesh_1P = 0x4d0; // UFPRigStaticMeshComponent*
		constexpr auto HipSightStaticMesh_1P = 0x4d8; // UFPRigStaticMeshComponent*
		constexpr auto BarrelStaticMesh_1P = 0x4e0; // UFPRigStaticMeshComponent*
		constexpr auto BaseSkeletalMesh_1P = 0x4e8; // UFPRigSkeletalMeshComponent*
		constexpr auto GameplayEffects = 0x4f0; // UGameplayEffectsComponent*
		constexpr auto LaserSight = 0x4f8; // ULaserSightComponent*
		constexpr auto WeaponAttachment = 0x500; // UWeaponAttachmentComponent*
	}

	namespace n_UChallengeMonitorComponent {
		constexpr auto OnChallengeSuccess = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnChallengeFailure = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnChallengeObjectivesUpdated = 0x108; // FMulticastInlineDelegate
		constexpr auto bGauntlet = 0x118; // bool
		constexpr auto ChallengeIndex = 0x11c; // FChallengeIndexPair
		constexpr auto ObjectiveTrackers = 0x130; // TArray<UChallengeObjectiveTracker*>
	}

	namespace n_UPhysPropComponent {
		constexpr auto MeshSwapOnImpulse = 0x118; // UStaticMesh*
		constexpr auto SpawnAdditionalMeshesOnDeath = 0x120; // TArray<UStaticMesh*>
		constexpr auto SpawnedMeshCollisionProfile = 0x130; // FCollisionProfileName
		constexpr auto bDeleteOnImpulse = 0x138; // bool
		constexpr auto DeletionDelay = 0x13c; // float
		constexpr auto bActivateParticleOnFirstImpulseOnly = 0x140; // bool
		constexpr auto BounceAudioEvent = 0x148; // UAkAudioEvent*
		constexpr auto BaseMeshDestructionAudioEvent = 0x150; // UAkAudioEvent*
		constexpr auto MinSpeedForBounceAudio = 0x158; // float
		constexpr auto BounceCooldown = 0x15c; // float
		constexpr auto bSingleImpactSound = 0x164; // bool
		constexpr auto LinearStrengthScale = 0x168; // float
		constexpr auto LinearStrengthBias = 0x16c; // float
		constexpr auto RadialStrengthScale = 0x170; // float
		constexpr auto RadialStrengthBias = 0x174; // float
	}

	namespace n_UAISpawnDeckGeneratorMod {
		constexpr auto SpawnCardRulesToAdd = 0xd0; // TArray<FAISpawnCardRule>
		constexpr auto SpawnCardRemovalTagQuery = 0xe0; // FGameplayTagQuery
		constexpr auto SpawnDeckGeneratorsToAdd = 0x128; // TArray<UAISpawnDeckGenerator*>
		constexpr auto SpawnDeckTagsToAdd = 0x138; // FGameplayTagContainer
		constexpr auto bUseTargetDeckTagQuery = 0x158; // bool
		constexpr auto TargetDeckTagQuery = 0x160; // FGameplayTagQuery
	}

	namespace n_UInAppPurchaseRestoreCallbackProxy {
		constexpr auto OnSuccess = 0x30; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UAnimContext_NavPathNode {
		constexpr auto NodeIndex = 0x90; // int32_t
	}

	namespace n_UHalfSpaceComponent {
		constexpr auto HalfSpaces = 0x4b0; // TArray<FRotator>
	}

	namespace n_UAnimationSettings {
		constexpr auto CompressCommandletVersion = 0x40; // int32_t
		constexpr auto KeyEndEffectorsMatchNameArray = 0x48; // TArray<FString>
		constexpr auto ForceRecompression = 0x58; // bool
		constexpr auto bOnlyCheckForMissingSkeletalMeshes = 0x59; // bool
		constexpr auto bForceBelowThreshold = 0x5a; // bool
		constexpr auto bFirstRecompressUsingCurrentOrDefault = 0x5b; // bool
		constexpr auto bRaiseMaxErrorToExisting = 0x5c; // bool
		constexpr auto bEnablePerformanceLog = 0x5d; // bool
		constexpr auto bStripAnimationDataOnDedicatedServer = 0x5e; // bool
		constexpr auto bTickAnimationOnSkeletalMeshInit = 0x5f; // bool
	}

	namespace n_UParticleModuleVelocityCone {
		constexpr auto Angle = 0x40; // FRawDistributionFloat
		constexpr auto Velocity = 0x70; // FRawDistributionFloat
		constexpr auto Direction = 0xa0; // FVector
	}

	namespace n_UEnvQueryTest_CheckGameplayTags {
		constexpr auto TagQuery = 0x208; // FAIDataProviderGameplayTagQueryContainerValue
		constexpr auto bUseTagQuery = 0x280; // bool
		constexpr auto TagsToCheck = 0x288; // FAIDataProviderGameplayTagContainerValue
		constexpr auto DefaultCheckOption = 0x2d8; // EGameplayContainerMatchType
		constexpr auto CheckOption = 0x2e0; // FAIDataProviderIntValue
	}

	namespace n_UMovieSceneFolder {
		constexpr auto FolderName = 0x30; // FName
		constexpr auto ChildFolders = 0x38; // TArray<UMovieSceneFolder*>
		constexpr auto ChildMasterTracks = 0x48; // TArray<UMovieSceneTrack*>
		constexpr auto ChildObjectBindingStrings = 0x58; // TArray<FString>
	}

	namespace n_UItemAnimationDataComponent {
		constexpr auto WeaponAnimationConfig = 0x160; // FWeaponAnimationConfig
		constexpr auto FirstPersonLocomotionAnimInstance = 0x180; // UAnimInstance*
		constexpr auto FirstPersonAdditiveAnimInstance = 0x188; // UAnimInstance*
		constexpr auto FirstPersonPostProcessAnimInstance = 0x190; // UAnimInstance*
		constexpr auto FirstPersonMantleMontages = 0x198; // TArray<UAnimMontage*>
		constexpr auto ThirdPersonAnimationStance = 0x1a8; // FGameplayTag
		constexpr auto ThirdPersonGrabItemMontageSet = 0x1b0; // UMontageSet*
		constexpr auto ItemAnimationDataTuning = 0x1b8; // FItemAnimationDataTuning
	}

	namespace n_USplineBasedPlacementComp {
		constexpr auto SplineCompTag = 0x168; // FGameplayTag
		constexpr auto SegmentStartIndex = 0x170; // int32_t
		constexpr auto SegmentEndIndex = 0x174; // int32_t
		constexpr auto DistanceInterval = 0x178; // float
		constexpr auto CornerSpacing = 0x17c; // float
		constexpr auto InheritSplineRotation = 0x180; // bool
		constexpr auto bInheritSplineYawRotation = 0x181; // bool
	}

	namespace n_UNiagaraDataInterfaceAudioSubmix {
		constexpr auto Submix = 0x38; // USoundSubmix*
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureOutput {
		constexpr auto BaseColor = 0x48; // FExpressionInput
		constexpr auto Specular = 0x5c; // FExpressionInput
		constexpr auto Roughness = 0x70; // FExpressionInput
		constexpr auto Normal = 0x84; // FExpressionInput
		constexpr auto WorldHeight = 0x98; // FExpressionInput
		constexpr auto Opacity = 0xac; // FExpressionInput
		constexpr auto Mask = 0xc0; // FExpressionInput
	}

	namespace n_UScrollBox {
		constexpr auto WidgetStyle = 0x160; // FScrollBoxStyle
		constexpr auto WidgetBarStyle = 0x3a8; // FScrollBarStyle
		constexpr auto Style = 0x8c0; // USlateWidgetStyleAsset*
		constexpr auto BarStyle = 0x8c8; // USlateWidgetStyleAsset*
		constexpr auto Orientation = 0x8d0; // EOrientation
		constexpr auto ScrollBarVisibility = 0x8d1; // ESlateVisibility
		constexpr auto ConsumeMouseWheel = 0x8d2; // EConsumeMouseWheel
		constexpr auto ScrollbarThickness = 0x8d4; // FVector2D
		constexpr auto ScrollbarPadding = 0x8dc; // FMargin
		constexpr auto AlwaysShowScrollbar = 0x8ec; // bool
		constexpr auto AlwaysShowScrollbarTrack = 0x8ed; // bool
		constexpr auto bScrollBarHasSizeWhenNotInUse = 0x8ee; // bool
		constexpr auto bHandleNavigation = 0x8ef; // bool
		constexpr auto AllowOverscroll = 0x8f0; // bool
		constexpr auto bAnimateWheelScrolling = 0x8f1; // bool
		constexpr auto NavigationDestination = 0x8f2; // EDescendantScrollDestination
		constexpr auto NavigationScrollPadding = 0x8f4; // float
		constexpr auto ScrollWhenFocusChanges = 0x8f8; // EScrollWhenFocusChanges
		constexpr auto bAllowRightClickDragScrolling = 0x8f9; // bool
		constexpr auto WheelScrollMultiplier = 0x8fc; // float
		constexpr auto ChildSpacing = 0x900; // float
		constexpr auto ScrollAnimationSpeed = 0x904; // float
		constexpr auto OnUserScrolled = 0x908; // FMulticastInlineDelegate
	}

	namespace n_UDistributionVectorConstantCurve {
		constexpr auto ConstantCurve = 0x40; // FInterpCurveVector
		constexpr auto bLockAxes = 0x58; // char : 1
		constexpr auto LockedAxes = 0x5c; // EDistributionVectorLockFlags
	}

	namespace n_UBTService_TacticalSensor {
		constexpr auto AllowSensorTagQuery = 0x78; // FGameplayTagQuery
	}

	namespace n_UAnimNotify_PauseResumeAI {
		constexpr auto Mode = 0x40; // EAIPauseResume
		constexpr auto Reason = 0x48; // FString
	}

	namespace n_UMeshMaterialParamsTrait {
		constexpr auto MaterialParamSet = 0x30; // UMeshMaterialParamSet*
	}

	namespace n_UBTDecorator_IsBBEntryOfClass {
		constexpr auto TestClass = 0x98; // UObject*
	}

	namespace n_UMaterialExpressionDepthOfFieldFunction {
		constexpr auto FunctionValue = 0x48; // EDepthOfFieldFunctionValue
		constexpr auto Depth = 0x4c; // FExpressionInput
	}

	namespace n_AFoliageDensityVolume {
		constexpr auto DensityScale = 0x2d8; // TMap<EQualitySettings, float>
		constexpr auto LODDistanceScale = 0x328; // TMap<EQualitySettings, float>
	}

	namespace n_AWindDirectionalSource {
		constexpr auto Component = 0x2a0; // UWindDirectionalSourceComponent*
	}

	namespace n_UMovieSceneSection {
		constexpr auto EvalOptions = 0x58; // FMovieSceneSectionEvalOptions
		constexpr auto Easing = 0x60; // FMovieSceneEasingSettings
		constexpr auto SectionRange = 0x98; // FMovieSceneFrameRange
		constexpr auto PreRollFrames = 0xa8; // FFrameNumber
		constexpr auto PostRollFrames = 0xac; // FFrameNumber
		constexpr auto RowIndex = 0xb0; // int32_t
		constexpr auto OverlapPriority = 0xb4; // int32_t
		constexpr auto bIsActive = 0xb8; // char : 1
		constexpr auto bIsLocked = 0xb8; // char : 1
		constexpr auto StartTime = 0xbc; // float
		constexpr auto EndTime = 0xc0; // float
		constexpr auto PrerollTime = 0xc4; // float
		constexpr auto PostrollTime = 0xc8; // float
		constexpr auto bIsInfinite = 0xcc; // char : 1
		constexpr auto bSupportsInfiniteRange = 0xd0; // bool
		constexpr auto BlendType = 0xd1; // FOptionalMovieSceneBlendType
	}

	namespace n_UNiagaraSimulationStageGeneric {
		constexpr auto IterationSource = 0x40; // ENiagaraIterationSource
		constexpr auto Iterations = 0x44; // int32_t
		constexpr auto bSpawnOnly = 0x48; // char : 1
		constexpr auto DataInterface = 0x50; // FNiagaraVariableDataInterfaceBinding
	}

	namespace n_ASceneCaptureCube {
		constexpr auto CaptureComponentCube = 0x2b0; // USceneCaptureComponentCube*
	}

	namespace n_UFP_Hero_ABP_C {
		constexpr auto UberGraphFrame = 0x620; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x628; // FAnimNode_Root
		constexpr auto AnimGraphNode_SaveCachedPose_4 = 0x658; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_Slot_4 = 0x710; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_9 = 0x758; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_3 = 0x780; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_8 = 0x838; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x860; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_3 = 0x918; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_Slot_3 = 0x9d8; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0xa20; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_2 = 0xa48; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0xb08; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_CopyBone_3 = 0xb30; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0xc20; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0xc40; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_2 = 0xc68; // FAnimNode_Slot
		constexpr auto AnimGraphNode_TwoWayBlend_2 = 0xcb0; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_ModifyBone_3 = 0xd78; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_CopyBone_2 = 0xe80; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_ModifyBone_2 = 0xf70; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ModifyBone = 0x1078; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_CopyBone = 0x1180; // FAnimNode_CopyBone
		constexpr auto __CustomProperty_LadderState_0F3C9E314B0681E014F6469FACBD79E6 = 0x1270; // FLadderAnimStateFP
		constexpr auto __CustomProperty_GobiAnimState_0F3C9E314B0681E014F6469FACBD79E6 = 0x1280; // FGobiAnimationState
		constexpr auto __CustomProperty_FirstPersonAnimations_0F3C9E314B0681E014F6469FACBD79E6 = 0x12d8; // FWeaponAnimsFP
		constexpr auto __CustomProperty_HeroAnimState_0F3C9E314B0681E014F6469FACBD79E6 = 0x1318; // FHeroAnimStateFP
		constexpr auto __CustomProperty_WeaponAnimState_0F3C9E314B0681E014F6469FACBD79E6 = 0x1344; // FWeaponAnimState
		constexpr auto AnimGraphNode_SubInstance_2 = 0x1388; // FAnimNode_LinkedAnimGraph
		constexpr auto __CustomProperty_HeroAnimState_1B081B93442EDF417CAAFAA777A2C1DE = 0x1430; // FHeroAnimStateFP
		constexpr auto __CustomProperty_FirstPersonAnimations_1B081B93442EDF417CAAFAA777A2C1DE = 0x1460; // FWeaponAnimsFP
		constexpr auto __CustomProperty_AdditiveState_1B081B93442EDF417CAAFAA777A2C1DE = 0x14a0; // FFirstPersonAdditiveState
		constexpr auto __CustomProperty_GobiAnimationState_1B081B93442EDF417CAAFAA777A2C1DE = 0x1510; // FGobiAnimationState
		constexpr auto __CustomProperty_WeaponAnimState_1B081B93442EDF417CAAFAA777A2C1DE = 0x1568; // FWeaponAnimState
		constexpr auto AnimGraphNode_SubInstance = 0x15b0; // FAnimNode_LinkedAnimGraph
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x1658; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_TwoWayBlend = 0x1680; // FAnimNode_TwoWayBlend
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x1748; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LinkedAnimGraph = 0x1770; // FAnimNode_LinkedAnimGraph
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0x1818; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_Slot = 0x1838; // FAnimNode_Slot
		constexpr auto AnimGraphNode_BlendListByBool = 0x1880; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_Inertialization = 0x1920; // FAnimNode_Inertialization
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0x1990; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_SaveCachedPose = 0x1a50; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x1b08; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose = 0x1b30; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SequencePlayer = 0x1b58; // FAnimNode_SequencePlayer
	}

	namespace n_UMaterialExpressionSkyAtmosphereAerialPerspective {
		constexpr auto WorldPosition = 0x48; // FExpressionInput
	}

	namespace n_UGameplayEffectBulletPenetrationComponent {
		constexpr auto BulletPenetrationScaleMod = 0x250; // FGamePropertyFloatMod
	}

	namespace n_UMaterialExpressionSaturate {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UBTDecorator_CheckGameplayTagsOnActor {
		constexpr auto ActorToCheck = 0x70; // FBlackboardKeySelector
		constexpr auto bUseDataProvider = 0x98; // bool
		constexpr auto TagsToMatch = 0x99; // EGameplayContainerMatchType
		constexpr auto GameplayTags = 0xa0; // FGameplayTagContainer
		constexpr auto GameplayTags_DataProvider = 0xc0; // FAIDataProviderGameplayTagQueryContainerValue
		constexpr auto CachedDescription = 0x138; // FString
	}

	namespace n_UZombieMutationProgressUserWidget {
		constexpr auto MutationIcon = 0x458; // UImage*
		constexpr auto BranchText = 0x460; // UTextBlock*
		constexpr auto CostText = 0x468; // UTextBlock*
		constexpr auto DescriptionText = 0x470; // UTextBlock*
		constexpr auto CostContainer = 0x478; // UHorizontalBox*
		constexpr auto PreviewRadial = 0x480; // UCircularProgressBarUserWidget*
		constexpr auto ProgressRadial = 0x488; // UCircularProgressBarUserWidget*
		constexpr auto MutationPointsFormatText = 0x490; // FText
		constexpr auto ProgressAnimDuration = 0x4a8; // float
	}

	namespace n_UMovieSceneGeometryCacheTrack {
		constexpr auto AnimationSections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UParticleLODLevel {
		constexpr auto Level = 0x30; // int32_t
		constexpr auto bEnabled = 0x34; // char : 1
		constexpr auto RequiredModule = 0x38; // UParticleModuleRequired*
		constexpr auto Modules = 0x40; // TArray<UParticleModule*>
		constexpr auto TypeDataModule = 0x50; // UParticleModuleTypeDataBase*
		constexpr auto SpawnModule = 0x58; // UParticleModuleSpawn*
		constexpr auto EventGenerator = 0x60; // UParticleModuleEventGenerator*
		constexpr auto SpawningModules = 0x68; // TArray<UParticleModuleSpawnBase*>
		constexpr auto SpawnModules = 0x78; // TArray<UParticleModule*>
		constexpr auto UpdateModules = 0x88; // TArray<UParticleModule*>
		constexpr auto OrbitModules = 0x98; // TArray<UParticleModuleOrbit*>
		constexpr auto EventReceiverModules = 0xa8; // TArray<UParticleModuleEventReceiverBase*>
		constexpr auto ConvertedModules = 0xb8; // char : 1
		constexpr auto PeakActiveParticles = 0xbc; // int32_t
	}

	namespace n_USkeletalMeshSimulationComponent {
		constexpr auto PhysicalMaterial = 0xf0; // UChaosPhysicalMaterial*
		constexpr auto ChaosSolverActor = 0xf8; // AChaosSolverActor*
		constexpr auto OverridePhysicsAsset = 0x100; // UPhysicsAsset*
		constexpr auto bSimulating = 0x108; // bool
		constexpr auto bNotifyCollisions = 0x109; // bool
		constexpr auto ObjectType = 0x10a; // EObjectStateTypeEnum
		constexpr auto Density = 0x10c; // float
		constexpr auto MinMass = 0x110; // float
		constexpr auto MaxMass = 0x114; // float
		constexpr auto CollisionType = 0x118; // ECollisionTypeEnum
		constexpr auto ImplicitShapeParticlesPerUnitArea = 0x11c; // float
		constexpr auto ImplicitShapeMinNumParticles = 0x120; // int32_t
		constexpr auto ImplicitShapeMaxNumParticles = 0x124; // int32_t
		constexpr auto MinLevelSetResolution = 0x128; // int32_t
		constexpr auto MaxLevelSetResolution = 0x12c; // int32_t
		constexpr auto CollisionGroup = 0x130; // int32_t
		constexpr auto InitialVelocityType = 0x134; // EInitialVelocityTypeEnum
		constexpr auto InitialLinearVelocity = 0x138; // FVector
		constexpr auto InitialAngularVelocity = 0x144; // FVector
		constexpr auto OnChaosPhysicsCollision = 0x150; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionAbs {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_UNavMeshBasedPlacementComp {
		constexpr auto ShapeCompTag = 0x168; // FGameplayTag
		constexpr auto ExclusionShapeCompTag = 0x170; // FGameplayTag
		constexpr auto SupportedNavmesh = 0x178; // FNavAgentSelector
		constexpr auto QueryFilter = 0x180; // UNavigationQueryFilter*
		constexpr auto SeparationDistance = 0x188; // float
	}

	namespace n_USpinBoxWidgetStyle {
		constexpr auto SpinBoxStyle = 0x38; // FSpinBoxStyle
	}

	namespace n_UBoneMapComponent {
		constexpr auto BoneMap = 0xe8; // TMap<FGameplayTag, FBoneCollection>
	}

	namespace n_UMaterialExpressionLightmassReplace {
		constexpr auto Realtime = 0x48; // FExpressionInput
		constexpr auto Lightmass = 0x5c; // FExpressionInput
	}

	namespace n_AMaterialInstanceActor {
		constexpr auto TargetActors = 0x2a0; // TArray<AActor*>
	}

	namespace n_UFireModeSingleTraceComponent {
		constexpr auto FireModeSingleTraceTuning = 0x798; // FFireModeSingleTraceTuning
	}

	namespace n_UNiagaraDataInterfaceAudioOscilloscope {
		constexpr auto Submix = 0x38; // USoundSubmix*
		constexpr auto Resolution = 0x40; // int32_t
		constexpr auto ScopeInMilliseconds = 0x44; // float
	}

	namespace n_UGizmoRectangleComponent {
		constexpr auto DirectionX = 0x4d0; // FVector
		constexpr auto DirectionY = 0x4dc; // FVector
		constexpr auto OffsetX = 0x4e8; // float
		constexpr auto OffsetY = 0x4ec; // float
		constexpr auto LengthX = 0x4f0; // float
		constexpr auto LengthY = 0x4f4; // float
		constexpr auto Thickness = 0x4f8; // float
		constexpr auto SegmentFlags = 0x4fc; // char
	}

	namespace n_APlayerState {
		constexpr auto Score = 0x2a0; // float
		constexpr auto PlayerId = 0x2a4; // int32_t
		constexpr auto Ping = 0x2a8; // char
		constexpr auto bShouldUpdateReplicatedPing = 0x2aa; // char : 1
		constexpr auto bIsSpectator = 0x2aa; // char : 1
		constexpr auto bOnlySpectator = 0x2aa; // char : 1
		constexpr auto bIsABot = 0x2aa; // char : 1
		constexpr auto bIsInactive = 0x2aa; // char : 1
		constexpr auto bFromPreviousLevel = 0x2aa; // char : 1
		constexpr auto StartTime = 0x2ac; // int32_t
		constexpr auto EngineMessageClass = 0x2b0; // ULocalMessage*
		constexpr auto SavedNetworkAddress = 0x2c0; // FString
		constexpr auto UniqueId = 0x2d0; // FUniqueNetIdRepl
		constexpr auto PawnPrivate = 0x300; // APawn*
		constexpr auto PlayerNamePrivate = 0x380; // FString
	}

	namespace n_UArrowComponent {
		constexpr auto ArrowColor = 0x4b0; // FColor
		constexpr auto ArrowSize = 0x4b4; // float
		constexpr auto ScreenSize = 0x4b8; // float
		constexpr auto bIsScreenSizeScaled = 0x4bc; // char : 1
		constexpr auto bTreatAsASprite = 0x4bc; // char : 1
	}

	namespace n_UGeometryCollection {
		constexpr auto Materials = 0x38; // TArray<UMaterialInterface*>
		constexpr auto CollisionType = 0x48; // ECollisionTypeEnum
		constexpr auto ImplicitType = 0x49; // EImplicitTypeEnum
		constexpr auto MinLevelSetResolution = 0x4c; // int32_t
		constexpr auto MaxLevelSetResolution = 0x50; // int32_t
		constexpr auto MinClusterLevelSetResolution = 0x54; // int32_t
		constexpr auto MaxClusterLevelSetResolution = 0x58; // int32_t
		constexpr auto CollisionObjectReductionPercentage = 0x5c; // float
		constexpr auto bMassAsDensity = 0x60; // bool
		constexpr auto Mass = 0x64; // float
		constexpr auto MinimumMassClamp = 0x68; // float
		constexpr auto CollisionParticlesFraction = 0x6c; // float
		constexpr auto MaximumCollisionParticles = 0x70; // int32_t
		constexpr auto SizeSpecificData = 0x78; // TArray<FGeometryCollectionSizeSpecificData>
		constexpr auto EnableRemovePiecesOnFracture = 0x88; // bool
		constexpr auto RemoveOnFractureMaterials = 0x90; // TArray<UMaterialInterface*>
		constexpr auto PersistentGuid = 0xa0; // FGuid
		constexpr auto StateGuid = 0xb0; // FGuid
		constexpr auto BoneSelectedMaterialIndex = 0xc0; // int32_t
	}

	namespace n_UDynamicSequenceBindingComponent {
		constexpr auto LevelSequenceActor = 0xe8; // ALevelSequenceActor*
		constexpr auto BoundActorAppliedTags = 0xf0; // FGameplayTagContainer
	}

	namespace n_UWaterSurfaceComponent {
		constexpr auto CubemapOverride = 0x230; // UTextureCube*
		constexpr auto SecondaryLayer = 0x240; // bool
		constexpr auto WaterSim = 0x248; // UWaterSimulation*
	}

	namespace n_APhysicsThruster {
		constexpr auto ThrusterComponent = 0x2a0; // UPhysicsThrusterComponent*
	}

	namespace n_ASocialSpacePlayerState {
		constexpr auto LeaverPenalties = 0x830; // FPlayerStateLeaverPenalties
	}

	namespace n_UPlatformCalloutButton_WBP_C {
		constexpr auto UberGraphFrame = 0x460; // FPointerToUberGraphFrame
		constexpr auto BG = 0x468; // UImage*
		constexpr auto BGContainer = 0x470; // UOverlay*
		constexpr auto BGHover_A = 0x478; // UImage*
		constexpr auto CalloutImage = 0x480; // UPlatformCalloutImage_WBP_C*
		constexpr auto CalloutText = 0x488; // UBaseTextBlock_C*
		constexpr auto Frame = 0x490; // UImage*
		constexpr auto HBox = 0x498; // UHorizontalBox*
		constexpr auto HoverContainer_B = 0x4a0; // UOverlay*
		constexpr auto Text = 0x4a8; // FText
		constexpr auto Action = 0x4c0; // FName
		constexpr auto TextColor = 0x4c8; // FSlateColor
		constexpr auto TextFont = 0x4f8; // FSlateFontInfo
		constexpr auto bShowBackground = 0x558; // bool
		constexpr auto bImageOnRight = 0x559; // bool
		constexpr auto bShowGamepad = 0x55a; // bool
		constexpr auto bShowKey = 0x55b; // bool
		constexpr auto GamepadVisibility = 0x55c; // ESlateVisibility
		constexpr auto KeyVisibility = 0x55d; // ESlateVisibility
		constexpr auto bEnableVisibilityToggles = 0x55e; // bool
	}

	namespace n_UTRSSubtitlePluginSettings {
		constexpr auto SubtitleWidgetClass = 0x40; // TSoftClassPtr<UObject>
	}

	namespace n_UParticleModuleMeshRotation_Seeded {
		constexpr auto RandomSeedInfo = 0x88; // FParticleRandomSeedInfo
	}

	namespace n_APointLight {
		constexpr auto PointLightComponent = 0x2b0; // UPointLightComponent*
	}

	namespace n_USubtitleListUserWidget {
		constexpr auto SubtitleClass = 0x458; // UGobiUserWidget*
		constexpr auto MaxSubtitles = 0x460; // int32_t
		constexpr auto DefaultDisplayTime = 0x464; // float
		constexpr auto SpeakerTextFormat = 0x468; // FText
		constexpr auto CurrentSubtitles = 0x480; // TArray<FSubtitleWidgetList>
		constexpr auto MaxEntries = 0x490; // int32_t
	}

	namespace n_UHealthMaterialModifier {
		constexpr auto MeshTag = 0xe8; // FGameplayTag
		constexpr auto Modifier = 0xf0; // FMeshMaterialParamValueMapper
		constexpr auto SkeletalMesh = 0x118; // USkeletalMeshComponent*
		constexpr auto HealthComponent = 0x120; // UHealthComponent*
	}

	namespace n_ATurretGobiSwitchActor {
		constexpr auto FlameTurretFilled = 0x308; // FMulticastInlineDelegate
		constexpr auto FlameJet = 0x328; // UParticleSystemComponent*
		constexpr auto PilotLight = 0x330; // UParticleSystemComponent*
		constexpr auto DamageVolume = 0x338; // UBoxComponent*
		constexpr auto EffectClass = 0x340; // TArray<UGameplayEffect*>
		constexpr auto DamageType = 0x350; // UGobiDamageType*
		constexpr auto TurretDamageCooldown = 0x358; // float
		constexpr auto DeactivateFireCooldown = 0x35c; // float
		constexpr auto AboveMinHealthDamageModifier = 0x360; // float
		constexpr auto BelowMinHealthDamageModifier = 0x364; // float
		constexpr auto MinHealthModifierThreshold = 0x368; // float
	}

	namespace n_UMissionsCompletedAchievement {
		constexpr auto Maps = 0xb8; // TArray<FDataTableRowHandle>
		constexpr auto Difficulties = 0xc8; // TArray<EMissionDifficulty>
	}

	namespace n_UTraitsComponent {
		constexpr auto OnTraitsAppliedDynamic = 0x100; // FMulticastInlineDelegate
		constexpr auto TraitMap = 0x140; // TArray<FTraitMapping>
		constexpr auto AppliedTraitCollections = 0x150; // TArray<UTraitCollection*>
		constexpr auto Replicated_AppliedTraitCollections = 0x160; // TArray<UTraitCollection*>
		constexpr auto SingularTraitMap = 0x170; // TArray<FSingularTraitMapping>
		constexpr auto AppliedSingularTraits = 0x180; // TArray<UTrait*>
		constexpr auto Replicated_AppliedSingularTraits = 0x190; // TArray<UTrait*>
		constexpr auto RandomSeed = 0x1a0; // int32_t
	}

	namespace n_UChallengeObjectivePlayerSlotTracker {
		constexpr auto SlotsToWatch = 0x48; // EGobiTeam
	}

	namespace n_USuicideComponent {
		constexpr auto OnSuicideCookStarted = 0x1d8; // FMulticastInlineDelegate
		constexpr auto OnSuicideCookEnded = 0x1e8; // FMulticastInlineDelegate
		constexpr auto SuicideConfig = 0x218; // FSuicideConfig
		constexpr auto MovementComponent = 0x350; // UGobiCharacterMovementComponent*
	}

	namespace n_UPostRoundReadyButtonUserWidget {
		constexpr auto ReadyPips = 0x458; // UHorizontalBox*
		constexpr auto PvPReadyPips = 0x460; // UHorizontalBox*
		constexpr auto ReadyPipSpacer = 0x468; // USpacer*
	}

	namespace n_UAISenseConfig_Watched {
		constexpr auto Implementation = 0x50; // UAISense_Watched*
		constexpr auto WarnTargetNearbyRadius = 0x58; // float
		constexpr auto WarnTargetLoseNearbyRadius = 0x5c; // float
		constexpr auto WatchedRadius = 0x60; // float
		constexpr auto WatchedAngleDegrees = 0x64; // float
		constexpr auto ListenerSizeRadiusMultModifier = 0x68; // float
		constexpr auto ListenerSizeRadiusMinimum = 0x6c; // float
		constexpr auto GlobalWatchTimeLimitMS = 0x70; // float
		constexpr auto IndividualAggroWatchTimeLimitMS = 0x74; // float
		constexpr auto IndividualAlertWatchTimeLimitMS = 0x78; // float
		constexpr auto CenterNoiseOffsetDist = 0x7c; // float
		constexpr auto ApplyListenerEffectOnWatched = 0x80; // UGameplayEffect*
		constexpr auto ApplyListenerEffectOnCenterWatched = 0x88; // UGameplayEffect*
		constexpr auto DetectionByAffiliation = 0x90; // FAISenseAffiliationFilter
		constexpr auto bResetIndividualTimersOnLookaway = 0x94; // char : 1
		constexpr auto bResetGlobalTimerOnLookaway = 0x94; // char : 1
		constexpr auto bCenterWatchRequiresFlashlight = 0x94; // char : 1
	}

	namespace n_UNiagaraDataInterfaceCamera {
		constexpr auto PlayerControllerIndex = 0x38; // int32_t
	}

	namespace n_ATRSAssociativePlane {
		constexpr auto PlaneModel = 0x370; // UModel*
		constexpr auto PlaneBrushComponent = 0x378; // UBrushComponent*
		constexpr auto bAutomaticAssociationBounds = 0x3a0; // bool
		constexpr auto AssociationBoundsWidth = 0x3a4; // float
		constexpr auto Version = 0x3a8; // EAssociativePlaneVersion
	}

	namespace n_UNiagaraDataInterfaceCurveBase {
		constexpr auto ShaderLUT = 0x38; // TArray<float>
		constexpr auto LUTMinTime = 0x48; // float
		constexpr auto LUTMaxTime = 0x4c; // float
		constexpr auto LUTInvTimeRange = 0x50; // float
		constexpr auto LUTNumSamplesMinusOne = 0x54; // float
		constexpr auto bUseLUT = 0x58; // char : 1
	}

	namespace n_UPanelSlot {
		constexpr auto Parent = 0x30; // UPanelWidget*
		constexpr auto Content = 0x38; // UWidget*
	}

	namespace n_UAkDurationCallbackInfo {
		constexpr auto Duration = 0x40; // float
		constexpr auto EstimatedDuration = 0x44; // float
		constexpr auto AudioNodeID = 0x48; // int32_t
		constexpr auto MediaID = 0x4c; // int32_t
		constexpr auto bStreaming = 0x50; // bool
	}

	namespace n_UAimAssistTargetComponent {
		constexpr auto bStartRegistered = 0x150; // bool
		constexpr auto MagnetismScale = 0x154; // float
		constexpr auto FrictionScale = 0x158; // float
		constexpr auto bIncludeTargetLocationAsADSSnapLocation = 0x15c; // bool
		constexpr auto ADSSnapTargetedComponentGameplayTag = 0x160; // FGameplayTag
		constexpr auto ADSSnapTargetedComponentSocketNames = 0x168; // TArray<FName>
		constexpr auto TargetScoringBonus = 0x178; // float
		constexpr auto SphereSnappingSocketOrBone = 0x17c; // FName
		constexpr auto TargetLocationOffset = 0x184; // FVector
		constexpr auto SphereInternalRadius = 0x190; // float
		constexpr auto SphereExternalRadius = 0x194; // float
		constexpr auto bInvalidateOnDeath = 0x198; // bool
	}

	namespace n_USoundNodeWavePlayer {
		constexpr auto SoundWaveAssetPtr = 0x60; // TSoftObjectPtr<USoundWave>
		constexpr auto SoundWave = 0x88; // USoundWave*
		constexpr auto bLooping = 0x90; // char : 1
	}

	namespace n_AGobiPlayerCameraManager {
		constexpr auto CameraManagerDebugger = 0x2878; // ACameraManagerDebugger*
	}

	namespace n_ULevelSequenceBurnInOptions {
		constexpr auto bUseBurnIn = 0x30; // bool
		constexpr auto BurnInClass = 0x38; // FSoftClassPath
		constexpr auto Settings = 0x50; // ULevelSequenceBurnInInitSettings*
	}

	namespace n_UMountedWeaponComponent {
		constexpr auto OnDetached = 0xe8; // FMulticastInlineDelegate
		constexpr auto bTeleportToPreMountLocation = 0xf8; // bool
		constexpr auto MountedWeaponItemHandle = 0x100; // FDataTableRowHandle
		constexpr auto RotatedComponentTag = 0x120; // FGameplayTag
		constexpr auto AttachComponentGameplayTag = 0x128; // FGameplayTag
		constexpr auto AttachComponentBoneName = 0x130; // FName
		constexpr auto AttachmentRelativeLocation = 0x138; // FVector
		constexpr auto AttachmentRelativeRotation = 0x144; // FRotator
		constexpr auto ViewPitchClampRange = 0x150; // FVector2D
		constexpr auto ViewYawClampRange = 0x158; // FVector2D
		constexpr auto OnWeaponMounted = 0x160; // FMulticastInlineDelegate
		constexpr auto OnWeaponDismounted = 0x170; // FMulticastInlineDelegate
		constexpr auto ViewLimitLabel = 0x180; // FName
		constexpr auto RemoteViewYaw = 0x188; // float
	}

	namespace n_UBTDecorator_IsAtLocation {
		constexpr auto AcceptableRadius = 0x98; // float
		constexpr auto ParametrizedAcceptableRadius = 0xa0; // FAIDataProviderFloatValue
		constexpr auto GeometricDistanceType = 0xd8; // FAIDistanceType
		constexpr auto bUseParametrizedRadius = 0xdc; // char : 1
		constexpr auto bUseNavAgentGoalLocation = 0xdc; // char : 1
		constexpr auto bPathFindingBasedTest = 0xdc; // char : 1
	}

	namespace n_UGameplayEffectDamageAccumulatorComponent {
		constexpr auto StumbleDamageScalarMod = 0x240; // FGamePropertyFloatMod
	}

	namespace n_USteeringBehavior_Arrive {
		constexpr auto TargetLocation = 0x58; // UAnimContext_Transform*
		constexpr auto ArrivalMode = 0x60; // EArrivalMode
		constexpr auto ArrivedDistance = 0x64; // float
		constexpr auto SlowdownDistance = 0x68; // float
		constexpr auto FocusOffsetFromTarget = 0x6c; // FVector
	}

	namespace n_UMaterialExpressionMapARPassthroughCameraUV {
		constexpr auto Coordinates = 0x48; // FExpressionInput
	}

	namespace n_AEmitter {
		constexpr auto ParticleSystemComponent = 0x2a0; // UParticleSystemComponent*
		constexpr auto bDestroyOnSystemFinish = 0x2a8; // char : 1
		constexpr auto bPostUpdateTickGroup = 0x2a8; // char : 1
		constexpr auto bCurrentlyActive = 0x2a8; // char : 1
		constexpr auto OnParticleSpawn = 0x2b0; // FMulticastInlineDelegate
		constexpr auto OnParticleBurst = 0x2c0; // FMulticastInlineDelegate
		constexpr auto OnParticleDeath = 0x2d0; // FMulticastInlineDelegate
		constexpr auto OnParticleCollide = 0x2e0; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionSceneDepth {
		constexpr auto InputMode = 0x48; // EMaterialSceneAttributeInputMode
		constexpr auto Input = 0x4c; // FExpressionInput
		constexpr auto Coordinates = 0x60; // FExpressionInput
		constexpr auto ConstInput = 0x74; // FVector2D
	}

	namespace n_UUserDefinedStruct {
		constexpr auto Status = 0xc8; // EUserDefinedStructureStatus
		constexpr auto Guid = 0xcc; // FGuid
	}

	namespace n_UAudioSinkSystem {
		constexpr auto MediaPlayer = 0x88; // UMediaPlayer*
	}

	namespace n_UDatasmithStaticMeshGLTFImportData {
		constexpr auto SourceMeshName = 0x30; // FString
	}

	namespace n_ARecastNavMesh {
		constexpr auto bDrawTriangleEdges = 0x480; // char : 1
		constexpr auto bDrawPolyEdges = 0x480; // char : 1
		constexpr auto bDrawFilledPolys = 0x480; // char : 1
		constexpr auto bDrawNavMeshEdges = 0x480; // char : 1
		constexpr auto bDrawTileBounds = 0x480; // char : 1
		constexpr auto bDrawPathCollidingGeometry = 0x480; // char : 1
		constexpr auto bDrawTileLabels = 0x480; // char : 1
		constexpr auto bDrawPolygonLabels = 0x480; // char : 1
		constexpr auto bDrawDefaultPolygonCost = 0x481; // char : 1
		constexpr auto bDrawLabelsOnPathNodes = 0x481; // char : 1
		constexpr auto bDrawNavLinks = 0x481; // char : 1
		constexpr auto bDrawFailedNavLinks = 0x481; // char : 1
		constexpr auto bDrawClusters = 0x481; // char : 1
		constexpr auto bDrawOctree = 0x481; // char : 1
		constexpr auto bDrawOctreeDetails = 0x481; // char : 1
		constexpr auto bDrawMarkedForbiddenPolys = 0x481; // char : 1
		constexpr auto bDistinctlyDrawTilesBeingBuilt = 0x482; // char : 1
		constexpr auto bDrawNavMesh = 0x482; // char : 1
		constexpr auto DrawOffset = 0x484; // float
		constexpr auto bFixedTilePoolSize = 0x488; // char : 1
		constexpr auto TilePoolSize = 0x48c; // int32_t
		constexpr auto TileSizeUU = 0x490; // float
		constexpr auto CellSize = 0x494; // float
		constexpr auto CellHeight = 0x498; // float
		constexpr auto AgentRadius = 0x49c; // float
		constexpr auto AgentHeight = 0x4a0; // float
		constexpr auto AgentMaxHeight = 0x4a4; // float
		constexpr auto AgentMaxSlope = 0x4a8; // float
		constexpr auto AgentMaxStepHeight = 0x4ac; // float
		constexpr auto MinRegionArea = 0x4b0; // float
		constexpr auto MergeRegionSize = 0x4b4; // float
		constexpr auto MaxSimplificationError = 0x4b8; // float
		constexpr auto MaxSimultaneousTileGenerationJobsCount = 0x4bc; // int32_t
		constexpr auto TileNumberHardLimit = 0x4c0; // int32_t
		constexpr auto PolyRefTileBits = 0x4c4; // int32_t
		constexpr auto PolyRefNavPolyBits = 0x4c8; // int32_t
		constexpr auto PolyRefSaltBits = 0x4cc; // int32_t
		constexpr auto NavMeshOriginOffset = 0x4d0; // FVector
		constexpr auto DefaultDrawDistance = 0x4dc; // float
		constexpr auto DefaultMaxSearchNodes = 0x4e0; // float
		constexpr auto DefaultMaxHierarchicalSearchNodes = 0x4e4; // float
		constexpr auto RegionPartitioning = 0x4e8; // ERecastPartitioning
		constexpr auto LayerPartitioning = 0x4e9; // ERecastPartitioning
		constexpr auto RegionChunkSplits = 0x4ec; // int32_t
		constexpr auto LayerChunkSplits = 0x4f0; // int32_t
		constexpr auto bSortNavigationAreasByCost = 0x4f4; // char : 1
		constexpr auto bPerformVoxelFiltering = 0x4f4; // char : 1
		constexpr auto bMarkLowHeightAreas = 0x4f4; // char : 1
		constexpr auto bFilterLowSpanSequences = 0x4f4; // char : 1
		constexpr auto bFilterLowSpanFromTileCache = 0x4f4; // char : 1
		constexpr auto bDoFullyAsyncNavDataGathering = 0x4f4; // char : 1
		constexpr auto bUseBetterOffsetsFromCorners = 0x4f4; // char : 1
		constexpr auto bStoreEmptyTileLayers = 0x4f4; // char : 1
		constexpr auto bUseVirtualFilters = 0x4f5; // char : 1
		constexpr auto bAllowNavLinkAsPathEnd = 0x4f5; // char : 1
		constexpr auto bUseVoxelCache = 0x4f5; // char : 1
		constexpr auto TileSetUpdateInterval = 0x4f8; // float
		constexpr auto HeuristicScale = 0x4fc; // float
		constexpr auto VerticalDeviationFromGroundCompensation = 0x500; // float
	}

	namespace n_UPhysicsConstraintComponent {
		constexpr auto ConstraintActor1 = 0x230; // AActor*
		constexpr auto ComponentName1 = 0x238; // FConstrainComponentPropName
		constexpr auto ConstraintActor2 = 0x240; // AActor*
		constexpr auto ComponentName2 = 0x248; // FConstrainComponentPropName
		constexpr auto ConstraintSetup = 0x260; // UPhysicsConstraintTemplate*
		constexpr auto OnConstraintBroken = 0x268; // FMulticastInlineDelegate
		constexpr auto ConstraintInstance = 0x278; // FConstraintInstance
	}

	namespace n_UBTDecorator_BlackboardBase {
		constexpr auto BlackboardKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UEnvQueryTest_Pathfinding {
		constexpr auto TestMode = 0x208; // EEnvTestPathfinding
		constexpr auto Context = 0x210; // UEnvQueryContext*
		constexpr auto PathFromContext = 0x218; // FAIDataProviderBoolValue
		constexpr auto SkipUnreachable = 0x250; // FAIDataProviderBoolValue
		constexpr auto FilterClass = 0x288; // UNavigationQueryFilter*
	}

	namespace n_UFacialAnimationData {
		constexpr auto FacePoseAsset = 0x38; // UPoseAsset*
		constexpr auto ExpressionCurves = 0x40; // FName [0xd]
		constexpr auto ExpressionIntensity = 0xa8; // float [0x5]
		constexpr auto LipsyncPhonemeVisemeMapping = 0xbc; // FName [0x28]
	}

	namespace n_UParticleModuleSourceMovement {
		constexpr auto SourceMovementScale = 0x38; // FRawDistributionVector
	}

	namespace n_UScoreboardUserWidget {
		constexpr auto MyTeamPlayers = 0x458; // TArray<FScoreboardPlayerData>
		constexpr auto EnemyTeamPlayers = 0x468; // TArray<FScoreboardPlayerData>
	}

	namespace n_AReflectionCapture {
		constexpr auto CaptureComponent = 0x2a0; // UReflectionCaptureComponent*
	}

	namespace n_UParticleModuleVectorFieldLocal {
		constexpr auto VectorField = 0x38; // UVectorField*
		constexpr auto RelativeTranslation = 0x40; // FVector
		constexpr auto RelativeRotation = 0x4c; // FRotator
		constexpr auto RelativeScale3D = 0x58; // FVector
		constexpr auto Intensity = 0x64; // float
		constexpr auto Tightness = 0x68; // float
		constexpr auto bIgnoreComponentTransform = 0x6c; // char : 1
		constexpr auto bTileX = 0x6c; // char : 1
		constexpr auto bTileY = 0x6c; // char : 1
		constexpr auto bTileZ = 0x6c; // char : 1
		constexpr auto bUseFixDT = 0x6c; // char : 1
	}

	namespace n_UTRSPostEventEndNotification {
		constexpr auto OnEndOfEvent = 0x40; // FMulticastInlineDelegate
	}

	namespace n_UTreeView {
		constexpr auto BP_OnGetItemChildren = 0x3c0; // FDelegate
		constexpr auto BP_OnItemExpansionChanged = 0x3d0; // FMulticastInlineDelegate
	}

	namespace n_UNetConnection {
		constexpr auto Children = 0x50; // TArray<UChildConnection*>
		constexpr auto Driver = 0x60; // UNetDriver*
		constexpr auto PackageMapClass = 0x68; // UPackageMap*
		constexpr auto PackageMap = 0x70; // UPackageMap*
		constexpr auto OpenChannels = 0x78; // TArray<UChannel*>
		constexpr auto SentTemporaries = 0x88; // TArray<AActor*>
		constexpr auto ViewTarget = 0x98; // AActor*
		constexpr auto OwningActor = 0xa0; // AActor*
		constexpr auto MaxPacket = 0xa8; // int32_t
		constexpr auto InternalAck = 0xac; // char : 1
		constexpr auto PlayerId = 0x168; // FUniqueNetIdRepl
		constexpr auto LastReceiveTime = 0x1d8; // double
		constexpr auto ChannelsToTick = 0x1518; // TArray<UChannel*>
	}

	namespace n_AMainMenuGameMode {
		constexpr auto bLoadGlobalAssets = 0x488; // bool
		constexpr auto DefaultZombiePawnClass = 0x490; // TSoftClassPtr<UObject>
		constexpr auto RespawnTime = 0x4b8; // float
	}

	namespace n_UMediaPlaylist {
		constexpr auto Items = 0x30; // TArray<UMediaSource*>
	}

	namespace n_UMaterialExpressionParameter {
		constexpr auto ParameterName = 0x48; // FName
		constexpr auto ExpressionGUID = 0x50; // FGuid
	}

	namespace n_AActor {
		constexpr auto PrimaryActorTick = 0x30; // FActorTickFunction
		constexpr auto bNetTemporary = 0x60; // char : 1
		constexpr auto bNetStartup = 0x60; // char : 1
		constexpr auto bOnlyRelevantToOwner = 0x60; // char : 1
		constexpr auto bAlwaysRelevant = 0x60; // char : 1
		constexpr auto bReplicateMovement = 0x60; // char : 1
		constexpr auto bHidden = 0x60; // char : 1
		constexpr auto bTearOff = 0x60; // char : 1
		constexpr auto bExchangedRoles = 0x60; // char : 1
		constexpr auto bNetLoadOnClient = 0x61; // char : 1
		constexpr auto bNetUseOwnerRelevancy = 0x61; // char : 1
		constexpr auto bRelevantForNetworkReplays = 0x61; // char : 1
		constexpr auto bRelevantForLevelBounds = 0x61; // char : 1
		constexpr auto bReplayRewindable = 0x61; // char : 1
		constexpr auto bAllowTickBeforeBeginPlay = 0x61; // char : 1
		constexpr auto bAutoDestroyWhenFinished = 0x61; // char : 1
		constexpr auto bBlockInput = 0x61; // char : 1
		constexpr auto bCollideWhenPlacing = 0x62; // char : 1
		constexpr auto bFindCameraComponentWhenViewTarget = 0x62; // char : 1
		constexpr auto bGenerateOverlapEventsDuringLevelStreaming = 0x62; // char : 1
		constexpr auto bIgnoresOriginShifting = 0x62; // char : 1
		constexpr auto bEnableAutoLODGeneration = 0x62; // char : 1
		constexpr auto bIsEditorOnlyActor = 0x62; // char : 1
		constexpr auto bActorSeamlessTraveled = 0x62; // char : 1
		constexpr auto bReplicates = 0x62; // char : 1
		constexpr auto bCanBeInCluster = 0x63; // char : 1
		constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x63; // char : 1
		constexpr auto bActorEnableCollision = 0x64; // char : 1
		constexpr auto bActorIsBeingDestroyed = 0x64; // char : 1
		constexpr auto UpdateOverlapsMethodDuringLevelStreaming = 0x65; // EActorUpdateOverlapsMethod
		constexpr auto DefaultUpdateOverlapsMethodDuringLevelStreaming = 0x66; // EActorUpdateOverlapsMethod
		constexpr auto RemoteRole = 0x67; // ENetRole
		constexpr auto ReplicatedMovement = 0x80; // FRepMovement
		constexpr auto InitialLifeSpan = 0xbc; // float
		constexpr auto bIgnoreGlobalTimeDilation = 0xc0; // char : 1
		constexpr auto CustomTimeDilation = 0xc4; // float
		constexpr auto AttachmentReplication = 0xd0; // FRepAttachment
		constexpr auto Owner = 0x110; // AActor*
		constexpr auto NetDriverName = 0x118; // FName
		constexpr auto Role = 0x120; // ENetRole
		constexpr auto NetDormancy = 0x121; // ENetDormancy
		constexpr auto SpawnCollisionHandlingMethod = 0x122; // ESpawnActorCollisionHandlingMethod
		constexpr auto AutoReceiveInput = 0x123; // EAutoReceiveInput
		constexpr auto InputPriority = 0x124; // int32_t
		constexpr auto InputComponent = 0x128; // UInputComponent*
		constexpr auto NetCullDistanceSquared = 0x130; // float
		constexpr auto NetTag = 0x134; // int32_t
		constexpr auto NetUpdateFrequency = 0x138; // float
		constexpr auto MinNetUpdateFrequency = 0x13c; // float
		constexpr auto NetPriority = 0x140; // float
		constexpr auto Instigator = 0x148; // APawn*
		constexpr auto Children = 0x150; // TArray<AActor*>
		constexpr auto RootComponent = 0x160; // USceneComponent*
		constexpr auto ControllingMatineeActors = 0x168; // TArray<AMatineeActor*>
		constexpr auto Layers = 0x180; // TArray<FName>
		constexpr auto ParentComponent = 0x190; // TWeakObjectPtr<UChildActorComponent>
		constexpr auto Tags = 0x1a0; // TArray<FName>
		constexpr auto OnActorBeginOverlap = 0x1b0; // FMulticastSparseDelegate
		constexpr auto OnActorEndOverlap = 0x1b1; // FMulticastSparseDelegate
		constexpr auto OnBeginCursorOver = 0x1b2; // FMulticastSparseDelegate
		constexpr auto OnEndCursorOver = 0x1b3; // FMulticastSparseDelegate
		constexpr auto OnClicked = 0x1b4; // FMulticastSparseDelegate
		constexpr auto OnReleased = 0x1b5; // FMulticastSparseDelegate
		constexpr auto OnInputTouchBegin = 0x1b6; // FMulticastSparseDelegate
		constexpr auto OnInputTouchEnd = 0x1b7; // FMulticastSparseDelegate
		constexpr auto OnInputTouchEnter = 0x1b8; // FMulticastSparseDelegate
		constexpr auto OnInputTouchLeave = 0x1b9; // FMulticastSparseDelegate
		constexpr auto OnActorHit = 0x1ba; // FMulticastSparseDelegate
		constexpr auto OnDestroyed = 0x1bb; // FMulticastSparseDelegate
		constexpr auto OnEndPlay = 0x1bc; // FMulticastSparseDelegate
		constexpr auto InstanceComponents = 0x270; // TArray<UActorComponent*>
		constexpr auto BlueprintCreatedComponents = 0x280; // TArray<UActorComponent*>
	}

	namespace n_UGameplayEffectLifeStateBase {
		constexpr auto LifeStateToAffect = 0x240; // ULifeStateBase*
		constexpr auto TagsToStripFromAppliedTags = 0x248; // FGameplayTagContainer
	}

	namespace n_APlayerController {
		constexpr auto Player = 0x308; // UPlayer*
		constexpr auto AcknowledgedPawn = 0x310; // APawn*
		constexpr auto ControllingDirTrackInst = 0x318; // UInterpTrackInstDirector*
		constexpr auto MyHUD = 0x320; // AHUD*
		constexpr auto bNoRollRotationOnPossess = 0x328; // bool
		constexpr auto PlayerCameraManager = 0x330; // APlayerCameraManager*
		constexpr auto PlayerCameraManagerClass = 0x338; // APlayerCameraManager*
		constexpr auto bAutoManageActiveCameraTarget = 0x340; // bool
		constexpr auto TargetViewRotation = 0x344; // FRotator
		constexpr auto SmoothTargetViewRotationSpeed = 0x35c; // float
		constexpr auto HiddenActors = 0x368; // TArray<AActor*>
		constexpr auto HiddenPrimitiveComponents = 0x378; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
		constexpr auto LastSpectatorStateSynchTime = 0x38c; // float
		constexpr auto LastSpectatorSyncLocation = 0x390; // FVector
		constexpr auto LastSpectatorSyncRotation = 0x39c; // FRotator
		constexpr auto ClientCap = 0x3a8; // int32_t
		constexpr auto CheatManager = 0x3b0; // UCheatManager*
		constexpr auto CheatClass = 0x3b8; // UCheatManager*
		constexpr auto PlayerInputClassOverride = 0x3c0; // UPlayerInput*
		constexpr auto PlayerInput = 0x3c8; // UPlayerInput*
		constexpr auto ActiveForceFeedbackEffects = 0x3d0; // TArray<FActiveForceFeedbackEffect>
		constexpr auto bPlayerIsWaiting = 0x450; // char : 1
		constexpr auto NetPlayerIndex = 0x454; // char
		constexpr auto PendingSwapConnection = 0x490; // UNetConnection*
		constexpr auto NetConnection = 0x498; // UNetConnection*
		constexpr auto InputYawScale = 0x4ac; // float
		constexpr auto InputPitchScale = 0x4b0; // float
		constexpr auto InputRollScale = 0x4b4; // float
		constexpr auto bShowMouseCursor = 0x4b8; // char : 1
		constexpr auto bEnableClickEvents = 0x4b8; // char : 1
		constexpr auto bEnableTouchEvents = 0x4b8; // char : 1
		constexpr auto bEnableMouseOverEvents = 0x4b8; // char : 1
		constexpr auto bEnableTouchOverEvents = 0x4b8; // char : 1
		constexpr auto bForceFeedbackEnabled = 0x4b8; // char : 1
		constexpr auto ForceFeedbackScale = 0x4bc; // float
		constexpr auto ClickEventKeys = 0x4c0; // TArray<FKey>
		constexpr auto DefaultMouseCursor = 0x4d0; // EMouseCursor
		constexpr auto CurrentMouseCursor = 0x4d1; // EMouseCursor
		constexpr auto DefaultClickTraceChannel = 0x4d2; // ECollisionChannel
		constexpr auto CurrentClickTraceChannel = 0x4d3; // ECollisionChannel
		constexpr auto HitResultTraceDistance = 0x4d4; // float
		constexpr auto SeamlessTravelCount = 0x4d8; // uint16_t
		constexpr auto LastCompletedSeamlessTravelCount = 0x4da; // uint16_t
		constexpr auto OnPreUpdatePawnRotation = 0x4e0; // FMulticastInlineDelegate
		constexpr auto OnPostUpdatePawnRotation = 0x4f0; // FMulticastInlineDelegate
		constexpr auto InactiveStateInputComponent = 0x588; // UInputComponent*
		constexpr auto bShouldPerformFullTickWhenPaused = 0x590; // char : 1
		constexpr auto CurrentTouchInterface = 0x5a8; // UTouchInterface*
		constexpr auto SpectatorPawn = 0x600; // ASpectatorPawn*
		constexpr auto bIsLocalPlayerController = 0x60c; // bool
		constexpr auto SpawnLocation = 0x610; // FVector
	}

	namespace n_UAnimNotify_Explode {
		constexpr auto ExplosionComponentTag = 0x40; // FGameplayTag
	}

	namespace n_UParticleModuleVelocityInheritParent {
		constexpr auto Scale = 0x40; // FRawDistributionVector
	}

	namespace n_UEnvQueryTest_EnemyDamageBase {
		constexpr auto TagRequirements = 0x208; // FGameplayTagQuery
		constexpr auto FilterTagRequirements = 0x250; // FGameplayTagQuery
		constexpr auto bOwnerDamageOnly = 0x298; // bool
	}

	namespace n_UApplyEffectItemGrapplerComponent {
		constexpr auto bUseTraceIfNoGrappler = 0x538; // bool
	}

	namespace n_USqueezeComponent {
		constexpr auto OnSqueezeEnded = 0x1e0; // FMulticastInlineDelegate
		constexpr auto MoveTickData = 0x2f8; // FSqueezeMoveTickData
		constexpr auto ReplicatedTargetCharacter = 0x318; // AGobiCharacter*
		constexpr auto bGameplayTargetAttached = 0x320; // bool
		constexpr auto SqueezeMontages = 0x328; // TArray<UAnimMontage*>
		constexpr auto PinMontages = 0x338; // TArray<UAnimMontage*>
		constexpr auto MissMontages = 0x348; // TArray<UAnimMontage*>
		constexpr auto PinMissMontages = 0x358; // TArray<UAnimMontage*>
		constexpr auto StopMontages = 0x368; // TArray<UAnimMontage*>
		constexpr auto PinStopMontages = 0x378; // TArray<UAnimMontage*>
		constexpr auto AppliedTags = 0x388; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x3a8; // FGameplayTagQuery
		constexpr auto BlockingTargetTags = 0x3f0; // FGameplayTagQuery
		constexpr auto CooldownTags = 0x438; // FGameplayTagContainer
		constexpr auto GrabPrimitiveComponentTag = 0x458; // FGameplayTag
		constexpr auto ApplyEffectsToTarget = 0x460; // TArray<UGameplayEffect*>
		constexpr auto ApplyNotifyEffectsToTarget = 0x470; // TArray<UGameplayEffect*>
		constexpr auto ApplyEffectsWhileGrabbing = 0x480; // TArray<UGameplayEffect*>
		constexpr auto ApplyMissedEffects = 0x490; // TArray<UGameplayEffect*>
		constexpr auto ApplyEndingEffectsToTarget = 0x4a0; // TArray<UGameplayEffect*>
		constexpr auto MaxDistanceToAttachPoint = 0x4b0; // float
		constexpr auto MaxDistanceToServerValidateGrab = 0x4b4; // float
		constexpr auto MaxAngleToSqueeze = 0x4b8; // float
		constexpr auto MaxDistanceToContinueSqueeze = 0x4bc; // float
		constexpr auto MaxDistanceToContinuePin = 0x4c0; // float
		constexpr auto TestAroundDistance = 0x4c4; // float
		constexpr auto TestUpDistance = 0x4c8; // float
		constexpr auto BestCandidateForwardOffset = 0x4cc; // float
		constexpr auto TargetViewPitch = 0x4d0; // FVector2D
		constexpr auto TargetPinnedViewPitch = 0x4d8; // FVector2D
		constexpr auto TargetViewYaw = 0x4e0; // FVector2D
		constexpr auto SqueezeTargetMoveSpeedOverride = 0x4e8; // float
		constexpr auto MoveToReticleData = 0x4ec; // FSqueezeMoveToReticleData
		constexpr auto PinMoveToReticleData = 0x4fc; // FSqueezeMoveToReticleData
		constexpr auto bUsesSecondaryButton = 0x50c; // bool
		constexpr auto bUseTargetingReticle = 0x50d; // bool
		constexpr auto bCancelOnSprintPressed = 0x50e; // bool
		constexpr auto SqueezeVolumeTestPadding = 0x510; // float
		constexpr auto SqueezeMoveBackDuration = 0x514; // float
		constexpr auto SqueezeMoveBackMaxDistance = 0x518; // float
		constexpr auto GrabBone = 0x51c; // FName
		constexpr auto SqueezeMontagesName = 0x524; // FName
		constexpr auto ViewLimitLabel = 0x52c; // FName
		constexpr auto SqueezeTuning = 0x534; // FSqueezeTuning
	}

	namespace n_UEnvQueryTest_IsSmartActorEnabledForAI {
		constexpr auto bUseQueryOwner = 0x208; // bool
		constexpr auto AIClass = 0x210; // FAIDataProviderUObjectValue
	}

	namespace n_UVertexAnimationComponent {
		constexpr auto VertexAnimationMesh = 0xe8; // UStaticMesh*
		constexpr auto VertexAnimationMeshComponent = 0xf0; // UStaticMeshComponent*
		constexpr auto DynamicVertexAnimMeshMaterial = 0xf8; // UMaterialInstanceDynamic*
		constexpr auto VertexAnimationLifetime = 0x100; // float
	}

	namespace n_UBTDecorator_SetTagCooldown {
		constexpr auto CooldownTag = 0x70; // FGameplayTag
		constexpr auto CooldownDuration = 0x78; // float
		constexpr auto bAddToExistingDuration = 0x7c; // bool
	}

	namespace n_UProjectileMovementComponent {
		constexpr auto InitialSpeed = 0x128; // float
		constexpr auto MaxSpeed = 0x12c; // float
		constexpr auto bRotationFollowsVelocity = 0x130; // char : 1
		constexpr auto bRotationRemainsVertical = 0x130; // char : 1
		constexpr auto bShouldBounce = 0x130; // char : 1
		constexpr auto bInitialVelocityInLocalSpace = 0x130; // char : 1
		constexpr auto bForceSubStepping = 0x130; // char : 1
		constexpr auto bSimulationEnabled = 0x130; // char : 1
		constexpr auto bSweepCollision = 0x130; // char : 1
		constexpr auto bIsHomingProjectile = 0x130; // char : 1
		constexpr auto bBounceAngleAffectsFriction = 0x131; // char : 1
		constexpr auto bIsSliding = 0x131; // char : 1
		constexpr auto bInterpMovement = 0x131; // char : 1
		constexpr auto bInterpRotation = 0x131; // char : 1
		constexpr auto PreviousHitTime = 0x134; // float
		constexpr auto PreviousHitNormal = 0x138; // FVector
		constexpr auto ProjectileGravityScale = 0x144; // float
		constexpr auto Buoyancy = 0x148; // float
		constexpr auto Bounciness = 0x14c; // float
		constexpr auto Friction = 0x150; // float
		constexpr auto BounceVelocityStopSimulatingThreshold = 0x154; // float
		constexpr auto MinFrictionFraction = 0x158; // float
		constexpr auto OnProjectileBounce = 0x160; // FMulticastInlineDelegate
		constexpr auto OnProjectileStop = 0x170; // FMulticastInlineDelegate
		constexpr auto HomingAccelerationMagnitude = 0x180; // float
		constexpr auto HomingTargetComponent = 0x184; // TWeakObjectPtr<USceneComponent>
		constexpr auto MaxSimulationTimeStep = 0x18c; // float
		constexpr auto MaxSimulationIterations = 0x190; // int32_t
		constexpr auto BounceAdditionalIterations = 0x194; // int32_t
		constexpr auto InterpLocationTime = 0x198; // float
		constexpr auto InterpRotationTime = 0x19c; // float
		constexpr auto InterpLocationMaxLagDistance = 0x1a0; // float
		constexpr auto InterpLocationSnapToTargetDistance = 0x1a4; // float
	}

	namespace n_UARTrackedObject {
		constexpr auto DetectedObject = 0xe8; // UARCandidateObject*
	}

	namespace n_UAnimContext_GameplayTags {
		constexpr auto Actor = 0x50; // UAnimContext_Actor*
	}

	namespace n_ALootSpawnerCrate {
		constexpr auto DefaultSceneRoot = 0x2a0; // USceneComponent*
		constexpr auto Crate = 0x2a8; // UStaticMeshComponent*
		constexpr auto Lid = 0x2b0; // UStaticMeshComponent*
		constexpr auto LootSpawner = 0x2b8; // ULootSpawnerComponent*
		constexpr auto ItemLocations = 0x2c0; // TArray<USceneComponent*>
		constexpr auto ItemLocation0 = 0x2d0; // USceneComponent*
		constexpr auto ItemLocation1 = 0x2d8; // USceneComponent*
		constexpr auto ItemLocation2 = 0x2e0; // USceneComponent*
		constexpr auto ItemLocation3 = 0x2e8; // USceneComponent*
		constexpr auto ItemLocation4 = 0x2f0; // USceneComponent*
		constexpr auto ItemLocation5 = 0x2f8; // USceneComponent*
		constexpr auto ItemLocation6 = 0x300; // USceneComponent*
		constexpr auto ItemLocation7 = 0x308; // USceneComponent*
		constexpr auto ItemLocation8 = 0x310; // USceneComponent*
		constexpr auto NavModifierVolume = 0x318; // UBoxComponent*
		constexpr auto Pingable = 0x320; // UPingableComponent*
		constexpr auto PingableVolume = 0x328; // UBoxComponent*
		constexpr auto UsableSphere = 0x330; // USphereComponent*
		constexpr auto Usable = 0x338; // UUsableComponent*
		constexpr auto GobiNavModifier = 0x340; // UGobiNavModifierComponent*
		constexpr auto ItemAkBank = 0x348; // UItemAkBankComponent*
		constexpr auto UsableHighlight = 0x350; // UUsableHighlightComponent*
		constexpr auto GameplayEffects = 0x358; // UGameplayEffectsComponent*
		constexpr auto ItemAudio = 0x360; // UItemAudioComponent*
		constexpr auto bEnableGobiNavModifier = 0x368; // bool
		constexpr auto bDynamicLoot = 0x369; // bool
		constexpr auto ValidItemTags = 0x370; // FGameplayTagContainer
		constexpr auto DisallowedItemTags = 0x390; // FGameplayTagContainer
		constexpr auto OpenedCrateMesh = 0x3b0; // UStaticMesh*
		constexpr auto OpenedCrateMeshMaterialParamSet = 0x3b8; // UMeshMaterialParamSet*
		constexpr auto ItemCountRange = 0x3c4; // FVector2D
		constexpr auto ItemPickupTagsArray = 0x3d0; // TArray<FGameplayTagContainer>
		constexpr auto ItemShortageQuery = 0x3e0; // FGameplayTagQuery
		constexpr auto ItemShortageScalar = 0x428; // float
		constexpr auto bAlwaysSpawned = 0x42c; // bool
		constexpr auto SeedItemClass = 0x430; // AItemPickup*
		constexpr auto bContainerOpened = 0x438; // bool
		constexpr auto ItemPickups = 0x440; // TArray<AItemPickup*>
		constexpr auto SpawnedItemsTags = 0x450; // FGameplayTagContainer
		constexpr auto bContainerVisible = 0x470; // bool
	}

	namespace n_UMoviePlayerSettings {
		constexpr auto bWaitForMoviesToComplete = 0x30; // bool
		constexpr auto bMoviesAreSkippable = 0x31; // bool
		constexpr auto StartupMovies = 0x38; // TArray<FString>
	}

	namespace n_UEnvQueryTest_TRSTrace {
		constexpr auto bUseDataProviderForTraceData = 0x208; // bool
		constexpr auto TraceData = 0x210; // FEnvTraceData
		constexpr auto DataProviderTraceData = 0x240; // FAIDataProviderTraceDataValue
		constexpr auto Type = 0x288; // ETRSTraceType
		constexpr auto ArcParam = 0x28c; // float
		constexpr auto ArcSimFrequency = 0x290; // float
		constexpr auto ArcMaxSimTime = 0x294; // float
		constexpr auto TraceFromContext = 0x298; // FAIDataProviderBoolValue
		constexpr auto ItemHeightOffset = 0x2d0; // FAIDataProviderFloatValue
		constexpr auto ItemDirectionOffset = 0x308; // FAIDataProviderFloatValue
		constexpr auto ContextDirectionOffset = 0x340; // FAIDataProviderFloatValue
		constexpr auto ContextHeightOffset = 0x378; // FAIDataProviderFloatValue
		constexpr auto Context = 0x3b0; // UEnvQueryContext*
		constexpr auto bVLOGTrace = 0x3b8; // bool
	}

	namespace n_UFogSubsystem {
		constexpr auto BaseMod = 0x68; // UFogMod*
	}

	namespace n_UGizmoComponentAxisSource {
		constexpr auto Component = 0x38; // USceneComponent*
		constexpr auto AxisIndex = 0x40; // int32_t
		constexpr auto bLocalAxes = 0x44; // bool
	}

	namespace n_UParticleModuleOrbitBase {
		constexpr auto bUseEmitterTime = 0x38; // char : 1
	}

	namespace n_AGobiDemoSpectator {
		constexpr auto OnReplayPaused = 0x7f0; // FMulticastInlineDelegate
		constexpr auto OnReplayUnpaused = 0x800; // FMulticastInlineDelegate
		constexpr auto DemoHUD = 0x818; // UDemoHUDUserWidget*
	}

	namespace n_UWaterVolumeDef {
		constexpr auto EffectShallowClass = 0x38; // UGameplayEffect*
		constexpr auto EffectDeepClass = 0x40; // UGameplayEffect*
		constexpr auto EffectDeepRecentClass = 0x48; // UGameplayEffect*
		constexpr auto DeepMovementEmitter = 0x50; // UParticleSystem*
		constexpr auto DeepSplashEmitter = 0x58; // UParticleSystem*
		constexpr auto ShallowMovementEmitter = 0x60; // UParticleSystem*
		constexpr auto ShallowSplashEmitter = 0x68; // UParticleSystem*
		constexpr auto BuoyantForceMultiplier = 0x70; // float
		constexpr auto SkeletalLinearDampening = 0x74; // float
		constexpr auto SkeletalAngularDampening = 0x78; // float
	}

	namespace n_AGobiDestructibleActor {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto StaticMeshComponent = 0x2a8; // UStaticMeshComponent*
		constexpr auto DamageVolumeComponent = 0x2b0; // UBoxComponent*
		constexpr auto NavModifierComponent = 0x2b8; // UGobiNavModifierComponent*
		constexpr auto HealthComponent = 0x2c0; // UHealthComponent*
	}

	namespace n_UBTService_OutsideOfSneakVolume {
		constexpr auto ApplyTags = 0xa0; // FGameplayTagContainer
	}

	namespace n_UTweenVector2DLatentFactory {
		constexpr auto OnTweenStart = 0x38; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0x48; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0x58; // FMulticastInlineDelegate
	}

	namespace n_UAkAcousticPortalComponent {
		constexpr auto InitialState = 0x508; // AkAcousticPortalState
		constexpr auto ObstructionRefreshInterval = 0x50c; // float
		constexpr auto ObstructionCollisionChannel = 0x510; // ECollisionChannel
		constexpr auto bPortalEnabled = 0x538; // bool
	}

	namespace n_UEditableGameplayTagQuery {
		constexpr auto UserDescription = 0x30; // FString
		constexpr auto RootExpression = 0x50; // UEditableGameplayTagQueryExpression*
		constexpr auto TagQueryExportText_Helper = 0x58; // FGameplayTagQuery
	}

	namespace n_UEvalSet_Shared_Mutilation_HitReaction_C {
		constexpr auto Dismembered = 0xc0; // FGameplayEval_Dismembered
		constexpr auto HitBone = 0x118; // FGameplayEval_HitReactionBone
		constexpr auto DamageType = 0x1c8; // FGameplayEval_DamageType
		constexpr auto DamageAmount = 0x288; // FGameplayEval_DamageAmount
		constexpr auto HitReactionHealth = 0x320; // FGameplayEval_HitReactionHealth
		constexpr auto CanRupture = 0x378; // FGameplayEval_CanRupture
		constexpr auto HitReactionWeakspot = 0x3c8; // FGameplayEval_HitReactionWeakSpot
		constexpr auto DamageRange = 0x428; // FGameplayEval_DamageRange
	}

	namespace n_UParticleSystem {
		constexpr auto UpdateTime_FPS = 0x38; // float
		constexpr auto UpdateTime_Delta = 0x3c; // float
		constexpr auto WarmupTime = 0x40; // float
		constexpr auto WarmupTickRate = 0x44; // float
		constexpr auto Emitters = 0x48; // TArray<UParticleEmitter*>
		constexpr auto PreviewComponent = 0x58; // UParticleSystemComponent*
		constexpr auto CurveEdSetup = 0x60; // UInterpCurveEdSetup*
		constexpr auto LODDistanceCheckTime = 0x68; // float
		constexpr auto MacroUVRadius = 0x6c; // float
		constexpr auto LODDistances = 0x70; // TArray<float>
		constexpr auto LODSettings = 0x80; // TArray<FParticleSystemLOD>
		constexpr auto FixedRelativeBoundingBox = 0x90; // FBox
		constexpr auto SecondsBeforeInactive = 0xac; // float
		constexpr auto Delay = 0xb0; // float
		constexpr auto DelayLow = 0xb4; // float
		constexpr auto bOrientZAxisTowardCamera = 0xb8; // char : 1
		constexpr auto bUseFixedRelativeBoundingBox = 0xb8; // char : 1
		constexpr auto bShouldResetPeakCounts = 0xb8; // char : 1
		constexpr auto bHasPhysics = 0xb8; // char : 1
		constexpr auto bUseRealtimeThumbnail = 0xb8; // char : 1
		constexpr auto ThumbnailImageOutOfDate = 0xb8; // char : 1
		constexpr auto bUseDelayRange = 0xb9; // char : 1
		constexpr auto bAllowManagedTicking = 0xb9; // char : 1
		constexpr auto bAutoDeactivate = 0xb9; // char : 1
		constexpr auto bRegenerateLODDuplicate = 0xb9; // char : 1
		constexpr auto SystemUpdateMode = 0xba; // EParticleSystemUpdateMode
		constexpr auto TRSSpawnCullingGroup = 0xbc; // FName
		constexpr auto LODMethod = 0xc4; // ParticleSystemLODMethod
		constexpr auto InsignificantReaction = 0xc5; // EParticleSystemInsignificanceReaction
		constexpr auto OcclusionBoundsMethod = 0xc6; // EParticleSystemOcclusionBoundsMethod
		constexpr auto MaxSignificanceLevel = 0xc8; // EParticleSignificanceLevel
		constexpr auto MinTimeBetweenTicks = 0xcc; // uint32_t
		constexpr auto InsignificanceDelay = 0xd0; // float
		constexpr auto MacroUVPosition = 0xd4; // FVector
		constexpr auto CustomOcclusionBounds = 0xe0; // FBox
		constexpr auto SoloTracking = 0x100; // TArray<FLODSoloTrack>
		constexpr auto NamedMaterialSlots = 0x110; // TArray<FNamedEmitterMaterial>
	}

	namespace n_AAISpawnActorVolume {
		constexpr auto InitialHordeBlockingTags = 0x2d8; // FGameplayTagContainer
		constexpr auto CurrentHordeBlockingTags = 0x2f8; // FGameplayTagContainer
		constexpr auto InitialWanderBlockingTags = 0x318; // FGameplayTagContainer
		constexpr auto CurrentWanderBlockingTags = 0x338; // FGameplayTagContainer
		constexpr auto InitialPersistentTags = 0x358; // FGameplayTagContainer
		constexpr auto bUsePhysX = 0x378; // bool
		constexpr auto CurrentPersistentTags = 0x380; // FGameplayTagContainer
	}

	namespace n_UWallGrabComponent {
		constexpr auto WallGrabConfig = 0x130; // FWallGrabConfig
		constexpr auto MoveTickData = 0x288; // FWallGrabMoveTickData
	}

	namespace n_UTexture {
		constexpr auto LightingGuid = 0x50; // FGuid
		constexpr auto LODBias = 0x60; // int32_t
		constexpr auto CompressionSettings = 0x64; // TextureCompressionSettings
		constexpr auto Filter = 0x65; // TextureFilter
		constexpr auto MipLoadOptions = 0x66; // ETextureMipLoadOptions
		constexpr auto LODGroup = 0x67; // TextureGroup
		constexpr auto SRGB = 0x68; // char : 1
		constexpr auto bNoTiling = 0x68; // char : 1
		constexpr auto VirtualTextureStreaming = 0x68; // char : 1
		constexpr auto CompressionYCoCg = 0x68; // char : 1
		constexpr auto bNotOfflineProcessed = 0x68; // char : 1
		constexpr auto bAsyncResourceReleaseHasBeenStarted = 0x68; // char : 1
		constexpr auto AssetUserData = 0x70; // TArray<UAssetUserData*>
	}

	namespace n_UFireModeBaseComponent {
		constexpr auto RemoteClientFireParity = 0x42c; // char
		constexpr auto LastKnownFirstPersonMontage = 0x430; // UAnimMontage*
		constexpr auto WeaponFireBehavior = 0x438; // EWeaponFireBehavior
		constexpr auto bWantsRechamber = 0x439; // bool
		constexpr auto bAllowInputBuffering = 0x43a; // bool
		constexpr auto ShotsPerBurst = 0x43b; // int8_t
		constexpr auto AmmoRequiredPerShot = 0x43c; // int8_t
		constexpr auto bIsMountedWeapon = 0x43d; // bool
		constexpr auto MountedWeaponMeshTag = 0x440; // FGameplayTag
		constexpr auto DamageType = 0x448; // UGobiDamageType*
		constexpr auto WeaponTracer = 0x450; // FAssetLookupWeaponTracerContainer
		constexpr auto TracerRate = 0x468; // uint32_t
		constexpr auto TracerForwardVelocityMinMax = 0x46c; // FVector2D
		constexpr auto Tracer3PForwardVelocityMinMax = 0x474; // FVector2D
		constexpr auto TracerRibbonWidthFP = 0x47c; // float
		constexpr auto TracerRibbonWidth3P = 0x480; // float
		constexpr auto MuzzleFlashParticleFP = 0x488; // UParticleSystem*
		constexpr auto MuzzleFlashLoopingParticleFP = 0x490; // UParticleSystem*
		constexpr auto MuzzleFlashParticle3P = 0x498; // UParticleSystem*
		constexpr auto MuzzleFlashLoopingParticle3P = 0x4a0; // UParticleSystem*
		constexpr auto LoopingShellEjectRate = 0x4a8; // float
		constexpr auto ShellEjectVelocity = 0x4ac; // FVector
		constexpr auto ShellEjectParticleFP = 0x4b8; // UParticleSystem*
		constexpr auto ShellEjectLoopingParticleFP = 0x4c0; // UParticleSystem*
		constexpr auto ShellEjectParticle3P = 0x4c8; // UParticleSystem*
		constexpr auto ShellEjectLoopingParticle3P = 0x4d0; // UParticleSystem*
		constexpr auto ImpactCue = 0x4d8; // FGameplayTag
		constexpr auto ShotFiredCue = 0x4e0; // FGameplayTag
		constexpr auto MuzzleSocketName = 0x4e8; // FAssetLookupName
		constexpr auto ForceFeedbackEffect = 0x500; // UForceFeedbackEffect*
		constexpr auto bForceFeedbackIsLooping = 0x508; // bool
		constexpr auto TriggerEffects = 0x50c; // FTriggerEffectsDefinition
		constexpr auto BlockingTags = 0x518; // FGameplayTagContainer
		constexpr auto FiringStateAppliedTags = 0x538; // FGameplayTagContainer
		constexpr auto RechamberStateAppliedTags = 0x558; // FGameplayTagContainer
		constexpr auto AnimationCancellingTags = 0x578; // FGameplayTagContainer
		constexpr auto MinShotsBeforeAkLoop = 0x598; // int32_t
		constexpr auto FireRateRTPC = 0x59c; // FName
		constexpr auto FirstPersonFireSingleEvents = 0x5a8; // FAssetLookupAkAudioEventArray
		constexpr auto FirstPersonFireSingleUnderBurstEvents = 0x5c8; // FAssetLookupAkAudioEventArray
		constexpr auto FirstPersonFireLoopEvents = 0x5e8; // FAssetLookupAkAudioEventArray
		constexpr auto FirstPersonFireLoopStopEvents = 0x608; // FAssetLookupAkAudioEventArray
		constexpr auto ThirdPersonFireSingleEvent = 0x628; // FAssetLookupAkAudioEvent
		constexpr auto ThirdPersonFireLoopEvent = 0x640; // FAssetLookupAkAudioEvent
		constexpr auto ThirdPersonFireLoopStopEvent = 0x658; // FAssetLookupAkAudioEvent
		constexpr auto LastShotFireEvent = 0x670; // FAssetLookupAkAudioEvent
		constexpr auto DryFireEvent = 0x688; // FAssetLookupAkAudioEvent
		constexpr auto WhizByEvent = 0x6a0; // FAssetLookupAkAudioEvent
		constexpr auto WindupLoopAudio = 0x6b8; // UAkAudioEvent*
		constexpr auto WindupLoopStopAudio = 0x6c0; // UAkAudioEvent*
		constexpr auto bFireNotPressedForThirdPersonSingle = 0x6c8; // bool
		constexpr auto WhizByMaxDistance = 0x6cc; // float
		constexpr auto FireMontagesFP = 0x6d0; // FAssetLookupMontageArray
		constexpr auto FireMontages3P = 0x6f0; // FAssetLookupMontageArray
		constexpr auto RechamberMontagesFP = 0x710; // FAssetLookupMontageArray
		constexpr auto RechamberMontages3P = 0x730; // FAssetLookupMontageArray
		constexpr auto AppliedEffects = 0x750; // TArray<UGameplayEffect*>
		constexpr auto FireModeBaseTuning = 0x760; // FFireModeBaseTuning
		constexpr auto DelayBetweenAlerts = 0x794; // float
	}

	namespace n_ULightmassPrimitiveSettingsObject {
		constexpr auto LightmassSettings = 0x30; // FLightmassPrimitiveSettings
	}

	namespace n_UGeometryCacheTrack_FlipbookAnimation {
		constexpr auto NumMeshSamples = 0x60; // uint32_t
	}

	namespace n_UMapMeshConfigMod {
		constexpr auto MeshConfigMod = 0x38; // FSkeletalMeshConfigMod
	}

	namespace n_ACharacterLineupLayoutManager {
		constexpr auto Mannequins = 0x2a8; // TArray<ACustomizationMannequin*>
		constexpr auto CharacterSelectTargetPoint = 0x2b8; // ATargetPoint*
		constexpr auto PreRoundLockInTargetPoints = 0x2c0; // TArray<ATargetPoint*>
		constexpr auto PostRoundTargetPoints = 0x2d0; // TArray<ATargetPoint*>
		constexpr auto Camera = 0x2e0; // ACameraActor*
	}

	namespace n_ACharacter {
		constexpr auto Mesh = 0x2f8; // USkeletalMeshComponent*
		constexpr auto CharacterMovement = 0x300; // UCharacterMovementComponent*
		constexpr auto CapsuleComponent = 0x308; // UCapsuleComponent*
		constexpr auto BasedMovement = 0x310; // FBasedMovementInfo
		constexpr auto ReplicatedBasedMovement = 0x340; // FBasedMovementInfo
		constexpr auto AnimRootMotionTranslationScale = 0x370; // float
		constexpr auto BaseTranslationOffset = 0x374; // FVector
		constexpr auto BaseRotationOffset = 0x380; // FQuat
		constexpr auto ReplicatedServerLastTransformUpdateTimeStamp = 0x390; // float
		constexpr auto ReplayLastTransformUpdateTimeStamp = 0x394; // float
		constexpr auto ReplicatedMovementMode = 0x398; // char
		constexpr auto bInBaseReplication = 0x399; // bool
		constexpr auto CrouchedEyeHeight = 0x39c; // float
		constexpr auto bIsCrouched = 0x3a0; // char : 1
		constexpr auto bProxyIsJumpForceApplied = 0x3a0; // char : 1
		constexpr auto bPressedJump = 0x3a0; // char : 1
		constexpr auto bClientUpdating = 0x3a0; // char : 1
		constexpr auto bClientWasFalling = 0x3a0; // char : 1
		constexpr auto bClientResimulateRootMotion = 0x3a0; // char : 1
		constexpr auto bClientResimulateRootMotionSources = 0x3a0; // char : 1
		constexpr auto bSimGravityDisabled = 0x3a0; // char : 1
		constexpr auto bClientCheckEncroachmentOnNetUpdate = 0x3a1; // char : 1
		constexpr auto bServerMoveIgnoreRootMotion = 0x3a1; // char : 1
		constexpr auto bWasJumping = 0x3a1; // char : 1
		constexpr auto JumpForceTimeRemaining = 0x3a4; // float
		constexpr auto ProxyJumpForceStartedTime = 0x3a8; // float
		constexpr auto JumpKeyHoldTime = 0x3ac; // float
		constexpr auto JumpMaxHoldTime = 0x3b0; // float
		constexpr auto JumpMaxCount = 0x3b4; // int32_t
		constexpr auto JumpCurrentCount = 0x3b8; // int32_t
		constexpr auto OnReachedJumpApex = 0x3c0; // FMulticastInlineDelegate
		constexpr auto MovementModeChangedDelegate = 0x3e0; // FMulticastInlineDelegate
		constexpr auto OnCharacterMovementUpdated = 0x3f0; // FMulticastInlineDelegate
		constexpr auto SavedRootMotion = 0x400; // FRootMotionSourceGroup
		constexpr auto ClientRootMotionParams = 0x440; // FRootMotionMovementParams
		constexpr auto RootMotionRepMoves = 0x480; // TArray<FSimulatedRootMotionReplicatedMove>
		constexpr auto RepRootMotion = 0x490; // FRepRootMotionMontage
		constexpr auto RepRootMotionHighFreq = 0x528; // FRepRootMotionMontageHighFreq
		constexpr auto RepRootMotionLowFreq = 0x550; // FRepRootMotionMontageLowFreq
	}

	namespace n_UDirectionalLightComponent {
		constexpr auto ShadowCascadeBiasDistribution = 0x388; // float
		constexpr auto bEnableLightShaftOcclusion = 0x38c; // char : 1
		constexpr auto OcclusionMaskDarkness = 0x390; // float
		constexpr auto OcclusionDepthRange = 0x394; // float
		constexpr auto LightShaftOverrideDirection = 0x398; // FVector
		constexpr auto WholeSceneDynamicShadowRadius = 0x3a4; // float
		constexpr auto DynamicShadowDistanceMovableLight = 0x3a8; // float
		constexpr auto DynamicShadowDistanceStationaryLight = 0x3ac; // float
		constexpr auto DynamicShadowCascades = 0x3b0; // int32_t
		constexpr auto CascadeDistributionExponent = 0x3b4; // float
		constexpr auto CascadeTransitionFraction = 0x3b8; // float
		constexpr auto ShadowDistanceFadeoutFraction = 0x3bc; // float
		constexpr auto bUseInsetShadowsForMovableObjects = 0x3c0; // char : 1
		constexpr auto FarShadowCascadeCount = 0x3c4; // int32_t
		constexpr auto FarShadowDistance = 0x3c8; // float
		constexpr auto DistanceFieldShadowDistance = 0x3cc; // float
		constexpr auto LightSourceAngle = 0x3d0; // float
		constexpr auto LightSourceSoftAngle = 0x3d4; // float
		constexpr auto TraceDistance = 0x3d8; // float
		constexpr auto LightmassSettings = 0x3dc; // FLightmassDirectionalLightSettings
		constexpr auto bCastModulatedShadows = 0x3ec; // char : 1
		constexpr auto ModulatedShadowColor = 0x3f0; // FColor
		constexpr auto ShadowAmount = 0x3f4; // float
		constexpr auto bUsedAsAtmosphereSunLight = 0x3f8; // char : 1
		constexpr auto AtmosphereSunLightIndex = 0x3fc; // int32_t
	}

	namespace n_UMaterialExpressionFontSampleParameter {
		constexpr auto ParameterName = 0x58; // FName
		constexpr auto ExpressionGUID = 0x60; // FGuid
		constexpr auto Group = 0x70; // FName
	}

	namespace n_ULevelStreaming {
		constexpr auto WorldAsset = 0x30; // TSoftObjectPtr<UWorld>
		constexpr auto PackageNameToLoad = 0x58; // FName
		constexpr auto LODPackageNames = 0x60; // TArray<FName>
		constexpr auto LevelTransform = 0x80; // FTransform
		constexpr auto LevelLODIndex = 0xb0; // int32_t
		constexpr auto StreamingPriority = 0xb4; // int32_t
		constexpr auto bShouldBeVisible = 0xba; // char : 1
		constexpr auto bShouldBeLoaded = 0xba; // char : 1
		constexpr auto bLocked = 0xba; // char : 1
		constexpr auto bIsStatic = 0xba; // char : 1
		constexpr auto bShouldBlockOnLoad = 0xba; // char : 1
		constexpr auto bShouldBlockOnUnload = 0xbb; // char : 1
		constexpr auto bDisableDistanceStreaming = 0xbb; // char : 1
		constexpr auto bDrawOnLevelStatusMap = 0xbb; // char : 1
		constexpr auto LevelColor = 0xbc; // FLinearColor
		constexpr auto EditorStreamingVolumes = 0xd0; // TArray<ALevelStreamingVolume*>
		constexpr auto MinTimeBetweenVolumeUnloadRequests = 0xe0; // float
		constexpr auto OnLevelLoaded = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnLevelUnloaded = 0xf8; // FMulticastInlineDelegate
		constexpr auto OnLevelShown = 0x108; // FMulticastInlineDelegate
		constexpr auto OnLevelHidden = 0x118; // FMulticastInlineDelegate
		constexpr auto LoadedLevel = 0x128; // ULevel*
		constexpr auto PendingUnloadLevel = 0x130; // ULevel*
	}

	namespace n_UMaterialExpressionSceneTexture {
		constexpr auto Coordinates = 0x48; // FExpressionInput
		constexpr auto SceneTextureId = 0x5c; // ESceneTextureId
		constexpr auto bFiltered = 0x5d; // bool
	}

	namespace n_USoundMix {
		constexpr auto bApplyEQ = 0x30; // char : 1
		constexpr auto EQPriority = 0x34; // float
		constexpr auto EQSettings = 0x38; // FAudioEQEffect
		constexpr auto SoundClassEffects = 0x78; // TArray<FSoundClassAdjuster>
		constexpr auto InitialDelay = 0x88; // float
		constexpr auto FadeInTime = 0x8c; // float
		constexpr auto Duration = 0x90; // float
		constexpr auto FadeOutTime = 0x94; // float
	}

	namespace n_UFriendsManager {
		constexpr auto Matchmaking = 0x50; // UMatchmaking*
		constexpr auto TimerConfig = 0x60; // FTaskTimerConfig
	}

	namespace n_UGobiDestructibleComponent {
		constexpr auto NavModComponent = 0xe8; // UGobiNavModifierComponent*
		constexpr auto HealthComponent = 0xf0; // UHealthComponent*
	}

	namespace n_UPlayerLevelResetComponent {
		constexpr auto NumResetLevels = 0x108; // int32_t
	}

	namespace n_URawInputSettings {
		constexpr auto DeviceConfigurations = 0x40; // TArray<FRawInputDeviceConfiguration>
		constexpr auto bRegisterDefaultDevice = 0x50; // bool
	}

	namespace n_ULandscapeSettings {
		constexpr auto MaxNumberOfLayers = 0x40; // int32_t
	}

	namespace n_UMediaPlayer {
		constexpr auto OnEndReached = 0x30; // FMulticastInlineDelegate
		constexpr auto OnMediaClosed = 0x40; // FMulticastInlineDelegate
		constexpr auto OnMediaOpened = 0x50; // FMulticastInlineDelegate
		constexpr auto OnMediaOpenFailed = 0x60; // FMulticastInlineDelegate
		constexpr auto OnPlaybackResumed = 0x70; // FMulticastInlineDelegate
		constexpr auto OnPlaybackSuspended = 0x80; // FMulticastInlineDelegate
		constexpr auto OnSeekCompleted = 0x90; // FMulticastInlineDelegate
		constexpr auto OnTracksChanged = 0xa0; // FMulticastInlineDelegate
		constexpr auto CacheAhead = 0xb0; // FTimespan
		constexpr auto CacheBehind = 0xb8; // FTimespan
		constexpr auto CacheBehindGame = 0xc0; // FTimespan
		constexpr auto NativeAudioOut = 0xc8; // bool
		constexpr auto PlayOnOpen = 0xc9; // bool
		constexpr auto Shuffle = 0xcc; // char : 1
		constexpr auto Loop = 0xcc; // char : 1
		constexpr auto Playlist = 0xd0; // UMediaPlaylist*
		constexpr auto PlaylistIndex = 0xd8; // int32_t
		constexpr auto TimeDelay = 0xe0; // FTimespan
		constexpr auto HorizontalFieldOfView = 0xe8; // float
		constexpr auto VerticalFieldOfView = 0xec; // float
		constexpr auto ViewRotation = 0xf0; // FRotator
		constexpr auto PlayerGuid = 0x128; // FGuid
	}

	namespace n_AFieldSystemActor {
		constexpr auto FieldSystemComponent = 0x2a0; // UFieldSystemComponent*
	}

	namespace n_UVendorPaginatorUserWidget {
		constexpr auto OnItemFocusReceived = 0x458; // FMulticastInlineDelegate
		constexpr auto OnItemFocusLost = 0x468; // FMulticastInlineDelegate
		constexpr auto OnItemClicked = 0x478; // FMulticastInlineDelegate
		constexpr auto OnPageInfoChanged = 0x488; // FMulticastInlineDelegate
		constexpr auto WidgetClass = 0x498; // UVendorItemUserWidget*
	}

	namespace n_AARSharedWorldGameMode {
		constexpr auto BufferSizePerChunk = 0x388; // int32_t
	}

	namespace n_UMovieSceneEventRepeaterSection {
		constexpr auto Event = 0xe8; // FMovieSceneEvent
	}

	namespace n_UPlantableItemComponent {
		constexpr auto OnSuccessfulPlant = 0x160; // FMulticastInlineDelegate
		constexpr auto LastKnownTraceResult = 0x174; // FHitResult
		constexpr auto SpawnedGhostActor = 0x200; // AActor*
		constexpr auto State = 0x230; // EPlantableItemState
		constexpr auto PlantedActor = 0x248; // AActor*
		constexpr auto PlantableGhostActor = 0x250; // AActor*
		constexpr auto CoolDownPeriod = 0x258; // float
		constexpr auto PlantingDuration = 0x25c; // float
		constexpr auto bRequireNavMeshToPlant = 0x260; // bool
		constexpr auto NavFilter = 0x268; // UNavigationQueryFilter*
		constexpr auto NavMeshTolerance = 0x270; // float
		constexpr auto MaxPlantDistance = 0x274; // float
		constexpr auto DesiredPlantRotation = 0x278; // FRotator
		constexpr auto TraceProfileName = 0x284; // FCollisionProfileName
		constexpr auto BoxHalfExtents = 0x28c; // FVector
		constexpr auto BoxOverlapLocalOffset = 0x298; // FVector
		constexpr auto InvalidOverlapProfileName = 0x2a4; // FCollisionProfileName
		constexpr auto InvalidFloorActorTags = 0x2b0; // TArray<FName>
		constexpr auto InvalidFloorGameplayTagQuery = 0x2c0; // FGameplayTagQuery
		constexpr auto MaxTraceDownDistance = 0x30c; // float
		constexpr auto AdditionalPlantRadius = 0x310; // float
		constexpr auto bCanPlantOnCharacters = 0x314; // bool
		constexpr auto AdditionalPlants1 = 0x318; // TArray<FAdditionalPlantData>
		constexpr auto AdditionalPlants2 = 0x328; // TArray<FAdditionalPlantData>
		constexpr auto PlantableSurfaceTypes = 0x338; // FPlantableRangeDefinition
		constexpr auto UseMontageFP = 0x348; // UAnimMontage*
		constexpr auto UseMontage3P = 0x350; // UAnimMontage*
		constexpr auto ChanceToExpendAmmoOnUse = 0x358; // float
		constexpr auto AKENotExpended = 0x360; // UAkAudioEvent*
	}

	namespace n_USignInTask_PSNUpgradeLogin {
		constexpr auto UserLoginTask = 0x88; // USignInTask_UserLogin*
	}

	namespace n_AAIController {
		constexpr auto bStartAILogicOnPossess = 0x338; // char : 1
		constexpr auto bStopAILogicOnUnposses = 0x338; // char : 1
		constexpr auto bLOSflag = 0x338; // char : 1
		constexpr auto bSkipExtraLOSChecks = 0x338; // char : 1
		constexpr auto bAllowStrafe = 0x338; // char : 1
		constexpr auto bWantsPlayerState = 0x338; // char : 1
		constexpr auto bSetControlRotationFromPawnOrientation = 0x338; // char : 1
		constexpr auto bUpdatePawnRotationToFocus = 0x338; // char : 1
		constexpr auto PathFollowingComponent = 0x340; // UPathFollowingComponent*
		constexpr auto BrainComponentClass = 0x348; // UBrainComponent*
		constexpr auto BrainComponent = 0x350; // UBrainComponent*
		constexpr auto PerceptionComponent = 0x358; // UAIPerceptionComponent*
		constexpr auto ActionsComp = 0x360; // UPawnActionsComponent*
		constexpr auto Blackboard = 0x368; // UBlackboardComponent*
		constexpr auto CachedGameplayTasksComponent = 0x370; // UGameplayTasksComponent*
		constexpr auto DefaultNavigationFilterClass = 0x378; // UNavigationQueryFilter*
		constexpr auto ReceiveMoveCompleted = 0x380; // FMulticastInlineDelegate
	}

	namespace n_UAnimBoneCompressionSettings {
		constexpr auto Codecs = 0x30; // TArray<UAnimBoneCompressionCodec*>
	}

	namespace n_UAudioDestructibleComponent {
		constexpr auto ImpactHeavyAudio = 0xe8; // UAkAudioEvent*
		constexpr auto ImpactLightAudio = 0xf0; // UAkAudioEvent*
		constexpr auto RiddenDamageSwtAudio = 0xf8; // UAkAudioEvent*
		constexpr auto DebrisFallAudio = 0x100; // UAkAudioEvent*
		constexpr auto BreakAudio = 0x108; // UAkAudioEvent*
		constexpr auto BreakSweetenersAudio = 0x110; // TArray<UAkAudioEvent*>
		constexpr auto HeavyTagContainer = 0x120; // FGameplayTagContainer
		constexpr auto DamageTypeEventMap = 0x140; // TMap<FGameplayTag, UAkAudioEvent*>
		constexpr auto ImpactOffset = 0x190; // FVector
		constexpr auto DebrisDelay = 0x19c; // float
		constexpr auto bIndestructible = 0x1a0; // bool
		constexpr auto ZeroDamageCount = 0x1a4; // int32_t
	}

	namespace n_UAttachmentDefinitionComponent {
		constexpr auto AttachmentDefinition = 0xe8; // FAttachmentDefinition
	}

	namespace n_UMovieSceneCameraCutSection {
		constexpr auto CameraGuid = 0xe8; // FGuid
		constexpr auto CameraBindingID = 0xf8; // FMovieSceneObjectBindingID
	}

	namespace n_UGameplayAction_Devour {
		constexpr auto DevourMontageSet = 0x210; // UMontageSet*
		constexpr auto DevourInterruptMontageSet = 0x218; // UMontageSet*
		constexpr auto DevourDuration = 0x220; // float
		constexpr auto HealthPercentToDisrupt = 0x224; // float
		constexpr auto DevourInterruptTagQuery = 0x228; // FGameplayTagQuery
		constexpr auto EnemyContextClass = 0x270; // UAnimContext_Enemy*
		constexpr auto BeginDevourEffects = 0x278; // TArray<UGameplayEffect*>
		constexpr auto BeginDevourTargetEffects = 0x288; // TArray<UGameplayEffect*>
		constexpr auto SuccessfulDevourEffects = 0x298; // TArray<UGameplayEffect*>
		constexpr auto SuccessfulDevourTargetEffects = 0x2a8; // TArray<UGameplayEffect*>
		constexpr auto DisruptedDevourEffects = 0x2b8; // TArray<UGameplayEffect*>
		constexpr auto BeginDevourRelativeRotation = 0x2c8; // FRotator
		constexpr auto SkeletalMeshTag = 0x2d4; // FGameplayTag
		constexpr auto BeginDevourSkeletalMeshBone = 0x2dc; // FName
		constexpr auto SuccessfulDevourSkeletalMeshBone = 0x2e4; // FName
	}

	namespace n_ACullDistanceVolume {
		constexpr auto CullDistances = 0x2d8; // TArray<FCullDistanceSizePair>
		constexpr auto bEnabled = 0x2e8; // char : 1
	}

	namespace n_UStaticMesh {
		constexpr auto MinLOD = 0x68; // FPerPlatformInt
		constexpr auto LpvBiasMultiplier = 0x6c; // float
		constexpr auto StaticMaterials = 0x70; // TArray<FStaticMaterial>
		constexpr auto LightmapUVDensity = 0x80; // float
		constexpr auto LightMapResolution = 0x84; // int32_t
		constexpr auto LightMapCoordinateIndex = 0x88; // int32_t
		constexpr auto DistanceFieldSelfShadowBias = 0x8c; // float
		constexpr auto BodySetup = 0x90; // UBodySetup*
		constexpr auto LODForCollision = 0x98; // int32_t
		constexpr auto bGenerateMeshDistanceField = 0x9c; // char : 1
		constexpr auto bStripComplexCollisionForConsole = 0x9c; // char : 1
		constexpr auto bHasNavigationData = 0x9c; // char : 1
		constexpr auto bAffectsNavigationOverride = 0x9c; // char : 1
		constexpr auto MaxDrawDistance = 0xa0; // float
		constexpr auto DetailMode = 0xa4; // EStaticMeshDetailMode
		constexpr auto bSupportUniformlyDistributedSampling = 0xa5; // char : 1
		constexpr auto bSupportPhysicalMaterialMasks = 0xa5; // char : 1
		constexpr auto bSupportRayTracing = 0xa5; // char : 1
		constexpr auto bIsBuiltAtRuntime = 0xa5; // char : 1
		constexpr auto CollectionOverrides = 0xa8; // FPrimitiveParameterCollectionOverrides
		constexpr auto bHeuristicVolumetricLighting = 0xd8; // char : 1
		constexpr auto bOverride_LightmapType = 0xd8; // char : 1
		constexpr auto LightmapType = 0xd9; // ELightmapType
		constexpr auto bHeuristicLightOccluder = 0xda; // char : 1
		constexpr auto bOverride_LightOccluder = 0xda; // char : 1
		constexpr auto bLightOccluder = 0xda; // char : 1
		constexpr auto bAffectsGroundFog = 0xda; // char : 1
		constexpr auto bAllowCPUAccess = 0xda; // char : 1
		constexpr auto bSupportGpuUniformlyDistributedSampling = 0xda; // char : 1
		constexpr auto Sockets = 0x100; // TArray<UStaticMeshSocket*>
		constexpr auto PositiveBoundsExtension = 0x120; // FVector
		constexpr auto NegativeBoundsExtension = 0x12c; // FVector
		constexpr auto ExtendedBounds = 0x138; // FBoxSphereBounds
		constexpr auto ElementToIgnoreForTexFactor = 0x154; // int32_t
		constexpr auto AssetUserData = 0x158; // TArray<UAssetUserData*>
		constexpr auto EditableMesh = 0x170; // UObject*
		constexpr auto NavCollision = 0x178; // UNavCollisionBase*
	}

	namespace n_ULeapComponent {
		constexpr auto OnLeapEnded = 0x1f8; // FMulticastInlineDelegate
		constexpr auto bLeapEnabled = 0x208; // bool
		constexpr auto LeapTuning = 0x210; // FLeapTuning
		constexpr auto Player = 0x3f8; // FPlayerLeapConfig
		constexpr auto bCrouchWhenCooking = 0x490; // bool
		constexpr auto bCrouchWhenLeaping = 0x491; // bool
		constexpr auto CookingMontages = 0x498; // TArray<UAnimMontage*>
		constexpr auto LeapFromWallMontages = 0x4a8; // TArray<UAnimMontage*>
		constexpr auto LeapFromWallCookingMontages = 0x4b8; // TArray<UAnimMontage*>
		constexpr auto ApplyEffects = 0x4c8; // TArray<UGameplayEffect*>
		constexpr auto CookingEffects = 0x4d8; // TArray<UGameplayEffect*>
		constexpr auto ReapplyEffectsOnLeapEnd = 0x4e8; // TArray<UGameplayEffect*>
		constexpr auto MoveIgnoreCharacters = 0x4f8; // FGameplayTagQuery
		constexpr auto AudioCookingStopEvents = 0x540; // TArray<FEnemyAudioEvent>
		constexpr auto AudioCookingInterruptedEvents = 0x550; // TArray<FEnemyAudioEvent>
		constexpr auto LaunchVelocity = 0x69c; // FVector
		constexpr auto QueuedEffectsToReapply = 0x6a8; // TArray<FQueuedEffect>
	}

	namespace n_UQuitMatchCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UIncapUsable_BP_C {
		constexpr auto UberGraphFrame = 0x570; // FPointerToUberGraphFrame
		constexpr auto DidIncapRevive = 0x578; // FMulticastInlineDelegate
		constexpr auto DidRescue = 0x588; // FMulticastInlineDelegate
		constexpr auto DidIncapReviveStart = 0x598; // FMulticastInlineDelegate
		constexpr auto RequiredUseTimeVOThreshold = 0x5a8; // float
	}

	namespace n_UParticleModuleRotationRate_Seeded {
		constexpr auto RandomSeedInfo = 0x68; // FParticleRandomSeedInfo
	}

	namespace n_UPhysicsCollisionHandler {
		constexpr auto ImpactThreshold = 0x30; // float
		constexpr auto ImpactReFireDelay = 0x34; // float
		constexpr auto DefaultImpactSound = 0x38; // USoundBase*
		constexpr auto LastImpactSoundTime = 0x40; // float
	}

	namespace n_UPlatformInterfaceWebResponse {
		constexpr auto OriginalURL = 0x30; // FString
		constexpr auto ResponseCode = 0x40; // int32_t
		constexpr auto Tag = 0x44; // int32_t
		constexpr auto StringResponse = 0x48; // FString
		constexpr auto BinaryResponse = 0x58; // TArray<char>
	}

	namespace n_UNavigationGraphNodeComponent {
		constexpr auto Node = 0x230; // FNavGraphNode
		constexpr auto NextNodeComponent = 0x248; // UNavigationGraphNodeComponent*
		constexpr auto PrevNodeComponent = 0x250; // UNavigationGraphNodeComponent*
	}

	namespace n_UBTTask_SetBlackboardTime {
		constexpr auto Offset = 0xa0; // float
	}

	namespace n_U3P_HeroAdd_Base_ABP_C {
		constexpr auto UberGraphFrame = 0x2c0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2c8; // FAnimNode_Root
		constexpr auto AnimGraphNode_SubInput = 0x2f8; // FAnimNode_LinkedInputPose
		constexpr auto AnimGraphNode_SaveCachedPose_6 = 0x370; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_5 = 0x428; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_8 = 0x4e0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_7 = 0x670; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_6 = 0x800; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_UseCachedPose_18 = 0x990; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_17 = 0x9b8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByGameplayTag = 0x9e0; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_5 = 0xaa8; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_UseCachedPose_16 = 0xc38; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_4 = 0xc60; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_UseCachedPose_15 = 0xdf0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_3 = 0xe18; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_UseCachedPose_14 = 0xfa8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace_2 = 0xfd0; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace = 0x1160; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_BlendListByBool_5 = 0x12f0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x1390; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_3 = 0x1408; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_BlendListByBool_4 = 0x14d0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose_13 = 0x1570; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_12 = 0x1598; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_4 = 0x15c0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0x1678; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_UseCachedPose_11 = 0x1738; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_3 = 0x1760; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SaveCachedPose_3 = 0x1800; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_10 = 0x18b8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_9 = 0x18e0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_8 = 0x1908; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0x1930; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0x1958; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0x1980; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool_2 = 0x19a8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x1a48; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_2 = 0x1ac0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_BlendListByBool = 0x1b88; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer = 0x1c28; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_ApplyAdditive = 0x1ca0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x1d68; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x1d90; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x1e48; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x1e70; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose = 0x1e98; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose = 0x1f50; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_RotateRootBone = 0x1f78; // FAnimNode_RotateRootBone
		constexpr auto HeroStance = 0x2018; // FGameplayTag
		constexpr auto AnimationState = 0x2020; // FGobiAnimationState
		constexpr auto AnimState3P = 0x2078; // FAnimState3P
		constexpr auto HeroAnimState = 0x2080; // FHeroAnimState3P
		constexpr auto AimOffsetWeight = 0x2480; // float
		constexpr auto UpperBody = 0x2484; // bool
		constexpr auto EnableLeftHandAdditive = 0x2485; // bool
		constexpr auto EnableRightHandAdditive = 0x2486; // bool
	}

	namespace n_UPlaneReflectionCaptureComponent {
		constexpr auto InfluenceRadiusScale = 0x2a8; // float
		constexpr auto PreviewInfluenceRadius = 0x2b0; // UDrawSphereComponent*
		constexpr auto PreviewCaptureBox = 0x2b8; // UBoxComponent*
	}

	namespace n_UBrainComponent {
		constexpr auto BlackboardComp = 0xf0; // UBlackboardComponent*
		constexpr auto AIOwner = 0xf8; // AAIController*
	}

	namespace n_UWindowTitleBarArea {
		constexpr auto bWindowButtonsEnabled = 0x160; // bool
		constexpr auto bDoubleClickTogglesFullscreen = 0x161; // bool
	}

	namespace n_UMaterialExpressionLogarithm10 {
		constexpr auto X = 0x48; // FExpressionInput
	}

	namespace n_UMaterialExpressionRuntimeVirtualTextureSample {
		constexpr auto Coordinates = 0x48; // FExpressionInput
		constexpr auto WorldPosition = 0x5c; // FExpressionInput
		constexpr auto MipValue = 0x70; // FExpressionInput
		constexpr auto VirtualTexture = 0x88; // URuntimeVirtualTexture*
		constexpr auto MaterialType = 0x90; // ERuntimeVirtualTextureMaterialType
		constexpr auto bSinglePhysicalSpace = 0x91; // bool
		constexpr auto MipValueMode = 0x92; // ERuntimeVirtualTextureMipValueMode
	}

	namespace n_UAnimEvalSet_Common_Melee_High_C {
		constexpr auto NavBlocked = 0x4f8; // FGameplayEval_NavBlocked
	}

	namespace n_UStaticMeshSocket {
		constexpr auto SocketName = 0x30; // FName
		constexpr auto RelativeLocation = 0x38; // FVector
		constexpr auto RelativeRotation = 0x44; // FRotator
		constexpr auto RelativeScale = 0x50; // FVector
		constexpr auto Tag = 0x60; // FString
	}

	namespace n_UAnimEvalSet_ClimbLink {
		constexpr auto IsNavLinkNext = 0xc0; // FGameplayEval_IsNavLinkNext
		constexpr auto ClimbLinkEval = 0x108; // FAnimEval_ClimbLink
		constexpr auto MaxStartingDistance = 0x180; // float
		constexpr auto MinClimbUp = 0x184; // float
		constexpr auto MaxClimbUp = 0x188; // float
		constexpr auto MinTopDistance = 0x18c; // float
		constexpr auto MaxTopDistance = 0x190; // float
		constexpr auto MinClimbDown = 0x194; // float
		constexpr auto MaxClimbDown = 0x198; // float
		constexpr auto ClimbNavAreas = 0x1a0; // TArray<UNavArea*>
		constexpr auto ClimbEvalWeight = 0x1b0; // float
		constexpr auto bNeedsClearPathToLinkStart = 0x1b4; // bool
	}

	namespace n_APlayerStart {
		constexpr auto PlayerStartTag = 0x2c8; // FName
	}

	namespace n_UPlayerSettingsBase {
		constexpr auto OnApplySettings = 0x30; // FMulticastInlineDelegate
		constexpr auto Version = 0x58; // uint32_t
	}

	namespace n_UForceFeedbackAttenuation {
		constexpr auto Attenuation = 0x30; // FForceFeedbackAttenuationSettings
	}

	namespace n_UInputComponent {
		constexpr auto CachedKeyToActionInfo = 0x158; // TArray<FCachedKeyToActionInfo>
	}

	namespace n_UEnvQueryGenerator_ProjectedPoints {
		constexpr auto ProjectionData = 0x58; // FEnvTraceData
	}

	namespace n_UActorComponent {
		constexpr auto PrimaryComponentTick = 0x38; // FActorComponentTickFunction
		constexpr auto ComponentTags = 0x68; // TArray<FName>
		constexpr auto ComponentGameplayTags = 0x78; // FGameplayTagContainer
		constexpr auto AssetUserData = 0xa8; // TArray<UAssetUserData*>
		constexpr auto UCSSerializationIndex = 0xbc; // int32_t
		constexpr auto bNetAddressable = 0xc0; // char : 1
		constexpr auto bReplicates = 0xc0; // char : 1
		constexpr auto bAutoActivate = 0xc1; // char : 1
		constexpr auto bIsActive = 0xc2; // char : 1
		constexpr auto bEditableWhenInherited = 0xc2; // char : 1
		constexpr auto bCanEverAffectNavigation = 0xc2; // char : 1
		constexpr auto bAssetOverridesCanEverAffectNavigation = 0xc2; // char : 1
		constexpr auto bIsEditorOnly = 0xc2; // char : 1
		constexpr auto CreationMethod = 0xc4; // EComponentCreationMethod
		constexpr auto OnComponentActivated = 0xc5; // FMulticastSparseDelegate
		constexpr auto OnComponentDeactivated = 0xc6; // FMulticastSparseDelegate
		constexpr auto UCSModifiedProperties = 0xc8; // TArray<FSimpleMemberReference>
	}

	namespace n_UInterpTrackMoveAxis {
		constexpr auto MoveAxis = 0x98; // EInterpMoveAxis
		constexpr auto LookupTrack = 0xa0; // FInterpLookupTrack
	}

	namespace n_UGobiAnimInstance {
		constexpr auto PawnOwner = 0x2b8; // APawn*
		constexpr auto MovementComponent = 0x2c0; // UGobiCharacterMovementComponent*
		constexpr auto BaseData = 0x2c8; // FGobiAnimationData
		constexpr auto AnimationState = 0x2dc; // FGobiAnimationState
		constexpr auto LastAnimationState = 0x334; // FGobiAnimationState
		constexpr auto bUseStartStopTransitions = 0x38c; // bool
		constexpr auto SpeedInterpAlpha = 0x390; // float
		constexpr auto bShowDebug = 0x394; // bool
		constexpr auto IsThirdPerson = 0x395; // bool
	}

	namespace n_UChallengeObjectiveKillData {
		constexpr auto EnemyTypeQuery = 0x70; // FGameplayTagQuery
	}

	namespace n_ULevelActorContainer {
		constexpr auto Actors = 0x30; // TArray<AActor*>
	}

	namespace n_UMaterialExpressionDDX {
		constexpr auto Value = 0x48; // FExpressionInput
	}

	namespace n_UGameplayEffectDamageNumbers {
		constexpr auto bDamageNumbersVisible = 0x240; // bool
	}

	namespace n_UGobiPlayerProfileManager {
		constexpr auto ProductsTable = 0x128; // UDataTable*
		constexpr auto MerchantsTable = 0x130; // UDataTable*
		constexpr auto CaravanSchemasTable = 0x138; // UDataTable*
		constexpr auto GameplayCardsTable = 0x140; // UDataTable*
		constexpr auto ItemToProductLookup = 0x198; // TMap<FDataTableRowHandle, FDataTableRowHandle>
	}

	namespace n_UHUDMissionsUserWidget {
		constexpr auto MissionWidget = 0x458; // UHUDMissionEntryUserWidget*
	}

	namespace n_USteeringBehavior_FocusLocation {
		constexpr auto DistanceThreshold = 0x58; // float
		constexpr auto MovementConeAngle = 0x5c; // float
		constexpr auto bUseDifferentConeAngleWhenStationary = 0x60; // bool
		constexpr auto StationaryConeAngle = 0x64; // float
		constexpr auto FocusFromLocation = 0x68; // UAnimContext_Transform*
		constexpr auto FocusToLocation = 0x70; // UAnimContext_Transform*
		constexpr auto MaxVisibleAge = 0x78; // float
		constexpr auto bUseDifferentMaxVisibleAgeWhenStationary = 0x7c; // bool
		constexpr auto MaxStationaryVisibleAge = 0x80; // float
		constexpr auto bInterpFromPrevFocusLoc = 0x84; // bool
		constexpr auto FocusInterpRate = 0x88; // float
		constexpr auto bUseRotationLimiter = 0x8c; // bool
		constexpr auto RotationLimiter = 0x90; // UAnimContext_Rotation*
		constexpr auto MaxAngleFromRotationLimiter = 0x98; // float
	}

	namespace n_UBoxReflectionCaptureComponent {
		constexpr auto BoxTransitionDistance = 0x2a8; // float
		constexpr auto PreviewInfluenceBox = 0x2b0; // UBoxComponent*
		constexpr auto PreviewCaptureBox = 0x2b8; // UBoxComponent*
	}

	namespace n_ALullSystem {
		constexpr auto RequiredSurvivorCount = 0x2a0; // int32_t
		constexpr auto NearbyBossMonsterDistance = 0x2a4; // float
		constexpr auto BossMonsterTags = 0x2a8; // FGameplayTagContainer
		constexpr auto OnLullBegin = 0x2c8; // FMulticastInlineDelegate
		constexpr auto OnLullEnd = 0x2d8; // FMulticastInlineDelegate
		constexpr auto LullActive = 0x2e8; // bool
		constexpr auto LullStatus = 0x2e9; // char
		constexpr auto GameDirector = 0x2f0; // UGameDirector*
		constexpr auto Collections = 0x2f8; // UGobiCollectionsSubsystem*
	}

	namespace n_AVomiter_VomitAcidPool_Water_BP_C {
		constexpr auto UberGraphFrame = 0x338; // FPointerToUberGraphFrame
		constexpr auto Box = 0x340; // UBoxComponent*
		constexpr auto GameplayEffectEmitter = 0x348; // UGameplayEffectEmitterComponent*
	}

	namespace n_UMicroTransactionBase {
		constexpr auto AvailableProducts = 0x40; // TArray<FPurchaseInfo>
		constexpr auto LastError = 0x50; // FString
		constexpr auto LastErrorSolution = 0x60; // FString
	}

	namespace n_ALMG01_BP_C {
		constexpr auto ADS = 0x520; // UADSComponent*
		constexpr auto FireModeSingleTrace = 0x528; // UFireModeSingleTraceComponent*
		constexpr auto BulletPenetration = 0x530; // UBulletPenetrationComponent*
		constexpr auto ClipAmmo = 0x538; // UClipAmmoComponent*
		constexpr auto Recoil = 0x540; // URecoilComponent*
		constexpr auto ClipReload = 0x548; // UClipReloadComponent*
		constexpr auto Spread = 0x550; // USpreadComponent*
		constexpr auto ItemAnimationData = 0x558; // UItemAnimationDataComponent*
	}

	namespace n_UParticleModuleLocationEmitterDirect {
		constexpr auto EmitterName = 0x38; // FName
	}

	namespace n_UAnimContext_PrevTransform {
		constexpr auto Current = 0x70; // UAnimContext_Transform*
	}

	namespace n_UAnimNotify_HideActor {
		constexpr auto bHidden = 0x40; // bool
	}

	namespace n_AParticleColliderActor {
		constexpr auto ParticleColliderComponent = 0x2a0; // UParticleColliderComponent*
		constexpr auto ParticleSystemComponent = 0x2a8; // UParticleSystemComponent*
	}

	namespace n_UMovieSceneNiagaraTrack {
		constexpr auto Sections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UAnimEvalSet_Mantle_C {
		constexpr auto MantleHeight = 0xc0; // FGameplayEval_MantleHeight
		constexpr auto MantleDepth = 0x110; // FGameplayEval_MantleDepth
	}

	namespace n_UTileView {
		constexpr auto EntryHeight = 0x3b0; // float
		constexpr auto EntryWidth = 0x3b4; // float
		constexpr auto TileAlignment = 0x3b8; // EListItemAlignment
		constexpr auto bWrapHorizontalNavigation = 0x3b9; // bool
	}

	namespace n_UGameplayTaskResource {
		constexpr auto ManualResourceID = 0x30; // int32_t
		constexpr auto AutoResourceID = 0x34; // int8_t
		constexpr auto bManuallySetID = 0x38; // char : 1
	}

	namespace n_UAnimEvalSet_Shared_HitReaction_FB_C {
		constexpr auto AvatarHealth = 0xc0; // FGameplayEval_Health
		constexpr auto AvatarHitDirection = 0x118; // FGameplayEval_Angle
		constexpr auto AvatarTags = 0x178; // FGameplayEval_GameplayTags
		constexpr auto RandomChance = 0x210; // FGameplayEval_RandomChance
		constexpr auto AvatarMovementMode = 0x260; // FGameplayEval_MovementMode
		constexpr auto AvatarSpeed = 0x2b8; // FGameplayEval_Speed
		constexpr auto DamageType = 0x318; // FGameplayEval_DamageType
	}

	namespace n_UGameplayEffectSprintComponent {
		constexpr auto SprintStaminaCostScaleMod = 0x240; // FGamePropertyFloatMod
		constexpr auto bAllowFiringWhileSprinting = 0x250; // bool
	}

	namespace n_UChallengeObjectiveTracker {
		constexpr auto Points = 0x30; // float
		constexpr auto Value = 0x34; // float
		constexpr auto ObjectiveData = 0x38; // UChallengeObjectiveData*
		constexpr auto ChallengeMonitor = 0x40; // UChallengeMonitorComponent*
	}

	namespace n_USizeBoxSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x60; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x61; // EVerticalAlignment
	}

	namespace n_UPlayer {
		constexpr auto PlayerController = 0x38; // APlayerController*
		constexpr auto CurrentNetSpeed = 0x40; // int32_t
		constexpr auto ConfiguredInternetSpeed = 0x44; // int32_t
		constexpr auto ConfiguredLanSpeed = 0x48; // int32_t
	}

	namespace n_UWaterSurfaceDef {
		constexpr auto HeightSimMaterial = 0x38; // UMaterialInterface*
		constexpr auto NormalMaterial = 0x40; // UMaterialInterface*
		constexpr auto ForceMaterial = 0x48; // UMaterialInterface*
		constexpr auto RippleMakers = 0x50; // UWaterRippleMakers*
		constexpr auto ProceduralFPS = 0x58; // float
		constexpr auto NormalHeightScale = 0x5c; // float
		constexpr auto TravelSpeed = 0x60; // float
		constexpr auto NumSimulationSteps = 0x64; // int32_t
		constexpr auto Dampening = 0x68; // float
		constexpr auto RenderTargetSize = 0x6c; // int32_t
		constexpr auto RenderTargetWorldSize = 0x70; // float
		constexpr auto EdgePixelsReservedForScroll = 0x74; // int32_t
		constexpr auto MaskPixelDistance = 0x78; // float
		constexpr auto MovementPredictionMult = 0x7c; // float
		constexpr auto MaxWaveHeight = 0x80; // float
		constexpr auto WaterLineAtten = 0x84; // float
		constexpr auto WaterSimSharedVolumePrefix = 0x88; // FString
		constexpr auto BuoyantRippleDef = 0x98; // UWaterRipplerDef*
		constexpr auto UseFlowingWater = 0xa0; // bool
		constexpr auto CubemapOverride = 0xa8; // UTextureCube*
	}

	namespace n_UInterpTrackSound {
		constexpr auto Sounds = 0x98; // TArray<FSoundTrackKey>
		constexpr auto bPlayOnReverse = 0xa8; // char : 1
		constexpr auto bContinueSoundOnMatineeEnd = 0xa8; // char : 1
		constexpr auto bSuppressSubtitles = 0xa8; // char : 1
		constexpr auto bTreatAsDialogue = 0xa8; // char : 1
		constexpr auto bAttach = 0xa8; // char : 1
	}

	namespace n_AMapSpatialInfoActor {
		constexpr auto MapSpatialInfoComponent = 0x2a0; // UMapSpatialInfoComponent*
		constexpr auto ActiveAreaSetComponent = 0x2a8; // UActiveAreaSetComponent*
	}

	namespace n_UMovieSceneActorReferenceSection {
		constexpr auto ActorReferenceData = 0xe8; // FMovieSceneActorReferenceData
		constexpr auto ActorGuidIndexCurve = 0x198; // FIntegralCurve
		constexpr auto ActorGuidStrings = 0x218; // TArray<FString>
	}

	namespace n_UButtonSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UChallengeObjectiveData {
		constexpr auto Icon = 0x30; // UTexture2D*
		constexpr auto DisplayName = 0x38; // FText
		constexpr auto Description = 0x50; // FText
		constexpr auto TrackerClass = 0x68; // UChallengeObjectiveTracker*
	}

	namespace n_UInterpTrackInstLinearColorProp {
		constexpr auto ResetColor = 0x60; // FLinearColor
	}

	namespace n_UParticleModuleVelocity_Seeded {
		constexpr auto RandomSeedInfo = 0xb8; // FParticleRandomSeedInfo
	}

	namespace n_UBTService_Distance {
		constexpr auto TargetPositionBlackboardKey = 0xa0; // FBlackboardKeySelector
		constexpr auto DistanceRanges = 0xc8; // FAIDataProviderUObjectValue
	}

	namespace n_USoundSourceBus {
		constexpr auto SourceBusChannels = 0x318; // ESourceBusChannels
		constexpr auto SourceBusDuration = 0x31c; // float
		constexpr auto bAutoDeactivateWhenSilent = 0x320; // char : 1
	}

	namespace n_UMovieSceneGeometryCollectionTrack {
		constexpr auto AnimationSections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_UUIScreenManager {
		constexpr auto OnInitialized = 0x50; // FMulticastInlineDelegate
		constexpr auto OnScreenOpened = 0x60; // FMulticastInlineDelegate
		constexpr auto OnScreenOpenedExDynamic = 0x70; // FMulticastInlineDelegate
		constexpr auto OnScreenClosed = 0x80; // FMulticastInlineDelegate
		constexpr auto OpenScreenSound = 0xd8; // UAkAudioEvent*
		constexpr auto CloseScreenSound = 0xe0; // UAkAudioEvent*
		constexpr auto SpeakerTest = 0xe8; // UUISpeakerTest*
		constexpr auto HubScreens = 0xf0; // TArray<FHubScreenInfo>
		constexpr auto bCanShowCorruptSavePopup = 0x100; // bool
		constexpr auto bLoadGlobalAssets = 0x101; // bool
		constexpr auto bBlockInput = 0x102; // bool
		constexpr auto InputPriority = 0x104; // int32_t
		constexpr auto PopupManager = 0x108; // UPopupManager*
		constexpr auto Screens = 0x110; // TArray<UUIScreen*>
		constexpr auto ScreensWaitingForPawn = 0x120; // TArray<UUIScreen*>
		constexpr auto InputComponent = 0x130; // UInputComponent*
		constexpr auto TweenManager = 0x138; // ATweenManagerActor*
		constexpr auto CardTooltip = 0x140; // UCardTooltipUserWidget*
		constexpr auto SavedScreenStates = 0x198; // TMap<UUIScreen*, FScreenStateWrapper>
		constexpr auto VivoxListener = 0x1f8; // UVivoxListener*
	}

	namespace n_UParticleModuleRotationOverLifetime {
		constexpr auto RotationOverLife = 0x38; // FRawDistributionFloat
		constexpr auto Scale = 0x68; // char : 1
	}

	namespace n_UAggroGrowthComponent {
		constexpr auto CurAggroLevel = 0xe8; // float
		constexpr auto AggroDefault = 0xec; // float
		constexpr auto AggroMinimum = 0xf0; // float
		constexpr auto AggroMaximum = 0xf4; // float
		constexpr auto AggroUpTime = 0xf8; // float
		constexpr auto AggroDownTime = 0xfc; // float
		constexpr auto TransitionTime = 0x100; // float
		constexpr auto DetectAggroTag = 0x104; // FGameplayTag
		constexpr auto RemoveOnAggroTags = 0x110; // FGameplayTagContainer
		constexpr auto ApplyAggroEffectsToOwner = 0x130; // TArray<UGameplayEffect*>
		constexpr auto OnAggroEnded = 0x140; // FMulticastInlineDelegate
	}

	namespace n_ULandscapeSplineSegment {
		constexpr auto Connections = 0x30; // FLandscapeSplineSegmentConnection [0x2]
		constexpr auto bAllowCullDistanceVolume = 0x60; // char : 1
		constexpr auto SplineInfo = 0x68; // FInterpCurveVector
		constexpr auto Points = 0x80; // TArray<FLandscapeSplineInterpPoint>
		constexpr auto Bounds = 0x90; // FBox
		constexpr auto LocalMeshComponents = 0xb0; // TArray<USplineMeshComponent*>
	}

	namespace n_UAnimNotify_SpawnThrowProjectileBase {
		constexpr auto ProjectileThrowClass = 0x40; // UProjectileThrowComponent*
	}

	namespace n_UHUDNotificationShelfEntryUserWidget {
		constexpr auto OnNotificationActionCompleted = 0x458; // FMulticastInlineDelegate
		constexpr auto PartyInviteIcon = 0x468; // UTexture2D*
	}

	namespace n_URecoilComponent {
		constexpr auto RecoilTuning = 0x410; // FRecoilTuning
	}

	namespace n_UDecalSubsystem {
		constexpr auto DecalManager = 0x38; // UDecalManager*
	}

	namespace n_UAnimNotify_EmissiveScaling {
		constexpr auto EmissiveValue = 0x40; // float
		constexpr auto TimeToScale = 0x44; // float
	}

	namespace n_AVFXCorpse {
		constexpr auto DissolveAudioEvent = 0x2a0; // UAkAudioEvent*
		constexpr auto FadeDuration = 0x2a8; // float
		constexpr auto FadeParticleSystem = 0x2b0; // UParticleSystem*
		constexpr auto FadeParticleBoneNames = 0x2b8; // TArray<FName>
		constexpr auto FadeDynamicMaterials = 0x2d8; // TArray<UMaterialInstanceDynamic*>
	}

	namespace n_UMessagePopupButton_WBP_C {
		constexpr auto UberGraphFrame = 0x2f0; // FPointerToUberGraphFrame
		constexpr auto TextButton = 0x2f8; // UTextButton_WBP_C*
	}

	namespace n_UGameplayEvalSet_Mantle_C {
		constexpr auto IsMantle = 0x78; // FGameplayEval_NavArea
		constexpr auto IsNavLinkNext = 0xe8; // FGameplayEval_IsNavLinkNext
		constexpr auto IsAtMantle = 0x130; // FGameplayEval_Distance
	}

	namespace n_UWeaponMovementSpeedComponent {
		constexpr auto WeaponMoveSpeedTuning = 0x160; // FWeaponMoveSpeedTuning
	}

	namespace n_AVomiter_VomitAcidPool_BP_C {
		constexpr auto UberGraphFrame = 0x338; // FPointerToUberGraphFrame
		constexpr auto Box = 0x340; // UBoxComponent*
		constexpr auto GameplayEffectEmitter = 0x348; // UGameplayEffectEmitterComponent*
	}

	namespace n_UTRSOnlineEntitlementsSteamSettings {
		constexpr auto EntitlementIds = 0x40; // TArray<int32_t>
	}

	namespace n_UMovieSceneSequence {
		constexpr auto PrecompiledEvaluationTemplate = 0x58; // FMovieSceneEvaluationTemplate
		constexpr auto DefaultCompletionMode = 0x348; // EMovieSceneCompletionMode
		constexpr auto bParentContextsAreSignificant = 0x349; // bool
		constexpr auto bPlayableDirectly = 0x34a; // bool
	}

	namespace n_UGameplayEffectHealthComponent {
		constexpr auto InitialMaxHealthMod = 0x248; // FGamePropertyFloatMod
		constexpr auto PermanentDamageScaleMod = 0x258; // FGamePropertyFloatMod
		constexpr auto HealthRegenPerSecondMod = 0x268; // FGamePropertyFloatMod
		constexpr auto HealthRegenWhenHealthBelow = 0x278; // float
		constexpr auto HealingReceivedScaleMod = 0x27c; // FGamePropertyFloatMod
		constexpr auto HealingAppliedScaleMod = 0x28c; // FGamePropertyFloatMod
		constexpr auto TemporaryHealingReceivedScaleMod = 0x29c; // FGamePropertyFloatMod
		constexpr auto TemporaryHealingAppliedScaleMod = 0x2ac; // FGamePropertyFloatMod
		constexpr auto FriendlyFireOverrideMod = 0x2bc; // FGamePropertyFloatMod
		constexpr auto CriticalHealChanceMod = 0x2cc; // FGamePropertyFloatMod
		constexpr auto CriticalHealMultiplierMod = 0x2dc; // FGamePropertyFloatMod
		constexpr auto HealthDepletedMaxHealthPenaltyMod = 0x2ec; // FGamePropertyFloatMod
		constexpr auto HealthRegenEffects = 0x300; // TArray<UGameplayEffect*>
		constexpr auto bDisableDamage = 0x310; // bool
		constexpr auto bDisableDeath = 0x311; // bool
		constexpr auto DisableHealthRegenOnRecentDamageTime = 0x314; // float
		constexpr auto bEnableOverheal = 0x318; // bool
	}

	namespace n_UMaterialExpressionCeil {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_USplineComponent {
		constexpr auto bShowSnapPointsToGround = 0x4b0; // bool
		constexpr auto bSnapPointsToGround = 0x4b1; // bool
		constexpr auto SearchChannel = 0x4b2; // ECollisionChannel
		constexpr auto SearchUp = 0x4b4; // float
		constexpr auto SearchDown = 0x4b8; // float
		constexpr auto Offset = 0x4bc; // float
		constexpr auto SplineCurves = 0x4c0; // FSplineCurves
		constexpr auto SplineInfo = 0x528; // FInterpCurveVector
		constexpr auto SplineRotInfo = 0x540; // FInterpCurveQuat
		constexpr auto SplineScaleInfo = 0x558; // FInterpCurveVector
		constexpr auto SplineReparamTable = 0x570; // FInterpCurveFloat
		constexpr auto bAllowSplineEditingPerInstance = 0x588; // bool
		constexpr auto ReparamStepsPerSegment = 0x58c; // int32_t
		constexpr auto Duration = 0x590; // float
		constexpr auto bStationaryEndpoints = 0x594; // bool
		constexpr auto bSplineHasBeenEdited = 0x595; // bool
		constexpr auto bModifiedByConstructionScript = 0x596; // bool
		constexpr auto ForcePointType = 0x597; // ESplinePointType
		constexpr auto bForcePointType = 0x598; // bool
		constexpr auto bInputSplinePointsToConstructionScript = 0x599; // bool
		constexpr auto bDrawDebug = 0x59a; // bool
		constexpr auto bClosedLoop = 0x59b; // bool
		constexpr auto bLoopPositionOverride = 0x59c; // bool
		constexpr auto LoopPosition = 0x5a0; // float
		constexpr auto DefaultUpVector = 0x5a4; // FVector
	}

	namespace n_UGobiMusicSystem {
		constexpr auto TickInterval = 0x60; // float
		constexpr auto MusicBank = 0x68; // UAkAudioBank*
		constexpr auto MusicEvent = 0x70; // UAkAudioEvent*
		constexpr auto MusicStopEvent = 0x78; // UAkAudioEvent*
		constexpr auto MusicStateBehaviorTable = 0x80; // UDataTable*
		constexpr auto LegalScreenStateRowHandle = 0x88; // FDataTableRowHandle
		constexpr auto SignInScreenStateRowHandle = 0xa8; // FDataTableRowHandle
		constexpr auto MovieStateRowHandle = 0xc8; // FDataTableRowHandle
		constexpr auto PreRoundStateRowHandle = 0xe8; // FDataTableRowHandle
		constexpr auto MissionFailStateRowHandle = 0x108; // FDataTableRowHandle
		constexpr auto MissionCompleteStateRowHandle = 0x128; // FDataTableRowHandle
		constexpr auto CreditsStateRowHandle = 0x148; // FDataTableRowHandle
		constexpr auto SafeRoomStateRowHandle = 0x168; // FDataTableRowHandle
		constexpr auto ExploreStateRowHandle = 0x188; // FDataTableRowHandle
		constexpr auto CombatStateRowHandle = 0x1a8; // FDataTableRowHandle
		constexpr auto IncapStateRowHandle = 0x1c8; // FDataTableRowHandle
		constexpr auto RevivingStateRowHandle = 0x1e8; // FDataTableRowHandle
		constexpr auto SnitcherHordeStateRowHandle = 0x208; // FDataTableRowHandle
		constexpr auto EndlessHordeStateRowHandle = 0x228; // FDataTableRowHandle
		constexpr auto PVPPrepStateRowHandle = 0x248; // FDataTableRowHandle
		constexpr auto PVPCollapseStateRowHandle = 0x268; // FDataTableRowHandle
		constexpr auto PVPHordeStateRowHandle = 0x288; // FDataTableRowHandle
		constexpr auto PVPSurvivalStateRowHandle = 0x2a8; // FDataTableRowHandle
		constexpr auto PVPEndedStateRowHandle = 0x2c8; // FDataTableRowHandle
		constexpr auto PVPEndNeutralStateRowHandle = 0x2e8; // FDataTableRowHandle
		constexpr auto PVPEndPositiveStateRowHandle = 0x308; // FDataTableRowHandle
		constexpr auto PVPEndNegativeStateRowHandle = 0x328; // FDataTableRowHandle
		constexpr auto MissionLoadingStateRowHandle = 0x348; // FDataTableRowHandle
		constexpr auto MusicEventTable = 0x368; // UDataTable*
		constexpr auto TRSGenericMusicEvents = 0x370; // UDataTable*
		constexpr auto CharacterMusics = 0x378; // TArray<UCharacterMusicInfo*>
		constexpr auto HordeThreatThreshold = 0x388; // float
		constexpr auto MinDyingDownDuration = 0x38c; // float
		constexpr auto MusicHordeState = 0x390; // EMusicHordeState
		constexpr auto MusicEventCallback = 0x420; // FDelegate
	}

	namespace n_UCameraShake {
		constexpr auto bSingleInstance = 0x30; // char : 1
		constexpr auto OscillationDuration = 0x34; // float
		constexpr auto OscillationBlendInTime = 0x38; // float
		constexpr auto OscillationBlendOutTime = 0x3c; // float
		constexpr auto RotOscillation = 0x40; // FROscillator
		constexpr auto LocOscillation = 0x64; // FVOscillator
		constexpr auto FOVOscillation = 0x88; // FFOscillator
		constexpr auto AnimPlayRate = 0x94; // float
		constexpr auto AnimScale = 0x98; // float
		constexpr auto AnimBlendInTime = 0x9c; // float
		constexpr auto AnimBlendOutTime = 0xa0; // float
		constexpr auto RandomAnimSegmentDuration = 0xa4; // float
		constexpr auto Anim = 0xa8; // UCameraAnim*
		constexpr auto bRandomAnimSegment = 0xb0; // char : 1
		constexpr auto CameraOwner = 0xc8; // APlayerCameraManager*
		constexpr auto ShakeScale = 0x158; // float
		constexpr auto OscillatorTimeRemaining = 0x15c; // float
		constexpr auto AnimInst = 0x160; // UCameraAnimInst*
	}

	namespace n_UOmenSubsystem {
		constexpr auto Configs = 0x40; // TArray<UOmenConfigAsset*>
	}

	namespace n_ASleeperProjectile {
		constexpr auto CollisionComponent = 0x658; // USphereComponent*
		constexpr auto SkeletalMeshComponent = 0x660; // USkeletalMeshComponent*
		constexpr auto Health = 0x668; // UHealthComponent*
		constexpr auto GameplayEffectsComponent = 0x670; // UGameplayEffectsComponent*
		constexpr auto GameplayTagsComponent = 0x678; // UGameplayTagsComponent*
		constexpr auto PingableComponent = 0x680; // UPingableComponent*
		constexpr auto LifeStateComponent = 0x688; // ULifeStateComponent*
		constexpr auto RagdollComponent = 0x690; // URagdollComponent*
		constexpr auto OnSleeperTargetSnared = 0x698; // FMulticastInlineDelegate
		constexpr auto OnSleeperSnareRelease = 0x6a8; // FMulticastInlineDelegate
		constexpr auto HordeLabel = 0x6b8; // FString
		constexpr auto SnareDuration = 0x6c8; // float
		constexpr auto DeathDuration = 0x6cc; // float
		constexpr auto ApplyHitEffectsToTarget = 0x6d0; // TArray<UGameplayEffect*>
		constexpr auto BlockingTargetTags = 0x6e0; // FGameplayTagContainer
		constexpr auto TriggerHordeCue = 0x700; // FGameplayTag
		constexpr auto OwnerSleeper = 0x708; // ASleeper*
		constexpr auto SnaredTarget = 0x710; // AGobiCharacter*
		constexpr auto AnimState = 0x718; // ESleeperAnimBehaviorState
		constexpr auto CollisionComponentAttachSocketName = 0x71c; // FName
		constexpr auto AttachSkeletalMeshBone = 0x724; // FName
		constexpr auto AttachRelativeLocation = 0x72c; // FVector
		constexpr auto AttachRelativeRotation = 0x738; // FRotator
		constexpr auto CollisionEnableDelay = 0x744; // float
		constexpr auto SleeperSlug = 0x748; // FString
		constexpr auto bTriggerHordeOnSnare = 0x790; // bool
	}

	namespace n_UMovieSceneAudioSection {
		constexpr auto Sound = 0xe8; // USoundBase*
		constexpr auto StartFrameOffset = 0xf0; // FFrameNumber
		constexpr auto StartOffset = 0xf4; // float
		constexpr auto AudioStartTime = 0xf8; // float
		constexpr auto AudioDilationFactor = 0xfc; // float
		constexpr auto AudioVolume = 0x100; // float
		constexpr auto SoundVolume = 0x108; // FMovieSceneFloatChannel
		constexpr auto PitchMultiplier = 0x1a8; // FMovieSceneFloatChannel
		constexpr auto AttachActorData = 0x248; // FMovieSceneActorReferenceData
		constexpr auto bSuppressSubtitles = 0x2f8; // bool
		constexpr auto bOverrideAttenuation = 0x2f9; // bool
		constexpr auto AttenuationSettings = 0x300; // USoundAttenuation*
		constexpr auto OnQueueSubtitles = 0x308; // FDelegate
		constexpr auto OnAudioFinished = 0x318; // FMulticastInlineDelegate
		constexpr auto OnAudioPlaybackPercent = 0x328; // FMulticastInlineDelegate
	}

	namespace n_UHealthDamageRanges {
		constexpr auto Ranges = 0x38; // TArray<FHealthDamageRange>
		constexpr auto GobiCharTagOverrides = 0x48; // TArray<FOverrideHealthDamageRanges>
	}

	namespace n_UEnvQueryGenerator {
		constexpr auto OptionName = 0x38; // FString
		constexpr auto ItemType = 0x48; // UEnvQueryItemType*
		constexpr auto bAutoSortTests = 0x50; // char : 1
	}

	namespace n_UUserDefinedCaptureProtocol {
		constexpr auto World = 0x60; // UWorld*
	}

	namespace n_UMaterialExpressionIf {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto AGreaterThanB = 0x70; // FExpressionInput
		constexpr auto AEqualsB = 0x84; // FExpressionInput
		constexpr auto ALessThanB = 0x98; // FExpressionInput
		constexpr auto EqualsThreshold = 0xac; // float
		constexpr auto ConstB = 0xb0; // float
		constexpr auto ConstAEqualsB = 0xb4; // float
	}

	namespace n_UMaterialExpressionSphericalParticleOpacity {
		constexpr auto Density = 0x48; // FExpressionInput
		constexpr auto ConstantDensity = 0x5c; // float
	}

	namespace n_UZombieAnimInstance {
		constexpr auto ZombieAnimState = 0x7c0; // FZombieAnimState
		constexpr auto AimSpeed = 0x7c4; // float
		constexpr auto AttackAimAlphaCurve = 0x7c8; // FGobiAnimationCurveData
		constexpr auto AttackAimAlpha = 0x7d8; // float
		constexpr auto AttackAimCounterYaw = 0x7dc; // float
		constexpr auto LocoCounterYaw = 0x7e0; // float
	}

	namespace n_UCharacterDetailsUserWidget {
		constexpr auto PerkEntryClass = 0x458; // UPerkDetailsEntryUserWidget*
	}

	namespace n_UBTService_LineOfSight {
		constexpr auto TargetBlackboardKey = 0xa0; // FBlackboardKeySelector
	}

	namespace n_UParticleModuleParameterDynamic_Seeded {
		constexpr auto RandomSeedInfo = 0x50; // FParticleRandomSeedInfo
	}

	namespace n_UPostRoundLineupUserWidget {
		constexpr auto OnShowLineup = 0x458; // FMulticastInlineDelegate
		constexpr auto PrioritizedPvEStats = 0x468; // TArray<EPostRoundLineupStat>
		constexpr auto PrioritizedPvPStats = 0x478; // TArray<EPostRoundLineupStat>
		constexpr auto StatToText = 0x488; // TMap<EPostRoundLineupStat, FText>
	}

	namespace n_UMaterialExpressionArctangentFast {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_AGobiAIController_BP_C {
		constexpr auto NavToAlertLoc_SC = 0x440; // USteeringControl*
		constexpr auto NavToAttackLoc_SC = 0x448; // USteeringControl*
		constexpr auto NavToWanderLoc_SC = 0x450; // USteeringControl*
		constexpr auto NavToHighPrioritySmartActor_SC = 0x458; // USteeringControl*
		constexpr auto NavToLowPrioritySmartActor_SC = 0x460; // USteeringControl*
		constexpr auto NavToAttackLoc_SB = 0x468; // USteeringBehavior*
		constexpr auto NavToAlertLoc_SB = 0x470; // USteeringBehavior*
		constexpr auto NavToWanderLoc_SB = 0x478; // USteeringBehavior*
		constexpr auto NavToRetreatLoc_SB = 0x480; // USteeringBehavior*
		constexpr auto NavToHighPrioritySmartActor_SB = 0x488; // USteeringBehavior*
		constexpr auto NavToLowPrioritySmartActor_SB = 0x490; // USteeringBehavior*
	}

	namespace n_UInterpTrackFloatBase {
		constexpr auto FloatTrack = 0x78; // FInterpCurveFloat
		constexpr auto CurveTension = 0x90; // float
	}

	namespace n_UMeshComponent {
		constexpr auto OverrideMaterials = 0x4b0; // TArray<UMaterialInterface*>
		constexpr auto bEnableMaterialParameterCaching = 0x4d0; // char : 1
	}

	namespace n_UTRSEventTriggerComponent {
		constexpr auto EventTriggers = 0xe8; // TArray<UPersonalEventTrigger*>
		constexpr auto ActiveTriggers = 0xf8; // TArray<UPersonalEventTrigger*>
	}

	namespace n_UGameplayContext_HeroHealthState {
		constexpr auto SubjectHero = 0x50; // UAnimContext_Actor*
	}

	namespace n_AGobiPlayerController_BP_C {
		constexpr auto UberGraphFrame = 0x898; // FPointerToUberGraphFrame
		constexpr auto AchievementTrackerComponent_BP = 0x8a0; // UAchievementTrackerComponent_BP_C*
		constexpr auto Chaser_MaxLeapToAttachDistance = 0x8a8; // float
		constexpr auto JumpInputPressed = 0x8b0; // FMulticastInlineDelegate
		constexpr auto SprintInputPressed = 0x8c0; // FMulticastInlineDelegate
	}

	namespace n_UBTDecorator_NavRaycast {
		constexpr auto TargetBBKey = 0x70; // FBlackboardKeySelector
	}

	namespace n_UCameraModifier_ScreenEffect {
		constexpr auto PostProcessSettings = 0x50; // FPostProcessSettings
		constexpr auto bPlayOnce = 0x5b0; // bool
		constexpr auto PostProcessActivationBlend = 0x5b8; // FFloatParameterBehavior
		constexpr auto PostProcessDeactivationBlend = 0x5c8; // FFloatParameterBehavior
		constexpr auto ParentMaterial = 0x5d8; // UMaterialInterface*
		constexpr auto ScalarParameters = 0x5e0; // TArray<FFloatMaterialParameter>
		constexpr auto VectorParameters = 0x5f0; // TArray<FVectorMaterialParameter>
		constexpr auto bUseDistanceFromSource = 0x600; // bool
		constexpr auto DistanceToStartScaling = 0x604; // float
		constexpr auto DistanceToRemoveEffectAt = 0x608; // float
		constexpr auto MaterialInstance = 0x610; // UMaterialInstanceDynamic*
		constexpr auto Source = 0x618; // TWeakObjectPtr<AActor>
		constexpr auto OwnerComponent = 0x628; // UScreenFXComponent*
	}

	namespace n_UMaterialExpressionLandscapeVisibilityMask {
		constexpr auto ExpressionGUID = 0x48; // FGuid
	}

	namespace n_UPlayerState_PostRoundStickTogetherComponent {
		constexpr auto Vote = 0x101; // EPostGameStickTogetherVote
	}

	namespace n_UTweenLinearColor {
		constexpr auto OnTweenStart = 0xb0; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0xc0; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0xd0; // FMulticastInlineDelegate
	}

	namespace n_UMovieSceneEventTriggerSection {
		constexpr auto EventChannel = 0xe8; // FMovieSceneEventChannel
	}

	namespace n_UMatchmakingSettingEntryUserWidget {
		constexpr auto UnlockedTextColor = 0x590; // FSlateColor
		constexpr auto LockedTextColor = 0x5c0; // FSlateColor
		constexpr auto SuccessfulClickSound = 0x5f0; // FSlateSound
		constexpr auto FailedClickSound = 0x608; // FSlateSound
	}

	namespace n_UTRSEngineSettings {
		constexpr auto bPrimitiveComponentDefaultToNoCollision = 0x40; // bool
		constexpr auto bPrimitiveComponentDefaultToGenerateOverlapEvents = 0x41; // bool
		constexpr auto bTextRenderComponentDefaultToEditorOnly = 0x42; // bool
		constexpr auto AkComponentDefaultOcclusionRefreshInterval = 0x44; // float
		constexpr auto MaxOcclusionDistance = 0x48; // float
		constexpr auto AudioOcclusionChannel = 0x4c; // ECollisionChannel
		constexpr auto SkinnedMeshComponentMeshUpdateFlag = 0x4d; // EVisibilityBasedAnimTickOption
		constexpr auto bEnableSkinnedMeshUpdateRateOptimizations = 0x4e; // bool
		constexpr auto bSkinnedMeshStopTickingWhenNoLongerAnimating = 0x4f; // bool
		constexpr auto bSkinnedMeshUpdateOverlapsOnAnimationFinalize = 0x50; // bool
		constexpr auto bSceneCaptureComponent_CaptureEveryFrame = 0x51; // bool
		constexpr auto bSceneCaptureComponent_CaptureOnMovement = 0x52; // bool
		constexpr auto bSceneCaptureActor_EditorOnly = 0x53; // bool
		constexpr auto ScreenMessageOffsetX = 0x54; // int32_t
		constexpr auto ScreenMessageOffsetY = 0x58; // int32_t
		constexpr auto IndirectLightingSmoothness = 0x5c; // float
		constexpr auto bCompileEditorWithBrofiler = 0x60; // bool
		constexpr auto bCompilePCGameWithBrofiler = 0x61; // bool
		constexpr auto bCompileAndroidGameWithBrofiler = 0x62; // bool
		constexpr auto BuildLightingSkipsBSP = 0x64; // int32_t
		constexpr auto bGameOverridesVisibilityId = 0x68; // bool
	}

	namespace n_UGameplayEffectStamina {
		constexpr auto bAsPercentOfMax = 0x244; // bool
		constexpr auto MinStaminaAmount = 0x248; // float
		constexpr auto InstantStamina = 0x24c; // float
		constexpr auto RecurringStamina = 0x250; // float
		constexpr auto RecurringStaminaFrequency = 0x254; // float
	}

	namespace n_UAREnvironmentCaptureProbeTexture {
		constexpr auto TextureType = 0x118; // EARTextureType
		constexpr auto Timestamp = 0x11c; // float
		constexpr auto ExternalTextureGuid = 0x120; // FGuid
		constexpr auto Size = 0x130; // FVector2D
	}

	namespace n_UMovieSceneColorTrack {
		constexpr auto bIsSlateColor = 0x90; // bool
	}

	namespace n_UCharacterSelect {
		constexpr auto SelectedCharacterMapping = 0x30; // TArray<FCharacterSelectMapping>
		constexpr auto HeroDefinitions = 0x40; // UDataTable*
	}

	namespace n_ADoor {
		constexpr auto InternalRootComponent = 0x2a0; // USceneComponent*
		constexpr auto DoorHingeComponent = 0x2a8; // USceneComponent*
		constexpr auto DoorMeshComponent = 0x2b0; // UStaticMeshComponent*
		constexpr auto UseTriggerVolumeComponent = 0x2b8; // UBoxComponent*
		constexpr auto PingableComponent = 0x2c0; // UPingableComponent*
		constexpr auto AkAcousticPortalComponent = 0x2c8; // UAkAcousticPortalComponent*
		constexpr auto NavModifierComponent = 0x2d0; // UGobiNavModifierComponent*
		constexpr auto NavLinkComponent = 0x2d8; // UGobiNavLinkComponent*
		constexpr auto NavRedirector = 0x2e8; // UNavRedirectorComponent*
		constexpr auto bCastStaticShadow = 0x2f0; // bool
		constexpr auto bTriggerHorde = 0x2f1; // bool
		constexpr auto bAffectAISteeringSeparation = 0x2f2; // bool
		constexpr auto DoorNavModifiers = 0x2f8; // FDoorNavArea
		constexpr auto DoorNavLinkAreas = 0x308; // FDoorNavArea
		constexpr auto bShouldStumbleWhenMoving = 0x318; // bool
		constexpr auto StumbleDamageType = 0x320; // UGobiDamageType*
		constexpr auto SingleOpenStartSound = 0x328; // UAkAudioEvent*
		constexpr auto SingleOpenEndSound = 0x330; // UAkAudioEvent*
		constexpr auto SingleCloseStartSound = 0x338; // UAkAudioEvent*
		constexpr auto SingleCloseEndSound = 0x340; // UAkAudioEvent*
		constexpr auto DoubleOpenStartSound = 0x348; // UAkAudioEvent*
		constexpr auto DoubleOpenEndSound = 0x350; // UAkAudioEvent*
		constexpr auto DoubleCloseStartSound = 0x358; // UAkAudioEvent*
		constexpr auto DoubleCloseEndSound = 0x360; // UAkAudioEvent*
		constexpr auto OnDoorActionBegin = 0x368; // FMulticastInlineDelegate
		constexpr auto OnDoorActionComplete = 0x378; // FMulticastInlineDelegate
		constexpr auto OnDoorInitialized = 0x388; // FMulticastInlineDelegate
		constexpr auto SyncedDoor = 0x398; // ADoor*
		constexpr auto OpenAnimation = 0x3a0; // UAnimMontage*
		constexpr auto AlreadyOpenedAnimation = 0x3a8; // UAnimMontage*
		constexpr auto CloseAnimation = 0x3b0; // UAnimMontage*
		constexpr auto ClosedAnimation = 0x3b8; // UAnimMontage*
		constexpr auto DoorOpenCurve = 0x3c0; // UCurveFloat*
		constexpr auto DoorCloseCurve = 0x3c8; // UCurveFloat*
		constexpr auto DamageVolumeOpenDoorCollision = 0x3d0; // FCollisionProfileName
		constexpr auto DamageVolumeClosedDoorCollision = 0x3d8; // FCollisionProfileName
		constexpr auto MovementTime = 0x41c; // float
		constexpr auto OpenDelay = 0x420; // float
		constexpr auto AnimationLengthOverride = 0x424; // float
		constexpr auto OpenYawRotation = 0x428; // float
		constexpr auto OpenLocation = 0x42c; // FVector
		constexpr auto bCanOpenReversed = 0x438; // bool
		constexpr auto bStartLocked = 0x439; // bool
		constexpr auto bSingleUse = 0x43a; // bool
		constexpr auto bHasCollisionWhenOpen = 0x43b; // bool
		constexpr auto bHasCollisionWhenMoving = 0x43c; // bool
		constexpr auto RequiredUnlockTime = 0x440; // float
		constexpr auto bAutoClose = 0x444; // bool
		constexpr auto AutoCloseTime = 0x448; // float
		constexpr auto NavOpenThreshold = 0x450; // float
		constexpr auto DoorStartOpeningCue = 0x454; // FGameplayTag
		constexpr auto DoorStartClosingCue = 0x45c; // FGameplayTag
		constexpr auto DoorFinishClosingCue = 0x464; // FGameplayTag
		constexpr auto DoorFinishOpeningCue = 0x46c; // FGameplayTag
		constexpr auto HordeStartCue = 0x474; // FGameplayTag
		constexpr auto DesiredDoorState = 0x4a8; // EDoorState
		constexpr auto bRequestLocked = 0x4a9; // bool
		constexpr auto AlarmMode = 0x4aa; // EAlarmMode
		constexpr auto AlarmChance = 0x4ac; // float
		constexpr auto AlarmDuration = 0x4b0; // float
		constexpr auto AlarmDamageActivationRange = 0x4b4; // float
		constexpr auto HitsToTriggerAlarm = 0x4b8; // int32_t
		constexpr auto bAlarmTriggersHorde = 0x4bc; // bool
		constexpr auto bDamageFromNonHeroesDisablesAlarm = 0x4bd; // bool
		constexpr auto AlarmOmenTags = 0x4c0; // FGameplayTagContainer
		constexpr auto AlarmAudioEvents = 0x4e0; // TArray<FDoorAlarmAudio>
		constexpr auto AlarmActors = 0x4f0; // TArray<AActor*>
		constexpr auto AlarmAkComponent = 0x500; // UAkComponent*
		constexpr auto AlarmSceneComponents = 0x528; // TArray<USceneComponent*>
		constexpr auto AlarmLoop = 0x550; // UAkAudioEvent*
		constexpr auto AlarmLoopStop = 0x558; // UAkAudioEvent*
		constexpr auto AlarmBeepSound = 0x560; // UAkAudioEvent*
		constexpr auto AlarmBeepRate = 0x568; // float
		constexpr auto AlarmState = 0x56c; // EAlarmState
	}

	namespace n_UAISpawnPointBudgets {
		constexpr auto Budgets = 0x38; // TArray<FSpawnPointBudget>
	}

	namespace n_UEnvQueryGenerator_Teammates {
		constexpr auto bPlayersOnly = 0x58; // bool
		constexpr auto TagQuery = 0x60; // FAIDataProviderGameplayTagQueryContainerValue
	}

	namespace n_UScrollBoxWidgetStyle {
		constexpr auto ScrollBoxStyle = 0x38; // FScrollBoxStyle
	}

	namespace n_U3P_Hero_ABP_C {
		constexpr auto UberGraphFrame = 0xf90; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_RigidBody = 0xfa0; // FAnimNode_RigidBody
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0x1530; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_SaveCachedPose_13 = 0x1550; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_PoseBlendNode = 0x1608; // FAnimNode_PoseBlendNode
		constexpr auto AnimGraphNode_CurveSource = 0x16a0; // FAnimNode_CurveSource
		constexpr auto AnimGraphNode_ModifyBone_3 = 0x16e0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_LegIK = 0x17e8; // FAnimNode_LegIK
		constexpr auto AnimGraphNode_ModifyBone_2 = 0x18e0; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_ModifyBone = 0x19e8; // FAnimNode_ModifyBone
		constexpr auto AnimGraphNode_SlopeWarping = 0x1af0; // FAnimNode_SlopeWarping
		constexpr auto __CustomProperty_AimOffsetWeight_81EF3843487DC4C90A795AABE38C2FA4 = 0x1c90; // float
		constexpr auto __CustomProperty_HeroAnimState_81EF3843487DC4C90A795AABE38C2FA4 = 0x1ca0; // FHeroAnimState3P
		constexpr auto __CustomProperty_AnimState3P_81EF3843487DC4C90A795AABE38C2FA4 = 0x20a0; // FAnimState3P
		constexpr auto __CustomProperty_AnimationState_81EF3843487DC4C90A795AABE38C2FA4 = 0x20a8; // FGobiAnimationState
		constexpr auto __CustomProperty_HeroStance_81EF3843487DC4C90A795AABE38C2FA4 = 0x2100; // FGameplayTag
		constexpr auto AnimGraphNode_SubInstance_2 = 0x2108; // FAnimNode_LinkedAnimGraph
		constexpr auto __CustomProperty_HeroDraggedAnimData_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x21b0; // FHeroDraggedAnimData3P
		constexpr auto __CustomProperty_AnimState3P_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x21c4; // FAnimState3P
		constexpr auto __CustomProperty_BlendTime_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x21cc; // float
		constexpr auto __CustomProperty_LocoBlendTime_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x21d0; // float
		constexpr auto __CustomProperty_Leaning_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x21d4; // FLocoLeaning
		constexpr auto __CustomProperty_LadderState_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x21e0; // FLadderAnimState
		constexpr auto __CustomProperty_LocoPredict_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x21e8; // FLocomotionPrediction
		constexpr auto __CustomProperty_TurnInPlaceState_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x2250; // FLocoTurnInPlace
		constexpr auto __CustomProperty_HeroAnimState_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x2300; // FHeroAnimState3P
		constexpr auto __CustomProperty_AnimationState_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x2700; // FGobiAnimationState
		constexpr auto __CustomProperty_LocomotionData_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x2758; // FAnimLocomotionData
		constexpr auto __CustomProperty_ForwardDirection_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x2798; // FAnimDirectionRange
		constexpr auto __CustomProperty_RightDirection_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x27b4; // FAnimDirectionRange
		constexpr auto __CustomProperty_LeftDirection_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x27d0; // FAnimDirectionRange
		constexpr auto __CustomProperty_BackwardDirection_6F9D7EFD4B3DCFD3AF55CD9C7A86368D = 0x27ec; // FAnimDirectionRange
		constexpr auto AnimGraphNode_SubInstance = 0x2808; // FAnimNode_LinkedAnimGraph
		constexpr auto AnimGraphNode_Slot_8 = 0x28b0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_LayeredBoneBlend_5 = 0x28f8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_LayeredBoneBlend_4 = 0x29b8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_Slot_7 = 0x2a78; // FAnimNode_Slot
		constexpr auto AnimGraphNode_BlendListByBool_4 = 0x2ac0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendListByGameplayTag = 0x2b60; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_SaveCachedPose_12 = 0x2c28; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_23 = 0x2ce0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_6 = 0x2d08; // FAnimNode_Slot
		constexpr auto AnimGraphNode_LayeredBoneBlend_3 = 0x2d50; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_Slot_5 = 0x2e10; // FAnimNode_Slot
		constexpr auto AnimGraphNode_SaveCachedPose_11 = 0x2e58; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_Slot_4 = 0x2f10; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_22 = 0x2f58; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_21 = 0x2f80; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend_2 = 0x2fa8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendListByBool_3 = 0x3068; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SaveCachedPose_10 = 0x3108; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_20 = 0x31c0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_19 = 0x31e8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_18 = 0x3210; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_17 = 0x3238; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_16 = 0x3260; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_15 = 0x3288; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_9 = 0x32b0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_14 = 0x3368; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot_3 = 0x3390; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_13 = 0x33d8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_8 = 0x3400; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_12 = 0x34b8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_11 = 0x34e0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_7 = 0x3508; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_10 = 0x35c0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_9 = 0x35e8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByEnum = 0x3610; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_4 = 0x36c0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_3 = 0x37a8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_2 = 0x3890; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer = 0x3978; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_OrientationWarping_4 = 0x3a60; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_3 = 0x3ad0; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_2 = 0x3b40; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping = 0x3bb0; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_RotationOffsetBlendSpace = 0x3c20; // FAnimNode_RotationOffsetBlendSpace
		constexpr auto AnimGraphNode_SaveCachedPose_6 = 0x3db0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TwoBoneIK_2 = 0x3e70; // FAnimNode_TwoBoneIK
		constexpr auto AnimGraphNode_TwoBoneIK = 0x4050; // FAnimNode_TwoBoneIK
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x4230; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_SaveCachedPose_5 = 0x4250; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_4 = 0x4308; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_8 = 0x43c0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_LayeredBoneBlend = 0x43e8; // FAnimNode_LayeredBoneBlend
		constexpr auto AnimGraphNode_BlendListByBool_2 = 0x44a8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_Slot_2 = 0x4548; // FAnimNode_Slot
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0x4590; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0x45b8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_SaveCachedPose_3 = 0x45e0; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_HandIKRetargeting = 0x4698; // FAnimNode_HandIKRetargeting
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x47b8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0x4870; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x4898; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_Slot = 0x48c0; // FAnimNode_Slot
		constexpr auto AnimGraphNode_RotateRootBone = 0x4908; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_SaveCachedPose = 0x49a8; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_Root = 0x4a60; // FAnimNode_Root
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x4a90; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x4ab8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_BlendListByBool = 0x4ae0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_UseCachedPose = 0x4b80; // FAnimNode_UseCachedPose
		constexpr auto HeroStance = 0x4ba8; // FGameplayTag
		constexpr auto LocoBlendTime = 0x4bb0; // float
		constexpr auto WarpAngle = 0x4bb4; // float
		constexpr auto WarpHipOffset = 0x4bb8; // float
	}

	namespace n_UNodeMappingContainer {
		constexpr auto SourceItems = 0x30; // TMap<FName, FNodeItem>
		constexpr auto TargetItems = 0x80; // TMap<FName, FNodeItem>
		constexpr auto SourceToTarget = 0xd0; // TMap<FName, FName>
		constexpr auto SourceAsset = 0x120; // TSoftObjectPtr<UObject>
		constexpr auto TargetAsset = 0x148; // TSoftObjectPtr<UObject>
	}

	namespace n_AMolotov_InitialFlame_BP_C {
		constexpr auto UberGraphFrame = 0x310; // FPointerToUberGraphFrame
		constexpr auto MolotovGrowth = 0x318; // UMolotovGrowthComponent*
		constexpr auto Molotov_Fire_AkComp = 0x320; // UAkComponent*
	}

	namespace n_UObjectPoolSubsystem {
		constexpr auto Pools = 0x38; // TMap<UObject*, FClassPool>
	}

	namespace n_UMenuAnchor {
		constexpr auto MenuClass = 0x160; // UUserWidget*
		constexpr auto OnGetMenuContentEvent = 0x168; // FDelegate
		constexpr auto Placement = 0x178; // EMenuPlacement
		constexpr auto bFitInWindow = 0x179; // bool
		constexpr auto ShouldDeferPaintingAfterWindowContent = 0x17a; // bool
		constexpr auto UseApplicationMenuStack = 0x17b; // bool
		constexpr auto OnMenuOpenChanged = 0x180; // FMulticastInlineDelegate
	}

	namespace n_UCameraShakeSourceComponent {
		constexpr auto Attenuation = 0x230; // ECameraShakeAttenuation
		constexpr auto InnerAttenuationRadius = 0x234; // float
		constexpr auto OuterAttenuationRadius = 0x238; // float
		constexpr auto CameraShake = 0x240; // UCameraShake*
		constexpr auto bAutoPlay = 0x248; // bool
	}

	namespace n_UMaterialExpressionVirtualTextureFeatureSwitch {
		constexpr auto No = 0x48; // FExpressionInput
		constexpr auto Yes = 0x5c; // FExpressionInput
	}

	namespace n_UAnimBoneCompressionCodec_ACLDatabase {
		constexpr auto DatabaseAsset = 0x40; // UAnimationCompressionLibraryDatabase*
	}

	namespace n_ULootSystemMapConfigAsset {
		constexpr auto SystemConfigs = 0x38; // TMap<FFilePath, FLootSystemConfig>
	}

	namespace n_UObjectLibrary {
		constexpr auto ObjectBaseClass = 0x30; // UObject*
		constexpr auto bHasBlueprintClasses = 0x38; // bool
		constexpr auto Objects = 0x40; // TArray<UObject*>
		constexpr auto WeakObjects = 0x50; // TArray<TWeakObjectPtr<UObject>>
		constexpr auto bUseWeakReferences = 0x60; // bool
		constexpr auto bIsFullyLoaded = 0x61; // bool
	}

	namespace n_UGameInstance {
		constexpr auto LocalPlayers = 0x40; // TArray<ULocalPlayer*>
		constexpr auto OnlineSession = 0x50; // UOnlineSession*
		constexpr auto ReferencedObjects = 0x58; // TArray<UObject*>
		constexpr auto PerModuleDataObjects = 0xd8; // TArray<UObject*>
	}

	namespace n_UAkRoomComponent {
		constexpr auto bEnable = 0x258; // char : 1
		constexpr auto NextLowerPriorityComponent = 0x260; // UAkRoomComponent*
		constexpr auto Priority = 0x268; // float
		constexpr auto WallOcclusion = 0x26c; // float
		constexpr auto AuxBusName = 0x270; // FString
		constexpr auto ReverbLevel = 0x280; // float
		constexpr auto AuxSendLevel = 0x284; // float
		constexpr auto AutoPost = 0x288; // bool
	}

	namespace n_UEnvQueryContext_SpawnContextHero {
		constexpr auto bCurrentHeroOnly = 0x30; // bool
	}

	namespace n_UMovieSceneEasingExternalCurve {
		constexpr auto Curve = 0x38; // UCurveFloat*
	}

	namespace n_UGameplayEvalSet_ClimbLink_C {
		constexpr auto IsNavLinkNext = 0x78; // FGameplayEval_IsNavLinkNext
		constexpr auto IsAvatarFacing = 0xc0; // FGameplayEval_IsAvatarFacing
		constexpr auto ClimbLink = 0x118; // FGameplayEval_ClimbLink
	}

	namespace n_UForceFeedbackEffect {
		constexpr auto ChannelDetails = 0x30; // TArray<FForceFeedbackChannelDetails>
		constexpr auto Duration = 0x40; // float
	}

	namespace n_UGameplayEffectRadialDamage {
		constexpr auto RadialDamageSet = 0x238; // FRadialDamageSet
		constexpr auto DamageTypeClass = 0x258; // UGobiDamageType*
		constexpr auto bCalculatePermanentDamageAsPctOfDamage = 0x260; // bool
	}

	namespace n_UMaterialExpressionComment {
		constexpr auto SizeX = 0x48; // int32_t
		constexpr auto SizeY = 0x4c; // int32_t
		constexpr auto Text = 0x50; // FString
		constexpr auto CommentColor = 0x60; // FLinearColor
		constexpr auto FontSize = 0x70; // int32_t
	}

	namespace n_AMainMenuPlayerController {
		constexpr auto OnSignedIn = 0x7f8; // FMulticastInlineDelegate
		constexpr auto OnSignedOut = 0x808; // FMulticastInlineDelegate
	}

	namespace n_UMaterialExpressionSphereMask {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
		constexpr auto Radius = 0x70; // FExpressionInput
		constexpr auto Hardness = 0x84; // FExpressionInput
		constexpr auto AttenuationRadius = 0x98; // float
		constexpr auto HardnessPercent = 0x9c; // float
	}

	namespace n_UParticleModuleEventReceiverSpawn {
		constexpr auto SpawnCount = 0x48; // FRawDistributionFloat
		constexpr auto bUseParticleTime = 0x78; // char : 1
		constexpr auto bUsePSysLocation = 0x78; // char : 1
		constexpr auto bInheritVelocity = 0x78; // char : 1
		constexpr auto InheritVelocityScale = 0x80; // FRawDistributionVector
		constexpr auto PhysicalMaterials = 0xc8; // TArray<UPhysicalMaterial*>
		constexpr auto bBanPhysicalMaterials = 0xd8; // char : 1
	}

	namespace n_UAnimContext_NavCast {
		constexpr auto CastFrom = 0x50; // UAnimContext_Actor*
		constexpr auto CastTo = 0x58; // UAnimContext_Transform*
		constexpr auto QueryFilter = 0x60; // UNavigationQueryFilter*
		constexpr auto bProjectPointsOntoNavMesh = 0x68; // bool
	}

	namespace n_UMaterialExpressionDistance {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
	}

	namespace n_USystemSettingsScreen {
		constexpr auto SafeToLeaveText = 0x558; // UTextBlock*
	}

	namespace n_UEnvQueryGenerator_PathingSpline {
		constexpr auto NumPointsToConsiderAlongSpline = 0x58; // int32_t
		constexpr auto DistanceInterval = 0x5c; // float
		constexpr auto NumPointsToConsiderWide = 0x60; // int32_t
		constexpr auto WidthInterval = 0x64; // float
		constexpr auto NavRaycastLength = 0x68; // float
	}

	namespace n_UZombieUpgradePreviewUserWidget {
		constexpr auto UpgradeIcon = 0x458; // UImage*
		constexpr auto LevelText = 0x460; // UTextBlock*
	}

	namespace n_ARuntimeVirtualTextureVolume {
		constexpr auto VirtualTextureComponent = 0x2a0; // URuntimeVirtualTextureComponent*
	}

	namespace n_ABuilderActor {
		constexpr auto IsLocked = 0x2a8; // bool
		constexpr auto PlacedActors = 0x2b0; // TArray<TWeakObjectPtr<AActor>>
		constexpr auto ParentProceduralActorsPath = 0x2c0; // FName
		constexpr auto IsExplicitBuilding = 0x2c8; // bool
		constexpr auto bIsPrefabBroken = 0x2c9; // bool
		constexpr auto LatestVersion = 0x2cc; // uint32_t
		constexpr auto PlacedVersion = 0x2d0; // uint32_t
	}

	namespace n_UDataAsset {
		constexpr auto NativeClass = 0x30; // UDataAsset*
	}

	namespace n_UPlayerPerkMod {
		constexpr auto PerkSets = 0xd0; // TArray<FPerkSet>
		constexpr auto DesiredPerkCount = 0xe0; // char
	}

	namespace n_APlayerSlotManager {
		constexpr auto Config = 0x2a0; // FSlotManagerConfig
		constexpr auto bSupportsBots = 0x2b0; // bool
		constexpr auto TeamSlots = 0x2b8; // TArray<FTeamSlots>
		constexpr auto OnPlayerSlotClaimed = 0x2d0; // FMulticastInlineDelegate
		constexpr auto OnSlotReplacedWithBot = 0x2e0; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotControlled = 0x2f0; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotReleased = 0x300; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotControlReleased = 0x310; // FMulticastInlineDelegate
		constexpr auto OnTeamsSwitched = 0x320; // FMulticastInlineDelegate
		constexpr auto DedicatedServerManager = 0x360; // UDedicatedServerManager*
	}

	namespace n_UMovieScene3DPathSection {
		constexpr auto TimingCurve = 0x110; // FMovieSceneFloatChannel
		constexpr auto FrontAxisEnum = 0x1b0; // MovieScene3DPathSection_Axis
		constexpr auto UpAxisEnum = 0x1b1; // MovieScene3DPathSection_Axis
		constexpr auto bFollow = 0x1b4; // char : 1
		constexpr auto bReverse = 0x1b4; // char : 1
		constexpr auto bForceUpright = 0x1b4; // char : 1
	}

	namespace n_UGizmoAxisTranslationParameterSource {
		constexpr auto AxisSource = 0x90; // TScriptInterface<IGizmoAxisSource>
		constexpr auto TransformSource = 0xa0; // TScriptInterface<IGizmoTransformSource>
		constexpr auto Parameter = 0xb0; // float
		constexpr auto LastChange = 0xb4; // FGizmoFloatParameterChange
		constexpr auto CurTranslationAxis = 0xbc; // FVector
		constexpr auto CurTranslationOrigin = 0xc8; // FVector
		constexpr auto InitialTransform = 0xe0; // FTransform
	}

	namespace n_USleeper_HeroGrappled_Scenario_BP_C {
		constexpr auto UberGraphFrame = 0x388; // FPointerToUberGraphFrame
		constexpr auto FixedHeroEval = 0x390; // FScenarioHeroEval_FixedScore
		constexpr auto StartedInViolent = 0x3d8; // bool
	}

	namespace n_UGameplayContext_NextDestructible {
		constexpr auto DestructibleLinkWidth = 0x90; // float
		constexpr auto DestructibleLinkEdgePct = 0x94; // float
		constexpr auto DistructibleDirectionClampAngle = 0x98; // float
	}

	namespace n_UEditableGameplayTagQueryExpression_NoExprMatch {
		constexpr auto Expressions = 0x30; // TArray<UEditableGameplayTagQueryExpression*>
	}

	namespace n_UMovieSceneParticleTrack {
		constexpr auto ParticleSections = 0x60; // TArray<UMovieSceneSection*>
	}

	namespace n_AFPFlashlight_Epic_C {
		constexpr auto UberGraphFrame = 0x2b8; // FPointerToUberGraphFrame
		constexpr auto SpotLight2 = 0x2c0; // USpotLightComponent*
	}

	namespace n_UGameplayAction_BurstAttack {
		constexpr auto FilterSet = 0x210; // UGameplayEvaluatorSet*
		constexpr auto TraversalFilterSet = 0x218; // UGameplayEvaluatorSet*
		constexpr auto StopDistance = 0x220; // float
		constexpr auto BurstTargetContext = 0x228; // UAnimContext_Transform*
		constexpr auto BurstTraveralTargetContext = 0x230; // UAnimContext_Transform*
	}

	namespace n_UCaravanManager {
		constexpr auto MaxCaravans = 0x58; // int32_t
		constexpr auto OwningScreenManager = 0x5c; // TWeakObjectPtr<UUIScreenManager>
		constexpr auto ProfileCaravanData = 0x68; // FProfileCaravanData
		constexpr auto LoadedStaticCaravans = 0x80; // UStaticCaravans*
	}

	namespace n_USteeringBehavior_Separation {
		constexpr auto Strength = 0x58; // float
		constexpr auto ArrivalStrength = 0x5c; // float
		constexpr auto QueryDistance = 0x60; // float
		constexpr auto StrengthExponent = 0x64; // float
		constexpr auto ArrivalThreshold = 0x68; // float
		constexpr auto CoordinateArrivalPathPointDist = 0x6c; // float
		constexpr auto bSeparateWhenNotMoving = 0x70; // bool
		constexpr auto bSkipIgnoresWhenNotMoving = 0x71; // bool
		constexpr auto bSteerAroundDoors = 0x72; // bool
		constexpr auto DoorRelevantDistXY = 0x74; // float
		constexpr auto DoorRelevantDistZ = 0x78; // float
		constexpr auto DoorAvoidanceMultiplesOfCharacterRadius = 0x7c; // FVector2D
		constexpr auto bDoorDebugDraw = 0x84; // bool
		constexpr auto DoorDebugSpeedScalar = 0x88; // float
		constexpr auto IgnoreGroups = 0x90; // UAISeparationGroups*
		constexpr auto AvoidTagQuery = 0x98; // FGameplayTagQuery
		constexpr auto AllowSteeringTagQuery = 0xe0; // FGameplayTagQuery
		constexpr auto MaxCharacters = 0x128; // uint32_t
	}

	namespace n_UAnimEvalSet_Vehicle_DeathReaction_C {
		constexpr auto AvatarHealth = 0xc0; // FGameplayEval_Health
		constexpr auto AvatarTags = 0x118; // FGameplayEval_GameplayTags
	}

	namespace n_UActiveAreaSetVisibilityComponent {
		constexpr auto OnVisibilityChanged = 0xe8; // FMulticastInlineDelegate
		constexpr auto CurrentVisibility = 0xf8; // EAASVisibility
		constexpr auto CellId = 0xfc; // uint32_t
	}

	namespace n_APVPHoldoutPlayerSpawnManager {
		constexpr auto HeroStartPointQueryTemplate = 0x408; // UEnvQuery*
		constexpr auto HeroTestStart = 0x418; // AGobiPlayerStart*
	}

	namespace n_UInterpToMovementComponent {
		constexpr auto Duration = 0x128; // float
		constexpr auto bPauseOnImpact = 0x12c; // char : 1
		constexpr auto bSweep = 0x130; // bool
		constexpr auto TeleportType = 0x131; // ETeleportType
		constexpr auto BehaviourType = 0x132; // EInterpToBehaviourType
		constexpr auto bCheckIfStillInWorld = 0x133; // bool
		constexpr auto bForceSubStepping = 0x134; // char : 1
		constexpr auto OnInterpToReverse = 0x138; // FMulticastInlineDelegate
		constexpr auto OnInterpToStop = 0x148; // FMulticastInlineDelegate
		constexpr auto OnWaitBeginDelegate = 0x158; // FMulticastInlineDelegate
		constexpr auto OnWaitEndDelegate = 0x168; // FMulticastInlineDelegate
		constexpr auto OnResetDelegate = 0x178; // FMulticastInlineDelegate
		constexpr auto MaxSimulationTimeStep = 0x188; // float
		constexpr auto MaxSimulationIterations = 0x18c; // int32_t
		constexpr auto ControlPoints = 0x190; // TArray<FInterpControlPoint>
	}

	namespace n_UUserWidget {
		constexpr auto HandleFocusReceived = 0x150; // FMulticastInlineDelegate
		constexpr auto HandleFocusLost = 0x160; // FMulticastInlineDelegate
		constexpr auto OnFadeTransitionComplete = 0x170; // FMulticastInlineDelegate
		constexpr auto ColorAndOpacity = 0x180; // FSlateColor
		constexpr auto ColorAndOpacityDelegate = 0x1b0; // FDelegate
		constexpr auto ForegroundColor = 0x1c0; // FSlateColor
		constexpr auto ForegroundColorDelegate = 0x1f0; // FDelegate
		constexpr auto Padding = 0x200; // FMargin
		constexpr auto ActiveSequencePlayers = 0x210; // TArray<UUMGSequencePlayer*>
		constexpr auto StoppedSequencePlayers = 0x220; // TArray<UUMGSequencePlayer*>
		constexpr auto NamedSlotBindings = 0x230; // TArray<FNamedSlotBinding>
		constexpr auto WidgetTree = 0x240; // UWidgetTree*
		constexpr auto Priority = 0x248; // int32_t
		constexpr auto bSupportsKeyboardFocus = 0x24c; // char : 1
		constexpr auto bIsFocusable = 0x24c; // char : 1
		constexpr auto bIsFocusedOnHover = 0x24c; // char : 1
		constexpr auto bStopAction = 0x24c; // char : 1
		constexpr auto bHasScriptImplementedTick = 0x24c; // char : 1
		constexpr auto bHasScriptImplementedPaint = 0x24c; // char : 1
		constexpr auto bCookedWidgetTree = 0x24d; // char : 1
		constexpr auto TickFrequency = 0x258; // EWidgetTickFrequency
		constexpr auto InputComponent = 0x260; // UInputComponent*
		constexpr auto AnimationCallbacks = 0x268; // TArray<FAnimationEventBinding>
	}

	namespace n_UEndTurnCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_UGameplayAction_PlayMontage {
		constexpr auto bSortMontagesAlphabetically = 0x210; // bool
		constexpr auto Montages = 0x218; // TArray<UAnimMontage*>
		constexpr auto MontageSets = 0x228; // TArray<UMontageSet*>
		constexpr auto FallbackMontageSet = 0x238; // UMontageSet*
		constexpr auto ExitMontages = 0x240; // TArray<UAnimMontage*>
		constexpr auto ExitMontageSets = 0x250; // TArray<UMontageSet*>
		constexpr auto TriggerExitTags = 0x260; // FGameplayTagContainer
		constexpr auto bExitOnEnemyChanged = 0x280; // bool
		constexpr auto bExitOnAlerted = 0x281; // bool
		constexpr auto bAutoRepickOnBlendout = 0x282; // bool
		constexpr auto bAllowExternalMontages = 0x283; // bool
		constexpr auto PlayRateRange = 0x284; // FVector2D
		constexpr auto TraversalCollisionProfileName = 0x28c; // FName
		constexpr auto TraversalFlyRequesters = 0x298; // TArray<UAnimSequenceBase*>
	}

	namespace n_UItemComponentCopyConverter {
		constexpr auto bUpdate = 0x38; // bool
		constexpr auto ItemClass = 0x40; // AActor*
		constexpr auto ItemBaseComponentClass = 0x48; // UItemBaseComponent*
	}

	namespace n_UMutilationComponent {
		constexpr auto OnMutilated = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnExploded = 0xf8; // FMulticastInlineDelegate
		constexpr auto Config = 0x108; // UMutilationConfig*
		constexpr auto WoundConfigsData = 0x110; // UMutilationWoundConfigData*
		constexpr auto HitReactionsData = 0x118; // UMutilationHitReactionConfig*
		constexpr auto MaxRuptureWounds = 0x120; // int32_t
		constexpr auto MaxWounds = 0x124; // int32_t
		constexpr auto MutilationState = 0x190; // TArray<FMutilationInfo>
		constexpr auto ExplodeState = 0x1a0; // FExplodeInfo
		constexpr auto DismembermentMeshPieces = 0x230; // TArray<FDismembermentMeshPiece>
	}

	namespace n_UOptionsComboBoxBaseUserWidget {
		constexpr auto bShouldIgnoreChangeEvent = 0x478; // bool
		constexpr auto DefaultIndex = 0x47c; // int32_t
	}

	namespace n_UNiagaraDataInterfaceAudioSpectrum {
		constexpr auto Resolution = 0x40; // int32_t
		constexpr auto MinimumFrequency = 0x44; // float
		constexpr auto MaximumFrequency = 0x48; // float
		constexpr auto NoiseFloorDb = 0x4c; // float
	}

	namespace n_USoundNodeLooping {
		constexpr auto LoopCount = 0x60; // int32_t
		constexpr auto bLoopIndefinitely = 0x64; // char : 1
	}

	namespace n_UARTextureCameraDepth {
		constexpr auto DepthQuality = 0xe0; // EARDepthQuality
		constexpr auto DepthAccuracy = 0xe1; // EARDepthAccuracy
		constexpr auto bIsTemporallySmoothed = 0xe2; // bool
	}

	namespace n_UGameplayCardManager {
		constexpr auto OnBurnCardPlayed = 0x100; // FMulticastInlineDelegate
		constexpr auto OnDirectorCardPlayed = 0x110; // FMulticastInlineDelegate
		constexpr auto OnGameplayCardsChanged = 0x120; // FMulticastInlineDelegate
		constexpr auto OnPlayerStateGameplayCardsChanged = 0x130; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotGameplayCardsChanged = 0x140; // FMulticastInlineDelegate
		constexpr auto OnGameplayCardsPresetChanged = 0x150; // FMulticastInlineDelegate
		constexpr auto OnZombieMutationsChanged = 0x170; // FMulticastInlineDelegate
		constexpr auto OnZombieCommunalMutationPointsChanged = 0x180; // FMulticastInlineDelegate
		constexpr auto OnPlayerStateZombieMutationPointsChanged = 0x190; // FMulticastInlineDelegate
		constexpr auto OnRandomDraw = 0x1b0; // FMulticastInlineDelegate
		constexpr auto OnPlayerStateGameplayCardAdded = 0x1c0; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotGameplayCardAdded = 0x1d0; // FMulticastInlineDelegate
		constexpr auto OnPlayerStateZombieCardAdded = 0x1e0; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotZombieCardAdded = 0x1f0; // FMulticastInlineDelegate
		constexpr auto OnPlayerStateGameplayCardRemoved = 0x200; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotGameplayCardRemoved = 0x210; // FMulticastInlineDelegate
		constexpr auto OnPlayerStateZombieCardRemoved = 0x220; // FMulticastInlineDelegate
		constexpr auto OnPlayerSlotZombieCardRemoved = 0x230; // FMulticastInlineDelegate
		constexpr auto OnPhaseApplication = 0x240; // FMulticastInlineDelegate
		constexpr auto PlayerActiveGameplayCardDataArray = 0x278; // TArray<FPlayerActiveGameplayCardData>
		constexpr auto StaticCardsFromDifficulty = 0x298; // TArray<FActiveGameplayCard>
		constexpr auto DynamicCardsFromDifficulty = 0x2b8; // TArray<FActiveGameplayCard>
		constexpr auto QueuedMissionRowHandle = 0x2e8; // FDataTableRowHandle
		constexpr auto bProcessedQueuedMission = 0x308; // bool
		constexpr auto ZombieMutationTeamDataArray = 0x310; // TArray<FZombieMutationTeamData>
		constexpr auto RandomStreamSeed = 0x340; // uint64_t
		constexpr auto GameplayDataSet = 0x3b8; // UGameplayDataSet*
		constexpr auto InstancedMods = 0x3c0; // TArray<FModInstance>
		constexpr auto SharedMods = 0x3d0; // TMap<UObject*, UGameplayMod*>
		constexpr auto AllCards = 0x420; // TArray<FDataTableRowHandle>
		constexpr auto StarterCards = 0x430; // TArray<FDataTableRowHandle>
		constexpr auto BasicCards = 0x440; // TArray<FDataTableRowHandle>
		constexpr auto PresetCards = 0x450; // TSet<FDataTableRowHandle>
		constexpr auto PresetCardsPvP = 0x4a0; // TSet<FDataTableRowHandle>
		constexpr auto ProductCards = 0x4f0; // TSet<FDataTableRowHandle>
		constexpr auto CardNameToProductHandles = 0x590; // TMap<FName, FDataTableRowHandle>
		constexpr auto BuiltInHeroCardPresetsPvE = 0x5e0; // TArray<FGameplayCardPreset>
		constexpr auto BuiltInHeroCardPresetsPvP = 0x5f0; // TArray<FGameplayCardPreset>
		constexpr auto AllMutations = 0x600; // TArray<FDataTableRowHandle>
	}

	namespace n_UMaterialExpressionDynamicParameter {
		constexpr auto ParamNames = 0x48; // TArray<FString>
		constexpr auto DefaultValue = 0x58; // FLinearColor
		constexpr auto ParameterIndex = 0x68; // uint32_t
	}

	namespace n_UBTService_EnvironSensor {
		constexpr auto AllowSensorTagQuery = 0x78; // FGameplayTagQuery
		constexpr auto ThreatPingTagQueryDP = 0xc0; // FAIDataProviderGameplayTagQueryContainerValue
	}

	namespace n_AImpostorProxy {
		constexpr auto DefaultRootComponent = 0x2a0; // USceneComponent*
	}

	namespace n_ABotPlaythroughGameMode {
		constexpr auto MapSpatialInfoComponent = 0x588; // UMapSpatialInfoComponent*
		constexpr auto PlayerCommandController = 0x590; // APlayerController*
	}

	namespace n_USkeletalMeshRegion {
		constexpr auto MeshSets = 0x38; // TArray<FSkeletalMeshSet>
		constexpr auto SkelMeshMasterGameplayTag = 0x48; // FGameplayTag
		constexpr auto bStartHidden = 0x50; // bool
		constexpr auto bCastShadow = 0x51; // bool
		constexpr auto bRelativeTransform = 0x52; // bool
		constexpr auto RelativeTransform = 0x60; // FTransform
		constexpr auto RegionIdentifier = 0x90; // FGameplayTag
	}

	namespace n_UVRNotificationsComponent {
		constexpr auto HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate = 0xe8; // FMulticastInlineDelegate
		constexpr auto HMDTrackingInitializedDelegate = 0xf8; // FMulticastInlineDelegate
		constexpr auto HMDRecenteredDelegate = 0x108; // FMulticastInlineDelegate
		constexpr auto HMDLostDelegate = 0x118; // FMulticastInlineDelegate
		constexpr auto HMDReconnectedDelegate = 0x128; // FMulticastInlineDelegate
		constexpr auto HMDConnectCanceledDelegate = 0x138; // FMulticastInlineDelegate
		constexpr auto HMDPutOnHeadDelegate = 0x148; // FMulticastInlineDelegate
		constexpr auto HMDRemovedFromHeadDelegate = 0x158; // FMulticastInlineDelegate
		constexpr auto VRControllerRecenteredDelegate = 0x168; // FMulticastInlineDelegate
	}

	namespace n_UModelComponent {
		constexpr auto ModelBodySetup = 0x4c8; // UBodySetup*
	}

	namespace n_UParticleModuleLocation {
		constexpr auto StartLocation = 0x38; // FRawDistributionVector
		constexpr auto DistributeOverNPoints = 0x80; // float
		constexpr auto DistributeThreshold = 0x84; // float
	}

	namespace n_UParticleModuleSpawn {
		constexpr auto Rate = 0x40; // FRawDistributionFloat
		constexpr auto RateScale = 0x70; // FRawDistributionFloat
		constexpr auto ParticleBurstMethod = 0xa0; // EParticleBurstMethod
		constexpr auto BurstList = 0xa8; // TArray<FParticleBurst>
		constexpr auto BurstScale = 0xb8; // FRawDistributionFloat
		constexpr auto bApplyGlobalSpawnRateScale = 0xe8; // char : 1
	}

	namespace n_UClothingAssetCommon {
		constexpr auto PhysicsAsset = 0x50; // UPhysicsAsset*
		constexpr auto ClothConfigs = 0x58; // TMap<FName, UClothConfigBase*>
		constexpr auto ClothSharedSimConfig = 0xa8; // UClothConfigBase*
		constexpr auto ClothSimConfig = 0xb0; // UClothConfigBase*
		constexpr auto ChaosClothSimConfig = 0xb8; // UClothConfigBase*
		constexpr auto ClothLODData = 0xc0; // TArray<UClothLODDataCommon_Legacy*>
		constexpr auto LODData = 0xd0; // TArray<FClothLODDataCommon>
		constexpr auto LodMap = 0xe0; // TArray<int32_t>
		constexpr auto UsedBoneNames = 0xf0; // TArray<FName>
		constexpr auto UsedBoneIndices = 0x100; // TArray<int32_t>
		constexpr auto ReferenceBoneIndex = 0x110; // int32_t
		constexpr auto CustomData = 0x118; // UClothingAssetCustomData*
		constexpr auto ClothConfig = 0x120; // FClothConfig_Legacy
	}

	namespace n_UMaterialExpressionSingleLayerWaterMaterialOutput {
		constexpr auto ScatteringCoefficients = 0x48; // FExpressionInput
		constexpr auto AbsorptionCoefficients = 0x5c; // FExpressionInput
		constexpr auto PhaseG = 0x70; // FExpressionInput
	}

	namespace n_UMaterialExpressionConstantBiasScale {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto Bias = 0x5c; // float
		constexpr auto Scale = 0x60; // float
	}

	namespace n_UMaterialExpressionWorldPosition {
		constexpr auto WorldPositionShaderOffset = 0x48; // EWorldPositionIncludedOffsets
	}

	namespace n_UStaticMeshComponent {
		constexpr auto ForcedLodModel = 0x528; // int32_t
		constexpr auto PreviousLODLevel = 0x52c; // int32_t
		constexpr auto MinLOD = 0x530; // int32_t
		constexpr auto SubDivisionStepSize = 0x534; // int32_t
		constexpr auto StaticMesh = 0x538; // UStaticMesh*
		constexpr auto WireframeColorOverride = 0x540; // FColor
		constexpr auto bEvaluateWorldPositionOffset = 0x544; // char : 1
		constexpr auto bOverrideWireframeColor = 0x544; // char : 1
		constexpr auto bOverrideMinLod = 0x544; // char : 1
		constexpr auto bOverrideNavigationExport = 0x544; // char : 1
		constexpr auto bForceNavigationObstacle = 0x544; // char : 1
		constexpr auto bDisallowMeshPaintPerInstance = 0x544; // char : 1
		constexpr auto bIgnoreInstanceForTextureStreaming = 0x544; // char : 1
		constexpr auto bOverrideLightMapRes = 0x544; // char : 1
		constexpr auto bCastDistanceFieldIndirectShadow = 0x545; // char : 1
		constexpr auto bOverrideDistanceFieldSelfShadowBias = 0x545; // char : 1
		constexpr auto bUseSubDivisions = 0x545; // char : 1
		constexpr auto bUseDefaultCollision = 0x545; // char : 1
		constexpr auto bUseBoundsForSectorInclusion = 0x545; // char : 1
		constexpr auto bIncludeOutdoorSectors = 0x545; // char : 1
		constexpr auto bExclusiveOutdoorSectors = 0x545; // char : 1
		constexpr auto bInheritLightShadowPropertiesFromMesh = 0x545; // char : 1
		constexpr auto bReverseCulling = 0x546; // char : 1
		constexpr auto OverriddenLightMapRes = 0x548; // int32_t
		constexpr auto DistanceFieldIndirectShadowMinVisibility = 0x54c; // float
		constexpr auto DistanceFieldSelfShadowBias = 0x550; // float
		constexpr auto StreamingDistanceMultiplier = 0x554; // float
		constexpr auto LODData = 0x558; // TArray<FStaticMeshComponentLODInfo>
		constexpr auto StreamingTextureData = 0x568; // TArray<FStreamingTextureBuildInfo>
		constexpr auto LightmassSettings = 0x578; // FLightmassPrimitiveSettings
		constexpr auto CollectionOverrides = 0x590; // FPrimitiveParameterCollectionOverrides
	}

	namespace n_UCompositeCurveTable {
		constexpr auto ParentTables = 0xa8; // TArray<UCurveTable*>
		constexpr auto OldParentTables = 0xb8; // TArray<UCurveTable*>
	}

	namespace n_ULoadoutMod {
		constexpr auto LoadoutAdjustmentType = 0xd0; // ELoadoutModAdjustmentType
		constexpr auto Loadout = 0xd8; // FInventoryLoadout
		constexpr auto LoadoutCharacterOverrides = 0x110; // TArray<FLoadoutCharacterOverride>
	}

	namespace n_UEnvQueryContext_NavFloorBase {
		constexpr auto bUseAgentRadius = 0x30; // bool
		constexpr auto SearchRadius = 0x34; // float
	}

	namespace n_UAnimEvalSet_FilterNavLink {
		constexpr auto AllowedNavAreas = 0xc0; // TArray<UNavArea*>
		constexpr auto AllowedNavAreaEval = 0xd0; // FGameplayEval_NavArea
	}

	namespace n_ULootSpawnerComponent {
		constexpr auto OnSpawnItem = 0x230; // FMulticastInlineDelegate
		constexpr auto bEnabled = 0x240; // bool
		constexpr auto SupportedGameModes = 0x244; // uint32_t
		constexpr auto SupportedTags = 0x248; // FGameplayTagContainer
		constexpr auto DisallowedTags = 0x268; // FGameplayTagContainer
		constexpr auto ConfigRequiredTags = 0x288; // FGameplayTagContainer
		constexpr auto ItemQuantity = 0x2a8; // EPickupCountType
		constexpr auto bAddAttachments = 0x2a9; // bool
		constexpr auto RequiresCurrency = 0x2aa; // bool
		constexpr auto LootScenario = 0x2b0; // TSoftObjectPtr<ULootScenario>
		constexpr auto SpawnedItem = 0x2e0; // AActor*
	}

	namespace n_USlateBrushAsset {
		constexpr auto Brush = 0x30; // FSlateBrush
	}

	namespace n_UNotificationBoxComponent {
		constexpr auto Notifications = 0x4d8; // TArray<FNotificationItem>
		constexpr auto FacingAngle = 0x4e8; // float
	}

	namespace n_UActorChannel {
		constexpr auto Actor = 0x78; // AActor*
		constexpr auto CreateSubObjects = 0x168; // TArray<UObject*>
	}

	namespace n_USoundNodeSwitch {
		constexpr auto IntParameterName = 0x60; // FName
	}

	namespace n_ATextRenderActor {
		constexpr auto TextRender = 0x2a0; // UTextRenderComponent*
	}

	namespace n_UComboBox {
		constexpr auto Items = 0x148; // TArray<UObject*>
		constexpr auto OnGenerateWidgetEvent = 0x158; // FDelegate
		constexpr auto bIsFocusable = 0x168; // bool
		constexpr auto bIsFocusedOnHover = 0x169; // bool
	}

	namespace n_UPaperDollItemUserWidget {
		constexpr auto Item = 0x460; // AItem*
	}

	namespace n_UParticleModuleLight_Seeded {
		constexpr auto RandomSeedInfo = 0x138; // FParticleRandomSeedInfo
	}

	namespace n_UMovieScene {
		constexpr auto Spawnables = 0x58; // TArray<FMovieSceneSpawnable>
		constexpr auto Possessables = 0x68; // TArray<FMovieScenePossessable>
		constexpr auto ObjectBindings = 0x78; // TArray<FMovieSceneBinding>
		constexpr auto BindingGroups = 0x88; // TMap<FName, FMovieSceneObjectBindingIDs>
		constexpr auto MasterTracks = 0xd8; // TArray<UMovieSceneTrack*>
		constexpr auto CameraCutTrack = 0xe8; // UMovieSceneTrack*
		constexpr auto SelectionRange = 0xf0; // FMovieSceneFrameRange
		constexpr auto PlaybackRange = 0x100; // FMovieSceneFrameRange
		constexpr auto TickResolution = 0x110; // FFrameRate
		constexpr auto DisplayRate = 0x118; // FFrameRate
		constexpr auto EvaluationType = 0x120; // EMovieSceneEvaluationType
		constexpr auto ClockSource = 0x121; // EUpdateClockSource
		constexpr auto CustomClockSourcePath = 0x128; // FSoftObjectPath
		constexpr auto MarkedFrames = 0x140; // TArray<FMovieSceneMarkedFrame>
	}

	namespace n_UMockDataMeshTrackerComponent {
		constexpr auto OnMeshTrackerUpdated = 0x230; // FMulticastInlineDelegate
		constexpr auto ScanWorld = 0x240; // bool
		constexpr auto RequestNormals = 0x241; // bool
		constexpr auto RequestVertexConfidence = 0x242; // bool
		constexpr auto VertexColorMode = 0x243; // EMeshTrackerVertexColorMode
		constexpr auto BlockVertexColors = 0x248; // TArray<FColor>
		constexpr auto VertexColorFromConfidenceZero = 0x258; // FLinearColor
		constexpr auto VertexColorFromConfidenceOne = 0x268; // FLinearColor
		constexpr auto UpdateInterval = 0x278; // float
		constexpr auto MRMesh = 0x280; // UMRMeshComponent*
	}

	namespace n_UAnimNotify_PlayMontageNotifyWindow {
		constexpr auto NotifyName = 0x38; // FName
	}

	namespace n_UNiagaraPrecompileContainer {
		constexpr auto Scripts = 0x30; // TArray<UNiagaraScript*>
		constexpr auto System = 0x40; // UNiagaraSystem*
	}

	namespace n_UMovieSceneIntegerSection {
		constexpr auto IntegerCurve = 0xe8; // FMovieSceneIntegerChannel
	}

	namespace n_UNetAnalyticsAggregatorConfig {
		constexpr auto NetAnalyticsData = 0x30; // TArray<FNetAnalyticsDataConfig>
	}

	namespace n_ATitan_AcidBloodPool_S1_BP_C {
		constexpr auto UberGraphFrame = 0x338; // FPointerToUberGraphFrame
		constexpr auto Box = 0x340; // UBoxComponent*
		constexpr auto GameplayEffectEmitter = 0x348; // UGameplayEffectEmitterComponent*
	}

	namespace n_UMovieSceneWidgetMaterialTrack {
		constexpr auto BrushPropertyNamePath = 0x70; // TArray<FName>
		constexpr auto TrackName = 0x80; // FName
	}

	namespace n_UMaterialExpression {
		constexpr auto Material = 0x30; // UMaterial*
		constexpr auto Function = 0x38; // UMaterialFunction*
		constexpr auto bIsParameterExpression = 0x40; // char : 1
	}

	namespace n_UParticleModuleCollisionGPU {
		constexpr auto Resilience = 0x38; // FRawDistributionFloat
		constexpr auto ResilienceScaleOverLife = 0x68; // FRawDistributionFloat
		constexpr auto Friction = 0x98; // float
		constexpr auto RandomSpread = 0x9c; // float
		constexpr auto RandomDistribution = 0xa0; // float
		constexpr auto RadiusScale = 0xa4; // float
		constexpr auto RadiusBias = 0xa8; // float
		constexpr auto Response = 0xac; // EParticleCollisionResponse
		constexpr auto CollisionMode = 0xad; // EParticleCollisionMode
	}

	namespace n_USizeBox {
		constexpr auto WidthOverride = 0x170; // float
		constexpr auto HeightOverride = 0x174; // float
		constexpr auto MinDesiredWidth = 0x178; // float
		constexpr auto MinDesiredHeight = 0x17c; // float
		constexpr auto MaxDesiredWidth = 0x180; // float
		constexpr auto MaxDesiredHeight = 0x184; // float
		constexpr auto MinAspectRatio = 0x188; // float
		constexpr auto MaxAspectRatio = 0x18c; // float
		constexpr auto bOverride_WidthOverride = 0x190; // char : 1
		constexpr auto bOverride_HeightOverride = 0x190; // char : 1
		constexpr auto bOverride_MinDesiredWidth = 0x190; // char : 1
		constexpr auto bOverride_MinDesiredHeight = 0x190; // char : 1
		constexpr auto bOverride_MaxDesiredWidth = 0x190; // char : 1
		constexpr auto bOverride_MaxDesiredHeight = 0x190; // char : 1
		constexpr auto bOverride_MinAspectRatio = 0x190; // char : 1
		constexpr auto bOverride_MaxAspectRatio = 0x190; // char : 1
	}

	namespace n_UGobiSpatialAudioVolumePreset {
		constexpr auto Priority = 0x38; // float
		constexpr auto AuxBusName = 0x40; // FString
		constexpr auto ExteriorDelayAux = 0x50; // FString
		constexpr auto AmbienceLoopStart = 0x60; // UAkAudioEvent*
		constexpr auto AmbienceLoopStop = 0x68; // UAkAudioEvent*
		constexpr auto WallOcclusion = 0x70; // float
		constexpr auto WeaponDecay = 0x74; // EWeaponDecayEnum
		constexpr auto ThreatSoundOcclusion = 0x78; // FAkRTPCTransition
		constexpr auto SendLevel = 0x90; // float
		constexpr auto FadeRate = 0x94; // float
		constexpr auto bEnableRoom = 0x98; // bool
	}

	namespace n_UMatchmakingSelectionUserWidget {
		constexpr auto Mode = 0x458; // EMatchmakingScreenMode
		constexpr auto bIsSelected = 0x459; // bool
	}

	namespace n_UPartyToolTipHolderUserWidget {
		constexpr auto PartyTooltip = 0x458; // UPartyToolTipUserWidget*
	}

	namespace n_ACustomizationMannequin {
		constexpr auto DesiredCustomizationSet = 0x2d8; // FCharacterCustomizationSet
		constexpr auto DesiredIdleAnimation = 0x360; // TSoftObjectPtr<UAnimMontage>
		constexpr auto SecondaryWeaponRow = 0x388; // FDataTableRowHandle
		constexpr auto WeaponMeshComponent = 0x3a8; // UStaticMeshComponent*
		constexpr auto MannequinType = 0x3b0; // EHeroMannequinType
	}

	namespace n_USourceEffectDynamicsProcessorPreset {
		constexpr auto Settings = 0x98; // FSourceEffectDynamicsProcessorSettings
	}

	namespace n_UNavLinkCustomComponent {
		constexpr auto NavLinkUserId = 0x120; // uint32_t
		constexpr auto EnabledAreaClass = 0x128; // UNavArea*
		constexpr auto DisabledAreaClass = 0x130; // UNavArea*
		constexpr auto SupportedAgents = 0x138; // FNavAgentSelector
		constexpr auto LinkRelativeStart = 0x13c; // FVector
		constexpr auto LinkRelativeEnd = 0x148; // FVector
		constexpr auto LinkDirection = 0x154; // ENavLinkDirection
		constexpr auto bLinkEnabled = 0x158; // char : 1
		constexpr auto bNotifyWhenEnabled = 0x158; // char : 1
		constexpr auto bNotifyWhenDisabled = 0x158; // char : 1
		constexpr auto bCreateBoxObstacle = 0x158; // char : 1
		constexpr auto ObstacleOffset = 0x15c; // FVector
		constexpr auto ObstacleExtent = 0x168; // FVector
		constexpr auto ObstacleAreaClass = 0x178; // UNavArea*
		constexpr auto BroadcastRadius = 0x180; // float
		constexpr auto BroadcastInterval = 0x184; // float
		constexpr auto BroadcastChannel = 0x188; // ECollisionChannel
	}

	namespace n_UParticleModuleColor {
		constexpr auto StartColor = 0x38; // FRawDistributionVector
		constexpr auto StartAlpha = 0x80; // FRawDistributionFloat
		constexpr auto bClampAlpha = 0xb0; // char : 1
	}

	namespace n_UGeometryCacheCodecBase {
		constexpr auto TopologyRanges = 0x30; // TArray<int32_t>
	}

	namespace n_AAISmartActor {
		constexpr auto bUpdateCollectionGrid = 0x450; // bool
	}

	namespace n_UEnvQueryTest_Directness {
		constexpr auto DirectnessTo = 0x208; // UEnvQueryContext*
		constexpr auto DirectnessFrom = 0x210; // UEnvQueryContext*
	}

	namespace n_UExporter {
		constexpr auto SupportedClass = 0x30; // UObject*
		constexpr auto ExportRootScope = 0x38; // UObject*
		constexpr auto FormatExtension = 0x40; // TArray<FString>
		constexpr auto FormatDescription = 0x50; // TArray<FString>
		constexpr auto PreferredFormatIndex = 0x60; // int32_t
		constexpr auto TextIndent = 0x64; // int32_t
		constexpr auto bText = 0x68; // char : 1
		constexpr auto bSelectedOnly = 0x68; // char : 1
		constexpr auto bForceFileOperations = 0x68; // char : 1
		constexpr auto ExportTask = 0x70; // UAssetExportTask*
	}

	namespace n_UWidgetTree {
		constexpr auto RootWidget = 0x30; // UWidget*
	}

	namespace n_UInfectedHighlightComponent {
		constexpr auto HighlightTags = 0x148; // FGameplayTagContainer
		constexpr auto GhostTag = 0x168; // FGameplayTag
		constexpr auto bHighlightForZombies = 0x170; // bool
	}

	namespace n_UEnvQueryTest_EnemyDamageTime {
		constexpr auto Timespan = 0x2a0; // EEnemyDaamgeTimeSpan
	}

	namespace n_UInterpTrackColorProp {
		constexpr auto PropertyName = 0x98; // FName
	}

	namespace n_UGameplayEffectForceFeedback {
		constexpr auto MaxRadius = 0x238; // float
		constexpr auto ForceFeedbackEffect = 0x240; // UForceFeedbackEffect*
		constexpr auto bForceFeedbackIsLooping = 0x248; // bool
	}

	namespace n_UScreenEffect {
		constexpr auto ScreenEffectTag = 0x30; // FGameplayTag
		constexpr auto CameraModifierClass = 0x38; // UCameraModifier_ScreenEffect*
		constexpr auto ActivationGameplayTags = 0x40; // FGameplayTagContainer
		constexpr auto bStartActive = 0x60; // bool
		constexpr auto StartAkEvent = 0x68; // UAkAudioEvent*
		constexpr auto StartAkEventCooldown = 0x70; // float
		constexpr auto LoopAkEvent = 0x78; // UAkAudioEvent*
		constexpr auto StopAkEvent = 0x80; // UAkAudioEvent*
		constexpr auto CameraModifier = 0x88; // TWeakObjectPtr<UCameraModifier>
		constexpr auto ActivatedTimestamp = 0x90; // float
	}

	namespace n_UEnvQueryContext_Blackboard {
		constexpr auto BlackboardAsset = 0x30; // UBlackboardData*
		constexpr auto BlackboardKey = 0x38; // FBlackboardKeySelector
	}

	namespace n_AAtmosphericFog {
		constexpr auto AtmosphericFogComponent = 0x2a0; // UAtmosphericFogComponent*
	}

	namespace n_UFont {
		constexpr auto FontCacheType = 0x38; // EFontCacheType
		constexpr auto Characters = 0x40; // TArray<FFontCharacter>
		constexpr auto Textures = 0x50; // TArray<UTexture2D*>
		constexpr auto IsRemapped = 0x60; // int32_t
		constexpr auto EmScale = 0x64; // float
		constexpr auto Ascent = 0x68; // float
		constexpr auto Descent = 0x6c; // float
		constexpr auto Leading = 0x70; // float
		constexpr auto Kerning = 0x74; // int32_t
		constexpr auto ImportOptions = 0x78; // FFontImportOptionsData
		constexpr auto NumCharacters = 0x128; // int32_t
		constexpr auto MaxCharHeight = 0x130; // TArray<int32_t>
		constexpr auto ScalingFactor = 0x140; // float
		constexpr auto LegacyFontSize = 0x144; // int32_t
		constexpr auto LegacyFontName = 0x148; // FName
		constexpr auto CompositeFont = 0x150; // FCompositeFont
	}

	namespace n_ASphereProjectile {
		constexpr auto CollisionComponent = 0x658; // USphereComponent*
	}

	namespace n_UInputTouchDelegateBinding {
		constexpr auto InputTouchDelegateBindings = 0x30; // TArray<FBlueprintInputTouchDelegateBinding>
	}

	namespace n_UParticleModuleSizeScale {
		constexpr auto SizeScale = 0x38; // FRawDistributionVector
		constexpr auto EnableX = 0x80; // char : 1
		constexpr auto EnableY = 0x80; // char : 1
		constexpr auto EnableZ = 0x80; // char : 1
	}

	namespace n_UFTUEOptionsPanelUserWidget {
		constexpr auto bShowContinueButton = 0x478; // bool
		constexpr auto Title = 0x488; // FText
	}

	namespace n_UEnvQueryGenerator_ActorsOfTypes {
		constexpr auto ActorTypes = 0x58; // TArray<FAIDataProviderUObjectValue>
		constexpr auto GenerateOnlyActorsInRadius = 0x68; // FAIDataProviderBoolValue
		constexpr auto SearchRadius = 0xa0; // FAIDataProviderFloatValue
		constexpr auto SearchCenter = 0xd8; // UEnvQueryContext*
	}

	namespace n_UMaterialFunction {
		constexpr auto Description = 0x48; // FString
		constexpr auto bExposeToLibrary = 0x58; // char : 1
		constexpr auto bPrefixParameterNames = 0x58; // char : 1
		constexpr auto bSuffixParameterNames = 0x58; // char : 1
		constexpr auto ParameterNamesSuffixPadding = 0x5c; // uint32_t
		constexpr auto ParameterNamesSuffix = 0x60; // uint32_t
		constexpr auto bReentrantFlag = 0x64; // char : 1
	}

	namespace n_AGameState {
		constexpr auto MatchState = 0x2f0; // FName
		constexpr auto PreviousMatchState = 0x2f8; // FName
		constexpr auto ElapsedTime = 0x300; // int32_t
	}

	namespace n_UScrollBarWidgetStyle {
		constexpr auto ScrollBarStyle = 0x38; // FScrollBarStyle
	}

	namespace n_UFieldSystemComponent {
		constexpr auto FieldSystem = 0x4b0; // UFieldSystem*
		constexpr auto SupportedSolvers = 0x4c8; // TArray<TSoftObjectPtr<AChaosSolverActor>>
	}

	namespace n_UDecalAnalyticsComponent {
		constexpr auto AnalyticsManager = 0x190; // AGameplayAnalyticsManager*
	}

	namespace n_UBrushBuilder {
		constexpr auto BitmapFilename = 0x30; // FString
		constexpr auto Tooltip = 0x40; // FString
		constexpr auto NotifyBadParams = 0x50; // char : 1
		constexpr auto Vertices = 0x58; // TArray<FVector>
		constexpr auto Polys = 0x68; // TArray<FBuilderPoly>
		constexpr auto Layer = 0x78; // FName
		constexpr auto MergeCoplanars = 0x80; // char : 1
	}

	namespace n_UAudioZombieManagerSubsystem {
		constexpr auto AudioZombieManagerSystems = 0x38; // TMap<FName, UAudioZombieManagerSystem*>
	}

	namespace n_UHealOtherLesson_BP_C {
		constexpr auto UberGraphFrame = 0x4e8; // FPointerToUberGraphFrame
	}

	namespace n_UAkCheckBox {
		constexpr auto CheckedState = 0x518; // ECheckBoxState
		constexpr auto CheckedStateDelegate = 0x51c; // FDelegate
		constexpr auto WidgetStyle = 0x530; // FCheckBoxStyle
		constexpr auto HorizontalAlignment = 0xb08; // EHorizontalAlignment
		constexpr auto IsFocusable = 0xb09; // bool
		constexpr auto ThePropertyToControl = 0xb10; // FAkBoolPropertyToControl
		constexpr auto ItemToControl = 0xb20; // FAkWwiseItemToControl
		constexpr auto AkOnCheckStateChanged = 0xb60; // FMulticastInlineDelegate
		constexpr auto OnItemDropped = 0xb70; // FMulticastInlineDelegate
		constexpr auto OnPropertyDropped = 0xb80; // FMulticastInlineDelegate
	}

	namespace n_APhysicsConstraintActor {
		constexpr auto ConstraintComp = 0x2a0; // UPhysicsConstraintComponent*
		constexpr auto ConstraintActor1 = 0x2a8; // AActor*
		constexpr auto ConstraintActor2 = 0x2b0; // AActor*
		constexpr auto bDisableCollision = 0x2b8; // char : 1
	}

	namespace n_UTRSAmbientSoundManager {
		constexpr auto World = 0x30; // UWorld*
	}

	namespace n_UGameSessionSettings {
		constexpr auto MaxSpectators = 0x30; // int32_t
		constexpr auto MaxPlayers = 0x34; // int32_t
		constexpr auto bRequiresPushToTalk = 0x38; // char : 1
	}

	namespace n_USoundNodeGroupControl {
		constexpr auto GroupSizes = 0x60; // TArray<int32_t>
	}

	namespace n_AGameNetworkManager {
		constexpr auto BadPacketLossThreshold = 0x2a0; // float
		constexpr auto SeverePacketLossThreshold = 0x2a4; // float
		constexpr auto BadPingThreshold = 0x2a8; // int32_t
		constexpr auto SeverePingThreshold = 0x2ac; // int32_t
		constexpr auto AdjustedNetSpeed = 0x2b0; // int32_t
		constexpr auto LastNetSpeedUpdateTime = 0x2b4; // float
		constexpr auto TotalNetBandwidth = 0x2b8; // int32_t
		constexpr auto MinDynamicBandwidth = 0x2bc; // int32_t
		constexpr auto MaxDynamicBandwidth = 0x2c0; // int32_t
		constexpr auto bIsStandbyCheckingEnabled = 0x2c4; // char : 1
		constexpr auto bHasStandbyCheatTriggered = 0x2c4; // char : 1
		constexpr auto StandbyRxCheatTime = 0x2c8; // float
		constexpr auto StandbyTxCheatTime = 0x2cc; // float
		constexpr auto PercentMissingForRxStandby = 0x2d0; // float
		constexpr auto PercentMissingForTxStandby = 0x2d4; // float
		constexpr auto PercentForBadPing = 0x2d8; // float
		constexpr auto JoinInProgressStandbyWaitTime = 0x2dc; // float
		constexpr auto MoveRepSize = 0x2e0; // float
		constexpr auto MAXPOSITIONERRORSQUARED = 0x2e4; // float
		constexpr auto MAXNEARZEROVELOCITYSQUARED = 0x2e8; // float
		constexpr auto CLIENTADJUSTUPDATECOST = 0x2ec; // float
		constexpr auto MAXCLIENTUPDATEINTERVAL = 0x2f0; // float
		constexpr auto MaxClientForcedUpdateDuration = 0x2f4; // float
		constexpr auto ServerForcedUpdateHitchThreshold = 0x2f8; // float
		constexpr auto ServerForcedUpdateHitchCooldown = 0x2fc; // float
		constexpr auto MaxMoveDeltaTime = 0x300; // float
		constexpr auto MaxClientSmoothingDeltaTime = 0x304; // float
		constexpr auto ClientNetSendMoveDeltaTime = 0x308; // float
		constexpr auto ClientNetSendMoveDeltaTimeThrottled = 0x30c; // float
		constexpr auto ClientNetSendMoveDeltaTimeStationary = 0x310; // float
		constexpr auto ClientNetSendMoveThrottleAtNetSpeed = 0x314; // int32_t
		constexpr auto ClientNetSendMoveThrottleOverPlayerCount = 0x318; // int32_t
		constexpr auto ClientAuthorativePosition = 0x31c; // bool
		constexpr auto ClientErrorUpdateRateLimit = 0x320; // float
		constexpr auto ClientNetCamUpdateDeltaTime = 0x324; // float
		constexpr auto ClientNetCamUpdatePositionLimit = 0x328; // float
		constexpr auto bMovementTimeDiscrepancyDetection = 0x32c; // bool
		constexpr auto bMovementTimeDiscrepancyResolution = 0x32d; // bool
		constexpr auto MovementTimeDiscrepancyMaxTimeMargin = 0x330; // float
		constexpr auto MovementTimeDiscrepancyMinTimeMargin = 0x334; // float
		constexpr auto MovementTimeDiscrepancyResolutionRate = 0x338; // float
		constexpr auto MovementTimeDiscrepancyDriftAllowance = 0x33c; // float
		constexpr auto bMovementTimeDiscrepancyForceCorrectionsDuringResolution = 0x340; // bool
		constexpr auto bUseDistanceBasedRelevancy = 0x341; // bool
	}

	namespace n_UObjectPropertyMod {
		constexpr auto PropertyName = 0xd0; // FName
		constexpr auto ModType = 0xd8; // EObjectPropertyModType
		constexpr auto Modifier = 0xdc; // FCustomDataProviderFloat
		constexpr auto IntModifier = 0xe4; // FCustomDataProviderInt32
	}

	namespace n_UZombiePopupAbilityUserWidget {
		constexpr auto AbilityIcon = 0x458; // UImage*
		constexpr auto AbilityNameText = 0x460; // UTextBlock*
		constexpr auto AbilityDescriptionText = 0x468; // UTextBlock*
	}

	namespace n_UMovieSceneMaterialParameterCollectionTrack {
		constexpr auto MPC = 0x70; // UMaterialParameterCollection*
	}

	namespace n_UCharacterSelectLevelManager {
		constexpr auto LineupLayoutManager = 0x48; // ACharacterLineupLayoutManager*
	}

	namespace n_UMaterialParameterCollection {
		constexpr auto StateId = 0x30; // FGuid
		constexpr auto ScalarParameters = 0x40; // TArray<FCollectionScalarParameter>
		constexpr auto VectorParameters = 0x50; // TArray<FCollectionVectorParameter>
	}

	namespace n_UPlatformGameInstance {
		constexpr auto ApplicationWillDeactivateDelegate = 0x1b0; // FMulticastInlineDelegate
		constexpr auto ApplicationHasReactivatedDelegate = 0x1c0; // FMulticastInlineDelegate
		constexpr auto ApplicationWillEnterBackgroundDelegate = 0x1d0; // FMulticastInlineDelegate
		constexpr auto ApplicationHasEnteredForegroundDelegate = 0x1e0; // FMulticastInlineDelegate
		constexpr auto ApplicationWillTerminateDelegate = 0x1f0; // FMulticastInlineDelegate
		constexpr auto ApplicationShouldUnloadResourcesDelegate = 0x200; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedStartupArgumentsDelegate = 0x210; // FMulticastInlineDelegate
		constexpr auto ApplicationRegisteredForRemoteNotificationsDelegate = 0x220; // FMulticastInlineDelegate
		constexpr auto ApplicationRegisteredForUserNotificationsDelegate = 0x230; // FMulticastInlineDelegate
		constexpr auto ApplicationFailedToRegisterForRemoteNotificationsDelegate = 0x240; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedRemoteNotificationDelegate = 0x250; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedLocalNotificationDelegate = 0x260; // FMulticastInlineDelegate
		constexpr auto ApplicationReceivedScreenOrientationChangedNotificationDelegate = 0x270; // FMulticastInlineDelegate
	}

	namespace n_ACameraManagerDebugger {
		constexpr auto CameraManager = 0x2a0; // TWeakObjectPtr<AGobiPlayerCameraManager>
	}

	namespace n_UMovieSceneCameraShakeSection {
		constexpr auto ShakeData = 0xe8; // FMovieSceneCameraShakeSectionData
		constexpr auto ShakeClass = 0x108; // UCameraShake*
		constexpr auto PlayScale = 0x110; // float
		constexpr auto PlaySpace = 0x114; // ECameraAnimPlaySpace
		constexpr auto UserDefinedPlaySpace = 0x118; // FRotator
	}

	namespace n_AGobiGameState_BP_C {
		constexpr auto DefaultSceneRoot = 0x6a8; // USceneComponent*
	}

	namespace n_UControlsOptionsPanelUserWidget {
		constexpr auto CommonActionsTable = 0x468; // UDataTable*
		constexpr auto CommonAxisTable = 0x470; // UDataTable*
		constexpr auto HeroActionsTable = 0x478; // UDataTable*
		constexpr auto HeroAxisTable = 0x480; // UDataTable*
		constexpr auto InfectedActionsTable = 0x488; // UDataTable*
		constexpr auto InfectedAxisTable = 0x490; // UDataTable*
		constexpr auto MovementActionsTable = 0x498; // UDataTable*
		constexpr auto MovementAxisTable = 0x4a0; // UDataTable*
	}

	namespace n_UDeckEditPanelUserWidget {
		constexpr auto DeckType = 0x458; // EGameplayCardDeckType
	}

	namespace n_USafeZone {
		constexpr auto PadLeft = 0x160; // bool
		constexpr auto PadRight = 0x161; // bool
		constexpr auto PadTop = 0x162; // bool
		constexpr auto PadBottom = 0x163; // bool
	}

	namespace n_UInputKeyDelegateBinding {
		constexpr auto InputKeyDelegateBindings = 0x30; // TArray<FBlueprintInputKeyDelegateBinding>
	}

	namespace n_UMaterialInterface {
		constexpr auto SubsurfaceProfile = 0x40; // USubsurfaceProfile*
		constexpr auto LightmassSettings = 0x58; // FLightmassMaterialInterfaceSettings
		constexpr auto TextureStreamingData = 0x68; // TArray<FMaterialTextureInfo>
		constexpr auto AssetUserData = 0x78; // TArray<UAssetUserData*>
		constexpr auto bAssignPhysMatToChildren = 0x8c; // bool
	}

	namespace n_UParticleModuleColorScaleOverLife {
		constexpr auto ColorScaleOverLife = 0x38; // FRawDistributionVector
		constexpr auto AlphaScaleOverLife = 0x80; // FRawDistributionFloat
		constexpr auto bEmitterTime = 0xb0; // char : 1
	}

	namespace n_UPlayReplicatedMontageCallbackProxy {
		constexpr auto OnCompleted = 0x30; // FMulticastInlineDelegate
		constexpr auto OnBlendOut = 0x40; // FMulticastInlineDelegate
		constexpr auto OnInterrupted = 0x50; // FMulticastInlineDelegate
		constexpr auto OnNotifyBegin = 0x60; // FMulticastInlineDelegate
		constexpr auto OnNotifyEnd = 0x70; // FMulticastInlineDelegate
	}

	namespace n_UModifyViewComponent {
		constexpr auto ViewModifier = 0x138; // FCameraViewModifier
		constexpr auto RequiredTags = 0x180; // FGameplayTagQuery
		constexpr auto bRequiresInputPress = 0x1c8; // bool
	}

	namespace n_ASpectatorBeaconHost {
		constexpr auto State = 0x2c8; // USpectatorBeaconState*
		constexpr auto bLogoutOnSessionTimeout = 0x330; // bool
		constexpr auto SessionTimeoutSecs = 0x334; // float
		constexpr auto TravelSessionTimeoutSecs = 0x338; // float
	}

	namespace n_UBulletPenetrationComponent {
		constexpr auto bIgnoreDeadActors = 0x198; // bool
		constexpr auto UnlimitedPenetration = 0x1a0; // FUnlimitedBulletPenetration
		constexpr auto PenetrationDefense = 0x1f8; // UBulletPenetrationDefense*
		constexpr auto BulletPenetrationTuning = 0x200; // FBulletPenetrationTuning
	}

	namespace n_UEditableGeometryCollectionAdapter {
		constexpr auto GeometryCollection = 0x30; // UGeometryCollection*
		constexpr auto OriginalGeometryCollection = 0x38; // UGeometryCollection*
		constexpr auto GeometryCollectionLODIndex = 0x40; // int32_t
	}

	namespace n_UPlayerSettingsGame {
		constexpr auto bGamePadInvert = 0xf8; // bool
		constexpr auto bGamePadInvertHoriz = 0xf9; // bool
		constexpr auto bForceFeedbackEnabled = 0xfa; // bool
		constexpr auto bMouseInvert = 0xfb; // bool
		constexpr auto bMouseSmoothing = 0xfc; // bool
		constexpr auto bAutoRecenterRecoil = 0xfd; // bool
		constexpr auto bCycleAccessories = 0xfe; // bool
		constexpr auto bHoldToSprintKeyboard = 0xff; // bool
		constexpr auto bHoldToSprintGamepad = 0x100; // bool
		constexpr auto bHoldToCrouchKeyboard = 0x101; // bool
		constexpr auto bHoldToCrouchGamepad = 0x102; // bool
		constexpr auto bHoldToADSKeyboard = 0x103; // bool
		constexpr auto bHoldToADSGamepad = 0x104; // bool
		constexpr auto bTreatSemiAutoWeaponsAsFullAuto = 0x105; // bool
		constexpr auto bAutoSelectWeaponsOnPickup = 0x106; // bool
		constexpr auto bDepletedAmmoWeaponSwitchEnabled = 0x107; // bool
		constexpr auto bOffensiveItemQuickUseEnabled = 0x108; // bool
		constexpr auto MovementAnalogStickResponseCurve = 0x109; // EAnalogStickResponseCurve
		constexpr auto CameraAnalogStickResponseCurve = 0x10a; // EAnalogStickResponseCurve
		constexpr auto MaxCameraInputSmoothingSecs = 0x10c; // float
		constexpr auto bCameraAccelerationEnabled = 0x110; // bool
		constexpr auto LeftStickInnerDeadZone = 0x114; // float
		constexpr auto LeftStickOuterDeadZone = 0x118; // float
		constexpr auto RightStickInnerDeadZone = 0x11c; // float
		constexpr auto RightStickOuterDeadZone = 0x120; // float
		constexpr auto CameraAnimationStrength = 0x124; // float
		constexpr auto ForceFeedbackScale = 0x128; // float
		constexpr auto AimSensitivitySettings = 0x12c; // FAimSensitivitySettings
		constexpr auto DefaultOfflineMapName = 0x150; // FString
		constexpr auto ActionMappings = 0x160; // TArray<FInputActionKeyMapping>
		constexpr auto AxisMappings = 0x170; // TArray<FInputAxisKeyMapping>
		constexpr auto DefaultActionMappings = 0x180; // TArray<FInputActionKeyMapping>
		constexpr auto DefaultAxisMappings = 0x190; // TArray<FInputAxisKeyMapping>
		constexpr auto KeyLayout = 0x1a0; // EKeyLayout
		constexpr auto ColorBlindMode = 0x1a1; // EColorBlindMode
		constexpr auto ColorBlindCustomColorPalette = 0x1a8; // FColorBlindGroupPalette
		constexpr auto WaypointOpacity = 0x1f8; // float
		constexpr auto bGameCoachEnabled = 0x1fc; // bool
		constexpr auto bHitMarkersEnabled = 0x1fd; // bool
		constexpr auto bSkipLegalScreen = 0x1fe; // bool
		constexpr auto bTextToSpeechEnabled = 0x1ff; // bool
		constexpr auto TextToSpeechVoice = 0x200; // ETextToSpeechVoice
		constexpr auto bSpeechToText = 0x201; // bool
		constexpr auto bShowSubtitlesOverUI = 0x202; // bool
		constexpr auto Captioning = 0x203; // ECaptioning
		constexpr auto CaptionColorBlindMode = 0x204; // EColorBlindMode
		constexpr auto CaptionFontSize = 0x208; // int32_t
		constexpr auto CaptionBackgroundOpacity = 0x20c; // float
		constexpr auto bProfanityFilterEnabled = 0x210; // bool
		constexpr auto bTakeABreakEnabled = 0x211; // bool
		constexpr auto GamepadStickConfigIndex = 0x214; // int32_t
		constexpr auto GamepadButtonHumanConfigIndex = 0x218; // int32_t
		constexpr auto GamepadButtonZombieConfigIndex = 0x21c; // int32_t
		constexpr auto ReticleType = 0x220; // EReticleOptionType
		constexpr auto ReticleColor = 0x224; // FLinearColor
		constexpr auto bAimAssistEnabled = 0x234; // bool
		constexpr auto AimAssistFrictionStrength = 0x238; // float
		constexpr auto AimAssistMagnetismStrength = 0x23c; // float
		constexpr auto bTargetSnappingEnabled = 0x240; // bool
		constexpr auto AimAssistSnapType = 0x241; // EAimAssistSnapType
		constexpr auto DifficultyPopupMessageShownCount = 0x244; // int32_t
		constexpr auto CampaignMap = 0x248; // FName
		constexpr auto CampaignDifficulty = 0x250; // EMissionDifficulty
		constexpr auto TrainingMap = 0x254; // FName
		constexpr auto TrainingDifficulty = 0x25c; // EMissionDifficulty
		constexpr auto QuickplayMapChains = 0x260; // TArray<FName>
		constexpr auto QuickplayDifficulties = 0x270; // TArray<EMissionDifficulty>
		constexpr auto bBloodDrenchEnabled = 0x280; // bool
	}

	namespace n_UDecalDefinition {
		constexpr auto CategoryRowRef = 0x38; // FDataTableRowHandle
		constexpr auto Decal = 0x58; // UMaterialInstance*
		constexpr auto RotationMinMax = 0x60; // FVector2D
		constexpr auto LifetimeMinMax = 0x68; // FVector2D
		constexpr auto LifetimePerQuality = 0x70; // TArray<FDecalDefLifetimeQuality>
		constexpr auto FadeDurationMinMax = 0x80; // FVector2D
		constexpr auto FadeInDelayMinMax = 0x88; // FVector2D
		constexpr auto FadeInDurationMinMax = 0x90; // FVector2D
		constexpr auto FadeScreenSize = 0x98; // float
		constexpr auto ProjectionDepth = 0x9c; // float
		constexpr auto ScaleMinMax = 0xa0; // FVector2D
		constexpr auto ScaleNonUniform = 0xa8; // bool
		constexpr auto ScaleNonUniformMin = 0xac; // FVector2D
		constexpr auto ScaleNonUniformMax = 0xb4; // FVector2D
		constexpr auto DirectionStretchEnable = 0xbc; // bool
		constexpr auto DirectionStretchMinMax = 0xc0; // FVector2D
		constexpr auto DirectionStretchSpawnPercent = 0xc8; // float
		constexpr auto bNormal = 0xcc; // bool
		constexpr auto bLifetimeParams = 0xcd; // bool
		constexpr auto SoftnessOverride = 0xce; // bool
		constexpr auto Softness = 0xd0; // float
		constexpr auto SubUVOverride = 0xd4; // bool
		constexpr auto SubUVFrameMin = 0xd8; // int32_t
		constexpr auto SubUVFrameMax = 0xdc; // int32_t
		constexpr auto CurveOverride = 0xe0; // bool
		constexpr auto CurveAtlas = 0xe8; // UCurveLinearColorAtlas*
		constexpr auto Curve = 0xf0; // UCurveLinearColor*
		constexpr auto SortOrder = 0xf8; // int32_t
	}

	namespace n_UTitanStage2TentacleAnimInstance {
		constexpr auto TentacleComponent = 0x2c0; // UTitanStage2TentacleComponent*
		constexpr auto bDormant = 0x2c8; // bool
		constexpr auto bSmashTell = 0x2c9; // bool
		constexpr auto bSmashAttack = 0x2ca; // bool
		constexpr auto bSmashAttackLoop = 0x2cb; // bool
		constexpr auto bSmashRetract = 0x2cc; // bool
		constexpr auto SmashTellBeginAnimSequence = 0x2d0; // UAnimSequence*
		constexpr auto SmashTellLoopAnimSequence = 0x2d8; // UAnimSequence*
		constexpr auto SmashAttackBeginAnimSequence = 0x2e0; // UAnimSequence*
		constexpr auto SmashAttackLoopAnimSequence = 0x2e8; // UAnimSequence*
		constexpr auto SmashRetractAnimSequence = 0x2f0; // UAnimSequence*
	}

	namespace n_UInterpTrackInstFloatProp {
		constexpr auto ResetFloat = 0x60; // float
	}

	namespace n_UTuningDataConverter {
		constexpr auto bUpdate = 0x38; // bool
		constexpr auto ActorComponentClass = 0x40; // UActorComponent*
		constexpr auto ActorClasses = 0x48; // TArray<AActor*>
	}

	namespace n_UParticleModuleKillHeight {
		constexpr auto Height = 0x38; // FRawDistributionFloat
		constexpr auto bAbsolute = 0x68; // char : 1
		constexpr auto bFloor = 0x68; // char : 1
		constexpr auto bApplyPSysScale = 0x68; // char : 1
	}

	namespace n_UHeroFacialAnimationComponent {
		constexpr auto FlinchExpressionTime = 0x1b0; // float
		constexpr auto FlinchCooldown = 0x1b4; // float
		constexpr auto MinPctDamageForExpression = 0x1b8; // float
		constexpr auto MaxPctLowDamage = 0x1bc; // float
		constexpr auto MaxPctMedDamage = 0x1c0; // float
		constexpr auto GrappledFacialExpressions = 0x1c8; // TArray<FacialExpressionCombos>
		constexpr auto LowDamageFacialExpressions = 0x1d8; // TArray<FacialExpressionCombos>
		constexpr auto MedDamageFacialExpressions = 0x1e8; // TArray<FacialExpressionCombos>
		constexpr auto HighDamageFacialExpressions = 0x1f8; // TArray<FacialExpressionCombos>
		constexpr auto ExertBlendTime = 0x208; // float
		constexpr auto ExertMaxAHValue = 0x20c; // float
	}

	namespace n_UHUDAmmoUserWidget {
		constexpr auto bIsLowAmmo = 0x4b0; // bool
	}

	namespace n_UParticleModuleMeshRotationRateOverLife {
		constexpr auto RotRate = 0x38; // FRawDistributionVector
		constexpr auto bScaleRotRate = 0x80; // char : 1
	}

	namespace n_UBTDecorator_TagCooldown {
		constexpr auto CooldownTag = 0x70; // FGameplayTag
		constexpr auto CooldownDuration = 0x78; // float
		constexpr auto bAddToExistingDuration = 0x7c; // bool
		constexpr auto bActivatesCooldown = 0x7d; // bool
	}

	namespace n_UParticleModuleSize {
		constexpr auto StartSize = 0x38; // FRawDistributionVector
	}

	namespace n_AVFXCorpse_BP_C {
		constexpr auto PoseableMesh = 0x308; // UPoseableMeshComponent*
	}

	namespace n_UInterpTrackDirector {
		constexpr auto CutTrack = 0x78; // TArray<FDirectorTrackCut>
		constexpr auto bSimulateCameraCutsOnClients = 0x88; // char : 1
	}

	namespace n_UPhysicsSpringComponent {
		constexpr auto SpringStiffness = 0x230; // float
		constexpr auto SpringDamping = 0x234; // float
		constexpr auto SpringLengthAtRest = 0x238; // float
		constexpr auto SpringRadius = 0x23c; // float
		constexpr auto SpringChannel = 0x240; // ECollisionChannel
		constexpr auto bIgnoreSelf = 0x241; // bool
		constexpr auto SpringCompression = 0x244; // float
	}

	namespace n_ULedgeHangUsable_BP_C {
		constexpr auto UberGraphFrame = 0x4f8; // FPointerToUberGraphFrame
		constexpr auto BeingRevived = 0x500; // bool
		constexpr auto UseTime = 0x504; // float
		constexpr auto RequiredUseTime_1 = 0x508; // float
		constexpr auto DidIncapRevive = 0x510; // FMulticastInlineDelegate
		constexpr auto DidRescue = 0x520; // FMulticastInlineDelegate
		constexpr auto DidIncapReviveStart = 0x530; // FMulticastInlineDelegate
		constexpr auto RequiredUseTimeVOThreshold = 0x540; // float
	}

	namespace n_UEnvQueryTest_IsClaimed {
		constexpr auto Querier = 0x208; // UEnvQueryContext*
		constexpr auto ClaimRadius = 0x210; // float
		constexpr auto RadiusOperation = 0x214; // ERadiusOperation
		constexpr auto ItemsClaimingTheirPositionShould = 0x215; // EEnvItemStatus
	}

	namespace n_AWaypoint {
		constexpr auto WaypointDef = 0x2a8; // FWaypointDefinition
		constexpr auto PingTarget = 0x378; // UActorComponent*
		constexpr auto Scale = 0x380; // float
		constexpr auto DataSet = 0x388; // UWaypointDataSet*
		constexpr auto Widgets = 0x390; // TArray<UWaypointUserWidget*>
	}

	namespace n_UCheckBoxStyleAsset {
		constexpr auto CheckBoxStyle = 0x30; // FCheckBoxStyle
	}

	namespace n_ATPFlashlight_Low_C {
		constexpr auto UberGraphFrame = 0x2b8; // FPointerToUberGraphFrame
	}

	namespace n_UParticleModuleLocation_Seeded {
		constexpr auto RandomSeedInfo = 0x88; // FParticleRandomSeedInfo
	}

	namespace n_ANavigationData {
		constexpr auto RenderingComp = 0x2a8; // UPrimitiveComponent*
		constexpr auto NavDataConfig = 0x2b0; // FNavDataConfig
		constexpr auto bEnableDrawing = 0x328; // char : 1
		constexpr auto bForceRebuildOnLoad = 0x328; // char : 1
		constexpr auto bAutoDestroyWhenNoNavigation = 0x328; // char : 1
		constexpr auto bCanBeMainNavData = 0x328; // char : 1
		constexpr auto bCanSpawnOnRebuild = 0x328; // char : 1
		constexpr auto bRebuildAtRuntime = 0x328; // char : 1
		constexpr auto RuntimeGeneration = 0x32c; // ERuntimeGenerationType
		constexpr auto ObservedPathsTickInterval = 0x330; // float
		constexpr auto DataVersion = 0x334; // uint32_t
		constexpr auto SupportedAreas = 0x418; // TArray<FSupportedAreaData>
	}

	namespace n_UReverbEffect {
		constexpr auto Density = 0x30; // float
		constexpr auto Diffusion = 0x34; // float
		constexpr auto Gain = 0x38; // float
		constexpr auto GainHF = 0x3c; // float
		constexpr auto DecayTime = 0x40; // float
		constexpr auto DecayHFRatio = 0x44; // float
		constexpr auto ReflectionsGain = 0x48; // float
		constexpr auto ReflectionsDelay = 0x4c; // float
		constexpr auto LateGain = 0x50; // float
		constexpr auto LateDelay = 0x54; // float
		constexpr auto AirAbsorptionGainHF = 0x58; // float
		constexpr auto RoomRolloffFactor = 0x5c; // float
	}

	namespace n_AZombieMelee_AICharacterBP_C {
		constexpr auto InfectedHighlight = 0x13a0; // UInfectedHighlightComponent*
	}

	namespace n_UARFaceGeometry {
		constexpr auto LookAtTarget = 0xe8; // FVector
		constexpr auto bIsTracked = 0xf4; // bool
		constexpr auto BlendShapes = 0xf8; // TMap<EARFaceBlendShape, float>
	}

	namespace n_UGameplayEffectParticle {
		constexpr auto TargetSceneComponent = 0x238; // USceneComponent*
		constexpr auto TargetSceneComponentLookup = 0x240; // FComponentLookup
		constexpr auto ParticleSet = 0x280; // FParticleSet
		constexpr auto OnStopParticleSet = 0x300; // FParticleSet
		constexpr auto bTurnOffOnTargetDeath = 0x380; // bool
	}

	namespace n_UGridPanel {
		constexpr auto ColumnFill = 0x160; // TArray<float>
		constexpr auto RowFill = 0x170; // TArray<float>
	}

	namespace n_UPlatformInterfaceBase {
		constexpr auto AllDelegates = 0x30; // TArray<FDelegateArray>
	}

	namespace n_USkeleton {
		constexpr auto BoneTree = 0x40; // TArray<FBoneNode>
		constexpr auto RefLocalPoses = 0x50; // TArray<FTransform>
		constexpr auto VirtualBoneGuid = 0x178; // FGuid
		constexpr auto VirtualBones = 0x188; // TArray<FVirtualBone>
		constexpr auto Sockets = 0x198; // TArray<USkeletalMeshSocket*>
		constexpr auto SmartNames = 0x1f8; // FSmartNameContainer
		constexpr auto BlendProfiles = 0x278; // TArray<UBlendProfile*>
		constexpr auto SlotGroups = 0x288; // TArray<FAnimSlotGroup>
		constexpr auto AssetUserData = 0x360; // TArray<UAssetUserData*>
	}

	namespace n_UGameplayCardFan {
		constexpr auto OnCardAdded = 0x718; // FMulticastInlineDelegate
		constexpr auto OnCardCountChanged = 0x728; // FMulticastInlineDelegate
	}

	namespace n_UInGameAdManager {
		constexpr auto bShouldPauseWhileAdOpen = 0x40; // char : 1
		constexpr auto ClickedBannerDelegates = 0x48; // TArray<FDelegate>
		constexpr auto ClosedAdDelegates = 0x58; // TArray<FDelegate>
	}

	namespace n_UTouchInterface {
		constexpr auto Controls = 0x30; // TArray<FTouchInputControl>
		constexpr auto ActiveOpacity = 0x40; // float
		constexpr auto InactiveOpacity = 0x44; // float
		constexpr auto TimeUntilDeactive = 0x48; // float
		constexpr auto TimeUntilReset = 0x4c; // float
		constexpr auto ActivationDelay = 0x50; // float
		constexpr auto bPreventRecenter = 0x54; // bool
		constexpr auto StartupDelay = 0x58; // float
	}

	namespace n_ACapsuleProjectile {
		constexpr auto CollisionComponent = 0x658; // UCapsuleComponent*
	}

	namespace n_AGobiNavLink {
		constexpr auto NavLinkComponent = 0x2a8; // UGobiNavLinkComponent*
	}

	namespace n_ABird {
		constexpr auto PerchedMesh = 0x2a8; // UStaticMesh*
		constexpr auto FlyingMesh = 0x2b0; // UStaticMesh*
		constexpr auto SkeletalMesh = 0x2b8; // USkeletalMesh*
		constexpr auto ParticlesBone = 0x2c0; // FName
		constexpr auto FlyoffParticlesChance = 0x2c8; // float
		constexpr auto FlyoffParticles = 0x2d0; // UParticleSystem*
		constexpr auto DeathParticles = 0x2d8; // UParticleSystem*
		constexpr auto IdleAnim = 0x2e0; // UAnimMontage*
		constexpr auto IdleFlourishWeights = 0x2e8; // TMap<FName, float>
		constexpr auto IdleFlourishesWithHorizontalMovement = 0x338; // TArray<FName>
		constexpr auto IdleFlourishDelay = 0x348; // FVector2D
		constexpr auto FlyingAnim = 0x350; // UAnimMontage*
		constexpr auto LandingSection = 0x358; // FName
		constexpr auto LandingDuration = 0x360; // float
		constexpr auto HealthScale = 0x364; // FVector2D
		constexpr auto Scale = 0x36c; // FVector2D
		constexpr auto Speed = 0x374; // FVector2D
		constexpr auto TurnRate = 0x37c; // float
		constexpr auto LaunchDelay = 0x380; // float
		constexpr auto AlertHearingRadius = 0x384; // float
		constexpr auto AlertRadiusMultiplier = 0x388; // float
		constexpr auto WeaponShotHearingRadius = 0x38c; // float
		constexpr auto WeaponWhizByHearingRadius = 0x390; // float
		constexpr auto WeaponImpactHearingRadius = 0x394; // float
		constexpr auto WeaponAlertRadiusScalePower = 0x398; // float
		constexpr auto bDamageable = 0x39c; // bool
		constexpr auto AKEDeath = 0x3a0; // UAkAudioEvent*
		constexpr auto AKEDeathFire = 0x3a8; // UAkAudioEvent*
		constexpr auto UpdateRateOptimizationCategory = 0x3b0; // FGameplayTag
		constexpr auto State = 0x3b8; // EBirdState
		constexpr auto SplineFlying = 0x3c0; // USplineComponent*
		constexpr auto BirdSystem = 0x3c8; // ABirdSystem*
		constexpr auto CurrentSite = 0x3d0; // ABirdSite*
		constexpr auto TakeoffDelay = 0x3d8; // bool
		constexpr auto StaticMeshComponent = 0x408; // UStaticMeshComponent*
		constexpr auto SkeletalMeshComponent = 0x410; // USkeletalMeshComponent*
		constexpr auto GameplayTagsComponent = 0x418; // UGameplayTagsComponent*
		constexpr auto HealthComponent = 0x420; // UHealthComponent*
		constexpr auto GameplayEffectsComponent = 0x428; // UGameplayEffectsComponent*
	}

	namespace n_UTextureRenderTarget2D {
		constexpr auto SizeX = 0xc8; // int32_t
		constexpr auto SizeY = 0xcc; // int32_t
		constexpr auto ClearColor = 0xd0; // FLinearColor
		constexpr auto AddressX = 0xe0; // TextureAddress
		constexpr auto AddressY = 0xe1; // TextureAddress
		constexpr auto bForceLinearGamma = 0xe2; // char : 1
		constexpr auto bHDR = 0xe2; // char : 1
		constexpr auto bGPUSharedFlag = 0xe2; // char : 1
		constexpr auto RenderTargetFormat = 0xe3; // ETextureRenderTargetFormat
		constexpr auto bAutoGenerateMips = 0xe4; // char : 1
		constexpr auto MipsSamplerFilter = 0xe5; // TextureFilter
		constexpr auto MipsAddressU = 0xe6; // TextureAddress
		constexpr auto MipsAddressV = 0xe7; // TextureAddress
		constexpr auto OverrideFormat = 0xe8; // EPixelFormat
	}

	namespace n_UJoinSessionCallbackProxy {
		constexpr auto OnSuccess = 0x38; // FMulticastInlineDelegate
		constexpr auto OnFailure = 0x48; // FMulticastInlineDelegate
	}

	namespace n_ULoadoutTrait {
		constexpr auto Loadout = 0x30; // FInventoryLoadout
		constexpr auto LoadoutSource = 0x68; // ELoadoutSource
	}

	namespace n_USynthComponentMonoWaveTable {
		constexpr auto OnTableAltered = 0x710; // FMulticastInlineDelegate
		constexpr auto OnNumTablesChanged = 0x720; // FMulticastInlineDelegate
		constexpr auto CurrentPreset = 0x730; // UMonoWaveTableSynthPreset*
	}

	namespace n_UMatchesSubsystem {
		constexpr auto bEnabledForPlatform = 0x58; // bool
		constexpr auto OperationTimerConfig = 0x60; // FTaskTimerConfig
		constexpr auto AddRemovePlayersTimerConfig = 0x160; // FTaskTimerConfig
		constexpr auto HeartbeatTimerConfig = 0x260; // FTaskTimerConfig
	}

	namespace n_UInterpTrackInstVectorMaterialParam {
		constexpr auto MaterialInstances = 0x30; // TArray<UMaterialInstanceDynamic*>
		constexpr auto ResetVectors = 0x40; // TArray<FVector>
		constexpr auto PrimitiveMaterialRefs = 0x50; // TArray<FPrimitiveMaterialRef>
		constexpr auto InstancedTrack = 0x60; // UInterpTrackVectorMaterialParam*
	}

	namespace n_USoundNodeMixer {
		constexpr auto InputVolume = 0x60; // TArray<float>
	}

	namespace n_UScaleBoxSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UDistributionVector {
		constexpr auto bCanBeBaked = 0x38; // char : 1
		constexpr auto bIsDirty = 0x38; // char : 1
		constexpr auto bBakedDataSuccesfully = 0x38; // char : 1
	}

	namespace n_UAkMacInitializationSettings {
		constexpr auto CommonSettings = 0x30; // FAkCommonInitializationSettingsWithSampleRate
		constexpr auto CommunicationSettings = 0x98; // FAkCommunicationSettingsWithSystemInitialization
		constexpr auto AdvancedSettings = 0xc0; // FAkAdvancedInitializationSettingsWithMultiCoreRendering
		constexpr auto TRSSettings = 0xf8; // FAkTRSPerPlatformSettings
	}

	namespace n_UOnInflictDamageTrigger {
		constexpr auto KillCountL1 = 0x50; // int32_t
		constexpr auto KillCountL2 = 0x54; // int32_t
		constexpr auto KillCountL3 = 0x58; // int32_t
		constexpr auto KillCountL4 = 0x5c; // int32_t
		constexpr auto MinTimeForEngagingEnemy = 0x60; // float
		constexpr auto MinTimeForEngagingSpecial = 0x64; // float
		constexpr auto SpecialLowHealthRequirement = 0x68; // float
		constexpr auto HitsRequiredForAimHead = 0x6c; // int32_t
		constexpr auto HitsRequiredForFindWeakSpot = 0x70; // int32_t
		constexpr auto HagTag = 0x74; // FGameplayTag
		constexpr auto FakeDeathTag = 0x7c; // FGameplayTag
		constexpr auto DeadHags = 0x88; // TArray<TWeakObjectPtr<AGobiCharacter>>
		constexpr auto SpecialDownedTags = 0x98; // FGameplayTagQuery
		constexpr auto AllSpecialTags = 0xe0; // FGameplayTagQuery
		constexpr auto MeleeKillTag = 0x128; // FGameplayTagQuery
		constexpr auto HeadshotWeaponTag = 0x170; // FGameplayTagQuery
		constexpr auto SpecialHeadWeakspotTags = 0x1b8; // FGameplayTagQuery
		constexpr auto SpecialShootWeakspotTags = 0x200; // FGameplayTagQuery
	}

	namespace n_AQADashBoundary {
		constexpr auto TextRenderDottedLine = 0x2a0; // UTextRenderComponent*
		constexpr auto TextRenderSection = 0x2a8; // UTextRenderComponent*
		constexpr auto TextRenderSector = 0x2b0; // UTextRenderComponent*
	}

	namespace n_UBlackboardKeyType_NativeEnum {
		constexpr auto EnumName = 0x38; // FString
		constexpr auto EnumType = 0x48; // UEnum*
	}

	namespace n_UNavigationInvokerComponent {
		constexpr auto TileGenerationRadius = 0xe8; // float
		constexpr auto TileRemovalRadius = 0xec; // float
	}

	namespace n_URichTextBlock {
		constexpr auto DefaultGlobalStyle = 0x168; // FRichTextGlobalStyle
		constexpr auto bForceUppercase = 0x170; // bool
		constexpr auto Text = 0x178; // FText
		constexpr auto TextStyleSet = 0x190; // UDataTable*
		constexpr auto DecoratorClasses = 0x198; // TArray<URichTextBlockDecorator*>
		constexpr auto bOverrideDefaultStyle = 0x1a8; // bool
		constexpr auto DefaultTextStyleOverride = 0x1b0; // FTextBlockStyle
		constexpr auto MinDesiredWidth = 0x450; // float
		constexpr auto Kerning = 0x454; // int32_t
		constexpr auto InstanceDecorators = 0x6f8; // TArray<URichTextBlockDecorator*>
	}

	namespace n_UMaterialExpressionDotProduct {
		constexpr auto A = 0x48; // FExpressionInput
		constexpr auto B = 0x5c; // FExpressionInput
	}

	namespace n_APrecomputedVisibilityOverrideVolume {
		constexpr auto OverrideVisibleActors = 0x2d8; // TArray<AActor*>
		constexpr auto OverrideInvisibleActors = 0x2e8; // TArray<AActor*>
		constexpr auto OverrideInvisibleLevels = 0x2f8; // TArray<FName>
	}

	namespace n_UInterpTrackVectorProp {
		constexpr auto PropertyName = 0x98; // FName
	}

	namespace n_UMovieSceneStringSection {
		constexpr auto StringCurve = 0xe8; // FMovieSceneStringChannel
	}

	namespace n_UMapMetricsDataAsset {
		constexpr auto bLogOutResults = 0x38; // bool
		constexpr auto ClimbMetricStepDist = 0x3c; // float
		constexpr auto JumpMetricStepDist = 0x40; // float
		constexpr auto MapMetricsCombined = 0x48; // FMapMetricData
		constexpr auto MapMetrics = 0x80; // TArray<FMapMetricData>
	}

	namespace n_UAnimContext_ActorLocator {
		constexpr auto ActorContext = 0x70; // UAnimContext_Actor*
		constexpr auto LocatorTag = 0x78; // FGameplayTag
	}

	namespace n_UGizmoPlaneTranslationParameterSource {
		constexpr auto AxisSource = 0x90; // TScriptInterface<IGizmoAxisSource>
		constexpr auto TransformSource = 0xa0; // TScriptInterface<IGizmoTransformSource>
		constexpr auto Parameter = 0xb0; // FVector2D
		constexpr auto LastChange = 0xb8; // FGizmoVec2ParameterChange
		constexpr auto CurTranslationOrigin = 0xc8; // FVector
		constexpr auto CurTranslationNormal = 0xd4; // FVector
		constexpr auto CurTranslationAxisX = 0xe0; // FVector
		constexpr auto CurTranslationAxisY = 0xec; // FVector
		constexpr auto InitialTransform = 0x100; // FTransform
	}

	namespace n_AHG05_BP_C {
		constexpr auto ADS = 0x520; // UADSComponent*
		constexpr auto FireModeSingleTrace = 0x528; // UFireModeSingleTraceComponent*
		constexpr auto BulletPenetration = 0x530; // UBulletPenetrationComponent*
		constexpr auto ClipAmmo = 0x538; // UClipAmmoComponent*
		constexpr auto Recoil = 0x540; // URecoilComponent*
		constexpr auto ClipReload = 0x548; // UClipReloadComponent*
		constexpr auto Spread = 0x550; // USpreadComponent*
		constexpr auto ItemAnimationData = 0x558; // UItemAnimationDataComponent*
	}

	namespace n_AGobiAIController {
		constexpr auto BTAsset = 0x398; // UBehaviorTree*
		constexpr auto DMapSpawnData = 0x3b4; // FDMapAISpawnData
		constexpr auto OnDMapSpawnDistanceCalculated = 0x3c0; // FMulticastInlineDelegate
		constexpr auto bIsClientAI = 0x3d0; // bool
		constexpr auto bIgnoresBotsWhenCalm = 0x3d1; // bool
		constexpr auto CurrentRequestsData = 0x3f0; // TMap<uint32_t, FMovePathRequestData>
	}

	namespace n_UComboBoxWidgetStyle {
		constexpr auto ComboBoxStyle = 0x38; // FComboBoxStyle
	}

	namespace n_UParticleModuleLocationPrimitiveTriangle {
		constexpr auto StartOffset = 0x38; // FRawDistributionVector
		constexpr auto Height = 0x80; // FRawDistributionFloat
		constexpr auto Angle = 0xb0; // FRawDistributionFloat
		constexpr auto Thickness = 0xe0; // FRawDistributionFloat
	}

	namespace n_UAISenseConfig {
		constexpr auto DebugColor = 0x30; // FColor
		constexpr auto MaxAge = 0x34; // float
		constexpr auto bStartsEnabled = 0x38; // char : 1
	}

	namespace n_UBookMark2D {
		constexpr auto Zoom2D = 0x30; // float
		constexpr auto Location = 0x34; // FIntPoint
	}

	namespace n_UBillboardComponent {
		constexpr auto Sprite = 0x4b0; // UTexture2D*
		constexpr auto bIsScreenSizeScaled = 0x4b8; // char : 1
		constexpr auto ScreenSize = 0x4bc; // float
		constexpr auto U = 0x4c0; // float
		constexpr auto UL = 0x4c4; // float
		constexpr auto V = 0x4c8; // float
		constexpr auto VL = 0x4cc; // float
	}

	namespace n_ASkeletalMeshActor {
		constexpr auto bShouldDoAnimNotifies = 0x2a8; // char : 1
		constexpr auto bWakeOnLevelStart = 0x2a8; // char : 1
		constexpr auto SkeletalMeshComponent = 0x2b0; // USkeletalMeshComponent*
		constexpr auto ReplicatedMesh = 0x2b8; // USkeletalMesh*
		constexpr auto ReplicatedPhysAsset = 0x2c0; // UPhysicsAsset*
		constexpr auto ReplicatedMaterial0 = 0x2c8; // UMaterialInterface*
		constexpr auto ReplicatedMaterial1 = 0x2d0; // UMaterialInterface*
	}

	namespace n_UGridSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
		constexpr auto Row = 0x54; // int32_t
		constexpr auto RowSpan = 0x58; // int32_t
		constexpr auto Column = 0x5c; // int32_t
		constexpr auto ColumnSpan = 0x60; // int32_t
		constexpr auto Layer = 0x64; // int32_t
		constexpr auto Nudge = 0x68; // FVector2D
	}

	namespace n_UGobiCharacterMovementComponent {
		constexpr auto CollisionType = 0x68c; // ECollisionEnabled
		constexpr auto CollisionProfileIndex = 0x68d; // int8_t
		constexpr auto AttachedTags = 0x698; // FGameplayTagContainer
		constexpr auto CharacterMovementDebugEndpoint = 0x708; // UCharacterMovementDebugEndpoint*
		constexpr auto bUseGroundCheckSphereSweep = 0x710; // bool
		constexpr auto bUseFootPlantingSphereSweep = 0x711; // bool
		constexpr auto RecastNavMesh = 0x718; // ARecastNavMesh*
		constexpr auto OverrideGroundTraceLength = 0x720; // float
		constexpr auto FallTimeTillFallOutOfWorld = 0x734; // float
		constexpr auto GobiCharacter = 0x760; // AGobiCharacter*
		constexpr auto SimulatedInput = 0x768; // FMovementTickableInput
		constexpr auto ReplicatedMontageComponent = 0x790; // UReplicatedMontageComponent*
		constexpr auto GameplayTagsComponent = 0x7a0; // UGameplayTagsComponent*
		constexpr auto AutoCrouch = 0x7e4; // EAutoCrouch
		constexpr auto MaxBackupToUnCrouch = 0x7e8; // float
		constexpr auto bCanWalkOnUnwalkableSurfaces = 0x7ec; // bool
		constexpr auto ChargeComponent = 0x818; // UChargeComponent*
		constexpr auto DefaultPathMovementScalar = 0x820; // float
		constexpr auto PathMovementScalars = 0x828; // TMap<FGameplayTag, float>
		constexpr auto NavWalkingFilter = 0x8c8; // UNavigationQueryFilter*
		constexpr auto NavMeshIgnoreTagsQuery = 0x8d0; // FGameplayTagQuery
		constexpr auto NavWalkingCollisionProfile = 0x918; // FCollisionProfileName
		constexpr auto DefaultWalkingCollisionProfile = 0x920; // FName
	}

	namespace n_UBehaviorTreeComponent {
		constexpr auto NodeInstances = 0x168; // TArray<UBTNode*>
		constexpr auto DefaultBehaviorTreeAsset = 0x2a0; // UBehaviorTree*
	}

	namespace n_UWaterRippleMakers {
		constexpr auto DefaultDef = 0x38; // UWaterRipplerDef*
		constexpr auto ActorTypes = 0x40; // TMap<AGobiCharacter*, UWaterRipplerDef*>
	}

	namespace n_UGameplayEffectSetMaterialParams {
		constexpr auto MaterialParamSet = 0x238; // UMeshMaterialParamSet*
		constexpr auto OnStopMaterialParamSet = 0x240; // UMeshMaterialParamSet*
		constexpr auto bRestoreParamValuesOnStop = 0x248; // bool
	}

	namespace n_USingleClickInputBehavior {
		constexpr auto HitTestOnRelease = 0xc0; // bool
	}

	namespace n_UAchievement {
		constexpr auto Category = 0x31; // EAchievementCategory
		constexpr auto AchievementConfig = 0x38; // FAchievementConfig
		constexpr auto bRunInCampaign = 0x60; // bool
		constexpr auto bRunInPVP = 0x61; // bool
		constexpr auto CardRewards = 0x68; // TArray<FDataTableRowHandle>
		constexpr auto SupplyPointsReward = 0x78; // int32_t
		constexpr auto bNotForShipping = 0x7c; // bool
		constexpr auto FriendlyName = 0x80; // FText
		constexpr auto FriendlyDescription = 0x98; // FText
		constexpr auto Icon = 0xb0; // UTexture2D*
	}

	namespace n_UItemPreLoader {
		constexpr auto ItemRows = 0x30; // TArray<FDataTableRowHandle>
	}

	namespace n_UPhysicalMaterial {
		constexpr auto Friction = 0x30; // float
		constexpr auto FrictionCombineMode = 0x34; // EFrictionCombineMode
		constexpr auto bOverrideFrictionCombineMode = 0x35; // bool
		constexpr auto Restitution = 0x38; // float
		constexpr auto RestitutionCombineMode = 0x3c; // EFrictionCombineMode
		constexpr auto bOverrideRestitutionCombineMode = 0x3d; // bool
		constexpr auto Density = 0x40; // float
		constexpr auto RaiseMassToPower = 0x44; // float
		constexpr auto DestructibleDamageThresholdScale = 0x48; // float
		constexpr auto PhysicalMaterialProperty = 0x50; // UPhysicalMaterialPropertyBase*
		constexpr auto SurfaceType = 0x58; // EPhysicalSurface
		constexpr auto TireFrictionScale = 0x5c; // float
		constexpr auto TireFrictionScales = 0x60; // TArray<FTireFrictionScalePair>
	}

	namespace n_UAnimSharingStateInstance {
		constexpr auto AnimationToPlay = 0x2b8; // UAnimSequence*
		constexpr auto PermutationTimeOffset = 0x2c0; // float
		constexpr auto PlayRate = 0x2c4; // float
		constexpr auto bStateBool = 0x2c8; // bool
		constexpr auto Instance = 0x2d0; // UAnimSharingInstance*
	}

	namespace n_AOnlineBeaconHost {
		constexpr auto ListenPort = 0x2d0; // int32_t
		constexpr auto ClientActors = 0x2d8; // TArray<AOnlineBeaconClient*>
	}

	namespace n_AMapSpatialInfoGenerationVolume {
		constexpr auto bOverrideNavMeshQueryExtentZFactor = 0x2d8; // bool
		constexpr auto NavMeshQueryExtentZFactor = 0x2dc; // float
	}

	namespace n_UMediaTexture {
		constexpr auto AddressX = 0xc0; // TextureAddress
		constexpr auto AddressY = 0xc1; // TextureAddress
		constexpr auto AutoClear = 0xc2; // bool
		constexpr auto ClearColor = 0xc4; // FLinearColor
		constexpr auto EnableGenMips = 0xd4; // bool
		constexpr auto NumMips = 0xd5; // char
		constexpr auto MediaPlayer = 0xd8; // UMediaPlayer*
	}

	namespace n_UGobiGameInstance {
		constexpr auto OnLocalTeamChanged = 0x1b0; // FMulticastInlineDelegate
		constexpr auto SeamlessTravelData = 0x8e8; // TMap<FString, UObject*>
		constexpr auto PlayerSettingsSystem = 0x938; // UPlayerSettingsSystem*
		constexpr auto SecondarySignInInputProcessor = 0x940; // USecondarySignInInputProcessor*
		constexpr auto DistanceMapManagerClass = 0x948; // UDistanceMapManager*
		constexpr auto DistanceMapManager = 0x950; // UDistanceMapManager*
		constexpr auto DifficultyManager = 0x958; // UDifficultyManager*
		constexpr auto ClaimManager = 0x960; // UClaimManager*
		constexpr auto CorpseManagerClass = 0x968; // UCorpseManager*
		constexpr auto CampaignRunManagerClass = 0x970; // UCampaignRunManager*
		constexpr auto CorpseManager = 0x978; // UCorpseManager*
		constexpr auto OnlineSessions = 0x980; // UOnlineSessions*
		constexpr auto DedicatedServerManager = 0x988; // UDedicatedServerManager*
		constexpr auto GobiPlayerProfileManager = 0x990; // UGobiPlayerProfileManager*
		constexpr auto Matchmaking = 0x998; // UMatchmaking*
		constexpr auto MatchmakingPoolManager = 0x9a0; // UMatchmakingPoolManager*
		constexpr auto OnlineFlow = 0x9a8; // UOnlineFlow*
		constexpr auto FriendsManager = 0x9b0; // UFriendsManager*
		constexpr auto GobiWebServices = 0x9b8; // UGobiWebServices*
		constexpr auto DedicatedServerConsole = 0x9c0; // UDedicatedServerConsole*
		constexpr auto MissionMapsTable = 0x9c8; // UDataTable*
		constexpr auto GlobalAssetLoader = 0x9d0; // UGlobalAssetLoader*
		constexpr auto GlobalAssetLoaderV2 = 0x9d8; // UGlobalAssetLoaderV2*
		constexpr auto TeamRelationshipMapClass = 0x9e0; // UTeamRelationshipMap*
		constexpr auto InputIconsClass = 0x9e8; // UPlatformInputIcons*
		constexpr auto ItemPreLoader = 0x9f0; // UItemPreLoader*
		constexpr auto MusicSystemClass = 0x9f8; // UGobiMusicSystem*
		constexpr auto AudioMutilationManagerClass = 0xa00; // UAudioMutilationManager*
		constexpr auto SharedSoundManagerClass = 0xa08; // USharedSoundManager*
		constexpr auto AudioZombieManagerSystemClasses = 0xa10; // TArray<UAudioZombieManagerSystem*>
		constexpr auto CampaignRunManager = 0xa20; // UCampaignRunManager*
		constexpr auto GlobalAnalyticsManager = 0xa28; // UGlobalAnalyticsManager*
		constexpr auto CustomCollisionChannelMap = 0xa30; // UCustomCollisionChannelMap*
		constexpr auto AutomatedClient = 0xa48; // UAutomatedClient*
		constexpr auto AudioController = 0xa50; // AAudioController*
	}

	namespace n_APlayerAssetLoader {
		constexpr auto MannequinAssetSet = 0x2a0; // UAsyncAssetSet*
		constexpr auto SelectedCharactersAssetSet = 0x2a8; // UAsyncAssetSet*
		constexpr auto HeroBotAssetSet = 0x2b0; // UAsyncAssetSet*
	}

	namespace n_UGraphNodeContextMenuContext {
		constexpr auto Blueprint = 0x30; // UBlueprint*
		constexpr auto Graph = 0x38; // UEdGraph*
		constexpr auto Node = 0x40; // UEdGraphNode*
		constexpr auto bIsDebugging = 0x50; // bool
	}

	namespace n_U3P_HeroLoco_Base_ABP_C {
		constexpr auto UberGraphFrame = 0x2c0; // FPointerToUberGraphFrame
		constexpr auto AnimGraphNode_Root = 0x2c8; // FAnimNode_Root
		constexpr auto AnimGraphNode_TransitionResult_77 = 0x2f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_76 = 0x320; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_75 = 0x348; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_74 = 0x370; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_OrientationWarping_23 = 0x398; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_22 = 0x408; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_21 = 0x478; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_20 = 0x4e8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_BlendSpacePlayer_27 = 0x558; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_26 = 0x640; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_25 = 0x728; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_24 = 0x810; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_9 = 0x8f8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendListByBool_5 = 0x9a8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_OrientationWarping_19 = 0xa48; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_18 = 0xab8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_17 = 0xb28; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_16 = 0xb98; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_15 = 0xc08; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_14 = 0xc78; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_13 = 0xce8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_12 = 0xd58; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_11 = 0xdc8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_10 = 0xe38; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_9 = 0xea8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_8 = 0xf18; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_7 = 0xf88; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_6 = 0xff8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_BlendSpacePlayer_23 = 0x1068; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_6 = 0x1150; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_BlendListByGameplayTag_5 = 0x1218; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_BlendListByBool_4 = 0x12e0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendSpacePlayer_22 = 0x1380; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_21 = 0x1468; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_20 = 0x1550; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_19 = 0x1638; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_18 = 0x1720; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_17 = 0x1808; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_16 = 0x18f0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_15 = 0x19d8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_8 = 0x1ac0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_14 = 0x1b70; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_7 = 0x1c58; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_BlendSpacePlayer_13 = 0x1d08; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_12 = 0x1df0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_11 = 0x1ed8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_10 = 0x1fc0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_6 = 0x20a8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_StateResult_59 = 0x2158; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_73 = 0x2188; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_72 = 0x21b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_70 = 0x21d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByBool_3 = 0x2250; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer_69 = 0x22f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_58 = 0x2368; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByGameplayTag_4 = 0x2398; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_SequencePlayer_68 = 0x2460; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_67 = 0x24d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_66 = 0x2550; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_65 = 0x25c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_64 = 0x2640; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByBool_2 = 0x26b8; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_BlendListByGameplayTag_3 = 0x2758; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_SequencePlayer_63 = 0x2820; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_62 = 0x2898; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_61 = 0x2910; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_60 = 0x2988; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_59 = 0x2a00; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_57 = 0x2a78; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_17 = 0x2aa8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_56 = 0x2b58; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_16 = 0x2b88; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_55 = 0x2c38; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_71 = 0x2c68; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_70 = 0x2c90; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendSpacePlayer_9 = 0x2cb8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_ApplyAdditive_5 = 0x2da0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_OrientationWarping_5 = 0x2e68; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_4 = 0x2ed8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_3 = 0x2f48; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping_2 = 0x2fb8; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_OrientationWarping = 0x3028; // FAnimNode_OrientationWarping
		constexpr auto AnimGraphNode_BlendSpacePlayer_8 = 0x3098; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_7 = 0x3180; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_6 = 0x3268; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_5 = 0x3350; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_5 = 0x3438; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_StateResult_54 = 0x34e8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_69 = 0x3518; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_68 = 0x3540; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_58 = 0x3568; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_53 = 0x35e0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_BlendListByGameplayTag_2 = 0x3610; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_SequencePlayer_57 = 0x36d8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_56 = 0x3750; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_55 = 0x37c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_54 = 0x3840; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_53 = 0x38b8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_52 = 0x3930; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_15 = 0x3960; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_51 = 0x3a10; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_14 = 0x3a40; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_50 = 0x3af0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_13 = 0x3b20; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_TransitionResult_67 = 0x3bd0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_66 = 0x3bf8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_65 = 0x3c20; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_64 = 0x3c48; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_63 = 0x3c70; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_62 = 0x3c98; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_61 = 0x3cc0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_60 = 0x3ce8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_59 = 0x3d10; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_58 = 0x3d38; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_57 = 0x3d60; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_56 = 0x3d88; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_55 = 0x3db0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_54 = 0x3dd8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_53 = 0x3e00; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_52 = 0x3e28; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_51 = 0x3e50; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_50 = 0x3e78; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_49 = 0x3ea0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_48 = 0x3ec8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_47 = 0x3ef0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_46 = 0x3f18; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_45 = 0x3f40; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_44 = 0x3f68; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_43 = 0x3f90; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_42 = 0x3fb8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_41 = 0x3fe0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_40 = 0x4008; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_39 = 0x4030; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_38 = 0x4058; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_37 = 0x4080; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_36 = 0x40a8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_35 = 0x40d0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_34 = 0x40f8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_33 = 0x4120; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_32 = 0x4148; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_31 = 0x4170; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_30 = 0x4198; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_29 = 0x41c0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_52 = 0x41e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_49 = 0x4260; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_51 = 0x4290; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_48 = 0x4308; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_50 = 0x4338; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_47 = 0x43b0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_28 = 0x43e0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_27 = 0x4408; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_26 = 0x4430; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_25 = 0x4458; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_24 = 0x4480; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_23 = 0x44a8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_49 = 0x44d0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_46 = 0x4548; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_48 = 0x4578; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_45 = 0x45f0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_47 = 0x4620; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_44 = 0x4698; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_46 = 0x46c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_43 = 0x4740; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_12 = 0x4770; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_42 = 0x4820; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_45 = 0x4850; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_7 = 0x48c8; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_4 = 0x48f0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_41 = 0x49b8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_22 = 0x49e8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_21 = 0x4a10; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_44 = 0x4a38; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_40 = 0x4ab0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_43 = 0x4ae0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_39 = 0x4b58; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_42 = 0x4b88; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_38 = 0x4c00; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_11 = 0x4c30; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_37 = 0x4ce0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_20 = 0x4d10; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_19 = 0x4d38; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_41 = 0x4d60; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_36 = 0x4dd8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_40 = 0x4e08; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_35 = 0x4e80; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_39 = 0x4eb0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_34 = 0x4f28; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_10 = 0x4f58; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_33 = 0x5008; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_18 = 0x5038; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_17 = 0x5060; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_16 = 0x5088; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_38 = 0x50b0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_32 = 0x5128; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_37 = 0x5158; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_31 = 0x51d0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_36 = 0x5200; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_30 = 0x5278; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_9 = 0x52a8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_29 = 0x5358; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_35 = 0x5388; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_28 = 0x5400; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_15 = 0x5430; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_34 = 0x5458; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_27 = 0x54d0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_33 = 0x5500; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_26 = 0x5578; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_8 = 0x55a8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_25 = 0x5658; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_14 = 0x5688; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_13 = 0x56b0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_12 = 0x56d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_11 = 0x5700; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_32 = 0x5728; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_24 = 0x57a0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_31 = 0x57d0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_23 = 0x5848; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_30 = 0x5878; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_22 = 0x58f0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_29 = 0x5920; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_21 = 0x5998; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_28 = 0x59c8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_20 = 0x5a40; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_7 = 0x5a70; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_19 = 0x5b20; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_27 = 0x5b50; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_26 = 0x5bc8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_4 = 0x5c40; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_SequencePlayer_25 = 0x5cf0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_18 = 0x5d68; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_24 = 0x5d98; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_RotateRootBone = 0x5e10; // FAnimNode_RotateRootBone
		constexpr auto AnimGraphNode_TransitionResult_10 = 0x5eb0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_9 = 0x5ed8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendSpacePlayer_4 = 0x5f00; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_3 = 0x5fe8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer_2 = 0x60d0; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendSpacePlayer = 0x61b8; // FAnimNode_BlendSpacePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_3 = 0x62a0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_StateResult_17 = 0x6350; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_8 = 0x6380; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_7 = 0x63a8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_23 = 0x63d0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_22 = 0x6448; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_21 = 0x64c0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_20 = 0x6538; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_19 = 0x65b0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByGameplayTag = 0x6628; // FAnimNode_BlendListByGameplayTag
		constexpr auto AnimGraphNode_StateResult_16 = 0x66f0; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_18 = 0x6720; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_15 = 0x6798; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_6 = 0x67c8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_14 = 0x6878; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_5 = 0x68a8; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_BlendListByGameplayTagQuery = 0x6958; // FAnimNode_BlendListByGameplayTagQuery
		constexpr auto AnimGraphNode_SequencePlayer_17 = 0x6a20; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_16 = 0x6a98; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_15 = 0x6b10; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_13 = 0x6b88; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_6 = 0x6bb8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_BlendListByBool = 0x6be0; // FAnimNode_BlendListByBool
		constexpr auto AnimGraphNode_SequencePlayer_14 = 0x6c80; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_13 = 0x6cf8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_12 = 0x6d70; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_12 = 0x6da0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_11 = 0x6e18; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_4 = 0x6e48; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_10 = 0x6ef8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_11 = 0x6f28; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_UseCachedPose_6 = 0x6fa0; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_3 = 0x6fc8; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_StateResult_9 = 0x7090; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_TransitionResult_5 = 0x70c0; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_10 = 0x70e8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_8 = 0x7160; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_9 = 0x7190; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_7 = 0x7208; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_3 = 0x7238; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_StateResult_6 = 0x72e8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_5 = 0x7318; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_5 = 0x7340; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine_2 = 0x7370; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_SaveCachedPose_2 = 0x7420; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_TransitionResult_4 = 0x74d8; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_3 = 0x7500; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult_2 = 0x7528; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_TransitionResult = 0x7550; // FAnimNode_TransitionResult
		constexpr auto AnimGraphNode_SequencePlayer_8 = 0x7578; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_7 = 0x75f0; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_6 = 0x7668; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum_2 = 0x76e0; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_UseCachedPose_4 = 0x7790; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive_2 = 0x77b8; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer_5 = 0x7880; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_4 = 0x78f8; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose_3 = 0x7928; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult_3 = 0x7950; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_SequencePlayer_4 = 0x7980; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_3 = 0x79f8; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_SequencePlayer_2 = 0x7a70; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_BlendListByEnum = 0x7ae8; // FAnimNode_BlendListByEnum
		constexpr auto AnimGraphNode_UseCachedPose_2 = 0x7b98; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_ApplyAdditive = 0x7bc0; // FAnimNode_ApplyAdditive
		constexpr auto AnimGraphNode_SequencePlayer = 0x7c88; // FAnimNode_SequencePlayer
		constexpr auto AnimGraphNode_StateResult_2 = 0x7d00; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_UseCachedPose = 0x7d30; // FAnimNode_UseCachedPose
		constexpr auto AnimGraphNode_StateResult = 0x7d58; // FAnimNode_StateResult
		constexpr auto AnimGraphNode_StateMachine = 0x7d88; // FAnimNode_StateMachine
		constexpr auto AnimGraphNode_SaveCachedPose = 0x7e38; // FAnimNode_SaveCachedPose
		constexpr auto AnimGraphNode_LocalToComponentSpace = 0x7ef0; // FAnimNode_ConvertLocalToComponentSpace
		constexpr auto AnimGraphNode_ComponentToLocalSpace = 0x7f10; // FAnimNode_ConvertComponentToLocalSpace
		constexpr auto AnimGraphNode_CopyBone_4 = 0x7f30; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_CopyBone_3 = 0x8020; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_CopyBone_2 = 0x8110; // FAnimNode_CopyBone
		constexpr auto AnimGraphNode_CopyBone = 0x8200; // FAnimNode_CopyBone
		constexpr auto BackwardDirection = 0x82f0; // FAnimDirectionRange
		constexpr auto LeftDirection = 0x830c; // FAnimDirectionRange
		constexpr auto RightDirection = 0x8328; // FAnimDirectionRange
		constexpr auto ForwardDirection = 0x8344; // FAnimDirectionRange
		constexpr auto LocomotionData = 0x8360; // FAnimLocomotionData
		constexpr auto AnimationState = 0x83a0; // FGobiAnimationState
		constexpr auto HeroAnimState = 0x8400; // FHeroAnimState3P
		constexpr auto TurnInPlaceState = 0x8800; // FLocoTurnInPlace
		constexpr auto LocoPredict = 0x88b0; // FLocomotionPrediction
		constexpr auto LadderState = 0x8918; // FLadderAnimState
		constexpr auto Leaning = 0x8920; // FLocoLeaning
		constexpr auto LocoBlendTime = 0x892c; // float
		constexpr auto BlendTime = 0x8930; // float
		constexpr auto AnimState3P = 0x8934; // FAnimState3P
		constexpr auto HeroDraggedAnimData = 0x893c; // FHeroDraggedAnimData3P
		constexpr auto MaxJogSpeed = 0x8950; // float
	}

	namespace n_UGeometryCollectionCache {
		constexpr auto RecordedData = 0x30; // FRecordedTransformTrack
		constexpr auto SupportedCollection = 0x40; // UGeometryCollection*
		constexpr auto CompatibleCollectionState = 0x48; // FGuid
	}

	namespace n_UCanvas {
		constexpr auto OrgX = 0x30; // float
		constexpr auto OrgY = 0x34; // float
		constexpr auto ClipX = 0x38; // float
		constexpr auto ClipY = 0x3c; // float
		constexpr auto DrawColor = 0x40; // FColor
		constexpr auto bCenterX = 0x44; // char : 1
		constexpr auto bCenterY = 0x44; // char : 1
		constexpr auto bNoSmooth = 0x44; // char : 1
		constexpr auto SizeX = 0x48; // int32_t
		constexpr auto SizeY = 0x4c; // int32_t
		constexpr auto ColorModulate = 0x50; // FPlane
		constexpr auto DefaultTexture = 0x60; // UTexture2D*
		constexpr auto GradientTexture0 = 0x68; // UTexture2D*
		constexpr auto ReporterGraph = 0x70; // UReporterGraph*
	}

	namespace n_UWorld {
		constexpr auto PersistentLevel = 0x38; // ULevel*
		constexpr auto NetDriver = 0x40; // UNetDriver*
		constexpr auto LineBatcher = 0x48; // ULineBatchComponent*
		constexpr auto PersistentLineBatcher = 0x50; // ULineBatchComponent*
		constexpr auto ForegroundLineBatcher = 0x58; // ULineBatchComponent*
		constexpr auto NetworkManager = 0x60; // AGameNetworkManager*
		constexpr auto PhysicsCollisionHandler = 0x68; // UPhysicsCollisionHandler*
		constexpr auto ExtraReferencedObjects = 0x70; // TArray<UObject*>
		constexpr auto PerModuleDataObjects = 0x80; // TArray<UObject*>
		constexpr auto LevelSequenceActors = 0x90; // TArray<AActor*>
		constexpr auto StreamingLevels = 0xa0; // TArray<ULevelStreaming*>
		constexpr auto StreamingLevelsToConsider = 0xb0; // FStreamingLevelsToConsider
		constexpr auto StreamingLevelsPrefix = 0xd8; // FString
		constexpr auto CurrentLevelPendingVisibility = 0xe8; // ULevel*
		constexpr auto CurrentLevelPendingInvisibility = 0xf0; // ULevel*
		constexpr auto DemoNetDriver = 0xf8; // UDemoNetDriver*
		constexpr auto MyParticleEventManager = 0x100; // AParticleEventManager*
		constexpr auto DefaultPhysicsVolume = 0x108; // APhysicsVolume*
		constexpr auto bAreConstraintsDirty = 0x126; // char : 1
		constexpr auto CachedGobiCollectionsSubsystem = 0x128; // UWorldSubsystem*
		constexpr auto NavigationSystem = 0x130; // UNavigationSystemBase*
		constexpr auto AuthorityGameMode = 0x138; // AGameModeBase*
		constexpr auto GameState = 0x140; // AGameStateBase*
		constexpr auto AISystem = 0x148; // UAISystemBase*
		constexpr auto AvoidanceManager = 0x150; // UAvoidanceManager*
		constexpr auto Levels = 0x158; // TArray<ULevel*>
		constexpr auto LevelCollections = 0x168; // TArray<FLevelCollection>
		constexpr auto DefaultSpawnLevel = 0x198; // ULevelStreaming*
		constexpr auto OwningGameInstance = 0x1a0; // UGameInstance*
		constexpr auto ParameterCollectionInstances = 0x1a8; // TArray<UMaterialParameterCollectionInstance*>
		constexpr auto CanvasForRenderingToTarget = 0x1b8; // UCanvas*
		constexpr auto CanvasForDrawMaterialToRenderTarget = 0x1c0; // UCanvas*
		constexpr auto ComponentsThatNeedEndOfFrameUpdate = 0x218; // TArray<UActorComponent*>
		constexpr auto ComponentsThatNeedEndOfFrameUpdate_OnGameThread = 0x228; // TArray<UActorComponent*>
		constexpr auto WorldComposition = 0x580; // UWorldComposition*
		constexpr auto PSCPool = 0x610; // FWorldPSCPool
	}

	namespace n_UOptionsSpinnerUserWidget {
		constexpr auto ValueChangedSound = 0x458; // UAkAudioEvent*
		constexpr auto TTSValueOverrides = 0x460; // TMap<int32_t, FString>
	}

	namespace n_UBackgroundBlurSlot {
		constexpr auto Padding = 0x40; // FMargin
		constexpr auto HorizontalAlignment = 0x50; // EHorizontalAlignment
		constexpr auto VerticalAlignment = 0x51; // EVerticalAlignment
	}

	namespace n_UAnimNotify_Teleport {
		constexpr auto Destination = 0x40; // UAnimContext_Transform*
	}

	namespace n_UNamedInterfaces {
		constexpr auto NamedInterfaces = 0x30; // TArray<FNamedInterface>
		constexpr auto NamedInterfaceDefs = 0x40; // TArray<FNamedInterfaceDef>
	}

	namespace n_UGameThreatMod {
		constexpr auto ModifyOp = 0xd0; // EModifyOp
		constexpr auto ModValue = 0xd4; // int32_t
	}

	namespace n_UNavRelevantComponent {
		constexpr auto bAttachToOwnersRoot = 0x10c; // char : 1
		constexpr auto CachedNavParent = 0x110; // UObject*
	}

	namespace n_UTweenLinearColorLatentFactory {
		constexpr auto OnTweenStart = 0x38; // FMulticastInlineDelegate
		constexpr auto OnTweenUpdate = 0x48; // FMulticastInlineDelegate
		constexpr auto OnTweenEnd = 0x58; // FMulticastInlineDelegate
	}

	namespace n_UAlertComponent {
		constexpr auto AlertRadius = 0x230; // float
		constexpr auto bAlertRadiusGrows = 0x234; // bool
		constexpr auto AlertRadiusGrowthAmount = 0x238; // float
		constexpr auto MaxAlertRadius = 0x23c; // float
	}

	namespace n_UWaterRagdollSettings {
		constexpr auto CenterOfMassBoneName = 0x38; // FName
		constexpr auto CenterOfMassBodyRadius = 0x40; // float
		constexpr auto MaxForceDepth = 0x44; // float
		constexpr auto Force = 0x48; // float
		constexpr auto LinearDampening = 0x4c; // float
		constexpr auto AngularDampening = 0x50; // float
		constexpr auto CollisionSphereRadius = 0x54; // float
		constexpr auto CollisionSocketName = 0x58; // FName
		constexpr auto Bones = 0x60; // TArray<FRagdollWaterBoneSettings>
		constexpr auto SplashParticleEffect = 0x70; // UParticleSystem*
		constexpr auto SplashBoneParticleEffect = 0x78; // UParticleSystem*
		constexpr auto WaterRipplerDef = 0x80; // UWaterRipplerDef*
		constexpr auto WaterRipplerBoneDef = 0x88; // UWaterRipplerDef*
	}

	namespace n_UParticleModuleAttractorPoint {
		constexpr auto Position = 0x38; // FRawDistributionVector
		constexpr auto Range = 0x80; // FRawDistributionFloat
		constexpr auto Strength = 0xb0; // FRawDistributionFloat
		constexpr auto StrengthByDistance = 0xe0; // char : 1
		constexpr auto bAffectBaseVelocity = 0xe0; // char : 1
		constexpr auto bOverrideVelocity = 0xe0; // char : 1
		constexpr auto bUseWorldSpacePosition = 0xe0; // char : 1
		constexpr auto Positive_X = 0xe0; // char : 1
		constexpr auto Positive_Y = 0xe0; // char : 1
		constexpr auto Positive_Z = 0xe0; // char : 1
		constexpr auto Negative_X = 0xe0; // char : 1
		constexpr auto Negative_Y = 0xe1; // char : 1
		constexpr auto Negative_Z = 0xe1; // char : 1
	}

	namespace n_ADistanceMapTestActor {
		constexpr auto bShouldDrawMap = 0x2a8; // bool
		constexpr auto TestA = 0x2b0; // ADistanceMapTestActor*
		constexpr auto TestB = 0x2b8; // ADistanceMapTestActor*
		constexpr auto SupportedAgents = 0x2c0; // FNavAgentSelector
		constexpr auto SearchDistance = 0x2c4; // float
	}

	namespace n_UMaterialExpressionCurveAtlasRowParameter {
		constexpr auto Curve = 0x68; // UCurveLinearColor*
		constexpr auto Atlas = 0x70; // UCurveLinearColorAtlas*
		constexpr auto InputTime = 0x78; // FExpressionInput
	}

	namespace n_UBTTask_PlayAnimation {
		constexpr auto AnimationToPlay = 0x78; // UAnimationAsset*
		constexpr auto bLooping = 0x80; // char : 1
		constexpr auto bNonBlocking = 0x80; // char : 1
		constexpr auto MyOwnerComp = 0x88; // UBehaviorTreeComponent*
		constexpr auto CachedSkelMesh = 0x90; // USkeletalMeshComponent*
	}

	namespace n_URectLightComponent {
		constexpr auto SourceWidth = 0x3a0; // float
		constexpr auto SourceHeight = 0x3a4; // float
		constexpr auto BarnDoorAngle = 0x3a8; // float
		constexpr auto BarnDoorLength = 0x3ac; // float
		constexpr auto SourceTexture = 0x3b0; // UTexture*
	}

	namespace n_UMaterialExpressionRound {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_ANavModifierVolume {
		constexpr auto AreaClass = 0x2e0; // UNavArea*
	}

	namespace n_USceneCaptureComponent2D {
		constexpr auto ProjectionType = 0x2c8; // ECameraProjectionMode
		constexpr auto FOVAngle = 0x2cc; // float
		constexpr auto OrthoWidth = 0x2d0; // float
		constexpr auto TextureTarget = 0x2d8; // UTextureRenderTarget2D*
		constexpr auto CompositeMode = 0x2e0; // ESceneCaptureCompositeMode
		constexpr auto PostProcessSettings = 0x2f0; // FPostProcessSettings
		constexpr auto PostProcessBlendWeight = 0x850; // float
		constexpr auto bOverride_CustomNearClippingPlane = 0x854; // char : 1
		constexpr auto CustomNearClippingPlane = 0x858; // float
		constexpr auto bUseCustomProjectionMatrix = 0x85c; // bool
		constexpr auto CustomProjectionMatrix = 0x860; // FMatrix
		constexpr auto bEnableClipPlane = 0x8a0; // bool
		constexpr auto ClipPlaneBase = 0x8a4; // FVector
		constexpr auto ClipPlaneNormal = 0x8b0; // FVector
		constexpr auto bCameraCutThisFrame = 0x8bc; // char : 1
		constexpr auto bConsiderUnrenderedOpaquePixelAsFullyTranslucent = 0x8bc; // char : 1
		constexpr auto bDisableFlipCopyGLES = 0x8c0; // bool
	}

	namespace n_UPhysicsConstraintTemplate {
		constexpr auto DefaultInstance = 0x30; // FConstraintInstance
		constexpr auto ProfileHandles = 0x1e8; // TArray<FPhysicsConstraintProfileHandle>
		constexpr auto DefaultProfile = 0x1f8; // FConstraintProfileProperties
	}

	namespace n_UClipAmmoComponent {
		constexpr auto CurrentClipAmount = 0x1e4; // int32_t
		constexpr auto CalculatedMaxClipAmount = 0x1f0; // int32_t
		constexpr auto AmmoRowHandle = 0x208; // FDataTableRowHandle
		constexpr auto LowAmmoPercentage = 0x228; // float
		constexpr auto bInfiniteReserveAmmo = 0x22c; // bool
		constexpr auto AmmoBeltBoneNamePrefix = 0x230; // FName
		constexpr auto AmmoBeltVacuumClipCountStart = 0x238; // int32_t
		constexpr auto ClipAmmoTuning = 0x23c; // FClipAmmoTuning
	}

	namespace n_ADatasmithImportedSequencesActor {
		constexpr auto ImportedSequences = 0x2a0; // TArray<ULevelSequence*>
	}

	namespace n_UCharacterMovementDebugEndpoint {
		constexpr auto Port = 0xe8; // int32_t
		constexpr auto RecordingCharacters = 0x110; // TMap<ACharacter*, int32_t>
		constexpr auto LocalRecordingCharacters = 0x160; // TSet<ACharacter*>
	}

	namespace n_UMovieSceneSkeletalAnimationSection {
		constexpr auto Params = 0xe8; // FMovieSceneSkeletalAnimationParams
		constexpr auto AnimSequence = 0x1c0; // UAnimSequence*
		constexpr auto Animation = 0x1c8; // UAnimSequenceBase*
		constexpr auto StartOffset = 0x1d0; // float
		constexpr auto EndOffset = 0x1d4; // float
		constexpr auto PlayRate = 0x1d8; // float
		constexpr auto bReverse = 0x1dc; // char : 1
		constexpr auto SlotName = 0x1e0; // FName
	}

	namespace n_UMaterialExpressionTransformPosition {
		constexpr auto Input = 0x48; // FExpressionInput
		constexpr auto TransformSourceType = 0x5c; // EMaterialPositionTransformSource
		constexpr auto TransformType = 0x5d; // EMaterialPositionTransformSource
	}

	namespace n_UMaterialExpressionDeriveNormalZ {
		constexpr auto InXY = 0x48; // FExpressionInput
	}

	namespace n_UBTService_ShouldHorde {
		constexpr auto AlertGenerationBBKey = 0x78; // FBlackboardKeySelector
		constexpr auto HeroLOSThreshold = 0xa0; // FAIDataProviderFloatValue
		constexpr auto AggroBubble = 0xd8; // FAIDataProviderIntValue
	}

	namespace n_UStaminaPipUserWidget {
		constexpr auto Stamina = 0x458; // float
		constexpr auto CurWidth = 0x45c; // float
	}

	namespace n_UNiagaraPreviewAxis_InterpParamBase {
		constexpr auto Param = 0x30; // FName
		constexpr auto Count = 0x38; // int32_t
	}

	namespace n_UDatasmithSceneComponentTemplate {
		constexpr auto RelativeTransform = 0x40; // FTransform
		constexpr auto Mobility = 0x70; // EComponentMobility
		constexpr auto AttachParent = 0x78; // TSoftObjectPtr<USceneComponent>
		constexpr auto Tags = 0xa0; // TSet<FName>
	}

	namespace n_USafeZoneSlot {
		constexpr auto bIsTitleSafe = 0x40; // bool
		constexpr auto SafeAreaScale = 0x44; // FMargin
		constexpr auto HAlign = 0x54; // EHorizontalAlignment
		constexpr auto VAlign = 0x55; // EVerticalAlignment
		constexpr auto Padding = 0x58; // FMargin
	}

	namespace n_USubmixEffectTapDelayPreset {
		constexpr auto Settings = 0x88; // FSubmixEffectTapDelaySettings
	}

	namespace n_UAISense_Damage {
		constexpr auto RegisteredEvents = 0x88; // TArray<FAIDamageEvent>
	}

	namespace n_AAkSpotReflector {
		constexpr auto EarlyReflectionAuxBus = 0x2a0; // UAkAuxBus*
		constexpr auto EarlyReflectionAuxBusName = 0x2a8; // FString
		constexpr auto AcousticTexture = 0x2b8; // UAkAcousticTexture*
		constexpr auto DistanceScalingFactor = 0x2c0; // float
		constexpr auto Level = 0x2c4; // float
	}

	namespace n_ANavigationTestingActor {
		constexpr auto CapsuleComponent = 0x2b0; // UCapsuleComponent*
		constexpr auto InvokerComponent = 0x2b8; // UNavigationInvokerComponent*
		constexpr auto bActAsNavigationInvoker = 0x2c0; // char : 1
		constexpr auto NavAgentProps = 0x2c8; // FNavAgentProperties
		constexpr auto QueryingExtent = 0x2f8; // FVector
		constexpr auto MyNavData = 0x308; // ANavigationData*
		constexpr auto ProjectedLocation = 0x310; // FVector
		constexpr auto bProjectedLocationValid = 0x31c; // char : 1
		constexpr auto bSearchStart = 0x31c; // char : 1
		constexpr auto CostLimitFactor = 0x320; // float
		constexpr auto MinimumCostLimit = 0x324; // float
		constexpr auto bBacktracking = 0x328; // char : 1
		constexpr auto bUseHierarchicalPathfinding = 0x328; // char : 1
		constexpr auto bGatherDetailedInfo = 0x328; // char : 1
		constexpr auto bDrawDistanceToWall = 0x328; // char : 1
		constexpr auto bShowNodePool = 0x328; // char : 1
		constexpr auto bShowBestPath = 0x328; // char : 1
		constexpr auto bShowDiffWithPreviousStep = 0x328; // char : 1
		constexpr auto bShouldBeVisibleInGame = 0x328; // char : 1
		constexpr auto CostDisplayMode = 0x32c; // ENavCostDisplay
		constexpr auto TextCanvasOffset = 0x330; // FVector2D
		constexpr auto bPathExist = 0x338; // char : 1
		constexpr auto bPathIsPartial = 0x338; // char : 1
		constexpr auto bPathSearchOutOfNodes = 0x338; // char : 1
		constexpr auto PathfindingTime = 0x33c; // float
		constexpr auto PathCost = 0x340; // float
		constexpr auto PathfindingSteps = 0x344; // int32_t
		constexpr auto bDoRaycast = 0x348; // bool
		constexpr auto bFindStartNode = 0x349; // bool
		constexpr auto RaycastStart = 0x34c; // FVector
		constexpr auto AdjustedRaycastStart = 0x358; // FVector
		constexpr auto RaycastEnd = 0x364; // FVector
		constexpr auto StartNavLabel = 0x370; // FString
		constexpr auto bRaycastHit = 0x380; // char : 1
		constexpr auto RaycastHitTime = 0x384; // float
		constexpr auto RaycastHitNormal = 0x388; // FVector
		constexpr auto HitLocation = 0x394; // FVector
		constexpr auto bIsRaycastEndInCorridor = 0x3a0; // char : 1
		constexpr auto RaycastCorridorPolysCount = 0x3a4; // int32_t
		constexpr auto OtherActor = 0x3a8; // ANavigationTestingActor*
		constexpr auto FilterClass = 0x3b0; // UNavigationQueryFilter*
		constexpr auto ShowStepIndex = 0x3b8; // int32_t
		constexpr auto OffsetFromCornersDistance = 0x3bc; // float
	}

	namespace n_UGameplayAction_HagHuntIdle {
		constexpr auto HuntInvestigateDuration = 0x210; // float
		constexpr auto HuntIdleMontages = 0x218; // TArray<UAnimMontage*>
		constexpr auto ReturnToIdleMontages = 0x228; // TArray<UAnimMontage*>
		constexpr auto ReturnToIdleEffects = 0x238; // TArray<UGameplayEffect*>
		constexpr auto HuntInvestigateEffectsToRemove = 0x248; // TArray<UGameplayEffect*>
	}

	namespace n_UInteractiveCarSpawnerMod {
		constexpr auto ClassWeights = 0xd8; // FGamePropertyFloatMod [0x3]
	}

	namespace n_UViewport {
		constexpr auto BackgroundColor = 0x160; // FLinearColor
	}

	namespace n_UInterpGroupInst {
		constexpr auto Group = 0x30; // UInterpGroup*
		constexpr auto GroupActor = 0x38; // AActor*
		constexpr auto TrackInst = 0x40; // TArray<UInterpTrackInst*>
	}

	namespace n_UStreamableRenderAsset {
		constexpr auto ForceMipLevelsToBeResidentTimestamp = 0x30; // double
		constexpr auto NumCinematicMipLevels = 0x38; // int32_t
		constexpr auto StreamingIndex = 0x3c; // int32_t
		constexpr auto CachedCombinedLODBias = 0x40; // int32_t
		constexpr auto CachedNumResidentLODs = 0x44; // char
		constexpr auto bCachedReadyForStreaming = 0x45; // char : 1
		constexpr auto NeverStream = 0x45; // char : 1
		constexpr auto bGlobalForceMipLevelsToBeResident = 0x45; // char : 1
		constexpr auto bIsStreamable = 0x45; // char : 1
		constexpr auto bHasStreamingUpdatePending = 0x45; // char : 1
		constexpr auto bForceMiplevelsToBeResident = 0x45; // char : 1
		constexpr auto bIgnoreStreamingMipBias = 0x45; // char : 1
		constexpr auto bUseCinematicMipLevels = 0x45; // char : 1
	}

	namespace n_USmallDeckEntryUserWidget {
		constexpr auto OnDragDrop = 0x458; // FMulticastInlineDelegate
		constexpr auto CardRowHandle = 0x468; // FDataTableRowHandle
		constexpr auto DragVisualClass = 0x488; // USmallDeckEntryDragVisualUserWidget*
	}

	namespace n_UAnimContext_Transform {
		constexpr auto Location = 0x60; // FVector
	}

	namespace n_USpreadComponent {
		constexpr auto bStartSpreadAtMax = 0x290; // bool
		constexpr auto SpreadTuning = 0x294; // FSpreadTuning
	}

	namespace n_ALootSystemDebugger {
		constexpr auto CategoryPool = 0x2a0; // TArray<FDebugLootCategoryInfo>
		constexpr auto DebugSpawnCountMods = 0x2b0; // TArray<FDebugLootSpawnCountMod>
	}

	namespace n_UZombieMovementComponent {
		constexpr auto ChargeProps = 0xe80; // FZombieMovementForceProperties
		constexpr auto ChargeAttributes = 0xe88; // FZombieMovementForceAttributes
		constexpr auto MaxGhostStepHeight = 0xe94; // float
		constexpr auto AutoMantleHeight = 0xe9c; // float
		constexpr auto GhostAutoMantleHeight = 0xea0; // float
		constexpr auto MovementSpeedConfig = 0xff8; // FZombieMovementSpeedConfig
		constexpr auto DisableCrouchInputTags = 0x1028; // FGameplayTagQuery
		constexpr auto MinTimeBeforeSprintCanRelease = 0x1070; // float
		constexpr auto ZombieMovementForce = 0x1078; // FZombieMovementForce
		constexpr auto MantleRequiresJumpPressedAfterHeight = 0x1098; // float
	}

	namespace n_UMaterialExpressionSign {
		constexpr auto Input = 0x48; // FExpressionInput
	}

	namespace n_USourceEffectPhaserPreset {
		constexpr auto Settings = 0x80; // FSourceEffectPhaserSettings
	}

	namespace n_UMaterialExpressionAntialiasedTextureMask {
		constexpr auto Threshold = 0xf8; // float
		constexpr auto Channel = 0xfc; // ETextureColorChannel
	}

	namespace n_UEnvQueryGenerator_WallClingLocations {
		constexpr auto SearchCenter = 0x58; // UEnvQueryContext*
		constexpr auto SearchRadius = 0x60; // FAIDataProviderFloatValue
		constexpr auto bExcludeClaimed = 0x98; // bool
	}

	namespace n_UMovieSceneSignedObject {
		constexpr auto Signature = 0x30; // FGuid
	}

	namespace n_UMontageSet {
		constexpr auto Priority = 0x38; // float
		constexpr auto FilterSet = 0x40; // UGameplayEvaluatorSet*
		constexpr auto Montages = 0x48; // TArray<UAnimMontage*>
	}

	namespace n_UThrobber {
		constexpr auto NumberOfPieces = 0x148; // int32_t
		constexpr auto bAnimateHorizontally = 0x14c; // bool
		constexpr auto bAnimateVertically = 0x14d; // bool
		constexpr auto bAnimateOpacity = 0x14e; // bool
		constexpr auto PieceImage = 0x150; // USlateBrushAsset*
		constexpr auto Image = 0x158; // FSlateBrush
	}

	namespace n_UAOEAttackComponent {
		constexpr auto OnStartAttack = 0x1e0; // FMulticastInlineDelegate
		constexpr auto OnStopAttack = 0x1f0; // FMulticastInlineDelegate
		constexpr auto MoveTickData = 0x200; // FAOEAttackMoveTickData
		constexpr auto AttackMontages = 0x2b8; // TArray<UAnimMontage*>
		constexpr auto AttackEndMontages = 0x2c8; // TArray<UAnimMontage*>
		constexpr auto AOEMontageNotifyName = 0x2d8; // FName
		constexpr auto ReattackMontageNotifyName = 0x2e0; // FName
		constexpr auto AttackMontagesName = 0x2e8; // FName
		constexpr auto AttackCancelBlendOutTime = 0x2f0; // float
		constexpr auto AppliedTags = 0x2f8; // FGameplayTagContainer
		constexpr auto BlockingTags = 0x318; // FGameplayTagContainer
		constexpr auto CancelTagsQuery = 0x338; // FGameplayTagQuery
		constexpr auto ShowReticleTagsQuery = 0x380; // FGameplayTagQuery
		constexpr auto bReactivateIfInputHeld = 0x3c8; // bool
		constexpr auto bUsesPrimaryButton = 0x3c9; // bool
		constexpr auto bRequiresClearTraceCheck = 0x3ca; // bool
		constexpr auto AOEHitTraceValidationTraceCheck = 0x3cc; // FName
		constexpr auto ClearTraceChannel = 0x3d4; // ECollisionChannel
		constexpr auto ServerVolumePadding = 0x3d8; // float
		constexpr auto ApplyEffectsToSelf = 0x3e0; // TArray<UGameplayEffect*>
		constexpr auto AOEEffects = 0x3f0; // TArray<UGameplayEffect*>
		constexpr auto AOEReticleClass = 0x400; // AGobiReticle*
		constexpr auto AOEReticleActiveClass = 0x408; // AGobiReticle*
		constexpr auto bUsesTuningData = 0x410; // bool
		constexpr auto AOEAttackTuning = 0x414; // FAOEAttackTuning
	}

	namespace n_UEnvQueryTest_DistanceMapBase {
		constexpr auto DirectionMode = 0x208; // EDMapDirectionMode
		constexpr auto bUseDirectionModeDataProvider = 0x209; // bool
		constexpr auto DirectionModeDataProvider = 0x210; // FAIDataProviderIntValue
		constexpr auto RelativeDistanceMode = 0x248; // ERelativeDistanceMode
		constexpr auto RelativeDistancePadding = 0x250; // FAIDataProviderFloatValue
		constexpr auto RelativeDistanceSources = 0x288; // UEnvQueryContext*
		constexpr auto ItemResultWhenNoRelativeSourcesOnMap = 0x290; // EEnvItemStatus
		constexpr auto DistanceMapNavMesh = 0x294; // FNavAgentSelector
		constexpr auto DistanceMapSource = 0x298; // UEnvQueryContext*
		constexpr auto ItemsNotOnMapShould = 0x2a0; // EEnvItemStatus
		constexpr auto bInvertScore = 0x2a1; // bool
	}

	namespace n_AGameplayAnalyticsManager {
		constexpr auto GlobalAnalyticsManager = 0x2d0; // UGlobalAnalyticsManager*
		constexpr auto RoundAnalyticsComponent = 0x2d8; // URoundAnalyticsComponent*
		constexpr auto ItemSpawningComponent = 0x2e0; // UItemSpawningAnalyticsComponent*
		constexpr auto DirectorAnalyticsComponent = 0x2e8; // UDirectorAnalyticsComponent*
		constexpr auto DecalAnalyticsComponent = 0x2f0; // UDecalAnalyticsComponent*
		constexpr auto PlayerStateComponent = 0x2f8; // UPlayerStateAnalyticsComponent*
		constexpr auto CardSystemComponent = 0x300; // UCardSystemAnalyticsComponent*
		constexpr auto GameCoachAnalyticsComponent = 0x308; // UGameCoachAnalyticsComponent*
		constexpr auto GenericAggregationComponent = 0x310; // UGenericAggregationComponent*
		constexpr auto InterestingMomentComponent = 0x318; // UInterestingMomentComponent*
		constexpr auto WeaponUsageComponent = 0x320; // UWeaponUsageAnalyticsComponent*
		constexpr auto PerfStatsAnalyticsComponent = 0x328; // UPerfStatsAnalyticsComponent*
		constexpr auto FTUEAnalyticsComponent = 0x330; // UFTUEAnalyticsComponent*
		constexpr auto EconomyAnalyticsComponent = 0x338; // UEconomyAnalyticsComponent*
		constexpr auto AchievementAnalyticsComponent = 0x340; // UAchievementAnalyticsComponent*
		constexpr auto HealingAnalyticsComponent = 0x348; // UHealingAnalyticsComponent*
		constexpr auto CinematicAnalyticsComponent = 0x350; // UCinematicAnalyticsComponent*
		constexpr auto PVPHoldoutComponent = 0x358; // UPVPHoldoutAnalyticsComponent*
		constexpr auto RoundData = 0x360; // FGameplayAnalyticsRoundData
	}

	namespace n_UObserverComponent {
		constexpr auto OnObservationStart = 0xe8; // FMulticastInlineDelegate
		constexpr auto OnObservationEnd = 0xf8; // FMulticastInlineDelegate
		constexpr auto bEnabled = 0x108; // bool
		constexpr auto ViewComponent = 0x110; // USceneComponent*
		constexpr auto LOSIgnoredActors = 0x118; // TArray<AActor*>
	}

	namespace n_UGameplayContext_MeleeTarget {
		constexpr auto MeleeComponentGameplayTag = 0x78; // FGameplayTag
	}

	namespace n_UAbilityComponent {
		constexpr auto TriggerEffects = 0x130; // FTriggerEffectsDefinition
		constexpr auto AbilityType = 0x1c8; // EAbilityType
		constexpr auto DryFireAudio = 0x1d0; // UAkAudioEvent*
	}

	namespace n_UAnimEvalSet_Shared_HitReaction_Death_Prediction_C {
		constexpr auto HitReactionHealth = 0xc0; // FGameplayEval_HitReactionHealth
	}

	namespace n_UPoseWatch {
		constexpr auto Node = 0x30; // UEdGraphNode*
		constexpr auto PoseWatchColour = 0x38; // FColor
	}

	namespace n_UPawnSensingComponent {
		constexpr auto HearingThreshold = 0xe8; // float
		constexpr auto LOSHearingThreshold = 0xec; // float
		constexpr auto SightRadius = 0xf0; // float
		constexpr auto SensingInterval = 0xf4; // float
		constexpr auto HearingMaxSoundAge = 0xf8; // float
		constexpr auto bEnableSensingUpdates = 0xfc; // char : 1
		constexpr auto bOnlySensePlayers = 0xfc; // char : 1
		constexpr auto bSeePawns = 0xfc; // char : 1
		constexpr auto bHearNoises = 0xfc; // char : 1
		constexpr auto OnSeePawn = 0x108; // FMulticastInlineDelegate
		constexpr auto OnHearNoise = 0x118; // FMulticastInlineDelegate
		constexpr auto PeripheralVisionAngle = 0x128; // float
		constexpr auto PeripheralVisionCosine = 0x12c; // float
	}

	namespace n_UMeshSelectionSet {
		constexpr auto Vertices = 0x48; // TArray<int32_t>
		constexpr auto Edges = 0x58; // TArray<int32_t>
		constexpr auto Faces = 0x68; // TArray<int32_t>
		constexpr auto Groups = 0x78; // TArray<int32_t>
	}

	namespace n_UEnvQueryTest_Dot {
		constexpr auto LineA = 0x208; // FEnvDirection
		constexpr auto LineB = 0x228; // FEnvDirection
		constexpr auto TestMode = 0x248; // EEnvTestDot
		constexpr auto bAbsoluteValue = 0x249; // bool
	}

	namespace n_UParticleModuleTrailSource {
		constexpr auto SourceMethod = 0x38; // ETrail2SourceMethod
		constexpr auto SourceName = 0x3c; // FName
		constexpr auto SourceStrength = 0x48; // FRawDistributionFloat
		constexpr auto bLockSourceStength = 0x78; // char : 1
		constexpr auto SourceOffsetCount = 0x7c; // int32_t
		constexpr auto SourceOffsetDefaults = 0x80; // TArray<FVector>
		constexpr auto SelectionMethod = 0x90; // EParticleSourceSelectionMethod
		constexpr auto bInheritRotation = 0x94; // char : 1
	}

}