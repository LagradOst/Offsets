namespace off {
	constexpr auto GNames = 0x76598a8;
	constexpr auto GObjects = 0x765df50;
	constexpr auto GWorld = 0x771e470;
}
struct ALevelBounds {
	bool bAutoUpdateBounds; // 0x3d0
};

struct UShipCustomizationInfo {
	UShipCustomizationCategory* Category; // 0x28
	TArray<FShipSizePartCustomizationInfo> ShipSizeCustomizations; // 0x30
};

struct UAthenaAIAbilityComponent {
	TArray<UAthenaAIAbility*> AIAbilities; // 0xd0
	TArray<UAthenaAIAbility*> ActivatableAbilitiesInCurrentStage; // 0xe0
	UAthenaAIAbility* CurrentAIAbility; // 0xf0
	UAthenaAIAbilityType* QueuedAbilityType; // 0xf8
	UAthenaAIAbilityType* DebugAlwaysOnAbility; // 0x100
	TArray<FAthenaAIAbilityDamageStage> AbilityDamageStages; // 0x108
};

struct UMovieSceneByteSection {
	FIntegralCurve ByteCurve; // 0xa0
};

struct UMovieSceneLevelVisibilitySection {
	ELevelVisibility Visibility; // 0x98
	TArray<FName> LevelNames; // 0xa0
};

struct UKrakenServiceParamsDataAsset {
	FKrakenServiceParams Params; // 0x28
};

struct UHealthGemComponent {
	TArray<UMaterialInstanceDynamic*> OverridenMaterials; // 0x1e0
	FName EmissiveMaterialParameterName; // 0x1f0
	bool BuildMaterialMapOnBeginPlay; // 0x1f8
};

struct UBoobyTrapSpawnerDataAsset {
	TArray<FBoobyTrapSpawnerRankEntry> RankEntries; // 0x28
};

struct UNavRelevantComponent {
	char bNavigationRelevant : 1; // 0xec
	char bAttachToOwnersRoot : 1; // 0xec
	UObject* CachedNavParent; // 0xf0
};

struct UFragileComponentDataAsset {
	float DefaultDamageScalar; // 0x28
	UCurveFloat* DropDistanceToDamageCurve; // 0x30
	UCurveFloat* FallSpeedToDamageCurve; // 0x38
	UWwiseEvent* DamageSound; // 0x40
	FName ObjectDamageRTPCName; // 0x48
	UObject* DamageVfx; // 0x50
	FName DamageVfxSocketName; // 0x58
	float SignificantHealthChangeAbsolute; // 0x60
	TMap<UDamagerType*, float> ShipDamageTypeMappings; // 0x68
	TArray<FFragileComponentShipDamageTypeEntry> ShipDamageTypeValues; // 0x158
	TArray<FFragileComponentHealthScalarEntry> DamageTypeScalars; // 0x168
	TArray<EHealthChangedReason> BlockedHealthChangedReasons; // 0x178
};

struct UMovieSceneCameraCutTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
};

struct UQuestItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UBTTask_SpawnItemForCategory {
	bool EnableOverrideItemCategory; // 0x88
	UItemCategory* OverrideItemCategory; // 0x90
	FBlackboardKeySelector BlackboardKey; // 0x98
};

struct UPoseableMeshComponent {
	USkeletalMesh* SkeletalMesh; // 0x598
	TWeakObjectPtr<USkinnedMeshComponent> MasterPoseComponent; // 0x5a0
	UMaterialInterface* CustomDepthMaterial; // 0x5e8
	char bUseBoundsFromMasterPoseComponent : 1; // 0x600
	TArray<FActiveVertexAnim> ActiveVertexAnims; // 0x608
	UPhysicsAsset* PhysicsAssetOverride; // 0x618
	int32_t ForcedLodModel; // 0x620
	int32_t MinLodModel; // 0x624
	int32_t PredictedLODLevel; // 0x628
	int32_t OldPredictedLODLevel; // 0x62c
	float MaxDistanceFactor; // 0x630
	TArray<FSkelMeshComponentLODInfo> LODInfo; // 0x638
	float StreamingDistanceMultiplier; // 0x648
	FColor WireframeColor; // 0x64c
	char bForceWireframe : 1; // 0x650
	char bDisplayBones : 1; // 0x650
	char bDisplayBoneCollisions : 1; // 0x650
	char bDisableMorphTarget : 1; // 0x650
	char bHideSkin : 1; // 0x650
	char bPerBoneMotionBlur : 1; // 0x668
	char bComponentUseFixedSkelBounds : 1; // 0x668
	char bConsiderAllBodiesForBounds : 1; // 0x668
	EMeshComponentUpdateFlag MeshComponentUpdateFlag; // 0x66c
	char bForceMeshObjectUpdate : 1; // 0x670
	char bChartDistanceFactor : 1; // 0x670
	char bCanHighlightSelectedSections : 1; // 0x670
	char bRecentlyRendered : 1; // 0x670
	float ProgressiveDrawingFraction; // 0x674
	char CustomSortAlternateIndexMode; // 0x678
	FBoxSphereBounds CachedLocalBounds; // 0x68c
	bool bCachedLocalBoundsUpToDate; // 0x6a8
	bool bEnableUpdateRateOptimizations; // 0x6a9
	bool bDisplayDebugUpdateRateOptimizations; // 0x6aa
};

struct UDiggingEffectsDataAsset {
	TArray<FItemDiggingEffectsOverride> EffectsOverrides; // 0x28
	UItemDiggingEffectsConfig* Default; // 0x38
};

struct UMaterialExpressionVertexID {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct URowboatDescDataAsset {
	FPartDesc PartDesc; // 0x28
};

struct UResourceCache {
	TArray<FResourceCacheEntry> Cache; // 0x28
};

struct UAISpawner {
	bool HasSpawnerLevelEncounters; // 0x38
	FAISpawnTypeParamsCollection SpawnTypeParamsCollection; // 0x40
	UAIEncounterSettings* DefaultEncounterSettings; // 0x88
	UAISpawnWaveSequenceRankProgression* DefaultSpawnWaveProgression; // 0x90
	TArray<FAISpawnContextIdEncounterSettingsPair> SpawnContextSpecificEncounterSettings; // 0x98
	bool ShouldSpawnFacingRegionCentre; // 0xa8
	EAthenaAISpawnType DefaultSpawnType; // 0xa9
	UEnvQuery* FindSpawnPosQuery; // 0xb0
	EEnvQueryRunMode FindSpawnPosQueryRunMode; // 0xb8
	FName SpawnLocationType; // 0xbc
	int32_t MaxNumOfSpawnedPawns; // 0xc4
	int32_t PriorityForSpawnedPawns; // 0xc8
	TArray<FConditionalAISpawnOverride> SpawnOverrides; // 0xd0
	TArray<FAdditionalSpawnerBehaviour> AdditionalBehaviours; // 0xe0
	UAthenaAISettings* AthenaAISettings; // 0x360
};

struct UHitRegSnapshotComponent {
	FHitRegProjectileSnapshotData SnapshotData; // 0xd0
	FHitRegSnapshotDisplaySettings ServerDisplaySettings; // 0x1b0
	TMap<UObject*, FMeshVertexData> ExtractedMeshes; // 0x1b8
	float DistanceToDisplayMessages; // 0x208
};

struct ULightingControllerSettings {
	UCurveFloat* FogDensityCurve; // 0x28
	UCurveFloat* FogStartDistanceCurve; // 0x30
	UCurveFloat* LightIntensityCurve; // 0x38
	UCurveFloat* SkyDomeBrightnessCurve; // 0x40
	UCurveFloat* SkyDomeMoonVisibilityCurve; // 0x48
	UCurveFloat* SkyDomeStarBrightnessCurve; // 0x50
	UCurveFloat* SkyDomeSunBrightnessCurve; // 0x58
	UCurveFloat* PostLPVIntensityCurve; // 0x60
	UCurveFloat* PostExposureBiasCurve; // 0x68
	UCurveFloat* PostLPVOcclusionIntensityCurve; // 0x70
	UCurveFloat* SkyLightIntensityCurve; // 0x78
	UCurveFloat* FogBrightnessNearCurve; // 0x80
	UCurveFloat* FogBrightnessFarCurve; // 0x88
	UCurveFloat* PostBloomIntensityCurve; // 0x90
	UCurveFloat* PostBloomThresholdCurve; // 0x98
	UCurveFloat* SkyDomeAuraBrightnessCurve; // 0xa0
	UCurveFloat* PostReflectionProbeBrightnessCurve; // 0xa8
	UCurveFloat* PostReflectionProbeShadowBrightnessCurve; // 0xb0
	UCurveFloat* VfxControllerCurve; // 0xb8
	UCurveFloat* FogMaxOpacityCurve; // 0xc0
	UCurveFloat* FogScatterExpCurve; // 0xc8
	UCurveFloat* FogUnderwaterDensityCurve; // 0xd0
	UCurveFloat* PostLensFlareIntensityCurve; // 0xd8
	UCurveFloat* EmissiveFoliageCurve; // 0xe0
	UCurveFloat* EmissiveLightsCurve; // 0xe8
	UCurveFloat* PostExposureMinBrightnessCurve; // 0xf0
	UCurveFloat* PostExposureMaxBrightnessCurve; // 0xf8
	UCurveFloat* SkyDomeMoonBrightnessCurve; // 0x100
	UCurveFloat* SkyDomeHorizonCloudBrightnessCurve; // 0x108
	UCurveFloat* SkyDomeGreenFlashStrengthCurve; // 0x110
	UCurveFloat* PostSaturationCurve; // 0x118
	UCurveFloat* PostContrastCurve; // 0x120
	UCurveFloat* CloudRimlightScaleCurve; // 0x128
	UCurveFloat* CloudSkylightScaleCurve; // 0x130
	UCurveFloat* CloudSunlightScaleCurve; // 0x138
	UCurveFloat* CloudGlobalPressureCurve; // 0x140
	UCurveFloat* PostUnderWaterBrightnessCurve; // 0x148
	UCurveFloat* VfxCloudBrightnessCurve; // 0x150
	UCurveFloat* LightGodRayIntensityCurve; // 0x158
	UCurveFloat* CloudBottomBrightnessCurve; // 0x160
	UCurveFloat* CloudSunlightShadowingCurve; // 0x168
	UCurveFloat* SunDiscScaleCurve; // 0x170
	UCurveFloat* WaterSpecularBrightnessCurve; // 0x178
	UCurveFloat* VfxAmbientScaleCurve; // 0x180
	UCurveFloat* CloudShadowBrightnessCurve; // 0x188
	UCurveFloat* StormCloudShadowBrightnessCurve; // 0x190
	UCurveFloat* StormPostBloomIntensityCurve; // 0x198
	UCurveFloat* StormPostBloomThresholdCurve; // 0x1a0
	UCurveFloat* DirectionalLightShadowSteppingRateCurve; // 0x1a8
	UCurveFloat* SkullBrightnessCurve; // 0x1b0
	UCurveLinearColor* FogColourAwayCurve; // 0x1b8
	UCurveLinearColor* FogColourTowardsCurve; // 0x1c0
	UCurveLinearColor* LightSunColourCurve; // 0x1c8
	UCurveLinearColor* SkyDomeHorizonColourCurve; // 0x1d0
	UCurveLinearColor* SkyDomeZenithColourCurve; // 0x1d8
	UCurveLinearColor* SkyLightColourCurve; // 0x1e0
	UCurveLinearColor* PostAmbientShadowColourCurve; // 0x1e8
	UCurveLinearColor* FogColourAwayFarCurve; // 0x1f0
	UCurveLinearColor* FogColourUnderwaterCurve; // 0x1f8
	UCurveLinearColor* FogColourAwayUnderwaterCurve; // 0x200
	UCurveLinearColor* WaterColourCurve; // 0x208
	UCurveLinearColor* WaterColourShallowCurve; // 0x210
	UCurveLinearColor* WaterBackLitColourCurve; // 0x218
	UCurveLinearColor* WaterFoamColourCurve; // 0x220
	UCurveLinearColor* WaterFoamHighlightColourCurve; // 0x228
	UCurveLinearColor* WaterAmbientColourCurve; // 0x230
	UCurveLinearColor* PostReflectionProbeTintCurve; // 0x238
	UCurveLinearColor* CloudRimlightColourCurve; // 0x240
	UCurveLinearColor* CloudSkylightColourCurve; // 0x248
	UCurveLinearColor* CloudSunlightColourCurve; // 0x250
	UCurveLinearColor* PostUnderWaterTintCurve; // 0x258
	UCurveLinearColor* SkyDomeMoonColourCurve; // 0x260
	UCurveLinearColor* PostGammaCurve; // 0x268
	UCurveLinearColor* SkyDomeSunColourCurve; // 0x270
	UCurveLinearColor* VFXFoamColourCurve; // 0x278
	UCurveLinearColor* VFXWindColourCurve; // 0x280
	UCurveLinearColor* VFXUnderwaterTintCurve; // 0x288
	UCurveLinearColor* StormRainColourCurve; // 0x290
	UCurveLinearColor* StormSkyLightColourCurve; // 0x298
	UCurveLinearColor* StormPostGammaCurve; // 0x2a0
	UCurveLinearColor* StormFogColourUnderwaterCurve; // 0x2a8
	UCurveLinearColor* StormFogColourAwayUnderwaterCurve; // 0x2b0
	UCurveLinearColor* StormWaterColourCurve; // 0x2b8
	UCurveLinearColor* StormWaterColourShallowCurve; // 0x2c0
	UCurveLinearColor* StormWaterBackLitColourCurve; // 0x2c8
	UCurveLinearColor* StormWaterFoamColourCurve; // 0x2d0
	UCurveLinearColor* StormWaterFoamHighlightColourCurve; // 0x2d8
	UCurveLinearColor* StormWaterAmbientColourCurve; // 0x2e0
	UCurveLinearColor* StormPostReflectionProbeTintCurve; // 0x2e8
	UCurveLinearColor* SkullEyeColourCurve; // 0x2f0
	FLinearColor SandColourStatic; // 0x2f8
	float FogUnderwaterMaxOpacityStatic; // 0x308
	float FogUnderwaterScatterExpStatic; // 0x30c
	float FogUnderwaterStartDistanceStatic; // 0x310
	float FogUnderwaterBrightnessNearStatic; // 0x314
	float FogUnderwaterBrightnessFarStatic; // 0x318
	float FogDirectionalInscatteringStartStatic; // 0x31c
	float FogUnderwaterDirectionalInscatteringStartStatic; // 0x320
	float UnderwaterDirectionalLightMinBrightnessStatic; // 0x324
};

struct UParticleModuleSize {
	char bUseGroupAForAll : 1; // 0x50
	FRawDistributionVector StartSize; // 0x58
	FRawDistributionVector AdditionalStartSizes[0x5]; // 0x90
	char bKeepAspectRatio : 1; // 0x1a8
	char bIgnoreComponentScale : 1; // 0x1a8
};

struct UGameNarrationCoordinator {
	UWwiseEvent* NarrationSpeakEvent; // 0x28
	FWwiseEmitter Emitter; // 0x30
	FString CachedPreferredVoice; // 0x178
	FString CachedLanguage; // 0x188
	int32_t CachedGender; // 0x198
	bool IsNarrationSettingEnabled; // 0x19c
	int32_t NarrationOverride; // 0x1a0
};

struct ULightComponentBase {
	FGuid LightGuid; // 0x2b0
	float Brightness; // 0x2c0
	float Intensity; // 0x2c4
	FColor LightColor; // 0x2c8
	char bAffectsWorld : 1; // 0x2cc
	char CastShadows : 1; // 0x2cc
	char CastStaticShadows : 1; // 0x2cc
	char CastDynamicShadows : 1; // 0x2cc
	char bAffectTranslucentLighting : 1; // 0x2cc
	char bPrecomputedLightingIsValid : 1; // 0x2cc
	char RainOcclusion : 1; // 0x2cc
	float IndirectLightingIntensity; // 0x2d0
	float ScaleForTranslucency; // 0x2d4
	float CapForTranslucency; // 0x2d8
};

struct UMaterialExpressionDistanceFieldGradient {
	FExpressionInput Position; // 0x70
};

struct UNPCDialogConditionalText {
	FText Text; // 0x28
	UNPCDialogExpression* Expression; // 0x60
};

struct APocketWatch {
	UInventoryItemComponent* InventoryItem; // 0x798
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7a0
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7a8
	UWwiseEmitterComponent* AudioEmitter; // 0x7b0
	FPocketWatchHandParams MinuteHandParams; // 0x7b8
	FPocketWatchHandParams HourHandParams; // 0x820
	FPocketWatchDateDisplay DateDisplay; // 0x888
	UMaterialInstanceDynamic* FirstPersonMeshDynamicMaterialInstance; // 0x8c0
	UMaterialInstanceDynamic* ThirdPersonMeshDynamicMaterialInstance; // 0x8c8
	UWwiseEvent* DateSwitchSFX; // 0x8d0
	UWwiseEvent* MinuteHandTickSFX; // 0x8d8
	UPocketWatchAnimationInstance* FirstPersonMeshAnimator; // 0x8f0
	UPocketWatchAnimationInstance* ThirdPersonMeshAnimator; // 0x8f8
	UPocketWatchAnimationInstance* CurrentMeshAnimator; // 0x900
};

struct URainZoneService {
	TArray<TScriptInterface<Class>> RegisteredRainZones; // 0x30
};

struct UDevilsRoar_C {
	FName SeaName; // 0x28
};

struct UParticleModuleSubUV {
	FRawDistributionFloat SubImageIndex; // 0x50
	char bUseRealTime : 1; // 0x88
};

struct USirenEncounterSpawnBlockingBehaviourStrategy {
	float ChanceToSpawn; // 0x48
};

struct UInheritableComponentHandler {
	TArray<FComponentOverrideRecord> Records; // 0x28
};

struct AArenaVendorShip {
	USceneComponent* ArenaVendorShipRootComponent; // 0x3d0
	UContestMerchantSpawnerComponent* ContestMerchantSpawnerComponent; // 0x3d8
	UGenericWorldMapMarker* VendorShipWorldMarkerComponent; // 0x3e0
	USphereComponent* VendorDeadZoneComponent; // 0x3e8
	float VendorShipDeadZoneRadius; // 0x3f0
};

struct UItemDesc {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct UCloudStorageBase {
	TArray<FString> LocalCloudFiles; // 0x38
	char bSuppressDelegateCalls : 1; // 0x48
};

struct UGetVoyageDifficultyFromRankStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UBTDecorator_CurrentAIStrategy {
	TArray<UAIStrategyId*> Strategies; // 0x68
};

struct USailManipulatorAudioParams {
	UWwiseEvent* PlaySailManipulator; // 0x28
	UWwiseEvent* StopSailManipulator; // 0x30
	UWwiseEvent* PlaySailManipulatorEndExtremity; // 0x38
};

struct UItemDiggingBuryConfig {
	int32_t MaxSmallCrewSizeForNumDigsSelection; // 0x28
	FWeightedProbabilityRange NumDigsRequiredForSmallCrewSize; // 0x30
	FWeightedProbabilityRange NumDigsRequiredForBiggerCrewSize; // 0x50
	int32_t DefaultNumDigsIfNotInCrew; // 0x70
};

struct UUniformGridSlot {
	EHorizontalAlignment HorizontalAlignment; // 0x38
	EVerticalAlignment VerticalAlignment; // 0x39
	int32_t Row; // 0x3c
	int32_t Column; // 0x40
};

struct UMediaSoundWave {
	int32_t AudioTrackIndex; // 0x218
	UMediaPlayer* MediaPlayer; // 0x220
	TWeakObjectPtr<UMediaPlayer> CurrentMediaPlayer; // 0x258
};

struct UTaleQuestSetCompassTargetToActorStepDesc {
	FQuestVariableActor TargetActor; // 0x88
};

struct UPlantAIFormDataAsset {
	float WetCooldown; // 0x90
	float WetHealPerSecond; // 0x94
	float RelativeWaterLevelToGetWet; // 0x98
	float RainStrengthToGetWet; // 0x9c
	float WeakMovementSpeedMultiplier; // 0xa0
};

struct ABroadcasterPuzzleStatue {
	UStaticMeshComponent* ArmStaticMesh; // 0x458
	TArray<AActor*> ReceiverStatues; // 0x460
	TArray<FConfigurationComboAndTrigger> ValidConfigurationCombos; // 0x470
	FReactionSequenceStateInfo ReactionSequenceState; // 0x480
	UIslandVisitorCallbackComponent* IslandVisitorCallbackComponent; // 0x4d8
	float DelayBeforeReactionSequenceCheck; // 0x4e0
	float DelayPerStatueDuringReactionSequenceCheck; // 0x4e4
	float DelayAfterReactionSequenceCheck; // 0x4e8
	float DelayBeforeActivatingTriggerDuringReactionSequenceSuccess; // 0x4ec
	UParticleSystemComponent* ShockwaveParticleSystem; // 0x4f8
	UParticleSystemComponent* HornDustParticleSystem; // 0x500
	UBroadcasterPuzzleStatueAudioParamsDataAsset* BroadcasterAudioParams; // 0x508
	float ShockwaveEffectDelay; // 0x5b4
	bool ShouldResetWhenIslandIsEmpty; // 0x5b8
	float TimeBeforeIslandResetWhenEmpty; // 0x5bc
	float StatueResetCooldownInSeconds; // 0x5c0
};

struct UIsWieldingItemOfTypeStatCondition {
	TArray<UItemCategory*> TargetItemCategories; // 0x30
};

struct UFaceTargetComponent {
	float BlendRotationInterpSpeed; // 0xc8
	bool BlendRotationUseConstantInterp; // 0xcc
	AActor* TargetActorToFace; // 0xe8
	float ClampYawRange; // 0x138
	float ClampYawCentre; // 0x13c
	float ClampYawRate; // 0x140
};

struct UTaleQuestBreakStructStepDesc {
	UScriptStruct* Struct; // 0x80
	TMap<FName, FName> PropertyMappings; // 0x88
};

struct UMaterialExpressionSpeedTree {
	ESpeedTreeGeometryType GeometryType; // 0x70
	ESpeedTreeWindType WindType; // 0x71
	ESpeedTreeLODType LODType; // 0x72
	float BillboardThreshold; // 0x74
	bool bAccurateWindVelocities; // 0x78
};

struct UMovieSceneColorSection {
	FRichCurve RedCurve; // 0xa0
	FRichCurve GreenCurve; // 0x118
	FRichCurve BlueCurve; // 0x190
	FRichCurve AlphaCurve; // 0x208
};

struct UTestPlayerTelemetryComponentNoEvents {
	float HeartbeatInterval; // 0x128
	FDateTime SpawnTimestamp; // 0x270
};

struct UPlayerBuriedItemServiceMapStorePopulatorDataAsset {
	int32_t MinNumberMapsPerSeaRegion; // 0x28
	float MinSeparationBetweenXs; // 0x2c
	TArray<FPlayerBuriedItemServiceDataAssetMapStorePopulationSeaRegion> SeaRegions; // 0x30
};

struct UDestroySpawnedActorStepDesc {
	FQuestVariableActor ActorVar; // 0x80
};

struct UTaleQuestCompassService {
	FEnchantedCompassTarget CurrentTarget; // 0x120
};

struct UChainLightningReceiverComponent {
	float ShockDuration; // 0xd0
};

struct UAnimationDataStoreWeakReferenceAsset {
	TArray<FAnimationDataStoreAssetWeakReferenceEntry> AssetWeakRefs; // 0x28
};

struct UOverlaySlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UConsumableItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UInteractableService {
	TArray<UInteractableArea*> InteractableAreas; // 0x38
};

struct ASail {
	USkeletalMeshComponent* Mesh; // 0x3d8
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x3e0
	FVector PositionForSailDynamicsRelativeToSailActor; // 0x3f0
	UBaseSailDynamicsDesc* SailDynamicsDesc; // 0x400
	float MinRelativeWindSpdForFullVisibleInflation; // 0x408
	float BaseWindStrength; // 0x40c
	UCurveFloat* WindToSailAngleEfficiencyCurve; // 0x410
	float NormalBillowLimit; // 0x418
	float PerfectBillowValue; // 0x41c
	float PerfectBillowThreshold; // 0x420
	float SailLoweredPerfectWindThreshold; // 0x424
	float BlendSpeed; // 0x428
	FName FurlMaterialParameterName; // 0x42c
	float AnimationSailHeightScalar; // 0x434
	float DamageScalar; // 0x53c
};

struct UItemSnapshotSettings {
	TArray<UItemSnapshotMetaGenerator*> Generators; // 0x38
};

struct UMechanismMaterialMap {
	TArray<FMechanismMaterialMapEntry> MaterialClusters; // 0x28
};

struct UTaleQuestEmissaryCompanyActionRewardBoostStepDesc {
	EEmisaryCompanyActionType CompanyActionType; // 0x80
};

struct AGenericMarkerService {
	TArray<FCanvasWorldMapGeneric> GenericMarkers; // 0x3f8
};

struct UBTTask_SetVelocity {
	bool UseBlackboardKey; // 0x88
	FVector NewVelocity; // 0x8c
};

struct ATestDockableObject {
	USceneComponent* SceneComponent; // 0x3f8
	EInteractableState CurrentInteractionState; // 0x4b9
	bool CanSetInteractionState; // 0x4ba
};

struct UBootyCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct AOneShotToggleCollisionAction {
	USceneComponent* CollisionActionRoot; // 0x3d0
	UPrimitiveComponent* BlockingPrimitive; // 0x3d8
	UMechanismActionComponent* MechanismActionComponent; // 0x3e0
	UArrowComponent* KnockbackArrowComponent; // 0x3e8
	bool UseInactiveCollisionProfileByDefault; // 0x3f0
	FKnockBackInfo KnockBackInfo; // 0x3f4
	float KnockbackGracePeriod; // 0x444
	FCollisionProfileName InactiveCollisionProfileName; // 0x448
	FCollisionProfileName ActiveCollisionProfileName; // 0x450
	FOneShotToggleCollisionAudioParams AudioParams; // 0x458
};

struct AEmitter {
	UParticleSystemComponent* ParticleSystemComponent; // 0x3d0
	char bDestroyOnSystemFinish : 1; // 0x3d8
	char bPostUpdateTickGroup : 1; // 0x3d8
	char bCurrentlyActive : 1; // 0x3d8
	FScriptMulticastDelegate OnParticleSpawn; // 0x3e0
	FScriptMulticastDelegate OnParticleBurst; // 0x3f0
	FScriptMulticastDelegate OnParticleDeath; // 0x400
	FScriptMulticastDelegate OnParticleCollide; // 0x410
};

struct USummonAbilityStageParams {
	float NumToSpawnMultiplier; // 0x40
};

struct UNavModifierComponent {
	UNavArea* AreaClass; // 0xf8
	FVector FailsafeExtent; // 0x100
};

struct UCatchFaunaConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UNPCDialogFormattedHeaderByCondition {
	TArray<FNPCDialogFormattedHeaderByConditionText> Substitutes; // 0x28
	TArray<FString> ExpectedParameters; // 0x38
	FText FormattedText; // 0x48
	FText DefaultText; // 0x80
};

struct UShipTelemetrySubjectComponent {
	FString SubjectName; // 0xd0
	FString SubjectID; // 0xe0
};

struct UStatusResponseActivateElectricShield {
	float Duration; // 0x30
};

struct AChainLightningVisualActor {
	FWwiseEmitter Emitter; // 0x3d0
	FChainData Data; // 0x3f8
	TArray<UMaterialInstanceDynamic*> CachedChainMaterials; // 0x410
	TArray<UStaticMeshComponent*> CachedChainComponents; // 0x420
	UChainLightningVisualActorSettingsAsset* SettingsAsset; // 0x470
	USceneComponent* RootSceneComponent; // 0x478
	TArray<TWeakObjectPtr<UParticleSystemComponent>> LightningVFXComponents; // 0x498
};

struct UParticleModuleSpawnRepeatPerPoint {
	char bProcessSpawnRate : 1; // 0x50
	char bProcessBurstList : 1; // 0x50
};

struct UAIFormItemSpawnRequirement {
	TArray<UAthenaAIFormDataAsset*> AllowedForms; // 0x50
};

struct ACompassWieldableReplica {
	UCompassSpinComponent* SpinComponent; // 0x518
};

struct AToggleAnimatedMechanismAction {
	FMechanismTransformAnimationCurve InactiveToActiveAnimation; // 0x560
	FMechanismTransformAnimationCurve ActiveToInactiveAnimation; // 0x568
};

struct UIslandDataDefaultAssetEntry {
	EIslandType IslandType; // 0x28
	UAISpawner* AISpawner; // 0x30
	TArray<FToggledSpawnerOverride> AISpawnerOverrides; // 0x38
	UAISpawner* CannonsAISpawner; // 0x48
	TArray<FToggledSpawnerOverride> CannonsAISpawnerOverrides; // 0x50
	UAISpawner* EmergentCaptainSpawner; // 0x60
	TArray<FToggledSpawnerOverride> EmergentCaptainSpawnerOverrides; // 0x68
};

struct UTextBlock {
	USlateWidgetStyleAsset* Style; // 0x138
	FText Text; // 0x140
	DelegateProperty TextDelegate; // 0x178
	FSlateColor ColorAndOpacity; // 0x188
	DelegateProperty ColorAndOpacityDelegate; // 0x1b8
	FSlateFontInfo Font; // 0x1c8
	FVector2D ShadowOffset; // 0x208
	FLinearColor ShadowColorAndOpacity; // 0x210
	DelegateProperty ShadowColorAndOpacityDelegate; // 0x220
	ETextJustify Justification; // 0x230
	bool AutoWrapText; // 0x231
	float WrapTextAt; // 0x234
	float MinDesiredWidth; // 0x238
	FMargin Margin; // 0x23c
	float LineHeightPercentage; // 0x24c
};

struct UGameplayTaskResource {
	int32_t ManualResourceID; // 0x28
	char bManuallySetID : 1; // 0x30
};

struct UAISenseConfig_Team {
	float MaxAge; // 0x28
	char bStartsEnabled : 1; // 0x2c
};

struct ALevelScriptActor {
	char bInputEnabled : 1; // 0x3d0
};

struct UGiveItemUponConsumptionComponent {
	UItemDesc* ItemToGive; // 0xd0
};

struct UAutomatedLevelSequenceCapture {
	FCaptureProtocolID CaptureType; // 0x38
	UMovieSceneCaptureProtocolSettings* ProtocolSettings; // 0x40
	FMovieSceneCaptureSettings Settings; // 0x48
	bool bUseSeparateProcess; // 0x98
	bool bCloseEditorWhenCaptureStarts; // 0x99
	FString AdditionalCommandLineArguments; // 0xa0
	FString InheritedCommandLineArguments; // 0xb0
};

struct UBTDecorator_IsOccupiedHangoutSpotStillAvailable {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UParticleModuleRotationRate {
	char bUseGroupARotationRateForAllGroups : 1; // 0x50
	FRawDistributionFloat StartRotationRate; // 0x58
	FRawDistributionFloat AdditionalStartRotationRate[0x5]; // 0x90
};

struct UDiggingBaseParamsDataAsset {
	TArray<FItemDiggingBaseOverride> BaseOverrides; // 0x28
	UItemDiggingBaseConfig* Default; // 0x38
};

struct UBlueprint {
	char bRecompileOnLoad : 1; // 0x50
	UObject* ParentClass; // 0x58
	UObject* PRIVATE_InnermostPreviousCDO; // 0x60
	char bHasBeenRegenerated : 1; // 0x68
	char bIsRegeneratingOnLoad : 1; // 0x68
	USimpleConstructionScript* SimpleConstructionScript; // 0x70
	TArray<UActorComponent*> ComponentTemplates; // 0x78
	TArray<UTimelineTemplate*> Timelines; // 0x88
	UInheritableComponentHandler* InheritableComponentHandler; // 0x98
	EBlueprintType BlueprintType; // 0xa0
	int32_t BlueprintSystemVersion; // 0xa4
};

struct UTaleQuestToolServiceDesc {
	bool GiveToolsOnStart; // 0x28
};

struct UFireBreathAIAbilityParams {
	FAthenaAIAbilityPlayerBasedRanges FireBreathDuration; // 0xc8
	AStatusEffectOverlapZone* FireBreathObject; // 0xd8
	FVFXHandlerComponentParams FireBreathVFXParams; // 0xe0
	FVector FireCollisionVolumeSize; // 0x120
	float FireBreathZoneStartOffset; // 0x12c
	float FireStartDelay; // 0x130
	float FireEndPreWarn; // 0x134
	UVFXSpawnerComponent* VfxSpawner; // 0x138
};

struct USeaRegionComponent {
	USeaId* SeaId; // 0x2f0
};

struct UBTTaskNode {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UGetNumberOfCollectedTornMapPiecesStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleLoadSpireStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UInvalidPetEntitlementCategory {
	FName PetPreviewCamera; // 0x80
};

struct UInterpTrackVectorMaterialParam {
	TArray<UMaterialInterface*> TargetMaterials; // 0x90
	FName ParamName; // 0xa0
};

struct UBlueprintCore {
	UObject* SkeletonGeneratedClass; // 0x28
	UObject* GeneratedClass; // 0x30
	bool bLegacyNeedToPurgeSkelRefs; // 0x38
	bool bLegacyGeneratedClassIsAuthoritative; // 0x39
	FGuid BlueprintGuid; // 0x3c
};

struct UMaterialExpressionViewProperty {
	EMaterialExposedViewProperty Property; // 0x70
};

struct UBTTask_IncrementBlackboardIntValue {
	FAIDataProviderIntValue IntegerValueDelta; // 0x88
};

struct UAbilityTask_WaitAbilityCommit {
	FScriptMulticastDelegate OnCommit; // 0x68
};

struct UIsWieldedCommodityItemInDemandStatCondition {
	ECommodityDemand CommodityDemand; // 0x30
};

struct AAggressiveGhostShipAnchorDrop {
	FScriptMulticastDelegate StartShockwaveEvent; // 0x3d8
};

struct UDefaultOnlineEnvironmentSettings {
	FString EnvironmentId; // 0x28
	uint32_t TitleId; // 0x38
	FString ServiceConfigId; // 0x40
	FString ClientCertificateThumbprint; // 0x50
};

struct USwordItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UWidgetReflectorNodeBase {
	FGeometry Geometry; // 0x28
	TArray<UWidgetReflectorNodeBase*> ChildNodes; // 0x60
	FLinearColor Tint; // 0x70
};

struct UFishingLineRenderComponent {
	FLinearColor LineColour; // 0x630
};

struct UAthenaDebugSettings {
	FStringAssetReference Dioramas; // 0x28
};

struct UMovieSceneFadeTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct UStartEmissaryVoyageInlineVoteConsumer {
	FText EmissaryVotingCastVote; // 0x128
	FText EmissaryVotingCantVote; // 0x160
	FText EmissaryVotingCantVoteReasonCrewShipOutsideRange; // 0x198
	FText EmissaryVotingCantVoteReasonNoEmissaryEntitlement; // 0x1d0
	FText EmissaryVotingCantVoteReasonHasActiveVoteForDifferentCompany; // 0x208
	FText EmissaryVotingRemoveVote; // 0x240
	FText EmissaryVotingCantRemoveVote; // 0x278
};

struct UCatalogDiscountDataAsset {
	FGuid DiscountId; // 0x28
	FText DisplayName; // 0x38
	EWalletCurrencyId CurrencyType; // 0x70
	uint32_t PercentOff; // 0x74
};

struct UEllipsoidComponent {
	float SphereRadius; // 0x5a8
};

struct UNPCDialogOptionGiveReward {
	FText Text; // 0x80
	FRewardId RewardId; // 0xb8
	UCompany* Company; // 0xc0
	int32_t LinkedDialog; // 0xc8
};

struct UBurpComponent {
	float MinGasToTriggerBurp; // 0xc8
	float MinRandomBurpDelay; // 0xcc
	float MaxRandomBurpDelay; // 0xd0
	float GasDecayPerSecond; // 0xd4
	UWwiseObjectPoolWrapper* BurpComponentPool; // 0xd8
	UWwiseEvent* BurpSfx; // 0xe0
	FName PlayerSizeRTPCName; // 0xe8
	FName BurpLengthRTPCName; // 0xf0
};

struct UInterpTrackInstLinearColorProp {
	FLinearColor ResetColor; // 0x40
};

struct UInterpTrackInstFloatProp {
	float ResetFloat; // 0x40
};

struct UFireGridVFXParamsDataAsset {
	FFireGridVFXParams Params; // 0x28
};

struct UDebugMenuDataAsset {
	TArray<UDebugMenuDataAsset*> DataAssets; // 0x28
	TArray<FDebugMenuDataAssetEntry> MenuEntires; // 0x38
	TArray<FDebugMenuButtonShortcut> ButtonShortcuts; // 0x48
	TArray<UDebugMenuEntryGenerator*> MenuEntryGenerators; // 0x58
};

struct UKrakenTelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UAIShipEncounterParamsDataAsset {
	UAIShipEncounterSpawnParamsDataAsset* SpawnParams; // 0x28
	UAIShipContextParamsDataAsset* ContextParams; // 0x30
	UAIShipContextDescDataAsset* DefaultContextDesc; // 0x38
	AShipProxyPawn* ShipPawnClass; // 0x40
	UBuoyantObjectSpawnProfileDataAsset* BuoyantObjectSpawnProfileAsset; // 0x48
	AGameplayEventSignal* EventSignalAssetClass; // 0x50
	float EventSignalHeight; // 0x58
	FText EncounterCompleteText; // 0x60
	float OuterRadiusMultiplier; // 0x98
	float MigrationRadiusMultiplier; // 0x9c
	float InitialEncounterEntryDelay; // 0xa0
	float MinEngagedDistanceFromPlayers; // 0xa4
	bool EnableMusicWhenShipsHaveNoTarget; // 0xa8
	int32_t SecondsUntilEncounterEndsAfterLastCrewLeft; // 0xac
	int32_t MaximumEncounterDuration; // 0xb0
};

struct UEnvQueryTest_Random {
	int32_t TestOrder; // 0x30
	EEnvTestPurpose TestPurpose; // 0x34
	EEnvTestFilterOperator MultipleContextFilterOp; // 0x35
	EEnvTestScoreOperator MultipleContextScoreOp; // 0x36
	EEnvTestFilterType FilterType; // 0x37
	FAIDataProviderBoolValue BoolValue; // 0x38
	FAIDataProviderFloatValue FloatValueMin; // 0x68
	FAIDataProviderFloatValue FloatValueMax; // 0x98
	EEnvTestScoreEquation ScoringEquation; // 0xc9
	EEnvQueryTestClamping ClampMinType; // 0xca
	EEnvQueryTestClamping ClampMaxType; // 0xcb
	FAIDataProviderFloatValue ScoreClampMin; // 0xd0
	FAIDataProviderFloatValue ScoreClampMax; // 0x100
	FAIDataProviderFloatValue ScoringFactor; // 0x130
	char bWorkOnFloatValues : 1; // 0x168
};

struct UParticleModuleLocationSkelVertSurface {
	ELocationSkelVertSurfaceSource SourceType; // 0x50
	FVector UniversalOffset; // 0x54
	char bUpdatePositionEachFrame : 1; // 0x60
	char bOrientMeshEmitters : 1; // 0x60
	char bInheritBoneVelocity : 1; // 0x60
	FName SkelMeshActorParamName; // 0x64
	TArray<FName> ValidAssociatedBones; // 0x70
	char bEnforceNormalCheck : 1; // 0x80
	FVector NormalToCompare; // 0x84
	float NormalCheckToleranceDegrees; // 0x90
	float NormalCheckTolerance; // 0x94
	TArray<int32_t> ValidMaterialIndices; // 0x98
	char bInheritVertexColor : 1; // 0xa8
};

struct UEnvQueryGenerator_Composite {
	TArray<UEnvQueryGenerator*> Generators; // 0x50
	bool bHasMatchingItemType; // 0x60
};

struct UInGameAdManager {
	char bShouldPauseWhileAdOpen : 1; // 0x38
	TArray<DelegateProperty> ClickedBannerDelegates; // 0x40
	TArray<DelegateProperty> ClosedAdDelegates; // 0x50
};

struct UTaleQuestAwaitEventStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UPhysicsSpringComponent {
	float SpringStiffness; // 0x2b0
	float SpringDamping; // 0x2b4
	float SpringLengthAtRest; // 0x2b8
	float SpringRadius; // 0x2bc
	ECollisionChannel SpringChannel; // 0x2c0
	bool bIgnoreSelf; // 0x2c1
	float SpringCompression; // 0x2c4
};

struct AMemoryTestPawn {
	float Speed; // 0x448
	FScriptMulticastDelegate OnIslandVisited; // 0x450
};

struct AGameNetworkManager {
	int32_t AdjustedNetSpeed; // 0x3d0
	float LastNetSpeedUpdateTime; // 0x3d4
	int32_t TotalNetBandwidth; // 0x3d8
	int32_t MinDynamicBandwidth; // 0x3dc
	int32_t MaxDynamicBandwidth; // 0x3e0
	char bIsStandbyCheckingEnabled : 1; // 0x3e4
	char bHasStandbyCheatTriggered : 1; // 0x3e4
	float StandbyRxCheatTime; // 0x3e8
	float StandbyTxCheatTime; // 0x3ec
	int32_t BadPingThreshold; // 0x3f0
	float PercentMissingForRxStandby; // 0x3f4
	float PercentMissingForTxStandby; // 0x3f8
	float PercentForBadPing; // 0x3fc
	float JoinInProgressStandbyWaitTime; // 0x400
	float MoveRepSize; // 0x404
	float MAXPOSITIONERRORSQUARED; // 0x408
	float MAXNEARZEROVELOCITYSQUARED; // 0x40c
	float CLIENTADJUSTUPDATECOST; // 0x410
	float MAXCLIENTUPDATEINTERVAL; // 0x414
	float MaxMoveDeltaTime; // 0x418
	bool ClientAuthorativePosition; // 0x41c
	float ClientErrorUpdateRateLimit; // 0x420
	bool bMovementTimeDiscrepancyDetection; // 0x424
	bool bMovementTimeDiscrepancyResolution; // 0x425
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x428
	float MovementTimeDiscrepancyMinTimeMargin; // 0x42c
	float MovementTimeDiscrepancyResolutionRate; // 0x430
	float MovementTimeDiscrepancyDriftAllowance; // 0x434
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x438
	bool bUseDistanceBasedRelevancy; // 0x439
};

struct UGameplayAbilityBlueprintGeneratedClass {
	int32_t NumReplicatedProperties; // 0x1c0
	TArray<UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x1c8
	TArray<UActorComponent*> ComponentTemplates; // 0x1d8
	TArray<UTimelineTemplate*> Timelines; // 0x1e8
	USimpleConstructionScript* SimpleConstructionScript; // 0x1f8
	UInheritableComponentHandler* InheritableComponentHandler; // 0x200
	UStructProperty* UberGraphFramePointerProperty; // 0x208
	UFunction* UberGraphFunction; // 0x210
	TArray<FEventGraphFastCallPair> FastCallPairs; // 0x218
};

struct ASpawnLocation {
	FString Description; // 0x400
};

struct UWaitForCrewToCollectCollectorsChestPagesStep {
	UWaitForCrewToCollectCollectorsChestPagesStepDesc* StepDesc; // 0x90
};

struct UBTTask_SpawnAndWieldItem {
	UItemDesc* ItemDesc; // 0x68
};

struct UPiratePreviewComponentPirateProfileRTT {
	AController* OwningPlayerController; // 0x2b8
};

struct UActorFlammableComponent {
	UParticleSystem* FireVFX; // 0xf8
	UParticleSystem* SteamVFX; // 0x100
	float FireVFXIntensity; // 0x108
};

struct UEelThrowAIAbilityParams {
	FWeightedProbabilityRange MinMaxNumberOfAttacksBeforeEnd; // 0xc8
};

struct UClueFactoryConfig {
	TArray<ULandClueCreator*> LandClueCreators; // 0x28
	TArray<USeaClueCreator*> SeaClueCreators; // 0x38
	UClueChoiceSelectionStrategy* ChoiceStrategy; // 0x48
	TArray<FRestrictedClueType> RestrictedClueTypes; // 0x50
};

struct UMaterialExpressionLightmassReplace {
	FExpressionInput Realtime; // 0x70
	FExpressionInput Lightmass; // 0xa8
};

struct USetSpawnProgressStep {
	USetSpawnProgressStepDesc* StepDesc; // 0x90
};

struct UTaleQuestParallelForeachStepDesc {
	uint32_t Count; // 0x80
	bool CanEditCount; // 0x84
	TMap<FName, FName> InputMappings; // 0x88
	UTaleQuestStepDesc* BodyDesc; // 0xd8
	UTaleQuestParallelForeachStep* Generator; // 0xe0
	UScriptStruct* Variables; // 0xe8
};

struct UVomitComponent {
	float VomitFxDurationWhenSpewingIntoBucket; // 0x5b0
	FVomitVFX VomitVFX; // 0x5b8
	FVomitSFX VomitSFX; // 0x7b8
	FVomitScreenFX VomitScreenFX; // 0x7f0
	FVomitProjectiles VomitProjectiles; // 0x820
	float ImmunityAgainstContractingAfterVomiting; // 0x870
	float ChanceForContractingVomitingIfBeingVomitedOn; // 0x874
	FFloatRange ContractedVomitingSpewDuration; // 0x878
	FFloatRange ContractedVomitingSpewDelay; // 0x888
	FName ContractedVomitVFXType; // 0x898
	float DebugInterval; // 0x8a0
	UVomitBoutData* BoutData; // 0x8a8
};

struct ALogVisualizerCameraController {
	AActor* PickedActor; // 0x778
};

struct UDeliverableCompanyRequirement {
	TArray<UCompany*> AcceptedCompanies; // 0x30
};

struct AProjectileService {
	TArray<FWeaponProjectile> DeadProjectiles; // 0x3f0
	TArray<FProjectileAttackGroup> ProjectileAttackGroups; // 0x448
	UAthenaProjectilesThrottledTickCollectionAsset* ProjectileThrottledTickData; // 0x4d8
};

struct USkyLightComponent {
	ESkyLightSourceType SourceType; // 0x2e0
	UTextureCube* Cubemap; // 0x2e8
	float SkyDistanceThreshold; // 0x2f0
	bool bLowerHemisphereIsBlack; // 0x2f4
	float OcclusionMaxDistance; // 0x2f8
	float Contrast; // 0x2fc
	float MinOcclusion; // 0x300
	FColor OcclusionTint; // 0x304
	float ScaleForInteriors; // 0x308
	UTextureCube* BlendDestinationCubemap; // 0x3b8
};

struct UAthenaGameSettings {
	int32_t NumberOfDaysInEachMonth; // 0x28
	FString EntryMap; // 0x30
	FString FrontendMap; // 0x40
	FString InGameMap; // 0x50
	FString TutorialMap; // 0x60
	FStringAssetReference PlayModeLevels; // 0x70
	FStringAssetReference FeatureToggledLevels; // 0x80
	FString OverrideServerURL; // 0x90
	float LoadLevelTimeoutTime; // 0xa0
	float ServiceBridgeConnectTimeout; // 0xa4
	UClass* VoiceChatRendererClass; // 0xa8
	UClass* GameNarrationCoordinatorClass; // 0xc8
	UClass* ApplicationSettingsClass; // 0xe8
	FStringAssetReference CinematicCameraControllerClass; // 0x108
	FStringAssetReference CinematicCameraSpectatorPawnClass; // 0x118
	FStringAssetReference MaterialTranslationTableFileLocation; // 0x128
	FStringAssetReference MaterialAudioTableFileLocation; // 0x138
	FStringAssetReference MaterialVFXTableFileLocation; // 0x148
	FStringAssetReference ShipAssetClassDatabaseFileLocation; // 0x158
	FStringAssetReference AIPersistentPartsServiceAssetClassFileLocation; // 0x168
	FStringAssetReference AIPartsServiceAssetClassFileLocation; // 0x178
	FStringAssetReference DebugMenuFileLocation; // 0x188
	FStringAssetReference SpawnLocationKeywordPriorityListLocation; // 0x198
	FStringAssetReference CrewSpawnLocationVariablesListAsset; // 0x1a8
	FStringAssetReference SkellyFortDataFileLocation; // 0x1b8
	FStringAssetReference SkellyFortListDataFileLocation; // 0x1c8
	FStringAssetReference AIShipServiceDataAssetFileLocation; // 0x1d8
	FToggleableAIShipServiceDataAssetFileLocation AIShipServiceDataAssetFileLocationOverride; // 0x1e8
	FStringAssetReference ProjectileServiceDataFileLocation; // 0x200
	FStringAssetReference ThrottledProjectileTickDataAssetLocation; // 0x210
	FStringAssetReference HoleDataFileLocation; // 0x220
	FStringAssetReference PlayerBuriedItemServiceDataFileLocation; // 0x230
	FStringAssetReference ItemLifetimeIslandCapsDataFileLocation; // 0x240
	FStringAssetReference CursedCannonballDataAsset; // 0x250
	FStringAssetReference Throwables; // 0x260
	UItemCategory* ThrowablesItemCategory; // 0x270
	FStringAssetReference SpawnableItemsDataAssetLocation; // 0x278
	FStringAssetReference FireworksDebugSpawnItemsDataAsset; // 0x288
	FStringAssetReference UnlockableEntitlementsDataAssetLocation; // 0x298
	FStringAssetReference DebugWieldablesDataAsset; // 0x2a8
	FStringAssetReference StrongholdKeyDataAsset; // 0x2b8
	FStringAssetReference MigrationUIContentsFileLocation; // 0x2c8
	FStringAssetReference ArenaMigrationUIContentsFileLocation; // 0x2d8
	FStringAssetReference InventoryRemappingAssetLocation; // 0x2e8
	FStringAssetReference AllianceSettingsAssetLocation; // 0x2f8
	FStringAssetReference ReapersMarkSettingsAssetLocation; // 0x308
	FStringAssetReference EmissaryLevelSettingsAssetLocation; // 0x318
	FStringAssetReference EmissaryRewardSettingsAssetLocation; // 0x328
	FStringAssetReference FlamesOfFateSettingsAssetLocation; // 0x338
	FStringAssetReference DiggingConfigResolverAssetLocation; // 0x348
	FStringAssetReference ContestSettingsDataAsset; // 0x358
	FStringAssetReference ContestEventsDataAsset; // 0x368
	FStringAssetReference CrewNotificationToastSettings; // 0x378
	FStringAssetReference FireSettingsDataAsset; // 0x388
	FString InventoryDefaultItemURL; // 0x398
	float CheatFlyingSpeedSlow; // 0x3a8
	float CheatFlyingSpeedDefault; // 0x3ac
	float CheatFlyingSpeedFast; // 0x3b0
	float CheatFlyingAcceleration; // 0x3b4
	FEncounterServiceParams EncounterServiceParams; // 0x3b8
	FWindServiceParams WindParams; // 0x3d8
	FCrewServiceParams CrewServiceParams; // 0x400
	FSharedShovelParams SharedShovelParams; // 0x460
	FMermaidServiceParams MermaidServiceParams; // 0x4c0
	FMermaidServiceParams ContestSpecificMermaidServiceParamsToggleLocked; // 0x548
	FMakeFriendsEmoteParams MakeFriendsEmoteParams; // 0x5d0
	FMermaidRespawnConfig MermaidRespawnConfiguration; // 0x5e8
	FCharacterSocketCollisionServiceParams CharacterSocketCollisionServiceParams; // 0x610
	FAthenaAICharacterParams AAthenaAICharacterParams; // 0x618
	int32_t AssumedMaxFPSOnServer; // 0x62c
	FName WwiseObjectUnderwaterStateSwitchGroup; // 0x630
	FName WwiseObjectUnderwaterSwitchDefaultState; // 0x638
	FName WwiseObjectUnderwaterSwitchUnderwaterState; // 0x640
	float StormQuantisePrecision; // 0x648
	FStringAssetReference ShipLiveryCatalogueDataAssetLocation; // 0x650
	FStringAssetReference ShipPartsCatalogueDataAssetLocation; // 0x660
	FStringAssetReference RowboatSpawnParamsDataAssetLocation; // 0x670
	FStringAssetReference KrakenTentacleClassLocation; // 0x680
	FStringAssetReference KrakenShipTentacleClassLocation; // 0x690
	FStringAssetReference KrakenServiceParamsDataAssetLocation; // 0x6a0
	FStringAssetReference AmbientTinySharkServiceParamsDataAssetLocation; // 0x6b0
	FStringAssetReference SunkenIslandSettings; // 0x6c0
	FStringAssetReference CompanyDataListAssetLocation; // 0x6d0
	FStringAssetReference CoherentUIGTAssetRootLocation; // 0x6e0
	FStringAssetReference CoherentUIGTPersistentDataAssetLocation; // 0x6f0
	FStringAssetReference CoherentContentEngagementMessageLocation; // 0x700
	FStringAssetReference NestedWorldRootDataAssetLocation; // 0x710
	FStringAssetReference AshenLordEncounterServiceParams; // 0x720
	FStringAssetReference PortalServiceParams; // 0x730
	FStringAssetReference AggressiveGhostShipsEncounterServiceParams; // 0x740
	TArray<UClass*> RequiredLoadoutCategories; // 0x750
	FStringAssetReference CarouselGenerationParams; // 0x760
	float SinkingShipDestructionDistanceThreshold; // 0x770
	FStringAssetReference DefaultItemsToBeDisplayedOnInventoryPanel; // 0x778
	AFogBank* DefaultFogBank; // 0x788
	AFogBankManager* DefaultFogBankManager; // 0x790
	FStringAssetReference TunnelsOfTheDamnedServiceParamsDataAssetLocation; // 0x798
	FPlayerModerationParams PlayerModerationParams; // 0x7a8
	FStringAssetReference SpireServiceParamsDataAssetLocation; // 0x7b8
};

struct ATestShipActorPhysicsErrorCorrection {
	FScriptMulticastDelegate OnGetPhysicsErrorCorrection; // 0x14d0
};

struct UAnimCompress_LeastDestructive {
	FString Description; // 0x28
	char bNeedsSkeleton : 1; // 0x38
	AnimationCompressionFormat TranslationCompressionFormat; // 0x3c
	AnimationCompressionFormat RotationCompressionFormat; // 0x3d
	AnimationCompressionFormat ScaleCompressionFormat; // 0x3e
};

struct URadialContentRule {
	FText RadialTitle; // 0x28
	TArray<UNotificationInputId*> NotificationInputsToBlock; // 0x68
};

struct UMaterialExpressionLandscapeVisibilityMask {
	FGuid ExpressionGUID; // 0x70
};

struct AWieldableMysteriousNote {
	UMaybeCompressedCanvasRenderTarget2D* RenderTarget; // 0x7a0
	UWieldableMysteriousNoteLayout* NoteLayout; // 0x7a8
	int32_t CanvasWidth; // 0x7b0
	int32_t CanvasHeight; // 0x7b4
	float FontScale; // 0x7b8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x810
	UUsableWieldableComponent* UsableWieldableComponent; // 0x818
	UInventoryItemComponent* InventoryItemComponent; // 0x820
};

struct USplashProbeVFXComponent {
	USplashProbeDataAsset* Probes; // 0xf0
	USplashProbeDataAsset* ProbesInstance; // 0xf8
	FActorComponentSelector AttachProbesToOwner; // 0x100
	USceneComponent* AttachProbesToComponent; // 0x110
};

struct UItemRadialContentRule {
	float RadialIconScale; // 0xd0
	FVector2D RadialIconOffset; // 0xd4
	UInventoryItemCategoryToSlotRemappingAsset* RemappingAsset; // 0xe0
	TArray<AItemInfo*> RemappedSlots; // 0xe8
};

struct UControllableObjectNonVerbalContentRule {
	UPhrasesRadialDataAsset* CurrentPhrases; // 0xa8
	UObject* ControlledObject; // 0xc0
};

struct UCoherentUIGTAssetContainer {
	TArray<UTexture2D*> TextureAssets; // 0x28
};

struct UMovieSceneNameableTrack {
	FMovieSceneTrackEvalOptions EvalOptions; // 0x80
};

struct ABootyProxy {
	URetractableComponent* RetractableComponent; // 0x7a8
	UItemProxyShipTrackerComponent* ItemProxyShipTrackerComponent; // 0x7b0
};

struct AVectorFieldVolume {
	UVectorFieldComponent* VectorFieldComponent; // 0x3d0
};

struct UParticleModuleMeshRotationRateOverLife {
	FRawDistributionVector RotRate; // 0x50
	char bScaleRotRate : 1; // 0x88
};

struct ULightingZoneService {
	TArray<TScriptInterface<Class>> RegisteredLightingZones; // 0x30
};

struct UWaitForAnimationStateExitProxy {
	FScriptMulticastDelegate OnStateExit; // 0x28
};

struct UOceanCrawlerAudioParamsDataAsset {
	UWwiseObjectPoolWrapper* WwiseObjectPoolWrapper; // 0x28
	TArray<FOceanCrawlerAudioKeyPair> AudioKeyPairs; // 0x30
	FWeightedProbabilityRangeOfRanges BuffThankDelay; // 0x40
	FOceanCrawlerBuffAudioSettings CrabBuffAudioSettings; // 0x70
	FOceanCrawlerBuffAudioSettings EelBuffAudioSettings; // 0x80
	FOceanCrawlerBuffAudioSettings HermitBuffAudioSettings; // 0x90
};

struct UBTTask_SetAIStrategy {
	UAIStrategyId* NewStrategy; // 0x60
};

struct UGenericWorldMapMarker {
	FCanvasWorldMapGeneric Marker; // 0xd0
	bool RegisterOnSpawn; // 0xf0
};

struct UAIPerCrewSpawner {
	UAIWeightedProbabilityRangeOfRangesRankProgression* DefaultRespawnTimerRanges; // 0x428
	int32_t MaxNumOfCrewsToSpawnFor; // 0x430
	bool ActivateBySettingFootOnIsland; // 0x434
	bool UseRespawnTimerForFirstSpawn; // 0x435
	bool AssociateSpawnsWithSpecificCrews; // 0x436
	bool PerceiveTriggerActorOnSpawn; // 0x437
	bool EnforceRespawnTimeAfterCrewLeaves; // 0x438
	bool IgnoreSpawningGracePeriodForNewCrew; // 0x439
};

struct UCutsceneMechanismActionComponent {
	FName CutsceneName; // 0x158
	AActor* CutSceneActor; // 0x160
};

struct UOpenableItemMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UBTTask_FlushQueuedAIAbility {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UKnockbackAIAbilityTriggerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct ABurrowEruptBase {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct AStreamingProbe {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UInputActionDelegateBinding {
	TArray<FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x28
};

struct UPhysicsSettings {
	float DefaultGravityZ; // 0x38
	float DefaultTerminalVelocity; // 0x3c
	float DefaultFluidFriction; // 0x40
	int32_t SimulateScratchMemorySize; // 0x44
	int32_t RagdollAggregateThreshold; // 0x48
	float TriangleMeshTriangleMinAreaThreshold; // 0x4c
	bool bEnableAsyncScene; // 0x50
	bool bEnableShapeSharing; // 0x51
	bool bEnablePCM; // 0x52
	bool bWarnMissingLocks; // 0x53
	bool bEnable2DPhysics; // 0x54
	ESettingsLockedAxis LockedAxis; // 0x55
	ESettingsDOF DefaultDegreesOfFreedom; // 0x56
	float BounceThresholdVelocity; // 0x58
	EFrictionCombineMode FrictionCombineMode; // 0x5c
	EFrictionCombineMode RestitutionCombineMode; // 0x5d
	float MaxAngularVelocity; // 0x60
	float MaxDepenetrationVelocity; // 0x64
	bool bSimulateSkeletalMeshOnDedicatedServer; // 0x68
	bool bDefaultHasComplexCollision; // 0x69
	float MaxPhysicsDeltaTime; // 0x6c
	bool bSubstepping; // 0x70
	bool bSubsteppingAsync; // 0x71
	float MaxSubstepDeltaTime; // 0x74
	int32_t MaxSubsteps; // 0x78
	float SyncSceneSmoothingFactor; // 0x7c
	float AsyncSceneSmoothingFactor; // 0x80
	float InitialAverageFrameRate; // 0x84
	TArray<FPhysicalSurfaceName> PhysicalSurfaces; // 0x88
	TArray<FDominanceGroupPair> DominanceGroups; // 0x98
	TArray<FDominanceGroupName> DominanceGroupNames; // 0xa8
	EDominanceGroup DefaultStaticDominanceGroup; // 0xb8
	EDominanceGroup DefaultMovableDominanceGroup; // 0xb9
	bool bEnableMBP; // 0xba
	int32_t MBPSubdivisions; // 0xbc
	float MBPWorldHalfExtentInCM; // 0xc0
};

struct UAppearComponent {
	bool AppearOnStart; // 0xd0
	TArray<FAppearMaterialParams> MaterialParams; // 0xd8
	FScriptMulticastDelegate OnTriggerAppear; // 0xe8
	FScriptMulticastDelegate OnTriggerDisappear; // 0xf8
	FScriptMulticastDelegate OnSnapHidden; // 0x108
	bool IsVisible; // 0x118
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x120
};

struct URammableDamageDataAsset {
	TArray<FRammableDamageSpeedEntry> DamageSpeedParams; // 0x28
};

struct UTaleQuestStructStepBase {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleQuestGenerateClueSiteOnIslandStepDesc {
	FQuestVariableName IslandName; // 0x80
	FQuestVariableClueSite ClueSite; // 0x90
	UClueFactoryConfig* ClueGenerationConfiguration; // 0xa0
};

struct UCommodityPurchaseTrackingComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTaleQuestAddCargoRunMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ULevelSequence {
	UMovieScene* MovieScene; // 0x2a8
	FLevelSequenceObjectReferenceMap ObjectReferences; // 0x2b0
	TMap<FString, FLevelSequenceObject> PossessedObjects; // 0x350
};

struct UBTTask_ChangeHangoutAnimation {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UAbilityTask_WaitInputPress {
	FScriptMulticastDelegate OnPress; // 0x68
};

struct UMovieScene2DTransformSection {
	FRichCurve Translation[0x2]; // 0xa0
	FRichCurve Rotation; // 0x190
	FRichCurve Scale[0x2]; // 0x208
	FRichCurve Shear[0x2]; // 0x2f8
};

struct UCharacterPossessedEventTestComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UPickUpObjectConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct APulleyMechanism {
	UStaticMeshComponent* PulleyMesh; // 0x518
	UIntentBasedMechanismTriggerComponent* PulleyMechanismTriggerComponent; // 0x520
	UInteractableComponent* InteractableComponent; // 0x528
	bool CameraTracksMechanismsBeingPulled; // 0x530
	AActor* UnconnectedActorToTrack; // 0x538
	FVector DefaultLookAtLocation; // 0x540
	FLookAtOffsetParams CameraLookAtParams; // 0x54c
	UAnalogInputId* AnalogControls; // 0x568
	FText PulleyInteractionPrompt; // 0x570
	FText PulleyInteractionDisabledPrompt; // 0x5a8
};

struct ACampaignService {
	TArray<FActiveCampaignInfo> ActiveCampaigns; // 0x3e0
};

struct UMockPostPhysicsTickerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTTask_FlushQueuedEngageEnemyMethod {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UClothingLoadoutContainsItemRadialContext {
	UClothingDesc* TargetItem; // 0x28
};

struct UParticleModuleMeshRotation_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x90
};

struct UHttpClientComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UGatedHealthComponent {
	uint32_t NumOfGates; // 0x240
};

struct UShipCustomizationLoadoutComponent {
	FShipCustomizationLoadout Loadout; // 0xe0
	AShip* Ship; // 0x108
	UShipSize* ShipSize; // 0x110
	FShipCustomizationLoadoutPartCustomizations ActivePartCustomizations; // 0x148
};

struct UCursor_C {
	UImage* Image_158; // 0x230
};

struct UMovieSceneSkeletalAnimationSection {
	FMovieSceneSkeletalAnimationParams Params; // 0x98
	UAnimSequence* AnimSequence; // 0x130
	UAnimSequenceBase* Animation; // 0x138
	float StartOffset; // 0x140
	float EndOffset; // 0x144
	float PlayRate; // 0x148
	char bReverse : 1; // 0x14c
	FName SlotName; // 0x150
};

struct UEmblemService {
	TArray<UPopUpMessageDesc*> GarbageCollectorVisiblePopups; // 0x30
	TArray<UPopUpAudioDesc*> GarbageCollectorPopupAudioOverrides; // 0x40
};

struct AEquipmentChestInteraction {
	TArray<UItemCategory*> Categories; // 0x438
	bool AllTab; // 0x448
};

struct ULiquidContainerTestMaterial {
	UPhysicalMaterial* PhysMaterial; // 0x58
	FColorMaterialInput DiffuseColor; // 0x60
	FColorMaterialInput SpecularColor; // 0xa0
	FColorMaterialInput BaseColor; // 0xe0
	FScalarMaterialInput Metallic; // 0x120
	FScalarMaterialInput Specular; // 0x160
	FScalarMaterialInput Roughness; // 0x1a0
	FVectorMaterialInput Normal; // 0x1e0
	FColorMaterialInput EmissiveColor; // 0x228
	FScalarMaterialInput Opacity; // 0x268
	FScalarMaterialInput OpacityMask; // 0x2a8
	EMaterialDomain MaterialDomain; // 0x2e8
	EBlendMode BlendMode; // 0x2e9
	EDecalBlendMode DecalBlendMode; // 0x2ea
	bool bDecalNoEmissiveOrRoughness; // 0x2eb
	bool bDecalEnableStencil; // 0x2ec
	EMaterialDecalResponse MaterialDecalResponse; // 0x2ed
	EMaterialShadingModel ShadingModel; // 0x2ee
	float OpacityMaskClipValue; // 0x2f0
	float DepthWeightScale; // 0x2f4
	float DepthWeightExponent; // 0x2f8
	float DepthWeightBase; // 0x2fc
	char bBlendedOITAfterTranslucency : 1; // 0x300
	char bForceResolution : 1; // 0x300
	ELowResTranslucencyCascade ForcedResolution; // 0x304
	float FirstSplitDistance; // 0x308
	float SecondSplitDistance; // 0x30c
	float FullResInFrontMaxDistance; // 0x310
	char FullResInFront : 1; // 0x314
	char PopPerParticle : 1; // 0x314
	FVectorMaterialInput WorldPositionOffset; // 0x318
	FVectorMaterialInput WorldDisplacement; // 0x360
	FScalarMaterialInput TessellationMultiplier; // 0x3a8
	FColorMaterialInput SubsurfaceColor; // 0x3e8
	FScalarMaterialInput ClearCoat; // 0x428
	FScalarMaterialInput ClearCoatRoughness; // 0x468
	FScalarMaterialInput AmbientOcclusion; // 0x4a8
	FScalarMaterialInput Refraction; // 0x4e8
	FColorMaterialInput BillboardColor; // 0x528
	FVectorMaterialInput BillboardParams; // 0x568
	FVector2MaterialInput CustomizedUVs[0x8]; // 0x5b0
	FMaterialAttributesInput MaterialAttributes; // 0x7f0
	FScalarMaterialInput PixelDepthOffset; // 0x838
	char bTranslucentBeforeTranslucency : 1; // 0x878
	char bTranslucentBeforeVolumeFog : 1; // 0x878
	char bTranslucentWithDepthWrite : 1; // 0x878
	char bEnableSeparateTranslucency : 1; // 0x878
	char bEnableResponsiveAA : 1; // 0x878
	char bScreenSpaceReflections : 1; // 0x878
	char TwoSided : 1; // 0x878
	char DitheredLODTransition : 1; // 0x878
	EConstantMaterial ConstantMaterial; // 0x87c
	float SkyLightWhenOccluded; // 0x880
	float CloudShadowsInfluence; // 0x884
	int32_t NumCustomizedUVs; // 0x888
	ETranslucencyLightingMode TranslucencyLightingMode; // 0x88c
	float TranslucencyDirectionalLightingIntensity; // 0x890
	float LightColorInfluence; // 0x894
	float AmbientLightColorInfluence; // 0x898
	float LightIntensityInfluence; // 0x89c
	float AmbientLightIntensityInfluence; // 0x8a0
	float AlternativeAmbientLightColorInfluence; // 0x8a4
	float AlternativeAmbientLightIntensityInfluence; // 0x8a8
	char bEvaluateLightningAtParticleCenter : 1; // 0x8ac
	float TranslucencyScaleForReflection; // 0x8b0
	char bObjectFadeEnabled : 1; // 0x8b4
	float ObjectFadeRate; // 0x8b8
	float ObjectFadeDistanceThreshold; // 0x8bc
	float TranslucentShadowDensityScale; // 0x8c0
	float TranslucentSelfShadowDensityScale; // 0x8c4
	float TranslucentSelfShadowSecondDensityScale; // 0x8c8
	float TranslucentSelfShadowSecondOpacity; // 0x8cc
	float TranslucentBackscatteringExponent; // 0x8d0
	FLinearColor TranslucentMultipleScatteringExtinction; // 0x8d4
	float TranslucentShadowStartOffset; // 0x8e4
	float VolumeFogScale; // 0x8e8
	char DistanceFog : 1; // 0x8ec
	char bDisableDepthTest : 1; // 0x8ec
	char bGenerateSphericalParticleNormals : 1; // 0x8ec
	char bDontRenderWhenPlayerInsideShip : 1; // 0x8ec
	char bTangentSpaceNormal : 1; // 0x8ec
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x8ec
	char bBlockGI : 1; // 0x8ec
	char bUsedAsSpecialEngineMaterial : 1; // 0x8ec
	char bUsedWithSkeletalMesh : 1; // 0x8ed
	char bUsedWithEditorCompositing : 1; // 0x8ed
	char bUsedWithLandscape : 1; // 0x8ed
	char bUsedWithParticleSprites : 1; // 0x8ed
	char bUsedWithCPUParticleSprites : 1; // 0x8ed
	char bUsedWithStaticMesh : 1; // 0x8ed
	char bUsedWithCoverage : 1; // 0x8ed
	char bUsedWithGPUInstanceCulling : 1; // 0x8ed
	char bUsedWithBeamTrails : 1; // 0x8ee
	char bUsedWithMeshParticles : 1; // 0x8ee
	char bUsedWithStaticLighting : 1; // 0x8ee
	char bUsedWithFluidSurfaces : 1; // 0x8ee
	char bUsedWithMorphTargets : 1; // 0x8ee
	char bUsedWithSplineMeshes : 1; // 0x8ee
	char bUsedWithInstancedStaticMeshes : 1; // 0x8ee
	char bUsesDistortion : 1; // 0x8ee
	char bUsedWithClothing : 1; // 0x8ef
	char bUsedWithDeformables : 1; // 0x8ef
	char bUsedWithFFTWaterMask : 1; // 0x8ef
	char bUsedWithVolumeFogMask : 1; // 0x8ef
	char bUsedWithDynamicObjectFading : 1; // 0x8ef
	char bUsedWithWaterBoundary : 1; // 0x8ef
	char bUsedWithClouds : 1; // 0x8ef
	char bUsedWithInstancedRopes : 1; // 0x8ef
	char bUsedWithPlanarReflection : 1; // 0x8f0
	char bUsedWithPointLightShadows : 1; // 0x8f0
	char bUsedWithMaskPass : 1; // 0x8f0
	char bUsedWithUI : 1; // 0x8f0
	char bAutomaticallySetUsageInEditor : 1; // 0x8f0
	char bAllowEmissiveOnLandscape : 1; // 0x8f0
	char bApplyWaterMask : 1; // 0x8f0
	char bUseReZ : 1; // 0x8f0
	char bFullyRough : 1; // 0x8f1
	char bUseLightmapDirectionality : 1; // 0x8f1
	EMaterialGeometryMode GeometryMode; // 0x8f4
	EMaterialTessellationMode D3D11TessellationMode; // 0x8f5
	char bEnableCrackFreeDisplacement : 1; // 0x8f8
	char bEnableAdaptiveTessellation : 1; // 0x8f8
	float MaxDisplacement; // 0x8fc
	char Wireframe : 1; // 0x900
	char bOutputVelocityOnBasePass : 1; // 0x900
	float NormalOffsetShadowBiasScale; // 0x904
	int32_t EditorX; // 0x908
	int32_t EditorY; // 0x90c
	int32_t EditorPitch; // 0x910
	int32_t EditorYaw; // 0x914
	TArray<UMaterialExpression*> Expressions; // 0x918
	TArray<FMaterialFunctionInfo> MaterialFunctionInfos; // 0x928
	TArray<FMaterialParameterCollectionInfo> MaterialParameterCollectionInfos; // 0x938
	char bCanMaskedBeAssumedOpaque : 1; // 0x948
	char bIsMasked : 1; // 0x948
	char bIsPreviewMaterial : 1; // 0x948
	char bUseMaterialAttributes : 1; // 0x948
	char bUseTranslucencyVertexFog : 1; // 0x948
	char bUseDensityMapOnTranslucencyVertexFog : 1; // 0x948
	char bAllowDevelopmentShaderCompile : 1; // 0x948
	char bIsMaterialEditorStatsMaterial : 1; // 0x948
	uint32_t UsageFlagWarnings; // 0x94c
	EBlendableLocation BlendableLocation; // 0x950
	int32_t BlendablePriority; // 0x954
	char bIsAlphaBlended : 1; // 0x958
	float RefractionDepthBias; // 0x95c
	FGuid StateId; // 0x960
	int32_t UnwrappedUVSet; // 0x970
	TArray<UTexture*> ExpressionTextureReferences; // 0xa00
};

struct UMovieSceneParticleParameterTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
};

struct AMerchantCrate {
	FMerchantCrateSfx FullCrateSfx; // 0x790
	TScriptInterface<Class> MountpointInterface; // 0x7b0
};

struct UTaleQuestParallelStep {
	TArray<UTaleQuestStep*> Steps; // 0x98
	UTaleQuestParallelStepDesc* Desc; // 0xa8
};

struct UGoldInContainerComponent {
	FRewardId GoldRewardId; // 0x620
};

struct AMapFixtureTestGameMode {
	char bDisableAsyncOcclusionChecking : 1; // 0x3d8
	char bUseSeamlessTravel : 1; // 0x3d8
	char bPauseable : 1; // 0x3d8
	char bStartPlayersAsSpectators : 1; // 0x3d8
	char bDelayedStart : 1; // 0x3d8
	FString OptionsString; // 0x3e0
	APawn* DefaultPawnClass; // 0x3f0
	AHUD* HUDClass; // 0x3f8
	int32_t NumSpectators; // 0x400
	int32_t NumPlayers; // 0x404
	int32_t NumBots; // 0x408
	float MinRespawnDelay; // 0x40c
	AGameSession* GameSession; // 0x410
	int32_t NumTravellingPlayers; // 0x418
	FText DefaultPlayerName; // 0x420
	ULocalMessage* EngineMessageClass; // 0x458
	APlayerController* PlayerControllerClass; // 0x460
	ASpectatorPawn* SpectatorClass; // 0x468
	APlayerController* ReplaySpectatorPlayerControllerClass; // 0x470
	APlayerState* PlayerStateClass; // 0x478
	AGameState* GameStateClass; // 0x480
	AGameState* GameState; // 0x488
	TArray<APlayerState*> InactivePlayerArray; // 0x490
	TArray<FGameClassShortName> GameModeClassAliases; // 0x4b0
	float InactivePlayerStateLifeSpan; // 0x4c0
	bool bHandleDedicatedServerReplays; // 0x4c4
};

struct UAIShipTelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AGameSession {
	int32_t MaxSpectators; // 0x3d0
	int32_t MaxPlayers; // 0x3d4
	char MaxSplitscreensPerConnection; // 0x3d8
	bool bRequiresPushToTalk; // 0x3d9
	FName SessionName; // 0x3dc
};

struct UNPCOnShipDataAsset {
	UNPCOnSurfaceDataAsset* NPCOnSurfaceDataAsset; // 0x28
	TArray<FName> RestrictedIslands; // 0x30
	FWeightedProbabilityRangeOfRanges PlayersLeftShipRespawnCooldown; // 0x40
	float TimeBetweenShipStateChecks; // 0x70
	float TimeBetweenNPCUnderwaterChecks; // 0x74
	float TimeBetweenNPCOnFireChecks; // 0x78
	float EnemyShipNearbyDistanceXYInMetres; // 0x7c
	float TimeBetweenRadialStateChecks; // 0x80
	float TimeBetweenHideWhenInDangerChecks; // 0x84
};

struct ULockOnCameraModifier {
	ULockOnCameraModifierSettings* Settings; // 0x48
	bool IsYawLocked; // 0x50
	bool OwnerInputsIgnored; // 0x51
	AActor* TargetActor; // 0x58
};

struct UDoesNameContainsStatCondition {
	FName TargetNameSubString; // 0x30
};

struct AVolumeMechanismTrigger {
	UMechanismTriggerComponent* MechanismTriggerComponent; // 0x3d0
	UBoxComponent* TriggerVolume; // 0x3d8
	bool UsePerCrewOverlaps; // 0x3e0
	int32_t PerCrewOverlapCooldownTimeInSeconds; // 0x3e4
};

struct UPirateGeneratorMaterials {
	TArray<UMaterialInterface*> Materials; // 0x28
};

struct UMaterialExpressionBlackBody {
	FExpressionInput Temp; // 0x70
};

struct UBTTask_PetWaitForAnimationRoamingState {
	TArray<EAthenaAnimationPetRoamingState> SuccessRoamingStates; // 0x60
	TArray<EAthenaAnimationPetRoamingState> FailRoamingStates; // 0x70
};

struct ACookingPot {
	UStaticMeshComponent* MeshComponent; // 0x400
	UActionRulesInteractableComponent* InteractableComponent; // 0x408
	UCookerComponent* CookerComponent; // 0x410
	float HoldToInteractTime; // 0x418
	FText NotWieldingCookableItemTooltip; // 0x420
	FText WieldingCookableItemTooltip; // 0x458
	FText TakeItemTooltip; // 0x490
	FText CannotTakeItemTooltip; // 0x4c8
	FText MixInItemTooltip; // 0x500
};

struct UTaleQuestLocationMapChestFoundStepDesc {
	FName MapId; // 0x80
};

struct UInterpTrackInstMove {
	FVector ResetLocation; // 0x28
	FRotator ResetRotation; // 0x34
};

struct UMaterialExpressionObjectOrientation {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UCrowdManager {
	ANavigationData* MyNavData; // 0x28
	TArray<FCrowdAvoidanceConfig> AvoidanceConfig; // 0x30
	TArray<FCrowdAvoidanceSamplingPattern> SamplingPatterns; // 0x40
	int32_t MaxAgents; // 0x50
	float MaxAgentRadius; // 0x54
	int32_t MaxAvoidedAgents; // 0x58
	int32_t MaxAvoidedWalls; // 0x5c
	float NavmeshCheckInterval; // 0x60
	float PathOptimizationInterval; // 0x64
	char bResolveCollisions : 1; // 0x68
};

struct UIsDrunkStatCondition {
	float MinimumDrunkennessRequired; // 0x30
};

struct UZoomMapParamsDataAsset {
	float Offset; // 0x28
	float ZoomLevel; // 0x2c
	float XMarkSizeModifier; // 0x30
	float MaxDistanceFromCentreToDigspot; // 0x34
};

struct UDrumItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UPlanarReflectionPlaneComponent {
	USceneComponent* AttachParent; // 0xc8
	TArray<USceneComponent*> AttachChildren; // 0xd0
	FName AttachSocketName; // 0xe0
	char bRequiresCustomLocation : 1; // 0xe8
	char bAbsoluteLocation : 1; // 0xe8
	char bAbsoluteTranslation : 1; // 0xe8
	char bAbsoluteRotation : 1; // 0xe8
	char bAbsoluteScale : 1; // 0xe8
	char bVisible : 1; // 0xe8
	char bHiddenInGame : 1; // 0xe8
	char bShouldUpdatePhysicsVolume : 1; // 0xe8
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0xe9
	char bUseAttachParentBound : 1; // 0xe9
	char bComponentIsUnionOfChildren : 1; // 0xe9
	char bJitterReduction : 1; // 0xe9
	char CacheRootVelocity : 1; // 0xe9
	char bWorldToComponentUpdated : 1; // 0xe9
	TWeakObjectPtr<APhysicsVolume> PhysicsVolume; // 0xf8
	FVector RelativeScale3D; // 0x11c
	FVector RelativeLocation; // 0x128
	FRotator RelativeRotation; // 0x134
	EComponentMobility Mobility; // 0x220
	EDetailMode DetailMode; // 0x221
	FVector ComponentVelocity; // 0x22c
	FScriptMulticastDelegate PhysicsVolumeChangedDelegate; // 0x238
	TArray<FName> SocketVelocitiesToCache; // 0x258
};

struct UReflectionCaptureComponent {
	bool bLockSettings; // 0x2b0
	float Brightness; // 0x2b4
	float ShadowBrightness; // 0x2b8
	float LPVOcclusionBrightness; // 0x2bc
	FLinearColor ReflectionTint; // 0x2c0
	FGuid StateId; // 0x2dc
};

struct AOnlineAthenaPlayerController {
	FMysteriousNotesCompletionEventsModelEntry LogoutNoteCompletionIdent; // 0x1490
	FIdleTimeTracker IdleTimeTracker; // 0x1498
	bool IdleDisconnectEnabled; // 0x14d1
};

struct UCameraComponent {
	float FieldOfView; // 0x2b0
	float OrthoWidth; // 0x2b4
	float OrthoNearClipPlane; // 0x2b8
	float OrthoFarClipPlane; // 0x2bc
	float AspectRatio; // 0x2c0
	char bConstrainAspectRatio : 1; // 0x2c4
	char bUseFieldOfViewForLOD : 1; // 0x2c4
	char bUsePawnControlRotation : 1; // 0x2c4
	ECameraProjectionMode ProjectionMode; // 0x2c8
	float PostProcessBlendWeight; // 0x2cc
	FPostProcessSettings PostProcessSettings; // 0x2d0
	char bUseControllerViewRotation : 1; // 0x810
};

struct UBTTask_BroadcastOceanCrawlerAbilityAudioEvent {
	EOceanCrawlerAbilityAudioKey OceanCrawlerAudioKeyToBroadcast; // 0x60
};

struct AContestManagerService {
	UContestServiceTelemetryComponent* ContestServiceTelemetryComponent; // 0x3e0
	UContestSpawnLocationsComponent* CrewSpawnLocationsComponent; // 0x3e8
	UContestRewardComponent* ContestRewardComponent; // 0x3f0
	UContestCeremoniesComponent* ContestCeremoniesComponent; // 0x3f8
	UContestUIComponent* ContestUIComponent; // 0x400
	UContestTeamAssignmentComponent* ContestTeamAssignmentComponent; // 0x410
	EContestState CurrentContestState; // 0x418
	int64_t StateEndTime; // 0x420
	TArray<FTrackedCrewInContest> TrackedCrewsInContest; // 0x580
	TArray<AAthenaPlayerState*> BackfilledPlayers; // 0x5d0
	TArray<FGuid> ContestsPlayedCountBlacklist; // 0x5e0
	UEmergentContestVoyageRecipeDataAsset* CurrentContestVoyageDataAsset; // 0x660
	UTallTaleContestRecipeDataAsset* CurrentTallTaleContestDataAsset; // 0x668
	FText ArenaName; // 0x6a8
	UContestVoyagesDataAsset* ContestVoyages; // 0x800
	FAchievementCompleteContest CompleteContestAchievementRewarder; // 0x888
	UContestScoreSystem* ScoreSystem; // 0x8b0
	UContestShipCatalogueDataAsset* ContestShipAppearences; // 0x8b8
	FContestUIDescriptions ContestUIDescriptions; // 0x8c0
	AAthenaContestTavern* ContestStagingTavern; // 0x940
	APawn* TavernPawnType; // 0x948
	UCompany* ArenaCompany; // 0x950
	UConditionalStatsTriggerType* StatTriggerForCompletingAContest; // 0x958
	UConditionalStatsTriggerType* StatTriggerForShipsCompletingContest; // 0x960
	FGuid ContestUniqueId; // 0x98c
	AContestManagerDebugRepActor* DebugRepActor; // 0x9a0
	TArray<AController*> PlayersNeedingTeleport; // 0x9b8
	TArray<AController*> PlayersAwaitingContestRespawn; // 0x9c8
	TArray<UItemCategory*> ItemsToReset; // 0x9d8
	TArray<FCrewScore> CachedLeaderboard; // 0xa08
	FContestCrewRequirementData InitialStagingRequirements; // 0xa20
	FContestCrewRequirementData FallbackStagingRequirements; // 0xa48
	FContestCrewRequirementData ContestRequirements; // 0xa70
	UItemDesc* ScoreScrollDesc; // 0xa98
	AItemInfo* ScoreScrollItem; // 0xaa0
	int32_t CurrentPeriod; // 0xad4
	TArray<FGuid> CrewsRequestingMigration; // 0xad8
};

struct UWieldableItemAnimationInstance {
	FObjectMessagingDispatcher MessagingDispatcher; // 0x450
	TArray<FInputSequencePair> OneShotAnimationSequence; // 0x4f0
	TArray<FInputSequencePair> OneShotAnimationAlternateSequence; // 0x500
	TArray<FInputMontagePair> ContinuousUseAnimationSequence; // 0x510
	TArray<FInputMontagePair> ContinuousUseAnimationAlternateSequence; // 0x520
	UAnimSequenceBase* EquipItemAnimationSequence; // 0x530
	UAnimSequenceBase* UnequipItemAnimationSequence; // 0x538
	bool OneShotIsAlternate; // 0x540
	bool ContinuousIsAlternate; // 0x541
	bool DisableBlending; // 0x542
	UAnimMontage* CurrentMontage; // 0x620
};

struct AGameState {
	AGameMode* GameModeClass; // 0x3d0
	AGameMode* AuthorityGameMode; // 0x3d8
	ASpectatorPawn* SpectatorClass; // 0x3e0
	FName MatchState; // 0x3e8
	FName PreviousMatchState; // 0x3f0
	int32_t ElapsedTime; // 0x3f8
	TArray<APlayerState*> PlayerArray; // 0x400
	float ReplicatedWorldTimeSeconds; // 0x410
	float ServerWorldTimeSecondsDelta; // 0x414
	float ServerWorldTimeSecondsUpdateFrequency; // 0x418
};

struct UPlayerActivityIconCatalogueDataAsset {
	TArray<FPlayerActivityIconInfo> PlayerActivityIcons; // 0x28
};

struct UParticleModuleVelocityCone {
	FRawDistributionFloat Angle; // 0x58
	FRawDistributionFloat Velocity; // 0x90
	FVector Direction; // 0xc8
	char bUseGroupAForAll : 1; // 0xd4
	FVelocityConeGroupParams AdditionalParams[0x5]; // 0xd8
	uint32_t VelocityDistributeOverNPoints; // 0x358
	float VelocityNPointsRandomness; // 0x35c
	FVector AdditiveVelocity; // 0x360
	float ConeDepthScale; // 0x36c
	char WorldSpaceOffset : 1; // 0x370
	FVector EmitterOriginOffset; // 0x374
	float PushAwayFromCenterFactor; // 0x380
};

struct UTallTaleIslandEventType {
	FIslandEventIcons IslandIcons; // 0x28
	FIslandEventIcons HeaderIcons; // 0x38
};

struct ALocationMap {
	TArray<FMapTextureRenderData> CachedRenderData; // 0x840
	TArray<UMapMarkId*> MarkIds; // 0x850
};

struct UObtainClueOnWieldComponent {
	UClueDescriptor* ClueToObtain; // 0x140
	UClueSiteType* ClueSiteType; // 0x148
};

struct UParticleModuleVelocityConeEmitterPoint {
	FRawDistributionFloat Angle; // 0x58
	FRawDistributionFloat VelocityScale; // 0x90
	uint32_t VelocityDistributeOverNPoints; // 0xc8
	float VelocityNPointsRandomness; // 0xcc
	FVector AdditiveVelocity; // 0xd0
};

struct APoseableMeshWieldableReplica {
	UPrimitiveComponent* MeshComponent; // 0x3d8
	UCosmeticItemAnimationSetDataAsset* CachedAnimationSet; // 0x3e0
	UItemCategory* ReplicaCategory; // 0x3e8
};

struct UTelemetryProgressStepDesc {
	FString Progression; // 0x80
	FTelemetryStepContext TelemetryContext; // 0x90
};

struct UAbilityTask_WaitConfirm {
	FScriptMulticastDelegate OnConfirm; // 0x68
};

struct UTaleEnchantedSpyglassServiceDesc {
	UItemDesc* EnchantedSpyglassDesc; // 0x30
};

struct UActorSequencePlayer {
	FScriptMulticastDelegate OnPlay; // 0x390
	FScriptMulticastDelegate OnStop; // 0x3a0
	FScriptMulticastDelegate OnPause; // 0x3b0
	char bIsPlaying : 1; // 0x3c0
	char bReversePlayback : 1; // 0x3c0
	char bPendingFirstUpdate : 1; // 0x3c0
	UMovieSceneSequence* Sequence; // 0x3c8
	float TimeCursorPosition; // 0x3d0
	float StartTime; // 0x3d4
	float EndTime; // 0x3d8
	int32_t CurrentNumLoops; // 0x3dc
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0x3f0
};

struct UKrakenAICharacterAudioComponentParams {
	UWwiseEvent* PlayKrakenAmbience; // 0x28
	UWwiseEvent* StopKrakenAmbience; // 0x30
	UWwiseEvent* PlayKrakenTell; // 0x38
	float PlayKrakenTellCooldownMax; // 0x40
	float PlayKrakenTellCooldownMin; // 0x44
};

struct UFFTWaterComponent {
	FFFTWaterComponentParams WaterParams; // 0x598
	UModel* Brush; // 0x8a8
	UBodySetup* BrushBodySetup; // 0x8b0
	FVector PrePivot; // 0x8b8
	UMaterialInterface* LightFunctionMaterial; // 0x948
	UMaterial* DefaultLightFunctionMaterial; // 0x950
};

struct UBTDecorator_IsOccupyingHangoutSpotWithGivenId {
	TArray<FHangoutSpotId> SuccessIds; // 0x68
};

struct UDebugCreateAndPlayNpcAnimationStep {
	UDebugCreateAndPlayNpcAnimationStepDesc* StepDesc; // 0x90
	UNPCDialogComponent* NPCDialogComponent; // 0xa8
	ACutSceneActor* CutSceneActor; // 0xb0
	AActor* SpawnedActor; // 0xb8
	APlaceableReaction* PlaceableReactionActor; // 0xc0
};

struct AWaterSlide {
	USplineComponent* SlideSpline; // 0x3d8
	USceneComponent* Root; // 0x3e0
	UWaterSlideParamsDataAsset* WaterSlideParamsDataAsset; // 0x3e8
	UPrimitiveComponent* EntranceCollisionComponent; // 0x3f0
	AWaterSlide* ContinuedWaterSlideRoute; // 0x3f8
	AWaterSlide* LeftWaterSlideRoute; // 0x400
	AWaterSlide* RightWaterSlideRoute; // 0x408
	bool IsEndOfSlide; // 0x410
	FVector EndOfSlideLaunchForce; // 0x414
	UWaterSlideAudioParams* WaterSlideAudioParams; // 0x420
};

struct AReceiverPuzzleStatue {
	uint8_t CurrentStatueConfiguration; // 0x458
	char InitialStatueConfiguration; // 0x45a
	USceneComponent* ConfigurationPositionPivot; // 0x460
	UCurveFloat* PositionTransitionCurve; // 0x468
	TArray<FPuzzleStatueConfigurationPosition> Positions; // 0x470
	UReceiverPuzzleStatueAudioParamsDataAsset* ReceiverAudioParams; // 0x480
};

struct UAnimNotifyAdditionalEventsWwiseEmitterComponent {
	TArray<FAnimNotifyWwiseObserver> AnimNotifyObservers; // 0x2e0
};

struct UAnimationSwitchDataAsset {
	float Threshold; // 0x28
	TArray<FAnimationSwitchEntry> Entries; // 0x30
};

struct UParticleModuleOrbit {
	EOrbitChainMode ChainMode; // 0x58
	FRawDistributionVector OffsetAmount; // 0x60
	FOrbitOptions OffsetOptions; // 0x98
	FRawDistributionVector RotationAmount; // 0xa0
	FOrbitOptions RotationOptions; // 0xd8
	FRawDistributionVector RotationRateAmount; // 0xe0
	FOrbitOptions RotationRateOptions; // 0x118
};

struct UCapstanMechanismTriggerComponent {
	EMechanismTriggerType TriggerType; // 0xd8
	FScriptMulticastDelegate OnMechanismActionRegisteredWithTriggerDelegate; // 0xe0
	FScriptMulticastDelegate OnMechanismActionUnregisteredWithTriggerDelegate; // 0xf0
	FScriptMulticastDelegate OnMechanismTriggerChangedMechanismActionStatesDelegate; // 0x100
	FScriptMulticastDelegate OnMechanismTriggerStateChangedDelegate; // 0x110
	FScriptMulticastDelegate OnMechanismTriggerResetDelegate; // 0x120
	EMechanismTriggerState TriggerState; // 0x140
};

struct UOpenableItemAnimationInstance {
	UAnimSequence* ClosedTransitionAnim; // 0x440
	UAnimSequence* ClosedLoopAnim; // 0x448
	UAnimSequence* OpenTransitionAnim; // 0x450
	UAnimSequence* FirstOpenTransitionAnim; // 0x458
	UAnimSequence* OpenLoopAnim; // 0x460
	float BlendInTime; // 0x468
	float BlendOutTime; // 0x46c
	UAnimMontage* CurrentMontage; // 0x470
	UAnimSequence* NextAnim; // 0x478
	EOpenableItemState CurrentAnimOpenState; // 0x480
};

struct UTaleQuestChooseLandOrSeaStepDesc {
	USeaClueSiteTypesDataAsset* SeaClueSiteTypes; // 0x80
	float ProjectionAngleInDegrees; // 0x88
	float MinProjectionProportion; // 0x8c
	float MaxProjectionProportion; // 0x90
	float LandClueChanceWhenPreviousClueWasSea; // 0x94
	float LandClueChanceWhenPreviousClueWasLand; // 0x98
	FQuestVariableVector ProjectionPoint; // 0xa0
	FQuestVariableTradeRouteData TradeRouteData; // 0xb0
	FQuestVariableBool IsSeaLocation; // 0xc0
	FQuestVariableNameArray ValidIslandNames; // 0xd0
};

struct UCameraAnim {
	UInterpGroup* CameraInterpGroup; // 0x28
	float AnimLength; // 0x30
	FBox BoundingBox; // 0x34
	char bRelativeToInitialTransform : 1; // 0x50
	float BaseFOV; // 0x54
	FPostProcessSettings BasePostProcessSettings; // 0x60
	float BasePostProcessBlendWeight; // 0x5a0
};

struct UNPCDialogPredicateAtHealthStage {
	int32_t ActorIdx; // 0x38
	int32_t HealthStage; // 0x3c
};

struct AMechanismsService {
	TArray<FInteractableMechanismIslandData> RegisteredMechanisms; // 0x3e8
	TArray<FActorsOverlappingMechanismData> OverlappingActors; // 0x3f8
};

struct UHorizontalBoxSlot {
	FMargin Padding; // 0x38
	FSlateChildSize Size; // 0x48
	EHorizontalAlignment HorizontalAlignment; // 0x50
	EVerticalAlignment VerticalAlignment; // 0x51
};

struct UAIFormTypeList {
	TArray<UAthenaAIFormDataAsset*> AllForms; // 0x28
	UAthenaAIFormDataAsset* DefaultForm; // 0x38
};

struct UCharacterFlammableComponent {
	float FireFalloffDuration; // 0x140
	float FireRateOfFalloffInRain; // 0x144
	float FireFalloffMultiplier; // 0x148
	FName VfxSocketName; // 0x14c
	FTransform SocketRelativeOffset; // 0x160
	UWorld* CachedWorld; // 0x218
	UFireSettingsDataAsset* FireSettingsAsset; // 0x228
};

struct UDeliverableRedirectionNPCContext {
	FNPCData NPCData; // 0x28
};

struct UPeriodicAINoiseEventComponent {
	FName NoiseTag; // 0xc8
	bool NoiseRangeBasedOnMovementSpeed; // 0xd0
	float ConstantNoiseRange; // 0xd4
	UCurveFloat* MovementSpeedToNoiseRange; // 0xd8
	AActor* OwnerActor; // 0xe0
};

struct UContestServiceTelemetryComponent {
	AContestManagerService* ContestManagerParent; // 0xc8
	FString ServerId; // 0x128
};

struct ATargetPoint {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct ACursedCaptainsSkullWieldable {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UFlamethrowerComponent {
	TArray<FStatus> DefaultStatusesToApplyOnOverlap; // 0x5b0
	TArray<FFlamethrowerStatusOverride> OverrideStatusesToApplyOnOverlap; // 0x5c0
	float DamageToApplyToWieldedItemsOnOverlap; // 0x5d0
	UMechanismAnimationCurve_Flamethrower* Animation; // 0x5d8
	UParticleSystem* ParticleSystem; // 0x5e0
	FRotator ParticleSystemRelativeRotation; // 0x5e8
	FMechanismAnimationEventContainer AnimationEvents; // 0x5f8
	UParticleSystemComponent* CachedParticleSystem; // 0x648
	UPrimitiveComponent* SimpleCollisionShape; // 0x650
	TScriptInterface<Class> AnimatedMechanismInterface; // 0x658
	TScriptInterface<Class> VirtualSceneComponentTransformInterface; // 0x668
};

struct UImpactDataAsset {
	UMaterialInterface* DecalMaterial; // 0x28
	TArray<UImpactDecalParamModifier*> DecalParamModifiers; // 0x30
	FVector DecalSize; // 0x40
	float FadeScreenSize; // 0x4c
	float DecalLifetime; // 0x50
	UObject* Particles; // 0x58
	UObject* TriggeredForClientParticles; // 0x60
	UObject* SplashParticles; // 0x68
	EVfxRegion ParticlesVfxRegion; // 0x70
	UWwiseEvent* WwiseEvent; // 0x78
	UWwiseEvent* WwiseEventLayer; // 0x80
	UWwiseObjectPoolWrapper* WwiseObjectPool; // 0x88
	bool ParticleSystemIsPerPoint; // 0x90
	bool AttachToPlayer; // 0x91
	bool EnableUnderWaterImpact; // 0x92
	float MaxDepthForSplash; // 0x94
};

struct ABeacon {
	UStaticMeshComponent* Mesh; // 0x470
	UParticleSystemComponent* BeaconActiveParticleSystem; // 0x478
	UPointLightComponent* PointLight; // 0x480
	bool EnableParticleSystemTint; // 0x488
	UInteractableComponent* InteractableComponent; // 0x490
	UObject* ExtinguishedVFX; // 0x498
	FName WwiseEmitterName; // 0x4a0
	UWwiseEvent* StartLoopFlameSfx; // 0x4a8
	UWwiseEvent* StopLoopFlameSfx; // 0x4b0
	UWwiseEvent* FlameTransferSfx; // 0x4b8
	UWwiseEvent* ExtinguishedSfx; // 0x4c0
	UWwiseObjectPoolWrapper* BeaconWwisePool; // 0x4c8
	float InteractionRadius; // 0x4d0
	FText TakeFlameTooltipText; // 0x4d8
	FText CannotTakeFlameTooltipText; // 0x510
	FText LanternNotRaisedToolTipText; // 0x548
	FText NotWieldingFlameTooltipText; // 0x580
	FText SetFlameTooltipText; // 0x5b8
	bool CanTakeFlameFromBeacon; // 0x5f0
	bool CanSetFlameOnBeacon; // 0x5f1
	bool StartLit; // 0x5f2
	EFlameOfFateType StartingType; // 0x5f3
	FPlayerStat StatToFire; // 0x5f4
	TArray<FBeaconLitWithFlameOfFateStatsToFire> StatMap; // 0x5f8
	UCurveLinearColor* ColourChangeCurveFX; // 0x608
	UCurveLinearColor* ColourChangeCurveLight; // 0x610
	float ExtinguishFadeTime; // 0x618
	FBeaconData BeaconData; // 0x61c
	UParticleSystemComponent* ExtinguishFXComponent; // 0x620
	FObjectMessagingDispatcher EventDispatcher; // 0x628
};

struct UColorBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UOptInDamageableComponent {
	bool EnableDamageFilteringByType; // 0x180
	TArray<UDamagerType*> AllowedDamagers; // 0x188
};

struct UMaterialExpressionParticleColor {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct APuzzleMechanism {
	UInteractableComponent* InteractableComponent; // 0x468
};

struct UAIProjectileWeaponFiringIntentionComponent {
	APawn* PawnOwner; // 0xd0
	AAthenaAIControllerBase* AIController; // 0xd8
	float DefaultHitChance; // 0xfc
};

struct UTradeRouteMapSettings {
	FStringAssetReference TradeRouteLandscapeMapItemDescClass; // 0x38
	FStringAssetReference TradeRoutePortraitMapItemDescClass; // 0x48
	EBlendMode DefaultIslandBlendMode; // 0x58
	FStringAssetReference DefaultPathTexture; // 0x60
	EBlendMode DefaultPathBlendMode; // 0x70
	UMapMarkId* DefaultClueMarkId; // 0x78
	EBlendMode DefaultClueBlendMode; // 0x80
	float DefaultClueScale; // 0x84
};

struct UEnvQueryTest_InsideWorldBounds {
	FAIDataProviderFloatValue Radius; // 0x170
};

struct ULandmarkReactionEventStopParticleSystem {
	FName ComponentName; // 0x38
	int32_t ComponentIndex; // 0x40
	UWwiseEvent* AudioCue; // 0x48
};

struct UPlayerGeneratedMapsContainerComponentDataAsset {
	TArray<FWorldRegionMapping> WorldRegionMappings; // 0x28
	TArray<FName> IslandsToExcludeFromTavernBoardDisplay; // 0x38
};

struct UNPCDialogPredicateHasEmblem {
	FName EmblemName; // 0x38
};

struct UInteractionSettings {
	float MaximumInteractionAngleClient; // 0x28
	float MaximumInteractionAngleServer; // 0x2c
	float MaximumInteractionDistance; // 0x30
	float MaxInteractorsPlayerDistanceDelta; // 0x34
	float MaxInteractorsCenterDistanceDelta; // 0x38
};

struct UMysteriousNoteCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UStatusResponsePlayAudioLoopOnAllClients {
	UWwiseEvent* StartLoopEvent; // 0x30
	UWwiseEvent* StopLoopEvent; // 0x38
};

struct UAbilityTask_WaitTargetData {
	FScriptMulticastDelegate ValidData; // 0x68
	FScriptMulticastDelegate Cancelled; // 0x78
};

struct URowboatAudioComponent {
	URowboatAudioComponentParams* Params; // 0x2b0
	ARowboat* ParentRowboat; // 0x2b8
};

struct UKrakenHeadHitReactAnimationsDataAsset {
	TArray<FKrakenHeadHitReactAnimations> HitReactionAnimations; // 0x28
};

struct UStatSettings {
	FStringAssetReference ConditionalStatsServiceSettingsLocation; // 0x38
};

struct UNamedPointsComponent {
	UNamedPointsCollectionListDataAsset* NamedPointsAsset; // 0xe8
};

struct AModalInteractionProxy {
	UPrimitiveComponent* Mesh; // 0x400
	UInteractableComponent* InteractionRegion; // 0x408
	AModalInteraction* InteractionType; // 0x410
	FText DefaultTooltip; // 0x418
	FText DefaultDisplayName; // 0x450
	UNotificationInputId* NotificationInputId; // 0x488
	EActionDisplayPriority DisplayPriority; // 0x490
};

struct UMaterialExpressionFrac {
	FExpressionInput Input; // 0x70
};

struct AStaticDamageableCargoRunCrateItemProxy {
	UGatedHealthComponent* GatedHealthComponent; // 0x7e8
	UVisualHealthResponseComponent* VisualHealthResponseComponent; // 0x7f0
	ULightWeightStatusEffectManagerComponent* LightweightStatusEffectComponent; // 0x7f8
};

struct UParticleModuleOrbitBase {
	char bUseEmitterTime : 1; // 0x50
};

struct APlaceableReaction {
	TArray<FLandmarkReactionKeyFrame> ReactionEvents; // 0x3d0
	float TriggerRadiusInMetres; // 0x3e0
	USceneComponent* SceneComponent; // 0x3e8
	ALandmarkReactionPlayer* ReactionEventPlayer; // 0x3f0
};

struct ARareMerchantCrateItemInfoMock {
	TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry> FaunaBreedRarity; // 0x710
	AActor* CurrentShip; // 0x778
};

struct UAthenaAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UBTTask_MoveToFailOnDistanceToSeenActors {
	bool FailOnDistanceBeingLess; // 0xb8
	float FailDistance; // 0xbc
};

struct UHitDetectionComponent {
	float MaxTimedSweepWaitTime; // 0xd0
};

struct AShipCustomizationChest {
	USphereComponent* ShipInteractionRadius; // 0x518
	float MaxShipSpeedXY; // 0x520
	bool DisableShipCheckRestrictions; // 0x560
	TArray<FShipCustomizationChestCrewMember> CrewMembersInteracting; // 0x568
};

struct USeaRockDataAsset {
	TArray<FSeaRock> SeaRocks; // 0x28
	TArray<FSeaRock> UnderseaRocks; // 0x38
};

struct UMechanismsSettings {
	UMechanismMaterialMap* MaterialMap; // 0x28
	TArray<FFlamethrowerStatusOverride> GlobalFlamethrowerStatusOverrides; // 0x30
};

struct UFishDataAsset {
	float CruisingDepthBeneathWaterHeight; // 0x28
	float RisingFromTheDepthsSpeed; // 0x2c
	float EscapingToTheDepthsSpeed; // 0x30
	FWeightedProbabilityRangeOfRanges TimeReelingWhenBattlingToSnapLine; // 0x38
	float ReelingCooldownMultiplier; // 0x68
	FWeightedProbabilityRange NumberOfLoopsBeforeBiting; // 0x70
	FWeightedProbabilityRangeOfRanges MinimumDistanceFromPlayer; // 0x90
	float DistanceFromPlayerToCatchFish; // 0xc0
	FFloatRange SecondsToRemainBeforeDespawning; // 0xc4
	float FloatBobDepthOnBeingHooked; // 0xd4
	float RodBendAmountWhenBiting; // 0xd8
	float RodBendAmountWhenBattling; // 0xdc
	float RodBendAmountWhenRecovering; // 0xe0
	UObject* SplashVFXWhenBeingTired; // 0xe8
	UObject* SplashVFXWhenBattling; // 0xf0
	UObject* SplashVFXWhenJumpingOutOfWater; // 0xf8
	UObject* SplashVFXWhenLandingInToWater; // 0x100
	float SplashZOffset; // 0x108
	float FloatReelingMoveSpeedWhenMovingToMinimumDistanceFromPlayer; // 0x10c
	float ReelingAnimationMaxSpeedWhenMovingToMinimumDistanceFromPlayer; // 0x110
	float FloatReelingMoveSpeedWhenBattling; // 0x114
	float ReelingAnimationMaxSpeedWhenBattling; // 0x118
	float FloatReelingMoveSpeedWhenNotBattling; // 0x11c
	float ReelingAnimationMaxSpeedWhenNotBattling; // 0x120
	float TimeBetweenIsBlockedHitChecksOnServer; // 0x124
	float TimeBeforeTurningOnHits; // 0x128
	ECollisionChannel HitTestTraceChannel; // 0x12c
	float HitDetectionHalfExtentXY; // 0x130
	float HitDetectionHalfExtentZ; // 0x134
	float HitDetectionZOffset; // 0x138
	UWwiseObjectPoolWrapper* FishingFishPool; // 0x140
	FName FishTiredSwitchGroup; // 0x148
	FName FishTiredSwitchDefault; // 0x150
	FName FishTiredSwitchTired; // 0x158
	UWwiseEvent* FishBiteAndStruggleStart; // 0x160
	UWwiseEvent* FishBiteAndStruggleStop; // 0x168
	UWwiseEvent* FishJumpOutOfWater; // 0x170
	UWwiseEvent* FishJumpIntoWater; // 0x178
	UForceFeedbackEffect* FishBitingForceFeedback; // 0x180
};

struct UTaleQuestAddChecklistMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableText Title; // 0x88
	FQuestVariableText Description; // 0x98
	FQuestVariableChecklistItemArray Items; // 0xa8
	FQuestVariableText Afternote; // 0xb8
	UChecklistMapLayout* Layout; // 0xc8
};

struct UCharacterAudioFootfallControllerParams {
	FName PlayerSpeedRtpcName; // 0x28
	float MinPlayerSpeedRtpcValue; // 0x30
	float MaxPlayerSpeedRtpcValue; // 0x34
	FName WadingRtpcName; // 0x38
	float MinWadingWwiseRtpcValue; // 0x40
	float MaxWadingWwiseRtpcValue; // 0x44
	FName FootstepSquelchRtpcName; // 0x48
	FName PlayerPerspectiveRtpcName; // 0x50
	float PlayerPerspectiveRtpcValue; // 0x58
	float RemotePlayerPerspectiveRtpcValue; // 0x5c
	UWwiseEvent* FootfallEvent; // 0x60
	UWwiseEvent* FootfallPacingEvent; // 0x68
	UWwiseEvent* CharacterCleanLandEvent; // 0x70
	UWwiseEvent* CharacterJumpEvent; // 0x78
	UWwiseEvent* CharacterSplashEvent; // 0x80
	UWwiseObjectPoolWrapper* FootfallsPool; // 0x88
	FName VerticalSpeedRtpcName; // 0x90
	float MinVerticalSpeedRtpcValue; // 0x98
	float MaxVerticalSpeedRtpcValue; // 0x9c
	FName BrokenLegSwitchGroup; // 0xa0
	FName BrokenLegSwitchBroken; // 0xa8
	FName FootwareCategorySwitchGroup; // 0xb0
	FName FootwareCategoryBoots; // 0xb8
	FName FootwareCategoryBarefoot; // 0xc0
	FName FootwareCategoryPegleg; // 0xc8
	FName FootfallEmoteSwitchGroup; // 0xd0
	FName PlayingEmoteSwitch; // 0xd8
	FName HotFloorSwitchGroup; // 0xe0
	FName HotFloorActive; // 0xe8
	FName FootfallBuriedTreasureRTPCName; // 0xf0
	float DecalOverlapRadius; // 0xf8
	float SteppingOnDecalRTPCValue; // 0xfc
	float NotSteppingOnDecalRTPCValue; // 0x100
};

struct UTaleQuestMakeStructStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UContestMerchantSpawnerComponent {
	TArray<ACompanyShopkeeper*> SpawnedMerchantsArray; // 0xf8
	TArray<FMerchantSpawnData> MerchantSpawnDataArray; // 0x108
};

struct AShipBumperZone {
	bool UseInverseRightVector; // 0x3d0
	UBoxComponent* BumperZoneComponent; // 0x400
	USphereComponent* DistanceRadiusComponent; // 0x408
	bool ApplyAngularImpulse; // 0x410
	float AngularImpulse; // 0x414
	bool OverrideWheelControl; // 0x418
	bool ApplyWheelTurbulence; // 0x419
	float MinWheelTurbulence; // 0x41c
	float MaxWheelTurbulence; // 0x420
};

struct UControllableMock {
	AActor* ActorThatRequestedStateChange; // 0x38
	FText ObjectDisplayName; // 0x40
	FControlObjectActionRuleParams ControlObjectActionRuleParams; // 0x78
	ENetRole Role; // 0x88
	bool HasAController; // 0x89
	bool CanBeControlledByActorValue; // 0x8a
};

struct USequenceComponent {
	FScriptMulticastDelegate CorrectKeyPressedDelegate; // 0xc8
	FScriptMulticastDelegate IncorrectKeyPressedDelegate; // 0xd8
	FScriptMulticastDelegate SequenceCompleteDelegate; // 0xe8
	TArray<int32_t> Sequence; // 0xf8
	bool ResetOnError; // 0x108
	bool SequenceComplete; // 0x109
	TArray<FSequenceResponseContainer> Responses; // 0x110
};

struct UShipRolloverCorrector {
	UCurveFloat* TimeRolledOverVSCorrectiveTorque; // 0x28
	float RollThresholdToConsiderRolledOver; // 0x30
	float HullSubmersedThreshold; // 0x34
};

struct UDrunkenChestComponent {
	UWwiseEvent* OnPickedUpLocalPlayerOnlyEvent; // 0xc8
	UDrunkennessComponent* DrunkennessComponent; // 0xd0
	AActor* Wielder; // 0xd8
	float TargetDrunkenness; // 0xe0
};

struct UTextureProxy {
	UTexture* Texture; // 0x138
};

struct AHumanoidActionStateCreatorDefinition {
	FDebugSuperSailorActionStateParams DebugSuperSailorParams; // 0x3d0
	FControlWheelActionStateParams ControlWheelParams; // 0x3e0
	FControlCapstanArmActionStateParams ControlCapstanArmParams; // 0x414
	FControlPulleyActionStateParams ControlPulleyParams; // 0x448
	FUseLadderActionStateParams UseLadderParams; // 0x47c
	FClamberActionStateParams ClamberParams; // 0x4c8
	FUseCannonActionStateParams UseCannonParams; // 0x4f8
	FUseMountedWeaponActionStateParams UseHarpoonLauncherParams; // 0x558
	FUseMapTableActionStateParams UseMapTableParams; // 0x5b0
	FLinearTransitionLadderActionStateParams OffBottomTransitionLadderParams; // 0x5cc
	FLinearTransitionLadderActionStateParams OnBottomTransitionLadderParams; // 0x5e0
	FSplineTransitionLadderActionStateParams OffTopTransitionLadderParams; // 0x5f4
	FSplineTransitionLadderActionStateParams OnTopTransitionLadderParams; // 0x604
	FTeleportActionStateParams TeleportParams; // 0x614
	FWaitingToSpawnActionStateParams WaitingToSpawnParams; // 0x640
	FRepairObjectActionStateParams RepairObjectParams; // 0x654
	FUndoRepairActionStateParams UndoRepairParams; // 0x658
	FUseItemActionStateParams UseItemParams; // 0x65c
	FDeadActionStateParams DeadParams; // 0x660
	FRevivedActionStateParams PostReviveParameters; // 0x6b8
	FHideInObjectActionStateParams HideInObjectParams; // 0x6c8
	FLeaveGhostShipActionStateParams LeaveGhostShipParams; // 0x6f0
	FShovelDigActionStateParams ShovelDigParams; // 0x718
	FMigrationActionStateParams MigrationParams; // 0x728
	FFiredFromActorActionStateParams FiredFromCannonParams; // 0x72c
	FFiredFromActorActionStateParams LaunchedFromKrakenParams; // 0x754
	FFiredFromActorActionStateParams LaunchedFromGeyserParams; // 0x77c
	FWaitForDemoResetActionStateParams WaitForDemoResetParams; // 0x7a4
	FWaterBarrelActionStateParams WaterBarrelParams; // 0x7a8
	FDockableCutsceneActionStateParams DockableCutsceneParams; // 0x7dc
	FDockableBaseActionStateParams DockableBaseParams; // 0x810
	FPlayDockableKeyedInstrumentActionStateParams DockableMusicalInstrumentParams; // 0x844
	FControlObjectActionStateParams TavernPianoParams; // 0x860
	FCapturedByKrakenActionStateParams CapturedByKrakenParams; // 0x878
	FIngestedByKrakenActionStateParams IngestedByKrakenParams; // 0x8b8
	FSwallowedByKrakenActionStateParams SwallowedByKrakenParams; // 0x8bc
	FLinearTransitionActionStateParams LinearTransitionParams; // 0x8c4
	FWaterSlideActionStateParams WaterSlideParams; // 0x8d8
	FEnterTunnelOfTheDamnedActionStateParams EnterTunnelOfTheDamnedParams; // 0x8fc
	FEjectFromTunnelOfTheDamnedActionStateParams EjectFromTunnelOfTheDamnedParams; // 0x91c
	FExitTunnelOfTheDamnedActionStateParams ExitTunnelOfTheDamnedParams; // 0x93c
};

struct UMovieSceneCapture {
	FCaptureProtocolID CaptureType; // 0x38
	UMovieSceneCaptureProtocolSettings* ProtocolSettings; // 0x40
	FMovieSceneCaptureSettings Settings; // 0x48
	bool bUseSeparateProcess; // 0x98
	bool bCloseEditorWhenCaptureStarts; // 0x99
	FString AdditionalCommandLineArguments; // 0xa0
	FString InheritedCommandLineArguments; // 0xb0
};

struct UAggressiveGhostShipBannerDataAsset {
	UAggressiveGhostShipNamesDataAsset* Header; // 0x28
	UAggressiveGhostShipNamesDataAsset* Footer; // 0x30
	FName Tag; // 0x38
	bool DisableMusic; // 0x40
};

struct UScreenSpaceVfxComponent {
	UScreenSpaceVFXComponentParams* Params; // 0xc8
	TArray<UParticleSystemComponent*> ScreenSpaceParticleSystems; // 0xd8
};

struct APawn {
	char bUseControllerRotationPitch : 1; // 0x3d8
	char bUseControllerRotationYaw : 1; // 0x3d8
	char bUseControllerRotationRoll : 1; // 0x3d8
	char bCanAffectNavigationGeneration : 1; // 0x3d8
	float BaseEyeHeight; // 0x3dc
	EAutoReceiveInput AutoPossessPlayer; // 0x3e0
	EAutoPossessAI AutoPossessAI; // 0x3e1
	AController* AIControllerClass; // 0x3e8
	APlayerState* PlayerState; // 0x3f0
	char RemoteViewPitch; // 0x3f8
	AController* LastHitBy; // 0x400
	AController* Controller; // 0x408
	FVector ControlInputVector; // 0x428
	FVector LastControlInputVector; // 0x434
};

struct UVoyageModuleSettings {
	FStringAssetReference QuestsConfigAsset; // 0x38
	TArray<FEmergentVoyageSourceIconInfo> EmergentVoyageIconInfos; // 0x48
	int32_t NumVoyagesInAntiRepetitionHistory; // 0x58
};

struct ARomeBeacon {
	USceneComponent* BeaconRoot; // 0x3d8
	UStaticMeshComponent* RibbonComponent; // 0x3e0
	UStaticMeshComponent* UpperHalfRibbonComponent; // 0x3e8
	UStaticMeshComponent* LowerHalfRibbonComponent; // 0x3f0
	UStaticMeshComponent* TendrilComponent; // 0x3f8
	UStaticMeshComponent* BeamComponent; // 0x400
	bool EnableBend; // 0x410
	float MinDistFromPlayerToScale; // 0x414
	float MaxDistFromPlayerToScale; // 0x418
	float MinBeamScale; // 0x41c
	float MaxBeamScale; // 0x420
	float MarkerPositionBlendSpeed; // 0x424
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x428
	TArray<FRomeBeaconVelocityMap> VelocityMap; // 0x438
	float FallbackVelocity; // 0x448
	float MaxOffset; // 0x44c
	float MinRibbonScale; // 0x450
	float MaxRibbonScale; // 0x454
	float RibbonBlendTime; // 0x458
	float BeamBlendTime; // 0x45c
	float StartBlendVal; // 0x460
	float EndBlendVal; // 0x464
	UArenaWorldMarker* MarkerDataObject; // 0x4a0
};

struct AWaterPuzzleAlterationMechanismAction {
	bool ShouldDrain; // 0x570
	AActor* PuzzleActor; // 0x578
	float WaterReactionDelay; // 0x580
	int32_t WaterLevelCapacity; // 0x584
	float MinimumMouthOpenDuration; // 0x588
	UWaterPuzzleAlterationMechanismAudioParams* AlterationMechanismAudioParams; // 0x598
	USceneComponent* MouthSFXPosition; // 0x5a0
	FWwiseEmitter MouthSFXEmitter; // 0x5a8
	FWwiseEmitter SplashSFXEmitter; // 0x5c8
	UWaterSpoutVFXComponent* WaterSpoutComponent; // 0x5e8
	UStoneFaceGlowComponent* GlowComponent; // 0x5f0
};

struct UMaterialExpressionSceneColor {
	EMaterialSceneAttributeInputMode InputMode; // 0x70
	FExpressionInput Input; // 0x78
	FExpressionInput OffsetFraction; // 0xb0
	FVector2D ConstInput; // 0xe8
};

struct UTaleQuestSpawnLootItemInClueSiteStepDesc {
	FQuestVariableClass LootItem; // 0x80
	FQuestVariableClueSite ClueSite; // 0x90
	FQuestVariableItemInfo SpawnedLootItem; // 0xa0
	bool Tracked; // 0xb0
};

struct ULocationMapParams {
	TArray<FLocationMapBannerParams> BannerParams; // 0x28
	UMapMarkId* ChestMarkId; // 0x38
	float ChestScale; // 0x40
	TArray<UMapMarkId*> CrossTextures; // 0x48
	float CrossScale; // 0x58
	FVector2D VaultSymbolCanvasOffset; // 0x5c
	float VaultSymbolScale; // 0x64
};

struct USpawnBarrelsOfPlentyStepDesc {
	FQuestVariableVector LocatorVar; // 0x80
};

struct AMusicZoneService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UNPCDialogPredicateIntEquals {
	FName ParameterName; // 0x38
	int32_t Value; // 0x40
};

struct ASimpleAnimatedMechanismActionProxy {
	ESimpleAnimatedMechanismActionMode Mode; // 0x400
	bool AlwaysActive; // 0x401
	bool OnlyAnimateWhenActive; // 0x402
	bool OverrideAudioEmitterPool; // 0x403
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0x408
};

struct UBTTask_DetachFromHangout {
	float TaskDuration; // 0x88
};

struct UBTService_PlayCustomMontageId {
	FCustomAnimationMontageId CustomAnimationMontageId; // 0x70
};

struct UCosmeticItemAnimationComponent {
	TMap<USkeletalMeshComponent*, FCosmeticItems> CosmeticItems; // 0xd0
	UCosmeticItemAnimationDataAsset* DataAsset; // 0x120
};

struct AKrakenShipWrappingTentacle {
	USceneComponent* SceneRoot; // 0x508
	UStaticMeshComponent* TentacleCollisions; // 0x510
	UStaticMeshComponent* TentacleMesh; // 0x518
	UBoxComponent* DamageZone; // 0x520
	USceneComponent* InteractableBlockingRegions; // 0x528
	USceneComponent* KnockbackRegions; // 0x530
	UBoxComponent* TentacleHeadCollisions; // 0x538
	USceneComponent* TentacleHeadKnockbackRegions; // 0x540
	UKrakenShipWrappingTentacleAIAudioComponent* AudioComponent; // 0x548
	UStaticMesh* LowDetailTentacleMesh; // 0x550
	FStringAssetReference HighDetailTentacleMeshAsset; // 0x558
	FKrakenShipWrappingTentacleParams Params; // 0x568
	UMaterialInstanceDynamic* TentacleDynamicMaterialInstance; // 0x658
	UStaticMesh* HighDetailTentacleMesh; // 0x660
	FKrakenShipWrappingTentacleAnimationState CurrentServerAnimationState; // 0x668
	FKrakenShipWrappingTentacleAnimationState PendingServerAnimationState; // 0x678
};

struct UBaitItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UIsActorTypeStatCondition {
	TArray<UObject*> TargetActorClasses; // 0x30
};

struct AStaticCargoRunCrateItemProxy {
	UCargoRunCrateComponent* CargoRunCrateComponent; // 0x7d8
	UNPCDialogComponent* NPCDialogComponent; // 0x7e0
};

struct UCanvasRenderTarget2D {
	FScriptMulticastDelegate OnCanvasRenderTargetUpdate; // 0x168
	TWeakObjectPtr<UWorld> World; // 0x178
};

struct UOceanCrawlerAnimationData {
	FOceanCrawlerAnimationDataStructure OceanCrawlerAnimationDataStructure; // 0x28
};

struct UCollectorsChestShipOwnershipPropagationComponent {
	TWeakObjectPtr<AActor> ItemProxy; // 0xc8
};

struct ARigidBodyBase {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UActorChannel {
	AActor* Actor; // 0x68
	TArray<UObject*> ObjectsRequiredForQueuedBunches; // 0x158
};

struct UNotificationMessagesDataAsset {
	TArray<FText> NotificationMessages; // 0x28
};

struct UInputBinder {
	UInputComponent* InputComponent; // 0x28
};

struct UTaleQuestAddRiddleMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AWoodPlank {
	UInventoryItemComponent* InventoryItem; // 0x798
	UConsumableWieldableComponent* ConsumableWieldable; // 0x7a0
};

struct UAIResource_Logic {
	int32_t ManualResourceID; // 0x28
	char bManuallySetID : 1; // 0x30
};

struct ASpawnContextProviderZone {
	TArray<FName> SpawnContextIDs; // 0x3d0
	UBoxComponent* BoundingBox; // 0x3e0
};

struct ADynamicOnlySwitchMechanismTrigger {
	USceneComponent* Root; // 0x410
	USceneComponent* Pivot; // 0x418
	UMechanismTriggerComponent* MechanismTriggerComponent; // 0x420
	bool ShowSwitchInteractionPrompt; // 0x428
	FText SwitchInteractionPromptText; // 0x430
	FText SwitchNameText; // 0x468
	bool SyncToConnectedActionStateOnChange; // 0x4a0
	bool DisableWhenActivated; // 0x4a1
	bool AutoDeactivateAfterActivation; // 0x4a2
	float TimeAfterActivationBeforeAutoDeactivating; // 0x4a4
	bool SelectRandomStartPositionOnSpawn; // 0x4a8
	ESwitchMechanismTriggerRandomSelectionMode RandomStartPositionSelectionMode; // 0x4a9
	int32_t FixedStartPositionIndex; // 0x4ac
	UCurveFloat* PositionTransitionCurve; // 0x4b0
	TArray<FSwitchMechanismTriggerPosition> Positions; // 0x4b8
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0x4c8
	UMechanismMaterialGroup* MaterialGroup; // 0x4d0
	int32_t CurrentPositionIndex; // 0x4d8
};

struct UMovieSceneBindingOverrides {
	TArray<FMovieSceneBindingOverrideData> BindingData; // 0x30
};

struct URig {
	TArray<FTransformBase> TransformBases; // 0x28
	TArray<FNode> Nodes; // 0x38
};

struct USkinnedMeshComponent {
	USkeletalMesh* SkeletalMesh; // 0x598
	TWeakObjectPtr<USkinnedMeshComponent> MasterPoseComponent; // 0x5a0
	UMaterialInterface* CustomDepthMaterial; // 0x5e8
	char bUseBoundsFromMasterPoseComponent : 1; // 0x600
	TArray<FActiveVertexAnim> ActiveVertexAnims; // 0x608
	UPhysicsAsset* PhysicsAssetOverride; // 0x618
	int32_t ForcedLodModel; // 0x620
	int32_t MinLodModel; // 0x624
	int32_t PredictedLODLevel; // 0x628
	int32_t OldPredictedLODLevel; // 0x62c
	float MaxDistanceFactor; // 0x630
	TArray<FSkelMeshComponentLODInfo> LODInfo; // 0x638
	float StreamingDistanceMultiplier; // 0x648
	FColor WireframeColor; // 0x64c
	char bForceWireframe : 1; // 0x650
	char bDisplayBones : 1; // 0x650
	char bDisplayBoneCollisions : 1; // 0x650
	char bDisableMorphTarget : 1; // 0x650
	char bHideSkin : 1; // 0x650
	char bPerBoneMotionBlur : 1; // 0x668
	char bComponentUseFixedSkelBounds : 1; // 0x668
	char bConsiderAllBodiesForBounds : 1; // 0x668
	EMeshComponentUpdateFlag MeshComponentUpdateFlag; // 0x66c
	char bForceMeshObjectUpdate : 1; // 0x670
	char bChartDistanceFactor : 1; // 0x670
	char bCanHighlightSelectedSections : 1; // 0x670
	char bRecentlyRendered : 1; // 0x670
	float ProgressiveDrawingFraction; // 0x674
	char CustomSortAlternateIndexMode; // 0x678
	FBoxSphereBounds CachedLocalBounds; // 0x68c
	bool bCachedLocalBoundsUpToDate; // 0x6a8
	bool bEnableUpdateRateOptimizations; // 0x6a9
	bool bDisplayDebugUpdateRateOptimizations; // 0x6aa
};

struct ADebugWindService {
	AWindDirectionalSource* GlobalWindSource; // 0x3e0
	float CurrentWindAngle; // 0x3f8
	float CurrentWindMagnitude; // 0x3fc
	TArray<TScriptInterface<Class>> WindZones; // 0x4e8
};

struct UTaleVaultService {
	APuzzleVault* Vault; // 0x60
	UVaultPuzzleDataAsset* SolutionAsset; // 0x68
};

struct UBTDecorator_IsActorInExpectedActionState {
	UActionStateId* ExpectedActionState; // 0x68
	EActionStateMachineTrackId ExpectedTrackId; // 0x70
};

struct UBreakpoint {
	char bEnabled : 1; // 0x28
	UEdGraphNode* Node; // 0x30
	char bStepOnce : 1; // 0x38
	char bStepOnce_WasPreviouslyDisabled : 1; // 0x38
	char bStepOnce_RemoveAfterHit : 1; // 0x38
};

struct UWwiseEmitterComponent {
	FWwiseEmitter Emitter; // 0x2b8
	UWwiseObjectPoolWrapper* WwiseObjectPoolWrapper; // 0x2d8
};

struct UCustomAnimationMontageComponent {
	FCustomAnimationMontageComponentReplicatedData ReplicatedData; // 0xd0
};

struct AWorldSettings {
	char bEnableWorldBoundsChecks : 1; // 0x3d8
	char bEnableNavigationSystem : 1; // 0x3d8
	EWorldCompositionSetting WorldCompositionSetting; // 0x3dc
	FStringAssetReference InstancedNavMeshesDataAssetOveride; // 0x3e0
	char bEnableWorldOriginRebasing : 1; // 0x3f0
	char bWorldGravitySet : 1; // 0x3f0
	char bGlobalGravitySet : 1; // 0x3f0
	float KillZ; // 0x3f4
	UDamageType* KillZDamageType; // 0x3f8
	float GlobalGravityZ; // 0x400
	ADefaultPhysicsVolume* DefaultPhysicsVolumeClass; // 0x408
	UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x410
	AGameMode* DefaultGameMode; // 0x418
	TArray<FGameModePrefix> DefaultMapPrefixes; // 0x420
	AGameNetworkManager* GameNetworkManagerClass; // 0x430
	int32_t PackedLightAndShadowMapTextureSize; // 0x438
	char bMinimizeBSPSections : 1; // 0x43c
	FVector DefaultColorScale; // 0x440
	char bPrecomputeVisibility : 1; // 0x44c
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x44c
	int32_t VisibilityCellSize; // 0x450
	EVisibilityAggressiveness VisibilityAggressiveness; // 0x454
	char bForceNoPrecomputedLighting : 1; // 0x458
	FLightmassWorldInfoSettings LightmassSettings; // 0x45c
	ELightingBuildQuality LevelLightingQuality; // 0x4a0
	FReverbSettings DefaultReverbSettings; // 0x4a8
	FInteriorSettings DefaultAmbientZoneSettings; // 0x4c0
	USoundMix* DefaultBaseSoundMix; // 0x4e8
	float WorldToMeters; // 0x4f0
	UBookMark* BookMarks[0xa]; // 0x4f8
	float TimeDilation; // 0x548
	float MatineeTimeDilation; // 0x54c
	float DemoPlayTimeDilation; // 0x550
	char bHighPriorityLoading : 1; // 0x554
	char bHighPriorityLoadingLocal : 1; // 0x554
	TArray<FNetViewer> ReplicationViewers; // 0x558
	TArray<UAssetUserData*> AssetUserData; // 0x568
	float WorldGravityZ; // 0x578
	APlayerState* Pauser; // 0x580
};

struct UEnvQueryTest_InsideTinySharkExperience {
	float BufferRadius; // 0x170
};

struct APet {
	UPetWieldableReactMappingsDataAsset* WieldableReactMappingsAsset; // 0x898
	float MaxVelocityForLocomotionAnimation; // 0x8a0
	bool CanFly; // 0x8a4
	TArray<FPetFlyingStrategyProperties> FlyingStrategyProperties; // 0x8a8
	float FlyingLandTime; // 0x8b8
	UCurveFloat* FlyingLandCurve; // 0x8c0
	float FlyingTakeOffTime; // 0x8c8
	UCurveFloat* FlyingTakeOffCurve; // 0x8d0
	FFloatRange MidFlightAdjustmentTimerRange; // 0x8d8
	UCurveFloat* MidFlightAdjustmentCurve; // 0x8e8
	UCurveFloat* MidFlightTimeToDistanceAdjustmentCurve; // 0x8f0
	FName FiredFromActorCollision; // 0x8f8
	UWwiseEvent* FiredFromActorSFX; // 0x900
	UPetDitherComponent* DitherComponent; // 0x908
	float MinimumDamageForHealthReact; // 0x910
	float MaxDistForWaterBucketToClean; // 0x914
	float MinimumDurationUntilPetCanDespawnConcealed; // 0x918
	float DefaultNamePlateHeight; // 0x91c
	float AlternateNamePlateHeight; // 0x920
	TArray<EAthenaAnimationPetRoamingState> StatesToUseAlternateNamePlatePos; // 0x928
	FFloatRange PetTimeSpentSad; // 0x938
	EDebugPetStateDescriptor DebugStateDescriptor; // 0x948
	UAINameplateComponent* AINameplateComponent; // 0x950
	UFeedingComponent* FeedingComponent; // 0x958
	UStarvingComponent* StarvingComponent; // 0x960
	UCleanlinessComponent* CleanlinessComponent; // 0x968
	UCannonSquashComponent* CannonSquashComponent; // 0x970
	FPetMovementRequest ReplicatedMovementRequest; // 0x978
	float TargetMeshRoll; // 0x984
	float DefaultShipTurnRateModifier; // 0x998
	TArray<FPetTurnRateModifier> TurnRateModifierList; // 0x9a0
	TArray<EAthenaAnimationPetRoamingState> LocomotingMovementStates; // 0x9b0
	TArray<EAthenaAnimationPetRoamingState> RequestIdleOrMovementValidMovementStates; // 0x9c0
	float MaxRollAngle; // 0x9d0
	float DelayForDisablingMovementOnIdle; // 0x9d4
	float IslandDustRatePerSecond; // 0x9d8
	FGuid CrewId; // 0x9dc
	bool InHangout; // 0x9ec
	bool PerchedInHangout; // 0x9ed
	bool ResetRollAndZOffset; // 0x9ee
	bool ShouldIgnoreTooltipDisplayOffset; // 0x9ef
	FPetTurnToFaceData PetTurnToFaceData; // 0x9f0
	UAIPartsRetrievalComponent* AIPartsRetrievalComponent; // 0xa28
	UPetPartCustomisationComponent* PetPartCustomisationComponent; // 0xa30
	ULightWeightStatusEffectManagerComponent* LightWeightStatusEffectManagerComponent; // 0xa38
	UPetTelemetryComponent* TelemetryComponent; // 0xa40
	UPetSicknessComponent* SicknessComponent; // 0xa48
	UWaterExposureComponent* WaterExposureComponent; // 0xa50
	UAnimationDataStoreComponent* AnimationDataStoreComponent; // 0xa58
	AActor* SpawnedForShip; // 0xa60
	AActor* PetOwner; // 0xa68
	AItemInfo* PetInfo; // 0xa70
	FDocker Docker; // 0xa80
	FStartPickupObjectActionRuleParams StartPickupObjectActionRuleParams; // 0xad0
	UParticleSystemComponent* CurrentlyPlayingParticleSystem; // 0xaf0
	UAIStrategyId* LandingStrategy; // 0xaf8
	UAIStrategyId* PursuitStrategy; // 0xb00
	float DefaultRollLerpTime; // 0xb08
	float LandingRollLerpTime; // 0xb0c
	bool IsBeingDismissed; // 0xb10
	bool IsInDisabledPetPerchHangout; // 0xbfc
	bool PetIsSad; // 0xbfd
};

struct UNPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset {
	TArray<FNPCOnSurfaceCannonManagerCrewSizeSettings> CrewSizeSettings; // 0x28
};

struct UAshenLordAshCloudSetupDataAsset {
	FWeightedProbabilityRangeOfRanges AshCloudRadiusInMetres; // 0x28
	float AshCloudHeightCoefficient; // 0x58
	FWeightedProbabilityRangeOfRanges AshCloudLifetime; // 0x60
	UCurveFloat* ScaleUpSpeedCurve; // 0x90
	UCurveFloat* DissipationCurve; // 0x98
};

struct UTaleQuestSpawnWashedUpMessageInABottleClueStepDesc {
	FQuestVariableClueSite ClueSite; // 0x80
	FQuestVariableClueDescriptor ClueDescriptor; // 0x90
	FQuestVariableActor MessageInABottle; // 0xa0
};

struct UGameplayEffectExtension {
	TArray<FGameplayAttribute> RelevantSourceAttributes; // 0x28
	TArray<FGameplayAttribute> RelevantTargetAttributes; // 0x38
};

struct UWaitForTunnelOfTheDamnedMigrationTaleQuestStep {
	UWaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc* Desc; // 0x90
};

struct USphereCollisionExtentAdjustOverTimeComponent {
	bool ShouldAdjustSphereRadius; // 0x108
	float PostAdjustmentSphereRadius; // 0x10c
	float ServerSizeScale; // 0x110
	USphereComponent* SphereCollisionToAdjust; // 0x118
};

struct UPlayerGeneratedMapsContainerComponent {
	FText ContainerDisplayName; // 0xd0
	FTransform InstanceTransform; // 0x110
	UItemDesc* MapDesc; // 0x140
	UPlayerGeneratedMapsContainerComponentDataAsset* ContainerDataAsset; // 0x148
	TArray<FPlayerGeneratedMapDisplayData> PlayerMapInventory; // 0x150
	TArray<FPlayerGeneratedMapDisplayData> StoreMapInventory; // 0x160
	UWwiseEvent* AddMapSFX; // 0x170
	UWwiseEvent* TakeMapSFX; // 0x178
	UWwiseEvent* OpenContainerSFX; // 0x180
	int32_t MaxNumStoreMapsToReplicate; // 0x188
	int32_t MaxNumPlayerMapsToReplicate; // 0x18c
	int32_t DailyMapLimit; // 0x190
	FStringAssetReference MapTakenBackgroundImage; // 0x198
	TArray<FStringAssetReference> MapTakenImages; // 0x1a8
	TArray<AActor*> ServerAttachedPlayers; // 0x1b8
	UWwiseObjectPoolWrapper* SfxPool; // 0x1c8
};

struct UParticleModuleVelocityBase {
	char bInWorldSpace : 1; // 0x50
	char bApplyOwnerScale : 1; // 0x50
};

struct UWieldedItemNamedContextualOpenRadialAction {
	TArray<FContextAction> RadialContexts; // 0x30
	URadialCreationRuleAsset* CanExecuteRadial; // 0x40
};

struct UBookMark {
	FVector Location; // 0x28
	FRotator Rotation; // 0x34
	TArray<FString> HiddenLevels; // 0x40
};

struct URegionalAssetCache {
	TMap<UObject*, FStringAssetReference> RegionAssetLists; // 0x30
	UObject* CurrentRegionKey; // 0x80
};

struct ATavernStepsTrigger {
	TArray<FLandmarkReactionKeyFrame> ReactionEventsOpen; // 0x3d0
	TArray<FLandmarkReactionKeyFrame> ReactionEventsCancel; // 0x3e0
	float ShantyDelayBeforeStepsOpen; // 0x3f0
	USceneComponent* CollisionRoot; // 0x3f8
	USphereComponent* StepsListenerTriggerComponent; // 0x400
	USphereComponent* PlayersInTavernTriggerComponent; // 0x408
	UWorldRegionComponent* ShantyWorldRegionComponent; // 0x410
	UWwiseEvent* PlayMagicEvent; // 0x418
	UWwiseEvent* StopMagicEvent; // 0x420
	FWwiseEmitter ShantyMagicEmitter; // 0x428
	ALandmarkReactionPlayer* ReactionEventPlayerOpen; // 0x448
	UAnimatedStepsComponent* AnimatedSteps; // 0x450
	EStepsTriggerState StepsState; // 0x458
	TArray<AActor*> ActorsPlayingInstruments; // 0x460
};

struct UBuriedTreasureDataAsset {
	TArray<FVector> Locations; // 0x28
};

struct ASkeletonActionStateCreatorDefinition {
	FAISpawnActionStateParams AISpawnParams; // 0x3d0
	FAIDeadActionStateParams AIDeadParams; // 0x3e0
	FUseItemActionStateParams UseItemParams; // 0x3e4
	FUseCannonActionStateParams UseCannonParams; // 0x3e8
	FRepairObjectActionStateParams RepairObjectParams; // 0x448
	FControlObjectActionStateParams ControlObjectParams; // 0x44c
	FHiddenActionStateParams HiddenStateParams; // 0x464
};

struct ADebugStatusTicketHolder {
	AActor* StatusRecipient; // 0x3d0
};

struct UWaitOnCollectableQuestObjectStepDesc {
	FQuestVariableActor CollectableActor; // 0x80
	FQuestVariablePlayerActor CollectingPlayerActor; // 0x90
};

struct UBTTask_SetBlackboardActor {
	AActor* Actor; // 0x88
};

struct UAIAmmoTypeList {
	TArray<UAthenaAIAmmoDataAsset*> AllAmmo; // 0x28
	UAthenaAIAmmoDataAsset* DefaultAmmo; // 0x38
};

struct UGlintComponent {
	UGlintComponentDataAsset* GlintComponentDataAsset; // 0x5f0
	TArray<AActor*> CurrentEnteredShips; // 0x5f8
	FGlintVisibilityLock GlintVisibilityLock; // 0x608
};

struct ARareHUD {
	FColor WhiteColor; // 0x3d0
	FColor GreenColor; // 0x3d4
	FColor RedColor; // 0x3d8
	APlayerController* PlayerOwner; // 0x3e0
	char bLostFocusPaused : 1; // 0x3e8
	char bShowHUD : 1; // 0x3e8
	char bShowDebugInfo : 1; // 0x3e8
	char bShowHitBoxDebugInfo : 1; // 0x3e8
	char bShowOverlays : 1; // 0x3e8
	char bEnableDebugTextShadow : 1; // 0x3e8
	TArray<AActor*> PostRenderedActors; // 0x3f0
	float LastHUDRenderTime; // 0x400
	float RenderDelta; // 0x404
	TArray<FName> DebugDisplay; // 0x408
	TArray<FName> ToggledDebugCategories; // 0x418
	UCanvas* Canvas; // 0x428
	UCanvas* DebugCanvas; // 0x430
	TArray<FDebugTextInfo> DebugTextList; // 0x438
	AActor* ShowDebugTargetDesiredClass; // 0x448
	AActor* ShowDebugTargetActor; // 0x450
};

struct ATavernBoard {
	UStaticMeshComponent* Mesh; // 0x468
	UInteractableComponent* InteractionRegion; // 0x470
	UBoxComponent* ContextualTutorialOverlap; // 0x478
};

struct USetMechanismActivationModeStepDesc {
	FQuestVariableActor Action; // 0x80
	EMechanismActionActivationMode ActivationMode; // 0x90
};

struct URiddleTextPhrasebookDataAsset {
	TArray<FRiddleTextPhrasebookEntry> Phrases; // 0x28
};

struct AStrongholdKeyProxy {
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x630
	UBoxComponent* BaseComponent; // 0x650
	FNetTimeStampCalculator MovementTimeStamp; // 0x688
	AActor* TutorialOwner; // 0x6f8
	bool IsTutorialProxy; // 0x700
	FReplicatedPhysicsState ReplicatedPhysicsState; // 0x708
	bool ForceKeepTickActive; // 0x758
	ECollisionChannel CachedAutoAimCollisionChannel; // 0x788
	ECollisionResponse CachedVehicleCollisionResponse; // 0x789
};

struct UContestVoyagesDataAsset {
	TArray<FContestVoyageInfo> Contests; // 0x28
	TArray<FTallTaleContestInfo> TallTaleContests; // 0x38
};

struct UMaterialParameterBlendBase {
	UMaterialInstanceDynamic* DynamicMaterial; // 0x38
	FName ParameterName; // 0x40
	FActorComponentSelector Mesh; // 0x48
	int32_t MaterialIndex; // 0x58
};

struct UDrawSphereComponent {
	float SphereRadius; // 0x5a8
};

struct UAthenaInputSettings {
	TArray<FName> AllowedInvertedYAxis; // 0x28
	TArray<FName> AllowedInvertedXAxis; // 0x38
	TArray<FName> AllowedInvertedCombinedAxis; // 0x48
	float RadialSelectionTimeout; // 0x58
	float RadialSelectionMagnitudeThreshold; // 0x5c
	float TimeToBlockInputsAfterRadialDeactivation; // 0x60
	float MinDeflectionToBlockInputsAfterRadialDeactivation; // 0x64
	float MinRadialSectorUnselectableFraction; // 0x68
	float MaxRadialSectorUnselectableFraction; // 0x6c
	float RadialActivationThreshold; // 0x70
	float RadialFastItemSwitchGracePeriod; // 0x74
	TArray<FActionMappingKeyLookupFallback> ActionMappingKeyLookupFallbacks; // 0x78
	TArray<FVirtualActionBindingDefinition> VirtualActionBindingDefinitions; // 0x88
	TArray<FVirtualAxisBindingDefinition> VirtualAxisBindingDefinitions; // 0x98
	float MouseSensitivityMin; // 0xa8
	float MouseSensitivityMax; // 0xac
	float ControllerSensitivityMin; // 0xb0
	float ControllerSensitivityMax; // 0xb4
	float ControllerDeadzoneMin; // 0xb8
	float ControllerDeadzoneMax; // 0xbc
	float ControllerNonLinearityMin; // 0xc0
	float ControllerNonLinearityMax; // 0xc4
	FSingleStickMapping SingleStickOffMappings; // 0xc8
	FSingleStickSettings SingleStickOffSettings; // 0x118
	FSingleStickMapping SingleStickLeftLookMappings; // 0x138
	FSingleStickMapping SingleStickRightLookMappings; // 0x188
	FSingleStickMapping SingleStickLeftMoveMappings; // 0x1d8
	FSingleStickMapping SingleStickRightMoveMappings; // 0x228
	FSingleStickMapping SingleStickLeftHybridMappings; // 0x278
	FSingleStickMapping SingleStickRightHybridMappings; // 0x2c8
	FSingleStickSettings SingleStickOnSettings; // 0x318
};

struct APlaceableReactionMechanismAction {
	UMechanismActionComponent* MechanismActionComponent; // 0x3f8
	float Delay; // 0x400
	bool LoopReactionsWhileActive; // 0x404
	FFloatRange DelayBetweenLoops; // 0x408
};

struct UParticleModuleSpawnBase {
	char bProcessSpawnRate : 1; // 0x50
	char bProcessBurstList : 1; // 0x50
};

struct AClueSiteCircleMapWieldable {
	UTexture2D* InventoryRadialBackgroundTexture; // 0x840
	FMapRadialIconData MapRadialIconData; // 0x860
};

struct ABucket {
	UInventoryItemComponent* InventoryItem; // 0x798
	TArray<FBucketContentsInfo> BucketContentsInfos; // 0x7a0
	UWwiseEvent* ScoopSfx; // 0x7b0
	FName ThrowSocketName; // 0x7b8
	FName DrenchWielderSocketName; // 0x7c0
	float ScoopActionTime; // 0x7c8
	float ScoopCompleteTime; // 0x7cc
	float ThrowActionTime; // 0x7d0
	float ThrowCompleteTime; // 0x7d4
	float DrenchWielderActionTime; // 0x7d8
	float DrenchWielderCompleteTime; // 0x7dc
	float RequestToleranceTimeOnServer; // 0x7e0
	float ProjectileSpeed; // 0x7e4
	float ProjectileAdditionalLiftAngle; // 0x7e8
	float WaterFillFromShip; // 0x7ec
	float WaterFillFromSea; // 0x7f0
	float WaterTransferFillAmountModifier; // 0x7f4
	float ScoopBufferDistance; // 0x7f8
	ECollisionChannel ScoopHitTestTraceChannel; // 0x7fc
	UWieldableItemCooldownBaseType* BucketScoopCooldownType; // 0x800
	UWieldableItemCooldownBaseType* BucketThrowCooldownType; // 0x808
	UWieldableItemCooldownBaseType* BucketDouseCooldownType; // 0x810
	float ThrowLiquidAINoiseRange; // 0x818
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x820
	ULiquidContainerComponent* LiquidContainer; // 0x828
	FLiquidContents Contents; // 0x830
	EThrowableLiquidType FillState; // 0x871
	UParticleSystemComponent* BucketContentsEffect; // 0x8e8
};

struct UEventBroadcastStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UPlayerAtmosphericsAudioComponentParams {
	UWwiseEvent* WindStartEvent; // 0x28
	UWwiseEvent* WindStopEvent; // 0x30
	UWwiseEvent* RainStartEvent; // 0x38
	UWwiseEvent* RainStopEvent; // 0x40
	FName GlobalWindSpeedRtpc; // 0x48
	FName PlayerWindAngleRtpc; // 0x50
	FName PlayerVerticalSpeedRtpc; // 0x58
	FName AtmosphericPressureFreqRtpc; // 0x60
	FName AtmosphericPressureVolRtpc; // 0x68
	float AtmosphericPressureFreqTimebase; // 0x70
	float AtmosphericPressureVolTimebase; // 0x74
	TArray<FPoolDensityData> PoolDensityWrapperData; // 0x78
};

struct UMurkWaterModifierZoneComponent {
	float MaximumInnerRadius; // 0x338
	float MaximumOuterRadius; // 0x33c
	UCurveFloat* ActivationCurve; // 0x340
	UCurveFloat* DeactivationCurve; // 0x348
	bool DeactivateActorWhenInactive; // 0x350
	EMurkWaterModifierZoneState State; // 0x351
};

struct UDelayStepDesc {
	float Delay; // 0x80
};

struct UWorldMarkerOnSpawnPositionComponent {
	float ZOffset; // 0xc8
	UWorldMarkerVariant* MarkerVariant; // 0xd0
};

struct UUnmanagedSalvageItemSpawnComponentMock {
	TArray<FIslandItemSpawnLocationData> IslandSalvageLocationData; // 0x4e0
	float GlobalIslandChanceToSpawn; // 0x4f0
	float MinimumZOffSet; // 0x4f4
	float MaximumZOffset; // 0x4f8
	float MinimumRoll; // 0x4fc
	float MaximumRoll; // 0x500
	float MinimumPitch; // 0x504
	float MaximumPitch; // 0x508
	bool SunkenItem; // 0x50c
	UIslandItemDataAsset* SpawnLocationType; // 0x510
	FWeightedProbabilityRangeOfRanges SpawnedContainerContents; // 0x518
};

struct UStatusResponseCancelStatus {
	TArray<UStatusBase*> Status; // 0x30
};

struct ATestableEnchantedSpyglass {
	UInventoryItemComponent* EnchantedInventoryItem; // 0x888
	AActor* ConstellationVisibilityEventActor; // 0x890
};

struct UTaleQuestActorServiceDesc {
	URunnable* ItemLostFailureRunnable; // 0x28
};

struct AOnlineBeacon {
	float BeaconConnectionInitialTimeout; // 0x3d8
	float BeaconConnectionTimeout; // 0x3dc
	UNetDriver* NetDriver; // 0x3e0
};

struct UItemQualityComponent {
	EEmissaryQualityLevel ItemQualityLevel; // 0xd0
	TArray<FPerComanyItemQualityEntry> CompanySpecificItemQualityLevels; // 0xd8
	TArray<FPerComanyComplexItemQualityEntry> CompanySpecificComplexItemQualityLevels; // 0xe8
	TArray<FPerComanyComplexItemQualityEntry> CompanySpecificComplexItemQualityLevelsHandin; // 0xf8
};

struct UFireworkDataAsset {
	FWeightedProbabilityRangeOfRanges PercentageTimeUntilTrailDisappears; // 0x28
	FWeightedProbabilityRangeOfRanges TimeUntilExplosion; // 0x58
	bool IsFlare; // 0x88
	bool ShouldCastAmbientLight; // 0x89
	FFireworkAmbientLightData FireworkAmbientLightData; // 0x8c
	TArray<FWeightedFireworkVFXData> Explosions; // 0xa0
	FWeightedProbabilityRange NumExplosions; // 0xb0
	FWeightedProbabilityRangeOfRanges TimeBetweenExplosions; // 0xd0
	FWeightedProbabilityRangeOfRanges ExplosionLocationOffset; // 0x100
	float FlashbangRadius; // 0x130
	UWwiseObjectPoolWrapper* ExplosionSfxPool; // 0x138
	UWwiseEvent* LaunchSfx; // 0x140
	UFireworkFeedbackDataAsset* FireworkFeedbackData; // 0x148
};

struct UAthenaAIAmmoDataAsset {
	TArray<FAthenaAICharacterControllerWeightedAmmoType> AmmoWeights; // 0xb8
	FName FeatureName; // 0xc8
};

struct UAbilityTask_SpawnActor {
	FScriptMulticastDelegate Success; // 0x68
	FScriptMulticastDelegate DidNotSpawn; // 0x78
};

struct UMaterialExpressionIfCondition {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	FExpressionInput IfTrue; // 0xe0
	FExpressionInput IfFalse; // 0x118
	EIfExpressionCondition Condition; // 0x150
	EIfExpressionAttribute Attribute; // 0x151
	float ConstB; // 0x154
	float ConstIfTrue; // 0x158
	float ConstIfFalse; // 0x15c
};

struct UBTDecorator_IsPerchedInHangout {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UVulnerabilityDuringAIStrategyComponent {
	TArray<FAIStrategyVulnerabilityData> StrategyVulnerabilities; // 0xc8
	UHealthComponent* HealthComponent; // 0xd8
};

struct ATreasuryRoom {
	UBoxComponent* RoomAreaComponent; // 0x3d8
	float TreasuryInactiveDurationMinSeconds; // 0x3e0
	float TreasuryInactiveDurationMaxSeconds; // 0x3e4
	float RoomFailureDurationSeconds; // 0x3e8
	float WaveDelaySeconds; // 0x3ec
	float EncounterDelaySeconds; // 0x3f0
	float VaultDoorAnimDurationSeconds; // 0x3f4
	float VaultDoorOpenDurationSeconds; // 0x3f8
	int32_t MinWavesInEncounter; // 0x3fc
	int32_t MaxWavesInEncounter; // 0x400
	int32_t MaxEncounters; // 0x404
	TArray<FTreasuryWaveEncounter> WaveEncounters; // 0x408
	AActor* FloodMechanismActor; // 0x418
	AActor* FloodTriggerActor; // 0x420
	AActor* DrainMechanismActor; // 0x428
	AActor* DrainTriggerActor; // 0x430
	AActor* VaultMechanismActor; // 0x438
	AActor* VaultTriggerActor; // 0x440
	AActor* VaultLootSpawner; // 0x448
	AActor* VaultLootSpawnLocationActor; // 0x450
	AActor* Shimmer; // 0x458
	TArray<AActor*> OverlappingActors; // 0x478
	TArray<TWeakObjectPtr<AController>> CachedParticipantControllers; // 0x488
	AActor* VaultLootSpawnerActor; // 0x498
	FPlayerStat VaultOpenStat; // 0x4a0
	UMechanismActionComponent* FloodMechanismComponent; // 0x4a8
	UMechanismActionComponent* DrainMechanismComponent; // 0x4b0
	UMechanismActionComponent* VaultMechanismComponent; // 0x4b8
	TScriptInterface<Class> FloodTriggerComponent; // 0x4c0
	TScriptInterface<Class> DrainTriggerComponent; // 0x4d0
	TScriptInterface<Class> VaultTriggerComponent; // 0x4e0
};

struct UShipLiveryComponent {
	UShipLiveryDescAsset* DefaultLivery; // 0xc8
	TArray<FShipLivery> LiveryDescs; // 0xd0
};

struct UMovieScene3DPathTrack {
	TArray<UMovieSceneSection*> ConstraintSections; // 0x88
};

struct UWidgetTree {
	UWidget* RootWidget; // 0x28
	TArray<UWidget*> AllWidgets; // 0x30
};

struct ULandmarkReactionEventStartParticleSystem {
	FName ComponentName; // 0x38
	int32_t ComponentIndex; // 0x40
	UWwiseEvent* AudioCue; // 0x48
};

struct UPirateLegendTypeFilter {
	EPLSectionType AllowedType; // 0x28
};

struct UWaitForMechanismActionCompletionStep {
	UWaitForMechanismActionCompletionStepDesc* Desc; // 0x90
};

struct UParticleModuleSubUVMovie {
	char bUseEmitterTime : 1; // 0x90
	FRawDistributionFloat FrameRate; // 0x98
	int32_t StartingFrame; // 0xd0
};

struct UElectricShieldBuffComponent {
	UParticleSystem* ShieldVFXAsset; // 0xd0
	FName VfxSocketName; // 0xd8
	UWwiseEvent* StartAudioLoopEvent; // 0xe0
	UWwiseEvent* StopAudioLoopEvent; // 0xe8
	bool IsShieldActive; // 0xf0
	UParticleSystemComponent* ShieldEffectComponent; // 0xf8
};

struct UInstancedNavMeshComponent {
	FName NavMeshName; // 0x2b8
	bool UseAttachedParentAsPrimitiveBase; // 0x2c0
};

struct UVaultMaterialSetDataAsset {
	TArray<FBlockDecalMaterials> BlockConfigurations; // 0x28
};

struct UCharacterAnimaticSettingsComponent {
	bool HasPlayedWakeUpAnimation; // 0x138
};

struct UPersistentSalvageItemSpawnComponent {
	float RefreshItemsRate; // 0x548
};

struct URowingInputComponent {
	ARowingSeat* TargetOars; // 0x280
};

struct AWieldableMegalodonEffigy {
	ETinySharkTypes MegalodonSoulType; // 0x790
};

struct UAIProgressiveWavesSpawner {
	bool ApplyLocalisableNamesToNameplates; // 0x428
	TArray<FAIPersistentSpawnerWave> Waves; // 0x430
	AActor* TriggerActor; // 0x458
};

struct UMigrationInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTTask_DetermineFollowUpAIAbility {
	UAthenaAIAbilityType* AIAbilityTypeToFollowUp; // 0x60
};

struct AStaticMeshActor {
	UStaticMeshComponent* StaticMeshComponent; // 0x3d0
	bool bStaticMeshReplicateMovement; // 0x3d8
	ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x3d9
};

struct UGhostCharacterAudioComponentParams {
	FName PlayerStateName; // 0x28
	FName PlayerStateGhostShip; // 0x30
	FName PlayerStateDefault; // 0x38
};

struct AStorySpawnedActorsService {
	TMap<FName, FSpawnedActorsList> SpawnedActors; // 0x3d8
	UStorySpawnedActorsCollectionDataAsset* Asset; // 0x428
};

struct UFlatWaterMeshComponent {
	int32_t RandomDropRate; // 0x5f0
	float RandomDropSize; // 0x5f4
	float RandomDropHeight; // 0x5f8
	float RestorationScale; // 0x5fc
	float ForceScale; // 0x600
	float DampHeight; // 0x604
	float NormalMapScale; // 0x608
	int32_t TextureWidth; // 0x60c
	int32_t TextureHeight; // 0x610
	UStaticMesh* ClippingHull; // 0x618
	float MaxSimulationDistance; // 0x620
	float InitialRandomHeight; // 0x624
	float InitialRandomVelocity; // 0x628
	UTexture* Texture; // 0x630
	UTexture* NormalTexture; // 0x638
	UTextureRenderTarget2D* WaterMaskTexture; // 0x640
	TArray<UMaterialInterface*> OriginalMaterials; // 0x660
	TArray<FFlatWaterMeshTextureOverride> TextureOverrides; // 0x670
};

struct UTaleQuestAddBountyMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableName IslandName; // 0x88
	FQuestVariableText Location; // 0x98
	FQuestVariableTextArray Description; // 0xa8
	FQuestVariableBountyTargetArray CaptainTargets; // 0xb8
	FQuestVariableBountyTargetArray CrewTargets; // 0xc8
	UBountyMapLayout* CustomLayout; // 0xd8
	UTreasureMapItemDesc* OverrideTreasureMapItemDesc; // 0xe0
};

struct UShipLightComponent {
	TArray<EShipRegion> DormantShipRegions; // 0xd0
	bool ExposeToNetProxy; // 0xe0
	int32_t NetProxyBitIndex; // 0xe4
	UInteractableLightParameters* LightParameters; // 0xe8
	bool LightIsOn_Server; // 0xf1
	TArray<UPointLightComponent*> Lights; // 0x108
};

struct UBTTask_SetFollowUpAbility {
	UAthenaAIAbilityType* AIAbilityType; // 0x60
};

struct UAIEncounterSettingsRankProgression {
	FStringAssetReference SkillsetProgression; // 0x60
	FStringAssetReference LoadoutProgression; // 0x70
	FStringAssetReference FormProgression; // 0x80
	FStringAssetReference AmmoProgression; // 0x90
	FStringAssetReference ItemDropComponentProgression; // 0xa0
	FEncounterParams EncounterTrackingParams; // 0xb0
};

struct UMeshMemoryConstraintScoringNumberOfMeshes {
	FName ScoringName; // 0x28
	float ScoringFactor; // 0x30
};

struct UAnimNotify_SpawnCosmeticItem {
	AActor* ItemSpawnClass; // 0x38
	EWieldAnimationLocation SpawnLocation; // 0x40
	UCosmeticItemAnimationSetDataAsset* CosmeticItemAnimationDataSet; // 0x48
	bool SpawnHidden; // 0x50
	bool SpawnForRole; // 0x51
	ENetRole SpawnRole; // 0x52
};

struct UTaleResourceBrokerService {
	TScriptInterface<Class> ContendedResourceService; // 0x60
	TScriptInterface<Class> ResourceRegistry; // 0x70
	TArray<FMigrationActionPair> MigrationActions; // 0x80
};

struct UMaterialExpressionAdd {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	float ConstA; // 0xe0
	float ConstB; // 0xe4
};

struct UPawnAction_Wait {
	float TimeToWait; // 0x90
};

struct UPhasedActorSourceComponent {
	AActor* PhasingSourceActor; // 0xc8
};

struct UCustomSkeletonAnimationDataList {
	TArray<FStringAssetReference> CustomAnimationAssets; // 0x28
};

struct UWrapBoxSlot {
	FMargin Padding; // 0x38
	bool bFillEmptySpace; // 0x48
	float FillSpanWhenLessThan; // 0x4c
	EHorizontalAlignment HorizontalAlignment; // 0x50
	EVerticalAlignment VerticalAlignment; // 0x51
};

struct UAnimNotify_AthenaPlayParticleEffect {
	UObject* PSTemplate; // 0x38
	FName SocketName; // 0x40
	FVector LocationOffset; // 0x48
	FRotator RotationOffset; // 0x54
	FVector RelativeScale; // 0x60
	FLinearColor ColorTint; // 0x6c
	float CustomParameter; // 0x7c
	char Attached : 1; // 0x80
	char KeepWorldScale : 1; // 0x80
	char OwnerOnlySee : 1; // 0x80
	char OwnerNoSee : 1; // 0x80
	char OwnedByWorld : 1; // 0x80
	EAnimNotifyUnderwaterMode UnderwaterMode; // 0x84
	EVfxCustomLocalSpaceMode CustomLocalSpaceMode; // 0x85
};

struct UWashedUpMessageInABottleClueDestinationGenerator {
	UClueSiteData* RequiredClueSiteDataType; // 0x28
	TArray<FWeightedClueDestinationDescriptor> WeightedSupportedDescriptorTypes; // 0x30
};

struct UAddOpenContainerActionRuleComponent {
	UNotificationInputId* NotificationInputId; // 0xc8
	EActionDisplayPriority DisplayPriority; // 0xd0
};

struct ACustomizableShipService {
	TArray<FWeakActorHandle> ShipList; // 0x3e0
	TArray<FCrewShipEntry> CrewedShips; // 0x410
	FCrewShipPersistentDataManager PersistentCrewShipData; // 0x420
};

struct ACluster {
	TArray<UClusterStaticMeshComponent*> ClusterStaticMeshes; // 0x3d0
	TArray<UStaticMeshComponent*> AllComponents; // 0x3e0
	bool DoesContainDecorator; // 0x3f0
};

struct UAbandonedNoteClueDescriptorGenerator {
	UClueDescriptor* DescriptorType; // 0x28
	TArray<UClueDestinationDescriptor*> SupportedDestinationTypes; // 0x30
};

struct USoundCue {
	char bOverrideAttenuation : 1; // 0x50
	USoundNode* FirstNode; // 0x58
	float VolumeMultiplier; // 0x60
	float PitchMultiplier; // 0x64
	FAttenuationSettings AttenuationOverrides; // 0x68
};

struct UShipLiveryDescAsset {
	FShipLivery ShipLivery; // 0x28
};

struct UWorldMarkerRoutingComponent {
	AActor* DefaultListenerType; // 0xd0
	TScriptInterface<Class> MarkerListener; // 0xd8
};

struct UBTTask_AthenaWait {
	bool UseMinMax; // 0x60
	FAIDataProviderFloatValue Min; // 0x68
	FAIDataProviderFloatValue Max; // 0x98
	FAIDataProviderFloatValue FixedWaitTime; // 0xc8
};

struct UCheckBoxStyleAsset {
	FCheckBoxStyle CheckBoxStyle; // 0x28
};

struct URewardHandInComponent {
	UCompany* Company; // 0xd0
};

struct UTakesItemFromStorageContainerConditionalTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UCompositionGraphCaptureSettings {
	FCompositionGraphCapturePasses IncludeRenderPasses; // 0x28
	bool bCaptureFramesInHDR; // 0x38
	int32_t HDRCompressionQuality; // 0x3c
	EHDRCaptureGamut CaptureGamut; // 0x40
	FStringAssetReference PostProcessingMaterial; // 0x48
};

struct UTaleRegisterSpireStepDesc {
	FQuestVariableVector SelectionOriginPoint; // 0x80
	FQuestVariableFloat PlayerExclusionSelectionRadius; // 0x90
	FQuestVariableTaleResourceHandle AllocatedSpireHandle; // 0xa0
	FQuestVariableVector AllocatedSpireLocation; // 0xb0
};

struct UMovieSceneEnumTrack {
	UEnum* Enum; // 0xb0
};

struct UAbilityTask_WaitVelocityChange {
	FScriptMulticastDelegate OnVelocityChage; // 0x68
	UMovementComponent* CachedMovementComponent; // 0x78
};

struct UBurrowAIAbilityParams {
	TArray<EPhysicalSurface> ValidBurrowSurfaceTypes; // 0xc8
	ABurrowCrack* BurrowCrackToSpawn; // 0xd8
	ABurrowEruptBase* BurrowEruptArea; // 0xe0
	UEnvQuery* EnvQueryLinesToTarget; // 0xe8
	UEnvQuery* EnvQueryAroundTarget; // 0xf0
	FVector OffsetPositionForStartTrace; // 0xf8
	float SurfaceDetectRaycastLength; // 0x104
	float BurrowAroundTargetRange; // 0x108
	float MaxSurfaceAngleForBurrow; // 0x10c
	bool bEruptFromClosestSpawn; // 0x110
	FMinMaxBurrowAbility EruptionDelayRndBetweenMinMaxSeconds; // 0x114
	FMinMaxBurrowAbility NumberOfCrackWavesMinMax; // 0x11c
	FMinMaxBurrowAbility RndSecondsBetweenCrackWaves; // 0x124
	FMinMaxBurrowAbility NumberOfCracksPerWaveMinMax; // 0x12c
	FMinMaxBurrowAbility RndSecondsBetweenEachCrackSpawn; // 0x134
};

struct AShroudBreakerService {
	UWorld* World; // 0x448
};

struct UAISpawnWaveSequence {
	TArray<FAISpawnerWave> Waves; // 0x28
	FName FeatureName; // 0x38
};

struct UVoyageRewardDataAsset {
	TArray<FPerChapterRankRewardEntry> RankEntries; // 0x28
};

struct UStopSuppressingCutsceneResponsesStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UContestRewardComponent {
	TWeakObjectPtr<AContestManagerService> CachedOwningContestManager; // 0x110
};

struct UWaitOnCollectableQuestObjectStep {
	UWaitOnCollectableQuestObjectStepDesc* StepDesc; // 0x98
};

struct UBlackboardKeyType_Enum {
	UEnum* EnumType; // 0x30
	FString EnumName; // 0x38
	char bIsEnumNameValid : 1; // 0x48
};

struct UCoherentUIGTRenderToTextureLiveView {
	FString LinkName; // 0xc8
	UTextureRenderTarget2D* Texture; // 0xd8
};

struct AItemInfo {
	bool CanBeStoredInInventory; // 0x3f0
	FScriptMulticastDelegate OnItemPickedUpDelegate; // 0x3f8
	FScriptMulticastDelegate OnItemDroppedDeletage; // 0x408
	AWieldableItem* WieldableType; // 0x418
	AActor* ProxyType; // 0x420
	UWieldableItemPersistentCooldownComponent* WieldableItemPersistenceCooldownComponent; // 0x428
	UItemDesc* Desc; // 0x430
	EItemRepresentation CurrentRepresentation; // 0x438
	AActor* CurrentRepresentationInstance; // 0x440
	AActor* CurrentOwner; // 0x448
	AActor* TutorialOwner; // 0x450
	bool DoNotConsiderForMigrationGather; // 0x4f9
};

struct UDynamicFlowComponent {
	UTexture2D* FlowTexture; // 0x5f0
	int32_t TextureSizeX; // 0x5f8
	int32_t TextureSizeY; // 0x5fc
	float UpdateCullDistance; // 0x600
	FVector2D FlowUVScrollSpeed; // 0x604
	FVector4 WaterDepthDistances; // 0x610
	float NearFadeStart; // 0x620
	float NearFadeRange; // 0x624
	FVector2D FlowScale; // 0x628
	FVector2D FlowBias; // 0x630
	FVector4 BlurCentreWeights; // 0x640
	FVector4 BlurEdgeWeights; // 0x650
	FVector4 FadeWeights; // 0x660
	UTextureRenderTarget2D* RenderTargetTexture; // 0x670
	UTextureRenderTarget2D* RenderTargetTexturePingPong; // 0x678
};

struct UPlayerBuriedItemServiceDataAsset {
	UPopUpMessageDesc* TreasureDiscoveredMessage; // 0x28
	UPopUpMessageDesc* TreasureDiscoveredByYouMessage; // 0x30
	UPopUpMessageDesc* TreasureRetrievedMessage; // 0x38
	UPopUpMessageDesc* TreasureRetrievedByYouMessage; // 0x40
	UPopUpMessageDesc* TreasureBuriedMapAddedMessage; // 0x48
	float TreasureBuriedByYouMessageDelay; // 0x50
	UPopUpMessageDesc* TreasureBuriedByYouMapAddedMessage; // 0x58
	UPopUpMessageDesc* TreasureBuriedMapUpdatedMessage; // 0x60
	UPopUpMessageDesc* TreasureBuriedByYouMapUpdatedMessage; // 0x68
	UPopUpMessageDesc* TreasureBuriedXNotCreatedMessage; // 0x70
	UPopUpMessageDesc* TreasureBuriedByYouXNotCreatedMessage; // 0x78
	UPopUpMessageDesc* MapGiftedMessage; // 0x80
	UPopUpMessageDesc* MapGiftedByYouMessage; // 0x88
	UPopUpMessageDesc* MapGiftedToYourCrewMessage; // 0x90
	UPopUpMessageDesc* MapBundleStolenVictimMessage; // 0x98
	UPopUpMessageDesc* MapBundleStolenVictimWasYouMessage; // 0xa0
	UPopUpMessageDesc* MapBundleStolenPerpetratorMessage; // 0xa8
	UPopUpMessageDesc* MapBundleStolenPerpetratorWasYouMessage; // 0xb0
	UPopUpMessageDesc* MapBundlePlacedOnTableMessage; // 0xb8
	UPopUpMessageDesc* MapBundleRetrievedMessage; // 0xc0
	UPopUpMessageDesc* MapBundleWasSpawnedInSunkenShip; // 0xc8
	UPopUpMessageDesc* MapWasAddedToTavernBoard; // 0xd0
	UPopUpMessageDesc* MapWasTakenFromTavernBoard; // 0xd8
	TArray<EBootyTypes> PrioritiseUseRewardIdAsPopup; // 0xe0
	UTreasureMapItemDesc* PlayerBuriedItemMapItemDesc; // 0xf0
	UItemDesc* PlayerBuriedItemMapBundleItemDesc; // 0xf8
	float ItemDigUpRadius; // 0x100
	TArray<FPlayerBuriedItemServiceItemDigUpRadiusSurfaceOverride> ItemDigUpRadiusSurfaceOverride; // 0x108
	float IsUndergroundLineTraceLength; // 0x118
	ECollisionChannel IsUndergroundLineTraceChannel; // 0x11c
	TArray<EPhysicalSurface> IgnoreSurfaceTypes; // 0x120
	int32_t NumXsDonationCommendationThreshold; // 0x130
	int32_t DailyMapLimit; // 0x134
	UPlayerBuriedItemServiceMapStorePopulatorDataAsset* MapStorePopulatorDataAsset; // 0x138
	UPlayerBuriedItemServiceHaulSizeDataAsset* HaulSizeDataAsset; // 0x140
	float ServerShutdownCompensationRewardScalar; // 0x148
	float MapBundleLostByAnotherCrewCompensationRewardScalar; // 0x14c
	float SendRewardCompensationForItemsSecondsBeforeShutdown; // 0x150
	int32_t NumItemsRequiredOnMapForHoardStat; // 0x154
	float LineTraceHalfLength; // 0x158
	ECollisionChannel HitTestTraceChannel; // 0x15c
};

struct URumbleHandlerComponent {
	TArray<FRumbleParameters> RumbleParameters; // 0xc8
};

struct UBTTask_NOP {
	int32_t Id; // 0x60
};

struct ASceneCaptureCube {
	USceneCaptureComponentCube* CaptureComponentCube; // 0x3d8
	UDrawFrustumComponent* DrawFrustum; // 0x3e0
};

struct UAnimSequenceBase {
	TArray<FAnimNotifyEvent> Notifies; // 0x50
	float SequenceLength; // 0x60
	float RateScale; // 0x64
	FRawCurveTracks RawCurveData; // 0x68
};

struct UMeshMemoryConstraintFallbackDataAsset {
	FName FallbackName; // 0x28
	UMeshMemoryConstraintBudget* ConstraintBudget; // 0x30
	TArray<UMeshMemoryConstraintFallbackCategoryDataAsset*> MeshFallbacks; // 0x38
	TArray<float> ThresholdsMB; // 0x48
	float ScoringIntervalInSeconds; // 0x58
	TArray<UMeshMemoryConstraintScoringObject*> ScoringData; // 0x60
};

struct AInstancedNavMeshBoundsVolume {
	FNavAgentSelector SupportedAgents; // 0x408
	FName OriginatingLevelName; // 0x40c
};

struct USoundNodeAttenuation {
	USoundAttenuation* AttenuationSettings; // 0x38
	FAttenuationSettings AttenuationOverrides; // 0x40
	char bOverrideAttenuation : 1; // 0x100
};

struct UGameAudioService {
	TArray<AShip*> ClientRegisteredShips; // 0x30
};

struct AMegalodonSummonZone {
	ETinySharkTypes MegType; // 0x3f8
	float SummonRadius; // 0x3fc
	float UpdateFrequency; // 0x400
};

struct UShipPartCustomizationComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AFishingFish {
	UFishDataAsset* FishDataAsset; // 0x5f0
	UFishingMiniGameFishDataAsset* FishingMiniGameFishDataAsset; // 0x5f8
	FPlayerStat OnFishCaughtStat; // 0x600
	UParticleSystemComponent* BattlingVFX; // 0x608
	UParticleSystemComponent* BeingTiredVFX; // 0x610
	UWaterInteractionComponent* WaterInteractionComponent; // 0x618
	UItemDesc* CaughtFishItemDesc; // 0x620
	UDitherComponent* DitherComponent; // 0x8c0
	FVector MouthAttachLocation; // 0x8c8
	float AutoKillTime; // 0x8d4
	int32_t RandomAnimationLoopVal; // 0x8e0
};

struct UMaterialExpressionSquareRoot {
	FExpressionInput Input; // 0x70
};

struct UMeleeAttackProcessorComponent {
	int32_t MaxPlayerHitResponsesBroadcastPerAttack; // 0xd0
	int32_t MaxNonPlayerPawnHitResponsesBroadcastPerAttack; // 0xd4
	int32_t MaxOtherHitResponsesBroadcastPerAttack; // 0xd8
	float RewindInstigatorEstimationMaxSearchTime; // 0xdc
	float RewindInstigatorEstimationStepSize; // 0xe0
	FMeleeAttackHitResponses PredictiveHitResponses; // 0x114
	FMeleeAttackHitResponses ValidatedHitResponses; // 0x115
	FMeleeAttackHitResponses AuthoritativeHitResponses; // 0x116
	FMeleeAttackHitResponses ServerHitResponses; // 0x117
};

struct UTaleQuestGenericBannerStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UFireworksDebugSpawnItemsDataAsset {
	FClassicFireworkDebugList ClassicFireworks; // 0x28
	FFireworkDebugListByFireworkType ThemedFireworks; // 0x98
	TArray<UItemDescSpawnData*> Flares; // 0xb8
	TArray<UItemDescSpawnData*> AllFireworks; // 0xc8
};

struct UEventCatchStep {
	UEventCatchStepDesc* Desc; // 0x90
};

struct ATaleProgressStatue {
	UStaticMeshComponent* StaticMeshComponent; // 0x3d0
	FName InteractionSocketName; // 0x3d8
	UTaleProgressStatueInteractableComponent* InteractableComponent; // 0x3e0
	int32_t StatueProgressLevel; // 0x3e8
	bool HasReturnToShipInteraction; // 0x3ec
	TArray<FName> ValidTaleCampaignIds; // 0x3f0
	UMaterialInstanceDynamic* DynamicGlowMaterialInstance; // 0x400
	UParticleSystemComponent* ResumeFromTaleProgressParticleSystem; // 0x408
	FName GlowParamName; // 0x410
	int32_t GlowOffEmissiveScalarValue; // 0x418
	int32_t GlowOnEmissiveScalarValue; // 0x41c
};

struct UBountyMapLayout {
	FTreasureMapWidgetText Location; // 0x28
	TArray<FTreasureMapWidgetText> Descriptions; // 0x48
	TArray<FBountyMapLayoutTarget> Targets; // 0x58
	TArray<FTreasureMapWidgetTexture> Images; // 0x68
	TArray<FTreasureMapWidgetLocalisedText> GeneralText; // 0x78
};

struct UTextureSwitchByItem {
	FStringAssetReference FallbackTexture; // 0x220
	TArray<FTextureSwitchItemEntry> Entries; // 0x230
};

struct UEditableGameplayTagQueryExpression_NoExprMatch {
	TArray<UEditableGameplayTagQueryExpression*> Expressions; // 0x28
};

struct UPlaySequencerAnimationOnCutsceneActorStep {
	UPlaySequencerAnimationOnCutsceneActorStepDesc* StepDesc; // 0x90
	ASequencerCutSceneActor* SequencerCutSceneActor; // 0x98
	TArray<FPossessableSequence> PossessableSequences; // 0xa0
};

struct UTaleQuestCheckpointServiceDesc {
	UPopUpMessageDesc* Notification; // 0x28
};

struct USpawnRewardStepDesc {
	FQuestVariableItemSpawnDataType ItemSpawnData; // 0x80
	FQuestVariableVector SpawnLocation; // 0x90
	FQuestVariableActor SpawnedActor; // 0xa0
	bool Tracked; // 0xb0
	bool Critical; // 0xb1
	bool DropOnSpawn; // 0xb2
	FText FailureMessage; // 0xb8
};

struct UGridSlot {
	EHorizontalAlignment HorizontalAlignment; // 0x38
	EVerticalAlignment VerticalAlignment; // 0x39
	int32_t Row; // 0x3c
	int32_t RowSpan; // 0x40
	int32_t Column; // 0x44
	int32_t ColumnSpan; // 0x48
	int32_t Layer; // 0x4c
	FVector2D Nudge; // 0x50
};

struct UGeyserItemSpawnComponent {
	bool SpawnOnStart; // 0x2b0
	FItemSpawnParams SpawnParams; // 0x2b8
	UWeightedItemDescSpawnDataAsset* ReferencedSpawnDistributionAsset; // 0x2e0
	UItemSpawnDistributionAsset* ReferencedSpawnDistribution; // 0x2e8
	TArray<FItemSpawnTransform> SpawnTransforms; // 0x2f0
	TArray<FItemSpawnTransformWithRandomQuantity> SpawnTransformsWithRandomQuantities; // 0x300
	FName FeatureToggle; // 0x310
	ESpawnedItemSource SpawnSource; // 0x318
	float SpawnRate; // 0x31c
	bool DestroyProxiesOnEndPlay; // 0x320
	bool SpawnWithPhysicsEnabled; // 0x321
	bool DoNotAttachToOwnerWhenSpawned; // 0x322
	bool DropItemsOnSpawn; // 0x323
	bool DropItemsUsingPriorityAIDropParams; // 0x324
	TArray<FSpawnInstance> SpawnList; // 0x328
	TArray<FSpawnInstance> SingleItemInstances; // 0x338
	TArray<FSpawnedItem> SpawnedItems; // 0x348
};

struct UGeneratedLocationsDataAsset {
	TArray<FVector> Locations; // 0x28
};

struct UAIShipContextParamsDataAsset {
	float TopDeckPlayerTrackerRadius; // 0x28
	float TimeSpentEmotingOnInitialSpawn; // 0x2c
	bool ForceAIToAlwaysSpawn; // 0x30
	float IntervalBetweenRepairDamageAssignments; // 0x34
	float IntervalBetweenUseCannonAssignments; // 0x38
	float DistForMinXYAIInteractableUtility; // 0x3c
	float DistForMaxXYAIInteractableUtility; // 0x40
	float MinXYAIInteractableUtility; // 0x44
	float MaxXYAIInteractableUtility; // 0x48
	float DistForMinZAIInteractableUtility; // 0x4c
	float DistForMaxZAIInteractableUtility; // 0x50
	float MinZAIInteractableUtility; // 0x54
	float MaxZAIInteractableUtility; // 0x58
	float MinInactiveRepairSpawnDelay; // 0x5c
	float MaxInactiveRepairSpawnDelay; // 0x60
	float SpawnSfxDistance; // 0x64
	float SinkSfxDistance; // 0x68
	int32_t MinCannonAttackersWhenBoarded; // 0x6c
	float StuckCheckInterval; // 0x70
	float StuckCheckDistance; // 0x74
	float MaxDistanceFromEncounter; // 0x78
	float ShipFlippedAngle; // 0x7c
	float SecondsUntilKillAIAfterShipDefeated; // 0x80
	float SecondsDelayForAIShipDefeatedNotification; // 0x84
	bool EnableShipSurfacingMusic; // 0x88
};

struct UAggressiveGhostShipVisualsDataAsset {
	TArray<FAggressiveGhostShipVisualsMaterialOverride> MaterialOverrides; // 0x28
	TArray<FAggressiveGhostShipVisualsExtraMesh> ExtraMeshes; // 0x38
	UAggressiveGhostShipAnimationDataAsset* AppearAnimation; // 0x48
	UAggressiveGhostShipAnimationDataAsset* DisappearAnimation; // 0x50
	UAggressiveGhostShipAnimationDataAsset* SinkingAnimation; // 0x58
};

struct USelectIslandsFromRegionStepDesc {
	FQuestVariableDataAsset Region; // 0x80
	FQuestVariableInt NumIslands; // 0x90
	FQuestVariableInt MaxDifferentIslands; // 0xa0
	FQuestVariableNameArray SelectedIslands; // 0xb0
	URegionIslandSelectionStrategyBase* SelectionStrategy; // 0xc0
	int32_t DefaultNumIslands; // 0xc8
	int32_t DefaultMaxDifferentIslands; // 0xcc
};

struct UTaleQuestFlameOfFateService {
	UTaleQuestFlameOfFateServiceDesc* ServiceDesc; // 0x60
};

struct UWoodPlankItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct ACollectableQuestObject {
	float InteractionPointRadius; // 0x488
	FName InteractionPointSocketName; // 0x48c
	FText InteractableObjectPickupName; // 0x498
	USceneComponent* ThirdPersonMesh; // 0x4d0
};

struct UMechanismAnimationEvent_OneShotAudio {
	float StartTime; // 0x60
};

struct UGameUserSettings {
	bool bUseVSync; // 0x28
	uint32_t ResolutionSizeX; // 0x48
	uint32_t ResolutionSizeY; // 0x4c
	uint32_t LastUserConfirmedResolutionSizeX; // 0x50
	uint32_t LastUserConfirmedResolutionSizeY; // 0x54
	int32_t WindowPosX; // 0x58
	int32_t WindowPosY; // 0x5c
	bool bUseDesktopResolutionForFullscreen; // 0x60
	int32_t FullscreenMode; // 0x64
	int32_t LastConfirmedFullscreenMode; // 0x68
	uint32_t Version; // 0x6c
	int32_t AudioQualityLevel; // 0x70
};

struct URecastFilter_UseDefaultArea {
	TArray<FNavigationFilterArea> Areas; // 0x28
	FNavigationFilterFlags IncludeFlags; // 0x38
	FNavigationFilterFlags ExcludeFlags; // 0x3c
};

struct UIsOnActiveVoyageNPCDialogConditional {
	EVoyageDifficultyScope VoyageType; // 0x30
};

struct APuzzleStatueBase {
	UStaticMeshComponent* StaticMeshComponent; // 0x3e0
	UPuzzleStatueInteractableComponent* InteractableComponent; // 0x3e8
	ULockComponent* LockComponent; // 0x3f0
	bool IsStatueDisabled; // 0x3f8
	bool IsStatueActive; // 0x3f9
	float MinDamageToTriggerStatue; // 0x3fc
	UPuzzleStatueBaseAudioParamsDataAsset* PuzzleStatueBaseAudioParams; // 0x408
	UPuzzleStatueVFXComponent* PuzzleStatueVFXComponent; // 0x410
	UParticleSystemComponent* LockPositionParticleSystem; // 0x418
	UParticleSystemComponent* OneShotLockPositionParticleSystem; // 0x420
};

struct UPuzzleStatueVFXComponent {
	UParticleSystemComponent* LockPositionParticleSystem; // 0x118
	UParticleSystemComponent* OneShotLockPositionParticleSystem; // 0x120
	UParticleSystemComponent* BroadcasterShockwaveParticleSystem; // 0x128
	UParticleSystemComponent* BroadcasterHornDustParticleSystem; // 0x130
	UObject* HornVFXTemplate; // 0x138
	UStaticMeshComponent* BroadcasterArmStaticMesh; // 0x140
	UCurveFloat* PulseGlowCurve; // 0x148
	float StatueInactiveIntensityThreshold; // 0x150
	float StatueActivatedIntensityThreshold; // 0x154
	float ReactionSequenceIntensityThreshold; // 0x158
	float SingingIntensityThreshold; // 0x15c
	float IntensityInterpolationSpeed; // 0x160
	TArray<FName> ScalarParameterNamesToOverride; // 0x168
};

struct UItemDescList {
	TArray<UItemDesc*> Items; // 0x28
};

struct UEmissaryVoyageVoteValidatorBase {
	UCompany* TargetCompany; // 0x30
	UEntitlementDesc* RequiredEntitlement; // 0x38
	UEmissaryVoyageInlineVoteConsumerBase* Consumer; // 0xa0
};

struct UBeckonDataAsset {
	TArray<FNPCBeckonGroupEntry> NPCBeckonGroups; // 0x28
	UWwiseObjectPoolWrapper* BeckonAudioPool; // 0x38
	float BeckonIntervalInSeconds; // 0x40
};

struct UBTTask_IncrementBlackboardFloatValue {
	FAIDataProviderFloatValue FloatValueDelta; // 0x88
};

struct UQuestBookPagesInContainerDataAsset {
	FTransform Transform; // 0x30
	UStaticMesh* PagesMesh; // 0x60
	FText ActionTooltipDisplayString; // 0x68
	FText ActionTooltipDisplayStringSentence; // 0xa0
};

struct UAggressiveGhostShipLocationDataAsset {
	float MinRadialSplineOffsetInMetres; // 0x28
	float MaxRadialSplineOffsetInMetres; // 0x2c
	bool UseAlternativeSplinePoints; // 0x30
	int32_t MinNumAlternativeSplinePoints; // 0x34
	int32_t MaxNumAlternativeSplinePoints; // 0x38
	float AlternativeMinRadialSplineOffsetInMetres; // 0x3c
	float AlternativeMaxRadialSplineOffsetInMetres; // 0x40
	float AlternativeMinRadialBlendValue1; // 0x44
	float AlternativeMinRadialBlendValue2; // 0x48
	float MinDistanceBetweenSplinePointsInMetres; // 0x4c
	float CacheDistanceInMetres; // 0x50
};

struct UWaterSensitiveComponent {
	UWaterSensitiveComponentDataAsset* WaterSensitiveData; // 0xc8
};

struct ULocatorContainer {
	TArray<FLocator> Locators; // 0x28
};

struct UMovieSceneByteTrack {
	UEnum* Enum; // 0xb0
};

struct UPetChestViewModelComponent {
	FStringAssetReference ClearIcon; // 0x170
	bool WithClearButtons; // 0x180
	TArray<UPetEntitlementBaseCategory*> Categories; // 0x198
	bool IncludeAllCategory; // 0x1a8
};

struct UMaterialExpressionStaticBoolParameter {
	char DefaultValue : 1; // 0x90
};

struct UMaterialExpressionClamp {
	FExpressionInput Input; // 0x70
	FExpressionInput Min; // 0xa8
	FExpressionInput Max; // 0xe0
	EClampMode ClampMode; // 0x118
	float MinDefault; // 0x11c
	float MaxDefault; // 0x120
};

struct UOnDigTriggerFuse {
	bool OnlyIfBuriedByPlayer; // 0x28
};

struct UTaleQuestFramedStepDesc {
	TArray<UTaleQuestServiceDesc*> Services; // 0x80
	UScriptStruct* Variables; // 0x90
	FInlineUserDefinedStructDetails GeneratedVariables; // 0x98
};

struct ALandscapeGizmoActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct AMapTableControlPoint {
	USceneComponent* SceneRootComponent; // 0x508
	UInteractableComponent* MyInteractable; // 0x510
	FName CameraSocketName; // 0x518
	bool InvertControls; // 0x520
};

struct UDemoNetConnection {
	TArray<UChildConnection*> Children; // 0x50
	UNetDriver* Driver; // 0x60
	UPackageMap* PackageMap; // 0x68
	TArray<UChannel*> OpenChannels; // 0x70
	TArray<AActor*> SentTemporaries; // 0x80
	AActor* ViewTarget; // 0x90
	AActor* OwningActor; // 0x98
	int32_t MaxPacket; // 0xa0
	char InternalAck : 1; // 0xa4
	double LastReceiveTime; // 0x3a0
	int32_t MaxDormantActorsCheckedFromRelevancy; // 0x34468
	TArray<UChannel*> DeferredCloseChannels; // 0x344c0
};

struct UOnboardingIntroLocationComponent {
	FRotator SpawnRotation; // 0x2d8
};

struct UBehaviorTreeManager {
	int32_t MaxDebuggerSteps; // 0x28
	TArray<FBehaviorTreeTemplateInfo> LoadedTemplates; // 0x30
	TArray<UBehaviorTreeComponent*> ActiveComponents; // 0x40
};

struct AIgnitableMechanismTrigger {
	USceneComponent* Root; // 0x3d8
	UTimedFlammableComponent* FlammableComponent; // 0x3e0
	ULightWeightStatusEffectManagerComponent* StatusEffectManagerComponent; // 0x3e8
	UMechanismTriggerComponent* MechanismTriggerComponent; // 0x3f0
};

struct UMaterialExpressionFloor {
	FExpressionInput Input; // 0x70
};

struct UMaterialExpressionCustomOutput {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UMeleeAttackLockOnComponentSettings {
	ULockOnCameraModifierSettings* CameraModifierSettings; // 0x28
	float BreakDistance; // 0x30
	bool DelayTargetEvaluationUntilEndOfStrike; // 0x34
	bool AllowTargetSwitching; // 0x35
	float MaxLockOnAngle; // 0x38
	float MaxLockOnDistance; // 0x3c
};

struct UTaleMakeSpireVisibleStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UWieldableItemCanvasRenderingComponent {
	int32_t CanvasWidth; // 0xd8
	int32_t CanvasHeight; // 0xdc
	FName PrimaryMaterialTextureParameterName; // 0xe0
	TScriptInterface<Class> OwningWieldable; // 0xe8
	UMaybeCompressedCanvasRenderTarget2D* PrimaryRenderTarget; // 0xf8
	TArray<UMaybeCompressedCanvasRenderTarget2D*> AdditionalRenderTargets; // 0x100
};

struct UMovieScene {
	TArray<FMovieSceneSpawnable> Spawnables; // 0x80
	TArray<FMovieScenePossessable> Possessables; // 0x90
	TArray<FMovieSceneBinding> ObjectBindings; // 0xa0
	TArray<UMovieSceneTrack*> MasterTracks; // 0xb0
	UMovieSceneTrack* CameraCutTrack; // 0xc0
	FFloatRange SelectionRange; // 0xc8
	FFloatRange PlaybackRange; // 0xd8
	bool bForceFixedFrameIntervalPlayback; // 0xe8
	float FixedFrameInterval; // 0xec
	float InTime; // 0xf0
	float OutTime; // 0xf4
	float StartTime; // 0xf8
	float EndTime; // 0xfc
};

struct UImage {
	USlateBrushAsset* Image; // 0x138
	FSlateBrush Brush; // 0x140
	DelegateProperty BrushDelegate; // 0x1d0
	FLinearColor ColorAndOpacity; // 0x1e0
	DelegateProperty ColorAndOpacityDelegate; // 0x1f0
	DelegateProperty OnMouseButtonDownEvent; // 0x200
};

struct UMaterialInformationService {
	UDataTable* MaterialTranslationTable; // 0x30
	UDataTable* MaterialAudioTable; // 0x38
	UDataTable* MaterialVFXTable; // 0x40
};

struct UServerNetworkedEventsWhitelistDefinition {
	TArray<UScriptStruct*> ValidEvents; // 0x28
};

struct UTaleQuestGetCrewShipManifestStepDesc {
	FQuestVariableGuid CrewId; // 0x80
	FQuestVariableCrewShipManifest CrewShipManifest; // 0x90
};

struct ATestInventoryAthenaGameMode {
	APawn* GhostShipPawnClass; // 0x4e0
	UNetworkedEventsWhitelistDefinition* ServerNetworkedEventsWhitelistDefinition; // 0x4e8
	FGhostShipCoordinator GhostShipCoordinator; // 0x688
	FStorageContainerRefresher StorageContainerRefresher; // 0x8b8
	URiddleQuestDescGeneratorData* RiddleQuestDescGeneratorData; // 0x990
	float RespawnTimer; // 0x998
	float ContestRespawnTimer; // 0x99c
	float StorageContainerRefreshInterval; // 0x9a0
	int32_t ContainerRefreshBatchSize; // 0x9a4
};

struct UMaterialExpressionPrecomputedAOMask {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UCrewSpawnLocationVariablesListAsset {
	float MinimumSafeShipDistance; // 0x28
	float MaximumSafeShipDistance; // 0x2c
	float SafeShipDistanceScore; // 0x30
	float SpawnIsNotOccupiedPenalty; // 0x34
	int32_t PenaltyResourceIsland; // 0x38
	int32_t PenaltyOutpostIsland; // 0x3c
	int32_t PenaltySmallIsland; // 0x40
	int32_t PenaltyMediumIsland; // 0x44
	int32_t PenaltyLargeIsland; // 0x48
	int32_t PenaltyFort; // 0x4c
	int32_t PenaltySeaPost; // 0x50
	int32_t PenaltyFortOfTheDamned; // 0x54
};

struct ASirenStatue {
	EAthenaAITeam Team; // 0x570
};

struct URammableComponent {
	URammableDamageDataAsset* DamageSettings; // 0xd0
	float MinIntervalBetweenRamDamage; // 0xd8
	TScriptInterface<Class> OwnerDamageable; // 0xe0
	TScriptInterface<Class> OwnerMovement; // 0xf0
};

struct UAggressiveGhostShipFixedSplinesDataAsset {
	TArray<FAggressiveGhostShipFixedSpline> Splines; // 0x28
};

struct ATestStaticWieldableInventoryItem {
	UInventoryItemComponent* InventoryItem; // 0x790
};

struct AInterruptibleProjectileActionItem {
	FStatus OnInterruptionStatus; // 0x950
	bool IsOneShotStatus; // 0x968
	float StatusDuration; // 0x96c
};

struct UConditionalStatsServiceSettings {
	TArray<FConditionalStatsTriggerUnit> ConditionalStats; // 0x28
	TArray<FConditionalStatsTriggerUnit> SeasonConditionalStats; // 0x38
};

struct UNavigationSystem {
	ANavigationData* MainNavData; // 0x28
	ANavigationData* AbstractNavData; // 0x30
	char bAutoCreateNavigationData : 1; // 0x38
	char bAllowClientSideNavigation : 1; // 0x38
	char bSupportRebuilding : 1; // 0x38
	char bInitialBuildingLocked : 1; // 0x38
	char bSkipAgentHeightCheckWhenPickingNavData : 1; // 0x38
	ENavDataGatheringModeConfig DataGatheringMode; // 0x3c
	char bGenerateNavigationOnlyAroundNavigationInvokers : 1; // 0x40
	float ActiveTilesUpdateInterval; // 0x44
	TArray<FNavDataConfig> SupportedAgents; // 0x48
	float DirtyAreasUpdateFreq; // 0x58
	TArray<ANavigationData*> NavDataSet; // 0x60
	TArray<ANavigationData*> NavDataRegistrationQueue; // 0x70
	FScriptMulticastDelegate OnNavDataRegisteredEvent; // 0xe0
	FScriptMulticastDelegate OnNavigationGenerationFinishedDelegate; // 0xf0
	FNavigationSystemRunMode OperationMode; // 0x1cc
	FStringAssetReference InstancedNavMeshesDataAsset; // 0x3c0
	UInstancedNavMeshesDataAsset* InstancedNavMeshesData; // 0x3d0
};

struct URareGameEngine {
	float MaxDeltaTime; // 0x978
	float ServerFlushLogInterval; // 0x97c
};

struct UAthenaAnimationCustomSkeletonAnimationData {
	FSkeletonCustomAnimationDataStructure SkeletonCustomAnimData; // 0x28
};

struct USeatStat_SleepOnOtherCrewsBed {
	FPlayerStat Stat; // 0x28
};

struct UMegalodonSoulInteractableComponent {
	FText DisplayName; // 0x128
	FText TakeSoulTooltipText; // 0x160
	FText EffigyNotRaisedToolTipText; // 0x198
	FText NotWieldingEffigyTooltipText; // 0x1d0
	FText CannotEnchantEffigyTooltipText; // 0x208
	ETinySharkTypes MegalodonSoulType; // 0x240
	UNotificationInputId* ActivationInput; // 0x248
};

struct UBTDecorator_CompareBlackboardActorSpeed {
	FBlackboardKeySelector BlackboardKey; // 0xb8
};

struct ANetworkClusterEventRoom {
	bool ClearSpawnProgressOnRoomActivate; // 0x3d8
	TArray<AActor*> EntranceMechanisms; // 0x3e0
	TArray<AActor*> ExitMechanisms; // 0x3f0
	FScriptMulticastDelegate PlayerLeftRoomDelegate; // 0x400
	FScriptMulticastDelegate PlayerEnteredRoomDelegate; // 0x410
	UBoxComponent* RoomAreaComponent; // 0x420
	FScriptMulticastDelegate StartedDelegate; // 0x428
	FScriptMulticastDelegate FailDelegate; // 0x438
	FScriptMulticastDelegate CompletedDelegate; // 0x448
	FScriptMulticastDelegate AftermathStartedDelegate; // 0x458
};

struct USpawnPhasedActorWithTransformStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAnimNotify_RumbleController {
	UForceFeedbackEffect* ForceFeedbackEffect; // 0x38
	FName ForceFeedbackTag; // 0x40
	UForceFeedbackCondition* ForceFeedbackCondition; // 0x48
};

struct UIslandSalvageSpawnerCollection {
	TArray<USalvageItemSpawnComponent*> SalvageSpawners; // 0x28
};

struct UTaleQuestClueSiteService {
	UTaleQuestClueSiteServiceDesc* Desc; // 0x60
	TArray<FClueSite> ClueSites; // 0x68
	TMap<EClueSiteLootType, FClueSiteLootHistory> SpawnedLoot; // 0x78
	TArray<FGuid> DebugClueSiteIds; // 0xc8
};

struct UCoherentUIGTNameplateComponent {
	int32_t MaxElements; // 0x3c8
	float NormalizedScreenSpaceVisibilityMargin; // 0x3cc
	UCurveFloat* DistanceScalingCurve; // 0x3d0
	float TitleFadeDistance; // 0x3d8
	FNameplateVisibilityFactors VisibilityFactors; // 0x3dc
};

struct UAIItemSpawnDataSourceComponent {
	UItemSpawnTransformWithRandomQuantityDataAssset* ItemSpawnDataAsset; // 0x2b8
};

struct UStatusResponseTriggerDrunkenness {
	float TargetDrunkenness; // 0x30
	EDrunkennessType SourceOfDrunkenness; // 0x34
};

struct UIsItemOfClassStatCondition {
	UItemDesc* ItemType; // 0x30
	bool ExactMatch; // 0x38
};

struct UTexture2D {
	int32_t RequestedMips; // 0x138
	int32_t ResidentMips; // 0x13c
	int32_t StreamingIndex; // 0x140
	int32_t FirstResourceMemMip; // 0x144
	FIntPoint ImportedSize; // 0x14c
	float ForceMipLevelsToBeResidentTimestamp; // 0x154
	char bTemporarilyDisableStreaming : 1; // 0x158
	char bIsStreamable : 1; // 0x158
	char bHasCancelationPending : 1; // 0x158
	char bForceMiplevelsToBeResident : 1; // 0x158
	char bGlobalForceMipLevelsToBeResident : 1; // 0x158
	TextureAddress AddressX; // 0x15c
	TextureAddress AddressY; // 0x15d
	int32_t MinimumLoadedMips; // 0x160
};

struct UInteractableComponent {
	FName FeatureFlag; // 0xd0
	FVector BoxExtent; // 0xd8
	FVector BoxOrigin; // 0xe4
	FRotator BoxRotation; // 0xf0
	char MayBeGrouped : 1; // 0xfc
	char ProxyForActorInteraction : 1; // 0xfc
	bool RequiresFacingFront; // 0x100
	bool RequiresNotAirborne; // 0x101
	bool RequiresNotSwimming; // 0x102
	float InteractionRadius; // 0x104
	UInteractableArea* InteractableArea; // 0x108
	EInteractableState CurrentInteractionState; // 0x110
};

struct UTextureCube {
	int32_t LODBias; // 0x28
	int32_t NumCinematicMipLevels; // 0x2c
	char SRGB : 1; // 0x30
	char NeverStream : 1; // 0x30
	char bNoTiling : 1; // 0x30
	char bUseCinematicMipLevels : 1; // 0x30
	char CompressionNone : 1; // 0x30
	char bUAV : 1; // 0x30
	uint32_t MaxQualityReduction; // 0x34
	int32_t CachedCombinedLODBias; // 0x38
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x3c
	TextureCompressionSettings CompressionSettings; // 0x40
	TextureFilter Filter; // 0x41
	TextureGroup LODGroup; // 0x42
	float StreamingPriorityBoost; // 0x44
	TArray<FExternalMip> ExternalMips; // 0xa0
};

struct UAnimNotify {
	bool PlayedWithSequencer; // 0x28
};

struct UMovieSceneAudioTrack {
	TArray<UMovieSceneSection*> AudioSections; // 0x88
};

struct UEnvQueryGenerator {
	FString OptionName; // 0x30
	bool NonShippingOnly; // 0x40
	UEnvQueryItemType* ItemType; // 0x48
};

struct UBTDecorator_CompareBlackboardClassValue {
	UObject* Class; // 0x90
	bool Invert; // 0x98
	FString CachedDescription; // 0xa0
	EBTBlackboardRestart NotifyObserver; // 0xb0
};

struct UDataTable {
	UScriptStruct* RowStruct; // 0x28
};

struct UTaleQuestLocationMapChestFoundStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAISpawnContextTaleQuestService {
	UAISpawnContextTaleQuestServiceDesc* Desc; // 0x60
};

struct UXPReward {
	uint32_t Xp; // 0x28
};

struct ALargeWieldableMockActor {
	UInventoryItemComponent* InventoryItem; // 0x7b0
};

struct UMeleeSpinAbilityStageParams {
	float AbilityCooldownSpeedMultiplier; // 0x28
	float DamageRequiredForNextIntervalMultiplier; // 0x2c
	bool OverrideParams; // 0x30
	bool AutoActivateOnStageTransition; // 0x31
	UAthenaAIAbilityType* TypeClass; // 0x38
};

struct UAIPerceptionComponent {
	float HearingRange; // 0xc8
	float LoSHearingRange; // 0xcc
	float SightRadius; // 0xd0
	float LoseSightRadius; // 0xd4
	float PeripheralVisionAngle; // 0xd8
	TArray<UAISenseConfig*> SensesConfig; // 0xe0
	UAISense* DominantSense; // 0xf0
	AAIController* AIOwner; // 0x108
	FScriptMulticastDelegate OnPerceptionUpdated; // 0x190
	FScriptMulticastDelegate OnTargetPerceptionUpdated; // 0x1a0
};

struct ABootyStorageService {
	UBootyStorageSettings* BootyStorageSettings; // 0x450
	UBootyStorageSettingsAsset* BootyStorageSettingsAsset; // 0x458
	TArray<FCrewBootyStorage> Storage; // 0x460
	FEnvQueryRequest SpawnBootyEQSRequest; // 0x470
	FEnvQueryRequest SpawnRetrievalActorEQSRequest; // 0x5e0
};

struct USizeBoxSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct AMurk {
	UMurkWaterModifierZoneComponent* WaterModifierZone; // 0x3d0
	USceneComponent* SceneRootComponent; // 0x3d8
	UStaticMeshComponent* InnerSheet; // 0x3e0
	UStaticMeshComponent* OuterSheet; // 0x3e8
	float UnderwaterSheetHeightScale; // 0x3f0
	UMaterialInstanceDynamic* InnerSheetMaterialInstance; // 0x3f8
	UMaterialInstanceDynamic* OuterSheetMaterialInstance; // 0x400
};

struct UFireGridAudioManager {
	FFireCellAudioParams FireAudioParams; // 0x28
	AActor* OwningActor; // 0x68
	UFirePropagator* FirePropagator; // 0x70
};

struct UDiggingComponent {
	FScriptMulticastDelegate OnFinishedDigging; // 0xd0
	FScriptMulticastDelegate OnFinishedBurying; // 0xe0
	AActor* Discoverer; // 0xf0
	FBuriedFactor BuriedFactor; // 0xf8
	EDiggingState State; // 0x10c
	FVector StartingLocation; // 0x110
	FRotator StartingRotation; // 0x11c
	UMaterialInstanceDynamic* ItemDynamicMaterial; // 0x128
	FItemDiggingMergedConfig DiggingConfig; // 0x130
	UDiggingSettings* DiggingSettings; // 0x158
	UWwiseObjectPoolWrapper* CachedSfxPool; // 0x160
};

struct UAnimationDataStore {
	TArray<FAnimationDataStoreEntry> Data; // 0x40
	TArray<FAnimationDataStoreLoadingEntry> LoadingData; // 0x50
};

struct UItemHealthComponent {
	float MinTimeSinceLastPredictedHealthChangeToFireChangedEventAgain; // 0xd8
	bool PreventDamageFromAllSourcesExceptWhitelistedSources; // 0xdc
	float MaxHealth; // 0xe0
	FCurrentHealthInfo CurrentHealthInfo; // 0xe4
	TArray<FContinuousHealthChange> ContinuousHealthChangeSources; // 0x100
	bool IsHealthAdjustLocked; // 0x110
};

struct UPetCategory_C {
	FName PetPreviewCamera; // 0x80
};

struct UPhysicsHandleComponent {
	UPrimitiveComponent* GrabbedComponent; // 0xc8
	float LinearDamping; // 0xe0
	float LinearStiffness; // 0xe4
	float AngularDamping; // 0xe8
	float AngularStiffness; // 0xec
	float InterpolationSpeed; // 0x150
};

struct UEnvQueryTest_InSunkenIslandSurfaceZone {
	UGameEventType* ExclusionType; // 0x170
};

struct UAshenLordAIFormComponent {
	UWwiseEvent* AshenLordVulnerabilityDamageAudioEvent; // 0x138
	FName AshenLordHeartBeatShaderParamName; // 0x140
	UMaterial* AshenLordBaseMaterial; // 0x148
	UCameraShake* CameraShake; // 0x168
	float ShakeInnerRadius; // 0x170
	float ShakeOuterRadius; // 0x174
	UMaterialInstanceDynamic* AshenLordDynamicMaterialInstance; // 0x178
	float CachedNormalisedHealthScalar; // 0x180
	bool IsInVulnerability; // 0x184
};

struct AWheel {
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x530
	FWheelAnimationProperties WheelAnimationProps; // 0x538
	FWheelEventProperties WheelEventProps; // 0x5b0
	UForceFeedbackEffect* CenteredForceFeedbackEffect; // 0x5b8
	UForceFeedbackEffect* TurbulenceForceFeedbackEffect; // 0x5c0
	FName TurbulenceForceFeedbackTag; // 0x5c8
	UForceFeedbackEffect* SteeringForceFeedbackEffect; // 0x5d0
	FName SteeringForceFeedbackTag; // 0x5d8
	UWwiseObjectPoolWrapper* EmitterPool; // 0x5e0
	UWwiseEvent* WheelStartedMovingEvent; // 0x5e8
	UWwiseEvent* WheelHasStoppedEvent; // 0x5f0
	UWwiseEvent* WheelIsStoppingEvent; // 0x5f8
	UWwiseEvent* DamagedWheelStartedMovingEvent; // 0x600
	UWwiseEvent* DamagedWheelHasStoppedEvent; // 0x608
	UWwiseEvent* DamagedWheelIsStoppingEvent; // 0x610
	UWwiseEvent* WheelCenteredEvent; // 0x618
	UWwiseEvent* FightingTurbulenceStartEvent; // 0x620
	UWwiseEvent* FightingTurbulenceStopEvent; // 0x628
	UWwiseEvent* SqueakyWheelEvent; // 0x630
	FName RTPCTurnRateName; // 0x638
	FName RTPCTurnAngleName; // 0x640
	FName WheelDamageRTPC; // 0x648
	bool DisableTurbulence; // 0x650
	FScriptMulticastDelegate OnWheelDamageStateChanged; // 0x658
	USceneComponent* RootSceneComponent; // 0x668
	UBoxComponent* PlayerCollisionComponent; // 0x670
	UShipDamageableComponent* WheelDamageComponent; // 0x678
	URepairableComponent* RepairableComponentWest; // 0x680
	URepairableComponent* RepairableComponentEast; // 0x688
	URepairableComponent* RepairableComponentSouth; // 0x690
	FVector ShipPartFireCellActorSpaceLocation; // 0x6e8
	float DamageSpeedMultiplierLevel1; // 0x718
	float DamageSpeedMultiplierLevel2; // 0x71c
	float DamageSpeedMultiplierLevel3; // 0x720
	UParticleSystem* WheelDamageParticleSystem; // 0x728
	float TurbulenceFactor; // 0x730
	float ServerWheelAngle; // 0x734
	float ServerWantedAngle; // 0x738
	float CenterJoltDuration; // 0x760
	float CenterJoltSlowDownFactor; // 0x764
	UDamageableShipPartAudioParams* WheelDamageLevelAudio; // 0x788
	float MaxWheelAngle; // 0x794
	float MinWheelAngle; // 0x798
	float SqueakAtAngle; // 0x79c
	EWheelDirection AllowedWheelDirection; // 0x7a0
	UNarratedShipDirectionComponent* NarratedShipDirectionComponent; // 0x7a8
};

struct AActorThatLogsErrorWhenTicked {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UTextureSwitchByGender {
	TArray<FTextureSwitchGenderEntry> Entries; // 0x220
};

struct UGameplayEffectExtension_ShieldTest {
	UGameplayEffect* ShieldRemoveGameplayEffect; // 0x48
};

struct UAddNPCOnShipStepDesc {
	UNPCOnShipDataAsset* NPCOnShipDataAsset; // 0x80
	FQuestVariableGuid NPCOnShipManager; // 0x88
};

struct UVotingInteractionComponent {
	UNotificationInputId* HoldInputId; // 0x120
	UNotificationInputId* ReleaseInputId; // 0x128
};

struct ALandscapeMeshProxyActor {
	ULandscapeMeshProxyComponent* LandscapeMeshProxyComponent; // 0x3d0
};

struct UAggressiveGhostShipDifficultyDataAsset {
	FWeightedProbabilityRange NumShotsToDestroyShip; // 0x28
	float PersistentDamageScale; // 0x48
	TArray<FAggressiveGhostHealthToVfxLevel> HealthToVFxLevel; // 0x50
	FWeightedProbabilityRangeOfRanges Speed; // 0x60
	FWeightedProbabilityRangeOfRanges TimeBetweenShots; // 0x90
	FWeightedProbabilityRangeOfRanges WraithballCooldownTime; // 0xc0
	FWeightedProbabilityRangeOfRanges TimeBetweenCheckingIfAShipIsBehindYou; // 0xf0
	float MaxDistanceBehindShipToBeMineTargetInMetres; // 0x120
	float MaxMineTargetAngle; // 0x124
	float ChanceOfDroppingMines; // 0x128
	FWeightedProbabilityRange NumMinesToDrop; // 0x130
	FWeightedProbabilityRangeOfRanges MinTimeBetweenDroppingMoreMines; // 0x150
	bool CanAnchorDrop; // 0x180
	FWeightedProbabilityRangeOfRanges TimeBetweenAnchorDrops; // 0x188
	FWeightedProbabilityRangeOfRanges AnchorDropWarningTime; // 0x1b8
	float TimeBetweenPortalJumpChecks; // 0x1e8
	float MinDistanceFromAnyShipsToConsiderAPortalJumpInMetres; // 0x1ec
	float TimeToBeAwayFromAnyShipsToConsiderPortalJumping; // 0x1f0
	float ChanceOfPortalJumping; // 0x1f4
	FWeightedProbabilityRangeOfRanges PortalJumpDuration; // 0x1f8
	float PortalJumpCooldown; // 0x228
};

struct UMovieSceneAudioSection {
	USoundBase* Sound; // 0x98
	float StartOffset; // 0xa0
	float AudioStartTime; // 0xa4
	float AudioDilationFactor; // 0xa8
	float AudioVolume; // 0xac
	FRichCurve SoundVolume; // 0xb0
	FRichCurve PitchMultiplier; // 0x128
	bool bSuppressSubtitles; // 0x1a0
};

struct UNPCCustomAnimationDataAsset {
	FNPCCustomAnimationDataStructure NPCCustomAnimationData; // 0x30
};

struct ABaseMerchantCrateItemProxy {
	URewindComponent* RewindComponent; // 0x7b8
	TScriptInterface<Class> MountpointInterface; // 0x7c0
	UWwiseEvent* FullGroundImpactSfx; // 0x7d0
};

struct AStaticMerchantCrateItemProxy {
	URewindComponent* RewindComponent; // 0x7b8
	TScriptInterface<Class> MountpointInterface; // 0x7c0
	UWwiseEvent* FullGroundImpactSfx; // 0x7d0
};

struct UDeliverableRedirectionActionDataAsset {
	TArray<UDeliverableRedirectionContextHandlerBase*> Handlers; // 0x28
	FText RedirectionTooltip; // 0x38
	FText VisitSingleFemaleNPCTooltip; // 0x70
	FText VisitSingleMaleNPCTooltip; // 0xa8
	FText VisitSingleCompanyNPCTooltip; // 0xe0
	TArray<FSingleNPCCompanyRedirectionData> VisitSingleCompanyNPCTooltipOverride; // 0x118
	TArray<FMultipleNPCCompaniesRedirectionData> VisitMultipleNPCCompaniesTooltip; // 0x128
	FText GoToOutpostTooltip; // 0x138
};

struct AWaterEmissionVolume {
	UWaterEmissionVolumeComponent* WaterEmissionVolumeComponent; // 0x3d0
};

struct UEditableGameplayTagQueryExpression_AllExprMatch {
	TArray<UEditableGameplayTagQueryExpression*> Expressions; // 0x28
};

struct UPlayNpcAnimationResource {
	FName AnimationNameToPlay; // 0x28
	USceneDialogueData* DialogueData; // 0x30
	UMusicZoneComponent* LocalMusicZone; // 0x38
	TArray<FText> SpeakingActorLocalisableNames; // 0x40
};

struct UMysteriousNoteSettings {
	int32_t LookAheadInMinutes; // 0x28
	float RequestTimeout; // 0x2c
	FStringAssetReference MysteriousNotesCompletionStringsAsset; // 0x30
	FStringAssetReference WieldableNoteDataAsset; // 0x40
	FStringAssetReference Image; // 0x50
	FStringAssetReference NotificationBackground; // 0x60
};

struct USoundNodeSoundClass {
	USoundClass* SoundClassOverride; // 0x38
};

struct UWaitForMechanismActivationStep {
	UWaitForMechanismActivationStepDesc* Desc; // 0x90
};

struct UPlaySequencerAnimationOnCutsceneActorStepDesc {
	ULevelSequence* LevelSequence; // 0x80
	float Delay; // 0x88
	FQuestVariableActor DockableBaseActor; // 0x90
	FQuestVariableActor SequencerCutSceneActor; // 0xa0
	FQuestVariableActor ActorToPossess; // 0xb0
	FQuestVariableArray AdditionalPossessables; // 0xc0
	FQuestVariableActor InteractingActor; // 0xd0
	FString PossessableName; // 0xe0
	USceneDialogueData* DialogueData; // 0xf0
	TArray<FText> LocalisableNames; // 0xf8
	bool IsLevelSequenceActorAlwaysRelevant; // 0x108
	bool IsLooping; // 0x109
	float SubtitleSphereRadiusInCm; // 0x10c
	ULevelSequence* FemaleLevelSequence; // 0x110
};

struct USoundNodeEnveloper {
	float LoopStart; // 0x38
	float LoopEnd; // 0x3c
	float DurationAfterLoop; // 0x40
	int32_t LoopCount; // 0x44
	char bLoopIndefinitely : 1; // 0x48
	char bLoop : 1; // 0x48
	UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x50
	UDistributionFloatConstantCurve* PitchInterpCurve; // 0x58
	FRuntimeFloatCurve VolumeCurve; // 0x60
	FRuntimeFloatCurve PitchCurve; // 0xe0
	float PitchMin; // 0x160
	float PitchMax; // 0x164
	float VolumeMin; // 0x168
	float VolumeMax; // 0x16c
};

struct UQuestBookAnimationInstance {
	FObjectMessagingDispatcher MessagingDispatcher; // 0x450
	TArray<FInputSequencePair> OneShotAnimationSequence; // 0x4f0
	TArray<FInputSequencePair> OneShotAnimationAlternateSequence; // 0x500
	TArray<FInputMontagePair> ContinuousUseAnimationSequence; // 0x510
	TArray<FInputMontagePair> ContinuousUseAnimationAlternateSequence; // 0x520
	UAnimSequenceBase* EquipItemAnimationSequence; // 0x530
	UAnimSequenceBase* UnequipItemAnimationSequence; // 0x538
	bool OneShotIsAlternate; // 0x540
	bool ContinuousIsAlternate; // 0x541
	bool DisableBlending; // 0x542
	UAnimMontage* CurrentMontage; // 0x620
};

struct UImpactListDataAsset {
	int32_t MaxAudioEventsPerDischarge; // 0x28
	TArray<FImpactProjectileData> ProjectileList; // 0x30
};

struct UMechanismAnimationEvent_ContinuousAudio {
	UWwiseEvent* StartEvent; // 0x40
	UWwiseEvent* StopEvent; // 0x48
	float StartTime; // 0x50
	float StopTime; // 0x54
	TScriptInterface<Class> AudioEmitterInterface; // 0x58
};

struct UBTDecorator_TestRange {
	FAIDataProviderFloatValue EnterRange; // 0x80
	FAIDataProviderFloatValue ExitRange; // 0xb0
	bool TestForOutsideRange; // 0xe0
};

struct UMaterialExpressionLightVector {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UClearProgressSpawnStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct APlayerBuriedItemsMapBundleItemProxy {
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x630
	UBoxComponent* BaseComponent; // 0x650
	FNetTimeStampCalculator MovementTimeStamp; // 0x688
	AActor* TutorialOwner; // 0x6f8
	bool IsTutorialProxy; // 0x700
	FReplicatedPhysicsState ReplicatedPhysicsState; // 0x708
	bool ForceKeepTickActive; // 0x758
	ECollisionChannel CachedAutoAimCollisionChannel; // 0x788
	ECollisionResponse CachedVehicleCollisionResponse; // 0x789
};

struct UDistributionVectorUniformCurve {
	FInterpCurveTwoVectors ConstantCurve; // 0x38
	char bLockAxes1 : 1; // 0x50
	char bLockAxes2 : 1; // 0x50
	EDistributionVectorLockFlags LockedAxes[0x2]; // 0x54
	EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x56
	char bUseExtremes : 1; // 0x5c
};

struct UBuoyancyComponent {
	FWaterBuoyancy BuoyancyParams; // 0xd0
	FBuoyancyComponentSinkingParams SinkingParams; // 0x200
	FBuoyancyComponentLockToSurfaceParams LockToSurfaceParams; // 0x234
	FBuoyancyComponentExclusionParams ExclusionParams; // 0x250
	bool DoClientSideSim; // 0x258
	UPrimitiveComponent* VisibleMesh; // 0x260
	float ChoppinessScalar; // 0x274
	EBuoyantObjectState State; // 0x278
};

struct UNPCDialogComponent {
	FText WelcomeMessage; // 0xd0
	UNPCDialogTreeData* Data; // 0x108
	UScriptStruct* DialogBlackboardSchema; // 0x110
	UNotificationInputId* InputID; // 0x118
	EActionDisplayPriority ActionDisplayPriority; // 0x120
	UWwiseObjectPoolWrapper* NpcDialoguePool; // 0x128
	UWwiseEvent* NpcDialogueWelcome; // 0x130
	UWwiseEvent* NpcDialogueBridge; // 0x138
	UWwiseEvent* NpcDialogueGoodbye; // 0x140
	bool CreateInteractionRules; // 0x148
	float DialogueInputFocusTimeout; // 0x14c
	FString TelemetryKey; // 0x150
	TArray<FMysteriousNotesCompletionEventsModelEntry> NoteCompletionIdents; // 0x160
	TArray<FPlayerStat> StatsToFireOnDialogStart; // 0x170
	TArray<UConditionalStatsTriggerType*> ConditionalStatsToFireOnDialogStart; // 0x180
	AController* InteractingController; // 0x298
	TArray<uint32_t> DialogOptionUsageCounter; // 0x2a0
	TArray<char> DialogBlackboard; // 0x2b0
	bool Disabled; // 0x2f4
	FGuid CurrentInteractionSessionId; // 0x2f8
};

struct UPersistenceIdentifierSettingsAsset {
	TArray<UPersistenceIdentifierMap*> PersistenceMapData; // 0x28
};

struct UBlendSpaceBase {
	FBlendParameter BlendParameters[0x3]; // 0x50
	FInterpolationParameter InterpolationParam[0x3]; // 0xb0
	float TargetWeightInterpolationSpeedPerSec; // 0xc8
	ENotifyTriggerMode NotifyTriggerMode; // 0xcc
	bool bRotationBlendInMeshSpace; // 0xcd
	int32_t NumOfDimension; // 0xd0
	float AnimLength; // 0xd4
	TArray<FPerBoneInterpolation> PerBoneBlend; // 0xd8
	TArray<FBlendSample> SampleData; // 0xe8
	TArray<FEditorElement> GridSamples; // 0xf8
};

struct UPhysicsConstraintTemplate {
	FName JointName; // 0x28
	FName ConstraintBone1; // 0x30
	FName ConstraintBone2; // 0x38
	FVector Pos1; // 0x40
	FVector PriAxis1; // 0x4c
	FVector SecAxis1; // 0x58
	FVector Pos2; // 0x64
	FVector PriAxis2; // 0x70
	FVector SecAxis2; // 0x7c
	char bEnableProjection : 1; // 0x88
	float ProjectionLinearTolerance; // 0x8c
	float ProjectionAngularTolerance; // 0x90
	ELinearConstraintMotion LinearXMotion; // 0x94
	ELinearConstraintMotion LinearYMotion; // 0x95
	ELinearConstraintMotion LinearZMotion; // 0x96
	float LinearLimitSize; // 0x98
	char bLinearLimitSoft : 1; // 0x9c
	float LinearLimitStiffness; // 0xa0
	float LinearLimitDamping; // 0xa4
	char bLinearBreakable : 1; // 0xa8
	float LinearBreakThreshold; // 0xac
	EAngularConstraintMotion AngularSwing1Motion; // 0xb0
	EAngularConstraintMotion AngularSwing2Motion; // 0xb1
	EAngularConstraintMotion AngularTwistMotion; // 0xb2
	char bSwingLimitSoft : 1; // 0xb4
	char bTwistLimitSoft : 1; // 0xb4
	float Swing1LimitAngle; // 0xb8
	float Swing2LimitAngle; // 0xbc
	float TwistLimitAngle; // 0xc0
	float SwingLimitStiffness; // 0xc4
	float SwingLimitDamping; // 0xc8
	float TwistLimitStiffness; // 0xcc
	float TwistLimitDamping; // 0xd0
	char bAngularBreakable : 1; // 0xd4
	float AngularBreakThreshold; // 0xd8
	FConstraintInstance DefaultInstance; // 0xe0
};

struct URareNetworkProfilerExporter {
	UObject* SupportedClass; // 0x28
	UObject* ExportRootScope; // 0x30
	TArray<FString> FormatExtension; // 0x38
	TArray<FString> FormatDescription; // 0x48
	int32_t PreferredFormatIndex; // 0x58
	int32_t TextIndent; // 0x5c
	char bText : 1; // 0x60
	char bSelectedOnly : 1; // 0x60
	char bForceFileOperations : 1; // 0x60
};

struct ULightWeightStatusEffectManagerComponent {
	UStatusRecipientResponseList* RecipientResponseList; // 0xe8
	TArray<FActiveStatusEffect> ActiveEffects; // 0xf0
};

struct UBTTask_RunBehaviorDynamic {
	FGameplayTag InjectionTag; // 0x60
	UBehaviorTree* DefaultBehaviorAsset; // 0x68
	UBehaviorTree* BehaviorAsset; // 0x70
};

struct USpawnActorAtPointStep {
	USpawnActorAtPointStepDesc* Desc; // 0x98
};

struct UIpNetDriver {
	char LogPortUnreach : 1; // 0x478
	char AllowPlayerPortUnreach : 1; // 0x478
	uint32_t MaxPortCountToTry; // 0x47c
};

struct UAIDioramaController {
	UAIDioramaDesc* AIDioramaDesc; // 0x30
	USceneDialogueData* DialogueData; // 0x38
	TArray<FAIDioramaPawn> SpawnedDioramaPawns; // 0x40
	AAIDiorama* AIDiorama; // 0x50
	UAISpawner* Spawner; // 0x58
};

struct UCapsuleComponent {
	float CapsuleHalfHeight; // 0x5a8
	float CapsuleRadius; // 0x5ac
};

struct UVoiceChatRenderer {
	UWwiseEvent* AttenuatedVoiceEvent; // 0x38
	UWwiseEvent* AttenuatedAndSpatialisedVoiceEvent; // 0x40
	UWwiseEvent* UnattenuatedVoiceEvent; // 0x48
	int32_t PreBufferInMilliseconds; // 0x50
	int32_t ChatRoutingListenerIndex; // 0x54
	float EmitterHoldInSeconds; // 0x58
};

struct UCommoditySourceComponent {
	FName NPCIdentifier; // 0xd0
};

struct UParticleModuleRotationOverLifetime {
	FRawDistributionFloat RotationOverLife; // 0x50
	char Scale : 1; // 0x88
};

struct UTaleRemoveStormAvoidanceAreaStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UObjectWithSettableWorld {
	UWorld* World; // 0x28
};

struct UPlayerWalletComponent {
	FWalletBalance LastKnownBalance; // 0xd0
};

struct UItemSnapshotMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct USpawnItemStep {
	USpawnItemStepDesc* Desc; // 0x90
};

struct UMeshMemoryConstraintScoringPlayerDistance {
	float MaxDistanceSqr; // 0x40
};

struct USeatStat_SitOnSinkingShip {
	TWeakObjectPtr<AActor> WeakCurrentShip; // 0x48
};

struct AStorageCrateItemProxy {
	URetractableComponent* RetractableComponent; // 0x790
};

struct UTaleQuestChooseLandOrSeaStep {
	USeaClueSiteTypesDataAsset* SeaClueSiteTypes; // 0xa8
};

struct AOnlineAthenaGameMode {
	APawn* GhostShipPawnClass; // 0x4e0
	UNetworkedEventsWhitelistDefinition* ServerNetworkedEventsWhitelistDefinition; // 0x4e8
	FGhostShipCoordinator GhostShipCoordinator; // 0x688
	FStorageContainerRefresher StorageContainerRefresher; // 0x8b8
	URiddleQuestDescGeneratorData* RiddleQuestDescGeneratorData; // 0x990
	float RespawnTimer; // 0x998
	float ContestRespawnTimer; // 0x99c
	float StorageContainerRefreshInterval; // 0x9a0
	int32_t ContainerRefreshBatchSize; // 0x9a4
};

struct UNotInActionStateRadialContext {
	TArray<UActionStateId*> TargetActionStates; // 0x28
};

struct UWaterSpoutVFXComponent {
	TArray<FWaterSpout> WaterSpouts; // 0xc8
	FVector SplashEffectPointBottomZ; // 0xd8
	UObject* SpoutParticleSystem; // 0xe8
	UObject* SplashParticleSystem; // 0xf0
	float WaterSplashDelayMin; // 0xf8
	float WaterSplashDelayMax; // 0xfc
	float SplashEffectVFXOffset; // 0x100
	float SplashSweepRadius; // 0x104
	bool ShouldSpawnKillPlaneAtSplash; // 0x108
	UStaticMesh* SplashKillPlaneMesh; // 0x110
	FVector SplashKillPlaneScale; // 0x118
	UStaticMeshComponent* SplashKillPlane; // 0x128
	TArray<FWaterSpout> ActiveWaterSpouts; // 0x130
};

struct UActionStatePriorityTableData {
	TArray<FActionStatePriorityRelationship> StateDefaultValue; // 0x28
	TArray<FActionStatePriorityList> PriorityTableEntry; // 0x38
};

struct UPlatformInterfaceWebResponse {
	FString OriginalURL; // 0x28
	int32_t ResponseCode; // 0x38
	int32_t Tag; // 0x3c
	FString StringResponse; // 0x40
	TArray<char> BinaryResponse; // 0x50
};

struct UBlendedLightingZoneComponent {
	UCurveFloat* FadeCurveNormalised; // 0x2d8
	UCurveFloat* FadeOutCurveNormalised; // 0x2e0
};

struct UPickupablePlayerBuriedItemMapComponent {
	float PickupTime; // 0xd0
	FText PickupActionDisplayString; // 0xd8
	FText PickupActionDisplayStringWhenFull; // 0x110
	UNotificationInputId* StartPickupInputId; // 0x148
};

struct UBTService_BlueprintBase {
	AAIController* AIOwner; // 0x70
	AActor* ActorOwner; // 0x78
	char bShowPropertyDetails : 1; // 0x90
	char bShowEventDetails : 1; // 0x90
};

struct UBTDecorator_RandomDiceRoll {
	FAIDataProviderFloatValue Chance; // 0x68
};

struct UBTTask_CopyBlackboardVector {
	FBlackboardKeySelector SrcBlackboardKey; // 0x60
	FBlackboardKeySelector TargetBlackboardKey; // 0x88
};

struct UInputAxisKeyDelegateBinding {
	TArray<FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28
};

struct UCargoRunMapData {
	TArray<UCompany*> Companies; // 0x28
	UCargoRunMapLayout* Layout; // 0x38
};

struct AGhostShipDoor {
	FScriptMulticastDelegate OnDoorOpenedDelegate; // 0x3d8
	TArray<FOpenForListEntry> OpenForList; // 0x3e8
	float DoorFullyOpenTimer; // 0x3f8
	UClientSkeletalMeshComponent* DoorMesh; // 0x400
	TArray<UMaterialInstanceDynamic*> DynamicMaterialInstances; // 0x408
	UAnimSequence* DoorOpeningAnimation; // 0x418
	UWwiseEvent* DoorOpeningSfx; // 0x420
	FBox DoorBoundingVolume; // 0x428
	FVector MaxBoundingVolume; // 0x444
	float DoorDeformationWhenFullyOpen; // 0x450
	bool BlockPlayerLeftGhostshipDelegate; // 0x454
};

struct UWaterHeightProviderComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTwitterIntegrationBase {
	TArray<FDelegateArray> AllDelegates; // 0x28
};

struct UWieldedItemComponent {
	UWieldableItemSetComponent* WieldableItemSetComponent; // 0x2b0
	AActor* ReplicatedCurrentlyWieldedItem; // 0x2b8
	AActor* CurrentlyWieldedItem; // 0x2c0
	int32_t EpochId; // 0x3a8
	FServerWieldSet PendingServerWieldSet; // 0x3b8
};

struct UHarbourComponent {
	float HarbourRadiusInCentimetres; // 0x2b8
};

struct ABurrowEruptArea {
	EBurrowEruptState BurrowState; // 0x3d0
	UExplosionComponent* ExplosionComponent; // 0x3d8
};

struct UMerchantQuestRequiredItemsDataAsset {
	TArray<FMerchantQuestRequiredItemsRankEntry> RankEntries; // 0x28
};

struct UContestMapLayout {
	FTreasureMapWidgetText CompanyName; // 0x28
	FTreasureMapWidgetText VoyageName; // 0x48
	FTreasureMapWidgetText ScoreboardTitle; // 0x68
	FTreasureMapWidgetText ScoreId; // 0x88
	TArray<FContestMapLayoutCrew> Crews; // 0xa8
	TArray<FContestMapLayoutScoreInfo> ScoreInfo; // 0xb8
	bool AutogenerateScoreboard; // 0xc8
	float ScoreboardTopOffset; // 0xcc
	float IconLeftOffset; // 0xd0
	float IconWidth; // 0xd4
	float NameLeftOffset; // 0xd8
	float NameScale; // 0xdc
	float ScoreLeftOffset; // 0xe0
	float ScoreScale; // 0xe4
	float ScoreboardSpacing; // 0xe8
	float UnderlineVerticalOffset; // 0xec
	float UnderlineScale; // 0xf0
	float ScoreReasonScale; // 0xf4
	float ScoreReasonTopOffset; // 0xf8
	float ScoreReasonLineStart; // 0xfc
	float ScoreReasonLineEnd; // 0x100
	float ScoreReasonTextRelativeTopOffset; // 0x104
	float ScoreReasonTextScale; // 0x108
};

struct UAggressiveGhostShipAnimationDataAsset {
	FRuntimeVectorCurve LocationCurve; // 0x28
	FRuntimeVectorCurve RotationCurve; // 0x198
	FRuntimeFloatCurve VelocityCurve; // 0x308
};

struct UActionStateMachineComponent {
	FScriptMulticastDelegate OnActionChangedOnTrack; // 0xe0
};

struct AVomitProjectile {
	bool CallParentFunctionalityOnImpactEffects; // 0x728
};

struct UFireGridCellSelectionParamsDataAsset {
	TArray<FFireGridCellSelectionParams> FireGridCellSelectionParams; // 0x28
};

struct UAnimNotifyState_HideMeshByBoneForDuration {
	FName BoneName; // 0x28
};

struct UVoteOnVoyageVotableComponent {
	float HoldToWithdrawVoyageTime; // 0x340
	UNotificationInputId* WithdrawActionInputId; // 0x348
	UNotificationInputId* WithdrawActionReleasedInputId; // 0x350
};

struct UMovieScene3DConstraintTrack {
	TArray<UMovieSceneSection*> ConstraintSections; // 0x88
};

struct UJwtAuthenticationTokenEditorSettings {
	FString TokenSecretKey; // 0x28
};

struct UMaterialExpressionReflectionVectorWS {
	FExpressionInput CustomWorldNormal; // 0x70
	char bNormalizeCustomWorldNormal : 1; // 0xa8
};

struct UNPCDialogOptionFireTutorialDialogOptionSelectedEvent {
	ETutorialDialogOption TutorialDialogOption; // 0x80
	FText Text; // 0x88
	bool CloseOnExectuted; // 0xc0
	int32_t LinkedDialog; // 0xc4
	bool RelevantOnServer; // 0xc8
};

struct ASeagulls {
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x3e0
	float LifetimerTimer; // 0x3f0
	float FadeTimer; // 0x3f4
	FScriptMulticastDelegate TriggerFadeIn; // 0x3f8
	FScriptMulticastDelegate TriggerFadeOut; // 0x408
	TArray<TWeakObjectPtr<AActor>> CachedActors; // 0x418
};

struct UAthenaCharacterBaseInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct ULandscapeInfo {
	ALandscape* LandscapeActor; // 0x28
	FGuid LandscapeGuid; // 0x44
	int32_t ComponentSizeQuads; // 0x54
	int32_t SubsectionSizeQuads; // 0x58
	int32_t ComponentNumSubsections; // 0x5c
	FVector DrawScale; // 0x60
};

struct UVaultKeyMappingDataAsset {
	TArray<FVaultKeyMapping> KeyMappings; // 0x28
};

struct UCustomStatusesService {
	UWorld* World; // 0x30
};

struct UAIShipBattlesDataAsset {
	TArray<FAIShipBattleParams> Battles; // 0x28
	TArray<FText> SkellyCrewNames; // 0x38
	FText EncounterCompleteText; // 0x48
};

struct UAnimCompress_RemoveEverySecondKey {
	int32_t MinKeys; // 0x40
	char bStartAtSecondKey : 1; // 0x44
};

struct URadialManagerInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AMessageInABottleItemProxy {
	TArray<FMessageInABottleVoyageEntry> VoyageRecipeList; // 0x798
	bool UsePremadeVoyages; // 0x7a8
	TArray<UVoyageDescDataAsset*> PremadeVoyages; // 0x7b0
	EEmergentVoyageSource EmergentSource; // 0x7c0
	UWwiseEvent* OnBottleOpenedSfx; // 0x7c8
};

struct UAITask {
	AAIController* OwnerController; // 0x58
};

struct USuperheatedWaterSetupDataAsset {
	float TimeBetweenHealthReduction; // 0x28
	float MinimumWaterDepthToCauseDamage; // 0x2c
	FWeightedProbabilityRangeOfRanges TimeBetweenLargeSurfaceEffects; // 0x30
	float LargeSurfaceEffectMinimumDistanceInMetres; // 0x60
	FRandomParticleSystemPicker LargeSurfaceEffects; // 0x68
	float EffectSpawnHeight; // 0x78
	float MurkStrengthToStartEffects; // 0x7c
	FWeightedProbabilityRangeOfRanges TimeBetweenSmallSurfaceEffects; // 0x80
	FWeightedProbabilityRange NumSmallSurfaceEffects; // 0xb0
	FDistanceThrottledRandomParticleSystemPicker SmallSurfaceEffects; // 0xd0
	float SmallSurfaceEffectNearbyPlayerRadiusInMetres; // 0xe0
	float SmallSurfaceEffectOffsetRadiusInMetres; // 0xe4
};

struct UShipHullDamageDataAsset {
	FShipHullDamageParams DamageParams; // 0x28
};

struct USpawnActorComponent {
	AActor* ChildActorClass; // 0x2b0
	AActor* ChildActor; // 0x2b8
};

struct UInstancedRopeComponent {
	UStaticMesh* StaticMesh; // 0x588
	TArray<FInstancedRopeParams> Ropes; // 0x590
	int32_t ShadowLOD; // 0x5a0
};

struct UMaterialExpressionActorPositionWS {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UTaleQuestAddRiddleMapUsingVariableStepDesc {
	FQuestVariableTextArray TextVariable; // 0x98
};

struct UAbandonedNoteWieldableRenderingComponent {
	int32_t CanvasWidth; // 0xc8
	int32_t CanvasHeight; // 0xcc
	UFont* BodyTextFont; // 0xd0
	UFont* TitleTextFont; // 0xd8
	float FontLineSpacing; // 0xe0
	float FontScale; // 0xe4
	FTreasureMapWidgetText BodyTextLayout; // 0xe8
	FTreasureMapWidgetText TitleTextLayout; // 0x108
	TArray<FTextEntryWithLayout> ExtraTextFields; // 0x128
	TScriptInterface<Class> WieldableRenderingInterface; // 0x138
};

struct UMeleeAttackDataAsset {
	FName AttackName; // 0x28
	float WarmUpDuration; // 0x30
	float StrikeDuration; // 0x34
	float RecoverMissDuration; // 0x38
	float RecoverHitDuration; // 0x3c
	float LungeMoveStartTime; // 0x40
	float LungeMoveDuration; // 0x44
	float LungeMoveMaxSpeed; // 0x48
	EMeleeWeaponMovementSpeed AttackMoveSpeed; // 0x4c
	float AttackMoveSpeedDeactivationAllowedWindow; // 0x50
	float ComboTime; // 0x54
	bool DefenderKnockbackEnabled; // 0x58
	FKnockBackInfo DefenderKnockback; // 0x5c
	bool DefenderKnockbackWhenBlockingEnabled; // 0xac
	FKnockBackInfo DefenderKnockbackWhenBlocking; // 0xb0
	bool AttackerKnockbackEnabled; // 0x100
	FKnockBackInfo AttackerKnockback; // 0x104
	bool AttackerKnockbackWhenBlockingEnabled; // 0x154
	FKnockBackInfo AttackerKnockbackWhenBlocking; // 0x158
	bool LockOnEnabled; // 0x1a8
	FAttackTimingWindow UninterruptableWindow; // 0x1ac
	float HitStartRange; // 0x1b4
	float HitEndRange; // 0x1b8
	float HitStartAngle; // 0x1bc
	float HitAngleDelta; // 0x1c0
	float HitSphereRadius; // 0x1c4
	float HitTimeOffset; // 0x1c8
	float HitDuration; // 0x1cc
	float AttackDamage; // 0x1d0
	UDamagerType* DamagerType; // 0x1d8
	EHealthChangedReason HealthChangeReason; // 0x1e0
	bool IsUnblockable; // 0x1e1
	bool StunOnMiss; // 0x1e2
	TArray<FStunAttackerOnHitSurfacePair> StunAttackerOnHitSurfaces; // 0x1e8
	bool StunOnHit; // 0x1f8
	float StunOnHitDurationPlayer; // 0x1fc
	float StunOnHitDurationCharacter; // 0x200
	EWieldableItemComplexOneShotLookUpType AnimationLookupType; // 0x204
	uint32_t AnimationLookupIndex; // 0x208
	EWieldableItemComplexOneShotAnimType AnimationType; // 0x20c
	UImpactProjectileId* ImpactId; // 0x210
	UCameraShake* AttackerHitLandedCameraShake; // 0x218
	UForceFeedbackEffect* AttackerHitLandedForceFeedbackEffect; // 0x220
	UCameraShake* DefenderHitReceivedCameraShake; // 0x228
	UForceFeedbackEffect* DefenderHitReceivedForceFeedbackEffect; // 0x230
	float ClampYawRange; // 0x238
	float ClampYawRate; // 0x23c
};

struct UTaleQuestLanternServiceDesc {
	UItemDesc* LanternDesc; // 0x30
};

struct UWidget {
	bool bIsVariable; // 0x28
	bool bCreatedByConstructionScript; // 0x29
	UPanelSlot* Slot; // 0x30
	bool bIsEnabled; // 0x38
	DelegateProperty bIsEnabledDelegate; // 0x3c
	FText ToolTipText; // 0x50
	DelegateProperty ToolTipTextDelegate; // 0x88
	UWidget* ToolTipWidget; // 0x98
	DelegateProperty ToolTipWidgetDelegate; // 0xa0
	ESlateVisibility Visiblity; // 0xb0
	ESlateVisibility Visibility; // 0xb1
	DelegateProperty VisibilityDelegate; // 0xb4
	char bOverride_Cursor : 1; // 0xc4
	EMouseCursor Cursor; // 0xc8
	bool bIsVolatile; // 0xc9
	FWidgetTransform RenderTransform; // 0xcc
	FVector2D RenderTransformPivot; // 0xe8
	UWidgetNavigation* Navigation; // 0xf0
	TArray<UPropertyBinding*> NativeBindings; // 0x128
};

struct UGameplayModMagnitudeCalculation {
	TArray<FGameplayEffectAttributeCaptureDefinition> RelevantAttributesToCapture; // 0x28
};

struct UMovieSceneAkAudioRTPCTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
	char bIsAMasterTrack : 1; // 0x98
};

struct ATreasureChest {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UTimedFlammableComponent {
	bool UseExtinguishTimer; // 0xe0
	bool AllowFireToBeReplenishedBeforeExtinguishTimerExpired; // 0xe1
	float TimeInSecondsUntilFireExtinguished; // 0xe4
};

struct USeasonPassEntitlementDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct UAshenWindsFlamethrowerController {
	FFlamethrowerCollisionsParams FlamethrowerCollisionParams; // 0x30
	UFireGridCellSelectionParamsDataAsset* FlamethrowerFirePropagationIgnitionParams; // 0x98
	FStatus FlamethrowerCollisionStatusEffect; // 0xa0
	float TimeUntilApplyStatusEffect; // 0xb8
	float TimeUntilIgniteFirePropagation; // 0xbc
	float TimeToConsiderActorOutsideFlame; // 0xc0
	float FlamethrowerCollisionDamageAmount; // 0xc4
	float DamagePerSecondInsideFlame; // 0xc8
	AAshenWindsSkull* AshenWindsSkull; // 0xd0
	TMap<AActor*, FActorInsideFlameInformation> ActorsInsideFlame; // 0xd8
};

struct APhysicsThruster {
	UPhysicsThrusterComponent* ThrusterComponent; // 0x3d0
};

struct UPlayerWorldLocationComponent {
	FName CurrentWorldLocation; // 0xc8
};

struct UQuestBookPageBundle {
	TArray<FStringAssetReference> Pages; // 0x28
};

struct UAdjustableWaterLevelPuzzleAudioParams {
	UWwiseObjectPoolWrapper* WaterLevelPuzzlePool; // 0x28
	UWwiseEvent* PuzzleWaterRiseStartEvent; // 0x30
	UWwiseEvent* PuzzleWaterRiseEndEvent; // 0x38
	UWwiseEvent* PuzzleWaterFallStartEvent; // 0x40
	UWwiseEvent* PuzzleWaterFallEndEvent; // 0x48
};

struct UInterpolatingMountpointComponent {
	float InterpolateSpeed; // 0x320
	float MaximumDistance; // 0x324
	FVector RelativeSnapLocation; // 0x328
	float RelativeYawToUseExtraTransform; // 0x334
	float RelativeYawRangeToUseExtraTransform; // 0x338
	FVector ExtraTranslation; // 0x33c
	FRotator ExtraRotation; // 0x348
	bool UseExtraTransform; // 0x354
};

struct UInterpTrackFloatParticleParam {
	FName ParamName; // 0x90
};

struct ABaseToggleAnimatedMechanismAction {
	USceneComponent* Root; // 0x528
	USceneComponent* Pivot; // 0x530
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0x538
	TArray<FMechanismAnimationEventContainer> AnimationEvents; // 0x550
};

struct UStatConditionTrackedShipTargetSelector {
	EStatConditionTarget Target; // 0x28
};

struct ULocationOnIslandClueDestinationDescriptor {
	FName IslandIdentifier; // 0x40
	FVector WorldPosition; // 0x48
};

struct UAsyncTaskDownloadImage {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFail; // 0x38
};

struct UEmissaryLevelSettingsAsset {
	TArray<FEmissaryLevelEntry> EmissaryLevelData; // 0x28
	FEmissaryPointBoostMultipliers BoostMultiplers; // 0x38
	FEmissaryFlagMeshReferences DefaultEmissaryFlagAssetReferences; // 0x40
	uint32_t NumberOfCustomisedShipPartsToGainBoost; // 0x60
};

struct UTutorial2019ContextualDelegatingComponent {
	UContextualTutorialComponent* ContextualTutorialComponent; // 0xd0
};

struct UBlackboardKeyType_Object {
	UObject* BaseClass; // 0x30
};

struct UBTTask_SailShipCircleTarget {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UParticleModuleEventGenerator {
	TArray<FParticleEvent_GenerateInfo> Events; // 0x50
};

struct UEffectBlendControllerComponent {
	FVisualFeedbackList Effects; // 0xc8
};

struct UShroudBreakerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UDebugTaleAddInstancedLevelStep {
	UDebugTaleAddInstancedLevelStepDesc* StepDesc; // 0x98
	FString InstancedLevelPath; // 0xa0
};

struct UTaleQuestAddXMarksMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableName IslandName; // 0x88
	FQuestVariableVector Location; // 0x98
};

struct UParticleModuleAlignRotationToVelocity {
	FRawDistributionFloat AdditionalAngle; // 0x50
};

struct UMaterialExpressionObjectPositionWS {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct URetractorComponent {
	TScriptInterface<Class> AttachedRetractable; // 0xd0
	USceneComponent* RetractDestinationComponent; // 0x110
	USceneComponent* RetractingComponent; // 0x118
};

struct AAdjustableWaterLevelPuzzle {
	USceneComponent* RootComp; // 0x3d8
	UChildActorComponent* WaterVolumeComponent; // 0x3e0
	AVariableFillRateWaterVolume* WaterVolumeActor; // 0x3e8
	TArray<FWaterPuzzleWaterLevel> WaterLevels; // 0x3f0
	int32_t DefaultWaterLevelIndex; // 0x400
	UCurveFloat* FillCurve; // 0x408
	UCurveFloat* DrainCurve; // 0x410
	UCurveFloat* ResetCurve; // 0x418
	float PuzzleResetTimeout; // 0x420
	FWaterPuzzleRepData ReppedData; // 0x424
};

struct UInteractableMock {
	AActor* ActorThatInteracted; // 0x38
};

struct UTaleQuestSequenceStep {
	UTaleQuestSequenceStepDesc* Desc; // 0xd0
	UTaleQuestStep* CurrentStep; // 0xd8
	TArray<FForkedStep> ForkedSteps; // 0xe8
};

struct UParticleModuleColor_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x308
};

struct UMerchantQuestDescData {
	TArray<UItemDesc*> AllMerchantCrates; // 0x28
	TArray<UItemDesc*> AllMerchantCargo; // 0x38
	TArray<UClass*> AllFauna; // 0x48
	TArray<UMerchantMapLayout*> MerchantMapLayouts; // 0x58
	FText DeliverByTimeTextFormat; // 0x68
	TArray<FText> DeliverByTimeHourFormat; // 0xa0
	TArray<FText> DeliverByTimeDayFormat; // 0xb0
	UPopUpMessageDesc* CollectCratesFromTraderPopupDesc; // 0xc0
	UCompany* MerchantCompany; // 0xc8
};

struct UBeachNPCSpawnFlowStarter {
	AAthenaPlayerController* AthenaPlayerController; // 0x28
	bool ShouldPlayIntroAnimatic; // 0x30
	bool ShouldDisableAllIntroBehaviour; // 0x31
	FFirstPersonAnimaticSettings IntroAnimationSettings; // 0x34
};

struct AModifyPlayerMovementOverlapActor {
	UStaticMeshComponent* MeshOverlapVolume; // 0x3d8
	UBoxComponent* BoxOverlapVolume; // 0x3e0
	EOverlapShapeType OverlapToUse; // 0x3e8
	float MaxSpeedScalar; // 0x3ec
	bool DisableSprint; // 0x3f0
	bool DisableJump; // 0x3f1
	USceneComponent* Root; // 0x3f8
	UPrimitiveComponent* OverlapVolume; // 0x400
};

struct URotatingAudioSourceComponent {
	UWwiseObjectPoolWrapper* RotatingObjectPool; // 0x110
	UWwiseEvent* PlayWwiseEvent; // 0x118
	UWwiseEvent* StopWwiseEvent; // 0x120
	FName PitchRtpcName; // 0x128
	FName RollRtpcName; // 0x130
	FName YawRtpcName; // 0x138
	float RtpcMax; // 0x140
};

struct ATestBeaconClient {
	AOnlineBeaconHostObject* BeaconOwner; // 0x3f8
	UNetConnection* BeaconConnection; // 0x400
	EBeaconConnectionState ConnectionState; // 0x408
};

struct UBTNode {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct AGeneratedMeshAreaLight {
	USpotLightComponent* SpotLightComponent; // 0x3e0
};

struct UDistributionVectorConstantCurve {
	FInterpCurveVector ConstantCurve; // 0x38
	char bLockAxes : 1; // 0x50
	EDistributionVectorLockFlags LockedAxes; // 0x54
};

struct UCharacterFootImpactComponent {
	TArray<FCharacterSocketCollisionDesc> SocketCollisionDesc; // 0xd0
	float SocketOffsetTolerance; // 0xe0
	float CapsuleOffsetTolerance; // 0xe4
};

struct UNavigationGraphNodeComponent {
	FNavGraphNode Node; // 0x2b0
	UNavigationGraphNodeComponent* NextNodeComponent; // 0x2c8
	UNavigationGraphNodeComponent* PrevNodeComponent; // 0x2d0
};

struct UTransientActorService {
	UWorld* World; // 0x30
	TArray<DelegateProperty> TransientActorDestroyedCallbacks; // 0x50
	TArray<FTransientActorEntry> Entries; // 0x78
};

struct UCoherentUIGTSettings {
	bool EnableLiveReload; // 0x28
	int32_t InspectorPort; // 0x2c
	int32_t WebdriverPort; // 0x30
	bool EnableWebSecurity; // 0x34
	bool EnableLocalization; // 0x35
	bool RunAsynchronous; // 0x36
	bool bRecursivelyBindUStructs; // 0x37
	bool LoadSystemFonts; // 0x38
	bool AllowPerformanceWarningsInEditor; // 0x39
	bool ShowWarningsOnScreen; // 0x3a
	ECoherentUIGTSettingsSeverity LogSeverity; // 0x3b
	bool bPaintToBackBuffer; // 0x3c
	bool bRespectTitleSafeZone; // 0x3d
	bool bRespectLetterboxing; // 0x3e
	FString HUDMaterialName; // 0x40
	FString CoUIResourcesRoot; // 0x50
	bool TickWhileGameIsPaused; // 0x60
	ECoherentUIGTMSAA MSAA; // 0x61
};

struct UNPCHintDialogueClueCreator {
	UExistingToPhasedNPCIndexAssetMap* NPCMappingAsset; // 0x30
	int32_t LootItemSpawnXYDistanceFromClueIncrementMin; // 0x38
	int32_t LootItemSpawnXYDistanceFromClueIncrementMax; // 0x3c
	int32_t LootItemSpawnZOffset; // 0x40
};

struct UInteractiveFoliageComponent {
	int32_t ForcedLodModel; // 0x598
	bool bOverrideMinLOD; // 0x59c
	bool bOverrideNavigationToDefaultObstacle; // 0x59d
	int32_t MinLOD; // 0x5a0
	UStaticMesh* StaticMesh; // 0x5a8
	bool bOverrideWireframeColor; // 0x5b0
	FColor WireframeColorOverride; // 0x5b4
	char bIgnoreInstanceForTextureStreaming : 1; // 0x5b8
	char bOverrideLightMapRes : 1; // 0x5b8
	int32_t OverriddenLightMapRes; // 0x5bc
	float StreamingDistanceMultiplier; // 0x5c0
	TArray<FGuid> IrrelevantLights; // 0x5c8
	TArray<FStaticMeshComponentLODInfo> LODData; // 0x5d8
	UMaterialInterface* CustomDepthMaterial; // 0x5e8
};

struct AHullDamage {
	USceneComponent* Root; // 0x3e8
	UMobileInstancedStaticMeshComponent* RepairPlanksMesh; // 0x3f0
	UShipDamageableComponent* ShipDamageComponent; // 0x3f8
	int32_t DamageZoneTickInterval; // 0x400
	AShipInternalWater* InternalWater; // 0x408
	TArray<ADamageZone*> DamageZones; // 0x410
	TArray<ADamageZone*> ActiveHullDamageZones; // 0x420
	TArray<ADamageZone*> BottomDeckDamageZones; // 0x430
	TArray<ADamageZone*> MiddleDeckDamageZones; // 0x440
	FWeightedProbabilityRange DamageZoneDeckDistribution; // 0x450
	UPersistenceIdentifierSettingsAsset* PersistenceIdentifierSettingsAsset; // 0x470
	TArray<URepairableComponent*> RepairablePoints; // 0x548
};

struct UTransientActorTaleService {
	TArray<AActor*> TrackedActors; // 0x80
	TArray<FTransientActorEntry> MigrationEntries; // 0x90
};

struct UPlayerStatsComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UContestWaitForItemHandInStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UGameplayTagsManager {
	TArray<UDataTable*> GameplayTagTables; // 0x140
};

struct UNPCLoadedOnClientService {
	TArray<FNPCData> AllNPCData; // 0x30
};

struct UAnimSingleNodeInstance {
	UAnimationAsset* CurrentAsset; // 0x440
	UVertexAnimation* CurrentVertexAnim; // 0x448
	FVector BlendSpaceInput; // 0x450
	TArray<FBlendSampleData> BlendSampleData; // 0x460
	FBlendFilter BlendFilter; // 0x470
	float CurrentTime; // 0x500
	float PlayRate; // 0x504
	DelegateProperty PostEvaluateAnimEvent; // 0x508
	char bLooping : 1; // 0x518
	char bPlaying : 1; // 0x518
	char bReverse : 1; // 0x518
};

struct UBoxReflectionCaptureComponent {
	float BoxTransitionDistance; // 0x340
	UBoxComponent* PreviewInfluenceBox; // 0x348
	UBoxComponent* PreviewCaptureBox; // 0x350
};

struct AAthenaSwimmingAIController {
	USwimmingPathFollowingComponent* SwimmingPathFollowingComponent; // 0x8f8
	bool IgnoreTargetsOutOfWater; // 0x900
	UCurveFloat* DistOfAttackerVsChanceToPursue; // 0x908
	TArray<FName> TimersToZeroIfStartingRevengeAttack; // 0x910
	FName DespawnRequiredBlackboardKey; // 0x920
	FName DespawnRequiredReasonBlackboardKey; // 0x928
	float PathingFailedWeight; // 0x930
	float PathingFailedThresholdToDespawn; // 0x934
};

struct UPetPreviewDataObject {
	TWeakObjectPtr<UPetEntitlementBaseDesc> RootItemDesc; // 0x1b8
	UPetEntitlementDesc* CurrentPetDesc; // 0x1c0
};

struct AMockControllerWithSubjectInterface {
	APawn* Pawn; // 0x3d8
	ACharacter* Character; // 0x3e8
	APlayerState* PlayerState; // 0x3f0
	USceneComponent* TransformComponent; // 0x3f8
	FRotator ControlRotation; // 0x400
	char bAttachToPawn : 1; // 0x40c
	FName StateName; // 0x418
	FScriptMulticastDelegate OnInstigatedAnyDamage; // 0x420
};

struct UArmoryChestViewModelComponent {
	TArray<UWeaponItemCategory*> Categories; // 0x180
	bool IncludeAllCategory; // 0x190
};

struct UDioramaDebugMenuEntries {
	TArray<FDioramaDebugMenuEntry> Dioramas; // 0x28
};

struct UStandardHullDragDynamicsDesc {
	UCurveFloat* WaterDragScalarIfAllSailsUp; // 0x28
	UCurveFloat* WaterDragScalarIfInReef; // 0x30
	FStandardHullDragDynamicsParameters Parameters; // 0x38
};

struct UParticleModuleParametersOverVelocity {
	float MinSpeed; // 0x68
	float MaxSpeed; // 0x6c
	FVector VelocityComponentsWeights; // 0x70
	FRawDistributionFloat SpawnRateOverSpeedScale; // 0x80
	FRawDistributionFloat LifetimeOverSpeedScale; // 0xb8
	FRawDistributionFloat SizeOverSpeedScale; // 0xf0
	FRawDistributionFloat InitialVelocityOverSpeedScale; // 0x128
	FRawDistributionFloat OpacityOverSpeedScale; // 0x160
};

struct ATreasureMap {
	UWieldableItemCanvasRenderingComponent* WieldableCanvasRenderingComponent; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7b0
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7b8
	EQuestMapIcon QuestMapIcon; // 0x7d2
};

struct UControllableIntentComponent {
	char AckToken; // 0xd8
	bool RequiresHandshake; // 0xd9
	float ServerIntent; // 0xdc
	float LocalIntent; // 0xe0
};

struct UTestWindZoneComponent {
	FWindTurbulenceParameters TurbulenceParams; // 0x2b8
	FWindZoneParams WindZoneParams; // 0x328
};

struct URiddleTextPhraseDataAsset {
	TArray<FText> Variants; // 0x28
};

struct UMaterialExpressionLogarithm2 {
	FExpressionInput X; // 0x70
};

struct AConstellationsService {
	float ViewBoundaryDegrees; // 0x3d8
	FStringAssetReference ConstellationsBespokeAudioEventsAssetRef; // 0x428
	UMaterialParameterCollectionInstance* AtmosphericMaterialParamsInstance; // 0x438
	UConstellationAudioEventsDataAsset* ConstellationBespokeAudioEventsListInstance; // 0x440
	FStringAssetReference AtmosphericMaterialParamsAssetRef; // 0x448
};

struct UBlockVolcanoTaleQuestService {
	UBlockVolcanoTaleQuestServiceDesc* Desc; // 0x60
};

struct UAILocomotionCompositeInputHandler {
	AActor* Owner; // 0x128
};

struct ATestWieldableInventoryItem {
	UInventoryItemComponent* InventoryItem; // 0x790
};

struct UAnimNotify_ToggleIK {
	TArray<ECharacterIKLimb> IKLimbsToAdjust; // 0x38
	bool Enabled; // 0x48
};

struct UEnvQueryGenerator_Donut {
	FAIDataProviderFloatValue InnerRadius; // 0x90
	FAIDataProviderFloatValue OuterRadius; // 0xc0
	FAIDataProviderIntValue NumberOfRings; // 0xf0
	FAIDataProviderIntValue PointsPerRing; // 0x120
	FEnvDirection ArcDirection; // 0x150
	FAIDataProviderFloatValue ArcAngle; // 0x170
	bool RandomiseRadius; // 0x1a0
	UEnvQueryContext* Center; // 0x1a8
	char bDefineArc : 1; // 0x1b0
};

struct USalvageItemSpawnComponent {
	TArray<FIslandItemSpawnLocationData> IslandSalvageLocationData; // 0x4e0
	float GlobalIslandChanceToSpawn; // 0x4f0
	float MinimumZOffSet; // 0x4f4
	float MaximumZOffset; // 0x4f8
	float MinimumRoll; // 0x4fc
	float MaximumRoll; // 0x500
	float MinimumPitch; // 0x504
	float MaximumPitch; // 0x508
	bool SunkenItem; // 0x50c
	UIslandItemDataAsset* SpawnLocationType; // 0x510
	FWeightedProbabilityRangeOfRanges SpawnedContainerContents; // 0x518
};

struct UClothingCategory {
	TArray<UClothingCategory*> PiratePreviewRemovals; // 0x78
	UAnimationAsset* PiratePreviewAnim; // 0x88
	FName PiratePreviewCamera; // 0x90
	bool PiratePreviewSpin; // 0x98
};

struct AMockCharacterWithAthenaPlayerCharacterMovementComponent {
	USkeletalMeshComponent* Mesh; // 0x448
	UCharacterMovementComponent* CharacterMovement; // 0x450
	UCapsuleComponent* CapsuleComponent; // 0x458
	FBasedMovementInfo BasedMovement; // 0x460
	FBasedMovementInfo ReplicatedBasedMovement; // 0x498
	FVector BaseTranslationOffset; // 0x4d0
	FQuat BaseRotationOffset; // 0x4e0
	char ReplicatedMovementMode; // 0x4f0
	bool bInBaseReplication; // 0x4f1
	float CrouchedEyeHeight; // 0x4f4
	char bIsCrouched : 1; // 0x4f8
	char bPressedJump : 1; // 0x4f8
	char bClientUpdating : 1; // 0x4f8
	char bClientWasFalling : 1; // 0x4f8
	char bClientResimulateRootMotion : 1; // 0x4f8
	char bSimGravityDisabled : 1; // 0x4f8
	char bServerMoveIgnoreRootMotion : 1; // 0x4f8
	float JumpKeyHoldTime; // 0x4fc
	float JumpMaxHoldTime; // 0x500
	FScriptMulticastDelegate OnReachedJumpApex; // 0x508
	FScriptMulticastDelegate OnCharacterMovementUpdated; // 0x528
	FRootMotionMovementParams ClientRootMotionParams; // 0x540
	TArray<FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x580
	FRepRootMotionMontage RepRootMotion; // 0x590
};

struct USetMechanismActionCutsceneNameStepDesc {
	FName CutsceneName; // 0x80
	FQuestVariableActor MechanismActor; // 0x88
};

struct USpawnPortalTaleStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AAbilitySystemTestPawn {
	UAbilitySystemComponent* AbilitySystemComponent; // 0x488
};

struct UGameplayTask_SpawnActor {
	FScriptMulticastDelegate Success; // 0x58
	FScriptMulticastDelegate DidNotSpawn; // 0x68
	AActor* ClassToSpawn; // 0x90
};

struct ACoherentUIGTSystem {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UAIShipEncounterSpawnParamsDataAsset {
	float SpawnDepth; // 0x28
	float Radius; // 0x2c
	float MinSafeSpawnDistanceFromOtherShips; // 0x30
	float TimeDelayBetweenWaves; // 0x34
	FRelativeSpawnLocationGeneratorParams RelativeSpawnLocationParams; // 0x38
};

struct ABrushShape {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct ASimpleBootyItemProxy {
	URetractableComponent* RetractableComponent; // 0x7a8
	UItemProxyShipTrackerComponent* ItemProxyShipTrackerComponent; // 0x7b0
};

struct UParticleModuleColor {
	char bUseGroupAColorForAllGroups : 1; // 0x50
	FRawDistributionVector StartColor; // 0x58
	FRawDistributionVector AdditionalStartColor[0x5]; // 0x90
	char bUseGroupAAlphaForAllGroups : 1; // 0x1a8
	FRawDistributionFloat StartAlpha; // 0x1b0
	FRawDistributionFloat AdditionalStartAlpha[0x5]; // 0x1e8
	char bClampAlpha : 1; // 0x300
	char bIgnoreComponentColorTint : 1; // 0x300
};

struct AWorldEventZoneService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UPlayfabPartyVoiceChannel {
	int32_t BandwidthPerSecondReservationInBytes; // 0x80
	float SaturationCooloffPeriodInSeconds; // 0x88
};

struct UMaterialExpressionWorldPosition {
	EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0x70
};

struct USirenTridentProjectileParams {
	ESirenTridentProjectileState ParameterState; // 0x28
	FExplosionInfo ExplosionParams; // 0x30
	float CollisionRadius; // 0x170
	float MaterialScale; // 0x174
	float MaterialScaleChangeDuration; // 0x178
	float LaunchSpeed; // 0x17c
	float ChargeTime; // 0x180
	float LifeSpan; // 0x184
	int32_t AmmoCost; // 0x188
	float VfxCustomParameterValue; // 0x18c
	FName ProjectileAudioSwitchState; // 0x190
	UWwiseEvent* TrailSfxEventStart; // 0x198
	UWwiseEvent* TrailSfxEventStop; // 0x1a0
	UImpactProjectileId* ImpactId; // 0x1a8
	UForceFeedbackEffect* FireForceFeedback; // 0x1b0
	UForceFeedbackEffect* SizeChangeForceFeedback; // 0x1b8
};

struct UOnTutorialStepNPCDialogConditional {
	FName TutorialStepName; // 0x30
};

struct UConditionalStatsAsset {
	TArray<FConditionalStat> ConditionalStats; // 0x28
};

struct UDistributionVectorConstant {
	FVector Constant; // 0x38
	char bLockAxes : 1; // 0x44
	EDistributionVectorLockFlags LockedAxes; // 0x48
};

struct UBTService_DetermineAIAbility {
	FBlackboardKeySelector BlockChangeAIAbilitiesKey; // 0x70
};

struct UMapIslandRenderResource {
	FName IslandName; // 0x28
};

struct UAggressiveGhostShipNamesDataAsset {
	TArray<FAggressiveGhostShipNameBucket> NameBuckets; // 0x28
};

struct UParticipatedInActorKillConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UIsShipCustomizedWithStatCondition {
	FRequiredShipCustomizationData RequiredShipCustomizationData; // 0x28
};

struct UAnimNotify_PlayMontage {
	UAnimMontage* MontageToPlay; // 0x38
};

struct UBTService_UpdateViewPitchForWieldedProjectileToHitTarget {
	FBlackboardKeySelector BlackboardKey; // 0x70
};

struct UGroupedInteractableAreaComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UInterpTrackDirector {
	TArray<FDirectorTrackCut> CutTrack; // 0x70
	char bSimulateCameraCutsOnClients : 1; // 0x80
};

struct UBowSplashContainer {
	bool EnableProbes; // 0x28
	float VisibleCullDistance; // 0x2c
	float HiddenCullDistance; // 0x30
	float SpeedThreshold; // 0x34
	float BowSplashFieldOfViewAngleAddition; // 0x38
	TArray<FBowSplashProbe> Probes; // 0x40
};

struct UBTDecorator_BlackboardBase {
	FBlackboardKeySelector BlackboardKey; // 0x68
};

struct UAIEncounterGenerationRecipeRankOrderList {
	TArray<UAIEncounterGenerationRecipe*> Recipes; // 0x28
	TArray<FAIEncounterGenerationRecipeFeatureBasedRankOrderList> FeatureBasedRecipeLists; // 0x38
};

struct UInGamePremiumShopViewModelComponent {
	UPetShopDataAsset* PetShopDataAsset; // 0x270
};

struct UStandardAnchorDynamicsDesc {
	FStandardAnchorDynamicsParameters Parameters; // 0x28
};

struct UComponentWithTestInterface {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBuriedItemStepFromLocationDesc {
	FQuestVariableVector ItemLocation; // 0x128
};

struct USkeletonAnimationInstance {
	FAthenaAnimationSkeletonAIFastPathData SkeletonAIFastPathData; // 0x3cf0
	UNPCHeldObjectData* HeldObjectList; // 0x3cf8
	AActor* LeftHandObject; // 0x3d00
	AActor* RightHandObject; // 0x3d08
	float ObjectOverlayBlendOutTime; // 0x3d10
	UAthenaAnimationCustomSkeletonAnimationData* CustomAnimationData; // 0x3d18
	FAthenaAnimationCustomSkeletonAnimationBlueprintData CustomAnimationBlueprintData; // 0x3d20
	ENPCCustomAnimationState PreviousCustomAnimationState; // 0x3d78
	UAnimMontage* CustomAnimationCurrentMontage; // 0x3d80
};

struct APlayerLoadingInteractionPoint {
	FVector InteractionBounds; // 0x510
	FName ThirdPersonMeshSocketAttachName; // 0x51c
	FText LoadPlayerDisabledToolTipText; // 0x528
	FText LoadingDisabledToolTipText; // 0x560
	ULoadingPointComponent* LoadingPointComponent; // 0x598
	UInteractableComponent* InteractionRegion; // 0x5a0
	USceneComponent* SceneComponent; // 0x5a8
	UPlayerNameplateLocationOverrideComponent* PlayerNameplateLocationOverrideComponent; // 0x5b0
};

struct ULightComponent {
	float Temperature; // 0x2e0
	char bUseTemperature : 1; // 0x2e4
	int32_t ShadowMapChannel; // 0x2e8
	float SourceRadius; // 0x2f0
	float MinRoughness; // 0x2f4
	float ShadowBias; // 0x2f8
	float ShadowSharpen; // 0x2fc
	float ShadowResMaxDynamicDegradation; // 0x300
	char InverseSquaredFalloff : 1; // 0x304
	char CastTranslucentShadows : 1; // 0x304
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x304
	char bAffectDynamicIndirectLighting : 1; // 0x304
	UMaterialInterface* LightFunctionMaterial; // 0x308
	FVector LightFunctionScale; // 0x310
	UTextureLightProfile* IESTexture; // 0x320
	char bUseIESBrightness : 1; // 0x328
	float IESBrightnessScale; // 0x32c
	float LightFunctionFadeDistance; // 0x330
	float DisabledBrightness; // 0x334
	char bEnableLightShaftBloom : 1; // 0x338
	float BloomScale; // 0x33c
	float BloomThreshold; // 0x340
	FColor BloomTint; // 0x344
	bool bUseRayTracedDistanceFieldShadows; // 0x348
	float RayStartOffsetDepthScale; // 0x34c
};

struct UGetCurrentQuestInfoStep {
	UGetCurrentQuestInfoStepDesc* Desc; // 0x90
};

struct USelectionOfSirenStatues {
	TArray<UClass*> Statues; // 0x28
};

struct UStreamingSettings {
	char AsyncLoadingThreadEnabled : 1; // 0x38
	char WarnIfTimeLimitExceeded : 1; // 0x38
	float TimeLimitExceededMultiplier; // 0x3c
	float TimeLimitExceededMinTime; // 0x40
	int32_t MinBulkDataSizeForAsyncLoading; // 0x44
	float AsyncIOBandwidthLimit; // 0x48
	char UseBackgroundLevelStreaming : 1; // 0x4c
	char AsyncLoadingUseFullTimeLimit : 1; // 0x4c
	float AsyncLoadingTimeLimit; // 0x50
	float PriorityAsyncLoadingExtraTime; // 0x54
	float LevelStreamingActorsUpdateTimeLimit; // 0x58
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x5c
};

struct ADirectionalLight {
	ULightComponent* LightComponent; // 0x3d0
	char bEnabled : 1; // 0x3d8
};

struct UKnockbackAIAbilityParams {
	FExplosionInfo ExplosionInfo; // 0xc8
};

struct UFootstepIDAsset {
	FName FootstepName; // 0x28
};

struct UShipPointParticleComponent {
	TArray<EShipRegion> ValidShipRegions; // 0x868
	TArray<FVector> SpawnPts; // 0x878
	FName SpawnRateParam; // 0x888
	FVector2D ParamValueRange; // 0x890
	FVector2D TimePerEmitMin; // 0x898
	FVector2D TimePerEmitMax; // 0x8a0
	EShipParticleParam ParamType; // 0x8a8
};

struct UOpenableItemMaterialAnimationReactionComponent {
	TArray<FOpenableItemMaterialAnimationReactionComponentAnimationNameAndSfxCueSet> AnimNameSets; // 0xd8
	UMaterialAnimatorComponent* MaterialAnimatorComponent; // 0xe8
};

struct ANavigationObjectBase {
	UCapsuleComponent* CapsuleComponent; // 0x3d8
	UBillboardComponent* GoodSprite; // 0x3e0
	UBillboardComponent* BadSprite; // 0x3e8
	char bIsPIEPlayerStart : 1; // 0x3f0
};

struct UMaterialExpressionObjectBounds {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UBTTask_SetBlackboardFloatValueFromWeightedArray {
	FAIDataProviderStructValue WeightedArrayFromParams; // 0x88
};

struct UMaterialExpressionPower {
	FExpressionInput Base; // 0x70
	FExpressionInput Exponent; // 0xa8
	float ConstExponent; // 0xe0
};

struct USceneDialoguePointWithConditional {
	USceneDialoguePoint* Point; // 0x28
	UNPCDialogConditional* Conditional; // 0x30
};

struct UMechanismAnimationEvent_ContinuousVFX {
	float StartTime; // 0x78
	float StopTime; // 0x7c
	FMechanismAnimationEvent_VFXParams VFXParams; // 0x80
};

struct AAsymmetricClientObject {
	UBoxComponent* BaseComponent; // 0x3e8
	UStaticMeshMemoryConstraintComponent* ThirdPersonMesh; // 0x3f0
	UWaterInteractionComponent* WaterInteractionComponent; // 0x3f8
	UBuoyancyComponent* BuoyancyComponent; // 0x400
	USpawnDependentTrackedOwnerComponent* SpawnDependentTrackedOwnerComponent; // 0x408
	FRotator RotationWhenPlacingWorldProxy; // 0x410
	float ZOffsetWhenPlacingWorldProxy; // 0x41c
};

struct UTaleQuestFramedStep {
	TArray<UTaleQuestService*> Services; // 0x98
	UTaleQuestFramedStepDesc* FrameDesc; // 0xa8
	UScriptStruct* StructForCollector; // 0xc0
	UScriptStruct* LocalStructForCollector; // 0xc8
};

struct UFoliageInstancedStaticMeshComponent {
	FScriptMulticastDelegate OnInstanceTakePointDamage; // 0x768
	FScriptMulticastDelegate OnInstanceTakeRadialDamage; // 0x778
};

struct UTunnelDesc {
	FString MatchmakingPlayModeTag; // 0x28
	ULevelSequence* VignetteSequence; // 0x38
	int32_t VignetteHeightCorrection; // 0x40
	TArray<FShipSpecificData> ShipSpecificVignettes; // 0x48
	bool EnableDynamicFogTransition; // 0x58
	float SecondsAfterVignetteSequenceStartsBeforeTransitioningFog; // 0x5c
	float SecondsAfterVignetteSequenceStartsBeforeTriggeringEndSequence; // 0x60
	TArray<FShipCameraAnimation> EndSequenceCameraAnimation; // 0x68
	USceneDialogueData* DialogueData; // 0x78
	TArray<FText> LocalisableNames; // 0x80
	AActor* Endpoint; // 0x90
	FVector EndPointOffset; // 0x98
	UWwiseEvent* MusicOfTheSeasEvent; // 0xa8
	UWwiseEvent* MusicOfTheSeasStop; // 0xb0
	UWwiseObjectPoolWrapper* MusicOfTheSeasPool; // 0xb8
	UWwiseEvent* AmbienceSfxEvent; // 0xc0
	UWwiseEvent* AmbienceSfxStop; // 0xc8
	UWwiseObjectPoolWrapper* AmbienceSfxPool; // 0xd0
	bool ForceRespawnPlayersOnShipInFailureScenarios; // 0xd8
	bool DropCapstanOnTunnelExit; // 0xd9
	FStringAssetReference SpawnLocation; // 0xe0
	bool SpawnShipOutsidePortalOnDestinationServer; // 0xf0
	bool SpawnShipOutsidePortalInFailureScenarios; // 0xf1
	AActor* ShipTeleportEffectsClass; // 0xf8
};

struct UAISpawnWaveSequenceRankProgression {
	TArray<FAISpawnWaveSequenceRankMapping> RankMappings; // 0x28
	int32_t NumberOfRanks; // 0x38
};

struct AShipwreckService {
	TArray<TScriptInterface<Class>> ToMoveList; // 0x3d8
	FWeightedProbabilityRange WreckProbRange; // 0x3e8
	AShipwreck* WreckClass; // 0x408
	UShipwreckSiteGeneratorComponent* SiteGenerator; // 0x410
	UShipwreckNameGeneratorAbstract* NameGenerator; // 0x418
	float ShipwreckLifetime; // 0x420
	float PlayerDistanceMoveThreshold; // 0x424
	float ShipDistanceMoveThreshold; // 0x428
	FWreckSpawnQueryPriorityData SpawnQueryData; // 0x480
	TArray<TScriptInterface<Class>> WreckList; // 0x490
	TArray<FCustomWreckEntry> ActiveCustomWreckList; // 0x4b0
};

struct UBTDecorator_KeepInCone {
	float ConeHalfAngle; // 0x68
	FBlackboardKeySelector ConeOrigin; // 0x70
	FBlackboardKeySelector Observed; // 0x98
	char bUseSelfAsOrigin : 1; // 0xc0
	char bUseSelfAsObserved : 1; // 0xc0
};

struct USafeZone {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct AServerMigrationSerialisationDetailsTestsMigrationActorWithRootComponentSimulatePhysicsEnabledByDefault {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UCommodityDemandFrameworkSettings {
	float DemandRefreshFrequencyInSeconds; // 0x38
	FName DemandCollectionId; // 0x3c
	int32_t CommodityPurchaseLockoutInGameDays; // 0x44
	int32_t InGameHourWhenCommoditiesRestock; // 0x48
	FGameTime CommodityRedemptionTimeOutPeriodInDays; // 0x50
	FStringAssetReference NPCListAsset; // 0x58
};

struct UWieldablePetHungerDataAsset {
	float TimeToStartEating; // 0x28
	float EdibleCheckRadius; // 0x2c
	FWieldablePetHungerAnimationData EatingAnimData; // 0x30
	FWieldablePetHungerAnimationData FedAnimData; // 0x38
	FWieldablePetHungerAnimationData SickAnimData; // 0x40
	FWieldablePetHungerAnimationData RefuseAnimData; // 0x48
	ECollisionChannel CollisionChannel; // 0x50
};

struct UAthenaAIControllerSharedParamValuesDataAsset {
	bool OverrideMeshScale; // 0x28
	float MeshScale; // 0x2c
	bool OverrideCurrentTargetPerceivedNotVisibleAge; // 0x30
	float CurrentTargetPerceivedNotVisibleAge; // 0x34
	TArray<FAthenaAIControllerSenseSettingOverride> AIStrategySenseSettingOverrides; // 0x38
	FAthenaAIControllerHealthCustomisation HealthCustomisationValues; // 0x48
	TArray<FAthenaAIControllerParamValue> InitialBlackboardValues; // 0x58
	TArray<FAthenaAIControllerParamValue> NamedControllerParams; // 0x68
	TArray<FAthenaAIControllerWeightedRangesParamValue> NamedWeightedRangesControllerParams; // 0x78
};

struct UInputKeyDelegateBinding {
	TArray<FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x28
};

struct UEnvQueryTest_InGameEventExclusionZone {
	float Radius; // 0x170
};

struct UAirBubbleComponent {
	float Radius; // 0x2b0
};

struct UVectorFieldStatic {
	int32_t SizeX; // 0x48
	int32_t SizeY; // 0x4c
	int32_t SizeZ; // 0x50
};

struct UStaticAISpawnCondition {
	bool ShouldApplyOverride; // 0x30
};

struct UAthenaAIWeightedRangesDataProvider {
	FName ParamName; // 0x28
	FWeightedProbabilityRangeOfRanges WeightedRangesValue; // 0x30
};

struct UAtmosphericPressureService {
	TArray<TScriptInterface<Class>> RegisteredAtmosphericPressureZones; // 0x30
};

struct UMapTableInputComponent {
	AMapTable* MapTable; // 0x280
};

struct UAIDataProvider_QueryParamFromCustomObjectProperty {
	FCustomDataProviderObjectPropertySelector ObjectProperty; // 0x28
	float FloatValue; // 0x38
	int32_t IntValue; // 0x3c
	bool BoolValue; // 0x40
};

struct UFireworkStatsComponent {
	float FlareRadius; // 0xc8
	int32_t NumberOfFireworksFiredAtNight; // 0xd0
	float FireworksFiredAtNightRadius; // 0xd4
	float FiredFireworksAtNightTimer; // 0xd8
};

struct UWwiseIDsDatabase {
	TArray<uint32_t> StateGroupIDs; // 0x28
	TArray<FName> StateGroupNames; // 0x38
	TArray<uint32_t> StateValueIDs; // 0x48
	TArray<FName> StateValueNames; // 0x58
	TArray<uint32_t> SwitchGroupIDs; // 0x68
	TArray<FName> SwitchGroupNames; // 0x78
	TArray<uint32_t> SwitchStateIDs; // 0x88
	TArray<FName> SwitchStateNames; // 0x98
};

struct UBTDecorator_MultipleRandomDiceRolls {
	TArray<FChanceAndBlackboardKeyPair> ChanceKeyPairs; // 0x68
};

struct UReviveEffectsDataAsset {
	UMaterialParameterCollection* ReviveMaterialParameterCollection; // 0x28
	FName AstralCordReviveInProgressMaterialCollectionScalarParameterName; // 0x30
	FName AstralCordFadeMaterialCollectionScalarParameterName; // 0x38
	FName AstralCordBorderMaterialCollectionScalarParameterName; // 0x40
	UCurveFloat* AstralCordBorderParamValueByAbsoluteTimeSinceDeath; // 0x48
	UMaterial* ReviveePostProcessMaterial; // 0x50
	float GhostShaderGhostEffectInterpolationValue; // 0x58
	float ReviveSuccessfulEffectDuration; // 0x5c
	UObject* ReviveSuccessfulOneShotVFX; // 0x60
	UObject* ReviveSuccessfulOneShotVFX_Revivee; // 0x68
	UObject* ReviveInProgressLoopingVFX; // 0x70
	float AstralCordReviveInProgressInterpolationSpeed; // 0x78
	float AstralCordReviveNotInProgressInterpolationSpeed; // 0x7c
	UObject* ContinuousBodyLoopingVFX; // 0x80
	float AstralCordFadeInInterpolationSpeed; // 0x88
	float AstralCordFadeOutInterpolationSpeed; // 0x8c
	float DefaultAstralCordHeight; // 0x90
	float AstralCordHeightOffsetFromTheGhost; // 0x94
	UObject* DeadPlayerBodyEvaporatesOneShotVFX; // 0x98
	UWwiseEvent* OtherPlayers_ReviveGhostAmbientStart; // 0xa0
	UWwiseEvent* OtherPlayers_ReviveGhostAmbientStop; // 0xa8
	UWwiseEvent* DeadPlayer_ReviveInProgressStart; // 0xb0
	UWwiseEvent* DeadPlayer_ReviveInProgressStop; // 0xb8
	UWwiseEvent* OtherPlayers_ReviveInProgressStart; // 0xc0
	UWwiseEvent* OtherPlayers_ReviveInProgressStop; // 0xc8
};

struct UVoyageLocationOnlyNamedIslandListDataAsset {
	TArray<FName> OnlyNamedIslandsList; // 0x28
	UVoyageLocationFeatureToggledOnlyNamedIslandListDataAsset* FeatureToggledOnlyNamedIslandsListAsset; // 0x38
};

struct AOneShotAnimatedMechanismAction {
	USceneComponent* Root; // 0x520
	USceneComponent* Pivot; // 0x528
	FMechanismTransformAnimationCurve Animation; // 0x530
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0x538
	FMechanismAnimationEventContainer AnimationEvents; // 0x540
};

struct AShipNetProxy {
	bool EmissaryFlagActive; // 0x400
	FStringAssetReference EmmissaryFlagTextureReference; // 0x408
	UMaterialInstanceDynamic* EmmissaryFlagMaterial; // 0x418
	TArray<AShipInteractableLight*> ShipLanterns; // 0x428
	int32_t LanternBits; // 0x448
};

struct UClueDescriptorGenerator {
	UClueDescriptor* DescriptorType; // 0x28
	TArray<UClueDestinationDescriptor*> SupportedDestinationTypes; // 0x30
};

struct UMaterialExpressionBumpOffset {
	FExpressionInput Coordinate; // 0x70
	FExpressionInput Height; // 0xa8
	FExpressionInput HeightRatioInput; // 0xe0
	float HeightRatio; // 0x118
	float ReferencePlane; // 0x11c
	uint32_t ConstCoordinate; // 0x120
};

struct ANavLinkProxy {
	TArray<FNavigationLink> PointLinks; // 0x3e0
	TArray<FNavigationSegmentLink> SegmentLinks; // 0x3f0
	UNavLinkCustomComponent* SmartLinkComp; // 0x400
	bool bSmartLinkIsRelevant; // 0x408
	FScriptMulticastDelegate OnSmartLinkReached; // 0x410
};

struct UCoherentUIGTInstancedComponent {
	FString URL; // 0x310
	UMaterialInstanceDynamic* HUDMaterialInstance; // 0x328
	APlayerController* PlayerController; // 0x330
};

struct UMastRepairableComponent {
	FScriptMulticastDelegate OnRepairableStateChanged; // 0x130
	FScriptMulticastDelegate OnDamageLevelChanged; // 0x140
	FScriptMulticastDelegate OnRepairMounted; // 0x150
	float InteractionPointDepthOffset; // 0x160
	float MaximumRepairAngleToRepairer; // 0x164
	float MaximumRepairDistance; // 0x168
	float RepairTime; // 0x16c
	URepairTypeId* RepairType; // 0x170
	USceneComponent* RepairMountParent; // 0x178
	FTransform RepairMountOffset; // 0x180
	FName RepairMountSocket; // 0x1b0
	int32_t MaxDamageLevel; // 0x1b8
	UAIInteractableType* AIInteractionType; // 0x1c0
	FVector AIInteractionOffset; // 0x1c8
	FRepairableAuthoritiveRepairState AuthorityRepairableState; // 0x1d8
	ERepairableState RepairableState; // 0x1f0
	int32_t DamageLevel; // 0x1f4
	EInteractableState InteractionState; // 0x1f8
};

struct UCoherentContentEngagementMessage {
	TArray<FFeatureToggledStringAssetReferenceEntry> Entries; // 0x28
	UObject* ClassType; // 0x38
};

struct AContinuousAnimatedMechanismAction {
	UMechanismActionComponent* MechanismActionComponent; // 0xa20
};

struct UEmoteFlourishDesc {
	TArray<FEmoteFlourishCategoryMapping> FlourishMappings; // 0x110
	EEmoteFlourishType FlourishType; // 0x120
};

struct UCommandlet {
	FString HelpDescription; // 0x28
	FString HelpUsage; // 0x38
	FString HelpWebLink; // 0x48
	TArray<FString> HelpParamNames; // 0x58
	TArray<FString> HelpParamDescriptions; // 0x68
	char IsServer : 1; // 0x78
	char IsClient : 1; // 0x78
	char IsEditor : 1; // 0x78
	char LogToConsole : 1; // 0x78
	char ShowErrorCount : 1; // 0x78
};

struct UGetVoyageDifficultyFromRankStepDesc {
	EVoyageDifficultyScope VoyageType; // 0x80
	FQuestVariableInt Difficulty; // 0x88
};

struct UStatusResponseAIShipSetMaxSpeedMultiplier {
	float MaxSpeedMultiplier; // 0x30
};

struct UArenaWorldMarkerOnProxyComponent {
	UWorldMarkerVariant* MarkerVariant; // 0xc8
};

struct ULoadSequencerAnimationStep {
	ULoadSequencerAnimationStepDesc* StepDesc; // 0x90
	ASequencerCutSceneActor* SequencerCutSceneActor; // 0x98
	AActor* TargetToSpawnActor; // 0xa0
};

struct ADamageableCargoRunCrateItemProxy {
	UGatedHealthComponent* GatedHealthComponent; // 0x7e8
	UVisualHealthResponseComponent* VisualHealthResponseComponent; // 0x7f0
	ULightWeightStatusEffectManagerComponent* LightweightStatusEffectComponent; // 0x7f8
};

struct UActorCoherentViewComponent {
	FName TargetPrimitiveName; // 0x3e8
};

struct UPhrasesRadialDataAsset {
	TArray<FPhraseData> Phrases; // 0x28
};

struct UWieldableItemSetComponent {
	TArray<FWieldedItemData> WieldableItems; // 0xd0
	TArray<UItemCategory*> LockedCategories; // 0xe0
};

struct ALimpingTestActor {
	ULimpingComponent* Limping; // 0x3d0
};

struct UAddNPCOnShipStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UCoralShieldAbilityParams {
	float ShieldEffectRadius; // 0xc8
	float DamageNeededToBreakShield; // 0xcc
	float ShieldLifeTime; // 0xd0
	FStatus CoralShieldStatusEffect; // 0xd8
	UDamageableVulnerabilityLayer* VulnerabilityToApplyToSelf; // 0xf0
	float DelayBeforeSFXPlays; // 0xf8
};

struct UFireSettingsDataAsset {
	float CharacterOnFireEffectRadius; // 0x28
	ECollisionChannel TraceChannel; // 0x2c
	float CharacterToCharacterPropagationInterval; // 0x30
	float MaxInitialPropagationOffset; // 0x34
	FStatus BurnStatus; // 0x38
	FStatus FirePropagationStatus; // 0x50
	uint32_t MaxComponentsToTickPerFrame; // 0x68
};

struct UAthenaUserSettingsDefaults {
	TArray<int32_t> MaxFPSOptions; // 0x28
	FAimSensitivitySettingsDefaults AimSensitivitySettings; // 0x38
};

struct AInteractableMockActor {
	AActor* ActorThatInteracted; // 0x3e8
	TArray<UNotificationInputId*> CanInteractNotifications; // 0x3f8
	UCapsuleComponent* PrimitiveComponent; // 0x408
	UInteractableComponent* InteractableComponent; // 0x410
	UActionRulesComponent* ActionRulesComponent; // 0x418
	EInteractableState CurrentInteractionState; // 0x420
	bool CanSetInteractionState; // 0x421
};

struct UMaterialExpressionCustom {
	FString Code; // 0x70
	ECustomMaterialOutputType OutputType; // 0x80
	FString Description; // 0x88
	TArray<FCustomInput> Inputs; // 0x98
	FString DeclarationCode; // 0xa8
};

struct UMaterialExpressionFontSample {
	UFont* Font; // 0x70
	int32_t FontTexturePage; // 0x78
};

struct UCargoRunCrateMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct URegionMapDataAsset {
	FRegionMapData RegionData; // 0x28
};

struct UNPCDialogOptionShop {
	FText Text; // 0x80
	UShopDesc* ShopDesc; // 0xb8
	AController* Interactor; // 0xc0
};

struct ATestActionStateCreatorDefinition {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UMaterialParameterCollectionInstance {
	UMaterialParameterCollection* Collection; // 0x30
	UWorld* World; // 0x38
};

struct ATreasureVaultTable {
	UVaultKeyMappingDataAsset* VaultKeyMapping; // 0x3f8
};

struct UWidgetBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UDialogueVoice {
	EGrammaticalGender Gender; // 0x28
	EGrammaticalNumber Plurality; // 0x29
	FGuid LocalizationGUID; // 0x2c
};

struct UAbilitySystemComponent {
	TArray<FAttributeDefaults> DefaultStartingData; // 0x130
	TArray<UAttributeSet*> SpawnedAttributes; // 0x140
	FPredictionKey ReplicatedPredictionKey; // 0x150
	float OutgoingDuration; // 0x1e0
	float IncomingDuration; // 0x1e4
	FGameplayAbilitySpecContainer ActivatableAbilities; // 0x1e8
	TArray<UGameplayAbility*> AllReplicatedInstancedAbilities; // 0x2f8
	TArray<AGameplayAbilityTargetActor*> SpawnedTargetActors; // 0x4b8
	FGameplayAbilityRepAnimMontage RepAnimMontageInfo; // 0x4c8
	FGameplayAbilityLocalAnimMontage LocalAnimMontageInfo; // 0x4f8
	AActor* OwnerActor; // 0x5c8
	AActor* AvatarActor; // 0x5d0
	FActiveGameplayEffectsContainer ActiveGameplayEffects; // 0x5f0
	FActiveGameplayCueContainer ActiveGameplayCues; // 0x958
	TArray<char> BlockedAbilityBindings; // 0xb48
};

struct AGhostShipTickManager {
	TArray<AActor*> GhostShipActors; // 0x3d0
};

struct UBTDecorator_ActionState {
	EActionStateMachineTrackId TrackId; // 0x68
	UActionStateId* StateId; // 0x70
};

struct UIsTargetAllianceMemberStatCondition {
	UStatConditionTargetSelector* TargetSelector; // 0x28
};

struct UAshenLordVolcanoSetupDataAsset {
	FWeightedProbabilityRangeOfRanges ProjectileTriggerFrequency; // 0x28
	FWeightedProbabilityRange NumProjectilesToTrigger; // 0x58
	FWeightedProbabilityRangeOfRanges SpawnHeightInMetres; // 0x78
	FWeightedProbabilityRangeOfRanges TargetDistanceFromCenterInMetres; // 0xa8
	FWeightedProbabilityRangeOfRanges TimeBetweenSpawns; // 0xd8
	FWeightedProbabilityRangeOfRanges StartPositionOffsetInMetres; // 0x108
	TArray<FWeightedAshenLordVolcanoProjectile> Projectiles; // 0x138
	FPoolableCollectionMapConfiguration PoolableProjectilesConfig; // 0x148
	FVolcanoSetupDataEmbersEntry Embers; // 0x160
	float EmberSpawnHeightInMeters; // 0x170
	float TimeBetweenEmbers; // 0x174
};

struct UMaterialExpressionHash {
	FExpressionInput Input; // 0x70
};

struct UNameplateSettings {
	ECollisionChannel NameplateCollisionChannel; // 0x38
};

struct UTallTaleSpawnedActorComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AMockInputHandlerCharacter {
	USkeletalMeshComponent* Mesh; // 0x448
	UCharacterMovementComponent* CharacterMovement; // 0x450
	UCapsuleComponent* CapsuleComponent; // 0x458
	FBasedMovementInfo BasedMovement; // 0x460
	FBasedMovementInfo ReplicatedBasedMovement; // 0x498
	FVector BaseTranslationOffset; // 0x4d0
	FQuat BaseRotationOffset; // 0x4e0
	char ReplicatedMovementMode; // 0x4f0
	bool bInBaseReplication; // 0x4f1
	float CrouchedEyeHeight; // 0x4f4
	char bIsCrouched : 1; // 0x4f8
	char bPressedJump : 1; // 0x4f8
	char bClientUpdating : 1; // 0x4f8
	char bClientWasFalling : 1; // 0x4f8
	char bClientResimulateRootMotion : 1; // 0x4f8
	char bSimGravityDisabled : 1; // 0x4f8
	char bServerMoveIgnoreRootMotion : 1; // 0x4f8
	float JumpKeyHoldTime; // 0x4fc
	float JumpMaxHoldTime; // 0x500
	FScriptMulticastDelegate OnReachedJumpApex; // 0x508
	FScriptMulticastDelegate OnCharacterMovementUpdated; // 0x528
	FRootMotionMovementParams ClientRootMotionParams; // 0x540
	TArray<FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x580
	FRepRootMotionMontage RepRootMotion; // 0x590
};

struct UBTService_QueryPerceptionForTarget {
	float Interval; // 0x60
	float RandomDeviation; // 0x64
	char bCallTickOnSearchStart : 1; // 0x68
	char bRestartTimerOnEachActivation : 1; // 0x68
};

struct UDebugTeleportCrewStepDesc {
	FQuestVariableActor LocatorVar; // 0x80
};

struct UAIPartsDesc {
	FAIPartId AIPartId; // 0x28
};

struct USinkingComponent {
	FSinkingShipParams SinkingParams; // 0xd0
	AShip* Ship; // 0x108
	EShipState ShipState; // 0x110
	int32_t KeelOverConfigIndex; // 0x114
};

struct UCostumeDesc {
	bool CrewCostume; // 0xe0
};

struct UWieldablePetAnimNotifyWwiseEmitterComponent {
	FWwiseEmitter Emitter; // 0x2b8
	UWwiseObjectPoolWrapper* WwiseObjectPoolWrapper; // 0x2d8
};

struct UEndUserSettings {
	bool bSendAnonymousUsageDataToEpic; // 0x30
};

struct USoundNodeOscillator {
	char bModulateVolume : 1; // 0x38
	char bModulatePitch : 1; // 0x38
	float AmplitudeMin; // 0x3c
	float AmplitudeMax; // 0x40
	float FrequencyMin; // 0x44
	float FrequencyMax; // 0x48
	float OffsetMin; // 0x4c
	float OffsetMax; // 0x50
	float CenterMin; // 0x54
	float CenterMax; // 0x58
};

struct ANavigationGraphNode {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UPlayerInput {
	TArray<FKeyBind> DebugExecBindings; // 0x120
	TArray<FName> GamepadInvertedAxes; // 0x170
	TArray<FName> MouseInvertedAxes; // 0x180
	TArray<FName> InvertedCombinedAxisY; // 0x190
	TArray<FName> InvertedCombinedAxisX; // 0x1a0
};

struct UParticleModuleBeamNoise {
	char bLowFreq_Enabled : 1; // 0x50
	int32_t Frequency; // 0x54
	int32_t Frequency_LowRange; // 0x58
	FRawDistributionVector NoiseRange; // 0x60
	FRawDistributionFloat NoiseRangeScale; // 0x98
	char bNRScaleEmitterTime : 1; // 0xd0
	FRawDistributionVector NoiseSpeed; // 0xd8
	char bSmooth : 1; // 0x110
	float NoiseLockRadius; // 0x114
	char bNoiseLock : 1; // 0x118
	char bOscillate : 1; // 0x118
	float NoiseLockTime; // 0x11c
	float NoiseTension; // 0x120
	char bUseNoiseTangents : 1; // 0x124
	FRawDistributionFloat NoiseTangentStrength; // 0x128
	int32_t NoiseTessellation; // 0x160
	char bTargetNoise : 1; // 0x164
	float FrequencyDistance; // 0x168
	char bApplyNoiseScale : 1; // 0x16c
	FRawDistributionFloat NoiseScale; // 0x170
};

struct UTestAthenaDebugMenuComponent {
	UPlayerPermissionsComponent* TestPermissionComponent; // 0x128
};

struct UCoralShieldVFXComponent {
	UParticleSystem* VFXAsset; // 0xc8
	FName VfxSocketName; // 0xd0
	UParticleSystemComponent* SpawnedVFXSystem; // 0xd8
	ECoralShieldVFXRole CurrentCoralShieldRole; // 0xe0
	UCurveFloat* OffToOnCurve; // 0xe8
	float OffToOnDuration; // 0xf0
	UCurveFloat* OnToOffCurve; // 0xf8
	float OnToOffDuration; // 0x100
	FName OffToOnParamOverrideName; // 0x104
	FName OnToOffParamOverrideName; // 0x10c
	FName ReceiverMeshComponentName; // 0x114
	FName CasterMeshComponentName; // 0x11c
	TArray<UMaterialInstanceDynamic*> OverriddenMaterialsForReceive; // 0x128
	TArray<UMaterialInstanceDynamic*> OverriddenMaterialsForCast; // 0x138
};

struct AMythicalMerchantCrateItemInfoMock {
	TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry> FaunaBreedRarity; // 0x710
	AActor* CurrentShip; // 0x778
};

struct UMeleeChargeAIAbilityParams {
	float MinAngleToTargetToActivate; // 0xc8
	float MaxAngleToTargetToActivate; // 0xcc
	float MinTimeBetweenCheck; // 0xd0
	float MaxTimeBetweenCheck; // 0xd4
	float ChanceOfActivation; // 0xd8
	float ChargeTime; // 0xdc
};

struct AGeyser {
	UGeyserSetupDataAsset* SetupData; // 0x3d8
	EGeyserState GeyserState; // 0x3e0
	UWwiseEvent* StartActiveAudioLoopEvent; // 0x3e8
	UWwiseEvent* StopActiveAudioLoopEvent; // 0x3f0
	UWwiseEvent* PlayEruptingAudioEvent; // 0x3f8
	UWwiseEmitterComponent* AudioEmitterComponent; // 0x400
	UExplosionComponent* ExplosionComponent; // 0x408
	UParticleSystemComponent* ActiveParticlesComponent; // 0x410
	UParticleSystemComponent* EruptingParticlesComponent; // 0x418
	ECollisionChannel HitTestTraceChannel; // 0x420
	AHole* GeyserHoleClass; // 0x428
	AHole* GeyserHole; // 0x430
};

struct APrototypeMultiTargetEnchantedCompass {
	TArray<FVector> Locations; // 0x870
	TArray<FGuid> LocationIds; // 0x880
	UInventoryItemComponent* InventoryItem; // 0x890
	UEnchantedCompassProximityAnnouncementComponent* ProximityAnnouncementComponent; // 0x898
};

struct UTaleQuestNotificationStepDesc {
	UPopUpMessageDesc* Notification; // 0x80
	FQuestVariablePlayerActor PreventNotificationForPlayer; // 0x88
	FQuestVariablePlayerActor Player; // 0x98
};

struct USoundNodeParamCrossFade {
	FName ParamName; // 0x48
};

struct UWaitForCrewToCollectCollectorsChestPagesStepDesc {
	FQuestVariablePlayerActor CollectingPlayer; // 0x90
};

struct UDamageType {
	char bCausedByWorld : 1; // 0x28
	char bScaleMomentumByMass : 1; // 0x28
	float DamageImpulse; // 0x2c
	char bRadialDamageVelChange : 1; // 0x30
	float DestructibleImpulse; // 0x34
	float DestructibleDamageSpreadScale; // 0x38
	float DamageFalloff; // 0x3c
};

struct UTaleQuestChooseIslandFromWeightsStepDesc {
	FQuestVariableNameArray IslandsToChooseFrom; // 0x80
	FQuestVariableInt DifficultyRank; // 0x90
	FQuestVariableName ChosenIsland; // 0xa0
	UIslandTypeWeightsDataAsset* IslandTypeWeights; // 0xb0
};

struct USwimmingPathFollowingComponent {
	float DirectSwimmingDotToTarget; // 0xc8
	float ArcToTargetDotToTarget; // 0xcc
	float MaxTargetPitchFactor; // 0xd0
	float MinPosDeltaSqToRepathToMovingTarget; // 0xd4
	float MinPosDeltaSqToInvalidateFixedLocation; // 0xd8
	float PitchBezierControlPointsLengthFactor; // 0xdc
	float TimeMovingAwayFromTargetPosToFlagFailure; // 0xe0
	FName LineOfSightCollisionProfile; // 0xe4
	float LineOfSightSphereCastRadius; // 0xec
	float LineOfSightCheckInterval; // 0xf0
	float FirstLoSTriggerTimeInNewPath; // 0xf4
	float FirstLoSTriggerTimeInRePath; // 0xf8
	bool DrawDebugOnServer; // 0xfc
	TArray<ECollisionChannel> CollisionTypesToDoPathUpdate; // 0x100
	USwimmingCreatureMovementComponent* MovementComponent; // 0x110
	AAthenaSwimmingAIController* SwimmingAIController; // 0x118
	EArcFollowingMode ArcFollowingMode; // 0x120
	AActor* TargetActor; // 0x178
};

struct AActorWithTestInterface {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UMaterialStatusSusceptibilityComponent {
	UPhysicalMaterial* CurrentSurfaceMaterial; // 0xd0
	TScriptInterface<Class> CurrentMaterialStatusZone; // 0xd8
};

struct UPlayerNameDataAsset {
	TArray<FText> PlayerNameOverrides; // 0x28
};

struct UQuestBookPageList {
	TArray<FPageReference> Pages; // 0x28
	TArray<FStringAssetReference> InitialPages; // 0x38
};

struct UComboButtonWidgetStyle {
	FComboButtonStyle ComboButtonStyle; // 0x30
};

struct UItemDescSpawnData {
	UClass* ItemDesc; // 0x58
};

struct UPremiumCurrencyReward {
	uint32_t MinPremiumCurrency; // 0x28
	uint32_t MaxPremiumCurrency; // 0x2c
};

struct UBTTask_AIShipSurface {
	float MaxSpeed; // 0x88
	float PreSurfaceDelay; // 0x8c
};

struct UBootyItemInfoMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct USpeakToActorConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UAnimNotify_WwiseSound {
	UWwiseEvent* WwiseEvent; // 0x38
	bool OwnedByWorld; // 0x40
	EAnimNotify_WwiseSound_PerspectiveRestriction PerspectiveRestriction; // 0x41
	UWwiseObjectPoolWrapper* OwnedByWorldWisePoolToUse; // 0x48
};

struct UBullRushAIAbilityParams {
	float StaticCollisionWarmup; // 0xe0
	TArray<UEnvQuery*> ValidatorEQSystems; // 0xe8
	float TimeBetweenCanExecuteChecks; // 0xf8
};

struct UMaterialExpressionTextureObject {
	UTexture* Texture; // 0x70
	EMaterialSamplerType SamplerType; // 0x78
	char IsDefaultMeshpaintTexture : 1; // 0x7c
};

struct APrecomputedVisibilityOverrideVolume {
	TArray<AActor*> OverrideVisibleActors; // 0x408
	TArray<AActor*> OverrideInvisibleActors; // 0x418
	TArray<FName> OverrideInvisibleLevels; // 0x428
};

struct UMaterialExpressionAntialiasedTextureMask {
	float Threshold; // 0x1c8
	ETextureColorChannel Channel; // 0x1cc
};

struct APlayerManagerService {
	TArray<FWeakActorHandle> AllPlayerControllers; // 0x3e8
};

struct UItemProxyShipTrackerComponent {
	UItemProxyShipTrackerComponentDataAsset* ShipTrackingData; // 0xd8
	AActor* CurrentShip; // 0xe0
};

struct ATimedDoorMechanismAction {
	TArray<FKeySequence> KeySequences; // 0x568
	UMechanismTriggerComponent* InternalTrigger; // 0x578
	bool UseSameLandmarkEventsForAllJammedPhases; // 0x580
	bool UseSameLandmarkEventsForAllLoweringPhases; // 0x581
	FTimedDoorLandmarkReactions LandmarkReactionsWhenDoorOpens; // 0x588
	TArray<FTimedDoorLandmarkReactions> LandmarkReactionsWhenDoorLowers; // 0x598
	TArray<FTimedDoorLandmarkReactions> LandmarkReactionsWhenDoorJams; // 0x5a8
	ALandmarkReactionPlayer* LandmarkReactionPlayer; // 0x5b8
	UItemDesc* CurrentKeyDesc; // 0x5f0
	FTimedDoorState ServerDoorState; // 0x5f8
	FObjectMessagingDispatcher EventDispatcher; // 0x608
};

struct UActorSequence {
	UMovieScene* MovieScene; // 0x2a8
	FActorSequenceObjectReferenceMap ObjectReferences; // 0x2b0
};

struct UVideprinterService {
	TArray<AVideprinter*> Videprinters; // 0x30
};

struct UBTTask_RunEQSQuery {
	UEnvQuery* QueryTemplate; // 0x88
	TArray<FEnvNamedValue> QueryParams; // 0x90
	EEnvQueryRunMode RunMode; // 0xa0
};

struct AServerMigrationSerialisationDetailsTestsMigrationReferenceActor {
	AActor* ActorReferenceWithMigrationMarkup; // 0x3d0
};

struct UNPCDialogOptionStorageContainerStore {
	FText Text; // 0x80
	FText FullText; // 0xb8
	FText NoItemInInventoryText; // 0xf0
};

struct UNPCDialogConditionalTextHeader {
	TArray<UNPCDialogConditionalText*> Text; // 0x28
	FText DefaultText; // 0x38
};

struct UAthenaCharacterMovementComponent {
	FAthenaCharacterSwimParams SwimParams; // 0x560
	float SprintSpdAmp; // 0x5fc
	float SprintAccelAmp; // 0x600
	float LookAtYawRate; // 0x604
	float LookAtPitchRate; // 0x608
	float MaxSpeedRatioWhenWalkingInNonSwimWater; // 0x610
	float MaxAccelerationRatioWhenWalkingInNonSwimWater; // 0x614
	char bCharacterCollisionSweepsEnabled : 1; // 0x618
	float CharacterCollisionRadius; // 0x61c
	FCollisionProfileName CharacterCollisionProfile; // 0x620
	FCollisionProfileName CollisionPanicFallbackProfileName; // 0x628
	float CharacterCollisionWalkingFriction; // 0x630
	float CharacterCollisionSwimmingFriction; // 0x634
	float CharacterCollisionUnderwaterOffset; // 0x638
	UAthenaCharacterMovementUnderwater* UnderwaterMovement; // 0x640
	bool bCreateDisturbance; // 0x648
	float DisturbanceSize; // 0x64c
	float DisturbanceVelocityScale; // 0x650
	bool UseAsRVOObstacleOnly; // 0x654
	float FanPushOutAngle; // 0x6b8
	int32_t FanPushOutNumSteps; // 0x6bc
	float MaxFanPushOutScalar; // 0x6c0
	UCurveFloat* UnderwaterVelocityToAnglePitchProjectileHitVolume; // 0x6c8
	UCurveFloat* UnderwaterVelocityToAngleRollProjectileHitVolume; // 0x6d0
	UCurveFloat* UnderwaterVelocityToZOffsetProjectileHitVolume; // 0x6d8
	UCurveFloat* OnLandVelocityToAnglePitchProjectileHitVolume; // 0x6e0
	UCurveFloat* OnLandVelocityToXOffsetProjectileHitVolume; // 0x6e8
	UCurveFloat* OnLandVelocityToYOffsetProjectileHitVolume; // 0x6f0
	UCurveFloat* OnLandVelocityToZOffsetProjectileHitVolume; // 0x6f8
	UCurveFloat* FallingVelocityToAnglePitchProjectileHitVolume; // 0x700
	UCurveFloat* FallingVelocityToXOffsetProjectileHitVolume; // 0x708
	UCurveFloat* FallingVelocityToZOffsetProjectileHitVolume; // 0x710
	FName NonUnderwaterCollisionProfileName; // 0x7d0
	FName UnderwaterCollisionProfileName; // 0x7d8
};

struct UBTTask_SetBlackboardVectorValue {
	bool UseVectorFromBlackboard; // 0x88
	FVector StaticValue; // 0x8c
	FBlackboardKeySelector BlackboardKeyToUseForVector; // 0x98
};

struct UParticleModuleEmitterPointVelocity {
	FRawDistributionFloat VelocityScale; // 0x58
};

struct AAthenaTavernPlayerCharacter {
	UStreamingLocationComponent* StreamingLocationComponent; // 0x1ac0
	UAICreatureMovementModifierParamsDataAsset* ArenaTavernPetMovementData; // 0x1ac8
	AAthenaPlayerController* PlayerController; // 0x1b00
	bool VoteForRivalsHasPassed; // 0x1b28
};

struct ALevelStreamingVolume {
	TArray<FName> StreamingLevelNames; // 0x408
	char bEditorPreVisOnly : 1; // 0x418
	char bDisabled : 1; // 0x418
	EStreamingVolumeUsage StreamingUsage; // 0x41c
};

struct UTestDoubleIntentComponent {
	float ServerFirstIntent; // 0xd0
	float ServerSecondIntent; // 0xd8
};

struct UShipLeakerComponent {
	UParticleSystem* ParticleSystem_SplashOnInternalWaterSurface; // 0x358
	int32_t TickInterval; // 0x360
	AShip* Ship; // 0x368
	AShipInternalWater* InternalWater; // 0x370
	TArray<FShipLeak> ShipLeaks; // 0x378
};

struct UAchievementWriteCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UPersistenceIdentifierMap {
	AActor* AssetReference; // 0x28
	TArray<FPersistenceIdentifier> IdentifierMap; // 0x30
};

struct UMaterialExpressionParticleSize {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UPocketWatchItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UTouchInterface {
	TArray<FTouchInputControl> Controls; // 0x28
	float ActiveOpacity; // 0x38
	float InactiveOpacity; // 0x3c
	float TimeUntilDeactive; // 0x40
	float TimeUntilReset; // 0x44
	float ActivationDelay; // 0x48
	bool bPreventRecenter; // 0x4c
	float StartupDelay; // 0x50
};

struct UMeleeChargeAbilityStageParams {
	float AbilityCooldownSpeedMultiplier; // 0x28
	float DamageRequiredForNextIntervalMultiplier; // 0x2c
	bool OverrideParams; // 0x30
	bool AutoActivateOnStageTransition; // 0x31
	UAthenaAIAbilityType* TypeClass; // 0x38
};

struct UAISenseConfig_Touch {
	float MaxAge; // 0x28
	char bStartsEnabled : 1; // 0x2c
};

struct UEmergentContestVoyageRecipeDataAsset {
	FEmergentContestVoyageRecipe ContestVoyageRecipe; // 0x170
};

struct UPlayerEntitlementComponent {
	FPlayerEntitlementsCompact ReplicatedEntitlements; // 0xd8
	FPlayerEntitlements Entitlements; // 0x110
	TArray<FEntitlementIdInfo> ReplicatedEntitlementIds; // 0x208
	TArray<UClass*> CrewTemporaryEntitlements; // 0x370
};

struct UInterpCurveEdSetup {
	TArray<FCurveEdTab> Tabs; // 0x28
	int32_t ActiveTab; // 0x38
};

struct AKrakenAnimatedTentacle {
	USceneComponent* RootSceneComponent; // 0x520
	UCapsuleComponent* BaseShipCollision; // 0x528
	USceneComponent* MeshOffsetComponent; // 0x530
	USkeletalMeshComponent* TentacleMeshComponent; // 0x538
	UKrakenTentacleAIAudioComponent* KrakenTentacleAudioComponent; // 0x540
	FName AttachSocketNameFirstPerson; // 0x548
	FName AttachSocketNameThirdPerson; // 0x550
	FCollisionProfileName TentacleCollisionProfile; // 0x558
	TArray<FKrakenAnimatedTentacleCollisionSegment> CollisionSegments; // 0x560
	bool EnabledShipCollision; // 0x570
	bool DisableHeadCollisionsDuringHoldingState; // 0x571
	int32_t CollisionBoneToUseForShipCollision; // 0x574
	ECollisionEnabled SegmentsCollisionEnableType; // 0x578
	ECollisionEnabled BaseShipCollisionEnableType; // 0x579
	UKrakenAnimatedTentacleAnimationSpecDataAsset* AnimationSpec; // 0x580
	UKrakenAnimatedTentacleAnimationMappingDataAsset* AnimationMapping; // 0x588
	UKrakenAnimatedTentacleStateAnimationsDataAsset* StateAnimationMapping; // 0x590
	float AnimationPlayRate; // 0x598
	float RequestedAnimationPlayRateBlendTime; // 0x59c
	float PlayRateAdjustMaxTimeDelta; // 0x5a0
	float PlayRateAdjustMaxPercentageToSpeedUpPlayRate; // 0x5a4
	float PlayRateAdjustMaxPercentageToSlowDownPlayRate; // 0x5a8
	float ServerAnimationTimeOffsetLatencyMultiplierForSynchronisation; // 0x5ac
	float DebugDrawBoneLocationRadius; // 0x5b0
	float DebugDrawTargetRadius; // 0x5b4
	float DebugDrawBoneRotationEndPointRadius; // 0x5b8
	float DebugDrawBoneRotationLength; // 0x5bc
	float DebugDrawSuckingTargetRadius; // 0x5c0
	float MinAnimationPlayedTimeToSetPendingStateChange; // 0x5c4
	float MinAnimationLeftTimeToSetPendingStateChange; // 0x5c8
	float AnimationOffsetTimeLeftForOptimalPendingStateChange; // 0x5cc
	float SmoothNetUpdateLocationTime; // 0x5d0
	float SmoothNetUpdateRotationTime; // 0x5d4
	float MinDotToTargetToTryAndRotate; // 0x5d8
	float MaxDotToTargetToTryAndRotate; // 0x5dc
	float MinYawTurnRate; // 0x5e0
	float MaxYawTurnRate; // 0x5e4
	float MinInvisibleTime; // 0x5e8
	float MinSuckingTellTime; // 0x5ec
	float MaxSuckingTellTime; // 0x5f0
	float MaxSuckingPlayerDistance; // 0x5f4
	float MinHealthLossRequiredToAvoidAbortSuck; // 0x5f8
	UObject* TentacleSuckingTellVFX; // 0x600
	FName TargetVFXAttachSocketName; // 0x608
	UObject* TargetFirstPersonSuckingTellVFX; // 0x610
	UObject* TargetThirdPersonSuckingTellVFX; // 0x618
	float MaxHealthLossRequiredToAvoidAbortSuck; // 0x620
	float SuckingVelocity; // 0x624
	float SuckingPlayerAttachDistance; // 0x628
	float MinHealthLossRequiredToDropPlayer; // 0x62c
	float MaxHealthLossRequiredToDropPlayer; // 0x630
	float MinDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x634
	float MaxDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x638
	float MinHoldingTime; // 0x63c
	float MaxHoldingTime; // 0x640
	float MinWaterDunkTime; // 0x644
	float MaxWaterDunkTime; // 0x648
	float PowerSlamDamageTime; // 0x64c
	float PowerSlamDamage; // 0x650
	FName IngestTargetSocketName; // 0x654
	int32_t IngestTargetBoneIndexOffset; // 0x65c
	float MinIngestingTime; // 0x660
	float MaxIngestingTime; // 0x664
	float IngestingDamageAmountPerSecond; // 0x668
	float RegurgitatingSpeed; // 0x66c
	float RegurgitatingLaunchTime; // 0x670
	float ThrowTargetLaunchTime; // 0x674
	float ThrowTargetVisibleTime; // 0x678
	float ThrowingSpeed; // 0x67c
	UObject* TentacleFirstPersonThrowingVFX; // 0x680
	UObject* TentacleThirdPersonThrowingVFX; // 0x688
	float MinTargetVomitingDelay; // 0x690
	float MaxTargetVomitingDelay; // 0x694
	float MinTargetVomitingDuration; // 0x698
	float MaxTargetVomitingDuration; // 0x69c
	TArray<FKrakenAnimatedTentacleHeldTargetVomittingChance> TargetVomitingChances; // 0x6a0
	FName VomitVFXType; // 0x6b0
	TArray<FKrakenAnimatedTentacleWaterTriggerableFX> WaterTriggerableFX; // 0x6b8
	int32_t WaterQueryBoneIndex; // 0x6c8
	UPhysicalMaterial* TentaclePhysicalMaterial; // 0x6d0
	float VisualLoggerUpdateTime; // 0x6d8
	float ServerTimeToStartPlayingIdle; // 0x6dc
	TArray<FVector> AITargetVisibilityPoints; // 0x6e0
	FVector TargetBoxOffset; // 0x6f0
	FVector TargetBoxScale; // 0x6fc
	float ReplicatedAnimationProgression; // 0x71c
	bool IsHitReactionsEnabled; // 0x720
	UKrakenAnimatedTentacleState* PendingState; // 0x748
	UKrakenAnimatedTentacleState* ReplicatedCurrentState; // 0x758
	UKrakenAnimatedTentacleState* PreviousState; // 0x768
	float IngestingProgress; // 0x7a0
	UKrakenAnimatedTentacleAnimationDataAsset* AuthoritativeAnimation; // 0x7a8
	float TentacleYaw; // 0x7b0
	FVector TentacleWorldLocation; // 0x7b4
	AAthenaCharacter* CurrentTarget; // 0x7c0
	bool HasPlayedIntroAnim; // 0x7c8
	USceneComponent* DockedToSceneComponent; // 0x920
	FVector DockedLocalSpaceOffset; // 0x928
	FQuat DockedLocalSpaceRotation; // 0x940
	UParticleSystemComponent* TentacleSuckingTellParticleSystem; // 0x998
	UParticleSystemComponent* TargetFirstPersonSuckingTellParticleSystem; // 0x9a0
	UParticleSystemComponent* TargetThirdPersonSuckingTellParticleSystem; // 0x9a8
};

struct UEntitlementDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct ULockOnCameraModifierSettings {
	bool BlockLowerPriorityCameraModifiers; // 0x28
	bool DisablePlayerInputDuringLockOn; // 0x29
	FName TargetSocketName; // 0x2c
	float YawSnapStrength; // 0x34
	float PitchSnapStrength; // 0x38
	float MinYawLerpSpeed; // 0x3c
	bool LockOnScaledByInput; // 0x40
	float InputYawToScaleTo; // 0x44
	float InputTowardsTarget_LockOnScale; // 0x48
	float ZeroInput_LockOnScale; // 0x4c
	float InputAwayFromTarget_LockOnScale; // 0x50
	bool AutoLockAllowed; // 0x54
	bool LimitLockOnByInput; // 0x55
	float InputAwayFromTarget_LockOnClampMultiplier; // 0x58
	bool FadeOutEnabled; // 0x5c
	float FullLockDuration; // 0x60
	float FadeOutDuration; // 0x64
};

struct UCoherentUIGTHUD {
	FStringAssetReference HUDMaterialName; // 0x310
	UMaterial* HUDMaterial; // 0x320
	UMaterialInstanceDynamic* HUDMaterialInstance; // 0x328
};

struct ACompass {
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x790
	UUsableWieldableComponent* UsableWieldableComponent; // 0x798
	UCompassSpinComponent* SpinComponent; // 0x7a0
	UNarratedCompassDirectionComponent* NarratedCompassDirectionComponent; // 0x7a8
	UPoseableMeshComponent* MeshToUse; // 0x7b0
};

struct AFogBankManager {
	UFogBankManagerDataAsset* FogBankManagerDataAsset; // 0x3d0
};

struct UInviteReceivedPopUpSettings {
	FStringAssetReference SteamSingleInvitePopUpAssetLocation; // 0x28
	FStringAssetReference SteamMultipleInvitesPopUpAssetLocation; // 0x38
};

struct AFireworkItemInfo {
	ULoadableFireworkComponent* LoadableProjectileComponent; // 0x500
	FStringAssetReference FireworkDataAsset; // 0x508
	int32_t GeneratedDataRNGSeed; // 0x518
};

struct UObjectMessagingDispatcherComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UWaitForNPCOnSurfaceToSpawnStepDesc {
	FQuestVariableGuid NPCOnSurfaceManager; // 0x80
	FQuestVariableActor OutNPC; // 0x90
};

struct UNavLinkCustomComponent {
	uint32_t NavLinkUserId; // 0x100
	UNavArea* EnabledAreaClass; // 0x108
	UNavArea* DisabledAreaClass; // 0x110
	FVector LinkRelativeStart; // 0x118
	FVector LinkRelativeEnd; // 0x124
	ENavLinkDirection LinkDirection; // 0x130
	char bLinkEnabled : 1; // 0x134
	char bNotifyWhenEnabled : 1; // 0x134
	char bNotifyWhenDisabled : 1; // 0x134
	char bCreateBoxObstacle : 1; // 0x134
	FVector ObstacleOffset; // 0x138
	FVector ObstacleExtent; // 0x144
	UNavArea* ObstacleAreaClass; // 0x150
	float BroadcastRadius; // 0x158
	float BroadcastInterval; // 0x15c
	ECollisionChannel BroadcastChannel; // 0x160
};

struct UShipLiveryCatalogueDataAsset {
	FShipLiveryCatalogue Catalogue; // 0x28
};

struct UEnvQueryTest_TraceByProfile {
	FName CollisionProfileName; // 0x170
	FAIDataProviderFloatValue Radius; // 0x178
	UEnvQueryContext* Context; // 0x1a8
	float ContextZOffset; // 0x1b0
	bool OnlyUseContextZ; // 0x1b4
	bool OffsetContextInwardsByRadius; // 0x1b5
};

struct UPlayerMigratableStatusComponent {
	AActor* CurrentShip; // 0x210
};

struct UShipNamesDataAsset {
	TArray<FText> Names; // 0x28
};

struct UBTTask_SpawnActorAndStore {
	FBlackboardKeySelector BlackBoardKeyNameToStoreActor; // 0x60
	AActor* ActorToSpawn; // 0x88
	FVector SpawnOffset; // 0x90
};

struct ULoadingPointComponent {
	TArray<FCanLoadItemCategoryEntry> CanLoadItemCategories; // 0xd0
	TArray<FCanLoadItemCategoryEntry> CanUnloadItemCategories; // 0xe0
};

struct UDistantIdleAIAbilityParams {
	TArray<FAthenaAIControllerParamValue> NamedControllerParams; // 0x28
	EAIAbilityDamageIntervalCounterMode DamageIntervalCountingMode; // 0x38
	bool UseTimeBetweenAbility; // 0x39
	FAthenaAIAbilityPlayerBasedRanges ActivationTimerCooldown; // 0x40
	FAthenaAIAbilityPlayerBasedRanges TimeBetweenAbility; // 0x50
	bool UseDamageBetweenAbility; // 0x60
	FAthenaAIAbilityPlayerBasedRanges DamageBetweenAbility; // 0x68
	float AbilityRadius; // 0x78
	bool UseMinMaxAttackRange; // 0x7c
	FMinMaxAbilityRange MinMaxAttackRange; // 0x80
	TArray<FAIAbilityFollowUp> FollowUpAbilities; // 0x88
	float Weight; // 0x98
	FAIAbilityContinuousCooldownParameterData ContinuousCooldownAbilityParameters; // 0xa0
	UAthenaAIAbilityType* AIAbilityTypeClass; // 0xc0
};

struct APossessionsChestInteraction {
	EPossessionsChestType PossessionsChestType; // 0x3e0
};

struct UDrunkennessComponent {
	UDrunkennessComponentPublicData* PublicData; // 0xd0
	float TargetDrunkenness[0x2]; // 0x218
	float CurrentDrunkenness[0x2]; // 0x220
	float RemainingAmountToSoberUpDueToWaterSplash; // 0x228
	FStatus AlcoholDrunkennessStatus; // 0x238
	FName VomitVFXType; // 0x250
};

struct UBTComposite_Selector {
	TArray<FBTCompositeChild> Children; // 0x58
	TArray<UBTService*> Services; // 0x68
};

struct UTritonComponent {
	UTritonAcousticMap* TritonMapAsset; // 0x2b0
	float TritonEffectRadius; // 0x2b8
};

struct AContestMap {
	int32_t CanvasWidth; // 0x7d8
	int32_t CanvasHeight; // 0x7dc
	UFont* Font; // 0x7e0
	float FontScale; // 0x7e8
	float FontLineSpacingScale; // 0x7ec
	UTexture* UnderlineIcon; // 0x7f0
	UContestMapLayout* ContestMapLayout; // 0x800
	UScoreRewardDataAsset* ScoreRewardDataAsset; // 0x808
	FContestMapContents Contents; // 0x810
	FContestMapContents PreviousContents; // 0x850
	TArray<FCrewScore> CachedLeaderboard; // 0x950
	FGuid OwnerCrewId; // 0x998
	UContestScoreSystem* ScoreSystem; // 0x9b8
};

struct AAutomaticInstancingActor {
	USceneComponent* DummyRoot; // 0x3d0
	TMap<FName, FAutomaticInstancingMeshComponentArray> CookedInstancedStaticMeshes; // 0x3d8
};

struct APossessionsChest {
	FText Name; // 0x498
	FName InteractionFeatureGuard; // 0x4d0
	UWwiseEvent* BeginInteractionSfx; // 0x4d8
	UWwiseEvent* EndInteractionSfx; // 0x4e0
	UWwiseObjectPoolWrapper* SfxPool; // 0x4e8
};

struct APreviewPet {
	EAthenaAnimationPetRoamingState InitialAnimState; // 0x3d8
	FAIPartId InitialPartIdToLoad; // 0x3dc
	UAIPartsCategory* PreviewPetPartsCategory; // 0x3e8
	USkeletalMeshComponent* PreviewPetMesh; // 0x3f0
	FPetAnimationDataPreview PreviewPetAnimationData; // 0x3f8
	UAIPartsRetrievalComponent* AIPartsRetrievalComponent; // 0x408
	UPetPartCustomisationComponent* PetPartCustomisationComponent; // 0x410
};

struct AMechanismGroup {
	TArray<AMechanism*> Mechanisms; // 0x3e0
	FWeightedProbabilityRangeOfRanges MechanismsToSelect; // 0x3f0
	FScriptMulticastDelegate OnMechanismGroupResetDelegate; // 0x420
	TArray<AMechanism*> SelectedMechanisms; // 0x430
};

struct UClueSiteData {
	ETrackedOwnerType DebrisTrackingType; // 0x28
};

struct AGameplayAbilityTargetActor {
	bool ShouldProduceTargetDataOnServer; // 0x3d0
	FGameplayAbilityTargetingLocationInfo StartLocation; // 0x3e0
	APlayerController* MasterPC; // 0x480
	UGameplayAbility* OwningAbility; // 0x488
	bool bDestroyOnConfirmation; // 0x490
	AActor* SourceActor; // 0x498
	FWorldReticleParameters ReticleParams; // 0x4a0
	AGameplayAbilityWorldReticle* ReticleClass; // 0x4b0
	FGameplayTargetDataFilterHandle Filter; // 0x4b8
	bool bDebug; // 0x4d0
};

struct APetChestInteraction {
	TArray<FFeaturedPetCategory> Categories; // 0x448
	bool AllTab; // 0x458
	FPetLoadout OriginalLoadout; // 0x638
	FPetLoadout Loadout; // 0x650
};

struct UBTDecorator_TestRangeOfSeenActors {
	FAIDataProviderFloatValue EnterRange; // 0x80
	FAIDataProviderFloatValue ExitRange; // 0xb0
	bool TestForOutsideRange; // 0xe0
};

struct UAddGameEventExclusionZoneStepDesc {
	float Radius; // 0x80
	FQuestVariableVector Location; // 0x88
};

struct AAlwaysRelevantLightweightActor {
	AActor* OwningActor; // 0x3d0
};

struct UActionRulesInteractableComponent {
	UActionRulesComponent* ActionRulesComponent; // 0x118
};

struct UEnvQueryGenerator_OnCircle {
	FAIDataProviderFloatValue CircleRadius; // 0x90
	FAIDataProviderFloatValue SpaceBetween; // 0xc0
	FEnvDirection ArcDirection; // 0xf0
	FAIDataProviderFloatValue ArcAngle; // 0x110
	float AngleRadians; // 0x140
	UEnvQueryContext* CircleCenter; // 0x148
	FEnvTraceData TraceData; // 0x150
	char bDefineArc : 1; // 0x190
};

struct USalvageItemSpawnComponentMock {
	TArray<FIslandItemSpawnLocationData> IslandSalvageLocationData; // 0x4e0
	float GlobalIslandChanceToSpawn; // 0x4f0
	float MinimumZOffSet; // 0x4f4
	float MaximumZOffset; // 0x4f8
	float MinimumRoll; // 0x4fc
	float MaximumRoll; // 0x500
	float MinimumPitch; // 0x504
	float MaximumPitch; // 0x508
	bool SunkenItem; // 0x50c
	UIslandItemDataAsset* SpawnLocationType; // 0x510
	FWeightedProbabilityRangeOfRanges SpawnedContainerContents; // 0x518
};

struct UFindNamedPointStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UBlackboardKeyType_Class {
	UObject* BaseClass; // 0x30
};

struct UItemProxyWatercraftTrackerComponentDataAsset {
	TArray<AActor*> WatercraftTypes; // 0x28
};

struct UEnvQueryTest_WaterHeight {
	float WaterHeightCheckOffset; // 0x170
	UEnvQueryContext* ActorWithWaterPlaneContext; // 0x178
};

struct ATether {
	USceneComponent* TetherPositionAnchorComponent; // 0x4c8
	USphereComponent* SourcePhysicsHandle; // 0x4d0
	USphereComponent* TargetPhysicsHandle; // 0x4d8
	UDistanceJointComponent* JointComponent; // 0x4e0
	AActor* SourceActor; // 0x4e8
	AActor* TargetActor; // 0x4f0
	float SlackCm; // 0x4f8
	float MaxLengthWhenGrowing; // 0x4fc
	bool HasAttached; // 0x508
	bool HasSourceActor; // 0x509
	bool HasTargetActor; // 0x50a
	bool IsSlackEnabled; // 0x50b
	ETetherConstrainMode CurrentTetherMode; // 0x50c
};

struct URivalVotingInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBlackboardComponent {
	UBrainComponent* BrainComp; // 0xc8
	UBlackboardData* BlackboardAsset; // 0xd0
	TArray<UBlackboardKeyType*> KeyInstances; // 0xf8
};

struct UStorySpawnedActorsSettings {
	FStringAssetReference StorySpawnActorsCollectionDataAssetLocation; // 0x38
};

struct AServerPerformanceReplicator {
	float ServerAverageFPS; // 0x3d0
	float ServerAverageMS; // 0x3d4
};

struct AStormService {
	TArray<AActor*> StormList; // 0x420
};

struct UTaleQuestUpdateCheckpointStepDesc {
	FRewardId RewardIdToAward; // 0x80
	FName CampaignIdToRemove; // 0x88
	FName Feature; // 0x90
};

struct UDockableCutsceneInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UStaticMeshAudioDataAsset {
	TArray<FStaticMeshAudioAssociation> MeshToAudioAssociations; // 0x28
};

struct UEnvQueryTest_PathfindingBatch {
	FAIDataProviderFloatValue ScanRangeMultiplier; // 0x248
};

struct UCostumeWithEmoteDesc {
	TArray<UEmoteDesc*> CostumeEmotes; // 0xe8
};

struct UWaterHeightProviderServerOnlyComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AAmmoChest {
	UStaticMeshComponent* StaticMesh; // 0x460
};

struct AWieldableReplica {
	UPrimitiveComponent* MeshComponent; // 0x3d8
	UCosmeticItemAnimationSetDataAsset* CachedAnimationSet; // 0x3e0
	UItemCategory* ReplicaCategory; // 0x3e8
};

struct UInterpTrackParticleReplay {
	TArray<FParticleReplayTrackKey> TrackKeys; // 0x70
};

struct UEventCatchStepDesc {
	bool AllowOutOfOrder; // 0x80
	FName EventName; // 0x84
};

struct UOnlineSessionClient {
	bool bIsFromInvite; // 0x160
	bool bHandlingDisconnect; // 0x161
};

struct ALantern {
	float LightRaisedBlendSpringAccel; // 0x7b0
	float LightActiveBlendSpringAccel; // 0x7b4
	UWwiseEvent* TurnOnSfx; // 0x7b8
	UWwiseEvent* TurnOffSfx; // 0x7c0
	UWwiseEvent* FlameTransferSfx; // 0x7c8
	UCurveFloat* ThirdPersonLanternDistanceInMetresMultiplier; // 0x7d0
	UCurveFloat* ThirdPersonLanternTimeOfDayMultiplier; // 0x7d8
	float CurrentThirdPersonMultiplier; // 0x7e0
	float CurrentExternalLightFactor; // 0x7e4
	FFlameData FlameData; // 0x7e8
	UInventoryItemComponent* InventoryItem; // 0x7f0
	bool LightOn; // 0x840
	bool bRaised; // 0x841
	bool CanApplyFlameOfFate; // 0x842
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x848
	bool FlameOfFateLocked; // 0x930
};

struct UCharacterMovementAINoiseEventComponentParams {
	FName MovementTag; // 0x28
	UCurveFloat* WalkingSpeedToNoiseRange; // 0x30
	float CrouchedWalkingNoiseRange; // 0x38
	float MovingInWaterNoiseRange; // 0x3c
	float JumpNoiseRange; // 0x40
	float LandNoiseRange; // 0x44
	float MinSpeedToTriggerLandedEvent; // 0x48
};

struct ASpawnAIWaveMechanismAction {
	UMechanismActionComponent* MechanismActionComponent; // 0x3d0
	UAIProgressiveWavesSpawner* ProgressiveWavesSpawnerTemplate; // 0x3d8
	UAIProgressiveWavesSpawner* OnePlayerCrewSpawnerTemplateOverride; // 0x3e0
	UAIProgressiveWavesSpawner* TwoPlayerCrewSpawnerTemplateOverride; // 0x3e8
	UAIProgressiveWavesSpawner* ThreePlayerCrewSpawnerTemplateOverride; // 0x3f0
	UAIProgressiveWavesSpawner* FourOrMorePlayerCrewSpawnerTemplateOverride; // 0x3f8
	int32_t PerCrewAISpawnCooldownTimeInSeconds; // 0x400
	int32_t GlobalCooldownInSeconds; // 0x404
	float SpawnRollChance; // 0x408
	AActor* ActorWithTargetAIRegion; // 0x410
	float ResetSpawnerDelay; // 0x418
	UAIProximityPlayerTracker* ProximityPlayerTracker; // 0x4f8
	UAISpawnerMusicZoneComponent* MusicZoneComponent; // 0x500
};

struct UTaleQuestPermanentPromptStepDesc {
	FQuestVariablePrioritisedPrompt Prompt; // 0x80
	EPromptStartStop StartOrStop; // 0x90
};

struct UAthenaAudioConfig {
	UWwiseObjectPoolWrapper* ItemProxyPool; // 0x28
	UWwiseObjectPoolWrapper* AnimNotifyPool; // 0x30
};

struct UEmissaryFlotsamItemSpawnComponent {
	bool SpawnOnStart; // 0x2b0
	FItemSpawnParams SpawnParams; // 0x2b8
	UWeightedItemDescSpawnDataAsset* ReferencedSpawnDistributionAsset; // 0x2e0
	UItemSpawnDistributionAsset* ReferencedSpawnDistribution; // 0x2e8
	TArray<FItemSpawnTransform> SpawnTransforms; // 0x2f0
	TArray<FItemSpawnTransformWithRandomQuantity> SpawnTransformsWithRandomQuantities; // 0x300
	FName FeatureToggle; // 0x310
	ESpawnedItemSource SpawnSource; // 0x318
	float SpawnRate; // 0x31c
	bool DestroyProxiesOnEndPlay; // 0x320
	bool SpawnWithPhysicsEnabled; // 0x321
	bool DoNotAttachToOwnerWhenSpawned; // 0x322
	bool DropItemsOnSpawn; // 0x323
	bool DropItemsUsingPriorityAIDropParams; // 0x324
	TArray<FSpawnInstance> SpawnList; // 0x328
	TArray<FSpawnInstance> SingleItemInstances; // 0x338
	TArray<FSpawnedItem> SpawnedItems; // 0x348
};

struct UStartSuppressingCutsceneResponsesStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UItemActionComponentAudioParams {
	UWwiseObjectPoolWrapper* ItemActionAudioPool; // 0x28
	UWwiseEvent* ActionStartEvent; // 0x30
	UWwiseEvent* ActionStopEvent; // 0x38
	bool ActionStartEventIsLoop; // 0x40
	float ActionStartEventFadeTime; // 0x44
};

struct UBTTask_SetBlackboardIntValue {
	FAIDataProviderIntValue IntValue; // 0x88
};

struct UBTTask_SetRoamingPetAnimationState {
	FWeightedPetAnimationSelector WeightedAnimationSelection; // 0x88
};

struct UAthenaPlayerCharacterTestInputBinder {
	UAnalogInputId* LastAnalogInputId; // 0x88
	float LastAnalogInputValue; // 0x90
	UNotificationInputId* LastNotificationInputId; // 0x98
};

struct AGenericPartWithVFX {
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x3d0
};

struct AMapTable {
	UStaticMeshComponent* TableMeshComponent; // 0x3e8
	float MousePanSpeed; // 0x3f0
	float MouseZoomSpeed; // 0x3f4
	float PanSpeedMinZoom; // 0x3f8
	float PanSpeedMaxZoom; // 0x3fc
	float ZoomSpeed; // 0x400
	float MinZoom; // 0x404
	float MaxZoom; // 0x408
	float InitialZoom; // 0x40c
	float RemoteBlendTime; // 0x410
	float RemotePanSettleRange; // 0x414
	float RemoteZoomSettleRange; // 0x418
	float DrunknessStaggerScalarWhileUsing; // 0x41c
	int32_t MaxPins; // 0x420
	float PinToggleDist; // 0x424
	int32_t MaxTrail; // 0x428
	float MinDistPerTrailDrop; // 0x42c
	float TimePerTrailUpdate; // 0x430
	UWwiseObjectPoolWrapper* MapTablePool; // 0x438
	UWwiseEvent* JoinTableSfx; // 0x440
	UWwiseEvent* LeaveTableSfx; // 0x448
	UWwiseEvent* PlayMoveMapSfx; // 0x450
	UWwiseEvent* StopMoveMapSfx; // 0x458
	UWwiseEvent* PlacePinSfx; // 0x460
	UWwiseEvent* RemovePinSfx; // 0x468
	UWwiseEvent* ShowTaleSfx; // 0x470
	UWwiseEvent* HideTaleSfx; // 0x478
	UWwiseEvent* HighlightTaleMarkerSfx; // 0x480
	float TrackedBootyItemsUpdateInterval; // 0x488
	float TrackedShipsUpdateInterval; // 0x48c
	float TrackedShipDistanceThreshold; // 0x490
	UShipCustomizationDesc* ReapersMarkFlag; // 0x498
	UMaterialInstanceDynamic* DynamicMaterial; // 0x4a0
	UMaterialInterface* ExpandedMapMaterial; // 0x4a8
	UMaterialInterface* BaseMapMaterial; // 0x4b0
	float TopMargin; // 0x4b8
	float RightMargin; // 0x4bc
	float BottomMargin; // 0x4c0
	float LeftMargin; // 0x4c4
	FVector2D ServerCentreLocation; // 0x4c8
	float ServerZoomLevel; // 0x4d0
	TArray<AActor*> ControllerQueue; // 0x4d8
	TArray<FVector2D> MapPins; // 0x4e8
	TArray<FWorldMapShipLocation> TrackedShips; // 0x4f8
	TArray<FReapersMarkTrackedBootyItemInfo> TrackedBootyItemInfos; // 0x508
	FLinearColor BoundaryData; // 0x518
	UTexture* AllianceOverlayIcon; // 0x528
	EPlayMode CachedPlaymode; // 0x750
	FMapTableTutorialHandler MapTableTutorialHandler; // 0x768
};

struct UTaleQuestStartingBannerStepDesc {
	FText Header; // 0x80
	FName Tag; // 0xb8
};

struct UTextRenderComponent {
	FText Text; // 0x588
	UMaterialInterface* TextMaterial; // 0x5c0
	UFont* Font; // 0x5c8
	EHorizTextAligment HorizontalAlignment; // 0x5d0
	EVerticalTextAligment VerticalAlignment; // 0x5d1
	FColor TextRenderColor; // 0x5d4
	float XScale; // 0x5d8
	float YScale; // 0x5dc
	float WorldSize; // 0x5e0
	float InvDefaultSize; // 0x5e4
	float HorizSpacingAdjust; // 0x5e8
	char bAlwaysRenderAsText : 1; // 0x5ec
};

struct UStatusResponseToggleCapstan {
	float DurationToToggleCapstan; // 0x30
};

struct UWaterSensitiveComponentDataAsset {
	FWaterSensitiveHealthChange HealthChangeInRainPerSecond; // 0x28
	FWaterSensitiveHealthChange HealthChangeSubmergedPerSecond; // 0x30
	FWaterSensitiveHealthChange HealthChangeWhenDryPerSecond; // 0x38
	FWaterSensitiveHealthChange HealthChangeOnLiquidProjectileImpact; // 0x40
};

struct UAnimSequence {
	int32_t NumFrames; // 0x78
	TArray<FTrackToSkeletonMap> TrackToSkeletonMapTable; // 0x80
	TArray<FTranslationTrack> TranslationData; // 0xa0
	TArray<FRotationTrack> RotationData; // 0xb0
	TArray<FScaleTrack> ScaleData; // 0xc0
	AnimationCompressionFormat TranslationCompressionFormat; // 0xd0
	AnimationCompressionFormat RotationCompressionFormat; // 0xd1
	AnimationCompressionFormat ScaleCompressionFormat; // 0xd2
	TArray<int32_t> CompressedTrackOffsets; // 0xd8
	FCompressedOffsetData CompressedScaleOffsets; // 0xe8
	AnimationKeyFormat KeyEncodingFormat; // 0x110
	EAdditiveAnimationType AdditiveAnimType; // 0x130
	EAdditiveBasePoseType RefPoseType; // 0x131
	UAnimSequence* RefPoseSeq; // 0x138
	int32_t RefFrameIndex; // 0x140
	int32_t EncodingPkgVersion; // 0x144
	FName RetargetSource; // 0x148
	bool bEnableRootMotion; // 0x150
	ERootMotionRootLock RootMotionRootLock; // 0x151
	bool bRootMotionSettingsCopiedFromMontage; // 0x152
};

struct AGameplayAbilityTargetActor_Radius {
	float Radius; // 0x4e8
};

struct UShipSinkingParametersDataAsset {
	FSinkingShipParams SinkingParameters; // 0x28
	FBuoyancySampleMovement SinkingBuoyancySettings; // 0x60
};

struct UAbilityTask_WaitGameplayTag {
	FName InstanceName; // 0x28
};

struct UParticleModuleParameterBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct ACinematicCameraController {
	AAthenaPlayerController* AthenaPlayerController; // 0x778
	TArray<FName> BindingsToRemove; // 0x780
};

struct UTaleWaitForSpireToLoadStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct USoundNodeMixer {
	TArray<float> InputVolume; // 0x38
};

struct UTaleQuestSelectEntryFromArrayStepDesc {
	UTaleQuestArrayEntrySelectionStrategy* SelectionStrategy; // 0x80
	FQuestVariableArray InputArray; // 0x88
	FQuestVariableAny OutputEntry; // 0x98
};

struct UParticleModuleTrailSource {
	ETrail2SourceMethod SourceMethod; // 0x50
	FName SourceName; // 0x54
	FRawDistributionFloat SourceStrength; // 0x60
	char bLockSourceStength : 1; // 0x98
	int32_t SourceOffsetCount; // 0x9c
	TArray<FVector> SourceOffsetDefaults; // 0xa0
	EParticleSourceSelectionMethod SelectionMethod; // 0xb0
	char bInheritRotation : 1; // 0xb4
};

struct UBootyStorageSettings {
	float StoreHoldTime; // 0x38
	float RetrieveHoldTime; // 0x3c
	float PickupPointSpawnDepth; // 0x40
	float PickupDismissDuration; // 0x44
	float PickupDismissDistanceCheck; // 0x48
	char MaxStoragePerLocation; // 0x4c
	FStringAssetReference BootyStorageSettingsAsset; // 0x50
	TArray<UItemCategory*> BlacklistedCategories; // 0x60
};

struct UFiniteUseNPCDialogConditional {
	int32_t LinkedDialog; // 0x30
	int32_t LinkedDialogOption; // 0x34
	int32_t NumberOfUses; // 0x38
};

struct UMovieScene3DConstraintSection {
	FGuid ConstraintId; // 0x98
};

struct UTextureAuditorSettings {
	TArray<FStringAssetReference> SpecificTexturesToNotAudit; // 0x38
	TArray<FDirectoryPath> TextureDirectoriesToNotAudit; // 0x48
	FTextureAuditorProperties DefaultTextureProperties; // 0x58
	TArray<FTextureAuditorGroupProperties> PerTextureGroupPropertiesOverrides; // 0x78
};

struct UFindNamedPointAsVectorStepDesc {
	FQuestVariableVector OutputVectorLocation; // 0xd0
};

struct UTaleQuestMultiTargetCompassAddTrackedLocationStep {
	UTaleQuestMultiTargetCompassAddTrackedLocationStepDesc* Desc; // 0x90
};

struct UEventBroadcastStepDesc {
	FName EventName; // 0x80
};

struct AChainLightningProjectile {
	TArray<EHealthChangedReason> TriggerChainLightningHealthChangeReasons; // 0x670
	UChainLightningSourceComponent* ChainLightningSource; // 0x680
	FVector PostFireProjectileScale; // 0x688
	float PostFireScaleSpeed; // 0x694
};

struct UTaleQuestAddTemporaryEntitlementStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UBTTask_WaitWeighted {
	FAIDataProviderStructValue WeightedRangesFromParams; // 0x60
	FWeightedProbabilityRangeOfRanges WeightedRanges; // 0x90
};

struct UGiveVoyageOnItemHandInComponent {
	UNotificationInputId* InputID; // 0xd0
	EActionDisplayPriority ActionDisplayPriority; // 0xd8
	TArray<FVoyageHandInEntry> VoyageEntries; // 0xe0
};

struct ULandmarkReactionEvent {
	AActor* Target; // 0x28
	bool UseDefaultTarget; // 0x30
};

struct ATreasureChestStatic {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UWorldSequenceService {
	TMap<FString, ASequencerCutSceneActor*> Sequences; // 0x30
};

struct AHangingPlatform {
	UStaticMeshComponent* PlatformBody; // 0xa28
	UChildActorComponent* DrivingMechanism; // 0xa30
	FVector PlatformEndLocation; // 0xa38
	FVector TargetDefiningTiltAxis; // 0xa44
	FVector PlatformTiltHeightConstant; // 0xa50
	float TotalTimeToComplete; // 0xa5c
	float TimeForFullFlatten; // 0xa60
	float TimeForFullMove; // 0xa64
	float TiltAngle; // 0xa68
	float CurrentAngleInterpolation; // 0xa6c
	float CurrentMoveInterpolation; // 0xa70
};

struct AAthenaPlayerState {
	UVoiceChatComponent* VoiceChatComponent; // 0x4a0
	FString Sandbox; // 0x4e8
	FString ClientPlatform; // 0x4f8
	FString DeviceID; // 0x508
	FPirateIdentity PirateIdentity; // 0x518
	FGuid PlayerGameId; // 0x648
	FPirateDescription PirateDesc; // 0x658
	int32_t PlayerIndexOnServer; // 0x6d8
	EPlayerActivityType PlayerActivity; // 0x718
};

struct UBlackboardKeyType_NativeEnum {
	FString EnumName; // 0x30
	UEnum* EnumType; // 0x40
};

struct UScrollBarWidgetStyle {
	FScrollBarStyle ScrollBarStyle; // 0x30
};

struct ADrawDebugService {
	TArray<FDrawDebugItemMessage> MessagesReplicated; // 0x3d8
	TArray<FDrawDebugItemSphere> SpheresReplicated; // 0x3e8
	TArray<FDrawDebugItemBox> BoxesReplicated; // 0x3f8
	TArray<FDrawDebugItemCapsule> CapsulesReplicated; // 0x408
	TArray<FDrawDebugItemLine> LinesReplicated; // 0x418
	TArray<FDrawDebugItemSector> SectorsReplicated; // 0x428
	TArray<FDrawDebugItemString> StringsReplicated; // 0x438
	bool IsDrawDebugActive; // 0x448
};

struct UKillActorConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UCanvasPanel {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct UMovieScene3DPathSection {
	FRichCurve TimingCurve; // 0xa8
	MovieScene3DPathSection_Axis FrontAxisEnum; // 0x120
	MovieScene3DPathSection_Axis UpAxisEnum; // 0x121
	char bFollow : 1; // 0x124
	char bReverse : 1; // 0x124
	char bForceUpright : 1; // 0x124
};

struct UOverlay {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct ADisableGeyserMechanismAction {
	UMechanismActionComponent* MechanismActionComponent; // 0x3d0
	TArray<AGeyser*> GeysersToDisable; // 0x3d8
};

struct UDefeatAIShipEncounterConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UIntentBasedMechanismTriggerComponent {
	TScriptInterface<Class> IntentComponent; // 0x158
};

struct UMaterialExpressionVectorParameter {
	FLinearColor DefaultValue; // 0x90
	bool bUseCustomPrimitiveData; // 0xa0
	char PrimitiveDataIndex; // 0xa1
};

struct UPhysicalMaterial {
	float Friction; // 0x28
	EFrictionCombineMode FrictionCombineMode; // 0x2c
	bool bOverrideFrictionCombineMode; // 0x2d
	float Restitution; // 0x30
	EFrictionCombineMode RestitutionCombineMode; // 0x34
	bool bOverrideRestitutionCombineMode; // 0x35
	float Density; // 0x38
	float RaiseMassToPower; // 0x3c
	float DestructibleDamageThresholdScale; // 0x40
	UPhysicalMaterialPropertyBase* PhysicalMaterialProperty; // 0x48
	EPhysicalSurface SurfaceType; // 0x50
};

struct UEmissaryRewardCampaignSettingsAsset {
	TArray<FEmissaryCompanyCampaignSettings> Companies; // 0x28
};

struct UAddMarkToTornMapAtLocationStepDesc {
	FQuestVariableVector MarkLocation; // 0xa0
};

struct URadialDamagerComponent {
	float DamageIntervalSeconds; // 0xc8
	float DamagePerSecondAtCentre; // 0xcc
	float DamagePerSecondAtMaxRadius; // 0xd0
	float DamageRadius; // 0xd4
	UDamagerType* DamagerType; // 0xe0
	EHealthChangedReason HealthChangedReason; // 0xe8
	FVector LocalOffset; // 0xec
};

struct UTaleQuestStartTinySharkExperienceStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ULadderInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AShipDynamicsProviderActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UAthenaCameraComponent {
	float OffsetBlendSpeed; // 0x820
	float AboveWaterOffset; // 0x824
	float UnderWaterOffset; // 0x828
	float SubmersionDistanceBeforeSurfacing; // 0x82c
	float SubmersionDistanceBeforeUnderwater; // 0x830
	float SubmersionDistanceBeforeUnderwaterOnShip; // 0x834
	UMaterialParameterCollection* ScreenEffectsParameters; // 0x838
	bool IsInsideShipHull; // 0x858
	float CurrentCameraOffset; // 0x85c
};

struct UStopAggressiveGhostShipEncounterStep {
	UStopAggressiveGhostShipEncounterStepDesc* StepDesc; // 0x90
};

struct UAbilityTask_WaitGameplayEffectApplied_Self {
	FScriptMulticastDelegate OnApplied; // 0x130
};

struct UFixedIntentComponent {
	float Intent; // 0x1a0
};

struct UFOVHandlerItemActionEffect {
	float BlendSpeed; // 0x28
	float AimFOV; // 0x2c
};

struct UHitRegSnapshotRedirectImpactToReplicatedMovementAttachParentComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMovieSceneBoolTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct ULockMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct AHoleService {
	TArray<TWeakObjectPtr<AHole>> Holes; // 0x3d8
	TArray<FHoleContainer> HoleContainers; // 0x3e8
	UHoleDataAsset* HoleDataAsset; // 0x3f8
};

struct UClawPummelAIAbility {
	TWeakObjectPtr<UKnockbackAIAbilityTriggerComponent> ExplosionTriggerPtr; // 0x78
	FExplosionForceFeedbackInfo ForceFeedbackInfo; // 0x80
	UExplosionComponent* PawnExplosion; // 0xa8
};

struct UBTTask_SelectWanderFlyStrategy {
	FAIDataProviderFloatValue WanderRange; // 0x88
	FAIDataProviderFloatValue LowFlyRange; // 0xb8
	UAIStrategyId* WanderStrategy; // 0xe8
	UAIStrategyId* LowFlyStrategy; // 0xf0
	UAIStrategyId* HighFlyStrategy; // 0xf8
};

struct UBarrelsOfPlentyClueSiteData {
	FVector SpawnLocation; // 0x38
};

struct UAISenseBlueprintListener {
	FGuid Guid; // 0x98
};

struct UWashedUpSkeletonClueDestinationGenerator {
	UClueSiteData* RequiredClueSiteDataType; // 0x28
	TArray<FWeightedClueDestinationDescriptor> WeightedSupportedDescriptorTypes; // 0x30
};

struct AInstancedFoliageActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UBuriedItemStepFromActorDesc {
	FQuestVariableActor PlaceableActor; // 0x128
};

struct UTaleQuestGenerateDebrisTypeForVoyageRankStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AAthenaPlayerCharacterMockWithAnimSeq {
	UAICreatureMovementModifierParamsDataAsset* PetMovementParamsDataAsset; // 0x1ac0
	bool AllowedToSwim; // 0x1ac8
};

struct UAIFormWithVFXDataAsset {
	UParticleSystem* ParticlesTemplate; // 0x90
	float ParticleActivationDelay; // 0x98
};

struct UIsProjectileOfGivenImpactProjectileId {
	UImpactProjectileId* ImpactProjectileId; // 0x28
};

struct UEyeOfReachItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UPetTelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMaterialExpressionIf {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	FExpressionInput AGreaterThanB; // 0xe0
	FExpressionInput AEqualsB; // 0x118
	FExpressionInput ALessThanB; // 0x150
	float EqualsThreshold; // 0x188
	float ConstB; // 0x18c
	float ConstAEqualsB; // 0x190
};

struct ALevelSequenceActor {
	bool bAutoPlay; // 0x3d8
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0x3e0
	ULevelSequencePlayer* SequencePlayer; // 0x408
	FStringAssetReference LevelSequence; // 0x410
	ULevelSequenceBurnInOptions* BurnInOptions; // 0x420
	UMovieSceneBindingOverrides* BindingOverrides; // 0x428
	AActor* SpawnablesParent; // 0x430
	ULevelSequenceBurnIn* BurnInInstance; // 0x438
};

struct UPirateGeneratorSettings {
	FString ConfigJson; // 0x28
	FString PiratesFolder; // 0x38
	FString WardrobeFolder; // 0x48
	FStringAssetReference WardrobeDataAsset; // 0x58
	TArray<FName> DefaultWardrobeItems; // 0x68
	FStringAssetReference MaterialReferencesDataAsset; // 0x78
	FStringAssetReference SkeletonsDataAsset; // 0x88
	TArray<FStringAssetReference> BaseSkeletonMeshes; // 0x98
	TArray<FStringAssetReference> Characterization; // 0xa8
	TArray<FString> SkeletonMeshFormats; // 0xb8
	FStringAssetReference FirstPersonAnimations; // 0xc8
	FStringAssetReference ThirdPersonAnimations; // 0xd8
	TArray<float> LODScreenSizes; // 0xe8
	TArray<float> LODHysteresis; // 0xf8
	int32_t DefaultPirateGenerationSeed; // 0x108
};

struct UStatusResponseBallast {
	float Duration; // 0x30
	float WaterLevel; // 0x34
};

struct UHasRanksNPCDialogConditional {
	TArray<URankDesc*> RequiredRanks; // 0x30
};

struct UTaleQuestSequenceStepDesc {
	TArray<UTaleQuestStepDesc*> Descs; // 0xa0
};

struct USlateLoadingScreenParams {
	bool DrawBackground; // 0x28
	bool DrawBackgroundImage; // 0x29
	bool DrawTips; // 0x2a
	bool DrawSpinner; // 0x2b
	float ViewportWidth; // 0x2c
	float ViewportHeight; // 0x30
	float FooterHeight; // 0x34
	bool DrawSpinnerText; // 0x38
	FStringAssetReference PlaceholderSpinnerTexture; // 0x40
	FLinearColor BackgroundColour; // 0x50
	FSlateLoadingScreenImageParams PrimaryImage; // 0x60
	TArray<FSlateLoadingScreenImageParams> CyclingImages; // 0x80
	int32_t MaxNumImagesPerLoad; // 0x90
	FText SpinnerText; // 0x98
	FSlateColor SpinnerTextColour; // 0xd0
	FSlateFontInfo SpinnerTextFont; // 0x100
	float SpinnerSize; // 0x140
	FMargin SpinnerMargin; // 0x144
	float SpinnerPadding; // 0x154
	FStringAssetReference SpinnerIcon; // 0x158
	FMargin TipsMargin; // 0x168
	float TipWrapLength; // 0x178
	float TipDisplayDuration; // 0x17c
	float TipDurationBetweenTips; // 0x180
	int32_t NumTipsPerImage; // 0x184
	FSlateFontInfo LoadingTipFont; // 0x188
	float LoadingTipFontLineHeightPercentage; // 0x1c8
	TArray<FText> LoadingScreenTips; // 0x1d0
	FSlateColor LoadingScreenTipColour; // 0x1e0
	bool AllowSyncronousAssetLoad; // 0x210
};

struct UHarpoonRenderComponent {
	TArray<UMaterialInstanceDynamic*> HarpoonMaterials; // 0x628
	float LaunchAnimationDurationSecs; // 0x638
	float HitAnimationDurationSecs; // 0x63c
	float QuickRetractAnimationSpeed; // 0x640
};

struct UBTDecorator_PetRoamingAnimationStateActive {
	TArray<EAthenaAnimationPetRoamingState> MatchingStates; // 0x68
};

struct USoundBase {
	USoundClass* SoundClassObject; // 0x28
	char bDebug : 1; // 0x30
	EMaxConcurrentResolutionRule MaxConcurrentResolutionRule; // 0x34
	int32_t MaxConcurrentPlayCount; // 0x38
	float Duration; // 0x3c
	USoundAttenuation* AttenuationSettings; // 0x40
};

struct UCoherentUIGTHUDComponent {
	UShipNamesDataAsset* ShipNames; // 0x5d0
	FHealthUI HealthUI; // 0x618
};

struct AProjectileCooldownService {
	UProjectileCooldownServiceSettings* ProjectileCooldownSettings; // 0x3f8
};

struct UBackRadialAction {
	FText BackActionName; // 0x30
};

struct AHullDamage2 {
	float ExternalScarDecalMinSize; // 0x3e8
	float ExternalScarDecalMaxSize; // 0x3ec
	TArray<UTexture2D*> ExternalScarDecals; // 0x3f0
	float ExternalHoleDecalMinSize; // 0x400
	float ExternalHoleDecalMaxSize; // 0x404
	TArray<UMaterialInstance*> ExternalHoleDecals; // 0x408
	UMaterialInstance* InternalHoleDecal; // 0x418
	FWeightedProbabilityRange DamageZoneDeckDistribution; // 0x420
	UParticleSystem* InternalHitVfx; // 0x440
	UWwiseEvent* Strain_DamageSfx; // 0x448
	UWwiseObjectPoolWrapper* StrainDamagePool; // 0x450
	FHullDamageParamSet InternalParamDefaults; // 0x460
	TArray<FHullDamageNamedParamSet> InternalParamNamedSets; // 0x4c0
	UBakedDecalComponent* ImpactDecalComponent; // 0x4d0
	UShipDamageableComponent* ShipDamageComponent; // 0x4d8
	UTetherCustomisationComponent* TetherCustomisationComponent; // 0x4e0
	UShipLeakerComponent* ShipLeakerComponent; // 0x4e8
	UMobileInstancedStaticMeshComponent* InstancedPlanksComponent; // 0x4f0
	FTransform HiddenPlankLocation; // 0x500
	TArray<UHullDamagePointProxy*> Points; // 0x530
	TArray<FHullDamageHit> HitsCircularBuffer; // 0x5b8
	TArray<URepairableComponent*> RepairComponents; // 0x5c8
	TArray<UDecalComponent*> ExternalHoleDecalComponents; // 0x5d8
	TArray<UDecalComponent*> InternalHoleDecalComponents; // 0x5e8
	int32_t ServerHitCount; // 0x660
};

struct UIsAIOfFormStatCondition {
	TArray<UClass*> AllowedAIForms; // 0x30
};

struct ASphericalStatusEffectZone {
	UActorActivationComponent* ActorActivationComponent; // 0x3d8
	USphereComponent* SphereComponent; // 0x3e0
	UStatusEffectVolumeComponent* StatusEffectVolumeComponent; // 0x3e8
};

struct UPointOfInterestTrackerComponent {
	float SecondsBetweenRevelations; // 0xd0
	float SecondsAfterInertStateWhereNotificationsAreIgnored; // 0xd4
};

struct UInterpGroupDirector {
	TArray<UInterpTrack*> InterpTracks; // 0x30
	FName GroupName; // 0x40
	FColor GroupColor; // 0x48
	char bCollapsed : 1; // 0x4c
	char bVisible : 1; // 0x4c
	char bIsFolder : 1; // 0x4c
	char bIsParented : 1; // 0x4c
	char bIsSelected : 1; // 0x4c
};

struct USeatStat_SitOnShipOnFire {
	TWeakObjectPtr<AActor> WeakShipActor; // 0x48
};

struct UShipStuckDetectionComponent {
	float MaxShipSpeedToConsiderStationary; // 0xc8
	float StuckTimeUntilDeletion; // 0xcc
	float MaxHullSubmersionToConsiderStuckable; // 0xd0
	float StuckTimeDecaySpeed; // 0xd4
	bool PrintDebug; // 0xd8
	AShip* Ship; // 0xe0
};

struct UDiscardTransientActorStepDesc {
	FQuestVariableActor Actor; // 0x80
	ETransientActorDiscardType DiscardType; // 0x90
};

struct UEdGraph {
	UEdGraphSchema* Schema; // 0x28
	TArray<UEdGraphNode*> Nodes; // 0x30
	char bEditable : 1; // 0x40
	char bAllowDeletion : 1; // 0x40
	char bAllowRenaming : 1; // 0x40
};

struct UFirePropagator {
	UFireCellStateTimingParamsDataAsset* CellStateTimingParams; // 0xb8
	float WaterHeightOffsetToFloodCells; // 0xc4
};

struct AAnimatedMechanismAction {
	UMechanismActionComponent* MechanismActionComponent; // 0x3e0
	float Delay; // 0x3e8
	float NetDelay; // 0x3ec
	bool AnimateOnServer; // 0x3f0
	bool OnlyAnimateOnServerWhenActorsOverlapInteractionZone; // 0x3f1
	UMechanismMaterialGroup* MaterialGroup; // 0x3f8
	TScriptInterface<Class> MechanismInteractionInterface; // 0x400
	FAnimatedMechanismActionState State; // 0x428
	FWwiseEmitter Emitter; // 0x440
};

struct UProvokeHitReactionDesc {
	FQuestVariableActor ActorToProvoke; // 0x80
	UDamagerType* DamageType; // 0x90
	float DamageAmount; // 0x98
	EHealthChangedReason DamageReason; // 0x9c
};

struct UShockwaveDamagerComponent {
	float ExpansionDuration; // 0xd0
	float EndRadiusInMetres; // 0xd4
	bool ApplyImpulseToShips; // 0xd8
	FWeightedProbabilityRangeOfRanges ForceToApplyToShip; // 0xe0
	bool ApplyDamageToShips; // 0x110
	TArray<FShockwaveDamagerShipDamage> ShipDamageLevels; // 0x118
	UDamagerType* DamagerType; // 0x128
	bool ApplyImpulseToGhostShips; // 0x130
	float GhostShipImpulseDuration; // 0x134
	float GhostShipImpulseMaxDeflectionAngle; // 0x138
	bool DestroyHostileGhostShips; // 0x13c
	float NearbyEncounterDistanceInMetres; // 0x140
	FScriptMulticastDelegate OnShockwaveStarted; // 0x148
	FScriptMulticastDelegate OnShockwaveEnded; // 0x158
	TArray<TWeakObjectPtr<AShip>> ProcessedShips; // 0x168
	TArray<TWeakObjectPtr<AAggressiveGhostShip>> ProcessedGhostShips; // 0x178
};

struct APerformancePetSpawnerActor {
	UPerformancePetSpawnDefinitionsDataAsset* PerformancePetSpawnDefinitionsDataAsset; // 0x3d0
	AActor* ShipActor; // 0x3d8
	TArray<FSpawnedPetData> SpawnedPets; // 0x3e0
	UAIPetsOnDemandSpawner* Spawner; // 0x3f0
	AActor* OverridePetOwner; // 0x3f8
};

struct USirenStatuesSelector_BasedOnShipSize {
	TArray<FSirenStatuesSelector_BasedOnShipSize_Entry> Entries; // 0x28
};

struct APlayerCameraManager {
	APlayerController* PCOwner; // 0x3d0
	USceneComponent* TransformComponent; // 0x3d8
	float DefaultFOV; // 0x3e8
	float DefaultOrthoWidth; // 0x3f0
	float DefaultAspectRatio; // 0x3f8
	FCameraCacheEntry CameraCache; // 0x440
	FCameraCacheEntry LastFrameCameraCache; // 0x9f0
	FTViewTarget ViewTarget; // 0xfa0
	FTViewTarget PendingViewTarget; // 0x1560
	TArray<UCameraModifier*> ModifierList; // 0x1b38
	TArray<UCameraModifier*> DefaultModifiers; // 0x1b48
	float FreeCamDistance; // 0x1b58
	FVector FreeCamOffset; // 0x1b5c
	FVector ViewTargetOffset; // 0x1b68
	TArray<AEmitterCameraLensEffectBase*> CameraLensEffects; // 0x1b88
	UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x1b98
	UCameraAnimInst* AnimInstPool[0x8]; // 0x1ba0
	TArray<FPostProcessSettings> PostProcessBlendCache; // 0x1be0
	TArray<UCameraAnimInst*> ActiveAnims; // 0x1c00
	TArray<UCameraAnimInst*> FreeAnims; // 0x1c10
	ACameraActor* AnimCameraActor; // 0x1c20
	char bIsOrthographic : 1; // 0x1c28
	char bUseClientSideCameraUpdates : 1; // 0x1c28
	char bFollowHmdOrientation : 1; // 0x1c29
	float ViewPitchMin; // 0x1c2c
	float ViewPitchMax; // 0x1c30
	float ViewYawMin; // 0x1c34
	float ViewYawMax; // 0x1c38
	float ViewRollMin; // 0x1c3c
	float ViewRollMax; // 0x1c40
};

struct ULevelReward {
	uint32_t Level; // 0x28
};

struct AStaticStorageCrateWieldable {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct USeatComponent {
	FSittingActionStateParams SittingStateParams; // 0x250
	TArray<FPlayerStat> OnSitStats; // 0x2f0
	float CosCameraAngleToTurnOffFirstPersonMesh; // 0x300
};

struct UKrakenAnimatedTentacleAnimationSpecDataAsset {
	TArray<FKrakenAnimatedTentacleAnimationSpecBone> Bones; // 0x28
};

struct UThrobber {
	int32_t NumberOfPieces; // 0x138
	bool bAnimateHorizontally; // 0x13c
	bool bAnimateVertically; // 0x13d
	bool bAnimateOpacity; // 0x13e
	USlateBrushAsset* PieceImage; // 0x140
	FSlateBrush Image; // 0x148
};

struct ARegionAssetCacheActor {
	TArray<FRegionAssetsList> RegionData; // 0x3d0
	TArray<UObject*> LoadedAssets; // 0x3e0
};

struct AMechanismGeyser {
	EGeyserState GeyserStateWhenMechanismIsInactive; // 0x438
	UMechanismActionComponent* MechanismActionComponent; // 0x440
};

struct UParticleModuleAttractorPoint {
	FRawDistributionVector Position; // 0x50
	FRawDistributionFloat Range; // 0x88
	FRawDistributionFloat Strength; // 0xc0
	char StrengthByDistance : 1; // 0xf8
	char bAffectBaseVelocity : 1; // 0xf8
	char bOverrideVelocity : 1; // 0xf8
	char bUseWorldSpacePosition : 1; // 0xf8
	char Positive_X : 1; // 0xf8
	char Positive_Y : 1; // 0xf8
	char Positive_Z : 1; // 0xf8
	char Negative_X : 1; // 0xf8
	char Negative_Y : 1; // 0xf9
	char Negative_Z : 1; // 0xf9
};

struct UAIFixedWavesSpawner {
	TArray<FAIPersistentSpawnerWave> SpawnedWaves; // 0x428
	int32_t NumWavesToSpawnOnSpottedNewTarget; // 0x438
};

struct AServerMigrationSerialisationDetailsTestsActorWithReplicatedChild {
	UChildActorComponent* ChildActorComponent; // 0x3d0
};

struct UAmmoTransferComponent {
	int32_t AmmoCount; // 0xc8
	AActor* ActorOwner; // 0xd0
};

struct UWindZoneComponent {
	FWindTurbulenceParameters TurbulenceParams; // 0x2b8
	FWindZoneParams WindZoneParams; // 0x328
};

struct UCameraRollModifier {
	char bDebug : 1; // 0x28
	char bExclusive : 1; // 0x28
	char Priority; // 0x2c
	APlayerCameraManager* CameraOwner; // 0x30
	float AlphaInTime; // 0x38
	float AlphaOutTime; // 0x3c
	float Alpha; // 0x40
};

struct UFlamethrowerCoordinatorComponent {
	TArray<UFlamethrowerComponent*> Flamethrowers; // 0xd0
	TScriptInterface<Class> AnimatedMechanismInterface; // 0xe0
	TScriptInterface<Class> MechanismInteractionInterface; // 0xf0
};

struct UPlinthInteractableComponent {
	UActionRulesComponent* ActionRulesComponent; // 0x118
};

struct UBTTask_RamTargetShip {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UProceduralFoliageComponent {
	UProceduralFoliageSpawner* FoliageSpawner; // 0xc8
	float TileOverlap; // 0xd0
	AVolume* SpawningVolume; // 0xd8
	FGuid ProceduralGuid; // 0xe0
};

struct UMeleeWeaponDataAsset {
	float PlayerAttackSelectionTime; // 0x28
	UMeleeWeaponMovementSpeedConfig* MovementSpeedConfig; // 0x30
	TArray<UMeleeAttackDataAsset*> ComboAttacks; // 0x38
	UMeleeAttackDataAsset* HeavyAttack; // 0x48
	float HeavyAttackChargeDuration; // 0x50
	TArray<FMeleeWeaponSpecialAttackData> SpecialAttacks; // 0x58
	FItemBlockingParameters BlockingParameters; // 0x68
	UPhysicalMaterial* BlockingPhysicalMaterial; // 0x70
	EMeleeWeaponMovementSpeed BlockingMovementSpeed; // 0x78
	float HitBlockingMovementDisableTime; // 0x7c
	UParticleSystem* TrailParticleSystem_FP; // 0x80
	UParticleSystem* TrailParticleSystem_TP; // 0x88
	FName TrailStartSocketName; // 0x90
	FName TrailEndSocketName; // 0x98
	ETrailWidthMode TrailWidthMode; // 0xa0
	float TrailWidth; // 0xa4
	float PerceptionHearingRange; // 0xa8
};

struct UStatusResponseStun {
	EStunAnimationType AnimType; // 0x30
	EStunnedActionStateItemWielding IsItemWieldingAllowed; // 0x31
	float Duration; // 0x34
	bool PlayScreenVfx; // 0x38
};

struct ALauncherParentMock {
	TArray<AActor*> IgnoreActors; // 0x3e8
};

struct UParticleModuleParametersOverCustom {
	FRawDistributionFloat DynamicParamScaleOverCustomScale; // 0x68
	FRawDistributionFloat SpawnRateOverCustomScale; // 0xa0
	FRawDistributionFloat LifetimeOverCustomScale; // 0xd8
	FRawDistributionFloat SizeOverCustomScale; // 0x110
	FRawDistributionFloat InitialVelocityOverCustomScale; // 0x148
	FRawDistributionFloat OpacityOverCustomScale; // 0x180
	FRawDistributionFloat CylinderRadiusOverCustomScale; // 0x1b8
};

struct ATriggerVolume {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct AAthenaTavernPlayerCharacterMock {
	UStreamingLocationComponent* StreamingLocationComponent; // 0x1ac0
	UAICreatureMovementModifierParamsDataAsset* ArenaTavernPetMovementData; // 0x1ac8
	AAthenaPlayerController* PlayerController; // 0x1b00
	bool VoteForRivalsHasPassed; // 0x1b28
};

struct ATinyShark {
	TArray<FVector> AITargetVisibilityPoints; // 0x980
	float TargetBoxHeightMultiplier; // 0x990
	float TargetBoxZOffsetMultiplier; // 0x994
	UAnimNotifyWwiseEmitterComponent* AnimNotifyWwiseEmitterComponent; // 0x998
};

struct UShantyRadialActivationInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UInterpFilter_Classes {
	FString Caption; // 0x28
};

struct UParticleModuleCollision {
	FRawDistributionVector DampingFactor; // 0x50
	FRawDistributionVector DampingFactorRotation; // 0x88
	FRawDistributionFloat MaxCollisions; // 0xc0
	EParticleCollisionComplete CollisionCompletionOption; // 0xf8
	TArray<EObjectTypeQuery> CollisionTypes; // 0x100
	char bApplyPhysics : 1; // 0x114
	FRawDistributionFloat ParticleMass; // 0x118
	float DirScalar; // 0x150
	char bPawnsDoNotDecrementCount : 1; // 0x154
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x154
	float VerticalFudgeFactor; // 0x158
	FRawDistributionFloat DelayAmount; // 0x160
	char bDropDetail : 1; // 0x198
	char bCollideOnlyIfVisible : 1; // 0x198
	char bIgnoreSourceActor : 1; // 0x198
	char bIgnoreCollisionsWithHiddenObjects : 1; // 0x198
	float MaxCollisionDistance; // 0x19c
};

struct UAthenaTutorialComponent {
	FMainTutorialSequence MainTutorial; // 0xe0
	bool HasPlayedWakeupAnim; // 0xc80
};

struct UServerMigrationSerialisationDetailsTestsTArrayProperty {
	TArray<int32_t> IntegerArrayWithMigrationMarkup; // 0x28
};

struct AChecklistMap {
	int32_t CanvasWidth; // 0x7d8
	int32_t CanvasHeight; // 0x7dc
	UFont* Font; // 0x7e0
	float FontScale; // 0x7e8
	float FontLineSpacingScale; // 0x7ec
	UChecklistMapLayout* ChecklistMapLayout; // 0x7f8
	FChecklistMapContents Contents; // 0x800
};

struct UAthenaCharacterBaseLocomotionInputComponent {
	UItemCategory* ThrowablesItemCategory; // 0x2d8
};

struct UParticleModuleRotation_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x1a8
};

struct UAddItemsFromDataToCollectorsChestStepBaseDesc {
	bool TrackItems; // 0x90
	bool MarkItemsAsCritical; // 0x91
	FText CriticalActorLostMessage; // 0x98
};

struct UPetEntitlementBaseCategory {
	FName PetPreviewCamera; // 0x80
};

struct UTimelineTemplate {
	float TimelineLength; // 0x28
	ETimelineLengthMode LengthMode; // 0x2c
	char bAutoPlay : 1; // 0x30
	char bLoop : 1; // 0x30
	char bReplicated : 1; // 0x30
	char bValidatedAsWired : 1; // 0x30
	TArray<FTTEventTrack> EventTracks; // 0x38
	TArray<FTTFloatTrack> FloatTracks; // 0x48
	TArray<FTTVectorTrack> VectorTracks; // 0x58
	TArray<FTTLinearColorTrack> LinearColorTracks; // 0x68
	TArray<FBPVariableMetaDataEntry> MetaDataArray; // 0x78
	FGuid TimelineGuid; // 0x88
};

struct UBTDecorator_RollAgainstPatrolChance {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UAIPartsService {
	UAIPartsCategoryTypeList* PartsCategoriesList; // 0x30
	UAIColorVariantPool* TeamColors; // 0x38
};

struct UParticleModuleLocationGPU {
	FRawDistributionVector StartLocation; // 0x50
	FRawDistributionVector AdditionalStartLocations[0x5]; // 0x88
	char bUseGroupAStartLocationForAllGroups : 1; // 0x1a0
};

struct UNavTestRenderingComponent {
	float MinDrawDistance; // 0x2b8
	float LDMaxDrawDistance; // 0x2c0
	float CachedMaxDrawDistance; // 0x2c4
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2c8
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2c9
	char bAlwaysCreatePhysicsState : 1; // 0x2cc
	char bGenerateOverlapEvents : 1; // 0x2cc
	char bMultiBodyOverlap : 1; // 0x2cc
	char bCheckAsyncSceneOnMove : 1; // 0x2cc
	char bTraceComplexOnMove : 1; // 0x2cc
	char bReturnMaterialOnMove : 1; // 0x2cc
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2cc
	char bAllowCullDistanceVolume : 1; // 0x2cc
	char bHasMotionBlurVelocityMeshes : 1; // 0x2cd
	char bRenderInMainPass : 1; // 0x2cd
	char bRenderInCustomPrePass : 1; // 0x2cd
	char bReflected : 1; // 0x2cd
	char bReflectedOnLowQuality : 1; // 0x2cd
	char bFFTWaterMask : 1; // 0x2cd
	char bVolumeFogMask : 1; // 0x2cd
	char bAffectsFlatWater : 1; // 0x2ce
	char bGPUParticlesKillPlane : 1; // 0x2ce
	char bDontCull : 1; // 0x2ce
	char bDontSizeOnScreenCull : 1; // 0x2ce
	float OverriddenShadowMinTexelSize; // 0x2d0
	bool bOverrideShadowMinSizeCulling; // 0x2d4
	bool bOverrideShadowCascadesExclusion; // 0x2d5
	EExcludeFromCascades ExcludedShadowCascades; // 0x2d6
	char bReceivesDecals : 1; // 0x2d8
	char bOwnerNoSee : 1; // 0x2d8
	char bOnlyOwnerSee : 1; // 0x2d8
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d8
	char bIsACloud : 1; // 0x2d8
	char bUseAsOccluder : 1; // 0x2d8
	char bSelectable : 1; // 0x2d8
	char bForceMipStreaming : 1; // 0x2d8
	char bHasPerInstanceHitProxies : 1; // 0x2d9
	char CastShadow : 1; // 0x2d9
	char bAffectDynamicIndirectLighting : 1; // 0x2d9
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x2d9
	char bAffectDistanceFieldLighting : 1; // 0x2d9
	char bCastDynamicShadow : 1; // 0x2d9
	char bCastStaticShadow : 1; // 0x2d9
	char bCastVolumetricTranslucentShadow : 1; // 0x2d9
	char bSelfShadowOnly : 1; // 0x2da
	char bCastFarShadow : 1; // 0x2da
	char bCastInsetShadow : 1; // 0x2da
	char bCastCinematicShadow : 1; // 0x2da
	char bCastHiddenShadow : 1; // 0x2da
	char bCastShadowAsTwoSided : 1; // 0x2da
	char bCastShadowOnLowQuality : 1; // 0x2da
	char bLightAsIfStatic : 1; // 0x2da
	char bLightAttachmentsAsGroup : 1; // 0x2db
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2dc
	bool bHasCachedStaticLighting; // 0x2dd
	bool bStaticLightingBuildEnqueued; // 0x2de
	char bIgnoreRadialImpulse : 1; // 0x2e0
	char bIgnoreRadialForce : 1; // 0x2e0
	char AlwaysLoadOnClient : 1; // 0x2e0
	char AlwaysLoadOnServer : 1; // 0x2e0
	char bUseEditorCompositing : 1; // 0x2e0
	char bRenderCustomDepth : 1; // 0x2e0
	char bAllowVelocityInMaterial : 1; // 0x2e0
	int32_t CustomDepthStencilValue; // 0x2e4
	int32_t TranslucencySortPriority; // 0x2e8
	int32_t VisibilityId; // 0x2ec
	float LpvBiasMultiplier; // 0x2f4
	float FarCascadeLPVBiasMultiplier; // 0x2f8
	float LpvIntensityMultiplier; // 0x2fc
	FCustomPrimitiveData CustomPrimitiveData; // 0x300
	FBodyInstance BodyInstance; // 0x310
	char bAffectRain : 1; // 0x490
	char bCanEverAffectNavigation : 1; // 0x490
	char bSkipRenderingInOuterLPVCascades : 1; // 0x490
	char bEnableMergeCollisionComponents : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerUnderwater : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerUnderwater : 1; // 0x491
	char bCanRenderAboveAndBelowWaterAtSameTime : 1; // 0x491
	float BoundsScale; // 0x498
	float OcclusionBoundsScale; // 0x49c
	float LastRenderTime; // 0x4a0
	bool bGPUVisibility; // 0x4a4
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x4a5
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x4a6
	FScriptMulticastDelegate OnComponentHit; // 0x4f0
	FScriptMulticastDelegate OnComponentBeginOverlap; // 0x4f1
	FScriptMulticastDelegate OnComponentEndOverlap; // 0x4f2
	FScriptMulticastDelegate OnComponentWake; // 0x4f3
	FScriptMulticastDelegate OnComponentSleep; // 0x4f4
	UPrimitiveComponent* LODParentPrimitive; // 0x528
	FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x530
	UPrimitiveComponent* MergedCollisionComponentParent; // 0x580
};

struct UReviveDebugComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UItemLifetimeManagerService {
	TMap<FName, FCappedItemsByGroup> CappedItemGroupsByIsland; // 0x30
	UItemLifetimeManagerServiceDataAsset* LifetimeDataAsset; // 0x80
};

struct ADamageableCannonProjectile {
	float ImpactExplosionDelayOverride; // 0x658
};

struct AMusicalInstrument {
	EMusicalInstrumentType InstrumentType; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	float PlayingCoolDownTime; // 0x7b0
	FName InstrumentDrunkennessRtpc; // 0x7b4
	FName InstrumentUnderwaterRtpc; // 0x7bc
	float MaxUnderwaterRtpcFactor; // 0x7c4
	float MinUnderwaterRtpcFactor; // 0x7c8
	float PlayingAINoiseRange; // 0x7cc
	float AINoiseEventInterval; // 0x7d0
	UObject* TriggerEffectActor; // 0x7d8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7e0
	AAthenaPlayerCharacter* AthenaPlayerCharacter; // 0x7f0
};

struct AWatercraft {
	UBuoyancyComponent* BuoyancyComponent; // 0x3f8
	FWatercraftRolloverCorrector RolloverCorrector; // 0x400
	UShipNosediveBrake* NosediveBrake; // 0x410
	UBowSplashContainer* BowSplashContainer; // 0x418
	UStaticMeshComponent* CollisionMesh; // 0x420
	UStaticMeshComponent* CraftMesh; // 0x428
	UBoxComponent* OverlapHits; // 0x430
	UStaticMeshComponent* WaterOcclusionVolume; // 0x438
	UWaterInteractionComponent* WaterInteractionComponent; // 0x440
	FName ClientConvexHullCollisionProfile; // 0x448
	FNetTimeStampCalculator MovementTimeStamp; // 0x450
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x4c0
	FBuoyancySampleMovement BuoyancySampleMovement; // 0x510
	UCurveFloat* SpeedToChoppinessScalarCurve; // 0x578
	float DeepWaterSubmersionThreshold; // 0x580
	float BuoyancyChoppinessWhileSinking; // 0x584
	bool RigidBodyAwake; // 0x588
	bool InContactWithLand; // 0x589
	bool InDeepWater; // 0x58a
	TScriptInterface<Class> Scrapeable; // 0x590
};

struct UNarratedCompassDirectionComponent {
	float YawThreshold; // 0xe8
	TScriptInterface<Class> CachedOrientationInterface; // 0x218
	AActor* Wielder; // 0x228
	TScriptInterface<Class> ObjectMessagingDispatcher; // 0x230
	TScriptInterface<Class> CachedHUDMessagingDispatcher; // 0x240
};

struct UNPCDialogUnaryExpression {
	UNPCDialogExpression* Child; // 0x28
};

struct UMaterialExpressionLandscapeLayerWeight {
	FExpressionInput Base; // 0x70
	FExpressionInput Layer; // 0xa8
	FName ParameterName; // 0xe0
	float PreviewWeight; // 0xe8
	FVector ConstBase; // 0xec
	FGuid ExpressionGUID; // 0xf8
};

struct UNameplateComponent {
	float FadeTime; // 0x2b0
	USkeletalMeshSocket* NameplateSocket; // 0x2b8
};

struct UPLQuestLocationDataBundle {
	TArray<UPLQuestLocationDataAsset*> ActiveLocations; // 0x28
};

struct UMovieSceneCameraShakeSection {
	FMovieSceneCameraShakeSectionData ShakeData; // 0x98
	UCameraShake* ShakeClass; // 0xb8
	float PlayScale; // 0xc0
	ECameraAnimPlaySpace PlaySpace; // 0xc4
	FRotator UserDefinedPlaySpace; // 0xc8
};

struct UScaleBoxSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UKrakenShipHittingBehaviourParamsDataAsset {
	FKrakenShipHittingBehaviourParams Params; // 0x28
};

struct UAreaOfEffectHealAIAbility {
	AActor* HealAreaOfEffectActor; // 0x88
};

struct UTaleQuestPermanentPromptStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AServerMigrationSerialisationDetailsTestsMigrationGetLinkedActor {
	AActor* DependentActor; // 0x3d0
};

struct UPetFeedingDataAsset {
	FPetFeedingParams PetFeedingParams; // 0x28
};

struct UClueFactory {
	UClueFactoryConfig* Config; // 0x28
};

struct ALandmarkReactionPlayer {
	TArray<FLandmarkReactionKeyFrame> OrderedReactions; // 0x3d8
	TArray<UParticleSystemComponent*> ActiveParticleSystems; // 0x440
};

struct ATradeRouteMap {
	UFont* Font; // 0x840
	FLinearColor FontColour; // 0x848
	float FontLineSpacing; // 0x858
	float FontScale; // 0x85c
	FTradeRouteMapTextLayout TextData; // 0x860
	EBlendMode ImageBlendMode; // 0x870
	TArray<FTreasureMapWidgetTexture> ImageData; // 0x878
	FStringAssetReference IslandMaterialReference; // 0x888
	FText VesselText; // 0x898
	FText OriginText; // 0x8d0
	FText DestinationText; // 0x908
};

struct UWaitUntilAllParticipantsLeaveRadiusStep {
	float DurationBetweenChecks; // 0x80
	FQuestVariableVector Location; // 0x88
	FQuestVariableFloat Radius; // 0x98
};

struct ATeleportTriggerObject {
	AActor* TargetTeleportActor; // 0x3d0
	FTransform TeleportOffset; // 0x3e0
	float RelevancyTimeout; // 0x410
};

struct ADoubleActionItem {
	UItemActionComponent* PrimaryAction; // 0x7a8
	UItemActionComponent* SecondaryAction; // 0x7b0
	EDoubleActionItemPriority ActionPriority; // 0x7b8
	bool IsDisplaceable; // 0x7b9
	bool ShouldBlockPickup; // 0x7ba
	float ActionMoveSpeedScalar; // 0x7bc
	EAimSensitivitySettingCategory ActionSensitivitySettingCategory; // 0x7c0
};

struct UUdpMessagingSettings {
	bool EnableTransport; // 0x28
	FString UnicastEndpoint; // 0x30
	FString MulticastEndpoint; // 0x40
	char MulticastTimeToLive; // 0x50
	TArray<FString> StaticEndpoints; // 0x58
	bool EnableTunnel; // 0x68
	FString TunnelUnicastEndpoint; // 0x70
	FString TunnelMulticastEndpoint; // 0x80
	TArray<FString> RemoteTunnelEndpoints; // 0x90
};

struct AActionRuleTestActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UUnlockableEntitlementsDataAsset {
	TArray<FUnlockableEntitlementCategory> Categories; // 0x28
};

struct UGameSessionSettings {
	int32_t MaxSpectators; // 0x28
	int32_t MaxPlayers; // 0x2c
	char bRequiresPushToTalk : 1; // 0x30
};

struct UEmblemReward {
	FEmblemId EmblemId; // 0x28
};

struct UInAppPurchaseCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UParticleModuleVectorFieldScale {
	UDistributionFloat* VectorFieldScale; // 0x50
};

struct UBTTask_MoveToTarget {
	float MaxDistFromDestinationPosToTargetPos; // 0xa0
	float OverrideMaxSpeedToSlowDistanceFactor; // 0xa4
	FBlackboardKeySelector TargetBlackboardKey; // 0xa8
};

struct ATriggerObject {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UWaitForAnimationStateEntryProxy {
	FScriptMulticastDelegate OnReachedState; // 0x28
};

struct UTaleQuestGetNPCActorFromClueSiteStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UBlockMigrationForCrewTaskStep {
	UBlockMigrationForCrewTaskStepDesc* Desc; // 0x90
	UTaleQuestStep* TaskStep; // 0x98
};

struct UItemPreviewDataObject {
	FStringAssetReference RequestedAssetReference; // 0x30
	TWeakObjectPtr<UItemDesc> RequestedItemDesc; // 0x40
	FStringAssetReference CurrentPreviewAssetReference; // 0x48
};

struct UMigrationUIComponent {
	UMigrationUIContentsDataAsset* UIContentsDataAsset; // 0xd8
	UCanvasRenderTarget2D* TextRenderTarget; // 0xe0
	UMaterialInstanceDynamic* DynamicMaterial; // 0xe8
};

struct UBTTask_Wait {
	float WaitTime; // 0x60
	float RandomDeviation; // 0x64
};

struct AQuestBook {
	UInventoryItemComponent* InventoryItem; // 0x7a8
	FQuestBookRepInfo ReplicationInfo; // 0x7c0
	UQuestBookPageList* PageList; // 0x7e8
	TMap<int32_t, UQuestBookPageLayout*> ProcPageCache; // 0x7f0
	FQuestBookMaterialHandler MaterialHandler; // 0x840
	float ExtraPageTurnDurationForForceRedraw; // 0x980
	UUsableWieldableComponent* UsableWieldableComponent; // 0x988
	ALightingController* LightingController; // 0x990
	float ShadowCascadeDistributionExponentWhenUsing; // 0x998
	float ShadowCascadeDistributionExponentTransitionTime; // 0x99c
	float PageTurnDuration; // 0x9a8
	float PageTurnForceRedrawDuration; // 0x9ac
	int32_t PageWidth; // 0xad0
	int32_t PageHeight; // 0xad4
	FQuestBookPageRenderer PageTextRenderer; // 0xad8
};

struct AShipwrightInteractionProxy {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UItemDiggingBaseConfig {
	FTransform RelativeTransform; // 0x30
	int32_t MaxSmallCrewSizeForNumDigsSelection; // 0x60
	FWeightedProbabilityRange NumDigsRequiredForSmallCrewSize; // 0x68
	FWeightedProbabilityRange NumDigsRequiredForBiggerCrewSize; // 0x88
	int32_t DefaultNumDigsIfNotInCrew; // 0xa8
	float MaxDigRadiusToFurtherExhume; // 0xac
	bool RemoveSandDecal; // 0xb0
	UOnDigStrategy* OnDigTrigger; // 0xb8
	UOnBuryStrategy* OnBuryTrigger; // 0xc0
};

struct USeaId {
	FName SeaName; // 0x28
};

struct UMaidenVoyageStarter {
	AAthenaPlayerController* AthenaPlayerController; // 0x28
	bool ShouldPlayIntroAnimatic; // 0x30
	bool ShouldDisableAllIntroBehaviour; // 0x31
	FFirstPersonAnimaticSettings IntroAnimationSettings; // 0x34
};

struct UMockHitReactionComponent {
	bool CalledServerProcessHitReactionImpl; // 0x100
	bool CalledClientProcessHitReactionImpl; // 0x101
};

struct UAnimNotify_WwiseSoundMeshSwitch {
	FName SkeletalMeshSwitchGroup; // 0x70
	TArray<FAnimNotify_SoundSwitch> MeshOverrides; // 0x78
};

struct UBullRushAIAbility {
	UWorld* CachedWorld; // 0x98
};

struct USetTaleProgressStep {
	USetTaleProgressStepDesc* StepDesc; // 0x90
};

struct AMast {
	EMastType MastType; // 0x408
	UMastAudioParams* MastAudioParams; // 0x410
	USceneComponent* SceneRootComponent; // 0x418
	UIntentCombinerComponent* AngleCombinerComponent; // 0x420
	UIntentCombinerComponent* SailHoistIntentCombinerComponent; // 0x428
	UIntentCombinerComponent* MastHoistIntentCombinerComponent; // 0x430
	USceneComponent* MastMovingAttachComponent; // 0x438
	USceneComponent* SailAnglePivotComponent; // 0x440
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x448
	URepairableComponent* RepairableComponentFirst; // 0x450
	URepairableComponent* RepairableComponentSecond; // 0x458
	URepairableComponent* RepairableComponentThird; // 0x460
	UShipDamageableComponent* DamageableComponent; // 0x468
	UMastFlammableComponent* MastFlammableComponent; // 0x470
	float AngleBlend; // 0x478
	float LoweredBlend; // 0x47c
	float LoweringSpeed; // 0x480
	float RaisingSpeed; // 0x484
	float TurnSpeed; // 0x488
	float MaxTurnAngle; // 0x48c
	FVector LookAtPosLow; // 0x490
	FVector LookAtPosHigh; // 0x49c
	UWwiseObjectPoolWrapper* SailAudioPool; // 0x4a8
	UWwiseEvent* AmbientSailFlapsSfx; // 0x4b0
	UWwiseEvent* AmbientSailFlapsStopSfx; // 0x4b8
	UWwiseEvent* PerfectSailInflationOneShot; // 0x4c0
	FName InflationRTPC; // 0x4c8
	FName SailLengthRTPC; // 0x4d0
	float ClientSailBlendSpeed; // 0x4d8
	TArray<UStaticMeshComponent*> YardArms; // 0x4e0
	FName TelemetryIdentifier; // 0x4f0
	bool MastShouldBeFractured; // 0x4f8
	FMastCollisionProfiles MastCollisionProfiles; // 0x4fc
	FMastPhysicsComponents MastPhysicsComponents; // 0x528
	UStaticMesh* MastIntactMesh; // 0x560
	UStaticMesh* MastFractureMeshBottom; // 0x568
	float MastFractureMeshBottomScale; // 0x570
	float MastFractureMeshOriginalScale; // 0x574
	UStaticMesh* MastFractureMeshTop; // 0x578
	UParticleSystem* DamageParticleSystem; // 0x580
	float HingeHeight; // 0x588
	float HingeDistanceFromCentre; // 0x58c
	float HingeDirectionAngle; // 0x590
	float MaxFallAngle; // 0x594
	float MastLiftingSpeed; // 0x598
	bool OverrideSailLengthWhenFalling; // 0x59c
	float MaxFallenSailLength; // 0x5a0
	float SailFoldingSpeed; // 0x5a4
	bool OverrideSailAngleWhenFalling; // 0x5a8
	float DesiredFallingSailAngle; // 0x5ac
	float SailTwistingSpeed; // 0x5b0
	UMastHinge* Hinge; // 0x5b8
	FWeightedProbabilityRangeOfRanges MastImpactForceToApplyToShip; // 0x5c0
	float MastImpactForceModifierToApplyToKrakenWrappedShip; // 0x5f0
	float MastImpactHeightLocation; // 0x5f4
	UCameraShake* CameraShake; // 0x5f8
	float CameraShakeInnerRadius; // 0x600
	float CameraShakeOuterRadius; // 0x604
	bool PreviewMastFallenPosition; // 0x608
	TArray<URepairableComponent*> RepairableComponents; // 0x610
	FMastDamageAudioParams DamageAudioParameters; // 0x620
	UTetherCustomisationComponent* TetherCustomisationComponent; // 0x6d8
	TArray<UChildActorComponent*> LinkedSails; // 0x780
	FIntentPredictor LengthIntentPredictor; // 0x790
	FIntentPredictor AngleIntentPredictor; // 0x7ac
	FIntentPredictor MastHoistIntentPredictor; // 0x7c8
	bool MastHoistingControlSchemeActive; // 0x7e4
	FObjectMessagingHandle SailGotPerfectWindEventHandle; // 0x7e8
	FObjectMessagingHandle SailLostPerfectWindEventHandle; // 0x830
	FObjectMessagingHandle MastRepairStoppedHandle; // 0x878
	FWwiseEmitter SailsAudioEmitter; // 0x8d0
	float ServerAngleRatio; // 0x8f0
	float ServerLoweredProportion; // 0x8f4
	float ServerMastFallingProportion; // 0x8f8
	bool AllowedToFall; // 0x90c
	bool PlayAudio; // 0x90d
	bool IsCursed; // 0x940
};

struct UNPCOnSurfaceManager {
	UNPCOnSurfaceDataAsset* NPCOnSurfaceDataAsset; // 0x28
	ANPCOnSurface* NPC; // 0x30
	AActor* ParentActor; // 0x50
	TArray<ACannon*> CannonActors; // 0x58
	UNPCOnSurfaceVOManager* VOManager; // 0x68
	UNPCOnSurfaceCannonManager* CannonManager; // 0x70
};

struct UHasEntitlementsNPCDialogConditional {
	TArray<UEntitlementDesc*> RequiredEntitlements; // 0x30
};

struct AServerMigrationSerialisationDetailsTestsActorThatMovesOnBeginPlay {
	UPrimitiveComponent* PrimitiveComponent; // 0x3d0
};

struct UMaterialExpressionSphereMask {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	FExpressionInput Radius; // 0xe0
	FExpressionInput Hardness; // 0x118
	float AttenuationRadius; // 0x150
	float HardnessPercent; // 0x154
};

struct AShipSpawnLocation {
	TArray<AShipSpawnLocation*> LinkedShipSpawnLocations; // 0x3d0
	TArray<ASpawnLocation*> AssociatedSpawnLocations; // 0x3e0
	UShipSize* ShipSize; // 0x3f0
	FString Description; // 0x3f8
	UBoxComponent* BoxComponent; // 0x408
};

struct UIsPlayerInIslandBoundsStatCondition {
	FName IslandName; // 0x28
};

struct ASwingDoor {
	ULockComponent* LockComponent; // 0x4f0
	UWwiseEvent* OpenDoorAudioSting; // 0x4f8
	USwingDoorAudioParams* SwingDoorAudioParams; // 0x500
	ESwingDoorState ServerDoorState; // 0x528
};

struct UEnvQueryTest_HasLineOfSight {
	ETraceDirection TraceDirection; // 0x170
	UEnvQueryContext* Context; // 0x178
};

struct ATaleNote {
	int32_t CanvasWidth; // 0x7a0
	int32_t CanvasHeight; // 0x7a4
	float FontScale; // 0x7a8
	UFont* Font; // 0x7b0
	FTreasureMapWidgetStreamedTexture Image; // 0x7b8
	FTreasureMapWidgetText TitleWidgetText; // 0x7e8
	FTreasureMapWidgetText BodyWidgetText; // 0x808
	float NoteWidth; // 0x828
	FText Title; // 0x830
	FText Body; // 0x868
	UMaybeCompressedCanvasRenderTarget2D* RenderTarget; // 0x8a0
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x8a8
	UUsableWieldableComponent* UsableWieldableComponent; // 0x8b0
	UInventoryItemComponent* InventoryItemComponent; // 0x8b8
};

struct UCoherentUIGTWidget {
	AActor* Owner; // 0x158
	FScriptMulticastDelegate ReadyForBindings; // 0x160
	FScriptMulticastDelegate BindingsReleased; // 0x170
	FScriptMulticastDelegate FinishLoad; // 0x180
	FScriptMulticastDelegate FailLoad; // 0x190
	FScriptMulticastDelegate StartLoading; // 0x1a0
	FScriptMulticastDelegate NavigateTo; // 0x1b0
	FScriptMulticastDelegate JavaScriptEvent; // 0x1c0
	FScriptMulticastDelegate UIGTScriptingReady; // 0x1d0
	TextureFilter Filter; // 0x1f8
	bool bReceiveInput; // 0x1f9
	bool bReceiveInputWhenTransparent; // 0x1fa
	bool bGammaCorrectedMaterial; // 0x1fb
	bool AllowPerformanceWarnings; // 0x1fc
	float ExecuteJSTimersThresholdMs; // 0x200
	float UpdateStylesAndLayoutThresholdMs; // 0x204
	float RecordRenderingCommandsThresholdMs; // 0x208
	float PaintWarningThresholdMs; // 0x20c
	int32_t LayersCountThreshold; // 0x210
	int32_t LayerWidthThreshold; // 0x214
	int32_t LayerHeightThreshold; // 0x218
	bool bEnableAdditionalDefaultStyles; // 0x21c
	FString URL; // 0x3c0
	float ClickThroughAlphaThreshold; // 0x3d0
	bool Transparent; // 0x3d4
};

struct UMutateCollectorsChestStepDesc {
	FQuestVariableActor CollectorsChest; // 0x80
};

struct UPlayerActivitySettings {
	FStringAssetReference PlayerActivityLifetimeRulesCatalogue; // 0x38
	FStringAssetReference PlayerActivityIconCatalogue; // 0x48
	float NameplateMaxVisibilityDistance; // 0x58
};

struct UStreamingLocationComponent {
	FVector StreamingLocationOverride; // 0xd0
	bool StreamingLocationActive; // 0xdc
};

struct AActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UDebugStoryStateSourceAsset {
	TArray<FDebugStoryInfoModelSchedule> DebugStories; // 0x28
};

struct APressurePlateMechanismTrigger {
	bool DisableAfterActivation; // 0x440
	bool AutoEnableAfterDisable; // 0x441
	float TimeAfterDisableBeforeAutoEnable; // 0x444
	float DelayBeforeActivation; // 0x448
	float DeactivateTime; // 0x44c
	bool InvertTriggerActivation; // 0x450
};

struct UCancelVoyageVotableComponent {
	float TooltipUIFadeDuration; // 0x248
	FVector2D TooltipUIScreenSpaceOffsetRatio; // 0x24c
	FProposedVoyageEntry ProposedEntry; // 0x258
	FProposedTaleEntry ProposedTale; // 0x268
	UStaticMeshComponent* VotableMeshComponent; // 0x280
};

struct UTaleQuestStartingBannerStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct URiggingSystemComponent {
	FRopeStyleParams RopeStyle; // 0x2b0
	TArray<FRiggingSystemLineGroup> LineGroups; // 0x2d0
	ARiggingSystem* Impl; // 0x2e0
};

struct ANavigationTestingActor {
	UCapsuleComponent* CapsuleComponent; // 0x3e0
	UNavigationInvokerComponent* InvokerComponent; // 0x3e8
	char bActAsNavigationInvoker : 1; // 0x3f0
	FNavAgentProperties NavAgentProps; // 0x3f4
	FVector QueryingExtent; // 0x424
	ANavigationData* MyNavData; // 0x430
	FVector ProjectedLocation; // 0x438
	char bProjectedLocationValid : 1; // 0x444
	char bSearchStart : 1; // 0x444
	char bUseHierarchicalPathfinding : 1; // 0x444
	char bGatherDetailedInfo : 1; // 0x444
	char bShowNodePool : 1; // 0x444
	char bShowBestPath : 1; // 0x444
	char bShowDiffWithPreviousStep : 1; // 0x444
	char bShouldBeVisibleInGame : 1; // 0x444
	ENavCostDisplay CostDisplayMode; // 0x448
	FVector2D TextCanvasOffset; // 0x44c
	char bPathExist : 1; // 0x454
	char bPathIsPartial : 1; // 0x454
	char bPathSearchOutOfNodes : 1; // 0x454
	float PathfindingTime; // 0x458
	float PathCost; // 0x45c
	int32_t PathfindingSteps; // 0x460
	ANavigationTestingActor* OtherActor; // 0x468
	UNavigationQueryFilter* FilterClass; // 0x470
	int32_t ShowStepIndex; // 0x478
	float OffsetFromCornersDistance; // 0x47c
};

struct UParticleModuleLocationPrimitiveBase {
	char Positive_X : 1; // 0x50
	char Positive_Y : 1; // 0x50
	char Positive_Z : 1; // 0x50
	char Negative_X : 1; // 0x50
	char Negative_Y : 1; // 0x50
	char Negative_Z : 1; // 0x50
	char SurfaceOnly : 1; // 0x50
	char Velocity : 1; // 0x50
	FRawDistributionFloat VelocityScale; // 0x58
	FRawDistributionVector StartLocation; // 0x90
};

struct UStoolItemComponent {
	FText InteractionTextOutsideMaxAngle; // 0x338
	float MaxSittingAngle; // 0x370
};

struct UBTDecorator_CanRepair {
	FBlackboardKeySelector RepairActor; // 0x68
};

struct UIsWieldingBootyTypeStatCondition {
	TArray<EBootyTypes> TargetBootyTypes; // 0x30
};

struct APressurePlateMechanismProgressTriggerProxy {
	float ProgressionAmount; // 0x3f0
	TArray<FAllowedInteractableTypes> AllowedInteractableTypes; // 0x3f8
};

struct AServerMigrationSerialisationDetailsTestsActorWithNetActorPtr {
	FNetActorPtr ActorPtr; // 0x3d0
};

struct UDefaultItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UComponentAggregatorComponent {
	TArray<UObject*> Aggregatables; // 0xd0
};

struct UModelComponent {
	UBodySetup* ModelBodySetup; // 0x5a0
};

struct UInterpTrackMoveAxis {
	EInterpMoveAxis MoveAxis; // 0x90
	FInterpLookupTrack LookupTrack; // 0x98
};

struct UParticleModuleSpawn {
	FRawDistributionFloat Rate; // 0x58
	FRawDistributionFloat AdditionalRates[0x5]; // 0x90
	float StartScaleDistance; // 0x1a8
	float EndScaleDistance; // 0x1ac
	FRawDistributionFloat RateScaleOverDistance; // 0x1b0
	FRawDistributionFloat RateScale; // 0x1e8
	EParticleBurstMethod ParticleBurstMethod; // 0x220
	TArray<FParticleBurst> BurstList; // 0x228
	FRawDistributionFloat BurstScale; // 0x238
	char bApplyGlobalSpawnRateScale : 1; // 0x270
	char bBurstTreatedAsLoopingForLODs : 1; // 0x270
};

struct UIsTargetCrewMemberStatCondition {
	UStatConditionTargetSelector* TargetSelector; // 0x28
};

struct UAbilityTask_StartAbilityState {
	FScriptMulticastDelegate OnStateEnded; // 0x68
	FScriptMulticastDelegate OnStateInterrupted; // 0x78
};

struct UItemActionComponent {
	APawn* Wielder; // 0xc8
	AWieldableItem* ItemOwner; // 0xd0
	EItemActionType ActionType; // 0xd8
	bool ShouldFireEventOnActionStart; // 0xd9
	bool ShouldFireEventOnActionStop; // 0xda
	bool ShouldApplyAimAndMovementSlowdown; // 0xdb
	EItemActionState ActionState; // 0xdc
	float ActionCooldown; // 0xe0
	FWwiseEmitterCreationParams ActionStartSfxParams; // 0x130
	FWwiseEmitterCreationParams ActionStopSfxParams; // 0x158
	UNotificationInputId* StartInputId; // 0x208
	UNotificationInputId* StopInputId; // 0x210
	TArray<UItemActionEffect*> ActionEffects; // 0x230
	UItemActionComponentAudioParams* ItemActionAudio; // 0x290
	UForceFeedbackEffect* ActionForceFeedback; // 0x298
	FName ActionForceFeedbackTag; // 0x2a0
};

struct UReapersMarkTrackedItemComponent {
	EReapersMarkTrackedBootyItemType ItemType; // 0xd8
};

struct UPickupableComponent {
	float PickupTime; // 0xd0
	FText PickupActionDisplayString; // 0xd8
	FText PickupActionDisplayStringWhenFull; // 0x110
	UNotificationInputId* StartPickupInputId; // 0x148
};

struct AAIShipObstacleService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct ABountyReward {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct AFireworkProjectile {
	USphereComponent* CollisionComponent; // 0x618
	UStaticMeshComponent* MeshComponent; // 0x620
	UExplosionComponent* ExplosionComponent; // 0x628
	UFireworkStatsComponent* FireworkStatsComponent; // 0x630
	USceneComponent* MeshDirectionComponent; // 0x638
	UProjectileAnimationComponent* AnimationComponent; // 0x640
	FGeneratedFireworkData GeneratedFireworkData; // 0x648
};

struct UBTService_SetNameBlackboardValueWhileRelevant {
	FBlackboardKeySelector NameValueKey; // 0x70
	FName Value; // 0x98
};

struct ULevel {
	ULevelActorContainer* ActorCluster; // 0xc8
	UWorld* OwningWorld; // 0xd0
	UModel* Model; // 0xd8
	TArray<UModelComponent*> ModelComponents; // 0xe0
	ALevelScriptActor* LevelScriptActor; // 0xf0
	ANavigationObjectBase* NavListStart; // 0xf8
	ANavigationObjectBase* NavListEnd; // 0x100
	TArray<UNavigationDataChunk*> NavDataChunks; // 0x108
	float LightmapTotalSize; // 0x118
	float ShadowmapTotalSize; // 0x11c
	TArray<FVector> StaticNavigableGeometry; // 0x120
	bool LevelVisibility; // 0x260
	char Blocked : 1; // 0x270
	TArray<UAssetUserData*> AssetUserData; // 0x2d8
};

struct AMergedCollisionActor {
	UMergedCollisionComponent* MergedCollisionComponent; // 0x3d0
};

struct AAIDiorama {
	USceneComponent* SceneComponent; // 0x3d8
	ASceneDialogueCoordinator* SpawnedDialogueCoordinator; // 0x3e0
	USceneDialogueData* DialogueData; // 0x3e8
	TArray<FAIDioramaPawn> LinkedActors; // 0x3f0
};

struct AKillZVolume {
	float TerminalVelocity; // 0x408
	int32_t Priority; // 0x40c
	float FluidFriction; // 0x410
	char bWaterVolume : 1; // 0x414
	char bPhysicsOnContact : 1; // 0x414
};

struct UEquipConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UEdGraphPin {
	FString PinName; // 0x28
	FString PinToolTip; // 0x38
	EEdGraphPinDirection Direction; // 0x48
	FEdGraphPinType PinType; // 0x50
	FString DefaultValue; // 0xa0
	FString AutogeneratedDefaultValue; // 0xb0
	UObject* DefaultObject; // 0xc0
	FText DefaultTextValue; // 0xc8
	TArray<UEdGraphPin*> LinkedTo; // 0x100
	TArray<UEdGraphPin*> SubPins; // 0x110
	UEdGraphPin* ParentPin; // 0x120
};

struct UMeleeAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UAbilityTask_WaitConfirmCancel {
	FScriptMulticastDelegate OnConfirm; // 0x68
	FScriptMulticastDelegate OnCancel; // 0x78
};

struct UEmissaryVoyageInlineVoteConsumerBase {
	UEmissaryVoyageVoteValidatorBase* Validator; // 0x30
	FText VoyageCinematicHeader; // 0x80
	FName VoyageCinematicTag; // 0xb8
	TArray<FCrewMemberVotes> Votes; // 0xe0
	UBoxedRpcDispatcherComponent* RpcDispatcher; // 0xf0
	AActor* OwningActor; // 0x118
};

struct UOverrideProgressSpawnStepDesc {
	UProgressLocationId* ProgressId; // 0x80
};

struct UNPCDialogPredicateAIState {
	int32_t ActorIdx; // 0x38
	EAIDialogueState TargetState; // 0x3c
};

struct USceneComponent {
	USceneComponent* AttachParent; // 0xc8
	TArray<USceneComponent*> AttachChildren; // 0xd0
	FName AttachSocketName; // 0xe0
	char bRequiresCustomLocation : 1; // 0xe8
	char bAbsoluteLocation : 1; // 0xe8
	char bAbsoluteTranslation : 1; // 0xe8
	char bAbsoluteRotation : 1; // 0xe8
	char bAbsoluteScale : 1; // 0xe8
	char bVisible : 1; // 0xe8
	char bHiddenInGame : 1; // 0xe8
	char bShouldUpdatePhysicsVolume : 1; // 0xe8
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0xe9
	char bUseAttachParentBound : 1; // 0xe9
	char bComponentIsUnionOfChildren : 1; // 0xe9
	char bJitterReduction : 1; // 0xe9
	char CacheRootVelocity : 1; // 0xe9
	char bWorldToComponentUpdated : 1; // 0xe9
	TWeakObjectPtr<APhysicsVolume> PhysicsVolume; // 0xf8
	FVector RelativeScale3D; // 0x11c
	FVector RelativeLocation; // 0x128
	FRotator RelativeRotation; // 0x134
	EComponentMobility Mobility; // 0x220
	EDetailMode DetailMode; // 0x221
	FVector ComponentVelocity; // 0x22c
	FScriptMulticastDelegate PhysicsVolumeChangedDelegate; // 0x238
	TArray<FName> SocketVelocitiesToCache; // 0x258
};

struct UBodySetup2D {
	FAggregateGeometry2D AggGeom2D; // 0x2c8
};

struct UShipFirePropagationComponent {
	FName FeatureToggleName; // 0xd8
	UShipSize* ShipSize; // 0xe0
	float CellSize; // 0xe8
	FIntVector GridDimensions; // 0xec
	FVector GridOffset; // 0xf8
	UFirePropagator* Propagator; // 0x108
	UShipFireDamageParamsDataAsset* FireDamageDataAsset; // 0x110
	TArray<FFireCellDesc> FireCellDescs; // 0x118
	FStatus BurnStatus; // 0x138
	UFireGridVFXManager* VFXManager; // 0x150
	FFireGridVfxSpawnSettings VfxSpawnSettings; // 0x158
	FShipFireLightManager FireLightManager; // 0x1b0
	FFireGridCharringManager FireCharringManager; // 0x300
	TArray<FReplicatedFireCellData> ReplicatedCellData; // 0x3c8
	FReplicatedFireCellCharringData ReplicatedCellCharringData; // 0x3d8
	UFireGridAudioManager* FireAudioManager; // 0x3f0
	FFireCellAudioParams FireAudioParams; // 0x3f8
};

struct UPawnNoiseEmitterComponent {
	char bAIPerceptionSystemCompatibilityMode : 1; // 0xc8
	FVector LastRemoteNoisePosition; // 0xcc
	float NoiseLifetime; // 0xd8
	float LastRemoteNoiseVolume; // 0xdc
	float LastRemoteNoiseTime; // 0xe0
	float LastLocalNoiseVolume; // 0xe4
	float LastLocalNoiseTime; // 0xe8
};

struct UPerformancePetSpawnDefinitionsDataAsset {
	TArray<FPetSpawnDefinition> PetSpawnDefinitions; // 0x28
	UEnvQuery* SpawnQuery; // 0x38
	UEnvQuery* ShipSpawnQuery; // 0x40
	int32_t PetCount; // 0x48
	bool SpawnPetsOnStart; // 0x4c
};

struct ASeaFort {
	FScriptMulticastDelegate OnEnabledChanged; // 0x510
	float ServerMigrationExclusionRadius; // 0x520
	bool Enabled; // 0x524
};

struct UFlammableComponent {
	bool OnFire; // 0xd8
};

struct UAISense_Hearing {
	int32_t MaxNoisesPerTick; // 0x88
	int32_t MaxNoisesStored; // 0x8c
	TArray<FAINoiseEvent> NoiseEventsArrayA; // 0x98
	TArray<FAINoiseEvent> NoiseEventsArrayB; // 0xa8
	float SpeedOfSoundSq; // 0xc8
};

struct UMeshMemoryConstraintFallbackCollection {
	int32_t MaxScoringPerFrame; // 0x28
	TArray<UMeshMemoryConstraintFallbackDataAsset*> FallbackDataAssets; // 0x30
};

struct UDecalComponent {
	UMaterialInterface* DecalMaterial; // 0x2b0
	int32_t SortOrder; // 0x2b8
	float FadeScreenSize; // 0x2bc
	UMaterialInstanceDynamic* MaterialInstanceDynamic; // 0x2c0
};

struct UAudioSpaceDataAsset {
	FName RtpcToUpdate; // 0x28
	UWwiseEvent* AmbienceToStart; // 0x30
	UWwiseEvent* AmbienceToStop; // 0x38
};

struct UParticleModuleVectorFieldRotationRate {
	FVector RotationRate; // 0x50
};

struct USceneCaptureComponentCube {
	UTextureRenderTargetCube* TextureTarget; // 0x318
};

struct UTextureLODSettings {
	TArray<FTextureLODGroup> TextureLODGroups; // 0x28
};

struct UAbandonedNoteClueTextIndexAsset {
	TArray<UAbandonedNoteClueTextAsset*> ClueDestinationDescriptions; // 0x28
};

struct AStrongholdKeyItemInfo {
	bool CanBeStoredInInventory; // 0x3f0
	FScriptMulticastDelegate OnItemPickedUpDelegate; // 0x3f8
	FScriptMulticastDelegate OnItemDroppedDeletage; // 0x408
	AWieldableItem* WieldableType; // 0x418
	AActor* ProxyType; // 0x420
	UWieldableItemPersistentCooldownComponent* WieldableItemPersistenceCooldownComponent; // 0x428
	UItemDesc* Desc; // 0x430
	EItemRepresentation CurrentRepresentation; // 0x438
	AActor* CurrentRepresentationInstance; // 0x440
	AActor* CurrentOwner; // 0x448
	AActor* TutorialOwner; // 0x450
	bool DoNotConsiderForMigrationGather; // 0x4f9
};

struct UTaleQuestGetCollectionItemCountStepDesc {
	FQuestVariableCollection Collection; // 0x80
	FQuestVariableInt Num; // 0x90
};

struct UFogBankManagerDataAsset {
	TArray<FFogBankManagerFogBankTemplate> FogBankTemplates; // 0x28
	FWeightedProbabilityRangeOfRanges TimeBetweenFogBanks; // 0x38
	float CheckForNearbyStormsInterval; // 0x68
	float FailureRetryTime; // 0x6c
	float MinIslandDistanceFromStormToSpawnInKm; // 0x70
	float DistanceFromStormToEmergencyFadeOutInKm; // 0x74
	TArray<EIslandType> InvalidIslandTypes; // 0x78
	TArray<FName> InvalidIslandNames; // 0x88
	TArray<FFogBankManagerIslandTypesToKeepAwayFrom> IslandTypesToKeepAwayFrom; // 0x98
	TArray<FFogBankManagerIslandNamesToKeepAwayFrom> IslandNamesToKeepAwayFrom; // 0xa8
	TArray<EIslandType> IslandTypesThatCannotSupportStormsAndFog; // 0xb8
};

struct ATestSkeletalWieldableInventoryItem {
	UInventoryItemComponent* InventoryItem; // 0x790
};

struct UTaleQuestAddBountyMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTextureSwitchByEthnicity {
	TArray<FTextureSwitchEthnicityEntry> Entries; // 0x220
};

struct UFuseComponent {
	UNotificationInputId* EnableInputNotification; // 0xd8
	UNotificationInputId* DisableInputNotification; // 0xe0
	float DefaultFuseTime; // 0xe8
	UWwiseObjectPoolWrapper* FuseSoundWisePool; // 0xf0
	UWwiseEvent* FuseActivateSoundPlayEvent; // 0xf8
	UWwiseEvent* FuseSoundPlayEvent; // 0x100
	UWwiseEvent* FuseSoundStopEvent; // 0x108
	UObject* FuseParticleSystem; // 0x110
	FName FuseParticleSystemSocketName; // 0x118
	FName FuseNoiseEventName; // 0x120
	float FuseNoiseRadius; // 0x128
	float FuseNoiseEventRate; // 0x12c
	AActor* FuseInstigator; // 0x130
	bool FuseEnabled; // 0x138
	UParticleSystemComponent* FuseParticleSystemComponent; // 0x1b0
};

struct UAthenaAnimationInstance {
	EControllableObjectType ControllableObjectType; // 0x698
	TArray<FAthenaAnimationLoadObjectsWrapper> AllLoadedItemData; // 0x6a0
	FAthenaAnimationHandHeldItemParams HandHeldItemParams; // 0x6b0
	FAthenaAnimationIdleVariantChange IdleVariantParams; // 0x6d0
	FAthenaAnimationWheel WheelAnimationParams; // 0x6e0
	FAthenaAnimationCapstan CapstanAnimationParams; // 0x8b0
	FAthenaAnimationFacialAnimData FacialParams; // 0xa08
	FAthenaAnimationFire Fire; // 0xa98
	EMeleeSpecialState MeleeSpecialState; // 0xab8
	float DodgeDirection; // 0xabc
	FAthenaAnimationRowboatParams RowboatParams; // 0xac0
	FAthenaAnimationRowing Rowing; // 0xb88
	FAthenaAnimationWaterPumpAnimData WaterPumpAnimations; // 0xc48
	FAthenaAnimationWaterPumpParams WaterPumpAnimationParams; // 0xc70
	FAthenaAnimationFishingParams FishingParams; // 0xc7c
	FAthenaAnimationFishing Fishing; // 0xcb0
	FAthenaAnimationWaterSlideControlAnimData WaterSlideControlAnimData; // 0xff0
	AAthenaCharacter* AthenaCharacter; // 0x1010
	FAthenaAnimationJumping JumpingAnimationParams; // 0x1018
	float SpineBlendAlpha; // 0x10e8
	float DockingTransitionAlpha; // 0x10ec
	FAthenaAnimationWaterPump AthenaAnimationWaterPump; // 0x10f0
	FAthenaAnimationLODSettings AnimationLODSettings; // 0x1120
	FAthenaAnimationLocomotion Locomotion; // 0x1128
	FAthenaAnimationWieldedItemStateMachine WieldedItemStateMachine; // 0x1190
	FAthenaAnimationLoadObjectByID ItemLoading; // 0x16a0
	UWieldableItemAnimationStoreId* CurrentWieldedItemALK; // 0x2060
	FAthenaAnimationObjectLocomotionAnimations ItemLocomotionAnims; // 0x2068
	FAthenaAnimationObjectJumpingAnimations ItemJumpingAnims; // 0x20a8
	FAthenaAnimationObjectEquipAnimations ItemEquippingAnims; // 0x20c8
	FAthenaAnimationFishingAnimations ItemFishingAnims; // 0x2108
	FAthenaAnimationObjectIdleAnimations ItemIdleAnims; // 0x2198
	FAthenaAnimationObjectActionContinuousStruct ItemPrimaryContinousUseAnims; // 0x21b0
	FAthenaAnimationObjectActionContinuousStruct ItemSecondaryContinousUseAnims; // 0x2258
	FAthenaAnimationObjectActionContinuousStruct ItemPrimaryContinousUseAlternateAnims; // 0x2300
	FAthenaAnimationObjectActionContinuousStruct ItemSecondaryContinousUseAlternateAnims; // 0x23a8
	FAthenaAnimationObjectActionContinuousSwimming ItemPrimaryContinousUseSwimmingAnims; // 0x2450
	FAthenaAnimationObjectActionContinuousSwimming ItemSecondaryContinousUseSwimmingAnims; // 0x2470
	FAthenaAnimationObjectActionContinuousSwimming ItemPrimaryContinousUseSwimmingAlternateAnims; // 0x2490
	FAthenaAnimationObjectActionContinuousSwimming ItemSecondaryContinousUseSwimmingAlternateAnims; // 0x24b0
	FAthenaAnimationObjectJumpingAnimations ItemPrimaryContinousUseJumpingAnims; // 0x24d0
	FAthenaAnimationObjectJumpingAnimations ItemSecondaryContinousUseJumpingAnims; // 0x24f0
	FAthenaAnimationObjectJumpingAnimations ItemPrimaryContinousUseJumpingAlternateAnims; // 0x2510
	FAthenaAnimationObjectJumpingAnimations ItemSecondaryContinousUseJumpingAlternateAnims; // 0x2530
	FAthenaAnimationActiveOneShotAnimationStruct ActiveOneShotAnimations; // 0x2550
	FAthenaAnimationActiveOneShotAnimationStruct DuplicateActiveOneShotAnimations; // 0x2570
	FAthenaAnimationObjectActionOneShotPlayingStruct ItemPrimaryOneShotAnims; // 0x2590
	FAthenaAnimationObjectActionOneShotPlayingStruct ItemSecondaryOneShotAnims; // 0x25b8
	FAthenaAnimationObjectActionOneShotPlayingStruct ItemPrimaryOneShotAlternateAnims; // 0x25e0
	FAthenaAnimationObjectActionOneShotPlayingStruct ItemSecondaryOneShotAlternateAnims; // 0x2608
	FAthenaAnimationActiveItemComplexAnimData CurrentComplexOneShotData; // 0x2630
	FAthenaAnimationObjectComplexOneShotPlaySpeeds CurrentMeleeAttackSequencePlaySpeeds; // 0x2668
	FAthenaAnimationObjectMeleeBlocking ItemCombatBlockingAnims; // 0x2680
	UWieldableItemAnimationStoreId* FishingRodAnimStoreID; // 0x26e0
	UWieldableItemAnimationStoreId* QuestBookAnimStoreID; // 0x26e8
	UWieldableItemAnimationStoreId* WoodenPlankAnimStoreID; // 0x26f0
	float UnequipPlayRate; // 0x26f8
	EAthenaAnimationSocketGroup ControllableSocketGroup; // 0x26fc
	EAthenaAnimationSocketGroupCharacterSize ControllableSocketGroupCharacterSize; // 0x26fd
	ELocomotionType LocomotionState; // 0x26fe
	FAthenaAnimationDebugTrackingParams DebugTrackingParams; // 0x26ff
	FAthenaAnimationDeath Death; // 0x2708
	FAthenaAnimationUndoRepair UndoRepair; // 0x2800
	FAthenaAnimationSitting Sitting; // 0x2870
	EWieldAnimationLocation PropWieldLocation; // 0x28e0
	FVector PropOffsetLocation; // 0x28e4
	FRotator PropOffsetRotation; // 0x28f0
	FVector PropOffsetScale; // 0x28fc
	char FaunaAddedToCrate : 1; // 0x2908
	char InDockingTransition : 1; // 0x2908
	char WieldedItemIsMeleeWeapon : 1; // 0x2908
	char InMeleeCombat : 1; // 0x2908
	char IsBlockingLeft : 1; // 0x2908
	char IsFishingWithWieldedRod : 1; // 0x2908
	char UsePropOffset : 1; // 0x2908
	char IsOnLadder : 1; // 0x2908
	char IsUsingAdditiveHandOverlayPose : 1; // 0x2909
	char IgnoreIdleBlendTransition : 1; // 0x2909
	char UseDuplicateOneShotState : 1; // 0x2909
};

struct AArmoryChestInteraction {
	TArray<UWeaponItemCategory*> Categories; // 0x438
	bool AllTab; // 0x448
};

struct UBlockVolcanoTaleQuestServiceDesc {
	FQuestVariableActor ActorNearIsland; // 0x28
};

struct UFeatureToggleStatCondition {
	FName FeatureToggle; // 0x28
};

struct UTaleQuestBlueprintStepDesc {
	TMap<FName, FName> ParameterMappings; // 0x80
	TMap<FName, FName> EndParameterMappings; // 0xd0
	UBlueprintStepBase* StepType; // 0x120
	UBlueprintStepBase* StepInstance; // 0x128
};

struct UVectorField {
	FBox Bounds; // 0x28
	float Intensity; // 0x44
};

struct UParticleModuleLocationPrimitiveSphere_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x218
};

struct UBTTask_SetDebugPetStateDescriptor {
	EDebugPetStateDescriptor NewDescriptor; // 0x60
};

struct UVotableBaseComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UPottableComponent {
	bool CanBePutInPot; // 0xd0
};

struct USpawnShipwreckTaleStep {
	USpawnShipwreckTaleStepDesc* StepDesc; // 0x90
};

struct UTaleQuestUpdateMerchantMapStep {
	UTaleQuestUpdateMerchantMapStepDesc* Desc; // 0x90
};

struct UAchievementReward {
	uint32_t AchievementId; // 0x28
};

struct UCutsceneResponseSheet {
	FScriptMulticastDelegate OnRelevantActorAdded; // 0x28
	TArray<UClass*> RelevantActorClasses; // 0x38
	TScriptInterface<Class> CutsceneResponsePlayer; // 0x48
	UObject* CutsceneInstigator; // 0x58
	bool IsActive; // 0x60
};

struct ABountyMap {
	int32_t CanvasWidth; // 0x7d8
	int32_t CanvasHeight; // 0x7dc
	UFont* Font; // 0x7e0
	float FontScale; // 0x7e8
	float FontLineSpacingScale; // 0x7ec
	UBountyMapLayout* BountyMapLayout; // 0x7f8
	FBountyMapContents Contents; // 0x800
	FStringAssetReference MapInventoryTexturePath; // 0x868
	float Rotation; // 0x878
};

struct UBTTask_SetBlackboardBoolValue {
	bool NewValue; // 0x88
};

struct UDialogueSoundWaveProxy {
	USoundClass* SoundClassObject; // 0x28
	char bDebug : 1; // 0x30
	EMaxConcurrentResolutionRule MaxConcurrentResolutionRule; // 0x34
	int32_t MaxConcurrentPlayCount; // 0x38
	float Duration; // 0x3c
	USoundAttenuation* AttenuationSettings; // 0x40
};

struct ULightningManagerDataAsset {
	float LightningTargetHeightThreshold; // 0x28
	float ShipNearMissMaxX; // 0x2c
	float ShipNearMissMaxY; // 0x30
	float NearPlayerMinRadius; // 0x34
	float NearPlayerMaxRadius; // 0x38
	float InactiveTimePerTest; // 0x3c
	float NearbyGhostShipEncounterRadiusInMetres; // 0x40
	TArray<FLightningStrikeFrequency> LightningStrikeFrequency; // 0x48
	FLightningTargetSelector TargetSelector; // 0x58
};

struct UMetalAIFormDataAsset {
	float WetCooldown; // 0x90
	float WetMovementSpeedMultiplier; // 0x94
	float RelativeWaterLevelToGetWet; // 0x98
	float RainStrengthToGetWet; // 0x9c
	TArray<FMetalAIFormRustyDamageResponse> RustyDamageResponses; // 0xa0
};

struct UEnvQueryTest {
	int32_t TestOrder; // 0x30
	EEnvTestPurpose TestPurpose; // 0x34
	EEnvTestFilterOperator MultipleContextFilterOp; // 0x35
	EEnvTestScoreOperator MultipleContextScoreOp; // 0x36
	EEnvTestFilterType FilterType; // 0x37
	FAIDataProviderBoolValue BoolValue; // 0x38
	FAIDataProviderFloatValue FloatValueMin; // 0x68
	FAIDataProviderFloatValue FloatValueMax; // 0x98
	EEnvTestScoreEquation ScoringEquation; // 0xc9
	EEnvQueryTestClamping ClampMinType; // 0xca
	EEnvQueryTestClamping ClampMaxType; // 0xcb
	FAIDataProviderFloatValue ScoreClampMin; // 0xd0
	FAIDataProviderFloatValue ScoreClampMax; // 0x100
	FAIDataProviderFloatValue ScoringFactor; // 0x130
	char bWorkOnFloatValues : 1; // 0x168
};

struct UTaleMakeSpireVisibleStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UAthenaGameContext {
	UVoiceChatRenderer* VoiceChatRenderer; // 0x98
	UAthenaPlayModeLevelsDataAsset* PlayModeLevels; // 0xa0
	UFeatureToggledLevelsDataAsset* FeatureToggledLevels; // 0xa8
	UGameInstance* PrimaryGameInstance; // 0x220
	UAthenaServerIdentityManager* AthenaServerIdentityManager; // 0x228
	FGameServiceCoordinator ServiceCoordinator; // 0x230
	UAthenaLocalPlayerManager* AthenaLocalPlayerManager; // 0x460
	UAthenaLocalPlayerReengage* AthenaLocalPlayerReengage; // 0x468
	UGameNarrationCoordinator* GameNarrationCoordinator; // 0x470
	UApplicationSettings* ApplicationSettings; // 0x478
};

struct UShantySettings {
	float MaxJoinInDistance; // 0x38
	int32_t MaxAudibleShantyInstruments; // 0x3c
	int32_t MaxCachedShantyEvents; // 0x40
	float InstrumentStopFadeOutDuration; // 0x44
};

struct UMaterialExpressionConstant {
	float R; // 0x70
};

struct UIsPirateLegendNPCDialogConditional {
	bool ConditionalExpected; // 0x28
};

struct USicknessComponent {
	FWeightedProbabilityRangeOfRanges IncubationPeriodDuration; // 0xd0
	FWeightedProbabilityRangeOfRanges LatentPeriodDuration; // 0x100
	FWeightedProbabilityRangeOfRanges VomitingPeriodDuration; // 0x130
	FWeightedProbabilityRangeOfRanges VomitBoutDuration; // 0x160
	FWeightedProbabilityRangeOfRanges DelayBetweenVomitBouts; // 0x190
	float ScreenEffectStrengthWhenSicknessActive; // 0x1c0
	float ScreenEffectStrengthWhileVomiting; // 0x1c4
	float MaterialEffectStrengthWhenSicknessActive; // 0x1c8
	float TargetScreenEffectStrength; // 0x1cc
	float TargetMaterialEffectStrength; // 0x1d0
	float ScreenEffectSpringAcceleration; // 0x1d4
	float MaterialEffectSpringAcceleration; // 0x1d8
	bool CanGetSick; // 0x1dc
};

struct UTaleQuestAdvanceRiddleMapStepDesc {
	FName MapId; // 0x80
};

struct UAnimationEditorSettings {
	FStringAssetReference CustomAnimationMontageIdListings; // 0x38
};

struct UMaterialExpressionPanner {
	FExpressionInput Coordinate; // 0x70
	FExpressionInput Time; // 0xa8
	float SpeedX; // 0xe0
	float SpeedY; // 0xe4
	uint32_t ConstCoordinate; // 0xe8
	bool bFractionalPart; // 0xec
};

struct UVertexAnimation {
	int32_t NumAnimatedVerts; // 0x30
};

struct UInterpTrackInstToggle {
	ETrackToggleAction Action; // 0x28
	float LastUpdatePosition; // 0x2c
	char bSavedActiveState : 1; // 0x30
};

struct UTaleQuestAssignVaultStep {
	UTaleQuestAssignVaultStepDesc* StepDesc; // 0x90
	bool VaultAssigned; // 0x98
};

struct UClothingChestViewModelComponent {
	TArray<FClothingChestRandomFilter> RandomFilters; // 0x170
	FStringAssetReference RandomiseIcon; // 0x180
	FStringAssetReference ClearIcon; // 0x190
	bool WithRandomiseButtons; // 0x1a0
	bool WithClearButtons; // 0x1a1
	TArray<UClothingCategory*> CategoriesWithClearButtonDisabled; // 0x1a8
	TArray<UClothingCategory*> CategoriesWithRandomiseButtonDisabled; // 0x1b8
	TArray<UClothingCategory*> Categories; // 0x1d8
	bool IncludeAllCategory; // 0x1e8
};

struct UTeleportAIAbilityParams {
	UEnvQuery* QueryTemplate; // 0xc8
	float MinDistance; // 0xd0
	float MaxDistance; // 0xd4
	bool MaintainRotation; // 0xd8
	bool UseResurfaceDelay; // 0xd9
	FAthenaAIAbilityPlayerBasedRanges ResurfaceDelay; // 0xe0
};

struct UIndividualReplicationChannelComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UCookItemConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct URowboatSpawnParamsDataAsset {
	TArray<ARowboat*> RowboatTypes; // 0x28
};

struct UBTTask_SelectPetHangoutSpot {
	bool NeedForceId; // 0x88
	FHangoutSpotId ForcedId; // 0x8c
};

struct UBTTask_SwimAttackTargetActor {
	float DamageToApply; // 0x88
	float MaxAngleToTargetToSuccessfullyAttack; // 0x8c
	TArray<FAttackableTypeToAnimMapping> AttackAnimMapping; // 0x90
	FName LoSTraceProfileName; // 0xa0
	FAIDataProviderFloatValue LosTraceRadius; // 0xa8
	float MaxDistanceToTargetToApplyDamage; // 0xd8
};

struct UUncachedResourceProviderComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UKrakenShipWrappingTentacleAIAudioComponentParams {
	UWwiseEvent* PlayWrapping; // 0x28
	UWwiseEvent* StopWrapping; // 0x30
	UWwiseEvent* PlayWrappedLoop; // 0x38
	UWwiseEvent* StopWrappedLoop; // 0x40
	UWwiseEvent* PlayUnwrapping; // 0x48
	UWwiseEvent* StopUnwrapping; // 0x50
};

struct UParticleModuleLocationVelocityComputeShaderOutput {
	UParticleComputeShaderData* PositionData; // 0xc8
	FRawDistributionVector ComputedVelocityScale; // 0xd0
	float SpeedCap; // 0x108
	FRawDistributionVector BaseVelocity; // 0x110
	FRawDistributionVector LocationOffset; // 0x148
	FRawDistributionVector LocationOffsetScaledDirection; // 0x180
};

struct UTaleQuestAddTradeRouteMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UShadowAIFormComponent {
	EFlameOfFateType FlameSpecificPhobia; // 0x138
	UParticleSystem* LightStateConstantParticlesTemplate; // 0x140
	UParticleSystem* DarkStateConstantParticlesTemplate; // 0x148
	UParticleSystem* ToLightTransitionParticlesTemplate; // 0x150
	UParticleSystem* ToDarkTransitionParticlesTemplate; // 0x158
	UPhysicalMaterial* ClientLightStatePhysMaterialOverride; // 0x160
	UPhysicalMaterial* ClientDarkStatePhysMaterialOverride; // 0x168
	UWwiseEvent* StartDarkStateAudioLoopEvent; // 0x170
	UWwiseEvent* StopDarkStateAudioLoopEvent; // 0x178
	TArray<UMaterial*> ShadowBaseMaterials; // 0x180
	FName ShadowShaderParamName; // 0x190
	float LightStateShaderParamValue; // 0x198
	float DarkStateShaderParamValue; // 0x19c
	float ShaderParamBlendSpeed; // 0x1a0
	FName SeedShaderParamName; // 0x1a4
	int32_t MaxSeedShaderValue; // 0x1ac
	EShadowAIFormState CurrentState; // 0x1b0
	UParticleSystemComponent* LightStateConstantParticleSystemComponent; // 0x1b8
	UParticleSystemComponent* DarkStateConstantParticleSystemComponent; // 0x1c0
	TArray<UMaterialInstanceDynamic*> ShadowDynamicMaterialInstances; // 0x1c8
	TArray<ALantern*> LanternArray; // 0x230
	TArray<FFlameSpecificDataEntry> FlameSpecificDataMap; // 0x240
};

struct UParticleModuleEventReceiverBase {
	EParticleEventType EventGeneratorType; // 0x50
	FName EventName; // 0x54
};

struct ABarrelsOfPlentySpawnProxy {
	AShip* Ship; // 0x3d0
	USceneComponent* SceneComponent; // 0x3f0
};

struct UStatProgressStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ABell {
	UReplicatedShipPartCustomizationComponent* CustomisationComponent; // 0x460
	FBellPlayerStats PlayerStats; // 0x468
	UInteractableComponent* InteractableComponent; // 0x478
	UStaticMeshComponent* BellMeshComponent; // 0x480
	UWwiseEvent* BellRingSFX; // 0x488
	UWwiseEvent* BellRingSfxStorm; // 0x490
	FText BellName; // 0x498
	float TimeBetweenTurbulenceChecks; // 0x4d0
	float MinIntervalBetweenRingsLowerBound; // 0x4d4
	float MinIntervalBetweenRingsUpperBound; // 0x4d8
	float MaxIntervalBetweenRingsLowerBound; // 0x4dc
	float MaxIntervalBetweenRingsUpperBound; // 0x4e0
	UWwiseObjectPoolWrapper* BellPool; // 0x4e8
	FVector EmitterOffset; // 0x4f0
	UMaterialInstanceDynamic* BellDynamicMaterial; // 0x500
	int32_t BellMaterialIndex; // 0x508
};

struct AMerchantCrateItemProxy {
	URewindComponent* RewindComponent; // 0x7b8
	TScriptInterface<Class> MountpointInterface; // 0x7c0
	UWwiseEvent* FullGroundImpactSfx; // 0x7d0
};

struct UAmmoChangeEffect {
	FAmmoChangeEffectParams AmmoChangeEffectParams; // 0x28
};

struct ACapstanRelease {
	UStaticMeshComponent* MeshComponent; // 0x460
	FName TooltipSocket; // 0x468
	float ReleaseTime; // 0x470
};

struct ASirenController {
	USwimmingPathFollowingComponent* SwimmingPathFollowingComponent; // 0x8f8
	bool IgnoreTargetsOutOfWater; // 0x900
	UCurveFloat* DistOfAttackerVsChanceToPursue; // 0x908
	TArray<FName> TimersToZeroIfStartingRevengeAttack; // 0x910
	FName DespawnRequiredBlackboardKey; // 0x920
	FName DespawnRequiredReasonBlackboardKey; // 0x928
	float PathingFailedWeight; // 0x930
	float PathingFailedThresholdToDespawn; // 0x934
};

struct UQuickInventoryComponent {
	UItemCategory* CannonballItemCategory; // 0xe0
	UItemCategory* CursedCannonballItemCategory; // 0xe8
	UItemCategory* FoodItemCategory; // 0xf0
	UItemCategory* RepairablesItemCategory; // 0xf8
	UItemCategory* BaitItemCategory; // 0x100
	UItemCategory* FireBombCategory; // 0x108
	UItemCategory* ChainShotCategory; // 0x110
	UItemCategory* FireworkCategory; // 0x118
};

struct UAthenaAnimationThirdPersonAnimationData {
	UAthenaAnimationPulleyDataAsset* PulleyAnimationsDataAsset; // 0x68
	UAthenaAnimationEmoteListingAsset* EmoteListingAsset; // 0x70
	UAthenaAnimationKeyedInstrumentDataAsset* KeyedInstrumentDataAsset; // 0x78
};

struct AInteractableObject {
	UOneShotInteractableFilterDesc* FilterDesc; // 0x410
	FText Verb; // 0x418
};

struct UDeferralReasonPopUpNotificationDataAsset {
	FName FeatureToggle; // 0x28
	TArray<FDeferralReasonPopUpNotificationInfo> DeferralReasonPopUpNotifications; // 0x30
};

struct ALight {
	ULightComponent* LightComponent; // 0x3d0
	char bEnabled : 1; // 0x3d8
};

struct UAutomationTestUserSettings {
	bool FilterTests; // 0x28
	TArray<FString> IncludedTestsPrefix; // 0x30
	TArray<FString> ExcludedTestsPrefix; // 0x40
	bool IncludeEpicTests; // 0x50
};

struct UDiggingAnimationDataAsset {
	TArray<FItemDiggingAnimationOverride> AnimationOverrides; // 0x28
	UItemDiggingAnimationConfig* Default; // 0x38
};

struct UWetnessComponent {
	FVector MaxWaterLevel; // 0xc8
	FVector MinWaterLevel; // 0xd4
	float DryingTime; // 0xe0
	float LastWaterLevel; // 0xe4
	float LastWetTime; // 0xe8
	float WaterLevel; // 0xec
	FVector Rep_WetData; // 0xf0
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x100
};

struct UFireworkFeedbackDataAsset {
	float MaxExplosionRadius; // 0x28
	UCameraShake* CameraShake; // 0x30
	float CameraShakeInnerRadiusMultiplier; // 0x38
	UForceFeedbackEffect* ExplosionRumble; // 0x40
};

struct AFishingRod {
	UItemCategory* AuxiliaryRadialCategoryFilter; // 0x7b0
	TArray<UItemDesc*> AuxiliaryRadialAllowedItems; // 0x7b8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7c8
	UInventoryItemComponent* InventoryItem; // 0x7d0
	FFishingFishSelector FishSelector; // 0x7d8
	UFishingRodSetupDataAsset* FishingRodSetupDataAsset; // 0x8b0
	UFishingSetupDataAsset* FishingSetupDataAssetInToSea; // 0x8b8
	UFishingSetupDataAsset* FishingSetupDataAssetInToPond; // 0x8c0
	UFishingMiniGameSetupDataAsset* FishingMiniGameSetupDataAssetInToSea; // 0x8c8
	UFishingMiniGameSetupDataAsset* FishingMiniGameSetupDataAssetInToPond; // 0x8d0
	UFishingFreeLookConstrainsDataAsset* FishingFreeLookConstrainsDataAsset; // 0x8d8
	UMaterialManipulationComponent* MaterialManipulationComponent; // 0x8e0
	UFishingLineRenderComponent* Rope; // 0x8e8
	FVector InteractionPointOffset; // 0x8f0
	UConditionalStatsTriggerType* StatTriggerForCatchingAFish; // 0x900
	EFishingRodServerState ServerState; // 0x908
	bool IsReeling; // 0x909
	FFishingRodReplicatedFishState ReplicatedFishState; // 0x910
	AActor* FishInteractionProxy; // 0x920
	FFishingMiniGamePlayerInput FishingMiniGamePlayerInput; // 0x928
	bool PlayerIsBattlingFish; // 0x92b
	AItemProxy* BaitOnFloat; // 0x930
	FVector FishingFloatRelativeCentreLocation; // 0x938
	FVector FishingFloatOffset; // 0x944
	bool CastIsInToAPond; // 0x950
	AFishingFish* CaughtFishClass; // 0x958
	EBaitType BaitOnRodType; // 0x960
	EFishingRodBattlingState BattlingState; // 0x961
	AItemProxy* ComedyItemOnFloat; // 0x968
	UItemDesc* CaughtComedyItemDesc; // 0x970
	float TimeReelingWhenBattlingBeforeSnapping; // 0x978
	float FishingMiniGamePercentageInToEscaping; // 0x97c
	float MinimumDistanceFromPlayer; // 0x980
	AActor* FishingFloatActor; // 0x988
	AItemProxy* LocalOnlyBaitOnFloat; // 0x990
	FFishingMiniGame FishingMiniGame; // 0x998
	AFishingFish* NonReplicatedLocalFishingFishOnRod; // 0x9e8
	AItemProxy* LocalOnlyComedyItemOnFloat; // 0x9f0
	bool IsInFishingActionState; // 0x9f8
};

struct UNavArea_LowHeight {
	float DefaultCost; // 0x28
	float FixedAreaEnteringCost; // 0x2c
	FColor DrawColor; // 0x30
	FNavAgentSelector SupportedAgents; // 0x34
	char bSupportsAgent0 : 1; // 0x38
	char bSupportsAgent1 : 1; // 0x38
	char bSupportsAgent2 : 1; // 0x38
	char bSupportsAgent3 : 1; // 0x38
	char bSupportsAgent4 : 1; // 0x38
	char bSupportsAgent5 : 1; // 0x38
	char bSupportsAgent6 : 1; // 0x38
	char bSupportsAgent7 : 1; // 0x38
	char bSupportsAgent8 : 1; // 0x39
	char bSupportsAgent9 : 1; // 0x39
	char bSupportsAgent10 : 1; // 0x39
	char bSupportsAgent11 : 1; // 0x39
	char bSupportsAgent12 : 1; // 0x39
	char bSupportsAgent13 : 1; // 0x39
	char bSupportsAgent14 : 1; // 0x39
	char bSupportsAgent15 : 1; // 0x39
};

struct USporeBreathAIAbility {
	AStatusEffectOverlapZone* BreathActor; // 0x78
	UVFXSpawnerComponent* BreathVFX; // 0x80
};

struct UCompanyOnboardingStarter {
	AAthenaPlayerController* AthenaPlayerController; // 0x28
	bool ShouldPlayIntroAnimatic; // 0x30
	bool ShouldDisableAllIntroBehaviour; // 0x31
	FFirstPersonAnimaticSettings IntroAnimationSettings; // 0x34
};

struct URotateMeshToActorComponent {
	UMeshComponent* MeshToRotate; // 0xc8
	AActor* ActorToRotateTo; // 0xd0
	float CloseProximityRadius; // 0xd8
	bool Use2DDistanceForCloseProximityRadius; // 0xdc
	bool WhenInCloseProximityKeepLastYaw; // 0xdd
	float RotationSpeed; // 0xe0
	bool PreventPitchModification; // 0xe4
	float MaxPitch; // 0xe8
	float CloseProximityYawRotation; // 0xec
};

struct UTaleQuestClearTaleProposalsStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UParticleSystemAggregateTickSettings {
	int32_t FramesTickScaledOver; // 0x28
	int32_t MaxTicksPerFrame; // 0x2c
	float PriorityInflationPower; // 0x30
};

struct UCoherentUIGTRootDataAsset {
	TArray<UCoherentUIGTAssetContainer*> SharedContainers; // 0x28
	TArray<UCoherentUIGTAssetContainer*> HUDContainers; // 0x38
	TArray<UCoherentUIGTAssetContainer*> MenuContainers; // 0x48
	TArray<UCoherentUIGTAssetContainer*> ShopContainers; // 0x58
	TArray<UCoherentUIGTAssetContainer*> CompanyContainers; // 0x68
	TArray<UCoherentUIGTAssetContainer*> FrontendContainers; // 0x78
	TArray<UCoherentUIGTAssetContainer*> InGameContainers; // 0x88
};

struct UEdGraphNode_Documentation {
	FString Link; // 0x90
	FString Excerpt; // 0xa0
};

struct UInvalidItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct AMultiTargetEnchantedCompass {
	TArray<FVector> Locations; // 0x870
	TArray<FGuid> LocationIds; // 0x880
	UInventoryItemComponent* InventoryItem; // 0x890
	UEnchantedCompassProximityAnnouncementComponent* ProximityAnnouncementComponent; // 0x898
};

struct UContestOutOfBoundsComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct URotateMeshToLocalPlayerComponent {
	UMeshComponent* MeshToRotate; // 0xc8
	AActor* ActorToRotateTo; // 0xd0
	float CloseProximityRadius; // 0xd8
	bool Use2DDistanceForCloseProximityRadius; // 0xdc
	bool WhenInCloseProximityKeepLastYaw; // 0xdd
	float RotationSpeed; // 0xe0
	bool PreventPitchModification; // 0xe4
	float MaxPitch; // 0xe8
	float CloseProximityYawRotation; // 0xec
};

struct UGrantPagesStepFromBundleDesc {
	FQuestVariablePageBundle Bundle; // 0x80
};

struct UEnvQueryGenerator_WaterMultiDeckerRing {
	FAIDataProviderFloatValue Radius; // 0x90
	TArray<FAIDataProviderFloatValue> ZOffsetOfRingsFromContext; // 0xc0
	FAIDataProviderIntValue PointsPerRing; // 0xd0
	UEnvQueryContext* Center; // 0x100
};

struct UStringArrayDataAsset {
	TArray<FString> Array; // 0x28
};

struct UShantyRadialContentRule {
	TArray<UShantyItemDesc*> CachedShanties; // 0xa0
	FText ShuffleTitle; // 0xb0
	FStringAssetReference ShuffleIcon; // 0xe8
	FStringAssetReference ShuffleBackground; // 0xf8
	UShantyItemDescToSlotRemappingDataAsset* RemappingDataAsset; // 0x108
};

struct UStaticMesh {
	int32_t MinLOD; // 0x40
	TArray<UMaterialInterface*> Materials; // 0x48
	int32_t LightMapResolution; // 0x58
	int32_t LightMapCoordinateIndex; // 0x5c
	UBodySetup* BodySetup; // 0x60
	int32_t LODForCollision; // 0x68
	char bUseMaximumStreamingTexelRatio : 1; // 0x6c
	char bStripComplexCollisionForConsole : 1; // 0x6c
	char bHasNavigationData : 1; // 0x6c
	float StreamingDistanceMultiplier; // 0x70
	float LpvBiasMultiplier; // 0x74
	TArray<UStaticMeshSocket*> Sockets; // 0xa8
	FVector PositiveBoundsExtension; // 0xd0
	FVector NegativeBoundsExtension; // 0xdc
	FBoxSphereBounds ExtendedBounds; // 0xe8
	TArray<FString> SourceMaterials; // 0x108
	int32_t UVsForStreaming; // 0x118
	int32_t ElementToIgnoreForTexFactor; // 0x11c
	TArray<UAssetUserData*> AssetUserData; // 0x120
	UNavCollision* NavCollision; // 0x130
};

struct ACoherentBaseHUD {
	FColor WhiteColor; // 0x3d0
	FColor GreenColor; // 0x3d4
	FColor RedColor; // 0x3d8
	APlayerController* PlayerOwner; // 0x3e0
	char bLostFocusPaused : 1; // 0x3e8
	char bShowHUD : 1; // 0x3e8
	char bShowDebugInfo : 1; // 0x3e8
	char bShowHitBoxDebugInfo : 1; // 0x3e8
	char bShowOverlays : 1; // 0x3e8
	char bEnableDebugTextShadow : 1; // 0x3e8
	TArray<AActor*> PostRenderedActors; // 0x3f0
	float LastHUDRenderTime; // 0x400
	float RenderDelta; // 0x404
	TArray<FName> DebugDisplay; // 0x408
	TArray<FName> ToggledDebugCategories; // 0x418
	UCanvas* Canvas; // 0x428
	UCanvas* DebugCanvas; // 0x430
	TArray<FDebugTextInfo> DebugTextList; // 0x438
	AActor* ShowDebugTargetDesiredClass; // 0x448
	AActor* ShowDebugTargetActor; // 0x450
};

struct USetMechanismActionCutsceneActorStep {
	USetMechanismActionCutsceneActorStepDesc* Desc; // 0x90
};

struct UInterpTrackEvent {
	TArray<FEventTrackKey> EventTrack; // 0x70
	char bFireEventsWhenForwards : 1; // 0x80
	char bFireEventsWhenBackwards : 1; // 0x80
	char bFireEventsWhenJumpingForwards : 1; // 0x80
	char bUseCustomEventName : 1; // 0x80
};

struct UPreSpawnMusicZoneSpawnerStrategy {
	AActor* PreSpawnMusicZoneActor; // 0x48
	AActor* PostSpawnMusicZoneActor; // 0x50
	bool ShouldPlayBattleWonSting; // 0x58
	bool ShouldStopMusicZoneWhenWaveCompleted; // 0x59
	AActor* SpawnedActor; // 0x60
	UMusicZoneComponent* MusicZoneComponent; // 0x68
};

struct ATallTaleService {
	UTaleRankRequirements* RankRequirementsAsset; // 0x3f8
	TArray<FGuid> InTaleCrews; // 0x400
	TArray<AQuestBook*> ActiveLocalPlayerQuestBooks; // 0x410
	TArray<AQuestBook*> ActiveRemotePlayerQuestBooks; // 0x420
};

struct UNPCOnShipSimpleAnimInstance {
	UAnimSequenceBase* Into; // 0x440
	UAnimSequenceBase* Loop; // 0x448
	UAnimSequenceBase* ActiveLoop; // 0x450
	UAnimSequenceBase* Outof; // 0x458
	UAnimSequenceBase* OutOfAlternate; // 0x460
	UCustomAnimationMontageDefinitionListingDataAsset* CustomAnimationMontageDefinitionListingDataAsset; // 0x468
	UCustomAnimationMontageDefinitionListingDataAsset* FacialCustomAnimationMontageDefinitionListingDataAsset; // 0x470
	FAnimationLookAt LookAt; // 0x478
	FCustomAnimationMontageStateMachine MontageStateMachine; // 0x510
	FCustomAnimationMontageStateMachine FacialMontageStateMachine; // 0x5e8
	UWeightedAnimSequenceLoadOnDemand* LoadOnDemandInactive; // 0x6c0
	UWeightedAnimSequenceLoadOnDemand* LoadOnDemandActive; // 0x6c8
	UWeightedAnimationLoadOnDemandDataAsset* LoadOnDemandActiveData; // 0x6d0
	UWeightedAnimationLoadOnDemandDataAsset* LoadOnDemandInactiveData; // 0x6d8
	bool ActiveUsesWeightedIdles; // 0x6e0
	bool InactiveUsesWeightedIdles; // 0x6e1
	bool UseActiveAnimSet; // 0x6e2
	bool LoopCompleted; // 0x6e3
	bool UseAlternateOutOf; // 0x6e4
};

struct UInteractableStorageContainer {
	UObject* Aggregator; // 0x158
	UNotificationInputId* InteractInput; // 0x160
};

struct USoundNodeDelay {
	float DelayMin; // 0x38
	float DelayMax; // 0x3c
};

struct UMaterialExpressionSphericalParticleOpacity {
	FExpressionInput Density; // 0x70
	float ConstantDensity; // 0xa8
};

struct UEncounterListenerComponent {
	EEncounterListenerType EncounterListenerType; // 0xc8
};

struct UMaterialExpressionTextureSampleParameterSubUV {
	char bBlend : 1; // 0x1c8
	char bMipBiasOnLowResolution : 1; // 0x1c8
};

struct UInterpTrackInstEvent {
	float LastUpdatePosition; // 0x28
};

struct ATextRenderActor {
	UTextRenderComponent* TextRender; // 0x3d0
};

struct UTaleQuestLoopStep {
	UTaleQuestLoopStepDesc* Desc; // 0x90
	UTaleQuestStep* CurrentStep; // 0x98
};

struct URainZoneComponent {
	FRainZoneParameters RainZoneParameters; // 0x2b8
};

struct UTaleQuestStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct USceneDialogueTextPoint {
	bool IsDelay; // 0x28
	char ActorNumber; // 0x29
	FText Text; // 0x30
	float DelayAfter; // 0x68
	UAnimationAsset* Animation; // 0x70
	UWwiseEvent* Speech; // 0x78
};

struct ASimpleAnimatedMechanismAction {
	USceneComponent* Root; // 0x520
	ESimpleAnimatedMechanismActionMode Mode; // 0x528
	bool AlwaysActive; // 0x529
	bool OnlyAnimateWhenActive; // 0x52a
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0x530
};

struct UKrakenShipWrappingKnockbackRegionComponent {
	UBoxComponent* KnockbackRegion; // 0x2b0
	FVector KnockbackDirection; // 0x2b8
	float KnockbackTime; // 0x2c4
	FKnockBackInfo KnockbackParams; // 0x2c8
};

struct UWaitForClueCollectedStepDesc {
	FQuestVariableClueDescriptor Clue; // 0x80
	FQuestVariableActor ClueActor; // 0x90
	FQuestVariableActor Discoverer; // 0xa0
};

struct UMovieSceneVectorSection {
	FRichCurve Curves[0x4]; // 0xa0
	int32_t ChannelsUsed; // 0x280
};

struct UPiratePreviewComponentFrontend {
	UAnimationDataStore* AnimationDataStore; // 0x2a0
	UAnimationDataStoreAsset* AnimationDataStoreAsset; // 0x2a8
	TArray<FEmoteDataEntryFrontend> EmoteAnimData; // 0x2c8
	FPirateDescription CurrentPirateDescription; // 0x2d8
	TArray<UClothingDesc*> CurrentPirateOutfit; // 0x358
	UAnimationDataStoreId* ThirdPersonAnimSetDataId; // 0x368
	UPirateSelector* PirateSelectorComponent; // 0x370
};

struct UVulnerabilityAIAbilityParams {
	FAthenaAIAbilityPlayerBasedRanges VulnerabilityDuration; // 0xc8
	FAthenaAIAbilityPlayerBasedRanges MaxVulnerabilityPeriodDamageThreshold; // 0xd8
};

struct UUserDefinedEnum {
	TArray<FText> DisplayNames; // 0x58
};

struct AIslandService {
	UIslandFrameworkSettings* IslandFrameworkSettings; // 0x458
	UIslandDataAsset* IslandDataAsset; // 0x460
	USunkenIslandSettingsDataAsset* SunkenIslandSettingsDataAsset; // 0x468
	TArray<FIsland> IslandArray; // 0x488
	TArray<FCannonAISpawnerZone> CannonAISpawnerZoneDebugArray; // 0x5b8
	TArray<FCannonAILocation> CannonAILocationDebugArray; // 0x5c8
	TArray<UAIProximityPlayerTracker*> PlayerTrackers; // 0x5d8
};

struct UBootyStorageSettingsAsset {
	UEnvQuery* SpawnBootyCheatEQSQuery; // 0x28
	AActor* RetrievalActor; // 0x30
	UEnvQuery* SpawnRetrievalActorEQSQuery; // 0x38
};

struct AShipInteractableLight {
	TArray<EShipRegion> DormantShipRegions; // 0x5d8
	bool IsBrigLight; // 0x5e8
	bool ExposeToNetProxy; // 0x5e9
	int32_t NetProxyBitIndex; // 0x5ec
	TArray<AShipInteractableLight*> SiblingLights; // 0x608
};

struct UAthenaGameInstance {
	UAthenaPlayModeLevelsDataAsset* AdditionalPlayModeLevels; // 0x88
	uint64_t NumLevels; // 0x90
	UAthenaGameContext* GameContext; // 0x98
};

struct UTaleQuestSetCompassTargetToTargetStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAutomationTestSettings {
	FFilePath AutomationTestmap; // 0x28
	TArray<FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x38
	FBuildPromotionTestSettings BuildPromotionTest; // 0x48
	FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x258
	FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x288
	TArray<FString> EngineTestModules; // 0x298
	TArray<FString> EditorTestModules; // 0x2a8
	TArray<FString> TestLevelFolders; // 0x2b8
	TArray<FOpenTestAsset> TestAssetsToOpen; // 0x2c8
	TArray<FExternalToolDefinition> ExternalTools; // 0x2d8
	TArray<FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x2e8
	TArray<FLaunchOnTestSettings> LaunchOnSettings; // 0x2f8
};

struct UDemoNetDriver {
	FString NetConnectionClassName; // 0x38
	int32_t MaxDownloadSize; // 0x48
	char bClampListenServerTickRate : 1; // 0x4c
	int32_t NetServerMaxTickRate; // 0x50
	int32_t MaxInternetClientRate; // 0x54
	int32_t MaxClientRate; // 0x58
	float ServerTravelPause; // 0x5c
	float SpawnPrioritySeconds; // 0x60
	float RelevantTimeout; // 0x64
	float KeepAliveTime; // 0x68
	float InitialConnectTimeout; // 0x6c
	float ConnectionTimeout; // 0x70
	UNetConnection* ServerConnection; // 0x78
	TArray<UNetConnection*> ClientConnections; // 0x80
	UWorld* World; // 0x90
	UObject* NetConnectionClass; // 0xc8
	UProperty* RoleProperty; // 0xd0
	UProperty* RemoteRoleProperty; // 0xd8
	FName NetDriverName; // 0xe0
};

struct UCapstanEventDispatcherMock {
	FObjectMessagingDispatcher EventDispatcher; // 0x30
};

struct UBTTask_SetFloatToTheSurface {
	bool ShouldFloatToTheSurface; // 0x60
};

struct UScrollBox {
	FScrollBoxStyle WidgetStyle; // 0x150
	FScrollBarStyle WidgetBarStyle; // 0x398
	USlateWidgetStyleAsset* Style; // 0x8b0
	USlateWidgetStyleAsset* BarStyle; // 0x8b8
	EOrientation Orientation; // 0x8c0
	ESlateVisibility ScrollBarVisibility; // 0x8c1
	EConsumeMouseWheel ConsumeMouseWheel; // 0x8c2
	FVector2D ScrollbarThickness; // 0x8c4
	bool AlwaysShowScrollbar; // 0x8cc
};

struct URemoveNPCOnShipStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAthenaAnimationKeyedInstrumentDataAsset {
	UAnimSequence* Into; // 0x28
	UAnimSequence* Action; // 0x30
	UAnimSequence* Outof; // 0x38
};

struct UInstancedNavMeshesDataAsset {
	TArray<FInstancedNavMesh> InstancedNavMeshes; // 0x28
};

struct UParticleModuleSizeBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UPirateLegendDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct UBootyItemShipOwnershipComponent {
	bool FirstTimeDroppedConditionalStatTriggerSent; // 0xc8
	TWeakObjectPtr<AActor> ItemProxy; // 0xcc
};

struct UTaleQuestLoopStepDesc {
	UTaleQuestStepDesc* LoopDesc; // 0x80
	FQuestVariableBool Condition; // 0x88
};

struct UAddMechanismTriggerStep {
	UAddMechanismTriggerStepDesc* Desc; // 0x90
};

struct UNPCDialogNotExpression {
	UNPCDialogExpression* Child; // 0x28
};

struct UNetworkClusteringSettings {
	float DynamicActorGridHalfSizeKm; // 0x38
	float DynamicActorGridCellSizeKm; // 0x3c
};

struct UAthenaGameViewportClient {
	UConsole* ViewportConsole; // 0x38
	TArray<FDebugDisplayProperty> DebugProperties; // 0x40
	UWorld* World; // 0x80
	UGameInstance* GameInstance; // 0x88
};

struct UNamedNotificationInputComponent {
	TArray<FNotificationInputDisplayName> NotificationInputDisplayNames; // 0xd0
};

struct UCostumeCategory {
	TArray<UClothingCategory*> PiratePreviewRemovals; // 0x78
	UAnimationAsset* PiratePreviewAnim; // 0x88
	FName PiratePreviewCamera; // 0x90
	bool PiratePreviewSpin; // 0x98
};

struct AMusicBox {
	UInteractableComponent* InteractableComponent; // 0x460
	USceneComponent* RootSceneComponent; // 0x468
	USkeletalMeshComponent* MeshComponent; // 0x470
	UWwiseEvent* SfxMusic; // 0x478
	UWwiseObjectPoolWrapper* SfxPool; // 0x480
	FName SfxEmitterName; // 0x488
	bool IsPlaying; // 0x490
};

struct UCharacterVfxComponent {
	UParticleSystemComponent* WindVFX; // 0xc8
	AAthenaPlayerCharacter* OwnerCharacter; // 0xd0
};

struct UParticleModuleWindInfluence {
	float WindSpeedCap; // 0x50
	float RandomFactorForWindDirection; // 0x54
	FRawDistributionFloat InfluenceOnAcceleration; // 0x58
	FRawDistributionFloat InfluenceOnVelocity; // 0x90
};

struct UFlamesOfFateInteractableComponent {
	FText DisplayName; // 0x130
	FText TakeFlameTooltipText; // 0x168
	FText LanternNotRaisedToolTipText; // 0x1a0
	FText NotWieldingFlameTooltipText; // 0x1d8
	FText CannotSetFlameTooltipText; // 0x210
	EFlameOfFateType FlameColour; // 0x248
};

struct UContestVoyagesSelectorDataAsset {
	UContestVoyagesDataAsset* DefaultContestVoyages; // 0x28
	TArray<FContestVoyagesSelectorUnit> FeatureToggledContestVoyages; // 0x30
};

struct UTaleQuestSpawnAIStep {
	UAISpawner* Spawner; // 0xa0
	USimpleAIRegion* Region; // 0xa8
	UAIProximityPlayerTracker* ProximityPlayerTracker; // 0xd8
	UFilterFirstPlayerEnterPlayerTrackerDecorator* VoyageParticipantOnlyActivateFilter; // 0xe0
};

struct USetCanReceiveBuffStatusResponse {
	bool LockBuffReceiver; // 0x30
	bool RevertOnDeactivate; // 0x31
};

struct UStringToAssetClassMap {
	TArray<FStringAssetClassPair> StringAssetClassPairs; // 0x28
};

struct UTaleQuestRetrieveSpawnedMerchantCaptainFromShipwreckStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UWatercraftTrackerComponent {
	TArray<AActor*> CurrentWatercrafts; // 0xd0
};

struct UWorldComposition {
	TArray<ULevelStreaming*> TilesStreaming; // 0x98
	double TilesStreamingTimeThreshold; // 0xa8
	bool bLoadAllTilesDuringCinematic; // 0xb0
	bool bRebaseOriginIn3DSpace; // 0xb1
	float RebaseOriginDistance; // 0xb4
};

struct UShipAudioEmitterComponent {
	UWwiseEvent* WwiseEvent; // 0x2e0
	bool ShipSinkingExceededRollThreshold; // 0x2e8
	bool SetRTPC_Pitch; // 0x2e9
	bool SetRTPC_Roll; // 0x2ea
	bool SetRTPC_Velocity; // 0x2eb
	bool SetRTPC_Strain; // 0x2ec
};

struct AFortOfTheDamnedBrazierMechanismTrigger {
	UMechanismTriggerComponent* MechanismTrigger; // 0x7c8
	EFlameOfFateType FlameTypeToActivate; // 0x7d0
	FText LanternNotLitToolTipText; // 0x7d8
	FText CannotSetBeaconToolTipText; // 0x810
	UNotificationInputId* TakeFlameOfFateNotificationID; // 0x848
	UNotificationInputId* SetFlameOfFateNotificationID; // 0x850
	float LanternSwingAmmount; // 0x858
	float LanternEmissiveAmmount; // 0x85c
	float LanternMegaEmmisiveAmount; // 0x860
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x868
};

struct USwingDoorAudioParams {
	UWwiseObjectPoolWrapper* SwingDoorPool; // 0x28
	UWwiseEvent* SwingDoorOpeningLoopStart; // 0x30
	UWwiseEvent* SwingDoorOpeningLoopStop; // 0x38
	UWwiseEvent* SwingDoorOpeningAdditionalStopSound; // 0x40
	UWwiseEvent* SwingDoorClosingLoopStart; // 0x48
	UWwiseEvent* SwingDoorClosingLoopStop; // 0x50
	UWwiseEvent* SwingDoorClosingAdditionalStopSound; // 0x58
};

struct AGameEvent {
	USceneComponent* Root; // 0x3d8
};

struct UDirectionalLightComponent {
	char bEnableLightShaftOcclusion : 1; // 0x438
	float OcclusionMaskDarkness; // 0x43c
	float OcclusionDepthRange; // 0x440
	FVector LightShaftOverrideDirection; // 0x444
	float WholeSceneDynamicShadowRadius; // 0x450
	float DynamicShadowDistanceMovableLight; // 0x454
	float DynamicShadowDistanceStationaryLight; // 0x458
	int32_t DynamicShadowCascades; // 0x45c
	float CascadeDistributionExponent; // 0x460
	float CascadeTransitionFraction; // 0x464
	float ShadowDistanceFadeoutFraction; // 0x468
	float LastTransitionSizeOverride; // 0x46c
	float CloseCascadeUpdateRateInMs; // 0x470
	float FarCascadesUpdateRateInMs; // 0x474
	char bUseInsetShadowsForMovableObjects : 1; // 0x478
	int32_t FarShadowCascadeCount; // 0x47c
	float FarShadowDistance; // 0x480
	float NormalOffsetScale; // 0x484
	float CloudsShadowsIntensity; // 0x488
	float DistanceFieldShadowDistance; // 0x48c
	float LightSourceAngle; // 0x490
	float TraceDistance; // 0x494
	FLightmassDirectionalLightSettings LightmassSettings; // 0x498
	char bCastModulatedShadows : 1; // 0x4a8
	FColor ModulatedShadowColor; // 0x4ac
	char bUsedAsAtmosphereSunLight : 1; // 0x4b0
};

struct ULockComponent {
	FName FeatureFlag; // 0xd0
	TArray<FLockData> Locks; // 0xd8
	TArray<FVaultLock> VaultLocks; // 0xe8
	TArray<FLockState> LockStates; // 0xf8
	FScriptMulticastDelegate LockOpenedDelegate; // 0x108
	FScriptMulticastDelegate IndividualLockOpenedDelegate; // 0x118
	UItemDesc* KeyUsedToUnlock; // 0x128
	USceneComponent* LockKeyMeshAttachParent; // 0x130
	TArray<UStaticMeshMemoryConstraintComponent*> LockKeyMeshComponents; // 0x138
	UNotificationInputId* UnlockInputId; // 0x148
	EActionDisplayPriority TooltipDisplayPriority; // 0x150
	UActionRulesComponent* ActionRules; // 0x1d8
	FText UnlockText; // 0x1e0
	FText NeedKeyToUnlockText; // 0x218
	FText VaultUnavailableUnlockText; // 0x250
	AActor* AssociatedOwnerObject; // 0x288
};

struct ACabinDoor {
	ULockComponent* LockComponent; // 0x4f0
	UWwiseEvent* OpenDoorAudioSting; // 0x4f8
	USwingDoorAudioParams* SwingDoorAudioParams; // 0x500
	ESwingDoorState ServerDoorState; // 0x528
};

struct UInventoryItemComponent {
	EItemType Type; // 0xd0
	FStringAssetReference Icon; // 0xd8
	FStringAssetReference BackgroundImage; // 0xe8
	FString IconUrl; // 0xf8
	float IconRotation; // 0x108
	float IconScale; // 0x10c
};

struct UPartyBeaconState {
	FName SessionName; // 0x28
	int32_t NumConsumedReservations; // 0x30
	int32_t MaxReservations; // 0x34
	int32_t NumTeams; // 0x38
	int32_t NumPlayersPerTeam; // 0x3c
	int32_t ReservedHostTeamNum; // 0x40
	int32_t ForceTeamNum; // 0x44
	TArray<FPartyReservation> Reservations; // 0x48
};

struct UBTTask_SwimTurnOnTheSpot {
	float MaxTurnSpringAccel; // 0x88
	float TimeUntilMaxTurnSpringAccel; // 0x8c
	float AngleDeltaToAcceptFinalRotation; // 0x90
	float Timeout; // 0x94
};

struct UStatusResponsePlayAudioLoopOnLocalClient {
	UWwiseEvent* StartLoopEvent; // 0x30
	UWwiseEvent* StopLoopEvent; // 0x38
};

struct UCharacterMovementComponent {
	ACharacter* CharacterOwner; // 0x178
	float GravityScale; // 0x180
	float MaxStepHeight; // 0x184
	float JumpZVelocity; // 0x188
	float JumpOffJumpZFactor; // 0x18c
	float WalkableFloorAngle; // 0x190
	float WalkableFloorZ; // 0x194
	EMovementMode MovementMode; // 0x198
	char CustomMovementMode; // 0x199
	float GroundFriction; // 0x1c0
	float MaxWalkSpeed; // 0x1c4
	float MaxWalkSpeedBackwards; // 0x1c8
	float WalkBackwardsMinAngle; // 0x1cc
	float WalkBackwardsMaxAngle; // 0x1d0
	float MaxWalkSpeedCrouched; // 0x1d4
	float MaxSwimSpeed; // 0x1d8
	float MaxFlySpeed; // 0x1dc
	float MaxCustomMovementSpeed; // 0x1e0
	float MaxAcceleration; // 0x1e4
	float MaxChargeAcceleration; // 0x1e8
	float BrakingFrictionFactor; // 0x1ec
	float BrakingFriction; // 0x1f0
	char bUseSeparateBrakingFriction : 1; // 0x1f4
	float BrakingDecelerationWalking; // 0x1f8
	float BrakingDecelerationFalling; // 0x1fc
	float BrakingDecelerationSwimming; // 0x200
	float BrakingDecelerationFlying; // 0x204
	float AirControl; // 0x208
	float AirControlBoostMultiplier; // 0x20c
	float AirControlBoostVelocityThreshold; // 0x210
	float FallingLateralFriction; // 0x214
	float CrouchedHalfHeight; // 0x218
	float Buoyancy; // 0x21c
	float PerchRadiusThreshold; // 0x220
	float PerchAdditionalHeight; // 0x224
	FRotator RotationRate; // 0x228
	char bUseControllerDesiredRotation : 1; // 0x234
	char bOrientRotationToMovement : 1; // 0x234
	char bMovementInProgress : 1; // 0x234
	char bEnableScopedMovementUpdates : 1; // 0x234
	char bForceMaxAccel : 1; // 0x234
	char bRunPhysicsWithNoController : 1; // 0x234
	char bForceNextFloorCheck : 1; // 0x234
	char bShrinkProxyCapsule : 1; // 0x234
	char bCanWalkOffLedges : 1; // 0x235
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x235
	char bDeferUpdateMoveComponent : 1; // 0x235
	USceneComponent* DeferredUpdatedMoveComponent; // 0x238
	float MaxOutOfWaterStepHeight; // 0x240
	float OutofWaterZ; // 0x244
	float Mass; // 0x248
	bool bEnablePhysicsInteraction; // 0x24c
	bool bTouchForceScaledToMass; // 0x24d
	bool bPushForceScaledToMass; // 0x24e
	bool bScalePushForceToVelocity; // 0x24f
	float StandingDownwardForceScale; // 0x250
	float InitialPushForceFactor; // 0x254
	float PushForceFactor; // 0x258
	float PushForcePointZOffsetFactor; // 0x25c
	float TouchForceFactor; // 0x260
	float MinTouchForce; // 0x264
	float MaxTouchForce; // 0x268
	float RepulsionForce; // 0x26c
	float NetMoveDelta; // 0x270
	char bForceBraking : 1; // 0x274
	float CrouchedSpeedMultiplier; // 0x278
	float UpperImpactNormalScale; // 0x27c
	FVector Acceleration; // 0x280
	FVector LastUpdateLocation; // 0x28c
	FVector PendingImpulseToApply; // 0x298
	FVector PendingForceToApply; // 0x2a4
	float AnalogInputModifier; // 0x2b0
	float MaxSimulationTimeStep; // 0x2c4
	int32_t MaxSimulationIterations; // 0x2c8
	float MaxSmoothNetUpdateDist; // 0x2cc
	float NoSmoothNetUpdateDist; // 0x2d0
	float NetworkSimulatedSmoothLocationTime; // 0x2d4
	float NetworkSimulatedSmoothRotationTime; // 0x2d8
	float LedgeCheckThreshold; // 0x2dc
	float JumpOutOfWaterPitch; // 0x2e0
	FFindFloorResult CurrentFloor; // 0x2e4
	EMovementMode DefaultLandMovementMode; // 0x370
	EMovementMode DefaultWaterMovementMode; // 0x371
	EMovementMode GroundMovementMode; // 0x372
	char bMaintainHorizontalGroundVelocity : 1; // 0x374
	char bImpartBaseVelocityX : 1; // 0x374
	char bImpartBaseVelocityY : 1; // 0x374
	char bImpartBaseVelocityZ : 1; // 0x374
	char bImpartBaseAngularVelocity : 1; // 0x374
	char bJustTeleported : 1; // 0x374
	char bNetworkUpdateReceived : 1; // 0x374
	char bBasedMovementUpdateReceived : 1; // 0x374
	char bMovementUpdateReceived : 1; // 0x375
	char bNetworkMovementModeChanged : 1; // 0x375
	char bNotifyApex : 1; // 0x375
	char bCheatFlying : 1; // 0x375
	char bWantsToCrouch : 1; // 0x375
	char bCrouchMaintainsBaseLocation : 1; // 0x375
	char bIgnoreBaseRotation : 1; // 0x375
	char bFastAttachedMove : 1; // 0x375
	char bAlwaysCheckFloor : 1; // 0x376
	char bUseFlatBaseForFloorChecks : 1; // 0x376
	char bPerformingJumpOff : 1; // 0x376
	char bWantsToLeaveNavWalking : 1; // 0x376
	char bUseRVOAvoidance : 1; // 0x376
	char bRequestedMoveUseAcceleration : 1; // 0x376
	char bPreventSimulatedFloorChecks : 1; // 0x376
	char bPreventNavMeshFalling : 1; // 0x376
	char bHasRequestedVelocity : 1; // 0x377
	char bRequestedMoveWithMaxSpeed : 1; // 0x377
	char bWasAvoidanceUpdated : 1; // 0x377
	char bProjectNavMeshWalking : 1; // 0x377
	float SmoothingClientPositionTolerance; // 0x38c
	float AvoidanceConsiderationRadius; // 0x390
	FVector RequestedVelocity; // 0x394
	int32_t AvoidanceUID; // 0x3a0
	FNavAvoidanceMask AvoidanceGroup; // 0x3a4
	FNavAvoidanceMask GroupsToAvoid; // 0x3a8
	FNavAvoidanceMask GroupsToIgnore; // 0x3ac
	float AvoidanceWeight; // 0x3b0
	FVector PendingLaunchVelocity; // 0x3b4
	float NavMeshProjectionInterval; // 0x458
	float NavMeshProjectionTimer; // 0x45c
	bool bUseNavMeshProjectionTimeModifier; // 0x460
	float MaxNavMeshProjectionInterval; // 0x464
	float NavMeshProjectionInterpSpeed; // 0x46c
	bool bUsePlaneBasedNavMeshProjectionInterpSystem; // 0x470
	float MaxAllowedZOffsetFromCurrentPlane; // 0x474
	float MaxZDiffFromPrevPlane; // 0x478
	float NavMeshProjectionHeightScaleUp; // 0x498
	float NavMeshProjectionHeightScaleDown; // 0x49c
	bool UseControllerRotationInNavWalkingMoveComponent; // 0x4a0
	FCharacterMovementComponentPreClothTickFunction PreClothComponentTick; // 0x4a8
	float MinTimeBetweenTimeStampResets; // 0x50c
	FRootMotionMovementParams RootMotionParams; // 0x510
	bool bWasSimulatingRootMotion; // 0x550
};

struct UAIEncounterSettings {
	UClass* PawnClass; // 0x28
	UAIClassId* AIClass; // 0x48
	FStringAssetReference TeamColor; // 0x50
};

struct UFogTrackerComponent {
	float FogDensityThreshold; // 0xd0
};

struct UIslandItemSpawnComponent {
	float RespawnTime; // 0x428
	AIslandData* IslandData; // 0x430
};

struct UParticleSystemComponent {
	UParticleSystem* Template; // 0x588
	TArray<UMaterialInterface*> EmitterMaterials; // 0x590
	TArray<USkeletalMeshComponent*> SkelMeshComponents; // 0x5a0
	char bResetOnDetach : 1; // 0x5b0
	char bUpdateOnDedicatedServer : 1; // 0x5b0
	TArray<FParticleSysParam> InstanceParameters; // 0x5b8
	FParticleSysParam EmitterPointParameter; // 0x5c8
	FScriptMulticastDelegate OnParticleSpawn; // 0x618
	FScriptMulticastDelegate OnParticleBurst; // 0x628
	FScriptMulticastDelegate OnParticleDeath; // 0x638
	FScriptMulticastDelegate OnParticleCollide; // 0x648
	FVector OldPosition; // 0x658
	FVector PartSysVelocity; // 0x664
	FVector CustomInheritedVelocity; // 0x688
	float CustomParameterDrivingCurves; // 0x6a0
	FLinearColor ColourTint; // 0x6a4
	float WarmUpTime; // 0x6b4
	float WarmupTickRate; // 0x6b8
	char bWarmingUp : 1; // 0x6bc
	float SecondsBeforeInactive; // 0x6d8
	float MaxTimeBeforeForceUpdateTransform; // 0x6e4
	char bOverrideLODMethod : 1; // 0x6ec
	ParticleSystemLODMethod LODMethod; // 0x6f0
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x6f4
	TArray<FMaterialRelevance> CachedViewRelevanceFlags; // 0x6f8
	TArray<UParticleSystemReplay*> ReplayClips; // 0x710
	float CustomTimeDilation; // 0x780
	FScriptMulticastDelegate OnSystemFinished; // 0x788
	char bUnbound : 1; // 0x798
};

struct UCalmWaterComponent {
	float Radius; // 0x2b0
	float RadiusPercentageToStartLerp; // 0x2b4
	float DampeningFactor; // 0x2b8
};

struct UUMGSequencePlayer {
	UWidgetAnimation* Animation; // 0x390
};

struct UServerMigrationSerialisationDetailsTestsUStructProperty {
	FServerMigrationSerialisationDetailsTestsUStruct SubStructWithMigrationMarkup; // 0x28
};

struct AGameplayAbilityTargetActor_GroundTrace {
	float CollisionRadius; // 0x500
	float CollisionHeight; // 0x504
};

struct UBTTask_CharacterRotateToFaceBBEntry {
	float Precision; // 0x88
};

struct UDebugCreateAndPlayNpcAnimationStepDesc {
	AActor* NpcToSpawn; // 0x80
	FStringAssetReference SpawnLocation; // 0x88
	FStringAssetReference PlaceableReaction; // 0x98
	UPlayNpcAnimationResource* AnimationParameters; // 0xa8
};

struct AStaticSimpleBootyWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UAIDebugVisualisationComponent {
	TArray<FAIDebugVisualisationLine> Lines; // 0xc8
	TArray<FAIDebugVisualisationBox> Boxes; // 0xd8
	TArray<FAIDebugVisualisationCylinder> Cylinders; // 0xe8
	TArray<FAIDebugVisualisationSphere> Spheres; // 0xf8
	TArray<FAIDebugVisualisationCone> Cones; // 0x108
};

struct UDockableKeyedInstrumentInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UGoldReward {
	uint32_t MinGold; // 0x28
	uint32_t MaxGold; // 0x2c
};

struct UMaterialExpressionLandscapeLayerBlend {
	TArray<FLayerBlendInput> Layers; // 0x70
	FGuid ExpressionGUID; // 0x80
};

struct UTaleQuestAssignVaultWithFallbackKeysStepDesc {
	TArray<UItemDesc*> FallbackKeys; // 0xf0
};

struct AWallClock {
	UPoseableMeshComponent* ClockMesh; // 0x3d0
	FName MinuteHandBoneName; // 0x3d8
	FName HourHandBoneName; // 0x3e0
	float ClockTimeUpdateRateInSeconds; // 0x3e8
	float MeshRotationCorrection; // 0x3ec
	UMaterialInstanceDynamic* ClockMeshDynamicMaterialInstance; // 0x428
};

struct UPlayerMuteComponent {
	TArray<APlayerState*> PlayerStatesPendingCrewMuting; // 0xd0
};

struct URadialSettingsAsset {
	TArray<FBaseRadialEntry> BaseRadialCreationRules; // 0x28
	TArray<UAnalogInputId*> BlockingAnalogInputs; // 0x38
	float MinRadialSectorUnselectableFraction; // 0x48
	float MaxRadialSectorUnselectableFraction; // 0x4c
	float MinSelectionMagnitude; // 0x50
	float SelectionTimeout; // 0x54
};

struct UAISpawnContextTaleQuestServiceDesc {
	FName AISpawnContextName; // 0x28
	bool SpecificToIsland; // 0x30
	FQuestVariableAsset ActorLocatedOnIsland; // 0x38
};

struct ATankard {
	UInventoryItemComponent* InventoryItem; // 0x7a8
	UWwiseEvent* StartDrinkingSfx; // 0x7b0
	UWwiseEvent* StopDrinkingSfx; // 0x7b8
	UWwiseEvent* SfxRefill; // 0x7c0
	UWwiseEvent* SfxTankardOnRaised; // 0x7c8
	UWwiseEvent* SfxTankardOnEquipWhenFullOverride; // 0x7d0
	UWwiseEvent* SfxTankardOnUnequipWhenFullOverride; // 0x7d8
	UWwiseEvent* SfxTankardSloshOnLandingAfterJump; // 0x7e0
	UWwiseEvent* SfxTankardSloshOnFootstep; // 0x7e8
	FName RaisingTankardSoundCueSwitchName; // 0x7f0
	FName RaisingTankardSoundCueSwitchFullValue; // 0x7f8
	FName RaisingTankardSoundCueSwitchEmptyValue; // 0x800
	FName SfxRtpcEmptiness; // 0x808
	float TotalGasContained; // 0x810
	float AlcoholPercentage; // 0x814
	float DrinkSpeed; // 0x818
	float TotalVolume; // 0x81c
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x820
	ULiquidContainerComponent* LiquidContainer; // 0x828
	float RemainingVolume; // 0x830
};

struct UInteractableGrammaticalGenderComponent {
	EInteractableGrammaticalGender GrammaticalGender; // 0xd0
};

struct URevealableComponent {
	float ActorHiddenDistance; // 0xd0
	float MaterialVisibleDistance; // 0xd4
	float CloseRevealDistance; // 0xd8
	FScriptMulticastDelegate OnCloseRevealDelegate; // 0xe0
	FScriptMulticastDelegate OnFarRevealDelegate; // 0xf0
	FScriptMulticastDelegate OnHideDelegate; // 0x100
	UObject* TargetGameStateObject; // 0x110
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x118
};

struct UTextPropertyTestObject {
	FText DefaultedText; // 0x28
	FText UndefaultedText; // 0x60
	FText TransientText; // 0x98
};

struct UWeaponItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UFaunaAnimationInstance {
	AActor* Fauna; // 0x450
	AFauna* FaunaCharacter; // 0x458
	FFaunaAnimationStructure Animations; // 0x460
	FRotator CurrentOrientation; // 0xb20
	EFaunaAnimationState CurrentState; // 0xb2c
	bool IsCaged; // 0xb2d
	bool LoopSpecial; // 0xb2e
	int32_t SpecialIndex; // 0xb30
	float LocomotionSpeed; // 0xb34
	float ImpactStrength; // 0xb38
	EFaunaAnimationLocation Location; // 0xb3c
	FFaunaAnimationLocationStructure BaseAnimSet; // 0xb40
	float TurnRate; // 0xea0
	float CurrentYaw; // 0xea4
	float CurrentDirection; // 0xea8
	bool TurningActive; // 0xeac
	bool TurningLeft; // 0xead
	float TurnRateToDisableTurns; // 0xeb0
	float AnimationTurnRateMultiplier; // 0xeb4
	EFaunaAnimationStartledLevel StartledLevel; // 0xeb8
	bool PigIsStarving; // 0xeb9
	bool StartEating; // 0xeba
	bool SnakeInAttackStance; // 0xec0
	bool SnakeInCharmStance; // 0xec1
	bool StartSnakeStrike; // 0xec2
	EFaunaAnimationSnakeAttackDirection SnakeAttackDirection; // 0xec3
	FFaunaAnimationSnakeBiteStructure BaseSnakeAttackAnims; // 0xec8
	FFaunaAnimationCurrentPlayingAnimations CurrentPlayingAnimations; // 0xee8
};

struct UMovieSceneMaterialTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
};

struct UTaleWaitForSpireToLoadStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UMapMarkRenderResource {
	UMapMarkId* MarkTypeId; // 0x28
};

struct UStatusResponseHealthChangeOverTime {
	float HealthChangePerSecond; // 0x30
	EHealthChangedReason HealthChangedReason; // 0x34
};

struct UTaleQuestReactionStepDesc {
	FQuestVariableActor PlaceableReaction; // 0x80
};

struct UHasEntitlementStatCondition {
	int32_t RequiredNumberToMatch; // 0x28
	TArray<UEntitlementDesc*> RequiredEntitlements; // 0x30
};

struct UItemSpawnComponent {
	bool SpawnOnStart; // 0x2b0
	FItemSpawnParams SpawnParams; // 0x2b8
	UWeightedItemDescSpawnDataAsset* ReferencedSpawnDistributionAsset; // 0x2e0
	UItemSpawnDistributionAsset* ReferencedSpawnDistribution; // 0x2e8
	TArray<FItemSpawnTransform> SpawnTransforms; // 0x2f0
	TArray<FItemSpawnTransformWithRandomQuantity> SpawnTransformsWithRandomQuantities; // 0x300
	FName FeatureToggle; // 0x310
	ESpawnedItemSource SpawnSource; // 0x318
	float SpawnRate; // 0x31c
	bool DestroyProxiesOnEndPlay; // 0x320
	bool SpawnWithPhysicsEnabled; // 0x321
	bool DoNotAttachToOwnerWhenSpawned; // 0x322
	bool DropItemsOnSpawn; // 0x323
	bool DropItemsUsingPriorityAIDropParams; // 0x324
	TArray<FSpawnInstance> SpawnList; // 0x328
	TArray<FSpawnInstance> SingleItemInstances; // 0x338
	TArray<FSpawnedItem> SpawnedItems; // 0x348
};

struct UParticleModuleCollisionGPU {
	FRawDistributionFloat Resilience; // 0x50
	FRawDistributionFloat ResilienceScaleOverLife; // 0x88
	float DampingFactorRotation; // 0xc0
	float Friction; // 0xc4
	float RadiusScale; // 0xc8
	float RadiusBias; // 0xcc
	EParticleCollisionResponse Response; // 0xd0
	EParticleCollisionMode CollisionMode; // 0xd1
};

struct ALargeStaticMeshWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UKnockbackAIAbility {
	TWeakObjectPtr<UKnockbackAIAbilityTriggerComponent> ExplosionTriggerPtr; // 0x78
	FExplosionForceFeedbackInfo ForceFeedbackInfo; // 0x80
	UExplosionComponent* PawnExplosion; // 0xa8
};

struct AWieldableIngestible {
	UGiveItemUponConsumptionComponent* GiveItemUponConsumptionComponent; // 0x798
	UApplyStatusToConsumerComponent* ApplyStatusToConsumerComponent; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7b0
	UFeedableComponent* FeedableComponent; // 0x7b8
	float InToIngestionDuration; // 0x7c0
	float OutOfIngestionDuration; // 0x7c4
	bool CanIngest; // 0x7c8
	UWwiseEvent* IngestAudioEvent; // 0x7d0
	FName IngestAudioFoodType; // 0x7d8
	FPlayerStat IngestionStat; // 0x7e0
	FPlayerStat IngestionShipStat; // 0x7e4
};

struct ATelemetryDescriptorMockActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UTunnelsOfTheDamnedLootFilterDataAsset {
	TArray<UClass*> TargetProxyTypes; // 0x28
	TArray<UClass*> IgnoredProxyTypes; // 0x38
	UClass* EmissaryFlagBaseType; // 0x48
	bool IgnoreStorageContainers; // 0x68
};

struct UDistributionVectorUniform {
	FVector Max; // 0x38
	FVector Min; // 0x44
	char bLockAxes : 1; // 0x50
	EDistributionVectorLockFlags LockedAxes; // 0x54
	EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x55
	char bUseExtremes : 1; // 0x58
};

struct ADebugTreasureLocation {
	float DigRadius; // 0x3d0
	FVector Pos; // 0x3d4
};

struct UAthenaAIFormComponent {
	TArray<FAthenaAIFormComponentVfxCustomisation> VfxCustomisations; // 0xd0
	UAthenaAIFormDataAsset* FormData; // 0xe0
	UCharacterHitReactionDamagerTypeToAnimTypeLayer* HitReactionsLayer; // 0xe8
};

struct UCircleMapClueDescriptorGenerator {
	UClueDescriptor* DescriptorType; // 0x28
	TArray<UClueDestinationDescriptor*> SupportedDestinationTypes; // 0x30
};

struct AShippingDebugActorSphereCollection {
	TArray<FSphereData> SphereList; // 0x3d0
};

struct UInterpTrack {
	TArray<UInterpTrack*> SubTracks; // 0x38
	UInterpTrackInst* TrackInstClass; // 0x48
	ETrackActiveCondition ActiveCondition; // 0x50
	FString TrackTitle; // 0x58
	char bOnePerGroup : 1; // 0x68
	char bDirGroupOnly : 1; // 0x68
	char bDisableTrack : 1; // 0x68
	char bIsSelected : 1; // 0x68
	char bIsAnimControlTrack : 1; // 0x68
	char bSubTrackOnly : 1; // 0x68
	char bVisible : 1; // 0x68
	char bIsRecording : 1; // 0x68
};

struct UMaterialManipulationComponent {
	TArray<FScalarParameterValue> ScalarParameterValues; // 0xc8
	TArray<FTextureParameterValue> TextureParameterValues; // 0xd8
	TArray<FVectorParameterValue> VectorParameterValues; // 0xe8
	TArray<FDynamicMaterialListContainer> DynamicMaterials; // 0xf8
};

struct UAbilityTask_Repeat {
	FScriptMulticastDelegate OnPerformAction; // 0x68
	FScriptMulticastDelegate OnFinished; // 0x78
};

struct USpawnRewardStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UApplyNameplateToBountyWaveSpawnedAction {
	FText AIName; // 0x28
};

struct UBTTask_AthenaWaitWithFloor {
	FAIDataProviderFloatValue Floor; // 0xf8
};

struct UAsyncLoadoutRepairComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct APartyBeaconClient {
	FString DestSessionId; // 0x430
	FPartyReservation PendingReservation; // 0x440
	EClientRequestType RequestType; // 0x470
	bool bPendingReservationSent; // 0x471
	bool bCancelReservation; // 0x472
};

struct ACustomizableTimeService {
	FTimespan GameWorldTimeOffset; // 0x408
	uint32_t TimeScalar; // 0x414
	uint32_t NumberOfDaysInEachGameMonth; // 0x418
	double ServiceTimeQueryRapidFrequencyOffsetMax; // 0x420
	float ServiceTimeQueryRapidFrequencyInSeconds; // 0x428
	float ServiceTimeQueryFrequencyInSeconds; // 0x42c
	float ClientTimeUpdateFrequencyInSeconds; // 0x430
	float SunriseTimeHours; // 0x434
	float SunsetTimeHours; // 0x438
	float LocalTimeUpdateAdjustMaxTimeDelta; // 0x43c
	float MinLocalTimeUpdateAdjustPercentageToSlowDown; // 0x440
	float MaxLocalTimeUpdateAdjustPercentageToSlowDown; // 0x444
	float MinLocalTimeUpdateAdjustPercentageToSpeedUp; // 0x448
	float MaxLocalTimeUpdateAdjustPercentageToSpeedUp; // 0x44c
	uint32_t MaxNumReplicatedTimeEntriesToAverage; // 0x450
	FReplicatedAuthoritativeTime ReplicatedServerTime; // 0x4a0
};

struct UIslandWatercraftSpawnComponent {
	float MinMaxYawOffset; // 0x548
	float MinDistanceToNearestWatercraftInMetres; // 0x54c
};

struct UParticleModuleVectorFieldScaleOverLife {
	UDistributionFloat* VectorFieldScaleOverLife; // 0x50
};

struct AStatueThreatBase {
	float HealingPerSecond; // 0x3f8
	float DespawnDelay; // 0x3fc
	bool EnableRadialDamageOnBeginPlay; // 0x400
	FScriptMulticastDelegate OnStatueDamaged; // 0x408
	FScriptMulticastDelegate OnStatueDestroyed; // 0x418
	USceneComponent* Root; // 0x428
	UHealthComponent* HealthComponent; // 0x430
	URadialDamagerComponent* RadialDamageComponent; // 0x438
	USunkenCurseArtefactAudioComponent* AudioComponent; // 0x440
	USunkenCurseArtefactVfxComponent* VFXComponent; // 0x448
	USunkenCurseArtefactDynamicMaterialComponent* DamageMaterialComponent; // 0x450
	UActorDamageableComponent* DamageableComponent; // 0x458
};

struct ASequencerCutSceneActor {
	FCutScenePlayData CutScenePlayData; // 0x448
	TArray<FCutSceneLoadData> CutSceneDataSet; // 0x480
	UCutSceneSubtitlesComponent* CutsceneSubtitleComponent; // 0x490
	APawn* InteractingPlayerPawn; // 0x498
	bool IsLooping; // 0x4a0
	ULevelSequence* LevelSequenceToPlay; // 0x4a8
	TArray<ULevelSequence*> LevelSequencesToPlay; // 0x4b0
};

struct USetHiddenOnKeyTakenStep {
	USetHiddenOnKeyTakenStepDesc* StepDesc; // 0x90
};

struct ATutorialMap {
	UWieldableItemCanvasRenderingComponent* WieldableCanvasRenderingComponent; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7b0
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7b8
	EQuestMapIcon QuestMapIcon; // 0x7d2
};

struct UVotableWithSessionComponent {
	FText VoteTooltipText; // 0xc8
	FText CantVoteTooltipText; // 0x100
	FText CancelExistingPrimaryTooltipText; // 0x138
	bool CancelExistingPrimaryVoyages; // 0x170
	UNotificationInputId* VoteActionInputId; // 0x178
	UNotificationInputId* VoteActionReleaseInputId; // 0x180
};

struct AAggressiveGhostShipsEncounter {
	UAggressiveGhostShipsEncounterParams* Params; // 0x460
	AActor* ActiveWaveMusicZoneActor; // 0x468
	AAggressiveGhostShipPoolResource* PoolResourceActor; // 0x470
	APhasedClusterRoot* PhasedClusterRoot; // 0x478
};

struct URetractableCharacterComponent {
	FName FeatureToggle; // 0xf0
	FRetractorOrientationAdjustmentFlags OrientationAdjustmentOnRetractFlags; // 0xf8
	EAxis RetractorBoxAxis; // 0xfb
	bool ShouldAutoReleaseOnSuccessfulRetract; // 0xfc
	bool MigrateAttachedWithRetractor; // 0xfd
	bool WasSimulatingPhysicsBeforeRetract; // 0xfe
};

struct UCollectorsChestItemSlotInteractable {
	int32_t SlotId; // 0x128
	UStaticMeshMemoryConstraintComponent* ItemMeshComponent; // 0x140
	FCollectorsChestStoredItemInfo StoredItemInfo; // 0x148
	UWwiseEvent* PlaceItemSound; // 0x1b0
	UWwiseEvent* PickupItemSound; // 0x1b8
	float PlaceLerpTime; // 0x1c0
	float LocalPredictionTimeout; // 0x1c4
};

struct URemoveCriticalActorStep {
	URemoveCriticalActorStepDesc* Desc; // 0x90
};

struct UParticleSystem {
	EParticleSystemUpdateMode SystemUpdateMode; // 0x28
	float UpdateTime_FPS; // 0x2c
	float UpdateTime_Delta; // 0x30
	float WarmUpTime; // 0x34
	float WarmupTickRate; // 0x38
	TArray<UParticleEmitter*> Emitters; // 0x40
	UParticleSystemComponent* PreviewComponent; // 0x50
	UInterpCurveEdSetup* CurveEdSetup; // 0x58
	char bOrientZAxisTowardCamera : 1; // 0x60
	float LODDistanceCheckTime; // 0x64
	ParticleSystemLODMethod LODMethod; // 0x68
	TArray<float> LODDistances; // 0x70
	char bRegenerateLODDuplicate : 1; // 0x80
	TArray<FParticleSystemLOD> LODSettings; // 0x88
	char bIgnoreBoundsRotation : 1; // 0x98
	char bBoostParticleAggregationPriority : 1; // 0x98
	char bUseFixedRelativeBoundingBox : 1; // 0x98
	FBox FixedRelativeBoundingBox; // 0x9c
	char bUseLowResTranslucencyBoundingBox : 1; // 0xb8
	FBox LowResTranslucencyBoundingBox; // 0xbc
	float SecondsBeforeInactive; // 0xd8
	char bShouldResetPeakCounts : 1; // 0xdc
	char bHasPhysics : 1; // 0xdc
	char bPostPhysicsTick : 1; // 0xdc
	char bUseRealtimeThumbnail : 1; // 0xdc
	char ThumbnailImageOutOfDate : 1; // 0xdc
	float Delay; // 0xe0
	float DelayLow; // 0xe4
	char bUseDelayRange : 1; // 0xe8
	FVector MacroUVPosition; // 0xec
	float MacroUVRadius; // 0xf8
	EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xfc
	FBox CustomOcclusionBounds; // 0x100
	TArray<FLODSoloTrack> SoloTracking; // 0x120
	TArray<FNamedEmitterMaterial> NamedMaterialSlots; // 0x130
};

struct USCS_Node {
	UActorComponent* ComponentTemplate; // 0x28
	FName VariableName; // 0x30
	FName AttachToName; // 0x38
	FName ParentComponentOrVariableName; // 0x40
	FName ParentComponentOwnerClassName; // 0x48
	bool bIsParentComponentNative; // 0x50
	bool ServerMigrationFlagSet; // 0x51
	TArray<USCS_Node*> ChildNodes; // 0x58
	TArray<FBPVariableMetaDataEntry> MetaDataArray; // 0x68
	FGuid VariableGuid; // 0x78
};

struct ASkeletonFortDoor {
	float DoorDelayTime; // 0x460
	float AmountDoorOpens; // 0x464
	float DoorOpeningSpeed; // 0x468
	UItemDesc* ItemToWieldToUnlockDoor; // 0x470
	FPlayerStat PlayerStatToFireOnOpen; // 0x478
	FPlayerStat PlayerAllianceStatToFireOnOpen; // 0x47c
	bool FireStatToAllNearbyCrews; // 0x480
	UStaticMeshComponent* DoorMesh; // 0x498
	TArray<FLandmarkReactionKeyFrame> LandmarkReactionsWhenDoorOpens; // 0x4a0
	ALandmarkReactionPlayer* LandmarkReactionPlayer; // 0x4b0
	UInteractableComponent* InteractionRegion; // 0x4b8
	UWwiseEvent* DoorUnlockSound; // 0x4c0
	UWwiseObjectPoolWrapper* DoorUnlockPool; // 0x4c8
	FName KeyMountLocation; // 0x4d0
	float KeyMountTime; // 0x4d8
	float KeyDestroyTime; // 0x4dc
	EDoorState ServerDoorState; // 0x4e0
	UItemDesc* OverrideItemToWieldToUnlockDoor; // 0x4e8
	FPlayerStat OverridePlayerStatToFireOnOpen; // 0x4f0
};

struct UMaterialExpressionSubtract {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	float ConstA; // 0xe0
	float ConstB; // 0xe4
};

struct UDeliverableRedirectionNPCDestinationDescriptor {
	ENPCDisplayNameType DisplayNameType; // 0x28
	FText FemaleNPCDestination; // 0x30
	FText MaleNPCDestination; // 0x68
};

struct UCutsceneAnimationDataAsset {
	TArray<FCutsceneAnimationElement> CutsceneElements; // 0x30
};

struct UTaleQuestMerchantContractsService {
	TArray<UTaleQuestMerchantContract*> Contracts; // 0x60
};

struct UTemporaryEntitlementsTaleQuestService {
	UTemporaryEntitlementsTaleQuestServiceDesc* ServiceDesc; // 0x60
	TArray<FLoadoutCacheEntry> CachedLoadouts; // 0x70
};

struct UAICreatureMovementModifierParamsDataAsset {
	float TurnRateMultiplier; // 0x28
	float FlyingTurnRateMultiplier; // 0x2c
	bool UseTighterTurningCircle; // 0x30
	bool UseHighResNavMesh; // 0x31
};

struct ARespawnStatue {
	UStaticMeshComponent* StaticMeshComponent; // 0x460
	FName InteractionSocketName; // 0x468
	float HoldTime; // 0x470
	EActionDisplayPriority TooltipDisplayPriority; // 0x474
};

struct AAthenaGameplayDebuggingHUDComponent {
	float MenuStartX; // 0x3d0
	float MenuStartY; // 0x3d4
	float DebugInfoStartX; // 0x3d8
	float DebugInfoStartY; // 0x3dc
	UCanvas* Canvas; // 0x3e0
	APlayerController* PlayerOwner; // 0x3e8
};

struct UTeleportLungeAIAbilityParams {
	TArray<FAthenaAIControllerParamValue> NamedControllerParams; // 0x28
	EAIAbilityDamageIntervalCounterMode DamageIntervalCountingMode; // 0x38
	bool UseTimeBetweenAbility; // 0x39
	FAthenaAIAbilityPlayerBasedRanges ActivationTimerCooldown; // 0x40
	FAthenaAIAbilityPlayerBasedRanges TimeBetweenAbility; // 0x50
	bool UseDamageBetweenAbility; // 0x60
	FAthenaAIAbilityPlayerBasedRanges DamageBetweenAbility; // 0x68
	float AbilityRadius; // 0x78
	bool UseMinMaxAttackRange; // 0x7c
	FMinMaxAbilityRange MinMaxAttackRange; // 0x80
	TArray<FAIAbilityFollowUp> FollowUpAbilities; // 0x88
	float Weight; // 0x98
	FAIAbilityContinuousCooldownParameterData ContinuousCooldownAbilityParameters; // 0xa0
	UAthenaAIAbilityType* AIAbilityTypeClass; // 0xc0
};

struct UTaleQuestSelectClueSiteForLootStepDesc {
	UTaleQuestArrayEntrySelectionStrategy* SelectionStrategy; // 0x80
	UClueSiteLootRestrictionsDataAsset* ClueSiteLootRestrictions; // 0x88
	EClueSiteLootType LootType; // 0x90
	FQuestVariableClueSite OutputClueSite; // 0x98
	FQuestVariableBool MaxedAllClueSites; // 0xa8
};

struct UCompanyData {
	UCompany* Company; // 0x28
	bool ShouldHaveLevels; // 0x30
	bool ShouldHaveEmblems; // 0x31
	bool ShouldHaveVoyages; // 0x32
	bool ShouldBeOnCompanySummaryScreen; // 0x33
	bool ShouldBeHiddenWhenNothingUnlocked; // 0x34
	FName ShouldBeHiddenWhenNothingUnlockedWhenToggleEnabled; // 0x38
	FCompanySkin Skin; // 0x40
	FCompanyShopSkin ShopSkin; // 0xf8
	FCompanyShopInfo ShopInfo; // 0x118
	FCompanyProgressIcons ProgressIcons; // 0x178
	FCompanyRankData RankData; // 0x190
	FText Motto; // 0x1a0
	FText CompanyFlavourText1; // 0x1d8
	FText CompanyFlavourText2; // 0x210
	uint32_t TotalNumberOfTitles; // 0x248
	uint32_t TotalNumberOfItems; // 0x24c
	uint32_t MaxVoyagesOffered; // 0x250
	FStringAssetReference MapsDiscoveredBackgroundImage; // 0x258
	TArray<FStringAssetReference> MapsDiscoveredImages; // 0x268
	FString VoyageAudioSwitchName; // 0x278
	FString VoyageAudioSwitchValue; // 0x288
	TArray<EBootyTypes> BootyBought; // 0x298
};

struct UMovieSceneWidgetMaterialTrack {
	TArray<FName> BrushPropertyNamePath; // 0x98
	FName TrackName; // 0xa8
};

struct UCleanlinessComponent {
	UCurveFloat* DirtinessStrengthToMaterialStrength; // 0xd8
	FCleanlinessInfo CleanlinessInfo; // 0xe0
	float DirtinessDecayRatePerSecond; // 0xec
	float QuickCleanDirtynessDecayRatePerSecond; // 0xf0
};

struct UChecklistMapSettings {
	FStringAssetReference ChecklistMapItemDescClass; // 0x38
};

struct URewardDefinitionAsset {
	TArray<FRewardDefinition> RewardDefinitions; // 0x28
};

struct UParticleModuleMeshRotation {
	FRawDistributionVector StartRotation; // 0x50
	char bInheritParent : 1; // 0x88
};

struct AChaliceStatue {
	UStaticMeshComponent* Mesh; // 0x3d0
	TArray<UParticleSystemComponent*> PhaseParticleSystems; // 0x3d8
	FObjectMessagingDispatcher EventDispatcher; // 0x430
};

struct AOnlineBeaconClient {
	AOnlineBeaconHostObject* BeaconOwner; // 0x3f8
	UNetConnection* BeaconConnection; // 0x400
	EBeaconConnectionState ConnectionState; // 0x408
};

struct UMockPlayerTelemetryComponent {
	float HeartbeatInterval; // 0x128
	FDateTime SpawnTimestamp; // 0x270
};

struct UScrollBar {
	FScrollBarStyle WidgetStyle; // 0x138
	USlateWidgetStyleAsset* Style; // 0x650
	bool bAlwaysShowScrollbar; // 0x658
	EOrientation Orientation; // 0x659
	FVector2D Thickness; // 0x65c
};

struct UNPCDialogPredicateIsTrue {
	FName ParameterName; // 0x38
};

struct UWheelDescAsset {
	FWheelDesc WheelDesc; // 0x28
};

struct UBurrowComponent {
	ABurrowCrack* BurrowCrackClass; // 0xd0
	ABurrowEruptBase* BurrowEruptClass; // 0xd8
	float BurrowFadeoutTime; // 0xe0
	TArray<ABurrowCrack*> BurrowCracks; // 0xe8
	ABurrowEruptBase* BurrowErupt; // 0xf8
};

struct AAthenaPlayerCharacter {
	USceneComponent* FirstPersonMeshOffsetComponent; // 0xd10
	USkeletalMeshComponent* FirstPersonMesh; // 0xd18
	UAthenaCameraComponent* FirstPersonCamera; // 0xd20
	UAthenaCameraComponent* ThirdPersonCamera; // 0xd28
	UAthenaCameraComponent* SpringArmCamera; // 0xd30
	ULookAtEmoteCameraComponent* LookAtEmoteCameraComponent; // 0xd38
	UAthenaSpringArmComponent* SpringArm; // 0xd40
	UChildActorComponent* LocalCloudDome; // 0xd48
	UCharacterInteractionComponent* InteractionComponent; // 0xd50
	UClimbingComponent* ClimbingComponent; // 0xd58
	UDrunkennessComponent* DrunkennessComponent; // 0xd60
	UStaggerComponent* StaggerComponent; // 0xd68
	UDrowningComponent* DrowningComponent; // 0xd70
	URumbleHandlerComponent* RumbleHandlerComponent; // 0xd78
	UScreenSpaceVfxComponent* ScreenSpaceVfxComponent; // 0xd80
	UTreasureMapCollectionComponent* TreasureMapCollectionComponent; // 0xd88
	UPhrasesRadialComponent* PhrasesRadialComponent; // 0xd90
	UQuickInventoryComponent* QuickInventoryComponent; // 0xd98
	UPointOfInterestTrackerComponent* PointOfInterestTrackerComponent; // 0xda0
	ULimpingComponent* LimpingComponent; // 0xda8
	UPacingComponent* PacingComponent; // 0xdb0
	UBurpComponent* BurpComponent; // 0xdb8
	UMeleeAttackLockOnComponent* MeleeLockOnComponent; // 0xdc0
	UDeathSelfInteractionComponent* DeathSelfInteractionComponent; // 0xdc8
	UWaterSlidePlayerComponent* WaterSlidePlayerComponent; // 0xdd0
	UReviveDebugComponent* ReviveDebugComponent; // 0xdd8
	UFlashbangEffectComponent* FlashbangEffectComponent; // 0xde0
	UWorldLocationVisitorComponent* WorldLocationVisitorComponent; // 0xde8
	UMeleeAttackLockOnComponentSettings* MeleeAttackLockOnSettings; // 0xdf0
	UStatusEffectManagerComponent* StatusEffectManagerComponent; // 0xdf8
	UStatusEffectPersistenceComponent* StatusEffectPersistenceComponent; // 0xe00
	UPlayerCurseComponent* PlayerCurseComponent; // 0xe08
	UMaterialStatusSusceptibilityComponent* MaterialStatusSusceptibilityComponent; // 0xe10
	UHealthRegenerationPoolComponent* HealthRegenerationPoolComponent; // 0xe18
	USicknessComponent* SicknessComponent; // 0xe20
	URewindComponent* PlayerViewRewindComponent; // 0xe28
	UCapsuleComponent* ProjectileTraceHitVolume; // 0xe30
	UPlayerMerchantContractsComponent* PlayerMerchantContractsComponent; // 0xe38
	UPlayerShroudBreakerTrackerComponent* PlayerShroudBreakerTrackerComponent; // 0xe40
	UPetOwnerComponent* PetOwnerComponent; // 0xe48
	UAISpawnContextContainerComponent* SpawnContextContainerComponent; // 0xe50
	URadialManagerComponent* RadialManager; // 0xe58
	float CameraFOVWhenSprinting; // 0xe60
	UCurveVector* ApproximateCamPitchToLocalCamOffsetCurve; // 0xe68
	FWalkConditionsParams WalkConditionParams; // 0xe70
	FSprintConditionsParams ServerSprintConditionParams; // 0xe78
	FSprintConditionsParams ClientSprintConditionParams; // 0xe84
	float SprintingServerTimeTolerance; // 0xe90
	float PostSprintResetTime; // 0xe94
	UAthenaSpringArmComponentParams* EmoteSpringArmParameters; // 0xe98
	UAthenaSpringArmComponentParams* DeathSpringArmParameters; // 0xea0
	UEmotesRadialDataAsset* EmotesRadialDataAsset; // 0xea8
	bool AllowAnimationTickAggregation; // 0xeb0
	FAchievementKillOpponentFromBehindWithBlunderbuss AchievementKillOpponentFromBehindWithBlunderbuss; // 0xeb4
	FAchievementHeavyAttackRivalOffTheirShip AchievementHeavyAttackRivalOffTheirShip; // 0xeb8
	FAchievementBlockThenHitAndGetBlockedThenTakeHit AchievementBlockThenHitAndGetBlockedThenTakeHit; // 0xec8
	FAchievementHaveADrinkWithAnotherCrewAtAnOutpost AchievementHaveADrinkWithAnotherCrewAtAnOutpost; // 0xed8
	FAchievementKillOpponentInContest AchievementKillOpponentInContest; // 0xef8
	UConditionalStatsTriggerType* ConditionalStatsTriggerForKillingAnotherPlayer; // 0xf00
	UAICreatureMovementModifierParamsDataAsset* PirateLegendHideoutPetMovementData; // 0xf08
	UAICreatureMovementModifierParamsDataAsset* OnShipPetMovementData; // 0xf10
	UAsyncLoadoutRepairComponent* RepairComponent; // 0xf18
	USeasonProgressionUIComponent* SeasonUIComponent; // 0xf20
	UEmotePropData* EmotePropData; // 0xf28
	FName ReplicatedOverrideAnimationEntry; // 0xfe0
	UAnimationDataStoreId* FirstPersonAnimSetDataId; // 0xfe8
	UAnimationDataStoreWeakReferenceAsset* FirstPersonAnimationDataStoreWeakReferencesAsset; // 0xff0
	ECharacterType CharacterType; // 0xff8
	UClothingLoadoutComponent* ClothingLoadoutComponent; // 0x1960
	UPetLoadoutComponent* PetLoadoutComponent; // 0x1968
	UVoyageParticipantComponent* PrimaryVoyageParticipantComponent; // 0x1970
	UVoyageParticipantComponent* TaleVoyageParticipantComponent; // 0x1978
	UVoyageParticipantComponent* EmergentVoyageParticipantComponent; // 0x1980
	UPlayerWorldLocationComponent* PlayerWorldLocationComponent; // 0x1988
	UChainLightningReceiverComponent* ChainLightningReceiverComponent; // 0x1990
	FAthenaPlayerCharacterModelSwap PendingModelSwap; // 0x1998
	bool ReplicatedEmoteExitAllowed; // 0x19e8
	bool FinishedWaitingForSpawn; // 0x1a68
	bool AutoFloatInWater; // 0x1a9a
	bool ReplicatedIsSprinting; // 0x1a9c
	float AutoMoveCancelThreshold; // 0x1ab8
	int32_t ReplicatedOverridePirateDescSeed; // 0x1abc
};

struct AHandHatch {
	UStaticMeshComponent* Mesh; // 0x3d8
	UStaticMeshComponent* GlowMesh; // 0x3e0
	TArray<UAnimSequence*> HandAnimations; // 0x3e8
	UPointLightComponent* HatchLight; // 0x3f8
	EFlameOfFateType FlameOfFateType; // 0x400
	TArray<UClientSkeletalMeshComponent*> HandsMeshes; // 0x408
	TArray<FVector> HandsMeshesInvisibleRelativeLocations; // 0x418
	TArray<FVector> HandsMeshesVisibleRelativeLocations; // 0x428
	FVector HandsMoveDistance; // 0x438
	float HandsMoveTime; // 0x444
	bool HatchRespondsToSpawns; // 0x448
	FName ActivationID; // 0x44c
	bool IsHatchActive; // 0x454
	FObjectMessagingDispatcher EventDispatcher; // 0x458
	UMaterialInstanceDynamic* GlowDynamicMaterialInstance; // 0x4f8
};

struct UMechanismAnimationEvent_SwingAudio {
	float Midpoint; // 0x60
	TScriptInterface<Class> SwingMechanismInterface; // 0x68
};

struct UComboBox {
	TArray<UObject*> Items; // 0x138
	DelegateProperty OnGenerateWidgetEvent; // 0x148
};

struct UForceFeedbackEffect {
	TArray<FForceFeedbackChannelDetails> ChannelDetails; // 0x28
	float Duration; // 0x38
};

struct USoakableComponent {
	float LingeringSoakedDuration; // 0xd0
	FStatus SoakedStatus; // 0xd8
};

struct UInterpTrackBoolProp {
	TArray<FBoolTrackKey> BoolTrack; // 0x70
	FName PropertyName; // 0x80
};

struct ABrush {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct ULevelStreamingAlwaysLoaded {
	UWorld* WorldAsset; // 0x28
	FName PackageNameToLoad; // 0x50
	TArray<FName> LODPackageNames; // 0x58
	FTransform LevelTransform; // 0x80
	char bShouldBeVisibleInEditor : 1; // 0xbc
	char Blocked : 1; // 0xbc
	char bShouldBeLoaded : 1; // 0xbc
	char bShouldBeVisible : 1; // 0xbc
	char bShouldBlockOnLoad : 1; // 0xbc
	int32_t LevelLODIndex; // 0xc0
	char bDisableDistanceStreaming : 1; // 0xc4
	char bDrawOnLevelStatusMap : 1; // 0xc4
	FLinearColor LevelColor; // 0xc8
	TArray<ALevelStreamingVolume*> EditorStreamingVolumes; // 0xd8
	float MinTimeBetweenVolumeUnloadRequests; // 0xe8
	TArray<FString> Keywords; // 0xf0
	FScriptMulticastDelegate OnLevelLoaded; // 0x100
	FScriptMulticastDelegate OnLevelUnloaded; // 0x110
	FScriptMulticastDelegate OnLevelShown; // 0x120
	FScriptMulticastDelegate OnLevelHidden; // 0x130
	ULevel* LoadedLevel; // 0x200
	ULevel* PendingUnloadLevel; // 0x208
};

struct UDescribableComponent {
	bool TooltipActiveOnBeginPlay; // 0x120
	FText DescribableTooltipText; // 0x128
	bool TooltipActive; // 0x160
};

struct UTaleUnloadSpireStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleQuestCargoRunContract {
	FScriptMulticastDelegate OnCompleted; // 0x38
	FScriptMulticastDelegate OnDelivered; // 0x48
	FScriptMulticastDelegate OnCollected; // 0x58
	TArray<FTaleQuestCargoRunContractItem> ItemsToCollect; // 0x68
	AActor* DeliverToNPC; // 0x88
	AActor* CollectFromNPC; // 0x90
};

struct UMaterialExpressionCosine {
	FExpressionInput Input; // 0x70
	float Period; // 0xa8
};

struct ATavernStrangersBarrel {
	UStaticMeshComponent* BarrelMeshComponent; // 0x3d0
};

struct UTestControllableIntentComponent {
	char AckToken; // 0xd8
	bool RequiresHandshake; // 0xd9
	float ServerIntent; // 0xdc
	float LocalIntent; // 0xe0
};

struct ADebugLandmarkLocation {
	float Radius; // 0x3d0
	float Height; // 0x3d4
	FVector Pos; // 0x3d8
};

struct ADoor {
	float AmountDoorOpens; // 0x400
	float DoorOpeningSpeed; // 0x404
	float DoorClosingSpeed; // 0x408
	USceneComponent* Root; // 0x410
	UStaticMeshComponent* DoorMesh; // 0x418
	TArray<FLandmarkReactionKeyFrame> LandmarkReactionsWhenDoorOpens; // 0x420
	TArray<FLandmarkReactionKeyFrame> LandmarkReactionsWhenDoorCloses; // 0x430
	ALandmarkReactionPlayer* LandmarkReactionPlayer; // 0x440
	UInteractableComponent* InteractionRegion; // 0x448
};

struct UTeleportLocationComponent {
	FTeleportLocation TeleportLocation; // 0x2b0
};

struct UShantyPuzzleInteractionZoneComponent {
	float SphereRadius; // 0x5a8
};

struct USeaIdValidationDataAsset {
	TArray<USeaId*> AllSeaIds; // 0x28
};

struct UWaterProperties {
	TArray<FWaterInformation> WaterInfo; // 0x28
};

struct ASharkActionStateCreatorDefinition {
	FAISpawnActionStateParams AISpawnParams; // 0x3d0
	FAISwimmingCreatureDeadActionStateParams AIDeadParams; // 0x3e0
};

struct AMysteriousNotesService {
	UMysteriousNoteSettings* CachedNoteSettings; // 0x3f8
	UWieldableMysteriousNoteDataAsset* WieldableNoteDataAsset; // 0x400
	UMysteriousNotesCompletionEventsModelDataAsset* CompletionEventsModelData; // 0x408
};

struct UStatusResponseForceFeedback {
	UForceFeedbackEffect* ForceFeedbackEffect; // 0x30
};

struct UAIOnDemandSpawner {
	bool HasSpawnerLevelEncounters; // 0x38
	FAISpawnTypeParamsCollection SpawnTypeParamsCollection; // 0x40
	UAIEncounterSettings* DefaultEncounterSettings; // 0x88
	UAISpawnWaveSequenceRankProgression* DefaultSpawnWaveProgression; // 0x90
	TArray<FAISpawnContextIdEncounterSettingsPair> SpawnContextSpecificEncounterSettings; // 0x98
	bool ShouldSpawnFacingRegionCentre; // 0xa8
	EAthenaAISpawnType DefaultSpawnType; // 0xa9
	UEnvQuery* FindSpawnPosQuery; // 0xb0
	EEnvQueryRunMode FindSpawnPosQueryRunMode; // 0xb8
	FName SpawnLocationType; // 0xbc
	int32_t MaxNumOfSpawnedPawns; // 0xc4
	int32_t PriorityForSpawnedPawns; // 0xc8
	TArray<FConditionalAISpawnOverride> SpawnOverrides; // 0xd0
	TArray<FAdditionalSpawnerBehaviour> AdditionalBehaviours; // 0xe0
	UAthenaAISettings* AthenaAISettings; // 0x360
};

struct UAthenaAnimationSittingDataAsset {
	TArray<FSeatAnimationDefinition> Animations; // 0x28
	UAnimationStateId* SittingStateId; // 0x38
};

struct UTaleQuestSpawnLootItemInClueSiteStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAthenaCharacterDodgeComponent {
	FAthenaCharacterDodgeParams Params; // 0xc8
	float ConsecutiveDodgeCountResetTimer; // 0xd8
	UCurveFloat* BunnyHoppingScalarCurve; // 0xe0
	AAthenaCharacter* Character; // 0xe8
};

struct UOnItemWieldedComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct URadialInputBinder {
	UInputComponent* InputComponent; // 0x28
};

struct UAIFormWithVFXComponent {
	UParticleSystem* ParticlesTemplate; // 0x138
	UParticleSystemComponent* ParticleSystemComponent; // 0x140
	float ParticleActivationDelay; // 0x148
	FTimerHandle ActivationTimerHandle; // 0x14c
};

struct ABP_FogBank_C {
	UAthenaPlayerZonePenetrationTrackerComponent* AthenaPlayerZonePenetrationTracker; // 0x538
};

struct URemoveGameEventExclusionZoneStep {
	URemoveGameEventExclusionZoneStepDesc* Desc; // 0x90
};

struct UStorageContainerDescSpawnData {
	UClass* ItemDesc; // 0x58
};

struct ABattleElevator {
	UInstancedNavMeshComponent* InstancedNavMeshComponent; // 0xad8
	TScriptInterface<Class> ExplosionScriptInterface; // 0xae0
	TScriptInterface<Class> SpectacleMechanismInterface; // 0xaf0
	ULocatorContainer* BattleElevatorLocators; // 0xb00
	UNamedPointsComponent* NamedPointsComponent; // 0xb08
	UDamageableComponent* DamageableComponent; // 0xb10
	TArray<USceneComponent*> ChainPivotComponents; // 0xb18
	TArray<FVector> ChainAnchorLocations; // 0xb28
	float OverrideTransitionPeriod; // 0xb50
	FName ExplosionNamedPointsGroupName; // 0xbe4
};

struct UCircleMapClueDestinationContainerComponent {
	UMapMarkId* MapMarkId; // 0xd8
	float MapMarkArea; // 0xe0
	float MapMarkScaleMin; // 0xe4
	float MapMarkScaleMax; // 0xe8
	float MapMarkNoiseModifier; // 0xec
	EBlendMode MapMarkBlendMode; // 0xf0
	UMapMarkId* DebugCrossId; // 0xf8
	bool ShowCluePositionOnMap; // 0x100
	TArray<FMapTextureRenderData> ClueRenderData; // 0x108
};

struct UTaleQuestParallelForeachStep {
	UTaleQuestParallelForeachStepDesc* Desc; // 0x90
	int32_t Count; // 0x98
	TArray<UTaleQuestStep*> Steps; // 0xa0
	TArray<UIteratorFrame*> Frames; // 0xb0
};

struct UResourceProviderComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTreasureMapDataAsset {
	UTexture* Texture; // 0x28
	UTexture* InventoryTexture; // 0x48
	FTreasureMapDataCaptureParams CaptureParams; // 0x68
};

struct UPlayerPermissionsComponent {
	bool AllowDebugMenuAccess; // 0xc8
	bool AllowDebugMenuButtonShortcutsAccess; // 0xc9
	bool AllowExecuteOnServer; // 0xca
	bool DisableWatermark; // 0xcb
};

struct UGetCurrentQuestInfoStepDesc {
	FQuestVariableInt CurrentQuestIndex; // 0x80
	FQuestVariableInt CurrentModuleIndex; // 0x90
	FQuestVariableInt LastCompletedModuleIndex; // 0xa0
	FQuestVariableName CurrentPageAuthorName; // 0xb0
};

struct UAISpawnOrCondition {
	TArray<UAISpawnOverrideCondition*> Conditions; // 0x30
};

struct ASkeletonThrone {
	USceneComponent* RootSceneComponent; // 0x3d8
	UStaticMeshComponent* MeshComponent; // 0x3e0
	UShapeComponent* EmoteCollisionComponent; // 0x3e8
	TArray<FName> EmoteNames; // 0x3f0
	FPlayerStat ThroneStat; // 0x400
	TArray<FLandmarkReactionKeyFrame> SatOnStatFiredReactions; // 0x408
	ALandmarkReactionPlayer* ReactionPlayer; // 0x418
};

struct UCrowdFollowingComponent {
	FVector CrowdAgentMoveDirection; // 0x2c0
	UCharacterMovementComponent* CharacterMovement; // 0x2d0
	FNavAvoidanceMask AvoidanceGroup; // 0x2d8
	FNavAvoidanceMask GroupsToAvoid; // 0x2dc
	FNavAvoidanceMask GroupsToIgnore; // 0x2e0
};

struct UPrebakedIslandAsset {
	TArray<FIsland> IslandEntries; // 0x28
	FVector2D WorldMapMin; // 0x38
	FVector2D WorldMapMax; // 0x40
};

struct UBTDecorator_LineOfSightToTarget {
	float Interval; // 0x68
	FBlackboardKeySelector TargetActorKey; // 0x70
	bool UseTargetPosition; // 0x98
	FBlackboardKeySelector TargetPositionKey; // 0xa0
	FVector OffsetToApplyToTargetPosition; // 0xc8
};

struct UBTTask_ReactToOwner {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UPocketWatchAnimationInstance {
	FRotator MinuteHandRotation; // 0x630
	FRotator HourHandRotation; // 0x63c
};

struct ABurrowCrack {
	USceneComponent* DefaultSceneComponent; // 0x3d0
	UDecalComponent* DecalComponent; // 0x3d8
	float FadeOutTimeSeconds; // 0x3e0
	bool HasFadeStarted; // 0x3e4
};

struct UCrewSessionConfig {
	TArray<FCrewSessionTemplate> SessionTemplates; // 0x28
};

struct UEnvQueryTest_GameplayTags {
	EGameplayContainerMatchType TagsToMatch; // 0x170
	FGameplayTagContainer GameplayTags; // 0x178
};

struct UTrackedOwnerComponent {
	ETrackedOwnerType TrackedOwnerType; // 0xd0
};

struct UEnvQueryGenerator_PathingGrid {
	FAIDataProviderBoolValue PathToItem; // 0xf8
	UNavigationQueryFilter* NavigationFilter; // 0x128
	FAIDataProviderFloatValue ScanRangeMultiplier; // 0x130
};

struct UIsEmissaryStatCondition {
	UCompany* RequiredEmissaryCompany; // 0x28
	bool RequiresMaxEmissaryLevel; // 0x30
};

struct UMaterialExpressionVertexNormalWS {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UTaleAggressiveGhostShipEncounterServiceDesc {
	UAggressiveGhostShipsEncounterParams* AggressiveGhostShipEncounterParams; // 0x28
};

struct UShantyUnlockDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct UBrushBuilder {
	FString BitmapFilename; // 0x28
	FString ToolTip; // 0x38
	char NotifyBadParams : 1; // 0x48
	TArray<FVector> Vertices; // 0x50
	TArray<FBuilderPoly> Polys; // 0x60
	FName Layer; // 0x70
	char MergeCoplanars : 1; // 0x78
};

struct UDestroySessionCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct USkeletalStashedMeshMemoryConstraintComponent {
	UMeshMemoryConstraintHandler* Handler; // 0x9a8
	TArray<FStringAssetReference> FallbackOverrideMaterials; // 0x9b0
	UMeshMemoryConstraintCategory* MeshFallbackCategory; // 0x9c0
	FStringAssetReference MeshReference; // 0x9c8
	int64_t CachedMeshResourceSize; // 0x9d8
	bool MemoryAccountedFor; // 0x9e0
	bool NeedMeshLoadOnServer; // 0x9e1
	UMeshMemoryConstraintBudget* BudgetToCountMemoryAgainstIfNoFallback; // 0x9e8
};

struct AAshenWindsSkull {
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7a0
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7a8
	UParticleSystemComponent* FlamethrowerParticleSystemComponent; // 0x7b0
	UParticleSystemComponent* FlamethrowerChargeParticleSystemComponent; // 0x7b8
	UMaterialAnimatorComponent* MaterialAnimatorComponent; // 0x7c0
	UAshenWindsFlamethrowerController* FlamethrowerController; // 0x7c8
	FItemUseSpeedParams ItemUseSpeedModifiers; // 0x7d0
	float ItemUseFOVBlendSpeed; // 0x7d8
	float ItemUseTargetFOV; // 0x7dc
	float HipfireEffectsDelayAmount; // 0x7e0
	float AimingDownSightsEffectsDelayAmount; // 0x7e4
	float StartFlamethrowerOnServerDelayLatencyCompensation; // 0x7e8
	float FlamethrowerParticleSystemMaxLength; // 0x7ec
	EVfxCustomLocalSpaceMode FlamethrowerParticleSystemCustomLocalSpaceMode; // 0x7f0
	FName OpenJawMaterialAnimationName; // 0x7f4
	FName CloseJawMaterialAnimationName; // 0x7fc
	FVector FlamethrowerParticleSystemThirdPersonAttachPoint; // 0x804
	FRotator FlamethrowerParticleSystemThirdPersonRotation; // 0x810
	FVector FlamethrowerParticleSystemFirstPersonAttachPoint; // 0x81c
	FRotator FlamethrowerParticleSystemFirstPersonRotation; // 0x828
	bool EnableCustomParticleSystemBelowWater; // 0x834
	UParticleSystem* AboveWaterParticleSystem; // 0x838
	UParticleSystem* BelowWaterParticleSystem; // 0x840
	bool EnableVisualFlamethrowerMissfiring; // 0x848
	TArray<FAshenWindsSkullMissfireParams> FlamethrowerMissfireParams; // 0x850
	UWwiseEvent* FlamethrowerLoopStartEvent; // 0x860
	UWwiseEvent* FlamethrowerLoopStopEvent; // 0x868
	FName FlamethrowerLoopChargeLevelRTPC; // 0x870
	FFloatRange FlamethrowerLoopChargeLevelRTPCRange; // 0x878
	UWwiseEvent* FlamethrowerActivatedEvent; // 0x888
	UWwiseEvent* FlamethrowerDeactivatedEvent; // 0x890
	UForceFeedbackEffect* UsingFlamethrowerForceFeedback; // 0x898
	APawn* Wielder; // 0x8a0
	TScriptInterface<Class> FlamethrowerChargeInterface; // 0x8a8
	UFlamethrowerChargeVisuals* FlamethrowerChargeVisuals; // 0x8b8
};

struct UCharacterHitReactionComponent {
	UCharacterHitReactionDamagerTypeToAnimTypeLayer* DamagerTypeToAnimTypeLayer; // 0x100
};

struct UOpenRadialAction {
	TArray<FContextAction> RadialContexts; // 0x30
	URadialCreationRuleAsset* CanExecuteRadial; // 0x40
};

struct AAggressiveGhostShipPoolResource {
	float DestroyDelay; // 0x3d0
	int32_t PortalPoolSize; // 0x3d4
	AAggressiveGhostShipPortal* PortalClass; // 0x3d8
};

struct UStorySpawnedActorsDataAsset {
	TArray<FStorySpawnedActorsList> StorySpawnedActorsList; // 0x28
};

struct ALandmarkReactionActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UAthenaAIAbilityParams {
	TArray<FAthenaAIControllerParamValue> NamedControllerParams; // 0x28
	EAIAbilityDamageIntervalCounterMode DamageIntervalCountingMode; // 0x38
	bool UseTimeBetweenAbility; // 0x39
	FAthenaAIAbilityPlayerBasedRanges ActivationTimerCooldown; // 0x40
	FAthenaAIAbilityPlayerBasedRanges TimeBetweenAbility; // 0x50
	bool UseDamageBetweenAbility; // 0x60
	FAthenaAIAbilityPlayerBasedRanges DamageBetweenAbility; // 0x68
	float AbilityRadius; // 0x78
	bool UseMinMaxAttackRange; // 0x7c
	FMinMaxAbilityRange MinMaxAttackRange; // 0x80
	TArray<FAIAbilityFollowUp> FollowUpAbilities; // 0x88
	float Weight; // 0x98
	FAIAbilityContinuousCooldownParameterData ContinuousCooldownAbilityParameters; // 0xa0
	UAthenaAIAbilityType* AIAbilityTypeClass; // 0xc0
};

struct UInterpTrackSound {
	TArray<FSoundTrackKey> Sounds; // 0x90
	char bPlayOnReverse : 1; // 0xa0
	char bContinueSoundOnMatineeEnd : 1; // 0xa0
	char bSuppressSubtitles : 1; // 0xa0
	char bTreatAsDialogue : 1; // 0xa0
	char bAttach : 1; // 0xa0
};

struct UStatusResponseScreenSpaceParticles {
	UObject* ParticleSystem; // 0x30
	bool DoesVFXTimeOut; // 0x38
};

struct AIslandSalvageSpawnerManager {
	FObjectMessagingDispatcher ObjectMessagingDispatcher; // 0x3e0
	TArray<USalvageItemSpawnComponent*> SalvageSpawnComponentsAwaitingRequests; // 0x480
	TMap<UIslandItemDataAsset*, FSpawnRequests> TypeMappedSalvageSpawnComponentRequests; // 0x490
	AIslandData* IslandData; // 0x4e0
	TArray<USalvageItemSpawnComponent*> IslandSalvageItemSpawnComponents; // 0x4f8
	TArray<FTypedIslandItemSpawnLocationData> IslandSalvageLocationData; // 0x508
};

struct UScrapeableComponent {
	float MinIntervalBetweenScrapeDamage; // 0xd0
	UScrapeableDamageDataAsset* ScrapeDamageSettings; // 0xd8
	FVector SafeZoneCenterDirection; // 0xe0
	float SafeZoneMaximumAngle; // 0xec
	UDamagerType* ScrapeDamagerType; // 0xf0
};

struct UPlayerMusicControllerParams {
	FName WorldRegionStateGroup; // 0x28
	TArray<FName> WorldRegionStateNames; // 0x30
	UWwiseEvent* PlayerOnIslandStart; // 0x40
	UWwiseEvent* PlayerOnIslandStop; // 0x48
	UWwiseEvent* PlayerAtSeaStart; // 0x50
	UWwiseEvent* PlayerAtSeaStop; // 0x58
	UWwiseEvent* PlayerInCaveStart; // 0x60
	UWwiseEvent* PlayerInCaveStop; // 0x68
	UWwiseEvent* PlayerUnderwaterStart; // 0x70
	UWwiseEvent* PlayerUnderwaterStop; // 0x78
	float FactorForSwitchingAtSeaMoodMusicOn; // 0x80
	FName PlayerHeightRtpc; // 0x84
	UWwiseEvent* PlayerSittingStart; // 0x90
	UWwiseEvent* PlayerSittingStop; // 0x98
	FName BoatSpeedRtpc; // 0xa0
	float BoatSpeedRtpcMin; // 0xa8
	float BoatSpeedRtpcMax; // 0xac
	float AtSeaAtSpeedStingCooldownMax; // 0xb0
	float AtSeaAtSpeedStingCooldownMin; // 0xb4
	UWwiseEvent* AtSeaAtSpeedPlay; // 0xb8
	float SailBillowStingCooldown; // 0xc0
	UWwiseEvent* SailBillowOneshotPlay; // 0xc8
	UWwiseEvent* SailBillowOneshotPlayMediumShip; // 0xd0
	UWwiseEvent* AtSeaWildHarpaPlay; // 0xd8
	UWwiseEvent* AtSeaWildHarpaStop; // 0xe0
	FName IslandRevealStateGroup; // 0xe8
	FName IslandRevealStateInitial; // 0xf0
	float SmallestCaveEnclosedRatio; // 0xf8
	float SmallestCaveSize; // 0xfc
	EPhysicalSurface PredominantCaveSurface; // 0x100
	float SkellyProximityDistance; // 0x104
	int32_t MinSkellies; // 0x108
	int32_t MaxSkellies; // 0x10c
	UWwiseEvent* SkeletonProximityMusicStart; // 0x110
	UWwiseEvent* SkeletonProximityMusicStop; // 0x118
	UWwiseEvent* SkeletonPursuitMusicStart; // 0x120
	UWwiseEvent* SkeletonPursuitMusicStop; // 0x128
	UWwiseEvent* OceanCrawlersPursuitMusicStart; // 0x130
	UWwiseEvent* OceanCrawlersPursuitMusicStop; // 0x138
	UWwiseEvent* PhantomsPursuitMusicStart; // 0x140
	UWwiseEvent* PhantomsPursuitMusicStop; // 0x148
	FName ThreatAmountRtpc; // 0x150
	UWwiseEvent* AncientSkellyMusicPlay; // 0x158
	UWwiseEvent* AncientSkellyMusicStop; // 0x160
	UWwiseEvent* AncientSkellyDespawned; // 0x168
	UWwiseEvent* AncientSkellyKilled; // 0x170
	FName BountyQuestProgressFactor; // 0x178
	UWwiseEvent* BountyQuestAnticipationStart; // 0x180
	UWwiseEvent* BountyQuestAnticipationStop; // 0x188
	UWwiseEvent* BountyQuestActionStart; // 0x190
	UWwiseEvent* BountyQuestActionStop; // 0x198
	float MinDistanceMaxVolumeCms; // 0x1a0
	float MaxDistanceMinVolumeCms; // 0x1a4
	FName BountyQuestDistanceRtpc; // 0x1a8
	float FactorForChangingBountyToActionState; // 0x1b0
	float CooldownForAnticipationMusicRetrigger; // 0x1b4
	UWwiseEvent* BountyFortAnticipationStart; // 0x1b8
	UWwiseEvent* BountyFortAnticipationStop; // 0x1c0
	UWwiseEvent* BountyFortAnticipationStopHighString; // 0x1c8
	UWwiseEvent* BountyFortActionStart; // 0x1d0
	UWwiseEvent* BountyFortActionStop; // 0x1d8
	float FactorForChangingFortToActionState; // 0x1e0
	FName BountyFortSkellyProximityRtpc; // 0x1e4
	float BountyFortSkellyProximityMax; // 0x1ec
	UWwiseEvent* BountyFortSkellyProximityClose; // 0x1f0
	FName GlobalMusicRtpc; // 0x1f8
	float GlobalMusicRtpcMax; // 0x200
	float GlobalMusicRtpcMin; // 0x204
	float ShipwreckProximityDistance; // 0x208
	UWwiseEvent* PlayerNearShipwreckStart; // 0x210
	UWwiseEvent* PlayerNearShipwreckStop; // 0x218
	UWwiseObjectPoolWrapper* SharkPoolForCollection; // 0x220
	float SharkProximity; // 0x228
	UWwiseEvent* PlaySharkProximity; // 0x230
	UWwiseEvent* StopSharkProximity; // 0x238
	UWwiseEvent* PlaySharkAttackOneShot; // 0x240
	FName SharkAttackStateGroupName; // 0x248
	FName SharkAttackStatePreAttack; // 0x250
	FName SharkAttackStatePostAttack; // 0x258
	float MaxSharkHeightDelta; // 0x260
	UWwiseEvent* ServerMigrationStart; // 0x268
	UWwiseEvent* ServerMigrationStop; // 0x270
	FName PotentialThreatFactorRtpc; // 0x278
	float PotentialThreatMinDistance; // 0x280
	float PotentialThreatMaxDistance; // 0x284
	UWwiseEvent* PlayEdgeOfTheWorldMusic; // 0x288
	UWwiseEvent* StopEdgeOfTheWorldMusic; // 0x290
	FName EdgeOfTheWorldProximityFactorRtpc; // 0x298
	float MaxDistanceToPlayEdgeOfTheWorldMusic; // 0x2a0
	float MinDistanceToPlayEdgeOfTheWorldMusic; // 0x2a4
	FName CompanyRegionStateGroup; // 0x2a8
	TArray<FName> CompanyRegionNames; // 0x2b0
	UWwiseEvent* CompanyMoodStart; // 0x2c0
	UWwiseEvent* CompanyMoodStop; // 0x2c8
	TArray<FKrakenMusicEvent> KrakenMusicEvents; // 0x2d0
	TArray<UWwiseEvent*> KrakenTentacleTakeHitEvents; // 0x2e0
	TArray<UWwiseEvent*> KrakenTentacleKilledEvents; // 0x2f0
	UWwiseEvent* KrakenHeadHitEvent; // 0x300
	FTinySharkMusicEvent TinySharkExperienceMusic; // 0x308
	TArray<UAIStrategyId*> TinySharkPursuitStrategies; // 0x318
	FName TinySharkAttackStateGroup; // 0x328
	FName TinySharkAttackState; // 0x330
	FName TinySharkCircleState; // 0x338
	float TinySharkEmergeHeight; // 0x340
	FName TinySharkSubmergedRtpc; // 0x344
	float SubmergeRtpcMin; // 0x34c
	float SubmergeRtpcMax; // 0x350
	float TinySharkHealthChangeAmoutForSting; // 0x354
	UWwiseEvent* TinySharkHitSting; // 0x358
	UWwiseEvent* TinySharkDeathSting; // 0x360
	UWwiseEvent* TinySharkSummonSting; // 0x368
	float TinySharkMusicStartDelay; // 0x370
	float TinySharkMusicProximity; // 0x374
	UWwiseEvent* TinySharkAttackStingStart; // 0x378
	UWwiseEvent* TinySharkAttackStingStop; // 0x380
	UWwiseEvent* SkellyShipEncounterStarted; // 0x388
	UWwiseEvent* SkellyShipEmergentEncounterStarted; // 0x390
	UWwiseEvent* SkellyShipEncounterFinished; // 0x398
	UWwiseEvent* SkellyShipEmergentEncounterFinished; // 0x3a0
	UWwiseEvent* SkellyShipEncounterFinishedAfterFinalWave; // 0x3a8
	UWwiseEvent* SkellyShipFinalWaveSunk; // 0x3b0
	FName SkellyShipProgressFactorRtpc; // 0x3b8
	UWwiseEvent* SkellyShipSpawned; // 0x3c0
	UWwiseEvent* FinalSkellyShipSpawned; // 0x3c8
	UWwiseEvent* SkellyShipSunk; // 0x3d0
	float SkellyShipMinProximity; // 0x3d8
	float SkellyShipMaxProximity; // 0x3dc
	FName SkellyProximityRtpc; // 0x3e0
	UWwiseEvent* PlayerInPuzzleVaultPlay; // 0x3e8
	UWwiseEvent* PlayerInPuzzleVaultStop; // 0x3f0
	UWwiseEvent* PuzzleVaultCompleteMusic; // 0x3f8
	UWwiseEvent* PuzzleVaultIncorrectMusic; // 0x400
	FName PuzzleVaultWaterFillRtpc; // 0x408
	UWwiseEvent* FishingMoodMusicPlay; // 0x410
	UWwiseEvent* FishingMoodMusicStop; // 0x418
	UWwiseEvent* FishingMoodMusicCaughtFish; // 0x420
	FName FishOnLineStateGroup; // 0x428
	FName FishNotOnLine; // 0x430
	FName FishOnLine; // 0x438
	float MaxDistanceOfSpyglassShipSting; // 0x440
	float MinDistanceOfSpyglassShipSting; // 0x444
	int32_t SpottedStingCooldownTime; // 0x448
	UWwiseEvent* SpyglassAIShipSting; // 0x450
	UWwiseEvent* SpyglassEmissaryShipSting; // 0x458
	float SpyglassShipAngleTolerance; // 0x460
	float SpyglassInitialAnimationTime; // 0x464
	float ExtraDistanceToAddToShipRay; // 0x468
	ECollisionChannel TraceChannel; // 0x46c
	FName SirenMusicUnderwaterStateGroup; // 0x470
	FName SirenMusicUnderwaterStateValue; // 0x478
	FName SirenMusicAboveWaterStateValue; // 0x480
};

struct UTaleQuestSpawnAIStepDesc {
	FQuestVariableAISpawner SpawnerAsset; // 0x130
	FQuestVariableAsset WaveSpawnLocation; // 0x140
	FQuestVariableActor WaveSpawnActorLocation; // 0x150
	FQuestVariableActor RegionSource; // 0x160
	AActor* MusicZone; // 0x170
	EAILifeTimePolicy AILifeTimePolicy; // 0x178
	EAISpawnerShutdownPolicy AISpawnerShutdownPolicy; // 0x179
};

struct UCharacterMeshBakeSpecification {
	bool StripTopLOD; // 0x28
	USkeletalMesh* CharacterMesh; // 0x30
	USkeletalMesh* BaseMeshReferenceSkeleton; // 0x38
	USkeletonsDataAsset* SourceSkeletons; // 0x40
	TArray<FName> SourceSkeletonNames; // 0x48
	TArray<float> SourceSkeletonWeights; // 0x58
	TArray<FBlendedSubMeshSpecification> BlendedSubMeshes; // 0x68
	TArray<USkeletalMesh*> UnblendedSubMeshes; // 0x78
	TArray<FIPGBlendShape> BlendShapes; // 0x88
};

struct UWwiseDDSEvent {
	TArray<uint32_t> DDSArgumentsGroupsIDs; // 0x50
};

struct UAimSensitivityComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AAIShipService {
	UAIShipServiceDataAsset* Params; // 0x3f0
	TArray<UAIShipEncounterDesc*> BattleEncounters; // 0x728
};

struct UBTDecorator_CanBlock {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UNavigationQueryFilter {
	TArray<FNavigationFilterArea> Areas; // 0x28
	FNavigationFilterFlags IncludeFlags; // 0x38
	FNavigationFilterFlags ExcludeFlags; // 0x3c
};

struct UAthenaAIRangeBasedAmmoDataAsset {
	TArray<FWeightedAmmoTypeRange> AmmoTypeRanges; // 0xd0
};

struct UFishSizeWeightsDataAsset {
	TArray<FFishSizeAndWeight> Data; // 0x28
};

struct UAddItemToCollectorsChestStepDesc {
	FQuestVariableClass ItemToStore; // 0x90
	bool TrackItem; // 0xa0
	bool MarkItemAsCritical; // 0xa1
	FText CriticalActorLostMessage; // 0xa8
};

struct UMicroTransactionBase {
	TArray<FPurchaseInfo> AvailableProducts; // 0x38
	FString LastError; // 0x48
	FString LastErrorSolution; // 0x58
};

struct UIntentBasedMechanismActionComponent {
	float InitialActionProgress; // 0x158
	float MaxPositiveMovementSpeedDueToPlayer; // 0x15c
	float MaxNegativeMovementSpeedDueToPlayer; // 0x160
	float PositiveAccelerationDueToPlayerIntent; // 0x164
	float NegativeAccelerationDueToPlayerIntent; // 0x168
	bool InvertControlls; // 0x16c
	bool EnableCircularActionProgress; // 0x16d
	bool GravityEnabled; // 0x16e
	float MaxNegativeMovementSpeedDueToGravity; // 0x170
	float NegativeAccelerationDueToGravity; // 0x174
	bool ProgressLockingEnabled; // 0x178
	bool LockProgressWhenPlayerIntentBecomesZero; // 0x179
	float ProgressLockValue; // 0x17c
	float UpperPlayerIntentUnlockThreshold; // 0x180
	float LowerPlayerIntentUnlockThreshold; // 0x184
	bool UseAutoUnlockTimer; // 0x188
	float TimeUntilAutoUnlock; // 0x18c
	FIntentPredictor ClientPrediction; // 0x190
	bool ResetToInitial; // 0x1ac
	bool ServerActionProgressIsLocked; // 0x1ad
	float ServerActionProgress; // 0x1b0
};

struct UCustomAnimationMontageIdListingDataAsset {
	TArray<FName> MontageIds; // 0x28
};

struct AServerMigrationSerialisationDetailsTestsMigratableDefaultComponentActor {
	UServerMigrationSerialisationDetailsTestsMigratableComponent* ComponentWithMigrationMarkup; // 0x3d0
};

struct UFireChargedAttackAIAbilityParams {
	TArray<FChargedAttackProjectileWeights> ProjectileParams; // 0xc8
};

struct UStorageContainerContentTypeSelector {
	FWeightedProbabilityRange NumSpawners; // 0x28
	int32_t MinDifferentSpawners; // 0x48
	int32_t MaxDifferentSpawners; // 0x4c
	UStorageContainerSpawnerCount* NumSpawnerRef; // 0x50
	TArray<FStorageContainerContentTypeSelectorEntry> ContentSpawners; // 0x58
	UStorageContainerContentSpawner* DebugSpawner; // 0x68
	UStorageContainerContentTypeSelectorEntries* SelectorEntries; // 0x70
	TArray<UStorageContainerSpecialTypeSelectorEntries*> SpecialEntries; // 0x78
	FSpawnerTypeMappings SpawnerTypeMappings; // 0x88
};

struct UAimOffsetBlendSpace {
	EBlendSpaceAxis AxisToScaleAnimation; // 0x108
};

struct UPlayerOceanAudioComponent {
	UWwiseEvent* WaterAudioEvent; // 0x2b0
	UWwiseEvent* WaterAudioStopEvent; // 0x2b8
	UWwiseEvent* WaterEmergeAudioEvent; // 0x2c0
	UWwiseEvent* WaterSubmergeAudioEvent; // 0x2c8
	FDeepSeaRegionAmbienceAudio DeepSeaRegionAmbienceAudio; // 0x2d0
	FName ShorelineRtpc; // 0x2e8
	FName StateUnderwater; // 0x2f0
	FName ChoppinessRtpc; // 0x2f8
	FName CoastlineStormynessRtpc; // 0x300
	float MaxValidDistanceBetweenCoastAndInnerSpline; // 0x308
	float MaxCoastAttenuation; // 0x30c
	float MaxDistanceForAccurateSplineCheck; // 0x310
	FName SuperheatedWaterStateGroup; // 0x314
	FName SwitchSuperheatedWaterOff; // 0x31c
	FName SwitchSuperheatedWaterOn; // 0x324
	float MinStormDistCms; // 0x32c
	float MaxStormDistCms; // 0x330
	AAthenaPlayerCharacter* PlayerCharacter; // 0x358
};

struct UParticleModuleVectorFieldGlobal {
	char bOverrideGlobalVectorFieldTightness : 1; // 0x50
	float GlobalVectorFieldScale; // 0x54
	float GlobalVectorFieldTightness; // 0x58
};

struct AShroudBreakerProxy {
	UShroudBreakerComponent* ShroudBreakerComponent; // 0x790
	UItemProxyShipTrackerComponent* ItemProxyShipTrackerComponent; // 0x798
	UItemProxyWatercraftTrackerComponent* ItemProxyWatercraftTrackerComponent; // 0x7a0
	UInteractableComponent* InteractableComponent; // 0x7a8
};

struct UTaleQuestAddTornMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AProgressShipSpawnLocation {
	TArray<AShipSpawnLocation*> LinkedShipSpawnLocations; // 0x3d0
	TArray<ASpawnLocation*> AssociatedSpawnLocations; // 0x3e0
	UShipSize* ShipSize; // 0x3f0
	FString Description; // 0x3f8
	UBoxComponent* BoxComponent; // 0x408
};

struct UStatusResponseAsset {
	FText HighFrequencyTriggerStatusHelper; // 0x28
	TArray<UStatusBase*> TriggerStatus; // 0x60
	TArray<UStatusResponse*> Responses; // 0x70
};

struct UDistanceJointComponent {
	float MinDistance; // 0x138
	float MaxDistance; // 0x13c
	float SpringStiffness; // 0x140
	float SpringDamping; // 0x144
	bool ApplyAsSpring; // 0x148
	bool EnforceMinDistance; // 0x149
	bool EnforceMaxDistance; // 0x14a
};

struct UStatConditionObjectTargetSelector {
	EStatConditionTarget Target; // 0x28
};

struct UFishSpawnParamsDataAsset {
	EFishSpawnTimeOfDay TimeOfDay; // 0x28
	bool InPool; // 0x29
	bool CloseToActiveFortOrSkellyShip; // 0x2a
	bool InStorm; // 0x2b
	bool CloseToShipwreck; // 0x2c
	USeaId* Sea; // 0x30
	UVoyageLocationOnlyNamedIslandListDataAsset* Islands; // 0x38
	EBaitType BaitType; // 0x40
	float CatchWeight; // 0x44
	FName FishName; // 0x48
	TArray<FFishSizeAndType> FishTypes; // 0x50
	UFishSizeWeightsDataAsset* SizeWeights; // 0x60
};

struct ALandmarkSphere {
	UShapeComponent* DefaultShape; // 0x658
};

struct UDeviceProfileManager {
	TArray<UObject*> Profiles; // 0x28
};

struct APhysicsConstraintActor {
	UPhysicsConstraintComponent* ConstraintComp; // 0x3d0
	AActor* ConstraintActor1; // 0x3d8
	AActor* ConstraintActor2; // 0x3e0
	char bDisableCollision : 1; // 0x3e8
};

struct UInterpTrackInstParticleReplay {
	float LastUpdatePosition; // 0x28
};

struct AMultiCrewSkeletonThrone {
	USceneComponent* RootSceneComponent; // 0x3d8
	UStaticMeshComponent* MeshComponent; // 0x3e0
	UShapeComponent* EmoteCollisionComponent; // 0x3e8
	TArray<FName> EmoteNames; // 0x3f0
	FPlayerStat ThroneStat; // 0x400
	TArray<FLandmarkReactionKeyFrame> SatOnStatFiredReactions; // 0x408
	ALandmarkReactionPlayer* ReactionPlayer; // 0x418
};

struct UTaleQuestLanternService {
	UTaleQuestToolServiceDesc* ServiceDesc; // 0x60
	TArray<UItemDesc*> WieldableDescs; // 0x68
};

struct UHealthStageHandlerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMaterialExpressionDesaturation {
	FExpressionInput Input; // 0x70
	FExpressionInput Fraction; // 0xa8
	FLinearColor LuminanceFactors; // 0xe0
};

struct UCustomVaultService {
	UWorld* World; // 0x30
	FGuid CustomVaultServiceId; // 0x38
};

struct UBTService_DoesEQSQuerySucceed {
	bool OverrideQueryTemplateWithBlackboardValue; // 0x98
	FBlackboardKeySelector OverrideEQSKey; // 0xa0
	UEnvQuery* QueryTemplate; // 0xc8
	TArray<FEnvNamedValue> QueryParams; // 0xd0
	EEnvQueryRunMode RunMode; // 0xe0
	bool ThrottleQueryTimePerFrame; // 0xe1
	float MaxSecondsToSpendOnQueryPerFrame; // 0xe4
};

struct USpringArmComponent {
	float TargetArmLength; // 0x2b0
	FVector SocketOffset; // 0x2b4
	FVector TargetOffset; // 0x2c0
	float ProbeSize; // 0x2cc
	ECollisionChannel ProbeChannel; // 0x2d0
	char bDoCollisionTest : 1; // 0x2d4
	char bUsePawnControlRotation : 1; // 0x2d4
	char bInheritPitch : 1; // 0x2d4
	char bInheritYaw : 1; // 0x2d4
	char bInheritRoll : 1; // 0x2d4
	char bEnableCameraLag : 1; // 0x2d4
	char bEnableCameraRotationLag : 1; // 0x2d4
	char bUseCameraLagSubstepping : 1; // 0x2d4
	char bDrawDebugLagMarkers : 1; // 0x2d5
	float CameraLagSpeed; // 0x2d8
	float CameraRotationLagSpeed; // 0x2dc
	float CameraLagMaxTimeStep; // 0x2e0
	float CameraLagMaxDistance; // 0x2e4
};

struct UMovementComponent {
	USceneComponent* UpdatedComponent; // 0xc8
	UPrimitiveComponent* UpdatedPrimitive; // 0xd0
	FVector Velocity; // 0xdc
	char bConstrainToPlane : 1; // 0xe8
	char bSnapToPlaneAtStart : 1; // 0xe8
	EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0xec
	FVector PlaneConstraintNormal; // 0xf0
	FVector PlaneConstraintOrigin; // 0xfc
	char bUpdateOnlyIfRendered : 1; // 0x108
	char bAutoUpdateTickRegistration : 1; // 0x108
	char bAutoRegisterUpdatedComponent : 1; // 0x108
};

struct UMeshMemoryConstraintScoringPlayerView {
	FName ScoringName; // 0x28
	float ScoringFactor; // 0x30
};

struct UUserSettingsMapMarkProviderComponent {
	TArray<FUserSettingsMapMarkDefinition> MarkMappings; // 0xd0
};

struct UCutscenePoolTypeExhaustible {
	bool DialogueSelectedRandomly; // 0x28
	TArray<int32_t> AvailableIndices; // 0x30
	TArray<int32_t> OriginalIndices; // 0x48
};

struct AOceanCrawlerAICharacter {
	UHealthGemComponent* HealthGemComponent; // 0x12c0
	UBuffReceiverComponent* BuffReceiver; // 0x12c8
	EOceanCrawlerAIType OceanCrawlerType; // 0x12d0
	UCustomAnimationMontageComponent* MontageComponent; // 0x12d8
	UAnimationServerData* OceanCrawlerAnimationServerData; // 0x12e0
	float StaticCollisionRampAngleLimit; // 0x12e8
	bool ShouldPlayersInterruptBullRush; // 0x12ec
	bool SporeBreathActive; // 0x12ed
};

struct UMaterialExpressionSine {
	FExpressionInput Input; // 0x70
	float Period; // 0xa8
};

struct USlateBrushAsset {
	FSlateBrush Brush; // 0x28
};

struct UActorPhasingComponent {
	AActor* ActorToHide; // 0xc8
};

struct UBTTask_SailShipBesideTarget {
	FTrackingNoiseGenerator TrackingNoiseGenerator; // 0xa8
};

struct ASceneDialogueCoordinator {
	TArray<AActor*> LinkedActors; // 0x3e0
	USceneDialogueData* DialogueData; // 0x3f0
	TArray<FText> LocalisableNames; // 0x3f8
	float DefaultMessageDistance; // 0x408
};

struct UMovieSceneAkAudioEventTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
	char bIsAMasterTrack : 1; // 0x98
};

struct UTaleQuestGetTinySharkPawn {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UStandardSailDynamicsDesc {
	UCurveFloat* SailSetFractionToSailForceAmp; // 0x28
	FStandardSailDynamicsParameters Parameters; // 0x30
};

struct UMultipleContextsRadialContext {
	TArray<URadialContextBase*> RadialContexts; // 0x28
};

struct UTaleQuestMakeStructStepDesc {
	UScriptStruct* Struct; // 0x80
	TMap<FName, FName> PropertyMappings; // 0x88
};

struct UBTTask_ClearPerceptualData {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct AGameplayEventSignal {
	ANetProxy* ProxyClass; // 0x3d8
	FName NexProxyFeatureToggle; // 0x3e0
	float TimeForSignalToActivateInSeconds; // 0x3e8
	float TimeForSignalToDeactivateInSeconds; // 0x3ec
	float TimeForAtmosphericPressureZoneToActivateInSeconds; // 0x3f0
	UAtmosphericPressureZoneComponent* AtmosphericPressureZoneComponent; // 0x3f8
	ULightingZoneComponent* LightingZoneComponent; // 0x400
	URotateMeshToActorComponent* RotateMeshToActorComponent; // 0x408
	UMeshComponent* SignalMesh; // 0x410
	USceneComponent* Root; // 0x418
	UMaterialInstanceDynamic* SignalMaterial; // 0x420
	EGameplayEventSignalType EventType; // 0x428
	ENetworkRegion OwningNetworkRegion; // 0x490
};

struct UIslandTypeWeightsDataAsset {
	TArray<FIslandTypeWeights> IslandTypeWeightsForDifficultyRanks; // 0x28
};

struct UTaleQuestGetTinySharkExperienceParticipatingCrews {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UNavigationInvokerComponent {
	float TileGenerationRadius; // 0xc8
	float TileRemovalRadius; // 0xcc
};

struct UCosmeticVfxComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct ASplineMeshActor {
	USplineMeshComponent* SplineMeshComponent; // 0x3d0
};

struct UServerMigrationSerialisationDetailsTestsPropertyMarkup {
	int32_t Int32NoMarkup; // 0x28
	bool BoolWithMigrationMarkup; // 0x2c
	FString StringWithSaveGameMarkup; // 0x30
	float FloatWithMigrationAndReplicationMarkup; // 0x40
};

struct UNPCDialogOptionFireTutorialEvent {
	ETutorialDialogStep TutorialStep; // 0x80
	FText Text; // 0x88
	bool CloseOnExectuted; // 0xc0
	int32_t LinkedDialog; // 0xc4
	bool RelevantOnServer; // 0xc8
};

struct UMountedWeaponAimAndFireInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UNavMovementComponent {
	FNavAgentProperties NavAgentProps; // 0x110
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x140
	FMovementProperties MovementState; // 0x144
	bool UseDefaultNavWalkingSearchRadiusScale; // 0x150
	bool UseDefaultNavWalkingSearchHeightScale; // 0x151
};

struct UInterpToMovementComponent {
	float Duration; // 0x110
	char bPauseOnImpact : 1; // 0x114
	EInterpToBehaviourType BehaviourType; // 0x118
	char bForceSubStepping : 1; // 0x11c
	FScriptMulticastDelegate OnInterpToReverse; // 0x120
	FScriptMulticastDelegate OnInterpToStop; // 0x130
	FScriptMulticastDelegate OnWaitBeginDelegate; // 0x140
	FScriptMulticastDelegate OnWaitEndDelegate; // 0x150
	FScriptMulticastDelegate OnResetDelegate; // 0x160
	float MaxSimulationTimeStep; // 0x170
	int32_t MaxSimulationIterations; // 0x174
	TArray<FInterpControlPoint> ControlPoints; // 0x178
};

struct UInstrumentItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct URepairShipPartStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UEelSlapAIAbilityParams {
	TArray<FMeleeAttackIdWeights> MeleeAttacks; // 0xc8
};

struct UFaunaAIContollerParamsDataAsset {
	FWeightedProbabilityRange Courage; // 0x100
	TArray<FCarriedItemThreatOverride> CarriedItemThreatOverrides; // 0x120
	bool ThreatenedBySightOfCarrier; // 0x130
	TArray<FHearingThreat> KnownHearingDangers; // 0x138
	float CarrierHearingThreatSpeedThreshold; // 0x148
	float DamageThreat; // 0x14c
	UCurveFloat* CharacterDistanceToDangerRatingCurve; // 0x150
	UCurveFloat* DangerRatingToAgitationDurationCurve; // 0x158
	float TimeToBecomeAgitatedMin; // 0x160
	float TimeToBecomeAgitatedMax; // 0x164
	float AgitationDurationVariance; // 0x168
	int32_t AlertThreshold; // 0x16c
	int32_t FleeThreshold; // 0x170
	float TimeToBecomeCalm; // 0x174
	float CalmCooldownTime; // 0x178
	float MaxDistanceFromLeaderForIdle; // 0x17c
	UCurveFloat* DistanceToLeaderPatrolChanceCurve; // 0x180
};

struct AMockMerchantCrateItemProxy {
	URewindComponent* RewindComponent; // 0x7b8
	TScriptInterface<Class> MountpointInterface; // 0x7c0
	UWwiseEvent* FullGroundImpactSfx; // 0x7d0
};

struct AInteractiveFoliageActor {
	UCapsuleComponent* CapsuleComponent; // 0x3e0
	FVector TouchingActorEntryPosition; // 0x3e8
	FVector FoliageVelocity; // 0x3f4
	FVector FoliageForce; // 0x400
	FVector FoliagePosition; // 0x40c
	float FoliageDamageImpulseScale; // 0x418
	float FoliageTouchImpulseScale; // 0x41c
	float FoliageStiffness; // 0x420
	float FoliageStiffnessQuadratic; // 0x424
	float FoliageDamping; // 0x428
	float MaxDamageImpulse; // 0x42c
	float MaxTouchImpulse; // 0x430
	float MaxForce; // 0x434
	float Mass; // 0x438
};

struct UMovieSceneComponentMaterialTrack {
	int32_t MaterialIndex; // 0x98
};

struct UBeckonComponent {
	FString NPCGroup; // 0xc8
	UAnimMontage* OngoingBeckonGestureAnimMontage; // 0x130
	UWwiseEvent* OngoingBeckonGestureAudio; // 0x138
};

struct UBTTask_RotatePetToFaceBBEntryWithTime {
	float Delay; // 0x90
	float RotationTime; // 0x94
};

struct UKrakenParamsDataAsset {
	FKrakenParams Params; // 0x28
};

struct UCharacterHitReactionDamagerTypeToAnimTypeLayer {
	TArray<FCharacterHitReactionDamagerTypeToAnimTypePair> DamagerTypeToAnimTypePairs; // 0x28
};

struct UStatusResponseCameraShake {
	UCameraShake* CameraShake; // 0x30
	float InnerRadius; // 0x38
	float OuterRadius; // 0x3c
	float Falloff; // 0x40
	bool OrientShakeTowardsEpicenter; // 0x44
	bool ShouldBlendOut; // 0x45
};

struct UMaterialExpressionAtmosphericFogColor {
	FExpressionInput WorldPosition; // 0x70
};

struct ASunkenCurseArtefact {
	FVector OffsetFromOrigin; // 0x568
	FPlayerStat DefeatedStat; // 0x574
	FColor ArtefactColour; // 0x578
	UStaticMeshComponent* StaticMeshComponent; // 0x580
};

struct ACutSceneActor {
	USceneComponent* DefaultSceneRoot; // 0x3d8
	UCutSceneSubtitlesComponent* CutSceneSubtitlesComponent; // 0x3e0
	double StartTimeInSeconds; // 0x3e8
	bool CutsceneActivated; // 0x3f0
	TArray<AActor*> TargetActors; // 0x3f8
	FName AnimationNameToPlay; // 0x408
	UMusicZoneComponent* LocalMusicZone; // 0x410
	APlaceableReaction* PlaceableReaction; // 0x418
	USceneDialogueData* DialogueData; // 0x420
	TArray<FText> LocalisableNames; // 0x428
};

struct UDeliverableRedirectionBootyContext {
	EBootyTypes BootyType; // 0x28
};

struct USpawnPhasedActorStepDesc {
	FName SocketName; // 0x80
	UClass* Actor; // 0x88
	FQuestVariableActor LocationVar; // 0xa8
	FQuestVariableActor ActorVar; // 0xb8
	bool bAttachToSocket; // 0xc8
};

struct UShovelSurfaceFxDataAsset {
	TArray<FDigSurfaceTypeParams> SurfaceParams; // 0x28
};

struct UIsPlayingOnCustomServerNPCDialogConditional {
	bool ConditionalExpected; // 0x28
};

struct UDestructibleComponent {
	char bFractureEffectOverride : 1; // 0x6c0
	TArray<FFractureEffect> FractureEffects; // 0x6c8
	bool bEnableHardSleeping; // 0x6d8
	float LargeChunkThreshold; // 0x6dc
	FScriptMulticastDelegate OnComponentFracture; // 0x6f0
};

struct USirenTeleportAIAbilityParams {
	UEnvQuery* QueryTemplate; // 0xc8
	float MinDistance; // 0xd0
	float MaxDistance; // 0xd4
	bool MaintainRotation; // 0xd8
	bool UseResurfaceDelay; // 0xd9
	FAthenaAIAbilityPlayerBasedRanges ResurfaceDelay; // 0xe0
};

struct AStoryService {
	TArray<FStoryInfo> Stories; // 0x3f8
	TArray<FStoryInfo> ActiveStories; // 0x408
};

struct UMaterialExpressionDynamicParameter {
	TArray<FString> ParamNames; // 0x70
	FLinearColor DefaultValue; // 0x80
};

struct UWasProjectileFiredFromTypeOfActorStatCondition {
	EProjectileFiredFrom ProjectileFiredFromType; // 0x30
};

struct UConditionalNPCDialogServiceSettingsAsset {
	TArray<FNPCDialogOverrideTypeWithConditionalsUnit> NPCDialogOverrides; // 0x28
};

struct UParticleModuleTypeDataGpu {
	FGPUSpriteEmitterInfo EmitterInfo; // 0x50
	FGPUSpriteResourceData ResourceData; // 0x2f0
	float CameraMotionBlurAmount; // 0xcf0
	char bClearExistingParticlesOnInit : 1; // 0xcf4
	EParticleAlphaThresholdLevel AlphaCullingAggressiveness; // 0xcf8
	char bOverrideAlphaThreshold : 1; // 0xcfc
	float OverriddenAlphaThreshold; // 0xd00
	EInteractionWithKillPlane InteractionWithKillPlane; // 0xd04
	EKillPlaneKillPointLocation KillPlanePointLocation; // 0xd05
	float FadingTimeWhenKilled; // 0xd08
};

struct ACapstanArm {
	UStaticMeshComponent* MeshComponent; // 0x510
	UControllableIntentComponent* IntentComponent; // 0x518
	URepairableComponent* RepairableComponent; // 0x520
	UStaticMesh* IntactHandleMesh; // 0x528
	UStaticMesh* BrokenHandleMesh; // 0x530
	UStaticMesh* RepairedHandleMesh; // 0x538
};

struct UVoteAudioComponent {
	UWwiseEvent* VoteCastAudioEvent; // 0xd0
	UWwiseEvent* VoteRemovedAudioEvent; // 0xd8
	UWwiseObjectPoolWrapper* AudioPool; // 0xe0
};

struct AMechanism {
	TArray<FMechanismBinding> Bindings; // 0x3e0
	FScriptMulticastDelegate OnMechanismResetDelegate; // 0x3f0
};

struct URadialAction {
	UNotificationInputId* InputID; // 0x28
};

struct UNPCDialogOptionGiveClue {
	FText Text; // 0x80
	int32_t LinkedDialog; // 0xb8
};

struct AIntentBasedContinuousAnimatedMechanismAction {
	UIntentBasedMechanismActionComponent* IntentBasedMechanismActionComponent; // 0xa20
};

struct UAnimNotify_SwitchCosmeticItemAttachment {
	EWieldAnimationLocation PreviousLocation; // 0x38
	EWieldAnimationLocation NewLocation; // 0x39
};

struct UNPCDialogHeaderByCondition {
	TArray<FNPCDialogHeaderByConditionText> Text; // 0x28
	FText DefaultText; // 0x38
};

struct UAISenseConfig {
	float MaxAge; // 0x28
	char bStartsEnabled : 1; // 0x2c
};

struct UAthenaLoadingScreenParams {
	FStringAssetReference BootLoadingScreen; // 0x38
	FStringAssetReference TeleportLoadingScreen; // 0x48
	FStringAssetReference AdventureLoadingScreens; // 0x58
	FStringAssetReference ArenaLoadingScreens; // 0x68
};

struct USimpleLeakerComponent {
	UParticleSystem* ParticleSystem_WaterLeakAboveWater; // 0x2b8
	UParticleSystem* ParticleSystem_WaterLeakBelowWater; // 0x2c0
	UParticleSystem* ParticleSystem_RepairLeakAboveWater; // 0x2c8
	UParticleSystem* ParticleSystem_RepairLeakBelowWater; // 0x2d0
	UWwiseEvent* WaterLeakSfx_Play; // 0x2d8
	UWwiseEvent* WaterLeakSfx_Stop; // 0x2e0
	UWwiseEvent* WaterLeakRepairSfx_Play; // 0x2e8
	UWwiseEvent* WaterLeakRepairSfx_Stop; // 0x2f0
	FName WaterLeakUnderwaterSwitchGroup; // 0x2f8
	FName WaterLeakUnderwaterSwitchDefaultAboveWater; // 0x300
	FName WaterLeakUnderwaterSwitchUnderwater; // 0x308
	float WaterLeakFadeTime; // 0x310
	FName WaterLeakEmitterName; // 0x314
	UWwiseObjectPoolWrapper* WaterLeakWisePool; // 0x320
	TArray<FLeak> Leaks; // 0x328
};

struct UMaterialExpressionBreakMaterialAttributes {
	FExpressionInput Struct; // 0x70
	FMaterialAttributesInput MaterialAttributes; // 0xa8
};

struct UParticleModuleLocationEmitter {
	FName EmitterName; // 0x50
	ELocationEmitterSelectionMethod SelectionMethod; // 0x58
	char InheritSourceVelocity : 1; // 0x5c
	FRawDistributionFloat InheritSourceVelocityScaleDistribution; // 0x60
	char bInheritSourceRotation : 1; // 0x98
	float InheritSourceRotationScale; // 0x9c
};

struct URatManagerComponent {
	URatManagerComponentDataAsset* DataAsset; // 0x148
};

struct UAthenaCharacterMovementSettings {
	FNetPositionErrorTolerance StandardError; // 0x28
	FNetPositionErrorTolerance SwimmingError; // 0x30
	float SwimmingClientTrustThreshold; // 0x38
	float MaxSwimmingTimeStep; // 0x3c
	int32_t MaxSwimmingIterations; // 0x40
	float RebaseToServerErrorSqrDist; // 0x44
	float OnlyInterpolationAfterSqrDist; // 0x48
	float NoVisualUpdateAfterSqrDist; // 0x4c
	float TimeBetweenPlayerDistanceChecks; // 0x50
	float TimeToSimulateNewCharacters; // 0x54
};

struct ACoherentUIGTInputActor {
	FScriptMulticastDelegate OnCoherentUIGTInputActorMouseButtonDown; // 0x3d0
	FScriptMulticastDelegate OnCoherentUIGTInputActorMouseButtonUp; // 0x3e0
	FScriptMulticastDelegate OnCoherentUIGTInputActorKeyDown; // 0x3f0
	FScriptMulticastDelegate OnCoherentUIGTInputActorKeyUp; // 0x400
};

struct UStallDetector {
	FScriptMulticastDelegate Callback; // 0x30
};

struct UBTDecorator_PetFoodSourceAvailable {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UViewport {
	FLinearColor BackgroundColor; // 0x150
};

struct UQuestBootyItemPopUpAsset {
	TArray<FQuestBootyItemPopUpEntry> PopUpDescEntries; // 0x28
};

struct UWaitForNPCDialogOptionEventStepDesc {
	FName EventName; // 0x80
	FQuestVariableActor ActorVar; // 0x88
};

struct UNPCDialogAndExpression {
	UNPCDialogExpression* Left; // 0x28
	UNPCDialogExpression* Right; // 0x30
};

struct ULightingZoneComponent {
	FLightingZoneParameters LightingZoneParameters; // 0x2b8
};

struct UIngestedByKrakenInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UPopUpNotificationComponent {
	TArray<URewardPopUpNotificationDataAsset*> RewardPopUpNotifications; // 0xc8
	TArray<UDeferralReasonPopUpNotificationDataAsset*> DeferralReasonPopUpNotifications; // 0xd8
	TArray<UCampaignPopUpNotificationDataAsset*> CampaignPopUpNotifications; // 0xe8
	UPopUpMessageDesc* PeriodicObjectiveCompletePopUp; // 0xf8
	UPopUpMessageDesc* PeriodicObjectiveIncompletePopUp; // 0x100
	UPopUpMessageDesc* NPCOnBeachFlowPopUpNoTaleCheckpointVoyage; // 0x108
	UPopUpMessageDesc* NPCOnBeachFlowPopUpHasTaleCheckpointVoyage; // 0x110
	UCrewNotificationSettings* CrewNotificationDataAsset; // 0x118
	FEmissaryNotificationState EmissaryState; // 0x120
	UPopUpMessageDesc* NewTitlesAvailableToBuyPopUp; // 0x130
	UPrioritisedPromptsManager* PrioritisedPrompts; // 0x138
	UEmissaryLevelSettingsAsset* EmissaryLevelSettings; // 0x140
};

struct UTaleQuestBranchStep {
	UTaleQuestBranchStepDesc* Desc; // 0x90
	UTaleQuestStep* Step; // 0x98
};

struct UTelemetryProgressStep {
	UTelemetryProgressStepDesc* StepDesc; // 0x90
};

struct ALavaZone {
	FWeightedProbabilityRangeOfRanges TimeBetweenActivations; // 0x3d0
	FWeightedProbabilityRangeOfRanges ActiveDuration; // 0x400
	UPhysicalMaterial* LavaMaterial; // 0x430
	TArray<AActor*> ActorsInZone; // 0x438
	bool Active; // 0x448
	bool InitializeFromGlobalState; // 0x449
	bool SelfActivating; // 0x44a
	TScriptInterface<Class> MaterialZone; // 0x450
	TScriptInterface<Class> LocalPlayerDispatcher; // 0x460
};

struct UStatusResponseApplyOneShotStatus {
	FStatus StatusToApply; // 0x30
};

struct UBTService_SetBoolBlackboardValueTrueWhileRelevant {
	FBlackboardKeySelector BoolValueKey; // 0x70
};

struct ACargoRunCrate {
	UCargoRunCrateComponent* CargoRunCrateComponent; // 0x7c0
};

struct UHarpoonLauncherVFXDataAsset {
	UObject* MuzzleFlashVfxFirstPerson; // 0x28
	UObject* MuzzleFlashVfxThirdPerson; // 0x30
};

struct UConfigurableBuryableItemComponent {
	bool NotBuryable; // 0xd0
	bool DoNotMakeXMarkWhenBuried; // 0xd1
	bool DoNotNotifyAndMigrateWithCrew; // 0xd2
};

struct USpawnPhasedActorFromInputPinStepDesc {
	FQuestVariableActorAssetType PhasedActorType; // 0xd0
};

struct UNPCDialogOptionRefillTankard {
	FText Text; // 0x80
	int32_t LinkedDialog; // 0xb8
};

struct USpawnShipwreckTaleStepDesc {
	FQuestVariableShipwreck SpawnedShipwreck; // 0x80
	FQuestVariableClass CustomWreckType; // 0x90
	FQuestVariableVector CustomWreckLocation; // 0xa0
	FQuestVariableRotator CustomWreckRotation; // 0xb0
	FQuestVariableText CustomWreckVesselName; // 0xc0
};

struct UClueSiteTypeToMapMarkIdDataAsset {
	TArray<FClueSiteTypeToMarkId> ClueSiteTypeToMarkIdMap; // 0x28
};

struct UTaleQuestMultiTargetCompassRemoveTrackedLocationStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UGlitterBeardUnlockVFXCoordinatorComponent {
	FActorComponentSelector TreeActor; // 0xc8
	UMaterialInstanceDynamic* TreeMaterialInstanceDynamic; // 0xd8
	float TreeBlendTime; // 0xe0
};

struct UPirateLegendSectionBundle {
	FName FeatureName; // 0x28
	TArray<FPLSectionBundleEntry> Entries; // 0x30
};

struct AAudioEventToComponentMap {
	UAudioEventToComponentMapComponent* AudioEventToComponentMapComponent; // 0x3d0
};

struct UNPCDialogOptionGiveItem {
	FText Text; // 0x80
	UItemDesc* ItemClassToBeGiven; // 0xb8
	int32_t LinkedDialog; // 0xc0
};

struct UCutSceneSubtitlesComponent {
	float SubtitleSphereRadiusInCm; // 0xd0
	bool CanDrawDebugSubtitleRadius; // 0xd4
	FVector SubtitleRadiusOrigin; // 0xd8
	float SubtitleSphereRadiusInCmSqr; // 0xfc
};

struct ANote {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct USeaFortsService {
	UWorld* World; // 0x30
	USeaFortsWorldDataAsset* SeaFortsData; // 0x38
	TArray<ASeaFort*> SeaForts; // 0x40
};

struct UPetDesc {
	UPetSpawnParamsDataAsset* PetSpawnParams; // 0x130
	APreviewPet* PreviewPetClass; // 0x138
};

struct ABaseSimpleBootyItemProxy {
	URetractableComponent* RetractableComponent; // 0x7a8
	UItemProxyShipTrackerComponent* ItemProxyShipTrackerComponent; // 0x7b0
};

struct USoundGroups {
	TArray<FSoundGroup> SoundGroupProfiles; // 0x28
};

struct UFindNamedPointStepDescBase {
	FQuestVariableActor ActorToSearch; // 0xa0
	FQuestVariableName GroupNamePin; // 0xb0
	FName PointGroupName; // 0xc0
	EPointSelectionMethod SearchMethod; // 0xc8
	ESpaceType ReturnInSpace; // 0xc9
};

struct UAthenaGameEngine {
	UAthenaGameEngineSettings* EngineSettings; // 0xa48
};

struct UPlayNpcAnimationResourceStep {
	UPlayNpcAnimationResourceStepDesc* StepDesc; // 0x90
	UNPCDialogComponent* NPCDialogComponent; // 0xa8
	ACutSceneActor* CutSceneActor; // 0xb0
};

struct UBTDecorator_ShouldCheatPauseBehavior {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UTestWindInterface {
	TArray<TScriptInterface<Class>> WindZones; // 0x58
};

struct AFauna {
	FText DisplayName; // 0x808
	UFaunaSpecies* FaunaSpecies; // 0x840
	UFaunaBreed* FaunaBreed; // 0x848
	FVector HeadOffset; // 0x850
	FVector MountedScale; // 0x85c
	float NearToSurfaceDistance; // 0x868
	float StartDrowningTimePercentage; // 0x86c
	float DrowningDeathTimeMin; // 0x870
	float DrowningDeathTimeMax; // 0x874
	float PercentageStarvedToChangeAnimation; // 0x878
	float FadeOutTime; // 0x87c
	UObject* HitImpactParticleSystem; // 0x880
	UObject* DeathParticleSystem; // 0x888
	UObject* PutInCrateParticleSystem; // 0x890
	UWwiseEvent* PutInCrateSoundCue; // 0x898
	UWwiseEvent* TookDamageSoundCue; // 0x8a0
	UWwiseEvent* AgitationStartedSoundCue; // 0x8a8
	UWwiseEvent* AgitationStoppedSoundCue; // 0x8b0
	UWwiseEvent* CalmStartedSoundCue; // 0x8b8
	UWwiseEvent* CalmStoppedSoundCue; // 0x8c0
	UObject* BreathBubblesParticleSystem; // 0x8c8
	FName BreathBubblesSocketName; // 0x8d0
	FName UnderwaterRTPCName; // 0x8d8
	UForceFeedbackEffect* OnFeedingForceFeedbackEffect; // 0x8e0
	UMountableComponent* MountableComponent; // 0x8e8
	UHealthComponent* HealthComponent; // 0x8f0
	UDamageableComponent* DamageableComponent; // 0x8f8
	UPrimitiveComponent* AttackHitVolume; // 0x900
	UFaunaAnimationData* Animations; // 0x908
	UDitherComponent* DitherComponent; // 0x910
	ULightWeightStatusEffectManagerComponent* StatusEffectManagerComponent; // 0x918
	UAthenaAIControllerParamsDataAsset* AIControllerParamsWhenInCrate; // 0x920
	UPeriodicAINoiseEventComponent* PeriodicAINoiseEventComponent; // 0x928
	FScriptMulticastDelegate FaunaAgitationResponseDelegate; // 0x930
	FScriptMulticastDelegate FaunaDirectedAgitationResponseDelegate; // 0x940
	int32_t AgitationResponseChance; // 0x950
	int32_t AgitationResponseTestFrequencyMin; // 0x954
	int32_t AgitationResponseTestFrequencyMax; // 0x958
	int32_t MaxNumFailedAgitationResponseTests; // 0x95c
	float AgitationResponseVFXDelay; // 0x960
	float AgitationResponseRange; // 0x964
	UObject* AgitationResponseParticleSystem; // 0x968
	float AgitationResponseRangeParticleSystemAngle; // 0x970
	ECollisionChannel AgitationCollisionChannel; // 0x974
	bool StopMovementWhenAgitated; // 0x975
	float ApproximateSpitTravelTime; // 0x978
	bool StopMovementWhenCalm; // 0x97c
	float TurningSpringAcceleration; // 0x980
	float TurningSpringMaxVelocity; // 0x984
	float TurnResetDelay; // 0x988
	FVector PivotPointOffset; // 0x98c
	bool ShouldTurn; // 0x998
	UFeedingComponent* FeedingComponent; // 0x9a0
	UFaunaMovementComponent* FaunaMovementComponent; // 0x9a8
	float TimeUntilDrowned; // 0x9b0
	int32_t RandomAnimationSeed; // 0x9b4
	bool Drowned; // 0x9c4
	EFaunaCratedState CratedState; // 0x9c7
	EFaunaInWaterState InWaterState; // 0x9c8
	AActor* Crate; // 0x9d0
	UParticleSystemComponent* BreathBubblesParticleSystemComponent; // 0x9d8
	float DrowningDeathTime; // 0x9e0
	bool IsPlayingStarvingAnim; // 0x9e4
	bool IsAgitated; // 0x9e5
	bool IsCalm; // 0x9e6
	float TargetTurnAngle; // 0x9e8
	UVenomComponent* VenomComponent; // 0xb18
	AActor* CurrentShip; // 0xb20
};

struct ACollectorsChestStaticWieldableItem {
	UOpenableItemComponent* OpenableItemComponent; // 0x7a0
	TArray<UCollectorsChestItemSlotInteractable*> Slots; // 0x7a8
};

struct AGameMode {
	char bDisableAsyncOcclusionChecking : 1; // 0x3d8
	char bUseSeamlessTravel : 1; // 0x3d8
	char bPauseable : 1; // 0x3d8
	char bStartPlayersAsSpectators : 1; // 0x3d8
	char bDelayedStart : 1; // 0x3d8
	FString OptionsString; // 0x3e0
	APawn* DefaultPawnClass; // 0x3f0
	AHUD* HUDClass; // 0x3f8
	int32_t NumSpectators; // 0x400
	int32_t NumPlayers; // 0x404
	int32_t NumBots; // 0x408
	float MinRespawnDelay; // 0x40c
	AGameSession* GameSession; // 0x410
	int32_t NumTravellingPlayers; // 0x418
	FText DefaultPlayerName; // 0x420
	ULocalMessage* EngineMessageClass; // 0x458
	APlayerController* PlayerControllerClass; // 0x460
	ASpectatorPawn* SpectatorClass; // 0x468
	APlayerController* ReplaySpectatorPlayerControllerClass; // 0x470
	APlayerState* PlayerStateClass; // 0x478
	AGameState* GameStateClass; // 0x480
	AGameState* GameState; // 0x488
	TArray<APlayerState*> InactivePlayerArray; // 0x490
	TArray<FGameClassShortName> GameModeClassAliases; // 0x4b0
	float InactivePlayerStateLifeSpan; // 0x4c0
	bool bHandleDedicatedServerReplays; // 0x4c4
};

struct UTaleQuestAssignContendedResourceStep {
	UTaleQuestAssignContendedResourceStepDesc* StepDesc; // 0x90
};

struct UBTComposite_Sequence {
	TArray<FBTCompositeChild> Children; // 0x58
	TArray<UBTService*> Services; // 0x68
};

struct UAISpawnComplexCondition {
	TArray<UAISpawnOverrideCondition*> Conditions; // 0x30
};

struct UFogVolumeComponent {
	FLinearColor Color; // 0x2b0
	float SceneFogSaturation; // 0x2c0
	float Density; // 0x2c4
	float HeightFogFalloff; // 0x2c8
	float DistanceFalloffPower; // 0x2cc
	float ShadowIntensity; // 0x2d0
	float ScaleOnTranslucency; // 0x2d4
	FVector FogVelocity; // 0x2d8
	FVector NoisePrimaryScale; // 0x2e4
	FVector NoiseSecondaryScale; // 0x2f0
	float NoiseBlend; // 0x2fc
	UTexture* VolumeTexture; // 0x300
	float InscatteringIntensity; // 0x308
	float InscatteringPower; // 0x30c
	float ShadowDistance; // 0x310
	float ActiveBelowDepth; // 0x314
	char bUseSceneInscattering : 1; // 0x318
	bool bUnderwater; // 0x31c
	bool bAdvancedVolumeFog; // 0x31d
	bool UseDensityMapOnTranslucency; // 0x31e
	UTexture* DensityMap; // 0x320
	FVector DensityMapScale; // 0x328
	FVector DensityMapOffset; // 0x334
	FVector DensityMapActiveHemisphereOrigin; // 0x340
	FVector DensityMapActiveHemisphereDirection; // 0x34c
	float DensityMapActiveHemisphereInnerRadius; // 0x358
	float DensityMapActiveHemisphereOuterRadius; // 0x35c
	float SelfShadowBrightness; // 0x360
	float SelfShadowFogScale; // 0x364
	bool bMeshFog; // 0x368
	float MeshFogDensity; // 0x36c
	float MeshFogShadowDensity; // 0x370
	float MeshFogScatteringDensity; // 0x374
	FVector MeshFogNoisePrimaryScale; // 0x378
	FVector MeshFogNoiseSecondaryScale; // 0x384
	float MeshFogNoiseBlend; // 0x390
	FVector MeshFogVelocity; // 0x394
	UTexture* MeshFogVolumeTexture; // 0x3a0
};

struct UCommodityHasDemandNPCDialogConditional {
	FName CompanyNPCName; // 0x30
	FCommoditySelectionType CommodityType; // 0x38
	ECommodityDemand RequiredCommodityDemand; // 0x40
};

struct UShipCustomizationChestViewModelComponent {
	UShipCustomizationCategory* AllianceFlagCategory; // 0x170
	UShipCustomizationDesc* JoinAllianceDesc; // 0x178
	UShipCustomizationDesc* LeaveAllianceDesc; // 0x180
	UShipCustomizationCategory* LastRequestedCategory; // 0x188
	TArray<UShipCustomizationCategory*> Categories; // 0x1a0
	bool IncludeAllCategory; // 0x1b0
	TArray<FShipCustomizationChestMutualExclusion> MutualExclusions; // 0x1b8
};

struct USkeletalMeshAggregateTickComponent {
	USkeletalMeshComponent* Mesh; // 0xc8
};

struct UInlineVotingInteractionComponent {
	TArray<FInlineVotingParameterSet> VotingParameters; // 0x130
};

struct UEntityEnumerationService {
	UWorld* World; // 0x48
};

struct AProjectileLauncherMechanismAction {
	UMechanismActionComponent* MechanismActionComponent; // 0x3d8
	EProjectileLauncherMechanismMode Mode; // 0x3e0
	FPoolableCollectionMapConfiguration ProjectilePoolConfiguration; // 0x3e8
};

struct UVoyageGeneratorSimResult {
	FVector StartingLocation; // 0xe8
};

struct UIslandEventHUDData {
	TArray<UIslandEventType*> EventTypes; // 0x28
	FVector2D IslandIconSize; // 0x38
	FVector2D HeaderIconSize; // 0x40
	float HeaderYOffset; // 0x48
	float TriggerLerpAtZoomLevel; // 0x4c
	FCanvasLerpData LerpData; // 0x50
	FCanvasLerpData HighlightLerpData; // 0x60
	FCanvasLerpData FadeInOutData; // 0x70
	float MarkerHighlightRadiusAdjuster; // 0x80
	FVector2D MarkerHighlightCentreOffset; // 0x84
	float MarkerHighlightScale; // 0x8c
};

struct UPremiumCatalogListDataAsset {
	TArray<UPremiumCatalogDataAsset*> Catalogs; // 0x28
};

struct ACollectorsChestItemProxyStatic {
	UOpenableItemComponent* OpenableItemComponent; // 0x848
};

struct UCrewNotificationSettings {
	UPopUpMessageDesc* PlayerJoiningPopup; // 0x28
	UPopUpMessageDesc* PlayerLeavingPopup; // 0x30
	float HoldDurationOverride; // 0x38
	UPopUpMessageDesc* TinSessionEndedPopup; // 0x40
};

struct AControllablePulley {
	UControllableIntentComponent* IntentComponent; // 0x510
};

struct UTimeOfDayDataAsset {
	float SunriseStartHour; // 0x28
	float MorningStartHour; // 0x2c
	float MidDayStartHour; // 0x30
	float AfternoonStartHour; // 0x34
	float SunsetStartHour; // 0x38
	float NightStartHour; // 0x3c
};

struct AServerMigrationSerialisationDetailsTestsActorWithChild {
	UChildActorComponent* ChildActorComponent; // 0x3d0
};

struct UPointLightComponent {
	float Radius; // 0x438
	float AttenuationRadius; // 0x43c
	char bUseInverseSquaredFalloff : 1; // 0x440
	float LightFalloffExponent; // 0x444
	float IntensityScaleForWater; // 0x448
	float MinDistanceToLightAssumed; // 0x44c
	float SourceRadius; // 0x450
	float SourceLength; // 0x454
	ESimpleLightFunctionType SimpleFunctionType; // 0x458
	float ScaleOffset; // 0x45c
	float PulsePhase; // 0x460
	float FlickerFrequency; // 0x464
	int32_t FlickerPerlinRow; // 0x468
	FLightmassPointLightSettings LightmassSettings; // 0x46c
};

struct UEnvQueryContext_SeenActorsProjectedToGround {
	TArray<AActor*> SeenActors; // 0x28
};

struct AShipwreckHullAudio {
	USceneComponent* ShipwreckAudioRootComponent; // 0x3d0
	TArray<FShipwreckHullAudioData> ShipwreckAudioDataArray; // 0x3d8
};

struct UDigUpPlayerBuriedItemStatsTriggerType {
	FName UniqueTextIdentifier; // 0x28
};

struct ASkellyFortOfTheDamned {
	UMusicZoneComponent* PreBossMusicZone; // 0x800
	UMusicZoneComponent* BossMusicZone; // 0x808
	UWwiseObjectPoolWrapper* FortBellPool; // 0x810
	UWwiseEvent* FortBellOneshot; // 0x818
	FVector EmitterOffset; // 0x820
	bool DoorClosesWhenPlayersLeaveVicinity; // 0x82c
	EDamnedFortAudioState CurrentAudioState; // 0x82d
};

struct UEmblemDefinitionDataAsset {
	UCompany* Company; // 0x28
	FName CampaignId; // 0x30
	FText CampaignTitle; // 0x38
	FText CampaignDescription; // 0x70
	FText MoreInfoFirst; // 0xa8
	FText MoreInfoSecond; // 0xe0
	FText MoreInfoFirstLocked; // 0x118
	FText MoreInfoSecondLocked; // 0x150
	FStringAssetReference CampaignImagePath; // 0x188
	bool MarkAsNew; // 0x198
	FEmblemDefinitionActiveDuration ActiveDuration; // 0x1a0
	TArray<FEmblemSetDefinition> EmblemSets; // 0x1b8
};

struct UEnvQueryGenerator_IslandTreasureLocations {
	FString OptionName; // 0x30
	bool NonShippingOnly; // 0x40
	UEnvQueryItemType* ItemType; // 0x48
};

struct UContestSettings {
	FStringAssetReference ContestModuleSettingsDataAsset; // 0x38
};

struct USlateWidgetStyleAsset {
	USlateWidgetStyleContainerBase* CustomStyle; // 0x28
};

struct AAIEncounterService {
	TArray<FAIPartsCategoryMapping> DefaultPartsCategories; // 0x3d8
	TArray<FAIPartsCategoryFormMapping> FormPartsCategories; // 0x3e8
	UAIAmmoTypeList* Ammo; // 0x3f8
	UAIAmmoProgressionTypeList* AmmoProgressions; // 0x400
	UAIFormTypeList* Forms; // 0x408
	UAIFormProgressionTypeList* FormProgressions; // 0x410
	UAILoadoutTypeList* Loadouts; // 0x418
	UAILoadoutProgressionTypeList* LoadoutProgressions; // 0x420
	UAISkillsetTypeList* Skillsets; // 0x428
	UAISkillsetProgressionTypeList* SkillsetProgressions; // 0x430
	UAIClassIdTypeList* ClassIds; // 0x438
	UAIPartsCategoryTypeList* PartsCategories; // 0x440
	UAIColorVariantPool* TeamColors; // 0x448
	UAIItemDropComponentList* AIItemDropSpawners; // 0x450
	UAIItemDropComponentRankProgressionList* AIItemDropSpawnerProgressions; // 0x458
	TArray<UAIEncounterSettings*> DebugSpawnableEncounterSettings; // 0x460
};

struct ACursedCaptainsSkullProxy {
	URetractableComponent* RetractableComponent; // 0x7a8
	UItemProxyShipTrackerComponent* ItemProxyShipTrackerComponent; // 0x7b0
};

struct ASpectatorPawn {
	float BaseTurnRate; // 0x448
	float BaseLookUpRate; // 0x44c
	UPawnMovementComponent* MovementComponent; // 0x450
	USphereComponent* CollisionComponent; // 0x458
	UStaticMeshComponent* MeshComponent; // 0x460
	char bAddDefaultMovementBindings : 1; // 0x468
};

struct UContestMigration {
	UWorld* World; // 0x38
};

struct USpeakingTrumpetItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UGameEngine {
	float MaxDeltaTime; // 0x978
	float ServerFlushLogInterval; // 0x97c
};

struct UNestedWorldComposition {
	TArray<ULevelStreaming*> TilesStreaming; // 0x98
	double TilesStreamingTimeThreshold; // 0xa8
	bool bLoadAllTilesDuringCinematic; // 0xb0
	bool bRebaseOriginIn3DSpace; // 0xb1
	float RebaseOriginDistance; // 0xb4
};

struct UCutscenePoolTypeSingleUseRandom {
	bool DialogueSelectedRandomly; // 0x28
	TArray<int32_t> AvailableIndices; // 0x30
	TArray<int32_t> OriginalIndices; // 0x48
};

struct UCameraModifier_CameraShake {
	TArray<UCameraShake*> ActiveShakes; // 0x48
	float SplitScreenShakeScale; // 0x58
};

struct UBTTask_StopMovementImmediately {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UBTTask_CopyBlackboardActor {
	FBlackboardKeySelector SrcBlackboardKey; // 0x60
	FBlackboardKeySelector TargetBlackboardKey; // 0x88
};

struct UGameplayAbilityBlueprint {
	char bRecompileOnLoad : 1; // 0x50
	UObject* ParentClass; // 0x58
	UObject* PRIVATE_InnermostPreviousCDO; // 0x60
	char bHasBeenRegenerated : 1; // 0x68
	char bIsRegeneratingOnLoad : 1; // 0x68
	USimpleConstructionScript* SimpleConstructionScript; // 0x70
	TArray<UActorComponent*> ComponentTemplates; // 0x78
	TArray<UTimelineTemplate*> Timelines; // 0x88
	UInheritableComponentHandler* InheritableComponentHandler; // 0x98
	EBlueprintType BlueprintType; // 0xa0
	int32_t BlueprintSystemVersion; // 0xa4
};

struct UAIResource_Movement {
	int32_t ManualResourceID; // 0x28
	char bManuallySetID : 1; // 0x30
};

struct USunkenIslandSettingsDataAsset {
	TArray<FGameplayEventExclusionInfo> ExclusionInfo; // 0x28
};

struct UReviveComponent {
	ACharacter* OwningCharacter; // 0x128
	AActor* ReviveableRepresentationActor; // 0x130
	EReviveState ReviveState; // 0x138
	EInteractableState InteractionState; // 0x139
	AActor* ReviveableRepresentationClass; // 0x140
	bool ReviveWindowIsOpen; // 0x154
	FStatus RevivableStatus; // 0x228
};

struct UTaleQuestGenerateClueSiteAtSeaLocationStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UCheatManager {
	ADebugCameraController* DebugCameraControllerRef; // 0x28
	ADebugCameraController* DebugCameraControllerClass; // 0x30
};

struct UTaleQuestGetProjectionPointOnTradeRouteStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UMaterialExpressionComponentMask {
	FExpressionInput Input; // 0x70
	char R : 1; // 0xa8
	char G : 1; // 0xa8
	char B : 1; // 0xa8
	char A : 1; // 0xa8
};

struct UParticleModuleRequired {
	char bDeactivateGroupA : 1; // 0x50
	char bDeactivateGroupB : 1; // 0x50
	char bDeactivateGroupC : 1; // 0x50
	char bDeactivateGroupD : 1; // 0x50
	char bDeactivateGroupE : 1; // 0x50
	EPriorityGroups EmitterPriority; // 0x54
	char bUseComplexitySystemWhenLooping : 1; // 0x58
	EPriorityGroups SwitchPriority; // 0x5c
	char bReplacementGroupIsAdditive : 1; // 0x60
	UMaterialInterface* Material; // 0x68
	FVector EmitterOrigin; // 0x70
	char EmitterOriginUseGroupAForAll : 1; // 0x7c
	FVector AdditionalEmitterOrigins[0x5]; // 0x80
	FRotator EmitterRotation; // 0xbc
	EParticleScreenAlignment ScreenAlignment; // 0xc8
	char bUseGroupAScreenAlignmentForAllGroups : 1; // 0xcc
	EParticleScreenAlignment AdditionalScreenAlignments[0x5]; // 0xd0
	float AlignmentInheritedVelocityScale; // 0xd8
	char bUseLocalSpace : 1; // 0xdc
	char bFollowEmitter : 1; // 0xdc
	char bTrailInGrandParentSpace : 1; // 0xdc
	char bKillOnDeactivate : 1; // 0xdc
	char bKillOnCompleted : 1; // 0xdc
	EParticleSortMode SortMode; // 0xe0
	char bUseLegacyEmitterTime : 1; // 0xe4
	float EmitterDuration; // 0xe8
	float EmitterDurationLow; // 0xec
	char bEmitterDurationUseRange : 1; // 0xf0
	char bDurationRecalcEachLoop : 1; // 0xf0
	char bSeparateLoopTimeForSubUV : 1; // 0xf0
	int32_t EmitterLoops; // 0xf4
	FRawDistributionFloat LoopTime; // 0xf8
	FRawDistributionFloat LoopOffset; // 0x130
	FRawDistributionFloat LoopTimeForSubUV; // 0x168
	float LoopBeginTime; // 0x1a0
	float LoopEndTime; // 0x1a4
	FRawDistributionFloat SpawnRate; // 0x1a8
	EParticleBurstMethod ParticleBurstMethod; // 0x1e0
	TArray<FParticleBurst> BurstList; // 0x1e8
	float EmitterDelay; // 0x1f8
	float EmitterDelayLow; // 0x1fc
	char bEmitterDelayUseRange : 1; // 0x200
	char bDelayFirstLoopOnly : 1; // 0x200
	EParticleSubUVInterpMethod InterpolationMethod; // 0x204
	int32_t SubImages_Horizontal; // 0x208
	int32_t SubImages_Vertical; // 0x20c
	char bScaleUV : 1; // 0x210
	float RandomImageTime; // 0x214
	int32_t RandomImageChanges; // 0x218
	char bOverrideSystemMacroUV : 1; // 0x21c
	FVector MacroUVPosition; // 0x220
	float MacroUVRadius; // 0x22c
	char bUseMaxDrawCount : 1; // 0x230
	int32_t MaxDrawCount; // 0x234
	EEmitterNormalsMode EmitterNormalsMode; // 0x238
	FVector NormalsSphereCenter; // 0x23c
	FVector NormalsCylinderDirection; // 0x248
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0x254
	EParticleUVFlipMode UVFlippingMode; // 0x258
	UTexture2D* CutoutTexture; // 0x260
	ESubUVBoundingVertexCount BoundingMode; // 0x268
	EOpacitySourceMode OpacitySourceMode; // 0x269
	float AlphaThreshold; // 0x26c
	float SafeMarginSize; // 0x270
	TArray<FName> NamedMaterialOverrides; // 0x278
	char bUseDistanceFading : 1; // 0x288
	float FarStopFade; // 0x28c
	float FarStartFade; // 0x290
	float NearStartFade; // 0x294
	float NearStopFade; // 0x298
	char ApplyFOVDistanceScaling : 1; // 0x29c
	char bUseDistanceSizeScale : 1; // 0x29c
	float FarScaleFactor; // 0x2a0
	float FarScaleEndDistance; // 0x2a4
	float FarScaleBeginDistance; // 0x2a8
	float NearScaleBeginDistance; // 0x2ac
	float NearScaleEndDistance; // 0x2b0
	float NearScaleFactor; // 0x2b4
};

struct UDoubleIntentComponent {
	float ServerFirstIntent; // 0xd0
	float ServerSecondIntent; // 0xd8
};

struct UNPCDialogOption {
	FString TelemetryKey; // 0x28
	TArray<FPlayerStatOption> StatsToFire; // 0x38
	TArray<UConditionalStatsTriggerType*> ConditionalStatsToFire; // 0x48
	TArray<UNPCDialogConditional*> Conditions; // 0x58
	TArray<URunnable*> ClientRunnables; // 0x68
};

struct AMusicalInstrumentSkeletalMesh {
	EMusicalInstrumentType InstrumentType; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	float PlayingCoolDownTime; // 0x7b0
	FName InstrumentDrunkennessRtpc; // 0x7b4
	FName InstrumentUnderwaterRtpc; // 0x7bc
	float MaxUnderwaterRtpcFactor; // 0x7c4
	float MinUnderwaterRtpcFactor; // 0x7c8
	float PlayingAINoiseRange; // 0x7cc
	float AINoiseEventInterval; // 0x7d0
	UObject* TriggerEffectActor; // 0x7d8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7e0
	AAthenaPlayerCharacter* AthenaPlayerCharacter; // 0x7f0
};

struct UBTDecorator_ConeCheck3D {
	float ConeHalfAngle; // 0x68
	FBlackboardKeySelector ConeOrigin; // 0x70
	FBlackboardKeySelector Observed; // 0x98
};

struct AWellOfFates {
	USkeletalMeshComponent* SkeletalMesh; // 0x470
	UStaticMeshComponent* StaticMesh; // 0x478
	UParticleSystemComponent* LanternParticleSystem; // 0x480
	UParticleSystemComponent* WellOfFatesParticleSystem; // 0x488
	UPointLightComponent* PointLight; // 0x490
	UInteractableComponent* InteractableComponent; // 0x498
	float InteractionRadius; // 0x4a0
	FObjectMessagingDispatcher EventDispatcher; // 0x4a8
};

struct UHarpoonInputComponent {
	AHarpoonLauncher* HarpoonLauncher; // 0x290
};

struct UParticleModuleRotationRateMultiplyLife {
	FRawDistributionFloat LifeMultiplier; // 0x50
};

struct UGetNextQuestInChainStep {
	UGetNextQuestInChainStepDesc* Desc; // 0x90
};

struct UDrowningComponent {
	UDrowningComponentParams* Params; // 0xc8
	FBlendableDrowningParams DrowningParams; // 0xd0
	UParticleSystemComponent* BubbleVFXComponent; // 0xf8
	UParticleSystemComponent* ExtraBubblesFirstPersonVFXComponent; // 0x100
	float OxygenLevel; // 0x108
	DrowningState ServerDrowningState; // 0x160
	AActor* OwnerCharacter; // 0x168
	UHealthComponent* OwnerHealthComponent; // 0x170
	bool IsDrowningDisabled; // 0x188
};

struct UMaterialExpressionConstant2Vector {
	float R; // 0x70
	float G; // 0x74
};

struct UAISpawnContextId {
	int32_t Weighting; // 0x28
};

struct URepairableComponent {
	FScriptMulticastDelegate OnRepairableStateChanged; // 0x130
	FScriptMulticastDelegate OnDamageLevelChanged; // 0x140
	FScriptMulticastDelegate OnRepairMounted; // 0x150
	float InteractionPointDepthOffset; // 0x160
	float MaximumRepairAngleToRepairer; // 0x164
	float MaximumRepairDistance; // 0x168
	float RepairTime; // 0x16c
	URepairTypeId* RepairType; // 0x170
	USceneComponent* RepairMountParent; // 0x178
	FTransform RepairMountOffset; // 0x180
	FName RepairMountSocket; // 0x1b0
	int32_t MaxDamageLevel; // 0x1b8
	UAIInteractableType* AIInteractionType; // 0x1c0
	FVector AIInteractionOffset; // 0x1c8
	FRepairableAuthoritiveRepairState AuthorityRepairableState; // 0x1d8
	ERepairableState RepairableState; // 0x1f0
	int32_t DamageLevel; // 0x1f4
	EInteractableState InteractionState; // 0x1f8
};

struct ULevelActorContainer {
	TArray<AActor*> Actors; // 0x28
};

struct UBTTask_WieldItemByCategory {
	bool EnableOverrideItemCategory; // 0x68
	UItemCategory* OverrideItemCategory; // 0x70
	FBlackboardKeySelector BlackboardKey; // 0x78
	bool AllowWieldNoneWhenNoItemOfCategory; // 0xa0
};

struct UTextureSwitchByBodyShape {
	TArray<FTextureSwitchBodyShapeEntry> Entries; // 0x220
};

struct UIsAnEmissaryStatCondition {
	UStatConditionTargetSelector* TargetSelector; // 0x28
};

struct UMaterial {
	UPhysicalMaterial* PhysMaterial; // 0x58
	FColorMaterialInput DiffuseColor; // 0x60
	FColorMaterialInput SpecularColor; // 0xa0
	FColorMaterialInput BaseColor; // 0xe0
	FScalarMaterialInput Metallic; // 0x120
	FScalarMaterialInput Specular; // 0x160
	FScalarMaterialInput Roughness; // 0x1a0
	FVectorMaterialInput Normal; // 0x1e0
	FColorMaterialInput EmissiveColor; // 0x228
	FScalarMaterialInput Opacity; // 0x268
	FScalarMaterialInput OpacityMask; // 0x2a8
	EMaterialDomain MaterialDomain; // 0x2e8
	EBlendMode BlendMode; // 0x2e9
	EDecalBlendMode DecalBlendMode; // 0x2ea
	bool bDecalNoEmissiveOrRoughness; // 0x2eb
	bool bDecalEnableStencil; // 0x2ec
	EMaterialDecalResponse MaterialDecalResponse; // 0x2ed
	EMaterialShadingModel ShadingModel; // 0x2ee
	float OpacityMaskClipValue; // 0x2f0
	float DepthWeightScale; // 0x2f4
	float DepthWeightExponent; // 0x2f8
	float DepthWeightBase; // 0x2fc
	char bBlendedOITAfterTranslucency : 1; // 0x300
	char bForceResolution : 1; // 0x300
	ELowResTranslucencyCascade ForcedResolution; // 0x304
	float FirstSplitDistance; // 0x308
	float SecondSplitDistance; // 0x30c
	float FullResInFrontMaxDistance; // 0x310
	char FullResInFront : 1; // 0x314
	char PopPerParticle : 1; // 0x314
	FVectorMaterialInput WorldPositionOffset; // 0x318
	FVectorMaterialInput WorldDisplacement; // 0x360
	FScalarMaterialInput TessellationMultiplier; // 0x3a8
	FColorMaterialInput SubsurfaceColor; // 0x3e8
	FScalarMaterialInput ClearCoat; // 0x428
	FScalarMaterialInput ClearCoatRoughness; // 0x468
	FScalarMaterialInput AmbientOcclusion; // 0x4a8
	FScalarMaterialInput Refraction; // 0x4e8
	FColorMaterialInput BillboardColor; // 0x528
	FVectorMaterialInput BillboardParams; // 0x568
	FVector2MaterialInput CustomizedUVs[0x8]; // 0x5b0
	FMaterialAttributesInput MaterialAttributes; // 0x7f0
	FScalarMaterialInput PixelDepthOffset; // 0x838
	char bTranslucentBeforeTranslucency : 1; // 0x878
	char bTranslucentBeforeVolumeFog : 1; // 0x878
	char bTranslucentWithDepthWrite : 1; // 0x878
	char bEnableSeparateTranslucency : 1; // 0x878
	char bEnableResponsiveAA : 1; // 0x878
	char bScreenSpaceReflections : 1; // 0x878
	char TwoSided : 1; // 0x878
	char DitheredLODTransition : 1; // 0x878
	EConstantMaterial ConstantMaterial; // 0x87c
	float SkyLightWhenOccluded; // 0x880
	float CloudShadowsInfluence; // 0x884
	int32_t NumCustomizedUVs; // 0x888
	ETranslucencyLightingMode TranslucencyLightingMode; // 0x88c
	float TranslucencyDirectionalLightingIntensity; // 0x890
	float LightColorInfluence; // 0x894
	float AmbientLightColorInfluence; // 0x898
	float LightIntensityInfluence; // 0x89c
	float AmbientLightIntensityInfluence; // 0x8a0
	float AlternativeAmbientLightColorInfluence; // 0x8a4
	float AlternativeAmbientLightIntensityInfluence; // 0x8a8
	char bEvaluateLightningAtParticleCenter : 1; // 0x8ac
	float TranslucencyScaleForReflection; // 0x8b0
	char bObjectFadeEnabled : 1; // 0x8b4
	float ObjectFadeRate; // 0x8b8
	float ObjectFadeDistanceThreshold; // 0x8bc
	float TranslucentShadowDensityScale; // 0x8c0
	float TranslucentSelfShadowDensityScale; // 0x8c4
	float TranslucentSelfShadowSecondDensityScale; // 0x8c8
	float TranslucentSelfShadowSecondOpacity; // 0x8cc
	float TranslucentBackscatteringExponent; // 0x8d0
	FLinearColor TranslucentMultipleScatteringExtinction; // 0x8d4
	float TranslucentShadowStartOffset; // 0x8e4
	float VolumeFogScale; // 0x8e8
	char DistanceFog : 1; // 0x8ec
	char bDisableDepthTest : 1; // 0x8ec
	char bGenerateSphericalParticleNormals : 1; // 0x8ec
	char bDontRenderWhenPlayerInsideShip : 1; // 0x8ec
	char bTangentSpaceNormal : 1; // 0x8ec
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x8ec
	char bBlockGI : 1; // 0x8ec
	char bUsedAsSpecialEngineMaterial : 1; // 0x8ec
	char bUsedWithSkeletalMesh : 1; // 0x8ed
	char bUsedWithEditorCompositing : 1; // 0x8ed
	char bUsedWithLandscape : 1; // 0x8ed
	char bUsedWithParticleSprites : 1; // 0x8ed
	char bUsedWithCPUParticleSprites : 1; // 0x8ed
	char bUsedWithStaticMesh : 1; // 0x8ed
	char bUsedWithCoverage : 1; // 0x8ed
	char bUsedWithGPUInstanceCulling : 1; // 0x8ed
	char bUsedWithBeamTrails : 1; // 0x8ee
	char bUsedWithMeshParticles : 1; // 0x8ee
	char bUsedWithStaticLighting : 1; // 0x8ee
	char bUsedWithFluidSurfaces : 1; // 0x8ee
	char bUsedWithMorphTargets : 1; // 0x8ee
	char bUsedWithSplineMeshes : 1; // 0x8ee
	char bUsedWithInstancedStaticMeshes : 1; // 0x8ee
	char bUsesDistortion : 1; // 0x8ee
	char bUsedWithClothing : 1; // 0x8ef
	char bUsedWithDeformables : 1; // 0x8ef
	char bUsedWithFFTWaterMask : 1; // 0x8ef
	char bUsedWithVolumeFogMask : 1; // 0x8ef
	char bUsedWithDynamicObjectFading : 1; // 0x8ef
	char bUsedWithWaterBoundary : 1; // 0x8ef
	char bUsedWithClouds : 1; // 0x8ef
	char bUsedWithInstancedRopes : 1; // 0x8ef
	char bUsedWithPlanarReflection : 1; // 0x8f0
	char bUsedWithPointLightShadows : 1; // 0x8f0
	char bUsedWithMaskPass : 1; // 0x8f0
	char bUsedWithUI : 1; // 0x8f0
	char bAutomaticallySetUsageInEditor : 1; // 0x8f0
	char bAllowEmissiveOnLandscape : 1; // 0x8f0
	char bApplyWaterMask : 1; // 0x8f0
	char bUseReZ : 1; // 0x8f0
	char bFullyRough : 1; // 0x8f1
	char bUseLightmapDirectionality : 1; // 0x8f1
	EMaterialGeometryMode GeometryMode; // 0x8f4
	EMaterialTessellationMode D3D11TessellationMode; // 0x8f5
	char bEnableCrackFreeDisplacement : 1; // 0x8f8
	char bEnableAdaptiveTessellation : 1; // 0x8f8
	float MaxDisplacement; // 0x8fc
	char Wireframe : 1; // 0x900
	char bOutputVelocityOnBasePass : 1; // 0x900
	float NormalOffsetShadowBiasScale; // 0x904
	int32_t EditorX; // 0x908
	int32_t EditorY; // 0x90c
	int32_t EditorPitch; // 0x910
	int32_t EditorYaw; // 0x914
	TArray<UMaterialExpression*> Expressions; // 0x918
	TArray<FMaterialFunctionInfo> MaterialFunctionInfos; // 0x928
	TArray<FMaterialParameterCollectionInfo> MaterialParameterCollectionInfos; // 0x938
	char bCanMaskedBeAssumedOpaque : 1; // 0x948
	char bIsMasked : 1; // 0x948
	char bIsPreviewMaterial : 1; // 0x948
	char bUseMaterialAttributes : 1; // 0x948
	char bUseTranslucencyVertexFog : 1; // 0x948
	char bUseDensityMapOnTranslucencyVertexFog : 1; // 0x948
	char bAllowDevelopmentShaderCompile : 1; // 0x948
	char bIsMaterialEditorStatsMaterial : 1; // 0x948
	uint32_t UsageFlagWarnings; // 0x94c
	EBlendableLocation BlendableLocation; // 0x950
	int32_t BlendablePriority; // 0x954
	char bIsAlphaBlended : 1; // 0x958
	float RefractionDepthBias; // 0x95c
	FGuid StateId; // 0x960
	int32_t UnwrappedUVSet; // 0x970
	TArray<UTexture*> ExpressionTextureReferences; // 0xa00
};

struct USirenAnimationInstance {
	TWeakObjectPtr<APawn> PawnOwner; // 0x450
	FName PropAttachmentSocket; // 0x458
	FSirenAnimationDataStructure SirenAnimationData; // 0x460
	FAthenaAnimationWeapon AttackAnimations; // 0x4c0
	float ForwardSpeed; // 0x578
	float TiltDirectionAngleDegrees; // 0x588
	float TiltAngleAlpha; // 0x58c
	float SpinAngleDegrees; // 0x590
	float MaxTiltAngleRepresentedByAdditiveBendAnimations; // 0x594
	bool UpperBodyOverlayActive; // 0x598
	bool SwimmingLongways; // 0x599
	bool UseAggressiveAnimations; // 0x59a
	bool UseAlternativeAggressiveAnimation; // 0x59b
	TArray<UAIStrategyId*> StrategiesForAggressiveAnimations; // 0x5a0
	FFloatRange TimeBeforeAlternativeAggressiveAnimationToggleFlips; // 0x5b0
	bool AnimationsLoaded; // 0x5c8
	float AimUpAlpha; // 0x5cc
	float AimDownAlpha; // 0x5d0
	FCustomAnimationMontageStateMachine FullBodyStateMachine; // 0x5d8
	FHitReactionAnimationState HitReacts; // 0x6b0
};

struct UItemDiggingAudioConfig {
	UWwiseEvent* ShovelEnterSurfaceSfx; // 0x28
	UWwiseEvent* ExhumeStepSfx; // 0x30
	UWwiseEvent* FullyDugUpSfx; // 0x38
};

struct AAthenaAICharacter {
	UItemDesc* DefaultAmmoItemDescType; // 0xca0
	UItemDesc* DefaultInteractableAmmoItemDescType; // 0xca8
	UCurveFloat* DistanceInMToCannonShotHitChanceCurve; // 0xcb0
	bool AimNoiseEnabled; // 0xcb8
	float AmplitudeChangeSpeed; // 0xcbc
	float AmplitudeOffset; // 0xcc0
	float Frequency; // 0xcc4
	float InteractableMissFallShortMinProportion; // 0xcc8
	float InteractableMissFallShortMaxProportion; // 0xccc
	UFaceTargetComponent* FaceTargetComponent; // 0xcd0
	UAIPartsRetrievalComponent* AIPartsRetrievalComponent; // 0xcd8
	UAthenaAIFormComponent* FormComponent; // 0xce0
	UAICharacterAudioComponent* AICharacterAudioComponent; // 0xce8
	UStatusEffectManagerComponent* StatusEffectManagerComponent; // 0xcf0
	UStatusEffectPersistenceComponent* StatusEffectPersistenceComponent; // 0xcf8
	UPlayerCurseComponent* PlayerCurseComponent; // 0xd00
	UVulnerabilityDuringAIStrategyComponent* VulnerabilityDuringAIStrategyComponent; // 0xd08
	UCapsuleComponent* ProjectileTraceHitVolume; // 0xd10
	UAnimationDataOverriderComponent* AnimationDataOverriderComponent; // 0xd18
	UCustomAnimationHandlerComponent* CustomAnimationHandlerComponent; // 0xd20
	UAIProjectileWeaponFiringIntentionComponent* FiringIntentionComponent; // 0xd28
	UObject* KilledVfxTemplate; // 0xd30
	UObject* PartSpecificKilledVfxTemplate; // 0xd38
	FItemLoadout AISpawnLoadout; // 0xd40
	bool KillOnFallingIntoWater; // 0xd60
	UAIStrategyId* MeleeAttackStrategyId; // 0xd68
	UWieldableItemAnimationStoreId* GunpowderKegAnimationStoreId; // 0xd70
	FPlayerStat OnFireStat; // 0xd78
	USkeletalMesh* AssignedMesh; // 0xdc8
	UColorTexture* TeamColorTexture; // 0xdd0
	FGenericTeamId TeamID; // 0xdd8
	AActor* CurrentShip; // 0xde0
	float MeshScale; // 0xde8
	bool DamageResponsesDisabled; // 0xdec
	bool TurnActive; // 0xded
	UAIStrategyId* CurrentAIStrategy; // 0xdf0
	UAIAnimationStateId* CurrentAnimationState; // 0xdf8
	UItemCategory* AlternateLocomotionItemType; // 0xe00
	UAthenaAIAmmoDataAsset* Ammo; // 0x10d0
	FAIEncounterSpecification PawnEncounterSpec; // 0x10d8
};

struct UControllableIntentCombinerComponent {
	float CooperationMultiplier; // 0xc8
	float StartMovingThreshold; // 0xcc
	float StopMovingThreshold; // 0xd0
	float ConflictedStartMovingThreshold; // 0xd4
	float ConflictedStopMovingThreshold; // 0xd8
	TArray<UObject*> IntentProviders; // 0xe0
};

struct UPossessionsChestViewModel {
	FText AllTabLabel; // 0x128
	FStringAssetReference AllTabIcon; // 0x160
};

struct UMovieScenePropertyTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct URopeCatenaryRenderComponent {
	TArray<UMaterialInstanceDynamic*> CordMaterials; // 0x5f8
	float ThicknessCm; // 0x608
};

struct AForceSpot {
	UInteractableComponent* InteractableComponent; // 0x468
	USplineComponent* InteractionSplineComponent; // 0x470
	float ForceScalar; // 0x478
	FText InteractionDisplayName; // 0x480
	float InteractionRadius; // 0x4b8
};

struct UHealthComponent {
	float MinTimeSinceLastPredictedHealthChangeToFireChangedEventAgain; // 0xd8
	bool PreventDamageFromAllSourcesExceptWhitelistedSources; // 0xdc
	float MaxHealth; // 0xe0
	FCurrentHealthInfo CurrentHealthInfo; // 0xe4
	TArray<FContinuousHealthChange> ContinuousHealthChangeSources; // 0x100
	bool IsHealthAdjustLocked; // 0x110
};

struct UBTDecorator_CompareBlackboardFloatValue {
	FBlackboardKeySelector BlackboardKey; // 0xb8
};

struct UMovieSceneSubTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
};

struct ASirenPawn {
	UStatusEffectManagerComponent* StatusEffectComponent; // 0x950
	UHitDetectionComponent* HitDetectionComponent; // 0x958
	UInventoryManipulatorComponent* InventoryManipulatorComponent; // 0x960
	UWieldedItemComponent* WieldedItemComponent; // 0x968
	UWieldableItemSetComponent* WieldableItemSetComponent; // 0x970
	ULoadoutComponent* LoadoutComponent; // 0x978
	UItemLoadoutComponent* ItemLoadoutComponent; // 0x980
	UMeleeAttackProcessorComponent* MeleeAttackProcessorComponent; // 0x988
	UAnimationDataStoreComponent* AnimationDataStoreComponent; // 0x990
	UCustomAnimationMontageComponent* CustomAnimationMontageComponent; // 0x998
	UAIProjectileWeaponFiringIntentionComponent* FiringIntentionComponent; // 0x9a0
	UHealthGemComponent* HealthGemComponent; // 0x9a8
	FCustomAnimationMontageId DeathMontageId; // 0x9b0
	UCharacterHitReactionComponent* CharacterHitReactionComponent; // 0x9b8
	UAnimationDataStoreId* AnimationID; // 0x9c8
	FCompositeInputDelegator InputDelegator; // 0x9d0
};

struct UAthenaPlayerCharacterMovementComponent {
	UCurveFloat* LandingSpeedToFallDamageCurve; // 0x800
	float MinFallSpeedToPossiblyCauseDamage; // 0x808
	float MinTimeBetweenDamagingImpactsOnUnwalkableSurface; // 0x80c
	float MinFallDamageToBreakLeg; // 0x810
	float FiredFromActorFallDamageScalar; // 0x814
	float TimeUntilRecoverFallDamageAudioState; // 0x818
	FStatus FallDamageLimpingStatus; // 0x820
	float SwimmingStateFilterTime; // 0x838
	float MaxSpeedToleranceForPreventingJumping; // 0x83c
};

struct ACampfire {
	UStaticMeshComponent* UnbuiltMesh; // 0x3f0
	UStaticMeshComponent* BuiltMesh; // 0x3f8
	UParticleSystemComponent* FireParticleSystem; // 0x400
	UPointLightComponent* PointLight; // 0x408
	UOverlapTriggerComponent* OverlapTrigger; // 0x410
	UBoxComponent* BoxCollider; // 0x418
	ULightWeightStatusEffectManagerComponent* StatusEffectManagerComponent; // 0x420
	UDitherComponent* DitherComponent; // 0x428
	UActionRulesInteractableComponent* InteractableComponent; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UShelteredComponent* ShelteredComponent; // 0x440
	UWaterExposureComponent* WaterExposureComponent; // 0x448
	UFlammableComponent* FlammableComponent; // 0x450
	USoakableComponent* SoakableComponent; // 0x458
	UChildActorComponent* CookerChildActorComponent; // 0x460
	UObject* ExtinguishedVFX; // 0x468
	bool HasSmoke; // 0x470
	FVector SmokeOffset; // 0x474
	float BurnDownTimeSeconds; // 0x480
	float BurnOutTimeSoakedSeconds; // 0x484
	float AddWoodHoldTime; // 0x488
	FName WwiseEmitterName; // 0x48c
	UWwiseEvent* IgnitedWwiseEvent; // 0x498
	UWwiseEvent* ExtinguishedWwiseEvent; // 0x4a0
	UWwiseEvent* BurnDownWwiseEvent; // 0x4a8
	UWwiseEvent* WoodAddedWwiseEvent; // 0x4b0
	UWwiseEvent* StokedWwiseEvent; // 0x4b8
	UWwiseEvent* BurningLoopStart; // 0x4c0
	UWwiseEvent* BurningLoopEnd; // 0x4c8
	UWwiseObjectPoolWrapper* CampfireWwisePool; // 0x4d0
	UCurveFloat* WoodCharOverTime; // 0x4d8
	TArray<FCampfireDamageLightingChance> ImpactLightChances; // 0x4e0
	FText WieldableItemCannotLightCampfire; // 0x4f0
	FText WieldableItemNotReadyToLightCampfire; // 0x528
	FText LightCampfire; // 0x560
	FText NeedWoodToBuildCampfire; // 0x598
	FText BuildCampfire; // 0x5d0
	FText StokeCampfire; // 0x608
	bool Built; // 0x640
	float BurnedProportion; // 0x644
	bool OnFire; // 0x648
	FStatus IgnitedStatus; // 0x650
	UItemCategory* WoodCategory; // 0x668
	TScriptInterface<Class> Cooker; // 0x670
	UMaterialInstanceDynamic* BuiltMeshCharrableMaterial; // 0x680
	TArray<AActor*> OverlappingActors; // 0x688
};

struct UDistributionFloatUniformCurve {
	FInterpCurveVector2D ConstantCurve; // 0x38
};

struct UCategoryBase {
	FText Name; // 0x28
	FName UniqueTextIdentifier; // 0x60
	FStringAssetReference IconPath; // 0x68
};

struct UTelemetryTaskStepDesc {
	UTaleQuestStepDesc* TaskDesc; // 0x80
	FString Description; // 0x88
	FTelemetryStepContext TelemetryContext; // 0x98
};

struct UInterpTrackFade {
	char bPersistFade : 1; // 0x90
	char bFadeAudio : 1; // 0x90
	FLinearColor FadeColor; // 0x94
};

struct UWaitForUnlockStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UMaterialExpressionCeil {
	FExpressionInput Input; // 0x70
};

struct UDeliverableRedirectionCompanyContextHandler {
	bool ContextCanContainMoreCompanies; // 0x30
	TArray<UCompany*> TargetCompanies; // 0x38
};

struct UShipTrackerComponent {
	bool bPlayerIsAbandoned; // 0x198
	EPlayerAbandonedReason PlayerAbandonedReason; // 0x199
};

struct UActivitiesService {
	UPlayerActivityIconCatalogueDataAsset* ActivityIconDataAsset; // 0x48
};

struct UGameplayEffectTemplate {
	EGameplayEffectDurationType DurationPolicy; // 0x30
	FGameplayEffectModifierMagnitude DurationMagnitude; // 0x38
	FScalableFloat Period; // 0x1a8
	bool bExecutePeriodicEffectOnApplication; // 0x1c8
	TArray<FGameplayModifierInfo> Modifiers; // 0x1d0
	TArray<FGameplayEffectExecutionDefinition> Executions; // 0x1e0
	FScalableFloat ChanceToApplyToTarget; // 0x1f0
	TArray<UGameplayEffect*> TargetEffectClasses; // 0x210
	TArray<UGameplayEffect*> TargetEffects; // 0x220
	TArray<UGameplayEffect*> OverflowEffects; // 0x230
	bool bDenyOverflowApplication; // 0x240
	bool bClearStackOnOverflow; // 0x241
	TArray<UGameplayEffect*> PrematureExpirationEffectClasses; // 0x248
	TArray<UGameplayEffect*> RoutineExpirationEffectClasses; // 0x258
	bool bRequireModifierSuccessToTriggerCues; // 0x268
	TArray<FGameplayEffectCue> GameplayCues; // 0x270
	UGameplayEffectUIData* UIData; // 0x280
	FInheritedTagContainer InheritableGameplayEffectTags; // 0x288
	FGameplayTagContainer GameplayEffectTags; // 0x300
	FInheritedTagContainer InheritableOwnedTagsContainer; // 0x328
	FGameplayTagContainer OwnedTagsContainer; // 0x3a0
	FGameplayTagRequirements OngoingTagRequirements; // 0x3c8
	FGameplayTagRequirements ApplicationTagRequirements; // 0x418
	FInheritedTagContainer RemoveGameplayEffectsWithTags; // 0x468
	FGameplayTagContainer ClearTagsContainer; // 0x4e0
	FGameplayTagRequirements GrantedApplicationImmunityTags; // 0x508
	EGameplayEffectStackingType StackingType; // 0x558
	int32_t StackLimitCount; // 0x55c
	EGameplayEffectStackingDurationPolicy StackDurationRefreshPolicy; // 0x560
	EGameplayEffectStackingPeriodPolicy StackPeriodResetPolicy; // 0x561
	TArray<FGameplayAbilitySpecDef> GrantedAbilities; // 0x568
};

struct UBuoyantObjectSpawnProfileDataAsset {
	FBuoyantObjectSpawnProfile Profile; // 0x28
};

struct ALightmassImportanceVolume {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct URemoveFlameOfFateTypeStepDesc {
	EFlameOfFateType FlameOfFateTypeToRemove; // 0x80
	UItemCategory* LanternItemCategory; // 0x88
};

struct USafeZoneComponent {
	FScriptMulticastDelegate OnSafeZoneIsEmptyDelegate; // 0x5b0
	float ExclusionRadius; // 0x5c0
	float ExclusionHeight; // 0x5c8
	FName SafeZoneEmptyCollisionProfile; // 0x5cc
	bool AutoActivateSafeZone; // 0x5d4
	bool DeactivateSafeZoneAfterExclusionRadiusIsEmpty; // 0x5d5
	bool UsePlayerTeleport; // 0x5d6
	float PlayerTeleportRadius; // 0x5d8
	bool UseRepelForce; // 0x5e0
	float RepelForceRadius; // 0x5e4
	float RepelForceExtents; // 0x5ec
	float RepelForceMin; // 0x5f0
	float RepelForceMax; // 0x5f4
	bool ApplyRepelForceAtCentreOfMass; // 0x5f8
	FRuntimeFloatCurve RepelForceGradientCurve; // 0x600
	bool UseAngularImpulse; // 0x680
	float AngularImpulseRadius; // 0x684
	float AngularImpulseForce; // 0x68c
	float TargetDeflectionAngle; // 0x690
	bool IsSafeZoneEmpty; // 0x694
	bool StopAISpawning; // 0x695
	FName CurrentCollisionProfile; // 0x698
	ESafeZoneState SafeZoneState; // 0x6a0
};

struct AActorWithComponentWithDerivedTestInterface {
	UComponentWithDerivedTestInterface* ComponentWithDerivedTestInterface; // 0x3d0
};

struct UPetDitherComponent {
	bool FindMeshOnOwner; // 0xd0
	float FadeTime; // 0xd4
	TMap<UMeshComponent*, FDynamicMaterialsList> DynamicMaterialsPerMeshComponent; // 0xe8
	bool PurgeOverrideMatsOnDynamicMatMeshLoaded; // 0x1bc
	bool FadeInOnStart; // 0x1bd
};

struct UQuestBookPageLayout {
	TArray<FTreasureMapWidgetTexture> Images; // 0x28
	TArray<FTreasureMapWidgetLocalisedTextWithFontOverride> GeneralText; // 0x38
};

struct UDistributionVectorParameterBase {
	FName ParameterName; // 0x50
	FVector MinInput; // 0x58
	FVector MaxInput; // 0x64
	FVector MinOutput; // 0x70
	FVector MaxOutput; // 0x7c
	DistributionParamMode ParamModes[0x3]; // 0x88
};

struct UParticleModuleParameterDynamic_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x68
};

struct UBTDecorator_TargetOnShip {
	bool Invert; // 0x68
	EBT_ShipOwnership ShipOwnership; // 0x69
};

struct UGrenadeSetupDataAsset {
	FVector ServerThrowOffset; // 0x28
	FVector FirstPersonThrowOffset; // 0x34
	UCurveFloat* PitchToProjectileSpeedCurve; // 0x40
	UCurveFloat* ProjectileSpeedToAngleVarianceCurve; // 0x48
	float ProjectileGravityScale; // 0x50
	UCurveFloat* ExtraPitchCurve; // 0x58
	float MinPitch; // 0x60
	float MaxPitch; // 0x64
	float PlayerSpeedModifier; // 0x68
	float FirstPersonScaleModifier; // 0x6c
	float TimeToPreventThrowingAfterLeavingConcealment; // 0x70
	float TimeToEquip; // 0x74
	float MinTimeBetweenOfferingAndThrowing; // 0x78
	float TimeToConsumePostThrow; // 0x7c
	bool UseVisualThrowOffset; // 0x80
	float AIThrowDelayTime; // 0x84
	float AIThrowProjectileSpeed; // 0x88
	bool AIThrowPreferHigherAngles; // 0x8c
};

struct UNarratedAccessibilityComponent {
	float ContinuousNarrationCooldown; // 0xc8
	TScriptInterface<Class> SettingsInterface; // 0xd8
};

struct USkeletalMeshMemoryConstraintComponent {
	UMeshMemoryConstraintHandler* Handler; // 0x9a8
	TArray<FStringAssetReference> FallbackOverrideMaterials; // 0x9b0
	UMeshMemoryConstraintCategory* MeshFallbackCategory; // 0x9c0
	FStringAssetReference MeshReference; // 0x9c8
	int64_t CachedMeshResourceSize; // 0x9d8
	bool MemoryAccountedFor; // 0x9e0
	bool NeedMeshLoadOnServer; // 0x9e1
	UMeshMemoryConstraintBudget* BudgetToCountMemoryAgainstIfNoFallback; // 0x9e8
};

struct UAthenaClampedFreelookInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UPetDangerComponent {
	UPetDangerDataAsset* DangerDataAsset; // 0xc8
};

struct ATriggerBox {
	UShapeComponent* CollisionComponent; // 0x3d0
	UBillboardComponent* SpriteComponent; // 0x3d8
};

struct AMerchantCrateItemInfo {
	TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry> FaunaBreedRarity; // 0x710
	AActor* CurrentShip; // 0x778
};

struct UAthenaAICharacterPathFollowingComponent {
	float ProportionOfTurnToMove; // 0x2b8
	float MinAngleToTurnOnSpot; // 0x2bc
	float ReachedGoalMaxSpeedToSlowDistanceFactor; // 0x2c0
	float AbortMoveMaxSpeedToSlowDistanceFactor; // 0x2c4
	float MinSlowDownSpeed; // 0x2cc
};

struct ASimpleBootyWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UStatusApplicationMonitorComponent {
	UConditionalStatsTriggerType* StatusApplicationTrigger; // 0xc8
};

struct UMetalAIFormComponent {
	UParticleSystem* RustyParticlesTemplate; // 0x160
	USkeletonAudioFootfallControllerParams* DefaultFootfallParams; // 0x168
	USkeletonAudioFootfallControllerParams* RustyFootfallParams; // 0x170
	UMaterial* MetalBaseMaterial; // 0x178
	FName RustShaderParamName; // 0x198
	float NotRustyShaderParamValue; // 0x1a0
	float RustyShaderParamValue; // 0x1a4
	float ShaderParamBlendSpeed; // 0x1a8
	FName SeedShaderParamName; // 0x1ac
	int32_t MaxSeedShaderValue; // 0x1b4
	bool IsWet; // 0x1b8
	UParticleSystemComponent* RustyParticleSystemComponent; // 0x1c0
	UDamageableVulnerabilityLayer* DefaultVulnerabilityLayer; // 0x1d0
	UDamageableVulnerabilityLayer* RustyVulnerabilityLayer; // 0x1d8
	UCharacterHitReactionDamagerTypeToAnimTypeLayer* RustyHitReactionsLayer; // 0x1e0
	UMaterialInstanceDynamic* MetalDynamicMaterialInstance; // 0x1e8
};

struct UEnvQueryTest_InKrakenZone {
	float BufferRadius; // 0x170
};

struct UCargoRunParticipantComponent {
	UConditionalStatsTriggerType* ConditionalStatForBootyHandIn; // 0xd0
	TArray<FGuid> CrewsWithPickUpData; // 0x1b8
};

struct UDeliverableRedirectionNPCContextHandler {
	FGuid SpecificNPCId; // 0x30
};

struct UCloudDomeService {
	TArray<UObject*> RegisteredCloudDomes; // 0x30
};

struct UBTTask_ClearBlackboardValue {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UFeedableComponent {
	EFeedableType FeedableType; // 0xd0
	bool Feedable; // 0xd1
};

struct UCollectorsChestMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UTaleQuestLockCaptainCabinDoorStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UInvalidPetEntitlementBaseCategory {
	FName PetPreviewCamera; // 0x80
};

struct AAthenaFFTWater {
	UFFTWaterComponent* FFTWaterComponent; // 0x408
	UFFTWaterExtendedPlaneComponent* ExtendedPlaneComponent; // 0x410
};

struct UBTDecorator_ActorInWater {
	bool ReverseLogic; // 0x90
};

struct UDistributionVector {
	char bCanBeBaked : 1; // 0x30
	char bIsDirty : 1; // 0x30
};

struct UMerchantCrateProviderComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UAnimNotifyQuestBookForcePageRedraw {
	bool PlayedWithSequencer; // 0x28
};

struct UActorActivationComponent {
	float ActivationDuration; // 0xd0
	float DeactivationDuration; // 0xd4
	bool AutoDestroyOnDeactivation; // 0xd8
	FScriptMulticastDelegate OnActorActivationRequested; // 0xe0
	FScriptMulticastDelegate OnActorActivationCompleted; // 0xf0
	FScriptMulticastDelegate OnActorDeactivationRequested; // 0x100
	FScriptMulticastDelegate OnActorDeactivationCompleted; // 0x110
};

struct UAIPartIdListingAsset {
	TArray<FAIPartIdNumVariantInfo> AIPartIdsVariantInfo; // 0x28
};

struct UMaterialExpressionLumaAvg {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UCameraModifier {
	char bDebug : 1; // 0x28
	char bExclusive : 1; // 0x28
	char Priority; // 0x2c
	APlayerCameraManager* CameraOwner; // 0x30
	float AlphaInTime; // 0x38
	float AlphaOutTime; // 0x3c
	float Alpha; // 0x40
};

struct UCannonEnchantmentDescAsset {
	FCannonEnchantmentDesc CannonEnchantmentDesc; // 0x28
};

struct UMovieSceneTrack {
	FMovieSceneTrackEvalOptions EvalOptions; // 0x80
};

struct UPlayerHeroStatsComponent {
	TArray<FPlayerHeroStatUnit> HeroStats; // 0xc8
	TArray<int64_t> ServerValues; // 0xd8
};

struct UWashedUpMessageInABottleClueCreator {
	UClass* MessageInABottleItem; // 0x30
	int32_t LootItemSpawnXYDistanceFromClueIncrementMin; // 0x50
	int32_t LootItemSpawnXYDistanceFromClueIncrementMax; // 0x54
	int32_t LootItemSpawnZOffset; // 0x58
	float LootItemSinkIntoSandZDistanceMin; // 0x5c
	float LootItemSinkIntoSandZDistanceMax; // 0x60
	float LootItemSinkIntoSandRotationMin; // 0x64
	float LootItemSinkIntoSandRotationMax; // 0x68
	TArray<UClass*> SinkIntoSandItems; // 0x70
};

struct UBTTask_StopOccupyingHangoutSpot {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct ULogicalNotStatCondition {
	UStatCondition* StatCondition; // 0x28
};

struct UIsAIShipEncounterTypeStatCondition {
	EAIShipEncounterType EncounterType; // 0x28
};

struct UNPCDialogBinaryExpression {
	UNPCDialogExpression* Left; // 0x28
	UNPCDialogExpression* Right; // 0x30
};

struct UBellDescAsset {
	FBellDesc BellDesc; // 0x28
};

struct UBaseWorldMarker {
	FVector_NetQuantize MarkerPosition; // 0x28
	UWorldMarkerVariant* Variant; // 0x38
};

struct ATunnelOfTheDamned {
	USceneComponent* Root; // 0x3e0
	UStaticMeshComponent* TunnelCollisions; // 0x3e8
	UBoxComponent* TunnelOverlapZone; // 0x3f0
	FVector RelativeSpawnLocation; // 0x3f8
	AActor* VoyageVotingTableType; // 0x408
	AActor* CapstanType; // 0x410
	AActor* WheelType; // 0x418
	AActor* CannonPlayerLoadingInteractionPointType; // 0x420
	AActor* CannonType; // 0x428
	AActor* HarpoonType; // 0x430
	AActor* RowboatAttachPointType; // 0x438
	AActor* MapTableType; // 0x440
	AActor* RowboatType; // 0x448
	TArray<AActor*> LadderTypes; // 0x450
	UTunnelsOfTheDamnedLootFilterDataAsset* LootFilterDataAsset; // 0x460
	UTunnelDesc* Desc; // 0x468
	int32_t TunnelStreamingLevelId; // 0x470
	AActor* ShipInTunnel; // 0x478
	TArray<AActor*> CrewMembersInTunnel; // 0x480
	AActor* Endpoint; // 0x490
	ASequencerCutSceneActor* SequencerLevelActor; // 0x498
	ASequencerCutSceneActor* ShipSpecificSequencerLevelActor; // 0x4a0
	TScriptInterface<Class> ShipGetter; // 0x4a8
	TScriptInterface<Class> CrewService; // 0x4b8
	TScriptInterface<Class> CrewSpawnLocationsService; // 0x4c8
	TScriptInterface<Class> IslandService; // 0x4d8
	TScriptInterface<Class> PortalService; // 0x4e8
	AShipSpawnLocation* FailureFallbackShipSpawnLocation; // 0x4f8
	TArray<TScriptInterface<Class>> ActionStateFadeCompletedTargets; // 0x5d0
	TArray<TScriptInterface<Class>> FailureActionStateFadeCompletedTargets; // 0x5e0
};

struct UEnvQueryTest_InSeaRockZone {
	float Radius; // 0x170
};

struct UInterpData {
	float InterpLength; // 0x28
	float PathBuildTime; // 0x2c
	TArray<UInterpGroup*> InterpGroups; // 0x30
	UInterpCurveEdSetup* CurveEdSetup; // 0x40
	float EdSectionStart; // 0x48
	float EdSectionEnd; // 0x4c
	char bShouldBakeAndPrune : 1; // 0x50
	UInterpGroupDirector* CachedDirectorGroup; // 0x58
	TArray<FName> AllEventNames; // 0x60
};

struct UMovieSceneActorReferenceSection {
	FIntegralCurve ActorGuidIndexCurve; // 0xa0
	TArray<FString> ActorGuidStrings; // 0x120
};

struct UInventoryManipulatorComponent {
	float StashItemTimeout; // 0xd0
	float SlowStashItemTimeout; // 0xd4
	float WieldItemTimeout; // 0xd8
	UWwiseEvent* PickupSfx; // 0xe0
	TArray<FInventoryManipulatorAutoEquipPolicyEntry> AutoEquipPolicies; // 0xe8
	UDataTable* ItemWieldingParamsLookup; // 0xf8
	FInventoryMemory InventoryMemory; // 0x100
	TScriptInterface<Class> WieldableItemSetInterface; // 0x150
	TScriptInterface<Class> WieldedItemInterface; // 0x160
	UWieldingParamsAsset* CachedWieldParamsAsset; // 0x320
};

struct UMemoryConstrainedMeshInitializer {
	UObject* Mesh; // 0x30
	TArray<UMaterialInterface*> OverrideMaterials; // 0x38
	TArray<FStringAssetReference> FallbackOverrideMaterials; // 0x48
	FStringAssetReference MeshReference; // 0x58
	bool MemoryAccountedFor; // 0x68
	bool NeedMeshLoadOnServer; // 0x69
	int64_t CachedMeshResourceSize; // 0x70
	UMeshMemoryConstraintCategory* MeshFallbackCategory; // 0x78
	UMeshMemoryConstraintBudget* BudgetToCountMemoryAgainstIfNoFallback; // 0x80
};

struct AAIDockableWheel {
	UAIInteractableType* InteractableType; // 0x510
	float InteractableOffset; // 0x518
};

struct UPetPerchComponent {
	TArray<UPetDesc*> AllowedPetTypes; // 0x130
	int32_t HangoutSpotIndex; // 0x140
	FName HangoutSpotName; // 0x144
	FVector InteractionPointLocation; // 0x14c
	bool Enabled; // 0x158
	bool BlocksPetEmoteReactions; // 0x159
	bool IgnorePickupFromHangoutTooltipDisplayOffset; // 0x15a
};

struct UAISense {
	FColor DebugDrawColor; // 0x28
	FString DebugName; // 0x30
	float DefaultExpirationAge; // 0x40
	EAISenseNotifyType NotifyType; // 0x44
	char bWantsNewPawnNotification : 1; // 0x48
	char bAutoRegisterAllPawnsAsSources : 1; // 0x48
	UAIPerceptionSystem* PerceptionSystemInstance; // 0x50
};

struct UBTService_DefaultFocus {
	char FocusPriority; // 0x98
};

struct UStatusResponseApplyPersistentStatus {
	FStatus StatusToApply; // 0x30
	float DurationMultiplier; // 0x48
};

struct UParticleModuleKillOnFFTWater {
	EFFTWaterKillPointLocation FFTWaterKillPointLocation; // 0x50
	char bUseGroupAFFTWaterKillPointForAllGroups : 1; // 0x54
	EFFTWaterKillPointLocation AdditionalFFTWaterKillPointLocations[0x5]; // 0x58
};

struct UTaleQuestSetNPCDialogKeyStepDesc {
	FQuestVariableActor NPC; // 0x80
	FName Key; // 0x90
	FString Value; // 0x98
	FQuestVariableName KeyPin; // 0xa8
	FQuestVariableText ValuePin; // 0xb8
};

struct UDebugStoryStateSettings {
	FStringAssetReference DebugStoryStateAssetLocation; // 0x38
};

struct UKrakenShipWrappingBehaviourParamsDataAsset {
	FKrakenShipWrappingBehaviourParams Params; // 0x30
};

struct AAthenaAICharacterController {
	UAthenaAIItemParamsDataAsset* ItemParamsDataAsset; // 0x900
	ULoadoutAsset* FallbackLoadoutIfAllEngageItemsDropped; // 0x908
	float ControlRotationInterpSpeed; // 0x910
	bool ControlRotationUseConstantInterp; // 0x914
	bool FaceTargetDisabled; // 0x915
	float MinTurnAngleToPlayTurnAnim; // 0x918
	UAthenaAICharacterControllerParamsDataAsset* CharacterParamsDataAsset; // 0x930
	TArray<FAthenaAICharacterControllerSpawnItemDescForItemCategory> SpawnItemDescForItemCategories; // 0x9c8
	TArray<UAthenaAIAbilityParams*> AIAbilityParams; // 0x9d8
	TArray<FAthenaAIEngageEnemyData> NonItemEngageOptions; // 0x9e8
	UCurveFloat* DistanceInMToCannonShotHitChanceCurve; // 0x9f8
};

struct UMergedStaticMeshComponent {
	bool bDisplayMergedInEditor; // 0x5f0
	TArray<float> LODScreenSizes; // 0x5f8
	int32_t LODForCollision; // 0x608
	bool bMergeVertexColours; // 0x60c
};

struct UPremiumCatalogLandingPageItemDataAsset {
	FGuid Id; // 0x28
	TArray<FStringAssetReference> Images; // 0x38
	FText Title; // 0x48
	FText Description; // 0x80
	bool TimeLimited; // 0xb8
	bool TimeLimitedPrice; // 0xb9
	uint32_t Size; // 0xbc
	FName FeatureToggle; // 0xc0
	FStringAssetReference AccentImage; // 0xc8
	FStringAssetReference TopBannerImage; // 0xd8
	FStringAssetReference BottomBannerImage; // 0xe8
	FName IncludeForPromotion; // 0xf8
	FName ExcludeFromPromotion; // 0x100
};

struct AQuestBookItemInfo {
	bool CanBeStoredInInventory; // 0x3f0
	FScriptMulticastDelegate OnItemPickedUpDelegate; // 0x3f8
	FScriptMulticastDelegate OnItemDroppedDeletage; // 0x408
	AWieldableItem* WieldableType; // 0x418
	AActor* ProxyType; // 0x420
	UWieldableItemPersistentCooldownComponent* WieldableItemPersistenceCooldownComponent; // 0x428
	UItemDesc* Desc; // 0x430
	EItemRepresentation CurrentRepresentation; // 0x438
	AActor* CurrentRepresentationInstance; // 0x440
	AActor* CurrentOwner; // 0x448
	AActor* TutorialOwner; // 0x450
	bool DoNotConsiderForMigrationGather; // 0x4f9
};

struct AGhostShipPlayerSpawnLocation {
	FName PlayerStartTag; // 0x3f8
};

struct UFillCollectorsChestWithItemsDataAsset {
	FWeightedProbabilityRange NumberOfItemsToSpawn; // 0x28
	FWeightedItemDescSpawnDataAssetsWithWeights ItemsToSpawnInsideCollectorsChest; // 0x48
	UWeightedGoldRewardsDataAsset* GoldToSpawnInsideCollectorsChest; // 0x58
};

struct AFogBank {
	UFogBankDataAsset* FogBankDataAsset; // 0x3f8
	FFogBankSettings Settings; // 0x400
};

struct UShipFactory {
	TArray<UShipBuilder*> Builders; // 0x30
};

struct UTestCategory {
	FText Name; // 0x28
	FName UniqueTextIdentifier; // 0x60
	FStringAssetReference IconPath; // 0x68
};

struct UBurrowHealVFXComponent {
	UParticleSystem* VFXAsset; // 0xc8
	FName VfxSocketName; // 0xd0
	float VFXDuration; // 0xd8
	UParticleSystemComponent* SpawnedVFXSystem; // 0xe0
	bool IsVFXActive; // 0xe8
};

struct ATestInteractableObject {
	UOneShotInteractableFilterDesc* FilterDesc; // 0x410
	FText Verb; // 0x418
};

struct ALockedCollectorsChestItemInfo {
	FRewardId EmptyContainerRewardId; // 0x7b0
};

struct UParticleModuleLifetimeBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UNetworkSettings {
	char bVerifyPeer : 1; // 0x38
};

struct UFindNamedPointStepDesc {
	FQuestVariableOrientedPoint OutputOrientedPoint; // 0xd0
};

struct UCoordinatedKrakenPhaseActionsDataAsset {
	TArray<int32_t> TentaclesUsed; // 0x28
	bool KrakenHeadUsed; // 0x38
	TArray<FCoordinatedKrakenAction> Actions; // 0x40
};

struct ULeaderboardFlushCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct AProceduralFoliageBlockingVolume {
	AProceduralFoliageVolume* ProceduralFoliageVolume; // 0x408
};

struct UTaleQuestRetrieveSpawnedMerchantCaptainFromShipwreckStepDesc {
	FQuestVariableShipwreck ShipwreckSpawnedOn; // 0x80
	FQuestVariableActor SpawnedMerchantCaptain; // 0x90
};

struct UBookTaleQuestServiceDesc {
	UQuestBookItemDesc* QuestBookDesc; // 0x30
};

struct UBTService_UpdateLocationWithActorLocation {
	FBlackboardKeySelector LocationKey; // 0x70
	FBlackboardKeySelector ActorKey; // 0x98
};

struct UMigrationService {
	float BeaconRange; // 0x58
	float MigrationSetupRequestTimeoutInSeconds; // 0x5c
	TArray<AActor*> BeaconActorClasses; // 0x60
	TArray<AActor*> CollectedActorClasses; // 0x70
};

struct ADeepSeaRegionService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UFishingConditionStatTriggerType {
	FName UniqueTextIdentifier; // 0x28
};

struct AMigrationRelevancyClusterActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct AClothingChestInteraction {
	TArray<FFeaturedClothingCategory> Categories; // 0x448
	bool AllTab; // 0x458
	FClothingLoadout OriginalLoadout; // 0x668
	FClothingLoadout Loadout; // 0x678
};

struct UTreasureMapCollectionComponent {
	UTreasureMapItemDesc* XMarksTheSpotMapType; // 0x148
	UTreasureMapItemDesc* RiddleMapType; // 0x150
	UTreasureMapItemDesc* BountyMapType; // 0x158
	UTreasureMapItemDesc* MerchantMapType; // 0x160
	UTreasureMapItemDesc* CargoRunMapType; // 0x168
	UTreasureMapItemDesc* ContestMapType; // 0x170
	UTreasureMapItemDesc* TornMapType; // 0x178
	UTreasureMapItemDesc* LocationMapType; // 0x180
	TArray<ATreasureMap*> TreasureMaps; // 0x188
	TArray<FName> TreasureMapDestinationIslands; // 0x198
};

struct ASharkPawn {
	URammerComponent* RammerComponent; // 0x928
	USharkAICharacterAudioComponent* SharkAudioComponent; // 0x930
	bool AllowTestForQuickDeath; // 0x938
	float DistanceToGroundForQuickDeath; // 0x93c
	ECollisionChannel DistanceToGroundTestTraceChannel; // 0x940
	float CheckIntervalForQuickDeath; // 0x944
	uint32_t ExtentEstimationPow; // 0x948
	FCollisionProfileName CollisionComponentServerProfile; // 0x94c
	FCollisionProfileName CollisionComponentClientProfile; // 0x954
};

struct UDistantIdleAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UInvokeDamageStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UCannonRecoilComponent {
	float RecoilForce; // 0xc8
	UCurveFloat* YawToRecoilForceModifierCurve; // 0xd0
	bool IgnoreRecoilIfAttachedToParent; // 0xd8
};

struct ALanternWieldableReplica {
	FLinearColor LanternLightColour; // 0x518
	FLinearColor LanternGlowColour; // 0x528
	FLinearColor LanternFlameColour; // 0x538
	USpotLightComponent* LightComponent; // 0x548
	UAmbientLightSourceComponent* AmbientLightSourceComponent; // 0x550
};

struct ADebugMenu {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UPostProcessComponent {
	FPostProcessSettings Settings; // 0x2c0
	float Priority; // 0x800
	float BlendRadius; // 0x804
	float BlendWeight; // 0x808
	char bEnabled : 1; // 0x80c
	char bUnbound : 1; // 0x80c
};

struct UTextBlockWidgetStyle {
	FTextBlockStyle TextBlockStyle; // 0x30
};

struct UInventoryItemDescToSlotRemappingPolicyAsset {
	TArray<UItemDesc*> Slots; // 0x28
};

struct USirenTridentShotComponentAudioParams {
	UWwiseEvent* ChangeProjectileTierEvent; // 0x70
	FName DamageLevelAudioSwitchName; // 0x78
};

struct UStatusRecipientResponseList {
	TArray<UStatusResponseAsset*> ResponseAssets; // 0x28
	TArray<FFeatureToggledStatusResponseList> FeatureToggledResponseLists; // 0x38
	TArray<UStatusResponseAsset*> FinalResponseAssets; // 0x48
};

struct UEnvQueryGenerator_ActorsOfClass {
	FAIDataProviderFloatValue SearchRadius; // 0x50
	AActor* SearchedActorClass; // 0x80
	UEnvQueryContext* SearchCenter; // 0x88
};

struct UNPCHintDialogueClueDestinationGenerator {
	UClueSiteData* RequiredClueSiteDataType; // 0x28
	TArray<FWeightedClueDestinationDescriptor> WeightedSupportedDescriptorTypes; // 0x30
};

struct UBTService_UpdateTargetLocationForPassiveShip {
	FBlackboardKeySelector TargetLocationKey; // 0x70
};

struct UEnvQueryManager {
	TArray<FEnvQueryInstanceCache> InstanceCache; // 0x98
	TArray<UEnvQueryContext*> LocalContexts; // 0xa8
};

struct AEventRoom {
	bool ClearSpawnProgressOnRoomActivate; // 0x3d8
	TArray<AActor*> EntranceMechanisms; // 0x3e0
	TArray<AActor*> ExitMechanisms; // 0x3f0
	FScriptMulticastDelegate PlayerLeftRoomDelegate; // 0x400
	FScriptMulticastDelegate PlayerEnteredRoomDelegate; // 0x410
	UBoxComponent* RoomAreaComponent; // 0x420
	FScriptMulticastDelegate StartedDelegate; // 0x428
	FScriptMulticastDelegate FailDelegate; // 0x438
	FScriptMulticastDelegate CompletedDelegate; // 0x448
	FScriptMulticastDelegate AftermathStartedDelegate; // 0x458
};

struct ADeferredNameplateAttitudeTestActor {
	char bUseControllerRotationPitch : 1; // 0x3d8
	char bUseControllerRotationYaw : 1; // 0x3d8
	char bUseControllerRotationRoll : 1; // 0x3d8
	char bCanAffectNavigationGeneration : 1; // 0x3d8
	float BaseEyeHeight; // 0x3dc
	EAutoReceiveInput AutoPossessPlayer; // 0x3e0
	EAutoPossessAI AutoPossessAI; // 0x3e1
	AController* AIControllerClass; // 0x3e8
	APlayerState* PlayerState; // 0x3f0
	char RemoteViewPitch; // 0x3f8
	AController* LastHitBy; // 0x400
	AController* Controller; // 0x408
	FVector ControlInputVector; // 0x428
	FVector LastControlInputVector; // 0x434
};

struct UCommodityTokenEntitlementDesc {
	FName NPCToRedeemAt; // 0xd8
	UItemDesc* ItemToRedeemFor; // 0xe0
};

struct UPetWieldableReactMappingsDataAsset {
	TArray<FPetWieldableReactMapping> WieldableReactMappings; // 0x28
};

struct UStatusResponseExplodeAfterTime {
	float MinTimeUntilExplosion; // 0x30
	float MaxTimeUntilExplosion; // 0x34
	UWorld* CachedWorld; // 0x40
};

struct AAthenaHUD {
	bool PhotoModeEnabled; // 0x4f0
	TArray<FName> InputActionsToPropagate; // 0x4f8
	FPlayerTalkingSettings PlayerTalkingSettings; // 0x508
	bool VirtualKeyboardEnabled; // 0x538
	UCoherentUIGTTooltipComponent* CoherentTooltipsComponent; // 0x540
	UCoherentUIGTTooltipDetailedComponent* CoherentTooltipsDetailedComponent; // 0x548
	UCoherentUIGTNameplateComponent* CoherentNameplatesComponent; // 0x550
	UCoherentUIGTHUDComponent* CoherentHUDComponent; // 0x558
	UCoherentUIGTInGameMenusComponent* CoherentInGameMenusComponent; // 0x560
	UIslandEventTooltipComponent* IslandEventTooltipComponent; // 0x568
	UCoherentToWwiseEventComponent* CoherentToWwiseEventComponent; // 0x570
	UUIInputForwardComponent* InputForwardComponent; // 0x578
	UUITelemetryComponent* TelemetryComponent; // 0x580
	UCanvasWorldMapComponent* CanvasWorldMapComponent; // 0x588
	UWatermarkComponent* WatermarkComponent; // 0x590
	UShopViewModelComponent* ShopViewModelComponent; // 0x598
	UInGamePremiumShopViewModelComponent* PremiumShopViewModelComponent; // 0x5a0
	UMigrationUIComponent* MigrationUIComponent; // 0x5a8
	FHUDBlurParams BlurParameters; // 0x5b0
	UEquipmentChestViewModelComponent* EquipmentChestViewModelComponent; // 0x5c8
	UClothingChestViewModelComponent* ClothingChestViewModelComponent; // 0x5d0
	UArmoryChestViewModelComponent* ArmoryChestViewModelComponent; // 0x5d8
	UShipCustomizationChestViewModelComponent* ShipCustomizationChestViewModelComponent; // 0x5e0
	UVoyageInventoryViewModelComponent* VoyageInventoryViewModelComponent; // 0x5e8
	UPiratePreviewComponent* PiratePreviewComponent; // 0x5f0
	UPetChestViewModelComponent* PetChestViewModelComponent; // 0x5f8
	UItemPreviewComponent* ItemPreviewComponent; // 0x600
	UEntitlementInformationComponent* EntitlementInformationComponent; // 0x608
	UHttpClientComponent* HttpClientComponent; // 0x610
	UFont* PerfCounterFont; // 0x618
	UPiratePreviewComponentPirateProfileRTT* PirateProfileRTTComponent; // 0x620
	FHUDBlur Blur; // 0x648
	UAthenaDebugMenuComponent* AthenaDebugMenuComponent; // 0x660
	TArray<UCoherentUIGTInstancedComponent*> CoherentComponents; // 0x728
};

struct UFoodItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UKrakenShipWrappingTentacleAIAudioComponent {
	UKrakenShipWrappingTentacleAIAudioComponentParams* Params; // 0x2e0
	FWwiseEmitter KrakenTentacleEmitter; // 0x2e8
};

struct UTexture {
	int32_t LODBias; // 0x28
	int32_t NumCinematicMipLevels; // 0x2c
	char SRGB : 1; // 0x30
	char NeverStream : 1; // 0x30
	char bNoTiling : 1; // 0x30
	char bUseCinematicMipLevels : 1; // 0x30
	char CompressionNone : 1; // 0x30
	char bUAV : 1; // 0x30
	uint32_t MaxQualityReduction; // 0x34
	int32_t CachedCombinedLODBias; // 0x38
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x3c
	TextureCompressionSettings CompressionSettings; // 0x40
	TextureFilter Filter; // 0x41
	TextureGroup LODGroup; // 0x42
	float StreamingPriorityBoost; // 0x44
	TArray<FExternalMip> ExternalMips; // 0xa0
};

struct UPiratePreviewComponent {
	FName DefaultCamera; // 0x168
	UClass* ClassToSpawn; // 0x170
	FIntPoint DefaultResolution; // 0x190
	FPiratePreviewView CurrentView; // 0x198
	TArray<UClothingCategory*> CurrentlySuppressedCategories; // 0x1b8
	URenderToTextureSceneDetails* Details; // 0x1e0
	FClothingLoadout ClothingLoadout; // 0x1e8
};

struct UTextureSwitch {
	bool bDuplicated; // 0x1c0
	FTextureSwitchParameters DefaultParameters; // 0x1c8
};

struct UPreviewCharacterAnimationInstance {
	UAnimMontage* ActiveMontage; // 0x660
};

struct UItemLoaderComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AAthenaGameState {
	AWindService* WindService; // 0x5b8
	APlayerManagerService* PlayerManagerService; // 0x5c0
	AShipService* ShipService; // 0x5c8
	AWatercraftService* WatercraftService; // 0x5d0
	ATimeService* TimeService; // 0x5d8
	UHealthCustomizationService* HealthService; // 0x5e0
	UCustomWeatherService* CustomWeatherService; // 0x5e8
	UCustomStatusesService* CustomStatusesService; // 0x5f0
	AFFTWaterService* WaterService; // 0x5f8
	AStormService* StormService; // 0x600
	ACrewService* CrewService; // 0x608
	AContestZoneService* ContestZoneService; // 0x610
	AContestRowboatsService* ContestRowboatsService; // 0x618
	AIslandService* IslandService; // 0x620
	ANPCService* NPCService; // 0x628
	ASkellyFortService* SkellyFortService; // 0x630
	ADeepSeaRegionService* DeepSeaRegionService; // 0x638
	AAIDioramaService* AIDioramaService; // 0x640
	AAshenLordEncounterService* AshenLordEncounterService; // 0x648
	AAggressiveGhostShipsEncounterService* AggressiveGhostShipsEncounterService; // 0x650
	ATallTaleService* TallTaleService; // 0x658
	AAIShipObstacleService* AIShipObstacleService; // 0x660
	AAIShipService* AIShipService; // 0x668
	AAITargetService* AITargetService; // 0x670
	UShipLiveryCatalogueService* ShipLiveryCatalogueService; // 0x678
	AContestManagerService* ContestManagerService; // 0x680
	ADrawDebugService* DrawDebugService; // 0x688
	AWorldEventZoneService* WorldEventZoneService; // 0x690
	UWorldResourceRegistry* WorldResourceRegistry; // 0x698
	AKrakenService* KrakenService; // 0x6a0
	UPlayerNameService* PlayerNameService; // 0x6a8
	ATinySharkService* TinySharkService; // 0x6b0
	AProjectileService* ProjectileService; // 0x6b8
	ULaunchableProjectileService* LaunchableProjectileService; // 0x6c0
	UServerNotificationsService* ServerNotificationsService; // 0x6c8
	AAIManagerService* AIManagerService; // 0x6d0
	AAIEncounterService* AIEncounterService; // 0x6d8
	AAIEncounterGenerationService* AIEncounterGenerationService; // 0x6e0
	UEncounterService* EncounterService; // 0x6e8
	UGameEventSchedulerService* GameEventSchedulerService; // 0x6f0
	UHideoutService* HideoutService; // 0x6f8
	UAthenaStreamedLevelService* StreamedLevelService; // 0x700
	ULocationProviderService* LocationProviderService; // 0x708
	AHoleService* HoleService; // 0x710
	APlayerBuriedItemService* PlayerBuriedItemService; // 0x718
	ULoadoutService* LoadoutService; // 0x720
	UOcclusionService* OcclusionService; // 0x728
	UPetsService* PetsService; // 0x730
	UAthenaAITeamsService* AthenaAITeamsService; // 0x738
	AAllianceService* AllianceService; // 0x740
	UMaterialAccessibilityService* MaterialAccessibilityService; // 0x748
	AReapersMarkService* ReapersMarkService; // 0x750
	AEmissaryLevelService* EmissaryLevelService; // 0x758
	ACampaignService* CampaignService; // 0x760
	AStoryService* StoryService; // 0x768
	AStorySpawnedActorsService* StorySpawnedActorsService; // 0x770
	AFlamesOfFateSettingsService* FlamesOfFateSettingsService; // 0x778
	AServiceStatusNotificationsService* ServiceStatusNotificationsService; // 0x780
	UMigrationService* MigrationService; // 0x788
	AShroudBreakerService* ShroudBreakerService; // 0x790
	UServerUpdateReportingService* ServerUpdateReportingService; // 0x798
	AGenericMarkerService* GenericMarkerService; // 0x7a0
	AMechanismsService* MechanismsService; // 0x7a8
	UMerchantContractsService* MerchantContractsService; // 0x7b0
	UShipFactory* ShipFactory; // 0x7b8
	URewindPhysicsService* RewindPhysicsService; // 0x7c0
	UNotificationMessagesDataAsset* NotificationMessagesDataAsset; // 0x7c8
	AProjectileCooldownService* ProjectileCooldownService; // 0x7d0
	UIslandReservationService* IslandReservationService; // 0x7d8
	APortalService* PortalService; // 0x7e0
	UMeshMemoryConstraintService* MeshMemoryConstraintService; // 0x7e8
	ABootyStorageService* BootyStorageService; // 0x7f0
	ASpireService* SpireService; // 0x7f8
	AFireworkService* FireworkService; // 0x800
	UAirGivingService* AirGivingService; // 0x808
	UCutsceneService* CutsceneService; // 0x810
	ACargoRunService* CargoRunService; // 0x818
	ACommodityDemandService* CommodityDemandService; // 0x820
	ADebugTeleportationDestinationService* DebugTeleportationDestinationService; // 0x828
	ASeasonProgressionUIService* SeasonProgressionUIService; // 0x830
	UTransientActorService* TransientActorService; // 0x838
	UTunnelsOfTheDamnedService* TunnelsOfTheDamnedService; // 0x840
	UWorldSequenceService* WorldSequenceService; // 0x848
	UItemLifetimeManagerService* ItemLifetimeManagerService; // 0x850
	USeaFortsService* SeaFortsService; // 0x858
	ABeckonService* BeckonService; // 0x860
	UVolcanoService* VolcanoService; // 0x868
	UShipAnnouncementService* ShipAnnouncementService; // 0x870
	FGameServiceCoordinator ServiceCoordinator; // 0x9f8
	TArray<TScriptInterface<Class>> ChatComponents; // 0xa40
	bool IsXboxGamePadOnlyServer; // 0xad0
	bool ShouldDisableAsyncOcclusionCheck; // 0xad1
	FString SubPlayMode; // 0xad8
	UCustomVaultService* CustomVaultService; // 0xae8
	UEntityEnumerationService* EntityEnumerationService; // 0xaf0
};

struct ADoubleActionItemWithAmmo {
	bool bShouldShowAmmoUI; // 0x958
	int32_t AmmoMax; // 0x95c
	int32_t AmmoLeft; // 0x960
};

struct UBTTask_AthenaRunEQSQuery {
	FBlackboardKeySelector KeyToSetToTrueIfNoValidLocationFound; // 0xa8
	FBlackboardKeySelector ReasonStringKeyIfNoValidLocationFound; // 0xd0
	bool ThrottleQueryTimePerFrame; // 0xf8
	float MaxSecondsToSpendOnQueryPerFrame; // 0xfc
};

struct AAthenaCalmWaterZone {
	UCalmWaterComponent* CalmWaterComponent; // 0x3d0
};

struct UChannel {
	UNetConnection* Connection; // 0x28
};

struct UKnockdownElevatorAction {
	float HardPhaseHeight; // 0x28
	float SoftPhaseHeight; // 0x2c
	float DropDistance; // 0x30
	UWwiseEvent* StartKnockdownEvent; // 0x38
	UWwiseEvent* EndKnockdownEvent; // 0x40
};

struct UAIIncrementalWaveSpawner {
	FAISpawnerWave SpawnedWave; // 0x428
};

struct UParticleModuleTypeDataAnimTrail {
	char bDeadTrailsOnDeactivate : 1; // 0x50
	char bEnablePreviousTangentRecalculation : 1; // 0x50
	char bTangentRecalculationEveryFrame : 1; // 0x50
	float TilingDistance; // 0x54
	float DistanceTessellationStepSize; // 0x58
	float TangentTessellationStepSize; // 0x5c
	float WidthTessellationStepSize; // 0x60
};

struct USoundNodeAssetReferencer {
	TArray<USoundNode*> ChildNodes; // 0x28
};

struct APlayerStart {
	FName PlayerStartTag; // 0x3f8
};

struct UQuestBookItemDesc {
	UQuestBookPageList* PageList; // 0x130
};

struct AProgressSpawnLocation {
	UProgressLocationId* ProgressId; // 0x410
};

struct UMovieSceneCameraShakeTrack {
	TArray<UMovieSceneSection*> CameraShakeSections; // 0x88
};

struct AGenericPart {
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x3d0
};

struct UWorld {
	ULevel* PersistentLevel; // 0x30
	UNetDriver* NetDriver; // 0x38
	ULineBatchComponent* LineBatcher; // 0x40
	ULineBatchComponent* PersistentLineBatcher; // 0x48
	ULineBatchComponent* ForegroundLineBatcher; // 0x50
	AGameState* GameState; // 0x58
	AGameNetworkManager* NetworkManager; // 0x60
	UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x68
	TArray<UObject*> ExtraReferencedObjects; // 0x70
	TArray<UObject*> PerModuleDataObjects; // 0x80
	TArray<ULevelStreaming*> StreamingLevels; // 0x90
	FString StreamingLevelsPrefix; // 0xa0
	ULevel* CurrentLevelPendingVisibility; // 0xb0
	AParticleEventManager* MyParticleEventManager; // 0xb8
	APhysicsVolume* DefaultPhysicsVolume; // 0xc0
	TArray<ULevelStreaming*> DirtyStreamingLevels; // 0xc8
	FName Feature; // 0xf4
	TArray<FName> FeatureReferences; // 0x100
	bool ParticleLOD_bUseGameThread; // 0x110
	bool ParticleLOD_bUseMultipleViewportCase; // 0x111
	FVector ParticleLOD_PlayerViewpointLocation; // 0x114
	FString TestMetadata; // 0x120
	UNavigationSystem* NavigationSystem; // 0x130
	AGameMode* AuthorityGameMode; // 0x138
	UAISystemBase* AISystem; // 0x140
	UAvoidanceManager* AvoidanceManager; // 0x148
	TArray<ULevel*> Levels; // 0x150
	ULevel* CurrentLevel; // 0x1b0
	UGameInstance* OwningGameInstance; // 0x1c0
	TArray<UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x1c8
	UWorldComposition* WorldComposition; // 0x798
	char bAreConstraintsDirty : 1; // 0x7dd
};

struct UEmissaryRepresentationMeshComponent {
	int32_t ForcedLodModel; // 0x598
	bool bOverrideMinLOD; // 0x59c
	bool bOverrideNavigationToDefaultObstacle; // 0x59d
	int32_t MinLOD; // 0x5a0
	UStaticMesh* StaticMesh; // 0x5a8
	bool bOverrideWireframeColor; // 0x5b0
	FColor WireframeColorOverride; // 0x5b4
	char bIgnoreInstanceForTextureStreaming : 1; // 0x5b8
	char bOverrideLightMapRes : 1; // 0x5b8
	int32_t OverriddenLightMapRes; // 0x5bc
	float StreamingDistanceMultiplier; // 0x5c0
	TArray<FGuid> IrrelevantLights; // 0x5c8
	TArray<FStaticMeshComponentLODInfo> LODData; // 0x5d8
	UMaterialInterface* CustomDepthMaterial; // 0x5e8
};

struct UAnimNotifyWwiseEmitterComponent {
	FWwiseEmitter Emitter; // 0x2b8
	UWwiseObjectPoolWrapper* WwiseObjectPoolWrapper; // 0x2d8
};

struct USynchedMusicZoneComponent {
	float StartDelayTime; // 0x370
	int32_t PlayFromStartTimeMS; // 0x374
};

struct UShipCreatureManagerComponent {
	TArray<FActorComponentSelector> CreatureMeshComponents; // 0xc8
	TArray<FShipCreatureManagerCreatureInstance> CreatureInstances; // 0xd8
	USceneComponent* CreatureMeshAttachParent; // 0xe8
};

struct UFlintlockItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UShantyItemDesc {
	FShantyData ShantyData; // 0xd8
	FStringAssetReference BackgroundPath; // 0x108
};

struct UMovieSceneSlomoTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct AInteractorTestProxyObject {
	FString InteractableAttachParentCompName; // 0x3d0
	FString InteractablesServiceComponentName; // 0x3e0
	TArray<FString> PreTestConsoleCommands; // 0x3f0
	AWieldableItem* WieldableItemForTest; // 0x400
};

struct UNPCDialogOptionStorageContainerTake {
	FText Text; // 0x80
	FText EmptyText; // 0xb8
	FText NoInventorySpaceText; // 0xf0
};

struct UStatusResponseChangeCannonRotation {
	float TargetPitchAngle; // 0x30
	float TargetYawAngle; // 0x34
	float RotationsBlendTime; // 0x38
};

struct UWeightedItemDescSpawnDataAsset {
	TArray<FWeightedItemDescSpawnData> WeightedItemSpawnDatas; // 0x28
};

struct USirenPartsDesc {
	UAnimationDataStoreId* AnimationID; // 0x80
};

struct UEnvQueryTest_InShipwreckZone {
	float Radius; // 0x170
};

struct UAIRegionComponent {
	bool UpdateRegionPosition; // 0x2b8
	FName NavMeshAgentType; // 0x2bc
	float RegionRadius; // 0x2c4
	TArray<FSpawnLocationGroup> SpawnLocationGroups; // 0x2c8
};

struct UCostumeEmoteRadialContentRule {
	UEmoteSettings* EmoteSettings; // 0xd0
};

struct UTankardItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct ULevelScriptBlueprint {
	char bRecompileOnLoad : 1; // 0x50
	UObject* ParentClass; // 0x58
	UObject* PRIVATE_InnermostPreviousCDO; // 0x60
	char bHasBeenRegenerated : 1; // 0x68
	char bIsRegeneratingOnLoad : 1; // 0x68
	USimpleConstructionScript* SimpleConstructionScript; // 0x70
	TArray<UActorComponent*> ComponentTemplates; // 0x78
	TArray<UTimelineTemplate*> Timelines; // 0x88
	UInheritableComponentHandler* InheritableComponentHandler; // 0x98
	EBlueprintType BlueprintType; // 0xa0
	int32_t BlueprintSystemVersion; // 0xa4
};

struct UKrakenTentacleAIAudioComponent {
	float MouthHeightOffset; // 0x2e0
	UKrakenTentacleAIAudioComponentParams* KrakenTentacleAudioParams; // 0x2e8
	FWwiseEmitter KrakenTentacleMouthEmitter; // 0x2f0
};

struct UHeightTriggerableEffectsComponent {
	UHeightTriggerableAudioComponentParams* AudioParams; // 0xc8
	FActorComponentSelector EmitterOwner; // 0xd0
	FVector EmitterOffset; // 0xe0
	bool UseParentEmitter; // 0xec
	float RisingAudioTriggerValue; // 0xf0
	UCameraShake* CameraShake; // 0xf8
	float ShakeInnerRadius; // 0x100
	float ShakeOuterRadius; // 0x104
};

struct UNPCOnSurfaceLocationDataAsset {
	TArray<FNPCOnSurfaceShipSizeFloodedLevels> ShipSizeFloodLevels; // 0x28
	TArray<FNPCOnSurfaceLocationGroup> Groups; // 0x38
	FVector FireTestOffset; // 0x48
};

struct UTaleQuestGetPhasedVersionOfActorFromAssetMapStepDesc {
	FQuestVariableActor ExistingNPCActor; // 0x80
	FQuestVariableActorAssetType ObtainedPhasedNPCActorType; // 0x90
	FQuestVariableActor PhasingSourceActor; // 0xa0
	UExistingToPhasedNPCIndexAssetMap* IndexAssetMap; // 0xb0
};

struct UBurrowHealAIAbility {
	TArray<FVector> LocationsToSpawnCrack; // 0x78
	FTimerHandle TimerHandleStartNextSpawnWave; // 0x88
	AActor* CachedTarget; // 0x90
	bool bExecuting; // 0x124
	bool bProcessingSpawnLocations; // 0x125
};

struct UMovieSceneAkAudioEventSection {
	UWwiseEvent* Event; // 0x98
};

struct UShipwreckSiteGeneratorRandomComponent {
	UShipwreckSiteGeneratorRandom* SiteGenAsset; // 0xc8
};

struct AShroudBreakerOnShip {
	AAthenaWorldSettings* AthenaWorldSettings; // 0x3d0
	float DistanceToSafeZoneInRange; // 0x3d8
	EShroudBreakerActivationStateEnum ShroudBreakerActivationState; // 0x3dc
	bool IsShroudBreakerDeactivating; // 0x3dd
	EAthenaSafeZoneEnum TargetSafeZone; // 0x3de
};

struct UParticleModuleTypeDataRibbon {
	int32_t MaxTessellationBetweenParticles; // 0x50
	int32_t SheetsPerTrail; // 0x54
	int32_t MaxTrailCount; // 0x58
	int32_t MaxParticleInTrailCount; // 0x5c
	char bDeadTrailsOnDeactivate : 1; // 0x60
	char bDeadTrailsOnSourceLoss : 1; // 0x60
	char bClipSourceSegement : 1; // 0x60
	char bEnablePreviousTangentRecalculation : 1; // 0x60
	char bTangentRecalculationEveryFrame : 1; // 0x60
	char bSpawnInitialParticle : 1; // 0x60
	ETrailsRenderAxisOption RenderAxis; // 0x64
	float TangentSpawningScalar; // 0x68
	char bRenderGeometry : 1; // 0x6c
	char bRenderSpawnPoints : 1; // 0x6c
	char bRenderTangents : 1; // 0x6c
	char bRenderTessellation : 1; // 0x6c
	float TilingDistance; // 0x70
	float DistanceTessellationStepSize; // 0x74
	char bEnableTangentDiffInterpScale : 1; // 0x78
	float TangentTessellationScalar; // 0x7c
};

struct APetActionStateCreatorDefinition {
	FPetSpawnActionStateParams SpawnParams; // 0x3d0
	FPetDespawnActionStateParams DespawnParams; // 0x410
	FHideInObjectActionStateParams HideInObjectParams; // 0x450
	FFiredFromActorActionStateParams FiredFromActorParams; // 0x478
};

struct UAthenaStreamedLevelDataAsset {
	TArray<FStringAssetReference> LevelsToLoad; // 0x28
	FString PackagePath; // 0x38
	FName StreamingLevelFeature; // 0x48
	TArray<EPlayMode> RequiredPlayModes; // 0x50
};

struct UBTDecorator_CompareBlackboardValues {
	TArray<FBlackboardValueCondition> FloatConditions; // 0x68
	EBlackboardValueCompositeType FloatConditionComposite; // 0x78
};

struct UStandardRudderDynamicsDesc {
	FStandardRudderDynamicsParameters Parameters; // 0x28
	UCurveFloat* ShipSpeedToSteeringBoostCurve; // 0x30
};

struct UCompassItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct ASailManipulator {
	FRopeVisualParams RopeVisuals; // 0x518
	float RopeLength; // 0x524
	UStaticMeshComponent* BaseMeshComponent; // 0x528
	UStaticMeshComponent* TopMeshComponent; // 0x530
	UFixedIntentComponent* CurseIntentComponent; // 0x538
	UWwiseObjectPoolWrapper* ManipulatorAudioPool; // 0x540
	FSocketId MastSocketId; // 0x548
	USailManipulatorAudioParams* AudioParams; // 0x568
	USceneComponent* MastSocketSceneComponent; // 0x570
	FWwiseEmitter AudioEmitter; // 0x578
	AMast* BoundMast; // 0x798
	AMast* PendingBoundMast; // 0x7a0
	bool Locked; // 0x7a8
	UMobileInstancedStaticMeshComponent* TopMeshInstanceComponent; // 0x7b0
};

struct UBlueprintStepBase {
	ETaleQuestStepBeginMode BeginMode; // 0x28
	UTaleQuestBlueprintStepDesc* Desc; // 0x30
};

struct APlayerBuriedItemService {
	TArray<ATavernBoard*> RegisteredTavernBoards; // 0x3e0
	TArray<FPlayerBuriedItemServiceNumMapsTakenFromStoreThisDayPerCrew> NumMapsTakenFromStoreThisDayPerCrew; // 0x3f0
	UPlayerBuriedItemServiceDataAsset* DataAsset; // 0x400
	UPlayerBuriedItemServiceMapStorePopulator* MapStorePopulator; // 0x408
};

struct UPawnAction_BlueprintBase {
	UPawnAction* ChildAction; // 0x28
	UPawnAction* ParentAction; // 0x30
	UPawnActionsComponent* OwnerComponent; // 0x38
	UObject* Instigator; // 0x40
	UBrainComponent* BrainComp; // 0x48
	char bAllowNewSameClassInstance : 1; // 0x78
	char bReplaceActiveSameClassInstance : 1; // 0x78
	char bShouldPauseMovement : 1; // 0x78
};

struct UMaterialExpressionCustomVelocity {
	FExpressionInput Velocity2D; // 0x70
};

struct UBTTask_SetBlackboardFloatValue {
	FAIDataProviderFloatValue FloatValue; // 0x88
};

struct UIsWearingClothingNPCDialogConditional {
	TArray<UClothingDesc*> Clothes; // 0x30
	int32_t MinimumRequiredItems; // 0x40
};

struct AMermaid {
	UAIPartsRetrievalComponent* AIPartsRetrievalComponent; // 0x480
	FWaterBuoyancy Buoyancy; // 0x490
	UCurveFloat* BuoyancyScalarWhenDisappearing; // 0x5c0
	FName InteractionSocket; // 0x5c8
	FName ClientWorldHitsCollisionProfile; // 0x5d0
	FName TorchVfxSocketName; // 0x5d8
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x5e0
	UWwiseObjectPoolWrapper* SfxPool; // 0x600
	UObject* BeaconVfx; // 0x608
	UObject* BeaconVfxUnderwater; // 0x610
	UObject* SurfacingSplash; // 0x618
	UObject* DiveSplash; // 0x620
	UObject* TorchVfx; // 0x628
	UWwiseEvent* PlaySongEvent; // 0x630
	UWwiseEvent* StopSongEvent; // 0x638
	UWwiseEvent* PlayTorchCrackleFx; // 0x640
	UWwiseEvent* StopTorchCrackleFx; // 0x648
	UWwiseEvent* SurfacingAudioEvent; // 0x650
	UWwiseEvent* DiveAudioEvent; // 0x658
	UWwiseEvent* TeleportSfxEvent; // 0x660
	TArray<FMermaidAnimMapping> AnimMap; // 0x668
	float ChoppinessScalar; // 0x678
	float MinProximityToWaterSurfaceToConsiderSurfaced; // 0x67c
	float MinDistanceFromEdgeOfWorld; // 0x680
	float LowestZToDestroySelf; // 0x684
	float MaxDisappearTime; // 0x688
	float TimeIntoDiveToPlayFx; // 0x68c
	float FacePlayerSpringAccel; // 0x690
	float GlueToWaterSurfaceSpringAccel; // 0x694
	float BlendToWaterSurfaceTimeWhenSurfacing; // 0x698
	float BlendAwayFromWaterSurfaceTimeWhenDiving; // 0x69c
	float PreferredWaterSubmersionOfModel; // 0x6a0
	float CollisionRetainTime; // 0x6a4
	float MaxTimeCollidingWithLandUntilDestroy; // 0x6a8
	float MaxTimeCollidingWithShipUntilDestroy; // 0x6ac
	float MaxZOutOfWaterToCountAsOutOfWaterWhenHittingShip; // 0x6b0
	USkeletalMeshMemoryConstraintComponent* Mesh; // 0x6b8
	bool bGlueToSurface; // 0x6c0
	UPrimitiveComponent* PrimitiveRootComponent; // 0x6e0
	UParticleSystemComponent* BeaconParticleSystem; // 0x738
	UParticleSystemComponent* UnderwaterBeaconParticleSystem; // 0x740
	UParticleSystemComponent* TorchParticleSystem; // 0x748
	FNetTimeStampCalculator MovementTimeStamp; // 0x750
	EMermaidState State; // 0x7c0
};

struct UAddItemsFromDataToCollectorsChestStepDesc {
	FQuestVariableDataAsset ItemData; // 0xd0
};

struct UStorageContainerSettings {
	FStringAssetReference StorageContainerComponentDataAssetLocation; // 0x38
	float QuickTransferDefaultRate; // 0x48
	float QuickTransferMyCrewShipRate; // 0x4c
	float QuickTransferOtherCrewShipRate; // 0x50
};

struct UItemProxyWatercraftTrackerComponent {
	UItemProxyWatercraftTrackerComponentDataAsset* WatercraftTrackingData; // 0xd0
	AActor* CurrentWatercraft; // 0xd8
};

struct UPlayersSettings {
	FStringAssetReference PlayerNameDataAssetLocation; // 0x38
};

struct UAISystemBase {
	FStringClassReference AISystemClassName; // 0x28
	FName AISystemModuleName; // 0x38
};

struct UTaleQuestSpawnWashedUpMessageInABottleClueStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct APosablePirate {
	USkeletalMeshComponent* PirateMeshComponent; // 0x3d0
	EIPGGender Gender; // 0x3d8
	bool UseIPG; // 0x3d9
	APirateGeneratorService* GeneratorServiceActor; // 0x3e0
	TArray<UClothingDesc*> Outfit; // 0x470
};

struct UWaterSplashComponent {
	FScriptMulticastDelegate OnEnteredWater; // 0xc8
	FScriptMulticastDelegate OnExitedWater; // 0xd8
	FScriptMulticastDelegate OnReachedTooDeepToExist; // 0xe8
	UObject* EnterWaterParticleSystem; // 0x100
	UWwiseEvent* EnterWaterSfx; // 0x108
	UWwiseObjectPoolWrapper* EnterWaterSfxWisePoolToUse; // 0x110
	UObject* ExitWaterParticleSystem; // 0x118
	UWwiseEvent* ExitWaterSfx; // 0x120
	UWwiseObjectPoolWrapper* ExitWaterSfxWisePoolToUse; // 0x128
	EAttachLocation ParticleSystemAttachLocation; // 0x130
	bool UseComplexWaterHeightDetection; // 0x131
	bool SpawnParticleSystemsAttached; // 0x132
	bool SpawnParticleSystemsAlignedVertically; // 0x133
	bool TriggerOnEntry; // 0x134
	bool TriggerOnExit; // 0x135
	bool AllowRepeatedEntryTriggers; // 0x136
	bool AllowRepeatedExitTriggers; // 0x137
	float DeepWaterThreshold; // 0x138
	float OceanFloorThreshold; // 0x13c
	float MinimumFallDistance; // 0x140
};

struct UGameNetworkManagerSettings {
	int32_t MinDynamicBandwidth; // 0x28
	int32_t MaxDynamicBandwidth; // 0x2c
	int32_t TotalNetBandwidth; // 0x30
	int32_t BadPingThreshold; // 0x34
	char bIsStandbyCheckingEnabled : 1; // 0x38
	float StandbyRxCheatTime; // 0x3c
	float StandbyTxCheatTime; // 0x40
	float PercentMissingForRxStandby; // 0x44
	float PercentMissingForTxStandby; // 0x48
	float PercentForBadPing; // 0x4c
	float JoinInProgressStandbyWaitTime; // 0x50
};

struct UInventoryItemCategoryToSlotRemappingAsset {
	TArray<FCategorySpec> Slots; // 0x28
};

struct ULoadableComponent {
	float LoadTime; // 0xd0
	float UnloadTime; // 0xd4
	UItemDesc* DefaultObjectToLoad; // 0xd8
	FTransform UnloadingPoint; // 0x130
	FLoadableComponentState LoadableComponentState; // 0x178
	bool AlwaysLoaded; // 0x188
};

struct UMovieSceneFadeSection {
	FLinearColor FadeColor; // 0x118
	char bFadeAudio : 1; // 0x128
};

struct ASpireShippingDrawDebugActorSphereCollection {
	TArray<TWeakObjectPtr<ASpireResource>> SpireList; // 0x3e0
};

struct UInstancedStaticMeshComponent {
	TArray<FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x5f0
	int32_t InstancingRandomSeed; // 0x600
	int32_t InstanceStartCullDistance; // 0x604
	int32_t InstanceEndCullDistance; // 0x608
	TArray<int32_t> InstanceReorderTable; // 0x610
	TArray<int32_t> RemovedInstances; // 0x620
	UPhysicsSerializer* PhysicsSerializer; // 0x678
	int32_t NumPendingLightmaps; // 0x680
	TArray<FInstancedStaticMeshMappingInfo> CachedMappings; // 0x688
};

struct UAISkillsetTypeList {
	TArray<UAthenaAIControllerParamsDataAsset*> AllSkillsets; // 0x28
};

struct UVoyageRecipesDebugMenuEntryGenerator {
	bool Regenerate; // 0x28
	TArray<FStringAssetReference> Recipes; // 0x30
	TArray<FStringClassReference> Proposals; // 0x40
	TArray<FStringAssetReference> DescAssets; // 0x50
	TArray<FString> AssetNames; // 0x60
};

struct UCutsceneComponent {
	TArray<FText> LocalisedNames; // 0xd8
	UCutsceneDataAsset* CutsceneAsset; // 0xe8
	AActor* CutSceneActor; // 0xf0
	AActor* CutsceneActorType; // 0xf8
	TScriptInterface<Class> CutsceneActorInterface; // 0x100
	float MaxPlayRange; // 0x110
	float DelayBeforeDequeueAttempt; // 0x114
};

struct AHotTub {
	UInteractableComponent* InteractableComponent; // 0x3d8
	float LiquidCollectionAmount; // 0x3e0
	USceneComponent* Root; // 0x3e8
	UShapeComponent* CollisionComponent; // 0x3f0
	TArray<AAthenaPlayerState*> PlayersInHotTub; // 0x428
};

struct UAthenaLocalPlayer {
	UGameViewportClient* ViewportClient; // 0x60
	EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0xa8
	APlayerController* PendingLevelPlayerControllerClass; // 0xb0
	char bSentSplitJoin : 1; // 0xb8
	float MinimumAspectRatio; // 0xbc
};

struct UInterpTrackInstBoolProp {
	UBoolProperty* BoolProperty; // 0x40
	bool ResetBool; // 0x48
};

struct UBTTask_RotateToFaceBBEntryWithTime {
	float Delay; // 0x90
	float RotationTime; // 0x94
};

struct UBTDecorator_TestAIInteractableType {
	UAIInteractableType* Type; // 0x90
};

struct UEmissaryShipAffiliationTrackerComponent {
	int32_t EmissaryCount; // 0x2b0
	UCompany* TrackedCompany; // 0x2b8
	UClass* EmissaryRepresentationMesh; // 0x2c0
	TArray<FTransform> EmissaryRepresentationTransforms; // 0x2e0
	TArray<UStaticMeshComponent*> EmissaryRepresentationMeshes; // 0x2f0
	UEmissaryRepresentationMeshComponent* LoadedEmissaryRepresentationMesh; // 0x300
};

struct UBTTask_SetAIStrategyFromWeightedArray {
	TArray<FWeightedAIStrategyChance> WeightedStrategies; // 0x60
};

struct UEnvQueryGenerator_AIRegionLocations {
	bool UseOverrideSpawnType; // 0x50
	FName OverrideSpawnType; // 0x54
};

struct AMockActorWithCharacterInteractionComponent {
	UCharacterInteractionComponent* CharacterInteractionComponent; // 0x5e8
};

struct UTaleQuestGrantRewardStepDesc {
	FRewardId RewardId; // 0x80
	UCompany* Company; // 0x88
	FGuid Id; // 0x90
	bool ShouldGrantToAlliedCrews; // 0xa0
	FName Feature; // 0xa4
};

struct UDmgTypeBP_Environmental_C {
	char bCausedByWorld : 1; // 0x28
	char bScaleMomentumByMass : 1; // 0x28
	float DamageImpulse; // 0x2c
	char bRadialDamageVelChange : 1; // 0x30
	float DestructibleImpulse; // 0x34
	float DestructibleDamageSpreadScale; // 0x38
	float DamageFalloff; // 0x3c
};

struct UVaultTableMaterialSetDataAsset {
	TArray<UMaterialInstance*> SolutionHintMaterials; // 0x28
};

struct UCommoditySourceMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UMaterialExpressionUnderwaterTranslucencyTexture {
	FExpressionInput Coordinates; // 0x70
};

struct APlayerPermissionsTestActor {
	UPlayerPermissionsComponent* PlayerPermissionsComponent; // 0x3d0
};

struct UAINameplateComponent {
	float VisibleFromWorldDistance; // 0x2e8
	float VisibleUntilWorldDistance; // 0x2ec
	float VisibleAfterDeathDuration; // 0x2f0
	FText Title; // 0x2f8
	FText DisplayName; // 0x330
	FString DisplayNameAsString; // 0x368
	FString DebugDisplayText; // 0x378
	bool VisibilityDisabled; // 0x388
};

struct UTaleQuestWaitForHandInStep {
	UTaleQuestWaitForHandInStepDesc* Desc; // 0x90
};

struct USoundNodeModulator {
	float PitchMin; // 0x38
	float PitchMax; // 0x3c
	float VolumeMin; // 0x40
	float VolumeMax; // 0x44
};

struct AAbstractNavData {
	UPrimitiveComponent* RenderingComp; // 0x3d0
	FNavDataConfig NavDataConfig; // 0x3d8
	char bEnableDrawing : 1; // 0x430
	char bRebuildAtRuntime : 1; // 0x430
	ERuntimeGenerationType RuntimeGeneration; // 0x434
	char bForceRebuildOnLoad : 1; // 0x438
	float ObservedPathsTickInterval; // 0x43c
	TArray<FSupportedAreaData> SupportedAreas; // 0x528
};

struct URegisterServerMigrationPointOfInterestComponent {
	float MigrationRadius; // 0xc8
};

struct UMaybeCompressedCanvasRenderTarget2D {
	FScriptMulticastDelegate OnCanvasUpdate; // 0x28
	UCanvasRenderTarget2D* UncompressedRenderTarget; // 0x38
	UCompressedCanvasRenderTarget2D* CompressedRenderTarget; // 0x40
};

struct UPetsPartsDesc {
	FStringAssetReference Mesh; // 0x30
	FStringAssetReference HighResMesh; // 0x40
	TArray<FPetMaterialEntry> PetMaterials; // 0x50
	EPetSize PetSize; // 0x60
	UPetCustomisationOverrideDataAsset* PetOverrideAsset; // 0x68
};

struct UBTTask_WaitBlackboardTime {
	FBlackboardKeySelector BlackboardKey; // 0x68
};

struct UWashedUpSkeletonClueSiteData {
	AActor* SkeletonPoseType; // 0x38
	UItemDesc* ClueItemType; // 0x40
	FName IslandNameToSpawnOn; // 0x48
	FGuid IslandSpawnLocationReservationId; // 0x50
	FTransform SpawnTransform; // 0x60
};

struct UTaleQuestSetCompassTargetToPointStepDesc {
	FQuestVariableOrientedPoint TargetPoint; // 0x88
};

struct UEmissaryMaxRankQuestProvider {
	UNotificationInputId* MaxRankQuestNotificationID; // 0xc8
	EActionDisplayPriority MaxRankQuestToolTipPriority; // 0xd0
	FText StartMaxRankQuestToolTipText; // 0xd8
	FText CannotStartMaxRankQuestToolTipText; // 0x110
	FStringAssetReference QuestDesc; // 0x148
	UCompany* Company; // 0x158
};

struct USirenStatuesSelectorConfiguration {
	USirenStatuesSelector* Selector; // 0x28
};

struct AStatusEffectOverlapZone {
	UBoxComponent* CollisionMesh; // 0x478
	TArray<FDelayedStatusEffect> StatusesToApplyOnOverlap; // 0x480
	bool StartActive; // 0x490
};

struct AMusicalInstrumentStaticMesh {
	EMusicalInstrumentType InstrumentType; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	float PlayingCoolDownTime; // 0x7b0
	FName InstrumentDrunkennessRtpc; // 0x7b4
	FName InstrumentUnderwaterRtpc; // 0x7bc
	float MaxUnderwaterRtpcFactor; // 0x7c4
	float MinUnderwaterRtpcFactor; // 0x7c8
	float PlayingAINoiseRange; // 0x7cc
	float AINoiseEventInterval; // 0x7d0
	UObject* TriggerEffectActor; // 0x7d8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7e0
	AAthenaPlayerCharacter* AthenaPlayerCharacter; // 0x7f0
};

struct UParticleModuleColorOverLife {
	FRawDistributionVector ColorOverLife; // 0x50
	FRawDistributionFloat AlphaOverLife; // 0x88
	char bClampAlpha : 1; // 0xc0
};

struct UBuriedDecalVisibilityReplicationChannel {
	TArray<FBuryDecal> ReplicatedDecals; // 0xc8
};

struct UQueryLiveStreamsCallbackProxy {
	FScriptMulticastDelegate OnQueriedLiveStreams; // 0x28
};

struct ACustomDeathService {
	TArray<APlayerStart*> CustomPlayerStarts; // 0x408
};

struct ADetourCrowdAIController {
	char bLOSflag : 1; // 0x458
	char bSkipExtraLOSChecks : 1; // 0x458
	char bAllowStrafe : 1; // 0x458
	char bWantsPlayerState : 1; // 0x458
	char bDisableControlRotation : 1; // 0x458
	UPathFollowingComponent* PathFollowingComponent; // 0x460
	UBrainComponent* BrainComponent; // 0x468
	UAIPerceptionComponent* PerceptionComponent; // 0x470
	UPawnActionsComponent* ActionsComp; // 0x478
	UBlackboardComponent* Blackboard; // 0x480
	UGameplayTasksComponent* CachedGameplayTasksComponent; // 0x488
	FScriptMulticastDelegate ReceiveMoveCompleted; // 0x4a0
};

struct UAIFormProgressionTypeList {
	TArray<UAIFormRankProgression*> AllProgressions; // 0x28
};

struct UAnimNotify_DockableCutscene {
	bool PlayedWithSequencer; // 0x28
};

struct UParticleModuleSpawnPerUnit {
	char bAffectsGroupA : 1; // 0x58
	char bAffectsGroupB : 1; // 0x58
	char bAffectsGroupC : 1; // 0x58
	char bAffectsGroupD : 1; // 0x58
	char bAffectsGroupE : 1; // 0x58
	char bAffectsReplacementGroup : 1; // 0x58
	float UnitScalar; // 0x5c
	FRawDistributionFloat SpawnPerUnit; // 0x60
	char bIgnoreSpawnRateWhenMoving : 1; // 0x98
	float MovementTolerance; // 0x9c
	float MaxFrameDistance; // 0xa0
	char bIgnoreMovementAlongX : 1; // 0xa4
	char bIgnoreMovementAlongY : 1; // 0xa4
	char bIgnoreMovementAlongZ : 1; // 0xa4
};

struct UParticleModuleVelocityInheritParent {
	FRawDistributionVector Scale; // 0x58
	FRawDistributionVector CustomParentScale; // 0x90
	char ScalesRespectEmitterRotation : 1; // 0xc8
	char UseCustomLocalSpace : 1; // 0xc8
	float SpeedCap; // 0xcc
};

struct UBTService_OverrideTurnSpeed {
	FAIDataProviderFloatValue TurnSpeed; // 0x70
};

struct UAISense_Sight {
	int32_t MaxTracesPerTick; // 0x138
	float HighImportanceQueryDistanceThreshold; // 0x13c
	float MaxQueryImportance; // 0x144
	float SightLimitQueryImportance; // 0x148
};

struct UAchievementQueryCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct ATeleportStatue {
	ASpawnProgressTriggerVolume* LinkedCheckpoint; // 0x478
	FText LinkedCheckpointActionRuleDescription; // 0x498
	FText LinkedCheckpointWithLargeItemActionRuleDescription; // 0x4d0
};

struct UUIInputForwardComponent {
	UCoherentUIGTBaseComponent* TargetView; // 0xc8
};

struct URewardGenTaleQuestService {
	UTaleQuestWeightedItemDescSpawnDataAsset* SpawnData; // 0x60
	TArray<int32_t> ValidSpawnData; // 0x68
	TArray<UItemSpawnData*> ItemsToSpawn; // 0x78
};

struct UAddNPCOnSurfaceStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ULevelSequencePlayer {
	AActor* SpawnablesParent; // 0x600
};

struct AWatercraftService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UAIShipServiceDataAsset {
	UAIShipEncounterParamsDataAsset* BattleEncounterParams; // 0x28
	FAIShipEncounterParams AggressiveEncounterParams; // 0x30
	FAIShipEncounterParams PassiveEncounterParams; // 0x48
	FIntPoint ObstacleBucketDimensions; // 0x60
	float ShipwreckObstacleRadius; // 0x68
	FAIShipContextDescGenerationParams ContextDescGenerationParams; // 0x70
	FAIShipBattleEncounterDescGenerationParams EncounterGenerationParams; // 0xf0
	FAIShipSingleWaveEncounterDescGenerationParams AggressiveEncounterGenerationParams; // 0x118
	FAIShipSingleWaveEncounterDescGenerationParams PassiveEncounterGenerationParams; // 0x128
	FWeightedProbabilityRangeOfRanges TimerBattleFirstRegenInterval; // 0x138
	FWeightedProbabilityRangeOfRanges TimerBattleRegenInterval; // 0x168
	float TimerBattleFinderThrottle; // 0x198
	FWeightedProbabilityRangeOfRanges TimerBattleRetryRegenInterval; // 0x1a0
	float TimerBattleMinActivationDistanceFromPlayers; // 0x1d0
	UShortRangeMarkerDataAsset* RewardMarkerParams; // 0x1d8
};

struct ABootyItemInfo {
	EBootyTypes BootyType; // 0x528
	FGuid Id; // 0x52c
	bool PlayedFirstTimeEquipSfx; // 0x53c
	TArray<FPlayerStat> HandInPlayerStats; // 0x540
	TArray<FPlayerStat> HandInStolenPlayerStats; // 0x550
	TArray<FPlayerStat> HandInStolenFromPlayerStats; // 0x560
	TArray<FPlayerStat> HandInGiftPlayerStats; // 0x570
	TArray<FPlayerStat> HandInAsPirateLegendPlayerStats; // 0x580
	TArray<FPlayerStat> HandInOnSchedulePlayerStats; // 0x590
	TArray<FPlayerStat> HandInAsPirateLegendOnSchedulePlayerStats; // 0x5a0
	TArray<FEmissaryBootyItemStats> HandInAsEmissaryPlayerStats; // 0x5b0
	TArray<FEmissaryBootyItemStats> HandInAsMaxLevelEmissaryPlayerStats; // 0x5c0
	TArray<FEmissaryBootyItemStats> HandInStolenAsEmissaryPlayerStats; // 0x5d0
	TArray<FEmissaryBootyItemStats> HandInStolenAsMaxLevelEmissaryPlayerStats; // 0x5e0
	TArray<FPlayerStat> UsePlayerStats; // 0x5f0
	TArray<FPlayerStat> UseStolenPlayerStats; // 0x600
	FCompanyBootyStatList CompanySpecificStats; // 0x610
	FConditionalHandInStat ConditionalHandInStat; // 0x620
	UPopUpMessageDesc* DiscoveredPopupDesc; // 0x640
	FBootyItemSellPrerequisites SellPrerequisites; // 0x648
	UTrackedOwnerComponent* TrackedOwnerComponent; // 0x658
	UItemQualityComponent* ItemQualityComponent; // 0x660
	EEmissaryQualityLevel ItemQualityLevel; // 0x668
	TArray<FPerComanyItemQualityEntry> CompanySpecificItemQualityLevel; // 0x670
	FRewardId HandInRewardId; // 0x680
	TArray<FCompanySpecificBootyReward> HandInRewardIdCompanySpecific; // 0x688
	bool RewardToOwnCrewOnly; // 0x698
	FName Rarity; // 0x69c
	UDeliverableComponent* DeliverableComponent; // 0x6c0
	UCrewOwnershipTrackingComponent* CrewOwnershipTrackingComponent; // 0x6c8
	UBootyItemShipOwnershipComponent* BootyItemShipOwnershipComponent; // 0x6d0
	ESpawnedItemSource SpawnSource; // 0x6d8
};

struct UBTDecorator_IsBBEntryOfClass {
	UObject* TestClass; // 0x90
};

struct UMaterialExpressionRopeParameter {
	EInstancedRopeParameterType RopeParameterType; // 0x70
};

struct UTestServerNetworkedEventsWhitelistDefinition {
	TArray<UScriptStruct*> ValidEvents; // 0x28
};

struct AStaticWieldableIngestible {
	UGiveItemUponConsumptionComponent* GiveItemUponConsumptionComponent; // 0x798
	UApplyStatusToConsumerComponent* ApplyStatusToConsumerComponent; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7b0
	UFeedableComponent* FeedableComponent; // 0x7b8
	float InToIngestionDuration; // 0x7c0
	float OutOfIngestionDuration; // 0x7c4
	bool CanIngest; // 0x7c8
	UWwiseEvent* IngestAudioEvent; // 0x7d0
	FName IngestAudioFoodType; // 0x7d8
	FPlayerStat IngestionStat; // 0x7e0
	FPlayerStat IngestionShipStat; // 0x7e4
};

struct AHitRegSnapshotActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UColorTextureSwitchBySeed {
	FName HashSource; // 0x220
	TArray<FColorTextureSwitchSeedEntry> Entries; // 0x228
};

struct UBTService_DisableCollisions {
	TArray<ECollisionChannel> ChannelsToLeaveUnaffected; // 0x70
};

struct UAthenaAnimationFishingAnimationsGroupingAsset {
	FAthenaAnimationAsyncLoadedFishingAnimations FishingAnimations; // 0x28
	FAthenaAnimationAsyncLoadedLocomotionAnimations LocomotionAnimations; // 0x268
	FAthenaAnimationAsyncLoadedObjectJumpingAnimations JumpingAnimations; // 0x368
	FAthenaAnimationAsyncLoadedObjectIdleAnimations IdleAnimations; // 0x3e8
	UAnimSequence* HandAdditive; // 0x448
	FAthenaAnimationPersistentItemAnimations PersistentLoadedAnimations; // 0x468
};

struct UTeleportAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UIsCurrencyTypeStatCondition {
	EWalletCurrencyId TargetCurrency; // 0x30
};

struct ASirenTridentProjectile {
	TArray<USirenTridentProjectileParams*> ProjectileParameters; // 0x680
	float CurrentMaterialScale; // 0x690
	FName MaterialScaleParameterName; // 0x694
	UMaterialInstanceDynamic* DynamicMaterialInstance; // 0x6a0
	USirenTridentProjectileParams* CurrentProjectileParameters; // 0x6a8
	USphereComponent* CollisionSphere; // 0x6b8
	URewindComponent* RewindComponent; // 0x6c0
};

struct UTaleQuestSelectAISpawnerStepDesc {
	FQuestVariableAISpawnerArray SelectFromSpawnerArray; // 0x80
	FQuestVariableAISpawner SelectedSpawnerAsset; // 0x90
};

struct UAnimNotifyTriggerPlaceableReaction {
	FStringAssetReference PlaceableReactionToTrigger; // 0x38
};

struct UNonVerbalRadialDataAsset {
	TArray<FNonVerbalPageData> Pages; // 0x28
};

struct AClamberSpot {
	UInteractableComponent* InteractableComponent; // 0x418
	USplineComponent* ClamberSplineComponent; // 0x420
	FLadderBlendParams ClamberBlendParams; // 0x428
	FText InteractionVerb; // 0x438
	FText InteractionDisplayName; // 0x470
	FVector InteractionOffset; // 0x4a8
	UWwiseEvent* OnClamberSfx; // 0x4b8
	UWwiseObjectPoolWrapper* ClamberSpotPool; // 0x4c0
};

struct AProceduralFoliageVolume {
	UProceduralFoliageComponent* ProceduralComponent; // 0x408
};

struct ULandmarkTreasureLocationsDataAsset {
	TArray<FLandmarkTreasureLocationEntry> Landmarks; // 0x28
};

struct UAIAmmoRankProgression {
	TArray<FAIAmmoRankMapping> RankMappings; // 0x28
	int32_t NumberOfRanks; // 0x38
};

struct AControllableJIPTestFixture {
	AControllableObject* ObjectToSpawn; // 0x498
	UActionStateId* ExpectedActionState; // 0x4a0
	AActor* ControlledActor; // 0x4a8
};

struct UDiggingBuryParamsDataAsset {
	TArray<FItemBuryingBaseOverride> Overrides; // 0x28
	UItemDiggingBuryConfig* Default; // 0x38
};

struct UCutsceneResponsesTaleService {
	TArray<UCutsceneResponseCoordinator*> TrackedResponseCoordinators; // 0x60
	TArray<UCutsceneResponseComponent*> TrackedResponseComponents; // 0x70
	TArray<AActor*> ResponseRelevantActors; // 0x80
};

struct UTaleQuestAssignVaultStepDesc {
	FQuestVariableVector SelectionOriginPointVar; // 0x80
	FQuestVariableInt GoldHoarderVoyageTier; // 0x90
	FQuestVariableClassArray ValidSeas; // 0xa0
	FQuestVariableTaleResourceHandle AlloctedVaultHandleVar; // 0xb0
	FQuestVariableActor AlloctedVaultVar; // 0xc0
	FQuestVariableClass VaultKeyTypeVar; // 0xd0
	bool UsePriorityRange; // 0xe0
	float PriorityRange; // 0xe4
	int32_t NumberOfSearches; // 0xe8
};

struct ADoorMechanism {
	UStaticMeshComponent* DoorMeshComponent; // 0x570
	URewindComponent* RewindComponent; // 0x578
};

struct UTaleQuestAdvanceRiddleMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UHideoutService {
	TArray<AHideout*> Hideouts; // 0x30
};

struct AVolcanicRock {
	UExplosionComponent* ExplosionComponent; // 0x610
	bool ApplyKnockbackOnDirectHit; // 0x618
	bool AllowFriendlyFireOnDirectHit; // 0x619
	EHealthChangedReason DirectHitHealthChangeReason; // 0x61a
	UDamagerType* ImpactDamagerType; // 0x620
	UConditionalStatsTriggerType* StatTriggerForCannonballsHittingShips; // 0x638
	UConditionalStatsTriggerType* StatTriggerForCannonballsHittingPlayers; // 0x640
	UConditionalStatsTriggerType* StatTriggerForCannonballsHittingReactingActors; // 0x648
};

struct UItemSpawnDistributionAsset {
	FItemSpawnDistribution SpawnDistribution; // 0x28
};

struct UFishingMiniGameFishDataAsset {
	float ChanceOfEscapePositionBeingLeft; // 0x28
	float ChanceOfEscapePositionBeingAway; // 0x2c
	float ChanceOfEscapePositionBeingRight; // 0x30
	FWeightedProbabilityRangeOfRanges HowLongBeforeUnfoughtFishEscapes; // 0x38
	FWeightedProbabilityRangeOfRanges TimeToTire; // 0x68
	FWeightedProbabilityRangeOfRanges SwitchesBeforeRecovery; // 0x98
	FWeightedProbabilityRangeOfRanges TimeSpentRecovering; // 0xc8
	float SpeedMovingBackToCentreWhenRecovering; // 0xf8
	float SpeedMovingBackToCentreWhenRecoveringWhenReeling; // 0xfc
	FWeightedProbabilityRangeOfRanges NumFakeOuts; // 0x100
};

struct UPlayerBuriedItemServiceMapStorePopulator {
	UPlayerBuriedItemServiceMapStorePopulatorDataAsset* DataAsset; // 0x28
};

struct UNarratedShipDirectionComponent {
	float YawThreshold; // 0xe8
	TScriptInterface<Class> CachedOrientationInterface; // 0x218
	AActor* Wielder; // 0x228
	TScriptInterface<Class> ObjectMessagingDispatcher; // 0x230
	TScriptInterface<Class> CachedHUDMessagingDispatcher; // 0x240
};

struct URetractableComponent {
	FName FeatureToggle; // 0xf0
	FRetractorOrientationAdjustmentFlags OrientationAdjustmentOnRetractFlags; // 0xf8
	EAxis RetractorBoxAxis; // 0xfb
	bool ShouldAutoReleaseOnSuccessfulRetract; // 0xfc
	bool MigrateAttachedWithRetractor; // 0xfd
	bool WasSimulatingPhysicsBeforeRetract; // 0xfe
};

struct UServerMigrationSettings {
	int32_t MaxSimultaneousMigrations; // 0x28
	FString TransportImplementation; // 0x30
	int32_t ServerDefaultListenPort; // 0x40
	int32_t ServerListenPortRangeSize; // 0x44
	int32_t AutomationServerDefaultListenPort; // 0x48
	FString InstanceImplementation; // 0x50
	float MigrationConnectionTimeoutSeconds; // 0x60
	float WaitForClientActorRemappingTimeoutLength; // 0x64
	float WaitForTransferOwnershipAcknowledgementTimeoutLength; // 0x68
	float DeserialisationTimeSliceLength; // 0x6c
};

struct UReviveConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct AGaneplayDebuggerProxyHUD {
	FColor WhiteColor; // 0x3d0
	FColor GreenColor; // 0x3d4
	FColor RedColor; // 0x3d8
	APlayerController* PlayerOwner; // 0x3e0
	char bLostFocusPaused : 1; // 0x3e8
	char bShowHUD : 1; // 0x3e8
	char bShowDebugInfo : 1; // 0x3e8
	char bShowHitBoxDebugInfo : 1; // 0x3e8
	char bShowOverlays : 1; // 0x3e8
	char bEnableDebugTextShadow : 1; // 0x3e8
	TArray<AActor*> PostRenderedActors; // 0x3f0
	float LastHUDRenderTime; // 0x400
	float RenderDelta; // 0x404
	TArray<FName> DebugDisplay; // 0x408
	TArray<FName> ToggledDebugCategories; // 0x418
	UCanvas* Canvas; // 0x428
	UCanvas* DebugCanvas; // 0x430
	TArray<FDebugTextInfo> DebugTextList; // 0x438
	AActor* ShowDebugTargetDesiredClass; // 0x448
	AActor* ShowDebugTargetActor; // 0x450
};

struct UAIAsyncTaskBlueprintProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFail; // 0x38
};

struct UBTDecorator_Loop {
	int32_t NumLoops; // 0x68
	bool bInfiniteLoop; // 0x6c
};

struct UPromptCounterAccessKey {
	FString Key; // 0x28
};

struct UPetNameplateComponent {
	FString DefaultPetName; // 0x448
};

struct UVoyageInventoryViewModelComponent {
	APlayerController* PlayerController; // 0x140
};

struct UWorldMarkerManagerComponent {
	TArray<FMarkerVariantDesc> MarkerVariants; // 0xd0
	TArray<UBaseWorldMarker*> MarkerDataObjects; // 0xe0
	TArray<FClientMarkerRepresentation> ClientMarkerRepresentations; // 0xf0
};

struct ULightningManagerComponent {
	ULightningManagerDataAsset* LightningManagerDataAsset; // 0xc8
	float Radius; // 0xd0
};

struct UBTDecorator_TargetInRangeOfPoint {
	FBlackboardKeySelector ReferencePointKey; // 0x108
};

struct AAlwaysRelevantLightweightPlayerNameplate {
	UAlwaysRelevantPlayerNameplateComponent* PlayerNameplateComponent; // 0x3f8
	AAthenaPlayerState* PlayerStatePtr; // 0x400
	FGuid OwnedActorsCrewId; // 0x408
	bool IsOwnerInert; // 0x430
};

struct UTaleRankDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct UBTTask_ExecuteAIAbility {
	UAthenaAIAbilityType* AIAbilityType; // 0x60
};

struct UTaleQuestGenerateClueSiteAtSeaLocationStepDesc {
	FQuestVariableVector ApproximateLocation; // 0x80
	FQuestVariableClueSite ClueSite; // 0x90
	UClueFactoryConfig* ClueFactoryConfiguration; // 0xa0
};

struct UNPCOnSurfaceCannonManagerDataAsset {
	FName CannonLocationsGroupName; // 0x28
	bool GoStraightToCannonIfPossible; // 0x30
	bool StayOnCannonEvenWhenThereAreNoTargets; // 0x31
	FWeightedProbabilityRangeOfRanges MinTimeInFallbackLocation; // 0x38
	float TimeOnCannonBeforeStartAiming; // 0x68
	float TimeBetweenCannonChangeLocationCheck; // 0x6c
	FWeightedProbabilityRangeOfRanges MinTimeOnCannon; // 0x70
	float TimeBetweenCannonBeingUsedChecks; // 0xa0
	float TimeBetweenTargetUpdates; // 0xa4
	float TimeBetweenCannonMoveUpdates; // 0xa8
	float TimeToWaitForCannonToAimBeforeTryingToFireAgain; // 0xac
	float CannonPitchYawAimTolerenceHalfAngle; // 0xb0
	FWeightedProbabilityRangeOfRanges NearMissDistanceInMetres; // 0xb8
	UItemDesc* DefaultCannonballItemDesc; // 0xe8
	UClass* AnimationData; // 0xf0
	float NearbyEncountersDistanceInMetres; // 0x110
	FCustomAnimationMontageId FireCannonMontageId; // 0x114
};

struct UMovieSceneFloatTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct AWieldableNonStowableMockItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UChooseIslandStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AAbandonedNoteWieldable {
	UWieldableItemCanvasRenderingComponent* WieldableItemCanvasRenderingComponent; // 0x7a0
	UAbandonedNoteWieldableRenderingComponent* AbandonedNoteRenderingComponent; // 0x7a8
	UInventoryItemComponent* InventoryItemComponent; // 0x7b0
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7b8
	EQuestMapIcon QuestMapIcon; // 0x7c0
};

struct ARadialForceActor {
	URadialForceComponent* ForceComponent; // 0x3d0
};

struct UInteractionInputComponent {
	FInteractionInputComponentTickFunction InteractionComponentTickFunction; // 0x278
};

struct UCursedSailsCampaignDataAsset {
	TArray<FCursedSailsBattleParams> Battles; // 0x28
};

struct UMapRadialContentRule {
	float RadialIconScale; // 0x78
	FVector2D RadialIconOffset; // 0x7c
	TArray<AActor*> MappedSlots; // 0xd8
};

struct UTaleUnloadSpireStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UBTTask_MakeNoise {
	float Loudnes; // 0x60
};

struct UNavAreaMeta_SwitchByAgent {
	UNavArea* Agent0Area; // 0x40
	UNavArea* Agent1Area; // 0x48
	UNavArea* Agent2Area; // 0x50
	UNavArea* Agent3Area; // 0x58
	UNavArea* Agent4Area; // 0x60
	UNavArea* Agent5Area; // 0x68
	UNavArea* Agent6Area; // 0x70
	UNavArea* Agent7Area; // 0x78
	UNavArea* Agent8Area; // 0x80
	UNavArea* Agent9Area; // 0x88
	UNavArea* Agent10Area; // 0x90
	UNavArea* Agent11Area; // 0x98
	UNavArea* Agent12Area; // 0xa0
	UNavArea* Agent13Area; // 0xa8
	UNavArea* Agent14Area; // 0xb0
	UNavArea* Agent15Area; // 0xb8
};

struct UParticleModuleLocationDirect {
	FRawDistributionVector Location; // 0x50
	FRawDistributionVector LocationOffset; // 0x88
	FRawDistributionVector ScaleFactor; // 0xc0
	FRawDistributionVector Direction; // 0xf8
};

struct AAthenaPlayerCharacterMock {
	UAICreatureMovementModifierParamsDataAsset* PetMovementParamsDataAsset; // 0x1ac0
	bool AllowedToSwim; // 0x1ac8
};

struct UStatusResponseEmote {
	FName EmoteIdentifier; // 0x30
};

struct UMaterialExpressionTextureCoordinate {
	int32_t CoordinateIndex; // 0x70
	float UTiling; // 0x74
	float VTiling; // 0x78
	char UnMirrorU : 1; // 0x7c
	char UnMirrorV : 1; // 0x7c
};

struct UGameplayLODSettings {
	FAnimationLODParameters AnimationLODSettings; // 0x28
};

struct UParticleModuleLocationPrimitiveSphereSlice {
	FRawDistributionFloat StartRadius; // 0x50
	FRawDistributionFloat AdditionalStartRadiuses[0x4]; // 0x88
	char StartRadiusUseGroupAForAll : 1; // 0x168
	FPrimitiveSphereEmitterAngleRanges AngleRanges[0x2]; // 0x16c
	float FirstSliceDistributionWeight; // 0x18c
	char SurfaceOnly : 1; // 0x190
	char Velocity : 1; // 0x190
	FRawDistributionFloat VelocityScale; // 0x198
	FRawDistributionVector StartLocation; // 0x1d0
};

struct UFirstPersonAnimaticList {
	TArray<FNamedFirstPersonAnimatic> NamedFirstPersonAnimatics; // 0x28
};

struct UClothingLoadoutComponent {
	FClothingLoadoutContainer LoadoutContainer; // 0xf8
	AActor* OwningPlayer; // 0x110
	UEmoteSettings* EmoteSettings; // 0x118
	TArray<FEmoteData> CustomEmotes; // 0x198
	TArray<FEmoteData> CustomCostumeEmotes; // 0x1a8
};

struct ANonStorableRewardableItemInfo {
	FRewardId RewardId; // 0x500
	EBootyTypes Type; // 0x508
	FName Rarity; // 0x50c
	TArray<FPlayerStat> HandInStats; // 0x518
	TArray<FPlayerStat> LegendHandInStats; // 0x528
	UPopUpMessageDesc* PopUpMessageDesc; // 0x538
	UPopUpAudioDesc* PopUpAudioOverrides; // 0x540
	FGuid Id; // 0x548
};

struct UWeightedAwardableComponent {
	FWeightedRewardDistribution RewardDistribution; // 0xd0
	ERewardDestinationType RewardDestination; // 0xe8
};

struct AActionStateCreatorDefinition {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UBTService {
	float Interval; // 0x60
	float RandomDeviation; // 0x64
	char bCallTickOnSearchStart : 1; // 0x68
	char bRestartTimerOnEachActivation : 1; // 0x68
};

struct UEnvQueryTest_InWorldEventZone {
	float Radius; // 0x170
};

struct UPlatformEventsComponent {
	FScriptMulticastDelegate PlatformChangedToLaptopModeDelegate; // 0xc8
	FScriptMulticastDelegate PlatformChangedToTabletModeDelegate; // 0xd8
};

struct UReplenishableComponent {
	UStorageContainerContentTypeSelector* ContentTypeSelector; // 0xd8
	TArray<FContentTypeSelectorPair> ContentTypeSelectors; // 0xe0
	bool ShouldRefresh; // 0xf0
	TArray<FStorageContainerNode> DefaultStockLevels; // 0xf8
	UObject* Aggregator; // 0x110
};

struct UStoreBootyHandInComponent {
	UNotificationInputId* NotificationStartInputID; // 0x118
	UNotificationInputId* NotificationReleaseInputID; // 0x120
	EActionDisplayPriority DisplayPriority; // 0x128
	bool TorchVFXOffIfStorageEmpty; // 0x129
	bool EyesVFXOffIfStorageEmpty; // 0x12a
	FName ScalarVectorNameToOverride; // 0x12c
	float CanStoreGlowValue; // 0x134
	float HasSomethingStoredGlowValue; // 0x138
	float CannotStoreGlowValue; // 0x13c
	float PulseGlowValue; // 0x140
	float ChangeDuration; // 0x144
	float VFXEmptyGlow; // 0x148
	float VFXPartialGlow; // 0x14c
	float VFXFullGlow; // 0x150
	int16_t LocalIslandHash; // 0x154
	TArray<UMaterialInstanceDynamic*> DynamicMaterialMap; // 0x170
	AController* LocalController; // 0x180
	UBootyStorageSettings* BootyStorageSettings; // 0x188
	UActionRulesComponent* OwnerActionRulesComponent; // 0x230
	UWwiseEvent* OnStoredSFX; // 0x238
	UParticleSystemComponent* TorchVfx; // 0x240
	UParticleSystemComponent* EyesVFX; // 0x248
	UParticleSystemComponent* ChestVFX; // 0x250
};

struct UVoyageLocationFeatureToggledOnlyNamedIslandListDataAsset {
	TArray<FFeatureToggledNamedIslands> FeatureToggledOnlyNamedIslandsList; // 0x28
};

struct USirenSongAIAbilityParams {
	TArray<FAthenaAIControllerParamValue> NamedControllerParams; // 0x28
	EAIAbilityDamageIntervalCounterMode DamageIntervalCountingMode; // 0x38
	bool UseTimeBetweenAbility; // 0x39
	FAthenaAIAbilityPlayerBasedRanges ActivationTimerCooldown; // 0x40
	FAthenaAIAbilityPlayerBasedRanges TimeBetweenAbility; // 0x50
	bool UseDamageBetweenAbility; // 0x60
	FAthenaAIAbilityPlayerBasedRanges DamageBetweenAbility; // 0x68
	float AbilityRadius; // 0x78
	bool UseMinMaxAttackRange; // 0x7c
	FMinMaxAbilityRange MinMaxAttackRange; // 0x80
	TArray<FAIAbilityFollowUp> FollowUpAbilities; // 0x88
	float Weight; // 0x98
	FAIAbilityContinuousCooldownParameterData ContinuousCooldownAbilityParameters; // 0xa0
	UAthenaAIAbilityType* AIAbilityTypeClass; // 0xc0
};

struct URewardService {
	TArray<URewardDefinitionAsset*> RewardDefinitionAssets; // 0x30
};

struct UPlayerNameService {
	UPlayerNameDataAsset* PlayerNameDataAsset; // 0x90
};

struct UShantySelectionComponent {
	UShantyItemDesc* SelectedShanty; // 0x120
};

struct UMaterialExpressionNoise {
	FExpressionInput Position; // 0x70
	FExpressionInput FilterWidth; // 0xa8
	float Scale; // 0xe0
	int32_t Quality; // 0xe4
	ENoiseFunction NoiseFunction; // 0xe8
	char bTurbulence : 1; // 0xec
	int32_t Levels; // 0xf0
	float OutputMin; // 0xf4
	float OutputMax; // 0xf8
	float LevelScale; // 0xfc
};

struct UParticleModuleLocationComputeShaderOutput {
	UParticleComputeShaderData* PositionData; // 0xc8
};

struct UDamageableMechanismTrigger {
	float TriggerThreshold; // 0x150
	float TriggerResetTime; // 0x154
	float AutomaticResetTime; // 0x158
	UDamageableComponent* OwningDamageSource; // 0x160
	UWorld* CachedWorld; // 0x168
};

struct UAggressiveGhostShipShotSelectionDataAsset {
	TArray<FAggressiveGhostShipShotSelection> ShotSelection; // 0x28
};

struct UAggressiveGhostShipsEncounterParams {
	UAggressiveGhostShipEncounterDataAsset* Encounter; // 0x38
	UAggressiveGhostShipEncounterFormationsDataAsset* Formations; // 0x40
	UClass* EventSignalClass; // 0x48
	UClass* ToggledEventSignalClass; // 0x68
	FName EventSignalClassToggle; // 0x88
	float EventSignalHeightOffset; // 0x90
	TArray<FAggressiveGhostShipsEncounterHeightPerIslandOffsets> EventSignalHeightPerIslandOffset; // 0x98
	FPoolableCollectionMapConfiguration ProjectilePoolMapConfiguration; // 0xa8
	FPoolableCollectionMapConfiguration GhostShipsPoolMapConfiguration; // 0xc0
	int32_t MinePoolSize; // 0xd8
	int32_t AnchorDropPoolSize; // 0xdc
	AAggressiveGhostShipPoolResource* PoolingResourceClass; // 0xe0
	UAggressiveGhostShipRewardsDataAsset* EncounterRewards; // 0xe8
	FName CustomIslandName; // 0xf0
	bool UseParticipantList; // 0xf8
	float EncounterEnteredBannerDistance; // 0xfc
	UAggressiveGhostShipBannerDataAsset* EncounterEnteredBanner; // 0x100
	UAggressiveGhostShipBannerDataAsset* EncounterCompleteBanner; // 0x108
	float MinimumIslandRangeInMeters; // 0x110
	float MaximumIslandRangeInMeters; // 0x114
	bool FireEmissaryStatsOnFinished; // 0x118
	float DelayBeforeEndingEncounter; // 0x11c
	float EncounterExclusionRadiusInMetres; // 0x120
	EEncounterType EncounterSightingType; // 0x124
	EEncounterType EncounterCloseType; // 0x125
};

struct UTinySharkParamsDataAsset {
	FTinySharkParams Params; // 0x28
};

struct UAncientAIFormDataAsset {
	UActorComponent* AwardableComponentType; // 0x90
	float TimeBeforeDespawn; // 0x98
};

struct UAISpawnOverrideCondition {
	bool InvertResult; // 0x28
};

struct UFixedClueChoiceSelectionStrategy {
	int32_t IndexToSelect; // 0x28
};

struct UParticleSystemPickerAsset {
	FParticleSystemPicker ParticleSystems; // 0x28
};

struct UWidgetAnimation {
	FScriptMulticastDelegate OnAnimationStarted; // 0x2a8
	FScriptMulticastDelegate OnAnimationFinished; // 0x2b8
	UMovieScene* MovieScene; // 0x2c8
	TArray<FWidgetAnimationBinding> AnimationBindings; // 0x2d0
};

struct ATimeService {
	FTimespan GameWorldTimeOffset; // 0x408
	uint32_t TimeScalar; // 0x414
	uint32_t NumberOfDaysInEachGameMonth; // 0x418
	double ServiceTimeQueryRapidFrequencyOffsetMax; // 0x420
	float ServiceTimeQueryRapidFrequencyInSeconds; // 0x428
	float ServiceTimeQueryFrequencyInSeconds; // 0x42c
	float ClientTimeUpdateFrequencyInSeconds; // 0x430
	float SunriseTimeHours; // 0x434
	float SunsetTimeHours; // 0x438
	float LocalTimeUpdateAdjustMaxTimeDelta; // 0x43c
	float MinLocalTimeUpdateAdjustPercentageToSlowDown; // 0x440
	float MaxLocalTimeUpdateAdjustPercentageToSlowDown; // 0x444
	float MinLocalTimeUpdateAdjustPercentageToSpeedUp; // 0x448
	float MaxLocalTimeUpdateAdjustPercentageToSpeedUp; // 0x44c
	uint32_t MaxNumReplicatedTimeEntriesToAverage; // 0x450
	FReplicatedAuthoritativeTime ReplicatedServerTime; // 0x4a0
};

struct AHideoutEntrance {
	UBoxComponent* TriggerZoneComponent; // 0x3d0
	TArray<ASpawnLocation*> HideoutExitSpawnPoints; // 0x3d8
};

struct UInterpTrackInstColorProp {
	FColor ResetColor; // 0x40
};

struct USkeletonAudioFootfallControllerParams {
	UWwiseEvent* SkeletonLayerFootfallEvent; // 0x108
};

struct UFireBreathAbilityStageParams {
	float FireBreathDurationMultiplier; // 0x40
};

struct UAIBoobyTrapSpawner {
	int32_t NumberOfWavesToSpawn; // 0x610
	UWwiseEvent* NewWaveSpawnSfx; // 0x618
	float NewWaveSpawnSfxTriggerRadius; // 0x620
	TArray<UAIClassId*> ShowNameplatesFor; // 0x628
	UNamedAIDataAsset* NamedAIDataAsset; // 0x638
	AActor* ActorToTrack; // 0x640
};

struct UUsableWieldableComponent {
	TArray<UNotificationInputId*> OneShotInputNotifications; // 0xd8
	TArray<FHoldToUseInput> ContinuousUseNotification; // 0xe8
	bool PreventOverlappingContinuousUses; // 0xf8
	TArray<UNotificationInputId*> NotificationIdsToIgnore; // 0x100
	TArray<UNotificationInputId*> CurrentlyActiveNotifications; // 0x110
};

struct UNamedInterfaces {
	TArray<FNamedInterface> NamedInterfaces; // 0x28
	TArray<FNamedInterfaceDef> NamedInterfaceDefs; // 0x38
};

struct UMaterialExpressionLandscapeGrassOutput {
	TArray<FGrassInput> GrassTypes; // 0x70
};

struct UParticleModuleSourceMovement {
	FRawDistributionVector SourceMovementScale; // 0x50
};

struct UCanvasWorldMapComponent {
	int32_t CanvasWidth; // 0xc8
	int32_t CanvasHeight; // 0xcc
	UObject* MapClass; // 0xd0
	int32_t NumGridSquares; // 0xd8
	int32_t MaxUpdateDist; // 0xdc
	float SquareShipUpdateDist; // 0xe0
	float ShipUpdateRot; // 0xe4
	TArray<FCanvasWorldMapShipIcons> ShipIcons; // 0xe8
	UTexture* OffscreenArrowTexture; // 0xf8
	UTexture* CompassTexture; // 0x100
	FVector2D CompassPosition; // 0x108
	UFont* Font; // 0x110
	FVector2D GridLabelScreenMin; // 0x118
	FVector2D GridLabelEdgeOffset; // 0x120
	float GridLabelSize; // 0x128
	float IslandLabelSize; // 0x12c
	float IslandLabelFadeoutZoom; // 0x130
	FCanvasLerpData IslandLabelFadeData; // 0x134
	FCanvasLerpData OffscreenIndicatorFadeData; // 0x144
	FBox2D OffscreenIndicatorSafe; // 0x154
	FBox2D OffscreenIndicatorBounds; // 0x168
	float OffscreenArrowOffset; // 0x17c
	FLinearColor BackgroundColour; // 0x180
	TArray<FCanvasWorldMapReaperTrackedBootItemIcon> ReapersMarkBootyItemIcons; // 0x190
	FVector2D ReapersMarkBootyItemOffset; // 0x1a0
	UTexture* CrosshairTexture; // 0x1a8
	UTexture* CrosshairEmptyTexture; // 0x1b0
	UTexture* PinTexture; // 0x1b8
	UTexture* PinTextureHighlight; // 0x1c0
	UTexture* PathDropTexture; // 0x1c8
	float LineTextureWidth; // 0x1d0
	float LineTextureLength; // 0x1d4
	TArray<FCanvasWorldMapShipIcons> TrackedShipIcons; // 0x1d8
	UTexture* AllianceFlagIcon; // 0x1e8
	TArray<UTexture*> ReapersMarkFlagIcons; // 0x1f0
	TArray<UTexture*> ReapersBonesIcons; // 0x200
	UTexture* ReapersMarkShipIcon; // 0x210
	FVector2D ShipFlagOverlayOffset; // 0x218
	FVector2D SecondaryShipFlagOverlayOffset; // 0x220
	float ShipFlagOverlayScale; // 0x228
	FVector2D MarkerFlagOverlayOffset; // 0x22c
	float MarkerFlagOverlayScale; // 0x234
	UIslandEventHUDData* IslandEventHUDData; // 0x238
	TArray<FCanvasWorldMapShipLocation> TrackedShips; // 0x240
	TArray<FReapersMarkTrackedBootyItemInfo> TrackedBootyItemInfos; // 0x250
	UIterativeCanvasRenderTarget2D* RenderTarget; // 0x260
	UMapTableCanvasDataAsset* CanvasDataAsset; // 0x300
};

struct UMeshMemoryConstraintServiceBudgetData {
	TMap<FName, FMeshRegistration> MeshesRef; // 0x30
	TArray<FMeshScoring> MeshesScoringInfo; // 0x80
	UMeshMemoryConstraintFallbackDataAsset* MeshMemoryConstraintFallbackAsset; // 0x108
	UWorld* World; // 0x110
	TArray<FIndividualMeshScoringToAdd> ConsumersToAddToScoring; // 0x118
};

struct ASpikeMechanismAction {
	UMechanismInteractionComponent* MechanismInteractionComponent; // 0x608
	float Extent; // 0x610
	float Damage; // 0x614
	EHealthChangedReason DamageReason; // 0x618
	TArray<FSpikeMechanismMaterialAnimationContext> MaterialAnimations; // 0x620
};

struct UFindNamedPointAsTransformStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UDebugMenuComponentMock {
	ADebugMenu* DebugMenuInstance; // 0xf0
};

struct UNetworkTriggeredVFXComponent {
	TArray<UObject*> NetworkTriggerableVFX; // 0xc8
	UParticleSystemComponent* CurrentlyPlayingParticleSystem; // 0xd8
};

struct UParticleModuleEventGeneratorGPU {
	TArray<FParticleEventGPU_GenerateInfo> Events; // 0x50
};

struct UObjectProximityResetComponent {
	TArray<AActor*> ResetTargets; // 0xc8
	FScriptMulticastDelegate AllObjectsResetDelegate; // 0xd8
	float ObjectResetTimeout; // 0xf8
};

struct UNPCDialogPredicateGroupAIState {
	EAIDialogueState TargetState; // 0x38
};

struct UShopDialogue {
	FText ConfirmPurchaseMessage; // 0x28
	FText PurchaseFailedMessage; // 0x60
	FText PurchasePendingMessage; // 0x98
	FText PurchaseSuccessMessage; // 0xd0
	FText GetShopOffersFailedMessage; // 0x108
};

struct UParticleEmitter {
	FName EmitterName; // 0x28
	int32_t SubUVDataOffset; // 0x30
	EEmitterRenderMode EmitterRenderMode; // 0x34
	TArray<UParticleLODLevel*> LODLevels; // 0x38
	char ConvertedModules : 1; // 0x48
	int32_t PeakActiveParticles; // 0x4c
	int32_t InitialAllocationCount; // 0x50
	float MediumDetailSpawnRateScale; // 0x54
	float QualityLevelSpawnRateScale; // 0x58
	EDetailMode DetailMode; // 0x5c
	EEmitterQuality MaxEmitterQuality; // 0x5d
	EEmitterQuality MinEmitterQuality; // 0x5e
	char bIsSoloing : 1; // 0x60
	char bCookedOut : 1; // 0x60
	char bDisabledLODsKeepEmitterAlive : 1; // 0x60
	char bHasAnyEnabledLODs : 1; // 0x60
	char bHasAnyEnabledLODsValid : 1; // 0x60
	TArray<UParticleModule*> ModulesNeedingInstanceData; // 0xa0
};

struct UParticleModuleColorScaleOverLife {
	FRawDistributionVector ColorScaleOverLife; // 0x50
	FRawDistributionFloat AlphaScaleOverLife; // 0x88
	char bEmitterTime : 1; // 0xc0
};

struct AControllableObject {
	FControlObjectActionRuleParams ControlObjectActionRuleParams; // 0x428
	UPhrasesRadialDataAsset* Phrases; // 0x438
	bool AllowDisconnectWhenIdle; // 0x440
	uint32_t IdleDisconnectSecondsThreshold; // 0x444
	TWeakObjectPtr<AActor> ControllingActor; // 0x4e8
};

struct UKnockbackColliderComponent {
	FCollisionProfileName SolidCollisionProfile; // 0x5b8
	FCollisionProfileName KnockbackTraceProfile; // 0x5c0
	EKnockbackType KnockbackType; // 0x5c8
	FKnockBackInfo KnockbackParams; // 0x5cc
	TWeakObjectPtr<AActor> ActorToTarget; // 0x61c
	UDamagerType* KnockbackDamageType; // 0x628
	float KnockbackInterval; // 0x630
	ESolidState SolidState; // 0x638
};

struct AWaterPuzzleAlterationMechanismActionProxy {
	AActor* PuzzleActor; // 0x438
	float WaterReactionDelay; // 0x440
	int32_t WaterLevelCapacity; // 0x444
	float MinimumMouthOpenDuration; // 0x448
};

struct UCoherentUIGTBaseComponent {
	FScriptMulticastDelegate ReadyForBindings; // 0xc8
	FScriptMulticastDelegate BindingsReleased; // 0xd8
	FScriptMulticastDelegate FinishLoad; // 0xe8
	FScriptMulticastDelegate FailLoad; // 0xf8
	FScriptMulticastDelegate StartLoading; // 0x108
	FScriptMulticastDelegate NavigateTo; // 0x118
	FScriptMulticastDelegate JavaScriptEvent; // 0x128
	FScriptMulticastDelegate UIGTScriptingReady; // 0x138
	DelegateProperty LiveViewSizeRequested; // 0x148
	UTextureRenderTarget2D* Texture; // 0x170
	TextureFilter Filter; // 0x178
	bool bReceiveInput; // 0x179
	bool bReceiveInputWhenTransparent; // 0x17a
	bool AllowPerformanceWarnings; // 0x17b
	float ExecuteJSTimersThresholdMs; // 0x17c
	float UpdateStylesAndLayoutThresholdMs; // 0x180
	float RecordRenderingCommandsThresholdMs; // 0x184
	float PaintWarningThresholdMs; // 0x188
	int32_t LayersCountThreshold; // 0x18c
	int32_t LayerWidthThreshold; // 0x190
	int32_t LayerHeightThreshold; // 0x194
	bool bEnableAdditionalDefaultStyles; // 0x198
	bool bDelayedUpdate; // 0x199
};

struct UDrowningComponentParams {
	FBlendableDrowningParams DrowningParameters; // 0x28
	UWwiseObjectPoolWrapper* DrowningEmitterPool; // 0x50
	UWwiseEvent* StartDrowningSfx; // 0x58
	UWwiseEvent* StopDrowningSfx; // 0x60
	UWwiseEvent* StartDrowningSfxRemotePlayer; // 0x68
	UWwiseEvent* StopDrowningSfxRemotePlayer; // 0x70
	UWwiseEvent* SurfaceBreathSfxSoft; // 0x78
	UWwiseEvent* SurfaceBreathSfxMed; // 0x80
	UWwiseEvent* SurfaceBreathSfxHard; // 0x88
	UWwiseEvent* BubblesSfx; // 0x90
	FName PlayerDrowningAmountRtpc; // 0x98
	FName RemotePlayerDrowningAmountRtpc; // 0xa0
	UObject* BubblesFirstPerson; // 0xa8
	UObject* BubblesThirdPerson; // 0xb0
	FName BubblesAmountRtpc; // 0xb8
	FName BubblesFirstPersonSocket; // 0xc0
	FName BubblesThirdPersonSocket; // 0xc8
	FName BubblesRateParam; // 0xd0
	FName BubblesLargeRateParam; // 0xd8
	UCurveFloat* BubbleRateTimeCurve; // 0xe0
	FVector2D BubbleIntervalForOxygenLevel; // 0xe8
	float LargeBubbleStartTime; // 0xf0
};

struct UEndMatchCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UBTTask_UnwieldCurrentWeapon {
	bool WaitForSuccessfulUnwield; // 0x60
	bool ShouldUnwieldFast; // 0x61
};

struct UBodyLightControllerComponent {
	UCurveFloat* HourOfDayToIntensityMultiplierCurve; // 0xc8
	float BaseLightIntensity; // 0xd0
	float IntensitySpringAccel; // 0xd4
};

struct AMountpointActor {
	UInterpolatingMountpointComponent* MountpointComponent; // 0x470
	UCapsuleComponent* OverlapBroadcasterShapeComponent; // 0x478
	UInteractableComponent* InteractableComponent; // 0x480
	UStaticMeshComponent* MountedMeshComponent; // 0x488
	UStaticMeshComponent* ExtraRotationMountedMeshComponent; // 0x490
	UNotificationInputId* PressedNotificationInputId; // 0x498
	UNotificationInputId* ReleasedNotificationInputId; // 0x4a0
	float InputHoldTime; // 0x4a8
	FText MountVerb; // 0x4b0
	FText UnmountVerb; // 0x4e8
	bool IsNothingToMountTooltipEnabled; // 0x520
	FText NothingToMountDescription; // 0x528
	TArray<FVector> DetachInteractionPoints; // 0x560
	float DetachInteractionPointRadius; // 0x570
	float DetachInteractionMaxDistance; // 0x574
	float AttachInteractionMaxDistance; // 0x578
	bool UnmountIfOwnerShipSinks; // 0x57c
	bool UseClosestMountableToInteractor; // 0x57d
};

struct ACollectorsChestWieldableItem {
	UOpenableItemComponent* OpenableItemComponent; // 0x7a0
	TArray<UCollectorsChestItemSlotInteractable*> Slots; // 0x7a8
};

struct UInteractableLightParameters {
	bool LiveUpdate; // 0x28
	bool StartLit; // 0x29
	TArray<FInteractableLightParams> LightParams; // 0x30
};

struct UVertexAnimBase {
	USkeletalMesh* BaseSkelMesh; // 0x28
};

struct UCatalogListDataAsset {
	TArray<UCatalogDataAsset*> Catalogs; // 0x28
};

struct AShipInternalWater {
	FShipInternalWaterParams InternalWaterParams; // 0x3e0
	float CurrentVisualWaterLevel; // 0x418
	float WaterAmount; // 0x41c
	float SuperheatedWaterScaleSpeed; // 0x420
	FVector OcclusionCylinderPosition; // 0x424
	float OcclusionCylinderHeight; // 0x430
	float ServerWaterAmount; // 0x4d8
	bool IsInSuperheatedWater; // 0x4dc
	bool IsInSuperheatedWaterViaHeating; // 0x4dd
	USceneComponent* SceneRootComponent; // 0x4e0
	UStaticMeshComponent* WaterPlaneActivationVolume; // 0x4e8
	UStaticMeshComponent* WaterOcclusionVolume; // 0x4f0
	UFlatWaterMeshComponent* WaterMeshComponent; // 0x4f8
	UFlatWaterPlaneComponent* WaterPlaneComponent; // 0x500
	int32_t WaterOcclusionVolumeShrinkMaterialId; // 0x508
	FName WaterOcclusionVolumeShrinkPropertyName; // 0x50c
	UCurveFloat* WaterOcclusionZoneReductionCurve; // 0x518
	float RippleSizeMin; // 0x520
	float RippleSizeMax; // 0x524
	float RippleHeight; // 0x528
	float SuperheatedWaterCoolingRatePerSecond; // 0x52c
	float TimeToIgnoreCoolingDueToSuperheating; // 0x530
	FStatus SuperheatedWaterStatusToApply; // 0x538
	TArray<AActor*> OverlappingActors; // 0x578
};

struct UBorder {
	FLinearColor ContentColorAndOpacity; // 0x150
	DelegateProperty ContentColorAndOpacityDelegate; // 0x160
	FMargin Padding; // 0x170
	EHorizontalAlignment HorizontalAlignment; // 0x180
	EVerticalAlignment VerticalAlignment; // 0x181
	FSlateBrush Background; // 0x188
	DelegateProperty BackgroundDelegate; // 0x218
	FLinearColor BrushColor; // 0x228
	DelegateProperty BrushColorDelegate; // 0x238
	bool bShowEffectWhenDisabled; // 0x248
	DelegateProperty OnMouseButtonDownEvent; // 0x24c
	DelegateProperty OnMouseButtonUpEvent; // 0x25c
	DelegateProperty OnMouseMoveEvent; // 0x26c
	DelegateProperty OnMouseDoubleClickEvent; // 0x27c
	USlateBrushAsset* Brush; // 0x2a8
};

struct UFortIslandDataDefaultAssetEntry {
	UAISpawner* AISpawnerWhenFortActive; // 0x78
	UAISpawner* CannonsAISpawnerWhenFortActive; // 0x80
};

struct UMaterialExpressionFunctionOutput {
	FString OutputName; // 0x70
	FString Description; // 0x80
	int32_t SortPriority; // 0x90
	FExpressionInput A; // 0x98
	char bLastPreviewed : 1; // 0xd0
	FGuid Id; // 0xd4
};

struct UParticleModuleMaterialBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UBoneAIFormComponent {
	TArray<FAthenaAIFormComponentVfxCustomisation> VfxCustomisations; // 0xd0
	UAthenaAIFormDataAsset* FormData; // 0xe0
	UCharacterHitReactionDamagerTypeToAnimTypeLayer* HitReactionsLayer; // 0xe8
};

struct UStatusResponseToggleInteractionPoint {
	TArray<AInteractableBase*> InteractionPointClasses; // 0x30
	EShipCurseTag ShipCurseTag; // 0x40
	ECurseTag CurseTag; // 0x41
	float ResponseDuration; // 0x44
};

struct UMaterialExpressionPerInstanceRandom {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct AOpinionatedNameplateAttitudeTestActor {
	EAttitudeTowardActor DesiredAttitude; // 0x3d0
};

struct ATunnelOfTheDamnedPortalShipSpawnLocation {
	TArray<AShipSpawnLocation*> LinkedShipSpawnLocations; // 0x3d0
	TArray<ASpawnLocation*> AssociatedSpawnLocations; // 0x3e0
	UShipSize* ShipSize; // 0x3f0
	FString Description; // 0x3f8
	UBoxComponent* BoxComponent; // 0x408
};

struct UInputVectorAxisDelegateBinding {
	TArray<FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28
};

struct UNPCDialogOrExpression {
	UNPCDialogExpression* Left; // 0x28
	UNPCDialogExpression* Right; // 0x30
};

struct USetEQSNamedContextStep {
	USetEQSNamedContextStepDesc* Desc; // 0x90
};

struct UWaitForItemPickupStepDesc {
	FQuestVariableActor Item; // 0x80
	FQuestVariableActor PickerUpper; // 0x90
};

struct URegionalAssetListDataAsset {
	TArray<FStringAssetReference> RegionAssets; // 0x28
};

struct UWwisePersistentContentStore {
	TArray<UWwiseBank*> PersistentlyLoadedBanks; // 0x28
};

struct ULimpingComponent {
	UCurveFloat* LimpStickDeflectionCurve; // 0xc8
	UCurveFloat* LimpCameraCurve; // 0xd0
	int32_t NumAntiCheatSamplesOnServer; // 0xd8
	float MaxAveragePlayerSpeedServerTolerance; // 0xdc
	float MinLimpStrengthToCrossToPlayRumbleAndSfx; // 0xe0
	float PredictionValidityTime; // 0xe4
	float MinStickDeflectionToLimp; // 0xe8
	UForceFeedbackEffect* LimpCrunchRumble; // 0xf0
	float CameraSpringAccel; // 0xf8
	float CamPitchScalar; // 0xfc
	float CamRollScalar; // 0x100
	UWwiseEvent* LocalBrokenLegAudioStateEvent; // 0x108
	float DelayUntilStartCheatDetection; // 0x110
	float CheatTimeThresholdToApplyServerPenalty; // 0x114
	float MoveSpeedScalarIfCheating; // 0x118
	float CheatTimerDecaySpeed; // 0x11c
	float CheatPenaltyTime; // 0x120
	int32_t CheatPunishmentIncreasePerViolation; // 0x124
	AAthenaPlayerCharacter* Player; // 0x148
	bool bIsLimping; // 0x17e
};

struct UAthenaStreamedLevelService {
	TArray<FAthenaStreamedLevelData> ManagedLevels; // 0x30
};

struct AAIController {
	char bLOSflag : 1; // 0x458
	char bSkipExtraLOSChecks : 1; // 0x458
	char bAllowStrafe : 1; // 0x458
	char bWantsPlayerState : 1; // 0x458
	char bDisableControlRotation : 1; // 0x458
	UPathFollowingComponent* PathFollowingComponent; // 0x460
	UBrainComponent* BrainComponent; // 0x468
	UAIPerceptionComponent* PerceptionComponent; // 0x470
	UPawnActionsComponent* ActionsComp; // 0x478
	UBlackboardComponent* Blackboard; // 0x480
	UGameplayTasksComponent* CachedGameplayTasksComponent; // 0x488
	FScriptMulticastDelegate ReceiveMoveCompleted; // 0x4a0
};

struct ASwingMechanismAction {
	UMechanismInteractionComponent* MechanismInteractionComponent; // 0x610
	float MaxAngle; // 0x618
	float MinAngle; // 0x61c
	EAxis Axis; // 0x620
	float Damage; // 0x624
	EHealthChangedReason DamageReason; // 0x628
	TArray<USwingMechanismCordRenderComponent*> CordChildren; // 0x630
	TArray<FSwingMechanismMaterialAnimationContext> MaterialAnimations; // 0x640
};

struct AConditionalStatTriggerArea {
	UBoxComponent* AreaBoxComponent; // 0x3d0
	FPlayerStat StatToAward; // 0x3d8
	int32_t NumberOfPlayersRequired; // 0x3dc
	TArray<UEntitlementDesc*> EntitlementsToCheckFor; // 0x3e0
	TArray<UItemDesc*> WieldableItemsToCheckFor; // 0x3f0
	UNotificationInputId* RequiredInputId; // 0x400
	TArray<AController*> PlayersMeetingCriteria; // 0x418
};

struct USporeExposureComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UItemProxyShipTrackerComponentDataAsset {
	TArray<AActor*> ShipTypes; // 0x28
};

struct USunkenCurseArtefactVfxComponent {
	FColor VFXTintColour; // 0xc8
	UObject* DamagedParticleSystem; // 0xd0
	UObject* DefeatedParticleSystem; // 0xd8
	UObject* UnderwaterDefeatedParticleSystem; // 0xe0
	int32_t GlowMaterialIndex; // 0xe8
	FName GlowMaterialPropertyName; // 0xec
	float GlowMaterialScale; // 0xf4
	float GlowMaterialBias; // 0xf8
	float GlowUpdateSpeed; // 0xfc
	AStatueThreatBase* Statue; // 0x100
	UMaterialInstanceDynamic* GlowMaterial; // 0x108
};

struct UEntitlementSettings {
	FStringAssetReference EntitlementMap; // 0x38
	FStringAssetReference DefaultEntitlementsAsset; // 0x48
	TArray<FFeaturedEntitlements> EntitlementsAssetOverrides; // 0x58
	FStringAssetReference MissingIcon; // 0x68
};

struct URepairTypeId {
	FText DisplayName; // 0x28
};

struct UAreaOfEffectHealAIAbilityParams {
	float ChanceToGoOnCooldownInsteadOfExecuting; // 0xc8
	float HealthPercentageThresholdToHeal; // 0xcc
	AActor* StatusEffectZone; // 0xd0
	float MinimumTimeSpentHealing; // 0xd8
	float MaximumTimeSpentHealing; // 0xdc
};

struct UCookerIgnitionComponent {
	FCookerIgnitionParams CookerIgnitionParams; // 0xc8
};

struct UParticleModuleLifetime {
	char bUseGroupAValuesForAllGroups : 1; // 0x50
	FRawDistributionFloat LifeTime; // 0x58
	FRawDistributionFloat AdditionalLifetimes[0x5]; // 0x90
};

struct UMaterialExpressionStaticComponentMaskParameter {
	FExpressionInput Input; // 0x90
	char DefaultR : 1; // 0xc8
	char DefaultG : 1; // 0xc8
	char DefaultB : 1; // 0xc8
	char DefaultA : 1; // 0xc8
};

struct URemoveFogBankAvoidanceAreaStep {
	URemoveFogBankAvoidanceAreaStepDesc* StepDesc; // 0x90
};

struct UAthenaAnimationDeathDataAsset {
	UAnimSequence* SwimmingSurfaceDeath; // 0x28
	UAnimSequence* LocomotionDeath; // 0x30
	UAnimSequence* DrowningDeath; // 0x38
	FStringAssetReference WakeUp; // 0x40
	FStringAssetReference WakeUpSwimming; // 0x50
	UBlendSpace1D* DrowningDeathBS; // 0x60
	FStringAssetReference BeckonInto; // 0x68
	FStringAssetReference BeckonLoop; // 0x78
	UAnimationStateId* RevivingStateId; // 0x88
	UAnimationStateId* DeadStateId; // 0x90
};

struct ULookAtEmoteCameraComponent {
	UAthenaCameraComponent* TargetCamera; // 0xc8
	float BlendInTime; // 0xd0
	float AttachedTargetLerpFactor; // 0xd4
};

struct UParticleSystemReplay {
	int32_t ClipIDNumber; // 0x28
};

struct UParticleModuleCameraOffset {
	FRawDistributionFloat CameraOffset; // 0x50
	char bSpawnTimeOnly : 1; // 0x88
	EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x8c
};

struct UIsWearingClothingStatConditional {
	TArray<UClothingDesc*> Clothes; // 0x28
	int32_t MinimumRequiredItems; // 0x38
};

struct UBTTask_IgnoreActorTemporarily {
	float TimeToForget; // 0x88
};

struct UFloatingPawnMovement {
	float MaxSpeed; // 0x160
	float Acceleration; // 0x164
	float Deceleration; // 0x168
	float TurningBoost; // 0x16c
	char bPositionCorrected : 1; // 0x170
};

struct AGameplayDebuggingHUDComponent {
	float MenuStartX; // 0x3d0
	float MenuStartY; // 0x3d4
	float DebugInfoStartX; // 0x3d8
	float DebugInfoStartY; // 0x3dc
	UCanvas* Canvas; // 0x3e0
	APlayerController* PlayerOwner; // 0x3e8
};

struct UAISenseEvent_Hearing {
	FAINoiseEvent Event; // 0x28
};

struct ACullDistanceVolume {
	TArray<FCullDistanceSizePair> CullDistances; // 0x408
	char bEnabled : 1; // 0x418
};

struct UMeleeWeaponMovementSpeedConfig {
	TArray<FMeleeWeaponMovementSpeedPair> MovementSpeeds; // 0x28
};

struct UFireGridVFXManager {
	UFireGridVFXParamsDataAsset* VFXParams; // 0x28
	TMap<FName, UParticleSystemComponent*> SpawnedParticleSystemsForTemplates; // 0x30
	TArray<FFireParticleSystem> SpawnedCustomParticleSystemsForCells; // 0x80
	TMap<int32_t, FFireMesh> SpawnedMeshesForCells; // 0x90
	TMap<int32_t, UParticleSystemComponent*> SpawnedParticleSystemsForSmokeDescs; // 0xe0
	UParticleSystemComponent* SpawnedExteriorSmokeParticleSystem; // 0x130
	UParticleSystemComponent* SpawnedLowDetailParticleSystem; // 0x138
	TArray<FFireMesh> DespawningMeshes; // 0x140
	TArray<FFireGridRelativeSpawnDesc> InteriorSmokeSpawnDescs; // 0x150
	TArray<FFireGridLowDetailRelativeSpawnDesc> LowDetailVFXSpawnDescs; // 0x160
	TArray<FFireParticleSpawnData> ParticleSpawnLODSettings; // 0x170
	TArray<FFireGridLowDetailRelativeSpawnDesc> ExteriorSmokeVFXSpawnDescs; // 0x180
	TArray<FFireDefaultVFXSpawnData> VFXToSpawn; // 0x190
	TArray<FFireParticleSpawnList> InterleavedSpawnLists; // 0x1a8
	UFirePropagator* Propagator; // 0x1b8
};

struct UAudioSettings {
	FStringAssetReference DefaultSoundClassName; // 0x38
	FStringAssetReference DefaultBaseSoundMix; // 0x48
	FStringAssetReference VoiPSoundClass; // 0x58
	float LowPassFilterResonance; // 0x68
	int32_t MaximumConcurrentStreams; // 0x6c
	TArray<FAudioQualitySettings> QualityLevels; // 0x70
};

struct UInputAxisDelegateBinding {
	TArray<FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x28
};

struct UContestSelectIslandForItemStep {
	TArray<FName> SelectedIslands; // 0x98
};

struct UTaleQuestMerchantContract {
	FScriptMulticastDelegate OnCompleted; // 0x38
	FScriptMulticastDelegate OnExpired; // 0x48
	FScriptMulticastDelegate OnDelivered; // 0x58
	FScriptMulticastDelegate OnCollected; // 0x68
	FScriptMulticastDelegate OnAllocated; // 0x78
};

struct UShipNosediveBrake {
	UCurveFloat* SubmersionVsBrakeFactorCurve; // 0x28
	float BrakeForceScalar; // 0x30
	FVector LocalProbePos; // 0x34
	float ProbeHeight; // 0x40
};

struct UMemoryUsageVisualiserSettings {
	TArray<FMemoryVisualiserCategory> VisualiserCategories; // 0x28
};

struct AAICreatureCharacter {
	float DelayBeforeDestroying; // 0x628
	float TimeBeforeFadingOut; // 0x62c
	float PickupTime; // 0x630
	FVector TooltipDisplayOffset; // 0x634
	UActionStateMachineComponent* ActionStateMachineComponent; // 0x640
	UActionStatePriorityTableData* ActionStatePriorityTableData; // 0x648
	AActionStateCreatorDefinition* ActionStateCreatorDefinition; // 0x650
	UAthenaAIControllerParamsDataAsset* AIControllerParams; // 0x658
	UInteractableComponent* InteractableComponent; // 0x660
	UWaterHeightProviderComponent* WaterHeightProviderComponent; // 0x668
	UAnimNotifyWwiseEmitterComponent* AnimNotifyWwiseEmitterComponent; // 0x670
	URewindComponent* RewindComponent; // 0x678
	UActionRulesComponent* ActionRulesComponent; // 0x680
	UAICreatureCharacterMovementComponent* AICreatureCharacterMovementComponent; // 0x788
	UAIStrategyId* CurrentAIStrategy; // 0x790
};

struct UStatusResponseScreenSpaceVFX {
	FName MaterialParamName; // 0x30
	FName TintParamName; // 0x38
	FLinearColor TintColor; // 0x40
	float EffectStrength; // 0x50
	float FadeInAcceleration; // 0x54
	float FadeOutAcceleration; // 0x58
};

struct UDebugTaleAddInstancedLevelStepDesc {
	FText InstancedLevelKeyword; // 0x80
	uint32_t InstancedLevelIndex; // 0xb8
};

struct UTaleQuestParallelStepDesc {
	TArray<UTaleQuestStepDesc*> Descs; // 0x80
};

struct UGetNumberOfCollectedTornMapPiecesStepDesc {
	FQuestVariableGuid MapId; // 0x80
	FQuestVariableInt NumPieces; // 0x90
};

struct UStatusResponseShipCurseFX {
	FShipCurseFXData CurseFXData; // 0x30
	float Duration; // 0x60
};

struct UBlockEarthquakeTaleQuestService {
	UBlockEarthquakeTaleQuestServiceDesc* Desc; // 0x60
};

struct UCutsceneResponseCoordinator {
	bool SuppressResponses; // 0x38
	UObject* WorldContextObject; // 0x40
};

struct UMovieSceneVectorTrack {
	int32_t NumChannelsUsed; // 0xb0
};

struct UTaleQuestClueInventoryServiceDesc {
	UClass* AbandonedNoteItem; // 0x28
	UClass* CircleMapItem; // 0x48
};

struct UPetShopDataAsset {
	TArray<FPetShopPetSpecies> Species; // 0x28
};

struct UIslandByCompassBearingClueDestinationDescriptor {
	ECompassDirections CompassDirection; // 0x40
};

struct USoundNode {
	TArray<USoundNode*> ChildNodes; // 0x28
};

struct UProceduralFoliageTile {
	UProceduralFoliageSpawner* FoliageSpawner; // 0x28
	TArray<FProceduralFoliageInstance> InstancesArray; // 0xd0
};

struct AWieldableWeaponMock {
	UInventoryItemComponent* InventoryItem; // 0x790
};

struct AGameplayEventSignal_StaticMesh {
	ANetProxy* ProxyClass; // 0x3d8
	FName NexProxyFeatureToggle; // 0x3e0
	float TimeForSignalToActivateInSeconds; // 0x3e8
	float TimeForSignalToDeactivateInSeconds; // 0x3ec
	float TimeForAtmosphericPressureZoneToActivateInSeconds; // 0x3f0
	UAtmosphericPressureZoneComponent* AtmosphericPressureZoneComponent; // 0x3f8
	ULightingZoneComponent* LightingZoneComponent; // 0x400
	URotateMeshToActorComponent* RotateMeshToActorComponent; // 0x408
	UMeshComponent* SignalMesh; // 0x410
	USceneComponent* Root; // 0x418
	UMaterialInstanceDynamic* SignalMaterial; // 0x420
	EGameplayEventSignalType EventType; // 0x428
	ENetworkRegion OwningNetworkRegion; // 0x490
};

struct UVoyageLocationFixedNamedIslandsWhiteListAsset {
	TArray<FName> FixedIslandNamesWhiteList; // 0x28
};

struct AVolume {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct UGameplayEffect {
	EGameplayEffectDurationType DurationPolicy; // 0x30
	FGameplayEffectModifierMagnitude DurationMagnitude; // 0x38
	FScalableFloat Period; // 0x1a8
	bool bExecutePeriodicEffectOnApplication; // 0x1c8
	TArray<FGameplayModifierInfo> Modifiers; // 0x1d0
	TArray<FGameplayEffectExecutionDefinition> Executions; // 0x1e0
	FScalableFloat ChanceToApplyToTarget; // 0x1f0
	TArray<UGameplayEffect*> TargetEffectClasses; // 0x210
	TArray<UGameplayEffect*> TargetEffects; // 0x220
	TArray<UGameplayEffect*> OverflowEffects; // 0x230
	bool bDenyOverflowApplication; // 0x240
	bool bClearStackOnOverflow; // 0x241
	TArray<UGameplayEffect*> PrematureExpirationEffectClasses; // 0x248
	TArray<UGameplayEffect*> RoutineExpirationEffectClasses; // 0x258
	bool bRequireModifierSuccessToTriggerCues; // 0x268
	TArray<FGameplayEffectCue> GameplayCues; // 0x270
	UGameplayEffectUIData* UIData; // 0x280
	FInheritedTagContainer InheritableGameplayEffectTags; // 0x288
	FGameplayTagContainer GameplayEffectTags; // 0x300
	FInheritedTagContainer InheritableOwnedTagsContainer; // 0x328
	FGameplayTagContainer OwnedTagsContainer; // 0x3a0
	FGameplayTagRequirements OngoingTagRequirements; // 0x3c8
	FGameplayTagRequirements ApplicationTagRequirements; // 0x418
	FInheritedTagContainer RemoveGameplayEffectsWithTags; // 0x468
	FGameplayTagContainer ClearTagsContainer; // 0x4e0
	FGameplayTagRequirements GrantedApplicationImmunityTags; // 0x508
	EGameplayEffectStackingType StackingType; // 0x558
	int32_t StackLimitCount; // 0x55c
	EGameplayEffectStackingDurationPolicy StackDurationRefreshPolicy; // 0x560
	EGameplayEffectStackingPeriodPolicy StackPeriodResetPolicy; // 0x561
	TArray<FGameplayAbilitySpecDef> GrantedAbilities; // 0x568
};

struct UCharacterAudioEventControllerParams {
	UWwiseEvent* WieldEvent; // 0x28
	UWwiseEvent* StowEvent; // 0x30
	UWwiseEvent* EnemyHitNotifyEvent; // 0x38
	UWwiseObjectPoolWrapper* EnemyHitNotifyPool; // 0x40
};

struct UGameplayAbilitySet {
	TArray<FGameplayAbilityBindInfo> Abilities; // 0x28
};

struct UParticleModuleRotation {
	char bUseGroupARotationForAllGroups : 1; // 0x50
	FRawDistributionFloat StartRotation; // 0x58
	FRawDistributionFloat AdditionalStartRotation[0x5]; // 0x90
};

struct UReceiverPuzzleStatueAudioParamsDataAsset {
	UWwiseEvent* ReceiverChangingPosition; // 0x28
	UWwiseEvent* GrindingStart; // 0x30
	UWwiseEvent* GrindingStop; // 0x38
};

struct UWaterPuzzleAlterationMechanismAudioParams {
	UWwiseObjectPoolWrapper* AlterationMechanismPool; // 0x28
	UWwiseEvent* AlterationMechanismActivateEvent; // 0x30
	TArray<UWwiseEvent*> AlterationMechanismDeactivateEvents; // 0x38
	FName MechanismSubmergedSwitchGroup; // 0x48
	FName MechanismSubmergedSwitchSubmerged; // 0x50
	FName MechanismSubmergedSwitchNotSubmerged; // 0x58
	UWwiseObjectPoolWrapper* WaterLevelPuzzlePool; // 0x60
	UWwiseEvent* PuzzleWaterRiseStartEvent; // 0x68
	UWwiseEvent* PuzzleWaterRiseEndEvent; // 0x70
	UWwiseEvent* PuzzleWaterFallStartEvent; // 0x78
	UWwiseEvent* PuzzleWaterFallEndEvent; // 0x80
};

struct UPanelSlot {
	UPanelWidget* Parent; // 0x28
	UWidget* Content; // 0x30
};

struct AGameplayAbilityTargetActor_Trace {
	float MaxRange; // 0x4e8
	FCollisionProfileName TraceProfile; // 0x4ec
	bool bTraceAffectsAimPitch; // 0x4f4
};

struct UWaterPlaneExclusionComponent {
	FActorComponentSelector UseSpecificComponentForOverlaps; // 0xc8
};

struct UEmissaryParticipantComponent {
	int32_t EmissaryLevel; // 0xd0
	float EmissaryLevelProgress; // 0xd4
	FName AffiliatedCompany; // 0xd8
	bool IsAtMaxRank; // 0xe0
	bool IsEmissaryMaxRankQuestBeenActivatedThisSession; // 0xe1
	TArray<FMysteriousNotesCompletionEventsModelEntry> NoteCompletionIdents; // 0xe8
	FName VotedCompany; // 0x108
};

struct UFloatingMessageInABottleSeaClueCreator {
	int32_t LootItemSpawnXYDistanceFromClueIncrementMin; // 0x30
	int32_t LootItemSpawnXYDistanceFromClueIncrementMax; // 0x34
};

struct UShipCreatureManagerCreatureInstanceMotionModifierDataAsset {
	TArray<UCurveFloat*> SpeedModifierCurves; // 0x28
	TArray<UCurveFloat*> RollCurves; // 0x38
	TArray<UCurveVector*> OffsetCurves; // 0x48
};

struct ATreasureRoom {
	FScriptMulticastDelegate StartedDelegate; // 0x3d0
	FScriptMulticastDelegate FailDelegate; // 0x3e0
	FScriptMulticastDelegate EndedDelegate; // 0x3f0
	UBoxComponent* RoomAreaComponent; // 0x400
	UAISpawner* GoldHoarderSpawner; // 0x408
	AActor* SourceLocationActor; // 0x410
	UAIDioramaDesc* AIDioramaDesc; // 0x418
	float TriggerRadius; // 0x420
	UAISpawnerMusicZoneComponent* MusicZoneComponent; // 0x428
	UAIProximityPlayerTracker* ProximityPlayerTracker; // 0x430
	UAISpawner* ActiveSpawner; // 0x438
	UAIDioramaController* AIDioramaController; // 0x440
	TArray<AActor*> OverlappingActors; // 0x4d8
};

struct UStatusResponseActivateAudioState {
	FName StateName; // 0x30
};

struct UBlackboardData {
	UBlackboardData* Parent; // 0x28
	TArray<FBlackboardEntry> Keys; // 0x30
	char bHasSynchronizedKeys : 1; // 0x40
};

struct APerfTestIslandService {
	UIslandFrameworkSettings* IslandFrameworkSettings; // 0x458
	UIslandDataAsset* IslandDataAsset; // 0x460
	USunkenIslandSettingsDataAsset* SunkenIslandSettingsDataAsset; // 0x468
	TArray<FIsland> IslandArray; // 0x488
	TArray<FCannonAISpawnerZone> CannonAISpawnerZoneDebugArray; // 0x5b8
	TArray<FCannonAILocation> CannonAILocationDebugArray; // 0x5c8
	TArray<UAIProximityPlayerTracker*> PlayerTrackers; // 0x5d8
};

struct UEditableText {
	FText Text; // 0x138
	DelegateProperty TextDelegate; // 0x170
	FText HintText; // 0x180
	DelegateProperty HintTextDelegate; // 0x1b8
	FEditableTextStyle WidgetStyle; // 0x1c8
	USlateWidgetStyleAsset* Style; // 0x3f0
	USlateBrushAsset* BackgroundImageSelected; // 0x3f8
	USlateBrushAsset* BackgroundImageComposing; // 0x400
	USlateBrushAsset* CaretImage; // 0x408
	FSlateFontInfo Font; // 0x410
	FSlateColor ColorAndOpacity; // 0x450
	bool IsReadOnly; // 0x480
	bool IsPassword; // 0x481
	float MinimumDesiredWidth; // 0x484
	bool IsCaretMovedWhenGainFocus; // 0x488
	bool SelectAllTextWhenFocused; // 0x489
	bool RevertTextOnEscape; // 0x48a
	bool ClearKeyboardFocusOnCommit; // 0x48b
	bool SelectAllTextOnCommit; // 0x48c
	FScriptMulticastDelegate OnTextChanged; // 0x490
	FScriptMulticastDelegate OnTextCommitted; // 0x4a0
};

struct UMaterialExpressionTextureSampleParameterCube {
	FName ParameterName; // 0x1a8
	FGuid ExpressionGUID; // 0x1b0
	FName Group; // 0x1c0
};

struct URadialCreationRuleAsset {
	FRadialInstance Ruleset; // 0x28
};

struct UAnimNotify_SetLookAtEnabled {
	bool Enabled; // 0x38
};

struct UMechanismAnimationEvent {
	EMechanismAnimationEventType Type; // 0x38
};

struct UInterpGroupCamera {
	UCameraAnim* CameraAnimInst; // 0x50
	float CompressTolerance; // 0x58
};

struct AStaticSimpleBootyItemProxy {
	URetractableComponent* RetractableComponent; // 0x7a8
	UItemProxyShipTrackerComponent* ItemProxyShipTrackerComponent; // 0x7b0
};

struct AAthenaAIShipController {
	UBehaviorTree* BTAsset; // 0x618
	UAthenaAIShipControllerParamsDataAsset* ShipParamsDataAsset; // 0x638
	UStatusEffectManagerComponent* StatusEffectManagerComponent; // 0x640
	FStandardAnchorDynamicsParameters AnchorDynamicsParams; // 0x648
};

struct AAthenaGameMode {
	APawn* GhostShipPawnClass; // 0x4e0
	UNetworkedEventsWhitelistDefinition* ServerNetworkedEventsWhitelistDefinition; // 0x4e8
	FGhostShipCoordinator GhostShipCoordinator; // 0x688
	FStorageContainerRefresher StorageContainerRefresher; // 0x8b8
	URiddleQuestDescGeneratorData* RiddleQuestDescGeneratorData; // 0x990
	float RespawnTimer; // 0x998
	float ContestRespawnTimer; // 0x99c
	float StorageContainerRefreshInterval; // 0x9a0
	int32_t ContainerRefreshBatchSize; // 0x9a4
};

struct ULandmarkReactionTriggerComponent {
	TArray<FLandmarkReactionKeyFrame> ReactionFrames; // 0xd0
};

struct UVoyageRecipeDataAsset {
	FVoyageRecipe Recipe; // 0x28
	bool IsVoyageLocationBound; // 0x168
};

struct ULeakerComponent {
	UParticleSystem* ParticleSystem_WaterLeakAboveWater; // 0x2b8
	UParticleSystem* ParticleSystem_WaterLeakBelowWater; // 0x2c0
	UParticleSystem* ParticleSystem_RepairLeakAboveWater; // 0x2c8
	UParticleSystem* ParticleSystem_RepairLeakBelowWater; // 0x2d0
	UWwiseEvent* WaterLeakSfx_Play; // 0x2d8
	UWwiseEvent* WaterLeakSfx_Stop; // 0x2e0
	UWwiseEvent* WaterLeakRepairSfx_Play; // 0x2e8
	UWwiseEvent* WaterLeakRepairSfx_Stop; // 0x2f0
	FName WaterLeakUnderwaterSwitchGroup; // 0x2f8
	FName WaterLeakUnderwaterSwitchDefaultAboveWater; // 0x300
	FName WaterLeakUnderwaterSwitchUnderwater; // 0x308
	float WaterLeakFadeTime; // 0x310
	FName WaterLeakEmitterName; // 0x314
	UWwiseObjectPoolWrapper* WaterLeakWisePool; // 0x320
	TArray<FLeak> Leaks; // 0x328
};

struct UPlayerCurseComponent {
	UParticleSystem* TemplateVFX; // 0xc8
	UActorComponent* AudioComponentClass; // 0xd0
	UWwiseEvent* PlayCurseActiveAudioLoopEvent; // 0xd8
	UWwiseEvent* StopCurseActiveAudioLoopEvent; // 0xe0
	FName CurseAudioSwitchGroup; // 0xe8
	TArray<FPlayerCurseToAudioSwitchValue> CurseToAudioSwitchValues; // 0xf0
	UParticleSystemComponent* CurseVFX; // 0x118
	EPlayerCurseTag ActiveCurseForFX; // 0x170
};

struct UAbilityTask_WaitCancel {
	FScriptMulticastDelegate OnCancel; // 0x68
};

struct UInterpTrackInstVectorProp {
	FVector ResetVector; // 0x40
};

struct UAnimNotifyState_TimedParticleEffect {
	UParticleSystem* PSTemplate; // 0x28
	FName SocketName; // 0x30
	FVector LocationOffset; // 0x38
	FRotator RotationOffset; // 0x44
	bool bOwnerOnlySee; // 0x50
	bool bOwnerNoSee; // 0x51
	bool bDestroyAtEnd; // 0x52
	bool bWorldOwnedEffect; // 0x53
};

struct UDeviceProfile {
	FString DeviceType; // 0x38
	FString BaseProfileName; // 0x48
	UObject* Parent; // 0x58
	TArray<FString> CVars; // 0x68
};

struct UParticleModuleMeshMaterial {
	TArray<UMaterialInterface*> MeshMaterials; // 0x50
};

struct UPortalTaleServiceDesc {
	UPortalDesc* FallbackPortalDesc; // 0x28
};

struct UJoinSessionCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UHierarchicalInstancedStaticMeshComponent {
	TArray<int32_t> SortedInstances; // 0x6e0
	int32_t NumBuiltInstances; // 0x6f0
	FBox BuiltInstanceBounds; // 0x6f4
	FBox UnbuiltInstanceBounds; // 0x710
	TArray<FBox> UnbuiltInstanceBoundsList; // 0x730
	int32_t OcclusionLayerNumNodes; // 0x740
	bool bDisableCollision; // 0x746
};

struct UMechanismMaterialMap_C {
	TArray<FMechanismMaterialMapEntry> MaterialClusters; // 0x28
};

struct UAbandonedNoteClueGenderSpecificTextIndexAsset {
	TArray<UAbandonedNoteClueGenderSpecificTextAsset*> ClueDestinationDescriptions; // 0x28
};

struct UMaterialExpression {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UAbilitySystemGlobals {
	FStringClassReference AbilitySystemGlobalsClassName; // 0x28
	FGameplayTag ActivateFailCooldownTag; // 0x38
	FName ActivateFailCooldownName; // 0x40
	FGameplayTag ActivateFailCostTag; // 0x48
	FName ActivateFailCostName; // 0x50
	FGameplayTag ActivateFailTagsBlockedTag; // 0x58
	FName ActivateFailTagsBlockedName; // 0x60
	FGameplayTag ActivateFailTagsMissingTag; // 0x68
	FName ActivateFailTagsMissingName; // 0x70
	FGameplayTag ActivateFailNetworkingTag; // 0x78
	FName ActivateFailNetworkingName; // 0x80
	FString GlobalCurveTableName; // 0x88
	FString GlobalAttributeMetaDataTableName; // 0x98
	FString GlobalAttributeSetDefaultsTableName; // 0xa8
	FStringAssetReference GlobalGameplayCueManagerName; // 0xb8
	TArray<FString> GameplayCueNotifyPaths; // 0xc8
	FStringAssetReference GameplayTagResponseTableName; // 0xd8
	UGameplayTagReponseTable* GameplayTagResponseTable; // 0xe8
	bool PredictTargetGameplayEffects; // 0xf0
	UCurveTable* GlobalCurveTable; // 0xf8
	UCurveTable* GlobalAttributeDefaultsTable; // 0x100
	UDataTable* GlobalAttributeMetaDataTable; // 0x108
	UGameplayCueManager* GlobalGameplayCueManager; // 0x110
};

struct UItemWithoutIconsDesc {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct UGenericPartWithVFXDescAsset {
	UParticleSystem* VFX; // 0x30
};

struct AServerOnlyTestActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct USunkenItemDataAsset {
	TArray<FIslandItemSpawnLocationData> SpawnLocations; // 0x38
};

struct APanicTeleportVolume {
	UBoxComponent* AreaComponent; // 0x3d0
	TArray<ASpawnLocation*> AssociatedSpawnLocations; // 0x3d8
	TArray<TWeakObjectPtr<AAthenaPlayerCharacter>> PlayersInVolume; // 0x3e8
};

struct ARowboat {
	UChildActorComponent* LeftSideClamberSpot; // 0x758
	UChildActorComponent* RightSideClamberSpot; // 0x760
	UChildActorComponent* ForceSpot; // 0x768
	UChildActorComponent* Lantern; // 0x770
	UChildActorComponent* RowingSeat; // 0x778
	UChildActorComponent* StorageSeat; // 0x780
	UShipLiveryComponent* LiveryComponent; // 0x788
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x790
	FVector WaterExclusionOffset; // 0x798
	UTetherCustomisationComponent* TetherCustomisationComponent; // 0x7a8
	UHealthComponent* HealthComponent; // 0x7b0
	UActorDamageableComponent* ActorDamageableComponent; // 0x7b8
	URammableComponent* RammableComponent; // 0x7c0
	UScrapeableComponent* ScrapeableComponent; // 0x7c8
	URowboatAudioComponent* RowboatAudio; // 0x7d0
	UBaseHullDragDynamicsDesc* HullDragDynamicsDesc; // 0x7d8
	UBowSplashContainer* OarSplashContainer; // 0x7e0
	UMountableComponent* MountableComponent; // 0x7e8
	UCurveFloat* LinearDampingOverTimeWhileBeachedScalarCurve; // 0x7f0
	UCurveFloat* AngularDampingOverTimeWhileBeachedScalarCurve; // 0x7f8
	FRowboatDamageEffectData DamageEffectData; // 0x800
	FRowboatStrainDamageData StrainDamageData; // 0x818
	TArray<UChildActorComponent*> AlwaysEnabledInteractables; // 0x838
	UShroudBreakerTrackerComponent* ShroudBreakerTrackerComponent; // 0x848
	bool IsBeingLaunched; // 0x850
	bool IsSinking; // 0x851
	float MaxPushingAngle; // 0x854
	float CurrentStrainAmount; // 0x858
	bool IsDocked; // 0x85c
	ECollisionChannel CoverCollisionChannel; // 0x85e
	float UnderCoverCheckInterval; // 0x860
	float UnderCoverHeight; // 0x864
	TArray<FVector> RelativeUnderCoverProbeRoots; // 0x868
	ETrackedActorType TrackedActorType; // 0x878
};

struct UAbilityTask {
	FName InstanceName; // 0x28
};

struct UVectorFieldComponent {
	UVectorField* VectorField; // 0x588
	float Intensity; // 0x590
	float Tightness; // 0x594
	char bPreviewVectorField : 1; // 0x598
};

struct ASeat {
	UNotificationInputId* InteractionInput; // 0x508
	FSittingActionStateParams SittingStateParams; // 0x510
	UInteractableComponent* InteractableComponent; // 0x5b0
	FName SocketName; // 0x5b8
	FText InteractionVerb; // 0x5c0
	FText InteractionDisplayName; // 0x5f8
	bool HoldToInteract; // 0x630
	UNotificationInputId* HoldInteractionInput; // 0x638
	float HoldDuration; // 0x640
	float CosCameraAngleToTurnOffFirstPersonMesh; // 0x644
};

struct UAssignItemStepDesc {
	FQuestVariableClass TypeVar; // 0x80
	UItemDesc* TypeValue; // 0x90
};

struct AKrakenHead {
	USkeletalMeshComponent* SkeletalMesh; // 0x3e0
	UHealthComponent* HealthComponent; // 0x3e8
	UActorDamageableComponent* ActorDamageableComponent; // 0x3f0
	USphereComponent* SphereComponent; // 0x3f8
	UVenomComponent* VenomComponent; // 0x400
	UExplosionComponent* ExplosionComponent; // 0x408
	UParticleSystem* BiteAttackVFX; // 0x410
	TArray<FStatus> BreathingInContinuousStatusesToApply; // 0x418
	float BreatheInStatusDuration; // 0x428
	TArray<FStatus> RoarContinuousStatusesToApply; // 0x430
	float RoarStatusDuration; // 0x440
	UEnvQuery* RoarEQSQuery; // 0x448
	UDamagerType* KnockbackDamagerType; // 0x450
	FKnockBackInfo RoarKnockbackInfo; // 0x458
	UKrakenHeadAnimationInstance* HeadAnimInstance; // 0x4a8
	FVector EQSQuerierLocation; // 0x4b0
	UKrakenHeadHealthParamsDataAsset* KrakenHeadHealthParams; // 0x4c0
	FHeadStateChangeRequest HeadStateRequest; // 0x4c8
	bool IsDamageEnabled; // 0x4e0
	USceneComponent* Root; // 0x4e8
	FName BiteAttackImpactNamedPointsGroupName; // 0x5b0
};

struct AAllianceService {
	UAllianceSettingsAsset* Settings; // 0x3d8
	TArray<FAlliance> Alliances; // 0x3e0
	UAllianceServiceTelemetryComponent* TelemetryComponent; // 0x3f0
	TArray<FCrewAllianceJoinStatus> CrewAllianceJoinStatuses; // 0x3f8
	FScriptMulticastDelegate OnCrewJoinedAlliance; // 0x430
};

struct AAthenaAIControllerBase {
	char bLOSflag : 1; // 0x458
	char bSkipExtraLOSChecks : 1; // 0x458
	char bAllowStrafe : 1; // 0x458
	char bWantsPlayerState : 1; // 0x458
	char bDisableControlRotation : 1; // 0x458
	UPathFollowingComponent* PathFollowingComponent; // 0x460
	UBrainComponent* BrainComponent; // 0x468
	UAIPerceptionComponent* PerceptionComponent; // 0x470
	UPawnActionsComponent* ActionsComp; // 0x478
	UBlackboardComponent* Blackboard; // 0x480
	UGameplayTasksComponent* CachedGameplayTasksComponent; // 0x488
	FScriptMulticastDelegate ReceiveMoveCompleted; // 0x4a0
};

struct UCampaignComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UControlIntentInputComponent {
	TScriptInterface<Class> ControlledObject; // 0x280
};

struct ALandscapeGizmoActiveActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UPawnAction_Repeat {
	UPawnAction* ActionToRepeat; // 0x90
	UPawnAction* RecentActionCopy; // 0x98
	EPawnActionFailHandling ChildFailureHandlingMode; // 0xa0
};

struct UPawnAction_Sequence {
	TArray<UPawnAction*> ActionSequence; // 0x90
	EPawnActionFailHandling ChildFailureHandlingMode; // 0xa0
	UPawnAction* RecentActionCopy; // 0xa8
};

struct UWieldablePetAnimationInstance {
	FAthenaAnimationPets PetAnimationParams; // 0x648
	float LocomotionSpeed; // 0x728
	bool TurningActive; // 0x72c
	bool TurnLeft; // 0x72d
	float TurnRate; // 0x730
	float PositiveMoodBlendTime; // 0x734
	FVector LookAtLocation; // 0x738
	FRotator SurfaceOrientation; // 0x744
	float TransitionFromTurningMovementSpeed; // 0x750
	float LookAtAlpha; // 0x754
	float LookAtClamp; // 0x758
	bool LookAtActive; // 0x75c
	bool LookAtAnimationOverride; // 0x75d
	bool LookAtAnimationDisabled; // 0x75e
	bool IsStrokeAllowed; // 0x75f
	bool PositiveMoodModifierAllowed; // 0x760
	float PositiveMoodAlpha; // 0x764
	float PositiveMoodAnimationActiveValue; // 0x768
	bool CloseRadiusPositiveMoodModifierAllowed; // 0x76c
	bool IsSmoothingClientPosition; // 0x76d
	float CloseRadiusPositiveMoodModifierActiveValue; // 0x770
	float AlternateHeldPoseBlendStrength; // 0x774
	bool AnimationsLoaded; // 0x778
	TArray<EAthenaAnimationPetRoamingState> IdleOverrideExceptions; // 0x780
	UWeightedAnimSequenceLoadOnDemand* WeightedAnimSequenceLoadOnDemandRoaming; // 0x790
	UWeightedAnimSequenceLoadOnDemand* WeightedAnimSequenceLoadOnDemandHeld; // 0x798
	UWeightedAnimSequenceLoadOnDemand* WeightedAnimSequenceLoadOnDemandShow; // 0x7a0
	UAnimMontage* PetCurrentPlayingAnimMontage; // 0x7a8
	TMap<EAthenaAnimationPetRoamingState, FPetRoamingAnimationStateDefinitionWrapper> RoamingAnimationStates; // 0x7c8
	FPetRoamingAnimationState LoadedState; // 0x818
	FPetRoamingAnimationState PriorLoadedState; // 0x850
	FAnimationInterruptData CurrentlyPlayingAnimationInterruptData; // 0x888
	APet* Pet; // 0x8a0
	UCharacterMovementComponent* CharacterMovementComponent; // 0x8a8
};

struct AWeepingChestItemInfo {
	EBootyTypes BootyType; // 0x528
	FGuid Id; // 0x52c
	bool PlayedFirstTimeEquipSfx; // 0x53c
	TArray<FPlayerStat> HandInPlayerStats; // 0x540
	TArray<FPlayerStat> HandInStolenPlayerStats; // 0x550
	TArray<FPlayerStat> HandInStolenFromPlayerStats; // 0x560
	TArray<FPlayerStat> HandInGiftPlayerStats; // 0x570
	TArray<FPlayerStat> HandInAsPirateLegendPlayerStats; // 0x580
	TArray<FPlayerStat> HandInOnSchedulePlayerStats; // 0x590
	TArray<FPlayerStat> HandInAsPirateLegendOnSchedulePlayerStats; // 0x5a0
	TArray<FEmissaryBootyItemStats> HandInAsEmissaryPlayerStats; // 0x5b0
	TArray<FEmissaryBootyItemStats> HandInAsMaxLevelEmissaryPlayerStats; // 0x5c0
	TArray<FEmissaryBootyItemStats> HandInStolenAsEmissaryPlayerStats; // 0x5d0
	TArray<FEmissaryBootyItemStats> HandInStolenAsMaxLevelEmissaryPlayerStats; // 0x5e0
	TArray<FPlayerStat> UsePlayerStats; // 0x5f0
	TArray<FPlayerStat> UseStolenPlayerStats; // 0x600
	FCompanyBootyStatList CompanySpecificStats; // 0x610
	FConditionalHandInStat ConditionalHandInStat; // 0x620
	UPopUpMessageDesc* DiscoveredPopupDesc; // 0x640
	FBootyItemSellPrerequisites SellPrerequisites; // 0x648
	UTrackedOwnerComponent* TrackedOwnerComponent; // 0x658
	UItemQualityComponent* ItemQualityComponent; // 0x660
	EEmissaryQualityLevel ItemQualityLevel; // 0x668
	TArray<FPerComanyItemQualityEntry> CompanySpecificItemQualityLevel; // 0x670
	FRewardId HandInRewardId; // 0x680
	TArray<FCompanySpecificBootyReward> HandInRewardIdCompanySpecific; // 0x688
	bool RewardToOwnCrewOnly; // 0x698
	FName Rarity; // 0x69c
	UDeliverableComponent* DeliverableComponent; // 0x6c0
	UCrewOwnershipTrackingComponent* CrewOwnershipTrackingComponent; // 0x6c8
	UBootyItemShipOwnershipComponent* BootyItemShipOwnershipComponent; // 0x6d0
	ESpawnedItemSource SpawnSource; // 0x6d8
};

struct UAthenaAIPerceptionComponent {
	float HearingRange; // 0xc8
	float LoSHearingRange; // 0xcc
	float SightRadius; // 0xd0
	float LoseSightRadius; // 0xd4
	float PeripheralVisionAngle; // 0xd8
	TArray<UAISenseConfig*> SensesConfig; // 0xe0
	UAISense* DominantSense; // 0xf0
	AAIController* AIOwner; // 0x108
	FScriptMulticastDelegate OnPerceptionUpdated; // 0x190
	FScriptMulticastDelegate OnTargetPerceptionUpdated; // 0x1a0
};

struct UMaterialExpressionTime {
	char bIgnorePause : 1; // 0x70
	char bOverride_Period : 1; // 0x70
	float Period; // 0x74
};

struct UVoyageProposalDesc {
	UCompany* TradingCompany; // 0xd8
	int32_t Rank; // 0xe0
	bool UnlockedForAnyRank; // 0xe4
	bool AvailableEvenIfRecentlySeen; // 0xe5
	int32_t Difficulty; // 0xe8
	FStringAssetReference TooltipBackgroundImageUrl; // 0xf0
	UVoyageRecipeDataAsset* VoyageRecipe; // 0x100
	UVoyageDescDataAsset* VoyageDesc; // 0x108
	FStringAssetReference OverrideVotingTableVoyageProposalMesh; // 0x110
	FStringAssetReference OverrideOpenVoyageProposalMesh; // 0x120
};

struct UEditableGameplayTagQueryExpression_AnyTagsMatch {
	FGameplayTagContainer Tags; // 0x28
};

struct UInterpGroupInstDirector {
	UInterpGroup* Group; // 0x28
	AActor* GroupActor; // 0x30
	TArray<UInterpTrackInst*> TrackInst; // 0x38
};

struct AAthenaWaterEmissionVolume {
	UWaterEmissionVolumeComponent* WaterEmissionVolumeComponent; // 0x3d0
};

struct UMaterialExpressionMaterialFunctionCall {
	UMaterialFunction* MaterialFunction; // 0x70
	TArray<FFunctionExpressionInput> FunctionInputs; // 0x78
	TArray<FFunctionExpressionOutput> FunctionOutputs; // 0x88
};

struct UClusterStaticMeshComponent {
	UItemDescSpawnData* ItemDescSpawnData; // 0x5f0
};

struct UDiscardTransientActorStep {
	UDiscardTransientActorStepDesc* Desc; // 0x88
};

struct UHullDamagePointProxy {
	URepairableComponent* Repairable; // 0x30
};

struct UDistributionFloatConstant {
	float Constant; // 0x38
};

struct UCompany {
	FText DisplayName; // 0x28
	FName UniqueTextIdentifier; // 0x60
};

struct ACalmWaterZone {
	UCalmWaterComponent* CalmWaterComponent; // 0x3d0
};

struct ANavigationData {
	UPrimitiveComponent* RenderingComp; // 0x3d0
	FNavDataConfig NavDataConfig; // 0x3d8
	char bEnableDrawing : 1; // 0x430
	char bRebuildAtRuntime : 1; // 0x430
	ERuntimeGenerationType RuntimeGeneration; // 0x434
	char bForceRebuildOnLoad : 1; // 0x438
	float ObservedPathsTickInterval; // 0x43c
	TArray<FSupportedAreaData> SupportedAreas; // 0x528
};

struct AAmbientWaterSpawnerManager {
	USceneComponent* Root; // 0x3e0
	UAthenaAISettings* AthenaAISettings; // 0x3e8
	TArray<FName> AISpawnBlockingContextNames; // 0x3f0
	UAIPerPlayerSpawner* SharkPerPlayerSpawnerTemplate; // 0x400
	UAIPerPlayerSpawner* SirenPerPlayerSpawnerTemplate; // 0x408
	float SirenEncounterRegionRadius; // 0x410
	float SirenEncounterShutdownTime; // 0x414
	FWeightedProbabilityRangeOfRanges InitialSirenSpawningWeightedTimeRange; // 0x418
	FWeightedProbabilityRangeOfRanges UnsuccessfulSirenSpawningWeightedTimeRange; // 0x448
	FWeightedProbabilityRangeOfRanges SuccessfulSirenSpawningWeightedTimeRange; // 0x478
	FChanceForSharksToBlockSirenEncounterData SharkEncounterSpawnBlockingData; // 0x4a8
	TArray<FPerDepthSpawnChance> PerDepthSpawnChances; // 0x4b8
	UAIPerPlayerSpawner* SharkPerPlayerSpawner; // 0x4c8
	TArray<FPlayerInWaterData> PlayersInWater; // 0x600
	TArray<FSirenEncounterData> SirenEncounters; // 0x610
};

struct USpawnableItemsDataAsset {
	TArray<FSpawnableItemCategory> Categories; // 0x28
};

struct UBountyQuestDescData {
	TArray<UItemDesc*> AllBountyRewards; // 0x28
	URiddleTextPhraseDataAsset* LocationPhrase; // 0x38
	URiddleTextPhraseDataAsset* LocationUndergroundPhrase; // 0x40
	TArray<FBountyQuestMugShotSet> BountyMapMugShotSets; // 0x48
	TArray<FBountyQuestLayoutOption> BountyMapLayoutOptions; // 0x58
	TArray<FText> DefaultBountyMapDescriptions; // 0x68
	UClass* DefaultPawnClass; // 0x78
	TArray<FLoadoutSubstitution> TargetLoadoutSubstitutions; // 0x98
	TArray<FCompanySkillsetProgressions> Skillsets; // 0xa8
};

struct UAthenaAnimationEmoteListingAsset {
	TArray<UAthenaAnimationEmoteGroupingAsset*> EmoteGroupings; // 0x28
};

struct ATestablePlayerController {
	UPlayer* Player; // 0x430
	APawn* AcknowledgedPawn; // 0x440
	UInterpTrackInstDirector* ControllingDirTrackInst; // 0x448
	AHUD* MyHUD; // 0x458
	APlayerCameraManager* PlayerCameraManager; // 0x460
	APlayerCameraManager* PlayerCameraManagerClass; // 0x468
	bool bAutoManageActiveCameraTarget; // 0x470
	FRotator TargetViewRotation; // 0x474
	TArray<AActor*> HiddenActors; // 0x490
	float LastSpectatorStateSynchTime; // 0x4a0
	FVector LastSpectatorSyncLocation; // 0x4a4
	FRotator LastSpectatorSyncRotation; // 0x4b0
	int32_t ClientCap; // 0x4bc
	UCheatManager* CheatManager; // 0x4c0
	UCheatManager* CheatClass; // 0x4c8
	UPlayerInput* PlayerInput; // 0x4d0
	TArray<FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x4d8
	char bPlayerIsWaiting : 1; // 0x578
	char NetPlayerIndex; // 0x57c
	bool bHasVoiceHandshakeCompleted; // 0x57d
	UNetConnection* PendingSwapConnection; // 0x580
	UNetConnection* NetConnection; // 0x588
	float InputYawScale; // 0x59c
	float InputPitchScale; // 0x5a0
	float InputRollScale; // 0x5a4
	char bShowMouseCursor : 1; // 0x5a8
	char bEnableClickEvents : 1; // 0x5a8
	char bEnableTouchEvents : 1; // 0x5a8
	char bEnableMouseOverEvents : 1; // 0x5a8
	char bEnableTouchOverEvents : 1; // 0x5a8
	char bForceFeedbackEnabled : 1; // 0x5a8
	EMouseCursor DefaultMouseCursor; // 0x5ac
	EMouseCursor CurrentMouseCursor; // 0x5ad
	ECollisionChannel DefaultClickTraceChannel; // 0x5ae
	ECollisionChannel CurrentClickTraceChannel; // 0x5af
	float HitResultTraceDistance; // 0x5b0
	float ForceFeedbackIntensity; // 0x5b4
	UInputComponent* InactiveStateInputComponent; // 0x640
	UTouchInterface* CurrentTouchInterface; // 0x668
	ASpectatorPawn* SpectatorPawn; // 0x6a0
	FVector SpawnLocation; // 0x6a8
	TMap<ULevel*, UInputComponent*> LevelInputComponents; // 0x6b8
	bool bIsLocalPlayerController; // 0x71c
	uint16_t SeamlessTravelCount; // 0x71e
	uint16_t LastCompletedSeamlessTravelCount; // 0x720
	bool bInCinematicMode; // 0x722
};

struct USpacer {
	FVector2D Size; // 0x138
};

struct UTaleQuestLockCaptainCabinDoorStepDesc {
	FQuestVariableShipwreck Shipwreck; // 0x80
	FQuestVariableItemInfo CabinKey; // 0x90
};

struct UGameplayCueManager {
	UGameplayCueSet* GlobalCueSet; // 0x28
	UObjectLibrary* GameplayCueNotifyActorObjectLibrary; // 0x30
	UObjectLibrary* GameplayCueNotifyStaticObjectLibrary; // 0x38
	FStreamableManager StreamableManager; // 0x40
	TArray<FGameplayCuePendingExecute> PendingExecuteCues; // 0x160
	int32_t GameplayCueSendContextCount; // 0x170
};

struct ADockableKeyedInstrument {
	UParticleSystem* PipeVFXObject; // 0x510
	int32_t CurrentKeyID; // 0x558
	FText DisplayName; // 0x560
	float MoveKeyThreshold; // 0x598
	float MovementCooldown; // 0x59c
	float XAxisDeadzone; // 0x5a0
	int32_t StartingKeyID; // 0x5a4
	UStaticMeshComponent* BaseMeshComponent; // 0x5a8
	UInteractableComponent* InteractableComponent; // 0x5b0
	USceneComponent* PlayerPositionComponent; // 0x5b8
	UWwiseObjectPoolWrapper* SfxPool; // 0x5c0
	TArray<UParticleSystemComponent*> VFXPositions; // 0x5c8
	UParticleSystemComponent* CurrentVFXSpawner; // 0x5d8
};

struct UWeightedDebrisDataAsset {
	TArray<FWeightedDebris> Debris; // 0x28
};

struct UMaterialExpressionConstant4Vector {
	FLinearColor Constant; // 0x70
};

struct UAddMechanismTriggerStepDesc {
	FQuestVariableActor Action; // 0x80
	FQuestVariableActor Trigger; // 0x90
};

struct UVoyageCheckpointProposalDesc {
	int32_t TaleIndex; // 0x138
};

struct UVeilService {
	UWorld* World; // 0x80
	AGameState* GameState; // 0x88
	AVeilOfTheAncients* TrackedVeil; // 0x98
	AShip* Ship; // 0xa0
};

struct AShimmerActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UMaximumTrackedActorTypePopulationSpawnRequirement {
	ETrackedOwnerType TrackedActorType; // 0x50
	int32_t MaximumPopulation; // 0x54
};

struct UTaleQuestMultiTargetCompassService {
	UTaleQuestToolServiceDesc* ServiceDesc; // 0x60
	TArray<UItemDesc*> WieldableDescs; // 0x68
};

struct UBlendSpace {
	EBlendSpaceAxis AxisToScaleAnimation; // 0x108
};

struct UAnimationSettings {
	TArray<float> DefaultVisibleDistanceFactorThresholds; // 0x38
	int32_t CompressCommandletVersion; // 0x48
	TArray<FString> KeyEndEffectorsMatchNameArray; // 0x50
	UAnimCompress* DefaultCompressionAlgorithm; // 0x60
	AnimationCompressionFormat RotationCompressionFormat; // 0x68
	AnimationCompressionFormat TranslationCompressionFormat; // 0x69
	float AlternativeCompressionThreshold; // 0x6c
	bool ForceRecompression; // 0x70
	bool bOnlyCheckForMissingSkeletalMeshes; // 0x71
	bool bForceBelowThreshold; // 0x72
	bool bFirstRecompressUsingCurrentOrDefault; // 0x73
	bool bRaiseMaxErrorToExisting; // 0x74
	bool bTryFixedBitwiseCompression; // 0x75
	bool bTryPerTrackBitwiseCompression; // 0x76
	bool bTryLinearKeyRemovalCompression; // 0x77
	bool bTryIntervalKeyRemoval; // 0x78
	bool bStripAnimationDataOnDedicatedServer; // 0x79
};

struct UFFTWaterSettings {
	FStringAssetReference FFTWaterMaterialName; // 0x28
	FStringAssetReference FFTWaterFoamTextureName; // 0x38
	int32_t BaseMeshDetail; // 0x48
};

struct UCompanyRegionComponent {
	FName WorldRegionName; // 0x2b0
	UObject* RegionShanty; // 0x2b8
	float WorldRegionRadius; // 0x2c0
};

struct UShovelItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UTaleQuestGetCrewShipManifestStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UFireStatStepDesc {
	FQuestVariablePlayerStat Stat; // 0x80
};

struct UQuestsConfig {
	TArray<FCanvasLOD> CanvasLODs; // 0x28
	UNamedAIDataAsset* NamedAIDataAsset; // 0x38
	UTreasureMapItemDesc* XMarksTheSpotMapItemInfoDescClass; // 0x40
	float DefaultDigRadius; // 0x48
	float MinDistanceBetweenTreasureLocations; // 0x4c
	float DefaultRiddleDigRadius; // 0x50
	UTreasureMapItemDesc* RiddleMapItemInfoDescClass; // 0x58
	URiddleTextPhrasebookDataAsset* RiddlePhrasebookDataAsset; // 0x60
	URiddleQuestData* RiddleQuestDataAsset; // 0x68
	URiddleQuestDescGeneratorData* RiddleQuestDescGeneratorData; // 0x70
	URiddleQuestValidLocationGeneratorData* RiddleQuestValidLocationGeneratorData; // 0x78
	UTreasureMapItemDesc* BountyMapItemInfoDescClass; // 0x80
	UBountyQuestData* BountyQuestData; // 0x88
	UBountyQuestDescData* BountyQuestDescData; // 0x90
	UMerchantQuestDescData* MerchantQuestDescData; // 0x98
	UMerchantQuestData* MerchantQuestData; // 0xa0
	UTreasureMapItemDesc* MerchantMapItemInfoDescClass; // 0xa8
	UCargoRunQuestData* CargoRunQuestData; // 0xb0
	UTreasureMapItemDesc* CargoRunMapItemInfoDescClass; // 0xb8
	UVoyageProposalAssetSelector* VoyageProposalAssetData; // 0xc0
	UWwiseEvent* VoyageSelectionVoteCompletedSound; // 0xc8
	FBuriedTreasureChestParams BuriedTreasureChestParams; // 0xd0
	TArray<FVoyageProposalOverride> VoyageProposalOverrides; // 0x118
	UVoyageProposalDesc* VoyageProposal; // 0x128
	UVoyageProposalDesc* VoyageProposal2; // 0x130
	UVoyageProposalDesc* VoyageProposal3; // 0x138
	UVoyageProposalDesc* VoyageProposal4; // 0x140
	TArray<UItemDesc*> AllTreasureArtifactsItemInfoDescs; // 0x148
	TArray<UItemDesc*> AllMessageInBottles; // 0x158
	TArray<UItemDesc*> AllSkeletonOrders; // 0x168
	TArray<UItemDesc*> AllCollectorsChests; // 0x178
	TArray<UItemDesc*> AllGoldMounds; // 0x188
	TArray<USeaId*> DefaultSeas; // 0x198
	FStringAssetReference MessageInABottleMapsDiscoveredBackgroundImage; // 0x1a8
	TArray<FStringAssetReference> MessageInABottleMapsDiscoveredImages; // 0x1b8
	FStringAssetReference SkeletonOrderMapsDiscoveredBackgroundImage; // 0x1c8
	TArray<FStringAssetReference> SkeletonOrderMapsDiscoveredImages; // 0x1d8
	FStringAssetReference CoralMessageInABottleMapsDiscoveredBackgroundImage; // 0x1e8
	TArray<FStringAssetReference> CoralMessageInABottleMapsDiscoveredImages; // 0x1f8
	UWwiseEvent* TutorialStepStartSfx; // 0x208
	FRotator TutorialCutsceneSpawnpointRotation; // 0x210
	FVector TutorialCutsceneFirstPersonMeshOffset; // 0x21c
	float TutorialCutsceneCharacterModelReplacedEventTimeout; // 0x228
	float TutorialCutsceneTimeBeforeFadeIn; // 0x22c
	float TutorialCutsceneFadeInDuration; // 0x230
	UItemDesc* FoodToAddToInventoryInEatingTutorial; // 0x238
	float TutorialStartingHealth; // 0x240
	UPopUpMessageDesc* TutorialEatBananaOpenRadial; // 0x248
	UPopUpMessageDesc* TutorialSelectBananaPopupDesc; // 0x250
	UPopUpMessageDesc* TutorialEatBananaPopupDesc; // 0x258
	UPopUpMessageDesc* TutorialCycleWeaponPopupDesc; // 0x260
	UPopUpMessageDesc* TutorialUseMapOpenRadial; // 0x268
	UPopUpMessageDesc* TutorialSelectMap; // 0x270
	UPopUpMessageDesc* TutorialUseMapPopupDesc; // 0x278
	UPopUpMessageDesc* TutorialShowMapPopupDesc; // 0x280
	UItemDesc* MapToAddToInventoryInTutorial; // 0x288
	UPopUpMessageDesc* TutorialBuyVoyagePopupDesc; // 0x290
	UPopUpMessageDesc* TutorialBuyVoyageNextOptionsDesc; // 0x298
	UPopUpMessageDesc* PlaceVoyageOnCaptainTablePopupDesc; // 0x2a0
	UPopUpMessageDesc* ReturnBootyToTraderPopupDesc; // 0x2a8
	UPopUpMessageDesc* TutorialBuyClothesPopupDesc; // 0x2b0
	UPopUpMessageDesc* TutorialEquipItemPopupDesc; // 0x2b8
	UFootstepIDAsset* GoldHoarderToClothesShopFootstepID; // 0x2c0
	UFootstepIDAsset* ClothesShopToVanityChestFootstepID; // 0x2c8
	UPopUpMessageDesc* MermaidTutorialPopupDesc; // 0x2d0
	FRewardId OnTutorialEndedRewardId; // 0x2d8
	FName OnTutorialEndedRewardCompanyName; // 0x2e0
	UItemDesc* ChestInventoryInSellTreasureStep; // 0x2e8
	TArray<FName> IslandNamesWithFemaleStranger; // 0x2f0
	UPopUpMessageDesc* TutorialTalkToStrangerPopupDesc; // 0x300
	UPopUpMessageDesc* TutorialTalkToFemaleStrangerPopupDesc; // 0x308
	UPopUpMessageDesc* TutorialSellTreasurePopupDesc; // 0x310
	UPopUpMessageDesc* TutorialPickUpChestPopupDesc; // 0x318
	UFootstepIDAsset* StrangerToGoldHoarderFootstepID; // 0x320
	UPopUpMessageDesc* ReturnToStrangerPopupDesc; // 0x328
	UPopUpMessageDesc* ReturnToStrangerFemalePopupDesc; // 0x330
	UPopUpMessageDesc* GoItAlonePopupDesc; // 0x338
	UPopUpMessageDesc* BeginTallTalePopupDesc; // 0x340
	UTreasureMapItemDesc* ContestMapItemInfoDescClass; // 0x348
	TArray<UItemDesc*> RomeChests; // 0x350
	TArray<FEmissaryCompanyQuestIcons> EmissaryCompanyIcons; // 0x360
};

struct UTreasureVaultItemSpawnComponent {
	EItemSpawnType ItemSpawnType; // 0x430
	TArray<FVaultTreasureRarity> VaultTreasureRarity; // 0x438
	bool TrackItemsAndDestroy; // 0x448
	bool FinishedSpawning; // 0x449
	FObjectMessagingDispatcher EventDispatcher; // 0x450
};

struct UWieldableFishingRodAnimationInstance {
	float ReelSpeed; // 0x630
	FVector2D RodBend; // 0x634
	UBlendSpace* RodBendAnimation; // 0x640
	UAnimSequence* ReelAnimation; // 0x648
	EFishingState CurrentFishingState; // 0x650
	bool IsFishHookedAndVisible; // 0x651
	EFishingState CurrentFishingJIPState; // 0x652
};

struct AEnchantedSpyglassItemInfo {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UWaterInteractionComponent {
	FVector BoxExtent; // 0x5a8
};

struct UEntitlementsAsset {
	TArray<FStringClassReference> Entitlements; // 0x28
};

struct AShipFlagCustomizationChest {
	AActor* ParentActor; // 0x578
};

struct UAISenseConfig_Damage {
	UAISense_Damage* Implementation; // 0x30
};

struct UDrunkennessComponentPublicData {
	TArray<FDrunkennessSetupData> DrunkennessSetupData; // 0x28
	float VomitingThresholdWhenGettingDrunker; // 0x38
	float VomitingThresholdWhenSobering; // 0x3c
	float MinTimeBetweenVomitSpews; // 0x40
	float MaxTimeBetweenVomitSpews; // 0x44
	float MinVomitSpewDuration; // 0x48
	float MaxVomitSpewDuration; // 0x4c
	float WaterSplashSoberingAmount; // 0x50
	float WaterSplashSoberingRate; // 0x54
	UCurveFloat* DrunkennessRemappingCurveForScreenVfx; // 0x58
	UCurveFloat* DrunkennessRemappingCurveForStaggering; // 0x60
	float CameraRollAmp; // 0x68
	float CameraRollAccel; // 0x6c
	UWwiseObjectPoolWrapper* DrunkennessComponentPool; // 0x70
	UWwiseEvent* StartDrunkennessSfx; // 0x78
	UWwiseEvent* StopDrunkennessSfx; // 0x80
	UWwiseEvent* StartDrunkennessSfxRemotePlayer; // 0x88
	UWwiseEvent* StopDrunkennessSfxRemotePlayer; // 0x90
	FName PlayerDrunkennessAmountRtpc; // 0x98
	FName RemotePlayerDrunkennessAmountRtpc; // 0xa0
	float MinDrunkennessToToggleLocomotionAnimType; // 0xa8
};

struct UEelThrowAIAbility {
	UBlackboardComponent* CachedBlackboardComponent; // 0x78
};

struct UPetListingDataAsset {
	TArray<FPetListingTypeEntry> Entries; // 0x28
};

struct ANavModifierVolume {
	UNavArea* AreaClass; // 0x410
};

struct UBTTask_SwimAttackTargetShip {
	float BiteRadiusOffsetToBeginAttackHeadOn; // 0x88
	float BiteRadiusOffsetToBeginAttackPerpendicular; // 0x8c
	float MaxTimeToStartAttack; // 0x90
	UAnimSequence* AttackAnim; // 0x98
	float AttackAnimLength; // 0xa0
	float TimeToPerformAttack; // 0xa4
	UObject* AttackVFX; // 0xa8
	float AttackVFXZOffset; // 0xb0
	FName LoSTraceProfileName; // 0xb4
	FAIDataProviderFloatValue LosTraceRadius; // 0xc0
	TArray<FSwimAttackTargetShipImpulseData> ImpulseData; // 0xf0
	FAIDataProviderIntValue MinDamageHolesToApply; // 0x100
	FAIDataProviderIntValue MaxDamageHolesToApply; // 0x130
	int32_t LevelsOfHullDamage; // 0x160
	UDamagerType* DamageCauserType; // 0x168
	FAIDataProviderFloatValue PlayerBiteRadius; // 0x170
	FKnockBackInfo KnockbackParams; // 0x1a0
	FAIDataProviderFloatValue PlayerBiteDamage; // 0x1f0
	AShip* TargetShip; // 0x230
};

struct UCargoRunCrateCustomData {
	TArray<FText> CrateNames; // 0x28
	FCargoRunReward DefaultRewards; // 0x38
	TArray<FCompanySpecificCargoRunReward> CompanyRewards; // 0x58
	FName StatsSubString; // 0x68
	TArray<FPlayerStat> DefaultStatsToFireUponPerfectOnTimeHandIn; // 0x70
	TArray<FCompanySpecificCargoRunStats> CompanyOverrideStatsToFireUponPerfectOnTimeHandIn; // 0x80
};

struct UTaleQuestNotificationUsingVariableStep {
	UTaleQuestNotificationUsingVariableStepDesc* Desc; // 0x90
};

struct UVfxSelectorDataAsset {
	FVfxSelectorEntry MinDefaultEffectParams; // 0x28
	TArray<FVfxSelectorRange> Ranges; // 0x50
	FVfxSelectorEntry MaxDefaultEffectParams; // 0x60
};

struct ULoadableFireworkComponent {
	bool ShouldProjectileTrailDoReflections; // 0x128
	bool ShouldUseGlobalOverrideFuseTimer; // 0x129
	bool ShouldUseGlobalOverrideFuseSfx; // 0x12a
	bool ShouldUseGlobalOverrideFuseVfx; // 0x12b
	bool ShouldUseGlobalOverrideFuseMesh; // 0x12c
	UFireworksSettingsDataAsset* FireworksSettingsDataAsset; // 0x130
};

struct UVulnerabilityLayerStateManagerComponent {
	TArray<FManagedVulnerabilityLayer> ManagedVulnerabilityLayers; // 0xf8
};

struct AFishingFloat {
	UWaterInteractionComponent* WaterInteractionComponent; // 0x3e8
	UBoxComponent* CollisionComponent; // 0x3f0
	UFishingFloatSetupDataAsset* FishingFloatSetupDataAsset; // 0x3f8
	UStaticMeshComponent* FishingFloatMesh; // 0x400
	TArray<UMaterialInstanceDynamic*> FloatMaterials; // 0x408
};

struct UCustomAnimationMontageDefinitionDataAsset {
	FName MontageId; // 0x28
	ECustomAnimationMontageType MontageType; // 0x30
	UAnimMontage* MontageData; // 0x38
	FCustomAnimationMontageStagedLoopingData LoopingData; // 0x40
	bool Interrupts; // 0x68
};

struct UClearSpawnProgressStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UEquipmentChestViewModelComponent {
	TArray<UItemCategory*> Categories; // 0x180
	bool IncludeAllCategory; // 0x190
};

struct UChildActorComponent {
	AActor* ChildActorClass; // 0x2b0
	AActor* ChildActor; // 0x2b8
};

struct UStatusResponseSetBlackboardBoolKey {
	FName BlackboardBoolKeyName; // 0x30
	bool bValueWhenActive; // 0x38
	bool ShouldClearKeyOnEnd; // 0x39
};

struct UTaleQuestImportStepDesc {
	UTaleQuestDescAsset* Asset; // 0x80
	FQuestVarTaleQuest QuestInput; // 0x88
	TMap<FName, FName> DefinitionPropertyDataLinks; // 0x98
};

struct UBTTask_PlayMontage {
	UObject* MontageToPlay; // 0x60
	bool PlayAsDynamicMontage; // 0x68
};

struct UParticleModuleBeamTarget {
	Beam2SourceTargetMethod TargetMethod; // 0x50
	FName TargetName; // 0x54
	FRawDistributionVector Target; // 0x60
	char bTargetAbsolute : 1; // 0x98
	char bLockTarget : 1; // 0x98
	Beam2SourceTargetTangentMethod TargetTangentMethod; // 0x9c
	FRawDistributionVector TargetTangent; // 0xa0
	char bLockTargetTangent : 1; // 0xd8
	FRawDistributionFloat TargetStrength; // 0xe0
	char bLockTargetStength : 1; // 0x118
	float LockRadius; // 0x11c
};

struct ASpawnProgressTriggerVolume {
	bool ClearProgress; // 0x420
	bool StartDisabled; // 0x470
	TArray<AProgressSpawnLocation*> LinkedSpawnLocation; // 0x478
	int32_t ProgressLevel; // 0x488
};

struct ABountyRewardItemProxy {
	UWwiseObjectPoolWrapper* AmbiencePool; // 0x7b8
	UWwiseEvent* AmbiencePlay; // 0x7c0
	UWwiseEvent* AmbienceStop; // 0x7c8
	FWwiseEmitter AmbienceEmitter; // 0x7d0
};

struct UMaterialExpressionMax {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	float ConstA; // 0xe0
	float ConstB; // 0xe4
};

struct USeatComponentBase {
	FText InteractionVerb; // 0x158
	FText InteractionDisplayName; // 0x190
	UNotificationInputId* InteractionInput; // 0x1c8
	bool HoldToInteract; // 0x1d0
	UNotificationInputId* HoldInteractionInput; // 0x1d8
	float HoldDuration; // 0x1e0
	float IdleDisconnectThreshold; // 0x1e4
	UPhrasesRadialDataAsset* RadialPhrases; // 0x1e8
	bool CustomInteractionPoint; // 0x1f0
	FVector CustomInteractionPointLocation; // 0x1f4
	TArray<USeatStat*> ConditionalSeatStats; // 0x200
	bool CanBeUnderwater; // 0x210
	TWeakObjectPtr<AActor> ControllingActor; // 0x234
};

struct UBlueprintSpawnAIStepBase {
	ETaleQuestStepBeginMode BeginMode; // 0x28
	UTaleQuestBlueprintStepDesc* Desc; // 0x30
};

struct UStatusResponseAddManagedVulnerabilityLayer {
	FName VulnerabilityName; // 0x30
	UDamageableVulnerabilityLayer* VulnerabilityToApply; // 0x38
	bool CancelVulnerabilityOnDeactivate; // 0x40
	float VulnerabilityDuration; // 0x44
};

struct UPhasedActorComponent {
	UClass* ActorClass; // 0xd0
	AActor* SpawnedMapActor; // 0xf0
	APhasedClusterRoot* ClusterRoot; // 0xf8
};

struct URowboatAudioComponentParams {
	UWwiseObjectPoolWrapper* RowboatObjectPool; // 0x28
	UWwiseEvent* RowboatWakeStart; // 0x30
	UWwiseEvent* RowboatWakeStop; // 0x38
	FName RowboatSpeedRtpcName; // 0x40
	float RowboatMaxSpeedRtpc; // 0x48
	UWwiseEvent* RowboatLaunch; // 0x50
	UWwiseEvent* RowboatImpactAndScrapeStart; // 0x58
	UWwiseEvent* RowboatImpactAndScrapeStop; // 0x60
	UWwiseEvent* RowboatStrainStart; // 0x68
	UWwiseEvent* RowboatStrainStop; // 0x70
	FName RowboatStrainRtpcName; // 0x78
	float RowboatMaxStrainRtpc; // 0x80
	UWwiseEvent* RowboatTakenDamage; // 0x88
	float DamageAmountRequiredForNoiseToPlay; // 0x90
	UWwiseEvent* RowboatAttach; // 0x98
	UWwiseEvent* RowboatDetach; // 0xa0
	UWwiseObjectPoolWrapper* WwiseOarEmitterPool; // 0xa8
	UWwiseEvent* PlayOarInOarLayer; // 0xb0
	UWwiseEvent* PlayOarInWaterLayer; // 0xb8
	UWwiseEvent* PlayOarOutOarLayer; // 0xc0
	UWwiseEvent* PlayOarOutWaterLayer; // 0xc8
	UWwiseEvent* PlayOarBrakingLoop; // 0xd0
	UWwiseEvent* StopOarBrakingLoop; // 0xd8
	UWwiseEvent* PlayOarPullFinished; // 0xe0
};

struct USplineMeshComponent {
	FSplineMeshParams SplineParams; // 0x5f8
	FVector SplineUpDir; // 0x650
	char bAllowSplineEditingPerInstance : 1; // 0x65c
	char bSmoothInterpRollScale : 1; // 0x65c
	ESplineMeshAxis ForwardAxis; // 0x660
	float SplineBoundaryMin; // 0x664
	float SplineBoundaryMax; // 0x668
	UBodySetup* BodySetup; // 0x670
	FGuid CachedMeshBodySetupGuid; // 0x678
	char bMeshDirty : 1; // 0x688
};

struct UThrowableCannonballItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UParticleModuleMurkyColor {
	FLinearColor ColorScale; // 0x50
};

struct UCompanyTutorialVoyageProgress {
	UVoyageProposalDesc* AssignedVoyageProposalDescClass; // 0x28
	UTaleRankDesc* AssignedTaleRankDescClass; // 0x30
};

struct UAnimSequencerInstance {
	USkeleton* CurrentSkeleton; // 0x28
	TArray<FAnimTickRecord> UngroupedActivePlayers; // 0x30
	TArray<FAnimGroupInstance> SyncGroups; // 0x40
	TArray<FActiveVertexAnim> VertexAnims; // 0x50
	ERootMotionMode RootMotionMode; // 0x60
	bool bWarnAboutBlueprintUsage; // 0x61
	FScriptMulticastDelegate OnMontageBlendingOut; // 0x68
	FScriptMulticastDelegate OnMontageStarted; // 0x78
	FScriptMulticastDelegate OnMontageEnded; // 0x88
	FScriptMulticastDelegate OnStateEntered; // 0x98
	FScriptMulticastDelegate OnStateExited; // 0xa8
	FScriptMulticastDelegate OnStateInitialised; // 0xb8
	FScriptMulticastDelegate OnAnimUpdated; // 0xc8
	bool bQueueMontageEvents; // 0x148
	TArray<FAnimNotifyEvent> ActiveAnimNotifyState; // 0x240
	int16_t SlotNodeInitializationCounter; // 0x350
	int16_t GraphTraversalCounter; // 0x352
	bool bBoneCachesInvalidated; // 0x3a8
	char bBlueprintAnimUpdateEnabled : 1; // 0x438
};

struct UIslandEventTooltipComponent {
	TArray<FIslandEventTooltipData> CachedTooltipData; // 0xd8
	FVector2D TooltipOffsetRatio; // 0xe8
	float FadeDuration; // 0xf0
	FText ShowTooltipText; // 0xf8
	FText HideTooltipText; // 0x130
};

struct UNPCDialogOptionFireNPCDialogInteraction {
	FText Text; // 0x80
	bool CloseOnExecuted; // 0xb8
};

struct UAnimNotify_StateComplete {
	UAnimationStateId* CompletedStateId; // 0x38
};

struct UNPCOnSurfaceResponseMetadata {
	float Delay; // 0x28
	float Cooldown; // 0x2c
};

struct UMaterialExpressionCausticTexture {
	FExpressionInput Coordinates; // 0x70
};

struct UNPCDialogOptionFireEvent {
	FText Text; // 0x80
	FName EventName; // 0xb8
	bool CloseOnExecuted; // 0xc0
	int32_t LinkedDialog; // 0xc4
	bool RelevantOnServer; // 0xc8
};

struct UBTDecorator_BlueprintBase {
	AAIController* AIOwner; // 0x68
	AActor* ActorOwner; // 0x70
	TArray<FName> ObservedKeyNames; // 0x78
	char bShowPropertyDetails : 1; // 0x98
	char bCheckConditionOnlyBlackBoardChanges : 1; // 0x98
	char bIsObservingBB : 1; // 0x98
};

struct UCrewOwnershipTrackingComponent {
	FGuid SpawningCrewId; // 0xe0
	FGuid CurrentOwnedByCrewId; // 0xf0
	FOwnerListEntry PreviousOwnedByCrewIdList; // 0x100
	TMap<FName, FOwnerListEntry> CustomTrackingMap; // 0x110
};

struct ULevelSequenceBurnIn {
	FLevelSequencePlayerSnapshot FrameInformation; // 0x230
	ALevelSequenceActor* LevelSequenceActor; // 0x2c0
};

struct UParticleModuleAttractorParticle {
	FName EmitterName; // 0x50
	FRawDistributionFloat Range; // 0x58
	char bStrengthByDistance : 1; // 0x90
	FRawDistributionFloat Strength; // 0x98
	char bAffectBaseVelocity : 1; // 0xd0
	EAttractorParticleSelectionMethod SelectionMethod; // 0xd4
	char bRenewSource : 1; // 0xd8
	char bInheritSourceVel : 1; // 0xd8
	int32_t LastSelIndex; // 0xdc
};

struct UGeyserSetupDataAsset {
	FWeightedProbabilityRangeOfRanges DormantDuration; // 0x28
	FWeightedProbabilityRangeOfRanges InitialWarningDuration; // 0x58
	FWeightedProbabilityRange NumSpurtsPerActivation; // 0x88
	FWeightedProbabilityRangeOfRanges TimeBetweenSpurts; // 0xa8
	bool ShouldDestroyOnDeactivation; // 0xd8
	float DestroyAfterDeactivationDelay; // 0xdc
};

struct UAISenseEvent_Damage {
	FAIDamageEvent Event; // 0x28
};

struct ACoveredMeshActor {
	UInstancedCoverageMeshComponent* InstancedCoverageMeshComponent; // 0x3e0
};

struct UCaptainsClubhouseSettings {
	FStringAssetReference CaptainsClubhouseSettingsDataAsset; // 0x38
};

struct UBTTask_SwimTo {
	bool WantsToReportPathFailure; // 0x88
	FBlackboardKeySelector PathFailureCounter; // 0x90
	float AcceptableRadius; // 0xb8
	ESwimmingGoalCheckMode GoalCheckMode; // 0xbc
	ESwimmingArcMode ArcMode; // 0xbd
	EArcToTargetDirection ArcToTargetDirection; // 0xbe
	ETaskReaction Swim3DCrestingReaction; // 0xbf
	FSpatialOffset OffsetFromTargetActor; // 0xc0
	ESwimmingSyncMode SwimSyncMode; // 0xc8
	bool TrackTargetActor; // 0xc9
	FBlackboardKeySelector TrackedTargetActorKey; // 0xd0
	float TimeToSlowDownAndStop; // 0xf8
	ESwimmingLineOfSightTest LineOfSightTestMode; // 0xfc
};

struct UAISkillsetItemSpawnRequirement {
	TArray<UAthenaAIControllerParamsDataAsset*> DisallowedSkillsets; // 0x50
};

struct UStrongholdKeyData {
	TArray<FStrongholdKeyInfo> StrongholdKeys; // 0x28
};

struct UMapSettings {
	FStringAssetReference PrebakedIslandData; // 0x38
};

struct UWieldableMysteriousNoteDataAsset {
	UItemDesc* WieldableNoteDesc; // 0x28
	UWieldableMysteriousNoteLayout* NoteLayout; // 0x30
};

struct UBlueprintGeneratedClass {
	int32_t NumReplicatedProperties; // 0x1c0
	TArray<UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x1c8
	TArray<UActorComponent*> ComponentTemplates; // 0x1d8
	TArray<UTimelineTemplate*> Timelines; // 0x1e8
	USimpleConstructionScript* SimpleConstructionScript; // 0x1f8
	UInheritableComponentHandler* InheritableComponentHandler; // 0x200
	UStructProperty* UberGraphFramePointerProperty; // 0x208
	UFunction* UberGraphFunction; // 0x210
	TArray<FEventGraphFastCallPair> FastCallPairs; // 0x218
};

struct UMovieScene3DAttachSection {
	FName AttachSocketName; // 0xa8
	FName AttachComponentName; // 0xb0
	char bConstrainTx : 1; // 0xb8
	char bConstrainTy : 1; // 0xb8
	char bConstrainTz : 1; // 0xb8
	char bConstrainRx : 1; // 0xb8
	char bConstrainRy : 1; // 0xb8
	char bConstrainRz : 1; // 0xb8
};

struct UMockTelemetryDescriptorComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UShipwreckSiteGeneratorComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UHorizontalBox {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct UDevelopmentAuthenticationSettings {
	FString SandboxId; // 0x28
	FString TokenServiceUrl; // 0x38
	FString ClientId; // 0x48
	FString ClientSecret; // 0x58
	FString LivePrivileges; // 0x68
};

struct AHUD {
	FColor WhiteColor; // 0x3d0
	FColor GreenColor; // 0x3d4
	FColor RedColor; // 0x3d8
	APlayerController* PlayerOwner; // 0x3e0
	char bLostFocusPaused : 1; // 0x3e8
	char bShowHUD : 1; // 0x3e8
	char bShowDebugInfo : 1; // 0x3e8
	char bShowHitBoxDebugInfo : 1; // 0x3e8
	char bShowOverlays : 1; // 0x3e8
	char bEnableDebugTextShadow : 1; // 0x3e8
	TArray<AActor*> PostRenderedActors; // 0x3f0
	float LastHUDRenderTime; // 0x400
	float RenderDelta; // 0x404
	TArray<FName> DebugDisplay; // 0x408
	TArray<FName> ToggledDebugCategories; // 0x418
	UCanvas* Canvas; // 0x428
	UCanvas* DebugCanvas; // 0x430
	TArray<FDebugTextInfo> DebugTextList; // 0x438
	AActor* ShowDebugTargetDesiredClass; // 0x448
	AActor* ShowDebugTargetActor; // 0x450
};

struct UMeleeAttackLockOnComponent {
	UMeleeAttackLockOnComponentSettings* ComponentSettings; // 0xc8
	ULockOnCameraModifier* LockOnCameraModifier; // 0x238
	TWeakObjectPtr<AAthenaCharacter> TargetCharacter; // 0x240
	TArray<TWeakObjectPtr<AAthenaCharacter>> PotentialTargets; // 0x248
};

struct AShantyZone {
	UOverlapTriggerComponent* AudioZone; // 0x3d0
	AMusicalInstrument* BaseInstrument; // 0x3d8
	UPrimitiveComponent* Root; // 0x3f0
	TArray<AActor*> PlayersInZone; // 0x3f8
	AMusicalInstrument* Instrument; // 0x408
};

struct UNPCDialogHeaderStorageContainer {
	FText Text; // 0x28
};

struct UPlayerRelevancyService {
	TArray<FPlayerRelevancyRequest> PendingRequests; // 0x38
};

struct UMaterialExpressionPredicatedTextureSample {
	FExpressionInput Predicate; // 0x1a8
	FColor DefaultColour; // 0x1e0
};

struct UParticleModuleCameraBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UAnimNotifyState_WwiseSound {
	UWwiseEvent* WwiseEvent; // 0x28
	UWwiseEvent* WwiseEventEnd; // 0x30
};

struct ASpireService {
	USpireServiceParams* Params; // 0x3d8
	TArray<FServerSpireInfo> ServerOnlySpireInfo; // 0x3e0
	TArray<FSpireInfo> SpireLevels; // 0x3f0
};

struct UMaterialExpressionTextureSample {
	FExpressionInput Coordinates; // 0x80
	FExpressionInput TextureObject; // 0xb8
	FExpressionInput MipValue; // 0xf0
	FExpressionInput CoordinatesDX; // 0x128
	FExpressionInput CoordinatesDY; // 0x160
	ETextureMipValueMode MipValueMode; // 0x198
	ESamplerSourceMode SamplerSource; // 0x199
	uint32_t ConstCoordinate; // 0x19c
	int32_t ConstMipValue; // 0x1a0
};

struct UStatusResponseDrunkCurse {
	float DrunkennessStrength; // 0x30
};

struct UDebugStatusEffectOverlapZoneVisualizerComponent {
	FVector BoxCollisionDimensions; // 0xd0
	FColor DebugColour; // 0xdc
	bool VisibleState; // 0xe0
};

struct UBoneMaskFilter {
	TArray<FInputBlendPose> BlendPoses; // 0x28
};

struct UTargetedStatCondition {
	UStatConditionTargetSelector* TargetSelector; // 0x28
};

struct USetMechanismActionStateStep {
	USetMechanismActionStateStepDesc* Desc; // 0xd8
	EMechanismTriggerState TriggerState; // 0xe0
	EMechanismTriggerType TriggerType; // 0xe1
};

struct UBTTask_PawnActionBase {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct AStorm {
	float PercentageOfStormWhereLightningCanStrike; // 0x3f0
	FStormScalingParameters ScalingParams; // 0x3f8
	UExplosionComponent* ExplosionComponent; // 0x4c8
	UWindZoneComponent* WindZoneComponent; // 0x4d0
	URainZoneComponent* RainZoneComponent; // 0x4d8
	ULightningComponent* LightningComponent; // 0x4e0
	ULightningManagerComponent* LightningManagerComponent; // 0x4e8
	UAtmosphericPressureZoneComponent* PressureZoneComponent; // 0x4f0
	UCalmWaterComponent* AngryWaterZoneComponent; // 0x4f8
	FString SubjectName; // 0x500
	float StormScale; // 0x510
	float Radius; // 0x514
	float ServerMigrationRadiusMultiplier; // 0x518
	UStaticMeshComponent* BaseCloudMeshComponent; // 0x520
	UStaticMeshComponent* RainSheetOuterMeshComponent; // 0x528
	UStaticMeshComponent* RainSheetInnerMeshComponent; // 0x530
	UStaticMeshComponent* RingCloudMeshComponent; // 0x538
	UStaticMeshComponent* TopCloudMeshComponent; // 0x540
	FEncounterParams EncounterParams; // 0x548
	UStormParams* Params; // 0x560
	TArray<FStormAvoidanceArea> AvoidAreaList; // 0x568
	FVector2D CustomCentre; // 0x58c
	float CustomStrength; // 0x594
	bool UsingCustomSettings; // 0x598
};

struct AInteractableBase {
	bool RequiresFacingFront; // 0x3e0
	bool RequiresNotBeingAirborne; // 0x3e1
	bool RequiresNotSwimming; // 0x3e2
	bool InteractionsCanBeDisabled; // 0x3e3
	bool CanSetInteractionState; // 0x3e4
	UActionRulesComponent* ActionRulesComponent; // 0x3e8
	EInteractableIdentifier InteractableIdentifier; // 0x3f0
	EInteractableState CurrentInteractionState; // 0x3f2
};

struct UGlitterBeardEntitlementDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct UEditableTextBoxWidgetStyle {
	FEditableTextBoxStyle EditableTextBoxStyle; // 0x30
};

struct UBTDecorator_Blackboard {
	int32_t IntValue; // 0x90
	float FloatValue; // 0x94
	FString StringValue; // 0x98
	FString CachedDescription; // 0xa8
	char OperationType; // 0xb8
	EBTBlackboardRestart NotifyObserver; // 0xb9
};

struct UStopEmissaryVoyageInlineVoteValidator {
	UCompany* TargetCompany; // 0x30
	UEntitlementDesc* RequiredEntitlement; // 0x38
	UEmissaryVoyageInlineVoteConsumerBase* Consumer; // 0xa0
};

struct UAIDioramaLocationSourceComponent {
	TArray<FAIDioramaLocationSourceComponentData> DioramaRelativeLocations; // 0x2c0
	float DialogueTriggerRadius; // 0x2d0
	float DialogueSubtitleBuffer; // 0x2d4
	float AISenseRadiusForDebugDisplay; // 0x2d8
	TArray<UAIDioramaCategory*> Categories; // 0x2e0
	FColor DebugTriggerRadiusColor; // 0x2f0
	FColor DebugSubtitleRadiusColor; // 0x2f4
	FColor AISenseRadiusColor; // 0x2f8
	USphereComponent* DialogueTriggerRadiusSphere; // 0x300
	USphereComponent* DialogueSubtitleRadiusSphere; // 0x308
	USphereComponent* AISenseRadiusSphere; // 0x310
};

struct ABarrelsOfPlentyDebugSpawnLocation {
	TArray<FBarrelsOfPlentyDebugLocationEntry> Objects; // 0x3d0
	FVector SpawnCentre; // 0x3e0
	float Radius; // 0x3ec
};

struct UGameplayEffectUIData_TextOnly {
	FText Description; // 0x28
};

struct UParticleModuleVelocityOverLifetime {
	FRawDistributionVector VelOverLife; // 0x58
	char Absolute : 1; // 0x90
};

struct ATinySharkService {
	UTinySharkServiceParamsDataAsset* TinySharkServiceParams; // 0x3e0
	TArray<ATinySharkExperience*> TinySharkExperiences; // 0x558
};

struct UBTService_EnableFaceFocusActor {
	bool DisableUpdateMoveFocusForCurrentPathOnExit; // 0x98
	FConditionalBasedOnBlackboardKey Conditional; // 0xa0
};

struct UBTDecorator_ItemReadyToUse {
	UNotificationInputId* NotificationId; // 0x68
};

struct UBTTask_TeleportTo {
	bool UseNavMesh; // 0x88
};

struct UNoiseMakerControllerParams {
	float LookupRadiusAroundListener; // 0x28
	int32_t MaxAmountOfRemoteNoiseMakers; // 0x2c
	TArray<UWwiseObjectPoolWrapper*> WwiseFoliagePoolWrappers; // 0x30
};

struct ACarvedWoodenPlank {
	UInventoryItemComponent* InventoryItem; // 0x790
	UUsableWieldableComponent* UsableWieldableComponent; // 0x798
	float FOVBlendSpeed; // 0x7a0
	float TargetFOV; // 0x7a4
	FItemUseSpeedParams AimSpeedParams; // 0x7a8
};

struct UHealthRegenerationPoolComponent {
	float MaxCapacity; // 0xd0
	float HealingRate; // 0xd4
	float HealingDelayWhenDamaged; // 0xd8
	double UIUpdateThrottleMs; // 0xe0
	FHealthRegenState RegenerationState; // 0xe8
};

struct UAthenaAIControllerParamsDataProvider {
	FName ParamName; // 0x28
	float FloatValue; // 0x30
	int32_t IntValue; // 0x34
	bool BoolValue; // 0x38
};

struct USetEQSNamedContextStepDesc {
	FName Name; // 0x80
	FQuestVariableLinkEQSContext Value; // 0x88
};

struct UTaleReleaseSpireStepDesc {
	FQuestVariableTaleResourceHandle SpireHandle; // 0x80
};

struct UDeliverableRedirectionLiteralDestinationDescriptor {
	FText Destination; // 0x28
};

struct UDebugSkipToStep {
	UDebugSkipToStepDesc* Desc; // 0x90
	UTaleQuestStep* NextStep; // 0x98
};

struct AGarbageGenerator {
	int32_t GarbageGenerationRatePerFrame; // 0x3d0
	int32_t SizeOfPersistentSet; // 0x3d4
	TArray<UObject*> StronglyReferencedObjects; // 0x3d8
};

struct USimpleConstructionScript {
	TArray<USCS_Node*> RootNodes; // 0x28
	USCS_Node* DefaultSceneRootNode; // 0x38
};

struct UIsRunningReapersFlagStatCondition {
	bool ShouldFlagBeRaised; // 0x30
};

struct AServerMigrationSerialisationDetailsTestsMigrationCustomSerialiseReplicatingActor {
	FServerMigrationCustomMigrationSerialisationStruct TestStruct; // 0x3d0
};

struct UFindNamedPointAsTransformStepDesc {
	FQuestVariableTransform OutputTransform; // 0xd0
};

struct URelinquishIslandSalvageSpawnLocationOnDestructionComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UShipCustomizationDesc {
	FStringAssetReference CustomizationInfo; // 0xd8
	FString PreviousItem; // 0xe8
	FString NextItem; // 0xf8
};

struct UResolveActorStringReferenceStepDesc {
	FQuestVariableActor ActorVariable; // 0x80
	FStringAssetReference ActorReference; // 0x90
};

struct UProjectileAnimationComponent {
	TArray<FWeightedProjectileMeshAnimationData> ProjectileAnimationCurves; // 0xc8
	UStaticMeshComponent* MeshComponent; // 0xd8
	FRuntimeVectorCurve AnimationOffsetCurve; // 0xe0
};

struct UWorldEndAIAbilityParams {
	float AbilityDuration; // 0xc8
	FAshenLordFireShroudParams FireShroudParams; // 0xd0
	UGeyserManagerSetupDataAsset* GeyserManagerSetup; // 0xe8
	float GeyserStartDelay; // 0xf0
	AAshenLordVolcano* VolcanicEmitterClass; // 0xf8
	bool UseSuperHeatedWater; // 0x100
	ASuperheatedWater* SuperHeatedWaterClass; // 0x108
	UClass* CloudActor; // 0x110
	FVector CloudOffset; // 0x130
	float CloudSpawnDelay; // 0x13c
	float CloudDespawnPreWarm; // 0x140
	float VolcanicRockStartDelay; // 0x144
};

struct ASwitchMechanismTriggerProxy {
	bool SyncToConnectedActionStateOnChange; // 0x3f0
	bool DisableWhenActivated; // 0x3f1
	bool AutoDeactivateAfterActivation; // 0x3f2
	float TimeAfterActivationBeforeAutoDeactivating; // 0x3f4
	bool SelectRandomStartPositionOnSpawn; // 0x3f8
	ESwitchMechanismTriggerRandomSelectionMode RandomStartPositionSelectionMode; // 0x3f9
	int32_t FixedStartPositionIndex; // 0x3fc
	UCurveFloat* PositionTransitionCurve; // 0x400
	TArray<FSwitchMechanismTriggerPosition> Positions; // 0x408
	UMechanismMaterialGroup* MaterialGroup; // 0x418
};

struct UMaterialExpressionStaticSwitchParameter {
	FExpressionInput A; // 0x98
	FExpressionInput B; // 0xd0
};

struct UAIShipItemSpawnComponent {
	bool SpawnAlways; // 0x428
	bool SpawnForBattleFinalShip; // 0x429
	bool SpawnForPassiveShip; // 0x42a
	bool SpawnForAggressiveShip; // 0x42b
};

struct UShantyItemDescToSlotRemappingDataAsset {
	TArray<UShantyItemDesc*> Slots; // 0x28
};

struct UEncounterService {
	TArray<FEncounter> Encounters; // 0x38
	FEncounterListenerData EncounterListenerData; // 0x48
	FEncounterServiceParams EncounterParams; // 0x88
};

struct URetrieveBootyHandInComponent {
	UNotificationInputId* NotificationStartInputID; // 0x118
	UNotificationInputId* NotificationReleaseInputID; // 0x120
	EActionDisplayPriority DisplayPriority; // 0x128
	FVector RetrieveTargetPoint; // 0x12c
	UBootyStorageSettings* BootyStorageSettings; // 0x148
	UWwiseEvent* OnRetrievedSFX; // 0x168
	UActionRulesComponent* OwnerActionRulesComponent; // 0x170
	UEnvQuery* SpawnBootyEQSQuery; // 0x178
	bool ShouldTellStoredBootyCounterOnTooltip; // 0x180
};

struct ULandmarkReactionEventStartCameraShake {
	UCameraShake* CameraShake; // 0x38
	float ShakeInnerRadius; // 0x40
	float ShakeOuterRadius; // 0x44
	UWwiseEvent* AudioCue; // 0x48
};

struct APortalLocatorActor {
	USceneComponent* Root; // 0x3d0
	UContendedResourceComponent* ContendedResourceComponent; // 0x3d8
	ATunnelOfTheDamnedPortal* ActivePortalClass; // 0x3e0
	TArray<ATunnelOfTheDamnedPortalShipSpawnLocation*> AssociatedSpawnLocations; // 0x3e8
};

struct UTaleQuestAddCircleMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AWieldableOtherMockActor {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UMeshMemoryConstraintScoringMemoryUsed {
	FName ScoringName; // 0x28
	float ScoringFactor; // 0x30
};

struct UCrateFillerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UStrongholdKeyItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UVerticalBoxSlot {
	FMargin Padding; // 0x38
	FSlateChildSize Size; // 0x48
	EHorizontalAlignment HorizontalAlignment; // 0x50
	EVerticalAlignment VerticalAlignment; // 0x51
};

struct UTaleQuestIsClueOfTypeStepDesc {
	UClueSiteType* ClueSiteTypeToMatch; // 0x80
	FQuestVariableClueSite ClueSite; // 0x88
	FQuestVariableBool IsMatchingType; // 0x98
};

struct ASignalMechanism {
	USceneComponent* Root; // 0x3d0
	UArrowComponent* Arrow; // 0x3d8
	float SignalSpreadDegrees; // 0x3e0
	float FocusDurationBeforeSignalling; // 0x3e4
	bool RequiresOcclusionValidation; // 0x3e8
	TArray<AActor*> Targets; // 0x3f0
};

struct UCharacterInteractionComponent {
	UInteractableArea* CurrentOptimalInteractable; // 0x5c0
};

struct UMaterialExpressionParticleMotionBlurFade {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UAthenaAnimationEmoteGroupingAsset {
	TArray<FAthenaAnimationEmoteAnimations> EmoteAnimationData; // 0x28
};

struct UPlayerCrewComponent {
	TScriptInterface<Class> OnCrewSessionChangedEventDispatcher; // 0xe0
	FObjectMessagingHandle OnCrewSessionChangedEventHandle; // 0xf0
	TArray<FCrewMemberData> CrewMembers; // 0x178
	FCrewShipData CrewShip; // 0x188
	FCrewMatchmakingVisibilityData CrewMatchmakingVisibility; // 0x18b
	FCrewArenaRivalVotingData CrewRivalVotingData; // 0x18e
	TScriptInterface<Class> SpawnProgress; // 0x190
	bool HasValidSpawnProgress; // 0x1a0
	TScriptInterface<Class> TaleProgress; // 0x1a8
	int32_t TaleProgressLevel; // 0x1b8
	bool IsCaptainedSession; // 0x1bc
	bool IsCaptain; // 0x1bd
};

struct UBTComposite_SimpleParallel {
	EBTParallelMode FinishMode; // 0x88
};

struct UTaleQuestSpawnWashedUpSkeletonClueStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleQuestPlankService {
	UTaleQuestToolServiceDesc* ServiceDesc; // 0x60
	TArray<UItemDesc*> WieldableDescs; // 0x68
};

struct UAIShipContextDescDataAsset {
	EAIShipType ShipType; // 0x28
	EAIShipEncounterType EncounterType; // 0x29
	UShipDescAsset* ShipDesc; // 0x30
	UAthenaAIShipControllerParamsDataAsset* ControllerParams; // 0x38
	TArray<FAIShipEncounterParamsSpawnerData> Spawners; // 0x40
	FAIShipContextDescDamageParams DamageParams; // 0x50
	FAIShipSailData SailsCustomisation; // 0x64
	FColor SailColour; // 0x74
	FAIShipCrewFormType FormType; // 0x78
	FAIShipCrewAmmoType AmmoType; // 0x98
	UShortRangeMarkerDataAsset* RewardMarkerParams; // 0xb0
};

struct AHull {
	UBaseHullDragDynamicsDesc* HullDragDynamicsDesc; // 0x3d8
};

struct UBTTask_RequestDespawn {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct USpawnPhasedItemStepDesc {
	bool TrackItem; // 0x80
	bool MarkItemAsCritical; // 0x81
	FText CriticalActorLostMessage; // 0x88
	FName SocketName; // 0xc0
	FQuestVariableItemDescType Item; // 0xc8
	FQuestVariableActor LocatorVar; // 0xd8
	FQuestVariableItemInfo SpawnedItemVar; // 0xe8
};

struct UPetsAnimationData {
	FPetAnimationDataStructure PetAnimations; // 0x28
	FFloatRange LookAtPitchRange; // 0x240
	float LookAtClamp; // 0x250
	float LookAtTimeToComplete; // 0x254
	float TransitionFromTurningMovementSpeed; // 0x258
	FFloatRange PositiveMoodAnimationRange; // 0x25c
	float PositiveMoodBlendTime; // 0x26c
};

struct UAnimInstance {
	USkeleton* CurrentSkeleton; // 0x28
	TArray<FAnimTickRecord> UngroupedActivePlayers; // 0x30
	TArray<FAnimGroupInstance> SyncGroups; // 0x40
	TArray<FActiveVertexAnim> VertexAnims; // 0x50
	ERootMotionMode RootMotionMode; // 0x60
	bool bWarnAboutBlueprintUsage; // 0x61
	FScriptMulticastDelegate OnMontageBlendingOut; // 0x68
	FScriptMulticastDelegate OnMontageStarted; // 0x78
	FScriptMulticastDelegate OnMontageEnded; // 0x88
	FScriptMulticastDelegate OnStateEntered; // 0x98
	FScriptMulticastDelegate OnStateExited; // 0xa8
	FScriptMulticastDelegate OnStateInitialised; // 0xb8
	FScriptMulticastDelegate OnAnimUpdated; // 0xc8
	bool bQueueMontageEvents; // 0x148
	TArray<FAnimNotifyEvent> ActiveAnimNotifyState; // 0x240
	int16_t SlotNodeInitializationCounter; // 0x350
	int16_t GraphTraversalCounter; // 0x352
	bool bBoneCachesInvalidated; // 0x3a8
	char bBlueprintAnimUpdateEnabled : 1; // 0x438
};

struct UBoxedRpcDispatcherComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UIslandMechanismSelectionComponent {
	TArray<AMechanismGroup*> MechanismGroups; // 0xc8
	TArray<FFeatureToggledMechanismGroups> FeatureToggledMechanismGroups; // 0xd8
	float CoolDownDuration; // 0xe8
	bool EnableRandomSelection; // 0xec
	FWeightedProbabilityRangeOfRanges MechanismGroupsToSelect; // 0xf0
	TArray<AMechanismGroup*> SelectedMechanismGroups; // 0x120
};

struct UBTDecorator_SetTagCooldown {
	FGameplayTag CooldownTag; // 0x68
	float CoolDownDuration; // 0x70
	bool bAddToExistingDuration; // 0x74
};

struct AItemInteractionProxy {
	UItemDesc* AcquiredItemDesc; // 0x628
	bool HidePromptIfInventoryIsFull; // 0x630
};

struct UConditionalNPCDialogSettings {
	FStringAssetReference ConditionalNPCDialogServiceSettingsLocation; // 0x38
};

struct UBTDecorator_CompareBBEntries {
	EBlackBoardEntryComparison Operator; // 0x68
	FBlackboardKeySelector BlackboardKeyA; // 0x70
	FBlackboardKeySelector BlackboardKeyB; // 0x98
};

struct UFeatureToggledStringAssetReference {
	TArray<FFeatureToggledStringAssetReferenceEntry> Entries; // 0x28
	UObject* ClassType; // 0x38
};

struct UAICharacterPartsDesc {
	FStringAssetReference KilledVfxTemplate; // 0x80
};

struct UBTTask_StorePawnLocationInBlackboard {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UClusterSpawnData {
	UClass* ClusterDescClass; // 0x58
};

struct ULandmarkReactionEventCallInterfaceStopReaction {
	EEventRunLocation RunLocation; // 0x38
};

struct UWieldedItemNonVerbalRadialContentRule {
	UPhrasesRadialDataAsset* CurrentPhrases; // 0xa8
};

struct UNPCDialogPredicateOnTutorialStep {
	FName TutorialStepName; // 0x38
};

struct UNonVerbalRadialContentRule {
	URadialAction* PrimaryActionSlot; // 0x78
	URadialAction* SecondaryActionSlot; // 0x80
	URadialAction* TertiaryActionSlot; // 0x88
	URadialAction* QuaternaryActionSlot; // 0x90
	float RadialTextScale; // 0x9c
	FVector2D RadialTextOffset; // 0xa0
};

struct UParticleModuleSizeScaleBySpeed {
	FVector2D SpeedScale; // 0x50
	FVector2D MaxScale; // 0x58
};

struct UIslandEventComponent {
	UIslandEventType* EventType; // 0xc8
	FGuid Id; // 0xd0
};

struct UMechanismTriggerComponent {
	EMechanismTriggerType TriggerType; // 0xd8
	FScriptMulticastDelegate OnMechanismActionRegisteredWithTriggerDelegate; // 0xe0
	FScriptMulticastDelegate OnMechanismActionUnregisteredWithTriggerDelegate; // 0xf0
	FScriptMulticastDelegate OnMechanismTriggerChangedMechanismActionStatesDelegate; // 0x100
	FScriptMulticastDelegate OnMechanismTriggerStateChangedDelegate; // 0x110
	FScriptMulticastDelegate OnMechanismTriggerResetDelegate; // 0x120
	EMechanismTriggerState TriggerState; // 0x140
};

struct UFishingFloatSetupDataAsset {
	UWwiseObjectPoolWrapper* FishingFloatPool; // 0x28
	UWwiseEvent* RodCastFloatLandInWater; // 0x30
	float DelayBeforeDetachingFloat; // 0x38
	float FloatBobDepthWhenMovedAndNotHooked; // 0x3c
	float RetractingDuration; // 0x40
	float ViolentlyRetractingDuration; // 0x44
	UCurveFloat* CastingFloatMovementXY; // 0x48
	UCurveFloat* CastingFloatMovementZAtMinDistance; // 0x50
	UCurveFloat* CastingFloatMovementZAtMaxDistance; // 0x58
	UCurveFloat* ReelingInFloatMovementXY; // 0x60
	UCurveFloat* ReelingInFloatMovementZ; // 0x68
	UObject* SplashVFXWhenFloatLandsOnWater; // 0x70
	float MaxAboveDistance; // 0x78
	float MaxBelowDistance; // 0x7c
	float ExtraOffsetWhenFishNotAttached; // 0x80
	float MaxDriftCompensationOffset; // 0x84
	float FloatBobDepthOnComedyItemBeingHooked; // 0x88
	float BringingInCatchDuration; // 0x8c
	float FloatZOffset; // 0x90
	float WobbleSpeed; // 0x94
	float MinWobbleAngle; // 0x98
	float MaxWobbleAngle; // 0x9c
	float TimeToBlendAwaySway; // 0xa0
	float WobbleYawAngleOffset; // 0xa4
	float FlavourYawMinTimeToNextChange; // 0xa8
	float FlavourYawMaxTimeToNextChange; // 0xac
	float FlavourYawMinSpeed; // 0xb0
	float FlavourYawMaxSpeed; // 0xb4
	float FlavourYawAcceleration; // 0xb8
};

struct UAggressiveGhostShipMineFormationsDataAsset {
	TArray<FAggressiveGhostShipMineFormationOptions> MineFormationOptions; // 0x28
};

struct AAshenLordAshCloud {
	UStaticMeshComponent* CloudMesh; // 0x3d0
	UAshenLordAshCloudSetupDataAsset* SetupData; // 0x3d8
	float InnerRangeStartOffset; // 0x3e0
	float OuterRangeStart; // 0x3e4
	FName NormalisedEngulfedRTPC; // 0x3e8
	float RTPCSecondsBetweenUpdates; // 0x3f0
	float LifeTime; // 0x3f8
	float StartTime; // 0x3fc
	float TimeOffset; // 0x400
	EAshCloudState CloudState; // 0x404
	float MaxRadiusMultiplier; // 0x43c
};

struct UChildConnection {
	UNetConnection* Parent; // 0x34588
};

struct UParticleModuleAccelerationDrag {
	UDistributionFloat* DragCoefficient; // 0x58
	UDistributionFloat* DragOnLocalVelocity; // 0x60
	char bUseGroupADragCoefficientForAllGroups : 1; // 0x68
	UDistributionFloat* AdditionalDragCoefficient[0x5]; // 0x70
	char bUseGroupADragOnLocalVelocityForAllGroups : 1; // 0x98
	UDistributionFloat* AdditionalDragOnLocalVelocity[0x5]; // 0xa0
};

struct USpawnCollectableQuestObjectStepFromActorDesc {
	FQuestVariableActor PlaceableActor; // 0x98
	FName SocketName; // 0xa8
	bool AttachToSocket; // 0xb0
};

struct UExistingToPhasedNPCIndexAssetMap {
	TArray<FExistingNPCToPhasedNPC> NPCIndexMappings; // 0x28
};

struct AAtmosphericFog {
	UAtmosphericFogComponent* AtmosphericFogComponent; // 0x3d0
};

struct UInterpGroupInst {
	UInterpGroup* Group; // 0x28
	AActor* GroupActor; // 0x30
	TArray<UInterpTrackInst*> TrackInst; // 0x38
};

struct UTritonService {
	TArray<UTritonComponent*> RegisteredTritonComponents; // 0x38
	UTritonComponent* CachedListenerInfo; // 0xf0
};

struct UBookMark2D {
	float Zoom2D; // 0x28
	FIntPoint Location; // 0x2c
};

struct UAISystem {
	FStringClassReference PerceptionSystemClassName; // 0x40
	FStringClassReference HotSpotManagerClassName; // 0x50
	float AcceptanceRadius; // 0x60
	bool bFinishMoveOnGoalOverlap; // 0x64
	bool bAcceptPartialPaths; // 0x65
	bool bAllowStrafing; // 0x66
	bool bEnableBTAITasks; // 0x67
	UBehaviorTreeManager* BehaviorTreeManager; // 0x68
	UEnvQueryManager* EnvironmentQueryManager; // 0x70
	UAIPerceptionSystem* PerceptionSystem; // 0x78
	TArray<UAIAsyncTaskBlueprintProxy*> AllProxyObjects; // 0x80
	UAIHotSpotManager* HotSpotManager; // 0x90
};

struct UMerchantContractsService {
	TArray<FMerchantContract> Contracts; // 0x30
};

struct UMaterialExpressionPerInstanceFadeAmount {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UShovelSurfaceHoleDataAsset {
	TArray<FSurfaceDigHole> SurfaceDigHoleClass; // 0x28
};

struct UHasEmblemNPCDialogConditional {
	TArray<FName> RequiredEmblemNames; // 0x30
};

struct UCustomClientValidityCheckCallback {
	bool ShouldPassClientValidation; // 0x28
};

struct UBTDecorator_ConeCheck {
	float ConeHalfAngle; // 0x68
	FBlackboardKeySelector ConeOrigin; // 0x70
	FBlackboardKeySelector ConeDirection; // 0x98
	FBlackboardKeySelector Observed; // 0xc0
};

struct UGameplayAbility {
	FGameplayTagContainer AbilityTags; // 0x68
	bool bReplicateInputDirectly; // 0xa8
	EGameplayAbilityReplicationPolicy ReplicationPolicy; // 0xd0
	EGameplayAbilityInstancingPolicy InstancingPolicy; // 0xd1
	bool bServerRespectsRemoteAbilityCancellation; // 0xd2
	bool bRetriggerInstancedAbility; // 0xd3
	FGameplayAbilityActivationInfo CurrentActivationInfo; // 0xd8
	FGameplayEventData CurrentEventData; // 0xf8
	EGameplayAbilityNetExecutionPolicy NetExecutionPolicy; // 0x198
	UGameplayEffect* CostGameplayEffectClass; // 0x1a0
	UGameplayEffect* CostGameplayEffect; // 0x1a8
	TArray<FAbilityTriggerData> AbilityTriggers; // 0x1b0
	UGameplayEffect* CooldownGameplayEffectClass; // 0x1c0
	UGameplayEffect* CooldownGameplayEffect; // 0x1c8
	FGameplayTagQuery CancelAbilitiesMatchingTagQuery; // 0x1d0
	FGameplayTagQuery ConstTagQuery; // 0x218
	FGameplayTagContainer CancelAbilitiesWithTag; // 0x260
	FGameplayTagContainer BlockAbilitiesWithTag; // 0x288
	FGameplayTagContainer ActivationOwnedTags; // 0x2b0
	FGameplayTagContainer ActivationRequiredTags; // 0x2d8
	FGameplayTagContainer ActivationBlockedTags; // 0x300
	FGameplayTagContainer SourceRequiredTags; // 0x328
	FGameplayTagContainer SourceBlockedTags; // 0x350
	FGameplayTagContainer TargetRequiredTags; // 0x378
	FGameplayTagContainer TargetBlockedTags; // 0x3a0
	UAnimMontage* CurrentMontage; // 0x438
	bool bIsActive; // 0x440
	bool bIsCancelable; // 0x441
	bool bIsBlockingOtherAbilities; // 0x442
};

struct APetItemInfo {
	FPetCustomisation PetCustomisation; // 0x518
	AActor* PetOwner; // 0x530
	AActor* SpawnedForShip; // 0x538
	float DropTraceDistance; // 0x540
	float PointSearchRadius; // 0x544
	ECollisionChannel DropChannel; // 0x548
};

struct UFlamesOfFateSettingsAsset {
	TArray<FFlamesOfFateFlameInfo> FlameInfo; // 0x28
	TArray<FFlamesOfFateShipInfo> ShipInfo; // 0x38
	TArray<EFlameOfFateType> SailWithFlamesAboardFlameTypesToIgnore; // 0x48
	TArray<FSailWithFlameOfFateColoursAboardStatData> SailWithFlamesAboardStatDataArray; // 0x58
};

struct UFortItemSpawnComponent {
	TArray<USkellyFortGameEventType*> AllowedGameEventTypes; // 0x428
};

struct AStaticDamageableCargoRunCrate {
	UGatedHealthComponent* GatedHealthComponent; // 0x7e8
	UVisualHealthResponseComponent* VisualHealthResponseComponent; // 0x7f0
};

struct UVerticalBox {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct UMaterialExpressionTextureSampleParameter {
	FName ParameterName; // 0x1a8
	FGuid ExpressionGUID; // 0x1b0
	FName Group; // 0x1c0
};

struct UIslandItemSpawnComponentMock {
	float RespawnTime; // 0x428
	AIslandData* IslandData; // 0x430
};

struct AMockHitReactionActor {
	UMockHitReactionComponent* MockHitReactionComponent; // 0x3e0
};

struct UProjectileServiceDataAsset {
	char MaxTrails; // 0x28
	float DefaultTrailDistance; // 0x2c
	float DefaultTrailFalloff; // 0x30
	UStaticMesh* TrailsMesh; // 0x38
	UMaterialInterface* Material; // 0x40
};

struct UDigItemStatTriggerType {
	FName UniqueTextIdentifier; // 0x28
};

struct UMaterialInstanceDynamic {
	UPhysicalMaterial* PhysMaterial; // 0x58
	UMaterialInterface* Parent; // 0x60
	char bHasStaticPermutationResource : 1; // 0x68
	char bOverrideSubsurfaceProfile : 1; // 0x68
	FGuid ParentLightingGuid; // 0x70
	TArray<FFontParameterValue> FontParameterValues; // 0x80
	TArray<FScalarParameterValue> ScalarParameterValues; // 0x90
	TArray<FTextureParameterValue> TextureParameterValues; // 0xa0
	TArray<FVectorParameterValue> VectorParameterValues; // 0xb0
	FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0xc0
};

struct ASkeletalWieldableIngestible {
	UGiveItemUponConsumptionComponent* GiveItemUponConsumptionComponent; // 0x798
	UApplyStatusToConsumerComponent* ApplyStatusToConsumerComponent; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7b0
	UFeedableComponent* FeedableComponent; // 0x7b8
	float InToIngestionDuration; // 0x7c0
	float OutOfIngestionDuration; // 0x7c4
	bool CanIngest; // 0x7c8
	UWwiseEvent* IngestAudioEvent; // 0x7d0
	FName IngestAudioFoodType; // 0x7d8
	FPlayerStat IngestionStat; // 0x7e0
	FPlayerStat IngestionShipStat; // 0x7e4
};

struct UParticleModuleEventBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UBTDecorator_IsLocationInWater {
	FBlackboardKeySelector WaterVolumeActor; // 0x90
	FBlackboardKeySelector TargetLocation; // 0xb8
	bool OnlyConsidersSwimmableWater; // 0xe0
};

struct UGrantPagesStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct AProtoTavernPiano {
	UStaticMeshComponent* PianoMesh; // 0x508
	FText DisplayName; // 0x510
	UWwiseObjectPoolWrapper* AudioPool; // 0x548
};

struct UDeliverableRedirectionComponent {
	UDeliverableRedirectionContextBase* Context; // 0xd0
};

struct UKrakenPlayerGrabbingBehaviourParamsDataAsset {
	FKrakenPlayerGrabbingBehaviourParams Params; // 0x28
};

struct UMovieSceneParameterSection {
	TArray<FScalarParameterNameAndCurve> ScalarParameterNamesAndCurves; // 0x98
	TArray<FVectorParameterNameAndCurves> VectorParameterNamesAndCurves; // 0xa8
	TArray<FColorParameterNameAndCurves> ColorParameterNamesAndCurves; // 0xb8
};

struct UWidgetBlueprintGeneratedClass {
	UWidgetTree* WidgetTree; // 0x228
	TArray<FDelegateRuntimeBinding> Bindings; // 0x230
	TArray<UWidgetAnimation*> Animations; // 0x240
	TArray<FName> NamedSlots; // 0x250
};

struct UBP_LocationMap_Desc_C {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct URegionIslandFilteredSelectionStrategy {
	TArray<EIslandType> IslandTypes; // 0x28
	bool UseMaxDistance; // 0x38
	float MaxDistanceFromStartingIsland; // 0x3c
};

struct UCoherentToWwiseEventDataAsset {
	TArray<FCoherentToWwiseEventDataAssetEntry> CoherentToWwiseEventEntries; // 0x28
};

struct UParticleModuleKillBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct ASlidingDoor {
	ESlidingDoorDirection MovementDirection; // 0x4f0
	USlidingDoorAudioParams* SlidingDoorAudioParams; // 0x4f8
	ESlidingDoorState ServerDoorState; // 0x520
	FVector InitialDoorMeshLocation; // 0x52c
};

struct UVisibilityBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UFont {
	EFontCacheType FontCacheType; // 0x30
	TArray<FFontCharacter> Characters; // 0x38
	TArray<UTexture2D*> Textures; // 0x48
	int32_t IsRemapped; // 0x58
	float EmScale; // 0x5c
	float Ascent; // 0x60
	float Descent; // 0x64
	float Leading; // 0x68
	int32_t Kerning; // 0x6c
	FFontImportOptionsData ImportOptions; // 0x70
	int32_t NumCharacters; // 0x120
	TArray<int32_t> MaxCharHeight; // 0x128
	float ScalingFactor; // 0x138
	int32_t LegacyFontSize; // 0x13c
	FName LegacyFontName; // 0x140
	FCompositeFont CompositeFont; // 0x148
};

struct UFishAnimationInstance {
	USkeletalMesh* FishSkeletalMesh; // 0x440
	AFishingFish* FishingFishCharacter; // 0x448
	FFishAnimationParams FishingFishAnimationParams; // 0x450
	FFishAnimationSequences FishAnimationSequences; // 0x458
	bool IsJumpActive; // 0x4e0
	bool IsOnSurface; // 0x4e1
	bool FishIsCaught; // 0x4e2
	UAnimMontage* CurrentPlayingMontage; // 0x4e8
};

struct APressurePlateMechanismTriggerProxy {
	bool DisableAfterActivation; // 0x3f0
	bool AutoEnableAfterDisable; // 0x3f1
	float TimeAfterDisableBeforeAutoEnable; // 0x3f4
	float DelayBeforeActivation; // 0x3f8
	TArray<FAllowedInteractableTypes> AllowedInteractableTypes; // 0x400
};

struct ATestObscuringItemActor {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct AAITargetActor {
	USceneComponent* Root; // 0x3d8
	EAthenaAITeam Team; // 0x3e0
};

struct UShipDamageableComponent {
	AActor* Ship; // 0x1a0
};

struct UScrapeableDamageDataAsset {
	TArray<FScrapeableDamageSpeedEntry> DamageSpeedParams; // 0x28
};

struct UMaterialExpressionPredicatedTextureSampleParameter2D {
	FExpressionInput Predicate; // 0x1c8
	FColor DefaultColour; // 0x200
};

struct UMastDescAsset {
	FMastDesc MastDesc; // 0x28
};

struct UParticleModuleAccelerationOverLifetime {
	FRawDistributionVector AccelOverLife; // 0x58
};

struct UFirstPersonAnimationData {
	UFirstPersonAnimaticList* FirstPersonAnimaticList; // 0x68
};

struct AAnimatedMaterialMechanismAction {
	TArray<FAnimatedMaterialData> AnimatedMaterials; // 0x520
};

struct UBroadcasterPuzzleStatueAudioParamsDataAsset {
	UWwiseEvent* BroadcasterInitiateReactionSequence; // 0x28
	UWwiseEvent* SuccessHumStart; // 0x30
	UWwiseEvent* SuccessHumStop; // 0x38
	UWwiseEvent* SuccessWaterLevelUp; // 0x40
	UWwiseEvent* SuccessWaterLevelDown; // 0x48
	UWwiseEvent* SuccessGeneralActivation; // 0x50
	UWwiseEvent* UnsuccessfulSequence; // 0x58
	UWwiseEvent* ShockwaveEffect; // 0x60
};

struct UFoliageType_InstancedStaticMesh {
	UStaticMesh* Mesh; // 0x360
	TArray<UMaterialInterface*> OverrideMaterials; // 0x368
	UFoliageInstancedStaticMeshComponent* ComponentClass; // 0x378
};

struct UMaterialScalarParameterBlend {
	float Inactive; // 0x60
	float Active; // 0x64
};

struct ATutorialFootsteps {
	FName ParamName; // 0x558
	UMaterialInstance* LeftFootprint; // 0x560
	UMaterialInstance* RightFootprint; // 0x568
	bool RaycastLocationsToGround; // 0x570
	UFootstepIDAsset* FootstepDataID; // 0x578
	bool StartActivated; // 0x580
	int32_t NumberStepPairsVisible; // 0x584
	float UpdateInterval; // 0x588
	float AnimationInterval; // 0x58c
	int32_t AnimationSteps; // 0x590
	float FadeUpTime; // 0x594
	float FadeDownTime; // 0x598
	float AutoAnimateDistanceSquared; // 0x59c
	USplineComponent* SplineComponent; // 0x5a0
	UDecalComponent* DecalComponentLeft; // 0x5a8
	UDecalComponent* DecalComponentRight; // 0x5b0
	TArray<FDecalEntry> LeftDecalEntries; // 0x5b8
	TArray<FDecalEntry> RightDecalEntries; // 0x5c8
	TArray<FFootstepLocation> Locations; // 0x5d8
};

struct ULaunchableProjectileService {
	UWorld* World; // 0x30
	TArray<FLaunchableActiveProjectileData> ActiveProjectiles; // 0x38
};

struct UFloatingMessageInABottleClueSiteData {
	FVector SpawnLocation; // 0x38
};

struct UCannonInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTDecorator_ForceSuccess {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UHIKCharacterization {
	FName Reference; // 0x28
	FName Hips; // 0x30
	FName LeftUpLeg; // 0x38
	FName LeftLeg; // 0x40
	FName LeftFoot; // 0x48
	FName RightUpLeg; // 0x50
	FName RightLeg; // 0x58
	FName RightFoot; // 0x60
	FName Spine; // 0x68
	FName LeftArm; // 0x70
	FName LeftForeArm; // 0x78
	FName LeftHand; // 0x80
	FName RightArm; // 0x88
	FName RightForeArm; // 0x90
	FName RightHand; // 0x98
	FName Head; // 0xa0
	TArray<FHIKBoneTransform> BoneTransforms; // 0xa8
	bool Locked; // 0xb8
	TArray<int32_t> UnrealToHumanIKBoneMapping; // 0xc0
	TArray<FHIKBoneMapping> AdditionalBones; // 0xd0
	bool LeftElbowInverted; // 0xe0
	bool RightElbowInverted; // 0xe1
	bool LeftKneeInverted; // 0xe2
	bool RightKneeInverted; // 0xe3
	bool AdjustLeftShoulder; // 0xe4
	FVector AdjustLeftShoulder_Axis; // 0xe8
	float AdjustLeftShoulder_Angle; // 0xf4
	bool AdjustRightShoulder; // 0xf8
	FVector AdjustRightShoulder_Axis; // 0xfc
	float AdjustRightShoulder_Angle; // 0x108
	bool SpineSquashNStretch; // 0x10c
	bool NeckSquashNStretch; // 0x10d
	float SpineJointsMinSquashNStretchFactor; // 0x110
	float SpineJointsMaxSquashNStretchFactor; // 0x114
	float NeckJointsMinSquashNStretchFactor; // 0x118
	float NeckJointsMaxSquashNStretchFactor; // 0x11c
	bool bInitFromSkeleton; // 0x120
	int32_t InitFromSkeletonCount; // 0x124
	FRotator ImportRotator; // 0x128
};

struct UPirateSelector {
	TArray<APosablePirate*> QueuedPiratesToSpawn; // 0xc8
	FScriptMulticastDelegate BeginCelebration; // 0xd8
	FScriptMulticastDelegate StartGeneratingPirates; // 0xe8
	FScriptMulticastDelegate EndGeneratingPirates; // 0xf8
	FScriptMulticastDelegate GenerateShipSelectionPirate; // 0x108
	FScriptMulticastDelegate SelectionConfirmed; // 0x118
	FScriptMulticastDelegate SelectionCancelled; // 0x128
	FScriptMulticastDelegate SelectPirateButtonPressed; // 0x138
	FScriptMulticastDelegate RefreshPiratesButtonPressed; // 0x148
	FScriptMulticastDelegate FavoritePirateButtonPressed; // 0x158
	FScriptMulticastDelegate LeavingPirateSelectionState; // 0x168
};

struct UShopViewModelComponent {
	uint32_t MaxItemOffers; // 0xc8
	uint32_t MaxHighPriorityItemOffers; // 0xcc
	uint32_t MinVoyageOffers; // 0xd0
	uint32_t MaxVoyagesOwned; // 0xd4
	TArray<UCompany*> IgnoredCompaniesForMaxVoyagesOwned; // 0xd8
	int32_t StockRefreshTime; // 0xe8
	TArray<UCategoryBase*> PrioritisedVoyages; // 0xf0
	FText EmissaryLockedCommodityOfferDescription; // 0x100
	FText OutOfStockLockedCommodityOfferDescription; // 0x138
};

struct UScoreRewardDataAsset {
	FScoreRewardData ScoreRewardData; // 0x28
	TArray<FScoreReasonIcons> ScoreReasonIcons; // 0x108
};

struct UWieldablePetComponent {
	UWieldablePetComponentDataAsset* WieldablePetComponentData; // 0xc8
};

struct AMatineeActor {
	UInterpData* MatineeData; // 0x3d0
	FName MatineeControllerName; // 0x3d8
	float PlayRate; // 0x3e0
	char bPlayOnLevelLoad : 1; // 0x3e4
	char bForceStartPos : 1; // 0x3e4
	float ForceStartPosition; // 0x3e8
	char bLooping : 1; // 0x3ec
	char bRewindOnPlay : 1; // 0x3ec
	char bNoResetOnRewind : 1; // 0x3ec
	char bRewindIfAlreadyPlaying : 1; // 0x3ec
	char bDisableRadioFilter : 1; // 0x3ec
	char bClientSideOnly : 1; // 0x3ec
	char bSkipUpdateIfNotVisible : 1; // 0x3ec
	char bIsSkippable : 1; // 0x3ec
	int32_t PreferredSplitScreenNum; // 0x3f0
	char bDisableMovementInput : 1; // 0x3f4
	char bDisableLookAtInput : 1; // 0x3f4
	char bHidePlayer : 1; // 0x3f4
	char bHideHud : 1; // 0x3f4
	TArray<FInterpGroupActorInfo> GroupActorInfos; // 0x3f8
	char bShouldShowGore : 1; // 0x408
	TArray<UInterpGroupInst*> GroupInst; // 0x410
	TArray<FCameraCutInfo> CameraCuts; // 0x420
	char bIsPlaying : 1; // 0x430
	char bReversePlayback : 1; // 0x430
	char bPaused : 1; // 0x430
	char bPendingStop : 1; // 0x430
	float InterpPosition; // 0x434
	char ReplicationForceIsPlaying; // 0x43c
	char bServerInitialLevelStreamingComplete : 1; // 0x444
};

struct UAnimatedCosmeticItemAnimationInstance {
	TArray<FNPCOneShotAnimationElement> OneShotSequences; // 0x448
	TArray<FNPCContinuousAnimationElement> ContinuousSequences; // 0x458
	UAnimInstance* ParentCharacterAnimationInstance; // 0x468
	UAnimMontage* CurrentPlayingMontage; // 0x470
	UAnimSequenceBase* OneShot; // 0x478
	UAnimSequenceBase* ContinuousIn; // 0x480
	UAnimSequenceBase* ContinuousLoopA; // 0x488
	UAnimSequenceBase* ContinuousLoopB; // 0x490
	UAnimSequenceBase* ContinuousOut; // 0x498
};

struct UVaultPuzzleDataAsset {
	TArray<FVaultPuzzleSolutionEntry> SolutionSets; // 0x28
	EVaultAudioSettings AudioSetting; // 0x38
	bool RequiresOpenDoor; // 0x39
	bool ShouldFillWithWater; // 0x3a
	bool RequiresPuzzleSolution; // 0x3b
	bool ShouldExtinguishBraziersOnComplete; // 0x3c
	bool ShouldOpenRewardDoorOnComplete; // 0x3d
	TArray<float> FillRateOverrides; // 0x40
};

struct UAnimNotify_AthenaPlayParticleEffectWithOwnerCustomisation {
	UVfxCustomisationType* VfxCustomisationType; // 0x88
};

struct ULeaderboardComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTaleQuestCommonToolService {
	UTaleQuestToolServiceDesc* ServiceDesc; // 0x60
	TArray<UItemDesc*> WieldableDescs; // 0x68
};

struct UConcertinaItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UAshenLordEncounterServiceParams {
	UAshenLordEncounterParams* EncounterParams; // 0x28
	float MinPlayerDistanceToIsland; // 0x30
	AAshenLordEncounter* AshenLordEncounterClass; // 0x38
	float EncounterExclusionRadiusInMetres; // 0x40
};

struct UIslandServiceIslandTextureProviderComponent {
	EIslandTextureSourceType IslandTextureSourceType; // 0xd0
};

struct USpawnActorAtPointStepDesc {
	FQuestVariableTransform PointVar; // 0x100
};

struct AAggressiveGhostShipMine {
	UPrimitiveComponent* PhysicsRootComponent; // 0x608
	UFuseComponent* FuseComponent; // 0x610
	UExplosiveComponent* ExplosiveComponent; // 0x618
	UHealthComponent* HealthComponent; // 0x620
};

struct ULandmarkReactionEventPlayAudio {
	UWwiseEvent* AudioCue; // 0x38
};

struct UCompanyNPCComponent {
	UCompany* Company; // 0x100
	TArray<UItemDesc*> SpecifiedItemsToPurchase; // 0x108
	FText SellSpecificItemText; // 0x118
	FName NPCName; // 0x150
	float HoldToHandInBootyDuration; // 0x158
	UConditionalStatsTriggerType* ConditionalStatForBootyHandIn; // 0x160
};

struct UAnimBlueprint {
	USkeleton* TargetSkeleton; // 0xd8
	TArray<FAnimGroupInfo> Groups; // 0xe0
	TArray<FName> SkeletonSlotNames; // 0xf0
};

struct ABuriedDecalClientService {
	UDiggingSettings* Settings; // 0x3d8
};

struct UMeshMemoryConstraintService {
	UWorld* World; // 0x58
	TMap<UMeshMemoryConstraintBudget*, UMeshMemoryConstraintServiceBudgetData*> BudgetsMap; // 0x98
	TMap<UMeshMemoryConstraintCategory*, UMeshMemoryConstraintBudget*> CategoryToBudgetMap; // 0xe8
};

struct UAISpawnContextContainerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTService_RunLoopingCustomAnimation {
	bool UseFixedLoopingCustomAnimationName; // 0x70
	FName FixedLoopingCustomAnimationName; // 0x74
	FBlackboardKeySelector LoopingCustomAnimationNameKey; // 0x80
	bool GetAnimationDurations; // 0xa8
	FBlackboardKeySelector IntoAnimationEffectTime; // 0xb0
	FBlackboardKeySelector IntoAnimationDuration; // 0xd8
	FBlackboardKeySelector OutOfUndockTime; // 0x100
	FBlackboardKeySelector OutOfAnimationDuration; // 0x128
	FBlackboardKeySelector AlternateOutOfAnimationIndex; // 0x150
};

struct AHideoutExit {
	UBoxComponent* TriggerZoneComponent; // 0x3d0
};

struct APiratePreviewActor {
	UCosmeticItemAnimationComponent* CosmeticItemAnimationComponent; // 0x3e8
	UCosmeticVfxComponent* CosmeticVfxComponent; // 0x3f0
	FPiratePreviewView DelayedGenerationView; // 0x620
	TArray<USceneComponent*> CameraLocations; // 0x6c8
	UAnimationAsset* PendingAnim; // 0x6d8
	UDataAsset* EmotePropData; // 0x6e0
	UAnimationAsset* DefaultAnimation; // 0x700
	TWeakObjectPtr<USkeletalMeshComponent> Pirate; // 0x708
	TWeakObjectPtr<UCameraComponent> MainCamera; // 0x710
	FObjectMessagingHandle PreviewReadyEventHandle; // 0x718
	FObjectMessagingHandle PreviewBusyEventHandle; // 0x760
	float SpinPirateRate; // 0x7a8
	USkeletalMeshSocket* LookAtSocket; // 0x7b0
};

struct UCinematicQuestRunnable {
	FText Message; // 0x28
	FText Header; // 0x60
	FName Tag; // 0x98
	bool RunOnce; // 0xa0
};

struct UAddNPCOnSurfaceStepDesc {
	UNPCOnSurfaceDataAsset* NPCOnSurfaceDataAsset; // 0x80
	FQuestVariableActor ParentActor; // 0x88
	FQuestVariableGuid NPCOnSurfaceManager; // 0x98
};

struct UIslandNameForNPCContextDestinationDescriptor {
	FName IslandIdentifier; // 0x40
};

struct UCoherentUIGTJSEvent {
	TArray<UStruct*> StructTypes; // 0xa8
};

struct UControllableObjectNamedContextualOpenRadialAction {
	TArray<FContextAction> RadialContexts; // 0x30
	URadialCreationRuleAsset* CanExecuteRadial; // 0x40
};

struct UWaterSlideParamsDataAsset {
	FWaterSlideParams WaterSlideParams; // 0x28
};

struct AStaticCargoRunCrate {
	UCargoRunCrateComponent* CargoRunCrateComponent; // 0x7e0
};

struct UCircularThrobber {
	int32_t NumberOfPieces; // 0x138
	float Period; // 0x13c
	float Radius; // 0x140
	USlateBrushAsset* PieceImage; // 0x148
	FSlateBrush Image; // 0x150
};

struct UMaterialExpressionParticleSubUV {
	char bBlend : 1; // 0x1a8
	char bMipBiasOnLowResolution : 1; // 0x1a8
};

struct UCompassSpinComponent {
	bool EnableAcceleration; // 0xd0
	float MagnetForce; // 0xd4
	float DefaultDampingFactor; // 0xd8
	FName BoneToRotate; // 0xdc
	bool EnableOneShotSpinning; // 0xe4
	float OneShotSpinDuration; // 0xe8
	float OneShotSpinDampingFactor; // 0xec
	float OneShotSpinSpeed; // 0xf0
	float OneShotSpinSeekSpeed; // 0xf4
	float OneShotSpinAcceleration; // 0xf8
	float OneShotSpinDecelerationPeriod; // 0xfc
	float OneShotSpinSeekSnapPeriod; // 0x100
	float OneShotSpinSeekSnapDegrees; // 0x104
	bool EnableSpinningInStorms; // 0x108
	float StormSpinDampingFactor; // 0x10c
	FWeightedProbabilityRangeOfRanges StormSpinSpeeds; // 0x110
	FWeightedProbabilityRangeOfRanges StormSpinAccelerations; // 0x140
	TArray<float> StormSpinChancesOfPointingNorth; // 0x170
	FWeightedProbabilityRangeOfRanges StormSpinPointingNorthDurations; // 0x180
	FFloatRange StormSpinDirectionChangeInterval; // 0x1b0
};

struct AAthenaFaunaAIController {
	float MaxTimeBetweenThreatDetermination; // 0x8f8
	float DefaultControlRotationInterpSpeed; // 0x8fc
	TArray<FAIStategyControllerMovementMod> StrategyControllerMovementMods; // 0x900
	float MinAgentHalfHeightPctOverride; // 0x910
	UFaunaAIContollerParamsDataAsset* FaunaDataAsset; // 0x918
	AActor* CarrierActor; // 0x920
	AActor* HighestDangerActor; // 0x9d0
	UFaunaAIPlayerTracker* PlayerTracker; // 0xa60
};

struct UMaterialExpressionDDX {
	FExpressionInput Value; // 0x70
};

struct UNamedContextualOpenRadialAction {
	TArray<FContextAction> RadialContexts; // 0x30
	URadialCreationRuleAsset* CanExecuteRadial; // 0x40
};

struct UItemInfoHealthMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UParticleModuleRotateRotationAxis {
	FRotationAboutAxisParameters FacingAxis; // 0x50
	char bUseGroupAFacingAxisForAllGroups : 1; // 0x60
	FRotationAboutAxisParameters AdditionalFacingAxes[0x5]; // 0x64
};

struct UStarvingComponent {
	FWeightedProbabilityRangeOfRanges WeightedTimeToStarveInSeconds; // 0xd0
	float StarvingNotificationInterval; // 0x100
	bool StartStarvingImmediately; // 0x104
	bool RecalculateTimeToStarveOnReset; // 0x105
	float TimeSpentStarving; // 0x154
	bool HasStartedStarving; // 0x158
	float TimeToStarveInSeconds; // 0x15c
};

struct AServiceStatusNotificationsService {
	TArray<FServiceStatusNotification> ActiveNotifications; // 0x3d8
	uint32_t DefaultUpdateDisplayedMessagesRateSeconds; // 0x468
};

struct UNextPageRadialAction {
	UNotificationInputId* InputID; // 0x28
};

struct APressurePlateMechanismTriggerBase {
	UMechanismTriggerComponent* MechanismTriggerComponent; // 0x3d8
	UParticleSystem* SteppedOnVFX; // 0x3e0
	float SteppedOnVFXStartTime; // 0x3e8
	FVector SteppedOnVFXLocation; // 0x3ec
	FRotator SteppedOnVFXRotation; // 0x3f8
	USceneComponent* Root; // 0x408
	UMechanismInteractionComponent* MechanismInteractionComponent; // 0x410
	UBoxComponent* TriggerBox; // 0x418
	TArray<FPressurePlateAnimationComponent> AnimationComponents; // 0x428
};

struct ABattleElevatorEventRoom {
	TArray<AActor*> ActorsWithAIRegionsToAssignAIToCannons; // 0x508
	ABattleElevator* TargetBattleElevatorActor; // 0x518
	UClass* CoordinatedKrakenTypeToSpawn; // 0x520
	FScriptMulticastDelegate BattleElevatorRoomPhaseStartedDelegate; // 0x540
	FName InitialFightPhase; // 0x550
	UBattleElevatorEventRoomPhasesDataAsset* PhasesAsset; // 0x558
	FCurrentPhaseData CurrentPhaseData; // 0x560
};

struct UEmissaryActionRewardBoostComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UAthenaAnimationData {
	UAthenaAnimationDeathDataAsset* DeathDataAsset; // 0x28
	UAthenaAnimationUndoRepairDataAsset* UndoRepairAsset; // 0x30
	UAthenaAnimationSittingDataAsset* SittingAsset; // 0x38
	TArray<FFallbackSittingDataAsset> FallBackSittingData; // 0x40
	bool UseCorrectionSittingDataAsset; // 0x50
	UAthenaAnimationWaterSlideDataAsset* WaterSlideDataAsset; // 0x58
	UAthenaAnimationItemListingAsset* ItemListingAsset; // 0x60
};

struct UTaleQuestGetProjectionPointOnTradeRouteStepDesc {
	float ProjectionProportion; // 0x80
	FQuestVariableVector SourcePoint; // 0x88
	FQuestVariableTradeRouteData TradeRouteData; // 0x98
	FQuestVariableVector ProjectedPoint; // 0xa8
};

struct AReapersMarkService {
	UReapersMarkSettingsAsset* Settings; // 0x3d8
	TMap<FName, FReapersMarkTrackedBootyItem> TrackedBootyItems; // 0x4e0
};

struct AGameplayEventSignal_SkinnedMesh {
	ANetProxy* ProxyClass; // 0x3d8
	FName NexProxyFeatureToggle; // 0x3e0
	float TimeForSignalToActivateInSeconds; // 0x3e8
	float TimeForSignalToDeactivateInSeconds; // 0x3ec
	float TimeForAtmosphericPressureZoneToActivateInSeconds; // 0x3f0
	UAtmosphericPressureZoneComponent* AtmosphericPressureZoneComponent; // 0x3f8
	ULightingZoneComponent* LightingZoneComponent; // 0x400
	URotateMeshToActorComponent* RotateMeshToActorComponent; // 0x408
	UMeshComponent* SignalMesh; // 0x410
	USceneComponent* Root; // 0x418
	UMaterialInstanceDynamic* SignalMaterial; // 0x420
	EGameplayEventSignalType EventType; // 0x428
	ENetworkRegion OwningNetworkRegion; // 0x490
};

struct UComboBoxString {
	TArray<FString> DefaultOptions; // 0x138
	FString SelectedOption; // 0x148
	FComboBoxStyle WidgetStyle; // 0x158
	FMargin ContentPadding; // 0x580
	float MaxListHeight; // 0x590
	bool HasDownArrow; // 0x594
	DelegateProperty OnGenerateWidgetEvent; // 0x598
	FScriptMulticastDelegate OnSelectionChanged; // 0x5a8
	FScriptMulticastDelegate OnOpening; // 0x5b8
};

struct ULastHealthChangeReasonStatCondition {
	EHealthChangedReason LastHealthChangeReason; // 0x28
};

struct ATutorialEventControlledObject {
	FObjectMessagingHandle ActivateEventHandle; // 0x3d8
	FObjectMessagingHandle DeactivateEventHandle; // 0x420
	UWwiseEvent* ActivationSfx; // 0x468
	UWwiseEvent* FullyActivatedSfx; // 0x470
	UWwiseEvent* DeactivationSfx; // 0x478
	UWwiseEvent* FullyDeactivatedSfx; // 0x480
	bool IsActivated; // 0x488
	FObjectMessagingDispatcher EventDispatcher; // 0x490
	AAthenaPlayerController* RegisteredController; // 0x530
};

struct UHoldToUseInputVisualModifier_RandomiseAlternate {
	float ChanceForAlternate; // 0x28
};

struct UBoolBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct AVolcano {
	UCapsuleComponent* HitDetectionVolume; // 0x3e8
	bool UseDormantDuration; // 0x3f0
	UVolcanoSetupDataAsset* VolcanoSetupData; // 0x3f8
	AMurk* AssociatedSuperheatedWater; // 0x400
	ALavaZone* AssociatedLavaZone; // 0x408
	float InnerTargetRadiusInMetres; // 0x410
	float OuterTargetRadiusInMetres; // 0x414
	float NearbyPlayerRangeToFireProjectilesInMetres; // 0x418
	float RandomShipPositionScale; // 0x41c
	UParticleSystemComponent* WarmingUpEmitter; // 0x420
	UParticleSystemComponent* EruptingEmitter; // 0x428
	UBlendedLightingZoneComponent* BlendedLightingZoneComponent; // 0x430
	UBlendedAtmosphericPressureZoneComponent* BlendedAtmosphericPressureZoneComponent; // 0x438
	UBlendedPostProcessingRainZoneComponent* BlendedPostProcessingRainZoneComponent; // 0x440
	FVector ProjectileLaunchOffset; // 0x448
	UWwiseObjectPoolWrapper* AudioPool; // 0x458
	UWwiseEvent* WarmupAudioPlayEvent; // 0x460
	UWwiseEvent* WarmupAudioStopEvent; // 0x468
	UWwiseEvent* EruptingAudioPlayEvent; // 0x470
	UWwiseEvent* EruptingAudioStopEvent; // 0x478
	UCapsuleComponent* InstantKillZone; // 0x480
	float InstantKillZoneTestInterval; // 0x488
	FVolcanoStateData StateData; // 0x48c
	FName AssociatedIslandName; // 0x498
};

struct USelectRewardStepDesc {
	FQuestVariableItemSpawnDataTypeArray ItemSpawnDatas; // 0x80
	FQuestVariableItemSpawnDataType QuestItemSpawnData; // 0x90
	int32_t NumberOfItemsToSpawn; // 0xa0
	bool SelectChestsOnly; // 0xa4
};

struct UInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTunnelsOfTheDamnedServiceParams {
	TArray<FTunnelOfTheDamnedClass> TunnelClasses; // 0x28
};

struct UEditableGameplayTagQueryExpression_NoTagsMatch {
	FGameplayTagContainer Tags; // 0x28
};

struct UPremiumShopViewModelComponentBase {
	UPetShopDataAsset* PetShopDataAsset; // 0x270
};

struct USafeZoneSlot {
	bool bIsTitleSafe; // 0x38
	EHorizontalAlignment HAlign; // 0x39
	EVerticalAlignment VAlign; // 0x3a
	FMargin Padding; // 0x3c
};

struct USceneCaptureComponent {
	TArray<TWeakObjectPtr<UPrimitiveComponent>> HiddenComponents; // 0x2b0
	bool bCaptureEveryFrame; // 0x2c0
	float MaxViewDistanceOverride; // 0x2c4
	TArray<FEngineShowFlagsSetting> ShowFlagSettings; // 0x2c8
};

struct URespawnAndTaleProgressComponent {
	TArray<AProgressSpawnLocation*> LinkedSpawnLocations; // 0x100
	int32_t ProgressLevel; // 0x110
	bool ClearProgress; // 0x114
	bool SetRespawnProgress; // 0x115
	bool SetRespawnProgressForWholeCrew; // 0x116
	bool SetTaleProgress; // 0x117
	bool SetTaleProgressForWholeCrew; // 0x118
};

struct UTaleQuestClearTaleProposalsStepDesc {
	FName CampaignId; // 0x80
};

struct UCircleMapClueDescriptor {
	UClueDestinationDescriptor* DestinationDescriptor; // 0x28
};

struct UFrontendPremiumShopViewModelComponent {
	UShopDesc* ShopDesc; // 0x2e8
	UShopDesc* StoreDesc; // 0x308
};

struct UAnimCompress_RemoveLinearKeys {
	float MaxPosDiff; // 0x40
	float MaxAngleDiff; // 0x44
	float MaxScaleDiff; // 0x48
	float MaxEffectorDiff; // 0x4c
	float MinEffectorDiff; // 0x50
	float EffectorDiffSocket; // 0x54
	float ParentKeyScale; // 0x58
	char bRetarget : 1; // 0x5c
	char bActuallyFilterLinearKeys : 1; // 0x5c
};

struct UParticleModuleOrientationBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct ABeckonService {
	UBeckonDataAsset* BeckonDataAsset; // 0x3d8
};

struct UFlatWaterPlaneComponent {
	UWaterId* WaterId; // 0x588
	bool ActiveInExclusionZone; // 0x590
};

struct UAddFogBankAvoidanceAreaStepDesc {
	FQuestVariableVector Location; // 0x80
	FQuestVariableFloat Radius; // 0x90
};

struct ULightMapTexture2D {
	int32_t RequestedMips; // 0x138
	int32_t ResidentMips; // 0x13c
	int32_t StreamingIndex; // 0x140
	int32_t FirstResourceMemMip; // 0x144
	FIntPoint ImportedSize; // 0x14c
	float ForceMipLevelsToBeResidentTimestamp; // 0x154
	char bTemporarilyDisableStreaming : 1; // 0x158
	char bIsStreamable : 1; // 0x158
	char bHasCancelationPending : 1; // 0x158
	char bForceMiplevelsToBeResident : 1; // 0x158
	char bGlobalForceMipLevelsToBeResident : 1; // 0x158
	TextureAddress AddressX; // 0x15c
	TextureAddress AddressY; // 0x15d
	int32_t MinimumLoadedMips; // 0x160
};

struct UFlammableWieldableComponent {
	FStatus IgnitedStatus; // 0xe0
};

struct UMigrationUIContentsDataAsset {
	UFont* Font; // 0x28
	bool ShowBanner; // 0x30
	FText BannerText; // 0x38
	float BannerTextFontScale; // 0x70
	int32_t BannerTextPostSpacing; // 0x74
	float PoemTextFontScale; // 0x78
	int32_t PoemTextSpacing; // 0x7c
	FVector2D MaskBorderSize; // 0x80
	TArray<FMigrationUIContentsDataAssetEntry> Poems; // 0x88
	float RevealDuration; // 0x98
	float FadeOutDuration; // 0x9c
	FStringAssetReference MigrationUIMaterialFileLocation; // 0xa0
};

struct UHitReactionComponent {
	FScriptMulticastDelegate OnServerProcessHitReaction; // 0xd8
	FScriptMulticastDelegate OnClientProcessHitReaction; // 0xe8
	bool ServerAuthoritiveReactions; // 0xf8
};

struct UTaleQuestNotificationUsingVariableStepDesc {
	FQuestVariableNotificationDesc NotificationDesc; // 0x80
	FQuestVariablePlayerActor PreventNotificationForPlayer; // 0x90
	FQuestVariablePlayerActor Player; // 0xa0
};

struct UWaitForMechanismActionCompletionStepDesc {
	FQuestVariableActor Action; // 0x80
	bool BlockCrewMigrationWhileWaiting; // 0x90
};

struct USpawnItemStepDesc {
	UItemDesc* Item; // 0x80
	bool TrackItem; // 0x88
	bool MarkItemAsCritical; // 0x89
	FText CriticalActorLostMessage; // 0x90
	FName SocketName; // 0xc8
	FQuestVariableActor LocatorVar; // 0xd0
	FQuestVariableActor ActorVar; // 0xe0
};

struct UMenuAnchor {
	UUserWidget* MenuClass; // 0x150
	DelegateProperty OnGetMenuContentEvent; // 0x158
	EMenuPlacement Placement; // 0x168
	FScriptMulticastDelegate OnMenuOpenChanged; // 0x170
};

struct UAIEncounterSettingsFixed {
	FStringAssetReference SpecificSkillset; // 0x60
	FStringAssetReference Loadout; // 0x70
	FStringAssetReference Form; // 0x80
	FStringAssetReference Ammo; // 0x90
	FName DioramaRole; // 0xa0
	FText LocalisableName; // 0xa8
	FEncounterParams EncounterTrackingParams; // 0xe0
	UClass* ItemDropComponentClass; // 0xf0
};

struct UNPCIdAsset {
	TArray<FName> NPCIds; // 0x28
};

struct UCapstanDescAsset {
	FCapstanDesc CapstanDesc; // 0x28
};

struct UTaleQuestGetCollectionItemCountStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UDeliverableRedirectionNonEmptyCollectorsChestContextHandler {
	UDeliverableRedirectionDestinationDescriptorBase* DestinationDescriptor; // 0x28
};

struct ULevelSequenceBurnInOptions {
	bool bUseBurnIn; // 0x28
	FStringClassReference BurnInClass; // 0x30
	ULevelSequenceBurnInInitSettings* Settings; // 0x40
};

struct UAthenaAICharacterControllerSharedParamValuesDataAsset {
	bool OverrideUseRVOAvoidance; // 0x88
	bool UseRVOAvoidance; // 0x89
	bool OverridePrioritiseInteractablesBeforeEnemies; // 0x8a
	bool PrioritiseInteractablesBeforeEnemies; // 0x8b
	UCurveFloat* DistanceInMToCannonShotHitChanceCurve; // 0x90
	TArray<FAIStrategyMovementProperties> AIStrategyMovementProperties; // 0x98
	TArray<FItemCategoryAIStrategyMovementPropertiesOverride> ItemCategoryAIStrategyMovementPropertiesOverrides; // 0xa8
	FAthenaAICharacterCannonTargetingParams CannonTargetingParams; // 0xb8
	TArray<FAthenaAICharacterControllerItemCategoryProjectileEffectivenessProperties> WieldedItemProjectileEffectivenessProperties; // 0xc8
	TArray<FAthenaAICharacterControllerItemCategoryNamedParams> WieldedItemOverrideNamedControllerParams; // 0xd8
	TArray<FAthenaAIItemParamValue> NamedItemParams; // 0xe8
	TArray<FAthenaAICharacterControllerSpawnItemDescForItemCategory> SpawnItemDescForItemCategories; // 0xf8
	TArray<UAthenaAIAbilityParams*> AIAbilityParams; // 0x108
	TArray<FAthenaAIEngageEnemyData> NonItemEngageOptions; // 0x118
	FStringAssetReference AnimationDataOverrideAsset; // 0x128
	FStringAssetReference CustomAnimationAsset; // 0x138
	bool OverrideNoInitialItem; // 0x148
	bool NoInitialItem; // 0x149
	bool OverrideBeginFleeing; // 0x14a
	bool BeginFleeing; // 0x14b
	UEnvQuery* FleeingEQS; // 0x150
};

struct UControlChannel {
	UNetConnection* Connection; // 0x28
};

struct UCordRenderComponent {
	TArray<UMaterialInstanceDynamic*> CordMaterials; // 0x5f8
	float ThicknessCm; // 0x608
};

struct UKrakenActionCoordinatorComponent {
	FCoordinatedKrakenPhaseAssetEntry CurrentPhaseEntry; // 0xe0
	FProcessableActions CurrentAction; // 0x120
	FProcessableActions NextAction; // 0x138
	FProcessableActions CurrentActionReplicated; // 0x150
	FProcessableActions NextActionReplicated; // 0x168
	FCoordinatedKrakenAction CurrentlyRunningAction; // 0x180
	bool HasCurrentlyActiveAsset; // 0x4e4
};

struct ABaseToggleAnimatedMechanismActionProxy {
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0x400
	TArray<FMechanismAnimationEventContainer> AnimationEvents; // 0x418
};

struct ULogicalOrStatCondition {
	TArray<UStatCondition*> StatConditions; // 0x28
};

struct UTaleQuestAnyStepDesc {
	TArray<UTaleQuestStepDesc*> Descs; // 0x80
};

struct UTaleQuestStructGenServiceDesc {
	FTQStructGenParams Params; // 0x28
};

struct UMovieSceneSpawnTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
	FGuid ObjectGuid; // 0x98
};

struct UMoviePlayerSettings {
	bool bWaitForMoviesToComplete; // 0x28
	bool bMoviesAreSkippable; // 0x29
	TArray<FString> StartupMovies; // 0x30
};

struct AFakeShip {
	TArray<AItemProxy*> AttachedItems; // 0x3d8
};

struct UMediaPlayer {
	FScriptMulticastDelegate OnMediaClosed; // 0x28
	FScriptMulticastDelegate OnMediaOpened; // 0x38
	char Looping : 1; // 0x48
	FString URL; // 0x50
};

struct USeasonPopupAsset {
	FName ThemeId; // 0x28
	TArray<FSeasonIconPopupAsset> TierInfos; // 0x30
	TArray<FSeasonGoalPopupAsset> TrialInfos; // 0x40
	TArray<FSeasonGoalPopupAsset> DeedInfos; // 0x50
	TArray<FSeasonGoalPopupAsset> RenownActionInfos; // 0x60
	FSeasonIconPopupAsset SeasonInfo; // 0x70
	FSeasonIconPopupAsset LevelIncreaseInfo; // 0xd8
	FSeasonIconPopupAsset RewardInfo; // 0x140
	FSeasonIconPopupAsset MultipleRewardsInfo; // 0x1a8
	FStringAssetReference BackgroundImage; // 0x210
	FString DefaultToastSfxEventName; // 0x220
	FString DefaultToastEventName; // 0x230
	FString DefaultToastSwitchName; // 0x240
	FString DefaultToastSwitchValue; // 0x250
	FString DefaultChatSfxEventName; // 0x260
	FString DefaultChatEventName; // 0x270
	FString DefaultChatSwitchName; // 0x280
	FString DefaultChatSwitchValue; // 0x290
};

struct UBTTask_SetBlackboardFloatValueFromMinMax {
	FAIDataProviderFloatValue MinValue; // 0x88
	FAIDataProviderFloatValue MaxValue; // 0xb8
};

struct UItemHealthMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct USetMechanismActivationModeStep {
	USetMechanismActivationModeStepDesc* Desc; // 0x90
};

struct UWorldEndAIAbility {
	APawn* Owner; // 0x78
	UWorldEndAIAbilityParams* SetupAbilityParams; // 0x80
	AAshenLordVolcano* VolcanicEmitter; // 0x88
	AGeyserManager* GeyserManager; // 0x90
	FAshenLordFireShroud FireShroud; // 0x98
	ASuperheatedWater* OwnedSuperHeatedWater; // 0xb8
	UObject* LoadedCloudAsset; // 0xc0
};

struct ATunnelOfTheDamnedPortal {
	USceneComponent* Root; // 0x3e0
	UBoxComponent* TriggerVolume; // 0x3e8
	USphereComponent* ProximityTriggerVolume; // 0x3f0
	bool EnableAllowedTriggerActorTypeFiltering; // 0x3f8
	TArray<AActor*> AllowedTriggerActorTypes; // 0x400
	bool ActivateSignalOnSpawn; // 0x410
	float MigrationBlockingRadius; // 0x414
	UWwiseObjectPoolWrapper* AudioPool; // 0x418
	UWwiseEvent* StartPortalAmbianceEvent; // 0x420
	UWwiseEvent* StopPortalAmbianceEvent; // 0x428
	UWwiseEvent* PortalEntryEvent; // 0x430
	UPortalDesc* Desc; // 0x438
	APortalSignalCutSceneActor* PortalSignalCutSceneActor; // 0x440
	AActor* PortalSignalCutSceneAnchorActor; // 0x448
};

struct UStartTallTaleConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UParticleModuleLocationPrimitiveSphere {
	FRawDistributionFloat StartRadius; // 0xc8
	FRawDistributionFloat AdditionalStartRadiuses[0x4]; // 0x100
	char StartRadiusUseGroupAForAll : 1; // 0x1e0
	FVector2D PositiveXAngleRange; // 0x1e4
	FVector2D NegativeXAngleRange; // 0x1ec
	FVector2D PositiveYAngleRange; // 0x1f4
	FVector2D NegativeYAngleRange; // 0x1fc
	FVector2D PositiveZAngleRange; // 0x204
	FVector2D NegativeZAngleRange; // 0x20c
};

struct UAthenaAIShipControllerParamsDataAsset {
	FShipMovementParams TrackingMovementParams; // 0x100
	FWeightedProbabilityRangeOfRanges TimesToSailBesideTarget; // 0x138
	FWeightedProbabilityRangeOfRanges PerpendicularDistanceOffsets; // 0x168
	FWeightedProbabilityRangeOfRanges TimesBeforeDistanceChange; // 0x198
	float MaxParallelDistanceOffset; // 0x1c8
	float AlignDistanceThreshold; // 0x1cc
	float TimeToProjectIntoFutureForTracking; // 0x1d0
	float TargetSpeedThresholdToTrackShip; // 0x1d4
	FTrackingNoiseGenerator TrackingNoiseGenerator; // 0x1d8
	float WheelAngleMonitorDuration; // 0x1f0
	float WheelAngleChangeThresholdToBreakTracking; // 0x1f4
	float SpeedMonitorDuration; // 0x1f8
	float SpeedChangeThresholdToBreakTrackingInMPS; // 0x1fc
	float TargetSpeedToConsiderAnchorLoweredInMPS; // 0x200
	FWeightedProbabilityRangeOfRanges TrackingLatencyTimes; // 0x208
	FWeightedProbabilityRangeOfRanges TrackingLatencyTimesWhenAnchorLowered; // 0x238
	UCurveFloat* DistToTargetShipVSTrackingLatencyCurve; // 0x268
	FShipMovementParams CirclingMovementParams; // 0x270
	float TargetSpeedThresholdInKnots; // 0x2a4
	float SecondsInFutureToProjectTargetLocation; // 0x2a8
	FWeightedProbabilityRangeOfRanges CircleRadiuses; // 0x2b0
	FWeightedProbabilityRangeOfRanges CirclingSpeedsInDegreesPerSecond; // 0x2e0
	FWeightedProbabilityRangeOfRanges TimesToCircleBeforeChangingRadius; // 0x310
	float MinDistanceFromTargetToStartRam; // 0x340
	float MaxDistanceFromTargetToStartRam; // 0x344
	float MaxSpeedToRamTarget; // 0x348
	float RammingMaxTurnSpeed; // 0x34c
	float RammingTimeDampingScalar; // 0x350
	float MinAngleToTargetToAttemptRam; // 0x354
	FWeightedProbabilityRangeOfRanges RammingLocationOffsets; // 0x358
	FShipMovementParams SailingForwardMovementParams; // 0x388
	float MinAllowedDistanceToObstacle; // 0x3bc
	float MaxPathAvoidanceDistance; // 0x3c0
	FShipMovementParams PassiveSailingMovementParams; // 0x3c4
	float ChanceToAnchor; // 0x3f8
	FWeightedProbabilityRangeOfRanges TimesToStayAnchored; // 0x400
	int32_t NumIslandsToVisitBeforeReturning; // 0x430
	float DistanceFromIslandsToSailTo; // 0x434
	float DistanceToTargetToDropAnchor; // 0x438
	TArray<UImpactProjectileId*> AggressionOverrideImpactIDs; // 0x440
};

struct UPuzzleStatueInteractableComponent {
	UActionRulesComponent* ActionRulesComponent; // 0x118
};

struct UServiceHttpSettings {
	FString DiscoveryServiceUrl; // 0x28
	EServiceHttpMetricsLevel ServerMetricsLevel; // 0x38
	EServiceHttpMetricsLevel ClientMetricsLevel; // 0x39
};

struct UDiggingConfigResolverDataAsset {
	UDiggingAudioDataAsset* AudioDataAsset; // 0x28
	UDiggingAnimationDataAsset* AnimationDataAsset; // 0x30
	UDiggingEffectsDataAsset* EffectsDataAsset; // 0x38
	UDiggingBaseParamsDataAsset* BaseParamsDataAsset; // 0x40
	UDiggingBuryParamsDataAsset* BuryingParamsDataAsset; // 0x48
};

struct UBlockGeysersTaleQuestServiceDesc {
	FQuestVariableActor ActorNearIsland; // 0x28
};

struct AAITargetService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UParticleModuleEventReceiverSpawn {
	FRawDistributionFloat SpawnCount; // 0x60
	FRawDistributionFloat AdditionalSpawnCounts[0x5]; // 0x98
	char bUseGroupAForAll : 1; // 0x1b0
	char bUseParticleTime : 1; // 0x1b0
	char bUsePSysLocation : 1; // 0x1b0
	char bInheritVelocity : 1; // 0x1b0
	FRawDistributionVector InheritVelocityScale; // 0x1b8
};

struct ABrazierMechanismTrigger {
	UMechanismTriggerComponent* MechanismTrigger; // 0x7c8
	EFlameOfFateType FlameTypeToActivate; // 0x7d0
	FText LanternNotLitToolTipText; // 0x7d8
	FText CannotSetBeaconToolTipText; // 0x810
	UNotificationInputId* TakeFlameOfFateNotificationID; // 0x848
	UNotificationInputId* SetFlameOfFateNotificationID; // 0x850
	float LanternSwingAmmount; // 0x858
	float LanternEmissiveAmmount; // 0x85c
	float LanternMegaEmmisiveAmount; // 0x860
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x868
};

struct AGameCustomizationService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct USeagullManagerComponentDataAsset {
	float TurnBlendInOutPercentage; // 0x28
	int32_t NumPseudoRandomValues; // 0x2c
	int32_t FixedSeed; // 0x30
	FVector SeagullEmitterOffset; // 0x34
	UWwiseEvent* StartSeagullSounds; // 0x40
	UWwiseEvent* StopSeagullSounds; // 0x48
	UWwiseObjectPoolWrapper* AudioPool; // 0x50
	int32_t MaxNumShipsToDisplaySeagullsOn; // 0x58
	FWeightedProbabilityRangeOfRanges SeagullScale; // 0x60
	FWeightedProbabilityRangeOfRanges SeagullSpawnFrequency; // 0x90
	FWeightedProbabilityRangeOfRanges SeagullSpeed; // 0xc0
	TArray<FName> Locations; // 0xf0
	FWeightedProbabilityRange NumInFormation; // 0x100
	TArray<FSeagullManagerFormation> Formations; // 0x120
	UShipCreatureManagerCreatureInstanceMotionModifierDataAsset* MotionModifierDataAsset; // 0x130
	double Modulo; // 0x138
	TArray<FSeagullManagerPseudoRandomEntry> Intervals; // 0x140
};

struct UBodySetup {
	FKAggregateGeom AggGeom; // 0x28
	FName BoneName; // 0x70
	EPhysicsType PhysicsType; // 0x78
	char bCookComplexGeometryOnServer : 1; // 0x7c
	char bConsiderForBounds : 1; // 0x7c
	char bMeshCollideAll : 1; // 0x7c
	char bDoubleSidedGeometry : 1; // 0x7c
	char bGenerateNonMirroredCollision : 1; // 0x7c
	char bSharedCookedData : 1; // 0x7c
	char bGenerateMirroredCollision : 1; // 0x7c
	UPhysicalMaterial* PhysMaterial; // 0x80
	EBodyCollisionResponse CollisionReponse; // 0x88
	ECollisionTraceFlag CollisionTraceFlag; // 0x89
	FBodyInstance DefaultInstance; // 0x90
	FWalkableSlopeOverride WalkableSlopeOverride; // 0x210
	FVector BuildScale3D; // 0x218
};

struct UPacingComponentPublicData {
	UCurveFloat* PacingCameraCurve; // 0x28
	float PacingMovementSpeedModifier; // 0x30
	float CameraCurveTToPlayRumble; // 0x34
	float CameraCurveTToPlayFootstepSFX; // 0x38
	float MinStickDeflectionToMove; // 0x3c
	float CameraSpringAccel; // 0x40
	float CamPitchScalar; // 0x44
	UForceFeedbackEffect* TakingAStepRumble; // 0x48
	UWwiseEvent* TakingAStepAudioStateEvent; // 0x50
	ECollisionChannel HitTestTraceChannel; // 0x58
};

struct ADebugCameraHUD {
	FColor WhiteColor; // 0x3d0
	FColor GreenColor; // 0x3d4
	FColor RedColor; // 0x3d8
	APlayerController* PlayerOwner; // 0x3e0
	char bLostFocusPaused : 1; // 0x3e8
	char bShowHUD : 1; // 0x3e8
	char bShowDebugInfo : 1; // 0x3e8
	char bShowHitBoxDebugInfo : 1; // 0x3e8
	char bShowOverlays : 1; // 0x3e8
	char bEnableDebugTextShadow : 1; // 0x3e8
	TArray<AActor*> PostRenderedActors; // 0x3f0
	float LastHUDRenderTime; // 0x400
	float RenderDelta; // 0x404
	TArray<FName> DebugDisplay; // 0x408
	TArray<FName> ToggledDebugCategories; // 0x418
	UCanvas* Canvas; // 0x428
	UCanvas* DebugCanvas; // 0x430
	TArray<FDebugTextInfo> DebugTextList; // 0x438
	AActor* ShowDebugTargetDesiredClass; // 0x448
	AActor* ShowDebugTargetActor; // 0x450
};

struct UMechanismAnimationCurve_Transform {
	FTransformBlendCurve Curve; // 0x60
};

struct ACompanyShopkeeper {
	UCompanyNPCComponent* CompanyNPCComponent; // 0x608
};

struct UShipAssetClassDatabaseService {
	UStringToAssetClassMap* StringToAssetClassMap; // 0x30
};

struct ULoadoutSettings {
	FStringAssetReference DefaultLoadoutAsset; // 0x28
	FStringAssetReference InitialLoadoutAsset; // 0x38
	FStringAssetReference FallbackLoadoutAsset; // 0x48
	FStringAssetReference ContestLoadoutAsset; // 0x58
	TArray<FSupplementalLoadout> SupplementalLoadouts; // 0x68
};

struct UAISenseConfig_Hearing {
	UAISense_Hearing* Implementation; // 0x30
	float HearingRange; // 0x38
	float LoSHearingRange; // 0x3c
	char bUseLoSHearing : 1; // 0x40
	FAISenseAffiliationFilter DetectionByAffiliation; // 0x44
};

struct UProjectileLauncherSpecificSettings {
	TArray<FGlobalProjectileSettings> GlobalSettings; // 0x38
};

struct ARewardableItemInfo {
	FRewardId RewardId; // 0x500
	EBootyTypes Type; // 0x508
	FName Rarity; // 0x50c
	TArray<FPlayerStat> HandInStats; // 0x518
	TArray<FPlayerStat> LegendHandInStats; // 0x528
	UPopUpMessageDesc* PopUpMessageDesc; // 0x538
	UPopUpAudioDesc* PopUpAudioOverrides; // 0x540
	FGuid Id; // 0x548
};

struct UMovieSceneParticleSection {
	FIntegralCurve ParticleKeys; // 0x98
};

struct UWaitForNPCOnSurfaceToSpawnStep {
	UWaitForNPCOnSurfaceToSpawnStepDesc* StepDesc; // 0x90
	UNPCOnSurfaceManager* SelectedManager; // 0x98
};

struct URetractableItemProxyComponent {
	FName FeatureToggle; // 0xf0
	FRetractorOrientationAdjustmentFlags OrientationAdjustmentOnRetractFlags; // 0xf8
	EAxis RetractorBoxAxis; // 0xfb
	bool ShouldAutoReleaseOnSuccessfulRetract; // 0xfc
	bool MigrateAttachedWithRetractor; // 0xfd
	bool WasSimulatingPhysicsBeforeRetract; // 0xfe
};

struct UTaleQuestBreakStructStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UWieldableInteractableComponent {
	AWieldableItem* WieldableItem; // 0x120
};

struct UPetEntitlementDesc {
	FAIPartId PetPartId; // 0xd8
	UPetDesc* RelatedPetDesc; // 0xe0
};

struct UMovieSceneParticleTrack {
	TArray<UMovieSceneSection*> ParticleSections; // 0x88
};

struct UDeathSelfInteractionComponent {
	bool HasGivenUp; // 0x120
};

struct USoundNodeModulatorContinuous {
	FModulatorContinuousParams PitchModulationParams; // 0x38
	FModulatorContinuousParams VolumeModulationParams; // 0x58
};

struct USkellyFortDataAsset {
	USkellyFortGameEventType* GameEventType; // 0x28
	float FindAvailableFortThrottle; // 0x30
	float MinActivationDistanceFromPlayers; // 0x34
	float MinEngagedDistanceFromPlayers; // 0x38
	AActor* FortSignalClass; // 0x40
	TArray<UAIBountySpawner*> BountySpawners; // 0x48
	UBountyQuestDescData* BountyQuestDescData; // 0x58
	UNamedAIDataAsset* NamedAIDataAsset; // 0x60
	FName NavMeshOverride; // 0x68
	FBountyQuestRandomSpawnGeneratorParams BountyQuestRandomSpawnGeneratorParams; // 0x70
	TArray<FAdditionalWave> AdditionalWaves; // 0x180
	UAISkillsetRankProgression* CrewSkillset; // 0x190
	UAISkillsetRankProgression* CaptainSkillset; // 0x198
	UAIItemSpawnRankProgression* CrewItemDrops; // 0x1a0
	UAIItemSpawnRankProgression* CaptainItemDrops; // 0x1a8
	UEnvQuery* FindSpawnPosQuery; // 0x1b0
	FWeightedProbabilityRange WaveRank; // 0x1b8
	UAISpawner* AISpawnerWhenFortInactive; // 0x1d8
	UAISpawner* CannonsAISpawnerWhenFortInactive; // 0x1e0
	UAISpawner* AISpawnerWhenFortActive; // 0x1e8
	UAISpawner* CannonsAISpawnerWhenFortActive; // 0x1f0
	UWwiseEvent* WaveSpawnSoundEffect; // 0x1f8
	UWwiseEvent* FinalWaveSpawnSoundEffect; // 0x200
	UWwiseEvent* FortCompleteSoundEffect; // 0x208
	float WaveSpawnSoundEffectDelay; // 0x210
	float AnticipationAudioZoneRadiusMetres; // 0x214
	float ActionAudioZoneRadiusMetres; // 0x218
	UItemDesc* KeyItemToUnlockDoor; // 0x220
	UItemDescSpawnData* KeySpawnData; // 0x228
	FPlayerStat PlayerStatToFireOnOpen; // 0x230
	EEncounterType EncounterSightingType; // 0x234
	EEncounterType EncounterCloseType; // 0x235
};

struct UBTTask_BlackboardBase {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UTaleQuestAddCircleMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableName IslandName; // 0x88
	FQuestVariableVector Location; // 0x98
	float CircleScale; // 0xa8
	EQuestMapIcon RadialMiniIcon; // 0xac
};

struct UBTTask_BlueprintBase {
	AAIController* AIOwner; // 0x60
	AActor* ActorOwner; // 0x68
	char bShowPropertyDetails : 1; // 0x88
};

struct UInterpTrackLinearColorBase {
	FInterpCurveLinearColor LinearColorTrack; // 0x70
	float CurveTension; // 0x88
};

struct UEnvQueryGenerator_WaterArc {
	UEnvQueryContext* Origin; // 0x90
	FAIDataProviderIntValue NumberOfArcsToGenerate; // 0x98
	FAIDataProviderFloatValue MinArcRadius; // 0xc8
	FAIDataProviderFloatValue MaxArcRadius; // 0xf8
	FAIDataProviderFloatValue MinArcTiltDegrees; // 0x128
	FAIDataProviderFloatValue MaxArcTiltDegrees; // 0x158
	FAIDataProviderFloatValue MinArcPercentage; // 0x188
	FAIDataProviderFloatValue MaxArcPercentage; // 0x1b8
	bool IncludeDirectArcToTarget; // 0x1e8
	UEnvQueryContext* DirectArcTarget; // 0x1f0
};

struct UAnimDataEntryStruct {
	FGuid Guid; // 0x98
};

struct UTaleAddStormAvoidanceAreaStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UPlayerNonVerbalComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UConsole {
	ULocalPlayer* ConsoleTargetPlayer; // 0x38
	UTexture2D* DefaultTexture_Black; // 0x40
	UTexture2D* DefaultTexture_White; // 0x48
	TArray<FString> HistoryBuffer; // 0x68
};

struct UBTTask_MoveToMovingLocation {
	float MinimumLocationMovementForRePath; // 0xb8
	float MinimumTimeBeforeRePath; // 0xbc
	bool IsContinuous; // 0xc0
};

struct UOpenableItemMeshAnimationReactionComponent {
	TArray<FOpenableItemMeshAnimationReactionComponentAnimationNameAndSfxCueSet> AnimNameSets; // 0xd8
	UMeshAnimatorComponent* MeshAnimatorComponent; // 0xe8
};

struct UBTService_UpdateFocusOnBBChange {
	bool DisableUpdateMoveFocusForCurrentPathOnExit; // 0xa0
	FConditionalBasedOnBlackboardKey Conditional; // 0xa8
};

struct UClusterDescription {
	TArray<ACluster*> ClusterAssets; // 0x130
};

struct UQuestBookPagesInContainerComponent {
	FText ActionTooltipDisplaySentence; // 0x638
};

struct UBTTask_PlayCustomMontageId {
	FCustomAnimationMontageId CustomAnimationMontageId; // 0x60
	float TimeToWaitOnServer; // 0x68
};

struct USporeBreathAIAbilityParams {
	FAthenaAIAbilityPlayerBasedRanges BreathMaxDuration; // 0xc8
	float BreathContinueThresholdDistance; // 0xd8
	AStatusEffectOverlapZone* BreathActor; // 0xe0
	FVFXHandlerComponentParams BreathVFXParams; // 0xe8
	FVector BreathCollisionVolumeSize; // 0x128
	float BreathCollisionForwardOffset; // 0x134
	float BreathStartDelay; // 0x138
	UVFXSpawnerComponent* VfxSpawner; // 0x140
};

struct UVoiceChannel {
	int32_t BandwidthPerSecondReservationInBytes; // 0x80
	float SaturationCooloffPeriodInSeconds; // 0x88
};

struct ALightmassCharacterIndirectDetailVolume {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct UHapticFeedbackEffect {
	FHapticFeedbackDetails HapticDetails; // 0x28
};

struct AShovel {
	UInventoryItemComponent* InventoryItem; // 0x7a0
	TArray<FDigAnimParams> ExhumeAnimParams; // 0x7a8
	TArray<FDigAnimParams> BuryAnimParams; // 0x7b8
	UShovelSurfaceHoleDataAsset* ShovelHoleParams; // 0x7c8
	UShovelSurfaceFxDataAsset* ShovelHoleFx; // 0x7d0
	UWwiseEvent* ShovelEnterSurfaceSfx; // 0x7d8
	UWwiseEvent* ShovelBuryingSfx; // 0x7e0
	UWwiseEvent* ShovelExitSurfaceSfx; // 0x7e8
	UWwiseEvent* HitBuriedChestSfx; // 0x7f0
	UWieldableItemCooldownBaseType* ShovelDigCooldownType; // 0x7f8
	float DigRequestToleranceTimeOnServer; // 0x800
	float CameraPitchAfterSuccessfulDigIfStartedHigh; // 0x804
	float CameraPitchAfterSuccessfulDigIfStartedLow; // 0x808
	float CameraPitchAfterDeflectedDigIfStartedHigh; // 0x80c
	float CameraPitchAfterDeflectedDigIfStartedLow; // 0x810
	FName ShovelHeadSocketName; // 0x814
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x820
	UWwiseEvent* PendingRevealSFX; // 0x838
};

struct UProjectileCooldownServiceSettings {
	float ProjectileCooldownTime; // 0x38
	TArray<UObject*> ClassesRequiringValidation; // 0x40
};

struct UTaleQuestAddLocationMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleQuestMultiTargetCompassServiceDesc {
	UItemDesc* CompassDesc; // 0x30
};

struct UCompanyService {
	TArray<UCompanyData*> CompanyData; // 0x30
};

struct UPremiumCatalogDataAsset {
	FGuid CatalogId; // 0x28
	FText DisplayName; // 0x38
	TArray<FPremiumCatalogLandingPageTab> Tabs; // 0x70
};

struct UBootyItemWithCutscenesAnimationInstance {
	USkeletalMeshComponent* BootyItemSkeletalMesh; // 0x640
	UCutsceneAnimationDataAsset* CutsceneAnimationData; // 0x648
	UAnimMontage* CurrentCutscene; // 0x650
};

struct UParticleModuleTypeDataBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct AFlamesOfFateLantern {
	EFlameOfFateType FlameOfFateType; // 0x3d0
};

struct ALandmarkBox {
	UShapeComponent* DefaultShape; // 0x658
};

struct UGlitterBeardIsHideoutOpenConditional {
	bool ConditionalExpected; // 0x28
};

struct UCosmeticItemAnimationInstance {
	UCosmeticItemAnimationSetDataAsset* AnimationDataSet; // 0x448
	UAnimMontage* ActiveMontage; // 0x450
};

struct ATestActorWithUObjectProperty {
	UObject* ObjectProperty; // 0x3d0
};

struct UMovieSceneSequencePlayer {
	FScriptMulticastDelegate OnPlay; // 0x390
	FScriptMulticastDelegate OnStop; // 0x3a0
	FScriptMulticastDelegate OnPause; // 0x3b0
	char bIsPlaying : 1; // 0x3c0
	char bReversePlayback : 1; // 0x3c0
	char bPendingFirstUpdate : 1; // 0x3c0
	UMovieSceneSequence* Sequence; // 0x3c8
	float TimeCursorPosition; // 0x3d0
	float StartTime; // 0x3d4
	float EndTime; // 0x3d8
	int32_t CurrentNumLoops; // 0x3dc
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0x3f0
};

struct UInterpGroup {
	TArray<UInterpTrack*> InterpTracks; // 0x30
	FName GroupName; // 0x40
	FColor GroupColor; // 0x48
	char bCollapsed : 1; // 0x4c
	char bVisible : 1; // 0x4c
	char bIsFolder : 1; // 0x4c
	char bIsParented : 1; // 0x4c
	char bIsSelected : 1; // 0x4c
};

struct UCameraShake {
	char bSingleInstance : 1; // 0x28
	float OscillationDuration; // 0x2c
	float OscillationBlendInTime; // 0x30
	float OscillationBlendOutTime; // 0x34
	FROscillator RotOscillation; // 0x38
	FVOscillator LocOscillation; // 0x5c
	FFOscillator FOVOscillation; // 0x80
	float AnimPlayRate; // 0x8c
	float AnimScale; // 0x90
	float AnimBlendInTime; // 0x94
	float AnimBlendOutTime; // 0x98
	float RandomAnimSegmentDuration; // 0x9c
	UCameraAnim* Anim; // 0xa0
	char bRandomAnimSegment : 1; // 0xa8
	APlayerCameraManager* CameraOwner; // 0xc0
	float ShakeScale; // 0x130
	float OscillatorTimeRemaining; // 0x134
	UCameraAnimInst* AnimInst; // 0x138
};

struct UMaterialExpressionMultiply {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	float ConstA; // 0xe0
	float ConstB; // 0xe4
};

struct UInt32Binding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UGenerateDigLocationStep {
	UGenerateDigLocationStepDesc* StepDesc; // 0x90
};

struct UCatalogOfferDataAsset {
	FGuid OfferId; // 0x28
	EWalletCurrencyId CurrencyType; // 0x38
};

struct USceneDialogueData {
	TArray<FName> ActorNames; // 0x28
	ENPCChatType ChatType; // 0x38
	TArray<USceneDialogueSection*> TextSections; // 0x40
	bool ChainedDialogue; // 0x50
	FString SourceText; // 0x58
};

struct UEmotesRadialDataAsset {
	TArray<FEmoteData> Emotes; // 0x28
};

struct UInAppPurchaseQueryCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UChainLightningSourceComponent {
	FStatus StatusToApply; // 0xd0
	FStringAssetReference ChainLightningSettingsAsset; // 0xe8
	TArray<FChainData> AuthorityChains; // 0x118
	TArray<FChainData> ClientChains; // 0x128
	int32_t FramesSinceLastRep; // 0x138
	int32_t MaxFramesBeforeRep; // 0x13c
	int32_t ChainsSinceLastRep; // 0x140
	UChainLightningSettingsAsset* CachedChainLightningSettingsAsset; // 0x148
};

struct UDistributionFloatConstantCurve {
	FInterpCurveFloat ConstantCurve; // 0x38
};

struct UEnchantedCompassProximityAnnouncementComponent {
	UWwiseEvent* StartAnnouncingEvent; // 0xc8
	UWwiseEvent* StopAnnouncingEvent; // 0xd0
	float MaxFrequencyDistanceSquared; // 0xd8
	TScriptInterface<Class> WielderOrientation; // 0xe0
	TScriptInterface<Class> WielderWwiseEmitterInterface; // 0xf0
	TScriptInterface<Class> OwnerWieldableInterface; // 0x100
	TScriptInterface<Class> ObjectMessagingDispatcher; // 0x110
	bool IsSettingEnabled; // 0x120
};

struct ULightmappedSurfaceCollection {
	UModel* SourceModel; // 0x28
	TArray<int32_t> Surfaces; // 0x30
};

struct UMeleeBlockingInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UShipFireDamageParamsDataAsset {
	FShipFireDamageParams FireDamageParams; // 0x28
};

struct UBTTask_MoveDirectlyToward {
	float AcceptableRadius; // 0x88
	char bDisablePathUpdateOnGoalLocationChange : 1; // 0x8c
	char bProjectVectorGoalToNavigation : 1; // 0x8c
	char bAllowStrafe : 1; // 0x8c
	char bStopOnOverlap : 1; // 0x8c
};

struct UPetAnimationDataStore {
	UPetsAnimationData* PetAnimationData; // 0x28
};

struct UEnvQueryGenerator_IslandAISpawnLocations {
	FString OptionName; // 0x30
	bool NonShippingOnly; // 0x40
	UEnvQueryItemType* ItemType; // 0x48
};

struct UInterpTrackInstVisibility {
	EVisibilityTrackAction Action; // 0x28
	float LastUpdatePosition; // 0x2c
};

struct UIslandDataAsset {
	bool AllowDefaultIdentityTransform; // 0x28
	float SpawningGracePeriod; // 0x2c
	UAISpawner* AncientSkeletonSpawner; // 0x30
	TArray<UIslandDataDefaultAssetEntry*> IslandDefaultDataEntries; // 0x38
	TArray<UIslandDataAssetEntry*> IslandDataEntries; // 0x48
};

struct UFindSessionsCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UWatercraftSpawnData {
	UClass* WatercraftClass; // 0x58
	float MinDistanceToNearestWatercraftInMetres; // 0x78
};

struct UBoxComponent {
	FVector BoxExtent; // 0x5a8
};

struct UFixedArrayEntrySelectionStrategy {
	int32_t IndexToSelect; // 0x28
};

struct ASpikeMechanismActionProxy {
	float Extent; // 0x418
	float Damage; // 0x41c
	EHealthChangedReason DamageReason; // 0x420
	TArray<FAllowedInteractableTypes> AllowedInteractableTypes; // 0x428
};

struct UTaleQuestSpawnDebrisAtClueSiteStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UParticleModuleAcceleration {
	FRawDistributionVector Acceleration; // 0x58
	FRawDistributionVector AdditionalAcceleration[0x5]; // 0x90
	char bUseGroupAAccelerationForAllGroups : 1; // 0x1a8
	char bApplyOwnerScale : 1; // 0x1a8
};

struct UBTDecorator_FeatureToggle {
	FName FeatureName; // 0x68
};

struct UInstancedCoverageMeshComponent {
	TWeakObjectPtr<UStaticMeshComponent> CoveredMeshComponent; // 0x5f0
	int32_t InstanceCount; // 0x5f8
	int32_t InstancingRandomSeed; // 0x5fc
	float InstancePositionExtrusion; // 0x600
	float InstanceScale; // 0x604
	float InstanceScaleVariance; // 0x608
	FRotator InstanceRotation; // 0x60c
	FRotator InstanceRotationVariance; // 0x618
	FVector InstanceAttractionDirection; // 0x624
	float InstanceAttractionIntensity; // 0x630
	int32_t InstanceBaseMeshPlacementLOD; // 0x634
	TArray<FInstancedCoverageMeshLOD> LODs; // 0x638
	float CompleteCullingDistance; // 0x648
	bool InstanceLODPreserveSilhouette; // 0x64c
	float BackFaceCullingAngle; // 0x650
	float ShadowBackFaceCullingAngle; // 0x654
	int32_t MaxPlacementAttempts; // 0x658
	bool bEvenlySpaced; // 0x65c
	bool bVertexColourDensity; // 0x65d
	bool bUpdatePlacement; // 0x65e
	TArray<float> RandomNumbers; // 0x660
	float BaseMeshSurfaceArea; // 0x670
	UStaticMesh* CoveredMesh; // 0x678
};

struct AShipCustomizationChestInteraction {
	TArray<FFeaturedShipCustomisationCategory> Categories; // 0x438
	bool AllTab; // 0x448
};

struct UNavArea {
	float DefaultCost; // 0x28
	float FixedAreaEnteringCost; // 0x2c
	FColor DrawColor; // 0x30
	FNavAgentSelector SupportedAgents; // 0x34
	char bSupportsAgent0 : 1; // 0x38
	char bSupportsAgent1 : 1; // 0x38
	char bSupportsAgent2 : 1; // 0x38
	char bSupportsAgent3 : 1; // 0x38
	char bSupportsAgent4 : 1; // 0x38
	char bSupportsAgent5 : 1; // 0x38
	char bSupportsAgent6 : 1; // 0x38
	char bSupportsAgent7 : 1; // 0x38
	char bSupportsAgent8 : 1; // 0x39
	char bSupportsAgent9 : 1; // 0x39
	char bSupportsAgent10 : 1; // 0x39
	char bSupportsAgent11 : 1; // 0x39
	char bSupportsAgent12 : 1; // 0x39
	char bSupportsAgent13 : 1; // 0x39
	char bSupportsAgent14 : 1; // 0x39
	char bSupportsAgent15 : 1; // 0x39
};

struct ASkellyFortService {
	TArray<ASkellyFort*> SkellyForts; // 0x3e0
	USkellyFortListDataAsset* SkellyFortListDataAsset; // 0x520
	TArray<USkellyFortDataAsset*> AllFortsData; // 0x528
	USkeletonFortAIToggler* FortAIToggler; // 0x538
	FObjectMessagingDispatcher EventDispatcher; // 0x5d0
};

struct UClueConnectionConfig {
	TArray<FClueSiteTypeSupportedDescribedByEntry> CluesThatCanDescribeSites; // 0x28
	TArray<UClueDescriptorGenerator*> ClueGenerators; // 0x38
	TArray<UClueDestinationGenerator*> DestinationGenerators; // 0x48
};

struct UProvokeHitReactionStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UCameraAnimInst {
	UCameraAnim* CamAnim; // 0x28
	UInterpGroupInst* InterpGroupInst; // 0x30
	float PlayRate; // 0x54
	UInterpTrackMove* MoveTrack; // 0x68
	UInterpTrackInstMove* MoveInst; // 0x70
	UCurveFloat* BlendInCurve; // 0x78
	ECameraAnimPlaySpace PlaySpace; // 0x80
};

struct UBTDecorator_IsAtLocation {
	float AcceptableRadius; // 0x90
	bool bUseNavAgentGoalLocation; // 0x94
};

struct ASpectacleCapstan {
	float DisengagedRotationSpeed; // 0x7d0
	float DisengagedDropSpeed; // 0x7d4
	bool IsEngaged; // 0x7d8
};

struct UAthenaAISettings {
	FStringAssetReference AITypesAsset; // 0x38
	FStringAssetReference AISpawnContextListAsset; // 0x48
	int32_t FallbackAIDifficultyRank; // 0x58
	int32_t MaxNumOfSpawnedActors; // 0x5c
	int32_t MaxPlayerEquivalentAIsPerRegion; // 0x60
	int32_t MaxWorldAICostUnitsForWorld; // 0x64
	int32_t AIRegionCostUnitsForPlayer; // 0x68
	float CharacterNetRelevancy; // 0x6c
	float CharacterRegionDensityCheckTimer; // 0x70
	float CharacterWorldDensityCheckTimer; // 0x74
	float DistanceToPlayerToRaiseSpawnPriority; // 0x78
	float MinRetryingCanSpawnRequestTime; // 0x7c
	float MaxRetryingCanSpawnRequestTime; // 0x80
	float MinRetryingLocationCheckTime; // 0x84
	float MaxRetryingLocationCheckTime; // 0x88
	float CharacterAINoiseTickInterval; // 0x8c
	float PeriodicAINoiseComponentTickInterval; // 0x90
	float FaunaPlayerProximityDormancyRange; // 0x94
	float FaunaPlayerProximityTickTime; // 0x98
	float FaunaTimeOutOfPlayerProximityForDormancy; // 0x9c
	float DefaultNavAgentCapsuleRadius; // 0xa0
	float DefaultNavAgentCapsuleHalfHeight; // 0xa4
	float MinDelayBeforeRetryingUnsuccessfulWave; // 0xa8
	float MaxDelayBeforeRetryingUnsuccessfulWave; // 0xac
	FStringAssetReference AIEncounterServiceAssetClassFileLocation; // 0xb0
	FStringAssetReference AIEncounterGenerationServiceAssetClassFileLocation; // 0xc0
	FName AICharacterWaterInteractionCollisionProfileName; // 0xd0
};

struct ASwingMechanismActionProxy {
	float MaxAngle; // 0x418
	float MinAngle; // 0x41c
	float Damage; // 0x420
	EHealthChangedReason DamageReason; // 0x424
	TArray<FAllowedInteractableTypes> AllowedInteractableTypes; // 0x428
};

struct UAbandonedNoteClueDestinationContainerComponent {
	FClueDestinationChoice CurrentClueDestination; // 0xe8
	UAbandonedNoteClueTextIndexAssetMap* ClueTextIndexAssetMap; // 0xf8
	FString CompositeFormatString; // 0x100
	FText CurrentTitleText; // 0x110
	UAbandonedNoteClueTextChoiceSource* ClueTextChoiceSource; // 0x148
};

struct UMovieSceneStringSection {
	FStringCurve StringCurve; // 0xa0
};

struct UAIDioramaDesc {
	TArray<FAIDioramaRoleDesc> RoleList; // 0x28
	USceneDialogueData* DialogueData; // 0x38
};

struct USpawnPortalTaleStepDesc {
	UPortalDesc* PortalDesc; // 0x80
	FQuestVariableActor SpawnedPortal; // 0x88
};

struct UTaleQuestSelectEntryFromArrayStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UGameplayEffectExecutionCalculation {
	bool bRequiresPassedInTags; // 0x38
};

struct UMapBundleCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UGrantPagesStepFromLayoutsDesc {
	TArray<FStringAssetReference> Pages; // 0x80
};

struct UAssetListDataAsset {
	TArray<FStringAssetReference> AssetList; // 0x28
};

struct UPlayerActivityComponent {
	TArray<EHealthChangedReason> HealthChangeReasonsToTriggerLoseHealthActivity; // 0xd0
	TArray<UClass*> InstigatorsToTriggerLoseHealthActivity; // 0xe0
};

struct ASpireResource {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct URankDesc {
	uint32_t Grade; // 0xd8
};

struct UMerchantQuestItemPluralisationData {
	TArray<FText> ItemNames; // 0x28
};

struct UStatusResponseAIShipClampMaxTurnAngle {
	float ClampedMaxTurnAngle; // 0x30
};

struct UAggressiveGhostShipEncounterFormationsDataAsset {
	TArray<FAggressiveGhostShipEncounterFormationDescGroup> FormationDescGroups; // 0x28
};

struct UEditableTextWidgetStyle {
	FEditableTextStyle EditableTextStyle; // 0x30
};

struct UConditionalStatsTriggerType {
	FName UniqueTextIdentifier; // 0x28
};

struct AEmoteDice {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UTaleQuestUnionStep {
	TArray<UTaleQuestStep*> Steps; // 0x98
	UTaleQuestParallelStepDesc* Desc; // 0xa8
};

struct UMaterialAnimatorComponent {
	TArray<FMaterialAnimatorGroup> AnimationGroups; // 0xc8
	TArray<FMaterialAnimatorGroupInstance> AnimationGroupInstances; // 0xd8
};

struct UMobileInstancedStaticMeshComponent {
	int32_t MaxInstances; // 0x5f0
	TArray<FTransform> InstanceTransforms; // 0x600
	TArray<FMatrix> InstanceMatrices; // 0x610
	FBoxSphereBounds LocalBounds; // 0x620
	bool bBoundsBuilt; // 0x63c
	UPhysicsSerializer* PhysicsSerializer; // 0x640
};

struct APhasedClusterRoot {
	TArray<APawn*> Pawns; // 0x3d0
};

struct UMaterialExpressionLowResClouds {
	FExpressionInput Coordinates; // 0x70
};

struct UNPCDialogPredicateAtDamageTaken {
	int32_t ActorIdx; // 0x38
	float DamageThreshold; // 0x3c
};

struct UMechanismOneShotEvent {
	AActor* Owner; // 0x28
};

struct UParticleModuleLocationEmitterDirect {
	FName EmitterName; // 0x50
};

struct UParticleModuleMeshRotationRate_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x88
};

struct UPoseableMeshMemoryConstraintComponent {
	UMeshMemoryConstraintHandler* Handler; // 0x7a0
	TArray<FStringAssetReference> FallbackOverrideMaterials; // 0x7a8
	UMeshMemoryConstraintCategory* MeshFallbackCategory; // 0x7b8
	FStringAssetReference MeshReference; // 0x7c0
	int64_t CachedMeshResourceSize; // 0x7d0
	bool MemoryAccountedFor; // 0x7d8
	bool NeedMeshLoadOnServer; // 0x7d9
	UMeshMemoryConstraintBudget* BudgetToCountMemoryAgainstIfNoFallback; // 0x7e0
};

struct UTaleQuestSetNPCDialogKeyStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAggressiveGhostShipRewardsDataAsset {
	FAggressiveGhostShipRewardData CaptainRewards; // 0x28
	FAggressiveGhostShipRewardData FormationLeaderRewards; // 0x40
	FAggressiveGhostShipRewardData GruntRewards; // 0x58
	AShortRangeMarker* RewardMarker; // 0x70
};

struct UFlamesOfFateQuestInteractableComponent {
	FText DisplayName; // 0x130
	FText TakeFlameTooltipText; // 0x168
	FText LanternNotRaisedToolTipText; // 0x1a0
	FText NotWieldingFlameTooltipText; // 0x1d8
	FText CannotSetFlameTooltipText; // 0x210
	EFlameOfFateType FlameColour; // 0x248
};

struct UAICharacterAudioComponent {
	FWwiseEmitter Emitter; // 0x2b8
	UWwiseObjectPoolWrapper* WwiseObjectPoolWrapper; // 0x2d8
};

struct UTaleProgressStatueInteractableComponent {
	float HoldTime; // 0x120
	UNotificationInputId* ReturnToShipInteractionInputID; // 0x128
	UNotificationInputId* ReturnToShipInteractionReleasedInputID; // 0x130
	UNotificationInputId* ResumeFromTaleProgressInteractionInputID; // 0x138
	UNotificationInputId* ResumeFromTaleProgressInteractionReleasedInputID; // 0x140
	FText ResumeFromTaleProgressActionRuleDescription; // 0x148
	FText ResumeFromTaleProgressWithLargeItemActionRuleDescription; // 0x180
	ATaleProgressStatue* OwningStatue; // 0x1c8
	EInteractableState StatueInteractionState; // 0x1d0
};

struct USpawnActorStepDescBase {
	UClass* Actor; // 0x80
	FQuestVariableActorAssetType ActorType; // 0xa0
	bool TrackActor; // 0xb0
	bool AutomaticallyGatherForMigration; // 0xb1
	bool MarkAsCritical; // 0xb2
	FText CriticalActorLostMessage; // 0xb8
	FQuestVariableActor ActorVar; // 0xf0
};

struct UBTDecorator {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UWorldLocationVisitorComponent {
	float RevisitCooldown; // 0xd0
};

struct UCommodityEntitlementRedemptionAsset {
	TArray<FEntitlementToRedeemItems> CommoditiesForRedemption; // 0x28
};

struct UTaleQuestMultiTargetCompassRemoveTrackedLocationStepDesc {
	FQuestVariableGuid TargetID; // 0x80
};

struct APlayerMeleeWeapon {
	UInventoryItemComponent* InventoryItem; // 0x7a0
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7a8
	UParticleSystemComponent* TrailParticleSystem_FP; // 0x7b0
	UParticleSystemComponent* TrailParticleSystem_TP; // 0x7b8
	UMeleeWeaponDataAsset* DataAsset; // 0x7c0
	UInventoryManipulatorComponent* InventoryManipulator; // 0x7c8
	bool CanUseWeaponToBlock; // 0x7d0
	bool PreventCombosOnHealthChange; // 0x7d1
	float MaxAcceptableAttackTimeStampDelta; // 0x838
	float MaxAcceptableAttackLocationDelta; // 0x83c
	float MaxAcceptableAttackLocationOnShipDelta; // 0x840
	float MaxAcceptableAttackShipVelocityForLocation; // 0x844
	UMeleeAttackProcessorComponent* WieldersAttackProcessor; // 0x858
};

struct UTreasuryWaveDataAsset {
	TArray<UAIProgressiveWavesSpawner*> Waves1Player; // 0x28
	TArray<UAIProgressiveWavesSpawner*> Waves2Player; // 0x38
	TArray<UAIProgressiveWavesSpawner*> Waves3Player; // 0x48
	TArray<UAIProgressiveWavesSpawner*> Waves4Player; // 0x58
};

struct UMovieSceneEventTrack {
	char bFireEventsWhenForwards : 1; // 0x88
	char bFireEventsWhenBackwards : 1; // 0x88
	TArray<UMovieSceneSection*> Sections; // 0x90
};

struct UOnBuryAdjustFuseTimeScale {
	float FuseTimeScaleOnBury; // 0x28
};

struct AServerMigrationSerialisationDetailsTestsMigrationChildActorLinkedActor {
	UChildActorComponent* Component; // 0x3d0
};

struct UGlobalVoyageDirectorServiceSettings {
	TArray<FDirectorSettingEntry> DefaultGlobalVoyages; // 0x38
};

struct UAshenLordSummonAIAbilityParams {
	FVFXHandlerComponentParams FireShroudVFXParams; // 0xe8
	UVFXSpawnerComponent* FireShroudVFXSpawner; // 0x128
	FAshenLordFireShroudParams FireShroudParams; // 0x130
};

struct AGeyserManager {
	UGeyserManagerSetupDataAsset* GeyserManagerSetupData; // 0x3d0
	USceneComponent* Root; // 0x3d8
	EGeyserManagerState State; // 0x3e0
};

struct UFragileComponent {
	UFragileComponentDataAsset* FragileComponentDataAsset; // 0xc8
};

struct USetTaleProgressStepDesc {
	FQuestVariableActor TriggerVolume; // 0x80
};

struct UItemLoadoutComponent {
	int32_t MaxWeaponSlots; // 0xd8
	FItemLoadout ItemLoadout; // 0xe0
	FItemLoadoutComponentSlots LoadoutSlots; // 0x100
	TArray<UWeaponItemCategory*> WeaponSlots_ClientPredicted; // 0x120
};

struct UTaleQuestNumericSwitchStep {
	UTaleQuestNumericSwitchStepDesc* Desc; // 0x90
	UTaleQuestStep* CurrentStep; // 0x98
};

struct USwingMechanismCordRenderComponent {
	float Length; // 0x628
	FVector StartOffset; // 0x62c
	FVector EndOffset; // 0x638
};

struct UWaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct ASphereReflectionCapture {
	UDrawSphereComponent* DrawCaptureRadius; // 0x3d8
};

struct UComponentWithDerivedTestInterface {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UGameplayCueSet {
	TArray<FGameplayCueNotifyData> GameplayCueData; // 0x28
};

struct UTaleQuestSetCompassTargetBaseStepDesc {
	ETargetUpdateReason TargetUpdateReason; // 0x80
};

struct UDamageableComponent {
	FScriptMulticastDelegate OnApplyDamage; // 0xd8
	FScriptMulticastDelegate OnResetDamage; // 0xe8
	FScriptMulticastDelegate OnNonDamageableImpactReceived; // 0xf8
	FName FeatureFlag; // 0x108
	TArray<FDamageableVulnerabilityPair> Vulnerabilities; // 0x110
	bool BlockDamageVerification; // 0x120
	UDamageableVulnerabilityLayer* AddedVulnerabilityLayer; // 0x128
	TMap<FName, UDamageableVulnerabilityLayer*> VulnerabilityLayers; // 0x130
};

struct APickupActorMock {
	TScriptInterface<Class> MockWieldableItem; // 0x630
};

struct UCrewSpecificCutsceneComponent {
	TArray<FText> LocalisedNames; // 0xd8
	UCutsceneDataAsset* CutsceneAsset; // 0xe8
	AActor* CutSceneActor; // 0xf0
	AActor* CutsceneActorType; // 0xf8
	TScriptInterface<Class> CutsceneActorInterface; // 0x100
	float MaxPlayRange; // 0x110
	float DelayBeforeDequeueAttempt; // 0x114
};

struct ANetProxy {
	FScriptMulticastDelegate OnVisibilityChanged; // 0x3d0
	AActor* OwningActor; // 0x3e0
	UStaticMeshComponent* Mesh; // 0x3e8
	float MinimumNetRelevancyDistanceFraction; // 0x3f0
	float DepthCutOffForNonReplication; // 0x3f4
};

struct USoundNodeDistanceCrossFade {
	TArray<FDistanceDatum> CrossFadeInput; // 0x38
};

struct ARetrieveBootyActor {
	USceneComponent* Root; // 0x3e0
	URetrieveBootyHandInComponent* RetrievalComponent; // 0x3e8
	USkeletalMeshComponent* Mesh; // 0x3f0
	UActorActivationComponent* ActorActivationComponent; // 0x3f8
	UDitherComponent* DitherComponent; // 0x400
	UParticleSystemComponent* BeaconComponent; // 0x408
	UAIPartsRetrievalComponent* AIPartsRetrievalComponent; // 0x410
	UAIPartsCategory* AIParts; // 0x418
	TArray<FMermaidAnimMapping> AnimMap; // 0x420
	float SurfaceTolerance; // 0x430
	float LocationBlendSpeed; // 0x434
	float SurfaceStickSpeed; // 0x438
	UWwiseObjectPoolWrapper* SfxPool; // 0x440
	UWwiseEvent* PlaySongEvent; // 0x448
	UWwiseEvent* StopSongEvent; // 0x450
	UBootyStorageSettings* BootyStorageSettings; // 0x458
	FName LocalIsland; // 0x600
	UActionRulesComponent* ActionRulesComponent; // 0x710
};

struct UAbilityTask_WaitGameplayTagAdded {
	FScriptMulticastDelegate Added; // 0x88
};

struct UTaleQuestGetPhasedVersionOfActorFromAssetMapStep {
	UExistingToPhasedNPCIndexAssetMap* NPCIndexAssetMap; // 0x90
};

struct UContestSelectIslandForItemStepDesc {
	FQuestVariableContestIslandArchetype IslandArchetype; // 0x80
	FQuestVariableInt NumberOfChests; // 0x90
	FQuestVariableNameArray PreviousIslands; // 0xa0
	FQuestVariableNameArray SelectedIslands; // 0xb0
};

struct UNPCOnSurfaceVODataAsset {
	TArray<FNPCOnSurfaceVOGroup> VOGroups; // 0x28
};

struct UOceanCrawlerAnimationInstance {
	FOceanCrawlerAnimationDataStructure LoadedAnimations; // 0x458
	FActorVelocityData MovementData; // 0x4e8
	float CurrentDirection; // 0x500
	FAthenaAnimationWeapon AttackAnims; // 0x508
	bool UseDefaultAnimations; // 0x5c0
	bool AnimationsLoaded; // 0x5c1
	bool SporeBreathActive; // 0x5c2
	FName PropAttachmentSocket; // 0x5c4
	FCustomAnimationMontageStateMachine MontagePlayer; // 0x5d0
	FHitReactionAnimationState HitReacts; // 0x6a8
};

struct UShipAnnouncementService {
	UWorld* WorldPtr; // 0x30
	float ShipAnnouncementCooldownDuration; // 0x38
	float ShipAnnouncementViewThresholdDegrees; // 0x3c
	float ShipAnnouncementDistThreshold; // 0x40
	FShipAnnouncementCache ShipAnnouncementCache; // 0x48
};

struct AAshenLordVolcano {
	UAshenLordVolcanoSetupDataAsset* VolcanoSetupData; // 0x3d0
};

struct ULightningComponent {
	ULightningDataAsset* LightningDataAsset; // 0xc8
	UExplosionComponent* CachedExplosionComponent; // 0xd0
	UStaticMeshComponent* BaseCloudMeshComponent; // 0xd8
	FActiveLightning ActiveLightning[0x2]; // 0xe0
	TArray<UStaticMeshComponent*> LightningMeshComponents; // 0x270
};

struct UItemFirstDroppedOnShipConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UObtainMapPieceOnWieldComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTDecorator_ReachedMoveGoal {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct AIslandData {
	UIslandAnnouncementComponent* IslandAnnouncementComponent; // 0x3d8
	UIslandBoundsComponent* IslandBoundsComponent; // 0x3e0
	USphereComponent* IslandTriggerComponent; // 0x3e8
	USphereComponent* IslandSafeZoneComponent; // 0x3f0
	FName IslandName; // 0x3f8
	EIslandType IslandType; // 0x400
	TArray<ASpawnLocation*> AssociatedSpawnLocations; // 0x408
	TArray<AShipSpawnLocation*> AssociatedShipSpawnLocations; // 0x418
	FObjectMessagingDispatcher ObjectMessageDispatcher; // 0x428
	FVector CompassDirectionIslandCentre; // 0x4c8
	UAICreatureMovementModifierParamsDataAsset* PetMovementParamsData; // 0x4d8
	AIslandSalvageSpawnerManager* IslandSalvageSpawnerManager; // 0x508
};

struct UAssociateActorToCrewTaskStepDesc {
	UTaleQuestStepDesc* TaskDesc; // 0x80
	FQuestVariableActor ActorToAssociate; // 0x88
};

struct UTaleQuestCheckpointService {
	UTaleQuestCheckpointServiceDesc* Desc; // 0x60
};

struct UPetOwnerComponent {
	AItemInfo* PetInfo; // 0xe0
};

struct USoundWave {
	int32_t CompressionQuality; // 0x50
	char bLooping : 1; // 0x54
	char bStreaming : 1; // 0x54
	int32_t StreamingPriority; // 0x58
	char bMature : 1; // 0x5c
	char bManualWordWrap : 1; // 0x5c
	char bSingleLine : 1; // 0x5c
	ESoundGroup SoundGroup; // 0x60
	FString SpokenText; // 0x68
	float Volume; // 0x78
	float Pitch; // 0x7c
	int32_t NumChannels; // 0x80
	int32_t SampleRate; // 0x84
	int32_t RawPCMDataSize; // 0x88
	TArray<FSubtitleCue> Subtitles; // 0x90
	TArray<FLocalizedSubtitle> LocalizedSubtitles; // 0xa0
};

struct UAnimationDataStoreComponent {
	UAnimationDataStoreWeakReferenceAsset* AnimationDataStoreWeakReferences; // 0xd0
};

struct UTaleQuestStoreClueOnActorStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UPetHangoutSpotSelectorComponent {
	UPetHangoutSpotComponent* HangoutSpotPositionComponent; // 0xc8
	UPetHangoutSpotsDataAsset* HangoutParamsDataAsset; // 0xd0
	UPetDesc* PetType_Cached; // 0x148
};

struct ULookAtOffsetComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UAssociateActorToCrewTaskStep {
	UAssociateActorToCrewTaskStepDesc* Desc; // 0x90
	UTaleQuestStep* TaskStep; // 0x98
};

struct UMerchantQuestItemData {
	UMerchantQuestItemPluralisationData* DisplayNameLookup; // 0x28
	FRewardId HandInOnTimeRewardId; // 0x30
	UItemDesc* CrateDesc; // 0x38
	TArray<FMerchantQuestItemDescAndReward> AcceptableAlternativeCrateItemData; // 0x40
	UTexture* IconImage; // 0x50
	UFaunaSpecies* FaunaSpecies; // 0x58
	UFaunaBreed* FaunaBreed; // 0x60
	UPopUpMessageDesc* CrateFilledPopupDesc; // 0x68
	bool IsOnlyFoundInWorld; // 0x70
};

struct UExporter {
	UObject* SupportedClass; // 0x28
	UObject* ExportRootScope; // 0x30
	TArray<FString> FormatExtension; // 0x38
	TArray<FString> FormatDescription; // 0x48
	int32_t PreferredFormatIndex; // 0x58
	int32_t TextIndent; // 0x5c
	char bText : 1; // 0x60
	char bSelectedOnly : 1; // 0x60
	char bForceFileOperations : 1; // 0x60
};

struct UBTService_RunEQSQueryOnActorMovement {
	FBlackboardKeySelector MovingActorKey; // 0xe8
	float MinimumActorMovementToRunEQS; // 0x110
	float MinimumActorVelocityChangeToRunEQS; // 0x114
	bool RunEQSForYawChanges; // 0x118
	float MinimumActorYawChangeToRunEQS; // 0x11c
};

struct UTrackResponseCoordinatorStepDesc {
	FQuestVariableUObject CutsceneResponseCoordinator; // 0x80
};

struct UTaleQuestGenerateDebrisTypeForVoyageRankStepDesc {
	FQuestVariableInt VoyageRank; // 0x80
	FQuestVariableActorAssetTypeArray DebrisTypeArray; // 0x90
	UDebrisForVoyageRankDescAsset* DebrisForRankDescAsset; // 0xa0
};

struct ATestProjectileWeapon {
	FTestProjectileWeaponParameters TestProjectileWeaponParameters; // 0xa58
	int32_t RequestDeniedCount; // 0xa5c
	int32_t FireProjectilesCallCount; // 0xa60
	int32_t HitPredictedCount; // 0xa64
	int32_t HitAuthorityCount; // 0xa68
	int32_t ProcessHitsAuthorityCallCount; // 0xa6c
	bool OnWeaponFiredCalled; // 0xa70
	FGuid AttackId; // 0xa74
	TArray<AActor*> ActorsHits; // 0xa88
	TArray<UPhysicalMaterial*> PhysicsMaterials; // 0xa98
	FProjectileAim LastProjectileAim; // 0xab0
};

struct UPhysicsConstraintComponent {
	AActor* ConstraintActor1; // 0x2b0
	FConstrainComponentPropName ComponentName1; // 0x2b8
	AActor* ConstraintActor2; // 0x2c0
	FConstrainComponentPropName ComponentName2; // 0x2c8
	UPhysicsConstraintTemplate* ConstraintSetup; // 0x2e0
	FScriptMulticastDelegate OnConstraintBroken; // 0x2e8
	FConstraintInstance ConstraintInstance; // 0x300
};

struct UTaleQuestCommonToolServiceDesc {
	TArray<UItemDesc*> ToolDescs; // 0x30
};

struct UIsItemOwnedStatCondition {
	EItemOwnershipType OwnershipType; // 0x30
};

struct USectionFullyExhaustedConditional {
	FString SectionName; // 0x30
};

struct UMovieSceneVisibilityTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct UVideoCaptureSettings {
	bool bUseCompression; // 0x30
	float CompressionQuality; // 0x34
	FString VideoCodec; // 0x38
};

struct UFireworksSettingsDataAsset {
	float LoadedFuseTimer; // 0x28
	UWwiseObjectPoolWrapper* FuseSoundWisePool; // 0x30
	UWwiseEvent* FuseActivateSoundPlayEvent; // 0x38
	UWwiseEvent* FuseSoundPlayEvent; // 0x40
	UWwiseEvent* FuseSoundStopEvent; // 0x48
	UObject* FuseParticleSystem; // 0x50
	FStringAssetReference FuseMeshAssetReference; // 0x58
};

struct AShip {
	FShipPartConnections PartConnections; // 0x488
	UStaticMeshComponent* BoatCollision; // 0x520
	UBasisComponent* BoatBasis; // 0x528
	UStaticMeshComponent* OverlapHit; // 0x530
	UStaticMeshComponent* BelowDeckVolume; // 0x538
	UStaticMeshComponent* CabinVolume; // 0x540
	FObjectMessagingDispatcher ObjectMessageDispatcher; // 0x548
	UTeleportLocationRetrievalComponent* TeleportLocationRetrievalComponent; // 0x5e8
	UChildActorComponent* ShipInternalWaterComponent; // 0x5f0
	USinkingComponent* SinkingComponent; // 0x5f8
	UShipHullCollisionComponent* HullCollisionComponent; // 0x600
	UTetherCustomisationComponent* TetherCustomisationComponent; // 0x608
	UShipStuckDetectionComponent* StuckDetectionComponent; // 0x610
	UStatusEffectManagerComponent* StatusEffectManagerComponent; // 0x618
	UStatusEffectPersistenceComponent* StatusEffectPersistenceComponent; // 0x620
	UShipCurseComponent* ShipCurseComponent; // 0x628
	UInstancedNavMeshComponent* InstancedNavMeshComponent; // 0x630
	FWaterBuoyancy Buoyancy; // 0x640
	UCrewOwnershipComponent* CrewOwnershipComponent; // 0x770
	UOnboardCharacterTrackerComponent* OnboardCharacterTrackerComponent; // 0x778
	URewindComponent* RewindComponent; // 0x780
	UShipLiveryComponent* LiveryComponent; // 0x788
	UReplicatedShipPartCustomizationComponent* HullLiveryCustomizationComponent; // 0x790
	UReplicatedShipPartCustomizationComponent* SailsLiveryCustomizationComponent; // 0x798
	UReplicatedShipPartCustomizationComponent* CannonEnchantmentCustomizationComponent; // 0x7a0
	URammerType* RammerType; // 0x7a8
	UGroupedInteractableAreaComponent* GroupedInteractableAreaComponent; // 0x7b0
	FShipConfigurationSettings ShipConfigurationSettings; // 0x7b8
	float RainFillRate; // 0x7d0
	float RainTimePerDrop; // 0x7d4
	float RainDropScale; // 0x7d8
	float RainDropRadius; // 0x7dc
	float RainStrengthMinimumToFillShip; // 0x7e0
	TArray<FVector> AITargetVisibilityPoints; // 0x7e8
	FAchievementSinkAnotherCrewsShip AchievementSinkOtherCrewsShip; // 0x7f8
	FAchievementSailThroughStormAtNightWithLightsOff AchievementSailThroughStormAtNightWithLightsOff; // 0x810
	FAchievementSailCloseToShipWithoutFiring AchievementSailCloseToShipWithoutFiring; // 0x890
	FAchievementSailFullyWithTheWind AchievementSailFullyIntoTheWind; // 0x8a8
	FAchievementSailWithFlameOfFateColoursAboard AchievementSailWithFlameOfFateColoursAboard; // 0x8b0
	UImpulseThrottlerComponent* ImpulseThrottlerComponent; // 0x9a8
	USphereComponent* ReturnToShipVolume; // 0x9b0
	float ReturnToShipVolumeRadius; // 0x9b8
	EBowSplashTickReturnType BowSplashReturnType; // 0x9bc
	FShipDynamics ShipDynamics; // 0x9c0
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0xa60
	UShipSinkingParametersDataAsset* AdventureSinkingData; // 0xa80
	UShipSinkingParametersDataAsset* ArenaSinkingData; // 0xa88
	FBuoyancySampleMovement BuoyancySampleMovement; // 0xa90
	FBuoyancySampleMovement SurfacingBuoyancySampleMovement; // 0xaf8
	FBuoyancySampleMovement DivingBuoyancySampleMovement; // 0xb60
	UShipNosediveBrake* NosediveBrake; // 0xbc8
	UShipRolloverCorrector* RolloverCorrector; // 0xbd0
	UBowSplashContainer* BowSplashContainer; // 0xbd8
	UBowSplashContainer* SurfacingBowSplashContainer; // 0xbe0
	UBowSplashContainer* DivingBowSplashContainer; // 0xbe8
	bool DisableSailingBowSplashesWhenDiving; // 0xbf0
	ULocatorContainer* ShipLocators; // 0xbf8
	FVector LocalSailForceApplicationOffset; // 0xc00
	UCurveFloat* ShipSpeedToChoppinessScalarCurve; // 0xc10
	UCurveFloat* HullSubmergedValueRemapping; // 0xc18
	float FakeBuoyancyZOffsetScalarSpringAccel; // 0xc20
	float PositionSamplerTimeWindow; // 0xc24
	FName ClientConvexHullCollisionProfile; // 0xc28
	float EmpiricalMaxSpeedInMPS; // 0xc30
	FTransform BrigSpawnLocation; // 0xc40
	float WaterStrengthThresholdForStormDamage; // 0xc70
	AActor* FirePropagationBlueprint; // 0xc78
	UShipFirePropagationComponent* FirePropagationComponent; // 0xc80
	FEncounterParams SightingEncounterParams; // 0xcf0
	FEncounterParams CloseProximityEncounterParams; // 0xcfc
	UShipCategory* ShipCategoryObject; // 0xd18
	UShipSize* ShipSizeObject; // 0xd20
	UShipType* ShipTypeObject; // 0xd28
	TArray<AActor*> DamageableChildActors; // 0xd30
	ACrewShipManifest* CrewShipManifest; // 0xd40
	UObject* HullDamage; // 0xda8
	USurfaceWaterComponent* DeckWater; // 0xdb0
	UWaterExposureComponent* WaterExposureComponent; // 0xdb8
	UShroudBreakerTrackerComponent* ShroudBreakerTrackerComponent; // 0xdc0
	FNetTimeStampCalculator MovementTimeStamp; // 0xdc8
	float StormStrainWeight; // 0xf2c
	float WorldEdgeWeight; // 0xf30
	float TetherMassInertiaScaleWhenAnchored; // 0xf34
	FStrainDamage StormStrainDamage; // 0xf38
	FStrainDamage WorldEdgeDamage; // 0xf60
	FStrainDamage ScuttleDamage; // 0xf88
	FVector2D WorldEdgeDamageRange; // 0xfb0
	float ScuttleForceSinkTime; // 0xfb8
	ANetProxy* ProxyClass; // 0xfc0
	bool HasEverStartedSailing; // 0xfc9
	bool EmissaryFlagActive; // 0xfca
	EShipSurfacingState SurfacingState; // 0xfcb
	TArray<UMobileInstancedStaticMeshComponent*> InstancedMeshes; // 0xfd0
	float ScuttleTime; // 0x1460
};

struct UDestroySpawnedActorStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UChainLightningSettingsAsset {
	FChainLightningParameters ChainLightningParameters; // 0x28
};

struct ALODActor {
	UStaticMeshComponent* StaticMeshComponent; // 0x3d0
	TArray<AActor*> SubActors; // 0x3d8
	float LODDrawDistance; // 0x3e8
	int32_t LodLevel; // 0x3ec
	TArray<UObject*> SubObjects; // 0x3f0
};

struct UBTDecorator_Cooldown {
	float CoolDownTime; // 0x68
};

struct UIslandFaunaSpawnComponent {
	UIslandFaunaSettings* FaunaSettings; // 0x4e0
	TArray<UAIFaunaSpawner*> FaunaSpawners; // 0x4e8
};

struct UMaterialExpressionCausticTextureCoordinate {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UMaterialExpressionEyeAdaptation {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UMaterialExpressionLightmapUVs {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UMaterialVectorParameterBlend {
	FLinearColor Inactive; // 0x60
	FLinearColor Active; // 0x70
};

struct URecastNavMeshDataChunk {
	FName NavigationDataName; // 0x28
};

struct ALegendaryMerchantCrateItemInfoMock {
	TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry> FaunaBreedRarity; // 0x710
	AActor* CurrentShip; // 0x778
};

struct UTaleQuestToolService {
	UTaleQuestToolServiceDesc* ServiceDesc; // 0x60
	TArray<UItemDesc*> WieldableDescs; // 0x68
};

struct URemoveMechanismTriggerStep {
	URemoveMechanismTriggerStepDesc* Desc; // 0x90
};

struct ASkellyFort {
	TArray<USkellyFortGameEventType*> AllowedGameEventTypes; // 0x3e8
	FName IslandName; // 0x3f8
	ASkeletonFortDoor* FortDoor; // 0x400
	APanicTeleportVolume* FortVaultTeleportVolume; // 0x408
	UAIEncounterGenerationRecipeRankOrderList* AIEncounterGenerationRecipeRankOrderListOverride; // 0x410
	FWwiseEmitter SkellyFortEmitter; // 0x538
	float ServerMigrationExclusionRadius; // 0x558
	FVector SkullCloudLoc; // 0x55c
	float SkullCloudCloseProximityRotation; // 0x568
	UAIBountySpawner* Spawner; // 0x570
	AGameplayEventSignal* SkullCloud; // 0x710
	TArray<UFortItemSpawnComponent*> Rewards; // 0x718
	TArray<FAIBountySpawnerWaveLocation> WaveSpawnerLocations; // 0x728
	float SkullCloudMaxPitch; // 0x738
	FEncounterParams SightingEncounterParams; // 0x73c
	FEncounterParams CloseEncounterParams; // 0x748
	FString SubjectName; // 0x758
	FString FortUniqueId; // 0x768
	UWwiseEvent* WaveGroupSpawnedEvent; // 0x778
	UWwiseEvent* FinalWaveGroupSpawnedEvent; // 0x780
	UWwiseEvent* FortCompleteEvent; // 0x788
	UOverlapTriggerComponent* ActionAudioZoneComponent; // 0x798
	UOverlapTriggerComponent* AnticipationAudioZoneComponent; // 0x7a0
	USkellyFortGameEventType* ActiveFortType; // 0x7a8
	TArray<FAdditionalCaptainTarget> SpawnedAdditionalCaptainsData; // 0x7b0
};

struct AAthenaGhostPlayerCharacter {
	UStreamingLocationComponent* StreamingLocationComponent; // 0x1ac0
	AGhostShipTickManager* GhostShipTickManager; // 0x1b58
};

struct ASeatCollection {
	USceneComponent* Root; // 0x3e0
};

struct UWeightedAnimationLoadOnDemandDataAsset {
	TArray<FWeightedAnimationData> WeightedAnimationList; // 0x28
	UAnimSequence* FallBackAnimation; // 0x38
};

struct UMaterialExpressionCameraVectorWS {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct AShipAudio {
	AShip* ParentShip; // 0x3e8
};

struct AGameplayDebuggingReplicator {
	FString DebugComponentClassName; // 0x3d0
	FString DebugComponentHUDClassName; // 0x3e0
	FString DebugComponentControllerClassName; // 0x3f0
	int32_t MaxEQSQueries; // 0x400
	UGameplayDebuggingComponent* DebugComponent; // 0x408
	APlayerController* LocalPlayerOwner; // 0x410
	AActor* LastSelectedActorToDebug; // 0x418
	bool bIsGlobalInWorld; // 0x420
	bool bAutoActivate; // 0x421
	bool OverHead; // 0x422
	bool Basic; // 0x423
	bool BehaviorTree; // 0x424
	bool EQS; // 0x425
	bool EnableEQSOnHUD; // 0x426
	int32_t ActiveEQSIndex; // 0x428
	bool Perception; // 0x42c
	bool GameView1; // 0x42d
	bool GameView2; // 0x42e
	bool GameView3; // 0x42f
	bool GameView4; // 0x430
	bool GameView5; // 0x431
};

struct UWaitForClueCollectedStep {
	UClueDescriptor* ClueDesc; // 0x90
	AActor* ClueActor; // 0x98
};

struct UStorageContainerContentSpawner {
	TArray<FStorageContainerContentSpawnerEntry> Entries; // 0x28
};

struct UGameplayTask {
	FName InstanceName; // 0x28
};

struct UAbilityTask_WaitMovementModeChange {
	FScriptMulticastDelegate OnChange; // 0x68
};

struct UMaterialExpressionTextureSampleParameter2D {
	FName ParameterName; // 0x1a8
	FGuid ExpressionGUID; // 0x1b0
	FName Group; // 0x1c0
};

struct UTaleQuestGenerateCluePointingToSiteStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UPremiumCatalogOfferDataAsset {
	UCatalogOfferDataAsset* Offer; // 0x108
};

struct UButtonWidgetStyle {
	FButtonStyle ButtonStyle; // 0x30
};

struct UIsExcludedFromSeasonProgressionStatCondition {
	UStatConditionTargetSelector* TargetSelector; // 0x28
};

struct ACloudSystem {
	FCloudDomeParameters CloudDome; // 0x3d0
	FCloudVisualParameters CloudVisuals; // 0x3f8
	FCloudTileParameters CloudTileGeneration; // 0x468
	FCloudWeatherParameters CloudWeather; // 0x488
	TArray<FCloudTypeNormalizedWeight> NormalizedCloudWeights; // 0x4b0
	FVector2D CurrentWindAngleAndSpeed; // 0x4c0
	float CloudSystemMaxActiveHeight; // 0x4c8
	float CloudSystemMinActiveHeight; // 0x4cc
	int32_t CloudTileGeneratedNumber; // 0x4d0
	bool CloudSystemIsActive; // 0x4d4
	TArray<FTiledCloudProperties> CloudTile; // 0x4e0
	FVector2D GlobalCloudTileDisplacement; // 0x4f0
	FVector2D TileOffsets[0x4]; // 0x4f8
	float CloudTileScale; // 0x518
	bool AreCloudsPossible; // 0x51c
};

struct UUnmanagedSalvageItemSpawnComponent {
	TArray<FIslandItemSpawnLocationData> IslandSalvageLocationData; // 0x4e0
	float GlobalIslandChanceToSpawn; // 0x4f0
	float MinimumZOffSet; // 0x4f4
	float MaximumZOffset; // 0x4f8
	float MinimumRoll; // 0x4fc
	float MaximumRoll; // 0x500
	float MinimumPitch; // 0x504
	float MaximumPitch; // 0x508
	bool SunkenItem; // 0x50c
	UIslandItemDataAsset* SpawnLocationType; // 0x510
	FWeightedProbabilityRangeOfRanges SpawnedContainerContents; // 0x518
};

struct UAnimNotify_DitherActor {
	EDitherFadeSetting FadeSetting; // 0x38
	float FadeTime; // 0x3c
};

struct AClientOnlyTestActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct AAshenLordEncounter {
	UAISpawner* AshenLordSpawner; // 0x458
	UAIDioramaController* AIDioramaController; // 0x460
	AGeyserManager* RewardGeyserManager; // 0x468
	UAshenLordEncounterParams* Params; // 0x470
	FPlayerStat SpecificAshenLordDefeatedStat; // 0x61c
	UPlayerProximityObservedSpawnContextProvider* ObservingContextProvider; // 0x670
	UAIProximityPlayerTracker* ProximityPlayerTracker; // 0x678
	AActor* AshenLordMusicZone; // 0x680
};

struct UAthenaAICharacterControllerParamsDataAsset {
	bool IndividualOverrideUseRVOAvoidance; // 0x100
	bool IndividualUseRVOAvoidance; // 0x101
	bool IndividualOverridePrioritiseInteractablesBeforeEnemies; // 0x102
	bool IndividualPrioritiseInteractablesBeforeEnemies; // 0x103
	UCurveFloat* IndividualDistanceInMToCannonShotHitChanceCurve; // 0x108
	TArray<FAIStrategyMovementProperties> IndividualAIStrategyMovementProperties; // 0x110
	TArray<FItemCategoryAIStrategyMovementPropertiesOverride> IndividualItemCategoryAIStrategyMovementPropertiesOverrides; // 0x120
	FAthenaAICharacterCannonTargetingParams IndividualCannonTargetingParams; // 0x130
	TArray<FAthenaAICharacterControllerItemCategoryProjectileEffectivenessProperties> IndividualWieldedItemProjectileEffectivenessProperties; // 0x140
	TArray<FAthenaAICharacterControllerItemCategoryNamedParams> IndividualWieldedItemOverrideNamedControllerParams; // 0x150
	TArray<FAthenaAIItemParamValue> IndividualNamedItemParams; // 0x160
	TArray<FAthenaAICharacterControllerSpawnItemDescForItemCategory> IndividualSpawnItemDescForItemCategories; // 0x170
	bool UseDamageBasedAbilityStages; // 0x180
	TArray<float> HealthStages; // 0x188
	TArray<FAthenaAIAbilityDamageStage> IndividualDamageBasedAIAbilityStages; // 0x198
	TArray<UAthenaAIAbilityParams*> IndividualAIAbilityParams; // 0x1a8
	TArray<FAthenaAIEngageEnemyData> IndividualNonItemEngageOptions; // 0x1b8
	FStringAssetReference IndividualAnimationDataOverrideAsset; // 0x1c8
	FStringAssetReference IndividualCustomAnimationAsset; // 0x1d8
	bool IndividualOverrideNoInitialItem; // 0x1e8
	bool IndividualNoInitialItem; // 0x1e9
	bool IndividualOverrideBeginFleeing; // 0x1ea
	bool IndividualBeginFleeing; // 0x1eb
	UEnvQuery* IndividualFleeingEQS; // 0x1f0
};

struct ADebugTimeService {
	FTimespan GameWorldTimeOffset; // 0x408
	uint32_t TimeScalar; // 0x414
	uint32_t NumberOfDaysInEachGameMonth; // 0x418
	double ServiceTimeQueryRapidFrequencyOffsetMax; // 0x420
	float ServiceTimeQueryRapidFrequencyInSeconds; // 0x428
	float ServiceTimeQueryFrequencyInSeconds; // 0x42c
	float ClientTimeUpdateFrequencyInSeconds; // 0x430
	float SunriseTimeHours; // 0x434
	float SunsetTimeHours; // 0x438
	float LocalTimeUpdateAdjustMaxTimeDelta; // 0x43c
	float MinLocalTimeUpdateAdjustPercentageToSlowDown; // 0x440
	float MaxLocalTimeUpdateAdjustPercentageToSlowDown; // 0x444
	float MinLocalTimeUpdateAdjustPercentageToSpeedUp; // 0x448
	float MaxLocalTimeUpdateAdjustPercentageToSpeedUp; // 0x44c
	uint32_t MaxNumReplicatedTimeEntriesToAverage; // 0x450
	FReplicatedAuthoritativeTime ReplicatedServerTime; // 0x4a0
};

struct UAbilityTask_WaitGameplayTagRemoved {
	FScriptMulticastDelegate Removed; // 0x88
};

struct UFrontendCameraComponent {
	FScriptMulticastDelegate EnteredEngageState; // 0xc8
	FScriptMulticastDelegate EnteredShipSelectState; // 0xd8
	FScriptMulticastDelegate StartMapTableAnimation; // 0xe8
	FScriptMulticastDelegate SkipMapTableAnimation; // 0xf8
	FScriptMulticastDelegate SetMapTableAnimationPlaybackRate; // 0x108
	FScriptMulticastDelegate GoToPirateSelectCamera; // 0x118
	FScriptMulticastDelegate OnArenaTutorialAnimationStart; // 0x128
	FScriptMulticastDelegate OnArenaTutorialAnimationEnd; // 0x138
	FScriptMulticastDelegate SkipArenaTutorialAnimation; // 0x148
};

struct UOceanCrawlerAnimationServerData {
	UAnimInstance* AnimInstanceType; // 0x30
	float MaxSpawnAnimDuration; // 0x38
	float MaxSpawnOnShipAnimDuration; // 0x3c
	float MaxSpawnBoardingAnimDuration; // 0x40
};

struct UCargoRunQuestRandomRequiredItemsDataAsset {
	TArray<FCargoRunQuestCategoryGroup> CategoryGroups; // 0x28
};

struct UWieldableItemVfxComponent {
	UParticleSystemComponent* ActiveVfx; // 0xc8
	UObject* WieldedVfxTemplate; // 0xd0
};

struct ULookAtOffsetInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UFishingSetupDataAsset {
	float CastDistanceMin; // 0x28
	float CastDistanceMax; // 0x2c
	float PreCastTimeForMaxCastDistance; // 0x30
	float DistanceRequiredToReelInToCatchTheFish; // 0x34
	float MinFloatDistanceFromPlayer; // 0x38
	float MaxFishSpawnDepth; // 0x3c
	float CastingThrowDurationAtMinDistance; // 0x40
	float CastingThrowDurationAtMaxDistance; // 0x44
	float FishSpawnHitDetectionHalfExtentXY; // 0x48
	float FishSpawnHitDetectionHalfExtentZ; // 0x4c
	FWeightedProbabilityRangeOfRanges TimeBeforeAppearing; // 0x50
	float DelayBeforeTrackingFloat; // 0x80
	float MaxDistanceFromFloatBeforeFishGivesUp; // 0x84
	FWeightedProbabilityRangeOfRanges TimeSpentBiting; // 0x88
	float FloatReelingMoveSpeedWhenNoFishOnLine; // 0xb8
	float ReelingAnimationMaxSpeedWhenNoFishOnLine; // 0xbc
	float ReelingAnimationSpeedChangePerSec; // 0xc0
	float ReelingAnimationStoppingSpeedChangePerSec; // 0xc4
	float MaxReelingWhenFailedTime; // 0xc8
	float FishingMiniGameLeftRightInputAngle; // 0xcc
	float FishingMiniGameBattlingAngle; // 0xd0
	float FishingMiniGameInputThreshold; // 0xd4
	float TimeBeforeTurningOnFishHits; // 0xd8
	float FOVChangeWhenBattling; // 0xdc
	float FOVBlendSpeedWhenBattling; // 0xe0
	float TimeBeforeDestroyingFishAndAwardingPlayer; // 0xe4
	float CameraYawFishMaxOffset; // 0xe8
	float CameraMaxYaw; // 0xec
	float CameraYawSpringAcc; // 0xf0
	float CameraYawSpringAccWhenResetting; // 0xf4
	float CameraExtraPitchWhenPullingBack; // 0xf8
	float CameraExtraPitchSpringAcc; // 0xfc
	float CameraExtraPitchSpringAccWhenResetting; // 0x100
	float BlendBackFromDisabledCameraDuration; // 0x104
	float RodDirectionBendMaxAngleOfFishFromFromRod; // 0x108
	float RodDirectionMaxBendLeft; // 0x10c
	float RodDirectionMaxBendRight; // 0x110
	float ReturnFromFreeLookSpringAcc; // 0x114
};

struct UStaticMeshVoteVisualiserComponent {
	TArray<FStaticMeshVoteIndicator> VoteIndicators; // 0xe8
	float VoteAnimationTime; // 0xf8
};

struct UTunnelsOfTheDamnedService {
	UTunnelsOfTheDamnedServiceParams* Params; // 0x30
	UWorld* World; // 0x38
	TArray<FTunnelOfTheDamnedInstance> TunnelInstances; // 0x40
	FTelemetryFragmentListenerHandle OnTunnelOfTheDamnedBaseTelemetryFragmentListenerHandle; // 0x140
};

struct UPlayerMerchantContractsComponent {
	TArray<FPlayerMerchantContract> Contracts; // 0xd0
};

struct UAISkillsetProgressionTypeList {
	TArray<UAISkillsetRankProgression*> AllProgressions; // 0x28
};

struct UMysteriousNotesRadialContentRule {
	float RadialIconScale; // 0x78
	FVector2D RadialIconOffset; // 0x7c
	TArray<FGuid> MappedNoteIDs; // 0xd8
};

struct UProjectileWeaponValidationFunctionLibrary {
	float AimPositionValidationTolerance; // 0x28
};

struct UScrollBoxWidgetStyle {
	FScrollBoxStyle ScrollBoxStyle; // 0x30
};

struct UMusicZoneComponent {
	float InnerRadius; // 0x2b8
	float OuterRadius; // 0x2bc
	FName LocationRTPC; // 0x2c0
	bool LocalRTPC; // 0x2c8
	UWwiseEvent* PlayEvent; // 0x2d0
	UWwiseEvent* StopEvent; // 0x2d8
	TArray<UWwiseEvent*> OneShotEvents; // 0x2e0
	UWwiseObjectPoolWrapper* EmitterPool; // 0x2f0
	bool DisableAfterPlayThrough; // 0x2f8
	bool ActivateOnBeginPlay; // 0x2f9
	FScriptMulticastDelegate OnMusicZoneStarted; // 0x300
};

struct AGameplayAbilityTargetActor_ActorPlacement {
	UObject* PlacedActorClass; // 0x520
	UMaterialInterface* PlacedActorMaterial; // 0x528
};

struct AVoyageProposalContainerInteraction {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct USceneDialogueSection {
	FString Name; // 0x28
	bool IsPool; // 0x38
	uint32_t PoolPlayLimit; // 0x3c
	float TimeDelayBetweenText; // 0x40
	TArray<USceneDialoguePointWithConditional*> Points; // 0x48
};

struct UCameraPitchModifier {
	char bDebug : 1; // 0x28
	char bExclusive : 1; // 0x28
	char Priority; // 0x2c
	APlayerCameraManager* CameraOwner; // 0x30
	float AlphaInTime; // 0x38
	float AlphaOutTime; // 0x3c
	float Alpha; // 0x40
};

struct UAISpawnAndCondition {
	TArray<UAISpawnOverrideCondition*> Conditions; // 0x30
};

struct UFrontendHudComponent {
	APawn* CurrentPawn; // 0x370
	UCoherentToWwiseEventComponent* AudioComponent; // 0x5c0
};

struct UAthenaCharacterMovementCheatDetectionSettings {
	float MinLifetime; // 0x28
	float MinRatioLifetimeToLifetimeRawTimeDiscrepancy; // 0x2c
};

struct UCollectorsChestSharedParamsDataAsset {
	TArray<UCollectorsChestItemSlotDefinitionDataAsset*> SlotDefinitions; // 0x28
};

struct UParticleSpriteEmitter {
	FName EmitterName; // 0x28
	int32_t SubUVDataOffset; // 0x30
	EEmitterRenderMode EmitterRenderMode; // 0x34
	TArray<UParticleLODLevel*> LODLevels; // 0x38
	char ConvertedModules : 1; // 0x48
	int32_t PeakActiveParticles; // 0x4c
	int32_t InitialAllocationCount; // 0x50
	float MediumDetailSpawnRateScale; // 0x54
	float QualityLevelSpawnRateScale; // 0x58
	EDetailMode DetailMode; // 0x5c
	EEmitterQuality MaxEmitterQuality; // 0x5d
	EEmitterQuality MinEmitterQuality; // 0x5e
	char bIsSoloing : 1; // 0x60
	char bCookedOut : 1; // 0x60
	char bDisabledLODsKeepEmitterAlive : 1; // 0x60
	char bHasAnyEnabledLODs : 1; // 0x60
	char bHasAnyEnabledLODsValid : 1; // 0x60
	TArray<UParticleModule*> ModulesNeedingInstanceData; // 0xa0
};

struct UActorDamageableComponent {
	UHealthComponent* HealthComp; // 0x180
};

struct UBTService_UpdateFocusOnBBChangeWithOffsetFromWieldedProjectile {
	bool DisableUpdateMoveFocusForCurrentPathOnExit; // 0xa0
	FConditionalBasedOnBlackboardKey Conditional; // 0xa8
};

struct UEditableGameplayTagQuery {
	FString UserDescription; // 0x28
	UEditableGameplayTagQueryExpression* RootExpression; // 0x48
	FGameplayTagQuery TagQueryExportText_Helper; // 0x50
};

struct UCannonDescAsset {
	FCannonDesc CannonDesc; // 0x28
};

struct UInterpTrackInstDirector {
	AActor* OldViewTarget; // 0x28
};

struct UStorageContainerSpawnerWeightedListOfWeightedItemList {
	TArray<FStorageContainerWeightedItemListEntryList> Entries; // 0x28
};

struct USubUVAnimation {
	UTexture2D* SubUVTexture; // 0x28
	int32_t SubImages_Horizontal; // 0x30
	int32_t SubImages_Vertical; // 0x34
	ESubUVBoundingVertexCount BoundingMode; // 0x38
	EOpacitySourceMode OpacitySourceMode; // 0x39
	float AlphaThreshold; // 0x3c
	float SafeMarginSize; // 0x40
};

struct AReflectionCapture {
	UReflectionCaptureComponent* CaptureComponent; // 0x3d0
};

struct UShadowMapTexture2D {
	EShadowMapFlags ShadowmapFlags; // 0x190
};

struct UDamageableVulnerabilityLayer {
	TArray<FDamageableVulnerabilityPair> Vulnerabilities; // 0x28
};

struct UTestablePlayerControllerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTDecorator_ActorWieldedItemClass {
	float Interval; // 0x90
	UClass* ItemClassToTest; // 0x98
};

struct UPetSicknessComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UEnvQueryTest_InIslandSafeZone {
	float Radius; // 0x170
};

struct USlidingDoorAudioParams {
	UWwiseObjectPoolWrapper* SlidingDoorPool; // 0x28
	UWwiseEvent* SlidingDoorOpeningLoopStart; // 0x30
	UWwiseEvent* SlidingDoorOpeningLoopStop; // 0x38
	UWwiseEvent* SlidingDoorOpeningAdditionalStopSound; // 0x40
	UWwiseEvent* SlidingDoorClosingLoopStart; // 0x48
	UWwiseEvent* SlidingDoorClosingLoopStop; // 0x50
	UWwiseEvent* SlidingDoorClosingAdditionalStopSound; // 0x58
};

struct UFishingRodItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UMechanismAnimationCurve_Flamethrower {
	float MinLength; // 0x58
	float MaxLength; // 0x5c
	float Radius; // 0x60
	float MinFlameLengthRequiredForDamage; // 0x64
	FRuntimeFloatCurve LengthCurve; // 0x68
};

struct AEnchantedCompass {
	UForceFeedbackEffect* TargetReplacedForceFeedback; // 0x870
	UWwiseEvent* TargetReplacedSFX; // 0x878
	UInventoryItemComponent* InventoryItem; // 0x880
	FEnchantedCompassTarget Target; // 0x88c
	UEnchantedCompassProximityAnnouncementComponent* ProximityAnnouncementComponent; // 0x938
};

struct AAnchor {
	FVector PositionForAnchorDynamicsRelativeToAnchorActor; // 0x3d8
	UBaseAnchorDynamicsDesc* AnchorDynamicsDesc; // 0x3e8
};

struct UParticleModuleVelocity_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x1e8
};

struct UControlWheelInputComponent {
	UIntentComponent* IntentComponent; // 0x280
	AWheel* Wheel; // 0x288
};

struct UMaterialExpressionConstant3Vector {
	FLinearColor Constant; // 0x70
};

struct UMaterialExpressionVertexColor {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct ADeepSeaRegion {
	USceneComponent* Root; // 0x3d8
	FDeepSeaRegionData DeepSeaRegionData; // 0x3f8
	FDeepSeaRegionAmbienceAudio DeepSeaRegionAudio; // 0x418
	FDeepSeaRegionScreenEffects DeepSeaRegionScreenEffects; // 0x430
};

struct UEmoteRadialContentRule {
	UEmoteSettings* EmoteSettings; // 0xd0
};

struct UTransformBlendCurveComponent {
	FTransformBlendCurve Curve; // 0xd0
};

struct UTaleQuestMultiTargetCompassAddTrackedLocationStepDesc {
	FQuestVariableVector Location; // 0x80
	FQuestVariableGuid TargetID; // 0x90
};

struct AMeleeWeapon {
	UInventoryItemComponent* InventoryItem; // 0x7a0
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7a8
	UParticleSystemComponent* TrailParticleSystem_FP; // 0x7b0
	UParticleSystemComponent* TrailParticleSystem_TP; // 0x7b8
	UMeleeWeaponDataAsset* DataAsset; // 0x7c0
	UInventoryManipulatorComponent* InventoryManipulator; // 0x7c8
	bool CanUseWeaponToBlock; // 0x7d0
	bool PreventCombosOnHealthChange; // 0x7d1
	float MaxAcceptableAttackTimeStampDelta; // 0x838
	float MaxAcceptableAttackLocationDelta; // 0x83c
	float MaxAcceptableAttackLocationOnShipDelta; // 0x840
	float MaxAcceptableAttackShipVelocityForLocation; // 0x844
	UMeleeAttackProcessorComponent* WieldersAttackProcessor; // 0x858
};

struct UAthenaCharacterMovementUnderwater {
	bool bSphere; // 0x28
	float Radius; // 0x2c
	float HalfHeight; // 0x30
	float PenResolveInflation; // 0x34
	float PullBackDistance; // 0x38
	float FanOutAngle; // 0x3c
	float MaxFanOutScalar; // 0x40
	uint32_t FanOutNumSteps; // 0x44
	float IdleBobSpeed; // 0x48
	float IdleBobDuration; // 0x4c
	FName CollisionProfileName; // 0x50
	UCurveFloat* VelocityToAngle; // 0x58
	uint32_t MaxExpectedHits; // 0x60
	bool bDrawDebugCapsule; // 0x64
	bool bDebugOldMovement; // 0x65
};

struct USpyglassItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UFireworkItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UCompositeClueDestinationDescriptor {
	UClueDestinationDescriptor* PrimaryClueDestDescriptor; // 0x40
	UClueDestinationDescriptor* SecondaryClueDestDescriptor; // 0x48
};

struct UAIEncounterGenerationRecipeTypeList {
	TArray<UAIEncounterGenerationRecipe*> AllRecipes; // 0x28
};

struct UAISpawnerMusicZoneComponent {
	UWwiseEvent* BattleWonEvent; // 0x370
	UAISpawner* AISpawner; // 0x378
	TArray<APawn*> SpawnerPawns; // 0x380
	EAISpawnerMusicZoneState SpawnerState; // 0x390
};

struct UBTDecorator_ShouldCurrentActionStatePauseBehavior {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UPuzzleVaultAudioParams {
	UWwiseObjectPoolWrapper* PuzzleVaultPool; // 0x28
	UWwiseObjectPoolWrapper* PuzzleVaultWaterFillPool; // 0x30
	UWwiseEvent* PuzzleVaultDoorOpening; // 0x38
	UWwiseEvent* PuzzleVaultDoorClosing; // 0x40
	UWwiseEvent* PuzzleVaultTriggered; // 0x48
	UWwiseEvent* PuzzleVaultComplete; // 0x50
	UWwiseEvent* PuzzleVaultCorrectSolution; // 0x58
	UWwiseEvent* PuzzleVaultIncorrectSolution; // 0x60
	UWwiseEvent* PuzzleVaultIncorrectSolutionDelayStart; // 0x68
	UWwiseEvent* PuzzleVaultIncorrectSolutionDelayEnd; // 0x70
	UWwiseEvent* PuzzleVaultTurnBlock; // 0x78
	UWwiseEvent* WaterLeakStart; // 0x80
	UWwiseEvent* WaterLeakStop; // 0x88
	UWwiseEvent* WaterLeakEndClunk; // 0x90
};

struct UParticleModuleTypeDataMesh {
	UStaticMesh* Mesh; // 0x50
	char CastShadows : 1; // 0x58
	char DoCollisions : 1; // 0x58
	EMeshScreenAlignment MeshAlignment; // 0x5c
	char bOverrideMaterial : 1; // 0x60
	float Pitch; // 0x64
	float Roll; // 0x68
	float Yaw; // 0x6c
	FRawDistributionVector RollPitchYawRange; // 0x70
	EParticleAxisLock AxisLockOption; // 0xb0
	char bCameraFacing : 1; // 0xb4
	EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0xb8
	EMeshCameraFacingOptions CameraFacingOption; // 0xb9
	char bApplyParticleRotationAsSpin : 1; // 0xbc
	char bFaceCameraDirectionRatherThanPosition : 1; // 0xbc
	char bFaceCameraOnlyOnSpawn : 1; // 0xbc
	char bCollisionsConsiderPartilceSize : 1; // 0xbc
};

struct UDebugSuperSailorInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTDecorator_DoesPathExist {
	FBlackboardKeySelector BlackboardKeyA; // 0x68
	FBlackboardKeySelector BlackboardKeyB; // 0x90
	char bUseSelf : 1; // 0xb8
	EPathExistanceQueryType PathQueryType; // 0xbc
	UNavigationQueryFilter* FilterClass; // 0xc0
};

struct UGameplayAbility_CharacterJump {
	FGameplayTagContainer AbilityTags; // 0x68
	bool bReplicateInputDirectly; // 0xa8
	EGameplayAbilityReplicationPolicy ReplicationPolicy; // 0xd0
	EGameplayAbilityInstancingPolicy InstancingPolicy; // 0xd1
	bool bServerRespectsRemoteAbilityCancellation; // 0xd2
	bool bRetriggerInstancedAbility; // 0xd3
	FGameplayAbilityActivationInfo CurrentActivationInfo; // 0xd8
	FGameplayEventData CurrentEventData; // 0xf8
	EGameplayAbilityNetExecutionPolicy NetExecutionPolicy; // 0x198
	UGameplayEffect* CostGameplayEffectClass; // 0x1a0
	UGameplayEffect* CostGameplayEffect; // 0x1a8
	TArray<FAbilityTriggerData> AbilityTriggers; // 0x1b0
	UGameplayEffect* CooldownGameplayEffectClass; // 0x1c0
	UGameplayEffect* CooldownGameplayEffect; // 0x1c8
	FGameplayTagQuery CancelAbilitiesMatchingTagQuery; // 0x1d0
	FGameplayTagQuery ConstTagQuery; // 0x218
	FGameplayTagContainer CancelAbilitiesWithTag; // 0x260
	FGameplayTagContainer BlockAbilitiesWithTag; // 0x288
	FGameplayTagContainer ActivationOwnedTags; // 0x2b0
	FGameplayTagContainer ActivationRequiredTags; // 0x2d8
	FGameplayTagContainer ActivationBlockedTags; // 0x300
	FGameplayTagContainer SourceRequiredTags; // 0x328
	FGameplayTagContainer SourceBlockedTags; // 0x350
	FGameplayTagContainer TargetRequiredTags; // 0x378
	FGameplayTagContainer TargetBlockedTags; // 0x3a0
	UAnimMontage* CurrentMontage; // 0x438
	bool bIsActive; // 0x440
	bool bIsCancelable; // 0x441
	bool bIsBlockingOtherAbilities; // 0x442
};

struct UWaterSlidePlayerComponent {
	UParticleSystemComponent* PlayerWaterSlideSplashingVFXComponent; // 0xe8
	UParticleSystem* PlayerWaterSlideSplashingVFX; // 0xf0
	float SpawnLocationZOffset; // 0xf8
	AWaterSlide* CurrentWaterSlide; // 0x110
};

struct UEquippedWithItemStatCondition {
	FItemRequirementData RequiredItemsData; // 0x28
};

struct AOverlapTriggerActor {
	UCapsuleComponent* SceneComponent; // 0x3d0
	UOverlapTriggerComponent* OverlapComponent; // 0x3d8
};

struct UReapersChestItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UParticleModuleSubUVBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UCargoRunItemDesc {
	FGuid DeliveryLocationId; // 0x130
	uint32_t DeliveryTimeLimitInMinutes; // 0x140
};

struct UTradeRoutesDataAsset {
	TArray<FTradeRouteMapping> TradeRouteMappings; // 0x28
};

struct UIslandFrameworkSettings {
	FName IslandTypeStateGroup; // 0x38
	FStringAssetReference IslandDataFileLocation; // 0x40
	float SurfaceUpperBound; // 0x50
	float SurfaceLowerBound; // 0x54
	float TreasuryAwarenessProximity; // 0x58
};

struct URemoveCriticalActorStepDesc {
	FQuestVariableActor ActorVar; // 0x80
};

struct UPetSpawnParamsDataAsset {
	UAIClassId* PetClassID; // 0x28
	UBehaviorTree* TreeToRun; // 0x30
	UAthenaAIControllerParamsDataAsset* PetSkillset; // 0x38
	UEnvQuery* SpawnQueryForLand; // 0x58
	UEnvQuery* SpawnQueryForShip; // 0x60
};

struct UImageCaptureSettings {
	int32_t CompressionQuality; // 0x30
};

struct ULayerInContainerComponent {
	float FadeRate; // 0x5f8
	bool CanTake; // 0x5fc
	ULayerInContainerComponent* LayerBlockingTakingThisLayer; // 0x600
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x608
};

struct UAddReloadAmmoActionRuleComponent {
	UNotificationInputId* NotificationInputId; // 0xc8
	EActionDisplayPriority DisplayPriority; // 0xd0
};

struct AStorageSeat {
	UNotificationInputId* StorageInteractionInput; // 0x678
	UStorageContainerComponent* StorageContainerComponent; // 0x680
};

struct UAnimMontage {
	float BlendInTime; // 0x78
	float BlendOutTime; // 0x7c
	float BlendOutTriggerTime; // 0x80
	TArray<FCompositeSection> CompositeSections; // 0x88
	TArray<FSlotAnimationTrack> SlotAnimTracks; // 0x98
	TArray<FBranchingPoint> BranchingPoints; // 0xa8
	bool bEnableRootMotionTranslation; // 0xb8
	bool bEnableRootMotionRotation; // 0xb9
	ERootMotionRootLock RootMotionRootLock; // 0xba
	TArray<FBranchingPointMarker> BranchingPointMarkers; // 0xc0
	bool bAnimBranchingPointNeedsSort; // 0xd0
	TArray<int32_t> BranchingPointStateNotifyIndices; // 0xd8
};

struct UTextureLightProfile {
	float Brightness; // 0x190
	float TextureMultiplier; // 0x194
};

struct UInterpTrackInstFloatParticleParam {
	float ResetFloat; // 0x28
};

struct UChestOfRageDataAsset {
	float DormantDuration; // 0x28
	float RageBuildingDuration; // 0x2c
	float TimeInToRageBuildingToAbsorbWater; // 0x30
	float SteamingDuration; // 0x34
	float TimeInToSteamingStateWhereHitWillCauseInstantExplosion; // 0x38
	float OnFireDuration; // 0x3c
	float InWaterCoolingRate; // 0x40
	float ForcedInWaterCoolingRate; // 0x44
	float InRainCoolingRate; // 0x48
	float WaterHeightCheckOffset; // 0x4c
	UCurveFloat* TimeToRemovePerSplash; // 0x50
	float HealthChangePerSecondWhilstCarryingASteamingChest; // 0x58
	float PercentageToHeatHullWaterPerSecond; // 0x5c
	float ChestInSuperheatedWaterSteadyStatePercentage; // 0x60
	UObject* RageBuildingVfx; // 0x68
	float MinimumRageValueToTriggerRageBuildingVfx; // 0x70
	UObject* SteamingVfx; // 0x78
	UObject* OnFireVfx; // 0x80
	UObject* ExplosionVfx; // 0x88
	UObject* CooledDownSteamBlast; // 0x90
	UObject* OnTakingDamageVfx; // 0x98
	UWwiseEvent* OnTakingDamageSfx; // 0xa0
	UWwiseEvent* StartWhistlingOneShotSfx; // 0xa8
	UWwiseEvent* StartWhistlingSfx; // 0xb0
	UWwiseEvent* StopWhistlingSfx; // 0xb8
	UWwiseEvent* StartRageBuildingSfx; // 0xc0
	UWwiseEvent* StopRageBuildingSfx; // 0xc8
	UWwiseEvent* ExplosionSfx; // 0xd0
	UWwiseEvent* ExtinguishedSfx; // 0xd8
	UWwiseObjectPoolWrapper* AudioSFXPool; // 0xe0
	TArray<FChestOfRageDamageTableEntry> DamageTable; // 0xe8
};

struct ACapstanMock {
	float State; // 0x410
	float RatioVelocity; // 0x414
	float MaxRatioVelocity; // 0x418
	float MaxVelocityPerPlayer; // 0x41c
	int32_t NumCurrentUsers; // 0x420
	bool Locked; // 0x424
};

struct URadialManagerComponent {
	TArray<FRadialRuleInstanceMapping> RadialMappings; // 0x220
	URadialSettingsAsset* RadialSettings; // 0x230
	URadialManagerCompositeInputHandler* InputHandler; // 0x238
	UNotificationInputId* CurrentClosingId; // 0x240
	UObject* DockedObject; // 0x248
	URadialManagerInputBinder* ManagerInputBinder; // 0x250
	UAthenaInputSettings* CachedInputSettings; // 0x258
	UNotificationInputId* LastInputId; // 0x2c8
};

struct AEnchantedSpyglass {
	UInventoryItemComponent* EnchantedInventoryItem; // 0x888
	AActor* ConstellationVisibilityEventActor; // 0x890
};

struct UFlamethrowerChargeComponent {
	float MaxCharge; // 0x240
	float ChargeDrainPerSecond; // 0x244
};

struct USpectatorPawnMovement {
	char bIgnoreTimeDilation : 1; // 0x178
};

struct UDeliverableRedirectionSettings {
	FStringAssetReference DeliverableRedirectionActionDataAssetLocation; // 0x38
};

struct UHurdyGurdyItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct AVideprinter {
	TArray<FString> OutputRingBuffer; // 0x3d0
	int32_t AddAt; // 0x3e0
	FName Id; // 0x3e4
};

struct UTaleQuestAddMerchantMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UMovieSceneSlomoSection {
	FRichCurve FloatCurve; // 0xa0
};

struct UTaleQuestStoreClueOnActorStepDesc {
	FQuestVariableClueDescriptor ClueDescriptor; // 0x80
	FQuestVariableActor Actor; // 0x90
	FQuestVariableActor ClueActor; // 0xa0
};

struct UBTService_DefaultFocusToPosAtRelativeAngleToObject {
	float RelativeYawAngleOffset; // 0xa0
	float RelativeDistance; // 0xa4
};

struct UBootyItemDesc {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct UBTTask_SetTagCooldown {
	FGameplayTag CooldownTag; // 0x60
	bool bAddToExistingDuration; // 0x68
	float CoolDownDuration; // 0x6c
};

struct UCharacterAudioComponent {
	UCharacterAudioComponentParams* Params; // 0xd8
	UWwiseEvent* MonsterCallEvent; // 0xe0
	int32_t MonsterCallHourToPlay; // 0xe8
	FName TimeOfDayRtpc; // 0xec
	FPlayerMusicController PlayerMusicController; // 0xf8
	UCharacterAudioFootfallControllerParams* FootfallParams; // 0x2b8
	UCharacterAudioEventControllerParams* EventParams; // 0x2c0
	UClothingCategory* PegLegCategory; // 0x2c8
	UClothingCategory* BootsCategory; // 0x2d0
	UAudioSpaceTrackerComponent* AudioSpaceTracker; // 0x310
	AAthenaPlayerCharacter* AthenaPlayerCharacter; // 0x318
	UAudioSpaceDataAsset* CurrentSpace; // 0x12e0
	AShip* CurrentShip; // 0x1300
};

struct UStaggerComponent {
	UCurveFloat* XStickInputOverloaderAmplitude; // 0xc8
	UCurveFloat* YStickInputOverloaderAmplitude; // 0xd0
	float MinInputOverloaderSpd; // 0xd8
	float MaxInputOverloaderSpd; // 0xdc
	float ChanceToChangeDirectionOnSpeedChange; // 0xe0
	float InputOverloaderSpdChangePerSec; // 0xe4
	float MinOverloaderSpdChangeTime; // 0xe8
	float MaxOverloaderSpdChangeTime; // 0xec
	float StickInputForMaxInterferenceScalar; // 0xf0
	float InterferenceScalarAtMinStickInput; // 0xf4
	float InterferenceScalarOnLadderStationary; // 0xf8
	float InterferenceScalarOnLadderMoving; // 0xfc
	float MaxStickDeflectionOnLadderToConsiderStationary; // 0x100
	float StickDeflectionForMaxScalingOnLadder; // 0x104
	TArray<FStaggerModifiersEntry> StaggerModifierEntries; // 0x108
};

struct UBootyCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UParticleModuleEventReceiverKillParticles {
	char bStopSpawning : 1; // 0x60
};

struct UMaterialFunction {
	FGuid StateId; // 0x28
	FString Description; // 0x38
	char bExposeToLibrary : 1; // 0x48
	TArray<FText> LibraryCategoriesText; // 0x50
	TArray<UMaterialExpression*> FunctionExpressions; // 0x60
	char bReentrantFlag : 1; // 0x70
};

struct AItemSpawnTelemetryDispatchingItemInfo {
	FGuid ItemId; // 0x520
};

struct UItemsByCategoryRadialContentRule {
	float RadialIconScale; // 0xd0
	FVector2D RadialIconOffset; // 0xd4
	UInventoryItemDescToSlotRemappingPolicyAsset* RemappingAsset; // 0xe0
	TArray<AItemInfo*> MappedSlots; // 0xe8
	UItemCategory* CustomItemCategory; // 0xf8
	TArray<UItemCategory*> CustomItemCategories; // 0x100
};

struct AAudioVolume {
	float Priority; // 0x408
	char bEnabled : 1; // 0x40c
	FReverbSettings Settings; // 0x410
	FInteriorSettings AmbientZoneSettings; // 0x428
	AAudioVolume* NextLowerPriorityVolume; // 0x450
};

struct UTaleQuestNPCBeckonCrewStepDesc {
	FString BeckonTag; // 0x80
};

struct UHangerComponent {
	float Mass; // 0x2b0
	float LimitConeAngle; // 0x2b4
	float XAxisMotionScale; // 0x2b8
	float YAxisMotionScale; // 0x2bc
};

struct UGoldInContainerDataAsset {
	TArray<FGoldInContainerData> GoldData; // 0x28
};

struct ACustomMysteriousNotesService {
	TMap<int32_t, FCustomPlayerNoteList> CustomMysteriousNotes; // 0x3d8
};

struct UParticleModuleLocationPrimitiveTriangle {
	FRawDistributionVector StartOffset; // 0x50
	FRawDistributionFloat Height; // 0x88
	FRawDistributionFloat Angle; // 0xc0
	FRawDistributionFloat Thickness; // 0xf8
};

struct APlayerBuriedItemsMapBundleItemInfo {
	bool CanBeStoredInInventory; // 0x3f0
	FScriptMulticastDelegate OnItemPickedUpDelegate; // 0x3f8
	FScriptMulticastDelegate OnItemDroppedDeletage; // 0x408
	AWieldableItem* WieldableType; // 0x418
	AActor* ProxyType; // 0x420
	UWieldableItemPersistentCooldownComponent* WieldableItemPersistenceCooldownComponent; // 0x428
	UItemDesc* Desc; // 0x430
	EItemRepresentation CurrentRepresentation; // 0x438
	AActor* CurrentRepresentationInstance; // 0x440
	AActor* CurrentOwner; // 0x448
	AActor* TutorialOwner; // 0x450
	bool DoNotConsiderForMigrationGather; // 0x4f9
};

struct UNPCDialogHeaderDynamic {
	FText Text; // 0x28
};

struct UIslandVisitorCallbackComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UAbandonedNoteClueTextAsset {
	TArray<FText> Descriptions; // 0x28
	UClueDestinationDescriptor* DestinationType; // 0x38
};

struct UMaterialExpressionDivide {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	float ConstA; // 0xe0
	float ConstB; // 0xe4
};

struct UGameViewportClient {
	UConsole* ViewportConsole; // 0x38
	TArray<FDebugDisplayProperty> DebugProperties; // 0x40
	UWorld* World; // 0x80
	UGameInstance* GameInstance; // 0x88
};

struct UTaleQuestFlameOfFateServiceDesc {
	UItemCategory* LanternItemCategory; // 0x28
	EFlameOfFateType FlameOfFateTypeToSet; // 0x30
	bool SetFlameOnStart; // 0x31
};

struct ALandscapeProxy {
	ULandscapeSplinesComponent* SplineComponent; // 0x3d8
	FGuid LandscapeGuid; // 0x3e0
	FIntPoint LandscapeSectionOffset; // 0x3f0
	int32_t MaxLODLevel; // 0x3f8
	int32_t StaticLightingLOD; // 0x3fc
	UPhysicalMaterial* DefaultPhysMaterial; // 0x400
	float StreamingDistanceMultiplier; // 0x408
	UMaterialInterface* LandscapeMaterial; // 0x410
	UMaterialInterface* LandscapeHoleMaterial; // 0x418
	float LODDistanceFactor; // 0x420
	TArray<ULandscapeComponent*> LandscapeComponents; // 0x428
	TArray<ULandscapeHeightfieldCollisionComponent*> CollisionComponents; // 0x438
	TArray<UHierarchicalInstancedStaticMeshComponent*> FoliageComponents; // 0x448
	float StaticLightingResolution; // 0x4d0
	ALandscape* LandscapeActor; // 0x4d4
	char bCastStaticShadow : 1; // 0x4f0
	char bCastShadowAsTwoSided : 1; // 0x4f0
	char bAffectDynamicIndirectLighting : 1; // 0x4f0
	char bCastFarShadow : 1; // 0x4f0
	char bIsProxy : 1; // 0x4f0
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x4f0
	float LpvIntensityMultiplier; // 0x4f4
	float LpvBiasMultiplier; // 0x4f8
	float FarCascadeLPVBiasMultiplier; // 0x4fc
	FLightmassPrimitiveSettings LightmassSettings; // 0x500
	int32_t CollisionMipLevel; // 0x518
	float CollisionThickness; // 0x51c
	FBodyInstance BodyInstance; // 0x520
	int32_t ComponentSizeQuads; // 0x6a0
	int32_t SubsectionSizeQuads; // 0x6a4
	int32_t NumSubsections; // 0x6a8
	char bUsedForNavigation : 1; // 0x6ac
	char bReflected : 1; // 0x6ac
	ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x6b0
	ELandscapeLODFalloff LODFalloff; // 0x6b1
};

struct UContextualTutorialComponent {
	TArray<FContextualTutorialPromptDesc> ContextualTutorialClasses; // 0xc8
	TArray<AActor*> SpawnedPromptActors; // 0xd8
};

struct URemoveFlameOfFateTypeStep {
	URemoveFlameOfFateTypeStepDesc* Desc; // 0x90
};

struct UParticleModuleSize_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x1b0
};

struct UTaleQuestWaitForHandInStepDesc {
	FQuestVariableActor HandInActor; // 0x80
	UItemDesc* SpecificItem; // 0x90
	FQuestVariableItemDescType HandInItem; // 0x98
};

struct UMovieSceneBoolSection {
	bool DefaultValue; // 0xa0
	FIntegralCurve BoolCurve; // 0xa8
};

struct UMaterialExpressionScreenPosition {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct USeasonProgressionExclusionComponent {
	bool ShouldBeExcludedFromSeasonProgessionValue; // 0xd0
};

struct ATestAbstractActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UWeightedAnimSequenceLoadOnDemand {
	UAnimSequence* FallBackAnimation; // 0x28
	TArray<FWeightedAnimationData> WeightedAnimationList; // 0x30
};

struct UMovieSceneSignedObject {
	FGuid Signature; // 0x28
};

struct UBTTask_NetworkTriggerAnim {
	UAnimSequence* Anim; // 0x60
	float AnimLength; // 0x68
	float AnimPlayRate; // 0x6c
};

struct AAthenaPlayerCharacterWithTestInputHandler {
	UAthenaPlayerCharacterTestInputBinder* TestInputBinder; // 0x1ac0
};

struct UGameInstance {
	TArray<ULocalPlayer*> LocalPlayers; // 0x38
	UOnlineSession* OnlineSession; // 0x50
};

struct UNavCollision {
	TArray<FNavCollisionCylinder> CylinderCollision; // 0x78
	TArray<FNavCollisionBox> BoxCollision; // 0x88
	UNavArea* AreaClass; // 0x98
	char bIsDynamicObstacle : 1; // 0xa0
	char bGatherConvexGeometry : 1; // 0xa0
};

struct UBlinkStrafeComponent {
	AAthenaAICharacter* Character; // 0xc8
	AAthenaAIControllerBase* OwnerAIController; // 0xd0
	bool ShouldBlink; // 0xe0
};

struct UAthenaAnimationWeaponDataAsset {
	FAthenaAnimationWeaponData WeaponData; // 0x28
};

struct UMovieSceneFolder {
	FName FolderName; // 0x28
	TArray<UMovieSceneFolder*> ChildFolders; // 0x30
	TArray<UMovieSceneTrack*> ChildMasterTracks; // 0x40
	TArray<FString> ChildObjectBindingStrings; // 0x50
};

struct UMaterialExpressionTwoSidedSign {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UAIFaunaSpawner {
	FAIFaunaSpawnerWave FaunaWave; // 0x428
	AActor* FaunaLeader; // 0x548
	TArray<AActor*> PlayersInSpawnArea; // 0x560
};

struct UNavLinkTrivial {
	TArray<FNavigationLink> Links; // 0x28
	TArray<FNavigationSegmentLink> SegmentLinks; // 0x38
};

struct UNavLinkDefinition {
	TArray<FNavigationLink> Links; // 0x28
	TArray<FNavigationSegmentLink> SegmentLinks; // 0x38
};

struct UGrantPagesStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UWatermarkComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UNPCOnSurfaceDataAsset {
	UNPCOnSurfaceLocationDataAsset* LocationDataAsset; // 0x28
	UNPCOnSurfaceStatesDataAsset* StatesDataAsset; // 0x30
	UNPCOnSurfaceCannonManagerDataAsset* CannonManagerDataAsset; // 0x38
	UNPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset* CannonManagerCrewSizeSettingsDataAsset; // 0x40
	UClass* NpcToSpawn; // 0x48
	bool PhaseNPCToCrew; // 0x68
	float TimeBetweenSpawnChecks; // 0x6c
	float HighFrequencyTimeBetweenSpawnChecks; // 0x70
	float TimeBetweenDespawnChecks; // 0x74
	FWeightedProbabilityRangeOfRanges DespawnCooldown; // 0x78
	float DelayBeforeDestroyingNPC; // 0xa8
	float NPCInteractionDistanceXY; // 0xac
	float NPCInteractionDistanceZ; // 0xb0
	float TimeBetweenIsPlayerNearNPCChecks; // 0xb4
};

struct UCameraYawModifier {
	char bDebug : 1; // 0x28
	char bExclusive : 1; // 0x28
	char Priority; // 0x2c
	APlayerCameraManager* CameraOwner; // 0x30
	float AlphaInTime; // 0x38
	float AlphaOutTime; // 0x3c
	float Alpha; // 0x40
};

struct UStormParams {
	FFixedStepInterpCurveVector2D PositionCurve; // 0x28
	TArray<char> StormType; // 0x40
	AActor* StormClass; // 0x50
	TArray<FStormStrengthType> StormTypeSettings; // 0x58
	float StormTypeStepTime; // 0x68
	float StormTypeBlendTime; // 0x6c
	float CycleTime; // 0x70
};

struct UBlockGeysersTaleQuestService {
	UBlockGeysersTaleQuestServiceDesc* Desc; // 0x60
};

struct UQuickAccessNonVerbalRadialContentRule {
	UNonVerbalRadialDataAsset* CurrentPhrases; // 0xa8
};

struct UQuestBookSinglePageLayout {
	TArray<FTreasureMapWidgetTexture> Images; // 0x28
	TArray<FTreasureMapWidgetLocalisedTextWithFontOverride> GeneralText; // 0x38
};

struct UTaleQuestCompassServiceDesc {
	UItemDesc* CompassDesc; // 0x30
};

struct UStatusResponseShipAddAnchor {
	FStandardAnchorDynamicsParameters Params; // 0x30
	FVector AnchorOffsetFromShip; // 0x58
};

struct ARespawnAndTaleProgressTriggerVolume {
	URespawnAndTaleProgressComponent* Progress; // 0x418
	bool ClearProgress; // 0x420
	int32_t ProgressLevel; // 0x424
	TArray<AProgressSpawnLocation*> LinkedSpawnLocation; // 0x428
	bool SetRespawnProgress; // 0x438
	bool SetRespawnProgressForWholeCrew; // 0x439
	bool SetTaleProgress; // 0x43a
	bool SetTaleProgressForWholeCrew; // 0x43b
};

struct UAnimNotify_DetachAndMaintainWorldPosition {
	EWieldAnimationLocation CurrentLocation; // 0x38
};

struct UOceanCrawlerAudioBroadcaster {
	UOceanCrawlerAudioParamsDataAsset* AudioDataAsset; // 0xc8
	AActor* CachedOwner; // 0xd0
};

struct UInterpTrackInstFloatAnimBPParam {
	UAnimInstance* AnimScriptInstance; // 0x28
	float ResetFloat; // 0x30
};

struct ASwitchMechanismTrigger {
	USceneComponent* Root; // 0x410
	USceneComponent* Pivot; // 0x418
	UMechanismTriggerComponent* MechanismTriggerComponent; // 0x420
	bool ShowSwitchInteractionPrompt; // 0x428
	FText SwitchInteractionPromptText; // 0x430
	FText SwitchNameText; // 0x468
	bool SyncToConnectedActionStateOnChange; // 0x4a0
	bool DisableWhenActivated; // 0x4a1
	bool AutoDeactivateAfterActivation; // 0x4a2
	float TimeAfterActivationBeforeAutoDeactivating; // 0x4a4
	bool SelectRandomStartPositionOnSpawn; // 0x4a8
	ESwitchMechanismTriggerRandomSelectionMode RandomStartPositionSelectionMode; // 0x4a9
	int32_t FixedStartPositionIndex; // 0x4ac
	UCurveFloat* PositionTransitionCurve; // 0x4b0
	TArray<FSwitchMechanismTriggerPosition> Positions; // 0x4b8
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0x4c8
	UMechanismMaterialGroup* MaterialGroup; // 0x4d0
	int32_t CurrentPositionIndex; // 0x4d8
};

struct UPlaneReflectionCaptureComponent {
	float InfluenceRadiusScale; // 0x340
	UDrawSphereComponent* PreviewInfluenceRadius; // 0x348
	UBoxComponent* PreviewCaptureBox; // 0x350
};

struct ADebugTeleportationDestinationService {
	TArray<FDebugTeleportDestinationEntry> DebugTeleportationRegistry; // 0x3e8
};

struct ADebugAIManagerService {
	TArray<UAthenaAIAbilityType*> BlockedAIAbilities; // 0xb40
};

struct UGlitterBeardTreeVisualFeedbackComponent {
	TArray<FVisualFeedbackList> FeedbackActions; // 0xc8
	TArray<EGlitterbeardVFXState> CurrentStates; // 0xe8
};

struct UReactStateMappingsDataAsset {
	TArray<FReactStateMapping> ReactMappings; // 0x28
};

struct UBTService_UpdateIfShipShouldBreakTracking {
	FBlackboardKeySelector TargetActorKey; // 0x70
	FBlackboardKeySelector DisableTrackingKey; // 0x98
	FBlackboardKeySelector ShouldSailForwardKey; // 0xc0
	FBlackboardKeySelector TimeToSailForwardKey; // 0xe8
	FBlackboardKeySelector CaptainIsPresentKey; // 0x110
};

struct USkeleton {
	TArray<FBoneNode> BoneTree; // 0x28
	TArray<FSkeletonToMeshLinkup> LinkupCache; // 0xb8
	TArray<USkeletalMeshSocket*> Sockets; // 0xc8
	FSmartNameContainer SmartNames; // 0x128
	TArray<FAnimSlotGroup> SlotGroups; // 0x178
};

struct APlayerStartPIE {
	FName PlayerStartTag; // 0x3f8
};

struct UBrushComponent {
	UModel* Brush; // 0x588
	UBodySetup* BrushBodySetup; // 0x590
	FVector PrePivot; // 0x598
};

struct UEmoteItemCategoriesListingAsset {
	TArray<UItemCategory*> EmoteItemCategories; // 0x28
};

struct APetCageSwitchMechanismTrigger {
	FHangoutSpotId LinkedPerchHangoutId; // 0x558
};

struct AServerMigrationSerialisationDetailsTestsActorWithDynamicComponent {
	UServerMigrationSerialisationDetailsTestsMigratableComponent* SubObject; // 0x3d0
	UServerMigrationSerialisationDetailsTestsMigratableComponent* ActorComponent; // 0x3d8
	UServerMigrationSerialisationDetailsTestsMigratableComponent* Subobject2; // 0x3e0
};

struct UCutscenePoolTypeResettable {
	bool DialogueSelectedRandomly; // 0x28
	TArray<int32_t> AvailableIndices; // 0x30
	TArray<int32_t> OriginalIndices; // 0x48
};

struct UContendedResourceComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UDoEQSQueryStep {
	UDoEQSQueryStepDesc* Desc; // 0x90
	UTaleQuestEQSService* CachedTaleEQSService; // 0x98
};

struct UNavigationSettings {
	FVector DirectionNorth; // 0x38
	TArray<FString> CompassDirectionLocTags; // 0x48
};

struct UTutorial2019Component {
	bool IsEnabledByServer; // 0xc8
	bool IsInTutorialTale; // 0xc9
};

struct UMaterialExpressionParticlePositionWS {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UScrollBoxSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
};

struct UStaticMeshMemoryConstraintComponent {
	UMeshMemoryConstraintHandler* Handler; // 0x608
	TArray<FStringAssetReference> FallbackOverrideMaterials; // 0x610
	UMeshMemoryConstraintCategory* MeshFallbackCategory; // 0x620
	FStringAssetReference MeshReference; // 0x628
	int64_t CachedMeshResourceSize; // 0x638
	bool MemoryAccountedFor; // 0x640
	bool NeedMeshLoadOnServer; // 0x641
	UMeshMemoryConstraintBudget* BudgetToCountMemoryAgainstIfNoFallback; // 0x648
};

struct USetHiddenOnKeyTakenStepDesc {
	FQuestVariableActor CutsceneLockNPC; // 0x80
	FQuestVariableActor SequencerCutSceneActor; // 0x90
	ULevelSequence* LevelSequence; // 0xa0
	FString ActorName; // 0xa8
	bool Visible; // 0xb8
};

struct UAnimNotify_SetCosmeticItemVisibility {
	EWieldAnimationLocation ItemLocation; // 0x38
	bool Visible; // 0x39
	bool RenderShadow; // 0x3a
	bool RenderShadowWhenHidden; // 0x3b
	bool UpdateForRole; // 0x3c
	ENetRole UpdateRole; // 0x3d
};

struct UTaleQuestReleaseContendedResourceStepDesc {
	FQuestVariableTaleResourceHandle ResourceHandle; // 0x80
};

struct UInterpTrackFloatProp {
	FName PropertyName; // 0x90
};

struct UDestructibleMesh {
	FDestructibleParameters DefaultDestructibleParameters; // 0x238
	TArray<FFractureEffect> FractureEffects; // 0x2c0
};

struct UAISpawnMatchesAllContextsCondition {
	TArray<UAISpawnContextId*> Contexts; // 0x30
};

struct AExplosionMechanismAction {
	USceneComponent* Base; // 0x3d0
	UMechanismActionComponent* MechanismActionComponent; // 0x3d8
	UExplosiveComponent* ExplosiveComponent; // 0x3e0
	UExplosionComponent* ExplosionComponent; // 0x3e8
	float Delay; // 0x3f0
	float Cooldown; // 0x3f4
	bool ApplyCooldownPostDelay; // 0x3f8
};

struct UAbilitySystemTestAttributeSet {
	float MaxHealth; // 0x30
	float Health; // 0x34
	float Mana; // 0x38
	float MaxMana; // 0x3c
	float Damage; // 0x40
	float SpellDamage; // 0x44
	float PhysicalDamage; // 0x48
	float CritChance; // 0x4c
	float CritMultiplier; // 0x50
	float ArmorDamageReduction; // 0x54
	float DodgeChance; // 0x58
	float LifeSteal; // 0x5c
	float Strength; // 0x60
	float StackingAttribute1; // 0x64
	float StackingAttribute2; // 0x68
	float NoStackAttribute; // 0x6c
};

struct UEQSRenderingComponent {
	float MinDrawDistance; // 0x2b8
	float LDMaxDrawDistance; // 0x2c0
	float CachedMaxDrawDistance; // 0x2c4
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2c8
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2c9
	char bAlwaysCreatePhysicsState : 1; // 0x2cc
	char bGenerateOverlapEvents : 1; // 0x2cc
	char bMultiBodyOverlap : 1; // 0x2cc
	char bCheckAsyncSceneOnMove : 1; // 0x2cc
	char bTraceComplexOnMove : 1; // 0x2cc
	char bReturnMaterialOnMove : 1; // 0x2cc
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2cc
	char bAllowCullDistanceVolume : 1; // 0x2cc
	char bHasMotionBlurVelocityMeshes : 1; // 0x2cd
	char bRenderInMainPass : 1; // 0x2cd
	char bRenderInCustomPrePass : 1; // 0x2cd
	char bReflected : 1; // 0x2cd
	char bReflectedOnLowQuality : 1; // 0x2cd
	char bFFTWaterMask : 1; // 0x2cd
	char bVolumeFogMask : 1; // 0x2cd
	char bAffectsFlatWater : 1; // 0x2ce
	char bGPUParticlesKillPlane : 1; // 0x2ce
	char bDontCull : 1; // 0x2ce
	char bDontSizeOnScreenCull : 1; // 0x2ce
	float OverriddenShadowMinTexelSize; // 0x2d0
	bool bOverrideShadowMinSizeCulling; // 0x2d4
	bool bOverrideShadowCascadesExclusion; // 0x2d5
	EExcludeFromCascades ExcludedShadowCascades; // 0x2d6
	char bReceivesDecals : 1; // 0x2d8
	char bOwnerNoSee : 1; // 0x2d8
	char bOnlyOwnerSee : 1; // 0x2d8
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d8
	char bIsACloud : 1; // 0x2d8
	char bUseAsOccluder : 1; // 0x2d8
	char bSelectable : 1; // 0x2d8
	char bForceMipStreaming : 1; // 0x2d8
	char bHasPerInstanceHitProxies : 1; // 0x2d9
	char CastShadow : 1; // 0x2d9
	char bAffectDynamicIndirectLighting : 1; // 0x2d9
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x2d9
	char bAffectDistanceFieldLighting : 1; // 0x2d9
	char bCastDynamicShadow : 1; // 0x2d9
	char bCastStaticShadow : 1; // 0x2d9
	char bCastVolumetricTranslucentShadow : 1; // 0x2d9
	char bSelfShadowOnly : 1; // 0x2da
	char bCastFarShadow : 1; // 0x2da
	char bCastInsetShadow : 1; // 0x2da
	char bCastCinematicShadow : 1; // 0x2da
	char bCastHiddenShadow : 1; // 0x2da
	char bCastShadowAsTwoSided : 1; // 0x2da
	char bCastShadowOnLowQuality : 1; // 0x2da
	char bLightAsIfStatic : 1; // 0x2da
	char bLightAttachmentsAsGroup : 1; // 0x2db
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2dc
	bool bHasCachedStaticLighting; // 0x2dd
	bool bStaticLightingBuildEnqueued; // 0x2de
	char bIgnoreRadialImpulse : 1; // 0x2e0
	char bIgnoreRadialForce : 1; // 0x2e0
	char AlwaysLoadOnClient : 1; // 0x2e0
	char AlwaysLoadOnServer : 1; // 0x2e0
	char bUseEditorCompositing : 1; // 0x2e0
	char bRenderCustomDepth : 1; // 0x2e0
	char bAllowVelocityInMaterial : 1; // 0x2e0
	int32_t CustomDepthStencilValue; // 0x2e4
	int32_t TranslucencySortPriority; // 0x2e8
	int32_t VisibilityId; // 0x2ec
	float LpvBiasMultiplier; // 0x2f4
	float FarCascadeLPVBiasMultiplier; // 0x2f8
	float LpvIntensityMultiplier; // 0x2fc
	FCustomPrimitiveData CustomPrimitiveData; // 0x300
	FBodyInstance BodyInstance; // 0x310
	char bAffectRain : 1; // 0x490
	char bCanEverAffectNavigation : 1; // 0x490
	char bSkipRenderingInOuterLPVCascades : 1; // 0x490
	char bEnableMergeCollisionComponents : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerUnderwater : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerUnderwater : 1; // 0x491
	char bCanRenderAboveAndBelowWaterAtSameTime : 1; // 0x491
	float BoundsScale; // 0x498
	float OcclusionBoundsScale; // 0x49c
	float LastRenderTime; // 0x4a0
	bool bGPUVisibility; // 0x4a4
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x4a5
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x4a6
	FScriptMulticastDelegate OnComponentHit; // 0x4f0
	FScriptMulticastDelegate OnComponentBeginOverlap; // 0x4f1
	FScriptMulticastDelegate OnComponentEndOverlap; // 0x4f2
	FScriptMulticastDelegate OnComponentWake; // 0x4f3
	FScriptMulticastDelegate OnComponentSleep; // 0x4f4
	UPrimitiveComponent* LODParentPrimitive; // 0x528
	FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x530
	UPrimitiveComponent* MergedCollisionComponentParent; // 0x580
};

struct UAICreatureCharacterMovementComponent {
	TArray<FAIStrategyMovementProperties> AIStrategyMovementProperties; // 0x558
	float BlendSpeed; // 0x568
	bool bCreateDisturbance; // 0x56c
	float DisturbanceSize; // 0x570
	float DisturbanceVelocityScale; // 0x574
	float OrientationBlendSpeed; // 0x578
	float OrientationMaxPitch; // 0x57c
	float UpdateOrientationFrequency; // 0x580
	float MinStairAngle; // 0x584
	float MinStairVelocityDampen; // 0x588
	TArray<UAIStrategyId*> SubscribedStairClimbStrategies; // 0x590
};

struct UThirdPersonAnimationInstance {
	float ItemAnimPausedTimeRemaining; // 0x29e0
	char IsItemAnimPaused : 1; // 0x29e4
	char UseContinualLoopInOneShotState : 1; // 0x29e4
	FAthenaAnimationIKLimbStretch IKLimbStretchParams; // 0x29e8
	FAthenaAnimationLadder LadderAnimationParams; // 0x29f8
	FAthenaAnimationTalking Talking; // 0x2ca8
	FAthenaAnimationPitchControlStates PitchTargetingControlStates; // 0x2ce8
	FAthenaAnimationObjectTargetingOptions PitchTargetingParameters; // 0x2e50
	FAthenaAnimationObjectTargetingOptions WantedPitchTargetingParameters; // 0x2e8c
	FAthenaAnimationPitchAlpha PitchTargetingAlpha; // 0x2ec8
	FAthenaAnimationPitchShoulders PitchShoulderParams; // 0x2edc
	FAthenaAnimationMountedWeapon MountedWeaponAnimationParams; // 0x2ef8
	FAthenaAnimationFootPlanting FootPlanting; // 0x2ff0
	EStairAnimations StairAnimationState; // 0x3048
	FAthenaAnimationPulleyControl PulleyControl; // 0x3050
	FAthenaAnimationPulleyControlAnimData PulleyControlAnimData; // 0x3090
	FAthenaAnimationKeyedInstrumentAnimData KeyedInstrumentAnimData; // 0x30d8
	FAthenaAnimationAI AIAnimationParams; // 0x30f0
	FAthenaAnimationLocomotionAlternateAnimData LocomotionDrunk; // 0x33d8
	FAthenaAnimationLocomotionAlternateAnimData LocomotionLimp; // 0x3428
	FAthenaAnimationLocomotionAlternateAnimData LocomotionPegLeg; // 0x3478
	FAthenaAnimationLocomotionAlternateAnimData LocomotionHotCoals; // 0x34c8
	TArray<FAthenaAnimationSpawnBase> AISpawnStruct; // 0x3518
	TArray<FAthenaAnimationSkeletonFlee> AIFleeLoadingStruct; // 0x3528
	FAthenaAnimationSkeletonFleeInGraph AIFleePlayingStruct; // 0x3538
	FAthenaAnimationSkeletonScream SkeletonScream; // 0x3570
	UBlendSpace1D* PitchAnimationToPlay; // 0x3578
	FAthenaAnimationShopInteractionParams ShopInteractionParams; // 0x3580
	FAthenaAnimationEmoteAnimgraphStructure EmoteParams; // 0x35b0
	FAthenaAnimationSkeletonCurseAnimations SkeletonCurseAnims; // 0x36d8
	FAthenaAnimationHarpoonLauncherAnimData HarpoonLauncherAnims; // 0x3700
	FAthenaAnimationAIKnockback AIKnockbackStruct; // 0x3728
	FAthenaAnimationHitReactsAnimData HitReactionsAnimationData; // 0x3758
	FAthenaAnimationHitReactsSelectedAnimations HitReactionsSelectedAnimationData; // 0x3798
	FAthenaAnimationHitReactParams HitReactionsAnimationParams; // 0x37e0
	float HitReactAdditiveBlendAmount; // 0x380c
	float WieldedItemPoseBlendTime; // 0x3810
	float UpperBodyPoseBlendTime; // 0x3814
	float AimingAndPitchOverride; // 0x3818
	float FacialOverlayBlendWeight; // 0x381c
	FRotator PitchShoulderRotation; // 0x3820
	FRotator PitchClavicleRotation; // 0x382c
	float RightArmPitchAlpha; // 0x3838
	float LeftArmPitchAlpha; // 0x383c
	float SpineRotation; // 0x3840
	FAthenaAnimationStunData StunData; // 0x3844
	UBlendSpace1D* HitReactItem; // 0x3850
	float WorldDelta; // 0x3858
	float CapstanAngularVelocityWanted; // 0x385c
	FAthenaAnimationPlayingFacialAnimations PlayingFacialAnimations; // 0x3860
	FAthenaAnimationPlayingEquipAnimations PlayingEquipAnimations; // 0x38a0
	float CharacterPitch; // 0x38b8
	float TargetingPitch; // 0x38bc
	FAthenaAnimationObjectLocomotionAnimations ItemAlternateLocomotionAnims; // 0x38c0
	FAthenaAnimationObjectIdleAnimations ItemAlternateIdleAnims; // 0x3900
	FAthenaAnimationObjectActionContinuousStructPitchOverride ItemPrimaryContinousUseAnimsPitchOverride; // 0x3918
	FAthenaAnimationObjectActionContinuousStructPitchOverride ItemSecondaryContinousUseAnimsPitchOverride; // 0x3990
	FAthenaAnimationObjectActionContinuousStructPitchOverride ItemPrimaryContinousUseAlternateAnimsPitchOverride; // 0x3a08
	FAthenaAnimationObjectActionContinuousStructPitchOverride ItemSecondaryContinousUseAlternateAnimsPitchOverride; // 0x3a80
	FAthenaAnimationObjectActionContinuousSwimming ItemPrimaryContinousUseSwimmingAnimsPitchOverride; // 0x3af8
	FAthenaAnimationObjectActionContinuousSwimming ItemSecondaryContinousUseSwimmingAnimsPitchOverride; // 0x3b18
	FAthenaAnimationObjectActionContinuousSwimming ItemPrimaryContinousUseSwimmingAlternateAnimsPitchOverride; // 0x3b38
	FAthenaAnimationObjectActionContinuousSwimming ItemSecondaryContinousUseSwimmingAlternateAnimsPitchOverride; // 0x3b58
	FAthenaAnimationObjectJumpingAnimationsPitchOverride ItemPrimaryContinousUseJumpingAnimsPitchOverride; // 0x3b78
	FAthenaAnimationObjectJumpingAnimationsPitchOverride ItemSecondaryContinousUseJumpingAnimsPitchOverride; // 0x3b98
	FAthenaAnimationObjectJumpingAnimationsPitchOverride ItemPrimaryContinousUseJumpingAlternateAnimsPitchOverride; // 0x3bb8
	FAthenaAnimationObjectJumpingAnimationsPitchOverride ItemSecondaryContinousUseJumpingAlternateAnimsPitchOverride; // 0x3bd8
	FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemPrimaryOneShotAnimsPitchOverride; // 0x3bf8
	FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemSecondaryOneShotAnimsPitchOverride; // 0x3c20
	FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemPrimaryOneShotAlternateAnimsPitchOverride; // 0x3c48
	FAthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemSecondaryOneShotAlternateAnimsPitchOverride; // 0x3c70
	char ZeroLocomotionForced : 1; // 0x3c98
	char ConcealedInLoadable : 1; // 0x3c98
	char AIUseAlternateLocomotion : 1; // 0x3c98
	char EmoteIKIsOff : 1; // 0x3c98
	char InBlockingInto : 1; // 0x3c98
	char IsAI : 1; // 0x3c98
	char IsLocallyControlled : 1; // 0x3c98
	char IsHit : 1; // 0x3c98
	char InRecover : 1; // 0x3c99
	char InWarmUp : 1; // 0x3c99
	char PlayingFullBodyAnimation : 1; // 0x3c99
	char PlayingUpperBodyAnimation : 1; // 0x3c99
	char PlayingRightArmOverlayAnimation : 1; // 0x3c99
	char PlayingSpineOverlayAnimation : 1; // 0x3c99
	char PlayingLeftArmOverlayAnimation : 1; // 0x3c99
	char IsUsingFullBodyOverlayPose : 1; // 0x3c99
	char IsUsingLocalIKPose : 1; // 0x3c9a
	char IsRightShoulderActive : 1; // 0x3c9a
	char IsLeftShoulderActive : 1; // 0x3c9a
	char ControllableObjectTypeHasValidTarget : 1; // 0x3c9a
	char UseHandsAndFootplantingIK : 1; // 0x3c9a
	char IKLODActive : 1; // 0x3c9a
	char LODSolverActive : 1; // 0x3c9a
	char ObjectPitchTargetingActive : 1; // 0x3c9a
	char ObjectOrIKEmoteActive : 1; // 0x3c9b
	char ObjectOrWheelCapstanAndNotDocking : 1; // 0x3c9b
	char HitReact1Active : 1; // 0x3c9b
	char HitReact2Active : 1; // 0x3c9b
	char AthenaCharacterIsValid : 1; // 0x3c9b
	char UsePrimaryActionPitchOverride : 1; // 0x3c9b
	char UseSecondaryActionPitchOverride : 1; // 0x3c9b
};

struct ULoadSequencerAnimationStepDesc {
	TArray<ULevelSequence*> LevelSequencesToLoad; // 0x80
	FQuestVariableActor TargetActorToSpawn; // 0x90
	FQuestVariableActor LevelSequenceActorSpawnLocation; // 0xa0
	FQuestVariableActor SequencerCutSceneActor; // 0xb0
	bool AttachToTargetActor; // 0xc0
	FName AttachSocketName; // 0xc4
	bool PlayGlobally; // 0xcc
};

struct UTaleQuestUpdateBuoyancyAutoSinkSettingForItemStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UStatusResponseApplyStatusPlayerCurse {
	EPlayerCurseTag CurseTag; // 0x30
	FStatus Status; // 0x38
};

struct UParticleModule {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct USoundWaveProcedural {
	int32_t CompressionQuality; // 0x50
	char bLooping : 1; // 0x54
	char bStreaming : 1; // 0x54
	int32_t StreamingPriority; // 0x58
	char bMature : 1; // 0x5c
	char bManualWordWrap : 1; // 0x5c
	char bSingleLine : 1; // 0x5c
	ESoundGroup SoundGroup; // 0x60
	FString SpokenText; // 0x68
	float Volume; // 0x78
	float Pitch; // 0x7c
	int32_t NumChannels; // 0x80
	int32_t SampleRate; // 0x84
	int32_t RawPCMDataSize; // 0x88
	TArray<FSubtitleCue> Subtitles; // 0x90
	TArray<FLocalizedSubtitle> LocalizedSubtitles; // 0xa0
};

struct UBTTask_SelectFoodSource {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct ARiddleMap {
	int32_t CanvasWidth; // 0x7d8
	int32_t CanvasHeight; // 0x7dc
	float RevealDuration; // 0x7e0
	float RiddleGateCompleteRampInDuration; // 0x7e4
	float RiddleGateCompleteRampOutDuration; // 0x7e8
	FRiddleTextRenderer RiddleTextRenderer; // 0x7f0
	FRiddleMapContents Contents; // 0x848
	FStringAssetReference MapInventoryTexturePath; // 0x860
	float Rotation; // 0x870
};

struct UAnimComposite {
	FAnimTrack AnimationTrack; // 0x78
};

struct AModalInteraction {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UAthenaAnimationWaterSlideDataAsset {
	UAnimSequence* Into; // 0x28
	UAnimSequence* Action; // 0x30
	UAnimSequence* Outof; // 0x38
};

struct ATestLevelScriptActor {
	ETestCategory Category; // 0x3e0
	ETestArea Area; // 0x3e1
	bool VisualTest; // 0x3e2
	bool RunInEditor; // 0x3e3
	bool RunOnServer; // 0x3e4
	bool RequiresServices; // 0x3e5
	TArray<FTestLevelMetadataEntry> AdditionalMetadata; // 0x3e8
	EPerformanceCaptureType CaptureType; // 0x3f8
	ETestAutomationPlayModeOverride PlayModeOverride; // 0x3f9
	float TestTimeout; // 0x3fc
	float TestPausedTimeout; // 0x400
	TArray<FString> VerboseLogCategories; // 0x408
	TArray<int32_t> ClientsRunning; // 0x418
	TArray<int32_t> ClientIds; // 0x428
	TArray<FClientPawnDetails> ClientPawns; // 0x438
	TArray<AActor*> SpawnedActors; // 0x448
	int32_t NextSpawnedActorIndex; // 0x458
};

struct USmokeTestCommandlet {
	FString HelpDescription; // 0x28
	FString HelpUsage; // 0x38
	FString HelpWebLink; // 0x48
	TArray<FString> HelpParamNames; // 0x58
	TArray<FString> HelpParamDescriptions; // 0x68
	char IsServer : 1; // 0x78
	char IsClient : 1; // 0x78
	char IsEditor : 1; // 0x78
	char LogToConsole : 1; // 0x78
	char ShowErrorCount : 1; // 0x78
};

struct UAthenaDebugMenuComponent {
	ADebugMenu* DebugMenuInstance; // 0xf0
};

struct AAmmoPouchItemProxy {
	UWwiseEvent* OnPouchOpenedSfx; // 0x798
	FWwiseEmitter OpenPouchEmitter; // 0x7a0
	ETrackedActorType TrackedActorType; // 0x7c0
	UDitherComponent* DitherComponent; // 0x7c8
	float FadeDuration; // 0x7d0
};

struct AExponentialHeightFog {
	UExponentialHeightFogComponent* Component; // 0x3d0
	char bEnabled : 1; // 0x3d8
};

struct UBaseFoodItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UDeliverableRedirectionBootyContextHandler {
	TArray<EBootyTypes> TargetBootyTypes; // 0x30
};

struct UStatConditionProxyItemInfoTargetSelector {
	EStatConditionTarget Target; // 0x28
};

struct UBTTask_PlaySound {
	USoundCue* SoundToPlay; // 0x60
};

struct UContestWaitForItemHandInStepDesc {
	FQuestVariableActor Item; // 0x80
};

struct ASkeletalMeshFloatingItemProxy {
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x630
	UBoxComponent* BaseComponent; // 0x650
	FNetTimeStampCalculator MovementTimeStamp; // 0x688
	AActor* TutorialOwner; // 0x6f8
	bool IsTutorialProxy; // 0x700
	FReplicatedPhysicsState ReplicatedPhysicsState; // 0x708
	bool ForceKeepTickActive; // 0x758
	ECollisionChannel CachedAutoAimCollisionChannel; // 0x788
	ECollisionResponse CachedVehicleCollisionResponse; // 0x789
};

struct UInvalidShipCustomizationCategory {
	FText Name; // 0x28
	FName UniqueTextIdentifier; // 0x60
	FStringAssetReference IconPath; // 0x68
};

struct USplineWithEmitterComponent {
	UWwiseObjectPoolWrapper* SplineAudioPool; // 0x608
	UWwiseEvent* LoopingSoundPlayEvent; // 0x610
	UWwiseEvent* LoopingSoundStopEvent; // 0x618
	UWwiseEmitterComponent* WwiseEmitterComponent; // 0x620
};

struct AWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UEatItemConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UTaleEnchantedSpyglassService {
	UTaleQuestToolServiceDesc* ServiceDesc; // 0x60
	TArray<UItemDesc*> WieldableDescs; // 0x68
};

struct UShroudBreakerTrackerComponent {
	bool ShroudBreakerActive; // 0xd0
};

struct USoundNodeWavePlayer {
	USoundWave* SoundWaveAssetPtr; // 0x38
	USoundWave* SoundWave; // 0x58
	char bLooping : 1; // 0x60
};

struct UActorComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct ABuoyantActor {
	UStaticMeshComponent* Mesh; // 0x490
	UShapeComponent* BaseComponent; // 0x498
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x4a0
	UBuoyancyComponent* BuoyancyComponent; // 0x4c0
	UDitherComponent* DitherComponent; // 0x4c8
	FNetTimeStampCalculator MovementTimeStamp; // 0x4d0
	FReplicatedPhysicsState ReplicatedPhysicsState; // 0x540
	UWaterInteractionComponent* WaterInteractionComponent; // 0x598
};

struct AAthenaWorldSettings {
	FVector2D WorldMax; // 0x5c0
	FVector2D WorldMapMin; // 0x5c8
	FVector2D WorldMapMax; // 0x5d0
	float AdventureDistanceFromWorldSafeRegionEdgeToKillZone; // 0x5dc
	float ArenaDistanceFromWorldSafeRegionEdgeToKillZone; // 0x5e0
	float EndOfWorldWarningOffset; // 0x5e4
	float AdventureDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting; // 0x5ec
	float ArenaDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting; // 0x5f0
	int32_t EndOfWorldWarningLightingIndex; // 0x5f4
	UBuoyantObjectSpawnParamsDataAsset* BuoyantObjectSpawnParams; // 0x5f8
	USeaFortsWorldDataAsset* SeaFortsData; // 0x600
	USeaRockDataAsset* SeaRockLocations; // 0x608
	FStringAssetReference TradeRoutes; // 0x610
	TArray<FAthenaStreamedLevelItem> ManuallyStreamedLevels; // 0x620
	USpireStreamedLevelDataAsset* SpireLevels; // 0x630
	FKrakenWorldSettingsParams KrakenParams; // 0x638
	FTinySharkWorldSettingsParams TinySharkParams; // 0x639
	FAIShipWorldSettings AIShipParams; // 0x640
	UIslandDataAsset* IslandDataAsset; // 0x658
	UPrebakedIslandAsset* PrebakedIslandData; // 0x660
	UMapTableCanvasDataAsset* MapTableCanvasData; // 0x668
	UVoyageDescDataAsset* TutorialTale; // 0x670
	float DevilsShroudPlayerDamageMaxDamage; // 0x678
	bool AllowCompanyOnboardingTutorial; // 0x67c
	bool AllowContextualTutorial; // 0x67d
	bool ShowMapTable; // 0x67e
	bool UseDevDefinition; // 0x67f
	TArray<UVoyageCheckpointProposalDesc*> NPCOnBeachVoyageCheckpoints; // 0x680
	UGameEventSchedulerSettingsAsset* DefaultGameEventSchedulerSettings; // 0x690
	TArray<FAthenaWorldSettingsGameEventSchedulerSettingsConfiguration> GameEventSchedulerSettingsConfigurations; // 0x698
	UStormServiceAsset* StormServiceSettings; // 0x6a8
	TArray<FWorldSafeZone> SafeZonesIncludingRequiresShroudBreaker; // 0x6b0
	TArray<FWorldSafeZone> SafeZonesExcludingRequiresShroudBreaker; // 0x6c0
	TArray<FWorldSafeZone> MainWorldSafeZones; // 0x6d0
	TArray<FWorldSafeZone> OverridingSafeZones; // 0x6e0
};

struct UBTTask_EatFood {
	UPetFeedingDataAsset* FeedingDataAsset; // 0x60
};

struct UNavMeshRenderingComponent {
	float MinDrawDistance; // 0x2b8
	float LDMaxDrawDistance; // 0x2c0
	float CachedMaxDrawDistance; // 0x2c4
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2c8
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2c9
	char bAlwaysCreatePhysicsState : 1; // 0x2cc
	char bGenerateOverlapEvents : 1; // 0x2cc
	char bMultiBodyOverlap : 1; // 0x2cc
	char bCheckAsyncSceneOnMove : 1; // 0x2cc
	char bTraceComplexOnMove : 1; // 0x2cc
	char bReturnMaterialOnMove : 1; // 0x2cc
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2cc
	char bAllowCullDistanceVolume : 1; // 0x2cc
	char bHasMotionBlurVelocityMeshes : 1; // 0x2cd
	char bRenderInMainPass : 1; // 0x2cd
	char bRenderInCustomPrePass : 1; // 0x2cd
	char bReflected : 1; // 0x2cd
	char bReflectedOnLowQuality : 1; // 0x2cd
	char bFFTWaterMask : 1; // 0x2cd
	char bVolumeFogMask : 1; // 0x2cd
	char bAffectsFlatWater : 1; // 0x2ce
	char bGPUParticlesKillPlane : 1; // 0x2ce
	char bDontCull : 1; // 0x2ce
	char bDontSizeOnScreenCull : 1; // 0x2ce
	float OverriddenShadowMinTexelSize; // 0x2d0
	bool bOverrideShadowMinSizeCulling; // 0x2d4
	bool bOverrideShadowCascadesExclusion; // 0x2d5
	EExcludeFromCascades ExcludedShadowCascades; // 0x2d6
	char bReceivesDecals : 1; // 0x2d8
	char bOwnerNoSee : 1; // 0x2d8
	char bOnlyOwnerSee : 1; // 0x2d8
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d8
	char bIsACloud : 1; // 0x2d8
	char bUseAsOccluder : 1; // 0x2d8
	char bSelectable : 1; // 0x2d8
	char bForceMipStreaming : 1; // 0x2d8
	char bHasPerInstanceHitProxies : 1; // 0x2d9
	char CastShadow : 1; // 0x2d9
	char bAffectDynamicIndirectLighting : 1; // 0x2d9
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x2d9
	char bAffectDistanceFieldLighting : 1; // 0x2d9
	char bCastDynamicShadow : 1; // 0x2d9
	char bCastStaticShadow : 1; // 0x2d9
	char bCastVolumetricTranslucentShadow : 1; // 0x2d9
	char bSelfShadowOnly : 1; // 0x2da
	char bCastFarShadow : 1; // 0x2da
	char bCastInsetShadow : 1; // 0x2da
	char bCastCinematicShadow : 1; // 0x2da
	char bCastHiddenShadow : 1; // 0x2da
	char bCastShadowAsTwoSided : 1; // 0x2da
	char bCastShadowOnLowQuality : 1; // 0x2da
	char bLightAsIfStatic : 1; // 0x2da
	char bLightAttachmentsAsGroup : 1; // 0x2db
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2dc
	bool bHasCachedStaticLighting; // 0x2dd
	bool bStaticLightingBuildEnqueued; // 0x2de
	char bIgnoreRadialImpulse : 1; // 0x2e0
	char bIgnoreRadialForce : 1; // 0x2e0
	char AlwaysLoadOnClient : 1; // 0x2e0
	char AlwaysLoadOnServer : 1; // 0x2e0
	char bUseEditorCompositing : 1; // 0x2e0
	char bRenderCustomDepth : 1; // 0x2e0
	char bAllowVelocityInMaterial : 1; // 0x2e0
	int32_t CustomDepthStencilValue; // 0x2e4
	int32_t TranslucencySortPriority; // 0x2e8
	int32_t VisibilityId; // 0x2ec
	float LpvBiasMultiplier; // 0x2f4
	float FarCascadeLPVBiasMultiplier; // 0x2f8
	float LpvIntensityMultiplier; // 0x2fc
	FCustomPrimitiveData CustomPrimitiveData; // 0x300
	FBodyInstance BodyInstance; // 0x310
	char bAffectRain : 1; // 0x490
	char bCanEverAffectNavigation : 1; // 0x490
	char bSkipRenderingInOuterLPVCascades : 1; // 0x490
	char bEnableMergeCollisionComponents : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerUnderwater : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerUnderwater : 1; // 0x491
	char bCanRenderAboveAndBelowWaterAtSameTime : 1; // 0x491
	float BoundsScale; // 0x498
	float OcclusionBoundsScale; // 0x49c
	float LastRenderTime; // 0x4a0
	bool bGPUVisibility; // 0x4a4
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x4a5
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x4a6
	FScriptMulticastDelegate OnComponentHit; // 0x4f0
	FScriptMulticastDelegate OnComponentBeginOverlap; // 0x4f1
	FScriptMulticastDelegate OnComponentEndOverlap; // 0x4f2
	FScriptMulticastDelegate OnComponentWake; // 0x4f3
	FScriptMulticastDelegate OnComponentSleep; // 0x4f4
	UPrimitiveComponent* LODParentPrimitive; // 0x528
	FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x530
	UPrimitiveComponent* MergedCollisionComponentParent; // 0x580
};

struct URegisterTransientActorStep {
	URegisterTransientActorStepDesc* Desc; // 0x88
};

struct UAggressiveGhostShipEncounterDataAsset {
	FWeightedProbabilityRangeOfRanges TimeBetweenSpawns; // 0x28
	FWeightedProbabilityRangeOfRanges TimeBetweenFormationMemberSpawns; // 0x58
	TArray<FAggressiveGhostShipEncounterWaveDesc> WaveDescs; // 0x88
	UBuoyantObjectSpawnProfileDataAsset* BarrelsOfPlentySpawnProfileOverride; // 0x98
	AAggressiveGhostShip* Ship; // 0xa0
	AAggressiveGhostShipMine* MineActorClass; // 0xa8
	AAggressiveGhostShipAnchorDrop* AnchorDropActorClass; // 0xb0
	EAggressiveGhostShipAllegiance Allegiance; // 0xb8
	bool CanAttackEnemyGhostShips; // 0xb9
};

struct UIslandMaterialStatusZone {
	TArray<FIslandMaterialZoneStatusMapping> StatusMappings; // 0x38
	TMap<UPhysicalMaterial*, float> ActiveMaterialIntensities; // 0x48
};

struct UEnvQueryGenerator_Sphere {
	TArray<FAIDataProviderFloatValue> Radiuses; // 0x90
	FAIDataProviderIntValue NumberOfVerticalCircles; // 0xa0
	FAIDataProviderIntValue NumberOfHorizontalCircles; // 0xd0
	char DefineFirstPointDirection : 1; // 0x100
	FEnvDirection FirstPointDirection; // 0x108
	UEnvQueryContext* Centre; // 0x128
	FAIDataProviderFloatValue ZOffsetFromCentre; // 0x130
};

struct UMaterialAccessibilityService {
	UMaterialParameterCollection* MaterialAccessibilityParamCollection; // 0x80
	FStringAssetReference MaterialAccessibilityAssetRef; // 0x88
};

struct ACannonBall {
	UInventoryItemComponent* InventoryItem; // 0x790
	UConsumableWieldableComponent* ConsumableWieldable; // 0x798
};

struct AFrontendGameMode {
	char bDisableAsyncOcclusionChecking : 1; // 0x3d8
	char bUseSeamlessTravel : 1; // 0x3d8
	char bPauseable : 1; // 0x3d8
	char bStartPlayersAsSpectators : 1; // 0x3d8
	char bDelayedStart : 1; // 0x3d8
	FString OptionsString; // 0x3e0
	APawn* DefaultPawnClass; // 0x3f0
	AHUD* HUDClass; // 0x3f8
	int32_t NumSpectators; // 0x400
	int32_t NumPlayers; // 0x404
	int32_t NumBots; // 0x408
	float MinRespawnDelay; // 0x40c
	AGameSession* GameSession; // 0x410
	int32_t NumTravellingPlayers; // 0x418
	FText DefaultPlayerName; // 0x420
	ULocalMessage* EngineMessageClass; // 0x458
	APlayerController* PlayerControllerClass; // 0x460
	ASpectatorPawn* SpectatorClass; // 0x468
	APlayerController* ReplaySpectatorPlayerControllerClass; // 0x470
	APlayerState* PlayerStateClass; // 0x478
	AGameState* GameStateClass; // 0x480
	AGameState* GameState; // 0x488
	TArray<APlayerState*> InactivePlayerArray; // 0x490
	TArray<FGameClassShortName> GameModeClassAliases; // 0x4b0
	float InactivePlayerStateLifeSpan; // 0x4c0
	bool bHandleDedicatedServerReplays; // 0x4c4
};

struct UBTTask_ApplyStatusComposite {
	bool bOneShot; // 0x60
	FAIDataProviderFloatValue ContinuousStatusDuration; // 0x68
	FStatus StatusToApply; // 0x98
};

struct UCutsceneDataAsset {
	TArray<FCutsceneGroup> CutsceneGroups; // 0x28
};

struct UEnvQueryTest_Distance {
	EEnvTestDistance TestMode; // 0x170
	UEnvQueryContext* DistanceTo; // 0x178
};

struct UWidgetNavigation {
	FWidgetNavigationData Up; // 0x28
	FWidgetNavigationData Down; // 0x3c
	FWidgetNavigationData Left; // 0x50
	FWidgetNavigationData Right; // 0x64
	FWidgetNavigationData Next; // 0x78
	FWidgetNavigationData Previous; // 0x8c
};

struct AMockInventoryItem {
	UInventoryItemComponent* InventoryItem; // 0x3d0
};

struct UDialogueWave {
	char bMature : 1; // 0x28
	FString SpokenText; // 0x30
	TArray<FDialogueContextMapping> ContextMappings; // 0x40
	FGuid LocalizationGUID; // 0x50
};

struct UShantyService {
	TArray<AEnsemble*> EnsembleActors; // 0x30
	UShantySettings* ShantySettings; // 0x40
};

struct UTaleQuestRootFrame {
	UObject* Definition; // 0x30
};

struct UMechanismAnimationEvent_OneShotVFX {
	float StartTime; // 0x78
	FMechanismAnimationEvent_VFXParams VFXParams; // 0x80
};

struct UAILoadoutItemSpawnRequirement {
	TArray<ULoadoutAsset*> AllowedLoadouts; // 0x50
};

struct UCoherentUIGTLiveView {
	FString LinkName; // 0xc8
	UTextureRenderTarget2D* Texture; // 0xd8
};

struct ADockableBase {
	USkeletalMeshComponent* SkeletalMeshComponent; // 0x508
	float DetachCutOffTime; // 0x510
	ULevelSequence* FirstPersonLevelSequenceToPlay; // 0x518
	bool ShouldInteractorDock; // 0x520
	UInteractableComponent* InteractableComponent; // 0x528
	FText DockableCutsceneName; // 0x530
	FText InteractWithCutsceneText; // 0x568
	FName DockingSocketName; // 0x5a0
};

struct ADebugDioramaCreator {
	UAIDioramaDesc* AIDioramaDesc; // 0x428
	UAIDioramaLocationSourceComponent* Location; // 0x430
	UAIDioramaController* AIDioramaController; // 0x438
};

struct UHasRequiredCookingStateStatCondition {
	ECookingState RequiredState; // 0x30
};

struct URiddleQuestData {
	UWwiseEvent* DefaultGateCompletedAudioCue; // 0x28
	UWwiseEvent* DefaultGateCompletedMusicCue; // 0x30
	TArray<UItemDesc*> AllTreasureChests; // 0x38
};

struct UAnimationAsset {
	USkeleton* Skeleton; // 0x28
	TArray<UAnimMetaData*> MetaData; // 0x40
};

struct UAIEmergentCaptainSpawner {
	UNamedAIDataAsset* NamedAIDataAsset; // 0x568
};

struct UBasePromptCoordinator {
	AAthenaPlayerController* PlayerController; // 0x28
	UPrioritisedPromptsManager* PrioritisedPromptsManager; // 0x40
	ACharacter* CharacterWithRegisteredEvents; // 0x48
};

struct UFaunaMovementComponent {
	TArray<FAIStrategyMovementProperties> AIStrategyMovementProperties; // 0x558
	float BlendSpeed; // 0x568
	bool bCreateDisturbance; // 0x56c
	float DisturbanceSize; // 0x570
	float DisturbanceVelocityScale; // 0x574
	float OrientationBlendSpeed; // 0x578
	float OrientationMaxPitch; // 0x57c
	float UpdateOrientationFrequency; // 0x580
	float MinStairAngle; // 0x584
	float MinStairVelocityDampen; // 0x588
	TArray<UAIStrategyId*> SubscribedStairClimbStrategies; // 0x590
};

struct UMechanismActionComponent {
	EMechanismActionType ActionType; // 0xd8
	EMechanismActionActivationMode ActivationMode; // 0xd9
	TArray<AActor*> TriggerActors; // 0xe0
	FScriptMulticastDelegate OnMechanismTriggerRegisteredWithActionDelegate; // 0xf0
	FScriptMulticastDelegate OnMechanismTriggerUnregisteredWithActionDelegate; // 0x100
	FScriptMulticastDelegate OnMechanismActionCompletedDelegate; // 0x110
	FScriptMulticastDelegate OnMechanismActionStateChangedDelegate; // 0x120
	FScriptMulticastDelegate OnMechanismActionResetDelegate; // 0x130
	EMechanismActionState ActionState; // 0x150
};

struct UTaleQuestTinySharkService {
	TArray<ATinySharkExperience*> ActiveExperiences; // 0x60
};

struct UBucketItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct AAmbientLightSource {
	UAmbientLightSourceComponent* AmbientLightSourceComponent; // 0x3e0
};

struct AAthenaGhostPlayerCharacterMock {
	UStreamingLocationComponent* StreamingLocationComponent; // 0x1ac0
	AGhostShipTickManager* GhostShipTickManager; // 0x1b58
};

struct UMechanismProximityResetComponent {
	float Delay; // 0x5b0
};

struct UClientSkeletalMeshComponent {
	EAnimationMode AnimationMode; // 0x6d0
	UObject* AnimBlueprintGeneratedClass; // 0x6d8
	UAnimInstance* AnimScriptInstance; // 0x6e0
	FSingleAnimationPlayData AnimationData; // 0x6e8
	TArray<FTransform> CachedLocalAtoms; // 0x718
	TArray<FTransform> CachedSpaceBases; // 0x728
	float GlobalAnimRateScale; // 0x760
	char bHasValidBodies : 1; // 0x764
	EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x768
	char bBlendPhysics : 1; // 0x76c
	char bEnablePhysicsOnDedicatedServer : 1; // 0x76c
	char bUpdateJointsFromAnimation : 1; // 0x76c
	char bDisableClothSimulation : 1; // 0x76c
	char bCollideWithEnvironment : 1; // 0x76c
	char bCollideWithAttachedChildren : 1; // 0x76c
	char bLocalSpaceSimulation : 1; // 0x76c
	char bClothMorphTarget : 1; // 0x76c
	char bResetAfterTeleport : 1; // 0x76d
	float TeleportDistanceThreshold; // 0x770
	float TeleportRotationThreshold; // 0x774
	float ClothBlendWeight; // 0x778
	FVector RootBoneTranslation; // 0x780
	char bNoSkeletonUpdate : 1; // 0x78c
	char bPauseAnims : 1; // 0x78c
	char bEnablePerPolyCollision : 1; // 0x78c
	UBodySetup* BodySetup; // 0x790
	char bAutonomousTickPose : 1; // 0x798
	char bForceRefpose : 1; // 0x798
	char bOldForceRefPose : 1; // 0x798
	char bShowPrePhysBones : 1; // 0x798
	char bRequiredBonesUpToDate : 1; // 0x798
	char bAnimTreeInitialised : 1; // 0x798
	char bEnableLineCheckWithBounds : 1; // 0x798
	FVector LineCheckBoundsScale; // 0x79c
	int32_t RagdollAggregateThreshold; // 0x7a8
	FScriptMulticastDelegate OnConstraintBroken; // 0x7b0
	bool UseRefPoseToInitialise; // 0x7c0
	float LastPoseTickTime; // 0x988
};

struct AWieldableItemSetMockCharacter {
	UWieldableItemSetComponent* WieldableItemSetComponent; // 0x5d8
};

struct UEnvQueryTest_Dot {
	FEnvDirection LineA; // 0x170
	FEnvDirection LineB; // 0x190
	EEnvTestDot TestMode; // 0x1b0
	bool bAbsoluteValue; // 0x1b1
};

struct ULevelStreamingPersistent {
	UWorld* WorldAsset; // 0x28
	FName PackageNameToLoad; // 0x50
	TArray<FName> LODPackageNames; // 0x58
	FTransform LevelTransform; // 0x80
	char bShouldBeVisibleInEditor : 1; // 0xbc
	char Blocked : 1; // 0xbc
	char bShouldBeLoaded : 1; // 0xbc
	char bShouldBeVisible : 1; // 0xbc
	char bShouldBlockOnLoad : 1; // 0xbc
	int32_t LevelLODIndex; // 0xc0
	char bDisableDistanceStreaming : 1; // 0xc4
	char bDrawOnLevelStatusMap : 1; // 0xc4
	FLinearColor LevelColor; // 0xc8
	TArray<ALevelStreamingVolume*> EditorStreamingVolumes; // 0xd8
	float MinTimeBetweenVolumeUnloadRequests; // 0xe8
	TArray<FString> Keywords; // 0xf0
	FScriptMulticastDelegate OnLevelLoaded; // 0x100
	FScriptMulticastDelegate OnLevelUnloaded; // 0x110
	FScriptMulticastDelegate OnLevelShown; // 0x120
	FScriptMulticastDelegate OnLevelHidden; // 0x130
	ULevel* LoadedLevel; // 0x200
	ULevel* PendingUnloadLevel; // 0x208
};

struct UWardrobeDataAsset {
	TArray<UWardrobeExcludeDataAsset*> ExcludeDataAssets; // 0xc8
	TArray<FMeshPatchEntry> AssetMap; // 0xd8
};

struct ULandscapeLayerInfoObject {
	FName LayerName; // 0x28
	UPhysicalMaterial* PhysMaterial; // 0x30
	float Hardness; // 0x38
};

struct URichTextBlock {
	FText Text; // 0x138
	DelegateProperty TextDelegate; // 0x170
	FSlateFontInfo Font; // 0x180
	FLinearColor Color; // 0x1c0
	ETextJustify Justification; // 0x1d0
	bool AutoWrapText; // 0x1d1
	float WrapTextAt; // 0x1d4
	FMargin Margin; // 0x1d8
	float LineHeightPercentage; // 0x1e8
	TArray<URichTextBlockDecorator*> Decorators; // 0x1f0
};

struct ADefaultPawn {
	float BaseTurnRate; // 0x448
	float BaseLookUpRate; // 0x44c
	UPawnMovementComponent* MovementComponent; // 0x450
	USphereComponent* CollisionComponent; // 0x458
	UStaticMeshComponent* MeshComponent; // 0x460
	char bAddDefaultMovementBindings : 1; // 0x468
};

struct USirenSongAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UUIResponceComponent {
	AAthenaPlayerController* OwningPlayerController; // 0xc8
};

struct UInstancedActorDelegateBinding {
	TArray<FBlueprintInstancedActorDelegateBinding> ActorDelegateBindings; // 0x28
};

struct UShadowAIFormDataAsset {
	float LightStateActivationTime; // 0x90
	float LightStateCooldown; // 0x94
	float PlayerLanternIdleLightRange; // 0x98
	float PlayerLanternRaisedLightRange; // 0x9c
	float FlareLightRange; // 0xa0
	float LightExposureStunDuration; // 0xa4
	TArray<EFlameOfFateType> FlamePhobias; // 0xa8
	bool AfraidOfLight; // 0xb8
};

struct UNPCDialogOptionDialogSelectDynamic {
	FText Text; // 0x80
	int32_t LinkedDialog; // 0xb8
};

struct UMaterialExpressionAbs {
	FExpressionInput Input; // 0x70
};

struct UConsumableWieldableComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UPetCustomizationCategory {
	FName PetPreviewCamera; // 0x80
};

struct UAIItemDropComponentRankProgressionList {
	TArray<UAIItemSpawnRankProgression*> AllProgressions; // 0x28
};

struct UInterpTrackInstVectorMaterialParam {
	TArray<UMaterialInstanceDynamic*> MaterialInstances; // 0x28
	TArray<FVector> ResetVectors; // 0x38
	TArray<FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48
	UInterpTrackVectorMaterialParam* InstancedTrack; // 0x58
};

struct UAthenaAIItemParamsDataAsset {
	TArray<FAthenaAIItemEngageEnemyMethods> ItemEngageEnemyMethods; // 0x28
};

struct UTrackResponseCoordinatorStep {
	UTrackResponseCoordinatorStepDesc* StepDesc; // 0x90
};

struct UMysteriousNoteDesc {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct UPetCustomisationOverrideMappingsDataAsset {
	TArray<FPetCustomiationOverrideMappingEntry> MappingEntries; // 0x28
};

struct UWieldablePetHungerComponent {
	UWieldablePetHungerDataAsset* HungerData; // 0xc8
	TArray<FOverlapResult> CachedOverlappingActors; // 0xf8
	TArray<FWieldablePetFoodSourceEntry> ActiveFoodSources; // 0x108
	TArray<FWieldablePetFoodSourceEntry> FoodSourcesToRemove; // 0x118
};

struct UAddMarkToTornMapAtActorLocationStepDesc {
	FQuestVariableActor MarkLocation; // 0xa0
};

struct UVectorFieldAnimated {
	UTexture2D* Texture; // 0x48
	EVectorFieldConstructionOp ConstructionOp; // 0x50
	int32_t VolumeSizeX; // 0x54
	int32_t VolumeSizeY; // 0x58
	int32_t VolumeSizeZ; // 0x5c
	int32_t SubImagesX; // 0x60
	int32_t SubImagesY; // 0x64
	int32_t FrameCount; // 0x68
	float FramesPerSecond; // 0x6c
	char bLoop : 1; // 0x70
	UVectorFieldStatic* NoiseField; // 0x78
	float NoiseScale; // 0x80
	float NoiseMax; // 0x84
};

struct UMechanismEvent {
	AActor* Owner; // 0x28
};

struct UFishItemConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UBurrowHealAIAbilityParams {
	APawn* AllyTypeToHeal; // 0x140
	float HealDuration; // 0x148
	float RadiusForValidTargets; // 0x14c
	int32_t NumberOfTargetsToHeal; // 0x150
	FStatus StatusToApplyOnHeal; // 0x158
};

struct UFireBreathAIAbility {
	APawn* Owner; // 0x78
	UFireBreathAIAbilityParams* SetupAbilityParams; // 0x80
	AStatusEffectOverlapZone* FireBreathEmitter; // 0x88
	UVFXSpawnerComponent* FireVFX; // 0x90
};

struct UColorTexture {
	FLinearColor Color; // 0x138
};

struct UStatusResponseApplyStatusShipCurse {
	EShipCurseTag ShipCurseTag; // 0x30
	FStatus Status; // 0x38
	float Duration; // 0x50
};

struct UBuriedItemStepDesc {
	FQuestVariableClass ItemType; // 0x80
	FQuestVariableItemSpawnDataType ItemSpawnData; // 0x90
	FQuestVariableGuid ItemId; // 0xa0
	float DigRadius; // 0xb0
	FQuestVariableActor SpawnedItemInfo; // 0xb8
	FQuestVariablePlayerActor DiscoveringCharacter; // 0xc8
	bool TrackBuriedItem; // 0xd8
	bool MarkBuriedItemAsCritical; // 0xd9
	bool MarkActorAsPhased; // 0xda
	FText CriticalActorLostMessage; // 0xe0
	FQuestVariableClass MarkerClass; // 0x118
};

struct UBlendedPostProcessingZoneComponentBase {
	UCurveFloat* FadeCurveNormalised; // 0x820
	float BlendDistance; // 0x828
};

struct ULandscapeSplinesComponent {
	TArray<ULandscapeSplineControlPoint*> ControlPoints; // 0x588
	TArray<ULandscapeSplineSegment*> Segments; // 0x598
	TArray<UMeshComponent*> CookedForeignMeshComponents; // 0x5a8
};

struct UBlunderbussItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UGenerateDigLocationInRadiusStepDesc {
	FQuestVariableName IslandName; // 0x80
	FQuestVariableVector Center; // 0x90
	float RadiusInCm; // 0xa0
	FQuestVariableVector DigLocation; // 0xa8
};

struct AAsymmetricObjectServerManager {
	AAsymmetricClientObject* SpawnedObject; // 0x3e8
	USceneComponent* SceneComponent; // 0x3f0
	FStringAssetReference AsymmetricObjectAsset; // 0x3f8
	UClass* ForcedAsymmetricObjectAsset; // 0x408
};

struct UIslandDataAssetEntry {
	FName IslandName; // 0x28
	TArray<FTreasureMapData> TreasureMaps; // 0x30
	UWorldMapIslandDataAsset* WorldMapData; // 0x40
	UGeneratedLocationsDataAsset* UndergroundTreasureLocationsSource; // 0x48
	TArray<FVector> UndergroundTreasureLocations; // 0x50
	ULandmarkTreasureLocationsDataAsset* LandmarkTreasureLocationsSource; // 0x60
	UGeneratedLocationsDataAsset* AISpawnLocationsSource; // 0x68
	TArray<FVector> AISpawnLocations; // 0x70
	TArray<UIslandItemDataAsset*> IslandItemLocationDataSources; // 0x80
	TArray<UIslandSalvageSpawnerCollection*> IslandSalvageSpawnerCollections; // 0x90
	TArray<FTypedIslandItemSpawnLocationData> SalvageItemsLocationData; // 0xa0
	FText LocalisedName; // 0xb0
	UAISpawner* AISpawner; // 0xe8
	UAISpawner* CannonsAISpawner; // 0xf0
	UAISpawner* EmergentCaptainSpawner; // 0xf8
	UIslandMaterialStatusZone* IslandMaterialStatusZone; // 0x100
	FPlayerStat StatToFireWhenPlayerSetsFootOnIsland; // 0x108
	bool ShouldBeHiddenOnWorldMap; // 0x10c
	bool UseAdvancedSearchForMermaidSpawn; // 0x10d
	EIslandActiveEventType IslandActiveEventType; // 0x10e
};

struct UMaterialInstance {
	UPhysicalMaterial* PhysMaterial; // 0x58
	UMaterialInterface* Parent; // 0x60
	char bHasStaticPermutationResource : 1; // 0x68
	char bOverrideSubsurfaceProfile : 1; // 0x68
	FGuid ParentLightingGuid; // 0x70
	TArray<FFontParameterValue> FontParameterValues; // 0x80
	TArray<FScalarParameterValue> ScalarParameterValues; // 0x90
	TArray<FTextureParameterValue> TextureParameterValues; // 0xa0
	TArray<FVectorParameterValue> VectorParameterValues; // 0xb0
	FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0xc0
};

struct UMeleeAIAbilityParams {
	TArray<FMeleeAttackIdWeights> MeleeAttacks; // 0xc8
};

struct UPetEntitlementBaseDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct UParticleModuleVectorFieldBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UAISpawnContextList {
	TArray<FAISpawnContextData> SpawnContextList; // 0x28
};

struct USpawnCollectableQuestObjectStep {
	USpawnCollectableQuestObjectStepDesc* StepDesc; // 0x98
	TScriptInterface<Class> SpawnedPage; // 0xa0
};

struct UStatusResponseSuspendStatus {
	TArray<UStatusBase*> Status; // 0x30
};

struct UKnockbackAbilityStageParams {
	FExplosionInfo ExplosionInfo; // 0x40
};

struct UTestPlayerPermissionsComponent {
	bool AllowDebugMenuAccess; // 0xc8
	bool AllowDebugMenuButtonShortcutsAccess; // 0xc9
	bool AllowExecuteOnServer; // 0xca
	bool DisableWatermark; // 0xcb
};

struct UTaleQuestAddTornMapStepDesc {
	FQuestVariableName IslandName; // 0x80
	FQuestVariableInt NumberOfPieces; // 0x90
	FQuestVariableDataAsset MapParams; // 0xa0
	FQuestVariableGuid MapId; // 0xb0
};

struct USoundNodeBranch {
	FName BoolParameterName; // 0x38
};

struct USkeletonAICharacterAudioComponentParams {
	TArray<FSkeletonAICharacterStrategyAudioEvents> StrategyAudioEvents; // 0x28
};

struct AAthenaCharacter {
	ULookAtOffsetComponent* LookAtOffsetComponent; // 0x700
	UAnimationDataStoreAsset* AnimationDataStoreAsset; // 0x708
	UAthenaAnimationSittingDataAsset* SittingAnimationDataAssets; // 0x710
	UAthenaCharacterMovementComponent* AthenaCharacterMovementComponent; // 0x718
	FDocker Docker; // 0x720
	UActionStateMachineComponent* ActionStateMachineComponent; // 0x770
	UActionStatePriorityTableData* ActionStatePriorityTableData; // 0x778
	AActionStateCreatorDefinition* ActionStateCreatorDefinition; // 0x780
	FObjectMessagingDispatcher ObjectMessageDispatcher; // 0x788
	UWieldableItemSetComponent* WieldableItemSetComponent; // 0x828
	UWieldedItemComponent* WieldedItemComponent; // 0x830
	USceneComponent* MeshAdjustmentComponent; // 0x838
	UInventoryManipulatorComponent* InventoryManipulatorComponent; // 0x840
	ULoadoutComponent* LoadoutComponent; // 0x848
	UItemLoadoutComponent* ItemLoadoutComponent; // 0x850
	UHealthComponent* HealthComponent; // 0x858
	UAthenaCharacterStateManagerComponent* StateManagerComponent; // 0x860
	URewindComponent* RewindComponent; // 0x868
	UActorDamageableComponent* ActorDamageableComponent; // 0x870
	UCharacterHitReactionComponent* CharacterHitReactionComponent; // 0x878
	UAnimNotifyWwiseEmitterComponent* AnimNotifyWwiseEmitterComponent; // 0x880
	UMeleeAttackProcessorComponent* MeleeAttackProcessor; // 0x888
	UHitDetectionComponent* HitDetectionComponent; // 0x890
	UAthenaCharacterKnockbackComponent* KnockBackComponent; // 0x898
	UAthenaCharacterDodgeComponent* DodgeComponent; // 0x8a0
	UCharacterAINoiseEventComponent* CharacterAINoiseEventComponent; // 0x8a8
	UActionRulesComponent* PrivateActionRulesComponent; // 0x8b0
	UShipTrackerComponent* ShipTrackerComponent; // 0x8b8
	UWatercraftTrackerComponent* WatercraftTrackerComponent; // 0x8c0
	UItemLoaderComponent* ItemLoaderComponent; // 0x8c8
	URetractableCharacterComponent* RetractableCharacterComponent; // 0x8d0
	UResourceProviderComponent* ResourceProviderComponent; // 0x8d8
	UCharacterFlammableComponent* CharacterFlammableComponent; // 0x8e0
	USoakableComponent* SoakableComponent; // 0x8e8
	UWaterExposureComponent* WaterExposureComponent; // 0x8f0
	UShelteredComponent* ShelteredComponent; // 0x8f8
	UBoxedRpcDispatcherComponent* BoxedRpcDispatcherComponent; // 0x900
	UCosmeticItemAnimationComponent* CosmeticItemAnimationComponent; // 0x908
	FScriptMulticastDelegate OnJumpedDelegate; // 0x910
	FCompositeInputDelegator InputDelegator; // 0x930
	UCharacterInputBinder* InputBinder; // 0x990
	UMovementInterferenceComponent* InterferenceComponent; // 0x998
	UWaterInteractionComponent* WaterInteractionComponent; // 0x9a0
	UAnimationDataStoreId* ThirdPersonAnimSetDataId; // 0x9a8
	bool OverrideEncroachesBlockingGeometry; // 0x9b0
	ECollisionChannel OverrideEncroachesBlockingGeometryChannel; // 0x9b1
	FName OverrideFloorSweepCollisionProfileName; // 0x9b4
	float MovementThresholdToRecordRewindTransform; // 0x9dc
	UAnimationDataStore* AnimationDataStore; // 0xa58
	APlayerState* OldPlayerState; // 0xaa0
	float RelativeTargetYawOnMovingBase; // 0xae0
	float SmoothYawOnMovingBaseTime; // 0xb18
	int32_t RandomAnimationSeed; // 0xb1c
	bool RandomBool; // 0xb20
	USkeletalMeshSocket* CameraSocket; // 0xb38
	TArray<UInputComponent*> RegisteredInputComponents; // 0xb88
};

struct ACannonProjectile {
	UExplosionComponent* ExplosionComponent; // 0x610
	bool ApplyKnockbackOnDirectHit; // 0x618
	bool AllowFriendlyFireOnDirectHit; // 0x619
	EHealthChangedReason DirectHitHealthChangeReason; // 0x61a
	UDamagerType* ImpactDamagerType; // 0x620
	UConditionalStatsTriggerType* StatTriggerForCannonballsHittingShips; // 0x638
	UConditionalStatsTriggerType* StatTriggerForCannonballsHittingPlayers; // 0x640
	UConditionalStatsTriggerType* StatTriggerForCannonballsHittingReactingActors; // 0x648
};

struct USphereReflectionCaptureComponent {
	float InfluenceRadius; // 0x340
	float CaptureDistanceScale; // 0x344
	UDrawSphereComponent* PreviewInfluenceRadius; // 0x348
};

struct URewardedCurrencyConditionalStatsTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UBTTask_RotateToFaceBBEntry {
	float Precision; // 0x88
};

struct ASkeletalMeshActor {
	char bShouldDoAnimNotifies : 1; // 0x3d8
	char bWakeOnLevelStart : 1; // 0x3d8
	USkeletalMeshComponent* SkeletalMeshComponent; // 0x3e0
	USkeletalMesh* ReplicatedMesh; // 0x3e8
	UPhysicsAsset* ReplicatedPhysAsset; // 0x3f0
	UMaterialInterface* ReplicatedMaterial0; // 0x3f8
	UMaterialInterface* ReplicatedMaterial1; // 0x400
};

struct UEmissaryEntitlementDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct UBTDecorator_DockedToInteractable {
	FBlackboardKeySelector BlackboardKey; // 0x68
};

struct UNetDriver {
	FString NetConnectionClassName; // 0x38
	int32_t MaxDownloadSize; // 0x48
	char bClampListenServerTickRate : 1; // 0x4c
	int32_t NetServerMaxTickRate; // 0x50
	int32_t MaxInternetClientRate; // 0x54
	int32_t MaxClientRate; // 0x58
	float ServerTravelPause; // 0x5c
	float SpawnPrioritySeconds; // 0x60
	float RelevantTimeout; // 0x64
	float KeepAliveTime; // 0x68
	float InitialConnectTimeout; // 0x6c
	float ConnectionTimeout; // 0x70
	UNetConnection* ServerConnection; // 0x78
	TArray<UNetConnection*> ClientConnections; // 0x80
	UWorld* World; // 0x90
	UObject* NetConnectionClass; // 0xc8
	UProperty* RoleProperty; // 0xd0
	UProperty* RemoteRoleProperty; // 0xd8
	FName NetDriverName; // 0xe0
};

struct UBTTask_SetBlackboardEQSValue {
	UEnvQuery* EQS; // 0x88
};

struct UBTTask_SetBlackboardClassValue {
	UObject* ClassValue; // 0x88
};

struct UAthenaGameUserSettings {
	int32_t MaxVerticalResolution; // 0x78
	int32_t MaxFPS; // 0x7c
	int32_t VSync; // 0x80
	int32_t LightingDetail; // 0x84
	int32_t ModelDetail; // 0x88
	int32_t ShadowDetail; // 0x8c
	int32_t TextureDetail; // 0x90
	int32_t WaterDetail; // 0x94
	int32_t AnimationQuality; // 0x98
	int32_t MMCThresholdScale; // 0x9c
	float ResolutionScaling; // 0xa0
	int32_t ParticleEmitterQuality; // 0xa4
	int32_t ParticleResolutionQuality; // 0xa8
	int32_t BackBufferCount; // 0xac
	int32_t ShowPerformanceCounters; // 0xb0
	bool SmoothFPS; // 0xb4
	bool HDR; // 0xb5
	bool AudioOutputSpatialAudio; // 0xb6
	bool Fullscreen; // 0xb7
};

struct USeagullManagerComponent {
	USeagullManagerComponentDataAsset* DataAsset; // 0x148
};

struct USunkenCurseArtefactItemSpawnComponent {
	bool SpawnOnStart; // 0x2b0
	FItemSpawnParams SpawnParams; // 0x2b8
	UWeightedItemDescSpawnDataAsset* ReferencedSpawnDistributionAsset; // 0x2e0
	UItemSpawnDistributionAsset* ReferencedSpawnDistribution; // 0x2e8
	TArray<FItemSpawnTransform> SpawnTransforms; // 0x2f0
	TArray<FItemSpawnTransformWithRandomQuantity> SpawnTransformsWithRandomQuantities; // 0x300
	FName FeatureToggle; // 0x310
	ESpawnedItemSource SpawnSource; // 0x318
	float SpawnRate; // 0x31c
	bool DestroyProxiesOnEndPlay; // 0x320
	bool SpawnWithPhysicsEnabled; // 0x321
	bool DoNotAttachToOwnerWhenSpawned; // 0x322
	bool DropItemsOnSpawn; // 0x323
	bool DropItemsUsingPriorityAIDropParams; // 0x324
	TArray<FSpawnInstance> SpawnList; // 0x328
	TArray<FSpawnInstance> SingleItemInstances; // 0x338
	TArray<FSpawnedItem> SpawnedItems; // 0x348
};

struct UActorBuriedByPlayerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UCollectorsChestPickUpFromSlotRewardComponent {
	UCompany* Company; // 0xc8
};

struct UAudioSpaceComponent {
	UAudioSpaceDataAsset* AudioSpace; // 0x5f0
};

struct APortalSignalCutSceneActor {
	FCutScenePlayData CutScenePlayData; // 0x448
	TArray<FCutSceneLoadData> CutSceneDataSet; // 0x480
	UCutSceneSubtitlesComponent* CutsceneSubtitleComponent; // 0x490
	APawn* InteractingPlayerPawn; // 0x498
	bool IsLooping; // 0x4a0
	ULevelSequence* LevelSequenceToPlay; // 0x4a8
	TArray<ULevelSequence*> LevelSequencesToPlay; // 0x4b0
};

struct AProjectileWeapon {
	UInventoryItemComponent* InventoryItem; // 0x7b8
	DelegateProperty ProjectileAimValidator; // 0x7c0
	FProjectileWeaponParameters WeaponParameters; // 0x7d0
	EProjectileWeaponState State; // 0x9a8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x9b0
	UAimSensitivityComponent* AimSensitivityComponent; // 0x9b8
	EProjectileWeaponType ProjectileWeaponType; // 0x9d0
	float MaxAcceptableAttackTimeStampDelta; // 0x9d4
	int32_t AmmoLeft; // 0x9dc
	float DistanceBeforeGravity; // 0x9e0
	float NameplateVisibilityRangeExtensionFactorWhileAiming; // 0x9e4
	bool ShouldShowAmmoUI; // 0xa21
};

struct UInterpTrackMove {
	FInterpCurveVector PosTrack; // 0x70
	FInterpCurveVector EulerTrack; // 0x88
	FInterpLookupTrack LookupTrack; // 0xa0
	FName LookAtGroupName; // 0xb0
	float LinCurveTension; // 0xb8
	float AngCurveTension; // 0xbc
	char bUseQuatInterpolation : 1; // 0xc0
	char bShowArrowAtKeys : 1; // 0xc0
	char bDisableMovement : 1; // 0xc0
	char bShowTranslationOnCurveEd : 1; // 0xc0
	char bShowRotationOnCurveEd : 1; // 0xc0
	char bHide3DTrack : 1; // 0xc0
	EInterpTrackMoveRotMode RotMode; // 0xc4
};

struct UMovieSceneIntegerSection {
	FIntegralCurve IntegerCurve; // 0xa0
};

struct UAssetReferencer {
	TArray<UObject*> AssetsToReference; // 0x28
};

struct UCanvas {
	float OrgX; // 0x28
	float OrgY; // 0x2c
	float ClipX; // 0x30
	float ClipY; // 0x34
	FColor DrawColor; // 0x38
	char bCenterX : 1; // 0x3c
	char bCenterY : 1; // 0x3c
	char bNoSmooth : 1; // 0x3c
	int32_t SizeX; // 0x40
	int32_t SizeY; // 0x44
	FPlane ColorModulate; // 0x50
	UTexture2D* DefaultTexture; // 0x60
	UTexture2D* GradientTexture0; // 0x68
	UReporterGraph* ReporterGraph; // 0x70
};

struct UCustomizableTriggerService {
	TMap<int32_t, FCustomTriggerData> RegisteredTriggers; // 0x30
	UWorld* World; // 0x80
};

struct UAIDataProvider_QueryParams {
	FName ParamName; // 0x28
	float FloatValue; // 0x30
	int32_t IntValue; // 0x34
	bool BoolValue; // 0x38
};

struct UPetsService {
	TMap<AActor*, FPetRelationship> PetOwnerRelationships; // 0x38
	UAIPetsOnDemandSpawner* Spawner; // 0x88
	FPetsServiceParams PetsServiceParams; // 0xa8
	TArray<AActor*> OwnersToRemove; // 0xe0
	TArray<AActor*> OwnersToRequestDespawn; // 0xf0
	TArray<APawn*> MovingPetsOnIslands; // 0x100
	TArray<APawn*> MovingPetsOnShips; // 0x110
	TArray<AActor*> ScratchArray; // 0x120
	UPetHangoutSpotsDataAsset* PetHangoutDataAsset; // 0x2d8
};

struct ACustomShipwreck {
	AActor* WreckIndicatorActorClass; // 0x4b8
	FVector WreckIndicatorOffset; // 0x4c0
	AActor* SpawnedWreckIndicatorActor; // 0x4d0
};

struct UInstigatorTrackerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct URemoveNPCOnSurfaceStepDesc {
	FQuestVariableGuid NPCOnSurfaceManager; // 0x80
};

struct UAthenaProjectilesThrottledTickCollectionAsset {
	TArray<FThrottledProjectileTickPool> ProjectileTickPools; // 0x28
};

struct USpinBox {
	float Value; // 0x138
	DelegateProperty ValueDelegate; // 0x13c
	FSpinBoxStyle WidgetStyle; // 0x150
	USlateWidgetStyleAsset* Style; // 0x468
	float Delta; // 0x470
	float SliderExponent; // 0x474
	FSlateFontInfo Font; // 0x478
	float MinDesiredWidth; // 0x4b8
	bool ClearKeyboardFocusOnCommit; // 0x4bc
	bool SelectAllTextOnCommit; // 0x4bd
	FSlateColor ForegroundColor; // 0x4c0
	FScriptMulticastDelegate OnValueChanged; // 0x4f0
	FScriptMulticastDelegate OnValueCommitted; // 0x500
	FScriptMulticastDelegate OnBeginSliderMovement; // 0x510
	FScriptMulticastDelegate OnEndSliderMovement; // 0x520
	char bOverride_MinValue : 1; // 0x530
	char bOverride_MaxValue : 1; // 0x530
	char bOverride_MinSliderValue : 1; // 0x530
	char bOverride_MaxSliderValue : 1; // 0x530
	float MinValue; // 0x534
	float MaxValue; // 0x538
	float MinSliderValue; // 0x53c
	float MaxSliderValue; // 0x540
};

struct ARowingSeat {
	FOarParams OarParams; // 0x680
	float StrokeSynchronisationWindow; // 0x6b8
	UForceFeedbackEffect* ForceFeedbackForLeftStrokeEnd; // 0x6c0
	UForceFeedbackEffect* ForceFeedbackForRightStrokeEnd; // 0x6c8
	FName PaddleSocketName; // 0x6d0
	UStaticMeshComponent* LeftOarMesh; // 0x6d8
	UStaticMeshComponent* RightOarMesh; // 0x6e0
	TArray<EOarInputState> OarInputStates; // 0x6e8
	FOar LeftOar; // 0x6f8
	FOar RightOar; // 0x758
};

struct UOverlapTriggerComponent {
	float CapsuleHalfHeight; // 0x5a8
	float CapsuleRadius; // 0x5ac
};

struct ULandscapeSplineControlPoint {
	FVector Location; // 0x28
	FRotator Rotation; // 0x34
	float Width; // 0x40
	float SideFalloff; // 0x44
	float EndFalloff; // 0x48
	TArray<FLandscapeSplineConnection> ConnectedSegments; // 0x50
	TArray<FLandscapeSplineInterpPoint> Points; // 0x60
	FBox Bounds; // 0x70
	UControlPointMeshComponent* LocalMeshComponent; // 0x90
};

struct ASkeletalMeshWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UPlayerShroudBreakerTrackerComponent {
	bool ShroudBreakerActive; // 0xd0
};

struct ULoadableProjectileComponent {
	AActor* ProjectileType; // 0xd0
	UParticleSystem* LoadedItemParticleTemplate; // 0xd8
	UParticleSystem* LaunchParticleTemplate; // 0xe0
	bool LaunchParticleDoReflections; // 0xe8
	bool LaunchParticleAttachToBarrel; // 0xe9
	float LoadedFuseTimer; // 0xec
	UWwiseObjectPoolWrapper* FuseSoundWisePool; // 0xf0
	UWwiseEvent* FuseActivateSoundPlayEvent; // 0xf8
	UWwiseEvent* FuseSoundPlayEvent; // 0x100
	UWwiseEvent* FuseSoundStopEvent; // 0x108
	UObject* FuseParticleSystem; // 0x110
	FStringAssetReference FuseMeshAssetReference; // 0x118
};

struct UAILoadoutProgressionTypeList {
	TArray<UAILoadoutRankProgression*> AllProgressions; // 0x28
};

struct UPawnAction {
	UPawnAction* ChildAction; // 0x28
	UPawnAction* ParentAction; // 0x30
	UPawnActionsComponent* OwnerComponent; // 0x38
	UObject* Instigator; // 0x40
	UBrainComponent* BrainComp; // 0x48
	char bAllowNewSameClassInstance : 1; // 0x78
	char bReplaceActiveSameClassInstance : 1; // 0x78
	char bShouldPauseMovement : 1; // 0x78
};

struct UShantyPuzzleComponent {
	UShantyItemDesc* RequiredShantyItemDesc; // 0x2b8
	TArray<FShantyPuzzleInteractionZoneDefinition> ShantyPuzzleInteractionZoneDefinitions; // 0x2c0
	bool TimeLimited; // 0x2d0
	bool ShouldMoveEnsembleToActorPosition; // 0x2d1
	FGameTimeRange ActiveTimeRange; // 0x2d8
	TArray<UShantyPuzzleInteractionZoneComponent*> ShantyPuzzleInteractionZones; // 0x2e8
	AEnsemble* CurrentlyPlayingShantyPuzzleEnsemble; // 0x2f8
};

struct UMovieSceneEnumSection {
	FIntegralCurve EnumCurve; // 0xa0
};

struct UEmoteIdListingAsset {
	TArray<FName> EmoteIds; // 0x28
};

struct UItemDiggingAnimationConfig {
	float PosSpringAccel; // 0x28
	float RotSpringAccel; // 0x2c
	float ZOffsetToStartFirstPosBlendFrom; // 0x30
	float InitialZOffset; // 0x34
	float FinalZOffset; // 0x38
	float PercentageOfExhumingTravelLastDigDoes; // 0x3c
	UCurveFloat* PitchRollAngleRandomCurve; // 0x40
	UCurveFloat* PitchRollRattleCurveWhileMoving; // 0x48
};

struct UDebugWieldablesData {
	TArray<UItemDesc*> AllDebugWieldables; // 0x28
};

struct AGameplayAbilityWorldReticle_ActorVisualization {
	UCapsuleComponent* CollisionComponent; // 0x3f0
	TArray<UActorComponent*> VisualizationComponents; // 0x3f8
};

struct ARewardPouchItemProxy {
	UCompany* Company; // 0x7e8
};

struct UShipPartsCatalogueDataAsset {
	FShipPartsCatalogue Catalogue; // 0x28
};

struct UPirateLegendCategory {
	FText Name; // 0x28
	FName UniqueTextIdentifier; // 0x60
	FStringAssetReference IconPath; // 0x68
};

struct UParticleModuleSpawnPerUnitNew {
	char bAffectsGroupA : 1; // 0x58
	char bAffectsGroupB : 1; // 0x58
	char bAffectsGroupC : 1; // 0x58
	char bAffectsGroupD : 1; // 0x58
	char bAffectsGroupE : 1; // 0x58
	char bAffectsReplacementGroup : 1; // 0x58
	float UnitScalar; // 0x5c
	FRawDistributionFloat SpawnPerUnit; // 0x60
	char bIgnoreSpawnRateWhenMoving : 1; // 0x98
	float MovementTolerance; // 0x9c
	float MaxFrameDistance; // 0xa0
	char bIgnoreMovementAlongX : 1; // 0xa4
	char bIgnoreMovementAlongY : 1; // 0xa4
	char bIgnoreMovementAlongZ : 1; // 0xa4
};

struct ACustomisationPreviewShip {
	UShipCustomizationInfo* ShipCustomizationInfo; // 0x3d0
	FName Category; // 0x3d8
	UShipLiveryComponent* LiveryComponent; // 0x3e0
	UReplicatedShipPartCustomizationComponent* HullLiveryCustomizationComponent; // 0x3e8
	UReplicatedShipPartCustomizationComponent* SailsLiveryCustomizationComponent; // 0x3f0
	UReplicatedShipPartCustomizationComponent* CannonEnchantmentCustomizationComponent; // 0x3f8
	USceneComponent* Root; // 0x400
	UChildActorComponent* MastChildActorComponent; // 0x408
	UChildActorComponent* WheelChildActorComponent; // 0x410
	UChildActorComponent* CapstanChildActorComponent; // 0x418
	UChildActorComponent* CannonChildActorComponent; // 0x420
	bool ShowParticles; // 0x428
	float ParticleWarmUpTime; // 0x42c
};

struct UCommodityTypeDataAsset {
	TArray<FCommodityTypeDataEntry> CommodityEntries; // 0x28
};

struct UMovieScene3DTransformTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct UProtoTavernPianoInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UIsAIOfSkillsetStatCondition {
	TArray<UAthenaAIControllerParamsDataAsset*> AISkillsets; // 0x30
};

struct UItemDiggingEffectsConfig {
	TArray<FItemProxyImpactVfxParams> FullyDugUpVfxParams; // 0x28
};

struct UAIEncounterGenerationRecipe {
	TArray<FAIFormVarietyEntry> Forms; // 0x28
	FStringAssetReference SkillsetProgression; // 0x38
	FStringAssetReference ItemDropProgression; // 0x48
	FTargetSkillsetProgressionPair TargetSkillsetOverrides; // 0x58
	FTargetItemDropProgressionPair TargetItemDropOverrides; // 0x78
};

struct USeatStat_SitWithOthers {
	int32_t PlayersSittingToFireStat; // 0x48
};

struct ULoadoutService {
	TArray<FLoadoutEntry> LoadoutEntries; // 0x1188
};

struct UAtmosphericFogComponent {
	float SunMultiplier; // 0x2b0
	float FogMultiplier; // 0x2b4
	float DensityMultiplier; // 0x2b8
	float DensityOffset; // 0x2bc
	float DistanceScale; // 0x2c0
	float AltitudeScale; // 0x2c4
	float DistanceOffset; // 0x2c8
	float GroundOffset; // 0x2cc
	float StartDistance; // 0x2d0
	float SunDiscScale; // 0x2d4
	float DefaultBrightness; // 0x2d8
	FColor DefaultLightColor; // 0x2dc
	char bDisableSunDisk : 1; // 0x2e0
	char bDisableGroundScattering : 1; // 0x2e0
	FAtmospherePrecomputeParameters PrecomputeParams; // 0x2e4
	UTexture2D* TransmittanceTexture; // 0x310
	UTexture2D* IrradianceTexture; // 0x318
};

struct UAIPartsRetrievalComponent {
	UAIPartsCategory* PartsCategory; // 0xd0
	FReplicatedAIPartsData ReplicatedAIPartsData; // 0xd8
};

struct UFFTWaterExtendedPlaneComponent {
	FFFTWaterComponentParams WaterParams; // 0x598
	UMaterial* Material; // 0x8a8
};

struct UMaterialReferencesDataAsset {
	TArray<FMaterialReferencesEntry> MaterialReferences; // 0x28
};

struct UApplyStatusToConsumerComponent {
	TArray<FItemConsumptionStatusChanceEntry> ConsumptionStatuses; // 0xc8
};

struct USummonAIAbilityParams {
	UAIIncrementalWaveSpawner* SummonSpawner; // 0xc8
	FAthenaAIAbilityPlayerBasedRanges NumToSpawn; // 0xd0
	int32_t MaxTotalAIFromSummonAbility; // 0xe0
	bool DespawnAllOnDeath; // 0xe4
};

struct UBuryHoardOfItemsStatTriggerType {
	FName UniqueTextIdentifier; // 0x28
};

struct UExponentialHeightFogComponent {
	float FogDensity; // 0x2b0
	FLinearColor FogInscatteringColor; // 0x2b4
	FLinearColor FarFogInscatteringColor; // 0x2c4
	float DirectionalInscatteringExponent; // 0x2d4
	float DirectionalInscatteringStartDistance; // 0x2d8
	float StartScaleDirectionalInscattering; // 0x2dc
	float FarScaleDirectionalInscattering; // 0x2e0
	FLinearColor DirectionalInscatteringColor; // 0x2e4
	float FogHeightFalloff; // 0x2f4
	float FogMaxOpacity; // 0x2f8
	float StartDistance; // 0x2fc
	float FarDistance; // 0x300
	float StartScale; // 0x304
	float FarScale; // 0x308
	bool bIsUnderwater; // 0x30c
};

struct UWwiseEvent {
	UWwiseBank* RequiredBank; // 0x28
	bool WaitForBankToLoad; // 0x30
	uint32_t WwiseId; // 0x34
	float DurationMin; // 0x38
	float DurationMax; // 0x3c
	float MaxAttenuation; // 0x40
	EWwiseEventDurationType DurationType; // 0x44
	bool CookedIsStopEvent; // 0x45
};

struct UPlayerAtmosphericsAudioComponent {
	UPlayerAtmosphericsAudioComponentParams* AtmosphericParams; // 0x2b0
	FNoiseMakerController NoiseMakerController; // 0x2b8
	AAthenaPlayerCharacter* AthenaPlayerCharacter; // 0x308
};

struct URetractableFloatingBarrelComponent {
	TScriptInterface<Class> OwnerBuoyancyInterface; // 0x100
};

struct UMovieSceneFloatSection {
	FRichCurve FloatCurve; // 0xa0
};

struct UStaticMeshAudioEmittersComponent {
	TArray<FStaticMeshComponentAudioAssociation> InstanceAssociations; // 0x2b0
};

struct ACloudDome {
	ULocalPlayer* LocalPlayer; // 0x480
};

struct UAthenaAICharacterMovementComponent {
	FAIStrategyMovementProperties DefaultMovementProperties; // 0x808
	TArray<FAIStrategyMovementProperties> AIStrategyMovementProperties; // 0x820
	TArray<FItemCategoryAIStrategyMovementPropertiesOverride> ItemCategoryAIStrategyMovementPropertiesOverrides; // 0x830
	float BlendSpeed; // 0x840
	float KeepOnNavMeshProjectionDistance; // 0x844
	bool bDebugKeepOnNavMesh; // 0x848
	bool DisableNavMeshChecks; // 0x849
	bool OverrideSmoothNetUpdateDistancesDuringCharge; // 0x84a
	float ChargeMaxSmoothNetUpdateDist; // 0x84c
	float ChargeNoSmoothNetUpdateDist; // 0x850
	float ChargeSmoothNetUpdateGracePeriod; // 0x854
	float DesiredMaxSpeedAmp; // 0x8f8
	float DesiredMaxAccelAmp; // 0x8fc
};

struct UExplosiveTriggerRammableComponent {
	URammableExplosiveDataAsset* ExplosiveSettings; // 0xd0
	TScriptInterface<Class> OwnerExplosive; // 0xd8
};

struct UTreasureMapItemDesc {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct UGetNextQuestInChainStepDesc {
	FQuestVarTaleQuest OutQuest; // 0x80
	FQuestVariableBool QuestChainFinished; // 0x90
};

struct UParticleModuleAttractorLine {
	FVector EndPoint0; // 0x50
	FVector EndPoint1; // 0x5c
	FRawDistributionFloat Range; // 0x68
	FRawDistributionFloat Strength; // 0xa0
};

struct UAthenaAnimationUndoRepairDataAsset {
	FStringAssetReference UndoRepairInto; // 0x28
	FStringAssetReference UndoRepairLoop; // 0x38
	UAnimationStateId* UndoRepairStateId; // 0x48
};

struct UCallObjectFunctionStepDesc {
	UObject* Target; // 0x80
	FClassFunctionSelectionType Function; // 0x88
	TMap<FName, FName> ParameterMappings; // 0x98
};

struct UStatusEffectPersistenceComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UContentEngagementMessageParams {
	FText Title; // 0x28
	FText Body; // 0x60
	FStringAssetReference KeyArt; // 0x98
};

struct UAnimNotifyState_Trail {
	UParticleSystem* PSTemplate; // 0x28
	FName FirstSocketName; // 0x30
	FName SecondSocketName; // 0x38
	ETrailWidthMode WidthScaleMode; // 0x40
	FName WidthScaleCurve; // 0x44
};

struct UStormServiceAsset {
	TArray<UStormParams*> StormParams; // 0x28
	float StormCheckRadius; // 0x38
	float ChanceOfForwardTimeStep; // 0x3c
	FFloatRange StaticTimeOffsetBounds; // 0x40
};

struct UMaterialExpressionDistanceCullFade {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UMaterialExpressionConstantBiasScale {
	FExpressionInput Input; // 0x70
	float Bias; // 0xa8
	float Scale; // 0xac
};

struct UKrakenHeadHealthParamsDataAsset {
	TArray<FKrakenHeadHealthPair> KrakenHeadHealthPairs; // 0x28
};

struct UWaterBarrelInputComponent {
	AWaterBarrel* WaterBarrel; // 0x280
};

struct UMaterialInterface {
	USubsurfaceProfile* SubsurfaceProfile; // 0x30
	FLightmassMaterialInterfaceSettings LightmassSettings; // 0x3c
};

struct USittingThirdPersonCameraInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UAudioEventToComponentMapComponent {
	TArray<FEventToComponentMapping> LocalComponentMappings; // 0xc8
};

struct UTelemetrySubjectComponent {
	FString SubjectName; // 0xd0
	FString SubjectID; // 0xe0
};

struct UPortalTaleService {
	UPortalTaleServiceDesc* Desc; // 0x60
};

struct UBakedDecalComponent {
	int32_t TargetTextureSize; // 0xc8
	FLinearColor ClearColour; // 0xcc
	int32_t MaxDeferredDecals; // 0xdc
	UTextureRenderTarget2D* TargetTexture; // 0xe0
	TArray<UStaticMeshComponent*> StaticMeshes; // 0xe8
	TArray<FDeferredBakedDecal> DeferredDecals; // 0xf8
};

struct UTradeRouteDifficultyBand {
	int32_t MinimumRank; // 0x28
};

struct UCatalogOfferLicence {
	FGuid LicenceId; // 0x28
};

struct UCatalogDataAsset {
	FGuid CatalogId; // 0x28
	FText DisplayName; // 0x38
	bool ExportAsRewardIds; // 0x70
	TArray<UCatalogOfferDataAsset*> Offers; // 0x78
};

struct UBTService_QueryShipsForTarget {
	FAIDataProviderFloatValue MaxShipDistanceFromHomePosition; // 0x70
	FAIDataProviderFloatValue MinDamageToSwitchTargets; // 0xa0
	FAIDataProviderFloatValue MinSecondsBeforeSwitchTargets; // 0xd0
	FAIDataProviderBoolValue SwitchTargetsAfterTimerExpires; // 0x100
	FAIDataProviderFloatValue SecondsBeforeSwitchTargetsAfterTimerExpires; // 0x130
	FAIDataProviderFloatValue TimeBetweenDiceRolls; // 0x160
	FAIDataProviderFloatValue DiceRollForAggression; // 0x190
	FAIDataProviderFloatValue MinTotalDamageToTurnDiceRollForAggression; // 0x1c0
	FAIDataProviderFloatValue DiceRollForDamageAggression; // 0x1f0
	FAIDataProviderFloatValue DiceRollForDamageDormancy; // 0x220
	FAIDataProviderFloatValue PlayerDistanceThresholdToTurnAggressive; // 0x250
	bool IgnoreAI; // 0x280
};

struct UAIPartsCategoryTypeList {
	TArray<UAIPartsCategory*> AllPartsCategories; // 0x28
};

struct UGiveVoyageOnWieldItemComponent {
	UVoyageRecipeDataAsset* VoyageRecipe; // 0x150
	EEmergentVoyageSource SourceType; // 0x158
};

struct UMaterialExpressionParticleSpeed {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UNonVagueNonUniqueLandmarkComponent {
	FName DescriptionPhraseId; // 0x2b0
	float ExtraRadius; // 0x2b8
};

struct UParticleModuleLocation {
	FRawDistributionVector StartLocation; // 0x50
	FRawDistributionVector AdditionalStartLocations[0x4]; // 0x88
	char StartLocationUseGroupAForAll : 1; // 0x168
	float DistributeOverNPoints; // 0x16c
	float DistributeThreshold; // 0x170
};

struct UBTDecorator_NearSurfaceOfWater {
	float DistanceFromSurface; // 0x68
	bool ReverseLogic; // 0x6c
};

struct UFaunaAnimationData {
	FFaunaAnimationStructure FaunaAnimations; // 0x28
};

struct UPetHangoutSpotsDataAsset {
	TArray<FHangoutSpotParams> HangoutSpotParams; // 0x28
};

struct UAbilityTask_WaitGameplayEffectApplied_Target {
	FScriptMulticastDelegate OnApplied; // 0x130
};

struct UMeshComponent {
	TArray<UMaterialInterface*> OverrideMaterials; // 0x588
};

struct UTeleportLungeAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct AAIEncounterGenerationService {
	UAIEncounterGenerationRecipeTypeList* GenerationRecipes; // 0x3d8
	TScriptInterface<Class> EncounterService; // 0x3e0
};

struct AServiceProviderGameState {
	AGameMode* GameModeClass; // 0x3d0
	AGameMode* AuthorityGameMode; // 0x3d8
	ASpectatorPawn* SpectatorClass; // 0x3e0
	FName MatchState; // 0x3e8
	FName PreviousMatchState; // 0x3f0
	int32_t ElapsedTime; // 0x3f8
	TArray<APlayerState*> PlayerArray; // 0x400
	float ReplicatedWorldTimeSeconds; // 0x410
	float ServerWorldTimeSecondsDelta; // 0x414
	float ServerWorldTimeSecondsUpdateFrequency; // 0x418
};

struct AKrakenService {
	FKrakenServiceParams KrakenServiceParams; // 0x3d8
	AKraken* Kraken; // 0x518
};

struct UFlamethrowerChargeVisuals {
	TScriptInterface<Class> FlamethrowerChargeInterface; // 0x28
	TScriptInterface<Class> FlamethrowerChargeVisualsProviderInterface; // 0x38
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x48
};

struct UCargoRunCrateComponent {
	UCargoRunCrateData* CargoRunCrateData; // 0xd8
	UCargoRunCrateCustomData* CargoRunCrateCustomData; // 0xe0
	FCargoRunItemDropOffData DropOffData; // 0xe8
	TWeakObjectPtr<UNPCDialogComponent> NPCDialogComponent; // 0x110
	EHasBeenWieldedState WieldedState; // 0x118
};

struct UAnimSet {
	char bAnimRotationOnly : 1; // 0x28
	TArray<FName> TrackBoneNames; // 0x30
	TArray<FAnimSetMeshLinkup> LinkupCache; // 0x40
	TArray<char> BoneUseAnimTranslation; // 0x50
	TArray<char> ForceUseMeshTranslation; // 0x60
	TArray<FName> UseTranslationBoneNames; // 0x70
	TArray<FName> ForceMeshTranslationBoneNames; // 0x80
	FName PreviewSkelMeshName; // 0x90
	FName BestRatioSkelMeshName; // 0x98
};

struct UStartAggressiveGhostShipEncounterStepDesc {
	UAggressiveGhostShipsEncounterParams* AggressiveGhostShipEncounterParams; // 0x80
	FName BountyMapName; // 0x88
	FName IslandToSpawnEncounter; // 0x90
	float EncounterIslandOverlapRadius; // 0x98
	UAggressiveGhostShipNamesDataAsset* ShipFleetNamesAsset; // 0xa0
	UAggressiveGhostShipNamesDataAsset* IslandNamesAsset; // 0xa8
	float CustomEncounterRadiusInMetres; // 0xb0
	FQuestVariableVector CustomEncounterLocation; // 0xb8
	FQuestVariableName EncounterIslandName; // 0xc8
	FQuestVariableText LocalisedEncounterIslandName; // 0xd8
	FQuestVariableBountyTargetArray ShipFleetNames; // 0xe8
	FQuestVariableActor AggressiveGhostShipsEncounterActor; // 0xf8
};

struct ASailAngle {
	float RopeUVSpeed; // 0x7c8
	URiggingSystemComponent* Rigging; // 0x7d0
	int32_t RiggingLeftRopeIndex; // 0x7d8
	int32_t RiggingRightRopeIndex; // 0x7dc
	bool PlayAudio; // 0x7e0
};

struct UPetHangoutSpotComponent {
	TArray<FHangoutSpotPosition> HangoutSpots; // 0x2b0
	bool HasLowerDeckFloodThreshold; // 0x2c0
	float LowerDeckFloodThreshold; // 0x2c4
	bool HasMiddleDeckFloodThreshold; // 0x2c8
	float MiddleDeckFloodThreshold; // 0x2cc
	float PerchInteractableHeightOffset; // 0x2d0
	bool IsWorldHangout; // 0x2d4
	TArray<UPetPerchComponent*> PetPerchComponents; // 0x2f8
	bool IsTopDeckBlocked; // 0x318
	bool IsOwnerSinking; // 0x319
	UPetHangoutSpotsDataAsset* PetHangoutSpotsDataAsset; // 0x338
};

struct UPrioritisedPromptsManager {
	TArray<FPrioritisedPromptWithHandle> AllPrompts; // 0x28
	APlayerController* PlayerController; // 0x38
};

struct UWwiseBank {
	FString path; // 0x28
	uint32_t WwiseId; // 0x38
};

struct USoundNodeQualityLevel {
	TArray<USoundNode*> ChildNodes; // 0x28
};

struct UBlueprintSpawnAIStepDefault {
	ETaleQuestStepBeginMode BeginMode; // 0x28
	UTaleQuestBlueprintStepDesc* Desc; // 0x30
};

struct UDrawFrustumComponent {
	FColor FrustumColor; // 0x588
	float FrustumAngle; // 0x58c
	float FrustumAspectRatio; // 0x590
	float FrustumStartDist; // 0x594
	float FrustumEndDist; // 0x598
	UTexture* Texture; // 0x5a0
};

struct UTeleportAbilityStageParams {
	float MinTeleportDistanceMultiplier; // 0x40
	float MaxTeleportDistanceMultiplier; // 0x44
	float ResurfaceDelayMultiplier; // 0x48
};

struct APointLight {
	UPointLightComponent* PointLightComponent; // 0x3e0
};

struct URemoveMechanismTriggerStepDesc {
	FQuestVariableActor Action; // 0x80
	FQuestVariableActor Trigger; // 0x90
};

struct AAshenWindsSkullItemProxy {
	UParticleSystemComponent* FlamethrowerChargeParticleSystemComponent; // 0x7f8
	UFlamethrowerChargeVisuals* FlamethrowerChargeVisuals; // 0x800
};

struct UScaleBox {
	EStretchDirection StretchDirection; // 0x150
	EStretch Stretch; // 0x151
	float UserSpecifiedScale; // 0x154
};

struct UEmissaryActiveTableVisualiserComponent {
	UCompany* TargetCompany; // 0xc8
	TArray<FMaterialVisualisation> MaterialChanges; // 0xd0
	TArray<FLightVisualisation> LightChanges; // 0xf0
	TArray<FParticleVisualisation> ParticleChanges; // 0x110
};

struct AFlyingCreature {
	UWwiseObjectPoolWrapper* CreatureSoundPool; // 0x3d0
	UWwiseEvent* CreatureSoundToPlay; // 0x3d8
	UWwiseEvent* CreatureSoundToStop; // 0x3e0
	FName CreatureSwitchGroup; // 0x3e8
	FName CreatureSwitch; // 0x3f0
	FName FlyingCreatureFactorRtpc; // 0x3f8
	float FlyingCreatureFactorRtpcValue; // 0x400
	FWwiseEmitter CreatureEmitter; // 0x408
};

struct UMeleeSpinAIAbilityParams {
	float MinAngleToTargetToActivate; // 0xc8
	float MaxAngleToTargetToActivate; // 0xcc
	float MinTimeBetweenCheck; // 0xd0
	float MaxTimeBetweenCheck; // 0xd4
	float ChanceOfActivation; // 0xd8
	float SpinWaitTime; // 0xdc
	float TurnSpeed; // 0xe0
};

struct UCoherentToWwiseEventComponent {
	FStringAssetReference UIAudioCuesTableLocation; // 0xc8
	UCoherentToWwiseEventDataAsset* UIAudioCuesAsset; // 0xd8
	FName AudioGameStateGroup; // 0xe0
	FName AudioGameStateIngame; // 0xe8
	FName AudioGameStateInMenu; // 0xf0
	FName AudioGameStateLoading; // 0xf8
	FName AudioGameStateInFrontEnd; // 0x100
};

struct UNPCDialogPredicateEquals {
	FName ParameterName; // 0x38
	FString Value; // 0x40
};

struct UFireworkItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct AAmbientSound {
	UAudioComponent* AudioComponent; // 0x3d0
};

struct UHarpoonLauncherAudioParamsDataAsset {
	FVector AudioEmitterOffset; // 0x28
	FName MoveYawRateRTPCName; // 0x34
	FName MovePitchRateRTPCName; // 0x3c
	FName SpoolingSpeedRTPCName; // 0x44
	UWwiseEvent* StartMovePitchAudioLoopEvent; // 0x50
	UWwiseEvent* StopMovePitchAudioLoopEvent; // 0x58
	UWwiseEvent* StartMoveYawAudioLoopEvent; // 0x60
	UWwiseEvent* StopMoveYawAudioLoopEvent; // 0x68
	UWwiseEvent* StoppedAimAtEdgeOfRangeAudioEvent; // 0x70
	UWwiseEvent* FireAudioEvent; // 0x78
	UWwiseEvent* RetractTriggeredAudioEvent; // 0x80
	UWwiseEvent* RetractFinishedAudioEvent; // 0x88
	UWwiseEvent* ReleaseRetractableAudioEvent; // 0x90
	UWwiseEvent* StartSpoolingAudioEvent; // 0x98
	UWwiseEvent* StopSpoolingAudioEvent; // 0xa0
	UWwiseEvent* TetherExtentReachedAudioEvent; // 0xa8
	UWwiseEvent* ReelLockInputPressedAudioEvent; // 0xb0
	UWwiseEvent* ReelLockInputReleasedAudioEvent; // 0xb8
	UWwiseObjectPoolWrapper* AudioEmitterPool; // 0xc0
	float SpoolingSpeedClampValue; // 0xc8
	float AttachedSpoolingSpeedClampValue; // 0xcc
};

struct UPerformActionStatCondition {
	EActionStateMachineTrackId RequiredTrackId; // 0x28
	UActionStateId* RequiredAction; // 0x30
};

struct AKraken {
	float RelevancyDistance; // 0x3e8
	float InnerRadius; // 0x400
	float OuterRadius; // 0x404
	EKrakenState CurrentState; // 0x408
	AMurk* MurkActor; // 0x5c0
	UKrakenAICharacterAudioComponent* KrakenAudioComponent; // 0x668
	UKrakenTelemetryComponent* KrakenTelemetryComponent; // 0x670
	FEncounterParams SightingEncounterParams; // 0x678
	FEncounterParams CloseEncounterParams; // 0x684
	FKrakenParams Params; // 0x6a0
	int32_t NumTentaclesRemaining; // 0x800
};

struct UGetCurrentLocationDataStepDesc {
	FQuestVarLocationData OutLocationData; // 0x80
};

struct ULandmarkReactionEventPlayForceFeedback {
	TArray<FLandmarkReactionEventPlayForceFeedbackEntry> ForceFeedbackEntries; // 0x38
	UWwiseEvent* AudioCue; // 0x48
};

struct AContestManagerDebugRepActor {
	EContestState ContestState; // 0x3d0
	float CurrentTimerTime; // 0x3d4
	FString ContestVoyageString; // 0x3d8
	TArray<FDebugCrewContestInfo> CrewContestInfoList; // 0x3e8
	AContestManagerService* ContestManagerService; // 0x408
};

struct ANPCService {
	TArray<FNPCData> NPCData; // 0x3d8
};

struct UParticleModuleMeshRotationRate {
	FRawDistributionVector StartRotationRate; // 0x50
};

struct USelectRewardStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct USwimmingCreatureAnimationInstance {
	float Speed; // 0x458
	float PlayRate; // 0x45c
	float Direction; // 0x460
	UAnimMontage* DeathMontage; // 0x468
	UAnimMontage* SinkingMontage; // 0x470
	UAnimSequenceBase* DefaultImpactAnim; // 0x478
	TArray<FSwimmingCreatureImpactAnimData> ImpactAnims; // 0x480
	float MaxAccelerationForSpeed; // 0x490
	float MaxPitchForSpeed; // 0x494
	float MaxYawForDirection; // 0x498
	float SpeedSmoothingFactor; // 0x49c
	float DirectionSmoothingFactor; // 0x4a0
	float AccelerationSmoothingFactor; // 0x4a4
	float YawSmoothingFactor; // 0x4a8
	float NetworkAnimationBlendTime; // 0x4ac
	TArray<UObject*> RPCPlayableMontages; // 0x4b0
	TArray<UAnimSequenceBase*> NetworkPlayableAnimations; // 0x4c0
	TArray<FAIStrategySpeedOverride> StrategySpeedOverrides; // 0x4d0
	TArray<UAIStrategyId*> HitReactBlockingAIStrategies; // 0x4e0
	UAnimMontage* CurrentlyPlayingNetworkMontage; // 0x4f0
	USwimmingCreatureMovementComponent* MovementComponent; // 0x598
	UNetworkSyncedAnimationComponent* NetworkSyncedAnimationComponent; // 0x5b8
};

struct UInterpTrackToggle {
	TArray<FToggleTrackKey> ToggleTrack; // 0x70
	char bActivateSystemEachUpdate : 1; // 0x80
	char bActivateWithJustAttachedFlag : 1; // 0x80
	char bFireEventsWhenForwards : 1; // 0x80
	char bFireEventsWhenBackwards : 1; // 0x80
	char bFireEventsWhenJumpingForwards : 1; // 0x80
};

struct UAbandonedNoteClueTextChoiceSource {
	TMap<UClueDestinationDescriptor*, int16_t> ExistingDestinations; // 0x40
};

struct UAIShipEncounterDesc {
	FVector2D Location; // 0x28
	float Radius; // 0x30
	bool Moveable; // 0x34
	bool ShowRevealBanner; // 0x35
	bool ShowCompleteBanner; // 0x36
	bool ShouldSpawnShipCloud; // 0x37
	bool RequirePlayerShipInZoneToSpawnShips; // 0x38
	bool EnableSecondsUntilEncounterEndsAfterLastCrewLeft; // 0x39
	int32_t SecondsUntilEncounterEndsAfterLastCrewLeft; // 0x3c
	bool EnableMaximumEncounterDuration; // 0x40
	int32_t MaximumEncounterDuration; // 0x44
	EAIShipEncounterType EncounterType; // 0x48
	TArray<FAIShipEncounterWave> Waves; // 0x50
};

struct UMaterialExpressionPixelNormalWS {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UEmptyEmoteDesc {
	FStringAssetReference EmoteInfo; // 0xe0
	FStringAssetReference BackgroundPath; // 0xf0
	FName LookAtSocketName; // 0x100
	FName OverridePreviewCameraName; // 0x108
};

struct UMockWaterServiceWithValidWaterPlane {
	UFFTWaterComponent* DefaultWaterComponent; // 0x38
};

struct UNPCHintDialogueClueSiteData {
	FNPCData NPCData; // 0x38
};

struct UItemFirstDroppedByMeOnOtherShipConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UVomitBoutData {
	float MinTimeBetweenSpews; // 0x28
	float MaxTimeBetweenSpews; // 0x2c
	float MinSpewDuration; // 0x30
	float MaxSpewDuration; // 0x34
};

struct USignalMechanismTargetComponent {
	FVector TargetLocationRelativeToOwner; // 0x158
};

struct UBTTask_MoveTo {
	float AcceptableRadius; // 0x88
	UNavigationQueryFilter* FilterClass; // 0x90
	char bAllowStrafe : 1; // 0x98
	char bAllowPartialPath : 1; // 0x98
	char bStopOnOverlap : 1; // 0x98
};

struct UContestModuleSettingsDataAsset {
	AActor* ArenaRowboatClass; // 0x28
};

struct UTradeRouteData {
	FIslandSelectionType StartIsland; // 0x28
	FIslandSelectionType EndIsland; // 0x30
	FPlayerStat RouteCompletionStat; // 0x38
	ETradeRouteMapOrientation MapOrientation; // 0x3c
	FTradeRouteMapData TradeRouteMapData; // 0x40
};

struct UStorageContainerComponent {
	FText ContainerDisplayName; // 0xe0
	FTransform InstanceTransform; // 0x120
	FStorageContainerBackingStore ContainerNodes; // 0x150
	TArray<TWeakObjectPtr<AActor>> QuickGivers; // 0x190
	TArray<TWeakObjectPtr<AActor>> QuickTakers; // 0x1a0
	UWwiseEvent* AddItemSFX; // 0x1b0
	UWwiseEvent* TakeItemSFX; // 0x1b8
	UWwiseEvent* OpenContainerSFX; // 0x1c0
	UWwiseEvent* BeginQuickGiveSFX; // 0x1c8
	UWwiseEvent* EndQuickGiveSFX; // 0x1d0
	UWwiseEvent* BeginQuickTakeSFX; // 0x1d8
	UWwiseEvent* EndQuickTakeSFX; // 0x1e0
	UStorageContainerContentTypeSelector* StorageContainerSelector; // 0x1e8
	UWwiseObjectPoolWrapper* SfxPool; // 0x220
	bool ShowCapacityInDescription; // 0x268
	UObject* Aggregator; // 0x308
};

struct UMovieSceneStringTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct USeasonPopupListAsset {
	TArray<USeasonPopupAsset*> SeasonPopups; // 0x28
};

struct UUnlockConditionalStatsTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct USirenAnimationData {
	FSirenAnimationDataStructure SirenAnimationData; // 0x28
};

struct UStorageContainerSpecialTypeSelectorEntries {
	float PercentageChanceOfSpawning; // 0x28
	UStorageContainerSpawnerCount* NumSpawners; // 0x30
	TArray<FTypedStorageContainerContentTypeSelectorEntry> Entries; // 0x38
	FName FeatureToggle; // 0x48
};

struct UAIColorVariantPool {
	TArray<FStringAssetReference> AvailableColors; // 0x28
};

struct UQuestDescDataAsset {
	bool IsEmergent; // 0x28
};

struct UFirstPersonAnimationInstance {
	float SpineRotationTime; // 0x29e8
	FVector RangedWeaponTargetingOffset; // 0x29ec
	float RangedWeaponAlpha; // 0x29f8
	FAthenaAnimationCamera CameraParams; // 0x29fc
	FAthenaAnimationFirstPersonAnimatic FirstPersonAnimatic; // 0x2a18
	ECameraLookatAnimationType CameraAdditiveBlendPoseType; // 0x2a98
	float RowboatCameraAlpha; // 0x2a9c
	char UseAdditiveHandOverlay : 1; // 0x2aa0
	char CameraAttachmentTypeNotDefault : 1; // 0x2aa0
	char BlendUpperBodyAndArmOverlay : 1; // 0x2aa0
	char UseArmOverlayJumpContinuous : 1; // 0x2aa0
	char IsSwimming : 1; // 0x2aa0
	char IsControllableObjectActive : 1; // 0x2aa0
	char UseSwimmingEquip : 1; // 0x2aa0
	float EquipAnimationPlayRate; // 0x2aa4
	char ActivateIK : 1; // 0x2aa8
	char UseOneShotIntoAnimInContinuousUse : 1; // 0x2aa8
};

struct UTaleSettings {
	FStringAssetReference TaleRankRequirementsAssetRef; // 0x28
};

struct UMysteriousNotesCompletionEventsModelDataAsset {
	TArray<FMysteriousNotesCompletionEventsModel> MysteriousNoteCompletionEvents; // 0x28
};

struct AAthenaContestTavern {
	TArray<ASpawnLocation*> TavernSpawnPoints; // 0x3d0
	TArray<AActor*> TavernLevelActorsToPrepare; // 0x3e0
};

struct UMerchantQuestRandomRequiredItemsDataAsset {
	TArray<FMerchantQuestCategoryGroup> CategoryGroups; // 0x28
};

struct UJwtAuthenticationTokenSettings {
	FString TokenSecretKey; // 0x28
};

struct AEmissaryFlag {
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x3d8
	UWwiseEvent* StartAmbientFlagSfx; // 0x3e0
	UWwiseEvent* StopAmbientFlagSfx; // 0x3e8
	UWwiseEvent* AttachFlagSfx; // 0x3f0
	UWwiseEvent* DetachFlagSfx; // 0x3f8
	UWwiseObjectPoolWrapper* SfxPool; // 0x400
	USceneComponent* RootSceneComponent; // 0x408
	UStaticMeshComponent* EmissaryFlagStaticMeshComponent; // 0x410
	FStringAssetReference CurrentEmissaryFlagMesh; // 0x440
};

struct AEnsemble {
	UShantyItemDesc* ShantyDesc; // 0x400
	TArray<AActor*> Instruments; // 0x408
	TArray<FInstrumentHandlePairedWithActor> OldInstruments; // 0x418
	TArray<FInstrumentHandlePairedWithActor> NewInstruments; // 0x428
	FVector OverrideLeadPosition; // 0x438
	bool UseOverrideLeadPosition; // 0x444
	FShantyData ShantyData; // 0x460
};

struct UMovieSceneActorReferenceTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct UTutorialStarter {
	AAthenaPlayerController* AthenaPlayerController; // 0x28
	bool ShouldPlayIntroAnimatic; // 0x30
	bool ShouldDisableAllIntroBehaviour; // 0x31
	FFirstPersonAnimaticSettings IntroAnimationSettings; // 0x34
};

struct USteamAchievementPopUpSettings {
	FStringAssetReference SteamAchievementPopUpAssetLocation; // 0x28
};

struct AAggressiveGhostShip {
	FScriptMulticastDelegate OnPreparingToAnchorDrop; // 0x410
	UAggressiveGhostShipDataAsset* DataAsset; // 0x420
	UAggressiveGhostShipDifficultyDataAsset* DifficultyDataAsset; // 0x428
	UAggressiveGhostShipMineFormationsDataAsset* MineFormationsDataAsset; // 0x430
	UAggressiveGhostShipLocationDataAsset* LocationDataAsset; // 0x438
	UAggressiveGhostShipShotSelectionDataAsset* ShotSelectionDataAsset; // 0x440
	FAggressiveGhostShipRewardData RewardsData; // 0x448
	AShortRangeMarker* RewardMarker; // 0x460
	UBoxComponent* HitDetectionVolume; // 0x468
	UExplosionComponent* ShipDamageExplosionComponent; // 0x470
	UExplosionComponent* OnDeathPushBackExplosionComponent; // 0x478
	UShipDamageableComponent* ShipDamageableComponent; // 0x480
	UNamedPointsComponent* NamedPointsComponent; // 0x488
	USplineComponent* SplineComponent; // 0x490
	float PortalEntryDistanceOffset; // 0x498
	float PortalSpawnZOffset; // 0x49c
	FVector PortalSpawnScale; // 0x4a0
	UCurveFloat* ImpulseCurve; // 0x4b0
	FAggressiveGhostShipSplineData SplineData; // 0x4b8
	TArray<TWeakObjectPtr<AAggressiveGhostShip>> GhostShipsToIgnore; // 0x518
	FAggressiveGhostShipState ShipState; // 0x528
	bool HasMadeShipAppear; // 0x530
	AAggressiveGhostShipPoolResource* PoolingResource; // 0x538
	bool IsOverlappingShip; // 0x540
	int32_t NumShotsLeftToKill; // 0x544
	FWeightedItemDescSpawner RewardSpawner; // 0x548
	bool IsInert; // 0x5a0
	float ExtraDistanceAroundSplineOffset; // 0x5a4
	UAggressiveGhostShipVisualsDataAsset* VisualsDataAsset; // 0x5a8
	ETrackedActorType TrackedActorType; // 0x5b0
	TArray<ALaunchableProjectile*> AllProjectiles; // 0x5b8
	UStaticMeshComponent* VisibleMesh; // 0x5c8
	UParticleSystemComponent* HealthIndicatorEffect; // 0x5d0
	TArray<UStaticMeshComponent*> ExtraMeshes; // 0x5d8
	TArray<UMeshComponent*> AllMeshes; // 0x760
	TArray<UMaterialInstanceDynamic*> AllMaterials; // 0x770
};

struct UBTTask_GetTotalHangoutTime {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UAIClassIdTypeList {
	TArray<UAIClassId*> AllClassIds; // 0x28
};

struct UVoyageProposalAssetSelector {
	TArray<FVoyageProposalCompanyAssetData> Companies; // 0x28
};

struct ACameraActor {
	EAutoReceiveInput AutoActivateForPlayer; // 0x3d0
	UCameraComponent* CameraComponent; // 0x3d8
	char bConstrainAspectRatio : 1; // 0x3e8
	float AspectRatio; // 0x3ec
	float FOVAngle; // 0x3f0
	float PostProcessBlendWeight; // 0x3f4
	FPostProcessSettings PostProcessSettings; // 0x400
};

struct UImpulseThrottlerComponent {
	float MinimumTimeBetweenImpulses; // 0xd0
	float ImpulseMultiplier; // 0xd4
};

struct UTallTaleContestRecipeDataAsset {
	FContestZoneDistribution WeightedContestZonesToActivate; // 0x168
	TArray<FContestIslandArchetype> AvailableIslandArchetypes; // 0x178
	FContestTimerData ContestVoyageTime; // 0x188
	FStringClassReference ScoreSystemToLoad; // 0x1a0
};

struct UStartAggressiveGhostShipEncounterStep {
	UStartAggressiveGhostShipEncounterStepDesc* StepDesc; // 0x90
	AOverlapTriggerActor* EncounterIslandOverlapTrigger; // 0x98
};

struct UVoyageDescList {
	TArray<UVoyageDescDataAsset*> Tales; // 0x28
};

struct UBTTask_WaitForWieldBase {
	bool WaitForUnstashed; // 0x60
};

struct UMaterialShaderQualitySettings {
	TMap<FName, UShaderPlatformQualitySettings*> ForwardSettingMap; // 0x28
};

struct UBuryItemStatTriggerType {
	FName UniqueTextIdentifier; // 0x28
};

struct UVolcanoSetupDataAsset {
	FWeightedProbabilityRangeOfRanges WarmUpDuration; // 0x28
	FWeightedProbabilityRangeOfRanges EruptionDuration; // 0x58
	FWeightedProbabilityRangeOfRanges DormantDuration; // 0x88
	float MinimumDurationForTheEffects; // 0xb8
	FWeightedProbabilityRangeOfRanges GroundAndWaterStayHotDurationAfterVolcanoFinishesDuration; // 0xc0
	FWeightedProbabilityRangeOfRanges ProjectileTriggerFrequency; // 0xf0
	FWeightedProbabilityRangeOfRanges PercentageOfMaxTargetingRange; // 0x120
	int32_t MinNumProjectilesToTrigger; // 0x150
	int32_t MaxNumProjectilesToTrigger; // 0x154
	int32_t ExtraProjectilePoolNumProjectiles; // 0x158
	FVolcanoTargetChances ChanceToTargetPlayers; // 0x160
	FVolcanoTargetChances ChanceToTargetShips; // 0x1b8
	FVolcanoTargetChances ChanceToTargetWatercraft; // 0x210
	FWeightedProbabilityRangeOfRanges PlayerNearMissDistanceInMetres; // 0x268
	float InnerShipNearMissRadiusInMetres; // 0x298
	float OuterShipNearMissRadiusInMetres; // 0x29c
	float InnerWatercraftNearMissRadiusInMetres; // 0x2a0
	float OuterWatercraftNearMissRadiusInMetres; // 0x2a4
	TArray<FWeightedVolcanoProjectile> Projectiles; // 0x2a8
	TArray<FLandmarkReactionEventPlayForceFeedbackEntry> ForceFeedbackIgnitionEffect; // 0x2b8
	AActor* LocalMiniProjectilesClass; // 0x2c8
	FWeightedProbabilityRangeOfRanges LocalMiniProjectilesSpawnHeightAbovePlayerInMetres; // 0x2d0
	FWeightedProbabilityRangeOfRanges LocalMiniProjectilesSpawnDistanceFromPlayerInMetres; // 0x300
	FWeightedProbabilityRangeOfRanges LocalMiniProjectilesTimeBetweenSpawns; // 0x330
	FWeightedProbabilityRange NumLocalMiniProjectilesToTrigger; // 0x360
	FWeightedProbabilityRangeOfRanges LocalMiniProjectilesSpeed; // 0x380
	float LocalMiniProjectilesGravityScale; // 0x3b0
	FWeightedProbabilityRangeOfRanges LocalMiniProjectilesSpawnAngleRange; // 0x3b8
	FWeightedProbabilityRangeOfRanges LocalMiniProjectilesSpawnStartPositionOffsetInMetres; // 0x3e8
	float LocalMiniProjectilesSpawnDistanceSpeedScalar; // 0x418
	float LocalMiniProjectilesSpawnDistanceMaxPlayerSpeed; // 0x41c
	float TimeBetweenLocalEmbers; // 0x420
	TArray<FVolcanoSetupDataEmbersEntry> LocalEmbers; // 0x428
	float EmbersSpawnOffsetInMetres; // 0x438
	float ServerMigrationDistanceAsMultipleOfOuterTargetRadius; // 0x43c
};

struct UIntentCombinerComponent {
	float CooperationMultiplier; // 0xc8
	float StartMovingThreshold; // 0xcc
	float StopMovingThreshold; // 0xd0
	float ConflictedStartMovingThreshold; // 0xd4
	float ConflictedStopMovingThreshold; // 0xd8
	TArray<UObject*> IntentProviders; // 0xe0
};

struct AMatineeActorCameraAnim {
	UCameraAnim* CameraAnim; // 0x448
};

struct UParticleModuleBeamSource {
	Beam2SourceTargetMethod SourceMethod; // 0x50
	FName SourceName; // 0x54
	char bSourceAbsolute : 1; // 0x5c
	FRawDistributionVector Source; // 0x60
	char bLockSource : 1; // 0x98
	Beam2SourceTargetTangentMethod SourceTangentMethod; // 0x9c
	FRawDistributionVector SourceTangent; // 0xa0
	char bLockSourceTangent : 1; // 0xd8
	FRawDistributionFloat SourceStrength; // 0xe0
	char bLockSourceStength : 1; // 0x118
};

struct UWwiseAudioSettings {
	FWwiseAudioReverbPresets ReverbPresetSettings; // 0xe8
	FWwiseBinkSettings BinkSettings; // 0x150
	TArray<FStringAssetReference> PersistentSoundBanks; // 0x188
	FStringAssetReference InitBank; // 0x198
	FDirectoryPath WwiseSoundbanksRoot; // 0x1a8
	FStringAssetReference WwiseIDsDatabase; // 0x1b8
	FDirectoryPath WwiseStreamedFilesDirectory; // 0x1c8
	TArray<FWwiseIOPriorityMappingConfig> AsyncIOPriorityMappings; // 0x1d8
	FDirectoryPath TritonAcousticMapsDirectory; // 0x1e8
	FString DefaultLanguage; // 0x1f8
	FString SinkSharesetName; // 0x208
	FStringAssetReference PauseEventStart; // 0x218
	FStringAssetReference PauseEventRelease; // 0x228
	FStringAssetReference StopAllEvent; // 0x238
	FWwiseNetworkRelationship NetworkRelationship; // 0x248
	FWwiseAudioGameStateSettings AudioStateSettings; // 0x260
	uint32_t WaapiInterpreterPort; // 0x300
	UWwiseEvent* PauseEventStartInstance; // 0x308
	UWwiseEvent* PauseEventReleaseInstance; // 0x310
	UWwiseEvent* StopAllEventInstance; // 0x318
	UWwiseObjectPoolWrapper* AnimNotifyPoolInstance; // 0x320
	TArray<UWwiseEvent*> EventsToPlayOnFrontendStartInstance; // 0x368
	TArray<UWwiseEvent*> EventsToPlayOnFrontendEndInstance; // 0x378
	TArray<UWwiseEvent*> EventsToPlayOnStartEngagementInstance; // 0x388
	TArray<UWwiseEvent*> EventsToPlayOnEndEngagementInstance; // 0x398
	TArray<UWwiseEvent*> EventsToPlayOnLoadingStartInstance; // 0x3a8
	TArray<UWwiseEvent*> EventsToPlayOnLoadingEndInstance; // 0x3b8
	TArray<UWwiseEvent*> EventsToPlayOnFrontEndOrLoadingStartInstance; // 0x3c8
	TArray<UWwiseEvent*> EventsToPlayOnFrontEndOrLoadingEndInstance; // 0x3d8
};

struct UContestZoneRespawnLocationsDataAsset {
	TArray<FTransform> ContestRespawnLocations; // 0x28
};

struct UDynamicOnlyMechanismTriggerComponent {
	TArray<AActor*> MechanismActors; // 0x150
};

struct ATradeRoute {
	FStringAssetReference TradeRouteAssetReference; // 0x3d0
};

struct UBuoyantObjectSpawnParamsDataAsset {
	FBuoyantObjectSpawnParams Params; // 0x28
};

struct UItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct AAshenLordEncounterService {
	FAshenLordEncounterServiceDesc Desc; // 0x4c0
	UAshenLordEncounterServiceParams* Params; // 0x4d0
};

struct UClearTaleProgressStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAnimNotify_WieldableAnimationInterruptPoint {
	bool PlayedWithSequencer; // 0x28
};

struct UAnimNotify_DestroyCosmeticItem {
	EWieldAnimationLocation DestroyLocation; // 0x38
};

struct UCompleteVoyageConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UMeleeAttackProcessorComponentMock {
	int32_t MaxPlayerHitResponsesBroadcastPerAttack; // 0xd0
	int32_t MaxNonPlayerPawnHitResponsesBroadcastPerAttack; // 0xd4
	int32_t MaxOtherHitResponsesBroadcastPerAttack; // 0xd8
	float RewindInstigatorEstimationMaxSearchTime; // 0xdc
	float RewindInstigatorEstimationStepSize; // 0xe0
	FMeleeAttackHitResponses PredictiveHitResponses; // 0x114
	FMeleeAttackHitResponses ValidatedHitResponses; // 0x115
	FMeleeAttackHitResponses AuthoritativeHitResponses; // 0x116
	FMeleeAttackHitResponses ServerHitResponses; // 0x117
};

struct UExitOnAllCrewsDestroyedStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UAnimNotify_ResetDynamics {
	bool PlayedWithSequencer; // 0x28
};

struct UMaterialExpressionTransform {
	FExpressionInput Input; // 0x70
	EMaterialVectorCoordTransformSource TransformSourceType; // 0xa8
	EMaterialVectorCoordTransform TransformType; // 0xa9
};

struct ANamedPointsContainer {
	USceneComponent* Root; // 0x3d0
	UNamedPointsComponent* NamedPoints; // 0x3d8
};

struct AShipEmbedToken {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UWindDirectionalSourceComponent {
	float Strength; // 0x2b0
	float Speed; // 0x2b4
	float MinGustAmount; // 0x2b8
	float MaxGustAmount; // 0x2bc
};

struct UContestSpawnLocationsComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTaleQuestSelectorService {
	UTaleQuestSelectorServiceDesc* Desc; // 0x60
};

struct UTaleQuestFireEventStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UBoxCollisionExtentAdjustOverTimeComponent {
	bool ShouldAdjustBoxExtentX; // 0x108
	float PostAdjustmentBoxExtentX; // 0x10c
	bool ShouldAdjustBoxExtentY; // 0x110
	float PostAdjustmentBoxExtentY; // 0x114
	bool ShouldAdjustBoxExtentZ; // 0x118
	float PostAdjustmentBoxExtentZ; // 0x11c
	FVector ServerSizeScale; // 0x120
	UBoxComponent* BoxCollisionToAdjust; // 0x130
};

struct UAISpawnCampaignCondition {
	FName CampaignName; // 0x30
};

struct UMerchantCaptainSpawnComponent {
	bool SpawnOnStart; // 0x2b0
	FItemSpawnParams SpawnParams; // 0x2b8
	UWeightedItemDescSpawnDataAsset* ReferencedSpawnDistributionAsset; // 0x2e0
	UItemSpawnDistributionAsset* ReferencedSpawnDistribution; // 0x2e8
	TArray<FItemSpawnTransform> SpawnTransforms; // 0x2f0
	TArray<FItemSpawnTransformWithRandomQuantity> SpawnTransformsWithRandomQuantities; // 0x300
	FName FeatureToggle; // 0x310
	ESpawnedItemSource SpawnSource; // 0x318
	float SpawnRate; // 0x31c
	bool DestroyProxiesOnEndPlay; // 0x320
	bool SpawnWithPhysicsEnabled; // 0x321
	bool DoNotAttachToOwnerWhenSpawned; // 0x322
	bool DropItemsOnSpawn; // 0x323
	bool DropItemsUsingPriorityAIDropParams; // 0x324
	TArray<FSpawnInstance> SpawnList; // 0x328
	TArray<FSpawnInstance> SingleItemInstances; // 0x338
	TArray<FSpawnedItem> SpawnedItems; // 0x348
};

struct UShipDescAsset {
	FShipDesc Desc; // 0x28
};

struct UAIFormRankProgression {
	TArray<FAIFormRankMapping> RankMappings; // 0x28
	int32_t NumberOfRanks; // 0x38
};

struct USharkAICharacterAudioComponentParams {
	UWwiseEvent* PlaySharkAttackTellLoop; // 0x28
	UWwiseEvent* StopSharkAttackTellLoop; // 0x30
	UWwiseEvent* PlaySharkDeath; // 0x38
	UWwiseEvent* PlaySharkHit; // 0x40
	UWwiseEvent* PlaySharkFinLoop; // 0x48
	UWwiseEvent* StopSharkFinLoop; // 0x50
	FName SharkFinUnderwaterSwitchGroup; // 0x58
	FName SharkFinUnderwaterSwitchAboveWater; // 0x60
	FName SharkFinUnderwaterSwitchUnderwater; // 0x68
	FName SharkSpeedFactorRtpc; // 0x70
};

struct UStatusResponseChangeSailHeight {
	float Duration; // 0x30
};

struct UMaterialInstanceConstant {
	UPhysicalMaterial* PhysMaterial; // 0x58
	UMaterialInterface* Parent; // 0x60
	char bHasStaticPermutationResource : 1; // 0x68
	char bOverrideSubsurfaceProfile : 1; // 0x68
	FGuid ParentLightingGuid; // 0x70
	TArray<FFontParameterValue> FontParameterValues; // 0x80
	TArray<FScalarParameterValue> ScalarParameterValues; // 0x90
	TArray<FTextureParameterValue> TextureParameterValues; // 0xa0
	TArray<FVectorParameterValue> VectorParameterValues; // 0xb0
	FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0xc0
};

struct UTaleQuestDescAsset {
	UTaleQuestStepDesc* Root; // 0x30
	TArray<UUserDefinedStruct*> Linkage; // 0x38
	TArray<FTaleQuestToggledDefinition> ToggledDefinitions; // 0x48
	UObject* Definition; // 0x58
	UObject* DevDefinition; // 0x60
	FText TaleFailMessage; // 0x68
	FName TaleFailBannerTag; // 0xa0
	bool ShouldFireStartTallTaleTrackedObjective; // 0xa8
};

struct UProceduralFoliageSpawner {
	int32_t RandomSeed; // 0x28
	float TileSize; // 0x2c
	int32_t NumUniqueTiles; // 0x30
	TArray<FFoliageTypeObject> FoliageTypes; // 0x38
	bool bNeedsSimulation; // 0x48
};

struct UUserWidget {
	FLinearColor ColorAndOpacity; // 0x140
	DelegateProperty ColorAndOpacityDelegate; // 0x150
	FSlateColor ForegroundColor; // 0x160
	DelegateProperty ForegroundColorDelegate; // 0x190
	bool bSupportsKeyboardFocus; // 0x1a0
	UWidgetTree* WidgetTree; // 0x1a8
	TArray<UUMGSequencePlayer*> ActiveSequencePlayers; // 0x1b0
	TArray<UUMGSequencePlayer*> StoppedSequencePlayers; // 0x1c0
	TArray<FNamedSlotBinding> NamedSlotBindings; // 0x1d0
};

struct UTestUObjectWithObjectProperty {
	UObject* ObjectProperty; // 0x28
};

struct ULiquidContainerService {
	TArray<UInteractableArea*> InteractableAreas; // 0x38
};

struct UEnvQueryOption {
	UEnvQueryGenerator* Generator; // 0x28
	TArray<UEnvQueryTest*> Tests; // 0x30
};

struct UGameplayAbility_Montage {
	UAnimMontage* MontageToPlay; // 0x448
	float PlayRate; // 0x450
	FName SectionName; // 0x454
	TArray<UGameplayEffect*> GameplayEffectClassesWhileAnimating; // 0x460
	TArray<UGameplayEffect*> GameplayEffectsWhileAnimating; // 0x470
};

struct UMovieSceneSpawnSection {
	bool DefaultValue; // 0xa0
	FIntegralCurve BoolCurve; // 0xa8
};

struct UBlockEarthquakeTaleQuestServiceDesc {
	FQuestVariableActor ActorNearIsland; // 0x28
};

struct USpawnPhasedActorStep {
	USpawnPhasedActorStepDesc* Desc; // 0x90
};

struct UShipwreckSiteGeneratorNoneComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UClearProgressSpawnStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UParticleModuleSizeMultiplyLife {
	FRawDistributionVector LifeMultiplier; // 0x50
	char MultiplyX : 1; // 0x88
	char MultiplyY : 1; // 0x88
	char MultiplyZ : 1; // 0x88
};

struct AOnlineBeaconHostObject {
	FString BeaconTypeName; // 0x3d0
	AOnlineBeaconClient* ClientBeaconActorClass; // 0x3e0
	TArray<AOnlineBeaconClient*> ClientActors; // 0x3e8
};

struct UParticleModuleVelocity {
	char bUseGroupAForAll : 1; // 0x58
	FRawDistributionVector StartVelocity; // 0x60
	FRawDistributionVector AdditionalStartVelocities[0x5]; // 0x98
	FRawDistributionFloat StartVelocityRadial; // 0x1b0
};

struct UMaterialExpressionLandscapeLayerSwitch {
	FExpressionInput LayerUsed; // 0x70
	FExpressionInput LayerNotUsed; // 0xa8
	FName ParameterName; // 0xe0
	char PreviewUsed : 1; // 0xe8
	FGuid ExpressionGUID; // 0xec
};

struct UMultiLineEditableTextBox {
	FText Text; // 0x138
	FEditableTextBoxStyle WidgetStyle; // 0x170
	FTextBlockStyle TextStyle; // 0x9d0
	USlateWidgetStyleAsset* Style; // 0xb30
	ETextJustify Justification; // 0xb38
	bool bAutoWrapText; // 0xb39
	float WrapTextAt; // 0xb3c
	FSlateFontInfo Font; // 0xb40
	FLinearColor ForegroundColor; // 0xb80
	FLinearColor BackgroundColor; // 0xb90
	FLinearColor ReadOnlyForegroundColor; // 0xba0
	FScriptMulticastDelegate OnTextChanged; // 0xbb0
	FScriptMulticastDelegate OnTextCommitted; // 0xbc0
};

struct ULandscapeMeshProxyComponent {
	FGuid LandscapeGuid; // 0x5f0
	TArray<FIntPoint> ProxyComponentBases; // 0x600
	uint8_t ProxyLOD; // 0x610
};

struct UPioneerComponent {
	float PioneerPeriodicUpdateInterval; // 0xc8
	int64_t MinUpdateTime; // 0xd0
	int64_t PioneersProgressTime; // 0xe8
};

struct USpawnDependentTrackedOwnerComponent {
	ETrackedOwnerType TrackedOwnerType; // 0xd0
};

struct UCookerComponent {
	TArray<FStatus> StatusToApplyToContents; // 0xd0
	TArray<FCookerSmokeFeedbackEntry> VFXFeedback; // 0xe0
	UStaticMeshMemoryConstraintComponent* CookableStaticMeshComponent; // 0xf0
	USkeletalMeshMemoryConstraintComponent* CookableSkeletalMeshComponent; // 0xf8
	FName CookedMaterialParameterName; // 0x100
	FName BurnDownDirectionParameterName; // 0x108
	float PlacementVarianceAngleBound; // 0x110
	bool OnByDefault; // 0x114
	UCookingComponentAudioParams* AudioParams; // 0x118
	EVfxRegion VfxLocation; // 0x120
	AItemInfo* CurrentlyCookingItem; // 0x128
	FCookingClientRepresentation CookingState; // 0x130
	UParticleSystemComponent* SmokeParticleComponent; // 0x198
	UMaterialInstanceDynamic* VisibleCookableMaterial; // 0x1a0
	bool TurnedOn; // 0x1a8
	bool OnIsland; // 0x1a9
};

struct UNPCDialogPredicateReadAllOf {
	FString SectionName; // 0x38
};

struct AShroudBreakerWieldable {
	UShroudBreakerComponent* ShroudBreakerComponent; // 0x790
};

struct UBlendedAtmosphericPressureZoneComponent {
	UCurveFloat* WeightFadeCurveNormalised; // 0x2d0
	UCurveFloat* RadiusFadeCurveNormalised; // 0x2d8
};

struct UAnimationDataStoreAsset {
	TArray<FAnimationDataStoreAssetEntry> AssetRefs; // 0x28
};

struct ASwimmingCreaturePawn {
	UActionStateMachineComponent* ActionStateMachineComponent; // 0x4a0
	UActionStatePriorityTableData* ActionStatePriorityTableData; // 0x4a8
	AActionStateCreatorDefinition* ActionStateCreatorDefinition; // 0x4b0
	UAthenaAIControllerParamsDataAsset* AIControllerParams; // 0x4b8
	UShapeComponent* CollisionComponent; // 0x4c0
	USkeletalMeshMemoryConstraintComponent* Mesh; // 0x4c8
	USwimmingCreatureMovementComponent* FloatingMovementComponent; // 0x4d0
	URewindComponent* RewindComponent; // 0x4d8
	UPrimitiveComponent* ProjectileTraceHitVolume; // 0x4e0
	UHealthComponent* HealthComponent; // 0x4e8
	UActorDamageableComponent* DamageableComponent; // 0x4f0
	UDitherComponent* DitherComponent; // 0x4f8
	UAIPartsRetrievalComponent* AIPartsRetrievalComponent; // 0x500
	UNetworkSyncedAnimationComponent* NetworkSyncedAnimationComponent; // 0x508
	UNetworkTriggeredVFXComponent* NetworkTriggeredVFXComponent; // 0x510
	UWaterHeightProviderComponent* WaterHeightProviderComponent; // 0x518
	UWaterInteractionComponent* WaterInteractionComponent; // 0x520
	float FadeOutTime; // 0x528
	ESwimmingCreatureType SwimmingCreatureType; // 0x52c
	FVector CollisionShapeScaleOnDeath; // 0x530
	FAIEncounterSpecification PawnEncounterSpec; // 0x630
	TArray<FSwimmingCreatureLoadedMaterial> CurrentlyLoadedMaterials; // 0x860
	UAIStrategyId* CurrentAIStrategy; // 0x870
};

struct UTaleQuestStructGenService {
	FTQStructGenParams Params; // 0x60
	TArray<FTQStructGenSelection> QuestChain; // 0x160
	UTaleResourceBrokerService* ResourceBroker; // 0x170
	UGameEventExclusionZoneTaleService* GameEventExclusionZoneService; // 0x178
};

struct UCollisionProfile {
	TArray<FCollisionResponseTemplate> Profiles; // 0x38
	TArray<FCustomChannelSetup> DefaultChannelResponses; // 0x48
	TArray<FCustomProfile> EditProfiles; // 0x58
	TArray<FRedirector> ProfileRedirects; // 0x68
	TArray<FRedirector> CollisionChannelRedirects; // 0x78
};

struct UDamageableShipPartAudioParams {
	UWwiseEvent* DamageLevelEvent; // 0x28
	UWwiseObjectPoolWrapper* DamageLevelAudioPool; // 0x30
	FName DamageLevelAudioSwitchName; // 0x38
	TArray<FName> DamageLevelAudioSwitchValues; // 0x40
};

struct UNPCDialogConditional {
	bool ConditionalExpected; // 0x28
};

struct UVoiceChatComponent {
	FWwiseEmitter Emitter; // 0x2b8
	FName MouthSocketNameOnCharacterMesh; // 0x2d8
};

struct UBehaviorTreeComponent {
	TArray<UBTNode*> NodeInstances; // 0x148
};

struct APortalService {
	UPortalServiceParams* Params; // 0x3d8
	TArray<FActivePortal> ActivePortals; // 0x3e0
	TArray<FPortalSpawningInfo> PortalSpawnInfos; // 0x3f0
};

struct UCutsceneResponseComponent {
	TArray<UCutsceneResponseSheet*> Sheets; // 0xc8
};

struct UMovieSceneColorTrack {
	bool bIsSlateColor; // 0xb0
};

struct UMovieSceneMarginTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct UStatusResponseSetScalarParamOnCharacter {
	TArray<FScalarParamInfo> ParamsToChange; // 0x30
};

struct UShelteredComponent {
	FName FeatureFlag; // 0xd0
	EShelterUpdateOption ShelterUpdateOption; // 0xd8
	float RaycastSpreadInCentimetres; // 0xdc
	float RaycastHeightOffsetHeightInCentimetres; // 0xe0
	ECollisionChannel RaycastHitTestTraceChannel; // 0xe4
};

struct UInterpGroupInstCamera {
	UInterpGroup* Group; // 0x28
	AActor* GroupActor; // 0x30
	TArray<UInterpTrackInst*> TrackInst; // 0x38
};

struct ATestBeaconHost {
	FString BeaconTypeName; // 0x3d0
	AOnlineBeaconClient* ClientBeaconActorClass; // 0x3e0
	TArray<AOnlineBeaconClient*> ClientActors; // 0x3e8
};

struct AVeilOfTheAncients {
	float NumberOfGems; // 0x3f8
	ULockComponent* LockComponent; // 0x400
	UStaticMeshComponent* StaticMeshComponent; // 0x408
};

struct UCosmeticItemAnimationDataAsset {
	FName WieldSockets[0x7]; // 0x28
};

struct UGameplayEffectCalculation {
	TArray<FGameplayEffectAttributeCaptureDefinition> RelevantAttributesToCapture; // 0x28
};

struct UAbilityTask_WaitDelay {
	FScriptMulticastDelegate OnFinish; // 0x68
};

struct UCompressedCanvasRenderTarget2D {
	TWeakObjectPtr<UWorld> World; // 0x190
	UCanvasRenderTarget2D* RenderTarget; // 0x198
};

struct UWasWieldedCommodityItemBoughtAtDemandStatCondition {
	ECommodityDemand CommodityDemand; // 0x30
};

struct UAISpawnPointSeedComponent {
	USceneComponent* AttachParent; // 0xc8
	TArray<USceneComponent*> AttachChildren; // 0xd0
	FName AttachSocketName; // 0xe0
	char bRequiresCustomLocation : 1; // 0xe8
	char bAbsoluteLocation : 1; // 0xe8
	char bAbsoluteTranslation : 1; // 0xe8
	char bAbsoluteRotation : 1; // 0xe8
	char bAbsoluteScale : 1; // 0xe8
	char bVisible : 1; // 0xe8
	char bHiddenInGame : 1; // 0xe8
	char bShouldUpdatePhysicsVolume : 1; // 0xe8
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0xe9
	char bUseAttachParentBound : 1; // 0xe9
	char bComponentIsUnionOfChildren : 1; // 0xe9
	char bJitterReduction : 1; // 0xe9
	char CacheRootVelocity : 1; // 0xe9
	char bWorldToComponentUpdated : 1; // 0xe9
	TWeakObjectPtr<APhysicsVolume> PhysicsVolume; // 0xf8
	FVector RelativeScale3D; // 0x11c
	FVector RelativeLocation; // 0x128
	FRotator RelativeRotation; // 0x134
	EComponentMobility Mobility; // 0x220
	EDetailMode DetailMode; // 0x221
	FVector ComponentVelocity; // 0x22c
	FScriptMulticastDelegate PhysicsVolumeChangedDelegate; // 0x238
	TArray<FName> SocketVelocitiesToCache; // 0x258
};

struct UEnvQueryTest_SeaClueSpawnLocation {
	float MinProjectionDistance; // 0x170
	float MaxProjectionDistance; // 0x174
	float ProjectionAngleInDegrees; // 0x178
	float IslandProximitySafeThreshold; // 0x17c
	UEnvQueryContext* ContextSourcePoint; // 0x180
	UEnvQueryContext* ContextProjectionPoint; // 0x188
};

struct AVoyageInAContainerWieldableItem {
	TArray<FMessageInABottleVoyageEntry> VoyageRecipeList; // 0x790
	UWwiseEvent* OnOpenedSfx; // 0x7a0
};

struct UScratchAIAbilityParams {
	TArray<FMeleeAttackIdWeights> MeleeAttacks; // 0xc8
};

struct ACharacter {
	USkeletalMeshComponent* Mesh; // 0x448
	UCharacterMovementComponent* CharacterMovement; // 0x450
	UCapsuleComponent* CapsuleComponent; // 0x458
	FBasedMovementInfo BasedMovement; // 0x460
	FBasedMovementInfo ReplicatedBasedMovement; // 0x498
	FVector BaseTranslationOffset; // 0x4d0
	FQuat BaseRotationOffset; // 0x4e0
	char ReplicatedMovementMode; // 0x4f0
	bool bInBaseReplication; // 0x4f1
	float CrouchedEyeHeight; // 0x4f4
	char bIsCrouched : 1; // 0x4f8
	char bPressedJump : 1; // 0x4f8
	char bClientUpdating : 1; // 0x4f8
	char bClientWasFalling : 1; // 0x4f8
	char bClientResimulateRootMotion : 1; // 0x4f8
	char bSimGravityDisabled : 1; // 0x4f8
	char bServerMoveIgnoreRootMotion : 1; // 0x4f8
	float JumpKeyHoldTime; // 0x4fc
	float JumpMaxHoldTime; // 0x500
	FScriptMulticastDelegate OnReachedJumpApex; // 0x508
	FScriptMulticastDelegate OnCharacterMovementUpdated; // 0x528
	FRootMotionMovementParams ClientRootMotionParams; // 0x540
	TArray<FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x580
	FRepRootMotionMontage RepRootMotion; // 0x590
};

struct UAIWaveSpawner {
	FAISpawnerWave SpawnedWave; // 0x430
	float MinRespawnTime; // 0x530
	float MaxRespawnTime; // 0x534
};

struct UCustomizableGameEventSchedulerService {
	UGameEventSchedulerSettingsAsset* Settings; // 0x48
	UWorld* World; // 0x50
	TArray<FGameEventCount> PermittedEventTypes; // 0x88
};

struct UWardrobeExcludeDataAsset {
	TArray<FName> ExcludeItems; // 0x28
};

struct UShaderPlatformQualitySettings {
	FMaterialQualityOverrides QualityOverrides[0x3]; // 0x28
};

struct UAbilityTask_WaitInputRelease {
	FScriptMulticastDelegate OnRelease; // 0x68
};

struct ACrewSpawnLocations {
	TArray<AShipSpawnLocation*> AvailableSpawnLocations; // 0x4f8
	TArray<AProgressSpawnLocation*> AvailableNamedSpawnLocations; // 0x508
	TArray<AShipSpawnLocation*> PendingUnavailableSpawnLocations; // 0x518
	UCrewSpawnLocationVariablesListAsset* SpawnVariablesAsset; // 0x768
};

struct UMaterialExpressionQualitySwitch {
	FExpressionInput Default; // 0x70
	FExpressionInput Inputs[0x3]; // 0xa8
};

struct UExplosionComponent {
	FExplosionInfo ExplosionParams; // 0xd0
	bool UseLaunchLocation; // 0x210
	FVector RelativeLaunchLocation; // 0x214
	float LaunchHeight; // 0x220
};

struct UWorldMapIslandDataAsset {
	UTexture* Texture; // 0x28
	FWorldMapIslandDataCaptureParams CaptureParams; // 0x30
	float LabelOffset; // 0x70
};

struct UCoherentUIGTJSPayload {
	FString EventName; // 0x28
};

struct UTextureFeedbackComponent {
	UTexture* InputTexture1; // 0xc8
	UTexture2D* InputTexture2; // 0xd0
	int32_t TextureSizeX; // 0xd8
	int32_t TextureSizeY; // 0xdc
	FVector4 InputData; // 0xe0
	UTextureRenderTarget2D* FeedbackTexture; // 0x138
	UTextureRenderTarget2D* FeedbackTexturePingPong; // 0x140
};

struct UAshenLordDesc {
	FText LocalisedName; // 0x28
	UAIClassId* ClassId; // 0x60
	USceneDialogueData* DialogueData; // 0x68
	FPlayerStat LordDefeatedStat; // 0x70
};

struct UEntitlementReward {
	UEntitlementDesc* EntitlementDesc; // 0x28
};

struct UOutOfAmmoDestroyEffect {
	FOutOfAmmoDestructionEffects DestructionEffects; // 0x28
	AActor* OwningActor; // 0xa8
};

struct UBTDecorator_CheckGameplayTagsOnActor {
	FBlackboardKeySelector ActorToCheck; // 0x68
	EGameplayContainerMatchType TagsToMatch; // 0x90
	FGameplayTagContainer GameplayTags; // 0x98
	FString CachedDescription; // 0xc0
};

struct ARevealableService {
	float FullCheckInterval; // 0x3d8
	UObject* TargetGameStateObject; // 0x3e0
};

struct USummonAIAbility {
	UAIIncrementalWaveSpawner* SummonSpawner; // 0x78
};

struct UAIItemSpawnRankProgression {
	TArray<FAIDropSpawnerRankMapping> RankMappings; // 0x28
	int32_t NumberOfRanks; // 0x38
};

struct UIntSerialization {
	uint16_t UnsignedInt16Variable; // 0x28
	uint32_t UnsignedInt32Variable; // 0x2c
	uint64_t UnsignedInt64Variable; // 0x30
	uint8_t SignedInt8Variable; // 0x38
	int16_t SignedInt16Variable; // 0x3a
	int64_t SignedInt64Variable; // 0x40
	char UnsignedInt8Variable; // 0x48
	int32_t SignedInt32Variable; // 0x4c
};

struct UBlackboardKeyType_String {
	FString StringValue; // 0x30
};

struct UCargoRunMapLayout {
	FTreasureMapWidgetText NPCNameDescription; // 0x28
	FTreasureMapWidgetText IslandNameDescription; // 0x48
	FTreasureMapWidgetText NumOfItemsDescription; // 0x68
	TArray<FTreasureMapWidgetLocalisedText> GeneralText; // 0x88
	TArray<FTreasureMapWidgetTexture> Images; // 0x98
};

struct URatManagerComponentDataAsset {
	float TurnBlendInOutPercentage; // 0x28
	int32_t NumPseudoRandomValues; // 0x2c
	int32_t FixedSeed; // 0x30
	FVector RatEmitterOffset; // 0x34
	UWwiseEvent* StartRatSounds; // 0x40
	UWwiseEvent* StopRatSounds; // 0x48
	UWwiseObjectPoolWrapper* AudioPool; // 0x50
	int32_t MaxNumShipsToDisplayRatsOn; // 0x58
	FWeightedProbabilityRangeOfRanges RatScale; // 0x60
	TArray<FRatManagerRatInfestationLevel> RatInfestationLevels; // 0x90
};

struct UCrewOwnershipTrackingComponentMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UParticleModuleTrailBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct AServerMigrationSerialisationDetailsTestsMigrationCustomSerialiseActor {
	FServerMigrationCustomMigrationSerialisationStruct TestStruct; // 0x3d0
};

struct APickupableObject {
	FStartPickupObjectActionRuleParams StartPickupObjectActionRuleParams; // 0x408
	float PickupTime; // 0x418
};

struct UMovieScene3DAttachTrack {
	TArray<UMovieSceneSection*> ConstraintSections; // 0x88
};

struct ACutsceneTriggerVolume {
	FName CutsceneName; // 0x408
	bool SingleUse; // 0x410
};

struct UTetherInWorldSpaceComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UNPCDialogPredicateIsWearingAll {
	TArray<UClothingDesc*> ClothingItems; // 0x38
};

struct UAthenaCharacterKnockbackComponentMock {
	bool Disabled; // 0xd0
	AAthenaCharacter* Character; // 0xd8
};

struct UTaleQuestPlankServiceDesc {
	UItemDesc* WoodenPlankDesc; // 0x30
};

struct UCollectorsChestItemSlotDefinitionDataAsset {
	TArray<FCollectorsChestItemSlotDefinition> AllowedObjects; // 0x28
	bool AllowAll; // 0x38
};

struct UDynamicCordRenderComponent {
	float BoundsPadding; // 0x628
	USceneComponent* EndPointA; // 0x630
	USceneComponent* EndPointB; // 0x638
};

struct UMovieSceneIntegerTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct UWorldRegionComponent {
	FName WorldRegionName; // 0x2b0
	UObject* RegionShanty; // 0x2b8
	float WorldRegionRadius; // 0x2c0
};

struct ULiquidContainerComponent {
	FName LiquidMaterialName; // 0xc8
	FName LiquidMaterialParameterName; // 0xd0
	TArray<FLiquidTypeParams> LiquidTypeParams; // 0xd8
	float StartingLiquidLevelNormalised; // 0xe8
	UCurveFloat* TransitionCurve; // 0xf0
	float TransitionSpeedDecrease; // 0xf8
	float TransitionSpeedIncrease; // 0xfc
	TArray<UMaterialInstanceDynamic*> LiquidMaterials; // 0x100
};

struct UPlaySequencerAnimationStepDesc {
	ULevelSequence* LevelSequenceToPlay; // 0x80
	FQuestVariableActor TargetActorToSpawn; // 0x88
	FQuestVariableActor LevelSequenceActorSpawnLocation; // 0x98
	FQuestVariableActor DockableBaseActor; // 0xa8
	FQuestVariableActor InteractingActor; // 0xb8
	bool PlayGlobally; // 0xc8
	bool IsLevelSequenceActorAlawaysRelevant; // 0xc9
	USceneDialogueData* DialogueData; // 0xd0
	TArray<FText> LocalisableNames; // 0xd8
	bool IsLooping; // 0xe8
	float SubtitleSphereRadiusInCm; // 0xec
	ULevelSequence* FemaleLevelSequenceToPlay; // 0xf0
};

struct ATestGameModeWithServiceProviderGameState {
	char bDisableAsyncOcclusionChecking : 1; // 0x3d8
	char bUseSeamlessTravel : 1; // 0x3d8
	char bPauseable : 1; // 0x3d8
	char bStartPlayersAsSpectators : 1; // 0x3d8
	char bDelayedStart : 1; // 0x3d8
	FString OptionsString; // 0x3e0
	APawn* DefaultPawnClass; // 0x3f0
	AHUD* HUDClass; // 0x3f8
	int32_t NumSpectators; // 0x400
	int32_t NumPlayers; // 0x404
	int32_t NumBots; // 0x408
	float MinRespawnDelay; // 0x40c
	AGameSession* GameSession; // 0x410
	int32_t NumTravellingPlayers; // 0x418
	FText DefaultPlayerName; // 0x420
	ULocalMessage* EngineMessageClass; // 0x458
	APlayerController* PlayerControllerClass; // 0x460
	ASpectatorPawn* SpectatorClass; // 0x468
	APlayerController* ReplaySpectatorPlayerControllerClass; // 0x470
	APlayerState* PlayerStateClass; // 0x478
	AGameState* GameStateClass; // 0x480
	AGameState* GameState; // 0x488
	TArray<APlayerState*> InactivePlayerArray; // 0x490
	TArray<FGameClassShortName> GameModeClassAliases; // 0x4b0
	float InactivePlayerStateLifeSpan; // 0x4c0
	bool bHandleDedicatedServerReplays; // 0x4c4
};

struct UMaterialBillboardComponent {
	TArray<FMaterialSpriteElement> Elements; // 0x588
};

struct UEditableGameplayTagQueryExpression_AllTagsMatch {
	FGameplayTagContainer Tags; // 0x28
};

struct UWidgetComponent {
	EWidgetSpace Space; // 0x588
	UUserWidget* WidgetClass; // 0x590
	FIntPoint DrawSize; // 0x598
	FVector2D Pivot; // 0x5a0
	float MaxInteractionDistance; // 0x5a8
	ULocalPlayer* OwnerPlayer; // 0x5b0
	FLinearColor BackgroundColor; // 0x5b8
	EWidgetBlendMode BlendMode; // 0x5c8
	bool bIsOpaque; // 0x5c9
	bool bIsTwoSided; // 0x5ca
	float ParabolaDistortion; // 0x5cc
	bool TickWhenOffscreen; // 0x5d0
	UUserWidget* Widget; // 0x5d8
	UBodySetup* BodySetup; // 0x5e0
	UMaterialInterface* TranslucentMaterial; // 0x5e8
	UMaterialInterface* TranslucentMaterial_OneSided; // 0x5f0
	UMaterialInterface* OpaqueMaterial; // 0x5f8
	UMaterialInterface* OpaqueMaterial_OneSided; // 0x600
	UMaterialInterface* MaskedMaterial; // 0x608
	UMaterialInterface* MaskedMaterial_OneSided; // 0x610
	UTextureRenderTarget2D* RenderTarget; // 0x618
	UMaterialInstanceDynamic* MaterialInstance; // 0x620
	bool bUseLegacyRotation; // 0x628
	bool bAddedToScreen; // 0x629
};

struct UAddFogBankAvoidanceAreaStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleQuestGenericBannerStepDesc {
	FText Message; // 0x80
	FText Header; // 0xb8
	FName Tag; // 0xf0
	bool DisableMusic; // 0xf8
};

struct ATestAthenaGameModeWithLoopBackServiceEndpoint {
	char bDisableAsyncOcclusionChecking : 1; // 0x3d8
	char bUseSeamlessTravel : 1; // 0x3d8
	char bPauseable : 1; // 0x3d8
	char bStartPlayersAsSpectators : 1; // 0x3d8
	char bDelayedStart : 1; // 0x3d8
	FString OptionsString; // 0x3e0
	APawn* DefaultPawnClass; // 0x3f0
	AHUD* HUDClass; // 0x3f8
	int32_t NumSpectators; // 0x400
	int32_t NumPlayers; // 0x404
	int32_t NumBots; // 0x408
	float MinRespawnDelay; // 0x40c
	AGameSession* GameSession; // 0x410
	int32_t NumTravellingPlayers; // 0x418
	FText DefaultPlayerName; // 0x420
	ULocalMessage* EngineMessageClass; // 0x458
	APlayerController* PlayerControllerClass; // 0x460
	ASpectatorPawn* SpectatorClass; // 0x468
	APlayerController* ReplaySpectatorPlayerControllerClass; // 0x470
	APlayerState* PlayerStateClass; // 0x478
	AGameState* GameStateClass; // 0x480
	AGameState* GameState; // 0x488
	TArray<APlayerState*> InactivePlayerArray; // 0x490
	TArray<FGameClassShortName> GameModeClassAliases; // 0x4b0
	float InactivePlayerStateLifeSpan; // 0x4c0
	bool bHandleDedicatedServerReplays; // 0x4c4
};

struct UWaitForVaultCompletionStep {
	UWaitForVaultCompletionStepDesc* Desc; // 0x90
};

struct UTaleQuestAddXMarksMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UEnvQueryGenerator_KrakenSpawnLocations {
	FString OptionName; // 0x30
	bool NonShippingOnly; // 0x40
	UEnvQueryItemType* ItemType; // 0x48
};

struct UTaleQuestIsClueOfTypeStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UNPCHeldObjectData {
	FName LeftHandWieldSocket; // 0x28
	FName RightHandWieldSocket; // 0x30
	FName DetachSocketA; // 0x38
	FName DetachSocketB; // 0x40
	AActor* Object1; // 0x48
	AActor* Object2; // 0x50
	AActor* Object3; // 0x58
	AActor* Object4; // 0x60
	AActor* Object5; // 0x68
	AActor* Object6; // 0x70
	AActor* Object7; // 0x78
	AActor* Object8; // 0x80
	AActor* Object9; // 0x88
	AActor* Object10; // 0x90
};

struct AGameEventService {
	TArray<AGameEvent*> GameEvents; // 0x418
};

struct UWeightedTreasureChestDescAsset {
	TArray<FWeightedTreasureChestDesc> Rewards; // 0x28
};

struct UAnimatedStepsComponent {
	UPoseableSkeletalMeshComponent* Mesh; // 0xc8
	TArray<UBoxComponent*> Boxes; // 0xd0
	TArray<FVector> BoxOrigins; // 0xe0
};

struct AServerMigrationSerialisationDetailsTestsActorWithUniqueNetId {
	FUniqueNetIdRepl UniqueId; // 0x3d0
};

struct ASpeakingTrumpet {
	float LoudVoiceAttenuationScaler; // 0x798
	float QuietVoiceAttenuationScaler; // 0x79c
	float NonVerbalBroadcastRadiusScaler; // 0x7a0
	UInventoryItemComponent* InventoryItem; // 0x7a8
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7b0
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7b8
};

struct UBTService_SetAIAnimationState {
	FBlackboardKeySelector BlackboardKey; // 0x70
};

struct USpawnActorBaseStep {
	USpawnActorStepDescBase* BaseDesc; // 0x90
};

struct AAthenaPlayerCharacterUnitTestMock {
	UActionStateId* ExpectedActionStateId; // 0x1c30
};

struct UAbilityTask_VisualizeTargeting {
	FScriptMulticastDelegate TimeElapsed; // 0x68
};

struct AHarpoonProjectile {
	FReplicatedTransformState ReplicatedTransformState; // 0x610
	FNetTimeStampCalculator NetMovementTimeStamp; // 0x640
	UShapeComponent* CollisionComponent; // 0x6d0
	UStaticMeshComponent* MeshComponent; // 0x6d8
	UHarpoonRenderComponent* HarpoonRenderComponent; // 0x6e0
	USceneComponent* MovementBase; // 0x6e8
	FName TetherAttachSocketName; // 0x708
	float DamageAmount; // 0x718
	EHarpoonProjectileState ProjectileState; // 0x71c
};

struct UTeleportLocationRetrievalComponent {
	TArray<FTeleportLocation> TeleportLocations; // 0xc8
};

struct UVenomComponent {
	FStatus VenomStatusUsed; // 0xd0
	ECollisionChannel CollisionChannel; // 0xe8
	float RangeDistance; // 0xec
	float RangeAngle; // 0xf0
	float EffectDuration; // 0xf4
};

struct USeaFortsWorldDataAsset {
	TArray<ASeaFort*> SeaForts; // 0x28
	int32_t MaxActiveForts; // 0x38
	float ActivationMinDistanceFromPlayer; // 0x3c
	float RandomActivationTimeMin; // 0x40
	float RandomActivationTimeMax; // 0x44
	float CrewVacantGracePeriod; // 0x48
};

struct UTextureRenderTarget {
	float TargetGamma; // 0x138
};

struct UMerchantCrateMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct AToggleAnimatedMechanismActionProxy {
	FMechanismTransformAnimationCurve InactiveToActiveAnimation; // 0x428
	FMechanismTransformAnimationCurve ActiveToInactiveAnimation; // 0x430
};

struct UGameplayTask_WaitDelay {
	FScriptMulticastDelegate OnFinish; // 0x58
};

struct UEarthquakeSetupDataAsset {
	FWeightedProbabilityRangeOfRanges WarmUpDuration; // 0x28
	FWeightedProbabilityRangeOfRanges EarthquakeDuration; // 0x58
	FWeightedProbabilityRangeOfRanges CoolDownDuration; // 0x88
	FWeightedProbabilityRangeOfRanges DormantDuration; // 0xb8
	float ChanceOfTriggeringAVolcano; // 0xe8
	FFloatRange PercentageThroughEarthquakeToStartVolcano; // 0xec
	FPlayerFeedback WarmupPlayerFeedback; // 0x100
	FPlayerFeedback ActivePlayerFeedback; // 0x180
	FWeightedProbabilityRangeOfRanges StaggerStrengthDuration; // 0x200
	float StaggerStrengthModifierWhenOnAShip; // 0x230
	FFloatRange PercentageThroughCameraShakeToStartNextOne; // 0x234
	FFloatRange TimeToShipPush; // 0x244
	FWeightedProbabilityRangeOfRanges ForceToApplyToShip; // 0x258
	float MaximumShipSpeedToBePushed; // 0x288
	float ChanceEarthquakeTriggersGeysers; // 0x28c
	FWeightedProbabilityRangeOfRanges TimeBetweenLocalEffects; // 0x290
	FWeightedProbabilityRange NumberOfLocalEffectsToTrigger; // 0x2c0
	float EffectConeAngle; // 0x2e0
	float EffectRaycastDistanceInMetres; // 0x2e4
	FDistanceThrottledRandomParticleSystemPicker EarthquakeEffects; // 0x2e8
	float WarmupWindTurbulence; // 0x2f8
	FFloatRange WarmupGustPower; // 0x2fc
	float ActiveWindTurbulence; // 0x30c
	FFloatRange ActiveGustPower; // 0x310
};

struct AShortRangeMarker {
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x3e0
	float LifetimerTimer; // 0x3f0
	float FadeTimer; // 0x3f4
	FScriptMulticastDelegate TriggerFadeIn; // 0x3f8
	FScriptMulticastDelegate TriggerFadeOut; // 0x408
	TArray<TWeakObjectPtr<AActor>> CachedActors; // 0x418
};

struct APetAIController {
	TArray<FAIStategyControllerMovementMod> StrategyControllerMovementMods; // 0x918
	float DefaultControlRotationInterpSpeed; // 0x928
	UAIStrategyId* DefaultStrategy; // 0x930
	UReactStateMappingsDataAsset* ReactMappings; // 0x938
	UPetHangoutSpotSelectorComponent* HangoutSpotSelectorComponent; // 0x948
	UPetHangoutSpotComponent* ForcedHangoutSpotComponent; // 0x950
	UBlackboardData* DefaultBlackboardAsset; // 0x958
	UBehaviorTree* DefaultTree; // 0x960
	UBehaviorTree* HangoutTree; // 0x968
	UBehaviorTree* IdleTree; // 0x970
	float MaximumReactRange; // 0x978
	UPetDangerComponent* DangerComponent; // 0x980
	float MinAgentHalfHeightPctOverride; // 0x988
};

struct UNPCAnimInstance {
	AActor* LeftHandObject; // 0x458
	AActor* RightHandObject; // 0x460
	UNPCHeldObjectData* HeldObjectList; // 0x468
	USkeletalMeshComponent* NPCSkeletalMesh; // 0x470
	TArray<AActor*> InitialSpawnedCosmeticItems; // 0x478
	FHitReactionAnimationState HitReactionState; // 0x488
	FHitReactionAnimationData HitReactionData; // 0x4b0
	bool Active; // 0x4b8
	bool Interacting; // 0x4b9
	bool LookAtActive; // 0x4ba
	bool CustomAnimationLookAtActive; // 0x4bb
	float LookAtIKAlpha; // 0x4bc
	float LookAtEnabledInterpolationTime; // 0x4c0
	float LookAtDisabledInterpolationTime; // 0x4c4
	bool DisableLookAt; // 0x4c8
	UNPCCustomAnimationDataAsset* NPCCustomAnimationData; // 0x4d0
	FNPCCustomAnimationBlueprintData NPCCustomAnimationBlueprintData; // 0x4d8
	bool InitialSpawnedCosmeticItemsActive; // 0x540
	UAnimMontage* NPCCustomAnimationCurrentMontage; // 0x548
	UAnimMontage* NPCCustomAnimationCurrentFacialAdditiveMontage; // 0x550
	TArray<UAnimSequence*> IdleVariantAnims; // 0x558
	TArray<UAnimSequence*> InactiveVariantAnims; // 0x568
	TArray<UAnimSequence*> InteractVariantAnims; // 0x578
	FNPCAnimationIdlesVariantStruct NPCAllocatedIdleAnimations; // 0x588
	ENPCCustomAnimationState PreviousCustomAnimationState; // 0x5a8
	bool UseLookAt; // 0x5a9
	FVector LookAtPlayerPosition; // 0x5ac
	bool PlayerCharacterIsValid; // 0x5b8
	bool IsPlayingSequencerAnim; // 0x5b9
	float InteractionRange; // 0x5f4
	ACharacter* PlayerCharacter; // 0x5f8
};

struct UFloatingMessageInABottleClueDestinationGenerator {
	UClueSiteData* RequiredClueSiteDataType; // 0x28
	TArray<FWeightedClueDestinationDescriptor> WeightedSupportedDescriptorTypes; // 0x30
};

struct ADebugCameraController {
	char bUseOriginalPlayerHUD : 1; // 0x728
	char bShowSelectedInfo : 1; // 0x728
	char bIsFrozenRendering : 1; // 0x728
	UDrawFrustumComponent* DrawFrustum; // 0x730
	APlayerController* OriginalControllerRef; // 0x748
	UPlayer* OriginalPlayer; // 0x750
	float SpeedScale; // 0x758
	float InitialMaxSpeed; // 0x75c
	float InitialAccel; // 0x760
	float InitialDecel; // 0x764
	float SpeedScaleAdjustment; // 0x768
	float FovScaleAdjustment; // 0x76c
};

struct UDebugShipService {
	AShip* PlayerShip; // 0x40
};

struct UEntitlementInformationComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct USoundAttenuation {
	FAttenuationSettings Attenuation; // 0x28
};

struct UShantyCategory {
	FText Name; // 0x28
	FName UniqueTextIdentifier; // 0x60
	FStringAssetReference IconPath; // 0x68
};

struct UPortalDesc {
	UTunnelDesc* TunnelDesc; // 0x28
	FStringAssetReference RequestedPortalInstance; // 0x30
	ULevelSequence* SignalActivateLoopSequence; // 0x40
};

struct UPacingComponent {
	UPacingComponentPublicData* PublicData; // 0xd0
	AAthenaPlayerCharacter* Player; // 0xe8
};

struct APuzzleVault {
	FScriptMulticastDelegate OnVaultActivated; // 0x478
	FScriptMulticastDelegate OnVaultCompleted; // 0x488
	FScriptMulticastDelegate OnVaultFailed; // 0x498
	USpawnActorComponent* PuzzleMechanism1ActorComponent; // 0x4a8
	USpawnActorComponent* PuzzleMechanism2ActorComponent; // 0x4b0
	USpawnActorComponent* PuzzleMechanism3ActorComponent; // 0x4b8
	USpawnActorComponent* PuzzleMechanism4ActorComponent; // 0x4c0
	USpawnActorComponent* Brazier1ActorComponent; // 0x4c8
	USpawnActorComponent* Brazier2ActorComponent; // 0x4d0
	USpawnActorComponent* Brazier3ActorComponent; // 0x4d8
	USpawnActorComponent* Brazier4ActorComponent; // 0x4e0
	USpawnActorComponent* WaterActorComponent; // 0x4e8
	USpawnActorComponent* MainDoorActorComponent; // 0x4f0
	USpawnActorComponent* TimedMainDoorActorComponent; // 0x4f8
	USpawnActorComponent* RewardDoorActorComponent; // 0x500
	UStaticMeshComponent* PlinthItemSpawnMesh; // 0x508
	UStaticMeshComponent* ButtonMesh; // 0x510
	USceneComponent* DefaultSceneRoot; // 0x518
	UShapeComponent* VaultPassageOverlapVolume; // 0x520
	UShapeComponent* VaultRoomOverlapVolume; // 0x528
	FVaultButtonData VaultButtonData; // 0x530
	UObject* SpoutParticleSystem; // 0xfc0
	FText VaultName; // 0xfc8
	ASlidingDoor* OuterDoor; // 0x1000
	UVaultPuzzleDataAsset* DefaultPuzzleData; // 0x1008
	UVaultPuzzleDataAsset* TreasureVaultPuzzleData; // 0x1010
	EAllocationStrategy AllocationStrategy; // 0x1018
	float WeightOfBeingChosenByGHVoyage; // 0x101c
	UPuzzleVaultAudioParams* DefaultVaultAudioParams; // 0x1020
	UPuzzleVaultAudioParams* NoWaterVaultAudioParams; // 0x1028
	UPuzzleVaultAudioParams* NoMusicVaultAudioParams; // 0x1030
	UPuzzleVaultAudioParams* TreasureVaultAudioParams; // 0x1038
	FRuntimeFloatCurve TreasureVaultAudioCurve; // 0x1040
	float FillRatePerWaterSpout; // 0x10c0
	int32_t MaxNumWaterSpouts; // 0x10c4
	float BrazierExtinguishWaterLevel; // 0x10c8
	float SpoutsSubmergedWaterLevel; // 0x10cc
	float WaterFillFactorChangeToUpdateAudio; // 0x10d0
	float FailureCheckInterval; // 0x10d4
	float ResetCheckInterval; // 0x10d8
	FVector VaultDoorHidingPosition; // 0x10dc
	FVector VaultDoorActivePosition; // 0x10e8
	UWaterSpoutVFXComponent* WaterSpoutVFXComponent; // 0x10f8
	UVaultKeyMappingDataAsset* TreasureVaultKeyTypes; // 0x1100
	UClass* VaultTableAsset; // 0x1108
	UWaterModifierZoneComponent* WaterModifierZoneComponent; // 0x1128
	UClass* ReservationTotemAsset; // 0x1130
	FName TotemLocationTag; // 0x1150
	FVector TotemOffset; // 0x1158
	FVaultReserved TallTaleVaultReservation; // 0x1164
	FString SubjectName; // 0x1190
	FGuid VaultUniqueId; // 0x11a0
	AActor* ReservationTotem; // 0x11b0
	ASlidingDoor* VaultDoor; // 0x11b8
	ATimedDoorMechanismAction* TimedVaultDoor; // 0x11c0
	ASlidingDoor* VaultRewardDoor; // 0x11c8
	AWaterVolume* WaterVolume; // 0x11d0
	TArray<ARotatingBlockPuzzle*> PuzzleMechanisms; // 0x11d8
	TArray<ABeacon*> Braziers; // 0x11e8
	ATreasureVaultTable* VaultTable; // 0x11f8
	UVaultPuzzleDataAsset* VaultDataAsset; // 0x1200
	EVaultAudioSettings VaultAudioSetting; // 0x1208
	UPuzzleVaultAudioParams* VaultAudioParams; // 0x1210
	UTreasureVaultItemSpawnComponent* ScaffoldingSpawner; // 0x1218
	TArray<UTreasureVaultItemSpawnComponent*> RewardSpawners; // 0x1220
	TArray<UTreasureVaultItemSpawnComponent*> PressurePlateSpawners; // 0x1230
	TArray<FVaultPuzzleSolutionPositions> Solutions; // 0x1240
	TArray<AAthenaPlayerCharacter*> PlayersInVaultPassage; // 0x1250
	TArray<FStringAssetReference> MaterialSetReferences; // 0x1260
	UInteractableComponent* InteractableComponent; // 0x1270
	int32_t CurrentSolution; // 0x1278
	bool IsActive; // 0x127c
	bool IsCompleted; // 0x127d
	TArray<UVaultMaterialSetDataAsset*> MaterialSets; // 0x1280
	int32_t NumActiveWaterSpouts; // 0x1290
	float TimedDoorAnimationProgress; // 0x1294
	int32_t ActiveActionRule; // 0x12d8
	float ServerMigrationExclusionRadius; // 0x1410
};

struct UMaterialManipulationSettingsComponent {
	FMaterialManipulationSettings Settings; // 0xd0
	UMaterialInstance* OverrideMaterial; // 0x100
	FTransform PosedTransform; // 0x110
};

struct UShortRangeMarkerDataAsset {
	UActorSpawnData* RewardMarker; // 0x28
	float RewardMarkerHeight; // 0x30
};

struct UBlackboardAIDataProvider {
	FName ParamName; // 0x28
	float FloatValue; // 0x30
	int32_t IntValue; // 0x34
	bool BoolValue; // 0x38
};

struct UMaterialExpressionIfShadowPass {
	FExpressionInput Shadow; // 0x70
	FExpressionInput NotShadow; // 0xa8
};

struct UChooseIslandStepDesc {
	FQuestVariableVector SourceLocation; // 0x80
	FQuestVariableNameArray IslandsToIgnore; // 0x90
	FVoyageLocationParams LocationParams; // 0xa0
	FQuestVariableName IslandName; // 0xf8
};

struct UAllianceServiceTelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTaleQuestSelectClueSiteForLootStep {
	UTaleQuestSelectClueSiteForLootStepDesc* StepDesc; // 0x90
};

struct AMermaidInteractionProxy {
	UPrimitiveComponent* Mesh; // 0x400
	UInteractableComponent* InteractionRegion; // 0x408
	AModalInteraction* InteractionType; // 0x410
	FText DefaultTooltip; // 0x418
	FText DefaultDisplayName; // 0x450
	UNotificationInputId* NotificationInputId; // 0x488
	EActionDisplayPriority DisplayPriority; // 0x490
};

struct URegisterTransientActorStepDesc {
	FQuestVariableActor Actor; // 0x80
	float DestructionRadius; // 0x90
	bool IsPendingDestruction; // 0x94
};

struct UCannonSquashComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct ADestructibleActor {
	UDestructibleComponent* DestructibleComponent; // 0x3d0
	char bAffectNavigation : 1; // 0x3d8
	FScriptMulticastDelegate OnActorFracture; // 0x3e0
};

struct UProjectileMovementComponent {
	float InitialSpeed; // 0x110
	float MaxSpeed; // 0x114
	char bRotationFollowsVelocity : 1; // 0x118
	char bShouldBounce : 1; // 0x118
	char bInitialVelocityInLocalSpace : 1; // 0x118
	char bForceSubStepping : 1; // 0x118
	char bIsHomingProjectile : 1; // 0x118
	char bBounceAngleAffectsFriction : 1; // 0x118
	char bIsSliding : 1; // 0x118
	float PreviousHitTime; // 0x11c
	FVector PreviousHitNormal; // 0x120
	float ProjectileGravityScale; // 0x12c
	float Buoyancy; // 0x130
	float Bounciness; // 0x134
	float Friction; // 0x138
	float BounceVelocityStopSimulatingThreshold; // 0x13c
	FScriptMulticastDelegate OnProjectileBounce; // 0x140
	FScriptMulticastDelegate OnProjectileStop; // 0x150
	float HomingAccelerationMagnitude; // 0x160
	TWeakObjectPtr<USceneComponent> HomingTargetComponent; // 0x164
	float MaxSimulationTimeStep; // 0x16c
	int32_t MaxSimulationIterations; // 0x170
};

struct UMeshMemoryConstraintFallbackCategoryDataAsset {
	UMeshMemoryConstraintCategory* ConstraintCategory; // 0x28
	FStringAssetReference MeshFallbackReference; // 0x30
	int64_t CachedMeshResourceSize; // 0x40
};

struct UAmbientLightSourceComponent {
	float Radius; // 0x438
	float AmbientIntensity; // 0x43c
	FLinearColor Tint; // 0x440
	char QuadraticFalloff : 1; // 0x450
	EAmbientLightConeShape Shape; // 0x454
	ESimpleLightFunctionType SimpleFunctionType; // 0x455
	float ScaleOffset; // 0x458
	float PulsePhase; // 0x45c
	float FlickerFrequency; // 0x460
	int32_t FlickerPerlinRow; // 0x464
	bool bShadowed; // 0x468
	EAmbientLightClusteringPolicy GroupingPolicy; // 0x469
};

struct USetMechanismActionStateStepDesc {
	FQuestVariableActor MechanismAction; // 0x80
	EMechanismActionState NewState; // 0x90
};

struct UPhysicsCollisionHandler {
	float ImpactThreshold; // 0x28
	float ImpactReFireDelay; // 0x2c
	USoundBase* DefaultImpactSound; // 0x30
	float LastImpactSoundTime; // 0x38
};

struct URadialBlurItemActionEffect {
	UMaterialInterface* MaterialInstance; // 0x28
};

struct UScratchAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UMeshRotatorComponent {
	FRotator RotationRate; // 0xc8
	TArray<UMeshComponent*> Meshes; // 0xd8
};

struct UEmoteSettings {
	int32_t NumPages; // 0x38
	int32_t ExpandedAndCompactEmoteRadialNumPages; // 0x3c
};

struct UStorySpawnedActorsCollectionDataAsset {
	TArray<UStorySpawnedActorsDataAsset*> StorySpawnedActorsAssetList; // 0x28
};

struct UDelayStep {
	UDelayStepDesc* Desc; // 0x90
};

struct UBTTask_TriggerNotification {
	UNotificationInputId* NotificationId; // 0x60
};

struct UAnimNotify_DestroyAllCosmeticItems {
	bool PlayedWithSequencer; // 0x28
};

struct UPawnActionsComponent {
	APawn* ControlledPawn; // 0xc8
	TArray<FPawnActionStack> ActionStacks; // 0xd0
	TArray<FPawnActionEvent> ActionEvents; // 0xe0
	UPawnAction* CurrentAction; // 0xf0
};

struct UEmoteInfo {
	FEmoteData EmoteData; // 0x28
	FStringAssetReference RadialIconPath; // 0xc0
};

struct UGameplayTasksComponent {
	TArray<UGameplayTask*> SimulatedTasks; // 0xd0
	TArray<UGameplayTask*> TaskPriorityQueue; // 0xe0
	FScriptMulticastDelegate OnClaimedResourcesChange; // 0x118
};

struct ACollectorsChestItemProxy {
	UOpenableItemComponent* OpenableItemComponent; // 0x848
};

struct UAthenaPlayModeLevelsDataAsset {
	FPlayModeLevelArray PlayModeSpecificLevels[0x4]; // 0x28
	TArray<FStringAssetReference> CommonLevels; // 0xa8
};

struct UContainerAllowedItemsDataAsset {
	TArray<UItemDesc*> Items; // 0x28
	TArray<UItemCategory*> Categories; // 0x38
};

struct UBTDecorator_ActorWieldedItemCategory {
	float Interval; // 0x68
	FBlackboardKeySelector BlackboardKey; // 0x70
	UClass* ItemCategoryToTest; // 0x98
};

struct UAddItemToCollectorsChestStep {
	UAddItemToCollectorsChestStepDesc* Desc; // 0x90
};

struct AAggressiveGhostShipPortal {
	float OpenDuration; // 0x408
	float ClosingDuration; // 0x40c
};

struct ULaunchableShotActionComponent {
	bool InterruptActionOnProjectileDestroyed; // 0x2d0
	ALaunchableProjectile* CurrentProjectile; // 0x2d8
	FLaunchableProjectileState LaunchableProjectileState; // 0x2e0
	bool OverrideProjectileCollisionBeforeFiring; // 0x324
	FCollisionProfileName ProjectileCollisionProfileOverride; // 0x328
	FCollisionProfileName ProjectileCollisionProfile; // 0x330
	ALaunchableProjectile* ProjectileType; // 0x338
	int32_t AmmoCost; // 0x340
	bool ShouldProjectileAttachToWeaponOnSpawn; // 0x344
	bool ShouldConsumeAmmoWhenUsedByAI; // 0x345
	bool ShouldConsumeAmmoWhenUsedByPlayers; // 0x346
	FVector ProjectileRelativeAimOffset; // 0x348
	float MaxAcceptableAttackTimeStampDelta; // 0x354
	ULaunchableShotComponentAudioParams* LaunchableAudioParams; // 0x380
	FWwiseEmitterCreationParams FireProjectileSfxParams; // 0x388
	FName MuzzleFireVFXSocketName; // 0x3b0
	UObject* MuzzleFireVfxFirst; // 0x3b8
	UObject* MuzzleFireVfxThird; // 0x3c0
	UObject* MuzzleFireVfxLocal; // 0x3c8
	UForceFeedbackEffect* ActionFireForceFeedback; // 0x3d0
	FName ActionFireForceFeedbackTag; // 0x3d8
};

struct UCoherentUIGTComponent {
	FString URL; // 0x310
	int32_t Width; // 0x320
	int32_t Height; // 0x324
	bool ManualTexture; // 0x328
	float ClickThroughAlphaThreshold; // 0x32c
	bool Transparent; // 0x330
};

struct UCursedCannonballData {
	TArray<UItemDesc*> AllCursedCannonballs; // 0x28
};

struct USeasonProgressionUISettings {
	FStringAssetReference SeasonPopupListAsset; // 0x28
};

struct UTaleLoadSpireStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UBTDecorator_TagCooldown {
	FGameplayTag CooldownTag; // 0x68
	float CoolDownDuration; // 0x70
	bool bAddToExistingDuration; // 0x74
	bool bActivatesCooldown; // 0x75
};

struct UAIPetsOnDemandSpawner {
	bool HasSpawnerLevelEncounters; // 0x38
	FAISpawnTypeParamsCollection SpawnTypeParamsCollection; // 0x40
	UAIEncounterSettings* DefaultEncounterSettings; // 0x88
	UAISpawnWaveSequenceRankProgression* DefaultSpawnWaveProgression; // 0x90
	TArray<FAISpawnContextIdEncounterSettingsPair> SpawnContextSpecificEncounterSettings; // 0x98
	bool ShouldSpawnFacingRegionCentre; // 0xa8
	EAthenaAISpawnType DefaultSpawnType; // 0xa9
	UEnvQuery* FindSpawnPosQuery; // 0xb0
	EEnvQueryRunMode FindSpawnPosQueryRunMode; // 0xb8
	FName SpawnLocationType; // 0xbc
	int32_t MaxNumOfSpawnedPawns; // 0xc4
	int32_t PriorityForSpawnedPawns; // 0xc8
	TArray<FConditionalAISpawnOverride> SpawnOverrides; // 0xd0
	TArray<FAdditionalSpawnerBehaviour> AdditionalBehaviours; // 0xe0
	UAthenaAISettings* AthenaAISettings; // 0x360
};

struct AWieldablePet {
	float ThirdPersonScalingModifier; // 0x7c0
	UWieldablePetComponent* WieldablePetComponent; // 0x7c8
	UAIPartsRetrievalComponent* AIPartsRetrievalComponent; // 0x7d0
	UPetPartCustomisationComponent* PetPartCustomisationComponent; // 0x7d8
	UAnimNotifyWwiseEmitterComponent* AnimNotifyWwiseEmitterComponent; // 0x7e0
	UWaterExposureComponent* WaterExposureComponent; // 0x7e8
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7f0
	UPickupableComponent* PickupableComponent; // 0x7f8
	UWieldableInteractableComponent* WieldableInteractableComponent; // 0x800
	UCleanlinessComponent* CleanlinessComponent; // 0x808
	ULightWeightStatusEffectManagerComponent* LightWeightStatusEffectManagerComponent; // 0x810
	UPetDitherComponent* PetDitherComponent; // 0x818
	AActor* PetOwner; // 0x820
	UFeedingComponent* FeedingComponent; // 0x828
	UPetSicknessComponent* SicknessComponent; // 0x830
	UWieldablePetHungerComponent* HungerComponent; // 0x838
	UStarvingComponent* StarvingComponent; // 0x840
	UPetTelemetryComponent* TelemetryComponent; // 0x848
	UAnimationDataStoreComponent* AnimationDataStoreComponent; // 0x850
	bool SubmergedStrokingEnabled; // 0x858
	EAthenaAnimationPetHeldReactionState HungerReactAnimationState; // 0x8c8
	EWieldablePetDropRequestReason DropRequest; // 0x8c9
};

struct UInterpTrackInstProperty {
	UProperty* InterpProperty; // 0x28
	UObject* PropertyOuterObjectInst; // 0x30
};

struct UGameEventSchedulerService {
	UGameEventSchedulerSettingsAsset* Settings; // 0x48
	UWorld* World; // 0x50
	TArray<FGameEventCount> PermittedEventTypes; // 0x88
};

struct UWidgetSwitcher {
	int32_t ActiveWidgetIndex; // 0x150
};

struct UPlaySequencerAnimationStep {
	UPlaySequencerAnimationStepDesc* StepDesc; // 0x90
	ASequencerCutSceneActor* SequencerCutSceneActor; // 0x98
};

struct ABurpTestActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UExplosiveComponent {
	float ExplosionDelayPerMetre; // 0xe0
	UObject* ExplosionParticleSystem; // 0xe8
	UObject* ExplosionOnSandParticleSystem; // 0xf0
	UObject* ExplosionOnWaterSurfaceParticleSystem; // 0xf8
	UObject* ExplosionUnderWaterParticleSystem; // 0x100
	UObject* SplashParticles; // 0x108
	float NearToSurfaceDistance; // 0x110
	UWwiseEvent* ExplosionSoundCue; // 0x118
	FName ExplosionSoundCueSwitchName; // 0x120
	FName ExplosionSoundCueSwitchValueForOnLand; // 0x128
	FName ExplosionSoundCueSwitchValueForOnSand; // 0x130
	FName ExplosionSoundCueSwitchValueForOnWaterSurface; // 0x138
	FName ExplosionSoundCueIsObjectUnderWaterSwitchName; // 0x140
	FName ExplosionSoundCueIsObjectUnderWaterSwitchValueForAboveWater; // 0x148
	FName ExplosionSoundCueIsObjectUnderWaterSwitchValueForBelowWater; // 0x150
	UWwiseObjectPoolWrapper* ExplosionSfxPool; // 0x158
	UParticleSystem* HitReactParticleSystem; // 0x160
	UWwiseEvent* HitReactSoundCue; // 0x168
	float MaxDepthForSplash; // 0x170
	ECollisionChannel HitTestTraceChannel; // 0x174
	EPhysicalSurface SandSurfaceType; // 0x175
	bool MakeOwnerInvisibleOnExplosion; // 0x176
	AActor* RootExplosionInstigator; // 0x178
	UHealthComponent* HealthComponent; // 0x180
	bool IsExploding; // 0x1a0
};

struct URewindComponent {
	bool AutoRegister; // 0xd0
	ECollisionChannel CollisionChannel; // 0xd1
	FRewindComponentParameters Parameters; // 0xd4
	bool ShouldRegisterToAggregateTick; // 0xe8
};

struct AAlwaysCashInItemInfo {
	EBootyTypes BootyType; // 0x528
	FGuid Id; // 0x52c
	bool PlayedFirstTimeEquipSfx; // 0x53c
	TArray<FPlayerStat> HandInPlayerStats; // 0x540
	TArray<FPlayerStat> HandInStolenPlayerStats; // 0x550
	TArray<FPlayerStat> HandInStolenFromPlayerStats; // 0x560
	TArray<FPlayerStat> HandInGiftPlayerStats; // 0x570
	TArray<FPlayerStat> HandInAsPirateLegendPlayerStats; // 0x580
	TArray<FPlayerStat> HandInOnSchedulePlayerStats; // 0x590
	TArray<FPlayerStat> HandInAsPirateLegendOnSchedulePlayerStats; // 0x5a0
	TArray<FEmissaryBootyItemStats> HandInAsEmissaryPlayerStats; // 0x5b0
	TArray<FEmissaryBootyItemStats> HandInAsMaxLevelEmissaryPlayerStats; // 0x5c0
	TArray<FEmissaryBootyItemStats> HandInStolenAsEmissaryPlayerStats; // 0x5d0
	TArray<FEmissaryBootyItemStats> HandInStolenAsMaxLevelEmissaryPlayerStats; // 0x5e0
	TArray<FPlayerStat> UsePlayerStats; // 0x5f0
	TArray<FPlayerStat> UseStolenPlayerStats; // 0x600
	FCompanyBootyStatList CompanySpecificStats; // 0x610
	FConditionalHandInStat ConditionalHandInStat; // 0x620
	UPopUpMessageDesc* DiscoveredPopupDesc; // 0x640
	FBootyItemSellPrerequisites SellPrerequisites; // 0x648
	UTrackedOwnerComponent* TrackedOwnerComponent; // 0x658
	UItemQualityComponent* ItemQualityComponent; // 0x660
	EEmissaryQualityLevel ItemQualityLevel; // 0x668
	TArray<FPerComanyItemQualityEntry> CompanySpecificItemQualityLevel; // 0x670
	FRewardId HandInRewardId; // 0x680
	TArray<FCompanySpecificBootyReward> HandInRewardIdCompanySpecific; // 0x688
	bool RewardToOwnCrewOnly; // 0x698
	FName Rarity; // 0x69c
	UDeliverableComponent* DeliverableComponent; // 0x6c0
	UCrewOwnershipTrackingComponent* CrewOwnershipTrackingComponent; // 0x6c8
	UBootyItemShipOwnershipComponent* BootyItemShipOwnershipComponent; // 0x6d0
	ESpawnedItemSource SpawnSource; // 0x6d8
};

struct UEmissaryEntitlementCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct ABuoyantStorageContainer {
	FName InteractionSocket; // 0x4d0
	UShapeComponent* BaseComponent; // 0x578
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x580
	UBuoyancyComponent* BuoyancyComponent; // 0x5a0
	UDitherComponent* DitherComponent; // 0x5a8
	FNetTimeStampCalculator MovementTimeStamp; // 0x5b0
	FReplicatedPhysicsState ReplicatedPhysicsState; // 0x620
	UWaterInteractionComponent* WaterInteractionComponent; // 0x678
	URetractableFloatingBarrelComponent* RetractableComponent; // 0x680
};

struct UGameplayDebuggerSettings {
	FGDTCustomViewNames CustomViewNames; // 0x28
	bool OverHead; // 0x78
	bool Basic; // 0x79
	bool BehaviorTree; // 0x7a
	bool EQS; // 0x7b
	bool EnableEQSOnHUD; // 0x7c
	int32_t ActiveEQSIndex; // 0x80
	bool Perception; // 0x84
	bool GameView1; // 0x85
	bool GameView2; // 0x86
	bool GameView3; // 0x87
	bool GameView4; // 0x88
	bool GameView5; // 0x89
};

struct UDistributionFloatParameterBase {
	FName ParameterName; // 0x40
	float MinInput; // 0x48
	float MaxInput; // 0x4c
	float MinOutput; // 0x50
	float MaxOutput; // 0x54
	DistributionParamMode ParamMode; // 0x58
};

struct UInterpTrackColorProp {
	FName PropertyName; // 0x90
};

struct UTemporaryEntitlementsTaleQuestServiceDesc {
	TArray<UClass*> Entitlements; // 0x28
	bool GrantTemporaryEntitlementOnStart; // 0x38
};

struct UMeleeItemActionComponent {
	UParticleSystemComponent* TrailParticleSystem_FP; // 0x2d0
	UParticleSystemComponent* TrailParticleSystem_TP; // 0x2d8
	bool PreventCombosOnHealthChange; // 0x2e0
	UMeleeWeaponDataAsset* WeaponData; // 0x300
	UMeleeAttackProcessorComponent* WieldersAttackProcessor; // 0x308
	UInventoryManipulatorComponent* WieldersInventoryManipulator; // 0x310
	float MaxAcceptableAttackTimeStampDelta; // 0x318
	float MaxAcceptableAttackLocationDelta; // 0x31c
	float MaxAcceptableAttackLocationOnShipDelta; // 0x320
	float MaxAcceptableAttackShipSpeedForLocation; // 0x324
};

struct UMeleeChargeAIAbility {
	FMeleeAIAbilityAngleChecker AngleChecker; // 0x78
};

struct UMovieSceneCameraCutSection {
	FGuid CameraGuid; // 0x98
};

struct UMaterialExpressionLinearInterpolate {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	FExpressionInput Alpha; // 0xe0
	float ConstA; // 0x118
	float ConstB; // 0x11c
	float ConstAlpha; // 0x120
};

struct USetSpawnProgressStepDesc {
	FQuestVariableActor TriggerVolume; // 0x80
};

struct UParticleModuleAttractorBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct AAIManagerService {
	TArray<UObject*> LoadedAIPawnClasses; // 0x4d8
	TArray<UObject*> LoadedAIItemDropComponentClasses; // 0x4e8
	AAmbientWaterSpawnerManager* AmbientWaterSpawnerManager; // 0x500
	TArray<UAIPlayerTracker*> PlayerTrackers; // 0x838
	TArray<FCustomPlayersAITrackerData> CustomPlayersTrackerDatas; // 0x848
	TArray<UAISpawner*> SpawnersPendingShutdown; // 0x958
	UAthenaAITypeListDataAsset* AITypeList; // 0xa10
	UAISpawnContextList* AISpawnContextList; // 0xa18
};

struct UVFXSpawnerComponent {
	UParticleSystemComponent* CachedParticleSystem; // 0xc8
	USceneComponent* AttachedSceneComponent; // 0xd0
	FVFXHandlerComponentParams VFXParameters; // 0xd8
	bool State; // 0x118
};

struct UWeightedGoldRewardsDataAsset {
	TArray<FWeightedGoldReward> GoldRewards; // 0x28
};

struct UInterpTrackLinearColorProp {
	FName PropertyName; // 0x90
};

struct UPlatformInterfaceBase {
	TArray<FDelegateArray> AllDelegates; // 0x28
};

struct UGhostAIFormComponent {
	TArray<FAthenaAIFormComponentVfxCustomisation> VfxCustomisations; // 0xd0
	UAthenaAIFormDataAsset* FormData; // 0xe0
	UCharacterHitReactionDamagerTypeToAnimTypeLayer* HitReactionsLayer; // 0xe8
};

struct URewardComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct USyncGroupAnimMetaData {
	FName SyncGroup; // 0x28
};

struct UParticleModuleMeshRotationRateMultiplyLife {
	FRawDistributionVector LifeMultiplier; // 0x50
};

struct UHeightTriggerableAudioComponentParams {
	UWwiseObjectPoolWrapper* Pool; // 0x28
	UWwiseEvent* RisingOneShot; // 0x30
	UWwiseEvent* RisingStart; // 0x38
	UWwiseEvent* RisingStop; // 0x40
	UWwiseEvent* LoweringStart; // 0x48
	UWwiseEvent* LoweringStop; // 0x50
};

struct ANonDisplaceableLargeStaticMeshWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct ALandmark {
	FText Name; // 0x3d0
	FText NameV2; // 0x408
	FText NameV3; // 0x440
	FText NameV4; // 0x478
	ELandmarkVagueness LandmarkVagueness; // 0x4b0
	ELandmarkUniqueness LandmarkUniqueness; // 0x4b1
	bool IsUnderground; // 0x4b2
	TArray<EQuestType> IsUnsuitableFor; // 0x4b8
	float PacingStartRadius; // 0x5e4
	TArray<FLandmarkReaction> Reactions; // 0x5e8
	UOverlapTriggerComponent* AudioZoneComponent; // 0x618
	FVector StartLocation; // 0x64c
};

struct URewardSettings {
	FStringAssetReference RewardDefinitionAssetListLocation; // 0x28
};

struct UAbsorbsLiquidComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTileView {
	float ItemWidth; // 0x138
	float ItemHeight; // 0x13c
	TArray<UObject*> Items; // 0x140
	ESelectionMode SelectionMode; // 0x150
	DelegateProperty OnGenerateTileEvent; // 0x154
};

struct UBTTask_AthenaMoveTo {
	bool ShouldFailBeforeSlowDown; // 0xa0
	float ExitBeforeSlowDownDistanceTolerance; // 0xa4
	bool ShouldOverrideMaxSpeedToSlow; // 0xa8
	float OverrideMaxSpeedToSlowDistanceFactor; // 0xac
	bool MaintainFacingBeforeMove; // 0xb0
};

struct UGlobalVoyageDirectorService {
	UWorld* World; // 0x30
	TArray<UCrewVoyageParticipant*> Participants; // 0x38
	UGlobalVoyageDirectorServiceSettings* Settings; // 0x48
	AAthenaWorldSettings* WorldSettings; // 0x50
};

struct UParticleModuleAccelerationConstant {
	FVector Acceleration; // 0x58
};

struct USubsurfaceProfile {
	FSubsurfaceProfileStruct Settings; // 0x28
};

struct UCampaignPopUpNotificationDataAsset {
	FName FeatureToggle; // 0x28
	TArray<FCampaignPopUpNotificationInfo> CampaignPopUpNotifications; // 0x30
};

struct UTaleQuestSpawnAIDioramaStep {
	UAIDioramaController* DioramaController; // 0xf0
	AActor* WaveSpawnLocationActor; // 0xf8
};

struct UTaleQuestStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UNavLinkRenderingComponent {
	float MinDrawDistance; // 0x2b8
	float LDMaxDrawDistance; // 0x2c0
	float CachedMaxDrawDistance; // 0x2c4
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2c8
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2c9
	char bAlwaysCreatePhysicsState : 1; // 0x2cc
	char bGenerateOverlapEvents : 1; // 0x2cc
	char bMultiBodyOverlap : 1; // 0x2cc
	char bCheckAsyncSceneOnMove : 1; // 0x2cc
	char bTraceComplexOnMove : 1; // 0x2cc
	char bReturnMaterialOnMove : 1; // 0x2cc
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2cc
	char bAllowCullDistanceVolume : 1; // 0x2cc
	char bHasMotionBlurVelocityMeshes : 1; // 0x2cd
	char bRenderInMainPass : 1; // 0x2cd
	char bRenderInCustomPrePass : 1; // 0x2cd
	char bReflected : 1; // 0x2cd
	char bReflectedOnLowQuality : 1; // 0x2cd
	char bFFTWaterMask : 1; // 0x2cd
	char bVolumeFogMask : 1; // 0x2cd
	char bAffectsFlatWater : 1; // 0x2ce
	char bGPUParticlesKillPlane : 1; // 0x2ce
	char bDontCull : 1; // 0x2ce
	char bDontSizeOnScreenCull : 1; // 0x2ce
	float OverriddenShadowMinTexelSize; // 0x2d0
	bool bOverrideShadowMinSizeCulling; // 0x2d4
	bool bOverrideShadowCascadesExclusion; // 0x2d5
	EExcludeFromCascades ExcludedShadowCascades; // 0x2d6
	char bReceivesDecals : 1; // 0x2d8
	char bOwnerNoSee : 1; // 0x2d8
	char bOnlyOwnerSee : 1; // 0x2d8
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d8
	char bIsACloud : 1; // 0x2d8
	char bUseAsOccluder : 1; // 0x2d8
	char bSelectable : 1; // 0x2d8
	char bForceMipStreaming : 1; // 0x2d8
	char bHasPerInstanceHitProxies : 1; // 0x2d9
	char CastShadow : 1; // 0x2d9
	char bAffectDynamicIndirectLighting : 1; // 0x2d9
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x2d9
	char bAffectDistanceFieldLighting : 1; // 0x2d9
	char bCastDynamicShadow : 1; // 0x2d9
	char bCastStaticShadow : 1; // 0x2d9
	char bCastVolumetricTranslucentShadow : 1; // 0x2d9
	char bSelfShadowOnly : 1; // 0x2da
	char bCastFarShadow : 1; // 0x2da
	char bCastInsetShadow : 1; // 0x2da
	char bCastCinematicShadow : 1; // 0x2da
	char bCastHiddenShadow : 1; // 0x2da
	char bCastShadowAsTwoSided : 1; // 0x2da
	char bCastShadowOnLowQuality : 1; // 0x2da
	char bLightAsIfStatic : 1; // 0x2da
	char bLightAttachmentsAsGroup : 1; // 0x2db
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2dc
	bool bHasCachedStaticLighting; // 0x2dd
	bool bStaticLightingBuildEnqueued; // 0x2de
	char bIgnoreRadialImpulse : 1; // 0x2e0
	char bIgnoreRadialForce : 1; // 0x2e0
	char AlwaysLoadOnClient : 1; // 0x2e0
	char AlwaysLoadOnServer : 1; // 0x2e0
	char bUseEditorCompositing : 1; // 0x2e0
	char bRenderCustomDepth : 1; // 0x2e0
	char bAllowVelocityInMaterial : 1; // 0x2e0
	int32_t CustomDepthStencilValue; // 0x2e4
	int32_t TranslucencySortPriority; // 0x2e8
	int32_t VisibilityId; // 0x2ec
	float LpvBiasMultiplier; // 0x2f4
	float FarCascadeLPVBiasMultiplier; // 0x2f8
	float LpvIntensityMultiplier; // 0x2fc
	FCustomPrimitiveData CustomPrimitiveData; // 0x300
	FBodyInstance BodyInstance; // 0x310
	char bAffectRain : 1; // 0x490
	char bCanEverAffectNavigation : 1; // 0x490
	char bSkipRenderingInOuterLPVCascades : 1; // 0x490
	char bEnableMergeCollisionComponents : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerUnderwater : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerUnderwater : 1; // 0x491
	char bCanRenderAboveAndBelowWaterAtSameTime : 1; // 0x491
	float BoundsScale; // 0x498
	float OcclusionBoundsScale; // 0x49c
	float LastRenderTime; // 0x4a0
	bool bGPUVisibility; // 0x4a4
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x4a5
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x4a6
	FScriptMulticastDelegate OnComponentHit; // 0x4f0
	FScriptMulticastDelegate OnComponentBeginOverlap; // 0x4f1
	FScriptMulticastDelegate OnComponentEndOverlap; // 0x4f2
	FScriptMulticastDelegate OnComponentWake; // 0x4f3
	FScriptMulticastDelegate OnComponentSleep; // 0x4f4
	UPrimitiveComponent* LODParentPrimitive; // 0x528
	FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x530
	UPrimitiveComponent* MergedCollisionComponentParent; // 0x580
};

struct UBTTask_BurrowAbilityTriggerEruptAreaFromBlackboard {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UMaterialExpressionDeriveNormalZ {
	FExpressionInput InXY; // 0x70
};

struct UIterativeCanvasRenderTarget2D {
	FScriptMulticastDelegate OnCanvasRenderTargetUpdate; // 0x168
	TWeakObjectPtr<UWorld> World; // 0x178
};

struct UEmoteCategory {
	TArray<UClothingCategory*> PiratePreviewRemovals; // 0x78
	UAnimationAsset* PiratePreviewAnim; // 0x88
	FName PiratePreviewCamera; // 0x90
	bool PiratePreviewSpin; // 0x98
};

struct UTritonAcousticMap {
	FString TritonMapFilename; // 0x28
};

struct AWindDirectionalSource {
	UWindDirectionalSourceComponent* Component; // 0x3d0
};

struct UGeyserManagerSetupDataAsset {
	FWeightedProbabilityRangeOfRanges DormantDuration; // 0x28
	FWeightedProbabilityRangeOfRanges ActiveDuration; // 0x58
	FWeightedProbabilityRangeOfRanges DelayBetweenGeyserGroupsDuringGeyserEvent; // 0x88
	bool StartInactive; // 0xb8
	bool NoRestartAfterGeyserSpurtComplete; // 0xb9
	bool UseUniqueLocationsForEachGeyser; // 0xba
	float MinDistanceFromPlayerInMetres; // 0xbc
	float MinGeyserSequenceSpacing; // 0xc0
	AGeyser* GeyserToSpawn; // 0xc8
	FWeightedProbabilityRange NumGeyserGroupsToSpawn; // 0xd0
	FWeightedProbabilityRange NumGeysersToSpawnPerGroup; // 0xf0
	FWeightedProbabilityRangeOfRanges SpawnDistanceFromPlayerInMetres; // 0x110
	FWeightedProbabilityRangeOfRanges SpawnRadiusInMetres; // 0x140
	TArray<FGeyserSpawnAngleOption> SpawnAngleRelativeToPlayerDirection; // 0x170
	FWeightedProbabilityRangeOfRanges DelayBetweenEachGeyserSpawningInAGroup; // 0x180
	float MaximumDensityRadiusInMetres; // 0x1b0
	int32_t MaximumDensityMaxNumGeysersWithinRadius; // 0x1b4
};

struct UCoherentBaseHUDComponent {
	APawn* CurrentPawn; // 0x370
	UCoherentToWwiseEventComponent* AudioComponent; // 0x5c0
};

struct ULandscapeGizmoRenderComponent {
	float MinDrawDistance; // 0x2b8
	float LDMaxDrawDistance; // 0x2c0
	float CachedMaxDrawDistance; // 0x2c4
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2c8
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2c9
	char bAlwaysCreatePhysicsState : 1; // 0x2cc
	char bGenerateOverlapEvents : 1; // 0x2cc
	char bMultiBodyOverlap : 1; // 0x2cc
	char bCheckAsyncSceneOnMove : 1; // 0x2cc
	char bTraceComplexOnMove : 1; // 0x2cc
	char bReturnMaterialOnMove : 1; // 0x2cc
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2cc
	char bAllowCullDistanceVolume : 1; // 0x2cc
	char bHasMotionBlurVelocityMeshes : 1; // 0x2cd
	char bRenderInMainPass : 1; // 0x2cd
	char bRenderInCustomPrePass : 1; // 0x2cd
	char bReflected : 1; // 0x2cd
	char bReflectedOnLowQuality : 1; // 0x2cd
	char bFFTWaterMask : 1; // 0x2cd
	char bVolumeFogMask : 1; // 0x2cd
	char bAffectsFlatWater : 1; // 0x2ce
	char bGPUParticlesKillPlane : 1; // 0x2ce
	char bDontCull : 1; // 0x2ce
	char bDontSizeOnScreenCull : 1; // 0x2ce
	float OverriddenShadowMinTexelSize; // 0x2d0
	bool bOverrideShadowMinSizeCulling; // 0x2d4
	bool bOverrideShadowCascadesExclusion; // 0x2d5
	EExcludeFromCascades ExcludedShadowCascades; // 0x2d6
	char bReceivesDecals : 1; // 0x2d8
	char bOwnerNoSee : 1; // 0x2d8
	char bOnlyOwnerSee : 1; // 0x2d8
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d8
	char bIsACloud : 1; // 0x2d8
	char bUseAsOccluder : 1; // 0x2d8
	char bSelectable : 1; // 0x2d8
	char bForceMipStreaming : 1; // 0x2d8
	char bHasPerInstanceHitProxies : 1; // 0x2d9
	char CastShadow : 1; // 0x2d9
	char bAffectDynamicIndirectLighting : 1; // 0x2d9
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x2d9
	char bAffectDistanceFieldLighting : 1; // 0x2d9
	char bCastDynamicShadow : 1; // 0x2d9
	char bCastStaticShadow : 1; // 0x2d9
	char bCastVolumetricTranslucentShadow : 1; // 0x2d9
	char bSelfShadowOnly : 1; // 0x2da
	char bCastFarShadow : 1; // 0x2da
	char bCastInsetShadow : 1; // 0x2da
	char bCastCinematicShadow : 1; // 0x2da
	char bCastHiddenShadow : 1; // 0x2da
	char bCastShadowAsTwoSided : 1; // 0x2da
	char bCastShadowOnLowQuality : 1; // 0x2da
	char bLightAsIfStatic : 1; // 0x2da
	char bLightAttachmentsAsGroup : 1; // 0x2db
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2dc
	bool bHasCachedStaticLighting; // 0x2dd
	bool bStaticLightingBuildEnqueued; // 0x2de
	char bIgnoreRadialImpulse : 1; // 0x2e0
	char bIgnoreRadialForce : 1; // 0x2e0
	char AlwaysLoadOnClient : 1; // 0x2e0
	char AlwaysLoadOnServer : 1; // 0x2e0
	char bUseEditorCompositing : 1; // 0x2e0
	char bRenderCustomDepth : 1; // 0x2e0
	char bAllowVelocityInMaterial : 1; // 0x2e0
	int32_t CustomDepthStencilValue; // 0x2e4
	int32_t TranslucencySortPriority; // 0x2e8
	int32_t VisibilityId; // 0x2ec
	float LpvBiasMultiplier; // 0x2f4
	float FarCascadeLPVBiasMultiplier; // 0x2f8
	float LpvIntensityMultiplier; // 0x2fc
	FCustomPrimitiveData CustomPrimitiveData; // 0x300
	FBodyInstance BodyInstance; // 0x310
	char bAffectRain : 1; // 0x490
	char bCanEverAffectNavigation : 1; // 0x490
	char bSkipRenderingInOuterLPVCascades : 1; // 0x490
	char bEnableMergeCollisionComponents : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerUnderwater : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerUnderwater : 1; // 0x491
	char bCanRenderAboveAndBelowWaterAtSameTime : 1; // 0x491
	float BoundsScale; // 0x498
	float OcclusionBoundsScale; // 0x49c
	float LastRenderTime; // 0x4a0
	bool bGPUVisibility; // 0x4a4
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x4a5
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x4a6
	FScriptMulticastDelegate OnComponentHit; // 0x4f0
	FScriptMulticastDelegate OnComponentBeginOverlap; // 0x4f1
	FScriptMulticastDelegate OnComponentEndOverlap; // 0x4f2
	FScriptMulticastDelegate OnComponentWake; // 0x4f3
	FScriptMulticastDelegate OnComponentSleep; // 0x4f4
	UPrimitiveComponent* LODParentPrimitive; // 0x528
	FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x530
	UPrimitiveComponent* MergedCollisionComponentParent; // 0x580
};

struct UScreenSpaceVFXComponentParams {
	float EffectStrengthSpringAcceleration; // 0x28
	UCurveFloat* EffectStrengthOverTimeCurve; // 0x30
	float ContinuousDamageStrengthSpringAcceleration; // 0x38
	UCurveFloat* ContinuousDamageTimeCurve; // 0x40
	float ContinuousDamageMaxDamageValue; // 0x48
	float ContinuousDamageMaxDamageStrength; // 0x4c
	float ContinuousDamageCycleTime; // 0x50
	FName VFXNameDamage; // 0x54
	FString DirectionalDamageIndicatorParameterName; // 0x60
	float DirectionalDamageIndicatorLifetime; // 0x70
	UCurveFloat* DrowningEffectStrengthOverTimeCurve; // 0x78
	FName VFXNameDrowning; // 0x80
	FName VFXNameStunned; // 0x88
	FName VFXNameBoundsDarkness; // 0x90
};

struct UCheckIsActorCriticalStep {
	UCheckIsActorCriticalStepDesc* StepDesc; // 0x90
};

struct UPetPartCustomisationComponent {
	UAnimationDataStoreId* AnimationDataStoreId; // 0xd8
	UPetPartSizeMappingsDataAsset* SizeMappingsAsset; // 0xe0
	TArray<FPetLoadedMaterial> CurrentlyLoadedMaterials; // 0xe8
	FStringAssetReference DefaultMeshRef; // 0xf8
	FStringAssetReference HighResMeshRef; // 0x108
	USkeletalMesh* CurrentlyLoadedMesh; // 0x118
	EPetSize CurrentPetSize; // 0x120
	UPetCustomisationOverrideDataAsset* CurrentlyLoadedOverrideAsset; // 0x128
};

struct UBlueprintMechanismResetComponent {
	FScriptMulticastDelegate ResetMechanismInBlueprint; // 0xd0
};

struct UParticleModuleKillBox {
	FRawDistributionVector LowerLeftCorner; // 0x50
	FRawDistributionVector UpperRightCorner; // 0x88
	char bAbsolute : 1; // 0xc0
	char bKillInside : 1; // 0xc0
	char bAxisAlignedAndFixedSize : 1; // 0xc0
};

struct UAshCloudAIAbility {
	APawn* Owner; // 0x78
	UAshCloudAIAbilityParams* SetupAbilityParams; // 0x80
	AAshenLordAshCloud* AshCloudInstance; // 0x88
};

struct UInitialisePuzzleVaultStepDesc {
	FQuestVariableActor Vault; // 0x80
	FQuestVariableDataAsset SolutionAsset; // 0x90
};

struct URewardPopUpNotificationDataAsset {
	FName FeatureToggle; // 0x28
	TArray<FRewardPopUpNotificationInfo> RewardPopUpNotifications; // 0x30
};

struct UBTDecorator_CompareCurrentHealth {
	EFloatValueComparisonType Comparison; // 0x80
	FAIDataProviderFloatValue Value; // 0x88
};

struct UPlayerNameplateLocationOverrideComponent {
	FTransform NameplateLocation; // 0xd0
	float AdditionalHeight; // 0x100
};

struct ASceneCapture2D {
	USceneCaptureComponent2D* CaptureComponent2D; // 0x3d8
	UDrawFrustumComponent* DrawFrustum; // 0x3e0
};

struct UAshenLordEncounterParams {
	UAISpawner* AshenLordSpawner; // 0x38
	UClass* AshenLordBaseClass; // 0x40
	UAIDioramaDesc* AshenLordDioramaDesc; // 0x60
	TArray<AActor*> AshenLordMusicZones; // 0x68
	float DelayFromPlayerSpottedToRitualEnd; // 0x78
	float AshenLordSpawnerProximityPlayerTrackerDistanceScalar; // 0x7c
	TArray<UAshenLordDesc*> AllAshenLordDescs; // 0x80
	UClass* EventSignalClass; // 0x90
	float EventSignalHeightOffset; // 0xb0
	FEncounterParams SightingEncounterParams; // 0xb4
	FEncounterParams CloseEncounterParams; // 0xc0
	UGeyserManagerSetupDataAsset* RewardsGeyserManagerParams; // 0xd0
	UEnvQuery* RewardLocationEnvironmentQuery; // 0xd8
	float MinDistanceBetweenRewardLocations; // 0xe0
	float FallbackEncounterCompletionDurationSeconds; // 0xe4
};

struct UParticleModuleLocationWorldOffset_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x178
};

struct ATestAthenaGameModeWithHUD {
	APawn* GhostShipPawnClass; // 0x4e0
	UNetworkedEventsWhitelistDefinition* ServerNetworkedEventsWhitelistDefinition; // 0x4e8
	FGhostShipCoordinator GhostShipCoordinator; // 0x688
	FStorageContainerRefresher StorageContainerRefresher; // 0x8b8
	URiddleQuestDescGeneratorData* RiddleQuestDescGeneratorData; // 0x990
	float RespawnTimer; // 0x998
	float ContestRespawnTimer; // 0x99c
	float StorageContainerRefreshInterval; // 0x9a0
	int32_t ContainerRefreshBatchSize; // 0x9a4
};

struct UTaleQuestAddMerchantMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableName IslandName; // 0x88
	FQuestVariableText DeliveryLocation; // 0x98
	FQuestVariableText DeliverByTime; // 0xa8
	FQuestVariableMerchantItemArray Items; // 0xb8
	UMerchantMapLayout* Layout; // 0xc8
};

struct UAthenaAnimationItemListingMappingsAsset {
	FAthenaAnimationItemListingMappingType MaleListings; // 0x28
	FAthenaAnimationItemListingMappingType FemaleListings; // 0x48
};

struct UTaleQuestUpdateMerchantMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableMerchantItem Item; // 0x88
	FQuestVariableInt Index; // 0x98
};

struct UBTDecorator_RandomLoop {
	int32_t MinNumLoops; // 0x68
	int32_t MaxNumLoops; // 0x6c
	UCurveFloat* RandomNumLoopCurve; // 0x70
};

struct UTaleQuestSelectTradeRouteStepDesc {
	int32_t NumSelectFromClosestIslands; // 0x80
	FQuestVariableVector SelectionOriginPointVar; // 0x88
	FQuestVariableInt TradeRouteDifficulty; // 0x98
	FQuestVariableTradeRouteData TradeRoute; // 0xa8
	FQuestVariableTaleResourceHandle AllocatedTradeRouteHandleVar; // 0xb8
};

struct UCoherentUIGTTooltipDetailedComponent {
	UCanvas* CurrentCanvas; // 0x388
};

struct UAnimCompress_Automatic {
	float MaxEndEffectorError; // 0x40
	char bTryFixedBitwiseCompression : 1; // 0x44
	char bTryPerTrackBitwiseCompression : 1; // 0x44
	char bTryLinearKeyRemovalCompression : 1; // 0x44
	char bTryIntervalKeyRemoval : 1; // 0x44
	char bRunCurrentDefaultCompressor : 1; // 0x44
	char bAutoReplaceIfExistingErrorTooGreat : 1; // 0x44
	char bRaiseMaxErrorToExisting : 1; // 0x44
};

struct ATriggerBase {
	UShapeComponent* CollisionComponent; // 0x3d0
	UBillboardComponent* SpriteComponent; // 0x3d8
};

struct ULoadoutAsset {
	FItemLoadout ItemLoadout; // 0x28
	FName FeatureName; // 0x48
};

struct UEnvQueryGenerator_FromContext {
	UEnvQueryContext* Context; // 0x50
};

struct UBasePlayNpcAnimationStepDesc {
	FQuestVariableActor PlaceableReaction; // 0x80
	FName AnimationNameToPlay; // 0x90
	float SubtitleMaxDistance; // 0x98
	bool UseServerDrivenDialogue; // 0x9c
	USceneDialogueData* DialogueData; // 0xa0
	UMusicZoneComponent* LocalMusicZone; // 0xa8
	bool PreventServerMigration; // 0xb0
};

struct UMaterialExpressionParticleMacroUV {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct USkeletonAICharacterAudioComponent {
	USkeletonAICharacterAudioComponentParams* AICharacterAudioParams; // 0x2e8
	bool ShouldResetEmitterOnDeath; // 0x2f0
	USkeletonAudioFootfallControllerParams* FootfallParams; // 0x2f8
	UAIStrategyId* CachedStrategyID; // 0x300
	UItemCategory* CachedWieldedItemCategory; // 0x308
};

struct ATestActionControlStateCreatorDefinition {
	FTeleportActionStateParams TeleportParams; // 0x3d0
	FMigrationActionStateParams MigrationParams; // 0x3fc
};

struct UPetsServiceParamsDataAsset {
	FPetsServiceParams Params; // 0x28
};

struct UShipLiveryCatalogueService {
	TArray<FShipLiveryCatalogueEntry> CatalogEntries; // 0x30
};

struct UBTDecorator_CompareFloatValueBase {
	EFloatValueComparisonType Comparison; // 0x80
	FAIDataProviderFloatValue Value; // 0x88
};

struct UFishingMiniGameSetupDataAsset {
	float EscapeRadiusAtMaxDistance; // 0x28
	float EscapeRadiusAtMinDistance; // 0x2c
	float PercentageOfEscapeRadiusToKeepFishFacingOutwards; // 0x30
	float AwayEscapeSectorAngleAtMaxDistance; // 0x34
	float AwayEscapeSectorAngleAtMinDistance; // 0x38
	float LeftRightEscapeSectorAngleAtMaxDistance; // 0x3c
	float LeftRightEscapeSectorAngleAtMinDistance; // 0x40
	FWeightedProbabilityRangeOfRanges TimeToNextAngleChangeWithinSector; // 0x48
	FWeightedProbabilityRangeOfRanges FakeOutDistancePercentage; // 0x78
};

struct UNoiseMakerComponentParams {
	float TriggerRadiusAroundNoiseMaker; // 0x28
	UWwiseEvent* LocalNoiseMakerFoliagePlay; // 0x30
	UWwiseEvent* LocalNoiseMakerFoliageStop; // 0x38
	FName LocalSpeedRtpc; // 0x40
	UWwiseEvent* SimulatedCharacterFoliagePlay; // 0x48
	UWwiseEvent* SimulatedCharacterFoliageStop; // 0x50
	FName SimulatedCharacterSpeedRtpc; // 0x58
	FName ProximityRtpc; // 0x60
};

struct APivotAnimatedMechanismAction {
	USceneComponent* Pivot; // 0x550
	bool TransformPivotOnClient; // 0x558
	bool UseVirtualPivotTransformOnServer; // 0x559
	FMechanismFloatAnimationCurve Animation; // 0x560
	FMechanismAnimationEventContainer AnimationEvents; // 0x578
};

struct UParticipantRadiusTrackerStepDesc {
	float DurationBetweenChecks; // 0x80
	FQuestVariableVector Location; // 0x88
	FQuestVariableFloat Radius; // 0x98
};

struct UCustomAnimationMontageDefinitionListingDataAsset {
	TArray<FCustomAnimationMontageDefinitionEntry> Entries; // 0x28
};

struct AKrakenShipWrappingTellAnimatedTentacle {
	USceneComponent* RootSceneComponent; // 0x520
	UCapsuleComponent* BaseShipCollision; // 0x528
	USceneComponent* MeshOffsetComponent; // 0x530
	USkeletalMeshComponent* TentacleMeshComponent; // 0x538
	UKrakenTentacleAIAudioComponent* KrakenTentacleAudioComponent; // 0x540
	FName AttachSocketNameFirstPerson; // 0x548
	FName AttachSocketNameThirdPerson; // 0x550
	FCollisionProfileName TentacleCollisionProfile; // 0x558
	TArray<FKrakenAnimatedTentacleCollisionSegment> CollisionSegments; // 0x560
	bool EnabledShipCollision; // 0x570
	bool DisableHeadCollisionsDuringHoldingState; // 0x571
	int32_t CollisionBoneToUseForShipCollision; // 0x574
	ECollisionEnabled SegmentsCollisionEnableType; // 0x578
	ECollisionEnabled BaseShipCollisionEnableType; // 0x579
	UKrakenAnimatedTentacleAnimationSpecDataAsset* AnimationSpec; // 0x580
	UKrakenAnimatedTentacleAnimationMappingDataAsset* AnimationMapping; // 0x588
	UKrakenAnimatedTentacleStateAnimationsDataAsset* StateAnimationMapping; // 0x590
	float AnimationPlayRate; // 0x598
	float RequestedAnimationPlayRateBlendTime; // 0x59c
	float PlayRateAdjustMaxTimeDelta; // 0x5a0
	float PlayRateAdjustMaxPercentageToSpeedUpPlayRate; // 0x5a4
	float PlayRateAdjustMaxPercentageToSlowDownPlayRate; // 0x5a8
	float ServerAnimationTimeOffsetLatencyMultiplierForSynchronisation; // 0x5ac
	float DebugDrawBoneLocationRadius; // 0x5b0
	float DebugDrawTargetRadius; // 0x5b4
	float DebugDrawBoneRotationEndPointRadius; // 0x5b8
	float DebugDrawBoneRotationLength; // 0x5bc
	float DebugDrawSuckingTargetRadius; // 0x5c0
	float MinAnimationPlayedTimeToSetPendingStateChange; // 0x5c4
	float MinAnimationLeftTimeToSetPendingStateChange; // 0x5c8
	float AnimationOffsetTimeLeftForOptimalPendingStateChange; // 0x5cc
	float SmoothNetUpdateLocationTime; // 0x5d0
	float SmoothNetUpdateRotationTime; // 0x5d4
	float MinDotToTargetToTryAndRotate; // 0x5d8
	float MaxDotToTargetToTryAndRotate; // 0x5dc
	float MinYawTurnRate; // 0x5e0
	float MaxYawTurnRate; // 0x5e4
	float MinInvisibleTime; // 0x5e8
	float MinSuckingTellTime; // 0x5ec
	float MaxSuckingTellTime; // 0x5f0
	float MaxSuckingPlayerDistance; // 0x5f4
	float MinHealthLossRequiredToAvoidAbortSuck; // 0x5f8
	UObject* TentacleSuckingTellVFX; // 0x600
	FName TargetVFXAttachSocketName; // 0x608
	UObject* TargetFirstPersonSuckingTellVFX; // 0x610
	UObject* TargetThirdPersonSuckingTellVFX; // 0x618
	float MaxHealthLossRequiredToAvoidAbortSuck; // 0x620
	float SuckingVelocity; // 0x624
	float SuckingPlayerAttachDistance; // 0x628
	float MinHealthLossRequiredToDropPlayer; // 0x62c
	float MaxHealthLossRequiredToDropPlayer; // 0x630
	float MinDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x634
	float MaxDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x638
	float MinHoldingTime; // 0x63c
	float MaxHoldingTime; // 0x640
	float MinWaterDunkTime; // 0x644
	float MaxWaterDunkTime; // 0x648
	float PowerSlamDamageTime; // 0x64c
	float PowerSlamDamage; // 0x650
	FName IngestTargetSocketName; // 0x654
	int32_t IngestTargetBoneIndexOffset; // 0x65c
	float MinIngestingTime; // 0x660
	float MaxIngestingTime; // 0x664
	float IngestingDamageAmountPerSecond; // 0x668
	float RegurgitatingSpeed; // 0x66c
	float RegurgitatingLaunchTime; // 0x670
	float ThrowTargetLaunchTime; // 0x674
	float ThrowTargetVisibleTime; // 0x678
	float ThrowingSpeed; // 0x67c
	UObject* TentacleFirstPersonThrowingVFX; // 0x680
	UObject* TentacleThirdPersonThrowingVFX; // 0x688
	float MinTargetVomitingDelay; // 0x690
	float MaxTargetVomitingDelay; // 0x694
	float MinTargetVomitingDuration; // 0x698
	float MaxTargetVomitingDuration; // 0x69c
	TArray<FKrakenAnimatedTentacleHeldTargetVomittingChance> TargetVomitingChances; // 0x6a0
	FName VomitVFXType; // 0x6b0
	TArray<FKrakenAnimatedTentacleWaterTriggerableFX> WaterTriggerableFX; // 0x6b8
	int32_t WaterQueryBoneIndex; // 0x6c8
	UPhysicalMaterial* TentaclePhysicalMaterial; // 0x6d0
	float VisualLoggerUpdateTime; // 0x6d8
	float ServerTimeToStartPlayingIdle; // 0x6dc
	TArray<FVector> AITargetVisibilityPoints; // 0x6e0
	FVector TargetBoxOffset; // 0x6f0
	FVector TargetBoxScale; // 0x6fc
	float ReplicatedAnimationProgression; // 0x71c
	bool IsHitReactionsEnabled; // 0x720
	UKrakenAnimatedTentacleState* PendingState; // 0x748
	UKrakenAnimatedTentacleState* ReplicatedCurrentState; // 0x758
	UKrakenAnimatedTentacleState* PreviousState; // 0x768
	float IngestingProgress; // 0x7a0
	UKrakenAnimatedTentacleAnimationDataAsset* AuthoritativeAnimation; // 0x7a8
	float TentacleYaw; // 0x7b0
	FVector TentacleWorldLocation; // 0x7b4
	AAthenaCharacter* CurrentTarget; // 0x7c0
	bool HasPlayedIntroAnim; // 0x7c8
	USceneComponent* DockedToSceneComponent; // 0x920
	FVector DockedLocalSpaceOffset; // 0x928
	FQuat DockedLocalSpaceRotation; // 0x940
	UParticleSystemComponent* TentacleSuckingTellParticleSystem; // 0x998
	UParticleSystemComponent* TargetFirstPersonSuckingTellParticleSystem; // 0x9a0
	UParticleSystemComponent* TargetThirdPersonSuckingTellParticleSystem; // 0x9a8
};

struct ULightPropagationVolumeBlendable {
	FLightPropagationVolumeSettings Settings; // 0x30
	float BlendWeight; // 0xa0
};

struct USceneDialogueContext {
	USceneDialogueSection* Section; // 0x38
};

struct UEmissaryRewardMultiplierModelDataAsset {
	TArray<FEmissaryRewardMultiplierModel> EmissaryRewardMultiplierModels; // 0x28
};

struct UPetLoadoutComponent {
	FPetLoadoutContainer LoadoutContainer; // 0xd8
	AActor* OwningPlayer; // 0xf8
};

struct UGenerateDigLocationInRadiusStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UGameplayCueNotify_Static {
	FGameplayTag GameplayCueTag; // 0x28
	FName GameplayCueName; // 0x30
	bool IsOverride; // 0x38
};

struct UParticleModuleParameterDynamic {
	TArray<FEmitterDynamicParameter> DynamicParams; // 0x50
	int32_t UpdateFlags; // 0x60
	char bUsesVelocity : 1; // 0x64
};

struct UCompleteVoyageChapterConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UEnvQueryInstanceBlueprintWrapper {
	int32_t QueryID; // 0x30
	UEnvQueryItemType* ItemType; // 0x50
	int32_t OptionIndex; // 0x58
	FScriptMulticastDelegate OnQueryFinishedEvent; // 0x60
};

struct UCompanyDataList {
	TArray<UCompanyData*> ClientCompanyData; // 0x28
};

struct UBTTask_SetRecoveryMethod {
	UAICharacterRecoverMethod* RecoveryMethod; // 0x60
};

struct UOnDigAdjustFuseTimeScale {
	float FuseTimeScaleOnDigUp; // 0x28
};

struct UMaterialExpressionPixelDepth {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct AGameplayAbilityTargetActor_SingleLineTrace {
	float MaxRange; // 0x4e8
	FCollisionProfileName TraceProfile; // 0x4ec
	bool bTraceAffectsAimPitch; // 0x4f4
};

struct UShipBuilder {
	AShip* Template; // 0x58
};

struct URegionMapSetAsset {
	TArray<URegionMapDataAsset*> MapRegions; // 0x28
};

struct UClothingDesc {
	FName WardrobeKey; // 0xd8
};

struct UMechanismAnimation {
	TArray<UMechanismOneShotEvent*> AnimationStartedEvents; // 0x28
	TArray<UMechanismAnimationEvent*> Events; // 0x38
	TArray<UMechanismOneShotEvent*> AnimationStoppedEvents; // 0x48
};

struct UBP_BuriedItemDecal_C {
	FName FadeTimeParameterName; // 0x2e0
	FName FadeDistanceStartParameterName; // 0x2e8
	float FadeDistanceStart; // 0x2f0
	FName FadeDistanceEndParameterName; // 0x2f4
	float FadeDistanceEnd; // 0x2fc
	UMaterialInstanceDynamic* Material; // 0x300
};

struct UCoherentUIGTInGameMenusComponent {
	APawn* CurrentPawn; // 0x370
	UCoherentToWwiseEventComponent* AudioComponent; // 0x5c0
};

struct UMerchantCrateItemDescMock {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct UAthenaAIInteractableComponent {
	bool Moveable; // 0x100
	FVector InteractableRelativeVectorToSpawnPos; // 0x104
	FVector TriggerSphereCentreOffset; // 0x110
	float TriggerSphereRadiusOffset; // 0x11c
	float TimeToCacheLastBestTargetResult; // 0x120
	EAthenaAITeam OwnerAITeam; // 0x124
};

struct UIslandAirPocketComponent {
	TArray<FAirGivingVolumeData> AirGivingVolumes; // 0xd0
};

struct UAbandonedNoteClueTextIndexAssetMap {
	TArray<FClueDestinationToTextIndex> TextIndexMappings; // 0x28
};

struct UNavigationDataChunk {
	FName NavigationDataName; // 0x28
};

struct UParticleModuleBeamBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UEditableGameplayTagQueryExpression_AnyExprMatch {
	TArray<UEditableGameplayTagQueryExpression*> Expressions; // 0x28
};

struct USizeBox {
	char bOverride_WidthOverride : 1; // 0x150
	char bOverride_HeightOverride : 1; // 0x150
	char bOverride_MinDesiredWidth : 1; // 0x150
	char bOverride_MinDesiredHeight : 1; // 0x150
	char bOverride_MaxDesiredWidth : 1; // 0x150
	char bOverride_MaxDesiredHeight : 1; // 0x150
	float WidthOverride; // 0x154
	float HeightOverride; // 0x158
	float MinDesiredWidth; // 0x15c
	float MinDesiredHeight; // 0x160
	float MaxDesiredWidth; // 0x164
	float MaxDesiredHeight; // 0x168
};

struct AGlitterbeardSlidingDoor {
	UEffectBlendControllerComponent* DecalBlendComponent; // 0x538
};

struct UWaywardTokensReward {
	uint32_t MinWaywardTokens; // 0x28
	uint32_t MaxWaywardTokens; // 0x2c
};

struct UParticleModuleLocationWorldOffset {
	FRawDistributionVector StartLocation; // 0x50
	FRawDistributionVector AdditionalStartLocations[0x4]; // 0x88
	char StartLocationUseGroupAForAll : 1; // 0x168
	float DistributeOverNPoints; // 0x16c
	float DistributeThreshold; // 0x170
};

struct ARudder {
	float AngleBlend; // 0x3d8
	float MaxAngle; // 0x3dc
	FVector PositionForRudderDynamicsRelativeToRudderActor; // 0x3e0
	FVector RelativeRightShipDir; // 0x3ec
	UBaseRudderDynamicsDesc* RudderDynamicsDesc; // 0x3f8
	float ServerAngleRatio; // 0x418
};

struct UInterpTrackAnimControl {
	FName SlotName; // 0x90
	TArray<FAnimControlTrackKey> AnimSeqs; // 0x98
	char bSkipAnimNotifiers : 1; // 0xa8
};

struct UParticleModuleBeamModifier {
	BeamModifierType ModifierType; // 0x50
	FBeamModifierOptions PositionOptions; // 0x54
	FRawDistributionVector Position; // 0x58
	FBeamModifierOptions TangentOptions; // 0x90
	FRawDistributionVector Tangent; // 0x98
	char bAbsoluteTangent : 1; // 0xd0
	FBeamModifierOptions StrengthOptions; // 0xd4
	FRawDistributionFloat Strength; // 0xd8
};

struct ASeasonProgressionUIService {
	USeasonPopupListAsset* SeasonPopupListAsset; // 0x400
};

struct UPendingNetGame {
	UNetDriver* NetDriver; // 0x30
	UPackage* PreLoadedMapPackage; // 0xe8
	UWorld* PreLoadedWorld; // 0xf0
};

struct UDistributionFloatParticleParameter {
	FName ParameterName; // 0x40
	float MinInput; // 0x48
	float MaxInput; // 0x4c
	float MinOutput; // 0x50
	float MaxOutput; // 0x54
	DistributionParamMode ParamMode; // 0x58
};

struct UContestShipCatalogueDataAsset {
	TArray<FShipLiveryTeamSet> ArenaShipTeamSets; // 0x28
	TArray<FShipLiveryTeamSet> UniqueLiverySets; // 0x38
	float ChanceOfUniqueShipSwap; // 0x48
};

struct UTaleQuestGenerateLootDescForVoyageRankStepDesc {
	FQuestVariableInt VoyageRank; // 0x80
	FQuestVariableItemDescTypeArray LootDescArray; // 0x90
	ULootForVoyageRankDescAsset* LootForRankDescAsset; // 0xa0
};

struct UAshCloudAbilityStageParams {
	float AbilityCooldownSpeedMultiplier; // 0x28
	float DamageRequiredForNextIntervalMultiplier; // 0x2c
	bool OverrideParams; // 0x30
	bool AutoActivateOnStageTransition; // 0x31
	UAthenaAIAbilityType* TypeClass; // 0x38
};

struct USurfaceWaterComponent {
	FVector BoxExtent; // 0x588
	float UpdateCullDistance; // 0x594
	UTexture2D* AddWaterMaskTexture; // 0x598
	UTexture2D* BaseHeightTexture; // 0x5a0
	int32_t TextureSizeX; // 0x5a8
	int32_t TextureSizeY; // 0x5ac
	float WetnessPerStrength; // 0x5b0
	float WetnessDecayRate; // 0x5b4
	FVector4 SplatData; // 0x5d0
	UTextureRenderTarget2D* WaterHeightTexture; // 0x5e0
	UTextureRenderTarget2D* WaterHeightTexturePingPong; // 0x5e8
	UTextureRenderTarget2D* NormalTexture; // 0x5f0
	UTextureRenderTarget2D* OutflowTexture; // 0x5f8
	UTextureRenderTarget2D* OutflowTexturePingPong; // 0x600
};

struct AShovelHole {
	FName ParallaxParameterName; // 0x400
	UDecalComponent* Decal; // 0x408
	float ParallaxValue; // 0x410
	AActor* ContainedActor; // 0x418
	UDiggingComponent* DiggingComponent; // 0x428
	UConditionalStatsTriggerType* StatTriggerForDiggingItems; // 0x438
};

struct UPetCustomisationOverrideDataAsset {
	UAnimationDataStoreId* AnimationOverrideId; // 0x28
	FString DebugMenuName; // 0x30
};

struct ADamageableCannonProjectileTest {
	float ImpactExplosionDelayOverride; // 0x658
};

struct UMaterialExpressionRotator {
	FExpressionInput Coordinate; // 0x70
	FExpressionInput Time; // 0xa8
	float CenterX; // 0xe0
	float CenterY; // 0xe4
	float Speed; // 0xe8
	uint32_t ConstCoordinate; // 0xec
};

struct AMatineeUtility {
	AAthenaPlayerCharacter* BoundCharacter; // 0x4a8
};

struct AController {
	APawn* Pawn; // 0x3d8
	ACharacter* Character; // 0x3e8
	APlayerState* PlayerState; // 0x3f0
	USceneComponent* TransformComponent; // 0x3f8
	FRotator ControlRotation; // 0x400
	char bAttachToPawn : 1; // 0x40c
	FName StateName; // 0x418
	FScriptMulticastDelegate OnInstigatedAnyDamage; // 0x420
};

struct UMenuInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UGhostDataAsset {
	UAnimationStateId* RevivedAnimationStateId; // 0x28
	float InitialSpawnTime; // 0x30
	float HeightOffsetFromCeilingCollision; // 0x34
	TArray<FGhostPlayModeParameters> PlayModeParameters; // 0x38
	ECollisionChannel GhostCollisionChannel; // 0x48
	float GhostShader_Start_InitialAmount; // 0x4c
	float GhostShader_Start_TargetAmount; // 0x50
	float GhostShader_Start_Delay; // 0x54
	float GhostShader_Start_Duration; // 0x58
	float GhostShader_End_InitialAmount; // 0x5c
	float GhostShader_End_TargetAmount; // 0x60
	float GhostShader_End_Delay; // 0x64
	float GhostShader_End_Duration; // 0x68
};

struct ULevelCapture {
	bool bAutoStartCapture; // 0x1e0
	FGuid PrerequisiteActorId; // 0x1ec
};

struct UMaterialExpressionDistance {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
};

struct UMaterialExpressionTransformPosition {
	FExpressionInput Input; // 0x70
	EMaterialPositionTransformSource TransformSourceType; // 0xa8
	EMaterialPositionTransformSource TransformType; // 0xa9
};

struct UBTDecorator_CompareBlackboardIntValue {
	FBlackboardKeySelector BlackboardKey; // 0x68
	int32_t Value; // 0x90
	EBlackboardIntValueComparisonType ComparisonType; // 0x94
};

struct UAISense_Touch {
	TArray<FAITouchEvent> RegisteredEvents; // 0x88
};

struct UStaticMeshComponent {
	int32_t ForcedLodModel; // 0x598
	bool bOverrideMinLOD; // 0x59c
	bool bOverrideNavigationToDefaultObstacle; // 0x59d
	int32_t MinLOD; // 0x5a0
	UStaticMesh* StaticMesh; // 0x5a8
	bool bOverrideWireframeColor; // 0x5b0
	FColor WireframeColorOverride; // 0x5b4
	char bIgnoreInstanceForTextureStreaming : 1; // 0x5b8
	char bOverrideLightMapRes : 1; // 0x5b8
	int32_t OverriddenLightMapRes; // 0x5bc
	float StreamingDistanceMultiplier; // 0x5c0
	TArray<FGuid> IrrelevantLights; // 0x5c8
	TArray<FStaticMeshComponentLODInfo> LODData; // 0x5d8
	UMaterialInterface* CustomDepthMaterial; // 0x5e8
};

struct UMerchantQuestData {
	UPopUpMessageDesc* ContractCompletePopupDesc; // 0x28
	UPopUpMessageDesc* ContractExpiredPopupDesc; // 0x30
};

struct UPathFollowingComponent {
	UNavMovementComponent* MovementComp; // 0x120
	ANavigationData* MyNavData; // 0x130
	char bUseVisibilityTestsSimplification : 1; // 0x1f4
};

struct APivotAnimatedMechanismActionProxy {
	FMechanismFloatAnimationCurve Animation; // 0x410
};

struct UMaterialExpressionDepthFade {
	FExpressionInput InOpacity; // 0x70
	FExpressionInput FadeDistance; // 0xa8
	float OpacityDefault; // 0xe0
	float FadeDistanceDefault; // 0xe4
};

struct UMaterialExpressionSceneDepth {
	EMaterialSceneAttributeInputMode InputMode; // 0x70
	FExpressionInput Input; // 0x78
	FExpressionInput Coordinates; // 0xb0
	FVector2D ConstInput; // 0xe8
};

struct UParticleModuleRotationRateBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct AServerMigrationSerialisationDetailsTestsMigratableComponentActor {
	UServerMigrationSerialisationDetailsTestsMigratableComponent* ComponentWithMigrationMarkup; // 0x3d0
};

struct UMountableComponent {
	UMountableType* MountableType; // 0xd0
	FPlayerStat MountableTypeCrewStat; // 0xd8
	bool ActorCanServerMigrate; // 0xdc
	FText Description; // 0xe0
	UObject* ReplicatedMountpoint; // 0x130
};

struct AEQSTestingPawn {
	UEnvQuery* QueryTemplate; // 0x5e0
	TArray<FEnvNamedValue> QueryParams; // 0x5e8
	float TimeLimitPerStep; // 0x5f8
	int32_t StepToDebugDraw; // 0x5fc
	EEnvQueryHightlightMode HighlightMode; // 0x600
	char bDrawLabels : 1; // 0x604
	char bDrawFailedItems : 1; // 0x604
	char bReRunQueryOnlyOnFinishedMove : 1; // 0x604
	char bShouldBeVisibleInGame : 1; // 0x604
	EEnvQueryRunMode QueryingMode; // 0x608
};

struct UUserDefinedStruct {
	FGuid Guid; // 0x98
};

struct UParticleModuleLight_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x138
};

struct UBTTask_PlayAnimation {
	UAnimationAsset* AnimationToPlay; // 0x60
	char bLooping : 1; // 0x68
	char bNonBlocking : 1; // 0x68
	UBehaviorTreeComponent* MyOwnerComp; // 0x70
	USkeletalMeshComponent* CachedSkelMesh; // 0x78
};

struct UEvolvingCostumeDesc {
	FStringAssetReference PreviousCostumeLevel; // 0xe8
	FStringAssetReference NextCostumeLevel; // 0xf8
};

struct UTaleQuestSpawnWashedUpSkeletonClueStepDesc {
	FQuestVariableClueSite ClueSite; // 0x80
	FQuestVariableClueDescriptor ClueDescriptor; // 0x90
	FQuestVariableActor SkeletonActor; // 0xa0
	FQuestVariableItemInfo ClueItem; // 0xb0
	FName SkeletonClueSocketName; // 0xc0
};

struct UBasisComponent {
	USceneComponent* AttachParent; // 0xc8
	TArray<USceneComponent*> AttachChildren; // 0xd0
	FName AttachSocketName; // 0xe0
	char bRequiresCustomLocation : 1; // 0xe8
	char bAbsoluteLocation : 1; // 0xe8
	char bAbsoluteTranslation : 1; // 0xe8
	char bAbsoluteRotation : 1; // 0xe8
	char bAbsoluteScale : 1; // 0xe8
	char bVisible : 1; // 0xe8
	char bHiddenInGame : 1; // 0xe8
	char bShouldUpdatePhysicsVolume : 1; // 0xe8
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0xe9
	char bUseAttachParentBound : 1; // 0xe9
	char bComponentIsUnionOfChildren : 1; // 0xe9
	char bJitterReduction : 1; // 0xe9
	char CacheRootVelocity : 1; // 0xe9
	char bWorldToComponentUpdated : 1; // 0xe9
	TWeakObjectPtr<APhysicsVolume> PhysicsVolume; // 0xf8
	FVector RelativeScale3D; // 0x11c
	FVector RelativeLocation; // 0x128
	FRotator RelativeRotation; // 0x134
	EComponentMobility Mobility; // 0x220
	EDetailMode DetailMode; // 0x221
	FVector ComponentVelocity; // 0x22c
	FScriptMulticastDelegate PhysicsVolumeChangedDelegate; // 0x238
	TArray<FName> SocketVelocitiesToCache; // 0x258
};

struct UGameEventParams {
	float KeepAliveRadius; // 0x28
	float InnerEncounterRadius; // 0x2c
	float OuterEncounterRadius; // 0x30
};

struct UMovieScene2DTransformTrack {
	FName PropertyName; // 0x88
	FString PropertyPath; // 0x90
	TArray<UMovieSceneSection*> Sections; // 0xa0
};

struct UTaleRegisterSpireStep {
	UTaleRegisterSpireStepDesc* StepDesc; // 0x90
};

struct UActorSequenceComponent {
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0xc8
	UActorSequence* Sequence; // 0xf0
	UActorSequencePlayer* SequencePlayer; // 0xf8
	bool bAutoPlay; // 0x100
};

struct UTaleQuestGetNPCActorFromClueSiteStepDesc {
	FQuestVariableClueSite ClueSite; // 0x80
	FQuestVariableActor NPCFromClueSite; // 0x90
};

struct UWaterSlideInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AAthenaPlayerController {
	UPioneerComponent* PioneerComponent; // 0x788
	UPlayerPermissionsComponent* PlayerPermissionsComponent; // 0x790
	UPlayerTelemetryComponent* PlayerTelemetryComponent; // 0x798
	UPlayerStatsComponent* PlayerStatsComponent; // 0x7a0
	UPlayerSeasonProgressionComponent* PlayerSeasonProgressionComponent; // 0x7a8
	UPlayerHeroStatsComponent* PlayerHeroStatsComponent; // 0x7b0
	UPlayerWalletComponent* PlayerWalletComponent; // 0x7b8
	UBoxedRpcDispatcherComponent* BoxedRpcDispatcherComponent; // 0x7c0
	UPlayerEntitlementComponent* PlayerEntitlementComponent; // 0x7c8
	UPlayerMigratableStatusComponent* PlayerMigratableStatusComponent; // 0x7d0
	UEmblemComponent* EmblemComponent; // 0x7d8
	UPlayerCompanyComponent* PlayerCompanyComponent; // 0x7e0
	ULeaderboardComponent* LeaderboardComponent; // 0x7e8
	URewardComponent* RewardComponent; // 0x7f0
	UPlayerNonVerbalComponent* PlayerNonVerbalComponent; // 0x7f8
	UPlayerCrewComponent* PlayerCrewComponent; // 0x800
	UPlayerMuteComponent* PlayerMuteComponent; // 0x808
	UUIResponceComponent* PlayerUIReturnedResponceComponent; // 0x810
	UPopUpNotificationComponent* PopUpNotificationComponent; // 0x818
	UEncounterListenerComponent* EncounterListenerComponent; // 0x820
	UCharacterAnimaticSettingsComponent* CharacterAnimaticSettingsComponent; // 0x828
	UAthenaTutorialComponent* TutorialComponent; // 0x830
	UContextualTutorialComponent* ContextualTutorialComponent; // 0x838
	UShantySelectionComponent* ShantySelectionComponent; // 0x840
	UTutorialManager* TutorialManagerComponent; // 0x848
	UEmissaryActionRewardBoostComponent* EmissaryActionRewardBoostComponent; // 0x850
	UPlayerMysteriousNoteComponent* PlayerMysteriousNoteComponent; // 0x858
	UEmissaryParticipantComponent* EmissaryParticipantComponent; // 0x860
	UCommodityPurchaseTrackingComponent* CommodityPurchaseTrackingComponent; // 0x868
	UPlayerActivityComponent* PlayerActivityComponent; // 0x870
	UIslandEventTrackerComponent* IslandEventTrackerComponent; // 0x878
	UCampaignComponent* CampaignComponent; // 0x880
	float InputRawYawScale; // 0x888
	float InputRawPitchScale; // 0x88c
	FInventoryMemory InventoryMemory; // 0x890
	ACinematicCameraController* CinematicCameraController; // 0x8e0
	FGuid ClientSessionId; // 0x1320
	UPromptsLocalService* PromptsLocalService; // 0x13a8
	UCurveFloat* AutoCentreCurve; // 0x13b0
	FVector CinematicCameraControllerLocation; // 0x13d0
	FRotator CinematicCameraControllerRotation; // 0x13dc
	FPirateIdentity PirateIdentity; // 0x13e8
	EFlameOfFateType DeathFlameOfFateType; // 0x1460
	EFlameOfFateType FlameOfFateType; // 0x1461
	AIndividualReplicationChannel* IndividualReplicationChannel; // 0x1468
};

struct UBTCompositeNode {
	TArray<FBTCompositeChild> Children; // 0x58
	TArray<UBTService*> Services; // 0x68
};

struct ASkyLight {
	USkyLightComponent* LightComponent; // 0x3d0
	char bEnabled : 1; // 0x3d8
};

struct ACharacterSocketCollisionService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UNPCDialogTreeData {
	TArray<FNPCDialogData> Dialogs; // 0x28
	FString SourceText; // 0x38
};

struct UEditorOnlyChildActorComponent {
	AActor* CachedChildActorClass; // 0x2d0
};

struct UParticleModulePivotOffset {
	FVector2D PivotOffset; // 0x50
};

struct UExpandableArea {
	bool bIsExpanded; // 0x140
	float MaxHeight; // 0x144
	FMargin AreaPadding; // 0x148
	FScriptMulticastDelegate OnExpansionChanged; // 0x158
	UWidget* HeaderContent; // 0x168
	UWidget* BodyContent; // 0x170
};

struct URewindPhysicsService {
	UWorld* World; // 0x30
	TArray<FRewindPhysicsServiceEntry> Entries; // 0x40
};

struct UParticleModuleAccelerationDragScaleOverLife {
	UDistributionFloat* DragScale; // 0x58
	UDistributionFloat* DragLocalVelocityScale; // 0x60
};

struct UCannonballItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UMaterialExpressionParticleRadius {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UMeshMemoryConstraintSettings {
	FStringAssetReference MeshMemoryConstraintFallbackSettings; // 0x38
};

struct UAthenaCharacterStateManagerComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBorderSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UBTAuxiliaryNode {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UInterpFilter_Custom {
	FString Caption; // 0x28
};

struct UPluginCommandlet {
	FString HelpDescription; // 0x28
	FString HelpUsage; // 0x38
	FString HelpWebLink; // 0x48
	TArray<FString> HelpParamNames; // 0x58
	TArray<FString> HelpParamDescriptions; // 0x68
	char IsServer : 1; // 0x78
	char IsClient : 1; // 0x78
	char IsEditor : 1; // 0x78
	char LogToConsole : 1; // 0x78
	char ShowErrorCount : 1; // 0x78
};

struct UClawPummelAIAbilityParams {
	float WarmUpTime; // 0x208
};

struct UTextureRenderTargetCube {
	int32_t SizeX; // 0x140
	FLinearColor ClearColor; // 0x144
	EPixelFormat OverrideFormat; // 0x154
	char bHDR : 1; // 0x158
	char bForceLinearGamma : 1; // 0x158
};

struct AServerIslandPerfTestGameState {
	FGameServiceCoordinator ServiceCoordinator; // 0x590
	APerfTestIslandService* IslandService; // 0x5b0
	AFFTWaterService* WaterService; // 0x5b8
};

struct ATreasureChestItemInfo {
	EBootyTypes BootyType; // 0x528
	FGuid Id; // 0x52c
	bool PlayedFirstTimeEquipSfx; // 0x53c
	TArray<FPlayerStat> HandInPlayerStats; // 0x540
	TArray<FPlayerStat> HandInStolenPlayerStats; // 0x550
	TArray<FPlayerStat> HandInStolenFromPlayerStats; // 0x560
	TArray<FPlayerStat> HandInGiftPlayerStats; // 0x570
	TArray<FPlayerStat> HandInAsPirateLegendPlayerStats; // 0x580
	TArray<FPlayerStat> HandInOnSchedulePlayerStats; // 0x590
	TArray<FPlayerStat> HandInAsPirateLegendOnSchedulePlayerStats; // 0x5a0
	TArray<FEmissaryBootyItemStats> HandInAsEmissaryPlayerStats; // 0x5b0
	TArray<FEmissaryBootyItemStats> HandInAsMaxLevelEmissaryPlayerStats; // 0x5c0
	TArray<FEmissaryBootyItemStats> HandInStolenAsEmissaryPlayerStats; // 0x5d0
	TArray<FEmissaryBootyItemStats> HandInStolenAsMaxLevelEmissaryPlayerStats; // 0x5e0
	TArray<FPlayerStat> UsePlayerStats; // 0x5f0
	TArray<FPlayerStat> UseStolenPlayerStats; // 0x600
	FCompanyBootyStatList CompanySpecificStats; // 0x610
	FConditionalHandInStat ConditionalHandInStat; // 0x620
	UPopUpMessageDesc* DiscoveredPopupDesc; // 0x640
	FBootyItemSellPrerequisites SellPrerequisites; // 0x648
	UTrackedOwnerComponent* TrackedOwnerComponent; // 0x658
	UItemQualityComponent* ItemQualityComponent; // 0x660
	EEmissaryQualityLevel ItemQualityLevel; // 0x668
	TArray<FPerComanyItemQualityEntry> CompanySpecificItemQualityLevel; // 0x670
	FRewardId HandInRewardId; // 0x680
	TArray<FCompanySpecificBootyReward> HandInRewardIdCompanySpecific; // 0x688
	bool RewardToOwnCrewOnly; // 0x698
	FName Rarity; // 0x69c
	UDeliverableComponent* DeliverableComponent; // 0x6c0
	UCrewOwnershipTrackingComponent* CrewOwnershipTrackingComponent; // 0x6c8
	UBootyItemShipOwnershipComponent* BootyItemShipOwnershipComponent; // 0x6d0
	ESpawnedItemSource SpawnSource; // 0x6d8
};

struct USoundNodeLooping {
	int32_t LoopCount; // 0x38
	char bLoopIndefinitely : 1; // 0x3c
};

struct ATreasureMapItemInfo {
	bool CanBeStoredInInventory; // 0x3f0
	FScriptMulticastDelegate OnItemPickedUpDelegate; // 0x3f8
	FScriptMulticastDelegate OnItemDroppedDeletage; // 0x408
	AWieldableItem* WieldableType; // 0x418
	AActor* ProxyType; // 0x420
	UWieldableItemPersistentCooldownComponent* WieldableItemPersistenceCooldownComponent; // 0x428
	UItemDesc* Desc; // 0x430
	EItemRepresentation CurrentRepresentation; // 0x438
	AActor* CurrentRepresentationInstance; // 0x440
	AActor* CurrentOwner; // 0x448
	AActor* TutorialOwner; // 0x450
	bool DoNotConsiderForMigrationGather; // 0x4f9
};

struct URandomPirateLegendSectionStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UWwiseObjectPoolWrapper {
	FName PoolName; // 0x28
	int32_t MaxResources; // 0x30
	bool DisableOcclusion; // 0x34
	bool DisableReverb; // 0x35
	FWwiseNativeEmitterPoolDensityParams PoolDensityParams; // 0x38
};

struct UAnimNotifyState_AthenaTimedParticleEffect {
	FVector RelativeScale; // 0x58
	FLinearColor ColorTint; // 0x64
	float CustomParameter; // 0x74
	char Attached : 1; // 0x78
	char KeepWorldScale : 1; // 0x78
	EAnimNotifyUnderwaterMode UnderwaterMode; // 0x7c
	EVfxCustomLocalSpaceMode CustomLocalSpaceMode; // 0x7d
};

struct UStorageContainerSpawnerItemFeatureBasedWeightedItemList {
	TArray<FStorageContainerWeightedItemListFeatureGroup> FeatureGroups; // 0x38
};

struct UTinySharkTelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AShipHullAudio {
	UWwiseEvent* WwiseEvent_ShipSinking; // 0x460
	UWwiseEvent* WwiseEvent_ShipSinkingExceededRollThreshold; // 0x468
	UWwiseEvent* WwiseEvent_FloodDamage_Play; // 0x470
	UWwiseEvent* WwiseEvent_FloodDamage_Stop; // 0x478
	UWwiseEvent* WwiseEvent_SuperheatedWater_Play; // 0x480
	UWwiseEvent* WwiseEvent_SuperheatedWater_Stop; // 0x488
	UWwiseEvent* WwiseEvent_ShipSinking_Music; // 0x490
	UWwiseEvent* WwiseEvent_ShroudBreakerShield; // 0x498
	UWwiseObjectPoolWrapper* WwiseEvent_ShipSinking_Music_Pool; // 0x4a0
	UWwiseObjectPoolWrapper* Emitter_MidShip_Pool; // 0x4a8
	FName RTPC_ShipRoll; // 0x4b0
	FName RTPC_ShipPitch; // 0x4b8
	FName RTPC_FloodDamage; // 0x4c0
	FName RTPC_ShipVelocity; // 0x4c8
	FName RTPC_ShipStrain; // 0x4d0
	FName RTPC_SuperheatedWaterIntensity; // 0x4d8
	float PositionTolerance; // 0x4e0
	float MaxVelocity; // 0x4e4
	float SinkingShipRollThreshold; // 0x4e8
	USceneComponent* ShipAudioRootComponent; // 0x4f0
	TArray<FShipHullAudioData> ShipHullAudioDataArray; // 0x4f8
	AShipInternalWater* InternalWater; // 0x518
	FWwiseEmitter Emitter_MidShip; // 0x520
	FWwiseEmitter ShipSinkingMusicEmitter; // 0x540
};

struct UEngineMessage {
	FString FailedPlaceMessage; // 0x28
	FString MaxedOutMessage; // 0x38
	FString EnteredMessage; // 0x48
	FString LeftMessage; // 0x58
	FString GlobalNameChange; // 0x68
	FString SpecEnteredMessage; // 0x78
	FString NewPlayerMessage; // 0x88
	FString NewSpecMessage; // 0x98
};

struct AWorldSafeRegion {
	bool RequiresShroudBreaker; // 0x409
	bool IsMainWorldSafeZone; // 0x40a
};

struct ADebugAISpawnerCreator {
	UAISpawner* SpawnerTemplate; // 0x3d0
	float TriggerRadius; // 0x3d8
	UAISpawner* Spawner; // 0x3e0
	UAIProximityPlayerTracker* ProximityPlayerTracker; // 0x3e8
	USimpleAIRegion* Region; // 0x3f0
};

struct UNavArea_Obstacle {
	float DefaultCost; // 0x28
	float FixedAreaEnteringCost; // 0x2c
	FColor DrawColor; // 0x30
	FNavAgentSelector SupportedAgents; // 0x34
	char bSupportsAgent0 : 1; // 0x38
	char bSupportsAgent1 : 1; // 0x38
	char bSupportsAgent2 : 1; // 0x38
	char bSupportsAgent3 : 1; // 0x38
	char bSupportsAgent4 : 1; // 0x38
	char bSupportsAgent5 : 1; // 0x38
	char bSupportsAgent6 : 1; // 0x38
	char bSupportsAgent7 : 1; // 0x38
	char bSupportsAgent8 : 1; // 0x39
	char bSupportsAgent9 : 1; // 0x39
	char bSupportsAgent10 : 1; // 0x39
	char bSupportsAgent11 : 1; // 0x39
	char bSupportsAgent12 : 1; // 0x39
	char bSupportsAgent13 : 1; // 0x39
	char bSupportsAgent14 : 1; // 0x39
	char bSupportsAgent15 : 1; // 0x39
};

struct UParticleModuleColorBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UMovieSceneMarginSection {
	FRichCurve TopCurve; // 0xa0
	FRichCurve LeftCurve; // 0x118
	FRichCurve RightCurve; // 0x190
	FRichCurve BottomCurve; // 0x208
};

struct UEnvQueryGenerator_WaterDonut {
	FAIDataProviderFloatValue InnerRadius; // 0x90
	FAIDataProviderFloatValue OuterRadius; // 0xc0
	FAIDataProviderIntValue NumberOfRings; // 0xf0
	FAIDataProviderIntValue PointsPerRing; // 0x120
	FEnvDirection ArcDirection; // 0x150
	FAIDataProviderFloatValue ArcAngle; // 0x170
	FAIDataProviderFloatValue ZOffsetFromCentre; // 0x1a0
	UEnvQueryContext* Center; // 0x1d0
	char bDefineArc : 1; // 0x1d8
	char ProjectPointsToWaterSurface : 1; // 0x1d8
	UEnvQueryContext* WaterPlaneSourceContext; // 0x1e0
	char ApplyZOffsetToProjectPoints : 1; // 0x1e8
};

struct UAnimCompositeBase {
	TArray<FAnimNotifyEvent> Notifies; // 0x50
	float SequenceLength; // 0x60
	float RateScale; // 0x64
	FRawCurveTracks RawCurveData; // 0x68
};

struct AFFTWater {
	UFFTWaterComponent* FFTWaterComponent; // 0x408
	UFFTWaterExtendedPlaneComponent* ExtendedPlaneComponent; // 0x410
};

struct UShipwreckSiteGeneratorRandom {
	float MinSpawnDistanceFromEndOfWorldZone; // 0x28
	UCurveFloat* ShipwreckDepthDistribution; // 0x30
	float ClearanceRadius; // 0x38
	float MinDistanceFromClosestShipwreck; // 0x3c
	float MinDistanceFromClosestCrewShip; // 0x40
	float MinDistanceFromClosestIsland; // 0x44
	float MinDistanceFromClosestPlayer; // 0x48
	float MinDistanceFromClosestRock; // 0x4c
	float SiteGenerationThrottle; // 0x50
	int32_t RequestBatchSize; // 0x54
	TArray<FShipwreckSiteRotation> Rotations; // 0x58
};

struct AInteractableLight {
	UInteractableLightParameters* InteractableLightParameters; // 0x470
	UWwiseEvent* SfxSwitchOn; // 0x478
	UWwiseEvent* SfxSwitchOff; // 0x480
	UWwiseEvent* SfxBurningPlay; // 0x488
	UWwiseEvent* SfxBurningStop; // 0x490
	UWwiseEvent* SfxSetFlame; // 0x498
	UWwiseObjectPoolWrapper* SfxPool; // 0x4a0
	FName SfxEmitterName; // 0x4a8
	float InteractionRadius; // 0x4b0
	FLightData LightData; // 0x4b4
	FObjectMessagingDispatcher ObjectMessageDispatcher; // 0x4b8
};

struct ATestDockingActorWithPhrases {
	UClimbingComponent* ClimbingComponent; // 0x640
};

struct UContestAwardScoreForItemDugUpStepDesc {
	FQuestVariablePlayerActor DiscoveringCharacter; // 0x80
	FQuestVariableActor ItemDugUp; // 0x90
};

struct UAthenaEditorRuntimeSettings {
	int32_t PIECrewSize; // 0x38
	bool PIEWithBootflow; // 0x3c
	UShipSize* PIEShipSize; // 0x40
	bool PIEIsInitialTutorial; // 0x48
	bool PIEIsArenaGame; // 0x49
	bool PIEIsCustomServer; // 0x4a
	TArray<FAthenaAnimationOverrideEntry> AnimationOverrideEntries; // 0x50
};

struct AEmissaryVoteInteractionActor {
	float FadeDuration; // 0x3e0
	FEmissaryDisplayInformation EmissaryActiveInfo; // 0x3e8
	FEmissaryDisplayInformation EmissaryInactiveInfo; // 0x478
};

struct UMaterialExpressionStaticBool {
	char Value : 1; // 0x70
};

struct UAnimCompress_BitwiseCompressOnly {
	FString Description; // 0x28
	char bNeedsSkeleton : 1; // 0x38
	AnimationCompressionFormat TranslationCompressionFormat; // 0x3c
	AnimationCompressionFormat RotationCompressionFormat; // 0x3d
	AnimationCompressionFormat ScaleCompressionFormat; // 0x3e
};

struct URemoveNPCOnShipStepDesc {
	FQuestVariableGuid NPCOnShipManager; // 0x80
};

struct UAISense_Team {
	TArray<FAITeamStimulusEvent> RegisteredEvents; // 0x88
};

struct UTaleQuestAddTradeRouteMapStepDesc {
	FQuestVariableDataAsset TradeRouteData; // 0x80
	FQuestVariableText VesselName; // 0x90
	FQuestVariableGuid MapId; // 0xa0
	UClueSiteTypeToMapMarkIdDataAsset* ClueSiteToMapMarkIdMap; // 0xb0
};

struct UHealthCustomizationService {
	UWorld* World; // 0x30
};

struct UInteractableToggleMechanismActionComponent {
	EInteractableState InactiveState; // 0x158
	EInteractableState ActiveState; // 0x159
	TScriptInterface<Class> InteractableInterface; // 0x160
};

struct UTaleQuestImportFrame {
	UObject* Definition; // 0x30
};

struct UShipFireLightParamsDataAsset {
	FShipFireLightParams Params; // 0x28
};

struct ULookingAtQuestBookInputComponent {
	AQuestBook* TargetQuestBook; // 0x278
};

struct UNetworkRegionService {
	TArray<APlayerController*> PlayersThatNeedToBeTicked; // 0xb8
};

struct UWorldLocationPopUpComponent {
	UWorldLocationPopUpDataAsset* PopUpData; // 0x2b0
	UShapeComponent* LocationOverlapVolume; // 0x2b8
	float LocationCooldown; // 0x2c0
	bool AlwaysShowPopUp; // 0x2c4
};

struct UStopEmissaryVoyageInlineVoteConsumer {
	FText EmissaryVotingCastVote; // 0x128
	FText EmissaryVotingCantVote; // 0x160
	FText EmissaryVotingCantVoteReasonCrewShipOutsideRange; // 0x198
	FText EmissaryVotingCantVoteReasonActiveForDifferentCompany; // 0x1d0
	FText EmissaryVotingRemoveVote; // 0x208
	FText EmissaryVotingCantRemoveVote; // 0x240
};

struct APlayerState {
	float Score; // 0x3d0
	char Ping; // 0x3d4
	FString PlayerName; // 0x3d8
	int32_t PlayerId; // 0x3f8
	char bIsSpectator : 1; // 0x3fc
	char bOnlySpectator : 1; // 0x3fc
	char bIsABot : 1; // 0x3fc
	char bIsInactive : 1; // 0x3fc
	char bFromPreviousLevel : 1; // 0x3fc
	int32_t StartTime; // 0x400
	ULocalMessage* EngineMessageClass; // 0x408
	FUniqueNetIdRepl UniqueId; // 0x428
};

struct UGameplayEffectExtension_LifestealTest {
	UGameplayEffect* HealthRestoreGameplayEffect; // 0x48
};

struct UParticleModuleRotationRate_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x1a8
};

struct USeatStat_TimeOfDay {
	ESeatStatTimeOfDay TimeOfDay; // 0x48
	UTimeOfDayDataAsset* TimeOfDayRanges; // 0x50
};

struct UCommodityDemandFrameworkEditorSettings {
	FStringAssetReference CommodityDataFileLocation; // 0x38
};

struct UWaitUntilAllParticipantsEnterRadiusStep {
	float DurationBetweenChecks; // 0x80
	FQuestVariableVector Location; // 0x88
	FQuestVariableFloat Radius; // 0x98
};

struct ULandscapeMeshCollisionComponent {
	FGuid MeshGuid; // 0x660
};

struct UAncientAIFormComponent {
	TArray<FAthenaAIFormComponentVfxCustomisation> VfxCustomisations; // 0xd0
	UAthenaAIFormDataAsset* FormData; // 0xe0
	UCharacterHitReactionDamagerTypeToAnimTypeLayer* HitReactionsLayer; // 0xe8
};

struct UCapturedByKrakenInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMechanismAnimationEvent_VFX {
	UParticleSystemComponent* CachedParticleSystem; // 0x40
	USceneComponent* CachedAttachParent; // 0x48
};

struct UMermaidPartsDesc {
	FStringAssetReference PlaySongEvent; // 0x80
	FStringAssetReference StopSongEvent; // 0x90
};

struct UMaterialExpressionAppendVector {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
};

struct UEnvQueryGenerator_ProjectedPoints {
	FEnvTraceData ProjectionData; // 0x50
};

struct UEquippedWithClothingStatCondition {
	FRequiredClothingData RequiredClothingData; // 0x28
};

struct UAthenaAnimationItemListingAsset {
	UAthenaAnimationFishingAnimationsGroupingAsset* FishingRodItemGrouping; // 0x28
};

struct UAIBountySpawner {
	float MaximumDistanceToPerceiveOnSpawnsAfterFirstGroup; // 0x428
	TArray<FAIBountySpawnerWaveGroup> WaveGroups; // 0x430
	FStringAssetReference TeamColor; // 0x440
	FWeightedProbabilityRange WavesPerRelocate; // 0x450
	FWeightedProbabilityRange WaveSplitChance; // 0x470
	TArray<float> WaveSuicideTime; // 0x490
	float WaveSuicideMinDist; // 0x4a0
	bool ImmediatelyPerceiveTargets; // 0x4a4
	UAICombatDialogue* ActiveCombatDialogue; // 0x4a8
	TArray<AActor*> CrewMembers; // 0x4d8
	TArray<AActor*> NonCrewMembersInRegion; // 0x4e8
	TArray<AActor*> AllParticipatingPlayers; // 0x4f8
	UOverlapTriggerComponent* AudioZoneTriggerComponent; // 0x508
};

struct UBTTask_MoveToFailOnDistanceToTargetChanged {
	FBlackboardKeySelector TargetBlackboardKey; // 0xc0
};

struct ULandscapeMaterialInstanceConstant {
	char bIsLayerThumbnail : 1; // 0x1b8
	int32_t DataWeightmapIndex; // 0x1bc
	int32_t DataWeightmapSize; // 0x1c0
};

struct UCustomWeatherService {
	UWorld* World; // 0x30
};

struct UWorldEndAbilityStageParams {
	float WorldEndDurationMultiplier; // 0x40
	bool UseSuperHeatedWaterInStage; // 0x44
};

struct UNPCOnShipManager {
	AShip* CurrentCachedCannonsShip; // 0x80
	UNPCOnShipDataAsset* NPCOnShipDataAsset; // 0x88
};

struct ANPCOnSurface {
	bool CanDamagePlayers; // 0x3e0
	UNPCOnSurfaceVODataAsset* VODataAsset; // 0x3e8
	FText NPCName; // 0x3f0
	UWwiseObjectPoolWrapper* Pool; // 0x428
	USkeletalMeshComponent* Mesh; // 0x430
	UWwiseEmitterComponent* Emitter; // 0x438
	UCutSceneSubtitlesComponent* CutSceneSubtitlesComponent; // 0x440
	UCustomAnimationMontageComponent* CustomAnimationMontageComponent; // 0x448
	FStringAssetReference CurrentAnimInstance; // 0x450
	bool IsPlayerCurrentlyNearNPC; // 0x460
};

struct UParticleModuleTypeDataBeam2 {
	EBeam2Method BeamMethod; // 0x50
	int32_t TextureTile; // 0x54
	float TextureTileDistance; // 0x58
	int32_t Sheets; // 0x5c
	int32_t MaxBeamCount; // 0x60
	float Speed; // 0x64
	int32_t InterpolationPoints; // 0x68
	char bAlwaysOn : 1; // 0x6c
	int32_t UpVectorStepSize; // 0x70
	FName BranchParentName; // 0x74
	FRawDistributionFloat Distance; // 0x80
	EBeamTaperMethod TaperMethod; // 0xb8
	FRawDistributionFloat TaperFactor; // 0xc0
	FRawDistributionFloat TaperScale; // 0xf8
	char RenderGeometry : 1; // 0x130
	char RenderDirectLine : 1; // 0x130
	char RenderLines : 1; // 0x130
	char RenderTessellation : 1; // 0x130
	TArray<UParticleModuleBeamSource*> LOD_BeamModule_Source; // 0x138
	TArray<UParticleModuleBeamTarget*> LOD_BeamModule_Target; // 0x148
	TArray<UParticleModuleBeamNoise*> LOD_BeamModule_Noise; // 0x158
	TArray<UParticleModuleBeamModifier*> LOD_BeamModule_SourceModifier; // 0x168
	TArray<UParticleModuleBeamModifier*> LOD_BeamModule_TargetModifier; // 0x178
};

struct ADebugRegisterDynamicsShip {
	FShipPartConnections PartConnections; // 0x488
	UStaticMeshComponent* BoatCollision; // 0x520
	UBasisComponent* BoatBasis; // 0x528
	UStaticMeshComponent* OverlapHit; // 0x530
	UStaticMeshComponent* BelowDeckVolume; // 0x538
	UStaticMeshComponent* CabinVolume; // 0x540
	FObjectMessagingDispatcher ObjectMessageDispatcher; // 0x548
	UTeleportLocationRetrievalComponent* TeleportLocationRetrievalComponent; // 0x5e8
	UChildActorComponent* ShipInternalWaterComponent; // 0x5f0
	USinkingComponent* SinkingComponent; // 0x5f8
	UShipHullCollisionComponent* HullCollisionComponent; // 0x600
	UTetherCustomisationComponent* TetherCustomisationComponent; // 0x608
	UShipStuckDetectionComponent* StuckDetectionComponent; // 0x610
	UStatusEffectManagerComponent* StatusEffectManagerComponent; // 0x618
	UStatusEffectPersistenceComponent* StatusEffectPersistenceComponent; // 0x620
	UShipCurseComponent* ShipCurseComponent; // 0x628
	UInstancedNavMeshComponent* InstancedNavMeshComponent; // 0x630
	FWaterBuoyancy Buoyancy; // 0x640
	UCrewOwnershipComponent* CrewOwnershipComponent; // 0x770
	UOnboardCharacterTrackerComponent* OnboardCharacterTrackerComponent; // 0x778
	URewindComponent* RewindComponent; // 0x780
	UShipLiveryComponent* LiveryComponent; // 0x788
	UReplicatedShipPartCustomizationComponent* HullLiveryCustomizationComponent; // 0x790
	UReplicatedShipPartCustomizationComponent* SailsLiveryCustomizationComponent; // 0x798
	UReplicatedShipPartCustomizationComponent* CannonEnchantmentCustomizationComponent; // 0x7a0
	URammerType* RammerType; // 0x7a8
	UGroupedInteractableAreaComponent* GroupedInteractableAreaComponent; // 0x7b0
	FShipConfigurationSettings ShipConfigurationSettings; // 0x7b8
	float RainFillRate; // 0x7d0
	float RainTimePerDrop; // 0x7d4
	float RainDropScale; // 0x7d8
	float RainDropRadius; // 0x7dc
	float RainStrengthMinimumToFillShip; // 0x7e0
	TArray<FVector> AITargetVisibilityPoints; // 0x7e8
	FAchievementSinkAnotherCrewsShip AchievementSinkOtherCrewsShip; // 0x7f8
	FAchievementSailThroughStormAtNightWithLightsOff AchievementSailThroughStormAtNightWithLightsOff; // 0x810
	FAchievementSailCloseToShipWithoutFiring AchievementSailCloseToShipWithoutFiring; // 0x890
	FAchievementSailFullyWithTheWind AchievementSailFullyIntoTheWind; // 0x8a8
	FAchievementSailWithFlameOfFateColoursAboard AchievementSailWithFlameOfFateColoursAboard; // 0x8b0
	UImpulseThrottlerComponent* ImpulseThrottlerComponent; // 0x9a8
	USphereComponent* ReturnToShipVolume; // 0x9b0
	float ReturnToShipVolumeRadius; // 0x9b8
	EBowSplashTickReturnType BowSplashReturnType; // 0x9bc
	FShipDynamics ShipDynamics; // 0x9c0
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0xa60
	UShipSinkingParametersDataAsset* AdventureSinkingData; // 0xa80
	UShipSinkingParametersDataAsset* ArenaSinkingData; // 0xa88
	FBuoyancySampleMovement BuoyancySampleMovement; // 0xa90
	FBuoyancySampleMovement SurfacingBuoyancySampleMovement; // 0xaf8
	FBuoyancySampleMovement DivingBuoyancySampleMovement; // 0xb60
	UShipNosediveBrake* NosediveBrake; // 0xbc8
	UShipRolloverCorrector* RolloverCorrector; // 0xbd0
	UBowSplashContainer* BowSplashContainer; // 0xbd8
	UBowSplashContainer* SurfacingBowSplashContainer; // 0xbe0
	UBowSplashContainer* DivingBowSplashContainer; // 0xbe8
	bool DisableSailingBowSplashesWhenDiving; // 0xbf0
	ULocatorContainer* ShipLocators; // 0xbf8
	FVector LocalSailForceApplicationOffset; // 0xc00
	UCurveFloat* ShipSpeedToChoppinessScalarCurve; // 0xc10
	UCurveFloat* HullSubmergedValueRemapping; // 0xc18
	float FakeBuoyancyZOffsetScalarSpringAccel; // 0xc20
	float PositionSamplerTimeWindow; // 0xc24
	FName ClientConvexHullCollisionProfile; // 0xc28
	float EmpiricalMaxSpeedInMPS; // 0xc30
	FTransform BrigSpawnLocation; // 0xc40
	float WaterStrengthThresholdForStormDamage; // 0xc70
	AActor* FirePropagationBlueprint; // 0xc78
	UShipFirePropagationComponent* FirePropagationComponent; // 0xc80
	FEncounterParams SightingEncounterParams; // 0xcf0
	FEncounterParams CloseProximityEncounterParams; // 0xcfc
	UShipCategory* ShipCategoryObject; // 0xd18
	UShipSize* ShipSizeObject; // 0xd20
	UShipType* ShipTypeObject; // 0xd28
	TArray<AActor*> DamageableChildActors; // 0xd30
	ACrewShipManifest* CrewShipManifest; // 0xd40
	UObject* HullDamage; // 0xda8
	USurfaceWaterComponent* DeckWater; // 0xdb0
	UWaterExposureComponent* WaterExposureComponent; // 0xdb8
	UShroudBreakerTrackerComponent* ShroudBreakerTrackerComponent; // 0xdc0
	FNetTimeStampCalculator MovementTimeStamp; // 0xdc8
	float StormStrainWeight; // 0xf2c
	float WorldEdgeWeight; // 0xf30
	float TetherMassInertiaScaleWhenAnchored; // 0xf34
	FStrainDamage StormStrainDamage; // 0xf38
	FStrainDamage WorldEdgeDamage; // 0xf60
	FStrainDamage ScuttleDamage; // 0xf88
	FVector2D WorldEdgeDamageRange; // 0xfb0
	float ScuttleForceSinkTime; // 0xfb8
	ANetProxy* ProxyClass; // 0xfc0
	bool HasEverStartedSailing; // 0xfc9
	bool EmissaryFlagActive; // 0xfca
	EShipSurfacingState SurfacingState; // 0xfcb
	TArray<UMobileInstancedStaticMeshComponent*> InstancedMeshes; // 0xfd0
	float ScuttleTime; // 0x1460
};

struct ABuriedDecalServerService {
	UDiggingSettings* Settings; // 0x3d8
};

struct UMaterialExpressionBoneMatrix {
	int32_t ReferenceIndex; // 0x70
	FName BoneName; // 0x74
	bool bPosition; // 0x7c
};

struct UInvokeDamageDesc {
	FQuestVariableActor ActorToDamage; // 0x80
	UDamagerType* DamageType; // 0x90
	float DamageAmount; // 0x98
	EHealthChangedReason DamageReason; // 0x9c
};

struct UInterpTrackInstFloatMaterialParam {
	TArray<UMaterialInstanceDynamic*> MaterialInstances; // 0x28
	TArray<float> ResetFloats; // 0x38
	TArray<FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48
	UInterpTrackFloatMaterialParam* InstancedTrack; // 0x58
};

struct UContestAwardScoreForItemDugUpStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UIsPlayModeStatCondition {
	EPlayMode Playmode; // 0x28
};

struct UTaleQuestReactionStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleQuestNPCBeckonCrewStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ULandscapeHeightfieldCollisionComponent {
	TArray<ULandscapeLayerInfoObject*> ComponentLayerInfos; // 0x588
	int32_t SectionBaseX; // 0x598
	int32_t SectionBaseY; // 0x59c
	int32_t CollisionSizeQuads; // 0x5a0
	float CollisionScale; // 0x5a4
	TArray<char> CollisionQuadFlags; // 0x5a8
	FGuid HeightfieldGuid; // 0x5b8
	FBox CachedLocalBox; // 0x5c8
	ULandscapeComponent* RenderComponent; // 0x5e4
	TArray<UPhysicalMaterial*> CookedPhysicalMaterials; // 0x610
};

struct ASailHoist {
	float RopeUVSpeed; // 0x7c8
	URiggingSystemComponent* Rigging; // 0x7d0
	int32_t RiggingRopeIndex; // 0x7d8
	bool PlayAudio; // 0x7dc
};

struct UVotableVoyageProposalComponent {
	float TooltipUIFadeDuration; // 0x248
	FVector2D TooltipUIScreenSpaceOffsetRatio; // 0x24c
	FProposedVoyageEntry ProposedEntry; // 0x258
	FProposedTaleEntry ProposedTale; // 0x268
	UStaticMeshComponent* VotableMeshComponent; // 0x280
};

struct UTutorialComponent {
	bool HasBegun; // 0xd8
};

struct ATunnelOfTheDamnedLocator {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UWheelAnimInstance {
	FRotator WheelRotation; // 0x440
	float WheelTime; // 0x44c
	EWheelAnimationType AnimationType; // 0x450
	char IsAnimationTypeLeftTurnFast : 1; // 0x454
	char IsAnimationTypeRightTurnFast : 1; // 0x454
	char IsAnimationTypeRightTurnMid : 1; // 0x454
	char IsAnimationTypeLeftTurnMid : 1; // 0x454
	char IsAnimationTypeSmallTurn : 1; // 0x454
	char IsTurningLeft : 1; // 0x454
	char IsTurningRight : 1; // 0x454
	FWheelPartsScales WheelPartScales; // 0x458
};

struct ATestAthenaPlayerController {
	UForceFeedbackEffect* LastReceivedForceFeedbackEffect; // 0x1488
};

struct USoundNodeRandom {
	TArray<float> Weights; // 0x38
	int32_t PreselectAtLevelLoad; // 0x48
	char bRandomizeWithoutReplacement : 1; // 0x4c
	TArray<bool> HasBeenUsed; // 0x50
	int32_t NumRandomUsed; // 0x60
};

struct UCutscenePoolType {
	bool DialogueSelectedRandomly; // 0x28
	TArray<int32_t> AvailableIndices; // 0x30
	TArray<int32_t> OriginalIndices; // 0x48
};

struct UStatusEffectManagerComponent {
	UStatusRecipientResponseList* RecipientResponseList; // 0xf0
	TArray<FActiveStatusEffect> ActiveEffects; // 0xf8
};

struct USceneDialogueSectionRedirect {
	FString SectionNameToGoTo; // 0x28
};

struct UAchievementDefinitionDataAsset {
	TArray<FAchievementDefinition> AchievementDefintions; // 0x28
};

struct AAthenaPlayerCameraManager {
	APlayerController* PCOwner; // 0x3d0
	USceneComponent* TransformComponent; // 0x3d8
	float DefaultFOV; // 0x3e8
	float DefaultOrthoWidth; // 0x3f0
	float DefaultAspectRatio; // 0x3f8
	FCameraCacheEntry CameraCache; // 0x440
	FCameraCacheEntry LastFrameCameraCache; // 0x9f0
	FTViewTarget ViewTarget; // 0xfa0
	FTViewTarget PendingViewTarget; // 0x1560
	TArray<UCameraModifier*> ModifierList; // 0x1b38
	TArray<UCameraModifier*> DefaultModifiers; // 0x1b48
	float FreeCamDistance; // 0x1b58
	FVector FreeCamOffset; // 0x1b5c
	FVector ViewTargetOffset; // 0x1b68
	TArray<AEmitterCameraLensEffectBase*> CameraLensEffects; // 0x1b88
	UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x1b98
	UCameraAnimInst* AnimInstPool[0x8]; // 0x1ba0
	TArray<FPostProcessSettings> PostProcessBlendCache; // 0x1be0
	TArray<UCameraAnimInst*> ActiveAnims; // 0x1c00
	TArray<UCameraAnimInst*> FreeAnims; // 0x1c10
	ACameraActor* AnimCameraActor; // 0x1c20
	char bIsOrthographic : 1; // 0x1c28
	char bUseClientSideCameraUpdates : 1; // 0x1c28
	char bFollowHmdOrientation : 1; // 0x1c29
	float ViewPitchMin; // 0x1c2c
	float ViewPitchMax; // 0x1c30
	float ViewYawMin; // 0x1c34
	float ViewYawMax; // 0x1c38
	float ViewRollMin; // 0x1c3c
	float ViewRollMax; // 0x1c40
};

struct AInterpolatingItem {
	UStaticMeshMemoryConstraintComponent* FirstPersonMesh; // 0x3d0
	UStaticMeshMemoryConstraintComponent* ThirdPersonMesh; // 0x3d8
	USceneComponent* FromParent1P; // 0x3e0
	USceneComponent* FromParent3P; // 0x3f0
	USceneComponent* ToParent; // 0x460
};

struct UMaterialExpressionCrossProduct {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
};

struct UEmissaryRewardSettingsAsset {
	TArray<FEmissaryRewardEntry> EmissaryRewardData; // 0x28
	float PlayerKilledExpiryTime; // 0x38
	UEmissaryRewardCampaignSettingsAsset* CampaignSettings; // 0x40
};

struct UTextBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UAISenseConfig_Sight {
	UAISense_Sight* Implementation; // 0x30
	float SightRadius; // 0x38
	float LoseSightRadius; // 0x3c
	float PeripheralVisionAngleDegrees; // 0x40
	FAISenseAffiliationFilter DetectionByAffiliation; // 0x44
	float AutoSuccessRangeFromLastSeenLocation; // 0x48
};

struct UWashedUpSkeletonLandClueCreator {
	TArray<UClass*> SkeletonPoses; // 0x30
	UClass* ClueItemDesc; // 0x40
	int32_t LootItemSpawnXYDistanceFromClueIncrementMin; // 0x60
	int32_t LootItemSpawnXYDistanceFromClueIncrementMax; // 0x64
	int32_t LootItemSpawnZOffset; // 0x68
};

struct UAbilityTask_WaitGameplayEffectRemoved {
	FScriptMulticastDelegate OnRemoved; // 0x68
	FScriptMulticastDelegate InvalidHandle; // 0x78
};

struct UTinySharkServiceParamsDataAsset {
	FTinySharkServiceParams Params; // 0x28
	int32_t MaxNumTinySharkExperiences; // 0x50
};

struct AMockAthenaPlayerCharacterWithAthenaPlayerCharacterMovementComponent {
	UAICreatureMovementModifierParamsDataAsset* PetMovementParamsDataAsset; // 0x1ac0
	bool AllowedToSwim; // 0x1ac8
};

struct USovereignNPCComponent {
	TArray<UCompany*> AssociatedCompanies; // 0x220
	FText NotInTinSessionTooltip; // 0x230
};

struct UTornMapParams {
	TArray<FTornMapTearingParams> TearingParams; // 0x28
	FStringAssetReference MarkTexture; // 0x38
	float MarkScale; // 0x48
};

struct ATestPlayerRelevancyAthenaPlayerController {
	FScriptMulticastDelegate OnQueryRelevancyCallback; // 0x1488
};

struct UAddItemsToCollectorsChestStep {
	UMutateCollectorsChestStepDesc* Desc; // 0x90
	UFillCollectorsChestWithItemsDataAsset* ItemData; // 0x98
};

struct UMovieSceneSkeletalAnimationTrack {
	TArray<UMovieSceneSection*> AnimationSections; // 0x88
};

struct UDestructibleFractureSettings {
	int32_t CellSiteCount; // 0x28
	FFractureMaterial FractureMaterialDesc; // 0x2c
	int32_t RandomSeed; // 0x50
	TArray<FVector> VoronoiSites; // 0x58
	int32_t OriginalSubmeshCount; // 0x68
	TArray<UMaterialInterface*> Materials; // 0x70
	TArray<FDestructibleChunkParameters> ChunkParameters; // 0x80
	TArray<FString> MaterialNames; // 0x90
};

struct UParticleModuleSizeScale {
	FRawDistributionVector SizeScale; // 0x50
	char EnableX : 1; // 0x88
	char EnableY : 1; // 0x88
	char EnableZ : 1; // 0x88
};

struct UCharacterAINoiseEventComponent {
	UCharacterMovementAINoiseEventComponentParams* Params; // 0xc8
	AAthenaCharacter* AthenaCharacter; // 0xd0
	UAthenaCharacterMovementComponent* CharacterMovementComponent; // 0xd8
};

struct UStoneFaceGlowComponent {
	UCurveFloat* FullToEmptyGlowCurve; // 0xc8
	UCurveFloat* EmptyToFullGlowCurve; // 0xd0
	FName ScalarParamOverrideName; // 0xd8
	TArray<UMaterialInstanceDynamic*> OverriddenMaterials; // 0xe0
};

struct AEmitterCameraLensEffectBase {
	UParticleSystem* PS_CameraEffect; // 0x420
	UParticleSystem* PS_CameraEffectNonExtremeContent; // 0x428
	float BaseFOV; // 0x430
	float DistFromCamera; // 0x434
	char bAllowMultipleInstances : 1; // 0x438
	TArray<AEmitterCameraLensEffectBase*> EmittersToTreatAsSame; // 0x440
	APlayerCameraManager* BaseCamera; // 0x450
};

struct UExitOnAllCrewsDestroyedStep {
	UExitOnAllCrewsDestroyedStepDesc* Desc; // 0x90
};

struct USunkenCurseArtefactAudioComponent {
	bool UseParentEmitter; // 0xc8
	UWwiseObjectPoolWrapper* AudioPool; // 0xd0
	UWwiseEvent* PlaySongEvent; // 0xd8
	UWwiseEvent* StopSongEvent; // 0xe0
	UWwiseEvent* PlayDamagedEvent; // 0xe8
	UWwiseEvent* PlayDefeatedEvent; // 0xf0
};

struct ABoxReflectionCapture {
	UReflectionCaptureComponent* CaptureComponent; // 0x3d0
};

struct UVisualHealthResponseComponent {
	UParticleSystemComponent* ActiveVfx; // 0xc8
	UVisualHealthResponseDataAsset* VisualHealthResponseData; // 0xd0
	TArray<UMaterialInstanceDynamic*> HealthResponseMaterials; // 0xd8
	FScriptMulticastDelegate OnMeshChangeDelegate; // 0x170
	bool WaitForAllMeshChange; // 0x180
	FScriptMulticastDelegate OnGateChangeDelegate; // 0x188
};

struct UClimbingComponent {
	FVector UseLadderOffset; // 0x188
	float ServerHeight; // 0x194
	char ServerClimbId; // 0x198
};

struct UStrategyNonVerbalRadialContentRule {
	UNonVerbalRadialDataAsset* CurrentPhrases; // 0xa8
};

struct UAshenLordSummonAIAbility {
	APawn* OwnerPawn; // 0x100
	UVFXSpawnerComponent* FireShroudVFX; // 0x108
	UAshenLordSummonAIAbilityParams* SetupAbilityParams; // 0x110
	FAshenLordFireShroud FireShroud; // 0x118
};

struct UKrakenAnimatedTentacleAnimationInstance {
	float AnimationStopBlendOutTime; // 0x440
	float MidAnimationBranchBlendTime; // 0x444
	TArray<FKrakenAnimatedTentacleHitReactAnimation> HitReactAnimations; // 0x448
	UKrakenAnimatedTentacleStateAnimationsDataAsset* StateAnimationsAsset; // 0x458
	UAnimMontage* PlayingMontage; // 0x460
	AKrakenAnimatedTentacle* OwningKrakenAnimatedTentacle; // 0x488
};

struct USkeletalMesh {
	USkeleton* Skeleton; // 0x50
	FBoxSphereBounds Bounds; // 0x58
	TArray<FSkeletalMaterial> Materials; // 0x78
	TArray<FBoneMirrorInfo> SkelMirrorTable; // 0x88
	EAxis SkelMirrorAxis; // 0x98
	EAxis SkelMirrorFlipAxis; // 0x99
	TArray<FSkeletalMeshLODInfo> LODInfo; // 0xa0
	char bUseFullPrecisionUVs : 1; // 0xb0
	char bHasBeenSimplified : 1; // 0xb0
	char bHasVertexColors : 1; // 0xb0
	TArray<FDeformablesSettings> DeformablesSettings; // 0xb8
	char bKeepTessellationAdjacency : 1; // 0xc8
	char bKeepSkeletalMeshBuffersInMemory : 1; // 0xc8
	char bEnablePerPolyCollision : 1; // 0xc8
	UBodySetup* BodySetup; // 0xd0
	UPhysicsAsset* PhysicsAsset; // 0xd8
	UHIKCharacterization* Characterization; // 0xe0
	UPhysicsAsset* DeformablesPhysicsAsset; // 0xe8
	float StreamingDistanceMultiplier; // 0xf0
	float StreamingDiscardedTexelRatios; // 0xf4
	TArray<UMorphTarget*> MorphTargets; // 0xf8
	TArray<UMeshPatchAsset*> MeshPatchAssets; // 0x108
	TArray<FClothingAssetData> ClothingAssets; // 0x1f0
	TArray<UAssetUserData*> AssetUserData; // 0x210
	TArray<USkeletalMeshSocket*> Sockets; // 0x228
};

struct UBrainComponent {
	UBlackboardComponent* BlackboardComp; // 0xd0
	AAIController* AIOwner; // 0xd8
};

struct UCanvasLODService {
	TArray<AActor*> ResourceManagedCanvases; // 0x38
};

struct UMaterialExpressionLandscapeLayerCoords {
	ETerrainCoordMappingType MappingType; // 0x70
	ELandscapeCustomizedCoordType CustomUVType; // 0x71
	float MappingScale; // 0x74
	float MappingRotation; // 0x78
	float MappingPanU; // 0x7c
	float MappingPanV; // 0x80
};

struct UMaterialExpressionCollectionParameter {
	UMaterialParameterCollection* Collection; // 0x70
	FName ParameterName; // 0x78
	FGuid ParameterId; // 0x80
};

struct AHitRegSnapshotService {
	bool SnapshotsEnabled; // 0x3e0
	TArray<UHitRegSnapshotComponent*> ActiveSnapshotComponents; // 0x3e8
	bool PlayerHitScanEnabled; // 0x3f8
};

struct UTaleQuestReleaseContendedResourceStep {
	UTaleQuestReleaseContendedResourceStepDesc* StepDesc; // 0x90
	bool ResourceReleased; // 0x98
};

struct AFloatingItemProxy {
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x630
	UBoxComponent* BaseComponent; // 0x650
	FNetTimeStampCalculator MovementTimeStamp; // 0x688
	AActor* TutorialOwner; // 0x6f8
	bool IsTutorialProxy; // 0x700
	FReplicatedPhysicsState ReplicatedPhysicsState; // 0x708
	bool ForceKeepTickActive; // 0x758
	ECollisionChannel CachedAutoAimCollisionChannel; // 0x788
	ECollisionResponse CachedVehicleCollisionResponse; // 0x789
};

struct USpecificItemsCrateFillerComponent {
	TArray<FStorageContainerNode> ItemsToFillCrateWith; // 0xd0
};

struct UWoodRepairTypeId {
	FText DisplayName; // 0x28
};

struct UBTTask_AttachToHangout {
	float TaskDuration; // 0x88
};

struct ADockableCutscene {
	UAnimSequence* FirstPersonAnimToPlay; // 0x510
	UAnimMontage* DockableAnimToPlay; // 0x518
	USkeletalMeshComponent* SkeletalMeshComponent; // 0x520
	float DetachCutOffTime; // 0x528
	UInteractableComponent* InteractableComponent; // 0x530
	FText DockableCutsceneName; // 0x538
	FText InteractWithCutsceneText; // 0x570
	FName DockingSocketName; // 0x5a8
};

struct AWieldableMockActor {
	UInventoryItemComponent* InventoryItem; // 0x7b0
};

struct UMergedCollisionComponent {
	TArray<FMergedCollisionComponentStaticMeshInstanceData> PerInstanceData; // 0x588
};

struct ATriggerCapsule {
	UShapeComponent* CollisionComponent; // 0x3d0
	UBillboardComponent* SpriteComponent; // 0x3d8
};

struct ACrewService {
	TArray<FCrew> Crews; // 0x4a8
};

struct UAimOffsetBlendSpace1D {
	bool bScaleAnimation; // 0x108
};

struct UMaterialExpressionGIReplace {
	FExpressionInput Default; // 0x70
	FExpressionInput StaticIndirect; // 0xa8
	FExpressionInput DynamicIndirect; // 0xe0
};

struct UBTDecorator_BaseConditional {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UTaleQuestStartTinySharkExperienceStepDesc {
	FVector SpawnLocation; // 0x80
	int32_t PartIndex; // 0x8c
	FTinySharkParams TinySharkParams; // 0x90
	UAthenaAIControllerParamsDataAsset* ControllerParams; // 0x148
	AShip* TargetShip; // 0x168
	FQuestVariableTinySharkExperience TinySharkExperience; // 0x170
};

struct UMutateCollectorsChestStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UInterpFilter {
	FString Caption; // 0x28
};

struct ATestDockableCutscene {
	UAnimSequence* FirstPersonAnimToPlay; // 0x510
	UAnimMontage* DockableAnimToPlay; // 0x518
	USkeletalMeshComponent* SkeletalMeshComponent; // 0x520
	float DetachCutOffTime; // 0x528
	UInteractableComponent* InteractableComponent; // 0x530
	FText DockableCutsceneName; // 0x538
	FText InteractWithCutsceneText; // 0x570
	FName DockingSocketName; // 0x5a8
};

struct AGameplayAbilityWorldReticle {
	FWorldReticleParameters Parameters; // 0x3d0
	bool bFaceOwnerFlat; // 0x3dc
	bool bSnapToTargetedActor; // 0x3dd
	bool bIsTargetValid; // 0x3de
	bool bIsTargetAnActor; // 0x3df
	APlayerController* MasterPC; // 0x3e0
	AActor* TargetingActor; // 0x3e8
};

struct URewardDefinitionAssetList {
	TArray<URewardDefinitionAsset*> RewardDefinitionAssets; // 0x28
	UWeightedRewardTableAsset* WeightRewardTable; // 0x38
};

struct UParticleModuleAttractorPointGravity {
	FVector Position; // 0x50
	float Radius; // 0x5c
	UDistributionFloat* Strength; // 0x60
};

struct AStaticMerchantCrate {
	URewindComponent* RewindComponent; // 0x790
	FMerchantCrateSfx FullCrateSfx; // 0x798
	TScriptInterface<Class> MountpointInterface; // 0x7b8
	bool RequiresRewindComponent; // 0x7d8
};

struct UDeliverableRedirectionCompanyContext {
	TArray<UCompany*> Companies; // 0x28
};

struct UBarrelsOfPlentyClueDestinationGenerator {
	UClueSiteData* RequiredClueSiteDataType; // 0x28
	TArray<FWeightedClueDestinationDescriptor> WeightedSupportedDescriptorTypes; // 0x30
};

struct ATestLadderActor {
	USplineComponent* OnTopSplineComponent; // 0x408
	USplineComponent* OffTopSplineComponent; // 0x410
	UPhysicalMaterial* LadderPhysicsMaterial; // 0x418
};

struct UBTService_UpdateTargetForInteractable {
	FBlackboardKeySelector Interactable; // 0x70
	FBlackboardKeySelector TargetForInteractable; // 0x98
};

struct UFireworksSettings {
	float FlashbangRadius; // 0x38
	float FlashbangFlashTimer; // 0x3c
	float FlashbangFadeOutTimer; // 0x40
	float FlashbangCooldown; // 0x44
	float LoadedFuseTimer; // 0x48
};

struct UTaleQuestAddTemporaryEntitlementStepDesc {
	TArray<UClass*> Entitlements; // 0x80
};

struct UMaterialExpressionDotProduct {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
};

struct ANPC {
	FGuid Id; // 0x4c8
	UInteractableGrammaticalGenderComponent* InteractableGrammaticalGenderComponent; // 0x4d8
	UCosmeticItemAnimationComponent* CosmeticItemAnimationComponent; // 0x4e0
	UBeckonComponent* BeckonComponent; // 0x4e8
};

struct ADamageableCargoRunCrate {
	UGatedHealthComponent* GatedHealthComponent; // 0x7c8
	UVisualHealthResponseComponent* VisualHealthResponseComponent; // 0x7d0
};

struct UKrakenHeadStateAnimationsDataAsset {
	TArray<FKrakenHeadStateAnimationMapping> States; // 0x28
};

struct UClearTaleProgressStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct ACollectableQuestObjectProvider {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct USpawnActorStep {
	USpawnActorStepDesc* Desc; // 0x98
};

struct UPrimitiveCollisionExtentAdjustOverTimeComponent {
	float DelayBeforeExtentAdjustment; // 0xc8
	UWorld* CachedWorld; // 0xf8
};

struct AOnlineBeaconHost {
	int32_t ListenPort; // 0x3f8
	TArray<AOnlineBeaconClient*> ClientActors; // 0x400
};

struct UStorageContainerComponentData {
	TArray<EHealthChangedReason> CloseInteractionExemptHealthChangeReasons; // 0x28
	UWwiseEvent* BeginQuickGiveSFX; // 0x38
	UWwiseEvent* EndQuickGiveSFX; // 0x40
	UWwiseEvent* BeginQuickTakeSFX; // 0x48
	UWwiseEvent* EndQuickTakeSFX; // 0x50
};

struct UBTDecorator_TargetInRange {
	FAIDataProviderFloatValue EnterRange; // 0x80
	FAIDataProviderFloatValue ExitRange; // 0xb0
	FBlackboardKeySelector TargetKey; // 0xe0
};

struct UIslandItemDataAsset {
	TArray<FIslandItemSpawnLocationData> SpawnLocations; // 0x38
};

struct UPhysicsThrusterComponent {
	float ThrustStrength; // 0x2b0
};

struct UShopDesc {
	FText ShopName; // 0x28
	UCatalogDataAsset* Catalog; // 0x60
	TArray<FCatalogDescTab> Catalogs; // 0x68
	UPremiumCatalogDataAsset* PremiumCatalog; // 0x78
	TArray<FFeatureToggledPremiumCatalog> FeatureToggledPremiumCatalogs; // 0x80
	FString Storefront; // 0x90
	FString OpenAudioCue; // 0xa0
	bool EnablePiratePreview; // 0xb0
	bool IsPremiumShop; // 0xb1
	UShopDialogue* Dialogue; // 0xb8
	UCompany* Company; // 0xc0
	TArray<UCategoryBase*> Categories; // 0xc8
	FStringAssetReference AllTabIcon; // 0xd8
};

struct UElectricShieldAbilityParams {
	float ChargeUpTime; // 0xc8
	FStatus BuffInterruptedStatusEffect; // 0xd0
	FStatus ElectricShieldStatusEffect; // 0xe8
};

struct UCachedResourceProviderComponent {
	UResourceCache* Cache; // 0xe8
};

struct UAggressiveGhostShipDataAsset {
	int32_t NumSpawnLocationAngleAttempts; // 0x28
	float HeightOffset; // 0x2c
	float MaxSplineRadiusInMetres; // 0x30
	float DelayBeforeShootingAfterAppearing; // 0x34
	float TimeToFadeOutBeforeDestroyingWhenKilled; // 0x38
	float TimeToFadeOutBeforeDestroyingWhenKilledWithSinkingAnimation; // 0x3c
	float OnDeathPushBackExplosionDelay; // 0x40
	float PitchSpeed; // 0x44
	float MaxPitch; // 0x48
	float RollSpeed; // 0x4c
	float MaxRoll; // 0x50
	float ForwardOffsetInMetresToAngleOffset; // 0x54
	float LowAccuracyTargetDistanceInMetres; // 0x58
	float HighAccuracyTargetDistanceInMetres; // 0x5c
	float MinFormationSpawnDistanceFromPointsToAvoidInMetres; // 0x60
	float MinFormationSpawnDistanceFromPlayersInMetres; // 0x64
	float SpawnOnTopOfPlayerDistanceAwayInMetres; // 0x68
	float MaxTargetAngle; // 0x6c
	float CannonTargetConeSideOffsetInMetres; // 0x70
	float ExtraDeadZoneInMetres; // 0x74
	float ProjectileSpeed; // 0x78
	float ProjectileGravityScale; // 0x7c
	float DistanceForShipToTravelToGetThroughPortalInMetres; // 0x80
	UWwiseEvent* CannonFireSfx; // 0x88
	UWwiseEvent* SpawnSFX; // 0x90
	UWwiseEvent* DespawnSFX; // 0x98
	UWwiseEvent* DeathSfx; // 0xa0
	UWwiseEvent* StartAmbientSfx; // 0xa8
	UWwiseEvent* StopAmbientSfx; // 0xb0
	UWwiseEvent* BeginOverlapOneShotSfx; // 0xb8
	UWwiseEvent* EndOverlapOneShotSfx; // 0xc0
	UWwiseEvent* OnMinesSpawnedSfx; // 0xc8
	UWwiseEvent* OnBreakingSurfaceSfx; // 0xd0
	UWwiseEvent* OnDisappearingBelowSurfaceSfx; // 0xd8
	UWwiseEvent* OnSinkingSfx; // 0xe0
	UWwiseEvent* CapstanDropLoopStart; // 0xe8
	UWwiseEvent* CapstanDropLoopStop; // 0xf0
	UWwiseEvent* CapstanHitWater; // 0xf8
	UWwiseObjectPoolWrapper* AmbientSfxPool; // 0x100
	UWwiseObjectPoolWrapper* CannonSfxPool; // 0x108
	UWwiseObjectPoolWrapper* CapstanSfxPool; // 0x110
	UObject* CannonFireEffect; // 0x118
	UObject* HealthIndicatorEffect; // 0x120
	UObject* DeathEffect; // 0x128
	FVector DeathEffectOffset; // 0x130
	FRotator DeathEffectRotation; // 0x13c
	float DeathEffectFadeDelay; // 0x148
	FWeightedProbabilityRangeOfRanges NearMissPlayerOffsetInMetres; // 0x150
	FWeightedProbabilityRangeOfRanges NearMissShipOffsetInMetres; // 0x180
	FWeightedProbabilityRangeOfRanges NearMissCannonRowboatOffsetInMetres; // 0x1b0
	FWeightedProbabilityRangeOfRanges NearMissMermaidStatueOffsetInMetres; // 0x1e0
	float RandomShipPositionScale; // 0x210
	FWeightedProbabilityRangeOfRanges TimeBetweenShipDamage; // 0x218
	FWeightedProbabilityRangeOfRanges FormationForwardOffsetVarianceSpeed; // 0x248
	FWeightedProbabilityRangeOfRanges FormationSidewaysOffsetVarianceSpeed; // 0x278
	ALaunchableProjectile* WraithballProjectileType; // 0x2a8
};

struct UFindNamedPointAsVectorStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UGridPanel {
	TArray<float> ColumnFill; // 0x150
	TArray<float> RowFill; // 0x160
};

struct UCookableComponent {
	UItemDesc* NextCookState; // 0xe8
	float TimeToNextCookState; // 0xf0
	TArray<FCookableComponentSmokeFeedbackTimingEntry> SmokeFeedbackLevels; // 0xf8
	UCurveFloat* VisibleCookedExtentOverTime; // 0x108
	float DefaultVisibleCookedExtent; // 0x110
	FName CookableTypeName; // 0x114
	ECookingState CookingState; // 0x11c
};

struct ULineBatchComponent {
	float MinDrawDistance; // 0x2b8
	float LDMaxDrawDistance; // 0x2c0
	float CachedMaxDrawDistance; // 0x2c4
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2c8
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2c9
	char bAlwaysCreatePhysicsState : 1; // 0x2cc
	char bGenerateOverlapEvents : 1; // 0x2cc
	char bMultiBodyOverlap : 1; // 0x2cc
	char bCheckAsyncSceneOnMove : 1; // 0x2cc
	char bTraceComplexOnMove : 1; // 0x2cc
	char bReturnMaterialOnMove : 1; // 0x2cc
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2cc
	char bAllowCullDistanceVolume : 1; // 0x2cc
	char bHasMotionBlurVelocityMeshes : 1; // 0x2cd
	char bRenderInMainPass : 1; // 0x2cd
	char bRenderInCustomPrePass : 1; // 0x2cd
	char bReflected : 1; // 0x2cd
	char bReflectedOnLowQuality : 1; // 0x2cd
	char bFFTWaterMask : 1; // 0x2cd
	char bVolumeFogMask : 1; // 0x2cd
	char bAffectsFlatWater : 1; // 0x2ce
	char bGPUParticlesKillPlane : 1; // 0x2ce
	char bDontCull : 1; // 0x2ce
	char bDontSizeOnScreenCull : 1; // 0x2ce
	float OverriddenShadowMinTexelSize; // 0x2d0
	bool bOverrideShadowMinSizeCulling; // 0x2d4
	bool bOverrideShadowCascadesExclusion; // 0x2d5
	EExcludeFromCascades ExcludedShadowCascades; // 0x2d6
	char bReceivesDecals : 1; // 0x2d8
	char bOwnerNoSee : 1; // 0x2d8
	char bOnlyOwnerSee : 1; // 0x2d8
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d8
	char bIsACloud : 1; // 0x2d8
	char bUseAsOccluder : 1; // 0x2d8
	char bSelectable : 1; // 0x2d8
	char bForceMipStreaming : 1; // 0x2d8
	char bHasPerInstanceHitProxies : 1; // 0x2d9
	char CastShadow : 1; // 0x2d9
	char bAffectDynamicIndirectLighting : 1; // 0x2d9
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x2d9
	char bAffectDistanceFieldLighting : 1; // 0x2d9
	char bCastDynamicShadow : 1; // 0x2d9
	char bCastStaticShadow : 1; // 0x2d9
	char bCastVolumetricTranslucentShadow : 1; // 0x2d9
	char bSelfShadowOnly : 1; // 0x2da
	char bCastFarShadow : 1; // 0x2da
	char bCastInsetShadow : 1; // 0x2da
	char bCastCinematicShadow : 1; // 0x2da
	char bCastHiddenShadow : 1; // 0x2da
	char bCastShadowAsTwoSided : 1; // 0x2da
	char bCastShadowOnLowQuality : 1; // 0x2da
	char bLightAsIfStatic : 1; // 0x2da
	char bLightAttachmentsAsGroup : 1; // 0x2db
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2dc
	bool bHasCachedStaticLighting; // 0x2dd
	bool bStaticLightingBuildEnqueued; // 0x2de
	char bIgnoreRadialImpulse : 1; // 0x2e0
	char bIgnoreRadialForce : 1; // 0x2e0
	char AlwaysLoadOnClient : 1; // 0x2e0
	char AlwaysLoadOnServer : 1; // 0x2e0
	char bUseEditorCompositing : 1; // 0x2e0
	char bRenderCustomDepth : 1; // 0x2e0
	char bAllowVelocityInMaterial : 1; // 0x2e0
	int32_t CustomDepthStencilValue; // 0x2e4
	int32_t TranslucencySortPriority; // 0x2e8
	int32_t VisibilityId; // 0x2ec
	float LpvBiasMultiplier; // 0x2f4
	float FarCascadeLPVBiasMultiplier; // 0x2f8
	float LpvIntensityMultiplier; // 0x2fc
	FCustomPrimitiveData CustomPrimitiveData; // 0x300
	FBodyInstance BodyInstance; // 0x310
	char bAffectRain : 1; // 0x490
	char bCanEverAffectNavigation : 1; // 0x490
	char bSkipRenderingInOuterLPVCascades : 1; // 0x490
	char bEnableMergeCollisionComponents : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerUnderwater : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerUnderwater : 1; // 0x491
	char bCanRenderAboveAndBelowWaterAtSameTime : 1; // 0x491
	float BoundsScale; // 0x498
	float OcclusionBoundsScale; // 0x49c
	float LastRenderTime; // 0x4a0
	bool bGPUVisibility; // 0x4a4
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x4a5
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x4a6
	FScriptMulticastDelegate OnComponentHit; // 0x4f0
	FScriptMulticastDelegate OnComponentBeginOverlap; // 0x4f1
	FScriptMulticastDelegate OnComponentEndOverlap; // 0x4f2
	FScriptMulticastDelegate OnComponentWake; // 0x4f3
	FScriptMulticastDelegate OnComponentSleep; // 0x4f4
	UPrimitiveComponent* LODParentPrimitive; // 0x528
	FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x530
	UPrimitiveComponent* MergedCollisionComponentParent; // 0x580
};

struct UBlockInteractEffect {
	AActor* OwningActor; // 0x28
	EInteractableState TargetInteractableState; // 0x30
};

struct UAITask_MoveTo {
	FScriptMulticastDelegate OnRequestFailed; // 0x60
	FScriptMulticastDelegate OnMoveFinished; // 0x70
	FVector MoveGoalLocation; // 0x80
	AActor* MoveGoalActor; // 0x98
	float MoveAcceptanceRadius; // 0xa0
	bool bShouldStopOnOverlap; // 0xa4
	bool bShouldAcceptPartialPath; // 0xa5
	bool bShouldUsePathfinding; // 0xa6
};

struct UWaterModifierZoneComponent {
	FWaterModifierZoneParameters WaterModifierZoneParameters; // 0x2b8
	bool RegisterOnBegin; // 0x330
};

struct UBTTask_GetCurrentHealth {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct AShipCompass {
	UPoseableMeshComponent* CompassMesh; // 0x3d0
	FName DialBoneName; // 0x3d8
	UCompassSpinComponent* SpinComponent; // 0x3e0
};

struct UMapTextureRenderResource {
	FStringAssetReference Texture; // 0x28
};

struct UNavArea_Null {
	float DefaultCost; // 0x28
	float FixedAreaEnteringCost; // 0x2c
	FColor DrawColor; // 0x30
	FNavAgentSelector SupportedAgents; // 0x34
	char bSupportsAgent0 : 1; // 0x38
	char bSupportsAgent1 : 1; // 0x38
	char bSupportsAgent2 : 1; // 0x38
	char bSupportsAgent3 : 1; // 0x38
	char bSupportsAgent4 : 1; // 0x38
	char bSupportsAgent5 : 1; // 0x38
	char bSupportsAgent6 : 1; // 0x38
	char bSupportsAgent7 : 1; // 0x38
	char bSupportsAgent8 : 1; // 0x39
	char bSupportsAgent9 : 1; // 0x39
	char bSupportsAgent10 : 1; // 0x39
	char bSupportsAgent11 : 1; // 0x39
	char bSupportsAgent12 : 1; // 0x39
	char bSupportsAgent13 : 1; // 0x39
	char bSupportsAgent14 : 1; // 0x39
	char bSupportsAgent15 : 1; // 0x39
};

struct AStormEffectsExclusionTriggerVolume {
	UCapsuleComponent* TriggerVolume; // 0x3d0
};

struct UCompanyLevelDataList {
	TArray<UCompanyLevelData*> CompanyLevelData; // 0x28
};

struct ADestroyableMechanismTrigger {
	UHealthComponent* HealthComponent; // 0x3d0
	UOptInDamageableComponent* DamageableComponent; // 0x3d8
	UMechanismTriggerComponent* MechanismTriggerComponent; // 0x3e0
	float TriggerMechanismAtOrBelowHealthValue; // 0x3e8
};

struct ASuperheatedWater {
	USuperheatedWaterSetupDataAsset* SetupData; // 0x480
	UCapsuleComponent* HitDetectionVolume; // 0x488
	float FakeUnderwaterLocationsMinDistanceInMetres; // 0x490
	float FakeUnderwaterLocationsDistanceBetweenPointsInMetres; // 0x494
	TArray<TWeakObjectPtr<AAthenaPlayerCharacter>> PlayersInZone; // 0x498
};

struct UChecklistMapLayout {
	FTreasureMapWidgetText Title; // 0x28
	FTreasureMapWidgetText Description; // 0x48
	TArray<FChecklistMapLayoutItem> Items; // 0x68
	FTreasureMapWidgetText Afternote; // 0x78
};

struct ULightIntensityBlend {
	FActorComponentSelector Component; // 0x38
	float Inactive; // 0x48
	float Active; // 0x4c
};

struct AShipwreck {
	USceneComponent* MeshParentComponent; // 0x3e8
	UPrimitiveComponent* RevealTriggerVolume; // 0x3f0
	UCalmWaterComponent* CalmZone; // 0x3f8
	FText LocalisedName; // 0x400
	float DistanceThresholdToConsiderPlayerAsBeingNearShipwreckForTelemetry; // 0x438
	float ServerMigrationPointOfInterestDistance; // 0x43c
	ANetProxy* ProxyClass; // 0x440
	bool ShouldDisableMigrationForSpawnItemsUntilPickedUp; // 0x448
	FEncounterParams SightingEncounterParams; // 0x468
	FEncounterParams CloseEncounterParams; // 0x474
};

struct UReplicatedShipPartCustomizationComponent {
	FPartDesc PartDesc; // 0xc8
};

struct UTaleQuestGenerateClueSiteOnIslandStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AEarthquake {
	UEarthquakeSetupDataAsset* EarthquakeSetupData; // 0x3e0
	AVolcano* AssociatedVolcano; // 0x3e8
	AGeyserManager* AssociatedGeyserManager; // 0x3f0
	float EarthquakeEffectInnerRadiusOffsetInMetres; // 0x3f8
	UWwiseObjectPoolWrapper* AudioPool; // 0x400
	UWwiseEvent* PlayEarthquakeLarge; // 0x408
	UWwiseEvent* StopEarthquakeLarge; // 0x410
	UWwiseEvent* PlayEarthquakeSmall; // 0x418
	UWwiseEvent* StopEarthquakeSmall; // 0x420
	FName EarthquakeRtpcName; // 0x428
	float EarthquakeRtpcMin; // 0x430
	float EarthquakeRtpcMax; // 0x434
	float EarthquakeSizeToUseLargeAttenuation; // 0x438
	UCapsuleComponent* HitDetectionVolume; // 0x440
	UWindZoneComponent* WindZone; // 0x448
	EEarthquakeState EarthquakeState; // 0x450
};

struct UTaleQuestAnyStep {
	TArray<UTaleQuestStep*> Steps; // 0x98
	UTaleQuestParallelStepDesc* Desc; // 0xa8
};

struct UVoyageParticipantComponent {
	AActor* OwningPlayer; // 0x170
	FVoyageParticipantViewContainer ViewContainer; // 0x178
	FVoyageParticipantViewContainer PreviousViewContainer; // 0x240
};

struct AShopkeeper {
	FGuid Id; // 0x4c8
	UInteractableGrammaticalGenderComponent* InteractableGrammaticalGenderComponent; // 0x4d8
	UCosmeticItemAnimationComponent* CosmeticItemAnimationComponent; // 0x4e0
	UBeckonComponent* BeckonComponent; // 0x4e8
};

struct UActorSpawnData {
	UClass* ActorClass; // 0x58
};

struct UStartSuppressingCutsceneResponsesStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UCoherentUIGTAtlasComponent {
	UCanvas* CurrentCanvas; // 0x388
};

struct ADefaultPhysicsVolume {
	float TerminalVelocity; // 0x408
	int32_t Priority; // 0x40c
	float FluidFriction; // 0x410
	char bWaterVolume : 1; // 0x414
	char bPhysicsOnContact : 1; // 0x414
};

struct ANavigationGraph {
	UPrimitiveComponent* RenderingComp; // 0x3d0
	FNavDataConfig NavDataConfig; // 0x3d8
	char bEnableDrawing : 1; // 0x430
	char bRebuildAtRuntime : 1; // 0x430
	ERuntimeGenerationType RuntimeGeneration; // 0x434
	char bForceRebuildOnLoad : 1; // 0x438
	float ObservedPathsTickInterval; // 0x43c
	TArray<FSupportedAreaData> SupportedAreas; // 0x528
};

struct UCookingComponentAudioParams {
	UWwiseObjectPoolWrapper* CookingPool; // 0x28
	FVector EmitterOffsetVector; // 0x30
	UWwiseEvent* FoodPlaceInPot; // 0x40
	UWwiseEvent* CookingStart; // 0x48
	UWwiseEvent* CookingStop; // 0x50
	FName CookingTypeSwitchGroup; // 0x58
	FName CookingTypeSizzle; // 0x60
	FName CookingTypeSimmer; // 0x68
	FName FoodTypeSwitchGroup; // 0x70
	FName FoodTypeFruit; // 0x78
	FName FoodTypeMeat; // 0x80
	FName FoodTypeRareMeat; // 0x88
	FName FoodCookedAmount; // 0x90
	float MaxCookingRtpcAmount; // 0x98
};

struct UStorageContainerSpawnerWeightedItemList {
	TArray<FStorageContainerWeightedItemListEntry> Entries; // 0x28
};

struct UBTService_SetAIStrategy {
	UAIStrategyId* NewStrategy; // 0x70
};

struct UAnimNotify_CutSceneSubtitle {
	bool PlayedWithSequencer; // 0x28
};

struct UMeleeSpinAIAbility {
	FMeleeAIAbilityAngleChecker AngleChecker; // 0x78
};

struct UStatusResponseSetAICharacterMoveSpeedModifier {
	EAICharacterMaxSpeedModificationReason Reason; // 0x30
	float Multiplier; // 0x34
};

struct UAthenaAnimationPulleyDataAsset {
	UAnimSequence* Entry; // 0x28
	FAthenaAnimationPulleyDataAssetEntry Left; // 0x30
	FAthenaAnimationPulleyDataAssetEntry Right; // 0x50
};

struct UAvailableFishForSpawning {
	TArray<UFishSpawnParamsDataAsset*> AvailableFishToSelectForSpawning; // 0x28
};

struct UAIPerceptionSystem {
	TArray<UAISense*> Senses; // 0x80
	float PerceptionAgingRate; // 0x90
};

struct USittingInputComponent {
	UAthenaSpringArmComponentParams* ThirdPersonCameraParams; // 0x280
	USeatAnimationId* SeatAnimationId; // 0x288
};

struct UItemBuriedHistoryMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct ULandmarkFrameworkSettings {
	float LandmarkAudioZoneRadius; // 0x38
	float LandmarkAudioZoneHeight; // 0x3c
};

struct UGetVeilOfTheAncientsStepDesc {
	FQuestVariableActor QuestVeil; // 0x80
};

struct UTaleReleaseSpireStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UStatusResponseSetBlackboardClassKey {
	FName BlackboardClassKeyName; // 0x30
	UObject* ValueWhenActive; // 0x38
	bool SetValueOnDeactivate; // 0x40
	UObject* ValueWhenDeactivated; // 0x48
};

struct UNPCDialogOptionDialogSelect {
	FText Text; // 0x80
	int32_t LinkedDialog; // 0xb8
};

struct UDiggingSettings {
	UBuriedItemDecal* BuriedDecalClass; // 0x38
	int32_t MaxNumVisibleDecals; // 0x40
	float DecalReplicationDistance; // 0x44
	float FullyBuriedItemDestroyDelay; // 0x48
	FName DirtinessParameterName; // 0x4c
	float UpdateDirtynessDelayOnBury; // 0x54
};

struct UMerchantMapLayout {
	FTreasureMapWidgetText PickupLocation; // 0x28
	FTreasureMapWidgetText DeliveryLocation; // 0x48
	FTreasureMapWidgetText DeliverByTime; // 0x68
	TArray<FMerchantMapLayoutItem> Items; // 0x88
	TArray<FTreasureMapWidgetTexture> Images; // 0x98
	TArray<FTreasureMapWidgetLocalisedText> GeneralText; // 0xa8
};

struct UTaleRemoveStormAvoidanceAreaStepDesc {
	FQuestVariableVector Location; // 0x80
};

struct URadialManagerInputBinder {
	UInputComponent* InputComponent; // 0x28
};

struct UChainLightningVisualActorSettingsAsset {
	UStaticMesh* MeshAsset; // 0x28
	UMaterialInterface* MaterialAsset; // 0x30
	UWwiseEvent* ChainLightningCreatedOneShot; // 0x38
	UWwiseObjectPoolWrapper* ChainLightningVisualActorPool; // 0x40
	UObject* PropogationVfx; // 0x48
};

struct APostProcessVolume {
	FPostProcessSettings Settings; // 0x410
	float Priority; // 0x950
	float BlendRadius; // 0x954
	float BlendWeight; // 0x958
	char bEnabled : 1; // 0x95c
	char bUnbound : 1; // 0x95c
};

struct USoundNodeWaveParam {
	FName WaveParameterName; // 0x38
};

struct UTaleQuestBranchStepDesc {
	FQuestVariableBool Condition; // 0x80
	UTaleQuestStepDesc* IfCondition; // 0x90
	UTaleQuestStepDesc* ElseCondition; // 0x98
};

struct USeatStat {
	FPlayerStat Stat; // 0x28
};

struct UPawnSensingComponent {
	float HearingThreshold; // 0xc8
	float LOSHearingThreshold; // 0xcc
	float SightRadius; // 0xd0
	float SensingInterval; // 0xd4
	float HearingMaxSoundAge; // 0xd8
	char bEnableSensingUpdates : 1; // 0xdc
	char bOnlySensePlayers : 1; // 0xdc
	char bSeePawns : 1; // 0xdc
	char bHearNoises : 1; // 0xdc
	FScriptMulticastDelegate OnSeePawn; // 0xe8
	FScriptMulticastDelegate OnHearNoise; // 0xf8
	float PeripheralVisionAngle; // 0x108
	float PeripheralVisionCosine; // 0x10c
};

struct ASharedObjectReplicationService {
	TMap<UObject*, int32_t> ReplicatedObjects; // 0x3d8
	TArray<UObject*> RepArray; // 0x428
};

struct UCheckBoxWidgetStyle {
	FCheckBoxStyle CheckBoxStyle; // 0x30
};

struct ATriggerSphere {
	UShapeComponent* CollisionComponent; // 0x3d0
	UBillboardComponent* SpriteComponent; // 0x3d8
};

struct UMaterialExpressionScalarParameter {
	float DefaultValue; // 0x90
	float SliderMin; // 0x94
	float SliderMax; // 0x98
	bool bUseCustomPrimitiveData; // 0x9c
	char PrimitiveDataIndex; // 0x9d
};

struct UNavAreaMeta {
	float DefaultCost; // 0x28
	float FixedAreaEnteringCost; // 0x2c
	FColor DrawColor; // 0x30
	FNavAgentSelector SupportedAgents; // 0x34
	char bSupportsAgent0 : 1; // 0x38
	char bSupportsAgent1 : 1; // 0x38
	char bSupportsAgent2 : 1; // 0x38
	char bSupportsAgent3 : 1; // 0x38
	char bSupportsAgent4 : 1; // 0x38
	char bSupportsAgent5 : 1; // 0x38
	char bSupportsAgent6 : 1; // 0x38
	char bSupportsAgent7 : 1; // 0x38
	char bSupportsAgent8 : 1; // 0x39
	char bSupportsAgent9 : 1; // 0x39
	char bSupportsAgent10 : 1; // 0x39
	char bSupportsAgent11 : 1; // 0x39
	char bSupportsAgent12 : 1; // 0x39
	char bSupportsAgent13 : 1; // 0x39
	char bSupportsAgent14 : 1; // 0x39
	char bSupportsAgent15 : 1; // 0x39
};

struct UAthenaPlayerZonePenetrationTrackerComponent {
	EOverlapType OverlapType; // 0xd0
	float UpdateInterval; // 0xd4
	UShapeComponent* ShapeComponent; // 0xd8
	TArray<AAthenaPlayerCharacter*> PlayersInZone; // 0xe0
};

struct AContestTavernBanners {
	USceneComponent* SceneRootComponent; // 0x3d8
	UStaticMeshComponent* BannerMeshComponent; // 0x3e0
	int32_t BannerPosition; // 0x3e8
	TArray<UStaticMesh*> Meshes; // 0x3f0
	int32_t BannerBaseMaterialIndex; // 0x400
	float UnfoldTime; // 0x404
	float UnfoldDelay; // 0x408
	float MaxWindAmount; // 0x40c
	float WindBlendSpeed; // 0x410
	AActor* AssociatedRope; // 0x418
	UMaterialInstanceDynamic* MatInst; // 0x440
	UTexture2D* BannerTexture; // 0x448
	bool UnfoldBanners; // 0x450
	bool ShouldBeHidden; // 0x451
};

struct USoundNodeMature {
	TArray<USoundNode*> ChildNodes; // 0x28
};

struct ASpotLight {
	USpotLightComponent* SpotLightComponent; // 0x3e0
};

struct ACapstan {
	FCapstanParams Parameters; // 0x408
	float MaxReleaseAngle; // 0x41c
	float MaxReleaseHeight; // 0x420
	float MaxAngle; // 0x424
	bool StartRaised; // 0x428
	UControllableIntentCombinerComponent* IntentCombinerComponent; // 0x430
	USceneComponent* RootSceneComponent; // 0x438
	UStaticMeshComponent* MeshComponent; // 0x440
	UChildActorComponent* CapstanReleaseComponent; // 0x448
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x450
	TArray<ACapstanArm*> CapstanArms; // 0x458
	FCapstanAudioParams AudioParameters; // 0x468
	bool CanSpinInfinitely; // 0x4d0
	UShipDamageableComponent* CapstanDamageComponent; // 0x4e8
	float ChanceToDropTheAnchorOnDamage; // 0x4f0
	FVector ShipPartFireCellActorSpaceLocation; // 0x4f4
	FCapstanNetState NetState; // 0x538
	FWwiseEmitter CapstanEmitter; // 0x540
	UDamageableShipPartAudioParams* CapstanDamageLevelAudio; // 0x560
	UParticleSystem* CapstanDamageParticleSystem; // 0x568
	FObjectMessagingDispatcher EventDispatcher; // 0x570
	bool IsCursed; // 0x79a
	float CursedIntent; // 0x79c
};

struct UFuseComponentMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UClueSiteLootRestrictionsDataAsset {
	TArray<FClueSiteLootRestriction> ClueSiteLootRestrictions; // 0x28
};

struct UNullEntitlementDesc {
	FText Title; // 0x28
	FText Description; // 0x60
	FStringAssetReference IconPath; // 0x98
	FStringAssetReference IconInvPath; // 0xa8
	FStringAssetReference IconPrvPath; // 0xb8
	UCategoryBase* Category; // 0xc8
	UCompany* Company; // 0xd0
};

struct AStorageContainer {
	UStaticMeshComponent* Mesh; // 0x468
	UInteractableComponent* InteractionRegion; // 0x470
	ETrackedActorType TrackedActorType; // 0x48c
};

struct UBurrowAIAbility {
	TArray<FVector> LocationsToSpawnCrack; // 0x78
	FTimerHandle TimerHandleStartNextSpawnWave; // 0x88
	AActor* CachedTarget; // 0x90
	bool bExecuting; // 0x124
	bool bProcessingSpawnLocations; // 0x125
};

struct UMechanismInteractionComponent {
	bool UseSimpleAsComplex; // 0x5b0
	ECollisionShapeType ShapeType; // 0x5b1
	float SphereRadius; // 0x5b4
	FVector BoxExtent; // 0x5b8
	TArray<FAllowedInteractableTypes> AllowedInteractableTypes; // 0x5c8
	FScriptMulticastDelegate OnInitialiseComplexCollisionShapesDelegate; // 0x5d8
	FScriptMulticastDelegate OnRadiusCollisionOverlapBeginDelegate; // 0x5e8
	FScriptMulticastDelegate OnRadiusCollisionOverlapEndDelegate; // 0x5f8
	FScriptMulticastDelegate OnFirstActorEnteredRadiusCollisionDelegate; // 0x608
	FScriptMulticastDelegate OnLastActorLeftRadiusCollisionDelegate; // 0x618
	FScriptMulticastDelegate OnComplexCollisionOverlapBeginDelegate; // 0x628
	FScriptMulticastDelegate OnComplexCollisionOverlapEndDelegate; // 0x638
	TArray<UPrimitiveComponent*> ComplexCollisionShapes; // 0x648
};

struct UParticleLODLevel {
	int32_t Level; // 0x28
	char bEnabled : 1; // 0x2c
	UParticleModuleRequired* RequiredModule; // 0x30
	TArray<UParticleModule*> Modules; // 0x38
	UParticleModule* TypeDataModule; // 0x48
	UParticleModuleSpawn* SpawnModule; // 0x50
	UParticleModuleEventGenerator* EventGenerator; // 0x58
	TArray<UParticleModuleSpawnBase*> SpawningModules; // 0x60
	TArray<UParticleModule*> SpawnModules; // 0x70
	TArray<UParticleModule*> UpdateModules; // 0x80
	TArray<UParticleModuleOrbit*> OrbitModules; // 0x90
	TArray<UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xa0
	char ConvertedModules : 1; // 0xb0
	int32_t PeakActiveParticles; // 0xb4
};

struct URendererSettings {
	char bMobileHDR : 1; // 0x38
	uint32_t MobileNumDynamicPointLights; // 0x3c
	char bMobileDynamicPointLightsUseStaticBranch : 1; // 0x40
	char bOcclusionCulling : 1; // 0x40
	float MinScreenRadiusForLights; // 0x44
	float MinScreenRadiusForEarlyZPass; // 0x48
	float MinScreenRadiusForCSMdepth; // 0x4c
	char bPrecomputedVisibilityWarning : 1; // 0x50
	char bTextureStreaming : 1; // 0x50
	char bUseDXT5NormalMaps : 1; // 0x50
	char bAllowStaticLighting : 1; // 0x50
	char bUseNormalMapsForStaticLighting : 1; // 0x50
	char bGenerateMeshDistanceFields : 1; // 0x50
	char bGenerateLandscapeGIData : 1; // 0x50
	float TessellationAdaptivePixelsPerTriangle; // 0x54
	char bSeparateTranslucency : 1; // 0x58
	ETranslucentSortPolicy TranslucentSortPolicy; // 0x5c
	FVector TranslucentSortAxis; // 0x60
	ECustomDepthStencil CustomDepthStencil; // 0x6c
	char bDefaultFeatureBloom : 1; // 0x70
	char bDefaultFeatureAmbientOcclusion : 1; // 0x70
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x70
	char bDefaultFeatureAutoExposure : 1; // 0x70
	char bDefaultFeatureMotionBlur : 1; // 0x70
	char bDefaultFeatureLensFlare : 1; // 0x70
	EAntiAliasingMethodUI DefaultFeatureAntiAliasing; // 0x74
	EEarlyZPass EarlyZPass; // 0x75
	EEarlyZPass bDepthSort; // 0x76
	char bEarlyZPassMovable : 1; // 0x78
	char bDBuffer : 1; // 0x78
	EClearSceneOptions ClearSceneMethod; // 0x7c
	char bBasePassOutputsVelocity : 1; // 0x80
	float WireframeCullThreshold; // 0x84
	EUIScalingRule UIScaleRule; // 0x88
	FRuntimeFloatCurve UIScaleCurve; // 0x90
};

struct UMaterialParameterCollection {
	FGuid StateId; // 0x28
	TArray<FCollectionScalarParameter> ScalarParameters; // 0x38
	TArray<FCollectionVectorParameter> VectorParameters; // 0x48
};

struct UBTTask_SpawnAmmoItemForAI {
	UItemDesc* ItemDesc; // 0x68
};

struct AKrakenTentacle {
	UHealthComponent* HealthComponent; // 0x3f0
	UActorDamageableComponent* DamageableComponent; // 0x3f8
	UVenomComponent* VenomComponent; // 0x400
	float VenomChance; // 0x408
};

struct UEquipmentItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UTaleQuestShipwreckService {
	ACustomShipwreck* ActiveWreck; // 0x60
	UTaleQuestShipwreckServiceDesc* Desc; // 0x68
};

struct UParticleModuleLifetime_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x1c0
};

struct UReviveGhostAnimationDataAsset {
	FReviveGhostAnimations Animations; // 0x28
};

struct UParticleModuleAccelerationBase {
	char bAlwaysInWorldSpace : 1; // 0x50
};

struct UPanelWidget {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct UMaterialExpressionMin {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
	float ConstA; // 0xe0
	float ConstB; // 0xe4
};

struct UAICreatureCharacterPathFollowingComponent {
	float LandingAngle; // 0x2f0
	float HopDistanceScale; // 0x2f4
	float MaximumLandTime; // 0x2f8
	float MinStairAngle; // 0x2fc
	float MinStairVelocityDampen; // 0x300
	TArray<UAIStrategyId*> SubscribedStairClimbStrategies; // 0x308
};

struct UTaleSpireService {
	FScriptMulticastDelegate SpireMadeVisible; // 0x68
};

struct UCannonAnimInstance {
	bool CannonIsFiring; // 0x448
	float CannonFiringAnimBlend; // 0x44c
	float Pitch; // 0x450
	float YawRangeMapped; // 0x454
};

struct UEffectBlendObjectBase {
	float SubItemBlendRangeMin; // 0x28
	float SubItemBlendRangeMax; // 0x2c
};

struct ABP_FogBankManager_C {
	USceneComponent* DefaultSceneRoot; // 0x3d8
};

struct UAbilityTask_PlayMontageAndWait {
	FScriptMulticastDelegate OnComplete; // 0x68
	FScriptMulticastDelegate OnInterrupted; // 0x78
	FScriptMulticastDelegate OnCancelled; // 0x88
};

struct UParticleModuleCollisionBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UHasBeenBuriedByAPlayerConditional {
	UStatConditionTargetSelector* TargetSelector; // 0x28
};

struct UAnimNotify_PlayAnimationForCosmetic {
	EWieldAnimationLocation CosmeticLocation; // 0x38
	UAnimSequenceBase* CosmeticItemAnimation; // 0x40
	bool Looping; // 0x48
};

struct UPhysicsAsset {
	TArray<UBodySetup*> BodySetup; // 0x28
	TArray<int32_t> BoundsBodies; // 0x38
	TArray<UPhysicsConstraintTemplate*> ConstraintSetup; // 0x48
};

struct UMouseCursorBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UAbilityTask_WaitOverlap {
	FScriptMulticastDelegate OnOverlap; // 0x68
};

struct USpawnPhasedActorAtLocationStepDesc {
	FQuestVariableTransform Location; // 0xf0
};

struct UHudSettings {
	char bShowHUD : 1; // 0x28
	TArray<FName> DebugDisplay; // 0x30
};

struct UButtonSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct ACoherentUIGTGameHUD {
	UCoherentUIGTHUD* CoherentUIGTHUD; // 0x4c8
};

struct UBlockMigrationForCrewTaskStepDesc {
	UTaleQuestStepDesc* TaskDesc; // 0x80
	FName RemoteConfigKeyBlockServerMigration; // 0x88
	FString Reason; // 0x90
};

struct ASimpleBootyInteractiveItem {
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x798
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7a0
	UWwiseEvent* InteractionSfx; // 0x7a8
};

struct UClueDestinationGenerator {
	UClueSiteData* RequiredClueSiteDataType; // 0x28
	TArray<FWeightedClueDestinationDescriptor> WeightedSupportedDescriptorTypes; // 0x30
};

struct UAthenaCharacterKnockbackComponent {
	bool Disabled; // 0xd0
	AAthenaCharacter* Character; // 0xd8
};

struct UGameEventSchedulerSettingsAsset {
	TArray<FGameEventSettings> EventSettings; // 0x28
	TArray<FGameEventSchedulerConfiguration> Configs; // 0x38
	float InitialStartupTime; // 0x48
};

struct UNamedPointsCollectionDataAsset {
	TArray<FNamedPointsCollectionGroup> Groups; // 0x28
	TArray<ENamedPointCollectionSearchTag> AssetTags; // 0x38
};

struct UShipwreckAudioEmitterComponent {
	UWwiseEvent* WwiseEvent; // 0x2e0
};

struct USphereComponent {
	float SphereRadius; // 0x5a8
};

struct UEndTurnCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UCannonballItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UGameplayDebuggingControllerComponent {
	AGameplayDebuggingHUDComponent* OnDebugAIHUD; // 0xc8
	AActor* DebugAITargetActor; // 0xd0
	UInputComponent* AIDebugViewInputComponent; // 0xd8
	UInputComponent* DebugCameraInputComponent; // 0xe0
	FInputChord ActivationKey; // 0x110
	FInputChord CategoryZeroBind; // 0x138
	FInputChord CategoryOneBind; // 0x160
	FInputChord CategoryTwoBind; // 0x188
	FInputChord CategoryThreeBind; // 0x1b0
	FInputChord CategoryFourBind; // 0x1d8
	FInputChord CategoryFiveBind; // 0x200
	FInputChord CategorySixBind; // 0x228
	FInputChord CategorySevenBind; // 0x250
	FInputChord CategoryEightBind; // 0x278
	FInputChord CategoryNineBind; // 0x2a0
	FInputChord CycleDetailsViewBind; // 0x2c8
	FInputChord DebugCameraBind; // 0x2f0
	FInputChord OnScreenDebugMessagesBind; // 0x318
	FInputChord GameHUDBind; // 0x340
};

struct UMorphTarget {
	USkeletalMesh* BaseSkelMesh; // 0x28
};

struct AEmissaryLevelService {
	UEmissaryLevelSettingsAsset* Settings; // 0x470
	UEmissaryRewardSettingsAsset* RewardSettings; // 0x478
};

struct UCustomAnimationHandlerComponent {
	TArray<FStringAssetReference> CurrentCustomAnimationDataAssetReferences; // 0xd8
	FRequestedLoopAnims RequestedLoopingAnim; // 0xe8
	UAthenaAnimationCustomSkeletonAnimationData* MergedCustomAnimationData; // 0xf8
};

struct UDebugSkipToStepDesc {
	UTaleQuestStepDesc* NextDesc; // 0x80
	FString SkipName; // 0x88
};

struct UItemPreviewComponent {
	TWeakObjectPtr<UEntitlementDesc> RequestedItemDesc; // 0x100
	FStringAssetReference FallbackPreviewIconAsset; // 0x108
	UObject* RequiredPreviewObjectClass; // 0x118
	FName DefaultCamera; // 0x120
	AItemPreviewActor* ClassToSpawn; // 0x128
	FIntPoint DefaultResolution; // 0x130
	URenderToTextureSceneDetails* Details; // 0x138
	FStringAssetReference RequestedAssetReference; // 0x140
	FStringAssetReference ActiveAssetReference; // 0x150
	AActor* InteractionActor; // 0x160
	TWeakObjectPtr<UItemPreviewDataObject> DataLoadObject; // 0x168
	FItemPreviewView CurrentView; // 0x1d0
	TArray<FCategoryPreviewEntry> CategoryReplacementMap; // 0x288
};

struct UCrewOnlyWwwiseAudioComponent {
	UWwiseObjectPoolWrapper* SfxPool; // 0xc8
};

struct UMockAthenaPlayerCharacterMovementComponent {
	UCurveFloat* LandingSpeedToFallDamageCurve; // 0x800
	float MinFallSpeedToPossiblyCauseDamage; // 0x808
	float MinTimeBetweenDamagingImpactsOnUnwalkableSurface; // 0x80c
	float MinFallDamageToBreakLeg; // 0x810
	float FiredFromActorFallDamageScalar; // 0x814
	float TimeUntilRecoverFallDamageAudioState; // 0x818
	FStatus FallDamageLimpingStatus; // 0x820
	float SwimmingStateFilterTime; // 0x838
	float MaxSpeedToleranceForPreventingJumping; // 0x83c
};

struct ALandscape {
	ULandscapeSplinesComponent* SplineComponent; // 0x3d8
	FGuid LandscapeGuid; // 0x3e0
	FIntPoint LandscapeSectionOffset; // 0x3f0
	int32_t MaxLODLevel; // 0x3f8
	int32_t StaticLightingLOD; // 0x3fc
	UPhysicalMaterial* DefaultPhysMaterial; // 0x400
	float StreamingDistanceMultiplier; // 0x408
	UMaterialInterface* LandscapeMaterial; // 0x410
	UMaterialInterface* LandscapeHoleMaterial; // 0x418
	float LODDistanceFactor; // 0x420
	TArray<ULandscapeComponent*> LandscapeComponents; // 0x428
	TArray<ULandscapeHeightfieldCollisionComponent*> CollisionComponents; // 0x438
	TArray<UHierarchicalInstancedStaticMeshComponent*> FoliageComponents; // 0x448
	float StaticLightingResolution; // 0x4d0
	ALandscape* LandscapeActor; // 0x4d4
	char bCastStaticShadow : 1; // 0x4f0
	char bCastShadowAsTwoSided : 1; // 0x4f0
	char bAffectDynamicIndirectLighting : 1; // 0x4f0
	char bCastFarShadow : 1; // 0x4f0
	char bIsProxy : 1; // 0x4f0
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x4f0
	float LpvIntensityMultiplier; // 0x4f4
	float LpvBiasMultiplier; // 0x4f8
	float FarCascadeLPVBiasMultiplier; // 0x4fc
	FLightmassPrimitiveSettings LightmassSettings; // 0x500
	int32_t CollisionMipLevel; // 0x518
	float CollisionThickness; // 0x51c
	FBodyInstance BodyInstance; // 0x520
	int32_t ComponentSizeQuads; // 0x6a0
	int32_t SubsectionSizeQuads; // 0x6a4
	int32_t NumSubsections; // 0x6a8
	char bUsedForNavigation : 1; // 0x6ac
	char bReflected : 1; // 0x6ac
	ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x6b0
	ELandscapeLODFalloff LODFalloff; // 0x6b1
};

struct USkeletalMeshSocket {
	FName SocketName; // 0x28
	FName BoneName; // 0x30
	FVector RelativeLocation; // 0x38
	FRotator RelativeRotation; // 0x44
	FVector RelativeScale; // 0x50
	bool bForceAlwaysAnimated; // 0x5c
};

struct USoundNodeDoppler {
	float DopplerIntensity; // 0x38
};

struct UInputSettings {
	TArray<FInputAxisConfigEntry> AxisConfig; // 0x28
	char bAltEnterTogglesFullscreen : 1; // 0x38
	char bUseMouseForTouch : 1; // 0x38
	char bEnableMouseSmoothing : 1; // 0x38
	char bEnableFOVScaling : 1; // 0x38
	float FOVScale; // 0x3c
	float DoubleClickTime; // 0x40
	TArray<FInputActionKeyMapping> ActionMappings; // 0x48
	TArray<FInputAxisKeyMapping> AxisMappings; // 0x58
	TArray<FInputCombinedAxisKeyMapping> CombinedAxisMappings; // 0x68
	bool bAlwaysShowTouchInterface; // 0x78
	bool bShowConsoleOnFourFingerTap; // 0x79
	FStringAssetReference DefaultTouchInterface; // 0x80
	FKey ConsoleKey; // 0x90
	TArray<FKey> ConsoleKeys; // 0xb0
};

struct UMaterialExpressionFontSampleParameter {
	FName ParameterName; // 0x80
	FGuid ExpressionGUID; // 0x88
	FName Group; // 0x98
};

struct UBTService_ObserveTargetReceivedDamage {
	FBlackboardKeySelector ObservedActorKey; // 0x70
	FBlackboardKeySelector HasObservedActorReceivedSufficientDamageResultKey; // 0x98
	FAIDataProviderFloatValue ObservedActorDamageThreshold; // 0xc0
};

struct URiddleQuestDescGeneratorData {
	float TemporaryLandmarkRadius; // 0x28
	float TemporaryLandmarkHeight; // 0x2c
	TArray<FValidRiddleOptions> ValidRiddleOptions; // 0x30
	TArray<FRiddleActionInfo> RiddleActionInfo; // 0x40
	TArray<FText> CompassDirections; // 0x50
	FName NumPacesPhraseId; // 0x60
};

struct AVoyageGeneratorSim {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct URiddleQuestValidLocationGeneratorData {
	float PacesToCentimetres; // 0x28
	uint32_t MinNumPaces; // 0x2c
	uint32_t MaxNumPaces; // 0x30
	uint32_t MinNumPacesForNonVagueNonUniqueLandmark; // 0x34
	uint32_t MaxNumPacesForNonVagueNonUniqueLandmark; // 0x38
	float IsBlockedTestHeight; // 0x3c
	float CastDownOffset; // 0x40
	float CastDownLength; // 0x44
	float MaxAngleChangeBetweenPaces; // 0x48
	float CollisionTestCapsuleHalfHeight; // 0x4c
	float CollisionTestCapsuleRadius; // 0x50
	float CollisionTestYOffset; // 0x54
	ECollisionChannel HitTestTraceChannel; // 0x58
	float CardinalDirectionTolerance; // 0x5c
};

struct UTaleQuestEventStepDescBase {
	UObject* Dispatcher; // 0x80
	FNativeAndUserDefinedStructSelector EventType; // 0x88
	TMap<FName, FName> ArgumentMappings; // 0x90
};

struct UMultiLineEditableText {
	FText Text; // 0x138
	FTextBlockStyle WidgetStyle; // 0x170
	ETextJustify Justification; // 0x2d0
	bool bAutoWrapText; // 0x2d1
	float WrapTextAt; // 0x2d4
	FSlateFontInfo Font; // 0x2d8
	FScriptMulticastDelegate OnTextChanged; // 0x318
	FScriptMulticastDelegate OnTextCommitted; // 0x328
};

struct UBP_TornMap_Desc_C {
	char CanBeAddedToLoadout : 1; // 0xd8
	char IsTransient : 1; // 0xd8
	FString PreviousItem; // 0xe0
	FString NextItem; // 0xf0
	FStringAssetReference IconRadPath; // 0x100
	FStringClassReference InstanceClassType; // 0x110
	TArray<FItemInfoTogglePair> ItemInfoOverrides; // 0x120
};

struct UStaticStashedMeshMemoryConstraintComponent {
	UMeshMemoryConstraintHandler* Handler; // 0x608
	TArray<FStringAssetReference> FallbackOverrideMaterials; // 0x610
	UMeshMemoryConstraintCategory* MeshFallbackCategory; // 0x620
	FStringAssetReference MeshReference; // 0x628
	int64_t CachedMeshResourceSize; // 0x638
	bool MemoryAccountedFor; // 0x640
	bool NeedMeshLoadOnServer; // 0x641
	UMeshMemoryConstraintBudget* BudgetToCountMemoryAgainstIfNoFallback; // 0x648
};

struct USceneCaptureComponent2D {
	float FOVAngle; // 0x318
	UTextureRenderTarget2D* TextureTarget; // 0x320
	ESceneCaptureSource CaptureSource; // 0x328
	FPostProcessSettings PostProcessSettings; // 0x330
	float PostProcessBlendWeight; // 0x870
	float OrthoWidth; // 0x874
	float OrthoNearClipPlane; // 0x878
	float OrthoFarClipPlane; // 0x87c
	ECameraProjectionMode ProjectionMode; // 0x880
	float AspectRatio; // 0x884
	char bConstrainAspectRatio : 1; // 0x888
	int32_t LandscapeLODOverride; // 0x88c
};

struct UMaterialExpressionComment {
	int32_t SizeX; // 0x70
	int32_t SizeY; // 0x74
	FString Text; // 0x78
	FLinearColor CommentColor; // 0x88
};

struct UNavigationPath {
	FScriptMulticastDelegate PathUpdatedNotifier; // 0x28
	TArray<FVector> PathPoints; // 0x38
	ENavigationOptionFlag RecalculateOnInvalidation; // 0x48
};

struct UEnvQueryTest_FacingAwayFromActor {
	UEnvQueryContext* CentreContext; // 0x170
	UEnvQueryContext* ActorContext; // 0x178
	EConeWeightingMethod ConeType; // 0x180
	FAIDataProviderFloatValue ConeThreshold; // 0x188
	FAIDataProviderFloatValue DistanceFromQuerierToValidBandOfPoints; // 0x1b8
	bool UseOriginAsThreat; // 0x1e8
	FAIDataProviderFloatValue AngleBias; // 0x1f0
};

struct ARenderToTextureMapBase {
	TArray<FMapTextureRenderData> RenderData; // 0x7d8
	TArray<UTexture*> MapTextures; // 0x7e8
	int32_t CanvasWidth; // 0x7f8
	int32_t CanvasHeight; // 0x7fc
};

struct UItemLifetimeManagerServiceDataAsset {
	TArray<UItemCapForAssets*> ItemCaps; // 0x28
};

struct ATreasureChestItemProxy {
	UWwiseEvent* ShovelEnterSurfaceSfx; // 0x7c8
	UWwiseEvent* ExhumeStepSfx; // 0x7d0
	UWwiseEvent* FullyDugUpSfx; // 0x7d8
	UWwiseObjectPoolWrapper* ChestAmbiencePool; // 0x7e0
	UWwiseEvent* ChestAmbiencePlay; // 0x7e8
	UWwiseEvent* ChestAmbienceStop; // 0x7f0
	UDitherComponent* DitherComponent; // 0x7f8
	FEncounterParams CloseProximityEncounterParams; // 0x800
	UItemDiggingAudioConfig* CachedAudioConfig; // 0x810
};

struct UIsBootyItemSpawnSourceStatCondition {
	ESpawnedItemSource TargetSpawnSource; // 0x30
};

struct ACollectorsChestItemInfo {
	FRewardId GoldInContainerRewardId; // 0x718
	UGoldInContainerDataAsset* GoldInContainerDataAsset; // 0x738
	UCollectorsChestSharedParamsDataAsset* CollectorsChestSharedParams; // 0x740
	UQuestBookPagesInContainerDataAsset* PagesInContainerDataAsset; // 0x748
	TArray<ULayerInContainerComponent*> CurrentLayerPriorityOrder; // 0x750
	ECollectorsChestMaterial Material; // 0x760
	TArray<AItemInfo*> ItemInfosToStore; // 0x770
	UCollectorsChestShipOwnershipPropagationComponent* CollectorsChestShipOwnershipPropagationComponent; // 0x780
};

struct UPlayGroupNpcAnimationStepDesc {
	FQuestVariableActor TargetNpc1; // 0xb8
	FQuestVariableActor TargetNpc2; // 0xc8
	FQuestVariableActor TargetNpc3; // 0xd8
	TArray<FText> SpeakingActorLocalisableNames; // 0xe8
};

struct UContestCeremonyEventsDataAsset {
	TArray<FContestEventSet> ContestEvents; // 0x28
};

struct ADebugCrewService {
	TArray<FCrew> Crews; // 0x4a8
};

struct UStorageContainerSpawnerCount {
	FWeightedProbabilityRange NumSpawners; // 0x28
	int32_t MinDifferentSpawners; // 0x48
	int32_t MaxDifferentSpawners; // 0x4c
};

struct URammerComponent {
	UDamagerType* DamagerType; // 0xd0
	URammerType* RammerType; // 0xd8
	TScriptInterface<Class> OwnerMovement; // 0xe0
};

struct UPetCustomizationDesc {
	TArray<FPetCustomizationPartMapping> PetPartMapping; // 0xd8
	UPetEntitlementCategory* RelatedPetEntitlementCategory; // 0xe8
	UClass* CustomizationPetClass; // 0xf0
};

struct UAddMarkToTornMapStep {
	UMapMarkId* MapMark; // 0xb0
};

struct UMaterialExpressionSceneTexture {
	FExpressionInput Coordinates; // 0x70
	ESceneTextureId SceneTextureId; // 0xa8
	bool bClampUVs; // 0xa9
	bool bFiltered; // 0xaa
};

struct UObjectReferencer {
	TArray<UObject*> ReferencedObjects; // 0x28
};

struct ABuriedTreasureLocation {
	USphereComponent* BaseComponent; // 0x3d0
	TArray<UPhysicalMaterial*> DiggableSurfaceTypes; // 0x3d8
	bool StopVerification; // 0x3e8
};

struct UGlintComponentDataAsset {
	TArray<EGlintCondition> ToggleConditions; // 0x28
	bool VisibleByDefault; // 0x38
};

struct UNPCDialogPredicateIsWearingAny {
	TArray<UClothingDesc*> ClothingItems; // 0x38
};

struct ASpyglass {
	UInventoryItemComponent* InventoryItem; // 0x7a0
	UNamedNotificationInputComponent* NamedNotificationInputComponent; // 0x7a8
	UUsableWieldableComponent* UsableWieldableComponent; // 0x7b0
	UAimSensitivityComponent* AimSensitivityComponent; // 0x7b8
	float NameplateVisibilityRangeExtensionFactorWhileZoomed; // 0x7d0
	float SecondsUntilZoomStarts; // 0x7d4
	float SecondsUntilPostStarts; // 0x7d8
	float InAimFOV; // 0x7dc
	float BlendSpeed; // 0x7e0
	FItemUseSpeedParams AimSpeedScaleParameters; // 0x7e4
	UPostProcessComponent* PostProcessComponent; // 0x7f0
	UCurveFloat* BlurCurve; // 0x7f8
	UMaterialInstanceDynamic* DynamicMaterial; // 0x838
	bool TurningOn; // 0x840
	float BlurTime; // 0x844
	float BlurInDuration; // 0x848
	float BlurOutDuration; // 0x84c
	UStaticMeshComponent* Glint; // 0x850
	UMaterial* MaterialParent; // 0x858
	UTexture2D* LensNormal; // 0x860
	UTexture2D* LensMask; // 0x868
	FLinearColor LensTint; // 0x870
};

struct UEnvQuery {
	TArray<UEnvQueryOption*> Options; // 0x28
};

struct URunUnitTestsCommandlet {
	FString HelpDescription; // 0x28
	FString HelpUsage; // 0x38
	FString HelpWebLink; // 0x48
	TArray<FString> HelpParamNames; // 0x58
	TArray<FString> HelpParamDescriptions; // 0x68
	char IsServer : 1; // 0x78
	char IsClient : 1; // 0x78
	char IsEditor : 1; // 0x78
	char LogToConsole : 1; // 0x78
	char ShowErrorCount : 1; // 0x78
};

struct URemoveNPCOnSurfaceStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UWoodPlankItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct USoundNodeDialoguePlayer {
	FDialogueWaveParameter DialogueWaveParameter; // 0x38
	char bLooping : 1; // 0x58
};

struct UPremiumCatalogCardsDataAsset {
	FText PageTitle; // 0x108
	FStringAssetReference PageIcon; // 0x140
	TArray<UPremiumCatalogItemSetDataAsset*> Cards; // 0x150
};

struct UNPCDialogPredicateHasEntitlement {
	UEntitlementDesc* Entitlement; // 0x38
};

struct ARecastNavMesh {
	char bDrawTriangleEdges : 1; // 0x590
	char bDrawPolyEdges : 1; // 0x590
	char bDrawFilledPolys : 1; // 0x590
	char bDrawNavMeshEdges : 1; // 0x590
	char bDrawTileBounds : 1; // 0x590
	char bDrawPathCollidingGeometry : 1; // 0x590
	char bDrawTileLabels : 1; // 0x590
	char bDrawPolygonLabels : 1; // 0x590
	char bDrawDefaultPolygonCost : 1; // 0x591
	char bDrawLabelsOnPathNodes : 1; // 0x591
	char bDrawNavLinks : 1; // 0x591
	char bDrawFailedNavLinks : 1; // 0x591
	char bDrawClusters : 1; // 0x591
	char bDrawOctree : 1; // 0x591
	char bDistinctlyDrawTilesBeingBuilt : 1; // 0x591
	char bDrawNavMesh : 1; // 0x591
	float DrawOffset; // 0x594
	float BuiltTileSizeUU; // 0x598
	float BuiltCellSize; // 0x59c
	char bFixedTilePoolSize : 1; // 0x5a0
	int32_t TilePoolSize; // 0x5a4
	float TileSizeUU; // 0x5a8
	float CellSize; // 0x5ac
	float CellHeight; // 0x5b0
	float AgentRadius; // 0x5b4
	float AgentHeight; // 0x5b8
	float AgentMaxHeight; // 0x5bc
	float AgentMaxSlope; // 0x5c0
	float AgentMaxStepHeight; // 0x5c4
	float MinRegionArea; // 0x5c8
	float MergeRegionSize; // 0x5cc
	float MaxSimplificationError; // 0x5d0
	int32_t MaxSimultaneousTileGenerationJobsCount; // 0x5d4
	int32_t TileNumberHardLimit; // 0x5d8
	int32_t PolyRefTileBits; // 0x5dc
	int32_t PolyRefNavPolyBits; // 0x5e0
	int32_t PolyRefSaltBits; // 0x5e4
	float DefaultDrawDistance; // 0x5e8
	float DefaultMaxSearchNodes; // 0x5ec
	float DefaultMaxHierarchicalSearchNodes; // 0x5f0
	ERecastPartitioning RegionPartitioning; // 0x5f4
	ERecastPartitioning LayerPartitioning; // 0x5f5
	int32_t RegionChunkSplits; // 0x5f8
	int32_t LayerChunkSplits; // 0x5fc
	char bSortNavigationAreasByCost : 1; // 0x600
	char bPerformVoxelFiltering : 1; // 0x600
	char bMarkLowHeightAreas : 1; // 0x600
	char bDoFullyAsyncNavDataGathering : 1; // 0x600
	char bUseBetterOffsetsFromCorners : 1; // 0x600
	char bUseVirtualFilters : 1; // 0x600
	char bUseVoxelCache : 1; // 0x600
	float TileSetUpdateInterval; // 0x604
	float HeuristicScale; // 0x608
	float VerticalDeviationFromGroundCompensation; // 0x60c
};

struct UWidgetSwitcherSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UInterpTrackInstAnimControl {
	float LastUpdatePosition; // 0x28
};

struct APlaneReflectionCapture {
	UReflectionCaptureComponent* CaptureComponent; // 0x3d0
};

struct USoundMix {
	char bApplyEQ : 1; // 0x28
	float EQPriority; // 0x2c
	FAudioEQEffect EQSettings; // 0x30
	TArray<FSoundClassAdjuster> SoundClassEffects; // 0x58
	float InitialDelay; // 0x68
	float FadeInTime; // 0x6c
	float Duration; // 0x70
	float FadeOutTime; // 0x74
};

struct UDebugFlyingInputComponent {
	UItemCategory* ThrowablesItemCategory; // 0x2d8
};

struct UWheelMechanismTriggerComponent {
	AWheel* ParentWheel; // 0x168
};

struct UAtmosphericPressureZoneComponent {
	FAtmosphericPressureZoneParameters PressureZoneParameters; // 0x2b8
};

struct APuzzleKeyedInstrument {
	bool DockedPlayerIsOnTale; // 0x5e8
	USequenceComponent* SequenceComponent; // 0x5f0
	UStaticMeshComponent* SheetMusicMeshComponent; // 0x5f8
	bool ShouldShowSheetMusic; // 0x600
	TArray<FText> TaleNames; // 0x608
};

struct UMechanismAnimationCurve_Float {
	FRuntimeFloatCurve Curve; // 0x58
};

struct USeatAnimationId {
	FVector CharacterOffset; // 0x28
	float ThirdPersonCameraVerticalOffsetFactorWhenZoomed; // 0x34
	FTransform CharacterProjectileTraceHitVolumeOffset; // 0x40
};

struct UFoliageType {
	FGuid UpdateGuid; // 0x28
	float Density; // 0x38
	float DensityAdjustmentFactor; // 0x3c
	float Radius; // 0x40
	EFoliageScaling Scaling; // 0x44
	FFloatInterval ScaleX; // 0x48
	FFloatInterval ScaleY; // 0x50
	FFloatInterval ScaleZ; // 0x58
	FoliageVertexColorMask VertexColorMask; // 0x60
	float VertexColorMaskThreshold; // 0x64
	char VertexColorMaskInvert : 1; // 0x68
	FFloatInterval ZOffset; // 0x6c
	char AlignToNormal : 1; // 0x74
	float AlignMaxAngle; // 0x78
	char RandomYaw : 1; // 0x7c
	float RandomPitchAngle; // 0x80
	FFloatInterval GroundSlopeAngle; // 0x84
	FFloatInterval Height; // 0x8c
	TArray<FName> LandscapeLayers; // 0x98
	FName LandscapeLayer; // 0xa8
	char CollisionWithWorld : 1; // 0xb0
	FVector CollisionScale; // 0xb4
	float MinimumLayerWeight; // 0xc0
	FBoxSphereBounds MeshBounds; // 0xc4
	FVector LowBoundOriginRadius; // 0xe0
	EComponentMobility Mobility; // 0xec
	FInt32Interval CullDistance; // 0xf0
	char bEnableStaticLighting : 1; // 0xf8
	char CastShadow : 1; // 0xf8
	char bAffectDynamicIndirectLighting : 1; // 0xf8
	char bAffectDistanceFieldLighting : 1; // 0xf8
	char bCastDynamicShadow : 1; // 0xf8
	char bCastStaticShadow : 1; // 0xf8
	char bCastShadowAsTwoSided : 1; // 0xf8
	char bReceivesDecals : 1; // 0xf8
	char bOverrideLightMapRes : 1; // 0xf9
	int32_t OverriddenLightMapRes; // 0xfc
	char bUseAsOccluder : 1; // 0x100
	FBodyInstance BodyInstance; // 0x108
	EHasCustomNavigableGeometry CustomNavigableGeometry; // 0x288
	uint64_t HiddenEditorViews; // 0x290
	char IsSelected : 1; // 0x298
	float CollisionRadius; // 0x29c
	float ShadeRadius; // 0x2a0
	int32_t NumSteps; // 0x2a4
	float InitialSeedDensity; // 0x2a8
	float AverageSpreadDistance; // 0x2ac
	float SpreadVariance; // 0x2b0
	int32_t SeedsPerStep; // 0x2b4
	int32_t DistributionSeed; // 0x2b8
	float MaxInitialSeedOffset; // 0x2bc
	bool bCanGrowInShade; // 0x2c0
	bool bSpawnsInShade; // 0x2c1
	float MaxInitialAge; // 0x2c4
	float MaxAge; // 0x2c8
	float OverlapPriority; // 0x2cc
	FFloatInterval ProceduralScale; // 0x2d0
	FRuntimeFloatCurve ScaleCurve; // 0x2d8
	int32_t ChangeCount; // 0x358
	char ReapplyDensity : 1; // 0x35c
	char ReapplyRadius : 1; // 0x35c
	char ReapplyAlignToNormal : 1; // 0x35c
	char ReapplyRandomYaw : 1; // 0x35c
	char ReapplyScaling : 1; // 0x35c
	char ReapplyScaleX : 1; // 0x35c
	char ReapplyScaleY : 1; // 0x35c
	char ReapplyScaleZ : 1; // 0x35c
	char ReapplyRandomPitchAngle : 1; // 0x35d
	char ReapplyGroundSlope : 1; // 0x35d
	char ReapplyHeight : 1; // 0x35d
	char ReapplyLandscapeLayers : 1; // 0x35d
	char ReapplyZOffset : 1; // 0x35d
	char ReapplyCollisionWithWorld : 1; // 0x35d
	char ReapplyVertexColorMask : 1; // 0x35d
};

struct UContestPlacedFinishStatCondition {
	FInt32Range ContestPlacesRange; // 0x28
};

struct UGameplayTagsSettings {
	TArray<FString> GameplayTags; // 0x28
};

struct AGlitterBeardTree {
	UActionRulesComponent* ActionRulesComponent; // 0x3f8
	UActionRulesInteractableComponent* InteractableComponent; // 0x400
	float LanternLightDelay; // 0x408
	UGlitterBeardUnlockVFXCoordinatorComponent* UnlockVFXCoordinatorComponent; // 0x410
	UGlitterBeardTelemetryComponent* TelemetryComponent; // 0x418
	UShantyItemDesc* VocalShanty; // 0x420
	UWwiseEvent* VocalsFadeEvent; // 0x428
	float VocalsFadeDelay; // 0x430
	float UnlockDelay; // 0x434
	UGlitterBeardFinaleCoordinatorComponent* FinaleCoordinator; // 0x438
	ULandmarkReactionTriggerComponent* LandmarkReactionTrigger; // 0x440
	float DistanceFromTreeToPauseAISpawn; // 0x448
	ASlidingDoor* HideoutDoor; // 0x678
	FWwiseEmitter SoundEmitter; // 0x680
};

struct UBTTask_PushPawnAction {
	UPawnAction* Action; // 0x60
};

struct UUniformGridPanel {
	FMargin SlotPadding; // 0x150
	float MinDesiredSlotWidth; // 0x160
	float MinDesiredSlotHeight; // 0x164
};

struct AFireworkExplosion {
	FGeneratedFireworkData GeneratedFireworkData; // 0x3d8
	USceneComponent* RootSceneComponent; // 0x430
	UFireworkAmbientLightComponent* FireworkAmbientLightComponent; // 0x438
	UParticleSystemComponent* SpawnedExplosionParticles; // 0x440
	FWwiseEmitter AudioEmitter; // 0x448
};

struct UMeshMemoryConstraintsAIPartsDesc {
	FStringAssetReference Mesh; // 0x38
	int64_t CachedMeshResourceSize; // 0x48
	UMeshMemoryConstraintCategory* MeshFallbackCategory; // 0x50
	UMeshMemoryConstraintBudget* BudgetToCountMemoryAgainstIfNoFallback; // 0x58
	TArray<UMaterialInterface*> OverrideMaterials; // 0x60
	TArray<FStringAssetReference> FallbackOverrideMaterials; // 0x70
};

struct UNavArea_Default {
	float DefaultCost; // 0x28
	float FixedAreaEnteringCost; // 0x2c
	FColor DrawColor; // 0x30
	FNavAgentSelector SupportedAgents; // 0x34
	char bSupportsAgent0 : 1; // 0x38
	char bSupportsAgent1 : 1; // 0x38
	char bSupportsAgent2 : 1; // 0x38
	char bSupportsAgent3 : 1; // 0x38
	char bSupportsAgent4 : 1; // 0x38
	char bSupportsAgent5 : 1; // 0x38
	char bSupportsAgent6 : 1; // 0x38
	char bSupportsAgent7 : 1; // 0x38
	char bSupportsAgent8 : 1; // 0x39
	char bSupportsAgent9 : 1; // 0x39
	char bSupportsAgent10 : 1; // 0x39
	char bSupportsAgent11 : 1; // 0x39
	char bSupportsAgent12 : 1; // 0x39
	char bSupportsAgent13 : 1; // 0x39
	char bSupportsAgent14 : 1; // 0x39
	char bSupportsAgent15 : 1; // 0x39
};

struct UWaterExposureComponent {
	float RainZoneThreshold; // 0xc8
	FVector FullySubmergedOffset; // 0xcc
	FVector PartiallySubmergedOffset; // 0xd8
	FStatus SubmergedStatus; // 0xe8
	FStatus RainStatus; // 0x100
	FName FeatureFlag; // 0x118
	bool InRain; // 0x120
	ESubmergedState SubmergedState; // 0x121
};

struct UTaleQuestSelectShipwreckLocationFromValidCandidatesStep {
	UTaleQuestSelectorService* CachedSelectorService; // 0xc8
};

struct URenderToTextureSceneDetails {
	UObject* ClassToSpawn; // 0x28
	FIntPoint Resolution; // 0x30
	UWorld* World; // 0x38
	TWeakObjectPtr<UWorld> ParentWorld; // 0x40
	TWeakObjectPtr<AActor> SpawnedActor; // 0x48
	UTextureRenderTarget2D* RenderTarget; // 0x50
};

struct UMapTableCanvasDataAsset {
	FMapTableCanvasDetails CanvasDetails; // 0x28
};

struct AEmoteCard {
	UMaterialInstanceDynamic* DynamicCardSelectionMaterialInstance; // 0x3d8
	UStaticMeshComponent* MeshComponent; // 0x3e0
	FName RandomCardParameterName; // 0x3e8
	FInt32Range RandomCardParameterRange; // 0x3f0
};

struct UMastFlammableComponent {
	FVector FireGridLocation; // 0x118
};

struct UFontImportOptions {
	FFontImportOptionsData Data; // 0x28
};

struct UStaticMeshSocket {
	FName SocketName; // 0x28
	FVector RelativeLocation; // 0x30
	FRotator RelativeRotation; // 0x3c
	FVector RelativeScale; // 0x48
	FString Tag; // 0x58
};

struct UBTService_AimAIInteractable {
	FBlackboardKeySelector Interactable; // 0x70
	FBlackboardKeySelector TargetForInteractable; // 0x98
	FBlackboardKeySelector TargetRelativeAimVector; // 0xc0
};

struct UCoherentUIGTPersistentDataAsset {
	TArray<UTexture2D*> AlwaysLoadedTextures; // 0x28
};

struct UOnboardCharacterTrackerComponent {
	TArray<TWeakObjectPtr<AActor>> OnboardCharacters; // 0x160
};

struct UStopAggressiveGhostShipEncounterStepDesc {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct UAnimNotify_PlayWorldCameraShake {
	UCameraShake* CameraShake; // 0x38
	float ShakeInnerRadius; // 0x40
	float ShakeOuterRadius; // 0x44
};

struct UItemSpawnTransformWithRandomQuantityDataAssset {
	TArray<FItemSpawnTransformWithRandomQuantity> ItemSpawnData; // 0x28
};

struct UItemFirstDroppedByMeOnMyShipConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UAnimNotifyState_SpawnCosmeticItem {
	AActor* CosmeticItemToSpawn; // 0x28
	EWieldAnimationLocation SpawnLocation; // 0x30
	UCosmeticItemAnimationSetDataAsset* CosmeticItemAnimationDataSet; // 0x38
	bool SpawnHidden; // 0x40
	bool DestroyOnEnd; // 0x41
	bool OverrideDestroyLocation; // 0x42
	EWieldAnimationLocation DestroyLocation; // 0x43
};

struct USeaClueSiteTypesDataAsset {
	TArray<UClueSiteType*> ClueSiteTypes; // 0x28
};

struct AGameplayCueNotify_Actor {
	FGameplayTag GameplayCueTag; // 0x3d0
	FName GameplayCueName; // 0x3d8
	bool bAutoDestroyOnRemove; // 0x3e0
	float AutoDestroyDelay; // 0x3e4
	bool IsOverride; // 0x3e8
	bool bUniqueInstancePerInstigator; // 0x3e9
	bool bUniqueInstancePerSourceObject; // 0x3ea
};

struct APartyBeaconHost {
	UPartyBeaconState* State; // 0x3f8
	float SessionTimeoutSecs; // 0x428
	float TravelSessionTimeoutSecs; // 0x42c
};

struct UMovieSceneAkAudioRTPCSection {
	FString Name; // 0xa0
	FRichCurve FloatCurve; // 0xb0
};

struct AHarpoonLauncher {
	FText InteractionDisplayUseVerb; // 0x6b0
	FText InteractionDisplayName; // 0x6e8
	FName CameraDockSocket; // 0x720
	FName CharacterDockSocket; // 0x728
	FName TooltipSocket; // 0x730
	FName ProjectileLaunchSocket; // 0x738
	FName TetherAttachSocket; // 0x740
	FName RetractedCharacterTargetPositionSocket; // 0x748
	FActorComponentSelector RetractedCharacterTargetPositionSourceMesh; // 0x750
	FFloatRange PitchRange; // 0x760
	FFloatRange YawRange; // 0x770
	FName FireAINoiseTag; // 0x780
	float FireAINoiseRange; // 0x788
	UChildActorComponent* TetherChildActorComponent; // 0x790
	UStaticMeshComponent* BaseMeshComponent; // 0x798
	UStaticMeshComponent* MountMeshComponent; // 0x7a0
	UStaticMeshComponent* BarrelMeshComponent; // 0x7a8
	UStaticMeshComponent* LeftSpinnerMeshComponent; // 0x7b0
	UStaticMeshComponent* RightSpinnerMeshComponent; // 0x7b8
	UStaticMeshComponent* RopeSpoolMeshComponent; // 0x7c0
	UInteractableComponent* InteractableComponent; // 0x7c8
	URetractorComponent* RetractorComponent; // 0x7d0
	UChildActorComponent* ProjectileChildActorComponent; // 0x7d8
	UDamageableComponent* LauncherDamageComponent; // 0x7e0
	UTetherCustomisationComponent* TetherCustomisationComponent; // 0x7e8
	TScriptInterface<Class> TetherInterface; // 0x7f0
	UHarpoonLauncherAudioParamsDataAsset* AudioParams; // 0x818
	UHarpoonLauncherVFXDataAsset* VFXParams; // 0x820
	UForceFeedbackEffect* HarpoonImpactRumble; // 0x828
	UForceFeedbackEffect* HarpoonDockedRumble; // 0x830
	UCameraShake* HarpoonDockedCameraShake; // 0x838
	UCurveFloat* EstimatedRetractionTimeScalarCurve; // 0x840
	UNotificationInputId* StartControllingNotificationInputId; // 0x848
	float ProjectileSpeed; // 0x850
	float RetractionSpeed; // 0x854
	float SpinnerPitchScalar; // 0x858
	float RopeSpoolPitchScalar; // 0x85c
	float SpinnerMaxSlideDistance; // 0x860
	float MaximumTetherLengthCm; // 0x864
	FRotator AimRelativeAngularLimitsDegrees; // 0x868
	float PositionRelativeOutOfWaterPitchLimitDegrees; // 0x874
	float ShipSubmersionProportionRetractThreshold; // 0x878
	float ShipOutOfWaterRetractTimeSecs; // 0xad8
	float PitchSpeed; // 0xae0
	float YawSpeed; // 0xae4
	float ClientToServerAimBlendSpeed; // 0xae8
	float OrientateBarrelTowardsTetherSpeedDistanceMultiplier; // 0xaec
	float MaxReelInSpeedCmPerSec; // 0xaf0
	float MaxWeightReelableAtMaxSpeedKg; // 0xaf4
	float ReplicatedPitch; // 0xaf8
	float ReplicatedYaw; // 0xafc
	bool IsMigrating; // 0xb00
	bool AlwaysRetractAtMaxLength; // 0xb1d
	TArray<UDamagerType*> ForwardedDamagerTypes; // 0xb20
};

struct UAppliedStatusToSelfStatCondition {
	TArray<UStatusBase*> Status; // 0x30
	EStatusComparisonMode ComparisonMode; // 0x40
};

struct UMovieSceneSubSection {
	FMovieSceneSectionParameters Parameters; // 0x98
	float StartOffset; // 0xa8
	float TimeScale; // 0xac
	float PrerollTime; // 0xb0
	UMovieSceneSequence* SubSequence; // 0xb8
	AActor* ActorToRecord; // 0xc0
	FString TargetSequenceName; // 0xe0
	FDirectoryPath TargetPathToRecordTo; // 0xf0
};

struct UCrewOwnershipComponent {
	ECrewOwnershipState State; // 0xd0
	FGuid CachedCrewId; // 0xd4
	FGuid LastKnownCrewId; // 0xe4
};

struct ULoadoutComponent {
	bool HaveSourcedLoadout; // 0xf8
	ELoadoutPersistence LoadoutPersistence; // 0xf9
	FLoadout SupplementalLoadout; // 0x100
};

struct UAnimBlueprintGeneratedClass {
	TArray<FBakedAnimationStateMachine> BakedStateMachines; // 0x228
	USkeleton* TargetSkeleton; // 0x238
	TArray<FAnimNotifyEvent> AnimNotifies; // 0x240
	int32_t RootAnimNodeIndex; // 0x250
	TArray<FAnimGroupInfo> Groups; // 0x270
	TArray<FName> SkeletonSlotNames; // 0x280
};

struct UEmblemDefinitionAssetList {
	TArray<UEmblemDefinitionDataAsset*> EmblemDefinitionAssets; // 0x28
};

struct UKrakenAnimatedTentacleAnimationDataAsset {
	UKrakenAnimatedTentacleAnimationSpecDataAsset* AnimationSpec; // 0x28
	float FrameTimeDelta; // 0x30
	float AnimationLength; // 0x34
	int32_t NumFrames; // 0x38
	bool AllowLookAround; // 0x3c
	bool RequiresWaterHeightQuery; // 0x3d
	float AnimationPlayRateScale; // 0x40
	TArray<FKrakenAnimatedTentacleAnimationBoneTrack> Bones; // 0x48
};

struct UApplicationLifecycleComponent {
	FScriptMulticastDelegate ApplicationWillDeactivateDelegate; // 0xc8
	FScriptMulticastDelegate ApplicationHasReactivatedDelegate; // 0xd8
	FScriptMulticastDelegate ApplicationWillEnterBackgroundDelegate; // 0xe8
	FScriptMulticastDelegate ApplicationHasEnteredForegroundDelegate; // 0xf8
	FScriptMulticastDelegate ApplicationWillTerminateDelegate; // 0x108
};

struct UClueDescriptorContainerComponent {
	UClueDescriptor* CurrentClue; // 0xd0
	bool HasClueBeenGiven; // 0xd8
};

struct AContestRowboatsService {
	AActor* RowboatClass; // 0x3d8
};

struct AContestZoneService {
	TArray<FName> ContestZoneNames; // 0x408
	bool HasLoadedContestZones; // 0x428
};

struct UGetPromptsLocalService {
	FScriptMulticastDelegate Loaded; // 0x28
	UObject* WorldContextObject; // 0x38
};

struct UMaterialExpressionDDY {
	FExpressionInput Value; // 0x70
};

struct UIsAIOfClassStatCondition {
	TArray<UAIClassId*> AIClasses; // 0x30
};

struct ULinkEQSContextWithVariableStep {
	ULinkEQSContextWithVariableStepDesc* Desc; // 0x90
};

struct UAudioSpaceTrackerComponent {
	TArray<UAudioSpaceComponent*> CurrentSpaces; // 0xc8
};

struct AHole {
	float BoundsScaleFactor; // 0x3d0
	float LifeTimeSpan; // 0x3d4
	float DestroyTimeSpan; // 0x3d8
	float ChanceOfSpawningAnItem; // 0x3dc
	TArray<FHoleItemToSpawn> ItemsToSpawn; // 0x3e0
	EHoleState State; // 0x3f8
};

struct ASirenActionStateCreatorDefinition {
	FAISpawnActionStateParams AISpawnParams; // 0x3d0
	FAISwimmingCreatureDeadActionStateParams AIDeadParams; // 0x3e0
	FUseItemActionStateParams UseItemParams; // 0x400
	FHiddenActionStateParams HiddenStateParams; // 0x401
};

struct UIslandByNameClueDestinationDescriptor {
	FName IslandIdentifier; // 0x40
};

struct UBrushBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct ACargoRunCrateItemProxy {
	UCargoRunCrateComponent* CargoRunCrateComponent; // 0x7d8
	UNPCDialogComponent* NPCDialogComponent; // 0x7e0
};

struct USkeletalMeshComponent {
	EAnimationMode AnimationMode; // 0x6d0
	UObject* AnimBlueprintGeneratedClass; // 0x6d8
	UAnimInstance* AnimScriptInstance; // 0x6e0
	FSingleAnimationPlayData AnimationData; // 0x6e8
	TArray<FTransform> CachedLocalAtoms; // 0x718
	TArray<FTransform> CachedSpaceBases; // 0x728
	float GlobalAnimRateScale; // 0x760
	char bHasValidBodies : 1; // 0x764
	EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x768
	char bBlendPhysics : 1; // 0x76c
	char bEnablePhysicsOnDedicatedServer : 1; // 0x76c
	char bUpdateJointsFromAnimation : 1; // 0x76c
	char bDisableClothSimulation : 1; // 0x76c
	char bCollideWithEnvironment : 1; // 0x76c
	char bCollideWithAttachedChildren : 1; // 0x76c
	char bLocalSpaceSimulation : 1; // 0x76c
	char bClothMorphTarget : 1; // 0x76c
	char bResetAfterTeleport : 1; // 0x76d
	float TeleportDistanceThreshold; // 0x770
	float TeleportRotationThreshold; // 0x774
	float ClothBlendWeight; // 0x778
	FVector RootBoneTranslation; // 0x780
	char bNoSkeletonUpdate : 1; // 0x78c
	char bPauseAnims : 1; // 0x78c
	char bEnablePerPolyCollision : 1; // 0x78c
	UBodySetup* BodySetup; // 0x790
	char bAutonomousTickPose : 1; // 0x798
	char bForceRefpose : 1; // 0x798
	char bOldForceRefPose : 1; // 0x798
	char bShowPrePhysBones : 1; // 0x798
	char bRequiredBonesUpToDate : 1; // 0x798
	char bAnimTreeInitialised : 1; // 0x798
	char bEnableLineCheckWithBounds : 1; // 0x798
	FVector LineCheckBoundsScale; // 0x79c
	int32_t RagdollAggregateThreshold; // 0x7a8
	FScriptMulticastDelegate OnConstraintBroken; // 0x7b0
	bool UseRefPoseToInitialise; // 0x7c0
	float LastPoseTickTime; // 0x988
};

struct UWeightedItemDescSpawnDataAssetWithRandomQuantity {
	TArray<FWeightedItemDescSpawnDataWithRandomQuantity> WeightedItemSpawnDatas; // 0x28
};

struct UOpenableItemReactionComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTTask_BurrowIntoGround {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct ULandmarkReactionEventCallFunction {
	AActor* Target; // 0x28
	bool UseDefaultTarget; // 0x30
};

struct UStatusResponseHealthChange {
	float HealthChangeAmount; // 0x30
	EHealthChangedReason HealthChangedReason; // 0x34
};

struct UMechanismAnimationEvent_Audio {
	UWwiseEvent* Event; // 0x40
	TScriptInterface<Class> AudioEmitterInterface; // 0x48
};

struct UItemSettings {
	FDropItemParams DropItemParams; // 0x38
	FDropItemParams AIPriorityDropItemParams; // 0x80
	ECollisionChannel AutoAimCollisionChannel; // 0xc8
	TArray<UItemCategory*> ItemClassesToBeNamedByCategory; // 0xd0
};

struct UEnvQueryGenerator_BlueprintBase {
	FText GeneratorsActionDescription; // 0x50
	UEnvQueryContext* Context; // 0x88
	UEnvQueryItemType* GeneratedItemType; // 0x90
};

struct UMovieSceneCameraAnimTrack {
	TArray<UMovieSceneSection*> CameraAnimSections; // 0x88
};

struct AServerMigrationSerialisationDetailsTestsMigrationActorCallsOrderingTestActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UTutorialManager {
	UTutorialStarter* CompanyOnboardingStarterClass; // 0xc8
	UTutorialStarter* MaidenVoyageStarterClass; // 0xd0
	UTutorialStarter* BeachNPCSpawnFlowStarterClass; // 0xd8
	UTutorialStarter* SelectedTutorialClass; // 0xe0
	UTutorialStarter* SelectedTutorial; // 0xe8
	bool HasEverPlayedFirstPersonAnimation; // 0xf0
	bool HasStartedTutorial; // 0xf1
	bool HasReceivedEntitlements; // 0xf2
	bool HasPosessedPawn; // 0xf3
};

struct UMaterialExpressionMakeMaterialAttributes {
	FExpressionInput BaseColor; // 0x70
	FExpressionInput Metallic; // 0xa8
	FExpressionInput Specular; // 0xe0
	FExpressionInput Roughness; // 0x118
	FExpressionInput EmissiveColor; // 0x150
	FExpressionInput Opacity; // 0x188
	FExpressionInput OpacityMask; // 0x1c0
	FExpressionInput Normal; // 0x1f8
	FExpressionInput WorldPositionOffset; // 0x230
	FExpressionInput WorldDisplacement; // 0x268
	FExpressionInput TessellationMultiplier; // 0x2a0
	FExpressionInput SubsurfaceColor; // 0x2d8
	FExpressionInput ClearCoat; // 0x310
	FExpressionInput ClearCoatRoughness; // 0x348
	FExpressionInput AmbientOcclusion; // 0x380
	FExpressionInput Refraction; // 0x3b8
	FExpressionInput CustomizedUVs[0x8]; // 0x3f0
	FExpressionInput PixelDepthOffset; // 0x5b0
};

struct UCurveVector {
	FRichCurve FloatCurves[0x3]; // 0x30
};

struct ASceneCapture {
	UStaticMeshComponent* MeshComp; // 0x3d0
};

struct UAIInteractableSpawner {
	UAIInteractableType* AIInteractableType; // 0x428
	float InhabitedChance; // 0x430
	FWeightedProbabilityRangeOfRanges DelayAfterSuccessfulInhabitedCheck; // 0x438
	FWeightedProbabilityRangeOfRanges DelayAfterFailedInhabitedCheck; // 0x468
	float SpawnForInteractableChance; // 0x498
	FWeightedProbabilityRangeOfRanges DelayAfterSuccessfulSpawnOnInteractableCheck; // 0x4a0
	FWeightedProbabilityRangeOfRanges DelayAfterFailedSpawnOnInteractableCheck; // 0x4d0
	bool RunInhabitedSimulation; // 0x500
	bool RunSpawnForInteractableSimulation; // 0x501
	int32_t NumIterations; // 0x504
	EPlayMode CachedPlaymode; // 0x520
};

struct UAttachHarpoonTetherConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct UDamageTrackerComponent {
	float SecondsToWaitBeforeClearingDamageDone; // 0xc8
	UDamageableComponent* DamageableComponent; // 0xd0
};

struct UWorldResourceRegistry {
	TMap<uint32_t, AActor*> ActorsById; // 0x30
};

struct UTaleQuestAddRiddleMapBaseStepDesc {
	FName MapId; // 0x80
	FQuestVariableName IslandName; // 0x88
};

struct ACutsceneLockNPC {
	ULockComponent* LockComponent; // 0x610
	UCutsceneComponent* CutsceneComponent; // 0x618
	UAnimNotifyWwiseEmitterComponent* AnimNotifyWwiseEmitterComponent; // 0x620
	FName OnLockOpenedCutscene; // 0x628
	FText TakeKeyInteractionText; // 0x630
	bool KeyTaken; // 0x668
	TArray<FSetHiddenData> SetHiddenData; // 0x670
};

struct AVariableFillRateWaterVolume {
	float MaxAmount; // 0x3d0
	bool EnableRipplesFromOverlappingActors; // 0x3d4
	TArray<FVector> RippleLocations; // 0x3d8
	TArray<FVector> RippleGenerators; // 0x3e8
	TArray<AActor*> OverlappingActors; // 0x3f8
	float RippleFrequency; // 0x408
	float CurrentAmount; // 0x40c
	float TargetAmount; // 0x410
	float LerpRate; // 0x414
};

struct UUnarmedCombatItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct ATestClimbingActor {
	UClimbingComponent* ClimbingComponent; // 0x640
};

struct UMaterialExpressionNormalize {
	FExpressionInput VectorInput; // 0x70
};

struct ADamageZone {
	float InteractionPointDepthOffset; // 0x428
	float MaximumRepairAngleToRepairer; // 0x42c
	float MaximumRepairDistance; // 0x430
	float HullFloodedPercentageToShiftWaterSamplingPos; // 0x434
	float WaterSampleOffsetBelowHullFloodThreshold; // 0x438
	float WaterSampleOffsetAboveHullFloodThreshold; // 0x43c
	float InternalWaterHeightDeltaForVFXUpdate; // 0x440
	FVector InternalWaterSamplePositionTop; // 0x444
	FVector InternalWaterSamplePositionBottom; // 0x450
	FVector InternalWaterSamplePositionCurrent; // 0x45c
	float WaterSplashDelayMax; // 0x468
	float WaterSplashDelayMin; // 0x46c
	USceneComponent* SceneRootComponent; // 0x470
	UInteractableComponent* InteractionComponent; // 0x478
	EShipDeck LocationOnShip; // 0x480
	FVector AIInteractionOffset; // 0x484
	UItemDesc* UndoRepairItemDesc; // 0x490
	FText UndoRepairTooltipText; // 0x498
	FText UndoRepairInventoryFullTooltipText; // 0x4d0
	TArray<FLevelOfDamageProperties> LevelOfDamageProperties; // 0x510
	bool IsUnderExternalWater; // 0x520
	bool IsUnderInternalWater; // 0x521
	URepairTypeId* RepairType; // 0x528
	AShipInternalWater* InternalWater; // 0x530
	UDecalComponent* HoleDecalComponent; // 0x540
	UParticleSystemComponent* WaterLeakParticleSystem; // 0x548
	UParticleSystemComponent* WaterLeakParticleSystemRepairing; // 0x550
	UParticleSystemComponent* BubbleLeakParticleSystem; // 0x558
	UParticleSystemComponent* BubbleLeakParticleSystemRepairing; // 0x560
	UParticleSystemComponent* SplashParticleSystem; // 0x568
	UParticleSystem* InternalHitVfx; // 0x570
	FWwiseEmitter WaterLeakEmitter; // 0x580
	UWwiseEvent* WaterLeakSfx_Play; // 0x5a0
	UWwiseEvent* WaterLeakSfx_Stop; // 0x5a8
	UWwiseEvent* WaterLeakRepairSfx_Play; // 0x5b0
	UWwiseEvent* WaterLeakRepairSfx_Stop; // 0x5b8
	FName WaterLeakUnderwaterSwitchGroup; // 0x5c0
	FName WaterLeakUnderwaterSwitchDefaultAboveWater; // 0x5c8
	FName WaterLeakUnderwaterSwitchUnderwater; // 0x5d0
	FName LeakDamageSwitchGroup; // 0x5d8
	FName WaterLevelRTPC; // 0x5e0
	float WaterLeakFadeTime; // 0x5e8
	UWwiseObjectPoolWrapper* WaterLeakWisePool; // 0x5f0
	UWwiseEvent* Strain_DamageSfx; // 0x5f8
	UWwiseObjectPoolWrapper* StrainDamagePool; // 0x600
	FName WaterLeakEmitterName; // 0x608
	TArray<FHullDamageHit> ExternalHitList; // 0x618
	FAuthorityRepairableState AuthorityRepairableState; // 0x628
	int32_t DamageLevel; // 0x644
	int32_t RepairedDamageLevel; // 0x648
	bool AboutToBlow; // 0x64c
};

struct UBTService_BlackboardBase {
	FBlackboardKeySelector BlackboardKey; // 0x70
};

struct UCurveLinearColor {
	FRichCurve FloatCurves[0x4]; // 0x30
};

struct URammableExplosiveDataAsset {
	TArray<FRammableExplosiveEntry> ExplosiveSpeedParams; // 0x28
};

struct UStorageContainerContentTypeSelectorEntries {
	TArray<FTypedStorageContainerContentTypeSelectorEntry> ContentSpawners; // 0x28
};

struct ACoordinatedCutsceneTrigger {
	USceneComponent* Root; // 0x3d8
	FName CutsceneName; // 0x3e0
	bool ActivationInitiallyEnabled; // 0x3e8
	bool AllowInfiniteNumberOfReactivations; // 0x3e9
	int32_t SpecificNumberOfReactivationsAllowed; // 0x3ec
	bool ReattemptActivationAfterConflictingCutsceneFinishes; // 0x3f0
	FFloatInterval CutsceneStartDelayWhenReattemptingActivation; // 0x3f4
	TArray<FStateChangeCoordination> StateChangeCoordination; // 0x400
	FScriptMulticastDelegate OnCutsceneTriggerStateChangedCallback; // 0x410
	FScriptMulticastDelegate OnCutsceneTriggerActivationFailedCallback; // 0x420
	UBillboardComponent* EditorOnlyIcon; // 0x4f0
	UTextRenderComponent* EditorOnlyCutsceneNameDisplay; // 0x4f8
	FCutsceneTriggerEditorOnlyData AllEditingPreferences; // 0x500
};

struct UPropertyBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UOpenableItemComponent {
	FScriptMulticastDelegate OnOpen; // 0xd0
	FScriptMulticastDelegate OnClose; // 0xe0
	EOpenableItemState OpenState; // 0xf0
	bool HasEverClosed; // 0xf1
};

struct UParticleModuleKillHeight {
	FRawDistributionFloat Height; // 0x50
	char bAbsolute : 1; // 0x88
	char bFloor : 1; // 0x88
	char bApplyPSysScale : 1; // 0x88
};

struct UAthenaGameplayDebuggingComponent {
	TArray<FString> CurrentServerActionStates; // 0x7b8
	UAIStrategyId* CurrentAIStrategyId; // 0x7c8
	TArray<FDebugReplicatedAbilityData> CachedAIAbilities; // 0x7d0
	TArray<FAthenaAIControllerTargetPickingData> CachedAITargetPickingData; // 0x7e0
	UAthenaAIAbilityType* NextAbility; // 0x7f0
	UAthenaAIAbilityType* QueuedAbility; // 0x7f8
	TArray<UAthenaAIAbilityType*> ReadiedAbilities; // 0x800
	UAthenaAIAbilityHandlerComponent* AIAbilityComponent; // 0x810
	bool FollowUpAbilitySet; // 0x818
	int32_t CurrentAbilityStageIndex; // 0x81c
	TArray<UAthenaAIAbilityType*> AbilitiesActiveInCurrentStage; // 0x820
};

struct UStatusResponseAINamedControllerParamHealthChange {
	EHealthChangedReason HealthChangedReason; // 0x30
	FName AINamedControllerParam; // 0x34
};

struct AFogVolume {
	USphereComponent* SphereComponent; // 0x3d0
	UFogVolumeComponent* FogVolumeComponent; // 0x3d8
};

struct UCharacterAudioComponentParams {
	UWwiseObjectPoolWrapper* CharacterAudioPool; // 0x28
	UWwiseEvent* CausedDamageAudioEvent; // 0x30
	UWwiseEvent* CausedAIShipDamageAudioEvent; // 0x38
	UWwiseEvent* CausedAggressiveGhostShipDamageAudioEvent; // 0x40
	UWwiseEvent* CharacterDeadAudioEvent; // 0x48
	UWwiseEvent* KilledCharacterAudioEvent; // 0x50
	UWwiseEvent* LocalPlayerFireStart; // 0x58
	UWwiseEvent* LocalPlayerFireStop; // 0x60
	UWwiseEvent* RemotePlayerFireStart; // 0x68
	UWwiseEvent* RemotePlayerFireStop; // 0x70
	UWwiseEvent* LocalPlayerExtinguished; // 0x78
	UWwiseEvent* RemotePlayerExtinguished; // 0x80
	FStateCategoryGroup CharacterState; // 0x88
	UWwiseEvent* PlayCharacterRespawn; // 0xa8
	FName CharacterStateDead; // 0xb0
	FName CharacterStateFall; // 0xb8
	FName CharacterStateStun; // 0xc0
	FName CharacterStateFire; // 0xc8
	FName CharacterStateDefault; // 0xd0
	FName CharacterStateTeleporting; // 0xd8
	FName CharacterStateSleeping; // 0xe0
	UWwiseEvent* PlayPlayerVengeance; // 0xe8
	UWwiseEvent* StopPlayerVengeance; // 0xf0
	UWwiseEvent* PlayPlayerVengeanceFinished; // 0xf8
	FName PlayerVengeanceRTPC; // 0x100
	float PlayerVengeanceMaxRtpc; // 0x108
	TArray<FDamageTypeToAudio> ExplosionSoundEvents; // 0x110
	UWwiseEvent* PlayPlayerSlidingDownLadder; // 0x120
	UWwiseEvent* StopPlayerSlidingDownLadder; // 0x128
	FName LadderSlideSpeedRtpc; // 0x130
	UWwiseEvent* LadderUse; // 0x138
	UWwiseEvent* CannonUse; // 0x140
	UWwiseEvent* WheelUse; // 0x148
	UWwiseEvent* SailManipulatorUse; // 0x150
	UWwiseEvent* CharacterTorsoEnteredWater; // 0x158
	UWwiseEvent* CharacterTorsoExitedWater; // 0x160
	FName PlayerSpeedRtpc; // 0x168
	float PlayerSpeedRtpcMin; // 0x170
	float PlayerSpeedRtpcMax; // 0x174
	FName BrokeLegSwitchGroupName; // 0x178
	FName BrokeLegSwitch; // 0x180
	FName HealedLegSwitch; // 0x188
	FName FallDamageRTPC; // 0x190
	TArray<FHealthChangeAudio> HealthChangeSfx; // 0x198
	UWwiseEvent* LocalPlayerTeleportPlay; // 0x1a8
	UWwiseEvent* LocalPlayerTeleportStop; // 0x1b0
	UAudioSpaceDataAsset* LargeShipMapDeck; // 0x1b8
	UAudioSpaceDataAsset* LargeShipBrigDeck; // 0x1c0
	UAudioSpaceDataAsset* LargeShipCaptainsCabin; // 0x1c8
	UAudioSpaceDataAsset* IslandTavern; // 0x1d0
	UAudioSpaceDataAsset* IslandCave; // 0x1d8
	float SmallestEnclosedRatioToTriggerCave; // 0x1e0
	EPhysicalSurface PredominantCaveSurface; // 0x1e4
	float LargestCaveSizeMetersSquared; // 0x1e8
	float SmallestCaveSizeMetersSquared; // 0x1ec
	FName CaveSizeRtpcName; // 0x1f0
	float SmallestEnclosedRatioToTriggerCaveMusicNode; // 0x1f8
	float LandingEventCooldownTime; // 0x1fc
	float FogPenetrationAudioThresholdMin; // 0x200
	float FogPenetrationAudioThresholdMax; // 0x204
	FName FogDensityRTPC; // 0x208
	TArray<FFogTypeToAudio> FogTypeSfx; // 0x210
	UWwiseEvent* TrapTriggeredEvent; // 0x220
	UWwiseEvent* EmoteCameraStart; // 0x228
	UWwiseEvent* EmoteCameraStop; // 0x230
	UWwiseEvent* ReviveSuccessful; // 0x238
	UWwiseEvent* OtherPlayers_BodyEvaporates; // 0x240
	UWwiseEvent* StartSleepingEvent; // 0x248
	UWwiseEvent* StopSleepingEvent; // 0x250
	UWwiseEvent* StartSleepingWithoutFartingEvent; // 0x258
	UWwiseEvent* StopSleepingWithoutFartingEvent; // 0x260
};

struct AWaterVolume {
	float MaxAmount; // 0x3d0
	bool EnableRipplesFromOverlappingActors; // 0x3d4
	TArray<FVector> RippleLocations; // 0x3d8
	TArray<FVector> RippleGenerators; // 0x3e8
	TArray<AActor*> OverlappingActors; // 0x3f8
	float RippleFrequency; // 0x408
	float CurrentAmount; // 0x40c
	float TargetAmount; // 0x410
	float LerpRate; // 0x414
};

struct UUnderwaterEffectsComponent {
	UUnderwaterEffectsDataAsset* UnderwaterEffectsData; // 0x2e0
	UParticleSystemComponent* SpawnedVfx; // 0x2e8
};

struct UParticleModuleSizeOverVelocity {
	FRawDistributionFloat SizeMultiplier; // 0x50
};

struct UDockToObjectDisengageInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMovieSceneLevelVisibilityTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
};

struct USplineFootprintPathComponent {
	float DistanceBetweenDecals; // 0x608
	UMaterialInterface* DecalMaterial; // 0x610
	FSplineFootprintPathTool PathTool; // 0x618
	float DecalYaw; // 0x61c
	FVector DecalUniformScale; // 0x620
};

struct UAthenaAudioModuleSettings {
	FStringAssetReference AudioConfigAsset; // 0x38
};

struct ULaunchableShotComponentAudioParams {
	UWwiseEvent* FireProjectileEvent; // 0x68
};

struct AVotableObjectView {
	UInteractableComponent* InteractableComponent; // 0x408
	UVotableBaseComponent* VotableObject; // 0x410
	float HoldToTriggerTime; // 0x418
	TArray<TScriptInterface<Class>> Voters; // 0x420
};

struct UWashedUpMessageInABottleClueSiteData {
	UItemDesc* BottleItemType; // 0x38
	FName IslandNameToSpawnOn; // 0x40
	FGuid IslandSpawnLocationReservationId; // 0x48
	FTransform SpawnTransform; // 0x60
	TArray<UItemDesc*> SinkIntoSandItems; // 0x90
};

struct ULaunchableAttachPointComponent {
	USceneComponent* AttachParent; // 0xc8
	TArray<USceneComponent*> AttachChildren; // 0xd0
	FName AttachSocketName; // 0xe0
	char bRequiresCustomLocation : 1; // 0xe8
	char bAbsoluteLocation : 1; // 0xe8
	char bAbsoluteTranslation : 1; // 0xe8
	char bAbsoluteRotation : 1; // 0xe8
	char bAbsoluteScale : 1; // 0xe8
	char bVisible : 1; // 0xe8
	char bHiddenInGame : 1; // 0xe8
	char bShouldUpdatePhysicsVolume : 1; // 0xe8
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0xe9
	char bUseAttachParentBound : 1; // 0xe9
	char bComponentIsUnionOfChildren : 1; // 0xe9
	char bJitterReduction : 1; // 0xe9
	char CacheRootVelocity : 1; // 0xe9
	char bWorldToComponentUpdated : 1; // 0xe9
	TWeakObjectPtr<APhysicsVolume> PhysicsVolume; // 0xf8
	FVector RelativeScale3D; // 0x11c
	FVector RelativeLocation; // 0x128
	FRotator RelativeRotation; // 0x134
	EComponentMobility Mobility; // 0x220
	EDetailMode DetailMode; // 0x221
	FVector ComponentVelocity; // 0x22c
	FScriptMulticastDelegate PhysicsVolumeChangedDelegate; // 0x238
	TArray<FName> SocketVelocitiesToCache; // 0x258
};

struct UApplicationSettings {
	int32_t GameLanguage; // 0x28
};

struct USeaLocationByGridSquareClueDestinationDescriptor {
	FVector SeaLocationIdentifier; // 0x40
};

struct AMaterialInstanceActor {
	TArray<AActor*> TargetActors; // 0x3d0
};

struct UInterpTrackAudioMaster {
	FInterpCurveVector VectorTrack; // 0x70
	float CurveTension; // 0x88
};

struct AShipService {
	TArray<FWeakActorHandle> ShipList; // 0x3e0
	TArray<FCrewShipEntry> CrewedShips; // 0x410
	FCrewShipPersistentDataManager PersistentCrewShipData; // 0x420
};

struct UComponentDelegateBinding {
	TArray<FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x28
};

struct UMigrationControlChannel {
	UNetConnection* Connection; // 0x28
};

struct UPlayerBuriedItemServiceHaulSizeDataAsset {
	TArray<FPlayerBuriedItemServiceHaulSizeEntry> HaulSizes; // 0x28
};

struct ULiveWidgetReflectorNode {
	FGeometry Geometry; // 0x28
	TArray<UWidgetReflectorNodeBase*> ChildNodes; // 0x60
	FLinearColor Tint; // 0x70
};

struct USoundClass {
	FSoundClassProperties Properties; // 0x28
	TArray<USoundClass*> ChildClasses; // 0x50
	TArray<FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0x60
	USoundClass* ParentClass; // 0x70
};

struct UCarouselPirateGeneratorParamsAsset {
	FCarouselPirateGeneratorParams Params; // 0x28
};

struct UZoomMapTaleStepDesc {
	FQuestVariableName IslandName; // 0x80
	UTreasureMapDataAsset* TreasureMapDataAsset; // 0x90
	UZoomMapParamsDataAsset* Params; // 0x98
	FQuestVariablePageLayout PageLayout; // 0xa0
	FQuestVariableVector DigSpot; // 0xb0
};

struct UFogBankTaleService {
	UFogBankTaleServiceDesc* Desc; // 0x60
	TArray<FFogBankManagerFogAvoidanceArea> FogBankAvoidanceAreas; // 0x68
};

struct USirenTeleportAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UCheckedStateBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UNPCDialogOptionStartVoyageFromDesc {
	FText Text; // 0x80
	bool CloseOnExecuted; // 0xb8
	int32_t LinkedDialog; // 0xbc
	UVoyageDescDataAsset* VoyageDesc; // 0xc0
	bool TrySetTaleAsCurrentlyActive; // 0xc8
};

struct UNamedAIDataAsset {
	TArray<FText> MaleCaptainNames; // 0x28
	TArray<FText> FemaleCaptainNames; // 0x38
	TArray<FText> MaleCrewNames; // 0x48
	TArray<FText> FemaleCrewNames; // 0x58
	TArray<FAICustomNameTitleMapping> CustomNameTitles; // 0x68
	TArray<FAICustomClassIdNameOverrides> CustomNameOverrides; // 0x78
	UAIClassId* DefaultClassId; // 0x88
	UAIClassId* FemaleCaptainClassId; // 0x90
	UAIClassId* MaleCaptainClassId; // 0x98
	UAIClassId* FemaleCrewClassId; // 0xa0
	UAIClassId* MaleCrewClassId; // 0xa8
};

struct UParticleModuleRotationBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UAthenaAIControllerParamsDataAsset {
	FAthenaAIControllerSenseSettings DefaultSenseSettings; // 0x28
	float AutoSuccessRangeFromLastSeenLocation; // 0x3c
	float DefaultPerceivedNotVisibleAge; // 0x40
	bool OverrideTeamID; // 0x44
	EAthenaAITeam TeamID; // 0x45
	float TargetSwitchScoreTolerance; // 0x48
	TArray<float> TargetLoadWeightingBias; // 0x50
	float DistanceToStartTargetPickingDecrease; // 0x60
	float TargetPickingDistScoreAtMaxSightRange; // 0x64
	float VisionAngleToStartTargetPickingDecrease; // 0x68
	float TargetPickingFacingScoreAtMaxPeripheralVisionAngle; // 0x6c
	bool UseDamageAsFactorInTargetScore; // 0x70
	FAthenaAIControllerDamageTargetScoreFromPerceivedTarget DamageTargetScores; // 0x74
	TArray<UAthenaAIControllerSharedParamValuesDataAsset*> SharedParamValues; // 0x88
	bool IndividualOverrideMeshScale; // 0x98
	float IndividualMeshScale; // 0x9c
	FAthenaAIControllerHealthCustomisation IndividualHealthCustomisationValues; // 0xa0
	TArray<FAthenaAIControllerParamValue> IndividualInitialBlackboardValues; // 0xb0
	TArray<FAthenaAIControllerParamValue> IndividualNamedControllerParams; // 0xc0
	TArray<FAthenaAIControllerWeightedRangesParamValue> IndividualNamedWeightedRangesControllerParams; // 0xd0
	TArray<FAthenaAIControllerSenseSettingOverride> IndividualAIStrategySenseSettingOverrides; // 0xe0
	bool IndividualOverrideCurrentTargetPerceivedNotVisibleAge; // 0xf0
	float IndividualCurrentTargetPerceivedNotVisibleAge; // 0xf4
	FName FeatureName; // 0xf8
};

struct UInitialisePuzzleVaultStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct AShipwreckSiteGeneratorSimulator {
	UShipwreckSiteGeneratorRandomEditorComponent* SiteGenerator; // 0x3d0
};

struct UAddGameEventExclusionZoneStep {
	UAddGameEventExclusionZoneStepDesc* Desc; // 0x90
};

struct ULinkerComponent {
	TArray<UEndPlayHandler*> EndPlayHandlers; // 0x190
};

struct UVulnerabilityAbilityStageParams {
	float VulnerabilityDurationMultiplier; // 0x40
	float MaxVulnerabilityPeriodHealthMultiplier; // 0x44
};

struct UMovieSceneAkTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
	char bIsAMasterTrack : 1; // 0x98
};

struct UDeliverableRequirementsDataAsset {
	TArray<UDeliverableRequirementBase*> Requirements; // 0x28
};

struct UCursedCannonballItemCategory_C {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UTaleQuestGetTinySharkExperienceParticipatingCrewsDesc {
	ATinySharkExperience* TinySharkExperience; // 0x80
	FQuestVariableGuidArray ParticipatingCrews; // 0x88
};

struct UCreateActorInstanceOnExplodeComponent {
	AActor* ActorToInstance; // 0xc8
};

struct UNPCDialogOptionGiveMap {
	FText Text; // 0x80
	UVoyageRecipeDataAsset* VoyageRecipe; // 0xb8
	int32_t LinkedDialog; // 0xc0
	int32_t NumberOfUses; // 0xc4
	int32_t NumTimesUsed; // 0xc8
};

struct UEdGraphNode {
	TArray<UEdGraphPin*> Pins; // 0x28
	int32_t NodePosX; // 0x38
	int32_t NodePosY; // 0x3c
	int32_t NodeWidth; // 0x40
	int32_t NodeHeight; // 0x44
	char bHasCompilerMessage : 1; // 0x48
	FString NodeComment; // 0x50
	bool bCommentBubblePinned; // 0x60
	bool bCommentBubbleVisible; // 0x61
	int32_t ErrorType; // 0x64
	FString ErrorMsg; // 0x68
	FGuid NodeGuid; // 0x78
	ENodeAdvancedPins AdvancedPinDisplay; // 0x88
	bool bIsNodeEnabled; // 0x89
	bool bIsDebugFunction; // 0x8a
};

struct UTaleQuestSpawnAIDioramaStepDesc {
	FQuestVariableAIDioramaDesc AIDioramaDescAsset; // 0x180
};

struct UWieldableMysteriousNoteLayout {
	FText DefaultTitle; // 0x28
	FText DefaultBody; // 0x60
	FWieldableMysteriousNoteLayoutItem DefaultNoteLayoutItem; // 0x98
	TArray<FWieldableMysteriousNoteLayoutItem> NoteLayoutItems; // 0x138
};

struct UBeckonGestureDataAsset {
	UAnimSequence* BeckonAnimation; // 0x28
	UWwiseEvent* BeckonAudio; // 0x30
};

struct UMaterialExpressionFunctionInput {
	FExpressionInput Preview; // 0x70
	FString InputName; // 0xa8
	FString Description; // 0xb8
	FGuid Id; // 0xc8
	EFunctionInputType InputType; // 0xd8
	FVector4 PreviewValue; // 0xe0
	char bUsePreviewValueAsDefault : 1; // 0xf0
	int32_t SortPriority; // 0xf4
	char bCompilingFunctionPreview : 1; // 0xf8
};

struct AAthenaTextRender {
	FText Text; // 0x3e0
	FTreasureMapWidgetText TextDesc; // 0x418
	int32_t CanvasWidth; // 0x438
	int32_t CanvasHeight; // 0x43c
	UFont* Font; // 0x440
	FVector2D FontScale; // 0x448
	float FontLineSpacingScale; // 0x450
	UCanvasRenderTarget2D* AthenaTextRenderTarget; // 0x460
};

struct UTaleQuestGrantRewardStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAudioPortalComponent {
	UAudioSpaceDataAsset* AudioInsideSpace; // 0x2b0
	UAudioSpaceDataAsset* AudioOutsideSpace; // 0x2b8
	float PortalTriggerDistance; // 0x2c0
	float InsideRtpcUpdateDistance; // 0x2c4
	float OutsideRtpcUpdateDistance; // 0x2c8
	bool TrackAttachmentToActor; // 0x2cc
};

struct UPopUpAudioDesc {
	FString SfxEventName; // 0x28
	FString EventName; // 0x38
	FString SwitchName; // 0x48
	FString SwitchValue; // 0x58
};

struct UAIAmmoProgressionTypeList {
	TArray<UAIAmmoRankProgression*> AllProgressions; // 0x28
};

struct UCommodityItemDesc {
	FCommoditySelectionType CommodityType; // 0x130
	ECommodityDemand CommodityDemand; // 0x138
};

struct AStrongholdKey {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UTaleQuestUpdateCheckpointStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UParticleModuleOrientationAxisLock {
	EParticleAxisLock LockAxisFlags; // 0x50
};

struct UNPCOnSurfaceStatesDataAsset {
	FName StartState; // 0x28
	FName HidingState; // 0x30
	TArray<FNPCOnSurfaceStateInfo> States; // 0x38
};

struct UIsOnFerryRadialContext {
	bool InvertContext; // 0x28
};

struct UAIWieldableUseInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UParticleModuleLocationPrimitiveSphereGPU {
	FRawDistributionFloat StartRadius; // 0xc8
	FRawDistributionFloat AdditionalStartRadius[0x4]; // 0x100
	char bUseGroupAStartRadiusForAllGroups : 1; // 0x1e0
	FRawDistributionFloat AdditionalVelocityScales[0x4]; // 0x1e8
	char bUseGroupAVelocityScaleForAllGroups : 1; // 0x2c8
	FRawDistributionVector AdditionalStartLocations[0x4]; // 0x2d0
	char bUseGroupAStartLocationForAllGroups : 1; // 0x3b0
};

struct UBattleElevatorEventRoomMechanismCompletedPolicy {
	TArray<AActor*> ActorWithMechanismsComponentsToWaitFor; // 0x28
};

struct UEnvQueryGenerator_KrakenTentacleSpawnLocations {
	FString OptionName; // 0x30
	bool NonShippingOnly; // 0x40
	UEnvQueryItemType* ItemType; // 0x48
};

struct AShipProxyPawn {
	AShip* Ship; // 0x448
	AShip* SpawnTargetShip; // 0x450
};

struct UAppliedStatusToMultipleAIWithFormsStatCondition {
	TArray<UStatusBase*> Status; // 0x28
	int32_t AICountMinimum; // 0x38
	bool AllowAllForms; // 0x3c
	TArray<UClass*> AllowedAIForms; // 0x40
	TArray<UAIClassId*> AIClassesToIgnore; // 0x50
	TArray<UClass*> AllowedSources; // 0x60
};

struct UPlayer {
	APlayerController* PlayerController; // 0x30
	int32_t CurrentNetSpeed; // 0x38
	int32_t ConfiguredInternetSpeed; // 0x3c
	int32_t ConfiguredLanSpeed; // 0x40
};

struct UMinimumCrewCountSpawnRequirement {
	int32_t MinimumCrewCount; // 0x50
};

struct UResolveActorStringReferenceStep {
	UResolveActorStringReferenceStepDesc* Desc; // 0x90
};

struct USunkenCurseArtefactDynamicMaterialComponent {
	uint32_t MaterialElementIndex; // 0xc8
	FName MagicColourPropertyName; // 0xcc
	FName DamageLevelPropertyName; // 0xd4
	FName TimeBasedPropertyName; // 0xdc
	FName HitPositionPropertyName; // 0xe4
	FName CollapseStartTimePropertyName; // 0xec
	UPrimitiveComponent* TargetMesh; // 0xf8
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x100
	AStatueThreatBase* Statue; // 0x110
};

struct UAIItemDropComponentList {
	TArray<UClass*> AllSpawners; // 0x28
};

struct ACargoRunMap {
	int32_t CanvasWidth; // 0x808
	int32_t CanvasHeight; // 0x80c
	UFont* Font; // 0x810
	float FontScale; // 0x818
	float FontLineSpacingScale; // 0x81c
	UCargoRunMapLayout* CargoRunMapLayout; // 0x840
	FCargoRunMapContents Contents; // 0x848
};

struct UButton {
	USlateWidgetStyleAsset* Style; // 0x150
	FButtonStyle WidgetStyle; // 0x158
	FLinearColor ColorAndOpacity; // 0x400
	FLinearColor BackgroundColor; // 0x410
	EButtonClickMethod ClickMethod; // 0x420
	EButtonTouchMethod TouchMethod; // 0x421
	bool IsFocusable; // 0x422
	FScriptMulticastDelegate OnClicked; // 0x428
	FScriptMulticastDelegate OnPressed; // 0x438
	FScriptMulticastDelegate OnReleased; // 0x448
};

struct UEnvQueryTest_Pathfinding {
	EEnvTestPathfinding TestMode; // 0x170
	UEnvQueryContext* Context; // 0x178
	FAIDataProviderBoolValue PathFromContext; // 0x180
	FAIDataProviderBoolValue SkipUnreachable; // 0x1b0
	FAIDataProviderIntValue MaxNumPathSegments; // 0x1e0
	FAIDataProviderBoolValue PassThroughUnreachable; // 0x210
	UNavigationQueryFilter* FilterClass; // 0x240
};

struct UGhostAIFormDataAsset {
	UStaticMesh* GhostShroudStaticMesh; // 0x90
	FName GhostShroudAttachSocketName; // 0x98
};

struct UTaleQuestUnionStepDesc {
	TArray<UTaleQuestStepDesc*> Descs; // 0x80
};

struct UMaterialExpressionLocalDisturbanceTexture {
	FExpressionInput Coordinates; // 0x70
};

struct UTaleAddStormAvoidanceAreaStepDesc {
	FQuestVariableVector Location; // 0x80
	FQuestVariableFloat Radius; // 0x90
};

struct ABaseContinuousAnimatedMechanismAction {
	USceneComponent* Root; // 0x3e0
	USceneComponent* Pivot; // 0x3e8
	FTransformBlendCurve Animation; // 0x3f0
	bool EnableCameraLookAt; // 0x8f0
	FVector MechanismLookAtLocationRelativeToActor; // 0x8f4
	UWwiseObjectPoolWrapper* EmitterPool; // 0x900
	FName MechanismMovementProgressRateOfChangeRTPCName; // 0x908
	UWwiseEvent* MechanismStartedMovingAudioEvent; // 0x910
	UWwiseEvent* MechanismStoppedMovingAudioEvent; // 0x918
	UWwiseEvent* MechanismStoppedInProgressAudioEvent; // 0x920
	UWwiseEvent* MechanismReachedMinimumAudioEvent; // 0x928
	UWwiseEvent* MechanismReachedMaximumAudioEvent; // 0x930
	bool TransformAudioEmitterWithPivot; // 0x938
	bool ParticleSystemsInheritActorScale; // 0x939
	UParticleSystem* MechanismMovingParticleSystem; // 0x940
	FVector MechanismMovingParticleSystemLocation; // 0x948
	FRotator MechanismMovingParticleSystemRotation; // 0x954
	UParticleSystem* MechanismReachedMinimumParticleSystem; // 0x960
	FVector MechanismReachedMinimumParticleSystemLocation; // 0x968
	FRotator MechanismReachedMinimumParticleSystemRotation; // 0x974
	UParticleSystem* MechanismReachedMaximumParticleSystem; // 0x980
	FVector MechanismReachedMaximumParticleSystemLocation; // 0x988
	FRotator MechanismReachedMaximumParticleSystemRotation; // 0x994
	float CompletionThreshold; // 0x9a0
	UParticleSystemComponent* CachedMechanismMovingParticleSystem; // 0x9a8
};

struct UDistributionFloatUniform {
	float Max; // 0x38
	float Min; // 0x3c
};

struct UParticleModuleVectorFieldLocal {
	UVectorField* VectorField; // 0x50
	FVector RelativeTranslation; // 0x58
	FRotator RelativeRotation; // 0x64
	FVector RelativeScale3D; // 0x70
	float Intensity; // 0x7c
	float Tightness; // 0x80
	char bIgnoreComponentTransform : 1; // 0x84
	char bTileX : 1; // 0x84
	char bTileY : 1; // 0x84
	char bTileZ : 1; // 0x84
};

struct UMaterialExpressionFeatureLevelSwitch {
	FExpressionInput Default; // 0x70
	FExpressionInput Inputs[0x4]; // 0xa8
};

struct UIslandEventTrackerComponent {
	TArray<FIslandEventData> EventData; // 0xc8
};

struct USharkAICharacterAudioComponent {
	USharkAICharacterAudioComponentParams* SharkAudioParams; // 0x2e0
	UAIStrategyId* CachedStrategyID; // 0x408
};

struct UCutSceneSubtitlesExecutableAnimMetaData {
	FSceneDialogueStructure SceneDialogueStructure; // 0x30
};

struct ARiggingSystem {
	USceneComponent* Root; // 0x3d8
	UInstancedRopeComponent* InstancedRopes; // 0x3e0
	TArray<FRiggingSystemLine> Lines; // 0x3e8
	TArray<FInstancedRopeParams> Ropes; // 0x3f8
	TArray<UMobileInstancedStaticMeshComponent*> PulleyInstances; // 0x408
	FRiggingSystemPulleyData Pulleys; // 0x418
	TArray<FSocketId> Sockets; // 0x478
	TArray<float> InitialMainRopeLengths; // 0x488
};

struct UIsWieldingItemStatCondition {
	TArray<UItemDesc*> TargetItems; // 0x30
};

struct UAmmoEffectsComponent {
	TArray<UAmmoBaseEffect*> AmmoEffects; // 0x108
	TMap<FName, FDynamicMaterialListContainer> ScalarNameMaterialMap; // 0x118
	FAmmoEffectState AmmoEffectState; // 0x168
};

struct UCargoRunQuestData {
	TArray<UItemDesc*> Crates; // 0x28
	UCargoRunCrateData* DefaultCargoRunCrateData; // 0x38
	UCargoRunMapData* DefaultCargoRunMapData; // 0x40
	TArray<FText> CargoItemsDeliveryNotePluralisation; // 0x48
};

struct UMaterialExpressionTextureBase {
	UTexture* Texture; // 0x70
	EMaterialSamplerType SamplerType; // 0x78
	char IsDefaultMeshpaintTexture : 1; // 0x7c
};

struct UEventRoomParamsDataAsset {
	float AftermathTimer; // 0x28
	bool SpawnPlayerOnShipInsteadOfExitLocation; // 0x2c
	float FailTimer; // 0x30
};

struct AAggressiveGhostShipsEncounterService {
	FAggressiveGhostShipsEncounterServiceDesc Desc; // 0x510
	UAggressiveGhostShipsEncounterServiceParams* Params; // 0x520
	TArray<AAggressiveGhostShipsEncounter*> Encounters; // 0x528
};

struct USirenTridentItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UCharacterInputBinder {
	UInputComponent* InputComponent; // 0x28
};

struct UMaterialExpressionParticleRelativeTime {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UReverbEffect {
	float Density; // 0x28
	float Diffusion; // 0x2c
	float Gain; // 0x30
	float GainHF; // 0x34
	float DecayTime; // 0x38
	float DecayHFRatio; // 0x3c
	float ReflectionsGain; // 0x40
	float ReflectionsDelay; // 0x44
	float LateGain; // 0x48
	float LateDelay; // 0x4c
	float AirAbsorptionGainHF; // 0x50
	float RoomRolloffFactor; // 0x54
};

struct UMerchantCrateCategoryMock {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct ALaunchableProjectile {
	UWaterSplashComponent* WaterSplashComponent; // 0x3f0
	UProjectileMovementComponent* ProjectileComponent; // 0x3f8
	float LaunchLerpTime; // 0x400
	UImpactProjectileId* ImpactProjectileId; // 0x408
	UObject* TrailEffectAboveWater; // 0x410
	UObject* TrailEffectBelowWater; // 0x418
	EVfxRegion TrailVfxRegion; // 0x420
	FVector TrailVFXScale; // 0x424
	FName TrailSocketName; // 0x430
	FName TrailEmitterName; // 0x438
	UWwiseEvent* TrailSfxPlay; // 0x440
	UWwiseEvent* TrailSfxStop; // 0x448
	UWwiseObjectPoolWrapper* TrailSfxPool; // 0x450
	bool DisableStandardCannonFireSfx; // 0x458
	UWwiseEvent* CannonFireSfx; // 0x460
	UWwiseObjectPoolWrapper* CannonFireSfxPool; // 0x468
	bool DestroyWhenEnteringWater; // 0x470
	bool AutoTriggerTrailEffects; // 0x471
	UStaticMeshComponent* StaticMeshComponent; // 0x4b0
	UParticleSystemComponent* TrailEffect; // 0x4b8
	float LaunchSpeed; // 0x4e8
	float GravityScale; // 0x4ec
};

struct UMechanismOneShotEvent_Audio {
	UWwiseEvent* Event; // 0x38
	FWwiseEmitter Emitter; // 0x40
	TScriptInterface<Class> AudioEmitterInterface; // 0x60
};

struct UAmmoStoreComponent {
	int32_t MaxAmmo; // 0xd0
	UWwiseEvent* ReloadSFX; // 0xd8
	UWwiseEvent* RestockSFX; // 0xe0
	int32_t CurrentAmmo; // 0xe8
};

struct UTextureSwitchBySeed {
	FName HashSource; // 0x220
	float FallbackProbability; // 0x228
	FName FallbackReferenceName; // 0x22c
	FStringAssetReference FallbackTexture; // 0x238
	TArray<FTextureSwitchSeedEntry> Entries; // 0x248
};

struct UTaleQuestUpdateBuoyancyAutoSinkSettingForItemStepDesc {
	FQuestVariableItemInfo Item; // 0x80
	bool EnableAutoSink; // 0x90
};

struct UAnimCompress_PerTrackCompression {
	float MaxZeroingThreshold; // 0x60
	float MaxPosDiffBitwise; // 0x64
	float MaxAngleDiffBitwise; // 0x68
	float MaxScaleDiffBitwise; // 0x6c
	TArray<AnimationCompressionFormat> AllowedRotationFormats; // 0x70
	TArray<AnimationCompressionFormat> AllowedTranslationFormats; // 0x80
	TArray<AnimationCompressionFormat> AllowedScaleFormats; // 0x90
	char bResampleAnimation : 1; // 0xa0
	float ResampledFramerate; // 0xa4
	int32_t MinKeysForResampling; // 0xa8
	char bUseAdaptiveError : 1; // 0xac
	char bUseOverrideForEndEffectors : 1; // 0xac
	int32_t TrackHeightBias; // 0xb0
	float ParentingDivisor; // 0xb4
	float ParentingDivisorExponent; // 0xb8
	char bUseAdaptiveError2 : 1; // 0xbc
	float RotationErrorSourceRatio; // 0xc0
	float TranslationErrorSourceRatio; // 0xc4
	float ScaleErrorSourceRatio; // 0xc8
	float MaxErrorPerTrackRatio; // 0xcc
	float PerturbationProbeSize; // 0xd0
};

struct UAthenaAssetSettings {
	TArray<FAssetDelayLoadEntry> DelayLoadedAssets; // 0x28
	TArray<FAssetDelayLoadEntry> SteamOnlyDelayLoadedAssets; // 0x38
	TArray<FString> PhysicsAuditBlueprintExceptions; // 0x48
	TArray<FName> PhysicsAuditExemptedCollisionProfiles; // 0x58
};

struct ULightmassPrimitiveSettingsObject {
	FLightmassPrimitiveSettings LightmassSettings; // 0x28
};

struct UWaitForMechanismActivationStepDesc {
	FQuestVariableActor Action; // 0x80
};

struct UBTService_RunEQSQuery {
	bool OverrideQueryTemplateWithBlackboardValue; // 0x98
	FBlackboardKeySelector OverrideEQSKey; // 0xa0
	UEnvQuery* QueryTemplate; // 0xc8
	TArray<FEnvNamedValue> QueryParams; // 0xd0
	EEnvQueryRunMode RunMode; // 0xe0
	bool ThrottleQueryTimePerFrame; // 0xe1
	float MaxSecondsToSpendOnQueryPerFrame; // 0xe4
};

struct USeasonXPReward {
	uint32_t SeasonXP; // 0x28
};

struct UGameplayDebuggingComponent {
	FString DebugComponentClassName; // 0x590
	int32_t ShowExtendedInformatiomCounter; // 0x5a0
	TArray<int32_t> ReplicateViewDataCounters; // 0x5a8
	FString ControllerName; // 0x5b8
	FString PawnName; // 0x5c8
	FString PawnClass; // 0x5d8
	FString DebugIcon; // 0x5e8
	FString MovementBaseInfo; // 0x5f8
	FString MovementModeInfo; // 0x608
	FString PathFollowingInfo; // 0x618
	FString CurrentAITask; // 0x628
	FString CurrentAIState; // 0x638
	FString CurrentAIAssets; // 0x648
	FString GameplayTasksState; // 0x658
	FString NavDataInfo; // 0x668
	FString AbilityInfo; // 0x678
	FString MontageInfo; // 0x688
	FString BrainComponentName; // 0x698
	FString BrainComponentString; // 0x6a8
	TArray<char> BlackboardRepData; // 0x6b8
	TArray<FVector> PathPoints; // 0x6d8
	TArray<char> PathCorridorData; // 0x6e8
	TArray<char> NavmeshRepData; // 0x708
	TArray<char> EQSRepData; // 0x718
	FVector SensingComponentLocation; // 0x728
	int32_t NextPathPointIndex; // 0x734
	char bIsUsingPathFollowing : 1; // 0x738
	char bIsUsingCharacter : 1; // 0x738
	char bIsUsingBehaviorTree : 1; // 0x738
	char bIsUsingAbilities : 1; // 0x738
	AActor* TargetActor; // 0x740
};

struct UArenaWorldMarker {
	FVector_NetQuantize MarkerVelocity; // 0x40
	ERomeBeaconAttachType AttachType; // 0x4c
	AActor* TrackedLocationOwner; // 0x50
	AActor* TrackedVelocityOwner; // 0x58
};

struct UAthenaCheatManager {
	ACinematicCameraController* CinematicCameraController; // 0x78
	ACinematicCameraController* CinematicCameraControllerClass; // 0x80
	TArray<FWorldMarkerDesc> CreatedWorldMarkers; // 0xb0
	UGameEventSchedulerSettingsAsset* DebugSchedulerSettings; // 0xc0
	AServerPerformanceReplicator* ServerPerformanceReplicator; // 0xc8
	float TeleportToDigsiteHeightOffset; // 0xd0
	FShipCustomizationPersistenceModel ShipCustomizationModel; // 0xf0
	FShipPartDamagePersistenceModel WheelPersistenceModel; // 0x100
	FShipPartDamagePersistenceModel CapstanPersistenceModel; // 0x120
	TArray<FShipPartDamagePersistenceModel> MastPersistenceModels; // 0x140
	FHullDamagePersistenceModel HullDamageModel; // 0x150
	FHullCharringPersistenceModel HullCharringModel; // 0x160
	FMapTablePersistenceModel MapTablePersistenceModel; // 0x170
};

struct ALogVisualizerHUD {
	FColor WhiteColor; // 0x3d0
	FColor GreenColor; // 0x3d4
	FColor RedColor; // 0x3d8
	APlayerController* PlayerOwner; // 0x3e0
	char bLostFocusPaused : 1; // 0x3e8
	char bShowHUD : 1; // 0x3e8
	char bShowDebugInfo : 1; // 0x3e8
	char bShowHitBoxDebugInfo : 1; // 0x3e8
	char bShowOverlays : 1; // 0x3e8
	char bEnableDebugTextShadow : 1; // 0x3e8
	TArray<AActor*> PostRenderedActors; // 0x3f0
	float LastHUDRenderTime; // 0x400
	float RenderDelta; // 0x404
	TArray<FName> DebugDisplay; // 0x408
	TArray<FName> ToggledDebugCategories; // 0x418
	UCanvas* Canvas; // 0x428
	UCanvas* DebugCanvas; // 0x430
	TArray<FDebugTextInfo> DebugTextList; // 0x438
	AActor* ShowDebugTargetDesiredClass; // 0x448
	AActor* ShowDebugTargetActor; // 0x450
};

struct UEditableTextBox {
	FText Text; // 0x138
	DelegateProperty TextDelegate; // 0x170
	FEditableTextBoxStyle WidgetStyle; // 0x180
	USlateWidgetStyleAsset* Style; // 0x9e0
	FText HintText; // 0x9e8
	DelegateProperty HintTextDelegate; // 0xa20
	FSlateFontInfo Font; // 0xa30
	FLinearColor ForegroundColor; // 0xa70
	FLinearColor BackgroundColor; // 0xa80
	FLinearColor ReadOnlyForegroundColor; // 0xa90
	bool IsReadOnly; // 0xaa0
	bool IsPassword; // 0xaa1
	float MinimumDesiredWidth; // 0xaa4
	FMargin Padding; // 0xaa8
	bool IsCaretMovedWhenGainFocus; // 0xab8
	bool SelectAllTextWhenFocused; // 0xab9
	bool RevertTextOnEscape; // 0xaba
	bool ClearKeyboardFocusOnCommit; // 0xabb
	bool SelectAllTextOnCommit; // 0xabc
	FScriptMulticastDelegate OnTextChanged; // 0xac0
	FScriptMulticastDelegate OnTextCommitted; // 0xad0
};

struct UBuriedItemDecal {
	FName FadeTimeParameterName; // 0x2e0
	FName FadeDistanceStartParameterName; // 0x2e8
	float FadeDistanceStart; // 0x2f0
	FName FadeDistanceEndParameterName; // 0x2f4
	float FadeDistanceEnd; // 0x2fc
	UMaterialInstanceDynamic* Material; // 0x300
};

struct ULandscapeSplineSegment {
	FLandscapeSplineSegmentConnection Connections[0x2]; // 0x28
	FInterpCurveVector SplineInfo; // 0x58
	TArray<FLandscapeSplineInterpPoint> Points; // 0x70
	FBox Bounds; // 0x80
	TArray<USplineMeshComponent*> LocalMeshComponents; // 0xa0
};

struct UAthenaAIAbilityHandlerComponent {
	TArray<FAthenaAIAbilityDamageStage> AbilityStages; // 0x178
	TArray<UAthenaAIAbility*> AIAbilities; // 0x188
	TArray<UAthenaAIAbilityType*> ReadyAbilitiesPool; // 0x198
	UAthenaAIAbilityType* DebugAlwaysOnAbility; // 0x1c8
	UAthenaAIAbilityType* RequiresActivation; // 0x1d0
};

struct AConstellation {
	float ShaderFadeIn; // 0x3dc
	float ShaderFadeOut; // 0x3e0
	float ConstellationEffectSpeed; // 0x3e4
	float InitialRevealAudioThreshold; // 0x3e8
	float FullyRevealedAudioThreshold; // 0x3ec
	UStaticMeshComponent* ConstellationMesh; // 0x3f0
	UWwiseEvent* StartBespokeSFX; // 0x3f8
	UWwiseEvent* StopBespokeSFX; // 0x400
	UWwiseEvent* StartInitialRevealSFX; // 0x410
	UWwiseEvent* StopInitialRevealSFX; // 0x418
	UWwiseEvent* StartFullyRevealedSFX; // 0x428
	UWwiseEvent* StopFullyRevealedSFX; // 0x430
	UWwiseEvent* StartInitialRevealMusic; // 0x440
	UWwiseEvent* StopInitialRevealMusic; // 0x448
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x458
};

struct APirateGeneratorService {
	int32_t MaxConcurrent; // 0x3d8
	FStringAssetReference RandomOutfitDataAssetPath; // 0x3e0
	int32_t MaxCachedMeshes; // 0x3f0
	UWardrobeOutfitDataAsset* RandomOutfitDataAsset; // 0xa38
};

struct UAudioComponent {
	USoundBase* Sound; // 0x2b0
	TArray<FAudioComponentParam> InstanceParameters; // 0x2b8
	USoundClass* SoundClassOverride; // 0x2c8
	char bAutoDestroy : 1; // 0x2d0
	char bStopWhenOwnerDestroyed : 1; // 0x2d0
	char bShouldRemainActiveIfDropped : 1; // 0x2d0
	char bAllowSpatialization : 1; // 0x2d0
	char bOverrideAttenuation : 1; // 0x2d0
	char bIsUISound : 1; // 0x2d0
	float PitchModulationMin; // 0x2d4
	float PitchModulationMax; // 0x2d8
	float VolumeModulationMin; // 0x2dc
	float VolumeModulationMax; // 0x2e0
	float VolumeMultiplier; // 0x2e4
	float PitchMultiplier; // 0x2e8
	float HighFrequencyGainMultiplier; // 0x2ec
	USoundAttenuation* AttenuationSettings; // 0x2f0
	FAttenuationSettings AttenuationOverrides; // 0x2f8
	FScriptMulticastDelegate OnAudioFinished; // 0x3c0
	DelegateProperty OnQueueSubtitles; // 0x3e8
};

struct USpireServiceParams {
	UActorSpawnData* OnCancelFakeSpire; // 0x28
};

struct UTaleQuestCargoRunContractsService {
	TArray<UTaleQuestCargoRunContract*> Contracts; // 0x60
};

struct UHoleDataAsset {
	TArray<FMaxHolePerIslandDataAsset> MaxHolePerIslandData; // 0x28
	int32_t DefaultMaxHoles; // 0x38
	int32_t MaxNumOverlappingHolesAllowed; // 0x3c
	bool AllowHoleOverlapping; // 0x40
};

struct UBuffReceiverComponent {
	bool CanReceiveBuff; // 0xd0
};

struct UBaitRadialContentRule {
	float RadialIconScale; // 0xd0
	FVector2D RadialIconOffset; // 0xd4
	UInventoryItemDescToSlotRemappingPolicyAsset* RemappingAsset; // 0xe0
	TArray<AItemInfo*> MappedSlots; // 0xe8
	UItemCategory* BaitItemCategory; // 0xf8
};

struct UAILoadoutWithNonStoreableAsset {
	UItemDesc* NonStoreableItem; // 0x58
};

struct UBTService_SetBoolBlackboardValueToTrueOnCeaseRelevant {
	FBlackboardKeySelector BoolValueKey; // 0x70
};

struct UCategoryDefaults {
	TArray<FCategoryDefaultsUnit> CategoryDefaults; // 0x28
};

struct ALandmarkCapsule {
	UShapeComponent* DefaultShape; // 0x658
};

struct UTaleQuestRemoveMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableVector Location; // 0x88
};

struct UDeliverableRedirectionContextHandlerBase {
	UDeliverableRedirectionDestinationDescriptorBase* DestinationDescriptor; // 0x28
};

struct UGameMapsSettings {
	FString EditorStartupMap; // 0x28
	FString LocalMapOptions; // 0x38
	FString TransitionMap; // 0x48
	bool bUseSplitscreen; // 0x58
	ETwoPlayerSplitScreenType TwoPlayerSplitscreenLayout; // 0x59
	EThreePlayerSplitScreenType ThreePlayerSplitscreenLayout; // 0x5a
	FStringClassReference GameInstanceClass; // 0x60
	FString GameDefaultMap; // 0x70
	FString ServerDefaultMap; // 0x80
	FStringClassReference GlobalDefaultGameMode; // 0x90
	FStringClassReference GlobalDefaultServerGameMode; // 0xa0
};

struct UBTService_DetermineEngageTarget {
	FBlackboardKeySelector BlockChangeEngageOptionKey; // 0x70
};

struct UAIInteractableComponent {
	UAIInteractableType* Type; // 0xd0
	FVector DetachOffsetFromOwner; // 0xd8
	bool CanHaveTarget; // 0xe4
};

struct UBTService_DisableStun {
	float Interval; // 0x60
	float RandomDeviation; // 0x64
	char bCallTickOnSearchStart : 1; // 0x68
	char bRestartTimerOnEachActivation : 1; // 0x68
};

struct UWaitForUnlockStepDesc {
	FQuestVariableActor LockedActor; // 0x80
};

struct UStatusResponsePlayAudioOneShotOnLocalClient {
	UWwiseEvent* OneShotAudioEvent; // 0x30
};

struct UKrakenAICharacterAudioComponent {
	UKrakenAICharacterAudioComponentParams* AICharacterAudioParams; // 0x2e0
	FWwiseEmitter KrakenBodyEmitter; // 0x2e8
};

struct UAmmoTransferMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UEnvQueryTest_IsAngleInRange2D {
	FEnvDirection LineA; // 0x170
	FEnvDirection LineB; // 0x190
	FAIDataProviderFloatValue MinAngleDegrees; // 0x1b0
	FAIDataProviderFloatValue MaxAngleDegrees; // 0x1e0
};

struct UPuzzleStatueBaseAudioParamsDataAsset {
	UWwiseEvent* StatueActivated; // 0x28
	UWwiseObjectPoolWrapper* PuzzleStatueAudioPool; // 0x30
};

struct UEmblemComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AAudioIslandStaticMeshAssociatorBase {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct USoundNodeConcatenator {
	TArray<float> InputVolume; // 0x38
};

struct UInterpTrackVectorBase {
	FInterpCurveVector VectorTrack; // 0x70
	float CurveTension; // 0x88
};

struct UPetPartSizeMappingsDataAsset {
	TArray<FPetPartSizeMapping> Mappings; // 0x28
	FFloatRange ConcealedScaleBounds; // 0x38
};

struct UBTTask_InteractWith {
	UNotificationInputId* NotificationId; // 0x88
};

struct UTrackedActorService {
	TArray<AActor*> ActorsAwaitingRegistration; // 0x30
};

struct UStatConditionTargetSelector {
	EStatConditionTarget Target; // 0x28
};

struct UKrakenTentacleAIAudioComponentParams {
	UWwiseObjectPoolWrapper* TentacleEmitterPool; // 0x28
	UWwiseObjectPoolWrapper* MouthEmitterPool; // 0x30
	UWwiseEvent* PlayKrakenTentacleEmerge; // 0x38
	UWwiseEvent* PlayKrakenTentacleSubmerge; // 0x40
	UWwiseEvent* PlayKrakenTentacleSuckTell; // 0x48
	UWwiseEvent* StopKrakenTentacleSuckTell; // 0x50
	UWwiseEvent* PlayKrakenTentacleSuck; // 0x58
	UWwiseEvent* StopKrakenTentacleSuck; // 0x60
	UWwiseEvent* PlayKrakenTentacleMouthAmbience; // 0x68
	UWwiseEvent* StopKrakenTentacleMouthAmbience; // 0x70
	UWwiseEvent* PlayPlayerInAirWind; // 0x78
	UWwiseEvent* StopPlayerInAirWind; // 0x80
	UWwiseEvent* PlayKrakenCatchPlayer; // 0x88
	UWwiseEvent* PlayKrakenSpitPlayer; // 0x90
	FName KrakenSuckFactorRtpc; // 0x98
	UWwiseEvent* PlayKrakenTentacleWrapTell; // 0xa0
	UWwiseEvent* StopKrakenTentacleWrapTell; // 0xa8
};

struct ABlockingVolume {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct UAICombatDialogue {
	ASceneDialogueCoordinator* DialogueCoordinator; // 0x28
	USceneDialogueData* DialogueData; // 0x30
	int32_t NumAISlots; // 0x38
	float ChatMaxDistance; // 0x3c
	float RemoveAIDelay; // 0x40
	float EndDelay; // 0x44
	USimpleDialogueStateProvider* StateProvider; // 0x48
};

struct ULevelAssetCachingService {
	UObject* CurrentRegion; // 0x40
	TScriptInterface<Class> AssetCache; // 0x48
	TScriptInterface<Class> RegionLookup; // 0x58
	TWeakObjectPtr<APawn> CachedPawn; // 0x68
};

struct UIntentComponent {
	char AckToken; // 0xd8
	bool RequiresHandshake; // 0xd9
	float ServerIntent; // 0xdc
	float LocalIntent; // 0xe0
};

struct UDitherComponent {
	bool FindMeshOnOwner; // 0xd0
	float FadeTime; // 0xd4
	TMap<UMeshComponent*, FDynamicMaterialsList> DynamicMaterialsPerMeshComponent; // 0xe8
	bool PurgeOverrideMatsOnDynamicMatMeshLoaded; // 0x1bc
	bool FadeInOnStart; // 0x1bd
};

struct ALadder {
	UStaticMeshComponent* MeshComponent; // 0x428
	USplineComponent* OnTopSplineComponent; // 0x430
	USplineComponent* OffTopSplineComponent; // 0x438
	float MaxDistFromLadderTopToClassifyAsTopDocking; // 0x440
	FVector InteractOffset; // 0x444
	FLadderDefinition LadderDefinition; // 0x450
	UPhysicalMaterial* LadderPhysicsMaterial; // 0x470
	UPhrasesRadialDataAsset* Phrases; // 0x478
	float RepeatExecutionThreshold; // 0x480
};

struct UPlayNpcAnimationResourceStepDesc {
	FQuestVariableActor TargetNpc; // 0x80
	FQuestVariableActor PlaceableReaction; // 0x90
	UPlayNpcAnimationResource* PlayNpcAnimationResource; // 0xa0
};

struct UPremiumCatalogBundleSetDataAsset {
	FText PageTitle; // 0x108
	FStringAssetReference PageIcon; // 0x140
	FText BundleTitle; // 0x150
	FText Saving; // 0x188
	UCatalogOfferDataAsset* Offer; // 0x1c0
	TArray<FPremiumShopBundleOfferItem> BundleItems; // 0x1c8
	FPremiumCatalogItemSet AdditionalItems; // 0x1d8
};

struct UTaleQuestBlueprintStep {
	UBlueprintStepBase* Step; // 0x90
};

struct UReviveGhostAnimationData {
	UReviveGhostAnimationDataAsset* ReviveAnimationsDataAsset; // 0x28
};

struct UObjectLibrary {
	UObject* ObjectBaseClass; // 0x28
	bool bHasBlueprintClasses; // 0x30
	TArray<UObject*> Objects; // 0x38
	TArray<TWeakObjectPtr<UObject>> WeakObjects; // 0x48
	bool bUseWeakReferences; // 0x58
	bool bIsFullyLoaded; // 0x59
};

struct UIsCampaignActiveNPCDialogConditional {
	TArray<FName> RequiredCampaigns; // 0x30
};

struct USoundNodeGroupControl {
	TArray<int32_t> GroupSizes; // 0x38
};

struct UMapMarkMappingDataAsset {
	TArray<FUserSettingsMapMarkDefinition> MarkDefinitions; // 0x28
};

struct UMechanismVFXEmitterComponent {
	FColor ArrowColor; // 0x588
	float ArrowSize; // 0x58c
	bool bIsScreenSizeScaled; // 0x590
	float ScreenSize; // 0x594
	char bTreatAsASprite : 1; // 0x598
};

struct UNativeWidgetHost {
	bool bIsVariable; // 0x28
	bool bCreatedByConstructionScript; // 0x29
	UPanelSlot* Slot; // 0x30
	bool bIsEnabled; // 0x38
	DelegateProperty bIsEnabledDelegate; // 0x3c
	FText ToolTipText; // 0x50
	DelegateProperty ToolTipTextDelegate; // 0x88
	UWidget* ToolTipWidget; // 0x98
	DelegateProperty ToolTipWidgetDelegate; // 0xa0
	ESlateVisibility Visiblity; // 0xb0
	ESlateVisibility Visibility; // 0xb1
	DelegateProperty VisibilityDelegate; // 0xb4
	char bOverride_Cursor : 1; // 0xc4
	EMouseCursor Cursor; // 0xc8
	bool bIsVolatile; // 0xc9
	FWidgetTransform RenderTransform; // 0xcc
	FVector2D RenderTransformPivot; // 0xe8
	UWidgetNavigation* Navigation; // 0xf0
	TArray<UPropertyBinding*> NativeBindings; // 0x128
};

struct AMerchantCrateFilledItemProxy {
	UStorageContainerComponent* StorageContainerComponent; // 0x7d8
	bool FillCrateToCapacity; // 0x7e0
};

struct UGetVeilOfTheAncientsStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UDeliverableComponent {
	UDeliverableRequirementsDataAsset* DeliveryRequirementsAsset; // 0xd8
};

struct UEnvQueryGenerator_PointsAtContext {
	UEnvQueryContext* Context; // 0x90
};

struct UStorageContainerMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct UInstrumentKeyComponent {
	int32_t KeyID; // 0x5f8
	FNavigationOptions NavigationOptions; // 0x5fc
	bool BeingHeld; // 0x60c
	UMaterialInstanceDynamic* DynamicMaterialInstance; // 0x610
	bool IsHighlighted; // 0x618
	float HighlightValue; // 0x61c
	float PressedValue; // 0x620
	FName DepressionParamName; // 0x624
	UWwiseEvent* KeyPressSFX; // 0x630
	UWwiseEvent* KeyReleaseSFX; // 0x638
};

struct UWeightedRewardTableAsset {
	FWeightedRewardTable RewardTable; // 0x28
};

struct UBTDecorator_IsAbilityAvailable {
	UAthenaAIAbilityType* AIAbilityType; // 0x68
};

struct UBTService_DisableDamageResponses {
	float Interval; // 0x60
	float RandomDeviation; // 0x64
	char bCallTickOnSearchStart : 1; // 0x68
	char bRestartTimerOnEachActivation : 1; // 0x68
};

struct UPlayNpcAnimationStepDesc {
	FQuestVariableActor TargetNpc; // 0xb8
	FText SpeakingActorLocalisableName; // 0xc8
};

struct UShipHullCollisionComponent {
	float SolidCollisionRetainTime; // 0xc8
	float LandCollisionRetainTime; // 0xcc
	UCurveFloat* ImpactStrengthToDamageLevelMapping; // 0xd0
	float MinIntervalBetweenHitDamage; // 0xd8
	float MinIntervalBetweenLandscapeHitDamage; // 0xdc
	float MinIntervalBetweenShipHitDamage; // 0xe0
	UShipHullDamageDataAsset* HullDamageDataAsset; // 0xe8
	UCurveFloat* ShipFwdSpeedToFeedbackAmplitude; // 0xf0
	TArray<UForceFeedbackEffect*> HitLandForceFeedbackEffects; // 0xf8
	UCurveFloat* FeedbackStrengthToRumbleIndexMapping; // 0x108
	UCameraShake* CameraShake; // 0x110
	float MinIntervalBetweenHitFeedback; // 0x118
	UWwiseEvent* StartScrapingEvent; // 0x120
	UWwiseEvent* StopScrapingEvent; // 0x128
	UWwiseEvent* BarrelBumpEvent; // 0x130
	UWwiseObjectPoolWrapper* ShipDamagePool; // 0x138
	FName ShipDamageImpactRtpc; // 0x140
	float MaxIntervalToDetermineAudioScrape; // 0x148
	float MinSampledSpeedMagnitudeForMaxScrapeAudio; // 0x14c
	AShip* Ship; // 0x160
};

struct UPlayerCompanyComponent {
	FPlayerCompanyProgressCache CompanyProgressCache; // 0x2b8
};

struct AInteractableLightMock {
	UInteractableLightParameters* InteractableLightParameters; // 0x470
	UWwiseEvent* SfxSwitchOn; // 0x478
	UWwiseEvent* SfxSwitchOff; // 0x480
	UWwiseEvent* SfxBurningPlay; // 0x488
	UWwiseEvent* SfxBurningStop; // 0x490
	UWwiseEvent* SfxSetFlame; // 0x498
	UWwiseObjectPoolWrapper* SfxPool; // 0x4a0
	FName SfxEmitterName; // 0x4a8
	float InteractionRadius; // 0x4b0
	FLightData LightData; // 0x4b4
	FObjectMessagingDispatcher ObjectMessageDispatcher; // 0x4b8
};

struct UTaleQuestAddCargoRunMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableName IslandName; // 0x88
	FQuestVariableInt NumItems; // 0x98
	FQuestVariableGuid NPCId; // 0xa8
	UCargoRunMapLayout* Layout; // 0xb8
};

struct UShipTelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UDoesCompanyNPCNameContainStatCondition {
	FName CompanyNPCNameSubString; // 0x30
};

struct UAthenaSpringArmComponentParams {
	float CameraDistanceFromPlayer; // 0x28
	float CameraVerticalOffset; // 0x2c
	float CameraCollisionProbeSize; // 0x30
	ECollisionChannel CameraCollisionProbeCollisionChannel; // 0x34
	TArray<FCameraSpringArmPlayModeParameters> PlayModeSettings; // 0x38
	float CameraMinPitch; // 0x48
	float CameraMaxPitch; // 0x4c
	float CameraDefaultPitch; // 0x50
	float CameraDefaultYaw; // 0x54
	float CameraPitchSpeed; // 0x58
	float CameraYawSpeed; // 0x5c
	float CameraConstantYawSpeed; // 0x60
	bool EnableRotationLag; // 0x64
	float RotationLagSpeed; // 0x68
	bool ZoomEnabled; // 0x6c
	float ZoomSpeedGamepad; // 0x70
	float ZoomSpeedMouse; // 0x74
	float ZoomTimeout; // 0x78
	float ZoomMinArmLengthFactor; // 0x7c
	float ZoomBlend; // 0x80
	bool AllowSmoothZoomedInOffsetBlend; // 0x84
	float SmoothZoomedInInterpolaionValue; // 0x88
};

struct USpawnPhasedActorWithTransformStepBaseDesc {
	UClass* Actor; // 0x80
	bool MarkAsCritical; // 0xa0
	FText CriticalActorLostMessage; // 0xa8
	FQuestVariableActor ActorVar; // 0xe0
};

struct UBTTask_AthenaRunEQSQueryFromBlackboard {
	FBlackboardKeySelector EQSBlackboardKey; // 0x100
};

struct UConsoleSettings {
	int32_t MaxScrollbackSize; // 0x28
	TArray<FAutoCompleteCommand> ManualAutoCompleteList; // 0x30
	TArray<FString> AutoCompleteMapPaths; // 0x40
};

struct AHalfSkellyInteractableObject {
	UInteractableComponent* InteractableComponent; // 0x460
	USkeletalMeshComponent* SkeletalMeshComponent; // 0x468
	FText HalfSkellyName; // 0x470
};

struct UShapeComponent {
	FColor ShapeColor; // 0x588
	UBodySetup* ShapeBodySetup; // 0x590
	char bDrawOnlyIfSelected : 1; // 0x598
	char bShouldCollideWhenPlacing : 1; // 0x598
	char bDynamicObstacle : 1; // 0x598
	UNavArea* AreaClass; // 0x5a0
};

struct ALiquidProjectile {
	ECollisionChannel ObjectTypeChannelToEnableInShip; // 0x608
	UFireGridCellSelectionParamsDataAsset* DousingParameters; // 0x610
	TArray<FStatus> StatusesToApply; // 0x618
	FName LiquidProjectileNoiseTag; // 0x628
	float LiquidProjectileNoiseRadius; // 0x630
	FLiquidContents Contents; // 0x638
};

struct UEmoteInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMovieSceneSection {
	FMovieSceneSectionEvalOptions EvalOptions; // 0x80
	float StartTime; // 0x84
	float EndTime; // 0x88
	int32_t RowIndex; // 0x8c
	int32_t OverlapPriority; // 0x90
	char bIsActive : 1; // 0x94
	char bIsLocked : 1; // 0x94
	char bIsInfinite : 1; // 0x94
};

struct ADroppedPouchItemProxy {
	UWwiseEvent* OnPouchOpenedSfx; // 0x798
	FWwiseEmitter OpenPouchEmitter; // 0x7a0
	ETrackedActorType TrackedActorType; // 0x7c0
	UDitherComponent* DitherComponent; // 0x7c8
	float FadeDuration; // 0x7d0
};

struct ACursedCaptainsSkullItemInfo {
	FScriptMulticastDelegate OnNewAnimatableRepresentation; // 0x720
	UAnimNotifyWwiseEmitterComponent* AnimNotifyWwiseEmitterComponent; // 0x730
	UCutsceneComponent* CutsceneComponent; // 0x738
};

struct UGenericPartDescAsset {
	FGenericPartDesc GenericPartDesc; // 0x28
};

struct UAnimNotifyState_PropagateCurveValuesToMaterials {
	TArray<FCurveUpdateValues> CurveValues; // 0x28
	bool DoNotPropagteCurveValues; // 0x38
};

struct UStatusResponseSetBlackboardFloatKey {
	FName BlackboardFloatKeyName; // 0x30
	float ValueWhenActive; // 0x38
	bool ShouldClearKeyOnEnd; // 0x3c
};

struct USpinBoxWidgetStyle {
	FSpinBoxStyle SpinBoxStyle; // 0x30
};

struct AHungeringDeep {
	float TickDelay; // 0x3d8
	int32_t RequiredShantyCount; // 0x3dc
	USphereComponent* SpawnableVolume; // 0x3e0
	UClothingDesc* RequiredTattoo; // 0x3e8
	FName RequiredShanty; // 0x3f0
};

struct URevealerComponent {
	bool IsMultiplierActive; // 0xd0
	float VisibilityDistanceAddition; // 0xd4
	float AnimationDistanceAddition; // 0xd8
	float VisibilityAdditionChangeSpeed; // 0xdc
	float RevealStartTime; // 0xe0
	UObject* TargetGameStateObject; // 0xe8
};

struct UBillboardComponent {
	UTexture2D* Sprite; // 0x588
	char bIsScreenSizeScaled : 1; // 0x590
	float ScreenSize; // 0x594
	float U; // 0x598
	float UL; // 0x59c
	float V; // 0x5a0
	float VL; // 0x5a4
};

struct USpawnCollectableQuestObjectStepFromLocationDesc {
	FQuestVariableVector ItemLocation; // 0x98
};

struct USeatStat_IslandVolcanoActive {
	FName VolcanoIslandName; // 0x48
};

struct UPlayerLoadoutAsset {
	FClothingLoadout ClothingLoadout; // 0x50
	FPetLoadout PetLoadout; // 0x60
};

struct UAthenaAIAbilityStageParams {
	float AbilityCooldownSpeedMultiplier; // 0x28
	float DamageRequiredForNextIntervalMultiplier; // 0x2c
	bool OverrideParams; // 0x30
	bool AutoActivateOnStageTransition; // 0x31
	UAthenaAIAbilityType* TypeClass; // 0x38
};

struct UMeshAnimatorComponent {
	bool SyncWithServer; // 0xc8
	TArray<FMeshAnimatorAnimationEntry> Animations; // 0xd0
	FMeshAnimatorSyncData ServerSyncData; // 0xe0
	FScriptMulticastDelegate OnAnimationFinishedDelegate; // 0x108
	FMeshAnimatorInstance AnimationInstance; // 0x120
};

struct USoundNodeSwitch {
	FName IntParameterName; // 0x38
};

struct UWaitUntilAnyParticipantEntersRadiusStep {
	float DurationBetweenChecks; // 0x80
	FQuestVariableVector Location; // 0x88
	FQuestVariableFloat Radius; // 0x98
};

struct UTaleQuestFireEventStepDesc {
	UObject* Dispatcher; // 0x80
	FNativeAndUserDefinedStructSelector EventType; // 0x88
	TMap<FName, FName> ArgumentMappings; // 0x90
};

struct UBTTask_RunBehavior {
	UBehaviorTree* BehaviorAsset; // 0x60
};

struct UGlitterBeardTelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMovieScene3DTransformSection {
	FRichCurve Translation[0x3]; // 0xa0
	FRichCurve Rotation[0x3]; // 0x208
	FRichCurve Scale[0x3]; // 0x370
};

struct AAshenWindsSkullItemInfo {
	UFlamethrowerChargeComponent* FlamethrowerChargeComponent; // 0x708
	TArray<FAshenWindsSkullRewardLevel> Rewards; // 0x710
};

struct UBTService_TriggerNotifications {
	UNotificationInputId* EnterBranchNotificationId; // 0x70
	UNotificationInputId* LeaveBranchNotificationId; // 0x78
};

struct UDeliverableRedirectionCompositeContext {
	TArray<UDeliverableRedirectionContextBase*> Contexts; // 0x28
};

struct UMovieSceneCinematicShotTrack {
	TArray<UMovieSceneSection*> Sections; // 0x88
};

struct UPetsSettings {
	FStringAssetReference PetHangoutSpotsDataAsset; // 0x28
	FStringAssetReference PetListingDataAsset; // 0x38
	FStringAssetReference PetsServiceParamsDataAsset; // 0x48
	FStringAssetReference PetSpawnDefinitionsDataAsset; // 0x58
	TArray<EAthenaAnimationPetRoamingState> ExcludedStatesForRoamingAssetGeneration; // 0x68
};

struct UBTTask_SetupAITargetWeaponForNextShot {
	FBlackboardKeySelector Interactable; // 0x60
	FBlackboardKeySelector TargetForInteractable; // 0x88
	FBlackboardKeySelector TargetRelativeAimVector; // 0xb0
};

struct USpireStreamedLevelDataAsset {
	UAthenaStreamedLevelDataAsset* StreamedLevel; // 0x28
	TArray<FSpireEntry> Entries; // 0x30
	FName FeatureToggle; // 0x40
};

struct UUITelemetryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UMaterialExpressionOneMinus {
	FExpressionInput Input; // 0x70
};

struct UInterpTrackFloatBase {
	FInterpCurveFloat FloatTrack; // 0x70
	float CurveTension; // 0x88
};

struct UNPCDialogOptionSellBooty {
	FText Text; // 0x80
};

struct UQuitMatchCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UParticipantRadiusTrackerStep {
	UParticipantRadiusTrackerStepDesc* Desc; // 0x90
};

struct UPersistentSalvageItemSpawnComponentMock {
	float RefreshItemsRate; // 0x548
};

struct UBarrelsOfPlentySeaClueCreator {
	int32_t LootItemSpawnXYDistanceFromClueIncrementMin; // 0x30
	int32_t LootItemSpawnXYDistanceFromClueIncrementMax; // 0x34
};

struct UGeneralProjectSettings {
	FString CompanyName; // 0x28
	FString CompanyDistinguishedName; // 0x38
	FString CopyrightNotice; // 0x48
	FString Description; // 0x58
	FString Homepage; // 0x68
	FString LicensingTerms; // 0x78
	FString PrivacyPolicy; // 0x88
	FGuid ProjectID; // 0x98
	FString ProjectName; // 0xa8
	FString ProjectVersion; // 0xb8
	FString SupportContact; // 0xc8
	FText ProjectDisplayedTitle; // 0xd8
};

struct UMaterialExpressionFmod {
	FExpressionInput A; // 0x70
	FExpressionInput B; // 0xa8
};

struct UInterpTrackVectorProp {
	FName PropertyName; // 0x90
};

struct UNPCDialogPredicateHasSubsetOfEntitlements {
	TArray<UEntitlementDesc*> EntitlementsSet; // 0x38
	int32_t MinimumNumberSatisfied; // 0x48
};

struct UNetConnection {
	TArray<UChildConnection*> Children; // 0x50
	UNetDriver* Driver; // 0x60
	UPackageMap* PackageMap; // 0x68
	TArray<UChannel*> OpenChannels; // 0x70
	TArray<AActor*> SentTemporaries; // 0x80
	AActor* ViewTarget; // 0x90
	AActor* OwningActor; // 0x98
	int32_t MaxPacket; // 0xa0
	char InternalAck : 1; // 0xa4
	double LastReceiveTime; // 0x3a0
	int32_t MaxDormantActorsCheckedFromRelevancy; // 0x34468
	TArray<UChannel*> DeferredCloseChannels; // 0x344c0
};

struct UVoyageDescDataAsset {
	TArray<FChapterQuests> Chapters; // 0x28
	TArray<FFeatureToggledChapters> FeatureToggledChapters; // 0x38
	FText Title; // 0x48
	FText Description; // 0x80
	FText LockedDescription; // 0xb8
	FStringAssetReference KeyArtUrl; // 0xf0
	FStringAssetReference IconUrl; // 0x100
	UCompany* Company; // 0x110
	bool IsEmergent; // 0x118
	bool IsTale; // 0x119
	bool IsStarlightTale; // 0x11a
	bool IsCrossWorld; // 0x11b
	FViewVoyageBanners ViewVoyageBanners; // 0x11c
	bool DoNotNotifyParticipantsOnVoyageComplete; // 0x11e
	int32_t Rank; // 0x120
	TArray<FPlayerStat> VoyageCompletionStats; // 0x128
	TArray<FPlayerStat> ReapersMarkCompletionStats; // 0x138
	FName CampaignId; // 0x148
	FStringAssetReference TaleCancelVoteMesh; // 0x150
	EEmergentVoyageSource EmergentSource; // 0x160
};

struct UCustomMeshComponent {
	TArray<UMaterialInterface*> OverrideMaterials; // 0x588
};

struct UAISpawnerList {
	TArray<UAISpawner*> Spawners; // 0x28
};

struct UAnimationDataOverriderComponent {
	FStringAssetReference AnimationDataStoreAssetReference; // 0xd0
	UAnimationDataStoreAsset* AnimationDataStoreAsset; // 0xe0
};

struct UTankardRefillerComponent {
	int32_t Capacity; // 0xc8
	EActionDisplayPriority ActionDisplayPriority; // 0xcc
	UNotificationInputId* NotificationInputId; // 0xd0
	int32_t RemainingGrogs; // 0xd8
};

struct UAthenaAITypeListDataAsset {
	TArray<FAITypeData> AITypes; // 0x28
	TArray<FStringClassReference> AdditionalAIActors; // 0x38
};

struct UAddMarkToTornMapStepDescBase {
	FQuestVariableGuid MapId; // 0x80
	FTaleQuestVariableMapMarkType MapMark; // 0x90
};

struct UWaterSlideAudioParams {
	UWwiseEvent* WaterSlideStart; // 0x28
	UWwiseEvent* WaterSlideEnd; // 0x30
	UWwiseEvent* WaterSlideIsEndOneShot; // 0x38
	UWwiseEvent* WaterSlideChangeForkOneShot; // 0x40
	FName PlayerSpeedOnWaterSlideRTPC; // 0x48
	float PlayerSpeedThatMapsToOne; // 0x50
	float PlayerSpeedThatMapsToZero; // 0x54
};

struct UTaleQuestSelectAISpawnerStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UShipwreckClueDestinationGenerator {
	UClueSiteData* RequiredClueSiteDataType; // 0x28
	TArray<FWeightedClueDestinationDescriptor> WeightedSupportedDescriptorTypes; // 0x30
};

struct UStatusResponseHealthRegenerationPoolChange {
	float HealthPoolChangeIntensityMultiplier; // 0x30
};

struct UWaterEmissionVolumeComponent {
	float Radius; // 0x2b0
	float GenerationDensity; // 0x2b4
};

struct UKrakenAnimatedTentacleStateAnimationsDataAsset {
	UKrakenAnimatedTentacleAnimationMappingDataAsset* MappingAssetReference; // 0x28
	TArray<FKrakenAnimatedTentacleStateAnimationMapping> States; // 0x48
};

struct UMovieSceneSequence {
	FCachedMovieSceneEvaluationTemplate EvaluationTemplate; // 0x80
	FMovieSceneTrackCompilationParams TemplateParameters; // 0x2a0
	bool bParentContextsAreSignificant; // 0x2a1
};

struct UBeachNPCSpawnFlowLocationComponent {
	FRotator SpawnRotation; // 0x2d8
};

struct AMechanismElementProxy {
	AActor* ElementClass; // 0x3d8
	float Relevancy; // 0x3e0
	AActor* Instance; // 0x3e8
};

struct UWorldMarkerOnDigPositionComponent {
	UWorldMarkerVariant* MarkerVariant; // 0xc8
};

struct URemoveGameEventExclusionZoneStepDesc {
	float Radius; // 0x80
	FQuestVariableVector Location; // 0x88
};

struct UWrapBox {
	FVector2D InnerSlotPadding; // 0x150
};

struct URewindDataVisualisationComponent {
	FRewindPhysicsServiceEntry RewindEntry; // 0xd0
};

struct AWaterbasedAISupplier {
	UAISpawnerList* Spawners; // 0x3d0
};

struct UCircleMapSettings {
	FStringAssetReference CircleMapItemDescClass; // 0x38
};

struct USharkPartsDesc {
	FString SharkPartsTag; // 0x80
	FSharkPlayerStats SharkPlayerStats; // 0x90
	TArray<FSharkMaterialEntry> Materials; // 0x98
};

struct USplineComponent {
	FInterpCurveVector SplineInfo; // 0x588
	FInterpCurveQuat SplineRotInfo; // 0x5a0
	FInterpCurveVector SplineScaleInfo; // 0x5b8
	FInterpCurveFloat SplineReparamTable; // 0x5d0
	bool bAllowSplineEditingPerInstance; // 0x5e8
	int32_t ReparamStepsPerSegment; // 0x5ec
	float Duration; // 0x5f0
	bool bStationaryEndpoints; // 0x5f4
	bool bSplineHasBeenEdited; // 0x5f5
	bool bClosedLoop; // 0x5f6
	FVector DefaultUpVector; // 0x5f8
};

struct UParticleModuleLocationBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UFogBankDataAsset {
	EFogBankType FogBankType; // 0x28
	FWeightedProbabilityRangeOfRanges Density; // 0x30
	FWeightedProbabilityRangeOfRanges RadiusXInKm; // 0x60
	FWeightedProbabilityRangeOfRanges RadiusYInKm; // 0x90
	FWeightedProbabilityRangeOfRanges HeightInKm; // 0xc0
	FLinearColor DefaultColour; // 0xf0
	TArray<FFogColourForSea> FogColourForSea; // 0x100
	FWeightedProbabilityRangeOfRanges FadeInDuration; // 0x110
	FWeightedProbabilityRangeOfRanges ActiveDuration; // 0x140
	FWeightedProbabilityRangeOfRanges FadeOutDuration; // 0x170
	FWeightedProbabilityRangeOfRanges EmergencyFadeOutDuration; // 0x1a0
	bool Persistent; // 0x1d0
	float TimeBetweenLocalPlayerDensityModifierUpdate; // 0x1d4
	float NotCulledDistanceFromPlayerInKm; // 0x1d8
	float FullyCulledDistanceFromPlayerInKm; // 0x1dc
};

struct UItemCapForAssets {
	TArray<UClass*> Items; // 0x28
	int32_t Cap; // 0x38
};

struct ANonStorableItemInfo {
	bool CanBeStoredInInventory; // 0x3f0
	FScriptMulticastDelegate OnItemPickedUpDelegate; // 0x3f8
	FScriptMulticastDelegate OnItemDroppedDeletage; // 0x408
	AWieldableItem* WieldableType; // 0x418
	AActor* ProxyType; // 0x420
	UWieldableItemPersistentCooldownComponent* WieldableItemPersistenceCooldownComponent; // 0x428
	UItemDesc* Desc; // 0x430
	EItemRepresentation CurrentRepresentation; // 0x438
	AActor* CurrentRepresentationInstance; // 0x440
	AActor* CurrentOwner; // 0x448
	AActor* TutorialOwner; // 0x450
	bool DoNotConsiderForMigrationGather; // 0x4f9
};

struct UAbilityTask_WaitGameplayEffectApplied {
	FName InstanceName; // 0x28
};

struct UIpConnection {
	TArray<UChildConnection*> Children; // 0x50
	UNetDriver* Driver; // 0x60
	UPackageMap* PackageMap; // 0x68
	TArray<UChannel*> OpenChannels; // 0x70
	TArray<AActor*> SentTemporaries; // 0x80
	AActor* ViewTarget; // 0x90
	AActor* OwningActor; // 0x98
	int32_t MaxPacket; // 0xa0
	char InternalAck : 1; // 0xa4
	double LastReceiveTime; // 0x3a0
	int32_t MaxDormantActorsCheckedFromRelevancy; // 0x34468
	TArray<UChannel*> DeferredCloseChannels; // 0x344c0
};

struct ACargoRunService {
	TArray<FClientCargoRunCrewDataUnit> ClientCrewData; // 0x3e0
};

struct UParticleModuleParametersOverX {
	float GroupScales[0x6]; // 0x50
};

struct APhysicsVolume {
	float TerminalVelocity; // 0x408
	int32_t Priority; // 0x40c
	float FluidFriction; // 0x410
	char bWaterVolume : 1; // 0x414
	char bPhysicsOnContact : 1; // 0x414
};

struct USpawnLocationKeywordPriorityListAsset {
	TArray<FString> PriorityKeywords; // 0x28
};

struct ACrewShipManifest {
	TArray<FCommodityTrackingModel> CommodityPurchases; // 0x3e8
	TArray<FCommodityRedemptionTrackingModel> CommodityRedemptions; // 0x3f8
	UNPCIdAsset* NPCIdList; // 0x410
	FVoteSessionData VoyageSelectionVoteData; // 0x498
	FVoteSessionData VoyageCancelVoteData; // 0x500
	FVoteSessionData TaleSelectionVoteData; // 0x568
	FVoteSessionData TaleCancelVoteData; // 0x5d0
	UShipSize* AssociatedShipSize; // 0x6f8
	FGuid AssociatedCrew; // 0x700
	TArray<FProposedVoyageEntry> ProposedVoyages; // 0x710
	UVoyageProposalDesc* CurrentActiveVoyage; // 0x730
	TArray<FString> CrewBeckonTags; // 0x738
	TArray<TScriptInterface<Class>> VoyageVoteUpdaters; // 0x748
	TArray<TScriptInterface<Class>> VoyageCancellers; // 0x758
	TArray<FProposedTaleEntry> ProposedTales; // 0x768
	UVoyageDescDataAsset* CurrentActiveTale; // 0x788
	int32_t ReapersVoyageCount; // 0x790
	TArray<TScriptInterface<Class>> TaleVoteUpdaters; // 0x798
	TArray<TScriptInterface<Class>> TaleCancellers; // 0x7a8
	UShipCustomizationLoadoutComponent* ShipCustomizationLoadoutComponent; // 0x7b8
	UCompany* CurrentActiveEmissaryCompany; // 0x868
	FGuid CurrentActiveEmissarySessionId; // 0x870
	int32_t CurrentEmissaryTotal; // 0x880
	bool EmissaryMaxRankQuestBeenRedeemed; // 0x884
};

struct UTaleQuestAddRiddleMapStepDesc {
	TArray<FText> Text; // 0x98
};

struct UIslandAnnouncementComponent {
	bool AnnouncesOnUI; // 0xc8
	TArray<AController*> MutedPlayers; // 0xd0
};

struct UGenerateDigLocationStepDesc {
	FQuestVariableName IslandName; // 0x80
	FQuestVariableVector DigLocation; // 0x90
};

struct UNoiseMakerComponent {
	UNoiseMakerComponentParams* NoiseMakerComponentParams; // 0x2e0
};

struct ARemoteActorDestructionService {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct ANavMeshBoundsVolume {
	FNavAgentSelector SupportedAgents; // 0x408
	FName OriginatingLevelName; // 0x40c
};

struct UPhrasesRadialComponent {
	TArray<FPlayModePhrases> DefaultPhrasesByPlayMode; // 0xd0
	UPhrasesRadialDataAsset* DefaultPhrasesRadialDataAsset; // 0xe0
	UPhrasesRadialDataAsset* DockablePhrasesRadialDataAsset; // 0xe8
	UPhrasesRadialDataAsset* WieldedItemPhrasesRadialDataAsset; // 0xf0
};

struct UReviveAudioComponent {
	UReviveEffectsDataAsset* ReviveEffectsDataAsset; // 0x2e0
};

struct UWaitForVaultCompletionStepDesc {
	FQuestVariableActor Vault; // 0x80
	FText VaultFailureMessage; // 0x90
};

struct UAbandonedNoteClueDescriptor {
	UClueDestinationDescriptor* DestinationDescriptor; // 0x28
};

struct UTaleQuestWeightedItemDescSpawnDataAsset {
	TArray<FTaleQuestWeightedItemDescSpawnData> WeightedItemSpawnDatas; // 0x28
	UItemSpawnData* QuestObjectSpawnData; // 0x38
};

struct UReviveGhostAnimationInstance {
	FReviveGhostAnimations ReviveAnimations; // 0x448
	bool FullyInitialised; // 0x470
	bool FullyRevived; // 0x471
	bool FromSwimming; // 0x472
};

struct UPlantAIFormComponent {
	UParticleSystem* HealingParticlesTemplate; // 0x160
	UWwiseEvent* StartHealingAudioLoopEvent; // 0x168
	UWwiseEvent* StopHealingAudioLoopEvent; // 0x170
	UParticleSystem* WeakParticlesTemplate; // 0x178
	UMaterial* PlantBaseMaterial; // 0x180
	FName HealingShaderParamName; // 0x1a0
	float IsNotHealingShaderParamValue; // 0x1a8
	float IsHealingShaderParamValue; // 0x1ac
	float ShaderParamBlendSpeed; // 0x1b0
	bool IsWet; // 0x1b5
	bool IsWeak; // 0x1b6
	UParticleSystemComponent* HealingParticleSystemComponent; // 0x1b8
	UParticleSystemComponent* WeakParticleSystemComponent; // 0x1c0
	UMaterialInstanceDynamic* PlantDynamicMaterialInstance; // 0x1c8
};

struct UAIPerPlayerSpawner {
	bool CheckSpawnedActorsInRadiusBeforeSpawning; // 0x428
	float RadiusToCheckForExistingPopulation; // 0x42c
	int32_t MaxExistingPopulationInRadius; // 0x430
	bool DespawnAllPawnsWhenAllPlayersLeave; // 0x434
	int32_t MaxActorsTotalPerPlayer; // 0x438
	bool RunSimulation; // 0x43c
	int32_t RankForSimulation; // 0x440
	int32_t NumIterations; // 0x444
	bool WantsToTemporarilyRememberPlayers; // 0x448
	FWeightedProbabilityRangeOfRanges TemporaryPlayerMemoryTimeRange; // 0x450
	TMap<AActor*, FAIPerPlayerSpawnerPlayerDetailsUnit> PlayerDetails; // 0x568
	TMap<AController*, FTemporaryPlayerDetailsUnitEntry> TemporaryPlayerDetails; // 0x5b8
};

struct UTornMapSettings {
	UTreasureMapItemDesc* TornMapItemDescClass; // 0x38
	FStringAssetReference DefaultParams; // 0x40
	EBlendMode DefaultMapBlendMode; // 0x50
	float DefaultMarkScale; // 0x54
	EBlendMode DefaultMarkBlendMode; // 0x58
};

struct UTableViewBase {
	bool bIsVariable; // 0x28
	bool bCreatedByConstructionScript; // 0x29
	UPanelSlot* Slot; // 0x30
	bool bIsEnabled; // 0x38
	DelegateProperty bIsEnabledDelegate; // 0x3c
	FText ToolTipText; // 0x50
	DelegateProperty ToolTipTextDelegate; // 0x88
	UWidget* ToolTipWidget; // 0x98
	DelegateProperty ToolTipWidgetDelegate; // 0xa0
	ESlateVisibility Visiblity; // 0xb0
	ESlateVisibility Visibility; // 0xb1
	DelegateProperty VisibilityDelegate; // 0xb4
	char bOverride_Cursor : 1; // 0xc4
	EMouseCursor Cursor; // 0xc8
	bool bIsVolatile; // 0xc9
	FWidgetTransform RenderTransform; // 0xcc
	FVector2D RenderTransformPivot; // 0xe8
	UWidgetNavigation* Navigation; // 0xf0
	TArray<UPropertyBinding*> NativeBindings; // 0x128
};

struct AAshenLordWorldEndCloud {
	float SelfDestructDelayOnComplete; // 0x3d0
	EAshenLordWorldEndCloudState CloudState; // 0x3d4
	FAshenLordWorldEndCloudAnimation CurrentCloudAnimation; // 0x3d8
};

struct UAnimCompress {
	FString Description; // 0x28
	char bNeedsSkeleton : 1; // 0x38
	AnimationCompressionFormat TranslationCompressionFormat; // 0x3c
	AnimationCompressionFormat RotationCompressionFormat; // 0x3d
	AnimationCompressionFormat ScaleCompressionFormat; // 0x3e
};

struct UIslandTelemetrySubjectComponent {
	FString SubjectName; // 0xd0
	FString SubjectID; // 0xe0
};

struct APainCausingVolume {
	char bPainCausing : 1; // 0x418
	float DamagePerSec; // 0x41c
	UDamageType* DamageType; // 0x420
	float PainInterval; // 0x428
	char bEntryPain : 1; // 0x42c
	char BACKUP_bPainCausing : 1; // 0x42c
	AController* DamageInstigator; // 0x430
};

struct UKrakenAnimatedTentacleAnimationMappingDataAsset {
	TArray<FKrakenAnimatedTentacleMappedAnimation> Animations; // 0x28
};

struct UKrakenTentacleItemSpawnComponent {
	UShortRangeMarkerDataAsset* RewardMarkerParams; // 0x428
};

struct AWindService {
	AWindDirectionalSource* GlobalWindSource; // 0x3e0
	float CurrentWindAngle; // 0x3f8
	float CurrentWindMagnitude; // 0x3fc
	TArray<TScriptInterface<Class>> WindZones; // 0x4e8
};

struct UBTTask_NotifyForcedHangoutComplete {
	FBlackboardKeySelector BlackboardKey; // 0x60
};

struct UPrimitiveComponent {
	float MinDrawDistance; // 0x2b8
	float LDMaxDrawDistance; // 0x2c0
	float CachedMaxDrawDistance; // 0x2c4
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2c8
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2c9
	char bAlwaysCreatePhysicsState : 1; // 0x2cc
	char bGenerateOverlapEvents : 1; // 0x2cc
	char bMultiBodyOverlap : 1; // 0x2cc
	char bCheckAsyncSceneOnMove : 1; // 0x2cc
	char bTraceComplexOnMove : 1; // 0x2cc
	char bReturnMaterialOnMove : 1; // 0x2cc
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2cc
	char bAllowCullDistanceVolume : 1; // 0x2cc
	char bHasMotionBlurVelocityMeshes : 1; // 0x2cd
	char bRenderInMainPass : 1; // 0x2cd
	char bRenderInCustomPrePass : 1; // 0x2cd
	char bReflected : 1; // 0x2cd
	char bReflectedOnLowQuality : 1; // 0x2cd
	char bFFTWaterMask : 1; // 0x2cd
	char bVolumeFogMask : 1; // 0x2cd
	char bAffectsFlatWater : 1; // 0x2ce
	char bGPUParticlesKillPlane : 1; // 0x2ce
	char bDontCull : 1; // 0x2ce
	char bDontSizeOnScreenCull : 1; // 0x2ce
	float OverriddenShadowMinTexelSize; // 0x2d0
	bool bOverrideShadowMinSizeCulling; // 0x2d4
	bool bOverrideShadowCascadesExclusion; // 0x2d5
	EExcludeFromCascades ExcludedShadowCascades; // 0x2d6
	char bReceivesDecals : 1; // 0x2d8
	char bOwnerNoSee : 1; // 0x2d8
	char bOnlyOwnerSee : 1; // 0x2d8
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d8
	char bIsACloud : 1; // 0x2d8
	char bUseAsOccluder : 1; // 0x2d8
	char bSelectable : 1; // 0x2d8
	char bForceMipStreaming : 1; // 0x2d8
	char bHasPerInstanceHitProxies : 1; // 0x2d9
	char CastShadow : 1; // 0x2d9
	char bAffectDynamicIndirectLighting : 1; // 0x2d9
	char bUseFarCascadeLPVBiasMultiplier : 1; // 0x2d9
	char bAffectDistanceFieldLighting : 1; // 0x2d9
	char bCastDynamicShadow : 1; // 0x2d9
	char bCastStaticShadow : 1; // 0x2d9
	char bCastVolumetricTranslucentShadow : 1; // 0x2d9
	char bSelfShadowOnly : 1; // 0x2da
	char bCastFarShadow : 1; // 0x2da
	char bCastInsetShadow : 1; // 0x2da
	char bCastCinematicShadow : 1; // 0x2da
	char bCastHiddenShadow : 1; // 0x2da
	char bCastShadowAsTwoSided : 1; // 0x2da
	char bCastShadowOnLowQuality : 1; // 0x2da
	char bLightAsIfStatic : 1; // 0x2da
	char bLightAttachmentsAsGroup : 1; // 0x2db
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2dc
	bool bHasCachedStaticLighting; // 0x2dd
	bool bStaticLightingBuildEnqueued; // 0x2de
	char bIgnoreRadialImpulse : 1; // 0x2e0
	char bIgnoreRadialForce : 1; // 0x2e0
	char AlwaysLoadOnClient : 1; // 0x2e0
	char AlwaysLoadOnServer : 1; // 0x2e0
	char bUseEditorCompositing : 1; // 0x2e0
	char bRenderCustomDepth : 1; // 0x2e0
	char bAllowVelocityInMaterial : 1; // 0x2e0
	int32_t CustomDepthStencilValue; // 0x2e4
	int32_t TranslucencySortPriority; // 0x2e8
	int32_t VisibilityId; // 0x2ec
	float LpvBiasMultiplier; // 0x2f4
	float FarCascadeLPVBiasMultiplier; // 0x2f8
	float LpvIntensityMultiplier; // 0x2fc
	FCustomPrimitiveData CustomPrimitiveData; // 0x300
	FBodyInstance BodyInstance; // 0x310
	char bAffectRain : 1; // 0x490
	char bCanEverAffectNavigation : 1; // 0x490
	char bSkipRenderingInOuterLPVCascades : 1; // 0x490
	char bEnableMergeCollisionComponents : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerUnderwater : 1; // 0x490
	char bVisibleWhenAboveWaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerAbove : 1; // 0x490
	char bVisibleWhenUnderwaterAndPlayerUnderwater : 1; // 0x491
	char bCanRenderAboveAndBelowWaterAtSameTime : 1; // 0x491
	float BoundsScale; // 0x498
	float OcclusionBoundsScale; // 0x49c
	float LastRenderTime; // 0x4a0
	bool bGPUVisibility; // 0x4a4
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x4a5
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x4a6
	FScriptMulticastDelegate OnComponentHit; // 0x4f0
	FScriptMulticastDelegate OnComponentBeginOverlap; // 0x4f1
	FScriptMulticastDelegate OnComponentEndOverlap; // 0x4f2
	FScriptMulticastDelegate OnComponentWake; // 0x4f3
	FScriptMulticastDelegate OnComponentSleep; // 0x4f4
	UPrimitiveComponent* LODParentPrimitive; // 0x528
	FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick; // 0x530
	UPrimitiveComponent* MergedCollisionComponentParent; // 0x580
};

struct UAIItemSpawnComponent {
	float SpawnDelayAfterDeath; // 0x428
	float PercentageChanceToDrop; // 0x42c
	FName RewardMarkerFeatureToggle; // 0x430
	TArray<FCauseOfDeathItemSpawnDistribution> DeathItemSpawnDistributionOverrides; // 0x438
	UShortRangeMarkerDataAsset* RewardMarkerDataAsset; // 0x448
};

struct UDebugTeleportCrewStep {
	UDebugTeleportCrewStepDesc* Desc; // 0x90
};

struct UBlueprintMechanismStepBase {
	ETaleQuestStepBeginMode BeginMode; // 0x28
	UTaleQuestBlueprintStepDesc* Desc; // 0x30
};

struct UMediaTexture {
	TextureAddress AddressX; // 0x138
	TextureAddress AddressY; // 0x139
	FLinearColor ClearColor; // 0x13c
	int32_t VideoTrackIndex; // 0x14c
	UMediaPlayer* MediaPlayer; // 0x150
	TWeakObjectPtr<UMediaPlayer> CurrentMediaPlayer; // 0x160
};

struct AParticleEventManager {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UMeshMemoryConstraintScoringObject {
	FName ScoringName; // 0x28
	float ScoringFactor; // 0x30
};

struct UAILoadoutTypeList {
	TArray<ULoadoutAsset*> AllLoadouts; // 0x28
};

struct UAIPerceptionStimuliSourceComponent {
	char bAutoRegisterAsSource : 1; // 0xc8
	TArray<UAISense*> RegisterAsSourceForSenses; // 0xd0
};

struct UTaleQuestSpawnDebrisAtClueSiteStepDesc {
	FQuestVariableClueSite ClueSiteVar; // 0x80
	FQuestVariableActorAssetType DebrisTypeVar; // 0x90
	FQuestVariableActor OutDebrisActorVar; // 0xa0
};

struct ATutorialTavernStrangerNPC {
	FStringAssetReference AnimationData; // 0x6d8
	UWwiseObjectPoolWrapper* SummonSFXPool; // 0x6e8
	UWwiseEvent* SummonSFX; // 0x6f0
	FWwiseEmitter SummonEmitter; // 0x6f8
	FObjectMessagingHandle PlaySummonSFXEventHandle; // 0x718
};

struct UMaterialExpressionObjectRadius {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UBTDecorator_ConditionalLoop {
	int32_t IntValue; // 0x90
	float FloatValue; // 0x94
	FString StringValue; // 0x98
	FString CachedDescription; // 0xa8
	char OperationType; // 0xb8
	EBTBlackboardRestart NotifyObserver; // 0xb9
};

struct UOverrideProgressSpawnStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UArenaWorldMarkerOnWieldComponent {
	UWorldMarkerVariant* MarkerVariant; // 0xc8
};

struct UContestScoreSystem {
	UScoreRewardDataAsset* ScoreDataAsset; // 0x28
	FScoreRewardData CloudScoreRewardData; // 0x30
	int32_t WinningConditionScore; // 0x110
	TArray<FCrewScore> CrewScoreArray; // 0x118
	EContestScoreId ScoreId; // 0x128
};

struct ASkeletalMeshItemProxy {
	float InteractionPointRadius; // 0x558
	UWwiseEvent* GroundImpactSfx; // 0x560
	TArray<FItemProxyImpactVfxParams> VFXParams; // 0x568
	float ZOffsetWhenPlacingWorldProxy; // 0x578
	FRotator RotationWhenPlacingWorldProxy; // 0x57c
	ECollisionChannel DropOnSurfaceClientTraceChannel; // 0x588
	UPrimitiveComponent* ThirdPersonMesh; // 0x590
	float TTL; // 0x598
	UWaterInteractionComponent* WaterInteractionComponent; // 0x5a0
	UBuoyancyComponent* BuoyancyComponent; // 0x5a8
	EPhysicalSurface CachedProxySurfaceType; // 0x5b1
	bool CachedOnTopOfExistingBuriable; // 0x5b2
	AItemInfo* ItemInfo; // 0x5b8
	float TTLPlayerProximityCutoff; // 0x61c
	float TTLRecheckPeriod; // 0x620
};

struct UHighLatencySettings {
	bool UseHighLatency; // 0x28
	int32_t PktLag; // 0x2c
	int32_t PktLagVariance; // 0x30
	bool PktOrder; // 0x34
	int32_t PktDup; // 0x38
	int32_t PktLoss; // 0x3c
};

struct UCompanyLevelData {
	UCompany* Company; // 0x28
	FDataTableRowHandle DataTable; // 0x30
};

struct UKrakenIdleBehaviourParamsDataAsset {
	FKrakenIdleBehaviourParams Params; // 0x28
};

struct UDebrisForVoyageRankDescAsset {
	TArray<FDebrisToRangeDist> RankBasedDebrisDistribution; // 0x28
};

struct ULandscapeComponent {
	int32_t SectionBaseX; // 0x588
	int32_t SectionBaseY; // 0x58c
	int32_t ComponentSizeQuads; // 0x590
	int32_t SubsectionSizeQuads; // 0x594
	int32_t NumSubsections; // 0x598
	UMaterialInterface* OverrideMaterial; // 0x5a0
	UMaterialInterface* OverrideHoleMaterial; // 0x5a8
	UMaterialInstanceConstant* MaterialInstance; // 0x5b0
	TArray<FWeightmapLayerAllocationInfo> WeightmapLayerAllocations; // 0x5b8
	TArray<UTexture2D*> WeightmapTextures; // 0x5c8
	UTexture2D* XYOffsetmapTexture; // 0x5d8
	FVector4 WeightmapScaleBias; // 0x5e0
	float WeightmapSubsectionOffset; // 0x5f0
	FVector4 HeightmapScaleBias; // 0x600
	UTexture2D* HeightmapTexture; // 0x610
	FBox CachedLocalBox; // 0x618
	ULandscapeHeightfieldCollisionComponent* CollisionComponent; // 0x634
	TArray<FGuid> IrrelevantLights; // 0x650
	int32_t CollisionMipLevel; // 0x670
	float StaticLightingResolution; // 0x674
	int32_t ForcedLOD; // 0x678
	int32_t LODBias; // 0x67c
	FGuid StateId; // 0x680
	FGuid BakedTextureMaterialGuid; // 0x690
	UTexture2D* GIBakedBaseColorTexture; // 0x6a0
	char MobileBlendableLayerMask; // 0x6a8
	UMaterialInterface* MobileMaterialInterface; // 0x6b0
	UTexture2D* MobileWeightNormalmapTexture; // 0x6b8
};

struct UTimelineComponent {
	FTimeline TheTimeline; // 0xc8
};

struct AFireworkService {
	int32_t NumberOfCachedFlares; // 0x448
};

struct UAbilityTask_MoveToLocation {
	FScriptMulticastDelegate OnTargetLocationReached; // 0x68
	FVector StartLocation; // 0x7c
	FVector TargetLocation; // 0x88
	float DurationOfMovement; // 0x94
	UCurveFloat* LerpCurve; // 0xa0
	UCurveVector* LerpCurveVector; // 0xa8
};

struct UQuestBookDoublePageLayout {
	TArray<FTreasureMapWidgetTexture> Images; // 0x28
	TArray<FTreasureMapWidgetLocalisedTextWithFontOverride> GeneralText; // 0x38
};

struct UAIWeightedProbabilityRangeOfRangesRankProgression {
	TArray<FAIWeightedProbabilityRangeOfRangesRankMapping> RankMappings; // 0x28
	int32_t NumberOfRanks; // 0x38
};

struct AStorageCrateWieldable {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UEmissaryFlotsamTooltipCustomizerComponent {
	bool CheckForDelivery; // 0xd8
	bool CheckForPickup; // 0xd9
};

struct UGlitterBeardLanternSoundEffect {
	float TriggerThreshold; // 0x38
	UWwiseObjectPoolWrapper* WWisePool; // 0x40
	UWwiseEvent* WwiseEvent; // 0x48
	FWwiseEmitter Emitter; // 0x50
};

struct UNamedPointsCollectionListDataAsset {
	TArray<UNamedPointsCollectionDataAsset*> SubAssets; // 0x28
};

struct URewardGenTaleQuestServiceDesc {
	UTaleQuestWeightedItemDescSpawnDataAsset* SpawnData; // 0x28
};

struct USkellyFortListDataAsset {
	TArray<USkellyFortDataAsset*> FortsList; // 0x28
};

struct ATripwireMechanismTrigger {
	UMechanismTriggerComponent* MechanismTriggerComponent; // 0x3d0
	UBoxComponent* BoxCollisionThatTriggersWireSnap; // 0x3d8
	UStaticMeshComponent* WireStaticMesh; // 0x3e0
};

struct ATavernStrangerNPC {
	ATavernStrangersBarrel* OwnedBarrelMeshActor; // 0x610
	bool StrangerControlsBarrelVisibility; // 0x618
	AAthenaPlayerController* RegisteredController; // 0x620
	FObjectMessagingHandle ShowNPCEventHandle; // 0x630
	FObjectMessagingHandle ResetNPCEventHandle; // 0x678
};

struct ULocomotionInputComponent {
	UItemCategory* ThrowablesItemCategory; // 0x2d8
};

struct UStatusResponsePostProcess {
	float BeginMaterialWeight; // 0x30
	float EndMaterialWeight; // 0x34
	UMaterialInterface* MaterialInstance; // 0x38
	UPostProcessComponent* PostProcessComponentClass; // 0x40
	UPostProcessComponent* PostProcessComponent; // 0x48
};

struct UTaleQuestGenerateCluePointingToSiteStepDesc {
	FQuestVariableInt Difficulty; // 0x80
	FQuestVariableVector SourceLocation; // 0x90
	FQuestVariableClueSite TargetClueSite; // 0xa0
	FQuestVariableClueDescriptor GeneratedClue; // 0xb0
	TArray<UClueDescriptor*> AllowedClueTypes; // 0xc0
	UClueConnectionConfig* ConnectionConfiguration; // 0xd0
};

struct UBTService_ObserveTargetMeleeAttacks {
	FBlackboardKeySelector TargetActorKey; // 0x70
	FBlackboardKeySelector IsTargetAttackingResultKey; // 0x98
};

struct ACommonMerchantCrateItemInfoMock {
	TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry> FaunaBreedRarity; // 0x710
	AActor* CurrentShip; // 0x778
};

struct ADestroyItemWhenPlacedOnActor {
	float TimeUntilItemDestroyed; // 0x3d8
};

struct UAIWeightedProbabilityRangeOfRangesAsset {
	float RespawnChance; // 0x28
	FWeightedProbabilityRangeOfRanges RespawnTimerRanges; // 0x30
	FName FeatureName; // 0x60
};

struct ACoordinatedKraken {
	FScriptMulticastDelegate OnSpecialEventDelegate; // 0x3d8
	AKrakenAnimatedTentacle* TentacleType; // 0x3e8
	AKrakenHead* HeadType; // 0x3f0
	USceneComponent* KrakenRoot; // 0x3f8
	UKrakenActionCoordinatorComponent* KrakenActionCoordinator; // 0x400
	TArray<FCoordinatedKrakenPhaseAssetEntry> PhaseAssets; // 0x408
	TArray<FCoordinatedKrakenTentacleSpawnInfo> TentacleSpawnInfo; // 0x440
	FTransform HeadSpawnTransform; // 0x450
	AKrakenHead* SpawnedHead; // 0x480
	AActor* TargetActor; // 0x488
	ANetworkClusterEventRoom* NetworkClusterEventRoom; // 0x490
	EOverrideState ReplicatedTargetActorOverride; // 0x498
};

struct UMovieSceneCameraAnimSection {
	FMovieSceneCameraAnimSectionData AnimData; // 0x98
	UCameraAnim* CameraAnim; // 0xb8
	float PlayRate; // 0xc0
	float PlayScale; // 0xc4
	float BlendInTime; // 0xc8
	float BlendOutTime; // 0xcc
	bool bLooping; // 0xd0
};

struct UBattleElevatorEventRoomHeightReachedPolicy {
	float TargetHeightPercentage; // 0x28
};

struct ULandmarkReactionEventCallInterfaceStartReaction {
	EEventRunLocation RunLocation; // 0x38
};

struct UPetRoamingAnimationStateDefinitionsDataAsset {
	TArray<FPetRoamingAnimationStateDefinitionWrapper> DefinitionWrappers; // 0x28
};

struct USwimmingCreatureMovementComponent {
	float MinPlayRate; // 0x188
	float MaxPlayRate; // 0x18c
	float NetworkSimulatedSmoothLocationTime; // 0x190
	float NetworkSimulatedSmoothRotationTime; // 0x194
	float WaterSurfaceCheckHeightOffset; // 0x198
	float DistanceFromWaterSurfaceForMaxAdjustmentVelocity; // 0x19c
	float MaxWaterSurfaceAdjustmentVelocity; // 0x1a0
	float VelocitySmoothingFactor; // 0x1a4
	float SharkFinHeightCheckOffset; // 0x1a8
	UCurveFloat* SinkingAccelerationOverTime; // 0x1b0
	int32_t PushOutHemisphereSteps; // 0x1b8
	int32_t PushOutStepsOnNarrowestHemisphereBand; // 0x1bc
	int32_t PushOutStepsOnWidestHemisphereBand; // 0x1c0
	float MaxExtraPushOut; // 0x1c4
	int32_t NumStepsToRampUpToMaxPushOut; // 0x1c8
	FCollisionProfileName PenetrationPanicCollisionProfile; // 0x1cc
	bool ShouldDestroyOnUnresolvedCollision; // 0x1d4
	float SmoothNetUpdateLocationTime; // 0x1d8
	float SmoothNetUpdateRotationTime; // 0x1dc
	float MaxMovementTimeAllowedForSmoothNetUpdate; // 0x1e0
	float DebugDrawHeight; // 0x1e4
	float DebugDrawRadius; // 0x1e8
	ESwimmingMode ReplicatedSwimmingMode; // 0x1ec
	TArray<FSwimmingCreatureAIStrategyMovementProperties> AIStrategyMovementProperties; // 0x210
	FSwimmingCreatureMovementReplicatedData ReplicatedMovementData; // 0x220
};

struct UTeleportLungeAbilityStageParams {
	float AbilityCooldownSpeedMultiplier; // 0x28
	float DamageRequiredForNextIntervalMultiplier; // 0x2c
	bool OverrideParams; // 0x30
	bool AutoActivateOnStageTransition; // 0x31
	UAthenaAIAbilityType* TypeClass; // 0x38
};

struct UEnvQueryNode {
	int32_t VerNum; // 0x28
};

struct UAISkillsetRankProgression {
	TArray<FAISkillsetRankMapping> RankMappings; // 0x28
	int32_t NumberOfRanks; // 0x38
};

struct USetMechanismActionCutsceneNameStep {
	USetMechanismActionCutsceneNameStepDesc* Desc; // 0x90
};

struct UIteratorFrame {
	UTaleQuestParallelForeachStepDesc* Desc; // 0x40
	UScriptStruct* StructForCollector; // 0x48
};

struct UAISense_Damage {
	TArray<FAIDamageEvent> RegisteredEvents; // 0x88
};

struct APrecomputedVisibilityVolume {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct UEmoteDesc {
	FStringAssetReference EmoteInfo; // 0xe0
	FStringAssetReference BackgroundPath; // 0xf0
	FName LookAtSocketName; // 0x100
	FName OverridePreviewCameraName; // 0x108
};

struct UFlashbangEffectComponent {
	float FlashTimer; // 0xd0
	float FadeOutTimer; // 0xd4
	float FlashbangCooldown; // 0xd8
	UWwiseEvent* StartSfxEvent; // 0xe0
	UWwiseEvent* StopSfxEvent; // 0xe8
};

struct UDistributionFloat {
	char bCanBeBaked : 1; // 0x30
};

struct UNPCDialogOptionNoUIPurchase {
	FText Text; // 0x80
	UCatalogDataAsset* Catalog; // 0xb8
	UCatalogOfferDataAsset* CatalogOffer; // 0xc0
	UPopUpMessageDesc* OfferTriggeredPopupDesc; // 0xc8
	AController* Interactor; // 0xd0
};

struct UEmotePropDiceData {
	EDiceType DiceType; // 0x28
};

struct ATestAthenaPlayerState {
	UVoiceChatComponent* VoiceChatComponent; // 0x4a0
	FString Sandbox; // 0x4e8
	FString ClientPlatform; // 0x4f8
	FString DeviceID; // 0x508
	FPirateIdentity PirateIdentity; // 0x518
	FGuid PlayerGameId; // 0x648
	FPirateDescription PirateDesc; // 0x658
	int32_t PlayerIndexOnServer; // 0x6d8
	EPlayerActivityType PlayerActivity; // 0x718
};

struct UDebugMenuStatusDataAsset {
	TArray<FDebugMenuStatusDefinition> StatusDefinitions; // 0x28
	TArray<float> Durations; // 0x38
};

struct UTaleQuestNotificationStep {
	UTaleQuestNotificationStepDesc* Desc; // 0x90
};

struct UNPCDialogPredicateInAIDialogueState {
	int32_t ActorIdx; // 0x38
	FName DialogueState; // 0x3c
};

struct UAssignItemStep {
	UAssignItemStepDesc* StepDesc; // 0x90
};

struct UInterpTrackFloatMaterialParam {
	TArray<UMaterialInterface*> TargetMaterials; // 0x90
	FName ParamName; // 0xa0
};

struct USailAnimInstance {
	float Turning; // 0x448
	float Billow; // 0x44c
	float WindStrength; // 0x450
	float Height; // 0x454
	float Falling; // 0x458
	float BillowedWindStrength; // 0x45c
	float BillowedSailHalfwayPoint; // 0x460
	float HeightTimesThree; // 0x464
	float MinOneMinusHeightAndOne; // 0x468
	float MaximumMainSailDrop; // 0x46c
	float LaxAnimationFoldUpwardsExplicitTime; // 0x470
	float LaxAnimationFoldUpwardsAlpha; // 0x474
	float LaxAnimationWithWindAlpha; // 0x478
	float LaxAnimationWithWindAlphaUnfurledA; // 0x47c
	float LaxAnimationWithWindAlphaUnfurledB; // 0x480
	float BillowedFoldAnimationWithWindModulationBillowedAlphaUnfurled; // 0x484
	float BillowedFoldAnimationWithWindModulationLaxAlphaUnfurled; // 0x488
	float BetweenZeroAndHalfBillowedFoldAnimationWithFullWindBlendAlpha; // 0x48c
	float BetweenZeroAndHalfBillowedFoldAnimationWithFullWindAdditiveAlpha; // 0x490
	float BetweenHalfAndOneBillowedFoldAnimationBlendAlpha; // 0x494
	float TurningMapRangeUnclamped; // 0x498
	float PlayRateMultiplier; // 0x49c
};

struct UPlayerBuriedItemsMapBundleInteractionComponent {
	FActorComponentSelector MapBundleMesh; // 0x130
	float PickupHoldTime; // 0x140
	float CombineHoldTime; // 0x144
	float StealingHoldTime; // 0x148
	UNotificationInputId* HoldInputId; // 0x150
	UNotificationInputId* ReleaseInputId; // 0x158
	UWwiseEvent* StartStealingSoundEvent; // 0x160
	UWwiseEvent* StopStealingSoundEvent; // 0x168
	UWwiseEvent* StartStealingMusicEvent; // 0x170
	UWwiseEvent* StopStealingMusicEvent; // 0x178
	UWwiseObjectPoolWrapper* SfxPool; // 0x180
	bool MapsAvailable; // 0x188
	FGuid ShipCrewId; // 0x18c
};

struct UDynamicColourPointLightComponent {
	FRuntimeFloatCurve ActivationCurve; // 0x478
	FRuntimeFloatCurve DeactivationCurve; // 0x4f8
};

struct USimpleOverlapComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UGameplayTagReponseTable {
	TArray<FGameplayTagResponseTableEntry> Entries; // 0x28
};

struct UBTTask_SailShipForward {
	FBlackboardKeySelector ShouldSailForwardKey; // 0x88
	FBlackboardKeySelector TimeToSailForwardKey; // 0xb0
	FBlackboardKeySelector IsCaptainPresentKey; // 0xd8
};

struct UMeshMemoryConstraintHandler {
	AActor* MeshOwner; // 0x28
	TScriptInterface<Class> MemoryConstrainedMeshComponent; // 0x30
	TScriptInterface<Class> MeshAvailabilityComponent; // 0x40
	TScriptInterface<Class> ChangeableMeshComponent; // 0x50
	UObject* CachedMesh; // 0x70
	FName CachedMeshName; // 0x78
};

struct ULanternItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UBTTask_SetInHiddenActionState {
	bool EnableHiddenActionState; // 0x60
};

struct AStaticMeshWieldableReplica {
	UPrimitiveComponent* MeshComponent; // 0x3d8
	UCosmeticItemAnimationSetDataAsset* CachedAnimationSet; // 0x3e0
	UItemCategory* ReplicaCategory; // 0x3e8
};

struct UAthenaItemsSettings {
	ECollisionChannel ProjectileCollisionChannel; // 0x38
	ECollisionChannel ThrowableCollisionChannel; // 0x39
};

struct UFishingRodSetupDataAsset {
	UItemDesc* FishActorInteractionDesc; // 0x28
	float DelayBeforeAllowingACast; // 0x30
	float DelayBeforeCreatingFishingFloat; // 0x34
	float DelayBeforeDestroyingFishingFloat; // 0x38
	AFishingFloat* FishingFloatType; // 0x40
	ECollisionChannel HitTestTraceChannel; // 0x48
	float PreCastingPlayerSpeedModifier; // 0x4c
	float CastingTimeBeforeTurningOnHits; // 0x50
	float TimeBetweenIsFloatLocationValidChecks; // 0x54
	float SingleFishAnimationLoopDuration; // 0x58
	float DriftOffsetToStopFishJumping; // 0x5c
	TArray<FDebugFishSelectionBreed> FishBreeds; // 0x60
	TArray<FDebugFishSelectionBreed> FishBreedsInAPond; // 0x70
	TArray<FFishingRodForceFeedbackLevel> ForceFeedbackLevels; // 0x80
	TArray<FFishingComedyItemInfo> ComedyItems; // 0x90
	float ChanceOfComedyItems; // 0xa0
	float DistanceFromPlayerToCatchComedyItem; // 0xa4
	TArray<FFishBaitInfo> FishBait; // 0xa8
	float RopeThickness; // 0xb8
	float RopeSlackAtMaxDistance; // 0xbc
	float RopeSlackAtMinDistance; // 0xc0
	float RopeOnRodSlack; // 0xc4
	float RopeOnRodMaxSway; // 0xc8
	float TimeToBlendAwaySway; // 0xcc
	float MaxTimeToWaitForAnimationStateToFinish; // 0xd0
	FVector ServerEstimateRodEndPosition; // 0xd4
	FVector ServerEstimateRodBasePosition; // 0xe0
	FVector RodBaseHitDetectionExtraOffset; // 0xec
	float MinimumShakeValue; // 0xf8
	float ReelingCooldownMultiplier; // 0xfc
	UWwiseEvent* RodCastAudioDrawBack; // 0x100
	UWwiseEvent* RodCastAudioCast; // 0x108
	UWwiseEvent* RodBendStart; // 0x110
	UWwiseEvent* RodBendStop; // 0x118
	float RodBendFactorAmountToTriggerSound; // 0x120
	float AmountOfWrongDirectionStrainToTriggerSound; // 0x124
	float RodBendCooldown; // 0x128
	FName RodBendFactorRtpc; // 0x12c
	UWwiseEvent* RodCastReelLoopStart; // 0x138
	UWwiseEvent* RodCastReelLoopStop; // 0x140
	FName RodCastReelSpeedRtpc; // 0x148
	float RtpcSpeedFactorCasting; // 0x150
	float RtpcSpeedFactorFishing; // 0x154
	float RtpcSpeedFactorReeling; // 0x158
	UWwiseEvent* FishingBendWrongDirectionStart; // 0x160
	UWwiseEvent* FishingBendWrongDirectionStop; // 0x168
	UWwiseEvent* FishingLineSnap; // 0x170
	UWwiseEvent* RodCastFishOutOfWaterWriggling; // 0x178
	UWwiseObjectPoolWrapper* FishingRodPool; // 0x180
	FName RodStrainMagnitudeRtpc; // 0x188
	UWwiseEvent* FishTakenFromRod; // 0x190
	UWwiseEvent* BaitAddedToHook; // 0x198
};

struct AWaveBasedMechanismVisualController {
	UMechanismActionComponent* MechanismActionComponent; // 0x3d0
	TArray<AActor*> WaveVisualActors; // 0x3d8
	FName StaticMeshDynamicMaterialTag; // 0x3e8
	UCurveFloat* ScalarParameterCurve; // 0x3f0
	FName MaterialScalarParameterName; // 0x3f8
	float NewWaveDelay; // 0x400
	int32_t WaveIndex; // 0x404
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x418
	TArray<UMaterialInstanceDynamic*> MaterialsToTransition; // 0x438
};

struct UViewModelComponentBase {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UTaleDoorMigrationAction {
	ASlidingDoor* Door; // 0x28
};

struct UAthenaAnimationServerData {
	TArray<FAthenaAnimationServerAnimAISpawnData> AISpawnData; // 0x28
};

struct UCheckIsActorCriticalStepDesc {
	FQuestVariableActor ActorToCheck; // 0x80
	FQuestVariableBool IsCritical; // 0x90
};

struct AMerchantCrateItemInfoMock {
	TArray<FMerchantCrateItemInfoFaunaBreedRarityEntry> FaunaBreedRarity; // 0x710
	AActor* CurrentShip; // 0x778
};

struct ACameraBlockingVolume {
	EBrushType BrushType; // 0x3d0
	FColor BrushColor; // 0x3d4
	int32_t PolyFlags; // 0x3d8
	char bColored : 1; // 0x3dc
	char bSolidWhenSelected : 1; // 0x3dc
	char bPlaceableFromClassBrowser : 1; // 0x3dc
	char bNotForClientOrServer : 1; // 0x3dc
	UModel* Brush; // 0x3e0
	UBrushComponent* BrushComponent; // 0x3e8
	char bInManipulation : 1; // 0x3f0
	TArray<FGeomSelection> SavedSelections; // 0x3f8
};

struct UVulnerabilityAIAbility {
	APawn* Owner; // 0x78
	UVulnerabilityAIAbilityParams* SetupAbilityParams; // 0x80
};

struct UInAppPurchaseRestoreCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UDragDropOperation {
	FString Tag; // 0x28
	UObject* payload; // 0x38
	UWidget* DefaultDragVisual; // 0x40
	EDragPivot Pivot; // 0x48
	FVector2D Offset; // 0x4c
	FScriptMulticastDelegate OnDrop; // 0x58
	FScriptMulticastDelegate OnDragCancelled; // 0x68
	FScriptMulticastDelegate OnDragged; // 0x78
};

struct UInvalidationBox {
	bool CacheRelativeTransforms; // 0x150
};

struct UContestCeremoniesComponent {
	EContestEventStages CurrentContestStage; // 0xc8
	TArray<FTimedContestEventAction> ContestCeremonyTimedActions; // 0x100
	TArray<UWwiseEvent*> PlayedAudio; // 0x110
	UContestCeremonyEventsDataAsset* ContestEventsDataAsset; // 0x120
};

struct UEelSlapAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UTelemetryTaskStep {
	UTaleQuestStep* TaskStep; // 0x90
};

struct AAbilitySystemDebugHUD {
	FColor WhiteColor; // 0x3d0
	FColor GreenColor; // 0x3d4
	FColor RedColor; // 0x3d8
	APlayerController* PlayerOwner; // 0x3e0
	char bLostFocusPaused : 1; // 0x3e8
	char bShowHUD : 1; // 0x3e8
	char bShowDebugInfo : 1; // 0x3e8
	char bShowHitBoxDebugInfo : 1; // 0x3e8
	char bShowOverlays : 1; // 0x3e8
	char bEnableDebugTextShadow : 1; // 0x3e8
	TArray<AActor*> PostRenderedActors; // 0x3f0
	float LastHUDRenderTime; // 0x400
	float RenderDelta; // 0x404
	TArray<FName> DebugDisplay; // 0x408
	TArray<FName> ToggledDebugCategories; // 0x418
	UCanvas* Canvas; // 0x428
	UCanvas* DebugCanvas; // 0x430
	TArray<FDebugTextInfo> DebugTextList; // 0x438
	AActor* ShowDebugTargetDesiredClass; // 0x448
	AActor* ShowDebugTargetActor; // 0x450
};

struct AGlobalEmitterService {
	UImpactListDataAsset* ImpactListDataAsset; // 0x3e8
};

struct UCargoRunCrateData {
	TArray<FText> DeliveryNoteDescriptions; // 0x28
	TArray<FText> DeliveryNoteDescriptionsNoDeadline; // 0x38
	TArray<FText> DeliveryNoteDescriptionsLate; // 0x48
	TArray<FText> DeliveryNoteClose; // 0x58
	TArray<FText> DeliveryNoteWelcome; // 0x68
	TArray<FText> DeliveryNoteWelcomeLate; // 0x78
	float WashedUpMinDistanceToNPC; // 0x88
	float WashedUpMaxDistanceToNPC; // 0x8c
};

struct UCrewVoyageParticipant {
	APlayerState* PlayerState; // 0xe8
};

struct UEnvQueryTest_Trace {
	FEnvTraceData TraceData; // 0x170
	FAIDataProviderBoolValue TraceFromContext; // 0x1b0
	FAIDataProviderFloatValue ItemHeightOffset; // 0x1e0
	FAIDataProviderFloatValue ContextHeightOffset; // 0x210
	UEnvQueryContext* Context; // 0x240
};

struct UEditorStyleSettings {
	FLinearColor SelectionColor; // 0x28
	FLinearColor PressedSelectionColor; // 0x38
	FLinearColor InactiveSelectionColor; // 0x48
	FLinearColor KeyboardFocusColor; // 0x58
	EColorVisionDeficiency ColorVisionDeficiencyPreviewType; // 0x68
	char bUseSmallToolBarIcons : 1; // 0x6c
	char bEnableWindowAnimations : 1; // 0x6c
	char bShowFriendlyNames : 1; // 0x6c
	char bExpandConfigurationMenus : 1; // 0x6c
	char bShowProjectMenus : 1; // 0x6c
	char bShowLaunchMenus : 1; // 0x6c
	ELogTimes LogTimestampMode; // 0x70
	bool bOpenAssetEditorTabsInNewWindow; // 0x71
};

struct UAnotherComponentWithTestInterface {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UInvalidClothingCategory {
	TArray<UClothingCategory*> PiratePreviewRemovals; // 0x78
	UAnimationAsset* PiratePreviewAnim; // 0x88
	FName PiratePreviewCamera; // 0x90
	bool PiratePreviewSpin; // 0x98
};

struct AWaterBarrel {
	UWwiseObjectPoolWrapper* WaterBarrelSfxPool; // 0x538
	UWwiseEvent* WaterBarrelStartLeakingSfx; // 0x540
	UWwiseEvent* WaterBarrelStopLeakingSfx; // 0x548
	UWwiseEvent* WaterBarrelStartPumpingSfx; // 0x550
	UWwiseEvent* WaterBarrelStopPumpingSfx; // 0x558
	UWwiseEvent* WaterBarrelLetStartPumpingSfx; // 0x560
	UWwiseEvent* WaterBarrelLetStopPumpingSfx; // 0x568
	FVector MinWaterHeight; // 0x570
	FVector MaxWaterHeight; // 0x57c
	UStaticMeshComponent* BarrelMesh; // 0x5a0
	UStaticMeshComponent* HandleMesh; // 0x5a8
	UInteractableComponent* InteractableComponent; // 0x5b0
	ULiquidContainerComponent* LiquidContainerComponent; // 0x5b8
	float MaxCapacity; // 0x5c0
	float CurrentCapacity; // 0x5c4
	float MaxLiquidCollectionAmount; // 0x5c8
	float PumpResetTime; // 0x5cc
	float WaterIncreasePerPump; // 0x5d0
	UCurveFloat* HandleRotationCurve; // 0x5d8
	UCurveFloat* WaterFlowCurve; // 0x5e0
	float WaterIntensityIncreaseSpeed; // 0x5e8
	float WaterIntensityDecreaseSpeed; // 0x5ec
	float TargetWaterIntensity; // 0x5f0
	float MinPumpRotation; // 0x5f8
	float MaxPumpRotation; // 0x5fc
	bool IsPumpingWater; // 0x600
	FName DockingSocketName; // 0x618
	FVector LookAtPosLocalSpace; // 0x620
	UObject* WaterSurfaceVFXTemplate; // 0x630
	UObject* WaterPumpVFXTemplate; // 0x638
	UParticleSystemComponent* WaterPumpParticleComponent; // 0x640
	UParticleSystemComponent* WaterSurfaceParticleComponent; // 0x648
	TArray<FWaterBarrelFeedbackLevel> HandleFeedbackLevels; // 0x650
};

struct UCaptainsClubhouseSettingsDataAsset {
	APawn* CaptainsClubhousePawn; // 0x28
};

struct UAllianceSettingsAsset {
	float MaximumAllianceDistance; // 0x28
	float PollDelay; // 0x2c
	UShipCustomizationDesc* OfferFlag; // 0x30
	UShipCustomizationDesc* AcceptFlag; // 0x38
	UShipCustomizationDesc* LeaveFlag; // 0x40
	UAlliancePennantAsset* AlliancePennantAsset; // 0x48
};

struct AStaticMeshFloatingItemProxy {
	FRigidBodyErrorCorrection PhysicsErrorCorrection; // 0x630
	UBoxComponent* BaseComponent; // 0x650
	FNetTimeStampCalculator MovementTimeStamp; // 0x688
	AActor* TutorialOwner; // 0x6f8
	bool IsTutorialProxy; // 0x700
	FReplicatedPhysicsState ReplicatedPhysicsState; // 0x708
	bool ForceKeepTickActive; // 0x758
	ECollisionChannel CachedAutoAimCollisionChannel; // 0x788
	ECollisionResponse CachedVehicleCollisionResponse; // 0x789
};

struct ULandscapeGrassType {
	TArray<FGrassVariety> GrassVarieties; // 0x28
	UStaticMesh* GrassMesh; // 0x38
	float GrassDensity; // 0x40
	float PlacementJitter; // 0x44
	int32_t StartCullDistance; // 0x48
	int32_t EndCullDistance; // 0x4c
	bool RandomRotation; // 0x50
	bool AlignToSurface; // 0x51
};

struct UChainLightningDeveloperSettings {
	FStringAssetReference ChainLightningVisualActorSettingsAsset; // 0x38
};

struct UCurveFloat {
	FRichCurve FloatCurve; // 0x30
	bool bIsEventCurve; // 0xa8
};

struct UTaleQuestReleaseVaultStep {
	bool VaultReleased; // 0x90
};

struct UMovementInterferenceComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UContestTeamAssignmentComponent {
	UContestShipCatalogueDataAsset* ArenaShipCatalogue; // 0xf8
	TArray<FShipLiveryTeamSet> CachedTeamSets; // 0x108
	TArray<FShipLiveryTeamSet> CachedUniqueTeamSets; // 0x118
	TArray<FContestShipLiverySet> LiverySets; // 0x128
	TArray<FContestShipLiverySet> CurrentlyAvaliableLiverySets; // 0x138
};

struct ULootForVoyageRankDescAsset {
	TArray<FLootToRangeDist> RankBasedLootDistribution; // 0x28
};

struct UPlayerSeasonProgressionComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct AGoldMoundItemProxy {
	UWwiseEvent* OnMoundInteractStartLoopingSfx; // 0x628
	UWwiseEvent* OnMoundInteractStopLoopingSfx; // 0x630
	UWwiseEvent* OnMoundCancelPickupSfx; // 0x638
	UWwiseEvent* OnMoundPickupCompleteSfx; // 0x640
	UWwiseObjectPoolWrapper* GoldMoundSfxPool; // 0x648
	UObject* AmbientVfx; // 0x650
	UObject* PickupVfx; // 0x658
	UParticleSystemComponent* AmbientParticleSystem; // 0x680
	UParticleSystemComponent* PickupParticleSystem; // 0x688
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x6a8
	float FadeOutDuration; // 0x6bc
	bool DelayedDestroyStarted; // 0x6c0
};

struct UAmmoStoreMetaGenerator {
	UScriptStruct* MetaWrapper; // 0x28
};

struct ATornMap {
	FStringAssetReference AltMapMarkTextureAsset; // 0x848
	UTexture* AltMapMarkTexture; // 0x858
	float BlendSpeed; // 0x860
	TArray<FStringAssetReference> MaskRefs; // 0x868
	TArray<FVector> TargetVisibility; // 0x878
	float MaskRotation; // 0x8ac
	int32_t NumPieces; // 0x8b0
	TArray<UTexture*> MaskTextures; // 0x8b8
};

struct UShipwreckNameGeneratorDefault {
	TArray<FText> ShipwreckNames; // 0x40
};

struct URotatingMovementComponent {
	FRotator RotationRate; // 0x110
	FVector PivotTranslation; // 0x11c
	char bRotationInLocalSpace : 1; // 0x128
};

struct UMaterialExpressionFresnel {
	FExpressionInput ExponentIn; // 0x70
	float Exponent; // 0xa8
	FExpressionInput BaseReflectFractionIn; // 0xb0
	float BaseReflectFraction; // 0xe8
	FExpressionInput Normal; // 0xf0
};

struct UTaleQuestStructStepDescBase {
	UScriptStruct* Struct; // 0x80
	TMap<FName, FName> PropertyMappings; // 0x88
};

struct UPlayerNameplateComponent {
	float VisibleFromWorldDistance; // 0x2e0
	float VisibleUntilWorldDistanceCrew; // 0x2e4
	float VisibleUntilWorldDistanceNonCrew; // 0x2e8
	float EmoteForcedRevealTime; // 0x2ec
	AAthenaPlayerCharacter* PlayerCharacter; // 0x2f8
};

struct UDistributionVectorParticleParameter {
	FName ParameterName; // 0x50
	FVector MinInput; // 0x58
	FVector MaxInput; // 0x64
	FVector MinOutput; // 0x70
	FVector MaxOutput; // 0x7c
	DistributionParamMode ParamModes[0x3]; // 0x88
};

struct UPageNamedNextPageRadialAction {
	UNotificationInputId* InputID; // 0x28
};

struct UParticleModuleLocationPrimitiveCylinder {
	char RadialVelocity : 1; // 0xc8
	FRawDistributionFloat StartRadius; // 0xd0
	FRawDistributionFloat AdditionalStartRadiuses[0x4]; // 0x108
	char StartRadiusUseGroupAForAll : 1; // 0x1e8
	FVector2D RadiusScale; // 0x1ec
	FRawDistributionFloat StartHeight; // 0x1f8
	char StartHeightUseGroupAForAll : 1; // 0x230
	FRawDistributionFloat AdditionalStartHeights[0x4]; // 0x238
	FVector2D AngleRange; // 0x318
	FVector2D AdditionalAngleRanges[0x4]; // 0x320
	char AngleRangeUseGroupAForAll : 1; // 0x340
	CylinderHeightAxis HeightAxis; // 0x344
};

struct AGhostShipStreamingProbe {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UTaleQuestEmissaryCompanyActionRewardBoostStep {
	UTaleQuestEmissaryCompanyActionRewardBoostStepDesc* Desc; // 0x90
};

struct ULayer {
	FName LayerName; // 0x28
	char bIsVisible : 1; // 0x30
	TArray<FLayerActorStats> ActorStats; // 0x38
};

struct UReapersMarkSettingsAsset {
	float PollIntervalSeconds; // 0x28
	UShipCustomizationDesc* ReapersMarkFlag; // 0x30
	TArray<FReapersMarkStatusStatInfo> ShipStatusStats; // 0x38
	TArray<FReapersMarkCurseStatInfo> SkeletonCurseStats; // 0x48
	TArray<FReapersMarkLevelEntry> ReapersMarkLevelData; // 0x58
	FPlayerStat StatToFireOnReapersMarkLevelIncrease; // 0x68
};

struct UPlayerTelemetryComponent {
	float HeartbeatInterval; // 0x128
	FDateTime SpawnTimestamp; // 0x270
};

struct ADummyReplicatedActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UAbandonedNoteClueGenderSpecificTextAsset {
	TArray<FGenderSpecificTextPairings> Descriptions; // 0x28
	UClueDestinationDescriptor* DestinationType; // 0x38
};

struct UTaleQuestClueInventoryService {
	TArray<UClueDescriptor*> ObtainedClues; // 0x78
	TMap<UClueDescriptor*, AActor*> DiscovererMap; // 0xd8
	FText TitleText; // 0x248
	UAbandonedNoteClueTextChoiceSource* ClueTextChoiceSource; // 0x280
};

struct UAthenaSpringArmComponent {
	float TargetArmLength; // 0x2b0
	FVector SocketOffset; // 0x2b4
	FVector TargetOffset; // 0x2c0
	float ProbeSize; // 0x2cc
	ECollisionChannel ProbeChannel; // 0x2d0
	char bDoCollisionTest : 1; // 0x2d4
	char bUsePawnControlRotation : 1; // 0x2d4
	char bInheritPitch : 1; // 0x2d4
	char bInheritYaw : 1; // 0x2d4
	char bInheritRoll : 1; // 0x2d4
	char bEnableCameraLag : 1; // 0x2d4
	char bEnableCameraRotationLag : 1; // 0x2d4
	char bUseCameraLagSubstepping : 1; // 0x2d4
	char bDrawDebugLagMarkers : 1; // 0x2d5
	float CameraLagSpeed; // 0x2d8
	float CameraRotationLagSpeed; // 0x2dc
	float CameraLagMaxTimeStep; // 0x2e0
	float CameraLagMaxDistance; // 0x2e4
};

struct ACommodityDemandService {
	FActiveNPCDemands ActiveCommodityDemands; // 0x3f0
};

struct AStaticMeshWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UIslandEventType {
	FIslandEventIcons IslandIcons; // 0x28
	FIslandEventIcons HeaderIcons; // 0x38
};

struct UCallObjectFunctionStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ALightingController {
	FLightingControllerPostProcessParams PostProcessParams; // 0x3d0
	FLightingControllerRainParams RainParams; // 0x570
	FLightingControllerLightningParams LightningParams; // 0x588
	FLightingControllerLightingParams LightingParams; // 0x5c8
	FLightingControllerMoonParams MoonParams; // 0x610
	FLightingControllerTransformParams TransformParams; // 0x650
	FLightingControllerTimeParams TimeParams; // 0x6e0
	FLightingControllerIslandDangerParams DangerLevelParams; // 0x700
	TArray<ULightingControllerSettings*> LightingSettings; // 0x708
	AStaticMeshActor* OverworldFarQuad; // 0x718
	AStaticMeshActor* UnderworldFarQuad; // 0x720
	float FixedTimeOfDay; // 0x728
	int32_t FixedDay; // 0x72c
	bool IsFixedTimeOfDay; // 0x730
	USceneComponent* RootSceneComponent; // 0x738
	FLightingControllerAssetParams AssetParams; // 0x740
	UDirectionalLightComponent* DirectionalLight; // 0x790
	UStaticMeshComponent* SkyDome; // 0x798
	UStaticMeshComponent* NorthStar; // 0x7a0
	UExponentialHeightFogComponent* Fog; // 0x7a8
	UExponentialHeightFogComponent* UnderwaterFog; // 0x7b0
	UPostProcessComponent* GlobalPostProcess; // 0x7b8
	UDirectionalLightComponent* RainLight; // 0x7c0
	UStaticMeshComponent* Moon; // 0x7c8
	USkyLightComponent* SkyLight; // 0x7d0
	float DebugTimeOfDay; // 0x7d8
	float DebugRain; // 0x7dc
	float DebugMurk; // 0x7e0
	int32_t DebugDay; // 0x7e4
	char IsDebugFixedTimeOfDay : 1; // 0x7e8
	char ShowDebugSunHeightInfo : 1; // 0x7e8
	char ShowDebugLightingZoneInfo : 1; // 0x7e8
	char ShowDebugUnderwater : 1; // 0x7e8
	FLightingControllerLightingVars LightingVars; // 0x810
	FLightingControllerMaterialInstances MaterialInstances; // 0xc70
	TArray<AActor*> ReflectionProbes; // 0xc90
	TArray<FWaterModifierZoneParametersAndLocation> MurkZones; // 0xcc0
	UCurveFloat* EndOfWorldLightingZoneWeightCurve; // 0xd78
};

struct UNPCOnSurfaceCannonManager {
	TArray<FNPCOnSurfaceCannonManagerCannon> Cannons; // 0x28
	UNPCOnSurfaceCannonManagerDataAsset* CannonManagerDataAsset; // 0x38
	UNPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset* CannonManagerCrewSizeSettingsDataAsset; // 0x40
};

struct AAIDockableObject {
	UAIInteractableType* InteractableType; // 0x510
	float InteractableOffset; // 0x518
};

struct UFishingInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UBTDecorator_IsForcingHangout {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UWorldLocationPopUpDataAsset {
	FName Id; // 0x28
	FStringAssetReference BannerIcon; // 0x30
	FText DisplayText; // 0x40
	UPopUpAudioDesc* AudioOverride; // 0x78
};

struct UGhostCharacterAudioComponent {
	TArray<UWwiseEvent*> GhostShipPlayEvents; // 0xc8
	UWwiseEvent* GhostShipWaterphonePlay; // 0xd8
	UWwiseEvent* GhostShipMusicStopAll; // 0xe0
	UWwiseEvent* GhostShipAmbiencePlay; // 0xe8
	UWwiseEvent* GhostShipAmbienceStop; // 0xf0
	float GhostShipEventChangeMinTriggerTime; // 0xf8
	float GhostShipEventChangeMaxTriggerTime; // 0xfc
	UGhostCharacterAudioComponentParams* GhostCharacterAudioParams; // 0x100
	UCharacterAudioFootfallControllerParams* FootfallParams; // 0x108
};

struct USpawnCollectableQuestObjectStepDesc {
	AActor* CollectableQuestBookPageToSpawn; // 0x80
	FQuestVariablePlayerActor CollectingPlayerActor; // 0x88
};

struct UEventTaleQuestService {
	TMap<FName, FEventTaleQuestServiceEntry> BoundDelegates; // 0x60
};

struct UNameplateService {
	TArray<UNameplateComponent*> RegisteredNameplates; // 0x30
};

struct UGlitterBeardFinaleCoordinatorComponent {
	UWwiseEvent* AudioEventToSynchronise; // 0xc8
	FFinaleReplicationState ReplicationState; // 0xd0
};

struct UAvoidanceManager {
	float DefaultTimeToLive; // 0x30
	float LockTimeAfterAvoid; // 0x34
	float LockTimeAfterClean; // 0x38
	float DeltaTimeToPredict; // 0x3c
	float ArtificialRadiusExpansion; // 0x40
	float TestHeightDifference; // 0x44
};

struct ATinySharkExperience {
	float RelevancyDistance; // 0x3d8
	float TrackingMovementCheckInterval; // 0x3dc
	UEnvQuery* TrackingMovementValidQuery; // 0x3e0
	UAIOnDemandSpawner* TinySharkSpawner; // 0x488
	ASharkPawn* TinySharkPawn; // 0x490
	FName HealthRTPC; // 0x498
	FTinySharkParams Params; // 0x4a8
	UTinySharkTelemetryComponent* TinySharkTelemetryComponent; // 0x560
	AShip* TrackedShip; // 0x568
	FEncounterParams SightingEncounterParams; // 0x5f0
	FEncounterParams CloseEncounterParams; // 0x5fc
	UAthenaAIControllerParamsDataAsset* CachedControllerParamsAsset; // 0x748
};

struct AThreadedActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UInterpTrackInstSound {
	float LastUpdatePosition; // 0x28
	UAudioComponent* PlayAudioComp; // 0x30
};

struct UStatusResponseBurpingGasChange {
	float IntensityMultiplier; // 0x30
};

struct UPawnAction_Move {
	AActor* GoalActor; // 0x90
	FVector GoalLocation; // 0x98
	float AcceptableRadius; // 0xa4
	UNavigationQueryFilter* FilterClass; // 0xa8
	char bAllowStrafe : 1; // 0xb0
	char bFinishOnOverlap : 1; // 0xb0
	char bUsePathfinding : 1; // 0xb0
	char bAllowPartialPath : 1; // 0xb0
	char bProjectGoalToNavigation : 1; // 0xb0
	char bUpdatePathToGoal : 1; // 0xb0
	char bAbortChildActionOnPathChange : 1; // 0xb0
};

struct AAINoiseFireInstigator {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct USplashProbeDataAsset {
	TArray<FSplashProbe> Probes; // 0x28
};

struct AItemProxy {
	float InteractionPointRadius; // 0x558
	UWwiseEvent* GroundImpactSfx; // 0x560
	TArray<FItemProxyImpactVfxParams> VFXParams; // 0x568
	float ZOffsetWhenPlacingWorldProxy; // 0x578
	FRotator RotationWhenPlacingWorldProxy; // 0x57c
	ECollisionChannel DropOnSurfaceClientTraceChannel; // 0x588
	UPrimitiveComponent* ThirdPersonMesh; // 0x590
	float TTL; // 0x598
	UWaterInteractionComponent* WaterInteractionComponent; // 0x5a0
	UBuoyancyComponent* BuoyancyComponent; // 0x5a8
	EPhysicalSurface CachedProxySurfaceType; // 0x5b1
	bool CachedOnTopOfExistingBuriable; // 0x5b2
	AItemInfo* ItemInfo; // 0x5b8
	float TTLPlayerProximityCutoff; // 0x61c
	float TTLRecheckPeriod; // 0x620
};

struct USpotLightComponent {
	float InnerConeAngle; // 0x478
	float OuterConeAngle; // 0x47c
	float LightShaftConeAngle; // 0x480
	float KickBackRatio; // 0x484
};

struct UZoomMapTaleStep {
	UZoomMapTaleStepDesc* Desc; // 0x90
	FName IslandName; // 0x98
	UBookTaleQuestService* BookService; // 0xa0
	FVector ZoomCenterPoint; // 0xa8
	FVector DigSpot; // 0xb4
	FVector CanvasDimensions; // 0xc0
	UZoomMapParamsDataAsset* Params; // 0xd0
	UTexture* IslandMapTexture; // 0xd8
};

struct UAbilityTask_WaitAttributeChange {
	FScriptMulticastDelegate OnChange; // 0x68
};

struct UBookTaleQuestService {
	TArray<int32_t> BookContents; // 0x120
	TArray<FPageLayoutRepInfo> ProcBookContents; // 0x130
	TArray<int32_t> CurrentBookContents; // 0x140
	UQuestBookItemDesc* QuestBookDesc; // 0x150
};

struct UStatusEffectVolumeComponent {
	bool UseOverlapEventsFromParentComponent; // 0x2b0
	TArray<FStatus> StatusEffectsToMaintain; // 0x2b8
};

struct UUsableComponent {
	FWieldableItemActionVisuals ActionVisuals; // 0xd0
	TArray<FActionVisualsOverride> ActionVisualOverrides; // 0xe8
};

struct UWieldingParamsAsset {
	float WieldDuration; // 0x28
	TArray<UNotificationInputId*> InvalidMidWieldInputs; // 0x30
};

struct UEmblemSettings {
	FStringAssetReference EmblemDefinitionAssetListLocation; // 0x28
};

struct USnapshotWidgetReflectorNode {
	FText CachedWidgetType; // 0x80
	FText CachedWidgetVisibilityText; // 0xb8
	FText CachedWidgetReadableLocation; // 0xf0
	FString CachedWidgetFile; // 0x128
	int32_t CachedWidgetLineNumber; // 0x138
	FName CachedWidgetAssetName; // 0x13c
	FVector2D CachedWidgetDesiredSize; // 0x144
	FSlateColor CachedWidgetForegroundColor; // 0x150
	FString CachedWidgetAddress; // 0x180
	bool CachedWidgetEnabled; // 0x190
};

struct UWardrobeOutfitDataAsset {
	TArray<FName> FemaleWardrobeItems; // 0x28
	TArray<FName> MaleWardrobeItems; // 0x38
	TArray<FWardrobeOutfitCategoryBias> BiasPerCategory; // 0x48
};

struct UWaitForItemPickupStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ACannon {
	USkeletalMeshComponent* BaseMeshComponent; // 0x528
	UStaticMeshComponent* BarrelMeshComponent; // 0x530
	UStaticMeshComponent* FuseMeshComponent; // 0x538
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x540
	ULoadableComponent* LoadableComponent; // 0x548
	ULoadingPointComponent* LoadingPointComponent; // 0x550
	UChildActorComponent* CannonBarrelInteractionComponent; // 0x558
	UFuseComponent* FuseComponent; // 0x560
	FName CameraSocket; // 0x568
	FName CameraInsideCannonSocket; // 0x570
	FName LaunchSocket; // 0x578
	FName TooltipSocket; // 0x580
	FName AudioAimRTPCName; // 0x588
	FName InsideCannonRTPCName; // 0x590
	AActor* ProjectileClass; // 0x598
	float TimePerFire; // 0x5a0
	float ProjectileSpeed; // 0x5a4
	float ProjectileGravityScale; // 0x5a8
	FFloatRange PitchRange; // 0x5ac
	FFloatRange YawRange; // 0x5bc
	float PitchSpeed; // 0x5cc
	float YawSpeed; // 0x5d0
	UCameraShake* CameraShake; // 0x5d8
	float ShakeInnerRadius; // 0x5e0
	float ShakeOuterRadius; // 0x5e4
	float CannonFiredAINoiseRange; // 0x5e8
	FName AINoiseTag; // 0x5ec
	FText CannonDisabledToolTipText; // 0x5f8
	FText LoadingDisabledToolTipText; // 0x630
	float DefaultFOV; // 0x668
	float AimFOV; // 0x66c
	float IntoAimBlendSpeed; // 0x670
	float OutOfAimBlendSpeed; // 0x674
	UWwiseEvent* FireSfx; // 0x678
	UWwiseEvent* DryFireSfx; // 0x680
	UWwiseEvent* LoadingSfx_Play; // 0x688
	UWwiseEvent* LoadingSfx_Stop; // 0x690
	UWwiseEvent* UnloadingSfx_Play; // 0x698
	UWwiseEvent* UnloadingSfx_Stop; // 0x6a0
	UWwiseEvent* LoadedPlayerSfx; // 0x6a8
	UWwiseEvent* UnloadedPlayerSfx; // 0x6b0
	UWwiseEvent* FiredPlayerSfx; // 0x6b8
	UWwiseObjectPoolWrapper* SfxPool; // 0x6c0
	UWwiseEvent* StartPitchMovement; // 0x6c8
	UWwiseEvent* StopPitchMovement; // 0x6d0
	UWwiseEvent* StartYawMovement; // 0x6d8
	UWwiseEvent* StopYawMovement; // 0x6e0
	UWwiseEvent* StopMovementAtEnd; // 0x6e8
	UWwiseObjectPoolWrapper* SfxMovementPool; // 0x6f0
	UObject* FuseVfxFirstPerson; // 0x6f8
	UObject* FuseVfxThirdPerson; // 0x700
	UObject* MuzzleFlashVfxFirstPerson; // 0x708
	UObject* MuzzleFlashVfxThirdPerson; // 0x710
	FName FuseSocketName; // 0x718
	FName BarrelSocketName; // 0x720
	UItemCategory* RadialCategoryFilter; // 0x728
	UItemDesc* DefaultLoadedItemDesc; // 0x730
	float ClientRotationBlendTime; // 0x738
	AItemInfo* LoadedItemInfo; // 0x740
	float ServerPitch; // 0x754
	float ServerYaw; // 0x758
	UParticleSystemComponent* LoadedItemVFXComp; // 0x760
	UStaticMesh* DefaultFuseMesh; // 0x768
	ECannonInteractionState InteractionState; // 0xc00
};

struct UEnvQueryGenerator_Line {
	UEnvQueryContext* FromContext; // 0x90
	UEnvQueryContext* ToContext; // 0x98
	FAIDataProviderFloatValue PointSpacing; // 0xa0
	FAIDataProviderIntValue NumExtraPairsOfParallelLines; // 0xd0
	FAIDataProviderFloatValue ParallelLineSpacing; // 0x100
	float MaxValidLineLength; // 0x130
	bool ForceIncludeEndPoint; // 0x134
	bool ProjectPointsToWaterSurface; // 0x135
};

struct ULeaderboardQueryCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UIslandBoundsComponent {
	float SphereRadius; // 0x5a8
};

struct UPlayerEnteredShipConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct ACapstanMechanismTriggerProxy {
	FCapstanParams Parameters; // 0x3f0
};

struct UMatchesAllConditionsStatCondition {
	TArray<UStatCondition*> Conditions; // 0x28
};

struct UInteractableArea {
	FBoxSphereBounds Bounds; // 0x28
	FName Name; // 0x44
	UObject* Interactable; // 0x50
	AActor* Parent; // 0x58
};

struct UIsWieldingItemRadialContext {
	bool TargetsAllWieldables; // 0x28
	TArray<AWieldableItem*> TargetItems; // 0x30
};

struct AFFTWaterService {
	TWeakObjectPtr<AAthenaFFTWater> FFTWaterActor; // 0x3e0
	TWeakObjectPtr<UFFTWaterComponent> FFTWaterComponent; // 0x3e8
	TWeakObjectPtr<UFFTWaterExtendedPlaneComponent> ExtendedPlaneComponent; // 0x3f0
	double ReplicatedServerCreationTime; // 0x448
};

struct ATreasureChestItemProxySkeletal {
	UWwiseEvent* ShovelEnterSurfaceSfx; // 0x7c8
	UWwiseEvent* ExhumeStepSfx; // 0x7d0
	UWwiseEvent* FullyDugUpSfx; // 0x7d8
	UWwiseObjectPoolWrapper* ChestAmbiencePool; // 0x7e0
	UWwiseEvent* ChestAmbiencePlay; // 0x7e8
	UWwiseEvent* ChestAmbienceStop; // 0x7f0
	UDitherComponent* DitherComponent; // 0x7f8
	FEncounterParams CloseProximityEncounterParams; // 0x800
	UItemDiggingAudioConfig* CachedAudioConfig; // 0x810
};

struct UContestSettingsDataAsset {
	FContestTimerData MatchmakingTimeoutTime; // 0x28
	FContestTimerData AttemptToMigrateFailSafeTime; // 0x40
	FContestTimerData ContestStartTime; // 0x58
	FContestTimerData PostContestTimeBeforeReturningToACT; // 0x70
	FContestTimerData StartBlindsDisplayTime; // 0x88
	FContestTimerData LeaderboardDisplayTime; // 0xa0
	FContestTimerData ContestRewardTime; // 0xb8
	FContestTimerData ServerShutdownMinutes; // 0xd0
	FContestTimerData ServerRecruitingTime; // 0xe8
	FContestCrewRequirementData StagingRequirements; // 0x100
	FContestCrewRequirementData FallbackStagingRequirements; // 0x128
	FContestCrewRequirementData ContestRequirements; // 0x150
	UContestVoyagesSelectorDataAsset* VoyageDataAsset; // 0x178
	UMatchmakingVoyageRecipeDesc* OverarchingVoyageAsset; // 0x180
	UCompany* ArenaCompany; // 0x188
	UContestShipCatalogueDataAsset* ShipCatalogueDataAsset; // 0x190
	APawn* ArenaTavernPawnClass; // 0x198
	FContestUIDescriptions ContestUIDescriptions; // 0x1a0
	TArray<FText> LeaderboardMessagesInOrder; // 0x220
	float StagingNotificationFrequency; // 0x230
	TArray<UItemCategory*> ItemsToReset; // 0x238
	UCurveFloat* ContestLightingZoneWeightCurve; // 0x248
	float ContestForceSinkThreshold; // 0x250
	UItemDesc* ScoreScroll; // 0x258
	FString NumOfPeriodsRetrievalString; // 0x260
	FString PeriodEndInMinutesRetrievalStringPrefix; // 0x270
	UConditionalStatsTriggerType* ConditionalStatForCompletingAContest; // 0x280
	UConditionalStatsTriggerType* ConditionalStatForCompletingContestWithShip; // 0x288
};

struct UBTTask_RunOneShotCustomAnimation {
	bool UseFixedOneShotCustomAnimationName; // 0x60
	FName FixedOneShotCustomAnimationName; // 0x64
	FBlackboardKeySelector OneShotCustomAnimationNameKey; // 0x70
	bool GetDurationAndEffectTime; // 0x98
	FBlackboardKeySelector AnimationDuration; // 0xa0
	FBlackboardKeySelector AnimationEffectTime; // 0xc8
	bool StopCurrentLoopingAnimation; // 0xf0
};

struct UButtonStyleAsset {
	FButtonStyle ButtonStyle; // 0x28
};

struct UIslandFaunaSettings {
	int32_t IslandPopulatedChance; // 0x28
	FWeightedProbabilityRange NumberOfFaunaTypes; // 0x30
	TArray<FFaunaTypeSettings> FaunaTypeSettings; // 0x50
};

struct AStaticMeshItemProxy {
	float InteractionPointRadius; // 0x558
	UWwiseEvent* GroundImpactSfx; // 0x560
	TArray<FItemProxyImpactVfxParams> VFXParams; // 0x568
	float ZOffsetWhenPlacingWorldProxy; // 0x578
	FRotator RotationWhenPlacingWorldProxy; // 0x57c
	ECollisionChannel DropOnSurfaceClientTraceChannel; // 0x588
	UPrimitiveComponent* ThirdPersonMesh; // 0x590
	float TTL; // 0x598
	UWaterInteractionComponent* WaterInteractionComponent; // 0x5a0
	UBuoyancyComponent* BuoyancyComponent; // 0x5a8
	EPhysicalSurface CachedProxySurfaceType; // 0x5b1
	bool CachedOnTopOfExistingBuriable; // 0x5b2
	AItemInfo* ItemInfo; // 0x5b8
	float TTLPlayerProximityCutoff; // 0x61c
	float TTLRecheckPeriod; // 0x620
};

struct UTextureRenderTarget2D {
	int32_t SizeX; // 0x140
	int32_t SizeY; // 0x144
	FLinearColor ClearColor; // 0x148
	TextureAddress AddressX; // 0x158
	TextureAddress AddressY; // 0x159
	char bForceLinearGamma : 1; // 0x15c
	char bHDR : 1; // 0x15c
	char bAutoGenerateMips : 1; // 0x15c
	EPixelFormat OverrideFormat; // 0x160
	bool bDontClearOnCreation; // 0x161
};

struct UPoseableSkeletalMeshComponent {
	EAnimationMode AnimationMode; // 0x6d0
	UObject* AnimBlueprintGeneratedClass; // 0x6d8
	UAnimInstance* AnimScriptInstance; // 0x6e0
	FSingleAnimationPlayData AnimationData; // 0x6e8
	TArray<FTransform> CachedLocalAtoms; // 0x718
	TArray<FTransform> CachedSpaceBases; // 0x728
	float GlobalAnimRateScale; // 0x760
	char bHasValidBodies : 1; // 0x764
	EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x768
	char bBlendPhysics : 1; // 0x76c
	char bEnablePhysicsOnDedicatedServer : 1; // 0x76c
	char bUpdateJointsFromAnimation : 1; // 0x76c
	char bDisableClothSimulation : 1; // 0x76c
	char bCollideWithEnvironment : 1; // 0x76c
	char bCollideWithAttachedChildren : 1; // 0x76c
	char bLocalSpaceSimulation : 1; // 0x76c
	char bClothMorphTarget : 1; // 0x76c
	char bResetAfterTeleport : 1; // 0x76d
	float TeleportDistanceThreshold; // 0x770
	float TeleportRotationThreshold; // 0x774
	float ClothBlendWeight; // 0x778
	FVector RootBoneTranslation; // 0x780
	char bNoSkeletonUpdate : 1; // 0x78c
	char bPauseAnims : 1; // 0x78c
	char bEnablePerPolyCollision : 1; // 0x78c
	UBodySetup* BodySetup; // 0x790
	char bAutonomousTickPose : 1; // 0x798
	char bForceRefpose : 1; // 0x798
	char bOldForceRefPose : 1; // 0x798
	char bShowPrePhysBones : 1; // 0x798
	char bRequiredBonesUpToDate : 1; // 0x798
	char bAnimTreeInitialised : 1; // 0x798
	char bEnableLineCheckWithBounds : 1; // 0x798
	FVector LineCheckBoundsScale; // 0x79c
	int32_t RagdollAggregateThreshold; // 0x7a8
	FScriptMulticastDelegate OnConstraintBroken; // 0x7b0
	bool UseRefPoseToInitialise; // 0x7c0
	float LastPoseTickTime; // 0x988
};

struct UClearSpawnProgressStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UMaterialExpressionCameraPositionWS {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UActionRulesComponent {
	double InteractionTimeThreshold; // 0xd0
};

struct UPetEntitlementCategory {
	FName PetPreviewCamera; // 0x80
};

struct UWaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc {
	EPlayMode ExpectedSourcePlayMode; // 0x80
	FString ExpectedSourceSubMode; // 0x88
	EPlayMode ExpectedDestinationPlayMode; // 0x98
	FString ExpectedDestinationSubMode; // 0xa0
};

struct AMastEmissaryFlag {
	UReplicatedShipPartCustomizationComponent* CustomizationComponent; // 0x3d8
	UWwiseEvent* StartAmbientFlagSfx; // 0x3e0
	UWwiseEvent* StopAmbientFlagSfx; // 0x3e8
	UWwiseEvent* AttachFlagSfx; // 0x3f0
	UWwiseEvent* DetachFlagSfx; // 0x3f8
	UWwiseObjectPoolWrapper* SfxPool; // 0x400
	USceneComponent* RootSceneComponent; // 0x408
	UStaticMeshComponent* EmissaryFlagStaticMeshComponent; // 0x410
	FStringAssetReference CurrentEmissaryFlagMesh; // 0x440
};

struct UWashedUpItemDataAsset {
	TArray<FIslandItemSpawnLocationData> SpawnLocations; // 0x38
};

struct UTaleQuestRemoveMapStep {
	UTaleQuestRemoveMapStepDesc* StepDesc; // 0x90
};

struct UDebugMenuComponent {
	ADebugMenu* DebugMenuInstance; // 0xf0
};

struct UTetherCustomisationComponent {
	USceneComponent* ComponentToTetherTo; // 0xd0
	float MassIntertiaScale; // 0x120
	bool CanBeTethered; // 0x124
	bool IsMassInertiaScalingEnabled; // 0x125
};

struct USeasonProgressionUIComponent {
	TArray<FEnableMoreButtonEvent> DetailsNavigationDesc; // 0xe8
	FSeasonProgressionUITelemetryFragment NextReceivedEventsTelemetryData; // 0xf8
};

struct UStatusResponseReportNoiseEvent {
	AActor* NoiseInstigator; // 0x30
	FName NoiseTag; // 0x38
	float NoiseRange; // 0x40
	float NoiseLoudness; // 0x44
	bool NoiseMultipleTicks; // 0x48
	float NoiseTimerTick; // 0x4c
};

struct UBTTask_SetIsHeadingOffNavMeshCheck {
	bool DisableIsHeadingOffNavMeshCheck; // 0x60
};

struct UCollectorsChestItemDescSpawnData {
	UClass* CollectorsChestClass; // 0x58
	FWeightedProbabilityRange NumberOfItemsToSpawn; // 0x78
	FWeightedItemDescSpawnDataAssetsWithWeights ItemsToSpawnInsideCollectorsChest; // 0x98
	UWeightedGoldRewardsDataAsset* GoldToSpawnInsideCollectorsChest; // 0xa8
};

struct UMatchmakingVoyageRecipeDesc {
	FMatchmakingVoyageRecipe MatchmakingRecipe; // 0x170
};

struct UCommodityRedemptionComponent {
	FText RedeemTooltipText; // 0xd0
	TArray<AActor*> PendingRedemptions; // 0x180
};

struct UVisualHealthResponseDataAsset {
	TArray<UObject*> GatedByHealthVfxAscendingOrder; // 0x28
	FName GatedByHealthVfxSocketName; // 0x38
	bool GatedByHealthVfxValidUnderwater; // 0x40
	FName HealthPropertyName; // 0x44
	float SignificantHealthChangeNormalised; // 0x4c
};

struct USkeletonFortAIToggler {
	TArray<FFortTogglerUnit> FortUnits; // 0x68
	UObject* WorldContext; // 0x78
};

struct UAthenaCharacterBaseInputComponentWithInterference {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UCompanyValidationAsset {
	TArray<FCompanyValidationAssetUnit> CompaniesToValidate; // 0x28
};

struct UTaleQuestGenerateLootDescForVoyageRankStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UTaleQuestActorService {
	TArray<FTrackedActorData> TrackedActors; // 0x60
	TArray<FCriticalActorDelegateData> CriticalActors; // 0x70
	TArray<FSnapshottedActorData> SnapshottedActors; // 0x80
	UTaleQuestActorServiceDesc* Desc; // 0x90
	APhasedClusterRoot* PhasedClusterRoot; // 0x98
	TArray<FPhasedActor> PhasedActors; // 0xa0
	TArray<FPhasedItem> PhasedItems; // 0xb0
	FText CriticalActorHandedInByAnotherCrewFailureMessage; // 0xc0
};

struct UCharacterAnimationInstance {
	FCharacterAnimationIKUpdateParams IKLeftHandUpdateParams; // 0x450
	FCharacterAnimationIKUpdateParams IKRightHandUpdateParams; // 0x490
	FName RightHandIKSocketName; // 0x4d0
	FName LeftHandIKSocketName; // 0x4d8
	FLimbIK RightHandIK; // 0x4e0
	FLimbIK LeftHandIK; // 0x540
	FLimbIK RightFootIK; // 0x5a0
	FLimbIK LeftFootIK; // 0x600
};

struct UKrakenHeadAnimationInstance {
	UKrakenHeadState* CurrentState; // 0x440
	UKrakenHeadState* PreviousState; // 0x448
	UKrakenHeadStateAnimationsDataAsset* MappingAsset; // 0x450
	float SpawnBlendTime; // 0x458
	float DefaultBlendTime; // 0x45c
	bool IsInIntro; // 0x460
	UAnimMontage* PlayingMontage; // 0x468
	UKrakenHeadHitReactAnimationsDataAsset* KrakenHeadHitReactionAsset; // 0x480
};

struct UNPCLootSpawnComponent {
	TArray<FVector> LootItemSpawnRelativeLocations; // 0xd0
};

struct UBTDecorator_TimeLimit {
	float TimeLimit; // 0x68
};

struct UServerMigrationSerialisationDetailsTestsMigratableComponent {
	float FloatWithMigrationMarkup; // 0xc8
	int32_t IntWithNoMarkup; // 0xcc
};

struct UPlayerActivityLifetimeRuleCatalogueDataAsset {
	TArray<FPlayerActivityLifetimeRule> PlayerActivityLifetimeRules; // 0x28
};

struct UAbilityTask_WaitAbilityActivate {
	FScriptMulticastDelegate OnActivate; // 0x68
};

struct USpawnRequirement {
	TArray<USpawnRequirement*> OR_Requirements; // 0x40
};

struct UMaterialExpressionParameter {
	FName ParameterName; // 0x70
	FGuid ExpressionGUID; // 0x78
	FName Group; // 0x88
};

struct UReviveSettings {
	float HealthRegained; // 0x38
	float MaximumReviveDistance; // 0x3c
	FLinearColor FadeColour; // 0x40
	bool ShouldFadeAudio; // 0x50
	float ServerWaitTimeBeforeFullyReviving; // 0x54
	float ReviveTime; // 0x58
	float MaxRevertEvaporateDuration; // 0x5c
	TArray<EPlayMode> UnsupportedPlayModes; // 0x60
	TArray<FModeSpecificReviveSettings> ModeSpecificSettings; // 0x70
	float GiveUpHoldTime; // 0x80
	float GiveUpFadeDuration; // 0x84
	float GiveUpEvaporateDuration; // 0x88
};

struct ASovereign {
	UCompanyNPCComponent* CompanyNPCComponent; // 0x608
};

struct ULogoutCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UTitleCategory {
	TArray<UClothingCategory*> PiratePreviewRemovals; // 0x78
	UAnimationAsset* PiratePreviewAnim; // 0x88
	FName PiratePreviewCamera; // 0x90
	bool PiratePreviewSpin; // 0x98
};

struct UChestOfRageComponent {
	UChestOfRageDataAsset* ChestOfRageDataAsset; // 0xd0
	FChestOfRageReplicatedData ReplicatedData; // 0xd8
	UParticleSystemComponent* RageBuildingVfxEmitter; // 0x160
	UParticleSystemComponent* SteamingVfxEmitter; // 0x168
	UParticleSystemComponent* OnFireVfxEmitter; // 0x170
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x178
	TArray<AActor*> RageContributors; // 0x188
};

struct UNPCDialogPredicateHasRank {
	URankDesc* Rank; // 0x38
};

struct UPopUpMessageDesc {
	FStringAssetReference ToastBackgroundImage; // 0x28
	FStringAssetReference BackgroundImage; // 0x38
	FStringAssetReference ForegroundImage; // 0x48
	FText Text; // 0x58
	FText BodyText; // 0x90
	FString AudioSfxEventName; // 0xc8
	FString AudioEventName; // 0xd8
	FString AudioSwitchName; // 0xe8
	FString AudioSwitchValue; // 0xf8
	FString StyleModifier; // 0x108
	TArray<EStyleModifiers> StyleModifiers; // 0x118
	FStringAssetReference AllianceIcon; // 0x128
	float HoldDuration; // 0x138
};

struct UWieldedItemSizeOneShotInteractableFilterDesc {
	TArray<EWieldableItemSize> WieldableItemSizesToDisableInteraction; // 0x28
};

struct UCoherentUIGTTooltipComponent {
	int32_t TooltipSpacing; // 0x3c8
	float NormalisedScreenSpaceTooltipPositionY; // 0x3cc
};

struct UWieldableItemPersistentCooldownComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UCheckBox {
	ECheckBoxState CheckedState; // 0x150
	DelegateProperty CheckedStateDelegate; // 0x154
	FCheckBoxStyle WidgetStyle; // 0x168
	USlateWidgetStyleAsset* Style; // 0x758
	USlateBrushAsset* UncheckedImage; // 0x760
	USlateBrushAsset* UncheckedHoveredImage; // 0x768
	USlateBrushAsset* UncheckedPressedImage; // 0x770
	USlateBrushAsset* CheckedImage; // 0x778
	USlateBrushAsset* CheckedHoveredImage; // 0x780
	USlateBrushAsset* CheckedPressedImage; // 0x788
	USlateBrushAsset* UndeterminedImage; // 0x790
	USlateBrushAsset* UndeterminedHoveredImage; // 0x798
	USlateBrushAsset* UndeterminedPressedImage; // 0x7a0
	EHorizontalAlignment HorizontalAlignment; // 0x7a8
	FMargin Padding; // 0x7ac
	FSlateColor BorderBackgroundColor; // 0x7c0
	FScriptMulticastDelegate OnCheckStateChanged; // 0x7f0
};

struct UShipwreckSiteGeneratorRandomEditorComponent {
	float ShipwreckSize; // 0x110
	int32_t SphereSegments; // 0x114
	FColor ShipwreckColor; // 0x118
	FColor EndOfWorldColor; // 0x11c
	FColor EndOfWorldWarningColor; // 0x120
	FColor ValidSpawnZoneColor; // 0x124
	FColor IslandColor; // 0x128
};

struct UBTTask_SailShipToLocation {
	FBlackboardKeySelector TargetLocationKey; // 0x88
	float DistanceThresholdToConsiderTargetReached; // 0xb0
};

struct UFireworkAmbientLightComponent {
	float Radius; // 0x438
	float AmbientIntensity; // 0x43c
	FLinearColor Tint; // 0x440
	char QuadraticFalloff : 1; // 0x450
	EAmbientLightConeShape Shape; // 0x454
	ESimpleLightFunctionType SimpleFunctionType; // 0x455
	float ScaleOffset; // 0x458
	float PulsePhase; // 0x45c
	float FlickerFrequency; // 0x460
	int32_t FlickerPerlinRow; // 0x464
	bool bShadowed; // 0x468
	EAmbientLightClusteringPolicy GroupingPolicy; // 0x469
};

struct UParticleModuleLocation_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x178
};

struct UAbilityTask_NetworkSyncPoint {
	FScriptMulticastDelegate OnSync; // 0x68
};

struct UAnimCompress_RemoveTrivialKeys {
	float MaxPosDiff; // 0x40
	float MaxAngleDiff; // 0x44
	float MaxScaleDiff; // 0x48
};

struct UTaleQuestGetTinySharkPawnDesc {
	ATinySharkExperience* TinySharkExperience; // 0x80
	FQuestVariableSharkPawn TinySharkPawn; // 0x88
};

struct UBTService_IncrementFloatValueWithTimeSpentInBranch {
	float TimeMultiplier; // 0x98
};

struct UConnectionCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UPlayerMysteriousNoteComponent {
	FClientNoteData NoteData; // 0xd0
	bool BeenPossessed; // 0xe8
	bool CinematicPlayed; // 0xe9
};

struct UFeatureToggleNPCDialogConditional {
	FName FeatureName; // 0x30
};

struct UParticleModuleLightBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UAILoadoutRankProgression {
	TArray<FAILoadoutRankMapping> RankMappings; // 0x28
	int32_t NumberOfRanks; // 0x38
};

struct UNPCByNameClueDestinationDescriptor {
	FGuid NPCIdentifier; // 0x40
};

struct UParticleModuleLocationBoneSocket {
	ELocationBoneSocketSource SourceType; // 0x50
	FVector UniversalOffset; // 0x54
	TArray<FLocationBoneSocketInfo> SourceLocations; // 0x60
	ELocationBoneSocketSelectionMethod SelectionMethod; // 0x70
	char bUpdatePositionEachFrame : 1; // 0x74
	char bOrientMeshEmitters : 1; // 0x74
	char bInheritBoneVelocity : 1; // 0x74
	FVector InheritVelocityScale; // 0x78
	float InheritedSpeedCap; // 0x84
	FName SkelMeshActorParamName; // 0x88
};

struct UFeatureEnabledRadialContext {
	FName FeatureName; // 0x28
};

struct AShipErrorOnNonAuthorityPhysicsChange {
	UBaseHullDragDynamicsDesc* HullDragDynamicsDesc; // 0x14d0
};

struct UActionStateRadialContext {
	TArray<UActionStateId*> TargetActionStates; // 0x28
	bool AreDockablePhrasesRequired; // 0x38
};

struct UBountyQuestData {
	UWwiseEvent* DefaultTargetKilledAudioCue; // 0x28
	float BountyLandmarkSpawnZoneRadiusInMetres; // 0x30
	float BountyLandmarkSpawnZoneHalfHeightInMetres; // 0x34
	UQuestBootyItemPopUpAsset* BountyQuestTargetKilledPopUpDescAsset; // 0x38
	UEnvQuery* FindSpawnPosQuery; // 0x40
};

struct UTaleQuestAwaitEventStepDesc {
	UObject* Dispatcher; // 0x80
	FNativeAndUserDefinedStructSelector EventType; // 0x88
	TMap<FName, FName> ArgumentMappings; // 0x90
};

struct UFireCellStateTimingParamsDataAsset {
	FFireCellStateTimingParams TimingParams; // 0x28
};

struct UTaleQuestSelectShipwreckLocationFromValidCandidatesStepDesc {
	UTaleQuestArrayEntrySelectionStrategy* SelectionStrategy; // 0x80
	FQuestVariableVectorArray InputArray; // 0x88
	FQuestVariableVector OutputEntry; // 0x98
	FQuestVariableBool ShuffleLists; // 0xa8
};

struct UNPCDialogHeaderSimple {
	FText Text; // 0x28
};

struct UGarbageCollectionSettings {
	float TimeBetweenPurgingPendingKillObjects; // 0x38
	char FlushStreamingOnGC : 1; // 0x3c
	char AllowParallelGC : 1; // 0x3c
	char CreateGCClusters : 1; // 0x3c
	char MergeGCClusters : 1; // 0x3c
	int32_t NumRetriesBeforeForcingGC; // 0x40
	int32_t MaxObjectsNotConsideredByGC; // 0x44
	int32_t SizeOfPermanentObjectPool; // 0x48
	int32_t MaxObjectsInGame; // 0x4c
	int32_t MaxObjectsInEditor; // 0x50
};

struct UNetworkSyncedAnimationComponent {
	float PlayRateAdjustMaxTimeDelta; // 0xc8
	float PlayRateAdjustMaxPercentageToSpeedUpPlayRate; // 0xcc
	float PlayRateAdjustMaxPercentageToSlowDownPlayRate; // 0xd0
	float ReplicatedAnimationProgression; // 0xd4
	int32_t ReplicatedPlayingAnimationIndex; // 0xd8
	float ReplicatedPlayRate; // 0xdc
	UAnimInstance* AnimInstance; // 0xe8
};

struct USlider {
	float Value; // 0x138
	DelegateProperty ValueDelegate; // 0x13c
	FSliderStyle WidgetStyle; // 0x150
	EOrientation Orientation; // 0x398
	FLinearColor SliderBarColor; // 0x39c
	FLinearColor SliderHandleColor; // 0x3ac
	bool IndentHandle; // 0x3bc
	bool Locked; // 0x3bd
	FScriptMulticastDelegate OnMouseCaptureBegin; // 0x3c0
	FScriptMulticastDelegate OnMouseCaptureEnd; // 0x3d0
	FScriptMulticastDelegate OnValueChanged; // 0x3e0
};

struct UWaterModifierZoneService {
	TArray<TScriptInterface<Class>> RegisteredWaterModifierZones; // 0x30
};

struct ULightningDataAsset {
	float StrikeHitTime; // 0x28
	float StrikeCompleteTime; // 0x2c
	float StormHeight; // 0x30
	float StandardLightningBaseDamage; // 0x34
	float HighPriorityLightningBaseDamage; // 0x38
	UWwiseEvent* LightningStrikeEvent; // 0x40
	UWwiseObjectPoolWrapper* LightningStrikePool; // 0x48
	UMaterial* LightningMaterial; // 0x50
	FName LightningTimingParam; // 0x58
	FName LightningSourcePosParam; // 0x60
	FName LightningTag; // 0x68
	ECollisionChannel CollisionChannel; // 0x70
	UObject* StrikeWaterParticleSystem; // 0x78
	UWwiseEvent* StrikeWaterEvent; // 0x80
	UWwiseObjectPoolWrapper* StrikeWaterPool; // 0x88
	bool DisableStrikeGroundDecal; // 0x90
	bool DisableStrikeGroundSFX; // 0x91
	UWwiseEvent* OverrideStrikeGroundEvent; // 0x98
	UWwiseObjectPoolWrapper* OverrideStrikeGroundPool; // 0xa0
};

struct AAthenaAIController {
	float CurrentTargetPerceivedNotVisibleAge; // 0x63c
	UAISenseConfig_Sight* SightConfig; // 0x680
	UAISenseConfig_Hearing* HearingConfig; // 0x688
	UAISenseConfig_Damage* DamageSenseConfig; // 0x690
	TArray<FAthenaAIControllerSenseSettingOverride> AIStrategySenseSettingOverrides; // 0x6e0
	AActor* CurrentNotSeenPerceivedActor; // 0x8c8
	AActor* PendingSpawnTriggerActor; // 0x8d0
};

struct AShopkeeperInteractionProxy {
	UShopDesc* ShopDesc; // 0x3e0
};

struct UPlayNpcAnimationStep {
	UBasePlayNpcAnimationStepDesc* StepDesc; // 0x90
	UNPCDialogComponent* NPCDialogComponent; // 0xa8
	ACutSceneActor* CutSceneActor; // 0xb0
};

struct UInputTouchDelegateBinding {
	TArray<FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x28
};

struct UDiggingAudioDataAsset {
	TArray<FItemDiggingAudioOverride> AudioOverrides; // 0x28
	UItemDiggingAudioConfig* Default; // 0x38
	UWwiseObjectPoolWrapper* SfxPool; // 0x40
};

struct UTaleQuestReleaseVaultStepDesc {
	FQuestVariableTaleResourceHandle VaultHandleVar; // 0x80
};

struct UAISense_Prediction {
	TArray<FAIPredictionEvent> RegisteredEvents; // 0x88
};

struct AAIDioramaService {
	TMap<UObject*, FDioramaCategoryEntries> AllDioramasLocationsByCategory; // 0x3d8
};

struct AProjectileItemInfo {
	ULoadableProjectileComponent* LoadableProjectileComponent; // 0x500
};

struct UFeatureToggledLevelsDataAsset {
	TArray<FFeatureToggledLevel> FeaturedToggledWorldLayouts; // 0x28
	TArray<FFeatureToggledLevels> FeatureToggledLevels; // 0x38
};

struct AFlamesOfFateSettingsService {
	UFlamesOfFateSettingsAsset* Settings; // 0x3d8
};

struct UBaseWaterComponent {
	UWaterId* WaterId; // 0x588
	bool ActiveInExclusionZone; // 0x590
};

struct AEmissaryFlotsamItemInfo {
	FCompanySpecificBootyReward HandInOwnFlotsamReward; // 0x708
};

struct UQuestItemCategory {
	UNotificationInputId* NotificationInputId; // 0x78
};

struct UBattleElevatorEventRoomPhasesDataAsset {
	TArray<FBattleElevatorEventRoomPhase> Phases; // 0x28
};

struct UBuriedItemStep {
	UBuriedItemStepDesc* StepDesc; // 0x90
};

struct UMaterialExpressionParticleDirection {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UPLQuestLocationDataAsset {
	AActor* StartLocationActor; // 0x28
	AActor* EndLocationActor; // 0x48
	FName PageAuthorName; // 0x68
};

struct URadialForceComponent {
	float Radius; // 0x2b0
	ERadialImpulseFalloff Falloff; // 0x2b4
	float ImpulseStrength; // 0x2b8
	char bImpulseVelChange : 1; // 0x2bc
	char bIgnoreOwningActor : 1; // 0x2bc
	float ForceStrength; // 0x2c0
	float DestructibleDamage; // 0x2c4
	TArray<EObjectTypeQuery> ObjectTypesToAffect; // 0x2c8
};

struct UTaleQuestAddChecklistMapStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UContendedResourceService {
	UWorld* World; // 0x38
};

struct UCreateSessionCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct AMockInteractorActor {
	UObject* FocusedInteractable; // 0x3d8
	UObject* InteractedObject; // 0x3e0
	UNotificationInputId* InteractNotificationType; // 0x3e8
	TArray<UNotificationInputId*> ValidInteractNotificationIds; // 0x3f0
};

struct UAISenseConfig_Blueprint {
	UAISense_Blueprint* Implementation; // 0x30
};

struct UBTTask_CopyAIInteractionPointAndFocusToBlackboard {
	FBlackboardKeySelector SourceInteractable; // 0x60
	FBlackboardKeySelector InteractionPosition; // 0x88
	FBlackboardKeySelector InteractionFocusPosition; // 0xb0
};

struct UPersistenceIdentifierSettings {
	FStringAssetReference PersistenceIdentifierSettingsAsset; // 0x38
};

struct UCosmeticItemAnimationSetDataAsset {
	FCosmeticItemAnimationSetLoopData LoopData; // 0x28
	TArray<UAnimSequenceBase*> OneShotSequences; // 0x48
};

struct URestrictedInteractionInputComponent {
	TArray<UObject*> AllowedInteractableTypes; // 0x2d0
	TArray<UNotificationInputId*> AllowedInteractionNotificationInputIds; // 0x2e0
};

struct UIsWieldingItemNPCDialogConditional {
	TArray<UItemDesc*> TargetItems; // 0x30
};

struct UPirateLegendSection {
	EPLSectionType SectionType; // 0x28
	UTaleQuestDescAsset* QuestDescription; // 0x30
};

struct URichTextBlockDecorator {
	bool bReveal; // 0x28
	int32_t RevealedIndex; // 0x2c
};

struct UContentWidget {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct UBootyItemBuryHistoryComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct UCoralShieldAbility {
	TArray<TWeakObjectPtr<APawn>> PotentialTargets; // 0x78
	TScriptInterface<Class> CachedAIManager; // 0x88
	TScriptInterface<Class> CachedBuffReceiver; // 0x98
	TArray<FBuffedTargetData> BuffedTargets; // 0xa8
};

struct AInfo {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct AEmoteCoin {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UListView {
	float ItemHeight; // 0x138
	TArray<UObject*> Items; // 0x140
	ESelectionMode SelectionMode; // 0x150
	DelegateProperty OnGenerateRowEvent; // 0x154
};

struct UBlendSpace1D {
	bool bScaleAnimation; // 0x108
};

struct AXMarksTheSpotMap {
	int32_t CanvasWidth; // 0x7e0
	int32_t CanvasHeight; // 0x7e4
	UTexture* MarkTexture; // 0x7e8
	UTexture* AltMarkTexture; // 0x7f0
	UTexture* UndergroundMarkTexture; // 0x7f8
	UTexture* AltUndergroundMarkTexture; // 0x800
	float MarkWidthRatio; // 0x808
	float MarkHeightRatio; // 0x80c
	EBlendMode MarkBlendMode; // 0x810
	FString MapTexturePath; // 0x818
	FStringAssetReference MapInventoryTexturePath; // 0x828
	TArray<FXMarksTheSpotMapMark> Marks; // 0x8a8
	float Rotation; // 0x8d0
};

struct APlayerController {
	UPlayer* Player; // 0x430
	APawn* AcknowledgedPawn; // 0x440
	UInterpTrackInstDirector* ControllingDirTrackInst; // 0x448
	AHUD* MyHUD; // 0x458
	APlayerCameraManager* PlayerCameraManager; // 0x460
	APlayerCameraManager* PlayerCameraManagerClass; // 0x468
	bool bAutoManageActiveCameraTarget; // 0x470
	FRotator TargetViewRotation; // 0x474
	TArray<AActor*> HiddenActors; // 0x490
	float LastSpectatorStateSynchTime; // 0x4a0
	FVector LastSpectatorSyncLocation; // 0x4a4
	FRotator LastSpectatorSyncRotation; // 0x4b0
	int32_t ClientCap; // 0x4bc
	UCheatManager* CheatManager; // 0x4c0
	UCheatManager* CheatClass; // 0x4c8
	UPlayerInput* PlayerInput; // 0x4d0
	TArray<FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x4d8
	char bPlayerIsWaiting : 1; // 0x578
	char NetPlayerIndex; // 0x57c
	bool bHasVoiceHandshakeCompleted; // 0x57d
	UNetConnection* PendingSwapConnection; // 0x580
	UNetConnection* NetConnection; // 0x588
	float InputYawScale; // 0x59c
	float InputPitchScale; // 0x5a0
	float InputRollScale; // 0x5a4
	char bShowMouseCursor : 1; // 0x5a8
	char bEnableClickEvents : 1; // 0x5a8
	char bEnableTouchEvents : 1; // 0x5a8
	char bEnableMouseOverEvents : 1; // 0x5a8
	char bEnableTouchOverEvents : 1; // 0x5a8
	char bForceFeedbackEnabled : 1; // 0x5a8
	EMouseCursor DefaultMouseCursor; // 0x5ac
	EMouseCursor CurrentMouseCursor; // 0x5ad
	ECollisionChannel DefaultClickTraceChannel; // 0x5ae
	ECollisionChannel CurrentClickTraceChannel; // 0x5af
	float HitResultTraceDistance; // 0x5b0
	float ForceFeedbackIntensity; // 0x5b4
	UInputComponent* InactiveStateInputComponent; // 0x640
	UTouchInterface* CurrentTouchInterface; // 0x668
	ASpectatorPawn* SpectatorPawn; // 0x6a0
	FVector SpawnLocation; // 0x6a8
	TMap<ULevel*, UInputComponent*> LevelInputComponents; // 0x6b8
	bool bIsLocalPlayerController; // 0x71c
	uint16_t SeamlessTravelCount; // 0x71e
	uint16_t LastCompletedSeamlessTravelCount; // 0x720
	bool bInCinematicMode; // 0x722
};

struct UDonateMapStatTriggerType {
	FName UniqueTextIdentifier; // 0x28
};

struct UCutsceneService {
	TArray<AActor*> RegisteredCutsceneActors; // 0x30
};

struct AGrenade {
	UGrenadeSetupDataAsset* GrenadeSetupDataAsset; // 0x7a8
	FWeightedProbabilityRangeOfRanges RotationRatePitch; // 0x7b0
	FWeightedProbabilityRangeOfRanges RotationRateRoll; // 0x7e0
	FWeightedProbabilityRangeOfRanges RotationRateYaw; // 0x810
	AActor* ThrownProjectileType; // 0x840
};

struct UDoEQSQueryStepDesc {
	UEnvQuery* EQSQuery; // 0x80
	FQuestVariableArray OutPoints; // 0x88
};

struct AVoyageProposalContainer {
	FName VoyageSelectionVoteTag; // 0x4b8
	FName VoyageCancelVoteTag; // 0x4c0
	FName TaleSelectionVoteTag; // 0x4c8
	FName TaleCancelVoteTag; // 0x4d0
	bool CancelExistingPrimaryVoyages; // 0x4d8
	FString VoyageDescAssetString; // 0x4e0
	FString OptionalMapTableVoyageDescOverride; // 0x4f0
	UVoyageDescDataAsset* VoyageDescAsset; // 0x500
	UIslandEventComponent* IslandEventComponent; // 0x508
	ACrewShipManifest* CrewShipManifest; // 0x510
	TArray<AActor*> VoyageSelectionVotableObjectViews; // 0x518
	AActor* VoyageCancelVotableObjectView; // 0x528
	TArray<ACrewShipManifest*> TaleManifests; // 0x530
	TMap<AActor*, FGuid> TaleVoteViews; // 0x540
	AActor* TaleCancelVotableObjectView; // 0x590
};

struct APortalSignalCutSceneAnchor {
	USceneComponent* Root; // 0x3d0
};

struct UTaleQuestChooseIslandFromWeightsStep {
	UIslandTypeWeightsDataAsset* IslandTypeWeights; // 0xc0
};

struct UStatusEffectsSettings {
	FStringAssetReference DebugMenuStatusDefinitionsDataAsset; // 0x38
};

struct UAIPartsCategory {
	TArray<UAIPartsDesc*> Parts; // 0x28
	int32_t NextPartsIndex; // 0x38
	bool UseWeightedArray; // 0x3c
	FName UseWeightedArrayFeatureName; // 0x40
	FWeightedProbabilityRange WeightedArray; // 0x48
};

struct UControlPointMeshComponent {
	int32_t ForcedLodModel; // 0x598
	bool bOverrideMinLOD; // 0x59c
	bool bOverrideNavigationToDefaultObstacle; // 0x59d
	int32_t MinLOD; // 0x5a0
	UStaticMesh* StaticMesh; // 0x5a8
	bool bOverrideWireframeColor; // 0x5b0
	FColor WireframeColorOverride; // 0x5b4
	char bIgnoreInstanceForTextureStreaming : 1; // 0x5b8
	char bOverrideLightMapRes : 1; // 0x5b8
	int32_t OverriddenLightMapRes; // 0x5bc
	float StreamingDistanceMultiplier; // 0x5c0
	TArray<FGuid> IrrelevantLights; // 0x5c8
	TArray<FStaticMeshComponentLODInfo> LODData; // 0x5d8
	UMaterialInterface* CustomDepthMaterial; // 0x5e8
};

struct USirenTridentShotActionComponent {
	float MaxAcceptableChargeTimeStampDelta; // 0x43c
	TArray<USirenTridentProjectileParams*> ProjectileParameters; // 0x440
	USirenTridentProjectileParams* CurrentProjectileParameters; // 0x450
	FName ActionSizeChangeForceFeedbackTag; // 0x458
	ESirenTridentProjectileState CurrentShotState; // 0x460
	ASirenTridentProjectile* TridentProjectile; // 0x468
	USirenTridentShotComponentAudioParams* SirenShotActionAudio; // 0x470
};

struct UTaleQuestNumericSwitchStepDesc {
	FQuestVariableInt Condition; // 0x80
	TArray<UTaleQuestStepDesc*> Descs; // 0x90
};

struct UMovieSceneEventSection {
	FNameCurve Events; // 0x98
	FMovieSceneEventSectionData EventData; // 0x100
};

struct ATestMountedWeapon {
	AActor* SetProjectile; // 0x518
	USceneComponent* CameraAttachComponent; // 0x520
};

struct UProgressBar {
	FProgressBarStyle WidgetStyle; // 0x138
	USlateWidgetStyleAsset* Style; // 0x2f0
	USlateBrushAsset* BackgroundImage; // 0x2f8
	USlateBrushAsset* FillImage; // 0x300
	USlateBrushAsset* MarqueeImage; // 0x308
	float Percent; // 0x310
	EProgressBarFillType BarFillType; // 0x314
	bool bIsMarquee; // 0x315
	DelegateProperty PercentDelegate; // 0x318
	FLinearColor FillColorAndOpacity; // 0x328
	DelegateProperty FillColorAndOpacityDelegate; // 0x338
};

struct UUnderwaterEffectsDataAsset {
	UWwiseEvent* StartUnderwaterSfx; // 0x28
	UWwiseEvent* StopUnderwaterSfx; // 0x30
	UObject* UnderwaterVfx; // 0x38
	FName UnderwaterVfxSocketName; // 0x40
};

struct UAthenaAIFormDataAsset {
	TArray<EHealthChangedReason> PreventHealthChangedReasons; // 0x28
	TArray<FAIFormDamageResponse> DamageResponses; // 0x38
	UStatusRecipientResponseList* OverrideStatusRecipientResponseList; // 0x48
	UPhysicalMaterial* SurfaceMaterial; // 0x50
	UObject* KilledVfxTemplate; // 0x58
	UAICharacterAudioComponent* AICharacterAudioComponent; // 0x60
	UAnimNotifyWwiseEmitterComponent* AnimNotifyEmitterWithObservers; // 0x68
	bool HighPriorityFootstepAudio; // 0x70
	float MovementSpeedMultipler; // 0x74
	FPlayerStat StatToFireOnDeath; // 0x78
	FName FeatureName; // 0x7c
	UAthenaAIFormComponent* FormComponentClass; // 0x88
};

struct UFishingFreeLookConstrainsDataAsset {
	float YawDegrees; // 0x28
	float PitchMinDegrees; // 0x2c
	float PitchMaxDegrees; // 0x30
	float LookAroundRightStickInputToAngleModifier; // 0x34
	float LookAroundMouseInputToAngleModifier; // 0x38
	float LookAroundMouseInputAsMovementInputModifier; // 0x3c
};

struct UArrowComponent {
	FColor ArrowColor; // 0x588
	float ArrowSize; // 0x58c
	bool bIsScreenSizeScaled; // 0x590
	float ScreenSize; // 0x594
	char bTreatAsASprite : 1; // 0x598
};

struct UMaterialExpressionDepthOfFieldFunction {
	EDepthOfFieldFunctionValue FunctionValue; // 0x70
	FExpressionInput Depth; // 0x78
};

struct UMaterialExpressionViewSize {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct UMaterialExpressionTextureObjectParameter {
	FName ParameterName; // 0x1a8
	FGuid ExpressionGUID; // 0x1b0
	FName Group; // 0x1c0
};

struct USpawnActorStepDesc {
	FName SocketName; // 0x100
	bool bAttachToSocket; // 0x108
	FQuestVariableActor LocatorVar; // 0x110
};

struct UMovieSceneCinematicShotSection {
	FText DisplayName; // 0x100
};

struct UTexture2DDynamic {
	EPixelFormat Format; // 0x140
};

struct UAutomaticInstancingSettings {
	bool IsEnabled; // 0x38
};

struct ULevelStreaming {
	UWorld* WorldAsset; // 0x28
	FName PackageNameToLoad; // 0x50
	TArray<FName> LODPackageNames; // 0x58
	FTransform LevelTransform; // 0x80
	char bShouldBeVisibleInEditor : 1; // 0xbc
	char Blocked : 1; // 0xbc
	char bShouldBeLoaded : 1; // 0xbc
	char bShouldBeVisible : 1; // 0xbc
	char bShouldBlockOnLoad : 1; // 0xbc
	int32_t LevelLODIndex; // 0xc0
	char bDisableDistanceStreaming : 1; // 0xc4
	char bDrawOnLevelStatusMap : 1; // 0xc4
	FLinearColor LevelColor; // 0xc8
	TArray<ALevelStreamingVolume*> EditorStreamingVolumes; // 0xd8
	float MinTimeBetweenVolumeUnloadRequests; // 0xe8
	TArray<FString> Keywords; // 0xf0
	FScriptMulticastDelegate OnLevelLoaded; // 0x100
	FScriptMulticastDelegate OnLevelUnloaded; // 0x110
	FScriptMulticastDelegate OnLevelShown; // 0x120
	FScriptMulticastDelegate OnLevelHidden; // 0x130
	ULevel* LoadedLevel; // 0x200
	ULevel* PendingUnloadLevel; // 0x208
};

struct UImpactSettings {
	FStringAssetReference ImpactListAssetRef; // 0x28
};

struct UStatConditionWieldedItemInfoTargetSelector {
	EStatConditionTarget Target; // 0x28
};

struct APoseableMeshWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UBlendedPostProcessingRainZoneComponent {
	UCurveFloat* FadeCurveNormalised; // 0x820
	float BlendDistance; // 0x828
};

struct UParticleModuleLight {
	bool bUseInverseSquaredFalloff; // 0x50
	bool bAffectsTranslucency; // 0x51
	bool bIgnoreComponentTint; // 0x52
	bool bPreviewLightRadius; // 0x53
	float SpawnFraction; // 0x54
	FRawDistributionVector ColorScaleOverLife; // 0x58
	FRawDistributionFloat BrightnessOverLife; // 0x90
	FRawDistributionFloat RadiusScale; // 0xc8
	FRawDistributionFloat LightExponent; // 0x100
};

struct AMerchantMap {
	int32_t CanvasWidth; // 0x7d8
	int32_t CanvasHeight; // 0x7dc
	UFont* Font; // 0x7e0
	float FontScale; // 0x7e8
	float FontLineSpacingScale; // 0x7ec
	UMerchantMapLayout* MerchantMapLayout; // 0x7f8
	FMerchantMapContents Contents; // 0x800
};

struct USpawnBarrelsOfPlentyStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct USpawnPhasedItemStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UAlliancePennantAsset {
	TArray<FAlliancePennantData> AlliancePennants; // 0x28
	TArray<FShipSizePartCustomizationNameData> ShipAlliancePennantPartNames; // 0x38
	FStringAssetReference EmptyPennantDesc; // 0x48
};

struct UProgressWidgetStyle {
	FProgressBarStyle ProgressBarStyle; // 0x30
};

struct URewardDistributionModelDataAsset {
	FRewardDistributionModelData RewardDistributionModelData; // 0x28
};

struct AReviveGhost {
	TArray<UMaterialInstanceDynamic*> CorpseMaterials; // 0x3e0
	USceneComponent* Root; // 0x3f0
	USkeletalMeshComponent* MeshComponent; // 0x3f8
	USceneComponent* AstralCordContainer; // 0x400
	UAnimationDataStoreComponent* AnimationDataStoreComponent; // 0x408
	UPostProcessComponent* PostProcessComponent; // 0x410
	UDitherComponent* DitherComponent; // 0x418
	UReviveAudioComponent* AudioComponent; // 0x420
	ENetRole RevivableOwnerNetRole; // 0x438
	UGhostDataAsset* ReviveGhostDataAsset; // 0x440
	UReviveEffectsDataAsset* ReviveEffectsDataAsset; // 0x448
	FReviveEffectsValues ReviveEffectsValues; // 0x450
	FModeSpecificReviveSettings ReviveSettings; // 0x470
	TWeakObjectPtr<UParticleSystemComponent> ContinuousOnTheBodyLoopingVFX; // 0x5dc
	TWeakObjectPtr<UParticleSystemComponent> ReviveInProgressLoopingVFX; // 0x5e4
	TArray<UMaterialInstanceDynamic*> AstralCordDynamicMaterials; // 0x608
	FGhostPlayModeParameters GhostPlayModeSpecificParameters; // 0x618
};

struct UBTTask_ReactToThreat {
	EAthenaAnimationPetRoamingState ReactAnimState; // 0x60
	bool ChangeAnimationAfterWaitTime; // 0x61
	float ReactAnimTime; // 0x64
	EAthenaAnimationPetRoamingState AfterReactAnimState; // 0x68
};

struct UNPCDialogHeaderByRank {
	TArray<FNPCDialogRankGatedText> Text; // 0x28
	FText DefaultText; // 0x38
};

struct ATestQuestProxy {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UAISpawnMatchesAnyContextCondition {
	TArray<UAISpawnContextId*> Contexts; // 0x30
};

struct AShipwright {
	FName InteractionSocket; // 0x608
};

struct UProjectileLauncherMechanismSourceComponent {
	FFloatRange InitialLaunchDelay; // 0x2b8
	FFloatRange RepeatedLaunchDelay; // 0x2c8
	TArray<FVector> TargetLocations; // 0x2d8
	ALaunchableProjectile* ProjectileType; // 0x2e8
	float ProjectileSpeed; // 0x2f0
	float Gravity; // 0x2f4
	float GravityScalar; // 0x2f8
	bool PreferHigherAngles; // 0x2fc
	UWwiseObjectPoolWrapper* SfxPool; // 0x300
	UWwiseEvent* LaunchSfx; // 0x308
	UObject* LaunchVFX; // 0x310
	TScriptInterface<Class> ProjectileLauncherMechanism; // 0x318
};

struct ASkeletalMeshWieldableReplica {
	UPrimitiveComponent* MeshComponent; // 0x3d8
	UCosmeticItemAnimationSetDataAsset* CachedAnimationSet; // 0x3e0
	UItemCategory* ReplicaCategory; // 0x3e8
};

struct UEngine {
	UFont* TinyFont; // 0x30
	FStringAssetReference TinyFontName; // 0x38
	UFont* SmallFont; // 0x48
	FStringAssetReference SmallFontName; // 0x50
	UFont* MediumFont; // 0x60
	FStringAssetReference MediumFontName; // 0x68
	UFont* LargeFont; // 0x78
	FStringAssetReference LargeFontName; // 0x80
	UFont* MonoFont; // 0x90
	FStringAssetReference MonoFontName; // 0x98
	UFont* SubtitleFont; // 0xa8
	FStringAssetReference SubtitleFontName; // 0xb0
	UFont* HugeFont; // 0xc0
	FStringAssetReference HugeFontName; // 0xc8
	TArray<UFont*> AdditionalFonts; // 0xd8
	TArray<FString> AdditionalFontNames; // 0xf0
	UConsole* ConsoleClass; // 0x100
	FStringClassReference ConsoleClassName; // 0x108
	UGameViewportClient* GameViewportClientClass; // 0x118
	FStringClassReference GameViewportClientClassName; // 0x120
	ULocalPlayer* LocalPlayerClass; // 0x130
	FStringClassReference LocalPlayerClassName; // 0x138
	AWorldSettings* WorldSettingsClass; // 0x148
	FStringClassReference WorldSettingsClassName; // 0x150
	FStringClassReference NavigationSystemClassName; // 0x160
	UNavigationSystem* NavigationSystemClass; // 0x170
	FStringClassReference AvoidanceManagerClassName; // 0x178
	UAvoidanceManager* AvoidanceManagerClass; // 0x188
	UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x190
	FStringClassReference PhysicsCollisionHandlerClassName; // 0x198
	FStringClassReference GameUserSettingsClassName; // 0x1a8
	UGameUserSettings* GameUserSettingsClass; // 0x1b8
	FStringClassReference AIControllerClassName; // 0x1c0
	UGameUserSettings* GameUserSettings; // 0x1d0
	ALevelScriptActor* LevelScriptActorClass; // 0x1d8
	FStringClassReference LevelScriptActorClassName; // 0x1e0
	FStringClassReference DefaultBlueprintBaseClassName; // 0x1f0
	FStringClassReference GameSingletonClassName; // 0x200
	UObject* GameSingleton; // 0x210
	APawn* DefaultPreviewPawnClass; // 0x218
	FStringClassReference DefaultPreviewPawnClassName; // 0x220
	FString PlayOnConsoleSaveDir; // 0x230
	UTexture2D* DefaultTexture; // 0x240
	FStringAssetReference DefaultTextureName; // 0x248
	UTexture* DefaultDiffuseTexture; // 0x258
	FStringAssetReference DefaultDiffuseTextureName; // 0x260
	UTexture2D* DefaultBSPVertexTexture; // 0x270
	FStringAssetReference DefaultBSPVertexTextureName; // 0x278
	UTexture2D* HighFrequencyNoiseTexture; // 0x288
	FStringAssetReference HighFrequencyNoiseTextureName; // 0x290
	UTexture2D* DefaultBokehTexture; // 0x2a0
	FStringAssetReference DefaultBokehTextureName; // 0x2a8
	UTexture2D* HDRCalibrationTexture; // 0x2b8
	FStringAssetReference HDRCalibrationTextureName; // 0x2c0
	UMaterial* WireframeMaterial; // 0x2d0
	FString WireframeMaterialName; // 0x2d8
	UMaterial* DebugMeshMaterial; // 0x2e8
	FStringAssetReference DebugMeshMaterialName; // 0x2f0
	UMaterial* LevelColorationLitMaterial; // 0x300
	FString LevelColorationLitMaterialName; // 0x308
	UMaterial* LevelColorationUnlitMaterial; // 0x318
	FString LevelColorationUnlitMaterialName; // 0x320
	UMaterial* TriangleDensityScreenSpaceMaterial; // 0x330
	FString TriangleDensityScreenSpaceMaterialName; // 0x338
	UMaterial* TriangleDensityWorldSpaceMaterial; // 0x348
	FString TriangleDensityWorldSpaceMaterialName; // 0x350
	UMaterial* LightingTexelDensityMaterial; // 0x360
	FString LightingTexelDensityName; // 0x368
	UMaterial* ShadedLevelColorationLitMaterial; // 0x378
	FString ShadedLevelColorationLitMaterialName; // 0x380
	UMaterial* ShadedLevelColorationUnlitMaterial; // 0x390
	FString ShadedLevelColorationUnlitMaterialName; // 0x398
	UMaterial* RemoveSurfaceMaterial; // 0x3a8
	FStringAssetReference RemoveSurfaceMaterialName; // 0x3b0
	UMaterial* VertexColorMaterial; // 0x3c0
	FString VertexColorMaterialName; // 0x3c8
	UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x3d8
	FString VertexColorViewModeMaterialName_ColorOnly; // 0x3e0
	UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x3f0
	FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x3f8
	UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x408
	FString VertexColorViewModeMaterialName_RedOnly; // 0x410
	UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x420
	FString VertexColorViewModeMaterialName_GreenOnly; // 0x428
	UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x438
	FString VertexColorViewModeMaterialName_BlueOnly; // 0x440
	UMaterial* ConstraintLimitMaterial; // 0x450
	UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x458
	UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x460
	UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x468
	FStringAssetReference ConstraintLimitMaterialName; // 0x470
	UMaterial* InvalidLightmapSettingsMaterial; // 0x480
	FStringAssetReference InvalidLightmapSettingsMaterialName; // 0x488
	UMaterial* PreviewShadowsIndicatorMaterial; // 0x498
	FStringAssetReference PreviewShadowsIndicatorMaterialName; // 0x4a0
	UMaterial* ArrowMaterial; // 0x4b0
	FStringAssetReference ArrowMaterialName; // 0x4b8
	FLinearColor LightingOnlyBrightness; // 0x4c8
	TArray<FColor> LightComplexityColors; // 0x4d8
	TArray<FLinearColor> ShaderComplexityColors; // 0x4e8
	TArray<FLinearColor> StationaryLightOverlapColors; // 0x4f8
	TArray<FLinearColor> LODColorationColors; // 0x508
	float MaxPixelShaderAdditiveComplexityCount; // 0x518
	float MaxES2PixelShaderAdditiveComplexityCount; // 0x51c
	float MinLightMapDensity; // 0x520
	float IdealLightMapDensity; // 0x524
	float MaxLightMapDensity; // 0x528
	char bRenderLightMapDensityGrayscale : 1; // 0x52c
	float RenderLightMapDensityGrayscaleScale; // 0x530
	float RenderLightMapDensityColorScale; // 0x534
	FLinearColor LightMapDensityVertexMappedColor; // 0x538
	FLinearColor LightMapDensitySelectedColor; // 0x548
	TArray<FStatColorMapping> StatColorMappings; // 0x558
	UPhysicalMaterial* DefaultPhysMaterial; // 0x568
	FStringAssetReference DefaultPhysMaterialName; // 0x570
	TArray<FGameNameRedirect> ActiveGameNameRedirects; // 0x580
	TArray<FClassRedirect> ActiveClassRedirects; // 0x590
	TArray<FPluginRedirect> ActivePluginRedirects; // 0x5a0
	TArray<FStructRedirect> ActiveStructRedirects; // 0x5b0
	UTexture2D* PreIntegratedSkinBRDFTexture; // 0x5c0
	FStringAssetReference PreIntegratedSkinBRDFTextureName; // 0x5c8
	UTexture2D* MiniFontTexture; // 0x5d8
	FStringAssetReference MiniFontTextureName; // 0x5e0
	UTexture* WeightMapPlaceholderTexture; // 0x5f0
	FStringAssetReference WeightMapPlaceholderTextureName; // 0x5f8
	UTexture2D* LightMapDensityTexture; // 0x608
	FStringAssetReference LightMapDensityTextureName; // 0x610
	UGameViewportClient* GameViewport; // 0x628
	TArray<FString> DeferredCommands; // 0x630
	int32_t TickCycles; // 0x640
	int32_t GameCycles; // 0x644
	int32_t ClientCycles; // 0x648
	float NearClipPlane; // 0x64c
	char bHardwareSurveyEnabled : 1; // 0x650
	char bSubtitlesEnabled : 1; // 0x650
	char bSubtitlesForcedOff : 1; // 0x650
	int32_t MaximumLoopIterationCount; // 0x654
	char bCanBlueprintsTickByDefault : 1; // 0x658
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x658
	char bEnableEditorPSysRealtimeLOD : 1; // 0x658
	char bSmoothFrameRate : 1; // 0x658
	char bUseFixedFrameRate : 1; // 0x658
	float FixedFrameRate; // 0x65c
	FFloatRange SmoothedFrameRateRange; // 0x660
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x670
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x674
	char bShouldGenerateLowQualityLightmaps : 1; // 0x678
	FColor C_WorldBox; // 0x67c
	FColor C_BrushWire; // 0x680
	FColor C_AddWire; // 0x684
	FColor C_SubtractWire; // 0x688
	FColor C_SemiSolidWire; // 0x68c
	FColor C_NonSolidWire; // 0x690
	FColor C_WireBackground; // 0x694
	FColor C_ScaleBoxHi; // 0x698
	FColor C_VolumeCollision; // 0x69c
	FColor C_BSPCollision; // 0x6a0
	FColor C_OrthoBackground; // 0x6a4
	FColor C_Volume; // 0x6a8
	FColor C_BrushShape; // 0x6ac
	float StreamingDistanceFactor; // 0x6b0
	ETransitionType TransitionType; // 0x6b4
	FString TransitionDescription; // 0x6b8
	FString TransitionGameMode; // 0x6c8
	float MeshLODRange; // 0x6d8
	char bAllowMatureLanguage : 1; // 0x6dc
	float CameraRotationThreshold; // 0x6e0
	float CameraTranslationThreshold; // 0x6e4
	float PrimitiveProbablyVisibleTime; // 0x6e8
	float MaxOcclusionPixelsFraction; // 0x6ec
	char bPauseOnLossOfFocus : 1; // 0x6f0
	int32_t MaxParticleResize; // 0x6f4
	int32_t MaxParticleResizeWarn; // 0x6f8
	TArray<FDropNoteInfo> PendingDroppedNotes; // 0x700
	FRigidBodyErrorCorrection PhysicErrorCorrection; // 0x710
	float NetClientTicksPerSecond; // 0x72c
	char bHasPendingGlobalReregister : 1; // 0x730
	float DisplayGamma; // 0x734
	float MinDesiredFrameRate; // 0x738
	FLinearColor DefaultSelectedMaterialColor; // 0x73c
	FLinearColor SelectedMaterialColor; // 0x74c
	FLinearColor SelectionOutlineColor; // 0x75c
	FLinearColor SubduedSelectionOutlineColor; // 0x76c
	FLinearColor SelectedMaterialColorOverride; // 0x77c
	bool bIsOverridingSelectedColor; // 0x78c
	char bEnableOnScreenDebugMessages : 1; // 0x790
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0x790
	char bSuppressMapWarnings : 1; // 0x790
	char bCookSeparateSharedMPGameContent : 1; // 0x790
	char bDisableAILogging : 1; // 0x790
	uint32_t bEnableVisualLogRecordingOnStart; // 0x794
	int32_t ScreenSaverInhibitorSemaphore; // 0x79c
	char bLockReadOnlyLevels : 1; // 0x7a0
	FString ParticleEventManagerClassPath; // 0x7a8
	float SelectionHighlightIntensity; // 0x7c8
	float BSPSelectionHighlightIntensity; // 0x7cc
	float HoverHighlightIntensity; // 0x7d0
	float SelectionHighlightIntensityBillboards; // 0x7d4
	TArray<FNetDriverDefinition> NetDriverDefinitions; // 0x908
	TArray<FString> ServerActors; // 0x918
	TArray<FString> RuntimeServerActors; // 0x928
	char bStartedLoadMapMovie : 1; // 0x938
	int32_t NextWorldContextHandle; // 0x950
};

struct UEnvQueryGenerator_SimpleGrid {
	FAIDataProviderFloatValue GridSize; // 0x90
	FAIDataProviderFloatValue SpaceBetween; // 0xc0
	UEnvQueryContext* GenerateAround; // 0xf0
};

struct UDeepSeaSettings {
	float DeepSeaStartDepth; // 0x38
	float DepthToRemoveSurfaceNetCluster; // 0x3c
};

struct AMermaidService {
	AActor* MermaidBP; // 0x3d8
	UAIPartsCategory* MermaidPartsCategory; // 0x3e0
};

struct UHideInObjectInputComponent {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x80
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
	TArray<UAssetUserData*> AssetUserData; // 0xb0
	char bReplicates : 1; // 0xc0
	char bNetAddressable : 1; // 0xc0
	char bCreatedByConstructionScript : 1; // 0xc1
	char bInstanceComponent : 1; // 0xc1
	char bAutoActivate : 1; // 0xc2
	char bIsActive : 1; // 0xc2
	char bEditableWhenInherited : 1; // 0xc2
	char bNeedsLoadForClient : 1; // 0xc3
	char bNeedsLoadForServer : 1; // 0xc3
	EComponentNetDormancy TargetNetDormancy; // 0xc4
	EComponentCreationMethod CreationMethod; // 0xc5
};

struct USelectIslandsFromRegionStep {
	URegionMapDataAsset* RegionData; // 0x90
	URegionIslandSelectionStrategyBase* SelectionStrategy; // 0x98
};

struct ATreasureChestItemProxyStatic {
	UWwiseEvent* ShovelEnterSurfaceSfx; // 0x7c8
	UWwiseEvent* ExhumeStepSfx; // 0x7d0
	UWwiseEvent* FullyDugUpSfx; // 0x7d8
	UWwiseObjectPoolWrapper* ChestAmbiencePool; // 0x7e0
	UWwiseEvent* ChestAmbiencePlay; // 0x7e8
	UWwiseEvent* ChestAmbienceStop; // 0x7f0
	UDitherComponent* DitherComponent; // 0x7f8
	FEncounterParams CloseProximityEncounterParams; // 0x800
	UItemDiggingAudioConfig* CachedAudioConfig; // 0x810
};

struct UBeckonSettings {
	FStringAssetReference BeckonDataAsset; // 0x38
};

struct UStatProgressStepDesc {
	FPlayerStat Stat; // 0x80
};

struct ACosmeticItemActor {
	USkeletalMeshComponent* MeshComponent; // 0x3d8
};

struct UStopSuppressingCutsceneResponsesStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct ULocalPlayer {
	UGameViewportClient* ViewportClient; // 0x60
	EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0xa8
	APlayerController* PendingLevelPlayerControllerClass; // 0xb0
	char bSentSplitJoin : 1; // 0xb8
	float MinimumAspectRatio; // 0xbc
};

struct UMaterialExpressionDistanceToNearestSurface {
	FExpressionInput Position; // 0x70
};

struct AContestSafeRegion {
	AContestZone* ParentContestZone; // 0x410
	FWorldSafeZone ContestSafeZone; // 0x418
};

struct ULevelStreamingKismet {
	char bInitiallyLoaded : 1; // 0x210
	char bInitiallyVisible : 1; // 0x210
};

struct UHitReactingActorWithCannonConditionalStatTrigger {
	FName UniqueTextIdentifier; // 0x28
};

struct ULinkEQSContextWithVariableStepDesc {
	UEnvQueryContext_TaleContextBase* Context; // 0x80
	FQuestVariableSetEQSTaleContextValue Variable; // 0x88
};

struct UNPCDialogOptionClose {
	FText Text; // 0x80
};

struct UBTService_SetFloatToTheSurfaceWhileInBranch {
	bool FloatToTheSurfaceWhileInBranch; // 0x70
};

struct UNPCDialogPredicateHasFeature {
	FName FeatureName; // 0x38
};

struct UTaleAggressiveGhostShipEncounterService {
	UTaleAggressiveGhostShipEncounterServiceDesc* ServiceDesc; // 0x68
	AAggressiveGhostShipsEncounter* ActiveGhostShipEncounter; // 0x70
};

struct UAggressiveGhostShipsEncounterServiceParams {
	UAggressiveGhostShipsEncounterParams* EncounterParams; // 0x28
	TArray<FName> IslandsToSpawnOn; // 0x30
	float MinPlayerDistanceToIsland; // 0x40
	int32_t MaxTotalNumFiringCannons; // 0x44
	int32_t MaxNumFiringCannonsPerEncounter; // 0x48
	float MaxTimeToBeAllowedToFire; // 0x4c
	float MinTimeBeforeBeingAllowedToFireAgain; // 0x50
};

struct ADocumentationActor {
	FActorTickFunction PrimaryActorTick; // 0x28
	float CustomTimeDilation; // 0x78
	char bAllowRemovalFromServerWhenCollisionMerged : 1; // 0x7c
	char bAllowRemovalFromServerWhenAutomaticallyInstanced : 1; // 0x7c
	char bHidden : 1; // 0x7c
	char bNetTemporary : 1; // 0x7c
	char bNetStartup : 1; // 0x7c
	char bOnlyRelevantToOwner : 1; // 0x7c
	char bAlwaysRelevant : 1; // 0x7c
	char bReplicateMovement : 1; // 0x7c
	char bTearOff : 1; // 0x7d
	char bExchangedRoles : 1; // 0x7d
	char bPendingNetUpdate : 1; // 0x7d
	char bNetLoadOnClient : 1; // 0x7d
	char bNetUseOwnerRelevancy : 1; // 0x7d
	char bBlockInput : 1; // 0x7d
	char bCanBeInCluster : 1; // 0x7d
	char bActorEnableCollision : 1; // 0x7e
	char bReplicateAttachment : 1; // 0x7e
	char bReplicates : 1; // 0x7e
	FScriptMulticastDelegate OnPreNetOwnershipChange; // 0x80
	ENetRole RemoteRole; // 0x82
	AActor* Owner; // 0x88
	EActorSpawnRestrictions SpawnRestrictions; // 0x90
	FRepMovement ReplicatedMovement; // 0x94
	FRepAttachment AttachmentReplication; // 0xd0
	ENetRole Role; // 0x118
	EAutoReceiveInput AutoReceiveInput; // 0x11a
	int32_t InputPriority; // 0x11c
	UInputComponent* InputComponent; // 0x120
	float NetCullDistanceSquared; // 0x128
	int32_t NetTag; // 0x130
	float NetUpdateTime; // 0x134
	float NetUpdateFrequency; // 0x138
	float NetPriority; // 0x13c
	float LastNetUpdateTime; // 0x140
	FName NetDriverName; // 0x144
	char bAutoDestroyWhenFinished : 1; // 0x14c
	char bCanBeDamaged : 1; // 0x14c
	char bActorIsBeingDestroyed : 1; // 0x14c
	char bCollideWhenPlacing : 1; // 0x14c
	char bFindCameraComponentWhenViewTarget : 1; // 0x14c
	char bRelevantForNetworkReplays : 1; // 0x14c
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x150
	APawn* Instigator; // 0x158
	TArray<AActor*> Children; // 0x160
	USceneComponent* RootComponent; // 0x170
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x178
	float InitialLifeSpan; // 0x188
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x190
	TArray<FName> Layers; // 0x198
	FActorPtr ParentComponentActor; // 0x1a8
	TArray<TWeakObjectPtr<AActor>> ChildComponentActors; // 0x1b0
	char bActorSeamlessTraveled : 1; // 0x1c8
	char bIgnoresOriginShifting : 1; // 0x1c8
	char bEnableAutoLODGeneration : 1; // 0x1c8
	TArray<FName> Tags; // 0x1d0
	FName Feature; // 0x1e0
	uint64_t HiddenEditorViews; // 0x1e8
	FScriptMulticastDelegate OnActorBeginOverlap; // 0x1f0
	FScriptMulticastDelegate OnActorEndOverlap; // 0x1f1
	FScriptMulticastDelegate OnActorHit; // 0x1f2
	FScriptMulticastDelegate OnDestroyed; // 0x1f3
	FScriptMulticastDelegate OnEndPlay; // 0x230
	bool bDoOverlapNotifiesOnLoad; // 0x231
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x328
	TArray<UActorComponent*> InstanceComponents; // 0x338
	TArray<AActor*> ChildActorInterfaceProviders; // 0x350
	double DormancyLingeringInSeconds; // 0x3c8
};

struct UMaterialExpressionSceneTexelSize {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	FString Desc; // 0x38
	FColor BorderColor; // 0x48
	char bRealtimePreview : 1; // 0x4c
	char bNeedToUpdatePreview : 1; // 0x4c
	char bIsParameterExpression : 1; // 0x4c
	char bCommentBubbleVisible : 1; // 0x4c
	char bShowOutputNameOnPin : 1; // 0x4c
	char bHidePreviewWindow : 1; // 0x4c
	char bCollapsed : 1; // 0x4c
	char bShaderInputData : 1; // 0x4c
	char bShowInputs : 1; // 0x4d
	char bShowOutputs : 1; // 0x4d
	TArray<FText> MenuCategories; // 0x50
	TArray<FExpressionOutput> Outputs; // 0x60
};

struct ATestAthenaGameMode {
	APawn* GhostShipPawnClass; // 0x4e0
	UNetworkedEventsWhitelistDefinition* ServerNetworkedEventsWhitelistDefinition; // 0x4e8
	FGhostShipCoordinator GhostShipCoordinator; // 0x688
	FStorageContainerRefresher StorageContainerRefresher; // 0x8b8
	URiddleQuestDescGeneratorData* RiddleQuestDescGeneratorData; // 0x990
	float RespawnTimer; // 0x998
	float ContestRespawnTimer; // 0x99c
	float StorageContainerRefreshInterval; // 0x9a0
	int32_t ContainerRefreshBatchSize; // 0x9a4
};

struct UWaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStep {
	UTaleQuestStepDesc* TaleStepDesc; // 0x80
};

struct UPremiumShopSettings {
	FStringAssetReference PetShopDataAsset; // 0x28
};

struct UBTTask_MoveToFailOnDistanceChange {
	bool FailOnDistanceBeingLess; // 0xb8
	float FailDistance; // 0xbc
};

struct UComboBoxWidgetStyle {
	FComboBoxStyle ComboBoxStyle; // 0x30
};

struct UServerMigrationSerialisationDetailsTestsActorRef {
	AActor* ActorReferenceWithMigrationMarkup; // 0x28
};

struct ARotatingBlockPuzzle {
	UPrimitiveComponent* StaticMesh; // 0x470
	UDecalComponent* Position1Decal; // 0x478
	UDecalComponent* Position2Decal; // 0x480
	UDecalComponent* Position3Decal; // 0x488
	UDecalComponent* Position4Decal; // 0x490
	TArray<FTransform> InteractVFXLocations; // 0x498
	UObject* InteractVFX; // 0x4a8
	FText BlockName; // 0x4b0
	UMaterialInterface* DefaultMaterialInstance; // 0x4e8
	float MaterialBlendInTime; // 0x4f0
	float MaterialBlendOutTime; // 0x4f4
	float IncorrectPulseDuration; // 0x4f8
	UPuzzleVaultAudioParams* PuzzleVaultAudioParams; // 0x500
	int32_t CorrectPostion; // 0x508
	float RotationSpeed; // 0x50c
	int32_t CurrentPosition; // 0x510
};

struct AItemPreviewActor {
	FItemPreviewView CurrentView; // 0x3e0
	TArray<USceneComponent*> CameraLocations; // 0x498
	UAnimationAsset* PendingAnim; // 0x4a8
	UCosmeticItemAnimationComponent* CosmeticItemAnimationComponent; // 0x4d0
	UAnimationAsset* DefaultAnimation; // 0x4d8
	TWeakObjectPtr<USkeletalMeshComponent> ItemSkeletalMeshComponent; // 0x4e0
	TWeakObjectPtr<UStaticMeshComponent> ItemStaticMeshComponent; // 0x4e8
	TWeakObjectPtr<UCameraComponent> MainCamera; // 0x4f0
	FObjectMessagingHandle PreviewReadyEventHandle; // 0x4f8
	FObjectMessagingHandle PreviewBusyEventHandle; // 0x540
	float SpinItemRate; // 0x588
};

struct UAISenseConfig_Prediction {
	float MaxAge; // 0x28
	char bStartsEnabled : 1; // 0x2c
};

struct UBehaviorTree {
	UBTCompositeNode* RootNode; // 0x28
	UBlackboardData* BlackboardAsset; // 0x30
	TArray<UBTDecorator*> RootDecorators; // 0x38
	TArray<FBTDecoratorLogic> RootDecoratorOps; // 0x48
};

struct UWieldablePetComponentDataAsset {
	FFloatRange FriendlyTimeUntilEscape; // 0x28
	FFloatRange NormalTimeUntilEscape; // 0x38
	FFloatRange SubmergedTimeUntilEscape; // 0x48
	float DamageToOwnerDropThreshold; // 0x58
	TArray<FWieldablePetDropTimeout> DropTimeouts; // 0x60
};

struct UFindTurnBasedMatchCallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UPremiumCatalogItemSetDataAsset {
	FText PageTitle; // 0x108
	FStringAssetReference PageIcon; // 0x140
	TArray<FPremiumCatalogItemSet> ItemSets; // 0x150
};

struct USetMechanismActionCutsceneActorStepDesc {
	FQuestVariableActor CutSceneActor; // 0x80
	FQuestVariableActor MechanismActor; // 0x90
};

struct APressurePlateMechanismProgressTrigger {
	float ProgressionAmount; // 0x440
};

struct UFloatBinding {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x40
};

struct UWeepingComponent {
	float FillRate; // 0xc8
	float MinWeepDuration; // 0xcc
	float MaxWeepDuration; // 0xd0
	float MinCalmDuration; // 0xd4
	float MaxCalmDuration; // 0xd8
	float MaterialBlendInTime; // 0xdc
	float MaterialBlendOutTime; // 0xe0
	float DecalBlendInTime; // 0xe4
	float DecalBlendOutTime; // 0xe8
	float SFXEmitterHeightOffset; // 0xec
	UWwiseEvent* StartWeepingSFX; // 0xf0
	UWwiseEvent* StopWeepingSFX; // 0xf8
	UWwiseObjectPoolWrapper* WeepingSFXPool; // 0x138
	TArray<UMaterialInstanceDynamic*> DynamicMaterials; // 0x140
	UMaterialInstanceDynamic* DecalMaterial; // 0x150
	EWeepingState State; // 0x158
	FName SupressableEmitterTag; // 0x190
	TArray<UParticleSystemComponent*> ParticleEmitters; // 0x198
};

struct UMountpointComponent {
	TArray<UMountableType*> AcceptedMountableTypes; // 0x2b8
	FRotator DetachForwardDirectionRotator; // 0x2c8
	float DetachOffset; // 0x2d4
	bool UseOverrideMountedCollisionProfile; // 0x2d8
	FCollisionProfileName OverrideMountedCollisionProfileName; // 0x2dc
	UObject* ReplicatedMountedItem; // 0x2f8
	bool IsMountingDisabled; // 0x310
	bool MountedItemHadSimulatePhysicsEnabled; // 0x311
	FName MountedItemPremountCollisionProfileName; // 0x314
};

struct UInterpTrackColorScale {
	FInterpCurveVector VectorTrack; // 0x70
	float CurveTension; // 0x88
};

struct UParticleModuleVectorFieldRotation {
	FVector MinInitialRotation; // 0x50
	FVector MaxInitialRotation; // 0x5c
};

struct UGameplayCueNotify_HitImpact {
	USoundBase* Sound; // 0x40
	UParticleSystem* ParticleSystem; // 0x48
};

struct UNamedSlot {
	TArray<UPanelSlot*> Slots; // 0x138
};

struct UBTDecorator_LeftOfAIPawn {
	FBlackboardKeySelector TargetKey; // 0x68
	bool ReverseLogic; // 0x90
};

struct AAnimatedMechanismActionProxy {
	float Delay; // 0x3f0
	UMechanismMaterialGroup* MaterialGroup; // 0x3f8
};

struct UShowLoginUICallbackProxy {
	FScriptMulticastDelegate OnSuccess; // 0x28
	FScriptMulticastDelegate OnFailure; // 0x38
};

struct UParticleModuleWindBase {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2c
	TArray<int32_t> ModuleInstanceOffsets; // 0x30
	TArray<int32_t> ModuleOffsets; // 0x40
};

struct UPetDangerDataAsset {
	TArray<FPetDangerHearingThreat> KnownHearingDangers; // 0x28
	float MinChangeAverageThreatLocationToUpdate; // 0x38
	float FleeDistance; // 0x3c
	TArray<EPetDangerHearingResponseType> ResponsePriorities; // 0x40
};

struct UMaterialExpressionLandscapeLayerSample {
	FName ParameterName; // 0x70
	float PreviewWeight; // 0x78
	FGuid ExpressionGUID; // 0x7c
};

struct UElectricShieldAbility {
	TArray<TScriptInterface<Class>> SelectedTargets; // 0x80
	TScriptInterface<Class> CachedAIManager; // 0x90
	TScriptInterface<Class> OwnerChainLightningSourceInterface; // 0xa0
};

struct UInterpTrackFloatAnimBPParam {
	UObject* AnimBlueprintClass; // 0x90
	FName ParamName; // 0x98
};

struct UParticleModuleAccelerationEmitterPoint {
	FRawDistributionFloat AccelerationScale; // 0x58
	char bApplyOwnerScale : 1; // 0x90
};

struct UMastHinge {
	FScriptMulticastDelegate OnHingeTransformChanged; // 0x28
};

struct APlinthMechanismAction {
	UMechanismTriggerComponent* MechanismTrigger; // 0x570
	ULockComponent* LockComponent; // 0x578
	UActionRulesComponent* ActionRulesComponent; // 0x580
	UPlinthInteractableComponent* InteractableComponent; // 0x588
	bool CanLockComponentAcceptKey; // 0x590
};

struct UPawnMovementComponent {
	APawn* PawnOwner; // 0x158
};

struct UMastAudioParams {
	UWwiseEvent* PlaySailLength; // 0x28
	UWwiseEvent* StopSailLength; // 0x30
	UWwiseEvent* PlaySailLengthStopTop; // 0x38
	UWwiseEvent* PlaySailLengthStopBottom; // 0x40
	FName RtpcSailCompletion; // 0x48
	float MinCompletionValue; // 0x50
	float MaxCompletionValue; // 0x54
	UWwiseEvent* PlaySailAngle; // 0x58
	UWwiseEvent* StopSailAngle; // 0x60
	UWwiseEvent* PlaySailAngleStopLimit; // 0x68
	FName RtpcSailAngle; // 0x70
	float MinAngleValue; // 0x78
	float MaxAngleValue; // 0x7c
};

struct UAshCloudAIAbilityParams {
	AAshenLordAshCloud* AshCloudClass; // 0xc8
};

struct UFeedingComponent {
	TArray<EFeedableType> ValidFeedableTypes; // 0xd0
	float FeedTime; // 0xe0
	FFeedStruct FeedStruct; // 0xe8
	AActor* LastActorToBeFedBy; // 0xf8
	bool AlwaysDescribe; // 0x100
};

struct UShipSpeedBand {
	float MinimumSpeed; // 0x28
};

struct UStatusApplicationDesc {
	FEventAppliedStatusToTargets ApplicationEvent; // 0x28
};

struct UTaleQuestProgressService {
	UTaleQuestProgressServiceDesc* Desc; // 0x60
	TArray<FGuid> ParticipatingCrewIds; // 0x68
};

struct UShipDamagerComponent {
	UPrimitiveComponent* Shape; // 0xd0
	TArray<TScriptInterface<Class>> ShipHulls; // 0xd8
	TArray<TScriptInterface<Class>> WatercraftHealthInterfaces; // 0xe8
	FStrainDamage ShipStrainDamage; // 0xf8
	FWeightedProbabilityRangeOfRanges TimeBetweenWatercraftDamage; // 0x120
	float WatercraftDamage; // 0x150
	bool StartDamagingOnBeginPlay; // 0x154
};

struct UContestUIComponent {
	AAthenaPlayerController* ClientPlayerController; // 0x120
};

struct UPetRoamingAnimationStateDefinitionDataAsset {
	FPetRoamingAnimationStateDefinition AnimationDefinitionData; // 0x28
};

struct UGetCurrentLocationDataStep {
	UGetCurrentLocationDataStepDesc* Desc; // 0x90
};

struct ALargeSkeletalMeshWieldableItem {
	UPrimitiveComponent* FirstPersonMesh; // 0x428
	UPrimitiveComponent* ThirdPersonMesh; // 0x430
	UActionRulesComponent* ActionRulesComponent; // 0x438
	UWieldableItemAnimationStoreId* AnimationKey; // 0x440
	FObjectMessagingDispatcher MessagingDispatcher; // 0x448
	FTransform AnimationOffset; // 0x4f0
	UWwiseEvent* EquipSfx; // 0x520
	UWwiseEvent* UnequipSfx; // 0x528
	UWwiseEvent* WielderLandedJumpSfx; // 0x530
	UWwiseEvent* WielderFootstepLayerOneshot; // 0x538
	FName PlayerWalkSpeedRtpc; // 0x540
	UWwiseEvent* FirstTimeEquipSfx; // 0x548
	bool ForceUnequipSfx; // 0x550
	EWieldableItemSize ItemSize; // 0x551
	FDetailAppearenceDesc DetailAppearence; // 0x558
	bool PropagateVisibilityToChildren; // 0x588
	FName AINoiseTag; // 0x58c
	TArray<FName> ThirdPersonExtraMeshNames; // 0x598
	TArray<FName> StashedExtraMeshNames; // 0x5a8
	UMeshComponent* StashedMeshComponent; // 0x5b8
	FName StashedMeshAttachSocket; // 0x5c0
	FName ServerWieldAttachSocket; // 0x5c8
	UPhrasesRadialDataAsset* Phrases; // 0x5d0
	UObject* CachedFirstPersonProxyMesh; // 0x5d8
	UObject* CachedThirdPersonProxyMesh; // 0x5e0
	UItemCategory* ItemCategory; // 0x710
	AItemInfo* ItemInfo; // 0x718
	AInterpolatingItem* InterpolatingItem; // 0x720
	TWeakObjectPtr<AActor> LastKnownWielder; // 0x740
	UWieldableItemVfxComponent* WieldableItemVfxComponent; // 0x748
	TArray<UMeshComponent*> ThirdPersonExtraMeshes; // 0x750
	TArray<UMeshComponent*> StashedExtraMeshes; // 0x760
	bool OfferingEnabled; // 0x789
};

struct UTaleQuestAssignContendedResourceStepDesc {
	FQuestVariableAssetArray RelevantResources; // 0x80
	FQuestVariableVector SelectionOriginPointVar; // 0x90
	FQuestVariableTaleResourceHandle AllocatedResourceHandle; // 0xa0
	FQuestVariableAsset AllocatedResource; // 0xb0
	FQuestVariableInt AllocatedResourceIndex; // 0xc0
	ESelectionPolicy ResourceSelectionPolicy; // 0xd0
};

struct AFrontendHUD {
	FObjectMessagingDispatcher ObjectMessagingDispatcher; // 0x4e8
	UFrontendHudComponent* FrontendHudComponent; // 0x588
	UUITelemetryComponent* FrontendTelemetryComponent; // 0x590
	UUIInputForwardComponent* InputForwardComponent; // 0x598
	UFrontendCameraComponent* FrontendCameraComponent; // 0x5a0
	UPirateSelector* PirateSelectorComponent; // 0x5a8
	UFrontendPremiumShopViewModelComponent* PremiumShopViewModelComponent; // 0x5b0
	UPiratePreviewComponentFrontend* PiratePreviewComponent; // 0x5b8
	UItemPreviewComponent* ItemPreviewComponent; // 0x5c0
	UHttpClientComponent* HttpClientComponent; // 0x5c8
	UCoherentToWwiseEventComponent* CoherentToWwiseEventComponent; // 0x5d0
	UWwiseEvent* PressAnyButtonSFX; // 0x5d8
};

struct UConstellationAudioEventsDataAsset {
	TArray<FConstellationAudioPair> ConstellationAudioEventsMap; // 0x28
};

struct UNPCDialogConditionalExpression {
	UNPCDialogExpression* Expression; // 0x30
};

struct URandomPirateLegendSectStepDesc {
	FQuestVarPLSectionBundle SectionBundle; // 0x80
	FQuestVarPLSection OutSection; // 0x90
	TArray<UPirateLegendSectionFilter*> Filters; // 0xa0
};

struct UVotingInteractionComponentBase {
	UNotificationInputId* HoldInputId; // 0x120
	UNotificationInputId* ReleaseInputId; // 0x128
};

struct ULocationMapSettings {
	UTreasureMapItemDesc* LocationMapItemDescClass; // 0x38
	FStringAssetReference DefaultParams; // 0x40
	EBlendMode DefaultMapBlendMode; // 0x50
	EBlendMode DefaultBannerBlendMode; // 0x51
	EBlendMode DefaultVaultSymbolBlendMode; // 0x52
	FStringAssetReference DefaultChest; // 0x58
	EBlendMode DefaultChestBlendMode; // 0x68
};

struct UBedComponent {
	FText DisengageVerb; // 0x250
	FText InteractionTextTakingDamage; // 0x288
	FText InteractionTextBedUnderwater; // 0x2c0
	FSleepingActionStateParams SleepingStateParams; // 0x2f8
};

struct UTaleQuestMapStepDescBase {
	bool Fork; // 0x28
	TMap<FName, FQuestVariableAny> PromotedPropertyVariables; // 0x30
};

struct URemoveFogBankAvoidanceAreaStepDesc {
	FQuestVariableVector Location; // 0x80
};

struct UMaterialExpressionStaticSwitch {
	char DefaultValue : 1; // 0x70
	FExpressionInput A; // 0x78
	FExpressionInput B; // 0xb0
	FExpressionInput Value; // 0xe8
};

struct UShipCustomizationCategory {
	FText Name; // 0x28
	FName UniqueTextIdentifier; // 0x60
	FStringAssetReference IconPath; // 0x68
};

struct UPortalServiceParams {
	float MinimumSpawnRangeInMeters; // 0x28
	float MaximumSpawnRangeInMeters; // 0x2c
	float PortalBoundsThreshold; // 0x30
};

struct UUserInterfaceSettings {
	ERenderFocusRule RenderFocusRule; // 0x38
	FStringClassReference DefaultCursor; // 0x40
	FStringClassReference TextEditBeamCursor; // 0x50
	FStringClassReference CrosshairsCursor; // 0x60
	FStringClassReference GrabHandCursor; // 0x70
	FStringClassReference GrabHandClosedCursor; // 0x80
	FStringClassReference SlashedCircleCursor; // 0x90
	float ApplicationScale; // 0xa0
	EUIScalingRule UIScaleRule; // 0xa4
	FStringClassReference CustomScalingRuleClass; // 0xa8
	FRuntimeFloatCurve UIScaleCurve; // 0xb8
	TArray<UObject*> CursorClasses; // 0x138
	UObject* CustomScalingRuleClassInstance; // 0x148
	UDPICustomScalingRule* CustomScalingRule; // 0x150
};

struct UTaleQuestAddLocationMapStepDesc {
	FName MapId; // 0x80
	FQuestVariableInt NumberOfChests; // 0x88
	FQuestVariableDataAsset RegionMapData; // 0x98
	FQuestVariableDataAsset VaultData; // 0xa8
	FQuestVariableDataAsset MapParams; // 0xb8
};

struct AIgnitableMechanismTriggerProxy {
	bool UseExtinguishTimer; // 0x3f0
	bool AllowFireToBeReplenishedBeforeExtinguishTimerExpired; // 0x3f1
	float TimeInSecondsUntilFireExtinguished; // 0x3f4
	UStatusRecipientResponseList* RecipientResponseList; // 0x3f8
};

struct UWaitForNPCDialogOptionEventStep {
	UWaitForNPCDialogOptionEventStepDesc* Desc; // 0x90
	AActor* ActorVar; // 0x98
};

struct ATestAthenaPlayerControllerWithAthenaPlayerCameraManager {
	UForceFeedbackEffect* LastReceivedForceFeedbackEffect; // 0x1488
};

struct AContestZone {
	TArray<FContestZoneVendorShipData> VendorShipsToSpawnInContest; // 0x3e0
	USphereComponent* ContestZoneBoundaryComponent; // 0x3f0
	FName ContestZoneName; // 0x3f8
	float ContestZoneRadius; // 0x400
	float RespawnSafeZoneRadius; // 0x404
	float RespawnDistanceThreshold; // 0x408
	bool IsFullyActivated; // 0x40c
	FObjectMessagingDispatcher ContestZoneObjectMessagingDispatcher; // 0x410
	TArray<FInitialShipSpawnLocations> InitialSpawnLocations; // 0x4b0
	TArray<AIslandData*> IslandsWithinContestZone; // 0x4c0
	FStringAssetReference RespawnPointAsset; // 0x4d0
	AContestSafeRegion* ContestSafeRegion; // 0x4e0
	float ContestZoneRadiusSquared; // 0x4e8
	float ContestZoneDiameter; // 0x4ec
	float ContestZoneArea; // 0x4f0
	TArray<AArenaVendorShip*> VendorShips; // 0x4f8
	TArray<FTransform> RespawnLocations; // 0x508
	AShipSpawnLocation* PooledRespawnLocation; // 0x518
	TArray<AShipSpawnLocation*> ShipSpawnLocationsForContest; // 0x520
	int32_t NumberOfSpawnPointsToGenerate; // 0x5b8
	float MinimumDistanceFromBounds; // 0x5bc
	ERespawnPointOrientation ContestZoneRespawnLocationOrientation; // 0x5c0
	float RadiusForStaticObjectCheck; // 0x5c4
	TArray<UCalmWaterComponent*> CalmWaters; // 0x5e0
};

struct ADecalActor {
	UDecalComponent* Decal; // 0x3d0
};

struct UBTTask_DoesEQSQuerySucceed {
	FBlackboardKeySelector KeyToSetToTrueIfNoValidLocationFound; // 0xa8
	FBlackboardKeySelector ReasonStringKeyIfNoValidLocationFound; // 0xd0
	bool ThrottleQueryTimePerFrame; // 0xf8
	float MaxSecondsToSpendOnQueryPerFrame; // 0xfc
};

struct UInterpTrackVisibility {
	TArray<FVisibilityTrackKey> VisibilityTrack; // 0x70
	char bFireEventsWhenForwards : 1; // 0x80
	char bFireEventsWhenBackwards : 1; // 0x80
	char bFireEventsWhenJumpingForwards : 1; // 0x80
};

struct AIndividualReplicationChannel {
	TMap<UObject*, UObject*> ReplicationChannelComponents; // 0x3d0
};

struct UMaterialExpressionRotateAboutAxis {
	FExpressionInput NormalizedRotationAxis; // 0x70
	FExpressionInput RotationAngle; // 0xa8
	FExpressionInput PivotPoint; // 0xe0
	FExpressionInput Position; // 0x118
	float Period; // 0x150
};

struct UStatusResponseToggleWheelLock {
	ECurseTag CurseTag; // 0x30
	float AngleThreshold; // 0x34
	float Duration; // 0x38
};

struct UFireChargedAttackAIAbility {
	UAthenaAIAbilityParams* AbilityParams; // 0x28
	APawn* Pawn; // 0x30
	AAthenaAIController* Controller; // 0x38
	TScriptInterface<Class> AIPawnInterface; // 0x40
	UAthenaAIAbilityStageParams* CurrentAbilityStageParams; // 0x50
};

struct UAISense_Blueprint {
	UUserDefinedStruct* ListenerDataType; // 0x88
	TArray<UAIPerceptionComponent*> ListenerContainer; // 0x90
	TArray<UAISenseEvent*> UnprocessedEvents; // 0xa0
};

struct UBTService_DetermineRecoveryMethod {
	float TimeToForgetAfterSuccessfulFlee; // 0x70
	AAthenaAICharacterController* CachedAICharacterController; // 0x78
};

struct UDemoPendingNetGame {
	UNetDriver* NetDriver; // 0x30
	UPackage* PreLoadedMapPackage; // 0xe8
	UWorld* PreLoadedWorld; // 0xf0
};

struct UTaleQuestSelectTradeRouteStep {
	UTaleQuestSelectTradeRouteStepDesc* Desc; // 0x90
};

struct ULandmarkReactionEventPlayReactionFromAnotherLandmark {
	int32_t ReactionIndex; // 0x38
};

struct UObtainClueFromContainerOnWieldComponent {
	UClueDescriptor* ClueToObtain; // 0x140
	UClueSiteType* ClueSiteType; // 0x148
};

struct UCanvasPanelSlot {
	FAnchorData LayoutData; // 0x38
	bool bAutoSize; // 0x60
	int32_t ZOrder; // 0x64
};

struct UTitleDesc {
	FName WardrobeKey; // 0xd8
};

struct UParticleModuleLocationPrimitiveCylinder_Seeded {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x348
};

struct UTaleRankRequirements {
	TArray<FCampaignRanks> RankRequirements; // 0x28
};

struct UStartEmissaryVoyageInlineVoteValidator {
	UCompany* TargetCompany; // 0x30
	UEntitlementDesc* RequiredEntitlement; // 0x38
	UEmissaryVoyageInlineVoteConsumerBase* Consumer; // 0xa0
};

struct ATestDelayedMeshCharacter {
	USkeletalMeshComponent* Mesh; // 0x448
	UCharacterMovementComponent* CharacterMovement; // 0x450
	UCapsuleComponent* CapsuleComponent; // 0x458
	FBasedMovementInfo BasedMovement; // 0x460
	FBasedMovementInfo ReplicatedBasedMovement; // 0x498
	FVector BaseTranslationOffset; // 0x4d0
	FQuat BaseRotationOffset; // 0x4e0
	char ReplicatedMovementMode; // 0x4f0
	bool bInBaseReplication; // 0x4f1
	float CrouchedEyeHeight; // 0x4f4
	char bIsCrouched : 1; // 0x4f8
	char bPressedJump : 1; // 0x4f8
	char bClientUpdating : 1; // 0x4f8
	char bClientWasFalling : 1; // 0x4f8
	char bClientResimulateRootMotion : 1; // 0x4f8
	char bSimGravityDisabled : 1; // 0x4f8
	char bServerMoveIgnoreRootMotion : 1; // 0x4f8
	float JumpKeyHoldTime; // 0x4fc
	float JumpMaxHoldTime; // 0x500
	FScriptMulticastDelegate OnReachedJumpApex; // 0x508
	FScriptMulticastDelegate OnCharacterMovementUpdated; // 0x528
	FRootMotionMovementParams ClientRootMotionParams; // 0x540
	TArray<FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x580
	FRepRootMotionMontage RepRootMotion; // 0x590
};

struct UMaterialExpressionDecalMipmapLevel {
	FExpressionInput TextureSize; // 0x70
	float ConstWidth; // 0xa8
	float ConstHeight; // 0xac
};

struct UShipCurseComponent {
	TArray<AActor*> CachedShipAttachedActors; // 0xc8
	TArray<AMast*> FoundMasts; // 0xd8
	ACapstan* ShipCapstan; // 0xe8
	TArray<ACannon*> ShipCannons; // 0xf0
	AWheel* ShipWheel; // 0x100
	TArray<UFixedIntentComponent*> SailFixedIntentComponents; // 0x108
	float ShipCapstanTargetRatio; // 0x188
	TArray<FShipActiveCurseFXData> ActiveCurseFX; // 0x190
	TArray<AActor*> ActorsAffectedByToggleInteractionsCurse; // 0x1a0
	TArray<FShipCurseSpawnedFXForCurse> SpawnedFXForCurses; // 0x1b0
};

struct AHideout {
	TArray<ASpawnLocation*> AssociatedSpawnLocations; // 0x3d0
	UPrimitiveComponent* RevealTriggerVolume; // 0x3e0
	FText HideoutName; // 0x3e8
	TArray<FPlayerHideoutInfo> Players; // 0x420
};

struct UEntitlementMapDataAsset {
	TArray<FEntitlementMapEntry> Entitlements; // 0x28
	TArray<UEntitlementMapDataAsset*> EntitlementAssets; // 0x38
};

struct UAlwaysRelevantPlayerNameplateComponent {
	AAthenaPlayerState* PlayerStatePtr; // 0x370
};

struct UAnimNotifyCondition_FeatureConfigValidation {
	FName Feature; // 0x28
	bool TriggerWhenDisabled; // 0x30
};

