// Created by BlueFire1337
// Updated 2022-01-17
// Generated 2022-01-23

namespace off {
	constexpr auto GNames = 0x672d200;
	constexpr auto GObjects = 0x6759478;
	constexpr auto GWorld = 0x689be48;
}

struct AKSAgent_RevealDrone : AKSAgentBase {
	float MaxFlightSpeed; // 0x320
	float DistanceToFly; // 0x324
	float TimeBetweenPings; // 0x328
	float RevealPeriodDuration; // 0x32c
	FPGame_ReplicatedTimer ReplicatedRevealTimer; // 0x330
	float UpdateReplicatedTimerPeriod; // 0x368
	bool bAppliesScrambleEffectToEnemies; // 0x36c
	TArray<AKSCharacter*> CurrentSweepFoundChars; // 0x3b0
};

struct UDatasmithActorTemplate : UDatasmithObjectTemplate {
	TSet<FName> Layers; // 0x30
	TSet<FName> Tags; // 0x80
};

struct UKSWeaponAttachmentInst_Reactive : UKSWeaponAttachmentInstance {
	uint16_t PersistentStateData; // 0x140
};

struct UBasicOverlays : UOverlays {
	TArray<FOverlayItem> Overlays; // 0x28
};

struct UANotifyState_WeaponHide_C : UAnimNotifyState {
	bool Is DodgeRollReload Montage; // 0x30
	bool Reverse; // 0x31
	bool Only Hide; // 0x32
	bool Only Unhide; // 0x33
	bool For Emote; // 0x34
	bool Hide Left Prop Only; // 0x35
	bool Hide Right Prop Only; // 0x36
};

struct UWBP_BoxStroke_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Image_E; // 0x240
	UImage* Image_N; // 0x248
	UImage* Image_S; // 0x250
	UImage* Image_W; // 0x258
	USizeBox* SB_E; // 0x260
	USizeBox* SB_N; // 0x268
	USizeBox* SB_S; // 0x270
	USizeBox* SB_W; // 0x278
	float StrokeSize; // 0x280
	FLinearColor StrokeColor; // 0x284
};

struct UWBP_RogueBioPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ItemDescSlotNew_C* AbilitySlot; // 0x528
	UImage* background; // 0x530
	UImage* Background_Dimmer; // 0x538
	UImage* EndDecro; // 0x540
	UVerticalBox* FreeRotation; // 0x548
	UWBP_KeyCallout_C* GamepadCallout; // 0x550
	UImage* GradientImage; // 0x558
	UImage* Image_2; // 0x560
	UImage* Image_643; // 0x568
	UVerticalBox* JobPrices; // 0x570
	UImage* Linerule; // 0x578
	UVerticalBox* LockedRogueLabel; // 0x580
	UWBP_ItemDescSlotNew_C* PassiveSlot; // 0x588
	USizeBox* PurchaseButton; // 0x590
	URichTextBlock* RichTextBlock_257; // 0x598
	URichTextBlock* RoleText; // 0x5a0
	UTextBlock* ShortBio; // 0x5a8
	UTextBlock* Text; // 0x5b0
	UTextBlock* Text_2; // 0x5b8
	UWBP_StandardButtonLarge_C* UnlockButton; // 0x5c0
	UWBP_RoguePanelHeader_C* WBP_RoguePanelHeader; // 0x5c8
	UKSRogueDetailsWidget* RogueDetailsWidget; // 0x5d0
	UPUMG_StoreItem* StoreItem; // 0x5d8
	bool IsPurchasable; // 0x5e0
};

struct UWBP_VoucherAcquisition_C : UKSVoucherAcquisition {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnShow; // 0x528
	UWBP_StandardButtonMedium_C* ClaimButton; // 0x530
	UKSAsyncImage* DLCImage; // 0x538
	UScaleBox* FullSplashBG; // 0x540
	UImage* Image; // 0x548
	UImage* Image_139; // 0x550
	UHorizontalBox* MultipleVoucherContainer; // 0x558
	UScrollBox* MultipleVoucherScrollBox; // 0x560
	UOverlay* Overlay_52; // 0x568
	UCanvasPanel* RedeemingOverlay; // 0x570
	UTextBlock* Subtitle; // 0x578
	UThrobber* Throbber_164; // 0x580
	UWBP_Header1_C* WBP_Header1; // 0x588
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x590
	UPUMG_StoreItem* DLCVoucher; // 0x598
	bool IsRedeeming; // 0x5a0
	UAkAudioEvent* ShowVoucherAcquisitionSFX; // 0x5a8
	TArray<UPUMG_StoreItem*> VoucherItems; // 0x5b0
	float ScrollDirection; // 0x5c0
};

struct UMovieScene : UMovieSceneSignedObject {
	TArray<FMovieSceneSpawnable> Spawnables; // 0x50
	TArray<FMovieScenePossessable> Possessables; // 0x60
	TArray<FMovieSceneBinding> ObjectBindings; // 0x70
	TMap<FName, FMovieSceneObjectBindingIDs> BindingGroups; // 0x80
	TArray<UMovieSceneTrack*> MasterTracks; // 0xd0
	UMovieSceneTrack* CameraCutTrack; // 0xe0
	FMovieSceneFrameRange SelectionRange; // 0xe8
	FMovieSceneFrameRange PlaybackRange; // 0xf8
	FFrameRate TickResolution; // 0x108
	FFrameRate DisplayRate; // 0x110
	EMovieSceneEvaluationType EvaluationType; // 0x118
	EUpdateClockSource ClockSource; // 0x119
	FSoftObjectPath CustomClockSourcePath; // 0x120
	TArray<FMovieSceneMarkedFrame> MarkedFrames; // 0x138
};

struct UANotifyState_ShowTablet_C : UAnimNotifyState {
	bool bReverse; // 0x30
	bool bKeepTabletUnhidden; // 0x31
};

struct UTextureLightProfile : UTexture2D {
	float Brightness; // 0xe8
	float TextureMultiplier; // 0xec
};

struct UWBP_CosmeticItem_Banner_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ButtonSlot_Cosmetic_C* Button; // 0x528
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x530
	FMulticastInlineDelegate OnItemHovered; // 0x538
	FMulticastInlineDelegate OnItemUnhovered; // 0x548
	FMulticastInlineDelegate OnItemClicked; // 0x558
	UPlatformInventoryItem* PlatformItem; // 0x568
	UAkAudioEvent* HoverBannerItemSFX; // 0x570
	UAkAudioEvent* ClickBannerItemSFX; // 0x578
};

struct UAsyncActionLoadPrimaryAssetClass : UAsyncActionLoadPrimaryAssetBase {
	FMulticastInlineDelegate Completed; // 0x78
};

struct UMeshComponent : UPrimitiveComponent {
	TArray<UMaterialInterface*> OverrideMaterials; // 0x430
	char bEnableMaterialParameterCaching : 1; // 0x450
};

struct UGizmoAxisTranslationParameterSource : UGizmoBaseFloatParameterSource {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x90
	TScriptInterface<IGizmoTransformSource> TransformSource; // 0xa0
	float Parameter; // 0xb0
	FGizmoFloatParameterChange LastChange; // 0xb4
	FVector CurTranslationAxis; // 0xbc
	FVector CurTranslationOrigin; // 0xc8
	FTransform InitialTransform; // 0xe0
};

struct AKSKillCamObjectCamera : AActor {
	UKSSpringArmComponent* MainCameraBoom; // 0x220
	UCameraComponent* MainCameraComponent; // 0x228
	USceneComponent* EmptyComponent; // 0x230
};

struct UMovieSceneBoolSection : UMovieSceneSection {
	bool DefaultValue; // 0xe0
	FMovieSceneBoolChannel BoolCurve; // 0xe8
};

struct UPGameBTTask_AlwaysReturn : UBTTaskNode {
	EBTNodeResult AlwaysReturn; // 0x70
};

struct USkyLightComponent : ULightComponentBase {
	ESkyLightSourceType SourceType; // 0x238
	UTextureCube* Cubemap; // 0x240
	float SourceCubemapAngle; // 0x248
	int32_t CubemapResolution; // 0x24c
	float SkyDistanceThreshold; // 0x250
	bool bCaptureEmissiveOnly; // 0x254
	bool bLowerHemisphereIsBlack; // 0x255
	FLinearColor LowerHemisphereColor; // 0x258
	float OcclusionMaxDistance; // 0x268
	float Contrast; // 0x26c
	float OcclusionExponent; // 0x270
	float MinOcclusion; // 0x274
	FColor OcclusionTint; // 0x278
	EOcclusionCombineMode OcclusionCombineMode; // 0x27c
	UTextureCube* BlendDestinationCubemap; // 0x328
};

struct UKSQuip : UKSRadialMenuItem {
	FName OverriddenAudioEventName; // 0x2b8
	TSoftObjectPtr<UAkAudioEvent> QuipAudioEvent; // 0x2c0
};

struct UKSModInst_ApplyDebuffOnDamage : UKSModInst_OnDamageOther {
	TArray<UKSPlayerMod*> DebuffsToApply; // 0x1d0
	bool bGiveDebuffsUniquely; // 0x1e0
	float DebuffDuration; // 0x1e4
};

struct UKSAnnouncementQueueWidget : UKSWidget {
	bool IsBusy; // 0x520
	FMulticastInlineDelegate OnReadyForNextAnnouncement; // 0x528
};

struct UKSViewedPawnDamageDisplay : UKSViewedPawnWidget {
	float StackingWait; // 0x550
	bool TetherToEventLocation; // 0x554
	int32_t MaxNumDamageWidgetsOnScreen; // 0x558
	UCanvasPanel* DamageNumberContainer; // 0x560
	TMap<UDamageType*, FSpecialDamageColors> SpecialDamageTypes; // 0x568
	TArray<UDamageNumberDisplayWidget*> CurrentDamageNumbersOnScreen; // 0x5b8
	TArray<UDamageNumberDisplayWidget*> DamageNumbersPool; // 0x5c8
};

struct UParticleModuleSpawnBase : UParticleModule {
	char bProcessSpawnRate : 1; // 0x30
	char bProcessBurstList : 1; // 0x30
};

struct UPhysicsCollisionHandler : UObject {
	float ImpactThreshold; // 0x28
	float ImpactReFireDelay; // 0x2c
	USoundBase* DefaultImpactSound; // 0x30
	float LastImpactSoundTime; // 0x38
};

struct ADebugCameraController : APlayerController {
	char bShowSelectedInfo : 1; // 0x588
	char bIsFrozenRendering : 1; // 0x588
	char bIsOrbitingSelectedActor : 1; // 0x588
	char bOrbitPivotUseCenter : 1; // 0x588
	char bEnableBufferVisualization : 1; // 0x588
	char bEnableBufferVisualizationFullMode : 1; // 0x588
	char bIsBufferVisualizationInputSetup : 1; // 0x588
	char bLastDisplayEnabled : 1; // 0x588
	UDrawFrustumComponent* DrawFrustum; // 0x590
	AActor* SelectedActor; // 0x598
	UPrimitiveComponent* SelectedComponent; // 0x5a0
	FHitResult SelectedHitPoint; // 0x5a8
	APlayerController* OriginalControllerRef; // 0x630
	UPlayer* OriginalPlayer; // 0x638
	float SpeedScale; // 0x640
	float InitialMaxSpeed; // 0x644
	float InitialAccel; // 0x648
	float InitialDecel; // 0x64c
};

struct UWBP_PurchaseConfirmationButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnGamepadHover; // 0x528
	UWBP_StoreDiscountTagPriceButton_C* DiscountTag; // 0x530
	UWBP_KeyCallout_C* GamepadPrompt; // 0x538
	UOverlay* GamepadPromptHolder; // 0x540
	UWBP_ButtonStacked_C* MainButton; // 0x548
	UOverlay* PressAndHoldWrapper; // 0x550
	UWBP_StorePriceTag_C* PriceTag; // 0x558
	UImage* ProgressCircle; // 0x560
	UTextBlock* UnlockText; // 0x568
	bool InHoverState; // 0x570
	UPUMG_PortalOffer* PortalOffer; // 0x578
	UPUMG_StoreItemPrice* StorePrice; // 0x580
	FMulticastInlineDelegate PurcaseItemWithPrice; // 0x588
	FMulticastInlineDelegate PurcaseItemWithPortalOffer; // 0x598
	bool IsHoldingConfirm; // 0x5a8
	FMulticastInlineDelegate OnRawClick; // 0x5b0
	int32_t PurchaseQuantity; // 0x5c0
	UPUMG_StoreItem* StoreItem; // 0x5c8
	bool IsSingleAction; // 0x5d0
};

struct APartyBeaconClient : AOnlineBeaconClient {
	FString DestSessionId; // 0x2e0
	FPartyReservation PendingReservation; // 0x2f0
	EClientRequestType RequestType; // 0x340
	bool bPendingReservationSent; // 0x341
	bool bCancelReservation; // 0x342
};

struct UWBP_RogueMasteryPortrait_C : UUserWidget {
	UKSAsyncImage* JobIcon; // 0x238
	UImage* MasteryBorder_1to4; // 0x240
	UImage* MasteryBorder_5to9; // 0x248
	UImage* MasteryBorder_Max; // 0x250
	UWidgetSwitcher* MasteryFrameSwitcher; // 0x258
	UWBP_RogueMasteryIcon_C* MasteryIcon; // 0x260
	AKSPlayerState* PlayerOwner; // 0x268
	UKSJobItem* JobItem; // 0x270
	UKSPersistentPlayerData* PersistentPlayerOwner; // 0x278
};

struct UWBP_BattlePass_Upsell_Button_C : UKSBattlepassUpsellWidgetButton {
	FPointerToUberGraphFrame UberGraphFrame; // 0x580
	UWidgetAnimation* Elite_Button_Focus; // 0x588
	UWidgetAnimation* Base_Button_Focus; // 0x590
	UWidgetAnimation* Confirmation_Elite_Button_Focus; // 0x598
	UWBP_KeyCallout_C* GamepadPrompt; // 0x5a0
	UButton* HitTarget; // 0x5a8
	UOverlay* PressAndHoldWrapper; // 0x5b0
	UImage* ProgressCircle; // 0x5b8
	USizeBox* SizeBox_2; // 0x5c0
	UThrobber* Throbber_117; // 0x5c8
	int32_t ButtonLayoutIndex; // 0x5d0
	FMulticastInlineDelegate OnClickedEvt; // 0x5d8
	UPUMG_StoreItem* MyStoreItem; // 0x5e8
	bool IsHoldingConfirm; // 0x5f0
	UAkAudioEvent* Click Upsell Button SFX; // 0x5f8
	UAkAudioEvent* Hover Upsell Button SFX; // 0x600
	bool Confirm Purchase Active Enabled; // 0x608
	UAkAudioEvent* Click Purchase Upsell Button SFX; // 0x610
	float Text Width; // 0x618
};

struct UDistributionVector : UDistribution {
	char bCanBeBaked : 1; // 0x30
	char bIsDirty : 1; // 0x30
	char bBakedDataSuccesfully : 1; // 0x30
};

struct UPlayerInfoPrevwLoadoutComponent : UPreviewActorLoadoutComponent {
	UKSJobItem* CurrentJob; // 0xb8
	TSoftObjectPtr<UKSJobItem> FailSafeJob; // 0xc0
	TMap<UKSItem*, UKSItem*> SkinMap; // 0xe8
	TWeakObjectPtr<UKSPlayerInfo> WeakPlayerInfo; // 0x138
};

struct UKSOverlayTabHubRouteData : UObject {
	FName RedirectViewName; // 0x28
	UPUMG_Widget* LandingWidgetInView; // 0x30
};

struct UParticleModuleVectorFieldScaleOverLife : UParticleModuleVectorFieldBase {
	UDistributionFloat* VectorFieldScaleOverLife; // 0x30
	FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x38
};

struct AARSharedWorldGameMode : AGameMode {
	int32_t BufferSizePerChunk; // 0x308
};

struct UMovieSceneMediaTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> MediaSections; // 0x58
};

struct UKSActivityRewardCondition_DamageHistoryCount : UKSActivityRewardCondition {
	int32_t MinDamageHistoryEntries; // 0x30
	int32_t MaxDamageHistoryEntries; // 0x34
};

struct UKSCustomizationSelection : UKSWidget {
	TArray<FRogueCustomizationRelatedInfo> RogueCustomizationRelatedInfos; // 0x528
	TArray<EMercCosmeticSlot> ActiveCosmeticSlots; // 0x538
	int32_t TabIndex; // 0x548
};

struct UAnimNotify_PlaySkinnedParticleEffect : UAnimNotify_PlayParticleEffect {
	FName SkinKeyword; // 0x90
};

struct UKSTeamKillTracker : UKSAccoladeTracker {
	TArray<FPlayerTeamTracker> PlayerTeamKillTracker; // 0xa0
	int32_t TeamKillRequirement; // 0xb0
};

struct UBoxReflectionCaptureComponent : UReflectionCaptureComponent {
	float BoxTransitionDistance; // 0x280
	UBoxComponent* PreviewInfluenceBox; // 0x288
	UBoxComponent* PreviewCaptureBox; // 0x290
};

struct UHorizontalBoxSlot : UPanelSlot {
	FMargin Padding; // 0x40
	FSlateChildSize Size; // 0x50
	EHorizontalAlignment HorizontalAlignment; // 0x58
	EVerticalAlignment VerticalAlignment; // 0x59
};

struct UGizmoComponentWorldTransformSource : UGizmoBaseTransformSource {
	USceneComponent* Component; // 0x48
	bool bModifyComponentOnTransform; // 0x50
};

struct UKSWeaponSkeletalMeshComponent : UKSSkeletalMeshComponent {
	bool bApplySkeletalMeshBoundsParameterToMaterials; // 0xda0
	FName SkeletalMeshBoundsParameterName; // 0xda4
	bool bApplySkeletalLengthParameterToMaterials; // 0xdac
	FName SkeletalMeshLengthParameterName; // 0xdb0
	bool bApplySkeletalWidthParameterToMaterials; // 0xdb8
	FName SkeletalMeshWidthParameterName; // 0xdbc
	bool bApplySkeletalHeightParameterToMaterials; // 0xdc4
	FName SkeletalMeshHeightParameterName; // 0xdc8
};

struct UMaterialExpressionViewProperty : UMaterialExpression {
	EMaterialExposedViewProperty Property; // 0x40
};

struct UKSPlayerMod_Charge : UKSPlayerMod {
	bool bIsMultiplier; // 0x330
	float ChargeMultiplier; // 0x334
	bool bIsDiscount; // 0x338
	int32_t ChargeDiscount; // 0x33c
};

struct UKSBTD_DestructibleState : UBTDecorator_BlackboardBase {
	FKSDestructibleStateFilter DestructibleStateFilter; // 0x90
};

struct UBTTask_PlaySound : UBTTaskNode {
	USoundCue* SoundToPlay; // 0x70
};

struct UAISenseConfig_Damage : UAISenseConfig {
	UAISense_Damage* Implementation; // 0x48
};

struct UKSLimitDeployablesRuleComponent : UKSGameRuleComponent {
	uint32_t LimitThreshold; // 0xb0
	bool bLimitPerAsset; // 0xb4
};

struct UKSPlayerMod_StartingEquipment : UKSPlayerMod {
	TSoftObjectPtr<UKSItem> EquipmentAsset; // 0x330
};

struct UPUMG_FriendDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnFriendDataUpdated; // 0x38
	FMulticastInlineDelegate OnFriendAddSuccess; // 0x48
	FMulticastInlineDelegate OnFriendAddError; // 0x58
	FMulticastInlineDelegate FriendInviteReceived; // 0x68
	FMulticastInlineDelegate OnFriendAdded; // 0x78
	FMulticastInlineDelegate OnFriendRejected; // 0x88
	int32_t OnlineFriends; // 0x98
	int32_t TotalFriends; // 0x9c
	TArray<FPUMG_FriendData> CachedFriends; // 0xa0
	TArray<FPUMG_FriendData> CachedPendingFriends; // 0xb0
	TArray<FPUMG_FriendData> CachedFriendRequests; // 0xc0
	float FriendsListUpdatePollInterval; // 0x100
	FTimerHandle FriendsListUpdatePollingTimerHandle; // 0x108
	bool IsFriendsListUpdatePollingEnabled; // 0x110
};

struct UTablet_Animinstance_C : UKSTabletAnimInstance {
	FPointerToUberGraphFrame UberGraphFrame; // 0x360
	FAnimNode_Root AnimGraphNode_Root; // 0x368
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x3a8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x3e0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x418
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x450
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x488
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x510
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x550
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x5d8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x618
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x6a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x6e0
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x768
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x7a8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x868
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x980
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x9b0
	bool Is Fully Opened; // 0x9e0
	bool Is Fully Closed; // 0x9e1
};

struct UWBP_WeaponMilestoneEntry_C : UKSWeaponMilestoneEntry {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UWidgetAnimation* animHover; // 0x530
	UHorizontalBox* CardContent; // 0x538
	UWidgetSwitcher* CardContentStateSwitcher; // 0x540
	UImage* ChallengeBkg_2; // 0x548
	UImage* ChallengeBkg_3; // 0x550
	UWidgetSwitcher* ChallengeBkg_Switcher; // 0x558
	UTextBlock* ChallengeDescription; // 0x560
	UWBP_ProgressEarnedBar_C* ChallengeProgressBar; // 0x568
	UTextBlock* ChallengeProgressText; // 0x570
	UVerticalBox* Content_active; // 0x578
	UButton* HitTarget; // 0x580
	UImage* Image_181; // 0x588
	UImage* Image_370; // 0x590
	UOverlay* Locked; // 0x598
	UOverlay* LockedBkg; // 0x5a0
	UTextBlock* LockedDescription; // 0x5a8
	UTextBlock* LockedTierText; // 0x5b0
	UHorizontalBox* ProgressGroup; // 0x5b8
	UKSAsyncImage* RewardImage; // 0x5c0
	UTextBlock* RewardQtyText; // 0x5c8
	UWidgetSwitcher* RewardSwitcher; // 0x5d0
	UOverlay* Root; // 0x5d8
	UImage* SelectionFrame; // 0x5e0
	UImage* TopLineRule; // 0x5e8
	UOverlay* UnlockedBkg; // 0x5f0
	EChallengeEntry_Card_State CurrentVisualState; // 0x5f8
	FName WeekTableRowName; // 0x5fc
	FActivitySequenceRow CurrentActivitySequence; // 0x608
	FMulticastInlineDelegate OnMilestoneSelected; // 0x638
	UAkAudioEvent* ButtonClickSound; // 0x648
	UAkAudioEvent* ButtonHoverSound; // 0x650
	int32_t MilestoneIndex; // 0x658
};

struct ATemplateSequenceActor : AActor {
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0x228
	UTemplateSequencePlayer* SequencePlayer; // 0x240
	FSoftObjectPath TemplateSequence; // 0x248
	FTemplateSequenceBindingOverrideData BindingOverride; // 0x260
};

struct UWBP_RogueListingOfferPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnHoverAnim; // 0x528
	UVerticalBox* BannerContainer; // 0x530
	UImage* BtnFill; // 0x538
	UImage* BtnStroke; // 0x540
	UWBP_StoreDiscountTag_C* DiscountTag; // 0x548
	UTextBlock* DLCDesc; // 0x550
	UTextBlock* DLCName; // 0x558
	UVerticalBox* DLCNameWrapper; // 0x560
	UWBP_KeyCallout_C* GamepadPrompt; // 0x568
	UImage* Image_326; // 0x570
	UWBP_AsyncIcon_C* ItemImage; // 0x578
	UImage* RarityDecro_2; // 0x580
	UTextBlock* RefundTotal_2; // 0x588
	UBorder* RepRefund; // 0x590
	UWBP_StorePanelButton_C* WBP_StorePanelButton; // 0x598
	UPUMG_StoreItem* StoreItem; // 0x5a0
	FMulticastInlineDelegate OnOfferClicked; // 0x5a8
};

struct UAISenseConfig_Blueprint : UAISenseConfig {
	UAISense_Blueprint* Implementation; // 0x48
};

struct UWBP_PlayerIdentity_Avatar_C : UKSWidget {
	UWBP_AsyncIcon_C* AvatarIcon; // 0x520
};

struct AKSLootDrop : AKSItemDrop {
	int32_t Amount; // 0x3b0
};

struct UDragDropOperation : UObject {
	FString Tag; // 0x28
	UObject* Payload; // 0x38
	UWidget* DefaultDragVisual; // 0x40
	EDragPivot Pivot; // 0x48
	FVector2D Offset; // 0x4c
	FMulticastInlineDelegate OnDrop; // 0x58
	FMulticastInlineDelegate OnDragCancelled; // 0x68
	FMulticastInlineDelegate OnDragged; // 0x78
};

struct UShapeComponent : UPrimitiveComponent {
	UBodySetup* ShapeBodySetup; // 0x430
	UNavAreaBase* AreaClass; // 0x438
	FColor ShapeColor; // 0x440
	char bDrawOnlyIfSelected : 1; // 0x444
	char bShouldCollideWhenPlacing : 1; // 0x444
	char bDynamicObstacle : 1; // 0x444
};

struct UWBP_AmmoCount_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* AmmoActive; // 0x240
	UImage* AmmoInactive; // 0x248
	UTexture2D* AmmoTexture; // 0x250
	UTexture2D* InactiveAmmoTexture; // 0x258
};

struct UPUMG_PopupManager : UPUMG_Widget {
	TArray<FPUMG_PopupConfig> PopupQueue; // 0x4d0
	int32_t m_nPopupId; // 0x4e0
	FText CommittedText; // 0x5c8
};

struct UPUMG_SafeZone : USafeZone {
	bool bBorderLeft; // 0x140
	bool bBorderRight; // 0x141
	bool bBorderTop; // 0x142
	bool bBorderBottom; // 0x143
	bool bForceDrawBorders; // 0x144
};

struct USteamNetConnection : UIpConnection {
	bool bIsPassthrough; // 0x1b20
};

struct UKSActivityRequirement_Experiment : UKSActivityRequirement {
	FString ExperimentName; // 0x30
	bool RequireEnabled; // 0x40
};

struct ULevelSequenceDirector : UObject {
	ULevelSequencePlayer* Player; // 0x28
};

struct AKSDefensePoint : AKSMapPoint {
	AKSObjectiveBase* RelevantObjective; // 0x258
	TArray<AActor*> AssignedDefenders; // 0x260
};

struct UFoliageInstancedStaticMeshComponent : UHierarchicalInstancedStaticMeshComponent {
	FMulticastInlineDelegate OnInstanceTakePointDamage; // 0x680
	FMulticastInlineDelegate OnInstanceTakeRadialDamage; // 0x690
	FGuid GenerationGuid; // 0x6a0
};

struct UGameplayTasksComponent : UActorComponent {
	char bIsNetDirty : 1; // 0xbc
	TArray<UGameplayTask*> SimulatedTasks; // 0xc0
	TArray<UGameplayTask*> TaskPriorityQueue; // 0xd0
	TArray<UGameplayTask*> TickingTasks; // 0xf0
	TArray<UGameplayTask*> KnownTasks; // 0x100
	FMulticastInlineDelegate OnClaimedResourcesChange; // 0x110
};

struct UBakedOcclusionLUT : UObject {
	TSet<uint32_t> LUT; // 0x28
	TArray<uint16_t> OctreeSampleMap; // 0x78
	TArray<FIntVector> OctreeLocations; // 0x88
};

struct ULandscapeSettings : UDeveloperSettings {
	int32_t MaxNumberOfLayers; // 0x38
};

struct ALobbyPlayerController : APGame_PlayerController {
	AHUD* PendingHUDClass; // 0x6b8
};

struct AGeometryCollectionActor : AActor {
	UGeometryCollectionComponent* GeometryCollectionComponent; // 0x220
	UGeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent; // 0x228
};

struct UKSEquipmentManagerComponent : UActorComponent {
	TMap<FGameplayTag, AKSEquipment*> EquippedInventory; // 0xb0
	TArray<AKSEquipment*> SlotlessInventory; // 0x150
	FGameplayTagContainer MultiUseEquipPoints; // 0x160
	TScriptInterface<IKSEquipmentManagerOwner> EquipmentManagerOwner; // 0x180
	FMulticastInlineDelegate OnEquipmentAddedDel; // 0x190
	FMulticastInlineDelegate OnEquipmentRemovedDel; // 0x1b8
	float EmoteCooldownExpireTime; // 0x208
	float QuipCooldownExpireTime; // 0x20c
	float CommunicationCooldownExpireTime; // 0x210
	float RadialMenuItemCooldownExpireTime; // 0x214
};

struct UKSActivityBehavior : UObject {
	TWeakObjectPtr<AKSPlayerController> PlayerController; // 0x28
	TWeakObjectPtr<UKSActivityInstance> WeakActivityInstance; // 0x30
};

struct UPersistentPlayerLoadoutComponent : UPreviewActorLoadoutComponent {
	TMap<UKSItem*, UKSItem*> SkinMap; // 0xc8
	UKSJobItem* JobToUse; // 0x118
};

struct UDistributionVectorParameterBase : UDistributionVectorConstant {
	FName ParameterName; // 0x50
	FVector MinInput; // 0x58
	FVector MaxInput; // 0x64
	FVector MinOutput; // 0x70
	FVector MaxOutput; // 0x7c
	DistributionParamMode ParamModes[0x3]; // 0x88
};

struct UKSNoFlyZoneTracker : UKSAccoladeTracker {
	int32_t QuantityDowns; // 0xa0
	TMap<AKSPlayerState*, int32_t> PlayerDowns; // 0xa8
};

struct AKSGameMode_RoundGame : AKSGameMode {
	bool bRunRespawnAndEliminationLogicBetweenRounds; // 0xf88
	float PostRoundDuration; // 0xf8c
	float FinalPostRoundDuration; // 0xf90
	bool bSkipSelectionCinematicAfterFirstRound; // 0xf94
	FName RoundStateSetupComplete; // 0xf98
	int32_t RoundNumber; // 0xfa0
	int32_t RoundsNeededToWin; // 0xfa4
	int32_t TotalNumberOfRounds; // 0xfa8
	bool bPlayersCanRestartDuringRoundInProgress; // 0xfac
	bool bHoldPlayerRestartUntilFirstRoundSetup; // 0xfad
	bool bWinRoundByElimination; // 0xfae
	bool bAwardPointOnDraw; // 0xfaf
	float RoundSetupTime; // 0xfb0
	float RoundDuration; // 0xfb4
	FName RoundStartPhase; // 0xfb8
	bool bNewPawnOnRoundStart; // 0xfc0
	AKSTeamState* WinByEliminationTeam; // 0xfd0
	int32_t NumberOfConsecutiveLossesToEnableEpicGroupSiteGuarantees; // 0xff4
	bool bKillDownedPlayersAtEndOfRound; // 0xff8
	bool bSpareWinningDownedPlayers; // 0xff9
	EPlayerInfoInventoryRestoreType InventoryRestore; // 0xffb
	bool bAllowPlayersToKeepInventoryBetweenRounds; // 0xffc
	bool bRequirePlayerToBeAlive; // 0xffd
	bool bRequirePlayerToBeStanding; // 0xffe
	bool bRequirePlayerToBeOnWinningTeam; // 0xfff
	bool bSideSwapWipesEquipment; // 0x1000
	bool bRestoreEquipment; // 0x1001
	FGameplayTagQuery InventoryRestoreEquipPointRequirements; // 0x1008
	bool bRestoreSlotlessEquipment; // 0x1050
	bool bRestoreNonEquipment; // 0x1051
	TArray<FInventoryRestoreInfo> GuaranteedInventory; // 0x1058
	int32_t FlipTeamSideFrequency; // 0x1068
	int32_t MaxTeamSideFlipsPerMatch; // 0x106c
	bool bSideSwapClearsConsecutiveLosses; // 0x1070
	int32_t TeamSideFlipsThisMatch; // 0x1074
	int32_t LatestTeamSideFlipRoundNumber; // 0x1078
	bool bBlockWeaponsPostRound; // 0x107c
};

struct UKSMediaPlayerWidget : UKSWidget {
	UDataTable* MediaPlayerPlaylistEntries; // 0x520
	bool bOnlyWatchFirstEntry; // 0x538
};

struct UKSItem : UPlatformInventoryItem {
	TSoftClassPtr<UObject> ItemDropClass; // 0x1b8
	int32_t ItemPrice; // 0x1e0
	FGameplayTag ItemType; // 0x1e4
	bool bUsePreviewIconInfo; // 0x1ec
	UImageIconInfo* PreviewIconInfo; // 0x1f0
	UTexture2D* DefaultItemIcon; // 0x1f8
	TSoftClassPtr<UObject> SpecialItemWidgetClass; // 0x200
	FColor ColorCode; // 0x228
	FPrimaryAssetRules Rules; // 0x22c
	TArray<FGameplayTag> ItemTags; // 0x238
	int32_t AlsoInBundleLootId; // 0x248
};

struct UKSSortableVerticalBox : UVerticalBox {
	FDelegate OnSortCompareChildrenEvent; // 0x138
};

struct UBTTask_RunBehaviorDynamic : UBTTaskNode {
	FGameplayTag InjectionTag; // 0x70
	UBehaviorTree* DefaultBehaviorAsset; // 0x78
	UBehaviorTree* BehaviorAsset; // 0x80
};

struct UAkTVOSInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkAudioSession AudioSession; // 0x90
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0xa0
	FAkAdvancedInitializationSettings AdvancedSettings; // 0xc8
};

struct UBlackboardKeyType_Object : UBlackboardKeyType {
	UObject* BaseClass; // 0x30
};

struct UMaterialExpressionDDY : UMaterialExpression {
	FExpressionInput Value; // 0x40
};

struct UMovieSceneCapture : UObject {
	FSoftClassPath ImageCaptureProtocolType; // 0x38
	FSoftClassPath AudioCaptureProtocolType; // 0x50
	UMovieSceneImageCaptureProtocolBase* ImageCaptureProtocol; // 0x68
	UMovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol; // 0x70
	FMovieSceneCaptureSettings Settings; // 0x78
	bool bUseSeparateProcess; // 0xe8
	bool bCloseEditorWhenCaptureStarts; // 0xe9
	FString AdditionalCommandLineArguments; // 0xf0
	FString InheritedCommandLineArguments; // 0x100
};

struct UWBP_QuickPlay_QueueTypeHeader_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* QueueType; // 0x240
};

struct UParticleModuleAccelerationDragScaleOverLife : UParticleModuleAccelerationBase {
	UDistributionFloat* DragScale; // 0x38
	FRawDistributionFloat DragScaleRaw; // 0x40
};

struct UPCom_SimpleTimecodeProvider : UTimecodeProvider {
	FFrameRate FrameRate; // 0x30
};

struct ULiveLinkComponent : UActorComponent {
	FMulticastInlineDelegate OnLiveLinkUpdated; // 0xb0
};

struct AKSCinematicSequenceManager : AActor {
	ALevelSequenceActor* SequenceActor; // 0x220
	ULevelSequence* Sequence; // 0x228
	TArray<AKSCinematicCharacterManager*> CinematicCharacterHandles; // 0x230
	AKSLobbyCharacter* CinematicCharacterClass; // 0x240
};

struct URecoilProfileAsset : UDataAsset {
	FRecoilProfile RecoilProfile; // 0x30
	bool DontPlayRecoilMontage; // 0x21c
};

struct UKSPlayerJobSelectWidgetBase : UKSWidget {
	UKSJobSelectionManager* JobSelectionManager; // 0x520
	UKSJobSelectionComponent* JobSelectionComponent; // 0x528
	TArray<UJobSelectionEntryDetails*> JobDetailEntries; // 0x530
	EPlayerSelectionState CurrentPlayerSelectionState; // 0x540
	TArray<UJobSelectionEntryDetails*> EnemyJobDetailsEntries; // 0x548
	TWeakObjectPtr<UKSJobSelectionComponent> BoundEnemyJobSelectionComponent; // 0x558
	TWeakObjectPtr<UKSJobSelectionComponent> BoundLocalJobSelectionComponent; // 0x560
};

struct ANavSystemConfigOverride : AActor {
	UNavigationSystemConfig* NavigationSystemConfig; // 0x220
	ENavSystemOverridePolicy OverridePolicy; // 0x228
	char bLoadOnClient : 1; // 0x229
};

struct UGranularSynth : USynthComponent {
	USoundWave* GranulatedSoundWave; // 0x6e0
};

struct UKSLOSEvaluator : UKSActorEvaluator {
	bool MatchOnLOSBlocked; // 0x28
	ECollisionChannel LOSChannel; // 0x29
};

struct UDatasmithStaticMeshIFCImportData : UDatasmithStaticMeshImportData {
	FString SourceGlobalId; // 0x28
};

struct AWaypointBeacon_C : AKSPingBeaconBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x2e0
	UParticleSystemComponent* ParticleSystem; // 0x2e8
};

struct UBTDecorator_CheckGameplayTagsOnActor : UBTDecorator {
	FBlackboardKeySelector ActorToCheck; // 0x68
	EGameplayContainerMatchType TagsToMatch; // 0x90
	FGameplayTagContainer GameplayTags; // 0x98
	FString CachedDescription; // 0xb8
};

struct ALevelVariantSetsActor : AActor {
	FSoftObjectPath LevelVariantSets; // 0x220
};

struct UKSAcquisitionManager : UPUMG_AcquisitionManager {
	FMulticastInlineDelegate OnAcquisitionReady; // 0x58
	TArray<UKSAcquisition*> QueuedAcquisitions; // 0x78
	UKSAcquisition* PendingAcquisition; // 0x88
	TArray<UKSEquipOnAcquisitionData*> PendingEquipables; // 0x90
};

struct UComboButtonWidgetStyle : USlateWidgetStyleContainerBase {
	FComboButtonStyle ComboButtonStyle; // 0x30
};

struct USlateVectorArtData : UObject {
	TArray<FSlateMeshVertex> VertexData; // 0x28
	TArray<uint32_t> IndexData; // 0x38
	UMaterialInterface* Material; // 0x48
	FVector2D ExtentMin; // 0x50
	FVector2D ExtentMax; // 0x58
};

struct UMaterialExpressionMaterialFunctionCall : UMaterialExpression {
	UMaterialFunctionInterface* MaterialFunction; // 0x40
	FMaterialParameterInfo FunctionParameterInfo; // 0x48
};

struct UMovieScenePropertyTrack : UMovieSceneNameableTrack {
	UMovieSceneSection* SectionToKey; // 0x58
	FName PropertyName; // 0x60
	FString PropertyPath; // 0x68
	TArray<UMovieSceneSection*> Sections; // 0x78
};

struct UKSJobSelectionRules_Casual : UKSJobSelectionRules {
	float TimeToPick; // 0xd8
};

struct AKSProjectile_ProximityGrenade : AKSProjectile_Grenade {
	UKSProximityComponent* ProximityComponent; // 0x9f8
	bool bInitializeProximityCheckingOnStopped; // 0xa00
};

struct UKSFloatTickLerpWidgetBase : UUserWidget {
	FMulticastInlineDelegate OnLerpComplete; // 0x238
	float LerpTime; // 0x248
	float LerpPower; // 0x24c
};

struct UMaterialBillboardComponent : UPrimitiveComponent {
	TArray<FMaterialSpriteElement> Elements; // 0x430
};

struct UMovieSceneVectorSection : UMovieSceneSection {
	FMovieSceneFloatChannel Curves[0x4]; // 0xe0
	int32_t ChannelsUsed; // 0x360
};

struct UTickAnimationManager : UObject {
	TMap<FName, FTickAnimationParams> AnimsByName; // 0x28
};

struct UWBP_LoginRewardItem_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ClaimAnim; // 0x528
	UImage* BorderGlow; // 0x530
	UImage* ClaimedBottomDecro; // 0x538
	UImage* ClaimedBottomDecro_2; // 0x540
	UImage* ClaimedCheckmarkEpic; // 0x548
	UImage* ClaimedCheckmarkLegendary; // 0x550
	UImage* ClaimedCheckmarkRare; // 0x558
	UWidgetSwitcher* ClaimedCheckmarkSwitcher; // 0x560
	UImage* ClaimedCheckmarkUncommon; // 0x568
	UImage* ClaimedDimmer; // 0x570
	UOverlay* ClaimedOverlay; // 0x578
	UOverlay* CurrentReward; // 0x580
	UImage* EdgeFlareLeft; // 0x588
	UImage* EdgeFlareRight; // 0x590
	UOverlay* EffectContainer; // 0x598
	UImage* Gradient; // 0x5a0
	UButton* HitTarget; // 0x5a8
	UImage* IconOverlayGlow; // 0x5b0
	UBorder* RewardLabel; // 0x5b8
	UTextBlock* RewardLabelText; // 0x5c0
	UImage* RewardStroke; // 0x5c8
	UImage* SelectedGlow; // 0x5d0
	UImage* UnclaimedDimmer; // 0x5d8
	UOverlay* UnclaimedOverlay; // 0x5e0
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay; // 0x5e8
	FMulticastInlineDelegate ClaimAnimationComplete; // 0x5f0
	FLoginRewardItem RewardItem; // 0x600
	float AnimationCompleteDelay; // 0x610
	TMap<int32_t, UDataTable*> CustomRarity; // 0x618
	bool AllowToClaim; // 0x668
	FMulticastInlineDelegate OnRewardHovered; // 0x670
	FMulticastInlineDelegate OnRewardUnhovered; // 0x680
	UAkAudioEvent* AKHoverRewardListEntry; // 0x690
	FMulticastInlineDelegate OnRewardClicked; // 0x698
	FGameplayTagContainer CustomRarityTag; // 0x6a8
};

struct UCensorTable : UObject {
	FSoftObjectPath CensorTablePath; // 0x28
};

struct UKSPlayerMod_DamageTaken : UKSPlayerMod {
	TArray<UDamageType*> ValidDamageTypes; // 0x330
	TArray<EHitLocationType> ValidHitLocations; // 0x340
	float DamageTakenMultiplier; // 0x350
	TSoftObjectPtr<UParticleSystem> DamageTakenParticle; // 0x358
	bool ImmuneToNonDamageEffects; // 0x380
	bool NotifyDamageReduction; // 0x381
	TSoftObjectPtr<UAkAudioEvent> HitBodyAudioEvent; // 0x388
	TSoftObjectPtr<UAkAudioEvent> HitHeadAudioEvent; // 0x3b0
	TSoftObjectPtr<UAkAudioEvent> HitByAudioEvent; // 0x3d8
};

struct UWBP_MatchSummary_StatEntry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* StatNameText; // 0x528
	UTextBlock* StatValueText; // 0x530
	bool NewVar_1; // 0x538
	FText StatName; // 0x540
	FText StatValue; // 0x558
};

struct UKSBTTask_SetWaypointDefenseTimer : UBTTaskNode {
	FBlackboardKeySelector WayPoint; // 0x70
	FBlackboardKeySelector DefenseTimer; // 0x98
};

struct UKSShopSoundLibrary : UKSUISoundLibrary {
	UAkAudioEvent* ShopOpen; // 0x28
	UAkAudioEvent* ShopClose; // 0x30
	UAkAudioEvent* PurchaseSucceeded; // 0x38
	UAkAudioEvent* PurchaseFailed; // 0x40
};

struct UNetworkSettings : UDeveloperSettings {
	char bVerifyPeer : 1; // 0x38
	char bEnableMultiplayerWorldOriginRebasing : 1; // 0x38
	int32_t MaxRepArraySize; // 0x3c
	int32_t MaxRepArrayMemory; // 0x40
	TArray<FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x48
};

struct UWBP_StandardButtonSmall_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowButton; // 0x528
	UWidgetAnimation* OnClick; // 0x530
	UWidgetAnimation* Highlight; // 0x538
	UImage* BtnBkg; // 0x540
	UImage* BtnBkgHover; // 0x548
	UImage* BtnBkgRedButton; // 0x550
	UImage* BtnClickImage; // 0x558
	UImage* BtnEdge; // 0x560
	UImage* BtnEdgeHover; // 0x568
	UImage* BtnFrame; // 0x570
	UImage* BtnFrameHover; // 0x578
	UOverlay* BtnStandardWrapper; // 0x580
	UTextBlock* ButtonText; // 0x588
	UButton* HitTarget; // 0x590
	UOverlay* HoverWrapper; // 0x598
	UImage* KeyPrompt; // 0x5a0
	UCanvasPanel* KeyPromptContainer; // 0x5a8
	USizeBox* SizeWrapper; // 0x5b0
	FMulticastInlineDelegate OnClicked; // 0x5b8
	FMulticastInlineDelegate OnHovered; // 0x5c8
	FMulticastInlineDelegate OnUnhovered; // 0x5d8
	FText DefaultButtonText; // 0x5e8
	float DefaultWidth; // 0x600
	bool ShowPromptOnFocus; // 0x604
	bool IsRedButton; // 0x605
	float DefaultHeight; // 0x608
	UAkAudioEvent* ClickSmallBtnSFX; // 0x610
	UAkAudioEvent* HoverSmallBtnSFX; // 0x618
	FKey PromptKey; // 0x620
	bool IsConfirm; // 0x638
	bool IsCancel; // 0x639
};

struct UVideoCaptureProtocol : UFrameGrabberProtocol {
	bool bUseCompression; // 0x68
	float CompressionQuality; // 0x6c
};

struct UInterpTrackInstVectorMaterialParam : UInterpTrackInst {
	TArray<UMaterialInstanceDynamic*> MaterialInstances; // 0x28
	TArray<FVector> ResetVectors; // 0x38
	TArray<FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48
	UInterpTrackVectorMaterialParam* InstancedTrack; // 0x58
};

struct UTracerStaticMeshComponent : UStaticMeshComponent {
	FVector start; // 0x4f0
	FVector end; // 0x4fc
	float TravelSpeed; // 0x508
	bool bDestroyOnDestinationReached; // 0x50c
	bool bEnableTravel; // 0x50d
	FMulticastInlineDelegate OnTracerParticleReachedDestiniationDel; // 0x510
};

struct UGuidedMenuCalloutsViewRedirector : UPUMG_ViewRedirecter {
	UDataTable* GuidedCalloutsTable; // 0x28
};

struct UKSModInst_PilotOnActivation : UKSModInst_Activated {
	float RepossessionDelay; // 0x478
	float VehicleDestroyDelay; // 0x47c
	bool bDisplayTransitionPPE; // 0x480
	FKSSpecialEffect TransitionPPE; // 0x488
	bool bDisplayFadeOnUnpossessCharacter; // 0x4d8
	float FadeOnUnpossessDuration; // 0x4dc
	bool bRestrictCharacterRotation; // 0x4e0
	bool bShouldCrouchOnActivation; // 0x4e1
	TArray<UKSPlayerMod*> ModsToGive; // 0x4e8
	AKSVehicleBase* SpawnedVehicle; // 0x508
	bool bIsVehiclePossessed; // 0x510
	TArray<AActor*> DeployableActors; // 0x518
};

struct UMovieSceneParticleTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> ParticleSections; // 0x58
};

struct AKSDestructibleBase : AActor {
	bool bRenderTrueCollisionUntilDestruction; // 0x228
	USceneComponent* SceneRoot; // 0x230
	UDestructibleComponent* VisualMesh; // 0x238
	UStaticMeshComponent* TrueCollision; // 0x240
	UBoxComponent* SpeedOverlap; // 0x248
	bool bAllowDestructibleMeshSimulation; // 0x250
	bool bAllowPlayerToWalkOnSurface; // 0x251
	bool bAllowDestructionAudio; // 0x252
	UAkAudioEvent* DefaultDestructionEvent; // 0x258
	bool bSpawnBreakParticleAtActorLocation; // 0x260
	UParticleSystem* BreakParticles; // 0x268
	UParticleSystem* ImpactParticles; // 0x270
	UParticleSystem* FakeHitDecalParticle; // 0x278
	UCameraShake* CharacterSpeedOverlapCameraShake; // 0x280
	FMulticastInlineDelegate OnDestructibleDestroyed; // 0x288
	float MaxHealth; // 0x298
	float Health; // 0x29c
	float LocalHealth; // 0x2a0
	bool bResetOnRoundChange; // 0x2a4
	bool bAllowsWeaponPenetration; // 0x2a5
	bool bCanBreakWithSpeed; // 0x2a6
	bool bAllProjectilesInstantBreak; // 0x2a7
	float SpeedBreakThreshold; // 0x2a8
	bool bTransparentDestructible; // 0x2ac
	TMap<EDamageCategory, float> DamageTypeMultipliers; // 0x2b0
	float BreakingDamage; // 0x300
	float BreakingImpulse; // 0x304
	bool bUseRadialDestruction; // 0x308
	float BreakingRadius; // 0x30c
	float ImpactImpulseOffset; // 0x310
	bool bIgnoreCharacterVerticalSpeed; // 0x314
	float BadDestroyCheckTime; // 0x318
	float EventlessDestroyWaitTime; // 0x31c
	bool MeshDestroyed; // 0x320
	UPhysicalMaterial* PhysicalMaterialOverride; // 0x328
	UDestructibleMesh* MeshAsset; // 0x330
	FVector LastHitLocation; // 0x338
	FVector LastHitDirection; // 0x344
	FVector LastHitNormal; // 0x350
	TArray<UParticleSystemComponent*> FakeHitDecals; // 0x360
	UKSItemStimuliSourceComponent* StimuliSourceComponent; // 0x380
};

struct UParticleModuleTypeDataGpu : UParticleModuleTypeDataBase {
	FGPUSpriteEmitterInfo EmitterInfo; // 0x30
	FGPUSpriteResourceData ResourceData; // 0x2b0
	float CameraMotionBlurAmount; // 0x410
	char bClearExistingParticlesOnInit : 1; // 0x414
};

struct UKSModInst_FilterComponent : UKSPlayerModInstance {
	FMulticastInlineDelegate OnFilterActorAddedDel; // 0x1b8
	FMulticastInlineDelegate OnFilterActorRemovedDel; // 0x1c8
	FKSActorFilterConfig ActorFilterConfig; // 0x1d8
	UKSActorFilterComponent* ManagedFilterComponent; // 0x200
};

struct UFoliageType_InstancedStaticMesh : UFoliageType {
	UStaticMesh* Mesh; // 0x360
	TArray<UMaterialInterface*> OverrideMaterials; // 0x368
	UFoliageInstancedStaticMeshComponent* ComponentClass; // 0x378
};

struct UWBP_StoreButtonMedium_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* SlideLeftToPrimary; // 0x528
	UWidgetAnimation* SlideLeftToSecondary; // 0x530
	UWBP_StoreItemInterior_C* PrimaryStoreItem; // 0x538
	UWBP_StoreItemInterior_C* SecondaryStoreItem; // 0x540
	UWBP_StoreItemRotator_C* StoreItemRotator; // 0x548
	UWBP_StorePanelButton_C* WBP_StorePanelButton; // 0x550
	UKSStoreSectionItem* MyStoreSection; // 0x558
	int32_t CurrentStoreIndex; // 0x560
	bool IsRotating; // 0x564
	float TimeVisible; // 0x568
	float MaxTimeVisible; // 0x56c
	float NewVar_1; // 0x570
	float ROTATION_TIMER_INTERVAL; // 0x574
};

struct UKSBTD_CompareKeyToObjective : UBTDecorator_BlackboardBase {
	UKSBTObjective* Objective; // 0x90
};

struct UKSWeaponPropManagerComponent : UActorComponent {
	TArray<FActiveWeaponProp> ActiveNamelessProps; // 0x188
	TMap<FPropIdentifier, FActiveWeaponProp> ActiveProps; // 0x198
	TMap<FPropIdentifier, FLegacyWeaponProp> LegacyProps; // 0x1e8
	bool bAllowAnimNotifyStatesToCreatePropSpawners; // 0x288
};

struct UWBP_WeaponMasteryTrack_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* MasteryLevel; // 0x528
	UWBP_MasteryPointsCount_C* WBP_MasteryPointsCount; // 0x530
	UWBP_WeaponMasteryTrackSection_C* WeaponMasterySection; // 0x538
	UHorizontalBox* XPWrapper; // 0x540
	FMulticastInlineDelegate OnMasteryLevelSelectedEvent; // 0x548
	FMulticastInlineDelegate OnPrestiegeSelected; // 0x558
};

struct UMaterialParameterCollection : UObject {
	FGuid StateId; // 0x28
	TArray<FCollectionScalarParameter> ScalarParameters; // 0x38
	TArray<FCollectionVectorParameter> VectorParameters; // 0x48
};

struct USourceEffectChorusPreset : USoundEffectSourcePreset {
	FSourceEffectChorusSettings Settings; // 0x80
};

struct UKSSettingsColorOptionsAsset : UDataAsset {
	TArray<FColorOptions> ColorOptions; // 0x30
};

struct UWBP_CustomizeTitle_C : UKSPlayerCosmeticWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowAnim; // 0x528
	UKSSortableGridPanel* ItemContainer; // 0x530
	UScrollBox* ScrollBox_1; // 0x538
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_1; // 0x540
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_2; // 0x548
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_3; // 0x550
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_4; // 0x558
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_5; // 0x560
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_6; // 0x568
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_7; // 0x570
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_8; // 0x578
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_9; // 0x580
	UWBP_CosmeticItem_Title_C* WBP_CosmeticItem_Title_C_10; // 0x588
	UWBP_PlayerIDCustomize_C* WBP_PlayerIDCustomize; // 0x590
	FMargin EntryPadding; // 0x598
	TArray<UWBP_CosmeticItem_Title_C*> TitleItems; // 0x5a8
	UWBP_CosmeticItem_Title_C* EquippedTitle; // 0x5b8
	UKSLoadoutDataFactory* LoadoutDataFactory; // 0x5c0
	UPlatformInventoryItem* HoveredItem; // 0x5c8
	int32_t VisibleGridRows; // 0x5d0
	int32_t VisibleGridColumns; // 0x5d4
};

struct UMaterialExpressionCurveAtlasRowParameter : UMaterialExpressionScalarParameter {
	UCurveLinearColor* Curve; // 0x60
	UCurveLinearColorAtlas* Atlas; // 0x68
	FExpressionInput InputTime; // 0x70
};

struct UWBP_ChallengeEntry_Event_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animHover; // 0x528
	UHorizontalBox* CardContent; // 0x530
	UImage* ChallengeBkg_2; // 0x538
	UImage* ChallengeBkg_4; // 0x540
	UImage* ChallengeBkg_Complete; // 0x548
	UWidgetSwitcher* ChallengeBkg_Switcher; // 0x550
	UWidgetSwitcher* ChallengeContentSwitcher; // 0x558
	UTextBlock* ChallengeDescription; // 0x560
	UWBP_ProgressEarnedBar_C* ChallengeProgressBar; // 0x568
	UTextBlock* ChallengeProgressText; // 0x570
	UOverlay* CompletedChallengeBG; // 0x578
	UImage* CompletedCheck; // 0x580
	UOverlay* CompletedIcons; // 0x588
	UVerticalBox* Content_active; // 0x590
	USizeBox* HeightControl; // 0x598
	UButton* HitTarget; // 0x5a0
	UImage* Image; // 0x5a8
	UImage* Image_390; // 0x5b0
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE; // 0x5b8
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE_01; // 0x5c0
	UHorizontalBox* RewardsActive; // 0x5c8
	UWidgetSwitcher* RewardSwitcher; // 0x5d0
	UImage* SelectionFrame; // 0x5d8
	EChallengeEntry_Card_State CurrentVisualState; // 0x5e0
	FActivitySequenceRow CurrentActivitySequence; // 0x5e8
	FMulticastInlineDelegate OnClicked; // 0x618
	UAkAudioEvent* ButtonClickSound; // 0x628
	UAkAudioEvent* ButtonHoverSound; // 0x630
	float Height; // 0x638
	UKSActivityInstance* Displayed Challenge; // 0x640
	float RewardScale; // 0x648
};

struct UKSRadialMenuItem : UKSItem {
	TSoftClassPtr<UObject> RadialMenuItemInstanceClass; // 0x258
	TArray<FSoftDataTableInfo> AssetDataTables; // 0x280
	TArray<TSoftObjectPtr<UKSJobItem>> JobAllowList; // 0x290
	float GlobalRadialMenuItemCooldownTime; // 0x2a0
	ERadialMenuItemInterruptNotifyBehaviorType InterruptNotifyBehavior; // 0x2a4
	float RadialMenuItemIsPlayingTimeout; // 0x2a8
	FKSRadialMenuItemInterruptRules InterruptRules; // 0x2ac
	bool bLockPawnRotationWhilePlaying; // 0x2b0
	EKSEmotion Emotion; // 0x2b1
};

struct UParticleLODLevel : UObject {
	int32_t Level; // 0x28
	char bEnabled : 1; // 0x2c
	UParticleModuleRequired* RequiredModule; // 0x30
	TArray<UParticleModule*> Modules; // 0x38
	UParticleModuleTypeDataBase* TypeDataModule; // 0x48
	UParticleModuleSpawn* SpawnModule; // 0x50
	UParticleModuleEventGenerator* EventGenerator; // 0x58
	TArray<UParticleModuleSpawnBase*> SpawningModules; // 0x60
	TArray<UParticleModule*> SpawnModules; // 0x70
	TArray<UParticleModule*> UpdateModules; // 0x80
	TArray<UParticleModuleOrbit*> OrbitModules; // 0x90
	TArray<UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xa0
	char ConvertedModules : 1; // 0xb0
	int32_t PeakActiveParticles; // 0xb4
};

struct UHapticFeedbackEffect_Buffer : UHapticFeedbackEffect_Base {
	TArray<char> Amplitudes; // 0x28
	int32_t SampleRate; // 0x38
};

struct UKSPlayerMod_Undetectable : UKSPlayerMod {
	FKSPlayerModOverridePropertyStatBool HiddenFromReveals; // 0x330
	FKSPlayerModOverridePropertyStatBool HiddenOnRadar; // 0x33c
	FKSPlayerModOverridePropertyStatBool HiddenFromRemoteExplosives; // 0x348
	FKSPlayerModOverridePropertyStatBool HiddenFromThermal; // 0x354
	FKSPlayerModOverridePropertyStatBool HiddenFromShotDetection; // 0x360
	FKSPlayerModOverridePropertyStatBool HideFootprints; // 0x36c
	FKSPlayerModOverridePropertyStatBool Camouflaged; // 0x378
	FKSPlayerModOverridePropertyStatFloat RevealTimeMultiplier; // 0x384
};

struct ASwitchActor : AActor {
	USceneComponent* SceneComponent; // 0x238
	int32_t LastSelectedOption; // 0x240
};

struct UMaterialExpressionStaticBool : UMaterialExpression {
	char Value : 1; // 0x40
};

struct UParticleModuleLight : UParticleModuleLightBase {
	bool bUseInverseSquaredFalloff; // 0x30
	bool bAffectsTranslucency; // 0x31
	bool bPreviewLightRadius; // 0x32
	float SpawnFraction; // 0x34
	FRawDistributionVector ColorScaleOverLife; // 0x38
	FRawDistributionFloat BrightnessOverLife; // 0x80
	FRawDistributionFloat RadiusScale; // 0xb0
	FRawDistributionFloat LightExponent; // 0xe0
	FLightingChannels LightingChannels; // 0x110
	float VolumetricScatteringIntensity; // 0x114
	bool bHighQualityLights; // 0x118
	bool bShadowCastingLights; // 0x119
};

struct UKSActivityRewardCondition_Sequence : UKSActivityRewardCondition {
	FName ActivitySequenceName; // 0x30
	UDataTable* ActivitySequenceTable; // 0x38
};

struct UWBP_subscreen_header_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Image_65; // 0x240
	UImage* Image_219; // 0x248
	UTextBlock* TextBlock_126; // 0x250
	FText HeaderText; // 0x258
};

struct UCheckbox_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetSwitcher* background; // 0x528
	UImage* Check; // 0x530
	UButton* HitTarget; // 0x538
	UImage* Hovered; // 0x540
	UImage* Unhovered; // 0x548
	bool Checked; // 0x550
	FMulticastInlineDelegate OnCheckChanged; // 0x558
	UAkAudioEvent* HoverCheckboxSFX; // 0x568
	UAkAudioEvent* ClickCheckboxSFX; // 0x570
};

struct UMorphTarget : UObject {
	USkeletalMesh* BaseSkelMesh; // 0x28
};

struct ULocalPlayer : UPlayer {
	UGameViewportClient* ViewportClient; // 0x70
	EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0x94
	APlayerController* PendingLevelPlayerControllerClass; // 0x98
	char bSentSplitJoin : 1; // 0xa0
	int32_t ControllerId; // 0xb8
};

struct UCameraComponent : USceneComponent {
	float FieldOfView; // 0x208
	float OrthoWidth; // 0x20c
	float OrthoNearClipPlane; // 0x210
	float OrthoFarClipPlane; // 0x214
	float AspectRatio; // 0x218
	float MaxAspectRatio; // 0x21c
	char bConstrainAspectRatio : 1; // 0x220
	char bUseFieldOfViewForLOD : 1; // 0x220
	char bLockToHmd : 1; // 0x220
	char bUsePawnControlRotation : 1; // 0x220
	ECameraProjectionMode ProjectionMode; // 0x221
	float PostProcessBlendWeight; // 0x260
	FPostProcessSettings PostProcessSettings; // 0x290
};

struct UMaterialExpressionIf : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	FExpressionInput AGreaterThanB; // 0x68
	FExpressionInput AEqualsB; // 0x7c
	FExpressionInput ALessThanB; // 0x90
	float EqualsThreshold; // 0xa4
	float ConstB; // 0xa8
	float ConstAEqualsB; // 0xac
};

struct UWBP_BattlePassAcquisitionTitle_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* BattlePassSeasonName; // 0x528
	UImage* Image; // 0x530
	UImage* Image_183; // 0x538
	UImage* Image_533; // 0x540
	UTextBlock* TitleText; // 0x548
	UWidgetSwitcher* TypeSwitcher; // 0x550
	UTextBlock* UpsellSubtitle; // 0x558
	UWBP_BattlePassEmblem_C* WBP_BattlePassEmblem; // 0x560
};

struct USlateBrushAsset : UObject {
	FSlateBrush Brush; // 0x28
};

struct UKSHoveringInteractorManagerComponent : UActorComponent {
	FMulticastInlineDelegate OnHoveringInteractorsChanged; // 0xb0
	TArray<AActor*> HoveringInteractors; // 0xc0
};

struct UKSInteractableComponent : UActorComponent {
	int32_t InteractionPriority; // 0xb0
};

struct UOverlaySlot : UPanelSlot {
	FMargin Padding; // 0x40
	EHorizontalAlignment HorizontalAlignment; // 0x50
	EVerticalAlignment VerticalAlignment; // 0x51
};

struct UNiagaraPreviewAxis_InterpParamVector : UNiagaraPreviewAxis_InterpParamBase {
	FVector Min; // 0x38
	FVector Max; // 0x44
};

struct UKSPlayerMod_AdjustCashRewards : UKSPlayerMod {
	int32_t BonusCashPerDown; // 0x330
};

struct UKSGameShopItemComponent_Job : UKSGameShopItemComponent {
	EKSGameShopJobItemType GameShopJobItemType; // 0x130
	UKSJobItem* JobItem; // 0x138
};

struct UBTDecorator_DoesPathExist : UBTDecorator {
	FBlackboardKeySelector BlackboardKeyA; // 0x68
	FBlackboardKeySelector BlackboardKeyB; // 0x90
	char bUseSelf : 1; // 0xb8
	EPathExistanceQueryType PathQueryType; // 0xbc
	UNavigationQueryFilter* FilterClass; // 0xc0
};

struct ULightmassPrimitiveSettingsObject : UObject {
	FLightmassPrimitiveSettings LightmassSettings; // 0x28
};

struct UMaterialExpressionMin : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	float ConstA; // 0x68
	float ConstB; // 0x6c
};

struct UKSGameUserSettingsDefault : UObject {
	TArray<FSettingConfigPair> SettingsConfig; // 0x28
};

struct UNiagaraPrecompileContainer : UObject {
	TArray<UNiagaraScript*> Scripts; // 0x28
	UNiagaraSystem* System; // 0x38
};

struct UKSPlayerMod_HealOnEvent : UKSPlayerMod {
	bool bHealUpTo; // 0x330
	bool bHealAsPercentage; // 0x331
	float HealthPercentage; // 0x334
	float HealthAmount; // 0x338
	float HealDelay; // 0x33c
	float HealPeriod; // 0x340
	int32_t HealTickCount; // 0x344
	bool bFirstTickImmediately; // 0x348
};

struct UKSWeaponAttachment_ScopeMultiply : UKSWeaponAttachment_Scope {
	float ScopeMultiplier; // 0x2f8
};

struct UKSNewsRotatorWidget : UKSWidget {
	FString JsonSection; // 0x520
	float TimePerSection; // 0x530
};

struct UKSWhatsNewPanel : UKSJsonData {
	FText Header; // 0x80
	FText SubHeader; // 0x98
	ENewsHeaderAlignment HeaderAlignment; // 0xb0
	TArray<FSubPanel> SubPanels; // 0xb8
	ESubPanelAlignment Alignment; // 0xc8
	int32_t BgBoxOpacity; // 0xcc
	UTexture2DDynamic* Image; // 0xd0
	FString URL; // 0xd8
};

struct UARSessionConfig : UDataAsset {
	bool bGenerateMeshDataFromTrackedGeometry; // 0x30
	bool bGenerateCollisionForMeshData; // 0x31
	bool bGenerateNavMeshForMeshData; // 0x32
	bool bUseMeshDataForOcclusion; // 0x33
	bool bRenderMeshDataInWireframe; // 0x34
	bool bTrackSceneObjects; // 0x35
	bool bUsePersonSegmentationForOcclusion; // 0x36
	EARWorldAlignment WorldAlignment; // 0x37
	EARSessionType SessionType; // 0x38
	EARPlaneDetectionMode PlaneDetectionMode; // 0x39
	bool bHorizontalPlaneDetection; // 0x3a
	bool bVerticalPlaneDetection; // 0x3b
	bool bEnableAutoFocus; // 0x3c
	EARLightEstimationMode LightEstimationMode; // 0x3d
	EARFrameSyncMode FrameSyncMode; // 0x3e
	bool bEnableAutomaticCameraOverlay; // 0x3f
	bool bEnableAutomaticCameraTracking; // 0x40
	bool bResetCameraTracking; // 0x41
	bool bResetTrackedObjects; // 0x42
	TArray<UARCandidateImage*> CandidateImages; // 0x48
	int32_t MaxNumSimultaneousImagesTracked; // 0x58
	EAREnvironmentCaptureProbeType EnvironmentCaptureProbeType; // 0x5c
	TArray<char> WorldMapData; // 0x60
	TArray<UARCandidateObject*> CandidateObjects; // 0x70
	FARVideoFormat DesiredVideoFormat; // 0x80
	EARFaceTrackingDirection FaceTrackingDirection; // 0x8c
	EARFaceTrackingUpdate FaceTrackingUpdate; // 0x8d
	TArray<char> SerializedARCandidateImageDatabase; // 0x90
	EARSessionTrackingFeature EnabledSessionTrackingFeature; // 0xa0
};

struct UWBP_navtab_C : UKSNavTabWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x560
	UWidgetAnimation* Unhover; // 0x568
	UWidgetAnimation* Selected; // 0x570
	UWidgetAnimation* Hovered; // 0x578
	UImage* BackFill; // 0x580
	UImage* BackFill_Free; // 0x588
	UImage* BackFill_Holiday; // 0x590
	UImage* BackFill_Premium; // 0x598
	UImage* BottomEdge; // 0x5a0
	UImage* BottomEdge_Free; // 0x5a8
	UImage* BottomEdge_Holiday; // 0x5b0
	UImage* BottomEdge_Premium; // 0x5b8
	UOverlay* Container; // 0x5c0
	UImage* DividerLeft; // 0x5c8
	UImage* DividerRight; // 0x5d0
	UImage* LockIcon; // 0x5d8
	UImage* LockIcon_2; // 0x5e0
	UImage* LockIcon_3; // 0x5e8
	UImage* LockIcon_4; // 0x5f0
	UImage* SelectedGradient; // 0x5f8
	UImage* SelectedGradient_Free; // 0x600
	UImage* SelectedGradient_Holiday; // 0x608
	UImage* SelectedGradient_Premium; // 0x610
	UImage* SnowMaterial; // 0x618
	UButton* TabButton; // 0x620
	UWidgetSwitcher* TabColorSwitcher; // 0x628
	UTextBlock* text_TabFree; // 0x630
	UTextBlock* text_TabHoliday; // 0x638
	UTextBlock* text_TabPremium; // 0x640
	UTextBlock* text_TabStandard; // 0x648
	TSoftClassPtr<UObject> CalloutClass; // 0x650
	UWidget* CalloutWidget; // 0x678
	EHorizontalAlignment CalloutWidget_HorizontalAlignment; // 0x680
	EVerticalAlignment CalloutWidget_VerticalAlignment; // 0x681
	FMargin CalloutWidget_Padding; // 0x684
	UAkAudioEvent* HoverSubscreenNavTabSFX; // 0x698
	UAkAudioEvent* ClickSubscreenNavTabSFX; // 0x6a0
	bool UsesBattlePassColoring; // 0x6a8
	bool UsesHolidayColoring; // 0x6a9
};

struct UWBP_WeaponCategoryMasteryBadge_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWBP_AsyncIcon_C* Mastered; // 0x240
	UWBP_AsyncIcon_C* Standard; // 0x248
	UWidgetSwitcher* WidgetSwitcher_74; // 0x250
};

struct UTireConfig : UDataAsset {
	float FrictionScale; // 0x30
	TArray<FTireConfigMaterialFriction> TireFrictionScales; // 0x38
};

struct UWBP_RogueCustomizationSelector_C : UKSCustomizationSelection {
	FPointerToUberGraphFrame UberGraphFrame; // 0x550
	UWidgetAnimation* Show; // 0x558
	UTextBlock* ActionBtnText; // 0x560
	UKSSortableGridPanel* CommunicationCosmeticItemContainer; // 0x568
	UKSScrollBox* CommunicationScrollbox; // 0x570
	UHorizontalBox* CompleteCosmeticSlotNavBar; // 0x578
	UWidgetSwitcher* CosmeticSwitcher; // 0x580
	UKSSortableGridPanel* EmoteCosmeticItemContainer; // 0x588
	UKSScrollBox* EmoteScrollbox; // 0x590
	UWBP_ButtonStacked_C* EquipCosmeticBtn; // 0x598
	UImage* EquippedGamepadIcon; // 0x5a0
	UImage* FakeFill; // 0x5a8
	UKSSortableGridPanel* OutfitCosmeticItemContainer; // 0x5b0
	UKSScrollBox* OutfitScrollbox; // 0x5b8
	UKSSortableGridPanel* QuipCosmeticItemContainer; // 0x5c0
	UKSScrollBox* QuipScrollbox; // 0x5c8
	UKSAsyncImage* RogueIcon; // 0x5d0
	UKSSortableGridPanel* SprayCosmeticItemContainer; // 0x5d8
	UWBP_AsyncIcon_C* SprayImage; // 0x5e0
	USizeBox* SprayImageContainer; // 0x5e8
	UKSScrollBox* SprayScrollbox; // 0x5f0
	UImage* TabLeftButtonImage; // 0x5f8
	UImage* TabRightButtonImage; // 0x600
	UWBP_CosmeticSlotNavTab_C* WBP_CommunicationsCosmeticSlotNavTab; // 0x608
	UWBP_CosmeticSlotNavTab_C* WBP_EmotesCosmeticSlotNavTab; // 0x610
	UWBP_ItemInfoContainer_Description_C* WBP_ItemInfoContainer_Description; // 0x618
	UWBP_CosmeticSlotNavTab_C* WBP_OutfitsCosmeticSlotNavTab; // 0x620
	UWBP_CosmeticSlotNavTab_C* WBP_QuipsCosmeticSlotNavTab; // 0x628
	UWBP_CosmeticSlotNavTab_C* WBP_SpraysCosmeticSlotNavTab; // 0x630
	UWBP_CosmeticSlotNavTab_C* WBP_WingsuitsCosmeticSlotNavTab; // 0x638
	UWBP_CosmeticSlotNavTab_C* WBP_WrapsCosmeticSlotNavTab; // 0x640
	UKSSortableGridPanel* WingsuitCosmeticItemContainer; // 0x648
	UKSScrollBox* WingsuitScrollbox; // 0x650
	UKSSortableGridPanel* WrapCosmeticItemContainer; // 0x658
	UKSScrollBox* WrapScrollbox; // 0x660
	TArray<UWBP_KSCosmeticItemSelector_C*> CosmeticItems; // 0x668
	FMulticastInlineDelegate OnEquipCosmeticItem; // 0x678
	FCosmeticSlotDetails CosmeticSlotDetail; // 0x688
	UKSMercManager* MercManager; // 0x6a0
	UKSLoadoutDataFactory* LoadoutDataFactory; // 0x6a8
	AKSLobbyCharacter* MercSelectionCharacter; // 0x6b0
	UKSItem* SelectedCosmeticKSItem; // 0x6b8
	UKSWeaponAsset* WingSuitAsset; // 0x6c0
	UWBP_KSCosmeticItemSelector_C* EquippedSlot; // 0x6c8
	UKSItem* HoveredItem; // 0x6d0
	UAkAudioEvent* ShowEquipAllRogueCustomSelectSFX; // 0x6d8
	UAkAudioEvent* WingsuitEquipSound; // 0x6e0
	UAkAudioEvent* SprayEquipSound; // 0x6e8
	UAkAudioEvent* WrapEmoteEquipSound; // 0x6f0
	FKSVoicelineEvent Skin Preview Line; // 0x6f8
	UAkAudioEvent* SkinEquipSound; // 0x730
	UPUMG_StoreItem* SelectedStoreItem; // 0x738
	UPUMG_StoreItem* ReturnToItemSelection; // 0x740
	UPUMG_StoreItem* HoveredStoreItem; // 0x748
};

struct AKSWeapon_RemoteVehicle : AKSWeapon {
	AKSVehicle_Remote* RemoteVehicleToSpawn; // 0x6d8
	FTransform RemoteVehicleRelativeTransform; // 0x6e0
	AKSVehicle_Remote* SpawnedRemoteVehicle; // 0x710
};

struct UKSBattlepassUpsellWidget : UKSWidget {
	UKSBattlepassUpsellWidgetButton* BaseBundleButton; // 0x530
	UKSBattlepassUpsellWidgetButton* EliteBundleButton; // 0x538
	UKSBattlepassUpsellWidgetButton* ConfirmPurchaseButton; // 0x540
	UKSCurrencyDisplay* CurrencySummary; // 0x548
	UTextBlock* BattlepassTimeRemaining; // 0x550
	UTextBlock* ConfirmationBundleName; // 0x558
	UImage* background; // 0x560
	UImage* ShadeOverlay; // 0x568
	UImage* OutfitsModule; // 0x570
	UImage* WingsuitModule; // 0x578
	UImage* WeaponWrapModule; // 0x580
	UImage* ChaseModule; // 0x588
	UImage* SmokeModule; // 0x590
	UImage* CurrencyModule; // 0x598
	float PurchasingTimeoutTime; // 0x5a8
};

struct UDecalComponent : USceneComponent {
	UMaterialInterface* DecalMaterial; // 0x208
	int32_t SortOrder; // 0x210
	float FadeScreenSize; // 0x214
	float FadeStartDelay; // 0x218
	float FadeDuration; // 0x21c
	float FadeInDuration; // 0x220
	float FadeInStartDelay; // 0x224
	char bDestroyOwnerAfterFade : 1; // 0x228
	FVector DecalSize; // 0x22c
};

struct UCanvasPanelSlot : UPanelSlot {
	FAnchorData LayoutData; // 0x38
	bool bAutoSize; // 0x60
	int32_t ZOrder; // 0x64
};

struct UPoseWatch : UObject {
	UEdGraphNode* Node; // 0x28
	FColor PoseWatchColour; // 0x30
};

struct UMovieSceneParameterSection : UMovieSceneSection {
	TArray<FBoolParameterNameAndCurve> BoolParameterNamesAndCurves; // 0xe0
	TArray<FScalarParameterNameAndCurve> ScalarParameterNamesAndCurves; // 0xf0
	TArray<FVector2DParameterNameAndCurves> Vector2DParameterNamesAndCurves; // 0x100
	TArray<FVectorParameterNameAndCurves> VectorParameterNamesAndCurves; // 0x110
	TArray<FColorParameterNameAndCurves> ColorParameterNamesAndCurves; // 0x120
	TArray<FTransformParameterNameAndCurves> TransformParameterNamesAndCurves; // 0x130
};

struct UKSBTTask_InteractWith : UBTTask_BlackboardBase {
	bool ShouldHold; // 0x98
};

struct ULightmassPortalComponent : USceneComponent {
	UBoxComponent* PreviewBox; // 0x208
};

struct AKSJobSelectPrvwActor_RogueScrn : AKSJobSelectPreviewActor_Lobby {
	URogueScreenLoadoutComponent* RogueScreenLoadoutComponent; // 0x5c8
};

struct UOnlineSessionClient : UOnlineSession {
	bool bIsFromInvite; // 0x1d8
	bool bHandlingDisconnect; // 0x1d9
};

struct UWBP_news_screen_C : UKSWhatsNewModal {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UWBP_StandardButtonLarge_C* CloseButton; // 0x540
	UImage* FeaturedImage; // 0x548
	USizeBox* FooterBackground; // 0x550
	UVerticalBox* HeaderBlock; // 0x558
	UImage* HeaderBreak; // 0x560
	UOverlay* HeaderOverlay; // 0x568
	UTextBlock* HeaderText; // 0x570
	UHorizontalBox* HorizontalContainer; // 0x578
	UTextBlock* SubheaderText; // 0x580
	UVerticalBox* VerticalLeftContainer; // 0x588
	UVerticalBox* VerticalRightContainer; // 0x590
	EPUMG_LoginState LoginState; // 0x598
	TArray<UKSWhatsNewPanel*> CachedPanels; // 0x5a0
};

struct UWBP_Header2_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Decro; // 0x240
	UTextBlock* Text; // 0x248
	FText TextValue; // 0x250
	ETextJustify Justification; // 0x268
};

struct UTextureRenderTarget2D : UTextureRenderTarget {
	int32_t SizeX; // 0xc0
	int32_t SizeY; // 0xc4
	FLinearColor ClearColor; // 0xc8
	TextureAddress AddressX; // 0xd8
	TextureAddress AddressY; // 0xd9
	char bForceLinearGamma : 1; // 0xda
	char bHDR : 1; // 0xda
	char bGPUSharedFlag : 1; // 0xda
	ETextureRenderTargetFormat RenderTargetFormat; // 0xdb
	char bAutoGenerateMips : 1; // 0xdc
	TextureFilter MipsSamplerFilter; // 0xdd
	TextureAddress MipsAddressU; // 0xde
	TextureAddress MipsAddressV; // 0xdf
	EPixelFormat OverrideFormat; // 0xe0
};

struct UAkEventCallbackInfo : UAkCallbackInfo {
	int32_t PlayingID; // 0x30
	int32_t EventID; // 0x34
};

struct UMovieSceneParticleSection : UMovieSceneSection {
	FMovieSceneParticleChannel ParticleKeys; // 0xe0
};

struct UPendingNetGame : UObject {
	UNetDriver* NetDriver; // 0x30
	UDemoNetDriver* DemoNetDriver; // 0x38
};

struct UMaterialExpressionClamp : UMaterialExpression {
	FExpressionInput Input; // 0x40
	FExpressionInput Min; // 0x54
	FExpressionInput Max; // 0x68
	EClampMode ClampMode; // 0x7c
	float MinDefault; // 0x80
	float MaxDefault; // 0x84
};

struct UNavAreaMeta_SwitchByAgent : UNavAreaMeta {
	UNavArea* Agent0Area; // 0x48
	UNavArea* Agent1Area; // 0x50
	UNavArea* Agent2Area; // 0x58
	UNavArea* Agent3Area; // 0x60
	UNavArea* Agent4Area; // 0x68
	UNavArea* Agent5Area; // 0x70
	UNavArea* Agent6Area; // 0x78
	UNavArea* Agent7Area; // 0x80
	UNavArea* Agent8Area; // 0x88
	UNavArea* Agent9Area; // 0x90
	UNavArea* Agent10Area; // 0x98
	UNavArea* Agent11Area; // 0xa0
	UNavArea* Agent12Area; // 0xa8
	UNavArea* Agent13Area; // 0xb0
	UNavArea* Agent14Area; // 0xb8
	UNavArea* Agent15Area; // 0xc0
};

struct UKSMassInviteModal : UKSWidget {
	TArray<UKSPlayerInfo*> SelectedPlayers; // 0x520
	UKSDataMassInviteBase* RouteData; // 0x530
};

struct UWBP_RoundRecap_Entry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* BG_Enemy; // 0x240
	UImage* BG_Friendly; // 0x248
	UImage* Eliminated_Enemy; // 0x250
	UImage* Eliminated_Friendly; // 0x258
	UWidgetSwitcher* IconSwitcher_Enemy; // 0x260
	UWidgetSwitcher* IconSwitcher_Friendly; // 0x268
	UImage* Objective_Enemy; // 0x270
	UImage* Objective_Friendly; // 0x278
	UTextBlock* RoundLabelText_Enemy; // 0x280
	UTextBlock* RoundLabelText_Friendly; // 0x288
	UImage* TimeExpired_Enemy; // 0x290
	UImage* TimeExpired_Friendly; // 0x298
	UWBP_BoxStroke_C* WinStroke_Enemy; // 0x2a0
	UWBP_BoxStroke_C* WinStroke_Friendly; // 0x2a8
	bool FriendlyTeamWin; // 0x2b0
	FText RoundName; // 0x2b8
	E_RoundEndReason RoundEndReason; // 0x2d0
};

struct UWBP_RoguePanelHeader_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* Text; // 0x240
	FText HeaderText; // 0x248
};

struct USceneCaptureComponentCube : USceneCaptureComponent {
	UTextureRenderTargetCube* TextureTarget; // 0x2a0
	bool bCaptureRotation; // 0x2a8
	UTextureRenderTargetCube* TextureTargetLeft; // 0x2b0
	UTextureRenderTargetCube* TextureTargetRight; // 0x2b8
	UTextureRenderTarget2D* TextureTargetODS; // 0x2c0
	float IPD; // 0x2c8
};

struct UBlackboardKeyType_String : UBlackboardKeyType {
	FString StringValue; // 0x30
};

struct UBackgroundBlur : UContentWidget {
	FMargin Padding; // 0x128
	EHorizontalAlignment HorizontalAlignment; // 0x138
	EVerticalAlignment VerticalAlignment; // 0x139
	bool bApplyAlphaToBlur; // 0x13a
	float BlurStrength; // 0x13c
	bool bOverrideAutoRadiusCalculation; // 0x140
	int32_t BlurRadius; // 0x144
	FSlateBrush LowQualityFallbackBrush; // 0x148
};

struct UKSAccoladeTracker : UObject {
	FAccoladeDisplayInfo AccoladeDisplayInfo; // 0x38
};

struct UKSProjectileMovementComponent : UProjectileMovementComponent {
	FMulticastInlineDelegate OnProjectilePenetrated; // 0x1d0
	FVector PreStopVelocity; // 0x1e0
	float LifetimeUponStop; // 0x1ec
	float ProjectileVelocityDeflectDampener; // 0x1f0
};

struct UMaterialExpressionDDX : UMaterialExpression {
	FExpressionInput Value; // 0x40
};

struct ULiveLinkSourceSettings : UObject {
	ELiveLinkSourceMode Mode; // 0x28
	FLiveLinkSourceBufferManagementSettings BufferSettings; // 0x30
	FString ConnectionString; // 0x80
	ULiveLinkSourceFactory* Factory; // 0x90
};

struct AKSOutOfBoundsRecoveryPoint : ANavigationObjectBase {
	int32_t SideNum; // 0x248
};

struct UReticleBase_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* LoneDot; // 0x240
	float LowAmmoThreshold; // 0x248
	float CriticallyLowAmmoThreshold; // 0x24c
	UKSSettingsColorOptionsAsset* SettingsColorOptionAsset; // 0x250
};

struct AKSWeapon_ReviveDrone : AKSWeapon_Targeted {
	AKSAgent_RevivalDrone* DroneClass; // 0x718
	TWeakObjectPtr<AKSAgent_RevivalDrone> DroneActor; // 0x720
};

struct UWBP_RegionSelectRedirect_C : UKSRegionSelectModal {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_RegionSelect_C* WBP_RegionSelect; // 0x528
	UAkAudioEvent* ShowSFX; // 0x530
};

struct AKSWeapon_RemoteRocket : AKSWeapon {
	float CameraBlendTime; // 0x6d8
	EViewTargetBlendFunction CameraBlendFunction; // 0x6dc
	float CameraBlendExp; // 0x6e0
	bool CameraLockOutgoing; // 0x6e4
	float PostDestroyDelay; // 0x6e8
	AKSRocket* RemoteRocketToSpawn; // 0x6f0
	FVector RemoteRocketRelativeLocation; // 0x6f8
	AKSRocket* SpawnedRemoteRocket; // 0x708
	AController* RocketController; // 0x710
};

struct UMaterialExpressionBlendMaterialAttributes : UMaterialExpression {
	FMaterialAttributesInput A; // 0x40
	FMaterialAttributesInput B; // 0x58
	FExpressionInput Alpha; // 0x70
	EMaterialAttributeBlend PixelAttributeBlendType; // 0x84
	EMaterialAttributeBlend VertexAttributeBlendType; // 0x85
};

struct UBorder : UContentWidget {
	EHorizontalAlignment HorizontalAlignment; // 0x128
	EVerticalAlignment VerticalAlignment; // 0x129
	char bShowEffectWhenDisabled : 1; // 0x12a
	FLinearColor ContentColorAndOpacity; // 0x12c
	FDelegate ContentColorAndOpacityDelegate; // 0x13c
	FMargin Padding; // 0x14c
	FSlateBrush background; // 0x160
	FDelegate BackgroundDelegate; // 0x1e8
	FLinearColor BrushColor; // 0x1f8
	FDelegate BrushColorDelegate; // 0x208
	FVector2D DesiredSizeScale; // 0x218
	bool bFlipForRightToLeftFlowDirection; // 0x220
	FDelegate OnMouseButtonDownEvent; // 0x224
	FDelegate OnMouseButtonUpEvent; // 0x234
	FDelegate OnMouseMoveEvent; // 0x244
	FDelegate OnMouseDoubleClickEvent; // 0x254
};

struct AKSWeaponAssetDrop_MacGuffin : AKSWeaponAssetDrop {
	FKSObjectiveInfo ObjectiveInfo; // 0x880
	FKSObjectiveTimerInfo ObjectiveTimerInfo; // 0x8e8
	FKSObjectiveCaptureInfo ObjectiveCaptureInfo; // 0x920
	AActor* PointOfInterest; // 0x938
};

struct UARTrackedQRCode : UARTrackedImage {
	FString QRCode; // 0xf8
	int32_t Version; // 0x108
};

struct UKSBTTask_SetBetweenBlackboards : UBTTaskNode {
	FBlackboardKeySelector SourceBlackboardActor; // 0x70
	FBlackboardKeySelector SourceKey; // 0x98
	FBlackboardKeySelector TargetBlackboardActor; // 0xc0
	FBlackboardKeySelector TargetKey; // 0xe8
};

struct UNetAnalyticsAggregatorConfig : UObject {
	TArray<FNetAnalyticsDataConfig> NetAnalyticsData; // 0x28
};

struct USkelPropManagerComponent : UActorComponent {
	TArray<FActiveSkelProp> ActiveNamelessProps; // 0x188
	TMap<FPropIdentifier, FActiveSkelProp> ActiveProps; // 0x198
	bool bAllowSpawnerPooling; // 0x1e8
	float SpawnerPoolingLifespan; // 0x1ec
};

struct UBlueprintCore : UObject {
	UObject* SkeletonGeneratedClass; // 0x28
	UObject* GeneratedClass; // 0x30
	bool bLegacyNeedToPurgeSkelRefs; // 0x38
	FGuid BlueprintGuid; // 0x3c
};

struct UMaterialExpressionSkyAtmosphereLightDiskLuminance : UMaterialExpression {
	int32_t LightIndex; // 0x40
};

struct USoundNodeModulatorContinuous : USoundNode {
	FModulatorContinuousParams PitchModulationParams; // 0x48
	FModulatorContinuousParams VolumeModulationParams; // 0x68
};

struct UPlaneReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadiusScale; // 0x280
	UDrawSphereComponent* PreviewInfluenceRadius; // 0x288
	UBoxComponent* PreviewCaptureBox; // 0x290
};

struct UProceduralFoliageTile : UObject {
	UProceduralFoliageSpawner* FoliageSpawner; // 0x28
	TArray<FProceduralFoliageInstance> InstancesArray; // 0xd0
};

struct ASmoothRepTimelineActor : AActor {
	FTimelineSimulationHandler SmoothTimeline; // 0x220
	UTimelineComponent* TimelineComponentToSimulate; // 0x238
};

struct UKSContextMenuButton : UKSWidget {
	EPlayerContextOptions ContextOption; // 0x520
};

struct UKSStoreSectionItemWithPurchaseData : UKSPurchaseData {
	UKSStoreSectionItem* StoreSectionItem; // 0x58
};

struct UClickDragInputBehavior : UAnyButtonInputBehavior {
	bool bUpdateModifiersDuringDrag; // 0x120
};

struct UKSMilestoneCompletedSummary : UObject {
	TArray<FKSMilestoneCompletedSummaryEntry> MilestoneEntries; // 0x28
	TArray<UKSWeaponAsset*> WeaponKeys; // 0x38
	TMap<UKSWeaponAsset*, int32_t> WeaponXpCounts; // 0x48
};

struct UEnvQueryNode : UObject {
	int32_t VerNum; // 0x28
};

struct UKSPhaseRuleComponent : UKSGameRuleComponent {
	FMulticastInlineDelegate PhaseCompletedDel; // 0xb0
	float ScoringScalar; // 0xd0
	float LastInitiatedPhaseTime; // 0xd4
	bool bRejectPhaseTimerExpiredForPostRound; // 0xd8
	bool bUseInitialSpawnPoints; // 0xd9
	FName LastPhaseName; // 0xdc
	bool bPhaseActive; // 0xe4
};

struct UParticleModuleLifetime : UParticleModuleLifetimeBase {
	FRawDistributionFloat Lifetime; // 0x30
};

struct UPInv_AssetManagerSettings : UDeveloperSettings {
	bool bQuickCook; // 0x38
	TArray<FName> PrimaryTypesToIgnoreQuickCook; // 0x40
	TSet<FName> QuickCookTypeIgnoreSet; // 0x50
	TArray<FString> PrimaryAssetsToIgnoreQuickCook; // 0xa0
	TSet<FPrimaryAssetId> QuickCookAssetIgnoreSet; // 0xb0
	TSet<FPrimaryAssetType> QuickCookAssetIngoreSetTypes; // 0x100
	TArray<FString> PrimaryAssetsToIncludeQuickCook; // 0x150
};

struct UAnimSequenceBase : UAnimationAsset {
	TArray<FAnimNotifyEvent> Notifies; // 0x80
	float SequenceLength; // 0x90
	float RateScale; // 0x94
	FRawCurveTracks RawCurveData; // 0x98
};

struct UKSContextualPingMarkerWidget : UKSMapIconWidgetBase {
	FMulticastInlineDelegate OnPingRemovedCalled; // 0x318
	FMulticastInlineDelegate OnPingChangedCalled; // 0x328
	FPingInfo CurrentPingInfo; // 0x338
	UKSPingManager* PingManager; // 0x3e8
};

struct UKSSpawnRule_Proximity : UKSSpawnRule {
	float OuterRadius; // 0x40
	float InnerRadius; // 0x44
};

struct UKSAmmoWidget : UKSWeaponWidget {
	int32_t CachedAmmoInClip; // 0x528
	int32_t CachedClipSize; // 0x52c
	int32_t CachedInReserve; // 0x530
	bool CachedIsReloading; // 0x534
};

struct UWBP_ReticleHair_C : UUserWidget {
	UImage* CrosshairImage; // 0x238
	TArray<UTexture2D*> CrosshairTextures; // 0x240
};

struct USoundNodeOscillator : USoundNode {
	char bModulateVolume : 1; // 0x48
	char bModulatePitch : 1; // 0x48
	float AmplitudeMin; // 0x4c
	float AmplitudeMax; // 0x50
	float FrequencyMin; // 0x54
	float FrequencyMax; // 0x58
	float OffsetMin; // 0x5c
	float OffsetMax; // 0x60
	float CenterMin; // 0x64
	float CenterMax; // 0x68
};

struct UBP_GameInstance_C : UKSGameInstance {
	FPointerToUberGraphFrame UberGraphFrame; // 0x550
};

struct UKSSettingsMenuConfigAsset : UDataAsset {
	TArray<UKSSettingsPageConfigAsset*> SettingsPageConfigs; // 0x30
};

struct UEditableTextWidgetStyle : USlateWidgetStyleContainerBase {
	FEditableTextStyle EditableTextStyle; // 0x30
};

struct UWBP_WeaponHub_C : UKSWeaponHubBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x550
	UWidgetAnimation* Anim_OnShow; // 0x558
	UImage* BG; // 0x560
	UHorizontalBox* ButtonContainer; // 0x568
	UHorizontalBox* LowerButtonContainer; // 0x570
	UWBP_WeaponCategoryButton_C* WBP_WeaponCategoryButton; // 0x578
	UWBP_WeaponCategoryButton_C* WBP_WeaponCategoryButton_2; // 0x580
	UWBP_WeaponCategoryButton_C* WBP_WeaponCategoryButton_3; // 0x588
	UWBP_WeaponCategoryButton_C* WBP_WeaponCategoryButton_4; // 0x590
	UWBP_WeaponCategoryButton_C* WBP_WeaponCategoryButton_5; // 0x598
	UWBP_WeaponCategoryButton_C* WBP_WeaponCategoryButton_6; // 0x5a0
	UWBP_WeaponCategoryButton_Horizontal_C* WBP_WeaponCategoryButton_Horizontal; // 0x5a8
	UWBP_WeaponCategoryButton_Horizontal_C* WBP_WeaponCategoryButton_Horizontal_2; // 0x5b0
	UWBP_WeaponCategoryButton_Horizontal_C* WBP_WeaponCategoryButton_Horizontal_3; // 0x5b8
	UAkAudioEvent* GamePad_FaceButtonTOP_SFX; // 0x5c0
	FName ArmoryTabSeen; // 0x5c8
};

struct UFXSystemAsset : UObject {
	uint32_t MaxPoolSize; // 0x28
};

struct UCloudStorageBase : UPlatformInterfaceBase {
	TArray<FString> LocalCloudFiles; // 0x38
	char bSuppressDelegateCalls : 1; // 0x48
};

struct UInputTouchDelegateBinding : UInputDelegateBinding {
	TArray<FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x28
};

struct UInterpTrackVectorProp : UInterpTrackVectorBase {
	FName PropertyName; // 0x90
};

struct UAsyncTaskDownloadImage : UBlueprintAsyncActionBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFail; // 0x40
};

struct UKSAvenger : UKSAccoladeTracker {
	TArray<FPlayerCombatInfo> PlayerTrackers; // 0xa8
	float MaxTrackerTimer; // 0xb8
};

struct USettingsInfo_GlobalQuality_C : UKSSettingsInfo_Generic {
	FPointerToUberGraphFrame UberGraphFrame; // 0x118
	TArray<FName> QualityNames; // 0x120
};

struct ULoggedInInventoryCheck_C : UKSLoginInventoryCheck {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UImage* background; // 0x540
	UWBP_StandardButtonMedium_C* DisconnectButton; // 0x548
	UGamepadPromptBasic_C* DisconnectPrompt; // 0x550
	UProgressBar* LoadingBar; // 0x558
	UWidgetSwitcher* PromptSwitcher; // 0x560
	UWBP_EpilepsyWarning_C* WBP_EpilepsyWarning; // 0x568
	UWBP_ThrobberShield_C* WBP_ThrobberShield; // 0x570
	float CurrentProgress; // 0x578
	float CurrentSeconds; // 0x57c
};

struct UKSSettingsWidget : UKSWidget {
	FKSSettingsWidgetConfig WidgetConfig; // 0x520
	FText WidgetContainerTitle; // 0x530
	FText WidgetContainerDescription; // 0x548
	bool bHasPreview; // 0x560
	UKSSettingsPreview* WidgetContainerPreviewWidget; // 0x568
	UKSSettingsInfoBase* SettingsInfo; // 0x570
};

struct UMovieSceneEasingExternalCurve : UObject {
	UCurveFloat* Curve; // 0x30
};

struct UBrushStampIndicator : UInteractiveGizmo {
	float BrushRadius; // 0x38
	float BrushFalloff; // 0x3c
	FVector BrushPosition; // 0x40
	FVector BrushNormal; // 0x4c
	bool bDrawIndicatorLines; // 0x58
	bool bDrawRadiusCircle; // 0x59
	bool bDrawFalloffCircle; // 0x5a
	int32_t SampleStepCount; // 0x5c
	FLinearColor LineColor; // 0x60
	float LineThickness; // 0x70
	bool bDepthTested; // 0x74
	bool bDrawSecondaryLines; // 0x75
	float SecondaryLineThickness; // 0x78
	FLinearColor SecondaryLineColor; // 0x7c
	UPrimitiveComponent* AttachedComponent; // 0x90
};

struct UMaterialParameterCollectionInstance : UObject {
	UMaterialParameterCollection* Collection; // 0x30
};

struct UTextLayoutWidget : UWidget {
	FShapedTextOptions ShapedTextOptions; // 0x110
	ETextJustify Justification; // 0x113
	ETextWrappingPolicy WrappingPolicy; // 0x114
	char AutoWrapText : 1; // 0x115
	float WrapTextAt; // 0x118
	FMargin Margin; // 0x11c
	float LineHeightPercentage; // 0x12c
};

struct UKSSocialSearchPanel : UKSSocialPanelBase {
	FMulticastInlineDelegate OnOpen; // 0x580
	FMulticastInlineDelegate OnClose; // 0x590
};

struct USubsurfaceProfile : UObject {
	FSubsurfaceProfileStruct Settings; // 0x28
};

struct UPUMG_AcquisitionManager : UObject {
	FMulticastInlineDelegate OnAcquisitionSuccess; // 0x28
	FMulticastInlineDelegate OnAcquisitionFailed; // 0x38
	UPUMG_StoreItemHelper* StoreItemHelper; // 0x48
};

struct UKSEasyAntiCheatSettings : UDeveloperSettings {
	uint16_t AbilityEACWeaponTypeId; // 0x38
	TArray<FWeaponTypeToAntiCheatId> WeaponTypeToAntiCheatId; // 0x40
	TMap<FGameplayTag, uint16_t> WeaponTypeToAntiCheatIdMap; // 0x50
};

struct UKSPlayerMod_GiveItemOnEvent : UKSPlayerMod {
	TSoftObjectPtr<UKSItem> ItemToGive; // 0x330
};

struct UBlendSpace : UBlendSpaceBase {
	EBlendSpaceAxis AxisToScaleAnimation; // 0x148
};

struct UInterpTrackInstToggle : UInterpTrackInst {
	ETrackToggleAction Action; // 0x28
	float LastUpdatePosition; // 0x2c
	char bSavedActiveState : 1; // 0x30
};

struct UEnvQueryTest_Pathfinding : UEnvQueryTest {
	EEnvTestPathfinding TestMode; // 0x1f8
	UEnvQueryContext* Context; // 0x200
	FAIDataProviderBoolValue PathFromContext; // 0x208
	FAIDataProviderBoolValue SkipUnreachable; // 0x240
	UNavigationQueryFilter* FilterClass; // 0x278
};

struct UMaterialFunction : UMaterialFunctionInterface {
	FString Description; // 0x40
	char bExposeToLibrary : 1; // 0x50
	char bPrefixParameterNames : 1; // 0x50
	char bReentrantFlag : 1; // 0x50
};

struct UKSBTD_AnyActorPerceived : UBTDecorator {
	TArray<UAISense*> SensesToUse; // 0x68
	FKSPerceptionFilter PerceptionFilter; // 0x78
};

struct UMaterialExpressionTextureSample : UMaterialExpressionTextureBase {
	FExpressionInput Coordinates; // 0x50
	FExpressionInput TextureObject; // 0x64
	FExpressionInput MipValue; // 0x78
	FExpressionInput CoordinatesDX; // 0x8c
	FExpressionInput CoordinatesDY; // 0xa0
	FExpressionInput AutomaticViewMipBiasValue; // 0xb4
	ETextureMipValueMode MipValueMode; // 0xc8
	ESamplerSourceMode SamplerSource; // 0xc9
	char AutomaticViewMipBias : 1; // 0xca
	char ConstCoordinate; // 0xcb
	int32_t ConstMipValue; // 0xcc
};

struct USoundNodeDoppler : USoundNode {
	float DopplerIntensity; // 0x48
	bool bUseSmoothing; // 0x4c
	float SmoothingInterpSpeed; // 0x50
};

struct AKSBlueprintableInteractable : AActor {
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x228
	UKSInteractableComponent* InteractableComponent; // 0x230
	float Duration; // 0x238
	bool bUseCollisionForInteractionDistance; // 0x23c
	bool bCanInteractFromBehind; // 0x23d
	bool bCanInteractWhileDowned; // 0x23e
	bool bShouldDisplayInteractionProgress; // 0x23f
	FName InteractionName; // 0x240
	int32_t MaxNumberOfInteractors; // 0x248
	int32_t InteractionPriority; // 0x24c
	bool bInteractionAllowed; // 0x250
	UKSInteractionType* InteractionType; // 0x258
	TArray<UPrimitiveComponent*> OutlinedComponents; // 0x260
	TArray<UKSInteractionManager*> ActiveInteractions; // 0x280
	int32_t NumActiveInteractions; // 0x290
	FText ProgressText; // 0x298
	FText PromptText; // 0x2b0
	FMulticastInlineDelegate OnInteractionStarted; // 0x2c8
	FMulticastInlineDelegate OnInteractionEnded; // 0x2d8
	FMulticastInlineDelegate OnInteractionComplete; // 0x2e8
};

struct UScrollBoxSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UInterpTrackInstVectorProp : UInterpTrackInstProperty {
	FVector ResetVector; // 0x60
};

struct AKSGameMode : APGame_GameMode {
	float PlayerReadyTimeoutTime; // 0x538
	UKSPlayerJoinRuleComponent* KSPlayerJoinRuleComponentClass; // 0x540
	UKSPlayerJoinRuleComponent* KSPlayerJoinRuleComponent; // 0x548
	UKSChargeRuleComponent* ChargeRuleComponent; // 0x550
	UKSBackfillRuleComponent* BackfillRuleComponent; // 0x558
	bool bCachedShouldPlayersStartSpectatingDefaultCamera; // 0x568
	FKSRespawnConfig RespawnConfiguration; // 0x570
	FMulticastInlineDelegate OnPhaseChangeDel; // 0x588
	FMulticastInlineDelegate OnPhaseTimerExpired; // 0x598
	FMatchPhase MatchPhase; // 0x5b8
	bool bUseMatchTimer; // 0x5cc
	float MatchSetupTime; // 0x5d0
	bool bUseSelectionPhase; // 0x5d4
	float PreSelectionPhaseTime; // 0x5d8
	float SelectionPhaseTime; // 0x5dc
	float PostSelectionPhaseTime; // 0x5e0
	float PostSelectionPhaseMinTime; // 0x5e4
	bool bSkipPostSelectionCinematic; // 0x5e8
	float PostSelectionCinematicPhaseTime; // 0x5ec
	bool bUsePostMatchMVPLineup; // 0x5f0
	float TimeBeforeMVPLineupCinematicBegins; // 0x5f4
	float PostMatchMVPLineupPhaseTime; // 0x5f8
	float MatchDefaultPhaseTime; // 0x5fc
	float MatchTimerUpdatePeriod; // 0x630
	UKSSpawnSelectorComponent* KSSpawnSelectorComponentClass; // 0x648
	TSoftClassPtr<UObject> KSSpawnSelectorComponentSoftClass; // 0x650
	UKSSpawnSelectorComponent* KSSpawnSelectorComponent; // 0x678
	bool bAllowFindInactivePlayer; // 0x680
	bool bUseLoginStartSpotForPawn; // 0x681
	bool bAIPlayersUseLoginStartSpotForPawn; // 0x682
	int32_t DefaultTeamCount; // 0x6b8
	EKSTeamAssignmentType TeamAssignmentType; // 0x6bc
	bool bFirstDebugPlayerIsOnlySpectator; // 0x6bd
	AKSRevealManager* RevealManager; // 0x730
	AKSRevealManager* RevealManagerClass; // 0x738
	FMulticastInlineDelegate MatchStatsFinalizedDelegate; // 0x750
	float MatchStartTime; // 0x778
	float MatchEndTime; // 0x77c
	bool bIsTutorial; // 0x780
	bool bIsPractice; // 0x781
	bool bIsAiPvpMode; // 0x782
	bool bIsPlayerSpectateOnlyMode; // 0x783
	float DefaultMinimapWidth; // 0x784
	AKSTeamState* DefaultTeamState; // 0x788
	float ReverseFriendlyFireStartThreshold; // 0x790
	float FriendlyFireModiferBase; // 0x794
	float ReverseFriendlyFireModiferBase; // 0x798
	bool bCanDownPlayers; // 0x79c
	bool bCanDownBots; // 0x79d
	bool bCreditInstantKillWithDown; // 0x79e
	bool bCreditSuicideWithDown; // 0x79f
	bool bImmediateDeathForLastManStanding; // 0x7a0
	bool bEliminatePlayerOnDeath; // 0x7a1
	bool bPivotToKillerOnDeath; // 0x7a2
	bool bTrackKillerOnDeath; // 0x7a3
	bool bRevealKillerOnDeath; // 0x7a4
	bool bShouldRandomizeSides; // 0x7a5
	bool bStartJobSelectionOnSideSwap; // 0x7a6
	AKSGlobalShotListener* ShotListener; // 0x7a8
	FMulticastInlineDelegate OnTeamSidesFlipped; // 0x7b8
	bool bClearObjectivesMarkedUsedOnSidesFlipped; // 0x7c8
	AActor* Winner; // 0x7d0
	AActor* CheatWinner; // 0x7d8
	UKSRewardsCalculator* DefaultRewardsCalculatorClass; // 0x7e0
	bool bIncludeInitialInventoryFromDefaultPawnInStartingInventory; // 0x7e8
	TArray<UKSItem*> StartingInventory; // 0x7f0
	bool bGiveStartingInventoryToBots; // 0x800
	TArray<UKSItem*> PlayerSpawnInventory; // 0x808
	TArray<UKSItem*> PlayerInitialSpawnInventory; // 0x818
	TArray<UKSItem*> PlayerRespawnInventory; // 0x828
	TArray<UKSPlayerMod*> PlayerSpawnMods; // 0x838
	TArray<UKSPlayerMod*> PlayerInitialSpawnMods; // 0x848
	TArray<UKSPlayerMod*> PlayerRespawnMods; // 0x858
	UKSPlayerMod* FreefallMod; // 0x868
	bool bIsBotMatch; // 0x8a0
	int32_t StartingCash; // 0x8a4
	FMulticastInlineDelegate OnSpecialtyItemVendorLoaded; // 0x8a8
	bool bUsePlayerLoadouts; // 0x8bc
	bool bDisableLoadoutValidation; // 0x8bd
	float WaitForPlayersTimeout; // 0xb08
	TMap<TSoftObjectPtr<UKSWeaponAsset>, int32_t> LoadingLoot; // 0xb20
	bool bPopulateLootSites; // 0xb70
	TMap<ELootSiteRarity, FKSLootGroupGuaranteeMap> LootGroupGuarantees; // 0xb78
	bool bSpawnLootOnMatchStart; // 0xbc8
	TArray<FKSLootRaritySwapInfo> LootRaritySwaps; // 0xc20
	EKSLootRespawnMode LootRespawnMode; // 0xc30
	TMap<ELootSiteRarity, float> LootSiteRespawnPeriods; // 0xc38
	UKSAIActorCollection* AIActorCollection; // 0xcd8
	bool bRecordKillCam; // 0xce0
	float AFKIdleTime; // 0xce4
	UDataTable* AccoladeTrackerDataTable; // 0xd20
	TArray<UKSAccoladeTracker*> AccoladeTrackerInstances; // 0xd28
	TArray<UKSAccoladeTracker*> AccoladeTrackerClasses; // 0xd38
	FKSGameHUDSettings GameModeHUDSettings; // 0xd48
	TArray<TSoftObjectPtr<AActor>> InteractiveObjectCache; // 0xd60
	UKSOutOfBoundsManager* OutOfBoundsManagerClass; // 0xd70
	UKSMatchDataRecorder* MatchDataRecorder; // 0xd78
	bool ShouldForceCompetitiveLogic; // 0xd88
	EKSPerSecondChargeMode PerSecondChargeMode; // 0xd89
	float PerSecondChargePercent; // 0xd8c
	TArray<UKSGameRuleComponent*> GameRules; // 0xd90
	TMap<FName, FString> EditorPropertyMap; // 0xda0
	FString FriendlyAudioName; // 0xe40
	AKSAnnouncer* KSAnnouncerClass; // 0xe50
	int32_t BurnTestNumberOfRoundToWin; // 0xe58
	FMulticastInlineDelegate OnCharacterControlTransferred; // 0xe70
	bool bUseLegacyJobSelectionTech; // 0xe80
	bool bAllowPlayersToUseUnownedJobs; // 0xe81
	TArray<int32_t> AllowedUnownedJobIds; // 0xe88
	EJobUniquenessRule EnforcedJobUniqueness; // 0xe98
	bool bUseJobSelectionByDraft; // 0xe99
	bool bSkipDraftMidMatch; // 0xe9a
	bool bDraftAlternateTeams; // 0xe9b
	int32_t DraftNumPlayersSelecting; // 0xe9c
	int32_t DraftFirstSelectionNumOverride; // 0xea0
	float DraftPostSelectionPhaseTime; // 0xea4
	bool bDraftIncludesBans; // 0xea8
	bool bDraftBanAlternateTeams; // 0xea9
	int32_t DraftBanNumPlayersBanning; // 0xeac
	TArray<int32_t> DraftBanTurns; // 0xeb0
	UKSJobSelectionRules* JobSelectionRules; // 0xec0
	AKSJobSelectionAuthority* JobSelectionAuthority; // 0xec8
	int32_t CurrentDraftTurnNum; // 0xed0
	int32_t CurrentTeamNumSelecting; // 0xed4
	bool bCurrentlyBanning; // 0xed8
	bool bWasBanning; // 0xed9
	int32_t LastTeamNumToBan; // 0xedc
	bool bHasEverCompletedJobSelection; // 0xee0
	bool bFubarIfNoVendorsByMatchStart; // 0xee1
	bool bOnlyFubarIfNoJobVendor; // 0xee2
	bool bFubarIfAbsentPlayers; // 0xee3
	EKSBotNameGeneration BotNamingMethod; // 0xee6
	bool bUseIntraScoring; // 0xef0
	FText GameModeDisplayName; // 0xef8
	AKSEmoteMusicManager* EmoteMusicManagerClass; // 0xf10
	bool bRequireJobToEnterPlay; // 0xf18
	UKSCinematicDataContainer* CinematicDataContainer; // 0xf20
	UKSMVPDeterminant* MVPDeterminant; // 0xf28
	UKSSeamlessTravelTransferInfo* SeamlessTravelInfo; // 0xf30
	FKSSeamlessTravelSettings SeamlessTravelSettings; // 0xf38
	TArray<FGameplayTag> GameModeTags; // 0xf50
	int32_t NumericId; // 0xf60
	bool bAbandonPlayersOnLogOut; // 0xf64
	bool bGlobalDisableAIBackfill; // 0xf65
	bool bAllowAIBackfill; // 0xf66
	UKSBotDefinition* BackfillBotDefinition; // 0xf68
	char NextPawnId; // 0xf80
};

struct UKSBTD_IsWeaponFiring : UBTDecorator {
	FGameplayTag EquipPoint; // 0x68
};

struct UKSArmorAsset : UKSWeaponAsset {
	float Durability; // 0x908
	float StartingDurability; // 0x90c
	float DamageAbsorbPercent; // 0x910
	int32_t DisplayLevel; // 0x914
	bool bAbsorbsHeadDamage; // 0x918
	bool bAbsorbsBreakingHit; // 0x919
	bool bArmorIsRepairable; // 0x91a
	bool bDestroyOnBreak; // 0x91b
	bool bRepairableByInteract; // 0x91c
};

struct UChaosGameplayEventDispatcher : UChaosEventListenerComponent {
	TMap<UPrimitiveComponent*, FChaosHandlerSet> CollisionEventRegistrations; // 0x1c8
	TMap<UPrimitiveComponent*, FBreakEventCallbackWrapper> BreakEventRegistrations; // 0x218
};

struct UAISense : UObject {
	float DefaultExpirationAge; // 0x28
	EAISenseNotifyType NotifyType; // 0x2c
	char bWantsNewPawnNotification : 1; // 0x30
	char bAutoRegisterAllPawnsAsSources : 1; // 0x30
	UAIPerceptionSystem* PerceptionSystemInstance; // 0x38
};

struct AKSIngressPoint : AKSMapPoint {
	AKSObjectiveBase* RelevantObjective; // 0x258
	AActor* AssignedBot; // 0x260
};

struct UMasterLobby_ABP_C : UKSCharacterAnimInst {
	FPointerToUberGraphFrame UberGraphFrame; // 0x10f0
	FAnimNode_Root AnimGraphNode_Root; // 0x10f8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x1138
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x11c0
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x1320
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x1360
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4; // 0x1420
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4; // 0x1450
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend; // 0x1480
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x1550
	FAnimNode_CopyBone AnimGraphNode_CopyBone_2; // 0x15d8
	FAnimNode_CopyBone AnimGraphNode_CopyBone; // 0x16d8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3; // 0x17d8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5; // 0x18a0
	bool __CustomProperty_bIsLobby_90FBADB5424A5A00D7B0F4B018D67A66; // 0x18d8
	bool __CustomProperty_bIsServer_90FBADB5424A5A00D7B0F4B018D67A66; // 0x18d9
	FAnimNode_LinkedAnimGraph AnimGraphNode_SubInstance; // 0x18e0
	FAnimNode_Slot AnimGraphNode_Slot_2; // 0x1990
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x19e8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3; // 0x1a98
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3; // 0x1ac8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_2; // 0x1af8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2; // 0x1c10
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4; // 0x1cd8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3; // 0x1d10
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x1d48
	FAnimNode_RigidBodySkipServer AnimGraphNode_RigidBodySkipServer; // 0x1e00
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2; // 0x23b0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2; // 0x23e0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x2410
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x24d8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x2510
	FAnimNode_Slot AnimGraphNode_Slot; // 0x2548
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x25a0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x26b8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x26e8
	float R_Prop_Lock_Alpha; // 0x2718
	float L_Prop_Lock_Alpha; // 0x271c
	bool bIsServer; // 0x2720
	bool SkinUseCharacterScale; // 0x2721
	FVector CharacterScale; // 0x2724
	bool ChildPhysicsAssetEnable; // 0x2730
	bool RemoveHeadAccessory; // 0x2731
};

struct UInstancedStaticMeshComponent : UStaticMeshComponent {
	TArray<FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x4e8
	int32_t NumCustomDataFloats; // 0x4f8
	TArray<float> PerInstanceSMCustomData; // 0x500
	int32_t InstancingRandomSeed; // 0x510
	int32_t InstanceStartCullDistance; // 0x514
	int32_t InstanceEndCullDistance; // 0x518
	TArray<int32_t> InstanceReorderTable; // 0x520
	int32_t NumPendingLightmaps; // 0x578
	TArray<FInstancedStaticMeshMappingInfo> CachedMappings; // 0x580
};

struct ULiveLinkTransformAxisSwitchPreProcessor : ULiveLinkFramePreProcessor {
	ELiveLinkAxis OrientationAxisX; // 0x28
	ELiveLinkAxis OrientationAxisY; // 0x29
	ELiveLinkAxis OrientationAxisZ; // 0x2a
	ELiveLinkAxis TranslationAxisX; // 0x2b
	ELiveLinkAxis TranslationAxisY; // 0x2c
	ELiveLinkAxis TranslationAxisZ; // 0x2d
};

struct UKSCharacterCameraHandler : USceneComponent {
	FMulticastInlineDelegate OnShoulderSwapChanged; // 0x208
	UKSSmoothingComponent* CameraRootComponent; // 0x218
	UKSSpringArmComponent* MainCameraBoom; // 0x220
	UCameraComponent* MainCameraComponent; // 0x228
	UKSSpringArmComponent* SprintCameraBoom; // 0x230
	UCameraComponent* SprintCameraComponent; // 0x238
	UKSSpringArmComponent* TransitionCameraBoom; // 0x240
	UCameraComponent* TransitionCameraComponent; // 0x248
	UKSSpringArmComponent* ShoulderCameraBoom; // 0x250
	UCameraComponent* ShoulderCameraComponent; // 0x258
	UCameraComponent* FirstPersonCameraComponent; // 0x260
	UKSSpringArmComponent* TabletCameraBoom; // 0x268
	UCameraComponent* TabletCameraComponent; // 0x270
	UKSSpringArmComponent* ActionCameraBoom1; // 0x278
	UCameraComponent* ActionCameraComponent; // 0x280
	UKSSpringArmComponent* SwimCameraBoom; // 0x288
	UCameraComponent* SwimCameraComponent; // 0x290
	UKSSpringArmComponent* MountedCameraBoom; // 0x298
	UCameraComponent* MountedCameraComponent; // 0x2a0
	UCameraComponent* ActiveCameraComponent; // 0x2a8
	UCameraComponent* PendingCameraComponent; // 0x2b8
	ECameraShoulder CameraShoulder; // 0x2c8
	ECameraShoulder DesiredCameraShoulder; // 0x2c9
	float NextShoulderSwapTime; // 0x2cc
	float ShoulderSwapCooldownTime; // 0x2d0
	float AutoShoulderSwapTime; // 0x2d4
	FName MeshADSPitchPivotBoneName; // 0x2d8
	float CameraFocualThreshold; // 0x2e0
	float MinimumFocalPointMaintenanceDistance; // 0x2e4
	float AimSnapThrottleTime; // 0x2e8
	float ShoulderSwapTime; // 0x2ec
	float ZipLineShoulderCameraBoomLength; // 0x2f0
	float ZipLineShoulderBoomLengthChangeTime; // 0x2f4
	float CrouchCameraShiftInterpSpeed; // 0x2f8
	float CrouchCameraBoomLengthScale; // 0x2fc
	float SprintCameraChangeDuration; // 0x300
	float SprintOutCameraChangeDuration; // 0x304
	float AimDownSightsScopeInterpSpeed; // 0x308
	bool bMantainFocualPointOnCameraTransition; // 0x30c
	bool bUseAdvancedFocalPointTracking; // 0x30d
	float ShoulderSwapProgress; // 0x310
	float ZiplineAOSCamVertOffset; // 0x314
	float CrouchAOSCamVertOffset; // 0x318
	float SwimCameraBoomFloatHeight; // 0x31c
	float ShoulderSwapBlendExponent; // 0x320
	bool bUseFocalPointDoubleCheck; // 0x324
	float FocalPointDoubleCheckAllowedBlockDistance; // 0x328
	bool bFocalPointMaintenanceEnabled; // 0x32c
	FVector LastManualShoulderSwapLocation; // 0x330
	float LastShoulderSwapTimestamp; // 0x33c
	float CurrentShoulderSwapTime; // 0x340
	FRotator CameraTransitionRotationDelta; // 0x344
	FRotator CameraTransitionRotationDeltaRemaining; // 0x350
	float NextValidAimSnapTime; // 0x35c
	AActor* CameraPivotTargetActor; // 0x360
	bool bPivotCameraToActorNotLocation; // 0x36a
	bool bTrackTargetAfterPivotingToIt; // 0x36b
	UKSAimAssistAnchorComponent* CachedSnapAnchor; // 0x370
	FRotator AppliedFocalPointCorrection; // 0x378
	UCurveFloat* CameraPivotCurve; // 0x3a8
	float StandEmoteCameraVertOffset; // 0x3b0
	float CrouchEmoteCameraVertOffset; // 0x3b4
	float ProneEmoteCameraVertOffset; // 0x3b8
	float StandEmoteCameraInterpSpeed; // 0x3bc
	float CrouchEmoteCameraInterpSpeed; // 0x3c0
	float ProneEmoteCameraInterpSpeed; // 0x3c4
	FVector RelativeFocalPoint; // 0x3e4
	FRotator NonFocalPointRotation; // 0x3f0
	FRotator AppliedFocalPointYawRotation; // 0x3fc
	float CachedPrimaryWeaponFieldOfView; // 0x418
	float CameraInterpSpeed; // 0x438
	float CurrentEmoteCameraVertOffset; // 0x43c
	float CurrentEmoteCameraInterpSpeed; // 0x440
	bool bUsingEmoteCamera; // 0x444
	float CachedCameraFOV; // 0x448
	FVector2D CachedViewPortSize; // 0x44c
	float CachedHalfTanFOV; // 0x454
};

struct UBTTask_MoveDirectlyToward : UBTTask_MoveTo {
	char bDisablePathUpdateOnGoalLocationChange : 1; // 0xb0
	char bProjectVectorGoalToNavigation : 1; // 0xb0
	char bUpdatedDeprecatedProperties : 1; // 0xb0
};

struct UKSPlayerMod_MedPackSpeed : UKSPlayerMod {
	float MedPackSpeedMultiplier; // 0x330
};

struct UWBP_KeyCallout_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWBP_AsyncIcon_C* CalloutIcon; // 0x240
	FKey Key; // 0x248
	FName KeyBind; // 0x260
	bool DisplayKeybind; // 0x268
	bool SecondaryKey; // 0x269
	bool FallbackToDefaults; // 0x26a
	bool GamepadDoubleTap; // 0x26b
};

struct UMaterialExpressionSteppedShadowSkinCustomOutput : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct UMovieSceneSection : UMovieSceneSignedObject {
	FMovieSceneSectionEvalOptions EvalOptions; // 0x50
	FMovieSceneEasingSettings Easing; // 0x58
	FMovieSceneFrameRange SectionRange; // 0x90
	FFrameNumber PreRollFrames; // 0xa0
	FFrameNumber PostRollFrames; // 0xa4
	int32_t RowIndex; // 0xa8
	int32_t OverlapPriority; // 0xac
	char bIsActive : 1; // 0xb0
	char bIsLocked : 1; // 0xb0
	float StartTime; // 0xb4
	float EndTime; // 0xb8
	float PrerollTime; // 0xbc
	float PostrollTime; // 0xc0
	char bIsInfinite : 1; // 0xc4
	bool bSupportsInfiniteRange; // 0xc8
	FOptionalMovieSceneBlendType BlendType; // 0xc9
};

struct UGameplayTaskResource : UObject {
	int32_t ManualResourceID; // 0x28
	int8_t AutoResourceID; // 0x2c
	char bManuallySetID : 1; // 0x30
};

struct UWBP_SettingsSlider_C : UKSSettingsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UWidgetAnimation* Hover; // 0x580
	UTextBlock* DisplayText; // 0x588
	UButton* HoverButton; // 0x590
	UImage* hoverstroke; // 0x598
	USlider* SettingsSlider; // 0x5a0
	UProgressBar* SliderBar; // 0x5a8
	bool bIsHovered; // 0x5b0
	float CurrentAcceleration; // 0x5b4
	float MaxAcceleration; // 0x5b8
	float MinAcceleration; // 0x5bc
	float LinearAccelerationCoeff; // 0x5c0
};

struct UMaterialExpressionRayTracingQualitySwitch : UMaterialExpression {
	FExpressionInput Normal; // 0x40
	FExpressionInput RayTraced; // 0x54
};

struct UParticleModuleBeamSource : UParticleModuleBeamBase {
	Beam2SourceTargetMethod SourceMethod; // 0x30
	FName SourceName; // 0x34
	char bSourceAbsolute : 1; // 0x3c
	FRawDistributionVector Source; // 0x40
	char bLockSource : 1; // 0x88
	Beam2SourceTargetTangentMethod SourceTangentMethod; // 0x8c
	FRawDistributionVector SourceTangent; // 0x90
	char bLockSourceTangent : 1; // 0xd8
	FRawDistributionFloat SourceStrength; // 0xe0
	char bLockSourceStength : 1; // 0x110
};

struct UBTTask_PlayAnimation : UBTTaskNode {
	UAnimationAsset* AnimationToPlay; // 0x70
	char bLooping : 1; // 0x78
	char bNonBlocking : 1; // 0x78
	UBehaviorTreeComponent* MyOwnerComp; // 0x80
	USkeletalMeshComponent* CachedSkelMesh; // 0x88
};

struct UAkSurfaceReflectorSetComponent : USceneComponent {
	char bEnableSurfaceReflectors : 1; // 0x208
	TArray<FAkPoly> AcousticPolys; // 0x210
	char bEnableDiffraction : 1; // 0x220
	char bEnableDiffractionOnBoundaryEdges : 1; // 0x220
	AActor* AssociatedRoom; // 0x228
};

struct UKSDataSocialPlayer : UObject {
	FMulticastInlineDelegate OnDataUpdate; // 0x28
	UKSPlayerInfo* Info; // 0x38
};

struct UWBP_StoreSection_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	USizeBox* CTAWrapper; // 0x528
	UImage* Image_147; // 0x530
	UHorizontalBox* RemainingContainer; // 0x538
	UGridPanel* SectionContents; // 0x540
	UTextBlock* SectionName; // 0x548
	UScaleBox* TaxContainer; // 0x550
	UTextBlock* TaxSub; // 0x558
	UTextBlock* TimeRemaining; // 0x560
	UWBP_CallToAction_C* WBP_CallToAction; // 0x568
	UWBP_Store_C* OwningStore; // 0x570
	UKSStoreSection* SectionMetaData; // 0x578
	float SectionRemainingTime; // 0x580
	float Overflow; // 0x584
	FTimerHandle TickTimer; // 0x588
	float STORE_TIMER_INTERVAL; // 0x590
	USizeBox* CTAWrapper_1; // 0x598
};

struct AGameMode : AGameModeBase {
	FName MatchState; // 0x2c0
	char bDelayedStart : 1; // 0x2c8
	int32_t NumSpectators; // 0x2cc
	int32_t NumPlayers; // 0x2d0
	int32_t NumBots; // 0x2d4
	float MinRespawnDelay; // 0x2d8
	int32_t NumTravellingPlayers; // 0x2dc
	ULocalMessage* EngineMessageClass; // 0x2e0
	TArray<APlayerState*> InactivePlayerArray; // 0x2e8
	float InactivePlayerStateLifeSpan; // 0x2f8
	int32_t MaxInactivePlayers; // 0x2fc
	bool bHandleDedicatedServerReplays; // 0x300
};

struct UKSSettingsSection : UKSWidget {
	TArray<UKSSettingsGroup*> SettingsGroups; // 0x520
	UKSSettingsGroup* SettingsGroupClass; // 0x530
	UKSSettingsSectionConfigAsset* SectionConfigAsset; // 0x538
};

struct UParticleModuleLocationEmitter : UParticleModuleLocationBase {
	FName EmitterName; // 0x30
	ELocationEmitterSelectionMethod SelectionMethod; // 0x38
	char InheritSourceVelocity : 1; // 0x3c
	float InheritSourceVelocityScale; // 0x40
	char bInheritSourceRotation : 1; // 0x44
	float InheritSourceRotationScale; // 0x48
};

struct UParticleModuleSubUV : UParticleModuleSubUVBase {
	USubUVAnimation* Animation; // 0x30
	FRawDistributionFloat SubImageIndex; // 0x38
	char bUseRealTime : 1; // 0x68
};

struct UKSActivityRewardCondition_Backfilling : UKSActivityRewardCondition {
	bool bCheckIsBackfilling; // 0x30
};

struct UKSCheatComponent : UPGame_CheatComponent {
	float WeaponStatDisplayTime; // 0xb0
	float DifficultyLevelsDisplayTime; // 0xb4
	char r_bNoCooldown : 1; // 0xb8
	char r_bNoEnergyUsage : 1; // 0xb8
	char r_bNoDamageTaken : 1; // 0xb8
	char r_CanViewHealth : 1; // 0xb8
	char r_CanViewLocation : 1; // 0xb8
	char r_HudVisible : 1; // 0xb8
	TArray<FString> CachedWeaponStats; // 0xc0
	float WeaponDisplayStartTime; // 0xd0
	TArray<FString> CachedDifficultyLevels; // 0xd8
	float DifficultyLevelsDisplayStartTime; // 0xe8
	FVector2D BaseDrawPosition; // 0xec
};

struct UPUMG_LoadoutDataFactory : UObject {
	FMulticastInlineDelegate OnLoadoutsInitialized; // 0x30
	FMulticastInlineDelegate OnLoadoutsUpdatedFromServer; // 0x40
	FMulticastInlineDelegate OnLoadoutFactoryReadyNoLoadouts; // 0x50
	FMulticastInlineDelegate OnLoadoutChanged; // 0x60
	FMulticastInlineDelegate OnLoadoutAdded; // 0x70
	FMulticastInlineDelegate OnLoadoutDeleted; // 0x80
	TArray<UPUMG_Loadout*> Loadouts; // 0x98
};

struct USceneCaptureComponent2D : USceneCaptureComponent {
	ECameraProjectionMode ProjectionType; // 0x2a0
	float FOVAngle; // 0x2a4
	float OrthoWidth; // 0x2a8
	UTextureRenderTarget2D* TextureTarget; // 0x2b0
	ESceneCaptureCompositeMode CompositeMode; // 0x2b8
	FPostProcessSettings PostProcessSettings; // 0x2c0
	float PostProcessBlendWeight; // 0x810
	char bOverride_CustomNearClippingPlane : 1; // 0x814
	float CustomNearClippingPlane; // 0x818
	bool bUseCustomProjectionMatrix; // 0x81c
	FMatrix CustomProjectionMatrix; // 0x820
	bool bEnableClipPlane; // 0x860
	FVector ClipPlaneBase; // 0x864
	FVector ClipPlaneNormal; // 0x870
	char bCameraCutThisFrame : 1; // 0x87c
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0x87c
	bool bDisableFlipCopyGLES; // 0x880
};

struct UPUMG_ViewLayer : UObject {
	UCanvasPanel* DisplayTarget; // 0x28
	UPUMG_ViewManager* MyManager; // 0x30
	EViewManagerTransitionState CurrentTransitionState; // 0x38
	TArray<FName> CurrentRouteStack; // 0x40
	TArray<FName> CurrentTransitionRouteStack; // 0x50
	TMap<FName, UPUMG_Widget*> RouteWidgetMap; // 0x60
	FName DefaultRoute; // 0xb0
	TMap<FName, UObject*> PendingRouteData; // 0xc0
	UDataTable* Routes; // 0x110
};

struct UWBP_RewardsTrackMeterSegment_C : UKSRewardsTrackMeterSegmentBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x540
	UImage* BarBackgroundFill; // 0x548
	UCanvasPanel* CanvasPanel_1; // 0x550
	UImage* MeterBase; // 0x558
	UImage* MeterGlow; // 0x560
	USpacer* MeterSpacer; // 0x568
	UBorder* ProgressBarColor; // 0x570
	UOverlay* ProgressBarContainer; // 0x578
	UTextBlock* SegmentLabel; // 0x580
	USpacer* ShearSpacerL; // 0x588
	USpacer* ShearSpacerR; // 0x590
};

struct UMaterialExpressionMapARPassthroughCameraUV : UMaterialExpression {
	FExpressionInput Coordinates; // 0x40
};

struct AKSRefillZone : AActor {
	FGameplayTagQuery ReequipWeaponsTypeQuery; // 0x228
	FGameplayTagQuery ReloadWeaponsTypeQuery; // 0x270
	int32_t AbilityChargeToRestore; // 0x2b8
	float HealthToRestore; // 0x2bc
	bool bRefundAllShopPurchases; // 0x2c0
	float InteractTime; // 0x2c4
	UKSInteractionType* InteractionType; // 0x2c8
	FName InteractionMode; // 0x2d0
	bool bCanInteractFromBehind; // 0x2d8
	bool bForceLOS; // 0x2d9
	FText InteractPromptText; // 0x2e0
	TSet<AKSCharacter*> CurrentZoneUsers; // 0x2f8
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x348
	UKSInteractableComponent* InteractableComponent; // 0x350
};

struct UAnimInstance : UObject {
	USkeleton* CurrentSkeleton; // 0x28
	ERootMotionMode RootMotionMode; // 0x30
	char bUseMultiThreadedAnimationUpdate : 1; // 0x31
	char bUsingCopyPoseFromMesh : 1; // 0x31
	char bReceiveNotifiesFromLinkedInstances : 1; // 0x31
	char bPropagateNotifiesToLinkedInstances : 1; // 0x31
	char bQueueMontageEvents : 1; // 0x31
	FMulticastInlineDelegate OnMontageBlendingOut; // 0x38
	FMulticastInlineDelegate OnMontageStarted; // 0x48
	FMulticastInlineDelegate OnMontageEnded; // 0x58
	FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x68
	FAnimNotifyQueue NotifyQueue; // 0x100
	TArray<FAnimNotifyEvent> ActiveAnimNotifyState; // 0x170
	float SubAnimInstanceWeight; // 0x180
};

struct UParticleModuleAttractorParticle : UParticleModuleAttractorBase {
	FName EmitterName; // 0x30
	FRawDistributionFloat Range; // 0x38
	char bStrengthByDistance : 1; // 0x68
	FRawDistributionFloat Strength; // 0x70
	char bAffectBaseVelocity : 1; // 0xa0
	EAttractorParticleSelectionMethod SelectionMethod; // 0xa4
	char bRenewSource : 1; // 0xa8
	char bInheritSourceVel : 1; // 0xa8
	int32_t LastSelIndex; // 0xac
};

struct AEQSTestingPawn : ACharacter {
	UEnvQuery* QueryTemplate; // 0x4c0
	TArray<FEnvNamedValue> QueryParams; // 0x4c8
	TArray<FAIDynamicParam> QueryConfig; // 0x4d8
	float TimeLimitPerStep; // 0x4e8
	int32_t StepToDebugDraw; // 0x4ec
	EEnvQueryHightlightMode HighlightMode; // 0x4f0
	char bDrawLabels : 1; // 0x4f4
	char bDrawFailedItems : 1; // 0x4f4
	char bReRunQueryOnlyOnFinishedMove : 1; // 0x4f4
	char bShouldBeVisibleInGame : 1; // 0x4f4
	char bTickDuringGame : 1; // 0x4f4
	EEnvQueryRunMode QueryingMode; // 0x4f8
	FNavAgentProperties NavAgentProperties; // 0x500
};

struct UKSHUDComponent_GameInfo : UKSHUDComponent {
	FText Header; // 0xb0
	bool bShowTopHUDBar; // 0xc8
};

struct AKSLootCrate : AKSBlueprintableInteractable {
	int32_t SideAlignment; // 0x300
	bool bRequiresSideAlignmentToLoot; // 0x304
	bool bIsEnabled; // 0x328
	bool bIsActive; // 0x329
	bool bIsOpen; // 0x32a
	FMulticastInlineDelegate OnLootcrateInfoChangedDel; // 0x330
	FKSLootCrateInfo LootCrateInfo; // 0x340
	TArray<FKSLootItemInfo> LootItemInfos; // 0x368
};

struct UKSSwapHandlerProfile : UObject {
	TArray<FEquipPointDefinition> EquipPointDefinitions; // 0x28
};

struct UDistributionFloat : UDistribution {
	char bCanBeBaked : 1; // 0x30
	char bBakedDataSuccesfully : 1; // 0x30
};

struct ALevelBounds : AActor {
	UBoxComponent* BoxComponent; // 0x220
	bool bAutoUpdateBounds; // 0x228
};

struct UMovieSceneCameraCutTrack : UMovieSceneNameableTrack {
	bool bCanBlend; // 0x58
	TArray<UMovieSceneSection*> Sections; // 0x60
};

struct UBoxFalloff : UFieldNodeFloat {
	float Magnitude; // 0xb0
	float MinRange; // 0xb4
	float MaxRange; // 0xb8
	float Default; // 0xbc
	FTransform Transform; // 0xc0
	EFieldFalloffType Falloff; // 0xf0
};

struct UWBP_BulletedListEntry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	URichTextBlock* TextBlock; // 0x240
	FText Text; // 0x248
};

struct UWBP_BundleUpsellButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Anim_OnClick; // 0x528
	UWidgetAnimation* Anim_OnHover; // 0x530
	UImage* BtnFill; // 0x538
	UImage* BtnStroke; // 0x540
	UWBP_StoreDiscountTag_C* DiscountTag; // 0x548
	UButton* HitTarget; // 0x550
	UWBP_AsyncIcon_C* Icon; // 0x558
	UImage* Image; // 0x560
	UImage* Image_120; // 0x568
	UVerticalBox* LabelVerticalBox; // 0x570
	UTextBlock* Name; // 0x578
	FMulticastInlineDelegate OnRawClick; // 0x580
	UPUMG_StoreItem* StoreItem; // 0x590
	UAkAudioEvent* ClickSound; // 0x598
	UAkAudioEvent* HoverSound; // 0x5a0
};

struct UPGame_Effect : UObject {
	FPGame_Property m_Property; // 0x28
	bool m_bApplyOnInternal; // 0x4c
};

struct AKSProjectile_Grenade : AKSProjectile {
	TSoftClassPtr<UObject> OverlayWarningDisplayWidget; // 0x960
	FMulticastInlineDelegate OnGrenadeProximity; // 0x988
	EMarkerTeamVisibility MarkerTeamVisibility; // 0x998
	bool bTakeOverOnStopped; // 0x999
	float RepFuseTimeRemaining; // 0x99c
	float CurrentFuseTime; // 0x9a4
	FTimerHandle FuseTimerHandle; // 0x9a8
	FTimerHandle FuseCookPauseTimerHandle; // 0x9b0
	float ProximityWarningDelay; // 0x9b8
	bool bSetFuseOnBounce; // 0x9c8
	float BounceFuseTime; // 0x9cc
	bool bSetFuseOnStopped; // 0x9d0
	float StoppedFuseTime; // 0x9d4
	bool bExplodesOnStopped; // 0x9d8
	USphereComponent* DetectionSphere; // 0x9e0
	bool bGeneratesTouchSenseEvents; // 0x9e9
	UKSItemStimuliSourceComponent* StimuliSourceComponent; // 0x9f0
};

struct UMaterialExpressionDivide : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	float ConstA; // 0x68
	float ConstB; // 0x6c
};

struct UWBP_SidePanel_Left_C : UUserWidget {
	UNamedSlot* PanelContent; // 0x238
};

struct UParticleModuleLocationPrimitiveCylinder : UParticleModuleLocationPrimitiveBase {
	char RadialVelocity : 1; // 0xb0
	FRawDistributionFloat StartRadius; // 0xb8
	FRawDistributionFloat StartHeight; // 0xe8
	CylinderHeightAxis HeightAxis; // 0x118
};

struct UKSKillLeaderTracker : UKSAccoladeTracker {
	FTrackedPlayers CurrentLeader; // 0xa0
	FTrackedPlayers TempNewLeader; // 0xb8
	int32_t HighestKillCount; // 0xd0
	TArray<FTrackedPlayers> TrackedPlayers; // 0xd8
};

struct USpinBox : UWidget {
	float Value; // 0x110
	FDelegate ValueDelegate; // 0x114
	FSpinBoxStyle WidgetStyle; // 0x128
	USlateWidgetStyleAsset* Style; // 0x410
	int32_t MinFractionalDigits; // 0x418
	int32_t MaxFractionalDigits; // 0x41c
	bool bAlwaysUsesDeltaSnap; // 0x420
	float Delta; // 0x424
	float SliderExponent; // 0x428
	FSlateFontInfo Font; // 0x430
	ETextJustify Justification; // 0x480
	float MinDesiredWidth; // 0x484
	bool ClearKeyboardFocusOnCommit; // 0x488
	bool SelectAllTextOnCommit; // 0x489
	FSlateColor ForegroundColor; // 0x490
	FMulticastInlineDelegate OnValueChanged; // 0x4b8
	FMulticastInlineDelegate OnValueCommitted; // 0x4c8
	FMulticastInlineDelegate OnBeginSliderMovement; // 0x4d8
	FMulticastInlineDelegate OnEndSliderMovement; // 0x4e8
	char bOverride_MinValue : 1; // 0x4f8
	char bOverride_MaxValue : 1; // 0x4f8
	char bOverride_MinSliderValue : 1; // 0x4f8
	char bOverride_MaxSliderValue : 1; // 0x4f8
	float MinValue; // 0x4fc
	float MaxValue; // 0x500
	float MinSliderValue; // 0x504
	float MaxSliderValue; // 0x508
};

struct UInterpTrackInstAkAudioRTPC : UInterpTrackInst {
	float LastUpdatePosition; // 0x28
};

struct UKSToastNotificationWidgetBase : UKSWidget {
	FMulticastInlineDelegate OnToastReceived; // 0x520
	int32_t MaxToastNotification; // 0x530
	int32_t CurrentToastCount; // 0x534
	bool IsBusy; // 0x538
	TArray<FToastData> ToastQueue; // 0x540
	TArray<FToastData> PostMatchToasts; // 0x550
};

struct UKSModInst_ProximityComponent : UKSPlayerModInstance {
	FMulticastInlineDelegate OnProximityActorAddedDel; // 0x1b8
	FMulticastInlineDelegate OnProximityActorRemovedDel; // 0x1c8
	float SphereRadius; // 0x1d8
	FKSProximityFilter ProximityFilter; // 0x1e0
	bool bDebugShowSphere; // 0x208
	USphereComponent* ManagedSphereComponent; // 0x210
	UKSProximityComponent* ManagedProximityComponent; // 0x218
	TArray<TWeakObjectPtr<AActor>> RepOverlappedActors; // 0x230
};

struct UNavigationPath : UObject {
	FMulticastInlineDelegate PathUpdatedNotifier; // 0x28
	TArray<FVector> PathPoints; // 0x38
	ENavigationOptionFlag RecalculateOnInvalidation; // 0x48
};

struct UNiagaraDataInterfaceVector4Curve : UNiagaraDataInterfaceCurveBase {
	FRichCurve XCurve; // 0x58
	FRichCurve YCurve; // 0xd8
	FRichCurve ZCurve; // 0x158
	FRichCurve WCurve; // 0x1d8
};

struct UWBP_WeaponMasteryBadge_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* LevelText; // 0x240
	UImage* Mastered; // 0x248
	UImage* MasteryMax; // 0x250
	UImage* Unmastered; // 0x258
	UWidgetSwitcher* WidgetSwitcher_88; // 0x260
};

struct UGameViewportClient : UScriptViewportClient {
	UConsole* ViewportConsole; // 0x40
	TArray<FDebugDisplayProperty> DebugProperties; // 0x48
	int32_t MaxSplitscreenPlayers; // 0x68
	UWorld* World; // 0x78
	UGameInstance* GameInstance; // 0x80
};

struct UParticleModuleRotationRate_Seeded : UParticleModuleRotationRate {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x60
};

struct UKSWeaponMasteryLevelUpSummary : UObject {
	TArray<FKSWeaponMasteryLevelUpSummaryEntry> MasteryEntries; // 0x28
};

struct UKSPayBackTracker : UKSAccoladeTracker {
	TArray<FTrackPlayerElim> PlayerElimTracker; // 0xa0
};

struct UANotifyState_MeleeCombo_C : UAnimNotifyState {
	FName ComboTarget; // 0x30
	bool IsQuickMelee; // 0x38
};

struct UCheatManager : UObject {
	ADebugCameraController* DebugCameraControllerRef; // 0x28
	ADebugCameraController* DebugCameraControllerClass; // 0x30
};

struct AKillCamController_C : AKSKillCamController {
	FPointerToUberGraphFrame UberGraphFrame; // 0xf30
};

struct UCanvasRenderTarget2D : UTextureRenderTarget2D {
	FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0xe8
	TWeakObjectPtr<UWorld> World; // 0xf8
	bool bShouldClearRenderTargetOnReceiveUpdate; // 0x100
};

struct UKSActiveDurationBar : UKSWidget {
	UKSPlayerModInstance* BoundPlayerMod; // 0x550
};

struct UKSPlayerInventoryHelper : UPUMG_PlayerInventoryHelper {
	TMap<FInventoryId, FMulticastInlineDelegate> DynamicCallbacksPerInventoryId; // 0x118
	TMap<FInventoryTypeId, FMulticastInlineDelegate> DynamicCallbacksPerInventoryTypeId; // 0x168
};

struct UKSPlayerAmmoLoaderWidget : UKSViewedActiveWeaponWidget {
	TSoftClassPtr<UObject> PendingAmmoWidgetClass; // 0x538
	UKSAmmoWidget* LoadedAmmoWidgetClass; // 0x560
};

struct USocialChatManager : UObject {
	TMap<TWeakObjectPtr<USocialUser>, USocialPrivateMessageChannel*> DirectChannelsByTargetUser; // 0x78
	TMap<FString, USocialChatRoom*> ChatRoomsById; // 0xc8
	TMap<FString, USocialReadOnlyChatChannel*> ReadOnlyChannelsByDisplayName; // 0x118
	bool bEnableChatSlashCommands; // 0x168
	TMap<FUniqueNetIdRepl, USocialGroupChannel*> GroupChannels; // 0x170
};

struct UScaleBoxSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UKSMapWidgetBase : UKSWidget {
	EDisplayType MapDisplayType; // 0x520
	bool bWasVisible; // 0x521
	uint64_t LastUpdateFrame; // 0x528
	TArray<FMapIconWidgetConfig> MapIconWidgetsToPool; // 0x530
	TArray<UKSMapIconWidgetPool*> MapIconWidgetPool; // 0x540
	TArray<UKSMapIconWidgetBase*> MapIconWidgetPoolShown; // 0x550
	TMap<AKSPlayerState*, UKSMapIconWidgetBase*> PlayerIconMap; // 0x5b0
	bool AbsoluteRotation; // 0x640
	bool CanBeScrambled; // 0x641
	bool IsScrambled; // 0x642
	bool bAffectedByScramble; // 0x643
};

struct UKSPlayerBehaviorRuleComponent : UKSBehaviorRuleBaseComponent {
	AController* FilteredPlayer; // 0xb0
	AKSTeamState* FilteredTeam; // 0xb8
	EPlayerBehaviorChangeReact PlayerSetChangeReaction; // 0xc0
};

struct ACineCameraActor : ACameraActor {
	FCameraLookatTrackingSettings LookatTrackingSettings; // 0x7a0
};

struct UKSBTTask_SetWeaponRanges : UBTTaskNode {
	UDataTable* WeaponRangeConfigTable; // 0x70
	FGameplayTag EquipPoint; // 0x78
	FBlackboardKeySelector IdealAttackRangeKey; // 0x80
	FBlackboardKeySelector StartAttackRangeKey; // 0xa8
};

struct UAutomationTestSettings : UObject {
	TArray<FString> EngineTestModules; // 0x28
	TArray<FString> EditorTestModules; // 0x38
	FSoftObjectPath AutomationTestmap; // 0x48
	TArray<FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x60
	TArray<FSoftObjectPath> AssetsToOpen; // 0x70
	FBuildPromotionTestSettings BuildPromotionTest; // 0x80
	FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x270
	FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2a0
	FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2b0
	TArray<FString> TestLevelFolders; // 0x2e0
	TArray<FExternalToolDefinition> ExternalTools; // 0x2f0
	TArray<FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x300
	TArray<FLaunchOnTestSettings> LaunchOnSettings; // 0x310
	FIntPoint DefaultScreenshotResolution; // 0x320
};

struct URadialForceComponent : USceneComponent {
	float Radius; // 0x208
	ERadialImpulseFalloff Falloff; // 0x20c
	float ImpulseStrength; // 0x210
	char bImpulseVelChange : 1; // 0x214
	char bIgnoreOwningActor : 1; // 0x214
	float ForceStrength; // 0x218
	float DestructibleDamage; // 0x21c
	TArray<EObjectTypeQuery> ObjectTypesToAffect; // 0x220
};

struct UClothConfigNv : UClothConfigCommon {
	EClothingWindMethodNv ClothingWindMethod; // 0x28
	FClothConstraintSetupNv VerticalConstraint; // 0x2c
	FClothConstraintSetupNv HorizontalConstraint; // 0x3c
	FClothConstraintSetupNv BendConstraint; // 0x4c
	FClothConstraintSetupNv ShearConstraint; // 0x5c
	float SelfCollisionRadius; // 0x6c
	float SelfCollisionStiffness; // 0x70
	float SelfCollisionCullScale; // 0x74
	FVector Damping; // 0x78
	float Friction; // 0x84
	float WindDragCoefficient; // 0x88
	float WindLiftCoefficient; // 0x8c
	FVector LinearDrag; // 0x90
	FVector AngularDrag; // 0x9c
	FVector LinearInertiaScale; // 0xa8
	FVector AngularInertiaScale; // 0xb4
	FVector CentrifugalInertiaScale; // 0xc0
	float SolverFrequency; // 0xcc
	float StiffnessFrequency; // 0xd0
	float GravityScale; // 0xd4
	FVector GravityOverride; // 0xd8
	bool bUseGravityOverride; // 0xe4
	float TetherStiffness; // 0xe8
	float TetherLimit; // 0xec
	float CollisionThickness; // 0xf0
	float AnimDriveSpringStiffness; // 0xf4
	float AnimDriveDamperStiffness; // 0xf8
	EClothingWindMethod_Legacy WindMethod; // 0xfc
	FClothConstraintSetup_Legacy VerticalConstraintConfig; // 0x100
	FClothConstraintSetup_Legacy HorizontalConstraintConfig; // 0x110
	FClothConstraintSetup_Legacy BendConstraintConfig; // 0x120
	FClothConstraintSetup_Legacy ShearConstraintConfig; // 0x130
};

struct AMaterialInstanceActor : AActor {
	TArray<AActor*> TargetActors; // 0x220
};

struct UKSBTTask_MakeNoiseEvent : UBTTaskNode {
	float Loudness; // 0x70
	FName EventTag; // 0x74
};

struct AKSDropshipInterior : AActor {
	USceneComponent* DefaultSceneRoot; // 0x220
	USceneComponent* SharedRoot; // 0x228
	FVector StartingDoorLocation; // 0x230
	FVector StartingMeshLocation1; // 0x23c
	FVector StartingMeshLocation2; // 0x248
	FRotator StartingDoorRotator; // 0x254
	FRotator StartingMeshRotator1; // 0x260
	FRotator StartingMeshRotator2; // 0x26c
};

struct UNavigationQueryFilter : UObject {
	TArray<FNavigationFilterArea> Areas; // 0x28
	FNavigationFilterFlags IncludeFlags; // 0x38
	FNavigationFilterFlags ExcludeFlags; // 0x3c
};

struct UKSAIActorCollection : UActorComponent {
	TArray<AKSDropLocation*> DropLocations; // 0xb0
	UDataTable* BotNameTable; // 0xc0
};

struct ULevel : UObject {
	UWorld* OwningWorld; // 0xb8
	UModel* Model; // 0xc0
	TArray<UModelComponent*> ModelComponents; // 0xc8
	ULevelActorContainer* ActorCluster; // 0xd8
	int32_t NumTextureStreamingUnbuiltComponents; // 0xe0
	int32_t NumTextureStreamingDirtyResources; // 0xe4
	ALevelScriptActor* LevelScriptActor; // 0xe8
	ANavigationObjectBase* NavListStart; // 0xf0
	ANavigationObjectBase* NavListEnd; // 0xf8
	TArray<UNavigationDataChunk*> NavDataChunks; // 0x100
	float LightmapTotalSize; // 0x110
	float ShadowmapTotalSize; // 0x114
	TArray<FVector> StaticNavigableGeometry; // 0x118
	TArray<FGuid> StreamingTextureGuids; // 0x128
	FGuid LevelBuildDataId; // 0x1d0
	UMapBuildDataRegistry* MapBuildData; // 0x1e0
	FIntVector LightBuildLevelOffset; // 0x1e8
	ELightingScenarioQuality LightingScenarioQuality; // 0x1f4
	char bIsLightingScenario : 1; // 0x1f5
	char bTextureStreamingRotationChanged : 1; // 0x1f5
	char bStaticComponentsRegisteredInStreamingManager : 1; // 0x1f5
	char bIsVisible : 1; // 0x1f5
	AWorldSettings* WorldSettings; // 0x248
	TArray<UAssetUserData*> AssetUserData; // 0x258
	TArray<FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors; // 0x278
};

struct UPlatformInterfaceWebResponse : UObject {
	FString OriginalURL; // 0x28
	int32_t ResponseCode; // 0x38
	int32_t Tag; // 0x3c
	FString StringResponse; // 0x40
	TArray<char> BinaryResponse; // 0x50
};

struct UKSWeaponAttachment_ExtMagazine : UKSWeaponAttachment {
	int32_t ClipSize; // 0x2f8
};

struct UKSBTTask_FindGrenadeTarget : UBTTaskNode {
	FBlackboardKeySelector TargetKey; // 0x70
	FBlackboardKeySelector WeaponOverrideKey; // 0x98
	FBlackboardKeySelector OutTargetLocationKey; // 0xc0
	FBlackboardKeySelector OutIntendedTargetLocationKey; // 0xe8
	bool bDrawDebug; // 0x110
};

struct UScrollBox : UPanelWidget {
	FScrollBoxStyle WidgetStyle; // 0x128
	FScrollBarStyle WidgetBarStyle; // 0x350
	USlateWidgetStyleAsset* Style; // 0x820
	USlateWidgetStyleAsset* BarStyle; // 0x828
	EOrientation Orientation; // 0x830
	ESlateVisibility ScrollBarVisibility; // 0x831
	EConsumeMouseWheel ConsumeMouseWheel; // 0x832
	FVector2D ScrollbarThickness; // 0x834
	FMargin ScrollbarPadding; // 0x83c
	bool AlwaysShowScrollbar; // 0x84c
	bool AlwaysShowScrollbarTrack; // 0x84d
	bool AllowOverscroll; // 0x84e
	bool bAnimateWheelScrolling; // 0x84f
	EDescendantScrollDestination NavigationDestination; // 0x850
	float NavigationScrollPadding; // 0x854
	EScrollWhenFocusChanges ScrollWhenFocusChanges; // 0x858
	bool bAllowRightClickDragScrolling; // 0x859
	float WheelScrollMultiplier; // 0x85c
	FMulticastInlineDelegate OnUserScrolled; // 0x860
};

struct UStandardButtonNoArt_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Highlight; // 0x528
	UNamedSlot* HighlightGroup; // 0x530
	UButton* LoadoutButton; // 0x538
	UNamedSlot* NamedSlot_1; // 0x540
	UNamedSlot* TextGroup; // 0x548
	FMulticastInlineDelegate OnClicked; // 0x550
	FMulticastInlineDelegate OnHovered; // 0x560
	FMulticastInlineDelegate OnUnhovered; // 0x570
	UAkAudioEvent* ClickStandardButtonNoArtSFX; // 0x580
	UAkAudioEvent* HoverStandardButtonNoArtSFX; // 0x588
};

struct UKSTitle : UKSItem {
	FText TitleText; // 0x250
};

struct UWindDirectionalSourceComponent : USceneComponent {
	float Strength; // 0x208
	float Speed; // 0x20c
	float MinGustAmount; // 0x210
	float MaxGustAmount; // 0x214
	float Radius; // 0x218
	char bPointWind : 1; // 0x21c
};

struct UWBP_WeaponHubCosmeticItem_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animOnHover; // 0x528
	UImage* BtnBkg; // 0x530
	UImage* BtnBkgHover; // 0x538
	UImage* BtnFrame; // 0x540
	UOverlay* buttonwrapper; // 0x548
	UImage* Click; // 0x550
	UButton* HitTarget; // 0x558
	UWBP_KSCosmeticItemDisplay_C* ItemDisplay; // 0x560
	UWBP_ItemInfoContainer_C* ItemInfo; // 0x568
	UHorizontalBox* Root; // 0x570
	FMulticastInlineDelegate onSelected; // 0x578
};

struct UMovieSceneCameraShakeTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> CameraShakeSections; // 0x58
};

struct UKSPlayerMod_Revive : UKSPlayerMod {
	float ReviveTimeMultiplier; // 0x330
	bool bHasTextOverride; // 0x334
	FText ReviveText; // 0x338
	FName ReviveInteractionMode; // 0x350
	float HealChargeMultiplier; // 0x358
};

struct UWBP_AdditiveImage_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Texture; // 0x240
	FSlateBrush DefaultBrush; // 0x248
	UMaterialInterface* BrushMaterial; // 0x2d0
	FName ParameterName; // 0x2d8
};

struct UBloodEffectCurveComponent_C : UKSBloodSplatterComponent {
	FPointerToUberGraphFrame UberGraphFrame; // 0x138
};

struct UParticleChannelContainerWrapper : UObject {
	FParticleChannelContainer Channels; // 0x28
};

struct AKSDropshipExterior : AActor {
	USceneComponent* DefaultSceneRoot; // 0x220
	USceneComponent* SharedRoot; // 0x228
	FVector StartingDoorLocation; // 0x230
	FVector StartingMeshLocation1; // 0x23c
	FVector StartingMeshLocation2; // 0x248
	FRotator StartingDoorRotator; // 0x254
	FRotator StartingMeshRotator1; // 0x260
	FRotator StartingMeshRotator2; // 0x26c
};

struct UKSDailyChallengeViewBase : UKSWidget {
	float ChallengeTimerRefreshRate; // 0x520
};

struct UKSActivityRewardCondition_WeaponUsed_OriginalAffiliation : UKSActivityRewardCondition {
	FKSAffiliationFilter AffiliationFilter; // 0x30
};

struct UKSBTTask_UpdateCachedWeapon : UBTTaskNode {
	FBlackboardKeySelector CachedWeaponClassKey; // 0x70
};

struct UWBP_RoguePerksPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_PerkDescSlot_C* WBP_PerkDescSlot; // 0x528
	UWBP_PerkDescSlot_C* WBP_PerkDescSlot_2; // 0x530
	UWBP_PerkDescSlot_C* WBP_PerkDescSlot_3; // 0x538
	UWBP_PerkDescSlot_C* WBP_PerkDescSlot_4; // 0x540
	UWBP_PerkDescSlot_C* WBP_PerkDescSlot_5; // 0x548
	UWBP_PerkDescSlot_C* WBP_PerkDescSlot_6; // 0x550
	UWBP_PerkTierHeader_C* WBP_PerkTierHeader; // 0x558
	UWBP_PerkTierHeader_C* WBP_PerkTierHeader_2; // 0x560
	UWBP_PerkTierHeader_C* WBP_PerkTierHeader_3; // 0x568
	UWBP_RoguePanelHeader_C* WBP_RoguePanelHeader; // 0x570
	UKSRogueDetailsWidget* RogueDetailsWidget; // 0x578
	UPUMG_StoreItem* StoreItem; // 0x580
};

struct ACameraShakeSourceActor : AActor {
	UCameraShakeSourceComponent* CameraShakeSourceComponent; // 0x220
};

struct USoundNodeSoundClass : USoundNode {
	USoundClass* SoundClassOverride; // 0x48
};

struct UMaterialExpressionPreviousFrameSwitch : UMaterialExpression {
	FExpressionInput CurrentFrame; // 0x40
	FExpressionInput PreviousFrame; // 0x54
};

struct URadialVector : UFieldNodeVector {
	float Magnitude; // 0xb0
	FVector Position; // 0xb4
};

struct AKSTeamState : AInfo {
	int32_t r_TeamNum; // 0x220
	bool bTeamEliminated; // 0x224
	bool bTeamEliminatedOrDowned; // 0x225
	FMulticastInlineDelegate OnTeamEliminated; // 0x228
	FMulticastInlineDelegate OnTeamEliminatedOrDowned; // 0x238
	FMulticastInlineDelegate OnTeamMemberEliminatedDel; // 0x248
	FMulticastInlineDelegate OnTeamMemberDownedDel; // 0x258
	TArray<AKSPlayerState*> AllMembers; // 0x280
	TArray<AKSPlayerState*> PlayerMembers; // 0x290
	FMulticastInlineDelegate OnMemberAdded; // 0x2b0
	FMulticastInlineDelegate OnMemberRemoved; // 0x2d8
	FKSRespawnConfig RespawnConfig; // 0x300
	int32_t Respawns; // 0x318
	FMulticastInlineDelegate OnRespawnsChangedDel; // 0x320
	FMulticastInlineDelegate OnRespawnQueueChangedDel; // 0x330
	FMulticastInlineDelegate OnRespawnConfigChangedDel; // 0x340
	TArray<AKSPlayerState*> RespawnQueue; // 0x350
	TArray<UKSPersistentPlayerData*> PersistentRespawnQueue; // 0x360
	int32_t Score; // 0x370
	int32_t IntraScore; // 0x374
	int32_t IntraScoreGoal; // 0x378
	int32_t RoundWins; // 0x37c
	int32_t RoundLosses; // 0x380
	FMulticastInlineDelegate OnScoreChanged; // 0x388
	FMulticastInlineDelegate OnIntraScoreChanged; // 0x398
	FMulticastInlineDelegate OnIntraScoreGoalChanged; // 0x3a8
	FMulticastInlineDelegate OnObjectiveRoleChanged; // 0x3b8
	EExtractionTeamType TeamType; // 0x3c8
	FMulticastInlineDelegate OnPingAdded; // 0x3d0
	FMulticastInlineDelegate OnPingRemoved; // 0x3e0
	FMulticastInlineDelegate OnPingChanged; // 0x3f0
	UKSJobSelectionComponent* JobSelectionClass; // 0x400
	UKSJobSelectionComponent* JobSelectionComponent; // 0x408
	FMulticastInlineDelegate OnJobSelectionComponentReady; // 0x410
	int32_t TotalKills; // 0x468
	int32_t TotalDeaths; // 0x46c
	int32_t TotalAssists; // 0x470
	int32_t SideNum; // 0x474
	int32_t LocalSideNum; // 0x478
	TArray<UKSPersistentPlayerData*> PersistentTeamMembers; // 0x480
	FMulticastInlineDelegate OnPersistentTeamMemberAdded; // 0x490
	FMulticastInlineDelegate OnPersistentTeamMemberRemoved; // 0x4b8
	FMulticastInlineDelegate OnTeamCanSurrenderChanged; // 0x4e0
	bool bTeamCanProposeSurrender; // 0x4f0
	FMultiPlayerSkinMapReplicator SkinMapReplicator; // 0x518
};

struct AKSVehicle : AWheeledVehicle {
	UKSVehicleMovementComponent4W* KSVehicleMovementComponent; // 0x2a0
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x2a8
	UKSInteractableComponent* InteractableComponent; // 0x2b0
	TArray<UKSVehicleSeatComponent*> Seats; // 0x2b8
	TMap<AKSCharacter*, UKSVehicleSeatComponent*> RiderMap; // 0x2c8
	FMulticastInlineDelegate OnVehicleSeatingChanged; // 0x318
	FText VehicleName; // 0x328
	float TimeToGetIn; // 0x340
	float MaxSpeedToEnter; // 0x344
	float MaxAngleFromVehicleToInteract; // 0x348
	float SwapToDriverSeatHoldTime; // 0x34c
	AKSCharacter* Driver; // 0x350
	TArray<FKSRiderSeatPair> Riders; // 0x358
	TArray<AKSCharacter*> Interacters; // 0x368
	bool PreventRiderSilhouette; // 0x379
	float DetachedParachuteLinearDamping; // 0x37c
	float TimeUntilParachuteDestroyed; // 0x380
	FVector ParachuteDetachImpulse; // 0x384
	TArray<FName> ParachuteImpulseBoneNames; // 0x390
	USkeletalMeshComponent* ParachuteMesh; // 0x3a0
	FMulticastInlineDelegate OnManualDetachmentAvailable; // 0x3e8
	FMulticastInlineDelegate OnManualDetachmentUnavailable; // 0x3f8
	TArray<FName> ValidInteractionTypes; // 0x410
	USpringArmComponent* SpringArm; // 0x420
	UCameraComponent* MainCamera; // 0x428
	float RiderCameraBlendTime; // 0x448
	float RiderCameraBlendExponent; // 0x44c
	float CameraXTurnRate; // 0x450
	float CameraYTurnRate; // 0x454
	float CameraDeadZoneRate; // 0x458
	float CameraMinHorizontalAngle; // 0x45c
	float CameraMaxHorizontalAngle; // 0x460
	float CameraMinVerticalAngle; // 0x464
	float CameraMaxVerticalAngle; // 0x468
	FReplicatedViewInfo ViewInfo; // 0x46c
	float MaxHealth; // 0x474
	float CurrentHealth; // 0x478
	float CurrentHealthStage; // 0x480
	FMulticastInlineDelegate OnVehicleHealthChanged; // 0x488
	bool Destroyed; // 0x498
	FVector LocalImpulsePosition; // 0x49c
	UStaticMeshComponent* DestroyedMesh; // 0x4a8
	TArray<UPrimitiveComponent*> DamageableComponents; // 0x4b0
	TMap<float, FKSVehicleDestructionStage> HealthStages; // 0x4c8
	TMap<EDamageCategory, float> Vulnerabilities; // 0x518
	float DamageImpulseMultiplier; // 0x568
	UKSWeaponAsset* DestructionDamageWeapon; // 0x570
	UDamageType* DestructionDamageTypeClass; // 0x578
	float MinSpeedToDamageHitPlayer; // 0x5c0
	float MaxSpeedToDamageHitPlayer; // 0x5c4
	float MinPlayerDamageMultiplier; // 0x5c8
	float MaxPlayerDamageMultiplier; // 0x5cc
	float PlayerDamageCooldown; // 0x5d0
	float MinSpeedForImpactDamage; // 0x5d4
	float MaxSpeedForImpactDamage; // 0x5d8
	float MinImpactDamage; // 0x5dc
	float MaxImpactDamage; // 0x5e0
	float VehicleDamageCooldown; // 0x5e4
	float MinImpactAngleFromVehicleUp; // 0x5e8
	float MaxImpactAngleFromVehicleUp; // 0x5ec
	float MinAngleToSlideCorrect; // 0x5f0
	float MaxAngleToSlideCorrect; // 0x5f4
	float MaxSlideCorrectionSpeed; // 0x5f8
	UKSWeaponAsset* ImpactDamageWeapon; // 0x608
	UDamageType* ImpactDamageTypeClass; // 0x610
	UCapsuleComponent* PlayerHitComponent; // 0x618
};

struct UAttachmentCollection : UItemCollection {
	FText AttachmentCollectionName; // 0x98
	FText AttachmentCollectionDescription; // 0xb0
};

struct UNiagaraComponentPool : UObject {
	TMap<UNiagaraSystem*, FNCPool> WorldParticleSystemPools; // 0x28
};

struct UMovieSceneParticleParameterTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> Sections; // 0x58
};

struct USkeletalMesh : UStreamableRenderAsset {
	USkeleton* Skeleton; // 0x60
	FBoxSphereBounds ImportedBounds; // 0x68
	FBoxSphereBounds ExtendedBounds; // 0x84
	FVector PositiveBoundsExtension; // 0xa0
	FVector NegativeBoundsExtension; // 0xac
	TArray<FSkeletalMaterial> Materials; // 0xb8
	TArray<FBoneMirrorInfo> SkelMirrorTable; // 0xc8
	TArray<FSkeletalMeshLODInfo> LODInfo; // 0xd8
	FPerPlatformInt MinLOD; // 0x138
	FPerPlatformInt MaxLod; // 0x13c
	FPerPlatformBool DisableBelowMinLodStripping; // 0x140
	EAxis SkelMirrorAxis; // 0x141
	EAxis SkelMirrorFlipAxis; // 0x142
	char bWillNeverMergeMesh : 1; // 0x143
	char bUseFullPrecisionUVs : 1; // 0x143
	char bUseHighPrecisionTangentBasis : 1; // 0x143
	char bSmoothNormalsInVertexColor : 1; // 0x143
	char bVertexCurvature : 1; // 0x143
	char bHasBeenSimplified : 1; // 0x143
	char bHasVertexColors : 1; // 0x143
	char bEnablePerPolyCollision : 1; // 0x144
	UBodySetup* BodySetup; // 0x148
	UPhysicsAsset* PhysicsAsset; // 0x150
	UPhysicsAsset* ShadowPhysicsAsset; // 0x158
	TArray<UNodeMappingContainer*> NodeMappingData; // 0x160
	TArray<UMorphTarget*> MorphTargets; // 0x170
	UAnimInstance* PostProcessAnimBlueprint; // 0x2f8
	TArray<UClothingAssetBase*> MeshClothingAssets; // 0x300
	FSkeletalMeshSamplingInfo SamplingInfo; // 0x310
	TArray<UAssetUserData*> AssetUserData; // 0x340
	TArray<USkeletalMeshSocket*> Sockets; // 0x358
	TArray<FSkinWeightProfileInfo> SkinWeightProfiles; // 0x378
};

struct UAnimCompress_RemoveTrivialKeys : UAnimCompress {
	float MaxPosDiff; // 0x40
	float MaxAngleDiff; // 0x44
	float MaxScaleDiff; // 0x48
};

struct UMovieSceneAkAudioRTPCSection : UMovieSceneSection {
	UAkRtpc* RTPC; // 0xe0
	FString Name; // 0xe8
	FRichCurve FloatCurve; // 0xf8
	FMovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper; // 0x178
	FMovieSceneFloatChannel RTPCChannel; // 0x1a8
};

struct UKSEmoteCosmeticComponent : UKSEquipmentCosmeticComponent {
	char PawnRotationLockId; // 0x120
	int32_t EmotionInstanceId; // 0x124
	UKSEmote* EmoteAsset; // 0x158
	uint16_t PlayTicker; // 0x160
	UMultiSkinObject* SkinObject; // 0x168
	UDynamicSkinTable* SkinTable; // 0x170
	bool bIsInitialized; // 0x218
	bool bIsPlaying; // 0x219
	bool bShouldLoop; // 0x21a
	FVector LastEmotePlayedLocation; // 0x21c
	FKSEmoteInterruptTickFunction InterruptTick; // 0x230
	TArray<UKSEmoteCosmeticSubInstance*> SubInstances; // 0x288
};

struct UParticleModuleColor_Seeded : UParticleModuleColor {
	FParticleRandomSeedInfo RandomSeedInfo; // 0xb0
};

struct UKSPollBase : UObject {
	EPollAudience PollAudience; // 0x28
	FText PollTitle; // 0x30
	FText PollSuccessfulMessage; // 0x48
	FText PollUnsuccessfulMessage; // 0x60
	FText AffirmativeOption; // 0x78
	FText NegativeOption; // 0x90
	FText AffirmativeOptionVoteCastMessage; // 0xa8
	FText NegativeOptionVoteCastMessage; // 0xc0
	float PollLengthInSeconds; // 0xd8
};

struct UKSRoundedSquareDeadZoneFilter : UKSAnalogStickFilter {
	float CardinalSize; // 0x38
	float CornerRadius; // 0x3c
};

struct UEdGraphNode_Documentation : UEdGraphNode {
	FString Link; // 0x98
	FString Excerpt; // 0xa8
};

struct UKSWeaponAttachment_VarScope : UKSWeaponAttachment_Scope {
	TArray<float> ScopeSettings; // 0x2f8
	EKSVariableScopeType ScopeType; // 0x308
};

struct UWBP_LoginRewards_ClaimScreen_C : UKSLoginRewardsModal {
	FPointerToUberGraphFrame UberGraphFrame; // 0x548
	UWidgetAnimation* TransitionIn; // 0x550
	UWidgetAnimation* TransitionOut; // 0x558
	UImage* background; // 0x560
	UImage* Decro; // 0x568
	UImage* Image_213; // 0x570
	UImage* Image_221; // 0x578
	UTextBlock* Text; // 0x580
	UTextBlock* TimeFrame; // 0x588
	UWBP_LoginRewardsGrid_C* WBP_LoginRewardsGrid; // 0x590
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x598
	UWBP_StandardButtonLarge_C* WBP_StandardButtonLarge; // 0x5a0
	UWBP_Subtitle_C* WBP_Subtitle; // 0x5a8
	UAkAudioEvent* Sound_ClaimedItem; // 0x5b0
};

struct UWBP_ChallengeEntry_SeasonalMastery_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* background; // 0x240
	UTextBlock* ChallengeDescription; // 0x248
	UTextBlock* ChallengeProgressText; // 0x250
	UTextBlock* CompletedText; // 0x258
	UImage* HeaderBG; // 0x260
	UWBP_ProgressEarnedBar_C* ProgressBar; // 0x268
	UWidgetSwitcher* ProgressTextSwitcher; // 0x270
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE; // 0x278
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE_01; // 0x280
	UHorizontalBox* RewardsContainer; // 0x288
	UHorizontalBox* TimeRemainingWrapper; // 0x290
	bool IsComplete; // 0x298
};

struct UBTService_BlackboardBase : UBTService {
	FBlackboardKeySelector BlackboardKey; // 0x70
};

struct UKSActivityRewardCondition_TimeSinceReload : UKSActivityRewardCondition {
	float MinSecondsSinceLastReload; // 0x30
	float MaxSecondsSinceLastReload; // 0x34
	bool SucceedIfNeverReloaded; // 0x38
};

struct UWBP_CreateCustomGame_MapButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnHover; // 0x528
	UImage* ActiveFrame; // 0x530
	UButton* HitTarget; // 0x538
	UWBP_QuickPlay_MapThumbnail_C* WBP_QuickPlay_MapThumbnail; // 0x540
	FMulticastInlineDelegate OnMapSelected; // 0x548
	FMapDetail MapInfo; // 0x558
	int32_t MapId; // 0x5a0
	FMulticastInlineDelegate OnMapHovered; // 0x5a8
};

struct UMaterialExpressionArctangent2Fast : UMaterialExpression {
	FExpressionInput Y; // 0x40
	FExpressionInput X; // 0x54
};

struct UWBP_CompareFoundersRow_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UOverlay* StandardCheck; // 0x240
	UOverlay* StarterCheck; // 0x248
	UNamedSlot* TextSlot; // 0x250
	bool InStarter; // 0x258
	bool InStandard; // 0x259
};

struct UPanelWidget : UWidget {
	TArray<UPanelSlot*> Slots; // 0x110
};

struct UMovieSceneEventTrack : UMovieSceneNameableTrack {
	char bFireEventsWhenForwards : 1; // 0x58
	char bFireEventsWhenBackwards : 1; // 0x58
	EFireEventsAtPosition EventPosition; // 0x5c
	TArray<FMovieSceneObjectBindingID> EventReceivers; // 0x60
	TArray<UMovieSceneSection*> Sections; // 0x70
};

struct UUMGSequencePlayer : UObject {
	UWidgetAnimation* Animation; // 0x408
};

struct UBTDecorator_KeepInCone : UBTDecorator {
	float ConeHalfAngle; // 0x68
	FBlackboardKeySelector ConeOrigin; // 0x70
	FBlackboardKeySelector Observed; // 0x98
	char bUseSelfAsOrigin : 1; // 0xc0
	char bUseSelfAsObserved : 1; // 0xc0
};

struct UKSAnimInstance : USkinnedAnimInstance {
	bool bIsInLobbyViewer; // 0x2c8
	bool bRecordAnimStats; // 0x2c9
	UKSAnimationAuditComponent* AuditingComponent; // 0x2d0
	bool bPlayingMirrorTransition; // 0x2e8
	bool bAnimMirrorDelay; // 0x2e9
	bool bDisableMirrorPose; // 0x2ea
	bool bWantsMirroredPoseCosmetic; // 0x2eb
	float PoseMirrorAlphaCosmetic; // 0x2ec
	float MirrorInterpSpeed; // 0x2f0
	float MirrorInterpSpeedEngaged; // 0x2f4
	float ShoulderSwapProgress; // 0x2f8
	ECameraShoulder CurrentShoulderCosmetic; // 0x2fc
	FBoneMirrorConfig BoneMirrorConfig; // 0x300
	ECameraShoulder CurrentShoulder; // 0x320
	bool bWantsMirroredPose; // 0x321
	float PoseMirrorAlpha; // 0x324
	bool bIsShieldActive; // 0x328
};

struct UKSDamageTypeFire : UKSDamageTypeBase {
	float FireDuration; // 0x138
};

struct UAkAuxBus : UAkAssetBase {
	UAkAudioBank* RequiredBank; // 0x58
};

struct UWBP_CustomGameConfirmation_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UHorizontalBox* buttonwrapper; // 0x528
	UPopupButton_C* CancelButton; // 0x530
	UPopupButton_C* CreateButton; // 0x538
	UTextBlock* CustomMatchMsg; // 0x540
	UImage* Decro; // 0x548
	UImage* Image_114; // 0x550
	UKSAsyncImage* MapImage; // 0x558
	USizeBox* MapImageContainer; // 0x560
	UTextBlock* Title; // 0x568
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x570
	FMulticastInlineDelegate OnCancelLobby; // 0x578
	FMulticastInlineDelegate OnCreateLobby; // 0x588
	UKSQueueDataFactory* QueueDataFactory; // 0x598
	int32_t QueueId; // 0x5a0
	int32_t MapId; // 0x5a4
};

struct AKSAimAssistActor : AActor {
	int32_t TeamNumOverride; // 0x230
	UKSAimAssistAnchorComponent* AimAssistAnchor; // 0x238
	TMap<FName, EHitLocationType> BoneToHitLocationTypeMap; // 0x248
	bool bCanBeKilled; // 0x298
	float MaxHealth; // 0x29c
	bool bLocallyKilled; // 0x2a0
	FAimAssistActorHealthInfo HealthInfo; // 0x2a4
};

struct AKSPlayerModManager : AInfo {
	bool bOnlyChargeModsWhenAlive; // 0x220
	AKSPlayerState* PlayerStateOwner; // 0x228
	TArray<UKSPlayerModInstance*> ActiveMods; // 0x248
};

struct UOnlineHotfixManager : UObject {
	FString OSSName; // 0x1e0
	FString HotfixManagerClassName; // 0x1f0
	FString DebugPrefix; // 0x200
	TArray<UObject*> AssetsHotfixedFromIniFiles; // 0x210
};

struct USoundClass : UObject {
	FSoundClassProperties Properties; // 0x28
	TArray<USoundClass*> ChildClasses; // 0x88
	TArray<FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0x98
	FSoundModulation Modulation; // 0xa8
	USoundClass* ParentClass; // 0xb8
};

struct USoundfieldEndpointSubmix : USoundSubmixBase {
	FName SoundfieldEndpointType; // 0x38
	UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x40
	USoundfieldEndpointSettingsBase* EndpointSettings; // 0x48
	USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x50
	USoundfieldEncodingSettingsBase* EncodingSettings; // 0x58
	TArray<USoundfieldEffectBase*> SoundfieldEffectChain; // 0x60
};

struct AAkSpotReflector : AActor {
	UAkAuxBus* EarlyReflectionAuxBus; // 0x220
	FString EarlyReflectionAuxBusName; // 0x228
	UAkAcousticTexture* AcousticTexture; // 0x238
	float DistanceScalingFactor; // 0x240
	float Level; // 0x244
};

struct USkeletalMeshComponentBudgeted : USkeletalMeshComponent {
	char bAutoRegisterWithBudgetAllocator : 1; // 0xba8
	char bAutoCalculateSignificance : 1; // 0xba8
	char bShouldUseActorRenderedFlag : 1; // 0xba8
};

struct UCullingField : UFieldNodeBase {
	UFieldNodeBase* Culling; // 0xb0
	UFieldNodeBase* Field; // 0xb8
	EFieldCullingOperationType Operation; // 0xc0
};

struct UAvoidanceManager : UObject {
	float DefaultTimeToLive; // 0x30
	float LockTimeAfterAvoid; // 0x34
	float LockTimeAfterClean; // 0x38
	float DeltaTimeToPredict; // 0x3c
	float ArtificialRadiusExpansion; // 0x40
	float TestHeightDifference; // 0x44
	float HeightCheckMargin; // 0x48
};

struct UWBP_SettingsRadio_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover_Selected; // 0x528
	UWidgetAnimation* Hover; // 0x530
	UWidgetAnimation* Select; // 0x538
	UButton* RadioButton; // 0x540
	UTextBlock* RadioText; // 0x548
	FText DisplayText; // 0x550
	FMulticastInlineDelegate On Radio Button Selected; // 0x568
	bool bSelected; // 0x578
	UAkAudioEvent* HoverSettingsRadioSFX; // 0x580
	UAkAudioEvent* ClickSettingsRadioSFX; // 0x588
};

struct UKSAkComponent : UAkComponent {
	EOcclusionType OcclusionType; // 0x3f0
	float MinTimeBetweenOcclusionUpdates; // 0x3f4
	float OcclusionDistanceMultiplier; // 0x3f8
	int32_t OcclusionInterpolationMilliseconds; // 0x3fc
	float CurrentObstruction; // 0x400
	float CurrentOcclusion; // 0x404
	bool RequiresListenerDistance; // 0x40c
	float MinTimeBetweenDistanceUpdates; // 0x410
	bool RequiresListenerDirection; // 0x418
	float MinTimeBetweenDirectionUpdates; // 0x41c
	UBakedOcclusionLUT* LUT; // 0x428
	TArray<UAkAudioEvent*> PendingStopEvents; // 0x430
	TMap<int32_t, UAkAudioEvent*> LoopIdToStopEventMap; // 0x440
};

struct AFavoritePreviewActor_C : AKSJobSelectPreviewActor_Lobby {
	UFavoritePreviewLoadoutComponent* FavoritePreviewLoadout; // 0x5c8
};

struct UBrightLobbyHeader_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	TArray<EPUMG_LoginState> LoggedOutStates; // 0x528
	UPUMG_LoginDataFactory* LoginDataFactory; // 0x538
};

struct UJobLoadout : UObject {
	UKSJobItem* JobItem; // 0x28
	TMap<EJobLoadoutSlot, UKSItem*> SlotItems; // 0x30
};

struct UWBP_Social_Header_Cosmetic_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_AsyncIcon_C* AvatarIcon; // 0x528
	UButton* DNDToggleBtn; // 0x530
	UTextBlock* NameLabel; // 0x538
	UKSAsyncImage* PlayerBanner; // 0x540
	UWBP_ControllerPrompt_C* PlayerStatusGamepadCallout; // 0x548
	UWBP_PlayerStatus_ContextMenu_C* WBP_PlayerStatus_ContextMenu; // 0x550
	UKSPlayerInfo* CurrentPlayerInfo; // 0x558
	FMulticastInlineDelegate OnNavigationReady; // 0x560
	FMulticastInlineDelegate OnMenuShown; // 0x570
	FMulticastInlineDelegate OnMenuHidden; // 0x580
	UAkAudioEvent* ClickSocialHeaderCosmeticSFX; // 0x590
};

struct UPGameBTComposite_Random : UBTCompositeNode {
	TArray<float> Probabilities; // 0x90
};

struct UAkItemProperties : UWidget {
	FMulticastInlineDelegate OnSelectionChanged; // 0x110
	FMulticastInlineDelegate OnPropertyDragged; // 0x120
};

struct UAISense_Sight : UAISense {
	int32_t MaxTracesPerTick; // 0x148
	int32_t MinQueriesPerTimeSliceCheck; // 0x14c
	double MaxTimeSlicePerTick; // 0x150
	float HighImportanceQueryDistanceThreshold; // 0x158
	float MaxQueryImportance; // 0x160
	float SightLimitQueryImportance; // 0x164
};

struct ABP_LobbyMode_C : APGame_GameModeBase {
	USceneComponent* DefaultSceneRoot; // 0x3c8
};

struct UEditableGameplayTagQueryExpression_NoExprMatch : UEditableGameplayTagQueryExpression {
	TArray<UEditableGameplayTagQueryExpression*> Expressions; // 0x28
};

struct UMaterialExpressionTextureBase : UMaterialExpression {
	UTexture* Texture; // 0x40
	EMaterialSamplerType SamplerType; // 0x48
	char IsDefaultMeshpaintTexture : 1; // 0x49
};

struct UGameplayTask : UObject {
	FName InstanceName; // 0x30
	ETaskResourceOverlapPolicy ResourceOverlapPolicy; // 0x3a
	UGameplayTask* ChildTask; // 0x60
};

struct UKSPlayerShotListener : UActorComponent {
	FMulticastInlineDelegate MinimapShotNofify; // 0xb0
	TArray<FString> EnemyShotPingWidgetPools; // 0x118
	TSoftClassPtr<UObject> OverlayDisplayWidget; // 0x128
};

struct UConsoleSettings : UObject {
	int32_t MaxScrollbackSize; // 0x28
	TArray<FAutoCompleteCommand> ManualAutoCompleteList; // 0x30
	TArray<FString> AutoCompleteMapPaths; // 0x40
	float BackgroundOpacityPercentage; // 0x50
	bool bOrderTopToBottom; // 0x54
	bool bDisplayHelpInAutoComplete; // 0x55
	FColor InputColor; // 0x58
	FColor HistoryColor; // 0x5c
	FColor AutoCompleteCommandColor; // 0x60
	FColor AutoCompleteCVarColor; // 0x64
	FColor AutoCompleteFadedColor; // 0x68
};

struct USourceEffectEQPreset : USoundEffectSourcePreset {
	FSourceEffectEQSettings Settings; // 0x78
};

struct UInputActionDelegateBinding : UInputDelegateBinding {
	TArray<FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x28
};

struct UPlaneFalloff : UFieldNodeFloat {
	float Magnitude; // 0xb0
	float MinRange; // 0xb4
	float MaxRange; // 0xb8
	float Default; // 0xbc
	float Distance; // 0xc0
	FVector Position; // 0xc4
	FVector Normal; // 0xd0
	EFieldFalloffType Falloff; // 0xdc
};

struct UPhysicsSettings : UDeveloperSettings {
	float DefaultGravityZ; // 0x38
	float DefaultTerminalVelocity; // 0x3c
	float DefaultFluidFriction; // 0x40
	int32_t SimulateScratchMemorySize; // 0x44
	int32_t RagdollAggregateThreshold; // 0x48
	float TriangleMeshTriangleMinAreaThreshold; // 0x4c
	bool bEnableShapeSharing; // 0x50
	bool bEnablePCM; // 0x51
	bool bEnableStabilization; // 0x52
	bool bWarnMissingLocks; // 0x53
	bool bEnable2DPhysics; // 0x54
	FRigidBodyErrorCorrection PhysicErrorCorrection; // 0x58
	ESettingsLockedAxis LockedAxis; // 0x8c
	ESettingsDOF DefaultDegreesOfFreedom; // 0x8d
	float BounceThresholdVelocity; // 0x90
	EFrictionCombineMode FrictionCombineMode; // 0x94
	EFrictionCombineMode RestitutionCombineMode; // 0x95
	float MaxAngularVelocity; // 0x98
	float MaxDepenetrationVelocity; // 0x9c
	float ContactOffsetMultiplier; // 0xa0
	float MinContactOffset; // 0xa4
	float MaxContactOffset; // 0xa8
	bool bSimulateSkeletalMeshOnDedicatedServer; // 0xac
	ECollisionTraceFlag DefaultShapeComplexity; // 0xad
	bool bDefaultHasComplexCollision; // 0xae
	bool bSuppressFaceRemapTable; // 0xaf
	bool bSupportUVFromHitResults; // 0xb0
	bool bDisableActiveActors; // 0xb1
	bool bDisableKinematicStaticPairs; // 0xb2
	bool bDisableKinematicKinematicPairs; // 0xb3
	bool bDisableCCD; // 0xb4
	bool bEnableEnhancedDeterminism; // 0xb5
	float AnimPhysicsMinDeltaTime; // 0xb8
	bool bSimulateAnimPhysicsAfterReset; // 0xbc
	float MaxPhysicsDeltaTime; // 0xc0
	bool bSubstepping; // 0xc4
	bool bSubsteppingAsync; // 0xc5
	float MaxSubstepDeltaTime; // 0xc8
	int32_t MaxSubsteps; // 0xcc
	float SyncSceneSmoothingFactor; // 0xd0
	float InitialAverageFrameRate; // 0xd4
	int32_t PhysXTreeRebuildRate; // 0xd8
	TArray<FPhysicalSurfaceName> PhysicalSurfaces; // 0xe0
	FBroadphaseSettings DefaultBroadphaseSettings; // 0xf0
	FChaosPhysicsSettings ChaosSettings; // 0x130
};

struct UKSPlayerMod_ShowTeamHovers : UKSPlayerMod {
	bool ShowTeamHovers; // 0x330
	int32_t Priority_ShowTeamHovers; // 0x334
	float HoverCharacterLingerExtraTime; // 0x338
	int32_t Priority_HoverCharacterLingerExtraTime; // 0x33c
};

struct UWBP_PlayerProfileScreen_AwardEntry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* OnHover; // 0x240
	UWidgetAnimation* FadeIn; // 0x248
	UOverlay* AwardPanelWrapper; // 0x250
	USizeBox* AwardSizeControl; // 0x258
	UOverlay* BarWrapper; // 0x260
	UWBP_KSCosmeticItemDisplay_C* BundleItem1; // 0x268
	UImage* Fill; // 0x270
	UWBP_AdditiveImage_C* Glow; // 0x278
	UImage* GlowFIll; // 0x280
	UButton* HitTarget; // 0x288
	USizeBox* IconSizeBox; // 0x290
	UImage* Image_232; // 0x298
	UImage* Image_825; // 0x2a0
	UWBP_AsyncIcon_C* ImgIcon; // 0x2a8
	UImage* PanelBG; // 0x2b0
	UImage* PanelHighlight; // 0x2b8
	USizeBox* PercentComplete; // 0x2c0
	UCanvasPanel* PnlMain; // 0x2c8
	UOverlay* RewardItemWrapper; // 0x2d0
	UHorizontalBox* RewardNameWrapper; // 0x2d8
	UTextBlock* TextBlock_160; // 0x2e0
	UWidgetSwitcher* TextSwitcher; // 0x2e8
	UTextBlock* TxtActivityDesc; // 0x2f0
	UTextBlock* TxtActivityName; // 0x2f8
	UTextBlock* TxtDate; // 0x300
	UTextBlock* TxtProgress; // 0x308
	UWBP_ProgressEarnedBar_C* WBP_ProgressEarnedBar; // 0x310
	FPlayerAwardsPanelData ActivityInstance; // 0x318
	UKSActivity* Activity; // 0x328
	bool CompactMode; // 0x330
	UAkAudioEvent* HoverAwardEntrySFX; // 0x338
};

struct UMaterialExpressionRotator : UMaterialExpression {
	FExpressionInput Coordinate; // 0x40
	FExpressionInput Time; // 0x54
	float CenterX; // 0x68
	float CenterY; // 0x6c
	float Speed; // 0x70
	uint32_t ConstCoordinate; // 0x74
};

struct UBTService : UBTAuxiliaryNode {
	float Interval; // 0x60
	float RandomDeviation; // 0x64
	char bCallTickOnSearchStart : 1; // 0x68
	char bRestartTimerOnEachActivation : 1; // 0x68
};

struct UBrushComponent : UPrimitiveComponent {
	UModel* Brush; // 0x430
	UBodySetup* BrushBodySetup; // 0x438
};

struct UAkMediaAssetData : UObject {
	bool IsStreamed; // 0x28
	bool UseDeviceMemory; // 0x29
};

struct AKSDropshipLights : AActor {
	USceneComponent* DefaultSceneRoot; // 0x220
	USceneComponent* SharedRoot; // 0x228
};

struct UInterpTrackVectorBase : UInterpTrack {
	FInterpCurveVector VectorTrack; // 0x70
	float CurveTension; // 0x88
};

struct UAISense_Team : UAISense {
	TArray<FAITeamStimulusEvent> RegisteredEvents; // 0x80
};

struct UKSGroundSpreadRule : UKSGrenadeSpreadRule {
	TArray<FVector> GroundSpreadVectors; // 0x28
};

struct UGeometryCollectionCache : UObject {
	FRecordedTransformTrack RecordedData; // 0x28
	UGeometryCollection* SupportedCollection; // 0x38
	FGuid CompatibleCollectionState; // 0x40
};

struct UParticleModuleAccelerationDrag : UParticleModuleAccelerationBase {
	UDistributionFloat* DragCoefficient; // 0x38
	FRawDistributionFloat DragCoefficientRaw; // 0x40
};

struct UWBP_ActiveBoosterShelf_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UHorizontalBox* ActiveBoostContainer; // 0x530
	UImage* Bottom; // 0x538
	UButton* HitTarget; // 0x540
	UImage* Middle; // 0x548
	UCanvasPanel* Root; // 0x550
	UImage* Top; // 0x558
	UWBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry; // 0x560
	UWBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry_2; // 0x568
	UWBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry_3; // 0x570
};

struct UKSPlayerInput : UPGame_PlayerInput {
	TMap<FName, FString> SavedSettingsConfig; // 0x12f0
	FVector2D GamepadLookAcceleration; // 0x1434
	float MinMouseSenseScaling; // 0x143c
	float MaxMouseSenseScaling; // 0x1440
	float TouchLookSensitivityADS; // 0x1444
	FMulticastInlineDelegate OnKeyMappingsUpdated; // 0x1450
	TMap<FName, FKSCustomInputActionKeyMappings> KSCustomActionKeyMappings; // 0x1460
	TMap<FName, FKSCustomInputAxisKeyMappings> KSCustomAxisKeyMappings; // 0x1500
	UKSAnalogStickFilter* KSLeftAnalogStickFilterClass; // 0x15a0
	UKSAnalogStickFilter* KSRightAnalogStickFilterClass; // 0x15a8
	UKSAnalogStickFilter* LeftAnalogStickFilter; // 0x15b0
	UKSAnalogStickFilter* RightAnalogStickFilter; // 0x15c8
};

struct UKSModInst_OnDamageOther : UKSPlayerModInstance {
	float MinimumDamage; // 0x1b8
	bool bUseActualDamageDone; // 0x1bc
	TArray<EDamageCategory> ValidDamageCategories; // 0x1c0
};

struct UMaterialExpressionTemporalSobol : UMaterialExpression {
	FExpressionInput Index; // 0x40
	FExpressionInput Seed; // 0x54
	uint32_t ConstIndex; // 0x68
	FVector2D ConstSeed; // 0x6c
};

struct UParticleModuleLocationSkelVertSurface : UParticleModuleLocationBase {
	ELocationSkelVertSurfaceSource SourceType; // 0x30
	FVector UniversalOffset; // 0x34
	char bUpdatePositionEachFrame : 1; // 0x40
	char bOrientMeshEmitters : 1; // 0x40
	char bInheritBoneVelocity : 1; // 0x40
	float InheritVelocityScale; // 0x44
	FName SkelMeshActorParamName; // 0x48
	TArray<FName> ValidAssociatedBones; // 0x50
	char bEnforceNormalCheck : 1; // 0x60
	FVector NormalToCompare; // 0x64
	float NormalCheckToleranceDegrees; // 0x70
	float NormalCheckTolerance; // 0x74
	TArray<int32_t> ValidMaterialIndices; // 0x78
	char bInheritVertexColor : 1; // 0x88
	char bInheritUV : 1; // 0x88
	uint32_t InheritUVChannel; // 0x8c
};

struct UAssetManagerSettings : UDeveloperSettings {
	TArray<FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x38
	TArray<FDirectoryPath> DirectoriesToExclude; // 0x48
	TArray<FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x58
	TArray<FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x68
	bool bOnlyCookProductionAssets; // 0x78
	bool bShouldManagerDetermineTypeAndName; // 0x79
	bool bShouldGuessTypeAndNameInEditor; // 0x7a
	bool bShouldAcquireMissingChunksOnLoad; // 0x7b
	TArray<FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x80
	TArray<FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x90
	TArray<FAssetManagerRedirect> AssetPathRedirects; // 0xa0
	TSet<FName> MetaDataTagsForAssetRegistry; // 0xb0
	TArray<FName> PrimaryAssetTypeWrangleWhitelist; // 0x100
	bool bForceUseAllBundlesDuringLoadRecursive; // 0x110
};

struct UKSHudEditorSettings : UObject {
	bool bIsLayoutDirty; // 0x38
	TArray<FHudEditableData> HudEditableData; // 0x40
};

struct UWBP_CallToAction_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* CTAAnim; // 0x240
	UWBP_AdditiveImage_C* AdditiveBlur_Pulse; // 0x248
	UImage* BlurFar; // 0x250
	UImage* BlurNear; // 0x258
	UImage* Square; // 0x260
	UImage* Stroke; // 0x268
};

struct UKSVehicleBaseMovementComponent : UCharacterMovementComponent {
	AKSVehicleBase* VehicleBaseOwner; // 0x680
};

struct ACharacter : APawn {
	USkeletalMeshComponent* Mesh; // 0x280
	UCharacterMovementComponent* CharacterMovement; // 0x288
	UCapsuleComponent* CapsuleComponent; // 0x290
	FBasedMovementInfo BasedMovement; // 0x298
	FBasedMovementInfo ReplicatedBasedMovement; // 0x2c8
	float AnimRootMotionTranslationScale; // 0x2f8
	FVector BaseTranslationOffset; // 0x2fc
	FQuat BaseRotationOffset; // 0x310
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x320
	float ReplayLastTransformUpdateTimeStamp; // 0x324
	char ReplicatedMovementMode; // 0x328
	bool bInBaseReplication; // 0x329
	float CrouchedEyeHeight; // 0x32c
	char bIsCrouched : 1; // 0x330
	char bProxyIsJumpForceApplied : 1; // 0x330
	char bPressedJump : 1; // 0x330
	char bClientUpdating : 1; // 0x330
	char bClientWasFalling : 1; // 0x330
	char bClientResimulateRootMotion : 1; // 0x330
	char bClientResimulateRootMotionSources : 1; // 0x330
	char bSimGravityDisabled : 1; // 0x330
	char bClientCheckEncroachmentOnNetUpdate : 1; // 0x331
	char bServerMoveIgnoreRootMotion : 1; // 0x331
	char bWasJumping : 1; // 0x331
	float JumpKeyHoldTime; // 0x334
	float JumpForceTimeRemaining; // 0x338
	float ProxyJumpForceStartedTime; // 0x33c
	float JumpMaxHoldTime; // 0x340
	int32_t JumpMaxCount; // 0x344
	int32_t JumpCurrentCount; // 0x348
	int32_t JumpCurrentCountPreJump; // 0x34c
	FMulticastInlineDelegate OnReachedJumpApex; // 0x358
	FMulticastInlineDelegate MovementModeChangedDelegate; // 0x378
	FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x388
	FRootMotionSourceGroup SavedRootMotion; // 0x398
	FRootMotionMovementParams ClientRootMotionParams; // 0x3d0
	TArray<FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x410
	FRepRootMotionMontage RepRootMotion; // 0x420
};

struct UAnimNotifyState_SkinnedSkelProp : UAnimNotifyState_SkinnedPropBase {
	FName AnimClassSkinKeyword; // 0x88
	UAnimMontage* ActivationMontage; // 0x90
};

struct UStaticMeshSocket : UObject {
	FName SocketName; // 0x28
	FVector RelativeLocation; // 0x30
	FRotator RelativeRotation; // 0x3c
	FVector RelativeScale; // 0x48
	FString Tag; // 0x58
};

struct UAsyncActionLoadPrimaryAssetClassList : UAsyncActionLoadPrimaryAssetBase {
	FMulticastInlineDelegate Completed; // 0x78
};

struct UQosRegionManager : UObject {
	int32_t NumTestsPerRegion; // 0x28
	float PingTimeout; // 0x2c
	TArray<FQosRegionInfo> RegionDefinitions; // 0x30
	TArray<FQosDatacenterInfo> DatacenterDefinitions; // 0x40
	FDateTime LastCheckTimestamp; // 0x50
	UQosEvaluator* Evaluator; // 0x58
	EQosCompletionResult QosEvalResult; // 0x60
	TArray<FRegionQosInstance> RegionOptions; // 0x68
	FString ForceRegionId; // 0x78
	bool bRegionForcedViaCommandline; // 0x88
	FString SelectedRegionId; // 0x90
};

struct AARSkyLight : ASkyLight {
	UAREnvironmentCaptureProbe* CaptureProbe; // 0x230
};

struct UWBP_CosmeticItemTags_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWrapBox* TagsContainer; // 0x528
	UWBP_CosmeticItemTagEntry_C* WBP_CosmeticItemTagEntry; // 0x530
	UWBP_CosmeticItemTagEntry_C* WBP_CosmeticItemTagEntry_2; // 0x538
	UWBP_CosmeticItemTagEntry_C* WBP_CosmeticItemTagEntry_3; // 0x540
	UWBP_CosmeticItemTagEntry_C* WBP_CosmeticItemTagEntry_4; // 0x548
	UWBP_CosmeticItemTagEntry_C* WBP_CosmeticItemTagEntry_5; // 0x550
	UWBP_CosmeticItemTagEntry_C* WBP_CosmeticItemTagEntry_6; // 0x558
	ETextJustify Alignment; // 0x560
};

struct UCameraModifier : UObject {
	char bDebug : 1; // 0x28
	char bExclusive : 1; // 0x28
	char Priority; // 0x2c
	APlayerCameraManager* CameraOwner; // 0x30
	float AlphaInTime; // 0x38
	float AlphaOutTime; // 0x3c
	float Alpha; // 0x40
};

struct USkeletalMeshSocket : UObject {
	FName SocketName; // 0x28
	FName BoneName; // 0x30
	FVector RelativeLocation; // 0x38
	FRotator RelativeRotation; // 0x44
	FVector RelativeScale; // 0x50
	bool bForceAlwaysAnimated; // 0x5c
};

struct AFriendlyLobbyCharacter_C : ALobbyMainCharacter_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x3ec8
	UWidgetComponent* WidgetNameplate; // 0x3ed0
	bool NeedsToSetNameplate; // 0x3ed8
	UKSPlayerInfo* PendingPlayerInfo; // 0x3ee0
};

struct UWBP_BattlePassLobbyDisplay_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animCTALoop; // 0x528
	UWidgetAnimation* animOnHover; // 0x530
	UWidgetAnimation* animOnClick; // 0x538
	UTextBlock* BattlePassName; // 0x540
	UImage* BorderShimmer; // 0x548
	UImage* Btn_BkgHoverGradient; // 0x550
	UImage* Btn_BkgPress; // 0x558
	UImage* Btn_Fill; // 0x560
	UImage* Btn_HoverStroke; // 0x568
	UImage* Btn_Stroke; // 0x570
	UImage* BtnShimmer; // 0x578
	UOverlay* ButtonBackground; // 0x580
	UImage* CheckMark_2; // 0x588
	UWBP_ProgressEarnedBar_C* EventProgress; // 0x590
	UWBP_Header3_C* EventsHeader; // 0x598
	UImage* Fill; // 0x5a0
	UImage* Fill_2; // 0x5a8
	UImage* FillInterior_2; // 0x5b0
	UCanvasPanel* FillShimmer; // 0x5b8
	UOverlay* FinishedItemIcon_2; // 0x5c0
	UButton* HitTarget; // 0x5c8
	UOverlay* NormalItemIcon; // 0x5d0
	UWBP_KSCosmeticItemDisplay_C* RewardItem; // 0x5d8
	UWBP_BattlePassEmblem_C* WBP_BattlePassEmblem; // 0x5e0
	UWBP_CallToAction_C* WBP_CallToAction; // 0x5e8
	FName BattlePassViewed; // 0x5f0
};

struct AKSOutOfBoundsZone : AActor {
	float TickDamage; // 0x228
	float WarningDuration; // 0x22c
	bool ShouldDisableCollisionAtRoundEnd; // 0x230
};

struct UCircularThrobber : UWidget {
	int32_t NumberOfPieces; // 0x110
	float Period; // 0x114
	float Radius; // 0x118
	USlateBrushAsset* PieceImage; // 0x120
	FSlateBrush Image; // 0x128
	bool bEnableRadius; // 0x1b0
};

struct UKSPlayerMod_ActionRestrictor : UKSPlayerMod {
	bool bRestrictSprint; // 0x330
	bool bRestrictDodgeRoll; // 0x331
	bool bRestrictMantleAndVault; // 0x332
	bool bRestrictQuickMelee; // 0x333
	bool bRestrictGadgetUse; // 0x334
	bool bRestrictInteracting; // 0x335
	bool bRestrictJumping; // 0x336
	bool bRestrictCrouching; // 0x337
	bool bRestrictEmotesAndSprays; // 0x338
};

struct UPUMG_AsyncImage : UImage {
	UWidget* WaitingWidget; // 0x218
	FMulticastInlineDelegate OnAsyncImageLoadStarted; // 0x220
	FMulticastInlineDelegate OnAsyncImageLoadComplete; // 0x230
	FMulticastInlineDelegate OnAsyncImageLoadCanceled; // 0x240
	FMulticastInlineDelegate OnAsyncImageBrushChanged; // 0x250
};

struct USkeletalMeshComponent : USkinnedMeshComponent {
	UObject* AnimBlueprintGeneratedClass; // 0x670
	UAnimInstance* AnimClass; // 0x678
	UAnimInstance* AnimScriptInstance; // 0x680
	UAnimInstance* PostProcessAnimInstance; // 0x688
	FSingleAnimationPlayData AnimationData; // 0x690
	FVector RootBoneTranslation; // 0x6b8
	FVector LineCheckBoundsScale; // 0x6c4
	TArray<UAnimInstance*> LinkedInstances; // 0x710
	TArray<FTransform> CachedBoneSpaceTransforms; // 0x720
	TArray<FTransform> CachedComponentSpaceTransforms; // 0x730
	float GlobalAnimRateScale; // 0x760
	EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x764
	EPhysicsTransformUpdateMode PhysicsTransformUpdateMode; // 0x765
	EAnimationMode AnimationMode; // 0x767
	char bDisablePostProcessBlueprint : 1; // 0x769
	char bUpdateOverlapsOnAnimationFinalize : 1; // 0x769
	char bHasValidBodies : 1; // 0x769
	char bBlendPhysics : 1; // 0x769
	char bEnablePhysicsOnDedicatedServer : 1; // 0x769
	char bUpdateJointsFromAnimation : 1; // 0x76a
	char bDisableClothSimulation : 1; // 0x76a
	char bDisableRigidBodyAnimNode : 1; // 0x76a
	char bAllowAnimCurveEvaluation : 1; // 0x76a
	char bDisableAnimCurves : 1; // 0x76a
	char bCollideWithEnvironment : 1; // 0x76b
	char bCollideWithAttachedChildren : 1; // 0x76b
	char bLocalSpaceSimulation : 1; // 0x76b
	char bResetAfterTeleport : 1; // 0x76b
	char bDeferKinematicBoneUpdate : 1; // 0x76b
	char bNoSkeletonUpdate : 1; // 0x76b
	char bPauseAnims : 1; // 0x76b
	char bUseRefPoseOnInitAnim : 1; // 0x76c
	char bEnablePerPolyCollision : 1; // 0x76c
	char bForceRefpose : 1; // 0x76c
	char bOnlyAllowAutonomousTickPose : 1; // 0x76c
	char bIsAutonomousTickPose : 1; // 0x76c
	char bOldForceRefPose : 1; // 0x76c
	char bShowPrePhysBones : 1; // 0x76c
	char bRequiredBonesUpToDate : 1; // 0x76c
	char bAnimTreeInitialised : 1; // 0x76d
	char bIncludeComponentLocationIntoBounds : 1; // 0x76d
	char bEnableLineCheckWithBounds : 1; // 0x76d
	char bUseBendingElements : 1; // 0x76d
	char bUseTetrahedralConstraints : 1; // 0x76d
	char bUseThinShellVolumeConstraints : 1; // 0x76d
	char bUseSelfCollisions : 1; // 0x76d
	char bUseContinuousCollisionDetection : 1; // 0x76d
	char bPropagateCurvesToSlaves : 1; // 0x76e
	char bSkipKinematicUpdateWhenInterpolating : 1; // 0x76e
	char bSkipBoundsUpdateWhenInterpolating : 1; // 0x76e
	char bNeedsQueuedAnimEventsDispatched : 1; // 0x76e
	uint16_t CachedAnimCurveUidVersion; // 0x770
	EClothMassMode MassMode; // 0x772
	float UniformMass; // 0x774
	float TotalMass; // 0x778
	float Density; // 0x77c
	float MinPerParticleMass; // 0x780
	float ClothBlendWeight; // 0x784
	float EdgeStiffness; // 0x788
	float BendingStiffness; // 0x78c
	float AreaStiffness; // 0x790
	float VolumeStiffness; // 0x794
	float StrainLimitingStiffness; // 0x798
	float ShapeTargetStiffness; // 0x79c
	TArray<FName> DisallowedAnimCurves; // 0x7a0
	UBodySetup* BodySetup; // 0x7b0
	FMulticastInlineDelegate OnConstraintBroken; // 0x7c0
	UClothingSimulationFactory* ClothingSimulationFactory; // 0x7d0
	float TeleportDistanceThreshold; // 0x8a8
	float TeleportRotationThreshold; // 0x8ac
	uint32_t LastPoseTickFrame; // 0x8b8
	bool bDelayedAnimTaskValid; // 0x8c8
	bool bDisableDelayedAnimTask; // 0x8c9
	UClothingSimulationInteractor* ClothingInteractor; // 0x920
	FMulticastInlineDelegate OnAnimInitialized; // 0xa50
};

struct UMaterialExpressionSphereMask : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	FExpressionInput Radius; // 0x68
	FExpressionInput Hardness; // 0x7c
	float AttenuationRadius; // 0x90
	float HardnessPercent; // 0x94
};

struct UAkXboxOneGDKInitializationSettings : UObject {
	FAkCommonInitializationSettings CommonSettings; // 0x28
	FAkXboxOneGDKApuHeapInitializationSettings ApuHeapSettings; // 0x88
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkXboxOneGDKAdvancedInitializationSettings AdvancedSettings; // 0xb8
};

struct USoundNodeWaveParam : USoundNode {
	FName WaveParameterName; // 0x48
};

struct UEnvQueryManager : UAISubsystem {
	TArray<FEnvQueryInstanceCache> InstanceCache; // 0xa8
	TArray<UEnvQueryContext*> LocalContexts; // 0xb8
	TArray<UEnvQueryInstanceBlueprintWrapper*> GCShieldedWrappers; // 0xc8
	float MaxAllowedTestingTime; // 0x12c
	bool bTestQueriesUsingBreadth; // 0x130
	int32_t QueryCountWarningThreshold; // 0x134
	double QueryCountWarningInterval; // 0x138
};

struct UWBP_HolidayBundleItem_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* background_image; // 0x528
	UCanvasPanel* BonusProgressWrapper; // 0x530
	UOverlay* Bundle_FREEOverlay; // 0x538
	UImage* Image; // 0x540
	UImage* Image_91; // 0x548
	UImage* Image_410; // 0x550
	UOverlay* Overlay_1; // 0x558
	UWBP_StoreItemInterior_C* PrimaryStoreItem; // 0x560
	UImage* ProgressFill; // 0x568
	UOverlay* ProgressFillWrapper; // 0x570
	UTextBlock* UnlockedPercent; // 0x578
	UWBP_AdditiveImage_C* WBP_AdditiveImage; // 0x580
	UWBP_AdditiveImage_C* WBP_AdditiveImage_C_2; // 0x588
	UWBP_StorePanelButton_C* WBP_StorePanelButton; // 0x590
	FMulticastInlineDelegate OnBundleItemClicked; // 0x598
	UKSStoreItem* StoreItem; // 0x5a8
	bool bIsCollectionReward; // 0x5b0
	float UnlockProgress; // 0x5b4
};

struct UKSModInst_OnProjectileBounce : UKSPlayerModInstance {
	bool bTrackEnemyProjectile; // 0x1b8
	bool bTrackFriendlyProjectile; // 0x1b9
	bool bTrackSelfProjectile; // 0x1ba
	bool bListenToBounce; // 0x1bb
	bool bListenToStop; // 0x1bc
};

struct UPCM_Hero_ABP_C : UKSCharacterAnimInst {
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_44; // 0x10f0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_96; // 0x1208
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_30; // 0x12b8
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_4; // 0x12f0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_3; // 0x14f0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_4; // 0x16f0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_95; // 0x17e0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_3; // 0x1890
	FAnimNode_StateResult AnimGraphNode_StateResult_20; // 0x1980
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_73; // 0x19c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_72; // 0x1b20
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_79; // 0x1c80
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_78; // 0x1d08
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_94; // 0x1d90
	FAnimNode_StateResult AnimGraphNode_StateResult_19; // 0x1e40
	FAnimNode_StateMachine AnimGraphNode_StateMachine_6; // 0x1e80
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_43; // 0x1f40
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_42; // 0x2058
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_31; // 0x2170
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_156; // 0x2240
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_30; // 0x2278
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_56; // 0x2348
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_155; // 0x2410
	FAnimNode_Slot AnimGraphNode_Slot_16; // 0x2448
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_154; // 0x24a0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_41; // 0x24d8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_55; // 0x25f0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_40; // 0x26b8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_39; // 0x27d0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_38; // 0x28e8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_37; // 0x2a00
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_29; // 0x2b18
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_54; // 0x2be8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_153; // 0x2cb0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_53; // 0x2ce8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_93; // 0x2db0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_92; // 0x2e60
	FAnimNode_Slot AnimGraphNode_Slot_15; // 0x2f10
	FAnimNode_Slot AnimGraphNode_Slot_14; // 0x2f68
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_52; // 0x2fc0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_152; // 0x3088
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_151; // 0x30c0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_91; // 0x30f8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_33; // 0x31a8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_33; // 0x31d8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_36; // 0x3208
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_32; // 0x3320
	FAnimNode_Fabrik AnimGraphNode_Fabrik_4; // 0x3350
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_35; // 0x34f0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_34; // 0x3608
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_33; // 0x3720
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_90; // 0x3838
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_32; // 0x38e8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_31; // 0x3918
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_89; // 0x3948
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_30; // 0x39f8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_31; // 0x3a28
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_88; // 0x3a58
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_29; // 0x3b08
	FAnimNode_PoseSnapshot AnimGraphNode_PoseSnapshot; // 0x3b40
	FAnimNode_StateResult AnimGraphNode_StateResult_18; // 0x3be0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_77; // 0x3c20
	FAnimNode_StateResult AnimGraphNode_StateResult_17; // 0x3ca8
	FAnimNode_StateMachine AnimGraphNode_StateMachine_5; // 0x3ce8
	bool __CustomProperty_StringMantlesTogether_461224144FFC5A148A9487A371F95429; // 0x3da8
	float __CustomProperty_Max2StoryMantleHt_461224144FFC5A148A9487A371F95429; // 0x3dac
	float __CustomProperty_MaxMantleHt_461224144FFC5A148A9487A371F95429; // 0x3db0
	FAnimNode_LinkedAnimGraph AnimGraphNode_SubInstance_4; // 0x3db8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_16; // 0x3e68
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_51; // 0x3f28
	bool __CustomProperty_EnableLayeredHandAdditives_E3950B524F93AEA4F112E2B3A71E8E86; // 0x3ff0
	bool __CustomProperty_UseHuntingRifleHold_E3950B524F93AEA4F112E2B3A71E8E86; // 0x3ff1
	bool __CustomProperty_Enable Zipline Eng Aims_E3950B524F93AEA4F112E2B3A71E8E86; // 0x3ff2
	FAnimNode_LinkedAnimGraph AnimGraphNode_LinkedAnimGraph_2; // 0x3ff8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_16; // 0x40a8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_15; // 0x4268
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_14; // 0x4428
	EKSMovementDirection __CustomProperty_MeleeLowerBodyDirection_3741820D49F2DBC1518975A785322FAF; // 0x45e8
	bool __CustomProperty_bEnableMeleeLowerBody_3741820D49F2DBC1518975A785322FAF; // 0x45e9
	bool __CustomProperty_bCanTransitionDirections_3741820D49F2DBC1518975A785322FAF; // 0x45ea
	bool __CustomProperty_PrototypeLocomotionGraphEnable_3741820D49F2DBC1518975A785322FAF; // 0x45eb
	bool __CustomProperty_MasterWeaponIsGrenade_3741820D49F2DBC1518975A785322FAF; // 0x45ec
	float __CustomProperty_CachedPivotAngle_3741820D49F2DBC1518975A785322FAF; // 0x45f0
	float __CustomProperty_Cached Stop Angle_3741820D49F2DBC1518975A785322FAF; // 0x45f4
	bool __CustomProperty_Dodge Rolling BP_3741820D49F2DBC1518975A785322FAF; // 0x45f8
	bool __CustomProperty_Starting a Pivot_3741820D49F2DBC1518975A785322FAF; // 0x45f9
	bool __CustomProperty_StringMantlesTogether_3741820D49F2DBC1518975A785322FAF; // 0x45fa
	float __CustomProperty_MaxMantleHt_3741820D49F2DBC1518975A785322FAF; // 0x45fc
	FAnimNode_LinkedAnimGraph AnimGraphNode_SubInstance_3; // 0x4600
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_87; // 0x46b0
	FAnimNode_Slot AnimGraphNode_Slot_13; // 0x4760
	FAnimNode_Slot AnimGraphNode_Slot_12; // 0x47b8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_32; // 0x4810
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_28; // 0x4928
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_150; // 0x49f8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_50; // 0x4a30
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_149; // 0x4af8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_30; // 0x4b30
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_31; // 0x4b60
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_28; // 0x4c78
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_27; // 0x4cb0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_26; // 0x4ce8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_25; // 0x4d20
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_24; // 0x4d58
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_71; // 0x4d90
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_76; // 0x4ef0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_86; // 0x4f78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_75; // 0x5028
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_70; // 0x50b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_69; // 0x5210
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_74; // 0x5370
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_68; // 0x53f8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_73; // 0x5558
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_67; // 0x55e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_72; // 0x5740
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_15; // 0x57c8
	FAnimNode_StateResult AnimGraphNode_StateResult_16; // 0x5888
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_66; // 0x58c8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_71; // 0x5a28
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_70; // 0x5ab0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_65; // 0x5b38
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_69; // 0x5c98
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_68; // 0x5d20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_64; // 0x5da8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_67; // 0x5f08
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_85; // 0x5f90
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_63; // 0x6040
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_62; // 0x61a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_66; // 0x6300
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_61; // 0x6388
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_60; // 0x64e8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_65; // 0x6648
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_64; // 0x66d0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_59; // 0x6758
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_84; // 0x68b8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_83; // 0x6968
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_82; // 0x6a18
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_14; // 0x6ac8
	FAnimNode_StateResult AnimGraphNode_StateResult_15; // 0x6b88
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_63; // 0x6bc8
	FAnimNode_StateResult AnimGraphNode_StateResult_14; // 0x6c50
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_62; // 0x6c90
	FAnimNode_StateResult AnimGraphNode_StateResult_13; // 0x6d18
	FAnimNode_StateMachine AnimGraphNode_StateMachine_4; // 0x6d58
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_30; // 0x6e18
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_81; // 0x6f30
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_80; // 0x6fe0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_49; // 0x7090
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_79; // 0x7158
	FAnimNode_Slot AnimGraphNode_Slot_11; // 0x7208
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_78; // 0x7260
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_29; // 0x7310
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_77; // 0x7428
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_48; // 0x74d8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_76; // 0x75a0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_47; // 0x7650
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_75; // 0x7718
	FAnimNode_Slot AnimGraphNode_Slot_10; // 0x77c8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_148; // 0x7820
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_46; // 0x7858
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_74; // 0x7920
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_73; // 0x79d0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_29; // 0x7a80
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_28; // 0x7ab0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_29; // 0x7bc8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_27; // 0x7bf8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_45; // 0x7cc8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_147; // 0x7d90
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_146; // 0x7dc8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_145; // 0x7e00
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_44; // 0x7e38
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_27; // 0x7f00
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_28; // 0x8018
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_28; // 0x8048
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_144; // 0x8078
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_26; // 0x80b0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_72; // 0x81c8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_27; // 0x8278
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_26; // 0x82a8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_71; // 0x82d8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_25; // 0x8388
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_27; // 0x84a0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_26; // 0x84d0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_24; // 0x8500
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_23; // 0x8618
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_25; // 0x8730
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_25; // 0x8760
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_13; // 0x8790
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_143; // 0x8950
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_26; // 0x8988
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_142; // 0x8a58
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_7; // 0x8a90
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_25; // 0x8b70
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_43; // 0x8c40
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_70; // 0x8d08
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_58; // 0x8db8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_61; // 0x8f18
	FAnimNode_Fabrik AnimGraphNode_Fabrik_3; // 0x8fa0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_141; // 0x9140
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_42; // 0x9178
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_12; // 0x9240
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_41; // 0x9400
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_140; // 0x94c8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_139; // 0x9500
	FAnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_5; // 0x9538
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_40; // 0x96d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_138; // 0x9798
	FAnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_4; // 0x97d0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_13; // 0x9968
	FAnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_3; // 0x9a28
	FAnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_2; // 0x9bc0
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_11; // 0x9d58
	FAnimNode_CopyBone AnimGraphNode_CopyBone_4; // 0x9e30
	FAnimNode_CopyBone AnimGraphNode_CopyBone_3; // 0x9f30
	FAnimNode_CopyBone AnimGraphNode_CopyBone_2; // 0xa030
	FAnimNode_CopyBone AnimGraphNode_CopyBone; // 0xa130
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_39; // 0xa230
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_137; // 0xa2f8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_136; // 0xa330
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_38; // 0xa368
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_24; // 0xa430
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_135; // 0xa460
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_134; // 0xa498
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_24; // 0xa4d0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_37; // 0xa500
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_69; // 0xa5c8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_133; // 0xa678
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_36; // 0xa6b0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_23; // 0xa778
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_132; // 0xa7a8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_131; // 0xa7e0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_23; // 0xa818
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_35; // 0xa848
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_34; // 0xa910
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_130; // 0xa9d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_23; // 0xaa10
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_22; // 0xaa48
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_57; // 0xaa80
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_60; // 0xabe0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_56; // 0xac68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_59; // 0xadc8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_68; // 0xae50
	FAnimNode_StateResult AnimGraphNode_StateResult_12; // 0xaf00
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_2; // 0xaf40
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_2; // 0xb030
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer; // 0xb230
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned; // 0xb320
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_67; // 0xb520
	FAnimNode_StateResult AnimGraphNode_StateResult_11; // 0xb5d0
	FAnimNode_StateMachine AnimGraphNode_StateMachine_3; // 0xb610
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_33; // 0xb6d0
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_6; // 0xb798
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_129; // 0xb878
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_128; // 0xb8b0
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_5; // 0xb8e8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_24; // 0xb9c8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_23; // 0xba98
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_32; // 0xbb68
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_31; // 0xbc30
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_127; // 0xbcf8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_126; // 0xbd30
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_11; // 0xbd68
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_22; // 0xbf28
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_22; // 0xbf58
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_10; // 0xbf88
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_125; // 0xc148
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_124; // 0xc180
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_22; // 0xc1b8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_21; // 0xc2d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_123; // 0xc3e8
	FAnimNode_Slot AnimGraphNode_Slot_9; // 0xc420
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_122; // 0xc478
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_30; // 0xc4b0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_121; // 0xc578
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_120; // 0xc5b0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_66; // 0xc5e8
	FAnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace; // 0xc698
	FKSAnimNode_Mirror KSAnimGraphNode_Mirror; // 0xc830
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_21; // 0xc950
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_21; // 0xc980
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_65; // 0xc9b0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_119; // 0xca60
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_118; // 0xca98
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_29; // 0xcad0
	FAnimNode_Slot AnimGraphNode_Slot_8; // 0xcb98
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_22; // 0xcbf0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_20; // 0xccc0
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_9; // 0xccf0
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_8; // 0xceb0
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_7; // 0xd070
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_6; // 0xd230
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_21; // 0xd3f0
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_5; // 0xd4c0
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_4; // 0xd680
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_3; // 0xd840
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_64; // 0xda00
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_20; // 0xdab0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_117; // 0xdae0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_28; // 0xdb18
	FAnimNode_Fabrik AnimGraphNode_Fabrik_2; // 0xdbe0
	FAnimNode_Fabrik AnimGraphNode_Fabrik; // 0xdd80
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_63; // 0xdf20
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_19; // 0xdfd0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_19; // 0xe000
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_18; // 0xe030
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil_2; // 0xe060
	FKSAnimNode_Recoil KSAnimGraphNode_Recoil; // 0xe220
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_62; // 0xe3e0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_17; // 0xe490
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_20; // 0xe4c0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_27; // 0xe590
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_116; // 0xe658
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_55; // 0xe690
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_5; // 0xe7f0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_26; // 0xe8c8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_58; // 0xe990
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_25; // 0xea18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_115; // 0xeae0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_114; // 0xeb18
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_12; // 0xeb50
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_113; // 0xec10
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_112; // 0xec48
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_24; // 0xec80
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_61; // 0xed48
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_23; // 0xedf8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_16; // 0xeec0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_111; // 0xeef0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_18; // 0xef28
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_110; // 0xef58
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_17; // 0xef90
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_22; // 0xefc0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_15; // 0xf088
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_109; // 0xf0b8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_16; // 0xf0f0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_108; // 0xf120
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_15; // 0xf158
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_107; // 0xf188
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_106; // 0xf1c0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_21; // 0xf1f8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_105; // 0xf2c0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_104; // 0xf2f8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_103; // 0xf330
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_102; // 0xf368
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_11; // 0xf3a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_57; // 0xf460
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_56; // 0xf4e8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_55; // 0xf570
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_60; // 0xf5f8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_59; // 0xf6a8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_58; // 0xf758
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_54; // 0xf808
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_53; // 0xf890
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_52; // 0xf918
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_101; // 0xf9a0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_20; // 0xf9d8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_100; // 0xfaa0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_54; // 0xfad8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_53; // 0xfc38
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_52; // 0xfd98
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_51; // 0xfef8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_50; // 0x10058
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_49; // 0x101b8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_19; // 0x10318
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_57; // 0x103e8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_99; // 0x10498
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_98; // 0x104d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_97; // 0x10508
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_18; // 0x10540
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_96; // 0x10610
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_95; // 0x10648
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_4; // 0x10680
	bool __CustomProperty_bIsLobby_9FDD1A7146055937A755E6ACD99BC318; // 0x10758
	bool __CustomProperty_bIsServer_9FDD1A7146055937A755E6ACD99BC318; // 0x10759
	FAnimNode_LinkedAnimGraph AnimGraphNode_SubInstance_2; // 0x10760
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_19; // 0x10810
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_94; // 0x108d8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_93; // 0x10910
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_92; // 0x10948
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_56; // 0x10980
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_91; // 0x10a30
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_90; // 0x10a68
	FAnimNode_Slot AnimGraphNode_Slot_7; // 0x10aa0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_89; // 0x10af8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_88; // 0x10b30
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_87; // 0x10b68
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_86; // 0x10ba0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_55; // 0x10bd8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_54; // 0x10c88
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_48; // 0x10d38
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_51; // 0x10e98
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_47; // 0x10f20
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_50; // 0x11080
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_85; // 0x11108
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_10; // 0x11140
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_84; // 0x11200
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_53; // 0x11238
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_83; // 0x112e8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_17; // 0x11320
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_82; // 0x113f0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_20; // 0x11428
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_14; // 0x11540
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_19; // 0x11570
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_81; // 0x11688
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_14; // 0x116c0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_18; // 0x116f0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_17; // 0x117b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_80; // 0x11880
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_16; // 0x118b8
	FAnimNode_RigidBodySkipServer AnimGraphNode_RigidBodySkipServer; // 0x11980
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_13; // 0x11f30
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_79; // 0x11f60
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_13; // 0x11f98
	FAnimNode_BlendByLOD AnimGraphNode_BlendByLOD_2; // 0x11fc8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_78; // 0x12078
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_77; // 0x120b0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_21; // 0x120e8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_20; // 0x12120
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_19; // 0x12158
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_18; // 0x12190
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_17; // 0x121c8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_16; // 0x12200
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_15; // 0x12238
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_14; // 0x12270
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_13; // 0x122a8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_12; // 0x122e0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_11; // 0x12318
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_10; // 0x12350
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_9; // 0x12388
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8; // 0x123c0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_7; // 0x123f8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_6; // 0x12430
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_5; // 0x12468
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_9; // 0x124a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_49; // 0x12560
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_48; // 0x125e8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_47; // 0x12670
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_46; // 0x126f8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_46; // 0x12780
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_45; // 0x128e0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_44; // 0x12a40
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_43; // 0x12ba0
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_10; // 0x12d00
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_52; // 0x12dd8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9; // 0x12e88
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_51; // 0x12f60
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_8; // 0x13010
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_50; // 0x130e8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_7; // 0x13198
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_49; // 0x13270
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_48; // 0x13320
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_45; // 0x133d0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_44; // 0x13458
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_43; // 0x134e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_42; // 0x13568
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_42; // 0x135f0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_41; // 0x13750
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_40; // 0x138b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_39; // 0x13a10
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_6; // 0x13b70
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_47; // 0x13c48
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_5; // 0x13cf8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_46; // 0x13dd0
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_4; // 0x13e80
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_45; // 0x13f58
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_3; // 0x14008
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_44; // 0x140e0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_8; // 0x14190
	FAnimNode_StateResult AnimGraphNode_StateResult_10; // 0x14250
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_12; // 0x14290
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_12; // 0x142c0
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_7; // 0x142f0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_11; // 0x14410
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_11; // 0x14440
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_6; // 0x14470
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_7; // 0x14590
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_41; // 0x14650
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_40; // 0x146d8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_38; // 0x14760
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_37; // 0x148c0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_39; // 0x14a20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_36; // 0x14aa8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_38; // 0x14c08
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_35; // 0x14c90
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_43; // 0x14df0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_37; // 0x14ea0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_36; // 0x14f28
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_35; // 0x14fb0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_34; // 0x15038
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_34; // 0x150c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_33; // 0x15220
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_32; // 0x15380
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_31; // 0x154e0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_6; // 0x15640
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_18; // 0x15700
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_10; // 0x15818
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_10; // 0x15848
	FAnimNode_StateResult AnimGraphNode_StateResult_9; // 0x15878
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_33; // 0x158b8
	FAnimNode_StateResult AnimGraphNode_StateResult_8; // 0x15940
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_30; // 0x15980
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_32; // 0x15ae0
	FAnimNode_StateResult AnimGraphNode_StateResult_7; // 0x15b68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_31; // 0x15ba8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_30; // 0x15c30
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_29; // 0x15cb8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_28; // 0x15d40
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_17; // 0x15dc8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_9; // 0x15ee0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_16; // 0x15f10
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_5; // 0x16028
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_8; // 0x160e8
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_5; // 0x16118
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_4; // 0x16238
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_3; // 0x16358
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_15; // 0x16478
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_7; // 0x16590
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_14; // 0x165c0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_6; // 0x166d8
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_2; // 0x16708
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_9; // 0x16828
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_8; // 0x16858
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_7; // 0x16888
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_6; // 0x168b8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_29; // 0x168e8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_28; // 0x16a48
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_27; // 0x16ba8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_26; // 0x16d08
	FAnimNode_StateResult AnimGraphNode_StateResult_6; // 0x16e68
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_25; // 0x16ea8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_27; // 0x17008
	FAnimNode_StateResult AnimGraphNode_StateResult_5; // 0x17090
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0x170d0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_42; // 0x17190
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_76; // 0x17240
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_13; // 0x17278
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_15; // 0x17390
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_75; // 0x17458
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_41; // 0x17490
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_74; // 0x17540
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_4; // 0x17578
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_26; // 0x17658
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_24; // 0x176e0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_14; // 0x17840
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp; // 0x17908
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_73; // 0x17a28
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5; // 0x17a60
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5; // 0x17a90
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_40; // 0x17ac0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_72; // 0x17b70
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_12; // 0x17ba8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_11; // 0x17cc0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_10; // 0x17dd8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_71; // 0x17ef0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_39; // 0x17f28
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_13; // 0x17fd8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_16; // 0x180a0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_70; // 0x18170
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_38; // 0x181a8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_69; // 0x18258
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_68; // 0x18290
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_15; // 0x182c8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_67; // 0x18398
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_37; // 0x183d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_66; // 0x18480
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_65; // 0x184b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_64; // 0x184f0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_63; // 0x18528
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_36; // 0x18560
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_12; // 0x18610
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_62; // 0x186d8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_61; // 0x18710
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_60; // 0x18748
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_35; // 0x18780
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_11; // 0x18830
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_59; // 0x188f8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_58; // 0x18930
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_14; // 0x18968
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_9; // 0x18a38
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4; // 0x18b50
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4; // 0x18b80
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_8; // 0x18bb0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_7; // 0x18cc8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_10; // 0x18de0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_57; // 0x18ea8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_56; // 0x18ee0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_55; // 0x18f18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_54; // 0x18f50
	FAnimNode_BlendByLOD AnimGraphNode_BlendByLOD; // 0x18f88
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_53; // 0x19038
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_9; // 0x19070
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_34; // 0x19138
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_3; // 0x191e8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_52; // 0x192c8
	FAnimNode_Slot AnimGraphNode_Slot_6; // 0x19300
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_25; // 0x19358
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_33; // 0x193e0
	FAnimNode_Slot AnimGraphNode_Slot_5; // 0x19490
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_8; // 0x194e8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_51; // 0x195b0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_50; // 0x195e8
	FAnimNode_Slot AnimGraphNode_Slot_4; // 0x19620
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_32; // 0x19678
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_4; // 0x19728
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_12; // 0x197e8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_11; // 0x199a8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_10; // 0x19b68
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_49; // 0x19d28
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_48; // 0x19d60
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_47; // 0x19d98
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_31; // 0x19dd0
	FAnimNode_LinkedAnimGraph AnimGraphNode_LinkedAnimGraph; // 0x19e80
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_46; // 0x19f30
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45; // 0x19f68
	FAnimNode_Slot AnimGraphNode_Slot_3; // 0x19fa0
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_9; // 0x19ff8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_6; // 0x1a1b8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3; // 0x1a2d0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3; // 0x1a300
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_30; // 0x1a330
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_23; // 0x1a3e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_24; // 0x1a540
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_29; // 0x1a5c8
	FAnimNode_Slot AnimGraphNode_Slot_2; // 0x1a678
	FAnimNode_Slot AnimGraphNode_Slot; // 0x1a6d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_44; // 0x1a728
	FAnimNode_BlendBoneByChannel AnimGraphNode_BlendBoneByChannel; // 0x1a760
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_3; // 0x1a7d8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_3; // 0x1a8b0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_28; // 0x1a970
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_27; // 0x1aa20
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_26; // 0x1aad0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_23; // 0x1ab80
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_22; // 0x1ac08
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_22; // 0x1ad68
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_21; // 0x1adf0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_21; // 0x1af50
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_20; // 0x1afd8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_20; // 0x1b138
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_19; // 0x1b1c0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_19; // 0x1b320
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_18; // 0x1b3a8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_18; // 0x1b508
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_17; // 0x1b590
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_25; // 0x1b6f0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_24; // 0x1b7a0
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_13; // 0x1b850
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_43; // 0x1b920
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_42; // 0x1b958
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_2; // 0x1b990
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_8; // 0x1ba68
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_7; // 0x1bc28
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_41; // 0x1bde8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_40; // 0x1be20
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7; // 0x1be58
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_12; // 0x1bf20
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_39; // 0x1bff0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_23; // 0x1c028
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_11; // 0x1c0d8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_38; // 0x1c1a8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_37; // 0x1c1e0
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_10; // 0x1c218
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_22; // 0x1c2e8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_21; // 0x1c398
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_20; // 0x1c448
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_36; // 0x1c4f8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_35; // 0x1c530
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_9; // 0x1c568
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_34; // 0x1c638
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_19; // 0x1c670
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_2; // 0x1c720
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_33; // 0x1c7f8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6; // 0x1c830
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_32; // 0x1c8f8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_18; // 0x1c930
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_17; // 0x1c9e0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_16; // 0x1ca90
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_17; // 0x1cb40
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_16; // 0x1cbc8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_16; // 0x1cd28
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_15; // 0x1cdb0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_15; // 0x1cf10
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_14; // 0x1cf98
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_14; // 0x1d0f8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_13; // 0x1d180
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_13; // 0x1d2e0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_12; // 0x1d368
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_12; // 0x1d4c8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_11; // 0x1d550
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_2; // 0x1d6b0
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_8; // 0x1d770
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_31; // 0x1d840
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_15; // 0x1d878
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_7; // 0x1d928
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_30; // 0x1d9f8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_5; // 0x1da30
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14; // 0x1daf8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_29; // 0x1dba8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_6; // 0x1dbe0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_13; // 0x1dcb0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_28; // 0x1dd60
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_27; // 0x1dd98
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_5; // 0x1ddd0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x1dea0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x1ded8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x1df10
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x1df48
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_10; // 0x1df80
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_11; // 0x1e0e0
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x1e168
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_10; // 0x1e1a8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_9; // 0x1e230
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4; // 0x1e390
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_8; // 0x1e460
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9; // 0x1e5c0
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x1e648
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_7; // 0x1e688
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_8; // 0x1e7e8
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x1e870
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_6; // 0x1e8b0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_7; // 0x1ea10
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x1ea98
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x1ead8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_12; // 0x1eb98
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_3; // 0x1ec48
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_4; // 0x1ed18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_26; // 0x1ede0
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_6; // 0x1ee18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_25; // 0x1efd8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_5; // 0x1f010
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_24; // 0x1f1d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_23; // 0x1f208
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_22; // 0x1f240
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_21; // 0x1f278
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_11; // 0x1f2b0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6; // 0x1f360
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3; // 0x1f3e8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_20; // 0x1f4b0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_10; // 0x1f4e8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_5; // 0x1f598
	FAnimNode_LegIK AnimGraphNode_LegIK; // 0x1f6b0
	FAnimNode_Root AnimGraphNode_Root; // 0x1f7b8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_5; // 0x1f7f8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5; // 0x1f958
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_4; // 0x1f9e0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_9; // 0x1fb40
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_19; // 0x1fbf0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_18; // 0x1fc28
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_17; // 0x1fc60
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_16; // 0x1fc98
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_15; // 0x1fcd0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8; // 0x1fd08
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x1fdb8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_3; // 0x1fe40
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7; // 0x1ffa0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x20050
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_2; // 0x200d8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_14; // 0x20238
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_13; // 0x20270
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2; // 0x202a8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6; // 0x20378
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5; // 0x20428
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend; // 0x204d8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2; // 0x205a8
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive; // 0x20670
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned; // 0x20748
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x208b8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_4; // 0x20940
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_2; // 0x20b00
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_12; // 0x20be0
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_3; // 0x20c18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_11; // 0x20dd8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_10; // 0x20e10
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9; // 0x20e48
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8; // 0x20e80
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7; // 0x20eb8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6; // 0x20ef0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5; // 0x20f28
	FAnimNode_LinkedAnimGraph AnimGraphNode_SubInstance; // 0x20f60
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x21010
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4; // 0x210d8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x21188
	FAnimNode_RefPose AnimGraphNode_LocalRefPose_2; // 0x21238
	FAnimNode_RefPose AnimGraphNode_LocalRefPose; // 0x21260
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_4; // 0x21288
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2; // 0x213a0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2; // 0x213d0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_3; // 0x21400
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_2; // 0x21518
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x21630
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x21748
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x21778
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x217a8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4; // 0x21858
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x21890
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3; // 0x21940
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x21978
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x21a00
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive; // 0x21b60
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend; // 0x21c40
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_2; // 0x21d18
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned; // 0x21ed8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum; // 0x22098
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x22158
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x22190
	float Time; // 0x221c8
	float Movement Direction; // 0x221cc
	float Save Last Yaw; // 0x221d0
	float Turn Value; // 0x221d4
	AKSCharacter* Character; // 0x221d8
	FRotator ADS Rotator; // 0x221e0
	FName Step Type; // 0x221ec
	FName Material Type; // 0x221f4
	FName Shoe Type; // 0x221fc
	FName Clothing Type; // 0x22204
	FName Roll Direction; // 0x2220c
	UAnimMontage* Cached Dodge Roll; // 0x22218
	FRotator Control Rotation; // 0x22220
	UAnimSequence* TurnWounded; // 0x22230
	float Cached Angle; // 0x22238
	float AimYawInterpSpeed; // 0x2223c
	bool bCanResetAimYaw; // 0x22240
	float AimYawInterpSpeedTarget; // 0x22244
	FTimerHandle AimYawResetTimer; // 0x22248
	float Cached Stop Angle; // 0x22250
	FMulticastInlineDelegate OnMagThrow; // 0x22258
	bool bIsAdjustingAimYaw; // 0x22268
	bool Dodge Rolling BP; // 0x22269
	UKSWeaponComponent* Master Weapon Ref; // 0x22270
	TArray<UMaster_WeaponComponent_C*> Back Holster Inventory; // 0x22278
	bool bInteraction; // 0x22288
	EKSMovementDirection locoStartDir; // 0x22289
	UAnimSequenceBase* Stop Disable Moving A; // 0x22290
	UAnimSequenceBase* Stop Disable Moving B; // 0x22298
	UAnimSequenceBase* Current Stop Disable Moving; // 0x222a0
	UAnimMontage* InteractionMontage; // 0x222a8
	float InitialDistanceFromJumpLand; // 0x222b0
	EKSMovementDirection locoStopDir; // 0x222b4
	bool Starting a Pivot; // 0x222b5
	float MaxMantleHt; // 0x222b8
	float Max2StoryMantleHt; // 0x222bc
	bool StringMantlesTogether; // 0x222c0
	bool CatchingWeapon; // 0x222c1
	FRotator StoppedRootRotation; // 0x222c4
	FVector StoppedRootLocation; // 0x222d0
	float RagdollToMontageTime; // 0x222dc
	UAnimSequence* GetUpSequence; // 0x222e0
	UAnimMontage* GetUpMontage; // 0x222e8
	FTransform RagdollPelvisTransform; // 0x222f0
	float RagdollPelvisTransformAlpha; // 0x22320
	bool EnableRagdollPelvisTransform; // 0x22324
	UAnimMontage* DownedMontage; // 0x22328
	bool Disable upper body lands; // 0x22330
	bool bWantsToNoseDive; // 0x22331
	bool bCanChangeNoseDiveState; // 0x22332
	bool bFreeFallIntroComplete; // 0x22333
	float FreeFallDiveAlpha; // 0x22334
	bool DisableTurnInPlaceCounterRotate; // 0x22338
	bool bIsInPowerSlideBP; // 0x22339
	float ExitPowerSlideBlendTime; // 0x2233c
	FRotator RootMantleWallFacing; // 0x22340
	float HitDirectionPrimary_Fwd; // 0x2234c
	float HitDirectionPrimary_Right; // 0x22350
	float HitDirectionSecondary_Fwd; // 0x22354
	float HitDirectionSecondary_Right; // 0x22358
	float CachedPivotAngle; // 0x2235c
	FRecoilInfo Melee Recoil; // 0x22360
	int32_t Melee Recoil Counter; // 0x223c0
	float HitReactionAlpha; // 0x223c4
	bool Any Grip Override Active; // 0x223c8
	bool Left Hand Grip Override; // 0x223c9
	bool Right Hand Grip Override; // 0x223ca
	bool bIsHitReacting; // 0x223cb
	bool bIsServer; // 0x223cc
	bool bUseCollar; // 0x223cd
	float CollarDirection; // 0x223d0
	bool Use EngHeadMod; // 0x223d4
	bool Master Weapon Is Grenade; // 0x223d5
	FVector ADS Hand Position L; // 0x223d8
	FVector ADS Hand Position R; // 0x223e4
	FRotator ADS Hand Rotation L; // 0x223f0
	FRotator ADS Hand Rotation R; // 0x223fc
	ADSRollControlsEnum ADS Roll Controls; // 0x22408
	float ADS Roll Interp speed; // 0x2240c
	float ADS Bump Looping Speed; // 0x22410
	float ADS Bump Interp speed; // 0x22414
	float Stop Max; // 0x22418
	float Stop Min; // 0x2241c
	float ADS Bump Time; // 0x22420
	bool ADS Bump Start; // 0x22424
	float Ads Bump Start Time Delay; // 0x22428
	float Ads Bump Stop Time Delay; // 0x2242c
	bool ADS Bump Stop; // 0x22430
	FTimerHandle ADS Bump start Run Timer; // 0x22438
	FTimerHandle ADS Bump stop Run Timer; // 0x22440
	float NonComOffset; // 0x22448
	bool ChildPhysicsAssetEnable; // 0x2244c
	bool SkinUseCharacterScale; // 0x2244d
	FVector CharacterScale; // 0x22450
	float ExitWoundedBlendOutTime; // 0x2245c
	float Constant_2; // 0x22460
	bool EngHeadAdditiveSecondaryActive; // 0x22464
	bool UseHuntingRifleHold; // 0x22465
	bool PrototypeLocomotionGraphEnable; // 0x22466
	bool Enable Zipline Eng Aims; // 0x22467
	bool EnableLayeredHandAdditives; // 0x22468
	bool DisableHand; // 0x22469
	bool UseRightWristGadgetAdditive; // 0x2246a
	bool bActiveWeaponUsesCollar; // 0x2246b
	bool DisableEngHeadAdditiveSecondary; // 0x2246c
	bool DisableEngHeadAdditivePrimary; // 0x2246d
	bool RemoveHeadAccessory; // 0x2246e
	float HeadAccessoryScaleAlphaBP; // 0x22470
	FName K2Node_CustomEvent_NotifyName_5; // 0x22474
	int32_t K2Node_CustomEvent_MontageInstanceID_5; // 0x2247c
	FName K2Node_CustomEvent_NotifyName_4; // 0x22480
	int32_t K2Node_CustomEvent_MontageInstanceID_4; // 0x22488
	FDelegate K2Node_CreateDelegate_OutputDelegate; // 0x2248c
	FName K2Node_CustomEvent_NotifyName_3; // 0x2249c
	int32_t K2Node_CustomEvent_MontageInstanceID_3; // 0x224a4
	FDelegate K2Node_CreateDelegate_OutputDelegate_2; // 0x224a8
	FName K2Node_CustomEvent_NotifyName_2; // 0x224b8
	int32_t K2Node_CustomEvent_MontageInstanceID_2; // 0x224c0
	FDelegate K2Node_CreateDelegate_OutputDelegate_3; // 0x224c4
	FName K2Node_CustomEvent_NotifyName; // 0x224d4
	int32_t K2Node_CustomEvent_MontageInstanceID; // 0x224dc
	FDelegate K2Node_CreateDelegate_OutputDelegate_4; // 0x224e0
	int32_t Temp_int_Variable; // 0x224f0
	FName Temp_name_Variable; // 0x224f4
	FName K2Node_CustomEvent_NotifyName_22; // 0x224fc
	int32_t K2Node_CustomEvent_MontageInstanceID_22; // 0x22504
	FDelegate K2Node_CreateDelegate_OutputDelegate_5; // 0x22508
	FName K2Node_CustomEvent_NotifyName_23; // 0x22518
	int32_t K2Node_CustomEvent_MontageInstanceID_23; // 0x22520
	FDelegate K2Node_CreateDelegate_OutputDelegate_6; // 0x22524
	FDelegate K2Node_CreateDelegate_OutputDelegate_7; // 0x22534
	FName K2Node_CustomEvent_NotifyName_24; // 0x22544
	int32_t K2Node_CustomEvent_MontageInstanceID_24; // 0x2254c
	FDelegate K2Node_CreateDelegate_OutputDelegate_8; // 0x22550
	FName K2Node_CustomEvent_NotifyName_25; // 0x22560
	int32_t K2Node_CustomEvent_MontageInstanceID_25; // 0x22568
	FDelegate K2Node_CreateDelegate_OutputDelegate_9; // 0x2256c
	FName Temp_name_Variable_2; // 0x2257c
	int32_t Temp_int_Variable_2; // 0x22584
	FName K2Node_CustomEvent_NotifyName_26; // 0x22588
	int32_t K2Node_CustomEvent_MontageInstanceID_26; // 0x22590
	FDelegate K2Node_CreateDelegate_OutputDelegate_10; // 0x22594
	FName K2Node_CustomEvent_NotifyName_27; // 0x225a4
	int32_t K2Node_CustomEvent_MontageInstanceID_27; // 0x225ac
	FDelegate K2Node_CreateDelegate_OutputDelegate_11; // 0x225b0
	FName Temp_name_Variable_3; // 0x225c0
	FName K2Node_CustomEvent_NotifyName_28; // 0x225c8
	int32_t K2Node_CustomEvent_MontageInstanceID_28; // 0x225d0
	FDelegate K2Node_CreateDelegate_OutputDelegate_12; // 0x225d4
	int32_t Temp_int_Variable_3; // 0x225e4
	FName K2Node_CustomEvent_NotifyName_29; // 0x225e8
	int32_t K2Node_CustomEvent_MontageInstanceID_29; // 0x225f0
	FDelegate K2Node_CreateDelegate_OutputDelegate_13; // 0x225f4
	FName K2Node_CustomEvent_NotifyName_30; // 0x22604
	int32_t K2Node_CustomEvent_MontageInstanceID_30; // 0x2260c
	FDelegate K2Node_CreateDelegate_OutputDelegate_14; // 0x22610
	FName Temp_name_Variable_4; // 0x22620
	int32_t Temp_int_Variable_4; // 0x22628
	FName K2Node_CustomEvent_NotifyName_6; // 0x2262c
	int32_t K2Node_CustomEvent_MontageInstanceID_6; // 0x22634
	FName K2Node_CustomEvent_NotifyName_31; // 0x22638
	int32_t K2Node_CustomEvent_MontageInstanceID_31; // 0x22640
	FDelegate K2Node_CreateDelegate_OutputDelegate_15; // 0x22644
	FName K2Node_CustomEvent_NotifyName_32; // 0x22654
	int32_t K2Node_CustomEvent_MontageInstanceID_32; // 0x2265c
	FDelegate K2Node_CreateDelegate_OutputDelegate_16; // 0x22660
	FName K2Node_CustomEvent_NotifyName_33; // 0x22670
	int32_t K2Node_CustomEvent_MontageInstanceID_33; // 0x22678
	FDelegate K2Node_CreateDelegate_OutputDelegate_17; // 0x2267c
	FName K2Node_CustomEvent_NotifyName_34; // 0x2268c
	int32_t K2Node_CustomEvent_MontageInstanceID_34; // 0x22694
	FDelegate K2Node_CreateDelegate_OutputDelegate_18; // 0x22698
	FName K2Node_CustomEvent_NotifyName_35; // 0x226a8
	int32_t K2Node_CustomEvent_MontageInstanceID_35; // 0x226b0
	FDelegate K2Node_CreateDelegate_OutputDelegate_19; // 0x226b4
	FDelegate K2Node_CreateDelegate_OutputDelegate_20; // 0x226c4
	FName Temp_name_Variable_5; // 0x226d4
	int32_t Temp_int_Variable_5; // 0x226dc
	float CallFunc_BreakVector2D_X; // 0x226e0
	float CallFunc_BreakVector2D_Y; // 0x226e4
	FName K2Node_CustomEvent_NotifyName_36; // 0x226e8
	int32_t K2Node_CustomEvent_MontageInstanceID_36; // 0x226f0
	FDelegate K2Node_CreateDelegate_OutputDelegate_21; // 0x226f4
	FName K2Node_CustomEvent_NotifyName_37; // 0x22704
	int32_t K2Node_CustomEvent_MontageInstanceID_37; // 0x2270c
	FDelegate K2Node_CreateDelegate_OutputDelegate_22; // 0x22710
	FName K2Node_CustomEvent_NotifyName_38; // 0x22720
	int32_t K2Node_CustomEvent_MontageInstanceID_38; // 0x22728
	FName K2Node_CustomEvent_NotifyName_39; // 0x2272c
	int32_t K2Node_CustomEvent_MontageInstanceID_39; // 0x22734
	FDelegate K2Node_CreateDelegate_OutputDelegate_23; // 0x22738
	FDelegate K2Node_CreateDelegate_OutputDelegate_24; // 0x22748
	FName K2Node_CustomEvent_NotifyName_40; // 0x22758
	int32_t K2Node_CustomEvent_MontageInstanceID_40; // 0x22760
	FDelegate K2Node_CreateDelegate_OutputDelegate_25; // 0x22764
	FName Temp_name_Variable_6; // 0x22774
	int32_t Temp_int_Variable_6; // 0x2277c
	FName K2Node_CustomEvent_NotifyName_41; // 0x22780
	int32_t K2Node_CustomEvent_MontageInstanceID_41; // 0x22788
	FDelegate K2Node_CreateDelegate_OutputDelegate_26; // 0x2278c
	FName K2Node_CustomEvent_NotifyName_7; // 0x2279c
	int32_t K2Node_CustomEvent_MontageInstanceID_7; // 0x227a4
	FName K2Node_CustomEvent_NotifyName_42; // 0x227a8
	int32_t K2Node_CustomEvent_MontageInstanceID_42; // 0x227b0
	FDelegate K2Node_CreateDelegate_OutputDelegate_27; // 0x227b4
	FName K2Node_CustomEvent_NotifyName_43; // 0x227c4
	int32_t K2Node_CustomEvent_MontageInstanceID_43; // 0x227cc
	FDelegate K2Node_CreateDelegate_OutputDelegate_28; // 0x227d0
	FName K2Node_CustomEvent_NotifyName_44; // 0x227e0
	int32_t K2Node_CustomEvent_MontageInstanceID_44; // 0x227e8
	FDelegate K2Node_CreateDelegate_OutputDelegate_29; // 0x227ec
	FName K2Node_CustomEvent_NotifyName_45; // 0x227fc
	int32_t K2Node_CustomEvent_MontageInstanceID_45; // 0x22804
	FDelegate K2Node_CreateDelegate_OutputDelegate_30; // 0x22808
	FName Temp_name_Variable_7; // 0x22818
	int32_t Temp_int_Variable_7; // 0x22820
	FName K2Node_CustomEvent_NotifyName_46; // 0x22824
	int32_t K2Node_CustomEvent_MontageInstanceID_46; // 0x2282c
	FDelegate K2Node_CreateDelegate_OutputDelegate_31; // 0x22830
	FDelegate K2Node_CreateDelegate_OutputDelegate_32; // 0x22840
	FName K2Node_CustomEvent_NotifyName_47; // 0x22850
	int32_t K2Node_CustomEvent_MontageInstanceID_47; // 0x22858
	FDelegate K2Node_CreateDelegate_OutputDelegate_33; // 0x2285c
	FName K2Node_CustomEvent_NotifyName_48; // 0x2286c
	int32_t K2Node_CustomEvent_MontageInstanceID_48; // 0x22874
	FDelegate K2Node_CreateDelegate_OutputDelegate_34; // 0x22878
	FName K2Node_CustomEvent_NotifyName_49; // 0x22888
	int32_t K2Node_CustomEvent_MontageInstanceID_49; // 0x22890
	FDelegate K2Node_CreateDelegate_OutputDelegate_35; // 0x22894
	FName K2Node_CustomEvent_NotifyName_50; // 0x228a4
	int32_t K2Node_CustomEvent_MontageInstanceID_50; // 0x228ac
	FDelegate K2Node_CreateDelegate_OutputDelegate_36; // 0x228b0
	bool Temp_bool_Variable; // 0x228c0
	bool Temp_bool_Variable_2; // 0x228c1
	float Temp_float_Variable; // 0x228c4
	bool Temp_bool_Variable_3; // 0x228c8
	bool Temp_bool_Has_Been_Initd_Variable; // 0x228c9
	FName K2Node_CustomEvent_NotifyName_8; // 0x228cc
	int32_t K2Node_CustomEvent_MontageInstanceID_8; // 0x228d4
	float Temp_float_Variable_2; // 0x228d8
	bool Temp_bool_Variable_4; // 0x228dc
	float Temp_float_Variable_3; // 0x228e0
	bool Temp_bool_IsClosed_Variable; // 0x228e4
	float Temp_float_Variable_4; // 0x228e8
	bool Temp_bool_Variable_5; // 0x228ec
	float K2Node_Select_Default; // 0x228f0
	FDelegate K2Node_CreateDelegate_OutputDelegate_37; // 0x228f4
	FName K2Node_CustomEvent_NotifyName_9; // 0x22904
	int32_t K2Node_CustomEvent_MontageInstanceID_9; // 0x2290c
	FDelegate K2Node_CreateDelegate_OutputDelegate_38; // 0x22910
	float K2Node_Select_Default_2; // 0x22920
	float K2Node_Select_Default_3; // 0x22924
	float K2Node_Select_Default_4; // 0x22928
	float K2Node_Select_Default_5; // 0x2292c
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x22930
	bool K2Node_DynamicCast_bSuccess; // 0x22938
	float K2Node_Event_Duration; // 0x2293c
	FVector2D K2Node_Event_Direction; // 0x22940
	FName K2Node_Event_NewInteractState; // 0x22948
	float K2Node_Event_NewInteractHeight; // 0x22950
	float K2Node_Event_NewInteractTime; // 0x22954
	bool K2Node_SwitchName_CmpSuccess; // 0x22958
	FName K2Node_Event_OldInteractState; // 0x2295c
	bool K2Node_SwitchName_CmpSuccess_2; // 0x22964
	FVector K2Node_Event_PivotLocation; // 0x22968
	TArray<USkeletalMeshComponent*> CallFunc_GetAncillaryMeshes_ReturnValue; // 0x22978
	TArray<USkeletalMeshComponent*> CallFunc_GetAncillaryMeshes_ReturnValue_2; // 0x22988
	USkeletalMeshComponent* CallFunc_Array_Get_Item; // 0x22998
	USkeletalMeshComponent* CallFunc_Array_Get_Item_2; // 0x229a0
	UMasterWeapon_ABP_C* K2Node_DynamicCast_AsMaster_Weapon_ABP; // 0x229a8
	bool K2Node_DynamicCast_bSuccess_2; // 0x229b0
	FVector K2Node_CustomEvent_RootLocation; // 0x229b4
	FRotator K2Node_CustomEvent_RootRotation; // 0x229c0
	FVector K2Node_Event_StopLocation; // 0x229cc
	FVector K2Node_Event_StartLocation; // 0x229d8
	EKSMovementDirection K2Node_Event_OldDirection; // 0x229e4
	EKSMovementDirection K2Node_Event_NewDirection; // 0x229e5
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID; // 0x229e8
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x229f0
	bool CallFunc_IsValid_ReturnValue; // 0x229f8
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_2; // 0x229fc
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_2; // 0x22a00
	bool CallFunc_IsValid_ReturnValue_2; // 0x22a08
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_3; // 0x22a0c
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_3; // 0x22a10
	bool CallFunc_IsValid_ReturnValue_3; // 0x22a18
	float K2Node_Event_InMantleHeight; // 0x22a1c
	bool K2Node_Event_bInVault; // 0x22a20
	float K2Node_Event_InVaultDrop; // 0x22a24
	float K2Node_Event_InUpDuration; // 0x22a28
	float K2Node_Event_InAcrossDuration; // 0x22a2c
	float K2Node_Event_InDownDuration; // 0x22a30
	FName K2Node_Event_InMantleName; // 0x22a34
	FName K2Node_CustomEvent_NotifyName_10; // 0x22a3c
	int32_t K2Node_CustomEvent_MontageInstanceID_10; // 0x22a44
	float K2Node_Event_DeltaTimeX; // 0x22a48
	FDelegate K2Node_CreateDelegate_OutputDelegate_39; // 0x22a4c
	FDelegate K2Node_CreateDelegate_OutputDelegate_40; // 0x22a5c
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_4; // 0x22a6c
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_4; // 0x22a70
	FDelegate K2Node_CreateDelegate_OutputDelegate_41; // 0x22a78
	bool CallFunc_IsValid_ReturnValue_5; // 0x22a88
	FDelegate K2Node_CreateDelegate_OutputDelegate_42; // 0x22a8c
	FDelegate K2Node_CreateDelegate_OutputDelegate_43; // 0x22a9c
	FName Temp_name_Variable_8; // 0x22aac
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_5; // 0x22ab4
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_5; // 0x22ab8
	FName Temp_name_Variable_9; // 0x22ac0
	bool CallFunc_IsValid_ReturnValue_6; // 0x22ac8
	FName Temp_name_Variable_10; // 0x22acc
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride; // 0x22ad4
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_6; // 0x22ad8
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_6; // 0x22ae0
	bool CallFunc_IsValid_ReturnValue_8; // 0x22ae8
	UKSCharacterAnimInst* K2Node_DynamicCast_AsKSCharacter_Anim_Inst; // 0x22af0
	bool K2Node_DynamicCast_bSuccess_3; // 0x22af8
	UKSCharacterAnimInst* K2Node_DynamicCast_AsKSCharacter_Anim_Inst_2; // 0x22b00
	bool K2Node_DynamicCast_bSuccess_4; // 0x22b08
	EKSPowerSlideEndReason K2Node_Event_EndReason; // 0x22b09
	bool K2Node_SwitchEnum_CmpSuccess; // 0x22b0a
	UKSCharacterAnimInst* K2Node_DynamicCast_AsKSCharacter_Anim_Inst_3; // 0x22b10
	bool K2Node_DynamicCast_bSuccess_5; // 0x22b18
	FName Temp_name_Variable_11; // 0x22b1c
	EKSMovementDirection K2Node_CustomEvent_NewMoveDirection_2; // 0x22b24
	EKSMovementDirection K2Node_CustomEvent_NewMoveDirection; // 0x22b25
	FName Temp_name_Variable_12; // 0x22b28
	UKSCharacterAnimInst* CallFunc_Map_Find_Value; // 0x22b30
	int32_t Temp_int_Variable_8; // 0x22b38
	ECombatState K2Node_Event_NewCombatState; // 0x22b3c
	bool K2Node_Event_bBlockCooldown; // 0x22b3d
	bool K2Node_Event_bForce; // 0x22b3e
	UAnimMontage* K2Node_Event_ReviveMontage; // 0x22b40
	bool K2Node_Event_bIsInAir; // 0x22b48
	UKSWeaponComponent* K2Node_Event_Weapon_2; // 0x22b50
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_7; // 0x22b58
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_7; // 0x22b60
	UKSWeaponComponent* K2Node_Event_Weapon; // 0x22b68
	bool CallFunc_IsValid_ReturnValue_12; // 0x22b70
	AKSCharacter* K2Node_CustomEvent_In_Character; // 0x22b78
	AKSCharacterFoundation* K2Node_CustomEvent_Character; // 0x22b80
	FDamageEffect K2Node_CustomEvent_Response; // 0x22b88
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter_2; // 0x22bd8
	bool K2Node_DynamicCast_bSuccess_6; // 0x22be0
	FVector CallFunc_ProcessTakePointHitDamage_WorldHitLocation; // 0x22be4
	FVector CallFunc_ProcessTakePointHitDamage_WorldHitNormal; // 0x22bf0
	FVector CallFunc_ProcessTakePointHitDamage_VectorToHitSource; // 0x22bfc
	EKSMovementDirection CallFunc_ProcessTakePointHitDamage_HitDirection; // 0x22c08
	FName K2Node_CustomEvent_NotifyName_11; // 0x22c0c
	int32_t K2Node_CustomEvent_MontageInstanceID_11; // 0x22c14
	FDelegate K2Node_CreateDelegate_OutputDelegate_44; // 0x22c18
	FName K2Node_CustomEvent_NotifyName_12; // 0x22c28
	int32_t K2Node_CustomEvent_MontageInstanceID_12; // 0x22c30
	FDelegate K2Node_CreateDelegate_OutputDelegate_45; // 0x22c34
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_2; // 0x22c44
	UAnimMontage* CallFunc_GetDownedTransitionMontage_OutAnimMontage; // 0x22c48
	EKSTurnInPlaceAnimationVariant K2Node_Event_AnimationVariant; // 0x22c50
	float K2Node_Event_DelayTime; // 0x22c54
	bool K2Node_SwitchEnum_CmpSuccess_2; // 0x22c58
	FName K2Node_CustomEvent_NotifyName_13; // 0x22c5c
	int32_t K2Node_CustomEvent_MontageInstanceID_13; // 0x22c64
	FDelegate K2Node_CreateDelegate_OutputDelegate_46; // 0x22c68
	FName K2Node_CustomEvent_NotifyName_14; // 0x22c78
	int32_t K2Node_CustomEvent_MontageInstanceID_14; // 0x22c80
	FDelegate K2Node_CreateDelegate_OutputDelegate_47; // 0x22c84
	TSet<FName> K2Node_CustomEvent_Keywords; // 0x22c98
	FName K2Node_CustomEvent_NotifyName_15; // 0x22ce8
	int32_t K2Node_CustomEvent_MontageInstanceID_15; // 0x22cf0
	FDelegate K2Node_CreateDelegate_OutputDelegate_48; // 0x22cf4
	FName Temp_name_Variable_13; // 0x22d04
	int32_t Temp_int_Variable_9; // 0x22d0c
	FName K2Node_CustomEvent_NotifyName_16; // 0x22d10
	int32_t K2Node_CustomEvent_MontageInstanceID_16; // 0x22d18
	FDelegate K2Node_CreateDelegate_OutputDelegate_49; // 0x22d1c
	FName K2Node_CustomEvent_NotifyName_17; // 0x22d2c
	int32_t K2Node_CustomEvent_MontageInstanceID_17; // 0x22d34
	FDelegate K2Node_CreateDelegate_OutputDelegate_50; // 0x22d38
	bool Temp_bool_Has_Been_Initd_Variable_2; // 0x22d48
	bool CallFunc_UpdateCollarDisableLogic_PlayCollarForWepType; // 0x22d49
	FName K2Node_CustomEvent_NotifyName_18; // 0x22d4c
	int32_t K2Node_CustomEvent_MontageInstanceID_18; // 0x22d54
	FDelegate K2Node_CreateDelegate_OutputDelegate_51; // 0x22d58
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_3; // 0x22d68
	FName K2Node_CustomEvent_NotifyName_19; // 0x22d6c
	int32_t K2Node_CustomEvent_MontageInstanceID_19; // 0x22d74
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_4; // 0x22d78
	bool K2Node_CustomEvent_IsSprinting; // 0x22d79
	FDelegate K2Node_CreateDelegate_OutputDelegate_52; // 0x22d7c
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_5; // 0x22d8c
	TSet<FName> CallFunc_GetAllSkinKeywords_InOutKeywords; // 0x22d90
	FDelegate K2Node_CreateDelegate_OutputDelegate_53; // 0x22de0
	FName K2Node_CustomEvent_NotifyName_20; // 0x22df0
	int32_t K2Node_CustomEvent_MontageInstanceID_20; // 0x22df8
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_6; // 0x22dfc
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_7; // 0x22dfd
	FDelegate K2Node_CreateDelegate_OutputDelegate_54; // 0x22e00
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_8; // 0x22e10
	bool CallFunc_GetSkinnedAnimMontage_bHasOverride_9; // 0x22e11
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_8; // 0x22e14
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_8; // 0x22e18
	bool CallFunc_IsValid_ReturnValue_14; // 0x22e20
	UAnimMontage* CallFunc_Get_Roll_Animation_Set_Cached; // 0x22e28
	FName Temp_name_Variable_14; // 0x22e30
	int32_t Temp_int_Variable_10; // 0x22e38
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride; // 0x22e3c
	bool Temp_bool_IsClosed_Variable_2; // 0x22e3d
	FName K2Node_CustomEvent_NotifyName_21; // 0x22e40
	int32_t K2Node_CustomEvent_MontageInstanceID_21; // 0x22e48
	bool K2Node_Event_bSetIsShieldActive; // 0x22e4c
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_9; // 0x22e50
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_9; // 0x22e58
	bool CallFunc_IsValid_ReturnValue_16; // 0x22e60
	int32_t CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID_10; // 0x22e64
	UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_10; // 0x22e68
	bool CallFunc_IsValid_ReturnValue_17; // 0x22e70
	FDelegate K2Node_CreateDelegate_OutputDelegate_55; // 0x22e74
};

struct UMaterialExpressionArctangentFast : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UPGame_GameInstance : UGameInstance {
	bool bLogoffOnAppSuspend; // 0x1e8
	bool bLogoffOnAppResume; // 0x1e9
	FString LastSonyMatchId; // 0x1f0
	bool bStartHotfixProcessingOnUpdateAppSettings; // 0x240
};

struct UMaterialExpressionRuntimeVirtualTextureOutput : UMaterialExpressionCustomOutput {
	FExpressionInput BaseColor; // 0x40
	FExpressionInput Specular; // 0x54
	FExpressionInput Roughness; // 0x68
	FExpressionInput Normal; // 0x7c
	FExpressionInput WorldHeight; // 0x90
	FExpressionInput Opacity; // 0xa4
	FExpressionInput Mask; // 0xb8
};

struct UAkAudioType : UObject {
	uint32_t ShortID; // 0x28
	TArray<UObject*> UserData; // 0x30
};

struct UParticleModuleAttractorLine : UParticleModuleAttractorBase {
	FVector EndPoint0; // 0x30
	FVector EndPoint1; // 0x3c
	FRawDistributionFloat Range; // 0x48
	FRawDistributionFloat Strength; // 0x78
};

struct UNavCollisionBase : UObject {
	char bIsDynamicObstacle : 1; // 0x28
};

struct UBehaviorTreeManager : UObject {
	int32_t MaxDebuggerSteps; // 0x28
	TArray<FBehaviorTreeTemplateInfo> LoadedTemplates; // 0x30
	TArray<UBehaviorTreeComponent*> ActiveComponents; // 0x40
};

struct UKSAudioManager : UObject {
	UKSAudioPlayerStateParameterData* AudioPlayerStateParameters; // 0x28
	TMap<FString, UDataTable*> LoadedAudioDataTables; // 0x50
	TWeakObjectPtr<UKSGameInstance> WeakGameInstance; // 0x120
};

struct AKSBotFactory : AActor {
	bool bFinishPrecacheOnBeginPlay; // 0x220
	bool bUseTeamInsteadOfSide; // 0x221
	int32_t SideNum; // 0x224
	int32_t TeamNum; // 0x228
	ECharacterBehaviorState InitialBehaviorState; // 0x22c
	bool bUseInlineSpawnCollection; // 0x22d
	UKSBotDefinitionCollection* SpawnCollectionAsset; // 0x230
	UKSBotDefinitionCollection* SpawnCollectionInline; // 0x238
	bool bSpawnHidden; // 0x240
	bool bRandomBot; // 0x241
	bool bWithoutReplacement; // 0x242
	bool bRandomLoadout; // 0x243
	bool bPreserveAIControllers; // 0x244
	bool OverrideTeamSizeFromQueue; // 0x245
	int32_t FillTeamTo; // 0x248
	bool bUseAutoWayPointSets; // 0x24c
	AKSWayPointSet* WayPointSet; // 0x250
	bool ShouldReverseWayPointSetDirection; // 0x258
	TArray<APlayerStart*> SpawnPoints; // 0x260
	int32_t SpawnOnBeginPlay; // 0x270
	int32_t SpawnOnRoundStart; // 0x274
	int32_t SpawnOnRoundSetup; // 0x278
	int32_t SpawnOnCollectionTimeout; // 0x27c
	int32_t SpawnOnHackTimeout; // 0x280
	int32_t SpawnOnEscapeTimeout; // 0x284
	int32_t SpawnOnDownloadStart; // 0x288
	int32_t SpawnOnAlarm; // 0x28c
	int32_t MinSpawnCount; // 0x290
	int32_t MaxSpawnCount; // 0x294
	bool bMaintainCountOnBotDeath; // 0x298
	TArray<AKSAIController*> ActiveBots; // 0x2a0
	AKSTeamState* TeamState; // 0x2b0
	int32_t NextSequentialSpawnStart; // 0x2b8
	int32_t CurrentLoadoutSeed; // 0x2bc
	TArray<FName> RelevantObjectiveStates; // 0x2c0
	TArray<FName> RelevantGameStatesForObjectiveSpawning; // 0x2d0
	int32_t NumberOfTimesToSpawnForObjectiveRelevancy; // 0x2e0
	UBoxComponent* RelevancyVolume; // 0x2e8
	TArray<AKSCharacter*> ContainedPlayers; // 0x2f0
	TArray<AKSObjectiveBase*> ContainedObjectives; // 0x300
};

struct UBTTask_RotateToFaceBBEntry : UBTTask_BlackboardBase {
	float Precision; // 0x98
};

struct UBreakpoint : UObject {
	char bEnabled : 1; // 0x28
	UEdGraphNode* Node; // 0x30
	char bStepOnce : 1; // 0x38
	char bStepOnce_WasPreviouslyDisabled : 1; // 0x38
	char bStepOnce_RemoveAfterHit : 1; // 0x38
};

struct UKSStoreItemWithWeaponData : UKSPurchaseData {
	UKSWeaponAsset* AssociatedWeaponAsset; // 0x58
};

struct UKSActivityRewardCondition_WeaponUsed : UKSActivityRewardCondition {
	TArray<TSoftObjectPtr<UKSItem>> MatchingWeapons; // 0x30
};

struct ULogoutCallbackProxy : UBlueprintAsyncActionBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UNiagaraDataInterfaceVectorCurve : UNiagaraDataInterfaceCurveBase {
	FRichCurve XCurve; // 0x58
	FRichCurve YCurve; // 0xd8
	FRichCurve ZCurve; // 0x158
};

struct UKSJobItem : UKSItem {
	bool IsStarterJob; // 0x250
	bool IsRandomJob; // 0x251
	bool AllowDuplicates; // 0x252
	TSoftObjectPtr<UKSSkinBundle> JobDefaultSkin; // 0x258
	int32_t JobSkinBundleLootTableId; // 0x280
	TSoftObjectPtr<UKSJobRole> JobRoleItem; // 0x288
	TSoftObjectPtr<UKSItem> UniqueItem; // 0x2b0
	TSoftObjectPtr<UKSItem> PrimaryWeaponOptionOne; // 0x2d8
	TSoftObjectPtr<UKSWeaponCategoryAsset> PrimaryWeaponCategoryOptionOne; // 0x300
	bool PrimaryWeaponOptionOneIsDefault; // 0x328
	TSoftObjectPtr<UKSItem> PrimaryWeaponOptionTwo; // 0x330
	TSoftObjectPtr<UKSWeaponCategoryAsset> PrimaryWeaponCategoryOptionTwo; // 0x358
	bool PrimaryWeaponOptionTwoIsDefault; // 0x380
	TSoftObjectPtr<UKSItem> SecondaryWeaponOptionOne; // 0x388
	bool SecondaryWeaponOptionOneIsDefault; // 0x3b0
	TSoftObjectPtr<UKSItem> SecondaryWeaponOptionTwo; // 0x3b8
	bool SecondaryWeaponOptionTwoIsDefault; // 0x3e0
	TSoftObjectPtr<UKSItem> MeleeWeapon; // 0x3e8
	TSoftObjectPtr<UKSItem> QuickMeleeWeapon; // 0x410
	TArray<TSoftObjectPtr<UKSItem>> Passives; // 0x438
	TSoftObjectPtr<UKSItem> GadgetOptionOne; // 0x448
	bool GadgetOptionOneIsDefault; // 0x470
	TSoftObjectPtr<UKSItem> GadgetOptionTwo; // 0x478
	bool GadgetOptionTwoIsDefault; // 0x4a0
	TSoftObjectPtr<UKSItem> PerkOptionOne; // 0x4a8
	bool PerkOptionOneIsDefault; // 0x4d0
	TSoftObjectPtr<UKSItem> PerkOptionTwo; // 0x4d8
	bool PerkOptionTwoIsDefault; // 0x500
	TSoftObjectPtr<UKSItem> PerkOptionThree; // 0x508
	bool PerkOptionThreeIsDefault; // 0x530
	TSoftObjectPtr<UKSItem> PerkOptionFour; // 0x538
	bool PerkOptionFourIsDefault; // 0x560
	TSoftObjectPtr<UKSItem> PerkOptionFive; // 0x568
	bool PerkOptionFiveIsDefault; // 0x590
	TSoftObjectPtr<UKSItem> PerkOptionSix; // 0x598
	bool PerkOptionSixIsDefault; // 0x5c0
	TSoftObjectPtr<UKSItem> GambitOptionOne; // 0x5c8
	bool GambitOptionOneIsDefault; // 0x5f0
	TSoftObjectPtr<UKSItem> GambitOptionTwo; // 0x5f8
	bool GambitOptionTwoIsDefault; // 0x620
	TSoftObjectPtr<UKSItem> GambitOptionThree; // 0x628
	bool GambitOptionThreeIsDefault; // 0x650
	TSoftObjectPtr<UKSItem> GambitOptionFour; // 0x658
	bool GambitOptionFourIsDefault; // 0x680
	TSoftObjectPtr<UKSItem> GambitOptionFive; // 0x688
	bool GambitOptionFiveIsDefault; // 0x6b0
	TSoftObjectPtr<UKSItem> GambitOptionSix; // 0x6b8
	bool GambitOptionSixIsDefault; // 0x6e0
	TArray<TSoftObjectPtr<UKSEmote>> DefaultEmotes; // 0x6e8
	TArray<TSoftObjectPtr<UKSQuip>> DefaultQuips; // 0x6f8
	TArray<TSoftObjectPtr<UKSCommunication>> DefaultCommunications; // 0x708
	TArray<TSoftObjectPtr<UKSSpray>> DefaultSprays; // 0x718
	TSoftObjectPtr<UKSItem> DefaultWingsuit; // 0x728
	TArray<FSoftObjectPath> LobbyPropsToPreload; // 0x750
	TSoftObjectPtr<UTexture2D> SmallJobIcon; // 0x760
	TSoftObjectPtr<UTexture2D> JobPortrait; // 0x788
	TSoftObjectPtr<UTexture2D> JobDiamondPortrait; // 0x7b0
	TSoftObjectPtr<UTexture2D> JobSquarePortrait; // 0x7d8
};

struct UKSComponentReticleWidgetBase : UKSActiveWeaponComponentWidget {
	float ShrinkAnimationTime; // 0x5e8
	float BlockedShotIconMaxScale; // 0x5ec
	float BlockedShotIconMinScale; // 0x5f0
	float BlockedShotMinScaleSqDist; // 0x5f4
	bool bGrenadeCooking; // 0x5f8
	bool bInADS; // 0x5f9
	bool bCachedBlockIconVisible; // 0x5fa
	float CachedWeaponAccuracy; // 0x5fc
	float CachedReticleOffset; // 0x600
};

struct UEditableGameplayTagQueryExpression_AllTagsMatch : UEditableGameplayTagQueryExpression {
	FGameplayTagContainer Tags; // 0x28
};

struct UMovieSceneStringSection : UMovieSceneSection {
	FMovieSceneStringChannel StringCurve; // 0xe0
};

struct AKSInspectableMusicManagerActor : AActor {
	UAkAudioEvent* AkEvent; // 0x220
	TArray<FName> NamesForRtpcQueries; // 0x228
	TArray<FName> NamesForSwitchQueries; // 0x238
	bool bQueryResultsReady; // 0x2f0
	int32_t StaleCounter; // 0x2f4
};

struct UVerticalBoxSlot : UPanelSlot {
	FSlateChildSize Size; // 0x38
	FMargin Padding; // 0x40
	EHorizontalAlignment HorizontalAlignment; // 0x58
	EVerticalAlignment VerticalAlignment; // 0x59
};

struct UPUMG_PlayerWhoDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnSearchByNameResultsUpdated; // 0x38
	TArray<UPUMG_PlayerInfo*> CachedSearchByNameResults; // 0x48
};

struct UTextPropertyTestObject : UObject {
	FText DefaultedText; // 0x28
	FText UndefaultedText; // 0x40
	FText TransientText; // 0x58
};

struct UBTDecorator_Blackboard : UBTDecorator_BlackboardBase {
	int32_t IntValue; // 0x90
	float FloatValue; // 0x94
	FString StringValue; // 0x98
	FString CachedDescription; // 0xa8
	char OperationType; // 0xb8
	EBTBlackboardRestart NotifyObserver; // 0xb9
};

struct UKSPlayerMod_HideFromTeam : UKSPlayerMod {
	bool bHideFriendlyStencil; // 0x330
	bool bNoFriendlyDrone; // 0x331
};

struct UKSEquipAllWidget : UKSWidget {
	UKSEquipAllData* EquipAllData; // 0x520
};

struct UWBP_LerpingBar_C : UKSFloatTickLerpWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x260
	UImage* BarImage; // 0x268
	FLinearColor BarColor; // 0x270
};

struct UWBP_EventScreen_HolidayY1_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* AnimOnShown; // 0x528
	UBorder* BonusTooltip; // 0x530
	UVerticalBox* ChallengesContainer; // 0x538
	UImage* Image_148; // 0x540
	UImage* Image_334; // 0x548
	UImage* Image_497; // 0x550
	UImage* Image_683; // 0x558
	UHorizontalBox* RemainingContainer; // 0x560
	URichTextBlock* RichTextBlock_1; // 0x568
	UTextBlock* TimeRemaining; // 0x570
	UTextBlock* TimeRemainingVal; // 0x578
	UWBP_ChallengeEntry_Event_C* WBP_ChallengeEntry_Event; // 0x580
	UWBP_ChallengeEntry_Event_C* WBP_ChallengeEntry_Event_2; // 0x588
	UWBP_ChallengeEntry_Event_C* WBP_ChallengeEntry_Event_3; // 0x590
	UWBP_Header1_C* WBP_Header1_2; // 0x598
	UWBP_Header2_C* WBP_Header2; // 0x5a0
	UWBP_HolidayBundleItem_C* WBP_HolidayBundleItem_2; // 0x5a8
	UWBP_HolidayBundleItem_C* WBP_HolidayBundleItem_3; // 0x5b0
	UWBP_HolidayBundleItem_C* WBP_HolidayBundleItem_Free; // 0x5b8
	FName Current Challenge Data Table Row; // 0x5c0
	FGameplayTag Current Challenge Data Table Tag; // 0x5c8
	int32_t BundleFocusGroup; // 0x5d0
	int32_t ChallengesFocusGroup; // 0x5d4
	int32_t SnowPatrolScorchBundleID; // 0x5d8
	int32_t DoctorFrostySaintBundleID; // 0x5dc
	int32_t MistletoeVyBundleID; // 0x5e0
	FName HolidayEventLocalAction; // 0x5e4
	int32_t CurrentFocusGroup; // 0x5ec
	int32_t EventTimeRemaining; // 0x5f0
	float Time Count; // 0x5f4
};

struct UWBP_PlayerContextMenu_C : UKSContextMenu {
	FPointerToUberGraphFrame UberGraphFrame; // 0x570
	UWidgetAnimation* ShowAnim; // 0x578
	UOverlay* AliasContainer; // 0x580
	UImage* Image_160; // 0x588
	UVerticalBox* MenuContainer; // 0x590
	UImage* OptionsBgA; // 0x598
	UImage* OptionsBgB; // 0x5a0
	UVerticalBox* OptionsContainerA; // 0x5a8
	UVerticalBox* OptionsContainerB; // 0x5b0
	USizeBox* OuterMenuContainer; // 0x5b8
	UWBP_player_card_module_C* PlayerCard; // 0x5c0
	UCanvasPanel* ScreenCanvas; // 0x5c8
	UVerticalBox* VerticalBox_1; // 0x5d0
	UWBP_Social_Platform_ID_C* WBP_Social_Platform_ID; // 0x5d8
	UWBP_Social_Platform_ID_C* WBP_Social_Platform_ID_2; // 0x5e0
	UWBP_Social_Platform_ID_C* WBP_Social_Platform_ID_3; // 0x5e8
	UWBP_Social_Platform_ID_C* WBP_Social_Platform_ID_4; // 0x5f0
	UWBP_Social_Platform_ID_C* WBP_Social_Platform_ID_5; // 0x5f8
	UWBP_Social_Platform_ID_C* WBP_Social_Platform_ID_6; // 0x600
	UWBP_VoiceActivityContainer_C* WBP_VoiceActivityContainer; // 0x608
	FMulticastInlineDelegate OnReadyForNavigation; // 0x610
	FMulticastInlineDelegate OnMenuHidden; // 0x620
	FMulticastInlineDelegate OnMenuStart; // 0x630
	TArray<FKey> KeysToAllow; // 0x640
	TScriptInterface<IIKSContextMenuTarget_C> Last Interacted Target; // 0x650
	FMulticastInlineDelegate OnReportPlayer_1; // 0x660
};

struct UPawnMovementComponent : UNavMovementComponent {
	APawn* PawnOwner; // 0x130
};

struct UAISenseEvent_Hearing : UAISenseEvent {
	FAINoiseEvent Event; // 0x28
};

struct UMaterialExpressionSpeedTree : UMaterialExpression {
	FExpressionInput GeometryInput; // 0x40
	FExpressionInput WindInput; // 0x54
	FExpressionInput LODInput; // 0x68
	FExpressionInput ExtraBendWS; // 0x7c
	ESpeedTreeGeometryType GeometryType; // 0x90
	ESpeedTreeWindType WindType; // 0x91
	ESpeedTreeLODType LODType; // 0x92
	float BillboardThreshold; // 0x94
	bool bAccurateWindVelocities; // 0x98
};

struct AFriendlyLobbyPreviewActor_C : AKSJobSelectPreviewActor_Lobby {
	UPlayerInfoPrevwLoadoutComponent* PlayerInfoLoadoutComponent; // 0x5c8
};

struct UWBP_Guided_Tutorial_Tips_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnHidden; // 0x528
	UWidgetAnimation* OnShow; // 0x530
	UWidgetAnimation* hover_anim; // 0x538
	UOverlay* background; // 0x540
	UWBP_StandardButtonLarge_C* GotItButton; // 0x548
	UImage* Image_1; // 0x550
	UImage* Image_3; // 0x558
	UImage* Image_130; // 0x560
	UWBP_Guided_Tutorial_Card_C* WBP_Guided_Tutorial_Card; // 0x568
	UWBP_Guided_Tutorial_Card_C* WBP_Guided_Tutorial_Card_2; // 0x570
	UWBP_Guided_Tutorial_Card_C* WBP_Guided_Tutorial_Card_3; // 0x578
	UWBP_Header1_C* WBP_Header1; // 0x580
	UWBP_panel_bevel_C* WBP_panel_bevel; // 0x588
	UWBP_panel_bevel_C* WBP_panel_bevel_C_1; // 0x590
	EPUMG_LoginState LoginState; // 0x598
	EConfigPropertyGuidedCalloutScenes CurrentTipScreen; // 0x599
	UAkAudioEvent* ShowGuidedTutorialTipsSFX; // 0x5a0
	UAkAudioEvent* NavBackGuidedTutorialTipsSFX; // 0x5a8
};

struct UAkWwiseTree : UWidget {
	FMulticastInlineDelegate OnSelectionChanged; // 0x110
	FMulticastInlineDelegate OnItemDragged; // 0x120
};

struct UParticleModuleKillHeight : UParticleModuleKillBase {
	FRawDistributionFloat Height; // 0x30
	char bAbsolute : 1; // 0x60
	char bFloor : 1; // 0x60
	char bApplyPSysScale : 1; // 0x60
};

struct UEnvQueryTest_Volume : UEnvQueryTest {
	UEnvQueryContext* VolumeContext; // 0x1f8
	AVolume* VolumeClass; // 0x200
	char bDoComplexVolumeTest : 1; // 0x208
};

struct UDatasmithDeltaGenSceneImportData : UDatasmithFBXSceneImportData {
	bool bMergeNodes; // 0x48
	bool bOptimizeDuplicatedNodes; // 0x49
	bool bRemoveInvisibleNodes; // 0x4a
	bool bSimplifyNodeHierarchy; // 0x4b
	bool bImportVar; // 0x4c
	FString VarPath; // 0x50
	bool bImportPos; // 0x60
	FString PosPath; // 0x68
	bool bImportTml; // 0x78
	FString TmlPath; // 0x80
};

struct UTransformProxy : UObject {
	bool bRotatePerObject; // 0x70
	bool bSetPivotMode; // 0x71
	FTransform SharedTransform; // 0x90
	FTransform InitialSharedTransform; // 0xc0
};

struct UAnimNotify_PlayMontageNotify : UAnimNotify {
	FName NotifyName; // 0x38
};

struct UTestMovieSceneTrack : UMovieSceneTrack {
	bool bHighPassFilter; // 0x58
	TArray<UMovieSceneSection*> SectionArray; // 0x60
};

struct UEnvQueryGenerator_ProjectedPoints : UEnvQueryGenerator {
	FEnvTraceData ProjectionData; // 0x50
};

struct UKSBTTask_RandomizeWayPointDefensePoint : UBTTaskNode {
	FBlackboardKeySelector WayPoint; // 0x70
	FBlackboardKeySelector DefensePoint; // 0x98
};

struct AKSProjectile_Pierce : AKSProjectile {
	float ProjectileEdgeTolerance; // 0x950
	ETraceTypeQuery TraceChannel; // 0x954
	TArray<EObjectTypeQuery> ObjectTypes; // 0x958
	bool bDrawDebugLine; // 0x968
	TArray<AActor*> AlreadyHitActors; // 0x970
	bool bHasHitWall; // 0x980
	bool bHasHitEnemy; // 0x981
};

struct UNiagaraPreviewAxis_InterpParamFloat : UNiagaraPreviewAxis_InterpParamBase {
	float Min; // 0x38
	float Max; // 0x3c
};

struct UMaterialExpressionPerInstanceCustomData : UMaterialExpression {
	FExpressionInput DefaultValue; // 0x40
	float ConstDefaultValue; // 0x54
	uint32_t DataIndex; // 0x58
};

struct UBrainComponent : UActorComponent {
	UBlackboardComponent* BlackboardComp; // 0xb8
	AAIController* AIOwner; // 0xc0
};

struct UKSPlayerMod_Activated : UKSPlayerMod {
	bool bIsCharacterAbility; // 0x330
	int32_t RequiredCharge; // 0x334
	int32_t MaximumCharge; // 0x338
	int32_t DefaultCharge; // 0x33c
	bool bRemoveIfExhausted; // 0x340
	float RefundFactor; // 0x344
	bool bHasLockout; // 0x348
	float LockoutTime; // 0x34c
	bool bCanActivateBeforeRoundStart; // 0x350
	bool bIgnoreNoFireZone; // 0x351
	bool bIgnoreWeaponFireCheck; // 0x352
	bool bEndOnDown; // 0x353
	bool bEndOnDeath; // 0x354
	TArray<TSoftObjectPtr<UKSPlayerMod>> BuffsGivenOnActivation; // 0x358
	bool bKeepsTeamAliveIfUsable; // 0x368
	bool bKeepsTeamAliveIfActive; // 0x369
	float AbilitySetupDuration; // 0x36c
	bool bSetupLagCompensation; // 0x370
	float AbilityDuration; // 0x374
	float MaximumBonusDuration; // 0x378
	bool bCapBonusDuration; // 0x37c
	float AbilityEndWarningTime; // 0x380
	float AbilityRecoveryDuration; // 0x384
	bool bSelectableNormally; // 0x388
	bool bSelectableWhileDowned; // 0x389
	float ChargePerSecond; // 0x38c
	float ChargePerHundredPoints; // 0x390
	UCameraShake* CameraShake; // 0x398
	FText ActivateWhileDownedPromptText; // 0x3a0
};

struct UInterpTrackEvent : UInterpTrack {
	TArray<FEventTrackKey> EventTrack; // 0x70
	char bFireEventsWhenForwards : 1; // 0x80
	char bFireEventsWhenBackwards : 1; // 0x80
	char bFireEventsWhenJumpingForwards : 1; // 0x80
	char bUseCustomEventName : 1; // 0x80
};

struct UParticleModuleOrbitBase : UParticleModule {
	char bUseEmitterTime : 1; // 0x30
};

struct UProceduralMeshComponent : UMeshComponent {
	bool bUseComplexAsSimpleCollision; // 0x460
	bool bUseAsyncCooking; // 0x461
	UBodySetup* ProcMeshBodySetup; // 0x468
	TArray<FProcMeshSection> ProcMeshSections; // 0x470
	TArray<FKConvexElem> CollisionConvexElems; // 0x480
	FBoxSphereBounds LocalBounds; // 0x490
	TArray<UBodySetup*> AsyncBodySetupQueue; // 0x4b0
};

struct UWBP_ButtonSlot_Cosmetic_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* hoverNoZoom; // 0x528
	UWidgetAnimation* OnSelect; // 0x530
	UWidgetAnimation* HueShiftRed; // 0x538
	UWidgetAnimation* OnHover; // 0x540
	UImage* ActiveFrame; // 0x548
	UImage* ActiveFrame_Locked; // 0x550
	UBorder* BaseColorWrapper; // 0x558
	UImage* BaseStroke; // 0x560
	UNamedSlot* ButtonContent; // 0x568
	UImage* ClickFill; // 0x570
	UImage* EquippedFrame; // 0x578
	UImage* GradientFill; // 0x580
	UImage* GradientFillLight; // 0x588
	UBorder* HighlightColorWrapper; // 0x590
	UImage* highlightstroke; // 0x598
	UButton* HitTarget; // 0x5a0
	UImage* Image_115; // 0x5a8
	UImage* LockedDimmer; // 0x5b0
	UImage* LockIcon; // 0x5b8
	UBorder* MythicFrame_ColorWrapper; // 0x5c0
	UImage* SelectedFrame; // 0x5c8
	UWidgetSwitcher* SelectedFrameSwitcher; // 0x5d0
	FMulticastInlineDelegate OnBtnClicked; // 0x5d8
	FMulticastInlineDelegate OnBtnHovered; // 0x5e8
	FMulticastInlineDelegate OnBtnUnhovered; // 0x5f8
	bool bIsDisable; // 0x608
	bool bIsActive; // 0x609
	FLinearColor TintColor; // 0x60c
	bool bColorOverride; // 0x61c
	UAkAudioEvent* ClickBtnSlotCosmeticSFX; // 0x620
	UAkAudioEvent* HoverBtnSlotCosmeticSFX; // 0x628
};

struct UWrapBoxSlot : UPanelSlot {
	FMargin Padding; // 0x38
	bool bFillEmptySpace; // 0x48
	float FillSpanWhenLessThan; // 0x4c
	EHorizontalAlignment HorizontalAlignment; // 0x50
	EVerticalAlignment VerticalAlignment; // 0x51
};

struct UMaterialExpressionSine : UMaterialExpression {
	FExpressionInput Input; // 0x40
	float Period; // 0x54
};

struct UMaterialExpressionArccosineFast : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UAISense_Prediction : UAISense {
	TArray<FAIPredictionEvent> RegisteredEvents; // 0x80
};

struct USpacer : UWidget {
	FVector2D Size; // 0x110
};

struct UDatasmithCineCameraComponentTemplate : UDatasmithObjectTemplate {
	FDatasmithCameraFilmbackSettingsTemplate FilmbackSettings; // 0x30
	FDatasmithCameraLensSettingsTemplate LensSettings; // 0x38
	FDatasmithCameraFocusSettingsTemplate FocusSettings; // 0x3c
	float CurrentFocalLength; // 0x44
	float CurrentAperture; // 0x48
	FDatasmithPostProcessSettingsTemplate PostProcessSettings; // 0x50
};

struct UAISystemBase : UObject {
	FSoftClassPath AISystemClassName; // 0x28
	FName AISystemModuleName; // 0x40
	bool bInstantiateAISystemOnClient; // 0x50
};

struct UInputRouter : UObject {
	bool bAutoInvalidateOnHover; // 0x28
	bool bAutoInvalidateOnCapture; // 0x29
	UInputBehaviorSet* ActiveInputBehaviors; // 0x38
};

struct UGizmoAxisScaleParameterSource : UGizmoBaseFloatParameterSource {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x48
	TScriptInterface<IGizmoTransformSource> TransformSource; // 0x58
	float ScaleMultiplier; // 0x68
	float Parameter; // 0x6c
	FGizmoFloatParameterChange LastChange; // 0x70
	FVector CurScaleAxis; // 0x78
	FVector CurScaleOrigin; // 0x84
	FTransform InitialTransform; // 0x90
};

struct UWBP_SettingsPreview_ReticleSize_C : UKSSettingsPreview {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UImage* Image_42; // 0x540
	UImage* Image_305; // 0x548
	URifleReticle_C* RifleReticle; // 0x550
	UKSSettingsDataFactory* SettingsDataFactory; // 0x558
};

struct UScrollBar : UWidget {
	FScrollBarStyle WidgetStyle; // 0x110
	USlateWidgetStyleAsset* Style; // 0x5e0
	bool bAlwaysShowScrollbar; // 0x5e8
	bool bAlwaysShowScrollbarTrack; // 0x5e9
	EOrientation Orientation; // 0x5ea
	FVector2D Thickness; // 0x5ec
	FMargin Padding; // 0x5f4
};

struct USourceEffectSimpleDelayPreset : USoundEffectSourcePreset {
	FSourceEffectSimpleDelaySettings Settings; // 0x80
};

struct UWBP_ProgressionTally_C : UKSProgressionTallyWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x690
	UWBP_ProgressionTally_Entry_C* BackfillBonus_Horizontal; // 0x698
	UWBP_ProgressionTally_Entry_C* BackfillBonus_Vertical; // 0x6a0
	UWBP_ProgressionTally_Entry_C* EventBonus_Horizontal; // 0x6a8
	UWBP_ProgressionTally_Entry_C* EventBonus_Vertical; // 0x6b0
	UWidgetSwitcher* LayoutSwitcher; // 0x6b8
	UWBP_ProgressionTally_Entry_C* MiscBonus_Horizontal; // 0x6c0
	UWBP_ProgressionTally_Entry_C* MiscBonus_Vertical; // 0x6c8
	UHorizontalBox* TallyContainer_Horizontal; // 0x6d0
	UVerticalBox* TallyContainer_Vertical; // 0x6d8
	UWBP_ProgressionTally_Entry_C* WinBonus_Horizontal; // 0x6e0
	UWBP_ProgressionTally_Entry_C* WinBonus_Vertical; // 0x6e8
	bool UseHorizontalLayout; // 0x6f0
};

struct UPawnAction_Move : UPawnAction {
	AActor* GoalActor; // 0x98
	FVector GoalLocation; // 0xa0
	float AcceptableRadius; // 0xac
	UNavigationQueryFilter* FilterClass; // 0xb0
	char bAllowStrafe : 1; // 0xb8
	char bFinishOnOverlap : 1; // 0xb8
	char bUsePathfinding : 1; // 0xb8
	char bAllowPartialPath : 1; // 0xb8
	char bProjectGoalToNavigation : 1; // 0xb8
	char bUpdatePathToGoal : 1; // 0xb8
	char bAbortChildActionOnPathChange : 1; // 0xb8
};

struct UWBP_CompareFoundersEditions_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnShow; // 0x528
	UWBP_StandardButton_02_C* ConfirmButton; // 0x530
	UImage* Image; // 0x538
	UImage* Image_2; // 0x540
	UImage* Image_3; // 0x548
	UImage* Image_4; // 0x550
	UImage* Image_156; // 0x558
	UImage* Image_525; // 0x560
	UImage* Image_947; // 0x568
	UImage* Image_1104; // 0x570
	UWBP_ModalPopupContainer_C* PopupContainer; // 0x578
	UImage* RBIcon_2; // 0x580
};

struct UWBP_RadialMenuEntry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* BigItemNameText; // 0x240
	UImage* DisabledIcon; // 0x248
	UWidgetSwitcher* DisplayTypeSwitcher; // 0x250
	UOverlay* HoverOverlay; // 0x258
	UTextBlock* ItemNameText; // 0x260
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x268
};

struct UNavLinkComponent : UPrimitiveComponent {
	TArray<FNavigationLink> Links; // 0x438
};

struct UInAppPurchaseCallbackProxy : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct UNiagaraPreviewAxis_InterpParamLinearColor : UNiagaraPreviewAxis_InterpParamBase {
	FLinearColor Min; // 0x38
	FLinearColor Max; // 0x48
};

struct UKSActivityRewardCondition_Affiliation : UKSActivityRewardCondition {
	FKSAffiliationFilter AffiliationFilter; // 0x30
};

struct UStreamingSettings : UDeveloperSettings {
	char AsyncLoadingThreadEnabled : 1; // 0x38
	char WarnIfTimeLimitExceeded : 1; // 0x38
	float TimeLimitExceededMultiplier; // 0x3c
	float TimeLimitExceededMinTime; // 0x40
	int32_t MinBulkDataSizeForAsyncLoading; // 0x44
	char UseBackgroundLevelStreaming : 1; // 0x48
	char AsyncLoadingUseFullTimeLimit : 1; // 0x48
	float AsyncLoadingTimeLimit; // 0x4c
	float PriorityAsyncLoadingExtraTime; // 0x50
	float LevelStreamingActorsUpdateTimeLimit; // 0x54
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x58
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x5c
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x60
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x64
	char FlushStreamingOnExit : 1; // 0x68
	char EventDrivenLoaderEnabled : 1; // 0x68
};

struct UWBP_StandardButtonLarge_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnClick; // 0x528
	UWidgetAnimation* Highlight; // 0x530
	UImage* BtnBkg; // 0x538
	UImage* BtnBkgHover; // 0x540
	UImage* BtnBkgRedButton; // 0x548
	UImage* BtnClickImage; // 0x550
	UImage* BtnEdge; // 0x558
	UImage* BtnEdgeHover; // 0x560
	UImage* BtnFrame; // 0x568
	UImage* BtnFrameHover; // 0x570
	UOverlay* BtnStandardWrapper; // 0x578
	UTextBlock* ButtonText; // 0x580
	UButton* HitTarget; // 0x588
	UOverlay* HoverWrapper; // 0x590
	UWBP_KeyCallout_C* KeyPrompt; // 0x598
	UCanvasPanel* KeyPromptContainer; // 0x5a0
	UNamedSlot* NamedSlot_66; // 0x5a8
	USizeBox* SizeWrapper; // 0x5b0
	FMulticastInlineDelegate OnClicked; // 0x5b8
	FMulticastInlineDelegate OnHovered; // 0x5c8
	FMulticastInlineDelegate OnUnhovered; // 0x5d8
	UAkAudioEvent* ClickLrgBtnSFX; // 0x5e8
	FText DefaultButtonText; // 0x5f0
	float DefaultWidth; // 0x608
	bool ShowPromptOnFocus; // 0x60c
	FKey PromptKey; // 0x610
	bool IsRedButton; // 0x628
	bool IsConfirm; // 0x629
	bool IsCancel; // 0x62a
	float DefaultHeight; // 0x62c
	UAkAudioEvent* HoverLrgBtnSFX; // 0x630
	E_ButtonFontStyle EFontStyle; // 0x638
	bool IsDisabled; // 0x639
};

struct UKSAISense_Player : UAISense {
	TArray<FKSAIPlayerStimulusEvent> RegisteredEvents; // 0x80
};

struct USettingsInfo_Language_C : UKSSettingsInfoBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x108
	UDataTable* CultureFriendlyNames; // 0x110
};

struct UWBP_TextChat_ChatEntry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* FadeOut; // 0x240
	UWidgetAnimation* Show; // 0x248
	UButton* NameButton; // 0x250
	UTextBlock* NameText; // 0x258
	UCanvasPanel* Panel; // 0x260
	UTextBlock* Text; // 0x268
	FPUMG_ChatData ChatDataCopy; // 0x270
	bool IsWindowCollapsed; // 0x2b0
	bool IsInitialShowFinished; // 0x2b1
	float ChatMessageDisplayDuration; // 0x2b4
};

struct UParticleSystemPoolComponentBase : UBasePoolComponent {
	UParticleSystemComponent* PooledParticleSystemComponentClass; // 0xd8
	TArray<UParticleSystemComponent*> UnusedComponentsArray; // 0xe0
	TSet<UParticleSystemComponent*> UsedComponentsSet; // 0xf0
	UParticleSystemComponent* PeekedParticleSystemComponent; // 0x140
	bool bClearTemplateWhenReturnedToPool; // 0x148
};

struct UKSAvatar : UKSItem {
	TSoftObjectPtr<UTexture2D> LargeAvatarIcon; // 0x250
	UIconInfo* LargeAvatarIconInfo; // 0x278
};

struct USkinnedAnimInstance : UAnimInstance {
	UMultiSkinObject* SkinObject; // 0x2b8
};

struct UKSBTD_CheckUniqueAbilityType : UBTDecorator {
	UDataTable* AbilityValidatorTable; // 0x68
	EAbilityExecutionType AbilityExecutionType; // 0x70
};

struct UKSBTD_InteractableState : UBTDecorator_BlackboardBase {
	FKSInteractableStateFilter InteractableStateFilter; // 0x90
};

struct UKSActivityRewardCondition_TimeSinceFireStarted : UKSActivityRewardCondition {
	float MinSecondsSinceFireStarted; // 0x30
	float MaxSecondsSinceFireStarted; // 0x34
};

struct UKSQuickPlay : UKSWidget {
	FMulticastInlineDelegate OnSelectedQueueChanged; // 0x520
	bool CanCurrentlyJoinQueue; // 0x530
	bool CanControlQueue; // 0x531
	int32_t DefaultSelectedQueueId; // 0x534
	int32_t ChunksInstallingQueueId; // 0x538
	bool ReadyForQueueing; // 0x550
};

struct UWBP_CustomKickButton_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* Hovered; // 0x240
	UButton* KickButton; // 0x248
	FMulticastInlineDelegate OnClicked; // 0x250
};

struct UParticleModuleRequired : UParticleModule {
	UMaterialInterface* Material; // 0x30
	float MinFacingCameraBlendDistance; // 0x38
	float MaxFacingCameraBlendDistance; // 0x3c
	FVector EmitterOrigin; // 0x40
	FRotator EmitterRotation; // 0x4c
	EParticleScreenAlignment ScreenAlignment; // 0x58
	char bUseLocalSpace : 1; // 0x59
	char bKillOnDeactivate : 1; // 0x59
	char bKillOnCompleted : 1; // 0x59
	EParticleSortMode SortMode; // 0x5a
	char bUseLegacyEmitterTime : 1; // 0x5b
	char bRemoveHMDRoll : 1; // 0x5b
	char bEmitterDurationUseRange : 1; // 0x5b
	float EmitterDuration; // 0x5c
	FRawDistributionFloat SpawnRate; // 0x60
	TArray<FParticleBurst> BurstList; // 0x90
	float EmitterDelay; // 0xa0
	float EmitterDelayLow; // 0xa4
	char bDelayFirstLoopOnly : 1; // 0xa8
	EParticleSubUVInterpMethod InterpolationMethod; // 0xa9
	char bScaleUV : 1; // 0xaa
	char bEmitterDelayUseRange : 1; // 0xaa
	EParticleBurstMethod ParticleBurstMethod; // 0xab
	char bOverrideSystemMacroUV : 1; // 0xac
	char bUseMaxDrawCount : 1; // 0xac
	EOpacitySourceMode OpacitySourceMode; // 0xad
	EEmitterNormalsMode EmitterNormalsMode; // 0xae
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0xaf
	int32_t SubImages_Horizontal; // 0xb0
	int32_t SubImages_Vertical; // 0xb4
	float RandomImageTime; // 0xb8
	int32_t RandomImageChanges; // 0xbc
	FVector MacroUVPosition; // 0xc0
	float MacroUVRadius; // 0xcc
	EParticleUVFlipMode UVFlippingMode; // 0xd0
	ESubUVBoundingVertexCount BoundingMode; // 0xd1
	char bDurationRecalcEachLoop : 1; // 0xd2
	FVector NormalsSphereCenter; // 0xd4
	float AlphaThreshold; // 0xe0
	int32_t EmitterLoops; // 0xe4
	UTexture2D* CutoutTexture; // 0xe8
	int32_t MaxDrawCount; // 0xf0
	float EmitterDurationLow; // 0xf4
	FVector NormalsCylinderDirection; // 0xf8
	TArray<FName> NamedMaterialOverrides; // 0x108
};

struct UWidgetBlueprintGeneratedClass : UBlueprintGeneratedClass {
	UWidgetTree* WidgetTree; // 0x328
	char bAllowTemplate : 1; // 0x330
	char bAllowDynamicCreation : 1; // 0x330
	char bValidTemplate : 1; // 0x330
	char bTemplateInitialized : 1; // 0x330
	char bCookedTemplate : 1; // 0x330
	char bClassRequiresNativeTick : 1; // 0x330
	TArray<FDelegateRuntimeBinding> Bindings; // 0x338
	TArray<UWidgetAnimation*> Animations; // 0x348
	TArray<FName> NamedSlots; // 0x358
	TSoftObjectPtr<UUserWidget> TemplateAsset; // 0x368
	UUserWidget* Template; // 0x390
};

struct UWBP_QuickPlay_C : UKSQuickPlay {
	FPointerToUberGraphFrame UberGraphFrame; // 0x558
	UWidgetAnimation* ShowDetail; // 0x560
	UOverlay* BattleZoneinfo; // 0x568
	UTextBlock* ButtonText; // 0x570
	UWidgetSwitcher* ContentSwitcher; // 0x578
	UWBP_panel_bevel_C* Divider; // 0x580
	UWBP_panel_bevel_C* Divider_2; // 0x588
	UCanvasPanel* EmptyContent; // 0x590
	UNewBackButton_C* EmptyContentBackButton; // 0x598
	UScaleBox* ErrorContainer; // 0x5a0
	UTextBlock* ErrorLabel; // 0x5a8
	UTextBlock* GrandmasterText; // 0x5b0
	UImage* Image; // 0x5b8
	UImage* Image_2; // 0x5c0
	UImage* Image_3; // 0x5c8
	UImage* Image_4; // 0x5d0
	UImage* Image_5; // 0x5d8
	UImage* Image_6; // 0x5e0
	UImage* Image_7; // 0x5e8
	UImage* Image_8; // 0x5f0
	UImage* Image_9; // 0x5f8
	UImage* Image_10; // 0x600
	UImage* Image_11; // 0x608
	UImage* Image_12; // 0x610
	UImage* Image_13; // 0x618
	UImage* Image_14; // 0x620
	UImage* Image_15; // 0x628
	UImage* Image_110; // 0x630
	UImage* Image_142; // 0x638
	UImage* Image_222; // 0x640
	UImage* Image_329; // 0x648
	UImage* Image_392; // 0x650
	UWBP_QuickPlay_QueueTypeHeader_C* MapRotationHeader; // 0x658
	UScrollBox* MapScrollBox; // 0x660
	UWBP_ControllerPrompt_C* MapScrollPrompt; // 0x668
	USizeBox* MapScrollPromptContainer; // 0x670
	UUniformGridPanel* MapThumbnailGrid; // 0x678
	UWBP_Graphic_Button_C* MobileSelectQueueBtn; // 0x680
	UTextBlock* ObjectiveTxt; // 0x688
	UTextBlock* PartyMaxLabel; // 0x690
	UTextBlock* PartyMinLabel; // 0x698
	UTextBlock* PlayerCount; // 0x6a0
	UWidgetSwitcher* QueueDataSwitcher; // 0x6a8
	UTextBlock* QueueDescription; // 0x6b0
	USizeBox* QueueDescWrapper; // 0x6b8
	UWidgetSwitcher* QueueDetailsDisplay; // 0x6c0
	UWidgetSwitcher* QueueDetailSwitcher; // 0x6c8
	UOverlay* QueueDetailWrapper; // 0x6d0
	UTextBlock* QueueName; // 0x6d8
	UScrollBox* QueueScrollBox; // 0x6e0
	UVerticalBox* QueueSectionContainer; // 0x6e8
	UHorizontalBox* QueueSelectContainer; // 0x6f0
	UOverlay* QueueSelectPanel; // 0x6f8
	UOverlay* RankedDetailContainer22; // 0x700
	UWBP_StandardButtonMedium_C* RankedInfoButton; // 0x708
	UWBP_RankedIcon_C* RankedProgressBadge; // 0x710
	UTextBlock* RankedProgressText; // 0x718
	UWidgetSwitcher* RegionSwitcher; // 0x720
	URichTextBlock* RichTextBlock; // 0x728
	URichTextBlock* RichTextBlock_2; // 0x730
	URichTextBlock* RichTextBlock_3; // 0x738
	URichTextBlock* RichTextBlock_4; // 0x740
	URichTextBlock* RichTextBlock_5; // 0x748
	URichTextBlock* RichTextBlock_6; // 0x750
	URichTextBlock* RichTextBlock_7; // 0x758
	URichTextBlock* RichTextBlock_8; // 0x760
	URichTextBlock* RichTextBlock_9; // 0x768
	URichTextBlock* RichTextBlock_10; // 0x770
	UTextBlock* SeasonLabel; // 0x778
	UWBP_panel_bevel_C* WBP_panel_bevel; // 0x780
	UWBP_ProgressEarnedBar_C* WBP_ProgressEarnedBar; // 0x788
	UWBP_QueueSelection_RegionSelectButton_C* WBP_QueueSelection_RegionSelectButton; // 0x790
	UWBP_QuickPlay_MapThumbnail_C* WBP_QuickPlay_MapThumbnail; // 0x798
	UWBP_QuickPlay_QueueTypeSection_C* WBP_QuickPlay_QueueTypeSection; // 0x7a0
	UWBP_QuickPlay_QueueTypeSection_C* WBP_QuickPlay_QueueTypeSection_129; // 0x7a8
	UWBP_RegionSelect_C* WBP_RegionSelect; // 0x7b0
	UWBP_ThrobberHorizontal_C* WBP_ThrobberHorizontal; // 0x7b8
	TArray<UKSWidget*> NavigationButtons; // 0x7c0
	TArray<UWBP_QuickPlay_QueueButton_C*> AllQueueButtons; // 0x7d0
	int32_t MaxColumn; // 0x7e0
	UKSQueueDataFactory* QueueDataFactory; // 0x7e8
	FClientQueueInfo SelectedQueueInfo; // 0x7f0
	UWidget* CurrentScreen; // 0x8c8
	TMap<UWidget*, int32_t> ScreenToWidget; // 0x8d0
	float MapScrollSpeed; // 0x920
	UAkAudioEvent* ShowQuickPlaySFX; // 0x928
	UKSWidget* CustomMatchButton; // 0x930
	bool FoundQueueToFocus; // 0x938
	UWidget* TopQueueButton; // 0x940
};

struct APGame_GameState : AGameState {
	FString r_SonyMatchIdForPlayerFeedback; // 0x290
};

struct UMultiSkinObject : UObject {
	TArray<UMultiSkinObject*> ParentSkinnedObjects; // 0x28
	TArray<TWeakObjectPtr<UMultiSkinObject>> ChildSkinnedObjects; // 0x38
	TSet<FName> SubscribedKeywords; // 0x48
	TSet<FName> SubscribedMaterialPrefixes; // 0x98
	char bSubscribeToAllKeywords : 1; // 0xe8
	char bWantsToBeRecycled : 1; // 0xe8
	FMulticastInlineDelegate OnFinishedAllPendingLoadsDel; // 0x108
	TMap<int32_t, FDynamicSkinTableMapEntry> DynamicSkinTables; // 0x130
	TMap<FName, FCachedRowsEntry> CachedRows; // 0x180
};

struct UGizmoComponentHitTarget : UObject {
	UPrimitiveComponent* Component; // 0x30
};

struct UInterpTrackFloatAnimBPParam : UInterpTrackFloatBase {
	UObject* AnimBlueprintClass; // 0x90
	UAnimInstance* AnimClass; // 0x98
	FName ParamName; // 0xa0
};

struct UImmunityModInst_C : UDamageResistModInst_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x1c0
};

struct UKSNavigationQueryFilter : UNavigationQueryFilter {
	UNavigationQueryFilter* DefaultFilter; // 0x48
	UNavigationQueryFilter* NoJumpFilter; // 0x50
	UNavigationQueryFilter* NoZiplineFilter; // 0x58
	UNavigationQueryFilter* NoJumpNoZiplineFilter; // 0x60
	uint32_t MaxSearchNodes; // 0x68
};

struct UWBP_Social_Search_bar_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* background; // 0x530
	UImage* bottomborder; // 0x538
	UKSEditableTextBox* InputText; // 0x540
	UImage* leftborder; // 0x548
	UImage* RightBorder; // 0x550
	UWBP_StandardButtonInner_C* SubmitButton; // 0x558
	UImage* topborder; // 0x560
	FMulticastInlineDelegate OnSearchTermChange; // 0x568
	bool TextIsDirty; // 0x578
	FMulticastInlineDelegate OnHovered; // 0x580
	FMulticastInlineDelegate OnUnhovered; // 0x590
};

struct AKSFlightPoint : ATargetPoint {
	USplineComponent* SplineComponent; // 0x220
	ESplinePointType SplinePointType; // 0x228
	bool bIsEndPoint; // 0x229
};

struct UAREnvironmentCaptureProbe : UARTrackedGeometry {
	UAREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture; // 0xf8
};

struct ULoginEula_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* MobileLayout; // 0x528
	UWBP_StandardButtonLarge_C* AcceptNew; // 0x530
	UImage* ArrowDown; // 0x538
	UImage* ArrowUp; // 0x540
	UWBP_StandardButtonLarge_C* BackNew; // 0x548
	UImage* bkg; // 0x550
	UCheckbox_C* CheckBox; // 0x558
	UImage* Divider; // 0x560
	UScrollBox* EulaContainer; // 0x568
	UTextBlock* EulaText_Mobile; // 0x570
	UTextBlock* EulaText_PC; // 0x578
	UImage* Image_190; // 0x580
	UInvalidationBox* InvalidationBox_Mobile; // 0x588
	UInvalidationBox* InvalidationBox_PC; // 0x590
	UWidgetSwitcher* NextSwitcher; // 0x598
	UPUMG_UnsafeZone* PUMG_UnsafeZone_1; // 0x5a0
	UImage* ScrollCalloutDown; // 0x5a8
	UWidgetSwitcher* ScrollCalloutSwitcher; // 0x5b0
	UImage* ScrollCalloutUp; // 0x5b8
	UImage* StudioLogo; // 0x5c0
	UImage* TitleLogo; // 0x5c8
	UVerticalBox* VerticalBox_1; // 0x5d0
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x5d8
	FTimerHandle CalloutTimer; // 0x5e0
};

struct UKSLoginRewardsModal : UKSWidget {
	FMulticastInlineDelegate OnLoginRewardsReady; // 0x520
	TArray<FLoginRewardItem> LoginRewardItems; // 0x530
	int32_t nDefaultItemsPerRow; // 0x540
};

struct UOutlineContainer_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* BG; // 0x528
	UNamedSlot* ContentSlot; // 0x530
	UButton* HitTarget; // 0x538
	UImage* Hover; // 0x540
	UImage* Outline; // 0x548
	UObject* OutlineTexture; // 0x550
	FMargin OutlineMargin; // 0x558
	FMulticastInlineDelegate Gamepad Confirm; // 0x568
	UAkAudioEvent* ClickOutlineContainerSFX; // 0x578
	UAkAudioEvent* HoverOutlineContainerSFX; // 0x580
};

struct UNiagaraDataInterfaceVector2DCurve : UNiagaraDataInterfaceCurveBase {
	FRichCurve XCurve; // 0x58
	FRichCurve YCurve; // 0xd8
};

struct USCS_Node : UObject {
	UObject* ComponentClass; // 0x28
	UActorComponent* ComponentTemplate; // 0x30
	FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x38
	FName AttachToName; // 0x80
	FName ParentComponentOrVariableName; // 0x88
	FName ParentComponentOwnerClassName; // 0x90
	bool bIsParentComponentNative; // 0x98
	TArray<USCS_Node*> ChildNodes; // 0xa0
	TArray<FBPVariableMetaDataEntry> MetaDataArray; // 0xb0
	FGuid VariableGuid; // 0xc0
	FName InternalVariableName; // 0xd0
};

struct UDestroySessionCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct ASphereReflectionCapture : AReflectionCapture {
	UDrawSphereComponent* DrawCaptureRadius; // 0x228
};

struct UWBP_ShearedButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	USizeBox* BeginSizedPadding_SizeWrapper; // 0x528
	UImage* ButtonBorderImage; // 0x530
	UImage* ButtonIcon; // 0x538
	UOverlay* ButtonTopLayer; // 0x540
	USizeBox* EndSizedPadding_SizeWrapper; // 0x548
	UWidgetSwitcher* HeaderSwitcher; // 0x550
	UButton* HitTarget; // 0x558
	UOverlay* HitTarget_Overlay; // 0x560
	USizeBox* HitTargetSizeWrapper; // 0x568
	UOverlay* IconOverlay; // 0x570
	USizeBox* IconSizeWrapper; // 0x578
	UImage* PrimaryBorderBottomBegin_Image; // 0x580
	UImage* PrimaryBorderBottomEnd_Image; // 0x588
	UImage* PrimaryButtonImage; // 0x590
	UImage* PrimaryTriangleBegin_Image; // 0x598
	USizeBox* PrimaryTriangleBegin_SizeWrapper; // 0x5a0
	UImage* PrimaryTriangleEnd_Image; // 0x5a8
	USizeBox* PrimaryTriangleEnd_SizeWrapper; // 0x5b0
	UOverlay* Shadow_Overlay; // 0x5b8
	UImage* ShadowImage; // 0x5c0
	USizeBox* ShadowSizeWrapper; // 0x5c8
	UImage* ShadowTriangleBegin_Image; // 0x5d0
	USizeBox* ShadowTriangleBegin_SizeWrapper; // 0x5d8
	UImage* ShadowTriangleEnd_Image; // 0x5e0
	USizeBox* ShadowTriangleEnd_SizeWrapper; // 0x5e8
	USizeBox* SizeWrapper; // 0x5f0
	UTextBlock* TitleText; // 0x5f8
	UOverlay* TitleText_Overlay; // 0x600
	USizeBox* TitleTextSizeWrapper; // 0x608
	bool ShowDropShadow; // 0x610
	bool ShowOnlyLowerDropShadow; // 0x611
	bool bDisableReleaseAnim; // 0x612
	bool ShowIcon; // 0x613
	FLinearColor Idle_PrimaryColor; // 0x614
	FLinearColor Idle_SecondaryColor; // 0x624
	FText Title; // 0x638
	FLinearColor DropshadowColor; // 0x650
	float Width; // 0x660
	float ShadowOffset; // 0x664
	float Height; // 0x668
	FMulticastInlineDelegate OnClicked; // 0x670
	FMulticastInlineDelegate OnHovered; // 0x680
	FMulticastInlineDelegate OnUnhovered; // 0x690
	bool IsActive; // 0x6a0
	bool IsDisabled; // 0x6a1
	float HoverAnimationDurationMS; // 0x6a4
	FSlateFontInfo Idle_FontInfo; // 0x6a8
	FSlateFontInfo Hover_FontInfo; // 0x6f8
	FSlateFontInfo Active_FontInfo; // 0x748
	FLinearColor Hover_PrimaryColor; // 0x798
	FLinearColor Active_PrimaryColor; // 0x7a8
	FLinearColor Hover_SecondaryColor; // 0x7b8
	FLinearColor Active_SecondaryColor; // 0x7c8
	bool IsCurrentlyHovered; // 0x7d8
	FLinearColor Disabled_PrimaryColor; // 0x7dc
	FLinearColor Disabled_SecondaryColor; // 0x7ec
	FSlateFontInfo Disabled_FontInfo; // 0x800
	UTexture2D* IconTexture; // 0x850
	UKSButtonSoundLibrary* ButtonSound; // 0x858
};

struct UWBP_StoreItemRotator_C : UKSWidget {
	UTextBlock* ActiveTick; // 0x520
	UProgressBar* Progress; // 0x528
	UHorizontalBox* RotatorTickBox; // 0x530
	UWBP_StoreRotatorTick_C* TickExample1; // 0x538
	UWBP_StoreRotatorTick_C* TickExample2; // 0x540
	TArray<UWBP_StoreRotatorTick_C*> RotatorObjects; // 0x548
	int32_t NumTicks; // 0x558
};

struct UStreamableRenderAsset : UObject {
	double ForceMipLevelsToBeResidentTimestamp; // 0x28
	int32_t NumCinematicMipLevels; // 0x30
	int32_t StreamingIndex; // 0x34
	int32_t CachedCombinedLODBias; // 0x38
	char CachedNumResidentLODs; // 0x3c
	char bCachedReadyForStreaming : 1; // 0x3d
	char NeverStream : 1; // 0x3d
	char bGlobalForceMipLevelsToBeResident : 1; // 0x3d
	char bIsStreamable : 1; // 0x3d
	char bHasStreamingUpdatePending : 1; // 0x3d
	char bForceMiplevelsToBeResident : 1; // 0x3d
	char bIgnoreStreamingMipBias : 1; // 0x3d
	char bUseCinematicMipLevels : 1; // 0x3d
};

struct UAnimClassData : UObject {
	TArray<FBakedAnimationStateMachine> BakedStateMachines; // 0x30
	USkeleton* TargetSkeleton; // 0x40
	TArray<FAnimNotifyEvent> AnimNotifies; // 0x48
	TMap<FName, FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x58
	TArray<FAnimBlueprintFunction> AnimBlueprintFunctions; // 0xa8
	TArray<FAnimBlueprintFunctionData> AnimBlueprintFunctionData; // 0xb8
	TArray<TFieldPath<FStructProperty>> AnimNodeProperties; // 0xc8
	TArray<TFieldPath<FStructProperty>> LinkedAnimGraphNodeProperties; // 0xe8
	TArray<TFieldPath<FStructProperty>> LinkedAnimLayerNodeProperties; // 0x108
	TArray<TFieldPath<FStructProperty>> PreUpdateNodeProperties; // 0x128
	TArray<TFieldPath<FStructProperty>> DynamicResetNodeProperties; // 0x148
	TArray<TFieldPath<FStructProperty>> StateMachineNodeProperties; // 0x168
	TArray<TFieldPath<FStructProperty>> InitializationNodeProperties; // 0x188
	TMap<FName, FGraphAssetPlayerInformation> GraphNameAssetPlayers; // 0x1a8
	TArray<FName> SyncGroupNames; // 0x1f8
	TArray<FExposedValueHandler> EvaluateGraphExposedInputs; // 0x208
	TMap<FName, FAnimGraphBlendOptions> GraphBlendOptions; // 0x218
};

struct ADatasmithAreaLightActor : AActor {
	EDatasmithAreaLightActorType LightType; // 0x220
	EDatasmithAreaLightActorShape LightShape; // 0x221
	FVector2D Dimensions; // 0x224
	float Intensity; // 0x22c
	ELightUnits IntensityUnits; // 0x230
	FLinearColor Color; // 0x234
	float Temperature; // 0x244
	UTextureLightProfile* IESTexture; // 0x248
	bool bUseIESBrightness; // 0x250
	float IESBrightnessScale; // 0x254
	FRotator Rotation; // 0x258
	float SourceRadius; // 0x264
	float SourceLength; // 0x268
	float AttenuationRadius; // 0x26c
	float SpotlightInnerAngle; // 0x270
	float SpotlightOuterAngle; // 0x274
};

struct UMaterialExpressionFontSample : UMaterialExpression {
	UFont* Font; // 0x40
	int32_t FontTexturePage; // 0x48
};

struct UInAppPurchaseRestoreCallbackProxy2 : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct UBlueprint : UBlueprintCore {
	UObject* ParentClass; // 0x50
	EBlueprintType BlueprintType; // 0x58
	char bRecompileOnLoad : 1; // 0x59
	char bHasBeenRegenerated : 1; // 0x59
	char bIsRegeneratingOnLoad : 1; // 0x59
	int32_t BlueprintSystemVersion; // 0x5c
	USimpleConstructionScript* SimpleConstructionScript; // 0x60
	TArray<UActorComponent*> ComponentTemplates; // 0x68
	TArray<UTimelineTemplate*> Timelines; // 0x78
	TArray<FBPComponentClassOverride> ComponentClassOverrides; // 0x88
	UInheritableComponentHandler* InheritableComponentHandler; // 0x98
};

struct UWorldComposition : UObject {
	TArray<ULevelStreaming*> TilesStreaming; // 0x48
	double TilesStreamingTimeThreshold; // 0x58
	bool bLoadAllTilesDuringCinematic; // 0x60
	bool bRebaseOriginIn3DSpace; // 0x61
	float RebaseOriginDistance; // 0x64
};

struct UAISubsystem : UObject {
	UAISystem* AISystem; // 0x30
};

struct UKSPlayerStimulusComponentBase : UActorComponent {
	FMulticastInlineDelegate OnStartStimulatingPlayer; // 0xb0
	FMulticastInlineDelegate OnStopStimulatingPlayer; // 0xc0
	EKSStimulateTarget StimulateTarget; // 0xd0
	bool bRegisterOnBeginPlay; // 0xd1
};

struct UParticleModuleVectorFieldRotationRate : UParticleModuleVectorFieldBase {
	FVector RotationRate; // 0x30
};

struct UEnvQueryGenerator_CurrentLocation : UEnvQueryGenerator {
	UEnvQueryContext* QueryContext; // 0x50
};

struct UTimelineComponent : UActorComponent {
	FTimeline TheTimeline; // 0xb0
	char bIgnoreTimeDilation : 1; // 0x148
};

struct UWBP_CustomGameLobby_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_CustomGameActionLog_C* ActionLog; // 0x528
	UButton* Blocker; // 0x530
	UWBP_PlayerContextMenu_C* ContextMenu; // 0x538
	UWBP_Subtitle_C* GameName; // 0x540
	UImage* Image; // 0x548
	UImage* Image_2; // 0x550
	UImage* Image_112; // 0x558
	UImage* Image_379; // 0x560
	UImage* Image_498; // 0x568
	UWBP_StandardButtonLarge_C* JoiningButton; // 0x570
	UWBP_ThrobberHorizontal_C* Loading; // 0x578
	USizeBox* LoadingState; // 0x580
	UVerticalBox* LoadingWrapper; // 0x588
	UHorizontalBox* LobbyState; // 0x590
	UWidgetSwitcher* LobbySwitcher; // 0x598
	UWBP_StandardButtonLarge_C* SpectateButton; // 0x5a0
	UVerticalBox* Spectator; // 0x5a8
	UVerticalBox* SpectatorContainer; // 0x5b0
	UWBP_StandardButtonLarge_C* StartButton; // 0x5b8
	UWidgetSwitcher* StartGameSwitcher; // 0x5c0
	UVerticalBox* TeamA; // 0x5c8
	UVerticalBox* TeamB; // 0x5d0
	UWBP_Header1_C* Title; // 0x5d8
	UWBP_VoiceActivityContainer_C* VoiceActivity; // 0x5e0
	UImage* WarningIcon; // 0x5e8
	UTextBlock* WarningMessage; // 0x5f0
	UHorizontalBox* WarningWrapper; // 0x5f8
	UWBP_GameModeInfoPanel_Lobby_C* WBP_GameModeInfoPanel_Lobby; // 0x600
	TMap<int32_t, FFBP_CustomMatchTeam> TeamDataMap; // 0x608
	FTimerHandle DataChangeTimer; // 0x658
	FText FmtAdded; // 0x660
	FText FmtRemoved; // 0x678
	FText FmtPromoted; // 0x690
	FText FmtDemoted; // 0x6a8
	FText FmtInvited; // 0x6c0
	FText FmtMovedTeam; // 0x6d8
	TMap<UKSPlayerInfo*, FFBP_CustomPendingLogEntry> PendingLogs; // 0x6f0
	FText FmtLobbyCreated; // 0x740
	TArray<UPUMG_PlayerInfo*> TEMP_Invites; // 0x758
	FText FmtGameName; // 0x768
	UAkAudioEvent* ShowCustomGameLobbySFX; // 0x780
	int32_t FocusGroup_TeamsAndButtons; // 0x788
	int32_t FocusGroup_ContextMenu; // 0x78c
	bool MembersPopulated; // 0x790
	int32_t MaxSpectators; // 0x794
};

struct UNiagaraSpriteRendererProperties : UNiagaraRendererProperties {
	UMaterialInterface* Material; // 0x50
	FNiagaraUserParameterBinding MaterialUserParamBinding; // 0x58
	ENiagaraSpriteAlignment Alignment; // 0x80
	ENiagaraSpriteFacingMode FacingMode; // 0x81
	FVector2D PivotInUVSpace; // 0x84
	ENiagaraSortMode SortMode; // 0x8c
	FVector2D SubImageSize; // 0x90
	char bSubImageBlend : 1; // 0x98
	char bRemoveHMDRollInVR : 1; // 0x98
	char bSortOnlyWhenTranslucent : 1; // 0x98
	float MinFacingCameraBlendDistance; // 0x9c
	float MaxFacingCameraBlendDistance; // 0xa0
	FNiagaraVariableAttributeBinding PositionBinding; // 0xa8
	FNiagaraVariableAttributeBinding ColorBinding; // 0x120
	FNiagaraVariableAttributeBinding VelocityBinding; // 0x198
	FNiagaraVariableAttributeBinding SpriteRotationBinding; // 0x210
	FNiagaraVariableAttributeBinding SpriteSizeBinding; // 0x288
	FNiagaraVariableAttributeBinding SpriteFacingBinding; // 0x300
	FNiagaraVariableAttributeBinding SpriteAlignmentBinding; // 0x378
	FNiagaraVariableAttributeBinding SubImageIndexBinding; // 0x3f0
	FNiagaraVariableAttributeBinding DynamicMaterialBinding; // 0x468
	FNiagaraVariableAttributeBinding DynamicMaterial1Binding; // 0x4e0
	FNiagaraVariableAttributeBinding DynamicMaterial2Binding; // 0x558
	FNiagaraVariableAttributeBinding DynamicMaterial3Binding; // 0x5d0
	FNiagaraVariableAttributeBinding CameraOffsetBinding; // 0x648
	FNiagaraVariableAttributeBinding UVScaleBinding; // 0x6c0
	FNiagaraVariableAttributeBinding MaterialRandomBinding; // 0x738
	FNiagaraVariableAttributeBinding CustomSortingBinding; // 0x7b0
	FNiagaraVariableAttributeBinding NormalizedAgeBinding; // 0x828
};

struct UDatasmithAreaLightActorTemplate : UDatasmithObjectTemplate {
	EDatasmithAreaLightActorType LightType; // 0x30
	EDatasmithAreaLightActorShape LightShape; // 0x31
	FVector2D Dimensions; // 0x34
	FLinearColor Color; // 0x3c
	float Intensity; // 0x4c
	ELightUnits IntensityUnits; // 0x50
	float Temperature; // 0x54
	TSoftObjectPtr<UTextureLightProfile> IESTexture; // 0x58
	bool bUseIESBrightness; // 0x80
	float IESBrightnessScale; // 0x84
	FRotator Rotation; // 0x88
	float SourceRadius; // 0x94
	float SourceLength; // 0x98
	float AttenuationRadius; // 0x9c
};

struct ULandscapeLayerInfoObject : UObject {
	FName LayerName; // 0x28
	UPhysicalMaterial* PhysMaterial; // 0x30
	float Hardness; // 0x38
	FLinearColor LayerUsageDebugColor; // 0x3c
};

struct UMaterialExpressionQualitySwitch : UMaterialExpression {
	FExpressionInput Default; // 0x40
	FExpressionInput Inputs[0x3]; // 0x54
};

struct UKSApparelAsset_CustomComponent : UKSApparelAsset_SkinDataTables {
	TSoftClassPtr<UObject> CustomComponentClass; // 0x2e0
};

struct UKSLocalPlayer : UPCom_LocalPlayer {
	FMulticastInlineDelegate OnLocalViewedPawnChangedDel; // 0x260
	UKSKillCam* KillCam; // 0x288
	AKSKillCamController* KillCamControllerClass; // 0x290
};

struct UKSPlayerModInst_Omniscience : UKSPlayerModInstance {
	bool bHandleEnemiesOnly; // 0x1b8
};

struct UHitDecalConfig_C : UObject {
	FHitDecalInfo Info; // 0x28
};

struct UMovieSceneEventRepeaterSection : UMovieSceneEventSectionBase {
	FMovieSceneEvent Event; // 0xe0
};

struct UFloatingPawnMovement : UPawnMovementComponent {
	float MaxSpeed; // 0x138
	float Acceleration; // 0x13c
	float Deceleration; // 0x140
	float TurningBoost; // 0x144
	char bPositionCorrected : 1; // 0x148
};

struct UKSPlayerMod_GiveEquipPoints : UKSPlayerMod {
	FGameplayTagContainer EquipPointsToGive; // 0x330
};

struct UWBP_RogueStatsScreen_TabEntry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* ActiveIconOverlay; // 0x530
	UButton* BtnSelect; // 0x538
	UImage* Highlight; // 0x540
	UKSAsyncImage* KSAsyncImage_1; // 0x548
	UImage* Selected; // 0x550
	UWBP_AsyncIcon_C* StatIcon; // 0x558
	UTextBlock* StatName; // 0x560
	UTextBlock* StatValue; // 0x568
	UKSAsyncImage* TopDivider; // 0x570
	FMulticastInlineDelegate onSelected; // 0x578
	bool IsSelected; // 0x588
	UAkAudioEvent* ClickRogueStatsScreenTabEntrySFX; // 0x590
	UAkAudioEvent* HoverRogueStatsScreenTabEntrySFX_1; // 0x598
	UKSStatWrapper* PlayerStat; // 0x5a0
	UKSStatWrapper* PlayerStatObject; // 0x5a8
	UKSStatWrapper* RogueStat; // 0x5b0
};

struct UBlackboardKeyType_Enum : UBlackboardKeyType {
	UEnum* EnumType; // 0x30
	FString EnumName; // 0x38
	char bIsEnumNameValid : 1; // 0x48
};

struct UNiagaraDataInterfaceColorCurve : UNiagaraDataInterfaceCurveBase {
	FRichCurve RedCurve; // 0x58
	FRichCurve GreenCurve; // 0xd8
	FRichCurve BlueCurve; // 0x158
	FRichCurve AlphaCurve; // 0x1d8
};

struct UKSBTTask_GetNavigationInteractTarget : UBTTaskNode {
	FBlackboardKeySelector InteractTarget; // 0x70
};

struct UARTrackedGeometry : UObject {
	FGuid UniqueId; // 0x28
	FTransform LocalToTrackingTransform; // 0x40
	FTransform LocalToAlignedTrackingTransform; // 0x70
	EARTrackingState TrackingState; // 0xa0
	UMRMeshComponent* UnderlyingMesh; // 0xb0
	EARObjectClassification ObjectClassification; // 0xb8
	int32_t LastUpdateFrameNumber; // 0xd0
	FName DebugName; // 0xe0
};

struct UKSTabletAnimInstance : UKSAnimInstance {
	bool bIsClosed; // 0x330
};

struct UPGame_EffectGroup : UObject {
	FGameplayTagContainer m_EffectGroupTypes; // 0x28
	FGameplayTagContainer m_BehaviorCategories; // 0x48
	TArray<UPGame_Effect*> m_Effects; // 0x68
	UPGame_EffectAttachment* m_AttachmentClass; // 0x78
};

struct UPlatformEventsComponent : UActorComponent {
	FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xb0
	FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xc0
};

struct UPartyMember : UObject {
	USocialUser* SocialUser; // 0x68
};

struct UMovieSceneObjectPropertyTrack : UMovieScenePropertyTrack {
	UObject* PropertyClass; // 0x88
};

struct UKSWeaponMasteryManager : UKSActivityManagerBase {
	UDataTable* MiscRewardsTable; // 0x228
};

struct AKSInteractableLootSite : AKSLootSiteBase {
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x350
	FText LootBoxName; // 0x358
	bool bChoosesBeforeInteraction; // 0x370
	bool bPressAndHoldPrompt; // 0x371
	UKSInteractableComponent* InteractableComponent; // 0x378
	bool bLooted; // 0x380
	FLootSiteDropInfo ChosenLoot; // 0x388
	TArray<AKSCharacter*> Looters; // 0x3b8
	TArray<UKSInteractionManager*> LooterManagers; // 0x3c8
	TArray<FLootSiteDropInfo> PossibleLoot; // 0x3d8
};

struct UKSAutoPickupComponent : UActorComponent {
	float AutoPickupMinPickupTimeSinceCreation; // 0xb0
	float AutoPickupDistance; // 0xb4
	float AutoPickupQueryInterval; // 0xb8
	bool bActivateAutoPickups; // 0xbc
	TMap<UKSItem*, int32_t> ItemPriorityMap; // 0xc0
	bool bAutoPickupClusivityEnabled; // 0x110
	FGameplayTagQuery ClusivityQuery; // 0x118
};

struct UWBP_BattlePassUpsellPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UVerticalBox* AdditionalUnlocks; // 0x528
	UTextBlock* AlsoUnlockText; // 0x530
	UTextBlock* IconText; // 0x538
	UImage* Image_613; // 0x540
	UTextBlock* InstantUnlocksText; // 0x548
	UTextBlock* PremiumRewardsText; // 0x550
	UVerticalBox* RogueBucksStack; // 0x558
	UTextBlock* RogueBucksText; // 0x560
	UTextBlock* TitleText; // 0x568
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x570
	UWBP_YellowButton_C* WBP_YellowButton; // 0x578
	FMulticastInlineDelegate OnButtonClicked; // 0x580
};

struct UWBP_CosmeticItem_Title_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ButtonSlot_Cosmetic_C* Button; // 0x528
	UImage* Gradient; // 0x530
	UBorder* RarityElementWrapper; // 0x538
	UImage* ScanLines; // 0x540
	UTextBlock* Title; // 0x548
	UPlatformInventoryItem* PlatformItem; // 0x550
	FMulticastInlineDelegate OnItemHovered; // 0x558
	FMulticastInlineDelegate OnItemUnhovered; // 0x568
	FMulticastInlineDelegate OnItemClicked; // 0x578
	UAkAudioEvent* HoverTitleItemSFX; // 0x588
	UAkAudioEvent* ClickTitleItemSFX; // 0x590
};

struct UMovieSceneFloatSection : UMovieSceneSection {
	FMovieSceneFloatChannel FloatCurve; // 0xe0
};

struct ASkyAtmosphere : AInfo {
	USkyAtmosphereComponent* SkyAtmosphereComponent; // 0x220
};

struct AKSWeapon_ReviveDroneDirect : AKSWeapon_ReviveDirect {
	FMulticastInlineDelegate OnDroneReviveBegin; // 0x6f0
	FMulticastInlineDelegate OnDroneReviveComplete; // 0x700
	FMulticastInlineDelegate OnDroneAbort; // 0x710
	FMulticastInlineDelegate OnDroneTargetRevive; // 0x720
	FMulticastInlineDelegate OnDroneTargetDied; // 0x730
	FMulticastInlineDelegate OnDroneDestroyed; // 0x740
	FMulticastInlineDelegate OnDroneSpawned; // 0x750
	AKSAgent_RevivalDrone* DroneClass; // 0x760
	TWeakObjectPtr<AKSAgent_RevivalDrone> DroneActor; // 0x768
};

struct AKSLootSiteBase : AActor {
	FMulticastInlineDelegate OnLootSiteSpawned; // 0x230
	FMulticastInlineDelegate OnLootSiteStateChanged; // 0x240
	ELootSiteRarity RarityTag; // 0x250
	FMulticastInlineDelegate OnLootSiteRarityChanged; // 0x258
	char SiteGroupNumber; // 0x268
	TMap<ELootSiteRarity, UDataTable*> RarityLootSiteTableMap; // 0x270
	TWeakObjectPtr<AKSItemDrop> SpawnedDrop; // 0x2d0
	TArray<UObject*> ObjectsToKeepAround; // 0x2d8
	float SpawnRate; // 0x2e8
	float SpawnDelay; // 0x2ec
	float RespawnDelay; // 0x2f0
	bool bAutoRespawn; // 0x2f4
	bool bDestroySiteOnLooted; // 0x2f5
	bool bDisableWeaponCosmeticZOffset; // 0x2f6
	TArray<AKSLootSiteBase*> ChildSpawners; // 0x2f8
	float SurfaceCheckHeight; // 0x308
	bool bUsePrecisePlacement; // 0x30c
	FLootSiteState LootSiteState; // 0x30d
	bool CosmeticVisible; // 0x30f
	FTimerHandle SpawnDelayTimer; // 0x310
	FVector NavigationLocation; // 0x318
	UKSItemStimuliSourceComponent* StimuliSourceComponent; // 0x330
	TArray<AActor*> ActorsSeenBy; // 0x338
};

struct UCameraAnim : UObject {
	UInterpGroup* CameraInterpGroup; // 0x28
	float AnimLength; // 0x30
	FBox BoundingBox; // 0x34
	char bRelativeToInitialTransform : 1; // 0x50
	char bRelativeToInitialFOV : 1; // 0x50
	float BaseFOV; // 0x54
	FPostProcessSettings BasePostProcessSettings; // 0x60
	float BasePostProcessBlendWeight; // 0x5b0
};

struct UKSActivityRewardCondition_Down : UKSActivityRewardCondition {
	bool IsDown; // 0x30
};

struct UMaterialExpressionAtmosphericFogColor : UMaterialExpression {
	FExpressionInput WorldPosition; // 0x40
};

struct UParticleModuleMeshRotationRate : UParticleModuleRotationRateBase {
	FRawDistributionVector StartRotationRate; // 0x30
};

struct UKSActivityRequirement_Rewards : UKSActivityRequirement {
	bool RequireEnabled; // 0x30
};

struct UEnvQueryTest_Overlap : UEnvQueryTest {
	FEnvOverlapData OverlapData; // 0x1f8
};

struct UKSActivityRequirement_Job : UKSActivityRequirement {
	TSoftObjectPtr<UKSItem> RequiredJob; // 0x30
};

struct UKSAnimNotifyState_WeaponProp : UAnimNotifyState {
	FSoftObjectPath WeaponAsset; // 0x30
	FName AnimClassRowNameOverride; // 0x48
	UAnimMontage* ActivationMontage; // 0x50
	FName PropIdentifier; // 0x58
	float ExtendedLifetime; // 0x60
	bool bSkipExtendedLifetime; // 0x64
	FPoolAttachmentInfo PropAttachmentInfo; // 0x68
};

struct UParticleModuleMeshRotationRate_Seeded : UParticleModuleMeshRotationRate {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x78
};

struct UKSAimLockData : UKSAimAssistDataBase {
	TMap<EControllerInputType, bool> RequireInputForAimLock; // 0x38
	TMap<EControllerInputType, UCurveVector*> AimLockCurve; // 0x88
	TMap<EControllerInputType, UCurveFloat*> AimLockDistanceCurve; // 0xd8
	TArray<FKSAimAssistPropertyBool> RequireInputOverride; // 0x128
	TArray<FKSAimAssistPropertyCurveVector> LockCurveOverride; // 0x138
	TArray<FKSAimAssistPropertyCurveFloat> DistanceCurveOverride; // 0x148
	TMap<EControllerInputType, bool> FullRequireInputForAimLock; // 0x158
	TMap<EControllerInputType, UCurveVector*> FullAimLockCurve; // 0x1a8
	TMap<EControllerInputType, UCurveFloat*> FullAimLockDistanceCurve; // 0x1f8
};

struct UCamMod_JumpStart_C : UCamMod_Master_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x68
};

struct UPGame_EffectGroupPersistent : UPGame_EffectGroup {
	FGameplayTag m_StackingCategory; // 0x80
	EEffectGroupApplicationRule m_ApplicationRule; // 0x88
	char m_nMaxStackCount; // 0x8c
	bool m_bApplyInstantOnInterval; // 0x8d
	bool m_bApplyStackOnInterval; // 0x8e
	float m_fStartDuration; // 0x90
	float m_fDuration; // 0x94
	float m_fIntervalDuration; // 0x98
	float m_fApplicationStrength; // 0x9c
};

struct UKSBTD_CompareRoundNumber : UBTDecorator {
	int32_t RoundNumber; // 0x68
	EArithmeticKeyOperation ArithmeticOperation; // 0x6c
};

struct UKSFXCurveComponent : UActorComponent {
	UMaterialInstanceDynamic* PostProcessMID; // 0x100
	UMaterialInterface* PostProcessMIDParent; // 0x108
	UParticleSystemComponent* ParticleSystem; // 0x110
	UParticleSystem* ParticleSystemParent; // 0x118
	bool bPlaying; // 0x120
	bool bReversing; // 0x121
	bool bLooping; // 0x122
	float CurrentTime; // 0x124
};

struct UDebugMenuItem_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Arrow; // 0x528
	UBorder* ColorBkg; // 0x530
	UTextBlock* CommandText; // 0x538
	FMulticastInlineDelegate ItemSelected; // 0x540
	FDebugMenuCommandInfo DebugCommand; // 0x550
};

struct UKSBTTask_SetBoolOnBlackboard : UBTTask_BlackboardBase {
	bool BoolValue; // 0x98
};

struct UMovieSceneGeometryCacheTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> AnimationSections; // 0x58
};

struct AKSKillCamController : AKSPlayerController {
	AKSKillCamObjectCamera* KillCamObjectCamera; // 0xf28
};

struct ARuntimeVirtualTextureVolume : AActor {
	URuntimeVirtualTextureComponent* VirtualTextureComponent; // 0x220
};

struct UKSWingSuitCosmeticComponent : UKSWeaponAttachmentCosmeticInst {
	FName SocketAttachPoint; // 0x1b0
	FString AssetPrefix; // 0x1b8
	bool bShouldDodgeRollOnLanding; // 0x1c8
	bool bShouldUseFootIKDuringFreefall; // 0x1c9
	TArray<FDataTableInfo> BaseAssetDataTables; // 0x1d0
	FVector ViewModelScale; // 0x1e0
	FRotator ViewModelRotation; // 0x1ec
	FVector ViewModelLocationOffset; // 0x1f8
	TArray<UParticleSystemComponent*> WingSuitVFXList; // 0x208
	UAkAudioEvent* StartSFX; // 0x218
	UAkAudioEvent* LoopSFX; // 0x220
	UAkAudioEvent* StopSFX; // 0x228
};

struct ADefaultPawn : APawn {
	float BaseTurnRate; // 0x280
	float BaseLookUpRate; // 0x284
	UPawnMovementComponent* MovementComponent; // 0x288
	USphereComponent* CollisionComponent; // 0x290
	UStaticMeshComponent* MeshComponent; // 0x298
	char bAddDefaultMovementBindings : 1; // 0x2a0
};

struct UPGame_PlayerInput : UPlayerInput {
	float KeyMouseSwitchDelta; // 0x12d0
	float GamepadSwitchDelta; // 0x12d8
};

struct UShadowMapTexture2D : UTexture2D {
	EShadowMapFlags ShadowmapFlags; // 0xe8
};

struct UWBP_ProgressionCardSlot_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* LevelUp; // 0x528
	UWidgetAnimation* AnimateCard; // 0x530
	UOverlay* CardContent; // 0x538
	UImage* Glow; // 0x540
	UImage* Gradient; // 0x548
	UImage* LeftSideDecro; // 0x550
	UNamedSlot* ProgressionCardContent; // 0x558
	UImage* RightSideDecro; // 0x560
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x568
	FMulticastInlineDelegate StartAnimation; // 0x570
	UAkAudioEvent* ProgressionCardLvlUpSFX; // 0x580
	UAkAudioEvent* ShowProgressionCardSFX; // 0x588
	FTimerHandle StartAnimTimer; // 0x590
};

struct UGameplayTagsDeveloperSettings : UObject {
	FString DeveloperConfigName; // 0x28
};

struct ALocalPlayerLobbyCharacter_C : ALobbyMainCharacter_C {
	FString PendingPlayerName; // 0x3ec8
	UKSItem* PendingAvatar; // 0x3ed8
	bool PendingIsLeader; // 0x3ee0
	bool NeedsToSetNameplate; // 0x3ee1
};

struct AFavoriteLobbyCharacter_C : ALobbyMainCharacter_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x3ec8
	UWidgetComponent* WidgetNameplate; // 0x3ed0
	bool NeedsToSetNameplate; // 0x3ed8
	UKSPlayerInfo* PendingPlayerInfo; // 0x3ee0
};

struct UMaterialExpressionLandscapeVisibilityMask : UMaterialExpression {
	FGuid ExpressionGUID; // 0x40
};

struct UAkCheckBox : UContentWidget {
	ECheckBoxState CheckedState; // 0x548
	FDelegate CheckedStateDelegate; // 0x54c
	FCheckBoxStyle WidgetStyle; // 0x560
	EHorizontalAlignment HorizontalAlignment; // 0xae0
	bool IsFocusable; // 0xae1
	FAkBoolPropertyToControl ThePropertyToControl; // 0xae8
	FAkWwiseItemToControl ItemToControl; // 0xaf8
	FMulticastInlineDelegate AkOnCheckStateChanged; // 0xb38
	FMulticastInlineDelegate OnItemDropped; // 0xb48
	FMulticastInlineDelegate OnPropertyDropped; // 0xb58
};

struct UMaterialExpressionSobol : UMaterialExpression {
	FExpressionInput Cell; // 0x40
	FExpressionInput Index; // 0x54
	FExpressionInput Seed; // 0x68
	uint32_t ConstIndex; // 0x7c
	FVector2D ConstSeed; // 0x80
};

struct UKSSpawnRuleDebugComponent : UTextRenderComponent {
	float GameScore; // 0x484
	FName FailureReason; // 0x488
};

struct UKSPlayerMod_AbilityRechargeSpeed : UKSPlayerMod {
	float AbilityRechargeSpeedMultiplier; // 0x330
};

struct UHLODProxy : UObject {
	TArray<FHLODProxyMesh> ProxyMeshes; // 0x28
};

struct UWBP_StandardButton_Currency_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Anim_OnHover; // 0x528
	UTextBlock* ButtonText; // 0x530
	UImage* Image_65; // 0x538
	USizeBox* SizeBox_113; // 0x540
	UTextBlock* Text_Price; // 0x548
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x550
};

struct UWBP_RegionSelect_Entry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* hoveranim; // 0x528
	UButton* Button; // 0x530
	UImage* HoverImage; // 0x538
	UImage* Image_1; // 0x540
	UImage* PreferredSiteIcon; // 0x548
	UTextBlock* RegionName; // 0x550
	int32_t SiteId; // 0x558
	FText SiteName; // 0x560
	FMulticastInlineDelegate OnRegionSelected; // 0x578
	UAkAudioEvent* HoverRegionSelectEntrySFX; // 0x588
	UAkAudioEvent* ClickRegionSelectEntrySFX; // 0x590
};

struct UAkHololensInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkHololensAdvancedInitializationSettings AdvancedSettings; // 0xb8
};

struct UMyPluginObject : UObject {
	FMyPluginStruct MyStruct; // 0x28
};

struct UKSActivityRewardCondition_Distance : UKSActivityRewardCondition {
	float MaxDistance; // 0x30
	float MinDistance; // 0x34
};

struct USourceEffectEnvelopeFollowerPreset : USoundEffectSourcePreset {
	FSourceEffectEnvelopeFollowerSettings Settings; // 0x74
};

struct UIpConnection : UNetConnection {
	float SocketErrorDisconnectDelay; // 0x1ad0
};

struct UAnimBoneCompressionCodec : UObject {
	FString Description; // 0x28
};

struct UKSSettingsInfo_CrosshairColor : UKSSettingsInfo_Generic {
	UKSSettingsColorOptionsAsset* ColorOptions; // 0x118
};

struct UPGame_PerformanceCaptureSettings : UObject {
	float FOV; // 0x28
	TArray<FString> StatsToCollect; // 0x30
	TArray<FString> MapsToProfile; // 0x40
	float StartingOffsetTime; // 0x50
	int32_t NumberOfSamples; // 0x54
	float TimeBetweenSamples; // 0x58
	TArray<FPGame_PerformanceCaptureProfile> Profiles; // 0x60
};

struct UWBP_HomeQuickPlay_C : UKSQuickPlayWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UWidgetAnimation* SupplementaryBtnClick; // 0x540
	UWidgetAnimation* SupplementaryBtnHover_Disabled; // 0x548
	UWidgetAnimation* PlayBtnClick; // 0x550
	UWidgetAnimation* PlayButtonMode; // 0x558
	UWidgetAnimation* SupplementaryBtnHover; // 0x560
	UWidgetAnimation* PlayBtnHover; // 0x568
	UImage* AffirmativeIcon; // 0x570
	USizeBox* BusyWrapper; // 0x578
	USizeBox* GamemodeDisplayWrapper; // 0x580
	UTextBlock* GameModeNameTextForJoin; // 0x588
	UTextBlock* GameModeNameTextForStatus; // 0x590
	UImage* PlayBtn_Fill; // 0x598
	UImage* PlayBtn_HoverFill; // 0x5a0
	UImage* PlayBtn_HoverStroke; // 0x5a8
	UImage* PlayBtn_Stroke; // 0x5b0
	UImage* PlayBtnEdge_EdgeDeco; // 0x5b8
	UImage* PlayBtnGamepadCallout; // 0x5c0
	UStandardButtonNoArt_C* PlayBtnHitTarget; // 0x5c8
	UImage* PlayBtnStatus_Fill; // 0x5d0
	UImage* PlayBtnStatus_HoverFill; // 0x5d8
	UImage* PlayBtnStatus_HoverStroke; // 0x5e0
	UImage* PlayBtnStatus_Stroke; // 0x5e8
	UOverlay* PlayButton_JoinMode; // 0x5f0
	UOverlay* PlayButton_StatusMode; // 0x5f8
	UImage* PlayIcon; // 0x600
	UWidgetSwitcher* StatusIconSwitcherLeft_2; // 0x608
	UTextBlock* StatusMsgText; // 0x610
	UScaleBox* StatusMsgWrapper; // 0x618
	UImage* SupplementaryBtn_EdgeDeco; // 0x620
	UImage* SupplementaryBtn_Fill; // 0x628
	UImage* SupplementaryBtn_HoverFill; // 0x630
	UImage* SupplementaryBtn_HoverStroke; // 0x638
	UImage* SupplementaryBtn_Stroke; // 0x640
	UOverlay* SupplementaryBtnChangeMode; // 0x648
	UImage* SupplementaryBtnGamepadCallout; // 0x650
	UStandardButtonNoArt_C* SupplementaryBtnHitTarget; // 0x658
	UTextBlock* SupplementaryBtnLabel; // 0x660
	UOverlay* SupplementaryBtnOverlay; // 0x668
	UOverlay* SupplementaryBtnStandardWrapper; // 0x670
	UImage* WarningIcon; // 0x678
	bool PlayShortcutEnabled; // 0x680
	int32_t CurrentPenaltyTimeLeft; // 0x684
	FText StatusMsg_Unknown; // 0x688
	FText StatusMsg_NoQueuesAvailable; // 0x6a0
	FText StatusMsg_NoSelection; // 0x6b8
	FText StatusMsg_QueueUnavailable; // 0x6d0
	FText StatusMsg_PartyLimit; // 0x6e8
	FText StatusMsg_ReadyToJoin; // 0x700
	FText StatusMsg_WaitingForLeader; // 0x718
	FText StatusMsg_QueuedStatus; // 0x730
	FText StatusMsg_EnteringMatch; // 0x748
	FText StatusMsg_PartyLevel; // 0x760
	FText StatusMsg_PlayerLevel; // 0x778
	FText StatusMsg_DeserterStatus; // 0x790
	FText Msg_ChooseGamemode; // 0x7a8
	FText Msg_CancelSearch; // 0x7c0
	bool bPlayBtnEnabled; // 0x7d8
	bool bSupplementaryBtnEnabled; // 0x7d9
	FMulticastInlineDelegate TriggerStatusModeDisplayUpdate; // 0x7e0
	bool bForceFirstTimeUpdate; // 0x7f0
	float CurrentQueueTimeElapsed; // 0x7f4
	FText Msg_ReadyToRejoin; // 0x7f8
	FText Msg_LeaveMatch; // 0x810
	FText Msg_LeaveCustomMatch; // 0x828
	FTimerHandle PendingQueueUpdateTimer; // 0x840
	float PendingQueueUpdateTimeoutTime; // 0x848
	bool MsgLeaveCustomLobby; // 0x84c
	UAkAudioEvent* ClickPlayBtnHomeQuickPlaySFX; // 0x850
	UAkAudioEvent* ClickCancelBtnHomeQuickPlaySFX; // 0x858
	FText StatusMsg_PartyLimitMin; // 0x860
	FText StatusMsg_RankedRangeTooFar; // 0x878
	bool LeaveQueueShortcutEnabled; // 0x890
	FText StatusMsg_PartyPlatformDisallowed; // 0x898
	FText StatusMsg_Retrying; // 0x8b0
};

struct UKSBattlepass : UKSEvent {
	FBattlepassUpsellData UpsellScreenData; // 0x288
	int32_t ProgressItemId; // 0x3c8
	int32_t PremiumRewardVendorId; // 0x3cc
	int64_t LevelPurchaseLootTableId; // 0x3d0
	int64_t LevelPurchaseLootId; // 0x3d8
	int64_t InstantUnlockRewardVendorId; // 0x3e0
	TSoftObjectPtr<UTexture2D> FreeIcon; // 0x3e8
	TSoftObjectPtr<UTexture2D> PremiumIcon; // 0x410
};

struct UWBP_DisabledIcon_C : UUserWidget {
	UImage* Icon; // 0x238
};

struct UParticleModuleColorScaleOverLife : UParticleModuleColorBase {
	FRawDistributionVector ColorScaleOverLife; // 0x30
	FRawDistributionFloat AlphaScaleOverLife; // 0x78
	char bEmitterTime : 1; // 0xa8
};

struct UAREnvironmentCaptureProbeTexture : UTextureCube {
	EARTextureType TextureType; // 0x110
	float Timestamp; // 0x114
	FGuid ExternalTextureGuid; // 0x118
	FVector2D Size; // 0x128
};

struct UParticleModuleVectorFieldRotation : UParticleModuleVectorFieldBase {
	FVector MinInitialRotation; // 0x30
	FVector MaxInitialRotation; // 0x3c
};

struct UMaterialExpressionRuntimeVirtualTextureSample : UMaterialExpression {
	FExpressionInput Coordinates; // 0x40
	FExpressionInput WorldPosition; // 0x54
	FExpressionInput MipValue; // 0x68
	URuntimeVirtualTexture* VirtualTexture; // 0x80
	ERuntimeVirtualTextureMaterialType MaterialType; // 0x88
	bool bSinglePhysicalSpace; // 0x89
	ERuntimeVirtualTextureMipValueMode MipValueMode; // 0x8a
};

struct UWrapBox : UPanelWidget {
	FVector2D InnerSlotPadding; // 0x128
	float WrapWidth; // 0x130
	bool bExplicitWrapWidth; // 0x134
};

struct UFavoritePreviewLoadoutComponent : URogueScreenLoadoutComponent {
	TSoftObjectPtr<UKSJobItem> FailSafeFavoriteJob; // 0x120
};

struct UParticleModuleVectorFieldLocal : UParticleModuleVectorFieldBase {
	UVectorField* VectorField; // 0x30
	FVector RelativeTranslation; // 0x38
	FRotator RelativeRotation; // 0x44
	FVector RelativeScale3D; // 0x50
	float Intensity; // 0x5c
	float Tightness; // 0x60
	char bIgnoreComponentTransform : 1; // 0x64
	char bTileX : 1; // 0x64
	char bTileY : 1; // 0x64
	char bTileZ : 1; // 0x64
	char bUseFixDT : 1; // 0x64
};

struct UImgMediaSettings : UObject {
	FFrameRate DefaultFrameRate; // 0x28
	float CacheBehindPercentage; // 0x30
	float CacheSizeGB; // 0x34
	int32_t CacheThreads; // 0x38
	int32_t CacheThreadStackSizeKB; // 0x3c
	float GlobalCacheSizeGB; // 0x40
	bool UseGlobalCache; // 0x44
	uint32_t ExrDecoderThreads; // 0x48
	FString DefaultProxy; // 0x50
	bool UseDefaultProxy; // 0x60
};

struct AKSWayPointSet : AActor {
	int32_t WayPointSet; // 0x220
	TArray<AKSWayPoint*> Waypoints; // 0x228
	TArray<int32_t> ForwardSides; // 0x238
	TArray<int32_t> ReversingSides; // 0x248
};

struct UModularSynthComponent : USynthComponent {
	int32_t VoiceCount; // 0x6e0
};

struct UKSBattlepassUpsellWidgetButton : UKSWidget {
	bool bCanAfford; // 0x530
	UOverlay* GamepadPromptHolder; // 0x538
	UOverlay* DiscountBanner; // 0x540
	UTextBlock* DiscountPercentageDisplay; // 0x548
	UTextBlock* ButtonText; // 0x550
	UTextBlock* AdditionalLevelsText; // 0x558
	UKSPriceTag* PriceTag; // 0x560
	UWidgetSwitcher* ButtonSwitcher; // 0x568
	UPUMG_StoreItem* StoreItem; // 0x570
	bool IsCurrentlyHovered; // 0x578
};

struct UKSSpawnSelectorComponent : UActorComponent {
	FKSSpawnSelectorTreeNode BaseRoot; // 0xb0
	FKSSpawnSelectorTreeNode SideRoot; // 0xd8
	FKSSpawnSelectorTreeNode FlipRoot; // 0x100
	FKSSpawnSelectorTreeNode GameRoot; // 0x128
	TArray<APlayerStart*> PlayerStarts; // 0x150
	FName FriendlyName; // 0x160
	bool bCanEverFlip; // 0x178
	float InvalidFlipPercent; // 0x17c
	bool bFlipped; // 0x180
};

struct ULandscapeSplineSegment : UObject {
	FLandscapeSplineSegmentConnection Connections[0x2]; // 0x28
	FInterpCurveVector SplineInfo; // 0x58
	TArray<FLandscapeSplineInterpPoint> Points; // 0x70
	FBox Bounds; // 0x80
	TArray<USplineMeshComponent*> LocalMeshComponents; // 0xa0
};

struct UKSGameShopItemComponentWidget : UKSWidget {
	TWeakObjectPtr<UKSGameShopItemComponent> GameShopItemComponentWeakPtr; // 0x520
	UTextBlock* ItemText; // 0x528
	UKSAsyncImage* ItemIcon; // 0x530
	UThrobber* ItemIconThrobber; // 0x538
	UButton* PurchaseButton; // 0x540
};

struct UInteractiveToolPropertySet : UObject {
	UObject* CachedProperties; // 0x40
	bool bIsPropertySetEnabled; // 0x48
};

struct UKSJobSelectionComponent : UActorComponent {
	FJobSelectionList JobSelectionList; // 0xb0
	FSelectionActivityStatus SelectionActivityStatus; // 0x1d0
	FKSJobSelectionAllowUnownedJobs AllowUnownedJobsStruct; // 0x220
	EJobUniquenessRule EnforcedJobUniqueness; // 0x240
	int32_t JobTableVendorId; // 0x244
	UJobCollection* JobCollection; // 0x248
	FMulticastInlineDelegate OnJobSelectionEntryAdded; // 0x250
	FMulticastInlineDelegate OnJobSelectionEntryChanged; // 0x260
	FMulticastInlineDelegate OnJobSelectionInitialized; // 0x270
	FMulticastInlineDelegate OnAllPlayersLockedIn; // 0x280
	FMulticastInlineDelegate OnSelectionActivityStatusChanged; // 0x290
	TArray<int32_t> BannedJobIds; // 0x300
	int32_t ExpectedBanCount; // 0x310
	AKSTeamState* CachedOwner; // 0x318
	bool bSelectionEnabled; // 0x320
	int32_t EntryCount; // 0x324
	UKSAudioManager* pAudioManager; // 0x330
};

struct AServerStatReplicator : AInfo {
	bool bUpdateStatNet; // 0x220
	bool bOverwriteClientStats; // 0x221
	uint32_t Channels; // 0x224
	uint32_t InRate; // 0x228
	uint32_t OutRate; // 0x22c
	uint32_t MaxPacketOverhead; // 0x234
	uint32_t InRateClientMax; // 0x238
	uint32_t InRateClientMin; // 0x23c
	uint32_t InRateClientAvg; // 0x240
	uint32_t InPacketsClientMax; // 0x244
	uint32_t InPacketsClientMin; // 0x248
	uint32_t InPacketsClientAvg; // 0x24c
	uint32_t OutRateClientMax; // 0x250
	uint32_t OutRateClientMin; // 0x254
	uint32_t OutRateClientAvg; // 0x258
	uint32_t OutPacketsClientMax; // 0x25c
	uint32_t OutPacketsClientMin; // 0x260
	uint32_t OutPacketsClientAvg; // 0x264
	uint32_t NetNumClients; // 0x268
	uint32_t InPackets; // 0x26c
	uint32_t OutPackets; // 0x270
	uint32_t InBunches; // 0x274
	uint32_t OutBunches; // 0x278
	uint32_t OutLoss; // 0x27c
	uint32_t InLoss; // 0x280
	uint32_t VoiceBytesSent; // 0x284
	uint32_t VoiceBytesRecv; // 0x288
	uint32_t VoicePacketsSent; // 0x28c
	uint32_t VoicePacketsRecv; // 0x290
	uint32_t PercentInVoice; // 0x294
	uint32_t PercentOutVoice; // 0x298
	uint32_t NumActorChannels; // 0x29c
	uint32_t NumConsideredActors; // 0x2a0
	uint32_t PrioritizedActors; // 0x2a4
	uint32_t NumRelevantActors; // 0x2a8
	uint32_t NumRelevantDeletedActors; // 0x2ac
	uint32_t NumReplicatedActorAttempts; // 0x2b0
	uint32_t NumReplicatedActors; // 0x2b4
	uint32_t NumActors; // 0x2b8
	uint32_t NumNetActors; // 0x2bc
	uint32_t NumDormantActors; // 0x2c0
	uint32_t NumInitiallyDormantActors; // 0x2c4
	uint32_t NumNetGUIDsAckd; // 0x2c8
	uint32_t NumNetGUIDsPending; // 0x2cc
	uint32_t NumNetGUIDsUnAckd; // 0x2d0
	uint32_t ObjPathBytes; // 0x2d4
	uint32_t NetGUIDOutRate; // 0x2d8
	uint32_t NetGUIDInRate; // 0x2dc
	uint32_t NetSaturated; // 0x2e0
};

struct UKSModInst_MovementAbility : UKSModInst_Activated {
	float Distance; // 0x478
};

struct UKSActivityRewardCondition_Operator_And : UKSActivityRewardCondition {
	TArray<UKSActivityRewardCondition*> SubConditions; // 0x30
};

struct UKSCustomApparelComponent : UActorComponent {
	bool bLinkLocalSkinObjectToBodyApparel; // 0xb0
	AKSCharacter* CharacterOwner; // 0xb8
	UKSApparelAsset_CustomComponent* ApparelAsset; // 0xc0
	UMultiSkinObject* SkinObject; // 0xc8
};

struct UKSModInst_DetectEnemy : UKSPlayerModInstance {
	FMulticastInlineDelegate OnDetectEnemy; // 0x1b8
	TSoftClassPtr<UObject> WidgetClass; // 0x1c8
	bool bIsDetectingEnemy; // 0x1f0
};

struct UKSAssetQueryHelperComponent : UActorComponent {
	FGameplayTagQuery PrimaryAssetQuery; // 0xb0
	TArray<FPrimaryAssetId> AssetIds; // 0xf8
	int32_t LastResolvedIndex; // 0x108
	bool bHasInitalizedAssetIdList; // 0x10c
};

struct UKSAnimNotifyState_Emotion : UAnimNotifyState {
	EKSEmotion Emotion; // 0x30
};

struct UKSPlayerMod_AdsMoveSpeed : UKSPlayerMod {
	float AdsMoveSpeedMultiplier; // 0x330
};

struct ASpectatorBeaconHost : AOnlineBeaconHostObject {
	USpectatorBeaconState* State; // 0x248
	bool bLogoutOnSessionTimeout; // 0x2b0
	float SessionTimeoutSecs; // 0x2b4
	float TravelSessionTimeoutSecs; // 0x2b8
};

struct UButtonStyleAsset : UObject {
	FButtonStyle ButtonStyle; // 0x28
};

struct UPlatformStoreAsset : UPlatformInventoryItem {
	int32_t LootId; // 0x1b8
	FPrimaryAssetRules Rules; // 0x1bc
};

struct AKSViewModel : AActor {
	FName ViewModelName; // 0x2d0
	FKSEquipmentContainer EquipmentContainer; // 0x2d8
	FRotator DefaultViewModelRotationOverride; // 0x500
	FVector MaxAxisRotation; // 0x50c
	float IdleSecondsToResetRotation; // 0x518
	float ResetRotationSpeedRadians; // 0x51c
	FVector RotationRatePerAxis; // 0x520
	bool bForceOverrideViewModelRotation; // 0x52c
	bool bModelDataIsDirty; // 0x570
	UKSWeaponAsset* DesiredWeaponAsset; // 0x578
	TMap<char, UKSWeaponAttachment*> DesiredAttachments; // 0x580
	UKSWeaponComponent* ActiveWeaponComponent; // 0x5d0
	TArray<UKSWeaponAttachmentCosmeticInst*> ActiveAttachmentCosmetics; // 0x5d8
	UKSWeaponSkeletalMeshComponent* ActiveWeaponModelMeshComponent; // 0x5e8
	FKSEquipmentId PendingWeaponComponentId; // 0x5f0
	UKSWeaponAsset* PendingWeaponAsset; // 0x5f8
	UKSWeaponComponent* PendingWeaponComponent; // 0x600
	TSet<FKSEquipmentId> PendingWeaponCosmeticIds; // 0x608
	TArray<FPendingCosmeticInfo> PendingInfos; // 0x658
	float ModelUpdateDebounceTime; // 0x668
	bool bClearActiveModelWhileTransitioning; // 0x678
};

struct UKSPartyManagerWidgetBase : UKSWidget {
	TArray<FPUMG_PartyMemberData> CachedDisplayedPartyMembers; // 0x520
};

struct UKSPlayerMod_GiveItemOnActivation : UKSPlayerMod_Activated {
	TSoftObjectPtr<UKSItem> GivenItem; // 0x3b8
	TArray<TSoftObjectPtr<UKSItem>> GivenItems; // 0x3e0
};

struct UCheckBoxStyleAsset : UObject {
	FCheckBoxStyle CheckBoxStyle; // 0x28
};

struct USpectatorPawnMovement : UFloatingPawnMovement {
	char bIgnoreTimeDilation : 1; // 0x150
};

struct UAkSlider : UWidget {
	float Value; // 0x110
	FDelegate ValueDelegate; // 0x114
	FSliderStyle WidgetStyle; // 0x128
	EOrientation Orientation; // 0x468
	FLinearColor SliderBarColor; // 0x46c
	FLinearColor SliderHandleColor; // 0x47c
	bool IndentHandle; // 0x48c
	bool Locked; // 0x48d
	float StepSize; // 0x490
	bool IsFocusable; // 0x494
	FAkPropertyToControl ThePropertyToControl; // 0x498
	FAkWwiseItemToControl ItemToControl; // 0x4a8
	FMulticastInlineDelegate OnValueChanged; // 0x4e8
	FMulticastInlineDelegate OnItemDropped; // 0x4f8
	FMulticastInlineDelegate OnPropertyDropped; // 0x508
};

struct UPrimaryAssetLabel : UPrimaryDataAsset {
	FPrimaryAssetRules Rules; // 0x30
	char bLabelAssetsInMyDirectory : 1; // 0x3c
	char bIsRuntimeLabel : 1; // 0x3c
	TArray<TSoftObjectPtr<UObject>> ExplicitAssets; // 0x40
	TArray<TSoftClassPtr<UObject>> ExplicitBlueprints; // 0x50
	FCollectionReference AssetCollection; // 0x60
};

struct UKSActivityRewardCondition_WeaponTagEquippedByVictim : UKSActivityRewardCondition {
	TArray<FGameplayTag> MatchingWeaponTags; // 0x30
};

struct UKSBTD_EquipmentState : UBTDecorator {
	FGameplayTag EquipPoint; // 0x68
	bool bCheckIsEquipped; // 0x70
	EBasicKeyOperation IsEquipped; // 0x71
	bool bCheckIsActiveWeapon; // 0x72
	EBasicKeyOperation IsActiveWeapon; // 0x73
	bool bCheckIsReloading; // 0x74
	EBasicKeyOperation IsReloading; // 0x75
	bool bCheckEquipmentType; // 0x76
	EBasicKeyOperation EquipmentType; // 0x77
	FGameplayTagContainer ComparedEquipmentTypes; // 0x78
	bool bCheckEquipmentClass; // 0x98
	EBasicKeyOperation EquipmentClassComparison; // 0x99
	TSoftClassPtr<UObject> ComparedEquipmentClass; // 0xa0
	bool bCheckComponentClass; // 0xc8
	EBasicKeyOperation ComponentClassComparison; // 0xc9
	TSoftClassPtr<UObject> ComparedComponentClass; // 0xd0
};

struct UKSSettingsInfo_Generic : UKSSettingsInfoBase {
	EKSSettingType KSSettingType; // 0x108
	FName Name; // 0x10c
};

struct UKSWeaponMilestoneDisplay : UKSWidget {
	UKSWeaponAsset* PopulatedWeaponAsset; // 0x520
};

struct UWBP_ViewItems_C : UKSViewItemsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_KSCosmeticItemDisplay_C* BundleItem0; // 0x528
	UWBP_KSCosmeticItemDisplay_C* BundleItem1; // 0x530
	UWBP_KSCosmeticItemDisplay_C* BundleItem2; // 0x538
	UWBP_KSCosmeticItemDisplay_C* BundleItem3; // 0x540
	UWBP_KSCosmeticItemDisplay_C* BundleItem4; // 0x548
	UVerticalBox* BundleItemsWrapper; // 0x550
	UWBP_KeyCallout_C* GamepadScrollLeft; // 0x558
	UWBP_KeyCallout_C* GamepadScrollRight; // 0x560
	UWBP_ItemInfoContainer_Description_C* InfoContainer; // 0x568
	UWBP_ItemPreviewStack_C* ItemPreviewStack; // 0x570
	UOverlay* RewardDetailsContainer; // 0x578
	UWBP_ButtonArrow_C* ScrollLeftButton; // 0x580
	UHorizontalBox* ScrollLeftIndicator; // 0x588
	UWBP_ButtonArrow_C* ScrollRightButton; // 0x590
	UHorizontalBox* ScrollRightIndicator; // 0x598
	FName ViewCamera; // 0x5a0
	ELobbyCharacterIndex LobbyCharacter; // 0x5a8
	FName ViewModel; // 0x5ac
	UKSViewItemData* ViewItemData; // 0x5b8
	TArray<UPUMG_StoreItem*> BundledItems; // 0x5c0
	int32_t ScrollIndex; // 0x5d0
	TArray<UWBP_KSCosmeticItemDisplay_C*> BundleItems; // 0x5d8
};

struct UWBP_QuickPlay_MapThumbnail_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Image; // 0x240
	UImage* Image_2; // 0x248
	UImage* Image_3; // 0x250
	UImage* Image_58; // 0x258
	UWBP_AsyncIcon_C* MapImage; // 0x260
	UTextBlock* mapName; // 0x268
	FUIMapInfo UIMapInfo; // 0x270
	FMapDetail MapDetail; // 0x2c8
};

struct UVariant : UObject {
	FText DisplayText; // 0x28
	TArray<UVariantObjectBinding*> ObjectBindings; // 0x58
	UTexture2D* Thumbnail; // 0x68
};

struct UInterpTrackInstColorProp : UInterpTrackInstProperty {
	FColor ResetColor; // 0x60
};

struct UControlPointMeshComponent : UStaticMeshComponent {
	float VirtualTextureMainPassMaxDrawDistance; // 0x4e8
};

struct UParticleModuleParameterDynamic_Seeded : UParticleModuleParameterDynamic {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x48
};

struct UKSBackfillRuleComponent : UKSGameRuleComponent {
	float BackfillRequestTimeToLive; // 0xe8
	float BackfillRequestOverlapTime; // 0xec
	float BackfillRequestBatchDelay; // 0xf0
	EKSBackfillRankingType BackfillRankingType; // 0x100
	bool bStartSealed; // 0x101
	bool bDynamicSeal; // 0x102
	FKSBackfillDynamicSealInfo DynamicSealInfo; // 0x104
};

struct AKSWeapon_Proximity : AKSWeapon {
	UKSProximityComponent* ProximityComponentClass; // 0x6d8
	UKSProximityComponent* ProximityComponent; // 0x6e0
	bool bCacheProximityActorsWhileFiring; // 0x6e8
	bool bProximityActiveOnlyInHand; // 0x6e9
	TArray<AActor*> ProximityActors; // 0x6f0
	TArray<AActor*> CachedProximityActors; // 0x700
	TArray<UPrimitiveComponent*> ProximityComponents; // 0x710
	TArray<UPrimitiveComponent*> CachedProximityComponents; // 0x720
	FMulticastInlineDelegate OnCachedProximityActorsUpdatedDel; // 0x730
};

struct ULevelStreaming : UObject {
	TSoftObjectPtr<UWorld> WorldAsset; // 0x28
	FName PackageNameToLoad; // 0x50
	TArray<FName> LODPackageNames; // 0x58
	FTransform LevelTransform; // 0x80
	int32_t LevelLODIndex; // 0xb4
	int32_t StreamingPriority; // 0xb8
	char bShouldBeVisible : 1; // 0xbe
	char bShouldBeLoaded : 1; // 0xbe
	char bLocked : 1; // 0xbe
	char bIsStatic : 1; // 0xbe
	char bShouldBlockOnLoad : 1; // 0xbe
	char bShouldBlockOnUnload : 1; // 0xbf
	char bDisableDistanceStreaming : 1; // 0xbf
	char bDrawOnLevelStatusMap : 1; // 0xbf
	FLinearColor LevelColor; // 0xc0
	TArray<ALevelStreamingVolume*> EditorStreamingVolumes; // 0xd0
	float MinTimeBetweenVolumeUnloadRequests; // 0xe0
	bool bExcludeFromAutomatedLightBake; // 0xe8
	FMulticastInlineDelegate OnLevelLoaded; // 0xf0
	FMulticastInlineDelegate OnLevelUnloaded; // 0x100
	FMulticastInlineDelegate OnLevelShown; // 0x110
	FMulticastInlineDelegate OnLevelHidden; // 0x120
	ULevel* LoadedLevel; // 0x130
	ULevel* PendingUnloadLevel; // 0x138
};

struct UParticleModuleSizeMultiplyLife : UParticleModuleSizeBase {
	FRawDistributionVector LifeMultiplier; // 0x30
	char MultiplyX : 1; // 0x78
	char MultiplyY : 1; // 0x78
	char MultiplyZ : 1; // 0x78
};

struct UMaterialFunctionInterface : UObject {
	FGuid StateId; // 0x28
	EMaterialFunctionUsage MaterialFunctionUsage; // 0x38
};

struct UKSAllyMarkerWidget : UKSMapIconWidgetBase {
	UWidget* ArrowWidget; // 0x318
	UWidget* NameOrStatusWidget; // 0x320
	UWidget* DownedSectionWidget; // 0x328
	FMulticastInlineDelegate OnGameModeModActivationChanged; // 0x330
};

struct UWBP_RankedOverview_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowSceneAnim; // 0x528
	UWBP_RankedIcon_C* Bronze_2; // 0x530
	URichTextBlock* BronzeText_2; // 0x538
	UWBP_RankedIcon_C* Diamond_2; // 0x540
	URichTextBlock* DiamondText; // 0x548
	UWBP_StandardButtonMedium_C* DismissButton; // 0x550
	UTextBlock* DivisionRPText; // 0x558
	UWBP_RankedIcon_C* Gold_2; // 0x560
	URichTextBlock* GoldText; // 0x568
	UImage* Image_2; // 0x570
	UImage* Image_3; // 0x578
	UImage* Image_4; // 0x580
	UImage* Image_5; // 0x588
	UImage* Image_6; // 0x590
	UImage* Image_7; // 0x598
	UImage* Image_8; // 0x5a0
	UImage* Image_9; // 0x5a8
	UImage* Image_10; // 0x5b0
	UImage* Image_11; // 0x5b8
	UImage* Image_12; // 0x5c0
	UImage* Image_13; // 0x5c8
	UImage* Image_14; // 0x5d0
	UImage* Image_15; // 0x5d8
	UImage* Image_16; // 0x5e0
	UImage* Image_17; // 0x5e8
	UImage* Image_18; // 0x5f0
	UImage* Image_19; // 0x5f8
	UImage* Image_20; // 0x600
	UImage* Image_21; // 0x608
	UImage* Image_22; // 0x610
	UImage* Image_23; // 0x618
	UImage* Image_24; // 0x620
	UImage* Image_25; // 0x628
	UImage* Image_28; // 0x630
	UImage* Image_229; // 0x638
	UImage* Image_251; // 0x640
	UImage* Image_437; // 0x648
	UImage* Image_705; // 0x650
	UImage* Image_1038; // 0x658
	UImage* Image_1167; // 0x660
	UWBP_RankedIcon_C* Platinum_2; // 0x668
	URichTextBlock* PlatinumText; // 0x670
	UTextBlock* RankedHeader; // 0x678
	URichTextBlock* RichTextBlock_241; // 0x680
	UWBP_RankedIcon_C* Rogue_2; // 0x688
	URichTextBlock* RogueText; // 0x690
	UScaleBox* ScaleBox_2; // 0x698
	UScaleBox* ScaleBox_3; // 0x6a0
	UScaleBox* ScaleBox_4; // 0x6a8
	UScaleBox* ScaleBox_5; // 0x6b0
	UScaleBox* ScaleBox_6; // 0x6b8
	UWBP_RankedIcon_C* Silver_2; // 0x6c0
	URichTextBlock* SilverText; // 0x6c8
	UWBP_BulletedListEntry_C* WBP_BulletedListEntry_C_2; // 0x6d0
	UWBP_BulletedListEntry_C* WBP_BulletedListEntry_C_3; // 0x6d8
	UWBP_BulletedListEntry_C* WBP_BulletedListEntry_C_4; // 0x6e0
	UWBP_BulletedListEntry_C* WBP_BulletedListEntry_C_5; // 0x6e8
	UWBP_BulletedListEntry_C* WBP_BulletedListEntry_C_6; // 0x6f0
	UWBP_ButtonSlot_Cosmetic_C* WBP_ButtonSlot_Cosmetic; // 0x6f8
	UWBP_ButtonSlot_Cosmetic_C* WBP_ButtonSlot_Cosmetic_2; // 0x700
	UWBP_Header2_C* WBP_Header2; // 0x708
	UWBP_Header2_C* WBP_Header2_2; // 0x710
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay; // 0x718
};

struct UTouchRegionSettings : UObject {
	float MaxFullAxisLength; // 0x28
	float MaxFullAxisDeadZoneLength; // 0x2c
	float MaxDeltaAxisLength; // 0x30
	float SwipeMaxDuration; // 0x34
	float SwipeMinLength; // 0x38
	float SwipeDirectionAngleThreshold; // 0x3c
	float TapMaxDuration; // 0x40
	float TapMaxLength; // 0x44
	float DoubleTapMaxLength; // 0x48
	float DoubleTapMaxDuration; // 0x4c
	TArray<FTouchRegion> TouchRegions; // 0x50
};

struct UMovieSceneCameraCutSection : UMovieSceneSection {
	FGuid CameraGuid; // 0xe0
	FMovieSceneObjectBindingID CameraBindingID; // 0xf0
};

struct UKSPlayerMod_ActivatedTarget : UKSPlayerMod_Activated {
	TArray<TSoftObjectPtr<UKSPlayerMod>> TargetBuffsGivenOnActivation; // 0x3b8
};

struct USocialSettings : UObject {
	TArray<FName> OssNamesWithEnvironmentIdPrefix; // 0x28
	int32_t DefaultMaxPartySize; // 0x38
	bool bPreferPlatformInvites; // 0x3c
	bool bMustSendPrimaryInvites; // 0x3d
	bool bLeavePartyOnDisconnect; // 0x3e
	float UserListAutoUpdateRate; // 0x40
	int32_t MinNicknameLength; // 0x44
	int32_t MaxNicknameLength; // 0x48
};

struct UMaterialExpressionFunctionOutput : UMaterialExpression {
	FName OutputName; // 0x40
	FString Description; // 0x48
	int32_t SortPriority; // 0x58
	FExpressionInput A; // 0x5c
	char bLastPreviewed : 1; // 0x70
	FGuid ID; // 0x74
};

struct UKSCurrency : UKSItem {
	bool IsDLCVoucher; // 0x250
	int32_t SortOrder; // 0x254
	TSoftObjectPtr<UDataTable> CurrencyDataByQtyTable; // 0x258
	TSoftObjectPtr<UTexture2D> FullSplash; // 0x280
	TSoftObjectPtr<UTexture2D> CurrencySmallIcon; // 0x2a8
};

struct UBehaviorTreeComponent : UBrainComponent {
	TArray<UBTNode*> NodeInstances; // 0x130
	UBehaviorTree* DefaultBehaviorTreeAsset; // 0x268
};

struct UKSActivityRewardCondition_ItemTagPurchased : UKSActivityRewardCondition {
	TArray<FGameplayTag> MatchingItemTags; // 0x30
};

struct UKSPlayerInputDefault : UObject {
	TArray<FSettingConfigPair> SettingsConfig; // 0x28
	TArray<FKSInputActionNameTypePair> KSInputActionNameTypePairs; // 0x38
	TArray<FKSInputActionTiedNames> KSInputActionTiedNames; // 0x48
	TArray<FKSCustomInputActionKey> CustomInputActionKeys; // 0x58
	TArray<FKSCustomInputAxisKey> CustomInputAxisKeys; // 0x68
};

struct UKSTouchHudWidget : UKSWidget {
	bool bAlwaysShowQuickMelee; // 0x520
	bool bIsInEditMode; // 0x521
	UKSWeaponAsset_Melee* QuickMeleeWeaponAsset; // 0x528
	UWidget* ThrowGrenadeButton; // 0x530
	UWidget* QuickMeleeButton; // 0x538
	UWidget* AbilityButton; // 0x540
	UImage* MyAimDownSightsWidget; // 0x548
	UImage* MyAutoSprintWidget; // 0x550
	UTexture2D* AimDownSightsEnableIcon; // 0x558
	UTexture2D* AimDownSightsCancelIcon; // 0x560
	UTexture2D* AutoSprintEnableIcon; // 0x568
	UTexture2D* AutoSprintCancelIcon; // 0x570
	UWidget* ContextualPingButton; // 0x578
	UWidgetSwitcher* PrimaryWeaponSwitcher; // 0x580
};

struct UForceFeedbackAttenuation : UObject {
	FForceFeedbackAttenuationSettings Attenuation; // 0x28
};

struct USplineMovementComponent : UMovementComponent {
	char bPauseOnImpact : 1; // 0xf0
	ESplineBehaviourType BehaviourType; // 0xf4
	char bForceSubStepping : 1; // 0xf8
	FMulticastInlineDelegate OnSplineReverse; // 0x100
	FMulticastInlineDelegate OnSplineStop; // 0x110
	FMulticastInlineDelegate OnWaitBeginDelegate; // 0x120
	FMulticastInlineDelegate OnWaitEndDelegate; // 0x130
	FMulticastInlineDelegate OnResetDelegate; // 0x140
	float MaxSimulationTimeStep; // 0x150
	int32_t MaxSimulationIterations; // 0x154
	USplineComponent* Spline; // 0x158
	float Speed; // 0x160
};

struct UKSActiveWeaponComponentWidget : UKSPawnInventoryWidget {
	int32_t ActiveWeaponSlot; // 0x5b0
	FGameplayTagContainer EquipPointsToIgnore; // 0x5b8
	bool bDelayClearUntilNextTick; // 0x5d8
	TWeakObjectPtr<UKSWeaponComponent> WeakActiveWeaponComponentPtr; // 0x5dc
};

struct UToIntegerField : UFieldNodeInt {
	UFieldNodeFloat* FloatField; // 0xb0
};

struct APlayerState : AInfo {
	float Score; // 0x220
	int32_t PlayerId; // 0x224
	char Ping; // 0x228
	char bShouldUpdateReplicatedPing : 1; // 0x22a
	char bIsSpectator : 1; // 0x22a
	char bOnlySpectator : 1; // 0x22a
	char bIsABot : 1; // 0x22a
	char bIsInactive : 1; // 0x22a
	char bFromPreviousLevel : 1; // 0x22a
	int32_t StartTime; // 0x22c
	ULocalMessage* EngineMessageClass; // 0x230
	FString SavedNetworkAddress; // 0x240
	FUniqueNetIdRepl UniqueId; // 0x250
	APawn* PawnPrivate; // 0x280
	FString PlayerNamePrivate; // 0x300
};

struct UTextBlock : UTextLayoutWidget {
	FText Text; // 0x130
	FDelegate TextDelegate; // 0x148
	FSlateColor ColorAndOpacity; // 0x158
	FDelegate ColorAndOpacityDelegate; // 0x180
	FSlateFontInfo Font; // 0x190
	FSlateBrush StrikeBrush; // 0x1e0
	FVector2D ShadowOffset; // 0x268
	FLinearColor ShadowColorAndOpacity; // 0x270
	FDelegate ShadowColorAndOpacityDelegate; // 0x280
	float MinDesiredWidth; // 0x290
	bool bWrapWithInvalidationPanel; // 0x294
	bool bAutoWrapText; // 0x295
	bool bSimpleTextMode; // 0x296
};

struct UMaterialExpressionMinLevelForBlurredNormal : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UAsyncActionLoadPrimaryAsset : UAsyncActionLoadPrimaryAssetBase {
	FMulticastInlineDelegate Completed; // 0x78
};

struct UKSNavModifierComponent : UNavModifierComponent {
	FVector ComponentBoundsOffset; // 0x140
};

struct UBlackboardData : UDataAsset {
	UBlackboardData* Parent; // 0x30
	TArray<FBlackboardEntry> Keys; // 0x38
	char bHasSynchronizedKeys : 1; // 0x48
};

struct UKSRuleBasedPhaseProxy : UKSGamePhaseProxyBase {
	FMulticastInlineDelegate OnPhaseCompleted; // 0x28
	FMulticastInlineDelegate OnFailedToStart; // 0x38
	FMatchPhase MatchPhase; // 0x5c
};

struct UKSWeaponAttachment_AccuracyKick : UKSWeaponAttachment {
	bool bReplaceKickbackModule; // 0x2f8
	UKickbackModule* KickbackModule; // 0x300
	float KickbackResetTime; // 0x308
	bool bModifyKickbackScale; // 0x30c
	float KickbackScale; // 0x310
	bool bModifyBaseAccuracy; // 0x314
	float BaseAccuracyMultiplier; // 0x318
};

struct APlayerController : AController {
	UPlayer* Player; // 0x298
	APawn* AcknowledgedPawn; // 0x2a0
	UInterpTrackInstDirector* ControllingDirTrackInst; // 0x2a8
	AHUD* MyHud; // 0x2b0
	APlayerCameraManager* PlayerCameraManager; // 0x2b8
	APlayerCameraManager* PlayerCameraManagerClass; // 0x2c0
	bool bAutoManageActiveCameraTarget; // 0x2c8
	FRotator TargetViewRotation; // 0x2cc
	float SmoothTargetViewRotationSpeed; // 0x2e4
	TArray<AActor*> HiddenActors; // 0x2f0
	TArray<TWeakObjectPtr<UPrimitiveComponent>> HiddenPrimitiveComponents; // 0x300
	float LastSpectatorStateSynchTime; // 0x314
	FVector LastSpectatorSyncLocation; // 0x318
	FRotator LastSpectatorSyncRotation; // 0x324
	int32_t ClientCap; // 0x330
	UCheatManager* CheatManager; // 0x338
	UCheatManager* CheatClass; // 0x340
	UPlayerInput* PlayerInputClass; // 0x348
	UPlayerInput* PlayerInput; // 0x350
	TArray<FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x358
	char bPlayerIsWaiting : 1; // 0x3d8
	char NetPlayerIndex; // 0x3dc
	UNetConnection* PendingSwapConnection; // 0x418
	UNetConnection* NetConnection; // 0x420
	float InputYawScale; // 0x440
	float InputPitchScale; // 0x444
	float InputRollScale; // 0x448
	char bShowMouseCursor : 1; // 0x44c
	char bEnableClickEvents : 1; // 0x44c
	char bEnableTouchEvents : 1; // 0x44c
	char bEnableMouseOverEvents : 1; // 0x44c
	char bEnableTouchOverEvents : 1; // 0x44c
	char bForceFeedbackEnabled : 1; // 0x44c
	float ForceFeedbackScale; // 0x450
	TArray<FKey> ClickEventKeys; // 0x458
	EMouseCursor DefaultMouseCursor; // 0x468
	EMouseCursor CurrentMouseCursor; // 0x469
	ECollisionChannel DefaultClickTraceChannel; // 0x46a
	ECollisionChannel CurrentClickTraceChannel; // 0x46b
	float HitResultTraceDistance; // 0x46c
	uint16_t SeamlessTravelCount; // 0x470
	uint16_t LastCompletedSeamlessTravelCount; // 0x472
	UInputComponent* InactiveStateInputComponent; // 0x4e8
	char bShouldPerformFullTickWhenPaused : 1; // 0x4f0
	UTouchInterface* CurrentTouchInterface; // 0x508
	ASpectatorPawn* SpectatorPawn; // 0x560
	bool bIsLocalPlayerController; // 0x56c
	FVector SpawnLocation; // 0x570
};

struct UKSBanner : UKSItem {
	TSoftObjectPtr<UTexture2D> SmallBannerIcon; // 0x250
	UIconInfo* SmallBannerIconInfo; // 0x278
	TSoftObjectPtr<UTexture2D> LargeBannerIcon; // 0x280
	UIconInfo* LargeBannerIconInfo; // 0x2a8
};

struct AKSRemoteControlledVehicle : AKSVehicleBase {
	bool bDurationHasEnded; // 0xf08
};

struct UARTextureCameraDepth : UARTexture {
	EARDepthQuality DepthQuality; // 0xd8
	EARDepthAccuracy DepthAccuracy; // 0xd9
	bool bIsTemporallySmoothed; // 0xda
};

struct UWBP_KeyboardBackButton_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* Back_TextBlock; // 0x240
	UButton* BackButton; // 0x248
	UBorder* KBMIconBorder; // 0x250
	FMulticastInlineDelegate OnBackButtonClicked; // 0x258
	bool UseTouchStyling; // 0x268
};

struct UWBP_CustomMassInviteEntry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Selected; // 0x528
	UWidgetAnimation* Hover; // 0x530
	UButton* HitArea; // 0x538
	UOverlay* InviteSentBg; // 0x540
	UWBP_PlayerInfoDisplay_C* WBP_PlayerInfoDisplay; // 0x548
	FMulticastInlineDelegate OnClicked; // 0x550
	bool IsToggled; // 0x560
	bool DisplayHovered; // 0x561
};

struct UWBP_Challenge_Rewards_Badge_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* NewAnimation; // 0x528
	UVerticalBox* CurrencyDisplay; // 0x530
	UWidgetSwitcher* FrameSwitcher; // 0x538
	UKSAsyncImage* RewardImage; // 0x540
	UTextBlock* RewardQtyText; // 0x548
	UWidgetSwitcher* RewardTypeSwitcher; // 0x550
	UOverlay* Root; // 0x558
	USizeBox* SizeControl; // 0x560
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay; // 0x568
	UOverlay* Wrapper; // 0x570
	int32_t Quantity; // 0x578
	TSoftObjectPtr<UPlatformInventoryItem> SoftRewardItem; // 0x580
	bool IsCompletedState; // 0x5a8
};

struct UDefaultLevelSequenceInstanceData : UObject {
	AActor* TransformOriginActor; // 0x30
	FTransform TransformOrigin; // 0x40
};

struct UWidgetTree : UObject {
	UWidget* RootWidget; // 0x28
};

struct USoundNodeMixer : USoundNode {
	TArray<float> InputVolume; // 0x48
};

struct AChaosSolverActor : AActor {
	float TimeStepMultiplier; // 0x220
	int32_t CollisionIterations; // 0x224
	int32_t PushOutIterations; // 0x228
	int32_t PushOutPairIterations; // 0x22c
	float ClusterConnectionFactor; // 0x230
	EClusterConnectionTypeEnum ClusterUnionConnectionType; // 0x234
	bool DoGenerateCollisionData; // 0x235
	FSolverCollisionFilterSettings CollisionFilterSettings; // 0x238
	bool DoGenerateBreakingData; // 0x248
	FSolverBreakingFilterSettings BreakingFilterSettings; // 0x24c
	bool DoGenerateTrailingData; // 0x25c
	FSolverTrailingFilterSettings TrailingFilterSettings; // 0x260
	bool bHasFloor; // 0x270
	float FloorHeight; // 0x274
	float MassScale; // 0x278
	bool bGenerateContactGraph; // 0x27c
	FChaosDebugSubstepControl ChaosDebugSubstepControl; // 0x27d
	UBillboardComponent* SpriteComponent; // 0x280
	UChaosGameplayEventDispatcher* GameplayEventDispatcherComponent; // 0x2a0
};

struct UKSEmoteCosmeticComponent_Spray : UKSEmoteCosmeticComponent {
	int32_t StatTrackingNumber; // 0x298
};

struct UTexture2DDynamic : UTexture {
	EPixelFormat Format; // 0xc0
};

struct USystemTimeTimecodeProvider : UTimecodeProvider {
	FFrameRate FrameRate; // 0x30
	bool bGenerateFullFrame; // 0x38
	bool bUseHighPerformanceClock; // 0x39
};

struct UKSEditorPropertiesPanel : UKSWidget {
	TArray<UKSHudEditorSettingsInfo*> SettingsInfoList; // 0x520
	UKSHudEditableWidget* SelectedHudEditableWidget; // 0x530
};

struct UAIDataProvider_QueryParams : UAIDataProvider {
	FName ParamName; // 0x28
	float FloatValue; // 0x30
	int32_t IntValue; // 0x34
	bool BoolValue; // 0x38
};

struct UWBP_ChallengeEntry_Weekly_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* background; // 0x240
	UTextBlock* ChallengeDescription; // 0x248
	UTextBlock* ChallengeProgressText; // 0x250
	UTextBlock* CompletedText; // 0x258
	UImage* Header; // 0x260
	UWBP_ProgressEarnedBar_C* ProgressBar; // 0x268
	UWidgetSwitcher* ProgressTextSwitcher; // 0x270
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE; // 0x278
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE_01; // 0x280
	UHorizontalBox* RewardsContainer; // 0x288
	UTextBlock* TimeRemaining_2; // 0x290
	UTextBlock* TimeRemainingLabel; // 0x298
	UHorizontalBox* TimeRemainingWrapper; // 0x2a0
	bool IsComplete; // 0x2a8
};

struct UUniformInteger : UFieldNodeInt {
	int32_t Magnitude; // 0xb0
};

struct UMaterialExpressionSign : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UWBP_StandardButtonInner_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowButton; // 0x528
	UWidgetAnimation* OnClick; // 0x530
	UWidgetAnimation* Highlight; // 0x538
	UImage* BtnBkg; // 0x540
	UImage* BtnBkgHover; // 0x548
	UImage* BtnClickImage; // 0x550
	UImage* BtnEdge; // 0x558
	UImage* BtnEdgeHover; // 0x560
	UImage* BtnFrame; // 0x568
	UImage* BtnFrameHover; // 0x570
	UOverlay* BtnStandardWrapper; // 0x578
	UTextBlock* ButtonText; // 0x580
	UButton* HitTarget; // 0x588
	UOverlay* HoverWrapper; // 0x590
	UWBP_KeyCallout_C* KeyPrompt; // 0x598
	USizeBox* KeyPromptSizeBox; // 0x5a0
	USizeBox* SizeWrapper; // 0x5a8
	FMulticastInlineDelegate OnClicked; // 0x5b0
	FMulticastInlineDelegate OnHovered; // 0x5c0
	FMulticastInlineDelegate OnUnhovered; // 0x5d0
	UAkAudioEvent* ClickStandardBtnInnerSFX; // 0x5e0
	FText DefaultButtonText; // 0x5e8
	float DefaultWidth; // 0x600
	bool ShowPromptOnFocus; // 0x604
	FName GamepadAction; // 0x608
	float DefaultHeight; // 0x610
	UAkAudioEvent* HoverStandardBtnInnerSFX; // 0x618
};

struct UWBP_PurchaseConfirmation_C : UKSPurchaseConfirmationWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UWidgetAnimation* OnShow; // 0x540
	UVerticalBox* ActionButtonContainer; // 0x548
	USizeBox* BattlePassEmblemSizeBox; // 0x550
	UScaleBox* BattlePassEmblemWrapper; // 0x558
	UHorizontalBox* BattlePassTierDecrement; // 0x560
	UHorizontalBox* BattlePassTierIncrement; // 0x568
	UHorizontalBox* BattlePassWidgetWrapper; // 0x570
	UWBP_KSCosmeticItemDisplay_C* BundleItem0; // 0x578
	UWBP_KSCosmeticItemDisplay_C* BundleItem1; // 0x580
	UWBP_KSCosmeticItemDisplay_C* BundleItem2; // 0x588
	UWBP_KSCosmeticItemDisplay_C* BundleItem3; // 0x590
	UWBP_KSCosmeticItemDisplay_C* BundleItem4; // 0x598
	UVerticalBox* BundleItemsWrapper; // 0x5a0
	UWBP_ButtonArrow_C* ButtonArrowNext; // 0x5a8
	UWBP_ButtonArrow_C* ButtonArrowPrev; // 0x5b0
	UTextBlock* CurrencyRequiredLabel; // 0x5b8
	UHorizontalBox* CurrencyRequiredWrapper; // 0x5c0
	UWBP_CurrencySummary_C* CurrencySummary; // 0x5c8
	UWBP_AsyncIcon_C* FullscreenMarketingImage; // 0x5d0
	UCanvasPanel* GamepadScrollContainer; // 0x5d8
	UKSAsyncImage* GamepadScrollLeft; // 0x5e0
	UKSAsyncImage* GamepadScrollRight; // 0x5e8
	UPUMG_AsyncImage* GamepadTierDecrementKey; // 0x5f0
	UPUMG_AsyncImage* GamepadTierIncrementKey; // 0x5f8
	UPUMG_AsyncImage* GampadNextItemDisplay; // 0x600
	UPUMG_AsyncImage* GampadPrevItemDisplay; // 0x608
	UWidgetSwitcher* HeaderTypeSwitcher; // 0x610
	UImage* Image_155; // 0x618
	UOverlay* ItemCountDisplay; // 0x620
	UTextBlock* ItemCountDisplayText; // 0x628
	UTextBlock* ItemDescription; // 0x630
	UKSScrollBox* ItemDescriptionScrollBox; // 0x638
	UWBP_AsyncIcon_C* ItemIcon; // 0x640
	USizeBox* ItemIconHolder; // 0x648
	UWBP_ItemInfoContainer_Centered_C* ItemInfoContainer; // 0x650
	UTextBlock* ItemName; // 0x658
	UOverlay* NextItemContainer; // 0x660
	UWidgetSwitcher* OwnedSwitcher; // 0x668
	UWBP_AsyncIcon_C* PanelSubtitleImage; // 0x670
	USizeBox* PanelSubtitleImageContainer; // 0x678
	UOverlay* PrevItemContainer; // 0x680
	UOverlay* PurchaseBackPanel; // 0x688
	UVerticalBox* PurchaseBackPanelVert; // 0x690
	UCanvasPanel* PurchasingBlocker; // 0x698
	UWBP_ButtonSlot_Cosmetic_C* RarityBorder; // 0x6a0
	UImage* RarityColorBlock; // 0x6a8
	UImage* RarityColorBlock_2; // 0x6b0
	UImage* RarityGradient; // 0x6b8
	URichTextBlock* RarityRichText; // 0x6c0
	UBorder* RefundItems; // 0x6c8
	UTextBlock* RefundQuantity; // 0x6d0
	UHorizontalBox* RefundText; // 0x6d8
	UKSAsyncImage* RequiredCurrencyIcon; // 0x6e0
	UTextBlock* RequiredCurrencyText; // 0x6e8
	UKSAsyncImage* RightThumbstickScrollImage; // 0x6f0
	UWBP_ButtonArrow_C* ScrollLeftButton; // 0x6f8
	UWBP_ButtonArrow_C* ScrollLeftButton_2; // 0x700
	UHorizontalBox* ScrollLeftIndicator; // 0x708
	UWBP_ButtonArrow_C* ScrollRightButton; // 0x710
	UWBP_ButtonArrow_C* ScrollRightButton_2; // 0x718
	UHorizontalBox* ScrollRightIndicator; // 0x720
	UWBP_StandardButtonMedium_C* SlowPurchaseBackButton; // 0x728
	UHorizontalBox* StandardItemHeader; // 0x730
	UTextBlock* TextBlock; // 0x738
	UHorizontalBox* TextHeader; // 0x740
	UTextBlock* TextHeaderText; // 0x748
	UWBP_BattlePassEmblem_C* WBP_BattlePassEmblem; // 0x750
	UWBP_BundleUpsellButton_C* WBP_BundleUpsellButton; // 0x758
	UWBP_CosmeticItemTags_C* WBP_CosmeticItemTags; // 0x760
	UWBP_ItemPreviewStack_C* WBP_ItemPreviewStack; // 0x768
	int32_t CurrentIndex; // 0x770
	TArray<UKSStorePanelItem*> StoreItems; // 0x778
	int32_t ScrollValue; // 0x788
	bool IsPurchasing; // 0x78c
	TArray<UPUMG_StoreItem*> BundleContents; // 0x790
	bool IsBattlePassPurchase; // 0x7a0
	bool IsViewingBundleContents; // 0x7a1
	TArray<UWBP_KSCosmeticItemDisplay_C*> BundleButtons; // 0x7a8
	int32_t BundleButtonScrollIndex; // 0x7b8
	int32_t NAV_GROUP_MAIN; // 0x7bc
	int32_t NAV_GROUP_PURCHASING; // 0x7c0
	UWBP_PurchaseConfirmationButton_C* BundleContentsButton; // 0x7c8
	int32_t BundleHighlightIndex; // 0x7d0
	UAkAudioEvent* ShowPurchaseConfirmSFX; // 0x7d8
	float PurchasingTimeout; // 0x7e0
	TArray<UPUMG_StoreItem*> BattlePassStoreItems; // 0x7e8
	bool IsPostAcquisitionState; // 0x7f8
	AKSJobSelectPrvwActor_RogueScrn* PreviewActor; // 0x800
	UWBP_CurrencySummary_C* CurrencySummary_1; // 0x808
	UKSEquipOnAcquisitionData* EquipData; // 0x810
	UKSStoreItemWithPurchaseData* AdditionalCurrencyPurchaseInfo; // 0x818
	UObject* PreviousItem; // 0x820
	UAkAudioEvent* PurchaseAcquisitionConfirmedSFX; // 0x828
	bool ShowPurchaseQuantity; // 0x830
};

struct UFieldSystemComponent : UPrimitiveComponent {
	UFieldSystem* FieldSystem; // 0x430
	TArray<TSoftObjectPtr<AChaosSolverActor>> SupportedSolvers; // 0x448
};

struct UAnimMontage : UAnimCompositeBase {
	FAlphaBlend BlendIn; // 0xa8
	float BlendInTime; // 0xd8
	FAlphaBlend BlendOut; // 0xe0
	float BlendOutTime; // 0x110
	float BlendOutTriggerTime; // 0x114
	FName SyncGroup; // 0x118
	int32_t SyncSlotIndex; // 0x120
	FMarkerSyncData MarkerData; // 0x128
	TArray<FCompositeSection> CompositeSections; // 0x148
	TArray<FSlotAnimationTrack> SlotAnimTracks; // 0x158
	TArray<FBranchingPoint> BranchingPoints; // 0x168
	bool bEnableRootMotionTranslation; // 0x178
	bool bEnableRootMotionRotation; // 0x179
	bool bEnableAutoBlendOut; // 0x17a
	ERootMotionRootLock RootMotionRootLock; // 0x17b
	TArray<FBranchingPointMarker> BranchingPointMarkers; // 0x180
	TArray<int32_t> BranchingPointStateNotifyIndices; // 0x190
	FTimeStretchCurve TimeStretchCurve; // 0x1a0
	FName TimeStretchCurveName; // 0x1c8
};

struct UWBP_PipProgressWidget_C : UUserWidget {
	UHorizontalBox* PipContainer; // 0x238
	UWBP_PipProgressEntry_C* WBP_PipProgressEntry; // 0x240
	UWBP_PipProgressEntry_C* WBP_PipProgressEntry_2; // 0x248
	FLinearColor BaseColor; // 0x250
	FLinearColor FillColor; // 0x260
};

struct UKSPunishmentRuleComponent : UKSGameRuleComponent {
	UKSPunishmentConfig* PunishmentConfigClass; // 0xb0
	UKSPunishmentConfig* PunishmentConfig; // 0xb8
	bool UseDeserterPenalty; // 0xc0
	TMap<int64_t, FPlayerPunishmentTracker> PlayerPunishmentTrackers; // 0xc8
};

struct UGameInstance : UObject {
	TArray<ULocalPlayer*> LocalPlayers; // 0x38
	UOnlineSession* OnlineSession; // 0x48
	TArray<UObject*> ReferencedObjects; // 0x50
};

struct UInterpTrackInstMove : UInterpTrackInst {
	FVector ResetLocation; // 0x28
	FRotator ResetRotation; // 0x34
};

struct UAnimNotify_PlayNiagaraEffect : UAnimNotify {
	UNiagaraSystem* Template; // 0x38
	FVector LocationOffset; // 0x40
	FRotator RotationOffset; // 0x4c
	FVector Scale; // 0x58
	char Attached : 1; // 0x80
	FName SocketName; // 0x84
};

struct UClothingAssetBase : UObject {
	FString ImportedFilePath; // 0x28
	FGuid AssetGuid; // 0x38
};

struct AKSWeapon : AKSEquipment {
	bool bCanSwapOnFire; // 0x2d8
	bool bCanSwapOnDown; // 0x2d9
	bool bCanSwapOutOnInteraction; // 0x2da
	bool bCanSwapOutWhileAimingDownSights; // 0x2db
	AKSItemDrop* LoadedDropClass; // 0x2f0
	bool bNoWeaponAsset; // 0x300
	TSoftObjectPtr<UKSWeaponAsset> WeaponAssetPtr; // 0x308
	UKSWeaponAsset* WeaponAsset; // 0x330
	uint32_t AutoSwapOutWeaponId; // 0x348
	FAuxiliaryWeaponInfo AuxiliaryWeaponInfo; // 0x350
	TMap<FName, AKSWeapon*> AuxiliaryWeapons; // 0x360
	FMulticastInlineDelegate OnCreatedDeployable; // 0x3b0
	EKSWeaponDestroyReason DestroyReason; // 0x3c0
	AKSCharacter* CharacterOwner; // 0x3c8
	AKSPlayerState* PlayerStateInstigator; // 0x3d0
	bool bUseCompressStateTransmission; // 0x3d8
	EWeaponStateNew WeaponState; // 0x3f0
	EWeaponStateNew LocalWeaponState; // 0x3f1
	float LastStateChangeTimeStamp; // 0x3f4
	TArray<FWeaponStateChangeRequest> PendingStateChangeRequests; // 0x3f8
	uint16_t NextStateRequestId; // 0x40a
	FMulticastInlineDelegate OnWeaponStateChangedDel; // 0x410
	bool bPendingFire; // 0x451
	bool bBotPendingFire; // 0x452
	bool bFireOnce; // 0x453
	int32_t KickbackShotIndex; // 0x454
	float KickbackResetTimeLeft; // 0x458
	int32_t BurstShotIndex; // 0x45c
	float MinCookTimeStamp; // 0x460
	bool bUsingPostFireForgiveness; // 0x464
	float PrefireStartTime; // 0x468
	FKSActionRestrictor FireLockout; // 0x46c
	FMulticastInlineDelegate OnFire; // 0x478
	FMulticastInlineDelegate OnReloadFailed; // 0x488
	float DeathShotForgivenessTime; // 0x498
	bool bTryToReloadEveryTickOnEmpty; // 0x49c
	int32_t CachedReloadSize; // 0x4a0
	int32_t AmmoInClip; // 0x4a4
	int32_t ClipSize; // 0x4a8
	int32_t AmmoConsumedSinceLastReload; // 0x4ac
	FWeaponStateChangeRequest LastReloadRequest; // 0x4b0
	bool bWeaponStartsLoaded; // 0x4c0
	EReloadReplicationFlags ReloadReplicationFlags; // 0x4c1
	FMulticastInlineDelegate OnExhaustedDel; // 0x4c8
	bool bShouldResumeReload; // 0x4d8
	bool bFirstReload; // 0x4d9
	FMulticastInlineDelegate OnAmmoChangedDel; // 0x4e0
	FMulticastInlineDelegate OnAmmoInClipConsumed; // 0x508
	UDamageType* LoadedDamageTypeClass; // 0x520
	FMulticastInlineDelegate OnHiddenInteractableUpdate; // 0x528
	AActor* CachedHiddenInteractable; // 0x538
	float NextExpectedTimerEndTime; // 0x558
	FTimerHandle ActiveTimer; // 0x560
	bool bCanEverInterruptSprinting; // 0x568
	float SprintRecoveryRemaining; // 0x56c
	bool bReleasedFireInSprintRecovery; // 0x570
	bool bDodgeRollInterruptedReload; // 0x571
	bool bSprintCanInterruptReload; // 0x572
	bool bDodgeRollCanInterruptReload; // 0x573
	float DodgeRollRecoveryRemaining; // 0x574
	bool bInLockon; // 0x590
	float LockonProgress; // 0x594
	float LockonDuration; // 0x598
	FRotator LockonStartRotation; // 0x59c
	FRotator LockonEndRotation; // 0x5a8
	FRandomStream WeaponRandomStream; // 0x60c
	UKSAimLockData* AimAssistLockData; // 0x668
	UKSAimSnapData* AimAssistSnapData; // 0x670
	bool bRequireInputForAimAssistLock; // 0x678
	UCurveVector* AimAssistLockCurve; // 0x680
	UCurveFloat* AimAssistLockDistanceCurve; // 0x688
	bool bRequireInputForHipAimAssistLock; // 0x690
	UCurveVector* HipAimAssistLockCurve; // 0x698
	UCurveFloat* HipAimAssistLockDistanceCurve; // 0x6a0
	UCurveVector* AimAssistSnapCurve; // 0x6a8
};

struct AExponentialHeightFog : AInfo {
	UExponentialHeightFogComponent* Component; // 0x220
	char bEnabled : 1; // 0x228
};

struct AKSWeapon_Zipline : AKSWeapon_Aimed {
	FMulticastInlineDelegate OnEndPointUpdated; // 0x800
	AKSZipLine* ZipLineClass; // 0x810
	AKSZipLine* Zipline; // 0x818
	ETraceTypeQuery PreviewTraceChannel; // 0x820
	float MaxRange; // 0x824
	float MinRange; // 0x828
	float ProjectileSpeed; // 0x82c
};

struct UDynamicEntryBox : UDynamicEntryBoxBase {
	UUserWidget* EntryWidgetClass; // 0x1d0
};

struct UKSSettingsInfo_Binding : UKSSettingsInfoBase {
	FKSKeyBindInfo PrimaryKeyBindInfo; // 0x108
	FKSKeyBindInfo GamepadKeyBindInfo; // 0x118
};

struct UKSSettingsContainerConfigAsset : UDataAsset {
	bool bIsAvailableOffline; // 0x30
	bool bRequires120HzDisplay; // 0x31
	FKSAllowedPlatformTypes AllowedPlatformTypes; // 0x32
	FKSRequiredInputTypes RequiredInputTypes; // 0x3c
	FString RequiredExperiment; // 0x40
	FKSSwitchDockedModeSetting SwitchDockedModeSetting; // 0x50
	bool bUsePreview; // 0x52
	UKSSettingsPreview* PreviewWidget; // 0x58
	TArray<FKSSettingsWidgetConfig> WidgetConfigs; // 0x60
	FText SettingName; // 0x70
	TMap<FString, FText> SettingNameByPlatform; // 0x88
	FText SettingDescription; // 0xd8
	TMap<FString, FText> SettingDescriptionByPlatform; // 0xf0
};

struct URadialFalloff : UFieldNodeFloat {
	float Magnitude; // 0xb0
	float MinRange; // 0xb4
	float MaxRange; // 0xb8
	float Default; // 0xbc
	float Radius; // 0xc0
	FVector Position; // 0xc4
	EFieldFalloffType Falloff; // 0xd0
};

struct UMaterialExpressionLogarithm2 : UMaterialExpression {
	FExpressionInput X; // 0x40
};

struct UWBP_LaunchCinematic_C : UKSMediaPlayerWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x558
	UWidgetAnimation* FadeOutThrobber; // 0x560
	UWidgetAnimation* FadeInThrobber; // 0x568
	UWidgetAnimation* FadeOutMediaTexture; // 0x570
	UWidgetAnimation* FadeInMediaTexture; // 0x578
	UImage* CinematicMediaTexture; // 0x580
	UGamepadPromptBasic_C* GamepadPromptBasic; // 0x588
	UButton* HitTarget; // 0x590
	UWBP_ThrobberShield_C* WBP_ThrobberShield; // 0x598
	UMediaPlayer* MediaPlayer; // 0x5a0
	FText Msg_SkipPrompt; // 0x5a8
	UAkAudioEvent* AudioStartEvent; // 0x5c0
	UAkAudioEvent* AudioStopEvent; // 0x5c8
	FName LocalActionName; // 0x5d0
	TArray<FKey> SkipKeys; // 0x5d8
};

struct UWBP_StandardButton_02_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnClick; // 0x528
	UWidgetAnimation* Highlight; // 0x530
	UImage* BackgroundImage; // 0x538
	UTextBlock* ButtonText; // 0x540
	UImage* Click; // 0x548
	UImage* Image_1; // 0x550
	UButton* LoadoutButton; // 0x558
	USizeBox* TextSizeWrapper; // 0x560
	FMulticastInlineDelegate OnClicked; // 0x568
	FMulticastInlineDelegate OnHovered; // 0x578
	FMulticastInlineDelegate OnUnhovered; // 0x588
	UAkAudioEvent* ClickStandardButton_02SFX; // 0x598
	FText DefaultButtonText; // 0x5a0
	float DefaultWidth; // 0x5b8
	UAkAudioEvent* HoverStandardButton_02SFX; // 0x5c0
	E_ButtonFontStyle ButtonFontStyle; // 0x5c8
};

struct UWBP_ModalPopupContainer_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UButton* CloseButton; // 0x528
	UImage* Image_53; // 0x530
	UImage* Image_197; // 0x538
	UNamedSlot* PopupContent; // 0x540
	bool useCloseButton; // 0x548
	FMulticastInlineDelegate CloseButtonClicked; // 0x550
	UAkAudioEvent* ClickCloseBtnModalPopupContainerSFX; // 0x560
	UAkAudioEvent* HoverCloseBtnModalPopupContainerSFX; // 0x568
};

struct UWBP_ButtonArrow_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* hoveranim; // 0x528
	UImage* background; // 0x530
	UImage* Highlight; // 0x538
	UButton* HitTarget; // 0x540
	FMulticastInlineDelegate OnBtnClicked; // 0x548
	FMulticastInlineDelegate OnBtnHovered; // 0x558
	FMulticastInlineDelegate OnBtnUnhovered; // 0x568
	bool bIsDisable; // 0x578
	bool bIsActive; // 0x579
};

struct UGridPathFollowingComponent : UPathFollowingComponent {
	UNavLocalGridManager* GridManager; // 0x258
};

struct USkeletalMeshLODSettings : UDataAsset {
	FPerPlatformInt MinLOD; // 0x30
	FPerPlatformInt MaxLod; // 0x34
	FPerPlatformBool DisableBelowMinLodStripping; // 0x38
	FPerPlatformBool bSupportLODStreaming; // 0x39
	FPerPlatformInt MaxNumStreamedLODs; // 0x3c
	FPerPlatformInt MaxNumOptionalLODs; // 0x40
	TArray<FSkeletalMeshLODGroupSettings> LODGroups; // 0x48
	char bOverrideWillNeverMergeMesh : 1; // 0x58
	char bWillNeverMergeMesh : 1; // 0x58
};

struct UWBP_RogueDetailsNew_C : UKSRogueDetailsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x5a8
	UWidgetAnimation* AnimNameLoop; // 0x5b0
	UWidgetAnimation* AnimEnableBlur; // 0x5b8
	UWidgetAnimation* AnimShowPanel; // 0x5c0
	UWBP_RogueDetailsPanelButton_C* ArmoryButton; // 0x5c8
	UWBP_RogueArmoryPanel_C* ArmoryPanel; // 0x5d0
	UWBP_RogueDetailsPanelButton_C* BioButton; // 0x5d8
	UWBP_RogueBioPanel_C* BioPanel; // 0x5e0
	UBackgroundBlur* BlurPanel; // 0x5e8
	UImage* BorderBackground; // 0x5f0
	UWBP_RogueDetailsPanelButton_C* CustomizeButton; // 0x5f8
	UWBP_RogueCustomizationPanel_C* CustomizePanel; // 0x600
	UWidgetSwitcher* DetailPanels; // 0x608
	UWBP_RogueDetailsPanelButton_C* MasteryButton; // 0x610
	UWBP_RogueMasteryPanel_C* MasteryPanel; // 0x618
	UWBP_RogueDetailsPanelButton_C* PerksButton; // 0x620
	UWBP_RoguePerksPanel_C* PerksPanel; // 0x628
	UWBP_RoguePrimaryWeaponSelectPanel_C* PrimarySelectPanel; // 0x630
	UWBP_RogueMasteryPortrait_C* RogueIcon; // 0x638
	UTextBlock* RogueName; // 0x640
	UTextBlock* RogueName_Shadow; // 0x648
	TArray<UWBP_RogueDetailsPanelButton_C*> TabButtons; // 0x650
	UWBP_RogueDetailsPanelButton_C* SelectedTab; // 0x660
	FName ActionArmorySeen; // 0x668
	FName ActionSwapClicked; // 0x670
};

struct UKSBTTask_CopyObjectFacingVector : UBTTaskNode {
	FBlackboardKeySelector CopyTarget; // 0x70
	FBlackboardKeySelector FacingVector; // 0x98
};

struct UKSQueuesSettingsDefault : UObject {
	TArray<FKSQueueRow> QueueConfigRow; // 0x28
	TArray<FKSMapListRow> MapListBaseConfigRow; // 0x88
	TArray<FKSMapRow> MapBaseConfigRow; // 0xe8
	TArray<FKSBonusProgressionRow> BonusProgressionBaseConfigRow; // 0x148
	TArray<FKSSurrenderRow> SurrenderBaseConfigRow; // 0x1a8
	TArray<FKSQueueGroupRow> QueueGroupBaseConfigRow; // 0x208
	TArray<FKSRankedProgressionRow> RankedProgressionBaseConfigRow; // 0x268
	TArray<FKSLimitedTimeEventRow> LimitedTimeEventBaseConfigRow; // 0x2c8
	TArray<FKSRankedSeasonRow> RankedSeasonBaseConfigRow; // 0x328
	TArray<FString> ActiveLimitedTimeEventNames; // 0x388
	FString ActiveRankedSeasonKey; // 0x398
	TArray<FKSQueueSectionSort> QueueSectionSortConfigRow; // 0x3a8
	TArray<FKSQueuePlatformFilter> QueuePlatformFilter; // 0x3b8
};

struct UAnimNotify_SkinnedAkEvent : UAnimNotify {
	FName AttachName; // 0x38
	UAkAudioEvent* Event; // 0x40
	bool bFollow; // 0x48
	FString EventName; // 0x50
	FName SkinKeyword; // 0x60
};

struct UWBP_Graphic_Button_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* hoveranim; // 0x528
	UImage* Active; // 0x530
	UImage* button_base; // 0x538
	UNamedSlot* ButtonContent; // 0x540
	UButton* HitTarget; // 0x548
	UImage* Hover; // 0x550
	FMulticastInlineDelegate OnGraphicBtnClicked; // 0x558
	FMulticastInlineDelegate OnGraphicBtnHovered; // 0x568
	FMulticastInlineDelegate OnGraphicBtnUnhovered; // 0x578
	UTexture2D* NormalButtonImage; // 0x588
	FLinearColor NormalButtonTint; // 0x590
	UTexture2D* HoverButtonImage; // 0x5a0
	FLinearColor HoverButtonTint; // 0x5a8
	bool bIsDisable; // 0x5b8
	bool bIsActive; // 0x5b9
	UAkAudioEvent* ClickGraphicBtnSFX; // 0x5c0
	UAkAudioEvent* HoverGraphicBtnSFX; // 0x5c8
};

struct UBoneMaskFilter : UObject {
	TArray<FInputBlendPose> BlendPoses; // 0x28
};

struct AKSMapDifficultyManager : AActor {
	bool AppliesToNPEMatches; // 0x220
	TArray<UKSBTDifficulty*> Difficulties; // 0x228
	TMap<int32_t, int32_t> InitialTeamDifficulties; // 0x238
	int32_t MinDifficultyWhenDefeated; // 0x288
	TArray<AGameModeBase*> ApplicableGameModes; // 0x290
	TArray<float> WinLossRatioAdjustEasier; // 0x2a0
	TArray<float> WinLossRatioAdjustHarder; // 0x2b0
	bool AllowAdjustmentAtStartOfRound; // 0x2c0
	bool AllowAdjustmentForDeaths; // 0x2c1
	int32_t DeathsPerAdjustmentCalculation; // 0x2c4
	bool AllowAdjustmentForTeamDeaths; // 0x2c8
	int32_t TeamDeathsPerAdjustmentCalculation; // 0x2cc
	bool AllowAdjustmentForObjectivesClaimed; // 0x2d0
	int32_t ObjectivesPerAdjustmentCalculation; // 0x2d4
	bool AllowAdjustmentForTimeElapsed; // 0x2d8
	int32_t SecondsPerAdjustmentCalculation; // 0x2dc
	TArray<float> KillDeathRatioAdjustEasier; // 0x2e0
	TArray<float> KillDeathRatioAdjustHarder; // 0x2f0
	TArray<float> RoundWinPercentAdjustEasier; // 0x300
	TArray<float> RoundWinPercentAdjustHarder; // 0x310
};

struct UBasePoolComponent : UActorComponent {
	int32_t MaxPoolSize; // 0xb0
	int32_t StartingPoolSize; // 0xb4
	FString ComponentClassName; // 0xb8
	EPoolOverflowHandling OverflowType; // 0xc8
};

struct UTrendedKick_C : UKickbackModule {
	TArray<FKickTrendProfile> KickTrendProfiles; // 0x28
	int32_t TrendRepeatIndex; // 0x38
};

struct UWBP_RogueMasteryPanel_C : UKSRogueMasteryWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* RefreshRewardList; // 0x528
	UWidgetAnimation* RefreshPreview; // 0x530
	UTextBlock* FinalPrestigeText; // 0x538
	UWBP_ItemPreviewStack_C* ItemPreviewStack; // 0x540
	UWBP_RogueMasteryPortrait_C* MasteryPortraitPreview; // 0x548
	UWBP_RogueMasteryPanelTrack_C* MasteryTrack; // 0x550
	UWidgetSwitcher* RewardDisplaySwitcher; // 0x558
	UVerticalBox* RewardItemList; // 0x560
	UWBP_RoguePanelHeader_C* WBP_RoguePanelHeader; // 0x568
	TArray<UWBP_ListButton_Cosmetic_C*> RewardItems; // 0x570
	int32_t CurrentMasteryLevel; // 0x580
	int32_t CurrentMasteryXP; // 0x584
	int32_t MaxRegularLevel; // 0x588
	FMasteryRewardData PreviewedReward; // 0x590
	UKSActivityInstance* MercMasteryActivityInstance; // 0x5a0
	UKSJobItem* JobItem; // 0x5a8
	int32_t MyFocusGroup; // 0x5b0
	UKSWidget* NavParent; // 0x5b8
	bool HasGamepadFocus; // 0x5c0
	UWidget* SelectedReward; // 0x5c8
	FMulticastInlineDelegate OnNavLeftFailed; // 0x5d0
};

struct UKickbackModuleRandom : UKickbackModule {
	float MinAmplitude; // 0x28
	float MaxAmplitude; // 0x2c
	float MinDuration; // 0x30
	float MaxDuration; // 0x34
	float MaxOffsetFromVertical; // 0x38
};

struct UKSBTD_IsGameMode : UBTDecorator {
	AGameModeBase* GameModeClass; // 0x68
};

struct USourceEffectMidSideSpreaderPreset : USoundEffectSourcePreset {
	FSourceEffectMidSideSpreaderSettings Settings; // 0x74
};

struct UDatasmithSkyLightComponentTemplate : UDatasmithObjectTemplate {
	ESkyLightSourceType SourceType; // 0x30
	int32_t CubemapResolution; // 0x34
	UTextureCube* Cubemap; // 0x38
};

struct UBTTask_WaitBlackboardTime : UBTTask_Wait {
	FBlackboardKeySelector BlackboardKey; // 0x78
};

struct UKSBTTask_FindGrenadeTarget_SimpleCover : UKSBTTask_FindGrenadeTarget {
	float FloorHeightFudgeFactor; // 0x118
	float FullCoverOffsetDistance; // 0x11c
	float MediumCoverHeightOffset; // 0x120
	float MediumCoverHeightOffsetCrouched; // 0x124
};

struct UInteractiveToolsContext : UObject {
	UInputRouter* InputRouter; // 0x58
	UInteractiveToolManager* ToolManager; // 0x60
	UInteractiveGizmoManager* GizmoManager; // 0x68
	TSoftClassPtr<UObject> ToolManagerClass; // 0x70
};

struct UKSSortableGridPanel : UGridPanel {
	EOrientation Orientation; // 0x158
	FDelegate OnSortCompareChildrenEvent; // 0x15c
};

struct UWBP_TextChat_Input_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* background; // 0x528
	UBackgroundBlur* Blur; // 0x530
	UButton* Button_200; // 0x538
	UOverlay* ChannelOverlay; // 0x540
	UTextBlock* ChannelText; // 0x548
	UImage* GamepadFocus; // 0x550
	UHorizontalBox* HorizontalLayout; // 0x558
	UKSEditableTextBox* Input; // 0x560
	UButton* OpenChatButton; // 0x568
	UCanvasPanel* ParentPanel; // 0x570
	USizeBox* PromptContainer; // 0x578
	UWBP_ControllerPrompt_C* PromptIcon; // 0x580
	UTextBlock* PromptText; // 0x588
	FMulticastInlineDelegate OnTabPressed; // 0x590
	FMulticastInlineDelegate OnCancelPressed; // 0x5a0
	FMulticastInlineDelegate OnLeftPressed; // 0x5b0
	FMulticastInlineDelegate OnRightPressed; // 0x5c0
	FMulticastInlineDelegate OnUpPressed; // 0x5d0
	FMulticastInlineDelegate OnDownPressed; // 0x5e0
	UWBP_TextChat_C* TextChatWidget; // 0x5f0
	bool IsEngaged; // 0x5f8
	FText PreviousText; // 0x600
	bool IsPromptActive; // 0x618
};

struct UMaterialExpressionPanner : UMaterialExpression {
	FExpressionInput Coordinate; // 0x40
	FExpressionInput Time; // 0x54
	FExpressionInput Speed; // 0x68
	float SpeedX; // 0x7c
	float SpeedY; // 0x80
	uint32_t ConstCoordinate; // 0x84
	bool bFractionalPart; // 0x88
};

struct UNiagaraParameterCollection : UObject {
	FName Namespace; // 0x28
	TArray<FNiagaraVariable> Parameters; // 0x30
	UNiagaraParameterCollectionInstance* DefaultInstance; // 0x40
	FGuid CompileId; // 0x48
};

struct UMaterialExpressionFresnel : UMaterialExpression {
	FExpressionInput ExponentIn; // 0x40
	float Exponent; // 0x54
	FExpressionInput BaseReflectFractionIn; // 0x58
	float BaseReflectFraction; // 0x6c
	FExpressionInput Normal; // 0x70
};

struct UMaterialExpressionTextureSampleParameter : UMaterialExpressionTextureSample {
	FName ParameterName; // 0xd0
	FGuid ExpressionGUID; // 0xd8
	FName Group; // 0xe8
};

struct UKSBTD_CompareBetweenBlackboards : UBTDecorator {
	FBlackboardKeySelector SourceBlackboardActor; // 0x68
	FBlackboardKeySelector SourceKey; // 0x90
	FBlackboardKeySelector TargetBlackboardActor; // 0xb8
	FBlackboardKeySelector TargetKey; // 0xe0
};

struct UAnimCompress_RemoveLinearKeys : UAnimCompress {
	float MaxPosDiff; // 0x40
	float MaxAngleDiff; // 0x44
	float MaxScaleDiff; // 0x48
	float MaxEffectorDiff; // 0x4c
	float MinEffectorDiff; // 0x50
	float EffectorDiffSocket; // 0x54
	float ParentKeyScale; // 0x58
	char bRetarget : 1; // 0x5c
	char bActuallyFilterLinearKeys : 1; // 0x5c
};

struct URichTextBlock : UTextLayoutWidget {
	FText Text; // 0x130
	UDataTable* TextStyleSet; // 0x148
	TArray<URichTextBlockDecorator*> DecoratorClasses; // 0x150
	bool bOverrideDefaultStyle; // 0x160
	FTextBlockStyle DefaultTextStyleOverride; // 0x168
	float MinDesiredWidth; // 0x3d0
	TArray<URichTextBlockDecorator*> InstanceDecorators; // 0x640
};

struct AKSVehicle_Remote : AKSVehicle {
	AKSCharacter* OwningCharacter; // 0x620
	FVector JumpVector; // 0x628
	FVector JumpGroundTraceVector; // 0x634
	float JumpCooldown; // 0x640
	float TotalBatteryDuration; // 0x650
	float UpdateReplicatedBatteryTimerPeriod; // 0x654
	FPGame_ReplicatedTimer ReplicatedBatteryTimer; // 0x668
	float RevealHoldDuration; // 0x6a0
	float RevealConeAngle; // 0x6a4
	float RevealMaxDistance; // 0x6a8
	float RevealEffectDuration; // 0x6ac
};

struct UDeviceProfile : UTextureLODSettings {
	FString DeviceType; // 0x38
	FString BaseProfileName; // 0x48
	UObject* Parent; // 0x58
	TArray<FString> CVars; // 0x78
};

struct ANavigationData : AActor {
	UPrimitiveComponent* RenderingComp; // 0x228
	FNavDataConfig NavDataConfig; // 0x230
	char bEnableDrawing : 1; // 0x2a8
	char bForceRebuildOnLoad : 1; // 0x2a8
	char bAutoDestroyWhenNoNavigation : 1; // 0x2a8
	char bCanBeMainNavData : 1; // 0x2a8
	char bCanSpawnOnRebuild : 1; // 0x2a8
	char bRebuildAtRuntime : 1; // 0x2a8
	ERuntimeGenerationType RuntimeGeneration; // 0x2ac
	float ObservedPathsTickInterval; // 0x2b0
	uint32_t DataVersion; // 0x2b4
	TArray<FSupportedAreaData> SupportedAreas; // 0x398
};

struct UTestMovieSceneSequence : UMovieSceneSequence {
	UMovieScene* MovieScene; // 0x348
};

struct UDatasmithSceneComponentTemplate : UDatasmithObjectTemplate {
	FTransform RelativeTransform; // 0x30
	EComponentMobility Mobility; // 0x60
	TSoftObjectPtr<USceneComponent> AttachParent; // 0x68
	TSet<FName> Tags; // 0x90
};

struct UComboBoxString : UWidget {
	TArray<FString> DefaultOptions; // 0x110
	FString SelectedOption; // 0x120
	FComboBoxStyle WidgetStyle; // 0x130
	FTableRowStyle ItemStyle; // 0x520
	FMargin ContentPadding; // 0xce8
	float MaxListHeight; // 0xcf8
	bool HasDownArrow; // 0xcfc
	bool EnableGamepadNavigationMode; // 0xcfd
	FSlateFontInfo Font; // 0xd00
	FSlateColor ForegroundColor; // 0xd50
	bool bIsFocusable; // 0xd78
	FDelegate OnGenerateWidgetEvent; // 0xd7c
	FMulticastInlineDelegate OnSelectionChanged; // 0xd90
	FMulticastInlineDelegate OnOpening; // 0xda0
	FMulticastInlineDelegate OnClosing; // 0xdb0
};

struct ANavigationTestingActor : AActor {
	UCapsuleComponent* CapsuleComponent; // 0x230
	UNavigationInvokerComponent* InvokerComponent; // 0x238
	char bActAsNavigationInvoker : 1; // 0x240
	FNavAgentProperties NavAgentProps; // 0x248
	FVector QueryingExtent; // 0x278
	ANavigationData* MyNavData; // 0x288
	FVector ProjectedLocation; // 0x290
	char bProjectedLocationValid : 1; // 0x29c
	char bSearchStart : 1; // 0x29c
	float CostLimitFactor; // 0x2a0
	float MinimumCostLimit; // 0x2a4
	char bBacktracking : 1; // 0x2a8
	char bUseHierarchicalPathfinding : 1; // 0x2a8
	char bGatherDetailedInfo : 1; // 0x2a8
	char bDrawDistanceToWall : 1; // 0x2a8
	char bShowNodePool : 1; // 0x2a8
	char bShowBestPath : 1; // 0x2a8
	char bShowDiffWithPreviousStep : 1; // 0x2a8
	char bShouldBeVisibleInGame : 1; // 0x2a8
	ENavCostDisplay CostDisplayMode; // 0x2ac
	FVector2D TextCanvasOffset; // 0x2b0
	char bPathExist : 1; // 0x2b8
	char bPathIsPartial : 1; // 0x2b8
	char bPathSearchOutOfNodes : 1; // 0x2b8
	float PathfindingTime; // 0x2bc
	float PathCost; // 0x2c0
	int32_t PathfindingSteps; // 0x2c4
	ANavigationTestingActor* OtherActor; // 0x2c8
	UNavigationQueryFilter* FilterClass; // 0x2d0
	int32_t ShowStepIndex; // 0x2d8
	float OffsetFromCornersDistance; // 0x2dc
};

struct UKSTreeView : UTreeView {
	TWeakObjectPtr<APUMG_HUD> MyHud; // 0x3d8
};

struct UCamMod_Mantle_C : UCamMod_Master_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x68
	int32_t MantleIndex; // 0x70
};

struct UAsyncActionChangePrimaryAssetBundles : UAsyncActionLoadPrimaryAssetBase {
	FMulticastInlineDelegate Completed; // 0x78
};

struct UKSPlayerMod_MainCameraFov : UKSPlayerMod {
	float FieldOfViewOverride; // 0x330
	float SprintFovOverride; // 0x334
	float CameraBoomLengthBonus; // 0x338
	float SprintCameraBoomLengthBonus; // 0x33c
	TSoftClassPtr<UObject> SprintCameraShakeOverride; // 0x340
};

struct UKSAimAssistDataBase : UDataAsset {
	EControllerInputType JoyConFallback; // 0x30
	EControllerInputType JoyConADSFallback; // 0x31
	EControllerInputType TouchFallback; // 0x32
	EControllerInputType TouchADSFallback; // 0x33
	EControllerInputType PCGamepadADSFallback; // 0x34
};

struct UKSBorder : UKSItem {
	TSoftObjectPtr<UTexture2D> SmallBorderIcon; // 0x250
	UIconInfo* SmallBorderIconInfo; // 0x278
	TSoftObjectPtr<UTexture2D> LargeBorderIcon; // 0x280
	UIconInfo* LargeBorderIconInfo; // 0x2a8
};

struct AKSRevealManager : AActor {
	FMulticastInlineDelegate OnServerRevealAdded; // 0x220
	FLinearColor FriendlyColor; // 0x230
	FLinearColor EnemyColor; // 0x240
	FLinearColor NeutralColor; // 0x250
	FLinearColor FriendlyObjectiveColor; // 0x260
	FLinearColor EnemyObjectiveColor; // 0x270
	FLinearColor NeutralObjectiveColor; // 0x280
	AKSGameState* GameStateRef; // 0x290
	FKSRevealInfoSerializerContainer ActiveRevealInfoContainer; // 0x298
	TArray<FKSRevealInfo> LocalActiveRevealInfos; // 0x3b8
};

struct UChaosPhysicalMaterial : UObject {
	float Friction; // 0x28
	float StaticFriction; // 0x2c
	float Restitution; // 0x30
	float LinearEtherDrag; // 0x34
	float AngularEtherDrag; // 0x38
	float SleepingLinearVelocityThreshold; // 0x3c
	float SleepingAngularVelocityThreshold; // 0x40
};

struct UWBP_Challenge_Renderer_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowHover; // 0x528
	UWidgetAnimation* rotating_arrows; // 0x530
	UImage* btnStroke1px; // 0x538
	UTextBlock* ChallengeDescription; // 0x540
	UWidgetSwitcher* ChallengeDisplayMode; // 0x548
	UTextBlock* ChallengeProgress; // 0x550
	UImage* CheckMark; // 0x558
	UButton* HitTarget; // 0x560
	UButton* HoverButton; // 0x568
	UWBP_ProgressBar_C* ProgressBar; // 0x570
	UImage* RerollArrows; // 0x578
	UButton* RerollButton; // 0x580
	UCanvasPanel* RerollIndicator; // 0x588
	UWidgetSwitcher* RewardImageSwitcher; // 0x590
	UKSAsyncImage* RewardImageWithoutQty; // 0x598
	UKSAsyncImage* RewardImageWithQty; // 0x5a0
	UTextBlock* RewardQty; // 0x5a8
	UImage* SelectionFrame; // 0x5b0
	UImage* Stroke1px_2; // 0x5b8
	UKSActivityInstance* ChallengeActivityInstance; // 0x5c0
	FMulticastInlineDelegate DisplayRerollPrompt; // 0x5c8
	UAkAudioEvent* HoverChallegeRendererSFX; // 0x5d8
	UAkAudioEvent* ClickRefreshChallegeRendererSFX; // 0x5e0
};

struct APhysicsConstraintActor : ARigidBodyBase {
	UPhysicsConstraintComponent* ConstraintComp; // 0x220
	AActor* ConstraintActor1; // 0x228
	AActor* ConstraintActor2; // 0x230
	char bDisableCollision : 1; // 0x238
};

struct UKSActivityRequirement_Event : UKSActivityRequirement {
	FString RequiredEventName; // 0x30
};

struct UKSMatchResult : UKSWidget {
	float FinalResultEndTime; // 0x52c
	FRoundResultAnnoucement RoundResultAnnoucement; // 0x530
	int32_t pTeamNum; // 0x550
	int32_t pOpposeTeamNum; // 0x554
	int32_t pTeamScore; // 0x558
	int32_t pOpposeTeamScore; // 0x55c
	bool bIsEndOfMatch; // 0x560
	bool bMatchEndedInSurrender; // 0x561
};

struct ULoggedInProcessRewards_C : UKSLoginProcessRewards {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* background; // 0x528
	UWBP_EpilepsyWarning_C* WBP_EpilepsyWarning; // 0x530
	UWBP_ThrobberShield_C* WBP_ThrobberShield; // 0x538
};

struct UMaterialExpressionSubtract : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	float ConstA; // 0x68
	float ConstB; // 0x6c
};

struct UWBP_ProgressionCardSlot_PlayerXP_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* LevelUpAnim; // 0x240
	UTextBlock* Category; // 0x248
	UTextBlock* PlayerLevelText; // 0x250
	UTextBlock* PointsEarned; // 0x258
	UWBP_ProgressionTally_C* ProgressionTally; // 0x260
	UImage* TextGlow01; // 0x268
	UWBP_ProgressEarnedBar_C* XPProgressEarnedBar; // 0x270
	FPlayerProgression PlayerProgress; // 0x278
	FMulticastInlineDelegate OnPlayerLevelUp; // 0x3e8
	bool ShouldShowXPBar; // 0x3f8
};

struct AReflectionCapture : AActor {
	UReflectionCaptureComponent* CaptureComponent; // 0x220
};

struct AStaticMeshActor : AActor {
	UStaticMeshComponent* StaticMeshComponent; // 0x220
	bool bStaticMeshReplicateMovement; // 0x228
	ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x229
};

struct UKSPlayerInfo : UPUMG_PlayerInfo {
	FMulticastInlineDelegate OnPlayerStatusChanged; // 0x80
};

struct UParticleModuleSizeScaleByTime : UParticleModuleSizeBase {
	FRawDistributionVector SizeScaleByTime; // 0x30
	char bEnableX : 1; // 0x78
	char bEnableY : 1; // 0x78
	char bEnableZ : 1; // 0x78
};

struct UBlendSpace1D : UBlendSpaceBase {
	bool bScaleAnimation; // 0x148
};

struct UBTTask_BlueprintBase : UBTTaskNode {
	AAIController* AIOwner; // 0x70
	AActor* ActorOwner; // 0x78
	FIntervalCountdown TickInterval; // 0x80
	char bShowPropertyDetails : 1; // 0xa0
};

struct UKSGamepadCurvedLookSpeedManager : UKSGamepadLookSpeedManager {
	bool bUseBaseVelocity; // 0x30
	UCurveVector* LookBaseVelocityCurve; // 0x38
	FVector2D BoostThreshold; // 0x40
	FVector2D BoostMultiplier; // 0x48
	float BoostAcceleration; // 0x50
	UCurveVector* MouseLookMaxVelocityCurve; // 0x58
	UCurveVector* MouseLookMaxVelocityADSCurve; // 0x60
	float TurnRateMultiplier; // 0x68
	float LookUpRateMultiplier; // 0x6c
	UCurveVector* MouseLookAccelerationCurve; // 0x70
	UCurveVector* MouseLookAccelerationADSCurve; // 0x78
	TMap<FName, UCurveVector*> TestBaseVelocityCurves; // 0x80
	FVector2D LastRotationVelocityScale; // 0xd0
	FVector2D PrevInput; // 0xd8
	FVector2D CurrentTurnSpeed; // 0xe0
};

struct UKSMVPDeterminant : UDataAsset {
	TArray<EPlayerStatType> TopStats; // 0x30
	TMap<EPlayerStatType, float> StatToWeightMap; // 0x40
};

struct AKSProjectile_Melee : AKSProjectile {
	UDamageType* ProjectileDamageType; // 0x950
	TArray<AActor*> HitActors; // 0x958
};

struct UWBP_PlayerProfileScreen_StatEntry_C : UUserWidget {
	UImage* Image_498; // 0x238
	UWBP_AsyncIcon_C* ImgIcon; // 0x240
	UTextBlock* TxtName; // 0x248
	UTextBlock* TxtValue; // 0x250
	UKSActivityInstance* ActivityInstance; // 0x258
};

struct ADatasmithImportedSequencesActor : AActor {
	TArray<ULevelSequence*> ImportedSequences; // 0x220
};

struct UWBP_HorizontalRule_Bottom_C : UUserWidget {
	UImage* Image_148; // 0x238
};

struct AKSSpreadProjectile : AKSLagCompensatedActor {
	USceneComponent* CollisionComponent; // 0x260
	UProjectileMovementComponent* ProjectileMovementComponent; // 0x268
};

struct UAISenseEvent_Damage : UAISenseEvent {
	FAIDamageEvent Event; // 0x28
};

struct UWBP_RankedIcon_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWBP_AsyncIcon_C* RankedIcon; // 0x240
	URichTextBlock* RankedLabel; // 0x248
	UScaleBox* RankedLabelWrapper; // 0x250
	UTextBlock* RankedLevel; // 0x258
	bool bDisplayRankName; // 0x260
	bool bHideRankLevel; // 0x261
	FMulticastInlineDelegate OnRankTierSet; // 0x268
};

struct AKSLobbyHUDNew : AKSHUDCommon {
	FMulticastInlineDelegate OnMinuteTimerUpdate; // 0x628
	UKSQueueDataFactory* QueueDataFactory; // 0x648
	UKSFriendDataFactory* FriendDataFactory; // 0x650
	UKSPlayerQueryDataFactory* PlayerQueryDataFactory; // 0x658
	UKSEMODataFactory* EMODataFactory; // 0x660
	UKSPlayerWhoDataFactory* PlayerWhoDataFactory; // 0x668
	TWeakObjectPtr<UKSMediaPlayerWidget> CurrentMediaPlayerWidget; // 0x670
	FMulticastInlineDelegate OnTriggerBlockerChange; // 0x680
	FMulticastInlineDelegate LobbyWidgetReady; // 0x690
	float LoadingScreenFadeInDelay; // 0x6a4
	float LoadingScreenFadeInDuration; // 0x6a8
};

struct UWBP_WeaponHubStatsEntry_C : UKSWidget {
	UWBP_ItemInfoPanel_StatBar_C* StatBar; // 0x520
};

struct UCameraAnimInst : UObject {
	UCameraAnim* CamAnim; // 0x28
	UInterpGroupInst* InterpGroupInst; // 0x30
	float PlayRate; // 0x50
	UInterpTrackMove* MoveTrack; // 0x68
	UInterpTrackInstMove* MoveInst; // 0x70
	ECameraAnimPlaySpace PlaySpace; // 0x78
};

struct UPlatformInventoryItem : UPrimaryDataAsset {
	int32_t ItemId; // 0x30
	FText ItemDisplayName; // 0x38
	FText ItemDescription; // 0x50
	FString FriendlySearchName; // 0x68
	bool IsOwnableInventoryItem; // 0x78
	TArray<int64_t> DisplayableLootIds; // 0x80
	TSoftObjectPtr<UTexture2D> ItemIcon; // 0x90
	FSoftObjectPath ItemIconPath; // 0xb8
	TSoftObjectPtr<UTexture2D> LegacyItemIconTexture; // 0xd0
	TArray<FIconReference> Icons; // 0xf8
	FGameplayTagContainer CollectionContainer; // 0x108
	TMap<EExternalSkuSource, FString> ExternalProductSkus; // 0x128
	bool OnlyDisplayAcqusitionIfWhitelisted; // 0x178
	TArray<int64_t> BlackListedLootIds; // 0x180
};

struct UPlanarReflectionComponent : USceneCaptureComponent {
	UBoxComponent* PreviewBox; // 0x2a0
	float NormalDistortionStrength; // 0x2a8
	float PrefilterRoughness; // 0x2ac
	float PrefilterRoughnessDistance; // 0x2b0
	int32_t ScreenPercentage; // 0x2b4
	float ExtraFOV; // 0x2b8
	float DistanceFromPlaneFadeStart; // 0x2bc
	float DistanceFromPlaneFadeEnd; // 0x2c0
	float DistanceFromPlaneFadeoutStart; // 0x2c4
	float DistanceFromPlaneFadeoutEnd; // 0x2c8
	float AngleFromPlaneFadeStart; // 0x2cc
	float AngleFromPlaneFadeEnd; // 0x2d0
	bool bShowPreviewPlane; // 0x2d4
	bool bRenderSceneTwoSided; // 0x2d5
};

struct UDeviceProfileManager : UObject {
	TArray<UObject*> Profiles; // 0x28
};

struct UAkWinGDKInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkWinGDKAdvancedInitializationSettings AdvancedSettings; // 0xb8
};

struct UInterpTrackAkAudioEvent : UInterpTrackVectorBase {
	TArray<FAkAudioEventTrackKey> Events; // 0x90
	char bContinueEventOnMatineeEnd : 1; // 0xa0
};

struct UPUMG_CollectionDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnCollectionAvatarsUpdated; // 0x38
	FMulticastInlineDelegate OnCollectionAvatarAcquisition; // 0x48
	TArray<FPUMG_AvatarData> CollectionAvatars; // 0x58
};

struct UExplosiveStakeMeleeWeaponComponent_C : UMasterMelee_WeaponComponent_C {
	bool IsPlayingAbilityVO; // 0x15c8
	float K2Node_Event_DeltaSeconds; // 0x15cc
	EWeaponStateNew K2Node_Event_OldState; // 0x15d0
	EWeaponStateNew K2Node_Event_NewState; // 0x15d1
	bool K2Node_SwitchEnum_CmpSuccess; // 0x15d2
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst; // 0x15d8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable; // 0x15e0
	FName Temp_name_Variable; // 0x15f0
	int32_t CallFunc_GetAudioEvent_Priority; // 0x15f8
	FDelegate Temp_delegate_Variable; // 0x15fc
};

struct UWBP_JobGeneralButton_Empty_C : UUserWidget {
	UImage* background; // 0x238
};

struct UMaterialExpressionDistanceFieldGradient : UMaterialExpression {
	FExpressionInput Position; // 0x40
};

struct UWBP_BattlepassTransitionBanner_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* NewTierPremium; // 0x528
	UWidgetAnimation* NewTierFree; // 0x530
	UWidgetAnimation* PremiumUnlocked; // 0x538
	UBorder* AreaShimmer_ColorWrapper; // 0x540
	UImage* AreaShineLeft_2; // 0x548
	UImage* AreaShineRight_2; // 0x550
	UImage* Arrow; // 0x558
	UImage* Arrow_2; // 0x560
	UImage* Arrow_3; // 0x568
	UImage* Arrow_4; // 0x570
	UImage* Arrow_5; // 0x578
	UImage* Arrow_6; // 0x580
	UOverlay* BackgroundDecoration; // 0x588
	UImage* BackgroundFlare; // 0x590
	UBorder* BackgroundFlare_ColorWrapper; // 0x598
	UImage* Badge; // 0x5a0
	UImage* BadgeShimmer; // 0x5a8
	UImage* Bottomtri; // 0x5b0
	UImage* CenterGradient; // 0x5b8
	UBorder* DiamondBack_ColorWrapper; // 0x5c0
	UImage* DiamondBase; // 0x5c8
	UImage* DiamondBase_2; // 0x5d0
	UImage* DiamondBlur; // 0x5d8
	UBorder* DiamondInterior_ColorWrapper; // 0x5e0
	UImage* EdgeGlow; // 0x5e8
	UImage* EdgeGlow_2; // 0x5f0
	UImage* Fill; // 0x5f8
	UImage* FillShadow; // 0x600
	UImage* Glitch_Center; // 0x608
	UBorder* GlitchCenter_ColorWrapper; // 0x610
	UBorder* GlowBanner_ColorWrapper; // 0x618
	UWBP_AdditiveImage_C* glowLine; // 0x620
	UWBP_AdditiveImage_C* glowLine_3; // 0x628
	UImage* godrays; // 0x630
	UBorder* IconFlares_ColorWrapper; // 0x638
	UImage* LenseFlare1; // 0x640
	UBorder* LineShimmer_ColorWrapper; // 0x648
	UImage* LineShineLeft; // 0x650
	UImage* LineShineRight; // 0x658
	UImage* PrimaryBannerShade; // 0x660
	UTextBlock* PrimaryBannerText; // 0x668
	UWBP_AdditiveImage_C* ScanLines; // 0x670
	UWBP_AdditiveImage_C* ScanLines_3; // 0x678
	UImage* SheenLeft; // 0x680
	UImage* SheenRight; // 0x688
	UImage* ShieldLogo; // 0x690
	UImage* SideDeco_2; // 0x698
	UImage* SideDeco_3; // 0x6a0
	UImage* Stroke; // 0x6a8
	UImage* SubtitleBannerShade; // 0x6b0
	UTextBlock* SubtitleText; // 0x6b8
	UImage* VictoryDefeatGlow; // 0x6c0
	UImage* VictoryDefeatGlow_2; // 0x6c8
	UImage* VictoryDefeatGlow_Pulse; // 0x6d0
	UImage* VictoryDefeatGlow_Pulse_2; // 0x6d8
	UWBP_BattlePassEmblem_C* WBP_BattlePassEmblem; // 0x6e0
	float TickTime; // 0x6e8
	FMulticastInlineDelegate TransitionFinished; // 0x6f0
};

struct UParticleModuleVelocityOverLifetime : UParticleModuleVelocityBase {
	FRawDistributionVector VelOverLife; // 0x38
	char Absolute : 1; // 0x80
};

struct UFontFace : UObject {
	FString SourceFilename; // 0x30
	EFontHinting Hinting; // 0x40
	EFontLoadingPolicy LoadingPolicy; // 0x41
	EFontLayoutMethod LayoutMethod; // 0x42
};

struct UAkCallbackInfo : UObject {
	UAkComponent* AkComponent; // 0x28
};

struct UWBP_ChallengeView_DailyContracts_C : UKSDailyChallengeViewBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x530
	UImage* Image_191; // 0x538
	UImage* Image_362; // 0x540
	UTextBlock* TimeRemaining; // 0x548
	UWidgetSwitcher* TimerSwitcher; // 0x550
	UWBP_ChallengeEntry_Card_C* WBP_ChallengeEntry_Card; // 0x558
	UWBP_ChallengeEntry_Card_C* WBP_ChallengeEntry_Card_2; // 0x560
	UWBP_ChallengeEntry_Card_C* WBP_ChallengeEntry_Card_3; // 0x568
	UWBP_ChallengeEntry_Weekly_C* WBP_ChallengeEntry_Weekly; // 0x570
	int32_t CachedTimeRemainingSecs; // 0x578
	TArray<int32_t> CachedContractIds; // 0x580
};

struct UKSAcquisition : UObject {
	EKSAcquisitionType AcquisitionType; // 0x28
	TArray<UAcquisitionItemData*> AcquisitionItems; // 0x30
	UKSJobItem* DisplayedJob; // 0x40
};

struct UWBP_Social_Overlay_C : UKSSocialOverlay {
	FPointerToUberGraphFrame UberGraphFrame; // 0x5c0
	UWidgetAnimation* OpenPanel; // 0x5c8
	UImage* background; // 0x5d0
	UButton* Blocker; // 0x5d8
	UWidgetSwitcher* ContentSwitcher; // 0x5e0
	UButton* ContextBlocker; // 0x5e8
	UWBP_PlayerContextMenu_C* ContextMenu; // 0x5f0
	UImage* dropshadowgradient; // 0x5f8
	UWBP_Social_Friends_Tab_C* FriendsPanel; // 0x600
	UWBP_subscreen_nav_tab_C* NavButton0; // 0x608
	UWBP_subscreen_nav_tab_C* NavButton1; // 0x610
	UWBP_subscreen_nav_tab_C* NavButton2; // 0x618
	UWBP_ControllerPrompt_C* PromptTabLeft; // 0x620
	USizeBox* PromptTabLeftContainer; // 0x628
	UWBP_ControllerPrompt_C* PromptTabRight; // 0x630
	USizeBox* PromptTabRightContainer; // 0x638
	UWBP_Social_Search_Tab_C* SearchPanel; // 0x640
	UWBP_Social_Header_Cosmetic_C* WBP_Social_Header_Cosmetic; // 0x648
	TMap<UWBP_subscreen_nav_tab_C*, UKSWidget*> NavButtons; // 0x650
	UWBP_subscreen_nav_tab_C* ActiveTabButton; // 0x6a0
	int32_t ContextMenuFocusGroup; // 0x6a8
	int32_t StatusContextMenuFocusGroup; // 0x6ac
	bool IsOpen; // 0x6b0
	UAkAudioEvent* ShowSocialOverlaySFX; // 0x6b8
	UAkAudioEvent* GamePadTabSocialOverlaySFX; // 0x6c0
};

struct USoundSourceBus : USoundWave {
	ESourceBusChannels SourceBusChannels; // 0x310
	float SourceBusDuration; // 0x314
	char bAutoDeactivateWhenSilent : 1; // 0x318
};

struct AKSWaterFXVolume : ATriggerVolume {
	float WaterFXUpdatePeriod; // 0x258
	float SurfaceOffsetZ; // 0x25c
	TMap<AActor*, float> ActorCountdownMap; // 0x260
	FBoxSphereBounds CachedBounds; // 0x2b0
};

struct UWBP_KSCosmeticItemSelector_C : UKSCosmeticItemSelectorWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_KSCosmeticItemDisplay_C* CosmeticItemDisplay; // 0x528
	UPlatformInventoryItem* PlatformItem; // 0x530
	FMulticastInlineDelegate OnItemHovered; // 0x538
	FMulticastInlineDelegate OnItemUnhovered; // 0x548
	FMulticastInlineDelegate OnItemSelected; // 0x558
	UPUMG_StoreItem* StoreItem; // 0x568
	FCosmeticSlotDetails CosmeticDetails; // 0x570
	bool IsClearSlot; // 0x588
	FMulticastInlineDelegate OnPurchaseItem; // 0x590
	UAkAudioEvent* HoverCosmeticItemSelectorSFX; // 0x5a0
	UAkAudioEvent* ClickCosmeticItemSelectorSFX; // 0x5a8
	bool IsGamepadHovered; // 0x5b0
	bool IsSelected; // 0x5b1
};

struct UDatasmithStaticMeshComponentTemplate : UDatasmithObjectTemplate {
	UStaticMesh* StaticMesh; // 0x30
	TArray<UMaterialInterface*> OverrideMaterials; // 0x38
};

struct USoundNodeLooping : USoundNode {
	int32_t LoopCount; // 0x48
	char bLoopIndefinitely : 1; // 0x4c
};

struct AKSJobSelectPreviewActor_Lobby : AKSJobSelectPreviewActor {
	ELobbyCharacterIndex CharacterIndex; // 0x428
	bool bControlChildCharacterNameplate; // 0x429
	float ChildCharacterDefaultScaleOverride; // 0x42c
	TWeakObjectPtr<UKSPlayerInfo> WeakPlayerInfo; // 0x430
	bool bPlayerPendingPartyAccept; // 0x438
	bool bAllowJobChangeOnPlayEmote; // 0x439
	bool bStopPlayingEmoteWhileLoadingNewEmote; // 0x43a
	TMap<EEmoteCameraPositionType, FVector> EmoteCameraPositionLocationOffsets; // 0x440
	TMap<EEmoteCameraPositionType, float> EmoteCameraPositionScaleOverrides; // 0x490
	TSoftObjectPtr<UKSJobItem> FailSafeEmoteJob; // 0x4e0
	UKSEmote* PendingEmote; // 0x508
	FKSEquipmentId PendingEmoteComponentId; // 0x520
	UKSEmoteCosmeticComponent* PendingEmoteComponent; // 0x528
	TSoftObjectPtr<UKSJobItem> PendingEmoteExpectedJob; // 0x530
	TSoftObjectPtr<UKSJobItem> ActiveEmoteExpectedJob; // 0x558
	UKSEmoteCosmeticComponent* ActiveEmoteComponent; // 0x580
	FVector ChildCharacterDefaultLocation; // 0x588
};

struct UKSBTTask_SetBehaviorState : UBTTaskNode {
	ECharacterBehaviorState BehaviorState; // 0x70
};

struct UKSPlayerModInstance : UActorComponent {
	FMulticastInlineDelegate OnModInstRemoved; // 0xb0
	FMulticastInlineDelegate OnModTriggered; // 0xe0
	bool bPreventModInitialization; // 0xf0
	bool bInitialized; // 0xf1
	AKSPlayerModManager* OwningPlayerModManager; // 0xf8
	AKSCharacter* OwnerCharacter; // 0x100
	AKSCharacterFoundation* OwnerCharacterFoundation; // 0x110
	UKSPlayerMod* ModAsset; // 0x118
	AKSPlayerState* ModInstigator; // 0x120
	EKSModSource ModSource; // 0x128
	TWeakObjectPtr<AActor> ActorInstigator; // 0x12c
	int32_t InstanceCount; // 0x134
	int32_t LocalInstanceCount; // 0x138
	bool bUsesDuration; // 0x13c
	bool bDisplaysDuration; // 0x13d
	bool bUseAssetDataTableManager; // 0x150
	UDynamicSkinTable* AssetDataTableManager; // 0x158
	TArray<FDataTableInfo> PersistentSkinDataTables; // 0x160
	TArray<FDataTableInfo> UISkinDataTables; // 0x170
	bool bLatencyElapsed; // 0x198
	TArray<FKSPlayerModInputBinding> InputActions; // 0x1a8
};

struct UKSActivityRequirement_MapTag : UKSActivityRequirement {
	FGameplayTag RequiredMapTag; // 0x30
};

struct UKSActivityRewardCondition_Deserter : UKSActivityRewardCondition {
	bool bAllowProgressionIfDeserter; // 0x30
	bool bAllowRegressionIfDeserter; // 0x31
};

struct UKSHUDStateTracker : UObject {
	FMulticastInlineDelegate OnHUDMatchPhaseChanged; // 0x28
	float PhaseTime; // 0x38
	FMatchPhase TrackedCurrentMatchPhase; // 0x3c
};

struct UWBP_ChallengeView_SeasonalContracts_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* DescText; // 0x528
	UHorizontalBox* DescWrapper; // 0x530
	UImage* Image_362; // 0x538
	UTextBlock* TimeRemaining; // 0x540
	UWidgetSwitcher* TimerSwitcher; // 0x548
	UWBP_ChallengeEntry_Seasonal_C* WBP_ChallengeEntry_SeasonalChallenge_C; // 0x550
	UWBP_ChallengeEntry_Seasonal_C* WBP_ChallengeEntry_SeasonalChallenge_C_1; // 0x558
	UWBP_ChallengeEntry_Seasonal_C* WBP_ChallengeEntry_SeasonalChallenge_C_2; // 0x560
	UWBP_ChallengeEntry_Seasonal_C* WBP_ChallengeEntry_SeasonalChallenge_C_3; // 0x568
	UWBP_ChallengeEntry_SeasonalMastery_C* WBP_ChallengeEntry_SeasonalMastery; // 0x570
	UVerticalBox* WeeklyTrackContainer; // 0x578
	UScrollBox* WeeklyTrackScrollBox; // 0x580
	int32_t NumWeeks; // 0x588
};

struct UDefaultEnvironmentListener_C : UEnvironmentListenerComponent {
	FPointerToUberGraphFrame UberGraphFrame; // 0xc8
	FName LevelStateGroup; // 0xd0
	TMap<FString, FName> LevelToStateGroupMap; // 0xd8
};

struct UWBP_check_box_C : UUserWidget {
	UButton* Button_809; // 0x238
	UImage* highlightborder; // 0x240
	UImage* Image_343; // 0x248
	UImage* Image_619; // 0x250
	UImage* Image_621; // 0x258
	UImage* Image_622; // 0x260
	UImage* Image_1282; // 0x268
	UImage* Image_1357; // 0x270
	UImage* Image_1832; // 0x278
};

struct UWorld : UObject {
	ULevel* PersistentLevel; // 0x30
	UNetDriver* NetDriver; // 0x38
	ULineBatchComponent* LineBatcher; // 0x40
	ULineBatchComponent* PersistentLineBatcher; // 0x48
	ULineBatchComponent* ForegroundLineBatcher; // 0x50
	AGameNetworkManager* NetworkManager; // 0x58
	UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x60
	TArray<UObject*> ExtraReferencedObjects; // 0x68
	TArray<UObject*> PerModuleDataObjects; // 0x78
	TArray<AActor*> LevelSequenceActors; // 0x88
	TArray<ULevelStreaming*> StreamingLevels; // 0x98
	FStreamingLevelsToConsider StreamingLevelsToConsider; // 0xa8
	FString StreamingLevelsPrefix; // 0xd0
	ULevel* CurrentLevelPendingVisibility; // 0xe0
	ULevel* CurrentLevelPendingInvisibility; // 0xe8
	UDemoNetDriver* DemoNetDriver; // 0xf0
	AParticleEventManager* MyParticleEventManager; // 0xf8
	APhysicsVolume* DefaultPhysicsVolume; // 0x100
	char bAreConstraintsDirty : 1; // 0x11e
	UNavigationSystemBase* NavigationSystem; // 0x120
	AGameModeBase* AuthorityGameMode; // 0x128
	AGameStateBase* GameState; // 0x130
	UAISystemBase* AISystem; // 0x138
	UAvoidanceManager* AvoidanceManager; // 0x140
	TArray<ULevel*> Levels; // 0x148
	TArray<FLevelCollection> LevelCollections; // 0x158
	UGameInstance* OwningGameInstance; // 0x188
	TArray<UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x190
	UCanvas* CanvasForRenderingToTarget; // 0x1a0
	UCanvas* CanvasForDrawMaterialToRenderTarget; // 0x1a8
	TArray<UActorComponent*> ComponentsThatNeedEndOfFrameUpdate; // 0x200
	TArray<UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x210
	UWorldComposition* WorldComposition; // 0x560
	FWorldPSCPool PSCPool; // 0x5f0
	FHirezObjectPool HirezObjectPool; // 0x710
};

struct UAnimSharingTransitionInstance : UAnimInstance {
	TWeakObjectPtr<USkeletalMeshComponent> FromComponent; // 0x268
	TWeakObjectPtr<USkeletalMeshComponent> ToComponent; // 0x270
	float BlendTime; // 0x278
	bool bBlendBool; // 0x27c
};

struct UAkGameObject : USceneComponent {
	UAkAudioEvent* AkAudioEvent; // 0x208
	FString EventName; // 0x210
};

struct UKSModInst_DirectTargetWeapon : UKSModInst_FireWeaponOnActivation {
	TWeakObjectPtr<AKSWeapon_DirectTarget> TargetedWeapon; // 0x510
	FMulticastInlineDelegate OnTargetAcquired; // 0x518
};

struct UTexture : UStreamableRenderAsset {
	FGuid LightingGuid; // 0x48
	int32_t LODBias; // 0x58
	TextureCompressionSettings CompressionSettings; // 0x5c
	TextureFilter Filter; // 0x5d
	ETextureMipLoadOptions MipLoadOptions; // 0x5e
	TextureGroup LODGroup; // 0x5f
	char SRGB : 1; // 0x60
	char bNoTiling : 1; // 0x60
	char VirtualTextureStreaming : 1; // 0x60
	char CompressionYCoCg : 1; // 0x60
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x60
	TArray<UAssetUserData*> AssetUserData; // 0x68
};

struct UInterpTrackLinearColorProp : UInterpTrackLinearColorBase {
	FName PropertyName; // 0x90
};

struct UEditableStaticMeshAdapter : UEditableMeshAdapter {
	UStaticMesh* StaticMesh; // 0x28
	UStaticMesh* OriginalStaticMesh; // 0x30
	int32_t StaticMeshLODIndex; // 0x38
};

struct UInputAxisKeyDelegateBinding : UInputDelegateBinding {
	TArray<FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28
};

struct UKSLoadoutBundle : UKSItemBundle {
	TSoftObjectPtr<UKSLoadoutClass> LoadoutClass; // 0x260
	TSoftObjectPtr<UKSWeaponAsset> Gadget; // 0x288
	TArray<TSoftObjectPtr<UKSPlayerMod_Activated>> BundledAbilities; // 0x2b0
};

struct UKSEMODataFactory : UPUMG_DataFactory {
	bool haveRecieveMatchReport; // 0x4c
	FMulticastInlineDelegate OnRewardsRecieved; // 0x100
	FMulticastInlineDelegate OnProgressionRecieved; // 0x110
};

struct UNewBackButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ShearedButton_C* WBP_ShearedButton; // 0x528
	FMulticastInlineDelegate BackButtonClicked; // 0x530
	FName PreviousViewRoute; // 0x540
};

struct UDatasmithSpotLightComponentTemplate : UDatasmithObjectTemplate {
	float InnerConeAngle; // 0x30
	float OuterConeAngle; // 0x34
};

struct UKSBTTask_SelectDefensePoint : UBTTaskNode {
	FBlackboardKeySelector DefensePointActorKey; // 0x70
};

struct AKSProjectile_ZiplineAnchor : AKSProjectile {
	FVector ProjectileTarget; // 0x970
};

struct ULayer : UObject {
	FName LayerName; // 0x28
	char bIsVisible : 1; // 0x30
	TArray<FLayerActorStats> ActorStats; // 0x38
};

struct UMovieSceneCameraAnimSection : UMovieSceneSection {
	FMovieSceneCameraAnimSectionData AnimData; // 0xe0
	UCameraAnim* CameraAnim; // 0x100
	float PlayRate; // 0x108
	float PlayScale; // 0x10c
	float BlendInTime; // 0x110
	float BlendOutTime; // 0x114
	bool bLooping; // 0x118
};

struct UKSModInst_OnFireWeaponType : UKSPlayerModInstance {
	TArray<FGameplayTag> ValidWeaponTypes; // 0x1b8
};

struct UKSMapIconWidgetBase : UUserWidget {
	bool bDoesIconRotate; // 0x238
	float MarkerAnchorHeight; // 0x23c
	float HeightThreshold; // 0x240
	float CachedRawMetersAway; // 0x248
	int32_t UniqueId; // 0x24c
	TWeakObjectPtr<AKSPlayerState> CreatingPlayer; // 0x250
	EDisplayType ParentMapDisplayType; // 0x258
	TWeakObjectPtr<AActor> AssociatedActor; // 0x25c
	TWeakObjectPtr<UObject> AssociatedObject; // 0x264
	FVector DefaultLocation; // 0x26c
	float Lifespan; // 0x278
	TWeakObjectPtr<UKSMapWidgetBase> ParentMapWidget; // 0x27c
	FVector2D ScreenMargins; // 0x284
	float CenterPercentageWidth; // 0x28c
	float CenterPercentageHeight; // 0x290
	float OpacityWhenAiming; // 0x294
	bool DoesFadeOutWhenAiming; // 0x298
	float AimTransitionOpacity; // 0x29c
	FVector IconOffset; // 0x2a0
	float HoverDelaySeconds; // 0x2c4
	FMulticastInlineDelegate OnMapIconWidgetReady; // 0x2e0
	FMulticastInlineDelegate OnMapIconWidgetRemove; // 0x2f0
	bool bIsWidgetPool; // 0x300
	FString WidgetPoolName; // 0x308
};

struct UMaterialExpressionComment : UMaterialExpression {
	int32_t SizeX; // 0x40
	int32_t SizeY; // 0x44
	FString Text; // 0x48
	FLinearColor CommentColor; // 0x58
	int32_t FontSize; // 0x68
};

struct UMaterialExpressionDepthOfFieldFunction : UMaterialExpression {
	EDepthOfFieldFunctionValue FunctionValue; // 0x40
	FExpressionInput Depth; // 0x44
};

struct USoundNodeRandom : USoundNode {
	TArray<float> Weights; // 0x48
	TArray<bool> HasBeenUsed; // 0x58
	int32_t NumRandomUsed; // 0x68
	int32_t PreselectAtLevelLoad; // 0x6c
	char bShouldExcludeFromBranchCulling : 1; // 0x70
	char bSoundCueExcludedFromBranchCulling : 1; // 0x70
	char bRandomizeWithoutReplacement : 1; // 0x70
};

struct UAnimSharingInstance : UObject {
	TArray<AActor*> RegisteredActors; // 0x28
	UAnimationSharingStateProcessor* StateProcessor; // 0xa8
	TArray<UAnimSequence*> UsedAnimationSequences; // 0xe8
	UEnum* StateEnum; // 0x108
	AActor* SharingActor; // 0x110
};

struct UKSWeaponTargetingModule : UObject {
	FTargetingModuleTickFunction TargetingTick; // 0x28
	bool bAimedAtEnemy; // 0x58
	bool bAimedAtFriendly; // 0x59
	int32_t TargetingIndex; // 0x5c
	FName ModeKey; // 0x60
	FTransform OverriddenOriginTransform; // 0x70
	FTransform OverriddenOriginTransformOffset; // 0xa0
	bool bOverrideOriginTransform; // 0xd0
	bool bCookTimeAffectsVisuals; // 0xd1
	FName AimPostProcessCookTimeParameterName; // 0xd4
	UMaterialInterface* AimPostProcessMaterial; // 0xe0
	UMaterialInstanceDynamic* AimPostProcessMaterialInstance; // 0xe8
	UKSWeaponAsset* OverriddenWeaponAsset; // 0xf0
	TArray<UKSWeaponTargetingModule*> ChildTargetingModules; // 0xf8
	float HitScanRange; // 0x108
	UKSWeaponComponent* OwningWeaponComponent; // 0x118
	AKSCharacter* OwningCharacter; // 0x120
};

struct UKSPlayerMod_HealthRegeneration : UKSPlayerMod {
	float HealthRegenerationPerSecondAdded; // 0x330
	int32_t Priority_HealthRegenerationPerSecondAdded; // 0x334
	float HealthRegenerationDelayAdded; // 0x338
	int32_t Priority_HealthRegenerationDelayAdded; // 0x33c
	bool ShouldAllowHealthRegen; // 0x340
	int32_t Priority_ShouldAllowHealthRegen; // 0x344
};

struct UWidgetAnimationDelegateBinding : UDynamicBlueprintBinding {
	TArray<FBlueprintWidgetAnimationDelegateBinding> WidgetAnimationDelegateBindings; // 0x28
};

struct UKSWrapCustomizationContext : UObject {
	UKSWeaponAsset* WeaponAsset; // 0x28
	UKSWeaponAttachment* SelectedWrap; // 0x30
	UPUMG_StoreItem* SelectedStoreItem; // 0x38
};

struct UMaterialExpressionLandscapeLayerSwitch : UMaterialExpression {
	FExpressionInput LayerUsed; // 0x40
	FExpressionInput LayerNotUsed; // 0x54
	FName ParameterName; // 0x68
	char PreviewUsed : 1; // 0x70
	FGuid ExpressionGUID; // 0x74
};

struct UARBasicLightEstimate : UARLightEstimate {
	float AmbientIntensityLumens; // 0x28
	float AmbientColorTemperatureKelvin; // 0x2c
	FLinearColor AmbientColor; // 0x30
};

struct UCurveLinearColor : UCurveBase {
	FRichCurve FloatCurves[0x4]; // 0x30
	float AdjustHue; // 0x230
	float AdjustSaturation; // 0x234
	float AdjustBrightness; // 0x238
	float AdjustBrightnessCurve; // 0x23c
	float AdjustVibrance; // 0x240
	float AdjustMinAlpha; // 0x244
	float AdjustMaxAlpha; // 0x248
};

struct UKSPlayerMod : UKSItem {
	bool bIsPerk; // 0x250
	bool bCanBePickup; // 0x251
	TSoftClassPtr<UObject> FunctionalClass; // 0x258
	bool bIsInstanceReplicated; // 0x280
	int32_t ModUnlockTier; // 0x284
	EModInterferenceType AttachmentInteraction; // 0x288
	bool bSingleInstanceStack; // 0x289
	bool bStacksPerInstigator; // 0x28a
	bool bRemoveAllInstances; // 0x28b
	int32_t MaxStackCount; // 0x28c
	bool bCapInstanceCount; // 0x290
	EPlayerModType ModType; // 0x291
	bool bShouldAssist; // 0x292
	FGameplayTagContainer EffectCategories; // 0x298
	TArray<FName> TriggerEvents; // 0x2b8
	TMap<FName, int32_t> AnimEventPriorityMap; // 0x2c8
	TArray<TSoftObjectPtr<UKSPlayerMod>> RemovesFromLoadout; // 0x318
	bool bLerpModifiers; // 0x328
	bool bShouldLagCompensateEffects; // 0x329
	bool bGiveModToAllControlledPawns; // 0x32a
	bool bCanActivateOnZipline; // 0x32b
};

struct UKSAssetManager : UPInv_AssetManager {
	bool bCookAndPackageActivities; // 0x7d8
	bool bCookAndPackageJobActivities; // 0x7d9
	bool bCookAndPackageWeaponActivities; // 0x7da
};

struct AARSharedWorldGameState : AGameState {
	TArray<char> PreviewImageData; // 0x290
	TArray<char> ARWorldData; // 0x2a0
	int32_t PreviewImageBytesTotal; // 0x2b0
	int32_t ARWorldBytesTotal; // 0x2b4
	int32_t PreviewImageBytesDelivered; // 0x2b8
	int32_t ARWorldBytesDelivered; // 0x2bc
};

struct UGameplayTagsManager : UObject {
	TArray<FGameplayTagSource> TagSources; // 0xc0
	TArray<UDataTable*> GameplayTagTables; // 0x1b0
};

struct AMainCharacter_C : AKSCharacter {
	UKSAimAssistAnchorComponent* RightKneeAimAssitAnchor; // 0x3c20
	UKSAimAssistAnchorComponent* LeftKneeAimAssistAnchor; // 0x3c28
	UKSAimAssistAnchorComponent* PelvisAimAssistAnchor; // 0x3c30
	UOutOfBoundsComponent_C* OutOfBoundsComponent; // 0x3c38
	UKSCharacterSocketComponent* MountedAimOrigin; // 0x3c40
	UKSCharacterSocketComponent* UnderslungAimOrigin; // 0x3c48
	UParticleSystemComponent* FX_Blinded; // 0x3c50
	UCharacterHeatSourceComponent_C* CharacterHeatSourceComponent; // 0x3c58
	UKSCharacterSocketComponent* PerformanceAimOrigin; // 0x3c60
	UCharacterEmotionComponent_C* CharacterEmotionComponent; // 0x3c68
	USpringArmComponent* SkyDiveCameraBoom; // 0x3c70
	UWidgetComponent* Nameplate; // 0x3c78
	UMainCharacterThreatComponent_C* MainCharacterThreatComponent; // 0x3c80
	UKSTabletMeshComponent* NewTablet; // 0x3c88
	UMainEnvironmentTracker_C* MainEnvironmentTracker; // 0x3c90
	UKSAimAssistAnchorComponent* BodyAimAssistAnchor; // 0x3c98
	UKSAimAssistAnchorComponent* HeadAimAssistAnchor; // 0x3ca0
	UParticleSystemComponent* Free Fall Particle Component; // 0x3ca8
	UCameraComponent* SkyDiveCamera; // 0x3cb0
	float EnterFreeFallFOVTimeline_FOV_214483C64B8EF94ABEE010ACC0C82B47; // 0x3cb8
	ETimelineDirection EnterFreeFallFOVTimeline__Direction_214483C64B8EF94ABEE010ACC0C82B47; // 0x3cbc
	UTimelineComponent* EnterFreeFallFOVTimeline; // 0x3cc0
	float NoseDiveFOVTimeline_FOV_B4B28FE84FD9F70D4702AD94CD02429F; // 0x3cc8
	ETimelineDirection NoseDiveFOVTimeline__Direction_B4B28FE84FD9F70D4702AD94CD02429F; // 0x3ccc
	UTimelineComponent* NoseDiveFOVTimeline; // 0x3cd0
	FVector Martial_Artist_Target_Front_Camera_Offset_2353812C44E84070E58EA28AC0C39A7A; // 0x3cd8
	FVector Martial_Artist_Target_Front_Camera_Rotation_2353812C44E84070E58EA28AC0C39A7A; // 0x3ce4
	ETimelineDirection Martial_Artist_Target_Front__Direction_2353812C44E84070E58EA28AC0C39A7A; // 0x3cf0
	UTimelineComponent* Martial Artist Target Front; // 0x3cf8
	FVector Martial_Artist_Target_Back_Camera_Offset_1BFA9A6E4FC29401CE8D43B8AAD4581C; // 0x3d00
	FVector Martial_Artist_Target_Back_Camera_Rotation_1BFA9A6E4FC29401CE8D43B8AAD4581C; // 0x3d0c
	ETimelineDirection Martial_Artist_Target_Back__Direction_1BFA9A6E4FC29401CE8D43B8AAD4581C; // 0x3d18
	UTimelineComponent* Martial Artist Target Back; // 0x3d20
	FVector Martial_Artist_Instigator_Front_Camera_Offset_F70AEBFB4CDEF611144DE3BBA0C06E0C; // 0x3d28
	FVector Martial_Artist_Instigator_Front_Camera_Rotation_F70AEBFB4CDEF611144DE3BBA0C06E0C; // 0x3d34
	ETimelineDirection Martial_Artist_Instigator_Front__Direction_F70AEBFB4CDEF611144DE3BBA0C06E0C; // 0x3d40
	UTimelineComponent* Martial Artist Instigator Front; // 0x3d48
	FVector Martial_Artist_Instigator_Back_Camera_Offset_28F092594C0CD50C0A3EA1BF17E2C5E1; // 0x3d50
	FVector Martial_Artist_Instigator_Back_Camera_Rotation_28F092594C0CD50C0A3EA1BF17E2C5E1; // 0x3d5c
	ETimelineDirection Martial_Artist_Instigator_Back__Direction_28F092594C0CD50C0A3EA1BF17E2C5E1; // 0x3d68
	UTimelineComponent* Martial Artist Instigator Back; // 0x3d70
	FVector CameraDodgeRoll_Relative_Position_4B7EB20A461034BB0B80418AE71BD9F4; // 0x3d78
	float CameraDodgeRoll_Camera_Boom_Length_4B7EB20A461034BB0B80418AE71BD9F4; // 0x3d84
	ETimelineDirection CameraDodgeRoll__Direction_4B7EB20A461034BB0B80418AE71BD9F4; // 0x3d88
	UTimelineComponent* CameraDodgeRoll; // 0x3d90
	float SprintFOVTimeline_FOVAlpha_F9A879E74FD1B4D844684CBEE4230863; // 0x3d98
	ETimelineDirection SprintFOVTimeline__Direction_F9A879E74FD1B4D844684CBEE4230863; // 0x3d9c
	UTimelineComponent* SprintFOVTimeline; // 0x3da0
	float EndImmunity_Invulnerable_4A69979040C00E80AB6D5687355E98EA; // 0x3da8
	ETimelineDirection EndImmunity__Direction_4A69979040C00E80AB6D5687355E98EA; // 0x3dac
	UTimelineComponent* EndImmunity; // 0x3db0
	float StartImmunity_Invulnerable_F2F49BA44D30D2903638919AFE6C1704; // 0x3db8
	ETimelineDirection StartImmunity__Direction_F2F49BA44D30D2903638919AFE6C1704; // 0x3dbc
	UTimelineComponent* StartImmunity; // 0x3dc0
	float Camera_Boom_Timeline_Player_Mesh_ADS_Weight_Reverse_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3dc8
	float Camera_Boom_Timeline_Player_Mesh_ADS_Weight_Forward_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3dcc
	float Camera_Boom_Timeline_FOV_Weight_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3dd0
	float Camera_Boom_Timeline_Camera_Boom_Length_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3dd4
	ETimelineDirection Camera_Boom_Timeline__Direction_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3dd8
	UTimelineComponent* Camera Boom Timeline; // 0x3de0
	float Elapsed; // 0x3de8
	bool StopwatchOn; // 0x3dec
	FVector PlayerLocation; // 0x3df0
	UAkAudioEvent* Successful Hit AkEvent; // 0x3e00
	bool ADS Test; // 0x3e08
	float Camera Boom Arm Max; // 0x3e0c
	float Cached 1p Field of View; // 0x3e10
	float Test Alpha; // 0x3e14
	bool InFreeFall; // 0x3e18
	bool Turn Right; // 0x3e19
	bool Turn Left; // 0x3e1a
	float Pitch; // 0x3e1c
	UParticleSystem* Friendly Free Fall; // 0x3e20
	UParticleSystem* Enemy Free Fall; // 0x3e28
	float Yaw; // 0x3e30
	float Main Camera Cached FOV; // 0x3e34
	int32_t HitDirs; // 0x3e38
	HitEnum HitEnum; // 0x3e3c
	FKSSpecialEffect DownedPPEffect; // 0x3e40
	float Downed PP Transition Duration; // 0x3e90
	bool IsTrailActive; // 0x3e94
	UMaterialInterface* FlashBang PP Material; // 0x3e98
	UMaterialInstanceDynamic* FlashBang PP Material Instance; // 0x3ea0
	TArray<UObject*> SFX Grenade Damage Type; // 0x3ea8
	TArray<UObject*> SFX Blade Damage Type; // 0x3eb8
	AActor* SFX Damage Target; // 0x3ec8
	FVector LeftTempLoc; // 0x3ed0
	float AffectRange; // 0x3edc
	FVector RightTempLoc; // 0x3ee0
	UMaterialInterface* Out Of Bounds PP Material; // 0x3ef0
	UMaterialInstanceDynamic* Out Of Bounds PP Material Instance; // 0x3ef8
	float CachedFOV; // 0x3f00
	FLastHitImpulse LastHitInfo; // 0x3f08
	FRotator KnockbackRotation; // 0x3f48
	float DeltaTime; // 0x3f54
	bool bIsRagdoll; // 0x3f58
	bool bIsLaunchedOnDown; // 0x3f59
	bool bSnapshotPoseFacingUp; // 0x3f5a
	UAnimMontage* GetUpMontage; // 0x3f60
	bool bIsRagdollOnGround; // 0x3f68
	FVector RagdollPelvisLocation; // 0x3f6c
	FVector RagdollCapsuleLocation; // 0x3f78
	float TimeInRagdoll; // 0x3f84
	float MaxTimeInRagdoll; // 0x3f88
	UParticleSystemComponent* FireParticle; // 0x3f90
	UMaterialInstanceDynamic* GrenadeImpactPointMID; // 0x3f98
	bool ZiplineActive1; // 0x3fa0
	float SprintFov; // 0x3fa4
	float SprintFOVChangeDuration; // 0x3fa8
	float ZiplineFov; // 0x3fac
	float PreviousFov; // 0x3fb0
	FDebugFloatHistory InterpLengthHist; // 0x3fb8
	UKSFXCurveComponent* AppliedDownedCurveComponent; // 0x3fd8
	FDamageEffect Effect; // 0x3fe0
	FKSSpecialEffect BloodPPEffect; // 0x4030
	UMaterial* HealthPostProcess; // 0x4080
	UMaterialInstanceDynamic* Health PP MID; // 0x4088
	float HealthPPInterpSpeed; // 0x4090
	FKSSpecialEffect SonarPPEffect; // 0x4098
	FKSSpecialEffect EMPPPEffect; // 0x40e8
	bool bEnableDirectionalDowns; // 0x4138
	bool bEnableComplexDirectionalDowns; // 0x4139
	float FreeFallParticleDetachTime; // 0x413c
	FKSSpecialEffect OutOfBoundsPPEffect; // 0x4140
	UKSFXCurveComponent* OutOfBoundsEffectCurve; // 0x4190
	FKSSpecialEffect ConfirmHitPPEffect; // 0x4198
	int32_t Active Index; // 0x41e8
	FKSSpecialEffect FirePostProcess; // 0x41f0
	TArray<FDamageEffect> QueuedDamageEffects; // 0x4240
	bool InLowTreshold; // 0x4250
	float LowHealthTreshold; // 0x4254
	FKSSpecialEffect PP_SkyDive; // 0x4258
	UAkAudioEvent* GadgetSwapSound; // 0x42a8
	bool ConfirmHitPPEffectEnabled; // 0x42b0
	FKSSpecialEffect ConfirmPickupPPEffect; // 0x42b8
	int32_t StopLoopingReviveSFX; // 0x4308
	int32_t StopLoopingArmorSFX; // 0x430c
	FMulticastInlineDelegate OnPrimaryOneWeaponHolstered; // 0x4310
	FMulticastInlineDelegate OnPrimaryTwoWeaponHolstered; // 0x4320
	TArray<StepType> ShowFootprintStepTypes; // 0x4330
	TArray<FAkExternalSourceInfo> Temp_struct_Variable; // 0x4340
	FDelegate Temp_delegate_Variable; // 0x4350
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_2; // 0x4360
	FDelegate Temp_delegate_Variable_2; // 0x4370
	FName Temp_name_Variable; // 0x4380
	FDelegate Temp_delegate_Variable_3; // 0x4388
	FDamageEffect K2Node_CustomEvent_Effect_3; // 0x4398
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_3; // 0x43e8
	UObject* K2Node_ClassDynamicCast_AsKSDamage_Type_Base; // 0x43f8
	bool K2Node_ClassDynamicCast_bSuccess; // 0x4400
	FDelegate Temp_delegate_Variable_4; // 0x4404
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_4; // 0x4418
	FName Temp_name_Variable_2; // 0x4428
	FName Temp_name_Variable_3; // 0x4430
	float K2Node_Event_Damage; // 0x4438
	UObject* K2Node_Event_DamageTypeClass_2; // 0x4440
	float K2Node_Event_DamageImpulse; // 0x4448
	FVector K2Node_Event_RelativeImpactLocation; // 0x444c
	FName K2Node_Event_BoneName; // 0x4458
	AActor* K2Node_Event_DamageCauser_2; // 0x4460
	FName Temp_name_Variable_4; // 0x4468
	EKSPowerSlideEndReason K2Node_Event_EndReason; // 0x4470
	bool CallFunc_GetRagdollFacingDirection_IsUp; // 0x4471
	FName Temp_name_Variable_5; // 0x4474
	bool K2Node_CustomEvent_IsGrounded; // 0x447c
	FName Temp_name_Variable_6; // 0x4480
	FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult; // 0x4488
	FName Temp_name_Variable_7; // 0x4510
	FVector CallFunc_GetPhysicsLinearVelocity_ReturnValue; // 0x4518
	FName Temp_name_Variable_8; // 0x4524
	FName Temp_name_Variable_9; // 0x452c
	FName Temp_name_Variable_10; // 0x4534
	bool Temp_bool_Has_Been_Initd_Variable; // 0x453c
	FDelegate Temp_delegate_Variable_5; // 0x4540
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_5; // 0x4550
	FDelegate Temp_delegate_Variable_6; // 0x4560
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_6; // 0x4570
	FDelegate K2Node_CreateDelegate_OutputDelegate; // 0x4580
	FDelegate K2Node_CreateDelegate_OutputDelegate_2; // 0x4590
	bool CallFunc_ShouldLastHitLaunchIntoRagdoll_bShouldRagdoll; // 0x45a0
	FDelegate Temp_delegate_Variable_7; // 0x45a4
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_7; // 0x45b8
	FDelegate Temp_delegate_Variable_8; // 0x45c8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_8; // 0x45d8
	float K2Node_CustomEvent_DeltaSeconds; // 0x45e8
	bool Temp_bool_IsClosed_Variable; // 0x45ec
	FVector CallFunc_ProcessTakePointHitDamage_WorldHitLocation; // 0x45f0
	FVector CallFunc_ProcessTakePointHitDamage_WorldHitNormal; // 0x45fc
	FVector CallFunc_ProcessTakePointHitDamage_VectorToHitSource; // 0x4608
	EKSMovementDirection CallFunc_ProcessTakePointHitDamage_HitDirection; // 0x4614
	FDelegate Temp_delegate_Variable_9; // 0x4618
	FName K2Node_Event_SequenceName; // 0x4628
	bool K2Node_SwitchName_CmpSuccess; // 0x4630
	FVector K2Node_CustomEvent_Camera_Rotation; // 0x4634
	bool K2Node_CustomEvent_Uses_Rotation; // 0x4640
	FVector K2Node_CustomEvent_Camera_Offset; // 0x4644
	float CallFunc_BreakVector_X; // 0x4650
	float CallFunc_BreakVector_Y; // 0x4654
	float CallFunc_BreakVector_Z; // 0x4658
	float CallFunc_BreakVector_X_2; // 0x465c
	float CallFunc_BreakVector_Y_2; // 0x4660
	float CallFunc_BreakVector_Z_2; // 0x4664
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_9; // 0x4668
	FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult; // 0x4678
	FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult; // 0x4700
	bool Temp_bool_Has_Been_Initd_Variable_2; // 0x4788
	FDelegate Temp_delegate_Variable_10; // 0x478c
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_10; // 0x47a0
	FDelegate Temp_delegate_Variable_11; // 0x47b0
	USkinnableSkeletalMeshComponent* K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component; // 0x47c0
	bool K2Node_DynamicCast_bSuccess; // 0x47c8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_11; // 0x47d0
	USkinnableSkeletalMeshComponent* K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component_2; // 0x47e0
	bool K2Node_DynamicCast_bSuccess_2; // 0x47e8
	bool Temp_bool_IsClosed_Variable_2; // 0x47e9
	bool K2Node_Event_bVisible; // 0x47ea
	FDelegate Temp_delegate_Variable_12; // 0x47ec
	bool Temp_bool_Has_Been_Initd_Variable_3; // 0x47fc
	bool Temp_bool_IsClosed_Variable_3; // 0x47fd
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_12; // 0x4800
	FDelegate K2Node_CreateDelegate_OutputDelegate_3; // 0x4810
	FDamageEffect K2Node_CustomEvent_Effect_2; // 0x4820
	FName Temp_name_Variable_11; // 0x4870
	UObject* K2Node_ClassDynamicCast_AsKSDamage_Type_Base_2; // 0x4878
	bool K2Node_ClassDynamicCast_bSuccess_2; // 0x4880
	FName Temp_name_Variable_12; // 0x4884
	UKSBloodSplatterComponent* K2Node_DynamicCast_AsKSBlood_Splatter_Component; // 0x4890
	bool K2Node_DynamicCast_bSuccess_3; // 0x4898
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x4899
	bool CallFunc_GetLocalSettingAsBool_OutBool; // 0x489a
	FDamageEffect K2Node_CustomEvent_Effect; // 0x48a0
	UObject* K2Node_ClassDynamicCast_AsKSDamage_Type_Base_3; // 0x48f0
	bool K2Node_ClassDynamicCast_bSuccess_3; // 0x48f8
	FCombatEventInfo K2Node_Event_DamageInfo_2; // 0x4900
	float K2Node_Event_DamageAmount; // 0x4968
	UObject* K2Node_Event_DamageTypeClass; // 0x4970
	AActor* K2Node_Event_DamageCauser; // 0x4978
	FVector K2Node_Event_DamageOrigin; // 0x4980
	FCombatEventInfo K2Node_Event_DamageInfo; // 0x4990
	FDelegate Temp_delegate_Variable_13; // 0x49f8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_13; // 0x4a08
	UParticleSystem* CallFunc_GetHitPawnEffectOverride_ParticleSystem; // 0x4a18
	FDelegate Temp_delegate_Variable_14; // 0x4a20
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_14; // 0x4a30
	FDamageEffect K2Node_Event_Effect_2; // 0x4a40
	FDamageEffect K2Node_Event_Effect; // 0x4a90
	FVector CallFunc_ProcessTakePointHitDamage_WorldHitLocation_2; // 0x4ae0
	FVector CallFunc_ProcessTakePointHitDamage_WorldHitNormal_2; // 0x4aec
	FVector CallFunc_ProcessTakePointHitDamage_VectorToHitSource_2; // 0x4af8
	EKSMovementDirection CallFunc_ProcessTakePointHitDamage_HitDirection_2; // 0x4b04
	UObject* K2Node_ClassDynamicCast_AsKSDamage_Type_Base_4; // 0x4b08
	bool K2Node_ClassDynamicCast_bSuccess_4; // 0x4b10
	FDelegate Temp_delegate_Variable_15; // 0x4b14
	AKSCharacterFoundation* K2Node_CustomEvent_Character_2; // 0x4b28
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_15; // 0x4b30
	FDelegate Temp_delegate_Variable_16; // 0x4b40
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_16; // 0x4b50
	FDelegate Temp_delegate_Variable_17; // 0x4b60
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_17; // 0x4b70
	FDelegate Temp_delegate_Variable_18; // 0x4b80
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_18; // 0x4b90
	FDelegate Temp_delegate_Variable_19; // 0x4ba0
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_19; // 0x4bb0
	FDelegate Temp_delegate_Variable_20; // 0x4bc0
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_20; // 0x4bd0
	FDelegate Temp_delegate_Variable_21; // 0x4be0
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_21; // 0x4bf0
	APlayerState* K2Node_CustomEvent_Player; // 0x4c00
	TScriptInterface<IINameplateWidget_C> K2Node_DynamicCast_AsINameplate_Widget; // 0x4c08
	bool K2Node_DynamicCast_bSuccess_4; // 0x4c18
	FDelegate Temp_delegate_Variable_22; // 0x4c1c
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_22; // 0x4c30
	float K2Node_Event_ExtraTime; // 0x4c40
	TScriptInterface<IINameplateWidget_C> K2Node_DynamicCast_AsINameplate_Widget_2; // 0x4c48
	bool K2Node_DynamicCast_bSuccess_5; // 0x4c58
	TScriptInterface<IINameplateWidget_C> K2Node_DynamicCast_AsINameplate_Widget_3; // 0x4c60
	bool K2Node_DynamicCast_bSuccess_6; // 0x4c70
	EMovementMode K2Node_Event_PrevMovementMode; // 0x4c71
	EMovementMode K2Node_Event_NewMovementMode; // 0x4c72
	char K2Node_Event_PrevCustomMode; // 0x4c73
	char K2Node_Event_NewCustomMode; // 0x4c74
	UKSCharacterMovementComponent* K2Node_DynamicCast_AsKSCharacter_Movement_Component; // 0x4c78
	bool K2Node_DynamicCast_bSuccess_7; // 0x4c80
	FCombatEventInfo K2Node_CustomEvent_EventInfo_2; // 0x4c88
	int32_t K2Node_CustomEvent_ExpBonus_2; // 0x4cf0
	AKSPlayerState* K2Node_CustomEvent_Revivee; // 0x4cf8
	AKSPlayerState* K2Node_CustomEvent_Reviver; // 0x4d00
	int32_t K2Node_CustomEvent_ExpBonus; // 0x4d08
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State; // 0x4d10
	bool K2Node_DynamicCast_bSuccess_8; // 0x4d18
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State_2; // 0x4d20
	bool K2Node_DynamicCast_bSuccess_9; // 0x4d28
	FDelegate Temp_delegate_Variable_23; // 0x4d2c
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_23; // 0x4d40
	FDelegate Temp_delegate_Variable_24; // 0x4d50
	FCombatEventInfo K2Node_CustomEvent_EventInfo; // 0x4d60
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State_3; // 0x4dc8
	bool K2Node_DynamicCast_bSuccess_10; // 0x4dd0
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State_4; // 0x4dd8
	bool K2Node_DynamicCast_bSuccess_11; // 0x4de0
	bool Temp_bool_Has_Been_Initd_Variable_4; // 0x4de1
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_2; // 0x4de2
	bool Temp_bool_IsClosed_Variable_4; // 0x4de3
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_3; // 0x4de4
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_4; // 0x4de5
	bool K2Node_Event_Enabled; // 0x4de6
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_24; // 0x4de8
	bool Temp_bool_Has_Been_Initd_Variable_5; // 0x4df8
	FDelegate K2Node_CreateDelegate_OutputDelegate_4; // 0x4dfc
	AKSCharacter* K2Node_Event_Reviver_3; // 0x4e10
	float K2Node_Event_ReviveTime; // 0x4e18
	bool K2Node_Event_Remote; // 0x4e1c
	AKSCharacter* K2Node_Event_Reviver_2; // 0x4e20
	AKSCharacter* K2Node_Event_Reviver; // 0x4e28
	bool K2Node_CustomEvent_IsSprinting; // 0x4e30
	bool K2Node_CustomEvent_IsDodgeRolling_2; // 0x4e31
	bool Temp_bool_IsClosed_Variable_5; // 0x4e32
	FDelegate K2Node_CreateDelegate_OutputDelegate_5; // 0x4e34
	FVector CallFunc_KeepActionCameraAboveWater_OutBoomPosition; // 0x4e44
	FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult_2; // 0x4e50
	FDelegate K2Node_CreateDelegate_OutputDelegate_6; // 0x4ed8
	float K2Node_Event_DeltaSeconds; // 0x4ee8
	FDelegate Temp_delegate_Variable_25; // 0x4eec
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_25; // 0x4f00
	FDelegate K2Node_CreateDelegate_OutputDelegate_7; // 0x4f10
	FVector K2Node_Event_BreakingLocation; // 0x4f20
	FVector K2Node_Event_BreakingDirection; // 0x4f2c
	FVector K2Node_Event_BreakingNormal; // 0x4f38
	bool K2Node_CustomEvent_IsPowerSliding; // 0x4f44
	float CallFunc_GetTargetFov_TargetFov; // 0x4f48
	bool K2Node_CustomEvent_IsZiplining; // 0x4f4c
	FDelegate K2Node_CreateDelegate_OutputDelegate_8; // 0x4f50
	FDelegate K2Node_CreateDelegate_OutputDelegate_9; // 0x4f60
	FDelegate K2Node_CreateDelegate_OutputDelegate_10; // 0x4f70
	bool K2Node_Event_bEnterNoseDive; // 0x4f80
	float K2Node_Event_AnimLength; // 0x4f84
	FString K2Node_Event_SwingMontageSectionName; // 0x4f88
	UMaster_WeaponComponent_C* K2Node_DynamicCast_AsMaster_Weapon_Component; // 0x4f98
	bool K2Node_DynamicCast_bSuccess_12; // 0x4fa0
	FDelegate K2Node_CreateDelegate_OutputDelegate_11; // 0x4fa4
	bool Temp_bool_Has_Been_Initd_Variable_6; // 0x4fb4
	APlayerController* K2Node_Event_PC_2; // 0x4fb8
	APlayerController* K2Node_Event_PC; // 0x4fc0
	bool K2Node_Event_UpdateTargetRotation; // 0x4fc8
	bool K2Node_Event_AffectCapsule; // 0x4fc9
	FDelegate K2Node_CreateDelegate_OutputDelegate_12; // 0x4fcc
	FKey K2Node_InputKeyEvent_Key; // 0x4fe0
	FRotator CallFunc_DetermineKnockbackFacing_ActorRotation; // 0x4ff8
	UParticleSystem* Temp_object_Variable; // 0x5008
	bool Temp_bool_Variable; // 0x5010
	bool Temp_bool_Has_Been_Initd_Variable_7; // 0x5011
	FDelegate Temp_delegate_Variable_26; // 0x5014
	FHitResult K2Node_Event_Hit; // 0x5024
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_26; // 0x50b0
	FDelegate Temp_delegate_Variable_27; // 0x50c0
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_27; // 0x50d0
	FDelegate K2Node_CreateDelegate_OutputDelegate_13; // 0x50e0
	HitEnum Temp_byte_Variable; // 0x50f0
	HitEnum Temp_byte_Variable_2; // 0x50f1
	HitEnum Temp_byte_Variable_3; // 0x50f2
	HitEnum Temp_byte_Variable_4; // 0x50f3
	bool Temp_bool_IsClosed_Variable_6; // 0x50f4
	bool K2Node_CustomEvent_IsDodgeRolling; // 0x50f5
	EKSMovementDirection Temp_byte_Variable_5; // 0x50f6
	FVector Temp_struct_Variable_28; // 0x50f8
	HitEnum K2Node_Select_Default; // 0x5104
	bool Temp_bool_Variable_2; // 0x5105
	bool Temp_bool_Variable_3; // 0x5106
	FVector K2Node_Select_Default_2; // 0x5108
	UParticleSystem* K2Node_Select_Default_3; // 0x5118
	UParticleSystem* K2Node_Select_Default_4; // 0x5120
	FDelegate K2Node_CreateDelegate_OutputDelegate_14; // 0x5128
	bool Temp_bool_IsClosed_Variable_7; // 0x5138
	FSettingDelegateStruct K2Node_MakeStruct_SettingDelegateStruct; // 0x513c
	FDelegate K2Node_CreateDelegate_OutputDelegate_15; // 0x515c
	FDelegate Temp_delegate_Variable_28; // 0x516c
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_29; // 0x5180
	bool K2Node_Event_bFullyHealed; // 0x5190
	FDelegate Temp_delegate_Variable_29; // 0x5194
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_30; // 0x51a8
	FDelegate Temp_delegate_Variable_30; // 0x51b8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_31; // 0x51c8
	FDelegate Temp_delegate_Variable_31; // 0x51d8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_32; // 0x51e8
	FDelegate Temp_delegate_Variable_32; // 0x51f8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_33; // 0x5208
	UKSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component; // 0x5218
	bool K2Node_DynamicCast_bSuccess_13; // 0x5220
	UKSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component_2; // 0x5228
	bool K2Node_DynamicCast_bSuccess_14; // 0x5230
	float K2Node_InputAxisKeyEvent_AxisValue_2; // 0x5234
	float K2Node_InputAxisKeyEvent_AxisValue; // 0x5238
	FDelegate Temp_delegate_Variable_33; // 0x523c
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_34; // 0x5250
	FDelegate K2Node_CreateDelegate_OutputDelegate_16; // 0x5260
	FDelegate Temp_delegate_Variable_34; // 0x5270
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_35; // 0x5280
	UKSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component_3; // 0x5290
	bool K2Node_DynamicCast_bSuccess_15; // 0x5298
	UKSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component_4; // 0x52a0
	bool K2Node_DynamicCast_bSuccess_16; // 0x52a8
	AKSCharacter* K2Node_CustomEvent_Character; // 0x52b0
	AKSItemDrop* K2Node_CustomEvent_ItemDrop; // 0x52b8
	UKSItem* K2Node_CustomEvent_Item; // 0x52c0
	float K2Node_Event_InteractTime; // 0x52c8
	bool Temp_bool_Variable_4; // 0x52cc
	float CallFunc_BreakVector_X_3; // 0x52d0
	float CallFunc_BreakVector_Y_3; // 0x52d4
	float CallFunc_BreakVector_Z_3; // 0x52d8
	AKSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller; // 0x52e0
	bool K2Node_DynamicCast_bSuccess_17; // 0x52e8
	FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult_3; // 0x52ec
	bool K2Node_SwitchEnum_CmpSuccess; // 0x5374
	AKSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller_2; // 0x5378
	bool K2Node_DynamicCast_bSuccess_18; // 0x5380
	AKSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller_3; // 0x5388
	bool K2Node_DynamicCast_bSuccess_19; // 0x5390
	bool K2Node_SwitchEnum_CmpSuccess_2; // 0x5391
	bool K2Node_SwitchEnum_CmpSuccess_3; // 0x5392
	EFlashBangIntensity K2Node_Event_Intensity; // 0x5393
	bool K2Node_SwitchEnum_CmpSuccess_4; // 0x5394
	bool Temp_bool_Has_Been_Initd_Variable_8; // 0x5395
	TScriptInterface<IBlendableInterface> CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x5398
	TScriptInterface<IBlendableInterface> CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_2; // 0x53a8
	HitEnum Temp_byte_Variable_6; // 0x53b8
	HitEnum Temp_byte_Variable_7; // 0x53b9
	HitEnum Temp_byte_Variable_8; // 0x53ba
	HitEnum Temp_byte_Variable_9; // 0x53bb
	EKSMovementDirection Temp_byte_Variable_10; // 0x53bc
	HitEnum K2Node_Select_Default_5; // 0x53bd
	bool Temp_bool_IsClosed_Variable_8; // 0x53be
	UAnimMontage* Temp_object_Variable_2; // 0x53c0
	UAnimMontage* Temp_object_Variable_3; // 0x53c8
	bool Temp_bool_Variable_5; // 0x53d0
	UAnimMontage* K2Node_Select_Default_6; // 0x53d8
	bool K2Node_CustomEvent_New_Blind_FX_State; // 0x53e0
	FLastHitImpulse K2Node_MakeStruct_LastHitImpulse; // 0x53e8
};

struct AWaypointBeaconLarge_C : AKSPingBeaconBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x2e0
	UParticleSystemComponent* ParticleSystem; // 0x2e8
};

struct UParticleModuleVelocityInheritParent : UParticleModuleVelocityBase {
	FRawDistributionVector Scale; // 0x38
};

struct UKSTeamEvaluator : UKSActorEvaluator {
	bool bMatchUnaffiliated; // 0x28
	bool bMatchEnemyTeams; // 0x29
	bool bMatchSameTeam; // 0x2a
};

struct UParticleModuleRotation_Seeded : UParticleModuleRotation {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x60
};

struct AKSExponentialHeightFog : AInfo {
	bool bAllowManualSetVisibility; // 0x220
	TArray<FString> ActivatedCinematicSubLevelNames; // 0x228
	UExponentialHeightFogComponent* Component; // 0x238
};

struct AKSProjectile_ClusterGrenade : AKSProjectile_Grenade {
	UKSProjectileClusterComponent* ProjectileClusterComponent; // 0x9f8
	bool bInflictDamageOnExplosion; // 0xa00
	UParticleSystem* ClusterExplosionEffect; // 0xa08
	UMaterialInterface* ClusterExplosionDecalMaterial; // 0xa10
	FVector ClusterDecalScale; // 0xa18
	UStaticMesh* StopMesh; // 0xa28
};

struct AGameModeBase : AInfo {
	FString OptionsString; // 0x220
	AGameSession* GameSessionClass; // 0x230
	AGameStateBase* GameStateClass; // 0x238
	APlayerController* PlayerControllerClass; // 0x240
	APlayerState* PlayerStateClass; // 0x248
	AHUD* HUDClass; // 0x250
	APawn* DefaultPawnClass; // 0x258
	ASpectatorPawn* SpectatorClass; // 0x260
	APlayerController* ReplaySpectatorPlayerControllerClass; // 0x268
	AServerStatReplicator* ServerStatReplicatorClass; // 0x270
	AGameSession* GameSession; // 0x278
	AGameStateBase* GameState; // 0x280
	AServerStatReplicator* ServerStatReplicator; // 0x288
	FText DefaultPlayerName; // 0x290
	char bUseSeamlessTravel : 1; // 0x2a8
	char bStartPlayersAsSpectators : 1; // 0x2a8
	char bPauseable : 1; // 0x2a8
};

struct UMaterialExpressionDepthFade : UMaterialExpression {
	FExpressionInput InOpacity; // 0x40
	FExpressionInput FadeDistance; // 0x54
	float OpacityDefault; // 0x68
	float FadeDistanceDefault; // 0x6c
};

struct UMaterialExpressionFmod : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
};

struct USourceEffectRingModulationPreset : USoundEffectSourcePreset {
	FSourceEffectRingModulationSettings Settings; // 0x7c
};

struct UKSActivityRequirement_Item : UKSActivityRequirement {
	int32_t RequiredOwnedItemId; // 0x30
	int32_t RequiredItemQuantity; // 0x34
};

struct UDynamicSkinTable : UObject {
	TArray<FDataTableInfo> ActiveDataTables; // 0x28
	TArray<FDataTableInfo> InactiveDataTables; // 0x38
	FMulticastInlineDelegate OnFinishedAllPendingLoadsDel; // 0x48
	char bWantsToBeRecycled : 1; // 0x278
	TScriptInterface<ISkinTagAssetInterface> SkinTagAsset; // 0x280
};

struct UKSMasteryMiscReward : UPrimaryDataAsset {
	FText Name; // 0x30
	FText Description; // 0x48
	TSoftObjectPtr<UTexture2D> SoftIcon; // 0x60
	FGameplayTag RarityTag; // 0x88
	FText ItemTypeText; // 0x90
	EWeaponMasteryRewardPreviewType RewardPreviewType; // 0xa8
};

struct UCharacterMovementComponent : UPawnMovementComponent {
	ACharacter* CharacterOwner; // 0x148
	float GravityScale; // 0x150
	float MaxStepHeight; // 0x154
	float JumpZVelocity; // 0x158
	float JumpOffJumpZFactor; // 0x15c
	float WalkableFloorAngle; // 0x160
	float WalkableFloorZ; // 0x164
	EMovementMode MovementMode; // 0x168
	char CustomMovementMode; // 0x169
	ENetworkSmoothingMode NetworkSmoothingMode; // 0x16a
	float GroundFriction; // 0x16c
	float MaxWalkSpeed; // 0x18c
	float MaxWalkSpeedCrouched; // 0x190
	float MaxSwimSpeed; // 0x194
	float MaxFlySpeed; // 0x198
	float MaxCustomMovementSpeed; // 0x19c
	float MaxAcceleration; // 0x1a0
	float MinAnalogWalkSpeed; // 0x1a4
	float BrakingFrictionFactor; // 0x1a8
	float BrakingFriction; // 0x1ac
	float BrakingSubStepTime; // 0x1b0
	float BrakingDecelerationWalking; // 0x1b4
	float BrakingDecelerationFalling; // 0x1b8
	float BrakingDecelerationSwimming; // 0x1bc
	float BrakingDecelerationFlying; // 0x1c0
	float AirControl; // 0x1c4
	float AirControlBoostMultiplier; // 0x1c8
	float AirControlBoostVelocityThreshold; // 0x1cc
	float FallingLateralFriction; // 0x1d0
	float CrouchedHalfHeight; // 0x1d4
	float Buoyancy; // 0x1d8
	float PerchRadiusThreshold; // 0x1dc
	float PerchAdditionalHeight; // 0x1e0
	FRotator RotationRate; // 0x1e4
	char bUseSeparateBrakingFriction : 1; // 0x1f0
	char bApplyGravityWhileJumping : 1; // 0x1f0
	char bUseControllerDesiredRotation : 1; // 0x1f0
	char bOrientRotationToMovement : 1; // 0x1f0
	char bSweepWhileNavWalking : 1; // 0x1f0
	char bMovementInProgress : 1; // 0x1f0
	char bEnableScopedMovementUpdates : 1; // 0x1f0
	char bEnableServerDualMoveScopedMovementUpdates : 1; // 0x1f1
	char bForceMaxAccel : 1; // 0x1f1
	char bRunPhysicsWithNoController : 1; // 0x1f1
	char bForceNextFloorCheck : 1; // 0x1f1
	char bShrinkProxyCapsule : 1; // 0x1f1
	char bCanWalkOffLedges : 1; // 0x1f1
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x1f1
	char bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x1f2
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x1f2
	char bDeferUpdateMoveComponent : 1; // 0x1f2
	char bPreventMeshDoubleMode : 1; // 0x1f2
	char bEnablePhysicsInteraction : 1; // 0x1f2
	char bTouchForceScaledToMass : 1; // 0x1f2
	char bPushForceScaledToMass : 1; // 0x1f2
	char bPushForceUsingZOffset : 1; // 0x1f3
	char bScalePushForceToVelocity : 1; // 0x1f3
	USceneComponent* DeferredUpdatedMoveComponent; // 0x1f8
	float MaxOutOfWaterStepHeight; // 0x200
	float OutofWaterZ; // 0x204
	float Mass; // 0x208
	float StandingDownwardForceScale; // 0x20c
	float InitialPushForceFactor; // 0x210
	float PushForceFactor; // 0x214
	float PushForcePointZOffsetFactor; // 0x218
	float TouchForceFactor; // 0x21c
	float MinTouchForce; // 0x220
	float MaxTouchForce; // 0x224
	float RepulsionForce; // 0x228
	FVector Acceleration; // 0x22c
	FQuat LastUpdateRotation; // 0x240
	FVector LastUpdateLocation; // 0x250
	FVector LastUpdateVelocity; // 0x25c
	bool bHasQueuedServerMove; // 0x268
	FVector QueuedServerLocation; // 0x26c
	FQuat QueuedServerRotation; // 0x280
	EMovementMode ParallelUpdateMoveMode; // 0x298
	FTransform ParallelUpdateTransform; // 0x2a0
	float ServerLastTransformUpdateTimeStamp; // 0x2d0
	float ServerLastClientGoodMoveAckTime; // 0x2d4
	float ServerLastClientAdjustmentTime; // 0x2d8
	FVector PendingImpulseToApply; // 0x2dc
	FVector PendingForceToApply; // 0x2e8
	float AnalogInputModifier; // 0x2f4
	float MaxSimulationTimeStep; // 0x304
	int32_t MaxSimulationIterations; // 0x308
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x30c
	float MaxDepenetrationWithGeometry; // 0x310
	float MaxDepenetrationWithGeometryAsProxy; // 0x314
	float MaxDepenetrationWithPawn; // 0x318
	float MaxDepenetrationWithPawnAsProxy; // 0x31c
	float NetworkSimulatedSmoothLocationTime; // 0x320
	float NetworkSimulatedSmoothRotationTime; // 0x324
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x328
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x32c
	float NetProxyShrinkRadius; // 0x330
	float NetProxyShrinkHalfHeight; // 0x334
	float NetworkMaxSmoothUpdateDistance; // 0x338
	float NetworkNoSmoothUpdateDistance; // 0x33c
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x340
	float NetworkMinTimeBetweenClientAdjustments; // 0x344
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x348
	float NetworkLargeClientCorrectionDistance; // 0x34c
	float LedgeCheckThreshold; // 0x350
	float JumpOutOfWaterPitch; // 0x354
	FFindFloorResult CurrentFloor; // 0x358
	EMovementMode DefaultLandMovementMode; // 0x3ec
	EMovementMode DefaultWaterMovementMode; // 0x3ed
	EMovementMode GroundMovementMode; // 0x3ee
	char bMaintainHorizontalGroundVelocity : 1; // 0x3ef
	char bImpartBaseVelocityX : 1; // 0x3ef
	char bImpartBaseVelocityY : 1; // 0x3ef
	char bImpartBaseVelocityZ : 1; // 0x3ef
	char bImpartBaseAngularVelocity : 1; // 0x3ef
	char bJustTeleported : 1; // 0x3ef
	char bNetworkUpdateReceived : 1; // 0x3ef
	char bNetworkMovementModeChanged : 1; // 0x3ef
	char bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x3f0
	char bServerAcceptClientAuthoritativePosition : 1; // 0x3f0
	char bNotifyApex : 1; // 0x3f0
	char bCheatFlying : 1; // 0x3f0
	char bWantsToCrouch : 1; // 0x3f0
	char bCrouchMaintainsBaseLocation : 1; // 0x3f0
	char bIgnoreBaseRotation : 1; // 0x3f0
	char bFastAttachedMove : 1; // 0x3f0
	char bAlwaysCheckFloor : 1; // 0x3f1
	char bUseFlatBaseForFloorChecks : 1; // 0x3f1
	char bPerformingJumpOff : 1; // 0x3f1
	char bWantsToLeaveNavWalking : 1; // 0x3f1
	char bUseRVOAvoidance : 1; // 0x3f1
	char bRequestedMoveUseAcceleration : 1; // 0x3f1
	char bWasSimulatingRootMotion : 1; // 0x3f1
	char bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x3f2
	char bHasRequestedVelocity : 1; // 0x3f2
	char bRequestedMoveWithMaxSpeed : 1; // 0x3f2
	char bWasAvoidanceUpdated : 1; // 0x3f2
	char bProjectNavMeshWalking : 1; // 0x3f2
	char bProjectNavMeshOnBothWorldChannels : 1; // 0x3f2
	float AvoidanceConsiderationRadius; // 0x408
	FVector RequestedVelocity; // 0x40c
	int32_t AvoidanceUID; // 0x418
	FNavAvoidanceMask AvoidanceGroup; // 0x41c
	FNavAvoidanceMask GroupsToAvoid; // 0x420
	FNavAvoidanceMask GroupsToIgnore; // 0x424
	float AvoidanceWeight; // 0x428
	FVector PendingLaunchVelocity; // 0x42c
	float NavMeshProjectionInterval; // 0x4d8
	float NavMeshProjectionTimer; // 0x4dc
	float NavMeshProjectionInterpSpeed; // 0x4e0
	float NavMeshProjectionHeightScaleUp; // 0x4e4
	float NavMeshProjectionHeightScaleDown; // 0x4e8
	float NavWalkingFloorDistTolerance; // 0x4ec
	FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x4f0
	float MinTimeBetweenTimeStampResets; // 0x538
	FRootMotionSourceGroup CurrentRootMotion; // 0x540
	FRootMotionMovementParams RootMotionParams; // 0x610
	FVector AnimRootMotionVelocity; // 0x650
};

struct UMaterialExpressionThinTranslucentMaterialOutput : UMaterialExpressionCustomOutput {
	FExpressionInput TransmittanceColor; // 0x40
};

struct UKSBTD_GameState : UBTDecorator {
	bool bCheckMatchInProgress; // 0x68
	EBasicKeyOperation MatchInProgress; // 0x69
	bool bCheckInSetup; // 0x6a
	EBasicKeyOperation InSetup; // 0x6b
	bool bCheckMatchPhase; // 0x6c
	EBasicKeyOperation MatchPhase; // 0x6d
	FName MatchPhaseName; // 0x70
};

struct UInterpTrackFloatProp : UInterpTrackFloatBase {
	FName PropertyName; // 0x90
};

struct UKSCosmeticSlotDetails : UObject {
	UPlatformInventoryItem* CosmeticItem; // 0x28
	UPUMG_StoreItem* StoreItem; // 0x30
	UKSJobItem* AssociatedJobItem; // 0x38
	EMercCosmeticSlot MercCosmeticSlot; // 0x40
	EWeaponSlot WeaponSlot; // 0x41
	int32_t SlotPosition; // 0x44
	bool NavigatedFromNews; // 0x48
};

struct UMovieScene3DConstraintTrack : UMovieSceneTrack {
	TArray<UMovieSceneSection*> ConstraintSections; // 0x58
};

struct UMaterialExpressionConstant3Vector : UMaterialExpression {
	FLinearColor Constant; // 0x40
};

struct UWBP_TextInputButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UButton* EmailInputButtonWrapper; // 0x528
	UImage* HoverBG; // 0x530
	UEditableTextBox* InputField; // 0x538
	FText HintText; // 0x540
	FMulticastInlineDelegate OnTextChanged; // 0x558
};

struct ULoginExisting_C : UKSLoginExistingBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* MobileLayout; // 0x528
	UTextBlock* ActionText; // 0x530
	UButton* AnonLoginButton; // 0x538
	UGamepadPromptBasic_C* AnonLoginPromptGamepad; // 0x540
	UGamepadPromptBasic_C* AnonLoginPromptMouse; // 0x548
	UWidgetSwitcher* AnonLoginPromptSwitcher; // 0x550
	UImage* bkg; // 0x558
	UHorizontalBox* change_user_prompt; // 0x560
	UWBP_KeyCallout_C* ConsoleLoginPrompt; // 0x568
	UTextBlock* ErrorCode; // 0x570
	UHorizontalBox* ErrorWrapper; // 0x578
	UImage* Gradient; // 0x580
	UImage* highlightborder; // 0x588
	UImage* hirez_logo; // 0x590
	UImage* Image_47; // 0x598
	UImage* Image_531; // 0x5a0
	UImage* Image_607; // 0x5a8
	UImage* Image_610; // 0x5b0
	UHorizontalBox* login_prompt_wrapper; // 0x5b8
	UTextBlock* LoginAsGamertagText; // 0x5c0
	ULoginDownloadProgressBar_C* LoginDownloadProgressBar; // 0x5c8
	UCanvasPanel* LoginInterfaceAnonymous; // 0x5d0
	UCanvasPanel* LoginInterfaceApple; // 0x5d8
	UCanvasPanel* LoginInterfaceConsole; // 0x5e0
	UCanvasPanel* LoginInterfacePC; // 0x5e8
	UWidgetSwitcher* LoginInterfaceSwitcher; // 0x5f0
	UTextBlock* LoginPrompt; // 0x5f8
	UTextBlock* Password_Required_Msg; // 0x600
	UWBP_error_report_C* PasswordError; // 0x608
	UEditableTextBox* PasswordField; // 0x610
	UPopupButton_C* PCCreateButton; // 0x618
	UPopupButton_C* PCLoginButton; // 0x620
	UOutlineContainer_C* PCPassword; // 0x628
	UOutlineContainer_C* PCUsername; // 0x630
	UImage* roco_logo; // 0x638
	UButton* SignInWithAppleButton; // 0x640
	UImage* SIWA_Icon; // 0x648
	UTextBlock* Username_Required_Msg; // 0x650
	UWBP_error_report_C* UsernameError; // 0x658
	UEditableTextBox* UsernameField; // 0x660
	UTextBlock* VersionDisplay; // 0x668
	UImage* WarningIcon; // 0x670
	UTextBlock* WarningText; // 0x678
	UWBP_EpilepsyWarning_C* WBP_EpilepsyWarning; // 0x680
	UWBP_GameNotification_C* WBP_GameNotification; // 0x688
	UWBP_text_button_C* WBP_text_button_C_1; // 0x690
	UWBP_text_button_C* WBP_text_button_C_2; // 0x698
	UButton* XboxCalloutWrapper; // 0x6a0
	UWBP_KeyCallout_C* XboxChangeUserPrompt; // 0x6a8
	UPUMG_LoginDataFactory* LoginDataFac; // 0x6b0
	bool FirstLogin; // 0x6b8
	FName ProfileChangeAction; // 0x6bc
};

struct UWBP_StoreRotatorTick_C : UKSWidget {
	UBorder* TickMark; // 0x520
};

struct UWBP_WeaponMasteryLevelTracker_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* AnimOnLevelUp; // 0x528
	UTextBlock* AltDescText; // 0x530
	UCanvasPanel* CanvasPanel; // 0x538
	UImage* GlitchOverlay; // 0x540
	UScaleBox* Icon_2; // 0x548
	UImage* IconMasteryPoints_2; // 0x550
	UImage* Image; // 0x558
	UImage* Image_156; // 0x560
	UImage* Image_162; // 0x568
	USizeBox* LevelRewardWrapper; // 0x570
	UTextBlock* LevelUpText; // 0x578
	UTextBlock* MasteryPointsTextSmall_2; // 0x580
	UVerticalBox* MasteryRewardCalloutWrapper; // 0x588
	UTextBlock* NextRewardLabel; // 0x590
	UVerticalBox* PageTitle; // 0x598
	UVerticalBox* PageTitle_2; // 0x5a0
	UVerticalBox* ProgressGroup; // 0x5a8
	UWidgetSwitcher* ProgressGroupSwitcher; // 0x5b0
	UWidgetSwitcher* ProgressInfoSwitcher; // 0x5b8
	UImage* RewardShimmer; // 0x5c0
	UHorizontalBox* Tooltip; // 0x5c8
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay_3; // 0x5d0
	UWBP_WeaponMasteryBadgeLarge_C* WBP_WeaponMasteryBadgeLarge; // 0x5d8
	UTextBlock* WeaponCategoryText_2; // 0x5e0
	USizeBox* WeaponMasteryBadgeWrapper; // 0x5e8
	UTextBlock* WeaponNameText; // 0x5f0
	UTextBlock* WeaponNameText_2; // 0x5f8
	UWBP_ProgressEarnedBar_C* XPBar; // 0x600
	UImage* XPBarShimmer; // 0x608
	UTextBlock* XPCount; // 0x610
	UHorizontalBox* XPCountWrapper; // 0x618
};

struct UKSJobSelectCaptainStatusWidget : UKSJobSelectorWidget {
	FJobSelectionTask CachedCaptainTask; // 0x548
	UKSPersistentPlayerData* CachedCaptainPlayerData; // 0x590
	FKSPersistentPlayerId CachedCaptainId; // 0x598
};

struct UKSFriendDataFactory : UPUMG_FriendDataFactory {
	FMulticastInlineDelegate OnUpdateRecentlyPlayedPlayers; // 0x128
};

struct UARPin : UObject {
	UARTrackedGeometry* TrackedGeometry; // 0x28
	USceneComponent* PinnedComponent; // 0x30
	FTransform LocalToTrackingTransform; // 0x40
	FTransform LocalToAlignedTrackingTransform; // 0x70
	EARTrackingState TrackingState; // 0xa0
	FMulticastInlineDelegate OnARTrackingStateChanged; // 0xc0
	FMulticastInlineDelegate OnARTransformUpdated; // 0xd0
};

struct UWBP_EventGrandPrizeItem_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWidgetAnimation* animOnHover; // 0x4c8
	UWidgetAnimation* animOnClick; // 0x4d0
	UWidgetAnimation* animOnSelected; // 0x4d8
	UImage* Btn_BkgHoverGradient; // 0x4e0
	UImage* Btn_BkgPress; // 0x4e8
	UImage* Btn_Fill; // 0x4f0
	UImage* Btn_HoverStroke; // 0x4f8
	UImage* Btn_Stroke; // 0x500
	UOverlay* ButtonBackground; // 0x508
	USizeBox* CornerOverlay; // 0x510
	UWBP_ProgressEarnedBar_C* GrandPrizeProgress; // 0x518
	UButton* HitTarget; // 0x520
	UTextBlock* Next_BundleDesc; // 0x528
	UTextBlock* Next_BundleName; // 0x530
	UWBP_KSCosmeticItemDisplay_C* RewardItem; // 0x538
	UWidgetSwitcher* StatusSwitcher; // 0x540
	FMulticastInlineDelegate OnBundleItemClicked; // 0x548
	UPUMG_StoreItem* StoreItem_1; // 0x558
	bool bIsSelected; // 0x560
	UAkAudioEvent* GrandPrizeClickSound; // 0x568
	UAkAudioEvent* GrandPrizeHoverSound; // 0x570
};

struct AMagicLeapSharedWorldGameState : AGameState {
	FMagicLeapSharedWorldSharedData SharedWorldData; // 0x290
	FMagicLeapSharedWorldAlignmentTransforms AlignmentTransforms; // 0x2a0
	FMulticastInlineDelegate OnSharedWorldDataUpdated; // 0x2b0
	FMulticastInlineDelegate OnAlignmentTransformsUpdated; // 0x2c0
};

struct UGameMapsSettings : UObject {
	FString LocalMapOptions; // 0x28
	FSoftObjectPath TransitionMap; // 0x38
	bool bUseSplitscreen; // 0x50
	ETwoPlayerSplitScreenType TwoPlayerSplitscreenLayout; // 0x51
	EThreePlayerSplitScreenType ThreePlayerSplitscreenLayout; // 0x52
	EFourPlayerSplitScreenType FourPlayerSplitscreenLayout; // 0x53
	bool bOffsetPlayerGamepadIds; // 0x54
	FSoftClassPath GameInstanceClass; // 0x58
	FSoftObjectPath GameDefaultMap; // 0x70
	FSoftObjectPath ServerDefaultMap; // 0x88
	FSoftClassPath GlobalDefaultGameMode; // 0xa0
	FSoftClassPath GlobalDefaultServerGameMode; // 0xb8
	TArray<FGameModeName> GameModeMapPrefixes; // 0xd0
	TArray<FGameModeName> GameModeClassAliases; // 0xe0
};

struct UMediaTexture : UTexture {
	TextureAddress AddressX; // 0xb8
	TextureAddress AddressY; // 0xb9
	bool AutoClear; // 0xba
	FLinearColor ClearColor; // 0xbc
	bool EnableGenMips; // 0xcc
	char NumMips; // 0xcd
	UMediaPlayer* MediaPlayer; // 0xd0
};

struct URogueScreenLoadoutComponent : UPreviewActorLoadoutComponent {
	UKSJobItem* CurrentJob; // 0xb8
	UKSSkinBundle* OverrideSkin; // 0xc0
	TMap<UKSItem*, UKSItem*> SkinMap; // 0xc8
	bool bBoundToLoadoutFactory; // 0x118
	int32_t LastLoadoutId; // 0x11c
};

struct UWBP_GameNotification_C : UKSWidget {
	UTextBlock* BodyText; // 0x520
	UImage* Image_296; // 0x528
	UTextBlock* TitleText; // 0x530
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x538
};

struct UKSBTD_HasAmmo : UBTDecorator {
	FGameplayTag EquipPoint; // 0x68
	EArithmeticKeyOperation ClipOperation; // 0x70
	float ClipPercentage; // 0x74
	bool bOrCheck; // 0x78
	EArithmeticKeyOperation InventoryOperation; // 0x79
	float InventoryPercentage; // 0x7c
};

struct UVRNotificationsComponent : UActorComponent {
	FMulticastInlineDelegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate; // 0xb0
	FMulticastInlineDelegate HMDTrackingInitializedDelegate; // 0xc0
	FMulticastInlineDelegate HMDRecenteredDelegate; // 0xd0
	FMulticastInlineDelegate HMDLostDelegate; // 0xe0
	FMulticastInlineDelegate HMDReconnectedDelegate; // 0xf0
	FMulticastInlineDelegate HMDConnectCanceledDelegate; // 0x100
	FMulticastInlineDelegate HMDPutOnHeadDelegate; // 0x110
	FMulticastInlineDelegate HMDRemovedFromHeadDelegate; // 0x120
	FMulticastInlineDelegate VRControllerRecenteredDelegate; // 0x130
};

struct USoundWave : USoundBase {
	int32_t CompressionQuality; // 0x160
	int32_t StreamingPriority; // 0x164
	ESoundwaveSampleRateSettings SampleRateQuality; // 0x168
	ESoundGroup SoundGroup; // 0x16a
	char bLooping : 1; // 0x16b
	char bStreaming : 1; // 0x16b
	char bSeekableStreaming : 1; // 0x16b
	ESoundWaveLoadingBehavior LoadingBehavior; // 0x16c
	char bMature : 1; // 0x16d
	char bManualWordWrap : 1; // 0x16d
	char bSingleLine : 1; // 0x16d
	char bIsAmbisonics : 1; // 0x16e
	TArray<float> FrequenciesToAnalyze; // 0x170
	TArray<FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x180
	TArray<FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x190
	int32_t InitialChunkSize; // 0x1a0
	FString SpokenText; // 0x1e8
	float SubtitlePriority; // 0x1f8
	float Volume; // 0x1fc
	float Pitch; // 0x200
	int32_t NumChannels; // 0x204
	int32_t SampleRate; // 0x208
	TArray<FSubtitleCue> Subtitles; // 0x218
	UCurveTable* Curves; // 0x228
	UCurveTable* InternalCurves; // 0x230
};

struct UDataAsset : UObject {
	UDataAsset* NativeClass; // 0x28
};

struct UBTDecorator_TagCooldown : UBTDecorator {
	FGameplayTag CooldownTag; // 0x68
	float CooldownDuration; // 0x70
	bool bAddToExistingDuration; // 0x74
	bool bActivatesCooldown; // 0x75
};

struct UAkItemBoolProperties : UWidget {
	FMulticastInlineDelegate OnSelectionChanged; // 0x110
	FMulticastInlineDelegate OnPropertyDragged; // 0x120
};

struct UWBP_StoreDiscountTagPriceButton_C : UUserWidget {
	UTextBlock* DiscountTag; // 0x238
};

struct UChaosClothConfig : UClothConfigCommon {
	EClothMassMode MassMode; // 0x28
	float UniformMass; // 0x2c
	float TotalMass; // 0x30
	float Density; // 0x34
	float MinPerParticleMass; // 0x38
	float EdgeStiffness; // 0x3c
	float BendingStiffness; // 0x40
	float AreaStiffness; // 0x44
	float VolumeStiffness; // 0x48
	float StrainLimitingStiffness; // 0x4c
	float LimitScale; // 0x50
	bool bUseGeodesicDistance; // 0x54
	float ShapeTargetStiffness; // 0x58
	float CollisionThickness; // 0x5c
	float FrictionCoefficient; // 0x60
	float DampingCoefficient; // 0x64
	float DragCoefficient; // 0x68
	float AnimDriveSpringStiffness; // 0x6c
	bool bUseBendingElements; // 0x70
	bool bUseTetrahedralConstraints; // 0x71
	bool bUseThinShellVolumeConstraints; // 0x72
	bool bUseSelfCollisions; // 0x73
	bool bUseContinuousCollisionDetection; // 0x74
	FVector LinearVelocityScale; // 0x78
	float AngularVelocityScale; // 0x84
};

struct UPUMG_GenericRouteDataObject : UObject {
	FString StringValue; // 0x28
	int32_t IntValue; // 0x38
	FName NameValue; // 0x3c
};

struct AKSJobSelectZone : AActor {
	float InteractTime; // 0x228
	UKSInteractionType* InteractionType; // 0x230
	FName InteractionMode; // 0x238
	bool bCanInteractFromBehind; // 0x240
	bool bForceLOS; // 0x241
	FText InteractPromptText; // 0x248
	TSet<AKSCharacter*> CurrentZoneUsers; // 0x260
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x2b0
	UKSInteractableComponent* InteractableComponent; // 0x2b8
};

struct UGizmoUniformScaleParameterSource : UGizmoBaseVec2ParameterSource {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x48
	TScriptInterface<IGizmoTransformSource> TransformSource; // 0x58
	float ScaleMultiplier; // 0x68
	FVector2D Parameter; // 0x6c
	FGizmoVec2ParameterChange LastChange; // 0x74
	FVector CurScaleOrigin; // 0x84
	FVector CurScaleNormal; // 0x90
	FVector CurScaleAxisX; // 0x9c
	FVector CurScaleAxisY; // 0xa8
	FTransform InitialTransform; // 0xc0
};

struct UAssetMappingTable : UObject {
	TArray<FAssetMapping> MappedAssets; // 0x28
};

struct AKSPersistentDataReplicator : AInfo {
	FAccountJobStatReplicator StatsReplicator; // 0x220
};

struct UARTrackedImage : UARTrackedGeometry {
	UARCandidateImage* DetectedImage; // 0xe8
	FVector2D EstimatedSize; // 0xf0
};

struct UGizmoBaseComponent : UPrimitiveComponent {
	FLinearColor Color; // 0x430
	float HoverSizeMultiplier; // 0x440
	float PixelHitDistanceThreshold; // 0x444
};

struct UKSPlayerMod_RevealTarget : UKSPlayerMod {
	FKSRevealInfo RevealParameters; // 0x330
};

struct UMaterialExpressionTextureNumMips : UMaterialExpressionTextureBase {
	FExpressionInput TextureObject; // 0x50
};

struct UMaterialExpressionLandscapeLayerCoords : UMaterialExpression {
	ETerrainCoordMappingType MappingType; // 0x40
	ELandscapeCustomizedCoordType CustomUVType; // 0x41
	float MappingScale; // 0x44
	float MappingRotation; // 0x48
	float MappingPanU; // 0x4c
	float MappingPanV; // 0x50
};

struct UWBP_InWorld_Reticle_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* BatteryImage; // 0x240
	USizeBox* BottomReticle_B; // 0x248
	USizeBox* BottomReticle_M; // 0x250
	USizeBox* BottomReticle_T; // 0x258
	UImage* HR_LeftReticle_L; // 0x260
	UImage* HR_RightReticle_R; // 0x268
	UImage* Image_74; // 0x270
	UInvalidationBox* InvalidationBox_1; // 0x278
	USizeBox* LeftReticle_L; // 0x280
	UImage* MiddleReticle; // 0x288
	UImage* Reticle_Brackets; // 0x290
	UImage* ReticleBorder_Bottom; // 0x298
	UImage* ReticleBorder_Left; // 0x2a0
	UImage* ReticleBorder_Right; // 0x2a8
	UImage* ReticleBorder_Top; // 0x2b0
	USizeBox* RightReticle_R; // 0x2b8
	USizeBox* TopReticle; // 0x2c0
	UImage* VR_BottomReticle_B; // 0x2c8
	UImage* VR_BottomReticle_M; // 0x2d0
	UImage* VR_BottomReticle_T; // 0x2d8
	UImage* VR_TopReticle; // 0x2e0
	UWBP_InWorld_ReticleComponents_C* WBP_InWorld_ReticleComponents; // 0x2e8
	UImage* ZoomImage; // 0x2f0
	TArray<UImage*> ReticleImages; // 0x2f8
	TArray<UKSModInst_Activated*> ModInstances; // 0x308
};

struct AKSWeapon_Targeted : AKSWeapon {
	FMulticastInlineDelegate DisplayTargetList; // 0x6d8
	FMulticastInlineDelegate TargetSelectCancelled; // 0x6e8
	TArray<AActor*> PotentialTargets; // 0x6f8
	bool SelectTargetOnRetrieve; // 0x708
	TWeakObjectPtr<AActor> TargetedActor; // 0x70c
};

struct AActor : UObject {
	FActorTickFunction PrimaryActorTick; // 0x28
	char bNetTemporary : 1; // 0x58
	char bNetStartup : 1; // 0x58
	char bOnlyRelevantToOwner : 1; // 0x58
	char bAlwaysRelevant : 1; // 0x58
	char bReplicateMovement : 1; // 0x58
	char bHidden : 1; // 0x58
	char bTearOff : 1; // 0x58
	char bExchangedRoles : 1; // 0x58
	char bNetLoadOnClient : 1; // 0x59
	char bNetUseOwnerRelevancy : 1; // 0x59
	char bRelevantForNetworkReplays : 1; // 0x59
	char bRelevantForLevelBounds : 1; // 0x59
	char bReplayRewindable : 1; // 0x59
	char bAllowTickBeforeBeginPlay : 1; // 0x59
	char bAutoDestroyWhenFinished : 1; // 0x59
	char bCanBeDamaged : 1; // 0x59
	char bBlockInput : 1; // 0x5a
	char bCollideWhenPlacing : 1; // 0x5a
	char bFindCameraComponentWhenViewTarget : 1; // 0x5a
	char bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x5a
	char bIgnoresOriginShifting : 1; // 0x5a
	char bEnableAutoLODGeneration : 1; // 0x5a
	char bIsEditorOnlyActor : 1; // 0x5a
	char bActorSeamlessTraveled : 1; // 0x5a
	char bReplicates : 1; // 0x5b
	char bCanBeInCluster : 1; // 0x5b
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x5b
	char bActorEnableCollision : 1; // 0x5c
	char bActorIsBeingDestroyed : 1; // 0x5c
	EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x5d
	EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x5e
	ENetRole RemoteRole; // 0x5f
	FRepMovement ReplicatedMovement; // 0x60
	float InitialLifeSpan; // 0x94
	float CustomTimeDilation; // 0x98
	FRepAttachment AttachmentReplication; // 0xa0
	AActor* Owner; // 0xe0
	FName NetDriverName; // 0xe8
	ENetRole Role; // 0xf0
	ENetDormancy NetDormancy; // 0xf1
	ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0xf2
	EAutoReceiveInput AutoReceiveInput; // 0xf3
	int32_t InputPriority; // 0xf4
	UInputComponent* InputComponent; // 0xf8
	float NetCullDistanceSquared; // 0x100
	int32_t NetTag; // 0x104
	float NetUpdateFrequency; // 0x108
	float MinNetUpdateFrequency; // 0x10c
	float NetPriority; // 0x110
	APawn* Instigator; // 0x118
	TArray<AActor*> Children; // 0x120
	USceneComponent* RootComponent; // 0x130
	TArray<AMatineeActor*> ControllingMatineeActors; // 0x138
	TArray<FName> Layers; // 0x150
	TWeakObjectPtr<UChildActorComponent> ParentComponent; // 0x160
	TArray<FName> Tags; // 0x170
	FMulticastSparseDelegate OnTakeAnyDamage; // 0x180
	FMulticastSparseDelegate OnTakePointDamage; // 0x181
	FMulticastSparseDelegate OnTakeRadialDamage; // 0x182
	FMulticastSparseDelegate OnActorBeginOverlap; // 0x183
	FMulticastSparseDelegate OnActorEndOverlap; // 0x184
	FMulticastSparseDelegate OnBeginCursorOver; // 0x185
	FMulticastSparseDelegate OnEndCursorOver; // 0x186
	FMulticastSparseDelegate OnClicked; // 0x187
	FMulticastSparseDelegate OnReleased; // 0x188
	FMulticastSparseDelegate OnInputTouchBegin; // 0x189
	FMulticastSparseDelegate OnInputTouchEnd; // 0x18a
	FMulticastSparseDelegate OnInputTouchEnter; // 0x18b
	FMulticastSparseDelegate OnInputTouchLeave; // 0x18c
	FMulticastSparseDelegate OnActorHit; // 0x18d
	FMulticastSparseDelegate OnDestroyed; // 0x18e
	FMulticastSparseDelegate OnEndPlay; // 0x18f
	TArray<UActorComponent*> InstanceComponents; // 0x1f0
	TArray<UActorComponent*> BlueprintCreatedComponents; // 0x200
};

struct USimpleConstructionScript : UObject {
	TArray<USCS_Node*> RootNodes; // 0x28
	TArray<USCS_Node*> AllNodes; // 0x38
	USCS_Node* DefaultSceneRootNode; // 0x48
};

struct UParticleModuleVectorFieldGlobal : UParticleModuleVectorFieldBase {
	char bOverrideGlobalVectorFieldTightness : 1; // 0x30
	float GlobalVectorFieldScale; // 0x34
	float GlobalVectorFieldTightness; // 0x38
};

struct USphereReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadius; // 0x280
	float CaptureDistanceScale; // 0x284
	UDrawSphereComponent* PreviewInfluenceRadius; // 0x288
};

struct UWBP_SeasonalChallengePanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetSwitcher* ButtonSwitcher; // 0x528
	UImage* chevron; // 0x530
	UImage* chevron_2; // 0x538
	UHorizontalBox* ChooseActiveMissionWrapper; // 0x540
	USizeBox* GamepadButton; // 0x548
	UWBP_ChallengeEntry_CardHorizontal_C* WBP_ChallengeEntry_CardHorizontal; // 0x550
	UWBP_KeyCallout_C* WBP_KeyCallout_4; // 0x558
};

struct UMaterialExpressionNormalize : UMaterialExpression {
	FExpressionInput VectorInput; // 0x40
};

struct UParticleModuleBeamTarget : UParticleModuleBeamBase {
	Beam2SourceTargetMethod TargetMethod; // 0x30
	FName TargetName; // 0x34
	FRawDistributionVector Target; // 0x40
	char bTargetAbsolute : 1; // 0x88
	char bLockTarget : 1; // 0x88
	Beam2SourceTargetTangentMethod TargetTangentMethod; // 0x8c
	FRawDistributionVector TargetTangent; // 0x90
	char bLockTargetTangent : 1; // 0xd8
	FRawDistributionFloat TargetStrength; // 0xe0
	char bLockTargetStength : 1; // 0x110
	float LockRadius; // 0x114
};

struct UUdpMessagingSettings : UObject {
	bool EnableTransport; // 0x28
	bool bAutoRepair; // 0x29
	bool bStopServiceWhenAppDeactivates; // 0x2a
	FString UnicastEndpoint; // 0x30
	FString MulticastEndpoint; // 0x40
	EUdpMessageFormat MessageFormat; // 0x50
	char MulticastTimeToLive; // 0x51
	TArray<FString> StaticEndpoints; // 0x58
	bool EnableTunnel; // 0x68
	FString TunnelUnicastEndpoint; // 0x70
	FString TunnelMulticastEndpoint; // 0x80
	TArray<FString> RemoteTunnelEndpoints; // 0x90
};

struct AKSSeasonalEventLoader : AActor {
	FMulticastInlineDelegate OnFinishedSublevelLoadEvent; // 0x220
	TMap<FString, FSeasonalSublevels> SeasonalEventNamesAndSublevels; // 0x230
};

struct UDamageNumberDisplayWidget : UUserWidget {
	FMulticastInlineDelegate OnNumberAnimationComplete; // 0x238
	AActor* DamageTarget; // 0x248
	FVector InitialDamageLocation; // 0x250
	bool TetherToEventLocation; // 0x25c
	float DamageAmount; // 0x260
	EDamageBaseType DamageBaseType; // 0x264
	EDamageFlourishType DamageFlourishType; // 0x265
	EDamageModifier DamageModifier; // 0x266
	EKSUIDamageTargetType DamageTargetType; // 0x267
	float DelayBeforeAnimation; // 0x268
	float StackWaitTime; // 0x26c
	bool PlayingNumberAnimation; // 0x270
	float VerticalWorldOffset; // 0x274
	bool ChangePosition; // 0x278
};

struct UWBP_RogueMasteryTrackLevel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnSelect; // 0x528
	UWidgetAnimation* OnHover; // 0x530
	UHorizontalBox* GamepadNavCallouts; // 0x538
	UButton* HitTarget; // 0x540
	UHorizontalBox* NextCalloutSection; // 0x548
	UImage* NodeLocked; // 0x550
	UImage* NodeSelected; // 0x558
	UWidgetSwitcher* NodeSwitcher; // 0x560
	UImage* NodeUnlocked; // 0x568
	UHorizontalBox* PreviousCalloutSection; // 0x570
	UHorizontalBox* RewardsContainer; // 0x578
	UOverlay* RewardsWrapper; // 0x580
	UImage* SelectedFrame; // 0x588
	UWBP_RogueMasteryIcon_C* WBP_MercMasteryIcon; // 0x590
	FMulticastInlineDelegate OnTrackLevelSelected; // 0x598
	FActivityTier ActivityData; // 0x5a8
	PGAME_INPUT_STATE InputState; // 0x5e8
	bool IsSelected; // 0x5e9
	bool IsAchieved; // 0x5ea
	UAkAudioEvent* ClickStandardBtnInnerSFX; // 0x5f0
	UAkAudioEvent* HoverStandardBtnInnerSFX; // 0x5f8
	bool HasGamepadFocus; // 0x600
};

struct UAITask : UGameplayTask {
	AAIController* OwnerController; // 0x68
};

struct UEnvQueryTest_GameplayTags : UEnvQueryTest {
	FGameplayTagQuery TagQueryToMatch; // 0x1f8
	bool bUpdatedToUseQuery; // 0x240
	EGameplayContainerMatchType TagsToMatch; // 0x241
	FGameplayTagContainer GameplayTags; // 0x248
};

struct UGeometryCollectionDebugDrawComponent : UActorComponent {
	AGeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor; // 0xb0
	AGeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor; // 0xb8
};

struct UPawnAction_Sequence : UPawnAction {
	TArray<UPawnAction*> ActionSequence; // 0x98
	EPawnActionFailHandling ChildFailureHandlingMode; // 0xa8
	UPawnAction* RecentActionCopy; // 0xb0
};

struct UPostEventAtLocationAsync : UBlueprintAsyncActionBase {
	FMulticastInlineDelegate Completed; // 0x30
};

struct UParticleModuleLocationPrimitiveSphere_Seeded : UParticleModuleLocationPrimitiveSphere {
	FParticleRandomSeedInfo RandomSeedInfo; // 0xe0
};

struct UWBP_RelatedRoguesGroup_C : UKSRelatedRoguesGroup {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWrapBox* EntryContainer; // 0x528
	UTextBlock* Label; // 0x530
	USizeBox* ShowLabel; // 0x538
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE; // 0x540
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_2; // 0x548
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_3; // 0x550
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_4; // 0x558
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_5; // 0x560
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_6; // 0x568
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_7; // 0x570
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_8; // 0x578
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_9; // 0x580
	UWBP_RelatedRogueEntry_C* WBP_RelatedRogueEntry_EXAMPLE_10; // 0x588
	bool bHideLabel; // 0x590
};

struct AAkAcousticPortal : AVolume {
	AkAcousticPortalState InitialState; // 0x258
	float ObstructionRefreshInterval; // 0x25c
	ECollisionChannel ObstructionCollisionChannel; // 0x260
};

struct UInputKeySelector : UWidget {
	FButtonStyle WidgetStyle; // 0x110
	FTextBlockStyle TextStyle; // 0x388
	FInputChord SelectedKey; // 0x5f0
	FSlateFontInfo Font; // 0x610
	FMargin Margin; // 0x660
	FLinearColor ColorAndOpacity; // 0x670
	FText KeySelectionText; // 0x680
	FText NoKeySpecifiedText; // 0x698
	bool bAllowModifierKeys; // 0x6b0
	bool bAllowGamepadKeys; // 0x6b1
	TArray<FKey> EscapeKeys; // 0x6b8
	FMulticastInlineDelegate OnKeySelected; // 0x6c8
	FMulticastInlineDelegate OnIsSelectingKeyChanged; // 0x6d8
};

struct USynthSound : USoundWaveProcedural {
	USynthComponent* OwningSynthComponent; // 0x360
};

struct UBTComposite_SimpleParallel : UBTCompositeNode {
	EBTParallelMode FinishMode; // 0x90
};

struct UKSWeaponCategoryButton : UKSWidget {
	TSoftObjectPtr<UKSWeaponCategoryAsset> WeaponCategory; // 0x520
};

struct UGridSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
	int32_t Row; // 0x4c
	int32_t RowSpan; // 0x50
	int32_t column; // 0x54
	int32_t ColumnSpan; // 0x58
	int32_t Layer; // 0x5c
	FVector2D Nudge; // 0x60
};

struct UKSActivityRequirement_Achievements : UKSActivityRequirement {
	bool RequireEnabled; // 0x30
};

struct UEditableGameplayTagQueryExpression_NoTagsMatch : UEditableGameplayTagQueryExpression {
	FGameplayTagContainer Tags; // 0x28
};

struct AEnvironmentVolume : ATriggerVolume {
	FName EnvironmentTag; // 0x260
};

struct UAkGeometryComponent : USceneComponent {
	AkMeshType MeshType; // 0x208
	int32_t LOD; // 0x20c
	TMap<UMaterialInterface*, FAkGeometrySurfaceOverride> StaticMeshSurfaceOverride; // 0x210
	FAkGeometrySurfaceOverride CollisionMeshSurfaceOverride; // 0x260
	char bEnableDiffraction : 1; // 0x270
	char bEnableDiffractionOnBoundaryEdges : 1; // 0x270
	AActor* AssociatedRoom; // 0x278
	FAkGeometryData GeometryData; // 0x288
};

struct UKSSpecialty : UKSItem {
	int32_t RequiredUnlockLevel; // 0x250
	TSoftObjectPtr<UTexture2D> DynamicPoseImage; // 0x258
	TSoftObjectPtr<UTexture2D> BannerIcon; // 0x280
	TSoftObjectPtr<UTexture2D> LeftBannerIcon; // 0x2a8
	TSoftObjectPtr<UTexture2D> RightBannerIcon; // 0x2d0
	TSoftObjectPtr<UTexture2D> SmallIcon; // 0x2f8
	TArray<TSoftObjectPtr<UKSPlayerMod>> AvailableKillstreaks; // 0x320
	TArray<TSoftObjectPtr<UKSPlayerMod>> AvailableAbilities; // 0x330
	TArray<TSoftObjectPtr<UKSWeaponAsset>> AvailableGadgets; // 0x340
	TArray<TSoftObjectPtr<UKSWeaponAsset>> AvailablePistols; // 0x350
	TArray<TSoftObjectPtr<UKSWeaponAttachment>> AvailableWeaponAttachments; // 0x360
	ESpecialtyRoleType RoleType; // 0x370
	TArray<TSoftObjectPtr<UKSPlayerMod>> AutoEquippedMods; // 0x378
	TSoftObjectPtr<UPerkCategory> PerkSlotOneCategory; // 0x388
	TSoftObjectPtr<UPerkCategory> PerkSlotTwoCategory; // 0x3b0
};

struct UMovieSceneSignedObject : UObject {
	FGuid Signature; // 0x28
};

struct UExpandableArea : UWidget {
	FExpandableAreaStyle Style; // 0x118
	FSlateBrush BorderBrush; // 0x238
	FSlateColor BorderColor; // 0x2c0
	bool bIsExpanded; // 0x2e8
	float MaxHeight; // 0x2ec
	FMargin HeaderPadding; // 0x2f0
	FMargin AreaPadding; // 0x300
	FMulticastInlineDelegate OnExpansionChanged; // 0x310
	UWidget* HeaderContent; // 0x320
	UWidget* BodyContent; // 0x328
};

struct USoundGroups : UObject {
	TArray<FSoundGroup> SoundGroupProfiles; // 0x28
};

struct UCrowdManager : UCrowdManagerBase {
	ANavigationData* MyNavData; // 0x28
	TArray<FCrowdAvoidanceConfig> AvoidanceConfig; // 0x30
	TArray<FCrowdAvoidanceSamplingPattern> SamplingPatterns; // 0x40
	int32_t MaxAgents; // 0x50
	float MaxAgentRadius; // 0x54
	int32_t MaxAvoidedAgents; // 0x58
	int32_t MaxAvoidedWalls; // 0x5c
	float NavmeshCheckInterval; // 0x60
	float PathOptimizationInterval; // 0x64
	float SeparationDirClamp; // 0x68
	float PathOffsetRadiusMultiplier; // 0x6c
	char bResolveCollisions : 1; // 0x70
};

struct UInAppPurchaseRestoreCallbackProxy : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct UAkComponent : UAkGameObject {
	bool bUseSpatialAudio; // 0x228
	ECollisionChannel OcclusionCollisionChannel; // 0x230
	char EnableSpotReflectors : 1; // 0x234
	UAkAuxBus* EarlyReflectionAuxBus; // 0x238
	FString EarlyReflectionAuxBusName; // 0x240
	int32_t EarlyReflectionOrder; // 0x250
	float EarlyReflectionBusSendGain; // 0x254
	float EarlyReflectionMaxPathLength; // 0x258
	float roomReverbAuxBusGain; // 0x25c
	int32_t diffractionMaxEdges; // 0x260
	int32_t diffractionMaxPaths; // 0x264
	float diffractionMaxPathLength; // 0x268
	char DrawFirstOrderReflections : 1; // 0x26c
	char DrawSecondOrderReflections : 1; // 0x26c
	char DrawHigherOrderReflections : 1; // 0x26c
	char DrawDiffraction : 1; // 0x26c
	bool StopWhenOwnerDestroyed; // 0x270
	float CurrentMaxAttenuation; // 0x274
	float AttenuationScalingFactor; // 0x278
	float OcclusionRefreshInterval; // 0x27c
	bool bUseReverbVolumes; // 0x280
};

struct UMovieSceneMediaSection : UMovieSceneSection {
	UMediaSource* MediaSource; // 0xe0
	bool bLooping; // 0xe8
	FFrameNumber StartFrameOffset; // 0xec
	UMediaTexture* MediaTexture; // 0xf0
	UMediaSoundComponent* MediaSoundComponent; // 0xf8
	bool bUseExternalMediaPlayer; // 0x100
	UMediaPlayer* ExternalMediaPlayer; // 0x108
};

struct ALandscapeProxy : AActor {
	ULandscapeSplinesComponent* SplineComponent; // 0x220
	FGuid LandscapeGuid; // 0x228
	FIntPoint LandscapeSectionOffset; // 0x238
	int32_t MaxLODLevel; // 0x240
	float LODDistanceFactor; // 0x244
	ELandscapeLODFalloff LODFalloff; // 0x248
	float ComponentScreenSizeToUseSubSections; // 0x24c
	float LOD0ScreenSize; // 0x250
	float LOD0DistributionSetting; // 0x254
	float LODDistributionSetting; // 0x258
	float TessellationComponentScreenSize; // 0x25c
	bool UseTessellationComponentScreenSizeFalloff; // 0x260
	float TessellationComponentScreenSizeFalloff; // 0x264
	int32_t OccluderGeometryLOD; // 0x268
	int32_t StaticLightingLOD; // 0x26c
	UPhysicalMaterial* DefaultPhysMaterial; // 0x270
	float StreamingDistanceMultiplier; // 0x278
	UMaterialInterface* LandscapeMaterial; // 0x280
	UMaterialInterface* LandscapeHoleMaterial; // 0x2a8
	TArray<FLandscapeProxyMaterialOverride> LandscapeMaterialsOverride; // 0x2b0
	bool bMeshHoles; // 0x2c0
	char MeshHolesMaxLod; // 0x2c1
	TArray<URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x2c8
	int32_t VirtualTextureNumLods; // 0x2d8
	int32_t VirtualTextureLodBias; // 0x2dc
	ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x2e0
	float NegativeZBoundsExtension; // 0x2e4
	float PositiveZBoundsExtension; // 0x2e8
	TArray<ULandscapeComponent*> LandscapeComponents; // 0x2f0
	TArray<ULandscapeHeightfieldCollisionComponent*> CollisionComponents; // 0x300
	TArray<UHierarchicalInstancedStaticMeshComponent*> FoliageComponents; // 0x310
	bool bHasLandscapeGrass; // 0x384
	float StaticLightingResolution; // 0x388
	char bCastStaticShadow : 1; // 0x38c
	char bCastShadowAsTwoSided : 1; // 0x38c
	char bCastFarShadow : 1; // 0x38c
	char bAffectDistanceFieldLighting : 1; // 0x390
	FLightingChannels LightingChannels; // 0x391
	char bUseMaterialPositionOffsetInStaticLighting : 1; // 0x394
	char bRenderCustomDepth : 1; // 0x394
	int32_t CustomDepthStencilValue; // 0x398
	float LDMaxDrawDistance; // 0x39c
	FLightmassPrimitiveSettings LightmassSettings; // 0x3a0
	int32_t CollisionMipLevel; // 0x3bc
	int32_t SimpleCollisionMipLevel; // 0x3c0
	float CollisionThickness; // 0x3c4
	FBodyInstance BodyInstance; // 0x3c8
	char bGenerateOverlapEvents : 1; // 0x4d8
	char bBakeMaterialPositionOffsetIntoCollision : 1; // 0x4d8
	int32_t ComponentSizeQuads; // 0x4dc
	int32_t SubsectionSizeQuads; // 0x4e0
	int32_t NumSubsections; // 0x4e4
	char bUsedForNavigation : 1; // 0x4e8
	char bFillCollisionUnderLandscapeForNavmesh : 1; // 0x4e8
	bool bUseDynamicMaterialInstance; // 0x4ec
	ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x4ed
	bool bUseLandscapeForCullingInvisibleHLODVertices; // 0x4ee
	bool bHasLayersContent; // 0x4ef
	TMap<UTexture2D*, ULandscapeWeightmapUsage*> WeightmapUsageMap; // 0x4f0
};

struct UKSEventChallengesManager : UKSActivityManagerBase {
	FMulticastInlineDelegate OnEventChallengeActivitiesReady; // 0x228
	FMulticastInlineDelegate OnSelectedChallengeChanged; // 0x238
	bool EventChallengesReady; // 0x248
};

struct ULandscapeWeightmapUsage : UObject {
	ULandscapeComponent* ChannelUsage[0x4]; // 0x28
	FGuid LayerGuid; // 0x48
};

struct UKSRadialMenuManager : UActorComponent {
	AKSPlayerController* CachedOwner; // 0xb0
	bool bThrottleQuipsAndComms; // 0xb8
	int32_t QuipsAndCommsAllowedBeforeThrottle; // 0xbc
	float QuipAndCommThrottleDetectionPeriod; // 0xc0
	float QuipAndCommThrottleCooldown; // 0xc4
	int32_t CurrentQuipsAndCommsBeforeThrottle; // 0xc8
	bool bQuipsAndCommsCurrentlyThrottled; // 0xcc
};

struct UWBP_ChallengeView_EventContracts_C : UKSEventChallengesModal {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UVerticalBox* ContractContainer; // 0x528
	UTextBlock* DescText; // 0x530
	UHorizontalBox* DescWrapper; // 0x538
	UImage* Image_362; // 0x540
	UTextBlock* TimeRemaining; // 0x548
	UWidgetSwitcher* TimerSwitcher; // 0x550
	UWBP_ChallengeEntry_Event_C* WBP_ChallengeEntry_Event_C_1; // 0x558
	UWBP_ChallengeEntry_Event_C* WBP_ChallengeEntry_Event_C_2; // 0x560
	UWBP_ChallengeEntry_Event_C* WBP_ChallengeEntry_Event_C_3; // 0x568
	UScrollBox* WeeklyTrackScrollBox; // 0x570
	int32_t NumWeeks; // 0x578
};

struct UChannel : UObject {
	UNetConnection* Connection; // 0x28
};

struct UThermalScopePPComponent : UActorComponent {
	UThermalScopeManagerComponent* ManagerComponent; // 0xb0
	AKSPlayerCameraManager* CameraManagerOwner; // 0xb8
	UMaterialInterface* ThermalPostProcessMaterial; // 0xc0
	UMaterialInstanceDynamic* ThermalPostProcessMaterialDynamic; // 0xc8
};

struct UMaterialExpressionTransform : UMaterialExpression {
	FExpressionInput Input; // 0x40
	EMaterialVectorCoordTransformSource TransformSourceType; // 0x54
	EMaterialVectorCoordTransform TransformType; // 0x55
};

struct UTexture2D : UTexture {
	int32_t LevelIndex; // 0xb8
	int32_t FirstResourceMemMip; // 0xbc
	char bTemporarilyDisableStreaming : 1; // 0xc0
	TextureAddress AddressX; // 0xc1
	TextureAddress AddressY; // 0xc2
	FIntPoint ImportedSize; // 0xc4
};

struct UMaterialExpressionFeatureLevelSwitch : UMaterialExpression {
	FExpressionInput Default; // 0x40
	FExpressionInput Inputs[0x4]; // 0x54
};

struct UAnimNotify_PlaySound : UAnimNotify {
	USoundBase* Sound; // 0x38
	float VolumeMultiplier; // 0x40
	float PitchMultiplier; // 0x44
	char bFollow : 1; // 0x48
	FName AttachName; // 0x4c
};

struct UKSVehicleSeatComponent : USceneComponent {
	float SeatPriority; // 0x208
	FReplicatedViewInfo MainCameraViewInfo; // 0x20c
	FReplicatedViewInfo AimCameraViewInfo; // 0x214
	FName AttachSocket; // 0x234
	UAnimMontage* GetInSequence; // 0x240
	UAnimMontage* GetOutSequence; // 0x248
	UAnimSequence* IdleSequence; // 0x250
	UAnimSequence* LeanOutSequence; // 0x258
};

struct ULevelCapture : UMovieSceneCapture {
	bool bAutoStartCapture; // 0x220
	FGuid PrerequisiteActorId; // 0x22c
};

struct USkinnableStaticMeshComponent : UStaticMeshComponent {
	bool bDelaySkinUpdatesUntilTick; // 0x4e8
	bool bSkinUpdateIsQueued; // 0x4e9
	FName StaticMeshKeyword; // 0x4ec
	UStaticMesh* FailSafeStaticMesh; // 0x4f8
	UMultiSkinObject* SkinObject; // 0x500
	bool bAllowMaterialSkinning; // 0x508
	TSet<FName> MaterialSkinningPrefixes; // 0x510
};

struct UJoinSessionCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UAISense_Touch : UAISense {
	TArray<FAITouchEvent> RegisteredEvents; // 0x80
};

struct UAnimNotifyState_SkinnedPropBase : UAnimNotifyState {
	FName SkinObjectName; // 0x30
	FName MeshSkinKeyword; // 0x38
	FName ComponentClassSkinKeyword; // 0x40
	FName PropIdentifier; // 0x48
	float ExtendedLifetime; // 0x50
	bool bSkipExtendedLifetime; // 0x54
	FPoolAttachmentInfo PropAttachmentInfo; // 0x58
};

struct UPUMG_StoreItemPrice : UObject {
	int32_t PreSalePrice; // 0x28
	int32_t Price; // 0x2c
	TSoftObjectPtr<UPlatformInventoryItem> CurrencyType; // 0x30
	TWeakObjectPtr<UPUMG_StoreItemHelper> pItemHelper; // 0x58
};

struct UDistributionVectorUniform : UDistributionVector {
	FVector Max; // 0x38
	FVector Min; // 0x44
	char bLockAxes : 1; // 0x50
	EDistributionVectorLockFlags LockedAxes; // 0x54
	EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x55
	char bUseExtremes : 1; // 0x58
};

struct UMaterialExpressionStaticBoolParameter : UMaterialExpressionParameter {
	char DefaultValue : 1; // 0x58
};

struct UKSWeaponCategoryScreen : UKSWidget {
	UKSWeaponProgressMeter* CategoryMasteryMeter; // 0x520
	UKSRelatedRoguesGroup* RelatedRogues; // 0x528
	UWidget* WeaponUnlockTooltipDisplay; // 0x530
	UTextBlock* WeaponCountText; // 0x538
	UKSWeaponCategoryAsset* PopulatedCategory; // 0x570
	UKSWeaponAsset* HoveredWeapon; // 0x578
};

struct UANotifyState_MagazineHide_C : UAnimNotifyState {
	bool Is DodgeRollReload Montage; // 0x30
	bool Reverse; // 0x31
	bool Only Unhide; // 0x32
	bool Only Hide; // 0x33
};

struct UKSAudioPlayerEventActionData : UDataAsset {
	TArray<FString> BanksToLoad; // 0x30
	TArray<FString> BanksToUnload; // 0x40
	TArray<FString> ContainersToPlay; // 0x50
	TArray<FString> ContainersToStop; // 0x60
	TArray<FString> TablesToLoad; // 0x70
	TArray<FString> TablesToUnload; // 0x80
	TArray<FString> EventsToPost; // 0x90
};

struct UWBP_WeaponMasteryTrackSection_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UHorizontalBox* MasteryRewardEntries; // 0x528
	UWBP_ProgressEarnedBar_C* WBP_ProgressEarnedBar; // 0x530
	UWBP_WeaponMasteryTrackLevel_C* WBP_WeaponMasteryTrackLevel; // 0x538
	UWBP_WeaponMasteryTrackLevel_C* WBP_WeaponMasteryTrackLevel_2; // 0x540
	UWBP_WeaponMasteryTrackLevel_C* WBP_WeaponMasteryTrackLevel_3; // 0x548
	UWBP_WeaponMasteryTrackLevel_C* WBP_WeaponMasteryTrackLevel_4; // 0x550
	UWBP_WeaponMasteryTrackLevel_C* WBP_WeaponMasteryTrackLevel_5; // 0x558
	UWBP_WeaponMasteryTrackLevel_C* WBP_WeaponMasteryTrackLevel_6; // 0x560
	FMulticastInlineDelegate OnTrackEntrySelected; // 0x568
	FActivityTier LastSelectedActivity; // 0x578
};

struct UWBP_ChallengeEntry_Daily_Truncated_C : UKSChallengeEntryCardBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UWidgetAnimation* Hover; // 0x530
	USizeBox* ActiveContractWrapper; // 0x538
	UWidgetSwitcher* ChallengeBkg_Switcher; // 0x540
	UTextBlock* ChallengeDescription; // 0x548
	UTextBlock* CompletedText; // 0x550
	UHorizontalBox* ContentContainer; // 0x558
	UWidgetSwitcher* DescriptionSwitcher; // 0x560
	UButton* HitTarget; // 0x568
	UImage* Image; // 0x570
	UImage* Image_390; // 0x578
	UWBP_ProgressEarnedBar_C* ProgressBar; // 0x580
	UHorizontalBox* RewardsContainer; // 0x588
	UWidgetSwitcher* RewardSwitcher; // 0x590
	UCanvasPanel* Root; // 0x598
	UImage* SelectionFrame; // 0x5a0
	UImage* Shade_Fill; // 0x5a8
	UHorizontalBox* TimeRemainingWrapper; // 0x5b0
	UWBP_Challenge_Rewards_Badge_C* WBP_Challenge_Rewards_Badge_EXAMPLE; // 0x5b8
	UWBP_Challenge_Rewards_Badge_C* WBP_Challenge_Rewards_Badge_EXAMPLE_01; // 0x5c0
	EChallengeEntryCardState CurrentVisualState; // 0x5c8
	FMulticastInlineDelegate OnClick; // 0x5d0
};

struct URotatingMovementComponent : UMovementComponent {
	FRotator RotationRate; // 0xf0
	FVector PivotTranslation; // 0xfc
	char bRotationInLocalSpace : 1; // 0x108
};

struct UKSBTD_IsWeaponReady : UBTDecorator {
	FGameplayTag EquipPoint; // 0x68
};

struct UParticleModuleTypeDataMesh : UParticleModuleTypeDataBase {
	UStaticMesh* Mesh; // 0x30
	float LODSizeScale; // 0x40
	char bUseStaticMeshLODs : 1; // 0x44
	char CastShadows : 1; // 0x44
	char DoCollisions : 1; // 0x44
	EMeshScreenAlignment MeshAlignment; // 0x45
	char bOverrideMaterial : 1; // 0x46
	char bOverrideDefaultMotionBlurSettings : 1; // 0x46
	char bEnableMotionBlur : 1; // 0x46
	FRawDistributionVector RollPitchYawRange; // 0x48
	EParticleAxisLock AxisLockOption; // 0x90
	char bCameraFacing : 1; // 0x91
	EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0x92
	EMeshCameraFacingOptions CameraFacingOption; // 0x93
	char bApplyParticleRotationAsSpin : 1; // 0x94
	char bFaceCameraDirectionRatherThanPosition : 1; // 0x94
	char bCollisionsConsiderPartilceSize : 1; // 0x94
};

struct UARCandidateImage : UDataAsset {
	UTexture2D* CandidateTexture; // 0x30
	FString FriendlyName; // 0x38
	float Width; // 0x48
	float Height; // 0x4c
	EARCandidateImageOrientation Orientation; // 0x50
};

struct UGameplayTask_SpawnActor : UGameplayTask {
	FMulticastInlineDelegate Success; // 0x68
	FMulticastInlineDelegate DidNotSpawn; // 0x78
	AActor* ClassToSpawn; // 0xa0
};

struct UMovieScene3DAttachSection : UMovieScene3DConstraintSection {
	FName AttachSocketName; // 0x108
	FName AttachComponentName; // 0x110
	EAttachmentRule AttachmentLocationRule; // 0x118
	EAttachmentRule AttachmentRotationRule; // 0x119
	EAttachmentRule AttachmentScaleRule; // 0x11a
	EDetachmentRule DetachmentLocationRule; // 0x11b
	EDetachmentRule DetachmentRotationRule; // 0x11c
	EDetachmentRule DetachmentScaleRule; // 0x11d
};

struct UKSNewStartMenuData : UKSJsonData {
	UTexture2DDynamic* Image; // 0x80
};

struct UVehicleAnimInstance : UAnimInstance {
	UWheeledVehicleMovementComponent* WheeledVehicleMovementComponent; // 0x970
};

struct ALobbyBeaconPlayerState : AInfo {
	FText DisplayName; // 0x220
	FUniqueNetIdRepl UniqueId; // 0x238
	FUniqueNetIdRepl PartyOwnerUniqueId; // 0x260
	bool bInLobby; // 0x288
	AOnlineBeaconClient* ClientActor; // 0x290
};

struct UFirstTimeLanguageWidget_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UImage* Decro; // 0x4c8
	UImage* Image_159; // 0x4d0
	UOverlay* SettingsWidgetContainer; // 0x4d8
	UTextBlock* Title; // 0x4e0
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x4e8
	FKSSettingsWidgetConfig SettingsWidgetConfig; // 0x4f0
	UKSSettingsInfoBase* SettingsInfo; // 0x500
	UKSSettingsWidget* SettingsWidget; // 0x508
	UAkAudioEvent* ShowFirstTimeLanguageSFX; // 0x510
};

struct ALobbyAnnouncer_C : AKSAnnouncer {
	FPointerToUberGraphFrame UberGraphFrame; // 0x340
	UKSGameInstance* GameInstance; // 0x348
};

struct UBTDecorator_IsBBEntryOfClass : UBTDecorator_BlackboardBase {
	UObject* TestClass; // 0x90
};

struct ULoginTwoFactor_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UStandardButton_C* BackButton; // 0x528
	UImage* BG; // 0x530
	UEditableText* CodeField; // 0x538
	UStandardButton_C* NextButton; // 0x540
	UWidgetSwitcher* NextSwitcher; // 0x548
	UOutlineContainer_C* OutlineContainer; // 0x550
	UImage* TitleLogo_2; // 0x558
	UImage* WarningIcon; // 0x560
	UTextBlock* WarningText; // 0x568
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x570
};

struct UKSInteractionManager : UActorComponent {
	float CachedInteractionTimeStamp; // 0xe8
	char InteractRequestId; // 0xf0
	UKSInteractionState* State; // 0xf8
	UKSInteractionState* PreviousState; // 0x100
	AKSCharacter* User; // 0x108
	TScriptInterface<IKSInteractable> Interactable; // 0x110
	FKSInteractableCameraTransition CameraTransition; // 0x120
};

struct UMaterialExpressionTangentOutput : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct UKSModInst_PingOnOtherDowned : UKSPlayerModInstance {
	TArray<FDownedEnemyPingHandle> PingHandles; // 0x1b8
	FKSRevealInfo DownedRevealParameters; // 0x1c8
	TWeakObjectPtr<UKSPlayerMod_PingOnOtherDowned> CastOwningMod; // 0x210
	TWeakObjectPtr<AKSPlayerController> OwningController; // 0x218
};

struct UPostProcessComponent : USceneComponent {
	FPostProcessSettings Settings; // 0x210
	float Priority; // 0x760
	float BlendRadius; // 0x764
	float BlendWeight; // 0x768
	char bEnabled : 1; // 0x76c
	char bUnbound : 1; // 0x76c
};

struct UPUMG_ContextBar : UPUMG_Widget {
	UPUMG_ContextBarPrompt* PromptWidgetClass; // 0x4c0
	FMargin LeftPromptMargin; // 0x4c8
	FMargin CenterPromptMargin; // 0x4d8
	FMargin RightPromptMargin; // 0x4e8
	UHorizontalBox* LeftContainer; // 0x4f8
	UHorizontalBox* CenterContainer; // 0x500
	UHorizontalBox* RightContainer; // 0x508
	TArray<UPUMG_ContextBarPrompt*> PromptPool; // 0x510
};

struct UWBP_ProgressionTally_Entry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UBorder* BGWrapper; // 0x528
	UTextBlock* BonusPointsEarned; // 0x530
	EKSProgressionBonusType BonusType; // 0x538
};

struct UWBP_VoiceActivityIcon_C : UKSWidget {
	UImage* ActivityIndicator; // 0x520
	UImage* Mic; // 0x528
	UImage* MuteSymbol; // 0x530
};

struct UBillboardComponent : UPrimitiveComponent {
	UTexture2D* Sprite; // 0x430
	char bIsScreenSizeScaled : 1; // 0x438
	float ScreenSize; // 0x43c
	float U; // 0x440
	float UL; // 0x444
	float V; // 0x448
	float VL; // 0x44c
};

struct UWBP_Social_Friends_Tab_C : UKSSocialFriendsPanel {
	FPointerToUberGraphFrame UberGraphFrame; // 0x598
	UKSTreeView* PlayerList; // 0x5a0
	UAkAudioEvent* ClickSocialFriendsSFX; // 0x5a8
	FMulticastInlineDelegate OnPlayerListScrolled; // 0x5b0
};

struct UEdGraphNode : UObject {
	TArray<UEdGraphPin_Deprecated*> DeprecatedPins; // 0x38
	int32_t NodePosX; // 0x48
	int32_t NodePosY; // 0x4c
	int32_t NodeWidth; // 0x50
	int32_t NodeHeight; // 0x54
	ENodeAdvancedPins AdvancedPinDisplay; // 0x58
	ENodeEnabledState EnabledState; // 0x59
	char bDisplayAsDisabled : 1; // 0x5b
	char bUserSetEnabledState : 1; // 0x5b
	char bIsNodeEnabled : 1; // 0x5b
	char bHasCompilerMessage : 1; // 0x5b
	FString NodeComment; // 0x60
	int32_t ErrorType; // 0x70
	FString ErrorMsg; // 0x78
	FGuid NodeGuid; // 0x88
};

struct UConnectionCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UMaterialExpressionGetMaterialAttributes : UMaterialExpression {
	FMaterialAttributesInput MaterialAttributes; // 0x40
	TArray<FGuid> AttributeGetTypes; // 0x58
};

struct UANotifyState_ShowGadget_C : UAnimNotifyState {
	bool bReverse; // 0x30
	bool bKeepGadgetUnhidden; // 0x31
	bool OnlyKeepUnhiddenIfGadgetIsEquiped; // 0x32
};

struct UParticleModuleLocationPrimitiveSphere : UParticleModuleLocationPrimitiveBase {
	FRawDistributionFloat StartRadius; // 0xb0
};

struct UKSAmmoDropAsset : UKSLootItem {
	EAmmoType AmmoType; // 0x270
};

struct ADroppedMagazine_C : AActor {
	FPointerToUberGraphFrame UberGraphFrame; // 0x220
	UStaticMeshComponent* StaticMesh; // 0x228
	USkeletalMeshComponent* SkeletalMesh; // 0x230
	UBoxComponent* Collision; // 0x238
};

struct UKSBTTask_SetTimer : UBTTask_BlackboardBase {
	float Duration; // 0x98
	float RandomDeviation; // 0x9c
};

struct URuntimeVirtualTexture : UObject {
	ERuntimeVirtualTextureMaterialType MaterialType; // 0x28
	bool bCompressTextures; // 0x29
	bool bEnable; // 0x2a
	bool bClearTextures; // 0x2b
	bool bSinglePhysicalSpace; // 0x2c
	bool bPrivateSpace; // 0x2d
	bool bEnableScalability; // 0x2e
	int32_t Size; // 0x30
	int32_t TileCount; // 0x34
	int32_t TileSize; // 0x38
	int32_t TileBorderSize; // 0x3c
	int32_t StreamLowMips; // 0x40
	URuntimeVirtualTextureStreamingProxy* StreamingTexture; // 0x48
	bool bEnableCompressCrunch; // 0x50
	int32_t RemoveLowMips; // 0x54
};

struct ASkyLight : AInfo {
	USkyLightComponent* LightComponent; // 0x220
	char bEnabled : 1; // 0x228
};

struct UWBP_QuickPlay_QueueButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* hoveranim; // 0x528
	UTextBlock* ButtonText; // 0x530
	UImage* WarningIcon; // 0x538
	UWBP_Graphic_Button_C* WBP_Graphic_Button; // 0x540
	FMulticastInlineDelegate OnQueueBtnClicked; // 0x548
	FMulticastInlineDelegate OnQueueBtnHovered; // 0x558
	FMulticastInlineDelegate OnQueueBtnUnhovered; // 0x568
	FClientQueueInfo QueueInfo; // 0x578
};

struct UMaterialExpressionLandscapeLayerSample : UMaterialExpression {
	FName ParameterName; // 0x40
	float PreviewWeight; // 0x48
	FGuid ExpressionGUID; // 0x4c
};

struct UMovieSceneFadeSection : UMovieSceneFloatSection {
	FLinearColor FadeColor; // 0x180
	char bFadeAudio : 1; // 0x190
};

struct AKSCharacterFoundation : ACharacter {
	bool CachedAimAssistVisibility; // 0x4d4
	float NextValidAimAssistVisibilityTime; // 0x4d8
	bool bCanEverBeConsideredForAimAssist; // 0x4dc
	bool bIgnoreCollisionWithTeammates; // 0x4dd
	UKSOutOfBoundsComponent* CachedOutOfBoundsComponent; // 0x4e0
	float ReleasedCachedTimeSeconds; // 0x4e8
	FMulticastInlineDelegate OnPlayerStateChangedDel; // 0x4f8
	AKSPlayerModManager* PlayerModManagerOverride; // 0x520
	float Health; // 0x528
	FMulticastInlineDelegate OnHealthChangedDel; // 0x530
	FMulticastInlineDelegate OnKilled; // 0x540
	FMulticastInlineDelegate OnPlayHitFromPointDamageDel; // 0x550
	FMulticastInlineDelegate OnPlayHitFromRadialDamageDel; // 0x560
	TMap<FName, UKSFXCurveComponent*> ActiveFXCurveComponents; // 0x5d8
	FPostProcessSettings BlendableSettings; // 0x630
	UKSAkComponent* CharacterAkComponent; // 0xbb0
	UAkAudioEvent* HitByShieldedAkEvent; // 0xbb8
	UAkAudioEvent* HitByArmorBreakAkEvent; // 0xbc0
	bool bIsHovered; // 0xbc8
	bool bUseScreenSizeCutoff; // 0xbc9
	float PlayerHoverRange; // 0xbcc
	float HoverMinScreenHeightPct; // 0xbd0
	float HoverMinScreenHeightPctADS; // 0xbd4
	bool bUseConeHover; // 0xbd8
	float HoverConeAngle; // 0xbdc
	float ADSHoverConeScreenRadius; // 0xbe0
	float AlwaysHoverDistance; // 0xbe4
	bool bUnhoverWhenOccludedByHoveredCharacter; // 0xbe8
	float CachedCameraFOV; // 0xbec
	FVector2D CachedViewPortSize; // 0xbf0
	float CachedHalfTanFOV; // 0xbf8
	TSoftClassPtr<UObject> MinimapDisplayWidget; // 0xc50
	TSoftClassPtr<UObject> FullmapDisplayWidget; // 0xc78
	TSoftClassPtr<UObject> OverlayDisplayWidget; // 0xca0
	char RoundCreated; // 0xcc8
};

struct UKSKillCam : UObject {
	AKSKillCamController* KillCamControllerClass; // 0x28
	UWorld* KillCamWorld; // 0x30
	UPackage* KillCamWorldPackage; // 0x38
	AKSKillCamController* KillCamSpectatorController; // 0x40
	TMap<UAkComponent*, float> OriginalWorldMutedAudio; // 0x48
	FMulticastInlineDelegate OnKillCamEnabled; // 0xd8
	FMulticastInlineDelegate OnKillCamViewPawn; // 0x100
	FMulticastInlineDelegate OnKillCamViewProjectile; // 0x128
	FMulticastInlineDelegate OnPrepareKillCamPlayback; // 0x150
	FMulticastInlineDelegate OnFinishKillCamPlayback; // 0x178
};

struct UKSStoreItemHelper : UPUMG_StoreItemHelper {
	int32_t StoreVendorGroupId; // 0x290
	bool StoreVendorsLoaded; // 0x294
	FMulticastInlineDelegate OnStoreItemNewStatusChange; // 0x298
	TMap<int32_t, TSoftObjectPtr<UPUMG_StoreItem>> ActiveStoreItems; // 0x2a8
	bool StoreHasUnseenItems; // 0x300
};

struct UMaterialExpressionLandscapeLayerBlend : UMaterialExpression {
	TArray<FLayerBlendInput> Layers; // 0x40
	FGuid ExpressionGUID; // 0x50
};

struct UVectorFieldAnimated : UVectorField {
	UTexture2D* Texture; // 0x48
	EVectorFieldConstructionOp ConstructionOp; // 0x50
	int32_t VolumeSizeX; // 0x54
	int32_t VolumeSizeY; // 0x58
	int32_t VolumeSizeZ; // 0x5c
	int32_t SubImagesX; // 0x60
	int32_t SubImagesY; // 0x64
	int32_t FrameCount; // 0x68
	float FramesPerSecond; // 0x6c
	char bLoop : 1; // 0x70
	UVectorFieldStatic* NoiseField; // 0x78
	float NoiseScale; // 0x80
	float NoiseMax; // 0x84
};

struct ULiveLinkAnimationRoleToTransform : ULiveLinkFrameTranslator {
	FName BoneName; // 0x28
};

struct UMovieSceneBindingOverrides : UObject {
	TArray<FMovieSceneBindingOverrideData> BindingData; // 0x28
};

struct UMagicLeapARPinSaveGame : USaveGame {
	FGuid PinnedID; // 0x28
	FTransform ComponentWorldTransform; // 0x40
	FTransform PinTransform; // 0x70
};

struct UKSBTTask_PlayVO : UBTTaskNode {
	FGameplayTag VOEvent; // 0x70
	float ChanceToPlay; // 0x78
};

struct UFoliageType : UObject {
	FGuid UpdateGuid; // 0x28
	float Density; // 0x38
	float DensityAdjustmentFactor; // 0x3c
	float Radius; // 0x40
	bool bSingleInstanceModeOverrideRadius; // 0x44
	float SingleInstanceModeRadius; // 0x48
	EFoliageScaling Scaling; // 0x4c
	FFloatInterval ScaleX; // 0x50
	FFloatInterval ScaleY; // 0x58
	FFloatInterval ScaleZ; // 0x60
	FFoliageVertexColorChannelMask VertexColorMaskByChannel[0x4]; // 0x68
	FoliageVertexColorMask VertexColorMask; // 0x98
	float VertexColorMaskThreshold; // 0x9c
	char VertexColorMaskInvert : 1; // 0xa0
	FFloatInterval ZOffset; // 0xa4
	char AlignToNormal : 1; // 0xac
	float AlignMaxAngle; // 0xb0
	char RandomYaw : 1; // 0xb4
	float RandomPitchAngle; // 0xb8
	FFloatInterval GroundSlopeAngle; // 0xbc
	FFloatInterval Height; // 0xc4
	TArray<FName> LandscapeLayers; // 0xd0
	float MinimumLayerWeight; // 0xe0
	TArray<FName> ExclusionLandscapeLayers; // 0xe8
	float MinimumExclusionLayerWeight; // 0xf8
	FName LandscapeLayer; // 0xfc
	char CollisionWithWorld : 1; // 0x104
	FVector CollisionScale; // 0x108
	FBoxSphereBounds MeshBounds; // 0x114
	FVector LowBoundOriginRadius; // 0x130
	EComponentMobility Mobility; // 0x13c
	FInt32Interval CullDistance; // 0x140
	char bEnableStaticLighting : 1; // 0x148
	char CastShadow : 1; // 0x148
	char bAffectDynamicIndirectLighting : 1; // 0x148
	char bAffectDistanceFieldLighting : 1; // 0x148
	char bCastDynamicShadow : 1; // 0x148
	char bCastStaticShadow : 1; // 0x148
	char bCastShadowAsTwoSided : 1; // 0x148
	char bReceivesDecals : 1; // 0x148
	char bOverrideLightMapRes : 1; // 0x149
	int32_t OverriddenLightMapRes; // 0x14c
	ELightmapType LightmapType; // 0x150
	char bUseAsOccluder : 1; // 0x154
	FBodyInstance BodyInstance; // 0x158
	EHasCustomNavigableGeometry CustomNavigableGeometry; // 0x268
	FLightingChannels LightingChannels; // 0x269
	char bRenderCustomDepth : 1; // 0x26c
	int32_t CustomDepthStencilValue; // 0x270
	int32_t TranslucencySortPriority; // 0x274
	float CollisionRadius; // 0x278
	float ShadeRadius; // 0x27c
	int32_t NumSteps; // 0x280
	float InitialSeedDensity; // 0x284
	float AverageSpreadDistance; // 0x288
	float SpreadVariance; // 0x28c
	int32_t SeedsPerStep; // 0x290
	int32_t DistributionSeed; // 0x294
	float MaxInitialSeedOffset; // 0x298
	bool bCanGrowInShade; // 0x29c
	bool bSpawnsInShade; // 0x29d
	float MaxInitialAge; // 0x2a0
	float MaxAge; // 0x2a4
	float OverlapPriority; // 0x2a8
	FFloatInterval ProceduralScale; // 0x2ac
	FRuntimeFloatCurve ScaleCurve; // 0x2b8
	int32_t ChangeCount; // 0x340
	char ReapplyDensity : 1; // 0x344
	char ReapplyRadius : 1; // 0x344
	char ReapplyAlignToNormal : 1; // 0x344
	char ReapplyRandomYaw : 1; // 0x344
	char ReapplyScaling : 1; // 0x344
	char ReapplyScaleX : 1; // 0x344
	char ReapplyScaleY : 1; // 0x344
	char ReapplyScaleZ : 1; // 0x344
	char ReapplyRandomPitchAngle : 1; // 0x345
	char ReapplyGroundSlope : 1; // 0x345
	char ReapplyHeight : 1; // 0x345
	char ReapplyLandscapeLayers : 1; // 0x345
	char ReapplyZOffset : 1; // 0x345
	char ReapplyCollisionWithWorld : 1; // 0x345
	char ReapplyVertexColorMask : 1; // 0x345
	char bEnableDensityScaling : 1; // 0x345
	TArray<URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x348
	int32_t VirtualTextureCullMips; // 0x358
	ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x35c
};

struct UUniformScalar : UFieldNodeFloat {
	float Magnitude; // 0xb0
};

struct UWBP_ProgressionCardSlot_RankedXP_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* RankDownAnim; // 0x240
	UWidgetAnimation* RankUpAnim; // 0x248
	UImage* BadgeMaterialize; // 0x250
	UImage* Block01; // 0x258
	UImage* Block02; // 0x260
	UImage* Block03; // 0x268
	UImage* Block04; // 0x270
	UImage* Block05; // 0x278
	UImage* Block06; // 0x280
	UImage* Block07; // 0x288
	UImage* Block08; // 0x290
	UTextBlock* Category; // 0x298
	UWBP_AdditiveImage_C* Chevron1; // 0x2a0
	UWBP_AdditiveImage_C* Chevron2; // 0x2a8
	UWBP_AdditiveImage_C* Chevron3; // 0x2b0
	UImage* Flare01; // 0x2b8
	UImage* Flare02; // 0x2c0
	UImage* Flare03; // 0x2c8
	UImage* Flare04; // 0x2d0
	UImage* Flare05; // 0x2d8
	UImage* Flare06; // 0x2e0
	UImage* Glow01; // 0x2e8
	UImage* Glow02; // 0x2f0
	UWBP_LerpingNumberWidget_C* GrandMasterPoints; // 0x2f8
	UCanvasPanel* GrandMasterPointsWrapper; // 0x300
	UImage* Particles01; // 0x308
	UTextBlock* PointsEarned; // 0x310
	UWBP_RankedIcon_C* RankBadge; // 0x318
	UTextBlock* RankChangeText; // 0x320
	UWidgetSwitcher* RankedProgressSwitcher; // 0x328
	UImage* Scanlines01; // 0x330
	UImage* TextGlow01; // 0x338
	UWBP_ProgressionTally_C* WBP_ProgressionTally_C_1; // 0x340
	UWBP_ProgressEarnedBar_C* XPProgressEarnedBar; // 0x348
};

struct UKSGrenadeTargetingModule : UKSProjectileTargetingModule {
	FLinearColor FuseWarningColor; // 0x3a8
	FLinearColor FuseSafeColor; // 0x3b8
	float FuseWarningStartTime; // 0x3c8
	UKSWeaponAsset_Grenade* GrenadeAsset; // 0x3d0
};

struct UKSSettingsInfoBase : UObject {
	FMulticastInlineDelegate OnSettingValueChanged; // 0x28
	FMulticastInlineDelegate OnSettingPreviewChanged; // 0x38
	bool bIsAutoApplied; // 0x48
	bool bIsAutoSaved; // 0x49
	TArray<FText> TextOptions; // 0xd0
	FMulticastInlineDelegate OnTextOptionsChanged; // 0xe0
	float MinValue; // 0xf0
	float MaxValue; // 0xf4
	float StepValue; // 0xf8
	bool bRoundValue; // 0xfc
	float RoundToNearest; // 0x100
	bool bIsPercent; // 0x104
};

struct USkeletalMeshPoolComponent : UBasePoolComponent {
	TArray<USkeletalMeshComponent*> UnusedComponentsArray; // 0xd8
	TSet<USkeletalMeshComponent*> UsedComponentsSet; // 0xe8
	USkeletalMeshComponent* PeekedSkeletalMeshComponent; // 0x138
	USkeletalMeshComponent* PooledSkeletalMeshComponentClass; // 0x140
};

struct UKSModInst_Activated : UKSPlayerModInstance {
	bool bCanBecomeFullyChargedOnEndActivation; // 0x1b8
	bool bUsesAbilityMovement; // 0x1b9
	EMovementMode MovementMode; // 0x1ba
	EKSGame_CustomMovement CustomMovementMode; // 0x1bb
	UKSTimerComponent* LockoutTimer; // 0x1c0
	bool bIsLocked; // 0x1d8
	FMulticastInlineDelegate OnModLocked; // 0x1e0
	FMulticastInlineDelegate OnModLockoutTick; // 0x1f0
	UKSTimerComponent* SetupTimer; // 0x210
	FMulticastInlineDelegate OnBonusAbilityDurationReceived; // 0x218
	float BonusAbilityDuration; // 0x228
	float LocalBonusAbilityDuration; // 0x22c
	FKSActionRestrictor SetupActionRestrictor; // 0x230
	int32_t CurrentSetupRestrictor; // 0x238
	FKSActionRestrictor RecoveryActionRestrictor; // 0x23c
	bool bUseDownedActionRestrictors; // 0x244
	FKSActionRestrictor DownedSetupActionRestrictor; // 0x245
	FKSActionRestrictor DownedRecoveryActionRestrictor; // 0x24d
	FMulticastInlineDelegate OnModActivated; // 0x270
	UKSPlayerMod_Activated* ActivateMod; // 0x280
	FMulticastInlineDelegate OnChargeChanged; // 0x288
	bool bEndActivationOnNullCharacter; // 0x298
	bool bDelayChargeConsumption; // 0x299
	bool bConsumeChargeOnEndActivation; // 0x29a
	FMulticastInlineDelegate OnModSetup; // 0x2a0
	UAkAudioEvent* ActivationSoundEvent; // 0x2b0
	UAkAudioEvent* SpacialActivationSoundEvent; // 0x2b8
	UAkAudioEvent* SetupSoundEvent; // 0x2c0
	UAkAudioEvent* SpacialSetupSoundEvent; // 0x2c8
	UAkAudioEvent* DeactivationSoundEvent; // 0x2d0
	bool bUnCrouchOnActivation; // 0x2d8
	bool bCanActivateWithoutRequiredCharge; // 0x2d9
	bool bCanAddPerSecondChargeWhileActive; // 0x2da
	FMulticastInlineDelegate OnModFailedToActivate; // 0x2e0
	float CurrentCharge; // 0x320
	bool bDeactivateWhenWeaponFired; // 0x420
	TArray<AKSWeapon*> WeaponsToIgnore; // 0x428
	bool bDeactivateWhenMacGuffinFired; // 0x438
	TArray<UDamageType*> DamageTypesThatCancel; // 0x440
	FMulticastInlineDelegate OnModHoldChanged; // 0x450
	int32_t CurrentlyHeldId; // 0x460
	int32_t LocalHeldId; // 0x464
	bool bCurrentlyHeld; // 0x468
	UKSModInst_ActivatedStateMachine* ActivatedStateMachine; // 0x470
};

struct AKSGameState_RoundGame : AKSGameState {
	FReplicatedRoundInfo RoundInfo; // 0x19e8
	FReplicatedRoundInfo PreviousRoundInfo; // 0x1a00
	float RoundEndFadeOutAtMatchTime; // 0x1a18
	float RoundEndFadeOutDelayTime; // 0x1a1c
	float RoundEndFadeOutTime; // 0x1a20
	bool bUsingRoundDelayedGarbageCollection; // 0x1a24
	FMulticastInlineDelegate OnRoundInfoChangedDel; // 0x1a28
	FRoundResult RoundResult; // 0x1a50
	TArray<FRoundResult> AllRoundResults; // 0x1a70
	int32_t TotalRounds; // 0x1a80
	int32_t RoundsToWin; // 0x1a84
	FMulticastInlineDelegate OnTotalRoundsSet; // 0x1a88
	FMulticastInlineDelegate OnRoundsToWinSet; // 0x1a98
	FRoundInitState RoundInitState; // 0x1aa8
	FMulticastInlineDelegate OnRoundSetupDel; // 0x1ab8
	FMulticastInlineDelegate OnRoundStartDel; // 0x1ae0
	FMulticastInlineDelegate OnRoundOverDel; // 0x1b08
	int32_t CashPerWinningPlayer; // 0x1b30
	TArray<int32_t> ConsecutiveCashPerLosingPlayer; // 0x1b38
	float RoundEndCamPreDeathDuration; // 0x1b50
	float RoundEndCamPostDeathDuration; // 0x1b54
	float RoundEndCamPreDeathDilation; // 0x1b58
	float RoundEndCamTimeDilation; // 0x1b5c
	float EndOfMatchKillCamDelay; // 0x1b60
};

struct UKSTeamWidget : UKSWidget {
	bool bTrackPersistentPlayerData; // 0x520
	bool bTrackRelevantPlayerStates; // 0x521
	TWeakObjectPtr<AKSTeamState> TeamState; // 0x524
};

struct UKSAcquisitionModal : UKSWidget {
	UDataTable* HeaderOverridesTable; // 0x520
	TMap<int32_t, FText> HeaderOverridesFromJson; // 0x528
};

struct UAudioCurveSourceComponent : UAudioComponent {
	FName CurveSourceBindingName; // 0x7f0
	float CurveSyncOffset; // 0x7f8
};

struct UDatasmithImportOptions : UDatasmithOptionsBase {
	EDatasmithImportSearchPackagePolicy SearchPackagePolicy; // 0x28
	EDatasmithImportAssetConflictPolicy MaterialConflictPolicy; // 0x29
	EDatasmithImportAssetConflictPolicy TextureConflictPolicy; // 0x2a
	EDatasmithImportActorPolicy StaticMeshActorImportPolicy; // 0x2b
	EDatasmithImportActorPolicy LightImportPolicy; // 0x2c
	EDatasmithImportActorPolicy CameraImportPolicy; // 0x2d
	EDatasmithImportActorPolicy OtherActorImportPolicy; // 0x2e
	EDatasmithImportMaterialQuality MaterialQuality; // 0x2f
	FDatasmithImportBaseOptions BaseOptions; // 0x34
	FDatasmithReimportOptions ReimportOptions; // 0x48
	FString Filename; // 0x50
	FString FilePath; // 0x60
};

struct ATriggerBase : AActor {
	UShapeComponent* CollisionComponent; // 0x220
};

struct UKSPlayerMod_ReloadAndRetrieve : UKSPlayerMod {
	float RetrieveTimeMultiplier; // 0x330
	float ReloadTimeMultiplier; // 0x334
};

struct UWBP_RogueDetailsPanelButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animOnSelected; // 0x528
	UWidgetAnimation* animOnHover; // 0x530
	UImage* BGGlowingGradient; // 0x538
	UImage* BGGradient; // 0x540
	UButton* DetailsButton; // 0x548
	UKSAsyncImage* Icon; // 0x550
	USizeBox* IconSizeBox; // 0x558
	UImage* SideDecro; // 0x560
	UTextBlock* Text; // 0x568
	UWBP_CallToAction_C* WBP_CallToAction; // 0x570
	FMulticastInlineDelegate OnClicked; // 0x578
	UTexture2D* ButtonImage; // 0x588
	FText ButtonText; // 0x590
	bool bIsSelected; // 0x5a8
	UKSWidget* ActivePanel; // 0x5b0
	UAkAudioEvent* HoverRogueDetailsPanelSFX; // 0x5b8
	UAkAudioEvent* ClickRogueDetailsPanelSFX; // 0x5c0
	EVerticalTabState CurrentTabState; // 0x5c8
};

struct USoundEffectSourcePresetChain : UObject {
	TArray<FSourceEffectChainEntry> Chain; // 0x28
	char bPlayEffectChainTails : 1; // 0x38
};

struct UWBP_EventMissionSelect_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWidgetAnimation* Anim_OnShown; // 0x4c8
	UWBP_StandardButtonMedium_C* ActivateMissionButton; // 0x4d0
	UImage* Border; // 0x4d8
	UTextBlock* Credit_Counter; // 0x4e0
	UUniformGridPanel* ExclusiveMissionsGrid; // 0x4e8
	UImage* Image; // 0x4f0
	UImage* Image_64; // 0x4f8
	UImage* Image_341; // 0x500
	UImage* Image_405; // 0x508
	UImage* Image_500; // 0x510
	UOverlay* MissionButtonWrapper; // 0x518
	UWBP_PanelDefault_C* MissionPanel; // 0x520
	URichTextBlock* RichTextBlock; // 0x528
	URichTextBlock* RichTextBlock_137; // 0x530
	URichTextBlock* RichTextBlock_353; // 0x538
	UImage* RunwayPortrait; // 0x540
	UImage* ScanLines; // 0x548
	UUniformGridPanel* StandardMissionsGrid; // 0x550
	UWBP_EventMissionItem_C* WBP_EventMissionItem; // 0x558
	UWBP_EventMissionItem_C* WBP_EventMissionItem_2; // 0x560
	UWBP_EventMissionItem_C* WBP_EventMissionItem_3; // 0x568
	UWBP_EventMissionItem_C* WBP_EventMissionItem_4; // 0x570
	UWBP_EventMissionItem_C* WBP_EventMissionItem_5; // 0x578
	UWBP_EventMissionItem_C* WBP_EventMissionItem_6; // 0x580
	UWBP_EventMissionItem_C* WBP_EventMissionItem_7; // 0x588
	UWBP_EventMissionItem_C* WBP_EventMissionItem_8; // 0x590
	UWBP_EventMissionItem_C* WBP_EventMissionItem_9; // 0x598
	UWBP_EventMissionItem_C* WBP_EventMissionItem_10; // 0x5a0
	UWBP_EventMissionItem_C* WBP_EventMissionItem_11; // 0x5a8
	UWBP_EventMissionItem_C* WBP_EventMissionItem_12; // 0x5b0
	UWBP_EventMissionItem_C* WBP_EventMissionItem_13; // 0x5b8
	UWBP_EventMissionItem_C* WBP_EventMissionItem_14; // 0x5c0
	UWBP_EventMissionItem_C* WBP_EventMissionItem_15; // 0x5c8
	UWBP_EventMissionItem_C* WBP_EventMissionItem_16; // 0x5d0
	UWBP_Header1_C* WBP_Header1; // 0x5d8
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x5e0
	UWBP_StandardButton_Currency_C* WBP_StandardButton_Currency; // 0x5e8
	TArray<UKSActivityInstance*> ChallengeActivityInstances; // 0x5f0
	UKSActivityInstance* FocusedActivityInstance; // 0x600
	UWBP_EventMissionItem_C* FocusedActivityWidget; // 0x608
	UKSPlayerDataFactory* PlayerDataFactory; // 0x610
};

struct UWBP_PostMatchLobby_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowRankedChangeScreen; // 0x528
	UWidgetAnimation* ShowScreen_Defeat; // 0x530
	UWidgetAnimation* ShowScreen_Victory; // 0x538
	UWidgetAnimation* ShowScreen; // 0x540
	UButton* Blocker; // 0x548
	UOverlay* ContentWrapper; // 0x550
	UWBP_PlayerContextMenu_C* ContextMenu; // 0x558
	UOverlay* GamepadBumperLeft; // 0x560
	UOverlay* GamepadBumperRight; // 0x568
	UWBP_AppliedEvents_C* MatchEventBonuses; // 0x570
	UVerticalBox* MatchIDContainer; // 0x578
	UTextBlock* MatchIdDisplay; // 0x580
	UWBP_PostMatchNavButton_C* NavButton_MatchSummary; // 0x588
	UWBP_PostMatchNavButton_C* NavButton_Progression; // 0x590
	UWBP_PostMatchNavButton_C* NavButton_Scoreboard; // 0x598
	UHorizontalBox* NavigationContainer; // 0x5a0
	UCanvasPanel* Overlay_Progression; // 0x5a8
	UOverlay* Overlay_Scoreboard; // 0x5b0
	UWBP_Progression_C* Progression; // 0x5b8
	UReportMenu_C* ReportMenu; // 0x5c0
	UScoreboardOverview_C* ScoreboardOverview; // 0x5c8
	UTextBlock* SecondaryInstanceIdDisplay; // 0x5d0
	UImage* TabLeftButtonImage; // 0x5d8
	UImage* TabRightButtonImage; // 0x5e0
	UTextBlock* TeamStatus; // 0x5e8
	UTextBlock* TimePlayedMessage; // 0x5f0
	UImage* VictoryDefeatGlow; // 0x5f8
	UImage* VictoryDefeatGlow_Anim; // 0x600
	UImage* VictoryDefeatLine; // 0x608
	UImage* VictoryDefeatScanlines; // 0x610
	UWBP_ActiveBoosterShelf_C* WBP_ActiveBoosterShelf; // 0x618
	UWBP_Header1_C* WBP_Header1; // 0x620
	UWBP_MatchSummary_C* WBP_MatchSummary; // 0x628
	UWBP_RankChange_C* WBP_RankChange; // 0x630
	URichTextBlock* WeaponsFeatureCalloutText; // 0x638
	TArray<UWidget*> TabScreens; // 0x640
	int32_t CurrentTabIndex; // 0x650
	float DelayTimeHide; // 0x654
	FScoreboardStats ScoreboardStats; // 0x658
	bool PopulatedScoreboard; // 0x6a8
	int32_t PlayerId; // 0x6ac
	bool FirstPostMatch; // 0x6b0
	FName RouteName; // 0x6b4
	UAkAudioEvent* ShowResultsScreenSFX; // 0x6c0
	bool IsReturnView; // 0x6c8
	TArray<UKSWidget*> NavWidgets; // 0x6d0
	bool IsDiscFocused; // 0x6e0
	FString ExampleGUID; // 0x6e8
};

struct UChildConnection : UNetConnection {
	UNetConnection* Parent; // 0x1a80
};

struct ULevelActorContainer : UObject {
	TArray<AActor*> Actors; // 0x28
};

struct UKSBTObjective : UDataAsset {
	FString ObjectiveName; // 0x30
	FString ObjectiveTargetKeyName; // 0x40
	TArray<UKSBTAction*> RequiredActions; // 0x50
	TArray<TSoftObjectPtr<UKSPlayerMod>> RequiredAbilities; // 0x60
};

struct UMaterialExpressionShaderStageSwitch : UMaterialExpression {
	FExpressionInput PixelShader; // 0x40
	FExpressionInput VertexShader; // 0x54
};

struct UMaterialExpressionDecalMipmapLevel : UMaterialExpression {
	FExpressionInput TextureSize; // 0x40
	float ConstWidth; // 0x54
	float ConstHeight; // 0x58
};

struct UClothLODDataCommon_Legacy : UObject {
	UClothPhysicalMeshDataBase_Legacy* PhysicalMeshData; // 0x28
	FClothPhysicalMeshData ClothPhysicalMeshData; // 0x30
	FClothCollisionData CollisionData; // 0x128
};

struct ABP_BrightLobbyHUDMinimal_C : AKSLobbyHUDNew {
	USceneComponent* DefaultSceneRoot; // 0x6b0
};

struct UWBP_Context_Bar_C : UPUMG_ContextBar {
	UWidgetAnimation* MobileLayout; // 0x520
	UImage* FooterBG; // 0x528
	UImage* FooterBG_2; // 0x530
};

struct USoundNodeConcatenator : USoundNode {
	TArray<float> InputVolume; // 0x48
};

struct USoundNodeWavePlayer : USoundNodeAssetReferencer {
	TSoftObjectPtr<USoundWave> SoundWaveAssetPtr; // 0x48
	USoundWave* SoundWave; // 0x70
	char bLooping : 1; // 0x78
};

struct USplineMeshComponent : UStaticMeshComponent {
	FSplineMeshParams SplineParams; // 0x4f0
	FVector SplineUpDir; // 0x548
	float SplineBoundaryMin; // 0x554
	FGuid CachedMeshBodySetupGuid; // 0x558
	UBodySetup* BodySetup; // 0x568
	float SplineBoundaryMax; // 0x570
	char bAllowSplineEditingPerInstance : 1; // 0x574
	char bSmoothInterpRollScale : 1; // 0x574
	char bMeshDirty : 1; // 0x574
	ESplineMeshAxis ForwardAxis; // 0x575
	float VirtualTextureMainPassMaxDrawDistance; // 0x578
};

struct UUserWidget : UWidget {
	FLinearColor ColorAndOpacity; // 0x118
	FDelegate ColorAndOpacityDelegate; // 0x128
	FSlateColor ForegroundColor; // 0x138
	FDelegate ForegroundColorDelegate; // 0x160
	FMargin Padding; // 0x170
	TArray<UUMGSequencePlayer*> ActiveSequencePlayers; // 0x180
	TArray<UUMGSequencePlayer*> StoppedSequencePlayers; // 0x190
	TArray<FNamedSlotBinding> NamedSlotBindings; // 0x1a0
	UWidgetTree* WidgetTree; // 0x1b0
	int32_t Priority; // 0x1b8
	char bSupportsKeyboardFocus : 1; // 0x1bc
	char bIsFocusable : 1; // 0x1bc
	char bStopAction : 1; // 0x1bc
	char bHasScriptImplementedTick : 1; // 0x1bc
	char bHasScriptImplementedPaint : 1; // 0x1bc
	char bCookedWidgetTree : 1; // 0x1bc
	EWidgetTickFrequency TickFrequency; // 0x1c8
	UInputComponent* InputComponent; // 0x1d0
	TArray<FAnimationEventBinding> AnimationCallbacks; // 0x1d8
};

struct UParticleModuleLocationBoneSocket : UParticleModuleLocationBase {
	ELocationBoneSocketSource SourceType; // 0x30
	FVector UniversalOffset; // 0x34
	TArray<FLocationBoneSocketInfo> SourceLocations; // 0x40
	ELocationBoneSocketSelectionMethod SelectionMethod; // 0x50
	char bUpdatePositionEachFrame : 1; // 0x54
	char bOrientMeshEmitters : 1; // 0x54
	char bInheritBoneVelocity : 1; // 0x54
	float InheritVelocityScale; // 0x58
	FName SkelMeshActorParamName; // 0x5c
	int32_t NumPreSelectedIndices; // 0x64
};

struct UMaterialExpressionRuntimeVirtualTextureReplace : UMaterialExpression {
	FExpressionInput Default; // 0x40
	FExpressionInput VirtualTextureOutput; // 0x54
};

struct UMovieSceneSequencePlayer : UObject {
	FMulticastInlineDelegate OnPlay; // 0x408
	FMulticastInlineDelegate OnPlayReverse; // 0x418
	FMulticastInlineDelegate OnStop; // 0x428
	FMulticastInlineDelegate OnPause; // 0x438
	FMulticastInlineDelegate OnFinished; // 0x448
	EMovieScenePlayerStatus Status; // 0x458
	char bReversePlayback : 1; // 0x45c
	UMovieSceneSequence* Sequence; // 0x460
	FFrameNumber StartTime; // 0x468
	int32_t DurationFrames; // 0x46c
	int32_t CurrentNumLoops; // 0x470
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0x488
	FMovieSceneRootEvaluationTemplateInstance RootTemplateInstance; // 0x4a0
	FMovieSceneSequenceReplProperties NetSyncProps; // 0x828
	TScriptInterface<IMovieScenePlaybackClient> PlaybackClient; // 0x838
};

struct UKSMultiStateTargetingModule : UKSWeaponTargetingModule {
	TArray<FKSTargetingModuleInfo> TargetingModuleInfos; // 0x128
};

struct UNamedInterfaces : UObject {
	TArray<FNamedInterface> NamedInterfaces; // 0x28
	TArray<FNamedInterfaceDef> NamedInterfaceDefs; // 0x38
};

struct UWBP_WeaponCategoryButton_Horizontal_C : UKSWeaponCategoryButton {
	FPointerToUberGraphFrame UberGraphFrame; // 0x558
	UWidgetAnimation* Anim_OnHover; // 0x560
	UImage* BG; // 0x568
	UWBP_AsyncIcon_C* CategoryIcon; // 0x570
	UTextBlock* CategoryNameText; // 0x578
	UWBP_WeaponCategoryMasteryBadge_C* ClassMasteryBadge; // 0x580
	UButton* HitTarget; // 0x588
	UImage* Image_126; // 0x590
	UTextBlock* MasteredLabel; // 0x598
	UImage* ProgressFill; // 0x5a0
	UImage* ProgressFill_BG; // 0x5a8
	USizeBox* ProgressMask; // 0x5b0
	UTextBlock* ProgressText; // 0x5b8
	UImage* SimpleHoverFrame; // 0x5c0
	UImage* Stroke; // 0x5c8
	UAkAudioEvent* HoverWEPCategoryButtonSFX; // 0x5d0
	UAkAudioEvent* ClickWEPCategoryButtonSFX; // 0x5d8
	UAkAudioEvent* GamePad_WEPCategoryButtonSFX; // 0x5e0
};

struct UAssetManager : UObject {
	TArray<UObject*> ObjectReferenceList; // 0x2c0
	bool bIsGlobalAsyncScanEnvironment; // 0x2d0
	bool bShouldGuessTypeAndName; // 0x2d1
	bool bShouldUseSynchronousLoad; // 0x2d2
	bool bIsLoadingFromPakFiles; // 0x2d3
	bool bShouldAcquireMissingChunksOnLoad; // 0x2d4
	bool bOnlyCookProductionAssets; // 0x2d5
	bool bIsBulkScanning; // 0x2d6
	bool bIsPrimaryAssetDirectoryCurrent; // 0x2d7
	bool bIsManagementDatabaseCurrent; // 0x2d8
	bool bUpdateManagementDatabaseAfterScan; // 0x2d9
	bool bIncludeOnlyOnDiskAssets; // 0x2da
	int32_t NumberOfSpawnedNotifications; // 0x2dc
	bool bForceUseAllBundlesDuringLoadRecursive; // 0x3d0
};

struct ALobbyBeaconClient : AOnlineBeaconClient {
	ALobbyBeaconState* LobbyState; // 0x2b0
	ALobbyBeaconPlayerState* PlayerState; // 0x2b8
	ELobbyBeaconJoinState LobbyJoinServerState; // 0x2c1
};

struct AKSEnvironmentVolumeActor : AActor {
	FName EnvironmentTag; // 0x228
	TArray<UEnvironmentTrackerComponent*> ContainedEnvironmentTrackers; // 0x230
};

struct UBountyDisplayIcon_C : UPUMG_Widget {
	UHorizontalBox* BountyIconContainer; // 0x4c0
	UTextBlock* CrownAmountTextDisplay; // 0x4c8
	UWidgetSwitcher* CrownSwitcher; // 0x4d0
	int32_t BountyLevel; // 0x4d8
};

struct UWBP_WeaponHubUpgradeEntry_C : UUserWidget {
	UTextBlock* Description; // 0x238
	UImage* Image_221; // 0x240
	UTextBlock* PurchaseCost; // 0x248
	UTextBlock* UpgradeName; // 0x250
};

struct USubUVAnimation : UObject {
	UTexture2D* SubUVTexture; // 0x28
	int32_t SubImages_Horizontal; // 0x30
	int32_t SubImages_Vertical; // 0x34
	ESubUVBoundingVertexCount BoundingMode; // 0x38
	EOpacitySourceMode OpacitySourceMode; // 0x39
	float AlphaThreshold; // 0x3c
};

struct USoundNodeEnveloper : USoundNode {
	float LoopStart; // 0x48
	float LoopEnd; // 0x4c
	float DurationAfterLoop; // 0x50
	int32_t LoopCount; // 0x54
	char bLoopIndefinitely : 1; // 0x58
	char bLoop : 1; // 0x58
	UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x60
	UDistributionFloatConstantCurve* PitchInterpCurve; // 0x68
	FRuntimeFloatCurve VolumeCurve; // 0x70
	FRuntimeFloatCurve PitchCurve; // 0xf8
	float PitchMin; // 0x180
	float PitchMax; // 0x184
	float VolumeMin; // 0x188
	float VolumeMax; // 0x18c
};

struct UWBP_SettingsCarousel_C : UKSSettingsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UWidgetAnimation* Right_Hover; // 0x580
	UWidgetAnimation* Left_Hover; // 0x588
	UWidgetAnimation* Button_Text_Anim_Reset; // 0x590
	UWidgetAnimation* Left_Button_Text_Anim; // 0x598
	UWidgetAnimation* Right_Button_Text_Anim; // 0x5a0
	UWidgetAnimation* Hover; // 0x5a8
	UTextBlock* AnimatedTextBlock; // 0x5b0
	UButton* Carousel_Button; // 0x5b8
	UTextBlock* DisplayTextBlock; // 0x5c0
	UButton* Left_Button; // 0x5c8
	UHorizontalBox* LightInicationBox; // 0x5d0
	UButton* Right_Button; // 0x5d8
	TArray<UWBP_SettingsCarousel_Light_Indicator_C*> Indicator Lights; // 0x5e0
	UAkAudioEvent* HoverSettingsCarouselSFX; // 0x5f0
	UAkAudioEvent* ClickSettingsCarouselSFX; // 0x5f8
};

struct UKSModInst_GiveWeaponOnActivation : UKSModInst_GiveItemOnActivation {
	bool bActivatesOnIdle; // 0x498
	bool bActivatesOnFire; // 0x499
	bool bRestrictSwapping; // 0x4a8
	bool bSwapToMain; // 0x4a9
	bool bConsiderAsSwapToPrevious; // 0x4aa
	bool bEndActivationOnHolster; // 0x4d0
	bool bEndActivationOnEmptyClip; // 0x4d1
	bool bEndActivationOnExhausted; // 0x4d2
	bool bConsumeChargeWhenItemRemoved; // 0x4d3
	bool bConsumeChargeWhenFired; // 0x4d4
	bool bConsumeChargeWhenAmmoConsumed; // 0x4d5
	bool bReplenishesAmmoOnFullyCharged; // 0x4d6
	bool bReplenishesAmmoOnDurationIncreased; // 0x4d7
	bool bShouldBroadcastWeaponHits; // 0x4d8
	FTimerHandle SwapFromRetryTimer; // 0x4e0
	float SwapFromRetryTime; // 0x4e8
	bool bSwappingOff; // 0x4ec
	TArray<AActor*> DeployableActors; // 0x4f0
};

struct UInterpTrack : UObject {
	TArray<UInterpTrack*> SubTracks; // 0x38
	UInterpTrackInst* TrackInstClass; // 0x48
	ETrackActiveCondition ActiveCondition; // 0x50
	FString TrackTitle; // 0x58
	char bOnePerGroup : 1; // 0x68
	char bDirGroupOnly : 1; // 0x68
	char bDisableTrack : 1; // 0x68
	char bIsSelected : 1; // 0x68
	char bIsAnimControlTrack : 1; // 0x68
	char bSubTrackOnly : 1; // 0x68
	char bVisible : 1; // 0x68
	char bIsRecording : 1; // 0x68
};

struct UKSAttachCosmeticInst_Reactive : UKSWeaponAttachmentCosmeticInst {
	bool bWasInitializedOnNewWeapon; // 0x1b0
	int32_t DemoModePreviewStateIndex; // 0x1b4
	TWeakObjectPtr<UKSWeaponSkeletalMeshComponent> WeaponMesh; // 0x1c8
	bool bEnableDemoPreviewMode; // 0x1e0
	bool bCosmeticUpdatesHidden; // 0x1e1
	EWeaponStateNew CurrentWeaponState; // 0x1e2
	bool bOwningPawnInstigatedMostRecentDown; // 0x1e3
	bool bOwningWeaponInstigatedMostRecentDown; // 0x1e4
	float DamageWithinTimePeriod; // 0x1e8
	FTimerHandle IdleCooldownTimer; // 0x1f0
	FTimerHandle DamageWithinTimePeriodTimer; // 0x1f8
	UKSWeaponAttachment_Reactive* WepAttachReactive; // 0x200
	int32_t ProgressionIntA; // 0x208
	int32_t ProgressionIntB; // 0x20c
	int32_t ProgressionIntC; // 0x210
	float ProgressionFloatA; // 0x214
	float ProgressionFloatB; // 0x218
	float ProgressionFloatC; // 0x21c
	bool bTrackAIsResetting; // 0x220
	bool bTrackBIsResetting; // 0x221
	bool bTrackCIsResetting; // 0x222
	bool bTrackAShouldResetOnNewWeapons; // 0x223
	bool bTrackBShouldResetOnNewWeapons; // 0x224
	bool bTrackCShouldResetOnNewWeapons; // 0x225
	char PersistentCacheA; // 0x226
	char PersistentCacheB; // 0x227
	char PersistentCacheC; // 0x228
	char PersistentFlags; // 0x229
};

struct UPUMG_PlayerDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnPlayerDataChanged; // 0x38
	FMulticastInlineDelegate OnPlayerRankChanged; // 0x48
	FMulticastInlineDelegate OnCrossplayChanged; // 0x58
	int64_t PlayerId; // 0x68
	FString PlayerName; // 0x70
	int32_t Level; // 0x80
	int32_t AvatarId; // 0x84
	int32_t LastMMR; // 0x88
	int32_t CurrentMMR; // 0x8c
	int32_t BestMMR; // 0x90
	int32_t CurrentWinRank; // 0x94
	int32_t PreviousWinRank; // 0x98
	int32_t CurrentWinPeak; // 0x9c
	int32_t PreviousWinPeak; // 0xa0
	int32_t CurrentWinStreak; // 0xa4
	int32_t PreviousWinStreak; // 0xa8
};

struct UNiagaraDataInterfaceStaticMesh : UNiagaraDataInterface {
	UStaticMesh* DefaultMesh; // 0x30
	AActor* Source; // 0x38
	UStaticMeshComponent* SourceComponent; // 0x40
	FNDIStaticMeshSectionFilter SectionFilter; // 0x48
};

struct USocialToolkit : UObject {
	USocialUser* LocalUser; // 0x60
	TArray<USocialUser*> AllUsers; // 0x68
	ULocalPlayer* LocalPlayerOwner; // 0xc8
	USocialChatManager* SocialChatManager; // 0xd0
};

struct UDistributionVectorUniformParameter : UDistributionVector {
	FName MaxParamName; // 0x38
	FName MinParamName; // 0x40
	FVector DefaultMaxValue; // 0x48
	FVector DefaultMinValue; // 0x54
};

struct UParticleModulePivotOffset : UParticleModuleLocationBase {
	FVector2D PivotOffset; // 0x30
};

struct UKSPawnAction_StopFire : UKSPawnActionBase {
	FGameplayTag EquipPoint; // 0xa0
};

struct AKSProjectile : AKSLagCompensatedActor {
	FKSEquipmentContainer EquipmentContainer; // 0x2d8
	UKSWeaponComponent* WeaponComponent; // 0x500
	FKSEquipmentId WeaponComponentEquipmentId; // 0x508
	UKSWeaponAsset* CachedWeaponAsset; // 0x510
	EProjectileWeaponComponentType WeaponComponentType; // 0x518
	TArray<FName> ApparelObjectsToListenTo; // 0x520
	FGameplayTagContainer SkinTagContainer; // 0x530
	float HorizontalThrowSpeed; // 0x568
	float MaxSpeed; // 0x56c
	bool bModifyInitialSpeedWithPitch; // 0x570
	bool bDeadOrDownedDrop; // 0x571
	bool bCanBeIntercepted; // 0x572
	USceneComponent* CollisionComponent0; // 0x578
	UProjectileMovementComponent* ProjectileMovementComponent; // 0x580
	FHitResult ProjectileHit; // 0x588
	float LifeSpanAfterDeactivate; // 0x610
	bool bShouldHideOnDeactivate; // 0x614
	bool bStopped; // 0x615
	int32_t NumBounces; // 0x618
	int32_t NumPenetrations; // 0x61c
	float AdditionalPredictionTimeLenience; // 0x630
	float AdditionalPredictionArcTime; // 0x634
	float HitValidationLenience; // 0x638
	bool bValidateHitsWithCollision; // 0x63c
	FHitResult StoppingHit; // 0x640
	bool bAttachWhenStopped; // 0x6c8
	bool bDetachWhenBumped; // 0x6c9
	bool bSimulatePhysicsWhenStopped; // 0x6ca
	bool bFreezeProjectileOnStop; // 0x6cb
	bool bDeflectOffShield; // 0x6cc
	bool bDealPointDamageAfterDetach; // 0x6e0
	float DebugDrawLifetime; // 0x6e4
	bool bCreateClusterSegmentsOnStopped; // 0x6e8
	bool bCreateClusterSegmentsOnExplode; // 0x6e9
	FMulticastInlineDelegate OnWeaponAssetSet; // 0x6f0
	UKSWeaponAsset* WeaponAsset; // 0x710
	UKSWeaponAsset* ParentWeaponAsset; // 0x718
	UKSWeaponAsset* DamageWeaponAssetOverride; // 0x720
	AKSWeapon* SpawningWeapon; // 0x728
	float TimeCooked; // 0x730
	FVector SpawnLocation; // 0x734
	FRotator SpawnRotation; // 0x740
	UPrimitiveComponent* PrimitiveCollisionComponent; // 0x750
	FVector LocationLastFrame; // 0x758
	bool bActive; // 0x764
	EProjectileExplosionType DeactivateExplosionType; // 0x765
	bool bDeactivateInWater; // 0x766
	FMulticastInlineDelegate OnProjectileDeactivated; // 0x768
	bool bCanBeKilled; // 0x77c
	float MaxHealth; // 0x780
	bool bSetInstigatorToKiller; // 0x784
	float CurrentHealth; // 0x788
	float LifeSpanAfterKilled; // 0x78c
	bool bExplodeOnKilled; // 0x790
	AController* FriendlyKiller; // 0x798
	bool bProjectileKillPending; // 0x7a0
	FMulticastInlineDelegate OnProjectileKilled; // 0x7a8
	bool bAffectsFriendly; // 0x7b8
	bool bAllowFriendlyPlayersToDamage; // 0x7b9
	bool bPenetratesFriendly; // 0x7ba
	bool bAffectsEnemy; // 0x7bb
	bool bPenetratesEnemy; // 0x7bc
	bool bHasPlayedExplosion; // 0x7bd
	FMulticastInlineDelegate OnPlayExplosion; // 0x7c0
	UParticleSystem* DefaultSpang; // 0x7d0
	TMap<EPhysicalSurface, UParticleSystem*> SurfaceSpangs; // 0x7d8
	float SpinsPerSecond; // 0x828
	float SpeedToReachSpinsPerSecond; // 0x82c
	FVector SpinAxis; // 0x830
	bool bSpinAfterDetaching; // 0x83c
	bool bCanBreakDestructibles; // 0x83d
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x840
	UKSInteractableComponent* InteractableComponent; // 0x848
	bool bCanReclaim; // 0x850
	bool bDestroyOnReclaim; // 0x851
	float InteractionDistanceOffset; // 0x854
	EProjectileReclaimPermission ReclaimPermissions; // 0x858
	bool bShouldRestoreWeaponAssetOnReclaim; // 0x859
	float ReclaimTime; // 0x85c
	UKSInteractionType* ReclaimInteractionType; // 0x860
	AKSCharacter* Reclaimer; // 0x868
	bool bReclaimPending; // 0x870
	int32_t ReclaimStock; // 0x874
	FMulticastInlineDelegate OnReclaim; // 0x878
	bool bShouldModifyVisibilityChecks; // 0x888
	float VisibilityDistance; // 0x88c
	bool bShowOnHud; // 0x890
	UObject* WidgetIcon; // 0x898
	TSoftClassPtr<UObject> MinimapDisplayWidget; // 0x8a0
	TSoftClassPtr<UObject> FullmapDisplayWidget; // 0x8c8
	TSoftClassPtr<UObject> OverlayDisplayWidget; // 0x8f0
	EProjectileVisibilityType WidgetIconAudience; // 0x918
	EProjectileVisibilityType OverlayIconAudience; // 0x919
	TArray<FProjectileWidgetInfo> WidgetInfos; // 0x920
	int32_t OriginalOwnerId; // 0x930
	TArray<FGameplayTag> ItemTags; // 0x938
};

struct URestrictedGameplayTagsList : UObject {
	FString ConfigFileName; // 0x28
	TArray<FRestrictedGameplayTagTableRow> RestrictedGameplayTagList; // 0x38
};

struct UTextureRenderTarget : UTexture {
	float TargetGamma; // 0xb8
};

struct UMaster_Melee_ABP_C : UKSWeaponAnimInstance {
	FPointerToUberGraphFrame UberGraphFrame; // 0x3f0
	FAnimNode_Root AnimGraphNode_Root; // 0x3f8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x438
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x470
	FAnimNode_RefPose AnimGraphNode_LocalRefPose_3; // 0x4a8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_4; // 0x4d0
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x630
	FAnimNode_RefPose AnimGraphNode_LocalRefPose_2; // 0x670
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_3; // 0x698
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x7f8
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0x838
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_2; // 0x8f8
	FAnimNode_RefPose AnimGraphNode_LocalRefPose; // 0xa58
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0xa80
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0xbe0
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0xc20
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0xce0
	bool Is Holstered; // 0xd90
};

struct UGizmoLocalVec2ParameterSource : UGizmoBaseVec2ParameterSource {
	FVector2D Value; // 0x48
	FGizmoVec2ParameterChange LastChange; // 0x50
};

struct UKSMeleeTargetingModule : UKSProjectileTargetingModule {
	bool bHasLungeTarget; // 0x3a8
	bool bHasThrowTarget; // 0x3a9
	UKSWeaponAsset_Melee* MeleeAsset; // 0x3b0
	FVector ImpactOnCharacterComponentSize; // 0x3b8
	UMaterialInterface* ImpactOnCharacterComponentMaterial; // 0x3c8
	FName ImpactOnCharacterColorParameterName; // 0x3d0
	FName ImpactOnCharacterCookParameterName; // 0x3d8
	UStaticMesh* ImpactOnCharacterMesh; // 0x3e0
	UMaterialInstanceDynamic* ImpactOnCharacterMaterialInstance; // 0x3e8
	UStaticMeshComponent* ImpactOnCharacterComponent; // 0x3f0
};

struct UKSSettingsDataFactory : UPUMG_SettingsDataFactory {
	FMulticastInlineDelegate OnSettingsReceivedFromPlayerAccount; // 0xe0
	FMulticastInlineDelegate OnKeyBindSettingsApplied; // 0x190
	FMulticastInlineDelegate OnKeyBindSettingsSaved; // 0x1a0
	TArray<FKSSettingPropertyId> BoolSettingPropertyIds; // 0x1b0
	TArray<FKSSettingPropertyId> IntSettingPropertyIds; // 0x210
	TArray<FKSSettingPropertyId> FloatSettingPropertyIds; // 0x270
	TSoftObjectPtr<UKSSettingsMenuConfigAsset> KSSettingsMenuConfigAssetSoftObjectPtr; // 0x330
	UKSSettingsMenuConfigAsset* KSSettingsMenuConfigAsset; // 0x358
	FMulticastInlineDelegate OnDisplayLanguageApplied; // 0x370
	FMulticastInlineDelegate OnDisplayLanguageSaved; // 0x380
	FMulticastInlineDelegate OnScreenResolutionApplied; // 0x390
	FMulticastInlineDelegate OnScreenResolutionSaved; // 0x3a0
};

struct UMaterialExpressionChannelMaskParameter : UMaterialExpressionVectorParameter {
	EChannelMaskParameterColor MaskChannel; // 0x70
	FExpressionInput Input; // 0x74
};

struct UGizmoPlaneTranslationParameterSource : UGizmoBaseVec2ParameterSource {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x90
	TScriptInterface<IGizmoTransformSource> TransformSource; // 0xa0
	FVector2D Parameter; // 0xb0
	FGizmoVec2ParameterChange LastChange; // 0xb8
	FVector CurTranslationOrigin; // 0xc8
	FVector CurTranslationNormal; // 0xd4
	FVector CurTranslationAxisX; // 0xe0
	FVector CurTranslationAxisY; // 0xec
	FTransform InitialTransform; // 0x100
};

struct UKSWeaponHubBase : UKSWidget {
	UKSWeaponProgressMeter* TotalWeaponMasteryMeter; // 0x520
	UKSRelatedRoguesGroup* RelatedRogues; // 0x528
};

struct UBTTask_PushPawnAction : UBTTask_PawnActionBase {
	UPawnAction* Action; // 0x70
};

struct UInputKeyDelegateBinding : UInputDelegateBinding {
	TArray<FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x28
};

struct UDebugMenu_C : UKSDebugMenu {
	FPointerToUberGraphFrame UberGraphFrame; // 0x530
	UImage* BackImage; // 0x538
	UVerticalBox* BaseCommandBox; // 0x540
	UScrollBox* CommandScroll; // 0x548
	UImage* ConfirmImage; // 0x550
	TArray<FDebugMenuCommandInfo> CommandStack; // 0x558
};

struct ASceneCapture : AActor {
	UStaticMeshComponent* MeshComp; // 0x220
	USceneComponent* SceneComponent; // 0x228
};

struct UKSOutOfBoundsManager_RoundGame : UKSOutOfBoundsManager {
	float SecondsIntoRoundToFreeze; // 0x140
	UKSPlayerMod* FrozenCharacterModAsset; // 0x158
};

struct UKSJobSelectionChoiceWidget : UKSJobSelectorWidget {
	TArray<UButton*> HitTargets; // 0x568
	UKSJobItem* LocalJob; // 0x578
};

struct UWBP_ThrobberHorizontal_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* Cycle; // 0x240
	UImage* Diamond; // 0x248
	UImage* Diamond_2; // 0x250
	UImage* Diamond_3; // 0x258
	UHorizontalBox* ThrobberBox; // 0x260
};

struct UWBP_ActiveBoosterEntry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* GlowPulse; // 0x240
	UImage* BGGradient; // 0x248
	UWBP_AsyncIcon_C* BonusIcon; // 0x250
	UVerticalBox* BoostDescriptionContainer; // 0x258
	USizeBox* BoosterIconSize; // 0x260
	UImage* BoosterShine; // 0x268
	URichTextBlock* DescRichText; // 0x270
	UTextBlock* EventName; // 0x278
	UTextBlock* EventTimeRemaining; // 0x280
	UImage* TimeRemainingIcon; // 0x288
	USizeBox* TimeRemainingIconWrapper; // 0x290
	bool isCompactView; // 0x298
};

struct UKSActivityProgress_ViewRedirector : UKSActivity_ViewRedirector {
	TArray<int32_t> ActivityProgressMilestone; // 0x38
	FString ActivityProgressMilestoneSetting; // 0x48
	bool IncrementActivityProgressBeforeCheck; // 0x58
};

struct UDirectionalLightComponent : ULightComponent {
	float ShadowCascadeBiasDistribution; // 0x338
	char bEnableLightShaftOcclusion : 1; // 0x33c
	float OcclusionMaskDarkness; // 0x340
	float OcclusionDepthRange; // 0x344
	FVector LightShaftOverrideDirection; // 0x348
	float WholeSceneDynamicShadowRadius; // 0x354
	float DynamicShadowDistanceMovableLight; // 0x358
	float DynamicShadowDistanceStationaryLight; // 0x35c
	int32_t DynamicShadowCascades; // 0x360
	float CascadeDistributionExponent; // 0x364
	float CascadeTransitionFraction; // 0x368
	float ShadowDistanceFadeoutFraction; // 0x36c
	char bOnlyMovableObjectsInCascades : 1; // 0x370
	char bUseInsetShadowsForMovableObjects : 1; // 0x370
	int32_t FarShadowCascadeCount; // 0x374
	float FarShadowDistance; // 0x378
	float DistanceFieldShadowDistance; // 0x37c
	float LightSourceAngle; // 0x380
	float LightSourceSoftAngle; // 0x384
	float TraceDistance; // 0x388
	FLightmassDirectionalLightSettings LightmassSettings; // 0x38c
	char bCastModulatedShadows : 1; // 0x39c
	FColor ModulatedShadowColor; // 0x3a0
	float ShadowAmount; // 0x3a4
	char bUsedAsAtmosphereSunLight : 1; // 0x3a8
	int32_t AtmosphereSunLightIndex; // 0x3ac
};

struct UWBP_SettingsMenu_C : UKSSettingsMenu {
	FPointerToUberGraphFrame UberGraphFrame; // 0x548
	UWidgetAnimation* BackHovered; // 0x550
	UWidgetAnimation* RevertHovered; // 0x558
	UWidgetAnimation* ApplyHovered; // 0x560
	UWBP_KeyCallout_C* LeftTabCallout; // 0x568
	UHorizontalBox* NavTabBox; // 0x570
	UOverlay* PreviewContainer; // 0x578
	UWBP_KeyCallout_C* RightTabCallout; // 0x580
	UTextBlock* SettingsDescription; // 0x588
	UWidgetSwitcher* SettingsPageWidgetSwitcher; // 0x590
	UTextBlock* SettingsTitle; // 0x598
	UWBP_panel_bevel_C* WBP_panel_bevel; // 0x5a0
	TArray<UWBP_subscreen_nav_tab_C*> WBP_subscreen_nav_tabs; // 0x5a8
	TArray<UPUMG_Widget*> TopWidgets; // 0x5b8
	TArray<UPUMG_Widget*> BottomWidgets; // 0x5c8
	EPUMG_LoginState Login State; // 0x5d8
	FName TAB_LEFT_NAME; // 0x5dc
	FName TAB_RIGHT_NAME; // 0x5e4
	FName APPLY_NAME; // 0x5ec
	FName RESTORE_NAME; // 0x5f4
	TArray<UKSSettingsPage*> WBP_SubScreens; // 0x600
	FName ESC_NAME; // 0x610
	UAkAudioEvent* BackSettingsMenuSFX; // 0x618
	UAkAudioEvent* RevertSettingsMenuSFX; // 0x620
	UAkAudioEvent* ApplySettingsMenuSFX; // 0x628
	TArray<UKSWidget*> PreviewWidgets; // 0x630
	bool bContainsAnyKeyBindings; // 0x640
};

struct UMainCharacterThreatComponent_C : UConfigurableThreatComponent_C {
	TMap<int32_t, FLinearColor> DebugColorMap; // 0x190
	bool DebuggingVisuals; // 0x1e0
	FLinearColor K2Node_MakeStruct_LinearColor; // 0x1e4
	float K2Node_Event_DeltaSeconds; // 0x1f4
	bool K2Node_Event_Show; // 0x1f8
	FLinearColor K2Node_MakeStruct_LinearColor_2; // 0x1fc
	FLinearColor CallFunc_Map_Find_Value; // 0x20c
};

struct UWBP_CosmeticItemTagEntry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Image_176; // 0x528
	UTextBlock* Text; // 0x530
	FText TagText; // 0x538
};

struct UMaterialExpressionVirtualTextureFeatureSwitch : UMaterialExpression {
	FExpressionInput No; // 0x40
	FExpressionInput Yes; // 0x54
};

struct UKSAudioPlayerStateParameterData : UObject {
	FString ActiveGameMode; // 0x28
	FString ActiveMapLevel; // 0x38
	FString ActiveMusicPack; // 0x48
	FString ActivePlayerCharacter; // 0x58
	bool IsSpectating; // 0x68
	FString PreviousGameMode; // 0x70
	FString PreviousMapLevel; // 0x80
	FString PreviousMusicPack; // 0x90
	FString PreviousPlayerCharacter; // 0xa0
	bool PreviousIsSpectating; // 0xb0
};

struct UWBP_PlayerProfileScreen_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnShow; // 0x528
	UImage* BG; // 0x530
	UTextBlock* PlayerIdDisplay; // 0x538
	UKSAsyncImage* PortalIcon; // 0x540
	UWBP_PlayerProfileScreen_AccountPanel_C* WBP_PlayerProfileScreen_AccountPanel; // 0x548
	UWBP_PlayerProfileScreen_AwardPanel_C* WBP_PlayerProfileScreen_AwardPanel; // 0x550
	UWBP_PlayerProfileScreen_StatPanel_C* WBP_PlayerProfileScreen_StatPanel; // 0x558
};

struct USocialManager : UObject {
	TArray<USocialToolkit*> SocialToolkits; // 0x48
	USocialDebugTools* SocialDebugTools; // 0x58
};

struct UKSPawnActionBase : UPawnAction_BlueprintBase {
	AKSCharacter* KSChar; // 0x98
};

struct UHapticFeedbackEffect_Curve : UHapticFeedbackEffect_Base {
	FHapticFeedbackDetails_Curve HapticDetails; // 0x28
};

struct UWidget : UVisual {
	UPanelSlot* Slot; // 0x28
	FDelegate bIsEnabledDelegate; // 0x30
	FText ToolTipText; // 0x40
	FDelegate ToolTipTextDelegate; // 0x58
	UWidget* ToolTipWidget; // 0x68
	FDelegate ToolTipWidgetDelegate; // 0x70
	FDelegate VisibilityDelegate; // 0x80
	FWidgetTransform RenderTransform; // 0x90
	FVector2D RenderTransformPivot; // 0xac
	char bIsVariable : 1; // 0xb4
	char bCreatedByConstructionScript : 1; // 0xb4
	char bIsEnabled : 1; // 0xb4
	char bOverride_Cursor : 1; // 0xb4
	USlateAccessibleWidgetData* AccessibleWidgetData; // 0xb8
	char bIsVolatile : 1; // 0xc0
	char bAllowRenderInterpolation : 1; // 0xc0
	char bIssueGlobalInvalidateOnVisible : 1; // 0xc0
	char DebugWidgetIndex; // 0xc1
	EMouseCursor Cursor; // 0xc2
	EWidgetClipping Clipping; // 0xc3
	ESlateVisibility Visibility; // 0xc4
	float RenderOpacity; // 0xc8
	UWidgetNavigation* Navigation; // 0xd0
	EFlowDirectionPreference FlowDirectionPreference; // 0xd8
	TArray<UPropertyBinding*> NativeBindings; // 0x100
};

struct UMaterialExpressionLogarithm10 : UMaterialExpression {
	FExpressionInput X; // 0x40
};

struct UKSScreenMarkerWidgetBase : UKSMapIconWidgetBase {
	bool bHideWhenOffscreen; // 0x318
	FVector2D OffscreenMargins; // 0x31c
};

struct UMaterialExpressionSceneTexture : UMaterialExpression {
	FExpressionInput Coordinates; // 0x40
	ESceneTextureId SceneTextureId; // 0x54
	bool bFiltered; // 0x55
};

struct UParticleModuleAccelerationOverLifetime : UParticleModuleAccelerationBase {
	FRawDistributionVector AccelOverLife; // 0x38
};

struct ACameraRig_Rail : AActor {
	float CurrentPositionOnRail; // 0x220
	bool bLockOrientationToRail; // 0x224
	USceneComponent* TransformComponent; // 0x228
	USplineComponent* RailSplineComponent; // 0x230
	USceneComponent* RailCameraMount; // 0x238
};

struct UKSWeaponAttachment_DefaultAmmo : UKSWeaponAttachment {
	int32_t DefaultAmmoIncrease; // 0x2f8
};

struct UAnimCompress : UAnimBoneCompressionCodec {
	char bNeedsSkeleton : 1; // 0x38
	AnimationCompressionFormat TranslationCompressionFormat; // 0x3c
	AnimationCompressionFormat RotationCompressionFormat; // 0x3d
	AnimationCompressionFormat ScaleCompressionFormat; // 0x3e
};

struct UGameplayTask_TimeLimitedExecution : UGameplayTask {
	FMulticastInlineDelegate OnFinished; // 0x68
	FMulticastInlineDelegate OnTimeExpired; // 0x78
};

struct UKSEquipOnAcquisitionData : UObject {
	int32_t LoadoutTypeId; // 0x28
	int32_t LoadoutSlotTypeId; // 0x2c
	int32_t LoadoutSlotPosition; // 0x30
	UKSJobItem* JobToEquipTo; // 0x38
	UKSWeaponAsset* WeaponToEquipTo; // 0x40
	UKSItem* ItemToEquip; // 0x48
};

struct UKSBTTask_Strafe : UKSBTTask_MoveToBlackboard {
	float DirectionAngleMax; // 0xf0
	float DirectionAngleMin; // 0xf4
	bool bInvertAngle; // 0xf8
	float MinDistance; // 0xfc
	float MaxDistance; // 0x100
};

struct UBlackboardKeyType_NativeEnum : UBlackboardKeyType {
	FString EnumName; // 0x30
	UEnum* EnumType; // 0x40
};

struct UKSActivityRequirement_JobTag : UKSActivityRequirement {
	FGameplayTag RequiredJobTag; // 0x30
};

struct UAppleImageUtilsBaseAsyncTaskBlueprintProxy : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
	FAppleImageUtilsImageConversionResult ConversionResult; // 0x60
};

struct AKSDropOffZone : AKSObjectiveBase {
	EKSPOIState POIState; // 0x390
	int32_t Team; // 0x394
	int32_t FlipTeam; // 0x398
	bool bActivated; // 0x39c
	FName PointAreaComponentTag; // 0x3a0
	TArray<UPrimitiveComponent*> PointAreaComponents; // 0x3a8
	UKSInteractionManager* CurrentInteractionManager; // 0x3b8
	AKSCharacter* CurrentInteractor; // 0x3c0
	float CurrentInteractionProgress; // 0x3c8
	FGameplayTag MacGuffinEquipPoint; // 0x3cc
	float DropOffDuration; // 0x3d4
	FText DropOffProgressText; // 0x3d8
	FText DropOffPrompt; // 0x3f0
	FName DropOffInteractionMode; // 0x408
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x410
	UKSInteractableComponent* InteractableComponent; // 0x428
};

struct UKSPlayerShopWidgetBase : UKSWidget {
	AKSPlayerShop* PlayerShop; // 0x528
};

struct UGizmoArrowComponent : UGizmoBaseComponent {
	FVector Direction; // 0x450
	float Gap; // 0x45c
	float Length; // 0x460
	float Thickness; // 0x464
};

struct UDropdown_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* hoveranim; // 0x528
	UImage* DropArrow; // 0x530
	UMenuAnchor* DropdownAnchor; // 0x538
	UImage* DropDownBkg; // 0x540
	UButton* HitTarget; // 0x548
	UTextBlock* SelectionText; // 0x550
	FMulticastInlineDelegate OnSelectionChanged; // 0x558
	TArray<FText> Options; // 0x568
	FText DefaultSelection; // 0x578
	int32_t HoverIndex; // 0x590
	int32_t SelectionIndex; // 0x594
	FText HintText; // 0x598
	bool IgnoreFirst; // 0x5b0
	bool IgnoreCanceled; // 0x5b1
	UDropdownList_C* DropdownList; // 0x5b8
	UAkAudioEvent* ClickDropdownSFX; // 0x5c0
	UAkAudioEvent* HoverDropdownSFX; // 0x5c8
	FMulticastInlineDelegate OnHoverPreview; // 0x5d0
	FMulticastInlineDelegate OnSelectionCanceled; // 0x5e0
};

struct UWidgetInteractionComponent : USceneComponent {
	FMulticastInlineDelegate OnHoveredWidgetChanged; // 0x208
	int32_t VirtualUserIndex; // 0x228
	float PointerIndex; // 0x22c
	ECollisionChannel TraceChannel; // 0x230
	float InteractionDistance; // 0x234
	EWidgetInteractionSource InteractionSource; // 0x238
	bool bEnableHitTesting; // 0x239
	bool bShowDebug; // 0x23a
	FLinearColor DebugColor; // 0x23c
	FHitResult CustomHitResult; // 0x2c8
	FVector2D LocalHitLocation; // 0x350
	FVector2D LastLocalHitLocation; // 0x358
	UWidgetComponent* HoveredWidgetComponent; // 0x360
	FHitResult LastHitResult; // 0x368
	bool bIsHoveredWidgetInteractable; // 0x3f0
	bool bIsHoveredWidgetFocusable; // 0x3f1
	bool bIsHoveredWidgetHitTestVisible; // 0x3f2
};

struct AGameNetworkManager : AInfo {
	float BadPacketLossThreshold; // 0x220
	float SeverePacketLossThreshold; // 0x224
	int32_t BadPingThreshold; // 0x228
	int32_t SeverePingThreshold; // 0x22c
	int32_t AdjustedNetSpeed; // 0x230
	float LastNetSpeedUpdateTime; // 0x234
	int32_t TotalNetBandwidth; // 0x238
	int32_t MinDynamicBandwidth; // 0x23c
	int32_t MaxDynamicBandwidth; // 0x240
	char bIsStandbyCheckingEnabled : 1; // 0x244
	char bHasStandbyCheatTriggered : 1; // 0x244
	float StandbyRxCheatTime; // 0x248
	float StandbyTxCheatTime; // 0x24c
	float PercentMissingForRxStandby; // 0x250
	float PercentMissingForTxStandby; // 0x254
	float PercentForBadPing; // 0x258
	float JoinInProgressStandbyWaitTime; // 0x25c
	float MoveRepSize; // 0x260
	float MAXPOSITIONERRORSQUARED; // 0x264
	float MAXNEARZEROVELOCITYSQUARED; // 0x268
	float CLIENTADJUSTUPDATECOST; // 0x26c
	float MAXCLIENTUPDATEINTERVAL; // 0x270
	float MaxClientForcedUpdateDuration; // 0x274
	float ServerForcedUpdateHitchThreshold; // 0x278
	float ServerForcedUpdateHitchCooldown; // 0x27c
	float MaxMoveDeltaTime; // 0x280
	float MaxClientSmoothingDeltaTime; // 0x284
	float ClientNetSendMoveDeltaTime; // 0x288
	float ClientNetSendMoveDeltaTimeThrottled; // 0x28c
	float ClientNetSendMoveDeltaTimeStationary; // 0x290
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x294
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x298
	bool ClientAuthorativePosition; // 0x29c
	float ClientErrorUpdateRateLimit; // 0x2a0
	float ClientNetCamUpdateDeltaTime; // 0x2a4
	float ClientNetCamUpdatePositionLimit; // 0x2a8
	bool bMovementTimeDiscrepancyDetection; // 0x2ac
	bool bMovementTimeDiscrepancyResolution; // 0x2ad
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x2b0
	float MovementTimeDiscrepancyMinTimeMargin; // 0x2b4
	float MovementTimeDiscrepancyResolutionRate; // 0x2b8
	float MovementTimeDiscrepancyDriftAllowance; // 0x2bc
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x2c0
	bool bUseDistanceBasedRelevancy; // 0x2c1
};

struct AKSSprayInstance : AKSEmoteInstance {
	ECollisionChannel SprayTraceChannel; // 0x2e0
	float SprayTraceDistance; // 0x2e4
	FAimData CachedAim; // 0x2e8
	FVector CachedSprayLocation; // 0x338
	FRotator CachedSprayRotation; // 0x344
	TWeakObjectPtr<UPrimitiveComponent> CachedSprayTarget; // 0x350
	FVector CachedSprayNormal; // 0x358
	FRotator CachedSprayRotationByNormal; // 0x364
};

struct USub_Hero_ABP_Face_C : UKSFaceAnimInst {
	FAnimNode_Root AnimGraphNode_Root; // 0x10f0
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned_7; // 0x1130
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_7; // 0x12a0
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_3; // 0x12f8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2; // 0x13c8
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned_6; // 0x1498
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_6; // 0x1608
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned_5; // 0x1660
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned_4; // 0x17d0
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned_3; // 0x1940
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned_2; // 0x1ab0
	FAnimNode_SeqEvalSkinned AnimGraphNode_SeqEvalSkinned; // 0x1c20
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_5; // 0x1d90
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_4; // 0x1de8
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_3; // 0x1e40
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_2; // 0x1e98
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator; // 0x1ef0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum; // 0x1f48
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x2008
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x2048
	FAnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose; // 0x2108
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend; // 0x2190
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x2260
	FAnimNode_BlendByLOD AnimGraphNode_BlendByLOD; // 0x2310
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x23c0
	FAnimNode_BlendPoseNodeSkinned AnimGraphNode_BlendPoseSkinned; // 0x2470
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2; // 0x2548
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6; // 0x2610
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5; // 0x2648
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4; // 0x2680
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x26b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3; // 0x2768
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x27a0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x2868
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x28a0
	EKSEmotion emotionTest; // 0x28d8
	bool bIsServer; // 0x28d9
	bool bIsLobby; // 0x28da
};

struct UWBP_Challenge_Panel_v2_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnButtonHoverAnim; // 0x528
	UImage* Btn_BkgHoverGradient; // 0x530
	UImage* Btn_BkgPress; // 0x538
	UImage* Btn_Fill; // 0x540
	UImage* Btn_HoverStroke; // 0x548
	UImage* Btn_Stroke; // 0x550
	UOverlay* ButtonBackground; // 0x558
	UHorizontalBox* CarouselControls; // 0x560
	UHorizontalBox* CarouselHeaderWrapper; // 0x568
	UWBP_ChallengeEntry_Daily_Truncated_C* Challenge0; // 0x570
	UWBP_ChallengeEntry_Daily_Truncated_C* Challenge1; // 0x578
	UWBP_ChallengeEntry_Daily_Truncated_C* Challenge2; // 0x580
	UVerticalBox* ContractsDisplay; // 0x588
	UScaleBox* CTAWrapper; // 0x590
	UButton* HitTarget; // 0x598
	UWBP_ControllerPrompt_C* LeftNavPrompt_2; // 0x5a0
	UWidgetSwitcher* NavLeftSwitcher; // 0x5a8
	UWidgetSwitcher* NavRightSwitcher; // 0x5b0
	UWBP_ControllerPrompt_C* RightNavPrompt; // 0x5b8
	UHorizontalBox* RotatorButtons; // 0x5c0
	UWBP_ButtonArrow_C* ScrollLeftButton; // 0x5c8
	UWBP_ButtonArrow_C* ScrollLeftButton_2; // 0x5d0
	UCanvasPanel* WaitingForChallenges; // 0x5d8
	UWBP_CallToAction_C* WBP_CallToAction; // 0x5e0
	UWBP_Header3_C* WBP_Header3; // 0x5e8
	UWBP_NewsRotatorButton_C* WBP_NewsRotatorButton; // 0x5f0
	TArray<UWBP_Challenge_Renderer_C*> ChallengeRenderers; // 0x5f8
	FName SceneOwner; // 0x608
	bool CompoundHover; // 0x610
	FName CurrentChallengeDataTableRow; // 0x614
	FGameplayTag CurrentChallengeDataTableTag; // 0x61c
	FGameplayTag ContractsTag; // 0x624
};

struct ANavModifierVolume : AVolume {
	UNavArea* AreaClass; // 0x260
};

struct UWBP_LobbyEventDisplay_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animCTALoop; // 0x528
	UWidgetAnimation* HighlightCompleted; // 0x530
	UWidgetAnimation* OnClick; // 0x538
	UWidgetAnimation* Highlight; // 0x540
	UImage* BorderShimmer; // 0x548
	UImage* Btn_BkgHoverGradient; // 0x550
	UImage* Btn_BkgPress; // 0x558
	UImage* Btn_Fill; // 0x560
	UImage* Btn_HoverStroke; // 0x568
	UImage* Btn_Stroke; // 0x570
	UImage* BtnShimmer; // 0x578
	UOverlay* ButtonBackground; // 0x580
	UWBP_ProgressEarnedBar_C* BuyThroughEventProgress; // 0x588
	UWBP_KSCosmeticItemDisplay_C* BuyThroughRewardItem; // 0x590
	UImage* CheckMark; // 0x598
	UImage* CheckMark_2; // 0x5a0
	UWidgetSwitcher* ContentsSwitcher; // 0x5a8
	UWBP_ProgressEarnedBar_C* EventProgress; // 0x5b0
	UWBP_Header3_C* EventsHeader; // 0x5b8
	UTextBlock* EventXPText; // 0x5c0
	UTextBlock* EventXPText_2; // 0x5c8
	UTextBlock* EventXPText_3; // 0x5d0
	UImage* Fill; // 0x5d8
	UImage* Fill_2; // 0x5e0
	UImage* Fill_3; // 0x5e8
	UImage* Fill_4; // 0x5f0
	UImage* FillInterior; // 0x5f8
	UImage* FillInterior_2; // 0x600
	UCanvasPanel* FillShimmer; // 0x608
	UOverlay* FinishedItemIcon; // 0x610
	UOverlay* FinishedItemIcon_2; // 0x618
	UButton* HitTarget; // 0x620
	UWidgetSwitcher* IconSwitcher_BuyThroughIcon; // 0x628
	UOverlay* NormalItemIcon; // 0x630
	UOverlay* NormalItemIcon_2; // 0x638
	UTextBlock* RewardCountText; // 0x640
	UTextBlock* RewardCountText_2; // 0x648
	UWBP_KSCosmeticItemDisplay_C* RewardItem; // 0x650
	UWidgetSwitcher* StatusIconSmall; // 0x658
	UWBP_BattlePassEmblem_C* WBP_BattlePassEmblem; // 0x660
	UWBP_CallToAction_C* WBP_CallToAction; // 0x668
	UWidgetSwitcher* WidgetSwitcher_BuyThroughText; // 0x670
	bool IsFinished; // 0x678
	UAkAudioEvent* ClickLobbyEventDisplaySFX; // 0x680
	UAkAudioEvent* HoverLobbyEventDisplaySFX; // 0x688
	UAkAudioEvent* OverlayLobbyEventDisplaySFX; // 0x690
	EEventDisplayType DisplayType; // 0x698
	int32_t EventItemId; // 0x69c
	FName EventScreenViewed; // 0x6a0
};

struct ULandscapeComponent : UPrimitiveComponent {
	int32_t SectionBaseX; // 0x430
	int32_t SectionBaseY; // 0x434
	int32_t ComponentSizeQuads; // 0x438
	int32_t SubsectionSizeQuads; // 0x43c
	int32_t NumSubsections; // 0x440
	UMaterialInterface* OverrideMaterial; // 0x448
	UMaterialInterface* OverrideHoleMaterial; // 0x450
	TArray<FLandscapeComponentMaterialOverride> OverrideMaterials; // 0x458
	TArray<UMaterialInstanceConstant*> MaterialInstances; // 0x468
	TArray<UMaterialInstanceDynamic*> MaterialInstancesDynamic; // 0x478
	TArray<int8_t> LODIndexToMaterialIndex; // 0x488
	TArray<int8_t> MaterialIndexToDisabledTessellationMaterial; // 0x498
	UTexture2D* XYOffsetmapTexture; // 0x4a8
	FVector4 WeightmapScaleBias; // 0x4b0
	float WeightmapSubsectionOffset; // 0x4c0
	FVector4 HeightmapScaleBias; // 0x4d0
	FBox CachedLocalBox; // 0x4e0
	LazyObjectProperty CollisionComponent; // 0x4fc
	UTexture2D* HeightmapTexture; // 0x518
	TArray<FWeightmapLayerAllocationInfo> WeightmapLayerAllocations; // 0x520
	TArray<UTexture2D*> WeightmapTextures; // 0x530
	FGuid MapBuildDataId; // 0x540
	TArray<FGuid> IrrelevantLights; // 0x550
	int32_t CollisionMipLevel; // 0x560
	int32_t SimpleCollisionMipLevel; // 0x564
	float NegativeZBoundsExtension; // 0x568
	float PositiveZBoundsExtension; // 0x56c
	float StaticLightingResolution; // 0x570
	int32_t ForcedLOD; // 0x574
	int32_t LODBias; // 0x578
	FGuid StateId; // 0x57c
	FGuid BakedTextureMaterialGuid; // 0x58c
	UTexture2D* GIBakedBaseColorTexture; // 0x5a0
	char MobileBlendableLayerMask; // 0x5a8
	UMaterialInterface* MobileMaterialInterface; // 0x5b0
	TArray<UMaterialInterface*> MobileMaterialInterfaces; // 0x5b8
	TArray<UTexture2D*> MobileWeightmapTextures; // 0x5c8
};

struct UMaterialExpressionSkyAtmosphereAerialPerspective : UMaterialExpression {
	FExpressionInput WorldPosition; // 0x40
};

struct UBTTask_RunEQSQuery : UBTTask_BlackboardBase {
	UEnvQuery* QueryTemplate; // 0x98
	TArray<FEnvNamedValue> QueryParams; // 0xa0
	TArray<FAIDynamicParam> QueryConfig; // 0xb0
	EEnvQueryRunMode RunMode; // 0xc0
	FBlackboardKeySelector EQSQueryBlackboardKey; // 0xc8
	bool bUseBBKey; // 0xf0
	FEQSParametrizedQueryExecutionRequest EQSRequest; // 0xf8
};

struct UKSShopRuleComponent : UKSGameRuleComponent {
	int32_t StartingCash; // 0xb8
	EStartingCashRoundBonus StartingCashRoundBonus; // 0xbc
	bool bResetShopsOnTeamSidesFlipped; // 0xbd
	TSet<EShopItemType> TypesToNotResetOnTeamSidesFlipped; // 0xc0
	bool bResetShopsOnRoundPrepare; // 0x110
	TSet<EShopItemType> TypesToNotResetOnRoundPrepare; // 0x118
	bool bLockUndoEachRound; // 0x168
	bool bAllowShopAccessWhileDead; // 0x169
	bool bDisableShopOnClose; // 0x16a
	bool bDisableShopOnSignificantAction; // 0x16b
	bool bAllowUnmasteredWeapons; // 0x16c
	bool bCircleGameShopEnabled; // 0x16d
	AKSPlayerShop* ShopClass; // 0x170
	AKSGameShop* GameShopClass; // 0x178
	TMap<int64_t, AKSPlayerShop*> PlayerShops; // 0x180
	FKSShopPricing ShopPricing; // 0x220
	TSet<EShopItemType> PermanentItems; // 0x328
	TSet<EShopItemType> StartActiveItems; // 0x378
	TSet<EShopItemType> OneTimePurchaseItems; // 0x3c8
	TSet<EShopItemType> ExhaustibleItems; // 0x418
	TSet<EShopItemType> RoundItems; // 0x468
	TMap<EShopItemType, FShopItemList> PrerequisiteMap; // 0x4b8
	TMap<EShopItemType, FShopItemList> RestrictionMap; // 0x508
	FKSMaxCategoryPurchases MaxCategoryPurchases; // 0x558
	TArray<FKSGlobalGambitList> GlobalGambitList; // 0x578
	FKSGlobalPerkList GlobalPerkList; // 0x5b8
	FShopOptions ShopOptions; // 0x638
};

struct UKSPlayerMod_FullSpeedADS : UKSPlayerMod {
	float FullSpeedAlpha; // 0x330
};

struct UTireType : UDataAsset {
	float FrictionScale; // 0x30
};

struct UMaterialInterface : UObject {
	USubsurfaceProfile* SubsurfaceProfile; // 0x38
	FLightmassMaterialInterfaceSettings LightmassSettings; // 0x50
	TArray<FMaterialTextureInfo> TextureStreamingData; // 0x60
	TArray<UAssetUserData*> AssetUserData; // 0x70
};

struct UKSActivityManagerBase : UObject {
	TWeakObjectPtr<UKSGameInstance> GameInstance; // 0x40
	TWeakObjectPtr<AKSGameMode> GameMode; // 0x48
	TMap<int64_t, UKSPlayerActivityInstanceContainer*> ActivityInstancesPerPlayer; // 0xf0
	int32_t VendorsLoadGroupId; // 0x190
	TArray<TSoftObjectPtr<UKSActivity>> Activities; // 0x198
	TArray<TWeakObjectPtr<AKSPlayerController>> PlayerControllers; // 0x1a8
	EKSActivityManagerSetupPhase SetupPhase; // 0x208
};

struct UGeometryCacheTrackStreamable : UGeometryCacheTrack {
	UGeometryCacheCodecBase* Codec; // 0x58
	float StartSampleTime; // 0xc8
};

struct UMaterialExpressionParticleSubUV : UMaterialExpressionTextureSample {
	char bBlend : 1; // 0xd0
};

struct UKSAnimNotify_Footstep : UAnimNotify {
	TArray<EObjectTypeQuery> FootprintTraceObjectTypes; // 0x38
};

struct UAkPoolComponent : UBasePoolComponent {
	UAkComponent* PooledAkComponentClass; // 0xd8
	TArray<UAkComponent*> UnusedComponentsArray; // 0xe0
	TSet<UAkComponent*> UsedComponentsSet; // 0xf0
	UAkComponent* PeekedAkComponent; // 0x140
};

struct UParticleModuleAttractorPoint : UParticleModuleAttractorBase {
	FRawDistributionVector Position; // 0x30
	FRawDistributionFloat Range; // 0x78
	FRawDistributionFloat Strength; // 0xa8
	char StrengthByDistance : 1; // 0xd8
	char bAffectBaseVelocity : 1; // 0xd8
	char bOverrideVelocity : 1; // 0xd8
	char bUseWorldSpacePosition : 1; // 0xd8
	char Positive_X : 1; // 0xd8
	char Positive_Y : 1; // 0xd8
	char Positive_Z : 1; // 0xd8
	char Negative_X : 1; // 0xd8
	char Negative_Y : 1; // 0xd9
	char Negative_Z : 1; // 0xd9
};

struct UCompositeCurveTable : UCurveTable {
	TArray<UCurveTable*> ParentTables; // 0xa0
	TArray<UCurveTable*> OldParentTables; // 0xb0
};

struct UKSBotJobConfigMap : UDataAsset {
	TMap<TSoftObjectPtr<UKSJobItem>, FKSBotJobConfig> JobConfigs; // 0x30
};

struct AAmbientSound : AActor {
	UAudioComponent* AudioComponent; // 0x220
};

struct AKSLobbyCharacter : AKSCharacter {
	FName ViewModelName; // 0x3cc0
	UAnimMontage* ActiveLobbyMontage; // 0x3cc8
	bool bEnableRogueSelectWeaponPose; // 0x3cd0
	bool bEnableWalkinCinematicWeaponPose; // 0x3cd1
	ELobbyCharacterIndex CharacterIndex; // 0x3cd2
	UKSWeaponSkeletalMeshComponent* LobbyWeapon01Component; // 0x3cd8
	UKSWeaponSkeletalMeshComponent* LobbyWeapon02Component; // 0x3ce0
	UKSWeaponSkeletalMeshComponent* LobbyProp01Component; // 0x3ce8
	UKSWeaponSkeletalMeshComponent* LobbyProp02Component; // 0x3cf0
	UKSStaticMeshComponent* LobbyPropStatic01Component; // 0x3cf8
	UKSStaticMeshComponent* LobbyPropStatic02Component; // 0x3d00
	TMap<FName, FLobbySkeletalPropInfo> SkeletalPropMapping; // 0x3d08
	TMap<FName, FLobbyStaticPropInfo> StaticPropMapping; // 0x3d58
	bool ShouldHideInGame; // 0x3da8
	bool bWereTexturesStreamedIn; // 0x3da9
	bool bIsSet; // 0x3daa
	bool bHideUntilTexturesStream; // 0x3dab
	bool bForceEnableClothSim; // 0x3dac
	bool bPrestreamTextures; // 0x3dad
	int32_t ForcedLodModel; // 0x3db0
	bool bCustomForcedLodForSwitch; // 0x3db4
	int32_t ForcedLodModelSwitch; // 0x3db8
	ELobbyCharacterAnimState CurrentAnimState; // 0x3dc4
	FMulticastInlineDelegate OnVisibilityChangedDel; // 0x3dc8
	bool bIsRotatable; // 0x3dd8
	FVector MaxAxisRotation; // 0x3ddc
	float IdleSecondsToResetRotation; // 0x3de8
	float ResetRotationSpeedRadians; // 0x3dec
	FVector RotationRatePerAxis; // 0x3df0
};

struct UKSWeaponAttachment_ExtMagPercent : UKSWeaponAttachment {
	float ClipSizeIncreaseMultiplier; // 0x2f8
	EExtendedMagazineRounding RoundingType; // 0x2fc
};

struct UMovieSceneComponentMaterialTrack : UMovieSceneMaterialTrack {
	int32_t MaterialIndex; // 0x68
};

struct UKSWeaponAttachment_Reactive : UKSWeaponAttachment {
	bool ReactiveWrapPreviewModeActive; // 0x2f8
	FText ReactiveWrapPreviewDisplayDescription; // 0x300
	FName ProgressionTrackATitle; // 0x318
	FName ProgressionTrackBTitle; // 0x320
	FName ProgressionTrackCTitle; // 0x328
	TArray<FReactiveWrapMilestoneDisplay> ReactiveWrapPreviewParameters; // 0x330
	int32_t StartingMilestonePreviewIndex; // 0x340
	bool UtilizeOnComponentStateChanged; // 0x344
	bool TriggerOnFire; // 0x345
	bool ResetOnReload; // 0x346
	bool ResetOnInactive; // 0x347
	bool ResetOnHolster; // 0x348
	bool ResetOnIdleTimer; // 0x349
	float IdleResetTimerDuration; // 0x34c
	bool UtilizeOnAimModeChanged; // 0x350
	bool HideOnADS; // 0x351
	bool UtilizeOnAnyPlayerDeath; // 0x352
	bool TriggerOnKillingAnEnemyWithAnything; // 0x353
	bool TriggerOnKillingAnEnemyWithYourReactiveWeapon; // 0x354
	bool ResetOnYourDeath; // 0x355
	bool UtilizeOnAnyPlayerDowned; // 0x356
	bool TriggerOnDowningAnEnemyWithAnything; // 0x357
	bool TriggerOnDowningAnEnemyWithYourReactiveWeapon; // 0x358
	bool ResetOnYourDown; // 0x359
	bool UtilizeOnOwnedPawnInstigateDamage; // 0x35a
	bool TriggerOnDamagingAnEnemyWithAnything; // 0x35b
	bool TriggerOnDamagingAnEnemyWithYourReactiveWeapon; // 0x35c
	bool ResetOnYouTakeDamage; // 0x35d
	bool TriggerOnDamageThresholdWithYourReactiveWeaponOnly; // 0x35e
	float TargetTriggerDamageThreshold; // 0x360
	float DamageThresholdResetTimerDuration; // 0x364
	bool UtilizeOnMultiDownAchieved; // 0x368
	bool TriggerOnMutlipleDownsWithAnything; // 0x369
	bool TriggerOnMutlipleDownsWithYourReactiveWeapon; // 0x36a
	int32_t TargetNumberOfDownsToAchieve; // 0x36c
};

struct ULoadingScreenImageManager : UDataAsset {
	FLoadingScreenImageInfo FailSafeLoadingScreen; // 0x30
};

struct UTracerStaticMeshPoolComponent : UBasePoolComponent {
	UTracerStaticMeshComponent* PooledTraceStaticMeshComponentClass; // 0xd8
	TArray<UTracerStaticMeshComponent*> UnusedComponentsArray; // 0xe0
	TSet<UTracerStaticMeshComponent*> UsedComponentsSet; // 0xf0
	UTracerStaticMeshComponent* PeekedTracerStaticMeshComponent; // 0x140
};

struct UKSAISense_Team : UAISense {
	TArray<FKSAITeamStimulusEvent> RegisteredEvents; // 0x80
};

struct ALODActor : AActor {
	UStaticMeshComponent* StaticMeshComponent; // 0x220
	TMap<UMaterialInterface*, UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents; // 0x228
	UHLODProxy* Proxy; // 0x278
	FName Key; // 0x280
	float LODDrawDistance; // 0x288
	int32_t LODLevel; // 0x28c
	TArray<AActor*> SubActors; // 0x290
	char CachedNumHLODLevels; // 0x2a0
};

struct UKSPlayerMod_ApplyModOnEvent : UKSPlayerMod {
	float ModDuration; // 0x330
	TArray<TSoftObjectPtr<UKSPlayerMod>> ModsToGiveOnEvent; // 0x338
};

struct UKSMatchInvitationModal : UKSWidget {
	FTimerHandle InvitationExpireTimeout; // 0x528
};

struct UKSWeaponProgressButton : UKSWidget {
	FMulticastInlineDelegate OnWeaponPreview; // 0x520
	FMulticastInlineDelegate OnWeaponSelected; // 0x530
	FMulticastInlineDelegate OnWeaponUnhovered; // 0x540
	bool bOnCosmeticNavToDetails; // 0x550
	UKSWeaponAsset* WeaponAsset; // 0x558
};

struct UKSActivityRewardCondition_ActivityEventTrigger : UKSActivityRewardCondition {
	TArray<FGameplayTag> MatchingGameplayTags; // 0x30
};

struct UEditableGameplayTagQueryExpression_AnyExprMatch : UEditableGameplayTagQueryExpression {
	TArray<UEditableGameplayTagQueryExpression*> Expressions; // 0x28
};

struct UGeometryCacheCodecRaw : UGeometryCacheCodecBase {
	int32_t DummyProperty; // 0x38
};

struct UHRA_AnimNotify_PlayCameraAnim : UAnimNotify {
	UCameraShake* CameraShake; // 0x38
	float Scale; // 0x40
	ECameraAnimPlaySpace Space; // 0x44
	FRotator CustomPlaySpace; // 0x48
};

struct UDatasmithPointLightComponentTemplate : UDatasmithObjectTemplate {
	ELightUnits IntensityUnits; // 0x30
	float SourceRadius; // 0x34
	float SourceLength; // 0x38
	float AttenuationRadius; // 0x3c
};

struct UGuidedMenuCalloutData : UObject {
	FText HeaderText; // 0x28
	TArray<FGuidedCalloutCardData> CalloutCards; // 0x40
};

struct UWBP_ModuleHeader_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Bar; // 0x528
	UTextBlock* HeaderText; // 0x530
	FText Text; // 0x538
};

struct UWBP_ItemInfoContainer_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* Show; // 0x240
	UVerticalBox* ItemInfoContainer; // 0x248
	UTextBlock* ItemNameField; // 0x250
	UImage* ItemRaritySwatch; // 0x258
	UImage* LeftBGDimmer; // 0x260
	UImage* LeftBGImage; // 0x268
	UOverlay* NameWrapper; // 0x270
	URichTextBlock* RarityRichText; // 0x278
	UImage* RightBGDimmer; // 0x280
	UImage* RightBGImage; // 0x288
	UHorizontalBox* TypeWrapper; // 0x290
	ETextJustify Justification; // 0x298
};

struct UWBP_KSCosmeticItemDisplay_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ButtonSlot_Cosmetic_C* Button; // 0x528
	USizeBox* CornerIcon; // 0x530
	UWBP_AsyncIcon_C* CornerIconImage; // 0x538
	UBorder* CornerIconRarityBorder; // 0x540
	UWBP_DisabledIcon_C* DisabledIcon; // 0x548
	UImage* EmptyIcon; // 0x550
	UBorder* FreeLabel; // 0x558
	UTextBlock* FreeText; // 0x560
	UNamedSlot* HeaderSlot; // 0x568
	UHorizontalBox* IconWrapper; // 0x570
	UImage* Image_443; // 0x578
	UImage* Image_538; // 0x580
	UImage* Image_1022; // 0x588
	UScaleBox* ItemIconWrapper; // 0x590
	UWBP_AsyncIcon_C* MaterialUnderlay; // 0x598
	UBorder* NullWrapBorder; // 0x5a0
	UOverlay* OwnedCheck; // 0x5a8
	UBorder* PriceWrapper; // 0x5b0
	UTextBlock* QuantityText; // 0x5b8
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x5c0
	UWBP_StorePriceDisplay_C* WBP_StorePriceDisplay; // 0x5c8
	UImage* WrapTypeGradient; // 0x5d0
	UWidgetSwitcher* WrapTypeIconSwitcher; // 0x5d8
	USizeBox* WrapTypeIconWrapper; // 0x5e0
	FText WeaponSlotHeadingText; // 0x5e8
	FMulticastInlineDelegate OnHover; // 0x600
	FMulticastInlineDelegate OnUnhover; // 0x610
	FMulticastInlineDelegate OnCosmeticClicked; // 0x620
	EMercCosmeticSlot SlotType; // 0x630
	int32_t SlotIndex; // 0x634
	bool bShowCornerIcon; // 0x638
	EWeaponSlot WeaponSlotType; // 0x639
	bool bIsSelector; // 0x63a
	FCosmeticSlotDetails CosmeticDetails; // 0x640
	UPUMG_StoreItem* StoreItem; // 0x658
	UAkAudioEvent* ClickCosmeticItemDisplaySFX; // 0x660
	UAkAudioEvent* HoverCosmeticItemDisplaySFX; // 0x668
	bool bDisableLockIcon; // 0x670
	bool bShowPrice; // 0x671
	bool bUseHeaderSlot; // 0x672
	bool bAlwaysHideCornerIcon; // 0x673
};

struct UMultiLineEditableTextBox : UTextLayoutWidget {
	FText Text; // 0x130
	FText HintText; // 0x148
	FDelegate HintTextDelegate; // 0x160
	FEditableTextBoxStyle WidgetStyle; // 0x170
	FTextBlockStyle TextStyle; // 0x960
	bool bIsReadOnly; // 0xbc8
	bool AllowContextMenu; // 0xbc9
	FVirtualKeyboardOptions VirtualKeyboardOptions; // 0xbca
	EVirtualKeyboardDismissAction VirtualKeyboardDismissAction; // 0xbcb
	USlateWidgetStyleAsset* Style; // 0xbd0
	FSlateFontInfo Font; // 0xbd8
	FLinearColor ForegroundColor; // 0xc28
	FLinearColor BackgroundColor; // 0xc38
	FLinearColor ReadOnlyForegroundColor; // 0xc48
	FMulticastInlineDelegate OnTextChanged; // 0xc58
	FMulticastInlineDelegate OnTextCommitted; // 0xc68
};

struct UAnimBoneCompressionCodec_ACL : UAnimBoneCompressionCodec_ACLBase {
	UAnimBoneCompressionCodec* SafetyFallbackCodec; // 0x38
};

struct UPropertyBinding : UObject {
	TWeakObjectPtr<UObject> SourceObject; // 0x28
	FDynamicPropertyPath SourcePath; // 0x30
	FName DestinationProperty; // 0x58
};

struct UKSLootSiteMarkerWidget : UKSMapIconWidgetBase {
	AKSLootSiteBase* MarkedLootSite; // 0x318
	float MaxDisplayDistance; // 0x320
	bool bViewedPawnHasEndedFreeFall; // 0x324
	TArray<ELootSiteRarity> TagsToHide; // 0x328
};

struct UWBP_ProgressionCardSlot_Reputation_C : UKSWidget {
	UTextBlock* Category; // 0x520
	UWidgetSwitcher* IconSwitcher; // 0x528
	UImage* Image_508; // 0x530
	UImage* PerkIcon; // 0x538
	UTextBlock* PointsEarned; // 0x540
	UWBP_ProgressionTally_C* WBP_ProgressionTally_C_1; // 0x548
};

struct AKSGameShop : AInfo {
	FMulticastInlineDelegate OnLoadoutChanged; // 0x220
	FMulticastInlineDelegate OnAvailable; // 0x240
	FMulticastInlineDelegate OnUnavailable; // 0x250
	bool bAvailable; // 0x260
	bool bOpen; // 0x261
	FMulticastInlineDelegate OnOpened; // 0x268
	FMulticastInlineDelegate OnClosed; // 0x278
	TArray<UKSGameShopItemComponent*> PurchaseHistory; // 0x288
};

struct UMaterialExpressionNoise : UMaterialExpression {
	FExpressionInput Position; // 0x40
	FExpressionInput FilterWidth; // 0x54
	float Scale; // 0x68
	int32_t Quality; // 0x6c
	ENoiseFunction NoiseFunction; // 0x70
	char bTurbulence : 1; // 0x74
	int32_t Levels; // 0x78
	float OutputMin; // 0x7c
	float OutputMax; // 0x80
	float LevelScale; // 0x84
	char bTiling : 1; // 0x88
	uint32_t RepeatSize; // 0x8c
};

struct UParticleModuleCollisionGPU : UParticleModuleCollisionBase {
	FRawDistributionFloat Resilience; // 0x30
	FRawDistributionFloat ResilienceScaleOverLife; // 0x60
	float Friction; // 0x90
	float RandomSpread; // 0x94
	float RandomDistribution; // 0x98
	float RadiusScale; // 0x9c
	float RadiusBias; // 0xa0
	EParticleCollisionResponse Response; // 0xa4
	EParticleCollisionMode CollisionMode; // 0xa5
};

struct UParticleModuleSize : UParticleModuleSizeBase {
	FRawDistributionVector StartSize; // 0x30
};

struct UKSContextMenu : UKSWidget {
	FMulticastInlineDelegate OnContextOptionsUpdated; // 0x520
	FMulticastInlineDelegate OnReportPlayer; // 0x530
	EPlayerContextMenuContext MenuContext; // 0x540
	bool bAllowReportPlayer; // 0x541
	UKSPlayerInfo* CurrentPlayerInfo; // 0x548
	TArray<UKSContextMenuButton*> ContextMenuButtons; // 0x550
	EViewSide MenuViewSide; // 0x560
	int32_t CachedQueuedOrInMatch; // 0x564
	bool bCachedReportedPlayer; // 0x568
};

struct UARTexture : UTexture {
	EARTextureType TextureType; // 0xb8
	float Timestamp; // 0xbc
	FGuid ExternalTextureGuid; // 0xc0
	FVector2D Size; // 0xd0
};

struct UGizmoLocalFloatParameterSource : UGizmoBaseFloatParameterSource {
	float Value; // 0x48
	FGizmoFloatParameterChange LastChange; // 0x4c
};

struct UWBP_PlayerIdentity_Banner_C : UKSWidget {
	UWBP_AsyncIcon_C* BannerIcon; // 0x520
	UWBP_AsyncIcon_C* BorderIcon; // 0x528
};

struct UKSPlayerMod_MeleeAttackSpeed : UKSPlayerMod {
	float MeleeAttackSpeedMultiplier; // 0x330
};

struct UApplicationLifecycleComponent : UActorComponent {
	FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xb0
	FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xc0
	FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xd0
	FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xe0
	FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xf0
	FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x100
	FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x110
	FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x120
	FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x130
};

struct UKSModInst_HoldToTarget : UKSModInst_Activated {
	FKSTargeterConfig TargeterConfig; // 0x480
	FMulticastInlineDelegate OnTargetAcquired; // 0x490
	AActor* CurrentTarget; // 0x4a0
};

struct UWBP_VersionNumber_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* VersionDisplay; // 0x528
};

struct UWBP_RegionSelect_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnShow; // 0x528
	UImage* Decro; // 0x530
	UScrollBox* RegionScrollBox; // 0x538
	UTextBlock* Title; // 0x540
	UTextBlock* Title_3; // 0x548
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x550
	FMulticastInlineDelegate OnRegionSelected; // 0x558
	FMulticastInlineDelegate OnRegionSelectEntriesCreated; // 0x568
	TArray<UWBP_RegionSelect_Entry_C*> Region Select Array; // 0x578
	bool bForceSelection; // 0x588
	UAkAudioEvent* ShowSFX; // 0x590
	int32_t NewVar_1; // 0x598
};

struct UKSBTTask_MoveToBlackboard : UBTTask_MoveTo {
	float SpeedMultiplier; // 0xb0
	bool bSprint; // 0xb4
	UKSBTAction* MoveAction; // 0xb8
	UKSBTAction* SprintAction; // 0xc0
	FBlackboardKeySelector AcceptableRadiusOverrideKey; // 0xc8
};

struct UKSActivity : UPlatformInventoryItem {
	FText ItemDescriptionSingular; // 0x1b8
	int64_t ProgressLootId; // 0x1d0
	int64_t RemoveProgressLootId; // 0x1d8
	int64_t SetProgressLootId; // 0x1e0
	int64_t ResetProgressLootId; // 0x1e8
	int64_t SpecialLootId; // 0x1f0
	int64_t RewardVendorId; // 0x1f8
	int64_t RewardXpTableId; // 0x200
	int64_t SortOrder; // 0x208
	TArray<int64_t> EntitlementItemIds; // 0x210
	TSoftClassPtr<UObject> TrackerClass; // 0x220
	int32_t ProgressInterval; // 0x248
	int32_t MaxProgressPerMatch; // 0x24c
	bool bAllowMultipleProgressFromTriggerEvent; // 0x250
	bool bResetAccumulationAfterTriggerEvent; // 0x251
	bool bResetAccumulationAfterProgressIncrease; // 0x252
	bool bIsClientAuthority; // 0x253
	bool bCreateTrackerIfFinished; // 0x254
	bool bCreateInstanceIfInvalid; // 0x255
	bool bAlwaysPackageActivityIfCreated; // 0x256
	bool bCanPackageActivityWithoutTracker; // 0x257
	bool bAllowLastTierToRepeat; // 0x258
	EKSActivityProgressDisplayType ProgressDisplayPreference; // 0x259
	EKSActivityClientNotifyFrequency ClientNotifyFrequency; // 0x25a
	TArray<FActivityTierStructure> ActivityTierData; // 0x260
	bool bShowInPostMatchLobby; // 0x270
	bool bDisableAfterJobChange; // 0x271
	bool bIsOwnableItem; // 0x272
	bool bShouldDisplay; // 0x273
	bool bDuplicateProgressToSpecialLootId; // 0x274
	TArray<UKSActivityComponent*> ActivityComponents; // 0x278
	TArray<UKSActivityRequirement*> ActivityRequirements; // 0x288
	TArray<UKSActivityRewardCondition*> ActivityRewardConditions; // 0x298
	TArray<TSoftClassPtr<UObject>> ActivityBehaviors; // 0x2a8
	TArray<FGameplayTag> ActivityTypes; // 0x2b8
	bool bDevCookOnly; // 0x2c8
};

struct UKSNavArea : UNavArea {
	EKSNavAreaType NavAreaType; // 0x48
};

struct UMaterialExpressionTime : UMaterialExpression {
	char bIgnorePause : 1; // 0x40
	char bOverride_Period : 1; // 0x40
	float Period; // 0x44
};

struct UKSBotDefinition : UDataAsset {
	FString FriendlySearchName; // 0x30
	FBotSpawnTableRow Info; // 0x40
};

struct AKSPowerUp : AActor {
	FMulticastInlineDelegate OnPowerUpPickedUp; // 0x220
	UBoxComponent* CollisionBox; // 0x230
	USphereComponent* OverlapSphere; // 0x238
	UKSProximityComponent* ProximityComponent; // 0x240
	int32_t OwningTeam; // 0x248
	bool bDestroyOnProximity; // 0x24c
	float DestroyDelay; // 0x250
};

struct UEnvQueryOption : UObject {
	UEnvQueryGenerator* Generator; // 0x28
	TArray<UEnvQueryTest*> Tests; // 0x30
};

struct ULeaderboardFlushCallbackProxy : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct UKSSpawnRule_PlayerProximity : UKSSpawnRule_Proximity {
	bool bConsiderFriendlies; // 0x48
	bool bConsiderEnemies; // 0x49
	bool bUseAverageScore; // 0x4a
};

struct ULiveLinkDrivenComponent : UActorComponent {
	FLiveLinkSubjectName SubjectName; // 0xb0
	FName ActorTransformBone; // 0xb8
	bool bModifyActorTransform; // 0xc0
	bool bSetRelativeLocation; // 0xc1
};

struct UGizmoConstantAxisSource : UObject {
	FVector Origin; // 0x30
	FVector Direction; // 0x3c
};

struct AKSJobSelectionAuthority : AInfo {
	bool bAllowUnownedJobs; // 0x230
	TSet<UKSJobItem*> AllowUnownedSpecificJobs; // 0x238
	UKSJobSelectionRules* SelectionRules; // 0x288
	TArray<FJobSelectionChoice> Choices; // 0x290
	FJobSelectionTaskList CompletedJobSelectionTasks; // 0x2a0
	FJobSelectionTaskList ActiveJobSelectionTasks; // 0x3d0
	FJobSelectionTaskList PendingJobSelectionTasks; // 0x500
	FJobSelectionTaskList DelayedJobSelectionTasks; // 0x630
	TSet<FKSPersistentPlayerId> ParticipatingPlayers; // 0x760
	TSet<FKSPersistentPlayerId> RemainingPlayers; // 0x7b0
	TMap<FKSPersistentPlayerId, AKSJobSelector*> ActiveJobSelectors; // 0x800
	TSet<FKSPersistentPlayerId> KnownDisconnectPlayers; // 0x850
	TArray<FKSPersistentPlayerId> AvailableProxies; // 0x8a0
	TSet<FKSPersistentPlayerId> AIPlayers; // 0x8b0
	bool bHasStarted; // 0x900
	bool bHasCompletedInitialSelection; // 0x901
	int32_t TimesStarted; // 0x904
	FPGame_ReplicatedTimerManager TimerManager; // 0x908
	AKSGameMode* GameModeOwner; // 0xa30
};

struct AKSVehicleBase : AKSCharacterFoundation {
	UPGame_PositionHistoryComponent* PositionHistoryComponent; // 0xcf0
	FMulticastInlineDelegate OnStartVehicleDestruction; // 0xcf8
	FMulticastInlineDelegate OnEndVehicleDestruction; // 0xd08
	USpringArmComponent* SpringArm; // 0xd18
	UCameraComponent* MainCamera; // 0xd20
	float CameraBlendTime; // 0xd28
	float CameraXTurnRate; // 0xd2c
	float CameraYTurnRate; // 0xd30
	float CameraMinHorizontalAngle; // 0xd34
	float CameraMaxHorizontalAngle; // 0xd38
	float CameraMinVerticalAngle; // 0xd3c
	float CameraMaxVerticalAngle; // 0xd40
	FKSSpecialEffect DefaultPPE; // 0xd58
	bool bDisplayDefaultPPE; // 0xda8
	bool bDisplayFadeInOnStart; // 0xda9
	float FadeInDuration; // 0xdac
	USkinnableStaticMeshComponent* DestroyedMesh; // 0xdb0
	float MaxHealth; // 0xdb8
	bool bShouldDisplayFriendlyOutline; // 0xdbc
	FKSVehicleDeathInfo DeathInfo; // 0xdc0
	UKSDamageTypeBase* InstantDeathDamageType; // 0xde0
	ACharacter* LastCharacterToDamageMe; // 0xde8
	bool bIsSelfDestructing; // 0xdf1
	UDamageType* KilledDamageTypeClass; // 0xdf8
	FMulticastInlineDelegate OnVehicleDeathStateChangedDel; // 0xe00
	FMulticastInlineDelegate OnAbilityOnePressed; // 0xe28
	FMulticastInlineDelegate OnAbilityOneReleased; // 0xe38
	FMulticastInlineDelegate OnAbilityTwoPressed; // 0xe48
	FMulticastInlineDelegate OnAbilityTwoReleased; // 0xe58
	FMulticastInlineDelegate OnAbilityThreePressed; // 0xe68
	FMulticastInlineDelegate OnAbilityThreeReleased; // 0xe78
	FText VehicleDisplayName; // 0xe88
	bool bReportsDamage; // 0xea0
	FSoftObjectPath HudIconPath; // 0xea8
	bool bHidesWeaponReticule; // 0xec0
	FMulticastInlineDelegate OnVehicleHoverChange; // 0xec8
	UMultiSkinObject* SkinObject; // 0xed8
	TArray<FName> ApparelObjectsToListenTo; // 0xee0
	TArray<FName> SkeletalMeshKeywordList; // 0xef0
	FName DestroyedMeshKeyword; // 0xf00
};

struct UWBP_SettingsPreview_Reticle_C : UKSSettingsPreview {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UImage* Image_42; // 0x540
	UImage* Image_305; // 0x548
	URifleReticle_C* RifleReticle; // 0x550
	UShotgunReticle_C* ShotgunReticle; // 0x558
	UWidgetSwitcher* WidgetSwitcher_1; // 0x560
	UKSSettingsDataFactory* SettingsDataFactory; // 0x568
};

struct USafeZoneSlot : UPanelSlot {
	bool bIsTitleSafe; // 0x38
	FMargin SafeAreaScale; // 0x3c
	EHorizontalAlignment HAlign; // 0x4c
	EVerticalAlignment VAlign; // 0x4d
	FMargin Padding; // 0x50
};

struct ALobby_Core_RogueScreen_C : ALevelScriptActor {
	FPointerToUberGraphFrame UberGraphFrame; // 0x228
	bool Enable Pose Rogue Time Dilation; // 0x230
	ARogueScreenPreviewActor_WithPose_C* PosedRogueActor_ExecuteUbergraph_Lobby_Core_RogueScreen_RefProperty; // 0x238
	AKSLobbyCameraActor* PosedRogueCamera_ExecuteUbergraph_Lobby_Core_RogueScreen_RefProperty; // 0x240
};

struct UAsyncActionHandleSaveGame : UBlueprintAsyncActionBase {
	FMulticastInlineDelegate Completed; // 0x30
	USaveGame* SaveGameObject; // 0x60
};

struct USynthComponent : USceneComponent {
	char bAutoDestroy : 1; // 0x208
	char bStopWhenOwnerDestroyed : 1; // 0x208
	char bAllowSpatialization : 1; // 0x208
	char bOverrideAttenuation : 1; // 0x208
	char bOutputToBusOnly : 1; // 0x20c
	USoundAttenuation* AttenuationSettings; // 0x210
	FSoundAttenuationSettings AttenuationOverrides; // 0x218
	USoundConcurrency* ConcurrencySettings; // 0x5b8
	TSet<USoundConcurrency*> ConcurrencySet; // 0x5c0
	USoundClass* SoundClass; // 0x610
	USoundEffectSourcePresetChain* SourceEffectChain; // 0x618
	USoundSubmixBase* SoundSubmix; // 0x620
	TArray<FSoundSubmixSendInfo> SoundSubmixSends; // 0x628
	TArray<FSoundSourceBusSendInfo> BusSends; // 0x638
	FSoundModulation Modulation; // 0x648
	TArray<FSoundSourceBusSendInfo> PreEffectBusSends; // 0x658
	char bIsUISound : 1; // 0x668
	char bIsPreviewSound : 1; // 0x668
	int32_t EnvelopeFollowerAttackTime; // 0x66c
	int32_t EnvelopeFollowerReleaseTime; // 0x670
	FMulticastInlineDelegate OnAudioEnvelopeValue; // 0x678
	USynthSound* Synth; // 0x6a8
	UAudioComponent* AudioComponent; // 0x6b0
};

struct UMovieSceneMarginSection : UMovieSceneSection {
	FMovieSceneFloatChannel TopCurve; // 0xe0
	FMovieSceneFloatChannel LeftCurve; // 0x180
	FMovieSceneFloatChannel RightCurve; // 0x220
	FMovieSceneFloatChannel BottomCurve; // 0x2c0
};

struct UWBP_ChallengeView_LoginRewards_C : UKSLoginRewardsModal {
	FPointerToUberGraphFrame UberGraphFrame; // 0x548
	UImage* Image_191; // 0x550
	UImage* Image_362; // 0x558
	UWBP_ItemInfoContainer_Centered_C* ItemInfoContainer_2; // 0x560
	UTextBlock* TimeRemaining; // 0x568
	UWidgetSwitcher* TimerSwitcher; // 0x570
	UWBP_LoginRewardsGrid_C* WBP_LoginRewardsGrid; // 0x578
};

struct UOutOfBoundsComponent_C : UKSOutOfBoundsComponent {
	TArray<FAkExternalSourceInfo> Temp_struct_Variable; // 0x170
	FDelegate Temp_delegate_Variable; // 0x180
	FDelegate Temp_delegate_Variable_2; // 0x190
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_2; // 0x1a0
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_3; // 0x1b0
	FDelegate Temp_delegate_Variable_3; // 0x1c0
};

struct UDistributionFloatUniformCurve : UDistributionFloat {
	FInterpCurveVector2D ConstantCurve; // 0x38
};

struct UBTTask_FinishWithResult : UBTTaskNode {
	EBTNodeResult Result; // 0x70
};

struct UChildActorComponent : USceneComponent {
	AActor* ChildActorClass; // 0x208
	AActor* ChildActor; // 0x210
	AActor* ChildActorTemplate; // 0x218
};

struct UParticleModuleSize_Seeded : UParticleModuleSize {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x78
};

struct UInterpTrackSound : UInterpTrackVectorBase {
	TArray<FSoundTrackKey> Sounds; // 0x90
	char bPlayOnReverse : 1; // 0xa0
	char bContinueSoundOnMatineeEnd : 1; // 0xa0
	char bSuppressSubtitles : 1; // 0xa0
	char bTreatAsDialogue : 1; // 0xa0
	char bAttach : 1; // 0xa0
};

struct UKSBTD_CompareGrenadeFuseTimeLeft : UBTDecorator {
	float Time; // 0x68
	EArithmeticKeyOperation ArithmeticOperation; // 0x6c
};

struct UCameraModifier_CameraShake : UCameraModifier {
	TArray<FActiveCameraShakeInfo> ActiveShakes; // 0x48
	TMap<UCameraShake*, FPooledCameraShakes> ExpiredPooledShakesMap; // 0x58
	float SplitScreenShakeScale; // 0xa8
};

struct AKSLobbyCameraActor : ACineCameraActor {
	FName CameraTag; // 0x800
};

struct AKSJobSelectPreviewActor : AInfo {
	TWeakObjectPtr<UKSPersistentPlayerData> OwningPersistantPlayerData; // 0x220
	AKSLobbyCharacter* LobbyCharacterClass; // 0x228
	AKSLobbyCharacter* ChildLobbyCharacter; // 0x230
	float ModelViewerDelay; // 0x238
	EJobSelectionState JobSelectionState; // 0x23c
	TArray<FName> SkinPreloadBundles; // 0x268
	int32_t PositionIndex; // 0x278
	bool bOffsetCharacterByCapsuleHeight; // 0x27c
	bool bKeepActiveJobVisibleWhileLoading; // 0x27d
	USceneComponent* BaseComponent; // 0x280
	FTimerHandle JobModelViewerTimer; // 0x288
	UKSJobItem* ActiveJobItem; // 0x290
	UKSSkinBundle* ActiveSkinBundle; // 0x298
	TMap<UKSItem*, UKSItem*> ActiveFullSkinMap; // 0x2a0
	TSoftObjectPtr<UKSJobItem> QueuedJob; // 0x2f0
	EKSJobSelectPreviewLoadState CachedState; // 0x318
	bool bHideChildCharacter; // 0x319
	FMulticastInlineDelegate OnJobPreviewStateChangedDel; // 0x338
	FMulticastInlineDelegate OnPersistentPlayerDataSetDel; // 0x348
	UKSJobItem* JobFromLoadout; // 0x370
	TMap<UKSItem*, UKSItem*> PendingFullSkinMap; // 0x378
	TMap<UKSItem*, FPreviewActorPropSkinInfo> PropsAndSkins; // 0x3c8
	bool bHasTriggeredVO; // 0x420
};

struct UKSPlayerMod_PickupRange : UKSPlayerMod {
	float PickupRadius; // 0x330
	float PickupCylinderRadius; // 0x334
	bool CompleteRadiusOverride; // 0x338
};

struct UKSWeaponAttachmentSkinDetails : UPrimaryDataAsset {
	TSoftObjectPtr<UKSWeaponAsset> Weapon; // 0x30
	TSoftClassPtr<UObject> AttachmentCosmetic; // 0x58
	TArray<FDataTableInfo> AssetOverrideTables; // 0x80
};

struct UNavRelevantComponent : UActorComponent {
	char bAttachToOwnersRoot : 1; // 0xd4
	UObject* CachedNavParent; // 0xd8
};

struct UNavigationSystemV1 : UNavigationSystemBase {
	ANavigationData* MainNavData; // 0x28
	ANavigationData* AbstractNavData; // 0x30
	FName DefaultAgentName; // 0x38
	TSoftClassPtr<UObject> CrowdManagerClass; // 0x40
	char bAutoCreateNavigationData : 1; // 0x68
	char bSpawnNavDataInNavBoundsLevel : 1; // 0x68
	char bAllowClientSideNavigation : 1; // 0x68
	char bShouldDiscardSubLevelNavData : 1; // 0x68
	char bTickWhilePaused : 1; // 0x68
	char bSupportRebuilding : 1; // 0x68
	char bInitialBuildingLocked : 1; // 0x68
	char bSkipAgentHeightCheckWhenPickingNavData : 1; // 0x69
	ENavDataGatheringModeConfig DataGatheringMode; // 0x6c
	char bGenerateNavigationOnlyAroundNavigationInvokers : 1; // 0x70
	float ActiveTilesUpdateInterval; // 0x74
	TArray<FNavDataConfig> SupportedAgents; // 0x78
	FNavAgentSelector SupportedAgentsMask; // 0x88
	TArray<ANavigationData*> NavDataSet; // 0x90
	TArray<ANavigationData*> NavDataRegistrationQueue; // 0xa0
	FMulticastInlineDelegate OnNavDataRegisteredEvent; // 0xc0
	FMulticastInlineDelegate OnNavigationGenerationFinishedDelegate; // 0xd0
	FNavigationSystemRunMode OperationMode; // 0x1bc
	float DirtyAreasUpdateFreq; // 0x514
};

struct AGeometryCollectionDebugDrawActor : AActor {
	FGeometryCollectionDebugDrawWarningMessage WarningMessage; // 0x220
	FGeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody; // 0x228
	bool bDebugDrawWholeCollection; // 0x240
	bool bDebugDrawHierarchy; // 0x241
	bool bDebugDrawClustering; // 0x242
	EGeometryCollectionDebugDrawActorHideGeometry HideGeometry; // 0x243
	bool bShowRigidBodyId; // 0x244
	bool bShowRigidBodyCollision; // 0x245
	bool bCollisionAtOrigin; // 0x246
	bool bShowRigidBodyTransform; // 0x247
	bool bShowRigidBodyInertia; // 0x248
	bool bShowRigidBodyVelocity; // 0x249
	bool bShowRigidBodyForce; // 0x24a
	bool bShowRigidBodyInfos; // 0x24b
	bool bShowTransformIndex; // 0x24c
	bool bShowTransform; // 0x24d
	bool bShowParent; // 0x24e
	bool bShowLevel; // 0x24f
	bool bShowConnectivityEdges; // 0x250
	bool bShowGeometryIndex; // 0x251
	bool bShowGeometryTransform; // 0x252
	bool bShowBoundingBox; // 0x253
	bool bShowFaces; // 0x254
	bool bShowFaceIndices; // 0x255
	bool bShowFaceNormals; // 0x256
	bool bShowSingleFace; // 0x257
	int32_t SingleFaceIndex; // 0x258
	bool bShowVertices; // 0x25c
	bool bShowVertexIndices; // 0x25d
	bool bShowVertexNormals; // 0x25e
	bool bUseActiveVisualization; // 0x25f
	float PointThickness; // 0x260
	float LineThickness; // 0x264
	bool bTextShadow; // 0x268
	float TextScale; // 0x26c
	float NormalScale; // 0x270
	float AxisScale; // 0x274
	float ArrowScale; // 0x278
	FColor RigidBodyIdColor; // 0x27c
	float RigidBodyTransformScale; // 0x280
	FColor RigidBodyCollisionColor; // 0x284
	FColor RigidBodyInertiaColor; // 0x288
	FColor RigidBodyVelocityColor; // 0x28c
	FColor RigidBodyForceColor; // 0x290
	FColor RigidBodyInfoColor; // 0x294
	FColor TransformIndexColor; // 0x298
	float TransformScale; // 0x29c
	FColor LevelColor; // 0x2a0
	FColor ParentColor; // 0x2a4
	float ConnectivityEdgeThickness; // 0x2a8
	FColor GeometryIndexColor; // 0x2ac
	float GeometryTransformScale; // 0x2b0
	FColor BoundingBoxColor; // 0x2b4
	FColor FaceColor; // 0x2b8
	FColor FaceIndexColor; // 0x2bc
	FColor FaceNormalColor; // 0x2c0
	FColor SingleFaceColor; // 0x2c4
	FColor VertexColor; // 0x2c8
	FColor VertexIndexColor; // 0x2cc
	FColor VertexNormalColor; // 0x2d0
	UBillboardComponent* SpriteComponent; // 0x2d8
};

struct UPUMG_PortalOffer : UObject {
	FString SKU; // 0x28
	float PreSaleCost; // 0x38
	FText DisplayPreSaleCost; // 0x40
	float cost; // 0x58
	FText DisplayCost; // 0x60
	FText CurrencyCode; // 0x78
	FText Name; // 0x90
	FText Desc; // 0xa8
	FText ShortDesc; // 0xc0
	FText TaxMessage; // 0xd8
};

struct UCharacterEmotionComponent_C : UKSEmotionComponent {
	float CachedPlayerHealth; // 0x238
	float PainedDuration; // 0x23c
	int32_t FocusedId; // 0x240
	int32_t DeadId; // 0x244
	int32_t WoundedId; // 0x248
	FDelegate K2Node_CreateDelegate_OutputDelegate; // 0x24c
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x260
	bool K2Node_DynamicCast_bSuccess; // 0x268
	FDelegate K2Node_CreateDelegate_OutputDelegate_2; // 0x26c
	FDelegate K2Node_CreateDelegate_OutputDelegate_3; // 0x27c
	AKSCharacterBase* K2Node_DynamicCast_AsKSCharacter_Base; // 0x290
	bool K2Node_DynamicCast_bSuccess_2; // 0x298
	FDelegate K2Node_CreateDelegate_OutputDelegate_4; // 0x29c
};

struct UKSModInst_GiveItemOnActivation : UKSModInst_Activated {
	bool bGiveItemOnNewCharacter; // 0x478
	FDelegate AsyncItemGiveDelegate; // 0x47c
	UObject* GivenItem; // 0x490
};

struct UKSDamageTypeBase : UDamageType {
	EDamageCategory DamageCategory; // 0x40
	UParticleSystem* HitPawnEffect; // 0x48
	UAkAudioEvent* HitBodyAudioEvent; // 0x50
	UAkAudioEvent* HitHeadAudioEvent; // 0x58
	UAkAudioEvent* HitResistedAudioEvent; // 0x60
	UAkAudioEvent* HitReducedAudioEvent; // 0x68
	UAkAudioEvent* HitByAudioEvent; // 0x70
	UAkAudioEvent* HitByResistedAudioEvent; // 0x78
	UAkAudioEvent* HitByReducedAudioEvent; // 0x80
	FKSSpecialEffect HitSpecialEffect; // 0x88
	FName EffectAttachPointName; // 0xd8
	bool bPreProcessResistable; // 0xe0
	bool bRequiresDamageForDebuffs; // 0xe1
	bool bUIDisplayable; // 0xe2
	bool bClientPredictable; // 0xe3
	bool bHideDamageDirection; // 0xe4
	bool bCountTowardsTrackedFriendlyFireDamage; // 0xe5
	bool bDoFriendlyDamageWithReverseFriendlyFire; // 0xe6
	TArray<UKSPlayerMod*> DebuffsAppliedOnDamage; // 0xe8
	float FlinchDuration; // 0xf8
	float FlinchRecoveryRate; // 0xfc
	float FlinchMinHeightBody; // 0x100
	float FlinchMaxHeightBody; // 0x104
	float FlinchMinHeightHead; // 0x108
	float FlinchMaxHeightHead; // 0x10c
	FGameplayTagContainer DamageTags; // 0x110
	float ImpulseMagnitudePerDamage; // 0x130
};

struct UWBP_PartyModule_C : UKSPartyManagerWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x530
	UWBP_LeaveParty_C* LeaveParty; // 0x538
	UWBP_PartyModuleCardSlot_C* SlotA; // 0x540
	UWBP_PartyModuleCardSlot_C* SlotB; // 0x548
	UWBP_PartyModuleCardSlot_C* SlotC; // 0x550
	UWBP_PartyModuleCardSlot_C* SlotD; // 0x558
	UWBP_PartyModuleCardSlot_C* SlotE; // 0x560
	UWBP_PartyModuleCardSlot_C* SlotF; // 0x568
	UWBP_Header3_C* WBP_Header3_C; // 0x570
	UWBP_ModuleHeader_C* WBP_ModuleHeader; // 0x578
	UWBP_Social_Snapshot_C* WBP_Social_Snapshot; // 0x580
	UWBP_VoiceActivityContainer_C* WBP_VoiceActivityContainer; // 0x588
	FMulticastInlineDelegate OnPlayerCardSelected; // 0x590
	FMulticastInlineDelegate OnPlayerCardBackButton; // 0x5a0
	FMulticastInlineDelegate OnPartyLeaveVisibilityChange; // 0x5b0
};

struct UWBP_ProgressBar_C : UUserWidget {
	UHorizontalBox* BaseBar; // 0x238
	UHorizontalBox* ProgressBarFill; // 0x240
};

struct UMaterialExpressionTextureProperty : UMaterialExpression {
	FExpressionInput TextureObject; // 0x40
	EMaterialExposedTextureProperty Property; // 0x54
};

struct UPopupButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* background; // 0x530
	UButton* Button; // 0x538
	USizeBox* ButtonCallout; // 0x540
	UImage* ButtonCalloutImage; // 0x548
	UTextBlock* DisplayTextBlock; // 0x550
	UImage* HoverImage; // 0x558
	FText ButtonText; // 0x560
	FLinearColor ButtonColor; // 0x578
	int32_t Index; // 0x588
	FMulticastInlineDelegate OnClicked; // 0x590
	FMulticastInlineDelegate OnNavigateBackAction; // 0x5a0
	bool CapturesNavBack; // 0x5b0
	bool DisableClickSound; // 0x5b1
	UAkAudioEvent* NavBackPopupBtnSFX; // 0x5b8
	UAkAudioEvent* ClickPopupBtnSFX; // 0x5c0
	UAkAudioEvent* HoverPopupBtnSFX; // 0x5c8
};

struct UWBP_UnlockMilestonesButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ArrowLoop; // 0x528
	UWidgetAnimation* OnClick; // 0x530
	UWidgetAnimation* Highlight; // 0x538
	UImage* Arrow; // 0x540
	UTextBlock* ButtonText; // 0x548
	UButton* HitTarget; // 0x550
	UWBP_KeyCallout_C* KeyPrompt; // 0x558
	UCanvasPanel* KeyPromptContainer; // 0x560
	UImage* MilestonesIcon; // 0x568
	USizeBox* SizeWrapper; // 0x570
	UImage* TopBevel; // 0x578
	UImage* TopBevel_ClickFill; // 0x580
	UImage* TopBevel_Hover; // 0x588
	UImage* TopBevel_Stroke; // 0x590
	FMulticastInlineDelegate OnClicked; // 0x598
	FMulticastInlineDelegate OnHovered; // 0x5a8
	FMulticastInlineDelegate OnUnhovered; // 0x5b8
	UAkAudioEvent* ClickMedBtnSFX; // 0x5c8
	FText DefaultButtonText; // 0x5d0
	float DefaultWidth; // 0x5e8
	bool ShowPromptOnFocus; // 0x5ec
	FKey PromptKey; // 0x5f0
	UAkAudioEvent* HoverMedBtnSFX; // 0x608
	bool IsConfirm; // 0x610
	bool IsCancel; // 0x611
};

struct AEmoteSoundManager_C : AKSEmoteMusicManager {
	USceneComponent* DefaultSceneRoot; // 0x260
};

struct UEnvQueryTest_Dot : UEnvQueryTest {
	FEnvDirection LineA; // 0x1f8
	FEnvDirection LineB; // 0x218
	EEnvTestDot TestMode; // 0x238
	bool bAbsoluteValue; // 0x239
};

struct UNiagaraPreviewAxis_InterpParamBase : UNiagaraPreviewAxis {
	FName Param; // 0x28
	int32_t Count; // 0x30
};

struct UMaterialExpressionPower : UMaterialExpression {
	FExpressionInput Base; // 0x40
	FExpressionInput Exponent; // 0x54
	float ConstExponent; // 0x68
};

struct UWBP_subscreen_nav_tab_C : UKSNavTabWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x560
	UWidgetAnimation* BattlepassGradientPulse; // 0x568
	UWidgetAnimation* Unhover; // 0x570
	UWidgetAnimation* Selected; // 0x578
	UWidgetAnimation* Hovered; // 0x580
	UImage* BackFill; // 0x588
	UImage* BackFill_Free; // 0x590
	UImage* BackFill_Premium; // 0x598
	UImage* BottomEdge; // 0x5a0
	UImage* BottomEdge_Free; // 0x5a8
	UImage* BottomEdge_Premium; // 0x5b0
	UOverlay* Container; // 0x5b8
	UImage* LockIcon; // 0x5c0
	UImage* LockIcon_2; // 0x5c8
	UImage* LockIcon_3; // 0x5d0
	UImage* SelectedGradient; // 0x5d8
	UImage* SelectedGradient_Free; // 0x5e0
	UImage* SelectedGradient_Premium; // 0x5e8
	UButton* TabButton; // 0x5f0
	UWidgetSwitcher* TabColorSwitcher; // 0x5f8
	UTextBlock* text_TabFree; // 0x600
	UTextBlock* text_TabPremium; // 0x608
	UTextBlock* text_TabStandard; // 0x610
	TSoftClassPtr<UObject> CalloutClass; // 0x618
	UWidget* CalloutWidget; // 0x640
	EHorizontalAlignment CalloutWidget_HorizontalAlignment; // 0x648
	EVerticalAlignment CalloutWidget_VerticalAlignment; // 0x649
	FMargin CalloutWidget_Padding; // 0x64c
	UAkAudioEvent* HoverSubscreenNavTabSFX; // 0x660
	UAkAudioEvent* ClickSubscreenNavTabSFX; // 0x668
	bool UsesBattlePassColoring; // 0x670
};

struct UKSEditableTextBox : UEditableTextBox {
	FDelegate OnKeyDown; // 0xa30
};

struct UWBP_InputCallout_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UTextBlock* ComboText; // 0x4c8
	UImage* MeterBkg; // 0x4d0
	USizeBox* PrimaryBox; // 0x4d8
	UWBP_KeyCallout_C* PrimaryImage; // 0x4e0
	UTextBlock* PrimaryPrompt; // 0x4e8
	UWidgetSwitcher* PrimarySwitcher; // 0x4f0
	UImage* ProgressCircle; // 0x4f8
	USizeBox* SecondaryBox; // 0x500
	UWBP_KeyCallout_C* SecondaryImage; // 0x508
	UTextBlock* SecondaryPrompt; // 0x510
	UWidgetSwitcher* SecondarySwitcher; // 0x518
	TArray<FName> ActionNames; // 0x520
	FName KBM_Name; // 0x530
	FName GP_Name; // 0x538
	FName M_Name; // 0x540
	bool IsGamepadDoubleTap; // 0x548
	FKey SecondaryKey; // 0x550
	FKey PrimaryKey; // 0x568
	bool bFallbackToDefaultInputs; // 0x580
};

struct ABP_GuavaSpider_C : AKSVehicle_RCCrawler {
	FPointerToUberGraphFrame UberGraphFrame; // 0xf10
	UOutOfBoundsComponent_C* OutOfBoundsComponent; // 0xf18
	UParticleSystemComponent* FX_Debris_Sparks; // 0xf20
	UKSAimAssistAnchorComponent* KSAimAssistAnchor; // 0xf28
	UAUD_ExplosionWithEcho_Grenade_C* AUD_ExplosionWithEcho_Grenade; // 0xf30
	UParticleSystemComponent* FX_Sticky_Grenade_Blink; // 0xf38
	bool bWantsToBoost; // 0xf40
	float ElapsedBoostTick; // 0xf44
	float BoostTickThreshold; // 0xf48
	FTimerHandle SpawnTimerHandle; // 0xf50
	bool AllowBoostVo; // 0xf58
	FTimerHandle BoostTimerHandle; // 0xf60
	bool SpawnVOPlaying; // 0xf68
	UKSWeaponAsset_Grenade* ExplosiveAsset; // 0xf70
	bool bHasDetonated; // 0xf78
	bool bDetonateOnKilled; // 0xf79
	bool bDetonateOnDurationEnd; // 0xf7a
	bool bDetonateOnEMP; // 0xf7b
	bool bCanJump; // 0xf7c
	float JumpCooldownTime; // 0xf80
	FTimerHandle JumpCooldownTimerHandle; // 0xf88
	float GetTurnValue; // 0xf90
	bool TurnLeft; // 0xf94
	bool TurnRight; // 0xf95
	FDamageEffect CurrentDamageEffect; // 0xf98
	TArray<FDamageEffect> QueuedDamageEffects; // 0xfe8
	UMaterialInterface* ExplosionPreviewDecalMaterial; // 0xff8
	UDecalComponent* ExplosionPreviewDecal; // 0x1000
	bool bDisplayExplosionPreviewDecal; // 0x1008
	int32_t Spark Loop; // 0x100c
};

struct UAkSettings : UObject {
	char MaxSimultaneousReverbVolumes; // 0x28
	FFilePath WwiseProjectPath; // 0x30
	FDirectoryPath WwiseSoundDataFolder; // 0x40
	bool bAutoConnectToWAAPI; // 0x50
	ECollisionChannel DefaultOcclusionCollisionChannel; // 0x51
	TMap<TSoftObjectPtr<UPhysicalMaterial>, FAkGeometrySurfacePropertiesToMap> AkGeometryMap; // 0x58
	bool SplitSwitchContainerMedia; // 0xa8
	bool UseEventBasedPackaging; // 0xa9
	bool EnableAutomaticAssetSynchronization; // 0xaa
	FString CommandletCommitMessage; // 0xb0
	TMap<FString, FString> UnrealCultureToWwiseCulture; // 0xc0
	bool AskedToUseNewAssetManagement; // 0x110
	bool bEnableMultiCoreRendering; // 0x111
	bool MigratedEnableMultiCoreRendering; // 0x112
	FDirectoryPath WwiseWindowsInstallationPath; // 0x118
	FFilePath WwiseMacInstallationPath; // 0x128
};

struct USoundNodeAttenuation : USoundNode {
	USoundAttenuation* AttenuationSettings; // 0x48
	FSoundAttenuationSettings AttenuationOverrides; // 0x50
	char bOverrideAttenuation : 1; // 0x3f0
};

struct UEnvironmentListenerComponent : UActorComponent {
	FName CurrentEnvironmentTag; // 0xb0
	FName StartingEnvironment; // 0xb8
	TWeakObjectPtr<UEnvironmentTrackerComponent> LastTrackerComponent; // 0xc0
};

struct AMatineeActorCameraAnim : AMatineeActor {
	UCameraAnim* CameraAnim; // 0x2c8
};

struct UKSActivityRequirement_Ranked : UKSActivityRequirement {
	bool RequireEnabled; // 0x30
};

struct UKSBTD_WillActiveGrenadeHitTarget : UBTDecorator_BlackboardBase {
	float OverrideMinRadius; // 0x90
};

struct UKSKillCardWidget : UKSWidget {
	float DisplayDuration; // 0x520
};

struct UCollisionProfile : UDeveloperSettings {
	TArray<FCollisionResponseTemplate> Profiles; // 0x38
	TArray<FCustomChannelSetup> DefaultChannelResponses; // 0x48
	TArray<FCustomProfile> EditProfiles; // 0x58
	TArray<FRedirector> ProfileRedirects; // 0x68
	TArray<FRedirector> CollisionChannelRedirects; // 0x78
};

struct UKSWeaponComponent : UKSEquipmentCosmeticComponent {
	EWeaponComponentTickType WeaponComponentTickType; // 0x128
	bool bAllowTickingOnItemDropActor; // 0x129
	char ForcedWeaponLODWhenLocallyViewed; // 0x12a
	bool bForceResidentFlagOnWeaponTextures; // 0x12b
	bool bAllowAnimationAsItemDrop; // 0x12c
	EWeaponStateNew WeaponState; // 0x12d
	EWeaponStateNew InitialState; // 0x12e
	UKSWeaponAsset* WeaponAsset; // 0x130
	bool bPendingFire; // 0x138
	char InitialAmmoInClip; // 0x139
	char AmmoInClip; // 0x13a
	bool bInitializationStarted; // 0x13b
	bool bInitializationCompleted; // 0x13c
	FMulticastInlineDelegate OnAmmoChangedDel; // 0x140
	FMulticastInlineDelegate OnFireRateChangedDel; // 0x168
	FMulticastInlineDelegate OnWeaponComponentInitializationCompletedDel; // 0x180
	bool bCachedWeaponVisibility; // 0x1a9
	float MeshMaxDrawDistance; // 0x1ac
	bool bUseMaxDistForCharacterOwnedWeapons; // 0x1b0
	bool bHideAncillaryMagazine; // 0x1b1
	int32_t AncillaryMagazineIndex; // 0x1b4
	bool bIsGrenade; // 0x1b8
	bool bUsesHeavyGadget; // 0x1b9
	FName MeleeComboTarget; // 0x1bc
	bool bPreventReturnToHolsterFlag; // 0x1c4
	EWeaponComponentAttachmentType WeaponAttachType; // 0x1c5
	USkeletalMesh* SkeletalMesh; // 0x1c8
	UPhysicsAsset* PhysicsAsset; // 0x1d0
	FName WeaponSkeletalMeshCollisionProfileName; // 0x1d8
	bool bLoadWeaponSkeletalMeshComponentOnServer; // 0x1e0
	TArray<FName> ActiveRequiredDedicatedServerCharacterBoneNames; // 0x1e8
	EVisibilityBasedAnimTickOption MeshComponentVisibilityBasedAnimTickOption; // 0x1f8
	bool bAllowMeshCompositing; // 0x1f9
	USkeletalMesh* ScopeMesh; // 0x200
	FGameplayTag ScopeAttachmentTag; // 0x208
	USkeletalMesh* MagazineMesh; // 0x210
	FGameplayTag MagazineAttachmentTag; // 0x218
	USkeletalMesh* StockMesh; // 0x220
	FGameplayTag StockAttachmentTag; // 0x228
	USkeletalMesh* SilencerMesh; // 0x230
	FGameplayTag SilencerAttachmentTag; // 0x238
	USkeletalMesh* GripMesh; // 0x240
	FGameplayTag GripAttachmentTag; // 0x248
	TArray<FName> KeywordsForCompositingMesh; // 0x250
	FName BaseMeshOverrideKeyword; // 0x260
	FName MeshNeedsCPUAccessKeyword; // 0x268
	FName PhysicsAssetOverrideKeyword; // 0x270
	UAnimInstance* AnimInstance; // 0x278
	FName AnimInstanceOverrideKeyword; // 0x280
	FName EquipSocketOverride; // 0x288
	UKSWeaponSkeletalMeshComponent* WeaponSkeletalMeshComponent; // 0x290
	TWeakObjectPtr<UKSWeaponSkeletalMeshComponent> PropWeaponSkeletalMeshComponent; // 0x298
	bool bHideOnCreation; // 0x2a0
	bool bDuplicate; // 0x2a1
	FName DuplicateSocket; // 0x2a4
	UKSWeaponSkeletalMeshComponent* DuplicateSkeletalMeshComponent; // 0x2b0
	bool bWeaponLoweringEnabled; // 0x2b8
	FName CharacterRightShoulderBoneName; // 0x2bc
	FName CharacterRightElbowBoneName; // 0x2c4
	FName CharacterLeftShoulderBoneName; // 0x2cc
	FName CharacterLeftElbowBoneName; // 0x2d4
	FName CharacterChestBoneName; // 0x2dc
	FName WeaponBarrelBoneName; // 0x2e4
	float WeaponLowerSphereTraceRadius; // 0x2ec
	float WeaponLowerTestDistanceAdjustment; // 0x2f0
	TArray<FAncillaryWeaponMeshInfo> AncillaryMeshData; // 0x2f8
	float WeaponLowerViewDotThreshold; // 0x308
	bool bResetLocked; // 0x30c
	uint32_t NextBroadcastId; // 0x310
	uint32_t LastBroadcastReceived; // 0x314
	TArray<USkeletalMeshComponent*> AncillaryMeshes; // 0x318
	bool bPreventRetreive; // 0x328
	bool bForceDisableLHIK; // 0x329
	bool bAttachHandWhileSprinting; // 0x32a
	bool bAttachHandWhileMoving; // 0x32b
	bool bAttachHandWhileCrouching; // 0x32c
	bool bAttachHandMelee; // 0x32d
	bool bAttachHandWhileIdle; // 0x32e
	bool bAttachHandWhileZiplining; // 0x32f
	bool bForceAttachHandIfNotNonCom; // 0x330
	bool bForceDisableRHIK; // 0x331
	bool bAttachRightHand; // 0x332
	bool bAttachRightHandWhileZiplining; // 0x333
	bool bHasMirroredReloadAnim; // 0x334
	bool bHasMirroredQuickReloadAnim; // 0x335
	bool bHasMirroredFireAnim; // 0x336
	bool bReplicateWeaponStateAsVariable; // 0x337
	bool bForceBroadcastAllWeaponStateChanges; // 0x338
	bool bForceReliableWeaponStateBroadcast; // 0x339
	int32_t ShotsFiredSinceLastReload; // 0x33c
	bool bFirstReload; // 0x340
	bool bShouldBroadcastEmptyFire; // 0x341
	bool bShouldReliablyBroadcastEmptyFire; // 0x342
	bool bShouldReliablyBroadcastAmmoChanges; // 0x343
	FMulticastInlineDelegate OnWeaponComponentStateChangedDel; // 0x348
	bool bIsInAction; // 0x370
	bool bNonComUseLimitedMovement; // 0x371
	bool bComUseLimitedMovement; // 0x372
	bool bEngUseLimitedMovement; // 0x373
	bool bEnableTurnInPlaceForAOS; // 0x374
	FMulticastInlineDelegate ZoomFOVChanged; // 0x378
	EKSCharacterAimMode CachedAimMode; // 0x388
	float DefaultAimCameraTransitionTime; // 0x38c
	float AimOverShoulderCameraTransitionTime; // 0x390
	float AimDownSightsCameraTransitionTime; // 0x394
	FMulticastInlineDelegate OnWeaponComponentAimModeChangedDel; // 0x398
	TArray<UKSWeaponAttachmentCosmeticInst*> AttachmentCosmetics; // 0x3e0
	ESkinObjectParentingType SkinObjectParenting; // 0x3f0
	int32_t ActiveIndex; // 0x3f4
	FMulticastInlineDelegate OnEquipmentBecomeActiveDel; // 0x3f8
	FMulticastInlineDelegate OnEquipmentEndActiveDel; // 0x420
	UAnimMontage* ActiveReloadMontage; // 0x458
	UAnimMontage* ActiveWeaponReloadMontage; // 0x460
	bool bMultiStageReload; // 0x468
	bool bSpeedloaded; // 0x469
	bool PostReloadTimerIsActive; // 0x46a
	bool EnableAimsDuringReload; // 0x46b
	bool bShieldIsActive; // 0x46c
	FName MuzzleSocketKeyword; // 0x470
	TArray<FName> ApparelObjectsToListenTo; // 0x4a8
	TArray<FDataTableInfo> BaseAssetDataTables; // 0x4b8
	bool bCreateDataTableForLegacyAssets; // 0x4c8
	UDynamicSkinTable* AssetDataTableManager; // 0x4d0
	UMultiSkinObject* SkinObject; // 0x4d8
	bool bSkinObjectAdded; // 0x4e0
	FVector ViewModelScale; // 0x4f8
	FRotator ViewModelRotation; // 0x504
	FVector ViewModelLocationOffset; // 0x510
	float WeaponCombatStateCooldown; // 0x520
	float ForceNonCombatShotBlockDistance; // 0x524
	UKSWeaponTargetingModule* TargetingVisualizationClass; // 0x528
	bool bIsTargeting; // 0x530
	UKSWeaponTargetingModule* TargetingVisualizerInstance; // 0x538
	UForceFeedbackEffect* VibrationEffect; // 0x540
	UForceFeedbackEffect* AlternateVibrationEffect; // 0x548
	UForceFeedbackAttenuation* AlternativeVibrationAttenuation; // 0x550
	URecoilProfileAsset* RecoilProfileAsset; // 0x558
	bool bIsMeleeWeaponComponent; // 0x560
	FString VFXSpangKeywordPrefix; // 0x568
	FString DecalSpangKeywordPrefix; // 0x578
	FName VFXSpangDefaultKeyword; // 0x588
	TMap<EPhysicalSurface, FName> VFXSpangKeywordMap; // 0x590
	FName DecalSpangDefaultKeyword; // 0x5e0
	TMap<EPhysicalSurface, FName> DecalSpangKeywordMap; // 0x5e8
};

struct UKSDistanceOptimizationComponent : UActorComponent {
	FMulticastInlineDelegate DistanceOptimizationChangedDelegate; // 0xb0
	bool bAlwaysDisableOnServer; // 0xc0
	float ActiveDistance; // 0xc4
	float CurrentDistance; // 0xc8
	TArray<UActorComponent*> ComponentsToControl; // 0xd0
	TArray<AActor*> ActorsToControl; // 0xe0
};

struct UMovieSceneSkeletalAnimationSection : UMovieSceneSection {
	FMovieSceneSkeletalAnimationParams Params; // 0xe0
	UAnimSequence* AnimSequence; // 0x1b8
	UAnimSequenceBase* Animation; // 0x1c0
	float StartOffset; // 0x1c8
	float EndOffset; // 0x1cc
	float PlayRate; // 0x1d0
	char bReverse : 1; // 0x1d4
	FName SlotName; // 0x1d8
};

struct UMaterialExpressionRadialBlurSceneTexture : UMaterialExpression {
	FExpressionInput BlurDist; // 0x40
	FExpressionInput ScreenUV; // 0x54
	ESceneTextureId SceneTextureId; // 0x68
};

struct UPUMG_LoginDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnLoginUserChanged; // 0x38
	FMulticastInlineDelegate OnLoginStateChanged; // 0x48
	FMulticastInlineDelegate OnLoginError; // 0x58
	FMulticastInlineDelegate OnControllerDisconnected; // 0x70
	bool bAllowLoginDuringPartialInstall; // 0x80
	UDataTable* ErrorMsgsDT; // 0x88
	bool bAttemptedDeferredInviteAutoLogin; // 0x90
	bool bNeedsValidateDisplayName; // 0xf3
	FString CustomDisplayName; // 0x108
	int32_t MinCustomDisplayNameLength; // 0x118
	int32_t MaxCustomDisplayNameLength; // 0x11c
	FString CustomDisplayNameInvalidChars; // 0x120
	FMulticastInlineDelegate OnLoginWaitQueueMessage; // 0x140
};

struct AKSOutOfBoundsVolume : AVolume {
	float TickDamage; // 0x258
	float WarningDuration; // 0x25c
};

struct UWBP_Toast2_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Waiting; // 0x528
	UWidgetAnimation* Outro; // 0x530
	UWidgetAnimation* Intro; // 0x538
	USizeBox* 1pxBar; // 0x540
	USizeBox* 1pxBar_2; // 0x548
	UTextBlock* AchievementDetails; // 0x550
	UTextBlock* AchievementName; // 0x558
	UTextBlock* AchievementType; // 0x560
	UImage* Back; // 0x568
	UImage* BottomBar; // 0x570
	UImage* EdgeGlowBottom; // 0x578
	UImage* EdgeGlowTop; // 0x580
	UImage* Gradient; // 0x588
	UImage* HeaderBar; // 0x590
	UImage* IconBack; // 0x598
	UWidgetSwitcher* IconSwitcher; // 0x5a0
	UWBP_RogueMasteryPortrait_C* MasteryPortrait; // 0x5a8
	USizeBox* PlayerLevel; // 0x5b0
	UTextBlock* PlayerLevelText; // 0x5b8
	UWBP_AsyncIcon_C* ToastIcon; // 0x5c0
	UImage* TopBar; // 0x5c8
	FMulticastInlineDelegate OnRemoveToastNotification; // 0x5d0
	FMulticastInlineDelegate FinishedOutroAnimation; // 0x5e0
	FToastData ToastData; // 0x5f0
	UWidgetAnimation* NewVar_1; // 0x648
	float WaitDuration; // 0x650
	float DEFAULT_WAIT_DURATION; // 0x654
};

struct UBuildPatchManifest : UObject {
	char ManifestFileVersion; // 0x28
	bool bIsFileData; // 0x29
	uint32_t AppID; // 0x2c
	FString AppName; // 0x30
	FString BuildVersion; // 0x40
	FString LaunchExe; // 0x50
	FString LaunchCommand; // 0x60
	TSet<FString> PrereqIds; // 0x70
	FString PrereqName; // 0xc0
	FString PrereqPath; // 0xd0
	FString PrereqArgs; // 0xe0
	TArray<FFileManifestData> FileManifestList; // 0xf0
	TArray<FChunkInfoData> ChunkList; // 0x100
	TArray<FCustomFieldData> CustomFields; // 0x110
};

struct UListViewBase : UWidget {
	UUserWidget* EntryWidgetClass; // 0x110
	float WheelScrollMultiplier; // 0x118
	bool bEnableScrollAnimation; // 0x11c
	bool bEnableFixedLineOffset; // 0x11d
	float FixedLineScrollOffset; // 0x120
	FMulticastInlineDelegate BP_OnEntryGenerated; // 0x128
	FMulticastInlineDelegate BP_OnEntryReleased; // 0x138
	FUserWidgetPool EntryWidgetPool; // 0x148
};

struct APlayerCameraManager : AActor {
	APlayerController* PCOwner; // 0x220
	USceneComponent* TransformComponent; // 0x228
	float DefaultFOV; // 0x238
	float DefaultOrthoWidth; // 0x240
	float DefaultAspectRatio; // 0x248
	FCameraCacheEntry CameraCache; // 0x290
	FCameraCacheEntry LastFrameCameraCache; // 0x880
	FTViewTarget ViewTarget; // 0xe70
	FTViewTarget PendingViewTarget; // 0x1470
	FCameraCacheEntry CameraCachePrivate; // 0x1aa0
	FCameraCacheEntry LastFrameCameraCachePrivate; // 0x2090
	TArray<UCameraModifier*> ModifierList; // 0x2680
	TArray<UCameraModifier*> DefaultModifiers; // 0x2690
	float FreeCamDistance; // 0x26a0
	FVector FreeCamOffset; // 0x26a4
	FVector ViewTargetOffset; // 0x26b0
	TArray<AEmitterCameraLensEffectBase*> CameraLensEffects; // 0x26d0
	UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x26e0
	UCameraAnimInst* AnimInstPool[0x8]; // 0x26e8
	TArray<FPostProcessSettings> PostProcessBlendCache; // 0x2728
	TArray<UCameraAnimInst*> ActiveAnims; // 0x2748
	TArray<UCameraAnimInst*> FreeAnims; // 0x2758
	ACameraActor* AnimCameraActor; // 0x2768
	char bIsOrthographic : 1; // 0x2770
	char bDefaultConstrainAspectRatio : 1; // 0x2770
	char bClientSimulatingViewTarget : 1; // 0x2770
	char bUseClientSideCameraUpdates : 1; // 0x2770
	char bGameCameraCutThisFrame : 1; // 0x2771
	char bForceLocalSpaceForInterpolatedRendering : 1; // 0x2771
	float ViewPitchMin; // 0x2774
	float ViewPitchMax; // 0x2778
	float ViewYawMin; // 0x277c
	float ViewYawMax; // 0x2780
	float ViewRollMin; // 0x2784
	float ViewRollMax; // 0x2788
	float ServerUpdateCameraTimeout; // 0x2790
};

struct UWBP_CurrencySummary_C : UKSCurrencyDisplay {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_AsyncIcon_C* CurrencyIcon0; // 0x528
	UWBP_AsyncIcon_C* CurrencyIcon1; // 0x530
	UWBP_AsyncIcon_C* CurrencyIcon2; // 0x538
	UVerticalBox* CurrencySummaryContainer; // 0x540
	UTextBlock* CurrencyText0; // 0x548
	UTextBlock* CurrencyText1; // 0x550
	UTextBlock* CurrencyText2; // 0x558
	UKSPlayerDataFactory* PlayerDataFactory; // 0x560
	TArray<int32_t> DisplayedCurrencies; // 0x568
};

struct UKSBTD_HasSwappedEquipment : UBTDecorator {
	FBlackboardKeySelector CachedWeaponClassKey; // 0x68
};

struct UNewMenuMain_C : UPUMG_ContextBarPrompt {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4d0
	UWidgetAnimation* Hover; // 0x4d8
	UOverlay* Button; // 0x4e0
	UOverlay* ContentWrapper; // 0x4e8
	UButton* HitTarget; // 0x4f0
	UImage* Icon; // 0x4f8
	UAkAudioEvent* HoveredNewMenuMainSFX; // 0x500
	UAkAudioEvent* ClickNewMenuMainSFX; // 0x508
};

struct UKSQueueDataFactory : UPUMG_QueueDataFactory {
	FMulticastInlineDelegate OnSetQueueId; // 0x250
	FMulticastInlineDelegate OnQueueErrorRelevantStateChanged; // 0x260
	int32_t ChunksInstallingQueueId; // 0x270
	int32_t DefaultQueueId; // 0x274
	float CancelJoinMatchDelay; // 0x278
	FMulticastInlineDelegate OnSetQueueInputState; // 0x280
	TArray<int64_t> PreviousCustomMatchMemberIds; // 0x290
	int32_t SelectedQueueId; // 0x2a0
	float TimeoutForSwitchFromShelteredToMainQueue; // 0x2a4
	bool bWaitingOnLeaveForShelteredSwitch; // 0x2a8
	bool bWaitingOnJoinForShelteredSwitch; // 0x2a9
	int32_t MaxRetriesForAlternateQueue; // 0x2ac
	float TimeBetweenRetriesForAlternateQueue; // 0x2b0
	float RetryingDisplayTime; // 0x2b4
	bool bRetryingViaAutoRejoin; // 0x2b8
	int32_t NumRetriesForAlternateQueue; // 0x2cc
	TArray<FMapDetail> MapInfos; // 0x2d0
	UDataTable* QueueDetailDataTable; // 0x2e0
};

struct UWBP_LerpingNumberWidget_C : UKSFloatTickLerpWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x260
	UWidgetAnimation* AnimBump; // 0x268
	UTextBlock* Text; // 0x270
	float RepeatThreshold; // 0x278
	int32_t CurrentTextDisplay; // 0x27c
};

struct AKSBuildPreview : AActor {
	UMaterialInterface* ValidBuildMaterial; // 0x220
	UMaterialInterface* InvalidBuildMaterial; // 0x228
	UBoxComponent* Box; // 0x230
	USkinnableMergedMeshComponent* MeshComponent; // 0x238
	UMultiSkinObject* SkinObject; // 0x240
	TArray<FName> ApparelObjectsToListenTo; // 0x248
	TArray<FName> FullKeywordList; // 0x258
};

struct UMaterialExpressionMetallicCustomOutput : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct UKSModInst_ReviveSelfOnActivation : UKSModInst_Activated {
	bool bUsesCustomDuration; // 0x478
	float CustomReviveTime; // 0x47c
	bool bCanUseWhileUp; // 0x480
	bool bReviveDuringSetup; // 0x481
	float UpAbilitySetupDuration; // 0x484
	float UpAbilityDuration; // 0x488
	float UpAbilityRecoveryDuration; // 0x48c
	FKSActionRestrictor UpAbilityRecoveryActionRestrictor; // 0x490
	TArray<UKSPlayerMod*> UpBuffsGivenOnActivation; // 0x498
};

struct UKSBTD_BlackboardPerceived : UBTDecorator_BlackboardBase {
	TArray<UAISense*> SensesToUse; // 0x90
	FName PerceptionEvent; // 0xa0
};

struct UParticleModuleRotationOverLifetime : UParticleModuleRotationBase {
	FRawDistributionFloat RotationOverLife; // 0x30
	char Scale : 1; // 0x60
};

struct UParticleModuleMeshRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	FRawDistributionVector LifeMultiplier; // 0x30
};

struct UNiagaraDataInterfaceExport : UNiagaraDataInterface {
	FNiagaraUserParameterBinding CallbackHandlerParameter; // 0x30
};

struct UKSActivityRequirement_GameModeTag : UKSActivityRequirement {
	TArray<FGameplayTag> RequiredGameModeTags; // 0x30
	bool TrueIfMatches; // 0x40
	bool RequireAllTagsToMatch; // 0x41
};

struct AKSProjectile_GrenadeSpread : AKSProjectile_Grenade {
	float TimeToStartSpread; // 0xa00
	float TickSpreadFrequency; // 0xa04
	FTimerHandle TickSpreadTimerHandle; // 0xa08
	UKSGrenadeSpreadRule* SpreadRuleClass; // 0xa10
	float NormalZMin; // 0xa18
	FKSSpreadList SpreadList; // 0xa20
	float MaxSpreadDistance; // 0xb40
	bool PreventCollisionBeneathSpread; // 0xb44
	FTimerHandle SpreadTimerHandle; // 0xb48
	TArray<FTransform> QueuedTransforms; // 0xb50
	TArray<FVector> SpreadStartLocations; // 0xb60
	int32_t SpreadProjectileCount; // 0xb70
	TArray<AKSSpreadProjectile*> SpreadProjectiles; // 0xb78
	AKSSpreadProjectile* SpreadProjectileToSpawn; // 0xb88
	float SpreadProjectileRotationMin; // 0xb90
	float SpreadProjectileRotationMax; // 0xb94
	float SpreadProjectileHeight; // 0xb98
	TArray<TWeakObjectPtr<AKSProjectile_GrenadeSpread>> ChildSpreadGrenades; // 0xba0
	TWeakObjectPtr<AKSProjectile_GrenadeSpread> ParentSpreadGrenade; // 0xbb0
	float MaxHealthPerTransform; // 0xbb8
	TArray<EDamageCategory> DamageTypeImmunities; // 0xbc0
	float SphereCollisionRadius; // 0xbd0
	bool bExtinguishable; // 0xbd4
	AActor* OverlapClassFilter; // 0xbd8
	TArray<EObjectTypeQuery> OverlapObjectTypes; // 0xbe0
	TArray<TSoftClassPtr<UObject>> ToDestroyOnOverlap; // 0xbf0
	bool bUseDestroyOnOverlapList; // 0xc00
	float LingerDuration; // 0xc18
	TArray<AActor*> AffectedActors; // 0xc20
	TMap<AActor*, FTimerHandle> LingeringAffectedActors; // 0xc30
	float TickDamageAmount; // 0xc84
	UDamageType* TickDamageClass; // 0xc88
	float TickDamageFrequency; // 0xc90
	UKSNavModifierComponent* KSNavModifierComponent; // 0xc98
	TArray<UParticleSystemComponent*> ParticleSystemComponents; // 0xca0
	TArray<UDecalComponent*> DecalComponents; // 0xcb0
	TArray<UMeshComponent*> MeshComponents; // 0xcc0
	UParticleSystem* ParticleSystemTemplate; // 0xcd0
	int32_t TranslucencySortPriority; // 0xcd8
	float PreDeactivateTime; // 0xcdc
	float ParticleOcclusionRadius; // 0xce0
	UMaterialInterface* DecalMaterial; // 0xce8
	float DecalDepth; // 0xcf0
	UObject* MeshAsset; // 0xcf8
	UMaterialInstance* FriendlyMaterial; // 0xd00
	UMaterialInstance* EnemyMaterial; // 0xd08
	float MeshOutlineThickness; // 0xd10
	UAnimInstance* SkeletalAnimClass; // 0xd18
	FTransform MeshTransform; // 0xd20
};

struct UWBP_TopNavButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UCanvasPanel* NewIndicator; // 0x528
	UWBP_CallToAction_C* WBP_CallToAction; // 0x530
	UWBP_navtab_C* WBP_main_nav_tab; // 0x538
	FText Message; // 0x540
	FMulticastInlineDelegate OnClicked; // 0x558
	FMulticastInlineDelegate OnHovered; // 0x568
	FMulticastInlineDelegate OnUnhovered; // 0x578
	FName TargetViewState; // 0x588
	TArray<FName> RelatedViewStates; // 0x590
	FMulticastInlineDelegate OnNonRouteClicked; // 0x5a0
	bool UsesBattlePassColoring; // 0x5b0
	bool bIsFirstTab; // 0x5b1
	FName BattlePassCTAName; // 0x5b4
	bool UsesHolidayColoring; // 0x5bc
};

struct UMaterialExpressionStaticSwitchParameter : UMaterialExpressionStaticBoolParameter {
	FExpressionInput A; // 0x60
	FExpressionInput B; // 0x74
};

struct UParticleModuleKillBox : UParticleModuleKillBase {
	FRawDistributionVector LowerLeftCorner; // 0x30
	FRawDistributionVector UpperRightCorner; // 0x78
	char bAbsolute : 1; // 0xc0
	char bKillInside : 1; // 0xc0
	char bAxisAlignedAndFixedSize : 1; // 0xc0
};

struct USubmixEffectSubmixEQPreset : USoundEffectSubmixPreset {
	FSubmixEffectSubmixEQSettings Settings; // 0x78
};

struct UMovieSceneEnumSection : UMovieSceneSection {
	FMovieSceneByteChannel EnumCurve; // 0xe0
};

struct UMovieSceneBuiltInEasingFunction : UObject {
	EMovieSceneBuiltInEasing Type; // 0x30
};

struct UGameNetworkManagerSettings : UObject {
	int32_t MinDynamicBandwidth; // 0x28
	int32_t MaxDynamicBandwidth; // 0x2c
	int32_t TotalNetBandwidth; // 0x30
	int32_t BadPingThreshold; // 0x34
	char bIsStandbyCheckingEnabled : 1; // 0x38
	float StandbyRxCheatTime; // 0x3c
	float StandbyTxCheatTime; // 0x40
	float PercentMissingForRxStandby; // 0x44
	float PercentMissingForTxStandby; // 0x48
	float PercentForBadPing; // 0x4c
	float JoinInProgressStandbyWaitTime; // 0x50
};

struct UWBP_CosmeticItem_BorderEmpty_C : UKSWidget {
	UImage* Image_76; // 0x520
};

struct UDamageResistModInst_C : UKSModInst_DamageTaken {
	FPointerToUberGraphFrame UberGraphFrame; // 0x1b8
};

struct UNiagaraEmitter : UObject {
	bool bLocalSpace; // 0x28
	bool bDeterminism; // 0x29
	int32_t RandomSeed; // 0x2c
	EParticleAllocationMode AllocationMode; // 0x30
	int32_t PreAllocationCount; // 0x34
	FNiagaraEmitterScriptProperties UpdateScriptProps; // 0x38
	FNiagaraEmitterScriptProperties SpawnScriptProps; // 0x60
	FNiagaraEmitterScriptProperties EmitterSpawnScriptProps; // 0x88
	FNiagaraEmitterScriptProperties EmitterUpdateScriptProps; // 0xb0
	ENiagaraSimTarget SimTarget; // 0xd8
	FBox FixedBounds; // 0xdc
	int32_t MinDetailLevel; // 0xf8
	int32_t MaxDetailLevel; // 0xfc
	FNiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides; // 0x100
	FNiagaraPlatformSet Platforms; // 0x118
	FNiagaraEmitterScalabilityOverrides ScalabilityOverrides; // 0x138
	char bInterpolatedSpawning : 1; // 0x148
	char bFixedBounds : 1; // 0x148
	char bUseMinDetailLevel : 1; // 0x148
	char bUseMaxDetailLevel : 1; // 0x148
	char bOverrideGlobalSpawnCountScale : 1; // 0x148
	char bRequiresPersistentIDs : 1; // 0x148
	float MaxDeltaTimePerTick; // 0x14c
	uint32_t DefaultShaderStageIndex; // 0x150
	uint32_t MaxUpdateIterations; // 0x154
	TSet<uint32_t> SpawnStages; // 0x158
	char bSimulationStagesEnabled : 1; // 0x1a8
	char bDeprecatedShaderStagesEnabled : 1; // 0x1a8
	char bLimitDeltaTime : 1; // 0x1a8
	FString UniqueEmitterName; // 0x1b0
	TArray<UNiagaraRendererProperties*> RendererProperties; // 0x1c0
	TArray<FNiagaraEventScriptProperties> EventHandlerScriptProps; // 0x1d0
	TArray<UNiagaraSimulationStageBase*> SimulationStages; // 0x1e0
	UNiagaraScript* GPUComputeScript; // 0x1f0
	TArray<FName> SharedEventGeneratorIds; // 0x1f8
};

struct UWBP_LeaveParty_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* BackgroundImage; // 0x530
	UButton* Button_102; // 0x538
	UImage* ButtonCallout; // 0x540
	UOverlay* GamepadCalloutWrapper; // 0x548
	UTextBlock* LeaveLabel; // 0x550
	UImage* TabBar; // 0x558
	UKSPartyDataFactory* PartyDF; // 0x560
	FMulticastInlineDelegate OnPartyLeaveVisibilityChange; // 0x568
	UAkAudioEvent* ClickLeavePartySFX; // 0x578
	UAkAudioEvent* HoverLeavePartySFX; // 0x580
};

struct UKSSettingsInfo_MobilePerformanceMode : UKSSettingsInfoBase {
	TArray<FKSMobilePerformanceOptions> MobilePerformanceOptions; // 0x108
};

struct USignificanceManager : UObject {
	FSoftClassPath SignificanceManagerClassName; // 0x108
};

struct UKSPersistentPlayerData : UObject {
	bool bIsBoundToMinPlayerData; // 0x28
	AKSPlayerState* PlayerState; // 0x30
	FKSPersistentPlayerId ID; // 0x48
	int32_t TeamNum; // 0x58
	FString PlayerName; // 0x60
	FMulticastInlineDelegate OnMinimumPlayerDataUpdatedDel; // 0x70
	FMulticastInlineDelegate OnPlayerDataTeamChangedDel; // 0x98
	bool bAbandoned; // 0xc0
	FMulticastInlineDelegate OnPersistentPlayerDataAbandonedDel; // 0xc8
	int32_t CachedEliminations; // 0xf0
	int32_t CachedDowns; // 0xf4
	int32_t CachedAssists; // 0xf8
	int32_t CachedDeaths; // 0xfc
	int32_t CachedRevives; // 0x100
	int32_t CachedMoney; // 0x104
	int32_t CachedTotalCashEarned; // 0x108
	int32_t CachedBounty; // 0x10c
	TMap<UKSItem*, UKSItem*> SkinMap; // 0x110
	UKSJobItem* ActiveJob; // 0x160
	FMulticastInlineDelegate OnActiveJobMasteryXpChanged; // 0x180
	int32_t ActiveJobMasteryXp; // 0x190
	int32_t ActiveJobMasteryLevel; // 0x194
};

struct UMaterialExpressionLandscapeLayerWeight : UMaterialExpression {
	FExpressionInput Base; // 0x40
	FExpressionInput Layer; // 0x54
	FName ParameterName; // 0x68
	float PreviewWeight; // 0x70
	FVector ConstBase; // 0x74
	FGuid ExpressionGUID; // 0x80
};

struct UFirstTimeTutorialWidget_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWidgetAnimation* Show; // 0x4c8
	UImage* Blocker; // 0x4d0
	UImage* Decro; // 0x4d8
	UImage* Image_134; // 0x4e0
	UTextBlock* TextBlock_295; // 0x4e8
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x4f0
	UWBP_StandardButtonLarge_C* WBP_StandardButtonLarge; // 0x4f8
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x500
	UAkAudioEvent* ShowTutorialWidgetSFX; // 0x508
};

struct ATransformGizmoActor : AGizmoActor {
	UPrimitiveComponent* TranslateX; // 0x220
	UPrimitiveComponent* TranslateY; // 0x228
	UPrimitiveComponent* TranslateZ; // 0x230
	UPrimitiveComponent* TranslateYZ; // 0x238
	UPrimitiveComponent* TranslateXZ; // 0x240
	UPrimitiveComponent* TranslateXY; // 0x248
	UPrimitiveComponent* RotateX; // 0x250
	UPrimitiveComponent* RotateY; // 0x258
	UPrimitiveComponent* RotateZ; // 0x260
	UPrimitiveComponent* UniformScale; // 0x268
	UPrimitiveComponent* AxisScaleX; // 0x270
	UPrimitiveComponent* AxisScaleY; // 0x278
	UPrimitiveComponent* AxisScaleZ; // 0x280
	UPrimitiveComponent* PlaneScaleYZ; // 0x288
	UPrimitiveComponent* PlaneScaleXZ; // 0x290
	UPrimitiveComponent* PlaneScaleXY; // 0x298
};

struct UImageSequenceProtocol_EXR : UImageSequenceProtocol {
	bool bCompressed; // 0xd8
	EHDRCaptureGamut CaptureGamut; // 0xd9
};

struct UKSWeaponCategoryAsset : UItemCollection {
	FGameplayTag CategoryTag; // 0x98
	FGameplayTag WrapTag; // 0xa0
	bool bExcludeUpgrades; // 0xa8
	bool bRequireItemId; // 0xa9
	FText DisplayName; // 0xb0
	FText DisplayNameSingular; // 0xc8
	FText DisplayNameCategory; // 0xe0
	TSoftObjectPtr<UTexture2D> SoftSymbolIcon; // 0xf8
	TSoftObjectPtr<UTexture2D> SoftFlatSymbolIcon; // 0x120
	TSoftObjectPtr<UTexture2D> SoftMasteryIcon; // 0x148
	TSoftObjectPtr<UTexture2D> SoftVerticalSplash; // 0x170
	TSoftObjectPtr<UTexture2D> SoftHorizontalSplash; // 0x198
	bool ShowsMasteryUI; // 0x1c0
	bool ShowsWeaponUnlockUI; // 0x1c1
	bool ShowsRelatedJobsUI; // 0x1c2
	TSoftObjectPtr<UKSWeaponAsset> DefaultPreviewWeapon; // 0x1d8
};

struct UKSBTD_IsActionAllowed : UBTDecorator {
	UKSBTAction* Action; // 0x68
};

struct AKSPowerUp_Reequip : AKSPowerUp {
	FGameplayTagQuery ReequipWeaponTypesQuery; // 0x258
	bool bDropLeftovers; // 0x2a0
};

struct UKSPerkTreeNodeBase : UKSWidget {
	TSoftObjectPtr<UKSPlayerMod> AssignedPerk; // 0x520
	FMulticastInlineDelegate OnTreeNodeHovered; // 0x548
	FMulticastInlineDelegate OnTreeNodeSelected; // 0x558
	FMulticastInlineDelegate OnRequestPerkPurchase; // 0x568
	bool bIsPlaceholder; // 0x578
	EPerkTreeNodeState NodeState; // 0x579
};

struct UAnimNotify_PlayMontageNotifyWindow : UAnimNotifyState {
	FName NotifyName; // 0x30
};

struct ALevelScriptActor : AActor {
	char bInputEnabled : 1; // 0x220
};

struct UMaterialExpressionBreakMaterialAttributes : UMaterialExpression {
	FMaterialAttributesInput MaterialAttributes; // 0x40
};

struct UMaterialExpressionBumpOffset : UMaterialExpression {
	FExpressionInput Coordinate; // 0x40
	FExpressionInput Height; // 0x54
	FExpressionInput HeightRatioInput; // 0x68
	float HeightRatio; // 0x7c
	float ReferencePlane; // 0x80
	uint32_t ConstCoordinate; // 0x84
};

struct UInterpTrackInstFloatMaterialParam : UInterpTrackInst {
	TArray<UMaterialInstanceDynamic*> MaterialInstances; // 0x28
	TArray<float> ResetFloats; // 0x38
	TArray<FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48
	UInterpTrackFloatMaterialParam* InstancedTrack; // 0x58
};

struct UMaterialExpressionAntialiasedTextureMask : UMaterialExpressionTextureSampleParameter2D {
	float Threshold; // 0xf0
	ETextureColorChannel Channel; // 0xf4
};

struct ULiveLinkSettings : UObject {
	TArray<FLiveLinkRoleProjectSetting> DefaultRoleSettings; // 0x28
	ULiveLinkFrameInterpolationProcessor* FrameInterpolationProcessor; // 0x38
	TSoftObjectPtr<ULiveLinkPreset> DefaultLiveLinkPreset; // 0x40
	FDirectoryPath PresetSaveDir; // 0x68
	float ClockOffsetCorrectionStep; // 0x78
	ELiveLinkSourceMode DefaultMessageBusSourceMode; // 0x7c
	double MessageBusPingRequestFrequency; // 0x80
	double MessageBusHeartbeatFrequency; // 0x88
	double MessageBusHeartbeatTimeout; // 0x90
	double MessageBusTimeBeforeRemovingInactiveSource; // 0x98
	double TimeWithoutFrameToBeConsiderAsInvalid; // 0xa0
	FLinearColor ValidColor; // 0xa8
	FLinearColor InvalidColor; // 0xb8
	char TextSizeSource; // 0xc8
	char TextSizeSubject; // 0xc9
};

struct UKSJobEquipmentRuleComponent : UKSGameRuleComponent {
	FKSJobEquipmentTypesToGive KSJobEquipmentTypesToGive; // 0xb0
};

struct UWBP_QuickPlay_QueueTypeSection_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* ButtonText; // 0x528
	UWBP_Graphic_Button_C* CustomButton; // 0x530
	UHorizontalBox* CustomMatchBtn; // 0x538
	UVerticalBox* QueueButtonsContainer; // 0x540
	UWBP_QuickPlay_QueueTypeHeader_C* QueueTypeHeader; // 0x548
	UImage* WarningIcon; // 0x550
	UWBP_QuickPlay_QueueButton_C* WBP_QuickPlay_QueueButton; // 0x558
	UWBP_QuickPlay_QueueButton_C* WBP_QuickPlay_QueueButton_108; // 0x560
	FQueueSection QueueSectionInfo; // 0x568
	FMulticastInlineDelegate OnQueueSelected; // 0x580
	FMulticastInlineDelegate OnQueueHovered; // 0x590
	FMulticastInlineDelegate OnQueueUnhovered; // 0x5a0
	TArray<UWBP_QuickPlay_QueueButton_C*> QueueButtons; // 0x5b0
	FMulticastInlineDelegate OnQueuePopulated; // 0x5c0
	TArray<FClientQueueInfo> AssociatedQueues; // 0x5d0
	FMulticastInlineDelegate OnCustomMatchSelected; // 0x5e0
	FMulticastInlineDelegate OnCustomMatchPopulated; // 0x5f0
	UKSQueueDataFactory* KSQueueDataFactory; // 0x600
};

struct UAkLateReverbComponent : USceneComponent {
	char bEnable : 1; // 0x208
	UAkAuxBus* AuxBus; // 0x210
	FString AuxBusName; // 0x218
	float SendLevel; // 0x228
	float FadeRate; // 0x22c
	float Priority; // 0x230
	UAkLateReverbComponent* NextLowerPriorityComponent; // 0x238
};

struct UWBP_Social_Accordian_Header_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* Arrow; // 0x530
	UImage* ArrowBg_Default; // 0x538
	UImage* ArrowBG_Over; // 0x540
	UOverlay* ArrowContainer; // 0x548
	UImage* Background_Default; // 0x550
	UImage* Background_Over; // 0x558
	USizeBox* CallToActionWrapper; // 0x560
	UTextBlock* CountLabel; // 0x568
	UButton* HitArea; // 0x570
	UTextBlock* Label; // 0x578
	USizeBox* MessageContainer; // 0x580
	UTextBlock* MessageText; // 0x588
	USizeBox* ProcessingIndicator; // 0x590
	UWBP_ControllerPrompt_C* Prompt; // 0x598
	USizeBox* PromptContainer; // 0x5a0
	UHorizontalBox* ToggleActionGroup; // 0x5a8
	UWBP_CallToAction_C* WBP_CallToAction; // 0x5b0
	UWBP_ThrobberHorizontal_C* WBP_ThrobberHorizontal; // 0x5b8
	UWidgetSwitcher* WidgetSwitcher_1; // 0x5c0
	FMulticastInlineDelegate OnClicked; // 0x5c8
	UKSDataSocialCategory* DataItem; // 0x5d8
	bool IsExpanded; // 0x5e0
	bool IsHoverState; // 0x5e1
	bool HasPlayerData; // 0x5e2
};

struct UCompositeDataTable : UDataTable {
	TArray<UDataTable*> ParentTables; // 0xc8
	TArray<UDataTable*> OldParentTables; // 0xd8
};

struct UKSModInst_OnDownOther : UKSPlayerModInstance {
	bool bListenToDowns; // 0x1b8
	bool bListenToEliminations; // 0x1b9
	bool bListenToAssists; // 0x1ba
	bool bAffectFriendlies; // 0x1bb
};

struct UAnimNotifyState_TimedParticleEffect : UAnimNotifyState {
	UParticleSystem* PSTemplate; // 0x30
	FName SocketName; // 0x38
	FVector LocationOffset; // 0x40
	FRotator RotationOffset; // 0x4c
	bool bDestroyAtEnd; // 0x58
};

struct UKSBTD_IsApproachingDropLocation : UBTDecorator {
	FBlackboardKeySelector DropLocationKey; // 0x68
	FBlackboardKeySelector DropLocationVectorKey; // 0x90
};

struct UKSActivityRequirement_Sequence : UKSActivityRequirement {
	FName ActivitySequenceName; // 0x30
	UDataTable* ActivitySequenceTable; // 0x38
};

struct UMaterialExpressionClearCoatNormalCustomOutput : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct UMagicLeapARPinSettings : UObject {
	float UpdateCheckFrequency; // 0x28
	FMagicLeapARPinState OnUpdatedEventTriggerDelta; // 0x2c
};

struct UKSBTTask_SetObjectiveOnBlackboard : UBTTask_BlackboardBase {
	UKSBTObjective* Objective; // 0x98
};

struct UNavCollision : UNavCollisionBase {
	TArray<FNavCollisionCylinder> CylinderCollision; // 0x80
	TArray<FNavCollisionBox> BoxCollision; // 0x90
	UNavArea* AreaClass; // 0xa0
	char bGatherConvexGeometry : 1; // 0xa8
	char bCreateOnClient : 1; // 0xa8
};

struct UKSJobSelectionPlayerStatusWidget : UKSJobSelectorWidget {
	TArray<FJobSelectionTask> CachedCompletedTasks; // 0x548
	FJobSelectionTask CachedActiveTask; // 0x558
	bool bCachedActiveTaskPendingComplete; // 0x5a0
	UKSPersistentPlayerData* PlayerData; // 0x5a8
};

struct URectLightComponent : ULocalLightComponent {
	float SourceWidth; // 0x350
	float SourceHeight; // 0x354
	float BarnDoorAngle; // 0x358
	float BarnDoorLength; // 0x35c
	UTexture* SourceTexture; // 0x360
};

struct UDistributionFloatConstant : UDistributionFloat {
	float Constant; // 0x38
};

struct UPUMG_ViewManager : UObject {
	TArray<UPUMG_ViewLayer*> ViewLayers; // 0x28
	TMap<FName, UPUMG_Widget*> StickyWidgetMap; // 0x38
	FMulticastInlineDelegate OnViewStateChanged; // 0x88
	FMulticastInlineDelegate OnViewStateChangeStarted; // 0x98
	APUMG_HUD* HudRef; // 0xa8
	TArray<UCanvasPanel*> CanvasPanels; // 0xb0
	TArray<FStickyWidgetData> StickyWidgets; // 0xc0
	UDataTable* Routes; // 0xd0
	TArray<FViewRouteRedirectData> AlwaysCheckRouteData; // 0xd8
};

struct UWBP_ControllerPrompt_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Prompt; // 0x528
	EGamepadPromptType PromptType; // 0x530
	FName ActionName; // 0x534
	FKey Button; // 0x540
};

struct UStereoLayerShapeCylinder : UStereoLayerShape {
	float Radius; // 0x28
	float OverlayArc; // 0x2c
	int32_t Height; // 0x30
};

struct AKSAkAmbientSound : AActor {
	UAkAudioEvent* AkAudioEvent; // 0x220
	UKSAkAmbientComponent* AkComponent; // 0x228
	bool StopWhenOwnerIsDestroyed; // 0x230
	bool AutoPost; // 0x231
	bool ForceNoTickingOnAkComponent; // 0x232
};

struct UAnimCurveCompressionSettings : UObject {
	UAnimCurveCompressionCodec* Codec; // 0x28
};

struct APerfSpline : AActor {
	USplineComponent* SplineCamPosComponent; // 0x220
	AActor* CamComponent; // 0x228
	USplineComponent* SplineCamLookAtComponent; // 0x230
	float SplineDuration; // 0x238
	int32_t NumOfCaptures; // 0x23c
};

struct UWBP_PipProgressEntry_C : UUserWidget {
	UImage* Empty; // 0x238
	UImage* Fill; // 0x240
	FLinearColor BaseColor; // 0x248
	FLinearColor FillColor; // 0x258
};

struct UWBP_WeaponMasteryTrackLevel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* SelectionLoop; // 0x528
	UWidgetAnimation* OnSelect; // 0x530
	UWidgetAnimation* OnHover; // 0x538
	UWBP_AdditiveImage_C* AdditiveBlur_Pulse; // 0x540
	UWidgetSwitcher* BadgeSwitcher; // 0x548
	UHorizontalBox* GamepadNavCallouts; // 0x550
	UVerticalBox* GradientBand; // 0x558
	UButton* HitTarget; // 0x560
	UHorizontalBox* NextCalloutSection; // 0x568
	UImage* NodeLocked; // 0x570
	UImage* NodeSelected; // 0x578
	UWidgetSwitcher* NodeSwitcher; // 0x580
	UImage* NodeUnlocked; // 0x588
	UHorizontalBox* PreviousCalloutSection; // 0x590
	UHorizontalBox* RewardsContainer; // 0x598
	UOverlay* RewardsWrapper; // 0x5a0
	UImage* SelectedGradientBack; // 0x5a8
	USizeBox* SelectedItemGradient; // 0x5b0
	UImage* SideGlow; // 0x5b8
	UImage* SideGlow_2; // 0x5c0
	UWBP_WeaponCategoryMasteryBadge_C* WBP_WeaponCategoryMasteryBadge; // 0x5c8
	UWBP_WeaponMasteryBadge_C* WBP_WeaponMasteryBadge; // 0x5d0
	FMulticastInlineDelegate OnTrackLevelSelected; // 0x5d8
	FActivityTier RewardTier; // 0x5e8
	PGAME_INPUT_STATE InputState; // 0x628
	bool IsSelected; // 0x629
	bool IsAchieved; // 0x62a
	UAkAudioEvent* ClickStandardBtnInnerSFX; // 0x630
	UAkAudioEvent* HoverStandardBtnInnerSFX; // 0x638
	bool HasGamepadFocus; // 0x640
	EKSWeaponMasteryType CurrentWeaponMasteryType; // 0x641
	UObject* CurrentMasteryContextObject; // 0x648
};

struct UPoolableDecalComponent : UDecalComponent {
	FMulticastInlineDelegate OnDecalReturnedToPoolDelegate; // 0x260
	bool bInUse; // 0x270
};

struct UVariantObjectBinding : UObject {
	FString CachedActorLabel; // 0x28
	FSoftObjectPath ObjectPtr; // 0x38
	LazyObjectProperty LazyObjectPtr; // 0x50
	TArray<UPropertyValue*> CapturedProperties; // 0x70
	TArray<FFunctionCaller> FunctionCallers; // 0x80
};

struct UWBP_news_article_C : UKSWidget {
	UImage* BackgroundBox; // 0x520
	UTextBlock* Desc; // 0x528
	UTextBlock* Header; // 0x530
	USizeBox* MasterSize; // 0x538
};

struct UViewport : UContentWidget {
	FLinearColor BackgroundColor; // 0x128
};

struct UWBP_BonusTypeEntry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* EventName; // 0x240
	UImage* Image_154; // 0x248
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x250
	FKSLimitedTimeEventMetadataRow EventDetails; // 0x258
};

struct UCineCameraComponent : UCameraComponent {
	FCameraFilmbackSettings FilmbackSettings; // 0x7e0
	FCameraFilmbackSettings Filmback; // 0x7ec
	FCameraLensSettings LensSettings; // 0x7f8
	FCameraFocusSettings FocusSettings; // 0x810
	float CurrentFocalLength; // 0x868
	float CurrentAperture; // 0x86c
	float CurrentFocusDistance; // 0x870
	TArray<FNamedFilmbackPreset> FilmbackPresets; // 0x880
	TArray<FNamedLensPreset> LensPresets; // 0x890
	FString DefaultFilmbackPresetName; // 0x8a0
	FString DefaultFilmbackPreset; // 0x8b0
	FString DefaultLensPresetName; // 0x8c0
	float DefaultLensFocalLength; // 0x8d0
	float DefaultLensFStop; // 0x8d4
};

struct UKSActivityRequirement_Queue : UKSActivityRequirement {
	int32_t RequiredActiveQueueId; // 0x30
};

struct UMovieSceneAkTrack : UMovieSceneTrack {
	TArray<UMovieSceneSection*> Sections; // 0x58
	char bIsAMasterTrack : 1; // 0x68
};

struct AKSWeapon_Aimed : AKSWeapon {
	FAimData CachedAim; // 0x6d8
	uint16_t LastHitValidationRequestId; // 0x728
	TMap<uint16_t, FHitValidationRecoveryInfo> HitValidationRecoveryList; // 0x730
	bool bAimOverShoulder; // 0x780
	float CachedAimBonus; // 0x784
	bool bApplyAccuracyServerSide; // 0x788
	float Range; // 0x7b4
	EFiredReplicationFlags FiredReplicationFlags; // 0x7b8
	UKSAimCorrectionData* AimAssistCorrectionData; // 0x7c0
	bool bAllowAimCorrection; // 0x7c8
	float HeadAimCorrectionOffset; // 0x7cc
	float HeadAimCorrectionOffsetPC; // 0x7d0
	float HeadAimCorrectionRange; // 0x7d4
	bool bAllowHipAimCorrection; // 0x7d8
	float HeadHipAimCorrectionOffset; // 0x7dc
	float HeadHipMouseAimCorrectionOffset; // 0x7e0
	float HeadHipAimCorrectionRange; // 0x7e4
	float ValidationSweepRadius; // 0x7e8
	float AimOriginOffsetLenience; // 0x7ec
	float AimOriginAngularLenience; // 0x7f0
	float MinimumShotDirCoincidence; // 0x7f4
	float CosAngularLenience; // 0x7f8
};

struct UKSActivityRewardCondition_DistanceSprinted : UKSActivityRewardCondition {
	float MinDistanceSprinted; // 0x30
	float MaxDistanceSprinted; // 0x34
};

struct UABP_GAD_ZiplineDevice_C : UKSZiplineAnimInst {
	FPointerToUberGraphFrame UberGraphFrame; // 0x1130
	FAnimNode_Root AnimGraphNode_Root; // 0x1138
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_6; // 0x1178
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_5; // 0x1290
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_4; // 0x13a8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4; // 0x14c0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4; // 0x14f0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x1520
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x15d0
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x1658
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x1698
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3; // 0x1758
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3; // 0x1788
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x17b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x1880
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x18b8
	FAnimNode_CCDIK AnimGraphNode_CCDIK; // 0x1940
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_3; // 0x1ad0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x1be8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2; // 0x1c98
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2; // 0x1cc8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x1cf8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_2; // 0x1d80
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x1e98
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x1f48
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x1f78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x1fa8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x2030
	UPCM_Hero_ABP_C* HeroABP; // 0x2148
	FVector Zipline IK Target Location; // 0x2150
	FVector Zipline Device Rope Pivot; // 0x215c
	FRotator Zipline IK Target Rotation; // 0x2168
	FVector L_ZiplineDevice Location; // 0x2174
	FVector R_ZiplineDevice Location; // 0x2180
};

struct ARectLight : ALight {
	URectLightComponent* RectLightComponent; // 0x230
};

struct UNewStartMenu_C : UKSNewStartMenuWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UVerticalBox* ButtonBox; // 0x528
	UWBP_StandardButton_02_C* ButtonContracts; // 0x530
	UWBP_StandardButton_02_C* ButtonNews; // 0x538
	UWBP_StandardButton_02_C* ButtonQuit; // 0x540
	UWBP_StandardButton_02_C* ButtonSettings; // 0x548
	UImage* logo; // 0x550
	UOverlay* MenuContainer; // 0x558
	UTextBlock* VersionDisplay; // 0x560
	FName CachedLastRoute; // 0x568
	UAkAudioEvent* BackClickNewStartMenuSFX; // 0x570
};

struct UKSReticleWidgetBase : UKSViewedActiveWeaponWidget {
	float ShrinkAnimationTime; // 0x538
	float BlockedShotIconMaxScale; // 0x53c
	float BlockedShotIconMinScale; // 0x540
	float BlockedShotMinScaleSqDist; // 0x544
	bool bGrenadeCooking; // 0x548
	bool bInADS; // 0x549
	bool bCachedBlockIconVisible; // 0x54a
	float CachedWeaponAccuracy; // 0x54c
	float CachedReticleOffset; // 0x550
};

struct UAnimSequence : UAnimSequenceBase {
	int32_t NumFrames; // 0xa8
	TArray<FTrackToSkeletonMap> TrackToSkeletonMapTable; // 0xb0
	UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xd0
	UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xd8
	EAdditiveAnimationType AdditiveAnimType; // 0x150
	EAdditiveBasePoseType RefPoseType; // 0x151
	UAnimSequence* RefPoseSeq; // 0x158
	int32_t RefFrameIndex; // 0x160
	FName RetargetSource; // 0x164
	EAnimInterpolationType Interpolation; // 0x16c
	bool bEnableRootMotion; // 0x16d
	ERootMotionRootLock RootMotionRootLock; // 0x16e
	bool bForceRootLock; // 0x16f
	bool bUseNormalizedRootMotionScale; // 0x170
	bool bRootMotionSettingsCopiedFromMontage; // 0x171
	TArray<FAnimSyncMarker> AuthoredSyncMarkers; // 0x178
};

struct UWBP_WeaponMilestones_C : UKSWeaponMilestoneDisplay {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UUniformGridPanel* EntryContainer; // 0x530
	UWBP_WeaponMilestoneEntry_C* Milestone01; // 0x538
	UWBP_WeaponMilestoneEntry_C* Milestone02; // 0x540
	UWBP_WeaponMilestoneEntry_C* Milestone03; // 0x548
	UWBP_WeaponMilestoneEntry_C* Milestone04; // 0x550
};

struct UKSActivityRewardCondition_ItemPickedUp : UKSActivityRewardCondition {
	TArray<TSoftObjectPtr<UKSItem>> MatchingItemTypes; // 0x30
};

struct UInterpTrackBoolProp : UInterpTrack {
	TArray<FBoolTrackKey> BoolTrack; // 0x70
	FName PropertyName; // 0x80
};

struct UKSAnalogStickFilter : UObject {
	EKSAnalogStickType StickType; // 0x28
	UKSPlayerInput* PlayerInput; // 0x30
};

struct UNewWBP_LobbyNameplate_C : UKSLobbyNameplateWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UKSAsyncImage* AvatarIcon; // 0x528
	UImage* PartyLeader; // 0x530
	USizeBox* PartyLeaderIcon; // 0x538
	UHorizontalBox* PlayerDisplay; // 0x540
	UTextBlock* PlayerName; // 0x548
	UTextBlock* ProgressNum; // 0x550
	UHorizontalBox* RankedDisplayWrapper; // 0x558
	UWBP_RankedIcon_C* RankedIcon; // 0x560
	UVerticalBox* RankedProgress; // 0x568
	UWBP_ProgressEarnedBar_C* RankedProgressBar; // 0x570
	UTextBlock* TotalNum; // 0x578
	UKSPartyDataFactory* PartyDataFactory; // 0x580
	int32_t MaxNameLength; // 0x588
	UKSPlayerInfo* StoredPlayerInfo; // 0x590
	UKSQueueDataFactory* QueueDataFactory; // 0x598
	bool ShouldShowRankedXp; // 0x5a0
};

struct UKSApparelAsset_SkinnedMesh : UKSApparelAsset_SkinDataTables {
	TSoftClassPtr<UObject> MeshClass; // 0x2e0
	FName AttachPointName; // 0x308
	FName CollisionProfile; // 0x310
	bool bSlaveToCharacterMesh; // 0x318
	bool bSimulatePhysics; // 0x319
	TArray<FName> ApparelObjectsToListenTo; // 0x320
};

struct UExporter : UObject {
	UObject* SupportedClass; // 0x28
	UObject* ExportRootScope; // 0x30
	TArray<FString> FormatExtension; // 0x38
	TArray<FString> FormatDescription; // 0x48
	int32_t PreferredFormatIndex; // 0x58
	int32_t TextIndent; // 0x5c
	char bText : 1; // 0x60
	char bSelectedOnly : 1; // 0x60
	char bForceFileOperations : 1; // 0x60
	UAssetExportTask* ExportTask; // 0x68
};

struct UKSExperiments : UObject {
	TArray<FKSExperimentConfig> ExperimentConfigRow; // 0x28
};

struct UWBP_RoguePrimaryWeaponSelectPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UVerticalBox* CategoryColumn_One; // 0x528
	UVerticalBox* CategoryColumn_Two; // 0x530
	UTextBlock* CategoryOneCount_SinglePrimary; // 0x538
	UTextBlock* CategoryOneCount_SinglePrimary_2; // 0x540
	UWBP_AsyncIcon_C* CategoryOneIcon_SinglePrimary; // 0x548
	UWBP_AsyncIcon_C* CategoryOneIcon_SinglePrimary_2; // 0x550
	UTextBlock* CategoryOneName_SinglePrimary; // 0x558
	UTextBlock* CategoryOneName_SinglePrimary_2; // 0x560
	UImage* Image; // 0x568
	UImage* Image_2; // 0x570
	UImage* Image_3; // 0x578
	UImage* Image_4483; // 0x580
	UImage* LockIcon; // 0x588
	UGridPanel* StatsContainerGrid; // 0x590
	UVerticalBox* TierInfoContainer; // 0x598
	UWBP_WeaponMasteryBadge_C* TooltipMasteryBadge; // 0x5a0
	UWBP_RoguePanelHeader_C* WBP_RoguePanelHeader; // 0x5a8
	UWBP_WeaponHubStatsEntry_C* WBP_WeaponHubStatsEntry; // 0x5b0
	UWBP_WeaponHubStatsEntry_C* WBP_WeaponHubStatsEntry_2; // 0x5b8
	UWBP_WeaponHubStatsEntry_C* WBP_WeaponHubStatsEntry_3; // 0x5c0
	UWBP_WeaponHubStatsEntry_C* WBP_WeaponHubStatsEntry_4; // 0x5c8
	UWBP_WeaponHubStatsEntry_C* WBP_WeaponHubStatsEntry_5; // 0x5d0
	UWBP_WeaponHubStatsEntry_C* WBP_WeaponHubStatsEntry_6; // 0x5d8
	UWBP_WeaponHubUpgradeEntry_C* WBP_WeaponHubUpgradeEntry; // 0x5e0
	UWBP_WeaponHubUpgradeEntry_C* WBP_WeaponHubUpgradeEntry_2; // 0x5e8
	UWBP_WeaponHubUpgradeEntry_C* WBP_WeaponHubUpgradeEntry_3; // 0x5f0
	UWBP_WeaponHubUpgradeEntry_C* WBP_WeaponHubUpgradeEntry_4; // 0x5f8
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton; // 0x600
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_2; // 0x608
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_3; // 0x610
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_4; // 0x618
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_5; // 0x620
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_6; // 0x628
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_7; // 0x630
	UTextBlock* WeaponCategory; // 0x638
	UWBP_AsyncIcon_C* WeaponImage; // 0x640
	UTextBlock* WeaponNameText; // 0x648
	USizeBox* WeaponUnlockTooltip; // 0x650
	UKSRogueDetailsWidget* RogueDetailsWidget; // 0x658
	UKSWidget* NavigationParent; // 0x660
	int32_t FocusGroup; // 0x668
	UKSJobItem* LocalJobItem; // 0x670
	UKSWeaponAsset* HoveredWeaponAsset; // 0x678
};

struct URandomVector : UFieldNodeVector {
	float Magnitude; // 0xb0
};

struct APainCausingVolume : APhysicsVolume {
	char bPainCausing : 1; // 0x268
	float DamagePerSec; // 0x26c
	UDamageType* DamageType; // 0x270
	float PainInterval; // 0x278
	char bEntryPain : 1; // 0x27c
	char BACKUP_bPainCausing : 1; // 0x27c
	AController* DamageInstigator; // 0x280
};

struct UGamepadPrompt_Bright_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* GamepadIcon; // 0x240
	UTextBlock* PromptText; // 0x248
	FText Prompt; // 0x250
	FName Action; // 0x268
	bool IsConfirmGamepad; // 0x270
	bool IsCancelGamepad; // 0x271
	FSlateColor FontColor; // 0x278
};

struct APrecomputedVisibilityOverrideVolume : AVolume {
	TArray<AActor*> OverrideVisibleActors; // 0x258
	TArray<AActor*> OverrideInvisibleActors; // 0x268
	TArray<FName> OverrideInvisibleLevels; // 0x278
};

struct UInterpCurveEdSetup : UObject {
	TArray<FCurveEdTab> Tabs; // 0x28
	int32_t ActiveTab; // 0x38
};

struct UKSTargetingDetailsWidget : UUserWidget {
	float CurrentDistance; // 0x238
};

struct UClothPhysicalMeshDataNv_Legacy : UClothPhysicalMeshDataBase_Legacy {
	TArray<float> MaxDistances; // 0xe0
	TArray<float> BackstopDistances; // 0xf0
	TArray<float> BackstopRadiuses; // 0x100
	TArray<float> AnimDriveMultipliers; // 0x110
};

struct UNavModifierComponent : UNavRelevantComponent {
	UNavArea* AreaClass; // 0xe0
	FVector FailsafeExtent; // 0xe8
	char bIncludeAgentHeight : 1; // 0xf4
};

struct UPointLightComponent : ULocalLightComponent {
	char bUseInverseSquaredFalloff : 1; // 0x350
	float LightFalloffExponent; // 0x354
	float SourceRadius; // 0x358
	float SoftSourceRadius; // 0x35c
	float SourceLength; // 0x360
};

struct UWBP_Player_Card_Social_Entry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_Social_Accordian_Header_C* Header; // 0x528
	UWidgetSwitcher* MainSwitcher; // 0x530
	UWBP_player_card_module_C* PlayerCard; // 0x538
	USizeBox* PlayerCardContainer; // 0x540
	FMulticastInlineDelegate OnClicked; // 0x548
	UKSDataSocialPlayer* CurrentData; // 0x558
};

struct AKSDropshipBase : AActor {
	USceneComponent* DefaultSceneRoot; // 0x220
	USceneComponent* SharedRoot; // 0x228
	UStaticMeshComponent* PlaneBase; // 0x230
	UChildActorComponent* EnvironmentStaticMesh; // 0x238
	UChildActorComponent* NoFireZone; // 0x240
	UChildActorComponent* OutOfBoundsVolume; // 0x248
	UStaticMeshComponent* DoorCollider; // 0x250
	USceneComponent* DropshipInteriorRoot; // 0x258
	UChildActorComponent* DropshipInteriorGeometry; // 0x260
	UChildActorComponent* DropshipInteriorLights; // 0x268
	USceneComponent* DropshipExteriorRoot; // 0x270
	UChildActorComponent* DropshipExteriorGeometry; // 0x278
	UChildActorComponent* FreeFallHeightMarker; // 0x280
	UChildActorComponent* PlayerShopZone; // 0x288
	UChildActorComponent* DropshipExitZone; // 0x290
	UChildActorComponent* DropshipModZone; // 0x298
	UChildActorComponent* KSPlayerStart_01; // 0x2a0
	UChildActorComponent* KSPlayerStart_02; // 0x2a8
	UChildActorComponent* KSPlayerStart_03; // 0x2b0
	UChildActorComponent* KSPlayerStart_04; // 0x2b8
	UChildActorComponent* KSPlayerStart_05; // 0x2c0
	UChildActorComponent* KSPlayerStart_06; // 0x2c8
	UChildActorComponent* KSPlayerStart_07; // 0x2d0
	UChildActorComponent* KSPlayerStart_08; // 0x2d8
	UChildActorComponent* BotFactory; // 0x2e0
	UBoxComponent* PlayerDetectionVolume; // 0x2e8
	UKSDistanceOptimizationComponent* KSDistanceOptimization; // 0x2f0
	int32_t DropshipSideNumber; // 0x2f8
	bool bOutOfBoundsEnabled; // 0x2fc
	float OutOfBoundsMaxScale; // 0x300
	float OutOfBoundsInitialScale; // 0x304
	float OutOfBoundsStartSeconds; // 0x308
	bool bDoorOpen; // 0x30c
	bool bCloaked; // 0x30d
	TArray<APlayerStart*> InitialPlayerStarts; // 0x310
	AKSDropshipInterior* DropshipInteriorVar; // 0x320
	AKSDropshipLights* DropshipInteriorLightsVar; // 0x328
	AKSDropshipExterior* DropshipExteriorVar; // 0x330
	bool bShouldReverseWayPointSetDirection; // 0x358
	AKSWayPointSet* WayPointSet; // 0x360
	UKSBotDefinitionCollection* BotSpawnCollection; // 0x368
};

struct USourceEffectPannerPreset : USoundEffectSourcePreset {
	FSourceEffectPannerSettings Settings; // 0x70
};

struct UWBP_ActiveMissionPanel_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWBP_EventMissionItem_C* ActiveMission_4; // 0x4c8
	UImage* ActiveMission_Bar_7; // 0x4d0
	UImage* ActiveMission_Bar_8; // 0x4d8
	UImage* Border; // 0x4e0
	UImage* Btn_Fill_7; // 0x4e8
	UImage* Btn_Fill_8; // 0x4f0
	UImage* Btn_HoverStroke_7; // 0x4f8
	UImage* Btn_HoverStroke_8; // 0x500
	UImage* Btn_Stroke_7; // 0x508
	UImage* Btn_Stroke_8; // 0x510
	UOverlay* ButtonBackground_7; // 0x518
	UOverlay* ButtonBackground_8; // 0x520
	UImage* chevron; // 0x528
	UImage* chevron_2; // 0x530
	UHorizontalBox* ChooseActiveMissionWrapper; // 0x538
	UWBP_KeyCallout_C* ChooseMissionCallout; // 0x540
	UImage* Completed_7; // 0x548
	UImage* Completed_8; // 0x550
	UWBP_PanelInteractive_C* MissionPanel; // 0x558
	UWidgetSwitcher* PromptSwitcher; // 0x560
	UImage* RunwayPortrait; // 0x568
	UImage* ScanLines; // 0x570
	UWidgetSwitcher* StatusSwitcher_4; // 0x578
	FMulticastInlineDelegate OnPanelClicked; // 0x580
};

struct UKSPartyDataFactory : UPUMG_PartyDataFactory {
	FMulticastInlineDelegate OnEmoteMessageReceived; // 0x1b0
};

struct UInterpTrackMoveAxis : UInterpTrackFloatBase {
	EInterpMoveAxis MoveAxis; // 0x90
	FInterpLookupTrack LookupTrack; // 0x98
};

struct UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase {
	float UnitScalar; // 0x38
	float MovementTolerance; // 0x3c
	FRawDistributionFloat SpawnPerUnit; // 0x40
	float MaxFrameDistance; // 0x70
	char bIgnoreSpawnRateWhenMoving : 1; // 0x74
	char bIgnoreMovementAlongX : 1; // 0x74
	char bIgnoreMovementAlongY : 1; // 0x74
	char bIgnoreMovementAlongZ : 1; // 0x74
};

struct UParticleModuleLocationPrimitiveBase : UParticleModuleLocationBase {
	char Positive_X : 1; // 0x30
	char Positive_Y : 1; // 0x30
	char Positive_Z : 1; // 0x30
	char Negative_X : 1; // 0x30
	char Negative_Y : 1; // 0x30
	char Negative_Z : 1; // 0x30
	char SurfaceOnly : 1; // 0x30
	char Velocity : 1; // 0x30
	FRawDistributionFloat VelocityScale; // 0x38
	FRawDistributionVector StartLocation; // 0x68
};

struct USplineComponent : UPrimitiveComponent {
	FSplineCurves SplineCurves; // 0x430
	FInterpCurveVector SplineInfo; // 0x498
	FInterpCurveQuat SplineRotInfo; // 0x4b0
	FInterpCurveVector SplineScaleInfo; // 0x4c8
	FInterpCurveFloat SplineReparamTable; // 0x4e0
	bool bAllowSplineEditingPerInstance; // 0x4f8
	int32_t ReparamStepsPerSegment; // 0x4fc
	float Duration; // 0x500
	bool bStationaryEndpoints; // 0x504
	bool bSplineHasBeenEdited; // 0x505
	bool bModifiedByConstructionScript; // 0x506
	bool bInputSplinePointsToConstructionScript; // 0x507
	bool bDrawDebug; // 0x508
	bool bClosedLoop; // 0x509
	bool bLoopPositionOverride; // 0x50a
	float LoopPosition; // 0x50c
	FVector DefaultUpVector; // 0x510
};

struct APGame_Character : ACharacter {
	UPGame_EffectManagerComponent* m_EffectManager; // 0x4c8
	FTweenInfo r_TweenInfo; // 0x4d0
	FChargeInfo r_ChargeInfo; // 0x4e4
};

struct ULandscapeMaterialInstanceConstant : UMaterialInstanceConstant {
	TArray<FLandscapeMaterialTextureStreamingInfo> TextureStreamingInfo; // 0x410
	char bIsLayerThumbnail : 1; // 0x420
	char bDisableTessellation : 1; // 0x420
	char bMobile : 1; // 0x420
	char bEditorToolUsage : 1; // 0x420
};

struct UAnimSharingStateInstance : UAnimInstance {
	UAnimSequence* AnimationToPlay; // 0x268
	float PermutationTimeOffset; // 0x270
	float PlayRate; // 0x274
	bool bStateBool; // 0x278
	UAnimSharingInstance* Instance; // 0x280
};

struct UWBP_PlayerIdentity_Full_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UVerticalBox* LargeAvatarWrapper; // 0x528
	UWidgetSwitcher* NameLoadingSwitcher; // 0x530
	UScaleBox* NameLoadingWrapper; // 0x538
	UTextBlock* PlayerNameText; // 0x540
	UWBP_ThrobberHorizontal_C* PlayerNameThrobber; // 0x548
	UHorizontalBox* PlayerNameWrapper; // 0x550
	UWBP_RogueMasteryPortrait_C* RogueMasteryPortrait; // 0x558
	UCanvasPanel* RogueMasteryWrapper; // 0x560
	USizeBox* SmallAvatarWrapper; // 0x568
	USizeBox* TitleWrapper; // 0x570
	UWBP_PlayerIdentity_Avatar_C* WBP_PlayerIdentity_Avatar; // 0x578
	UWBP_PlayerIdentity_Avatar_C* WBP_PlayerIdentity_Avatar_339; // 0x580
	UWBP_PlayerIdentity_Banner_C* WBP_PlayerIdentity_Banner; // 0x588
	UWBP_PlayerIdentity_PlayerLevel_C* WBP_PlayerIdentity_PlayerLevel; // 0x590
	UWBP_PlayerIdentity_Title_C* WBP_PlayerIdentity_Title; // 0x598
	EPlayerIdentityLayoutType LayoutType; // 0x5a0
	UKSPlayerInfo* Bound Player Info; // 0x5a8
	EHorizontalAlignment NameHorizontalAlignment; // 0x5b0
	AKSPlayerState* Bound Player State; // 0x5b8
	bool UseLocalLoadoutData; // 0x5c0
};

struct UWeaponCollection : UItemCollection {
	FText WeaponCollectionName; // 0x98
	FText WeaponCollectionDescription; // 0xb0
};

struct UPhysicsSpringComponent : USceneComponent {
	float SpringStiffness; // 0x208
	float SpringDamping; // 0x20c
	float SpringLengthAtRest; // 0x210
	float SpringRadius; // 0x214
	ECollisionChannel SpringChannel; // 0x218
	bool bIgnoreSelf; // 0x219
	float SpringCompression; // 0x21c
};

struct UParticleSystemComponent : UFXSystemComponent {
	UParticleSystem* Template; // 0x430
	TArray<UMaterialInterface*> EmitterMaterials; // 0x438
	TArray<USkeletalMeshComponent*> SkelMeshComponents; // 0x448
	char bRenderAfterDLSS : 1; // 0x459
	char bResetOnDetach : 1; // 0x459
	char bUpdateOnDedicatedServer : 1; // 0x459
	char bAllowRecycling : 1; // 0x459
	char bAutoManageAttachment : 1; // 0x459
	char bAutoAttachWeldSimulatedBodies : 1; // 0x459
	char bWarmingUp : 1; // 0x45a
	char bOverrideLODMethod : 1; // 0x45a
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x45a
	ParticleSystemLODMethod LODMethod; // 0x465
	EParticleSignificanceLevel RequiredSignificance; // 0x466
	TArray<FParticleSysParam> InstanceParameters; // 0x468
	FMulticastInlineDelegate OnParticleSpawn; // 0x478
	FMulticastInlineDelegate OnParticleBurst; // 0x488
	FMulticastInlineDelegate OnParticleDeath; // 0x498
	FMulticastInlineDelegate OnParticleCollide; // 0x4a8
	FMulticastInlineDelegate OnParticleCollidePacked; // 0x4b8
	FParticleChannelContainer m_ParticleChannels; // 0x4c8
	bool bOldPositionValid; // 0x4cc
	FVector OldPosition; // 0x4d0
	FVector PartSysVelocity; // 0x4dc
	float WarmupTime; // 0x4e8
	float WarmupTickRate; // 0x4ec
	float SecondsBeforeInactive; // 0x4f4
	float MaxTimeBeforeForceUpdateTransform; // 0x4fc
	TArray<UParticleSystemReplay*> ReplayClips; // 0x520
	float CustomTimeDilation; // 0x538
	TWeakObjectPtr<USceneComponent> AutoAttachParent; // 0x590
	FName AutoAttachSocketName; // 0x598
	EAttachmentRule AutoAttachLocationRule; // 0x5a0
	EAttachmentRule AutoAttachRotationRule; // 0x5a1
	EAttachmentRule AutoAttachScaleRule; // 0x5a2
	FMulticastInlineDelegate OnSystemFinished; // 0x5d0
};

struct UEnvQueryGenerator_SimpleGrid : UEnvQueryGenerator_ProjectedPoints {
	FAIDataProviderFloatValue GridSize; // 0x80
	FAIDataProviderFloatValue SpaceBetween; // 0xb8
	UEnvQueryContext* GenerateAround; // 0xf0
};

struct AGeometryCacheActor : AActor {
	UGeometryCacheComponent* GeometryCacheComponent; // 0x220
};

struct UKSGameShopItemComponent : UActorComponent {
	FName Category; // 0xb0
	int32_t ID; // 0xb8
	TArray<UKSItem*> InitialItems; // 0xc0
	FMulticastInlineDelegate OnItemsChanged; // 0xd0
	TArray<UKSItem*> Items; // 0xe0
	FMulticastInlineDelegate OnShopItemPurchased; // 0xf0
	FMulticastInlineDelegate OnShopItemRefunded; // 0x100
	int32_t AuthoratativeIndex; // 0x110
	int32_t AppliedIndex; // 0x118
};

struct ANavMeshBoundsVolume : AVolume {
	FNavAgentSelector SupportedAgents; // 0x258
};

struct UKSScreenLogWidget : UKSWidget {
	UDataTable* ContextualPingTypesDT; // 0x520
	UDataTable* ContextualPingMessagesDT; // 0x528
};

struct UPhysicsHandleComponent : UActorComponent {
	UPrimitiveComponent* GrabbedComponent; // 0xb0
	char bSoftAngularConstraint : 1; // 0xc0
	char bSoftLinearConstraint : 1; // 0xc0
	char bInterpolateTarget : 1; // 0xc0
	float LinearDamping; // 0xc4
	float LinearStiffness; // 0xc8
	float AngularDamping; // 0xcc
	float AngularStiffness; // 0xd0
	float InterpolationSpeed; // 0x140
};

struct URejoinCheck : UObject {
	ERejoinStatus LastKnownStatus; // 0x28
	bool bRejoinAfterCheck; // 0x29
	bool bAttemptingRejoin; // 0x2a
};

struct UNearMissCurveComponent_C : UKSNearMissComponent {
	FPointerToUberGraphFrame UberGraphFrame; // 0x130
};

struct UStaticMeshSimulationComponent : UActorComponent {
	bool Simulating; // 0xb8
	bool bNotifyCollisions; // 0xb9
	EObjectStateTypeEnum ObjectType; // 0xba
	float Mass; // 0xbc
	ECollisionTypeEnum CollisionType; // 0xc0
	EImplicitTypeEnum ImplicitType; // 0xc1
	int32_t MinLevelSetResolution; // 0xc4
	int32_t MaxLevelSetResolution; // 0xc8
	EInitialVelocityTypeEnum InitialVelocityType; // 0xcc
	FVector InitialLinearVelocity; // 0xd0
	FVector InitialAngularVelocity; // 0xdc
	float DamageThreshold; // 0xe8
	UChaosPhysicalMaterial* PhysicalMaterial; // 0xf0
	AChaosSolverActor* ChaosSolverActor; // 0xf8
	FMulticastInlineDelegate OnChaosPhysicsCollision; // 0x100
	TArray<UPrimitiveComponent*> SimulatedComponents; // 0x120
};

struct UWBP_LoginRewardsGrid_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UUniformGridPanel* RewardGrid; // 0x528
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_1; // 0x530
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_2; // 0x538
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_3; // 0x540
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_4; // 0x548
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_5; // 0x550
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_6; // 0x558
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_7; // 0x560
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_8; // 0x568
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_9; // 0x570
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_10; // 0x578
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_11; // 0x580
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_12; // 0x588
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_13; // 0x590
	UWBP_LoginRewardItem_C* WBP_LoginRewardItem_C_14; // 0x598
	int32_t MaxPerRow; // 0x5a0
	FMulticastInlineDelegate OnClaimRewardAnimComplete; // 0x5a8
	TArray<UWBP_LoginRewardItem_C*> LoginRewardItems; // 0x5b8
	FMulticastInlineDelegate OnRewardItemsPopulated; // 0x5c8
	FMulticastInlineDelegate OnRewardHovered; // 0x5d8
	FMulticastInlineDelegate OnRewardUnhovered; // 0x5e8
	FMulticastInlineDelegate OnRewardClicked; // 0x5f8
};

struct UKSBTD_CheckRole : UBTDecorator {
	TArray<ECharacterRole> RequiredRoles; // 0x68
	bool RequireAll; // 0x78
};

struct UKSInteractionType : UObject {
	FName InteractionMode; // 0x28
	bool bInteractionStartsCameraLockout; // 0x30
	FSkinnableAudioEvent CharacterStartSound; // 0x38
	FSkinnableAudioEvent InteractableStartSound; // 0x48
	FSkinnableAudioEvent LocalStartSound; // 0x58
	TMap<EKSInteractionResult, FSkinnableAudioEvent> CharacterEndSound; // 0x68
	TMap<EKSInteractionResult, FSkinnableAudioEvent> InteractableEndSound; // 0xb8
	TMap<EKSInteractionResult, FSkinnableAudioEvent> LocalEndSound; // 0x108
	bool bAutomaticallyPlayAudio; // 0x158
	bool bAttachCharacterAutoAudioToSource; // 0x159
	bool bAttachInteractableAutoAudioToSource; // 0x15a
	FKSParticleSystemAttachment CharacterStartEffect; // 0x160
	FKSParticleSystemAttachment InteractableStartEffect; // 0x198
	TMap<EKSInteractionResult, FKSParticleSystemAttachment> CharacterEndEffect; // 0x1d0
	TMap<EKSInteractionResult, FKSParticleSystemAttachment> InteractableEndEffect; // 0x220
	TWeakObjectPtr<UParticleSystemComponent> CurrentCharacterEffect; // 0x270
	TWeakObjectPtr<UParticleSystemComponent> CurrentInteractableEffect; // 0x278
	FName StartInteractionMontageRow; // 0x280
	TMap<EKSInteractionResult, FName> EndInteractionMontageSection; // 0x288
	TMap<EKSInteractionResult, FName> EndInteractionMontageRow; // 0x2d8
};

struct UMaterialExpressionMaterialAttributeLayers : UMaterialExpression {
	FName ParameterName; // 0x40
	FGuid ExpressionGUID; // 0x48
	FMaterialAttributesInput Input; // 0x58
	FMaterialLayersFunctions DefaultLayers; // 0x70
	TArray<UMaterialExpressionMaterialFunctionCall*> LayerCallers; // 0xb0
	int32_t NumActiveLayerCallers; // 0xc0
	TArray<UMaterialExpressionMaterialFunctionCall*> BlendCallers; // 0xc8
	int32_t NumActiveBlendCallers; // 0xd8
	bool bIsLayerGraphBuilt; // 0xdc
};

struct UAsyncActionLoadPrimaryAssetList : UAsyncActionLoadPrimaryAssetBase {
	FMulticastInlineDelegate Completed; // 0x78
};

struct UKSWeaponAttachment_Silencer : UKSWeaponAttachment {
	float AudibleRange; // 0x2f8
	bool bModifyFalloffRange; // 0x2fc
	float FalloffRangeMultiplier; // 0x300
};

struct UScrollBoxWidgetStyle : USlateWidgetStyleContainerBase {
	FScrollBoxStyle ScrollBoxStyle; // 0x30
};

struct UAnimBlueprint : UBlueprint {
	USkeleton* TargetSkeleton; // 0xa8
	TArray<FAnimGroupInfo> Groups; // 0xb0
	bool bUseMultiThreadedAnimationUpdate; // 0xc0
	bool bWarnAboutBlueprintUsage; // 0xc1
};

struct UMaterialExpressionConstant : UMaterialExpression {
	float R; // 0x40
};

struct ANiagaraActor : AActor {
	UNiagaraComponent* NiagaraComponent; // 0x220
	char bDestroyOnSystemFinish : 1; // 0x228
};

struct UWBP_PurchasedTransition_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* PurchasedIntro; // 0x528
	UImage* BackgroundFlare; // 0x530
	UBorder* BackgroundFlare_ColorWrapper; // 0x538
	UImage* BannerFlare; // 0x540
	UImage* BoxBack; // 0x548
	UImage* CenterGradient; // 0x550
	UImage* CenterShimmer; // 0x558
	UImage* DiamondBase; // 0x560
	UImage* DiamondBlur; // 0x568
	UBorder* DiamondInterior_ColorWrapper; // 0x570
	UImage* EdgeGlow; // 0x578
	UImage* EdgeGlow_2; // 0x580
	UImage* Glitch_Center; // 0x588
	UBorder* GlitchCenter_ColorWrapper; // 0x590
	UBorder* GlowBanner_ColorWrapper; // 0x598
	UWBP_AdditiveImage_C* glowLine; // 0x5a0
	UWBP_AdditiveImage_C* glowLine_3; // 0x5a8
	UImage* PrimaryBannerShade; // 0x5b0
	UTextBlock* PrimaryBannerText; // 0x5b8
	UWBP_AdditiveImage_C* ScanLines; // 0x5c0
	UWBP_AdditiveImage_C* ScanLines_3; // 0x5c8
	UImage* Section1; // 0x5d0
	UImage* Section2; // 0x5d8
	UImage* Section3; // 0x5e0
	UImage* Section4; // 0x5e8
	UImage* Section5; // 0x5f0
	UImage* Section6; // 0x5f8
	UImage* SheenLeft; // 0x600
	UImage* SheenRight; // 0x608
	UImage* ShieldLogo_2; // 0x610
	UImage* VictoryDefeatGlow; // 0x618
	UImage* VictoryDefeatGlow_2; // 0x620
	UImage* VictoryDefeatGlow_Pulse; // 0x628
	UImage* VictoryDefeatGlow_Pulse_2; // 0x630
	float TickTime; // 0x638
	FMulticastInlineDelegate TransitionFinished; // 0x640
	UKSAcquisition* Acquisition; // 0x650
};

struct UMovieSceneVectorTrack : UMovieScenePropertyTrack {
	int32_t NumChannelsUsed; // 0x88
};

struct UMaterialExpressionDeriveNormalZ : UMaterialExpression {
	FExpressionInput InXY; // 0x40
};

struct UViewDependentAkAudioEvent : USelectiveAkAudioEvent {
	UViewDependentAkEventRules* Rules; // 0x28
	UAkAudioEvent* FirstPersonAkEventPlay; // 0x30
	UAkAudioEvent* ThirdPersonAkEventPlay; // 0x38
	UAkAudioEvent* FirstPersonAkEventStop; // 0x40
	UAkAudioEvent* ThirdPersonAkEventStop; // 0x48
};

struct AOnlineBeaconHostObject : AActor {
	FString BeaconTypeName; // 0x220
	AOnlineBeaconClient* ClientBeaconActorClass; // 0x230
	TArray<AOnlineBeaconClient*> ClientActors; // 0x238
};

struct UDialogueVoice : UObject {
	EGrammaticalGender Gender; // 0x28
	EGrammaticalNumber Plurality; // 0x29
	FGuid LocalizationGUID; // 0x2c
};

struct USizeBoxSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x58
	EVerticalAlignment VerticalAlignment; // 0x59
};

struct USub_Hero_ABP_PowerSlide_C : UKSCharacterAnimInst {
	FAnimNode_Root AnimGraphNode_Root; // 0x10f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_10; // 0x1130
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_9; // 0x1168
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8; // 0x11a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_7; // 0x11d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_6; // 0x1210
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_5; // 0x1248
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x1280
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x12b8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5; // 0x12f0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_5; // 0x1378
	FAnimNode_StateResult AnimGraphNode_StateResult_7; // 0x14d8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x1518
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_4; // 0x15a0
	FAnimNode_StateResult AnimGraphNode_StateResult_6; // 0x1700
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x1740
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_3; // 0x17c8
	FAnimNode_StateResult AnimGraphNode_StateResult_5; // 0x1928
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_2; // 0x1968
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x1ac8
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x1b50
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x1b90
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x1c18
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x1d78
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0x1db8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x1e78
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x1eb0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_6; // 0x1ee8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_6; // 0x1f18
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_5; // 0x2030
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_4; // 0x2148
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_6; // 0x2260
	FKSAnimNode_SpeedWarp KSAnimGraphNode_SpeedWarp_2; // 0x2290
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_15; // 0x23c0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_15; // 0x24b0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_14; // 0x26b0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_14; // 0x27a0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_13; // 0x29a0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_13; // 0x2a90
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_12; // 0x2c90
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_12; // 0x2d80
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_11; // 0x2f80
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_11; // 0x3070
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_10; // 0x3270
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_10; // 0x3360
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_9; // 0x3560
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_9; // 0x3650
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8; // 0x3850
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_8; // 0x3940
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_7; // 0x3b40
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_7; // 0x3c30
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_6; // 0x3e30
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_6; // 0x3f20
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_5; // 0x4120
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_5; // 0x4210
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_4; // 0x4410
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_4; // 0x4500
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_6; // 0x4700
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_5; // 0x47c0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_4; // 0x4880
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_3; // 0x4940
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_2; // 0x4a00
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_5; // 0x4ac0
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_4; // 0x4be0
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_3; // 0x4d00
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5; // 0x4e20
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4; // 0x4e50
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3; // 0x4e80
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2; // 0x4eb0
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_2; // 0x4ee0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5; // 0x5000
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4; // 0x5030
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3; // 0x5060
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2; // 0x5090
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x50c0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_3; // 0x5100
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_3; // 0x51f0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_2; // 0x53f0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_2; // 0x54e0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer; // 0x56e0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned; // 0x57d0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum; // 0x59d0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_3; // 0x5a90
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_2; // 0x5ba8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x5cc0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x5dd8
	FKSAnimNode_SpeedWarp KSAnimGraphNode_SpeedWarp; // 0x5e08
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp; // 0x5f38
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x6058
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x6088
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x60c8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x6188
	AKSCharacter* Character; // 0x6238
	bool bIsInPowerSlideBP; // 0x6240
	float ExitPowerSlideBlendTime; // 0x6244
	bool ForceResetSlide; // 0x6248
	EKSPowerSlideEndReason K2Node_Event_EndReason; // 0x6249
	bool K2Node_SwitchEnum_CmpSuccess; // 0x624a
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x6250
	bool K2Node_DynamicCast_bSuccess; // 0x6258
};

struct UAnimationAsset : UObject {
	USkeleton* Skeleton; // 0x38
	TArray<UAnimMetaData*> MetaData; // 0x60
	TArray<UAssetUserData*> AssetUserData; // 0x70
};

struct UDistributionVectorUniformCurve : UDistributionVector {
	FInterpCurveTwoVectors ConstantCurve; // 0x38
	char bLockAxes1 : 1; // 0x50
	char bLockAxes2 : 1; // 0x50
	EDistributionVectorLockFlags LockedAxes[0x2]; // 0x54
	EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x56
	char bUseExtremes : 1; // 0x5c
};

struct UMaterialExpressionDotProduct : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
};

struct ULiveLinkPreset : UObject {
	TArray<FLiveLinkSourcePreset> Sources; // 0x28
	TArray<FLiveLinkSubjectPreset> Subjects; // 0x38
};

struct UKSActivityRewardCondition_CachedValue : UKSActivityRewardCondition {
	float MinValue; // 0x30
	float MaxValue; // 0x34
	FString Key; // 0x38
	bool CheckPlayerCache; // 0x48
};

struct UKSSpray : UKSEmote {
	TSoftObjectPtr<UKSActivity> StatTrackingActivity; // 0x320
};

struct UKSWidgetInfoComponent : UActorComponent {
	TArray<FKSWidgetInfoParams> WidgetParamsToCreate; // 0xb0
};

struct UGameSessionSettings : UObject {
	int32_t MaxSpectators; // 0x28
	int32_t MaxPlayers; // 0x2c
	char bRequiresPushToTalk : 1; // 0x30
};

struct AKSGameState : APGame_GameState {
	int32_t RandomSessionSeed; // 0x2a8
	FMulticastInlineDelegate OnTeamCinematicSequenceSkippedDel; // 0x2d0
	FKSPlayerIdentitiesContainer PlayerIdentitiesContainer; // 0x2f0
	TMap<uint64_t, TWeakObjectPtr<AKSLagCompensatedActor>> PredictedActors; // 0x410
	EKillCamStatus KillCamStatus; // 0x470
	float KillCamRecordingSecondsToKeep; // 0x474
	APawn* KillCamFocusPawn; // 0x478
	APawn* KillCamSecondaryFocusPawn; // 0x488
	AActor* KillCamFocusSpecial; // 0x498
	float KillCamTime; // 0x4a4
	FMulticastInlineDelegate OnGameDisplayInfo; // 0x4c0
	FMulticastInlineDelegate OnRemoveGameDisplayInfo; // 0x4d0
	FMulticastInlineDelegate OnPhaseChangeDel; // 0x548
	FMulticastInlineDelegate OnSetupStartDel; // 0x558
	FMulticastInlineDelegate OnSetupEndDel; // 0x568
	FMulticastInlineDelegate OnExpectedPhaseCountChanged; // 0x578
	FMulticastInlineDelegate OnTimerSecondTick; // 0x588
	FMatchPhase MatchPhase; // 0x598
	int32_t ExpectedPhaseCount; // 0x5ac
	float ExpectedTimeForRemainingPhases; // 0x5b0
	FMatchPhase PreviousPhase; // 0x5b4
	bool bHasProcessedMatchStarted; // 0x5c8
	FPGame_ReplicatedTimer ReplicatedMatchTimer; // 0x618
	bool bCharacterBodiesPersistAfterDeath; // 0x65c
	float SecondsForCharacterBodiesToPersistAfterDeath; // 0x660
	float SecondsToViewBodyAfterDeath; // 0x664
	FMulticastInlineDelegate OnPlayerDeath; // 0x668
	FMulticastInlineDelegate OnPlayerDown; // 0x678
	FMulticastInlineDelegate OnRadialMenuItemUse; // 0x688
	FMulticastInlineDelegate OnPlayerSpawn; // 0x698
	FMulticastInlineDelegate OnPlayerRevive; // 0x6a8
	FMulticastInlineDelegate OnWinnerSet; // 0x6b8
	FMulticastInlineDelegate OnPlayerAssist; // 0x6c8
	FMulticastInlineDelegate OnLastManStanding; // 0x6d8
	FMulticastInlineDelegate OnUIRelevantPlayerStateChangedDel; // 0x6e8
	float DefaultMinimapWidth; // 0x6f8
	FMulticastInlineDelegate OnTeamAdded; // 0x700
	FMulticastInlineDelegate OnTeamRemoved; // 0x710
	FMulticastInlineDelegate OnTeamCelebrateDel; // 0x720
	TArray<UKSAccoladeTracker*> AccoladeTrackerClasses; // 0x730
	AKSMiniMapAssistant* MiniMapAssistant; // 0x758
	TMap<int32_t, AKSTeamState*> teams; // 0x760
	FCombatEventList CombatEventList; // 0x7b8
	FRadialMenuItemEventList RadialMenuItemEventList; // 0x840
	FAssistEventList AssistEventList; // 0x8c8
	FReviveEventList ReviveEventList; // 0x950
	FMulticastInlineDelegate OnTeamEliminatedDel; // 0x9d8
	FMulticastInlineDelegate OnTeamEliminatedOrDownedDel; // 0x9e8
	FMulticastInlineDelegate OnPlayerEliminatedDel; // 0x9f8
	FMulticastInlineDelegate OnPlayerDownedChangedDel; // 0xa08
	FMulticastInlineDelegate OnAttackingTeamUpdated; // 0xa18
	FMulticastInlineDelegate OnDisplayCashChanged; // 0xa28
	bool bDisplayCash; // 0xa38
	int32_t CashPerDown; // 0xa3c
	FText DownDescription; // 0xa40
	int32_t CashPerAssist; // 0xa58
	FText AssistDescription; // 0xa60
	int32_t CashPerRevive; // 0xa78
	FText ReviveDescription; // 0xa80
	int32_t CashPerElim; // 0xa98
	FText EliminationDescription; // 0xaa0
	int32_t CashPerSuicide; // 0xab8
	FText SuicideDescription; // 0xac0
	TMap<UKSDamageTypeBase*, int32_t> CashPerDeployableDestroyed; // 0xad8
	FString MercSelectSubLevel; // 0xb28
	TArray<FString> ActiveCinematicSubLevelNames; // 0xb38
	AKSCinematicSequenceManager* ActiveCinematicSequenceManager; // 0xb48
	FMulticastInlineDelegate OnTeamSidesFlipped; // 0xb50
	TArray<int32_t> TierUnlockThresholds; // 0xb60
	float MaxMarkerDistanceForCommonLoot; // 0xb70
	EKSGameTicketDisplayType ObjectiveTicketDisplayType; // 0xb74
	TArray<AKSLootSiteBase*> WorldLootSites; // 0xe18
	TArray<AKSObjectiveBase*> WorldObjectives; // 0xe28
	TArray<AKSFlightPoint*> WorldFlightPoints; // 0xe38
	TArray<AKSDestructibleBase*> WorldDestructibles; // 0xe48
	TArray<AKSItemDrop*> WorldDrops; // 0xe58
	TArray<AKSProjectile*> WorldProjectiles; // 0xe68
	TArray<AKSCharacter*> WorldCharacters; // 0xe78
	TArray<UKSHeatSourceComponent*> WorldHeatSources; // 0xe88
	TArray<TScriptInterface<IKSDestroyableHazard>> WorldHazards; // 0xe98
	TArray<AKSWayPointSet*> WorldWayPointSets; // 0xea8
	TArray<AKSOutOfBoundsRecoveryPoint*> WorldRecoveryPoints; // 0xeb8
	TArray<AKSAnnouncer*> WorldAnnouncers; // 0xec8
	TArray<AKSPlayerShop*> WorldPlayerShops; // 0xed8
	TArray<AKSRoyaleSafeZone*> WorldRoyaleZones; // 0xee8
	TArray<FInitialGameObjectiveInfo> InitialGameObjectiveInfos; // 0xef8
	FMulticastInlineDelegate OnHUDTimerPrioritiesChangedDel; // 0xf08
	FMulticastInlineDelegate OnMarkerTimerPrioritiesChangedDel; // 0xf18
	FKSTimerPriorityConfig HUDTimerPriorityConfig; // 0xf28
	TMap<EGameTimerType, EKSPriority> HUDTimerPriorityMap; // 0xf30
	FKSTimerPriorityConfig MarkerTimerPriorityConfig; // 0xf80
	TMap<EGameTimerType, EKSPriority> MarkerTimerPriorityMap; // 0xf88
	FMulticastInlineDelegate OnGameObjectiveRegistered; // 0xfd8
	FMulticastInlineDelegate OnGameObjectiveTransfered; // 0xfe8
	FMulticastInlineDelegate OnGameObjectiveUnregistered; // 0xff8
	FMulticastInlineDelegate OnGameObjectiveStateChanged; // 0x1008
	FMulticastInlineDelegate OnGameObjectiveTimerActive; // 0x1018
	FMulticastInlineDelegate OnGameObjectiveTimerComplete; // 0x1028
	FMulticastInlineDelegate OnGameObjectiveTimerTick; // 0x1038
	TMap<int32_t, TScriptInterface<IKSObjective>> GameObjectives; // 0x1058
	FMulticastInlineDelegate OnHeatSourceAdded; // 0x10a8
	FMulticastInlineDelegate OnHeatSourceRemoved; // 0x10b8
	TArray<AActor*> WorldDeployables; // 0x10c8
	bool bDestroyDeployableOnInstigatorDeath; // 0x10d8
	FMulticastInlineDelegate OnItemDropAdded; // 0x10e0
	float ItemDropLifeSpan; // 0x10f0
	bool bShouldOffsetWeaponDrops; // 0x10f4
	float ProjectileLifeSpan; // 0x10f8
	TArray<TScriptInterface<IKSSkyDiveListener>> SkyDiveListeners; // 0x1100
	TArray<AKSCharacter*> SkyDivers; // 0x1110
	FText PresenceDisplayText; // 0x11a8
	FString PresenceKey; // 0x11c0
	UKSTimerComponent* WaveRespawnTimer; // 0x11d8
	TArray<FKSLootRarityTimerPair> LootRarityTimerPairs; // 0x11e0
	TMap<ELootSiteRarity, UKSTimerComponent*> LootRarityTimerMap; // 0x11f0
	FMulticastInlineDelegate OnLootRespawnTimerTick; // 0x1240
	FMulticastInlineDelegate OnLootRespawnTimerActive; // 0x1250
	FMulticastInlineDelegate OnAccoladeDisplay; // 0x1260
	FAccoladeEventList AccoladeEventList; // 0x1270
	bool bBlockWeaponFiring; // 0x12f8
	float HealthGate; // 0x12fc
	bool bPreserveReserveAmmo; // 0x1300
	bool bInfiniteAmmo; // 0x1301
	bool bShowHUDObjectiveRoles; // 0x1302
	bool bShowHUDObjectiveRoleBeforeJobSelect; // 0x1303
	bool bInvertHUDObjectiveRoles; // 0x1304
	FKSGameHUDSettings GameModeHUDSettings; // 0x1308
	bool bPlayersShouldSpectateDefaultCamera; // 0x1320
	bool bShowingPreviewActorSubLevel; // 0x1321
	bool bPreviewActorsEnabled; // 0x1322
	FMulticastInlineDelegate OnDynamicDestroyPreviewActorsDel; // 0x1370
	FMulticastInlineDelegate OnDynamicDisablePreviewActorsDel; // 0x1380
	FMulticastInlineDelegate OnDynamicEnablePreviewActorsDel; // 0x1390
	FMulticastInlineDelegate OnCinematicSubLevelEnabled; // 0x13a0
	FMulticastInlineDelegate OnCinematicSubLevelDisabled; // 0x13b0
	FMulticastInlineDelegate OnSetNumDebugCinematicRogues; // 0x13c0
	int32_t NumDebugCinematicRogues; // 0x13d4
	TArray<FName> AlwaysIncludedClientBundles; // 0x13d8
	TArray<FName> AlwaysIncludedServerBundles; // 0x13e8
	FReplicatedPreloader Preloader; // 0x13f8
	bool bPostSelectionCinematicDisabled; // 0x15d8
	bool bForceAllowLeaveMatchButton; // 0x15d9
	FKSPersistentMinPlayerDataContainer PersistentPlayerDataContainer; // 0x15e0
	FMulticastInlineDelegate OnPersistentPlayerDataCreatedDel; // 0x17f0
	AKSPersistentDataReplicator* PersistentDataReplicator; // 0x1868
	int32_t FriendlyFireKillPenalty; // 0x1870
	int32_t FriendlyFireDownPenalty; // 0x1874
	bool bCanToggleScoreboard; // 0x1890
	bool bMatchEndedInSurrender; // 0x18a8
	AKSTeamState* SurrenderWinningTeam; // 0x18b0
	TArray<TWeakObjectPtr<AActor>> StimulusSourceObjects; // 0x18b8
	TMap<FName, FString> HUDComponentPropMap; // 0x18c8
	UKSHUDAnnouncementComponent* HUDAnnouncementComponentClass; // 0x1918
	AKSEmoteMusicManager* EmoteMusicManagerClass; // 0x1920
	AKSEmoteMusicManager* EmoteMusicManager; // 0x1928
	TArray<FName> ActiveCinematicState; // 0x1930
	UKSCinematicDataContainer* CinematicDataContainer; // 0x1968
	UKSMVPDeterminant* MVPDeterminant; // 0x1970
	UKSWayPointSetCollection* WayPointSetCollection; // 0x1978
	FMulticastInlineDelegate OnJobSelectionTypeChanged; // 0x1980
	bool bAllowPlayersToReselectJob; // 0x1990
	EJobSelectionType JobSelectionType; // 0x1991
	TMap<FString, float> ActivityBehaviorCache; // 0x1998
};

struct UKSDataBatchInviteSetup : UKSDataMassInviteBase {
	FDelegate OnSelect; // 0x78
};

struct UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass {
	TArray<FBakedAnimationStateMachine> BakedStateMachines; // 0x330
	USkeleton* TargetSkeleton; // 0x340
	TArray<FAnimNotifyEvent> AnimNotifies; // 0x348
	TMap<FName, FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x358
	TArray<FName> SyncGroupNames; // 0x428
	TArray<FExposedValueHandler> EvaluateGraphExposedInputs; // 0x438
	TMap<FName, FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x448
	TMap<FName, FAnimGraphBlendOptions> GraphBlendOptions; // 0x498
};

struct UDatasmithMaterialInstanceTemplate : UDatasmithObjectTemplate {
	TSoftObjectPtr<UMaterialInterface> ParentMaterial; // 0x30
	TMap<FName, float> ScalarParameterValues; // 0x58
	TMap<FName, FLinearColor> VectorParameterValues; // 0xa8
	TMap<FName, TSoftObjectPtr<UTexture>> TextureParameterValues; // 0xf8
	FDatasmithStaticParameterSetTemplate StaticParameters; // 0x148
};

struct AInteractiveFoliageActor : AStaticMeshActor {
	UCapsuleComponent* CapsuleComponent; // 0x230
	FVector TouchingActorEntryPosition; // 0x238
	FVector FoliageVelocity; // 0x244
	FVector FoliageForce; // 0x250
	FVector FoliagePosition; // 0x25c
	float FoliageDamageImpulseScale; // 0x268
	float FoliageTouchImpulseScale; // 0x26c
	float FoliageStiffness; // 0x270
	float FoliageStiffnessQuadratic; // 0x274
	float FoliageDamping; // 0x278
	float MaxDamageImpulse; // 0x27c
	float MaxTouchImpulse; // 0x280
	float MaxForce; // 0x284
	float Mass; // 0x288
};

struct UWBP_StoreDiscountTag_C : UUserWidget {
	UImage* background; // 0x238
	UImage* Background_Dimmer; // 0x240
	UTextBlock* DiscountTag; // 0x248
	UImage* EndDecro; // 0x250
	UImage* GradientImage; // 0x258
};

struct UWBP_RadialMenuEntry_Divider_Highlight_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x240
};

struct UWBP_WeaponCategoryButton_C : UKSWeaponCategoryButton {
	FPointerToUberGraphFrame UberGraphFrame; // 0x558
	UWidgetAnimation* Anim_OnHover; // 0x560
	UImage* BG; // 0x568
	UWBP_AsyncIcon_C* CategoryIcon; // 0x570
	UTextBlock* CategoryNameText; // 0x578
	UWBP_WeaponCategoryMasteryBadge_C* ClassMasteryBadge; // 0x580
	UButton* HitTarget; // 0x588
	UImage* Image_126; // 0x590
	UTextBlock* MasteredLabel; // 0x598
	UImage* ProgressFill; // 0x5a0
	UImage* ProgressFill_BG; // 0x5a8
	USizeBox* ProgressMask; // 0x5b0
	UTextBlock* ProgressText; // 0x5b8
	UImage* SimpleHoverFrame; // 0x5c0
	UImage* Stroke; // 0x5c8
	UAkAudioEvent* HoverWEPCatButtonSFX; // 0x5d0
	UAkAudioEvent* ClickWEPCatButtonSFX; // 0x5d8
	UAkAudioEvent* GamePadConfirm_WEPCatButtonSFX; // 0x5e0
	UAkAudioEvent* GamePadConfirm_WEPCatButtonSFX_1; // 0x5e8
};

struct UWBP_player_card_module_C : UKSPlayerCardModuleBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x530
	UWidgetAnimation* Hover; // 0x538
	UBorder* CardBackground; // 0x540
	UOverlay* CardGroup; // 0x548
	UWidgetSwitcher* CardStyleSwitcher; // 0x550
	UOverlay* EmptyGroup; // 0x558
	UButton* HitTarget; // 0x560
	UWidgetSwitcher* HoverGroup; // 0x568
	UWidgetSwitcher* HoverGroup_Under; // 0x570
	UImage* Image_8; // 0x578
	UImage* Image_11; // 0x580
	UImage* Image_13; // 0x588
	UImage* Image_134; // 0x590
	UWBP_ControllerPrompt_C* LeftBackGamepadCallout; // 0x598
	UOverlay* LeftBackGroup; // 0x5a0
	UOverlay* LeftBackHoverGroup; // 0x5a8
	UOverlay* LeftBackHoverGroup_Under; // 0x5b0
	UWBP_ControllerPrompt_C* LeftBackHoverPrompt; // 0x5b8
	UOverlay* LeftHoverGroup; // 0x5c0
	UOverlay* LeftHoverGroup_Under; // 0x5c8
	UWBP_ControllerPrompt_C* LeftHoverPrompt; // 0x5d0
	UWBP_PlayerInfoDisplay_C* PlayerDisplay; // 0x5d8
	UImage* RedGradient; // 0x5e0
	UImage* RedGradient2; // 0x5e8
	UImage* RedGradient3; // 0x5f0
	UImage* RedGradient4; // 0x5f8
	UWBP_ControllerPrompt_C* RightBackGamepadCallout; // 0x600
	UOverlay* RightBackGroup; // 0x608
	UOverlay* RightBackHoverGroup; // 0x610
	UOverlay* RightBackHoverGroup_Under; // 0x618
	UWBP_ControllerPrompt_C* RightBackHoverPrompt; // 0x620
	UOverlay* RightHoverGroup; // 0x628
	UOverlay* RightHoverGroup_Under; // 0x630
	UWBP_ControllerPrompt_C* RightHoverPrompt; // 0x638
	FMulticastInlineDelegate OnPlayerClicked; // 0x640
	float ShowPlayerCardAnimationDuration; // 0x650
	float ShowAnimDelay; // 0x654
	FMulticastInlineDelegate OnNavigateLeftFailure; // 0x658
	FMulticastInlineDelegate OnNavigateRightFailure; // 0x668
	FMulticastInlineDelegate OnCardHovered; // 0x678
	bool CanShowPartyLeaderIcon; // 0x688
	UDataTable* StatusColors; // 0x690
	EPlayerCardStyle Player Card Style; // 0x698
	FMulticastInlineDelegate OnBackButton; // 0x6a0
	ELaterality ContextSide; // 0x6b0
	UPUMG_PlayerInfo* CurrentPlayerInfo; // 0x6b8
	EPlayerCardStyle DefaultState; // 0x6c0
	UAkAudioEvent* HoverPlayercardmoduleSFX; // 0x6c8
	FMulticastInlineDelegate OnPlayerUpdated; // 0x6d0
};

struct UProjectileMovementComponent : UMovementComponent {
	float InitialSpeed; // 0xf0
	float MaxSpeed; // 0xf4
	char bRotationFollowsVelocity : 1; // 0xf8
	char bRotationRemainsVertical : 1; // 0xf8
	char bShouldBounce : 1; // 0xf8
	char bInitialVelocityInLocalSpace : 1; // 0xf8
	char bForceSubStepping : 1; // 0xf8
	char bSimulationEnabled : 1; // 0xf8
	char bSweepCollision : 1; // 0xf8
	char bIsHomingProjectile : 1; // 0xf8
	char bBounceAngleAffectsFriction : 1; // 0xf9
	char bIsSliding : 1; // 0xf9
	char bInterpMovement : 1; // 0xf9
	char bInterpRotation : 1; // 0xf9
	float PreviousHitTime; // 0xfc
	FVector PreviousHitNormal; // 0x100
	float ProjectileGravityScale; // 0x10c
	float Buoyancy; // 0x110
	float Bounciness; // 0x114
	float Friction; // 0x118
	float BounceVelocityStopSimulatingThreshold; // 0x11c
	float MinFrictionFraction; // 0x120
	FMulticastInlineDelegate OnProjectileBounce; // 0x128
	FMulticastInlineDelegate OnProjectileStop; // 0x138
	float HomingAccelerationMagnitude; // 0x148
	TWeakObjectPtr<USceneComponent> HomingTargetComponent; // 0x14c
	float MaxSimulationTimeStep; // 0x154
	int32_t MaxSimulationIterations; // 0x158
	int32_t BounceAdditionalIterations; // 0x15c
	float InterpLocationTime; // 0x160
	float InterpRotationTime; // 0x164
	float InterpLocationMaxLagDistance; // 0x168
	float InterpLocationSnapToTargetDistance; // 0x16c
};

struct UKSActivityRewardCondition_FacingDirection : UKSActivityRewardCondition {
	float MaxAngle; // 0x30
	float MinAngle; // 0x34
	bool bCheckInstigator; // 0x38
	bool bCheckTarget; // 0x39
};

struct UKSAssetManagerSettings : UDeveloperSettings {
	bool bCookAndPackageActivities; // 0x38
	bool bCookAndPackageJobActivities; // 0x39
	bool bCookAndPackageWeaponActivities; // 0x3a
	int32_t ActiveContentProductionChunkId; // 0x3c
	int32_t ActiveMapProductionChunkId; // 0x40
};

struct URuntimeVirtualTextureStreamingProxy : UTexture2D {
	FVirtualTextureBuildSettings Settings; // 0xe8
	bool bSinglePhysicalSpace; // 0xf4
	uint32_t BuildHash; // 0xf8
};

struct UKSNavTabWidget : UKSWidget {
	FMulticastInlineDelegate OnNavTabSelected; // 0x520
	FMulticastInlineDelegate OnNavTabUnselected; // 0x530
	bool bSelected; // 0x540
	bool bDisabled; // 0x541
	FText NavText; // 0x548
};

struct UWBP_Header1_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Decro; // 0x240
	UTextBlock* Text; // 0x248
	FText TextValue; // 0x250
	ETextJustify Justification; // 0x268
};

struct UEnvQueryTest : UEnvQueryNode {
	int32_t TestOrder; // 0x30
	EEnvTestPurpose TestPurpose; // 0x34
	FString TestComment; // 0x38
	EEnvTestFilterOperator MultipleContextFilterOp; // 0x48
	EEnvTestScoreOperator MultipleContextScoreOp; // 0x49
	EEnvTestFilterType FilterType; // 0x4a
	FAIDataProviderBoolValue BoolValue; // 0x50
	FAIDataProviderFloatValue FloatValueMin; // 0x88
	FAIDataProviderFloatValue FloatValueMax; // 0xc0
	EEnvTestScoreEquation ScoringEquation; // 0xf9
	EEnvQueryTestClamping ClampMinType; // 0xfa
	EEnvQueryTestClamping ClampMaxType; // 0xfb
	EEQSNormalizationType NormalizationType; // 0xfc
	FAIDataProviderFloatValue ScoreClampMin; // 0x100
	FAIDataProviderFloatValue ScoreClampMax; // 0x138
	FAIDataProviderFloatValue ScoringFactor; // 0x170
	FAIDataProviderFloatValue ReferenceValue; // 0x1a8
	bool bDefineReferenceValue; // 0x1e0
	char bWorkOnFloatValues : 1; // 0x1f0
};

struct AKSEmoteTestManager : AActor {
	UKSAssetQueryHelperComponent* SkinAssetQueryComponent; // 0x220
	UKSAssetQueryHelperComponent* EmoteAssetQueryComponent; // 0x228
	bool bStartOnBeginPlay; // 0x230
	bool bAutoDisableTick; // 0x231
	UKSEmote* DefaultEmote; // 0x238
	TArray<UKSSkinBundle*> RequestedSkinBundles; // 0x240
	bool bRequestedSkinsOnly; // 0x250
	TArray<AKSBotFactory*> BotFactories; // 0x258
	int32_t SkinArrayIdx; // 0x268
	int32_t EmoteArrayIdx; // 0x26c
	TArray<AKSEmoteInstance*> EmoteInstances; // 0x270
	bool bEmotesNeedPlay; // 0x280
};

struct UEditableTextBox : UWidget {
	FText Text; // 0x110
	FDelegate TextDelegate; // 0x128
	FEditableTextBoxStyle WidgetStyle; // 0x138
	USlateWidgetStyleAsset* Style; // 0x928
	FText HintText; // 0x930
	FDelegate HintTextDelegate; // 0x948
	FSlateFontInfo Font; // 0x958
	FLinearColor ForegroundColor; // 0x9a8
	FLinearColor BackgroundColor; // 0x9b8
	FLinearColor ReadOnlyForegroundColor; // 0x9c8
	bool IsReadOnly; // 0x9d8
	bool IsPassword; // 0x9d9
	float MinimumDesiredWidth; // 0x9dc
	FMargin Padding; // 0x9e0
	bool IsCaretMovedWhenGainFocus; // 0x9f0
	bool SelectAllTextWhenFocused; // 0x9f1
	bool RevertTextOnEscape; // 0x9f2
	bool ClearKeyboardFocusOnCommit; // 0x9f3
	bool SelectAllTextOnCommit; // 0x9f4
	bool AllowContextMenu; // 0x9f5
	EVirtualKeyboardType KeyboardType; // 0x9f6
	FVirtualKeyboardOptions VirtualKeyboardOptions; // 0x9f7
	EVirtualKeyboardTrigger VirtualKeyboardTrigger; // 0x9f8
	EVirtualKeyboardDismissAction VirtualKeyboardDismissAction; // 0x9f9
	ETextJustify Justification; // 0x9fa
	FShapedTextOptions ShapedTextOptions; // 0x9fb
	FMulticastInlineDelegate OnTextChanged; // 0xa00
	FMulticastInlineDelegate OnTextCommitted; // 0xa10
};

struct UNiagaraDataInterfaceVolumeTexture : UNiagaraDataInterface {
	UVolumeTexture* Texture; // 0x30
};

struct USoundSubmixBase : UObject {
	TArray<USoundSubmixBase*> ChildSubmixes; // 0x28
};

struct UInterpTrackInstAnimControl : UInterpTrackInst {
	float LastUpdatePosition; // 0x28
};

struct ULevelVariantSets : UObject {
	UObject* DirectorClass; // 0x28
	TArray<UVariantSet*> VariantSets; // 0x30
};

struct UKSEnvQueryTest_CharacterTrace : UEnvQueryTest {
	FEnvTraceData TraceData; // 0x1f8
	FAIDataProviderBoolValue TraceFromContext; // 0x228
	FAIDataProviderFloatValue ItemHeightOffset; // 0x260
	FAIDataProviderFloatValue ContextHeightOffset; // 0x298
	UEnvQueryContext* Context; // 0x2d0
};

struct UPGame_LandingPanelJSONHandler : UObject {
	FMulticastInlineDelegate OnHandlerObjectReady; // 0x28
	FMulticastInlineDelegate OnJsonDownloaded; // 0x38
	FMulticastInlineDelegate OnJsonReady; // 0x48
	FMulticastInlineDelegate OnImagesDownloaded; // 0x58
	TMap<FString, UTexture2DDynamic*> mapFilePathToTexture; // 0x120
};

struct UFootstepNotify_C : UKSAnimNotify_Footstep {
	StepType StepType; // 0x48
	FName BoneName; // 0x4c
};

struct UWBP_BattlePassLevelTracker_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* NewTierLoop; // 0x528
	UWidgetAnimation* FadeIn; // 0x530
	UWidgetAnimation* OnPlayerLevelUp; // 0x538
	UCanvasPanel* CanvasPanel_1; // 0x540
	UImage* EmblemOverlaySheen_Free; // 0x548
	UImage* EmblemOverlaySheen_Premium; // 0x550
	UWidgetSwitcher* EmblemOverlaySheenSwitcher; // 0x558
	UImage* Fill; // 0x560
	UImage* FillStandard_3; // 0x568
	UImage* GlitchOverlay; // 0x570
	UImage* Glow_2; // 0x578
	UImage* Glow_3; // 0x580
	UImage* Gradient; // 0x588
	USizeBox* LevelRewardWrapper; // 0x590
	UTextBlock* LevelUpText; // 0x598
	UWBP_ProgressionTally_C* ProgressionTally; // 0x5a0
	UTextBlock* RequiredXPForLevel; // 0x5a8
	UTextBlock* RequiredXPForLevel_2; // 0x5b0
	UImage* RewardShimmer; // 0x5b8
	UWidgetSwitcher* TypeSwitcher; // 0x5c0
	UWBP_BattlePassEmblem_C* WBP_BattlePassEmblem; // 0x5c8
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay_3; // 0x5d0
	UTextBlock* XPAmountText; // 0x5d8
	UWBP_ProgressEarnedBar_C* XPBar; // 0x5e0
	UImage* XPBarShimmer; // 0x5e8
	UTextBlock* XPCurrencyText; // 0x5f0
	UHorizontalBox* XPDisplayBox; // 0x5f8
	UTextBlock* XPGainLabel; // 0x600
	UHorizontalBox* XPInfoBox; // 0x608
	UTextBlock* XPProgressInLevel; // 0x610
	FPlayerProgression Progression; // 0x618
	bool CanAnimate; // 0x788
	float BaseFillPercentage; // 0x78c
	float LerpTimeframe; // 0x790
	int32_t CurrentTierIndex; // 0x794
	float CurrentLerpIncrement; // 0x798
	UAkAudioEvent* PlayLevelUpRewardSFX; // 0x7a0
	UAkAudioEvent* PlayLevelProgressionSFX; // 0x7a8
	UAkAudioEvent* StopLevelProgressionSFX; // 0x7b0
	int32_t XPProgressNumber; // 0x7b8
};

struct UKSHudEditorSettingsInfo : UKSSettingsInfoBase {
	FVector2D InRange; // 0x108
	FVector2D OutRange; // 0x110
	FName PropertyName; // 0x118
	UKSHudEditableWidget* ActiveWidget; // 0x120
};

struct AKSGlobalShotListener : AActor {
	FMulticastInlineDelegate ShotNotifyDelegate; // 0x220
};

struct UKSAISenseEvent_Objective : UAISenseEvent {
	FAIObjectiveEvent Event; // 0x28
};

struct USoundNodeDelay : USoundNode {
	float DelayMin; // 0x48
	float DelayMax; // 0x4c
};

struct ASpectatorBeaconClient : AOnlineBeaconClient {
	FString DestSessionId; // 0x2e0
	FSpectatorReservation PendingReservation; // 0x2f0
	ESpectatorClientRequestType RequestType; // 0x368
	bool bPendingReservationSent; // 0x369
	bool bCancelReservation; // 0x36a
};

struct UKSBTD_DistanceFromBlackboard : UBTDecorator_BlackboardBase {
	EArithmeticKeyOperation ArithmeticOperation; // 0x90
	float DistanceThreshold; // 0x94
};

struct ALightmassPortal : AActor {
	ULightmassPortalComponent* PortalComponent; // 0x220
};

struct UWBP_SettingsContainer_C : UKSSettingsContainer {
	FPointerToUberGraphFrame UberGraphFrame; // 0x540
	UWidgetAnimation* RowFocus; // 0x548
	UImage* Image_160; // 0x550
	UTextBlock* SettingDisplayName; // 0x558
	UHorizontalBox* SettingWidgetBox; // 0x560
	UAkAudioEvent* HoverSettingsContainerSFX; // 0x568
	UKSWidget* PreviewWidget; // 0x570
	FMulticastInlineDelegate OnAddToPreview; // 0x578
};

struct UMaterialExpressionSaturate : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UWBP_PlayerCustomizeScreen_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* BG; // 0x528
	UWBP_KeyboardBackButton_C* KeyboardBackButton; // 0x530
};

struct UParticleModuleMeshRotation_Seeded : UParticleModuleMeshRotation {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x80
};

struct UAnimCompress_PerTrackCompression : UAnimCompress_RemoveLinearKeys {
	float MaxZeroingThreshold; // 0x60
	float MaxPosDiffBitwise; // 0x64
	float MaxAngleDiffBitwise; // 0x68
	float MaxScaleDiffBitwise; // 0x6c
	TArray<AnimationCompressionFormat> AllowedRotationFormats; // 0x70
	TArray<AnimationCompressionFormat> AllowedTranslationFormats; // 0x80
	TArray<AnimationCompressionFormat> AllowedScaleFormats; // 0x90
	char bResampleAnimation : 1; // 0xa0
	float ResampledFramerate; // 0xa4
	int32_t MinKeysForResampling; // 0xa8
	char bUseAdaptiveError : 1; // 0xac
	char bUseOverrideForEndEffectors : 1; // 0xac
	int32_t TrackHeightBias; // 0xb0
	float ParentingDivisor; // 0xb4
	float ParentingDivisorExponent; // 0xb8
	char bUseAdaptiveError2 : 1; // 0xbc
	float RotationErrorSourceRatio; // 0xc0
	float TranslationErrorSourceRatio; // 0xc4
	float ScaleErrorSourceRatio; // 0xc8
	float MaxErrorPerTrackRatio; // 0xcc
	float PerturbationProbeSize; // 0xd0
};

struct UKSActivityRewardCondition_GameWon : UKSActivityRewardCondition {
	bool bCheckGameWon; // 0x30
};

struct AKSAIController : AAIController {
	AKSCharacterBase* KSCharacter; // 0x378
	AKSCharacter* CachedKSCharacter; // 0x380
	bool bAutoManageWayPointSet; // 0x398
	AKSWayPointSet* WayPointSet; // 0x3a8
	bool bShouldReverseWayPointSetDirection; // 0x3b0
	AKSPlayerShop* Shop; // 0x3c8
	AActor* StartPointToSpawnAt; // 0x400
	AKSCharacter* CharacterToSpawn; // 0x408
	UBehaviorTree* TreeToRun; // 0x410
	UKSBTDifficulty* InitialDifficulty; // 0x418
	UDataTable* DifficultyTable; // 0x428
	FKSBTDifficultyConfig SpawnDifficultyConfig; // 0x430
	UDataTable* ObjectivePriorityTable; // 0x4a8
	UDataTable* ItemPriorityTable; // 0x4b0
	UDataTable* AbilityTable; // 0x4b8
	FKSInitialLoadout InitialLoadout; // 0x4c0
	UKSAIPerceptionComponent* KSAIPerception; // 0x4f8
	AActor* ActorForFocalOffset; // 0x528
	float CrowdCollisionQueryRange; // 0x540
	float CrowdPathOptimizationRange; // 0x544
	float CrowdAvoidanceRangeMultiplier; // 0x548
	float CrowdSeparationWeight; // 0x54c
	bool bStartWithCrowdFollowing; // 0x550
	int32_t TeamNumber; // 0x554
	FGameplayTagQuery AllowedJobQuery; // 0x588
	UKSAIItemPriorityComponent* ItemPriorityComponent; // 0x5d0
	UKSAIItemPriorityComponent* TempItemPriorityComponent; // 0x5d8
	UKSAIObjectivePriorityComponent* ObjectivePriorityComponent; // 0x5e0
	UKSAIDifficultyComponent* DifficultyComponent; // 0x5e8
};

struct UBTDecorator_CompareBBEntries : UBTDecorator {
	EBlackBoardEntryComparison Operator; // 0x68
	FBlackboardKeySelector BlackboardKeyA; // 0x70
	FBlackboardKeySelector BlackboardKeyB; // 0x98
};

struct UKSSocialFriendsPanel : UKSSocialPanelBase {
	TArray<UKSDataSocialCategory*> CategoryData; // 0x580
	UKSSocialOverlay* Parent; // 0x590
};

struct APGame_PlayerController : APlayerController {
	FString SonyMatchId; // 0x658
	FString SonyActivityId; // 0x668
	ESonyMatchState SonyMatchState; // 0x678
	ESonyMatchState QueuedSonyMatchState; // 0x679
	bool bIsSonyMatchOwner; // 0x67a
	bool bIsEligibleSonyMatchOwner; // 0x67b
	bool bIsExclusiveSonyMatchOwner; // 0x67c
	UPGame_CheatComponent* m_CheatComponentClass; // 0x690
	UPGame_CheatComponent* r_CheatComponent; // 0x698
	FSerializedMctsNetId r_ReplicatedNetId; // 0x6a0
	UInputComponent* InputComponentClass; // 0x6a8
};

struct USubmixEffectFlexiverbPreset : USoundEffectSubmixPreset {
	FSubmixEffectFlexiverbSettings Settings; // 0x78
};

struct AKSHUDCommon : APUMG_HUD {
	FMulticastInlineDelegate OnPreferredSiteUpdated; // 0x5a0
	UPUMG_LoginDataFactory* LoginDataFactory; // 0x5b0
	UKSSettingsDataFactory* SettingsFactory; // 0x5b8
	UKSChatDataFactory* ChatDataFactory; // 0x5c0
	UKSPartyDataFactory* PartyDataFactory; // 0x5c8
	UKSNPEDataFactory* NPEDataFactory; // 0x5d0
	UKSPlayerDataFactory* PlayerDataFactory; // 0x5d8
	bool bDisplayWatermark; // 0x5e0
	float WatermarkAlpha; // 0x5e4
	float WatermarkOffsetLeft; // 0x5e8
	float WatermarkOffsetTop; // 0x5ec
	float WatermarkOffsetRight; // 0x5f0
	float WatermarkOffsetBottom; // 0x5f4
	float WatermarkChangePositionTime; // 0x5f8
	UDataTable* ColorPaletteDT; // 0x600
	UDataTable* FontPaletteDT; // 0x608
	UKSSettingsColorOptionsAsset* CrosshairColorOptions; // 0x610
};

struct UAkAudioEvent : UAkAssetBase {
	float AutomaticMaxAttenuationRadius; // 0x58
	TMap<FString, TSoftObjectPtr<UAkAssetPlatformData>> LocalizedPlatformAssetDataMap; // 0x60
	UAkAudioBank* RequiredBank; // 0xb0
	UAkAssetPlatformData* CurrentLocalizedPlatformData; // 0xb8
};

struct UInteractiveTool : UObject {
	UInputBehaviorSet* InputBehaviors; // 0x48
	TArray<UObject*> ToolPropertyObjects; // 0x50
};

struct UNavigationGraphNodeComponent : USceneComponent {
	FNavGraphNode Node; // 0x208
	UNavigationGraphNodeComponent* NextNodeComponent; // 0x220
	UNavigationGraphNodeComponent* PrevNodeComponent; // 0x228
};

struct UFindTurnBasedMatchCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UWBP_RogueMasteryTrackSection_FinalPrestige_C : UUserWidget {
	UWBP_ChevronProgressBar_C* WBP_ChevronProgressBar; // 0x238
};

struct AKSLootSitePowerUp : AKSLootSiteBase {
	TArray<FLootSiteDropInfo> PossibleLoot; // 0x348
};

struct UKSDestroyableHazardComponent : UActorComponent {
	float MinPerceptionValue; // 0xb0
	float MaxPerceptionValue; // 0xb4
	float RandomizedPerceptionValue; // 0xb8
	bool ShouldReactWithEMP; // 0xbc
	bool ShouldReactWithGunshot; // 0xbd
	TArray<TSoftObjectPtr<AActor>> ActorsSeenBy; // 0xc0
};

struct UKSBTD_NearbyEnemyCount : UBTDecorator {
	TArray<UAISense*> SensesToUse; // 0x68
	EArithmeticKeyOperation ArithmeticOperation; // 0x78
	int32_t EnemyCount; // 0x7c
	float DistanceThreshold; // 0x80
	bool bCheckLOS; // 0x84
};

struct USubmixEffectReverbFastPreset : USoundEffectSubmixPreset {
	FSubmixEffectReverbFastSettings Settings; // 0xa0
};

struct UNiagaraPreviewAxis_InterpParamInt32 : UNiagaraPreviewAxis_InterpParamBase {
	int32_t Min; // 0x38
	int32_t Max; // 0x3c
};

struct UMaterialExpressionBlackBody : UMaterialExpression {
	FExpressionInput Temp; // 0x40
};

struct UWBP_CustomSwapButton_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* Hover; // 0x240
	UButton* SwapButton; // 0x248
	FMulticastInlineDelegate OnClicked; // 0x250
};

struct UKSJsonDataFactory : UPUMG_JsonDataFactory {
	TMap<FString, UTexture2DDynamic*> mapFilePathToTexture; // 0x48
};

struct UAISenseConfig : UObject {
	FColor DebugColor; // 0x28
	float MaxAge; // 0x2c
	char bStartsEnabled : 1; // 0x30
};

struct UAnimationSharingSetup : UObject {
	TArray<FPerSkeletonAnimationSharingSetup> SkeletonSetups; // 0x28
	FAnimationSharingScalability ScalabilitySettings; // 0x38
};

struct UWBP_Guided_Tutorial_Card_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	URichTextBlock* DescriptionText; // 0x240
	UImage* Image_111; // 0x248
	UImage* Image_113; // 0x250
	UImage* Image_114; // 0x258
	UImage* Image_115; // 0x260
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x268
	UWBP_Header2_C* WBP_Header2; // 0x270
};

struct UKSMapIconWidgetPool : UObject {
	FString PoolType; // 0x28
	TArray<UKSMapIconWidgetBase*> MapIconWidgets; // 0x38
};

struct UKSViewItemData : UKSWidget {
	TArray<TSoftObjectPtr<UPUMG_StoreItem>> StoreItems; // 0x520
	UPlatformInventoryItem* InventoryItem; // 0x530
	FName SceneCamera; // 0x538
	FName SceneViewModel; // 0x540
	ELobbyCharacterIndex LobbyCharacterIndex; // 0x548
};

struct USoundNodeDistanceCrossFade : USoundNode {
	TArray<FDistanceDatum> CrossFadeInput; // 0x48
};

struct UBlendSpaceBase : UAnimationAsset {
	bool bRotationBlendInMeshSpace; // 0x88
	float AnimLength; // 0x8c
	FInterpolationParameter InterpolationParam[0x3]; // 0x90
	float TargetWeightInterpolationSpeedPerSec; // 0xa8
	ENotifyTriggerMode NotifyTriggerMode; // 0xac
	TArray<FPerBoneInterpolation> PerBoneBlend; // 0xb0
	int32_t SampleIndexWithMarkers; // 0xc0
	TArray<FBlendSample> SampleData; // 0xc8
	TArray<FEditorElement> GridSamples; // 0xd8
	FBlendParameter BlendParameters[0x3]; // 0xe8
};

struct USoundfieldEffectBase : UObject {
	USoundfieldEffectSettingsBase* Settings; // 0x28
};

struct UInterpTrackInstLinearColorProp : UInterpTrackInstProperty {
	FLinearColor ResetColor; // 0x60
};

struct UBTDecorator_TimeLimit : UBTDecorator {
	float TimeLimit; // 0x68
};

struct UPUMG_StorePurchaseRequest : UObject {
	int32_t LootTableItemId; // 0x28
	int32_t VendorId; // 0x2c
	int32_t PriceInUI; // 0x30
	UPlatformInventoryItem* CurrencyType; // 0x38
	int32_t Quantity; // 0x40
	int32_t LocationId; // 0x44
	FString ExternalTransactionId; // 0x48
	int32_t CouponId; // 0x58
	int32_t GiftPlayerId; // 0x5c
	int32_t GiftMsgIndex; // 0x60
	bool AnonymousGift; // 0x64
	bool SkipCurrencyAmountValidation; // 0x65
	TWeakObjectPtr<UPUMG_StoreItemHelper> pItemHelper; // 0x68
};

struct UKSWeaponAsset_Build : UKSWeaponAsset {
	TSoftClassPtr<UObject> SoftBuildActorClass; // 0x908
	TSoftClassPtr<UObject> SoftBuildPreviewActorClass; // 0x930
	float BuildActivationDelay; // 0x958
};

struct UBrushBaseProperties : UInteractiveToolPropertySet {
	float BrushSize; // 0x50
	bool bSpecifyRadius; // 0x54
	float BrushRadius; // 0x58
	float BrushStrength; // 0x5c
	float BrushFalloffAmount; // 0x60
	bool bShowStrength; // 0x64
	bool bShowFalloff; // 0x65
};

struct UBrightLobbyWidget_C : UKSLobbyWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* MobileLayout; // 0x528
	UPUMG_CanvasPanel* AlwaysPersistent; // 0x530
	UPUMG_CanvasPanel* AlwaysVisibile; // 0x538
	UImage* bkg; // 0x540
	UBlocker_C* Blocker; // 0x548
	UBrightLobbyHeader_C* BrightLobbyHeader; // 0x550
	UPUMG_CanvasPanel* Content; // 0x558
	UWBP_local_player_card_C* PlayerCard; // 0x560
	UPUMG_CanvasPanel* PopupContent; // 0x568
	UPopupManager_C* PopupManager; // 0x570
	UPUMG_CanvasPanel* StickyContent; // 0x578
	UPUMG_CanvasPanel* StickyContentTop; // 0x580
	UWBP_TextChat_C* TextChat; // 0x588
	UWBP_ToastNotification_Manager_C* ToastNotificationManager; // 0x590
	UWBP_ActiveBoosterShelf_C* WBP_ActiveBoosterShelf; // 0x598
	UWBP_Context_Bar_C* WBP_Context_Bar; // 0x5a0
	UWBP_QueueTimer_v2_C* WBP_QueueTimer_v2; // 0x5a8
	UWBP_RadialSelect_C* WBP_RadialSelect; // 0x5b0
	UWBP_TopNavBar_C* WBP_TopNavBar; // 0x5b8
	UWBP_VersionNumber_C* WBP_VersionNumber; // 0x5c0
	FVector2D Latest Viewport Size; // 0x5c8
	FMulticastInlineDelegate BackButtonClicked; // 0x5d0
	TArray<FStickyWidgetData> StickyWidgets; // 0x5e0
};

struct UFileMediaSource : UBaseMediaSource {
	FString FilePath; // 0x88
	bool PrecacheFile; // 0x98
};

struct UKSAnimNotifyState_EmoteProp : UAnimNotifyState {
	UStreamableRenderAsset* PropMesh; // 0x30
	UAnimInstance* AnimClass; // 0x38
	UAnimMontage* AnimMontage; // 0x40
	bool bAddPropToSilhouette; // 0x48
	int32_t ForceLOD; // 0x4c
	FPoolAttachmentInfo PropAttachmentInfo; // 0x50
	bool bUseLightingChannel0; // 0x80
	bool bUseLightingChannel1; // 0x81
	bool bUseLightingChannel2; // 0x82
	FGuid EmotePropGuid; // 0x84
};

struct UKSPlayerMod_GlobalMoveSpeed : UKSPlayerMod {
	float GlobalMoveSpeedMultiplier; // 0x330
	bool bSprintOverride; // 0x334
	float GlobalSprintSpeedMultiplier; // 0x338
	bool bDodgeRollOverride; // 0x33c
	float GlobalDodgeRollSpeedMultiplier; // 0x340
	bool bCrouchOverride; // 0x344
	float GlobalCrouchSpeedMultiplier; // 0x348
	bool CanSprintWhenAffected; // 0x34c
	bool CanDodgeRollWhenAffected; // 0x34d
	float LerpGoal; // 0x350
};

struct UWBP_CustomizeBorder_C : UKSPlayerCosmeticWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowAnim; // 0x528
	UKSSortableGridPanel* ItemContainer; // 0x530
	UScrollBox* ScrollBox_1; // 0x538
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border; // 0x540
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border_2; // 0x548
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border_3; // 0x550
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border_4; // 0x558
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border_5; // 0x560
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border_6; // 0x568
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border_7; // 0x570
	UWBP_CosmeticItem_Border_C* WBP_CosmeticItem_Border_8; // 0x578
	UWBP_PlayerIDCustomize_C* WBP_PlayerIDCustomize; // 0x580
	TArray<UWBP_CosmeticItem_Border_C*> BorderItems; // 0x588
	UWBP_CosmeticItem_Border_C* EquippedBorder; // 0x598
	UKSLoadoutDataFactory* LoadoutDataFactory; // 0x5a0
	UPlatformInventoryItem* HoveredItem; // 0x5a8
	int32_t VisibleGridRows; // 0x5b0
	int32_t VisibleGridColumns; // 0x5b4
};

struct UMovieSceneMaterialTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> Sections; // 0x58
};

struct AKSWeapon_RemoteTrigger : AKSWeapon {
	FMulticastInlineDelegate OnRemoteThrowEquipped; // 0x6d8
	TArray<TWeakObjectPtr<AKSProjectile_RemoteTrigger>> AttachedCharges; // 0x708
	float MaxDetonationRange; // 0x718
	FMulticastInlineDelegate OnDetonationReady; // 0x720
	TWeakObjectPtr<UKSWeaponAsset> RemoteThrowAsset; // 0x730
};

struct UKSWeaponProgressMeter : UKSWidget {
	EKSWeaponMasteryType CurrentMasteryType; // 0x520
	UKSActivityInstance* CurrentMasteryInstance; // 0x528
	UKSWeaponAsset* PopulatedWeaponAsset; // 0x540
};

struct UKSStorePanelItem : UObject {
	UPUMG_StoreItem* StoreItem; // 0x28
	bool IsNew; // 0x30
	bool DisplaySaleTag; // 0x31
	bool HasBeenSeen; // 0x32
	FText CustomBannerText; // 0x38
};

struct UMaterialExpressionTangent : UMaterialExpression {
	FExpressionInput Input; // 0x40
	float Period; // 0x54
};

struct UWBP_GameModeInfoPanel_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	URichTextBlock* DescriptionLabel; // 0x240
	UWBP_Header2_C* Header; // 0x248
	UWidgetSwitcher* ImageSwitcher; // 0x250
	UWBP_AsyncIcon_C* MapImage; // 0x258
	UTextBlock* mapName; // 0x260
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x268
	UTexture2D* DemolitionImage; // 0x270
	UTexture2D* ExtractionImage; // 0x278
	UTexture2D* StrikeoutImage; // 0x280
	UDataTable* DTCustomQueues; // 0x288
};

struct UEditableMesh : UObject {
	TArray<UEditableMeshAdapter*> Adapters; // 0x3b8
	int32_t TextureCoordinateCount; // 0x3d0
	int32_t PendingCompactCounter; // 0x51c
	int32_t SubdivisionCount; // 0x520
};

struct UMovieSceneSequence : UMovieSceneSignedObject {
	FMovieSceneEvaluationTemplate PrecompiledEvaluationTemplate; // 0x50
	EMovieSceneCompletionMode DefaultCompletionMode; // 0x340
	bool bParentContextsAreSignificant; // 0x341
	bool bPlayableDirectly; // 0x342
};

struct UKSPawnAction_StartFire : UKSPawnActionBase {
	FGameplayTag EquipPoint; // 0xa0
	bool bInfiniteAmmo; // 0xa8
	int32_t PersistentAmmoCount; // 0xac
};

struct UWBP_ReactiveWrapStepPreview_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* ShowReactiveWrapInfo; // 0x240
	UImage* Gradient; // 0x248
	UImage* Image_303; // 0x250
	UBorder* ReactiveWrapDesc; // 0x258
	UTextBlock* Text; // 0x260
};

struct UKSBTD_ShouldCrouchAtPoint : UBTDecorator {
	FBlackboardKeySelector PointKey; // 0x68
};

struct UUniformGridSlot : UPanelSlot {
	EHorizontalAlignment HorizontalAlignment; // 0x38
	EVerticalAlignment VerticalAlignment; // 0x39
	int32_t Row; // 0x3c
	int32_t column; // 0x40
};

struct URichTextBlockImageDecorator : URichTextBlockDecorator {
	UDataTable* ImageSet; // 0x28
};

struct UKSAnnouncementQueuedMessageWidget : UKSWidget {
	FMulticastInlineDelegate OnEndDisplay; // 0x520
	FAnnouncementData AnnouncementData; // 0x530
};

struct UWBP_PartyModuleCardSlot_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Addbutton_Fill; // 0x528
	UOverlay* AddButton_Hover; // 0x530
	UImage* Addbutton_HoverGradient; // 0x538
	UImage* Addbutton_Stroke; // 0x540
	UOverlay* AddButton_Up; // 0x548
	UImage* AddButtonHover; // 0x550
	UImage* AddButtonPlus; // 0x558
	UButton* EmptySlotGroup; // 0x560
	UImage* Image_355; // 0x568
	UImage* PlayBtn_HoverStroke; // 0x570
	UWBP_player_card_module_C* PlayerCard; // 0x578
	UOverlay* SuggestionGroup; // 0x580
	UWidgetSwitcher* Switcher; // 0x588
	UAkAudioEvent* HoverPartyModuleCardSlotSFX; // 0x590
	UAkAudioEvent* ClickPartyModuleCardSlotSFX; // 0x598
};

struct UAudioCaptureComponent : USynthComponent {
	int32_t JitterLatencyFrames; // 0x6e0
};

struct UKSBTD_WeightedPerceptionCheck : UBTDecorator {
	TArray<FKSWeightedPerceptionEntry> WeightedEntries; // 0x68
	int32_t CriticalWeightDifference; // 0x78
};

struct UNiagaraDataInterfaceGrid3D : UNiagaraDataInterfaceRWBase {
	FIntVector NumVoxels; // 0xd0
	float VoxelSize; // 0xdc
	bool SetGridFromVoxelSize; // 0xe0
	FVector WorldBBoxSize; // 0xe4
};

struct UBTDecorator_ConeCheck : UBTDecorator {
	float ConeHalfAngle; // 0x68
	FBlackboardKeySelector ConeOrigin; // 0x70
	FBlackboardKeySelector ConeDirection; // 0x98
	FBlackboardKeySelector Observed; // 0xc0
};

struct UWBP_VerticalTabGroup_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UVerticalBox* EntryContainer; // 0x528
	FMulticastInlineDelegate OnSubviewFocus; // 0x530
	FMulticastInlineDelegate OnSubviewChange; // 0x540
};

struct ULandscapeSplinesComponent : UPrimitiveComponent {
	TArray<ULandscapeSplineControlPoint*> ControlPoints; // 0x430
	TArray<ULandscapeSplineSegment*> Segments; // 0x440
	TArray<UMeshComponent*> CookedForeignMeshComponents; // 0x450
};

struct UWBP_BattlePassLevelPurchase_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* TitleText; // 0x528
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x530
	UWBP_YellowButton_C* WBP_YellowButton; // 0x538
	int32_t NumUnlockTiers; // 0x540
	FMulticastInlineDelegate OnButtonClicked; // 0x548
};

struct UWBP_BoosterInventoryScreen_C : UKSBoostInventoryWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OpenPanel; // 0x528
	UVerticalBox* ActiveBoostsContainer; // 0x530
	UWidgetSwitcher* ActiveBoostsSwitcher; // 0x538
	UWBP_Header3_C* ActiveBoostsTitle; // 0x540
	UButton* Blocker; // 0x548
	UWrapBox* BoostInventoryContainer; // 0x550
	UWidgetSwitcher* BoostInventorySwitcher; // 0x558
	UWBP_Header3_C* BoostInventoryTitle; // 0x560
	UImage* Image_114; // 0x568
	UImage* Image_157; // 0x570
	UOverlay* NoBoostsInfoGroup; // 0x578
	UWBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry; // 0x580
	UWBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry_2; // 0x588
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem; // 0x590
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem_2; // 0x598
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem_3; // 0x5a0
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem_4; // 0x5a8
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem_5; // 0x5b0
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem_6; // 0x5b8
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem_7; // 0x5c0
	UWBP_BoosterInventoryItem_C* WBP_BoosterInventoryItem_8; // 0x5c8
	UWBP_Header1_C* WBP_Header1; // 0x5d0
	UWBP_SidePanel_Left_C* WBP_SidePanel_Left; // 0x5d8
};

struct UWBP_RogueStatsScreen_RogueEntry_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* FadeIn; // 0x240
	UOverlay* BarWrapper; // 0x248
	UKSAsyncImage* BottomDivider; // 0x250
	USizeBox* GlowTip; // 0x258
	UImage* Image_426; // 0x260
	UWBP_AsyncIcon_C* MercIcon; // 0x268
	UTextBlock* MercName; // 0x270
	UCanvasPanel* PnlMain; // 0x278
	UTextBlock* StatValue; // 0x280
	UKSAsyncImage* TopDivider; // 0x288
	float MaxStatValue; // 0x290
	float TargetMaxXAnchor; // 0x294
	float AnchorAnimTimer; // 0x298
	float AnchorAnimDuration; // 0x29c
	float AnchorAnimStartPerc; // 0x2a0
	float MyStatValue; // 0x2a4
	UKSStatWrapper* RogueStat; // 0x2a8
	int32_t JobId; // 0x2b0
};

struct UNiagaraPreviewAxis_InterpParamVector4 : UNiagaraPreviewAxis_InterpParamBase {
	FVector4 Min; // 0x40
	FVector4 Max; // 0x50
};

struct UAkAndroidInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkAndroidAdvancedInitializationSettings AdvancedSettings; // 0xb8
};

struct UTimeSynchronizationSource : UObject {
	bool bUseForSynchronization; // 0x28
	int32_t FrameOffset; // 0x2c
};

struct UWBP_BattlePassTitle_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* BackGradient; // 0x528
	UTextBlock* BattlePassSeasonName; // 0x530
	UImage* Fill; // 0x538
	UImage* FillStandard; // 0x540
	UImage* Glow; // 0x548
	UImage* Glow_2; // 0x550
	UHorizontalBox* TimeRemainingGroup; // 0x558
	UTextBlock* TimeRemainingText; // 0x560
	UWidgetSwitcher* TypeSwitcher; // 0x568
	UWBP_BattlePassEmblem_C* WBP_BattlePassEmblem; // 0x570
	UTextBlock* XPGainLabel; // 0x578
	bool HasPremium; // 0x580
};

struct UKSHudEditor : UKSWidget {
	UKSHudEditableWidget* CurrentHighlightedWidget; // 0x520
	UKSEditorPropertiesPanel* EditorPropertiesPanel; // 0x528
	FName DefaultHighlightedWidgetName; // 0x530
};

struct UMovementComponent : UActorComponent {
	USceneComponent* UpdatedComponent; // 0xb0
	UPrimitiveComponent* UpdatedPrimitive; // 0xb8
	FVector Velocity; // 0xc4
	FVector PlaneConstraintNormal; // 0xd0
	FVector PlaneConstraintOrigin; // 0xdc
	char bUpdateOnlyIfRendered : 1; // 0xe8
	char bAutoUpdateTickRegistration : 1; // 0xe8
	char bTickBeforeOwner : 1; // 0xe8
	char bAutoRegisterUpdatedComponent : 1; // 0xe8
	char bConstrainToPlane : 1; // 0xe8
	char bSnapToPlaneAtStart : 1; // 0xe8
	char bAutoRegisterPhysicsVolumeUpdates : 1; // 0xe8
	char bComponentShouldUpdatePhysicsVolume : 1; // 0xe8
	EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0xeb
};

struct UWBP_EquipAllPopup_C : UKSEquipAllWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UWBP_StandardButtonMedium_C* AcceptEquipAll; // 0x530
	UWBP_StandardButtonMedium_C* CancelEquipAllButton; // 0x538
	UTextBlock* EquipAllDesc; // 0x540
	UWBP_KSCosmeticItemDisplay_C* EquipToAllIcon; // 0x548
	UWBP_Header1_C* Header; // 0x550
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x558
	UAkAudioEvent* ShowEquipAllRogueCustomSelectSFX; // 0x560
};

struct UWBP_EmailCollectionPopup_C : UKSEmailCollectionWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Anim_OnShown; // 0x528
	UWidgetAnimation* Anim_ErrorShake; // 0x530
	UWidgetAnimation* Anim_ShowSection; // 0x538
	UHorizontalBox* AgreementCheckboxErrorContainer; // 0x540
	UImage* ArrowDown; // 0x548
	UImage* ArrowUp; // 0x550
	UHorizontalBox* AutoFillLabelWrapper; // 0x558
	UWBP_KeyCallout_C* BackCallout; // 0x560
	UHorizontalBox* BackPrompt; // 0x568
	UImage* BG; // 0x570
	UWBP_StandardButtonLarge_C* CloseButtonGamepad; // 0x578
	UWBP_StandardButtonLarge_C* DismissEulaButton; // 0x580
	UHorizontalBox* EmailErrorContainer; // 0x588
	USizeBox* EmailInputWrapper; // 0x590
	UVerticalBox* EmailSubmission; // 0x598
	UScrollBox* EulaContainer; // 0x5a0
	UVerticalBox* EulaScrollContent; // 0x5a8
	UTextBlock* EulaText; // 0x5b0
	UVerticalBox* EulaVertBox; // 0x5b8
	UWidgetSwitcher* FormStateSwitcher; // 0x5c0
	UBorder* GamepadCallouts; // 0x5c8
	UInvalidationBox* InvalidationBox_1; // 0x5d0
	UWBP_StandardButtonLarge_C* OKButton; // 0x5d8
	UBorder* PendingOverlay; // 0x5e0
	UTextBlock* PendingOverlayText; // 0x5e8
	UWBP_KeyCallout_C* ScrollCallout; // 0x5f0
	UWBP_KeyCallout_C* SelectCallout; // 0x5f8
	UHorizontalBox* SelectPrompt; // 0x600
	UVerticalBox* SubmissionComplete; // 0x608
	UWBP_StandardButtonLarge_C* SubmitButton; // 0x610
	UVerticalBox* TermsAndConditions; // 0x618
	UHorizontalBox* TermsAndConditionsPrompt; // 0x620
	UWBP_CheckboxButton_C* WBP_CheckboxButton; // 0x628
	UWBP_Header1_C* WBP_Header1_2; // 0x630
	UWBP_KeyCallout_C* WBP_KeyCallout; // 0x638
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x640
	UWBP_TextInputButton_C* WBP_TextInputButton; // 0x648
	float EmailValidationTimer; // 0x650
	float ScrollDirection; // 0x654
};

struct UWBP_WeaponMasteryRewards_C : UKSWeaponMasteryRewardsScreen {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UWidgetAnimation* RefreshRewardList; // 0x580
	UWidgetAnimation* RefreshPreview; // 0x588
	UImage* diamondbg; // 0x590
	UTextBlock* EnemyPlayerName; // 0x598
	UWBP_ItemPreviewStack_C* ItemPreviewStack; // 0x5a0
	UKSAsyncImage* KillFeedImage; // 0x5a8
	UHorizontalBox* KillFeedWrapper; // 0x5b0
	UWidgetSwitcher* MasteryBadgeSwitcher; // 0x5b8
	UScaleBox* MasteryIconContainer; // 0x5c0
	UTextBlock* MasteryRewardsHeader; // 0x5c8
	UTextBlock* PreviewPlayerName; // 0x5d0
	UWBP_RelatedRoguesGroup_C* RelatedRoguesGroup; // 0x5d8
	UVerticalBox* RewardItemList; // 0x5e0
	UKSAsyncImage* RewardPreviewImage; // 0x5e8
	USizeBox* RewardPreviewSpecialDetails; // 0x5f0
	UWidgetSwitcher* RewardPreviewSwitcher; // 0x5f8
	UImage* Unlock; // 0x600
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x608
	UWBP_Header1_C* WBP_Header1; // 0x610
	UWBP_ReactiveWrapStepPreview_C* WBP_ReactiveWrapStepPreview; // 0x618
	UWBP_WeaponCategoryMasteryBadge_C* WBP_WeaponCategoryMasteryBadge; // 0x620
	UWBP_WeaponMasteryBadgeLarge_C* WBP_WeaponMasteryBadgeLarge; // 0x628
	UWBP_WeaponMasteryTrack_C* WBP_WeaponMasteryTrack; // 0x630
	UTextBlock* WeaponName; // 0x638
	UKSAsyncImage* WeaponPreviewImage; // 0x640
	UTextBlock* WeaponRogueUnlockText; // 0x648
	USizeBox* WeaponTitleBox; // 0x650
	TArray<UWBP_ListButton_Cosmetic_C*> RewardItems; // 0x658
	int32_t SelectedRewardIndex; // 0x668
	UWBP_ListButton_Cosmetic_C* Last Selected Reward Entry; // 0x670
};

struct UMovieSceneNiagaraTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> Sections; // 0x58
};

struct UKSAttachCompatRules_SpecificList : UKSAttachmentCompatRules {
	TArray<FSoftObjectPath> CompatibleWeapons; // 0x28
};

struct UImage : UWidget {
	FSlateBrush Brush; // 0x110
	FDelegate BrushDelegate; // 0x198
	FLinearColor ColorAndOpacity; // 0x1a8
	FDelegate ColorAndOpacityDelegate; // 0x1b8
	bool bFlipForRightToLeftFlowDirection; // 0x1c8
	FDelegate OnMouseButtonDownEvent; // 0x1cc
};

struct UAkWwiseTreeSelector : UWidget {
	FMulticastInlineDelegate OnSelectionChanged; // 0x110
	FMulticastInlineDelegate OnItemDragged; // 0x120
};

struct UDatasmithFBXSceneImportData : UDatasmithSceneImportData {
	bool bGenerateLightmapUVs; // 0x28
	FString TexturesDir; // 0x30
	char IntermediateSerialization; // 0x40
	bool bColorizeMaterials; // 0x41
};

struct APGame_GameModeBase : AGameMode {
	FString PersistentMapSuffix; // 0x388
	TArray<FString> SublevelSuffixes; // 0x398
	TArray<FString> HighMemorySublevelSuffixes; // 0x3a8
	TArray<FString> LowMemorySublevelSuffixes; // 0x3b8
};

struct UActorSequenceComponent : UActorComponent {
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0xb0
	UActorSequence* Sequence; // 0xc8
	UActorSequencePlayer* SequencePlayer; // 0xd0
};

struct UARGetCandidateObjectAsyncTaskBlueprintProxy : UARBaseAsyncTaskBlueprintProxy {
	FMulticastInlineDelegate OnSuccess; // 0x50
	FMulticastInlineDelegate OnFailed; // 0x60
};

struct AHUD : AActor {
	APlayerController* PlayerOwner; // 0x220
	char bLostFocusPaused : 1; // 0x228
	char bShowHUD : 1; // 0x228
	char bShowDebugInfo : 1; // 0x228
	int32_t CurrentTargetIndex; // 0x22c
	char bShowHitBoxDebugInfo : 1; // 0x230
	char bShowOverlays : 1; // 0x230
	char bEnableDebugTextShadow : 1; // 0x230
	TArray<AActor*> PostRenderedActors; // 0x238
	TArray<FName> DebugDisplay; // 0x250
	TArray<FName> ToggledDebugCategories; // 0x260
	UCanvas* Canvas; // 0x270
	UCanvas* DebugCanvas; // 0x278
	TArray<FDebugTextInfo> DebugTextList; // 0x280
	AActor* ShowDebugTargetDesiredClass; // 0x290
	AActor* ShowDebugTargetActor; // 0x298
};

struct UWBP_CustomizeAvatar_C : UKSPlayerCosmeticWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowAnim; // 0x528
	UKSSortableGridPanel* ItemContainer; // 0x530
	UScrollBox* ScrollBox_1; // 0x538
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar; // 0x540
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_2; // 0x548
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_3; // 0x550
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_4; // 0x558
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_5; // 0x560
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_6; // 0x568
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_7; // 0x570
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_8; // 0x578
	UWBP_CosmeticItem_Avatar_C* WBP_CosmeticItem_Avatar_9; // 0x580
	UWBP_PlayerIDCustomize_C* WBP_PlayerIDCustomize; // 0x588
	TArray<UWBP_CosmeticItem_Avatar_C*> AvatarItems; // 0x590
	UWBP_CosmeticItem_Avatar_C* EquippedAvatar; // 0x5a0
	UKSLoadoutDataFactory* LoadoutDataFactory; // 0x5a8
	UPlatformInventoryItem* HoveredItem; // 0x5b0
	int32_t VisibleGridRows; // 0x5b8
	int32_t VisibleGridColumns; // 0x5bc
};

struct UEdGraphPin_Deprecated : UObject {
	FString PinName; // 0x28
	FString PinToolTip; // 0x38
	EEdGraphPinDirection Direction; // 0x48
	FEdGraphPinType PinType; // 0x50
	FString DefaultValue; // 0xa8
	FString AutogeneratedDefaultValue; // 0xb8
	UObject* DefaultObject; // 0xc8
	FText DefaultTextValue; // 0xd0
	TArray<UEdGraphPin_Deprecated*> LinkedTo; // 0xe8
	TArray<UEdGraphPin_Deprecated*> SubPins; // 0xf8
	UEdGraphPin_Deprecated* ParentPin; // 0x108
	UEdGraphPin_Deprecated* ReferencePassThroughConnection; // 0x110
};

struct UKSModInst_GiveBuildOnActivation : UKSModInst_GiveWeaponOnActivation {
	FMulticastInlineDelegate OnBuildSucceededDel; // 0x518
	FMulticastInlineDelegate OnBuildFailedDel; // 0x540
	bool bStartFireOnActivation; // 0x550
	bool bRefundOnReclaim; // 0x552
};

struct UMaterialExpressionFrac : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UButton : UContentWidget {
	USlateWidgetStyleAsset* Style; // 0x128
	FButtonStyle WidgetStyle; // 0x130
	FLinearColor ColorAndOpacity; // 0x3a8
	FLinearColor BackgroundColor; // 0x3b8
	EButtonClickMethod ClickMethod; // 0x3c8
	EButtonTouchMethod TouchMethod; // 0x3c9
	EButtonPressMethod PressMethod; // 0x3ca
	bool IsFocusable; // 0x3cb
	bool bAllowTouchFallthrough; // 0x3cc
	FMulticastInlineDelegate OnClicked; // 0x3d0
	FMulticastInlineDelegate OnPressed; // 0x3e0
	FMulticastInlineDelegate OnReleased; // 0x3f0
	FMulticastInlineDelegate OnHovered; // 0x400
	FMulticastInlineDelegate OnUnhovered; // 0x410
};

struct UWBP_PlayerInfoDisplay_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UScaleBox* AvatarContainer; // 0x528
	UKSAsyncImage* IconA; // 0x530
	UHorizontalBox* IconsShelf; // 0x538
	UImage* InputIcon; // 0x540
	USizeBox* InputIconContainer; // 0x548
	UTextBlock* LevelText; // 0x550
	UTextBlock* MetaStatusLabel; // 0x558
	USizeBox* PartyLeaderContainer; // 0x560
	UImage* PartyLeaderIcon; // 0x568
	UWBP_PlatformIcon_C* PlatformIcon; // 0x570
	UWBP_PlatformIcon_C* PlatformIconA; // 0x578
	USizeBox* PlatformIconContainer; // 0x580
	UOverlay* PlayerLevelGroup; // 0x588
	UTextBlock* PlayerNameText; // 0x590
	USizeBox* RankedBadgeWrapper; // 0x598
	UHorizontalBox* StatusContainer; // 0x5a0
	UTextBlock* StatusLabel; // 0x5a8
	UImage* StatusSwatch; // 0x5b0
	USizeBox* VoiceIconContainer; // 0x5b8
	UWBP_RankedIcon_C* WBP_RankedIcon; // 0x5c0
	UWBP_VoiceActivityIcon_C* WBP_VoiceActivityIcon; // 0x5c8
	bool ShowStatus; // 0x5d0
	bool ShowPartyLeaderIcon; // 0x5d1
	EHorizontalAlignment IconShelfAlignment; // 0x5d2
	UKSPlayerInfo* CachedPlayerInfo; // 0x5d8
	UDataTable* StatusColors; // 0x5e0
	FSlateColor PlayerNameColor; // 0x5e8
	FSlateFontInfo PlayerNameFont; // 0x610
	bool IsMuted; // 0x660
	bool IsTalking; // 0x661
	FMargin IconShelfMargin; // 0x664
	bool HideRankedBadge; // 0x674
};

struct USoundSubmixWithParentBase : USoundSubmixBase {
	USoundSubmixBase* ParentSubmix; // 0x38
};

struct UCompositionGraphCaptureProtocol : UMovieSceneImageCaptureProtocolBase {
	FCompositionGraphCapturePasses IncludeRenderPasses; // 0x58
	bool bCaptureFramesInHDR; // 0x68
	int32_t HDRCompressionQuality; // 0x6c
	EHDRCaptureGamut CaptureGamut; // 0x70
	FSoftObjectPath PostProcessingMaterial; // 0x78
	bool bDisableScreenPercentage; // 0x90
	UMaterialInterface* PostProcessingMaterialPtr; // 0x98
};

struct UDropdownEntry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* Color_Swatch_Brush; // 0x530
	UButton* HitTarget; // 0x538
	UTextBlock* OptionText; // 0x540
	UImage* Selected; // 0x548
	FText Text; // 0x550
	int32_t Index; // 0x568
	FMulticastInlineDelegate OnOptionSelected; // 0x570
	FMulticastInlineDelegate OnOptionHovered; // 0x580
	UAkAudioEvent* HoverDropdownEntrySFX; // 0x590
	UAkAudioEvent* ClickDropdownEntrySFX; // 0x598
};

struct UWBP_BattlePassRewardsScreen_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Outro; // 0x528
	UWidgetAnimation* Intro; // 0x530
	UImage* Image_221; // 0x538
	UWBP_ItemPreviewStack_C* ItemPreviewStack; // 0x540
	UImage* ReflectedgradientShade; // 0x548
	UWBP_BattlePassLevelPurchase_C* WBP_BattlePassLevelPurchase; // 0x550
	UWBP_BattlePassTitle_C* WBP_BattlePassTitle; // 0x558
	UWBP_BattlePassUpsellPanel_C* WBP_BattlePassUpsellPanel; // 0x560
	UWBP_Header3_C* WBP_Header3; // 0x568
	UWBP_ItemInfoContainer_Description_C* WBP_ItemInfoContainer_Description; // 0x570
	UWBP_RewardsTrack_C* WBP_RewardsTrack; // 0x578
	UWBP_SeasonalChallengePanel_C* WBP_SeasonalChallengePanel; // 0x580
	UKSActivityInstance* ActivityInstance; // 0x588
	UWBP_RewardListEntry_C* SelectedEntry; // 0x590
	UPUMG_StoreItem* SelectedData; // 0x598
};

struct UKSAimAssistAnchorComponent : USphereComponent {
	float AimAssistPriority; // 0x450
};

struct UMaterialExpressionStaticSwitch : UMaterialExpression {
	char DefaultValue : 1; // 0x40
	FExpressionInput A; // 0x44
	FExpressionInput B; // 0x58
	FExpressionInput Value; // 0x6c
};

struct UKSBTTask_GetRotationFromPoint : UBTTaskNode {
	FBlackboardKeySelector MapPointActorKey; // 0x70
	FBlackboardKeySelector MapPointRotationKey; // 0x98
};

struct UToFloatField : UFieldNodeFloat {
	UFieldNodeInt* IntField; // 0xb0
};

struct UPlayerInput : UObject {
	TArray<FKeyBind> DebugExecBindings; // 0x120
	TArray<FName> InvertedAxis; // 0x160
	TArray<FTouchRegionState> TouchRegionStates; // 0x12a0
};

struct UBTTask_GameplayTaskBase : UBTTaskNode {
	char bWaitForGameplayTask : 1; // 0x70
};

struct UMovieSceneMaterialParameterCollectionTrack : UMovieSceneMaterialTrack {
	UMaterialParameterCollection* MPC; // 0x68
};

struct UAkSettingsPerUser : UObject {
	FDirectoryPath WwiseWindowsInstallationPath; // 0x28
	FFilePath WwiseMacInstallationPath; // 0x38
	FString WaapiIPAddress; // 0x48
	uint32_t WaapiPort; // 0x58
	bool AutoSyncSelection; // 0x5c
	bool SuppressWwiseProjectPathWarnings; // 0x5d
	bool SoundDataGenerationSkipLanguage; // 0x5e
};

struct UKSGenericSoundLibrary : UKSUISoundLibrary {
	UAkAudioEvent* BackToScreenSound; // 0x28
	UAkAudioEvent* ErrorSound; // 0x30
	UAkAudioEvent* ScreenTransitionSound; // 0x38
};

struct UMaterialExpressionTruncate : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UEnvQueryGenerator_Donut : UEnvQueryGenerator_ProjectedPoints {
	FAIDataProviderFloatValue InnerRadius; // 0x80
	FAIDataProviderFloatValue OuterRadius; // 0xb8
	FAIDataProviderIntValue NumberOfRings; // 0xf0
	FAIDataProviderIntValue PointsPerRing; // 0x128
	FEnvDirection ArcDirection; // 0x160
	FAIDataProviderFloatValue ArcAngle; // 0x180
	bool bUseSpiralPattern; // 0x1b8
	UEnvQueryContext* Center; // 0x1c0
	char bDefineArc : 1; // 0x1c8
};

struct UWBP_CosmeticItem_BannerEmpty_C : UKSWidget {
	UImage* Image_76; // 0x520
};

struct AKSFreezeFramePawn : APawn {
	USkeletalMeshComponent* PawnMeshComponent; // 0x280
	USkeletalMesh* PawnMesh; // 0x3d0
	UDataTable* PawnSkinTable; // 0x3d8
	UAnimationAsset* PawnAnimation; // 0x3e0
	UAnimSequence* FacialAnimationSet; // 0x3e8
	EKSEmotion FacialAnimationPose; // 0x3f0
	EAnimationMode AnimationMode; // 0x3f1
	UKSFreezeFramePawnAnimInst* AnimationClass; // 0x3f8
	float AnimationPlayRate; // 0x400
	float AnimationStartTime; // 0x404
	TArray<FKSFreezeFramePawnProp> Props; // 0x408
	TArray<FKSFreezeFramePawnWeaponProp> WeaponProps; // 0x418
	TArray<FKSFreezeFrameVFXEntry> VFXEntries; // 0x428
};

struct UAnimNotify_SelectiveAkEvent : UAnimNotify {
	FName AttachName; // 0x38
	USelectiveAkAudioEvent* Event; // 0x40
	bool bFollow; // 0x48
};

struct UPreviewActorLoadoutComponentDirect : UPreviewActorLoadoutComponent {
	UKSJobItem* CurrentJob; // 0xb8
	UKSSkinBundle* CurrentSkin; // 0xc0
	TMap<UKSItem*, UKSItem*> SkinMap; // 0xc8
};

struct UThermalScopeManagerComponent : UActorComponent {
	UThermalScopePPComponent* ThermalScopePPComponentClass; // 0xb0
	AKSCharacter* CharacterOwner; // 0xc0
	TArray<FActiveThermalPPComponentInfo> ActiveThermals; // 0xc8
};

struct UWBP_GameModeInfoPanel_Lobby_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	URichTextBlock* DescriptionLabel; // 0x240
	UWBP_Header2_C* Header; // 0x248
	UWidgetSwitcher* ImageSwitcher; // 0x250
	UWBP_AsyncIcon_C* MapImage; // 0x258
	UTextBlock* mapName; // 0x260
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x268
	UTexture2D* DemolitionImage; // 0x270
	UTexture2D* ExtractionImage; // 0x278
	UTexture2D* StrikeoutImage; // 0x280
	UDataTable* DTCustomQueues; // 0x288
};

struct UParticleModuleVelocityCone : UParticleModuleVelocityBase {
	FRawDistributionFloat Angle; // 0x38
	FRawDistributionFloat Velocity; // 0x68
	FVector Direction; // 0x98
};

struct UKSVOPriorityManager : UActorComponent {
	EKSVoiceOverPriority AnnouncerSquelchThreshold; // 0xb0
	EKSVoiceOverPriority AnnouncerDuckThreshold; // 0xb1
	EKSVoiceOverPriority CharacterSquelchThreshold; // 0xb2
	EKSVoiceOverPriority CharacterDuckThreshold; // 0xb3
	TArray<FPriorityVoiceLine> PlayingLines; // 0xb8
};

struct UDatasmithStaticMeshGLTFImportData : UDatasmithStaticMeshImportData {
	FString SourceMeshName; // 0x28
};

struct UAkMacInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings; // 0xb8
};

struct UAUD_ExplosionWithEcho_C : UActorComponent {
	FPointerToUberGraphFrame UberGraphFrame; // 0xb0
	UAkAudioEvent* Explosion Sound; // 0xb8
	TArray<FRotator> Echo Directions; // 0xc0
	float Echo Max Distance; // 0xd0
	FVector Echo Sound Location; // 0xd4
	float Speed of Sound; // 0xe0
	UAkAudioEvent* Echo Sound; // 0xe8
	int32_t Units From Ground; // 0xf0
};

struct UBTDecorator_Cooldown : UBTDecorator {
	float CooldownTime; // 0x68
};

struct UEnvQueryTest_PathfindingBatch : UEnvQueryTest_Pathfinding {
	FAIDataProviderFloatValue ScanRangeMultiplier; // 0x280
};

struct AKSObjectiveBase : AActor {
	FMulticastInlineDelegate OnObjectiveUpdate; // 0x230
	EObjectiveIconType MapIconType; // 0x240
	int32_t DisplayId; // 0x244
	int32_t ActiveObjectiveIndex; // 0x248
	bool bUsed; // 0x24c
	FObjectiveState ObjectiveState; // 0x250
	int32_t ObjectiveId; // 0x264
	EObjectiveType ObjectiveType; // 0x268
	FName DefaultState; // 0x26c
	FName InitialActivateState; // 0x274
	FText DisplayName; // 0x280
	FString ObjectiveDisplayLabel; // 0x298
	bool bAppendActiveIndexToLabel; // 0x2a8
	int32_t ObjectiveLootGroup; // 0x2c8
	FVector NavigationLocation; // 0x2cc
	bool UseNavLocationForDistance; // 0x2e4
	TSoftClassPtr<UObject> MinimapDisplayWidget; // 0x2e8
	TSoftClassPtr<UObject> FullmapDisplayWidget; // 0x310
	TSoftClassPtr<UObject> OverlayDisplayWidget; // 0x338
	UKSItemStimuliSourceComponent* StimuliSourceComponent; // 0x360
	FName SoundEventName; // 0x370
	float SoundEventLoudness; // 0x378
	float RepeatTimeToNotifyBots; // 0x37c
};

struct UWBP_RankChange_C : UKSRankChangeWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* RankUpAnim_withEvent_withBanner_3; // 0x528
	UWidgetAnimation* RankUpAnim_withEvent_withBanner_1; // 0x530
	UWidgetAnimation* RankUpAnim_withEvent_withBanner_2; // 0x538
	UWidgetAnimation* RankUpAnim_withEvent_withBanner; // 0x540
	UWidgetAnimation* RankUpAnim_withEvent_newTiming; // 0x548
	UWidgetAnimation* RankDownAnim_withEvent; // 0x550
	UWidgetAnimation* RankUpAnim_withEvent; // 0x558
	UWidgetAnimation* OnShownAnim; // 0x560
	UImage* BadgeMaterialize; // 0x568
	UImage* CenterGradient; // 0x570
	UImage* ChromaticRing; // 0x578
	UImage* EdgeGlow; // 0x580
	UImage* EdgeGlow_2; // 0x588
	UImage* Flare01; // 0x590
	UImage* Flare03; // 0x598
	UImage* Flare04; // 0x5a0
	UImage* Flare05; // 0x5a8
	UImage* Glitch_Center; // 0x5b0
	UBorder* GlitchCenter_ColorWrapper; // 0x5b8
	UImage* Glow01; // 0x5c0
	UImage* Glow02; // 0x5c8
	UBorder* GlowBanner_ColorWrapper; // 0x5d0
	UWBP_AdditiveImage_C* glowLine; // 0x5d8
	UWBP_AdditiveImage_C* glowLine_3; // 0x5e0
	UImage* godrays; // 0x5e8
	UWBP_LerpingNumberWidget_C* GrandMasterPoints; // 0x5f0
	UCanvasPanel* GrandMasterPointsWrapper; // 0x5f8
	UImage* Particles01; // 0x600
	UTextBlock* PointsEarned; // 0x608
	UImage* PrimaryBannerShade; // 0x610
	UTextBlock* PrimaryBannerText; // 0x618
	UWBP_RankedIcon_C* RankBadge; // 0x620
	UTextBlock* RankChangeText; // 0x628
	UWidgetSwitcher* RankedProgressSwitcher; // 0x630
	URichTextBlock* RankedTierText; // 0x638
	UWBP_AdditiveImage_C* ScanLines; // 0x640
	UWBP_AdditiveImage_C* ScanLines_3; // 0x648
	UImage* Scanlines01; // 0x650
	UImage* ShadeBox; // 0x658
	UImage* SheenLeft; // 0x660
	UImage* SheenRight; // 0x668
	UTextBlock* TeamStatus; // 0x670
	UImage* VictoryDefeatGlow; // 0x678
	UImage* VictoryDefeatGlow_2; // 0x680
	UImage* VictoryDefeatGlow_3; // 0x688
	UImage* VictoryDefeatGlow_Anim; // 0x690
	UImage* VictoryDefeatGlow_Pulse; // 0x698
	UImage* VictoryDefeatGlow_Pulse_2; // 0x6a0
	UImage* VictoryDefeatLine; // 0x6a8
	UImage* VictoryDefeatScanlines; // 0x6b0
	UWBP_StandardButtonLarge_C* WBP_StandardButtonLarge_C_1; // 0x6b8
	UWBP_ranked_level_tracker_C* XPProgressEarnedBar; // 0x6c0
	USizeBox* XPProgressionBarWrapper; // 0x6c8
	bool HasRankedData; // 0x6d0
	FMulticastInlineDelegate OnRankedPopupClosed; // 0x6d8
	int32_t PendingLevelValue; // 0x6e8
	int32_t EndingXPValue; // 0x6ec
	float RANKED_LERP_TIME; // 0x6f0
	bool IsDerankingFromRogue; // 0x6f4
	FPlayerProgression ProgressionData; // 0x6f8
};

struct UMovieSceneByteSection : UMovieSceneSection {
	FMovieSceneByteChannel ByteCurve; // 0xe0
};

struct UMaterialExpressionConstant4Vector : UMaterialExpression {
	FLinearColor Constant; // 0x40
};

struct UMaterialExpressionAbs : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UKSPlayerMod_Aim : UKSPlayerMod {
	bool AimLocked; // 0x330
	bool CrosshairHidden; // 0x331
	float SensitivityMultiplier; // 0x334
};

struct AKSWeapon_Build : AKSWeapon_Aimed {
	FMulticastInlineDelegate OnInvalidBuildPlacementDel; // 0x818
	FMulticastInlineDelegate OnValidBuildPlacementDel; // 0x840
	FVector BuildLocationOffset; // 0x850
	float MaxAdjustBuildDistanceHorizontal; // 0x85c
	float MaxAdjustBuildDistanceVertical; // 0x860
	float MaxAdjustBuildDistanceOffGround; // 0x864
	AKSBuildPreview* BuildPreviewActor; // 0x868
	EKSBuildState BuildState; // 0x870
	FMulticastInlineDelegate OnBuildSpawned; // 0x8b8
};

struct UKSBTD_DestroyableHazardState : UBTDecorator_BlackboardBase {
	FKSDestroyableHazardStateFilter DestroyableHazardStateFilter; // 0x90
};

struct UWBP_HorizontalRule_Top_C : UUserWidget {
	UImage* Image_148; // 0x238
};

struct UMovieSceneGeometryCacheSection : UMovieSceneSection {
	FMovieSceneGeometryCacheParams Params; // 0xe0
};

struct AKSNeutralBombDrop : AKSWeaponAssetDrop_MacGuffin {
	float CurrentInteractionProgress; // 0x940
	AKSCharacter* CurrentInteractor; // 0x948
	float NeutralPickupTime; // 0x950
	FText NeutralPickupPrompt; // 0x958
	FText NeutralPickupProgressText; // 0x970
	float DisarmTime; // 0x988
	FText DisarmPrompt; // 0x990
	FText DisarmProgressText; // 0x9a8
	UKSInteractionType* DisarmInteractionType; // 0x9c0
	float MaxDisarmInteractionDistance; // 0x9c8
	TSoftClassPtr<UObject> MinimapDisplayWidget; // 0x9d0
	TSoftClassPtr<UObject> FullmapDisplayWidget; // 0x9f8
	TSoftClassPtr<UObject> OverlayDisplayWidget; // 0xa20
	FName DisarmCameraName; // 0xa48
	float DisarmCameraTransitionInTime; // 0xa50
	float DisarmCameraTransitionOutTime; // 0xa54
	bool bDisarmForceCameraShoulder; // 0xa58
	ECameraShoulder DisarmCameraShoulder; // 0xa59
	float DisarmCameraMaxRotation; // 0xa5c
	bool DisarmCameraRotationLockout; // 0xa60
	bool bLockPitch; // 0xa61
	bool bLockYaw; // 0xa62
	bool bDisarmCameraShake; // 0xa63
	UCameraShake* DisarmCameraShake; // 0xa68
	int32_t TeamSpottingBitmask; // 0xa74
	bool bShouldAutomaticallyBeSpotted; // 0xa78
	float MaxSpottingRange; // 0xa7c
	float SpottingSweepRadius; // 0xa80
	float GroundCheckDistance; // 0xa84
	FName SoundEventName; // 0xa90
	float SoundEventLoudness; // 0xa98
	float RepeatTimeToNotifyBots; // 0xa9c
};

struct UKSDamageTypeSonar : UKSDamageTypeBase {
	bool bRevealOnly; // 0x138
	float RevealDuration; // 0x13c
};

struct AKSSafeZone : AKSOutOfBoundsZone {
	int32_t SideNum; // 0x238
};

struct UKSPlayerMod_GiveWeaponConfig : UKSPlayerMod_GiveItemOnActivation {
	float Radius; // 0x3f0
	bool bCanActivateInAir; // 0x3f4
	float ReclaimCharge; // 0x3f8
	int32_t AllowedActiveDeployableCount; // 0x3fc
};

struct USkinnedMeshComponent : UMeshComponent {
	USkeletalMesh* SkeletalMesh; // 0x458
	TWeakObjectPtr<USkinnedMeshComponent> MasterPoseComponent; // 0x460
	TArray<ESkinCacheUsage> SkinCacheUsage; // 0x468
	bool bSuppressSocketByNameWarnings; // 0x548
	UPhysicsAsset* PhysicsAssetOverride; // 0x578
	int32_t ForcedLodModel; // 0x580
	int32_t MinLodModel; // 0x584
	float StreamingDistanceMultiplier; // 0x590
	TArray<FSkelMeshComponentLODInfo> LODInfo; // 0x5a0
	EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x5d4
	char bOverrideMinLod : 1; // 0x5d6
	char bUseBoundsFromMasterPoseComponent : 1; // 0x5d6
	char bForceWireframe : 1; // 0x5d6
	char bDisplayBones : 1; // 0x5d6
	char bDisableMorphTarget : 1; // 0x5d6
	char bHideSkin : 1; // 0x5d6
	char bPerBoneMotionBlur : 1; // 0x5d7
	char bComponentUseFixedSkelBounds : 1; // 0x5d7
	char bConsiderAllBodiesForBounds : 1; // 0x5d7
	char bSyncAttachParentLOD : 1; // 0x5d7
	char bCanHighlightSelectedSections : 1; // 0x5d7
	char bRecentlyRendered : 1; // 0x5d7
	char bCastCapsuleDirectShadow : 1; // 0x5d7
	char bCastCapsuleIndirectShadow : 1; // 0x5d7
	char bCPUSkinning : 1; // 0x5d8
	char bEnableUpdateRateOptimizations : 1; // 0x5d8
	char bDisplayDebugUpdateRateOptimizations : 1; // 0x5d8
	char bRenderStatic : 1; // 0x5d8
	char bIgnoreMasterPoseComponentLOD : 1; // 0x5d8
	char bCachedLocalBoundsUpToDate : 1; // 0x5d8
	char bForceMeshObjectUpdate : 1; // 0x5d9
	float CapsuleIndirectShadowMinVisibility; // 0x5dc
	FBoxSphereBounds CachedWorldSpaceBounds; // 0x5f0
	FMatrix CachedWorldToLocalTransform; // 0x610
};

struct ASkeletalMeshActor : AActor {
	char bShouldDoAnimNotifies : 1; // 0x228
	char bWakeOnLevelStart : 1; // 0x228
	USkeletalMeshComponent* SkeletalMeshComponent; // 0x230
	USkeletalMesh* ReplicatedMesh; // 0x238
	UPhysicsAsset* ReplicatedPhysAsset; // 0x240
	UMaterialInterface* ReplicatedMaterial0; // 0x248
	UMaterialInterface* ReplicatedMaterial1; // 0x250
};

struct UBackgroundBlurSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UKSPawnAction_SwapWeapon : UKSPawnActionBase {
	FGameplayTag EquipPoint; // 0xa0
};

struct AKSWeapon_Shotgun : AKSWeapon_Aimed {
	TArray<FAimData> CachedPelletSpread; // 0x800
};

struct UKSProgressionTallyWidget : UKSWidget {
	FPlayerProgression PlayerProgressionData; // 0x520
};

struct UMockDataMeshTrackerComponent : USceneComponent {
	FMulticastInlineDelegate OnMeshTrackerUpdated; // 0x208
	bool ScanWorld; // 0x218
	bool RequestNormals; // 0x219
	bool RequestVertexConfidence; // 0x21a
	EMeshTrackerVertexColorMode VertexColorMode; // 0x21b
	TArray<FColor> BlockVertexColors; // 0x220
	FLinearColor VertexColorFromConfidenceZero; // 0x230
	FLinearColor VertexColorFromConfidenceOne; // 0x240
	float UpdateInterval; // 0x250
	UMRMeshComponent* MRMesh; // 0x258
};

struct UMeshSelectionSet : USelectionSet {
	TArray<int32_t> Vertices; // 0x40
	TArray<int32_t> Edges; // 0x50
	TArray<int32_t> Faces; // 0x60
	TArray<int32_t> Groups; // 0x70
};

struct UAmbisonicsEncodingSettings : USoundfieldEncodingSettingsBase {
	int32_t AmbisonicsOrder; // 0x28
};

struct UKSPlayerMod_Accuracy : UKSPlayerMod {
	float BaseAccuracyMultiplier; // 0x330
};

struct UParticleModuleVectorFieldScale : UParticleModuleVectorFieldBase {
	UDistributionFloat* VectorFieldScale; // 0x30
	FRawDistributionFloat VectorFieldScaleRaw; // 0x38
};

struct UPComGameEngine : UGameEngine {
	bool bRedirectLogsToConsole; // 0xeb8
	bool bAllowReloadingDefaultLevel; // 0xeb9
};

struct UKSVehicleMovementComponent4W : UWheeledVehicleMovementComponent4W {
	bool ParachuteDeployed; // 0x408
	bool ParachuteDetached; // 0x409
	float SpeedToConsiderParachuteDeployment; // 0x40c
	float DistanceToDeployParachute; // 0x410
	float DistanceToDetachParachute; // 0x414
	float DistanceToAllowManualDetachment; // 0x418
	float TimeUntilParachuteDeployed; // 0x41c
	float ParachuteDownwardSpeed; // 0x420
	bool ManualDetachmentAllowed; // 0x424
	float ReorientedPitch; // 0x428
	float TimeToReorientPitch; // 0x42c
	float FallingTurnSpeed; // 0x430
	float SlowFallingSpeed; // 0x434
	float DefaultFallingSpeed; // 0x438
	float FastFallingSpeed; // 0x43c
	float TimeToReachDesiredFallSpeed; // 0x440
	float AirSpeedInput; // 0x444
	float MaxAngleToPreventRoll; // 0x448
};

struct UKSActivityRewardCondition_Revive : UKSActivityRewardCondition {
	bool IsBeingRevived; // 0x30
};

struct UKSActorRangeEvaluator : UKSRangeEvaluator {
	TWeakObjectPtr<AActor> OriginActor; // 0x40
};

struct UAttackBomb_WeaponComponent_C : UMaster_WeaponComponent_C {
	AKSCharacter* K2Node_Event_SkyDiver_3; // 0x1258
	bool CallFunc_DoesCharacterHaveHoverboard_Has_Hoverboard; // 0x1260
	AKSCharacter* K2Node_Event_SkyDiver_2; // 0x1268
	AKSCharacter* K2Node_Event_SkyDiver; // 0x1270
	EWeaponStateNew K2Node_Event_OldState; // 0x1278
	EWeaponStateNew K2Node_Event_NewState; // 0x1279
	bool K2Node_SwitchEnum_CmpSuccess; // 0x127a
	bool CallFunc_DoesCharacterHaveBackpack_HasBackpack; // 0x127b
	bool CallFunc_DoesCharacterHaveBackpack_HasBackpack_2; // 0x127c
};

struct UNiagaraLightRendererProperties : UNiagaraRendererProperties {
	char bUseInverseSquaredFalloff : 1; // 0x50
	char bAffectsTranslucency : 1; // 0x50
	char bOverrideRenderingEnabled : 1; // 0x50
	float RadiusScale; // 0x54
	FVector ColorAdd; // 0x58
	FNiagaraVariableAttributeBinding LightRenderingEnabledBinding; // 0x68
	FNiagaraVariableAttributeBinding LightExponentBinding; // 0xe0
	FNiagaraVariableAttributeBinding PositionBinding; // 0x158
	FNiagaraVariableAttributeBinding ColorBinding; // 0x1d0
	FNiagaraVariableAttributeBinding RadiusBinding; // 0x248
	FNiagaraVariableAttributeBinding VolumetricScatteringBinding; // 0x2c0
};

struct UWBP_PlayerIDCustomize_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* BG; // 0x528
	UNamedSlot* CosmeticGridSlot; // 0x530
	UWBP_Header3_C* WBP_Header3; // 0x538
	UWBP_ItemInfoPanel_C* WBP_ItemInfoPanel; // 0x540
	UWBP_NavBar_C* WBP_NavBar; // 0x548
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x550
	UWBP_PlayerIdentity_Full_C* WBP_PlayerIdentity_Full; // 0x558
	int32_t CurrentTabIndex; // 0x560
	int32_t TabCount; // 0x564
	bool PlayerIdentityDirty; // 0x568
};

struct UKSModInst_ActivatedTarget : UKSModInst_Activated {
	UKSPlayerMod_ActivatedTarget* ActivateTargetMod; // 0x478
	AKSCharacter* Target; // 0x480
	UDynamicSkinTable* TargetAssetDataTableManager; // 0x490
};

struct UKSPlayerHealthWidgetBase : UKSViewedTargetHealthWidget {
	FPlayerHealthMeterState CurrentHealthMeterState; // 0x568
};

struct UActorComponent : UObject {
	FActorComponentTickFunction PrimaryComponentTick; // 0x30
	TArray<FName> ComponentTags; // 0x60
	TArray<UAssetUserData*> AssetUserData; // 0x70
	int32_t UCSSerializationIndex; // 0x84
	char bNetAddressable : 1; // 0x88
	char bReplicates : 1; // 0x88
	char bAutoActivate : 1; // 0x89
	char bIsActive : 1; // 0x8a
	char bEditableWhenInherited : 1; // 0x8a
	char bCanEverAffectNavigation : 1; // 0x8a
	char bIsEditorOnly : 1; // 0x8a
	EComponentCreationMethod CreationMethod; // 0x8c
	FMulticastSparseDelegate OnComponentActivated; // 0x8d
	FMulticastSparseDelegate OnComponentDeactivated; // 0x8e
	TArray<FSimpleMemberReference> UCSModifiedProperties; // 0x90
};

struct AEmitter : AActor {
	UParticleSystemComponent* ParticleSystemComponent; // 0x220
	char bDestroyOnSystemFinish : 1; // 0x228
	char bPostUpdateTickGroup : 1; // 0x228
	char bCurrentlyActive : 1; // 0x228
	FMulticastInlineDelegate OnParticleSpawn; // 0x230
	FMulticastInlineDelegate OnParticleBurst; // 0x240
	FMulticastInlineDelegate OnParticleDeath; // 0x250
	FMulticastInlineDelegate OnParticleCollide; // 0x260
};

struct UMovieScene3DTransformSection : UMovieSceneSection {
	FMovieSceneTransformMask TransformMask; // 0xe0
	FMovieSceneFloatChannel Translation[0x3]; // 0xe8
	FMovieSceneFloatChannel Rotation[0x3]; // 0x2c8
	FMovieSceneFloatChannel Scale[0x3]; // 0x4a8
	FMovieSceneFloatChannel ManualWeight; // 0x688
	bool bUseQuaternionInterpolation; // 0x72c
};

struct UBTService_DefaultFocus : UBTService_BlackboardBase {
	char FocusPriority; // 0x98
};

struct USubmixEffectConvolutionReverbPreset : USoundEffectSubmixPreset {
	FSubmixEffectConvolutionReverbSettings Settings; // 0x40
	UAudioImpulseResponse* ImpulseResponse; // 0x60
	ESubmixEffectConvolutionReverbBlockSize BlockSize; // 0x68
	bool bEnableHardwareAcceleration; // 0x69
};

struct UBTTask_MakeNoise : UBTTaskNode {
	float Loudnes; // 0x70
};

struct USynthComponentMonoWaveTable : USynthComponent {
	FMulticastInlineDelegate OnTableAltered; // 0x6e0
	FMulticastInlineDelegate OnNumTablesChanged; // 0x6f0
	UMonoWaveTableSynthPreset* CurrentPreset; // 0x700
};

struct UKSToastSoundLibrary : UKSUISoundLibrary {
	UAkAudioEvent* FriendToast; // 0x28
	UAkAudioEvent* PartyToast; // 0x30
	UAkAudioEvent* ErrorToast; // 0x38
	UAkAudioEvent* InfoToast; // 0x40
};

struct UUniformVector : UFieldNodeVector {
	float Magnitude; // 0xb0
	FVector Direction; // 0xb4
};

struct USourceEffectFoldbackDistortionPreset : USoundEffectSourcePreset {
	FSourceEffectFoldbackDistortionSettings Settings; // 0x74
};

struct UWBP_WeaponMasteryLevelUpBanner_C : UKSWeaponMasteryLevelUpScreen {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UWidgetAnimation* Anim_ClassMasteryLevel; // 0x580
	UWidgetAnimation* Anim_WeaponMasteryLevel; // 0x588
	UBorder* AreaShimmer_ColorWrapper; // 0x590
	UImage* AreaShineLeft_2; // 0x598
	UImage* AreaShineRight_2; // 0x5a0
	UImage* Back; // 0x5a8
	UImage* BackgroundCategoryRender; // 0x5b0
	UImage* BackgroundFlare; // 0x5b8
	UBorder* BackgroundFlare_ColorWrapper; // 0x5c0
	UWidgetSwitcher* BackgroundSwitcher; // 0x5c8
	UBorder* BannerScanlines_ColorWrapper; // 0x5d0
	UImage* CenterGradient; // 0x5d8
	UImage* CenterLensFlare1; // 0x5e0
	UImage* chevron; // 0x5e8
	UImage* chevron_2; // 0x5f0
	UImage* chevron_3; // 0x5f8
	UImage* chevron_4; // 0x600
	UImage* chevron_5; // 0x608
	UImage* chevron_6; // 0x610
	UBorder* Chevrons_ColorWrapper; // 0x618
	UImage* CircleGlowing_Left; // 0x620
	UImage* CircleGlowing_Right; // 0x628
	UImage* CircleThick_Left; // 0x630
	UImage* CircleThick_Right; // 0x638
	UImage* CornerDeco; // 0x640
	UImage* CornerDeco_2; // 0x648
	UOverlay* DecorationsContainer; // 0x650
	UBorder* DecorativeBits_ColorWrapper; // 0x658
	UImage* DiamondBase; // 0x660
	UImage* DiamondBlur; // 0x668
	UBorder* DiamondInterior_ColorWrapper; // 0x670
	UImage* EdgeGlow; // 0x678
	UImage* EdgeGlow_2; // 0x680
	UImage* Fill; // 0x688
	UImage* FillShadow; // 0x690
	UBorder* GlitchCenter_ColorWrapper; // 0x698
	UImage* GlitchMaterial; // 0x6a0
	UWBP_AdditiveImage_C* glowLine; // 0x6a8
	UWBP_AdditiveImage_C* glowLine_3; // 0x6b0
	UImage* godrays; // 0x6b8
	UBorder* IconFlares_ColorWrapper; // 0x6c0
	UBorder* LineShimmer_ColorWrapper; // 0x6c8
	UImage* LineShineLeft; // 0x6d0
	UImage* LineShineRight; // 0x6d8
	UBorder* MainFlare_ColorWrapper; // 0x6e0
	UWidgetSwitcher* MasteryBadgeSwitcher; // 0x6e8
	UImage* Pip_RightSlant; // 0x6f0
	UImage* Pip_RightSlant_2; // 0x6f8
	UImage* Pip_RightSlant_3; // 0x700
	UImage* Pip_RightSlant_4; // 0x708
	UImage* Pip_RightSlant_5; // 0x710
	UImage* Pip_RightSlant_6; // 0x718
	UImage* PrimaryBannerShade; // 0x720
	UTextBlock* PrimaryBannerText; // 0x728
	UWrapBox* RewardEntryContainer; // 0x730
	UWBP_AdditiveImage_C* ScanLines; // 0x738
	UWBP_AdditiveImage_C* ScanLines_3; // 0x740
	UImage* ShadeBox; // 0x748
	UImage* ShadeBox_2; // 0x750
	UImage* SheenLeft; // 0x758
	UImage* SheenRight; // 0x760
	UBorder* Sheens_ColorWrapper; // 0x768
	UImage* Stroke; // 0x770
	UImage* SubtitleBannerShade; // 0x778
	UTextBlock* SubtitleText; // 0x780
	UBorder* TechnoCircles_ColorWrapper; // 0x788
	UImage* VictoryDefeatGlow; // 0x790
	UImage* VictoryDefeatGlow_2; // 0x798
	UImage* VictoryDefeatGlow_Pulse; // 0x7a0
	UImage* VictoryDefeatGlow_Pulse_2; // 0x7a8
	UWBP_ListButton_Cosmetic_C* WBP_ListButton_Cosmetic; // 0x7b0
	UWBP_ListButton_Cosmetic_C* WBP_ListButton_Cosmetic_2; // 0x7b8
	UWBP_ListButton_Cosmetic_C* WBP_ListButton_Cosmetic_3; // 0x7c0
	UWBP_ListButton_Cosmetic_C* WBP_ListButton_Cosmetic_4; // 0x7c8
	UWBP_ListButton_Cosmetic_C* WBP_ListButton_Cosmetic_5; // 0x7d0
	UWBP_ListButton_Cosmetic_C* WBP_ListButton_Cosmetic_6; // 0x7d8
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x7e0
	UWBP_WeaponCategoryMasteryBadge_C* WBP_WeaponCategoryMasteryBadge; // 0x7e8
	UWBP_WeaponMasteryBadgeLarge_C* WBP_WeaponMasteryBadgeLarge; // 0x7f0
	UImage* WeaponIcon; // 0x7f8
	UImage* WeaponIconTriangle; // 0x800
	UImage* WeaponIconTriangle_2; // 0x808
	float TickTime; // 0x810
	FMulticastInlineDelegate TransitionFinished; // 0x818
	UAkAudioEvent* NewMasteryLevelSFX; // 0x828
	EKSWeaponMasteryType CurrentPopulatedMastery; // 0x830
	UAkAudioEvent* ClassMasteryLevelSFX; // 0x838
	UAkAudioEvent* WeaponsMasterSFX; // 0x840
	UAkAudioEvent* TransitionMasteryAwardSFX; // 0x848
	TMap<UKSWeaponCategoryAsset*, UKSWeaponAsset*> QueuedWeaponForCategory; // 0x850
	UKSWeaponAsset* PreviousWeapon; // 0x8a0
};

struct UComponentDelegateBinding : UDynamicBlueprintBinding {
	TArray<FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x28
};

struct UMaterialExpressionReflectionVectorWS : UMaterialExpression {
	FExpressionInput CustomWorldNormal; // 0x40
	char bNormalizeCustomWorldNormal : 1; // 0x54
};

struct UMovieSceneLiveLinkSubSection : UObject {
	FLiveLinkSubSectionData SubSectionData; // 0x28
	ULiveLinkRole* SubjectRole; // 0x38
};

struct UDatasmithGLTFSceneImportData : UDatasmithSceneImportData {
	FString Generator; // 0x28
	float Version; // 0x38
	FString Author; // 0x40
	FString License; // 0x50
	FString Source; // 0x60
};

struct UIntervalGizmo : UInteractiveGizmo {
	UGizmoTransformChangeStateTarget* StateTarget; // 0x38
	UTransformProxy* TransformProxy; // 0x50
	TArray<UPrimitiveComponent*> ActiveComponents; // 0x58
	TArray<UInteractiveGizmo*> ActiveGizmos; // 0x68
	UGizmoComponentAxisSource* AxisYSource; // 0x90
	UGizmoComponentAxisSource* AxisZSource; // 0x98
};

struct USourceEffectFilterPreset : USoundEffectSourcePreset {
	FSourceEffectFilterSettings Settings; // 0x74
};

struct UCheckBoxWidgetStyle : USlateWidgetStyleContainerBase {
	FCheckBoxStyle CheckBoxStyle; // 0x30
};

struct UMaterialExpressionLinearInterpolate : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	FExpressionInput Alpha; // 0x68
	float ConstA; // 0x7c
	float ConstB; // 0x80
	float ConstAlpha; // 0x84
};

struct USubmixEffectReverbPreset : USoundEffectSubmixPreset {
	FSubmixEffectReverbSettings Settings; // 0x9c
};

struct AKSEquipment : AInfo {
	bool bInitialized; // 0x220
	FKSEquipRepInfo EquipInfo; // 0x224
	TScriptInterface<IKSEquipmentManagerOwner> EquipmentManagerOwner; // 0x250
	UKSEquipmentManagerComponent* EquipmentManagerComponent; // 0x260
	FGiveItemParameters GiveParameters; // 0x280
	uint16_t EquipmentId; // 0x2b0
	UKSEquipmentCosmeticComponent* EquipmentCosmeticComponent; // 0x2b8
	FMulticastInlineDelegate OnCosmeticComponentCreated; // 0x2c8
};

struct ULiveLinkBasicFrameInterpolationProcessor : ULiveLinkFrameInterpolationProcessor {
	bool bInterpolatePropertyValues; // 0x28
};

struct UMediaComponent : UActorComponent {
	UMediaTexture* MediaTexture; // 0xb0
	UMediaPlayer* MediaPlayer; // 0xb8
};

struct UCamMod_Master_C : UCameraModifier {
	bool bIsActive; // 0x48
	FVector AddViewLocation; // 0x4c
	FRotator AddViewRotation; // 0x58
	float AddFOV; // 0x64
};

struct UWBP_NewsRotatorWidget_C : UKSNewsRotatorWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UWidgetAnimation* Anim_OnHover; // 0x540
	UWidgetAnimation* Anim_ChangeNewsImage; // 0x548
	UStandardButtonNoArt_C* ActionButton; // 0x550
	UWBP_ControllerPrompt_C* LeftNavPrompt; // 0x558
	UKSAsyncImage* NewsImage; // 0x560
	UKSAsyncImage* NewsImageAnimateOut; // 0x568
	UWBP_ControllerPrompt_C* RightNavPrompt; // 0x570
	UHorizontalBox* RotatorButtons; // 0x578
	UTextBlock* SlideTitle; // 0x580
	UTextBlock* SlideTitle_AnimOut; // 0x588
	UTextBlock* SpacerText; // 0x590
	UTextBlock* SpacerText_AnimOut; // 0x598
	UScaleBox* SpacerTextWrapper; // 0x5a0
	UScaleBox* SpacerTextWrapper_AnimOut; // 0x5a8
	UTextBlock* TextField_2; // 0x5b0
	UTextBlock* TextField_AnimOut; // 0x5b8
	UOverlay* TextGroupAnimateOut; // 0x5c0
	UOverlay* TextGroupWrapper; // 0x5c8
	UWBP_Header3_C* WBP_Header3_C_1; // 0x5d0
	UWBP_NewsRotatorButton_C* WBP_NewsRotatorButton; // 0x5d8
	float TickTimer; // 0x5e0
	int32_t CurrentPanelIndex; // 0x5e4
	bool IsAnimating; // 0x5e8
	TArray<UKSNewsRotatorData*> NewsRotatorObjects; // 0x5f0
	FMulticastInlineDelegate NewsVisibilityUpdated; // 0x600
	FName InputRouteName; // 0x610
};

struct UKSActivityRequirement_CustomMatch : UKSActivityRequirement {
	bool RequireEnabled; // 0x30
};

struct UParticleModuleLocationEmitterDirect : UParticleModuleLocationBase {
	FName EmitterName; // 0x30
};

struct USoundConcurrency : UObject {
	FSoundConcurrencySettings Concurrency; // 0x28
};

struct UTouchInterface : UObject {
	TArray<FTouchInputControl> Controls; // 0x28
	float ActiveOpacity; // 0x38
	float InactiveOpacity; // 0x3c
	float TimeUntilDeactive; // 0x40
	float TimeUntilReset; // 0x44
	float ActivationDelay; // 0x48
	bool bPreventRecenter; // 0x4c
	float StartupDelay; // 0x50
};

struct UGizmoBoxComponent : UGizmoBaseComponent {
	FVector Origin; // 0x450
	FQuat Rotation; // 0x460
	FVector Dimensions; // 0x470
	float LineThickness; // 0x47c
	bool bRemoveHiddenLines; // 0x480
	bool bEnableAxisFlip; // 0x481
};

struct UWBP_PlayerProfileScreen_AccountLevel_C : UUserWidget {
	UImage* background; // 0x238
	UImage* DiamondProgress; // 0x240
	UImage* Image_498; // 0x248
	UTextBlock* TextBlock_92; // 0x250
	UTextBlock* TxtCurrentXP; // 0x258
	UTextBlock* TxtNoRecentProgress; // 0x260
	UTextBlock* TxtPlayerLevel; // 0x268
	UTextBlock* TxtTargetXp; // 0x270
	UWidgetSwitcher* WidgetSwitcher_1; // 0x278
	FMulticastInlineDelegate OnActivityInstanceChanged; // 0x280
};

struct UKSWeaponAttachment : UKSItem {
	TSoftClassPtr<UObject> FunctionalClass; // 0x250
	TSoftClassPtr<UObject> CosmeticClass; // 0x278
	FGameplayTagContainer ValidAttachPoints; // 0x2a0
	UKSAttachmentCompatRules* WeaponCompatibilityRules; // 0x2c0
	FGameplayTagContainer CompatibleWeaponTypes; // 0x2c8
	bool bShouldBeInAttachmentCollection; // 0x2e8
	UAttachmentCollection* GlobalWeaponAttachmentCollection; // 0x2f0
};

struct UCreateSessionCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UTextureRenderTargetCube : UTextureRenderTarget {
	int32_t SizeX; // 0xc0
	FLinearColor ClearColor; // 0xc4
	EPixelFormat OverrideFormat; // 0xd4
	char bHDR : 1; // 0xd5
	char bForceLinearGamma : 1; // 0xd5
};

struct UWBP_CosmeticItem_Border_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ButtonSlot_Cosmetic_C* Button; // 0x528
	UImage* Image_134; // 0x530
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x538
	UPlatformInventoryItem* PlatformItem; // 0x540
	UAkAudioEvent* HoverBorderItemSFX; // 0x548
	UAkAudioEvent* ClickBorderItemSFX; // 0x550
	FMulticastInlineDelegate OnItemHovered; // 0x558
	FMulticastInlineDelegate OnItemUnhovered; // 0x568
	FMulticastInlineDelegate OnItemClicked; // 0x578
};

struct UAkLinuxInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings; // 0xb8
};

struct UInterpTrackFade : UInterpTrackFloatBase {
	char bPersistFade : 1; // 0x90
	char bFadeAudio : 1; // 0x90
	FLinearColor FadeColor; // 0x94
};

struct UMovieSceneCameraAnimTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> CameraAnimSections; // 0x58
};

struct UNiagaraDataInterfaceAudioOscilloscope : UNiagaraDataInterface {
	USoundSubmix* Submix; // 0x30
	int32_t Resolution; // 0x38
	float ScopeInMilliseconds; // 0x3c
};

struct AKSZipLine : AActor {
	TArray<AKSCharacter*> ZipLiners; // 0x230
	FVector ZipStart; // 0x240
	FVector ZipEnd; // 0x24c
	FVector ZipHangOffset; // 0x258
	float ZipSpeed; // 0x264
	bool bReadyToRide; // 0x268
	float CooldownTime; // 0x26c
	float MinimumInteractTime; // 0x270
	float InteractTime; // 0x274
	float LengthToEndToIgnore; // 0x278
	bool bUpline; // 0x27c
	bool bGrabFromBehind; // 0x27d
	bool bForgivingInteractionAngle; // 0x27e
	UKSInteractionType* InteractionType; // 0x280
	float AutoReleaseDistance; // 0x288
	float AutoReleaseSpeed; // 0x28c
	float AutoReleasePitchAngle; // 0x290
	bool bSupportsPreHold; // 0x294
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x298
	UKSInteractableComponent* InteractableComponent; // 0x2a0
};

struct UDistributionFloatUniform : UDistributionFloat {
	float Min; // 0x38
	float Max; // 0x3c
};

struct UModelComponent : UPrimitiveComponent {
	UBodySetup* ModelBodySetup; // 0x448
};

struct USoundNodeGroupControl : USoundNode {
	TArray<int32_t> GroupSizes; // 0x48
};

struct UKSReverseTracker : UKSAccoladeTracker {
	TArray<FPlayerDamageInfo> PlayerDamageInfo; // 0xa0
};

struct UKSWeaponComponentAmmoWidget : UKSWeaponComponentWidget {
	int32_t CachedAmmoInClip; // 0x540
	int32_t CachedClipSize; // 0x544
	int32_t CachedInReserve; // 0x548
	bool CachedIsReloading; // 0x54c
};

struct UNiagaraDataInterfaceAudioSpectrum : UNiagaraDataInterfaceAudioSubmix {
	int32_t Resolution; // 0x38
	float MinimumFrequency; // 0x3c
	float MaximumFrequency; // 0x40
	float NoiseFloorDb; // 0x44
};

struct UKSLoadingScreenSettings : UDeveloperSettings {
	FSoftObjectPath DefaultLoadingScreen; // 0x38
	FSoftObjectPath ThrobberPiece; // 0x50
	FSoftObjectPath HorizontalRule; // 0x68
	FSoftObjectPath HeadingFont; // 0x80
	FSoftObjectPath DefaultFont; // 0x98
};

struct UMainCharacterVOComponent_C : UKSVOComponent {
	FPointerToUberGraphFrame UberGraphFrame; // 0x180
	FKSVoicelineEvent UnderFire; // 0x188
	FKSVoicelineEvent TakingDamage; // 0x1c0
	float AngleThresholdForShotFromBehind; // 0x1f8
	FKSVoicelineEvent ShotFromBehind; // 0x200
	FKSVoicelineEvent AbilityOnCooldown; // 0x238
	FKSVoicelineEvent PrimaryPickedUp; // 0x270
	FKSVoicelineEvent GadgetPickedUp; // 0x2a8
	FKSVoicelineEvent MeleePickedUp; // 0x2e0
	FKSVoicelineEvent MedPackPickedUp; // 0x318
	FKSVoicelineEvent Revived; // 0x350
	FKSVoicelineEvent RevivedOther; // 0x388
	FKSVoicelineEvent RevivedOtherRemote; // 0x3c0
	FKSVoicelineEvent LastManStanding; // 0x3f8
	FKSVoicelineEvent Zipline; // 0x430
	FKSVoicelineEvent Upline; // 0x468
	FKSVoicelineEvent Landed; // 0x4a0
	FKSVoicelineEvent Mantle; // 0x4d8
	FKSVoicelineEvent Jumped; // 0x510
	FKSVoicelineEvent DodgeRoll; // 0x548
	FKSVoicelineEvent GetObjective; // 0x580
	FKSVoicelineEvent Victory; // 0x5b8
	FKSVoicelineEvent Skydive; // 0x5f0
	FKSVoicelineEvent LethalGadget; // 0x628
	FKSVoicelineEvent UtilityGadget; // 0x660
	FKSVoicelineEvent UtilityDeployable; // 0x698
	FKSVoicelineEvent LethalDeployable; // 0x6d0
	FKSVoicelineEvent InteractObjective; // 0x708
	FKSVoicelineEvent Select; // 0x740
	FKSVoicelineEvent ShopPurchase; // 0x778
	UKSShopRuleComponent* ShopRuleComponent; // 0x7b0
	FKSVoicelineEvent Intro; // 0x7b8
	FKSVoicelineEvent ReviveMe; // 0x7f0
	FKSVoicelineEvent Acknowledged; // 0x828
	FKSVoicelineEvent CancelThat; // 0x860
	FKSVoicelineEvent SuddenDeath; // 0x898
	TMap<EPingMessage, FKSVoicelineEvent> PingVOMap; // 0x8d0
	FKSVoicelineEvent BombPickedUp; // 0x920
	FKSVoicelineEvent BombPlant; // 0x958
	FKSVoicelineEvent BombSpottedArmed; // 0x990
	FKSVoicelineEvent BombSpottedUnarmed; // 0x9c8
	FKSVoicelineEvent BombDefusing; // 0xa00
	AKSPlayerState* PlayerState; // 0xa38
	FKSVoicelineEvent SprintStart; // 0xa40
	FKSVoicelineEvent SprintEnd; // 0xa78
	bool SprintStarted; // 0xab0
	FKSVoicelineEvent SprintEndStop; // 0xab8
	bool SprintPlaying; // 0xaf0
	float SprintingTimer; // 0xaf4
	bool SprintTimerExhale; // 0xaf8
	FTimerHandle SprintTimerHandle; // 0xb00
	FKSVoicelineEvent Ouch; // 0xb08
};

struct UWBP_SettingsBinding_C : UKSSettingsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UWBP_InputKeySelector_C* WBP_InputKeySelector_Gamepad; // 0x580
	UWBP_InputKeySelector_C* WBP_InputKeySelector_Primary; // 0x588
	UWBP_InputKeySelector_C* WBP_InputKeySelector_Secondary; // 0x590
	UWBP_SettingsBinding_Clear_C* WBP_SettingsBinding_Clear_GP; // 0x598
	UWBP_SettingsBinding_Clear_C* WBP_SettingsBinding_Clear_KBM; // 0x5a0
	FInputChord CachedPrimaryBinding; // 0x5a8
	FInputChord CachedSecondaryBinding; // 0x5c8
	FInputChord CachedGamepadBinding; // 0x5e8
	bool bCachedGamepadEnabled; // 0x608
	bool bCachedPrimaryEnabled; // 0x609
	bool bCachedSecondaryEnabled; // 0x60a
	float TimeToWaitForCombo; // 0x60c
	FKey Pending Gamepad Key; // 0x610
	FTimerHandle Combo Key Timer Handle; // 0x628
	bool bAllowClear; // 0x630
};

struct UInterpGroup : UObject {
	TArray<UInterpTrack*> InterpTracks; // 0x30
	FName GroupName; // 0x40
	FColor GroupColor; // 0x48
	char bCollapsed : 1; // 0x4c
	char bVisible : 1; // 0x4c
	char bIsFolder : 1; // 0x4c
	char bIsParented : 1; // 0x4c
	char bIsSelected : 1; // 0x4c
};

struct UEditableTextBoxWidgetStyle : USlateWidgetStyleContainerBase {
	FEditableTextBoxStyle EditableTextBoxStyle; // 0x30
};

struct AVectorFieldVolume : AActor {
	UVectorFieldComponent* VectorFieldComponent; // 0x220
};

struct UWBP_Social_Search_Tab_C : UKSSocialSearchPanel {
	FPointerToUberGraphFrame UberGraphFrame; // 0x5c8
	UKSTreeView* Results; // 0x5d0
	UWBP_Social_Search_bar_C* SearchBar; // 0x5d8
	UObject* LastSelectedItem; // 0x5e0
	UAkAudioEvent* ClickSocialSearchTabSFX; // 0x5e8
};

struct UKSActivityRewardCondition_Operator_Or : UKSActivityRewardCondition {
	TArray<UKSActivityRewardCondition*> SubConditions; // 0x30
};

struct UMenuAnchor : UContentWidget {
	UUserWidget* MenuClass; // 0x128
	FDelegate OnGetMenuContentEvent; // 0x130
	EMenuPlacement Placement; // 0x140
	bool bFitInWindow; // 0x141
	bool ShouldDeferPaintingAfterWindowContent; // 0x142
	bool UseApplicationMenuStack; // 0x143
	FMulticastInlineDelegate OnMenuOpenChanged; // 0x148
};

struct UAnimSet : UObject {
	char bAnimRotationOnly : 1; // 0x28
	TArray<FName> TrackBoneNames; // 0x30
	TArray<FAnimSetMeshLinkup> LinkupCache; // 0x40
	TArray<char> BoneUseAnimTranslation; // 0x50
	TArray<char> ForceUseMeshTranslation; // 0x60
	TArray<FName> UseTranslationBoneNames; // 0x70
	TArray<FName> ForceMeshTranslationBoneNames; // 0x80
	FName PreviewSkelMeshName; // 0x90
	FName BestRatioSkelMeshName; // 0x98
};

struct UDistributionVectorConstant : UDistributionVector {
	FVector Constant; // 0x38
	char bLockAxes : 1; // 0x44
	EDistributionVectorLockFlags LockedAxes; // 0x48
};

struct UKSEnvQueryContext_Character : UEnvQueryContext {
	FName BlackboardKeyName; // 0x28
};

struct UWBP_MatchSummary_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UHorizontalBox* BestStatsContainer; // 0x528
	UVerticalBox* StatContainer; // 0x530
	UWBP_MatchSummary_StatEntry_C* StatDamage; // 0x538
	UWBP_MatchSummary_StatEntry_C* StatDeaths; // 0x540
	UWBP_MatchSummary_StatEntry_C* StatDowns; // 0x548
	UWBP_MatchSummary_StatEntry_C* StatEliminations; // 0x550
	UWBP_MatchSummary_StatEntry_C* StatObjectives; // 0x558
	UWBP_MatchSummary_StatEntry_C* StatRevives; // 0x560
	UKSEMODataFactory* EMODataFactory; // 0x568
};

struct UPlayerHealthMeter_C : UKSPlayerHealthMeterBase {
	UWidgetAnimation* Pulseborder; // 0x238
	UWidgetAnimation* DisableImmune; // 0x240
	UWidgetAnimation* EnableImmune; // 0x248
	UImage* BorderShimmer; // 0x250
	UOverlay* ImmuneOverlay; // 0x258
	UImage* OutlineBorder; // 0x260
	UUserWidget* PlayerHealthMeterPadding; // 0x268
	UUserWidget* PlayerHealthMeterSegment; // 0x270
	UHorizontalBox* SegmentContainer; // 0x278
	int32_t HealthSegmentWidth; // 0x280
	bool ShouldUseDots; // 0x284
	FPlayerHealthMeterState CurrentHealthMeterState; // 0x288
	float SegmentPadding; // 0x2a0
	FLinearColor ImmuneBorderColor; // 0x2a4
	FLinearColor StandardBorderColor; // 0x2b4
	bool bIsImmune; // 0x2c4
	bool bIsEnemyHealth; // 0x2c5
	bool bNameplateWidgetOptimizations; // 0x2c6
	int32_t OriginalHealthSegmentWidth; // 0x2c8
	EColorVisionDeficiency ColorCorrection; // 0x2cc
	UImage* K2Node_CustomEvent_OutlineBorder_2; // 0x2d0
	UImage* K2Node_CustomEvent_OutlineBorder; // 0x2d8
	int32_t Temp_int_Loop_Counter_Variable; // 0x2e0
	int32_t Temp_int_Array_Index_Variable; // 0x2e4
	bool K2Node_Event_IsDesignTime; // 0x2e8
	FPlayerHealthMeterState K2Node_Event_HealthMeterState; // 0x2ec
	TArray<UWidget*> CallFunc_GetAllChildren_ReturnValue; // 0x308
	FMargin K2Node_MakeStruct_Margin; // 0x318
	UWidget* CallFunc_Array_Get_Item; // 0x328
	UUserWidget* K2Node_DynamicCast_AsPlayer_Health_Meter_Segment; // 0x330
	bool K2Node_DynamicCast_bSuccess; // 0x338
};

struct UKSActiveBonusesWidget : UKSWidget {
	UDataTable* EventLookupTable; // 0x520
};

struct UKSHeatSourceComponent : UActorComponent {
	FMulticastInlineDelegate OnTemperatureChanged; // 0xb0
	bool bSkipCosmeticIfOwnerIsLocallyViewed; // 0xc0
	bool bOnlySkipCosmeticForOnAndViewedState; // 0xc1
	float Temperature; // 0xc4
	float TemperatureScalarModifier; // 0xc8
	bool bDisableTickWhenTemperatureTransitionCompletes; // 0xcc
	float TransitionTargetTemp; // 0xd0
	float TransitionRate; // 0xd4
	EModViewModeState LastKnownViewModeState; // 0xd8
	TArray<UPrimitiveComponent*> WithoutHeatVisibilityBlockers; // 0xe0
	TArray<UPrimitiveComponent*> HeatOnlyVisibilityBlockers; // 0xf0
};

struct UWheeledVehicleMovementComponent : UPawnMovementComponent {
	char bDeprecatedSpringOffsetMode : 1; // 0x140
	char bReverseAsBrake : 1; // 0x140
	char bUseRVOAvoidance : 1; // 0x140
	char bRawHandbrakeInput : 1; // 0x140
	char bRawGearUpInput : 1; // 0x140
	char bRawGearDownInput : 1; // 0x140
	char bWasAvoidanceUpdated : 1; // 0x144
	float Mass; // 0x148
	TArray<FWheelSetup> WheelSetups; // 0x150
	float DragCoefficient; // 0x160
	float ChassisWidth; // 0x164
	float ChassisHeight; // 0x168
	float DragArea; // 0x16c
	float EstimatedMaxEngineSpeed; // 0x170
	float MaxEngineRPM; // 0x174
	float DebugDragMagnitude; // 0x178
	FVector InertiaTensorScale; // 0x17c
	float MinNormalizedTireLoad; // 0x188
	float MinNormalizedTireLoadFiltered; // 0x18c
	float MaxNormalizedTireLoad; // 0x190
	float MaxNormalizedTireLoadFiltered; // 0x194
	float ThresholdLongitudinalSpeed; // 0x198
	int32_t LowForwardSpeedSubStepCount; // 0x19c
	int32_t HighForwardSpeedSubStepCount; // 0x1a0
	TArray<UVehicleWheel*> Wheels; // 0x1a8
	float RVOAvoidanceRadius; // 0x1d0
	float RVOAvoidanceHeight; // 0x1d4
	float AvoidanceConsiderationRadius; // 0x1d8
	float RVOSteeringStep; // 0x1dc
	float RVOThrottleStep; // 0x1e0
	int32_t AvoidanceUID; // 0x1e4
	FNavAvoidanceMask AvoidanceGroup; // 0x1e8
	FNavAvoidanceMask GroupsToAvoid; // 0x1ec
	FNavAvoidanceMask GroupsToIgnore; // 0x1f0
	float AvoidanceWeight; // 0x1f4
	FVector PendingLaunchVelocity; // 0x1f8
	FReplicatedVehicleState ReplicatedState; // 0x204
	float RawSteeringInput; // 0x21c
	float RawThrottleInput; // 0x220
	float RawBrakeInput; // 0x224
	float SteeringInput; // 0x228
	float ThrottleInput; // 0x22c
	float BrakeInput; // 0x230
	float HandbrakeInput; // 0x234
	float IdleBrakeInput; // 0x238
	float StopThreshold; // 0x23c
	float WrongDirectionThreshold; // 0x240
	FVehicleInputRate ThrottleInputRate; // 0x244
	FVehicleInputRate BrakeInputRate; // 0x24c
	FVehicleInputRate HandbrakeInputRate; // 0x254
	FVehicleInputRate SteeringInputRate; // 0x25c
	AController* OverrideController; // 0x288
};

struct UWheeledVehicleMovementComponent4W : UWheeledVehicleMovementComponent {
	FVehicleEngineData EngineSetup; // 0x290
	FVehicleDifferential4WData DifferentialSetup; // 0x330
	float AckermannAccuracy; // 0x34c
	FVehicleTransmissionData TransmissionSetup; // 0x350
	FRuntimeFloatCurve SteeringCurve; // 0x380
};

struct UGizmoConstantFrameAxisSource : UObject {
	FVector Origin; // 0x30
	FVector Direction; // 0x3c
	FVector TangentX; // 0x48
	FVector TangentY; // 0x54
};

struct UKSEncounterWave : UDataAsset {
	UDataTable* SpawnTable; // 0x30
	TMap<int32_t, int32_t> nMaxSpawnsPerPlayer; // 0x38
	FKSRevealInfo WaveRevealParameters; // 0x88
};

struct UKSOverlayTabHubBase : UKSWidget {
	UDataTable* ViewsTable; // 0x520
	TArray<FName> ViewNames; // 0x528
	FName CurrentViewName; // 0x538
	FName MyViewRouteName; // 0x590
};

struct UKSWeaponMasteryRewardsScreen : UKSRogueMasteryWidget {
	EKSWeaponMasteryType CurrentDisplayedMasteryType; // 0x520
	UKSActivityInstance* CurrentProgressActivityInstance; // 0x528
	UKSWeaponAsset* PopulatedWeaponAsset; // 0x530
	UKSWeaponCategoryAsset* PopulatedWeaponCategory; // 0x538
};

struct UWBP_WrapCustomization_C : UKSWrapCustomizationScreen {
	FPointerToUberGraphFrame UberGraphFrame; // 0x580
	UTextBlock* ActionBtnText; // 0x588
	UWidgetSwitcher* CosmeticSwitcher; // 0x590
	USizeBox* EquipButtonScaler; // 0x598
	UWBP_ButtonStacked_C* EquipWrapButton; // 0x5a0
	UImage* GradientShade; // 0x5a8
	UImage* RedUnderscore; // 0x5b0
	UTextBlock* SubtitleLabel; // 0x5b8
	UWBP_ItemInfoContainer_Description_C* WBP_ItemInfoContainer_Description; // 0x5c0
	UWBP_ReactiveWrapStepPreview_C* WBP_ReactiveWrapStepPreview; // 0x5c8
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE; // 0x5d0
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_2; // 0x5d8
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_3; // 0x5e0
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_4; // 0x5e8
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_5; // 0x5f0
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_6; // 0x5f8
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_7; // 0x600
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_8; // 0x608
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_9; // 0x610
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_10; // 0x618
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_11; // 0x620
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_12; // 0x628
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_13; // 0x630
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_14; // 0x638
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_15; // 0x640
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_16; // 0x648
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_17; // 0x650
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_18; // 0x658
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_19; // 0x660
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_20; // 0x668
	UWBP_WrapSelectionEntry_C* WBP_WrapSelectionEntry_EXAMPLE_21; // 0x670
	UTextBlock* WeaponCategoryText; // 0x678
	UTextBlock* WeaponNameText; // 0x680
	UUniformGridPanel* WrapItemContainer; // 0x688
	UKSScrollBox* WrapScrollbox; // 0x690
	FName WeaponViewActorName; // 0x698
	int32_t ItemRowWidth; // 0x6a0
	UKSWrapSelectionEntry* DefaultFocusWidget; // 0x6a8
};

struct UGameUserSettings : UObject {
	bool bUseVSync; // 0x28
	bool bUseDynamicResolution; // 0x29
	uint32_t ResolutionSizeX; // 0x80
	uint32_t ResolutionSizeY; // 0x84
	uint32_t LastUserConfirmedResolutionSizeX; // 0x88
	uint32_t LastUserConfirmedResolutionSizeY; // 0x8c
	int32_t WindowPosX; // 0x90
	int32_t WindowPosY; // 0x94
	int32_t FullscreenMode; // 0x98
	int32_t LastConfirmedFullscreenMode; // 0x9c
	int32_t PreferredFullscreenMode; // 0xa0
	uint32_t Version; // 0xa4
	int32_t AudioQualityLevel; // 0xa8
	int32_t LastConfirmedAudioQualityLevel; // 0xac
	float FrameRateLimit; // 0xb0
	int32_t DesiredScreenWidth; // 0xb8
	bool bUseDesiredScreenHeight; // 0xbc
	int32_t DesiredScreenHeight; // 0xc0
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xc4
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xc8
	float LastRecommendedScreenWidth; // 0xcc
	float LastRecommendedScreenHeight; // 0xd0
	float LastCPUBenchmarkResult; // 0xd4
	float LastGPUBenchmarkResult; // 0xd8
	TArray<float> LastCPUBenchmarkSteps; // 0xe0
	TArray<float> LastGPUBenchmarkSteps; // 0xf0
	float LastGPUBenchmarkMultiplier; // 0x100
	bool bUseHDRDisplayOutput; // 0x104
	int32_t HDRDisplayOutputNits; // 0x108
	FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x110
};

struct UKSWeaponAttachment_ScopeFixedFOV : UKSWeaponAttachment_Scope {
	float AimDownSightsFov; // 0x2f8
};

struct ULiveLinkVirtualSubjectSourceSettings : ULiveLinkSourceSettings {
	FName SourceName; // 0x98
};

struct UNavArea : UNavAreaBase {
	float DefaultCost; // 0x30
	float FixedAreaEnteringCost; // 0x34
	FColor DrawColor; // 0x38
	FNavAgentSelector SupportedAgents; // 0x3c
	char bSupportsAgent0 : 1; // 0x40
	char bSupportsAgent1 : 1; // 0x40
	char bSupportsAgent2 : 1; // 0x40
	char bSupportsAgent3 : 1; // 0x40
	char bSupportsAgent4 : 1; // 0x40
	char bSupportsAgent5 : 1; // 0x40
	char bSupportsAgent6 : 1; // 0x40
	char bSupportsAgent7 : 1; // 0x40
	char bSupportsAgent8 : 1; // 0x41
	char bSupportsAgent9 : 1; // 0x41
	char bSupportsAgent10 : 1; // 0x41
	char bSupportsAgent11 : 1; // 0x41
	char bSupportsAgent12 : 1; // 0x41
	char bSupportsAgent13 : 1; // 0x41
	char bSupportsAgent14 : 1; // 0x41
	char bSupportsAgent15 : 1; // 0x41
};

struct USFXEvent_C : UAnimNotify {
	UAkAudioEvent* AkEvent; // 0x38
	bool bStopWhenAttachedToDestroyed; // 0x40
};

struct USkinnableSkeletalMeshComponent : USkeletalMeshComponentBudgeted {
	bool bDelaySkinUpdatesUntilTick; // 0xbb0
	bool bSkinUpdateIsQueued; // 0xbb1
	FName SkeletalMeshKeyword; // 0xbb4
	USkeletalMesh* FailSafeSkeletalMesh; // 0xbc0
	FName PhysicsAssetKeyword; // 0xbc8
	UPhysicsAsset* FailSafePhysicsAsset; // 0xbd0
	FName AnimInstanceClassKeyword; // 0xbd8
	UAnimInstance* FailSafeAnimClass; // 0xbe0
	UAnimInstance* LastSkinnedAnimClass; // 0xbe8
	bool bForceAnimationUpdateOnSkinUpdate; // 0xbf0
	UMultiSkinObject* SkinObject; // 0xbf8
	FMulticastInlineDelegate OnAnimInitializedOnSkinnableMeshDel; // 0xc00
	bool bAllowMaterialSkinning; // 0xc40
	TArray<FString> MaterialSkinningPrefixes; // 0xc48
	TSet<FName> MaterialSkinningPrefixes_New; // 0xc58
	int32_t ForcedLodModel_Skinned; // 0xcf0
};

struct UPathFollowingComponent : UActorComponent {
	UNavMovementComponent* MovementComp; // 0xe8
	ANavigationData* MyNavData; // 0xf8
};

struct AKSAnnouncer : AInfo {
	FMulticastInlineDelegate OnAllyLivingPlayersChanged; // 0x238
	FMulticastInlineDelegate OnEnemyLivingPlayersChanged; // 0x248
	UKSVOPriorityManager* PriorityManager; // 0x258
	UAkComponent* AnnouncerAkComponent; // 0x270
	TMap<FName, FTimeAnnouncementList> PhaseTimeAnnouncements; // 0x278
	UAkAudioEvent* SuddenDeathAnnouncement; // 0x2c8
	UAkAudioEvent* FallbackEliminationAnnouncement; // 0x2d8
	UAkAudioEvent* FallbackEliminationAnnouncementAlly; // 0x2e0
	float MaxAnnouncementDuration; // 0x328
	FDelegate OnVOLineFinished; // 0x32c
	float VODuckingAmount; // 0x33c
};

struct UKSMilestoneCompletedScreen : UKSWidget {
	UKSWeaponProgressMeter* WeaponMasteryMeter; // 0x520
	UKSWeaponAsset* PopulatedWeapon; // 0x528
	UKSMilestoneCompletedSummary* CurrentMilestoneData; // 0x530
};

struct UKSAnimNotifyState_Prop : UAnimNotifyState {
	USkeletalMesh* SkeletalMesh; // 0x30
	UAnimInstance* AnimClass; // 0x38
	UStaticMesh* StaticMesh; // 0x40
	FPoolAttachmentInfo PropAttachmentInfo; // 0x48
};

struct UKSGameViewportClient : UPUMG_GameViewportClient {
	UTexture2D* FadeTexture; // 0x378
};

struct UMovieSceneWidgetMaterialTrack : UMovieSceneMaterialTrack {
	TArray<FName> BrushPropertyNamePath; // 0x68
	FName TrackName; // 0x78
};

struct UKSActivityRewardCondition_Elimination : UKSActivityRewardCondition {
	bool IsElimination; // 0x30
};

struct UKSAccoladeQueueWidget : UKSWidget {
	bool IsBusy; // 0x520
	int32_t NumInQueue; // 0x524
	FMulticastInlineDelegate OnAccoladeReceived; // 0x528
	FMulticastInlineDelegate OnAccoladeUpdateMultiplier; // 0x538
};

struct USettingsInfo_Quality_C : UKSSettingsInfo_Generic {
	FPointerToUberGraphFrame UberGraphFrame; // 0x118
};

struct UWBP_RogueArmoryPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* CategoryOneCount_SinglePrimary; // 0x528
	UWBP_AsyncIcon_C* CategoryOneIcon_SinglePrimary; // 0x530
	UTextBlock* CategoryOneName_SinglePrimary; // 0x538
	UTextBlock* CategoryTwoCount_SinglePrimary; // 0x540
	UWBP_AsyncIcon_C* CategoryTwoIcon_SinglePrimary; // 0x548
	UTextBlock* CategoryTwoName_SinglePrimary; // 0x550
	UWBP_WeaponProgressButton_C* GadgetSlot1; // 0x558
	UWBP_WeaponProgressButton_C* GadgetSlot2; // 0x560
	UWBP_WeaponProgressButton_C* MeleeSlot; // 0x568
	UWBP_WeaponProgressButton_C* PrimarySlot; // 0x570
	UWBP_StandardButton_02_C* PrimaryWeaponSwapButton; // 0x578
	UWBP_WeaponProgressButton_C* SecondarySlot; // 0x580
	UWBP_CallToAction_C* WBP_CallToAction; // 0x588
	UWBP_RoguePanelHeader_C* WBP_RoguePanelHeader; // 0x590
	UKSRogueDetailsWidget* RogueDetailsWidget; // 0x598
	FMulticastInlineDelegate OnSelectPrimaryWeaponSwap; // 0x5a0
	UKSJobItem* LocalJobItem; // 0x5b0
};

struct ULightPropagationVolumeBlendable : UObject {
	FLightPropagationVolumeSettings Settings; // 0x30
	float BlendWeight; // 0x70
};

struct UKSJobSelectionRules_Draft : UKSJobSelectionRules {
	TArray<FJobSelectDraftingTask> InitialDraftList; // 0xd8
	TArray<FJobSelectDraftingTask> RepeatingDraftList; // 0xe8
	float FailSafeTimeToPick; // 0xf8
	bool bImmediatelyLock; // 0xfc
	float TimeToTrade; // 0x100
	bool bTeamNumRepresentSideNum; // 0x104
	UKSJobSelectionRules* AlternateSecondaryRules; // 0x108
};

struct AAkSpatialAudioVolume : AVolume {
	UAkSurfaceReflectorSetComponent* SurfaceReflectorSet; // 0x258
	UAkLateReverbComponent* LateReverb; // 0x260
	UAkRoomComponent* Room; // 0x268
};

struct UKSHUDComponent_Objective : UKSHUDComponent {
	TSoftObjectPtr<UTexture2D> TopBarObjectiveIcon; // 0xb0
	TSoftObjectPtr<UTexture2D> NameplateObjectiveIcon; // 0xd8
	TSoftObjectPtr<UTexture2D> ScoreIcon; // 0x100
	TSoftObjectPtr<UTexture2D> TicketIcon; // 0x128
	bool ShowNameplateObjectiveForEnemy; // 0x150
	bool ForceAlwaysShowNameplateObjective; // 0x151
	bool ShowTopBarObjectiveMarker; // 0x152
	bool ShowBombIconInTopBar; // 0x153
	bool ConnectTopBarMarkerToTimer; // 0x154
	bool ShowInWorldMarkerTimer; // 0x155
	bool ObjectiveMarkerProgressFills; // 0x156
	bool ScoreboardDisplayIntraScoring; // 0x157
	bool UseIntraScoring; // 0x158
	bool UseTicketSystem; // 0x159
	ETopbarPointsBarType PointsBarType; // 0x15a
	ETopbarTicketDisplaySide TicketDisplaySide; // 0x15b
	EGameTimerType MarkerTimerType; // 0x15c
};

struct UKSWeaponAsset_Melee : UKSWeaponAsset_WithProjectile {
	FVector MeleeSphereOffset; // 0x988
	float MeleeSphereRadius; // 0x994
	float MeleeSwingActiveTimeSeconds; // 0x998
	TArray<EObjectTypeQuery> OverlapObjectTypes; // 0x9a0
	ETraceTypeQuery TraceChannel; // 0x9b0
	float MaxLungeDistance; // 0x9b4
	float MaxLungeDistanceCorrectionMultiplier; // 0x9b8
	float MaxLungeDuration; // 0x9bc
	float LungeConeHalfAngle; // 0x9c0
	float LungeConeOriginDistanceOffset; // 0x9c4
};

struct UKSActivity_ViewRedirector : UPUMG_ViewRedirecter {
	TArray<TSoftObjectPtr<UKSActivity>> ActivitiesToCheck; // 0x28
};

struct UKSActivityRequirement_ContractActive : UKSActivityRequirement {
	TArray<UKSContainerItem_Item*> ContractItems; // 0x30
};

struct UKSWeaponMasteryLevelUpScreen : UKSWidget {
	FKSWeaponMasteryLevelUpSummaryEntry PopulatedEntry; // 0x520
	FName ViewActorName; // 0x568
};

struct UItemCollection : UPrimaryDataAsset {
	FPrimaryAssetRules Rules; // 0x30
	FGameplayTagQuery CollectionQuery; // 0x40
	FName PrimaryAssetType; // 0x88
};

struct UKSActivityRewardCondition_Headshot : UKSActivityRewardCondition {
	bool IsHeadshot; // 0x30
};

struct UBTTaskNode : UBTNode {
	TArray<UBTService*> Services; // 0x58
	char bIgnoreRestartSelf : 1; // 0x68
};

struct UInterpGroupCamera : UInterpGroup {
	UCameraAnim* CameraAnimInst; // 0x50
	float CompressTolerance; // 0x58
};

struct UInterpToMovementComponent : UMovementComponent {
	float Duration; // 0xf0
	char bPauseOnImpact : 1; // 0xf4
	bool bSweep; // 0xf8
	ETeleportType TeleportType; // 0xf9
	EInterpToBehaviourType BehaviourType; // 0xfa
	bool bCheckIfStillInWorld; // 0xfb
	char bForceSubStepping : 1; // 0xfc
	FMulticastInlineDelegate OnInterpToReverse; // 0x100
	FMulticastInlineDelegate OnInterpToStop; // 0x110
	FMulticastInlineDelegate OnWaitBeginDelegate; // 0x120
	FMulticastInlineDelegate OnWaitEndDelegate; // 0x130
	FMulticastInlineDelegate OnResetDelegate; // 0x140
	float MaxSimulationTimeStep; // 0x150
	int32_t MaxSimulationIterations; // 0x154
	TArray<FInterpControlPoint> ControlPoints; // 0x158
};

struct UANotifyState_VFX_C : UAnimNotifyState {
	UParticleSystem* ParticleSystem; // 0x30
	FVector LocationOffset; // 0x38
	FRotator RotationOffset; // 0x44
	FVector Scale; // 0x50
	bool Attached; // 0x5c
	FName SocketName; // 0x60
	bool UseSkinnedParticleSystem; // 0x68
	FName SkinnedParticleSystemName; // 0x6c
};

struct UWBP_RogueMasteryPanelTrack_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* CurrentXp; // 0x528
	UWBP_KeyCallout_C* GamepadPageLeft; // 0x530
	UWBP_KeyCallout_C* GamepadPageRight; // 0x538
	UTextBlock* MasteryLevel; // 0x540
	UHorizontalBox* Pagination; // 0x548
	UTextBlock* PaginationLabel; // 0x550
	UKSScrollBox* RewardsSectionContainer; // 0x558
	UWBP_ButtonArrow_C* ScrollLeftButton; // 0x560
	UHorizontalBox* ScrollLeftIndicator; // 0x568
	UWBP_ButtonArrow_C* ScrollRightButton; // 0x570
	UHorizontalBox* ScrollRightIndicator; // 0x578
	UWBP_RogueMasteryTrackSection_C* Section0; // 0x580
	UWBP_RogueMasteryTrackSection_C* Section1; // 0x588
	UWBP_RogueMasteryTrackSection_FinalPrestige_C* Section2; // 0x590
	UTextBlock* Slash; // 0x598
	UTextBlock* TotalXp; // 0x5a0
	UHorizontalBox* XPWrapper; // 0x5a8
	int32_t CurrentIndex; // 0x5b0
	FMulticastInlineDelegate OnMasteryLevelSelectedEvent; // 0x5b8
	FMulticastInlineDelegate OnPrestiegeSelected; // 0x5c8
	int32_t LAST_SECTION_INDEX; // 0x5d8
	int32_t SelectedTierNumber; // 0x5dc
	bool HasGamepadFocus; // 0x5e0
	FMulticastInlineDelegate OnViewPreviousMasteryLevelFailed; // 0x5e8
};

struct UInputComponent : UActorComponent {
	TArray<FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x120
};

struct UWBP_ChallengeEntry_Card_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnRerollHoverAnim; // 0x528
	UWidgetAnimation* OnHoverAnim_COMPLETE; // 0x530
	UWidgetAnimation* OnRerollAnim; // 0x538
	UWidgetAnimation* OnHoverAnim; // 0x540
	UVerticalBox* CardContentGroup; // 0x548
	UWidgetSwitcher* ChallengeBkg_Switcher; // 0x550
	UTextBlock* ChallengeDescription; // 0x558
	UTextBlock* ChallengeProgressText; // 0x560
	UTextBlock* CompletedText; // 0x568
	UGamepadPrompt_Bright_C* GamepadPrompt_Bright; // 0x570
	UButton* HoverButton; // 0x578
	UImage* Image; // 0x580
	UImage* Image_390; // 0x588
	UImage* Image_1045; // 0x590
	UWBP_ProgressEarnedBar_C* ProgressBar; // 0x598
	UWidgetSwitcher* PromptSwitcher; // 0x5a0
	UButton* RerollButton; // 0x5a8
	UOverlay* RerollButtonWrapper; // 0x5b0
	UHorizontalBox* RewardsContainer; // 0x5b8
	UWidgetSwitcher* RewardSwitcher; // 0x5c0
	UImage* SelectionFrame; // 0x5c8
	UTextBlock* SimpleEmptyText; // 0x5d0
	UWBP_Challenge_Rewards_Badge_C* WBP_Challenge_Rewards_Badge_EXAMPLE; // 0x5d8
	UWBP_Challenge_Rewards_Badge_C* WBP_Challenge_Rewards_Badge_EXAMPLE_01; // 0x5e0
	EChallengeEntry_Card_State Current Visual State; // 0x5e8
	UKSActivityInstance* Challenge Activity Instance; // 0x5f0
};

struct UWBP_StorePanelButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnHover; // 0x528
	UImage* ClickFill; // 0x530
	UBorder* HighlightBorderWrapper; // 0x538
	UButton* HitTarget; // 0x540
	UImage* Image_215; // 0x548
	UNamedSlot* NamedSlot_151; // 0x550
	UImage* PanelBG; // 0x558
	FMulticastInlineDelegate OnBtnClicked; // 0x560
	FMulticastInlineDelegate OnBtnHovered; // 0x570
	FMulticastInlineDelegate OnBtnUnhovered; // 0x580
	bool bIsDisable; // 0x590
	bool bIsActive; // 0x591
	FLinearColor TintColor; // 0x594
	bool bColorOverride; // 0x5a4
	UAkAudioEvent* HoverStorePanelBtnSFX; // 0x5a8
	UAkAudioEvent* ClickStorePanelBtnSFX; // 0x5b0
};

struct UKSTestWeaponCategory : UKSItem {
	FText CategoryDisplayNameSingular; // 0x250
	FGameplayTag CategoryTag; // 0x268
	TSoftObjectPtr<UTexture2D> SoftSymbolIcon; // 0x270
	TSoftObjectPtr<UTexture2D> SoftMasteryIcon; // 0x298
	TSoftObjectPtr<UTexture2D> SoftVerticalSplash; // 0x2c0
	TSoftObjectPtr<UTexture2D> SoftHorizontalSplash; // 0x2e8
	bool ShowsMasteryUI; // 0x310
	bool ShowsWeaponUnlockUI; // 0x311
	bool ShowsRelatedJobsUI; // 0x312
};

struct AKSRoyaleSafeZone : AActor {
	UBoxComponent* ValidityZone; // 0x220
	UKSWeaponAsset* ZoneDamageAsset; // 0x228
	float StartingRadius; // 0x230
	FSafeZoneParams OldParams; // 0x234
	FSafeZoneParams NewParams; // 0x244
	float ZoneLerpVelocity; // 0x254
	float ZoneLerpAlpha; // 0x258
	FVector CurrentCenter; // 0x25c
	float CurrentRadius; // 0x268
	bool ZoneActive; // 0x26c
	bool IsShrinking; // 0x26d
	UKSAkComponent* Sound; // 0x278
	UAkAudioEvent* SoundStart; // 0x280
	UAkAudioEvent* SoundStop; // 0x288
};

struct AKSPingBeaconBase : AActor {
	UDataTable* ContextualPingTypesDT; // 0x220
	AKSPlayerState* PlayerOwner; // 0x228
	FPingInfo BeaconPingInfo; // 0x230
};

struct UKSPlayerMatchStats : UObject {
	TMap<EPlayerStatType, FPlayerMatchStatInfo> StatsByType; // 0x28
};

struct UWBP_error_report_C : UUserWidget {
	UImage* Image_62; // 0x238
};

struct UParticleModuleMeshMaterial : UParticleModuleMaterialBase {
	TArray<UMaterialInterface*> MeshMaterials; // 0x30
};

struct UKSModInst_OnShotAtAndDodgeRollEnd : UKSModInst_OnShotAt {
	EWillToSurviveModState WillToSurviveModState; // 0x1d8
};

struct UKSSmoothingComponent : USceneComponent {
	bool bSmoothTranslation; // 0x208
	bool bSmoothRotation; // 0x209
	FVector TranslationOffset; // 0x20c
	FQuat RotationOffset; // 0x220
	AKSCharacter* CharacterOwner; // 0x230
};

struct ANeutralBombZone_C : AKSNeutralBombZone {
	FPointerToUberGraphFrame UberGraphFrame; // 0x478
	UBoxComponent* Z Axis; // 0x480
	UMaterialInstanceDynamic* ZoneMaterial; // 0x488
	AKSCharacterBase* BombHolderWhenArming; // 0x490
	FGameplayTag NewVar_1; // 0x498
};

struct UMovieScene3DPathSection : UMovieScene3DConstraintSection {
	FMovieSceneFloatChannel TimingCurve; // 0x108
	MovieScene3DPathSection_Axis FrontAxisEnum; // 0x1a8
	MovieScene3DPathSection_Axis UpAxisEnum; // 0x1a9
	char bFollow : 1; // 0x1ac
	char bReverse : 1; // 0x1ac
	char bForceUpright : 1; // 0x1ac
};

struct UFirstTimeBrightnessWidget_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UImage* Decro; // 0x4c8
	UOverlay* SettingsWidgetContainer; // 0x4d0
	UTextBlock* Title; // 0x4d8
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x4e0
	FKSSettingsWidgetConfig SettingsWidgetConfig; // 0x4e8
	UKSSettingsInfoBase* SettingsInfo; // 0x4f8
	UKSSettingsWidget* SettingsWidget; // 0x500
	UAkAudioEvent* ShowFirstTimeBrightnessSFX; // 0x508
};

struct UKSModInst_BuffWeaponOnActivation : UKSModInst_GiveWeaponOnActivation {
	TArray<UKSWeaponAsset*> AssetsToBuff; // 0x500
	FGameplayTag EquipPointToBuff; // 0x510
	FGameplayTag EquipPointOfBuff; // 0x518
	bool bRequireBaseToActivate; // 0x520
	bool bSyncAmmo; // 0x521
	TWeakObjectPtr<AKSWeapon> BaseWeapon; // 0x524
	TWeakObjectPtr<UKSWeaponComponent> BaseWeaponComponent; // 0x52c
	TWeakObjectPtr<UKSWeaponComponent> BuffWeaponComponent; // 0x534
};

struct URuntimeVirtualTextureComponent : USceneComponent {
	URuntimeVirtualTexture* VirtualTexture; // 0x208
	bool bUseStreamingLowMipsInEditor; // 0x210
	AActor* BoundsSourceActor; // 0x218
};

struct UBTDecorator_BlackboardBase : UBTDecorator {
	FBlackboardKeySelector BlackboardKey; // 0x68
};

struct UMaterialExpressionArctangent : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct AFieldSystemActor : AActor {
	UFieldSystemComponent* FieldSystemComponent; // 0x220
};

struct UWBP_SectionListingBar_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UKSAsyncImage* LeftGamepadTrigger; // 0x528
	UKSAsyncImage* RightGamepadTrigger; // 0x530
	UHorizontalBox* SectionButtons; // 0x538
	UOverlay* TriggerContainer; // 0x540
	UOverlay* TriggerContainer1; // 0x548
	FMulticastInlineDelegate OnSectionSelected; // 0x550
};

struct AProceduralFoliageBlockingVolume : AVolume {
	AProceduralFoliageVolume* ProceduralFoliageVolume; // 0x258
};

struct UMaterialExpressionSceneDepth : UMaterialExpression {
	EMaterialSceneAttributeInputMode InputMode; // 0x40
	FExpressionInput Input; // 0x44
	FExpressionInput Coordinates; // 0x58
	FVector2D ConstInput; // 0x6c
};

struct UKSShopItemButtonBase : UKSWidget {
	FMulticastInlineDelegate OnShopSelection; // 0x520
	FMulticastInlineDelegate OnShopViewItemDetails; // 0x530
	FMulticastInlineDelegate OnItemSelected; // 0x540
	FMulticastInlineDelegate OnItemViewDetails; // 0x550
	EShopItemType ActiveShopSlot; // 0x560
};

struct AGameState : AGameStateBase {
	FName MatchState; // 0x270
	FName PreviousMatchState; // 0x278
	int32_t ElapsedTime; // 0x280
};

struct UAkAssetDataWithMedia : UAkAssetData {
	TArray<TSoftObjectPtr<UAkMediaAsset>> MediaList; // 0x68
};

struct UMaterialExpressionArctangent2 : UMaterialExpression {
	FExpressionInput Y; // 0x40
	FExpressionInput X; // 0x54
};

struct UKSBTD_HasBeenHitRecently : UBTDecorator {
	float MaxTimeSinceHit; // 0x68
};

struct AKSControlPoint : AKSObjectiveBase {
	EKSPOIState POIState; // 0x390
	FKSObjectiveInfo ObjectiveInfo; // 0x398
	FKSObjectiveTimerInfo ObjectiveTimerInfo; // 0x400
	FKSObjectiveCaptureInfo ObjectiveCaptureInfo; // 0x438
	FMulticastInlineDelegate OnCapturedDelegate; // 0x450
	FMulticastInlineDelegate OnUncapturedDelegate; // 0x460
	FMulticastInlineDelegate OnContestedDelegate; // 0x470
	FMulticastInlineDelegate OnUncontestedDelegate; // 0x480
	FMulticastInlineDelegate OnOwningTeamChangedDelegate; // 0x490
	FMulticastInlineDelegate OnCapturingTeamChangedDelegate; // 0x4a0
	FMulticastInlineDelegate OnScorePeriodElapsedDelegate; // 0x4b0
	FKSControlPointSettings ControlPointSettings; // 0x4c0
	AKSTeamState* OwningTeam; // 0x4f0
	AKSTeamState* CapturingTeam; // 0x4f8
	float CaptureProgress; // 0x500
	float ScoreUpdatePeriod; // 0x504
	char NumTeamMembersCapturing; // 0x508
	float SimulatedProgressRate; // 0x50c
	float SimulatedTimeUntilScore; // 0x510
	int32_t FavoredSide; // 0x514
	bool bHideLocked; // 0x518
	TArray<UPrimitiveComponent*> RegisteredPawnOverlapComponents; // 0x520
	TArray<AKSCharacterBase*> OverlappingPawns; // 0x530
};

struct UKSWeaponAsset_Grenade : UKSWeaponAsset_WithProjectile {
	bool bAllowCooking; // 0x988
	float MinimumCookTime; // 0x98c
	float FuseTime; // 0x990
	float MinHandRemainingFuse; // 0x994
	bool bFuseTicksInHand; // 0x998
	TSoftClassPtr<UObject> GrenadeClass; // 0x9a0
};

struct UKSSettingsContainer : UKSWidget {
	TArray<UKSSettingsWidget*> SettingsWidgets; // 0x520
	UKSSettingsPreview* AssociatePreviewWidget; // 0x530
	UKSSettingsContainerConfigAsset* ContainerConfigAsset; // 0x538
};

struct UParticleModuleAttractorPointGravity : UParticleModuleAttractorBase {
	FVector Position; // 0x30
	float Radius; // 0x3c
	UDistributionFloat* Strength; // 0x40
	FRawDistributionFloat StrengthRaw; // 0x48
};

struct ULoggingInStatusTempClone_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* background; // 0x528
	UImage* Gradient; // 0x530
	UImage* Image_106; // 0x538
	UWBP_StandardButtonMedium_C* LogOffBtn; // 0x540
	UTextBlock* WaitQueueMessage; // 0x548
	UTextBlock* WaitQueueTitle; // 0x550
	UOverlay* WaitQueueWrapper; // 0x558
	UWBP_EpilepsyWarning_C* WBP_EpilepsyWarning; // 0x560
	UWBP_ThrobberShield_C* WBP_ThrobberShield; // 0x568
	UPUMG_LoginDataFactory* LoginDataFactory; // 0x570
};

struct UPUMG_DataFactory : UObject {
	APUMG_HUD* MyHud; // 0x28
};

struct UKSModInst_OnShotAt : UKSPlayerModInstance {
	float MinimumDamage; // 0x1b8
	TArray<EDamageCategory> ValidDamageCategories; // 0x1c0
};

struct UGameplayTagsList : UObject {
	FString ConfigFileName; // 0x28
	TArray<FGameplayTagTableRow> GameplayTagList; // 0x38
};

struct UIpNetDriver : UNetDriver {
	char LogPortUnreach : 1; // 0x778
	char AllowPlayerPortUnreach : 1; // 0x778
	uint32_t MaxPortCountToTry; // 0x77c
	uint32_t ServerDesiredSocketReceiveBufferBytes; // 0x78c
	uint32_t ServerDesiredSocketSendBufferBytes; // 0x790
	uint32_t ClientDesiredSocketReceiveBufferBytes; // 0x794
	uint32_t ClientDesiredSocketSendBufferBytes; // 0x798
	double MaxSecondsInReceive; // 0x7a0
	int32_t NbPacketsBetweenReceiveTimeTest; // 0x7a8
	float ResolutionConnectionTimeout; // 0x7ac
};

struct ALevelStreamingVolume : AVolume {
	TArray<FName> StreamingLevelNames; // 0x258
	char bEditorPreVisOnly : 1; // 0x268
	char bDisabled : 1; // 0x268
	EStreamingVolumeUsage StreamingUsage; // 0x26c
};

struct UEnvQueryTest_Project : UEnvQueryTest {
	FEnvTraceData ProjectionData; // 0x1f8
};

struct UEnvQueryGenerator : UEnvQueryNode {
	FString OptionName; // 0x30
	UEnvQueryItemType* ItemType; // 0x40
	char bAutoSortTests : 1; // 0x48
};

struct UMaterialExpressionDistance : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
};

struct AKSLagCompensatedActor : AActor {
	AKSLagCompensatedActor* RealActor; // 0x220
	AKSLagCompensatedActor* FakeActor; // 0x228
	float PredictedSpawnTimeoutTime; // 0x230
	bool bDestroyFakeOnYieldToReal; // 0x234
	int32_t DefaultTeamNum; // 0x238
	FSerializedMctsNetId InstigatorId; // 0x240
	uint64_t LagCompActorID; // 0x248
};

struct UKSPlayerDataFactory : UPUMG_PlayerDataFactory {
	UKSPlayerStatsManager* PlayerStatsManager; // 0xb0
	FMulticastInlineDelegate OnPlayerLevelChanged; // 0xb8
};

struct UOnlinePIESettings : UDeveloperSettings {
	bool bOnlinePIEEnabled; // 0x38
	TArray<FPIELoginSettingsInternal> Logins; // 0x40
};

struct UMapBuildDataRegistry : UObject {
	ELightingBuildQuality LevelLightingQuality; // 0x28
	ELightingScenarioQuality LightingScenarioQuality; // 0x29
	bool bIsDataStripped; // 0x2a
};

struct UWidgetSwitcherSlot : UPanelSlot {
	FMargin Padding; // 0x40
	EHorizontalAlignment HorizontalAlignment; // 0x50
	EVerticalAlignment VerticalAlignment; // 0x51
};

struct UDialogueWave : UObject {
	char bMature : 1; // 0x28
	char bOverride_SubtitleOverride : 1; // 0x28
	FString SpokenText; // 0x30
	FString SubtitleOverride; // 0x40
	TArray<FDialogueContextMapping> ContextMappings; // 0x50
	FGuid LocalizationGUID; // 0x60
};

struct UBTTask_BlackboardBase : UBTTaskNode {
	FBlackboardKeySelector BlackboardKey; // 0x70
};

struct UWBP_WelcomeToRankedPopup_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_RankedIcon_C* Bronze; // 0x528
	URichTextBlock* BronzeText; // 0x530
	UWBP_RankedIcon_C* Diamond; // 0x538
	URichTextBlock* DiamondText; // 0x540
	UWBP_StandardButtonMedium_C* DismissButton; // 0x548
	UWBP_RankedIcon_C* Gold; // 0x550
	URichTextBlock* GoldText; // 0x558
	UWBP_StandardButtonMedium_C* MoreInfoButton; // 0x560
	UWBP_RankedIcon_C* Platinum; // 0x568
	URichTextBlock* PlatinumText; // 0x570
	URichTextBlock* RichTextBlock_80; // 0x578
	UWBP_RankedIcon_C* Rogue; // 0x580
	URichTextBlock* RogueText; // 0x588
	UScaleBox* ScaleBox; // 0x590
	UScaleBox* ScaleBox_2; // 0x598
	UScaleBox* ScaleBox_3; // 0x5a0
	UScaleBox* ScaleBox_4; // 0x5a8
	UScaleBox* ScaleBox_5; // 0x5b0
	UWBP_RankedIcon_C* Silver; // 0x5b8
	URichTextBlock* SilverText; // 0x5c0
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x5c8
};

struct UWBP_Progression_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UHorizontalBox* ProgressionCards; // 0x528
	UHorizontalBox* ProgressionRow; // 0x530
	UWBP_ProgressionCardSlot_Reputation_C* ProgressReputation; // 0x538
	UWBP_ProgressionCardSlot_PlayerXP_C* ProgressXP; // 0x540
	UVerticalBox* Quests; // 0x548
	UWBP_ProgressionCardSlot_RankedXP_C* RankedXPCard; // 0x550
	UWBP_ProgressionCardSlot_C* RankedXPPanel; // 0x558
	UWBP_ProgressionCardSlot_C* RepPanel; // 0x560
	UWBP_ProgressionCardSlot_C* RogueMastery0Panel; // 0x568
	UWBP_ProgressionCardSlot_C* RogueMastery1Panel; // 0x570
	UWBP_ProgressionCardSlot_MercMasteryXP_C* RogueMasteryCard0; // 0x578
	UWBP_ProgressionCardSlot_MercMasteryXP_C* RogueMasteryCard1; // 0x580
	UWBP_BattlePassLevelTracker_C* WBP_BattlePassLevelTracker; // 0x588
	UWBP_ProgressionCardSlot_C* XPPanel; // 0x590
	APUMG_HUD* MyHud_1; // 0x598
	FLinearColor FontBaseColor; // 0x5a0
	UKSEMODataFactory* EMODataFactory; // 0x5b0
	bool ShowXp; // 0x5b8
	int32_t RogueMasteryIndex; // 0x5bc
	float CurrentDelay; // 0x5c0
	float BASE_DELAY; // 0x5c4
	float DELAY_INCREMENT; // 0x5c8
	bool ShowRankedXP; // 0x5cc
	bool ShowBattlePassXp; // 0x5cd
	bool ShowRep; // 0x5ce
};

struct UNavLinkDefinition : UObject {
	TArray<FNavigationLink> Links; // 0x28
	TArray<FNavigationSegmentLink> SegmentLinks; // 0x38
};

struct UKSAIDifficultyComponent : UActorComponent {
	UKSBTDifficulty* Difficulty; // 0xb0
	UDataTable* DifficultyTable; // 0xb8
	bool AllowDynamicDifficulty; // 0xc0
	FKSBTDifficultyConfig DifficultySpawnConfig; // 0xc8
	float AccuracyMultiplierStandard; // 0x140
	float AccuracyMultiplierThrownMelee; // 0x144
	float AccuracyMultiplierThrownGrenade; // 0x148
	float AccuracyMultiplierWhenBlinded; // 0x14c
	float AccuracyMultiplierWhenCrosshairHidden; // 0x150
	float NewTargetAccuracyMultiplier; // 0x154
	float NewTargetTime; // 0x158
	float AttackDelayClipPercentMin; // 0x15c
	float AttackDelayClipPercentMax; // 0x160
	float AttackDelay; // 0x164
	float DamageDealtMultiplier; // 0x168
	float HeadshotDamageDealtMultiplier; // 0x16c
	float DamageTakenMultiplier; // 0x170
	float HeadshotDamageTakenMultiplier; // 0x174
	float AimForHeadshotProbability; // 0x178
	float DodgeRollProbability; // 0x17c
	float StrafeProbability; // 0x180
	float ThrowGrenadeProbability; // 0x184
	float ThrowMeleeProbability; // 0x188
	float PerceptionStrengthMin; // 0x18c
	float PerceptionStrengthMax; // 0x190
	float PerceptionStrength; // 0x194
	TArray<UKSBTAction*> AllowedActions; // 0x198
	TArray<UKSBTAction*> DisallowedActions; // 0x1a8
	float SpeedMultiplier; // 0x1b8
	TWeakObjectPtr<AKSWeapon> LastFiredWeapon; // 0x1bc
	int32_t AttacksSinceLastAttackDelay; // 0x1c4
	int32_t AttacksNeededToTriggerAttackDelay; // 0x1c8
};

struct APointLight : ALight {
	UPointLightComponent* PointLightComponent; // 0x230
};

struct AKSDropShipExitZone : AActor {
	float YawDirection; // 0x220
};

struct UWBP_CosmeticItem_AvatarEmpty_C : UKSWidget {
	UImage* Image_76; // 0x520
};

struct UWBP_WeaponMasteryBadgeLarge_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* LevelText; // 0x240
	UImage* Mastered; // 0x248
	UImage* MasteryMax; // 0x250
	UImage* Unmastered; // 0x258
	UWidgetSwitcher* WidgetSwitcher_88; // 0x260
};

struct UMaterialExpressionGIReplace : UMaterialExpression {
	FExpressionInput Default; // 0x40
	FExpressionInput StaticIndirect; // 0x54
	FExpressionInput DynamicIndirect; // 0x68
};

struct ULeaderboardQueryCallbackProxy : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct URendererSettings : UDeveloperSettings {
	char bMobileDisableVertexFog : 1; // 0x38
	int32_t MaxMobileCascades; // 0x3c
	EMobileMSAASampleCount MobileMSAASampleCount; // 0x40
	char bMobileUseLegacyShadingModel : 1; // 0x44
	char bMobileAllowDitheredLODTransition : 1; // 0x44
	char bMobileAllowSoftwareOcclusionCulling : 1; // 0x44
	char bMobileVirtualTextures : 1; // 0x44
	char bDiscardUnusedQualityLevels : 1; // 0x44
	char bOcclusionCulling : 1; // 0x44
	float MinScreenRadiusForLights; // 0x48
	float MinScreenRadiusForEarlyZPass; // 0x4c
	float MinScreenRadiusForCSMdepth; // 0x50
	char bPrecomputedVisibilityWarning : 1; // 0x54
	char bTextureStreaming : 1; // 0x54
	char bUseDXT5NormalMaps : 1; // 0x54
	char bVirtualTextures : 1; // 0x54
	char bVirtualTexturedLightmaps : 1; // 0x54
	uint32_t VirtualTextureTileSize; // 0x58
	uint32_t VirtualTextureTileBorderSize; // 0x5c
	uint32_t VirtualTextureFeedbackFactor; // 0x60
	char bVirtualTextureEnableCompressZlib : 1; // 0x64
	char bVirtualTextureEnableCompressCrunch : 1; // 0x64
	char bClearCoatEnableSecondNormal : 1; // 0x64
	char bAnisotropicBRDF : 1; // 0x64
	int32_t ReflectionCaptureResolution; // 0x68
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0x6c
	char bForwardShading : 1; // 0x6c
	char bVertexFoggingForOpaque : 1; // 0x6c
	char bAllowStaticLighting : 1; // 0x6c
	char bUseNormalMapsForStaticLighting : 1; // 0x6c
	char bGenerateMeshDistanceFields : 1; // 0x6c
	char bEightBitMeshDistanceFields : 1; // 0x6c
	char bGenerateLandscapeGIData : 1; // 0x6c
	char bCompressMeshDistanceFields : 1; // 0x6d
	float TessellationAdaptivePixelsPerTriangle; // 0x70
	char bSeparateTranslucency : 1; // 0x74
	ETranslucentSortPolicy TranslucentSortPolicy; // 0x78
	FVector TranslucentSortAxis; // 0x7c
	ECustomDepthStencil CustomDepthStencil; // 0x88
	char bCustomDepthTaaJitter : 1; // 0x8c
	EAlphaChannelMode bEnableAlphaChannelInPostProcessing; // 0x90
	FString NGXAppId; // 0x98
	char bDefaultFeatureBloom : 1; // 0xa8
	char bDefaultFeatureAmbientOcclusion : 1; // 0xa8
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0xa8
	char bDefaultFeatureAutoExposure : 1; // 0xa8
	EAutoExposureMethodUI DefaultFeatureAutoExposure; // 0xac
	float DefaultFeatureAutoExposureBias; // 0xb0
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0xb4
	char bUsePreExposure : 1; // 0xb4
	char bEnablePreExposureOnlyInTheEditor : 1; // 0xb4
	char bDefaultFeatureMotionBlur : 1; // 0xb4
	char bDefaultFeatureLensFlare : 1; // 0xb4
	char bTemporalUpsampling : 1; // 0xb4
	char bSSGI : 1; // 0xb4
	EAntiAliasingMethod DefaultFeatureAntiAliasing; // 0xb8
	ELightUnits DefaultLightUnits; // 0xb9
	EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat; // 0xba
	char bRenderUnbuiltPreviewShadowsInGame : 1; // 0xbc
	char bStencilForLODDither : 1; // 0xbc
	EEarlyZPass EarlyZPass; // 0xc0
	char bEarlyZPassOnlyMaterialMasking : 1; // 0xc4
	char bDBuffer : 1; // 0xc4
	EClearSceneOptions ClearSceneMethod; // 0xc8
	char bBasePassOutputsVelocity : 1; // 0xcc
	char bVertexDeformationOutputsVelocity : 1; // 0xcc
	char bSelectiveBasePassOutputs : 1; // 0xcc
	char bDefaultParticleCutouts : 1; // 0xcc
	int32_t GPUSimulationTextureSizeX; // 0xd0
	int32_t GPUSimulationTextureSizeY; // 0xd4
	char bGlobalClipPlane : 1; // 0xd8
	EGBufferFormat GBufferFormat; // 0xdc
	char bUseGPUMorphTargets : 1; // 0xe0
	char bNvidiaAftermathEnabled : 1; // 0xe0
	char bMultiView : 1; // 0xe0
	char bMobilePostProcessing : 1; // 0xe0
	char bMobileMultiView : 1; // 0xe0
	char bMobileUseHWsRGBEncoding : 1; // 0xe0
	char bRoundRobinOcclusion : 1; // 0xe0
	char bODSCapture : 1; // 0xe0
	char bMeshStreaming : 1; // 0xe1
	float WireframeCullThreshold; // 0xe4
	char bEnableRayTracing : 1; // 0xe8
	char bEnableRayTracingTextureLOD : 1; // 0xe8
	char bSupportStationarySkylight : 1; // 0xe8
	char bSupportLowQualityLightmaps : 1; // 0xe8
	char bSupportPointLightWholeSceneShadows : 1; // 0xe8
	char bSupportAtmosphericFog : 1; // 0xe8
	char bSupportSkyAtmosphere : 1; // 0xe8
	char bSupportSkyAtmosphereAffectsHeightFog : 1; // 0xe8
	char bSupportSkinCacheShaders : 1; // 0xe9
	ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0xec
	float SkinCacheSceneMemoryLimitInMB; // 0xf0
	char bMobileEnableStaticAndCSMShadowReceivers : 1; // 0xf4
	char bMobileEnableMovableLightCSMShaderCulling : 1; // 0xf4
	char bMobileAllowDistanceFieldShadows : 1; // 0xf4
	char bMobileAllowMovableDirectionalLights : 1; // 0xf4
	uint32_t MobileNumDynamicPointLights; // 0xf8
	char bMobileDynamicPointLightsUseStaticBranch : 1; // 0xfc
	char bMobileAllowMovableSpotlights : 1; // 0xfc
	char bSupport16BitBoneIndex : 1; // 0xfc
	char bGPUSkinLimit2BoneInfluences : 1; // 0xfc
	char bSupportDepthOnlyIndexBuffers : 1; // 0xfc
	char bSupportReversedIndexBuffers : 1; // 0xfc
	char bSupportMaterialLayers : 1; // 0xfc
	char bLPV : 1; // 0xfc
};

struct UPUMG_PlayerInfo : UObject {
	FMulticastInlineDelegate OnFilteredNameSetDel; // 0x28
};

struct ULiveLinkTransformController : ULiveLinkControllerBase {
	FLiveLinkTransformControllerData TransformData; // 0x30
};

struct UKSCinematicDataContainer : UDataAsset {
	TMap<FName, FKSCinematicData> CinematicDatas; // 0x30
};

struct UKSGamepadLookSpeedManager : UObject {
	AKSPlayerController* PlayerController; // 0x28
};

struct ULandscapeMeshProxyComponent : UStaticMeshComponent {
	FGuid LandscapeGuid; // 0x4e8
	TArray<FIntPoint> ProxyComponentBases; // 0x4f8
	int8_t ProxyLOD; // 0x508
};

struct AAtmosphericFog : AInfo {
	UAtmosphericFogComponent* AtmosphericFogComponent; // 0x220
};

struct USocialGroupChannel : UObject {
	USocialUser* SocialUser; // 0x28
	FUniqueNetIdRepl GroupId; // 0x30
	FText DisplayName; // 0x58
	TArray<USocialUser*> Members; // 0x70
};

struct USkinnableMergedMeshComponent : USkinnableSkeletalMeshComponent {
	FMulticastInlineDelegate OnMeshMergeComplete; // 0xcf8
	TArray<FName> CompositeSkeletalMeshKeywords; // 0xd08
	bool bAlwaysUseTheFailsafeMeshWhileMerging; // 0xd18
	FName MeshNeedsCPUAccessKeyword; // 0xd1c
	bool bDelayFullSkinUpdateUntilMeshMergingIsComplete; // 0xd24
	USkeletalMesh* BestPlaceHolderMesh; // 0xd28
	bool bMergeMarkedComplete; // 0xd30
	USkeletalMesh* CachedMergeResult; // 0xd38
};

struct UMovieSceneEventTriggerSection : UMovieSceneEventSectionBase {
	FMovieSceneEventChannel EventChannel; // 0xe0
};

struct APawn : AActor {
	char bUseControllerRotationPitch : 1; // 0x228
	char bUseControllerRotationYaw : 1; // 0x228
	char bUseControllerRotationRoll : 1; // 0x228
	char bCanAffectNavigationGeneration : 1; // 0x228
	float BaseEyeHeight; // 0x22c
	EAutoReceiveInput AutoPossessPlayer; // 0x230
	EAutoPossessAI AutoPossessAI; // 0x231
	char RemoteViewPitch; // 0x232
	AController* AIControllerClass; // 0x238
	APlayerState* PlayerState; // 0x240
	AController* LastHitBy; // 0x250
	AController* Controller; // 0x258
	FVector ControlInputVector; // 0x264
	FVector LastControlInputVector; // 0x270
};

struct UKSGameInstance : UPGame_GameInstance {
	FMulticastInlineDelegate LoadingScreenBeganDel; // 0x258
	FMulticastInlineDelegate LoadingScreenEndedDel; // 0x268
	FGameplayTagQuery AlwaysNeededPrimaryAssetQuery; // 0x278
	TArray<FName> AlwaysNeededPrimaryAssetBundles; // 0x2c0
	UDataTable* LoadingScreenTipsTable; // 0x328
	ULoadingScreenImageManager* LoadingScreenImageManager; // 0x330
	TArray<TWeakObjectPtr<UKSActivityManagerBase>> ActivityManagers; // 0x348
	UKSAcquisitionManager* AcquisitionManager; // 0x358
	UPUMG_StoreItemHelper* StoreItemHelper; // 0x360
	UKSJsonDataFactory* JsonDataFactory; // 0x368
	UKSLoadoutDataFactory* LoadoutDataFactory; // 0x370
	UKSUISessionManager* UISessionManager; // 0x378
	UKSActivityInstanceManager* ActivityInstanceManager; // 0x380
	UKSPlayerInventoryHelper* PlayerInventoryHelper; // 0x388
	UKSPlayerStatsManager* PlayerStatsManager; // 0x390
	UKSPlayerChallengesManager* PlayerChallengesManager; // 0x398
	UKSNPETrackManager* NPETrackManager; // 0x3a0
	UKSMercMasteryManager* MercMasteryManager; // 0x3a8
	UKSMercManager* MercManager; // 0x3b0
	UKSWeaponManager* WeaponManager; // 0x3b8
	UKSAwardsManager* AwardsManager; // 0x3c0
	UKSGeneralProgressionManager* GeneralProgressionManager; // 0x3c8
	UKSRankedManager* RankedManager; // 0x3d0
	UKSBattlePassProgressionManager* BattlePassProgressionManager; // 0x3d8
	UKSEventChallengesManager* EventChallengesManager; // 0x3e0
	UKSSeasonalEventChallengesManager* SeasonalEventChallengesManager; // 0x3e8
	UKSActivitySequenceManager* ActivitySequenceManager; // 0x3f0
	UKSAudioManager* AudioManager; // 0x3f8
	UKSPunishmentManager* PunishmentManager; // 0x400
	UKSBoosterManager* BoosterManager; // 0x408
	UKSWeaponMasteryManager* WeaponMasteryManager; // 0x410
	UPUMG_VoiceChatManager* VoiceChatManager; // 0x418
	UKSWeaponAsset* WingsuitWeaponAsset; // 0x4a0
	bool ShouldUseZombiePrevention; // 0x4a8
	int32_t ZombiePreventionSeconds; // 0x4ac
};

struct UKSBTTask_SkydiveToward : UKSBTTask_MoveToward {
	FBlackboardKeySelector TargetSkydiveLocation; // 0xd0
	float BlendStartDistance; // 0xf8
	float BlendEndDistance; // 0xfc
};

struct UKSEvent : UKSItem {
	FName EventTag; // 0x250
	bool CanBeEquippedPostEvent; // 0x258
	TArray<int32_t> ActivityVendorIds; // 0x260
	TArray<int32_t> ActivityRewardVendorIds; // 0x270
	int32_t OwnershipItemId; // 0x280
};

struct UTimeSynchronizableMediaSource : UBaseMediaSource {
	bool bUseTimeSynchronization; // 0x88
	int32_t FrameDelay; // 0x8c
	double TimeDelay; // 0x90
};

struct UKSProjectileClusterComponent : UActorComponent {
	EProjectileClusterSpreadType ProjectileClusterSpreadType; // 0xbc
	FVector ClusterSegmentSpawnOffset; // 0xc0
	bool bLinkSpreadGrenades; // 0xcc
	bool bIgnoreZAxisForClusterDirection; // 0xcd
	bool bAlwaysUseInitialClusterDirection; // 0xce
	float RandomMinPitch; // 0xd0
	float RandomMaxPitch; // 0xd4
	float RandomMinYaw; // 0xd8
	float RandomMaxYaw; // 0xdc
	TArray<FKSProjectileClusterSegment> ClusterSegmentDefinitions; // 0xe0
	TArray<AKSProjectile*> ClusterSegments; // 0xf0
	FMulticastInlineDelegate OnOwnedSegmentKilled; // 0x100
};

struct UKSBoostInventoryItemWidget : UKSWidget {
	FAccountConsumableDetails CurrentItemDetails; // 0x520
};

struct UKSFullMapWidget : UKSMapWidgetBase {
	AActor* MinimapRendererActor; // 0x648
	float MinimapWidth; // 0x650
};

struct UNoiseField : UFieldNodeFloat {
	float MinRange; // 0xb0
	float MaxRange; // 0xb4
	FTransform Transform; // 0xc0
};

struct UMovieSceneCinematicShotSection : UMovieSceneSubSection {
	FString ShotDisplayName; // 0x158
	FText DisplayName; // 0x168
};

struct UInterpTrackParticleReplay : UInterpTrack {
	TArray<FParticleReplayTrackKey> TrackKeys; // 0x70
};

struct UGizmoRectangleComponent : UGizmoBaseComponent {
	FVector DirectionX; // 0x450
	FVector DirectionY; // 0x45c
	float OffsetX; // 0x468
	float OffsetY; // 0x46c
	float LengthX; // 0x470
	float LengthY; // 0x474
	float Thickness; // 0x478
	char SegmentFlags; // 0x47c
};

struct UKSBloodSplatterComponent : UKSFXCurveComponent {
	float Damage; // 0x130
};

struct UBTService_RunEQS : UBTService_BlackboardBase {
	FEQSParametrizedQueryExecutionRequest EQSRequest; // 0x98
};

struct UNiagaraEventReceiverEmitterAction_SpawnParticles : UNiagaraEventReceiverEmitterAction {
	uint32_t NumParticles; // 0x28
};

struct UMaterialExpressionScalarParameter : UMaterialExpressionParameter {
	float DefaultValue; // 0x58
	bool bUseCustomPrimitiveData; // 0x5c
	char PrimitiveDataIndex; // 0x5d
};

struct UImgMediaSource : UBaseMediaSource {
	FFrameRate FrameRateOverride; // 0x88
	FString ProxyOverride; // 0x90
	FDirectoryPath SequencePath; // 0xa0
};

struct UKSBTTask_LookAt : UBTTask_RotateToFaceBBEntry {
	float LookRotationRate; // 0xa4
	bool bLockUntilComplete; // 0xa8
	FRotator HorizonAngle; // 0xac
	int32_t CorridorSmoothingCount; // 0xb8
};

struct UNiagaraSystem : UFXSystemAsset {
	bool bDumpDebugSystemInfo; // 0x31
	bool bDumpDebugEmitterInfo; // 0x32
	char bFixedBounds : 1; // 0x34
	UNiagaraEffectType* EffectType; // 0x38
	bool bOverrideScalabilitySettings; // 0x40
	TArray<FNiagaraSystemScalabilityOverride> ScalabilityOverrides; // 0x48
	FNiagaraSystemScalabilityOverrides SystemScalabilityOverrides; // 0x58
	TArray<FNiagaraEmitterHandle> EmitterHandles; // 0x68
	TArray<UNiagaraParameterCollectionInstance*> ParameterCollectionOverrides; // 0x78
	UNiagaraScript* SystemSpawnScript; // 0x88
	UNiagaraScript* SystemUpdateScript; // 0x90
	FNiagaraSystemCompiledData SystemCompiledData; // 0xa8
	FNiagaraUserRedirectionParameterStore ExposedParameters; // 0x300
	FBox FixedBounds; // 0x408
	bool bAutoDeactivate; // 0x424
	float WarmupTime; // 0x428
	int32_t WarmupTickCount; // 0x42c
	float WarmupTickDelta; // 0x430
	bool bHasSystemScriptDIsWithPerInstanceData; // 0x434
	TArray<FName> UserDINamesReadInSystemScripts; // 0x438
};

struct AKSFootstepOverrideVolume : ATriggerVolume {
	FName OverrideMaterialName; // 0x260
	float OverridePriority; // 0x268
};

struct UWBP_CosmeticItem_Avatar_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ButtonSlot_Cosmetic_C* Button; // 0x528
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x530
	UPlatformInventoryItem* PlatformItem; // 0x538
	FMulticastInlineDelegate OnItemHovered; // 0x540
	FMulticastInlineDelegate OnItemUnhovered; // 0x550
	FMulticastInlineDelegate OnItemClicked; // 0x560
	UAkAudioEvent* HoverAvatarItemSFX; // 0x570
	UAkAudioEvent* ClickAvatarItemSFX; // 0x578
};

struct UKSActivityRewardCondition_DamageType : UKSActivityRewardCondition {
	TArray<UDamageType*> MatchingDamageTypes; // 0x30
};

struct ASplineMeshActor : AActor {
	USplineMeshComponent* SplineMeshComponent; // 0x220
};

struct UKSModInst_ApplyDebuffOnDownOther : UKSModInst_OnDownOther {
	TArray<UKSPlayerMod*> DebuffsToApply; // 0x1c0
	bool bGiveDebuffsUniquely; // 0x1d0
	float DebuffDuration; // 0x1d4
	bool bRemoveDebuffOnRevive; // 0x1d8
};

struct UKSRocketMovementComponent : UCharacterMovementComponent {
	float MaxSpeed; // 0x680
	float RocketAcceleration; // 0x684
	float RocketIgniteTime; // 0x688
	float RocketRotationCatchUpDegrees; // 0x68c
	bool bSmoothRotation; // 0x690
	FMulticastInlineDelegate OnIgnitionKickoff; // 0x698
	FMulticastInlineDelegate OnRocketStop; // 0x6a8
};

struct UWBP_PlayerIdentity_PlayerLevel_C : UKSWidget {
	UImage* Image_166; // 0x520
	UWidgetSwitcher* LevelLoadingSwitcher; // 0x528
	UTextBlock* PlayerLevelText; // 0x530
	UThrobber* PlayerLevelThrobber; // 0x538
	UWBP_BoxStroke_C* WBP_BoxStroke; // 0x540
};

struct URedeemCodeScreen_C : UKSRedeemCodeScreenBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UWBP_RedeemCodeField_C* CodeEntry; // 0x540
	UHorizontalBox* CodeRedemption; // 0x548
	UTextBlock* ErrorLabel; // 0x550
	UBorder* PendingOverlay; // 0x558
	UImage* SelectPrompt; // 0x560
	UWBP_StandardButtonMedium_C* SubmitButton; // 0x568
	UWBP_Header1_C* WBP_Header1; // 0x570
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x578
	UDataTable* ColorPalette; // 0x580
	FTimerHandle SpamPreventTimer; // 0x588
	int32_t FocusGroup_NoInteraction; // 0x590
	int32_t FocusGroup_Input; // 0x594
	int32_t CharacterLimit; // 0x598
};

struct UWBP_CreateCustomGame_C : UKSQuickPlay {
	FPointerToUberGraphFrame UberGraphFrame; // 0x558
	UWidgetAnimation* PopulateMaps; // 0x560
	UImage* Image_112; // 0x568
	UKSScrollBox* MapScrollBox; // 0x570
	UUniformGridPanel* MapSelectionPanel; // 0x578
	UWBP_CustomGameConfirmation_C* WBP_CustomGameConfirmation; // 0x580
	UWBP_GameModeInfoPanel_C* WBP_GameModeInfoPanel; // 0x588
	UWBP_Header1_C* WBP_Header1; // 0x590
	UWBP_NavBar_C* WBP_NavBar; // 0x598
	TArray<FClientQueueInfo> CustomQueues; // 0x5a0
	int32_t CurrentTabIndex; // 0x5b0
	TArray<UWBP_CreateCustomGame_MapButton_C*> MapButtons; // 0x5b8
	int32_t TabCount; // 0x5c8
	UKSQueueDataFactory* QueueDataFactory; // 0x5d0
	UDataTable* DTCustomQueues; // 0x5d8
};

struct UParticleModuleSourceMovement : UParticleModuleLocationBase {
	FRawDistributionVector SourceMovementScale; // 0x30
};

struct UKSLootSiteIconWidget : UKSMapIconWidgetBase {
	AKSLootSiteBase* MarkedLootSite; // 0x318
};

struct UBrushBuilder : UObject {
	FString BitmapFilename; // 0x28
	FString Tooltip; // 0x38
	char NotifyBadParams : 1; // 0x48
	TArray<FVector> Vertices; // 0x50
	TArray<FBuilderPoly> Polys; // 0x60
	FName Layer; // 0x70
	char MergeCoplanars : 1; // 0x78
};

struct UMovieSceneIntegerSection : UMovieSceneSection {
	FMovieSceneIntegerChannel IntegerCurve; // 0xe0
};

struct USourceEffectDynamicsProcessorPreset : USoundEffectSourcePreset {
	FSourceEffectDynamicsProcessorSettings Settings; // 0x90
};

struct UMotionControllerComponent : UPrimitiveComponent {
	int32_t PlayerIndex; // 0x430
	EControllerHand Hand; // 0x434
	FName MotionSource; // 0x438
	char bDisableLowLatencyUpdate : 1; // 0x440
	ETrackingStatus CurrentTrackingStatus; // 0x444
	bool bDisplayDeviceModel; // 0x445
	FName DisplayModelSource; // 0x448
	UStaticMesh* CustomDisplayMesh; // 0x450
	TArray<UMaterialInterface*> DisplayMeshMaterialOverrides; // 0x458
	UPrimitiveComponent* DisplayComponent; // 0x4d0
};

struct APlanarReflection : ASceneCapture {
	UPlanarReflectionComponent* PlanarReflectionComponent; // 0x230
	bool bShowPreviewPlane; // 0x238
};

struct UMaterialExpressionMaterialProxyReplace : UMaterialExpression {
	FExpressionInput Realtime; // 0x40
	FExpressionInput MaterialProxy; // 0x54
};

struct USlider : UWidget {
	float Value; // 0x110
	FDelegate ValueDelegate; // 0x114
	float MinValue; // 0x124
	float MaxValue; // 0x128
	FSliderStyle WidgetStyle; // 0x130
	EOrientation Orientation; // 0x470
	FLinearColor SliderBarColor; // 0x474
	FLinearColor SliderHandleColor; // 0x484
	bool IndentHandle; // 0x494
	bool Locked; // 0x495
	bool MouseUsesStep; // 0x496
	bool RequiresControllerLock; // 0x497
	float StepSize; // 0x498
	bool IsFocusable; // 0x49c
	FMulticastInlineDelegate OnMouseCaptureBegin; // 0x4a0
	FMulticastInlineDelegate OnMouseCaptureEnd; // 0x4b0
	FMulticastInlineDelegate OnControllerCaptureBegin; // 0x4c0
	FMulticastInlineDelegate OnControllerCaptureEnd; // 0x4d0
	FMulticastInlineDelegate OnValueChanged; // 0x4e0
};

struct UWBP_RoleFilterButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UButton* FilterButton; // 0x528
	UKSAsyncImage* RoleIcon; // 0x530
	UKSJobRole* Role; // 0x538
};

struct UGameplayTagsSettings : UGameplayTagsList {
	bool ImportTagsFromConfig; // 0x48
	bool WarnOnInvalidTags; // 0x49
	bool FastReplication; // 0x4a
	FString InvalidTagCharacters; // 0x50
	TArray<FGameplayTagCategoryRemap> CategoryRemapping; // 0x60
	TArray<FSoftObjectPath> GameplayTagTableList; // 0x70
	TArray<FGameplayTagRedirect> GameplayTagRedirects; // 0x80
	TArray<FName> CommonlyReplicatedTags; // 0x90
	int32_t NumBitsForContainerSize; // 0xa0
	int32_t NetIndexFirstBitSegment; // 0xa4
	TArray<FRestrictedConfigInfo> RestrictedConfigFiles; // 0xa8
};

struct APartyBeaconHost : AOnlineBeaconHostObject {
	UPartyBeaconState* State; // 0x248
	bool bLogoutOnSessionTimeout; // 0x2b0
	float SessionTimeoutSecs; // 0x2b4
	float TravelSessionTimeoutSecs; // 0x2b8
};

struct UKSWeaponAsset_Shotgun : UKSWeaponAsset {
	int32_t PelletsPerShot; // 0x908
	float AimDownSightsAccuracy; // 0x90c
	bool bUseSpreadPattern; // 0x910
	TArray<FVector2D> SpreadPattern; // 0x918
	float HitPercentageForHeadshot; // 0x928
	UCurveFloat* NonlinearPelletDamageCurve; // 0x930
};

struct USoundNodeParamCrossFade : USoundNodeDistanceCrossFade {
	FName ParamName; // 0x58
};

struct UWBP_BattlePassEmblem_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetSwitcher* EmblemSwitcher; // 0x528
	UWidgetSwitcher* LevelOrBadgeSwitcher; // 0x530
	UImage* LockIcon; // 0x538
	UWBP_AsyncIcon_C* PremiumEmblem; // 0x540
	UWBP_AsyncIcon_C* StandardEmblem; // 0x548
	UTextBlock* TierNumber; // 0x550
};

struct UAudioOcclusionComponent : UActorComponent {
	UBakedOcclusionLUT* LUT; // 0xb0
};

struct UWBP_ItemInfoPanel_StatBar_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	USizeBox* BarGroup; // 0x240
	UWBP_LerpingBar_C* LerpingBarCurrent; // 0x248
	UWBP_LerpingBar_C* LerpingBarProjected; // 0x250
	USizeBox* NameWrapper; // 0x258
	UScaleBox* StatsWrapper; // 0x260
	UTextBlock* StatText; // 0x268
	UTextBlock* StatText_2; // 0x270
	UImage* UpgradeArrow; // 0x278
	UImage* UpgradeArrow_2; // 0x280
	UTextBlock* UpgradeValueText; // 0x288
	UTextBlock* UpgradeValueText_2; // 0x290
	UTextBlock* ValueText; // 0x298
	UTextBlock* ValueText_2; // 0x2a0
	UVerticalBox* VerticalBox_1; // 0x2a8
	UHorizontalBox* VerticalStack; // 0x2b0
	bool bTextOnTop; // 0x2b8
	float InitialValue; // 0x2bc
	float InitialUpgradeValue; // 0x2c0
};

struct UKSCharacterCameraShake : UCameraShake {
	float ADSShakeScale; // 0x158
	AKSCharacterFoundation* AttachedCharacterFoundation; // 0x160
};

struct UKSLoadoutClass : UKSItem {
	TSoftObjectPtr<UTexture2D> DynamicPoseImage; // 0x250
	FLinearColor ThemeColorLight; // 0x278
	FLinearColor ThemeColorDark; // 0x288
	TArray<TSoftObjectPtr<UPerkCategory>> PerkCategories; // 0x298
	TArray<TSoftObjectPtr<UKSPlayerMod>> AvailablePerks; // 0x2a8
	TArray<TSoftObjectPtr<UKSPlayerMod_Activated>> AvailableAbilities; // 0x2b8
	TArray<TSoftObjectPtr<UKSWeaponAsset>> AvailableGadgets; // 0x2c8
	bool CanUseGlobalGadgets; // 0x2d8
	TArray<TSoftObjectPtr<UKSWeaponAsset>> AvailablePistols; // 0x2e0
	bool CanUseGlobalPistols; // 0x2f0
	TArray<TSoftObjectPtr<UKSPlayerMod>> AutoEquippedMods; // 0x2f8
};

struct UPGame_PositionHistoryComponent : UActorComponent {
	EPositionHistoryRecordMode PositionRecordMode; // 0xb0
	bool ExtrapolateFromLastEntry; // 0xb1
	bool bAutoPopulateOnBeginPlay; // 0xb2
	TArray<FPrimitivePriority> TrackedPrimitives; // 0xc8
};

struct UInterpTrackFloatParticleParam : UInterpTrackFloatBase {
	FName ParamName; // 0x90
};

struct UMaterialExpressionVectorNoise : UMaterialExpression {
	FExpressionInput Position; // 0x40
	EVectorNoiseFunction NoiseFunction; // 0x54
	int32_t Quality; // 0x58
	char bTiling : 1; // 0x5c
	uint32_t TileSize; // 0x60
};

struct UKSBTDifficulty : UDataAsset {
	FString DifficultyName; // 0x30
};

struct UVOIPTalker : UActorComponent {
	FVoiceSettings Settings; // 0xb0
};

struct UEnvQueryTest_Distance : UEnvQueryTest {
	EEnvTestDistance TestMode; // 0x1f8
	UEnvQueryContext* DistanceTo; // 0x200
};

struct UQosEvaluator : UObject {
	bool bInProgress; // 0x48
	bool bCancelOperation; // 0x49
	TArray<FDatacenterQosInstance> Datacenters; // 0x50
};

struct USkinBundleCollection : UItemCollection {
	FText SkinBundleCollectionName; // 0x98
	FText SkinBundleCollectionDescription; // 0xb0
};

struct UNiagaraMeshRendererProperties : UNiagaraRendererProperties {
	UStaticMesh* ParticleMesh; // 0x50
	ENiagaraSortMode SortMode; // 0x58
	char bOverrideMaterials : 1; // 0x5c
	char bSortOnlyWhenTranslucent : 1; // 0x5c
	TArray<FNiagaraMeshMaterialOverride> OverrideMaterials; // 0x60
	FVector2D SubImageSize; // 0x70
	char bSubImageBlend : 1; // 0x78
	ENiagaraMeshFacingMode FacingMode; // 0x7c
	char bLockedAxisEnable : 1; // 0x80
	FVector LockedAxis; // 0x84
	ENiagaraMeshLockedAxisSpace LockedAxisSpace; // 0x90
	FNiagaraVariableAttributeBinding PositionBinding; // 0x98
	FNiagaraVariableAttributeBinding ColorBinding; // 0x110
	FNiagaraVariableAttributeBinding VelocityBinding; // 0x188
	FNiagaraVariableAttributeBinding MeshOrientationBinding; // 0x200
	FNiagaraVariableAttributeBinding ScaleBinding; // 0x278
	FNiagaraVariableAttributeBinding SubImageIndexBinding; // 0x2f0
	FNiagaraVariableAttributeBinding DynamicMaterialBinding; // 0x368
	FNiagaraVariableAttributeBinding DynamicMaterial1Binding; // 0x3e0
	FNiagaraVariableAttributeBinding DynamicMaterial2Binding; // 0x458
	FNiagaraVariableAttributeBinding DynamicMaterial3Binding; // 0x4d0
	FNiagaraVariableAttributeBinding MaterialRandomBinding; // 0x548
	FNiagaraVariableAttributeBinding CustomSortingBinding; // 0x5c0
	FNiagaraVariableAttributeBinding NormalizedAgeBinding; // 0x638
	FNiagaraVariableAttributeBinding CameraOffsetBinding; // 0x6b0
};

struct AKSWeapon_ReviveDartDirect : AKSWeapon_ReviveDirect {
	TWeakObjectPtr<AKSProjectile_ReviveDart> DartProjectile; // 0x6f0
	FMulticastInlineDelegate OnSucceed; // 0x6f8
	FMulticastInlineDelegate OnFailed; // 0x708
};

struct UBTCompositeNode : UBTNode {
	TArray<FBTCompositeChild> Children; // 0x58
	TArray<UBTService*> Services; // 0x68
	char bApplyDecoratorScope : 1; // 0x88
};

struct UKSScrollButtonSoundLibrary : UKSUISoundLibrary {
	UAkAudioEvent* ScrollClicked; // 0x28
	UAkAudioEvent* ScrollHovered; // 0x30
	UAkAudioEvent* ScrollUnhovered; // 0x38
	UAkAudioEvent* ScrollingSound; // 0x40
};

struct UWBP_SlotHeading_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* Heading; // 0x240
	UImage* UnderlineBorder; // 0x248
	FText HeadingText; // 0x250
};

struct AKSProp_Physical : AActor {
	UStaticMeshComponent* StaticMesh; // 0x220
	UAkAudioEvent* CollisionAkEvent; // 0x228
	float ImpactSoundThreshold; // 0x230
};

struct ADatasmithSceneActor : AActor {
	UDatasmithScene* Scene; // 0x220
	TMap<FName, TSoftObjectPtr<AActor>> RelatedActors; // 0x228
};

struct ULevelSequencePlayer : UMovieSceneSequencePlayer {
	FMulticastInlineDelegate OnCameraCut; // 0x888
};

struct UWBP_PanelButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnClick; // 0x528
	UWidgetAnimation* Highlight; // 0x530
	UButton* LoadoutButton; // 0x538
	UImage* PanelBG; // 0x540
	UImage* PanelBorder; // 0x548
	UImage* PanelGlow; // 0x550
	UImage* PanelHighlight; // 0x558
	FMulticastInlineDelegate OnClicked; // 0x560
	FMulticastInlineDelegate OnHovered; // 0x570
	FMulticastInlineDelegate OnUnhovered; // 0x580
	UAkAudioEvent* ClickPanelButtonSFX; // 0x590
	FText DefaultButtonText; // 0x598
	bool IsDisabled; // 0x5b0
	UAkAudioEvent* HoverPanelButtonSFX; // 0x5b8
};

struct UKSWrapCustomizationScreen : UKSWidget {
	UKSWeaponAsset* PopulatedWeaponAsset; // 0x520
	UKSWeaponAttachment* PreviewedWeaponWrap; // 0x528
	UPUMG_StoreItem* PreviewedStoreItem; // 0x530
};

struct UDatasmithStaticMeshTemplate : UDatasmithObjectTemplate {
	FDatasmithMeshSectionInfoMapTemplate SectionInfoMap; // 0x30
	int32_t LightMapCoordinateIndex; // 0x80
	int32_t LightMapResolution; // 0x84
	TArray<FDatasmithMeshBuildSettingsTemplate> BuildSettings; // 0x88
	TArray<FDatasmithStaticMaterialTemplate> StaticMaterials; // 0x98
};

struct UAkAssetBase : UAkAudioType {
	UAkAssetPlatformData* PlatformAssetData; // 0x40
};

struct ULandscapeMeshCollisionComponent : ULandscapeHeightfieldCollisionComponent {
	FGuid MeshGuid; // 0x510
};

struct UPUMG_VoiceChatManager : UObject {
	bool bPendingPartyVoipJoin; // 0x28
	bool bPendingMatchVoipJoin; // 0x29
	FString CurrentPartyVoiceChatChannel; // 0x30
	int32_t CurrentPartyId; // 0x40
	FString CurrentMatchVoiceChatChannel; // 0x48
	EPUMG_MatchStatus CurrentMatchStatus; // 0x58
	FSerializedMatchId CurrentMatchId; // 0x60
	bool bCurrentIsTokenForTaskForce; // 0x70
	UPUMG_PartyDataFactory* PartyDataFactory; // 0x78
	UPUMG_QueueDataFactory* QueueDataFactory; // 0x80
};

struct UMaterialExpressionArcsineFast : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UEditableText : UWidget {
	FText Text; // 0x110
	FDelegate TextDelegate; // 0x128
	FText HintText; // 0x138
	FDelegate HintTextDelegate; // 0x150
	FEditableTextStyle WidgetStyle; // 0x160
	USlateWidgetStyleAsset* Style; // 0x378
	USlateBrushAsset* BackgroundImageSelected; // 0x380
	USlateBrushAsset* BackgroundImageComposing; // 0x388
	USlateBrushAsset* CaretImage; // 0x390
	FSlateFontInfo Font; // 0x398
	FSlateColor ColorAndOpacity; // 0x3e8
	bool IsReadOnly; // 0x410
	bool IsPassword; // 0x411
	float MinimumDesiredWidth; // 0x414
	bool IsCaretMovedWhenGainFocus; // 0x418
	bool SelectAllTextWhenFocused; // 0x419
	bool RevertTextOnEscape; // 0x41a
	bool ClearKeyboardFocusOnCommit; // 0x41b
	bool SelectAllTextOnCommit; // 0x41c
	bool AllowContextMenu; // 0x41d
	EVirtualKeyboardType KeyboardType; // 0x41e
	FVirtualKeyboardOptions VirtualKeyboardOptions; // 0x41f
	EVirtualKeyboardTrigger VirtualKeyboardTrigger; // 0x420
	EVirtualKeyboardDismissAction VirtualKeyboardDismissAction; // 0x421
	ETextJustify Justification; // 0x422
	FShapedTextOptions ShapedTextOptions; // 0x423
	FMulticastInlineDelegate OnTextChanged; // 0x428
	FMulticastInlineDelegate OnTextCommitted; // 0x438
};

struct UKSAimCorrectionData : UKSAimAssistDataBase {
	TMap<EControllerInputType, bool> AllowAimCorrection; // 0x38
	TMap<EControllerInputType, float> AimCorrectionOffset; // 0x88
	TMap<EControllerInputType, float> AimCorrectionRange; // 0xd8
	TArray<FKSAimAssistPropertyBool> AllowOverride; // 0x128
	TArray<FKSAimAssistPropertyFloat> OffsetOverride; // 0x138
	TArray<FKSAimAssistPropertyFloat> RangeOverride; // 0x148
	TMap<EControllerInputType, bool> FullAllowAimCorrection; // 0x158
	TMap<EControllerInputType, float> FullAimCorrectionOffset; // 0x1a8
	TMap<EControllerInputType, float> FullAimCorrectionRange; // 0x1f8
};

struct UMaterialExpressionConstant2Vector : UMaterialExpression {
	float R; // 0x40
	float G; // 0x44
};

struct AGamePlayerControllerNoHUD_C : AKSPlayerController {
	UPlayerControllerThreatComponent_C* PlayerControllerThreatComponent; // 0xec0
	UAkComponent* ControllerAkComponent; // 0xec8
	UDefaultEnvironmentListener_C* DefaultEnvironmentListener; // 0xed0
};

struct AKSTeamCinematicSequenceManager : AKSCinematicSequenceManager {
	TMap<int32_t, ULevelSequence*> SequenceList; // 0x248
	ULevelSequence* DefaultLevelSequence; // 0x298
};

struct UParticleModuleLocationWorldOffset_Seeded : UParticleModuleLocationWorldOffset {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x80
};

struct UParticleModuleAccelerationBase : UParticleModule {
	char bAlwaysInWorldSpace : 1; // 0x30
};

struct ULiveLinkAnimationVirtualSubject : ULiveLinkVirtualSubject {
	bool bAppendSubjectNameToBones; // 0xd9
};

struct ALandscapeStreamingProxy : ALandscapeProxy {
	LazyObjectProperty LandscapeActor; // 0x540
};

struct UKSAnimationAuditComponent : UActorComponent {
	UKSAnimInstance* CurrentAnimInst; // 0xb0
};

struct UKSBTTask_SelectObjective : UBTTaskNode {
	FBlackboardKeySelector ObjectiveTargetKey; // 0x70
	FBlackboardKeySelector ObjectiveTypeKey; // 0x98
	TArray<UKSBTObjective*> BlackboardKeyObjectives; // 0xc0
	UKSBTObjective* CurrentHighestPriorityObjective; // 0xd8
	AActor* CurrentHighestPriorityActor; // 0xe0
};

struct UWBP_ItemDescSlotNew_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Fill; // 0x240
	UOverlay* IconWrapper; // 0x248
	UTextBlock* ItemDesc; // 0x250
	UWBP_AsyncIcon_C* ItemIcon; // 0x258
	UTextBlock* ItemName; // 0x260
	UTextBlock* ItemType; // 0x268
	UImage* Stroke; // 0x270
	bool HideIconBorder; // 0x278
	FText ItemTypeText; // 0x280
};

struct UKSFreezeFramePawnAnimInst : UKSAnimInstance {
	UAnimationAsset* PawnAnimation; // 0x330
	UAnimSequence* FacialAnimationSet; // 0x338
	EKSEmotion FacialAnimationPose; // 0x340
	float AnimationPlayRate; // 0x344
	float AnimationStartTime; // 0x348
};

struct UParticleModuleRotation : UParticleModuleRotationBase {
	FRawDistributionFloat StartRotation; // 0x30
};

struct ALobbyBeaconState : AInfo {
	int32_t MaxPlayers; // 0x220
	ALobbyBeaconPlayerState* LobbyBeaconPlayerStateClass; // 0x228
	bool bLobbyStarted; // 0x238
	float WaitForPlayersTimeRemaining; // 0x23c
	FLobbyPlayerStateInfoArray Players; // 0x240
};

struct UAnimSharingAdditiveInstance : UAnimInstance {
	TWeakObjectPtr<USkeletalMeshComponent> BaseComponent; // 0x268
	TWeakObjectPtr<UAnimSequence> AdditiveAnimation; // 0x270
	float Alpha; // 0x278
	bool bStateBool; // 0x27c
};

struct UARSaveWorldAsyncTaskBlueprintProxy : UARBaseAsyncTaskBlueprintProxy {
	FMulticastInlineDelegate OnSuccess; // 0x50
	FMulticastInlineDelegate OnFailed; // 0x60
};

struct UInterpTrackInstBoolProp : UInterpTrackInstProperty {
	bool ResetBool; // 0x68
};

struct UNiagaraDataInterfaceAudioSubmix : UNiagaraDataInterface {
	USoundSubmix* Submix; // 0x30
};

struct UChaosClothSharedSimConfig : UClothSharedConfigCommon {
	int32_t IterationCount; // 0x28
	int32_t SubdivisionCount; // 0x2c
	float SelfCollisionThickness; // 0x30
	float CollisionThickness; // 0x34
	bool bUseDampingOverride; // 0x38
	float Damping; // 0x3c
	bool bUseGravityOverride; // 0x40
	float GravityScale; // 0x44
	FVector Gravity; // 0x48
	bool bUseLocalSpaceSimulation; // 0x54
	bool bUseXPBDConstraints; // 0x55
};

struct AGameSession : AInfo {
	int32_t MaxSpectators; // 0x220
	int32_t MaxPlayers; // 0x224
	int32_t MaxPartySize; // 0x228
	char MaxSplitscreensPerConnection; // 0x22c
	bool bRequiresPushToTalk; // 0x22d
	FName SessionName; // 0x230
};

struct ALevelSequenceActor : AActor {
	FMovieSceneSequencePlaybackSettings PlaybackSettings; // 0x230
	ULevelSequencePlayer* SequencePlayer; // 0x248
	FSoftObjectPath LevelSequence; // 0x250
	TArray<AActor*> AdditionalEventReceivers; // 0x268
	FLevelSequenceCameraSettings CameraSettings; // 0x278
	ULevelSequenceBurnInOptions* BurnInOptions; // 0x280
	UMovieSceneBindingOverrides* BindingOverrides; // 0x288
	char bAutoPlay : 1; // 0x290
	char bOverrideInstanceData : 1; // 0x290
	char bReplicatePlayback : 1; // 0x290
	UObject* DefaultInstanceData; // 0x298
	ULevelSequenceBurnIn* BurnInInstance; // 0x2a0
	bool bShowBurnin; // 0x2a8
};

struct UInterpTrackVectorMaterialParam : UInterpTrackVectorBase {
	TArray<UMaterialInterface*> TargetMaterials; // 0x90
	FName ParamName; // 0xa0
};

struct UKSBTAction : UDataAsset {
	FString ActionName; // 0x30
};

struct UKSAIActorCollection_Extraction : UKSAIActorCollection {
	TArray<AKSDefensePoint*> DefensePoints; // 0xe0
};

struct UPanelSlot : UVisual {
	UPanelWidget* Parent; // 0x28
	UWidget* Content; // 0x30
};

struct AAudioVolume : AVolume {
	float Priority; // 0x258
	char bEnabled : 1; // 0x25c
	FReverbSettings Settings; // 0x260
	FInteriorSettings AmbientZoneSettings; // 0x280
};

struct UMultiLineEditableText : UTextLayoutWidget {
	FText Text; // 0x130
	FText HintText; // 0x148
	FDelegate HintTextDelegate; // 0x160
	FTextBlockStyle WidgetStyle; // 0x170
	bool bIsReadOnly; // 0x3d8
	FSlateFontInfo Font; // 0x3e0
	bool SelectAllTextWhenFocused; // 0x430
	bool ClearTextSelectionOnFocusLoss; // 0x431
	bool RevertTextOnEscape; // 0x432
	bool ClearKeyboardFocusOnCommit; // 0x433
	bool AllowContextMenu; // 0x434
	FVirtualKeyboardOptions VirtualKeyboardOptions; // 0x435
	EVirtualKeyboardDismissAction VirtualKeyboardDismissAction; // 0x436
	FMulticastInlineDelegate OnTextChanged; // 0x438
	FMulticastInlineDelegate OnTextCommitted; // 0x448
};

struct UANotifyState_MeleeRecoil_C : UAnimNotifyState {
	FRecoilInfo Melee Swing Recoil; // 0x30
};

struct UInterpTrackInstEvent : UInterpTrackInst {
	float LastUpdatePosition; // 0x28
};

struct USocialParty : UObject {
	APartyBeaconClient* ReservationBeaconClientClass; // 0x58
	ASpectatorBeaconClient* SpectatorBeaconClientClass; // 0x60
	FUniqueNetIdRepl OwningLocalUserId; // 0x78
	FUniqueNetIdRepl CurrentLeaderId; // 0xa0
	TMap<FUniqueNetIdRepl, UPartyMember*> PartyMembersById; // 0xc8
	bool bEnableAutomaticPartyRejoin; // 0x118
	APartyBeaconClient* ReservationBeaconClient; // 0x190
	ASpectatorBeaconClient* SpectatorBeaconClient; // 0x1a0
};

struct UEdGraph : UObject {
	UEdGraphSchema* Schema; // 0x28
	TArray<UEdGraphNode*> Nodes; // 0x30
	char bEditable : 1; // 0x40
	char bAllowDeletion : 1; // 0x40
	char bAllowRenaming : 1; // 0x40
};

struct UWindowTitleBarArea : UContentWidget {
	bool bWindowButtonsEnabled; // 0x128
	bool bDoubleClickTogglesFullscreen; // 0x129
};

struct UAkIOSInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkAudioSession AudioSession; // 0x90
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0xa0
	FAkAdvancedInitializationSettings AdvancedSettings; // 0xc8
};

struct AVolumetricLightmapDensityVolume : AVolume {
	FInt32Interval AllowedMipLevelRange; // 0x258
};

struct UAudioSettings : UDeveloperSettings {
	FSoftObjectPath DefaultSoundClassName; // 0x38
	FSoftObjectPath DefaultMediaSoundClassName; // 0x50
	FSoftObjectPath DefaultSoundConcurrencyName; // 0x68
	FSoftObjectPath DefaultBaseSoundMix; // 0x80
	FSoftObjectPath VoiPSoundClass; // 0x98
	FSoftObjectPath MasterSubmix; // 0xb0
	FSoftObjectPath ReverbSubmix; // 0xc8
	FSoftObjectPath EQSubmix; // 0xe0
	EVoiceSampleRate VoiPSampleRate; // 0xf8
	float DefaultReverbSendLevel; // 0xfc
	int32_t MaximumConcurrentStreams; // 0x100
	float GlobalMinPitchScale; // 0x104
	float GlobalMaxPitchScale; // 0x108
	TArray<FAudioQualitySettings> QualityLevels; // 0x110
	char bAllowPlayWhenSilent : 1; // 0x120
	char bDisableMasterEQ : 1; // 0x120
	char bAllowCenterChannel3DPanning : 1; // 0x120
	uint32_t NumStoppingSources; // 0x124
	EPanningMethod PanningMethod; // 0x128
	EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x129
	FString DialogueFilenameFormat; // 0x130
};

struct UNiagaraDataInterfaceCurveBase : UNiagaraDataInterface {
	TArray<float> ShaderLUT; // 0x30
	float LUTMinTime; // 0x40
	float LUTMaxTime; // 0x44
	float LUTInvTimeRange; // 0x48
	float LUTNumSamplesMinusOne; // 0x4c
	char bUseLUT : 1; // 0x50
};

struct UKSPurchaseData : UObject {
	UPUMG_StoreItem* StoreItem; // 0x28
	int32_t PurchaseQuantity; // 0x30
	FString ExternalTransactionId; // 0x38
	FMulticastInlineDelegate PurchaseCompletedCallback; // 0x48
};

struct UAISense_Blueprint : UAISense {
	UUserDefinedStruct* ListenerDataType; // 0x80
	TArray<UAIPerceptionComponent*> ListenerContainer; // 0x88
	TArray<UAISenseEvent*> UnprocessedEvents; // 0x98
};

struct AKSCameraManager_C : AKSPlayerCameraManager {
	FPointerToUberGraphFrame UberGraphFrame; // 0x27d0
	FVector Vault_Medium_Running_Rotation_19357AD44276670DB6B495B6695BBF6C; // 0x27d8
	FVector Vault_Medium_Running_Location_19357AD44276670DB6B495B6695BBF6C; // 0x27e4
	float Vault_Medium_Running_FOV_19357AD44276670DB6B495B6695BBF6C; // 0x27f0
	ETimelineDirection Vault_Medium_Running__Direction_19357AD44276670DB6B495B6695BBF6C; // 0x27f4
	UTimelineComponent* Vault_Medium_Running; // 0x27f8
	FVector Vault_Short_Rotation_F73D9F61446F5474502BD8BF3252D762; // 0x2800
	FVector Vault_Short_Location_F73D9F61446F5474502BD8BF3252D762; // 0x280c
	float Vault_Short_FOV_F73D9F61446F5474502BD8BF3252D762; // 0x2818
	ETimelineDirection Vault_Short__Direction_F73D9F61446F5474502BD8BF3252D762; // 0x281c
	UTimelineComponent* Vault_Short; // 0x2820
	FVector Vault_Medium_Rotation_973BB77943BEA34D1A27C0A9070CFD1F; // 0x2828
	FVector Vault_Medium_Location_973BB77943BEA34D1A27C0A9070CFD1F; // 0x2834
	float Vault_Medium_FOV_973BB77943BEA34D1A27C0A9070CFD1F; // 0x2840
	ETimelineDirection Vault_Medium__Direction_973BB77943BEA34D1A27C0A9070CFD1F; // 0x2844
	UTimelineComponent* Vault_Medium; // 0x2848
	FVector Vault_Tall_Rotation_7F94194A49D4BE17D3B299B0FF993F6D; // 0x2850
	FVector Vault_Tall_Location_7F94194A49D4BE17D3B299B0FF993F6D; // 0x285c
	float Vault_Tall_FOV_7F94194A49D4BE17D3B299B0FF993F6D; // 0x2868
	ETimelineDirection Vault_Tall__Direction_7F94194A49D4BE17D3B299B0FF993F6D; // 0x286c
	UTimelineComponent* Vault_Tall; // 0x2870
	FVector Mantle_Short_Rotation_CF02379640077BEA8312A4A97CABFFE5; // 0x2878
	FVector Mantle_Short_Location_CF02379640077BEA8312A4A97CABFFE5; // 0x2884
	float Mantle_Short_FOV_CF02379640077BEA8312A4A97CABFFE5; // 0x2890
	ETimelineDirection Mantle_Short__Direction_CF02379640077BEA8312A4A97CABFFE5; // 0x2894
	UTimelineComponent* Mantle_Short; // 0x2898
	FVector Mantle_Medium_Rotation_BD9A8E7641CB9B707C1CE6BA8842B569; // 0x28a0
	FVector Mantle_Medium_Location_BD9A8E7641CB9B707C1CE6BA8842B569; // 0x28ac
	float Mantle_Medium_FOV_BD9A8E7641CB9B707C1CE6BA8842B569; // 0x28b8
	ETimelineDirection Mantle_Medium__Direction_BD9A8E7641CB9B707C1CE6BA8842B569; // 0x28bc
	UTimelineComponent* Mantle_Medium; // 0x28c0
	FVector Mantle_Tall_Rotation_745F8D394D1BA4D0F0F12C9F36C8F1F2; // 0x28c8
	FVector Mantle_Tall_Location_745F8D394D1BA4D0F0F12C9F36C8F1F2; // 0x28d4
	float Mantle_Tall_FOV_745F8D394D1BA4D0F0F12C9F36C8F1F2; // 0x28e0
	ETimelineDirection Mantle_Tall__Direction_745F8D394D1BA4D0F0F12C9F36C8F1F2; // 0x28e4
	UTimelineComponent* Mantle_Tall; // 0x28e8
	FVector JumpLanding_Rotation_F0A9B6BE484D0B52D2A1D2A14592B75A; // 0x28f0
	FVector JumpLanding_Location_F0A9B6BE484D0B52D2A1D2A14592B75A; // 0x28fc
	float JumpLanding_FOV_F0A9B6BE484D0B52D2A1D2A14592B75A; // 0x2908
	ETimelineDirection JumpLanding__Direction_F0A9B6BE484D0B52D2A1D2A14592B75A; // 0x290c
	UTimelineComponent* JumpLanding; // 0x2910
	FVector JumpStart_Rotation_626F506A47DB820B20B53DBAEA84159F; // 0x2918
	FVector JumpStart_Location_626F506A47DB820B20B53DBAEA84159F; // 0x2924
	float JumpStart_FOV_626F506A47DB820B20B53DBAEA84159F; // 0x2930
	ETimelineDirection JumpStart__Direction_626F506A47DB820B20B53DBAEA84159F; // 0x2934
	UTimelineComponent* JumpStart; // 0x2938
};

struct UKSActivityRewardCondition_RevealClass : UKSActivityRewardCondition {
	TArray<UObject*> MatchingRevealClasses; // 0x30
};

struct UMaterialExpressionStaticComponentMaskParameter : UMaterialExpressionParameter {
	FExpressionInput Input; // 0x58
	char DefaultR : 1; // 0x6c
	char DefaultG : 1; // 0x6c
	char DefaultB : 1; // 0x6c
	char DefaultA : 1; // 0x6c
};

struct ULoginLinkPrompt_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UStandardButton_C* CreateButton; // 0x528
	UStandardButton_C* DeclineButton; // 0x530
	UStandardButton_C* ExistingButton; // 0x538
	UImage* highlight_stroke; // 0x540
	UImage* highlightborder; // 0x548
	UImage* Image_56; // 0x550
	UImage* Image_297; // 0x558
	UImage* Image_531; // 0x560
	UWidgetSwitcher* NextSwitcher; // 0x568
	UImage* TitleLogo; // 0x570
};

struct UMaterialExpressionMakeMaterialAttributes : UMaterialExpression {
	FExpressionInput BaseColor; // 0x40
	FExpressionInput Metallic; // 0x54
	FExpressionInput Specular; // 0x68
	FExpressionInput Roughness; // 0x7c
	FExpressionInput Anisotropy; // 0x90
	FExpressionInput EmissiveColor; // 0xa4
	FExpressionInput Opacity; // 0xb8
	FExpressionInput OpacityMask; // 0xcc
	FExpressionInput Normal; // 0xe0
	FExpressionInput Tangent; // 0xf4
	FExpressionInput WorldPositionOffset; // 0x108
	FExpressionInput WorldDisplacement; // 0x11c
	FExpressionInput TessellationMultiplier; // 0x130
	FExpressionInput SubsurfaceColor; // 0x144
	FExpressionInput ClearCoat; // 0x158
	FExpressionInput ClearCoatRoughness; // 0x16c
	FExpressionInput AmbientOcclusion; // 0x180
	FExpressionInput Refraction; // 0x194
	FExpressionInput CustomizedUVs[0x8]; // 0x1a8
	FExpressionInput PixelDepthOffset; // 0x248
	FExpressionInput ShadingModel; // 0x25c
};

struct UKSPlayerMod_PingOnOtherDowned : UKSPlayerMod {
	int32_t NumberOfPings; // 0x330
	int32_t NumberOfEnemiesToPing; // 0x334
	bool ShouldPingDownedPlayer; // 0x338
	float SecondsToRevealPingedEnemies; // 0x33c
	float PingPeriod; // 0x340
	float PingRadius; // 0x344
	bool PingAllEnemyTeams; // 0x348
	bool BroadcastPingToAllies; // 0x349
	bool DelayPingPastDownImmune; // 0x34a
	TSoftObjectPtr<UParticleSystem> EmitterTemplate; // 0x350
};

struct UKSBTD_CanActivateAbility : UBTDecorator {
	TSoftObjectPtr<UKSPlayerMod> Ability; // 0x68
};

struct UNavigationDataChunk : UObject {
	FName NavigationDataName; // 0x28
};

struct UAkAudioBank : UAkAssetBase {
	bool AutoLoad; // 0x58
	TMap<FString, TSoftObjectPtr<UAkAssetPlatformData>> LocalizedPlatformAssetDataMap; // 0x60
	UAkAssetPlatformData* CurrentLocalizedPlatformAssetData; // 0xb0
};

struct UParticleModuleAccelerationConstant : UParticleModuleAccelerationBase {
	FVector Acceleration; // 0x38
};

struct UMovieSceneAudioSection : UMovieSceneSection {
	USoundBase* Sound; // 0xe0
	FFrameNumber StartFrameOffset; // 0xe8
	float StartOffset; // 0xec
	float AudioStartTime; // 0xf0
	float AudioDilationFactor; // 0xf4
	float AudioVolume; // 0xf8
	FMovieSceneFloatChannel SoundVolume; // 0x100
	FMovieSceneFloatChannel PitchMultiplier; // 0x1a0
	FMovieSceneActorReferenceData AttachActorData; // 0x240
	bool bSuppressSubtitles; // 0x2f0
	bool bOverrideAttenuation; // 0x2f1
	USoundAttenuation* AttenuationSettings; // 0x2f8
	FDelegate OnQueueSubtitles; // 0x300
	FMulticastInlineDelegate OnAudioFinished; // 0x310
	FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x320
};

struct UMasterWeapon_ABP_C : UKSWeaponAnimInstance {
	FAnimNode_Root AnimGraphNode_Root; // 0x3f0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_18; // 0x430
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_7; // 0x548
	FAnimNode_Slot AnimGraphNode_Slot_2; // 0x578
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x5d0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x608
	FAnimNode_RefPose AnimGraphNode_LocalRefPose_5; // 0x640
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_7; // 0x668
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8; // 0x7c8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_6; // 0x878
	FAnimNode_RefPose AnimGraphNode_LocalRefPose_4; // 0x9d8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_5; // 0xa00
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0xb60
	FAnimNode_RefPose AnimGraphNode_LocalRefPose_3; // 0xba0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_4; // 0xbc8
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0xd28
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0xd68
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_8; // 0xe28
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_17; // 0xef0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_16; // 0x1008
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_15; // 0x1120
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_14; // 0x1238
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_13; // 0x1350
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7; // 0x1468
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_7; // 0x1518
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7; // 0x1548
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_6; // 0x1610
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_14; // 0x1640
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_6; // 0x1678
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_13; // 0x16a8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_3; // 0x16e0
	FAnimNode_RefPose AnimGraphNode_LocalRefPose_2; // 0x1840
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_2; // 0x1868
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x19c8
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x1a08
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6; // 0x1ac8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_12; // 0x1b78
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_11; // 0x1c90
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_10; // 0x1da8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_12; // 0x1ec0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5; // 0x1ef8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5; // 0x1f28
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5; // 0x1fd8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_11; // 0x2008
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_9; // 0x2040
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x2158
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6; // 0x22b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_10; // 0x2380
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4; // 0x23b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9; // 0x2468
	FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive; // 0x24a0
	FAnimNode_RefPose AnimGraphNode_LocalRefPose; // 0x2580
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_8; // 0x25a8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_7; // 0x26c0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_6; // 0x27d8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_5; // 0x28f0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x2a08
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4; // 0x2ab8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4; // 0x2ae8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_5; // 0x2b18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8; // 0x2be0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3; // 0x2c18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7; // 0x2c48
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_4; // 0x2c80
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3; // 0x2d98
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_4; // 0x2dc8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6; // 0x2e90
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x2ec8
	FAnimNode_Slot AnimGraphNode_Slot; // 0x2f78
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3; // 0x2fd0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5; // 0x3098
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4; // 0x30d0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_3; // 0x3108
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_2; // 0x3220
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2; // 0x3338
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3; // 0x3400
	FKSAnimNode_Mirror KSAnimGraphNode_Mirror; // 0x3438
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2; // 0x3558
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2; // 0x3588
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x35b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x3680
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x36b8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x37d0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x3800
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x38b0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x38e0
	float HideMagazineAlpha; // 0x3918
	UAnimSequence* Weapon ABP Idle; // 0x3920
	UAnimSequence* Weapon ABP Holster; // 0x3928
	FRotator Shell Housing Spin; // 0x3930
	int32_t Missing Shell Count; // 0x393c
	bool Shell Loading; // 0x3940
	FRotator Target Shell Housing Spin; // 0x3944
	bool ShellE_Hidden; // 0x3950
	int32_t Revolver Index; // 0x3954
	float Turn Directional Amount; // 0x3958
	float Scope Scale Alpha; // 0x395c
	bool Is Revolver; // 0x3960
	bool Is Multi Stage Reload; // 0x3961
	float Multi Stage Reload Alpha; // 0x3964
	bool Is Holstered; // 0x3968
	FRotator Revolver Chamber; // 0x396c
	bool Prevent Scope Scaling Override; // 0x3978
	float Alt Scope Scale Alpha; // 0x397c
	float UnspentShellAlphaA; // 0x3980
	float UnspentShellAlphaB; // 0x3984
	float UnspentShellAlphaC; // 0x3988
	float UnspentShellAlphaD; // 0x398c
	float UnspentShellAlphaE; // 0x3990
	float UnspentShellAlphaF; // 0x3994
	float SpentShellAlphaA; // 0x3998
	float SpentShellAlphaB; // 0x399c
	float SpentShellAlphaC; // 0x39a0
	float SpentShellAlphaD; // 0x39a4
	float SpentShellAlphaE; // 0x39a8
	float SpentShellAlphaF; // 0x39ac
	bool Is in Lobby Viewer?; // 0x39b0
	float Is Stock Folded; // 0x39b4
	FRotator Stock Rotation Target; // 0x39b8
	FRotator Stock Alt Rotation Target; // 0x39c4
	FVector ADS_ScopeLocationModifier; // 0x39d0
	bool UseAdditive; // 0x39dc
	bool is reloading; // 0x39dd
	bool Disable Alternate Mirroring; // 0x39de
	bool Temp_bool_Variable; // 0x39df
	bool Temp_bool_Variable_2; // 0x39e0
	bool Temp_bool_Variable_3; // 0x39e1
	bool Temp_bool_Variable_4; // 0x39e2
	bool Temp_bool_Variable_5; // 0x39e3
	bool Temp_bool_Variable_6; // 0x39e4
	float K2Node_Event_NewAlpha_2; // 0x39e8
	bool K2Node_Event_bIsRevolver; // 0x39ec
	bool K2Node_Event_bIsMultiStageReload; // 0x39ed
	EWeaponStateNew K2Node_Event_NewWeaponState; // 0x39ee
	bool K2Node_Event_bIsStockFolded; // 0x39ef
	FRotator K2Node_Event_StockRotationTarget; // 0x39f0
	FRotator K2Node_Event_StockAltRotationTarget; // 0x39fc
	bool K2Node_Event_bUseAdditive; // 0x3a08
	float K2Node_Event_HideMagazineAlpha; // 0x3a0c
	bool Temp_bool_Variable_7; // 0x3a10
	bool Temp_bool_Variable_8; // 0x3a11
	bool K2Node_Event_bSetIsShieldActive; // 0x3a12
	float K2Node_Event_NewAlpha; // 0x3a14
	FRotator K2Node_Event_NewRevolverChamberRot; // 0x3a18
	UKSWeaponComponent* K2Node_Event_OwningWeaponComponent; // 0x3a28
	EWeaponStateNew K2Node_Event_OldState; // 0x3a30
	EWeaponStateNew K2Node_Event_NewState; // 0x3a31
	bool K2Node_SwitchEnum_CmpSuccess; // 0x3a32
	EWeaponStateNew Temp_byte_Variable; // 0x3a33
	bool Temp_bool_Variable_9; // 0x3a34
	bool Temp_bool_Variable_10; // 0x3a35
	bool Temp_bool_Variable_11; // 0x3a36
	bool K2Node_Select_Default; // 0x3a37
};

struct UKSPlayerMod_MeleeMoveSpeed : UKSPlayerMod {
	float MeleeMoveSpeedMultiplier; // 0x330
};

struct UEditableGameplayTagQueryExpression_AllExprMatch : UEditableGameplayTagQueryExpression {
	TArray<UEditableGameplayTagQueryExpression*> Expressions; // 0x28
};

struct USourceEffectStereoDelayPreset : USoundEffectSourcePreset {
	FSourceEffectStereoDelaySettings Settings; // 0x7c
};

struct UKSHealthWidget : UKSPawnWidget {
	float CachedHealth; // 0x540
	float CachedArmor; // 0x544
	float CachedMaxHealth; // 0x548
	float CachedOverheal; // 0x54c
};

struct UDebugBaseCommandHeader_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* HeaderText; // 0x240
	FString HeaderString; // 0x248
};

struct UWBP_StoreItemInterior_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UVerticalBox* BannerContainer; // 0x528
	UWidgetSwitcher* BannerSwitcher; // 0x530
	UTextBlock* BaseCount; // 0x538
	UTextBlock* BonusCount; // 0x540
	UVerticalBox* BonusCurrencyWrapper; // 0x548
	UImage* BtnBkg; // 0x550
	UImage* CornerHighlight; // 0x558
	UOverlay* CornerHighlightWrapper; // 0x560
	UWidgetSwitcher* DescriptionSwitcher; // 0x568
	UWBP_StoreDiscountTag_C* DiscountTag; // 0x570
	UTextBlock* DLCDesc; // 0x578
	UTextBlock* DLCName; // 0x580
	UVerticalBox* DLCNameWrapper; // 0x588
	UVerticalBox* FoundersLabel; // 0x590
	UTextBlock* FoundersName; // 0x598
	UImage* GradientBG; // 0x5a0
	UWBP_AsyncIcon_C* ItemImage; // 0x5a8
	UTextBlock* ItemName; // 0x5b0
	UTextBlock* ItemName_Currency; // 0x5b8
	UImage* OwnedCheckmark; // 0x5c0
	UTextBlock* OwnedText; // 0x5c8
	UWBP_StorePriceDisplay_C* PriceDisplay; // 0x5d0
	UWidgetSwitcher* PriceSwitcher; // 0x5d8
	UImage* RarityDecro; // 0x5e0
	UImage* RarityDecro_2; // 0x5e8
	UVerticalBox* RarityInfo; // 0x5f0
	URichTextBlock* RarityRichText; // 0x5f8
	UTextBlock* RefundTotal_2; // 0x600
	UBorder* RepRefund; // 0x608
	UBorder* ThinStrokeHighlightWrapper; // 0x610
	UWBP_NewTag_C* WBP_NewTag; // 0x618
	UWBP_StoreCalloutBanner_C* WBP_StoreCalloutBanner; // 0x620
	E_StorePanelSize EPanelSize; // 0x628
};

struct UWBP_PlayerAwardsScreen_C : UKSPlayerAwardsPanelWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnShow; // 0x528
	UImage* BG; // 0x530
	UKSSortableGridPanel* GrdAwardEntries; // 0x538
	UScrollBox* SclAwardEntries; // 0x540
	UWBP_Header1_C* WBP_Header1; // 0x548
	float ScrollSpeed; // 0x550
};

struct UPUMG_QueueDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnQueueJoined; // 0x38
	FMulticastInlineDelegate OnQueueLeft; // 0x48
	FMulticastInlineDelegate OnQueueStatusChange; // 0x58
	FMulticastInlineDelegate OnQueueDataUpdated; // 0x68
	FMulticastInlineDelegate OnMatchStatusUpdatedError; // 0x78
	FMulticastInlineDelegate OnCustomMatchJoined; // 0x88
	FMulticastInlineDelegate OnCustomQueueMemberAdded; // 0x98
	FMulticastInlineDelegate OnCustomQueueMemberRemoved; // 0xa8
	FMulticastInlineDelegate OnCustomQueueMemberUpdated; // 0xb8
	FMulticastInlineDelegate OnCustomQueueChanged; // 0xc8
	FMulticastInlineDelegate OnCustomInviteErrorRecieved; // 0xd8
	int32_t PendingCustomMatchMapId; // 0xe8
	TArray<FPUMG_ActivityQueuePair> ActivityQueuePairs; // 0xf0
	FString ActivityToJoin; // 0x100
	bool bActivityToJoinIsMultiplayer; // 0x110
	TArray<int32_t> QueueIds; // 0x118
	float QueueUpdatePollInterval; // 0x188
	FTimerHandle QueueUpdateTimerHandle; // 0x190
	TArray<FPUMG_CustomMatchMember> CustomMatchMembers; // 0x198
	int32_t CustomMatchSpectateTeamId; // 0x218
	TArray<int32_t> RepeatMapGameIds; // 0x220
	float RepeatMapOdds; // 0x230
};

struct UMovieSceneNiagaraParameterTrack : UMovieSceneNiagaraTrack {
	FNiagaraVariable Parameter; // 0x68
};

struct UNiagaraDataInterfaceSkeletalMesh : UNiagaraDataInterface {
	AActor* Source; // 0x30
	FNiagaraUserParameterBinding MeshUserParameter; // 0x38
	USkeletalMeshComponent* SourceComponent; // 0x60
	ENDISkeletalMesh_SkinningMode SkinningMode; // 0x68
	TArray<FName> SamplingRegions; // 0x70
	int32_t WholeMeshLOD; // 0x80
	TArray<FName> FilteredBones; // 0x88
	TArray<FName> FilteredSockets; // 0x98
	FName ExcludeBoneName; // 0xa8
	char bExcludeBone : 1; // 0xb0
};

struct UMaterialExpressionArcsine : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UReloadOnDodgeRollModInst_C : UKSModInst_OnDodgeRoll {
	FPointerToUberGraphFrame UberGraphFrame; // 0x1c0
	int32_t Previous ammo in clip; // 0x1c8
};

struct UEnvQueryGenerator_Composite : UEnvQueryGenerator {
	TArray<UEnvQueryGenerator*> Generators; // 0x50
	char bAllowDifferentItemTypes : 1; // 0x60
	char bHasMatchingItemType : 1; // 0x60
	UEnvQueryItemType* ForcedItemType; // 0x68
};

struct UKSBTAbilityConditionValidator : UDataAsset {
	bool bShouldUsePerceptionFilter; // 0x30
	TArray<UAISense*> SensesToUse; // 0x38
	FKSPerceptionFilter PerceptionFilter; // 0x48
	int32_t MinPerceivedStimuliCount; // 0x238
	bool bCheckCombatTarget; // 0x23c
	bool bCheckTargetVisible; // 0x23d
	bool bCheckTargetHidden; // 0x23e
	bool bCheckDistance; // 0x23f
	float MinDistanceMeters; // 0x240
	float MaxDistanceMeters; // 0x244
};

struct UPhysicsAsset : UObject {
	TArray<int32_t> BoundsBodies; // 0x30
	TArray<USkeletalBodySetup*> SkeletalBodySetups; // 0x40
	TArray<UPhysicsConstraintTemplate*> ConstraintSetup; // 0x50
	FSolverIterations SolverIterations; // 0x60
	char bNotForDedicatedServer : 1; // 0x78
	UThumbnailInfo* ThumbnailInfo; // 0x120
	TArray<UBodySetup*> BodySetup; // 0x128
};

struct AAIController : AController {
	char bStartAILogicOnPossess : 1; // 0x2d0
	char bStopAILogicOnUnposses : 1; // 0x2d0
	char bLOSflag : 1; // 0x2d0
	char bSkipExtraLOSChecks : 1; // 0x2d0
	char bAllowStrafe : 1; // 0x2d0
	char bWantsPlayerState : 1; // 0x2d0
	char bSetControlRotationFromPawnOrientation : 1; // 0x2d0
	UPathFollowingComponent* PathFollowingComponent; // 0x2d8
	UBrainComponent* BrainComponent; // 0x2e0
	UAIPerceptionComponent* PerceptionComponent; // 0x2e8
	UPawnActionsComponent* ActionsComp; // 0x2f0
	UBlackboardComponent* Blackboard; // 0x2f8
	UGameplayTasksComponent* CachedGameplayTasksComponent; // 0x300
	UNavigationQueryFilter* DefaultNavigationFilterClass; // 0x308
	FMulticastInlineDelegate ReceiveMoveCompleted; // 0x310
};

struct UGizmoAxisIntervalParameterSource : UGizmoBaseFloatParameterSource {
	TScriptInterface<IGizmoFloatParameterSource> FloatParameterSource; // 0x48
	float MinParameter; // 0x58
	float MaxParameter; // 0x5c
};

struct UKSActivityRewardCondition_WeaponTagUsed : UKSActivityRewardCondition {
	TArray<FGameplayTag> MatchingWeaponTags; // 0x30
};

struct UKSModInst_ActivatedStateMachine : UKSModInst_Activated {
	TMap<FName, UKSPlayerMod_Activated*> ManagedModAssets; // 0x478
	TArray<FStateMachineModEntry> ManagedMods; // 0x4c8
	UKSModInst_Activated* CurrentActiveMod; // 0x4d8
	UKSModInst_Activated* LocalActiveMod; // 0x4e0
	bool bChargeAll; // 0x4e8
	bool bSharedDuration; // 0x4e9
	bool bDelayActivation; // 0x4ea
	TArray<FStateMachineObjectEntry> StateStorage; // 0x4f0
	FMulticastInlineDelegate OnStateStorageChangedDel; // 0x500
};

struct UMRMeshComponent : UPrimitiveComponent {
	UMaterialInterface* Material; // 0x438
	bool bCreateMeshProxySections; // 0x440
	bool bUpdateNavMeshOnMeshUpdate; // 0x441
	bool bNeverCreateCollisionMesh; // 0x442
	UBodySetup* CachedBodySetup; // 0x448
	TArray<UBodySetup*> BodySetups; // 0x450
	UMaterialInterface* WireframeMaterial; // 0x460
};

struct UMovieSceneEventSection : UMovieSceneSection {
	FNameCurve Events; // 0xe0
	FMovieSceneEventSectionData EventData; // 0x158
};

struct UGizmoTransformChangeStateTarget : UObject {
	TScriptInterface<IToolContextTransactionProvider> TransactionManager; // 0x50
};

struct UInterpGroupInst : UObject {
	UInterpGroup* Group; // 0x28
	AActor* GroupActor; // 0x30
	TArray<UInterpTrackInst*> TrackInst; // 0x38
};

struct USoundAttenuation : UObject {
	FSoundAttenuationSettings Attenuation; // 0x28
};

struct ULevelStreamingDynamic : ULevelStreaming {
	char bInitiallyLoaded : 1; // 0x150
	char bInitiallyVisible : 1; // 0x150
};

struct UNiagaraDataInterfaceCamera : UNiagaraDataInterface {
	int32_t PlayerControllerIndex; // 0x30
};

struct AKSAgentBase : AKSLagCompensatedActor {
	FMulticastInlineDelegate OnAgentRefund; // 0x270
	bool BeginMissionOnPlay; // 0x280
	UInterpToMovementComponent* MovementComponent; // 0x288
	UBoxComponent* CollisionBox; // 0x290
	TWeakObjectPtr<AController> OwningPlayer; // 0x298
	USkinnableMergedMeshComponent* MeshComponent; // 0x2a0
	UMultiSkinObject* SkinObject; // 0x2a8
	TArray<FName> ApparelObjectsToListenTo; // 0x2b0
	TArray<FName> FullKeywordList; // 0x2c0
	float MaxHealth; // 0x2d0
	EAgentRefundMethod RefundMethod; // 0x2d4
	UKSWeaponAsset* AssociatedWeaponAsset; // 0x2d8
	float CurrentHealth; // 0x2e0
	FMulticastInlineDelegate OnHealthUpdate; // 0x2e8
	FMulticastInlineDelegate OnAgentMissionBegin; // 0x2f8
	int32_t OriginalOwnerId; // 0x308
	TArray<FGameplayTag> ItemTags; // 0x310
};

struct UKSDropRuleComponent : UKSGameRuleComponent {
	FGameplayTagContainer WeaponSlotsToDropOnDeath; // 0xb0
	TArray<FKSRandomDropEntry> RandomDeathDropList; // 0xd0
	FGameplayTagContainer WeaponSlotsToDropOnDowned; // 0xe0
	TArray<FKSRandomDropEntry> RandomDownDropList; // 0x100
	float PlayerDropLifetime; // 0x110
	float RequiredAmmoPercent; // 0x114
};

struct UMaterialExpressionCrossProduct : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
};

struct UHandCrawlingNotify_C : UAnimNotify {
	StepType StepType; // 0x38
	FName BoneName; // 0x3c
};

struct UWBP_RogueMasteryIcon_C : UUserWidget {
	UImage* background; // 0x238
	UWidgetSwitcher* BadgeSwitcher; // 0x240
	UTextBlock* MasteryLevel; // 0x248
	UImage* MaxMastery; // 0x250
	USizeBox* MaxMasteryWrapper; // 0x258
	UOverlay* RegularMastery; // 0x260
};

struct UWBP_RogueMasteryRewardIcon_C : UUserWidget {
	UImage* Fill; // 0x238
	UImage* Stroke; // 0x240
};

struct UDemoNetDriver : UNetDriver {
	TMap<FString, FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0x870
	float CheckpointSaveMaxMSPerFrame; // 0xc84
	TArray<FMulticastRecordOptions> MulticastRecordOptions; // 0xcb8
	bool bIsLocalReplay; // 0xd18
	TArray<APlayerController*> SpectatorControllers; // 0xd20
};

struct UWBP_PlayerProfileScreen_AwardPanel_C : UKSPlayerAwardsPanelWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_PlayerProfileScreen_AwardEntry_C* AwardEntry1; // 0x528
	UWBP_PlayerProfileScreen_AwardEntry_C* AwardEntry2; // 0x530
	UWBP_PlayerProfileScreen_AwardEntry_C* AwardEntry3; // 0x538
	UWBP_PlayerProfileScreen_AwardEntry_C* AwardEntry4; // 0x540
	UVerticalBox* ContentBox; // 0x548
	UWBP_ThrobberHorizontal_C* Loading; // 0x550
	UVerticalBox* LoadingWrapper; // 0x558
	UImage* LockIcon; // 0x560
	UVerticalBox* PanelContent; // 0x568
	UTextBlock* Title; // 0x570
	UVerticalBox* TitleWrapper; // 0x578
	UTextBlock* TxtNoRecentProgress; // 0x580
	UWBP_PanelButton_C* WBP_PanelButton; // 0x588
	UWidgetSwitcher* WidgetSwitcher_1; // 0x590
	bool IsDisabled; // 0x598
};

struct UWBP_WeaponMilestoneEntry_Progression_C : UKSWeaponMilestoneEntry {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UWidgetAnimation* AnimSlideDown; // 0x530
	UWidgetAnimation* AnimSlideUp; // 0x538
	UWidgetAnimation* AnimOnTierRefresh; // 0x540
	UWidgetAnimation* AnimOnMilestoneComplete; // 0x548
	USizeBox* 1pxBar; // 0x550
	UImage* background; // 0x558
	UHorizontalBox* CardContent; // 0x560
	UTextBlock* ChallengeDescription; // 0x568
	UWBP_ProgressEarnedBar_C* ChallengeProgressBar; // 0x570
	UTextBlock* ChallengeProgressText; // 0x578
	UTextBlock* ChallengeProgressText_WidthOffest; // 0x580
	UImage* CompletedBorderGlow; // 0x588
	UVerticalBox* Content_active; // 0x590
	UOverlay* ContractWrapper; // 0x598
	UImage* DiamondGradient; // 0x5a0
	UImage* EdgeGlowTop; // 0x5a8
	UImage* Gradient; // 0x5b0
	UImage* Image_544; // 0x5b8
	UTextBlock* LevelUpText; // 0x5c0
	UOverlay* LockedWrapper; // 0x5c8
	UHorizontalBox* ProgressGroup; // 0x5d0
	UKSAsyncImage* RewardImage; // 0x5d8
	UTextBlock* RewardQtyText; // 0x5e0
	UOverlay* Root; // 0x5e8
	UImage* TopBar; // 0x5f0
	UImage* TopLineRule; // 0x5f8
	UImage* TransitionFlash; // 0x600
	UImage* XPBarShimmer; // 0x608
	EChallengeEntry_Card_State CurrentVisualState; // 0x610
	FName WeekTableRowName; // 0x614
	FActivitySequenceRow CurrentActivitySequence; // 0x620
	UAkAudioEvent* ButtonClickSound; // 0x650
	UAkAudioEvent* ButtonHoverSound; // 0x658
	int32_t MilestoneIndex; // 0x660
	FMulticastInlineDelegate OnMilestoneCompleted; // 0x668
	FKSMilestoneCompletedSummaryEntry ProgressSummary; // 0x678
	int32_t AnimStartCount; // 0x718
	FMulticastInlineDelegate OnAnimSequenceFinished; // 0x720
	int32_t AnimEndCount; // 0x730
	bool SignaledFinished; // 0x734
	EKSMilestoneCompleteAnimState CurrentAnimState; // 0x735
	float DelayBeforeTierUp; // 0x738
	float DelayBetweenMilestones; // 0x73c
	float BarLerpDuration; // 0x740
	FTimerHandle AnimBlockTimeout; // 0x748
};

struct UWBP_WeaponDetails_C : UKSWeaponDetailScreen {
	FPointerToUberGraphFrame UberGraphFrame; // 0x590
	UWBP_WeaponHubCosmeticItem_C* EquippedWrap; // 0x598
	UBorder* GadgetDesc; // 0x5a0
	UTextBlock* GadgetDescText; // 0x5a8
	UImage* Image; // 0x5b0
	UImage* Image_162; // 0x5b8
	UImage* Image_303; // 0x5c0
	UVerticalBox* PageTitle; // 0x5c8
	UKSAsyncImage* ScorcherRender; // 0x5d0
	UWBP_UnlockMilestonesButton_C* UnlockMilestonesButton; // 0x5d8
	UWBP_ReactiveWrapStepPreview_C* WBP_ReactiveWrapStepPreview; // 0x5e0
	UTextBlock* WeaponCategoryText; // 0x5e8
	UTextBlock* WeaponNameText; // 0x5f0
	FName WeaponViewActorName; // 0x5f8
	UAkAudioEvent* GamePad_FaceButtonTOP_SFX; // 0x600
	UAkAudioEvent* GamePad_LTrigger_SFX; // 0x608
	UAkAudioEvent* GamePad_RTrigger_SFX; // 0x610
	UAkAudioEvent* GamePad_FaceButtonLEFT_SFX; // 0x618
};

struct UPrimitiveComponent : USceneComponent {
	float MinDrawDistance; // 0x210
	float LDMaxDrawDistance; // 0x214
	float CachedMaxDrawDistance; // 0x218
	ESceneDepthPriorityGroup DepthPriorityGroup; // 0x21c
	ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x21d
	EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x21e
	ELightmapType LightmapType; // 0x21f
	char bUseMaxLODAsImposter : 1; // 0x220
	char bBatchImpostersAsInstances : 1; // 0x220
	char bNeverDistanceCull : 1; // 0x220
	char bForceLocalLighting : 1; // 0x220
	char bAlwaysCreatePhysicsState : 1; // 0x221
	char bGenerateOverlapEvents : 1; // 0x221
	char bMultiBodyOverlap : 1; // 0x221
	char bTraceComplexOnMove : 1; // 0x221
	char bReturnMaterialOnMove : 1; // 0x221
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x221
	char bAllowCullDistanceVolume : 1; // 0x221
	char bHasMotionBlurVelocityMeshes : 1; // 0x221
	char bVisibleInReflectionCaptures : 1; // 0x222
	char bVisibleInRayTracing : 1; // 0x222
	char bRenderInMainPass : 1; // 0x222
	char bRenderInDepthPass : 1; // 0x222
	char bReceivesDecals : 1; // 0x222
	char bOwnerNoSee : 1; // 0x222
	char bOnlyOwnerSee : 1; // 0x222
	char bTreatAsBackgroundForOcclusion : 1; // 0x222
	char bUseAsOccluder : 1; // 0x223
	char bSelectable : 1; // 0x223
	char bForceMipStreaming : 1; // 0x223
	char bHasPerInstanceHitProxies : 1; // 0x223
	char CastShadow : 1; // 0x223
	char bAffectDynamicIndirectLighting : 1; // 0x223
	char bAffectDistanceFieldLighting : 1; // 0x223
	char bCastDynamicShadow : 1; // 0x223
	char bCastStaticShadow : 1; // 0x224
	char bCastVolumetricTranslucentShadow : 1; // 0x224
	char bSelfShadowOnly : 1; // 0x224
	char bCastFarShadow : 1; // 0x224
	char bCastInsetShadow : 1; // 0x224
	char bCastCinematicShadow : 1; // 0x224
	char bCastHiddenShadow : 1; // 0x224
	char bCastShadowAsTwoSided : 1; // 0x224
	char bShouldNotReceiveCapsuleShadows : 1; // 0x225
	char bLightAsIfStatic : 1; // 0x225
	char bLightAttachmentsAsGroup : 1; // 0x225
	char bExcludeFromLightAttachmentGroup : 1; // 0x225
	char bReceiveMobileCSMShadows : 1; // 0x225
	char bSingleSampleShadowFromStationaryLights : 1; // 0x225
	char bIgnoreRadialImpulse : 1; // 0x225
	char bIgnoreRadialForce : 1; // 0x225
	char bApplyImpulseOnDamage : 1; // 0x226
	char bReplicatePhysicsToAutonomousProxy : 1; // 0x226
	char bFillCollisionUnderneathForNavmesh : 1; // 0x226
	char AlwaysLoadOnClient : 1; // 0x226
	char AlwaysLoadOnServer : 1; // 0x226
	char bUseEditorCompositing : 1; // 0x226
	char bRenderCustomDepth : 1; // 0x226
	char bExcludeFromContributionCulling : 1; // 0x226
	EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x228
	EOutlineDepthMode OutlineDepthMode; // 0x229
	ECanBeCharacterBase CanCharacterStepUpOn; // 0x22b
	FLightingChannels LightingChannels; // 0x22c
	ERendererStencilMask CustomDepthStencilWriteMask; // 0x22d
	int32_t CustomDepthStencilValue; // 0x230
	FCustomPrimitiveData CustomPrimitiveData; // 0x238
	FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x248
	int32_t TranslucencySortPriority; // 0x260
	int32_t VisibilityId; // 0x264
	TArray<URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x268
	int8_t VirtualTextureLodBias; // 0x278
	int8_t VirtualTextureCullMips; // 0x279
	int8_t VirtualTextureMinCoverage; // 0x27a
	ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x27b
	float LpvBiasMultiplier; // 0x280
	float OutlineThicknessMultiplier; // 0x284
	FLinearColor OutlineColor; // 0x288
	float OutlineZFadeMin; // 0x298
	float OutlineZFadeMax; // 0x29c
	float BoundsScale; // 0x2a8
	TArray<AActor*> MoveIgnoreActors; // 0x2b8
	TArray<UPrimitiveComponent*> MoveIgnoreComponents; // 0x2c8
	FBodyInstance BodyInstance; // 0x2e8
	FMulticastSparseDelegate OnComponentHit; // 0x3f8
	FMulticastSparseDelegate OnComponentBeginOverlap; // 0x3f9
	FMulticastSparseDelegate OnComponentEndOverlap; // 0x3fa
	FMulticastSparseDelegate OnComponentWake; // 0x3fb
	FMulticastSparseDelegate OnComponentSleep; // 0x3fc
	FMulticastSparseDelegate OnBeginCursorOver; // 0x3fe
	FMulticastSparseDelegate OnEndCursorOver; // 0x3ff
	FMulticastSparseDelegate OnClicked; // 0x400
	FMulticastSparseDelegate OnReleased; // 0x401
	FMulticastSparseDelegate OnInputTouchBegin; // 0x402
	FMulticastSparseDelegate OnInputTouchEnd; // 0x403
	FMulticastSparseDelegate OnInputTouchEnter; // 0x404
	FMulticastSparseDelegate OnInputTouchLeave; // 0x405
	UPrimitiveComponent* LODParentPrimitive; // 0x420
	float CustomFOV; // 0x428
};

struct APGame_WorldSettings : AWorldSettings {
	TArray<AActor*> ActorsToAlwaysSpawn; // 0x3a0
	TArray<FString> HighMemorySublevelSuffixes; // 0x3b0
	TArray<FString> LowMemorySublevelSuffixes; // 0x3c0
};

struct UKSPlayerMod_DodgeRollLockout : UKSPlayerMod {
	float LockoutTimeMultiplier; // 0x330
};

struct UWBP_OrdinalNumberText_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* MainText; // 0x240
	UTextBlock* SuperscriptText; // 0x248
	int32_t Number; // 0x250
};

struct AOnlineBeaconHost : AOnlineBeacon {
	int32_t ListenPort; // 0x250
	TArray<AOnlineBeaconClient*> ClientActors; // 0x258
};

struct UDestructibleComponent : USkinnedMeshComponent {
	char bFractureEffectOverride : 1; // 0x670
	TArray<FFractureEffect> FractureEffects; // 0x678
	bool bEnableHardSleeping; // 0x688
	float LargeChunkThreshold; // 0x68c
	FMulticastInlineDelegate OnComponentFracture; // 0x6a0
};

struct ULightComponent : ULightComponentBase {
	float Temperature; // 0x238
	float MaxDrawDistance; // 0x23c
	float MaxDistanceFadeRange; // 0x240
	char bUseTemperature : 1; // 0x244
	int32_t ShadowMapChannel; // 0x248
	float MinRoughness; // 0x250
	float SpecularScale; // 0x254
	float ShadowResolutionScale; // 0x258
	float ShadowBias; // 0x25c
	float ShadowSlopeBias; // 0x260
	float ShadowSharpen; // 0x264
	float ContactShadowLength; // 0x268
	char ContactShadowLengthInWS : 1; // 0x26c
	char InverseSquaredFalloff : 1; // 0x26c
	char CastTranslucentShadows : 1; // 0x26c
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x26c
	char bAffectDynamicIndirectLighting : 1; // 0x26c
	char bForceCachedShadowsForMovablePrimitives : 1; // 0x26c
	FLightingChannels LightingChannels; // 0x270
	UMaterialInterface* LightFunctionMaterial; // 0x278
	FVector LightFunctionScale; // 0x280
	UTextureLightProfile* IESTexture; // 0x290
	char bUseIESBrightness : 1; // 0x298
	float IESBrightnessScale; // 0x29c
	float LightFunctionFadeDistance; // 0x2a0
	float DisabledBrightness; // 0x2a4
	char bEnableLightShaftBloom : 1; // 0x2a8
	float BloomScale; // 0x2ac
	float BloomThreshold; // 0x2b0
	float BloomMaxBrightness; // 0x2b4
	FColor BloomTint; // 0x2b8
	bool bUseRayTracedDistanceFieldShadows; // 0x2bc
	float RayStartOffsetDepthScale; // 0x2c0
};

struct UAkMusicSyncCallbackInfo : UAkCallbackInfo {
	int32_t PlayingID; // 0x30
	FAkSegmentInfo SegmentInfo; // 0x34
	EAkCallbackType MusicSyncType; // 0x58
	FString UserCueName; // 0x60
};

struct UPhysicalMaterial : UObject {
	float Friction; // 0x28
	EFrictionCombineMode FrictionCombineMode; // 0x2c
	bool bOverrideFrictionCombineMode; // 0x2d
	float Restitution; // 0x30
	EFrictionCombineMode RestitutionCombineMode; // 0x34
	bool bOverrideRestitutionCombineMode; // 0x35
	float Density; // 0x38
	float RaiseMassToPower; // 0x3c
	float DestructibleDamageThresholdScale; // 0x40
	UPhysicalMaterialPropertyBase* PhysicalMaterialProperty; // 0x48
	EPhysicalSurface SurfaceType; // 0x50
	float TireFrictionScale; // 0x54
	TArray<FTireFrictionScalePair> TireFrictionScales; // 0x58
};

struct UNiagaraDataInterfaceRWBase : UNiagaraDataInterface {
	TSet<int32_t> OutputShaderStages; // 0x30
	TSet<int32_t> IterationShaderStages; // 0x80
};

struct UKSBTTask_SelectBlackboardTarget : UBTTaskNode {
	FBlackboardKeySelector BlackboardKey; // 0x70
	TArray<UAISense*> SensesToUse; // 0x98
	FKSPerceptionFilter PerceptionFilter; // 0xa8
	bool SelectClosestTarget; // 0x298
	bool SelectFurthestTarget; // 0x299
	bool SelectRandomTarget; // 0x29a
};

struct UDestructibleFractureSettings : UObject {
	int32_t CellSiteCount; // 0x28
	FFractureMaterial FractureMaterialDesc; // 0x2c
	int32_t RandomSeed; // 0x50
	TArray<FVector> VoronoiSites; // 0x58
	int32_t OriginalSubmeshCount; // 0x68
	TArray<UMaterialInterface*> Materials; // 0x70
	TArray<FDestructibleChunkParameters> ChunkParameters; // 0x80
};

struct UParticleModuleColorOverLife : UParticleModuleColorBase {
	FRawDistributionVector ColorOverLife; // 0x30
	FRawDistributionFloat AlphaOverLife; // 0x78
	char bClampAlpha : 1; // 0xa8
};

struct UKSBTTask_WeaponDistanceChecks : UBTTaskNode {
	float IntervalCheckRangeMeters; // 0x70
	FBlackboardKeySelector CombatTargetKey; // 0x78
	FBlackboardKeySelector IdealAttackRangeKey; // 0xa0
	FBlackboardKeySelector StartAttackRangeKey; // 0xc8
	FBlackboardKeySelector InIdealRangeKey; // 0xf0
	FBlackboardKeySelector InAttackRangeKey; // 0x118
	FBlackboardKeySelector TooCloseKey; // 0x140
};

struct UComboBox : UWidget {
	TArray<UObject*> Items; // 0x110
	FDelegate OnGenerateWidgetEvent; // 0x120
	bool bIsFocusable; // 0x130
};

struct UKSWeaponAsset : UKSItem {
	UDataTable* ItemDisplayStatParamsTable; // 0x250
	FText WeaponDisplayName; // 0x258
	FText WeaponDescription; // 0x270
	EKSWeaponEquipType WeaponEquipType; // 0x288
	TSoftClassPtr<UObject> WeaponClass; // 0x290
	TSoftClassPtr<UObject> WeaponComponentClass; // 0x2b8
	TSoftClassPtr<UObject> WeaponAmmoWidgetClass; // 0x2e0
	TSoftClassPtr<UObject> WeaponDropClass; // 0x308
	bool bUnique; // 0x330
	bool bShouldBeRemovedWhenExhausted; // 0x331
	bool bCanBeDropped; // 0x332
	bool bWillDropWhenDowned; // 0x333
	bool bForceUprightDrops; // 0x334
	bool bDoesRestoreAmmo; // 0x335
	bool bModsCanReplenishAmmo; // 0x336
	bool bDoLocalReveals; // 0x337
	bool bCanEverFire; // 0x338
	bool bLagCompensatedFire; // 0x339
	bool bIgnoreNoFire; // 0x33a
	bool bLimitNumInPlay; // 0x33b
	int32_t MaxNumInPlay; // 0x33c
	bool bLimitDeployablesByPlayer; // 0x340
	int32_t PlayerDeployableThreshold; // 0x344
	bool bShowReserveAmmo; // 0x348
	bool bUsesEquipPoint; // 0x349
	bool bUsesEquipSlot; // 0x34a
	FGameplayTagContainer ValidEquipPoints; // 0x350
	EFireModeType FireModeType; // 0x370
	EWeaponCastType CastType; // 0x371
	int32_t RoundsPerBurst; // 0x374
	bool bUseAltFire; // 0x378
	bool bUseBuildupForCooking; // 0x379
	float BuildupTime; // 0x37c
	float PreFireTime; // 0x380
	float PreFireInterruptThreshold; // 0x384
	float AltPreFireTime; // 0x388
	float PostFireTime; // 0x38c
	float AltPostFireTime; // 0x390
	float PostFireForgivenessTime; // 0x394
	bool bSwapAfterFire; // 0x398
	float CooldownTime; // 0x39c
	bool bUseChargingFireRate; // 0x3a0
	float InitialPostFireTime; // 0x3a4
	float FinalPostFireTime; // 0x3a8
	float PostFireChargeTime; // 0x3ac
	float PostFireDecayTime; // 0x3b0
	float PostFireDecayDelay; // 0x3b4
	bool bCanEverReload; // 0x3b8
	bool bConsumeAmmoDirectlyFromInventory; // 0x3b9
	int32_t ClipSize; // 0x3bc
	EReloadType ReloadType; // 0x3c0
	float PreReloadTime; // 0x3c4
	float PostReloadTime; // 0x3c8
	float ReloadCooldownTime; // 0x3cc
	bool bReloadOnEmptyWhileScoped; // 0x3d0
	float FirstShotPreReloadTime; // 0x3d4
	bool bCanInterruptPreReload; // 0x3d8
	EAmmoType AmmoType; // 0x3d9
	int32_t DefaultAmmo; // 0x3dc
	bool bUnlimitedAmmo; // 0x3e0
	bool bMuteEmptyClipWarnings; // 0x3e1
	float HolsterTime; // 0x3e4
	bool bShouldRestrictHolsterInPostFire; // 0x3e8
	float RetriveTime; // 0x3ec
	bool bCanFireFromRetrieve; // 0x3f0
	EReticleType ReticleType; // 0x3f1
	bool bFadeUIOnAim; // 0x3f2
	FWeaponStateGraph WeaponStateGraph; // 0x3f8
	bool bDoRadialDamage; // 0x538
	bool bIsRadialDamageConical; // 0x539
	float HeadDamageAmount; // 0x53c
	float DamageAmount; // 0x540
	float LimbDamageAmount; // 0x544
	FInterpCurveFloat DamageFalloffCurve; // 0x548
	FRadialDamageParams RadialDamageParams; // 0x560
	bool bIgnoreFriendlies; // 0x574
	bool bIgnoreSelf; // 0x575
	bool bIgnoreWalls; // 0x576
	float RadialConicalHalfAngle; // 0x578
	TSoftClassPtr<UObject> DamageTypeClass; // 0x580
	float CautionRadius; // 0x5a8
	int32_t ShotPenetrationCount; // 0x5ac
	float DefaultAimTransitionTime; // 0x5b0
	bool bCanEverAimOverShoulder; // 0x5b4
	float AimOverShoulderTransitionTime; // 0x5b8
	bool bCanEverAimDownSights; // 0x5bc
	float AimDownSightsTransitionTime; // 0x5c0
	bool bLockoutAimStateInCooldown; // 0x5c4
	float AimDownSightsFov; // 0x5c8
	bool bCanEverAimAlternate; // 0x5cc
	float AimAlternateTransitionTime; // 0x5d0
	bool bPrefireLockon; // 0x5d4
	float PrefireLockonAngle; // 0x5d8
	float PrefireLockonDistance; // 0x5dc
	bool bLimitCameraRotation; // 0x5e0
	float MinCameraPitch; // 0x5e4
	float MaxCameraPitch; // 0x5e8
	float MinCameraYaw; // 0x5ec
	float MaxCameraYaw; // 0x5f0
	bool bOverrideShoulderCameraProperties; // 0x5f4
	float ShoulderCameraBoomLength; // 0x5f8
	FVector ShoulderCameraSocketOffset; // 0x5fc
	FVector ShoulderCameraTargetOffset; // 0x608
	FTransform ShoulderCameraTransform; // 0x620
	bool bIsMountedWeapon; // 0x650
	bool bAllowsManualShoulderSwap; // 0x651
	ECameraShoulder ForcedShoulder; // 0x652
	bool bUseCrouchAOSCamVertOffset; // 0x653
	float GamepadTurnSpeedMultiplier; // 0x654
	float GamepadAimedTurnSpeedMultiplier; // 0x658
	bool bPrefireOverlapSkipsToFire; // 0x65c
	TArray<FPrefireSkipWindow> PrefireSkipWindows; // 0x660
	float PrefireOverlapGracePeriod; // 0x670
	EThirdPersonAimOriginType ThirdPersonAimOriginType; // 0x674
	FVector ThirdPersonFixedRelativeOffset; // 0x678
	FName ThirdPersonAimOriginSocketName; // 0x684
	float BaseAccuracy; // 0x68c
	float CrouchAccuracyModifier; // 0x690
	float AimOverShoulderAccuracyModifier; // 0x694
	float InAirAccuracyModifier; // 0x698
	float MovementAccuracyPenalty; // 0x69c
	bool bUseAccuracyLoss; // 0x6a0
	float AccuracyLossPerShot; // 0x6a4
	float MaxFiringAccuracyLoss; // 0x6a8
	float AccuracyReturnRate; // 0x6ac
	float AccuracyGainPerShot; // 0x6b0
	float MaxFiringAccuracyGain; // 0x6b4
	float MaxAimedFiringAccuracyGain; // 0x6b8
	float AccuracyDecayRate; // 0x6bc
	float AccuracyReturnDelay; // 0x6c0
	float MaxHipFireAccuracy; // 0x6c4
	float MaxAimedAccuracy; // 0x6c8
	UKickbackModule* KickbackModule; // 0x6d0
	float KickbackApplicationTimeOverride; // 0x6d8
	bool bCanResetKickback; // 0x6dc
	float KickbackResetTime; // 0x6e0
	bool bUseKickbackRecovery; // 0x6e4
	float KickbackRecoveryDelay; // 0x6e8
	float KickbackRecoveryRate; // 0x6ec
	float KickbackRecoveryAcceleration; // 0x6f0
	float MaxCumulativeKickbackVerticalAngle; // 0x6f4
	float GamepadKickbackScaling; // 0x6f8
	float SprintRecoveryTime; // 0x6fc
	bool bStartFireInterruptsSprinting; // 0x700
	bool bStartReloadInterruptsSprinting; // 0x701
	bool bStartHolsterInterruptsSprinting; // 0x702
	float DodgeRollRecoveryTime; // 0x704
	bool bShouldPreventDodgeRollDuringFire; // 0x708
	bool bCanFireWhileInPowerSlide; // 0x709
	bool bCanUseWhileOnZipline; // 0x70a
	bool bIsAudible; // 0x70b
	float AudibleRange; // 0x70c
	float WalkSpeedModifier; // 0x710
	float ADSSpeedModifier; // 0x714
	float FiringSpeedModifier; // 0x718
	bool bCanUseOffGround; // 0x71c
	FGameplayTagContainer ValidWeaponAttachmentPoints; // 0x720
	TSet<TSoftObjectPtr<UKSWeaponAttachment>> ValidAttachments; // 0x740
	int32_t AttachmentSlotCount; // 0x790
	TMap<FName, TSoftObjectPtr<UKSWeaponAsset>> AuxiliaryWeapons; // 0x798
	TSoftObjectPtr<UForceFeedbackEffect> VibrationEffect; // 0x7e8
	TSoftObjectPtr<UForceFeedbackEffect> AlternativeVibrationEffect; // 0x810
	TSoftObjectPtr<UForceFeedbackAttenuation> AlternativeVibrationAttenuation; // 0x838
	UAkAudioEvent* RumbleEvent; // 0x860
	TSoftObjectPtr<UKSWeaponAsset> WeaponUpgrade; // 0x868
	TSoftObjectPtr<UTexture2D> ItemRenderImage; // 0x890
	float ADSRollMultiplier; // 0x8b8
	float ADSBumpStartStopMultiplier; // 0x8bc
	float ADSBumpLoopingMultiplier; // 0x8c0
	FADSBlurValues ADSBlurValuesInfo; // 0x8c8
};

struct UUserInterfaceSettings : UDeveloperSettings {
	ERenderFocusRule RenderFocusRule; // 0x38
	TMap<EMouseCursor, FHardwareCursorReference> HardwareCursors; // 0x40
	TMap<EMouseCursor, FSoftClassPath> SoftwareCursors; // 0x90
	FSoftClassPath DefaultCursor; // 0xe0
	FSoftClassPath TextEditBeamCursor; // 0xf8
	FSoftClassPath CrosshairsCursor; // 0x110
	FSoftClassPath HandCursor; // 0x128
	FSoftClassPath GrabHandCursor; // 0x140
	FSoftClassPath GrabHandClosedCursor; // 0x158
	FSoftClassPath SlashedCircleCursor; // 0x170
	float ApplicationScale; // 0x188
	EUIScalingRule UIScaleRule; // 0x18c
	FSoftClassPath CustomScalingRuleClass; // 0x190
	FRuntimeFloatCurve UIScaleCurve; // 0x1a8
	bool bAllowHighDPIInGameMode; // 0x230
	bool bLoadWidgetsOnDedicatedServer; // 0x231
	TArray<UObject*> CursorClasses; // 0x238
	UObject* CustomScalingRuleClassInstance; // 0x248
	UDPICustomScalingRule* CustomScalingRule; // 0x250
};

struct UMaterialExpressionCollectionParameter : UMaterialExpression {
	UMaterialParameterCollection* Collection; // 0x40
	FName ParameterName; // 0x48
	FGuid ParameterId; // 0x50
};

struct UInterpTrackAkAudioRTPC : UInterpTrackFloatBase {
	FString Param; // 0x90
	char bPlayOnReverse : 1; // 0xa0
	char bContinueRTPCOnMatineeEnd : 1; // 0xa0
};

struct UNiagaraDataInterfaceTexture : UNiagaraDataInterface {
	UTexture* Texture; // 0x30
};

struct USlateAccessibleWidgetData : UObject {
	bool bCanChildrenBeAccessible; // 0x28
	ESlateAccessibleBehavior AccessibleBehavior; // 0x29
	ESlateAccessibleBehavior AccessibleSummaryBehavior; // 0x2a
	FText AccessibleText; // 0x30
	FDelegate AccessibleTextDelegate; // 0x48
	FText AccessibleSummaryText; // 0x58
	FDelegate AccessibleSummaryTextDelegate; // 0x70
};

struct UDebugCameraControllerSettings : UDeveloperSettings {
	TArray<FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x38
};

struct UVariantSet : UObject {
	FText DisplayText; // 0x28
	bool bExpanded; // 0x58
	TArray<UVariant*> Variants; // 0x60
};

struct AKSCharacterBase : AKSCharacterFoundation {
	char PawnId; // 0xce8
	FMulticastInlineDelegate OnTakeArmorDamage; // 0xcf0
	float HealthRegenerationPerSecond; // 0xd30
	float HealthRegenerationPeriod; // 0xd34
	float HealthRegenerationDelay; // 0xd38
	FMulticastInlineDelegate OnHealthRegenDelayTimerActive; // 0xd40
	FMulticastInlineDelegate OnHealthRegenDelayTimerTick; // 0xd50
	FMulticastInlineDelegate OnHealthRegenDelayTimerComplete; // 0xd60
	UKSTimerComponent* HealthRegenDelayTimer; // 0xd70
	float CurrentOverheal; // 0xd80
	float OverhealDecayPerSecond; // 0xd84
	float OverhealDecayPeriod; // 0xd88
	FMulticastInlineDelegate OnOverhealChanged; // 0xdb0
	float QueuedMovementForgivenessPeriod; // 0xdc0
	float QueuedMovementForgivenessEndTime; // 0xdc4
	EKSQueuedMovement CurrentQueuedMovement; // 0xdc8
	FName FreeFallCollisionProfileName; // 0xdcc
	TWeakObjectPtr<UCameraShake> CurrentFreeFallCameraShake; // 0xde4
	UKSVelocityCameraShake* FreeFallCameraShake; // 0xdf8
	FMulticastInlineDelegate OnEndFreeFallDel; // 0xe00
	bool bRealWantsCrouch; // 0xe10
	FMulticastInlineDelegate OnSprintChanged; // 0xe18
	bool bReplicatedSprinting; // 0xe28
	FVector_NetQuantizeNormal ReplicatedAccelDirection; // 0xe2c
	FMulticastInlineDelegate OnPowerSlideChanged; // 0xe38
	FKSPowerSlideInfo bReplicatedPowerSlide; // 0xe48
	float DodgeRollDuration; // 0xe4c
	bool bReplicatedDodgeRoll; // 0xe50
	FMulticastInlineDelegate OnDOdgeRollChanged; // 0xe58
	FMulticastInlineDelegate OnNearMiss; // 0xe98
	float NearMissRange; // 0xeb0
	float NearMissCooldownTime; // 0xeb4
	float NearMissADSCameraShakeScaleOverride; // 0xeb8
	FKSSpecialEffect NearMissSpecialEffect; // 0xec0
	UCameraShake* NearMissFrontCameraShake; // 0xf10
	UCameraShake* NearMissBackCameraShake; // 0xf18
	UCameraShake* NearMissRightCameraShake; // 0xf20
	UCameraShake* NearMissLeftCameraShake; // 0xf28
	FKSLungeInfo LungeInfo; // 0xf30
	FMulticastInlineDelegate OnLungeChanged; // 0xf40
	bool bReplicatedAbilityMovement; // 0xf50
	bool bReplicatedZipLineBracing; // 0xf51
	bool bReplicatedZipLineEnding; // 0xf52
	bool bReplicatedUpline; // 0xf53
	float SecondsAwayToBraceOnZipLine; // 0xf54
	float SecondsAwayToEndOnZipLine; // 0xf58
	FKSZipLineInfo ReplicatedZipLineInfo; // 0xf60
	bool bPrevPressedJump; // 0xf70
	FMulticastInlineDelegate OnJumpedDel; // 0xf78
	FMulticastInlineDelegate OnLandedDel; // 0xf88
	FMulticastInlineDelegate OnStartFallingDel; // 0xf98
	bool bReplicatedStun; // 0xfbe
	bool bReplicatedHardLand; // 0xfe0
	TWeakObjectPtr<UCameraShake> CurrentSprintCameraShake; // 0x1018
	UKSSprintCameraShake* SprintCameraShake; // 0x1028
	TWeakObjectPtr<UCameraShake> CurrentLandedCameraShake; // 0x1030
	UKSCharacterCameraShake* LandedCameraShake; // 0x1040
	FMulticastInlineDelegate OnAimStateChanged; // 0x1048
	USceneComponent* ProjectileThrowComponent; // 0x1058
	USceneComponent* GrenadeThrowComponent; // 0x1060
	USceneComponent* MeleeThrowComponent; // 0x1068
	EKSCharacterAimMode ReplicatedAimState; // 0x1070
	EKSCharacterAimMode LastReplicatedAimState; // 0x1071
	bool bEnableSmoothedAimRotation; // 0x1072
	FReplicatedViewInfo ViewInfo; // 0x1074
	bool bUseCameraLagSubstepping; // 0x107c
	float CameraLagMaxTimeStep; // 0x1080
	float CameraRotationLagSpeed; // 0x1084
	FRotator PreviousDesiredRot; // 0x1088
	FRotator SmoothedViewRotation; // 0x1094
	bool bIsSmoothingAimRotation; // 0x10a0
	FKSDeathInfo DeathInfo; // 0x10a8
	UKSDamageTypeBase* InstantDeathDamageType; // 0x10d0
	bool bRadialMiss; // 0x10d8
	AKSCharacterBase* LastCharacterToDamageMe; // 0x10e0
	FMulticastInlineDelegate OnDeathStateChangedDel; // 0x1100
	USphereComponent* HeadCollisionComponent; // 0x1148
	USkeletalMeshComponent* ZiplineMeshComponent; // 0x1150
	USkeletalMeshComponent* UplineMeshComponent; // 0x1158
	APlayerState* BackupPlayerState; // 0x1160
	TArray<FName> HeadBones; // 0x1170
	TArray<FName> LimbBones; // 0x1180
	TMap<FName, EHitLocationType> CachedBoneToHitLocationType; // 0x1190
	TArray<FName> HeadshotPassthroughBones; // 0x11e0
	FKSRevealInfo FriendlyVisibilityRevealParameters; // 0x11f8
	FKSRevealInfo AimedAtRevealParameters; // 0x1240
	FKSRevealInfo KilledByRevealParameters; // 0x1288
	float KilledByRevealTimeSeconds; // 0x12d0
	bool bRevealed; // 0x12d4
	FLinearColor CurrentRevealColor; // 0x12d8
	float OutlineZFadeMin; // 0x12e8
	float OutlineZFadeMax; // 0x12ec
	FLinearColor SpawnImmuneOutlineColorEnemy; // 0x12f0
	float FriendlyOutlineFadeDistanceMin; // 0x1300
	float FriendlyOutlineFadeDistanceMax; // 0x1304
	bool bReevaluateSilhouetteNextTick; // 0x1308
	bool bForceSilhouette; // 0x1309
	EPlayerSilhouetteType ForcedSilhouetteType; // 0x130a
	bool bForcedFillSilhouette; // 0x130b
	bool bForcedMarkSilhouette; // 0x130c
	EPlayerSilhouetteType SilhouetteType; // 0x130d
	bool bFillSilhouette; // 0x130e
	bool bMarkSilhouette; // 0x130f
	EPlayerSilhouetteQualifier SilhouetteQualifier; // 0x1310
	bool bSilhouetteComponentsDirty; // 0x1328
	TArray<UPrimitiveComponent*> CachedSilhouetteComponents; // 0x1330
	FMulticastInlineDelegate OnRootChanged; // 0x1340
	FKSMantleInfo ReplicatedMantleInfo; // 0x1350
	FMulticastInlineDelegate OnMantleChanged; // 0x1398
	FName InteractionState; // 0x13c0
	float InteractionHeight; // 0x13c8
	float InteractionTime; // 0x13cc
	FMulticastInlineDelegate OnCharacterStartedMovingDel; // 0x13e8
	FMulticastInlineDelegate OnCharacterStoppedMovingDel; // 0x13f8
	FMulticastInlineDelegate OnSwimmingChangedDel; // 0x1420
	FMulticastInlineDelegate OnSubmergedChangedDel; // 0x1430
	FMulticastInlineDelegate OnBreathUpdate; // 0x1440
	bool bIsSubmerged; // 0x1450
	float MaximumLungCapacity; // 0x1454
	float CurrentLungCapacity; // 0x1458
	float LungCapacityRecoveryTime; // 0x145c
	bool bDestroyOnRoundSetup; // 0x1460
	TMap<FName, FKSCharacterSocketInfo> CharacterSockets; // 0x1480
	FMulticastInlineDelegate OnEmoteStartedPlaying; // 0x14d0
	FMulticastInlineDelegate OnEmoteStoppedPlaying; // 0x14e0
	bool bIsSpawnImmune; // 0x14f0
};

struct UAtmosphericFogComponent : USceneComponent {
	float SunMultiplier; // 0x208
	float FogMultiplier; // 0x20c
	float DensityMultiplier; // 0x210
	float DensityOffset; // 0x214
	float DistanceScale; // 0x218
	float AltitudeScale; // 0x21c
	float DistanceOffset; // 0x220
	float GroundOffset; // 0x224
	float StartDistance; // 0x228
	float SunDiscScale; // 0x22c
	float DefaultBrightness; // 0x230
	FColor DefaultLightColor; // 0x234
	char bDisableSunDisk : 1; // 0x238
	char bAtmosphereAffectsSunIlluminance : 1; // 0x238
	char bDisableGroundScattering : 1; // 0x238
	FAtmospherePrecomputeParameters PrecomputeParams; // 0x23c
	UTexture2D* TransmittanceTexture; // 0x268
	UTexture2D* IrradianceTexture; // 0x270
};

struct AKSLobbyLevelSequenceActor : ALevelSequenceActor {
	FName SequenceTag; // 0x2b0
};

struct UKSAimAssistDebugWidget : UUserWidget {
	bool bDrawAimAssistBoundary; // 0x238
	bool bDrawHeadAimCorrectionBoundary; // 0x239
	bool bDrawTargetInfo; // 0x23a
};

struct UUniformGridPanel : UPanelWidget {
	FMargin SlotPadding; // 0x128
	float MinDesiredSlotWidth; // 0x138
	float MinDesiredSlotHeight; // 0x13c
};

struct UKSActorFilterComponent : UActorComponent {
	FMulticastInlineDelegate OnFilterActorAddedDel; // 0xb0
	FMulticastInlineDelegate OnFilterActorRemovedDel; // 0xc0
	FKSActorFilterConfig ActorFilterConfig; // 0xd0
	FKSActorFilter Filter; // 0x100
	TArray<TWeakObjectPtr<AActor>> RepFilteredActors; // 0x120
	TArray<TWeakObjectPtr<AActor>> CachedFilteredActors; // 0x130
};

struct UKSDebugMenu : UKSWidget {
	TArray<FDebugMenuCommandInfo> DebugCommands; // 0x520
};

struct UKSStoreSection : UObject {
	TArray<UKSStoreSectionItem*> SectionItems; // 0x28
	EStoreSectionTypes SectionType; // 0x38
};

struct UBTDecorator_IsAtLocation : UBTDecorator_BlackboardBase {
	float AcceptableRadius; // 0x90
	FAIDataProviderFloatValue ParametrizedAcceptableRadius; // 0x98
	FAIDistanceType GeometricDistanceType; // 0xd0
	char bUseParametrizedRadius : 1; // 0xd4
	char bUseNavAgentGoalLocation : 1; // 0xd4
	char bPathFindingBasedTest : 1; // 0xd4
};

struct UEnvQuery : UDataAsset {
	FName QueryName; // 0x30
	TArray<UEnvQueryOption*> Options; // 0x38
};

struct UKSSkinBundle : UKSItemBundle {
	TSoftClassPtr<UObject> RogueSelectCharacterClass; // 0x260
	TArray<TSoftObjectPtr<UKSWeaponAttachment>> SkinSpecificWeaponAttachments; // 0x288
	bool StarterSkin; // 0x298
	TSoftObjectPtr<UTexture2D> SkinFlatImage; // 0x2a0
	TSoftObjectPtr<UKSJobItem> Job; // 0x2c8
	bool bOverrideJobLobbyProps; // 0x2f0
	TArray<FSoftObjectPath> LobbyPropsToPreload; // 0x2f8
};

struct UPlanePositionGizmo : UInteractiveGizmo {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x48
	TScriptInterface<IGizmoVec2ParameterSource> ParameterSource; // 0x58
	TScriptInterface<IGizmoClickTarget> HitTarget; // 0x68
	TScriptInterface<IGizmoStateTarget> StateTarget; // 0x78
	bool bEnableSignedAxis; // 0x88
	bool bFlipX; // 0x89
	bool bFlipY; // 0x8a
	bool bInInteraction; // 0x8b
	FVector InteractionOrigin; // 0x8c
	FVector InteractionNormal; // 0x98
	FVector InteractionAxisX; // 0xa4
	FVector InteractionAxisY; // 0xb0
	FVector InteractionStartPoint; // 0xbc
	FVector InteractionCurPoint; // 0xc8
	FVector2D InteractionStartParameter; // 0xd4
	FVector2D InteractionCurParameter; // 0xdc
	FVector2D ParameterSigns; // 0xe4
};

struct UKSBTTask_SelectDropLocation : UBTTaskNode {
	bool InitializeDropLocation; // 0x70
	bool UseObjectiveProximity; // 0x71
	int32_t MaxBotsAtDropLocation; // 0x74
	bool InitializeWayPointSet; // 0x78
	FBlackboardKeySelector DropLocationKey; // 0x80
	FBlackboardKeySelector DropLocationVectorKey; // 0xa8
	FBlackboardKeySelector FlightLocationVectorKey; // 0xd0
};

struct UScoreboardTeamSection_Lobby_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	USizeBox* HeightLimit; // 0x528
	UVerticalBox* PlayerEntries; // 0x530
	UScoreboardPlayerStats_Lobby_C* ScoreboardPlayerStats_Lobby; // 0x538
	UTextBlock* teamScore; // 0x540
	USizeBox* TeamScoreContainer; // 0x548
	UImage* TeamScoreGradient; // 0x550
	UBorder* TeamScoreWrapper; // 0x558
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x560
	UTextBlock* WinText; // 0x568
	FTeamStats TeamStruct; // 0x570
	TArray<FPlayerEntryStats> playerStats; // 0x590
	UPUMG_PlayerDataFactory* PlayerDataFactory; // 0x5a0
	TArray<UScoreboardPlayerStats_Lobby_C*> Players; // 0x5a8
	TArray<FPlayerEntryStats> TeamPlayerStats; // 0x5b8
	FMulticastInlineDelegate OnPlayersChanged; // 0x5c8
};

struct ULandscapeInfo : UObject {
	LazyObjectProperty LandscapeActor; // 0x28
	FGuid LandscapeGuid; // 0x44
	int32_t ComponentSizeQuads; // 0x54
	int32_t SubsectionSizeQuads; // 0x58
	int32_t ComponentNumSubsections; // 0x5c
	FVector DrawScale; // 0x60
	TArray<ALandscapeStreamingProxy*> Proxies; // 0x110
};

struct UKSBTTask_PerformRandomDodgeRoll : UBTTask_PawnActionBase {
	TArray<float> PreferredAngles; // 0x70
	TArray<float> SecondaryAngles; // 0x80
	float MinDodgeRollMovementPercent; // 0x90
	float DodgeRollCheckDistance; // 0x94
	float MaximumHeightChangePerCheckDistance; // 0x98
};

struct UKSProfileRogueStatsWidget : UKSWidget {
	TArray<UKSStatWrapper*> DisplayedPlayerStats; // 0x520
	TArray<UKSStatWrapper*> DisplayedRogueStats; // 0x530
};

struct UActorChannel : UChannel {
	AActor* Actor; // 0x70
	TArray<UObject*> CreateSubObjects; // 0x168
};

struct UAISense_Damage : UAISense {
	TArray<FAIDamageEvent> RegisteredEvents; // 0x80
};

struct UMaterialExpressionComponentMask : UMaterialExpression {
	FExpressionInput Input; // 0x40
	char R : 1; // 0x54
	char G : 1; // 0x54
	char B : 1; // 0x54
	char A : 1; // 0x54
};

struct URetainerBox : UContentWidget {
	bool RenderOnInvalidation; // 0x128
	bool RenderOnPhase; // 0x129
	int32_t Phase; // 0x12c
	int32_t PhaseCount; // 0x130
	bool bEnableRetainedRendering; // 0x134
	UMaterialInterface* EffectMaterial; // 0x138
	FName TextureParameter; // 0x140
};

struct UDecalPoolComponent : UBasePoolComponent {
	UPoolableDecalComponent* PooledDecalComponentClass; // 0xd8
	TArray<UPoolableDecalComponent*> UnusedComponentsArray; // 0xe0
	TSet<UPoolableDecalComponent*> UsedComponentsSet; // 0xf0
	UPoolableDecalComponent* PeekedDecalComponent; // 0x140
};

struct UApparelCollection : UItemCollection {
	FText ApparelCollectionName; // 0x98
	FText ApparelCollectionDescription; // 0xb0
};

struct UParticleModuleEventReceiverBase : UParticleModuleEventBase {
	EParticleEventType EventGeneratorType; // 0x30
	FName EventName; // 0x34
};

struct USourceEffectBitCrusherPreset : USoundEffectSourcePreset {
	FSourceEffectBitCrusherSettings Settings; // 0x70
};

struct UKSSkeletalMeshComponent : USkinnableMergedMeshComponent {
	bool bForceTextureResidentFlagOnAllTextures; // 0xd50
	float TeleportDistanceDeltaThreshold; // 0xd68
	bool bEnableDedicatedServerRequiredBones; // 0xd88
	TArray<FName> RequiredDedicatedServerBoneNames; // 0xd90
};

struct UKSEmote : UKSRadialMenuItem {
	bool bFlushKeysOnPlay; // 0x2b8
	TSoftClassPtr<UObject> EmoteCosmeticComponentClass; // 0x2c0
	EEmoteCameraPositionType EmoteCameraPosition; // 0x2e8
	FVector EmotePreviewLocationOffset; // 0x2ec
	float EmotePreviewScaleOverride; // 0x2f8
	bool bMovingEmote; // 0x2fc
	TArray<FName> ApparelObjectsToInfluence; // 0x300
	TArray<FSoftObjectPath> WeaponPropsToPreload; // 0x310
};

struct UKSWidget : UPUMG_Widget {
	bool bIsUIOnlyWidget; // 0x4c0
	bool bIsExclusiveMenuWidget; // 0x4c1
	int32_t AmbientSoundRtpc; // 0x4c4
	UTickAnimationManager* TickAnimations; // 0x4c8
	FDelegate ViewportEvent; // 0x4d0
	bool bSubstituteKillCamWorld; // 0x4e0
	bool bSubstituteKillCamOwningPlayer; // 0x4e1
	bool bWantsKillCamCallbacks; // 0x4e2
	float OpacityWhenAiming; // 0x500
	bool DoesFadeOutWhenAiming; // 0x504
	float AimTransitionProgress; // 0x508
};

struct UGizmoComponentAxisSource : UObject {
	USceneComponent* Component; // 0x30
	int32_t AxisIndex; // 0x38
	bool bLocalAxes; // 0x3c
};

struct UAnimCompress_RemoveEverySecondKey : UAnimCompress {
	int32_t MinKeys; // 0x40
	char bStartAtSecondKey : 1; // 0x44
};

struct UAkAssetDataSwitchContainerData : UObject {
	TSoftObjectPtr<UAkGroupValue> GroupValue; // 0x28
	TArray<TSoftObjectPtr<UAkMediaAsset>> MediaList; // 0x50
	TArray<UAkAssetDataSwitchContainerData*> Children; // 0x60
};

struct UNavigationInvokerComponent : UActorComponent {
	float TileGenerationRadius; // 0xb0
	float TileRemovalRadius; // 0xb4
};

struct UMaterialExpressionSquareRoot : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UChaosDestructionListener : USceneComponent {
	char bIsCollisionEventListeningEnabled : 1; // 0x208
	char bIsBreakingEventListeningEnabled : 1; // 0x208
	char bIsTrailingEventListeningEnabled : 1; // 0x208
	FChaosCollisionEventRequestSettings CollisionEventRequestSettings; // 0x20c
	FChaosBreakingEventRequestSettings BreakingEventRequestSettings; // 0x224
	FChaosTrailingEventRequestSettings TrailingEventRequestSettings; // 0x23c
	TSet<AChaosSolverActor*> ChaosSolverActors; // 0x258
	TSet<AGeometryCollectionActor*> GeometryCollectionActors; // 0x2a8
	FMulticastInlineDelegate OnCollisionEvents; // 0x2f8
	FMulticastInlineDelegate OnBreakingEvents; // 0x308
	FMulticastInlineDelegate OnTrailingEvents; // 0x318
};

struct UKSPingManager : UActorComponent {
	FMulticastInlineDelegate OnPingFailureDel; // 0xb0
	FMulticastInlineDelegate OnPingAdded; // 0xc0
	FMulticastInlineDelegate OnPingRemoved; // 0xd0
	FMulticastInlineDelegate OnPingChanged; // 0xe0
	FMulticastInlineDelegate OnSentVoiceLineOnly; // 0xf0
	FMulticastInlineDelegate OnSelfPingAdded; // 0x100
	FMulticastInlineDelegate OnSelfPingRemoved; // 0x110
	FMulticastInlineDelegate OnSelfPingChanged; // 0x120
	FMulticastInlineDelegate OnHoveredActorChanged; // 0x130
	FPingInfoChangeList ReplicatedPings; // 0x140
	TArray<FPingInfo> LocallyPredictedPings; // 0x260
	TMap<EPingType, float> PingLifetimes; // 0x270
	TMap<EPingType, AKSPingBeaconBase*> PingBeaconTypes; // 0x2c0
	TMap<EPingType, int32_t> MaxPingsForType; // 0x310
	TMap<EPingType, FVector_NetQuantize> PingIconOffsets; // 0x360
	EPingMessage ObjectPingMessage; // 0x3b0
	UDataTable* ContextualPingTypesDT; // 0x3b8
	UDataTable* ContextualPingMessagesDT; // 0x3c0
	bool bDisplaySelfPingsOnNameplate; // 0x3c8
	bool bWorldSelfPingsFollowPlayer; // 0x3c9
	float MaxPingDistance; // 0x418
	TArray<AKSPingBeaconBase*> ActiveBeacons; // 0x420
	bool bAllowPingRemoval; // 0x430
	TMap<EPingType, UAkAudioEvent*> PingAudioCues; // 0x438
	AKSGameState_RoundGame* CachedRoundState; // 0x490
	AKSPlayerController* CachedOwner; // 0x498
	AKSTeamState* CachedTeam; // 0x4a0
	TWeakObjectPtr<AActor> CachedHoveredActor; // 0x4d0
	TSoftClassPtr<UObject> MinimapDisplayWidget; // 0x4e0
	TSoftClassPtr<UObject> FullmapDisplayWidget; // 0x508
	TSoftClassPtr<UObject> OverlayDisplayWidget; // 0x530
};

struct UWBP_AcquistionItem_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_KSCosmeticItemDisplay_C* CosmeticItem; // 0x528
	UAcquisitionItemData* AcquisitionItem; // 0x530
	FMulticastInlineDelegate OnSlotSelected; // 0x538
	FMulticastInlineDelegate OnSlotHover; // 0x548
};

struct UWBP_ItemInfoPanel_C : UKSWidget {
	UTextBlock* ItemDescription; // 0x520
	UKSAsyncImage* PreviewImage; // 0x528
	UBorder* PreviewImageBox; // 0x530
	USizeBox* PreviewSizeBox; // 0x538
	UWBP_ItemInfoContainer_C* WBP_ItemInfoContainer; // 0x540
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x548
};

struct UParticleModuleBeamNoise : UParticleModuleBeamBase {
	char bLowFreq_Enabled : 1; // 0x30
	int32_t Frequency; // 0x34
	int32_t Frequency_LowRange; // 0x38
	FRawDistributionVector NoiseRange; // 0x40
	FRawDistributionFloat NoiseRangeScale; // 0x88
	char bNRScaleEmitterTime : 1; // 0xb8
	FRawDistributionVector NoiseSpeed; // 0xc0
	char bSmooth : 1; // 0x108
	float NoiseLockRadius; // 0x10c
	char bNoiseLock : 1; // 0x110
	char bOscillate : 1; // 0x110
	float NoiseLockTime; // 0x114
	float NoiseTension; // 0x118
	char bUseNoiseTangents : 1; // 0x11c
	FRawDistributionFloat NoiseTangentStrength; // 0x120
	int32_t NoiseTessellation; // 0x150
	char bTargetNoise : 1; // 0x154
	float FrequencyDistance; // 0x158
	char bApplyNoiseScale : 1; // 0x15c
	FRawDistributionFloat NoiseScale; // 0x160
};

struct UKSDataSocialCategory : UObject {
	FMulticastInlineDelegate OnPlayersUpdated; // 0x28
	FMulticastInlineDelegate OnHeaderUpdated; // 0x38
	FMulticastInlineDelegate OnMessageUpdated; // 0x48
	TArray<UKSDataSocialPlayer*> SortedPlayerList; // 0xd0
};

struct UPGame_EffectManagerComponent : UActorComponent {
	FPGame_PersistentEffectRepDataContainer r_ReplicatedEffectData; // 0xd8
	FPGame_EffectManagerPropertyContainer r_ReplicatedProperties; // 0x1f8
};

struct ULevelSequenceBurnIn : UUserWidget {
	FLevelSequencePlayerSnapshot FrameInformation; // 0x238
	ALevelSequenceActor* LevelSequenceActor; // 0x2f0
};

struct UWBP_RewardListEntry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* onCurrentLoop; // 0x528
	UWidgetAnimation* SelectedPulse; // 0x530
	UWidgetAnimation* onSelected; // 0x538
	UImage* AchievedGradient; // 0x540
	UImage* AchievedGradient_2; // 0x548
	UWidgetSwitcher* AchievedOverlay; // 0x550
	UBorder* AchievedStroke; // 0x558
	UBorder* AchievedStroke_2; // 0x560
	UBorder* AchievedStrokeGlow; // 0x568
	UWidgetSwitcher* AchievedUnderlay; // 0x570
	UImage* CompletedFree; // 0x578
	UImage* CompletedPremium; // 0x580
	UWidgetSwitcher* CompletedSwitcher; // 0x588
	UImage* CurrentLevelIndicator; // 0x590
	USizeBox* CurrentLevelUnderlay; // 0x598
	UWBP_AdditiveImage_C* GlowFreeAdditive; // 0x5a0
	UWBP_AdditiveImage_C* GlowPremAdditive; // 0x5a8
	UVerticalBox* GradientBand; // 0x5b0
	UButton* HitTest; // 0x5b8
	UImage* Locked; // 0x5c0
	UImage* LockedPremium; // 0x5c8
	UImage* LockedTierShade; // 0x5d0
	UWBP_KSCosmeticItemDisplay_C* RewardIcon; // 0x5d8
	UWidgetSwitcher* RewardStatusSwitcher; // 0x5e0
	UImage* SelectedGradientBack; // 0x5e8
	UImage* SelectionFrame; // 0x5f0
	UImage* SideGlow; // 0x5f8
	UImage* SideGlow_2; // 0x600
	FMulticastInlineDelegate OnBtnClicked; // 0x608
	FMulticastInlineDelegate OnBtnHovered; // 0x618
	FMulticastInlineDelegate OnBtnUnhovered; // 0x628
	UAkAudioEvent* ClickRewardListEntry; // 0x638
	UAkAudioEvent* HoverRewardListEntry; // 0x640
	FActivityTier ActivityTier; // 0x648
};

struct UMovieSceneAudioTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> AudioSections; // 0x58
};

struct UKSModInst_DamageOverTime : UKSModInst_OverTimeEffect {
	float DamagePerTick; // 0x1d0
	UDamageType* DamageType; // 0x1d8
	UKSWeaponAsset* RadialDamageWeapon; // 0x1e0
};

struct UKSActivityRewardCondition_ItemPurchased : UKSActivityRewardCondition {
	TArray<TSoftObjectPtr<UKSItem>> MatchingItems; // 0x30
};

struct UWBP_StoreCalloutBanner_C : UUserWidget {
	UImage* background; // 0x238
	UImage* Background_Dimmer; // 0x240
	UImage* EndDecro; // 0x248
	UImage* GradientImage; // 0x250
	UTextBlock* Text; // 0x258
};

struct UProceduralFoliageSpawner : UObject {
	int32_t RandomSeed; // 0x28
	float TileSize; // 0x2c
	int32_t NumUniqueTiles; // 0x30
	float MinimumQuadTreeSize; // 0x34
	TArray<FFoliageTypeObject> FoliageTypes; // 0x40
};

struct UKSEventTracker : UObject {
	FMulticastInlineDelegate OnTriggered; // 0x30
	bool bDoesTick; // 0x40
	TWeakObjectPtr<AKSPlayerController> PlayerController; // 0x44
	TWeakObjectPtr<UKSActivityInstance> WeakActivityInstance; // 0x4c
	TMap<ERewardSource, float> ProgressEarnedBySource; // 0x58
	TMap<FString, float> ProgressEarnedByEvent; // 0xa8
	TMap<FString, float> ProgressEarnedByBooster; // 0xf8
	TMap<FString, float> ExtraData; // 0x148
	UKSEventTrackerPlayerData* PlayerData; // 0x198
};

struct UKSWeaponAttachmentInst_VarScope : UKSWeaponAttachmentInstance {
	UKSWeaponAttachment_VarScope* VariableScopeAsset; // 0x130
	char ScopeZoomIndex; // 0x138
};

struct UWindowTitleBarAreaSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UMaterialExpressionBlurredNormalCustomOutput : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct UPUMG_Loadout : UObject {
	FMulticastInlineDelegate OnRenamed; // 0x28
	FMulticastInlineDelegate OnNumberChanged; // 0x38
	FMulticastInlineDelegate OnTypeChanged; // 0x48
	FMulticastInlineDelegate OnServerUpdate; // 0x58
	FMulticastInlineDelegate OnLocalUpdate; // 0x68
};

struct UANotify_PlayParticleEffectMirroring_C : UAnimNotify {
	UParticleSystem* Particle System; // 0x38
	FVector Location Offset; // 0x40
	FRotator Rotation Offset; // 0x4c
	FVector Scale; // 0x58
	FName Socket Attach; // 0x64
	FName Socket Attach Mirrored; // 0x6c
};

struct USubmixEffectTapDelayPreset : USoundEffectSubmixPreset {
	FSubmixEffectTapDelaySettings Settings; // 0x80
};

struct UKSActivityRewardCondition_CashEarnedReason : UKSActivityRewardCondition {
	TArray<FText> MatchingReasons; // 0x30
};

struct UVirtualTexturePoolConfig : UObject {
	int32_t DefaultSizeInMegabyte; // 0x28
	TArray<FVirtualTextureSpacePoolConfig> Pools; // 0x30
};

struct AAkReverbVolume : AVolume {
	char bEnabled : 1; // 0x258
	UAkAuxBus* AuxBus; // 0x260
	FString AuxBusName; // 0x268
	float SendLevel; // 0x278
	float FadeRate; // 0x27c
	float Priority; // 0x280
	UAkLateReverbComponent* LateReverbComponent; // 0x288
};

struct UNiagaraDataInterfaceCurlNoise : UNiagaraDataInterface {
	uint32_t Seed; // 0x30
};

struct UMovieScene2DTransformSection : UMovieSceneSection {
	FMovieScene2DTransformMask TransformMask; // 0xe0
	FMovieSceneFloatChannel Translation[0x2]; // 0xe8
	FMovieSceneFloatChannel Rotation; // 0x228
	FMovieSceneFloatChannel Scale[0x2]; // 0x2c8
	FMovieSceneFloatChannel Shear[0x2]; // 0x408
};

struct UKSBTTask_SelectIngressPoint : UBTTaskNode {
	FBlackboardKeySelector IngressPointActorKey; // 0x70
	bool bShouldLeave; // 0x98
};

struct UDatasmithVREDSceneImportData : UDatasmithFBXSceneImportData {
	bool bMergeNodes; // 0x48
	bool bOptimizeDuplicatedNodes; // 0x49
	bool bImportMats; // 0x4a
	FString MatsPath; // 0x50
	bool bImportVar; // 0x60
	bool bCleanVar; // 0x61
	FString VarPath; // 0x68
	bool bImportLightInfo; // 0x78
	FString LightInfoPath; // 0x80
	bool bImportClipInfo; // 0x90
	FString ClipInfoPath; // 0x98
};

struct UCableComponent : UMeshComponent {
	bool bUpdateOnlyIfRendered; // 0x458
	bool bAttachStart; // 0x459
	bool bAttachEnd; // 0x45a
	FComponentReference AttachEndTo; // 0x460
	FName AttachEndToSocketName; // 0x488
	FVector EndLocation; // 0x490
	float CableLength; // 0x49c
	int32_t NumSegments; // 0x4a0
	float SubstepTime; // 0x4a4
	int32_t SolverIterations; // 0x4a8
	bool bEnableStiffness; // 0x4ac
	bool bEnableCollision; // 0x4ad
	float CollisionFriction; // 0x4b0
	FVector CableForce; // 0x4b4
	float CableGravityScale; // 0x4c0
	float CableWidth; // 0x4c4
	int32_t NumSides; // 0x4c8
	float TileMaterial; // 0x4cc
};

struct AKSAgent_Aimed : AKSAgentBase {
	FMulticastInlineDelegate OnAgentStartFire; // 0x320
	bool bDisplayAimTargeter; // 0x330
	TSoftClassPtr<UObject> AimTargeterWidget; // 0x338
	FAimData CachedAim; // 0x360
	UKSWeaponAsset* WeaponAsset; // 0x3b0
	UKSWeaponAsset_WithProjectile* CachedProjectileAsset; // 0x3b8
	FTimerHandle StateTransitionHandle; // 0x3c0
	float ExpectedTransitionEndTime; // 0x3c8
	int32_t CurrentAmmo; // 0x3cc
	int32_t CurrentBurstCount; // 0x3d0
	EWeaponStateNew FiringState; // 0x3d4
	FAgentStateChangeList ReplicatedStateChanges; // 0x3d8
	int32_t NextShotId; // 0x460
	FVector TargeterLocation; // 0x464
	float ProjectileSimFrequency; // 0x470
	float MaxSimTime; // 0x474
	FName CollisionProfileName; // 0x478
};

struct UWBP_ItemInfoContainer_Description_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* Show; // 0x240
	UVerticalBox* DescriptionWrapper; // 0x248
	UTextBlock* ItemDesc; // 0x250
	UVerticalBox* ItemInfoContainer; // 0x258
	UTextBlock* ItemNameField; // 0x260
	UImage* ItemRaritySwatch; // 0x268
	UImage* LeftBGDimmer; // 0x270
	UImage* LeftBGImage; // 0x278
	UOverlay* NameWrapper; // 0x280
	URichTextBlock* RarityRichText; // 0x288
	UImage* RightBGDimmer; // 0x290
	UImage* RightBGImage; // 0x298
	UHorizontalBox* TypeWrapper; // 0x2a0
	UWBP_CosmeticItemTags_C* WBP_CosmeticItemTags; // 0x2a8
	ETextJustify Justification; // 0x2b0
	bool bHideDesc; // 0x2b1
};

struct UBlackboardComponent : UActorComponent {
	UBrainComponent* BrainComp; // 0xb0
	UBlackboardData* DefaultBlackboardAsset; // 0xb8
	UBlackboardData* BlackboardAsset; // 0xc0
	TArray<UBlackboardKeyType*> KeyInstances; // 0xe8
};

struct UBlendProfile : UObject {
	USkeleton* OwningSkeleton; // 0x30
	TArray<FBlendProfileBoneEntry> ProfileEntries; // 0x38
};

struct UDatasmithLightComponentTemplate : UDatasmithObjectTemplate {
	char bVisible : 1; // 0x30
	char CastShadows : 1; // 0x34
	char bUseTemperature : 1; // 0x34
	char bUseIESBrightness : 1; // 0x34
	float Intensity; // 0x38
	float Temperature; // 0x3c
	float IESBrightnessScale; // 0x40
	FLinearColor LightColor; // 0x44
	UMaterialInterface* LightFunctionMaterial; // 0x58
	UTextureLightProfile* IESTexture; // 0x60
};

struct UKSSettingsPreview : UKSWidget {
	FMulticastInlineDelegate OnPreviewValueChanged; // 0x520
	UKSSettingsInfoBase* SettingsInfo; // 0x530
};

struct UWBP_PlatformIcon_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Icon; // 0x528
	EKSPlatformType Platform; // 0x530
};

struct ULandscapeHeightfieldCollisionComponent : UPrimitiveComponent {
	TArray<ULandscapeLayerInfoObject*> ComponentLayerInfos; // 0x430
	int32_t SectionBaseX; // 0x440
	int32_t SectionBaseY; // 0x444
	int32_t CollisionSizeQuads; // 0x448
	float CollisionScale; // 0x44c
	int32_t SimpleCollisionSizeQuads; // 0x450
	TArray<char> CollisionQuadFlags; // 0x458
	FGuid HeightfieldGuid; // 0x468
	FBox CachedLocalBox; // 0x478
	LazyObjectProperty RenderComponent; // 0x494
	TArray<UPhysicalMaterial*> CookedPhysicalMaterials; // 0x4c0
};

struct UKSItem_Gender : UKSItem {
	FKSCharacterGender Gender; // 0x250
};

struct UWBP_ListButton_Cosmetic_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ArrowLoop; // 0x528
	UWidgetAnimation* OnSelect; // 0x530
	UWidgetAnimation* OnHover; // 0x538
	UImage* Arrow; // 0x540
	UWBP_KSCosmeticItemDisplay_C* CosmeticIcon; // 0x548
	UButton* HitTarget; // 0x550
	UOverlay* HoveredState; // 0x558
	UTextBlock* ItemName; // 0x560
	URichTextBlock* RarityRichText; // 0x568
	UOverlay* SelectedState; // 0x570
	UWBP_RogueMasteryIcon_C* WBP_MercMasteryIcon; // 0x578
	bool IsSelected; // 0x580
	FMulticastInlineDelegate OnRewardSelected; // 0x588
	FMasteryRewardData RewardItem; // 0x598
	UAkAudioEvent* ClickStandardBtnInnerSFX; // 0x5a8
	UAkAudioEvent* HoverStandardBtnInnerSFX; // 0x5b0
	FWeaponMasteryRewardDisplayData CurrentRewardDisplayData; // 0x5b8
};

struct UWBP_PlayerStatus_ContextMenuOption_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	USizeBox* GamepadIconWRapper; // 0x530
	UTextBlock* OptionText; // 0x538
	UImage* SelectGamepadIcon; // 0x540
	UWBP_ButtonStacked_C* WBP_ButtonStacked; // 0x548
	EPlayerStatusOption Assigned Context Option; // 0x550
	FMulticastInlineDelegate OnContextOptionSelected; // 0x558
	bool IsActiveInMenu; // 0x568
	PGAME_INPUT_STATE Current Input State; // 0x569
	bool Is Hovered; // 0x56a
};

struct UWBP_ThrobberShield_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* Cycle; // 0x240
	UImage* Section1; // 0x248
	UImage* Section2; // 0x250
	UImage* Section3; // 0x258
	UImage* Section4; // 0x260
	UImage* Section5; // 0x268
	UImage* Section6; // 0x270
};

struct UKSSpawnRule_Vacant : UKSSpawnRule {
	float OccupiedByPawnScore; // 0x40
	float RequiresAdjustmentScore; // 0x44
};

struct UWBP_SettingsSection_C : UKSSettingsSection {
	FPointerToUberGraphFrame UberGraphFrame; // 0x540
	UImage* Image_176; // 0x548
	UVerticalBox* SectionSettings; // 0x550
	UTextBlock* SettingSectionDisplayName; // 0x558
};

struct UKSAnimNotify_EmotionDuration : UAnimNotify {
	EKSEmotion Emotion; // 0x38
	float Duration; // 0x3c
};

struct UKSJobRole : UDataAsset {
	FText JobRoleDisplayName; // 0x30
	FName JobRoleName; // 0x48
	FText JobRoleDescription; // 0x50
	int32_t JobRoleSortOrder; // 0x68
	bool ShouldHideRole; // 0x6c
	UTexture2D* JobRoleIcon; // 0x70
};

struct UNamePromptTempClone_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* MobileLayout; // 0x528
	UImage* bkg; // 0x530
	UPopupButton_C* CreateAccountBtn; // 0x538
	UHorizontalBox* ErrorWrapper; // 0x540
	UImage* Gradient; // 0x548
	UOutlineContainer_C* PCUsername; // 0x550
	UEditableTextBox* UsernameField; // 0x558
	UImage* WarningIcon_2; // 0x560
	UTextBlock* WarningText; // 0x568
	UPUMG_LoginDataFactory* LoginDataFac; // 0x570
};

struct UMaster_WeaponComponent_C : UKSWeaponComponent {
	bool Is ADS; // 0x638
	FName Owner Fire Section; // 0x63c
	TArray<FName> Owner 1p ADS Fire Section; // 0x648
	FName Deattach Slot Name; // 0x658
	FName Attach Slot Name; // 0x660
	FName MIrror Attach Slot Name; // 0x668
	int32_t Weapon Fire Sound ID; // 0x670
	bool Weapon Fire Sound Interrupts; // 0x674
	UAkAudioEvent* Weapon Casing Sound; // 0x678
	UAkAudioEvent* Equip Sound; // 0x680
	float Speed of Sound; // 0x688
	float Echo Max Distance; // 0x68c
	TArray<FRotator> Echo Directions; // 0x690
	FVector Echo Sound Location; // 0x6a0
	UParticleSystem* Muzzle Flash 3p; // 0x6b0
	UParticleSystem* Muzzle Flash 1p; // 0x6b8
	FName MuzzleSocketName; // 0x6c0
	FName Cartridge Ejection Attach Name; // 0x6c8
	FHitDecalInfo Default Decal Info; // 0x6d0
	TMap<EPhysicalSurface, FHitDecalInfo> Physical Decal Materials; // 0x6f8
	UParticleSystem* Tracer Template; // 0x748
	float Next Tracer Time; // 0x750
	float Minimum Tracer Delay; // 0x754
	float Maximum Tracer Delay; // 0x758
	int32_t Shot Count; // 0x75c
	UStaticMesh* Tracer Mesh; // 0x760
	int32_t Tracer Frequency; // 0x768
	EPhysicalSurface Decal Physical Surface; // 0x76c
	FVector Decal Location; // 0x770
	UMaterialInterface* Temp Mesh Material Override; // 0x780
	int32_t CountedShotsLeft; // 0x788
	UObject* 1P ADS Camera Shake; // 0x790
	TArray<FName> Owner 3p Fire Section; // 0x798
	int32_t Counter; // 0x7a8
	UObject* AOS Camera Shake; // 0x7b0
	UObject* 3P Camera Shake; // 0x7b8
	int32_t CountedMagSize; // 0x7c0
	bool bIsSecondaryWeapon; // 0x7c4
	bool Is Pistol; // 0x7c5
	bool Is Dual Guns; // 0x7c6
	bool ShouldSpawnTracers; // 0x7c7
	bool ShouldHaveBulletFX; // 0x7c8
	bool ShouldHaveBulletSpangs; // 0x7c9
	bool bWasFiredByOwner; // 0x7ca
	FName MagazineDropBone; // 0x7cc
	bool Mirror Reload Enabled; // 0x7d4
	FName Mirror_MagazineDropBone; // 0x7d8
	bool DropBoneOnWeapon; // 0x7e0
	bool TrackingMagDropBone; // 0x7e1
	FTransform DropMagSpawnTransformOveride; // 0x7f0
	FVector DropBonePreviousPosition; // 0x820
	FVector DropBoneVelocity; // 0x82c
	FVector DropVelocityOverride; // 0x838
	bool Is Gun Holstered; // 0x844
	bool DropMultipleMags; // 0x845
	bool Drop Multiple Mags Velocity Inheritance Override; // 0x846
	TArray<FMultiMagDropInfo> MultiMagArray; // 0x848
	bool Maintain Holster; // 0x858
	bool Is Shotgun; // 0x859
	FRotator Target Shell Housing Spin; // 0x85c
	int32_t Missing Shell Count; // 0x868
	float Interp Speed; // 0x86c
	float VsWorldAlphaDiff; // 0x870
	float LastUpdatedAlpha; // 0x874
	bool Prevent Vs World Active; // 0x878
	bool Is Vs World Force Reset Delay; // 0x879
	float Vs World Reset Delay Time; // 0x87c
	bool Able to Magdrop?; // 0x880
	bool Force Holster Mantle; // 0x881
	bool Force Holster Zipline; // 0x882
	bool Scope Mesh Scale; // 0x883
	float Scope Scale Alpha; // 0x884
	TArray<UMaterialInterface*> Hide Materials Array; // 0x888
	bool Is Vcol Hide Needed; // 0x898
	FMulticastInlineDelegate OnSetScopeScaleAlpha; // 0x8a0
	FMulticastInlineDelegate OnSetRevolverChamberRotate; // 0x8b0
	float CosmeticShotTraceDist; // 0x8c0
	TArray<UParticleSystemComponent*> CartridgeEjectParticles; // 0x8c8
	TArray<UParticleSystemComponent*> 1PMuzzleFlashParticles; // 0x8d8
	TArray<UParticleSystemComponent*> 3pMuzzleFlashParticles; // 0x8e8
	bool bShouldPlayADSFire; // 0x8f8
	float ADSFirePlayPosition; // 0x8fc
	float AOSFirePlayPosition; // 0x900
	float ADSFireDelay; // 0x904
	FMulticastInlineDelegate OnSetLobbyState; // 0x908
	bool DropMagazineLockout; // 0x918
	UObject* 3P Camera Shake Hi; // 0x920
	UObject* FireCameraModifier; // 0x928
	TArray<FFullFireRepData> QueuedAimData; // 0x930
	TArray<FHitResult> ValidHits_Event; // 0x940
	bool Should Play Impact Sound; // 0x950
	bool Should Hide On Holster; // 0x951
	EFireAudioMode FireAudioMode; // 0x952
	bool AllowNewShotAudio; // 0x953
	float Post Reload Delay Period; // 0x954
	bool Folded Stock; // 0x958
	FRotator Stock Rotation; // 0x95c
	FRotator Stock alt Rotation; // 0x968
	bool Multi Stage Reload Lockout; // 0x974
	FVector ViewPawnForwardDir; // 0x978
	FVector ViewPawnLeftDir; // 0x984
	float LastBulletMissTime; // 0x990
	float LoopingFireAudioCheckTriggerDelay; // 0x994
	int32_t LoopingFireAudioFadeOutDuration; // 0x998
	bool IsFirstShot; // 0x99c
	bool IsPlayerControlled; // 0x99d
	TArray<UParticleSystemComponent*> 1PAuxMuzzleFlashParticles; // 0x9a0
	TArray<UParticleSystemComponent*> 3pAuxMuzzleFlashParticles; // 0x9b0
	bool ShouldPlayBlockedImpactSound; // 0x9c0
	FTimerHandle Revolving timer; // 0x9c8
	FRotator Eval Target Shell Housing Spin; // 0x9d0
	bool ShouldComputeCosmeticHits; // 0x9dc
	bool On Init Hide Magazine; // 0x9dd
	bool Use laser sight; // 0x9de
	UMaterialInstanceDynamic* Reticle Material; // 0x9e0
	ECombatState RetrieveCombatState; // 0x9e8
	FTimerHandle Post Reload Timer; // 0x9f0
	EWeaponStateNew Old State; // 0x9f8
	FVector TracerStartPointLocalToOwner; // 0x9fc
	float TracerMinimumOffsetLocallyViewed; // 0xa08
	float TracerMaximumOffsetLocallyViewed; // 0xa0c
	float TracerMinimumOffsetNPC; // 0xa10
	float TracerMaximumOffsetNPC; // 0xa14
	float Combat State Change Time; // 0xa18
	bool Mirror Deattach Slot Active; // 0xa1c
	FName Mirror Deattach Slot Name; // 0xa20
	UObject* ScopeWidgetClass; // 0xa28
	AActor* ScopeWidgetActor; // 0xa30
	FMulticastInlineDelegate OnSetShieldActive; // 0xa38
	EGamepadTriggerType PS5 Trigger Type; // 0xa48
	char PS5 Trigger Start Position; // 0xa49
	char PS5 Trigger Stop Position; // 0xa4a
	char PS5 Trigger Haptic Strength; // 0xa4b
	float CurrentFirePlayPosition; // 0xa4c
	UParticleSystem* Tracer Particle System; // 0xa50
	UMaterialInterface* Friendly Tracer Material; // 0xa58
	UMaterialInterface* Enemy Tracer MaterialInst; // 0xa60
	bool SprintingIsActive; // 0xa68
	bool ReloadWhileSprintingActive; // 0xa69
	int32_t Temp_int_Loop_Counter_Variable; // 0xa6c
	FHitResult K2Node_CustomEvent_Hit; // 0xa70
	bool K2Node_CustomEvent_bBlockingHit; // 0xaf8
	TArray<FHitResult> K2Node_CustomEvent_OutHits; // 0xb00
	FVector K2Node_CustomEvent_Start; // 0xb10
	FVector K2Node_CustomEvent_End; // 0xb1c
	bool CallFunc_BreakHitResult_bBlockingHit; // 0xb28
	bool CallFunc_BreakHitResult_bInitialOverlap; // 0xb29
	float CallFunc_BreakHitResult_Time; // 0xb2c
	float CallFunc_BreakHitResult_Distance; // 0xb30
	FVector CallFunc_BreakHitResult_Location; // 0xb34
	FVector CallFunc_BreakHitResult_ImpactPoint; // 0xb40
	FVector CallFunc_BreakHitResult_Normal; // 0xb4c
	FVector CallFunc_BreakHitResult_ImpactNormal; // 0xb58
	UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat; // 0xb68
	AActor* CallFunc_BreakHitResult_HitActor; // 0xb70
	UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent; // 0xb78
	FName CallFunc_BreakHitResult_HitBoneName; // 0xb80
	int32_t CallFunc_BreakHitResult_HitItem; // 0xb88
	int32_t CallFunc_BreakHitResult_FaceIndex; // 0xb8c
	FVector CallFunc_BreakHitResult_TraceStart; // 0xb90
	FVector CallFunc_BreakHitResult_TraceEnd; // 0xb9c
	bool CallFunc_BreakHitResult_bBlockingHit_2; // 0xba8
	bool CallFunc_BreakHitResult_bInitialOverlap_2; // 0xba9
	float CallFunc_BreakHitResult_Time_2; // 0xbac
	float CallFunc_BreakHitResult_Distance_2; // 0xbb0
	FVector CallFunc_BreakHitResult_Location_2; // 0xbb4
	FVector CallFunc_BreakHitResult_ImpactPoint_2; // 0xbc0
	FVector CallFunc_BreakHitResult_Normal_2; // 0xbcc
	FVector CallFunc_BreakHitResult_ImpactNormal_2; // 0xbd8
	UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat_2; // 0xbe8
	AActor* CallFunc_BreakHitResult_HitActor_2; // 0xbf0
	UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent_2; // 0xbf8
	FName CallFunc_BreakHitResult_HitBoneName_2; // 0xc00
	int32_t CallFunc_BreakHitResult_HitItem_2; // 0xc08
	int32_t CallFunc_BreakHitResult_FaceIndex_2; // 0xc0c
	FVector CallFunc_BreakHitResult_TraceStart_2; // 0xc10
	FVector CallFunc_BreakHitResult_TraceEnd_2; // 0xc1c
	FHitDecalInfo CallFunc_Get_Decal_Material_Decal_Info; // 0xc28
	bool K2Node_CustomEvent_bBlockingHit_2; // 0xc50
	TArray<FHitResult> K2Node_CustomEvent_OutHits_2; // 0xc58
	FVector K2Node_CustomEvent_Start_2; // 0xc68
	FVector K2Node_CustomEvent_End_2; // 0xc74
	bool K2Node_CustomEvent_bBlockingHit_3; // 0xc80
	TArray<FHitResult> K2Node_CustomEvent_OutHits_3; // 0xc88
	FVector K2Node_CustomEvent_Start_3; // 0xc98
	FVector K2Node_CustomEvent_End_3; // 0xca4
	FFullFireRepData K2Node_CustomEvent_Data; // 0xcb0
	FName Temp_name_Variable; // 0xd18
	APlayerController* K2Node_DynamicCast_AsPlayer_Controller; // 0xd20
	bool K2Node_DynamicCast_bSuccess; // 0xd28
	bool K2Node_CustomEvent_Blocking_Hit; // 0xd29
	TArray<FHitResult> K2Node_CustomEvent_Out_Hits; // 0xd30
	FVector K2Node_CustomEvent_Start_4; // 0xd40
	FVector K2Node_CustomEvent_End_4; // 0xd4c
	bool K2Node_CustomEvent_Allow_Spangs; // 0xd58
	bool K2Node_CustomEvent_Allow_Tracers; // 0xd59
	bool K2Node_CustomEvent_Allow_Decals; // 0xd5a
	TArray<FHitResult> CallFunc_Filter_Cosmetic_Hit_Results_Filtered_Hit_Results; // 0xd60
	UKSDefaultAimTargetingModule* K2Node_DynamicCast_AsKSDefault_Aim_Targeting_Module; // 0xd70
	bool K2Node_DynamicCast_bSuccess_2; // 0xd78
	FVector CallFunc_IsWallMarkerActive_WallLocation; // 0xd7c
	TArray<FHitResult> K2Node_CustomEvent_Hits; // 0xd88
	FVector K2Node_CustomEvent_Start_5; // 0xd98
	FVector K2Node_CustomEvent_End_5; // 0xda4
	FDelegate K2Node_CreateDelegate_OutputDelegate; // 0xdb0
	FDelegate K2Node_CreateDelegate_OutputDelegate_2; // 0xdc0
	int32_t Temp_int_Array_Index_Variable; // 0xdd0
	UParticleSystemComponent* CallFunc_Array_Get_Item; // 0xdd8
	TArray<FHitResult> K2Node_CustomEvent_Hits_2; // 0xde0
	FVector K2Node_CustomEvent_Trace_End; // 0xdf0
	float K2Node_Event_DeltaSeconds; // 0xdfc
	EWeaponStateNew K2Node_Event_OldState; // 0xe00
	EWeaponStateNew K2Node_Event_NewState; // 0xe01
	bool K2Node_SwitchEnum_CmpSuccess; // 0xe02
	FFullFireRepData K2Node_Event_Data; // 0xe08
	bool K2Node_SwitchEnum_CmpSuccess_2; // 0xe70
	int32_t CallFunc_GetAnimMontage_Priority; // 0xe74
	int32_t CallFunc_GetAnimMontage_Priority_2; // 0xe78
	int32_t Temp_int_Loop_Counter_Variable_2; // 0xe7c
	TArray<FHitResult> K2Node_CustomEvent_Hits_3; // 0xe80
	FDelegate K2Node_CreateDelegate_OutputDelegate_3; // 0xe90
	int32_t Temp_int_Array_Index_Variable_2; // 0xea0
	UParticleSystemComponent* CallFunc_Array_Get_Item_2; // 0xea8
	int32_t CallFunc_GetBool_Priority; // 0xeb0
	bool K2Node_CustomEvent_bBlockingHit_4; // 0xeb4
	TArray<FHitResult> K2Node_CustomEvent_OutHits_4; // 0xeb8
	FVector K2Node_CustomEvent_Start_6; // 0xec8
	FVector K2Node_CustomEvent_End_6; // 0xed4
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst; // 0xee0
	int32_t CallFunc_GetBool_Priority_2; // 0xee8
	FFullFireRepData K2Node_CustomEvent_Fire_Data; // 0xef0
	APawn* K2Node_CustomEvent_ViewPawn; // 0xf58
	ECombatState K2Node_CustomEvent_NewState; // 0xf60
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_2; // 0xf68
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_3; // 0xf70
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_4; // 0xf78
	int32_t Temp_int_Variable; // 0xf80
	int32_t CallFunc_GetAudioEvent_Priority; // 0xf84
	int32_t CallFunc_GetAudioEvent_Priority_2; // 0xf88
	int32_t CallFunc_GetAudioEvent_Priority_3; // 0xf8c
	FDelegate K2Node_CreateDelegate_OutputDelegate_4; // 0xf90
	int32_t CallFunc_GetAnimMontage_Priority_3; // 0xfa0
	UAnimMontage* CallFunc_Get_Player_1P_Fire_Montage_Montage; // 0xfa8
	int32_t CallFunc_GetAnimMontage_Priority_4; // 0xfb0
	int32_t CallFunc_GetAnimMontage_Priority_5; // 0xfb4
	TArray<FAkExternalSourceInfo> Temp_struct_Variable; // 0xfb8
	USkinnableSkeletalMeshComponent* K2Node_Event_SkinnableSkelComp; // 0xfc8
	FDelegate Temp_delegate_Variable; // 0xfd0
	int32_t Temp_int_Array_Index_Variable_3; // 0xfe0
	int32_t Temp_int_Loop_Counter_Variable_3; // 0xfe4
	FDelegate K2Node_CreateDelegate_OutputDelegate_5; // 0xfe8
	int32_t Temp_int_Array_Index_Variable_4; // 0xff8
	UParticleSystemComponent* CallFunc_Array_Get_Item_3; // 0x1000
	bool K2Node_SwitchEnum_CmpSuccess_3; // 0x1008
	int32_t Temp_int_Loop_Counter_Variable_4; // 0x100c
	int32_t Temp_int_Loop_Counter_Variable_5; // 0x1010
	EEndPlayReason K2Node_Event_EndPlayReason; // 0x1014
	int32_t Temp_int_Array_Index_Variable_5; // 0x1018
	UParticleSystemComponent* CallFunc_Array_Get_Item_4; // 0x1020
	AKSCharacterFoundation* K2Node_CustomEvent_KillerCharacter; // 0x1028
	AKSCharacterFoundation* K2Node_CustomEvent_KilledCharacter; // 0x1030
	bool K2Node_SwitchEnum_CmpSuccess_4; // 0x1038
	AController* K2Node_CustomEvent_NewController; // 0x1040
	AKSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller; // 0x1048
	bool K2Node_DynamicCast_bSuccess_3; // 0x1050
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_2; // 0x1058
	FDelegate Temp_delegate_Variable_2; // 0x1068
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_3; // 0x1078
	int32_t CallFunc_GetBool_Priority_3; // 0x1088
	int32_t CallFunc_GetAnimMontage_Priority_6; // 0x108c
	int32_t CallFunc_GetAnimMontage_Priority_7; // 0x1090
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_5; // 0x1098
	FDelegate Temp_delegate_Variable_3; // 0x10a0
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_6; // 0x10b0
	int32_t CallFunc_GetAnimMontage_Priority_8; // 0x10b8
	int32_t CallFunc_GetAnimMontage_Priority_9; // 0x10bc
	int32_t CallFunc_GetBool_Priority_4; // 0x10c0
	int32_t CallFunc_GetAnimMontage_Priority_10; // 0x10c4
	int32_t CallFunc_GetAnimMontage_Priority_11; // 0x10c8
	int32_t CallFunc_GetAnimMontage_Priority_12; // 0x10cc
	int32_t CallFunc_GetAnimMontage_Priority_13; // 0x10d0
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_7; // 0x10d8
	bool Temp_bool_Variable; // 0x10e0
	UAnimMontage* K2Node_Select_Default; // 0x10e8
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_8; // 0x10f0
	int32_t CallFunc_GetAnimMontage_Priority_14; // 0x10f8
	int32_t CallFunc_GetAnimMontage_Priority_15; // 0x10fc
	TArray<UMaterialInterface*> CallFunc_GetMaterials_ReturnValue; // 0x1100
	UMaterialInterface* CallFunc_Array_Get_Item_5; // 0x1110
	UMaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic; // 0x1118
	bool K2Node_DynamicCast_bSuccess_4; // 0x1120
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_9; // 0x1128
	int32_t Temp_int_Loop_Counter_Variable_6; // 0x1130
	bool CallFunc_End_Reload_Weapon_Cancelled_A_Reload; // 0x1134
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_10; // 0x1138
	int32_t Temp_int_Variable_2; // 0x1140
	TArray<AActor*> Temp_object_Variable; // 0x1148
	int32_t CallFunc_GetAudioEvent_Priority_4; // 0x1158
	int32_t Temp_int_Variable_3; // 0x115c
	FName Temp_name_Variable_2; // 0x1160
	FName Temp_name_Variable_3; // 0x1168
	FName Temp_name_Variable_4; // 0x1170
	FName Temp_name_Variable_5; // 0x1178
	bool Temp_bool_Variable_2; // 0x1180
	UAnimMontage* K2Node_Select_Default_2; // 0x1188
	ECombatState K2Node_CustomEvent_OldCombatState; // 0x1190
	ECombatState K2Node_CustomEvent_NewCombatState; // 0x1191
	FDelegate K2Node_CreateDelegate_OutputDelegate_6; // 0x1194
	UTexture2D* Temp_object_Variable_2; // 0x11a8
	bool Temp_bool_Variable_3; // 0x11b0
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_11; // 0x11b8
	int32_t Temp_int_Array_Index_Variable_6; // 0x11c0
	UParticleSystemComponent* CallFunc_Array_Get_Item_6; // 0x11c8
	FDelegate K2Node_CreateDelegate_OutputDelegate_7; // 0x11d0
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_12; // 0x11e0
	FDelegate Temp_delegate_Variable_4; // 0x11e8
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_4; // 0x11f8
	UKSWeaponAnimInstance* K2Node_DynamicCast_AsKSWeapon_Anim_Instance; // 0x1208
	bool K2Node_DynamicCast_bSuccess_5; // 0x1210
	UAnimMontage* CallFunc_Get_Player_3P_Fire_Montage_Montage; // 0x1218
	FDelegate K2Node_CreateDelegate_OutputDelegate_8; // 0x1220
	FDelegate K2Node_CreateDelegate_OutputDelegate_9; // 0x1230
	FDelegate K2Node_CreateDelegate_OutputDelegate_10; // 0x1240
	UTexture2D* K2Node_Select_Default_3; // 0x1250
};

struct UKSCharacterSocketComponent : USceneComponent {
	FName SocketLookupName; // 0x208
	EKSSocketOffsetType OffsetType; // 0x210
	EKSSocketCrouchHandling CrouchingHandlingType; // 0x211
	FVector AdditiveCrouchOffset; // 0x214
};

struct URendererOverrideSettings : UDeveloperSettings {
	char bSupportAllShaderPermutations : 1; // 0x38
	char bForceRecomputeTangents : 1; // 0x38
};

struct UKSPlayerMod_SprintSpeed : UKSPlayerMod {
	float SprintSpeedMultiplier; // 0x330
};

struct UEnvQueryInstanceBlueprintWrapper : UObject {
	int32_t QueryID; // 0x30
	UEnvQueryItemType* ItemType; // 0x58
	int32_t OptionIndex; // 0x60
	FMulticastInlineDelegate OnQueryFinishedEvent; // 0x68
};

struct UDatasmithCineCameraActorTemplate : UDatasmithObjectTemplate {
	FDatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings; // 0x30
};

struct ARogueScreenLobbyCharacter_C : ALocalPlayerLobbyCharacter_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x3ee8
};

struct UWBP_QueueTimer_v2_C : UKSQueueTimerWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x530
	UWidgetAnimation* Hover; // 0x538
	UTextBlock* ButtonText; // 0x540
	UBorder* CancelBg; // 0x548
	UHorizontalBox* CancelContainer; // 0x550
	UButton* CancelQueueButton; // 0x558
	UWBP_KeyCallout_C* CancelQueueGamepad; // 0x560
	UOverlay* Container; // 0x568
	UBorder* ContentBkg; // 0x570
	UHorizontalBox* HorizontalBox_2; // 0x578
	UTextBlock* StatusLabel; // 0x580
	UDataTable* ColorPalette; // 0x588
	UKSQueueDataFactory* QueueDataFactory; // 0x590
};

struct UCapsuleComponent : UShapeComponent {
	float CapsuleHalfHeight; // 0x448
	float CapsuleRadius; // 0x44c
};

struct UWBP_PlayerContextMenuOption_C : UKSContextMenuButton {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UWidgetAnimation* Hover; // 0x530
	USizeBox* GamepadPromptWrapper; // 0x538
	UTextBlock* OptionText; // 0x540
	UImage* SelectGamepadIcon; // 0x548
	UWBP_ButtonStacked_C* WBP_ButtonStacked; // 0x550
	FMulticastInlineDelegate OnContextOptionSelected; // 0x558
	bool IsActiveInMenu; // 0x568
	PGAME_INPUT_STATE Current Input State; // 0x569
	bool Is Hovered; // 0x56a
};

struct UAISense_Hearing : UAISense {
	TArray<FAINoiseEvent> NoiseEvents; // 0x80
	float SpeedOfSoundSq; // 0x90
};

struct UKSDataIndividualInviteSetup : UKSDataMassInviteBase {
	FDelegate OnGetIsSelected; // 0x78
	FDelegate OnSelect; // 0x88
};

struct UInGameAdManager : UPlatformInterfaceBase {
	char bShouldPauseWhileAdOpen : 1; // 0x38
	TArray<FDelegate> ClickedBannerDelegates; // 0x40
	TArray<FDelegate> ClosedAdDelegates; // 0x50
};

struct UKSLootItem : UKSItem {
	int32_t Amount; // 0x250
	bool bShareWithTeam; // 0x254
};

struct UWBP_local_player_card_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* AvatarShade; // 0x528
	UImage* BackgroundFill; // 0x530
	USizeBox* IconSizer; // 0x538
	UCircularThrobber* PendingPurchaseThrobber; // 0x540
	UWBP_PlayerIdentity_Avatar_C* PlayerAvatar; // 0x548
	UWBP_PlayerIdentity_PlayerLevel_C* PlayerLevel; // 0x550
	UTextBlock* PlayerName; // 0x558
	UImage* PlayerNameShade; // 0x560
	UTextBlock* RBCount; // 0x568
	UImage* RBIcon; // 0x570
	USizeBox* RBIconSizer; // 0x578
	UWidgetSwitcher* RBSwitcher; // 0x580
	UWidgetSwitcher* RepSwitcher; // 0x588
	UTextBlock* ReputationCount; // 0x590
	UImage* ReputationIcon; // 0x598
	UHorizontalBox* ReputationWrapper; // 0x5a0
	UHorizontalBox* RogueBucksWrapper; // 0x5a8
	UThrobber* Throbber; // 0x5b0
	UThrobber* Throbber_2; // 0x5b8
	UKSPlayerDataFactory* PlayerDataFactory; // 0x5c0
	TArray<UTexture2D*> AvatarOptions; // 0x5c8
	UKSLoadoutDataFactory* LoadoutDataFactory; // 0x5d8
};

struct UMovieSceneGeometryCollectionTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> AnimationSections; // 0x58
};

struct UWBP_SimulmediaEntrypoint_C : UKSWidget {
	UImage* Image_148; // 0x520
	URichTextBlock* RichTextBlock_196; // 0x528
	UWBP_YellowButton_C* WBP_YellowButton; // 0x530
};

struct UKSViewedItemLabel : UKSViewedPawnWidget {
	bool UpdateViewLimitPosition; // 0x558
	FVector2D ViewLimitPosition; // 0x55c
};

struct UDistributionFloatConstantCurve : UDistributionFloat {
	FInterpCurveFloat ConstantCurve; // 0x38
};

struct UAkGroupValue : UAkAudioType {
	uint32_t GroupShortID; // 0x40
};

struct APGame_CombatLogVisualizer : AActor {
	FString LogFileName; // 0x220
};

struct UEngineMessage : ULocalMessage {
	FString FailedPlaceMessage; // 0x28
	FString MaxedOutMessage; // 0x38
	FString EnteredMessage; // 0x48
	FString LeftMessage; // 0x58
	FString GlobalNameChange; // 0x68
	FString SpecEnteredMessage; // 0x78
	FString NewPlayerMessage; // 0x88
	FString NewSpecMessage; // 0x98
};

struct UInAppPurchaseCallbackProxy2 : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct USphereComponent : UShapeComponent {
	float SphereRadius; // 0x448
};

struct UTcpMessagingSettings : UObject {
	bool EnableTransport; // 0x28
	FString ListenEndpoint; // 0x30
	TArray<FString> ConnectToEndpoints; // 0x40
	int32_t ConnectionRetryDelay; // 0x50
	bool bStopServiceWhenAppDeactivates; // 0x54
};

struct UReverbEffect : UObject {
	float Density; // 0x28
	float Diffusion; // 0x2c
	float Gain; // 0x30
	float GainHF; // 0x34
	float DecayTime; // 0x38
	float DecayHFRatio; // 0x3c
	float ReflectionsGain; // 0x40
	float ReflectionsDelay; // 0x44
	float LateGain; // 0x48
	float LateDelay; // 0x4c
	float AirAbsorptionGainHF; // 0x50
	float RoomRolloffFactor; // 0x54
};

struct AKSCharacter : AKSCharacterBase {
	bool bTapRadialButtonToUseLastSelectedItem; // 0x1532
	TArray<FName> ReleasedInputsOnOpenUI; // 0x1608
	TArray<FName> ExcludedReleasedInputsOnOpenRadialMenu; // 0x1618
	TArray<FName> ExcludedReleasedInputsOnOpenEscapeMenu; // 0x1628
	TArray<FName> ExcludedReleasedInputsOnOpenScoreboard; // 0x1638
	TArray<FName> ExcludedReleasedInputsOnOpenMap; // 0x1648
	TArray<FName> ReleasedInputsOnCloseRadialMenu; // 0x1658
	FMulticastInlineDelegate OnPossessedBy; // 0x1668
	FMulticastInlineDelegate OnUnpossessed; // 0x1678
	AKSPlayerController* CachedKSPlayerController; // 0x1688
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x1690
	UKSInteractionType* InteractionType; // 0x1698
	UKSInteractableComponent* InteractableComponent; // 0x16a0
	FKSObjectiveInfo ObjectiveInfo; // 0x16a8
	FKSObjectiveTimerInfo ObjectiveTimerInfo; // 0x1710
	FKSObjectiveCaptureInfo ObjectiveCaptureInfo; // 0x1748
	UKSAutoPickupComponent* AutoPickupComponent; // 0x1760
	bool bProcessingReverseFriendlyFireDamageEvent; // 0x1768
	UAkAudioEvent* RumbleDamageAudioEvent; // 0x1788
	UAkAudioEvent* RumbleJumpAudioEvent; // 0x1790
	UAkAudioEvent* RumbleReviveAudioEvent; // 0x1798
	UAkAudioEvent* RumbleReviveAudioEventEnd; // 0x17a0
	UAkAudioEvent* RumbleDownedAudioEvent; // 0x17a8
	UAkAudioEvent* RumbleDownedAudioEventEnd; // 0x17b0
	float MinimumFlinchHeight; // 0x17c0
	float MinimumFlinchDamage; // 0x17c4
	float MaximumFlinchHeight; // 0x17c8
	float MaximumFlinchDamage; // 0x17cc
	float FlinchDuration; // 0x17d0
	float FlinchRecoveryRate; // 0x17d4
	bool bFlinchSnipersOnly; // 0x17d8
	TMap<AKSPlayerState*, FKSDamageRecord> DamageRecord; // 0x17e0
	float DamageRecordResetTime; // 0x1830
	FTimerHandle DamageRecordResetTimer; // 0x1838
	FKSShotgunHitChangeList ReplicatedShotgunHits; // 0x1840
	FMulticastInlineDelegate OnNewShotgunHit; // 0x18c8
	float KillCamHitRecordTime; // 0x1928
	FMulticastInlineDelegate OnLocalViewChanged; // 0x1948
	TArray<TWeakObjectPtr<APlayerController>> LocalViewers; // 0x1958
	FKSRepossessState RepossessState; // 0x1968
	FMulticastInlineDelegate OnCanRemoveBackPackChanged; // 0x1980
	FMulticastInlineDelegate OnCharacterFreeFallStartedDel; // 0x1990
	FMulticastInlineDelegate OnCharacterFreeFallCompletedDel; // 0x19a0
	FText RemoveBackpackInteractionPromptText; // 0x19b8
	float SkyDiveMaxPitch; // 0x19d0
	float SkyDiveMinPitch; // 0x19d4
	float SkyDiveExitDistance; // 0x19d8
	float SkyDiveExitThreshold; // 0x19dc
	float SkyDiveForceExitDistance; // 0x19e0
	bool bLeftHandMantleIK; // 0x19e4
	bool bRightHandMantleIK; // 0x19e5
	FVector LeftHandMantleIKLocation; // 0x19e8
	FVector RightHandMantleIKLocation; // 0x19f4
	float LeftHandMantleIKAlpha; // 0x1a00
	float RightHandMantleIKAlpha; // 0x1a04
	bool bFadeOutLeftHandMantleIK; // 0x1a08
	bool bFadeOutRightHandMantleIK; // 0x1a09
	TArray<FSmoothedComponentInfo> SmoothedComponents; // 0x1a10
	TArray<UKSSmoothingComponent*> RegisteredSmoothingComponents; // 0x1a20
	UCurveFloat* SprintImpulseCurve; // 0x1ac8
	float SprintPressLeeway; // 0x1ad4
	float SprintLeewayExpire; // 0x1ad8
	bool bFacingVaultWall; // 0x1adc
	bool bWantsToAutoSprint; // 0x1add
	bool bAutoSprintTimerComplete; // 0x1ade
	float AutoSprintDelay; // 0x1ae0
	float LeftHandMantleIKOffset; // 0x1af0
	float RightHandMantleIKOffset; // 0x1af4
	float HandMantleIKFadeTime; // 0x1af8
	float MantleIKHandsToWallForwardOffset; // 0x1afc
	float RiseFromCrouchDelayTime; // 0x1b00
	bool bUsingEmoteCamera; // 0x1b08
	float EmoteFinishedDisableFireTimeSeconds; // 0x1b0c
	int32_t ActiveEmoteActionRestrictorID; // 0x1b10
	FTimerHandle RemoveEmoteActionRestrictorTimerHandle; // 0x1b18
	FMulticastInlineDelegate OnCrouchStartedDel; // 0x1b68
	FMulticastInlineDelegate OnCrouchEndedDel; // 0x1b78
	float GamepadInput; // 0x1b88
	bool HasGamepadInput; // 0x1b8c
	bool bZiplineActive; // 0x1b8d
	UKSModInst_Activated* AbilityMovementMod; // 0x1b90
	float ZiplineMeshHeightAdjust; // 0x1b98
	float DrownDamagePeriod; // 0x1b9c
	float DrownPerTickDamage; // 0x1ba0
	UDamageType* DrownDamageType; // 0x1ba8
	UPGame_PositionHistoryComponent* PositionHistoryComponent; // 0x1bb8
	FPGame_ReplicatedTimer ReplicatedEMPLockoutTimer; // 0x1bc0
	bool bIsEMPLocked; // 0x1c10
	FMulticastInlineDelegate OnEMPLocked; // 0x1c18
	FMulticastInlineDelegate OnEMPLockoutTick; // 0x1c28
	bool bIsOnFire; // 0x1c50
	UKSCharacterCameraHandler* CameraHandler; // 0x1c58
	UKSSmoothingComponent* CameraRootComponent; // 0x1c60
	UKSSpringArmComponent* MainCameraBoom; // 0x1c68
	UCameraComponent* MainCameraComponent; // 0x1c70
	UKSSpringArmComponent* SprintCameraBoom; // 0x1c78
	UCameraComponent* SprintCameraComponent; // 0x1c80
	UKSSpringArmComponent* TransitionCameraBoom; // 0x1c88
	UCameraComponent* TransitionCameraComponent; // 0x1c90
	UKSSpringArmComponent* ShoulderCameraBoom; // 0x1c98
	UCameraComponent* ShoulderCameraComponent; // 0x1ca0
	UCameraComponent* FirstPersonCameraComponent; // 0x1ca8
	UKSSpringArmComponent* TabletCameraBoom; // 0x1cb0
	UCameraComponent* TabletCameraComponent; // 0x1cb8
	UKSSpringArmComponent* ActionCameraBoom1; // 0x1cc0
	UCameraComponent* ActionCameraComponent; // 0x1cc8
	UKSSpringArmComponent* SwimCameraBoom; // 0x1cd0
	UCameraComponent* SwimCameraComponent; // 0x1cd8
	UKSSpringArmComponent* MountedCameraBoom; // 0x1ce0
	UCameraComponent* MountedCameraComponent; // 0x1ce8
	UCameraComponent* ActiveCameraComponent; // 0x1cf0
	UCameraComponent* PendingCameraComponent; // 0x1cf8
	float CrouchAOSAimVertOffset; // 0x1d04
	float CrouchAOSCamVertOffsetBlendTime; // 0x1d08
	float CrouchAimingCapsuleHeightAdjustment; // 0x1d0c
	float AimSnapThrottleTime; // 0x1d28
	float LockoutCameraCooldownSpeed; // 0x1d30
	FVector AutoShoulderSwapExtent; // 0x1d50
	float AutoShoulderSwapForwardCheckDist; // 0x1d5c
	float AutoShoulderSwapRightCheckDist; // 0x1d60
	float AutoShoulderSwapRightForwardCheckDist; // 0x1d64
	float LockedAutoShoulderSwapTimeThreshold; // 0x1d68
	float LockedAutoShoulderSwapWeaponFireTime; // 0x1d6c
	float LockedAutoShoulderSwapDistance; // 0x1d70
	EKSCharacterAimMode AimState; // 0x1d88
	EKSCharacterAimMode DesiredAimState; // 0x1d89
	bool bAimPressed; // 0x1d8a
	bool bWasAimDownSightsWhenAimPressed; // 0x1d8b
	bool bWasAimAlternateWhenAimPressed; // 0x1d8c
	float AimHoldTime; // 0x1d90
	float AimOverShoulderHoldTime; // 0x1d94
	TMap<EKSMaterialHideType, UMaterial*> MaterialHideTypeMap; // 0x1d98
	TMap<int32_t, EKSMaterialHideType> MaterialIndexesToHide; // 0x1de8
	TMap<int32_t, UMaterialInterface*> HiddenMaterials; // 0x1e38
	bool bIsAimLocked; // 0x1e88
	FMulticastInlineDelegate OnAimLockedChangedDel; // 0x1e90
	bool bIsCrosshairHidden; // 0x1ea0
	FMulticastInlineDelegate OnCrosshairHiddenChangedDel; // 0x1ea8
	FMulticastInlineDelegate OnCannonBonusAmmoRecieved; // 0x1eb8
	FGameplayTagContainer AvailableEquipPoints_New; // 0x1f28
	TArray<FKSInitialInventoryItem> InitialInventory; // 0x1f48
	TArray<FKSInitialAmmo> InitialAmmo; // 0x1f58
	UKSEquipmentManagerComponent* EquipmentManagerComponent; // 0x1f68
	bool bDropAmmoOnDeath; // 0x1f70
	FGameplayTagContainer WeaponSlotsToDropOnDeath; // 0x1f78
	FGameplayTagContainer WeaponSlotsToDropOnDowned; // 0x1f98
	TArray<FGameplayTagContainer> ActiveWeaponSlotTiers; // 0x1fb8
	TArray<FGameplayTagContainer> GrenadeSlotTiers; // 0x1fc8
	TArray<FKSLootLockerItem> LootLockerInventory; // 0x1fd8
	FGameplayTag StartingActiveWeaponEquipPoint; // 0x1fe8
	UKSSwapHandlerProfile* MainSwapHandlerProfile; // 0x1ff0
	UKSSwapHandlerProfile* GadgetSwapHandlerProfile; // 0x1ff8
	UKSSwapHandlerProfile* MedpackSwapHandlerProfile; // 0x2000
	UKSSwapHandlerProfile* PassiveSwapHandlerProfile; // 0x2008
	UKSSwapHandlerProfile* QuickMeleeSwapHandlerProfile; // 0x2010
	UKSWeaponAsset* EmergencyWeaponAsset; // 0x2018
	FText ObjectiveWeaponDropPrompt; // 0x2028
	FText ObjectiveWeaponDropProgressText; // 0x2040
	float DropObjectiveWeaponInteractTime; // 0x2058
	FMulticastInlineDelegate OnCharacterStartedWeaponFireNativeDel; // 0x2060
	bool bSelfDestruct; // 0x2070
	TMap<FName, int32_t> SubTypeComponentIndexMap; // 0x20e8
	float MeleeHoldTime; // 0x2138
	int32_t PrimaryTier; // 0x213c
	int32_t SecondaryTier; // 0x2140
	int32_t MeleeTier; // 0x2144
	float WeaponDropHoldTime; // 0x2148
	float WeaponDoubleTapTime; // 0x214c
	float LastActiveWeaponFireTimestamp; // 0x2150
	FMulticastInlineDelegate OnActiveWeaponChangedDel; // 0x2158
	FMulticastInlineDelegate OnActiveGrenadeChangedDel; // 0x2180
	FMulticastInlineDelegate OnActiveMedPackChangedDel; // 0x21a8
	FTimerHandle MeleeHoldTimer; // 0x21d0
	FTimerHandle DoubleTapTimer; // 0x21d8
	FTimerHandle DropHoldTimer; // 0x21e0
	float WeaponSwapThrottleExpire; // 0x21e8
	float WeaponSwapThrottlePeriod; // 0x21ec
	float QuickMeleeHoldTime; // 0x21f0
	AKSWeapon_Melee* CurrentQuickMeleeWeapon; // 0x21f8
	bool bQuickMeleeHoldCompleted; // 0x2200
	bool bSwapOffQuickMeleeAfterFire; // 0x2201
	FMulticastInlineDelegate OnStartFireFailed; // 0x2220
	bool bNoFire; // 0x2230
	bool IsFireWeaponHeld; // 0x2250
	bool bStartFireAfterAnimFinish; // 0x2251
	bool bIsThrowGrenadeHeld; // 0x2252
	bool IsAimDownSightsHeld; // 0x2253
	FString SwingMontageSection; // 0x2258
	FMulticastInlineDelegate OnWeaponInventoryChanged; // 0x2278
	FMulticastInlineDelegate OnGadgetResupplied; // 0x2288
	FMulticastInlineDelegate OnMeleeHoldStart; // 0x2298
	FMulticastInlineDelegate OnMeleeHoldEnd; // 0x22a8
	UKSWeaponComponent* ActiveWeaponComponent[0xb]; // 0x22b8
	uint16_t ActiveEquipmentId[0xb]; // 0x2310
	FKSEquipmentContainer EquipmentContainer; // 0x2338
	TMap<uint16_t, FKSPendingWeaponStateUpdates> PendingWeaponStateUpdates; // 0x2560
	FMulticastInlineDelegate OnEquipmentAddedDel; // 0x25b0
	FMulticastInlineDelegate OnEquipmentRemovedDel; // 0x25d8
	FMulticastInlineDelegate OnEquipmentBecomeActiveDel; // 0x2600
	FMulticastInlineDelegate OnEquipmentEndActiveDel; // 0x2628
	FMulticastInlineDelegate OnSpecialAmmoEvent; // 0x2650
	TMap<EAmmoType, UKSAmmoDropAsset*> AmmoDropAssets; // 0x2660
	FKSAmmoManager AmmoManager; // 0x26b0
	float OutOfSightWeaponPickupRange; // 0x27f8
	float WeaponPickupRange; // 0x27fc
	USphereComponent* PickUpSphereComponent; // 0x2800
	float LabelPickupRange; // 0x2808
	FMulticastInlineDelegate OnItemPickedUp; // 0x2810
	TMap<AActor*, float> OutOfRangePickups; // 0x2820
	float ReloadTapThreshold; // 0x2870
	float ContextualPressTime; // 0x2874
	bool bWantsToInteract; // 0x2878
	float CachedMaxHealth; // 0x287c
	float DownedHealth; // 0x2880
	float RevivedHealth; // 0x2884
	int32_t ArmorHelmetLevel; // 0x2888
	int32_t ArmorVestLevel; // 0x288c
	float ArmorDurabilityPercent; // 0x2890
	float CurrentArmorDurability; // 0x2894
	float MaxHealthBonus; // 0x2898
	float MaxMaxHealthBonus; // 0x289c
	float LocalMaxHealthBonus; // 0x28a0
	FMulticastInlineDelegate OnMaxHealthBonusChanged; // 0x28a8
	bool bDowned; // 0x28b9
	UKSTimerComponent* GiveUpTimer; // 0x28c0
	float GiveUpHoldTime; // 0x28c8
	FMulticastInlineDelegate OnGiveUpTimerActive; // 0x28d0
	FMulticastInlineDelegate OnGiveUpTimerTick; // 0x28e0
	FMulticastInlineDelegate OnGiveUpAllowed; // 0x28f0
	float DownedImmuneTime; // 0x2900
	float DownedImmuneTimeStamp; // 0x2904
	bool bAllowGiveUp; // 0x290c
	float BleedPeriod; // 0x2910
	float BleedDamage; // 0x2914
	UDamageType* BleedDamageType; // 0x2918
	AController* DownInstigator; // 0x2928
	UDamageType* DownDamageType; // 0x2930
	AActor* DownDamageCauser; // 0x2938
	FMulticastInlineDelegate OnCharacterDownedChangedDel; // 0x2958
	int32_t DownSpree; // 0x2968
	TArray<UAkAudioEvent*> DownSpreeSounds; // 0x2970
	float DefaultAssistDuration; // 0x2980
	TArray<FAssistTag> DownAssistTagQueue; // 0x2988
	TArray<APlayerState*> DownAssists; // 0x2998
	AController* KillInstigator; // 0x29a8
	TArray<APlayerState*> EliminationAssists; // 0x29b0
	TArray<APlayerState*> PlayersWithEliminationCredit; // 0x29c0
	FText ReviveInteractionProgressText; // 0x29d8
	FText ReviveInteractionPromptText; // 0x29f0
	UCameraShake* InteractionCameraShake; // 0x2a08
	float TimeToRevive; // 0x2a10
	float bForceCrouchOnRevive; // 0x2a14
	FReviveInfo ReviveInfo; // 0x2a18
	bool bCanMoveWhileRevivingOther; // 0x2a48
	TWeakObjectPtr<AActor> ActorTargetingMeForRevive; // 0x2ab0
	FMulticastInlineDelegate OnStartReviveDel; // 0x2ab8
	FMulticastInlineDelegate OnStartReviveOtherDel; // 0x2ae0
	FMulticastInlineDelegate OnReviveInterruptedDel; // 0x2b08
	FMulticastInlineDelegate OnReviveOtherInterruptedDel; // 0x2b30
	FMulticastInlineDelegate OnReviveCompletedDel; // 0x2b58
	FMulticastInlineDelegate OnReviveOtherCompletedDel; // 0x2b80
	int32_t NumOngoingRemoteRevives; // 0x2ba8
	FMulticastInlineDelegate OnShoulderSwapChanged; // 0x2c10
	UKSInteractionManager* InteractionManager; // 0x2c20
	UKSInteractionManager* ReceivedInteractionManager; // 0x2c28
	TWeakObjectPtr<AActor> InteractionHoverTarget; // 0x2c30
	bool bHoverTargetPress; // 0x2c38
	bool bHoverTargetHold; // 0x2c39
	AActor* InteractionTarget; // 0x2c40
	bool IsInInteraction; // 0x2c48
	UKSInteractionType* MostRecentInteractionType; // 0x2c50
	EKSInteractionResult MostRecentInteractionResult; // 0x2c58
	FVector MostRecentInteractionStartLocation; // 0x2c5c
	bool InteractionFacesRotation; // 0x2c68
	FKSInteractableCameraTransition InteractionCameraTransition; // 0x2c70
	UKSInteractionType* DefaultInteractionType; // 0x2ca0
	float InteractionDistance; // 0x2ca8
	float MaxInteractionAngle; // 0x2cac
	float InteractionHoldTime; // 0x2cb0
	float InteractionPriorityBaseModifier; // 0x2cb4
	bool bUncrouchAfterInteraction; // 0x2cb8
	bool bInteractionCrouchLock; // 0x2cb9
	FTimerHandle InstantInteractHandle; // 0x2cd8
	float InstantInteractCooldownTime; // 0x2ce0
	FMulticastInlineDelegate OnHoveredInteractableChanged; // 0x2ce8
	FMulticastInlineDelegate OnInteractStart; // 0x2cf8
	FMulticastInlineDelegate OnRemotePlayerInteractStart; // 0x2d08
	FMulticastInlineDelegate OnInteractEnd; // 0x2d18
	FMulticastInlineDelegate OnRemotePlayerInteractEnd; // 0x2d28
	FMulticastInlineDelegate OnInteractSuccess; // 0x2d38
	FMulticastInlineDelegate OnInteractFailed; // 0x2d48
	FMulticastInlineDelegate OnInteractInterrupted; // 0x2d58
	FMulticastInlineDelegate OnChargingActionStart; // 0x2d68
	FMulticastInlineDelegate OnChargingActionEnd; // 0x2d78
	FVector BaseLocalDropLocation; // 0x2d88
	TMap<int32_t, float> TierToDropYawMap; // 0x2d98
	TMap<FGameplayTag, float> EquipPointToDropYawMap; // 0x2de8
	float AmmoDropYaw; // 0x2e38
	float DropLateralSpeed; // 0x2e3c
	float DropLateralSpeedVariance; // 0x2e40
	float CompanionAmmoHeightShift; // 0x2e44
	float DropAngleVariance; // 0x2e48
	bool bInRagdoll; // 0x2e60
	bool bInPreRagdoll; // 0x2e61
	float TryToStopRagdollInterval; // 0x2e7c
	float RagdollFreezeSpeed; // 0x2e80
	float DeathDisplayLifespan; // 0x2e9c
	TArray<FString> DeathWidgetPoolName; // 0x2ea0
	bool bGodMode; // 0x2f98
	TArray<FKSFlashBangRecord> FlashBangRecords; // 0x2fa0
	UKSPlayerMod* FlashBangEffectMod; // 0x2fb8
	UKSPlayerModInstance* FlashBangEffectModInstance; // 0x2fc0
	FMulticastInlineDelegate OnLightBombHitCount; // 0x2fc8
	FMulticastInlineDelegate OnAbleToMountChanged; // 0x2fd8
	FMulticastInlineDelegate OnCamouflageChangedDel; // 0x2fe8
	FMulticastInlineDelegate OnCamouflageLevelChangedDel; // 0x2ff8
	bool bCachedCamouflaged; // 0x3008
	EKSCamouflageLevel CurrentCamouflageLevel; // 0x3009
	bool bScrambled; // 0x3018
	bool bMedPackPressed; // 0x3019
	FMulticastInlineDelegate OnStickDel; // 0x3020
	FMulticastInlineDelegate OnMedPackFailed; // 0x3030
	FMulticastInlineDelegate OnGrenadeFailed; // 0x3040
	FMulticastInlineDelegate OnWeaponPickupInventoryFull; // 0x3050
	FMulticastInlineDelegate OnItemPickupSuccess; // 0x3060
	bool bReplicatedActivatingMod; // 0x3070
	FMulticastInlineDelegate OnModsUpdated; // 0x3078
	FMulticastInlineDelegate OnActivatableModsUpdated; // 0x3088
	bool bRotationInputAllowsAimAssist; // 0x3098
	float MinimumRotationInputForAimAssist; // 0x309c
	FMulticastInlineDelegate OnGamepadAbilityCycle; // 0x30a0
	FMulticastInlineDelegate OnAbilityActivatedEvent; // 0x30b0
	FMulticastInlineDelegate OnAbilityUsedEvent; // 0x30c0
	float ChordDelay; // 0x30d4
	float HoldDelay; // 0x30d8
	float DamageForMaxForceFeedback; // 0x30dc
	float DamageForceFeedbackScale; // 0x30e0
	float DamageForceFeedbackDuration; // 0x30e4
	bool bDamageForceFeedbackUsesSmallMotors; // 0x30e8
	float ForceFeedbackOnErrorMagnitude; // 0x30ec
	float ForceFeedbackOnErrorDuration; // 0x30f0
	float LandingSpeedForMaxForceFeedback; // 0x30f4
	UForceFeedbackComponent* LandForceFeedbackComponent; // 0x30f8
	UForceFeedbackEffect* JumpForceFeedbackEffect; // 0x3100
	UForceFeedbackEffect* DownedForceFeedbackEffect; // 0x3108
	UForceFeedbackEffect* BeingRevivedForceFeedbackEffect; // 0x3110
	TArray<TScriptInterface<IKSFootstepOverrideInterface>> ReplicatedFootstepOverrides; // 0x3118
	TArray<TScriptInterface<IKSFootstepOverrideInterface>> AutonomousProxyFootstepOverrides; // 0x3128
	float FootprintLifetimeSeconds; // 0x3138
	float FootprintStartFadeOutTimeSeconds; // 0x313c
	FVector FootprintDecalSize; // 0x3140
	UMaterialInterface* LeftFootprintDecalMaterial; // 0x3150
	UMaterialInterface* RightFootprintDecalMaterial; // 0x3158
	FVector FootprintMeshSize; // 0x3160
	UStaticMesh* FootprintMesh; // 0x3170
	TArray<FKSFootprintInfo> Footprints; // 0x3178
	UInstancedStaticMeshComponent* FootprintInstancedMeshComponent; // 0x3188
	UNavArea* MovingNavAreaClass; // 0x3198
	UNavArea* StillNavAreaClass; // 0x31a0
	UKSNavModifierComponent* KSNavModifierComponent; // 0x31a8
	float NavModificationUpdateTimerPeriod; // 0x31b0
	FName DamagedHearingEventTag; // 0x31c0
	float DamageForDefaultLoudness; // 0x31c8
	FName FireHearingEventTag; // 0x31cc
	float FireRangeForDefaultLoudness; // 0x31d4
	FName FootstepHearingEventTag; // 0x31d8
	float MovementSpeedForDefaultLoudness; // 0x31e0
	float TeamEventRange; // 0x31e4
	FName BotName; // 0x31f4
	float BotADSAccuracy; // 0x31fc
	bool bRandomBotName; // 0x3200
	bool bBot; // 0x3201
	ECharacterBehaviorState CurrentBehaviorState; // 0x3202
	FMulticastInlineDelegate OnBehaviorStateChanged; // 0x3208
	UKSVOComponent* VOComponentClass; // 0x3218
	UKSVOComponent* VOComponent; // 0x3220
	TArray<UDataTable*> PossibleVOTables; // 0x3228
	FGameplayTag DownOtherVOEvent; // 0x323c
	float NameplateZOffset; // 0x3244
	float CurrentNameplateZOffset; // 0x3248
	float CurrentNameplateAimZOffset; // 0x324c
	float NameplateAimZOffset; // 0x3250
	float NameplateAimZOffsetBlendTime; // 0x3254
	float TargetNameplateAimZOffset; // 0x3258
	float CurrentNameplateCrouchZOffset; // 0x325c
	float NameplateCrouchZOffset; // 0x3260
	float NameplateCrouchZOffsetBlendTime; // 0x3264
	float TargetNameplateCrouchZOffset; // 0x3268
	EKSVehicleState VehicleState; // 0x326c
	AKSVehicle* CurrentVehicle; // 0x3270
	FMulticastInlineDelegate OnVehicleStateChanged; // 0x3288
	FMulticastInlineDelegate OnDestructibleSpeedOverlap; // 0x3298
	bool bDoDrawDebugLines; // 0x32a8
	FName BaseVisibilityBone; // 0x32ac
	FName LeftElbowBone; // 0x32b4
	FName LeftWristBone; // 0x32bc
	FName RightElbowBone; // 0x32c4
	FName RightWristBone; // 0x32cc
	float HiddenArmScale; // 0x32d4
	float LeftArmScaleAlpha; // 0x32d8
	float RightArmScaleAlpha; // 0x32dc
	bool bShowWeaponWhenArmVisible; // 0x32e0
	float MaxDistancePenetrationCheck; // 0x32e4
	EKSArmVisibilityType LeftArmVisibility; // 0x37e8
	EKSArmVisibilityType RightArmVisibility; // 0x37e9
	FName PelvisBone; // 0x37ec
	TArray<UKSApparelAsset*> DefaultApparelSetup; // 0x37f8
	TMap<FAppliedApparelKey, UKSApparelAsset*> AppliedApparelMap; // 0x3808
	TMap<FName, FAppliedApparelKey> SlotToApparelKeyMap; // 0x3858
	TArray<UKSApparelAsset*> ApparelAssets; // 0x38a8
	bool bNoApparel; // 0x38b8
	TArray<TWeakObjectPtr<UKSApparelAsset>> LocalApparelAssets; // 0x38c0
	bool bApparelAssetMapDirty; // 0x38d0
	FTimerHandle ApparelTimeoutHandle; // 0x38d8
	float ApparelTimeoutTime; // 0x38e0
	bool bFirstApparelApplicationSuccess; // 0x38e4
	FMulticastInlineDelegate OnNewApparelApplicationFinishedDel; // 0x3948
	bool bApparelInstancesAreLoaded; // 0x3958
	int32_t ApparelLockCount; // 0x3968
	bool bApparelDirtiedAndLocked; // 0x396c
	TArray<FKSTranslucencyMaterialInfo> TranslucencyMaterialInfos; // 0x39c0
	FKSCharacterGender Gender; // 0x39d0
	FKSCharacterGender LocalGender; // 0x39d2
	FMulticastInlineDelegate OnGenderChangedDel; // 0x39d8
	USkinObjectManagerComponent* SkinsManager; // 0x3a00
	UMultiSkinObject* DefaultBodyApparelSkinObject; // 0x3a08
	FGameplayTagContainer SkinTagContainer; // 0x3a10
	TArray<FDataTableInfo> DefaultApparelSkinTables; // 0x3a30
	bool bUseCameraProximityFading; // 0x3a58
	float CameraFadeStartDistance; // 0x3a5c
	float CameraFadeEndDistance; // 0x3a60
	FName FadeAlphaParamName; // 0x3a64
	float LastCameraProximityAlpha; // 0x3a6c
	EKSEmotion Emotion; // 0x3a70
	EKSEmotion LocalEmotion; // 0x3a71
	EKSEmotion LastEmotion; // 0x3a72
	float EmotionFloat; // 0x3a74
	FMulticastInlineDelegate OnEmotionChangedDel; // 0x3a78
	TArray<FKSActiveEmotePropInfo> ActiveEmotePropInfos; // 0x3a88
	TWeakObjectPtr<AKSProp_Physical> CurrentEmotePhysicsProp; // 0x3a98
	TWeakObjectPtr<UDecalComponent> CurrentEmoteDecalComponent; // 0x3aa0
	UKSAnimationAuditComponent* AnimationAuditComponent; // 0x3aa8
	UMaterialInstanceDynamic* ADSBlurMID; // 0x3ab0
	float TimeToRepairArmor; // 0x3ab8
	float DurabilityASecond; // 0x3abc
	bool bRepairAllArmorAtOnce; // 0x3ac0
	FText ArmorRepairProgressText; // 0x3ac8
	FText ArmorRepairPromptText; // 0x3ae0
	bool bCanRepairArmor; // 0x3af8
	bool bRepairableArmorEquipped; // 0x3af9
	bool bIsRepairingArmor; // 0x3afa
	FMulticastInlineDelegate OnRepairableArmorEquippedDel; // 0x3b00
	FMulticastInlineDelegate OnArmorInteractAvailableDel; // 0x3b10
	TArray<TWeakObjectPtr<AActor>> NudgingActors; // 0x3b20
	UKSNudgeComponent* NudgeComponent; // 0x3b30
	UKSNudgeComponent* NudgeComponentClass; // 0x3b38
	UKSWeaponPropManagerComponent* WeaponPropManagerComponent; // 0x3b40
	USkelPropManagerComponent* SkinnableSkelPropManagerComponent; // 0x3b48
	UStaticPropManagerComponent* SkinnableStaticPropManagerComponent; // 0x3b50
	TMap<UKSItem*, UKSItem*> SkinMap; // 0x3b58
	bool bTouchModeAutoSprintActive; // 0x3c18
	bool bPreventingAutoSprint; // 0x3c19
};

struct UKSPlayerMod_AngleConfig : UKSPlayerMod {
	float AngleThreshold; // 0x330
	bool bUseDistance; // 0x334
	float DistanceThreshold; // 0x338
};

struct UTracerParticleSystemComponent : UParticleSystemComponent {
	FVector start; // 0x6b0
	FVector end; // 0x6bc
	float TravelSpeed; // 0x6c8
	bool bDestroyOnDestinationReached; // 0x6cc
	bool bDeactivateOnDestinationReached; // 0x6cd
	bool bEnableTravel; // 0x6ce
	FMulticastInlineDelegate OnTracerParticleReachedDestiniationDel; // 0x6d0
};

struct UFirstTimeSafeZoneWidget_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UImage* Decro; // 0x4c8
	UImage* Image_3; // 0x4d0
	UImage* Image_159; // 0x4d8
	UOverlay* SettingsWidgetContainer; // 0x4e0
	UTextBlock* Title; // 0x4e8
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x4f0
	FKSSettingsWidgetConfig SettingsWidgetConfig; // 0x4f8
	UKSSettingsInfoBase* SettingsInfo; // 0x508
	UKSSettingsWidget* SettingsWidget; // 0x510
};

struct UEngine : UObject {
	UFont* TinyFont; // 0x30
	FSoftObjectPath TinyFontName; // 0x38
	UFont* SmallFont; // 0x50
	FSoftObjectPath SmallFontName; // 0x58
	UFont* MediumFont; // 0x70
	FSoftObjectPath MediumFontName; // 0x78
	UFont* LargeFont; // 0x90
	FSoftObjectPath LargeFontName; // 0x98
	UFont* SubtitleFont; // 0xb0
	FSoftObjectPath SubtitleFontName; // 0xb8
	TArray<UFont*> AdditionalFonts; // 0xd0
	TArray<FString> AdditionalFontNames; // 0xe8
	UConsole* ConsoleClass; // 0xf8
	UShippingConsole* ShippingConsoleClass; // 0x100
	FSoftClassPath ConsoleClassName; // 0x108
	FSoftClassPath ShippingConsoleClassName; // 0x120
	UGameViewportClient* GameViewportClientClass; // 0x138
	FSoftClassPath GameViewportClientClassName; // 0x140
	ULocalPlayer* LocalPlayerClass; // 0x158
	FSoftClassPath LocalPlayerClassName; // 0x160
	AWorldSettings* WorldSettingsClass; // 0x178
	FSoftClassPath WorldSettingsClassName; // 0x180
	FSoftClassPath NavigationSystemClassName; // 0x198
	UNavigationSystemBase* NavigationSystemClass; // 0x1b0
	FSoftClassPath NavigationSystemConfigClassName; // 0x1b8
	UNavigationSystemConfig* NavigationSystemConfigClass; // 0x1d0
	FSoftClassPath AvoidanceManagerClassName; // 0x1d8
	UAvoidanceManager* AvoidanceManagerClass; // 0x1f0
	UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x1f8
	FSoftClassPath PhysicsCollisionHandlerClassName; // 0x200
	FSoftClassPath GameUserSettingsClassName; // 0x218
	UGameUserSettings* GameUserSettingsClass; // 0x230
	FSoftClassPath AIControllerClassName; // 0x238
	UGameUserSettings* GameUserSettings; // 0x250
	ALevelScriptActor* LevelScriptActorClass; // 0x258
	FSoftClassPath LevelScriptActorClassName; // 0x260
	FSoftClassPath DefaultBlueprintBaseClassName; // 0x278
	FSoftClassPath GameSingletonClassName; // 0x290
	UObject* GameSingleton; // 0x2a8
	FSoftClassPath AssetManagerClassName; // 0x2b0
	UAssetManager* AssetManager; // 0x2c8
	UTexture2D* DefaultTexture; // 0x2d0
	FSoftObjectPath DefaultTextureName; // 0x2d8
	UTexture* DefaultDiffuseTexture; // 0x2f0
	FSoftObjectPath DefaultDiffuseTextureName; // 0x2f8
	UTexture2D* DefaultBSPVertexTexture; // 0x310
	FSoftObjectPath DefaultBSPVertexTextureName; // 0x318
	UTexture2D* HighFrequencyNoiseTexture; // 0x330
	FSoftObjectPath HighFrequencyNoiseTextureName; // 0x338
	UTexture2D* DefaultBokehTexture; // 0x350
	FSoftObjectPath DefaultBokehTextureName; // 0x358
	UTexture2D* DefaultBloomKernelTexture; // 0x370
	FSoftObjectPath DefaultBloomKernelTextureName; // 0x378
	UMaterial* WireframeMaterial; // 0x390
	FString WireframeMaterialName; // 0x398
	UMaterial* DebugMeshMaterial; // 0x3a8
	FSoftObjectPath DebugMeshMaterialName; // 0x3b0
	UMaterial* EmissiveMeshMaterial; // 0x3c8
	FSoftObjectPath EmissiveMeshMaterialName; // 0x3d0
	UMaterial* LevelColorationLitMaterial; // 0x3e8
	FString LevelColorationLitMaterialName; // 0x3f0
	UMaterial* LevelColorationUnlitMaterial; // 0x400
	FString LevelColorationUnlitMaterialName; // 0x408
	UMaterial* LightingTexelDensityMaterial; // 0x418
	FString WorldNormalsMaterialName; // 0x420
	UMaterial* WorldNormalsMaterial; // 0x430
	FString LightingTexelDensityName; // 0x438
	UMaterial* ShadedLevelColorationLitMaterial; // 0x448
	FString ShadedLevelColorationLitMaterialName; // 0x450
	UMaterial* ShadedLevelColorationUnlitMaterial; // 0x460
	FString ShadedLevelColorationUnlitMaterialName; // 0x468
	UMaterial* RemoveSurfaceMaterial; // 0x478
	FSoftObjectPath RemoveSurfaceMaterialName; // 0x480
	UMaterial* VertexColorMaterial; // 0x498
	FString VertexColorMaterialName; // 0x4a0
	UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x4b0
	FString VertexColorViewModeMaterialName_ColorOnly; // 0x4b8
	UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x4c8
	FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x4d0
	UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x4e0
	FString VertexColorViewModeMaterialName_RedOnly; // 0x4e8
	UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x4f8
	FString VertexColorViewModeMaterialName_GreenOnly; // 0x500
	UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x510
	FString VertexColorViewModeMaterialName_BlueOnly; // 0x518
	FSoftObjectPath DebugEditorMaterialName; // 0x528
	UMaterial* ConstraintLimitMaterial; // 0x540
	UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x548
	UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis; // 0x550
	UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x558
	UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis; // 0x560
	UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x568
	UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis; // 0x570
	UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; // 0x578
	UMaterial* InvalidLightmapSettingsMaterial; // 0x580
	FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x588
	UMaterial* PreviewShadowsIndicatorMaterial; // 0x5a0
	FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x5a8
	UMaterial* ArrowMaterial; // 0x5c0
	UMaterialInstanceDynamic* ArrowMaterialYellow; // 0x5c8
	FSoftObjectPath ArrowMaterialName; // 0x5d0
	FLinearColor LightingOnlyBrightness; // 0x5e8
	TArray<FLinearColor> ShaderComplexityColors; // 0x5f8
	TArray<FLinearColor> QuadComplexityColors; // 0x608
	TArray<FLinearColor> LightComplexityColors; // 0x618
	TArray<FLinearColor> StationaryLightOverlapColors; // 0x628
	TArray<FLinearColor> LODColorationColors; // 0x638
	TArray<FLinearColor> HLODColorationColors; // 0x648
	TArray<FLinearColor> StreamingAccuracyColors; // 0x658
	float MaxPixelShaderAdditiveComplexityCount; // 0x668
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x66c
	float MinLightMapDensity; // 0x670
	float IdealLightMapDensity; // 0x674
	float MaxLightMapDensity; // 0x678
	char bRenderLightMapDensityGrayscale : 1; // 0x67c
	float RenderLightMapDensityGrayscaleScale; // 0x680
	float RenderLightMapDensityColorScale; // 0x684
	FLinearColor LightMapDensityVertexMappedColor; // 0x688
	FLinearColor LightMapDensitySelectedColor; // 0x698
	TArray<FStatColorMapping> StatColorMappings; // 0x6a8
	UPhysicalMaterial* DefaultPhysMaterial; // 0x6b8
	FSoftObjectPath DefaultPhysMaterialName; // 0x6c0
	TArray<FGameNameRedirect> ActiveGameNameRedirects; // 0x6d8
	TArray<FClassRedirect> ActiveClassRedirects; // 0x6e8
	TArray<FPluginRedirect> ActivePluginRedirects; // 0x6f8
	TArray<FStructRedirect> ActiveStructRedirects; // 0x708
	UTexture2D* PreIntegratedSkinBRDFTexture; // 0x718
	FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x720
	UTexture2D* HirezPreIntegratedSkinBRDFTexture; // 0x738
	FSoftObjectPath HirezPreIntegratedSkinBRDFTextureName; // 0x740
	UTexture2D* HirezPreIntegratedShadowTexture; // 0x758
	FSoftObjectPath HirezPreIntegratedShadowTextureName; // 0x760
	UTexture2D* BlueNoiseTexture; // 0x778
	FSoftObjectPath BlueNoiseTextureName; // 0x780
	UTexture2D* MiniFontTexture; // 0x798
	FSoftObjectPath MiniFontTextureName; // 0x7a0
	UTexture* WeightMapPlaceholderTexture; // 0x7b8
	FSoftObjectPath WeightMapPlaceholderTextureName; // 0x7c0
	UTexture2D* LightMapDensityTexture; // 0x7d8
	FSoftObjectPath LightMapDensityTextureName; // 0x7e0
	UGameViewportClient* GameViewport; // 0x800
	TArray<FString> DeferredCommands; // 0x808
	int32_t TickCycles; // 0x818
	int32_t GameCycles; // 0x81c
	int32_t ClientCycles; // 0x820
	float NearClipPlane; // 0x824
	char bStreamTexturesDuringLoadScreen : 1; // 0x828
	char bHardwareSurveyEnabled : 1; // 0x828
	char bSubtitlesEnabled : 1; // 0x828
	char bSubtitlesForcedOff : 1; // 0x828
	int32_t MaximumLoopIterationCount; // 0x82c
	char bCanBlueprintsTickByDefault : 1; // 0x830
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x830
	char bAllowMultiThreadedAnimationUpdate : 1; // 0x830
	char bEnableEditorPSysRealtimeLOD : 1; // 0x830
	char bSmoothFrameRate : 1; // 0x830
	char bUseFixedFrameRate : 1; // 0x830
	float FixedFrameRate; // 0x834
	FFloatRange SmoothedFrameRateRange; // 0x838
	UEngineCustomTimeStep* CustomTimeStep; // 0x848
	FSoftClassPath CustomTimeStepClassName; // 0x870
	UTimecodeProvider* TimecodeProvider; // 0x888
	FSoftClassPath TimecodeProviderClassName; // 0x8b0
	bool bGenerateDefaultTimecode; // 0x8c8
	FFrameRate GenerateDefaultTimecodeFrameRate; // 0x8cc
	float GenerateDefaultTimecodeFrameDelay; // 0x8d4
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x8d8
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x8dc
	char bShouldGenerateLowQualityLightmaps : 1; // 0x8e0
	FColor C_WorldBox; // 0x8e4
	FColor C_BrushWire; // 0x8e8
	FColor C_AddWire; // 0x8ec
	FColor C_SubtractWire; // 0x8f0
	FColor C_SemiSolidWire; // 0x8f4
	FColor C_NonSolidWire; // 0x8f8
	FColor C_WireBackground; // 0x8fc
	FColor C_ScaleBoxHi; // 0x900
	FColor C_VolumeCollision; // 0x904
	FColor C_BSPCollision; // 0x908
	FColor C_OrthoBackground; // 0x90c
	FColor C_Volume; // 0x910
	FColor C_BrushShape; // 0x914
	float StreamingDistanceFactor; // 0x918
	FDirectoryPath GameScreenshotSaveDirectory; // 0x920
	ETransitionType TransitionType; // 0x930
	FString TransitionDescription; // 0x938
	FString TransitionGameMode; // 0x948
	float MeshLODRange; // 0x958
	char bAllowMatureLanguage : 1; // 0x95c
	float CameraRotationThreshold; // 0x960
	float CameraTranslationThreshold; // 0x964
	float PrimitiveProbablyVisibleTime; // 0x968
	float MaxOcclusionPixelsFraction; // 0x96c
	char bPauseOnLossOfFocus : 1; // 0x970
	int32_t MaxParticleResize; // 0x974
	int32_t MaxParticleResizeWarn; // 0x978
	TArray<FDropNoteInfo> PendingDroppedNotes; // 0x980
	float NetClientTicksPerSecond; // 0x990
	float DisplayGamma; // 0x994
	float MinDesiredFrameRate; // 0x998
	FLinearColor DefaultSelectedMaterialColor; // 0x99c
	FLinearColor SelectedMaterialColor; // 0x9ac
	FLinearColor SelectionOutlineColor; // 0x9bc
	FLinearColor SubduedSelectionOutlineColor; // 0x9cc
	FLinearColor SelectedMaterialColorOverride; // 0x9dc
	bool bIsOverridingSelectedColor; // 0x9ec
	char bEnableOnScreenDebugMessages : 1; // 0x9f0
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0x9f0
	char bSuppressMapWarnings : 1; // 0x9f0
	char bDisableAILogging : 1; // 0x9f0
	uint32_t bEnableVisualLogRecordingOnStart; // 0x9f4
	int32_t ScreenSaverInhibitorSemaphore; // 0x9fc
	char bLockReadOnlyLevels : 1; // 0xa00
	FString ParticleEventManagerClassPath; // 0xa08
	float SelectionHighlightIntensity; // 0xa18
	float BSPSelectionHighlightIntensity; // 0xa1c
	float SelectionHighlightIntensityBillboards; // 0xa20
	TArray<FNetDriverDefinition> NetDriverDefinitions; // 0xc70
	TArray<FString> ServerActors; // 0xc80
	TArray<FString> RuntimeServerActors; // 0xc90
	float NetErrorLogInterval; // 0xca0
	char bStartedLoadMapMovie : 1; // 0xca4
	int32_t NextWorldContextHandle; // 0xcc0
};

struct UAkDurationCallbackInfo : UAkEventCallbackInfo {
	float Duration; // 0x38
	float EstimatedDuration; // 0x3c
	int32_t AudioNodeID; // 0x40
	int32_t MediaID; // 0x44
	bool bStreaming; // 0x48
};

struct UWBP_SettingsPage_C : UKSSettingsPage {
	FPointerToUberGraphFrame UberGraphFrame; // 0x540
	UScrollBox* PageScrollBox; // 0x548
	UVerticalBox* SettingsGroupBox; // 0x550
	float StartTranslationXAnim; // 0x558
	float StartOpacityAnim; // 0x55c
	float AnimPlayTime; // 0x560
};

struct UWBP_RadialMenuHighlight_C : UUserWidget {
	UWBP_RadialMenuEntry_Divider_Highlight_C* DividerLeft; // 0x238
	UWBP_RadialMenuEntry_Divider_Highlight_C* DividerRight; // 0x240
	UImage* Highlight; // 0x248
};

struct UAnimBoneCompressionSettings : UObject {
	TArray<UAnimBoneCompressionCodec*> Codecs; // 0x28
};

struct UKSSettingsPageConfigAsset : UDataAsset {
	TArray<UKSSettingsSectionConfigAsset*> SettingsSectionConfigs; // 0x30
	FText PageName; // 0x40
	TMap<FString, FText> HeadingByPlatform; // 0x58
};

struct UARPlaneGeometry : UARTrackedGeometry {
	EARPlaneOrientation Orientation; // 0xe8
	FVector Center; // 0xec
	FVector Extent; // 0xf8
	UARPlaneGeometry* SubsumedBy; // 0x118
};

struct UWBP_ReportMenuCommentField_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* bg_fill; // 0x530
	UImage* bg_stroke; // 0x538
	UMultiLineEditableText* EditableText; // 0x540
	UAkAudioEvent* HoverReportMenuCommentFieldSFX; // 0x548
};

struct UKSWeaponAsset_Pierce : UKSWeaponAsset_WithProjectile {
	float DamageScalarAfterWalls; // 0x988
	TSoftClassPtr<UObject> PierceClass; // 0x990
};

struct AWorldSettings : AInfo {
	int32_t VisibilityCellSize; // 0x228
	EVisibilityAggressiveness VisibilityAggressiveness; // 0x22c
	char bPrecomputeVisibility : 1; // 0x22d
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x22d
	char bEnableWorldBoundsChecks : 1; // 0x22d
	char bEnableNavigationSystem : 1; // 0x22d
	char bEnableAISystem : 1; // 0x22d
	char bEnableWorldComposition : 1; // 0x22d
	char bUseClientSideLevelStreamingVolumes : 1; // 0x22d
	char bEnableWorldOriginRebasing : 1; // 0x22d
	char bWorldGravitySet : 1; // 0x22e
	char bGlobalGravitySet : 1; // 0x22e
	char bMinimizeBSPSections : 1; // 0x22e
	char bForceNoPrecomputedLighting : 1; // 0x22e
	char bHighPriorityLoading : 1; // 0x22e
	char bHighPriorityLoadingLocal : 1; // 0x22e
	char bOverrideDefaultBroadphaseSettings : 1; // 0x22e
	UNavigationSystemConfig* NavigationSystemConfig; // 0x230
	UNavigationSystemConfig* NavigationSystemConfigOverride; // 0x238
	float WorldToMeters; // 0x240
	float KillZ; // 0x244
	UDamageType* KillZDamageType; // 0x248
	float WorldGravityZ; // 0x250
	float GlobalGravityZ; // 0x254
	ADefaultPhysicsVolume* DefaultPhysicsVolumeClass; // 0x258
	UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x260
	AGameModeBase* DefaultGameMode; // 0x268
	AGameNetworkManager* GameNetworkManagerClass; // 0x270
	int32_t PackedLightAndShadowMapTextureSize; // 0x278
	FVector DefaultColorScale; // 0x27c
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x288
	float GlobalDistanceFieldViewDistance; // 0x28c
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x290
	FReverbSettings DefaultReverbSettings; // 0x298
	FInteriorSettings DefaultAmbientZoneSettings; // 0x2b8
	float MonoCullingDistance; // 0x2dc
	USoundMix* DefaultBaseSoundMix; // 0x2e0
	float TimeDilation; // 0x2e8
	float MatineeTimeDilation; // 0x2ec
	float DemoPlayTimeDilation; // 0x2f0
	float MinGlobalTimeDilation; // 0x2f4
	float MaxGlobalTimeDilation; // 0x2f8
	float MinUndilatedFrameTime; // 0x2fc
	float MaxUndilatedFrameTime; // 0x300
	FBroadphaseSettings BroadphaseSettings; // 0x304
	APlayerState* Pauser; // 0x348
	TArray<FNetViewer> ReplicationViewers; // 0x350
	TArray<UAssetUserData*> AssetUserData; // 0x360
	APlayerState* PauserPlayerState; // 0x370
	int32_t MaxNumberOfBookmarks; // 0x378
	UBookmarkBase* DefaultBookmarkClass; // 0x380
	TArray<UBookmarkBase*> BookmarkArray; // 0x388
	UBookmarkBase* LastBookmarkClass; // 0x398
};

struct UMaterial : UMaterialInterface {
	UPhysicalMaterial* PhysMaterial; // 0x88
	UPhysicalMaterialMask* PhysMaterialMask; // 0x90
	UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0x98
	FScalarMaterialInput Metallic; // 0xd8
	FScalarMaterialInput Specular; // 0xec
	FScalarMaterialInput Anisotropy; // 0x100
	FVectorMaterialInput Normal; // 0x114
	FVectorMaterialInput Tangent; // 0x128
	FColorMaterialInput EmissiveColor; // 0x13c
	EMaterialDomain MaterialDomain; // 0x150
	EBlendMode BlendMode; // 0x151
	EDecalBlendMode DecalBlendMode; // 0x152
	EMaterialDecalResponse MaterialDecalResponse; // 0x153
	EMaterialShadingModel ShadingModel; // 0x154
	char bCastDynamicShadowAsMasked : 1; // 0x155
	FMaterialShadingModelField ShadingModels; // 0x156
	float OpacityMaskClipValue; // 0x158
	FVectorMaterialInput WorldPositionOffset; // 0x15c
	FScalarMaterialInput Refraction; // 0x170
	FMaterialAttributesInput MaterialAttributes; // 0x184
	FScalarMaterialInput PixelDepthOffset; // 0x19c
	FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x1b0
	char bEnableTranslucencyAfterRefraction : 1; // 0x1c4
	char bEnableSeparateTranslucency : 1; // 0x1c8
	char bEnableResponsiveAA : 1; // 0x1c8
	char bScreenSpaceReflections : 1; // 0x1c8
	char bContactShadows : 1; // 0x1c8
	char TwoSided : 1; // 0x1c8
	char DitheredLODTransition : 1; // 0x1c8
	char DitherOpacityMask : 1; // 0x1c8
	char bAllowNegativeEmissiveColor : 1; // 0x1c8
	ETranslucencyLightingMode TranslucencyLightingMode; // 0x1c9
	char bEnableMobileSeparateTranslucency : 1; // 0x1ca
	int32_t NumCustomizedUVs; // 0x1cc
	float TranslucencyDirectionalLightingIntensity; // 0x1d0
	float TranslucentShadowDensityScale; // 0x1d4
	float TranslucentSelfShadowDensityScale; // 0x1d8
	float TranslucentSelfShadowSecondDensityScale; // 0x1dc
	float TranslucentSelfShadowSecondOpacity; // 0x1e0
	float TranslucentBackscatteringExponent; // 0x1e4
	FLinearColor TranslucentMultipleScatteringExtinction; // 0x1e8
	float TranslucentShadowStartOffset; // 0x1f8
	char bDisableDepthTest : 1; // 0x1fc
	char bShouldRenderTranslucentOutline : 1; // 0x1fc
	char bWriteOnlyAlpha : 1; // 0x1fc
	char bGenerateSphericalParticleNormals : 1; // 0x1fc
	char bTangentSpaceNormal : 1; // 0x1fc
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x1fc
	char bBlockGI : 1; // 0x1fc
	char bUsedAsSpecialEngineMaterial : 1; // 0x1fc
	char bUsedWithSkeletalMesh : 1; // 0x1fd
	char bUsedWithVertexCurvature : 1; // 0x1fd
	char bUsedWithBlurredNormals : 1; // 0x1fd
	char bUsedWithEditorCompositing : 1; // 0x1fd
	char bUsedWithParticleSprites : 1; // 0x1fd
	char bUsedWithBeamTrails : 1; // 0x1fd
	char bUsedWithMeshParticles : 1; // 0x1fd
	char bUsedWithNiagaraSprites : 1; // 0x1fd
	char bUsedWithNiagaraRibbons : 1; // 0x1fe
	char bUsedWithNiagaraMeshParticles : 1; // 0x1fe
	char bUsedWithGeometryCache : 1; // 0x1fe
	char bUsedWithStaticLighting : 1; // 0x1fe
	char bUsedWithMorphTargets : 1; // 0x1fe
	char bUsedWithSplineMeshes : 1; // 0x1fe
	char bUsedWithInstancedStaticMeshes : 1; // 0x1fe
	char bUsedWithGeometryCollections : 1; // 0x1fe
	char bUsesDistortion : 1; // 0x1ff
	char bUsedWithClothing : 1; // 0x1ff
	char bUsedWithWater : 1; // 0x200
	char bUsedWithHairStrands : 1; // 0x200
	char bUsedWithLidarPointCloud : 1; // 0x200
	char bUsedWithUI : 1; // 0x204
	char bAutomaticallySetUsageInEditor : 1; // 0x204
	char bFullyRough : 1; // 0x204
	char bUseFullPrecision : 1; // 0x204
	char bUseLightmapDirectionality : 1; // 0x204
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x208
	char bUseHalfRateCheckerboardRendering : 1; // 0x208
	char bOnlyDirectionalLighting : 1; // 0x208
	char bUseHQForwardReflections : 1; // 0x20c
	char bUseHQForwardReflectionsOnLowEnd : 1; // 0x210
	char bUsePlanarForwardReflections : 1; // 0x214
	char bNormalCurvatureToRoughness : 1; // 0x214
	EMaterialTessellationMode D3D11TessellationMode; // 0x215
	char bEnableCrackFreeDisplacement : 1; // 0x216
	char bEnableAdaptiveTessellation : 1; // 0x216
	char AllowTranslucentCustomDepthWrites : 1; // 0x216
	char Wireframe : 1; // 0x216
	EMaterialShadingRate ShadingRate; // 0x217
	char bCanMaskedBeAssumedOpaque : 1; // 0x218
	char bIsMasked : 1; // 0x218
	char bIsPreviewMaterial : 1; // 0x218
	char bIsFunctionPreviewMaterial : 1; // 0x218
	char bUseMaterialAttributes : 1; // 0x218
	char bCastRayTracedShadows : 1; // 0x218
	char bUseTranslucencyVertexFog : 1; // 0x218
	char bIsSky : 1; // 0x218
	char bComputeFogPerPixel : 1; // 0x219
	char bOutputTranslucentVelocity : 1; // 0x219
	char bAllowDevelopmentShaderCompile : 1; // 0x219
	char bIsMaterialEditorStatsMaterial : 1; // 0x219
	EBlendableLocation BlendableLocation; // 0x21a
	char BlendableOutputAlpha : 1; // 0x21b
	char bEnableStencilTest : 1; // 0x21b
	EMaterialStencilCompare StencilCompare; // 0x21c
	char StencilRefValue; // 0x21d
	ERefractionMode RefractionMode; // 0x21e
	int32_t BlendablePriority; // 0x220
	char bIsBlendable : 1; // 0x224
	uint32_t UsageFlagWarnings; // 0x228
	float RefractionDepthBias; // 0x22c
	FGuid StateId; // 0x230
	float MaxDisplacement; // 0x240
	FMaterialCachedExpressionData CachedExpressionData; // 0x2d0
};

struct UMaterialExpressionFontSampleParameter : UMaterialExpressionFontSample {
	FName ParameterName; // 0x50
	FGuid ExpressionGUID; // 0x58
	FName Group; // 0x68
};

struct UMaterialExpressionReroute : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UMaterialFunctionInstance : UMaterialFunctionInterface {
	UMaterialFunctionInterface* Parent; // 0x40
	UMaterialFunctionInterface* Base; // 0x48
	TArray<FScalarParameterValue> ScalarParameterValues; // 0x50
	TArray<FVectorParameterValue> VectorParameterValues; // 0x60
	TArray<FTextureParameterValue> TextureParameterValues; // 0x70
	TArray<FFontParameterValue> FontParameterValues; // 0x80
	TArray<FStaticSwitchParameter> StaticSwitchParameterValues; // 0x90
	TArray<FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xa0
	TArray<FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xb0
};

struct UKSBTTask_SelectEvadePoint : UBTTaskNode {
	FBlackboardKeySelector EvadePointKey; // 0x70
	TArray<UAISense*> SensesToUse; // 0x98
	FKSPerceptionFilter PerceptionFilter; // 0xa8
	float Distance; // 0x298
};

struct UKSPlayerCardModuleBase : UKSWidget {
	UPUMG_PlayerInfo* AssignedPlayerInfo; // 0x520
};

struct UARFaceGeometry : UARTrackedGeometry {
	FVector LookAtTarget; // 0xe8
	bool bIsTracked; // 0xf4
	TMap<EARFaceBlendShape, float> BlendShapes; // 0xf8
};

struct AGeometryCollectionRenderLevelSetActor : AActor {
	UVolumeTexture* TargetVolumeTexture; // 0x220
	UMaterial* RayMarchMaterial; // 0x228
	float SurfaceTolerance; // 0x230
	float Isovalue; // 0x234
	bool Enabled; // 0x238
	bool RenderVolumeBoundingBox; // 0x239
};

struct UCompressedImageSequenceProtocol : UImageSequenceProtocol {
	int32_t CompressionQuality; // 0xd8
};

struct UKSAttachCompatRules_WeaponType : UKSAttachmentCompatRules {
	FGameplayTagContainer CompatibleWeaponTypes; // 0x28
};

struct AOnlineBeaconClient : AOnlineBeacon {
	AOnlineBeaconHostObject* BeaconOwner; // 0x250
	UNetConnection* BeaconConnection; // 0x258
	EBeaconConnectionState ConnectionState; // 0x260
};

struct UEnvQueryTest_Trace : UEnvQueryTest {
	FEnvTraceData TraceData; // 0x1f8
	FAIDataProviderBoolValue TraceFromContext; // 0x228
	FAIDataProviderFloatValue ItemHeightOffset; // 0x260
	FAIDataProviderFloatValue ContextHeightOffset; // 0x298
	UEnvQueryContext* Context; // 0x2d0
};

struct UMovieSceneColorSection : UMovieSceneSection {
	FMovieSceneFloatChannel RedCurve; // 0xe0
	FMovieSceneFloatChannel GreenCurve; // 0x180
	FMovieSceneFloatChannel BlueCurve; // 0x220
	FMovieSceneFloatChannel AlphaCurve; // 0x2c0
};

struct UWBP_PanelInteractive_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animClick; // 0x528
	UWidgetAnimation* animHover; // 0x530
	UImage* ClickBG; // 0x538
	UButton* HitTarget; // 0x540
	UImage* PanelBG; // 0x548
	UNamedSlot* PanelContent_3; // 0x550
	FLinearColor PanelColor; // 0x558
	FMargin ContentPadding; // 0x568
	FMulticastInlineDelegate OnBtnClicked; // 0x578
	FMulticastInlineDelegate OnBtnHovered; // 0x588
	FMulticastInlineDelegate OnBtnUnhovered; // 0x598
	bool bIsDisable; // 0x5a8
	bool bIsActive; // 0x5a9
	FLinearColor TintColor; // 0x5ac
	bool bColorOverride; // 0x5bc
	UAkAudioEvent* PanelInteractiveHoverSound; // 0x5c0
	UAkAudioEvent* PanelInteractiveClickSound; // 0x5c8
};

struct UInAppPurchaseQueryCallbackProxy : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct UAnimNotify_SkinSelectiveAkEvent : UAnimNotify_SelectiveAkEvent {
	FName SkinKeyword; // 0x50
};

struct UKSExpDisplayWidget : UKSViewedPawnWidget {
	bool bIsWaitingForNextQueue; // 0x550
};

struct ULiveLinkCurveRemapSettings : ULiveLinkSourceSettings {
	FLiveLinkCurveConversionSettings CurveConversionSettings; // 0x98
};

struct UKSActivityComponent_Job : UKSActivityComponent {
	TSoftObjectPtr<UKSJobItem> JobItem; // 0x30
};

struct UKSActivityRewardCondition_AimModeUsed : UKSActivityRewardCondition {
	TArray<EKSCharacterAimMode> MatchingAimModes; // 0x30
};

struct UKSPlayerMod_HipfireSprint : UKSPlayerMod {
	bool bCanHipfireSprint; // 0x330
	bool bCanReloadSprint; // 0x331
};

struct UNiagaraDataInterfaceNeighborGrid3D : UNiagaraDataInterfaceGrid3D {
	uint32_t MaxNeighborsPerVoxel; // 0xf0
};

struct UKSVehicleWheel : UVehicleWheel {
	TMap<EPhysicalSurface, UParticleSystem*> WheelEffectMap; // 0xf0
	UParticleSystemComponent* WheelParticleSystem; // 0x140
	FName AttachSocketOverrideName; // 0x148
	FName VehicleSpeedParticleParameter; // 0x150
	float EffectSpeedInterpolationAlpha; // 0x158
	float MinimumWheelEffectSpeed; // 0x15c
	float MaximumWheelEffectSpeed; // 0x160
};

struct ULiveLinkInstance : UAnimInstance {
	ULiveLinkRetargetAsset* CurrentRetargetAsset; // 0x268
};

struct UKSRangeEvaluator : UKSActorEvaluator {
	bool bShouldConsiderMaxDistance; // 0x28
	float MaxDistance; // 0x2c
	bool bShouldConsiderMinDistance; // 0x30
	float MinDistance; // 0x34
};

struct UKSChargeRuleComponent : UKSGameRuleComponent {
	bool bDefaultChargeOnRoundStarted; // 0xc8
	float ChargePerRound; // 0xcc
	bool bDefaultChargePerSecond; // 0xd0
	float ChargePerSecond; // 0xd4
	float ChargePerDown; // 0xd8
	float ChargePerElimination; // 0xdc
	float ChargePerAssist; // 0xe0
	float ChargePerRevive; // 0xe4
};

struct UKSBTTask_CopyActorLocation : UBTTaskNode {
	FBlackboardKeySelector ActorKey; // 0x70
	FBlackboardKeySelector LocationKey; // 0x98
};

struct UNiagaraSettings : UDeveloperSettings {
	TArray<FSoftObjectPath> AdditionalParameterTypes; // 0x38
	TArray<FSoftObjectPath> AdditionalPayloadTypes; // 0x48
	TArray<FSoftObjectPath> AdditionalParameterEnums; // 0x58
	FSoftObjectPath DefaultEffectType; // 0x68
	TArray<FText> QualityLevels; // 0x80
	UNiagaraEffectType* DefaultEffectTypePtr; // 0x90
};

struct AKSWorldSettings : APGame_WorldSettings {
	bool bUseLowDrainBatteryMode; // 0x3e0
	UParticleSystemPoolComponent* ParticleSystemPoolComponent; // 0x3e8
	UDecalPoolComponent* DecalPoolComponent; // 0x3f0
	UGunshotDecalPoolComponent* GunshotDecalPoolComponent; // 0x3f8
	UFootprintDecalPoolComponent* FootprintDecalPoolComponent; // 0x400
	USkeletalMeshPoolComponent* SkeletalMeshPoolComponent; // 0x408
	UStaticMeshPoolComponent* StaticMeshPoolComponent; // 0x410
	UTracerParticlePoolComponent* TracerParticlePoolComponent; // 0x418
	UTracerStaticMeshPoolComponent* TracerStaticMeshPoolComponent; // 0x420
	UAkPoolComponent* AkPoolComponent; // 0x428
	int32_t EchoRequestCount; // 0x430
	FString FriendlyAudioName; // 0x448
	FString FriendlyAchievementName; // 0x458
	TArray<FGameplayTag> MapTags; // 0x468
	TSoftClassPtr<UObject> AudioPlayerToSpawn; // 0x478
	UBakedOcclusionLUT* AudioOcclusionLUT; // 0x4a0
	TMap<FName, bool> BoolPropertyMap; // 0x4a8
	TMap<FName, int32_t> IntPropertyMap; // 0x4f8
	TMap<FName, float> FloatPropertyMap; // 0x548
};

struct UKSPlayerJoinTask : UObject {
	FMulticastInlineDelegate OnPlayerJoinTaskComplete; // 0x28
};

struct UKSBTTask_SetFloatOnBlackboard : UBTTask_BlackboardBase {
	float FloatValue; // 0x98
};

struct UWBP_QueueSelection_RegionSelectButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Image_229; // 0x528
	UImage* PromptImage; // 0x530
	USizeBox* PromptImageWrapper; // 0x538
	UTextBlock* SelectedRegion; // 0x540
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x548
	FMulticastInlineDelegate RegionSelectRequested; // 0x550
	bool ActiveAsButton; // 0x560
	PGAME_INPUT_STATE CachedInputState; // 0x561
	UAkAudioEvent* ClickInputChangeRegionSelBtnSFX; // 0x568
};

struct UParticleModuleCameraOffset : UParticleModuleCameraBase {
	FRawDistributionFloat CameraOffset; // 0x30
	char bSpawnTimeOnly : 1; // 0x60
	EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x64
};

struct AController : AActor {
	APlayerState* PlayerState; // 0x228
	FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x238
	FName StateName; // 0x248
	APawn* Pawn; // 0x250
	ACharacter* Character; // 0x260
	USceneComponent* TransformComponent; // 0x268
	FRotator ControlRotation; // 0x288
	char bAttachToPawn : 1; // 0x294
};

struct UParticleModuleOrbit : UParticleModuleOrbitBase {
	EOrbitChainMode ChainMode; // 0x38
	FRawDistributionVector OffsetAmount; // 0x40
	FOrbitOptions OffsetOptions; // 0x88
	FRawDistributionVector RotationAmount; // 0x90
	FOrbitOptions RotationOptions; // 0xd8
	FRawDistributionVector RotationRateAmount; // 0xe0
	FOrbitOptions RotationRateOptions; // 0x128
};

struct UWBP_ScoreboardDisconnectedSection_Lobby_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animOnHover; // 0x528
	UImage* Arrow; // 0x530
	UImage* ArrowBg_Default; // 0x538
	UImage* ArrowBG_Over; // 0x540
	UOverlay* ArrowContainer; // 0x548
	UOverlay* ArrowContainer_2; // 0x550
	UImage* Background_Default; // 0x558
	UImage* Background_Over; // 0x560
	UTextBlock* CountLabel; // 0x568
	UTextBlock* DisconnectedLabel; // 0x570
	UButton* HitArea; // 0x578
	UVerticalBox* PlayerContainer; // 0x580
	UWBP_ControllerPrompt_C* Prompt_2; // 0x588
	USizeBox* PromptContainer_2; // 0x590
	UScoreboardPlayerStats_Lobby_C* ScoreboardPlayerStats_Lobby; // 0x598
	UScoreboardPlayerStats_Lobby_C* ScoreboardPlayerStats_Lobby_2; // 0x5a0
	bool IsExpanded; // 0x5a8
	TArray<UScoreboardPlayerStats_Lobby_C*> Players; // 0x5b0
	FMulticastInlineDelegate OnClicked; // 0x5c0
	TArray<FPlayerEntryStats> playerStats; // 0x5d0
	TArray<FPlayerEntryStats> DiscPlayerStats; // 0x5e0
	FMulticastInlineDelegate OnPlayersChanged; // 0x5f0
	UPUMG_PlayerDataFactory* PlayerDataFactory; // 0x600
};

struct UWBP_Context_Menu_Prompt_C : UPUMG_ContextBarPrompt {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4d0
	UTextBlock* CycleActionText; // 0x4d8
	UCanvasPanel* CycleContextAction; // 0x4e0
	UWBP_ButtonArrow_C* CycleNext; // 0x4e8
	UWBP_KeyCallout_C* CycleNextCallout; // 0x4f0
	UWBP_ButtonArrow_C* CyclePrevious; // 0x4f8
	UWBP_KeyCallout_C* CyclePreviousCallout; // 0x500
	UWBP_KeyCallout_C* GamepadCallout; // 0x508
	UCanvasPanel* GamepadContainer; // 0x510
	UTextBlock* GamepadContextText; // 0x518
	UWBP_StandardButton_02_C* KBMButton; // 0x520
	UTextBlock* KBMButtonText; // 0x528
	UButton* KBMButtonWrapper; // 0x530
	UTextBlock* KBMContextText; // 0x538
	UWBP_StandardButton_02_C* KBMWithKeyButton; // 0x540
	UButton* KBMWithKeyWrapper; // 0x548
	UTextBlock* KeyText; // 0x550
	UBorder* KeyWrapper; // 0x558
	UCanvasPanel* StandardContextAction; // 0x560
	PGAME_INPUT_STATE CurrentInputState; // 0x568
	FMulticastInlineDelegate OnPromptClicked; // 0x570
	UAkAudioEvent* IsBackBtnOverrideSFX; // 0x580
	bool KBMWithKey; // 0x588
	UContextActionData* Data; // 0x590
};

struct AKSBuild_Shop : AKSBuild {
	TArray<UKSInteractionManager*> ShopperManagers; // 0x3a0
};

struct USpinBoxWidgetStyle : USlateWidgetStyleContainerBase {
	FSpinBoxStyle SpinBoxStyle; // 0x30
};

struct UAsyncTask_LoadXRDeviceVisComponent : UBlueprintAsyncActionBase {
	FMulticastInlineDelegate OnModelLoaded; // 0x30
	FMulticastInlineDelegate OnLoadFailure; // 0x40
	UPrimitiveComponent* SpawnedComponent; // 0x58
};

struct UMaterialExpressionOneMinus : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UInterpTrackInstAkAudioEvent : UInterpTrackInst {
	float LastUpdatePosition; // 0x28
};

struct UMaterialExpressionAppendVector : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
};

struct UGeometryCacheCodecBase : UObject {
	TArray<int32_t> TopologyRanges; // 0x28
};

struct UJobSelectionEntryDetails : UObject {
	FJobSelectionEntry JobEntry; // 0x28
	UPUMG_StoreItem* StoreItem; // 0x50
	bool AllowIfUnowned; // 0x58
};

struct UWBP_SettingsCarousel_Light_Indicator_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* LightUp; // 0x240
	UImage* MarkerImage; // 0x248
	bool bIsLitUp; // 0x250
};

struct UWBP_RogueListing_C : UKSJobSelectionWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UGridPanel* JobSelectionGrid; // 0x528
	UOverlay* JobSelectionGridOverlay; // 0x530
	UWBP_ThrobberHorizontal_C* Loading; // 0x538
	UVerticalBox* LoadingWrapper; // 0x540
	URetainerBox* Mask; // 0x548
	USizeBox* OuterSizeBox; // 0x550
	USizeBox* RogueGridSizeBox; // 0x558
	UHorizontalBox* RoleFilters; // 0x560
	UScrollBox* ScrollBox_1; // 0x568
	UWBP_RogueListingOfferPanel_C* WBP_RogueListingOfferPanel; // 0x570
	TArray<UWBP_JobGeneralButton_C*> JobButtons; // 0x578
	FMulticastInlineDelegate OnJobSelected; // 0x588
	FMulticastInlineDelegate OnJobListReady; // 0x598
	AKSLobbyCharacter* MercSelectionCharacter; // 0x5a8
	int32_t ValidJobs; // 0x5b0
	TArray<UKSJobRole*> JobRoles; // 0x5b8
	UKSItem* CurrentlyHoveredJob; // 0x5c8
	UKSMercManager* MercManager; // 0x5d0
	bool bCurrentlyHoveredRogueOwned; // 0x5d8
	int32_t GRID WIDTH; // 0x5dc
	UKSJobItem* SelectedJob; // 0x5e0
	bool PreserveSelectedJobOnHide; // 0x5e8
	float DLC_OFFSET; // 0x5ec
	FVector2D GRID_SIZE; // 0x5f0
	FVector2D MASK_PADDING; // 0x5f8
	UPUMG_StoreItem* AdStoreOffer; // 0x600
};

struct ANavigationObjectBase : AActor {
	UCapsuleComponent* CapsuleComponent; // 0x228
	UBillboardComponent* GoodSprite; // 0x230
	UBillboardComponent* BadSprite; // 0x238
	char bIsPIEPlayerStart : 1; // 0x240
};

struct UTextBlockWidgetStyle : USlateWidgetStyleContainerBase {
	FTextBlockStyle TextBlockStyle; // 0x30
};

struct UPUMG_SettingsDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnPopulateUserSettings; // 0x38
	FMulticastInlineDelegate OnPopulateUserBindings; // 0x48
	FMulticastInlineDelegate OnPopulateUserGPBindings; // 0x58
	FMulticastInlineDelegate OnPostLogin; // 0x68
	FMulticastInlineDelegate OnPostLogoff; // 0x78
	FMulticastInlineDelegate OnSettingValueChanged; // 0x88
};

struct UMaterialExpressionCeil : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UMaterialExpressionDynamicParameter : UMaterialExpression {
	TArray<FString> ParamNames; // 0x40
	FLinearColor DefaultValue; // 0x50
	uint32_t ParameterIndex; // 0x60
};

struct UKSZiplineAnimInst : UKSCharacterAnimInst {
	float WheelSpeedModifier; // 0x10f0
	float WheelCurrentSpeed; // 0x10f4
	FRotator UpperWheelRotator; // 0x10f8
	FRotator LowerWheelRotator; // 0x1104
	FRotator ZiplineTopLockRot; // 0x1110
	float ZiplineTopLockRotModifierPitch; // 0x111c
	float ZiplineTopLockRotModifierRoll; // 0x1120
	float ZiplineTopLockRotModifierYaw; // 0x1124
};

struct AKSWeaponAssetDrop : AKSItemDrop {
	FMulticastInlineDelegate OnProjectileSpawned; // 0x3b8
	AKSProjectile* ReturnProjectile; // 0x3e0
	UKSWeaponComponent* WeaponComponent; // 0x3f0
	UKSWeaponAsset* WeaponAsset; // 0x3f8
	FKSEquipmentId WeaponComponentEquipmentId; // 0x400
	UKSWeaponAsset* CachedWeaponAsset; // 0x408
	FBundledAmmoInfo BundledAmmo; // 0x4f8
	FKSWeaponDropAttachmentContainer AttachmentContainer; // 0x518
	bool bAttachWeaponComponentOnDrop; // 0x640
	FKSEquipmentContainer EquipmentContainer; // 0x648
	float ReleasedCachedTimeSeconds; // 0x870
	float CosmeticZOffset; // 0x874
};

struct ULightMapVirtualTexture2D : UTexture2D {
	TArray<int8_t> TypeToLayer; // 0xe8
};

struct APUMG_HUD : AHUD {
	FMulticastInlineDelegate OnInputStateChanged; // 0x310
	TMap<int64_t, FMulticastInlineDelegate> PlayerDataUpdated; // 0x320
	UPUMG_InputManager* InputManager; // 0x370
	UPUMG_ViewManager* ViewManager; // 0x378
	UPUMG_InputManager* InputManagerClass; // 0x380
	UPUMG_UISoundTheme* SoundTheme; // 0x388
};

struct UScoreboardOverview_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ScoreboardDisconnectedSection_Lobby_C* DisconnectedPlayers; // 0x528
	UImage* Eliminated_Enemy; // 0x530
	UImage* Objective_Enemy; // 0x538
	UScoreboardTeamSection_Lobby_C* ScoreboardTeamSection_Lobby; // 0x540
	UScrollBox* ScrollBox_1; // 0x548
	UVerticalBox* TeamSections; // 0x550
	UImage* TimeExpired_Enemy; // 0x558
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x560
	UWBP_RoundRecap_C* WBP_RoundRecap; // 0x568
	UPUMG_PlayerDataFactory* PlayerDataFactory; // 0x570
	TArray<UScoreboardTeamSection_Lobby_C*> teams; // 0x578
	bool DidWin; // 0x588
	FMulticastInlineDelegate OnTeamsChanged; // 0x590
};

struct UPoseAsset : UAnimationAsset {
	FPoseDataContainer PoseContainer; // 0x80
	bool bAdditivePose; // 0x110
	int32_t BasePoseIndex; // 0x114
	FName RetargetSource; // 0x118
};

struct UMaterialExpressionSkyAtmosphereLightIlluminance : UMaterialExpression {
	int32_t LightIndex; // 0x40
	FExpressionInput WorldPosition; // 0x44
};

struct USourceEffectPhaserPreset : USoundEffectSourcePreset {
	FSourceEffectPhaserSettings Settings; // 0x78
};

struct UKSEmoteCosmeticSubInstance_Play : UKSEmoteCosmeticSubInstance {
	float MinimumEmoteLoopDuration; // 0x28
};

struct UMaterialExpressionConstantBiasScale : UMaterialExpression {
	FExpressionInput Input; // 0x40
	float Bias; // 0x54
	float Scale; // 0x58
};

struct UKSJobSelectionRules : UObject {
	EJobPickExclusivity PickExclusivity; // 0x28
	EJobSelectProxyRules PickProxyRules; // 0x29
	bool bProxyAlwaysCompletesPicks; // 0x2a
	bool bCanAbstainFromBan; // 0x2b
	EJobBanEffects BanEffects; // 0x2c
	EJobSelectProxyRules BanProxyRules; // 0x2d
	bool bProxyAlwaysCompletesBans; // 0x2e
	EJobSelectProxyRules LockProxyRules; // 0x2f
	bool bProxyAlwaysCompletesLocks; // 0x30
	EKSBlacklistOrWhitelist BlacklistOrWhitelist; // 0x31
	TArray<TSoftObjectPtr<UKSJobItem>> FilteredJobs; // 0x38
	float ReserveTime; // 0x48
	float ReselectTime; // 0x4c
	bool bRequireJobOwnership; // 0x50
	bool bShowOnUnavailableJobsOnUI; // 0x51
	FGameplayTagQuery AIJobSelectionQuery; // 0x58
	UJobCollection* JobCollection; // 0xa0
	TSoftObjectPtr<UKSJobItem> RandomJob; // 0xa8
	bool bAllowRandomJob; // 0xd0
};

struct UKSActivityRewardCondition_EliminationsAchieved : UKSActivityRewardCondition {
	int32_t MinEliminationsAchieved; // 0x30
	int32_t MaxEliminationsAchieved; // 0x34
};

struct UBaseBrushTool : UMeshSurfacePointTool {
	UBrushBaseProperties* BrushProperties; // 0xc0
	bool bInBrushStroke; // 0xc8
	FBrushStampData LastBrushStamp; // 0xcc
	TSoftClassPtr<UObject> PropertyClass; // 0x188
	UBrushStampIndicator* BrushStampIndicator; // 0x1b0
};

struct USpringArmComponent : USceneComponent {
	float TargetArmLength; // 0x208
	FVector SocketOffset; // 0x20c
	FVector TargetOffset; // 0x218
	float ProbeSize; // 0x224
	ECollisionChannel ProbeChannel; // 0x228
	char bDoCollisionTest : 1; // 0x22c
	char bUsePawnControlRotation : 1; // 0x22c
	char bInheritPitch : 1; // 0x22c
	char bInheritYaw : 1; // 0x22c
	char bInheritRoll : 1; // 0x22c
	char bEnableCameraLag : 1; // 0x22c
	char bEnableCameraRotationLag : 1; // 0x22c
	char bUseCameraLagSubstepping : 1; // 0x22c
	char bDrawDebugLagMarkers : 1; // 0x22d
	float CameraLagSpeed; // 0x230
	float CameraRotationLagSpeed; // 0x234
	float CameraLagMaxTimeStep; // 0x238
	float CameraLagMaxDistance; // 0x23c
};

struct UKSDurationBarContainer : UKSViewedPawnWidget {
	UKSActiveDurationBar* DurationBarClass; // 0x550
	TArray<UKSActiveDurationBar*> DurationBars; // 0x558
};

struct AKSPlayerShopZone : AActor {
	FMulticastInlineDelegate OnInShopZoneChanged; // 0x220
};

struct URadialIntMask : UFieldNodeInt {
	float Radius; // 0xb0
	FVector Position; // 0xb4
	int32_t InteriorValue; // 0xc0
	int32_t ExteriorValue; // 0xc4
	ESetMaskConditionType SetMaskCondition; // 0xc8
};

struct UNiagaraParameterCollectionInstance : UObject {
	UNiagaraParameterCollection* Collection; // 0x28
	TArray<FNiagaraVariable> OverridenParameters; // 0x30
	FNiagaraParameterStore ParameterStorage; // 0x40
};

struct ACableActor : AActor {
	UCableComponent* CableComponent; // 0x220
};

struct UInAppPurchaseQueryCallbackProxy2 : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFailure; // 0x38
};

struct UKSActivityRewardCondition_TotalCashEarned : UKSActivityRewardCondition {
	int32_t MinCashEarned; // 0x30
	int32_t MaxCashEarned; // 0x34
};

struct UAnimSingleNodeInstance : UAnimInstance {
	UAnimationAsset* CurrentAsset; // 0x268
	FDelegate PostEvaluateAnimEvent; // 0x270
};

struct UKSModInst_OverTimeEffect : UKSPlayerModInstance {
	UKSTimerComponent* EffectTimer; // 0x1b8
	float EffectTickPeriod; // 0x1c0
	int32_t EffectTickCount; // 0x1c4
	bool bShouldImmediatelyEffect; // 0x1c8
	bool bResetTickCountOnStackIncrease; // 0x1c9
	int32_t TickCount; // 0x1cc
};

struct UWBP_SimulmediaRewardsScreen_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* AnimOnShown; // 0x528
	UWBP_KeyCallout_C* BackCallout; // 0x530
	UHorizontalBox* BackPrompt; // 0x538
	UWBP_StandardButtonLarge_C* CloseButtonGamepad; // 0x540
	UVerticalBox* Content; // 0x548
	UBorder* GamepadCallouts; // 0x550
	UImage* Gradient; // 0x558
	UImage* Image; // 0x560
	UImage* Image_142; // 0x568
	UImage* Image_386; // 0x570
	UBorder* NoAdsAvailableMessage; // 0x578
	UBorder* PendingOverlay; // 0x580
	UTextBlock* PendingOverlayText; // 0x588
	UOverlay* ProgressReward_Booster; // 0x590
	UImage* ProgressRewardBar; // 0x598
	UKSAsyncImage* ProgressRewardIcon; // 0x5a0
	UTextBlock* ProgressRewardText; // 0x5a8
	UWrapBox* RewardContainer; // 0x5b0
	UKSAsyncImage* RewardIcon; // 0x5b8
	UWidgetSwitcher* RewardSwitcher; // 0x5c0
	UImage* ScanLines; // 0x5c8
	UWBP_StandardButtonLarge_C* SubmitButton; // 0x5d0
	UOverlay* TitleDisplay; // 0x5d8
	UOverlay* WatchReward_Reputation; // 0x5e0
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x5e8
	UWBP_SimulmediaRewardItem_C* WBP_SimulmediaRewardItem; // 0x5f0
	UWBP_SimulmediaRewardItem_C* WBP_SimulmediaRewardItem_2; // 0x5f8
	UWBP_SimulmediaRewardItem_C* WBP_SimulmediaRewardItem_3; // 0x600
	UWBP_SimulmediaRewardItem_C* WBP_SimulmediaRewardItem_4; // 0x608
	UWidgetSwitcher* WidgetSwitcher_1; // 0x610
};

struct UMaterialExpressionLightmassReplace : UMaterialExpression {
	FExpressionInput Realtime; // 0x40
	FExpressionInput Lightmass; // 0x54
};

struct UAchievementWriteCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UKSWeaponAttachmentInstance : UActorComponent {
	AKSWeapon* WeaponOwner; // 0xd0
	UKSWeaponAttachmentCosmeticInst* AttachmentCosmeticComponent; // 0xd8
	FKSEquipRepInfo AttachPoint; // 0xf8
	UKSWeaponAttachment* AttachmentAsset; // 0x120
	bool bPersistsOnWeaponDrop; // 0x128
};

struct UInteractiveToolManager : UObject {
	UInteractiveTool* ActiveLeftTool; // 0x30
	UInteractiveTool* ActiveRightTool; // 0x38
	TMap<FString, UInteractiveToolBuilder*> ToolBuilders; // 0x90
};

struct UKSPlayerMod_PlayerIcon : UKSPlayerMod {
	FKSPlayerModOverridePropertyStatBool ShowPlayerIconToEnemies; // 0x330
	FKSPlayerModOverridePropertyStatFloat PlayerIconRange; // 0x33c
};

struct ULiveLinkComponentSettings : UObject {
	TMap<ULiveLinkRole*, ULiveLinkControllerBase*> DefaultControllerForRole; // 0x28
};

struct UAnimationSharingStateProcessor : UObject {
	TSoftObjectPtr<UEnum> AnimationStateEnum; // 0x28
};

struct UKSActivityRewardCondition_Ziplining : UKSActivityRewardCondition {
	bool IsZipLining; // 0x30
	bool CheckInstigator; // 0x31
	bool CheckTarget; // 0x32
};

struct UKSBoost : UKSCurrency {
	EBoostCategory BoostCategory; // 0x2d0
	EBoostDurationCategory BoostDurationCategory; // 0x2d1
	bool IsActiveBooster; // 0x2d2
	TArray<FString> BonusProgressionKeys; // 0x2d8
};

struct UEndTurnCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UParticleModule : UObject {
	char bSpawnModule : 1; // 0x28
	char bUpdateModule : 1; // 0x28
	char bFinalUpdateModule : 1; // 0x28
	char bUpdateForGPUEmitter : 1; // 0x28
	char bCurvesAsColor : 1; // 0x28
	char b3DDrawMode : 1; // 0x28
	char bSupported3DDrawMode : 1; // 0x28
	char bEnabled : 1; // 0x28
	char bEditable : 1; // 0x29
	char LODDuplicate : 1; // 0x29
	char bSupportsRandomSeed : 1; // 0x29
	char bRequiresLoopingNotification : 1; // 0x29
	char LODValidity; // 0x2a
};

struct UParticleModuleLocation_Seeded : UParticleModuleLocation {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x80
};

struct UKSOutOfBoundsManager : UActorComponent {
	float OutOfBoundsWarningTime; // 0xc4
	float OutOfBoundsTickDamageTime; // 0xc8
	float OutOfBoundsTickDamage; // 0xcc
	float TimeSpentGroundedAllowedBeforeSave; // 0xd0
	UDamageType* OutOfBoundsDamageType; // 0xd8
	bool bAllowSaving; // 0xe0
	UAkAudioEvent* AnnouncerLineOnSaved; // 0xe8
	UAkAudioEvent* AnnouncerLineOnEntered; // 0xf0
	int32_t CharacterOverlaps; // 0xf8
	FTimerHandle CharacterWarningTimer; // 0x100
	FTimerHandle CharacterDamageTickTimer; // 0x108
	int32_t VehicleOverlaps; // 0x110
	FTimerHandle VehicleWarningTimer; // 0x118
	FTimerHandle VehicleDamageTickTimer; // 0x120
	UPrimitiveComponent* OverlapCheckComponent; // 0x128
	FTimerHandle TimeSpentGroundedTimerHandle; // 0x130
	float DefaultRecoveryUseTime; // 0x138
};

struct UGeometryCollection : UObject {
	TArray<UMaterialInterface*> Materials; // 0x30
	ECollisionTypeEnum CollisionType; // 0x40
	EImplicitTypeEnum ImplicitType; // 0x41
	int32_t MinLevelSetResolution; // 0x44
	int32_t MaxLevelSetResolution; // 0x48
	int32_t MinClusterLevelSetResolution; // 0x4c
	int32_t MaxClusterLevelSetResolution; // 0x50
	float CollisionObjectReductionPercentage; // 0x54
	bool bMassAsDensity; // 0x58
	float Mass; // 0x5c
	float MinimumMassClamp; // 0x60
	float CollisionParticlesFraction; // 0x64
	int32_t MaximumCollisionParticles; // 0x68
	TArray<FGeometryCollectionSizeSpecificData> SizeSpecificData; // 0x70
	bool EnableRemovePiecesOnFracture; // 0x80
	TArray<UMaterialInterface*> RemoveOnFractureMaterials; // 0x88
	FGuid PersistentGuid; // 0x98
	FGuid StateGuid; // 0xa8
	int32_t BoneSelectedMaterialIndex; // 0xb8
};

struct ARadialForceActor : ARigidBodyBase {
	URadialForceComponent* ForceComponent; // 0x220
};

struct UKSPlayerActivityInstanceContainer : UObject {
	TMap<FInventoryId, UKSActivityInstance*> ActivityInstances; // 0x30
};

struct AMatineeActor : AActor {
	UInterpData* MatineeData; // 0x220
	FName MatineeControllerName; // 0x228
	float PlayRate; // 0x230
	char bPlayOnLevelLoad : 1; // 0x234
	char bForceStartPos : 1; // 0x234
	float ForceStartPosition; // 0x238
	char bLooping : 1; // 0x23c
	char bRewindOnPlay : 1; // 0x23c
	char bNoResetOnRewind : 1; // 0x23c
	char bRewindIfAlreadyPlaying : 1; // 0x23c
	char bDisableRadioFilter : 1; // 0x23c
	char bClientSideOnly : 1; // 0x23c
	char bSkipUpdateIfNotVisible : 1; // 0x23c
	char bIsSkippable : 1; // 0x23c
	int32_t PreferredSplitScreenNum; // 0x240
	char bDisableMovementInput : 1; // 0x244
	char bDisableLookAtInput : 1; // 0x244
	char bHidePlayer : 1; // 0x244
	char bHideHud : 1; // 0x244
	TArray<FInterpGroupActorInfo> GroupActorInfos; // 0x248
	char bShouldShowGore : 1; // 0x258
	TArray<UInterpGroupInst*> GroupInst; // 0x260
	TArray<FCameraCutInfo> CameraCuts; // 0x270
	char bIsPlaying : 1; // 0x280
	char bReversePlayback : 1; // 0x280
	char bPaused : 1; // 0x280
	char bPendingStop : 1; // 0x280
	float InterpPosition; // 0x284
	char ReplicationForceIsPlaying; // 0x28c
	FMulticastInlineDelegate OnPlay; // 0x290
	FMulticastInlineDelegate OnStop; // 0x2a0
	FMulticastInlineDelegate OnPause; // 0x2b0
};

struct UWBP_ButtonStacked_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnClickAnim; // 0x528
	UWidgetAnimation* HoverAnim_Red; // 0x530
	UWidgetAnimation* hoveranim; // 0x538
	UImage* background; // 0x540
	UNamedSlot* ButtonContent; // 0x548
	UImage* Click; // 0x550
	UImage* EndCap; // 0x558
	UImage* Highlight; // 0x560
	UButton* HitTarget; // 0x568
	UImage* Selected; // 0x570
	FMulticastInlineDelegate OnBtnStackedClicked; // 0x578
	FMulticastInlineDelegate OnBtnStackedHovered; // 0x588
	FMulticastInlineDelegate OnBtnStackedUnhovered; // 0x598
	bool bIsDisable; // 0x5a8
	bool bIsActive; // 0x5a9
	FMulticastInlineDelegate OnBtnStackedReleased; // 0x5b0
	bool IsRedButton; // 0x5c0
	UAkAudioEvent* ClickBtnStackedSFX; // 0x5c8
	UAkAudioEvent* HoverBtnStackedSFX; // 0x5d0
};

struct UKSActivityRequirement_ActivitySelected : UKSActivityRequirement {
	TArray<int32_t> SelectedStatusItemIds; // 0x30
};

struct UKSPlayerMod_ProjectileDamage : UKSPlayerMod {
	float BounceDamageMultiplier; // 0x330
};

struct USynthKnob : UWidget {
	float Value; // 0x110
	float StepSize; // 0x114
	float MouseSpeed; // 0x118
	float MouseFineTuneSpeed; // 0x11c
	char ShowTooltipInfo : 1; // 0x120
	FText ParameterName; // 0x128
	FText ParameterUnits; // 0x140
	FDelegate ValueDelegate; // 0x158
	FSynthKnobStyle WidgetStyle; // 0x168
	bool Locked; // 0x3a0
	bool IsFocusable; // 0x3a1
	FMulticastInlineDelegate OnMouseCaptureBegin; // 0x3a8
	FMulticastInlineDelegate OnMouseCaptureEnd; // 0x3b8
	FMulticastInlineDelegate OnControllerCaptureBegin; // 0x3c8
	FMulticastInlineDelegate OnControllerCaptureEnd; // 0x3d8
	FMulticastInlineDelegate OnValueChanged; // 0x3e8
};

struct UMovieSceneObjectPropertySection : UMovieSceneSection {
	FMovieSceneObjectPathChannel ObjectChannel; // 0xe0
};

struct ACameraActor : AActor {
	EAutoReceiveInput AutoActivateForPlayer; // 0x220
	UCameraComponent* CameraComponent; // 0x228
	USceneComponent* SceneComponent; // 0x230
	char bConstrainAspectRatio : 1; // 0x240
	float AspectRatio; // 0x244
	float FOVAngle; // 0x248
	float PostProcessBlendWeight; // 0x24c
	FPostProcessSettings PostProcessSettings; // 0x250
};

struct UBTTask_SetTagCooldown : UBTTaskNode {
	FGameplayTag CooldownTag; // 0x70
	bool bAddToExistingDuration; // 0x78
	float CooldownDuration; // 0x7c
};

struct USlateWidgetStyleAsset : UObject {
	USlateWidgetStyleContainerBase* CustomStyle; // 0x28
};

struct UKSBotEncounter : UDataAsset {
	int32_t BotSideNumber; // 0x30
	bool bUseTeamInsteadOfSide; // 0x34
	int32_t BotTeamNumber; // 0x38
	TArray<UKSEncounterWave*> BotWaves; // 0x40
	FName nmEncounterName; // 0x50
	AKSTeamState* CachedTeamState; // 0x60
};

struct UKSJobSelectionManager : UActorComponent {
	bool bJobManagerReady; // 0xb0
	FMulticastInlineDelegate OnJobSelectionManagerReady; // 0xb8
	FMulticastInlineDelegate OnJobSelectionAcknowledge; // 0xc8
	AKSPlayerController* CachedOwner; // 0xd8
	UKSJobSelectionComponent* CachedSelectionComponent; // 0xe0
};

struct UNiagaraDataInterfaceChaosDestruction : UNiagaraDataInterface {
	TSet<AChaosSolverActor*> ChaosSolverActorSet; // 0x30
	EDataSourceTypeEnum DataSourceType; // 0x80
	int32_t DataProcessFrequency; // 0x84
	int32_t MaxNumberOfDataEntriesToSpawn; // 0x88
	bool DoSpawn; // 0x8c
	FVector2D SpawnMultiplierMinMax; // 0x90
	float SpawnChance; // 0x98
	FVector2D ImpulseToSpawnMinMax; // 0x9c
	FVector2D SpeedToSpawnMinMax; // 0xa4
	FVector2D MassToSpawnMinMax; // 0xac
	FVector2D ExtentMinToSpawnMinMax; // 0xb4
	FVector2D ExtentMaxToSpawnMinMax; // 0xbc
	FVector2D VolumeToSpawnMinMax; // 0xc4
	FVector2D SolverTimeToSpawnMinMax; // 0xcc
	int32_t SurfaceTypeToSpawn; // 0xd4
	ELocationFilteringModeEnum LocationFilteringMode; // 0xd8
	ELocationXToSpawnEnum LocationXToSpawn; // 0xd9
	FVector2D LocationXToSpawnMinMax; // 0xdc
	ELocationYToSpawnEnum LocationYToSpawn; // 0xe4
	FVector2D LocationYToSpawnMinMax; // 0xe8
	ELocationZToSpawnEnum LocationZToSpawn; // 0xf0
	FVector2D LocationZToSpawnMinMax; // 0xf4
	EDataSortTypeEnum DataSortingType; // 0xfc
	bool bGetExternalCollisionData; // 0xfd
	bool DoSpatialHash; // 0xfe
	FVector SpatialHashVolumeMin; // 0x100
	FVector SpatialHashVolumeMax; // 0x10c
	FVector SpatialHashVolumeCellSize; // 0x118
	int32_t MaxDataPerCell; // 0x124
	bool bApplyMaterialsFilter; // 0x128
	TSet<UPhysicalMaterial*> ChaosBreakingMaterialSet; // 0x130
	bool bGetExternalBreakingData; // 0x180
	bool bGetExternalTrailingData; // 0x181
	FVector2D RandomPositionMagnitudeMinMax; // 0x184
	float InheritedVelocityMultiplier; // 0x18c
	ERandomVelocityGenerationTypeEnum RandomVelocityGenerationType; // 0x190
	FVector2D RandomVelocityMagnitudeMinMax; // 0x194
	float SpreadAngleMax; // 0x19c
	FVector VelocityOffsetMin; // 0x1a0
	FVector VelocityOffsetMax; // 0x1ac
	FVector2D FinalVelocityMagnitudeMinMax; // 0x1b8
	float MaxLatency; // 0x1c0
	EDebugTypeEnum DebugType; // 0x1c4
	int32_t LastSpawnedPointID; // 0x1c8
	float LastSpawnTime; // 0x1cc
	float SolverTime; // 0x1e0
	float TimeStampOfLastProcessedData; // 0x1e4
};

struct UKSActivityRequirement_AiPvp : UKSActivityRequirement {
	bool RequireEnabled; // 0x30
};

struct AKSWeapon_RemoteThrow : AKSWeapon_GrenadeThrow {
	FMulticastInlineDelegate OnDetonatorEquipped; // 0x840
	UKSWeaponAsset* DetonatorAsset; // 0x860
	bool ReadyForDetonator; // 0x868
};

struct UKSPersistentDataTeamBarWidget : UKSAutoTeamWidget {
	int32_t HoldReapply; // 0x558
	bool bWantsRepply; // 0x55c
	TArray<UKSPersistentPlayerData*> TeamPlayerData; // 0x560
};

struct UGeneralProjectSettings : UObject {
	FString CompanyName; // 0x28
	FString CompanyDistinguishedName; // 0x38
	FString CopyrightNotice; // 0x48
	FString Description; // 0x58
	FString Homepage; // 0x68
	FString LicensingTerms; // 0x78
	FString PrivacyPolicy; // 0x88
	FGuid ProjectID; // 0x98
	FString ProjectName; // 0xa8
	FString ProjectVersion; // 0xb8
	FString SupportContact; // 0xc8
	FText ProjectDisplayedTitle; // 0xd8
	FText ProjectDebugTitleInfo; // 0xf0
	bool bShouldWindowPreserveAspectRatio; // 0x108
	bool bUseBorderlessWindow; // 0x109
	bool bStartInVR; // 0x10a
	bool bStartInAR; // 0x10b
	bool bSupportAR; // 0x10c
	bool bAllowWindowResize; // 0x10d
	bool bAllowClose; // 0x10e
	bool bAllowMaximize; // 0x10f
	bool bAllowMinimize; // 0x110
};

struct ANiagaraPreviewGrid : AActor {
	UNiagaraSystem* System; // 0x220
	ENiagaraPreviewGridResetMode ResetMode; // 0x228
	UNiagaraPreviewAxis* PreviewAxisX; // 0x230
	UNiagaraPreviewAxis* PreviewAxisY; // 0x238
	ANiagaraPreviewBase* PreviewClass; // 0x240
	float SpacingX; // 0x248
	float SpacingY; // 0x24c
	int32_t NumX; // 0x250
	int32_t NumY; // 0x254
	TArray<UChildActorComponent*> PreviewComponents; // 0x258
};

struct UWBP_SettingsGroup_C : UKSSettingsGroup {
	FPointerToUberGraphFrame UberGraphFrame; // 0x550
	UVerticalBox* MainSettingBox; // 0x558
	UVerticalBox* SubSettingsBox; // 0x560
	UHorizontalBox* SubSettingsContainer; // 0x568
};

struct UKSSpringArmComponent : USpringArmComponent {
	bool bEnableSmoothLengthReturn; // 0x290
	float SmoothLengthReturnSpeed; // 0x294
	UCurveFloat* SmoothingCurve; // 0x298
	UCurveVector* OffsetCurve; // 0x2a0
	bool bRelativeTargetOffset; // 0x2a8
	AKSCharacter* CharacterOwner; // 0x2b0
};

struct UScaleBox : UContentWidget {
	EStretch Stretch; // 0x128
	EStretchDirection StretchDirection; // 0x129
	float UserSpecifiedScale; // 0x12c
	bool IgnoreInheritedScale; // 0x130
};

struct UPlatformGameInstance : UGameInstance {
	FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x198
	FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x1a8
	FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x1b8
	FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x1c8
	FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x1d8
	FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x1e8
	FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x1f8
	FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x208
	FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x218
	FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x228
	FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x238
	FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x248
	FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x258
};

struct UWBP_PlayerIdentity_Title_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* PlayerTitleText; // 0x528
	UBorder* RarityBackground; // 0x530
};

struct UStaticPropManagerComponent : UActorComponent {
	TArray<FActiveStaticProp> ActiveNamelessProps; // 0x188
	TMap<FPropIdentifier, FActiveStaticProp> ActiveProps; // 0x198
	bool bAllowSpawnerPooling; // 0x1e8
	float SpawnerPoolingLifespan; // 0x1ec
};

struct UPreviewMeshCollection : UDataAsset {
	USkeleton* Skeleton; // 0x38
	TArray<FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x40
};

struct ADecalActor : AActor {
	UDecalComponent* Decal; // 0x220
};

struct UExponentialHeightFogComponent : USceneComponent {
	float FogDensity; // 0x208
	float FogHeightFalloff; // 0x20c
	FExponentialHeightFogData SecondFogData; // 0x210
	FLinearColor FogInscatteringColor; // 0x21c
	UTextureCube* InscatteringColorCubemap; // 0x230
	float InscatteringColorCubemapAngle; // 0x238
	FLinearColor InscatteringTextureTint; // 0x23c
	float FullyDirectionalInscatteringColorDistance; // 0x24c
	float NonDirectionalInscatteringColorDistance; // 0x250
	float DirectionalInscatteringExponent; // 0x254
	float DirectionalInscatteringStartDistance; // 0x258
	FLinearColor DirectionalInscatteringColor; // 0x25c
	float FogMaxOpacity; // 0x26c
	float StartDistance; // 0x270
	FPerPlatformFloat StartDistancePerPlatformScale; // 0x274
	float FogCutoffDistance; // 0x278
	bool bEnableVolumetricFog; // 0x27c
	float VolumetricFogScatteringDistribution; // 0x280
	FColor VolumetricFogAlbedo; // 0x284
	FLinearColor VolumetricFogEmissive; // 0x288
	float VolumetricFogExtinctionScale; // 0x298
	float VolumetricFogDistance; // 0x29c
	float VolumetricFogStaticLightingScatteringIntensity; // 0x2a0
	bool bOverrideLightColorsWithFogInscatteringColors; // 0x2a4
};

struct UKSThreatComponent : UActorComponent {
	int32_t ThreatUpdateIndex; // 0xb0
	float CurrentThreat; // 0xb4
	float ThreatBucketValue; // 0xb8
	UKSThreatComponent* OwningThreat; // 0xc0
	TArray<UKSThreatComponent*> OwnedThreats; // 0xc8
	AKSCharacter* OwningCharacter; // 0xd8
	TWeakObjectPtr<AKSCharacter> LocalPlayerCharacter; // 0xe0
	float SelfThreatValue; // 0xf8
	float AllyThreatValue; // 0xfc
	float DefaultThreatValue; // 0x100
	TArray<float> BucketValues; // 0x108
	bool bUseFocused; // 0x118
	float FocusedValue; // 0x11c
	float FocusedWeight; // 0x120
	float FocusedInnerAngle; // 0x124
	float FocusedOuterAngle; // 0x12c
	bool bUseFocusTarget; // 0x134
	float FocusTargetValue; // 0x138
	float FocusTargetWeight; // 0x13c
	float FocusTargetInnerAngle; // 0x140
	float FocusTargetOuterAngle; // 0x148
	bool bUseProximity; // 0x150
	float ProximityValue; // 0x154
	float ProximityWeight; // 0x158
	float ProximityInnerDistance; // 0x15c
	float ProximityOuterDistance; // 0x160
	bool bUseBehind; // 0x164
	float BehindValue; // 0x168
	float BehindWeight; // 0x16c
	float BehindInnerAngle; // 0x170
	float BehindOuterAngle; // 0x178
	bool bUseEffectiveRange; // 0x180
	float EffectiveRangeValue; // 0x184
	float EffectiveRangeWeight; // 0x188
};

struct UGeometryCollectionComponent : UMeshComponent {
	AChaosSolverActor* ChaosSolverActor; // 0x460
	UGeometryCollection* RestCollection; // 0x548
	TArray<AFieldSystemActor*> InitializationFields; // 0x550
	bool Simulating; // 0x560
	EObjectStateTypeEnum ObjectType; // 0x568
	bool EnableClustering; // 0x569
	int32_t ClusterGroupIndex; // 0x56c
	int32_t MaxClusterLevel; // 0x570
	TArray<float> DamageThreshold; // 0x578
	EClusterConnectionTypeEnum ClusterConnectionType; // 0x588
	int32_t CollisionGroup; // 0x58c
	float CollisionSampleFraction; // 0x590
	float LinearEtherDrag; // 0x594
	float AngularEtherDrag; // 0x598
	UChaosPhysicalMaterial* PhysicalMaterial; // 0x5a0
	EInitialVelocityTypeEnum InitialVelocityType; // 0x5a8
	FVector InitialLinearVelocity; // 0x5ac
	FVector InitialAngularVelocity; // 0x5b8
	FGeomComponentCacheParameters CacheParameters; // 0x5c8
	FMulticastInlineDelegate NotifyGeometryCollectionPhysicsStateChange; // 0x618
	FMulticastInlineDelegate NotifyGeometryCollectionPhysicsLoadingStateChange; // 0x628
	FMulticastInlineDelegate OnChaosBreakEvent; // 0x650
	float DesiredCacheTime; // 0x660
	bool CachePlayback; // 0x664
	FMulticastInlineDelegate OnChaosPhysicsCollision; // 0x668
	bool bNotifyBreaks; // 0x678
	bool bNotifyCollisions; // 0x679
	UBodySetup* DummyBodySetup; // 0x858
};

struct UAIPerceptionComponent : UActorComponent {
	TArray<UAISenseConfig*> SensesConfig; // 0xb0
	UAISense* DominantSense; // 0xc0
	AAIController* AIOwner; // 0xd8
	FMulticastInlineDelegate OnPerceptionUpdated; // 0x160
	FMulticastInlineDelegate OnTargetPerceptionUpdated; // 0x170
};

struct UKSWeaponComponentWidget : UKSWidget {
	TWeakObjectPtr<UKSWeaponComponent> WeaponComponent; // 0x520
	FKSEquipmentId EquipmentId; // 0x528
};

struct UAIPerceptionStimuliSourceComponent : UActorComponent {
	char bAutoRegisterAsSource : 1; // 0xb0
	TArray<UAISense*> RegisterAsSourceForSenses; // 0xb8
};

struct UWBP_StorePriceDisplay_C : UUserWidget {
	UHorizontalBox* PricesBox; // 0x238
};

struct UInterpTrackInstDirector : UInterpTrackInst {
	AActor* OldViewTarget; // 0x28
};

struct UParticleModuleTypeDataRibbon : UParticleModuleTypeDataBase {
	int32_t MaxTessellationBetweenParticles; // 0x30
	int32_t SheetsPerTrail; // 0x34
	int32_t MaxTrailCount; // 0x38
	int32_t MaxParticleInTrailCount; // 0x3c
	char bDeadTrailsOnDeactivate : 1; // 0x40
	char bDeadTrailsOnSourceLoss : 1; // 0x40
	char bClipSourceSegement : 1; // 0x40
	char bEnablePreviousTangentRecalculation : 1; // 0x40
	char bTangentRecalculationEveryFrame : 1; // 0x40
	char bSpawnInitialParticle : 1; // 0x40
	ETrailsRenderAxisOption RenderAxis; // 0x44
	float TangentSpawningScalar; // 0x48
	char bRenderGeometry : 1; // 0x4c
	char bRenderSpawnPoints : 1; // 0x4c
	char bRenderTangents : 1; // 0x4c
	char bRenderTessellation : 1; // 0x4c
	float TilingDistance; // 0x50
	float DistanceTessellationStepSize; // 0x54
	char bEnableTangentDiffInterpScale : 1; // 0x58
	float TangentTessellationScalar; // 0x5c
};

struct UANotifyState_PropLock_C : UAnimNotifyState {
	bool HolsterLock; // 0x30
	bool Left Holster Lock; // 0x31
	bool No Prop Lock While Moving; // 0x32
};

struct UCurveLinearColorAtlas : UTexture2D {
	uint32_t TextureSize; // 0xe8
	TArray<UCurveLinearColor*> GradientCurves; // 0xf0
};

struct UUserDefinedEnum : UEnum {
	TMap<FName, FText> DisplayNameMap; // 0x60
};

struct UStaticMesh : UStreamableRenderAsset {
	FPerPlatformInt MinLOD; // 0x60
	float LpvBiasMultiplier; // 0x64
	TArray<FStaticMaterial> StaticMaterials; // 0x68
	float LightmapUVDensity; // 0x78
	int32_t LightMapResolution; // 0x7c
	int32_t LightMapCoordinateIndex; // 0x80
	float DistanceFieldSelfShadowBias; // 0x84
	UBodySetup* BodySetup; // 0x88
	FName DefaultCreationCollisionProfileName; // 0x90
	int32_t LODForCollision; // 0x98
	char bGenerateMeshDistanceField : 1; // 0x9c
	char bStripComplexCollisionForConsole : 1; // 0x9c
	char bHasNavigationData : 1; // 0x9c
	char bSupportUniformlyDistributedSampling : 1; // 0x9c
	char bSupportPhysicalMaterialMasks : 1; // 0x9c
	char bIsBuiltAtRuntime : 1; // 0x9c
	char bAllowCPUAccess : 1; // 0x9c
	char bSupportGpuUniformlyDistributedSampling : 1; // 0x9d
	TArray<UStaticMeshSocket*> Sockets; // 0xc0
	FVector PositiveBoundsExtension; // 0xe0
	FVector NegativeBoundsExtension; // 0xec
	FBoxSphereBounds ExtendedBounds; // 0xf8
	int32_t ElementToIgnoreForTexFactor; // 0x114
	TArray<UAssetUserData*> AssetUserData; // 0x118
	UObject* EditableMesh; // 0x130
	UNavCollisionBase* NavCollision; // 0x138
};

struct UWBP_Social_Platform_ID_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* NameLabel; // 0x240
	UWBP_PlatformIcon_C* PlatformIcon; // 0x248
};

struct UMovieSceneSubTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> Sections; // 0x58
};

struct USub_Hero_ABP_Swimming_C : UKSSwimmingAnimInst {
	FAnimNode_Root AnimGraphNode_Root; // 0x10f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_37; // 0x1130
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_36; // 0x1168
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_35; // 0x11a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_34; // 0x11d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_33; // 0x1210
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_32; // 0x1248
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_31; // 0x1280
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_30; // 0x12b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_29; // 0x12f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_28; // 0x1328
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_27; // 0x1360
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_26; // 0x1398
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_25; // 0x13d0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_24; // 0x1408
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_23; // 0x1440
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_22; // 0x1478
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_21; // 0x14b0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_20; // 0x14e8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_19; // 0x1520
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_18; // 0x1558
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_17; // 0x1590
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_16; // 0x15c8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_15; // 0x1600
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_14; // 0x1638
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_13; // 0x1670
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_12; // 0x16a8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_11; // 0x16e0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_10; // 0x1718
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_9; // 0x1750
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8; // 0x1788
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_7; // 0x17c0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_6; // 0x17f8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_5; // 0x1830
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x1868
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x18a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x18d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x1910
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_13; // 0x1948
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_13; // 0x1aa8
	FAnimNode_StateResult AnimGraphNode_StateResult_9; // 0x1b30
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_12; // 0x1b70
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_11; // 0x1cd0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_10; // 0x1e30
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_9; // 0x1f90
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_12; // 0x20f0
	FAnimNode_BlendListByInt AnimGraphNode_BlendListByInt_2; // 0x2178
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_11; // 0x2228
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_10; // 0x22b0
	FAnimNode_BlendListByInt AnimGraphNode_BlendListByInt; // 0x2338
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9; // 0x23e8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_11; // 0x2470
	FAnimNode_StateResult AnimGraphNode_StateResult_8; // 0x2520
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_8; // 0x2560
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_7; // 0x26c0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_6; // 0x2820
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_6; // 0x2a20
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_8; // 0x2b10
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_10; // 0x2b98
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_9; // 0x2c48
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_7; // 0x2cf8
	FAnimNode_StateResult AnimGraphNode_StateResult_7; // 0x2d80
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_2; // 0x2dc0
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator; // 0x2e18
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8; // 0x2e70
	FAnimNode_StateResult AnimGraphNode_StateResult_6; // 0x2f20
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_5; // 0x2f60
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_4; // 0x3160
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_5; // 0x3360
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7; // 0x3450
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_4; // 0x3500
	FAnimNode_StateResult AnimGraphNode_StateResult_5; // 0x35f0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_6; // 0x3630
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_5; // 0x3790
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_4; // 0x38f0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_3; // 0x3a50
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_3; // 0x3bb0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6; // 0x3db0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5; // 0x3e38
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x3ec0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x3f48
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum; // 0x3fd0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6; // 0x4090
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_3; // 0x4140
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x4230
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_2; // 0x4270
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned; // 0x4470
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_2; // 0x4670
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5; // 0x4760
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer; // 0x4810
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x4900
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_2; // 0x4940
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x4aa0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x4c00
	FAnimNode_RandomPlayer AnimGraphNode_RandomPlayer; // 0x4c88
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4; // 0x4d10
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x4dc0
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0x4e00
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x4ec0
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x4f48
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x4f88
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x5048
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x50f8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x51a8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x51d8
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x5208
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x5320
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned; // 0x53d0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x5590
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3; // 0x5658
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x5690
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x56c8
	float MaxMantleHt; // 0x5700
	float Max2StoryMantleHt; // 0x5704
	bool StringMantlesTogether; // 0x5708
	UAnimSequenceBase* Start Swim Moving; // 0x5710
	UAnimSequenceBase* Start Swim Moving B; // 0x5718
	UAnimSequenceBase* Start Swim Moving A; // 0x5720
	float Cached Angle; // 0x5728
	UAnimSequenceBase* Stop Swim Moving A; // 0x5730
	UAnimSequenceBase* Stop Swim Moving B; // 0x5738
	UAnimSequenceBase* Stop Swim Moving; // 0x5740
	float Cached Stop Angle; // 0x5748
	EKSMovementDirection locoStartDir; // 0x574c
	EKSMovementDirection locoStopDir; // 0x574d
	int32_t TurnVal; // 0x5750
	bool Transition_Downed; // 0x5754
	bool Transition_Pivot; // 0x5755
	bool IsFallingToWater; // 0x5756
	FVector Replace with code; // 0x5758
	AKSCharacter* Character; // 0x5768
	bool Transition State Lock; // 0x5770
	float CallFunc_BreakRotator_Roll; // 0x5774
	float CallFunc_BreakRotator_Pitch; // 0x5778
	float CallFunc_BreakRotator_Yaw; // 0x577c
	float CallFunc_BreakRotator_Roll_2; // 0x5780
	float CallFunc_BreakRotator_Pitch_2; // 0x5784
	float CallFunc_BreakRotator_Yaw_2; // 0x5788
	float CallFunc_BreakRotator_Roll_3; // 0x578c
	float CallFunc_BreakRotator_Pitch_3; // 0x5790
	float CallFunc_BreakRotator_Yaw_3; // 0x5794
	float CallFunc_BreakRotator_Roll_4; // 0x5798
	float CallFunc_BreakRotator_Pitch_4; // 0x579c
	float CallFunc_BreakRotator_Yaw_4; // 0x57a0
	float CallFunc_BreakRotator_Roll_5; // 0x57a4
	float CallFunc_BreakRotator_Pitch_5; // 0x57a8
	float CallFunc_BreakRotator_Yaw_5; // 0x57ac
	float CallFunc_BreakVector_X; // 0x57b0
	float CallFunc_BreakVector_Y; // 0x57b4
	float CallFunc_BreakVector_Z; // 0x57b8
	float CallFunc_BreakRotator_Roll_6; // 0x57bc
	float CallFunc_BreakRotator_Pitch_6; // 0x57c0
	float CallFunc_BreakRotator_Yaw_6; // 0x57c4
	bool Temp_bool_Variable; // 0x57c8
	FVector K2Node_Select_Default; // 0x57cc
	float CallFunc_BreakVector_X_2; // 0x57d8
	float CallFunc_BreakVector_Y_2; // 0x57dc
	float CallFunc_BreakVector_Z_2; // 0x57e0
	bool Temp_bool_Variable_2; // 0x57e4
	FVector K2Node_Select_Default_2; // 0x57e8
	bool Temp_bool_Variable_3; // 0x57f4
	bool Temp_bool_Variable_4; // 0x57f5
	FVector K2Node_Select_Default_3; // 0x57f8
	float K2Node_Event_DeltaTimeX; // 0x5804
	FVector K2Node_Select_Default_4; // 0x5808
	FVector K2Node_Event_StartLocation; // 0x5814
	float CallFunc_BreakVector_X_3; // 0x5820
	float CallFunc_BreakVector_Y_3; // 0x5824
	float CallFunc_BreakVector_Z_3; // 0x5828
	FVector K2Node_Event_StopLocation; // 0x582c
	EKSTurnInPlaceAnimationVariant K2Node_Event_AnimationVariant; // 0x5838
	float K2Node_Event_DelayTime; // 0x583c
	bool K2Node_SwitchEnum_CmpSuccess; // 0x5840
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x5848
	bool K2Node_DynamicCast_bSuccess; // 0x5850
	FVector K2Node_Event_PivotLocation; // 0x5854
	bool K2Node_Event_bShouldLock; // 0x5860
};

struct UWBP_RogueCustomizationPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Show; // 0x528
	UWBP_KSCosmeticItemDisplay_C* Outfit; // 0x530
	UWBP_ItemInfoContainer_C* OutfitLabel; // 0x538
	UWBP_KSCosmeticItemDisplay_C* RadialSlot01; // 0x540
	UWBP_KSCosmeticItemDisplay_C* RadialSlot02; // 0x548
	UWBP_KSCosmeticItemDisplay_C* RadialSlot03; // 0x550
	UWBP_KSCosmeticItemDisplay_C* RadialSlot04; // 0x558
	UWBP_KSCosmeticItemDisplay_C* RadialSlot05; // 0x560
	UWBP_KSCosmeticItemDisplay_C* RadialSlot06; // 0x568
	UWBP_KSCosmeticItemDisplay_C* RadialSlot07; // 0x570
	UWBP_KSCosmeticItemDisplay_C* RadialSlot08; // 0x578
	UWBP_RoguePanelHeader_C* WBP_RoguePanelHeader; // 0x580
	UWBP_KSCosmeticItemDisplay_C* WingSuit; // 0x588
	UWBP_ItemInfoContainer_C* WingsuitLabel; // 0x590
	UKSMercManager* MercManager; // 0x598
	FMulticastInlineDelegate GotoCustomizationScreen; // 0x5a0
	UKSJobItem* JobItem; // 0x5b0
	TArray<UWBP_KSCosmeticItemDisplay_C*> CosmeticSlots; // 0x5b8
	int32_t MyFocusGroup; // 0x5c8
	TArray<UWBP_ItemInfoContainer_C*> CosmeticLabels; // 0x5d0
};

struct UWBP_RogueStatsScreen_C : UKSProfileRogueStatsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x540
	UWidgetAnimation* OnShow; // 0x548
	UKSScrollBox* KSScrollBox_97; // 0x550
	UKSSortableVerticalBox* PnlStatEntries; // 0x558
	UVerticalBox* PnlStatTabs; // 0x560
	UScrollBox* SclStatsEntries; // 0x568
	UWBP_AsyncIcon_C* StatIcon; // 0x570
	UTextBlock* StatName; // 0x578
	UTextBlock* StatValue; // 0x580
	TArray<UWBP_RogueStatsScreen_RogueEntry_C*> PooledStatEntries; // 0x588
	TArray<UWBP_RogueStatsScreen_RogueEntry_C*> ActiveStatEntries; // 0x598
	TArray<UWBP_RogueStatsScreen_TabEntry_C*> TabWidgets; // 0x5a8
	float ScrollSpeed; // 0x5b8
	UKSStatWrapper* CurrentPlayerStat; // 0x5c0
	UKSStatWrapper* CurrentRogueStat; // 0x5c8
};

struct UObjectLibrary : UObject {
	UObject* ObjectBaseClass; // 0x28
	bool bHasBlueprintClasses; // 0x30
	TArray<UObject*> Objects; // 0x38
	TArray<TWeakObjectPtr<UObject>> WeakObjects; // 0x48
	bool bUseWeakReferences; // 0x58
	bool bIsFullyLoaded; // 0x59
};

struct UKSJobSelectChoiceGridWidget : UKSJobSelectorWidget {
	UGridPanel* GridPanel; // 0x548
	UKSJobSelectionChoiceWidget* ChoiceWidgetClass; // 0x550
	UUserWidget* PaddingWidgetClass; // 0x558
	int32_t GridWidth; // 0x560
	TArray<UKSJobSelectionChoiceWidget*> ActiveChoiceWidgets; // 0x568
	TArray<UUserWidget*> ActivePaddingWidgets; // 0x578
	FMulticastInlineDelegate OnChoiceWidgetHovered; // 0x588
	FMulticastInlineDelegate OnChoiceWidgetUnhovered; // 0x598
	FMulticastInlineDelegate OnChoiceGridRebuilt; // 0x5a8
};

struct UKSAsyncImage : UPUMG_AsyncImage {
	UMaterialInstanceDynamic* MaterialToUse; // 0x260
	FName MaterialParameter; // 0x268
};

struct UGeometryCacheTrack_FlipbookAnimation : UGeometryCacheTrack {
	uint32_t NumMeshSamples; // 0x58
};

struct UKSActivityRewardCondition_TimeSinceHeadshot : UKSActivityRewardCondition {
	float MinSecondsSinceLastHeadshot; // 0x30
	float MaxSecondsSinceLastHeadshot; // 0x34
	bool SucceedIfNeverHeadshot; // 0x38
};

struct USkeletalBodySetup : UBodySetup {
	bool bSkipScaleFromAnimation; // 0x250
	TArray<FPhysicalAnimationProfile> PhysicalAnimationData; // 0x258
};

struct AKSBuild : AKSLagCompensatedActor {
	float PointDamageMultiplier; // 0x290
	float RadialDamageMultiplier; // 0x294
	float MaxHealth; // 0x298
	float Health; // 0x29c
	float SelfDestructDelay; // 0x2a0
	float KillDestructionDelay; // 0x2a4
	UBoxComponent* Box; // 0x2b8
	USkinnableMergedMeshComponent* MeshComponent; // 0x2c0
	UMultiSkinObject* SkinObject; // 0x2c8
	TArray<FName> ApparelObjectsToListenTo; // 0x2d0
	TArray<FName> FullKeywordList; // 0x2e0
	UKSNavModifierComponent* KSNavModifierComponent; // 0x2f0
	FMulticastInlineDelegate OnBuildComponentDestroyedDel; // 0x2f8
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x308
	UKSInteractableComponent* InteractableComponent; // 0x310
	TArray<AKSCharacter*> Interactors; // 0x318
	FMulticastInlineDelegate OnBuildReclaim; // 0x328
	bool bCanReclaim; // 0x338
	FVector RelativeInteractionPoint; // 0x33c
	float ReclaimTime; // 0x348
	bool bRestoreWeaponOnReclaim; // 0x34c
	UKSWeaponAsset_Build* WeaponToRestore; // 0x350
	FText ReclaimItemName; // 0x358
	UKSInteractionType* ReclaimInteractionType; // 0x370
	UKSItemStimuliSourceComponent* StimuliSourceComponent; // 0x378
	int32_t OriginalOwnerId; // 0x388
	TArray<FGameplayTag> ItemTags; // 0x390
};

struct UKSDynamicMaskComponent : UActorComponent {
	UTextureRenderTarget2D* DynamicMaskRenderTarget; // 0xb0
	int32_t TargetDimPixels; // 0xb8
	FLinearColor EmptyColor; // 0xbc
	FLinearColor FillColor; // 0xcc
	USceneComponent* ConversionBasisComponent; // 0xe0
	float WorldToTargetScaleX; // 0xe8
	float WorldToTargetScaleY; // 0xec
};

struct UWBP_NewsRotatorButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* EmptyPip; // 0x528
	UButton* PipButton; // 0x530
	UImage* SelectedPip; // 0x538
	bool IsActivePip; // 0x540
	FMulticastInlineDelegate OnClicked; // 0x548
	int32_t ButtonIndex; // 0x558
};

struct UWBP_Notification_Icon_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWBP_CallToAction_C* WBP_CallToAction; // 0x4c8
};

struct UCommandlet : UObject {
	FString HelpDescription; // 0x28
	FString HelpUsage; // 0x38
	FString HelpWebLink; // 0x48
	TArray<FString> HelpParamNames; // 0x58
	TArray<FString> HelpParamDescriptions; // 0x68
	char IsServer : 1; // 0x78
	char IsClient : 1; // 0x78
	char IsEditor : 1; // 0x78
	char LogToConsole : 1; // 0x78
	char ShowErrorCount : 1; // 0x78
	char ShowProgress : 1; // 0x78
};

struct UBTNode : UObject {
	FString NodeName; // 0x30
	UBehaviorTree* TreeAsset; // 0x40
	UBTCompositeNode* ParentNode; // 0x48
};

struct UKSDefaultAimTargetingModule : UKSWeaponTargetingModule {
	float WallMarkerMaxDistance; // 0x128
	bool bBlockedByWall; // 0x12c
	bool bWallMarkerActive; // 0x12d
	FVector WallMarkerWorldLocation; // 0x130
	UKSWeaponAsset_WithProjectile* ProjWeaponAsset; // 0x140
};

struct UInterpTrackDirector : UInterpTrack {
	TArray<FDirectorTrackCut> CutTrack; // 0x70
	char bSimulateCameraCutsOnClients : 1; // 0x80
};

struct UMaterialExpressionMultiply : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	float ConstA; // 0x68
	float ConstB; // 0x6c
};

struct USoundNodeModulator : USoundNode {
	float PitchMin; // 0x48
	float PitchMax; // 0x4c
	float VolumeMin; // 0x50
	float VolumeMax; // 0x54
};

struct UParticleModuleEventReceiverKillParticles : UParticleModuleEventReceiverBase {
	char bStopSpawning : 1; // 0x40
};

struct UWBP_StoreSectionTab_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* ActiveIndicator; // 0x530
	UTextBlock* ButtonText; // 0x538
	UCanvasPanel* CTAWrapper; // 0x540
	UWBP_KeyCallout_C* GamepadPrompt; // 0x548
	UCanvasPanel* GamepadPromptContainer; // 0x550
	UButton* TabButton; // 0x558
	UWBP_CallToAction_C* WBP_CallToAction; // 0x560
	FMulticastInlineDelegate OnClicked; // 0x568
	FMulticastInlineDelegate OnHovered; // 0x578
	FMulticastInlineDelegate OnUnhovered; // 0x588
	bool IsActive; // 0x598
	int32_t Index; // 0x59c
	UAkAudioEvent* HoverStoreSectionTabSFX; // 0x5a0
	UAkAudioEvent* ClickStoreSectionTabSFX; // 0x5a8
};

struct UKSCommunication : UKSRadialMenuItem {
	EPingType PingType; // 0x2b8
	EPingMessage PingMessage; // 0x2b9
};

struct UWBP_JoinMatchBlocker_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnShow; // 0x528
	UVerticalBox* BackfillCallout; // 0x530
	UImage* BlockerBkg; // 0x538
	UWBP_StandardButtonSmall_C* CancelButton; // 0x540
	UTextBlock* JoiningText; // 0x548
	UCanvasPanel* MainWrapper; // 0x550
	UWBP_ThrobberShield_C* WBP_LoadingThrobber; // 0x558
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x560
};

struct UChatroom : UObject {
	FString CurrentChatRoomId; // 0x28
	int32_t MaxChatRoomRetries; // 0x38
	int32_t NumChatRoomRetries; // 0x3c
};

struct UKSAISense_Objective : UAISense_Hearing {
	TArray<FAIObjectiveEvent> ObjectiveEvents; // 0xe8
};

struct UWBP_TextChat_ChatWindow_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* LoseFocus; // 0x528
	UWidgetAnimation* GainFocus; // 0x530
	UImage* Backer; // 0x538
	UOverlay* BackerWrapper; // 0x540
	UButton* CloseBtn; // 0x548
	UVerticalBox* MessageList; // 0x550
	UScrollBox* Scroll; // 0x558
	int32_t ScrollToBottomFrameDelay; // 0x560
	bool IsCollapsed; // 0x564
	UWBP_TextChat_C* TextChatWidget; // 0x568
	FMulticastInlineDelegate OnCloseButtonClicked; // 0x570
};

struct ULiveLinkSubjectSettings : UObject {
	TArray<ULiveLinkFramePreProcessor*> PreProcessors; // 0x28
	ULiveLinkFrameInterpolationProcessor* InterpolationProcessor; // 0x38
	TArray<ULiveLinkFrameTranslator*> Translators; // 0x40
	ULiveLinkRole* Role; // 0x50
};

struct UKSActivityInstance : UObject {
	FMulticastInlineDelegate OnProgressIncremented; // 0x28
	FMulticastInlineDelegate OnProgressTierReached; // 0x38
	FMulticastInlineDelegate OnProgressCompleted; // 0x48
	FMulticastInlineDelegate OnProgressInitialized; // 0x58
	UKSEventTracker* TrackerInstance; // 0x68
	TArray<UKSActivityBehavior*> BehaviorInstances; // 0x70
	int32_t ProgressCount; // 0x80
	bool HasProgressBeenInitialized; // 0x84
	TArray<FActivityTier> ActivityTiers; // 0x88
	TWeakObjectPtr<AKSPlayerController> PlayerController; // 0xb8
	UKSActivity* Activity; // 0xc0
	TWeakObjectPtr<UKSActivityManagerBase> ActivityManager; // 0xc8
	bool bIsInitialized; // 0xd0
	int32_t InitialProgress; // 0xd4
	bool InitialUnlocked; // 0xd8
	int32_t CurrentProgressEarned; // 0xdc
	int32_t TotalProgressEarned; // 0xe0
	bool ShouldSetProgress; // 0xe4
	TMap<FString, double> PlatformProgressPerAchievement; // 0xe8
	TMap<ERewardSource, float> TotalProgressEarnedBySource; // 0x138
	TMap<FString, float> TotalProgressEarnedByEvent; // 0x188
	TMap<FString, float> TotalProgressEarnedByBooster; // 0x1d8
	TMap<FString, float> ExtraData; // 0x228
};

struct UKSBTD_RandomCooldown : UBTDecorator {
	float MinCoolDownTime; // 0x68
	float MaxCoolDownTime; // 0x6c
};

struct UMaterialExpressionSubsurfaceMaskCustomOutput : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct USoundNodeSwitch : USoundNode {
	FName IntParameterName; // 0x48
};

struct USkyAtmosphereComponent : USceneComponent {
	ESkyAtmosphereTransformMode TransformMode; // 0x208
	float BottomRadius; // 0x20c
	FColor GroundAlbedo; // 0x210
	float AtmosphereHeight; // 0x214
	float MultiScatteringFactor; // 0x218
	float RayleighScatteringScale; // 0x21c
	FLinearColor RayleighScattering; // 0x220
	float RayleighExponentialDistribution; // 0x230
	float MieScatteringScale; // 0x234
	FLinearColor MieScattering; // 0x238
	float MieAbsorptionScale; // 0x248
	FLinearColor MieAbsorption; // 0x24c
	float MieAnisotropy; // 0x25c
	float MieExponentialDistribution; // 0x260
	float OtherAbsorptionScale; // 0x264
	FLinearColor OtherAbsorption; // 0x268
	FTentDistribution OtherTentDistribution; // 0x278
	FLinearColor SkyLuminanceFactor; // 0x284
	float AerialPespectiveViewDistanceScale; // 0x294
	float HeightFogContribution; // 0x298
	float TransmittanceMinLightElevationAngle; // 0x29c
	FGuid bStaticLightingBuiltGUID; // 0x2c4
};

struct UBlackboardKeyType_Class : UBlackboardKeyType {
	UObject* BaseClass; // 0x30
};

struct UParticleModuleLocationPrimitiveCylinder_Seeded : UParticleModuleLocationPrimitiveCylinder {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x120
};

struct UEnvironmentTrackerComponent : UActorComponent {
	TArray<UObject*> EnvironmentVolumes; // 0xb0
	TMap<FName, int32_t> CachedEnvironmentCounts; // 0xc0
	FName CachedCurrentEnvironment; // 0x110
	FName LastEnvironment; // 0x118
	FName DefaultEnvironment; // 0x120
	FMulticastInlineDelegate OnEnvironmentChanged; // 0x128
};

struct AKSAudioPlayer : AInfo {
	TMap<EGameplayAudioEvent, UKSAudioPlayerEventActionData*> GameplayEventActionMap; // 0x220
	TMap<FString, UKSAudioPlayerEventActionData*> MapLevelStartEventActionMap; // 0x270
	TMap<FString, UKSAudioPlayerEventActionData*> MapLevelEndEventActionMap; // 0x2c0
	TMap<FString, UKSAudioPlayerEventActionData*> GameModeStartEventActionMap; // 0x310
	TMap<FString, UKSAudioPlayerEventActionData*> GameModeEndEventActionMap; // 0x360
	TMap<FString, UKSAudioPlayerEventActionData*> PlayerCharacterStartEventActionMap; // 0x3b0
	TMap<FString, UKSAudioPlayerEventActionData*> PlayerCharacterEndEventActionMap; // 0x400
	TMap<FString, UKSAudioPlayerEventActionData*> MusicPackStartEventActionMap; // 0x450
	TMap<FString, UKSAudioPlayerEventActionData*> MusicPackEndEventActionMap; // 0x4a0
	UKSAudioPlayerEventActionData* AudioPlayerBeginPlayEventActionData; // 0x4f0
	UKSAudioPlayerEventActionData* AudioPlayerEndPlayEventActionData; // 0x4f8
};

struct UKSSpawnRule_Side : UKSSpawnRule {
	float NullTeamScore; // 0x40
};

struct APostProcessVolume : AVolume {
	FPostProcessSettings Settings; // 0x260
	float Priority; // 0x7b0
	float BlendRadius; // 0x7b4
	float BlendWeight; // 0x7b8
	char bEnabled : 1; // 0x7bc
	char bUnbound : 1; // 0x7bc
};

struct USoundNode : UObject {
	TArray<USoundNode*> ChildNodes; // 0x28
};

struct UKSRogueDetailsWidget : UKSWidget {
	UKSWeaponHubHelper* WeaponHubHelper; // 0x520
	FName RogueDetailsScreen; // 0x568
	TSoftObjectPtr<UKSJobItem> ViewedJobItem; // 0x570
	UGuidedMenuCalloutsViewRedirector* GuidedMenuCalloutRedirectorClass; // 0x598
	UGuidedMenuCalloutsViewRedirector* GuidedMenuCalloutRedirector; // 0x5a0
};

struct UPUMG_UISoundTheme : UObject {
	TMap<FName, FPUMG_SoundThemeEventMapping> SoundEventBindings; // 0x28
};

struct AIntervalGizmoActor : AGizmoActor {
	UGizmoLineHandleComponent* UpIntervalComponent; // 0x220
	UGizmoLineHandleComponent* DownIntervalComponent; // 0x228
	UGizmoLineHandleComponent* ForwardIntervalComponent; // 0x230
};

struct AKSGameMode_TutorialBase : AKSGameMode {
	FMulticastInlineDelegate OnTutorialComplete; // 0xf88
	FMulticastInlineDelegate TutorialEnding; // 0xf98
};

struct UWBP_EventMissionItem_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWidgetAnimation* animHover; // 0x4c8
	UWidgetAnimation* animClick; // 0x4d0
	UWidgetAnimation* animSelected; // 0x4d8
	UImage* ActiveMission_Bar; // 0x4e0
	UImage* Btn_BkgPress; // 0x4e8
	UImage* Btn_Fill; // 0x4f0
	UImage* Btn_HoverFill; // 0x4f8
	UImage* Btn_HoverStroke; // 0x500
	UImage* Btn_Stroke; // 0x508
	UOverlay* ButtonBackground; // 0x510
	UImage* Completed; // 0x518
	UButton* HitTarget; // 0x520
	UWidgetSwitcher* IconSwitcher; // 0x528
	USizeBox* IconSwitcherSB; // 0x530
	UImage* Image_110; // 0x538
	USizeBox* Locked; // 0x540
	UWBP_ProgressEarnedBar_C* MissionProgress; // 0x548
	UImage* Star_Active; // 0x550
	UImage* Star_Inactive; // 0x558
	URichTextBlock* Text_MissionObjective; // 0x560
	UTextBlock* Text_RewardAmount; // 0x568
	EChallengeEntry_Card_State CurrentVisualState; // 0x570
	bool IsPremium; // 0x571
	bool IsActive; // 0x572
	FMulticastInlineDelegate OnButtonFocused; // 0x578
	UKSActivityInstance* ActivityInstance; // 0x588
	UAkAudioEvent* MissionItemHoverSound; // 0x590
	UAkAudioEvent* MissionItemClickSound; // 0x598
};

struct URewardsTrackSavedPosition_C : UObject {
	int32_t Page; // 0x28
	int32_t Index; // 0x2c
	FString Context; // 0x30
};

struct UKSSettingsSectionConfigAsset : UDataAsset {
	TArray<FKSSettingsGroupConfig> SettingsGroups; // 0x30
	FText Heading; // 0x40
	TMap<FString, FText> HeadingByPlatform; // 0x58
};

struct UStreamMediaSource : UBaseMediaSource {
	FString StreamUrl; // 0x88
};

struct AKSExtractionComputer : AKSObjectiveBase {
	FKSObjectiveInfo ObjectiveInfo; // 0x398
	FKSObjectiveTimerInfo ObjectiveTimerInfo; // 0x400
	FKSObjectiveCaptureInfo ObjectiveCaptureInfo; // 0x438
	EKSPOIState POIState; // 0x44c
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x450
	UKSInteractableComponent* InteractableComponent; // 0x468
	int32_t FavoredSide; // 0x470
	float TimeToHack; // 0x474
	float TimeToDehack; // 0x478
	float CurrentInteractionProgress; // 0x47c
	UKSInteractionManager* CurrentInteractionManager; // 0x480
	AKSCharacter* ComputerUser; // 0x488
	FText HackingInteractionProgressText; // 0x490
	FText DehackingInteractionProgressText; // 0x4a8
	FText HackingInteractionPromptText; // 0x4c0
	FText DehackingInteractionPromptText; // 0x4d8
	USphereComponent* InteractionRangeSphereComponent; // 0x4f0
	FVector RelativeInteractionPoint; // 0x4f8
	FName CameraName; // 0x504
	float CameraTransitionInTime; // 0x50c
	float CameraTransitionOutTime; // 0x510
	bool bForceCameraShoulder; // 0x514
	ECameraShoulder CameraShoulder; // 0x515
	float CameraMaxRotation; // 0x518
	bool CameraRotationLockout; // 0x51c
	bool bLockPitch; // 0x51d
	bool bLockYaw; // 0x51e
	bool FacesInteract; // 0x51f
	bool bCameraShake; // 0x520
	UCameraShake* CameraShake; // 0x528
};

struct UEnvQueryGenerator_PathingGrid : UEnvQueryGenerator_SimpleGrid {
	FAIDataProviderBoolValue PathToItem; // 0xf8
	UNavigationQueryFilter* NavigationFilter; // 0x130
	FAIDataProviderFloatValue ScanRangeMultiplier; // 0x138
};

struct UParticleModuleBeamModifier : UParticleModuleBeamBase {
	BeamModifierType ModifierType; // 0x30
	FBeamModifierOptions PositionOptions; // 0x34
	FRawDistributionVector Position; // 0x38
	FBeamModifierOptions TangentOptions; // 0x80
	FRawDistributionVector Tangent; // 0x88
	char bAbsoluteTangent : 1; // 0xd0
	FBeamModifierOptions StrengthOptions; // 0xd4
	FRawDistributionFloat Strength; // 0xd8
};

struct UWBP_ToastNotification_Manager_C : UKSToastNotificationWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x560
	UVerticalBox* ChallengeNotificationContainer; // 0x568
	UVerticalBox* NotificationContainer; // 0x570
	TArray<FText> LocalizeTexts; // 0x578
	bool CanDisplaySocialToasts; // 0x588
};

struct UAkLuminInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings; // 0xb8
};

struct UKSJobSelectBanWidget : UKSJobSelectorWidget {
	TArray<FJobSelectionTask> CachedBanTasks; // 0x548
};

struct UMovieSceneGeometryCollectionSection : UMovieSceneSection {
	FMovieSceneGeometryCollectionParams Params; // 0xe0
};

struct UParticleEmitter : UObject {
	FName EmitterName; // 0x28
	int32_t SubUVDataOffset; // 0x30
	EEmitterRenderMode EmitterRenderMode; // 0x34
	EParticleSignificanceLevel SignificanceLevel; // 0x35
	char bUseLegacySpawningBehavior : 1; // 0x37
	char ConvertedModules : 1; // 0x37
	char bIsSoloing : 1; // 0x37
	char bCookedOut : 1; // 0x37
	char bDisabledLODsKeepEmitterAlive : 1; // 0x37
	char bDisableWhenInsignficant : 1; // 0x38
	TArray<UParticleLODLevel*> LODLevels; // 0x40
	int32_t PeakActiveParticles; // 0x50
	int32_t InitialAllocationCount; // 0x54
	float QualityLevelSpawnRateScale; // 0x58
	uint32_t DetailModeBitmask; // 0x5c
	FParticleChannelContainer m_ParticleChannels; // 0x1b8
};

struct AKSRadialMenuItemInstance : AKSEquipment {
	UKSRadialMenuItem* RadialMenuItemAsset; // 0x2d8
};

struct ULoadoutClassCollection : UItemCollection {
	FText CollectionName; // 0x98
	FText CollectionDescription; // 0xb0
};

struct ABP_InWorld_Reticle_C : AActor {
	FPointerToUberGraphFrame UberGraphFrame; // 0x220
	UWidgetComponent* Reticle; // 0x228
	USceneComponent* DefaultSceneRoot; // 0x230
	UWBP_InWorld_Reticle_C* ReticleWidget; // 0x238
	UWBP_InWorld_ReticleComponents_C* ReticleComponentWidget; // 0x240
};

struct AKSItemDrop : AActor {
	UKSInteractionBlockerManager* InteractionBlockerManager; // 0x240
	UKSInteractableComponent* InteractableComponent; // 0x258
	TArray<AKSCharacter*> AllowedCharacters; // 0x260
	float ItemDropInteractDuration; // 0x270
	int32_t Price; // 0x274
	bool bIsInstantPickup; // 0x278
	bool bAllowManualInstantPickup; // 0x27a
	bool bCanPickupWithModifiedRange; // 0x27b
	UKSItemStimuliSourceComponent* StimuliSourceComponent; // 0x280
	FVector SightOffset; // 0x288
	TArray<AActor*> ActorsSeenBy; // 0x298
	bool bCanPing; // 0x2a8
	int32_t AssociatedPingID; // 0x2ac
	AKSPlayerState* AssociatedPingPlayerState; // 0x2b0
	UKSItem* ItemAsset; // 0x2b8
	UKSInteractionType* InteractionType; // 0x2c0
	bool bDestroyOnPickUp; // 0x2c8
	FMulticastInlineDelegate OnItemPickup; // 0x2d0
	AKSCharacter* PendingPickupCharacter; // 0x300
	UKSInteractionManager* CurrentInteractionManager; // 0x308
	UKSStaticMeshComponent* CollisionMesh; // 0x310
	EPlayerSilhouetteType InactiveStencilValue; // 0x31b
	EPlayerSilhouetteType ActiveStencilValue; // 0x31c
	FRotator LootSiteSpawnRotation; // 0x320
	FGameplayTagContainer SkinTagContainer; // 0x330
	AController* DropHidePlayer; // 0x368
	bool bClientDropUnhide; // 0x370
	int32_t OriginalOwnerId; // 0x374
	int32_t OriginalOwnerTeamNum; // 0x378
	TArray<FGameplayTag> ItemTags; // 0x380
	bool bIsPlayerDrop; // 0x390
	EKSRarity Rarity; // 0x391
	EDropPickupConfig DropPickupConfig; // 0x392
	int32_t ObjectiveId; // 0x394
	UAkAudioEvent* PickupSound; // 0x398
	UKSNudgeComponent* NudgeComponent; // 0x3a0
	bool bCanBeNudged; // 0x3a8
	bool bOnlyVisibleIfCanPickup; // 0x3a9
};

struct UParticleModuleSubUVMovie : UParticleModuleSubUV {
	char bUseEmitterTime : 1; // 0x70
	FRawDistributionFloat FrameRate; // 0x78
	int32_t StartingFrame; // 0xa8
};

struct ULocalizedOverlays : UOverlays {
	UBasicOverlays* DefaultOverlays; // 0x28
	TMap<FString, UBasicOverlays*> LocaleToOverlaysMap; // 0x30
};

struct UBoxComponent : UShapeComponent {
	FVector BoxExtent; // 0x448
	float LineThickness; // 0x454
};

struct UANotifyState_DropMagazine_C : UAnimNotifyState {
	bool Is DodgeRollReload; // 0x30
};

struct UWBP_MasteryPointsCount_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetSwitcher* AlignmentSwitcher; // 0x240
	UTextBlock* AmountText; // 0x248
	UTextBlock* AmountText_2; // 0x250
	UScaleBox* Icon; // 0x258
	UScaleBox* Icon_2; // 0x260
	UImage* IconMasteryPoints; // 0x268
	UImage* IconMasteryPoints_2; // 0x270
	UTextBlock* MasteryPointsTextSmall; // 0x278
	UTextBlock* MasteryPointsTextSmall_2; // 0x280
	ETextJustify Alignment; // 0x288
	EKSWeaponMasteryType MasteryScreenMode; // 0x289
};

struct USynthSamplePlayer : USynthComponent {
	USoundWave* SoundWave; // 0x6e0
	FMulticastInlineDelegate OnSampleLoaded; // 0x6e8
	FMulticastInlineDelegate OnSamplePlaybackProgress; // 0x6f8
};

struct USkeletalMeshSimplificationSettings : UDeveloperSettings {
	FName SkeletalMeshReductionModuleName; // 0x38
};

struct AKSSeasonalItemSpawnLocation : AActor {
	USceneComponent* SceneRootComponent; // 0x220
	FMulticastInlineDelegate OnSpawnLocationCleared; // 0x238
};

struct UKSVOComponent : UActorComponent {
	AKSCharacter* CharacterOwner; // 0xc8
	float GlobalCooldownDuration; // 0x110
	TMap<int32_t, float> CooldownGroupMap; // 0x118
	float TimeNextEventCanPlayAfter; // 0x168
	FDelegate OnVOLineFinished; // 0x16c
	float VODuckingAmount; // 0x17c
};

struct ULevelStreamingLightingScenario : ULevelStreaming {
	ELightingScenarioQuality LightingScenarioQuality; // 0x150
	bool bDataIsStripped; // 0x151
};

struct UInterpTrackInstParticleReplay : UInterpTrackInst {
	float LastUpdatePosition; // 0x28
};

struct UWBP_CustomizeBanner_C : UKSPlayerCosmeticWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowAnim; // 0x528
	UKSSortableGridPanel* ItemContainer; // 0x530
	UScrollBox* ScrollBox_1; // 0x538
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner; // 0x540
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner_2; // 0x548
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner_3; // 0x550
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner_4; // 0x558
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner_5; // 0x560
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner_6; // 0x568
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner_7; // 0x570
	UWBP_CosmeticItem_Banner_C* WBP_CosmeticItem_Banner_8; // 0x578
	UWBP_PlayerIDCustomize_C* WBP_PlayerIDCustomize; // 0x580
	TArray<UWBP_CosmeticItem_Banner_C*> BannerItems; // 0x588
	UWBP_CosmeticItem_Banner_C* EquippedBanner; // 0x598
	UKSLoadoutDataFactory* LoadoutDataFactory; // 0x5a0
	UPlatformInventoryItem* HoveredItem; // 0x5a8
	int32_t VisibleGridRows; // 0x5b0
	int32_t VisibleGridColumns; // 0x5b4
};

struct UKSSightStimulusComponent : UKSPlayerStimulusComponentBase {
	float MaximumStimulusDistance; // 0xd8
	float MaximumStimulusAngle; // 0xdc
	FVector OffsetFromOwner; // 0xe0
	bool bCheckForOffsetBlocks; // 0xec
};

struct UKSPlayerMod_DownedRoll : UKSPlayerMod {
	float CooldownMultiplier; // 0x330
	float DistanceMultiplier; // 0x334
	float SpeedMultiplier; // 0x338
	float AdditionalDownedHealth; // 0x33c
};

struct UKSPlayerMod_VaultHeight : UKSPlayerMod {
	float VaultHeight; // 0x330
	FName VaultName; // 0x334
};

struct UWBP_YellowButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnClick_Inactive; // 0x528
	UWidgetAnimation* Highlight_Inactive; // 0x530
	UWidgetAnimation* OnClick; // 0x538
	UWidgetAnimation* Highlight; // 0x540
	UImage* BtnEdge; // 0x548
	UImage* BtnFill; // 0x550
	UImage* BtnFillGradient; // 0x558
	UImage* BtnFrame; // 0x560
	UImage* BtnShimmer; // 0x568
	UOverlay* BtnStandardWrapper; // 0x570
	UNamedSlot* ButtonContent; // 0x578
	UTextBlock* ButtonText; // 0x580
	UButton* HitTarget; // 0x588
	UWBP_KeyCallout_C* KeyPrompt; // 0x590
	UCanvasPanel* KeyPromptContainer; // 0x598
	USizeBox* SizeWrapper; // 0x5a0
	FMulticastInlineDelegate OnClicked; // 0x5a8
	FMulticastInlineDelegate OnHovered; // 0x5b8
	FMulticastInlineDelegate OnUnhovered; // 0x5c8
	UAkAudioEvent* ClickMedBtnSFX; // 0x5d8
	FText DefaultButtonText; // 0x5e0
	float DefaultWidth; // 0x5f8
	bool ShowPromptOnFocus; // 0x5fc
	FKey PromptKey; // 0x600
	UAkAudioEvent* HoverMedBtnSFX; // 0x618
	bool IsConfirm; // 0x620
	bool IsCancel; // 0x621
	bool IsInActiveState; // 0x622
};

struct UInputBehaviorSet : UObject {
	TArray<FBehaviorInfo> Behaviors; // 0x28
};

struct UParticleModuleSpawn : UParticleModuleSpawnBase {
	FRawDistributionFloat Rate; // 0x38
	FRawDistributionFloat RateScale; // 0x68
	EParticleBurstMethod ParticleBurstMethod; // 0x98
	TArray<FParticleBurst> BurstList; // 0xa0
	FRawDistributionFloat BurstScale; // 0xb0
	char bApplyGlobalSpawnRateScale : 1; // 0xe0
};

struct UKSAnimNotifyState_Trail : UAnimNotifyState_Trail {
	FName SkinTableRowName; // 0x58
};

struct UABP_GuavaSpider_C : UKSCharacterAnimInstBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x3d0
	FAnimNode_Root AnimGraphNode_Root; // 0x3d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_19; // 0x418
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_18; // 0x450
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_17; // 0x488
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_16; // 0x4c0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_15; // 0x4f8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_14; // 0x530
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_13; // 0x568
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_12; // 0x5a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_11; // 0x5d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_10; // 0x610
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_9; // 0x648
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8; // 0x680
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_7; // 0x6b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_6; // 0x6f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_5; // 0x728
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x760
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_16; // 0x798
	FAnimNode_StateResult AnimGraphNode_StateResult_13; // 0x820
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_2; // 0x860
	FAnimNode_StateResult AnimGraphNode_StateResult_12; // 0x950
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_15; // 0x990
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_14; // 0xa18
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_13; // 0xaa0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_12; // 0xb28
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum; // 0xbb0
	FAnimNode_StateResult AnimGraphNode_StateResult_11; // 0xc70
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_11; // 0xcb0
	FAnimNode_StateResult AnimGraphNode_StateResult_10; // 0xd38
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_10; // 0xd78
	FAnimNode_StateResult AnimGraphNode_StateResult_9; // 0xe00
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9; // 0xe40
	FAnimNode_StateResult AnimGraphNode_StateResult_8; // 0xec8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_8; // 0xf08
	FAnimNode_StateResult AnimGraphNode_StateResult_7; // 0xf90
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_7; // 0xfd0
	FAnimNode_StateResult AnimGraphNode_StateResult_6; // 0x1058
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6; // 0x1098
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x1120
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5; // 0x11d0
	FAnimNode_StateResult AnimGraphNode_StateResult_5; // 0x1258
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer; // 0x1298
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x1388
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0x13c8
	FAnimNode_Slot AnimGraphNode_Slot; // 0x1488
	FAnimNode_Inertialization AnimGraphNode_Inertialization; // 0x14e0
	FAnimNode_LookAt AnimGraphNode_LookAt; // 0x1560
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2; // 0x1720
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2; // 0x1750
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x1780
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x1830
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x18b8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x1968
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone_2; // 0x1998
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x1ab0
	FAnimNode_ModifyBone AnimGraphNode_ModifyBone; // 0x1ae0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x1bf8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x1cc0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x1cf8
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive; // 0x1d30
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x1e08
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x1e40
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x1e78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x1eb0
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x1f38
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x1f78
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x2000
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x2040
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x20c8
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x2108
	float Speed; // 0x21c8
	AKSVehicle_RCCrawler* SpiderCharacter; // 0x21d0
	bool IsJumping; // 0x21d8
	bool IsFalling; // 0x21d9
	float LandingAlpha; // 0x21dc
	bool Deactivated; // 0x21e0
	UAnimSequenceBase* Turn in Place; // 0x21e8
	bool IsTurnInPlace; // 0x21f0
	bool TurnRight; // 0x21f1
	ABP_GuavaSpider_C* BPSpiderCharacter; // 0x21f8
	float TurnInPlaceRate; // 0x2200
	EKSMovementDirection PrevMovementDirection; // 0x2204
	EKSMovementDirection CurrentMovementDirection; // 0x2205
	EKSMovementDirection NewMovementDirection; // 0x2206
	FVector PreviousActorLocation; // 0x2208
	float WalkPlayRate; // 0x2214
	float Right; // 0x2218
	float Forward; // 0x221c
	bool isDestroyed; // 0x2220
	float JumpDirectionAlpha; // 0x2224
};

struct UKSActivityComponent_Contract : UKSActivityComponent {
	FGameplayTag TimedContractTag; // 0x30
	bool AllowRerolls; // 0x38
	int32_t RerollTrackerItemId; // 0x3c
};

struct UBookMark : UBookmarkBase {
	FVector Location; // 0x28
	FRotator Rotation; // 0x34
	TArray<FString> HiddenLevels; // 0x40
};

struct UKSBattlePassProgressionManager : UKSActivityManagerBase {
	FMulticastInlineDelegate OnBattlePassProgressionActivitiesReady; // 0x228
	bool BattlePassReady; // 0x238
};

struct UKSButtonSoundLibrary : UKSUISoundLibrary {
	UAkAudioEvent* ButtonClicked; // 0x28
	UAkAudioEvent* ButtonHovered; // 0x30
	UAkAudioEvent* ButtonUnhovered; // 0x38
};

struct UParticleModuleTypeDataBeam2 : UParticleModuleTypeDataBase {
	EBeam2Method BeamMethod; // 0x30
	int32_t TextureTile; // 0x34
	float TextureTileDistance; // 0x38
	int32_t Sheets; // 0x3c
	int32_t MaxBeamCount; // 0x40
	float Speed; // 0x44
	int32_t InterpolationPoints; // 0x48
	char bAlwaysOn : 1; // 0x4c
	int32_t UpVectorStepSize; // 0x50
	FName BranchParentName; // 0x54
	FRawDistributionFloat Distance; // 0x60
	EBeamTaperMethod TaperMethod; // 0x90
	FRawDistributionFloat TaperFactor; // 0x98
	FRawDistributionFloat TaperScale; // 0xc8
	char RenderGeometry : 1; // 0xf8
	char RenderDirectLine : 1; // 0xf8
	char RenderLines : 1; // 0xf8
	char RenderTessellation : 1; // 0xf8
};

struct UAkRoomComponent : UAkGameObject {
	char bEnable : 1; // 0x228
	UAkRoomComponent* NextLowerPriorityComponent; // 0x230
	float Priority; // 0x238
	float WallOcclusion; // 0x23c
	float AuxSendLevel; // 0x240
	bool AutoPost; // 0x244
};

struct UKSActivityRewardCondition_HealthPercent : UKSActivityRewardCondition {
	float MinHealthPercent; // 0x30
	float MaxHealthPercent; // 0x34
	bool CheckInstigator; // 0x38
	bool CheckTarget; // 0x39
};

struct UMovieScene3DConstraintSection : UMovieSceneSection {
	FGuid ConstraintId; // 0xe0
	FMovieSceneObjectBindingID ConstraintBindingID; // 0xf0
};

struct UEnvQueryGenerator_OnCircle : UEnvQueryGenerator_ProjectedPoints {
	FAIDataProviderFloatValue CircleRadius; // 0x80
	FAIDataProviderFloatValue SpaceBetween; // 0xb8
	FAIDataProviderIntValue NumberOfPoints; // 0xf0
	EPointOnCircleSpacingMethod PointOnCircleSpacingMethod; // 0x128
	FEnvDirection ArcDirection; // 0x130
	FAIDataProviderFloatValue ArcAngle; // 0x150
	float AngleRadians; // 0x188
	UEnvQueryContext* CircleCenter; // 0x190
	bool bIgnoreAnyContextActorsWhenGeneratingCircle; // 0x198
	FAIDataProviderFloatValue CircleCenterZOffset; // 0x1a0
	FEnvTraceData TraceData; // 0x1d8
	char bDefineArc : 1; // 0x208
};

struct UMicroTransactionBase : UPlatformInterfaceBase {
	TArray<FPurchaseInfo> AvailableProducts; // 0x38
	FString LastError; // 0x48
	FString LastErrorSolution; // 0x58
};

struct UWBP_ranked_level_tracker_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* CurrentProgress; // 0x528
	UWBP_RankedIcon_C* RankBadgeEnd; // 0x530
	UWBP_RankedIcon_C* RankBadgeStart; // 0x538
	UTextBlock* TotalProgress; // 0x540
	UWBP_ProgressEarnedBar_C* XPBar; // 0x548
	UHorizontalBox* XPEarnedWrapper; // 0x550
	FPlayerProgression Progression; // 0x558
	UAkAudioEvent* PlayLevelUpRewardSFX; // 0x6c8
	UAkAudioEvent* PlayLevelProgressionSFX; // 0x6d0
	UAkAudioEvent* StopLevelProgressionSFX; // 0x6d8
	FMulticastInlineDelegate OnLevelUpEvent; // 0x6e0
	FMulticastInlineDelegate OnLevelDownEvent; // 0x6f0
	int32_t CurrentLevel; // 0x700
};

struct UGameEngine : UEngine {
	float MaxDeltaTime; // 0xe58
	float ServerFlushLogInterval; // 0xe5c
	UGameInstance* GameInstance; // 0xe60
};

struct UANotifyState_HideUplineDevice_C : UAnimNotifyState {
	bool Keep ZiplineVisible; // 0x30
	bool bKeepGadgetUnhidden; // 0x31
};

struct UWBP_text_button_C : UUserWidget {
	UImage* Image_69; // 0x238
};

struct UAkInitBankAssetData : UAkAssetDataWithMedia {
	TArray<FAkPluginInfo> PluginInfos; // 0x88
};

struct USceneComponent : UActorComponent {
	TWeakObjectPtr<APhysicsVolume> PhysicsVolume; // 0xb8
	USceneComponent* AttachParent; // 0xc0
	FName AttachSocketName; // 0xc8
	TArray<USceneComponent*> AttachChildren; // 0xd0
	TArray<USceneComponent*> ClientAttachedChildren; // 0xe0
	FVector RelativeLocation; // 0x11c
	FRotator RelativeRotation; // 0x128
	FVector RelativeScale3D; // 0x134
	FVector ComponentVelocity; // 0x140
	char bComponentToWorldUpdated : 1; // 0x14c
	char bAbsoluteLocation : 1; // 0x14c
	char bAbsoluteRotation : 1; // 0x14c
	char bAbsoluteScale : 1; // 0x14c
	char bVisible : 1; // 0x14c
	char bShouldBeAttached : 1; // 0x14c
	char bShouldSnapLocationWhenAttached : 1; // 0x14c
	char bShouldSnapRotationWhenAttached : 1; // 0x14d
	char bShouldUpdatePhysicsVolume : 1; // 0x14d
	char bHiddenInGame : 1; // 0x14d
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x14d
	char bUseAttachParentBound : 1; // 0x14d
	EComponentMobility Mobility; // 0x14f
	EDetailMode DetailMode; // 0x150
	FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x151
};

struct UKSPlayerMod_DamageDealt : UKSPlayerMod {
	float DamageDealtMultiplier; // 0x330
	float SlowedDamageDealtMultiplier; // 0x334
	float DeployableDamageDealtMultiplier; // 0x338
	bool bRequireHeadshot; // 0x33c
	TArray<UDamageType*> ValidDamageTypes; // 0x340
};

struct UShowLoginUICallbackProxy : UBlueprintAsyncActionBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct APhysicsVolume : AVolume {
	float TerminalVelocity; // 0x258
	int32_t Priority; // 0x25c
	float FluidFriction; // 0x260
	char bWaterVolume : 1; // 0x264
	char bPhysicsOnContact : 1; // 0x264
};

struct UKSAnimNotify_PlayParticleEffect : UAnimNotify_PlayParticleEffect {
	FName SkinTableRowName; // 0x90
};

struct UKSTimerComponent : UActorComponent {
	FMulticastInlineDelegate TimerActive; // 0xb0
	FMulticastInlineDelegate TimerComplete; // 0xc0
	FPGame_ReplicatedTimer ReplicatedTimer; // 0xd0
	FKSTimerState TimerState; // 0x108
	FKSTimerState LocalTimerState; // 0x110
};

struct UWBP_RogueMasteryTrackSection_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UHorizontalBox* MasteryRewardEntries; // 0x528
	UWBP_ProgressEarnedBar_C* WBP_ProgressEarnedBar; // 0x530
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry; // 0x538
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_2; // 0x540
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_3; // 0x548
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_4; // 0x550
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_5; // 0x558
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_6; // 0x560
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_7; // 0x568
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_8; // 0x570
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_9; // 0x578
	UWBP_RogueMasteryTrackLevel_C* WBP_RogueMasteryTrackEntry_10; // 0x580
	FMulticastInlineDelegate OnTrackEntrySelected; // 0x588
	FActivityTier LastSelectedActivity; // 0x598
};

struct UKSModInst_RevealAreaToTeam : UKSModInst_FireWeaponOnActivation {
	bool bAppliesScrambleEffectToEnemies; // 0x508
	FKSRevealInfo RevealAreaRevealParameters; // 0x510
};

struct UWBP_ProgressionCardSlot_MercMasteryXP_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* OnLevelUp_Enhanced_2; // 0x240
	UWidgetAnimation* OnLevelUp_Enhanced; // 0x248
	UWidgetAnimation* OnLevelUp_2; // 0x250
	UWidgetAnimation* OnLevelUp; // 0x258
	UImage* Block01; // 0x260
	UImage* Block02; // 0x268
	UImage* Block03; // 0x270
	UImage* Block04; // 0x278
	UImage* Block05; // 0x280
	UImage* Block06; // 0x288
	UImage* Block07; // 0x290
	UImage* Block08; // 0x298
	UTextBlock* Category; // 0x2a0
	UImage* Flare01; // 0x2a8
	UImage* Flare02; // 0x2b0
	UImage* Flare03; // 0x2b8
	UImage* Flare04; // 0x2c0
	UImage* Flare05; // 0x2c8
	UImage* Flare06; // 0x2d0
	UImage* Glow01; // 0x2d8
	UImage* Glow02; // 0x2e0
	UImage* Glow02_2; // 0x2e8
	UImage* Particles01; // 0x2f0
	UTextBlock* PointsEarned; // 0x2f8
	UTextBlock* RankChangeText; // 0x300
	UWBP_RogueMasteryPortrait_C* RogueMasteryFrame; // 0x308
	UImage* Scanlines01; // 0x310
	UImage* TextGlow01; // 0x318
	UWBP_ProgressionTally_C* WBP_ProgressionTally_C_1; // 0x320
	UWBP_ProgressEarnedBar_C* XPProgressEarnedBar; // 0x328
	FMulticastInlineDelegate OnMercLevelUp; // 0x330
	FPlayerProgression PlayerProgress; // 0x340
};

struct UAISenseConfig_Sight : UAISenseConfig {
	UAISense_Sight* Implementation; // 0x48
	float SightRadius; // 0x50
	float LoseSightRadius; // 0x54
	float PeripheralVisionAngleDegrees; // 0x58
	FAISenseAffiliationFilter DetectionByAffiliation; // 0x5c
	float AutoSuccessRangeFromLastSeenLocation; // 0x60
};

struct UProgressBar : UWidget {
	FProgressBarStyle WidgetStyle; // 0x110
	USlateWidgetStyleAsset* Style; // 0x2b0
	USlateBrushAsset* BackgroundImage; // 0x2b8
	USlateBrushAsset* FillImage; // 0x2c0
	USlateBrushAsset* MarqueeImage; // 0x2c8
	float Percent; // 0x2d0
	EProgressBarFillType BarFillType; // 0x2d4
	bool bIsMarquee; // 0x2d5
	FVector2D BorderPadding; // 0x2d8
	FDelegate PercentDelegate; // 0x2e0
	FLinearColor FillColorAndOpacity; // 0x2f0
	FDelegate FillColorAndOpacityDelegate; // 0x300
};

struct UKSWeaponMilestoneUnlock : UKSItem {
	TSoftObjectPtr<UKSWeaponAsset> WeaponReference; // 0x250
};

struct AKSProjectile_ReviveDart : AKSProjectile {
	TWeakObjectPtr<AKSCharacter> TargetCharacter; // 0x950
	float ReviveTime; // 0x968
	UKSPlayerMod* TargetCharacterMod; // 0x970
	FMulticastInlineDelegate OnSucceed; // 0x978
	FMulticastInlineDelegate OnFailed; // 0x988
};

struct UWBP_StoreButtonSmall_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnHover; // 0x528
	UWidgetAnimation* SlideLeftToPrimary; // 0x530
	UWidgetAnimation* SlideLeftToSecondary; // 0x538
	UWBP_StoreItemInterior_C* PrimaryStoreItem; // 0x540
	UWBP_StoreItemInterior_C* SecondaryStoreItem; // 0x548
	UWBP_StoreItemRotator_C* StoreItemRotator; // 0x550
	UWBP_StorePanelButton_C* WBP_StorePanelButton; // 0x558
	UKSStoreSectionItem* MyStoreSection; // 0x560
	int32_t CurrentStoreIndex; // 0x568
	bool IsRotating; // 0x56c
	float TimeVisible; // 0x570
	float MaxTimeVisible; // 0x574
	float ROTATION_TIMER_INTERVAL; // 0x578
};

struct UDatasmithAssetUserData : UAssetUserData {
	TMap<FName, FString> MetaData; // 0x28
};

struct UDatasmithCommonTessellationOptions : UDatasmithOptionsBase {
	FDatasmithTessellationOptions Options; // 0x28
};

struct USoundSubmix : USoundSubmixWithParentBase {
	char bMuteWhenBackgrounded : 1; // 0x40
	TArray<USoundEffectSubmixPreset*> SubmixEffectChain; // 0x48
	USoundfieldEncodingSettingsBase* AmbisonicsPluginSettings; // 0x58
	int32_t EnvelopeFollowerAttackTime; // 0x60
	int32_t EnvelopeFollowerReleaseTime; // 0x64
	float OutputVolume; // 0x68
	FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x70
};

struct UKSNewsRotatorData : UKSJsonData {
	UTexture2DDynamic* Image; // 0x80
	FText Header; // 0x88
	FText Body; // 0xa0
	ENewsActions PanelAction; // 0xb8
	FString ActionDetails; // 0xc0
};

struct UMainEnvironmentTracker_C : UEnvironmentTrackerComponent {
	TArray<FName> Environment Priorties; // 0x138
	FName Temp_name_Variable; // 0x148
	bool K2Node_SwitchName_CmpSuccess; // 0x150
	FName Temp_name_Variable_2; // 0x154
	FName Temp_name_Variable_3; // 0x15c
	FName Temp_name_Variable_4; // 0x164
	FName K2Node_Event_OldEnvironment; // 0x16c
};

struct UWBP_Daily_Challenge_Timer_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* ContractTimer; // 0x528
	UWidgetSwitcher* NextChallengeSwitcher; // 0x530
	float CachedSecondsRemaining; // 0x538
	float CachedRealTimeSeconds; // 0x53c
};

struct UCanvas : UObject {
	float OrgX; // 0x28
	float OrgY; // 0x2c
	float ClipX; // 0x30
	float ClipY; // 0x34
	FColor DrawColor; // 0x38
	char bCenterX : 1; // 0x3c
	char bCenterY : 1; // 0x3c
	char bNoSmooth : 1; // 0x3c
	int32_t SizeX; // 0x40
	int32_t SizeY; // 0x44
	FPlane ColorModulate; // 0x50
	UTexture2D* DefaultTexture; // 0x60
	UTexture2D* GradientTexture0; // 0x68
	UReporterGraph* ReporterGraph; // 0x70
};

struct ADestructibleActor : AActor {
	UDestructibleComponent* DestructibleComponent; // 0x220
	FMulticastInlineDelegate OnActorFracture; // 0x228
};

struct UInterpData : UObject {
	float InterpLength; // 0x28
	float PathBuildTime; // 0x2c
	TArray<UInterpGroup*> InterpGroups; // 0x30
	UInterpCurveEdSetup* CurveEdSetup; // 0x40
	float EdSectionStart; // 0x48
	float EdSectionEnd; // 0x4c
	char bShouldBakeAndPrune : 1; // 0x50
	UInterpGroupDirector* CachedDirectorGroup; // 0x58
	TArray<FName> AllEventNames; // 0x60
};

struct ULiveLinkTimecodeProvider : UTimecodeProvider {
	FLiveLinkSubjectKey SubjectKey; // 0x30
	ELiveLinkTimecodeProviderEvaluationType Evaluation; // 0x48
	bool bOverrideFrameRate; // 0x4c
	FFrameRate OverrideFrameRate; // 0x50
	int32_t BufferSize; // 0x58
};

struct ABandwidthTestActor : AActor {
	FBandwidthTestGenerator BandwidthGenerator; // 0x220
};

struct UGridPanel : UPanelWidget {
	TArray<float> ColumnFill; // 0x128
	TArray<float> RowFill; // 0x138
};

struct USkinObjectManagerComponent : UActorComponent {
	TMap<FName, UMultiSkinObject*> SkinObjects; // 0xb0
	TSet<UMultiSkinObject*> SkinObjectsSet; // 0x100
};

struct ALevelSequenceMediaController : AActor {
	ALevelSequenceActor* Sequence; // 0x228
	UMediaComponent* MediaComponent; // 0x230
	float ServerStartTimeSeconds; // 0x238
};

struct UKSStatWrapper : UObject {
	TSoftObjectPtr<UTexture2D> Icon; // 0x28
	FText DisplayName; // 0x50
	bool ShouldRepresentValueAsFloat; // 0x68
};

struct UEndMatchCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct ALobby_Core_RV_C : ALevelScriptActor {
	FPointerToUberGraphFrame UberGraphFrame; // 0x228
};

struct AKSArmorAssetDrop : AKSWeaponAssetDrop {
	float RemainingDurability; // 0x878
	bool bCanReplaceBetterArmor; // 0x87c
};

struct AKSWeapon_MacGuffin : AKSWeapon_Aimed {
	bool bDropOffSuccess; // 0x800
	bool bHasBeenDropped; // 0x801
	float DropThrowSpeed; // 0x804
	float DropPositionOffset; // 0x808
};

struct UKSPlayerQueryDataFactory : UPUMG_DataFactory {
	FTimerHandle CheckTimerHandle; // 0x138
};

struct UKSSettingsGroup : UKSWidget {
	TArray<UKSSettingsContainer*> SettingsContainers; // 0x520
	UKSSettingsContainer* SettingsContainerClass; // 0x530
	FKSSettingsGroupConfig GroupConfig; // 0x538
};

struct UKSCharacterAnimInst : UKSCharacterAnimInstBase {
	float GadgetAdditiveRetrieveBlendTime; // 0x3c8
	float GadgetAdditiveThrowBlendTime; // 0x3cc
	bool bMountedWeaponActive; // 0x3d0
	bool bMountedOnCoverActive; // 0x3d1
	float MountedWeaponTargetHeight; // 0x3d4
	float MountedWeaponModifiedAimPitch; // 0x3d8
	FVector MountedWeaponMountLocation; // 0x3dc
	FRotator MountedWeaponMountRotation; // 0x3e8
	bool bEmoteMontagePlayingGlobal; // 0x3f4
	bool bEmoteMontagePlayingLocal; // 0x3f5
	float EmoteMontageGlobalWeight; // 0x3f8
	float EmoteMontageLocalWeight; // 0x3fc
	FName EmoteSlotName; // 0x400
	int32_t EmotePropRandomizerStoredInt; // 0x408
	bool bEmotePropRandomizerStaticSpawned; // 0x40c
	bool bEmotePropRandomizerSkeletalSpawned; // 0x40d
	float EmoteFastBlendMultiplier; // 0x410
	float EmoteSlowBlendMultiplier; // 0x414
	bool bSprayIsPlaying; // 0x418
	int32_t CurrentMeshLOD; // 0x41c
	float Speed; // 0x420
	float SpeedXY; // 0x424
	float SpeedZ; // 0x428
	float Forward; // 0x42c
	float Right; // 0x430
	float BodyLean; // 0x434
	FRotator BodyLeanRotator; // 0x438
	FRotator HeadLeanRotator; // 0x444
	bool bEnableAnimMirroring; // 0x450
	char bCanTransitionDirections : 1; // 0x454
	bool bEnableMovementImprovements; // 0x458
	bool bEnableDynamicLobbyPose; // 0x459
	float SprintImpulseAmount; // 0x45c
	FVector2D SprintLeftRightBodyLeanRange; // 0x460
	float ForwardRotate; // 0x468
	float RightRotate; // 0x46c
	float BackRotate; // 0x470
	float LeftRotate; // 0x474
	float ForwardRotatePostMirror; // 0x478
	float RightRotatePostMirror; // 0x47c
	float BackRotatePostMirror; // 0x480
	float LeftRotatePostMirror; // 0x484
	FVector ForwardCrouchPelvicVector; // 0x488
	FVector ForwardCrouchFeetIKVector; // 0x494
	FVector BackCrouchPelvicVector; // 0x4a0
	FVector BackCrouchFeetIKVector; // 0x4ac
	FVector LeftCrouchPelvicVector; // 0x4b8
	FVector LeftCrouchFeetIKVector; // 0x4c4
	FVector RightCrouchPelvicVector; // 0x4d0
	FVector RightCrouchFeetIKVector; // 0x4dc
	float ForwardCrouchPelvicOffset; // 0x4e8
	float ForwardCrouchFeetIKOffset; // 0x4ec
	float BackCrouchPelvicOffset; // 0x4f0
	float BackCrouchFeetIKOffset; // 0x4f4
	float LeftCrouchPelvicOffset; // 0x4f8
	float LeftCrouchFeetIKOffset; // 0x4fc
	float RightCrouchPelvicOffset; // 0x500
	float RightCrouchFeetIKOffset; // 0x504
	float CurrentAccelVectorLength; // 0x508
	float MaxSlowWalkSpeed; // 0x50c
	float MaxWalkSpeed; // 0x510
	float MaxADSWalkSpeed; // 0x514
	float MaxSprintSpeed; // 0x518
	float MaxCrouchSpeed; // 0x51c
	float MaxADSCrouchSpeed; // 0x520
	char bShouldTransitionADSCrouch : 1; // 0x524
	float CurSpeedFraction; // 0x528
	float CurSpeedScaling; // 0x52c
	bool bDoCheckFirstStepCurve; // 0x530
	float FirstStepTransitionAlpha; // 0x534
	float SpeedWarpingAlpha; // 0x538
	float ParachuteMovementPitch; // 0x53c
	float ParachuteMovementYaw; // 0x540
	float ParachuteMovementForward; // 0x544
	float ParachuteMovementLateral; // 0x548
	bool bSkydiveTurnOverridesStrafe; // 0x54c
	bool bIsNoseDiving; // 0x54d
	float ParachuteYawInterpSpeed; // 0x550
	float ParachutePitchInterpSpeed; // 0x554
	float ParachuteForwardInterpSpeed; // 0x558
	float ParachuteLateralInterpSpeed; // 0x55c
	float ParachuteForwardThreshold; // 0x560
	bool bParachuteReady; // 0x564
	float ParachuteYawRotationFactor; // 0x568
	FVector LastFreeFallMovementVector; // 0x56c
	FFloatHitSpringState HitSpringRollState; // 0x578
	FFloatHitSpringState HitSpringPitchState; // 0x580
	FFloatHitSpringState HitSpringYawState; // 0x588
	float HitRotationAmountRoll; // 0x590
	float HitRotationAmountPitch; // 0x594
	float HitRotationAmountYaw; // 0x598
	float HitRotationPitchMax; // 0x59c
	float HitRotationRollMax; // 0x5a0
	float HitRotationYawMax; // 0x5a4
	FVector PelvisHitOffset; // 0x5a8
	FRotator SpineHitOffset; // 0x5b4
	FRotator NeckHitOffset; // 0x5c0
	FRotator ArmHitOffset; // 0x5cc
	TArray<FHitReaction> QueuedHits; // 0x5d8
	UCurveVector* HitReactionTimeScale; // 0x5e8
	UCurveFloat* HitReactionDamageScale; // 0x5f0
	float ADSHitReactionBlend; // 0x5f8
	float AOSHitReactionBlend; // 0x5fc
	float HipfireHitReactionBlend; // 0x600
	float SimClientHitReactionBlend; // 0x604
	float CurrentHitReactionBlend; // 0x608
	float SpineFireRotationLimit; // 0x60c
	float NeckFireRotationLimit; // 0x610
	float ClavicleFireRotationLimit; // 0x614
	float UpperArmFireRotationPitchLimit; // 0x618
	float UpperArmFireRotationYawLimit; // 0x61c
	float ForearmFireRotationLimit; // 0x620
	FFloatHitSpringState SpineFireSpringState; // 0x624
	FFloatHitSpringState NeckFireSpringState; // 0x62c
	FFloatHitSpringState ClavicleFireSpringState; // 0x634
	FFloatHitSpringState UpperArmFireSpringState; // 0x63c
	FFloatHitSpringState UpperArmFireYawSpringState; // 0x644
	FFloatHitSpringState ForearmFireSpringState; // 0x64c
	float SpineFireRotationAmountPitch; // 0x654
	float NeckFireRotationAmountPitch; // 0x658
	float ClavicleFireRotationAmountYaw; // 0x65c
	float UpperArmFireRotationAmountPitch; // 0x660
	float UpperArmFireRotationAmountYaw; // 0x664
	float ForarmFireRotationAmountPitch; // 0x668
	FRotator SpineFireOffset; // 0x66c
	FRotator NeckFireOffset; // 0x678
	FRotator ClavicleFireOffset; // 0x684
	FRotator UpperArmFireOffset; // 0x690
	FRotator ForearmFireOffset; // 0x69c
	float WeaponFireAlpha; // 0x6a8
	float WeaponAdditiveAlpha; // 0x6ac
	FRecoilProfile CurrentRecoilProfile; // 0x6b0
	int32_t FireImpulseCounter; // 0x89c
	bool bIsRecoiling; // 0x8a0
	bool bBypassRecoiling; // 0x8a1
	TMap<FName, UKSCharacterAnimInst*> SubAnimInstances; // 0x8a8
	bool bCanSwitchStartAnim; // 0x8f8
	bool bTriggerCustomPivot; // 0x8f9
	bool bActionDisablesLeftHandIKAlpha; // 0x8fa
	bool bActionDisablesRightHandIKAlpha; // 0x8fb
	bool bActionDisablesLeftHandGripOnly; // 0x8fc
	bool bActionDisablesRightHandGripOnly; // 0x8fd
	bool bForceDisableLHIK; // 0x8fe
	bool bForceDisableRHIK; // 0x8ff
	bool bUseRightHandGadgetOverride; // 0x900
	bool bShouldUseFootIKDuringFreefall; // 0x901
	float ADSRollValue; // 0x904
	FVector ADSBumpValue; // 0x908
	bool bWantsNonComOffset; // 0x914
	bool bIsWeaponNonComOffset; // 0x915
	bool bSkinUseNonComOffset; // 0x916
	float EngHeadAdditiveAlpha; // 0x918
	bool bTestGadgetAdditive; // 0x91c
	bool GadgetStartedRetrieve; // 0x91d
	bool GadgetFinishedRetrieve; // 0x91e
	bool GadgetStartedThrow; // 0x91f
	bool GadgetFinishedThrow; // 0x920
	float HandIKAdditiveAlpha; // 0x924
	float LeftHandIKAlpha; // 0x928
	float LeftHandIKAlphaTarget; // 0x92c
	float LeftHandIKBlendSpeed; // 0x930
	float RightHandIKAlpha; // 0x934
	float RightHandIKAlphaTarget; // 0x938
	float RightHandIKBlendSpeed; // 0x93c
	float SlowIKBlendSpeed; // 0x940
	float MediumIKBlendSpeed; // 0x944
	float FastIKBlendSpeed; // 0x948
	float UplineIKAlpha; // 0x94c
	float UplineIKAlphaTarget; // 0x950
	int32_t NextLeftHandIKForceRequestId; // 0x954
	bool bLeftHandIKForceOffFromRequests; // 0x958
	TSet<int32_t> LeftHandIkForceOffRequests; // 0x960
	bool bLeftHandIKOffFromMainInstNotifyStates; // 0x9b0
	float FootIKAlpha; // 0xa08
	float FootIKAlphaTarget; // 0xa0c
	FMulticastInlineDelegate OnBeginZipline; // 0xa10
	FMulticastInlineDelegate OnEndZipline; // 0xa20
	FVector ZiplineRootOffset; // 0xa30
	FVector AppliedADSRootTranslation; // 0xa3c
	FVector DefaultADSRootTranslation; // 0xa48
	bool ForceZiplineMontage; // 0xa54
	bool ApplyAimstoZiplineMontage; // 0xa55
	bool ZiplineMontageLHIKOverride; // 0xa56
	float ZiplineMontageLHIKAlpha; // 0xa58
	bool ActionPreventsZiplineIntro; // 0xa5c
	bool ForceZiplineLoop; // 0xa5d
	FVector2D ForwardRotateInputRange; // 0xa60
	FVector2D ForwardRotateOutputRange; // 0xa68
	FVector2D RightRotateInputRange; // 0xa70
	FVector2D RightRotateOutputRange; // 0xa78
	EKSMovementDirection LocomotionStartDirection; // 0xa80
	EKSMovementDirection LocomotionStopDirection; // 0xa81
	EKSMovementDirection LocomotionPivotDirection; // 0xa82
	float MovementDirectionRotate; // 0xa84
	float MovementDirectionRotateOnStartOrStop; // 0xa88
	float DirectionBlendSpeed; // 0xa8c
	float DirectionChangedBlendSpeed; // 0xa94
	bool bUseLimitedMovement; // 0xa98
	bool bEngUseLimitedMovement; // 0xa99
	bool bComUseLimitedMovement; // 0xa9a
	bool bNonComUseLimitedMovement; // 0xa9b
	char bZeroVelocity : 1; // 0xa9c
	char bZeroAcceleration : 1; // 0xa9c
	char bJumping : 1; // 0xa9c
	char bWasJumping : 1; // 0xa9c
	char bDisableUpperBodyLands : 1; // 0xa9c
	char bInFreeFall : 1; // 0xa9c
	char bReadyForFreeFall : 1; // 0xa9c
	char bVaulting : 1; // 0xa9c
	char bIsMantling : 1; // 0xa9d
	char bMantleIsVault : 1; // 0xa9d
	char bCanInterruptMantle : 1; // 0xa9d
	float TotalVaultDuration; // 0xaa0
	UAnimSequence* CurrentMantleSequence; // 0xaa8
	FMantleConfig CurrentMantleConfig; // 0xab0
	float VaultStartTime; // 0xb58
	float PreVaultWorldHeight; // 0xb5c
	float CurrentVaultTime; // 0xb60
	FInterpCurveFloat VaultTimeScaleCurve; // 0xb68
	FInterpCurveFloat VaultScaledVertCurve; // 0xb80
	FVector MantleGrabLocation; // 0xb98
	float MantleDistanceToTop; // 0xba4
	FVector MantleTowardsWallDir; // 0xba8
	bool bMantleIKLeftHand; // 0xbb4
	bool bMantleIKRightHand; // 0xbb5
	float MantleIKLeftHandAlpha; // 0xbb8
	float MantleIKRightHandAlpha; // 0xbbc
	FVector MantleIKLeftHandLocation; // 0xbc0
	FVector MantleIKRightHandLocation; // 0xbcc
	char bDodgeRolling : 1; // 0xbd8
	float DodgeRollDuration; // 0xbdc
	FName DodgeRollDirection; // 0xbe0
	char bIsInPowerSlide : 1; // 0xbe8
	char bAbilityMovement : 1; // 0xbe8
	char bZipLining : 1; // 0xbe8
	char bZipLineBracing : 1; // 0xbe8
	char bZipLineEnding : 1; // 0xbe8
	float ZiplineEndBlendtime; // 0xbec
	float ZiplineEndOffsetBlendtime; // 0xbf0
	char bZipLineIsUpline : 1; // 0xbf4
	char bZipLineIntro : 1; // 0xbf4
	char bStunned : 1; // 0xbf4
	char bIsBlinded : 1; // 0xbf4
	char bHardLand : 1; // 0xbf4
	char bCrouching : 1; // 0xbf4
	char bWantsToCrouch : 1; // 0xbf4
	char bWasCrouchedBeforeRoll : 1; // 0xbf4
	char bSprinting : 1; // 0xbf5
	char bIsInVehicle : 1; // 0xbf5
	UAnimSequence* VehicleIdle; // 0xbf8
	char bIsSwimming : 1; // 0xc00
	char bIsSubmerged : 1; // 0xc00
	FRotator SwimSpineRotation; // 0xc04
	float AdditiveLandsAlphaMin; // 0xc10
	float AdditiveLandsAlphaMax; // 0xc14
	char bCombat : 1; // 0xc18
	char bDead : 1; // 0xc18
	char bDowned : 1; // 0xc18
	char bKnockedBack : 1; // 0xc18
	char bIsStopped : 1; // 0xc18
	FRotator DownedRootFacing; // 0xc1c
	FMulticastInlineDelegate OnGoDown; // 0xc28
	char bActivatingMod : 1; // 0xc38
	char bAnyModsActive : 1; // 0xc38
	bool bEnableSprintAdditiveForAbilities; // 0xc3c
	FName InteractionState; // 0xc40
	bool bIsReviving; // 0xc48
	float IsInVehicleAlpha; // 0xc4c
	float IsInVehicleInverseAlpha; // 0xc50
	float MinZSpeedforJumpLand; // 0xc54
	char bCachedCameraLockout : 1; // 0xc58
	char bCachedCameraLockoutCooldown : 1; // 0xc58
	float CachedCameraLockoutAlpha; // 0xc60
	UAnimSequence* FallDown; // 0xc68
	float AdditiveLandsAlpha; // 0xc70
	bool bDownedCosmetic; // 0xc74
	bool bWasRecentlyRevived; // 0xc75
	bool bHasManuallyCanceledDownedCosmetic; // 0xc76
	FVector PreviousLocalAccelDirection; // 0xc78
	FVector LocalRelativeVelocity; // 0xc84
	float FwdBackIntroLean; // 0xc90
	float LeftRightIntroLean; // 0xc94
	float IntroLeanMultiplier; // 0xc98
	float IntroLeanSpeed; // 0xc9c
	float VelocityVsAccelDotProduct; // 0xca0
	FVector FacingDirection; // 0xca4
	FRotator PowerSlideSlopeAngleRotation; // 0xcb0
	FVector FootHeightAdjustmentOnSlope; // 0xcbc
	FVector PelvisAdjustmentOnSlope; // 0xcc8
	EKSLocomotionState LocomotionState; // 0xcd4
	bool HasLocomotionStartLocation; // 0xcd5
	FVector LocomotionStartLocation; // 0xcd8
	float DistFromLocomotionStart; // 0xce4
	float DistFromLocomotionStartMax; // 0xce8
	bool HasLocomotionStopLocation; // 0xcec
	FVector LocomotionStopLocation; // 0xcf0
	float DistFromLocomotionStop; // 0xcfc
	float LocomotionStopBufferTime; // 0xd00
	float LocomotionStopBufferExpireTime; // 0xd04
	bool bSuccessPivotCompleteThisFrame; // 0xd08
	bool HasLocomotionPivotLocation; // 0xd09
	bool HasLocomotionPrePivotLocation; // 0xd0a
	bool HasLocomotionPostPivotLocation; // 0xd0b
	float LocomotionPivotThreshold; // 0xd0c
	FVector LocomotionPivotLocation; // 0xd10
	FVector CachedLocomotionPivotLocation; // 0xd1c
	float DistFromLocomotionPivot; // 0xd28
	float DistFromLocomotionPivotMax; // 0xd2c
	FVector LocomotionPrePivotLocation; // 0xd30
	float DistFromLocomotionPrePivot; // 0xd3c
	FVector LocomotionPostPivotLocation; // 0xd40
	float DistFromLocomotionPostPivot; // 0xd4c
	bool bLocomotionStartUsesPivotDistance; // 0xd50
	bool HasJumpStartLocation; // 0xd51
	FVector JumpStartLocation; // 0xd54
	bool IsSprintJumping; // 0xd60
	bool IsShortJumping; // 0xd61
	float DistFromJumpStart; // 0xd64
	float DistFromJumpStartMax; // 0xd68
	float ShortJumpThreshold; // 0xd6c
	bool HasJumpLandLocation; // 0xd70
	bool JumpLandLocationOnGround; // 0xd71
	FVector JumpLandLocation; // 0xd74
	FVector JumpLandLocationTarget; // 0xd80
	float JumpLandLocationInterpSpeed; // 0xd8c
	float DistFromJumpLand; // 0xda8
	float InitialDistFromJumpLand; // 0xdac
	float DistFromJumpLandTarget; // 0xdb0
	float DistFromJumpLandInterpSpeed; // 0xdb4
	FVector SmoothedVelocity; // 0xdb8
	float SmoothedVelocityInterp; // 0xdc4
	float SmoothedVelocitySpeedThreshold; // 0xdc8
	float SmoothedVelocityInterpRate; // 0xdcc
	float SmoothedVelocityInterpRateBelowThreshold; // 0xdd0
	float PowerSlideProgress; // 0xdd4
	float PowerSlideAngle; // 0xdd8
	FRotator PowerSlideRotation; // 0xddc
	EKSPowerSlideEndReason PowerSlideEndReason; // 0xde8
	bool bIsPowerSlidingOnSlope; // 0xde9
	bool bIsLocallyViewed; // 0xdea
	bool JumpLandLocationInWater; // 0xdeb
	float DesiredComponentYaw; // 0xdec
	bool bTurnInPlaceInProgress; // 0xdf0
	float TurnInPlaceTurnValue; // 0xdf4
	float CurrentTurnInPlaceThreshold; // 0xdf8
	EKSTurnInPlaceAnimationVariant LastTurnInPlaceAnimationVariant; // 0xdfc
	float TurnInPlaceMinThreshold; // 0xe00
	float TurnInPlaceMaxOffset; // 0xe04
	float TurnInPlaceRetriggerMinThreshold; // 0xe08
	float TurnInPlaceRecoverySpeedWithAcceleration; // 0xe0c
	float TurnInPlaceRecoverySpeed90; // 0xe10
	float TurnInPlaceRecoverySpeed180; // 0xe14
	FRotator AppliedTurnInPlaceRotator; // 0xe18
	FRotator WorldTurnInPlaceRotator; // 0xe24
	bool bDisableTurnInPlaceCounterRotate; // 0xe40
	bool bEnableTurnInPlaceForAOS; // 0xe41
	float EnableCounterRotateBlendTime; // 0xe44
	float DisableCounterRotateBlendTime; // 0xe48
	bool bShouldSplitUpperBody; // 0xe4c
	bool bForceDisableSplitUpperBody; // 0xe4d
	bool bEnableSplitUpperBodyForAbilities; // 0xe4e
	bool bDisableUpperBodyTurnInPlace; // 0xe4f
	bool bIsLockedToWorldRotation; // 0xe50
	bool IsLockedToWorldRotationAlpha; // 0xe51
	FRotator LockedWorldRotation; // 0xe54
	TSet<char> WorldRotationLockIds; // 0xe60
	char NextWorldRotationLockId; // 0xeb0
	bool bIsAimOverShoulder; // 0xed0
	bool bIsLeavingAOS; // 0xed1
	bool bIsAimDownSights; // 0xed2
	float IsAimDownSightsAlpha; // 0xed4
	bool bIsAimDownSightsFirstPerson; // 0xed8
	float IsAimDownSightsFirstPersonAlpha; // 0xedc
	bool bIs3PAimDownSights; // 0xee0
	FRotator PreviousCachedAimRotation; // 0xee4
	FRotator CachedAimRotation; // 0xef0
	FRotator DeltaAimRotation; // 0xefc
	FRotator ThirdPersonAppliedAimRotator; // 0xf08
	float ThirdPersonAimYaw; // 0xf14
	float ThirdPersonAimYawInverted; // 0xf18
	float ThirdPersonAimYawCosmetic; // 0xf1c
	float ThirdPersonEngagedAimYawCosmetic; // 0xf20
	float ThirdPersonAimPitch; // 0xf24
	float ThirdPersonAimPitchInverted; // 0xf28
	float ThirdPersonAimPitchUpline; // 0xf2c
	float ThirdPersonLean; // 0xf30
	float ThirdPersonFwdLean; // 0xf34
	float ThirdPersonLeanAlpha; // 0xf38
	float ThirdPersonLeanMultiplier; // 0xf3c
	float ComLeanMultiplier; // 0xf40
	float NonComLeanMultiplier; // 0xf44
	float EngagedLeanMultiplier; // 0xf48
	float ThirdPersonLeanSpeed; // 0xf4c
	float YawDeltaMinimum; // 0xf50
	float MinPitchAngle; // 0xf54
	float MaxPitchAngle; // 0xf58
	float MinYawAngle; // 0xf5c
	float MaxYawAngle; // 0xf60
	float NormalYawInterpSpeed; // 0xf64
	float ZipLineYawInterpSpeed; // 0xf68
	float ZipLineYawInterpSpeedOver180; // 0xf6c
	float CurrentYawInterpSpeed; // 0xf70
	float TargetYawInterpSpeed; // 0xf74
	float NormalYawInterpAcceleration; // 0xf78
	float ADSBlendToCrouchSlotTime; // 0xf7c
	float ADSBlendToStandingSlotTime; // 0xf80
	char bIsReloading : 1; // 0xf84
	char bIsSwitchingWeapon : 1; // 0xf84
	char bIsUsingItem : 1; // 0xf84
	char bIsUsingAbility : 1; // 0xf84
	char bIsRetrievingWeapon : 1; // 0xf84
	char bIsHacking : 1; // 0xf84
	char bAttachHandWhileCrouching : 1; // 0xf84
	char bAttachHandMelee : 1; // 0xf84
	char bAttachHandWhileIdle : 1; // 0xf85
	char bAttachHandWhileSprinting : 1; // 0xf85
	char bAttachHandWhileMoving : 1; // 0xf85
	char bAttachHandWhileZiplining : 1; // 0xf85
	char bAttachRightHandWhileZiplining : 1; // 0xf85
	char bForceAttachHandIfNotNonCom : 1; // 0xf85
	char bAttachRightHand : 1; // 0xf85
	char bWeaponScale : 1; // 0xf85
	char bRightPropBScale : 1; // 0xf86
	char bLeftPropBScale : 1; // 0xf86
	char bAimsDisabled : 1; // 0xf86
	char bMantlePlaying : 1; // 0xf86
	char bIsPreRagdoll : 1; // 0xf86
	char bIsRagdoll : 1; // 0xf86
	float LeftPropBScaleAlpha; // 0xf88
	float RightPropBScaleAlpha; // 0xf8c
	float FreeFallAlpha; // 0xf90
	float BlindedAlpha; // 0xf94
	float TabletScaleAlpha; // 0xf98
	float HolsterLockAlpha; // 0xf9c
	float PropLockAlpha; // 0xfa0
	float LeftHolsterLockAlpha; // 0xfa4
	float HeadAccessoryScaleAlpha; // 0xfa8
	FRotator DebugDesiredAimDifference; // 0xfac
	bool bUsingZipLineOver180InterpSpeed; // 0xfb8
	FRotator FirstPersonAppliedAimRotator; // 0xfbc
	FVector FirstPersonAppliedBreathStepTranslation; // 0xfc8
	float FirstPersonBreathSpeed; // 0xfd4
	float FirstPersonBreathHeight; // 0xfd8
	float FirstPersonStepSpeedStanding; // 0xfdc
	float FirstPersonStepSpeedCrouching; // 0xfe0
	float FirstPersonStepHeight; // 0xfe4
	float FirstPersonStepMinSpeed; // 0xfe8
	FRotator FirstPersonLaggingAimRotator; // 0xfec
	float Normal1PAimInterpSpeed; // 0xff8
	float CurrentAimPitchSway; // 0xffc
	float CurrentAimPitchSwayOffset; // 0x1000
	float CurrentAimYawSway; // 0x1004
	float CurrentAimYawSwayOffset; // 0x1008
	float NormalLeanAndSwayInterpSpeed; // 0x100c
	float ADSBreathingTime; // 0x101c
	float ADSSteppingTime; // 0x1020
	bool bScaleOutWeapon; // 0x1024
	float WeaponScaleAlpha; // 0x1028
	bool WeaponScaleLeftPropOnly; // 0x102c
	bool WeaponScaleRightPropOnly; // 0x102d
	bool bUnarmed; // 0x102e
	bool bMelee; // 0x102f
	bool bQuickMelee; // 0x1030
	bool bIsUsingMedPen; // 0x1031
	bool bEnableMeleeLowerBody; // 0x1032
	bool bMeleeAim; // 0x1033
	bool bMeleeNoAim; // 0x1034
	float MeleeLowerBodyDuration; // 0x1038
	EKSMovementDirection MeleeLowerBodyDirection; // 0x103c
	bool bIsUsingTestLocomotion; // 0x103d
	ECombatState TestCombatState; // 0x103e
	ECombatState CombatState; // 0x103f
	ECombatState InitialCombatState; // 0x1040
	ECombatState DefaultCombatState; // 0x1041
	float CombatStateCooldownTime; // 0x1044
	float TestCombatStateCooldownTime; // 0x1048
	float WeaponCombatStateCooldownTime; // 0x104c
	FMulticastInlineDelegate OnCombatStateChanged; // 0x1050
	FTimerHandle CombatStateCooldownTimer; // 0x1060
	FTimerHandle TestCombatStateCooldownTimer; // 0x1068
	FTimerHandle EngHeadAdditiveAlphaTimer; // 0x1070
	bool bCooldownBlocked; // 0x1078
	float EngagedBlendTime; // 0x107c
	float ComBlendTime; // 0x1080
	float NonComBlendTime; // 0x1084
	float LeftHandAdditiveReloadOverrideDisableBlendTime; // 0x1088
	bool bDownedIdleToCrawlLoop; // 0x108c
	bool bDownedCrawlLoopToIdle; // 0x108d
	bool bCanBlink; // 0x108e
	bool bIsBlinking; // 0x108f
	bool bBlinkIsClosingEyes; // 0x1090
	bool bIsSlowBlinking; // 0x1091
	bool bIsDoubleBlinking; // 0x1092
	float EyeBlinkAlpha; // 0x1094
	float TimeToNextBlink; // 0x1098
	float MinimumTimeBetweenBlinks; // 0x109c
	float MaximumTimeBetweenBlinks; // 0x10a0
	float EyeBlinkSpeed; // 0x10a4
	float EyeBlinkSpeedSlow; // 0x10a8
	float SlowBlinkPercentageChance; // 0x10ac
	float DoubleBlinkPercentageChance; // 0x10b0
	FTimerHandle BlinkTimer; // 0x10b8
	EKSEmotion Emotion; // 0x10c0
	float EmotionAnimTime; // 0x10c4
	FMulticastInlineDelegate OnAnimationEvent; // 0x10c8
	bool bIsNonComIdle; // 0x10e8
};

struct USceneCaptureComponent : USceneComponent {
	ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x208
	ESceneCaptureSource CaptureSource; // 0x209
	char bCaptureEveryFrame : 1; // 0x20a
	char bCaptureOnMovement : 1; // 0x20a
	bool bAlwaysPersistRenderingState; // 0x20b
	TArray<TWeakObjectPtr<UPrimitiveComponent>> HiddenComponents; // 0x210
	TArray<AActor*> HiddenActors; // 0x220
	TArray<TWeakObjectPtr<UPrimitiveComponent>> ShowOnlyComponents; // 0x230
	TArray<AActor*> ShowOnlyActors; // 0x240
	float LODDistanceFactor; // 0x250
	float MaxViewDistanceOverride; // 0x254
	int32_t CaptureSortPriority; // 0x258
	bool bUseRayTracingIfEnabled; // 0x25c
	TArray<FEngineShowFlagsSetting> ShowFlagSettings; // 0x260
	FString ProfilingEventName; // 0x280
};

struct UContextActionData : UObject {
	FName RowName; // 0x30
	FText FormatAdditive; // 0x38
	FContextAction RowData; // 0x50
	FDelegate OnContextAction; // 0xa0
	FDelegate OnCycleAction; // 0xb0
	FDelegate OnHoldActionUpdate; // 0xc0
	FDelegate OnHoldReleaseAction; // 0xd0
};

struct UGizmoPlaneScaleParameterSource : UGizmoBaseVec2ParameterSource {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x90
	TScriptInterface<IGizmoTransformSource> TransformSource; // 0xa0
	float ScaleMultiplier; // 0xb0
	FVector2D Parameter; // 0xb4
	FGizmoVec2ParameterChange LastChange; // 0xbc
	FVector CurScaleOrigin; // 0xcc
	FVector CurScaleNormal; // 0xd8
	FVector CurScaleAxisX; // 0xe4
	FVector CurScaleAxisY; // 0xf0
	FTransform InitialTransform; // 0x100
};

struct UWBP_PlayerProfileScreen_StatPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* Image_187; // 0x528
	UWBP_ThrobberHorizontal_C* Loading; // 0x530
	UVerticalBox* LoadingWrapper; // 0x538
	UVerticalBox* PanelContent; // 0x540
	UWBP_PlayerProfileScreen_StatEntry_C* Stat1; // 0x548
	UWBP_PlayerProfileScreen_StatEntry_C* Stat2; // 0x550
	UWBP_PlayerProfileScreen_StatEntry_C* Stat3; // 0x558
	UWBP_PlayerProfileScreen_StatEntry_C* Stat4; // 0x560
	UTextBlock* Title; // 0x568
	UVerticalBox* TitleWrapper; // 0x570
	UWBP_PanelButton_C* WBP_PanelButton; // 0x578
	UWBP_PlayerProfileScreen_AccountLevel_C* WBP_PlayerProfileScreen_AccountLevel; // 0x580
	UWidgetSwitcher* WidgetSwitcher_3; // 0x588
	bool IsDisabled; // 0x590
};

struct UKSMapLabel : UKSPrimaryAssetLabel {
	TSoftObjectPtr<UWorld> Map; // 0x68
	TSoftObjectPtr<UTexture2D> MiniMapTexture; // 0x90
	TSoftObjectPtr<UTexture2D> LoadingScreenImage; // 0xb8
	FText MapDisplayName; // 0xe0
	FText MapRegion; // 0xf8
	FText MapDescription; // 0x110
};

struct UMaterialExpressionArccosine : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UAkXSXInitializationSettings : UObject {
	FAkCommonInitializationSettings CommonSettings; // 0x28
	FAkXSXApuHeapInitializationSettings ApuHeapSettings; // 0x88
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkXSXAdvancedInitializationSettings AdvancedSettings; // 0xb8
};

struct UWBP_SubNavButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_subscreen_nav_tab_C* NavTab; // 0x528
	UCanvasPanel* NewIndicator; // 0x530
	UWBP_CallToAction_C* WBP_CallToAction; // 0x538
	FText Message; // 0x540
	FMulticastInlineDelegate OnClicked; // 0x558
	FMulticastInlineDelegate OnHovered; // 0x568
	FMulticastInlineDelegate OnUnhovered; // 0x578
	FName TargetViewState; // 0x588
	TArray<FName> RelatedViewStates; // 0x590
	FMulticastInlineDelegate OnNonRouteClicked; // 0x5a0
	bool UsesBattlePassColoring; // 0x5b0
};

struct UAkMediaAsset : UObject {
	uint32_t ID; // 0x28
	TArray<UObject*> UserData; // 0x30
	UAkMediaAssetData* CurrentMediaAssetData; // 0x40
};

struct UBTService_BlueprintBase : UBTService {
	AAIController* AIOwner; // 0x70
	AActor* ActorOwner; // 0x78
	char bShowPropertyDetails : 1; // 0x90
	char bShowEventDetails : 1; // 0x90
};

struct UReportMenu_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_ButtonStacked_C* CheatingButton; // 0x528
	UWBP_ReportMenuCommentField_C* CommentField; // 0x530
	UImage* DarkBanner; // 0x538
	UWBP_ButtonStacked_C* HarassmentButton; // 0x540
	UWBP_ButtonStacked_C* IntentionalFeedingButton; // 0x548
	UWBP_ButtonStacked_C* LeavingButton; // 0x550
	UTextBlock* MuteText; // 0x558
	UTextBlock* MuteText_2; // 0x560
	UTextBlock* MuteText_3; // 0x568
	UTextBlock* MuteText_4; // 0x570
	UTextBlock* MuteText_5; // 0x578
	UTextBlock* MuteText_6; // 0x580
	UWBP_ButtonStacked_C* OtherButton; // 0x588
	UTextBlock* ReasonLabelSelected; // 0x590
	UWidgetSwitcher* ReasonLabelSwitcher; // 0x598
	UWBP_ButtonStacked_C* StreamSnipingButton; // 0x5a0
	UWBP_StandardButtonLarge_C* SubmitNew; // 0x5a8
	UWBP_Header1_C* WBP_Header1; // 0x5b0
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x5b8
	FMulticastInlineDelegate OnCloseTabScreen; // 0x5c0
	FMulticastInlineDelegate OnPlayerReported; // 0x5d0
	FReportPlayerParams CachedReport; // 0x5e0
	FMulticastInlineDelegate OnTabPressed; // 0x630
	EReportPlayerReason LastSelectedReason; // 0x640
};

struct UWBP_SimulmediaRewardItem_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* AnimOnShown; // 0x240
	UImage* BorderGlow; // 0x248
	UOverlay* EffectContainer; // 0x250
	UImage* godrays; // 0x258
	UTextBlock* RarityName; // 0x260
	UImage* ScanLines; // 0x268
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay; // 0x270
};

struct UWBP_WeaponHubStatsPanel_C : UKSWeaponStatsPanel {
	FPointerToUberGraphFrame UberGraphFrame; // 0x540
	UWidgetAnimation* AnimPanelButtonHover; // 0x548
	UWidgetAnimation* AnimTogglePanel; // 0x550
	UVerticalBox* CollapseContent; // 0x558
	UTextBlock* DescText; // 0x560
	UOverlay* ExpandedBGGroup; // 0x568
	UVerticalBox* ExpandedContent; // 0x570
	UImage* Image_160; // 0x578
	UImage* Image_257; // 0x580
	UButton* NextTierButton; // 0x588
	UWBP_KeyCallout_C* NextTierCallout; // 0x590
	UButton* PrevTierButton; // 0x598
	UWBP_KeyCallout_C* PrevTierCallout; // 0x5a0
	UTextBlock* StatsHeaderText; // 0x5a8
	UImage* TooltipBackground; // 0x5b0
	UGridPanel* WeaponStatsGrid; // 0x5b8
	bool OpenedState; // 0x5c0
	UAkAudioEvent* ClickWEPHUBPrevTierSFX; // 0x5c8
	UAkAudioEvent* HoverWEPHUBStatsPanelTierSFX; // 0x5d0
	UAkAudioEvent* ClickWEPHUBNextTierSFX; // 0x5d8
	UAkAudioEvent* ClickWEPHUBStatsOpenSFX; // 0x5e0
	UAkAudioEvent* HoverWEPHUBStatsOpenSFX; // 0x5e8
	int32_t StatsCount; // 0x5f0
};

struct UKSDamageTypeFlashBang : UKSDamageTypeBase {
	float EffectiveAngle; // 0x138
};

struct UWBP_MatchCardSlot_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* Category; // 0x240
	UImage* Decro; // 0x248
	UImage* Gradient; // 0x250
	UImage* Image_125; // 0x258
	UWBP_OrdinalNumberText_C* OrdinalNumberText; // 0x260
	UTextBlock* PointsEarned; // 0x268
	UWBP_PanelDefault_C* WBP_PanelDefault; // 0x270
	FPlayerMatchStatInfo PlayerStat; // 0x278
	APUMG_HUD* MyHud; // 0x288
	int32_t NewCurrencyXP; // 0x290
	int32_t CurrencyEarned; // 0x294
	int32_t CurrentCurrency; // 0x298
	float DeltaTime; // 0x29c
	FMulticastInlineDelegate StartAnimation; // 0x2a0
	bool CanStartAnimation; // 0x2b0
	FLinearColor GoldFontColor; // 0x2b4
};

struct UKSBTD_CanActivateUniqueAbility : UBTDecorator {
	UDataTable* AbilityValidatorTable; // 0x68
};

struct UPawnAction_Wait : UPawnAction {
	float TimeToWait; // 0x98
};

struct USkeleton : UObject {
	TArray<FBoneNode> BoneTree; // 0x38
	TArray<FTransform> RefLocalPoses; // 0x48
	FGuid VirtualBoneGuid; // 0x170
	TArray<FVirtualBone> VirtualBones; // 0x180
	TArray<USkeletalMeshSocket*> Sockets; // 0x190
	FSmartNameContainer SmartNames; // 0x1f0
	TArray<UBlendProfile*> BlendProfiles; // 0x270
	TArray<FAnimSlotGroup> SlotGroups; // 0x280
	TArray<UAssetUserData*> AssetUserData; // 0x358
};

struct UWBP_Header3_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Decro; // 0x240
	UTextBlock* Text; // 0x248
	FText TextValue; // 0x250
};

struct UKSActivityRewardCondition_DownsAchieved : UKSActivityRewardCondition {
	int32_t MinDownsAchieved; // 0x30
	int32_t MaxDownsAchieved; // 0x34
};

struct UBTTask_Wait : UBTTaskNode {
	float WaitTime; // 0x70
	float RandomDeviation; // 0x74
};

struct UHapticFeedbackEffect_SoundWave : UHapticFeedbackEffect_Base {
	USoundWave* SoundWave; // 0x28
};

struct UMediaPlaylist : UObject {
	TArray<UMediaSource*> Items; // 0x28
};

struct UMaterialInstanceConstant : UMaterialInstance {
	UPhysicalMaterialMask* PhysMaterialMask; // 0x408
};

struct ULightmappedSurfaceCollection : UObject {
	UModel* SourceModel; // 0x28
	TArray<int32_t> Surfaces; // 0x30
};

struct APGame_GameMode : APGame_GameModeBase {
	bool bAutoEnableCombatLog; // 0x3e8
	bool bUploadCombatLogOverride; // 0x3e9
	bool bFubarForCPUFramerate; // 0x438
	bool bFubarForPacketLoss; // 0x439
	float FubarShutdownWaitTimeoutTime; // 0x43c
	bool bDeferWelcomeUntilAllPlayersConnect; // 0x440
	bool bReadyForWelcome; // 0x441
	FString SonyActivityId; // 0x4a0
	float SonyMatchOwnerNetTimeout; // 0x4b0
	FPGame_SonyMatchData SonyMatchData; // 0x4b8
	TArray<uint32_t> SonyIneligibleMatchOwners; // 0x4d0
	TArray<FPGame_InactivePlayerStateEntry> PGame_InactivePlayerArray; // 0x4f0
};

struct ULandscapeGrassType : UObject {
	TArray<FGrassVariety> GrassVarieties; // 0x28
	char bEnableDensityScaling : 1; // 0x38
	UStaticMesh* GrassMesh; // 0x40
	float GrassDensity; // 0x48
	float PlacementJitter; // 0x4c
	int32_t StartCullDistance; // 0x50
	int32_t EndCullDistance; // 0x54
	bool RandomRotation; // 0x58
	bool AlignToSurface; // 0x59
};

struct UKSModInst_ActivatedViewMode : UKSModInst_Activated {
	FMulticastInlineDelegate OnViewStateChange; // 0x478
	EModViewModeState CurrentState; // 0x488
};

struct UKSPlayerMod_Gadget : UKSPlayerMod {
	float GadgetThrowSpeedMutliplier; // 0x330
	float GadgetInnerRadiusMultiplier; // 0x334
	float GadgetOuterRadiusMutliplier; // 0x338
	float GadgetFXSizeMultiplier; // 0x33c
};

struct UKSVoiceActivityWidget : UKSWidget {
	FMulticastInlineDelegate VoiceAccountNamePairsUpdated; // 0x520
	FMulticastInlineDelegate VoiceParticipantAdded; // 0x530
	FMulticastInlineDelegate VoiceParticipantRemoved; // 0x540
	FMulticastInlineDelegate VoiceParticipantUpdated; // 0x550
	FMulticastInlineDelegate VoiceAudioStateChange; // 0x560
};

struct UKSWeaponMilestoneEntry : UKSWidget {
	UKSActivityInstance* PopulatedMilestoneInstance; // 0x520
};

struct UProgressWidgetStyle : USlateWidgetStyleContainerBase {
	FProgressBarStyle ProgressBarStyle; // 0x30
};

struct UDatasmithLandscapeTemplate : UDatasmithObjectTemplate {
	UMaterialInterface* LandscapeMaterial; // 0x30
	int32_t StaticLightingLOD; // 0x38
};

struct UButtonWidgetStyle : USlateWidgetStyleContainerBase {
	FButtonStyle ButtonStyle; // 0x30
};

struct UKSPlayerMod_Omniscience : UKSPlayerMod {
	float MinimapZoomModifier; // 0x330
};

struct ALight : AActor {
	ULightComponent* LightComponent; // 0x220
	char bEnabled : 1; // 0x228
};

struct UAkPS4InitializationSettings : UObject {
	FAkCommonInitializationSettings CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x88
	FAkPS4AdvancedInitializationSettings AdvancedSettings; // 0xb0
};

struct UStandardButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* bkg; // 0x530
	UImage* HoverLeft; // 0x538
	UButton* LoadoutButton; // 0x540
	UNamedSlot* NamedSlot_1; // 0x548
	FMulticastInlineDelegate OnClicked; // 0x550
	FMulticastInlineDelegate OnHovered; // 0x560
	FMulticastInlineDelegate OnUnhovered; // 0x570
	UAkAudioEvent* ClickStandardBtnSFX; // 0x580
	UAkAudioEvent* HoverStandardBtnSFX; // 0x588
};

struct UPUMG_ContextBarPrompt : UPUMG_Widget {
	UContextActionData* ContextActionData; // 0x4c0
	bool IsPoolable; // 0x4c8
};

struct UTemplateSequence : UMovieSceneSequence {
	UMovieScene* MovieScene; // 0x348
	TSoftClassPtr<UObject> BoundActorClass; // 0x350
	TSoftObjectPtr<AActor> BoundPreviewActor; // 0x378
	TMap<FGuid, FName> BoundActorComponents; // 0x3a0
};

struct UMaterialExpressionVertexInterpolator : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct UKSBTTargetSelector : UDataAsset {
	TArray<UAISense*> SensesToUse; // 0x30
	FKSPerceptionFilter PerceptionFilter; // 0x40
	bool SelectCombatTargetOfResult; // 0x230
	bool SelectClosestTarget; // 0x231
	bool SelectFurthestTarget; // 0x232
	bool SelectRandomTarget; // 0x233
};

struct UKSCharacterAnimInstBase : UKSAnimInstance {
	EKSMovementDirection MovementDirection; // 0x330
	FVector Velocity; // 0x334
	FVector LocalVelocity; // 0x340
	FVector AccelDirection; // 0x34c
	FVector LocalAccelDirection; // 0x358
	float CurMaxSpeed; // 0x364
	FVector FloorNormal; // 0x368
	FVector AccelRightDirection; // 0x374
	FVector AccelNormDirection; // 0x380
	float SlopeAngle; // 0x38c
	float SlopeAngleTarget; // 0x390
	FVector2D SlopeAngleDirectional; // 0x394
	FRotator SlopeAngleDirectionalRotation; // 0x39c
	float SlopeFeetAlpha; // 0x3a8
	float SlopeFeetAlphaTarget; // 0x3ac
	FVector RootAdjustmentOnSlope; // 0x3b0
	bool bDisableFeetTilting; // 0x3bc
	float fSlopeInterpSpeed; // 0x3c0
	char bUpdateMovement : 1; // 0x3c4
	char bFalling : 1; // 0x3c4
};

struct UKSSettingsMenu : UKSWidget {
	FKSSettingsState SettingsState; // 0x520
	TArray<UKSSettingsPage*> SettingsPages; // 0x528
	UKSSettingsPage* SettingsPageClass; // 0x538
	UKSSettingsMenuConfigAsset* MenuConfigAsset; // 0x540
};

struct UGizmoWorldAxisSource : UObject {
	FVector Origin; // 0x30
	int32_t AxisIndex; // 0x3c
};

struct UKneeCrawlingNotify_C : UAnimNotify {
	StepType StepType; // 0x38
	FName BoneName; // 0x3c
};

struct UPreviewActorLoadoutComponent : UActorComponent {
	AKSJobSelectPreviewActor* PreviewActorOwner; // 0xb0
};

struct UWBP_StoreButtonLarge_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* CompareHover; // 0x528
	UWidgetAnimation* ShowCompare; // 0x530
	UWidgetAnimation* SlideLeftToPrimary; // 0x538
	UWidgetAnimation* SlideLeftToSecondary; // 0x540
	UImage* CompareBG; // 0x548
	UButton* CompareButton; // 0x550
	UImage* ComparePrompt; // 0x558
	UWBP_StoreItemInterior_C* PrimaryStoreItem; // 0x560
	UWBP_StoreItemInterior_C* SecondaryStoreItem; // 0x568
	UWBP_StoreItemRotator_C* StoreItemRotator; // 0x570
	UWBP_StorePanelButton_C* WBP_StorePanelButton; // 0x578
	UKSStoreSectionItem* MySection; // 0x580
	int32_t CurrentStoreIndex; // 0x588
	bool IsRotating; // 0x58c
	float TimeVisible; // 0x590
	bool CanCompare; // 0x594
	float MaxTimeVisible; // 0x598
	float ROTATION_TIMER_INTERVAL; // 0x59c
};

struct UWBP_Subtitle_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* Text; // 0x240
	FText TextValue; // 0x248
};

struct ULightComponentBase : USceneComponent {
	FGuid LightGuid; // 0x208
	float Brightness; // 0x218
	float Intensity; // 0x21c
	FColor LightColor; // 0x220
	char bAffectsWorld : 1; // 0x224
	char CastShadows : 1; // 0x224
	char CastStaticShadows : 1; // 0x224
	char CastDynamicShadows : 1; // 0x224
	char bAffectTranslucentLighting : 1; // 0x224
	char bTransmission : 1; // 0x224
	char bCastVolumetricShadow : 1; // 0x224
	char bCastDeepShadow : 1; // 0x224
	char bCastRaytracedShadow : 1; // 0x225
	char bAffectReflection : 1; // 0x225
	char bAffectGlobalIllumination : 1; // 0x225
	float IndirectLightingIntensity; // 0x228
	float VolumetricScatteringIntensity; // 0x22c
	int32_t SamplesPerPixel; // 0x230
};

struct UCurveVector : UCurveBase {
	FRichCurve FloatCurves[0x3]; // 0x30
};

struct UMaterialExpressionBentNormalCustomOutput : UMaterialExpressionCustomOutput {
	FExpressionInput Input; // 0x40
};

struct UKSActivityComponent_MercMastery : UKSActivityComponent {
	FGameplayTag MercMasteryStatTag; // 0x30
	TSoftObjectPtr<UTexture2D> Icon; // 0x38
	FText DisplayName; // 0x60
};

struct UGarbageCollectionSettings : UDeveloperSettings {
	float TimeBetweenPurgingPendingKillObjects; // 0x38
	char FlushStreamingOnGC : 1; // 0x3c
	char AllowParallelGC : 1; // 0x3c
	char IncrementalBeginDestroyEnabled : 1; // 0x3c
	char MultithreadedDestructionEnabled : 1; // 0x3c
	char CreateGCClusters : 1; // 0x3c
	char AssetClusteringEnabled : 1; // 0x3c
	char ActorClusteringEnabled : 1; // 0x3c
	char BlueprintClusteringEnabled : 1; // 0x3c
	char UseDisregardForGCOnDedicatedServers : 1; // 0x3d
	int32_t MinGCClusterSize; // 0x40
	int32_t NumRetriesBeforeForcingGC; // 0x44
	int32_t MaxObjectsNotConsideredByGC; // 0x48
	int32_t SizeOfPermanentObjectPool; // 0x4c
	int32_t MaxObjectsInGame; // 0x50
	int32_t MaxObjectsInEditor; // 0x54
};

struct UMaterialExpressionDesaturation : UMaterialExpression {
	FExpressionInput Input; // 0x40
	FExpressionInput Fraction; // 0x54
	FLinearColor LuminanceFactors; // 0x68
};

struct UKSPlayerMod_DisableUI : UKSPlayerMod {
	FKSPlayerModOverridePropertyStatBool DisableGrenadeFailurePrompt; // 0x330
};

struct USingleClickInputBehavior : UAnyButtonInputBehavior {
	bool HitTestOnRelease; // 0xc0
};

struct UKSModInst_WeaponSkinOverride : UKSPlayerModInstance {
	TMap<FGameplayTag, FDataTableInfo> WeaponTypeSkinTables; // 0x1b8
	FDataTableInfo DefaultWeaponSkinTable; // 0x208
	TMap<FGameplayTag, UMultiSkinObject*> WeaponTypeSkinObjects; // 0x280
	UMultiSkinObject* DefaultWeaponSkinObject; // 0x2d0
	TArray<TWeakObjectPtr<UKSWeaponComponent>> AppliedWeaponComponents; // 0x2d8
};

struct UGeometryCacheComponent : UMeshComponent {
	UGeometryCache* GeometryCache; // 0x458
	bool bRunning; // 0x460
	bool bLooping; // 0x461
	float StartTimeOffset; // 0x464
	float PlaybackSpeed; // 0x468
	int32_t NumTracks; // 0x46c
	float ElapsedTime; // 0x470
	float Duration; // 0x4a4
	bool bManualTick; // 0x4a8
};

struct UWBP_BattlePassUpsellScreen_C : UKSBattlepassUpsellWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x5b0
	UWidgetAnimation* confirmation_transition; // 0x5b8
	UWidgetAnimation* screen_transition; // 0x5c0
	UImage* SheenLeft; // 0x5c8
	UImage* SheenRight; // 0x5d0
};

struct UMaterialExpressionRound : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct UBTTask_MoveTo : UBTTask_BlackboardBase {
	float AcceptableRadius; // 0x98
	UNavigationQueryFilter* FilterClass; // 0xa0
	float ObservedBlackboardValueTolerance; // 0xa8
	char bObserveBlackboardValue : 1; // 0xac
	char bAllowStrafe : 1; // 0xac
	char bAllowPartialPath : 1; // 0xac
	char bTrackMovingGoal : 1; // 0xac
	char bProjectGoalLocation : 1; // 0xac
	char bReachTestIncludesAgentRadius : 1; // 0xac
	char bReachTestIncludesGoalRadius : 1; // 0xac
	char bStopOnOverlap : 1; // 0xac
	char bStopOnOverlapNeedsUpdate : 1; // 0xad
};

struct AControlPointMeshActor : AActor {
	UControlPointMeshComponent* ControlPointMeshComponent; // 0x220
};

struct UMaterialInstance : UMaterialInterface {
	UPhysicalMaterial* PhysMaterial; // 0x88
	UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0x90
	UMaterialInterface* Parent; // 0xd0
	char bHasStaticPermutationResource : 1; // 0xd8
	char bOverrideSubsurfaceProfile : 1; // 0xd8
	TArray<FScalarParameterValue> ScalarParameterValues; // 0xe0
	TArray<FVectorParameterValue> VectorParameterValues; // 0xf0
	TArray<FTextureParameterValue> TextureParameterValues; // 0x100
	TArray<FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x110
	TArray<FFontParameterValue> FontParameterValues; // 0x120
	FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x130
	FStaticParameterSet StaticParameters; // 0x148
	FMaterialCachedParameters CachedLayerParameters; // 0x188
	TArray<UObject*> CachedReferencedTextures; // 0x328
};

struct UDatasmithPostProcessVolumeTemplate : UDatasmithObjectTemplate {
	FDatasmithPostProcessSettingsTemplate Settings; // 0x30
	char bEnabled : 1; // 0x70
	char bUnbound : 1; // 0x70
};

struct AKSPlayerStart : APlayerStart {
	bool bInitialSpawnPoint; // 0x260
	bool bRespawnPoint; // 0x261
	int32_t SideNum; // 0x264
	bool bBotOnly; // 0x268
	bool bPlayerOnly; // 0x269
	ECharacterBehaviorState InitialBehaviorState; // 0x26a
	bool bUseInitialBehaviorOverride; // 0x26b
	ECharacterBehaviorState InitialBehaviorStateOverride; // 0x26c
	TArray<UKSItem*> InventoryToGive; // 0x270
	TArray<UKSItem*> InitialSpawnInventoryToGive; // 0x280
	TArray<UKSItem*> RespawnInventoryToGive; // 0x290
	TArray<UKSPlayerMod*> ModsToGive; // 0x2a0
	TArray<UKSPlayerMod*> InitialSpawnModsToGive; // 0x2b0
	TArray<UKSPlayerMod*> RespawnModsToGive; // 0x2c0
};

struct UMovieSceneLiveLinkTrack : UMovieScenePropertyTrack {
	ULiveLinkRole* TrackRole; // 0x88
};

struct UPropertyValue : UObject {
	TArray<TFieldPath<FProperty>> Properties; // 0x88
	TArray<int32_t> PropertyIndices; // 0x98
	TArray<FCapturedPropSegment> CapturedPropSegments; // 0xa8
	FString FullDisplayString; // 0xb8
	FName PropertySetterName; // 0xc8
	TMap<FString, FString> PropertySetterParameterDefaults; // 0xd0
	bool bHasRecordedData; // 0x120
	UObject* LeafPropertyClass; // 0x128
	TArray<char> ValueBytes; // 0x138
	EPropertyValueCategory PropCategory; // 0x148
};

struct UMaterialExpressionSphericalParticleOpacity : UMaterialExpression {
	FExpressionInput Density; // 0x40
	float ConstantDensity; // 0x54
};

struct UKSItemBundle : UKSItem {
	TArray<TSoftObjectPtr<UKSItem>> BundledItems; // 0x250
};

struct UKSAIObjectivePriorityComponent : UActorComponent {
	UDataTable* ObjectivePriorityTable; // 0xb0
	TMap<FName, FKSBTObjectivePriorityTableRow> ObjectivePriorities; // 0xb8
	TArray<FKSBTObjectivePriorityTableRow> SortedPriorities; // 0x108
};

struct AKSProjectile_RemoteTrigger : AKSProjectile_Grenade {
	bool CanDetonateNow; // 0xa10
	bool bCanDetonateBeforeStopping; // 0xa11
	UKSPlayerMod* DetectionMod; // 0xa18
	bool bRequiresMatchingDetonator; // 0xa28
	FVector RelativeInteractionPoint; // 0xa2c
	bool DetectedEnemy; // 0xa39
};

struct UKSEquipAllData : UObject {
	UKSItem* CosmeticItem; // 0x28
	FText HeaderText; // 0x30
	FText DescText; // 0x48
	FMulticastInlineDelegate EquipAllCompletedCallback; // 0x60
	EEquipAllType EquipType; // 0x70
	int32_t SlotType; // 0x74
	int32_t SlotPosition; // 0x78
	UKSWeaponAsset* WeaponToEquipTo; // 0x80
};

struct UKSViewRedirector_LocalSetting : UPUMG_ViewRedirecter {
	FName LocalActionName; // 0x28
};

struct UAnimNotify_AkEvent_C : UAnimNotify {
	FString Attach Name; // 0x38
	UAkAudioEvent* Event; // 0x48
	bool Follow; // 0x50
	FString EventName; // 0x58
	bool Post to root component; // 0x68
};

struct UAssetExportTask : UObject {
	UObject* Object; // 0x28
	UExporter* Exporter; // 0x30
	FString Filename; // 0x38
	bool bSelected; // 0x48
	bool bReplaceIdentical; // 0x49
	bool bPrompt; // 0x4a
	bool bAutomated; // 0x4b
	bool bUseFileArchive; // 0x4c
	bool bWriteEmptyFiles; // 0x4d
	TArray<UObject*> IgnoreObjectList; // 0x50
	UObject* Options; // 0x60
	TArray<FString> Errors; // 0x68
};

struct UInterpTrackAnimControl : UInterpTrackFloatBase {
	FName SlotName; // 0x90
	TArray<FAnimControlTrackKey> AnimSeqs; // 0x98
	char bSkipAnimNotifiers : 1; // 0xa8
};

struct UKSActivityRewardCondition_TimeSinceDamagedByVictim : UKSActivityRewardCondition {
	float MinSecondsSinceLastDamage; // 0x30
	float MaxSecondsSinceLastDamage; // 0x34
	bool SucceedIfNeverDamaged; // 0x38
};

struct UWBP_CosmeticItem_TitleEmpty_C : UKSWidget {
	UImage* Image_76; // 0x520
};

struct UWBP_VoucherRedemptionItem_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* DLCName; // 0x240
	UBorder* NameTextWrapper; // 0x248
	UWBP_AsyncIcon_C* WBP_AsyncIcon; // 0x250
	UPUMG_StoreItem* StoreItem; // 0x258
};

struct UWBP_RelatedRogueEntry_C : UKSRelatedRogueEntry {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* BG; // 0x528
	UImage* Bg_Gradient; // 0x530
	UImage* Image_102; // 0x538
	UBorder* LockWrapper; // 0x540
	UKSAsyncImage* RogueIcon; // 0x548
	bool bIsLocked; // 0x550
};

struct UPlayerHealthMeterPadding_C : UUserWidget {
	UHorizontalBox* PaddingContainer; // 0x238
};

struct UMaterialExpressionDistanceToNearestSurface : UMaterialExpression {
	FExpressionInput Position; // 0x40
};

struct UAISystem : UAISystemBase {
	FSoftClassPath PerceptionSystemClassName; // 0x58
	FSoftClassPath HotSpotManagerClassName; // 0x70
	float AcceptanceRadius; // 0x88
	float PathfollowingRegularPathPointAcceptanceRadius; // 0x8c
	float PathfollowingNavLinkAcceptanceRadius; // 0x90
	bool bFinishMoveOnGoalOverlap; // 0x94
	bool bAcceptPartialPaths; // 0x95
	bool bAllowStrafing; // 0x96
	bool bEnableBTAITasks; // 0x97
	bool bAllowControllersAsEQSQuerier; // 0x98
	bool bEnableDebuggerPlugin; // 0x99
	bool bForgetStaleActors; // 0x9a
	ECollisionChannel DefaultSightCollisionChannel; // 0x9b
	UBehaviorTreeManager* BehaviorTreeManager; // 0xa0
	UEnvQueryManager* EnvironmentQueryManager; // 0xa8
	UAIPerceptionSystem* PerceptionSystem; // 0xb0
	TArray<UAIAsyncTaskBlueprintProxy*> AllProxyObjects; // 0xb8
	UAIHotSpotManager* HotSpotManager; // 0xc8
	UNavLocalGridManager* NavLocalGrids; // 0xd0
};

struct UParticleModuleAcceleration : UParticleModuleAccelerationBase {
	FRawDistributionVector Acceleration; // 0x38
	char bApplyOwnerScale : 1; // 0x80
};

struct UWBP_HomeScreen_v2_C : UKSHomeScreenWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* FadeOut; // 0x528
	UWBP_Daily_Challenge_Timer_C* ChallengeTimerDisplay; // 0x530
	UCanvasPanel* Content; // 0x538
	UWBP_PlayerContextMenu_C* ContextMenu; // 0x540
	UTextBlock* CrossplayLabel; // 0x548
	UHorizontalBox* CrossplaySettingWrapper; // 0x550
	UTextBlock* CrossplayValue; // 0x558
	UImage* FocusBlocker; // 0x560
	UWBP_AsyncIcon_C* InputTypeIcon; // 0x568
	UTextBlock* InputTypeLabel; // 0x570
	UHorizontalBox* InputTypeSettingWrapper; // 0x578
	UTextBlock* InputTypeValue; // 0x580
	UWBP_NewsRotatorWidget_C* NewsRotator; // 0x588
	UCanvasPanel* NewsSection; // 0x590
	UTextBlock* RegionLabel; // 0x598
	UTextBlock* RegionValue; // 0x5a0
	UWBP_BattlePassLobbyDisplay_C* WBP_BattlePassLobbyDisplay; // 0x5a8
	UWBP_Challenge_Panel_v2_C* WBP_Challenge_Panel_v2; // 0x5b0
	UWBP_GameNotification_C* WBP_GameNotification; // 0x5b8
	UWBP_Header3_C* WBP_Header3; // 0x5c0
	UWBP_HomeQuickPlay_C* WBP_HomeQuickPlay; // 0x5c8
	UWBP_LobbyEventDisplay_C* WBP_LobbyEventDisplay; // 0x5d0
	UWBP_PartyModule_C* WBP_PartyModule; // 0x5d8
	UWBP_SimulmediaEntrypoint_C* WBP_SimulmediaEntrypoint; // 0x5e0
	UImage* XboxIcon; // 0x5e8
	bool ShowEMOL; // 0x5f0
	UObject* ViewManagerWidget; // 0x5f8
	TArray<FName> LoadoutRoutes; // 0x600
};

struct UObjectReferencer : UObject {
	TArray<UObject*> ReferencedObjects; // 0x28
};

struct UPawnActionsComponent : UActorComponent {
	APawn* ControlledPawn; // 0xb0
	TArray<FPawnActionStack> ActionStacks; // 0xb8
	TArray<FPawnActionEvent> ActionEvents; // 0xc8
	UPawnAction* CurrentAction; // 0xd8
};

struct UInterpTrackInstSlomo : UInterpTrackInst {
	float OldTimeDilation; // 0x28
};

struct UKSGameEngine : UPComGameEngine {
	FMulticastInlineDelegate OnGoPlayMapReady; // 0xee0
};

struct UMaterialExpressionTextureCoordinate : UMaterialExpression {
	int32_t CoordinateIndex; // 0x40
	float UTiling; // 0x44
	float VTiling; // 0x48
	char UnMirrorU : 1; // 0x4c
	char UnMirrorV : 1; // 0x4c
};

struct UKSPlayerMod_Blind : UKSPlayerMod {
	bool IsBlind; // 0x330
};

struct ULevelSequenceBurnInOptions : UObject {
	bool bUseBurnIn; // 0x28
	FSoftClassPath BurnInClass; // 0x30
	ULevelSequenceBurnInInitSettings* Settings; // 0x48
};

struct UNetDriver : UObject {
	FString NetConnectionClassName; // 0x30
	FString ReplicationDriverClassName; // 0x40
	int32_t MaxDownloadSize; // 0x50
	char bClampListenServerTickRate : 1; // 0x54
	int32_t NetServerMaxTickRate; // 0x58
	int32_t MaxNetTickRate; // 0x5c
	int32_t MaxInternetClientRate; // 0x60
	int32_t MaxClientRate; // 0x64
	float ServerTravelPause; // 0x68
	float SpawnPrioritySeconds; // 0x6c
	float RelevantTimeout; // 0x70
	float KeepAliveTime; // 0x74
	float HandshakeTimeout; // 0x78
	float InitialConnectTimeout; // 0x7c
	float ConnectionTimeout; // 0x80
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x84
	bool bNoTimeouts; // 0x88
	bool bNeverApplyNetworkEmulationSettings; // 0x89
	UNetConnection* ServerConnection; // 0x90
	TArray<UNetConnection*> ClientConnections; // 0x98
	int32_t RecentlyDisconnectedTrackingTime; // 0x108
	UWorld* World; // 0x148
	UPackage* WorldPackage; // 0x150
	UObject* NetConnectionClass; // 0x178
	UObject* ReplicationDriverClass; // 0x180
	FName NetDriverName; // 0x198
	TArray<FChannelDefinition> ChannelDefinitions; // 0x1a0
	TMap<FName, FChannelDefinition> ChannelDefinitionMap; // 0x1b0
	TArray<FNetThrottleSpawnDefinition> ThrottleSpawnDefinitions; // 0x200
	TArray<int32_t> ThrottleSpawnsRemaining; // 0x210
	uint32_t ThrottleSpawnPausedFrameNumber; // 0x220
	TArray<UChannel*> ActorChannelPool; // 0x228
	float Time; // 0x240
	UReplicationDriver* ReplicationDriver; // 0x718
};

struct AWindDirectionalSource : AInfo {
	UWindDirectionalSourceComponent* Component; // 0x220
};

struct UKSJobSelectorWidget : UKSWidget {
	bool bAutoBindJobSelector; // 0x520
	bool bWaitForPlayerToBecomeRelevant; // 0x521
	bool bBindToTasksChangedEvent; // 0x522
	bool bBindToPendingTasksChangedEvent; // 0x523
	bool bBindToPersonalTaskChangedEvent; // 0x524
	bool bBindToChoicesChangedEvent; // 0x525
	bool bBindToTaskCompletedEvent; // 0x526
	bool bBindToAllPersonalTasksCompletedEvent; // 0x527
	bool bBindToEndJobSelectionEvent; // 0x528
	TWeakObjectPtr<AKSJobSelector> JobSelector; // 0x52c
};

struct UMaterialExpressionVectorParameter : UMaterialExpressionParameter {
	FLinearColor DefaultValue; // 0x58
	bool bUseCustomPrimitiveData; // 0x68
	char PrimitiveDataIndex; // 0x69
};

struct AKSPlayerStateAssistant : AInfo {
	UKSResourceManagerComponent* ResourceManagerComponent; // 0x220
	FKSPersistentPlayerId LastOwnerPlayerId; // 0x228
	AKSPlayerState* PlayerStateOwner; // 0x238
	AKSPlayerModManager* PlayerModManager; // 0x240
};

struct USubmixEffectDynamicsProcessorPreset : USoundEffectSubmixPreset {
	FSubmixEffectDynamicsProcessorSettings Settings; // 0xb8
};

struct UWBP_WeaponMasteryMilestoneProgress_C : UKSMilestoneCompletedScreen {
	FPointerToUberGraphFrame UberGraphFrame; // 0x558
	UWidgetAnimation* AnimOnShown; // 0x560
	UHorizontalBox* MilestoneEntryContainer; // 0x568
	UImage* ShadeBox; // 0x570
	UWBP_StandardButtonMedium_C* WBP_StandardButtonMedium; // 0x578
	UWBP_WeaponMilestoneEntry_Progression_C* WBP_WeaponMilestoneEntry_Progression; // 0x580
	UWBP_WeaponMilestoneEntry_Progression_C* WBP_WeaponMilestoneEntry_Progression_2; // 0x588
	UWBP_WeaponMilestoneEntry_Progression_C* WBP_WeaponMilestoneEntry_Progression_3; // 0x590
	UWBP_WeaponMilestoneEntry_Progression_C* WBP_WeaponMilestoneEntry_Progression_4; // 0x598
	FName WeaponViewActorName; // 0x5a0
	int32_t CurrentAnimRewardXpBonus; // 0x5a8
	bool WaitingForModel; // 0x5ac
	bool WaitingForWeaponMeter; // 0x5ad
};

struct UKSCharacterMovementComponent : UCharacterMovementComponent {
	FMulticastInlineDelegate OnMoveModeChangedDynamic; // 0x698
	float LastNetUpdateTime; // 0x6a8
	float MaxProxyForwardPredictionTime; // 0x6ac
	bool bCanEverSkipProxyPrediction; // 0x6b2
	int32_t SkipProxyPredictionLOD; // 0x6b4
	float SkipProxySkydivePredictionDist; // 0x6b8
	bool bSkipProxyPredictionAfterSkydive; // 0x6bc
	FFindFloorResult LastFloor; // 0x6c0
	float SlowToCrouchTime; // 0x760
	float PostCrouchSlowTime; // 0x76c
	float CrouchCooldownTime; // 0x778
	float TeaBagPreventionCrouchCooldownTime; // 0x77c
	FVector SimulatedProxyVelocity; // 0x784
	bool bCanEverPowerSlide; // 0x790
	float PowerSlideTurnFrictionMinAngle; // 0x794
	float PowerSlideTurnFrictionMaxAngle; // 0x798
	float MinimumStartPowerSlideSpeed; // 0x79c
	float MinimumPowerSlideSpeed; // 0x7a0
	float PowerSlideInitialSpeedBoost; // 0x7a4
	float PowerSlideLockoutTime; // 0x7a8
	float MinimumPowerSlideTime; // 0x7ac
	float PowerSlideMaxStepHeight; // 0x7b0
	FInterpCurveFloat PowerSlideTurnDecelerationCurve; // 0x7c0
	FInterpCurveFloat PowerSlideDecelerationCurve; // 0x7d8
	float PowerSlideResistDeceleration; // 0x7f0
	float FallAimForgivenessPeriod; // 0x808
	float FallAimForgivenessEndTime; // 0x80c
	float MinWalkingAcceleration; // 0x810
	float MaxSprintingSpeed; // 0x814
	float MaxWalkSpeedProne; // 0x818
	float AimOverShoulderSpeedModifier; // 0x81c
	float AimDownSightsSpeedModifier; // 0x820
	float StrafingSpeedFactor; // 0x824
	float ReverseSpeedFactor; // 0x828
	char bWantsToSprint : 1; // 0x82c
	char bSprintIsHeld : 1; // 0x82c
	char bSprintIsToggledOn : 1; // 0x82c
	char bSprintInterrupted : 1; // 0x82c
	char bIsJumping : 1; // 0x82c
	char bCachedCharacterAllowSprintingRightNow : 1; // 0x82c
	char bCachedCharacterAllowPowerSlideRightNow : 1; // 0x82c
	float CachedWeaponWalkSpeedModifier; // 0x830
	float ReducedJumpZVelocity; // 0x834
	float ReducedJumpHeightWindow; // 0x838
	char bSprinting : 1; // 0x83c
	float MinHardLandingHeight; // 0x848
	float HardLandingLockoutTime; // 0x84c
	float FreefallLandingLockoutTime; // 0x850
	EKSCharacterAimMode AimState; // 0x854
	AKSCharacterBase* KSCharacterOwner; // 0x858
	float MaxSprintingSwimSpeed; // 0x860
	float MaxSubmergedSwimSpeed; // 0x864
	float SwimSurfaceAcceleration; // 0x868
	float SwimSubmergedAcceleration; // 0x86c
	float MaxDownedSwimSpeed; // 0x870
	float SwimStrafingSpeedFactor; // 0x874
	float SwimReverseSpeedFactor; // 0x878
	float MaxSwimZSpeed; // 0x87c
	float SwimZAcceleration; // 0x880
	float SurfaceSwimDepth; // 0x884
	float SubmergedSwimDepth; // 0x888
	float HardMaxSwimDepth; // 0x88c
	float FallSpeedWaterDeflectionFactor; // 0x890
	float CrouchToSwimDepth; // 0x894
	TArray<FMantleConfig> MantleConfigs; // 0x898
	float m_fLedgeGrabDistance; // 0x8b8
	float m_fSprintLedgeGrabDistance; // 0x8bc
	float m_fLedgeGrabbableWallZ; // 0x8c0
	float m_fMaxLedgeCheckHeight; // 0x8c4
	float m_fMinLedgeCheckHeight; // 0x8c8
	float m_fSwimHeightBoost; // 0x8cc
	float m_fLedgeGrabbableZ; // 0x8d0
	float m_fVaultZSpeed; // 0x8d4
	float m_fEnhancedZSpeed; // 0x8d8
	float m_fVaultLateralSpeed; // 0x8dc
	float m_fVaultFacingThreshold; // 0x8e0
	float m_fVaultVerticalCheckInterval; // 0x8e4
	float m_fVaultHeadClearance; // 0x8e8
	float m_fMantleDownDistance; // 0x8ec
	float m_fVaultForwardDistance; // 0x8f0
	float m_fMantleMaxDistance; // 0x8f4
	FVector m_vMantleLaunchVelocity; // 0x8f8
	float m_fVaultErrorForgiveness; // 0x904
	float m_fVaultStepFactor; // 0x908
	float MantleStepHeightProxy; // 0x90c
	bool bRequireJumpForVault; // 0x910
	float MaximumVelocityPreserveHeight; // 0x914
	float MinimumSpeedForFromJumpMantles; // 0x918
	bool bAllowMantleEarlyOutOnFire; // 0x91c
	bool bRestrictVaultingIntoCrouch; // 0x91d
	float VaultFromGroundTraceHeightAdjust; // 0x920
	bool bVaultDebugPrinting; // 0x95c
	FMantleConfig CurrentMantleConfig; // 0x960
	FInterpCurveFloat MantleClothSimCurve; // 0xa50
	float m_fPostSprintLockoutTime; // 0xa78
	float m_fRemainingPostSprintLockoutTime; // 0xa7c
	float FreeFallClearanceHeight; // 0xa80
	float MinFreeFallSpeedZ; // 0xa84
	float DefaultFreeFallSpeedZ; // 0xa88
	float MaxFreeFallSpeedZ; // 0xa8c
	float MinFreeFallForwardSpeed; // 0xa90
	float DefaultFreeFallForwardSpeed; // 0xa94
	float MaxFreeFallForwardSpeed; // 0xa98
	float MaxDiveForwardSpeed; // 0xa9c
	float MaxFreeFallLateralSpeed; // 0xaa0
	float MaxFreeFallLateralAcceleration; // 0xaa4
	float MaxFreeFallReverseAcceleration; // 0xaa8
	float FreeFallAirControl; // 0xaac
	float FreeFallDelay; // 0xab0
	bool bInFreeFall; // 0xab4
	bool bWingsuitHasBeenDisabled; // 0xab5
	float FreeFallBrakingAcceleration; // 0xab8
	float FreeFallDiveThresholdAngle; // 0xabc
	float FreeFallDiveForwardInputThreshold; // 0xac0
	bool bWantsToEndFreeFallEarly; // 0xac4
	bool bIsFreeFallDiving; // 0xad8
	FRotator LastYawRotation; // 0xadc
	float FreeFallYawAccumDeltaTime; // 0xae8
	float FreeFallYawTotalDeltaTime; // 0xaec
	float FreeFallDelayProgress; // 0xaf0
	TWeakObjectPtr<AActor> FreeFallHeightActor; // 0xaf4
	bool bUseFreeFallStartHeight; // 0xafc
	float FreeFallNetSmoothTime; // 0xb00
	float PostFreeFallNetSmoothTimeRecoveryRate; // 0xb04
	bool bWingsuitControls; // 0xb09
	float WingsuitGlideDragCoefficient; // 0xb0c
	float WingsuitDiveDragCoefficient; // 0xb10
	float WingsuitGlideSurfaceArea; // 0xb14
	float WingsuitDiveSurfaceArea; // 0xb18
	char bCachedCharacterAllowDodgeRollRightNow : 1; // 0xb1c
	char bStartDodgeRoll : 1; // 0xb1c
	bool bWantsToDodgeRollOnLanding; // 0xb20
	bool bShouldDodgeRollOnLanding; // 0xb21
	uint32_t MidairDodgeRollCountSinceLastGrounded; // 0xb24
	float MaxDodgeRollSpeed; // 0xb28
	float DodgeRollDistance; // 0xb2c
	bool bCanDodgeRollFromAimDownSights; // 0xb30
	float DodgeRollCooldownTime; // 0xb34
	float DodgeRollForgivenessPeriod; // 0xb3c
	float DodgeRollForgivenessEndTime; // 0xb40
	float DodgeRollAcceleration; // 0xb58
	float BrakingDecelerationPostDodgeRoll; // 0xb5c
	bool bEnableBrakingDecelerationPostDodgeRoll; // 0xb60
	FInterpCurveFloat DodgeRollVelocityCurve; // 0xb68
	FInterpCurveFloat DodgeRollClothSimCurve; // 0xb80
	char bCachedCharacterAllowLungeRightNow : 1; // 0xb98
	float CurrentLungeDistance; // 0xb9c
	float MaxLungeDistance; // 0xba0
	AActor* LungeTarget; // 0xba8
	float CurrentLungeDuration; // 0xbb0
	float MaxLungeDuration; // 0xbb4
	float LungeAcceleration; // 0xbb8
	float MaxLungeSpeed; // 0xbbc
	float LungeStopLateralDistance; // 0xbc0
	float LungeStopVerticalDistance; // 0xbc4
	float LungeAirControl; // 0xbc8
	USplineComponent* FlightRecoverySplineComponent; // 0xbe8
	float FlightRecoverySpeed; // 0xbf4
	char bCachedCharacterAllowAbilityMoveRightNow : 1; // 0xbf8
	char bStartAbilityMovement : 1; // 0xbf8
	char bCachedCharacterAllowZipLineRightNow : 1; // 0xc00
	bool bZiplineEndsEnforceDirection; // 0xc08
	bool bAllowDodgeRollIntoZipline; // 0xc09
	bool bRequireJumpForZipline; // 0xc0a
	bool bRequireDownwardMovementToZipline; // 0xc0b
	bool bAllowZiplineReverseViaDodgeRoll; // 0xc0c
	float ZiplineAcceleration; // 0xc10
	bool bEnableFriendlyNudging; // 0xc15
	float MaxEmoteInterruptDistance; // 0xc1c
	float MaxEmoteMovingInterruptDistance; // 0xc20
	float CachedMaxEmoteInteruptDistance; // 0xc24
	bool bClientManuallyShoulderSwappedNearby; // 0xc28
};

struct UWBP_SettingsPreview_ShotgunReticleSize_C : UKSSettingsPreview {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UImage* Image_42; // 0x540
	UImage* Image_305; // 0x548
	UShotgunReticle_C* ShotgunReticle_2; // 0x550
	UKSSettingsDataFactory* SettingsDataFactory; // 0x558
};

struct UAnimComposite : UAnimCompositeBase {
	FAnimTrack AnimationTrack; // 0xa8
};

struct AKSEmoteMusicManager : AActor {
	float MaxAudibleEmoteDistance; // 0x248
};

struct USub_Hero_ABP_Locomotion_C : UKSLocomotionAnimInst {
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_8; // 0x10f0
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_30; // 0x11b8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_55; // 0x1338
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_54; // 0x13e8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7; // 0x1498
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_29; // 0x1560
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_53; // 0x16e0
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_28; // 0x1790
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_27; // 0x1910
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_26; // 0x1a90
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_25; // 0x1c10
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_24; // 0x1d90
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_23; // 0x1f10
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6; // 0x2090
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_52; // 0x2158
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_51; // 0x2208
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_50; // 0x22b8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_5; // 0x2368
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_149; // 0x2430
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_148; // 0x2468
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_147; // 0x24a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_146; // 0x24d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_145; // 0x2510
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_144; // 0x2548
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_143; // 0x2580
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_142; // 0x25b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_141; // 0x25f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_140; // 0x2628
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_139; // 0x2660
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_138; // 0x2698
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_137; // 0x26d0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_136; // 0x2708
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_135; // 0x2740
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_134; // 0x2778
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_133; // 0x27b0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_132; // 0x27e8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_131; // 0x2820
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_130; // 0x2858
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_129; // 0x2890
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_128; // 0x28c8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_127; // 0x2900
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_126; // 0x2938
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_125; // 0x2970
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_124; // 0x29a8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_123; // 0x29e0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_122; // 0x2a18
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_121; // 0x2a50
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_120; // 0x2a88
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_119; // 0x2ac0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_118; // 0x2af8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_117; // 0x2b30
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_116; // 0x2b68
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_115; // 0x2ba0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_114; // 0x2bd8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_113; // 0x2c10
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_112; // 0x2c48
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_111; // 0x2c80
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_110; // 0x2cb8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_109; // 0x2cf0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_108; // 0x2d28
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_107; // 0x2d60
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_106; // 0x2d98
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_105; // 0x2dd0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_104; // 0x2e08
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_103; // 0x2e40
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_102; // 0x2e78
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_101; // 0x2eb0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_100; // 0x2ee8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_99; // 0x2f20
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_98; // 0x2f58
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_97; // 0x2f90
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_96; // 0x2fc8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_95; // 0x3000
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_94; // 0x3038
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_93; // 0x3070
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_92; // 0x30a8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_91; // 0x30e0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_90; // 0x3118
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_89; // 0x3150
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_88; // 0x3188
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_87; // 0x31c0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_86; // 0x31f8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_85; // 0x3230
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_84; // 0x3268
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_83; // 0x32a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_82; // 0x32d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_81; // 0x3310
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_80; // 0x3348
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_79; // 0x3380
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_78; // 0x33b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_77; // 0x33f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_76; // 0x3428
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_75; // 0x3460
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_74; // 0x3498
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_73; // 0x34d0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_72; // 0x3508
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_71; // 0x3540
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_70; // 0x3578
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_69; // 0x35b0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_68; // 0x35e8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_67; // 0x3620
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_66; // 0x3658
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_65; // 0x3690
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_191; // 0x36c8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_145; // 0x3750
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_190; // 0x38b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_144; // 0x3938
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_11; // 0x3a98
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_62; // 0x3ad0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_189; // 0x3b90
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_188; // 0x3c18
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_187; // 0x3ca0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_186; // 0x3d28
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_185; // 0x3db0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_184; // 0x3e38
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_183; // 0x3ec0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_182; // 0x3f48
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_181; // 0x3fd0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_180; // 0x4058
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_179; // 0x40e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_178; // 0x4168
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_143; // 0x41f0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_142; // 0x4350
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_141; // 0x44b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_140; // 0x4610
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_139; // 0x4770
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_138; // 0x48d0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_137; // 0x4a30
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_136; // 0x4b90
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_135; // 0x4cf0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_134; // 0x4e50
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_133; // 0x4fb0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_132; // 0x5110
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_8; // 0x5270
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_61; // 0x5340
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_60; // 0x5400
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_59; // 0x54c0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_58; // 0x5580
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_57; // 0x5640
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_21; // 0x5700
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_49; // 0x57d8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_20; // 0x5888
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_48; // 0x5960
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_19; // 0x5a10
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_47; // 0x5ae8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_18; // 0x5b98
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_46; // 0x5c70
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_177; // 0x5d20
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_176; // 0x5da8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_175; // 0x5e30
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_174; // 0x5eb8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_173; // 0x5f40
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_172; // 0x5fc8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_171; // 0x6050
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_170; // 0x60d8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_169; // 0x6160
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_168; // 0x61e8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_167; // 0x6270
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_166; // 0x62f8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_131; // 0x6380
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_130; // 0x64e0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_129; // 0x6640
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_128; // 0x67a0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_127; // 0x6900
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_126; // 0x6a60
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_125; // 0x6bc0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_124; // 0x6d20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_123; // 0x6e80
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_122; // 0x6fe0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_121; // 0x7140
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_120; // 0x72a0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_56; // 0x7400
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_55; // 0x74c0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_54; // 0x7580
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_53; // 0x7640
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_17; // 0x7700
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_45; // 0x77d8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_16; // 0x7888
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_44; // 0x7960
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_15; // 0x7a10
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_43; // 0x7ae8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_14; // 0x7b98
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_42; // 0x7c70
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_52; // 0x7d20
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_41; // 0x7de0
	FAnimNode_StateResult AnimGraphNode_StateResult_37; // 0x7e90
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_119; // 0x7ed0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_26; // 0x8030
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_23; // 0x8120
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_25; // 0x8320
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_22; // 0x8410
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_24; // 0x8610
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_23; // 0x8700
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_22; // 0x87f0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_21; // 0x88e0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_20; // 0x8ae0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_19; // 0x8ce0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_51; // 0x8ee0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_40; // 0x8fa0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_21; // 0x9050
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_20; // 0x9140
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_19; // 0x9230
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_18; // 0x9320
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_17; // 0x9520
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_16; // 0x9720
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_50; // 0x9920
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_10; // 0x99e0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_39; // 0x9a18
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_165; // 0x9ac8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9; // 0x9b50
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8; // 0x9b88
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7; // 0x9bc0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_38; // 0x9bf8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_7; // 0x9ca8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_13; // 0x9d78
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_17; // 0x9e50
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_17; // 0x9e80
	FKSAnimNode_SpeedWarp KSAnimGraphNode_SpeedWarp_4; // 0x9eb0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_37; // 0x9fe0
	FAnimNode_StateResult AnimGraphNode_StateResult_36; // 0xa090
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_16; // 0xa0d0
	FAnimNode_LookAt AnimGraphNode_LookAt_6; // 0xa100
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_14; // 0xa2c0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_16; // 0xa3e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_164; // 0xa410
	FAnimNode_LookAt AnimGraphNode_LookAt_5; // 0xa4a0
	FAnimNode_LookAt AnimGraphNode_LookAt_4; // 0xa660
	FAnimNode_StateResult AnimGraphNode_StateResult_35; // 0xa820
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_163; // 0xa860
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_22; // 0xa8e8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_162; // 0xaa68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_161; // 0xaaf0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_160; // 0xab78
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_21; // 0xac00
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_20; // 0xad80
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_19; // 0xaf00
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_49; // 0xb080
	FAnimNode_StateResult AnimGraphNode_StateResult_34; // 0xb140
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_118; // 0xb180
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_117; // 0xb2e0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_116; // 0xb440
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_115; // 0xb5a0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_114; // 0xb700
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_113; // 0xb860
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_112; // 0xb9c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_111; // 0xbb20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_110; // 0xbc80
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_109; // 0xbde0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_108; // 0xbf40
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_107; // 0xc0a0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_48; // 0xc200
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_47; // 0xc2c0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_46; // 0xc380
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_45; // 0xc440
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_159; // 0xc500
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_158; // 0xc588
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_157; // 0xc610
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_156; // 0xc698
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_12; // 0xc720
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_36; // 0xc7f8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_11; // 0xc8a8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_35; // 0xc980
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_10; // 0xca30
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_34; // 0xcb08
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9; // 0xcbb8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_33; // 0xcc90
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_155; // 0xcd40
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_154; // 0xcdc8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_153; // 0xce50
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_152; // 0xced8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_151; // 0xcf60
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_150; // 0xcfe8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_149; // 0xd070
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_148; // 0xd0f8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_64; // 0xd180
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_63; // 0xd1b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_62; // 0xd1f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_61; // 0xd228
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_60; // 0xd260
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_59; // 0xd298
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_58; // 0xd2d0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_57; // 0xd308
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_56; // 0xd340
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_55; // 0xd378
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_54; // 0xd3b0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_53; // 0xd3e8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_52; // 0xd420
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_51; // 0xd458
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_50; // 0xd490
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_49; // 0xd4c8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_147; // 0xd500
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_106; // 0xd588
	FAnimNode_StateResult AnimGraphNode_StateResult_33; // 0xd6e8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_146; // 0xd728
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_145; // 0xd7b0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_144; // 0xd838
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_105; // 0xd8c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_104; // 0xda20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_103; // 0xdb80
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_44; // 0xdce0
	FAnimNode_StateResult AnimGraphNode_StateResult_32; // 0xdda0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_143; // 0xdde0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_142; // 0xde68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_141; // 0xdef0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_102; // 0xdf78
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_101; // 0xe0d8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_100; // 0xe238
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_43; // 0xe398
	FAnimNode_StateResult AnimGraphNode_StateResult_31; // 0xe458
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_140; // 0xe498
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_139; // 0xe520
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_138; // 0xe5a8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_99; // 0xe630
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_98; // 0xe790
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_97; // 0xe8f0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_42; // 0xea50
	FAnimNode_StateResult AnimGraphNode_StateResult_30; // 0xeb10
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_137; // 0xeb50
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_136; // 0xebd8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_135; // 0xec60
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_96; // 0xece8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_95; // 0xee48
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_94; // 0xefa8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_41; // 0xf108
	FAnimNode_StateResult AnimGraphNode_StateResult_29; // 0xf1c8
	FAnimNode_StateMachine AnimGraphNode_StateMachine_6; // 0xf208
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_40; // 0xf2c8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_32; // 0xf388
	FAnimNode_StateResult AnimGraphNode_StateResult_28; // 0xf438
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_134; // 0xf478
	FAnimNode_StateResult AnimGraphNode_StateResult_27; // 0xf500
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_18; // 0xf540
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_15; // 0xf630
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_3; // 0xf830
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_17; // 0xf908
	FAnimNode_LookAt AnimGraphNode_LookAt_3; // 0xfa00
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_13; // 0xfbc0
	FAnimNode_LookAt AnimGraphNode_LookAt_2; // 0xfce0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_15; // 0xfea0
	FKSAnimNode_SpeedWarp KSAnimGraphNode_SpeedWarp_3; // 0xfed0
	FAnimNode_LookAt AnimGraphNode_LookAt; // 0x10000
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_15; // 0x101c0
	FAnimNode_StateResult AnimGraphNode_StateResult_26; // 0x101f0
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator_2; // 0x10230
	FAnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator; // 0x10288
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_31; // 0x102e0
	FAnimNode_StateResult AnimGraphNode_StateResult_25; // 0x10390
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_133; // 0x103d0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_93; // 0x10458
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_132; // 0x105b8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_92; // 0x10640
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_131; // 0x107a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_130; // 0x10828
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_91; // 0x108b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_90; // 0x10a10
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_39; // 0x10b70
	FAnimNode_StateResult AnimGraphNode_StateResult_24; // 0x10c30
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_129; // 0x10c70
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_18; // 0x10cf8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_128; // 0x10e78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_127; // 0x10f00
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_126; // 0x10f88
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_17; // 0x11010
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_16; // 0x11190
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_15; // 0x11310
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_38; // 0x11490
	FAnimNode_StateResult AnimGraphNode_StateResult_23; // 0x11550
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6; // 0x11590
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_125; // 0x115c8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_30; // 0x11650
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_6; // 0x11700
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_124; // 0x117d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5; // 0x11858
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_29; // 0x11890
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_123; // 0x11940
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_5; // 0x119c8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_122; // 0x11a98
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_121; // 0x11b20
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_120; // 0x11ba8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_28; // 0x11c30
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_27; // 0x11ce0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_26; // 0x11d90
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_119; // 0x11e40
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_118; // 0x11ec8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_25; // 0x11f50
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4; // 0x12000
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3; // 0x12038
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4; // 0x12070
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_3; // 0x12140
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x12210
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x12248
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2; // 0x12280
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend; // 0x12350
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_117; // 0x12420
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_116; // 0x124a8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_115; // 0x12530
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_114; // 0x125b8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_113; // 0x12640
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_112; // 0x126c8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_37; // 0x12750
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_36; // 0x12810
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_24; // 0x128d0
	FAnimNode_StateResult AnimGraphNode_StateResult_22; // 0x12980
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_89; // 0x129c0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_111; // 0x12b20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_88; // 0x12ba8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_87; // 0x12d08
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_86; // 0x12e68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_110; // 0x12fc8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_109; // 0x13050
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_108; // 0x130d8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_35; // 0x13160
	FAnimNode_StateResult AnimGraphNode_StateResult_21; // 0x13220
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_107; // 0x13260
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_106; // 0x132e8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_105; // 0x13370
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_104; // 0x133f8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_103; // 0x13480
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_102; // 0x13508
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_101; // 0x13590
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_100; // 0x13618
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_99; // 0x136a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_98; // 0x13728
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_97; // 0x137b0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_96; // 0x13838
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_95; // 0x138c0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_94; // 0x13948
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_93; // 0x139d0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_92; // 0x13a58
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_91; // 0x13ae0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_90; // 0x13b68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_89; // 0x13bf0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_88; // 0x13c78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_87; // 0x13d00
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_86; // 0x13d88
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_85; // 0x13e10
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_84; // 0x13e98
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_85; // 0x13f20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_84; // 0x14080
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_83; // 0x141e0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_82; // 0x14340
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_81; // 0x144a0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_80; // 0x14600
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_79; // 0x14760
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_78; // 0x148c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_77; // 0x14a20
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_76; // 0x14b80
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_75; // 0x14ce0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_74; // 0x14e40
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_73; // 0x14fa0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_72; // 0x15100
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_71; // 0x15260
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_70; // 0x153c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_69; // 0x15520
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_68; // 0x15680
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_67; // 0x157e0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_66; // 0x15940
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_65; // 0x15aa0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_64; // 0x15c00
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_63; // 0x15d60
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_62; // 0x15ec0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_34; // 0x16020
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_33; // 0x160e0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_32; // 0x161a0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_31; // 0x16260
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_30; // 0x16320
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_29; // 0x163e0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_28; // 0x164a0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_27; // 0x16560
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_8; // 0x16620
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_23; // 0x166f8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_7; // 0x167a8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_22; // 0x16880
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_6; // 0x16930
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_21; // 0x16a08
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_5; // 0x16ab8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_20; // 0x16b90
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_4; // 0x16c40
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_19; // 0x16d18
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_3; // 0x16dc8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_18; // 0x16ea0
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_2; // 0x16f50
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_17; // 0x17028
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend; // 0x170d8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_16; // 0x171b0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_26; // 0x17260
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_25; // 0x17320
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_15; // 0x173e0
	FAnimNode_StateResult AnimGraphNode_StateResult_20; // 0x17490
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_16; // 0x174d0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_15; // 0x175c0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_14; // 0x176b0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_14; // 0x177a0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_13; // 0x179a0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_12; // 0x17ba0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_24; // 0x17da0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14; // 0x17e60
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_13; // 0x17f10
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_12; // 0x18000
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_11; // 0x180f0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_11; // 0x181e0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_10; // 0x183e0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_9; // 0x185e0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_23; // 0x187e0
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_2; // 0x188a0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_10; // 0x18978
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_48; // 0x18a68
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_47; // 0x18aa0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_46; // 0x18ad8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_45; // 0x18b10
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_44; // 0x18b48
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_43; // 0x18b80
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_42; // 0x18bb8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_41; // 0x18bf0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_40; // 0x18c28
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_39; // 0x18c60
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_38; // 0x18c98
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_37; // 0x18cd0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_36; // 0x18d08
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_35; // 0x18d40
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_34; // 0x18d78
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_33; // 0x18db0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_83; // 0x18de8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_61; // 0x18e70
	FAnimNode_StateResult AnimGraphNode_StateResult_19; // 0x18fd0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_60; // 0x19010
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_59; // 0x19170
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_58; // 0x192d0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_82; // 0x19430
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_81; // 0x194b8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_80; // 0x19540
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_14; // 0x195c8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_14; // 0x195f8
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_12; // 0x19628
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_22; // 0x19748
	FAnimNode_StateResult AnimGraphNode_StateResult_18; // 0x19808
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_57; // 0x19848
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_56; // 0x199a8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_55; // 0x19b08
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_79; // 0x19c68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_78; // 0x19cf0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_77; // 0x19d78
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_13; // 0x19e00
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_13; // 0x19e30
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_11; // 0x19e60
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_21; // 0x19f80
	FAnimNode_StateResult AnimGraphNode_StateResult_17; // 0x1a040
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_54; // 0x1a080
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_53; // 0x1a1e0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_52; // 0x1a340
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_76; // 0x1a4a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_75; // 0x1a528
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_74; // 0x1a5b0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_12; // 0x1a638
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_12; // 0x1a668
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_10; // 0x1a698
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_20; // 0x1a7b8
	FAnimNode_StateResult AnimGraphNode_StateResult_16; // 0x1a878
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_51; // 0x1a8b8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_50; // 0x1aa18
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_49; // 0x1ab78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_73; // 0x1acd8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_72; // 0x1ad60
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_71; // 0x1ade8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_11; // 0x1ae70
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_11; // 0x1aea0
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_9; // 0x1aed0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_19; // 0x1aff0
	FAnimNode_StateResult AnimGraphNode_StateResult_15; // 0x1b0b0
	FAnimNode_StateMachine AnimGraphNode_StateMachine_5; // 0x1b0f0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_13; // 0x1b1b0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_10; // 0x1b260
	FKSAnimNode_SpeedWarp KSAnimGraphNode_SpeedWarp_2; // 0x1b290
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_10; // 0x1b3c0
	FAnimNode_StateResult AnimGraphNode_StateResult_14; // 0x1b3f0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_8; // 0x1b430
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_7; // 0x1b630
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_6; // 0x1b830
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_18; // 0x1ba30
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_9; // 0x1baf0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8; // 0x1bbe0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_7; // 0x1bcd0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_12; // 0x1bdc0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_17; // 0x1be70
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_5; // 0x1bf30
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_4; // 0x1c130
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_3; // 0x1c330
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_6; // 0x1c530
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_5; // 0x1c620
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_4; // 0x1c710
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_2; // 0x1c800
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_3; // 0x1ca00
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned; // 0x1caf0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_2; // 0x1ccf0
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive; // 0x1cde0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer; // 0x1ceb8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_32; // 0x1cfa8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_31; // 0x1cfe0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_30; // 0x1d018
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_29; // 0x1d050
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_28; // 0x1d088
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_27; // 0x1d0c0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_26; // 0x1d0f8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_25; // 0x1d130
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_24; // 0x1d168
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_23; // 0x1d1a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_22; // 0x1d1d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_21; // 0x1d210
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_20; // 0x1d248
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_19; // 0x1d280
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_18; // 0x1d2b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_17; // 0x1d2f0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_70; // 0x1d328
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_48; // 0x1d3b0
	FAnimNode_StateResult AnimGraphNode_StateResult_13; // 0x1d510
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_69; // 0x1d550
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_47; // 0x1d5d8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_68; // 0x1d738
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_67; // 0x1d7c0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_66; // 0x1d848
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_46; // 0x1d8d0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_45; // 0x1da30
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_44; // 0x1db90
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_16; // 0x1dcf0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_9; // 0x1ddb0
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_8; // 0x1dde0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_9; // 0x1df00
	FAnimNode_StateResult AnimGraphNode_StateResult_12; // 0x1df30
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_65; // 0x1df70
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_43; // 0x1dff8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_64; // 0x1e158
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_63; // 0x1e1e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_62; // 0x1e268
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_42; // 0x1e2f0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_41; // 0x1e450
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_40; // 0x1e5b0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_15; // 0x1e710
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_7; // 0x1e7d0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_8; // 0x1e8f0
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_8; // 0x1e920
	FAnimNode_StateResult AnimGraphNode_StateResult_11; // 0x1e950
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_61; // 0x1e990
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_39; // 0x1ea18
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_60; // 0x1eb78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_59; // 0x1ec00
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_58; // 0x1ec88
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_38; // 0x1ed10
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_37; // 0x1ee70
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_36; // 0x1efd0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_14; // 0x1f130
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_6; // 0x1f1f0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_7; // 0x1f310
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_7; // 0x1f340
	FAnimNode_StateResult AnimGraphNode_StateResult_10; // 0x1f370
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_57; // 0x1f3b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_35; // 0x1f438
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_56; // 0x1f598
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_55; // 0x1f620
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_54; // 0x1f6a8
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_34; // 0x1f730
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_33; // 0x1f890
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_32; // 0x1f9f0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_13; // 0x1fb50
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_5; // 0x1fc10
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_6; // 0x1fd30
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_6; // 0x1fd60
	FAnimNode_StateResult AnimGraphNode_StateResult_9; // 0x1fd90
	FAnimNode_StateMachine AnimGraphNode_StateMachine_4; // 0x1fdd0
	FAnimNode_StateResult AnimGraphNode_StateResult_8; // 0x1fe90
	FAnimNode_StateMachine AnimGraphNode_StateMachine_3; // 0x1fed0
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5; // 0x1ff90
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5; // 0x1ffc0
	FKSAnimNode_SpeedWarp KSAnimGraphNode_SpeedWarp; // 0x1fff0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_11; // 0x20120
	FAnimNode_StateResult AnimGraphNode_StateResult_7; // 0x201d0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_12; // 0x20210
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_10; // 0x202d0
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_14; // 0x20380
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_53; // 0x20500
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_13; // 0x20588
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_52; // 0x20708
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_11; // 0x20790
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_9; // 0x20850
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8; // 0x20900
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_51; // 0x209b0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_50; // 0x20a38
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_12; // 0x20ac0
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_11; // 0x20c40
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_10; // 0x20dc0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_49; // 0x20e80
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_48; // 0x20f08
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_10; // 0x20f90
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_9; // 0x21110
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_9; // 0x21290
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7; // 0x21350
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_8; // 0x21400
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_47; // 0x21580
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_7; // 0x21608
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_46; // 0x21788
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_8; // 0x21810
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6; // 0x218d0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_45; // 0x21980
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_31; // 0x21a08
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_44; // 0x21b68
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_30; // 0x21bf0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_43; // 0x21d50
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_29; // 0x21dd8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_42; // 0x21f38
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_28; // 0x21fc0
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5; // 0x22120
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_41; // 0x221d0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_40; // 0x22258
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_6; // 0x222e0
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_5; // 0x22460
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_7; // 0x225e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_39; // 0x226a0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_38; // 0x22728
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_4; // 0x227b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_27; // 0x22930
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_26; // 0x22a90
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_3; // 0x22bf0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_37; // 0x22d70
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_36; // 0x22df8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_35; // 0x22e80
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_25; // 0x22f08
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_34; // 0x23068
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_24; // 0x230f0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_6; // 0x23250
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_5; // 0x23310
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4; // 0x233d0
	FAnimNode_StateResult AnimGraphNode_StateResult_6; // 0x23480
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0x234c0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_16; // 0x23580
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_15; // 0x235b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_14; // 0x235f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_13; // 0x23628
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_12; // 0x23660
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_11; // 0x23698
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_10; // 0x236d0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_9; // 0x23708
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8; // 0x23740
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_7; // 0x23778
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_6; // 0x237b0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_5; // 0x237e8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x23820
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x23858
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x23890
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x238c8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_33; // 0x23900
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_23; // 0x23988
	FAnimNode_StateResult AnimGraphNode_StateResult_5; // 0x23ae8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_32; // 0x23b28
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_22; // 0x23bb0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_31; // 0x23d10
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_21; // 0x23d98
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_30; // 0x23ef8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_29; // 0x23f80
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_20; // 0x24008
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_19; // 0x24168
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_4; // 0x242c8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4; // 0x24388
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_4; // 0x243b8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4; // 0x244d8
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x24508
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_28; // 0x24548
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_18; // 0x245d0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_27; // 0x24730
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_17; // 0x247b8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_26; // 0x24918
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_25; // 0x249a0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_16; // 0x24a28
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_15; // 0x24b88
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_3; // 0x24ce8
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_3; // 0x24da8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3; // 0x24ec8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3; // 0x24ef8
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x24f28
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_24; // 0x24f68
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_14; // 0x24ff0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_23; // 0x25150
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_13; // 0x251d8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_22; // 0x25338
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_21; // 0x253c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_12; // 0x25448
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_11; // 0x255a8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_2; // 0x25708
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp_2; // 0x257c8
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2; // 0x258e8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2; // 0x25918
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x25948
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_20; // 0x25988
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_10; // 0x25a10
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_19; // 0x25b70
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_9; // 0x25bf8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_18; // 0x25d58
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_17; // 0x25de0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_8; // 0x25e68
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_7; // 0x25fc8
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum; // 0x26128
	FKSAnimNode_OrientationWarp KSAnimGraphNode_OrientationWarp; // 0x261e8
	FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace; // 0x26308
	FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace; // 0x26338
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x26368
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x263a8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_4; // 0x26468
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x26530
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_6; // 0x265e0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_16; // 0x26740
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_5; // 0x267c8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_15; // 0x26928
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3; // 0x269b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_4; // 0x26a78
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_14; // 0x26bd8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_13; // 0x26c60
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_3; // 0x26ce8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x26e48
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2; // 0x26ef8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_12; // 0x26fc0
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned_2; // 0x27048
	FAnimNode_SeqCurveEvalSkinned AnimGraphNode_SeqCurveEvalSkinned; // 0x271c8
	FAnimNode_Root AnimGraphNode_Root; // 0x27348
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_11; // 0x27388
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_10; // 0x27410
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9; // 0x27498
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_8; // 0x27520
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_7; // 0x275a8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6; // 0x27630
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5; // 0x276b8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x27740
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x277c8
	FAnimNode_Inertialization AnimGraphNode_Inertialization; // 0x27850
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x278d0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_2; // 0x27980
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x27ae0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x27b68
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x27cc8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x27d50
	float MaxMantleHt; // 0x27e18
	float Max2StoryMantleHt; // 0x27e1c
	bool StringMantlesTogether; // 0x27e20
	bool Starting a Pivot; // 0x27e21
	bool Dodge Rolling BP; // 0x27e22
	float InitialDistanceFromJumpLand; // 0x27e24
	float Cached Stop Angle; // 0x27e28
	UAnimSequenceBase* Turn Eng Crouch; // 0x27e30
	UAnimSequenceBase* TurnCrouch; // 0x27e38
	UAnimSequenceBase* Turn Eng; // 0x27e40
	UAnimSequenceBase* Turn; // 0x27e48
	UKSCharacterAnimInst* Hero ABP; // 0x27e50
	AKSCharacter* Character; // 0x27e58
	bool bConfirmedStopping; // 0x27e60
	float LocomotionDirectionBlendTime; // 0x27e64
	UAnimSequenceBase* TurnNonComCrouch; // 0x27e68
	UAnimSequenceBase* TurnNonCom; // 0x27e70
	bool bStartUsesPivotLocation; // 0x27e78
	float CachedPivotAngle; // 0x27e7c
	bool TESTSprintIntro; // 0x27e80
	bool MasterWeaponIsGrenade; // 0x27e81
	float LocomotionThreshold; // 0x27e84
	bool bUseWalkStop; // 0x27e88
	bool PrototypeLocomotionGraphEnable; // 0x27e89
	bool DisableUpperBodyTurnInPlace; // 0x27e8a
	EKSMovementDirection CachedPivotDirection; // 0x27e8b
	UAnimSequenceBase* Turn Buildup Crouch; // 0x27e90
	UAnimSequenceBase* Turn Buildup; // 0x27e98
	bool bExitingMantleBP; // 0x27ea0
	bool bPlayingJumpLandingBP; // 0x27ea1
	float CallFunc_BreakVector_X; // 0x27ea4
	float CallFunc_BreakVector_Y; // 0x27ea8
	float CallFunc_BreakVector_Z; // 0x27eac
	float CallFunc_BreakVector_X_2; // 0x27eb0
	float CallFunc_BreakVector_Y_2; // 0x27eb4
	float CallFunc_BreakVector_Z_2; // 0x27eb8
	float CallFunc_BreakVector_X_3; // 0x27ebc
	float CallFunc_BreakVector_Y_3; // 0x27ec0
	float CallFunc_BreakVector_Z_3; // 0x27ec4
	float CallFunc_BreakVector_X_4; // 0x27ec8
	float CallFunc_BreakVector_Y_4; // 0x27ecc
	float CallFunc_BreakVector_Z_4; // 0x27ed0
	bool Temp_bool_Variable; // 0x27ed4
	float CallFunc_BreakVector_X_5; // 0x27ed8
	float CallFunc_BreakVector_Y_5; // 0x27edc
	float CallFunc_BreakVector_Z_5; // 0x27ee0
	float CallFunc_BreakVector_X_6; // 0x27ee4
	float CallFunc_BreakVector_Y_6; // 0x27ee8
	float CallFunc_BreakVector_Z_6; // 0x27eec
	float K2Node_Select_Default; // 0x27ef0
	float Temp_float_Variable; // 0x27ef4
	float Temp_float_Variable_2; // 0x27ef8
	bool Temp_bool_Variable_2; // 0x27efc
	float K2Node_Select_Default_2; // 0x27f00
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x27f08
	bool K2Node_DynamicCast_bSuccess; // 0x27f10
	float K2Node_Event_InMantleHeight; // 0x27f14
	bool K2Node_Event_bInVault; // 0x27f18
	float K2Node_Event_InVaultDrop; // 0x27f1c
	float K2Node_Event_InUpDuration; // 0x27f20
	float K2Node_Event_InAcrossDuration; // 0x27f24
	float K2Node_Event_InDownDuration; // 0x27f28
	FName K2Node_Event_InMantleName; // 0x27f2c
	float K2Node_Event_DeltaTimeX; // 0x27f34
	EKSTurnInPlaceAnimationVariant K2Node_Event_AnimationVariant; // 0x27f38
	float K2Node_Event_DelayTime; // 0x27f3c
	UKSCharacterAnimInst* K2Node_DynamicCast_AsKSCharacter_Anim_Inst; // 0x27f40
	bool K2Node_DynamicCast_bSuccess_2; // 0x27f48
	bool K2Node_SwitchEnum_CmpSuccess; // 0x27f49
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride; // 0x27f4a
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_2; // 0x27f4b
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_3; // 0x27f4c
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_4; // 0x27f4d
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_5; // 0x27f4e
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_6; // 0x27f4f
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_7; // 0x27f50
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_8; // 0x27f51
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_9; // 0x27f52
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_10; // 0x27f53
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_11; // 0x27f54
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_12; // 0x27f55
	FVector K2Node_Event_StopLocation; // 0x27f58
	FVector K2Node_Event_PivotLocation; // 0x27f64
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter_2; // 0x27f70
	bool K2Node_DynamicCast_bSuccess_3; // 0x27f78
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_13; // 0x27f79
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_14; // 0x27f7a
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_15; // 0x27f7b
	bool CallFunc_GetSkinnedAnimSequence_bHasOverride_16; // 0x27f7c
};

struct UParticleModuleVelocity_Seeded : UParticleModuleVelocity {
	FParticleRandomSeedInfo RandomSeedInfo; // 0xb0
};

struct UWidgetSwitcher : UPanelWidget {
	int32_t ActiveWidgetIndex; // 0x128
};

struct UParticleSystem : UFXSystemAsset {
	float UpdateTime_FPS; // 0x30
	float UpdateTime_Delta; // 0x34
	float WarmupTime; // 0x38
	float WarmupTickRate; // 0x3c
	TArray<UParticleEmitter*> Emitters; // 0x40
	UParticleSystemComponent* PreviewComponent; // 0x50
	UInterpCurveEdSetup* CurveEdSetup; // 0x58
	float LODDistanceCheckTime; // 0x60
	float MacroUVRadius; // 0x64
	TArray<float> LODDistances; // 0x68
	TArray<FParticleSystemLOD> LODSettings; // 0x78
	FBox FixedRelativeBoundingBox; // 0x88
	float SecondsBeforeInactive; // 0xa4
	float Delay; // 0xa8
	float DelayLow; // 0xac
	char bOrientZAxisTowardCamera : 1; // 0xb0
	char bUseFixedRelativeBoundingBox : 1; // 0xb0
	char bShouldResetPeakCounts : 1; // 0xb0
	char bHasPhysics : 1; // 0xb0
	char bUseRealtimeThumbnail : 1; // 0xb0
	char ThumbnailImageOutOfDate : 1; // 0xb0
	char bUseDelayRange : 1; // 0xb1
	char bAllowManagedTicking : 1; // 0xb1
	char bAutoDeactivate : 1; // 0xb1
	char bRegenerateLODDuplicate : 1; // 0xb1
	EParticleSystemUpdateMode SystemUpdateMode; // 0xb2
	ParticleSystemLODMethod LODMethod; // 0xb3
	EParticleSystemInsignificanceReaction InsignificantReaction; // 0xb4
	EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xb5
	EParticleSignificanceLevel MaxSignificanceLevel; // 0xb7
	uint32_t MinTimeBetweenTicks; // 0xb8
	float InsignificanceDelay; // 0xbc
	FVector MacroUVPosition; // 0xc0
	FBox CustomOcclusionBounds; // 0xcc
	TArray<FLODSoloTrack> SoloTracking; // 0xe8
	TArray<FNamedEmitterMaterial> NamedMaterialSlots; // 0xf8
};

struct UWidgetNavigation : UObject {
	FWidgetNavigationData Up; // 0x28
	FWidgetNavigationData Down; // 0x4c
	FWidgetNavigationData Left; // 0x70
	FWidgetNavigationData Right; // 0x94
	FWidgetNavigationData Next; // 0xb8
	FWidgetNavigationData Previous; // 0xdc
};

struct UKSWeaponAttachment_LongBarrel : UKSWeaponAttachment {
	float FalloffRangeMultiplier; // 0x2f8
};

struct UKSActivityRewardCondition_DamageHistoryClass : UKSActivityRewardCondition {
	TArray<UDamageType*> MatchingDamageTypes; // 0x30
};

struct UMaterialExpressionFunctionInput : UMaterialExpression {
	FExpressionInput Preview; // 0x40
	FName InputName; // 0x54
	FString Description; // 0x60
	FGuid ID; // 0x70
	EFunctionInputType InputType; // 0x80
	FVector4 PreviewValue; // 0x90
	char bUsePreviewValueAsDefault : 1; // 0xa0
	int32_t SortPriority; // 0xa4
	char bCompilingFunctionPreview : 1; // 0xa8
};

struct UNavLinkCustomComponent : UNavRelevantComponent {
	uint32_t NavLinkUserId; // 0xe8
	UNavArea* EnabledAreaClass; // 0xf0
	UNavArea* DisabledAreaClass; // 0xf8
	FNavAgentSelector SupportedAgents; // 0x100
	FVector LinkRelativeStart; // 0x104
	FVector LinkRelativeEnd; // 0x110
	ENavLinkDirection LinkDirection; // 0x11c
	char bLinkEnabled : 1; // 0x120
	char bNotifyWhenEnabled : 1; // 0x120
	char bNotifyWhenDisabled : 1; // 0x120
	char bCreateBoxObstacle : 1; // 0x120
	FVector ObstacleOffset; // 0x124
	FVector ObstacleExtent; // 0x130
	UNavArea* ObstacleAreaClass; // 0x140
	float BroadcastRadius; // 0x148
	float BroadcastInterval; // 0x14c
	ECollisionChannel BroadcastChannel; // 0x150
};

struct USoundMix : UObject {
	char bApplyEQ : 1; // 0x28
	float EQPriority; // 0x2c
	FAudioEQEffect EQSettings; // 0x30
	TArray<FSoundClassAdjuster> SoundClassEffects; // 0x70
	float InitialDelay; // 0x80
	float FadeInTime; // 0x84
	float Duration; // 0x88
	float FadeOutTime; // 0x8c
};

struct UMovieSceneNiagaraVectorParameterTrack : UMovieSceneNiagaraParameterTrack {
	int32_t ChannelsUsed; // 0x90
};

struct UKSHUDAnnouncementComponent : UActorComponent {
	FMulticastInlineDelegate OnEndOfMatch; // 0xb0
	AKSPlayerController* OwningPlayer; // 0xc0
	FMulticastInlineDelegate OnAnnouncement; // 0xc8
	FMulticastInlineDelegate OnResultAnnouncement; // 0xd8
};

struct UKSDownloadProgressWidget : UUserWidget {
	float UpdatePeriod; // 0x238
	bool bMarkedFinished; // 0x23c
	float TimeUntilNextUpdate; // 0x240
};

struct UBTDecorator_BlueprintBase : UBTDecorator {
	AAIController* AIOwner; // 0x68
	AActor* ActorOwner; // 0x70
	TArray<FName> ObservedKeyNames; // 0x78
	char bShowPropertyDetails : 1; // 0x98
	char bCheckConditionOnlyBlackBoardChanges : 1; // 0x98
	char bIsObservingBB : 1; // 0x98
};

struct UWBP_RewardsTrackMeter_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UHorizontalBox* SegmentContainer; // 0x528
	USpacer* SpacerL; // 0x530
	USpacer* SpacerR; // 0x538
	UWBP_RewardsTrackMeterSegment_C* WBP_RewardsTrackBarSegment; // 0x540
	UWBP_RewardsTrackMeterSegment_C* WBP_RewardsTrackBarSegment_106; // 0x548
	FPlayerProgression Progression; // 0x550
	int32_t CurrentTierIndex; // 0x6c0
	FMulticastInlineDelegate OnLevelUpEvent; // 0x6c8
	FMulticastInlineDelegate OnLevelDownEvent; // 0x6d8
	FSlateColor BaseColor; // 0x6e8
	FSlateColor IncreaseColor; // 0x710
	FSlateColor DecreaseColor; // 0x738
	UAkAudioEvent* PlayRankProgressionSFX; // 0x760
	UAkAudioEvent* StopRankProgressionSFX; // 0x768
	FSlateColor BackgroundColor; // 0x770
	float Clamped Base Pct; // 0x798
	float Clamped Delta Pct; // 0x79c
	FSlateColor BonusIncreaseColor; // 0x7a0
	FMulticastInlineDelegate OnLerpUpdate; // 0x7c8
	float AnimTimeInitial; // 0x7d8
	float AnimTimeFinal; // 0x7dc
	int32_t NumSegments; // 0x7e0
	int32_t PageIndex; // 0x7e4
};

struct UKSStoreSectionItem : UObject {
	TArray<UKSStorePanelItem*> StorePanelItems; // 0x28
	int32_t column; // 0x38
	int32_t Row; // 0x3c
	EStoreItemWidgetType WidgetType; // 0x40
	UKSStorePanelItem* CurrentlyViewedItem; // 0x48
};

struct UWBP_WeaponProgressButton_C : UKSWeaponProgressButton {
	FPointerToUberGraphFrame UberGraphFrame; // 0x560
	UWidgetAnimation* Anim_OnFavoriteButtonHover; // 0x568
	UWidgetAnimation* Anim_OnSubButtonHover; // 0x570
	UWidgetAnimation* Anim_OnHover; // 0x578
	UImage* bg_fill; // 0x580
	UImage* Bg_Gradient; // 0x588
	UWBP_KSCosmeticItemDisplay_C* CosmeticItem; // 0x590
	UButton* FavoriteStarButton; // 0x598
	UWidgetSwitcher* FavoriteStarSwitcher; // 0x5a0
	UButton* HitTarget; // 0x5a8
	UHorizontalBox* HorizontalBox_51; // 0x5b0
	UOverlay* IsFavorite; // 0x5b8
	UImage* LockIcon; // 0x5c0
	UOverlay* MakeFavorite; // 0x5c8
	UWBP_ProgressEarnedBar_C* ProgressBar; // 0x5d0
	UOverlay* ProgressGroup; // 0x5d8
	UImage* SimpleHoverFrame; // 0x5e0
	UImage* Stroke; // 0x5e8
	UButton* SubButton; // 0x5f0
	UImage* SubButtonBG; // 0x5f8
	UOverlay* SubButtonClickable; // 0x600
	UImage* SubButtonIcon; // 0x608
	UImage* SubButtonStroke; // 0x610
	UWBP_WeaponMasteryBadge_C* WBP_WeaponMasteryBadge; // 0x618
	UWBP_AsyncIcon_C* WeaponImage; // 0x620
	UBorder* WeaponName; // 0x628
	UTextBlock* WeaponNameText; // 0x630
	USizeBox* WidgetSize; // 0x638
	bool bHideCosmeticIcon; // 0x640
	bool bHideMastery; // 0x641
	bool bCompactView; // 0x642
	UAkAudioEvent* HoverWEPProgressButtonSFX; // 0x648
	float WidthOverride; // 0x650
	float HeightOverride; // 0x654
	UKSJobItem* JobItem; // 0x658
	bool bWeaponOwnedByRogue; // 0x660
	bool bIsFavoritedByRogue; // 0x661
	bool bIsPrimarySelectButton; // 0x662
	bool bIsBoundToLoadouts; // 0x663
	bool bIsMastered; // 0x664
	bool bForceFavoriteStar; // 0x665
	FMulticastInlineDelegate OnFavoriteSelected; // 0x668
	UAkAudioEvent* ClickWeaponProgressButtonSFX; // 0x678
	UAkAudioEvent* ClickSubButton_SFX; // 0x680
	UAkAudioEvent* GamePad_WeaponProgressButtonSFX; // 0x688
};

struct UKSAutoTeamWidget : UKSTeamWidget {
	EKSAutoTeamType AutoTeamType; // 0x550
	int32_t TeamNumber; // 0x554
};

struct UWBP_PlayerProfileScreen_AccountPanel_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UTextBlock* ComingSoon; // 0x528
	UVerticalBox* ContentBox; // 0x530
	UImage* LockIcon; // 0x538
	UTextBlock* Title; // 0x540
	UWBP_PanelButton_C* WBP_PanelButton; // 0x548
	UWBP_PlayerIdentity_Full_C* WBP_PlayerIdentity_Full; // 0x550
	bool IsDisabled; // 0x558
};

struct UKSTextChatWidget : UKSWidget {
	TArray<EMercCosmeticSlot> RadialMenuItemsToShowInChat; // 0x520
	bool ActiveChatChannelsDirty; // 0x530
	TArray<FPUMG_ActiveChatChannelData> ActiveChatChannels; // 0x538
	int32_t CurrentChatChannelIndex; // 0x548
	FMulticastInlineDelegate OnCurrentChatChannelChanged; // 0x550
};

struct UKSNudgeComponent : UActorComponent {
	TArray<AActor*> NudgeClassFilters; // 0xb0
	float NudgeSpeed; // 0xc0
	float MaxNudgeDistance; // 0xc4
	TArray<TWeakObjectPtr<AActor>> CachedNudgingActors; // 0xc8
};

struct UNiagaraScript : UObject {
	ENiagaraScriptUsage Usage; // 0x28
	int32_t UsageIndex; // 0x2c
	FGuid UsageId; // 0x30
	FNiagaraParameterStore RapidIterationParameters; // 0x40
	FNiagaraScriptExecutionParameterStore ScriptExecutionParamStore; // 0xf8
	TArray<FNiagaraBoundParameter> ScriptExecutionBoundParameters; // 0x1d0
	FNiagaraVMExecutableDataId CachedScriptVMId; // 0x1e0
	FNiagaraVMExecutableData CachedScriptVM; // 0x3d8
	TArray<UNiagaraParameterCollection*> CachedParameterCollectionReferences; // 0x500
	TArray<FNiagaraScriptDataInterfaceInfo> CachedDefaultDataInterfaces; // 0x510
};

struct UWBP_AsyncIcon_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UKSAsyncImage* Icon; // 0x240
	UThrobber* LoadingThrobber; // 0x248
	FMulticastInlineDelegate OnIconUpdated; // 0x250
	FSlateBrush DefaultBrush; // 0x260
};

struct UKSJobSelectOverallStatusWidget : UKSJobSelectorWidget {
	FText CachedDisplayText; // 0x548
	FPGame_ReplicatedTimerId CachedDisplayTimerId; // 0x560
	EPGame_ReplicateTimerState CachedTimerState; // 0x561
	FJobSelectionTask CachedPrimaryTask; // 0x568
	float TimerUpdatePeriod; // 0x5b0
};

struct UKSWhatsNewModal : UKSWidget {
	int32_t maxPanelCount; // 0x520
	TArray<UKSWhatsNewPanel*> StoredPanels; // 0x528
};

struct UPUMG_PartyDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnPartyDataUpdated; // 0x38
	FMulticastInlineDelegate OnPartyLocalPlayerLeft; // 0x48
	FMulticastInlineDelegate OnPartyLocalPlayerPromoted; // 0x58
	FMulticastInlineDelegate OnPartyMemberPromoted; // 0x68
	FMulticastInlineDelegate OnPartyMemberDataUpdated; // 0x78
	FMulticastInlineDelegate OnPendingPartyMemberDataAdded; // 0x88
	FMulticastInlineDelegate OnPendingPartyMemberAccepted; // 0x98
	FMulticastInlineDelegate OnPartyMemberRemoved; // 0xa8
	FMulticastInlineDelegate OnPartyMemberLeft; // 0xb8
	FMulticastInlineDelegate OnPartyDisbanded; // 0xc8
	FMulticastInlineDelegate OnPartyInvitationError; // 0xd8
	FMulticastInlineDelegate OnPartyInvitationSent; // 0xe8
	FMulticastInlineDelegate OnPartyInvitationReceived; // 0xf8
	FMulticastInlineDelegate OnPartyMessageReceived; // 0x108
	FMulticastInlineDelegate OnPartyInvitationAccepted; // 0x118
	FMulticastInlineDelegate OnPartyInvitationRejected; // 0x128
	FMulticastInlineDelegate OnPartyInvitationExpired; // 0x138
	FMulticastInlineDelegate OnPartyInfoUpdated; // 0x148
	TArray<FPUMG_PartyMemberData> PartyMembers; // 0x158
	UPUMG_PlayerInfo* PartyInviter; // 0x168
	FString LastInviteSentErrorMessage; // 0x170
	int32_t MaxPartySize; // 0x198
};

struct UKSEnforcedEquipmentRuleComponent : UKSGameRuleComponent {
	TMap<UDataTable*, FGameplayTag> ItemTables; // 0xb0
	TMap<UKSItem*, FGameplayTag> ChosenEquipment; // 0x100
	AKSEnforcedEquipmentState* EnforcedEquipmentState; // 0x1a0
};

struct UVehicleWheel : UObject {
	UStaticMesh* CollisionMesh; // 0x28
	bool bDontCreateShape; // 0x30
	bool bAutoAdjustCollisionSize; // 0x31
	FVector Offset; // 0x34
	float ShapeRadius; // 0x40
	float ShapeWidth; // 0x44
	float Mass; // 0x48
	float DampingRate; // 0x4c
	float SteerAngle; // 0x50
	bool bAffectedByHandbrake; // 0x54
	UTireType* TireType; // 0x58
	UTireConfig* TireConfig; // 0x60
	float LatStiffMaxLoad; // 0x68
	float LatStiffValue; // 0x6c
	float LongStiffValue; // 0x70
	float SuspensionForceOffset; // 0x74
	float SuspensionMaxRaise; // 0x78
	float SuspensionMaxDrop; // 0x7c
	float SuspensionNaturalFrequency; // 0x80
	float SuspensionDampingRatio; // 0x84
	EWheelSweepType SweepType; // 0x88
	float MaxBrakeTorque; // 0x8c
	float MaxHandBrakeTorque; // 0x90
	UWheeledVehicleMovementComponent* VehicleSim; // 0x98
	int32_t WheelIndex; // 0xa0
	float DebugLongSlip; // 0xa4
	float DebugLatSlip; // 0xa8
	float DebugNormalizedTireLoad; // 0xac
	float DebugWheelTorque; // 0xb4
	float DebugLongForce; // 0xb8
	float DebugLatForce; // 0xbc
	FVector Location; // 0xc0
	FVector OldLocation; // 0xcc
	FVector Velocity; // 0xd8
};

struct UKSBTD_CompareMatchPhaseTimeLeft : UBTDecorator {
	float Time; // 0x68
	EArithmeticKeyOperation ArithmeticOperation; // 0x6c
};

struct UAchievementQueryCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct USoundNodeBranch : USoundNode {
	FName BoolParameterName; // 0x48
};

struct ULandscapeSplineControlPoint : UObject {
	FVector Location; // 0x28
	FRotator Rotation; // 0x34
	float Width; // 0x40
	float LayerWidthRatio; // 0x44
	float SideFalloff; // 0x48
	float LeftSideFalloffFactor; // 0x4c
	float RightSideFalloffFactor; // 0x50
	float LeftSideLayerFalloffFactor; // 0x54
	float RightSideLayerFalloffFactor; // 0x58
	float EndFalloff; // 0x5c
	TArray<FLandscapeSplineConnection> ConnectedSegments; // 0x60
	TArray<FLandscapeSplineInterpPoint> Points; // 0x70
	FBox Bounds; // 0x80
	UControlPointMeshComponent* LocalMeshComponent; // 0xa0
};

struct UPhysicsThrusterComponent : USceneComponent {
	float ThrustStrength; // 0x208
};

struct UKSAimAssistComponent : UActorComponent {
	AKSPlayerController* PlayerOwner; // 0xb0
	TArray<FRankedAimAssistTarget> AssistTargetStack; // 0xb8
	float CurrentTargetWeightStickiness; // 0xc8
	float ProjectionSpaceStackBoundary; // 0xcc
	bool bUseStackBoundaryFovScaling; // 0xd0
	float FovBaseline; // 0xd4
	UCurveFloat* AimAssistEffectivenessCurve; // 0xd8
	EKSAimAssistActivationType ActivationType; // 0xe0
	EKSAimAssistInputFlag FrictionAllowedInputMode; // 0xe1
	EKSAimAssistInputFlag LockAllowedInputMode; // 0xe2
	EKSAimAssistInputFlag SnapAllowedInputMode; // 0xe3
	EKSAimAssistInputFlag CorrectionAllowedInputMode; // 0xe4
	bool bAssistGadgets; // 0xec
	bool bAimLockUsesTargetVelocity; // 0xed
	bool bAimLockMeshSmoothCompensation; // 0xee
	bool bAimLockUsesOwnVelocity; // 0xef
	bool bComplexAimLockDeltaRotCalculation; // 0xf0
	bool bComplexLookLocationCalculation; // 0xf1
	float MaxAimLockEvaluationInterval; // 0xf4
	float KickbackIgnoreFactor; // 0xf8
	float CrossAxisWeaknessPoint; // 0xfc
	bool bOldLockValid; // 0x100
	FVector OldLockRelativeLocation; // 0x104
	FRotator OldInputRot; // 0x110
	UObject* LastAimAssistTarget; // 0x120
	bool bLastTargetCrouching; // 0x128
	bool bLastSelfCrouching; // 0x129
	FVector2D LastLockAssistPosition; // 0x12c
	FVector2D LastAnchorScreenLocation; // 0x134
	float AimAssistVisibilityUpdatePeriod; // 0x13c
	float CrouchAnimTimeLength; // 0x140
	float CrouchAnimTimeLengthRemaining; // 0x144
	FVector2D ScaledScreenSpaceJukeDistanceThreshold; // 0x148
};

struct UParticleModuleEventGenerator : UParticleModuleEventBase {
	TArray<FParticleEvent_GenerateInfo> Events; // 0x30
};

struct UNiagaraDataInterfaceSpline : UNiagaraDataInterface {
	AActor* Source; // 0x30
};

struct UKSActivityRewardCondition_PartySize : UKSActivityRewardCondition {
	int32_t MinPartySize; // 0x30
	int32_t MaxPartySize; // 0x34
};

struct UDestructibleMesh : USkeletalMesh {
	FDestructibleParameters DefaultDestructibleParameters; // 0x388
	TArray<FFractureEffect> FractureEffects; // 0x410
};

struct UKSAimSnapData : UKSAimAssistDataBase {
	TMap<EControllerInputType, FRotator> MaxAimSnapRotation; // 0x38
	TMap<EControllerInputType, UCurveFloat*> AimSnapDistanceCurve; // 0x88
	TMap<EControllerInputType, UCurveVector*> AimSnapCurve; // 0xd8
};

struct UInterpTrackInstFloatAnimBPParam : UInterpTrackInst {
	UAnimInstance* AnimScriptInstance; // 0x28
	float ResetFloat; // 0x30
};

struct UHierarchicalLODSetup : UObject {
	TArray<FHierarchicalSimplification> HierarchicalLODSetup; // 0x28
	TSoftObjectPtr<UMaterialInterface> OverrideBaseMaterial; // 0x38
};

struct UNiagaraPreviewAxis_InterpParamVector2D : UNiagaraPreviewAxis_InterpParamBase {
	FVector2D Min; // 0x38
	FVector2D Max; // 0x40
};

struct UInterpTrackInstSound : UInterpTrackInst {
	float LastUpdatePosition; // 0x28
	UAudioComponent* PlayAudioComp; // 0x30
};

struct UKSBTD_ItemDropState : UBTDecorator_BlackboardBase {
	FKSItemDropStateFilter ItemDropStateFilter; // 0x90
};

struct APlayerStart : ANavigationObjectBase {
	FName PlayerStartTag; // 0x248
};

struct UArrowComponent : UPrimitiveComponent {
	FColor ArrowColor; // 0x430
	float ArrowSize; // 0x434
	float ScreenSize; // 0x438
	char bIsScreenSizeScaled : 1; // 0x43c
	char bTreatAsASprite : 1; // 0x43c
};

struct UAIAsyncTaskBlueprintProxy : UObject {
	FMulticastInlineDelegate OnSuccess; // 0x28
	FMulticastInlineDelegate OnFail; // 0x38
};

struct UPhysicalMaterialMask : UObject {
	int32_t UVChannelIndex; // 0x28
	TextureAddress AddressX; // 0x2c
	TextureAddress AddressY; // 0x2d
};

struct AKSQuipInstance : AKSRadialMenuItemInstance {
	EKSVoicelineAudience VoicelineAudience; // 0x2e0
	int32_t QuipCooldownGroup; // 0x2e4
	float QuipCooldownDuration; // 0x2e8
};

struct AKSRocket : ACharacter {
	float RocketRotationCatchUpRadians; // 0x4c0
	float CameraInitialLockoutTime; // 0x4c4
	USpringArmComponent* SpringArm; // 0x4d0
	UCameraComponent* MainCamera; // 0x4d8
	UKSWeaponAsset* ExplodeWeaponAsset; // 0x4e0
	float FlightDuration; // 0x4e8
	FMulticastInlineDelegate OnFlightDurationTimerTick; // 0x4f0
	FMulticastInlineDelegate OnFlightDurationTimerActive; // 0x500
	FMulticastInlineDelegate OnFlightDurationTimerComplete; // 0x510
	UKSTimerComponent* FlightDurationTimer; // 0x520
};

struct UKSInteractionState : UObject {
	EKSInteractionResult Result; // 0x28
};

struct UKSGameShopWidget : UKSWidget {
	TWeakObjectPtr<AKSGameShop> GameShopWeakPtr; // 0x528
	TMap<UKSGameShopItemComponent*, TSoftClassPtr<UObject>> ShopItemComponentWidgetMap; // 0x530
	UButton* UndoButton; // 0x580
};

struct UWBP_CustomGameActionItem_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* OnEntry; // 0x240
	URichTextBlock* TextBlock; // 0x248
	FText Text; // 0x250
};

struct UMediaSoundComponent : USynthComponent {
	EMediaSoundChannels Channels; // 0x6e0
	bool DynamicRateAdjustment; // 0x6e4
	float RateAdjustmentFactor; // 0x6e8
	FFloatRange RateAdjustmentRange; // 0x6ec
	UMediaPlayer* MediaPlayer; // 0x700
};

struct UBookMark2D : UBookmarkBase {
	float Zoom2D; // 0x28
	FIntPoint Location; // 0x2c
};

struct UInterpTrackInstVisibility : UInterpTrackInst {
	EVisibilityTrackAction Action; // 0x28
	float LastUpdatePosition; // 0x2c
};

struct UCurveFloat : UCurveBase {
	FRichCurve FloatCurve; // 0x30
	bool bIsEventCurve; // 0xb0
};

struct UParticleModuleVelocity : UParticleModuleVelocityBase {
	FRawDistributionVector StartVelocity; // 0x38
	FRawDistributionFloat StartVelocityRadial; // 0x80
};

struct UMagicLeapARPinComponent : USceneComponent {
	FString ObjectUID; // 0x208
	int32_t UserIndex; // 0x218
	EMagicLeapAutoPinType AutoPinType; // 0x21c
	bool bShouldPinActor; // 0x21d
	UMagicLeapARPinSaveGame* PinDataClass; // 0x220
	FMulticastInlineDelegate OnPersistentEntityPinned; // 0x228
	FMulticastInlineDelegate OnPersistentEntityPinLost; // 0x238
	FGuid PinnedCFUID; // 0x248
	USceneComponent* PinnedSceneComponent; // 0x258
	UMagicLeapARPinSaveGame* PinData; // 0x260
};

struct UNiagaraRibbonRendererProperties : UNiagaraRendererProperties {
	UMaterialInterface* Material; // 0x50
	FNiagaraUserParameterBinding MaterialUserParamBinding; // 0x58
	ENiagaraRibbonFacingMode FacingMode; // 0x80
	float UV0TilingDistance; // 0x84
	FVector2D UV0Scale; // 0x88
	FVector2D UV0Offset; // 0x90
	ENiagaraRibbonAgeOffsetMode UV0AgeOffsetMode; // 0x98
	float UV1TilingDistance; // 0x9c
	FVector2D UV1Scale; // 0xa0
	FVector2D UV1Offset; // 0xa8
	ENiagaraRibbonAgeOffsetMode UV1AgeOffsetMode; // 0xb0
	ENiagaraRibbonDrawDirection DrawDirection; // 0xb1
	float CurveTension; // 0xb4
	ENiagaraRibbonTessellationMode TessellationMode; // 0xb8
	int32_t TessellationFactor; // 0xbc
	bool bUseConstantFactor; // 0xc0
	float TessellationAngle; // 0xc4
	bool bScreenSpaceTessellation; // 0xc8
	FNiagaraVariableAttributeBinding PositionBinding; // 0xd0
	FNiagaraVariableAttributeBinding ColorBinding; // 0x148
	FNiagaraVariableAttributeBinding VelocityBinding; // 0x1c0
	FNiagaraVariableAttributeBinding NormalizedAgeBinding; // 0x238
	FNiagaraVariableAttributeBinding RibbonTwistBinding; // 0x2b0
	FNiagaraVariableAttributeBinding RibbonWidthBinding; // 0x328
	FNiagaraVariableAttributeBinding RibbonFacingBinding; // 0x3a0
	FNiagaraVariableAttributeBinding RibbonIdBinding; // 0x418
	FNiagaraVariableAttributeBinding RibbonLinkOrderBinding; // 0x490
	FNiagaraVariableAttributeBinding MaterialRandomBinding; // 0x508
	FNiagaraVariableAttributeBinding DynamicMaterialBinding; // 0x580
	FNiagaraVariableAttributeBinding DynamicMaterial1Binding; // 0x5f8
	FNiagaraVariableAttributeBinding DynamicMaterial2Binding; // 0x670
	FNiagaraVariableAttributeBinding DynamicMaterial3Binding; // 0x6e8
};

struct UKSMatchDataRecorder : UObject {
	FMatchRecord MatchRecord; // 0x28
	TMap<uint64_t, FWeaponUseSummaryRecord> InProgressWeaponSummaries; // 0x2b0
};

struct AKSWeapon_Melee : AKSWeapon_Aimed {
	FMulticastInlineDelegate OnMeleeHit; // 0x800
	FMulticastInlineDelegate OnProjectileSpawned; // 0x828
	AKSProjectile* Projectile; // 0x858
	AKSProjectile* FakeProjectile; // 0x860
	UKSWeaponAsset_Melee* MeleeWeaponAsset; // 0x868
	bool bMeleeSwinging; // 0x870
	FTimerHandle MeleeSwingingTimerHandle; // 0x878
	TArray<TWeakObjectPtr<AActor>> DamagedTargetsInSwing; // 0x880
	bool bIsInQuickMelee; // 0x890
};

struct UAxisPositionGizmo : UInteractiveGizmo {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x48
	TScriptInterface<IGizmoFloatParameterSource> ParameterSource; // 0x58
	TScriptInterface<IGizmoClickTarget> HitTarget; // 0x68
	TScriptInterface<IGizmoStateTarget> StateTarget; // 0x78
	bool bEnableSignedAxis; // 0x88
	bool bInInteraction; // 0x89
	FVector InteractionOrigin; // 0x8c
	FVector InteractionAxis; // 0x98
	FVector InteractionStartPoint; // 0xa4
	FVector InteractionCurPoint; // 0xb0
	float InteractionStartParameter; // 0xbc
	float InteractionCurParameter; // 0xc0
	float ParameterSign; // 0xc4
};

struct UGamepadPromptBasic_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* ActionText; // 0x240
	UWBP_KeyCallout_C* ButtonIcon; // 0x248
	FButtonPromptData Data; // 0x250
	bool IsSet; // 0x280
};

struct UKSStoreItemWithPurchaseData : UKSPurchaseData {
	UKSEquipOnAcquisitionData* EquipOnPurchase; // 0x58
};

struct UAkAssetDataSwitchContainer : UAkAssetDataWithMedia {
	TArray<UAkAssetDataSwitchContainerData*> SwitchContainers; // 0x88
};

struct UFontImportOptions : UObject {
	FFontImportOptionsData Data; // 0x28
};

struct UKSOutOfBoundsComponent : UActorComponent {
	FMulticastInlineDelegate OnOutOfBoundsBeginDel; // 0xb8
	FMulticastInlineDelegate OnOutOfBoundsWarningEndDel; // 0xc8
	FMulticastInlineDelegate OnOutOfBoundsEndDel; // 0xd8
	FKSOutOfBoundsInfo OutOfBoundsInfo; // 0xe8
	bool bLocalOutOfBounds; // 0xf0
	UKSOutOfBoundsManager* OutOfBoundsManager; // 0xf8
	UKSFXCurveComponent* OutOfBoundsEffectCurve; // 0x100
	FKSSpecialEffect OutOfBoundsPPEffect; // 0x108
	UMaterialInterface* OutOfBoundsPPMaterial; // 0x158
	UMaterialInstanceDynamic* OutOfBoundsPPMaterialInstance; // 0x160
	AKSCharacterFoundation* CharacterFoundationOwner; // 0x168
};

struct ANavLinkProxy : AActor {
	TArray<FNavigationLink> PointLinks; // 0x230
	TArray<FNavigationSegmentLink> SegmentLinks; // 0x240
	UNavLinkCustomComponent* SmartLinkComp; // 0x250
	bool bSmartLinkIsRelevant; // 0x258
	FMulticastInlineDelegate OnSmartLinkReached; // 0x260
};

struct UAITask_MoveTo : UAITask {
	FMulticastInlineDelegate OnRequestFailed; // 0x70
	FMulticastInlineDelegate OnMoveFinished; // 0x80
	FAIMoveRequest MoveRequest; // 0x90
};

struct UKSModInst_CacheAim : UKSModInst_Activated {
	FAimData CachedAim; // 0x478
	UKSWeaponAsset* AimReferenceAsset; // 0x4c8
	float AimRange; // 0x4d0
	bool bCacheAimOnSetup; // 0x4d4
};

struct UPlayer : UObject {
	APlayerController* PlayerController; // 0x30
	int32_t CurrentNetSpeed; // 0x38
	int32_t ConfiguredInternetSpeed; // 0x3c
	int32_t ConfiguredLanSpeed; // 0x40
};

struct UKSHairSkeletalMeshComponent : UKSCharacterSkeletalMeshComponent {
	FName SimulationRootBoneName; // 0xe58
};

struct ULevelSequence : UMovieSceneSequence {
	UMovieScene* MovieScene; // 0x348
	FLevelSequenceObjectReferenceMap ObjectReferences; // 0x350
	FLevelSequenceBindingReferences BindingReferences; // 0x3a0
	TMap<FString, FLevelSequenceObject> PossessedObjects; // 0x440
	UObject* DirectorClass; // 0x490
};

struct UNiagaraDataInterfaceCurve : UNiagaraDataInterfaceCurveBase {
	FRichCurve Curve; // 0x58
};

struct UScrollBarWidgetStyle : USlateWidgetStyleContainerBase {
	FScrollBarStyle ScrollBarStyle; // 0x30
};

struct UHudSettings : UObject {
	char bShowHUD : 1; // 0x28
	TArray<FName> DebugDisplay; // 0x30
};

struct UPlayMontageCallbackProxy : UObject {
	FMulticastInlineDelegate OnCompleted; // 0x28
	FMulticastInlineDelegate OnBlendOut; // 0x38
	FMulticastInlineDelegate OnInterrupted; // 0x48
	FMulticastInlineDelegate OnNotifyBegin; // 0x58
	FMulticastInlineDelegate OnNotifyEnd; // 0x68
};

struct UEditableGeometryCollectionAdapter : UEditableMeshAdapter {
	UGeometryCollection* GeometryCollection; // 0x28
	UGeometryCollection* OriginalGeometryCollection; // 0x30
	int32_t GeometryCollectionLODIndex; // 0x38
};

struct UAkPS5InitializationSettings : UObject {
	FAkCommonInitializationSettings CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x88
	FAkPS5AdvancedInitializationSettings AdvancedSettings; // 0xb0
};

struct UKSHudEditableWidget : UBorder {
	FName WidgetName; // 0x278
	bool bCanScale; // 0x280
	bool bCanSetOpacity; // 0x281
	bool bCanBeInvisible; // 0x282
	UKSHudEditor* HudEditor; // 0x288
};

struct UPawnAction_Repeat : UPawnAction {
	UPawnAction* ActionToRepeat; // 0x98
	UPawnAction* RecentActionCopy; // 0xa0
	EPawnActionFailHandling ChildFailureHandlingMode; // 0xa8
};

struct UKSModInst_ReviveTarget : UKSModInst_Activated {
	float MaxDistance; // 0x478
	FName OverrideReviveeMontageRowName; // 0x47c
};

struct APhysicsThruster : ARigidBodyBase {
	UPhysicsThrusterComponent* ThrusterComponent; // 0x220
};

struct UFoliageType_Actor : UFoliageType {
	AActor* ActorClass; // 0x360
	bool bShouldAttachToBaseComponent; // 0x368
};

struct UWBP_WeaponCategoryScreen_C : UKSWeaponCategoryScreen {
	FPointerToUberGraphFrame UberGraphFrame; // 0x588
	UWidgetAnimation* Anim_OnShow; // 0x590
	UImage* BG; // 0x598
	UUniformGridPanel* ButtonContainer; // 0x5a0
	UVerticalBox* VerticalBox_2; // 0x5a8
	UWBP_WeaponMasteryBadge_C* WBP_WeaponMasteryBadge; // 0x5b0
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton; // 0x5b8
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_2; // 0x5c0
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_3; // 0x5c8
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_4; // 0x5d0
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_80; // 0x5d8
	UWBP_WeaponProgressButton_C* WBP_WeaponProgressButton_158; // 0x5e0
	USizeBox* WeaponUnlockTooltip; // 0x5e8
	int32_t WeaponRowWidth; // 0x5f0
	FWeaponCategoryDetails WeaponCategoryDetails; // 0x5f8
	UAkAudioEvent* GamePad_FaceButtonTOP_SFX; // 0x6f0
	UAkAudioEvent* GamePad_FaceButtonLEFT_SFX; // 0x6f8
};

struct ABP_LobbyState_C : AGameState {
	FPointerToUberGraphFrame UberGraphFrame; // 0x290
	USceneComponent* DefaultSceneRoot; // 0x298
	AKSEmoteMusicManager* EmoteMusicManager; // 0x2a0
};

struct AGameStateBase : AInfo {
	AGameModeBase* GameModeClass; // 0x220
	AGameModeBase* AuthorityGameMode; // 0x228
	ASpectatorPawn* SpectatorClass; // 0x230
	TArray<APlayerState*> PlayerArray; // 0x238
	bool bReplicatedHasBegunPlay; // 0x248
	float ReplicatedWorldTimeSeconds; // 0x24c
	float ServerWorldTimeSecondsDelta; // 0x250
	float ServerWorldTimeSecondsUpdateFrequency; // 0x254
};

struct UChaosSolverSettings : UDeveloperSettings {
	FSoftClassPath DefaultChaosSolverActorClass; // 0x40
};

struct USub_Hero_ABP_MountedWeapon_C : UKSCharacterAnimInst {
	FPointerToUberGraphFrame UberGraphFrame; // 0x10f0
	FAnimNode_Root AnimGraphNode_Root; // 0x10f8
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned; // 0x1138
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x1338
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x13c0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x1470
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x15d0
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x1658
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x1698
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_2; // 0x1758
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x1918
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned; // 0x19c8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x1b88
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x1c50
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x1c88
	AKSCharacter* Character; // 0x1cc0
};

struct UMaterialExpressionRotateAboutAxis : UMaterialExpression {
	FExpressionInput NormalizedRotationAxis; // 0x40
	FExpressionInput RotationAngle; // 0x54
	FExpressionInput PivotPoint; // 0x68
	FExpressionInput Position; // 0x7c
	float Period; // 0x90
};

struct UFont : UObject {
	EFontCacheType FontCacheType; // 0x30
	TArray<FFontCharacter> Characters; // 0x38
	TArray<UTexture2D*> Textures; // 0x48
	int32_t IsRemapped; // 0x58
	float EmScale; // 0x5c
	float Ascent; // 0x60
	float Descent; // 0x64
	float Leading; // 0x68
	int32_t Kerning; // 0x6c
	FFontImportOptionsData ImportOptions; // 0x70
	int32_t NumCharacters; // 0x120
	TArray<int32_t> MaxCharHeight; // 0x128
	float ScalingFactor; // 0x138
	int32_t LegacyFontSize; // 0x13c
	FName LegacyFontName; // 0x140
	FCompositeFont CompositeFont; // 0x148
};

struct UPInv_AssetManager : UAssetManager {
	bool bHasCompletedInitialAssetScan; // 0x4e0
	bool bIsQuickCook; // 0x6d0
	TArray<FString> AdditionalQuickCookPrimaryAssets; // 0x6d8
};

struct USkeletalMeshSimulationComponent : UActorComponent {
	UChaosPhysicalMaterial* PhysicalMaterial; // 0xb8
	AChaosSolverActor* ChaosSolverActor; // 0xc0
	UPhysicsAsset* OverridePhysicsAsset; // 0xc8
	bool bSimulating; // 0xd0
	bool bNotifyCollisions; // 0xd1
	EObjectStateTypeEnum ObjectType; // 0xd2
	float Density; // 0xd4
	float MinMass; // 0xd8
	float MaxMass; // 0xdc
	ECollisionTypeEnum CollisionType; // 0xe0
	float ImplicitShapeParticlesPerUnitArea; // 0xe4
	int32_t ImplicitShapeMinNumParticles; // 0xe8
	int32_t ImplicitShapeMaxNumParticles; // 0xec
	int32_t MinLevelSetResolution; // 0xf0
	int32_t MaxLevelSetResolution; // 0xf4
	int32_t CollisionGroup; // 0xf8
	EInitialVelocityTypeEnum InitialVelocityType; // 0xfc
	FVector InitialLinearVelocity; // 0x100
	FVector InitialAngularVelocity; // 0x10c
	FMulticastInlineDelegate OnChaosPhysicsCollision; // 0x118
};

struct UKSModInst_OnTakeDamage : UKSPlayerModInstance {
	UKSTimerComponent* TakeDamageTimer; // 0x1b8
	float MinimumDamage; // 0x1c0
	TArray<EDamageCategory> ValidDamageCategories; // 0x1c8
};

struct UMaterialExpressionMax : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	float ConstA; // 0x68
	float ConstB; // 0x6c
};

struct UDrawFrustumComponent : UPrimitiveComponent {
	FColor FrustumColor; // 0x430
	float FrustumAngle; // 0x434
	float FrustumAspectRatio; // 0x438
	float FrustumStartDist; // 0x43c
	float FrustumEndDist; // 0x440
	UTexture* Texture; // 0x448
};

struct UKSPlayerMod_RetrieveTime : UKSPlayerMod {
	float RetrieveTimeMultiplier; // 0x330
};

struct UMaterialExpressionShadingModel : UMaterialExpression {
	EMaterialShadingModel ShadingModel; // 0x40
};

struct UNiagaraSimulationStageBase : UNiagaraMergeable {
	UNiagaraScript* Script; // 0x28
	FName SimulationStageName; // 0x30
};

struct UKSFirstBloodTracker : UKSAccoladeTracker {
	TSet<int32_t> RoundsWithFirstBloodEarned; // 0xa0
};

struct UAxisAngleGizmo : UInteractiveGizmo {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x48
	TScriptInterface<IGizmoFloatParameterSource> AngleSource; // 0x58
	TScriptInterface<IGizmoClickTarget> HitTarget; // 0x68
	TScriptInterface<IGizmoStateTarget> StateTarget; // 0x78
	bool bInInteraction; // 0x88
	FVector RotationOrigin; // 0x8c
	FVector RotationAxis; // 0x98
	FVector RotationPlaneX; // 0xa4
	FVector RotationPlaneY; // 0xb0
	FVector InteractionStartPoint; // 0xbc
	FVector InteractionCurPoint; // 0xc8
	float InteractionStartAngle; // 0xd4
	float InteractionCurAngle; // 0xd8
};

struct UWBP_CustomMassInvite_C : UKSMassInviteModal {
	FPointerToUberGraphFrame UberGraphFrame; // 0x538
	UWidgetAnimation* LoadingSearch; // 0x540
	UWidgetAnimation* Intro; // 0x548
	UWidgetAnimation* Loading; // 0x550
	UOverlay* AutoListContent; // 0x558
	UTextBlock* AutoListError; // 0x560
	UWidgetSwitcher* AutoListSwitcher; // 0x568
	UWBP_ThrobberShield_C* AutoLoadThrobber; // 0x570
	UWBP_ThrobberHorizontal_C* AutoLoadThrobber2; // 0x578
	UWBP_subscreen_nav_tab_C* AutoTab; // 0x580
	UBorder* Blocker; // 0x588
	UButton* BlockerButton; // 0x590
	UWidgetSwitcher* ContentSwitcher; // 0x598
	UKSTreeView* PlayerList; // 0x5a0
	UWBP_Social_Search_bar_C* SearchBar; // 0x5a8
	UKSTreeView* SearchList; // 0x5b0
	UOverlay* SearchListContent; // 0x5b8
	UTextBlock* SearchListError; // 0x5c0
	UWBP_ThrobberShield_C* SearchLoadThrobber; // 0x5c8
	UWBP_ThrobberHorizontal_C* SearchLoadThrobber2; // 0x5d0
	UWidgetSwitcher* SearchSwitcher; // 0x5d8
	UWBP_subscreen_nav_tab_C* SearchTab; // 0x5e0
	UWBP_StandardButtonMedium_C* SubmitBtn; // 0x5e8
	UTextBlock* TitleLabel; // 0x5f0
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x5f8
	FName RouteName; // 0x600
	FMulticastInlineDelegate OnSelect; // 0x608
	int32_t AutoListFocusGroup; // 0x618
	int32_t NoFocusGroup; // 0x61c
	int32_t SearchListFocusGroup; // 0x620
	FKSPlayerQueryHandle SearchHandle; // 0x628
};

struct ABP_BrightLobbyHUD_C : ABP_BrightLobbyHUDMinimal_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x6b8
	UBrightLobbyWidget_C* LobbyWidget; // 0x6c0
	char Loadout Slot Edit; // 0x6c8
	FMulticastInlineDelegate Loadout Slot Change; // 0x6d0
	FName MatchLoadingRouteName; // 0x6e0
	TArray<FName> ClearPendingRouteDataOnSwap; // 0x6e8
};

struct UWBP_RewardsTrack_C : UKSRewardsTrackWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x548
	UKSAsyncImage* GamepadScrollLeft; // 0x550
	UKSAsyncImage* GamepadScrollRight; // 0x558
	UTextBlock* PageLabel; // 0x560
	UHorizontalBox* RewardsContainer; // 0x568
	UWBP_ButtonArrow_C* ScrollLeftButton; // 0x570
	UHorizontalBox* ScrollLeftIndicator; // 0x578
	UWBP_ButtonArrow_C* ScrollRightButton; // 0x580
	UHorizontalBox* ScrollRightIndicator; // 0x588
	UWBP_RewardListEntry_C* WBP_RewardListEntrySTUB; // 0x590
	UWBP_RewardListEntry_C* WBP_RewardListEntrySTUB_2; // 0x598
	UWBP_RewardListEntry_C* WBP_RewardListEntrySTUB_3; // 0x5a0
	UWBP_RewardListEntry_C* WBP_RewardListEntrySTUB_4; // 0x5a8
	UWBP_RewardListEntry_C* WBP_RewardListEntrySTUB_5; // 0x5b0
	UWBP_RewardListEntry_C* WBP_RewardListEntrySTUB_7; // 0x5b8
	UWBP_RewardsTrackMeter_C* WBP_RewardsTrackBar; // 0x5c0
	UWBP_RewardListEntry_C* SelectedReward; // 0x5c8
	FMulticastInlineDelegate OnPageNavigated; // 0x5d0
	TArray<UPUMG_StoreItem*> StoreItems; // 0x5e0
};

struct UGeometryCacheTrack : UObject {
	float Duration; // 0x28
};

struct UMaterialExpressionAdd : UMaterialExpression {
	FExpressionInput A; // 0x40
	FExpressionInput B; // 0x54
	float ConstA; // 0x68
	float ConstB; // 0x6c
};

struct UParticleModuleMeshRotationRateOverLife : UParticleModuleRotationRateBase {
	FRawDistributionVector RotRate; // 0x30
	char bScaleRotRate : 1; // 0x78
};

struct UKSActivityRequirement_RankedSeason : UKSActivityRequirement {
	FString RequiredRankedSeason; // 0x30
};

struct UKSBTTask_LeaveDefensePoint : UBTTaskNode {
	FBlackboardKeySelector DefensePoint; // 0x70
};

struct AMagicLeapSharedWorldGameMode : AGameMode {
	FMagicLeapSharedWorldSharedData SharedWorldData; // 0x308
	FMulticastInlineDelegate OnNewLocalDataFromClients; // 0x318
	float PinSelectionConfidenceThreshold; // 0x328
	AMagicLeapSharedWorldPlayerController* ChosenOne; // 0x3d0
};

struct USlateSettings : UObject {
	bool bExplicitCanvasChildZOrder; // 0x28
};

struct AKSEnforcedEquipmentState : AInfo {
	TArray<UKSItem*> EnforcedItems; // 0x220
	FMulticastInlineDelegate OnEnforcedItemsUpdated; // 0x230
};

struct AKSProjectile_MacGuffin : AKSProjectile {
	bool bAutomaticPickup; // 0x950
};

struct UComboBoxWidgetStyle : USlateWidgetStyleContainerBase {
	FComboBoxStyle ComboBoxStyle; // 0x30
};

struct UKSApparelAsset : UKSItem {
	int32_t Priority; // 0x250
	FGameplayTag ApparelSlot; // 0x254
	FGameplayTagContainer SlotsToOverride; // 0x260
	int32_t AsyncLoadPriority; // 0x2a8
	int32_t LocalPlayerAsyncLoadPriority; // 0x2ac
};

struct UWBP_ProgressEarnedBar_C : UKSProgressMeterWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x540
	UWidgetAnimation* OnLevelDown; // 0x548
	UWidgetAnimation* OnLevelUp; // 0x550
	UHorizontalBox* BarBackground; // 0x558
	UImage* BarBackgroundImage; // 0x560
	UImage* LevelUpAnimBar; // 0x568
	UOverlay* ProgressBarBase; // 0x570
	UHorizontalBox* ProgressBarFill; // 0x578
	UHorizontalBox* ProgressBarFill_Bonus; // 0x580
	UImage* xp_base; // 0x588
	UImage* xp_base_tip; // 0x590
	UImage* xp_progress; // 0x598
	UImage* xp_progress_bonus; // 0x5a0
	FPlayerProgression Progression; // 0x5a8
	int32_t CurrentTierIndex; // 0x718
	FMulticastInlineDelegate OnLevelUpEvent; // 0x720
	FMulticastInlineDelegate OnLevelDownEvent; // 0x730
	FSlateColor BaseColor; // 0x740
	FSlateColor IncreaseColor; // 0x768
	FSlateColor DecreaseColor; // 0x790
	UAkAudioEvent* PlayRankProgressionSFX; // 0x7b8
	UAkAudioEvent* StopRankProgressionSFX; // 0x7c0
	FSlateColor BackgroundColor; // 0x7c8
	float Clamped Base Pct; // 0x7f0
	float Clamped Delta Pct; // 0x7f4
	FSlateColor BonusIncreaseColor; // 0x7f8
	FMulticastInlineDelegate OnLerpUpdate; // 0x820
	float AnimTimeInitial; // 0x830
	float AnimTimeFinal; // 0x834
	bool ShowGradientTip; // 0x838
};

struct ATextRenderActor : AActor {
	UTextRenderComponent* TextRender; // 0x220
};

struct UPacketHandlerProfileConfig : UObject {
	TArray<FString> Components; // 0x28
};

struct USoundCue : USoundBase {
	char bPrimeOnLoad : 1; // 0x160
	USoundNode* FirstNode; // 0x168
	float VolumeMultiplier; // 0x170
	float PitchMultiplier; // 0x174
	FSoundAttenuationSettings AttenuationOverrides; // 0x178
	float SubtitlePriority; // 0x518
	char bOverrideAttenuation : 1; // 0x520
	char bExcludeFromRandomNodeBranchCulling : 1; // 0x520
	int32_t CookedQualityIndex; // 0x524
	char bHasPlayWhenSilent : 1; // 0x528
};

struct UDamageType : UObject {
	char bCausedByWorld : 1; // 0x28
	char bScaleMomentumByMass : 1; // 0x28
	char bRadialDamageVelChange : 1; // 0x28
	float DamageImpulse; // 0x2c
	float DestructibleImpulse; // 0x30
	float DestructibleDamageSpreadScale; // 0x34
	float DamageFalloff; // 0x38
};

struct UAkWindowsInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkWindowsAdvancedInitializationSettings AdvancedSettings; // 0xb8
};

struct UNiagaraDataInterfaceParticleRead : UNiagaraDataInterface {
	FString EmitterName; // 0x30
};

struct UMovieSceneAkAudioEventSection : UMovieSceneSection {
	UAkAudioEvent* Event; // 0x120
	bool RetriggerEvent; // 0x128
	int32_t ScrubTailLengthMs; // 0x12c
	bool StopAtSectionEnd; // 0x130
	FString EventName; // 0x138
	float MaxSourceDuration; // 0x168
	FString MaxDurationSourceID; // 0x170
};

struct AGamePlayerController_C : AGamePlayerControllerNoHUD_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0xed8
};

struct ACullDistanceVolume : AVolume {
	TArray<FCullDistanceSizePair> CullDistances; // 0x258
	char bEnabled : 1; // 0x268
};

struct UKSCharacterSkeletalMeshComponent : UKSSkeletalMeshComponent {
	TMap<FName, UPhysicsAsset*> ChildPhysicsAssetMap; // 0xda8
	TArray<FKSChildPhysicsAssetKeywords> ChildPhysicsAssetKeywords; // 0xdf8
	bool bBasePhysicsAssetChanged; // 0xe08
	TWeakObjectPtr<UPhysicsAsset> LastBasePhysAssetFromMesh; // 0xe0c
	bool bApplySkeletalLengthParameterToMaterials; // 0xe14
	FName SkeletalMeshLengthParameterName; // 0xe18
	bool bApplySkeletalWidthParameterToMaterials; // 0xe20
	FName SkeletalMeshWidthParameterName; // 0xe24
	bool bApplySkeletalHeightParameterToMaterials; // 0xe2c
	FName SkeletalMeshHeightParameterName; // 0xe30
	TArray<FChildBodyCollisionProfileCache> PreRegistrationChildCollisionCache; // 0xe38
};

struct AKSRoundBasedObject : AActor {
	int32_t SideNum; // 0x228
	ELocalRequirements SkyDiverRelevanceRules; // 0x22c
	ELimitPerRound SkyDiverLimit; // 0x22d
};

struct UPawnNoiseEmitterComponent : UActorComponent {
	char bAIPerceptionSystemCompatibilityMode : 1; // 0xb0
	FVector LastRemoteNoisePosition; // 0xb4
	float NoiseLifetime; // 0xc0
	float LastRemoteNoiseVolume; // 0xc4
	float LastRemoteNoiseTime; // 0xc8
	float LastLocalNoiseVolume; // 0xcc
	float LastLocalNoiseTime; // 0xd0
};

struct UARCandidateObject : UDataAsset {
	TArray<char> CandidateObjectData; // 0x30
	FString FriendlyName; // 0x40
	FBox BoundingBox; // 0x50
};

struct UBlueprintGeneratedClass : UClass {
	int32_t NumReplicatedProperties; // 0x230
	char bHasNativizedParent : 1; // 0x234
	char bHasCookedComponentInstancingData : 1; // 0x234
	TArray<UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x238
	TArray<UActorComponent*> ComponentTemplates; // 0x248
	TArray<UTimelineTemplate*> Timelines; // 0x258
	TArray<FBPComponentClassOverride> ComponentClassOverrides; // 0x268
	USimpleConstructionScript* SimpleConstructionScript; // 0x278
	UInheritableComponentHandler* InheritableComponentHandler; // 0x280
	UStructProperty* UberGraphFramePointerProperty; // 0x288
	UFunction* UberGraphFunction; // 0x298
	TMap<FName, FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x2a0
};

struct USpotLightComponent : UPointLightComponent {
	float InnerConeAngle; // 0x368
	float OuterConeAngle; // 0x36c
	float LightShaftConeAngle; // 0x370
	char bCastShadowsOnLowEnd : 1; // 0x374
};

struct UPUMG_StoreItemHelper : UObject {
	FMulticastInlineDelegate OnPurchaseItem; // 0x28
	FMulticastInlineDelegate OnPurchasePortalItem; // 0x38
	FMulticastInlineDelegate OnNotEnoughCurrency; // 0x48
	FMulticastInlineDelegate OnReceiveVendor; // 0x58
	FMulticastInlineDelegate OnReceiveXpTables; // 0x68
	FMulticastInlineDelegate OnReceivePricePoints; // 0x78
	FMulticastInlineDelegate OnPortalOffersReceived; // 0x88
	FMulticastInlineDelegate OnPendingPurchaseReceived; // 0x98
	FMulticastInlineDelegate OnPurchaseSubmitted; // 0xa8
	int32_t PremiumCurrencyRulesetId; // 0xb8
	TMap<FString, UPUMG_StoreItem*> SkuToStoreItem; // 0xe0
	TMap<int32_t, UPUMG_StoreItem*> StoreItems; // 0x130
	TMap<int64_t, UPUMG_XpTable*> XpTables; // 0x1e0
	bool XpTablesLoaded; // 0x280
	bool PricePointsLoaded; // 0x281
	bool PortalOffersLoaded; // 0x282
	UGameInstance* GameInstance; // 0x288
};

struct ULoginDownloadProgressBar_C : UKSDownloadProgressWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x248
	UWidgetAnimation* Installing; // 0x250
	UProgressBar* LoadingBar_2; // 0x258
	UTextBlock* ProgressText; // 0x260
};

struct UUpdateManager : UObject {
	float HotfixCheckCompleteDelay; // 0x88
	float UpdateCheckCompleteDelay; // 0x8c
	float HotfixAvailabilityCheckCompleteDelay; // 0x90
	float UpdateCheckAvailabilityCompleteDelay; // 0x94
	bool bCheckPlatformOSSForUpdate; // 0x98
	bool bCheckOSSForUpdate; // 0x99
	int32_t AppSuspendedUpdateCheckTimeSeconds; // 0x9c
	bool bPlatformEnvironmentDetected; // 0xa8
	bool bInitialUpdateFinished; // 0xa9
	bool bCheckHotfixAvailabilityOnly; // 0xaa
	EUpdateState CurrentUpdateState; // 0xab
	int32_t WorstNumFilesPendingLoadViewed; // 0xac
	EPatchCheckResult LastPatchCheckResult; // 0xb0
	EHotfixResult LastHotfixResult; // 0xb1
	FDateTime LastUpdateCheck[0x2]; // 0xe0
	EUpdateCompletionStatus LastCompletionResult[0x2]; // 0xf0
	UEnum* UpdateStateEnum; // 0x108
	UEnum* UpdateCompletionEnum; // 0x110
};

struct ULocalLightComponent : ULightComponent {
	ELightUnits IntensityUnits; // 0x338
	float Radius; // 0x33c
	float AttenuationRadius; // 0x340
	FLightmassPointLightSettings LightmassSettings; // 0x344
};

struct UDistributionFloatParameterBase : UDistributionFloatConstant {
	FName ParameterName; // 0x40
	float MinInput; // 0x48
	float MaxInput; // 0x4c
	float MinOutput; // 0x50
	float MaxOutput; // 0x54
	DistributionParamMode ParamMode; // 0x58
};

struct UActorSequence : UMovieSceneSequence {
	UMovieScene* MovieScene; // 0x348
	FActorSequenceObjectReferenceMap ObjectReferences; // 0x350
};

struct UMaterialExpressionSetMaterialAttributes : UMaterialExpression {
	TArray<FExpressionInput> Inputs; // 0x40
	TArray<FGuid> AttributeSetTypes; // 0x50
};

struct UNiagaraComponent : UFXSystemComponent {
	UNiagaraSystem* Asset; // 0x430
	ENiagaraTickBehavior TickBehavior; // 0x438
	FNiagaraUserRedirectionParameterStore OverrideParameters; // 0x440
	char bForceSolo : 1; // 0x548
	char bAutoDestroy : 1; // 0x574
	char bRenderingEnabled : 1; // 0x574
	char bAutoManageAttachment : 1; // 0x574
	char bAutoAttachWeldSimulatedBodies : 1; // 0x574
	float MaxTimeBeforeForceUpdateTransform; // 0x578
	FMulticastInlineDelegate OnSystemFinished; // 0x580
	TWeakObjectPtr<USceneComponent> AutoAttachParent; // 0x590
	FName AutoAttachSocketName; // 0x598
	EAttachmentRule AutoAttachLocationRule; // 0x5a0
	EAttachmentRule AutoAttachRotationRule; // 0x5a1
	EAttachmentRule AutoAttachScaleRule; // 0x5a2
	char bRenderAfterDLSS : 1; // 0x5a3
};

struct UKSSpawnSelectorTierBranch : UKSSpawnRule {
	FKSSpawnSelectorTreeNode DefaultBranch; // 0x40
	bool bDoesHandleFailure; // 0x68
	FKSSpawnSelectorTreeNode FailureBranch; // 0x70
};

struct UWBP_InputKeySelector_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWidgetAnimation* HideKeyText; // 0x4c8
	UWidgetAnimation* Hover; // 0x4d0
	UTextBlock* ComboText; // 0x4d8
	UWBP_KeyCallout_C* GamepadCallout; // 0x4e0
	UWBP_KeyCallout_C* GamepadCallout2; // 0x4e8
	USizeBox* GamepadImage2Wrapper; // 0x4f0
	UWidgetSwitcher* Icon_Text_Switcher; // 0x4f8
	UHorizontalBox* IconBox; // 0x500
	UInputKeySelector* KeySelector; // 0x508
	UTextBlock* KeyText; // 0x510
	FMulticastInlineDelegate OnKeySelected; // 0x518
	FMulticastInlineDelegate OnIsSelectingKeyChanged; // 0x528
	bool bIsSelecting; // 0x538
	FMulticastInlineDelegate OnComboKeySelected; // 0x540
	bool bIsCapturingCombo; // 0x550
	UAkAudioEvent* HoverInputKeySelectorSFX; // 0x558
	UAkAudioEvent* ClickInputKeySelectorSFX; // 0x560
};

struct UWBP_VoiceActivityContainer_C : UKSVoiceActivityWidget {
	UNamedSlot* Content; // 0x590
};

struct UInterpTrackVisibility : UInterpTrack {
	TArray<FVisibilityTrackKey> VisibilityTrack; // 0x70
	char bFireEventsWhenForwards : 1; // 0x80
	char bFireEventsWhenBackwards : 1; // 0x80
	char bFireEventsWhenJumpingForwards : 1; // 0x80
};

struct UStereoLayerShapeEquirect : UStereoLayerShape {
	FBox2D LeftUVRect; // 0x28
	FBox2D RightUVRect; // 0x3c
	FVector2D LeftScale; // 0x50
	FVector2D RightScale; // 0x58
	FVector2D LeftBias; // 0x60
	FVector2D RightBias; // 0x68
};

struct UKSSocialOverlay : UKSWidget {
	FMulticastInlineDelegate OnDataChanged; // 0x520
	TArray<UKSDataSocialCategory*> CategoriesList; // 0x530
	TMap<TWeakObjectPtr<UKSPlayerInfo>, EKSSocialOverlaySection> PlayerCategoryMap; // 0x548
	TArray<TWeakObjectPtr<UKSPlayerInfo>> PlayersToUpdate; // 0x598
	TArray<UKSDataSocialPlayer*> UnusedEntries; // 0x5b0
};

struct UKSActivityRequirement_MultiItem : UKSActivityRequirement {
	int32_t RequiredEntries; // 0x30
	TMap<int32_t, int32_t> RequiredOwnedItems; // 0x38
};

struct UImageIconInfo : UIconInfo {
	FSoftObjectPath IconImage; // 0x28
	TSoftObjectPtr<UTexture2D> LegacyIconTexture; // 0x40
};

struct UTimecodeProvider : UObject {
	float FrameDelay; // 0x28
};

struct UKSBTD_AbilityState : UBTDecorator_BlackboardBase {
	bool bCheckAbilityReady; // 0x90
	EBasicKeyOperation AbilityReady; // 0x91
	bool bCheckActive; // 0x92
	EBasicKeyOperation AbilityActive; // 0x93
};

struct AKSPlayerCameraManager : APlayerCameraManager {
	int32_t ThermalScopePPCount; // 0x27c8
};

struct UPUMG_InputManager : UObject {
	TMap<UPUMG_Widget*, FPUMG_InputFocusDetails> InputFocusData; // 0x28
	UInputComponent* InputComponent; // 0xa0
	FName GlobalRouteName; // 0xe4
	UInputComponent* ContextActionInputComponent; // 0xf0
	FSoftObjectPath ContextActionDataTableClassName; // 0xf8
	UDataTable* ContextActionDT; // 0x110
	TMap<FName, FRouteContextInfo> RouteContextInfoMap; // 0x118
	FName ActiveRoute; // 0x168
	TArray<FName> OverrideRouteStack; // 0x170
};

struct AKSPlayerState : APGame_PlayerState {
	bool bIsDemoRecording; // 0x328
	FMulticastInlineDelegate OnCharacterOwnerChangedDel; // 0x330
	FMulticastInlineDelegate OnBackupCharacterOwnerChangedDel; // 0x340
	FMulticastInlineDelegate OnFriendlyFireInflicted; // 0x350
	float TrackedFriendlyFireDamage; // 0x360
	bool bReverseFriendlyFireEnabled; // 0x364
	float PredictionFudge; // 0x368
	float MaxPredictionPing; // 0x36c
	FMulticastInlineDelegate OnTrackedActorBegin; // 0x370
	FMulticastInlineDelegate OnTrackedActorEnd; // 0x380
	EIsPlayer PlayerType; // 0x390
	AKSTeamState* r_Team; // 0x398
	int32_t BackupTeamNum; // 0x3a8
	bool bHasServerTravelled; // 0x3ac
	FMulticastInlineDelegate OnKSPlayerStateTeamChangedDel; // 0x3b0
	FMulticastInlineDelegate OnKSPlayerStateNameChangedDel; // 0x3d8
	TWeakObjectPtr<AKSCharacterBase> CharacterOwner; // 0x400
	TWeakObjectPtr<AKSCharacterBase> BackupCharacterOwner; // 0x408
	TWeakObjectPtr<AKSCharacterFoundation> CharacterFoundationOwner; // 0x410
	EEliminationState EliminatedState; // 0x448
	FMulticastInlineDelegate OnPlayerEliminated; // 0x450
	FMulticastInlineDelegate OnPlayerInPlay; // 0x460
	FMulticastInlineDelegate OnPlayerLeftPlay; // 0x470
	bool bDowned; // 0x480
	FMulticastInlineDelegate OnPlayerDownedChangedDel; // 0x488
	FVector LastKnownLocation; // 0x498
	int32_t LocalSideNum; // 0x4a4
	bool bUIRelevant; // 0x4a8
	bool bMarkedUIIrrelevant; // 0x4a9
	FSerializedMctsNetId r_ReplicatedNetId; // 0x4b0
	FMulticastInlineDelegate OnRespawnTicketsChanged; // 0x4d0
	int32_t RespawnTickets; // 0x4e0
	bool bIsPendingRepossession; // 0x4e4
	UKSTimerComponent* RespawnTimer; // 0x4e8
	UKSTimerComponent* DisallowGiveUpTimer; // 0x4f0
	FMulticastInlineDelegate OnRespawnTimerTick; // 0x4f8
	FMulticastInlineDelegate OnRespawnTimerActive; // 0x508
	FMulticastInlineDelegate OnRespawnTimerComplete; // 0x518
	FMulticastInlineDelegate OnDisallowGiveUpTimerTick; // 0x528
	FMulticastInlineDelegate OnDisallowGiveUpTimerActive; // 0x538
	FMulticastInlineDelegate OnDisallowGiveUpTimerComplete; // 0x548
	FMulticastInlineDelegate OnScoreChanged; // 0x558
	FMulticastInlineDelegate OnMultiDownAchievedDel; // 0x568
	FMulticastInlineDelegate OnMultiDownAchievedWithDataDel; // 0x578
	int32_t Kills; // 0x58c
	int32_t deaths; // 0x590
	int32_t Assists; // 0x594
	int32_t downs; // 0x598
	int32_t DownSpree; // 0x59c
	int32_t Revives; // 0x5a0
	int32_t eliminations; // 0x5a4
	int32_t Headshots; // 0x5a8
	int32_t Hacks; // 0x5ac
	int32_t Dehacks; // 0x5b0
	int32_t MitigatedDamageDealt; // 0x5b4
	int32_t MitigatedDamageReceived; // 0x5b8
	int32_t RawDamageDealt; // 0x5bc
	int32_t RawDamageReceived; // 0x5c0
	int32_t RoundsPlayed; // 0x5c4
	int32_t TimeAlive; // 0x5c8
	int32_t timePlayed; // 0x5cc
	FMulticastInlineDelegate OnUIRelevantPlayerStateChangedDel; // 0x5e8
	FKSScoreChangeList ScoreChangeList; // 0x5f8
	UKSPlayerMatchStats* PreviewRecordedStats; // 0x688
	int32_t Money; // 0x690
	int32_t LastMoney; // 0x694
	FMulticastInlineDelegate OnMoneyEarned; // 0x698
	FMulticastInlineDelegate OnMoneyChanged; // 0x6a8
	bool bMoneyGivesCharge; // 0x6b8
	int32_t cash; // 0x6bc
	int32_t LastCash; // 0x6c0
	bool bHasReceivedStartingCash; // 0x6c4
	int32_t TotalCashEarned; // 0x6c8
	int32_t LastCashEarned; // 0x6cc
	FMulticastInlineDelegate OnCashChanged; // 0x6d0
	FMulticastInlineDelegate OnCashEarnedChanged; // 0x6e0
	FMulticastInlineDelegate OnCashChangeEvent; // 0x6f0
	FKSCashChangeList CashChangeList; // 0x700
	FMulticastInlineDelegate OnItemPickedUpBySelf; // 0x790
	FMulticastInlineDelegate OnItemPickedUpByTeam; // 0x7a0
	bool bShouldRestoreInventory; // 0x7b0
	AKSPlayerStateAssistant* PlayerStateAssistant; // 0x7c8
	TArray<UKSPlayerMod*> ModsToRestoreOnReactivated; // 0x7d0
	FMulticastInlineDelegate OnPlayerModCharge; // 0x7e0
	FMulticastInlineDelegate OnPlayerModActivationChange; // 0x7f0
	FMulticastInlineDelegate OnModAddedDel; // 0x800
	FMulticastInlineDelegate OnModRemovedDel; // 0x828
	TArray<UKSSpecialty*> Specialties; // 0x850
	FMulticastInlineDelegate OnJobChanged; // 0x860
	UKSJobItem* JobItem; // 0x870
	int32_t JobMasteryXpLevel; // 0x878
	FMulticastInlineDelegate OnJobLoadFinishedDel; // 0x880
	FMulticastInlineDelegate OnJobMasteryXpLevelChanged; // 0x8a8
	UKSSkinBundle* SkinItem; // 0x8c0
	FMulticastInlineDelegate OnSkinChanged; // 0x8c8
	UKSLoadoutClass* LoadoutClass; // 0x8d8
	TArray<AKSItemDrop*> ItemsDroppedOnDeath; // 0x8e0
	FKSCharacterGender Gender; // 0x908
	FKSCharacterGender LocalGender; // 0x90a
	FGameplayTagContainer SkinTagContainer; // 0x910
	bool bStale; // 0x948
	TArray<FString> AllyWidgetPoolName; // 0x950
	FMulticastInlineDelegate OnShopItemPurchased; // 0x960
	FMulticastInlineDelegate OnShopItemRefunded; // 0x970
	FMulticastInlineDelegate OnShopItemActive; // 0x980
	FMulticastInlineDelegate OnShopItemInactive; // 0x990
	FMulticastInlineDelegate OnPersistentPlayerDataChanged; // 0x9a0
	bool bPollInProgress; // 0x9d0
	bool bHasVoted; // 0x9d1
	UKSPollBase* CurrentPollType; // 0x9d8
	FKSPollData CachedPollData; // 0x9e0
	bool bCachedLocallyViewed; // 0x9f0
	FMulticastInlineDelegate OnCharacterLocalViewChange; // 0x9f8
	TArray<TWeakObjectPtr<AActor>> StimulatingObjects; // 0xa08
	AKSRevealManager* RevealManager; // 0xa18
	FMulticastInlineDelegate OnActivityEventTriggered; // 0xa20
	FMulticastInlineDelegate OnCombatActivityEventTriggered; // 0xa30
	FMulticastInlineDelegate OnTargetedActivityEventTriggered; // 0xa40
	FMulticastInlineDelegate OnRevealEventTriggered; // 0xa50
	FMulticastInlineDelegate OnWeaponReloaded; // 0xa60
	FMulticastInlineDelegate OnWeaponFiredPreDamage; // 0xa70
	FMulticastInlineDelegate OnWeaponFiredPostDamage; // 0xa80
	bool bBackfill; // 0xa90
	int32_t SavedHumanPlayerId; // 0xa94
	TMap<FString, float> ActionTimestampMap; // 0xa98
	TMap<int64_t, float> LastDamagedByPlayerTimestampMap; // 0xae8
	TMap<int32_t, int32_t> CachedItemValueMap; // 0xb38
	TMap<FString, float> ActivityBehaviorCache; // 0xb88
	TWeakObjectPtr<AKSVehicleBase> VehicleOwner; // 0xbd8
	FMulticastInlineDelegate OnCharacterFoundationPossessionChangedDel; // 0xbe0
};

struct UPerkCategory : UItemCollection {
	FText PerkCategoryName; // 0x98
	FText PerkCategoryDescription; // 0xb0
	TSoftClassPtr<UObject> AssociatedPerkTree; // 0xc8
	FLinearColor ThemeColorLight; // 0xf0
	FLinearColor ThemeColorDark; // 0x100
	TSoftObjectPtr<UTexture2D> PerkCategoryIcon; // 0x120
};

struct UAudioComponent : USceneComponent {
	USoundBase* Sound; // 0x208
	TArray<FAudioComponentParam> InstanceParameters; // 0x210
	USoundClass* SoundClassOverride; // 0x220
	char bAutoDestroy : 1; // 0x228
	char bStopWhenOwnerDestroyed : 1; // 0x228
	char bShouldRemainActiveIfDropped : 1; // 0x228
	char bAllowSpatialization : 1; // 0x228
	char bOverrideAttenuation : 1; // 0x228
	char bOverrideSubtitlePriority : 1; // 0x228
	char bIsUISound : 1; // 0x228
	char bEnableLowPassFilter : 1; // 0x228
	char bOverridePriority : 1; // 0x229
	char bSuppressSubtitles : 1; // 0x229
	char bAutoManageAttachment : 1; // 0x22a
	FName AudioComponentUserID; // 0x230
	float PitchModulationMin; // 0x238
	float PitchModulationMax; // 0x23c
	float VolumeModulationMin; // 0x240
	float VolumeModulationMax; // 0x244
	float VolumeMultiplier; // 0x248
	int32_t EnvelopeFollowerAttackTime; // 0x24c
	int32_t EnvelopeFollowerReleaseTime; // 0x250
	float Priority; // 0x254
	float SubtitlePriority; // 0x258
	USoundEffectSourcePresetChain* SourceEffectChain; // 0x260
	float PitchMultiplier; // 0x268
	float LowPassFilterFrequency; // 0x26c
	USoundAttenuation* AttenuationSettings; // 0x278
	FSoundAttenuationSettings AttenuationOverrides; // 0x280
	USoundConcurrency* ConcurrencySettings; // 0x620
	TSet<USoundConcurrency*> ConcurrencySet; // 0x628
	EAttachmentRule AutoAttachLocationRule; // 0x684
	EAttachmentRule AutoAttachRotationRule; // 0x685
	EAttachmentRule AutoAttachScaleRule; // 0x686
	FMulticastInlineDelegate OnAudioFinished; // 0x688
	FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x6b0
	FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x6d8
	FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0x700
	FSoundModulation Modulation; // 0x728
	FDelegate OnQueueSubtitles; // 0x738
	TWeakObjectPtr<USceneComponent> AutoAttachParent; // 0x748
	FName AutoAttachSocketName; // 0x750
};

struct AOnlineBeacon : AActor {
	float BeaconConnectionInitialTimeout; // 0x228
	float BeaconConnectionTimeout; // 0x22c
	UNetDriver* NetDriver; // 0x230
};

struct UBTDecorator : UBTAuxiliaryNode {
	char bInverseCondition : 1; // 0x60
	EBTFlowAbortMode FlowAbortMode; // 0x64
};

struct UKSActivityRequirement_BackfillEnabledQueue : UKSActivityRequirement {
	bool bRequireEnabled; // 0x30
};

struct UMovieScenePrimitiveMaterialTrack : UMovieScenePropertyTrack {
	int32_t MaterialIndex; // 0x88
};

struct UWBP_ItemPreviewStack_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* BorderBackground; // 0x528
	UImage* Gradient; // 0x530
	UWBP_AsyncIcon_C* ItemPreview2D; // 0x538
	UBorder* RarityElementWrapper; // 0x540
	UImage* ScanLines; // 0x548
	USizeBox* SizeConstraint; // 0x550
	UTextBlock* Title; // 0x558
	UOverlay* TitleDisplay; // 0x560
	UWBP_ReactiveWrapStepPreview_C* WBP_ReactiveWrapStepPreview; // 0x568
	ELobbyCharacterIndex CharacterIndex; // 0x570
	FName ModelName; // 0x574
	UKSJobItem* JobItem; // 0x580
	AKSJobSelectPrvwActor_RogueScrn* PreviewActor; // 0x588
	bool DisplayReactiveDetails; // 0x590
	FName OwningSceneName; // 0x594
	UKSWeaponAsset* WeaponOverride; // 0x5a0
};

struct UKSBTTask_SelectTargetOfTarget : UBTTaskNode {
	FBlackboardKeySelector CopyTarget; // 0x70
	FBlackboardKeySelector KeyToCopy; // 0x98
};

struct UMovieSceneCameraShakeSection : UMovieSceneSection {
	FMovieSceneCameraShakeSectionData ShakeData; // 0xe0
	UCameraShake* ShakeClass; // 0x100
	float PlayScale; // 0x108
	ECameraAnimPlaySpace PlaySpace; // 0x10c
	FRotator UserDefinedPlaySpace; // 0x110
};

struct UGizmoAxisRotationParameterSource : UGizmoBaseFloatParameterSource {
	TScriptInterface<IGizmoAxisSource> AxisSource; // 0x48
	TScriptInterface<IGizmoTransformSource> TransformSource; // 0x58
	float Angle; // 0x68
	FGizmoFloatParameterChange LastChange; // 0x6c
	FVector CurRotationAxis; // 0x74
	FVector CurRotationOrigin; // 0x80
	FTransform InitialTransform; // 0x90
};

struct UGizmoCircleComponent : UGizmoBaseComponent {
	FVector Normal; // 0x450
	float Radius; // 0x45c
	float Thickness; // 0x460
	int32_t NumSides; // 0x464
	bool bViewAligned; // 0x468
	bool bOnlyAllowFrontFacingHits; // 0x469
};

struct UWBP_EpilepsyWarning_C : UUserWidget {
	URichTextBlock* RichTextBlock_152; // 0x238
};

struct UWBP_SettingsDropdown_C : UKSSettingsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UDropdown_C* Dropdown; // 0x580
};

struct ULiveLinkComponentController : UActorComponent {
	FLiveLinkSubjectRepresentation SubjectRepresentation; // 0xb0
	TMap<ULiveLinkRole*, ULiveLinkControllerBase*> ControllerMap; // 0xc0
	bool bUpdateInEditor; // 0x110
	FMulticastInlineDelegate OnLiveLinkUpdated; // 0x118
	FComponentReference ComponentToControl; // 0x128
};

struct UNavigationSystemModuleConfig : UNavigationSystemConfig {
	char bStrictlyStatic : 1; // 0x50
	char bCreateOnClient : 1; // 0x50
	char bAutoSpawnMissingNavData : 1; // 0x50
	char bSpawnNavDataInNavBoundsLevel : 1; // 0x50
};

struct UScoreboardPlayerStats_Lobby_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UWBP_PlayerIdentity_Avatar_C* avatar; // 0x530
	USizeBox* AvatarWrapper; // 0x538
	UTextBlock* DamageScore; // 0x540
	UTextBlock* DeathScore; // 0x548
	UTextBlock* DownScore; // 0x550
	UTextBlock* EliminationScore; // 0x558
	UButton* HitTarget; // 0x560
	UImage* Image_302; // 0x568
	UWBP_AsyncIcon_C* JobIcon; // 0x570
	UImage* NameBackground; // 0x578
	UTextBlock* ObjectiveScore; // 0x580
	UWBP_PlayerIdentity_PlayerLevel_C* PlayerLevel; // 0x588
	UTextBlock* PlayerName; // 0x590
	UTextBlock* PointScore; // 0x598
	UTextBlock* ReviveScore; // 0x5a0
	UImage* ScoreBackground; // 0x5a8
	UImage* SelfIndicator; // 0x5b0
	UWBP_BoxStroke_C* WBP_BoxStroke; // 0x5b8
	UWBP_BoxStroke_C* WBP_BoxStroke_272; // 0x5c0
	FPlayerEntryStats playerStats; // 0x5c8
	UKSEMODataFactory* EMODataFactory; // 0x690
	FMulticastInlineDelegate OnClicked; // 0x698
	bool HasHovered; // 0x6a8
	UAkAudioEvent* HoverScoreboardPlayerStatsSFX; // 0x6b0
	UAkAudioEvent* ClickScoreboardPlayerStatsSFX; // 0x6b8
};

struct UWBP_ChallengeEntry_Seasonal_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	USizeBox* ActiveContractWrapper; // 0x530
	UImage* bkg; // 0x538
	UTextBlock* ChallengeTitle; // 0x540
	UTextBlock* ComingSoonText; // 0x548
	UTextBlock* CompletedText_2; // 0x550
	USizeBox* CompleteIcon; // 0x558
	USizeBox* HeaderWrapper; // 0x560
	UButton* HitTarget; // 0x568
	UImage* HoverBkg; // 0x570
	UImage* Image_2; // 0x578
	UImage* LockIcon; // 0x580
	UTextBlock* ProgressText; // 0x588
	UWidgetSwitcher* ProgressTextSwitcher; // 0x590
	UImage* SelectionFrame; // 0x598
	UWidgetSwitcher* StatusIcon; // 0x5a0
	UWBP_ChallengeEntry_CardHorizontal_C* WBP_ChallengeEntry_CardHorizontal; // 0x5a8
	UWBP_PipProgressWidget_C* WBP_PipProgressWidget; // 0x5b0
	EChallengeEntry_Card_State CurrentVisualState; // 0x5b8
	FName WeekTableRowName; // 0x5bc
	FActivitySequenceRow CurrentActivitySequence; // 0x5c8
	FMulticastInlineDelegate OnWeekGamepadHovered; // 0x5f8
};

struct UTimelineTemplate : UObject {
	float TimelineLength; // 0x28
	ETimelineLengthMode LengthMode; // 0x2c
	char bAutoPlay : 1; // 0x2d
	char bLoop : 1; // 0x2d
	char bReplicated : 1; // 0x2d
	char bIgnoreTimeDilation : 1; // 0x2d
	TArray<FTTEventTrack> EventTracks; // 0x30
	TArray<FTTFloatTrack> FloatTracks; // 0x40
	TArray<FTTVectorTrack> VectorTracks; // 0x50
	TArray<FTTLinearColorTrack> LinearColorTracks; // 0x60
	TArray<FBPVariableMetaDataEntry> MetaDataArray; // 0x70
	FGuid TimelineGuid; // 0x80
	FName VariableName; // 0x90
	FName DirectionPropertyName; // 0x98
	FName UpdateFunctionName; // 0xa0
	FName FinishedFunctionName; // 0xa8
};

struct UPawnAction : UObject {
	UPawnAction* ChildAction; // 0x28
	UPawnAction* ParentAction; // 0x30
	UPawnActionsComponent* OwnerComponent; // 0x38
	UObject* Instigator; // 0x40
	UBrainComponent* BrainComp; // 0x48
	char bAllowNewSameClassInstance : 1; // 0x80
	char bReplaceActiveSameClassInstance : 1; // 0x80
	char bShouldPauseMovement : 1; // 0x80
	char bAlwaysNotifyOnFinished : 1; // 0x80
};

struct UWBP_Acquisition_C : UKSAcquisitionModal {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UWidgetAnimation* OnShow; // 0x580
	UWBP_Header1_C* AcquireTypeHeader; // 0x588
	UWrapBox* BundleContents; // 0x590
	UScrollBox* Contents; // 0x598
	UWBP_ItemInfoContainer_Centered_C* ItemInfoContainer; // 0x5a0
	UTextBlock* UnlockedItemText; // 0x5a8
	UWBP_ItemPreviewStack_C* WBP_ItemPreviewStack; // 0x5b0
	UPUMG_StoreItem* StoreItem; // 0x5b8
	TArray<UWBP_KSCosmeticItemDisplay_C*> AcquisitionItemWidgets; // 0x5c0
	bool IsBundleAcquisition; // 0x5d0
	UAkAudioEvent* ShowAcquisitionSFX; // 0x5d8
	UKSSkinBundle* CurrentSkin; // 0x5e0
	UKSJobItem* CurrentCharacterJob; // 0x5e8
	AKSJobSelectPrvwActor_RogueScrn* PreviewActor; // 0x5f0
	UAkAudioEvent* PurchaseAcquisitionConfirmedSFX; // 0x5f8
};

struct UBTDecorator_Loop : UBTDecorator {
	int32_t NumLoops; // 0x68
	bool bInfiniteLoop; // 0x6c
	float InfiniteLoopTimeoutTime; // 0x70
};

struct UKSSpawnRule : UObject {
	FName RuleName; // 0x28
	TArray<FName> OverridePropertyNames; // 0x30
};

struct UInterpTrackToggle : UInterpTrack {
	TArray<FToggleTrackKey> ToggleTrack; // 0x70
	char bActivateSystemEachUpdate : 1; // 0x80
	char bActivateWithJustAttachedFlag : 1; // 0x80
	char bFireEventsWhenForwards : 1; // 0x80
	char bFireEventsWhenBackwards : 1; // 0x80
	char bFireEventsWhenJumpingForwards : 1; // 0x80
};

struct UMaterialShaderQualitySettings : UObject {
	TMap<FName, UShaderPlatformQualitySettings*> ForwardSettingMap; // 0x28
};

struct UTextRenderComponent : UPrimitiveComponent {
	FText Text; // 0x430
	UMaterialInterface* TextMaterial; // 0x448
	UFont* Font; // 0x450
	EHorizTextAligment HorizontalAlignment; // 0x458
	EVerticalTextAligment VerticalAlignment; // 0x459
	FColor TextRenderColor; // 0x45c
	float XScale; // 0x460
	float YScale; // 0x464
	float WorldSize; // 0x468
	float InvDefaultSize; // 0x46c
	float HorizSpacingAdjust; // 0x470
	float VertSpacingAdjust; // 0x474
	char bAlwaysRenderAsText : 1; // 0x478
};

struct UInteractiveGizmoManager : UObject {
	TArray<FActiveGizmo> ActiveGizmos; // 0x30
	TMap<FString, UInteractiveGizmoBuilder*> GizmoBuilders; // 0x58
};

struct UKSLongShot : UKSAccoladeTracker {
	float DistanceRequirement; // 0xa0
};

struct UWidgetAnimation : UMovieSceneSequence {
	UMovieScene* MovieScene; // 0x348
	TArray<FWidgetAnimationBinding> AnimationBindings; // 0x350
	bool bLegacyFinishOnStop; // 0x360
	FString DisplayLabel; // 0x368
};

struct UWBP_AppliedEvents_C : UKSActiveBonusesWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UVerticalBox* ActiveEvents; // 0x530
};

struct UKSBTTask_ActivateAbility : UBTTaskNode {
	TSoftObjectPtr<UKSPlayerMod> ActivatedAbility; // 0x70
};

struct UInteractiveGizmo : UObject {
	UInputBehaviorSet* InputBehaviors; // 0x30
};

struct UForceFeedbackComponent : USceneComponent {
	UForceFeedbackEffect* ForceFeedbackEffect; // 0x208
	char bAutoDestroy : 1; // 0x210
	char bStopWhenOwnerDestroyed : 1; // 0x210
	char bLooping : 1; // 0x210
	char bIgnoreTimeDilation : 1; // 0x210
	char bOverrideAttenuation : 1; // 0x210
	float IntensityMultiplier; // 0x214
	UForceFeedbackAttenuation* AttenuationSettings; // 0x218
	FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x220
	FMulticastInlineDelegate OnForceFeedbackFinished; // 0x2d0
};

struct UKSWeaponAttachment_QuickMag : UKSWeaponAttachment {
	float ReloadPeriodMultiplier; // 0x2f8
};

struct UDynamicEntryBoxBase : UWidget {
	EDynamicBoxType EntryBoxType; // 0x110
	FVector2D EntrySpacing; // 0x114
	TArray<FVector2D> SpacingPattern; // 0x120
	FSlateChildSize EntrySizeRule; // 0x130
	EHorizontalAlignment EntryHorizontalAlignment; // 0x138
	EVerticalAlignment EntryVerticalAlignment; // 0x139
	int32_t MaxElementSize; // 0x13c
	FUserWidgetPool EntryWidgetPool; // 0x150
};

struct AKSSeasonalItemSpawnLocationManager : AActor {
	bool bShouldSpawnAtSetup; // 0x220
	bool bShouldSpawnPeriodically; // 0x221
	float SpawnIntervalSeconds; // 0x224
	TMap<FString, FSeasonalItemSpawnInfo> SeasonalSpawningInfos; // 0x2b0
};

struct UWBP_CustomGameActionLog_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UVerticalBox* Container; // 0x240
	UScrollBox* ScrollContainer; // 0x248
	bool ScrolledToBottom; // 0x250
};

struct USoundBase : UObject {
	USoundClass* SoundClassObject; // 0x28
	char bDebug : 1; // 0x30
	char bOverrideConcurrency : 1; // 0x30
	char bOutputToBusOnly : 1; // 0x30
	char bHasDelayNode : 1; // 0x30
	char bHasConcatenatorNode : 1; // 0x30
	char bBypassVolumeScaleForPriority : 1; // 0x30
	EVirtualizationMode VirtualizationMode; // 0x31
	TSet<USoundConcurrency*> ConcurrencySet; // 0x88
	FSoundConcurrencySettings ConcurrencyOverrides; // 0xd8
	float Duration; // 0xf8
	float MaxDistance; // 0xfc
	float TotalSamples; // 0x100
	float Priority; // 0x104
	USoundAttenuation* AttenuationSettings; // 0x108
	FSoundModulation Modulation; // 0x110
	USoundSubmixBase* SoundSubmixObject; // 0x120
	TArray<FSoundSubmixSendInfo> SoundSubmixSends; // 0x128
	USoundEffectSourcePresetChain* SourceEffectChain; // 0x138
	TArray<FSoundSourceBusSendInfo> BusSends; // 0x140
	TArray<FSoundSourceBusSendInfo> PreEffectBusSends; // 0x150
};

struct UCrowdFollowingComponent : UPathFollowingComponent {
	UCharacterMovementComponent* CharacterMovement; // 0x260
	FVector CrowdAgentMoveDirection; // 0x268
};

struct UKSActivityRewardCondition_RoundWon : UKSActivityRewardCondition {
	bool bCheckRoundWon; // 0x30
};

struct ASpotLight : ALight {
	USpotLightComponent* SpotLightComponent; // 0x230
};

struct UWidgetComponent : UMeshComponent {
	bool bUseWidgetPool; // 0x458
	bool bPrimePoolOnFirstUse; // 0x459
	int32_t MaxPoolSize; // 0x45c
	EWidgetSpace Space; // 0x460
	EWidgetTimingPolicy TimingPolicy; // 0x461
	UUserWidget* WidgetClass; // 0x468
	FIntPoint DrawSize; // 0x470
	bool bManuallyRedraw; // 0x478
	bool bRedrawRequested; // 0x479
	float RedrawTime; // 0x47c
	FIntPoint CurrentDrawSize; // 0x488
	bool bDrawAtDesiredSize; // 0x490
	FVector2D Pivot; // 0x494
	bool bReceiveHardwareInput; // 0x49c
	bool bWindowFocusable; // 0x49d
	EWindowVisibility WindowVisibility; // 0x49e
	bool bApplyGammaCorrection; // 0x49f
	bool bApplyColorDeficiencyCorrection; // 0x4a0
	ULocalPlayer* OwnerPlayer; // 0x4a8
	FLinearColor BackgroundColor; // 0x4b0
	FLinearColor TintColorAndOpacity; // 0x4c0
	float OpacityFromTexture; // 0x4d0
	EWidgetBlendMode BlendMode; // 0x4d4
	bool bIsTwoSided; // 0x4d5
	bool TickWhenOffscreen; // 0x4d6
	UUserWidget* Widget; // 0x4d8
	UBodySetup* BodySetup; // 0x500
	UMaterialInterface* TranslucentMaterial; // 0x508
	UMaterialInterface* TranslucentMaterial_OneSided; // 0x510
	UMaterialInterface* OpaqueMaterial; // 0x518
	UMaterialInterface* OpaqueMaterial_OneSided; // 0x520
	UMaterialInterface* MaskedMaterial; // 0x528
	UMaterialInterface* MaskedMaterial_OneSided; // 0x530
	UTextureRenderTarget2D* RenderTarget; // 0x538
	UMaterialInstanceDynamic* MaterialInstance; // 0x540
	bool bAddedToScreen; // 0x548
	bool bEditTimeUsable; // 0x549
	FName SharedLayerName; // 0x54c
	int32_t LayerZOrder; // 0x554
	EWidgetGeometryMode GeometryMode; // 0x558
	float CylinderArcAngle; // 0x55c
};

struct UMovieSceneMediaPlayerPropertySection : UMovieSceneSection {
	UMediaSource* MediaSource; // 0xe0
	bool bLoop; // 0xe8
};

struct UAkAudioEventData : UAkAssetDataSwitchContainer {
	float MaxAttenuationRadius; // 0xa8
	bool IsInfinite; // 0xac
	float MinimumDuration; // 0xb0
	float MaximumDuration; // 0xb4
	TMap<FString, UAkAssetDataSwitchContainer*> LocalizedMedia; // 0xb8
};

struct UKSMultiDownsTracker : UKSAccoladeTracker {
	TArray<FAccoladeMultiDownTracker> MultiDownAccolades; // 0xa8
	TArray<FAccoladePlayerTrackers> TrackPlayers; // 0xb8
	float MaxTrackerTimer; // 0xc8
};

struct UKSPurchaseConfirmationWidget : UKSWidget {
	UPUMG_StoreItem* PurchaseItem; // 0x520
	int32_t PurchaseQuantity; // 0x528
	UKSPurchaseData* PurchaseRequestData; // 0x530
};

struct UInterpTrackInstProperty : UInterpTrackInst {
	TFieldPath<FProperty> InterpProperty; // 0x28
	UObject* PropertyOuterObjectInst; // 0x50
};

struct ABrush : AActor {
	EBrushType BrushType; // 0x220
	FColor BrushColor; // 0x224
	int32_t PolyFlags; // 0x228
	char bColored : 1; // 0x22c
	char bSolidWhenSelected : 1; // 0x22c
	char bPlaceableFromClassBrowser : 1; // 0x22c
	char bNotForClientOrServer : 1; // 0x22c
	UModel* Brush; // 0x230
	UBrushComponent* BrushComponent; // 0x238
	char bInManipulation : 1; // 0x240
	TArray<FGeomSelection> SavedSelections; // 0x248
};

struct UKSWeaponAsset_WithProjectile : UKSWeaponAsset {
	TSoftClassPtr<UObject> ProjectileClass; // 0x908
	TSoftObjectPtr<UKSWeaponAsset> ProjectileWeaponAsset; // 0x930
	TArray<FKSProjectileWeaponInfo> AdditionalProjectileWeaponInfos; // 0x958
	float RadialDamageOriginOffsetDistance; // 0x968
	float TimeToFullyCook; // 0x96c
	UCurveFloat* CookSpeedMultiplierCurve; // 0x970
	UCurveFloat* CookDamageMultiplierCurve; // 0x978
	UCurveFloat* BounceDamageMultiplierCurve; // 0x980
};

struct UKSPerkTreeEdgeBase : UKSWidget {
	bool bTopEnabled; // 0x520
	bool bLeftEnabled; // 0x521
	bool bDiagonalEnabled; // 0x522
	bool bBackDiagonalEnabled; // 0x523
	FLinearColor AccentColor; // 0x524
};

struct UPhysicsConstraintTemplate : UObject {
	FConstraintInstance DefaultInstance; // 0x28
	TArray<FPhysicsConstraintProfileHandle> ProfileHandles; // 0x1e0
	FConstraintProfileProperties DefaultProfile; // 0x1f0
};

struct UPhysicsConstraintComponent : USceneComponent {
	AActor* ConstraintActor1; // 0x208
	FConstrainComponentPropName ComponentName1; // 0x210
	AActor* ConstraintActor2; // 0x218
	FConstrainComponentPropName ComponentName2; // 0x220
	UPhysicsConstraintTemplate* ConstraintSetup; // 0x238
	FMulticastInlineDelegate OnConstraintBroken; // 0x240
	FConstraintInstance ConstraintInstance; // 0x250
};

struct UEndpointSubmix : USoundSubmixBase {
	FName EndpointType; // 0x38
	UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x40
	UAudioEndpointSettingsBase* EndpointSettings; // 0x48
};

struct UKSTargetMarkerWidget : UKSScreenMarkerWidgetBase {
	FMulticastInlineDelegate OnTargetChanged; // 0x328
	FMulticastInlineDelegate OnModUsed; // 0x338
	AActor* CurrentTarget; // 0x348
	UKSModInst_Activated* TargetModInst; // 0x350
	TScriptInterface<IKSTargeter> Targeter; // 0x358
};

struct UMovieScenePrimitiveMaterialSection : UMovieSceneSection {
	FMovieSceneObjectPathChannel MaterialChannel; // 0xe0
};

struct UWBP_Challenge_Hub_C : UKSOverlayTabHubBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x5a0
	UWidgetAnimation* AnimShowSubview; // 0x5a8
	UImage* BG; // 0x5b0
	UImage* Image_148; // 0x5b8
	UTextBlock* SubviewStub3; // 0x5c0
	UWidgetSwitcher* SubviewSwitcher; // 0x5c8
	UWBP_ChallengeView_DailyContracts_C* WBP_ChallengeView_DailyContracts; // 0x5d0
	UWBP_ChallengeView_SeasonalContracts_C* WBP_ChallengeView_SeasonalContracts; // 0x5d8
	UWBP_SidePanel_Left_C* WBP_SidePanel_Left; // 0x5e0
	UWBP_VerticalTabGroup_C* WBP_VerticalTabGroup; // 0x5e8
	TMap<FName, UPUMG_Widget*> ViewWidgetMap; // 0x5f0
};

struct UWBP_JobGeneralButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* background; // 0x530
	UImage* BackgroundDecro; // 0x538
	UButton* FavoriteHitBox; // 0x540
	UImage* FreeRotationIcon; // 0x548
	UImage* HighlightFrame; // 0x550
	UButton* HitTarget; // 0x558
	UWBP_AsyncIcon_C* ItemIcon; // 0x560
	UWBP_AsyncIcon_C* JobIcon; // 0x568
	UImage* LockIcon; // 0x570
	UImage* NameplateBG; // 0x578
	UImage* NameplateDecroBar; // 0x580
	UWidgetSwitcher* NewRogueCalloutSwitcher; // 0x588
	UScaleBox* NewTagWrapper; // 0x590
	UScaleBox* RogueMasteryBadgeWrapper; // 0x598
	UTextBlock* RogueName; // 0x5a0
	UImage* Starred; // 0x5a8
	UImage* Unstarred; // 0x5b0
	UWBP_RogueMasteryIcon_C* WBP_MercMasteryIcon; // 0x5b8
	UWBP_NewTag_C* WBP_NewTag; // 0x5c0
	FMulticastInlineDelegate OnClicked; // 0x5c8
	FMulticastInlineDelegate OnHovered; // 0x5d8
	FMulticastInlineDelegate OnUnhovered; // 0x5e8
	UKSJobItem* JobItem; // 0x5f8
	bool MainButtonHovered; // 0x600
	bool SubButtonHovered; // 0x601
	bool NeedsUnhovering; // 0x602
	FSlateColor LockedPortraitTint; // 0x608
	FMulticastInlineDelegate OnFavorited; // 0x630
	UAkAudioEvent* ClickJobGenButton; // 0x640
	UAkAudioEvent* HoverJobGenButton; // 0x648
	UAkAudioEvent* ClickJobGenFavoriteButton; // 0x650
	UAkAudioEvent* HoverJobGenFavoriteButton; // 0x658
	bool SubButtonHovered_1; // 0x660
};

struct UWBP_AbilityDurationBar_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* AbilityIcon; // 0x240
	UProgressBar* DurationRemaining; // 0x248
	UProgressBar* DurationRemaining_2; // 0x250
	UTextBlock* Timer; // 0x258
	float TotalDuration; // 0x260
	UKSPlayerModInstance* ModInstance; // 0x268
};

struct UWBP_NewTag_C : UUserWidget {
	UImage* background; // 0x238
};

struct UInputAxisDelegateBinding : UInputDelegateBinding {
	TArray<FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x28
};

struct UWBP_AmmoWrapper_C : UUserWidget {
	UHorizontalBox* AmmoWrapper; // 0x238
	UWBP_AmmoCount_C* WBP_AmmoCount; // 0x240
	UWBP_AmmoCount_C* WBP_AmmoCount_95; // 0x248
	TArray<UWBP_AmmoCount_C*> AmmoWidgets; // 0x250
};

struct UKSGameUserSettings : UGameUserSettings {
	int32_t SettingsVersionMajor; // 0x158
	int32_t SettingsVersionMinor; // 0x15c
	EKSGamepadIcons GamepadIconSet; // 0x160
	FIntPoint DefaultScreenResolution; // 0x164
	FIntPoint SavedScreenResolution; // 0x16c
	FString SavedDisplayLanguage; // 0x1d8
	int32_t LastJoinedQueuePrimaryId; // 0x1e8
	int32_t SavedSelectedRegion; // 0x1ec
	int32_t LastWhatsNewVersion; // 0x1f0
	TArray<int32_t> SavedTransientAcquisitionIds; // 0x1f8
	TSet<FName> SavedViewedNewsPanelIds; // 0x208
	int32_t SavedChallengeVersionId; // 0x258
	TSet<int32_t> SavedViewedChallengeIds; // 0x260
	TSet<int32_t> SavedRecentlySeenStoreItemLootIds; // 0x2b0
	TMap<FName, FString> SavedSettingsConfig; // 0x300
	TSet<FName> SavedLocalActions; // 0x350
	FMulticastInlineDelegate OnGamepadIconSetSettingsApplied; // 0x490
	FMulticastInlineDelegate OnLocalSettingSaved; // 0x4a0
	FMulticastInlineDelegate OnSettingApplied; // 0x4b0
};

struct UPostEventAsync : UBlueprintAsyncActionBase {
	FMulticastInlineDelegate Completed; // 0x30
};

struct UFixedFrameRateCustomTimeStep : UEngineCustomTimeStep {
	FFrameRate FixedFrameRate; // 0x28
};

struct ARecastNavMesh : ANavigationData {
	char bDrawTriangleEdges : 1; // 0x400
	char bDrawPolyEdges : 1; // 0x400
	char bDrawFilledPolys : 1; // 0x400
	char bDrawNavMeshEdges : 1; // 0x400
	char bDrawTileBounds : 1; // 0x400
	char bDrawPathCollidingGeometry : 1; // 0x400
	char bDrawTileLabels : 1; // 0x400
	char bDrawPolygonLabels : 1; // 0x400
	char bDrawDefaultPolygonCost : 1; // 0x401
	char bDrawLabelsOnPathNodes : 1; // 0x401
	char bDrawNavLinks : 1; // 0x401
	char bDrawFailedNavLinks : 1; // 0x401
	char bDrawClusters : 1; // 0x401
	char bDrawOctree : 1; // 0x401
	char bDrawOctreeDetails : 1; // 0x401
	char bDrawMarkedForbiddenPolys : 1; // 0x401
	char bDistinctlyDrawTilesBeingBuilt : 1; // 0x402
	char bDrawNavMesh : 1; // 0x402
	float DrawOffset; // 0x404
	char bFixedTilePoolSize : 1; // 0x408
	int32_t TilePoolSize; // 0x40c
	float TileSizeUU; // 0x410
	float CellSize; // 0x414
	float CellHeight; // 0x418
	float AgentRadius; // 0x41c
	float AgentHeight; // 0x420
	float AgentMaxHeight; // 0x424
	float AgentMaxSlope; // 0x428
	float AgentMaxStepHeight; // 0x42c
	float MinRegionArea; // 0x430
	float MergeRegionSize; // 0x434
	float MaxSimplificationError; // 0x438
	int32_t MaxSimultaneousTileGenerationJobsCount; // 0x43c
	int32_t TileNumberHardLimit; // 0x440
	int32_t PolyRefTileBits; // 0x444
	int32_t PolyRefNavPolyBits; // 0x448
	int32_t PolyRefSaltBits; // 0x44c
	FVector NavMeshOriginOffset; // 0x450
	float DefaultDrawDistance; // 0x45c
	float DefaultMaxSearchNodes; // 0x460
	float DefaultMaxHierarchicalSearchNodes; // 0x464
	ERecastPartitioning RegionPartitioning; // 0x468
	ERecastPartitioning LayerPartitioning; // 0x469
	int32_t RegionChunkSplits; // 0x46c
	int32_t LayerChunkSplits; // 0x470
	char bSortNavigationAreasByCost : 1; // 0x474
	char bPerformVoxelFiltering : 1; // 0x474
	char bMarkLowHeightAreas : 1; // 0x474
	char bFilterLowSpanSequences : 1; // 0x474
	char bFilterLowSpanFromTileCache : 1; // 0x474
	char bDoFullyAsyncNavDataGathering : 1; // 0x474
	char bUseBetterOffsetsFromCorners : 1; // 0x474
	char bStoreEmptyTileLayers : 1; // 0x474
	char bUseVirtualFilters : 1; // 0x475
	char bAllowNavLinkAsPathEnd : 1; // 0x475
	char bUseVoxelCache : 1; // 0x475
	float TileSetUpdateInterval; // 0x478
	float HeuristicScale; // 0x47c
	float VerticalDeviationFromGroundCompensation; // 0x480
};

struct UWBP_PostMatchNavButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UWBP_subscreen_nav_tab_C* WBP_subscreen_nav_tab; // 0x530
	FMulticastInlineDelegate OnClicked; // 0x538
	FText ButtonTextMsg; // 0x548
};

struct UMovieSceneSpawnTrack : UMovieSceneTrack {
	TArray<UMovieSceneSection*> Sections; // 0x58
	FGuid ObjectGuid; // 0x68
};

struct UKSModInst_ReviveDrone : UKSModInst_DirectTargetWeapon {
	FMulticastInlineDelegate OnReviveDroneAbilityStateChanged; // 0x528
	EKSReviveDroneAbilityState KSReviveDroneAbilityState; // 0x538
	FTimerHandle ResetToAvailabilityTimerHandle; // 0x540
	float TimeToResetAvailability; // 0x548
	TWeakObjectPtr<AKSAgent_RevivalDrone> CurrentDrone; // 0x54c
	FMulticastInlineDelegate OnReviveDroneSetTarget; // 0x558
	TWeakObjectPtr<AKSCharacter> DroneTargetCharacter; // 0x568
};

struct UParticleModuleLocation : UParticleModuleLocationBase {
	FRawDistributionVector StartLocation; // 0x30
	float DistributeOverNPoints; // 0x78
	float DistributeThreshold; // 0x7c
};

struct UKSAIItemPriorityComponent : UActorComponent {
	TArray<FKSBTItemPriorityTableRow> ItemPriorities; // 0xb0
};

struct UDistributionVectorConstantCurve : UDistributionVector {
	FInterpCurveVector ConstantCurve; // 0x38
	char bLockAxes : 1; // 0x50
	EDistributionVectorLockFlags LockedAxes; // 0x54
};

struct UKSAISense_MapPoint : UAISense {
	TArray<FKSAIMapPointStimulusEvent> RegisteredEvents; // 0x80
};

struct UWBP_EventBundleItem_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWidgetAnimation* animOnHover; // 0x4c8
	UWidgetAnimation* animOnClick; // 0x4d0
	UWidgetAnimation* animOnSelected; // 0x4d8
	UImage* Btn_BkgHoverGradient; // 0x4e0
	UImage* Btn_BkgPress; // 0x4e8
	UImage* Btn_Fill; // 0x4f0
	UImage* Btn_HoverStroke; // 0x4f8
	UImage* Btn_Stroke; // 0x500
	UWBP_StandardButtonSmall_C* Button_BuyBundle; // 0x508
	UOverlay* ButtonBackground; // 0x510
	UButton* HitTarget; // 0x518
	UTextBlock* Next_BundleName; // 0x520
	UTextBlock* Next_BundleNo; // 0x528
	UImage* NumberBackground; // 0x530
	UWBP_StorePriceDisplay_C* PriceDisplay; // 0x538
	UWidgetSwitcher* PriceDisplaySwitcher; // 0x540
	UImage* Shade; // 0x548
	UImage* Shade_2; // 0x550
	FMulticastInlineDelegate OnBundleItemClicked; // 0x558
	UPUMG_StoreItem* StoreItem; // 0x568
	FMulticastInlineDelegate OnUnlockButtonClicked; // 0x570
	bool bIsSelected; // 0x580
	bool bIsPremium; // 0x581
	UAkAudioEvent* EventButtonClickSound; // 0x588
	UAkAudioEvent* EventButtonHoverSound; // 0x590
};

struct AKSAgent_RevivalDrone : AKSAgentBase {
	FMulticastInlineDelegate OnArrive; // 0x388
	float MaxFlightSpeed; // 0x398
	float InvisibleMovementTime; // 0x39c
	float ReviveTime; // 0x3a0
	float ReviveHealth; // 0x3a4
	bool bDroneVisibility; // 0x3a8
	bool bDroneVulnerability; // 0x3a9
	bool bOngoingReviveEffectsActive; // 0x3aa
	TWeakObjectPtr<AKSCharacter> TargetCharacter; // 0x3ac
	EReviveDroneState MovementStage; // 0x3b4
	EReviveDroneFlightPath FlightPath; // 0x3b5
	float PreferredHoverHeight; // 0x3b8
	float TransitHeight; // 0x3bc
	float HoverCorrectionTime; // 0x3c0
	float DepartureHeight; // 0x3c4
	bool bUseCustomReviveTime; // 0x3c8
	float CustomReviveTime; // 0x3cc
	bool bInheritReviveTimeMods; // 0x3d0
	bool DrawOutline; // 0x3d1
	char OutlineStencilColor; // 0x3d2
	UKSPlayerMod* ApplyOnReleaseMod; // 0x3d8
	bool bDrawEnemyDroneOutline; // 0x3e8
	UKSItemStimuliSourceComponent* StimuliSourceComponent; // 0x3f0
};

struct UKSSocialPanelBase : UKSWidget {
	FMulticastInlineDelegate OnDataReady; // 0x520
	FMulticastInlineDelegate OnPlayerCardClicked; // 0x530
	FMulticastInlineDelegate OnSocialHeaderClicked; // 0x540
	UTreeView* TreeView; // 0x550
	UKSSocialOverlay* DataSource; // 0x558
	TArray<UKSDataSocialCategory*> CategoriesList; // 0x570
};

struct USpectatorBeaconState : UObject {
	FName SessionName; // 0x28
	int32_t NumConsumedReservations; // 0x30
	int32_t MaxReservations; // 0x34
	bool bRestrictCrossConsole; // 0x38
	TArray<FSpectatorReservation> Reservations; // 0x40
};

struct UParticleModuleRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	FRawDistributionFloat LifeMultiplier; // 0x30
};

struct UEnvQueryGenerator_Cone : UEnvQueryGenerator_ProjectedPoints {
	FAIDataProviderFloatValue AlignedPointsDistance; // 0x80
	FAIDataProviderFloatValue ConeDegrees; // 0xb8
	FAIDataProviderFloatValue AngleStep; // 0xf0
	FAIDataProviderFloatValue Range; // 0x128
	UEnvQueryContext* CenterActor; // 0x160
	char bIncludeContextLocation : 1; // 0x168
};

struct USynth2DSlider : UWidget {
	float ValueX; // 0x110
	float ValueY; // 0x114
	FDelegate ValueXDelegate; // 0x118
	FDelegate ValueYDelegate; // 0x128
	FSynth2DSliderStyle WidgetStyle; // 0x138
	FLinearColor SliderHandleColor; // 0x3f0
	bool IndentHandle; // 0x400
	bool Locked; // 0x401
	float StepSize; // 0x404
	bool IsFocusable; // 0x408
	FMulticastInlineDelegate OnMouseCaptureBegin; // 0x410
	FMulticastInlineDelegate OnMouseCaptureEnd; // 0x420
	FMulticastInlineDelegate OnControllerCaptureBegin; // 0x430
	FMulticastInlineDelegate OnControllerCaptureEnd; // 0x440
	FMulticastInlineDelegate OnValueChangedX; // 0x450
	FMulticastInlineDelegate OnValueChangedY; // 0x460
};

struct UMaterialExpressionTransformPosition : UMaterialExpression {
	FExpressionInput Input; // 0x40
	EMaterialPositionTransformSource TransformSourceType; // 0x54
	EMaterialPositionTransformSource TransformType; // 0x55
};

struct AKSEncounterManager : AActor {
	TArray<UKSBotEncounter*> BotEncounters; // 0x220
	FMulticastInlineDelegate OnBotDeath; // 0x230
	FMulticastInlineDelegate OnWaveFinished; // 0x240
	FMulticastInlineDelegate OnBotSpawned; // 0x250
	bool bPermaRevealFill; // 0x260
	bool bPermaRevealMark; // 0x261
	bool bPreferHiddenPlayerStarts; // 0x262
	float fAutoSpawnScoreRate; // 0x2f8
	float fAutoSpawnScore; // 0x304
};

struct AKSWeapon_DirectTarget : AKSWeapon {
	AActor* ActiveTarget; // 0x6d8
	FKSTargeterConfig TargeterConfig; // 0x6e0
};

struct UANotifyState_DisablesHandIK_C : UAnimNotifyState {
	bool LeftHand Disable; // 0x30
	bool RightHand Disable; // 0x31
	ESpeed Left Hand IK Blend Speed; // 0x32
	ESpeed Right Hand IK Blend Speed; // 0x33
};

struct UWBP_PerkTierHeader_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* Image; // 0x240
	UImage* Image_215; // 0x248
	UTextBlock* TextBlock_116; // 0x250
	int32_t PerkTier; // 0x258
};

struct UWBP_Store_C : UKSStoreWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UWidgetAnimation* SectionShown; // 0x530
	UWidgetSwitcher* DisplayMode; // 0x538
	UImage* Image_106; // 0x540
	UWBP_SectionListingBar_C* SectionsListingBar; // 0x548
	UScrollBox* StoreSections; // 0x550
	UBorder* StoreTimer; // 0x558
	UTextBlock* TimeRemaining; // 0x560
	UWBP_ThrobberHorizontal_C* WBP_ThrobberHorizontal; // 0x568
	UWBP_ThrobberShield_C* WBP_ThrobberShield; // 0x570
	AKSLobbyCharacter* PurchaseConfirmationModel; // 0x578
	int32_t CurrentSectionIndex; // 0x580
	TArray<UKSStoreSection*> StoreSectionData; // 0x588
	UWBP_StoreSection_C* CurrentStoreSection; // 0x598
	TArray<UWBP_StoreSection_C*> StoreSectionWidgets; // 0x5a0
	float StoreTimerRemaining; // 0x5b0
	float TimeCount; // 0x5b4
};

struct UAkInitBank : UAkAssetBase {
	TArray<FString> AvailableAudioCultures; // 0x58
	FString DefaultLanguage; // 0x68
};

struct ALandscapeMeshProxyActor : AActor {
	ULandscapeMeshProxyComponent* LandscapeMeshProxyComponent; // 0x220
};

struct UKSWeaponAttachmentCosmeticInst : UKSEquipmentCosmeticComponent {
	UDataTable* DefaultAssetDataTable; // 0x138
	int32_t DefaulAssetDataTablePriority; // 0x140
	TSoftObjectPtr<UKSWeaponAttachmentSkinDetails> SkinDetailsPtr; // 0x148
	UKSWeaponAttachment* AttachmentAsset; // 0x180
	FGameplayTag AttachPoint; // 0x188
	UKSWeaponComponent* ParentComponent; // 0x190
	FKSEquipmentId ParentEquipmentId; // 0x198
	UKSWeaponAsset* ParentWeaponAsset; // 0x1a0
	bool bInitialized; // 0x1a8
};

struct USoundfieldSubmix : USoundSubmixWithParentBase {
	FName SoundfieldEncodingFormat; // 0x40
	USoundfieldEncodingSettingsBase* EncodingSettings; // 0x48
	TArray<USoundfieldEffectBase*> SoundfieldEffectChain; // 0x50
	USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x60
};

struct UKSPlayerMod_OnDownOtherEvent : UKSPlayerMod {
	TMap<TSoftClassPtr<UObject>, int32_t> MeleeChargeBonusModePairs; // 0x330
	int32_t MeleeChargeBonusDefault; // 0x380
	TMap<TSoftClassPtr<UObject>, int32_t> HeadshotChargeBonusModePairs; // 0x388
	int32_t HeadshotChargeBonusDefault; // 0x3d8
};

struct UKSProximityComponent : UActorComponent {
	FMulticastInlineDelegate OnProximityInfoUpdated; // 0xb0
	FKSProximityFilter ProximityFilter; // 0xc0
	float MaxTimeBetweenUpdates; // 0xe8
	ECollisionChannel LOSChannel; // 0xec
	TMap<AActor*, FKSActorProximityInfo> ActorProximityInfoMap; // 0xf0
	UPrimitiveComponent* RegisteredShape; // 0x150
	bool bProximityCheckingEnabled; // 0x158
};

struct UMovieSceneSkeletalAnimationTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> AnimationSections; // 0x58
	bool bUseLegacySectionIndexBlend; // 0x68
};

struct UInterpTrackFloatMaterialParam : UInterpTrackFloatBase {
	TArray<UMaterialInterface*> TargetMaterials; // 0x90
	FName ParamName; // 0xa0
};

struct UForceFeedbackEffect : UObject {
	TArray<FForceFeedbackChannelDetails> ChannelDetails; // 0x28
	float Duration; // 0x38
};

struct UTreeView : UListView {
	FDelegate BP_OnGetItemChildren; // 0x390
	FMulticastInlineDelegate BP_OnItemExpansionChanged; // 0x3a0
};

struct AKSDropLocation : AKSMapPoint {
	AKSWayPointSet* WayPointSet; // 0x258
	bool ReverseWayPointSetDirection; // 0x260
	float FlightDistanceModifier; // 0x264
	float FreefallXYDistance; // 0x268
	float FreefallHeight; // 0x26c
};

struct UKSPlayerMod_RocketDash : UKSPlayerMod {
	uint32_t Priority; // 0x330
	float DodgeRollCooldownMultiplier; // 0x334
	float DodgeRollDistanceMultiplier; // 0x338
	float DodgeRollSpeedMultiplier; // 0x33c
	float DodgeRollLockoutMultiplier; // 0x340
	uint32_t MidairDodgeRollLimit; // 0x344
};

struct UNavMovementComponent : UMovementComponent {
	FNavAgentProperties NavAgentProps; // 0xf0
	float FixedPathBrakingDistance; // 0x120
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x124
	char bUseAccelerationForPaths : 1; // 0x124
	char bUseFixedBrakingDistanceForPaths : 1; // 0x124
	FMovementProperties MovementState; // 0x125
	UObject* PathFollowingComp; // 0x128
};

struct UKSJsonData : UObject {
	FName UniqueId; // 0x28
	int32_t AssociatedLootId; // 0x30
	TArray<int32_t> HideIfItemOwned; // 0x38
	TArray<int32_t> ShowIfItemOwned; // 0x48
	bool HideIfOwned; // 0x58
	int32_t MinLevel; // 0x5c
	int32_t MaxLevel; // 0x60
	bool showSteam; // 0x78
	bool showEpic; // 0x79
	bool showPS4; // 0x7a
	bool showPS5; // 0x7b
	bool showXB1; // 0x7c
	bool showXSX; // 0x7d
	bool showNX; // 0x7e
};

struct UWBP_SettingsRadioButtonGroup_C : UKSSettingsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UHorizontalBox* RadioButtonBox; // 0x580
	UWBP_SettingsRadio_C* Settings Radio Button; // 0x588
	TArray<UWBP_SettingsRadio_C*> Radio Buttons; // 0x590
};

struct UMovieSceneLiveLinkSection : UMovieSceneSection {
	FLiveLinkSubjectPreset SubjectPreset; // 0xe0
	TArray<bool> ChannelMask; // 0x118
	TArray<UMovieSceneLiveLinkSubSection*> SubSections; // 0x128
	FName SubjectName; // 0x148
	FLiveLinkFrameData TemplateToPush; // 0x150
	FLiveLinkRefSkeleton RefSkeleton; // 0x1e0
	TArray<FName> CurveNames; // 0x200
	TArray<FMovieSceneFloatChannel> PropertyFloatChannels; // 0x210
};

struct UMeshSimplificationSettings : UDeveloperSettings {
	FName MeshReductionModuleName; // 0x38
};

struct UKSPlayerMod_HardLandAvoid : UKSPlayerMod {
	bool AllowBunnyHopping; // 0x330
};

struct UBTTask_RunBehavior : UBTTaskNode {
	UBehaviorTree* BehaviorAsset; // 0x70
};

struct UInvalidationBox : UContentWidget {
	bool bCanCache; // 0x128
	bool CacheRelativeTransforms; // 0x129
};

struct UInterpTrackMove : UInterpTrack {
	FInterpCurveVector PosTrack; // 0x70
	FInterpCurveVector EulerTrack; // 0x88
	FInterpLookupTrack LookupTrack; // 0xa0
	FName LookAtGroupName; // 0xb0
	float LinCurveTension; // 0xb8
	float AngCurveTension; // 0xbc
	char bUseQuatInterpolation : 1; // 0xc0
	char bShowArrowAtKeys : 1; // 0xc0
	char bDisableMovement : 1; // 0xc0
	char bShowTranslationOnCurveEd : 1; // 0xc0
	char bShowRotationOnCurveEd : 1; // 0xc0
	char bHide3DTrack : 1; // 0xc0
	EInterpTrackMoveRotMode RotMode; // 0xc4
};

struct UParticleModuleEventReceiverSpawn : UParticleModuleEventReceiverBase {
	FRawDistributionFloat SpawnCount; // 0x40
	char bUseParticleTime : 1; // 0x70
	char bUsePSysLocation : 1; // 0x70
	char bInheritVelocity : 1; // 0x70
	FRawDistributionVector InheritVelocityScale; // 0x78
	TArray<UPhysicalMaterial*> PhysicalMaterials; // 0xc0
	char bBanPhysicalMaterials : 1; // 0xd0
};

struct ACameraRig_Crane : AActor {
	float CranePitch; // 0x220
	float CraneYaw; // 0x224
	float CraneArmLength; // 0x228
	bool bLockMountPitch; // 0x22c
	bool bLockMountYaw; // 0x22d
	USceneComponent* TransformComponent; // 0x230
	USceneComponent* CraneYawControl; // 0x238
	USceneComponent* CranePitchControl; // 0x240
	USceneComponent* CraneCameraMount; // 0x248
};

struct UKSRadialSelectionWidgetBase : UKSWidget {
	TArray<FGameplayTag> EmoteSlots; // 0x520
	TArray<FGameplayTag> QuipSlots; // 0x530
	TArray<FGameplayTag> CommunicationSlots; // 0x540
	TArray<FGameplayTag> SpraySlots; // 0x550
	TArray<FName> AdditionalInputsToDisableOnOpen; // 0x560
	TArray<EMercCosmeticSlot> RadialMenuCosmeticSlots; // 0x570
	bool bCycleBetweenMenusEnabled; // 0x580
	ERadialWheelActivationMode RadialWheelActivationMode; // 0x589
};

struct UProxyLODMeshSimplificationSettings : UDeveloperSettings {
	FName ProxyLODMeshReductionModuleName; // 0x38
};

struct UAIDataProvider_Random : UAIDataProvider_QueryParams {
	float Min; // 0x40
	float Max; // 0x44
	char bInteger : 1; // 0x48
};

struct UFieldSystemMetaDataProcessingResolution : UFieldSystemMetaData {
	EFieldResolutionType ResolutionType; // 0xb0
};

struct UWBP_RoundRecap_C : UUserWidget {
	UHorizontalBox* RoundResultsContainer; // 0x238
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry; // 0x240
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_2; // 0x248
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_200; // 0x250
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_335; // 0x258
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_432; // 0x260
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_559; // 0x268
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_896; // 0x270
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_1052; // 0x278
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_1226; // 0x280
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_1413; // 0x288
	UWBP_RoundRecap_Entry_C* WBP_RoundRecap_Entry_1592; // 0x290
};

struct UKSBTD_CharacterState : UBTDecorator_BlackboardBase {
	FKSCharacterStateFilter CharacterStateFilter; // 0x90
};

struct UKSProjectileTargetingModule : UKSWeaponTargetingModule {
	TArray<FKSProjectileTargetingStateValidator> StateValidators; // 0x128
	float ProjectileSimFrequency; // 0x138
	float MaxSimTime; // 0x13c
	float InitialStrideTime; // 0x140
	UStaticMesh* ArcTemplate; // 0x148
	TArray<UMaterialInterface*> ArcSegmentMaterials; // 0x150
	FName FirstSegmentScalarParameterName; // 0x160
	FName ArcColorParameterName; // 0x168
	FName ArcCookParameterName; // 0x170
	FName PostProcessStopLocationParameterName; // 0x178
	FName PostProcessRadiusParameterName; // 0x180
	bool bPostProcessParameterIndexed; // 0x188
	EKSProjectileTargetingHitComponentType ImpactComponentType; // 0x189
	EKSProjectileTargetingHitComponentType BounceComponentType; // 0x18a
	FVector ImpactComponentSize; // 0x18c
	FVector BounceComponentSize; // 0x198
	UMaterialInterface* ImpactComponentMaterial; // 0x1a8
	UMaterialInterface* BounceComponentMaterial; // 0x1b0
	FName ImpactColorParameterName; // 0x1b8
	FName ImpactCookParameterName; // 0x1c0
	FName BounceColorParameterName; // 0x1c8
	FName BounceCookParameterName; // 0x1d0
	UStaticMesh* ImpactMesh; // 0x1d8
	UStaticMesh* BounceMesh; // 0x1e0
	ESplineMeshAxis SplineMeshAxisType; // 0x1e8
	FVector2D ArcSegmentScale; // 0x1ec
	int32_t BounceCount; // 0x1f4
	int32_t MaxSegmentsPerBounceArc; // 0x1f8
	UKSTargetingDetailsWidget* TargetingDetailsWidgetClass; // 0x200
	TArray<USplineMeshComponent*> ArcComponent; // 0x208
	UMaterialInstanceDynamic* ImpactMaterialInstance; // 0x218
	UMaterialInstanceDynamic* BounceMaterialInstance; // 0x220
	TArray<UMaterialInstanceDynamic*> ArcSegmentMaterialInstances; // 0x228
	USceneComponent* ImpactComponent; // 0x238
	TArray<USceneComponent*> BounceComponents; // 0x240
	UWidgetComponent* TargetingDetailsWidgetComponent; // 0x250
	UKSTargetingDetailsWidget* TargetingDetailsWidget; // 0x258
	bool bTargetingVisualsInitialized; // 0x260
	UKSWeaponAsset_WithProjectile* ProjectileAsset; // 0x268
	AKSProjectile* ProjectileCDO; // 0x270
	FPredictProjectilePathResult CachedPredictedPathResults; // 0x288
	float PredictedGrenadePathArcLength; // 0x340
};

struct AKSWeapon_GrenadeThrow : AKSWeapon_Projectile {
	FMulticastInlineDelegate OnGrenadeThrown; // 0x820
};

struct UAkMarkerCallbackInfo : UAkEventCallbackInfo {
	int32_t Identifier; // 0x38
	int32_t Position; // 0x3c
	FString Label; // 0x40
};

struct UWBP_PanelDefault_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* PanelBG; // 0x240
	UNamedSlot* PanelContent; // 0x248
	FLinearColor PanelColor; // 0x250
	FMargin ContentPadding; // 0x260
};

struct UStereoLayerComponent : USceneComponent {
	char bLiveTexture : 1; // 0x208
	char bSupportsDepth : 1; // 0x208
	char bNoAlphaChannel : 1; // 0x208
	UTexture* Texture; // 0x210
	UTexture* LeftTexture; // 0x218
	char bQuadPreserveTextureRatio : 1; // 0x220
	FVector2D QuadSize; // 0x224
	FBox2D UVRect; // 0x22c
	float CylinderRadius; // 0x240
	float CylinderOverlayArc; // 0x244
	int32_t CylinderHeight; // 0x248
	FEquirectProps EquirectProps; // 0x24c
	EStereoLayerType StereoLayerType; // 0x294
	EStereoLayerShape StereoLayerShape; // 0x295
	UStereoLayerShape* Shape; // 0x298
	int32_t Priority; // 0x2a0
};

struct UMasterMelee_WeaponComponent_C : UMaster_WeaponComponent_C {
	UAnimMontage* WindupMontage; // 0x1258
	UAnimMontage* ThrowMontage; // 0x1260
	FName WindupSection; // 0x1268
	FName ThrowSection; // 0x1270
	UAkAudioEvent* WindupSound; // 0x1278
	UAkAudioEvent* ThrowSound; // 0x1280
	UAnimMontage* Cached Player 3P Fire Montage; // 0x1288
	bool bHasBeenThrown; // 0x1290
	TArray<EKSMovementDirection> FireSectionLowerBodyFacings; // 0x1298
	UKSVOComponent* MainCharacterVOComponent; // 0x12a8
	FKSVoicelineEvent VOMeleeAttack; // 0x12b0
	bool IsLungingSFX_C; // 0x12e8
	float NoLungeRange; // 0x12ec
	bool CallFunc_IsLungingMontageActive_Lunging_Active; // 0x12f0
	FFullFireRepData K2Node_Event_Data; // 0x12f8
	bool K2Node_Event_PlayNoChainFireMontage; // 0x1360
	float K2Node_Event_DeltaSeconds; // 0x1364
	APlayerController* K2Node_DynamicCast_AsPlayer_Controller; // 0x1368
	bool K2Node_DynamicCast_bSuccess; // 0x1370
	bool K2Node_SwitchEnum_CmpSuccess; // 0x1371
	EWeaponStateNew K2Node_Event_OldState; // 0x1372
	EWeaponStateNew K2Node_Event_NewState; // 0x1373
	bool K2Node_SwitchEnum_CmpSuccess_2; // 0x1374
	bool K2Node_SwitchEnum_CmpSuccess_3; // 0x1375
	int32_t CallFunc_GetAnimAimOffset_Priority; // 0x1378
	int32_t CallFunc_GetAnimMontage_Priority; // 0x137c
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst; // 0x1380
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_2; // 0x1388
	FDelegate Temp_delegate_Variable; // 0x1390
	TArray<FAkExternalSourceInfo> Temp_struct_Variable; // 0x13a0
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_3; // 0x13b0
	bool K2Node_SwitchEnum_CmpSuccess_4; // 0x13b8
	FKSActionRestrictor K2Node_MakeStruct_KSActionRestrictor; // 0x13b9
	FDelegate Temp_delegate_Variable_2; // 0x13c4
	FKSActionRestrictor K2Node_MakeStruct_KSActionRestrictor_2; // 0x13d4
	bool Temp_bool_Has_Been_Initd_Variable; // 0x13dc
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_4; // 0x13e0
	int32_t CallFunc_GetAudioEvent_Priority; // 0x13e8
	int32_t CallFunc_GetAudioEvent_Priority_2; // 0x13ec
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_5; // 0x13f0
	int32_t CallFunc_GetAudioEvent_Priority_3; // 0x13f8
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_6; // 0x1400
	int32_t CallFunc_GetAnimMontage_Priority_2; // 0x1408
	bool Temp_bool_IsClosed_Variable; // 0x140c
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_2; // 0x1410
	bool K2Node_CustomEvent_IsLunging; // 0x1420
	FDelegate K2Node_CreateDelegate_OutputDelegate; // 0x1424
	FName CallFunc_Get_Character_3p_Fire_Section_3p_Fire_Section; // 0x1434
	UAnimMontage* CallFunc_Get_Player_3P_Lunge_Montage_Montage; // 0x1440
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_7; // 0x1448
	UAnimMontage* CallFunc_GetMeleeStillMontage_Montage; // 0x1450
	UAnimMontage* CallFunc_GetMeleeStillMontage_Montage_2; // 0x1458
	UKSVOComponent* K2Node_DynamicCast_AsMain_Character_VOComponent; // 0x1460
	bool K2Node_DynamicCast_bSuccess_2; // 0x1468
	UKSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst_8; // 0x1470
	int32_t CallFunc_GetAudioEvent_Priority_4; // 0x1478
	UKSWeaponAnimInstance* K2Node_DynamicCast_AsMaster_Melee_ABP; // 0x1480
	bool K2Node_DynamicCast_bSuccess_3; // 0x1488
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_3; // 0x1490
	int32_t CallFunc_GetAudioEvent_Priority_5; // 0x14a0
	int32_t CallFunc_GetAudioEvent_Priority_6; // 0x14a4
	FFullFireRepData K2Node_Event_Fire_Data; // 0x14a8
	FDelegate K2Node_CreateDelegate_OutputDelegate_2; // 0x1510
	UKSWeaponAsset_Melee* K2Node_DynamicCast_AsKSWeapon_Asset_Melee; // 0x1520
	bool K2Node_DynamicCast_bSuccess_4; // 0x1528
	bool Temp_bool_Has_Been_Initd_Variable_2; // 0x1529
	TArray<AActor*> Temp_object_Variable; // 0x1530
	FDelegate Temp_delegate_Variable_3; // 0x1540
	FDelegate Temp_delegate_Variable_4; // 0x1550
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_4; // 0x1560
	FDelegate Temp_delegate_Variable_5; // 0x1570
	FDelegate K2Node_CreateDelegate_OutputDelegate_3; // 0x1580
	bool Temp_bool_IsClosed_Variable_2; // 0x1590
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_5; // 0x1598
	TArray<FAkExternalSourceInfo> Temp_struct_Variable_6; // 0x15a8
	FDelegate Temp_delegate_Variable_6; // 0x15b8
};

struct UParticleSystemReplay : UObject {
	int32_t ClipIDNumber; // 0x28
};

struct UParticleModuleTypeDataAnimTrail : UParticleModuleTypeDataBase {
	char bDeadTrailsOnDeactivate : 1; // 0x30
	char bEnablePreviousTangentRecalculation : 1; // 0x30
	char bTangentRecalculationEveryFrame : 1; // 0x30
	float TilingDistance; // 0x34
	float DistanceTessellationStepSize; // 0x38
	float TangentTessellationStepSize; // 0x3c
	float WidthTessellationStepSize; // 0x40
};

struct UKSPlayerMod_Sight : UKSPlayerMod {
	bool SeeFootprints; // 0x330
};

struct UKSPerkTreeBase : UKSWidget {
	FMulticastInlineDelegate OnPerkHovered; // 0x520
	FMulticastInlineDelegate OnPerkSelected; // 0x530
	FMulticastInlineDelegate OnPerkUnlockRequest; // 0x540
	UWidget* HoverTarget; // 0x550
};

struct UPlatformInterfaceBase : UObject {
	TArray<FDelegateArray> AllDelegates; // 0x28
};

struct UMonoWaveTableSynthPreset : UObject {
	FString PresetName; // 0x28
	char bLockKeyframesToGridBool : 1; // 0x38
	int32_t LockKeyframesToGrid; // 0x3c
	int32_t WaveTableResolution; // 0x40
	TArray<FRuntimeFloatCurve> WaveTable; // 0x48
	char bNormalizeWaveTables : 1; // 0x58
};

struct UInterpTrackInstFloatProp : UInterpTrackInstProperty {
	float ResetFloat; // 0x60
};

struct UWBP_TopNavBar_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWBP_TopNavButton_C* BattlePassNav; // 0x528
	UImage* DisableOverlay; // 0x530
	UWBP_TopNavButton_C* EventNav; // 0x538
	UWidgetSwitcher* GamepadLeftBumperSwitcher; // 0x540
	UWidgetSwitcher* GamepadRightBumperSwitcher; // 0x548
	UWBP_TopNavButton_C* HomeNav; // 0x550
	UWBP_TopNavButton_C* LoadoutNav; // 0x558
	UImage* logo; // 0x560
	USizeBox* LogoContainer; // 0x568
	UHorizontalBox* NavigationContainer; // 0x570
	UWBP_TopNavButton_C* ProfileNav; // 0x578
	UWBP_KeyCallout_C* RightBumperIcon; // 0x580
	UWBP_TopNavButton_C* StoreNav; // 0x588
	UOverlay* TopBarContainer; // 0x590
	UWBP_TopNavButton_C* WeaponsNav; // 0x598
	bool IsDisable; // 0x5a0
	FName HideAnimName; // 0x5a4
	FName ShowAnimName; // 0x5ac
	FName ArmoryTabSeen; // 0x5b4
	FName CurrentEventSeen; // 0x5bc
};

struct UAIPerceptionSystem : UAISubsystem {
	TArray<UAISense*> Senses; // 0x88
	float PerceptionAgingRate; // 0x98
};

struct UAkSwitchInitializationSettings : UObject {
	FAkCommonInitializationSettingsWithSampleRate CommonSettings; // 0x28
	FAkCommunicationSettingsWithCommSelection CommunicationSettings; // 0x90
	FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings; // 0xb8
};

struct UWBP_CheckboxButton_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UButton* CheckboxButtonWrapper; // 0x528
	UImage* HoverBG; // 0x530
	UImage* HoverFill; // 0x538
	USizeBox* SizeBox_2; // 0x540
	UTextBlock* Text; // 0x548
	UWBP_Checkbox02_C* WBP_Checkbox02; // 0x550
	FText LabelText; // 0x558
	float Width; // 0x570
	FMulticastInlineDelegate OnCheckChanged; // 0x578
};

struct UParticleModuleParameterDynamic : UParticleModuleParameterBase {
	TArray<FEmitterDynamicParameter> DynamicParams; // 0x30
	int32_t UpdateFlags; // 0x40
	char bUsesVelocity : 1; // 0x44
};

struct UMaterialExpressionCosine : UMaterialExpression {
	FExpressionInput Input; // 0x40
	float Period; // 0x54
};

struct UKSInteractionBlockerManager : UActorComponent {
	bool bIsInteractionBlocked; // 0xc0
};

struct UKSPlayerChallengesManager : UKSActivityManagerBase {
	FMulticastInlineDelegate OnPlayerChallengesReady; // 0x230
	FMulticastInlineDelegate OnPlayerChallengesChanged; // 0x240
	FMulticastInlineDelegate OnPlayerDailyContractTimerChanged; // 0x250
	bool ChallengesReady; // 0x260
	FMulticastInlineDelegate TestPlayerChallengeComplete; // 0x268
	FMulticastInlineDelegate OnLoginRewardClaimed; // 0x288
};

struct UCheckBox : UContentWidget {
	ECheckBoxState CheckedState; // 0x128
	FDelegate CheckedStateDelegate; // 0x12c
	FCheckBoxStyle WidgetStyle; // 0x140
	USlateWidgetStyleAsset* Style; // 0x6c0
	USlateBrushAsset* UncheckedImage; // 0x6c8
	USlateBrushAsset* UncheckedHoveredImage; // 0x6d0
	USlateBrushAsset* UncheckedPressedImage; // 0x6d8
	USlateBrushAsset* CheckedImage; // 0x6e0
	USlateBrushAsset* CheckedHoveredImage; // 0x6e8
	USlateBrushAsset* CheckedPressedImage; // 0x6f0
	USlateBrushAsset* UndeterminedImage; // 0x6f8
	USlateBrushAsset* UndeterminedHoveredImage; // 0x700
	USlateBrushAsset* UndeterminedPressedImage; // 0x708
	EHorizontalAlignment HorizontalAlignment; // 0x710
	FMargin Padding; // 0x714
	FSlateColor BorderBackgroundColor; // 0x728
	bool IsFocusable; // 0x750
	FMulticastInlineDelegate OnCheckStateChanged; // 0x758
};

struct AProceduralFoliageVolume : AVolume {
	UProceduralFoliageComponent* ProceduralComponent; // 0x258
};

struct AKSCinematicCharacterManager : AKSJobSelectPreviewActor {
	AKSCinematicSequenceManager* CinematicSequenceManager; // 0x428
	EKSCinematicCharacterType CinematicCharacterType; // 0x430
	bool bRequireCharacterToBeVisibleToCountAsLoaded; // 0x431
};

struct UParticleModuleCollision : UParticleModuleCollisionBase {
	FRawDistributionVector DampingFactor; // 0x30
	FRawDistributionVector DampingFactorRotation; // 0x78
	FRawDistributionFloat MaxCollisions; // 0xc0
	EParticleCollisionComplete CollisionCompletionOption; // 0xf0
	TArray<EObjectTypeQuery> CollisionTypes; // 0xf8
	char bApplyPhysics : 1; // 0x110
	char bIgnoreTriggerVolumes : 1; // 0x110
	FRawDistributionFloat ParticleMass; // 0x118
	float DirScalar; // 0x148
	char bPawnsDoNotDecrementCount : 1; // 0x14c
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x14c
	float VerticalFudgeFactor; // 0x150
	FRawDistributionFloat DelayAmount; // 0x158
	char bDropDetail : 1; // 0x188
	char bCollideOnlyIfVisible : 1; // 0x188
	char bIgnoreSourceActor : 1; // 0x188
	float MaxCollisionDistance; // 0x18c
};

struct UWBP_panel_bevel_C : UUserWidget {
	UImage* Image_72; // 0x238
	UImage* Image_148; // 0x240
	UImage* Image_150; // 0x248
};

struct UStaticMeshPoolComponent : UBasePoolComponent {
	TArray<UStaticMeshComponent*> UnusedComponentsArray; // 0xd8
	TSet<UStaticMeshComponent*> UsedComponentsSet; // 0xe8
	UStaticMeshComponent* PeekedStaticMeshComponent; // 0x138
	UStaticMeshComponent* PooledStaticMeshComponentClass; // 0x140
};

struct UClothingAssetCommon : UClothingAssetBase {
	UPhysicsAsset* PhysicsAsset; // 0x48
	TMap<FName, UClothConfigBase*> ClothConfigs; // 0x50
	UClothConfigBase* ClothSharedSimConfig; // 0xa0
	UClothConfigBase* ClothSimConfig; // 0xa8
	UClothConfigBase* ChaosClothSimConfig; // 0xb0
	TArray<UClothLODDataCommon_Legacy*> ClothLODData; // 0xb8
	TArray<FClothLODDataCommon> LODData; // 0xc8
	TArray<int32_t> LodMap; // 0xd8
	TArray<FName> UsedBoneNames; // 0xe8
	TArray<int32_t> UsedBoneIndices; // 0xf8
	int32_t ReferenceBoneIndex; // 0x108
	UClothingAssetCustomData* CustomData; // 0x110
	FClothConfig_Legacy ClothConfig; // 0x118
};

struct UKSSettingsSaveGame : USaveGame {
	TMap<FName, FString> SavedSettingsConfig; // 0x28
	FString SavedDisplayLanguage; // 0x78
	int32_t LastJoinedQueuePrimaryId; // 0x88
	TSet<FName> SavedLocalActions; // 0x90
	int32_t SavedSelectedRegion; // 0xe0
	int32_t LastWhatsNewVersion; // 0xe4
	TArray<int32_t> SavedTransientAcquisitionIds; // 0xe8
	TSet<FName> SavedViewedNewsPanelIds; // 0xf8
	int32_t SavedChallengeVersionId; // 0x148
	TSet<int32_t> SavedViewedChallengeIds; // 0x150
	TSet<int32_t> SavedRecentlySeenStoreItemLootIds; // 0x1a0
};

struct UWBP_BattlePassAcquisitionScreen_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowUpsellAnim; // 0x528
	UWidgetAnimation* Outro; // 0x530
	UWidgetAnimation* Intro; // 0x538
	UCanvasPanel* AcquisitionCanvas; // 0x540
	UCanvasPanel* AnimCanvas; // 0x548
	UImage* Image_221; // 0x550
	UWBP_ItemPreviewStack_C* ItemPreviewStack; // 0x558
	UImage* ReflectedgradientShade; // 0x560
	UWBP_BattlePassAcquisitionTitle_C* WBP_BattlePassAcquisitionTitle_C_1; // 0x568
	UWBP_BattlepassTransitionBanner_C* WBP_BattlepassTransitionBanner; // 0x570
	UWBP_BattlePassUpsellPanel_C* WBP_BattlePassUpsellPanel; // 0x578
	UWBP_ItemInfoContainer_Description_C* WBP_ItemInfoContainer_Description; // 0x580
	UWBP_RewardsTrack_C* WBP_RewardsTrack; // 0x588
	UKSActivityInstance* ActivityInstance; // 0x590
	UWBP_RewardListEntry_C* SelectedEntry; // 0x598
	FMulticastInlineDelegate PlayPremiumTransition; // 0x5a0
	UPUMG_StoreItem* SelectedData; // 0x5b0
	bool bPlayinTransitionAnim; // 0x5b8
};

struct UWBP_CosmeticSlotNavTab_C : UWBP_subscreen_nav_tab_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x678
	EMercCosmeticSlot CosmeticSlot; // 0x680
};

struct UNavigationSystemConfig : UObject {
	FSoftClassPath NavigationSystemClass; // 0x28
	FNavAgentSelector SupportedAgentsMask; // 0x40
	FName DefaultAgentName; // 0x44
	char bIsOverriden : 1; // 0x4c
};

struct USourceEffectWaveShaperPreset : USoundEffectSourcePreset {
	FSourceEffectWaveShaperSettings Settings; // 0x70
};

struct UKSPlayerMod_PilotOnActivation : UKSPlayerMod_Activated {
	AKSVehicleBase* Vehicle; // 0x3b8
	bool bAppliesCustomMaxHealth; // 0x3c0
	float CustomMaxHealthValue; // 0x3c4
	FVector SpawnPositionOffset; // 0x3c8
	bool bCanActivateInAir; // 0x3d4
};

struct UWBP_RadialMenuEntry_Divider_C : UUserWidget {
	UImage* Image_114; // 0x238
};

struct UWBP_EventBuyThroughScreen_C : UKSEventBuyThroughScreenBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Anim_OnShown; // 0x528
	UWBP_KSCosmeticItemDisplay_C* BundleItem0; // 0x530
	UWBP_KSCosmeticItemDisplay_C* BundleItem1; // 0x538
	UWBP_KSCosmeticItemDisplay_C* BundleItem2; // 0x540
	UWBP_KSCosmeticItemDisplay_C* BundleItem3; // 0x548
	UWBP_KSCosmeticItemDisplay_C* BundleItem4; // 0x550
	UVerticalBox* BundleItemsWrapper; // 0x558
	UWBP_CurrencySummary_C* CurrencySummary; // 0x560
	UImage* FFB; // 0x568
	UKSAsyncImage* GamepadScrollLeft; // 0x570
	UKSAsyncImage* GamepadScrollRight; // 0x578
	UImage* Image_221; // 0x580
	UWBP_ItemPreviewStack_C* ItemPreviewStack; // 0x588
	UOverlay* RewardDetailsContainer; // 0x590
	UHorizontalBox* ScrollLeftIndicator; // 0x598
	UHorizontalBox* ScrollRightIndicator; // 0x5a0
	UTextBlock* TimeRemaining; // 0x5a8
	UWBP_ActiveMissionPanel_C* WBP_ActiveMissionPanel; // 0x5b0
	UWBP_EventBundleItem_C* WBP_EventBundleItem_1; // 0x5b8
	UWBP_EventBundleItem_C* WBP_EventBundleItem_2; // 0x5c0
	UWBP_EventBundleItem_C* WBP_EventBundleItem_3; // 0x5c8
	UWBP_EventBundleItem_C* WBP_EventBundleItem_4; // 0x5d0
	UWBP_EventBundleItem_C* WBP_EventBundleItem_5; // 0x5d8
	UWBP_EventBundleItem_C* WBP_EventBundleItem_6; // 0x5e0
	UWBP_EventBundleItem_C* WBP_EventBundleItem_7; // 0x5e8
	UWBP_EventBundleItem_C* WBP_EventBundleItem_8; // 0x5f0
	UWBP_EventGrandPrizeItem_C* WBP_EventBundleItem_GrandPrize; // 0x5f8
	UWBP_Header1_C* WBP_Header1; // 0x600
	UWBP_ItemInfoContainer_Description_C* WBP_ItemInfoContainer_Description; // 0x608
	TArray<UWBP_KSCosmeticItemDisplay_C*> BundlePreviewButtons; // 0x610
	TArray<UWBP_EventBundleItem_C*> BundleButtons; // 0x620
	UWBP_EventBundleItem_C* SelectedBundle; // 0x630
	int32_t BundlePreviewItemIndex; // 0x638
	TArray<UPUMG_StoreItem*> BundlePreviewItems; // 0x640
	TArray<UPUMG_StoreItem*> EventBundleItems; // 0x650
};

struct UMaterialExpressionShadowReplace : UMaterialExpression {
	FExpressionInput Default; // 0x40
	FExpressionInput Shadow; // 0x54
};

struct UMaterialExpressionSceneColor : UMaterialExpression {
	EMaterialSceneAttributeInputMode InputMode; // 0x40
	FExpressionInput Input; // 0x44
	FExpressionInput OffsetFraction; // 0x58
	FVector2D ConstInput; // 0x6c
};

struct UWBP_InWorld_ReticleComponents_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UInvalidationBox* InvalidationBox_1; // 0x240
	UWBP_AbilityDurationBar_C* WBP_AbilityDurationBar; // 0x248
	UWBP_AmmoWrapper_C* WBP_AmmoWrapper; // 0x250
	TArray<UKSModInst_Activated*> ModInstances; // 0x258
};

struct UPUMG_StoreItem : UObject {
	FMulticastInlineDelegate OnPriceSetDirty; // 0x28
	TWeakObjectPtr<UPUMG_StoreItemHelper> pItemHelper; // 0x48
	TSoftObjectPtr<UPlatformInventoryItem> InventoryItem; // 0x50
	UPUMG_PortalOffer* PortalOffer; // 0x78
};

struct UDataTable : UObject {
	UScriptStruct* RowStruct; // 0x28
	char bStripFromClientBuilds : 1; // 0x80
	char bIgnoreExtraFields : 1; // 0x80
	char bIgnoreMissingFields : 1; // 0x80
	FString ImportKeyField; // 0x88
};

struct UMovieSceneNiagaraSystemSpawnSection : UMovieSceneSection {
	ENiagaraSystemSpawnSectionStartBehavior SectionStartBehavior; // 0xe0
	ENiagaraSystemSpawnSectionEvaluateBehavior SectionEvaluateBehavior; // 0xe4
	ENiagaraSystemSpawnSectionEndBehavior SectionEndBehavior; // 0xe8
	ENiagaraAgeUpdateMode AgeUpdateMode; // 0xec
};

struct UGeometryCache : UObject {
	TArray<UMaterialInterface*> Materials; // 0x30
	TArray<UGeometryCacheTrack*> Tracks; // 0x40
	int32_t StartFrame; // 0x60
	int32_t EndFrame; // 0x64
};

struct AKSImpactEffect : AActor {
	UParticleSystem* m_DefaultFX; // 0x220
	FHitResult m_SurfaceHit; // 0x228
	USceneComponent* m_pScene; // 0x2b0
};

struct UProceduralFoliageComponent : UActorComponent {
	UProceduralFoliageSpawner* FoliageSpawner; // 0xb0
	float TileOverlap; // 0xb8
	AVolume* SpawningVolume; // 0xc0
	FGuid ProceduralGuid; // 0xc8
};

struct UEditableGameplayTagQuery : UObject {
	FString UserDescription; // 0x28
	UEditableGameplayTagQueryExpression* RootExpression; // 0x48
	FGameplayTagQuery TagQueryExportText_Helper; // 0x50
};

struct UParticleModuleLight_Seeded : UParticleModuleLight {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x120
};

struct UInheritableComponentHandler : UObject {
	TArray<FComponentOverrideRecord> Records; // 0x28
	TArray<UActorComponent*> UnnecessaryComponents; // 0x38
};

struct UModularSynthPresetBank : UObject {
	TArray<FModularSynthPresetBankEntry> Presets; // 0x28
};

struct UMovieSceneSubSection : UMovieSceneSection {
	FMovieSceneSectionParameters Parameters; // 0xe0
	float StartOffset; // 0x104
	float TimeScale; // 0x108
	float PrerollTime; // 0x10c
	UMovieSceneSequence* SubSequence; // 0x110
	LazyObjectProperty ActorToRecord; // 0x118
	FString TargetSequenceName; // 0x138
	FDirectoryPath TargetPathToRecordTo; // 0x148
};

struct UWBP_RadialSelect_C : UKSRadialSelectionWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x5c0
	UWidgetAnimation* WheelCycle_Left; // 0x5c8
	UWidgetAnimation* WheelCycle_Generic; // 0x5d0
	UWidgetAnimation* WheelCycle_Right; // 0x5d8
	UWidgetAnimation* Show; // 0x5e0
	UTextBlock* ActiveRadialMenuText; // 0x5e8
	UImage* BGGradientLeft; // 0x5f0
	UImage* BGGradientRight; // 0x5f8
	UImage* BGImage; // 0x600
	UBackgroundBlur* BlurVolume; // 0x608
	UImage* CursorImg; // 0x610
	UWBP_InputCallout_C* CycleLeftInputCallout; // 0x618
	UHorizontalBox* CycleLeftPanel; // 0x620
	UOverlay* CycleLeftPanelWrapper; // 0x628
	UTextBlock* CycleLeftText; // 0x630
	UWBP_InputCallout_C* CycleRightInputCallout; // 0x638
	UHorizontalBox* CycleRightPanel; // 0x640
	UOverlay* CycleRightPanelWrapper; // 0x648
	UTextBlock* CycleRightText; // 0x650
	UCanvasPanel* DividerContainer; // 0x658
	UCanvasPanel* IconContainer; // 0x660
	UImage* Image; // 0x668
	UImage* Image_2; // 0x670
	UImage* Image_129; // 0x678
	UImage* Image_294; // 0x680
	UTextBlock* RadialItemNameText; // 0x688
	USizeBox* RadialItemNameWrapper; // 0x690
	UCanvasPanel* SelectorGroup; // 0x698
	UHorizontalBox* SelectPrompt; // 0x6a0
	UWBP_InputCallout_C* SelectPromptCallout; // 0x6a8
	UWBP_InputCallout_C* ToggleBackInputCallout; // 0x6b0
	UHorizontalBox* ToggleBackPrompt; // 0x6b8
	UBorder* TogglePromptContainer; // 0x6c0
	UWBP_RadialMenuEntry_C* WBP_RadialMenuEntry; // 0x6c8
	UWBP_RadialMenuEntry_C* WBP_RadialMenuEntry_2; // 0x6d0
	UWBP_RadialMenuEntry_Divider_C* WBP_RadialMenuEntry_Divider; // 0x6d8
	UWBP_RadialMenuHighlight_C* WBP_RadialMenuHighlight; // 0x6e0
	UImage* WheelBg; // 0x6e8
	TArray<EMercCosmeticSlot> VisibleTextCosmeticSlots; // 0x6f0
	bool ActivatedItemSelected; // 0x700
	UAkAudioEvent* CycleMenusSFX; // 0x708
	UAkAudioEvent* HoverOptionsSFX; // 0x710
	UAkAudioEvent* OpenMenusSFX; // 0x718
	UAkAudioEvent* CloseMenusSFX; // 0x720
	UWBP_InputCallout_C* HoldConfirmInputCallout; // 0x728
	UAkAudioEvent* HoverOptionsRumbleSFX; // 0x730
	UDataTable* ContextualPingTypesDT; // 0x738
	UDataTable* ContextualPingMessagesDT; // 0x740
};

struct USafeZone : UContentWidget {
	bool PadLeft; // 0x128
	bool PadRight; // 0x129
	bool PadTop; // 0x12a
	bool PadBottom; // 0x12b
};

struct UMovieSceneActorReferenceSection : UMovieSceneSection {
	FMovieSceneActorReferenceData ActorReferenceData; // 0xe0
	FIntegralCurve ActorGuidIndexCurve; // 0x190
	TArray<FString> ActorGuidStrings; // 0x210
};

struct UNiagaraDataInterfaceVectorField : UNiagaraDataInterface {
	UVectorField* Field; // 0x30
	bool bTileX; // 0x38
	bool bTileY; // 0x39
	bool bTileZ; // 0x3a
};

struct UKSVelocityCameraShake : UKSCharacterCameraShake {
	float VelocityForMinShaking; // 0x178
	float VelocityForMaxShaking; // 0x17c
};

struct UKSDamageTypeEMP : UKSDamageTypeBase {
	float EMPDuration; // 0x138
};

struct UParticleModuleSizeScaleBySpeed : UParticleModuleSizeBase {
	FVector2D SpeedScale; // 0x30
	FVector2D MaxScale; // 0x38
};

struct UMaterialExpressionTextureSampleParameterSubUV : UMaterialExpressionTextureSampleParameter2D {
	char bBlend : 1; // 0xf0
};

struct UKSPlayerModInst_WeaponAttachment : UKSPlayerModInstance {
	TArray<UKSWeaponAttachment*> AttachmentsToGive; // 0x1b8
	TArray<EItemSourceType> ItemSourcesThatAllowAttachmentGiving; // 0x1c8
	TArray<EItemSourceType> ItemSourcesThatForbidAttachmentGiving; // 0x1d8
	bool bAttachmentsPersistOnDrop; // 0x1e8
	TArray<TWeakObjectPtr<UKSWeaponAttachmentInstance>> GivenAttachmentInstances; // 0x1f0
};

struct UKSPunishmentConfig : UDataAsset {
	TArray<FPunishmentConfigEntry> GoodBehaviorConfig; // 0x30
	TArray<FBadBehaviorConfigEntry> BadBehaviorConfig; // 0x40
	TArray<FEndMatchPunishConfigEntry> EndMatchPunishConfig; // 0x50
};

struct UButtonSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct AKSShield : AActor {
	FMulticastInlineDelegate OnShieldDamagedDel; // 0x220
	bool bShieldEnabled; // 0x248
	float Health; // 0x24c
};

struct UKSUISessionManager : UObject {
	bool bAchievementIntegrationEnabled; // 0xbb
	bool bHasInitialInventory; // 0xbc
	int32_t DivertFromQueueId; // 0xc0
	int32_t DivertToQueueId; // 0xc4
	EQueueDivertType QueueDivertType; // 0xc8
	float ShelteredMMAttemptTimeout; // 0xcc
	float ShelteredMMLevelLimit; // 0xd0
	int32_t ForcedBotMatchLimit; // 0xd4
	int32_t MercyMatchLossesRequired; // 0xd8
	bool bHasReceivedPlayerEmail; // 0xdc
	bool bEmailCallWasSuccess; // 0xdd
	FString PlayerEmail; // 0xe0
};

struct UKSActivityRequirement_Map : UKSActivityRequirement {
	FString RequiredMap; // 0x30
};

struct USocialPrivateMessageChannel : USocialChatChannel {
	USocialUser* TargetUser; // 0xe8
};

struct UKSViewedPawnInventoryWidget : UKSPawnInventoryWidget {
	FPlayerInventorySlot ActiveInventoryItem; // 0x5b0
};

struct UKSBTTask_RunBehaviorForTarget : UBTTask_RunBehavior {
	TArray<FBlackboardKeySelector> SourceKeyVector; // 0x78
	TArray<FBlackboardKeySelector> TargetKeyVector; // 0x88
	TArray<float> SourceFloatVector; // 0x98
	TArray<FBlackboardKeySelector> TargetFloatKeyVector; // 0xa8
	TArray<bool> TempBools; // 0xb8
	TArray<UObject*> TempClasses; // 0xc8
	TArray<char> TempEnums; // 0xd8
	TArray<float> TempFloats; // 0xe8
	TArray<int32_t> TempInts; // 0xf8
	TArray<FName> TempNames; // 0x108
	TArray<char> TempNativeEnums; // 0x118
	TArray<UObject*> TempObjects; // 0x128
	TArray<FRotator> TempRotators; // 0x138
	TArray<FString> TempStrings; // 0x148
	TArray<FVector> TempVectors; // 0x158
};

struct UEnvQueryGenerator_BlueprintBase : UEnvQueryGenerator {
	FText GeneratorsActionDescription; // 0x50
	UEnvQueryContext* Context; // 0x68
	UEnvQueryItemType* GeneratedItemType; // 0x70
};

struct UCharacterHeatSourceComponent_C : UKSHeatSourceComponent {
	UParticleSystem* ThermalVisionExtraParticlesPS; // 0x100
	UParticleSystemComponent* ThermalVisionExtraParticlesComp; // 0x108
	EModViewModeState K2Node_Event_NewState; // 0x110
	bool K2Node_SwitchEnum_CmpSuccess; // 0x111
	EEndPlayReason K2Node_Event_EndPlayReason; // 0x112
	AKSCharacterBase* K2Node_DynamicCast_AsKSCharacter_Base; // 0x118
	bool K2Node_DynamicCast_bSuccess; // 0x120
	UKSHeatSourceComponent* K2Node_CustomEvent_HeatSource; // 0x128
	float K2Node_CustomEvent_NewTemperature; // 0x130
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x138
	bool K2Node_DynamicCast_bSuccess_2; // 0x140
	FDelegate K2Node_CreateDelegate_OutputDelegate; // 0x144
	int32_t CallFunc_GetFloat_Priority; // 0x154
	int32_t CallFunc_GetParticleSystem_Priority; // 0x158
};

struct UWBP_EventRulesPopup_C : UPUMG_Widget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x4c0
	UWidgetAnimation* Anim_OnShown; // 0x4c8
	UWBP_StandardButtonMedium_C* Button_GotIt; // 0x4d0
	UImage* RedUnderline; // 0x4d8
	UTextBlock* Text_ModalBody; // 0x4e0
	UWBP_ModalPopupContainer_C* WBP_ModalPopupContainer; // 0x4e8
	UImage* WhiteLIneRule; // 0x4f0
};

struct UEnvelopeFollowerListener : UActorComponent {
	FMulticastInlineDelegate OnEnvelopeFollowerUpdate; // 0xb0
};

struct UWBP_PlayerStatus_ContextMenu_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* ShowAnim; // 0x528
	UTextBlock* OnlineStatus; // 0x530
	UImage* OptionsBg; // 0x538
	UVerticalBox* OptionsContainer; // 0x540
	USizeBox* OuterMenuContainer; // 0x548
	FMulticastInlineDelegate OnReadyNavigation; // 0x550
	FMulticastInlineDelegate OnMenuHidden; // 0x560
	FMulticastInlineDelegate OnMenuStart; // 0x570
	UKSPlayerInfo* LocalPlayerInfo; // 0x580
	UDataTable* StatusColors; // 0x588
	TArray<UWBP_PlayerStatus_ContextMenuOption_C*> OptionButtons; // 0x590
	bool IsOpen; // 0x5a0
};

struct UWBP_Social_Snapshot_C : UKSSocialWidgetBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x528
	UWidgetAnimation* Click; // 0x530
	UWidgetAnimation* Hover; // 0x538
	UImage* Btn_BkgHoverGradient; // 0x540
	UImage* Btn_BkgPress; // 0x548
	UImage* Btn_Fill; // 0x550
	UImage* Btn_HoverStroke; // 0x558
	UImage* Btn_Stroke; // 0x560
	UOverlay* ButtonBackground; // 0x568
	UScaleBox* CTAWrapper; // 0x570
	UImage* FriendsOnlineIcon; // 0x578
	UTextBlock* FriendsOnlineText; // 0x580
	UWBP_ControllerPrompt_C* GamepadPrompt; // 0x588
	UButton* HitTarget; // 0x590
	UImage* PartyIcon; // 0x598
	UHorizontalBox* PartyList; // 0x5a0
	UTextBlock* PartyText; // 0x5a8
	USizeBox* PromptWrapper; // 0x5b0
	UWBP_CallToAction_C* WBP_CallToAction; // 0x5b8
	UAkAudioEvent* HoverSocialSnapshotSFX; // 0x5c0
	UAkAudioEvent* ClickSocialSnapshotSFX; // 0x5c8
};

struct UWBP_ChevronProgressBar_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UImage* BackBar_3; // 0x240
	UScaleBox* BackWrapper; // 0x248
	UImage* Fill; // 0x250
	UImage* Fill_2; // 0x258
	UScaleBox* FillWrapper; // 0x260
	FSlateColor FillColor; // 0x268
	FSlateColor FillColor_Highlight; // 0x290
	FSlateColor BackColor; // 0x2b8
};

struct AKSActivityTestManager : AActor {
	TArray<UKSActivity*> Activities; // 0x220
	bool bInitializeOnBeginPlay; // 0x230
	TArray<UKSActivityInstance*> ActivityInstances; // 0x238
};

struct UTextureLODSettings : UObject {
	TArray<FTextureLODGroup> TextureLODGroups; // 0x28
};

struct UAkAssetPlatformData : UObject {
	UAkAssetData* CurrentAssetData; // 0x28
};

struct UKSCircleDeadZoneFilter : UKSAnalogStickFilter {
	float DeadZoneRadius; // 0x38
	float CardinalDeadZoneHalfWidth; // 0x3c
};

struct AKSCombatLogVisualizer : APGame_CombatLogVisualizer {
	TMap<FString, FCharacterArray> Characters; // 0x230
};

struct UPUMG_Widget : UUserWidget {
	FMulticastInlineDelegate OnGamepadHovered; // 0x238
	FMulticastInlineDelegate OnMouseEntered; // 0x248
	FMulticastInlineDelegate OnNavigateBack; // 0x258
	FMulticastInlineDelegate OnTextureLoadComplete; // 0x268
	FMulticastInlineDelegate OnNavigateUpFailed; // 0x278
	FMulticastInlineDelegate OnNavigateDownFailed; // 0x288
	FMulticastInlineDelegate OnNavigateLeftFailed; // 0x298
	FMulticastInlineDelegate OnNavigateRightFailed; // 0x2a8
	FMulticastInlineDelegate OnFocusGroupNavigateUpFailed; // 0x2b8
	FMulticastInlineDelegate OnFocusGroupNavigateDownFailed; // 0x2c8
	FMulticastInlineDelegate OnFocusGroupNavigateLeftFailed; // 0x2d8
	FMulticastInlineDelegate OnFocusGroupNavigateRightFailed; // 0x2e8
	FMulticastInlineDelegate OnHideSequenceFinished; // 0x2f8
	FMulticastInlineDelegate OnShowSequenceFinished; // 0x308
	TWeakObjectPtr<APUMG_HUD> MyHud; // 0x318
	FName MyRouteName; // 0x320
	bool CloseOnLogout; // 0x328
	bool IsComponent; // 0x329
	bool StartsHidden; // 0x32a
	bool UsesBlocker; // 0x32b
	bool BlockerClickToClose; // 0x32c
	bool EnableGameStateSetNotify; // 0x32d
	TSoftObjectPtr<UTexture2D> LoadedTexture; // 0x330
	UPUMG_MobileLayoutSequencePlayer* MobileLayoutSequencePlayer; // 0x4a8
	UWidgetAnimation* MobileLayoutAnim; // 0x4b0
	bool bMobileLayoutActive; // 0x4b8
};

struct UMovieSceneLevelVisibilityTrack : UMovieSceneNameableTrack {
	TArray<UMovieSceneSection*> Sections; // 0x58
};

struct AWheeledVehicle : APawn {
	USkeletalMeshComponent* Mesh; // 0x280
	UWheeledVehicleMovementComponent* VehicleMovement; // 0x288
};

struct UMaterialExpressionRuntimeVirtualTextureSampleParameter : UMaterialExpressionRuntimeVirtualTextureSample {
	FName ParameterName; // 0x90
	FGuid ExpressionGUID; // 0x98
	FName Group; // 0xa8
};

struct URig : UObject {
	TArray<FTransformBase> TransformBases; // 0x30
	TArray<FNode> Nodes; // 0x40
};

struct ALobbyBeaconHost : AOnlineBeaconHostObject {
	TSoftClassPtr<UObject> LobbyStateClass; // 0x250
	ALobbyBeaconState* LobbyState; // 0x278
};

struct AKSPlayerController : APGame_PlayerController {
	float ProjectileDebugLifetime; // 0x6b8
	FMulticastInlineDelegate OnKSPlayerStateReplicatedDel; // 0x6c0
	TArray<FDeferredViewTargetChangeInfo> DeferredViewTargetChangedUpdate; // 0x718
	AKSPlayerState* CurrentSpectateTarget; // 0x730
	TWeakObjectPtr<AController> CurrentSpectateController; // 0x738
	TWeakObjectPtr<AActor> CurrentSpectateViewTarget; // 0x740
	FMulticastInlineDelegate OnBeginPlayingState; // 0x788
	FClientContext ClientContext; // 0x798
	FClientInputTypeUse ClientInputTypeUse; // 0x860
	bool bRecordingFrameRateInfo; // 0x868
	FClientStatistics Render; // 0x86c
	FClientStatistics Game; // 0x884
	FClientStatistics GPU; // 0x89c
	FClientStatistics RHIT; // 0x8b4
	FClientStatistics Frame; // 0x8cc
	FClientStatistics ResolutionFractionApproximation; // 0x8e4
	float FrameRateDataSmoothingFactor; // 0x8fc
	float FrameRateDataPushCountdown; // 0x900
	FName DefaultCameraName; // 0x904
	bool bWaitingToViewPawn; // 0x90c
	float LastPingCalcTime; // 0x910
	TSoftClassPtr<UObject> HUDClass; // 0x918
	UKSPlayerShotListener* ShotListener; // 0x940
	FMulticastInlineDelegate OnHUDSetup; // 0x948
	bool bCachedIsUIRelevant; // 0x998
	bool bCachedIsOnlyASpector; // 0x999
	FMulticastInlineDelegate OnPlayerControllerIsUIRelevantDel; // 0x9a0
	FMulticastInlineDelegate OnViewedPawnChangedDel; // 0x9d0
	FMulticastInlineDelegate OnControllerChangedDel; // 0x9f8
	FMulticastInlineDelegate OnSpectateStateChanged; // 0xa08
	AKSCharacterBase* KSCharacter; // 0xa20
	bool IsInTouchMode; // 0xa28
	bool StartInTouchMode; // 0xa29
	float TouchModeAutoFireRadius; // 0xa2c
	float TouchModeAutoFireTickRate; // 0xa30
	float TouchModeClearAdsDelay; // 0xa34
	bool bTouchAutoFireNeededAds; // 0xa38
	uint32_t LastTouchAutoFireWeaponID; // 0xa50
	URenderThreadInputHandler* RenderThreadInputHandler; // 0xa58
	FMulticastInlineDelegate OnTouchModeChanged; // 0xa68
	UCurveFloat* MouseLookSensitivityCurve; // 0xa78
	FInterpCurveFloat LookSensitivityToMaxLookSpeed; // 0xa80
	float BaseGamepadTurnRateScale; // 0xa98
	float BaseGamepadLookUpRateScale; // 0xa9c
	FVector2D GamepadRightStickVelocity; // 0xaa0
	FRotator AccumulatedRotationInput; // 0xaa8
	FVector2D GamepadLook; // 0xab8
	UKSGamepadLookSpeedManager* GamepadLookSpeedManagerClass; // 0xac0
	UKSGamepadLookSpeedManager* JoyConLookSpeedManagerClass; // 0xac8
	UKSGamepadLookSpeedManager* GamepadLookSpeedManager; // 0xad0
	UKSGamepadLookSpeedManager* JoyConLookSpeedManager; // 0xad8
	float InputYawScaleADS; // 0xae0
	float InputPitchScaleADS; // 0xae4
	float InputRollScaleADS; // 0xae8
	FRotator ThisFrameKickbackRotationCache; // 0xaec
	bool bKickbackEnabled; // 0xaf8
	TArray<FKickbackPlayback> ActiveKickback; // 0xb00
	bool bKickbackRecoveryActive; // 0xb10
	float KickbackRecoveryDelayRemaining; // 0xb14
	float KickbackRecoveryAcceleration; // 0xb18
	float KickbackRecoveryTargetRate; // 0xb1c
	float KickbackRecoveryRate; // 0xb20
	float MaxCumulativeKickbackVerticalAngle; // 0xb24
	FRotator KickbackRecoveryRotation; // 0xb28
	FRotator KickbackCancelRotation; // 0xb34
	float KickbackCancelThreshold; // 0xb40
	bool bAllowKickbackRecoveryCancel; // 0xb48
	bool bUseSmartKickbackRecovery; // 0xb49
	float KickbackRecoveryEndThreshold; // 0xb4c
	float KickbackScalingFactorMouse; // 0xb50
	UKSAimAssistComponent* AimAssistComponent; // 0xb58
	FMulticastInlineDelegate ViewedPawnTakeDamageDel; // 0xb60
	FMulticastInlineDelegate ViewedPawnTakeArmorDamageDel; // 0xb70
	FMulticastInlineDelegate ViewedPawnInstigateDamageDel; // 0xb80
	FMulticastInlineDelegate ViewedPawnInstigateDamageNotifyDel; // 0xb90
	FMulticastInlineDelegate OwnedPawnInstigateDamageNotifyDel; // 0xba0
	FMulticastInlineDelegate OwnedPawnInstigateWeaponFireNotifyDel; // 0xbb0
	FMulticastInlineDelegate OwnedPawnTakesDamageNotifyDel; // 0xbc0
	FMulticastInlineDelegate OnOwnedPawnTakeDamageFromInstigatorDel; // 0xbd0
	FMulticastInlineDelegate OnHUDAnnouncementComponentCreated; // 0xbe0
	bool bCreateHUDAnnouncementComponent; // 0xbf0
	UKSHUDAnnouncementComponent* HUDAnnouncementComponent; // 0xbf8
	bool bFirstPawnAcknowledged; // 0xc48
	bool bFirstCharacterApparelFinished; // 0xc49
	bool bFirstCharacterWeaponsEquipped; // 0xc4a
	bool bKillcamWorldReady; // 0xc4b
	float LastTimePlayedTime; // 0xc88
	UKSPingManager* PingManager; // 0xc90
	UKSRadialMenuManager* RadialMenuManager; // 0xc98
	UKSJobSelectionManager* JobSelectionManager; // 0xca0
	UCurveFloat* GyroTargetSpeedCurve; // 0xcd8
	UCurveFloat* GyroSensitivityConversionCurve; // 0xce0
	UKSEquipmentManagerComponent* EquipmentManagerComponent; // 0xce8
	ALevelSequenceActor* TeamCinematicSequenceActor; // 0xcf0
	bool bIsTeamLoadedInLobby; // 0xcf8
	FMulticastInlineDelegate OnGameFubarDel; // 0xd00
	FMulticastInlineDelegate OnRadialMenuPressed; // 0xd10
	FMulticastInlineDelegate OnRadialMenuReleased; // 0xd20
	FMulticastInlineDelegate OnRadialMenuUsedLastSelection; // 0xd30
	FMulticastInlineDelegate OnRadialMenuForceClosed; // 0xd40
	bool bRadialMenuOpen; // 0xd50
	FMulticastInlineDelegate OnAutoPickupChanged; // 0xd58
	FMulticastInlineDelegate OnNewPollCalled; // 0xd78
	FMulticastInlineDelegate OnLocalPlayerHasVoted; // 0xd88
	FMulticastInlineDelegate OnPollCompleted; // 0xd98
	FMulticastInlineDelegate OnVoteCountUpdated; // 0xda8
	FMulticastInlineDelegate OnPollStateChanged; // 0xdb8
	bool bLeftChoiceHeldDown; // 0xdc8
	bool bRightChoiceHeldDown; // 0xdc9
	bool bTelemetryFeatureActive; // 0xdcd
	FMulticastInlineDelegate OnTelemetrySettingsChanged; // 0xdd0
	bool bUseFallackTeamNum; // 0xe4c
	int32_t FallbackTeamNum; // 0xe50
	AKSMinimapRendererBase* CachedMinimapRenderer; // 0xe58
	FMulticastInlineDelegate OnUpdatePlayerRevealedUI; // 0xe60
	FMulticastInlineDelegate OnUpdateEnemyDetectedUI; // 0xe70
	FMulticastInlineDelegate OnUpdateActorRevealStateLocally; // 0xe80
	FMulticastInlineDelegate OnLocalViewAffected; // 0xe90
	EQueueDivertType QueueDivertType; // 0xea1
	FMulticastInlineDelegate OnJobSelectorAddedDel; // 0xea8
};

struct UNiagaraRendererProperties : UNiagaraMergeable {
	int32_t SortOrderHint; // 0x28
	bool bIsEnabled; // 0x2c
	bool bMotionBlurEnabled; // 0x2d
};

struct UHierarchicalInstancedStaticMeshComponent : UInstancedStaticMeshComponent {
	TArray<int32_t> SortedInstances; // 0x5a0
	int32_t NumBuiltInstances; // 0x5b0
	FBox BuiltInstanceBounds; // 0x5b8
	FBox UnbuiltInstanceBounds; // 0x5d4
	TArray<FBox> UnbuiltInstanceBoundsList; // 0x5f0
	char bEnableDensityScaling : 1; // 0x600
	int32_t OcclusionLayerNumNodes; // 0x608
	FBoxSphereBounds CacheMeshExtendedBounds; // 0x60c
	bool bDisableCollision; // 0x628
	int32_t InstanceCountToRender; // 0x62c
};

struct UNameplateWidget_C : UUserWidget {
	UPUMG_Widget* BountyIcon; // 0x240
	USizeBox* BountyState; // 0x248
	UCanvasPanel* CanvasPanel_1; // 0x250
	USizeBox* CrackedState; // 0x258
	UImage* DownedArrow; // 0x260
	UWidgetSwitcher* DownedPlayer; // 0x268
	UImage* ObjectiveIcon; // 0x270
	USizeBox* ObjectiveWrapper; // 0x278
	UPlayerHealthMeter_C* PlayerHealthMeter; // 0x280
	UTextBlock* PlayerName; // 0x288
	UUserWidget* RogueIcon; // 0x290
	APlayerState* Nameplate_PlayerState; // 0x298
	AKSCharacter* Nameplate_Character; // 0x2a0
	bool Killcam_Enabled; // 0x2a8
	FName HoverState; // 0x2ac
	float ResidualFadeAlpha; // 0x2b4
	float ResidualFadeDelayTime; // 0x2b8
	FVector2D DamageLerpEndpoints; // 0x2bc
	float ResidualFadeTime; // 0x2c4
	float Manual Tick Delta Time; // 0x2c8
	float ResidualFadeDelayTimer; // 0x2cc
	float DamageLerpAlpha; // 0x2d0
	float ResidualFadePower; // 0x2d4
	float DamageLerpPower; // 0x2d8
	float DamageLerpTime; // 0x2dc
	float PreviousHealth; // 0x2e0
	FPlayerHealthMeterState CurrentMeterState; // 0x2e4
	bool HasDeferredUpdate; // 0x2fc
	bool ShowObjective; // 0x2fd
	bool ForceAlwaysShowObjectivePlayer; // 0x2fe
	EColorVisionDeficiency ColorCorrection; // 0x2ff
	bool bIsNameSet; // 0x300
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State; // 0x308
	bool K2Node_DynamicCast_bSuccess; // 0x310
	FDelegate K2Node_CreateDelegate_OutputDelegate; // 0x314
	AKSCharacterFoundation* K2Node_CustomEvent_Character_2; // 0x328
	AKSCharacterBase* K2Node_DynamicCast_AsKSCharacter_Base; // 0x330
	bool K2Node_DynamicCast_bSuccess_2; // 0x338
	AKSGameState* K2Node_DynamicCast_AsKSGame_State; // 0x340
	bool K2Node_DynamicCast_bSuccess_3; // 0x348
	FDelegate K2Node_CreateDelegate_OutputDelegate_2; // 0x34c
	AKSPlayerState* K2Node_CustomEvent_PlayerState; // 0x360
	AKSGameState* K2Node_DynamicCast_AsKSGame_State_2; // 0x368
	bool K2Node_DynamicCast_bSuccess_4; // 0x370
	UKSPlayerMod* K2Node_CustomEvent_Mod_2; // 0x378
	UKSPlayerModInstance* K2Node_CustomEvent_ModInstance_2; // 0x380
	UKSPlayerMod* K2Node_CustomEvent_Mod; // 0x388
	UKSPlayerModInstance* K2Node_CustomEvent_ModInstance; // 0x390
	AKSPlayerState* K2Node_CustomEvent_PlayerState_2; // 0x398
	FDelegate K2Node_CreateDelegate_OutputDelegate_3; // 0x3a0
	FDelegate K2Node_CreateDelegate_OutputDelegate_4; // 0x3b0
	TScriptInterface<IKSObjective> CallFunc_BindToObjectiveStateChanged_self_CastInput; // 0x3c0
	bool K2Node_Event_IsDesignTime; // 0x3d0
	TScriptInterface<IKSObjective> K2Node_CustomEvent_GameObjective; // 0x3d8
	UKSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings; // 0x3e8
	bool K2Node_DynamicCast_bSuccess_5; // 0x3f0
	FDelegate K2Node_CreateDelegate_OutputDelegate_5; // 0x3f4
	FDelegate K2Node_CreateDelegate_OutputDelegate_6; // 0x404
	AKSCharacter* K2Node_CustomEvent_Character; // 0x418
	TArray<UKSPlayerModInstance*> CallFunc_GetModInstancesByModAsset_OutMods; // 0x420
	UKSPlayerModInstance* CallFunc_Array_Get_Item; // 0x430
	FDelegate K2Node_CreateDelegate_OutputDelegate_7; // 0x438
	AKSPlayerState* K2Node_CustomEvent_PlayerState_3; // 0x448
	bool K2Node_CustomEvent_IsEnabled; // 0x450
	FDelegate K2Node_CreateDelegate_OutputDelegate_8; // 0x454
	AKSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller; // 0x468
	bool K2Node_DynamicCast_bSuccess_6; // 0x470
	FDelegate K2Node_CreateDelegate_OutputDelegate_9; // 0x474
	AKSPlayerController* K2Node_CustomEvent_Controller; // 0x488
	AActor* K2Node_CustomEvent_OldViewTarget; // 0x490
	AActor* K2Node_CustomEvent_NewViewTarget; // 0x498
	FDelegate K2Node_CreateDelegate_OutputDelegate_10; // 0x4a0
	AKSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller_2; // 0x4b0
	bool K2Node_DynamicCast_bSuccess_7; // 0x4b8
	FDelegate K2Node_CreateDelegate_OutputDelegate_11; // 0x4bc
	UKSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player; // 0x4d0
	bool K2Node_DynamicCast_bSuccess_8; // 0x4d8
	bool Temp_bool_Has_Been_Initd_Variable; // 0x4d9
	AKSCharacterFoundation* K2Node_CustomEvent_Character_3; // 0x4e0
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x4e8
	bool K2Node_DynamicCast_bSuccess_9; // 0x4f0
	APlayerState* K2Node_Event_PlayerState; // 0x4f8
	AKSCharacter* K2Node_Event_Character; // 0x500
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State_2; // 0x508
	bool K2Node_DynamicCast_bSuccess_10; // 0x510
	FDelegate K2Node_CreateDelegate_OutputDelegate_12; // 0x514
	FDelegate K2Node_CreateDelegate_OutputDelegate_13; // 0x524
	FDelegate K2Node_CreateDelegate_OutputDelegate_14; // 0x534
	FDelegate K2Node_CreateDelegate_OutputDelegate_15; // 0x544
	FDelegate K2Node_CreateDelegate_OutputDelegate_16; // 0x554
	FDelegate K2Node_CreateDelegate_OutputDelegate_17; // 0x564
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State_3; // 0x578
	bool K2Node_DynamicCast_bSuccess_11; // 0x580
	FDelegate K2Node_CreateDelegate_OutputDelegate_18; // 0x584
	bool Temp_bool_IsClosed_Variable; // 0x594
	FDelegate K2Node_CreateDelegate_OutputDelegate_19; // 0x598
	FDelegate K2Node_CreateDelegate_OutputDelegate_20; // 0x5a8
	FDelegate K2Node_CreateDelegate_OutputDelegate_21; // 0x5b8
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x5c8
	FDelegate K2Node_CreateDelegate_OutputDelegate_22; // 0x5cc
	AKSPlayerState* K2Node_DynamicCast_AsKSPlayer_State_4; // 0x5e0
	bool K2Node_DynamicCast_bSuccess_12; // 0x5e8
};

struct UPlatformMediaSource : UMediaSource {
	UMediaSource* MediaSource; // 0x80
};

struct UKSBTD_CompareBlackboardToValue : UBTDecorator_BlackboardBase {
	float TargetValue; // 0x90
};

struct UKSPlayerMod_Hacking : UKSPlayerMod {
	float HackSpeedMultiplier; // 0x330
	float DehackSpeedMultiplier; // 0x334
};

struct UKSResourceManagerComponent : UActorComponent {
	FMulticastInlineDelegate OnResourceAddedDel; // 0xb0
	FMulticastInlineDelegate OnResourceRemovedDel; // 0xc0
	FMulticastInlineDelegate OnResourceValueChangedDel; // 0xd0
	FMulticastInlineDelegate OnResourceFilledDel; // 0xe0
	FMulticastInlineDelegate OnResourceDepletedDel; // 0xf0
	TArray<FKSResourceInfo> StartingResources; // 0x100
	FKSResourceInfoSerializerContainer ActiveResourceInfoContainer; // 0x110
};

struct UKSWAttachmentCosmetic_VarScope : UKSWeaponAttachmentCosmeticInst {
	UKSWeaponAttachment_VarScope* VariableScopeAsset; // 0x1b0
	char ScopeZoomIndex; // 0x1b8
};

struct UMovieSceneFolder : UObject {
	FName FolderName; // 0x28
	TArray<UMovieSceneFolder*> ChildFolders; // 0x30
	TArray<UMovieSceneTrack*> ChildMasterTracks; // 0x40
	TArray<FString> ChildObjectBindingStrings; // 0x50
};

struct AKSWayPoint : AKSMapPoint {
	TMap<AKSWayPointSet*, FKSWayPointLink> WayPointSetLinks; // 0x258
	FKSWayPointLink DefaultWayPointLinks; // 0x2a8
	float DefensePointProbability; // 0x2c8
	float DefensePointWaitTimeMin; // 0x2cc
	float DefensePointWaitTimeMax; // 0x2d0
	TArray<AKSDefensePoint*> DefensePointsForward; // 0x2d8
	TArray<AKSDefensePoint*> DefensePointsReverse; // 0x2e8
};

struct AKSWeapon_RemoteThrowAndTrigger : AKSWeapon_RemoteThrow {
	bool bUseSequentialDetonation; // 0x870
	FName AltFireSubWeaponName; // 0x874
};

struct UKSMinimapWidgetBase : UKSMapWidgetBase {
	float MinimapRepresentedWidth; // 0x648
	float BackgroundWidth; // 0x64c
	EMinimapWidgetClampStyle ClampStyle; // 0x650
};

struct UKSSocialWidgetBase : UKSWidget {
	UKSPartyDataFactory* CachedPartyDataFactory; // 0x520
};

struct UUserDefinedImageCaptureProtocol : UUserDefinedCaptureProtocol {
	EDesiredImageFormat Format; // 0xd8
	bool bEnableCompression; // 0xd9
	int32_t CompressionQuality; // 0xdc
};

struct UParticleModuleSizeScale : UParticleModuleSizeBase {
	FRawDistributionVector SizeScale; // 0x30
	char EnableX : 1; // 0x78
	char EnableY : 1; // 0x78
	char EnableZ : 1; // 0x78
};

struct UConsole : UObject {
	ULocalPlayer* ConsoleTargetPlayer; // 0x38
	UTexture2D* DefaultTexture_Black; // 0x40
	UTexture2D* DefaultTexture_White; // 0x48
	TArray<FString> HistoryBuffer; // 0x68
	float DefaultHeight; // 0x130
};

struct UPartyBeaconState : UObject {
	FName SessionName; // 0x28
	int32_t NumConsumedReservations; // 0x30
	int32_t MaxReservations; // 0x34
	int32_t NumTeams; // 0x38
	int32_t NumPlayersPerTeam; // 0x3c
	FName TeamAssignmentMethod; // 0x40
	int32_t ReservedHostTeamNum; // 0x48
	int32_t ForceTeamNum; // 0x4c
	bool bRestrictCrossConsole; // 0x50
	bool bEnableRemovalRequests; // 0x51
	TArray<FPartyReservation> Reservations; // 0x58
};

struct UKSActivityRewardCondition_WeaponEquippedByVictim : UKSActivityRewardCondition {
	TArray<TSoftObjectPtr<UKSItem>> MatchingWeapons; // 0x30
};

struct UKSRewardsTrackWidgetBase : UKSWidget {
	int32_t MaxPageCount; // 0x520
	int32_t CurrentPage; // 0x524
	TArray<UKSWidget*> ItemButtons; // 0x528
	UKSActivityInstance* ActivityInstance; // 0x538
	UKSAcquisition* Acquisition; // 0x540
};

struct UGizmoLineHandleComponent : UGizmoBaseComponent {
	FVector Normal; // 0x450
	float HandleSize; // 0x45c
	float Thickness; // 0x460
	FVector Direction; // 0x464
	float Length; // 0x470
	bool bImageScale; // 0x474
};

struct UReflectionCaptureComponent : USceneComponent {
	UBillboardComponent* CaptureOffsetComponent; // 0x208
	EReflectionSourceType ReflectionSourceType; // 0x210
	UTextureCube* Cubemap; // 0x218
	float SourceCubemapAngle; // 0x220
	float Brightness; // 0x224
	FVector CaptureOffset; // 0x228
	FGuid MapBuildDataId; // 0x234
};

struct UBlocker_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UButton* Closer; // 0x528
	UImage* Image_1; // 0x530
	UPUMG_Widget* Target; // 0x538
	bool ClickToClose; // 0x540
};

struct UWBP_CustomLobbyPlayer_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* PlayerContextHover; // 0x528
	UWidgetAnimation* ControlsEnterLeft; // 0x530
	UWidgetAnimation* ControlsEnterRight; // 0x538
	UWidgetAnimation* PlayerCardHover; // 0x540
	UWidgetSwitcher* CardSwitcher; // 0x548
	USizeBox* ContextMenuArrow; // 0x550
	UOverlay* EmptyState; // 0x558
	UTextBlock* EmptyText; // 0x560
	UOverlay* FilledState; // 0x568
	UImage* HoverBG; // 0x570
	UVerticalBox* HoverControls; // 0x578
	UImage* Image_8; // 0x580
	UOverlay* InvitePendingState; // 0x588
	UWBP_CustomKickButton_C* KickButton; // 0x590
	UWBP_ControllerPrompt_C* LeftBackGamepadCallout; // 0x598
	UOverlay* LeftBackGroup; // 0x5a0
	UImage* LobbyLeaderIcon; // 0x5a8
	UButton* LobbyPlayerButton; // 0x5b0
	UTextBlock* PendingText; // 0x5b8
	UButton* PlayerCardButton; // 0x5c0
	UWBP_CustomSwapButton_C* SwapButton; // 0x5c8
	UWBP_PlayerInfoDisplay_C* WBP_PlayerInfoDisplay; // 0x5d0
	UWBP_ThrobberHorizontal_C* WBP_ThrobberHorizontal_2; // 0x5d8
	bool bHiddenWhenEmpty; // 0x5e0
	ELaterality ControlsSide; // 0x5e1
	FMulticastInlineDelegate OnPlayerClicked; // 0x5e8
	FMulticastInlineDelegate OnEmptyClicked; // 0x5f8
	FPUMG_CustomMatchMember CachedPlayerInfo; // 0x608
	FMulticastInlineDelegate OnPlayerSwap; // 0x618
	FMulticastInlineDelegate OnPlayerKick; // 0x628
	FName RouteName; // 0x638
	FName Prompt_Swap; // 0x640
	FName Prompt_Kick; // 0x648
};

struct UKSModInst_RevealOnMinimap : UKSPlayerModInstance {
	TSoftClassPtr<UObject> MinimapDisplayWidget; // 0x1b8
	bool bRevealOnFullMap; // 0x1e0
};

struct UMaterialExpressionSkyAtmosphereLightDirection : UMaterialExpression {
	int32_t LightIndex; // 0x40
};

struct UParticleModuleMeshRotation : UParticleModuleRotationBase {
	FRawDistributionVector StartRotation; // 0x30
	char bInheritParent : 1; // 0x78
};

struct AKSDropShipExitVolume : APhysicsVolume {
	float YawDirection; // 0x268
};

struct UPhysicalAnimationComponent : UActorComponent {
	float StrengthMultiplyer; // 0xb0
	USkeletalMeshComponent* SkeletalMeshComponent; // 0xb8
};

struct AAkAmbientSound : AActor {
	UAkAudioEvent* AkAudioEvent; // 0x220
	UAkComponent* AkComponent; // 0x228
	bool StopWhenOwnerIsDestroyed; // 0x230
	bool AutoPost; // 0x231
	bool ForceNoTickingOnAkComponent; // 0x232
};

struct UBodySetup : UObject {
	FKAggregateGeom AggGeom; // 0x28
	FName BoneName; // 0x80
	EPhysicsType PhysicsType; // 0x88
	char bAlwaysFullAnimWeight : 1; // 0x89
	char bConsiderForBounds : 1; // 0x89
	char bMeshCollideAll : 1; // 0x89
	char bDoubleSidedGeometry : 1; // 0x89
	char bGenerateNonMirroredCollision : 1; // 0x89
	char bSharedCookedData : 1; // 0x89
	char bGenerateMirroredCollision : 1; // 0x89
	char bSupportUVsAndFaceRemap : 1; // 0x89
	EBodyCollisionResponse CollisionReponse; // 0x8b
	ECollisionTraceFlag CollisionTraceFlag; // 0x8c
	UPhysicalMaterial* PhysMaterial; // 0x90
	FWalkableSlopeOverride WalkableSlopeOverride; // 0x98
	FBodyInstance DefaultInstance; // 0x120
	FVector BuildScale3D; // 0x238
};

struct UMovieSceneCaptureProtocolBase : UObject {
	EMovieSceneCaptureProtocolState State; // 0x50
};

struct UGizmoTransformProxyTransformSource : UGizmoBaseTransformSource {
	UTransformProxy* Proxy; // 0x48
};

struct UFieldSystemMetaDataIteration : UFieldSystemMetaData {
	int32_t Iterations; // 0xb0
};

struct UVectorField : UObject {
	FBox Bounds; // 0x28
	float Intensity; // 0x44
};

struct UNetConnection : UPlayer {
	TArray<UChildConnection*> Children; // 0x48
	UNetDriver* Driver; // 0x58
	UPackageMap* PackageMapClass; // 0x60
	UPackageMap* PackageMap; // 0x68
	TArray<UChannel*> OpenChannels; // 0x70
	TArray<AActor*> SentTemporaries; // 0x80
	AActor* ViewTarget; // 0x90
	AActor* OwningActor; // 0x98
	int32_t MaxPacket; // 0xa0
	char InternalAck : 1; // 0xa4
	FUniqueNetIdRepl PlayerId; // 0x160
	double LastReceiveTime; // 0x1d0
	TArray<UChannel*> ChannelsToTick; // 0x1510
};

struct UParticleModuleVelocityBase : UParticleModule {
	char bInWorldSpace : 1; // 0x30
	char bApplyOwnerScale : 1; // 0x30
};

struct UEnvQueryGenerator_ActorsOfClass : UEnvQueryGenerator {
	AActor* SearchedActorClass; // 0x50
	FAIDataProviderBoolValue GenerateOnlyActorsInRadius; // 0x58
	FAIDataProviderFloatValue SearchRadius; // 0x90
	UEnvQueryContext* SearchCenter; // 0xc8
};

struct UANotifyState_SFXAKEvent_C : UAnimNotifyState {
	UAkAudioEvent* AK Event Start; // 0x30
	UAkAudioEvent* AK Event Stop; // 0x38
	FName StartRowName; // 0x40
	FName StopRowName; // 0x48
	bool SpawnNewComponentAttachedToMesh; // 0x50
	FName AttachPointName; // 0x54
	bool Grab Emote Semaphore; // 0x5c
};

struct UBombActivator_ABP_C : UAnimInstance {
	FPointerToUberGraphFrame UberGraphFrame; // 0x270
	FAnimNode_Root AnimGraphNode_Root; // 0x278
	FAnimNode_Slot AnimGraphNode_Slot; // 0x2b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x310
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x348
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x380
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x3b8
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x3f0
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x478
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x4b8
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x540
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x580
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x608
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x648
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x6d0
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x710
	bool BombDisarming; // 0x7d0
	bool BombPlanted; // 0x7d1
	bool NewVar_1; // 0x7d2
};

struct UWBP_SettingsEntryList_C : UKSSettingsWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x578
	UOverlay* Overlay_56; // 0x580
	UDropdownList_C* DropdownList; // 0x588
	FMulticastInlineDelegate OnSelection; // 0x590
};

struct UWBP_WeaponMasteryMeter_C : UKSWeaponProgressMeter {
	FPointerToUberGraphFrame UberGraphFrame; // 0x548
	UWidgetAnimation* CompletedPulse; // 0x550
	UWidgetAnimation* AnimOnLevelUp; // 0x558
	UTextBlock* AltDescText; // 0x560
	UCanvasPanel* CanvasPanel_1; // 0x568
	USizeBox* ClassMasteryBadgeWrapper; // 0x570
	UWidgetSwitcher* EmblemImageSwitcher; // 0x578
	UImage* GlitchOverlay; // 0x580
	UImage* Image; // 0x588
	UImage* Image_156; // 0x590
	UImage* Image_162; // 0x598
	USizeBox* LevelRewardWrapper; // 0x5a0
	UVerticalBox* MasteryRewardCalloutWrapper; // 0x5a8
	UHorizontalBox* MasteryRewardsCallout; // 0x5b0
	UButton* MasteryRewardsTextHitTarget; // 0x5b8
	UTextBlock* NextRewardLabel; // 0x5c0
	UVerticalBox* PageTitle; // 0x5c8
	UVerticalBox* PageTitle_2; // 0x5d0
	UTextBlock* ProgressAmountTextSmall; // 0x5d8
	UVerticalBox* ProgressGroup; // 0x5e0
	UWidgetSwitcher* ProgressGroupSwitcher; // 0x5e8
	UVerticalBox* ProgressInfoBox; // 0x5f0
	UHorizontalBox* ProgressInfoBoxSmall; // 0x5f8
	UWidgetSwitcher* ProgressInfoSwitcher; // 0x600
	UTextBlock* ProgressNameText; // 0x608
	UTextBlock* ProgressNameTextSmall; // 0x610
	UImage* RewardShimmer; // 0x618
	UHorizontalBox* Tooltip; // 0x620
	UTextBlock* ViewMasteryRewardsCalloutText; // 0x628
	UWBP_KeyCallout_C* ViewRewardsGamepadPrompt; // 0x630
	UWBP_InputCallout_C* ViewRewardsKBMPrompt; // 0x638
	UWidgetSwitcher* ViewRewardsSwitcher; // 0x640
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay_3; // 0x648
	UWBP_WeaponCategoryMasteryBadge_C* WBP_WeaponCategoryMasteryBadge; // 0x650
	UWBP_WeaponMasteryBadgeLarge_C* WBP_WeaponMasteryBadgeLarge; // 0x658
	UWBP_MasteryPointsCount_C* WeaponCategoryPercentage; // 0x660
	UTextBlock* WeaponCategoryText; // 0x668
	UTextBlock* WeaponCategoryText_2; // 0x670
	UWBP_MasteryPointsCount_C* WeaponCategoryXP; // 0x678
	USizeBox* WeaponMasteryBadgeWrapper; // 0x680
	UTextBlock* WeaponNameText; // 0x688
	UTextBlock* WeaponNameText_2; // 0x690
	UWBP_MasteryPointsCount_C* WeaponXP; // 0x698
	UWBP_ProgressEarnedBar_C* XPBar; // 0x6a0
	UWBP_AdditiveImage_C* XPBarCompletedGlow; // 0x6a8
	UImage* XPBarShimmer; // 0x6b0
	EKSWeaponMasteryType MasteryType; // 0x6b8
	int32_t AnimBaseCount; // 0x6bc
	int32_t AnimStartProgressCount; // 0x6c0
	int32_t AnimTargetProgressCount; // 0x6c4
	int32_t AnimFinalProgressCount; // 0x6c8
	bool AnimIsToFullBar; // 0x6cc
	FMulticastInlineDelegate LevelUpComplete; // 0x6d0
};

struct UMovieSceneLevelVisibilitySection : UMovieSceneSection {
	ELevelVisibility Visibility; // 0xe0
	TArray<FName> LevelNames; // 0xe8
};

struct UIntSerialization : UObject {
	uint16_t UnsignedInt16Variable; // 0x28
	uint32_t UnsignedInt32Variable; // 0x2c
	uint64_t UnsignedInt64Variable; // 0x30
	int8_t SignedInt8Variable; // 0x38
	int16_t SignedInt16Variable; // 0x3a
	int64_t SignedInt64Variable; // 0x40
	char UnsignedInt8Variable; // 0x48
	int32_t SignedInt32Variable; // 0x4c
};

struct USubmixEffectDelayPreset : USoundEffectSubmixPreset {
	FSubmixEffectDelaySettings Settings; // 0x74
	FSubmixEffectDelaySettings DynamicSettings; // 0x80
};

struct UMaterialExpressionSingleLayerWaterMaterialOutput : UMaterialExpressionCustomOutput {
	FExpressionInput ScatteringCoefficients; // 0x40
	FExpressionInput AbsorptionCoefficients; // 0x54
	FExpressionInput PhaseG; // 0x68
};

struct UWmfMediaSettings : UObject {
	bool AllowNonStandardCodecs; // 0x28
	bool LowLatency; // 0x29
	bool NativeAudioOut; // 0x2a
	bool HardwareAcceleratedVideoDecoding; // 0x2b
};

struct UCameraShakeSourceComponent : USceneComponent {
	ECameraShakeAttenuation Attenuation; // 0x208
	float InnerAttenuationRadius; // 0x20c
	float OuterAttenuationRadius; // 0x210
	UCameraShake* CameraShake; // 0x218
	bool bAutoPlay; // 0x220
};

struct UInterpFilter : UObject {
	FString Caption; // 0x28
};

struct UKSBTD_IsApproachingFall : UBTDecorator {
	float LookAheadDistance; // 0x68
	float FallDistance; // 0x6c
};

struct UKSMultiElimTracker : UKSAccoladeTracker {
	TArray<FAccoladeMultiElimTracker> MultiElimAccolades; // 0xa0
	TArray<FAccoladePlayerTrackers> TrackPlayers; // 0xb0
};

struct UVectorFieldStatic : UVectorField {
	int32_t SizeX; // 0x48
	int32_t SizeY; // 0x4c
	int32_t SizeZ; // 0x50
	bool bAllowCPUAccess; // 0x54
	TArray<FVector4> CPUData; // 0x88
};

struct UUserDefinedStruct : UScriptStruct {
	EUserDefinedStructureStatus Status; // 0xc0
	FGuid Guid; // 0xc4
};

struct USizeBox : UContentWidget {
	float WidthOverride; // 0x138
	float HeightOverride; // 0x13c
	float MinDesiredWidth; // 0x140
	float MinDesiredHeight; // 0x144
	float MaxDesiredWidth; // 0x148
	float MaxDesiredHeight; // 0x14c
	float MinAspectRatio; // 0x150
	float MaxAspectRatio; // 0x154
	char bOverride_WidthOverride : 1; // 0x158
	char bOverride_HeightOverride : 1; // 0x158
	char bOverride_MinDesiredWidth : 1; // 0x158
	char bOverride_MinDesiredHeight : 1; // 0x158
	char bOverride_MaxDesiredWidth : 1; // 0x158
	char bOverride_MaxDesiredHeight : 1; // 0x158
	char bOverride_MinAspectRatio : 1; // 0x158
	char bOverride_MaxAspectRatio : 1; // 0x158
};

struct UKSBTTask_AimAt : UKSBTTask_LookAt {
	float AimRadius; // 0xc0
	FVector AimOffset; // 0xc4
	float AimAheadSeconds; // 0xd0
};

struct UWBP_WrapSelectionEntry_C : UKSWrapSelectionEntry {
	FPointerToUberGraphFrame UberGraphFrame; // 0x560
	USizeBox* Root; // 0x568
	UWBP_KSCosmeticItemDisplay_C* WBP_KSCosmeticItemDisplay; // 0x570
	bool IsSelected; // 0x578
};

struct ULiveLinkTimeSynchronizationSource : UTimeSynchronizationSource {
	FLiveLinkSubjectName SubjectName; // 0x30
};

struct AKSPlayerShop : AInfo {
	AKSPlayerState* PlayerState; // 0x230
	FMulticastInlineDelegate OnPurchaseAcknowledged; // 0x238
	FMulticastInlineDelegate OnRefundAcknowledged; // 0x248
	FMulticastInlineDelegate OnShopManifestChanged; // 0x258
	FMulticastInlineDelegate OnShopOfferingsChanged; // 0x268
	FMulticastInlineDelegate OnShopItemChanged; // 0x278
	FMulticastInlineDelegate OnShopItemPurchased; // 0x288
	FMulticastInlineDelegate OnShopItemRefunded; // 0x298
	FMulticastInlineDelegate OnShopItemActive; // 0x2a8
	FMulticastInlineDelegate OnShopItemInactive; // 0x2b8
	FMulticastInlineDelegate OnShopOpened; // 0x2c8
	FMulticastInlineDelegate OnShopClosed; // 0x2d8
	bool bWeaponMasterySwapEnabled; // 0x2e8
	float CashPerKSPoint; // 0x2ec
	bool bDelayApplyPurchases; // 0x2f0
	FShopManifest ShopManifestMap; // 0x308
	UObject* ConfiguratorObject; // 0x428
	int32_t NextTransactionId; // 0x820
	bool bShopOpen; // 0x830
	bool bShopInitialized; // 0x832
	bool bPlayersCanAccessShopWhileDead; // 0x833
	uint32_t MinimumUndoableTransactionId; // 0x834
	UKSPlayerShopHistoryComponent* PlayerShopHistoryComponent; // 0x838
	bool bAvailable; // 0x840
	FMulticastInlineDelegate OnShopAvailabilityChanged; // 0x848
	FMulticastInlineDelegate OnShopOptionsChanged; // 0x858
	FShopOptions ShopOptions; // 0x868
	TArray<FPrimaryOffering> PrimaryOneOfferings; // 0x870
	TArray<FPrimaryOffering> PrimaryTwoOfferings; // 0x880
	UKSWeaponCategoryAsset* PistolWeaponCategory; // 0x890
	TArray<FPrimaryOffering> PistolOfferings; // 0x898
	UKSWeaponCategoryAsset* MeleeWeaponCategory; // 0x8a8
	TArray<FPrimaryOffering> MeleeOfferings; // 0x8b0
	UKSWeaponCategoryAsset* GadgetWeaponCategory; // 0x8c0
	TArray<FPrimaryOffering> GadgetOneOfferings; // 0x8c8
	TArray<FPrimaryOffering> GadgetTwoOfferings; // 0x8d8
	bool bDisableShopOnClose; // 0x8e9
};

struct UMoviePlayerSettings : UObject {
	bool bWaitForMoviesToComplete; // 0x28
	bool bMoviesAreSkippable; // 0x29
	TArray<FString> StartupMovies; // 0x30
};

struct UAnimationDataSourceRegistry : UObject {
	TMap<FName, TWeakObjectPtr<UObject>> DataSources; // 0x28
};

struct UNiagaraEffectType : UObject {
	ENiagaraScalabilityUpdateFrequency UpdateFrequency; // 0x28
	ENiagaraCullReaction CullReaction; // 0x2c
	TArray<FNiagaraSystemScalabilitySettings> DetailLevelScalabilitySettings; // 0x30
	FNiagaraSystemScalabilitySettingsArray SystemScalabilitySettings; // 0x40
	FNiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings; // 0x50
};

struct USubmixEffectFilterPreset : USoundEffectSubmixPreset {
	FSubmixEffectFilterSettings Settings; // 0x74
};

struct UMaterialExpressionParameter : UMaterialExpression {
	FName ParameterName; // 0x40
	FGuid ExpressionGUID; // 0x48
};

struct UKSBotDefinitionCollection : UDataAsset {
	TArray<UKSBotDefinition*> BotDefinitions; // 0x30
};

struct UAnimationSettings : UDeveloperSettings {
	int32_t CompressCommandletVersion; // 0x38
	TArray<FString> KeyEndEffectorsMatchNameArray; // 0x40
	bool ForceRecompression; // 0x50
	bool bOnlyCheckForMissingSkeletalMeshes; // 0x51
	bool bForceBelowThreshold; // 0x52
	bool bFirstRecompressUsingCurrentOrDefault; // 0x53
	bool bRaiseMaxErrorToExisting; // 0x54
	bool bEnablePerformanceLog; // 0x55
	bool bStripAnimationDataOnDedicatedServer; // 0x56
	bool bTickAnimationOnSkeletalMeshInit; // 0x57
};

struct UMaterialExpressionWorldPosition : UMaterialExpression {
	EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0x40
};

struct UWBP_ChallengeEntry_CardHorizontal_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animHover; // 0x528
	UHorizontalBox* CardContent; // 0x530
	UImage* ChallengeBkg_2; // 0x538
	UImage* ChallengeBkg_Complete; // 0x540
	UWidgetSwitcher* ChallengeBkg_Switcher; // 0x548
	UWidgetSwitcher* ChallengeContentSwitcher; // 0x550
	UTextBlock* ChallengeDescription; // 0x558
	UTextBlock* ChallengeDescription_2; // 0x560
	UTextBlock* ChallengeDescription_4; // 0x568
	UTextBlock* ChallengeDescription_5; // 0x570
	UWBP_ProgressEarnedBar_C* ChallengeProgressBar; // 0x578
	UTextBlock* ChallengeProgressText; // 0x580
	UOverlay* CompletedIcons; // 0x588
	UVerticalBox* Content_active; // 0x590
	UVerticalBox* Content_AllComplete; // 0x598
	UVerticalBox* Content_WeekComplete; // 0x5a0
	UButton* HitTarget; // 0x5a8
	UImage* Image; // 0x5b0
	UImage* Image_390; // 0x5b8
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE; // 0x5c0
	UWBP_Challenge_Rewards_Badge_C* RewardBadge_EXAMPLE_01; // 0x5c8
	UHorizontalBox* RewardsActive; // 0x5d0
	UWidgetSwitcher* RewardSwitcher; // 0x5d8
	UImage* SelectionFrame; // 0x5e0
	UHorizontalBox* TimeRemainingWrapper; // 0x5e8
	EChallengeEntry_Card_State CurrentVisualState; // 0x5f0
	FName WeekTableRowName; // 0x5f4
	FActivitySequenceRow CurrentActivitySequence; // 0x600
	FMulticastInlineDelegate OnClicked; // 0x630
	UAkAudioEvent* ButtonClickSound; // 0x640
	UAkAudioEvent* ButtonHoverSound; // 0x648
};

struct AKSModZone : AActor {
	TArray<FKSModZoneModInfo> EnterModZoneInfos; // 0x240
	TArray<FKSModZoneModInfo> ExitModZoneInfos; // 0x250
};

struct UInputSettings : UObject {
	TArray<FInputAxisConfigEntry> AxisConfig; // 0x28
	char bAltEnterTogglesFullscreen : 1; // 0x38
	char bF11TogglesFullscreen : 1; // 0x38
	char bUseMouseForTouch : 1; // 0x38
	char bEnableMouseSmoothing : 1; // 0x38
	char bEnableFOVScaling : 1; // 0x38
	char bCaptureMouseOnLaunch : 1; // 0x38
	char bDefaultViewportMouseLock : 1; // 0x38
	char bAlwaysShowTouchInterface : 1; // 0x38
	char bShowConsoleOnFourFingerTap : 1; // 0x39
	char bEnableGestureRecognizer : 1; // 0x39
	bool bUseAutocorrect; // 0x3a
	TArray<FString> ExcludedAutocorrectOS; // 0x40
	TArray<FString> ExcludedAutocorrectCultures; // 0x50
	TArray<FString> ExcludedAutocorrectDeviceModels; // 0x60
	EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x70
	EMouseLockMode DefaultViewportMouseLockMode; // 0x71
	float FOVScale; // 0x74
	float DoubleClickTime; // 0x78
	TArray<FInputActionKeyMapping> ActionMappings; // 0x80
	TArray<FInputAxisKeyMapping> AxisMappings; // 0x90
	TArray<FInputActionSpeechMapping> SpeechMappings; // 0xa0
	FSoftObjectPath DefaultTouchInterface; // 0xb0
	FKey ConsoleKey; // 0xc8
	TArray<FKey> ConsoleKeys; // 0xe0
};

struct UKSPawnInventoryWidget : UKSPawnWidget {
	TMap<FKSEquipmentId, UKSWeaponComponentWidget*> EquipmentWidgets; // 0x540
};

struct UARTrackedObject : UARTrackedGeometry {
	UARCandidateObject* DetectedObject; // 0xe8
};

struct UUserDefinedCaptureProtocol : UMovieSceneImageCaptureProtocolBase {
	UWorld* World; // 0x58
};

struct UWBP_Checkbox02_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Anim_OnHover; // 0x528
	UWidgetAnimation* Anim_CheckboxActivate; // 0x530
	UWidgetSwitcher* background; // 0x538
	UImage* Check; // 0x540
	UButton* HitTarget; // 0x548
	UImage* Hovered; // 0x550
	UImage* Image_195; // 0x558
	UImage* Unhovered; // 0x560
	bool Checked; // 0x568
	FMulticastInlineDelegate OnCheckChanged; // 0x570
	UAkAudioEvent* HoverCheckboxSFX; // 0x580
	UAkAudioEvent* ClickCheckboxSFX; // 0x588
};

struct UAudioImpulseResponse : UObject {
	TArray<float> ImpulseResponse; // 0x28
	int32_t NumChannels; // 0x38
	int32_t SampleRate; // 0x3c
	float NormalizationVolumeDb; // 0x40
	TArray<float> IRData; // 0x48
};

struct UNiagaraDataInterfaceGrid2D : UNiagaraDataInterfaceRWBase {
	int32_t NumCellsX; // 0xd0
	int32_t NumCellsY; // 0xd4
	int32_t NumCellsMaxAxis; // 0xd8
	int32_t NumAttributes; // 0xdc
	bool SetGridFromMaxAxis; // 0xe0
	FVector2D WorldBBoxSize; // 0xe4
};

struct UAnimStreamable : UAnimSequenceBase {
	int32_t NumFrames; // 0xa8
	EAnimInterpolationType Interpolation; // 0xac
	FName RetargetSource; // 0xb0
	UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xc8
	UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xd0
	bool bEnableRootMotion; // 0xd8
	ERootMotionRootLock RootMotionRootLock; // 0xd9
	bool bForceRootLock; // 0xda
	bool bUseNormalizedRootMotionScale; // 0xdb
};

struct UKSApparelAsset_SkinDataTables : UKSApparelAsset {
	TArray<FSoftDataTableInfo> AssetDataTables; // 0x2c0
	TArray<FName> ApparelObjectsToInfluence; // 0x2d0
};

struct UKSLowAmmoAlertWidget : UKSActiveWeaponComponentWidget {
	float LowAmmoThreshold; // 0x5e8
	ELowAmmoState CachedLowAmmoState; // 0x5ec
	FMulticastInlineDelegate OnAmmoStateChangedDel; // 0x5f0
};

struct UKSProjWeaponTargetingModule : UKSDefaultAimTargetingModule {
	float ProjectileSimFrequency; // 0x148
	float MaxSimTime; // 0x14c
};

struct UNiagaraSimulationStageGeneric : UNiagaraSimulationStageBase {
	ENiagaraIterationSource IterationSource; // 0x38
	int32_t Iterations; // 0x3c
	char bSpawnOnly : 1; // 0x40
	FNiagaraVariableDataInterfaceBinding DataInterface; // 0x48
};

struct UMovieSceneEnumTrack : UMovieScenePropertyTrack {
	UEnum* Enum; // 0x88
};

struct ULiveLinkVirtualSubject : UObject {
	ULiveLinkRole* Role; // 0x30
	TArray<FLiveLinkSubjectName> Subjects; // 0x38
	TArray<ULiveLinkFrameTranslator*> FrameTranslators; // 0x48
};

struct UAkXboxOneInitializationSettings : UObject {
	FAkCommonInitializationSettings CommonSettings; // 0x28
	FAkXboxOneApuHeapInitializationSettings ApuHeapSettings; // 0x88
	FAkCommunicationSettingsWithSystemInitialization CommunicationSettings; // 0x90
	FAkXboxOneAdvancedInitializationSettings AdvancedSettings; // 0xb8
};

struct UVectorFieldComponent : UPrimitiveComponent {
	UVectorField* VectorField; // 0x430
	float Intensity; // 0x438
	float Tightness; // 0x43c
	char bPreviewVectorField : 1; // 0x440
};

struct UStaticMeshComponent : UMeshComponent {
	FGuid StaticMeshGuid; // 0x458
	int32_t ForcedLodModel; // 0x468
	int32_t PreviousLODLevel; // 0x46c
	int32_t MinLOD; // 0x470
	int32_t SubDivisionStepSize; // 0x474
	UStaticMesh* StaticMesh; // 0x478
	FColor WireframeColorOverride; // 0x480
	char bEvaluateWorldPositionOffset : 1; // 0x484
	char bOverrideWireframeColor : 1; // 0x484
	char bOverrideMinLod : 1; // 0x484
	char bOverrideNavigationExport : 1; // 0x484
	char bForceNavigationObstacle : 1; // 0x484
	char bDisallowMeshPaintPerInstance : 1; // 0x484
	char bIgnoreInstanceForTextureStreaming : 1; // 0x484
	char bOverrideLightMapRes : 1; // 0x484
	char bCastDistanceFieldIndirectShadow : 1; // 0x485
	char bOverrideDistanceFieldSelfShadowBias : 1; // 0x485
	char bUseSubDivisions : 1; // 0x485
	char bUseDefaultCollision : 1; // 0x485
	char bReverseCulling : 1; // 0x485
	char bHasReflectionCaptureOverrideLocation : 1; // 0x485
	FVector ReflectionCaptureOverrideLocation; // 0x488
	int32_t OverriddenLightMapRes; // 0x494
	float DistanceFieldIndirectShadowMinVisibility; // 0x498
	float DistanceFieldSelfShadowBias; // 0x49c
	float StreamingDistanceMultiplier; // 0x4a0
	TArray<FStaticMeshComponentLODInfo> LODData; // 0x4a8
	TArray<FStreamingTextureBuildInfo> StreamingTextureData; // 0x4b8
	FLightmassPrimitiveSettings LightmassSettings; // 0x4c8
};

struct UThrobber : UWidget {
	int32_t NumberOfPieces; // 0x110
	bool bAnimateHorizontally; // 0x114
	bool bAnimateVertically; // 0x115
	bool bAnimateOpacity; // 0x116
	USlateBrushAsset* PieceImage; // 0x118
	FSlateBrush Image; // 0x120
};

struct UParticleModuleOrientationAxisLock : UParticleModuleOrientationBase {
	EParticleAxisLock LockAxisFlags; // 0x30
};

struct UKSWeaponAnimInstance : UKSAnimInstance {
	bool m_bIsReloading; // 0x330
	float m_fIKAlpha; // 0x334
	float m_fIKBlendInTime; // 0x338
	float m_fIKBlendOutTime; // 0x33c
	FVector m_vADSOffset; // 0x340
	bool m_bIsMoving; // 0x34c
	float m_fMovingAlpha; // 0x350
	int32_t m_nFireImpulseCounter; // 0x354
	bool m_bFireImpulse; // 0x358
	float m_fADSAlpha; // 0x35c
	bool m_bIsSprinting; // 0x360
	float m_fLeadingPitch; // 0x364
	float m_fLeadingYaw; // 0x368
	float m_fLeadingPitchADS; // 0x36c
	float m_fLeadingYawADS; // 0x370
	FWeaponLeadingInfo LeadingPitch; // 0x374
	FWeaponLeadingInfo LeadingYaw; // 0x384
	FWeaponLeadingInfo LeadingPitchADS; // 0x394
	FWeaponLeadingInfo LeadingYawADS; // 0x3a4
	int32_t m_LandImpulseCounter; // 0x3c0
	int32_t m_JumpImpulseCounter; // 0x3c4
	bool m_bFoldIronSights; // 0x3c8
	int32_t WeaponAnimIndex; // 0x3cc
	bool bPlayerCrouching; // 0x3d0
	float TempPhoneFlip; // 0x3d4
	FRotator TargetBarrelRotation; // 0x3d8
	bool bEnableBarrelRotation; // 0x3e4
	bool bEnableRogueSelectPose; // 0x3e5
	bool bEnableWalkInPose; // 0x3e6
	bool bNeedsWalkInStartTime; // 0x3e7
	float WalkInStartTime; // 0x3e8
};

struct UKSActivityComponent_BattlePass : UKSActivityComponent {
	FGameplayTag SeasonTag; // 0x30
	UKSBattlepass* Battlepass; // 0x38
};

struct UBorderSlot : UPanelSlot {
	FMargin Padding; // 0x38
	EHorizontalAlignment HorizontalAlignment; // 0x48
	EVerticalAlignment VerticalAlignment; // 0x49
};

struct UClothPhysicalMeshDataBase_Legacy : UObject {
	TArray<FVector> Vertices; // 0x28
	TArray<FVector> Normals; // 0x38
	TArray<uint32_t> Indices; // 0x48
	TArray<float> InverseMasses; // 0x58
	TArray<FClothVertBoneData> BoneData; // 0x68
	int32_t NumFixedVerts; // 0x78
	int32_t MaxBoneWeights; // 0x7c
	TArray<uint32_t> SelfCollisionIndices; // 0x80
};

struct UCamMod_JumpLanding_C : UCamMod_Master_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x68
	bool WasJumping; // 0x70
};

struct UDropdownList_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UButton* ClickBlocker; // 0x528
	UScrollBox* DropdownScroll; // 0x530
	USizeBox* SizeBox_1; // 0x538
	TArray<FText> Options; // 0x540
	FMulticastInlineDelegate OnSelection; // 0x550
	FMulticastInlineDelegate OnCancel; // 0x560
	TArray<UDropdownEntry_C*> DropdownEntries; // 0x570
	UDropdownEntry_C* SelectedEntry; // 0x580
	float SizeBoxMaxHeight; // 0x588
	FMulticastInlineDelegate OnHoverPreview; // 0x590
};

struct UGameplayTask_WaitDelay : UGameplayTask {
	FMulticastInlineDelegate OnFinish; // 0x68
};

struct ULoginCreateAccount_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UPopupButton_C* BackButton; // 0x528
	UImage* bkg; // 0x530
	UCheckbox_C* CheckBox; // 0x538
	UWBP_error_report_C* CheckboxError; // 0x540
	UOutlineContainer_C* EmailContainer; // 0x548
	UWBP_error_report_C* EmailError; // 0x550
	UEditableText* EmailField; // 0x558
	UImage* highlightborder; // 0x560
	UImage* Image_531; // 0x568
	UImage* Image_607; // 0x570
	UTextBlock* LoginPrompt; // 0x578
	UOutlineContainer_C* PasswordContainer; // 0x580
	UWBP_error_report_C* PasswordError; // 0x588
	UEditableText* PasswordField; // 0x590
	UTextBlock* PasswordMismatchText; // 0x598
	UOutlineContainer_C* RepeatPasswordContainer; // 0x5a0
	UWBP_error_report_C* RepeatPasswordError; // 0x5a8
	UEditableText* RepeatPasswordField; // 0x5b0
	UPopupButton_C* SubmitButton; // 0x5b8
	UImage* TitleLogo; // 0x5c0
	UOutlineContainer_C* UsernameContainer; // 0x5c8
	UWBP_error_report_C* UsernameError; // 0x5d0
	UEditableText* UsernameField; // 0x5d8
	UImage* WarningIcon; // 0x5e0
	UTextBlock* WarningText; // 0x5e8
	UWBP_check_box_C* WBP_check_box; // 0x5f0
	UWBP_text_button_C* WBP_text_button; // 0x5f8
};

struct UBehaviorTree : UObject {
	UBTCompositeNode* RootNode; // 0x30
	UBlackboardData* BlackboardAsset; // 0x38
	TArray<UBTDecorator*> RootDecorators; // 0x40
	TArray<FBTDecoratorLogic> RootDecoratorOps; // 0x50
};

struct UGizmoScaledTransformSource : UGizmoBaseTransformSource {
	TScriptInterface<IGizmoTransformSource> ChildTransformSource; // 0x48
};

struct ASceneCaptureCube : ASceneCapture {
	USceneCaptureComponentCube* CaptureComponentCube; // 0x230
};

struct UInterpTrackFloatBase : UInterpTrack {
	FInterpCurveFloat FloatTrack; // 0x70
	float CurveTension; // 0x88
};

struct UBaseMediaSource : UMediaSource {
	FName PlayerName; // 0x80
};

struct UParticleModuleRotationRate : UParticleModuleRotationRateBase {
	FRawDistributionFloat StartRotationRate; // 0x30
};

struct UKSActivityRequirement_Booster : UKSActivityRequirement {
	int32_t RequiredActiveBoosterId; // 0x30
};

struct UQuitMatchCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UGraphNodeContextMenuContext : UObject {
	UBlueprint* Blueprint; // 0x28
	UEdGraph* Graph; // 0x30
	UEdGraphNode* Node; // 0x38
	bool bIsDebugging; // 0x48
};

struct UPawnSensingComponent : UActorComponent {
	float HearingThreshold; // 0xb0
	float LOSHearingThreshold; // 0xb4
	float SightRadius; // 0xb8
	float SensingInterval; // 0xbc
	float HearingMaxSoundAge; // 0xc0
	char bEnableSensingUpdates : 1; // 0xc4
	char bOnlySensePlayers : 1; // 0xc4
	char bSeePawns : 1; // 0xc4
	char bHearNoises : 1; // 0xc4
	FMulticastInlineDelegate OnSeePawn; // 0xd0
	FMulticastInlineDelegate OnHearNoise; // 0xe0
	float PeripheralVisionAngle; // 0xf0
	float PeripheralVisionCosine; // 0xf4
};

struct AKSJobSelector : AInfo {
	UKSJobSelectionRules* SelectionRules; // 0x220
	FJobSelectionTask PersonalActiveTask; // 0x228
	FJobSelectionTask LocalPersonalActiveTask; // 0x270
	bool bLocalPersonalTaskPendingComplete; // 0x2b8
	TArray<FJobSelectionChoice> Choices; // 0x2c0
	FJobSelectionTaskList CompletedTasks; // 0x2d0
	FJobSelectionTaskList ActiveTasks; // 0x400
	FJobSelectionTaskList PendingTasks; // 0x530
	bool bAllPersonalTasksAreComplete; // 0x660
	bool bLocalAllPersonalTasksAreComplete; // 0x661
	bool bSelectionHasEnded; // 0x662
	FMulticastInlineDelegate OnRequestSelectSuccessful; // 0x668
	FMulticastInlineDelegate OnRequestSelectFailed; // 0x678
	FMulticastInlineDelegate OnRequestCompleteSuccessful; // 0x688
	FMulticastInlineDelegate OnRequestCompleteFailed; // 0x698
	FMulticastInlineDelegate OnJobSelectionChoicesChanged; // 0x6a8
	FMulticastInlineDelegate OnTasksChanged; // 0x6b8
	FMulticastInlineDelegate OnPendingTasksChanged; // 0x6c8
	FMulticastInlineDelegate OnTaskCompleted; // 0x6d8
	FMulticastInlineDelegate OnPersonalActiveTaskChanged; // 0x6e8
	FMulticastInlineDelegate OnAllPersonalTasksCompleted; // 0x6f8
	FMulticastInlineDelegate OnEndJobSelection; // 0x708
	TWeakObjectPtr<AKSJobSelectionAuthority> SelectionAuthority; // 0x718
	int32_t JobSelectorId; // 0x720
	FKSPersistentPlayerId CachedPersistentPlayerId; // 0x728
	FPGame_ReplicatedTimerManagerSlave TimerManager; // 0x738
	bool bChoicesAreDirty; // 0x8b8
	bool bTasksAreDirty; // 0x8b9
	bool bPendingTasksAreDirty; // 0x8ba
	bool bPersonalTaskIsDirty; // 0x8bb
	bool bAllPersonTasksCompleteIsDirty; // 0x8bc
	bool bOwnerIsDirty; // 0x8bd
	TSet<FJobSelectionTaskId> BroadcastedTasks; // 0x8c0
	TMap<UKSJobItem*, int32_t> JobToChoiceIndexMap; // 0x910
	APlayerController* OwningPlayerController; // 0x9b0
	TWeakObjectPtr<UKSJobItem> PrevLocalSelectedJob; // 0x9b8
	TWeakObjectPtr<UKSJobItem> PrevLockedJobForLocalPlayer; // 0x9c0
};

struct UWBP_PerkDescSlot_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UTextBlock* ItemDesc; // 0x240
	UWBP_AsyncIcon_C* ItemIcon; // 0x248
	USizeBox* ItemIconWrapper; // 0x250
	UTextBlock* ItemName; // 0x258
	FText ItemTypeText; // 0x260
};

struct UKSSpawnRule_PlayerEventProximity : UKSSpawnRule_Proximity {
	float RecordDuration; // 0x48
	bool bScoreDecaysWithTime; // 0x4c
	bool bConsidersFriendlies; // 0x4d
	bool bConsidersEnemies; // 0x4e
	bool bConsidersSelf; // 0x4f
};

struct UShotgunReticle_C : UReticleBase_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x258
	UWidgetAnimation* GaugeFade; // 0x260
	UWidgetAnimation* ADSFade; // 0x268
	UCanvasPanel* AmmoGauge; // 0x270
	UImage* AmmoGaugeBG; // 0x278
	UProgressBar* AmmoGaugeFill; // 0x280
	UProgressBar* AmmoGuade_Replenish; // 0x288
	UWidgetSwitcher* Bottom_Left_Bracket; // 0x290
	UWidgetSwitcher* Bottom_Right_Bracket; // 0x298
	UImage* CenterDot; // 0x2a0
	UImage* CurveBottomLeft; // 0x2a8
	UImage* CurveBottomLeft_2; // 0x2b0
	UImage* CurveBottomLeft_3; // 0x2b8
	UImage* CurveBottomRight; // 0x2c0
	UImage* CurveBottomRight_2; // 0x2c8
	UImage* CurveBottomRight_3; // 0x2d0
	UImage* CurveTopLeft; // 0x2d8
	UImage* CurveTopLeft_2; // 0x2e0
	UImage* CurveTopLeft_3; // 0x2e8
	UImage* CurveTopRight; // 0x2f0
	UImage* CurveTopRight_2; // 0x2f8
	UImage* CurveTopRight_3; // 0x300
	UImage* reddot; // 0x308
	UWidgetSwitcher* Top_Left_Bracket; // 0x310
	UWidgetSwitcher* Top_Right_Bracket; // 0x318
	FTimerHandle GrenadeTickTimer; // 0x320
	float CachedOffset; // 0x328
	FLinearColor AmmoColor; // 0x32c
	float BonusAmmo; // 0x33c
	float BonusAmmoTime; // 0x340
};

struct UWBP_ItemInfoContainer_Centered_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* Show; // 0x240
	UImage* ItemNameBG; // 0x248
	UImage* ItemNameBG_2; // 0x250
	UTextBlock* ItemNameField; // 0x258
	UImage* ItemRaritySwatch; // 0x260
	URichTextBlock* RarityRichText; // 0x268
	FText Current Item Type Text; // 0x270
	FText Current Rarity Format Text; // 0x288
	bool Current IsCurrency; // 0x2a0
};

struct UParticleModuleLocationPrimitiveTriangle : UParticleModuleLocationBase {
	FRawDistributionVector StartOffset; // 0x30
	FRawDistributionFloat Height; // 0x78
	FRawDistributionFloat Angle; // 0xa8
	FRawDistributionFloat Thickness; // 0xd8
};

struct UKSSettingsPage : UKSWidget {
	TArray<UKSSettingsSection*> SettingsSections; // 0x520
	UKSSettingsSection* SettingsSectionClass; // 0x530
	UKSSettingsPageConfigAsset* PageConfigAsset; // 0x538
};

struct UJobCollection : UItemCollection {
	FText CollectionName; // 0x98
	FText CollectionDescription; // 0xb0
};

struct UKSActivityComponent_WeaponMastery_Milestone : UKSActivityComponent {
	int32_t MilestoneTier; // 0x30
};

struct UARTrackableNotifyComponent : UActorComponent {
	FMulticastInlineDelegate OnAddTrackedGeometry; // 0xb0
	FMulticastInlineDelegate OnUpdateTrackedGeometry; // 0xc0
	FMulticastInlineDelegate OnRemoveTrackedGeometry; // 0xd0
	FMulticastInlineDelegate OnAddTrackedPlane; // 0xe0
	FMulticastInlineDelegate OnUpdateTrackedPlane; // 0xf0
	FMulticastInlineDelegate OnRemoveTrackedPlane; // 0x100
	FMulticastInlineDelegate OnAddTrackedPoint; // 0x110
	FMulticastInlineDelegate OnUpdateTrackedPoint; // 0x120
	FMulticastInlineDelegate OnRemoveTrackedPoint; // 0x130
	FMulticastInlineDelegate OnAddTrackedImage; // 0x140
	FMulticastInlineDelegate OnUpdateTrackedImage; // 0x150
	FMulticastInlineDelegate OnRemoveTrackedImage; // 0x160
	FMulticastInlineDelegate OnAddTrackedFace; // 0x170
	FMulticastInlineDelegate OnUpdateTrackedFace; // 0x180
	FMulticastInlineDelegate OnRemoveTrackedFace; // 0x190
	FMulticastInlineDelegate OnAddTrackedEnvProbe; // 0x1a0
	FMulticastInlineDelegate OnUpdateTrackedEnvProbe; // 0x1b0
	FMulticastInlineDelegate OnRemoveTrackedEnvProbe; // 0x1c0
	FMulticastInlineDelegate OnAddTrackedObject; // 0x1d0
	FMulticastInlineDelegate OnUpdateTrackedObject; // 0x1e0
	FMulticastInlineDelegate OnRemoveTrackedObject; // 0x1f0
};

struct UKSViewRedirector_OpeningCinematic : UPUMG_ViewRedirecter {
	UDataTable* MediaPlayerDataTable; // 0x28
};

struct UKSPlayerMod_ReloadTime : UKSPlayerMod {
	float ReloadTimeMultiplier; // 0x330
};

struct AKSGameHUDNew : AKSHUDCommon {
	UUserWidget* AimAssistDebugWidgetClass; // 0x620
	TWeakObjectPtr<UUserWidget> AimAssistDebugWidget; // 0x628
	TWeakObjectPtr<AKSPlayerState> CurrentKSPlayerState; // 0x630
	TArray<FDataTableInfo> BaseAssetDataTables; // 0x638
	UDynamicSkinTable* AssetDataTableManager; // 0x648
	UMultiSkinObject* SkinObject; // 0x650
	UKSHUDStateTracker* HUDStateTracker; // 0x658
	FMulticastInlineDelegate OnHudFubarDel; // 0x6b0
};

struct UTransformGizmo : UInteractiveGizmo {
	UTransformProxy* ActiveTarget; // 0x40
	bool bSnapToWorldGrid; // 0x48
	bool bUseContextCoordinateSystem; // 0x49
	EToolContextCoordinateSystem CurrentCoordinateSystem; // 0x4c
	TArray<UPrimitiveComponent*> ActiveComponents; // 0xe0
	TArray<UPrimitiveComponent*> NonuniformScaleComponents; // 0xf0
	TArray<UInteractiveGizmo*> ActiveGizmos; // 0x100
	UGizmoConstantFrameAxisSource* CameraAxisSource; // 0x120
	UGizmoComponentAxisSource* AxisXSource; // 0x128
	UGizmoComponentAxisSource* AxisYSource; // 0x130
	UGizmoComponentAxisSource* AxisZSource; // 0x138
	UGizmoComponentAxisSource* UnitAxisXSource; // 0x140
	UGizmoComponentAxisSource* UnitAxisYSource; // 0x148
	UGizmoComponentAxisSource* UnitAxisZSource; // 0x150
	UGizmoTransformChangeStateTarget* StateTarget; // 0x158
	UGizmoScaledTransformSource* ScaledTransformSource; // 0x160
};

struct UKSModInst_OnEndActiveReload : UKSModInst_OnEquipmentActive {
	FMulticastInlineDelegate OnReloadStart; // 0x1b8
	FMulticastInlineDelegate OnReloadEnd; // 0x1c8
	bool bUseWeaponAssetReloadTime; // 0x1d8
	float ReloadTime; // 0x1dc
};

struct UKSItemDataTable : UDataTable {
	TArray<FString> DirectoriesToScan; // 0xc8
	TArray<UKSItem*> ItemClassesToFilter; // 0xd8
};

struct UInterpTrackLinearColorBase : UInterpTrack {
	FInterpCurveLinearColor LinearColorTrack; // 0x70
	float CurveTension; // 0x88
};

struct UAnimationSharingManager : UObject {
	TArray<USkeleton*> Skeletons; // 0x28
	TArray<UAnimSharingInstance*> PerSkeletonData; // 0x38
};

struct UKSBTTask_MoveToward : UBTTask_MoveDirectlyToward {
	float SpeedMultiplier; // 0xb8
	bool bSprint; // 0xbc
	UKSBTAction* MoveAction; // 0xc0
	UKSBTAction* SprintAction; // 0xc8
};

struct UParticleModuleLifetime_Seeded : UParticleModuleLifetime {
	FParticleRandomSeedInfo RandomSeedInfo; // 0x60
};

struct UWBP_BoosterInventoryItem_C : UKSBoostInventoryItemWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x530
	UWBP_AsyncIcon_C* BoostItemIcon; // 0x538
	UImage* DecroLine; // 0x540
	UTextBlock* DescText; // 0x548
	UImage* DescTextBg; // 0x550
	UTextBlock* QuantityText; // 0x558
	UTextBlock* TitleText; // 0x560
	UImage* TitleTextBg; // 0x568
	UWBP_ButtonSlot_Cosmetic_C* WBP_ButtonSlot_Cosmetic; // 0x570
	UKSItem* Current Item Old; // 0x578
	UAkAudioEvent* BoostConfirmSound; // 0x580
};

struct UWBP_SettingsBinding_Clear_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* Hover; // 0x528
	UImage* Image_361; // 0x530
	UButton* RadioButton; // 0x538
	FMulticastInlineDelegate On Cleared; // 0x540
	UAkAudioEvent* HoverSettingsRadioSFX; // 0x550
	UAkAudioEvent* ClickSettingsRadioSFX; // 0x558
};

struct UAcquisitionItemData : UObject {
	UPUMG_StoreItem* StoreItem; // 0x28
	int32_t Quantity; // 0x30
	UKSWeaponAsset* AssociatedWeapon; // 0x38
};

struct UPUMG_ChatDataFactory : UPUMG_DataFactory {
	FMulticastInlineDelegate OnChatMessageReceived; // 0x38
	FMulticastInlineDelegate OnChatMessageRead; // 0x48
	FMulticastInlineDelegate OnChatChannelJoined; // 0x58
	FMulticastInlineDelegate OnChatChannelLeft; // 0x68
	TArray<int32_t> ChatMessageIds; // 0x78
	TArray<int32_t> PendingChatMessageIds; // 0x88
	TMap<int32_t, FPUMG_ChatData> ChatMessagesById; // 0x98
	int32_t LastCreatedMessageId; // 0xe8
	TArray<int64_t> m_FilteredPlayerIds; // 0xf0
	TArray<FPUMG_ChatCommand> ChatCommands; // 0x100
};

struct UMaterialExpressionShadingPathSwitch : UMaterialExpression {
	FExpressionInput Default; // 0x40
	FExpressionInput Inputs[0x3]; // 0x54
};

struct UMediaPlayer : UObject {
	FMulticastInlineDelegate OnEndReached; // 0x28
	FMulticastInlineDelegate OnMediaClosed; // 0x38
	FMulticastInlineDelegate OnMediaOpened; // 0x48
	FMulticastInlineDelegate OnMediaOpenFailed; // 0x58
	FMulticastInlineDelegate OnPlaybackResumed; // 0x68
	FMulticastInlineDelegate OnPlaybackSuspended; // 0x78
	FMulticastInlineDelegate OnSeekCompleted; // 0x88
	FMulticastInlineDelegate OnTracksChanged; // 0x98
	FTimespan CacheAhead; // 0xa8
	FTimespan CacheBehind; // 0xb0
	FTimespan CacheBehindGame; // 0xb8
	bool NativeAudioOut; // 0xc0
	bool PlayOnOpen; // 0xc1
	char Shuffle : 1; // 0xc4
	char Loop : 1; // 0xc4
	UMediaPlaylist* Playlist; // 0xc8
	int32_t PlaylistIndex; // 0xd0
	FTimespan TimeDelay; // 0xd8
	float HorizontalFieldOfView; // 0xe0
	float VerticalFieldOfView; // 0xe4
	FRotator ViewRotation; // 0xe8
	FGuid PlayerGuid; // 0x120
};

struct ALobbyMainCharacter_C : AKSLobbyCharacter {
	FPointerToUberGraphFrame UberGraphFrame; // 0x3e10
	ETimelineDirection LobbyProp01_Timeline__Direction_311B7F8B46533A11B70CFAA92E9DA987; // 0x3e18
	UTimelineComponent* LobbyProp01_Timeline; // 0x3e20
	ETimelineDirection LobbyWeapon02_Timeline__Direction_6E3E791441C09FAF955C7099C1934001; // 0x3e28
	UTimelineComponent* LobbyWeapon02_Timeline; // 0x3e30
	ETimelineDirection LobbyWeapon01_Timeline__Direction_A9FF0C36405CB79CE4A5609C33E7F935; // 0x3e38
	UTimelineComponent* LobbyWeapon01_Timeline; // 0x3e40
	TArray<FName> LobbyFidgetKeywordArray; // 0x3e48
	FTransform Transform Reset; // 0x3e60
	float Lobby Anim total duration; // 0x3e90
	FTimerHandle Lobby Anim timer; // 0x3e98
	bool Loop montage; // 0x3ea0
	TArray<int32_t> Current Persistent Material Override IDs; // 0x3ea8
	EKSLobbyCharacterAnimationPose Lobby Character Animation Pose; // 0x3eb8
	float Lobby Anim Starting Time; // 0x3ebc
	bool HasInitializedNameplate; // 0x3ec0
	bool Emote; // 0x3ec1
	bool Emote Queued; // 0x3ec2
};

struct UTestMovieSceneSubTrack : UMovieSceneSubTrack {
	TArray<UMovieSceneSection*> SectionArray; // 0x68
};

struct UAnimNotifyState_TimedNiagaraEffect : UAnimNotifyState {
	UNiagaraSystem* Template; // 0x30
	FName SocketName; // 0x38
	FVector LocationOffset; // 0x40
	FRotator RotationOffset; // 0x4c
	bool bDestroyAtEnd; // 0x58
};

struct AKSWeapon_TargetSurface : AKSWeapon_Aimed {
	FMulticastInlineDelegate OnSurfaceTargetFireFailure; // 0x800
	FMulticastInlineDelegate OnSurfaceValidityChanged; // 0x810
	bool ValidTarget; // 0x820
};

struct UKSWeaponDetailScreen : UKSWidget {
	UKSWeaponProgressMeter* WeaponMasteryMeter; // 0x520
	UKSRelatedRoguesGroup* RelatedRogues; // 0x528
	UKSSideNavigationOverlay* SideNavigationOverlay; // 0x530
	UKSWeaponMilestoneDisplay* WeaponMilestones; // 0x538
	UKSWeaponStatsPanel* WeaponStatsPanel; // 0x540
	UKSWeaponAsset* PopulatedWeaponAsset; // 0x548
	FName DesiredEquipSound; // 0x580
	bool bPlayedWeaponEquipSound; // 0x588
};

struct UInterpTrackColorProp : UInterpTrackVectorBase {
	FName PropertyName; // 0x90
};

struct UAutoDestroySubsystem : UWorldSubsystem {
	TArray<AActor*> ActorsToPoll; // 0x38
};

struct UEditableGameplayTagQueryExpression_AnyTagsMatch : UEditableGameplayTagQueryExpression {
	FGameplayTagContainer Tags; // 0x28
};

struct ASceneCapture2D : ASceneCapture {
	USceneCaptureComponent2D* CaptureComponent2D; // 0x230
};

struct UKSActivityComponent_Achievement : UKSActivityComponent {
	TMap<FName, FString> AchievementIdByOSSName; // 0x30
};

struct AKSMedPack : AKSWeapon {
	bool bUseWhileMovingOverride; // 0x6d8
	bool bCanStopFire; // 0x6d9
};

struct UAnimNotifyState_Trail : UAnimNotifyState {
	UParticleSystem* PSTemplate; // 0x30
	FName FirstSocketName; // 0x38
	FName SecondSocketName; // 0x40
	ETrailWidthMode WidthScaleMode; // 0x48
	FName WidthScaleCurve; // 0x4c
	char bRecycleSpawnedSystems : 1; // 0x54
};

struct AKSNeutralBombZone : AKSDropOffZone {
	int32_t BombZoneGroup; // 0x430
	FMulticastInlineDelegate OnBombZoneActive; // 0x438
	UStaticMeshComponent* BombZone; // 0x448
	FName CameraName; // 0x450
	float CameraTransitionInTime; // 0x458
	float CameraTransitionOutTime; // 0x45c
	bool bForceCameraShoulder; // 0x460
	ECameraShoulder CameraShoulder; // 0x461
	float CameraMaxRotation; // 0x464
	bool CameraRotationLockout; // 0x468
	bool bLockPitch; // 0x469
	bool bLockYaw; // 0x46a
	bool bCameraShake; // 0x46b
	UCameraShake* CameraShake; // 0x470
};

struct UKSBRC_GiveEquipment : UKSPlayerBehaviorRuleComponent {
	bool bAddToLoadout; // 0xc8
	TArray<UKSItem*> ItemsToGive; // 0xd0
	TArray<FGameplayTag> SlotsToRemove; // 0xe0
};

struct UShaderPlatformQualitySettings : UObject {
	FMaterialQualityOverrides QualityOverrides[0x3]; // 0x28
};

struct UWidgetAnimationPlayCallbackProxy : UObject {
	FMulticastInlineDelegate Finished; // 0x28
};

struct UMaterialExpressionFloor : UMaterialExpression {
	FExpressionInput Input; // 0x40
};

struct AEmitterCameraLensEffectBase : AEmitter {
	UParticleSystem* PS_CameraEffect; // 0x270
	UParticleSystem* PS_CameraEffectNonExtremeContent; // 0x278
	APlayerCameraManager* BaseCamera; // 0x280
	FTransform RelativeTransform; // 0x290
	float BaseFOV; // 0x2c0
	char bAllowMultipleInstances : 1; // 0x2c4
	char bResetWhenRetriggered : 1; // 0x2c4
	TArray<AEmitterCameraLensEffectBase*> EmittersToTreatAsSame; // 0x2c8
	float DistFromCamera; // 0x2d8
};

struct UMasterAudioSubmixCaptureProtocol : UMovieSceneAudioCaptureProtocolBase {
	FString Filename; // 0x58
};

struct UKSEmotionComponent : UActorComponent {
	FMulticastInlineDelegate OnEmotionChanged; // 0xb0
	TScriptInterface<IKSEmotionComponentOwner> EmotionComponentOwner; // 0xc0
	TMap<int32_t, EKSEmotion> EmotionInstances; // 0xd0
	int32_t TopInstanceId; // 0x120
	EKSEmotion TopEmotionEnum; // 0x124
	int32_t NextEmotionId; // 0x128
	TArray<FKSEmoteConversionEntry> ConversionEntries; // 0x180
	TMap<FName, EKSEmotion> EmotionNameToEnumMap; // 0x190
	TMap<EKSEmotion, FName> EmotionEnumToNameMap; // 0x1e0
};

struct UWBP_NavBar_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UImage* DisableOverlay; // 0x528
	UOverlay* GamepadBumperLeft; // 0x530
	UOverlay* GamepadBumperRight; // 0x538
	UHorizontalBox* NavigationContainer; // 0x540
	UImage* TabLeftButtonImage; // 0x548
	UImage* TabRightButtonImage; // 0x550
	UOverlay* TopBarContainer; // 0x558
	FMulticastInlineDelegate OnButtonSelected; // 0x560
	bool NextIsTarget; // 0x570
	FMulticastInlineDelegate OnButtonsCreated; // 0x578
	int32_t TabIndex; // 0x588
};

struct UKSModInst_MartialArtist : UKSModInst_ActivatedTarget {
	EThrowDirection TargetThrowDirection; // 0x588
	float ChargeTime; // 0x58c
};

struct UFindSessionsCallbackProxy : UOnlineBlueprintCallProxyBase {
	FMulticastInlineDelegate OnSuccess; // 0x30
	FMulticastInlineDelegate OnFailure; // 0x40
};

struct UMovieSceneByteTrack : UMovieScenePropertyTrack {
	UEnum* Enum; // 0x88
};

struct UPGame_CharacterMovementComponent : UCharacterMovementComponent {
	bool bUseTweenWalkingPhysics; // 0x6a0
	FChargeInfo r_ChargeInfo; // 0x6a8
	FTweenInfo r_TweenInfo; // 0x6c4
};

struct UTileView : UListView {
	float EntryHeight; // 0x380
	float EntryWidth; // 0x384
	EListItemAlignment TileAlignment; // 0x388
	bool bWrapHorizontalNavigation; // 0x389
};

struct USub_Hero_ABP_Zipline_C : UKSCharacterAnimInst {
	FAnimNode_Root AnimGraphNode_Root; // 0x10f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_15; // 0x1130
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_14; // 0x1168
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_13; // 0x11a0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_12; // 0x11d8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_11; // 0x1210
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_10; // 0x1248
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_9; // 0x1280
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8; // 0x12b8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_7; // 0x12f0
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_6; // 0x1328
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_5; // 0x1360
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4; // 0x1398
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3; // 0x13d0
	FAnimNode_StateResult AnimGraphNode_StateResult_9; // 0x1408
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_8; // 0x1448
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8; // 0x1648
	FAnimNode_StateResult AnimGraphNode_StateResult_8; // 0x1738
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6; // 0x1778
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8; // 0x1800
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_7; // 0x18b0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_7; // 0x1ab0
	FAnimNode_StateResult AnimGraphNode_StateResult_7; // 0x1ba0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_6; // 0x1be0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_6; // 0x1de0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_5; // 0x1ed0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_5; // 0x20d0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_2; // 0x21c0
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_4; // 0x2280
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_4; // 0x2480
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_3; // 0x2570
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_3; // 0x2770
	FAnimNode_StateResult AnimGraphNode_StateResult_6; // 0x2860
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned_2; // 0x28a0
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_2; // 0x2aa0
	FAnimNode_StateResult AnimGraphNode_StateResult_5; // 0x2b90
	FAnimNode_StateMachine AnimGraphNode_StateMachine_3; // 0x2bd0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5; // 0x2c90
	FAnimNode_StateResult AnimGraphNode_StateResult_4; // 0x2d18
	FAnimNode_StateMachine AnimGraphNode_StateMachine_2; // 0x2d58
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7; // 0x2e18
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2; // 0x2ec8
	FAnimNode_TransitionResult AnimGraphNode_TransitionResult; // 0x2f00
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_5; // 0x2f38
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4; // 0x3098
	FAnimNode_StateResult AnimGraphNode_StateResult_3; // 0x3120
	FAnimNode_BlendSpacePlayerSkinned AnimGraphNode_BlendSpaceSkinned; // 0x3160
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_4; // 0x3360
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4; // 0x34c0
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3; // 0x3590
	FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer; // 0x3618
	FAnimNode_StateResult AnimGraphNode_StateResult_2; // 0x3708
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_3; // 0x3748
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2; // 0x38a8
	FAnimNode_StateResult AnimGraphNode_StateResult; // 0x3930
	FAnimNode_StateMachine AnimGraphNode_StateMachine; // 0x3970
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6; // 0x3a30
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_4; // 0x3ae0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_18; // 0x3ba8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_4; // 0x3be0
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_8; // 0x3cb8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_7; // 0x3e78
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_17; // 0x4038
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5; // 0x4070
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_3; // 0x4120
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_6; // 0x41f8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_5; // 0x43b8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_16; // 0x4578
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_15; // 0x45b0
	FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum; // 0x45e8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_14; // 0x46a8
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_2; // 0x46e0
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_4; // 0x47b8
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_3; // 0x4978
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_13; // 0x4b38
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3; // 0x4b70
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4; // 0x4c38
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_12; // 0x4ce8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_11; // 0x4d20
	FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive; // 0x4d58
	FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer; // 0x4e30
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned_2; // 0x4eb8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3; // 0x5018
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_2; // 0x50c8
	FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool; // 0x5178
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_3; // 0x5228
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2; // 0x52f8
	FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend; // 0x53c8
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2; // 0x5498
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_10; // 0x5560
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9; // 0x5598
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8; // 0x55d0
	FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose; // 0x5608
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7; // 0x56d0
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6; // 0x5708
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5; // 0x5740
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4; // 0x5778
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3; // 0x57b0
	FAnimNode_SequenceSkinned AnimGraphNode_SequenceSkinned; // 0x57e8
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2; // 0x5948
	FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend; // 0x5980
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned_2; // 0x5a58
	FAnimNode_AimOffsetSkinned AnimGraphNode_AimOffsetSkinned; // 0x5c18
	FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose; // 0x5dd8
	AKSCharacter* Character; // 0x5e10
	FRotator Zipline Lower Wheel Rotator; // 0x5e18
	FRotator Zipline Upper Wheel Rotator; // 0x5e24
	float Wheel Speed; // 0x5e30
	bool Enable Zipline Eng Aims; // 0x5e34
	bool UseHuntingRifleHold; // 0x5e35
	bool EnableLayeredHandAdditives; // 0x5e36
	bool bIsServer; // 0x5e37
	float Temp_float_Variable; // 0x5e38
	float Temp_float_Variable_2; // 0x5e3c
	bool Temp_bool_Variable; // 0x5e40
	float K2Node_Select_Default; // 0x5e44
	bool Temp_bool_Variable_2; // 0x5e48
	float CallFunc_BreakRotator_Roll; // 0x5e4c
	float CallFunc_BreakRotator_Pitch; // 0x5e50
	float CallFunc_BreakRotator_Yaw; // 0x5e54
	float Temp_float_Variable_3; // 0x5e58
	float Temp_float_Variable_4; // 0x5e5c
	bool Temp_bool_Variable_3; // 0x5e60
	float K2Node_Select_Default_2; // 0x5e64
	float CallFunc_BreakRotator_Roll_2; // 0x5e68
	float CallFunc_BreakRotator_Pitch_2; // 0x5e6c
	float CallFunc_BreakRotator_Yaw_2; // 0x5e70
	float Temp_float_Variable_5; // 0x5e74
	float Temp_float_Variable_6; // 0x5e78
	bool Temp_bool_Variable_4; // 0x5e7c
	float K2Node_Select_Default_3; // 0x5e80
	float Temp_float_Variable_7; // 0x5e84
	float Temp_float_Variable_8; // 0x5e88
	float K2Node_Select_Default_4; // 0x5e8c
	AKSCharacter* K2Node_DynamicCast_AsKSCharacter; // 0x5e90
	bool K2Node_DynamicCast_bSuccess; // 0x5e98
};

struct UOnlineEngineInterfaceImpl : UOnlineEngineInterface {
	FName VoiceSubsystemNameOverride; // 0x28
};

struct UInterpTrackInstFloatParticleParam : UInterpTrackInst {
	float ResetFloat; // 0x28
};

struct ATaskBeacon_C : AKSPingBeaconBase {
	FPointerToUberGraphFrame UberGraphFrame; // 0x2e0
	UParticleSystemComponent* ParticleSystem; // 0x2e8
	FLinearColor PingColor; // 0x2f0
	FDataTableInfo PingTypesDT ; // 0x300
};

struct UPlayerHealthMeterSegment_C : UUserWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x238
	UWidgetAnimation* DownedPulse; // 0x240
	UWidgetAnimation* ImmunePulse; // 0x248
	UWidgetAnimation* DisableImmune; // 0x250
	UWidgetAnimation* EnableImmune; // 0x258
	UWidgetAnimation* DamagePulse; // 0x260
	UImage* Dot_Lower; // 0x268
	UImage* Dot_Upper; // 0x270
	UCanvasPanel* Dots; // 0x278
	UImage* EnemyDownedBG; // 0x280
	UImage* Image_120; // 0x288
	UWidgetSwitcher* IsDownedSwitcher; // 0x290
	UWidgetSwitcher* SegmentBGSwitcher; // 0x298
	UOverlay* SliceArmor; // 0x2a0
	UImage* SliceArmorDamaged; // 0x2a8
	UImage* SliceArmorFill; // 0x2b0
	UImage* SliceArmorTrim; // 0x2b8
	UImage* SliceDownedFill_2; // 0x2c0
	UImage* SliceDownedTrim_2; // 0x2c8
	UOverlay* SliceHealth; // 0x2d0
	UImage* SliceHealthDamaged; // 0x2d8
	UImage* SliceHealthFill; // 0x2e0
	UImage* SliceHealthTrim; // 0x2e8
	UImage* SliceImmuneFill; // 0x2f0
	UOverlay* SliceImmuneOverlay; // 0x2f8
	UOverlay* SliceInactive; // 0x300
	UImage* SliceInactiveFill; // 0x308
	USpacer* SliceMissing; // 0x310
	UOverlay* SliceOverheal; // 0x318
	UImage* SliceOverhealDamaged; // 0x320
	UImage* SliceOverhealFill; // 0x328
	UImage* SliceOverhealTrim; // 0x330
	UImage* StandardBG; // 0x338
	bool bIsEnemyHealth; // 0x340
	EColorVisionDeficiency ColorCorrection; // 0x341
};

struct UWBP_ToastNotifcation_Entry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OffsetY; // 0x528
	UWidgetAnimation* Outro; // 0x530
	UWidgetAnimation* Wait; // 0x538
	UWidgetAnimation* Intro; // 0x540
	UImage* AnimFade; // 0x548
	UImage* AnimSwatch; // 0x550
	UImage* ColorSwatch; // 0x558
	UImage* Glow; // 0x560
	UImage* Icon; // 0x568
	UTextBlock* Message; // 0x570
	FToastData ToastData; // 0x578
	FMulticastInlineDelegate OnRemoveToastNotification; // 0x5d0
	FMulticastInlineDelegate FinishedIntroAnimation; // 0x5e0
	UAkAudioEvent* SFXErrorToast; // 0x5f0
	UAkAudioEvent* SFXFriendToast; // 0x5f8
	UAkAudioEvent* SFXInfoToast; // 0x600
	UAkAudioEvent* SFXPartyToast; // 0x608
	UAkAudioEvent* SFXBoostActivationToast; // 0x610
};

struct UParticleModuleColor : UParticleModuleColorBase {
	FRawDistributionVector StartColor; // 0x30
	FRawDistributionFloat StartAlpha; // 0x78
	char bClampAlpha : 1; // 0xa8
};

struct URifleReticle_C : UReticleBase_C {
	FPointerToUberGraphFrame UberGraphFrame; // 0x258
	UWidgetAnimation* GaugeFade; // 0x260
	UOverlay* AmmoProgress; // 0x268
	UWidgetSwitcher* Center_Dot; // 0x270
	UImage* CenterDot_Image; // 0x278
	UImage* CenterDot_Image_2; // 0x280
	UImage* circle_ammo_replenish; // 0x288
	UImage* circle_progress; // 0x290
	UImage* cirlce_progress_bg; // 0x298
	UImage* reddot; // 0x2a0
	UWBP_ReticleHair_C* WBP_ReticleHair_Bottom; // 0x2a8
	UWBP_ReticleHair_C* WBP_ReticleHair_Left; // 0x2b0
	UWBP_ReticleHair_C* WBP_ReticleHair_Right; // 0x2b8
	UWBP_ReticleHair_C* WBP_ReticleHair_Top; // 0x2c0
	FTimerHandle GrenadeTickTimer; // 0x2c8
	float OffsetScaleThreshold; // 0x2d0
	FVector2D MagazineOffset; // 0x2d4
	float LowAmmoThreshold_0_1; // 0x2dc
	EReticleType ReticleType; // 0x2e0
	float MinOffset; // 0x2e4
	float BonusAmmo; // 0x2e8
	float BonusAmmoTime; // 0x2ec
	FLinearColor AmmoColor; // 0x2f0
};

struct UMaterialExpressionTextureLOD : UMaterialExpressionTextureBase {
	FExpressionInput Coordinates; // 0x50
	FExpressionInput TextureObject; // 0x64
	ESamplerSourceMode SamplerSource; // 0x78
	char ConstCoordinate; // 0x79
};

struct UAnimNotify_PlayParticleEffect : UAnimNotify {
	UParticleSystem* PSTemplate; // 0x38
	FVector LocationOffset; // 0x40
	FRotator RotationOffset; // 0x4c
	FVector Scale; // 0x58
	char Attached : 1; // 0x80
	FName SocketName; // 0x84
};

struct UKSActivityRewardCondition_AffectedByGadgetOrMod : UKSActivityRewardCondition {
	bool RequireAffected; // 0x30
	TArray<TSoftObjectPtr<UKSPlayerMod>> ModsToIgnore; // 0x38
};

struct UBTDecorator_SetTagCooldown : UBTDecorator {
	FGameplayTag CooldownTag; // 0x68
	float CooldownDuration; // 0x70
	bool bAddToExistingDuration; // 0x74
};

struct USoundNodeDialoguePlayer : USoundNode {
	FDialogueWaveParameter DialogueWaveParameter; // 0x48
	char bLooping : 1; // 0x68
};

struct UMovieSceneTrack : UMovieSceneSignedObject {
	FMovieSceneTrackEvalOptions EvalOptions; // 0x50
	bool bIsEvalDisabled; // 0x55
};

struct UPGame_PlayerInputDefault : UObject {
	bool bRestrictInvalidInputType; // 0x28
};

struct UKSDamageTypeStun : UKSDamageTypeBase {
	float StunDuration; // 0x138
};

struct UParticleModuleLocationDirect : UParticleModuleLocationBase {
	FRawDistributionVector Location; // 0x30
	FRawDistributionVector LocationOffset; // 0x78
	FRawDistributionVector ScaleFactor; // 0xc0
	FRawDistributionVector Direction; // 0x108
};

struct AKSGameMode_Modular : AKSGameMode_RoundGame {
	FMulticastInlineDelegate OnTeamWiped; // 0x1088
	FMulticastInlineDelegate OnTimerModifiedMidPhase; // 0x1098
	bool bMarkedInProgress; // 0x10a8
	bool bUseInitialSpawnPoints; // 0x10a9
	bool bAutoRestoreRespawnConfigOnNewRound; // 0x10aa
	bool bAutoRevertTeamSwapsOnNewRound; // 0x10ab
	FMulticastInlineDelegate OnTeamChanged; // 0x10b0
	bool bAwardBonusPointToRoundWinner; // 0x10c0
	TMap<AKSPlayerState*, AKSTeamState*> OriginalPlayersToTeams; // 0x10c8
	TMap<int32_t, int32_t> ScoreAtRoundStart; // 0x1118
	UKSPhaseRuleComponent* ActivePhaseRule; // 0x1168
};

struct UWBP_WeaponSideNavigationOverlay_C : UKSSideNavigationOverlay {
	FPointerToUberGraphFrame UberGraphFrame; // 0x530
	UWidgetAnimation* animToggleLeft; // 0x538
	UWidgetAnimation* animToggleRight; // 0x540
	UWidgetAnimation* animHoverRight; // 0x548
	UWidgetAnimation* animHoverLeft; // 0x550
	UWBP_KeyCallout_C* GamepadPrompt; // 0x558
	UWBP_KeyCallout_C* GamepadPrompt_2; // 0x560
	UWidgetSwitcher* GamepadSwitcher_Left; // 0x568
	UWidgetSwitcher* GamepadSwitcher_Right; // 0x570
	UButton* HitTargetLeft; // 0x578
	UButton* HitTargetRight; // 0x580
	UImage* HoverOverlay_Left; // 0x588
	UImage* HoverOverlay_Right; // 0x590
	UImage* LeftArrow; // 0x598
	UHorizontalBox* LeftGroup; // 0x5a0
	UTextBlock* NextWeaponText; // 0x5a8
	UTextBlock* PrevWeaponText; // 0x5b0
	UImage* RightArrow; // 0x5b8
	UHorizontalBox* RightGroup; // 0x5c0
	UAkAudioEvent* ClickWEPSideNavOverlaySFX; // 0x5c8
	UAkAudioEvent* HoverWEPSideNavOverlaySFX; // 0x5d0
};

struct UKSEquipmentCosmeticComponent : UActorComponent {
	bool bHasBeenUnequipped; // 0xb0
	TScriptInterface<IKSEquipmentContainerOwner> EquipmentContainerOwner; // 0xb8
	FKSEquipmentId EquipmentId; // 0xc8
	FKSEquipmentId AuthorityEquipmentId; // 0xcc
	FGameplayTag EquipPoint; // 0xd0
	bool bNoEquipPoint; // 0xd8
	EKSRarity Rarity; // 0xd9
	TScriptInterface<ISkinTagAssetInterface> SkinTagAssetOwner; // 0xe0
	AKSCharacter* CharacterOwner; // 0xf8
	bool bPropSpawner; // 0x118
};

struct UCameraShake : UObject {
	char bSingleInstance : 1; // 0x28
	float OscillationDuration; // 0x2c
	float OscillationBlendInTime; // 0x30
	float OscillationBlendOutTime; // 0x34
	FROscillator RotOscillation; // 0x38
	FVOscillator LocOscillation; // 0x5c
	FFOscillator FOVOscillation; // 0x80
	float AnimPlayRate; // 0x8c
	float AnimScale; // 0x90
	float AnimBlendInTime; // 0x94
	float AnimBlendOutTime; // 0x98
	float RandomAnimSegmentDuration; // 0x9c
	UCameraAnim* Anim; // 0xa0
	char bRandomAnimSegment : 1; // 0xa8
	APlayerCameraManager* CameraOwner; // 0xc0
	float ShakeScale; // 0x148
	float OscillatorTimeRemaining; // 0x14c
	UCameraAnimInst* AnimInst; // 0x150
};

struct UNodeMappingContainer : UObject {
	TMap<FName, FNodeItem> SourceItems; // 0x28
	TMap<FName, FNodeItem> TargetItems; // 0x78
	TMap<FName, FName> SourceToTarget; // 0xc8
	TSoftObjectPtr<UObject> SourceAsset; // 0x118
	TSoftObjectPtr<UObject> TargetAsset; // 0x140
};

struct UKSBTTaskNode_SetCrowdFollowing : UBTTaskNode {
	bool bEnable; // 0x70
};

struct AKSNeutralBombSpawner : AKSLootSiteBase {
	FLootSiteDropInfo BombInfo; // 0x348
	bool bInitialSpawn; // 0x378
	bool bRespawn; // 0x379
};

struct AKSTeamState_Control : AKSTeamState {
	int32_t ControlScore; // 0x6f0
};

struct UKSDataMassInviteBase : UObject {
	FText Title; // 0x28
	FText ButtonLabel; // 0x40
	FDelegate OnShouldShow; // 0x58
	FDelegate OnClose; // 0x68
};

struct UOperatorField : UFieldNodeBase {
	float Magnitude; // 0xb0
	UFieldNodeBase* RightField; // 0xb8
	UFieldNodeBase* LeftField; // 0xc0
	EFieldOperationType Operation; // 0xc8
};

struct AKSMapPoint : AActor {
	FGameplayTagContainer MapPointTypes; // 0x220
	TArray<int32_t> ValidSides; // 0x240
	bool bShouldCrouch; // 0x250
};

struct UWBP_VerticalTabGroupEntry_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* animOnGamepadUnfocus; // 0x528
	UWidgetAnimation* animOnSelect; // 0x530
	UWidgetAnimation* animOnGamepadSelect; // 0x538
	UWidgetAnimation* animOnFocus; // 0x540
	UWidgetAnimation* animOnHover; // 0x548
	UWBP_KeyCallout_C* BackCallout; // 0x550
	UImage* BackIcon; // 0x558
	UOverlay* BackIconGroup; // 0x560
	UImage* BottomStroke; // 0x568
	UImage* EndBarDecro; // 0x570
	USizeBox* EndBarDecroSizeBox; // 0x578
	UImage* GamepadSelectedGradient; // 0x580
	UButton* HitTarget; // 0x588
	UTextBlock* NameText; // 0x590
	UWBP_KeyCallout_C* SelectCallout; // 0x598
	UOverlay* SelectCalloutContainer; // 0x5a0
	UImage* SelectedGradient; // 0x5a8
	UImage* SimpleBg; // 0x5b0
	EVerticalTabState CurrentViewState; // 0x5b8
	FMulticastInlineDelegate OnTabSelected; // 0x5c0
	FMulticastInlineDelegate OnTabGamepadSelected; // 0x5d0
	FName ViewName; // 0x5e0
	FOverlayTabViewRow ViewInfo; // 0x5e8
	UAkAudioEvent* HoverSound; // 0x618
	UAkAudioEvent* ClickSound; // 0x620
};

struct UPopupManager_C : UPUMG_PopupManager {
	FPointerToUberGraphFrame UberGraphFrame; // 0x5e0
	UWidgetAnimation* OnShow; // 0x5e8
	UOverlay* BackfillRewardWrapper; // 0x5f0
	UImage* background; // 0x5f8
	UHorizontalBox* ButtonContainer; // 0x600
	USizeBox* ContentBox; // 0x608
	UVerticalBox* ContentVertBox; // 0x610
	URichTextBlock* DescRichText; // 0x618
	UTextBlock* HeaderText; // 0x620
	UImage* Image_1; // 0x628
	UImage* Image_197; // 0x630
	UImage* Shadow; // 0x638
	UWBP_StandardButton_02_C* StandardButton_02; // 0x640
	UWBP_StandardButton_02_C* StandardButton_02_C_2; // 0x648
	UTextBlock* SubheaderText; // 0x650
	UEditableTextBox* TextEntry; // 0x658
	UTextBlock* Warning; // 0x660
	UWBP_panel_bevel_C* WBP_panel_bevel_C_3; // 0x668
	int32_t CurrentPopupId; // 0x670
	TArray<UWBP_StandardButton_02_C*> Buttons; // 0x678
	PGAME_INPUT_STATE CurrentInputState; // 0x688
	bool BackHeldOnShown; // 0x689
	TArray<FName> ActionMapKeysToAllow; // 0x690
	TArray<FKey> KeysToAllowDownUp; // 0x6a0
	UAkAudioEvent* CancelClickPopupManSFX; // 0x6b0
};

struct UWBP_TextChat_C : UKSTextChatWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x560
	UWBP_TextChat_ChatWindow_C* ChatWindow; // 0x568
	UButton* ClickCatcher; // 0x570
	UWBP_TextChat_Input_C* TextInput; // 0x578
	bool IsEditingActive; // 0x580
	float ChatMessageAutoHideDelay; // 0x584
	FPUMG_ActiveChatChannelData CachedCurrentChannel; // 0x588
	bool NeedToClearFocus; // 0x598
	TArray<FKey> CancelKeys; // 0x5a0
	bool WaitForCancelReleaseToClearFocus; // 0x5b0
};

struct UKSWeaponHubHelper : UObject {
	UDataTable* WeaponCategoryDetailsTable; // 0x28
	UKSWeaponMasteryManager* WeaponMasteryManager; // 0x30
};

struct UKSWrapSelectionEntry : UKSWidget {
	FMulticastInlineDelegate OnWrapEquip; // 0x520
	FMulticastInlineDelegate OnWrapPreview; // 0x530
	FMulticastInlineDelegate OnStoreWrapSelect; // 0x540
};

struct UListView : UListViewBase {
	EOrientation Orientation; // 0x2e0
	ESelectionMode SelectionMode; // 0x2e1
	EConsumeMouseWheel ConsumeMouseWheel; // 0x2e2
	bool bClearSelectionOnClick; // 0x2e3
	bool bIsFocusable; // 0x2e4
	float EntrySpacing; // 0x2e8
	bool bReturnFocusToSelection; // 0x2ec
	TArray<UObject*> ListItems; // 0x2f0
	FMulticastInlineDelegate BP_OnEntryInitialized; // 0x310
	FMulticastInlineDelegate BP_OnItemClicked; // 0x320
	FMulticastInlineDelegate BP_OnItemDoubleClicked; // 0x330
	FMulticastInlineDelegate BP_OnItemIsHoveredChanged; // 0x340
	FMulticastInlineDelegate BP_OnItemSelectionChanged; // 0x350
	FMulticastInlineDelegate BP_OnItemScrolledIntoView; // 0x360
	FMulticastInlineDelegate BP_OnListViewScrolled; // 0x370
};

struct UMaterialExpression : UObject {
	UMaterial* Material; // 0x28
	UMaterialFunction* Function; // 0x30
	char bIsParameterExpression : 1; // 0x38
};

struct UParticleModuleTrailSource : UParticleModuleTrailBase {
	ETrail2SourceMethod SourceMethod; // 0x30
	FName SourceName; // 0x34
	FRawDistributionFloat SourceStrength; // 0x40
	char bLockSourceStength : 1; // 0x70
	int32_t SourceOffsetCount; // 0x74
	TArray<FVector> SourceOffsetDefaults; // 0x78
	EParticleSourceSelectionMethod SelectionMethod; // 0x88
	char bInheritRotation : 1; // 0x8c
};

struct UMaterialExpressionCustom : UMaterialExpression {
	FString Code; // 0x40
	ECustomMaterialOutputType OutputType; // 0x50
	FString Description; // 0x58
	TArray<FCustomInput> Inputs; // 0x68
	TArray<FCustomDefine> AdditionalDefines; // 0x78
	TArray<FString> IncludeFilePaths; // 0x88
};

struct AKSArmor : AKSWeapon {
	float Durability; // 0x6d8
	bool bArmorIsBroken; // 0x6dc
};

struct UWBP_StandardButtonMedium_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UWidgetAnimation* OnClick; // 0x528
	UWidgetAnimation* Highlight; // 0x530
	UImage* BtnBkg; // 0x538
	UImage* BtnBkgHover; // 0x540
	UImage* BtnBkgRedButton; // 0x548
	UImage* BtnClickImage; // 0x550
	UImage* BtnEdge; // 0x558
	UImage* BtnEdgeHover; // 0x560
	UImage* BtnFrame; // 0x568
	UImage* BtnFrameHover; // 0x570
	UOverlay* BtnStandardWrapper; // 0x578
	UTextBlock* ButtonText; // 0x580
	UButton* HitTarget; // 0x588
	UOverlay* HoverWrapper; // 0x590
	UWBP_KeyCallout_C* KeyPrompt; // 0x598
	UCanvasPanel* KeyPromptContainer; // 0x5a0
	USizeBox* SizeWrapper; // 0x5a8
	FMulticastInlineDelegate OnClicked; // 0x5b0
	FMulticastInlineDelegate OnHovered; // 0x5c0
	FMulticastInlineDelegate OnUnhovered; // 0x5d0
	UAkAudioEvent* ClickMedBtnSFX; // 0x5e0
	FText DefaultButtonText; // 0x5e8
	float DefaultWidth; // 0x600
	bool ShowPromptOnFocus; // 0x604
	FKey PromptKey; // 0x608
	UAkAudioEvent* HoverMedBtnSFX; // 0x620
	bool IsConfirm; // 0x628
	bool IsCancel; // 0x629
	bool IsRedButton; // 0x62a
};

struct UWBP_StorePriceTag_C : UKSPriceTag {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UKSAsyncImage* CurrencyIcon; // 0x528
	UWidgetSwitcher* CurrencySwitcher; // 0x530
	UImage* Image_136; // 0x538
	UOverlay* OriginalPortalPriceWrapper; // 0x540
	UTextBlock* OriginalPrice; // 0x548
	UCanvasPanel* OriginalPriceContainer; // 0x550
	UTextBlock* OriginalRealMoneyPrice; // 0x558
	UTextBlock* PriceAmount; // 0x560
	UTextBlock* RealMoneyPrice; // 0x568
	UImage* strikethrough; // 0x570
	bool bIndicateNotEnoughCurrency; // 0x578
	FLinearColor PriceColor; // 0x57c
	FLinearColor OriginalPriceColor; // 0x58c
};

struct UMovieSceneColorTrack : UMovieScenePropertyTrack {
	bool bIsSlateColor; // 0x88
};

struct UWBP_RedeemCodeField_C : UKSWidget {
	FPointerToUberGraphFrame UberGraphFrame; // 0x520
	UEditableTextBox* CodeEntry; // 0x528
	FMulticastInlineDelegate OnTextChanged; // 0x530
	FMulticastInlineDelegate OnTextCommitted; // 0x540
};

struct UKSBoxDeadZoneFilter : UKSAnalogStickFilter {
	FVector2D InnerDeadZone; // 0x38
	FVector2D OuterDeadZone; // 0x40
};

struct UKSBTTask_LookInDirection : UBTTaskNode {
	FBlackboardKeySelector DirectionKey; // 0x70
	float LookRotationRate; // 0x98
};

struct UAISenseConfig_Hearing : UAISenseConfig {
	UAISense_Hearing* Implementation; // 0x48
	float HearingRange; // 0x50
	float LoSHearingRange; // 0x54
	char bUseLoSHearing : 1; // 0x58
	FAISenseAffiliationFilter DetectionByAffiliation; // 0x5c
};

struct UMaterialExpressionLandscapeGrassOutput : UMaterialExpressionCustomOutput {
	TArray<FGrassInput> GrassTypes; // 0x40
};

struct AKSBuild_APS : AKSBuild {
	USphereComponent* DetectionSphere; // 0x3a8
	float DetectionSphereRadius; // 0x3b0
	int32_t MaxProjectilesDestroyed; // 0x3b4
	float TimeToActivate; // 0x3b8
	TArray<AKSProjectile*> MarkedProjectiles; // 0x3c0
	bool bIsActive; // 0x3d4
};

